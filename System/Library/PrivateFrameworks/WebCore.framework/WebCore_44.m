void sub_19526AC80(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  uint64_t v6;
  WTF *v7;
  WTF *v9;
  uint64_t v11;
  WTF *v12;
  WTF *v14;
  uint64_t v16;
  WTF *v17;
  WTF *v19;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  const void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v38;

  v5 = __ldxr(v3);
  if (v5 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::layerToPlatformLayerMapLock);
LABEL_6:
  if (*(_BYTE *)(v2 + 200))
  {
    v6 = *(_QWORD *)(v2 + 192);
    *(_QWORD *)(v2 + 192) = 0;
    if (v6)
    {
      v7 = *(WTF **)(v6 + 144);
      if ((WTF *)(v6 + 160) != v7 && v7 != 0)
      {
        *(_QWORD *)(v6 + 144) = 0;
        *(_DWORD *)(v6 + 152) = 0;
        WTF::fastFree(v7, a2);
      }
      v9 = *(WTF **)v6;
      if (v6 + 16 != *(_QWORD *)v6 && v9 != 0)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
        WTF::fastFree(v9, a2);
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v11 = *(_QWORD *)(v2 + 168);
  *(_QWORD *)(v2 + 168) = 0;
  if (v11)
  {
    v12 = *(WTF **)(v11 + 144);
    if ((WTF *)(v11 + 160) != v12 && v12 != 0)
    {
      *(_QWORD *)(v11 + 144) = 0;
      *(_DWORD *)(v11 + 152) = 0;
      WTF::fastFree(v12, a2);
    }
    v14 = *(WTF **)v11;
    if (v11 + 16 != *(_QWORD *)v11 && v14 != 0)
    {
      *(_QWORD *)v11 = 0;
      *(_DWORD *)(v11 + 8) = 0;
      WTF::fastFree(v14, a2);
    }
    WTF::fastFree((WTF *)v11, a2);
  }
  v16 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;
  if (v16)
  {
    v17 = *(WTF **)(v16 + 144);
    if ((WTF *)(v16 + 160) != v17 && v17 != 0)
    {
      *(_QWORD *)(v16 + 144) = 0;
      *(_DWORD *)(v16 + 152) = 0;
      WTF::fastFree(v17, a2);
    }
    v19 = *(WTF **)v16;
    if (v16 + 16 != *(_QWORD *)v16 && v19 != 0)
    {
      *(_QWORD *)v16 = 0;
      *(_DWORD *)(v16 + 8) = 0;
      WTF::fastFree(v19, a2);
    }
    WTF::fastFree((WTF *)v16, a2);
  }
  v21 = *(unsigned int *)(v2 + 124);
  if ((_DWORD)v21)
  {
    v33 = (uint64_t *)(*(_QWORD *)(v2 + 112) + 16);
    v34 = 24 * v21;
    do
    {
      v35 = *v33;
      *v33 = 0;
      if (v35)
      {
        v36 = *(WTF **)(v35 + 144);
        if ((WTF *)(v35 + 160) != v36 && v36 != 0)
        {
          *(_QWORD *)(v35 + 144) = 0;
          *(_DWORD *)(v35 + 152) = 0;
          WTF::fastFree(v36, a2);
        }
        v38 = *(WTF **)v35;
        if (v35 + 16 != *(_QWORD *)v35 && v38 != 0)
        {
          *(_QWORD *)v35 = 0;
          *(_DWORD *)(v35 + 8) = 0;
          WTF::fastFree(v38, a2);
        }
        WTF::fastFree((WTF *)v35, a2);
      }
      v33 += 3;
      v34 -= 24;
    }
    while (v34);
  }
  v22 = *(WTF **)(v2 + 112);
  if (v22)
  {
    *(_QWORD *)(v2 + 112) = 0;
    *(_DWORD *)(v2 + 120) = 0;
    WTF::fastFree(v22, a2);
  }
  v23 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 104) = 0;
  if (v23)
  {
    v24 = *(WTF **)(v23 + 144);
    if ((WTF *)(v23 + 160) != v24 && v24 != 0)
    {
      *(_QWORD *)(v23 + 144) = 0;
      *(_DWORD *)(v23 + 152) = 0;
      WTF::fastFree(v24, a2);
    }
    v26 = *(WTF **)v23;
    if (v23 + 16 != *(_QWORD *)v23 && v26 != 0)
    {
      *(_QWORD *)v23 = 0;
      *(_DWORD *)(v23 + 8) = 0;
      WTF::fastFree(v26, a2);
    }
    WTF::fastFree((WTF *)v23, a2);
  }
  v28 = *(WTF **)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;
  if (v28)
    WTF::fastFree(v28, a2);
  v29 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  if (v29)
  {
    v30 = (WTF *)WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, a2);
    WTF::fastFree(v30, v31);
  }
  v32 = *(const void **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v32)
    CFRelease(v32);
  WebCore::PlatformCALayer::~PlatformCALayer((WebCore::PlatformCALayer *)v2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformCALayerCocoa::animationStarted(WebCore::PlatformCALayerCocoa *this, const WTF::String *a2, __n128 a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    return (*(uint64_t (**)(uint64_t, const WTF::String *, __n128))(*(_QWORD *)result + 32))(result, a2, a3);
  return result;
}

uint64_t WebCore::PlatformCALayerCocoa::animationEnded(WebCore::PlatformCALayerCocoa *this, const WTF::String *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    return (*(uint64_t (**)(uint64_t, const WTF::String *))(*(_QWORD *)result + 40))(result, a2);
  return result;
}

uint64_t WebCore::PlatformCALayerCocoa::setNeedsDisplay(uint64_t this)
{
  if (*(_BYTE *)(this + 209))
    return objc_msgSend(*(id *)(this + 32), "setNeedsDisplay");
  return this;
}

uint64_t WebCore::PlatformCALayerCocoa::setNeedsDisplayInRect(uint64_t this, const WebCore::FloatRect *a2)
{
  if (*(_BYTE *)(this + 209))
    return objc_msgSend(*(id *)(this + 32), "setNeedsDisplayInRect:", *(float *)a2, *((float *)a2 + 1), *((float *)a2 + 2), *((float *)a2 + 3));
  return this;
}

uint64_t WebCore::PlatformCALayerCocoa::needsDisplay(id *this)
{
  if (*((_BYTE *)this + 209))
    return objc_msgSend(this[4], "needsDisplay");
  else
    return 0;
}

uint64_t WebCore::PlatformCALayerCocoa::copyContentsFromLayer(id *this, WebCore::PlatformCALayer *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = (void *)*((_QWORD *)a2 + 4);
  v4 = objc_msgSend(this[4], "contents");
  v5 = objc_msgSend(v3, "contents");
  v6 = this[4];
  if (v4 == v5)
    return objc_msgSend(v6, "reloadValueForKeyPath:", CFSTR("contents"));
  else
    return objc_msgSend(v6, "setContents:", objc_msgSend(v3, "contents"));
}

uint64_t WebCore::PlatformCALayerCocoa::superlayer(id *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v1 = objc_msgSend(this[4], "superlayer");
  WebCore::PlatformCALayer::platformCALayerForLayer(v1, v2, &v5);
  v3 = v5;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  return v3;
}

uint64_t WebCore::PlatformCALayerCocoa::removeFromSuperlayer(id *this)
{
  return objc_msgSend(this[4], "removeFromSuperlayer");
}

void WebCore::PlatformCALayerCocoa::setSublayers(uint64_t a1, uint64_t *a2)
{
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;

  v2 = *(void **)(a1 + 32);
  if (*((_DWORD *)a2 + 3))
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)a2 + 3));
    v5 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v5)
    {
      v6 = *a2;
      v7 = 8 * v5;
      do
      {
        v8 = *(const void **)(*(_QWORD *)v6 + 32);
        if (v8)
        {
          CFRetain(*(CFTypeRef *)(*(_QWORD *)v6 + 32));
          objc_msgSend(v4, "addObject:", v8);
          CFRelease(v8);
        }
        v6 += 8;
        v7 -= 8;
      }
      while (v7);
    }
    objc_msgSend(v2, "setSublayers:", v4);
    if (v4)
      CFRelease(v4);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setSublayers:", 0);
  }
}

uint64_t WebCore::PlatformCALayerCocoa::removeAllSublayers(id *this)
{
  return objc_msgSend(this[4], "setSublayers:", 0);
}

void WebCore::PlatformCALayerCocoa::sublayersForLogging(id *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  _QWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  v3 = (void *)objc_msgSend(this[4], "sublayers");
  v4 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v4 = MEMORY[0x1E0C809A0];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtr<void ()(CALayer *,unsigned long,BOOL *)>::fromCallable<WebCore::PlatformCALayerCocoa::sublayersForLogging(void)::$_0>(WebCore::PlatformCALayerCocoa::sublayersForLogging(void)::$_0)::{lambda(void *,CALayer *,unsigned long,BOOL *)#1}::__invoke;
  v4[3] = &WTF::BlockPtr<void ()(CALayer *,unsigned long,BOOL *)>::fromCallable<WebCore::PlatformCALayerCocoa::sublayersForLogging(void)::$_0>(WebCore::PlatformCALayerCocoa::sublayersForLogging(void)::$_0)::descriptor;
  v4[4] = a2;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v4);
  _Block_release(v4);
}

void sub_19526B3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  const void *v15;
  void *v18;
  NSException *v19;

  _Block_release(v15);
  if (a2 != 1)
  {
    WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, v18);
    _Unwind_Resume(a1);
  }
  v19 = (NSException *)objc_begin_catch(a1);
  ReportBlockedObjCException(v19);
  objc_end_catch();
}

uint64_t WebCore::PlatformCALayerCocoa::appendSublayer(id *this, WebCore::PlatformCALayer *a2)
{
  return objc_msgSend(this[4], "addSublayer:", *((_QWORD *)a2 + 4));
}

uint64_t WebCore::PlatformCALayerCocoa::insertSublayer(id *this, WebCore::PlatformCALayer *a2, uint64_t a3)
{
  return objc_msgSend(this[4], "insertSublayer:atIndex:", *((_QWORD *)a2 + 4), a3);
}

uint64_t WebCore::PlatformCALayerCocoa::replaceSublayer(id *this, WebCore::PlatformCALayer *a2, WebCore::PlatformCALayer *a3)
{
  return objc_msgSend(this[4], "replaceSublayer:with:", *((_QWORD *)a2 + 4), *((_QWORD *)a3 + 4));
}

uint64_t WebCore::PlatformCALayerCocoa::adoptSublayers(id *this, id *a2)
{
  return objc_msgSend(this[4], "setSublayers:", objc_msgSend(a2[4], "sublayers"));
}

uint64_t WebCore::PlatformCALayerCocoa::addAnimationForKey(WebCore::PlatformCALayerCocoa *this, const WTF::String *a2, WebCore::PlatformCAAnimation *a3)
{
  WebAnimationDelegate *v6;
  const void *v7;
  void *v8;
  void *v9;
  const __CFString *v10;

  if (!*((_QWORD *)this + 7))
  {
    v6 = objc_alloc_init(WebAnimationDelegate);
    -[WebAnimationDelegate setOwner:](v6, "setOwner:", this);
    v7 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v6;
    if (v7)
      CFRelease(v7);
  }
  if (((*(uint64_t (**)(WebCore::PlatformCAAnimation *))(*(_QWORD *)a3 + 16))(a3) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19526B65CLL);
  }
  v8 = (void *)*((_QWORD *)a3 + 2);
  if (!objc_msgSend(v8, "delegate"))
    objc_msgSend(v8, "setDelegate:", *((_QWORD *)this + 7));
  v9 = (void *)*((_QWORD *)this + 4);
  if (*(_QWORD *)a2)
    v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v10 = &stru_1E3487BC0;
  return objc_msgSend(v9, "addAnimation:forKey:", v8, v10);
}

void sub_19526B66C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformCALayerCocoa::removeAnimationForKey(WebCore::PlatformCALayerCocoa *this, const WTF::String *a2)
{
  void *v2;
  const __CFString *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (*(_QWORD *)a2)
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E3487BC0;
  return objc_msgSend(v2, "removeAnimationForKey:", v3);
}

WebCore::PlatformCAAnimationCocoa *WebCore::PlatformCALayerCocoa::animationForKey@<X0>(WebCore::PlatformCALayerCocoa *this@<X0>, const WTF::String *a2@<X1>, WebCore::PlatformCAAnimationCocoa **a3@<X8>)
{
  void *v4;
  const __CFString *v5;
  WebCore::PlatformCAAnimationCocoa *result;
  CAAnimation *v7;
  WebCore::PlatformCAAnimationCocoa *v8;

  v4 = (void *)*((_QWORD *)this + 4);
  if (*(_QWORD *)a2)
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E3487BC0;
  result = (WebCore::PlatformCAAnimationCocoa *)objc_msgSend(v4, "animationForKey:", v5);
  if (result)
  {
    v7 = (CAAnimation *)result;
    v8 = (WebCore::PlatformCAAnimationCocoa *)WTF::fastMalloc((WTF *)0x18);
    result = WebCore::PlatformCAAnimationCocoa::PlatformCAAnimationCocoa(v8, v7);
  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
  return result;
}

void sub_19526B7A0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformCALayerCocoa::setMaskLayer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  if (*a2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    v5 = *a2;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  *a2 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E334ED68;
      v11[1] = v7;
      v12 = v11;
      WTF::ensureOnMainThread();
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  return objc_msgSend(*(id *)(a1 + 32), "setMask:", v4);
}

void sub_19526B884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformCALayerCocoa::setIsBackdropRoot(id *this, uint64_t a2)
{
  return objc_msgSend(this[4], "setShouldRasterize:", a2);
}

uint64_t WebCore::PlatformCALayerCocoa::isHidden(id *this)
{
  return objc_msgSend(this[4], "isHidden");
}

uint64_t WebCore::PlatformCALayerCocoa::setHidden(id *this, uint64_t a2)
{
  return objc_msgSend(this[4], "setHidden:", a2);
}

uint64_t WebCore::PlatformCALayerCocoa::contentsHidden(WebCore::PlatformCALayerCocoa *this)
{
  return 0;
}

uint64_t WebCore::PlatformCALayerCocoa::userInteractionEnabled(WebCore::PlatformCALayerCocoa *this)
{
  return 1;
}

uint64_t WebCore::PlatformCALayerCocoa::setBackingStoreAttached(uint64_t this, int a2)
{
  void *v2;

  if (*(unsigned __int8 *)(this + 209) != a2)
  {
    *(_BYTE *)(this + 209) = a2;
    v2 = *(void **)(this + 32);
    if (a2)
      return objc_msgSend(v2, "setNeedsDisplay");
    else
      return objc_msgSend(v2, "setContents:", 0);
  }
  return this;
}

uint64_t WebCore::PlatformCALayerCocoa::clearContents(id *this)
{
  return objc_msgSend(this[4], "setContents:", 0);
}

uint64_t WebCore::PlatformCALayerCocoa::backingStoreAttached(WebCore::PlatformCALayerCocoa *this)
{
  return *((unsigned __int8 *)this + 209);
}

uint64_t WebCore::PlatformCALayerCocoa::geometryFlipped(id *this)
{
  return objc_msgSend(this[4], "isGeometryFlipped");
}

uint64_t WebCore::PlatformCALayerCocoa::setGeometryFlipped(id *this, uint64_t a2)
{
  return objc_msgSend(this[4], "setGeometryFlipped:", a2);
}

uint64_t WebCore::PlatformCALayerCocoa::acceleratesDrawing(id *this)
{
  return objc_msgSend(this[4], "drawsAsynchronously");
}

uint64_t WebCore::PlatformCALayerCocoa::setAcceleratesDrawing(id *this, uint64_t a2)
{
  return objc_msgSend(this[4], "setDrawsAsynchronously:", a2);
}

uint64_t WebCore::PlatformCALayerCocoa::wantsDeepColorBackingStore(WebCore::PlatformCALayerCocoa *this)
{
  return *((unsigned __int8 *)this + 208);
}

uint64_t WebCore::PlatformCALayerCocoa::setWantsDeepColorBackingStore(uint64_t this, uint64_t a2)
{
  int v2;
  BOOL v3;

  if (*(unsigned __int8 *)(this + 208) != (_DWORD)a2)
  {
    *(_BYTE *)(this + 208) = a2;
    v2 = *(unsigned __int8 *)(this + 12);
    if ((v2 & 0xFE) == 4)
    {
      return objc_msgSend(*(id *)(this + 32), "setWantsDeepColorBackingStore:", a2);
    }
    else
    {
      v3 = v2 == 6 || v2 == 1;
      if (v3 && (_DWORD)a2)
      {
        if (*MEMORY[0x1E0CD29E0])
          return objc_msgSend(*(id *)(this + 32), "setContentsFormat:");
      }
    }
  }
  return this;
}

BOOL WebCore::PlatformCALayerCocoa::hasContents(id *this)
{
  return objc_msgSend(this[4], "contents") != 0;
}

uint64_t WebCore::PlatformCALayerCocoa::setDelegatedContents(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = a2[1];
  if (!v4)
    return objc_msgSend(*(id *)(a1 + 32), "setContents:", *(_QWORD *)(*a2 + 48));
  result = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v4 + 16))(v4, 5.0);
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "setContents:", *(_QWORD *)(*a2 + 48));
  return result;
}

uint64_t WebCore::PlatformCALayerCocoa::setContentsRect(id *this, const WebCore::FloatRect *a2)
{
  return objc_msgSend(this[4], "setContentsRect:", *(float *)a2, *((float *)a2 + 1), *((float *)a2 + 2), *((float *)a2 + 3));
}

uint64_t WebCore::PlatformCALayerCocoa::setMinificationFilter(uint64_t a1, int a2)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  if (a2 == 2)
  {
    v3 = (uint64_t *)MEMORY[0x1E0CD2EF8];
  }
  else if (a2 == 1)
  {
    v3 = (uint64_t *)MEMORY[0x1E0CD2E68];
  }
  else
  {
    if (a2)
    {
      v4 = 0;
      return objc_msgSend(v2, "setMinificationFilter:", v4);
    }
    v3 = (uint64_t *)MEMORY[0x1E0CD2DF0];
  }
  v4 = *v3;
  return objc_msgSend(v2, "setMinificationFilter:", v4);
}

uint64_t WebCore::PlatformCALayerCocoa::setMagnificationFilter(uint64_t a1, int a2)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  if (a2 == 2)
  {
    v3 = (uint64_t *)MEMORY[0x1E0CD2EF8];
  }
  else if (a2 == 1)
  {
    v3 = (uint64_t *)MEMORY[0x1E0CD2E68];
  }
  else
  {
    if (a2)
    {
      v4 = 0;
      return objc_msgSend(v2, "setMagnificationFilter:", v4);
    }
    v3 = (uint64_t *)MEMORY[0x1E0CD2DF0];
  }
  v4 = *v3;
  return objc_msgSend(v2, "setMagnificationFilter:", v4);
}

uint64_t WebCore::PlatformCALayerCocoa::setBorderWidth(id *this, float a2)
{
  return objc_msgSend(this[4], "setBorderWidth:", a2);
}

void WebCore::PlatformCALayerCocoa::setBorderColor(WebCore::PlatformCALayerCocoa *this, const WebCore::Color *a2)
{
  void *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v2 = (void *)*((_QWORD *)this + 4);
  if ((*((_BYTE *)a2 + 6) & 4) != 0)
  {
    WebCore::cachedCGColor(a2, a2, &cf);
    objc_msgSend(v2, "setBorderColor:", cf);
    v3 = cf;
    cf = 0;
    if (v3)
      CFRelease(v3);
  }
  else
  {
    objc_msgSend(*((id *)this + 4), "setBorderColor:", 0);
  }
}

void sub_19526BF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  NSException *v16;
  const void *v17;

  if (v17)
    CFRelease(v17);
  if (a2 == 1)
  {
    v16 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v16);
    objc_end_catch();
    JUMPOUT(0x19526BEE8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformCALayerCocoa::opacity(id *this)
{
  return objc_msgSend(this[4], "opacity");
}

uint64_t WebCore::PlatformCALayerCocoa::setOpacity(id *this, float a2)
{
  return objc_msgSend(this[4], "setOpacity:");
}

void WebCore::PlatformCALayerCocoa::setFilters(WebCore::PlatformCAFilters **this, CALayer *a2)
{
  WebCore::PlatformCAFilters::setFiltersOnLayer(this[4], a2, (const WebCore::FilterOperations *)*((unsigned __int8 *)this + 210));
}

uint64_t WebCore::PlatformCALayer::platformLayer(WebCore::PlatformCALayer *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::PlatformCALayerCocoa::setBlendMode(uint64_t a1, int a2)
{
  return WebCore::PlatformCAFilters::setBlendingFiltersOnLayer(*(void **)(a1 + 32), a2);
}

uint64_t WebCore::PlatformCALayerCocoa::setName(WebCore::PlatformCALayerCocoa *this, const WTF::String *a2)
{
  void *v2;
  const __CFString *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (*(_QWORD *)a2)
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E3487BC0;
  return objc_msgSend(v2, "setName:", v3);
}

uint64_t WebCore::PlatformCALayerCocoa::setSpeed(id *this, float a2)
{
  return objc_msgSend(this[4], "setSpeed:");
}

uint64_t WebCore::PlatformCALayerCocoa::setTimeOffset(id *this, double a2)
{
  return objc_msgSend(this[4], "setTimeOffset:", a2);
}

uint64_t WebCore::PlatformCALayerCocoa::setAntialiasesEdges(WebCore::PlatformCALayerCocoa *this, int a2)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (a2)
    v3 = 15;
  else
    v3 = 0;
  return objc_msgSend(v2, "setEdgeAntialiasingMask:", v3);
}

uint64_t WebCore::PlatformCALayerCocoa::videoGravity(id *this)
{
  void *v2;
  PAL *v3;
  PAL *v5;

  if ((objc_opt_respondsToSelector() & 1) == 0)
    return 1;
  v2 = (void *)objc_msgSend(this[4], "videoGravity");
  v3 = (PAL *)objc_msgSend(v2, "isEqualToString:", PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect((PAL *)v2));
  if ((v3 & 1) != 0)
    return 1;
  v5 = (PAL *)objc_msgSend(v2, "isEqualToString:", PAL::get_AVFoundation_AVLayerVideoGravityResizeAspectFill(v3));
  if ((v5 & 1) != 0)
    return 2;
  else
    return objc_msgSend(v2, "isEqualToString:", PAL::get_AVFoundation_AVLayerVideoGravityResize(v5)) ^ 1;
}

uint64_t WebCore::PlatformCALayerCocoa::setVideoGravity(uint64_t a1, int a2)
{
  uint64_t result;
  void *v5;
  uint64_t AVFoundation_AVLayerVideoGravityResizeAspectFill;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v5 = *(void **)(a1 + 32);
    if (a2)
    {
      if (a2 == 2)
        AVFoundation_AVLayerVideoGravityResizeAspectFill = PAL::get_AVFoundation_AVLayerVideoGravityResizeAspectFill((PAL *)result);
      else
        AVFoundation_AVLayerVideoGravityResizeAspectFill = PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect((PAL *)result);
    }
    else
    {
      AVFoundation_AVLayerVideoGravityResizeAspectFill = PAL::get_AVFoundation_AVLayerVideoGravityResize((PAL *)result);
    }
    return objc_msgSend(v5, "setVideoGravity:", AVFoundation_AVLayerVideoGravityResizeAspectFill);
  }
  return result;
}

uint64_t WebCore::PlatformCALayerCocoa::shapeWindRule(id *this)
{
  void *v1;

  v1 = (void *)objc_msgSend(this[4], "fillRule");
  return objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0CD2B70]);
}

uint64_t WebCore::PlatformCALayerCocoa::setShapeWindRule(uint64_t a1, int a2)
{
  _QWORD *v2;
  void *v3;

  v2 = (_QWORD *)MEMORY[0x1E0CD2B70];
  v3 = *(void **)(a1 + 32);
  if (!a2)
    v2 = (_QWORD *)MEMORY[0x1E0CD2B78];
  return objc_msgSend(v3, "setFillRule:", *v2);
}

uint64_t WebCore::PlatformCALayerCocoa::shapePath@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  CGMutablePathRef MutableCopy;
  uint64_t result;

  MutableCopy = CGPathCreateMutableCopy((CGPathRef)objc_msgSend(this[4], "path"));
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3412578;
  *(_QWORD *)(result + 16) = MutableCopy;
  *(_QWORD *)(a2 + 8) = result;
  *(_DWORD *)(a2 + 64) = 2;
  return result;
}

uint64_t WebCore::PlatformCALayerCocoa::setShapePath(id *this, const WebCore::Path *a2)
{
  return objc_msgSend(this[4], "setPath:", WebCore::Path::platformPath(a2));
}

WTF *WebCore::PlatformCALayerCocoa::setEventRegion(WebCore::PlatformCALayerCocoa *this, const WebCore::EventRegion *a2)
{
  WTF *result;
  void *v5;
  WTF **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  WTF *v20;
  WTF *v22;
  uint64_t v24;
  WTF *v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF *v37;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  const WebCore::Region *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  WTF *v50;
  WTF *v52;

  result = (WTF *)WebCore::Region::operator=((uint64_t)this + 88, a2);
  if (a2 != result)
  {
    v6 = (WTF **)((char *)this + 112);
    v7 = *((unsigned int *)this + 31);
    v8 = *((unsigned int *)a2 + 9);
    if (v7 <= v8)
    {
      v16 = *((_DWORD *)this + 30);
      if (v8 > v16)
      {
        if (v16)
        {
          if ((_DWORD)v7)
          {
            v17 = 24 * v7;
            v18 = (uint64_t *)((char *)*v6 + 16);
            do
            {
              v19 = *v18;
              *v18 = 0;
              if (v19)
              {
                v20 = *(WTF **)(v19 + 144);
                if ((WTF *)(v19 + 160) != v20 && v20 != 0)
                {
                  *(_QWORD *)(v19 + 144) = 0;
                  *(_DWORD *)(v19 + 152) = 0;
                  WTF::fastFree(v20, v5);
                }
                v22 = *(WTF **)v19;
                if (v19 + 16 != *(_QWORD *)v19 && v22 != 0)
                {
                  *(_QWORD *)v19 = 0;
                  *(_DWORD *)(v19 + 8) = 0;
                  WTF::fastFree(v22, v5);
                }
                WTF::fastFree((WTF *)v19, v5);
              }
              v18 += 3;
              v17 -= 24;
            }
            while (v17);
            *((_DWORD *)this + 31) = 0;
          }
          result = *v6;
          if (*v6)
          {
            *((_QWORD *)this + 14) = 0;
            *((_DWORD *)this + 30) = 0;
            result = (WTF *)WTF::fastFree(result, v5);
          }
        }
        v24 = *((unsigned int *)a2 + 9);
        if (*((_DWORD *)this + 30) < v24)
        {
          if (v24 >= 0xAAAAAAB)
          {
            __break(0xC471u);
            return result;
          }
          v25 = (WTF *)*((_QWORD *)this + 14);
          v26 = *((_DWORD *)this + 31);
          v27 = 24 * v24;
          v28 = WTF::fastMalloc((WTF *)(24 * v24));
          *((_DWORD *)this + 30) = (v27 & 0xFFFFFFF8) / 0x18;
          *((_QWORD *)this + 14) = v28;
          if (v26)
          {
            v30 = v28;
            v31 = (WTF *)((char *)v25 + 24 * v26);
            v32 = v25;
            do
            {
              *(_OWORD *)v30 = *(_OWORD *)v32;
              v33 = *((_QWORD *)v32 + 2);
              *((_QWORD *)v32 + 2) = 0;
              *(_QWORD *)(v30 + 16) = v33;
              v34 = *((_QWORD *)v32 + 2);
              *((_QWORD *)v32 + 2) = 0;
              if (v34)
              {
                v35 = *(WTF **)(v34 + 144);
                if ((WTF *)(v34 + 160) != v35 && v35 != 0)
                {
                  *(_QWORD *)(v34 + 144) = 0;
                  *(_DWORD *)(v34 + 152) = 0;
                  WTF::fastFree(v35, v29);
                }
                v37 = *(WTF **)v34;
                if (v34 + 16 != *(_QWORD *)v34 && v37 != 0)
                {
                  *(_QWORD *)v34 = 0;
                  *(_DWORD *)(v34 + 8) = 0;
                  WTF::fastFree(v37, v29);
                }
                WTF::fastFree((WTF *)v34, v29);
              }
              v32 = (WTF *)((char *)v32 + 24);
              v30 += 24;
            }
            while (v32 != v31);
          }
          if (v25)
          {
            if (*v6 == v25)
            {
              *((_QWORD *)this + 14) = 0;
              *((_DWORD *)this + 30) = 0;
            }
            WTF::fastFree(v25, v29);
          }
        }
      }
      v8 = *((unsigned int *)this + 31);
    }
    else
    {
      v9 = 24 * v7 - 24 * v8;
      v10 = (uint64_t *)((char *)*v6 + 24 * v8 + 16);
      do
      {
        v11 = *v10;
        *v10 = 0;
        if (v11)
        {
          v12 = *(WTF **)(v11 + 144);
          if ((WTF *)(v11 + 160) != v12 && v12 != 0)
          {
            *(_QWORD *)(v11 + 144) = 0;
            *(_DWORD *)(v11 + 152) = 0;
            WTF::fastFree(v12, v5);
          }
          v14 = *(WTF **)v11;
          if (v11 + 16 != *(_QWORD *)v11 && v14 != 0)
          {
            *(_QWORD *)v11 = 0;
            *(_DWORD *)(v11 + 8) = 0;
            WTF::fastFree(v14, v5);
          }
          WTF::fastFree((WTF *)v11, v5);
        }
        v10 += 3;
        v9 -= 24;
      }
      while (v9);
      *((_DWORD *)this + 31) = v8;
    }
    v39 = (_QWORD *)*((_QWORD *)a2 + 3);
    v40 = (uint64_t)*v6;
    if ((_DWORD)v8)
    {
      v41 = 24 * v8;
      do
      {
        v42 = WebCore::Region::operator=(v40, v39);
        v39 += 3;
        v40 = v42 + 24;
        v41 -= 24;
      }
      while (v41);
      v39 = (_QWORD *)*((_QWORD *)a2 + 3);
      v43 = *((_DWORD *)this + 31);
      v40 = *((_QWORD *)this + 14);
    }
    else
    {
      v43 = 0;
    }
    v44 = *((_DWORD *)a2 + 9);
    if (v43 != v44)
    {
      v45 = v40 + 24 * v43;
      v46 = (const WebCore::Region *)&v39[3 * v43];
      v47 = 24 * v44 - 24 * v43;
      do
      {
        v45 = WebCore::Region::Region(v45, v46) + 24;
        v46 = (const WebCore::Region *)((char *)v46 + 24);
        v47 -= 24;
      }
      while (v47);
      v43 = *((_DWORD *)a2 + 9);
    }
    *((_DWORD *)this + 31) = v43;
  }
  WebCore::Region::operator=((uint64_t)this + 128, (_QWORD *)a2 + 5);
  WebCore::Region::operator=((uint64_t)this + 152, (_QWORD *)a2 + 8);
  result = (WebCore::PlatformCALayerCocoa *)((char *)this + 176);
  v48 = (_QWORD *)((char *)a2 + 88);
  if (*((unsigned __int8 *)this + 200) == *((unsigned __int8 *)a2 + 112))
  {
    if (*((_BYTE *)this + 200))
      return (WTF *)WebCore::Region::operator=((uint64_t)result, v48);
  }
  else if (*((_BYTE *)this + 200))
  {
    v49 = *((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = 0;
    if (v49)
    {
      v50 = *(WTF **)(v49 + 144);
      if ((WTF *)(v49 + 160) != v50 && v50 != 0)
      {
        *(_QWORD *)(v49 + 144) = 0;
        *(_DWORD *)(v49 + 152) = 0;
        WTF::fastFree(v50, v48);
      }
      v52 = *(WTF **)v49;
      if (v49 + 16 != *(_QWORD *)v49 && v52 != 0)
      {
        *(_QWORD *)v49 = 0;
        *(_DWORD *)(v49 + 8) = 0;
        WTF::fastFree(v52, v48);
      }
      result = (WTF *)WTF::fastFree((WTF *)v49, v48);
    }
    *((_BYTE *)this + 200) = 0;
  }
  else
  {
    result = (WTF *)WebCore::Region::Region((uint64_t)result, (const WebCore::Region *)v48);
    *((_BYTE *)this + 200) = 1;
  }
  return result;
}

uint64_t WebCore::PlatformCALayerCocoa::tiledBacking(id *this)
{
  if ((*((_BYTE *)this + 12) & 0xFE) == 4)
    return objc_msgSend(this[4], "tiledBacking");
  else
    return 0;
}

uint64_t WebCore::PlatformCALayer::isWebLayer(WebCore::PlatformCALayer *this)
{
  objc_opt_class();
  return objc_opt_isKindOfClass() & 1;
}

uint64_t WebCore::PlatformCALayer::setBoundsOnMainThread(WebCore::PlatformCALayer *this, CGRect a2)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  const void *v7;
  CGFloat *v8;
  uint64_t result;
  uint64_t v10;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  WTF::RunLoop::main(this);
  v7 = (const void *)*((_QWORD *)this + 4);
  if (v7)
    CFRetain(v7);
  v8 = (CGFloat *)WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v8 = off_1E334ECF0;
  *((_QWORD *)v8 + 1) = v7;
  v8[2] = x;
  v8[3] = y;
  v8[4] = width;
  v8[5] = height;
  v10 = (uint64_t)v8;
  WTF::RunLoop::dispatch();
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

void sub_19526C914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformCALayer::setPositionOnMainThread(WebCore::PlatformCALayer *this, CGPoint a2)
{
  CGFloat y;
  CGFloat x;
  const void *v5;
  CGFloat *v6;
  uint64_t result;
  uint64_t v8;

  y = a2.y;
  x = a2.x;
  WTF::RunLoop::main(this);
  v5 = (const void *)*((_QWORD *)this + 4);
  if (v5)
    CFRetain(v5);
  v6 = (CGFloat *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = off_1E334ED18;
  *((_QWORD *)v6 + 1) = v5;
  v6[2] = x;
  v6[3] = y;
  v8 = (uint64_t)v6;
  WTF::RunLoop::dispatch();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

void sub_19526C9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PlatformCALayer::setAnchorPointOnMainThread(WTF::RunLoop *a1, float a2, float a3, float a4)
{
  const void *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  WTF::RunLoop::main(a1);
  v8 = (const void *)*((_QWORD *)a1 + 4);
  if (v8)
    CFRetain(v8);
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v9 = off_1E334ED40;
  *(_QWORD *)(v9 + 8) = v8;
  *(float *)(v9 + 16) = a2;
  *(float *)(v9 + 20) = a3;
  *(float *)(v9 + 24) = a4;
  v11 = v9;
  WTF::RunLoop::dispatch();
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

void sub_19526CAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WTF *__Block_byref_object_dispose__4(uint64_t a1, void *a2)
{
  WTF *result;

  result = *(WTF **)(a1 + 48);
  if ((WTF *)(a1 + 64) != result && result != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::PlatformCALayerCocoa::createCompatibleLayer@<X0>(int a1@<W1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0xD8);
  result = WebCore::PlatformCALayerCocoa::PlatformCALayerCocoa(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_19526CBD0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformCALayerCocoa::enumerateRectsBeingDrawn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CGRect *v5;
  uint64_t v7;
  int v8;
  int v9;
  CGAffineTransform v10;
  CGAffineTransform v11;
  CGAffineTransform v12;
  CGAffineTransform v13;
  CGRect v14;
  CGRect v15;

  if (objc_msgSend(*(id *)(a1 + 32), "regionBeingDrawn"))
  {
    memset(&v13, 0, sizeof(v13));
    (*(void (**)(CGAffineTransform *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 672))(&v11, a2, 1);
    v12 = v11;
    CGAffineTransformInvert(&v13, &v12);
    CGSRegionEnumerator();
    while (1)
    {
      v5 = (CGRect *)CGSNextRect();
      if (!v5)
        break;
      v14 = *v5;
      v10 = v13;
      v15 = CGRectApplyAffineTransform(v14, &v10);
      *(float *)&v15.origin.x = v15.origin.x;
      *(float *)&v15.origin.y = v15.origin.y;
      *(float *)&v15.size.width = v15.size.width;
      *(float *)&v15.size.height = v15.size.height;
      (*(void (**)(uint64_t, float, float, float, float))(a3 + 16))(a3, *(float *)&v15.origin.x, *(float *)&v15.origin.y, *(float *)&v15.size.width, *(float *)&v15.size.height);
    }
    return CGSReleaseRegionEnumerator();
  }
  else
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 512))(a2);
    return (*(uint64_t (**)(uint64_t, float, float, float, float))(a3 + 16))(a3, (float)(int)v7, (float)SHIDWORD(v7), (float)v8, (float)v9);
  }
}

uint64_t WebCore::PlatformCALayerCocoa::backingStoreBytesPerPixel(id *this)
{
  uint64_t v1;

  v1 = 4;
  if (*((_BYTE *)this + 208))
  {
    if (objc_msgSend(this[4], "isOpaque"))
      return 4;
    else
      return 5;
  }
  return v1;
}

void sub_19526CE64(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19526CFAC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::CachedResourceMediaLoader::~CachedResourceMediaLoader(WebCore::CachedResourceMediaLoader *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CachedResourceMediaLoader::~CachedResourceMediaLoader(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t *v4;
  WebCore::CachedResource *v5;
  void *v6;
  uint64_t v7;
  WTF *v8;

  v4 = (uint64_t *)((char *)this + 24);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v5 = *(WebCore::CachedResource **)(v3 + 8);
    if (v5)
    {
      WebCore::CachedResource::removeClient(v5, (unsigned int **)this);
      WebCore::CachedResourceHandleBase::setResource(v4, 0);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)v4, a2);
  *(_QWORD *)this = &off_1E33F87C8;
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, v6);
      else
        --*(_DWORD *)v8;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::CachedRawResourceClient::shouldCacheResponse()
{
  return 1;
}

uint64_t WebCore::CachedRawResourceClient::redirectReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_19526D034(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebCore::PlatformResourceMediaLoader::~PlatformResourceMediaLoader(WebCore::PlatformResourceMediaLoader *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::PlatformResourceMediaLoader::~PlatformResourceMediaLoader(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t (**v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v14 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v14)
      {
        v15 = *(_QWORD *)(v3 + 8);
        v16 = v15 + 16 * v14;
        v17 = off_1E334EC20;
        do
        {
          v18 = *(unsigned int **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = v17;
              v28 = v15;
              v29 = v16;
              v22 = v3;
              atomic_store(1u, v18);
              v23 = v18[6];
              if ((_DWORD)v23 != -1)
                ((void (*)(char *, unsigned int *))v17[v23])(&v30, v18 + 2);
              v18[6] = -1;
              WTF::fastFree((WTF *)v18, a2);
              v3 = v22;
              v15 = v28;
              v16 = v29;
              v17 = v21;
            }
          }
          v15 += 16;
        }
        while (v15 != v16);
      }
      v25 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v25 && v25 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v27 = v3;
        WTF::fastFree(v25, a2);
        v3 = v27;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v7);
LABEL_9:
    v9 = *(_QWORD *)(v7 + 8);
    v10 = v9 - 1;
    *(_QWORD *)(v7 + 8) = v9 - 1;
    if (v9 == 1)
    {
      v24 = *(_QWORD *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;
      v12 = v24 != 0;
    }
    else
    {
      v11 = 0;
      v12 = 1;
    }
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
      {
        if (v10)
          return;
LABEL_17:
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        if (!v12)
          WTF::fastFree((WTF *)v7, a2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      return;
    goto LABEL_17;
  }
}

uint64_t WebCore::PlatformResourceMediaLoader::redirectReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_19526D0B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformResourceMediaLoader::shouldCacheResponse()
{
  return 0;
}

uint64_t WebCore::PlatformResourceMediaLoader::accessControlCheckFailed(WebCore::PlatformResourceMediaLoader *this, WebCore::PlatformMediaResource *a2, const WebCore::ResourceError *a3)
{
  id *v4;
  void *v5;

  v4 = (id *)*((_QWORD *)this + 2);
  if (objc_msgSend(v4[4], "contentInformationRequest")
    && !objc_msgSend((id)objc_msgSend(v4[4], "contentInformationRequest"), "contentType"))
  {
    objc_msgSend((id)objc_msgSend(v4[4], "contentInformationRequest"), "setContentType:", &stru_1E3487BC0);
  }
  objc_msgSend(v4[4], "finishLoadingWithError:", WebCore::ResourceError::nsError(a3));
  return WebCore::WebCoreAVFResourceLoader::stopLoading((WebCore::WebCoreAVFResourceLoader *)v4, v5);
}

uint64_t WebCore::PlatformResourceMediaLoader::loadFailed(WebCore::PlatformResourceMediaLoader *this, WebCore::PlatformMediaResource *a2, const WebCore::ResourceError *a3)
{
  id *v4;
  void *v5;

  v4 = (id *)*((_QWORD *)this + 2);
  if (objc_msgSend(v4[4], "contentInformationRequest")
    && !objc_msgSend((id)objc_msgSend(v4[4], "contentInformationRequest"), "contentType"))
  {
    objc_msgSend((id)objc_msgSend(v4[4], "contentInformationRequest"), "setContentType:", &stru_1E3487BC0);
  }
  objc_msgSend(v4[4], "finishLoadingWithError:", WebCore::ResourceError::nsError(a3));
  return WebCore::WebCoreAVFResourceLoader::stopLoading((WebCore::WebCoreAVFResourceLoader *)v4, v5);
}

uint64_t WebCore::PlatformResourceMediaLoader::loadFinished(WebCore::PlatformResourceMediaLoader *this, WebCore::PlatformMediaResource *a2, const WebCore::NetworkLoadMetrics *a3)
{
  id *v3;
  void *v4;

  v3 = (id *)*((_QWORD *)this + 2);
  objc_msgSend(v3[4], "finishLoading", a3);
  return WebCore::WebCoreAVFResourceLoader::stopLoading((WebCore::WebCoreAVFResourceLoader *)v3, v4);
}

uint64_t WebCore::PlatformCALayer::hostingContextIdentifier(WebCore::PlatformCALayer *this)
{
  return 0;
}

uint64_t WebCore::PlatformCALayer::eventRegion(WebCore::PlatformCALayer *this)
{
  return 0;
}

uint64_t WebCore::PlatformCALayer::backingStoreBytesPerPixel(WebCore::PlatformCALayer *this)
{
  return 4;
}

void WebCore::GraphicsLayerAsyncContentsDisplayDelegateCocoa::~GraphicsLayerAsyncContentsDisplayDelegateCocoa(WebCore::GraphicsLayerAsyncContentsDisplayDelegateCocoa *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  const void *v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E334E600;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
    CFRelease(v11);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  const void *v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E334E600;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
    CFRelease(v11);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::GraphicsLayerAsyncContentsDisplayDelegateCocoa::isGraphicsLayerAsyncContentsDisplayDelegateCocoa(WebCore::GraphicsLayerAsyncContentsDisplayDelegateCocoa *this)
{
  return 1;
}

uint64_t WebCore::GraphicsLayerAsyncContentsDisplayDelegate::isGraphicsLayerCARemoteAsyncContentsDisplayDelegate(WebCore::GraphicsLayerAsyncContentsDisplayDelegate *this)
{
  return 0;
}

uint64_t WebCore::PlatformCAAnimationCocoa::isPlatformCAAnimationCocoa(WebCore::PlatformCAAnimationCocoa *this)
{
  return 1;
}

uint64_t WebCore::PlatformCAAnimation::isPlatformCAAnimationWin(WebCore::PlatformCAAnimation *this)
{
  return 0;
}

uint64_t WebCore::PlatformCAAnimation::isPlatformCAAnimationRemote(WebCore::PlatformCAAnimation *this)
{
  return 0;
}

uint64_t WebCore::PlatformCALayerCocoa::type(WebCore::PlatformCALayerCocoa *this)
{
  return 0;
}

uint64_t WebCore::PlatformCALayerCocoa::customSublayers(WebCore::PlatformCALayerCocoa *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t WebCore::PlatformCALayerCocoa::eventRegion(WebCore::PlatformCALayerCocoa *this)
{
  return (uint64_t)this + 88;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_17CachedRawResourceEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(int a1, unsigned int **this)
{
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_17CachedRawResourceEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(CALayer *,unsigned long,BOOL *)>::fromCallable<WebCore::PlatformCALayerCocoa::sublayersForLogging(void)::$_0>(WebCore::PlatformCALayerCocoa::sublayersForLogging(void)::$_0)::{lambda(void *,CALayer *,unsigned long,BOOL *)#1}::__invoke(uint64_t a1, WebCore::PlatformCALayer *this)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  result = (unsigned int *)WebCore::PlatformCALayer::platformCALayerForLayer((uint64_t)this, this, &v10);
  v4 = v10;
  if (v10)
  {
    result = *(unsigned int **)(a1 + 32);
    v5 = result[3];
    if ((_DWORD)v5 == result[2])
    {
      result = (unsigned int *)WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>&>((uint64_t)result, (unint64_t)&v10);
    }
    else
    {
      v6 = *(_QWORD *)result;
      v7 = (unsigned int *)(v10 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      *(_QWORD *)(v6 + 8 * v5) = v4;
      ++result[3];
    }
    v9 = v10;
    v10 = 0;
    if (v9)
      return WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
  }
  return result;
}

void sub_19526D5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>&>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;

  v3 = (uint64_t *)WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  if (*v3)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 12);
  }
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v9 + 1;
  return 1;
}

unint64_t WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void sub_19526D740(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  unsigned int **v3;
  unsigned int **v4;
  void *v6;
  uint64_t v7;
  WTF *v8;

  v4 = v3;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, a2);
  *v2 = &off_1E33F87C8;
  v7 = v2[1];
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (WTF *)v2[1];
    v2[1] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, v6);
      else
        --*(_DWORD *)v8;
    }
  }
  else
  {
    v2[1] = 0;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DataURLResourceMediaLoader::DataURLResourceMediaLoader(WebCore::WebCoreAVFResourceLoader &,WebCore::ResourceRequest &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E334EC50;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 3, a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataURLResourceMediaLoader::DataURLResourceMediaLoader(WebCore::WebCoreAVFResourceLoader &,WebCore::ResourceRequest &&)::$_0,void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = (uint64_t)off_1E334EC50;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 3, a2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataURLResourceMediaLoader::DataURLResourceMediaLoader(WebCore::WebCoreAVFResourceLoader &,WebCore::ResourceRequest &&)::$_0,void>::call(uint64_t a1)
{
  id **v2;
  uint64_t result;
  id *v4;
  void *v5;

  v2 = *(id ***)(a1 + 8);
  result = (uint64_t)*v2;
  if ((*v2)[5] == v2)
  {
    result = WebCore::WebCoreAVFResourceLoader::responseReceived((id *)result, (const WTF::StringImpl **)(a1 + 32), *(_DWORD *)(a1 + 40), (const WebCore::ParsedContentRange *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48));
    if ((result & 1) == 0)
    {
      result = WebCore::WebCoreAVFResourceLoader::newDataStoredInSharedBuffer(*v2, *(const WebCore::FragmentedSharedBuffer **)(a1 + 24));
      if ((result & 1) == 0)
      {
        v4 = *v2;
        objc_msgSend((*v2)[4], "finishLoading");
        return WebCore::WebCoreAVFResourceLoader::stopLoading((WebCore::WebCoreAVFResourceLoader *)v4, v5);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DataURLResourceMediaLoader::DataURLResourceMediaLoader(WebCore::WebCoreAVFResourceLoader &,WebCore::ResourceRequest &&)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E334EC78;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataURLResourceMediaLoader::DataURLResourceMediaLoader(WebCore::WebCoreAVFResourceLoader &,WebCore::ResourceRequest &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E334EC78;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::DataURLResourceMediaLoader::DataURLResourceMediaLoader(WebCore::WebCoreAVFResourceLoader &,WebCore::ResourceRequest &&)::$_1,void>::call(WTF::StringImpl *result)
{
  id **v1;
  id *v2;
  void *v3;
  WTF::StringImpl *v4;
  CFTypeRef v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  __int16 v12;
  CFTypeRef cf;
  char v14;

  v1 = (id **)*((_QWORD *)result + 1);
  v2 = *v1;
  if ((*v1)[5] == v1)
  {
    v8 = 0;
    v9 = 0;
    WTF::URL::invalidate((WTF::URL *)&v9);
    v10 = 0;
    v11 = 0;
    v12 = 1;
    cf = 0;
    v14 = 1;
    if (objc_msgSend(v2[4], "contentInformationRequest")
      && !objc_msgSend((id)objc_msgSend(v2[4], "contentInformationRequest"), "contentType"))
    {
      objc_msgSend((id)objc_msgSend(v2[4], "contentInformationRequest"), "setContentType:", &stru_1E3487BC0);
    }
    objc_msgSend(v2[4], "finishLoadingWithError:", WebCore::ResourceError::nsError((WebCore::ResourceError *)&v8));
    WebCore::WebCoreAVFResourceLoader::stopLoading((WebCore::WebCoreAVFResourceLoader *)v2, v3);
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
    v6 = v10;
    v10 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19526DD54(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef cf)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCoreAVFResourceLoader::stopLoading(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  const void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v14;

  *a1 = &off_1E334ECA0;
  v3 = (const void *)a1[4];
  a1[4] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = a1[1];
  a1[1] = 0;
  if (!v8)
    return a1;
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_13:
  v10 = *(_QWORD *)(v8 + 16) - 1;
  *(_QWORD *)(v8 + 16) = v10;
  if (v10)
  {
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    return a1;
  }
  v11 = *(_QWORD *)(v8 + 8);
  v12 = __ldxr((unsigned __int8 *)v8);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
    {
      if (!v11)
        goto LABEL_20;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v11)
LABEL_20:
    WTF::fastFree((WTF *)v8, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreAVFResourceLoader::stopLoading(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v14;

  *(_QWORD *)this = &off_1E334ECA0;
  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v8)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_13:
  v10 = *(_QWORD *)(v8 + 16) - 1;
  *(_QWORD *)(v8 + 16) = v10;
  if (v10)
  {
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    return WTF::fastFree(this, a2);
  }
  v11 = *(_QWORD *)(v8 + 8);
  v12 = __ldxr((unsigned __int8 *)v8);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
    {
      if (!v11)
        goto LABEL_20;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v11)
LABEL_20:
    WTF::fastFree((WTF *)v8, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::WebCoreAVFResourceLoader::stopLoading(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;
  AVAssetResourceLoadingRequest *v6;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = result;
  v3 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 != 1)
  {
    __clrex();
LABEL_16:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v3)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_16;
  if (!v3)
    return result;
LABEL_12:
  v6 = (AVAssetResourceLoadingRequest *)*((_QWORD *)v2 + 4);
  if (v6)
    WebCore::MediaPlayerPrivateAVFoundationObjC::didStopLoadingRequest(v3, v6);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 48));
}

void sub_19526E0EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 48));
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 16))(*(_QWORD *)(a1 + 8) - 8);
}

uint64_t _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIhNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  int8x8_t *v39;
  __int32 v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;
  int8x8_t v45;
  float32x2_t v46;
  float32x2_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  float v53;
  float *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  __int32 v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  __int32 v80;
  float v81;
  float v82;
  float v83;
  __int32 v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  uint64_t v94;
  float v95;
  float v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  __int128 v107;
  __int128 v108;
  int8x16_t v109;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v103 = v10.f32[0];
      v105 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v103, 2.1992);
      v11.f32[1] = v105;
      v12 = (float32x2_t)vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v109.i8 = vbsl_s8((int8x8_t)vcge_f32(v12, _D1), (int8x8_t)_D1, vbic_s8((int8x8_t)v12, (int8x8_t)vclez_f32(v12)));
      v109.i64[1] = __PAIR64__(v3, LODWORD(v7));
      v18 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v109);
      goto LABEL_25;
    case 1:
      v109 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v109);
      goto LABEL_79;
    case 2:
      v39 = *(int8x8_t **)(a2 + 8);
      v40 = v39[1].i32[1];
      v41 = *(float *)v39[1].i32;
      v42 = powf(fabsf(v41), 2.1992);
      if (v41 >= 0.0)
        v43 = v42;
      else
        v43 = -v42;
      v44 = (float32x2_t)vand_s8(*v39, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v39), (int8x8_t)vcgez_f32((float32x2_t)*v39)));
      v45 = (int8x8_t)vcltz_s32((int32x2_t)v44);
      v46 = vabs_f32(v44);
      v104 = v46.f32[0];
      v106 = powf(v46.f32[1], 2.1992);
      v47.f32[0] = powf(v104, 2.1992);
      v47.f32[1] = v106;
      *(int8x8_t *)v109.i8 = vbsl_s8(v45, (int8x8_t)vneg_f32(v47), (int8x8_t)v47);
      v109.i64[1] = __PAIR64__(v40, LODWORD(v43));
      v18 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v109);
LABEL_25:
      v48 = llroundf(v18 * 255.0);
      v49 = 255;
      if (v48 >= 255)
        v48 = 255;
      v28 = v48 & ~(v48 >> 63);
      v50 = llroundf(v19 * 255.0);
      if (v50 >= 255)
        v50 = 255;
      v30 = v50 & ~(v50 >> 63);
      v51 = llroundf(v20 * 255.0);
      if (v51 >= 255)
        v51 = 255;
      v52 = v51 & ~(v51 >> 63);
      v53 = v21 * 255.0;
      goto LABEL_86;
    case 3:
      return _ZZN7WebCore17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIhNS_15SRGBADescriptorEEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_ENKUlTyvE_clINS_20ExtendedGammaEncodedIfNS_19DisplayP3DescriptorEEEEEDav(a2);
    case 4:
      v109 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion((int8x8_t *)&v109);
      goto LABEL_79;
    case 5:
      v109 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::handleToByteConversion((uint64_t)&v109);
    case 6:
      v109 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v109);
      goto LABEL_79;
    case 7:
      v55 = *(float **)(a2 + 8);
      v56 = *v55;
      v57 = v55[1];
      v58 = v55[2];
      v59 = v55[3];
      goto LABEL_38;
    case 8:
      v109 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      v56 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)v109.i32);
LABEL_38:
      v60 = 255.0;
      v61 = v56 * 255.0;
      if (v56 > 1.0)
        v61 = 255.0;
      v62 = v57 * 255.0;
      if (v57 > 1.0)
        v62 = 255.0;
      if (v58 <= 1.0)
        v60 = v58 * 255.0;
      if (v56 >= 0.0)
        v63 = v61;
      else
        v63 = 0.0;
      if (v57 >= 0.0)
        v64 = v62;
      else
        v64 = 0.0;
      if (v58 >= 0.0)
        v65 = v60;
      else
        v65 = 0.0;
      v66 = v59 * 255.0;
      v67 = llroundf(v63);
      v49 = 255;
      if (v67 >= 255)
        v67 = 255;
      v28 = v67 & ~(v67 >> 63);
      v68 = llroundf(v64);
      if (v68 >= 255)
        v68 = 255;
      v30 = v68 & ~(v68 >> 63);
      v69 = llroundf(v65);
      if (v69 >= 255)
        v69 = 255;
      v52 = v69 & ~(v69 >> 63);
      v70 = llroundf(v66);
      goto LABEL_87;
    case 9:
      v108 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v109.i32[0] = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v108);
      *(uint64_t *)((char *)v109.i64 + 4) = __PAIR64__(v72, v71);
      v109.i32[3] = v73;
      v35 = WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>((int8x8_t *)&v109);
      goto LABEL_79;
    case 10:
      v107 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v107);
      *(_QWORD *)&v108 = __PAIR64__(v75, v74);
      *((_QWORD *)&v108 + 1) = __PAIR64__(v77, v76);
      goto LABEL_63;
    case 11:
      v108 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_63:
      v109.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v108);
      *(uint64_t *)((char *)v109.i64 + 4) = __PAIR64__(v79, v78);
      v109.i32[3] = v80;
      goto LABEL_77;
    case 12:
      v109 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((float *)v109.i32);
    case 13:
      v108 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v108);
      goto LABEL_67;
    case 14:
      v85 = *(_QWORD *)(a2 + 8);
      v81 = *(float *)v85;
      v82 = *(float *)(v85 + 4);
      v83 = *(float *)(v85 + 8);
      v84 = *(_DWORD *)(v85 + 12);
LABEL_67:
      v86 = v81 + 0.0;
      v87 = v86 + (float)(v82 * -0.089484);
      v88 = (float)(v86 + (float)(v82 * -0.10556)) + (float)(v83 * -0.063854);
      v89 = (float)(v86 + (float)(v82 * 0.39634)) + (float)(v83 * 0.2158);
      v90 = v87 + (float)(v83 * -1.2915);
      v91 = v89 * (float)(v89 * v89);
      v92 = v88 * (float)(v88 * v88);
      v93 = v90 * (float)(v90 * v90);
      *(float32x2_t *)v109.i8 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBD2632C13F9D0A66, v91), (float32x2_t)0x3F8E5F6ABF0ECCF7, v92), (float32x2_t)0xBD92DD3F3E90127DLL, v93);
      *(float *)&v109.i32[2] = (float)((float)((float)(v91 * -0.076373) + 0.0) + (float)(v92 * -0.42149))
                             + (float)(v93 * 1.5869);
      v109.i32[3] = v84;
      v94 = llroundf(WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)v109.i32)* 255.0);
      v49 = 255;
      if (v94 >= 255)
        v94 = 255;
      v28 = v94 & ~(v94 >> 63);
      v98 = llroundf(v95 * 255.0);
      if (v98 >= 255)
        v98 = 255;
      v30 = v98 & ~(v98 >> 63);
      v99 = llroundf(v96 * 255.0);
      if (v99 >= 255)
        v99 = 255;
      v52 = v99 & ~(v99 >> 63);
      v53 = v97 * 255.0;
      goto LABEL_86;
    case 15:
      v109 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::handleToByteConversion((uint64_t)&v109);
    case 16:
      v109 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v109);
      goto LABEL_79;
    case 18:
      v109 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_77:
      v35 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v109);
      goto LABEL_79;
    case 19:
      v109 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      v35 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)v109.i32);
LABEL_79:
      v100 = llroundf(v35 * 255.0);
      v49 = 255;
      if (v100 >= 255)
        v100 = 255;
      v28 = v100 & ~(v100 >> 63);
      v101 = llroundf(v36 * 255.0);
      if (v101 >= 255)
        v101 = 255;
      v30 = v101 & ~(v101 >> 63);
      v102 = llroundf(v37 * 255.0);
      if (v102 >= 255)
        v102 = 255;
      v52 = v102 & ~(v102 >> 63);
      v53 = v38 * 255.0;
LABEL_86:
      v70 = llroundf(v53);
LABEL_87:
      if (v70 < 255)
        v49 = v70;
      v34 = (v52 << 16) | ((v49 & ~(v49 >> 63)) << 24);
      break;
    default:
      v22 = *(float **)(a2 + 8);
      v23 = v22[1];
      v24 = v22[2];
      v25 = v22[3];
      v26 = llroundf(*v22 * 255.0);
      v27 = 255;
      if (v26 >= 255)
        v26 = 255;
      v28 = v26 & ~(v26 >> 63);
      v29 = llroundf(v23 * 255.0);
      if (v29 >= 255)
        v29 = 255;
      v30 = v29 & ~(v29 >> 63);
      v31 = llroundf(v24 * 255.0);
      if (v31 >= 255)
        v31 = 255;
      v32 = v31 & ~(v31 >> 63);
      v33 = llroundf(v25 * 255.0);
      if (v33 < 255)
        v27 = v33;
      v34 = ((v27 & ~(v27 >> 63)) << 24) | (v32 << 16);
      break;
  }
  return v34 | (v30 << 8) | v28;
}

uint64_t _ZZN7WebCore17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIhNS_15SRGBADescriptorEEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_ENKUlTyvE_clINS_20ExtendedGammaEncodedIfNS_19DisplayP3DescriptorEEEEEDav(uint64_t a1)
{
  int8x8_t *v1;
  __int32 v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  float v22;
  float v23;
  int32x2_t v24;
  int8x16_t v25;

  v1 = *(int8x8_t **)(a1 + 8);
  v2 = v1[1].i32[1];
  v3 = *(float *)v1[1].i32;
  v24 = (int32x2_t)vand_s8(*v1, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v1), (int8x8_t)vcgez_f32((float32x2_t)*v1)));
  v4 = fabsf(*(float *)v24.i32);
  if (v4 <= 0.04045)
    v23 = v4 / 12.92;
  else
    v23 = powf((float)(v4 + 0.055) / 1.055, 2.4);
  v5 = fabsf(*(float *)&v24.i32[1]);
  if (v5 <= 0.04045)
    v6 = v5 / 12.92;
  else
    v6 = powf((float)(v5 + 0.055) / 1.055, 2.4);
  v7 = fabsf(v3);
  if (v7 <= 0.04045)
  {
    v8 = v7 / 12.92;
  }
  else
  {
    v22 = v6;
    v8 = powf((float)(v7 + 0.055) / 1.055, 2.4);
    v6 = v22;
  }
  *(int8x8_t *)v25.i8 = vbsl_s8((int8x8_t)vcltz_s32(v24), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v6), LODWORD(v23))), (int8x8_t)__PAIR64__(LODWORD(v6), LODWORD(v23)));
  if (v3 < 0.0)
    v8 = -v8;
  v25.i64[1] = __PAIR64__(v2, LODWORD(v8));
  v9 = llroundf(WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v25)* 255.0);
  v13 = 255;
  if (v9 >= 255)
    v9 = 255;
  v14 = v9 & ~(v9 >> 63);
  v15 = llroundf(v10 * 255.0);
  if (v15 >= 255)
    v15 = 255;
  v16 = llroundf(v11 * 255.0);
  v17 = v15 & ~(v15 >> 63);
  if (v16 >= 255)
    v18 = 255;
  else
    v18 = v16;
  v19 = v18 & ~(v18 >> 63);
  v20 = llroundf(v12 * 255.0);
  if (v20 < 255)
    v13 = v20;
  return (v19 << 16) | ((v13 & ~(v13 >> 63)) << 24) | (v17 << 8) | v14;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _OWORD v15[2];
  int v16;
  _OWORD v17[2];
  int v18;
  int8x16_t v19;

  v19 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v17[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
  v17[1] = unk_1968BFBBC;
  v18 = 1065207884;
  v15[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v15[1] = unk_1968BFBE0;
  v16 = 1065831128;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v19.i32, (float *)v17, (float *)v15);
  v4 = 0.0;
  if (v1 <= 1.0)
    v5 = v1;
  else
    v5 = 1.0;
  if (v1 >= 0.0)
    v6 = v5;
  else
    v6 = 0.0;
  if (v2 <= 1.0)
    v7 = v2;
  else
    v7 = 1.0;
  if (v2 >= 0.0)
    v8 = v7;
  else
    v8 = 0.0;
  if (v3 <= 1.0)
    v9 = v3;
  else
    v9 = 1.0;
  if (v3 >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  if (v6 >= 0.0031308)
  {
    v12 = (float)(powf(v6, 0.41667) * 1.055) + -0.055;
    if (v12 > 0.0)
      v13 = v12;
    else
      v13 = 0.0;
    if (v12 >= 1.0)
      v4 = 1.0;
    else
      v4 = v13;
  }
  else
  {
    v11 = v6 * 12.92;
    if (v11 >= 0.0)
      v4 = v11;
  }
  if (v8 >= 0.0031308)
    powf(v8, 0.41667);
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  return v4;
}

void WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int8x16_t v15;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = 0.0;
  v4 = *(float *)(a1 + 4);
  v5 = *(float *)(a1 + 8);
  if (*(float *)a1 <= 0.04045)
  {
    v14 = v1 / 12.92;
    if (v14 >= 0.0)
      v3 = v14;
  }
  else
  {
    v6 = powf((float)(v1 + 0.055) / 1.055, 2.4);
    if (v6 > 0.0)
      v7 = v6;
    else
      v7 = 0.0;
    if (v6 >= 1.0)
      v3 = 1.0;
    else
      v3 = v7;
  }
  if (v4 <= 0.04045)
  {
    if ((float)(v4 / 12.92) >= 0.0)
      v10 = v4 / 12.92;
    else
      v10 = 0.0;
  }
  else
  {
    v8 = powf((float)(v4 + 0.055) / 1.055, 2.4);
    v9 = 0.0;
    if (v8 > 0.0)
      v9 = v8;
    if (v8 >= 1.0)
      v10 = 1.0;
    else
      v10 = v9;
  }
  if (v5 <= 0.04045)
  {
    v13 = v5 / 12.92;
    if ((float)(v5 / 12.92) < 0.0)
      v13 = 0.0;
  }
  else
  {
    v11 = powf((float)(v5 + 0.055) / 1.055, 2.4);
    v12 = 0.0;
    if (v11 > 0.0)
      v12 = v11;
    if (v11 >= 1.0)
      v13 = 1.0;
    else
      v13 = v12;
  }
  v15.i64[0] = __PAIR64__(LODWORD(v10), LODWORD(v3));
  v15.i64[1] = __PAIR64__(v2, LODWORD(v13));
  WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v15);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _OWORD v15[2];
  int v16;
  _OWORD v17[2];
  int v18;
  int8x16_t v19;

  v19 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v17[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::linearToXYZ;
  v17[1] = unk_1968BFC04;
  v18 = 1065721848;
  v15[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v15[1] = unk_1968BFBE0;
  v16 = 1065831128;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v19.i32, (float *)v17, (float *)v15);
  v4 = 0.0;
  if (v1 <= 1.0)
    v5 = v1;
  else
    v5 = 1.0;
  if (v1 >= 0.0)
    v6 = v5;
  else
    v6 = 0.0;
  if (v2 <= 1.0)
    v7 = v2;
  else
    v7 = 1.0;
  if (v2 >= 0.0)
    v8 = v7;
  else
    v8 = 0.0;
  if (v3 <= 1.0)
    v9 = v3;
  else
    v9 = 1.0;
  if (v3 >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  if (v6 >= 0.0031308)
  {
    v12 = (float)(powf(v6, 0.41667) * 1.055) + -0.055;
    if (v12 > 0.0)
      v13 = v12;
    else
      v13 = 0.0;
    if (v12 >= 1.0)
      v4 = 1.0;
    else
      v4 = v13;
  }
  else
  {
    v11 = v6 * 12.92;
    if (v11 >= 0.0)
      v4 = v11;
  }
  if (v8 >= 0.0031308)
    powf(v8, 0.41667);
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  return v4;
}

void WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(int8x8_t *a1)
{
  int8x8_t v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v11;

  v1 = vand_s8(*a1, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*a1), (int8x8_t)vcgez_f32((float32x2_t)*a1)));
  v2 = *(float *)a1[1].i32;
  v11 = *(float *)&v1.i32[1];
  v3 = fabsf(*(float *)v1.i32);
  if (v3 >= 0.0031308)
    powf(v3, 0.41667);
  v4 = fabsf(v11);
  if (v4 >= 0.0031308)
    powf(v4, 0.41667);
  v5 = fabsf(v2);
  if (v5 >= 0.0031308)
    powf(v5, 0.41667);
  __asm { FMOV            V5.2S, #1.0 }
}

uint64_t WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::handleToByteConversion(uint64_t a1)
{
  float v1;
  int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD v24[4];

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (fabsf(*(float *)a1) <= 0.03125)
  {
    v7 = v1 * 0.0625;
  }
  else
  {
    v5 = *(float *)a1;
    v6 = powf(v1, 1.8);
    if (v5 >= 0.0)
      v7 = v6;
    else
      v7 = -v6;
  }
  if (fabsf(v3) <= 0.03125)
  {
    v9 = v3 * 0.0625;
  }
  else
  {
    v8 = powf(v3, 1.8);
    if (v3 >= 0.0)
      v9 = v8;
    else
      v9 = -v8;
  }
  if (fabsf(v4) <= 0.03125)
  {
    v10 = v4 * 0.0625;
  }
  else
  {
    v10 = powf(v4, 1.8);
    if (v4 < 0.0)
      v10 = -v10;
  }
  *(float *)v24 = v7;
  *(float *)&v24[1] = v9;
  *(float *)&v24[2] = v10;
  v24[3] = v2;
  v11 = llroundf(WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)v24)* 255.0);
  v15 = 255;
  if (v11 >= 255)
    v11 = 255;
  v16 = v11 & ~(v11 >> 63);
  v17 = llroundf(v12 * 255.0);
  if (v17 >= 255)
    v17 = 255;
  v18 = llroundf(v13 * 255.0);
  v19 = v17 & ~(v17 >> 63);
  if (v18 >= 255)
    v20 = 255;
  else
    v20 = v18;
  v21 = v20 & ~(v20 >> 63);
  v22 = llroundf(v14 * 255.0);
  if (v22 < 255)
    v15 = v22;
  return (v21 << 16) | ((v15 & ~(v15 >> 63)) << 24) | (v19 << 8) | v16;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  _OWORD v19[2];
  int v20;
  _OWORD v21[2];
  int v22;
  float32x2_t v23;
  float v24;
  int v25;

  v1 = *(float *)a1;
  v2 = *(float *)(a1 + 4);
  v3 = *(float *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = 0.0;
  v21[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v21[1] = unk_1968BFC28;
  v22 = 1068124526;
  v19[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v19[1] = unk_1968BFBE0;
  v20 = 1065831128;
  v23 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v1), (float32x2_t)0x3F363AD53E0A6CF7, v2), (float32x2_t)0x38BC9C873D00667BLL, v3);
  v24 = (float)((float)((float)(v1 * 0.0) + 0.0) + (float)(v2 * 0.0)) + (float)(v3 * 0.8251);
  v25 = v4;
  v6 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v23, (float *)v21, (float *)v19);
  if (v6 <= 1.0)
    v9 = v6;
  else
    v9 = 1.0;
  if (v6 >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  if (v7 <= 1.0)
    v11 = v7;
  else
    v11 = 1.0;
  if (v7 >= 0.0)
    v12 = v11;
  else
    v12 = 0.0;
  if (v8 <= 1.0)
    v13 = v8;
  else
    v13 = 1.0;
  if (v8 >= 0.0)
    v14 = v13;
  else
    v14 = 0.0;
  if (v10 >= 0.0031308)
  {
    v16 = (float)(powf(v10, 0.41667) * 1.055) + -0.055;
    if (v16 > 0.0)
      v17 = v16;
    else
      v17 = 0.0;
    if (v16 >= 1.0)
      v5 = 1.0;
    else
      v5 = v17;
  }
  else
  {
    v15 = v10 * 12.92;
    if (v15 >= 0.0)
      v5 = v15;
  }
  if (v12 >= 0.0031308)
    powf(v12, 0.41667);
  if (v14 >= 0.0031308)
    powf(v14, 0.41667);
  return v5;
}

void WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;
  double v11;
  int8x16_t v12;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (fabsf(*(float *)a1) >= 0.081243)
  {
    v6 = *(float *)a1;
    v7 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 < 0.0)
      v7 = -v7;
    v5 = v7;
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (fabsf(v3) >= 0.081243)
  {
    v9 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v3 < 0.0)
      v9 = -v9;
    v8 = v9;
  }
  else
  {
    v8 = v3 / 4.5;
  }
  if (fabsf(v4) >= 0.081243)
  {
    v11 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v4 < 0.0)
      v11 = -v11;
    v10 = v11;
  }
  else
  {
    v10 = v4 / 4.5;
  }
  v12.i64[0] = __PAIR64__(LODWORD(v8), LODWORD(v5));
  v12.i64[1] = __PAIR64__(v2, LODWORD(v10));
  WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v12);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _OWORD v15[2];
  int v16;
  _OWORD v17[2];
  int v18;
  int8x16_t v19;

  v19 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v17[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::linearToXYZ;
  v17[1] = unk_1968BFC4C;
  v18 = 1065864796;
  v15[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v15[1] = unk_1968BFBE0;
  v16 = 1065831128;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v19.i32, (float *)v17, (float *)v15);
  v4 = 0.0;
  if (v1 <= 1.0)
    v5 = v1;
  else
    v5 = 1.0;
  if (v1 >= 0.0)
    v6 = v5;
  else
    v6 = 0.0;
  if (v2 <= 1.0)
    v7 = v2;
  else
    v7 = 1.0;
  if (v2 >= 0.0)
    v8 = v7;
  else
    v8 = 0.0;
  if (v3 <= 1.0)
    v9 = v3;
  else
    v9 = 1.0;
  if (v3 >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  if (v6 >= 0.0031308)
  {
    v12 = (float)(powf(v6, 0.41667) * 1.055) + -0.055;
    if (v12 > 0.0)
      v13 = v12;
    else
      v13 = 0.0;
    if (v12 >= 1.0)
      v4 = 1.0;
    else
      v4 = v13;
  }
  else
  {
    v11 = v6 * 12.92;
    if (v11 >= 0.0)
      v4 = v11;
  }
  if (v8 >= 0.0031308)
    powf(v8, 0.41667);
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  return v4;
}

float WebCore::convertColor<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>(int8x8_t *a1)
{
  float32x2_t v1;
  float result;

  v1 = (float32x2_t)vand_s8(*a1, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*a1), (int8x8_t)vcgez_f32((float32x2_t)*a1)));
  __asm { FMOV            V5.2S, #1.0 }
  LODWORD(result) = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v1, _D5), (int8x8_t)_D5, (int8x8_t)v1), (int8x8_t)vcltz_f32(v1)).u32[0];
  return result;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _OWORD v18[2];
  int v19;
  _OWORD v20[2];
  int v21;
  float v22[4];

  v22[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v22[1] = v1;
  v22[2] = v2;
  v22[3] = v3;
  v20[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v20[1] = unk_1968BFC28;
  v21 = 1068124526;
  v18[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v18[1] = unk_1968BFBE0;
  v19 = 1065831128;
  v4 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v22, (float *)v20, (float *)v18);
  v7 = 0.0;
  if (v4 <= 1.0)
    v8 = v4;
  else
    v8 = 1.0;
  if (v4 >= 0.0)
    v9 = v8;
  else
    v9 = 0.0;
  if (v5 <= 1.0)
    v10 = v5;
  else
    v10 = 1.0;
  if (v5 >= 0.0)
    v11 = v10;
  else
    v11 = 0.0;
  if (v6 <= 1.0)
    v12 = v6;
  else
    v12 = 1.0;
  if (v6 >= 0.0)
    v13 = v12;
  else
    v13 = 0.0;
  if (v9 >= 0.0031308)
  {
    v15 = (float)(powf(v9, 0.41667) * 1.055) + -0.055;
    if (v15 > 0.0)
      v16 = v15;
    else
      v16 = 0.0;
    if (v15 >= 1.0)
      v7 = 1.0;
    else
      v7 = v16;
  }
  else
  {
    v14 = v9 * 12.92;
    if (v14 >= 0.0)
      v7 = v14;
  }
  if (v11 >= 0.0031308)
    powf(v11, 0.41667);
  if (v13 >= 0.0031308)
    powf(v13, 0.41667);
  return v7;
}

uint64_t WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v1 = *a1;
  v2 = a1[3];
  v3 = 0.0;
  v4 = a1[1];
  v5 = a1[2];
  if (*a1 >= 0.0031308)
  {
    v7 = (float)(powf(v1, 0.41667) * 1.055) + -0.055;
    if (v7 > 0.0)
      v8 = v7;
    else
      v8 = 0.0;
    if (v7 >= 1.0)
      v3 = 1.0;
    else
      v3 = v8;
  }
  else
  {
    v6 = v1 * 12.92;
    if (v6 >= 0.0)
      v3 = v6;
  }
  if (v4 >= 0.0031308)
  {
    v10 = (float)(powf(v4, 0.41667) * 1.055) + -0.055;
    v11 = 0.0;
    if (v10 > 0.0)
      v11 = v10;
    if (v10 >= 1.0)
      v9 = 1.0;
    else
      v9 = v11;
  }
  else if ((float)(v4 * 12.92) >= 0.0)
  {
    v9 = v4 * 12.92;
  }
  else
  {
    v9 = 0.0;
  }
  if (v5 >= 0.0031308)
  {
    v13 = (float)(powf(v5, 0.41667) * 1.055) + -0.055;
    v14 = 0.0;
    if (v13 > 0.0)
      v14 = v13;
    if (v13 >= 1.0)
      v12 = 1.0;
    else
      v12 = v14;
  }
  else
  {
    v12 = v5 * 12.92;
    if ((float)(v5 * 12.92) < 0.0)
      v12 = 0.0;
  }
  v15 = llroundf(v3 * 255.0);
  v16 = 255;
  if (v15 >= 255)
    v15 = 255;
  v17 = llroundf(v9 * 255.0);
  v18 = v15 & ~(v15 >> 63);
  if (v17 >= 255)
    v19 = 255;
  else
    v19 = v17;
  v20 = v19 & ~(v19 >> 63);
  v21 = llroundf(v12 * 255.0);
  if (v21 >= 255)
    v21 = 255;
  v22 = v21 & ~(v21 >> 63);
  v23 = llroundf(v2 * 255.0);
  if (v23 < 255)
    v16 = v23;
  return (v22 << 16) | ((v16 & ~(v16 >> 63)) << 24) | (v20 << 8) | v18;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v1 = a1[1];
  v2 = a1[2];
  v3 = 0.0;
  v4 = (float)((float)((float)(*a1 * -0.96924) + 0.0) + (float)(v1 * 1.876)) + (float)(v2 * 0.041555);
  v5 = (float)((float)((float)(*a1 * 3.241) + 0.0) + (float)(v1 * -1.5374)) + (float)(v2 * -0.49861);
  v6 = (float)((float)((float)(*a1 * 0.05563) + 0.0) + (float)(v1 * -0.20398)) + (float)(v2 * 1.057);
  if (v5 <= 1.0)
    v7 = v5;
  else
    v7 = 1.0;
  if (v5 >= 0.0)
    v8 = v7;
  else
    v8 = 0.0;
  if (v4 <= 1.0)
    v9 = v4;
  else
    v9 = 1.0;
  if (v4 >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  if (v6 <= 1.0)
    v11 = v6;
  else
    v11 = 1.0;
  if (v6 >= 0.0)
    v12 = v11;
  else
    v12 = 0.0;
  if (v8 >= 0.0031308)
  {
    v14 = (float)(powf(v8, 0.41667) * 1.055) + -0.055;
    if (v14 > 0.0)
      v15 = v14;
    else
      v15 = 0.0;
    if (v14 >= 1.0)
      v3 = 1.0;
    else
      v3 = v15;
  }
  else
  {
    v13 = v8 * 12.92;
    if (v13 >= 0.0)
      v3 = v13;
  }
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  if (v12 >= 0.0031308)
    powf(v12, 0.41667);
  return v3;
}

uint64_t WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::handleToByteConversion(uint64_t a1)
{
  float v1;
  int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _DWORD v27[4];

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (*(float *)a1 <= 0.03125)
  {
    v7 = v1 * 0.0625;
  }
  else
  {
    v5 = powf(v1, 1.8);
    if (v5 > 0.0)
      v6 = v5;
    else
      v6 = 0.0;
    if (v5 >= 1.0)
      v7 = 1.0;
    else
      v7 = v6;
  }
  if (v3 <= 0.03125)
  {
    v10 = v3 * 0.0625;
  }
  else
  {
    v8 = powf(v3, 1.8);
    v9 = 0.0;
    if (v8 > 0.0)
      v9 = v8;
    if (v8 >= 1.0)
      v10 = 1.0;
    else
      v10 = v9;
  }
  if (v4 <= 0.03125)
  {
    v13 = v4 * 0.0625;
  }
  else
  {
    v11 = powf(v4, 1.8);
    v12 = 0.0;
    if (v11 > 0.0)
      v12 = v11;
    if (v11 >= 1.0)
      v13 = 1.0;
    else
      v13 = v12;
  }
  *(float *)v27 = v7;
  *(float *)&v27[1] = v10;
  *(float *)&v27[2] = v13;
  v27[3] = v2;
  v14 = llroundf(WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)v27)* 255.0);
  v18 = 255;
  if (v14 >= 255)
    v14 = 255;
  v19 = v14 & ~(v14 >> 63);
  v20 = llroundf(v15 * 255.0);
  if (v20 >= 255)
    v20 = 255;
  v21 = llroundf(v16 * 255.0);
  v22 = v20 & ~(v20 >> 63);
  if (v21 >= 255)
    v23 = 255;
  else
    v23 = v21;
  v24 = v23 & ~(v23 >> 63);
  v25 = llroundf(v17 * 255.0);
  if (v25 < 255)
    v18 = v25;
  return (v24 << 16) | ((v18 & ~(v18 >> 63)) << 24) | (v22 << 8) | v19;
}

void WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  double v6;
  float v7;
  double v8;
  float v9;
  double v10;
  int8x16_t v11;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (*(float *)a1 >= 0.081243)
  {
    v6 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 >= 1.0)
    {
      v5 = 1.0;
    }
    else if (v6 <= 0.0)
    {
      v5 = 0.0;
    }
    else
    {
      v5 = v6;
    }
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (v3 >= 0.081243)
  {
    v8 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v8 >= 1.0)
    {
      v7 = 1.0;
    }
    else if (v8 <= 0.0)
    {
      v7 = 0.0;
    }
    else
    {
      v7 = v8;
    }
  }
  else
  {
    v7 = v3 / 4.5;
  }
  if (v4 >= 0.081243)
  {
    v10 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v10 >= 1.0)
    {
      v9 = 1.0;
    }
    else if (v10 <= 0.0)
    {
      v9 = 0.0;
    }
    else
    {
      v9 = v10;
    }
  }
  else
  {
    v9 = v4 / 4.5;
  }
  v11.i64[0] = __PAIR64__(LODWORD(v7), LODWORD(v5));
  v11.i64[1] = __PAIR64__(v2, LODWORD(v9));
  WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v11);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  unsigned int v6;
  uint64_t v7[2];

  v7[0] = a1;
  v7[1] = a2;
  v6 = a3;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>(v7, &v6, a4);
  if (!*a4)
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v3 = a1[1];
  if (!v3)
  {
    v6 = *a1;
LABEL_3:
    v7 = v3;
    v5 = *a2;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)&v6, &v5, a3);
  }
  --v3;
  v6 = *a1;
  if (!(v3 >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v4 = 0;
  v5 = *(_DWORD *)(result + 8);
  v6 = *a2;
  do
  {
    ++v4;
    v7 = v6 > 9;
    v6 /= 0xAu;
  }
  while (v7);
  if ((v4 | v5) < 0 || (v8 = __OFADD__(v5, v4), v9 = (v5 + v4), v8))
  {
    *a3 = 0;
  }
  else
  {
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(v9, 1, *(int8x16_t **)result, *(_QWORD *)(result + 8), *a2, &v10);
    *a3 = v10;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v12;
        if (v12)
        {
          *(_DWORD *)v12 = 2;
          *(_DWORD *)(v12 + 4) = v9;
          *(_QWORD *)(v12 + 8) = v12 + 20;
          *(_DWORD *)(v12 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>((_BYTE *)(v12 + 20), a3, a4, a5);
        }
        goto LABEL_6;
      }
LABEL_12:
      v11 = 0;
      goto LABEL_6;
    }
LABEL_11:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_6;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v12;
  if (v12)
  {
    *(_DWORD *)v12 = 2;
    *(_DWORD *)(v12 + 4) = v9;
    *(_QWORD *)(v12 + 8) = v12 + 20;
    *(_DWORD *)(v12 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>((char *)(v12 + 20), a3, a4, a5);
  }
LABEL_6:
  *a6 = v11;
  return result;
}

void sub_195270504(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(char *result, int8x16_t *a2, int a3, unsigned int a4)
{
  char *v4;
  char *v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;
  uint64_t v14;
  BOOL v15;
  _BYTE v17[13];
  uint64_t v18;
  int8x16x2_t v19;
  int8x16x2_t v20;
  int8x16x2_t v21;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v5 = &result[2 * (a3 & 0xFFFFFFC0)];
    v6 = 0uLL;
    do
    {
      v19.val[0] = *a2;
      v7 = a2[1];
      v20.val[0] = a2[2];
      v8 = a2[3];
      a2 += 4;
      v9 = v8;
      v20.val[1] = 0uLL;
      v21.val[0] = v7;
      v19.val[1] = 0uLL;
      v10 = result;
      vst2q_s8(v10, v19);
      v10 += 32;
      v21.val[1] = 0uLL;
      vst2q_s8(v10, v21);
      v11 = result + 64;
      vst2q_s8(v11, v20);
      v12 = result + 96;
      vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
      result += 128;
    }
    while (result != v5);
    result = v5;
  }
  while (result != v4)
  {
    v13 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v13;
    result += 2;
  }
  v14 = 0;
  do
  {
    v17[v14-- + 12] = (a4 % 0xA) | 0x30;
    v15 = a4 > 9;
    a4 /= 0xAu;
  }
  while (v15);
  if (v14 + 14 <= 13)
  {
    do
    {
      *(_WORD *)v4 = *((unsigned __int8 *)&v18 + v14);
      v4 += 2;
    }
    while (!__CFADD__(v14++, 1));
  }
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  _QWORD *v12;
  _QWORD *v13;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        v7 = (unsigned int *)(v6 + 8);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v12 = off_1E334ED68;
          v12[1] = v7;
          v13 = v12;
          WTF::ensureOnMainThread();
          if (v13)
            (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
    }
    while (v4 != (WTF *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  WTF *v11;
  _QWORD *v13;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        v7 = (unsigned int *)(v6 + 8);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v10 = off_1E334ED68;
          v10[1] = v7;
          v13 = v10;
          WTF::ensureOnMainThread();
          if (v13)
            (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
    }
    while (v4 != (WTF *)v5);
  }
  v11 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v11, a2);
  }
  return a1;
}

void sub_195270708(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  WTF *v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  v12 = *(WTF **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)v10 = 0;
    *(_DWORD *)(v10 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WTF::HashTable<void *,WTF::KeyValuePair<void *,WebCore::PlatformCALayer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WebCore::PlatformCALayer *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WebCore::PlatformCALayer *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WebCore::PlatformCALayer *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(unsigned int a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _OWORD *v19;

  v2 = WebCore::layerToPlatformLayerMap(void)::layerMap;
  if (WebCore::layerToPlatformLayerMap(void)::layerMap)
  {
    v3 = *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 4);
    v4 = *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  WebCore::layerToPlatformLayerMap(void)::layerMap = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(WebCore::layerToPlatformLayerMap(void)::layerMap - 12) = v4;
  if (v3)
  {
    v7 = v3;
    v8 = WebCore::layerToPlatformLayerMap(void)::layerMap;
    if (WebCore::layerToPlatformLayerMap(void)::layerMap)
    {
      for (i = 0; i != v3; ++i)
      {
        v10 = (_QWORD *)(v2 + 16 * i);
        if ((unint64_t)(*v10 + 1) >= 2)
        {
          v11 = *(_DWORD *)(v8 - 8);
          v12 = (~(*v10 << 32) + *v10) ^ ((~(*v10 << 32) + *v10) >> 22);
          v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((unint64_t)(v12 + ~(v12 << 13)) >> 8));
          v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
          v15 = v11 & ((v14 >> 31) ^ v14);
          v16 = 1;
          do
          {
            v17 = v15;
            v18 = *(_QWORD *)(v8 + 16 * v15);
            v15 = (v15 + v16++) & v11;
          }
          while (v18);
          *(_OWORD *)(v8 + 16 * v17) = *(_OWORD *)v10;
        }
      }
    }
    else
    {
      v19 = (_OWORD *)v2;
      do
      {
        if ((unint64_t)(*(_QWORD *)v19 + 1) >= 2)
          MEMORY[0] = *v19;
        ++v19;
        --v7;
      }
      while (v7);
    }
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PlatformCALayerCocoa::clone(WebCore::PlatformCALayerClient *)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E334ECC8;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformCALayerCocoa::clone(WebCore::PlatformCALayerClient *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;

  *(_QWORD *)this = &off_1E334ECC8;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformCALayerCocoa::clone(WebCore::PlatformCALayerClient *)::$_0,void>::call(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "setPlayer:", objc_msgSend(*(id *)(a1 + 16), "player"));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PlatformCALayer::setBoundsOnMainThread(CGRect)::$_0,void>::~CallableWrapper(_QWORD *result)
{
  const void *v1;
  _QWORD *v2;

  v1 = (const void *)result[1];
  *result = off_1E334ECF0;
  result[1] = 0;
  if (v1)
  {
    v2 = result;
    CFRelease(v1);
    return v2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformCALayer::setBoundsOnMainThread(CGRect)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  const void *v2;
  WTF *v4;

  v2 = (const void *)*((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = off_1E334ECF0;
  *((_QWORD *)a1 + 1) = 0;
  if (v2)
  {
    v4 = a1;
    CFRelease(v2);
    a1 = v4;
  }
  return WTF::fastFree(a1, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformCALayer::setBoundsOnMainThread(CGRect)::$_0,void>::call(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "setBounds:", *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PlatformCALayer::setPositionOnMainThread(CGPoint)::$_0,void>::~CallableWrapper(_QWORD *result)
{
  const void *v1;
  _QWORD *v2;

  v1 = (const void *)result[1];
  *result = off_1E334ED18;
  result[1] = 0;
  if (v1)
  {
    v2 = result;
    CFRelease(v1);
    return v2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformCALayer::setPositionOnMainThread(CGPoint)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  const void *v2;
  WTF *v4;

  v2 = (const void *)*((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = off_1E334ED18;
  *((_QWORD *)a1 + 1) = 0;
  if (v2)
  {
    v4 = a1;
    CFRelease(v2);
    a1 = v4;
  }
  return WTF::fastFree(a1, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformCALayer::setPositionOnMainThread(CGPoint)::$_0,void>::call(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "setPosition:", *(double *)(a1 + 16), *(double *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PlatformCALayer::setAnchorPointOnMainThread(WebCore::FloatPoint3D)::$_0,void>::~CallableWrapper(_QWORD *result)
{
  const void *v1;
  _QWORD *v2;

  v1 = (const void *)result[1];
  *result = off_1E334ED40;
  result[1] = 0;
  if (v1)
  {
    v2 = result;
    CFRelease(v1);
    return v2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformCALayer::setAnchorPointOnMainThread(WebCore::FloatPoint3D)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  const void *v2;
  WTF *v4;

  v2 = (const void *)*((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = off_1E334ED40;
  *((_QWORD *)a1 + 1) = 0;
  if (v2)
  {
    v4 = a1;
    CFRelease(v2);
    a1 = v4;
  }
  return WTF::fastFree(a1, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformCALayer::setAnchorPointOnMainThread(WebCore::FloatPoint3D)::$_0,void>::call(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 8), "setAnchorPoint:", *(float *)(a1 + 16), *(float *)(a1 + 20));
  return objc_msgSend(*(id *)(a1 + 8), "setAnchorPointZ:", *(float *)(a1 + 24));
}

__n128 WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  uint64_t v21;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 16 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      if (v10 < 6)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 5;
        goto LABEL_33;
      }
      if (!(v10 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_33:
        v21 = 0;
        do
        {
          *(_OWORD *)(v11 + v21) = *(_OWORD *)((char *)v5 + v21);
          v21 += 16;
        }
        while (16 * v6 != v21);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x195270E18);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 6)
    {
      v17 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 5;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_42;
      v17 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    if ((_DWORD)v16)
    {
      v18 = 16 * v16;
      v19 = v5;
      do
      {
        v20 = *(_OWORD *)v19;
        v19 = (WTF *)((char *)v19 + 16);
        *v17++ = v20;
        v18 -= 16;
      }
      while (v18);
    }
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return v3;
}

uint64_t WebCore::GPUPresentationContext::configure(uint64_t a1, uint64_t *a2, int a3, int a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  char v15;
  int v16;
  int v17;
  void *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  WTF *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  WTF *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  WTF *v49;
  char v50;
  char v51;
  WTF *v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;

  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v10 = v11 - 32;
      ++*(_DWORD *)(v11 - 8);
    }
    else
    {
      v10 = 0;
    }
  }
  v12 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  if (v12)
  {
    if (v12[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
    else
      --v12[6];
  }
  v13 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = *((_BYTE *)a2 + 8);
  v16 = *((_DWORD *)a2 + 3);
  v17 = *((_DWORD *)a2 + 7);
  if (v17)
  {
    v18 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)a2 + 7));
    memcpy(v18, (const void *)a2[2], *((unsigned int *)a2 + 7));
  }
  else
  {
    v18 = 0;
  }
  v19 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v49;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v14);
    else
      *(_DWORD *)v19 -= 2;
  }
  v21 = (_DWORD *)(a1 + 56);
  v20 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v20 != -1)
  {
    if ((_DWORD)v20 == 1)
    {
      *(_DWORD *)(a1 + 40) = a3;
      *(_DWORD *)(a1 + 44) = a4;
      v21 = (_DWORD *)(a1 + 48);
      goto LABEL_22;
    }
    ((void (*)(WTF **, uint64_t))off_1E334EEC0[v20])(&v49, a1 + 40);
  }
  *(_DWORD *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 44) = a4;
  *(_DWORD *)(a1 + 48) = 1;
LABEL_22:
  *v21 = 1;
  *(_QWORD *)(a1 + 64) = 0x100000001;
  *(_BYTE *)(a1 + 72) = 1;
  *(_BYTE *)(a1 + 73) = v15;
  *(_DWORD *)(a1 + 76) = v16;
  v22 = *(WTF **)(a1 + 80);
  if (v22)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v22, v14);
  }
  *(_QWORD *)(a1 + 80) = v18;
  *(_DWORD *)(a1 + 88) = v17;
  *(_DWORD *)(a1 + 92) = v17;
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(_QWORD *)(*a2 + 8);
  if (v24)
    v25 = v24 - 32;
  else
    v25 = 0;
  v26 = *(_QWORD *)(v25 + 64);
  if (!*(_QWORD *)(v26 + 16))
  {
    v28 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = v26;
    v29 = *(unsigned int **)(v26 + 16);
    *(_QWORD *)(v26 + 16) = v28;
    if (v29)
    {
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v27);
      }
    }
  }
  v32 = *(unsigned int **)(v26 + 16);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 + 1, v32));
  v49 = (WTF *)v32;
  if (*((unsigned __int8 *)a2 + 8) >= 0x5Fu)
  {
    __break(0xC471u);
    JUMPOUT(0x1952711A0);
  }
  v50 = *((_BYTE *)a2 + 8);
  v51 = *((_BYTE *)a2 + 12) & 0x1F;
  v52 = 0;
  v53 = 0;
  v34 = *((_DWORD *)a2 + 7);
  if (v34)
  {
    v35 = (WTF *)WTF::fastMalloc((WTF *)*((unsigned int *)a2 + 7));
    LODWORD(v53) = v34;
    v52 = v35;
    v36 = *((unsigned int *)a2 + 7);
    if ((_DWORD)v36)
    {
      v37 = (unsigned __int8 *)a2[2];
      v38 = *v37;
      if (v38 > 0x5E)
        goto LABEL_57;
      v39 = v37 + 1;
      v40 = v36 - 1;
      while (1)
      {
        *(_BYTE *)v35 = v38;
        if (!v40)
          break;
        v41 = *v39++;
        LOBYTE(v38) = v41;
        --v40;
        v35 = (WTF *)((char *)v35 + 1);
        if (v41 >= 0x5F)
          goto LABEL_57;
      }
      HIDWORD(v53) = v36;
    }
  }
  if (*((unsigned __int8 *)a2 + 32) >= 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x1952711C0);
  }
  v54 = *((_BYTE *)a2 + 32);
  if (*((unsigned __int8 *)a2 + 33) >= 2u)
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x1952710A0);
  }
  v55 = *((_BYTE *)a2 + 33);
  v56 = a5;
  v43 = (*(uint64_t (**)(uint64_t, WTF **))(*(_QWORD *)v23 + 16))(v23, &v49);
  v44 = v52;
  if (v52)
  {
    v52 = 0;
    LODWORD(v53) = 0;
    WTF::fastFree(v44, v42);
  }
  v45 = (unsigned int *)v49;
  v49 = 0;
  if (v45)
  {
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, v42);
    }
  }
  return v43;
}

_QWORD *WebCore::GPUPresentationContext::getCurrentTexture@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v11;

  v2 = this;
  v4 = this[2];
  if (v4 && !*(_BYTE *)(v4 + 72))
    goto LABEL_18;
  if (this[3])
  {
    this = (*(_QWORD *(**)(_QWORD **__return_ptr))(*(_QWORD *)this[1] + 40))(&v11);
    v5 = v11;
    if (v11)
    {
      ++*((_DWORD *)v11 + 2);
      v10 = v5;
      v6 = v2[3];
      v7 = (_DWORD *)WTF::fastMalloc((WTF *)0x50);
      WebCore::GPUTexture::GPUTexture((uint64_t)v7, (uint64_t *)&v10, (uint64_t)(v2 + 4), v6);
      ++*(_DWORD *)(v8 + 8);
      v9 = (_DWORD *)v2[2];
      v2[2] = v7;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(void))(*(_QWORD *)v10 + 8))();
        else
          --v10[2];
      }
      this = v11;
      v11 = 0;
      if (this)
      {
        if (*((_DWORD *)this + 2) == 1)
          this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        else
          --*((_DWORD *)this + 2);
      }
    }
    v4 = v2[2];
  }
  if (v4)
LABEL_18:
    ++*(_DWORD *)(v4 + 8);
  *a2 = v4;
  return this;
}

unint64_t WebCore::GPUQueue::writeBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t result;
  unint64_t v24;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v34;
  char *v35;

  v10 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v10 == -1)
    goto LABEL_23;
  v35 = &v34;
  v18 = ((uint64_t (*)(char **, uint64_t))off_1E334EED0[v10])(&v35, a4);
  v19 = a6 ? a5 : 0;
  v20 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v20 == -1)
    goto LABEL_23;
  v21 = v18;
  v22 = v18 * v19;
  v35 = &v34;
  result = ((uint64_t (*)(char **, uint64_t))off_1E334EEE0[v20])(&v35, a4);
  if (a8)
    v24 = v21 * a7;
  else
    v24 = result - v22;
  if (result < v22 || v24 + v22 > result || (v24 & 3) != 0)
  {
    *(_BYTE *)a9 = 30;
    *(_QWORD *)(a9 + 8) = 0;
    *(_BYTE *)(a9 + 16) = 1;
    return result;
  }
  v27 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v27 == -1)
    goto LABEL_23;
  v28 = *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a2 + 16);
  v35 = &v34;
  v30 = ((uint64_t (*)(char **, uint64_t))off_1E334EEF0[v27])(&v35, a4);
  if (v31 < v22 || v31 - v22 < v24)
  {
    __break(1u);
LABEL_23:
    v32 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::GPUQueue::writeTexture(v32);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, v29, a3, v30 + v22, v24, 0, v24, 1);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  return result;
}

unsigned int *WebCore::GPUQueue::writeTexture(WTF **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  WTF **v9;
  uint64_t v10;
  WTF **v11;
  unint64_t v12;
  WTF **v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  WTF **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  WTF **v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int *result;
  unsigned int v46;
  unsigned int v47;
  _BOOL4 v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  BOOL v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  _QWORD v64[2];
  int v65;
  WTF **v66;
  int v67;
  char v68;
  unsigned int v69;
  char v70;
  WTF *v71;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  char v75;
  char v76;
  _QWORD v77[2];

  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_89;
  v9 = *(WTF ***)a4;
  v62 = *(unsigned int *)(a4 + 8);
  v63 = *(unsigned __int8 *)(a4 + 12);
  v60 = *(_DWORD *)(a4 + 16);
  v61 = *(unsigned __int8 *)(a4 + 20);
  v71 = (WTF *)&v66;
  v10 = ((uint64_t (*)(WTF **, uint64_t))off_1E334EEF0[v5])(&v71, a3);
  v12 = v10;
  v13 = v11;
  v14 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    do
      v15 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v15 + 1, (unsigned int *)v14));
    v59 = v10;
    v16 = *(_QWORD *)(v14 + 8);
    if (v16)
    {
      v17 = a1;
      v18 = *(unsigned __int8 *)(v16 + 32);
      v19 = *((unsigned __int8 *)a2 + 48);
      if (v18 == 42)
        v20 = 41;
      else
        v20 = v18;
      if (v18 == 40)
        v21 = 39;
      else
        v21 = v20;
      if ((v18 | 2) == 0x2A)
        v22 = 37;
      else
        v22 = v18;
      if (v19 == 1)
        v18 = v22;
      if (v19 == 2)
        v23 = v21;
      else
        v23 = v18;
      v58 = WebCore::GPUTexture::texelBlockHeight(v23);
      v24 = WebCore::GPUTexture::texelBlockSize(v23);
      v64[0] = 0;
      v71 = (WTF *)v64;
      v72 = v64;
      v25 = *(unsigned int *)(a5 + 16);
      if ((_DWORD)v25 == -1)
        goto LABEL_89;
      v26 = v24;
      v27 = WebCore::GPUTexture::texelBlockWidth(v23);
      v66 = &v71;
      v28 = ((uint64_t (*)(WTF ***, uint64_t))off_1E334EF00[v25])(&v66, a5);
      v29 = v28 / v27;
      if (v28 % v27)
        goto LABEL_23;
      v64[0] = 1;
      v71 = (WTF *)v64;
      v72 = v64;
      v30 = *(unsigned int *)(a5 + 16);
      if ((_DWORD)v30 == -1)
        goto LABEL_89;
      v66 = &v71;
      v31 = ((uint64_t (*)(WTF ***, uint64_t))off_1E334EF00[v30])(&v66, a5);
      v32 = v31 / v58;
      if (v31 % v58)
      {
LABEL_23:
        v33 = 0;
        a1 = v17;
        goto LABEL_42;
      }
      v34 = (WTF **)v31;
      v12 = v29 * (unint64_t)v26;
      v35 = v12;
      if (v32 < 2)
      {
LABEL_27:
        v56 = v35;
        v57 = v31 / v58;
        v64[0] = 2;
        v71 = (WTF *)v64;
        v72 = v64;
        v36 = *(unsigned int *)(a5 + 16);
        if ((_DWORD)v36 != -1)
        {
          v66 = &v71;
          v37 = ((uint64_t (*)(WTF ***, uint64_t))off_1E334EF00[v36])(&v66, a5);
          v38 = v63;
          a1 = v17;
          if (v37 >= 2)
          {
            v33 = 0;
            if (!v63 || !v61)
              goto LABEL_42;
            v38 = 1;
          }
          if ((_DWORD)v38 && v12 > v62 || v61 && v60 < v57)
            goto LABEL_41;
          v33 = v56;
          if (!v37)
            goto LABEL_42;
          if (v57 < 2)
          {
            v33 = 0;
            if (v58 > v34)
            {
              v48 = 0;
              goto LABEL_79;
            }
          }
          else
          {
            if (!(_DWORD)v38)
              goto LABEL_58;
            v33 = (v57 - 1) * v62;
          }
          v48 = __CFADD__(v33, v12);
          if (!__CFADD__(v33, v12))
            v33 += v12;
LABEL_79:
          if (v37 < 2)
            goto LABEL_86;
          if (!(_DWORD)v38)
            goto LABEL_58;
          v38 = v61;
          if (!v61)
            goto LABEL_58;
          v49 = v37 - 1;
          v50 = v60 * (unint64_t)v62;
          v51 = (v50 * (unsigned __int128)v49) >> 64 == 0;
          v52 = !is_mul_ok(v50, v49);
          v53 = v50 * v49;
          if (!v51)
            v53 = 0;
          v54 = __CFADD__(v33, v53);
          v33 += v53;
          if (!v54 && !v52)
          {
LABEL_86:
            if (!v48)
              goto LABEL_42;
          }
          goto LABEL_41;
        }
LABEL_89:
        v55 = std::__throw_bad_variant_access[abi:sn180100]();
        return (unsigned int *)WebCore::GPUQueue::copyExternalImageToTexture(v55);
      }
      if (v63)
      {
        v35 = v32 * v62;
        goto LABEL_27;
      }
      a1 = v17;
    }
LABEL_41:
    v33 = 0;
    do
    {
LABEL_42:
      v39 = __ldaxr((unsigned int *)v14);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, (unsigned int *)v14));
    v12 = v59;
    if (!v40)
    {
      atomic_store(1u, (unsigned int *)v14);
      WTF::fastFree((WTF *)v14, v11);
    }
    goto LABEL_45;
  }
  v33 = 0;
LABEL_45:
  v41 = (char *)v13 - (char *)v9;
  if (v13 <= v9)
    v34 = v9;
  else
    v34 = 0;
  if (v13 <= v9)
    v17 = 0;
  else
    v17 = v9;
  if (v33 < v41)
    v41 = v33;
  if (v13 <= v9)
    v42 = (unint64_t)v13;
  else
    v42 = v41;
  a1 = (WTF **)a1[1];
  WebCore::GPUImageCopyTexture::convertToBacking(a2, (uint64_t)&v71);
  v38 = (char *)v13 - (char *)v17;
  if (v42 == -1)
    goto LABEL_59;
  if (v38 >= v42)
    goto LABEL_60;
LABEL_58:
  __break(1u);
LABEL_59:
  v42 = v38;
LABEL_60:
  v66 = v34;
  v67 = v62;
  v68 = v63;
  v69 = v60;
  v70 = v61;
  v43 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v43 == -1)
    goto LABEL_89;
  v77[0] = &v76;
  ((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t))off_1E334EF40[v43])(v64, v77, a5);
  (*((void (**)(WTF **, WTF **, unint64_t, unint64_t, WTF ***, _QWORD *))*a1 + 5))(a1, &v71, (unint64_t)v17 + v12, v42, &v66, v64);
  if (v65 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_1E334EF50[v65])(v77, v64);
  if (v75)
  {
    if (v74 != -1)
      ((void (*)(WTF ***, uint64_t *))off_1E334EF20[v74])(&v66, &v73);
    v74 = -1;
  }
  result = (unsigned int *)v71;
  v71 = 0;
  if (result)
  {
    do
    {
      v46 = __ldaxr(result);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, result));
    if (!v47)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v44);
    }
  }
  return result;
}

void WebCore::GPUQueue::copyExternalImageToTexture(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::GPUPipelineError *v25;
  char v27;
  char v28;
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  int *v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t *v47;
  _QWORD v48[2];

  v28 = 0;
  v11 = a3 + 16;
  if (*(_BYTE *)(a3 + 40))
  {
    v31 = 0;
    v32 = (char *)&v31;
    v33 = &v31;
    v12 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v12 == -1)
      goto LABEL_27;
    v48[0] = &v32;
    v13 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E334EF88[v12])(v48, a3 + 16);
  }
  else
  {
    v13 = 0;
  }
  v31 = 0;
  v32 = (char *)&v31;
  v33 = &v31;
  v14 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v14 == -1)
    goto LABEL_27;
  v48[0] = &v32;
  v30 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E334EF98[v14])(v48, a5) + v13;
  if (*(_BYTE *)(a3 + 40))
  {
    v31 = 1;
    v32 = (char *)&v31;
    v33 = &v31;
    v15 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v15 == -1)
      goto LABEL_27;
    v48[0] = &v32;
    v16 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E334EF88[v15])(v48, v11);
  }
  else
  {
    v16 = 0;
  }
  v31 = 1;
  v32 = (char *)&v31;
  v33 = &v31;
  v17 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v17 == -1)
    goto LABEL_27;
  v48[0] = &v32;
  v29 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E334EF98[v17])(v48, a5) + v16;
  v31 = 2;
  v32 = (char *)&v31;
  v33 = &v31;
  v18 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v18 == -1)
    goto LABEL_27;
  v48[0] = &v32;
  if (((unsigned int (*)(_QWORD *, uint64_t))off_1E334EF98[v18])(v48, a5) >= 2)
  {
    v19 = 30;
    v28 = 30;
LABEL_23:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a6 = v19;
LABEL_24:
    *(_BYTE *)(a6 + 16) = 1;
    return;
  }
  v32 = &v28;
  v33 = (uint64_t *)&v30;
  v34 = (uint64_t *)&v29;
  v35 = (uint64_t *)&v30;
  v36 = (uint64_t *)&v29;
  v37 = &v28;
  v38 = &v28;
  v39 = &v30;
  v40 = (uint64_t *)&v29;
  v41 = &v28;
  v42 = (char *)&v30;
  v43 = (char *)&v29;
  v44 = &v28;
  v45 = (char *)&v30;
  v46 = (char *)&v29;
  v20 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v20 == -1)
    goto LABEL_27;
  v48[0] = &v32;
  if ((((uint64_t (*)(_QWORD *, uint64_t))off_1E334EFA8[v20])(v48, a3) & 1) == 0)
  {
    v19 = v28;
    goto LABEL_23;
  }
  v32 = a2;
  v33 = (uint64_t *)a2;
  v21 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v21 == -1)
    goto LABEL_27;
  v48[0] = &v32;
  if ((((uint64_t (*)(_QWORD *, uint64_t))off_1E334EFE0[v21])(v48, a3) & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a6 = 14;
    goto LABEL_24;
  }
  LOBYTE(v30) = 1;
  LOBYTE(v29) = *(_BYTE *)(a3 + 48);
  v27 = a4[50];
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
  *v22 = off_1E334F060;
  v22[1] = &v30;
  v22[2] = a4;
  v22[3] = &v29;
  v22[4] = &v27;
  v22[5] = a3;
  v22[6] = a1;
  v22[7] = a5;
  v31 = (uint64_t)v22;
  v32 = a4;
  v36 = &v31;
  v37 = a4;
  v38 = (char *)a3;
  v39 = &v29;
  v42 = a4;
  v43 = &v27;
  v44 = (char *)&v31;
  v45 = a4;
  v46 = &v27;
  v47 = &v31;
  v33 = (uint64_t *)&v27;
  v34 = &v31;
  v35 = &v31;
  v40 = &v31;
  v41 = (char *)&v31;
  v23 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v23 == -1)
  {
LABEL_27:
    v25 = (WebCore::GPUPipelineError *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::GPUPipelineError::~GPUPipelineError(v25);
    return;
  }
  v48[0] = &v32;
  ((void (*)(_QWORD *, uint64_t))off_1E334F018[v23])(v48, a3);
  v24 = v31;
  v31 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
}

void WebCore::GPUPipelineError::~GPUPipelineError(WebCore::GPUPipelineError *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E334F098;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E334F098;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computeElementSize(WebCore::BufferSource const&)::$_0,WebCore::computeElementSize(WebCore::BufferSource const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC>,WTF::DefaultRefDerefTraits<JSC>>,std::__variant_detail::_Trait<WTF::RefPtr::ArrayBuffer,JSC::ArrayBufferView<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC>,WTF::DefaultRefDerefTraits<JSC>>>,WTF::RawPtrTraits<JSC><WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC>,WTF::DefaultRefDerefTraits<JSC>>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if ((*(_BYTE *)(*(_QWORD *)a2 + 4) - 4) > 7u)
    LOBYTE(v2) = 0;
  else
    v2 = qword_1968DD1A8[(char)(*(_BYTE *)(*(_QWORD *)a2 + 4) - 4)];
  return 1 << v2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computeElementSize(WebCore::BufferSource const&)::$_0,WebCore::computeElementSize(WebCore::BufferSource const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC>,WTF::DefaultRefDerefTraits<JSC>>,std::__variant_detail::_Trait<WTF::RefPtr::ArrayBuffer,JSC::ArrayBufferView<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC>,WTF::DefaultRefDerefTraits<JSC>>>,WTF::RawPtrTraits<JSC><WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC>,WTF::DefaultRefDerefTraits<JSC>>>>> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::getExtentDimension(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,unsigned long)::$_0,WebCore::getExtentDimension(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,unsigned long)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&>(unint64_t ***a1, uint64_t a2)
{
  unint64_t v2;

  v2 = ***a1;
  if (v2 >= *(unsigned int *)(a2 + 12))
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)a2 + 4 * v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::getExtentDimension(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,unsigned long)::$_0,WebCore::getExtentDimension(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,unsigned long)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(*(_QWORD *)a1 + 8);
  if (v2 == 2)
  {
    a2 += 2;
  }
  else if (v2 == 1)
  {
    ++a2;
  }
  return *a2;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPUQueue::onSubmittedWorkDone(WebCore::DOMPromiseDeferred<WebCore::IDLNull> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E334EF70;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUQueue::onSubmittedWorkDone(WebCore::DOMPromiseDeferred<WebCore::IDLNull> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334EF70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUQueue::onSubmittedWorkDone(WebCore::DOMPromiseDeferred<WebCore::IDLNull> &&)::$_0,void>::call(uint64_t a1)
{
  return WebCore::DeferredPromise::resolve<WebCore::IDLNull>(*(_QWORD *)(a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::dimension(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict> const&,unsigned long)::$_0,WebCore::dimension(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict> const&,unsigned long)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict> const&>(unint64_t ***a1, uint64_t a2)
{
  unint64_t v2;

  v2 = ***a1;
  if (v2 >= *(unsigned int *)(a2 + 12))
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)a2 + 4 * v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::dimension(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict> const&,unsigned long)::$_0,WebCore::dimension(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict> const&,unsigned long)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict> const&>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(*(_QWORD *)a1 + 8);
  if (v2 == 1)
    return a2[1];
  if (v2)
    return 0;
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::dimension(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,unsigned long)::$_0,WebCore::dimension(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,unsigned long)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&>(unint64_t ***a1, uint64_t a2)
{
  unint64_t v2;

  v2 = ***a1;
  if (v2 >= *(unsigned int *)(a2 + 12))
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)a2 + 4 * v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::dimension(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,unsigned long)::$_0,WebCore::dimension(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,unsigned long)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(*(_QWORD *)a1 + 8);
  if (v2 == 2)
    return a2[2];
  if (v2 == 1)
    return a2[1];
  if (v2)
    return 0;
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  char v8;
  uint64_t result;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (!v3)
  {
    v8 = 8;
    goto LABEL_14;
  }
  v4 = *(float *)(v3 + 16);
  if (v4 >= 2147500000.0)
  {
    v5 = 0x7FFFFFFF;
  }
  else if (v4 > -2147500000.0)
  {
    v5 = (int)v4;
  }
  else
  {
    v5 = 0x80000000;
  }
  if (**(_DWORD **)(v2 + 8) > v5
    || ((v6 = *(float *)(v3 + 20), v6 >= 2147500000.0)
      ? (v7 = 0x7FFFFFFF)
      : v6 > -2147500000.0
      ? (v7 = (int)v6)
      : (v7 = 0x80000000),
        **(_DWORD **)(v2 + 16) > v7))
  {
    v8 = 30;
LABEL_14:
    result = 0;
    **(_BYTE **)v2 = v8;
    return result;
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v9;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    ++*(_DWORD *)v3;
  v4 = *(_DWORD *)(v3 + 4);
  v5 = 30;
  if ((v4 & 0x80000000) != 0)
    goto LABEL_8;
  v6 = *(_DWORD *)(v3 + 8);
  if ((v6 & 0x80000000) != 0)
    goto LABEL_8;
  if (**(_DWORD **)(v2 + 24) > v4 || **(_DWORD **)(v2 + 32) > v6)
  {
    v5 = 30;
LABEL_8:
    v7 = 0;
    **(_BYTE **)(v2 + 40) = v5;
    goto LABEL_9;
  }
  if (!(v6 * v4))
  {
    v5 = 8;
    goto LABEL_8;
  }
  v7 = 1;
LABEL_9:
  if (*(_DWORD *)v3 == 1)
  {
    v9 = *(_DWORD **)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0;
    if (v9)
    {
      if (*v9 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*v9;
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return v7;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 176) + 24);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    v7 = 8;
    goto LABEL_9;
  }
  v5 = **(_DWORD **)(v2 + 56);
  if (v5 > WebCore::HTMLImageElement::width((WebCore::HTMLImageElement *)v3)
    || (v6 = **(_DWORD **)(v2 + 64),
        v6 > WebCore::HTMLImageElement::height((WebCore::HTMLImageElement *)v3)))
  {
    v7 = 30;
LABEL_9:
    v8 = 0;
    **(_BYTE **)(v2 + 48) = v7;
    goto LABEL_10;
  }
  v8 = 1;
LABEL_10:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v8;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 2;
    if (v3)
    {
      *(_DWORD *)(v2 + 24) = v3;
    }
    else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    }
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  int v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = v2[4];
    v2[4] = v3 + 1;
    if (v3)
      v2[4] = v3;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  if (*(_BYTE *)(*(_QWORD *)a2 + 192))
    goto LABEL_2;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 168);
  if (!v4)
    goto LABEL_7;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) & 1) != 0)
  {
LABEL_2:
    v3 = 8;
LABEL_8:
    result = 0;
    **(_BYTE **)(v2 + 96) = v3;
    return result;
  }
  if (**(_DWORD **)(v2 + 104) > *(_DWORD *)(*(_QWORD *)a2 + 40)
    || **(_DWORD **)(v2 + 112) > *(_DWORD *)(*(_QWORD *)a2 + 44))
  {
LABEL_7:
    v3 = 30;
    goto LABEL_8;
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isStateValid<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict>> const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&,WebCore::ExceptionCode &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t result;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 248);
  if (!v3)
    goto LABEL_6;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3) & 1) != 0)
  {
    v5 = 8;
LABEL_7:
    result = 0;
    **(_BYTE **)(v2 + 72) = v5;
    return result;
  }
  if (**(_DWORD **)(v2 + 80) > *(_DWORD *)(*(_QWORD *)a2 + 120)
    || **(_DWORD **)(v2 + 88) > *(_DWORD *)(*(_QWORD *)a2 + 124))
  {
LABEL_6:
    v5 = 30;
    goto LABEL_7;
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(*(_QWORD *)a2 + 32) & 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t a1, WTF **a2)
{
  WTF *v2;
  int v3;
  _DWORD *v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = (*(_DWORD *)v2)++;
    if (v3)
    {
      *(_DWORD *)v2 = v3;
    }
    else
    {
      v5 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v5)
      {
        if (*v5 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v5;
      }
      WTF::fastFree(v2, a2);
    }
  }
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(WebCore::SecurityContext ***a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::SecurityContext *v3;
  const WebCore::SecurityOrigin *v4;
  void *v5;
  _BOOL8 v6;

  v2 = *(_QWORD *)a2;
  v3 = **a1;
  if (*(_QWORD *)a2)
    *(_DWORD *)(v2 + 24) += 2;
  WebCore::SecurityContext::securityOrigin(v3, a2);
  v6 = WebCore::HTMLImageElement::originClean((WebCore::HTMLImageElement *)v2, v4);
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v5);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return v6;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::SecurityContext *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  WebCore::ThreadableBlobRegistry *v10;
  uint64_t canRequest;

  v2 = *(_QWORD *)a2;
  v3 = *(WebCore::SecurityContext **)(*(_QWORD *)a1 + 8);
  if (*(_QWORD *)a2)
    *(_DWORD *)(v2 + 24) += 2;
  WebCore::SecurityContext::securityOrigin(v3, a2);
  v6 = *(_QWORD *)(v2 + 1136);
  if (!v6)
    goto LABEL_8;
  v7 = v4;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 808))(*(_QWORD *)(v6 + 72)) & 1) != 0)
    goto LABEL_8;
  v8 = *(_QWORD *)(v2 + 1136);
  if (!v8)
    goto LABEL_8;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 72) + 816))(*(_QWORD *)(v8 + 72), v7);
  if (v9 >= 0x100u)
  {
    canRequest = v9 == 0;
  }
  else
  {
    v10 = (WebCore::ThreadableBlobRegistry *)(v8 + 104);
    if ((WTF::URL::protocolIs() & 1) != 0)
    {
LABEL_8:
      canRequest = 1;
      goto LABEL_9;
    }
    {
      WebCore::EmptyOriginAccessPatterns::singleton(void)::instance = (uint64_t)&off_1E3400560;
    }
    canRequest = WebCore::SecurityOrigin::canRequest(v7, v10, (uint64_t (***)(_QWORD, uint64_t))&WebCore::EmptyOriginAccessPatterns::singleton(void)::instance);
  }
LABEL_9:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v5);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return canRequest;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  int v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = v2[4];
    v2[4] = v3 + 1;
    if (v3)
      v2[4] = v3;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)a2 + 104);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>> const&)#1},BOOL WebCore::isOriginClean<std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&,WebCore::ScriptExecutionContext &)::{lambda(WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)a2 + 184);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL19imageBytesForSourceINSA_25GPUImageCopyExternalImageENSA_25GPUImageCopyTextureTaggedEEEvRKT_RKT0_RbSK_ONS8_8FunctionIFvNS_4spanIKhLm18446744073709551615EEEmmEEEEUlRKNS8_6RefPtrINSA_11ImageBitmapENS8_12RawPtrTraitsIST_EENS8_21DefaultRefDerefTraitsIST_EEEEE_JZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_9ImageDataENSU_IS12_EENSW_IS12_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLImageElementENSU_IS17_EENSW_IS17_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLVideoElementENSU_IS1C_EENSW_IS1C_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_19WebCodecsVideoFrameENSU_IS1H_EENSW_IS1H_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_17HTMLCanvasElementENSU_IS1M_EENSW_IS1M_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_15OffscreenCanvasENSU_IS1T_EENSW_IS1T_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSY_S15_S1A_S1F_S1K_S1W_S1P_EEEEEEDcSE_DpT0_(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  _DWORD *result;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (!v3)
    return WebCore::getImageBytesFromImageBuffer<WebCore::GPUImageCopyTextureTagged>(0, **v2, v2[2]);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  result = WebCore::getImageBytesFromImageBuffer<WebCore::GPUImageCopyTextureTagged>((float *)v3, **v2, v2[2]);
  v9 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_15;
  }
  result = (_DWORD *)MEMORY[0x19AEA534C](v9);
LABEL_15:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v16 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v16 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 != 1)
  {
    __clrex();
LABEL_22:
    result = (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return result;
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
    goto LABEL_22;
  if (v12)
    return result;
LABEL_23:
  if (v13)
    result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (!v14)
    return (_DWORD *)WTF::fastFree((WTF *)v9, v8);
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL19imageBytesForSourceINSA_25GPUImageCopyExternalImageENSA_25GPUImageCopyTextureTaggedEEEvRKT_RKT0_RbSK_ONS8_8FunctionIFvNS_4spanIKhLm18446744073709551615EEEmmEEEEUlRKNS8_6RefPtrINSA_11ImageBitmapENS8_12RawPtrTraitsIST_EENS8_21DefaultRefDerefTraitsIST_EEEEE_JZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_9ImageDataENSU_IS12_EENSW_IS12_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLImageElementENSU_IS17_EENSW_IS17_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLVideoElementENSU_IS1C_EENSW_IS1C_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_19WebCodecsVideoFrameENSU_IS1H_EENSW_IS1H_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_17HTMLCanvasElementENSU_IS1M_EENSW_IS1M_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_15OffscreenCanvasENSU_IS1T_EENSW_IS1T_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSY_S15_S1A_S1F_S1K_S1W_S1P_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _DWORD *result;
  _DWORD *v6;
  uint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD **)(*(_QWORD *)a1 + 24);
  if (*a2)
    ++*(_DWORD *)v2;
  WebCore::ImageData::pixelBuffer((WebCore::ImageData *)v2, &v7);
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v3 + 16))(*v3, *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(int *)(v2 + 4), *(int *)(v2 + 8));
  result = (_DWORD *)v7;
  v7 = 0;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  if (*(_DWORD *)v2 == 1)
  {
    v6 = *(_DWORD **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v6)
    {
      if (*v6 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*v6;
    }
    return (_DWORD *)WTF::fastFree((WTF *)v2, v4);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL19imageBytesForSourceINSA_25GPUImageCopyExternalImageENSA_25GPUImageCopyTextureTaggedEEEvRKT_RKT0_RbSK_ONS8_8FunctionIFvNS_4spanIKhLm18446744073709551615EEEmmEEEEUlRKNS8_6RefPtrINSA_11ImageBitmapENS8_12RawPtrTraitsIST_EENS8_21DefaultRefDerefTraitsIST_EEEEE_JZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_9ImageDataENSU_IS12_EENSW_IS12_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLImageElementENSU_IS17_EENSW_IS17_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLVideoElementENSU_IS1C_EENSW_IS1C_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_19WebCodecsVideoFrameENSU_IS1H_EENSW_IS1H_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_17HTMLCanvasElementENSU_IS1M_EENSW_IS1M_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_15OffscreenCanvasENSU_IS1T_EENSW_IS1T_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSY_S15_S1A_S1F_S1K_S1W_S1P_EEEEEEDcSE_DpT0_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  unint64_t v7;
  CFTypeRef *v8;
  CGImage *v9;
  CGDataProvider *DataProvider;
  CFDataRef v11;
  const __CFData *v12;
  size_t Width;
  size_t Height;
  BOOL v15;
  void *v16;
  char v17;
  size_t v18;
  size_t v19;
  const UInt8 *BytePtr;
  size_t v21;
  CGImageAlphaInfo AlphaInfo;
  __int128 *v23;
  int v24;
  size_t BytesPerRow;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  CGImage *v50;
  size_t v51;
  size_t v52;
  const __CFData *v53;
  WTF *v54[2];
  char v55;
  WTF **v56;

  v2 = *a1;
  v3 = *a2;
  if (!*a2)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v2 + 32) + 16))(**(_QWORD **)(v2 + 32), 0, 0, 0, 0);
    return;
  }
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 176) + 24);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v2 + 32) + 16))(**(_QWORD **)(v2 + 32), 0, 0, 0, 0);
    goto LABEL_74;
  }
  if ((*(_WORD *)(v5 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v5 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v54);
    v47 = (unsigned int *)v54[0];
    if (v54[0])
    {
      v6 = (WTF *)*((_QWORD *)v54[0] + 1);
      v54[0] = 0;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v46);
      }
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = *(WTF **)(v5 + 688);
    if (v6)
      goto LABEL_6;
    {
      v6 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v54);
      v6 = v54[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v54[0];
    }
  }
  if (v6)
  {
LABEL_6:
    ++*((_DWORD *)v6 + 2);
    if (!(*(unsigned int (**)(WTF *))(*(_QWORD *)v6 + 16))(v6))
    {
      v17 = 0;
      goto LABEL_20;
    }
    v7 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v7 != -1)
    {
      v54[0] = (WTF *)&v55;
      v56 = v54;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v56, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    (*(void (**)(WTF **__return_ptr))(**((_QWORD **)v6 + 8) + 128))(v54);
    if (!v54[0]
      || (v8 = (CFTypeRef *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v54[0] + 6) + 16))(*((_QWORD *)v54[0] + 6)),
          (v9 = (CGImage *)*v8) == 0))
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v2 + 32) + 16))(**(_QWORD **)(v2 + 32), 0, 0, 0, 0);
      goto LABEL_55;
    }
    CFRetain(*v8);
    DataProvider = CGImageGetDataProvider(v9);
    v11 = CGDataProviderCopyData(DataProvider);
    if (!v11)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v2 + 32) + 16))(**(_QWORD **)(v2 + 32), 0, 0, 0, 0);
LABEL_54:
      CFRelease(v9);
LABEL_55:
      v37 = v54[0];
      v54[0] = 0;
      if (!v37)
        goto LABEL_72;
      v38 = *((_QWORD *)v37 + 1);
      if (__ldaxr((unsigned __int8 *)v38))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v38))
      {
        goto LABEL_60;
      }
      MEMORY[0x19AEA534C](v38);
LABEL_60:
      v40 = *(_QWORD *)(v38 + 8);
      v41 = v40 - 1;
      *(_QWORD *)(v38 + 8) = v40 - 1;
      if (v40 == 1)
      {
        v45 = *(_QWORD *)(v38 + 16);
        v42 = *(_QWORD *)(v38 + 24);
        *(_QWORD *)(v38 + 24) = 0;
        v43 = v45 != 0;
      }
      else
      {
        v42 = 0;
        v43 = 1;
      }
      v44 = __ldxr((unsigned __int8 *)v38);
      if (v44 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v38))
        {
          if (!v41)
            goto LABEL_68;
          goto LABEL_72;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v38);
      if (!v41)
      {
LABEL_68:
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        if (!v43)
          WTF::fastFree((WTF *)v38, v16);
      }
LABEL_72:
      if (*((_DWORD *)v6 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v6 + 8))(v6);
      else
        --*((_DWORD *)v6 + 2);
      goto LABEL_74;
    }
    v12 = v11;
    Width = CGImageGetWidth(v9);
    Height = CGImageGetHeight(v9);
    if (Width)
      v15 = Height == 0;
    else
      v15 = 1;
    if (!v15)
    {
      v18 = Height;
      v19 = CGImageGetBytesPerRow(v9) * Height;
      v53 = v12;
      BytePtr = CFDataGetBytePtr(v12);
      v52 = v18 * Width;
      v21 = 4 * v18 * Width;
      AlphaInfo = CGImageGetAlphaInfo(v9);
      v23 = &xmmword_196889B70;
      if (AlphaInfo <= kCGImageAlphaOnly)
      {
        v24 = *(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v2 + 40) + 8) + 32) & 0xFE;
        if (((1 << AlphaInfo) & 0x2B) != 0)
        {
          if (v24 == 22)
            v23 = (__int128 *)&unk_1968DD1F0;
          if (v19 == v21)
          {
            (*(void (**)(_QWORD, const UInt8 *, size_t, size_t, size_t))(***(_QWORD ***)(v2 + 32) + 16))(**(_QWORD **)(v2 + 32), BytePtr, v19, Width, v18);
            v12 = v53;
            goto LABEL_53;
          }
        }
        else if (v24 == 22)
        {
          v23 = (__int128 *)&unk_1968DD194;
        }
        else
        {
          v23 = (__int128 *)&unk_1968DD200;
        }
      }
      v50 = v9;
      BytesPerRow = CGImageGetBytesPerRow(v9);
      v51 = v19;
      if (v21)
      {
        if (HIDWORD(v21))
        {
LABEL_91:
          __break(0xC471u);
          JUMPOUT(0x195272DD4);
        }
        v26 = (void *)WTF::fastMalloc((WTF *)(4 * v18 * Width));
        v21 = (4 * v18 * Width);
        memset(v26, 255, v21);
      }
      else
      {
        v26 = 0;
      }
      v27 = 4;
      if (v51 / v52 < 4)
        v27 = v51 / v52;
      **(_BYTE **)(v2 + 56) = 0;
      if (v27)
      {
        v28 = 0;
        do
        {
          v29 = 0;
          do
          {
            v30 = 0;
            v31 = 4 * (v29 + v28 * Width);
            v32 = v23;
            v33 = v27;
            do
            {
              v34 = *(int *)v32;
              v32 = (__int128 *)((char *)v32 + 4);
              v35 = v31 + v34;
              if (v21 <= v31 + v34)
                goto LABEL_91;
              *((_BYTE *)v26 + v35) = BytePtr[v28 * BytesPerRow + v29 * (v51 / v52) + v30++];
              --v33;
            }
            while (v33);
            ++v29;
          }
          while (v29 != Width);
          ++v28;
        }
        while (v28 != v18);
      }
      (*(void (**)(_QWORD, void *, size_t, size_t, size_t))(***(_QWORD ***)(v2 + 32) + 16))(**(_QWORD **)(v2 + 32), v26, v21, Width, v18);
      v9 = v50;
      v12 = v53;
      if (v26)
        WTF::fastFree((WTF *)v26, v36);
      goto LABEL_53;
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v2 + 32) + 16))(**(_QWORD **)(v2 + 32), 0, 0, 0, 0);
LABEL_53:
    CFRelease(v12);
    goto LABEL_54;
  }
  v17 = 1;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v2 + 32) + 16))(**(_QWORD **)(v2 + 32), 0, 0, 0, 0);
  if ((v17 & 1) == 0)
    goto LABEL_72;
LABEL_74:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v16);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

unsigned __int8 *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL19imageBytesForSourceINSA_25GPUImageCopyExternalImageENSA_25GPUImageCopyTextureTaggedEEEvRKT_RKT0_RbSK_ONS8_8FunctionIFvNS_4spanIKhLm18446744073709551615EEEmmEEEEUlRKNS8_6RefPtrINSA_11ImageBitmapENS8_12RawPtrTraitsIST_EENS8_21DefaultRefDerefTraitsIST_EEEEE_JZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_9ImageDataENSU_IS12_EENSW_IS12_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLImageElementENSU_IS17_EENSW_IS17_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLVideoElementENSU_IS1C_EENSW_IS1C_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_19WebCodecsVideoFrameENSU_IS1H_EENSW_IS1H_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_17HTMLCanvasElementENSU_IS1M_EENSW_IS1M_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_15OffscreenCanvasENSU_IS1T_EENSW_IS1T_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSY_S15_S1A_S1F_S1K_S1W_S1P_EEEEEEDcSE_DpT0_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *result;
  void *v13;
  unsigned int *v14;

  v2 = *a1;
  v3 = *a2;
  if (!*a2)
    return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v2 + 64)
                                                                                                + 16))(**(_QWORD **)(v2 + 64), 0, 0, 0, 0);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 1136);
  if (!v4)
    goto LABEL_20;
  v5 = *(unsigned __int8 **)v4;
  if (__ldaxr(*(unsigned __int8 **)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_7:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr(v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, v5))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_12:
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 264))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8)) & 1) != 0)
  {
    (*(void (**)(unsigned int **__return_ptr))(**(_QWORD **)(v4 + 72) + 664))(&v14);
    WebCore::getImageBytesFromVideoFrame(&v14, *(_QWORD **)(v2 + 64));
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
    goto LABEL_21;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
LABEL_20:
  result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v2 + 64)
                                                                                                + 16))(**(_QWORD **)(v2 + 64), 0, 0, 0, 0);
LABEL_21:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return (unsigned __int8 *)WebCore::Node::removedLastRef((WebCore::Node *)v3, v13);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL19imageBytesForSourceINSA_25GPUImageCopyExternalImageENSA_25GPUImageCopyTextureTaggedEEEvRKT_RKT0_RbSK_ONS8_8FunctionIFvNS_4spanIKhLm18446744073709551615EEEmmEEEEUlRKNS8_6RefPtrINSA_11ImageBitmapENS8_12RawPtrTraitsIST_EENS8_21DefaultRefDerefTraitsIST_EEEEE_JZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_9ImageDataENSU_IS12_EENSW_IS12_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLImageElementENSU_IS17_EENSW_IS17_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLVideoElementENSU_IS1C_EENSW_IS1C_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_19WebCodecsVideoFrameENSU_IS1H_EENSW_IS1H_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_17HTMLCanvasElementENSU_IS1M_EENSW_IS1M_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_15OffscreenCanvasENSU_IS1T_EENSW_IS1T_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSY_S15_S1A_S1F_S1K_S1W_S1P_EEEEEEDcSE_DpT0_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    ++*(_DWORD *)(v3 + 16);
  v4 = *(unsigned int **)(v3 + 24);
  if (v4)
  {
    v5 = v4 + 2;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v10 = v4;
    result = WebCore::getImageBytesFromVideoFrame(&v10, *(_QWORD **)(v2 + 72));
    v10 = 0;
    do
    {
      v8 = __ldaxr(v5);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v5));
    if (!v9)
    {
      atomic_store(1u, v4 + 2);
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  else
  {
    v10 = 0;
    result = WebCore::getImageBytesFromVideoFrame(&v10, *(_QWORD **)(v2 + 72));
  }
  if (*(_DWORD *)(v3 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  --*(_DWORD *)(v3 + 16);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL19imageBytesForSourceINSA_25GPUImageCopyExternalImageENSA_25GPUImageCopyTextureTaggedEEEvRKT_RKT0_RbSK_ONS8_8FunctionIFvNS_4spanIKhLm18446744073709551615EEEmmEEEEUlRKNS8_6RefPtrINSA_11ImageBitmapENS8_12RawPtrTraitsIST_EENS8_21DefaultRefDerefTraitsIST_EEEEE_JZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_9ImageDataENSU_IS12_EENSW_IS12_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLImageElementENSU_IS17_EENSW_IS17_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLVideoElementENSU_IS1C_EENSW_IS1C_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_19WebCodecsVideoFrameENSU_IS1H_EENSW_IS1H_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_17HTMLCanvasElementENSU_IS1M_EENSW_IS1M_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_15OffscreenCanvasENSU_IS1T_EENSW_IS1T_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSY_S15_S1A_S1F_S1K_S1W_S1P_EEEEEEDcSE_DpT0_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;

  v2 = *a1;
  v3 = *a2;
  v4 = *a2 + 32;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 104))(&v21, v5, 0);
    v6 = v21;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(v3 + 105))
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 160))(v4);
  v6 = *(_QWORD *)(v3 + 48);
  if (!v6)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
LABEL_28:
    MEMORY[0x19AEA534C](v18);
    goto LABEL_29;
  }
  if (__stxr(1u, (unsigned __int8 *)v18))
    goto LABEL_28;
LABEL_29:
  ++*(_QWORD *)(v18 + 8);
  v20 = __ldxr((unsigned __int8 *)v18);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v18))
      goto LABEL_34;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_34:
  v21 = v6;
LABEL_3:
  result = (uint64_t)WebCore::getImageBytesFromImageBuffer<WebCore::GPUImageCopyTextureTagged>((float *)v6, **(_QWORD **)(v2 + 104), *(_QWORD **)(v2 + 120));
  v9 = v21;
  v21 = 0;
  if (!v9)
    return result;
  v10 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_8;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_8:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v17 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v17 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_15:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return result;
    goto LABEL_16;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_15;
  if (v13)
    return result;
LABEL_16:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (!v15)
    return WTF::fastFree((WTF *)v10, v8);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL19imageBytesForSourceINSA_25GPUImageCopyExternalImageENSA_25GPUImageCopyTextureTaggedEEEvRKT_RKT0_RbSK_ONS8_8FunctionIFvNS_4spanIKhLm18446744073709551615EEEmmEEEEUlRKNS8_6RefPtrINSA_11ImageBitmapENS8_12RawPtrTraitsIST_EENS8_21DefaultRefDerefTraitsIST_EEEEE_JZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_9ImageDataENSU_IS12_EENSW_IS12_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLImageElementENSU_IS17_EENSW_IS17_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_16HTMLVideoElementENSU_IS1C_EENSW_IS1C_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlNSS_INSA_19WebCodecsVideoFrameENSU_IS1H_EENSW_IS1H_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_17HTMLCanvasElementENSU_IS1M_EENSW_IS1M_EEEEE_ZNSB_ISC_SD_EEvSG_SJ_SK_SK_SR_EUlRKNSS_INSA_15OffscreenCanvasENSU_IS1T_EENSW_IS1T_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSY_S15_S1A_S1F_S1K_S1W_S1P_EEEEEEDcSE_DpT0_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;

  v2 = *a1;
  v3 = *a2;
  v4 = *a2 + 112;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 104))(&v21, v5, 0);
    v6 = v21;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(v3 + 185))
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 160))(v4);
  v6 = *(_QWORD *)(v3 + 128);
  if (!v6)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
LABEL_28:
    MEMORY[0x19AEA534C](v18);
    goto LABEL_29;
  }
  if (__stxr(1u, (unsigned __int8 *)v18))
    goto LABEL_28;
LABEL_29:
  ++*(_QWORD *)(v18 + 8);
  v20 = __ldxr((unsigned __int8 *)v18);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v18))
      goto LABEL_34;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_34:
  v21 = v6;
LABEL_3:
  result = (uint64_t)WebCore::getImageBytesFromImageBuffer<WebCore::GPUImageCopyTextureTagged>((float *)v6, **(_QWORD **)(v2 + 80), *(_QWORD **)(v2 + 96));
  v9 = v21;
  v21 = 0;
  if (!v9)
    return result;
  v10 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_8;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_8:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v17 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v17 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_15:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return result;
    goto LABEL_16;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_15;
  if (v13)
    return result;
LABEL_16:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (!v15)
    return WTF::fastFree((WTF *)v10, v8);
  return result;
}

_DWORD *WebCore::getImageBytesFromImageBuffer<WebCore::GPUImageCopyTextureTagged>(float *a1, uint64_t a2, _QWORD *a3)
{
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  CFTypeRef v12;
  _DWORD *result;
  void (**v14)(WebCore::ImageBufferAllocator *__hidden);
  _QWORD v15[2];
  _BYTE v16[8];
  CFTypeRef cf;
  _QWORD *v18;

  if (!a1)
    return (_DWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a3 + 16))(*a3, 0, 0, 0, 0);
  v5 = a1[4];
  v6 = a1[5];
  v7 = 0x80000000;
  if (v5 > -2147500000.0)
    v7 = (int)v5;
  if (v5 < 2147500000.0)
    v8 = v7;
  else
    v8 = 0x7FFFFFFFLL;
  v9 = 0x8000000000000000;
  if (v6 > -2147500000.0)
    v9 = (unint64_t)(int)v6 << 32;
  v10 = v6 < 2147500000.0 ? v9 : 0x7FFFFFFF00000000;
  if (!v8 || !((v10 | v8) >> 32))
    return (_DWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a3 + 16))(*a3, 0, 0, 0, 0);
  v16[0] = 1;
  v16[1] = 2 * ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + 32) & 0xFE) == 22);
  v11 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v11 != -1)
  {
    v15[0] = &v14;
    v18 = v15;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  v15[0] = 0;
  v15[1] = v10 | v8;
  v14 = off_1E340D360;
  (*(void (**)(_QWORD **__return_ptr, float *, _BYTE *, _QWORD *, void (***)(WebCore::ImageBufferAllocator *__hidden)))(*(_QWORD *)a1 + 88))(&v18, a1, v16, v15, &v14);
  v12 = cf;
  cf = 0;
  if (v12)
    CFRelease(v12);
  (*(void (**)(void))(*(_QWORD *)*a3 + 16))();
  result = v18;
  v18 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::getImageBytesFromVideoFrame(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  WebCore *v5;
  __CVBuffer *v6;
  WebCore *v7;
  uint64_t Width;
  __CVBuffer *v9;
  uint64_t Height;
  __CVBuffer *v11;
  uint64_t v12;
  unint64_t v13;
  __CVBuffer *v14;
  uint64_t BaseAddress;

  v4 = *a1;
  if (!v4)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, 0, 0, 0, 0);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4))
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, 0, 0, 0, 0);
  v5 = (WebCore *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 56))(*a1);
  if (!v5)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, 0, 0, 0, 0);
  v7 = v5;
  Width = WebCore::softLinkCoreVideoCVPixelBufferGetWidth(v5, v6);
  Height = WebCore::softLinkCoreVideoCVPixelBufferGetHeight(v7, v9);
  v12 = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRow(v7, v11) * Height;
  WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress(v7, (__CVBuffer *)1, v13);
  BaseAddress = WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddress(v7, v14);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, BaseAddress, v12, Width, Height);
  return WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(v7, (__CVBuffer *)1, (unint64_t)WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUQueue::copyExternalImageToTexture(WebCore::ScriptExecutionContext &,WebCore::GPUImageCopyExternalImage const&,WebCore::GPUImageCopyTextureTagged const&,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&)::$_0,void,std::span<unsigned char const,18446744073709551615ul>,unsigned long,unsigned long>::call(uint64_t result, unsigned __int8 *a2, size_t size, unint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  size_t v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t (**v16)();
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  int v44;
  int v45;
  char v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  float v55;
  float v56;
  float v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  float v64;
  unsigned int v65;
  unsigned int v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  unsigned int v71;
  char v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  char *v77;
  char *v78;
  float v80;
  unint64_t v81;
  unsigned __int8 *v82;
  char *v83;
  size_t v87;
  _BYTE *v88;
  float *v89;
  float v90;
  float v91;
  unint64_t v92;
  unsigned __int8 *v93;
  float *v94;
  char *v95;
  float v97;
  size_t v98;
  unsigned int v99;
  char *v101;
  char *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  unsigned int v105;
  int v106;
  int v107;
  unsigned int v108;
  float *v109;
  float v110;
  float v111;
  size_t v112;
  float *v113;
  unsigned int v114;
  unsigned int v115;
  char *v116;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v126;
  __int16 v135;
  __int16 v140;
  char *v145;
  float v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  float *v153;
  float v154;
  float *v155;
  float v156;
  float v157;
  float v158;
  float v159;
  int v160;
  float v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  unsigned __int8 *v171;
  unsigned __int8 *v172;
  unsigned __int8 v173;
  unint64_t v174;
  unint64_t v175;
  size_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  size_t v181;
  char v182;
  unsigned __int8 *v183;
  char *v184;
  unsigned int v185;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  __int16 v195;
  unint64_t v196;
  unint64_t v197;
  size_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  size_t v203;
  char v204;
  unsigned __int8 *v205;
  float *v206;
  unsigned int v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  float v216;
  char *v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  __int16 v227;
  unsigned int v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  float v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  float v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  __int16 v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  uint64_t v264;
  unint64_t v265;
  char *v266;
  char *v268;
  uint64_t v285;
  unint64_t v286;
  float *v287;
  float v288;
  float *v289;
  float v290;
  float v291;
  size_t v292;
  int v293;
  char v294;
  uint64_t v295;
  _QWORD v297[2];
  int v298;
  _QWORD *v299;
  int v300;
  char v301;
  int v302;
  char v303;
  WTF *v304;
  uint64_t *v305;
  char *v306;
  uint64_t *v307;
  int v308;
  char v309;
  char v310;
  char v311;
  char v312;
  uint64_t v313;
  char v314;
  char *v315;
  _QWORD v316[2];
  int v317;

  if (!**(_BYTE **)(result + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x195274A28);
  }
  v5 = (_QWORD *)result;
  v6 = **(_QWORD **)(result + 16);
  if (v6)
  {
    v9 = size;
    v10 = size;
    v11 = *(_QWORD *)(result + 48);
    do
      v12 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v12 + 1, (unsigned int *)v6));
    if (!a2 || !size || !*(_QWORD *)(v6 + 8))
    {
      do
      {
LABEL_67:
        v53 = __ldaxr((unsigned int *)v6);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, (unsigned int *)v6));
      if (!v54)
      {
        atomic_store(1u, (unsigned int *)v6);
        return WTF::fastFree((WTF *)v6, a2);
      }
      return result;
    }
    v13 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(result + 16) + 8) + 32);
    v293 = **(unsigned __int8 **)(result + 24);
    v14 = *(_QWORD *)(result + 40);
    v15 = **(unsigned __int8 **)(result + 32);
    LODWORD(v299) = 0;
    LODWORD(v297[0]) = 0;
    v16 = off_1E334F078;
    if (*(_BYTE *)(v14 + 40))
    {
      v304 = (WTF *)&v299;
      v305 = v297;
      v306 = (char *)&v299;
      v307 = v297;
      v17 = *(unsigned int *)(v14 + 32);
      if ((_DWORD)v17 == -1)
        goto LABEL_269;
      v316[0] = &v304;
      ((void (*)(_QWORD *, uint64_t))off_1E334F078[v17])(v316, v14 + 16);
      v16 = off_1E334F078;
    }
    v295 = v11;
    v18 = 0;
    v19 = 1;
    switch(v13)
    {
      case 0:
        v10 = v9 >> 2;
        v73 = (char *)malloc_type_malloc(v9 >> 2, 0x898A8B44uLL);
        v18 = v73;
        v74 = 4;
        if (v9 > 4)
          v74 = v9;
        v75 = ((unint64_t)(v74 - 1) >> 2) + 1;
        if (v15)
        {
          v76 = a2;
          v77 = v73;
          do
          {
            *v77++ = (32897 * v76[3] * *v76) >> 23;
            v76 += 4;
            --v75;
          }
          while (v75);
        }
        else
        {
          v171 = a2;
          v172 = (unsigned __int8 *)v73;
          do
          {
            v173 = *v171;
            v171 += 4;
            *v172++ = v173;
            --v75;
          }
          while (v75);
        }
        v19 = 0;
        v16 = off_1E334F078;
        if (!a5)
          goto LABEL_12;
        if (!v293)
          goto LABEL_12;
        v19 = 0;
        if (v10 < a5)
          goto LABEL_12;
        v174 = a5 - 1;
        if (a5 == 1)
          goto LABEL_12;
        v175 = 0;
        v176 = v10 / a5;
        if (v10 / a5 <= 1)
          v177 = 1;
        else
          v177 = v10 / a5;
        do
        {
          v178 = 0;
          v179 = v174 * v176;
          v180 = v177;
          v181 = v175 * v176;
          do
          {
            v182 = v18[v178 + v179];
            v18[v178 + v179] = v18[v178 + v181];
            v18[v178 + v181] = v182;
            ++v178;
            --v180;
          }
          while (v180);
          ++v175;
          --v174;
        }
        while (v175 < v174);
        goto LABEL_266;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 19:
      case 20:
      case 21:
      case 24:
      case 25:
      case 27:
      case 28:
      case 29:
      case 31:
      case 32:
      case 34:
      case 35:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
        goto LABEL_12;
      case 6:
        v10 = v9 >> 1;
        v78 = (char *)malloc_type_malloc(v9 >> 1, 0x1E23F7E0uLL);
        v18 = v78;
        v81 = ((v9 - 1) >> 2) + 1;
        if (v15)
        {
          v82 = a2;
          v83 = v78;
          do
          {
            LOBYTE(_S0) = *v82;
            LOBYTE(v80) = v82[3];
            v80 = (float)LODWORD(v80);
            _S0 = (float)((float)LODWORD(_S0) / 255.0) * (float)(v80 / 255.0);
            __asm { FCVT            H0, S0 }
            *(_WORD *)v83 = LOWORD(_S0);
            v83 += 2;
            v82 += 4;
            --v81;
          }
          while (v81);
        }
        else
        {
          v183 = a2;
          v184 = v78;
          do
          {
            v185 = *v183;
            v183 += 4;
            _S0 = (float)v185 / 255.0;
            __asm { FCVT            H0, S0 }
            *(_WORD *)v184 = LOWORD(_S0);
            v184 += 2;
            --v81;
          }
          while (v81);
        }
        v19 = 0;
        v16 = off_1E334F078;
        if (!a5)
          goto LABEL_12;
        if (!v293)
          goto LABEL_12;
        v19 = 0;
        v187 = a5 - 1;
        if (a5 == 1 || v10 / a5 < 2)
          goto LABEL_12;
        v188 = 0;
        v189 = (v10 / a5) >> 1;
        if (v189 <= 1)
          v190 = 1;
        else
          v190 = (v10 / a5) >> 1;
        do
        {
          v191 = 0;
          v192 = v187 * v189;
          v193 = v190;
          v194 = v188 * v189;
          do
          {
            v195 = *(_WORD *)&v78[2 * v191 + 2 * v192];
            *(_WORD *)&v78[2 * v191 + 2 * v192] = *(_WORD *)&v78[2 * v191 + 2 * v194];
            *(_WORD *)&v78[2 * v191++ + 2 * v194] = v195;
            --v193;
          }
          while (v193);
          ++v188;
          --v187;
        }
        while (v188 < v187);
        goto LABEL_266;
      case 7:
        v10 = v9 >> 1;
        v18 = (char *)malloc_type_malloc(v9 >> 1, 0x3276092EuLL);
        v87 = 0;
        v88 = v18 + 1;
        if (v15)
        {
          do
          {
            *(v88 - 1) = (32897 * a2[v87 + 3] * a2[v87]) >> 23;
            *v88 = (32897 * a2[v87 + 3] * a2[v87 + 1]) >> 23;
            v88 += 2;
            v87 += 4;
          }
          while (v87 < v9);
        }
        else
        {
          do
          {
            *(v88 - 1) = a2[v87];
            *v88 = a2[v87 + 1];
            v88 += 2;
            v87 += 4;
          }
          while (v87 < v9);
        }
        v19 = 0;
        v16 = off_1E334F078;
        if (!a5)
          goto LABEL_12;
        if (!v293)
          goto LABEL_12;
        v19 = 0;
        if (v10 < a5)
          goto LABEL_12;
        v196 = a5 - 1;
        if (a5 == 1)
          goto LABEL_12;
        v197 = 0;
        v198 = v10 / a5;
        if (v10 / a5 <= 1)
          v199 = 1;
        else
          v199 = v10 / a5;
        do
        {
          v200 = 0;
          v201 = v196 * v198;
          v202 = v199;
          v203 = v197 * v198;
          do
          {
            v204 = v18[v200 + v201];
            v18[v200 + v201] = v18[v200 + v203];
            v18[v200 + v203] = v204;
            ++v200;
            --v202;
          }
          while (v202);
          ++v197;
          --v196;
        }
        while (v197 < v196);
        goto LABEL_266;
      case 13:
        v89 = (float *)malloc_type_malloc(v10, 0x4097FBCDuLL);
        v18 = (char *)v89;
        v92 = ((v9 - 1) >> 2) + 1;
        if (v15)
        {
          v93 = a2;
          v94 = v89;
          do
          {
            LOBYTE(v90) = *v93;
            LOBYTE(v91) = v93[3];
            v91 = (float)LODWORD(v91);
            v90 = (float)((float)LODWORD(v90) / 255.0) * (float)(v91 / 255.0);
            *v94++ = v90;
            v93 += 4;
            --v92;
          }
          while (v92);
        }
        else
        {
          v205 = a2;
          v206 = v89;
          do
          {
            v207 = *v205;
            v205 += 4;
            *v206++ = (float)v207 / 255.0;
            --v92;
          }
          while (v92);
        }
        v19 = 0;
        v16 = off_1E334F078;
        if (!a5)
          goto LABEL_12;
        if (!v293)
          goto LABEL_12;
        v19 = 0;
        v208 = a5 - 1;
        if (a5 == 1 || v9 / a5 < 4)
          goto LABEL_12;
        v209 = 0;
        v210 = (v9 / a5) >> 2;
        if (v210 <= 1)
          v211 = 1;
        else
          v211 = (v9 / a5) >> 2;
        do
        {
          v212 = 0;
          v213 = v208 * v210;
          v214 = v211;
          v215 = v209 * v210;
          do
          {
            v216 = v89[v212 + v213];
            v89[v212 + v213] = v89[v212 + v215];
            v89[v212 + v215] = v216;
            ++v212;
            --v214;
          }
          while (v214);
          ++v209;
          --v208;
        }
        while (v209 < v208);
        goto LABEL_266;
      case 16:
        v95 = (char *)malloc_type_malloc(v10, 0x4942E0D9uLL);
        v18 = v95;
        v98 = 0;
        if (v15)
        {
          do
          {
            LOBYTE(_S0) = a2[v98];
            LOBYTE(v97) = a2[v98 + 3];
            *(float *)&v99 = (float)LODWORD(v97) / 255.0;
            *(float *)&_S0 = (float)((float)LODWORD(_S0) / 255.0) * *(float *)&v99;
            __asm { FCVT            H0, S0 }
            v101 = &v95[v98];
            *(_WORD *)v101 = _S0;
            LOBYTE(_S0) = a2[v98 + 1];
            LOBYTE(v99) = a2[v98 + 3];
            v97 = (float)v99;
            _S0 = (float)((float)_S0 / 255.0) * (float)(v97 / 255.0);
            __asm { FCVT            H0, S0 }
            *((_WORD *)v101 + 1) = LOWORD(_S0);
            v98 += 4;
          }
          while (v98 < v9);
        }
        else
        {
          do
          {
            LOBYTE(_S0) = a2[v98];
            *(float *)&_S0 = (float)LODWORD(_S0) / 255.0;
            __asm { FCVT            H0, S0 }
            v218 = &v95[v98];
            *(_WORD *)v218 = _S0;
            LOBYTE(_S0) = a2[v98 + 1];
            _S0 = (float)_S0 / 255.0;
            __asm { FCVT            H0, S0 }
            *((_WORD *)v218 + 1) = LOWORD(_S0);
            v98 += 4;
          }
          while (v98 < v9);
        }
        v19 = 0;
        v16 = off_1E334F078;
        if (!a5)
          goto LABEL_12;
        if (!v293)
          goto LABEL_12;
        v19 = 0;
        v219 = a5 - 1;
        if (a5 == 1 || v9 / a5 < 2)
          goto LABEL_12;
        v220 = 0;
        v221 = (v9 / a5) >> 1;
        if (v221 <= 1)
          v222 = 1;
        else
          v222 = (v9 / a5) >> 1;
        do
        {
          v223 = 0;
          v224 = v219 * v221;
          v225 = v222;
          v226 = v220 * v221;
          do
          {
            v227 = *(_WORD *)&v95[2 * v223 + 2 * v224];
            *(_WORD *)&v95[2 * v223 + 2 * v224] = *(_WORD *)&v95[2 * v223 + 2 * v226];
            *(_WORD *)&v95[2 * v223++ + 2 * v226] = v227;
            --v225;
          }
          while (v225);
          ++v220;
          --v219;
        }
        while (v220 < v219);
        goto LABEL_266;
      case 17:
      case 18:
      case 22:
      case 23:
        if (!v293 && !v15 && !(_DWORD)v299 && !LODWORD(v297[0]))
          goto LABEL_87;
        v18 = (char *)malloc_type_malloc(v10, 0x3BD44B07uLL);
        memcpy(v18, a2, v10);
        v19 = 0;
        if (!a5)
        {
          v16 = off_1E334F078;
          goto LABEL_12;
        }
        v16 = off_1E334F078;
        if (!(v15 | v293))
          goto LABEL_12;
        v58 = v9 / a5;
        if (v15)
        {
          if ((v58 & 3) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195274C1CLL);
          }
          if (v9 >= a5)
          {
            v59 = a5 - 1;
            if (v293)
            {
              v60 = 0;
              do
              {
                v61 = 0;
                do
                {
                  v62 = &v18[v61 + v59 * v58];
                  LOBYTE(v55) = v62[3];
                  v63 = &v18[v61 + v60 * v58];
                  LOBYTE(v56) = v63[3];
                  v63[3] = -1;
                  v64 = (float)LODWORD(v55);
                  LOBYTE(v57) = *v62;
                  v62[3] = -1;
                  *(float *)&v65 = (float)(v64 * (float)LODWORD(v57)) / 255.0;
                  *v62 = (int)*(float *)&v65;
                  v56 = (float)LODWORD(v56);
                  LOBYTE(v65) = *v63;
                  *(float *)&v66 = (float)(v56 * (float)v65) / 255.0;
                  *v63 = (int)*(float *)&v66;
                  v67 = *v62;
                  *v62 = (int)*(float *)&v66;
                  *v63 = v67;
                  LOBYTE(v66) = v62[1];
                  *(float *)&v68 = (float)(v64 * (float)v66) / 255.0;
                  v62[1] = (int)*(float *)&v68;
                  LOBYTE(v68) = v63[1];
                  *(float *)&v69 = (float)(v56 * (float)v68) / 255.0;
                  v63[1] = (int)*(float *)&v69;
                  v70 = v62[1];
                  v62[1] = (int)*(float *)&v69;
                  v63[1] = v70;
                  LOBYTE(v69) = v62[2];
                  v57 = (float)v69;
                  *(float *)&v71 = (float)(v64 * v57) / 255.0;
                  v62[2] = (int)*(float *)&v71;
                  LOBYTE(v71) = v63[2];
                  v55 = (float)(v56 * (float)v71) / 255.0;
                  v63[2] = (int)v55;
                  v72 = v62[2];
                  v62[2] = (int)v55;
                  v63[2] = v72;
                  v61 += 4;
                }
                while (v61 < v58);
                _CF = ++v60 >= v59--;
              }
              while (!_CF);
            }
            else
            {
              v238 = 0;
              do
              {
                v239 = 0;
                do
                {
                  v240 = &v18[v239 + v59 * v58];
                  LOBYTE(v55) = v240[3];
                  v241 = &v18[v239 + v238 * v58];
                  LOBYTE(v56) = v241[3];
                  v241[3] = -1;
                  v240[3] = -1;
                  v242 = (float)LODWORD(v55);
                  LOBYTE(v57) = *v240;
                  v56 = (float)LODWORD(v56);
                  *(float *)&v243 = (float)(v242 * (float)LODWORD(v57)) / 255.0;
                  *v240 = (int)*(float *)&v243;
                  LOBYTE(v243) = *v241;
                  *(float *)&v244 = (float)(v56 * (float)v243) / 255.0;
                  *v241 = (int)*(float *)&v244;
                  LOBYTE(v244) = v240[1];
                  *(float *)&v245 = (float)(v242 * (float)v244) / 255.0;
                  v240[1] = (int)*(float *)&v245;
                  LOBYTE(v245) = v241[1];
                  *(float *)&v246 = (float)(v56 * (float)v245) / 255.0;
                  v241[1] = (int)*(float *)&v246;
                  LOBYTE(v246) = v240[2];
                  v57 = (float)v246;
                  *(float *)&v247 = (float)(v242 * v57) / 255.0;
                  v240[2] = (int)*(float *)&v247;
                  LOBYTE(v247) = v241[2];
                  v55 = (float)(v56 * (float)v247) / 255.0;
                  v241[2] = (int)v55;
                  v239 += 4;
                }
                while (v239 < v58);
                _CF = ++v238 >= v59--;
              }
              while (!_CF);
            }
          }
          goto LABEL_266;
        }
        if (!v293)
          goto LABEL_266;
        v19 = 0;
        v163 = a5 - 1;
        if (a5 != 1 && v9 >= a5)
        {
          v164 = 0;
          if (v58 <= 1)
            v165 = 1;
          else
            v165 = v9 / a5;
          do
          {
            v166 = 0;
            v167 = v163 * v58;
            v168 = v165;
            v169 = v164 * v58;
            do
            {
              v170 = v18[v166 + v167];
              v18[v166 + v167] = v18[v166 + v169];
              v18[v166 + v169] = v170;
              ++v166;
              --v168;
            }
            while (v168);
            ++v164;
            --v163;
          }
          while (v164 < v163);
          goto LABEL_266;
        }
        goto LABEL_12;
      case 26:
        v102 = (char *)malloc_type_malloc(v10, 0xD756EECuLL);
        v18 = v102;
        v103 = 0;
        v104 = a2 + 3;
        do
        {
          v105 = *(v104 - 3);
          v106 = *(v104 - 2);
          v107 = *(v104 - 1);
          v108 = *v104;
          v104 += 4;
          *(_DWORD *)&v102[4 * v103++] = (16 * v106) & 0xC00 | (v106 << 12) & 0x3FFFFFFF | ((v105 >> 6) | (4 * v105)) & 0x3FFFFFFF | (v107 << 14) & 0x300000 | (v107 << 22) & 0x3FFFFFFF | ((v108 >> 6) << 30);
        }
        while (((v9 - 1) >> 2) + 1 != v103);
        v19 = 0;
        v16 = off_1E334F078;
        goto LABEL_12;
      case 30:
        v10 = (2 * v9) & 0xFFFFFFFFFFFFFFFCLL;
        v109 = (float *)malloc_type_malloc(v10, 0x100004052888210uLL);
        v18 = (char *)v109;
        v112 = 0;
        v113 = v109 + 1;
        if (v15)
        {
          do
          {
            LOBYTE(v110) = a2[v112];
            LOBYTE(v111) = a2[v112 + 3];
            *(float *)&v114 = (float)LODWORD(v111) / 255.0;
            *(float *)&v115 = (float)((float)LODWORD(v110) / 255.0) * *(float *)&v114;
            *(v113 - 1) = *(float *)&v115;
            LOBYTE(v115) = a2[v112 + 1];
            LOBYTE(v114) = a2[v112 + 3];
            v111 = (float)v114;
            v110 = (float)((float)v115 / 255.0) * (float)(v111 / 255.0);
            *v113 = v110;
            v113 += 2;
            v112 += 4;
          }
          while (v112 < v9);
        }
        else
        {
          do
          {
            LOBYTE(v110) = a2[v112];
            *(float *)&v228 = (float)LODWORD(v110) / 255.0;
            *(v113 - 1) = *(float *)&v228;
            LOBYTE(v228) = a2[v112 + 1];
            v110 = (float)v228 / 255.0;
            *v113 = v110;
            v113 += 2;
            v112 += 4;
          }
          while (v112 < v9);
        }
        v19 = 0;
        v16 = off_1E334F078;
        if (!a5)
          goto LABEL_12;
        if (!v293)
          goto LABEL_12;
        v19 = 0;
        v229 = a5 - 1;
        if (a5 == 1 || v10 / a5 < 4)
          goto LABEL_12;
        v230 = 0;
        v231 = (v10 / a5) >> 2;
        if (v231 <= 1)
          v232 = 1;
        else
          v232 = (v10 / a5) >> 2;
        do
        {
          v233 = 0;
          v234 = v229 * v231;
          v235 = v232;
          v236 = v230 * v231;
          do
          {
            v237 = v109[v233 + v234];
            v109[v233 + v234] = v109[v233 + v236];
            v109[v233 + v236] = v237;
            ++v233;
            --v235;
          }
          while (v235);
          ++v230;
          --v229;
        }
        while (v230 < v229);
        goto LABEL_266;
      case 33:
        v10 = 2 * v9;
        v116 = (char *)malloc_type_malloc(2 * v9, 0x1000040BDFB0063uLL);
        v18 = v116;
        v118 = 0;
        do
        {
          LOBYTE(_S0) = a2[v118];
          _S0 = (float)LODWORD(_S0) / 255.0;
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v116[2 * v118++] = LOWORD(_S0);
        }
        while (v9 != v118);
        v19 = 0;
        v16 = off_1E334F078;
        if (!a5 || !(v15 | v293))
          goto LABEL_12;
        v119 = v10 / a5;
        v120 = (v10 / a5) >> 1;
        if (v15)
        {
          if ((v119 & 6) != 0)
          {
LABEL_270:
            __break(0xC471u);
            JUMPOUT(0x195274C40);
          }
          if (v119 >= 2)
          {
            v121 = a5 - 1;
            if (v293)
            {
              v122 = 0;
              do
              {
                v123 = 0;
                do
                {
                  v124 = &v116[2 * v123 + 2 * v122 * v120];
                  _H1 = *((_WORD *)v124 + 3);
                  v126 = &v116[2 * v123 + 2 * v121 * v120];
                  _H2 = *((_WORD *)v126 + 3);
                  *((_WORD *)v124 + 3) = 15360;
                  _H3 = *(_WORD *)v126;
                  *((_WORD *)v126 + 3) = 15360;
                  __asm
                  {
                    FCVT            S3, H3
                    FCVT            S2, H2
                  }
                  _S3 = _S2 * _S3;
                  __asm { FCVT            H3, S3 }
                  *(_WORD *)v126 = LOWORD(_S3);
                  LOWORD(_S3) = *(_WORD *)v124;
                  __asm
                  {
                    FCVT            S3, H3
                    FCVT            S1, H1
                  }
                  _S3 = _S1 * _S3;
                  __asm { FCVT            H3, S3 }
                  *(_WORD *)v124 = LOWORD(_S3);
                  v135 = *(_WORD *)v126;
                  *(_WORD *)v126 = LOWORD(_S3);
                  *(_WORD *)v124 = v135;
                  LOWORD(_S3) = *((_WORD *)v126 + 1);
                  __asm { FCVT            S3, H3 }
                  _S3 = _S2 * _S3;
                  __asm { FCVT            H3, S3 }
                  *((_WORD *)v126 + 1) = LOWORD(_S3);
                  LOWORD(_S3) = *((_WORD *)v124 + 1);
                  __asm { FCVT            S3, H3 }
                  _S3 = _S1 * _S3;
                  __asm { FCVT            H3, S3 }
                  *((_WORD *)v124 + 1) = LOWORD(_S3);
                  v140 = *((_WORD *)v126 + 1);
                  *((_WORD *)v126 + 1) = LOWORD(_S3);
                  *((_WORD *)v124 + 1) = v140;
                  LOWORD(_S3) = *((_WORD *)v126 + 2);
                  __asm { FCVT            S3, H3 }
                  _S2 = _S2 * _S3;
                  __asm { FCVT            H2, S2 }
                  *((_WORD *)v126 + 2) = LOWORD(_S2);
                  LOWORD(_S2) = *((_WORD *)v124 + 2);
                  __asm { FCVT            S2, H2 }
                  _S1 = _S1 * _S2;
                  __asm { FCVT            H1, S1 }
                  *((_WORD *)v124 + 2) = LOWORD(_S1);
                  LOWORD(_S2) = *((_WORD *)v126 + 2);
                  *((_WORD *)v126 + 2) = LOWORD(_S1);
                  *((_WORD *)v124 + 2) = LOWORD(_S2);
                  v123 += 4;
                }
                while (v123 < v120);
                _CF = ++v122 >= v121--;
              }
              while (!_CF);
            }
            else
            {
              v264 = 0;
              do
              {
                v265 = 0;
                do
                {
                  v266 = &v116[2 * v265 + 2 * v264 * v120];
                  _H1 = *((_WORD *)v266 + 3);
                  v268 = &v116[2 * v265 + 2 * v121 * v120];
                  _H2 = *((_WORD *)v268 + 3);
                  *((_WORD *)v266 + 3) = 15360;
                  _H3 = *(_WORD *)v268;
                  __asm
                  {
                    FCVT            S3, H3
                    FCVT            S2, H2
                  }
                  _S3 = _S2 * _S3;
                  *((_WORD *)v268 + 3) = 15360;
                  __asm { FCVT            H3, S3 }
                  *(_WORD *)v268 = LOWORD(_S3);
                  LOWORD(_S3) = *(_WORD *)v266;
                  __asm
                  {
                    FCVT            S3, H3
                    FCVT            S1, H1
                  }
                  _S3 = _S1 * _S3;
                  __asm { FCVT            H3, S3 }
                  *(_WORD *)v266 = LOWORD(_S3);
                  LOWORD(_S3) = *((_WORD *)v268 + 1);
                  __asm { FCVT            S3, H3 }
                  _S3 = _S2 * _S3;
                  __asm { FCVT            H3, S3 }
                  *((_WORD *)v268 + 1) = LOWORD(_S3);
                  LOWORD(_S3) = *((_WORD *)v266 + 1);
                  __asm { FCVT            S3, H3 }
                  _S3 = _S1 * _S3;
                  __asm { FCVT            H3, S3 }
                  *((_WORD *)v266 + 1) = LOWORD(_S3);
                  LOWORD(_S3) = *((_WORD *)v268 + 2);
                  __asm { FCVT            S3, H3 }
                  _S2 = _S2 * _S3;
                  __asm { FCVT            H2, S2 }
                  *((_WORD *)v268 + 2) = LOWORD(_S2);
                  LOWORD(_S2) = *((_WORD *)v266 + 2);
                  __asm { FCVT            S2, H2 }
                  _S1 = _S1 * _S2;
                  __asm { FCVT            H1, S1 }
                  *((_WORD *)v266 + 2) = LOWORD(_S1);
                  v265 += 4;
                }
                while (v265 < v120);
                _CF = ++v264 >= v121--;
              }
              while (!_CF);
            }
          }
        }
        else if (v293)
        {
          v19 = 0;
          v248 = a5 - 1;
          if (a5 == 1 || v119 < 2)
            goto LABEL_12;
          v249 = 0;
          if (v120 <= 1)
            v250 = 1;
          else
            v250 = (v10 / a5) >> 1;
          do
          {
            v251 = 0;
            v252 = v248 * v120;
            v253 = v250;
            v254 = v249 * v120;
            do
            {
              v255 = *(_WORD *)&v116[2 * v251 + 2 * v252];
              *(_WORD *)&v116[2 * v251 + 2 * v252] = *(_WORD *)&v116[2 * v251 + 2 * v254];
              *(_WORD *)&v116[2 * v251++ + 2 * v254] = v255;
              --v253;
            }
            while (v253);
            ++v249;
            --v248;
          }
          while (v249 < v248);
        }
LABEL_266:
        v19 = 0;
LABEL_12:
        v294 = v19;
        v313 = 0;
        v20 = v5[5];
        v21 = v10 / a5;
        if (*(_BYTE *)(v20 + 40))
        {
          v304 = (WTF *)((char *)&v313 + 4);
          v305 = &v313;
          v306 = (char *)&v313 + 4;
          v307 = &v313;
          v22 = *(unsigned int *)(v20 + 32);
          if ((_DWORD)v22 == -1)
            goto LABEL_269;
          v316[0] = &v304;
          ((void (*)(_QWORD *, uint64_t))off_1E334F078[v22])(v316, v20 + 16);
          v23 = v313;
          if (v313)
          {
            if (!v18)
            {
              __break(0xC471u);
              JUMPOUT(0x195274BECLL);
            }
            v24 = a5 - v313;
            if (a5 > v313)
            {
              v25 = 0;
              if (v21 / a4 <= 1)
                v26 = 1;
              else
                v26 = v21 / a4;
              do
              {
                v27 = HIDWORD(v313);
                v28 = a4 - HIDWORD(v313);
                _CF = a4 > HIDWORD(v313) && v21 >= a4;
                if (_CF)
                {
                  v30 = 0;
                  do
                  {
                    v31 = 0;
                    v16 = (uint64_t (**)())v26;
                    do
                    {
                      v18[v25 * v21 + v30 * (v21 / a4) + v31] = v18[v23 * v21 + v27 * (v21 / a4) + v31];
                      ++v31;
                      v16 = (uint64_t (**)())((char *)v16 - 1);
                    }
                    while (v16);
                    ++v27;
                    ++v30;
                  }
                  while (v30 != v28);
                }
                ++v23;
                ++v25;
              }
              while (v25 != v24);
            }
          }
        }
        v32 = v5[2];
        v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v32 + 8) + 24);
        if (!*(_QWORD *)(v33 + 16))
        {
          v35 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v35 = 1;
          *(_QWORD *)(v35 + 8) = v33;
          v36 = *(unsigned int **)(v33 + 16);
          *(_QWORD *)(v33 + 16) = v35;
          if (v36)
          {
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              atomic_store(1u, v36);
              WTF::fastFree((WTF *)v36, v34);
            }
          }
        }
        v292 = v10;
        v39 = *(unsigned int **)(v33 + 16);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 + 1, v39));
        v304 = (WTF *)v39;
        LODWORD(v305) = *(_DWORD *)(v32 + 8);
        v41 = *(unsigned __int8 *)(v32 + 40);
        v42 = a2;
        if (!*(_BYTE *)(v32 + 40))
        {
          v46 = 0;
          LOBYTE(v306) = 0;
          goto LABEL_43;
        }
        v43 = *(unsigned int *)(v32 + 32);
        if ((_DWORD)v43 != -1)
        {
          v44 = a5;
          v299 = v297;
          ((void (*)(_QWORD *__return_ptr, _QWORD **, uint64_t, uint64_t (**)()))off_1E334EF10[v43])(v316, &v299, v32 + 16, v16);
          LOBYTE(v306) = 0;
          v308 = -1;
          v45 = v317;
          if (v317 != -1)
          {
            ((void (*)(_QWORD **, char **, _QWORD *))off_1E334EF30[v317])(&v299, &v306, v316);
            v308 = v45;
          }
          v46 = 1;
          LODWORD(a5) = v44;
          v42 = a2;
LABEL_43:
          v309 = v46;
          if (*(unsigned __int8 *)(v32 + 48) >= 3u)
          {
            __break(0xC471u);
            JUMPOUT(0x195274C80);
          }
          v310 = *(_BYTE *)(v32 + 48);
          if (*(unsigned __int8 *)(v32 + 49) >= 2u)
          {
            __break(0xC471u);
            JUMPOUT(0x195274CA0);
          }
          v311 = *(_BYTE *)(v32 + 49);
          v312 = *(_BYTE *)(v32 + 50);
          if (v41 && v317 != -1)
          {
            v47 = v42;
            ((void (*)(_QWORD **, _QWORD *))off_1E334EF20[v317])(&v299, v316);
            v42 = v47;
          }
          if ((v294 & 1) != 0 || (*(_BYTE *)(*(_QWORD *)(v6 + 8) + 60) & 0x10) == 0)
            LODWORD(v305) = 0x7FFFFFFF;
          v48 = *(_QWORD *)(v295 + 8);
          v299 = 0;
          v300 = v21;
          v301 = 1;
          v302 = a5;
          v303 = 1;
          v49 = *(unsigned int *)(v5[7] + 16);
          if ((_DWORD)v49 != -1)
          {
            if (v18)
              v50 = (unsigned __int8 *)v18;
            else
              v50 = v42;
            if (v18)
              v9 = v292;
            v315 = &v314;
            ((void (*)(_QWORD *__return_ptr, char **))off_1E334EF40[v49])(v297, &v315);
            (*(void (**)(uint64_t, WTF **, unsigned __int8 *, size_t, _QWORD **, _QWORD *))(*(_QWORD *)v48 + 40))(v48, &v304, v50, v9, &v299, v297);
            if (v298 != -1)
              ((void (*)(char **, _QWORD *))off_1E334EF50[v298])(&v315, v297);
            free(v18);
            if (v309)
            {
              if (v308 != -1)
                ((void (*)(_QWORD **, char **))off_1E334EF20[v308])(&v299, &v306);
              v308 = -1;
            }
            result = (uint64_t)v304;
            v304 = 0;
            if (result)
            {
              do
              {
                v51 = __ldaxr((unsigned int *)result);
                v52 = v51 - 1;
              }
              while (__stlxr(v52, (unsigned int *)result));
              if (!v52)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, a2);
              }
            }
            goto LABEL_67;
          }
        }
LABEL_269:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_270;
      case 36:
        v10 = 4 * v9;
        v145 = (char *)malloc_type_malloc(4 * v9, 0x100004052888210uLL);
        v18 = v145;
        v147 = 0;
        do
        {
          LOBYTE(v146) = a2[v147];
          v146 = (float)LODWORD(v146) / 255.0;
          *(float *)&v145[4 * v147++] = v146;
        }
        while (v9 != v147);
        v19 = 0;
        v16 = off_1E334F078;
        if (!a5 || !(v15 | v293))
          goto LABEL_12;
        v148 = v10 / a5;
        v149 = (v10 / a5) >> 2;
        if (v15)
        {
          if ((v148 & 0xC) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195274C60);
          }
          if (v148 >= 4)
          {
            v150 = a5 - 1;
            if (v293)
            {
              v151 = 0;
              do
              {
                v152 = 0;
                do
                {
                  v153 = (float *)&v145[4 * v152 + 4 * v151 * v149];
                  v154 = v153[3];
                  v155 = (float *)&v145[4 * v152 + 4 * v150 * v149];
                  v156 = v155[3];
                  v153[3] = 1.0;
                  v155[3] = 1.0;
                  *v155 = v156 * *v155;
                  v157 = v154 * *v153;
                  *v153 = v157;
                  v158 = *v155;
                  *v155 = v157;
                  *v153 = v158;
                  v155[1] = v156 * v155[1];
                  v159 = v154 * v153[1];
                  v153[1] = v159;
                  v160 = *((_DWORD *)v155 + 1);
                  v155[1] = v159;
                  *((_DWORD *)v153 + 1) = v160;
                  v155[2] = v156 * v155[2];
                  v161 = v154 * v153[2];
                  v153[2] = v161;
                  v162 = *((_DWORD *)v155 + 2);
                  v155[2] = v161;
                  *((_DWORD *)v153 + 2) = v162;
                  v152 += 4;
                }
                while (v152 < v149);
                _CF = ++v151 >= v150--;
              }
              while (!_CF);
            }
            else
            {
              v285 = 0;
              do
              {
                v286 = 0;
                do
                {
                  v287 = (float *)&v145[4 * v286 + 4 * v285 * v149];
                  v288 = v287[3];
                  v289 = (float *)&v145[4 * v286 + 4 * v150 * v149];
                  v290 = v289[3];
                  v287[3] = 1.0;
                  v291 = v290 * *v289;
                  v289[3] = 1.0;
                  *v289 = v291;
                  *v287 = v288 * *v287;
                  v289[1] = v290 * v289[1];
                  v287[1] = v288 * v287[1];
                  v289[2] = v290 * v289[2];
                  v287[2] = v288 * v287[2];
                  v286 += 4;
                }
                while (v286 < v149);
                _CF = ++v285 >= v150--;
              }
              while (!_CF);
            }
          }
          goto LABEL_266;
        }
        if (!v293)
          goto LABEL_266;
        v19 = 0;
        v256 = a5 - 1;
        if (a5 != 1 && v148 >= 4)
        {
          v257 = 0;
          if (v149 <= 1)
            v258 = 1;
          else
            v258 = (v10 / a5) >> 2;
          do
          {
            v259 = 0;
            v260 = v256 * v149;
            v261 = v258;
            v262 = v257 * v149;
            do
            {
              v263 = *(_DWORD *)&v145[4 * v259 + 4 * v260];
              *(_DWORD *)&v145[4 * v259 + 4 * v260] = *(_DWORD *)&v145[4 * v259 + 4 * v262];
              *(_DWORD *)&v145[4 * v259++ + 4 * v262] = v263;
              --v261;
            }
            while (v261);
            ++v257;
            --v256;
          }
          while (v257 < v256);
          goto LABEL_266;
        }
        goto LABEL_12;
      default:
LABEL_87:
        v19 = 0;
        v18 = 0;
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::populdateXYFromOrigin(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict> const&,unsigned int &,unsigned int &)::$_0,WebCore::populdateXYFromOrigin(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict> const&,unsigned int &,unsigned int &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict> const&>(uint64_t result, _DWORD *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v2 = *(_DWORD **)(*(_QWORD *)result + 8);
  v3 = a2[3];
  if (v3)
    v3 = **(_DWORD **)a2;
  ***(_DWORD ***)result = v3;
  if (a2[3] < 2u)
    v4 = 0;
  else
    v4 = *(_DWORD *)(*(_QWORD *)a2 + 4);
  *v2 = v4;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::populdateXYFromOrigin(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict> const&,unsigned int &,unsigned int &)::$_0,WebCore::populdateXYFromOrigin(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict> const&,unsigned int &,unsigned int &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUOrigin2DDict> const&>(uint64_t result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)result + 24);
  **(_DWORD **)(*(_QWORD *)result + 16) = *a2;
  *v2 = a2[1];
  return result;
}

void WebCore::DOMException::~DOMException(WebCore::DOMException *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E334F098;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E334F098;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WebCore::defaultSupportedImageTypes(void)::$_0::operator()(_QWORD *a1)
{
  WTF::StringImpl *v2;
  const WTF::StringImpl *v3;
  char **v4;
  char *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  int v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const __CFArray *cf;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **context;
  CFRange v20;

  cf = CGImageSourceCopyTypeIdentifiers();
  v20.length = CFArrayGetCount(cf);
  context = 0;
  v20.location = 0;
  CFArrayApplyFunction(cf, v20, (CFArrayApplierFunction)WebCore::defaultSupportedImageTypes(void)::$_0::operator() const(void)::{lambda(void const*,void *)#1}::__invoke, &context);
  *a1 = 0;
  a1[1] = 0;
  v4 = &WebCore::defaultSupportedImageTypes(void)::$_0::operator() const(void)::defaultSupportedImageTypes;
  *(_QWORD *)((char *)a1 + 13) = 0;
  do
  {
    v5 = v4[1];
    if (v5)
    {
      v2 = (WTF::StringImpl *)(v5 - 1);
      if (v5 == (char *)1)
      {
        v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v6 = v17;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = context;
    if (context)
    {
      v8 = *((_DWORD *)context - 2);
      v9 = *((_DWORD *)v6 + 4);
      if (v9 < 0x100)
        v10 = WTF::StringImpl::hashSlowCase(v6);
      else
        v10 = v9 >> 8;
      for (i = 0; ; v10 = i + v12)
      {
        v12 = v10 & v8;
        v13 = v7[v10 & v8];
        if (!v13)
          break;
        if (v13 != (WTF *)-1 && (WTF::equal(v13, v6, v3) & 1) != 0)
        {
          LODWORD(v7) = 1;
          goto LABEL_13;
        }
        ++i;
      }
      LODWORD(v7) = 0;
    }
LABEL_13:
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v2);
      else
        *(_DWORD *)v6 -= 2;
    }
    if ((_DWORD)v7)
    {
      if (v5)
      {
        if (v5 == (char *)1)
        {
          v14 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v14 = v17;
        }
        v18 = v14;
      }
      else
      {
        v18 = 0;
      }
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)a1, &v18, v3, (uint64_t)&v17);
      v15 = v18;
      v18 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v2);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    v4 += 2;
  }
  while (v4 != (char **)off_1E334F1D8);
  if (context)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(context, v2);
  if (cf)
    CFRelease(cf);
}

void sub_1952759DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl **a14)
{
  if (a14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_195275A4C()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x195275A54);
  JUMPOUT(0x195275A20);
}

WTF *WebCore::setAdditionalSupportedImageTypesForTesting(WebCore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  int v8;
  unsigned int v9;

  WTF::String::split();
  WebCore::setAdditionalSupportedImageTypes((unsigned int *)&v7);
  if (v9)
  {
    v4 = v7;
    v5 = 8 * v9;
    do
    {
      v6 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  result = v7;
  if (v7)
  {
    v7 = 0;
    v8 = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

void sub_195275B0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl **a9, int a10, unsigned int a11)
{
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (a11)
  {
    v12 = a9;
    v13 = 8 * a11;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  if (a9)
    WTF::fastFree((WTF *)a9, a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::preferredExtensionForImageType@<X0>(WebCore *this@<X0>, const WTF::StringImpl **a2@<X8>)
{
  CFStringRef v5;
  void *v6;
  const __CFString *v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  const __CFString *inUTI;
  WTF::StringImpl *v12;

  WTF::String::createCFString(this);
  v5 = UTTypeCopyPreferredTagWithClass(inUTI, (CFStringRef)*MEMORY[0x1E0CA5A88]);
  MEMORY[0x19AEA5508](&v12, v5);
  if (v5)
    CFRelease(v5);
  if (inUTI)
    CFRelease(inUTI);
  v6 = (void *)MEMORY[0x1E0CEC3F8];
  if (*(_QWORD *)this)
    v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E3487BC0;
  MEMORY[0x19AEA5508](a2, objc_msgSend((id)objc_msgSend(v6, "typeWithIdentifier:", v7, 0), "preferredFilenameExtension"));
  if ((WTF::equal(v12, *a2, v8) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195275C6CLL);
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_195275C7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10)
{
  WTF::StringImpl **v10;
  WTF::StringImpl *v12;

  v12 = *v10;
  *v10 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::cocoaColorOrNil(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  if ((*((_BYTE *)this + 6) & 4) != 0)
    WebCore::cocoaColor(this, a2);
  else
    *a2 = 0;
}

uint64_t WebCore::makeNSArrayElement(WebCore *this, const WebCore::FloatRect *a2)
{
  return objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGRect:", *(float *)this, *((float *)this + 1), *((float *)this + 2), *((float *)this + 3));
}

void WebCore::FontPlatformData::variationAxes(const __CTFont **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const __CTFont *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  v4 = *a1;
  if (!v4)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return;
  }
  WebCore::defaultVariationValues(v4, a2, &v25);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (v25)
  {
    v6 = *(unsigned int *)(v25 - 12);
    if (!(_DWORD)v6)
    {
LABEL_38:
      v21 = v25;
      if (v25)
      {
        v22 = *(unsigned int *)(v25 - 4);
        if ((_DWORD)v22)
        {
          v23 = (WTF::StringImpl **)(v25 + 8);
          do
          {
            if (*((_DWORD *)v23 - 2) != -1)
            {
              v24 = *v23;
              *v23 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2)
                  WTF::StringImpl::destroy(v24, v5);
                else
                  *(_DWORD *)v24 -= 2;
              }
            }
            v23 += 4;
            --v22;
          }
          while (v22);
        }
        WTF::fastFree((WTF *)(v21 - 16), v5);
      }
      return;
    }
    if (v6 >> 27)
    {
      __break(0xC471u);
      return;
    }
    v7 = WTF::fastMalloc((WTF *)(32 * v6));
    *(_DWORD *)(a3 + 8) = v6;
    *(_QWORD *)a3 = v7;
    if (v25)
    {
      if (!*(_DWORD *)(v25 - 12))
        goto LABEL_38;
      v8 = *(unsigned int *)(v25 - 4);
      if ((_DWORD)v8)
      {
        v9 = 32 * v8;
        v10 = v25;
        while ((*(_DWORD *)v10 + 1) <= 1)
        {
          v10 += 32;
          v9 -= 32;
          if (!v9)
            goto LABEL_38;
        }
      }
      else
      {
        v10 = v25;
      }
      v11 = v25 + 32 * v8;
      if (v10 == v11)
        goto LABEL_38;
      v12 = 0;
LABEL_16:
      WTF::String::String();
      v14 = *(_DWORD *)(v10 + 16);
      v13 = *(_DWORD *)(v10 + 20);
      v15 = *(_DWORD *)(v10 + 24);
      v16 = *(WTF::StringImpl **)(v10 + 8);
      if (v16)
        *(_DWORD *)v16 += 2;
      v17 = v26;
      if (v26)
      {
        v18 = *(_DWORD *)v26;
        *(_DWORD *)v26 += 2;
        v26 = 0;
        if (!v18)
        {
          WTF::StringImpl::destroy(v17, v5);
          if (!v16)
            goto LABEL_23;
          goto LABEL_22;
        }
        *(_DWORD *)v17 = v18;
      }
      if (!v16)
      {
LABEL_23:
        *(_QWORD *)(v7 + 32 * v12) = v16;
        if (v17)
        {
          *(_DWORD *)v17 += 2;
          v19 = v7 + 32 * v12;
          *(_QWORD *)(v19 + 8) = v17;
          *(_DWORD *)(v19 + 16) = v14;
          *(_DWORD *)(v19 + 20) = v13;
          *(_DWORD *)(v19 + 24) = v15;
          *(_DWORD *)(a3 + 12) = ++v12;
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v5);
          else
            *(_DWORD *)v17 -= 2;
        }
        else
        {
          v20 = v7 + 32 * v12;
          *(_QWORD *)(v20 + 8) = 0;
          *(_DWORD *)(v20 + 16) = v14;
          *(_DWORD *)(v20 + 20) = v13;
          *(_DWORD *)(v20 + 24) = v15;
          *(_DWORD *)(a3 + 12) = ++v12;
        }
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v5);
          else
            *(_DWORD *)v16 -= 2;
        }
        while (1)
        {
          v10 += 32;
          if (v10 == v11)
            goto LABEL_38;
          if ((*(_DWORD *)v10 + 1) > 1)
          {
            if (v10 != v11)
              goto LABEL_16;
            goto LABEL_38;
          }
        }
      }
LABEL_22:
      *(_DWORD *)v16 += 2;
      goto LABEL_23;
    }
  }
}

void sub_195275FAC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;

  if (v11)
  {
    v14 = 32 * v11;
    v15 = (WTF::StringImpl **)((char *)v10 + 8);
    do
    {
      v16 = *v15;
      *v15 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = *(v15 - 1);
      *(v15 - 1) = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      v15 += 4;
      v14 -= 32;
    }
    while (v14);
  }
  *(_QWORD *)v9 = 0;
  *(_DWORD *)(v9 + 8) = 0;
  WTF::fastFree(v10, a2);
  if (a9)
  {
    v18 = *(unsigned int *)(a9 - 4);
    if ((_DWORD)v18)
    {
      v19 = (WTF::StringImpl **)(a9 + 8);
      do
      {
        if (*((_DWORD *)v19 - 2) != -1)
        {
          v20 = *v19;
          *v19 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v13);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        v19 += 4;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)(a9 - 16), v13);
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::GraphicsContext::drawMultiRepresentationHEIC(uint64_t a1, WebCore::Image *this, uint64_t a3, uint64_t a4, unsigned __int16 a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  float v13;
  float v14;
  unint64_t v15;
  uint64_t v16;
  CGContext *v17;
  float v18;
  uint64_t v19;
  CGPoint TextPosition;
  void *v21;
  double *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v32;
  float v33[2];
  uint64_t v34;
  double *v35;
  char *v36;
  long double v37;
  long double v38;
  long double v39;
  char v40;
  double v41;

  v10 = WebCore::Image::adapter(this);
  v11 = WebCore::ImageAdapter::multiRepresentationHEIC(v10);
  if (v11)
  {
    v12 = v11;
    CFRetain(v11);
    v34 = *(_QWORD *)(a4 + 8);
    (*(void (**)(char **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 672))(&v36, a1, 0);
    v13 = hypot(*(long double *)&v36, v37);
    v14 = hypot(v38, v39);
    v33[0] = v13;
    v33[1] = v14;
    v15 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v15 != -1)
    {
      v36 = &v40;
      v41 = COERCE_DOUBLE(&v36);
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v41, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    WebCore::GraphicsContext::createScaledImageBuffer(a1, (float *)&v34, v33, (uint64_t)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0x100u, 0x100u, (uint64_t *)&v35);
    if (!v35)
    {
      v25 = 0;
LABEL_27:
      CFRelease(v12);
      return v25;
    }
    v16 = (*(uint64_t (**)(double *))(*(_QWORD *)v35 + 16))(v35);
    v17 = (CGContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    CGContextScaleCTM(v17, 1.0, -1.0);
    CGContextTranslateCTM(v17, 0.0, (float)-*(float *)(a4 + 12));
    v36 = 0;
    v41 = 0.0;
    CTFontGetTypographicBoundsForEmojiImageProvider();
    v18 = v41;
    CGContextSetTextPosition(v17, 0.0, v18);
    v19 = *(_QWORD *)(a3 + 88);
    TextPosition = CGContextGetTextPosition(v17);
    MEMORY[0x19AEA19BC](v19, v12, v17, TextPosition.x, TextPosition.y);
    if (!(a5 >> 12))
      (*(void (**)(WebCore::Image *))(*(_QWORD *)this + 200))(this);
    v36 = 0;
    v37 = v35[2];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
    v22 = v35;
    v35 = 0;
    if (!v22)
      goto LABEL_26;
    v23 = *((_QWORD *)v22 + 1);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v23);
LABEL_14:
    v26 = *(_QWORD *)(v23 + 8);
    v27 = v26 - 1;
    *(_QWORD *)(v23 + 8) = v26 - 1;
    if (v26 == 1)
    {
      v32 = *(_QWORD *)(v23 + 16);
      v28 = *(_QWORD *)(v23 + 24);
      *(_QWORD *)(v23 + 24) = 0;
      v29 = v32 != 0;
    }
    else
    {
      v28 = 0;
      v29 = 1;
    }
    v30 = __ldxr((unsigned __int8 *)v23);
    if (v30 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
      {
        if (!v27)
          goto LABEL_22;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    if (!v27)
    {
LABEL_22:
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      if (!v29)
        WTF::fastFree((WTF *)v23, v21);
    }
LABEL_26:
    v25 = 3;
    goto LABEL_27;
  }
  return 0;
}

void sub_19527634C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;

  if (!a12)
    goto LABEL_19;
  v14 = *(_QWORD *)(a12 + 8);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
LABEL_7:
    v16 = *(_QWORD *)(v14 + 8);
    v17 = v16 - 1;
    *(_QWORD *)(v14 + 8) = v16 - 1;
    if (v16 == 1)
    {
      v21 = *(_QWORD *)(v14 + 16);
      v18 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v14 + 24) = 0;
      v19 = v21 != 0;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    v20 = __ldxr((unsigned __int8 *)v14);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
      {
LABEL_14:
        if (!v17)
        {
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          if (!v19)
            WTF::fastFree((WTF *)v14, a2);
        }
LABEL_19:
        CFRelease(v12);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v14);
  goto LABEL_7;
}

void WebCore::GraphicsContextCG::drawFocusRing(WebCore::GraphicsContextCG *this, const WebCore::Path *a2, float a3, const WebCore::Color *a4)
{
  WebCore::GraphicsContextCG *v6;
  int v7;
  PAL *v8;
  uint64_t v9;
  PAL *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  const WebCore::Color *v14;
  const void *FocusRingWithColor;
  CFTypeRef v16;
  CGContext *v17;
  const CGPath *v18;
  CFTypeRef cf[2];
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;

  v6 = this;
  v7 = *((_DWORD *)a2 + 16);
  if (v7 == 2)
  {
    this = (WebCore::GraphicsContextCG *)*((_QWORD *)a2 + 1);
    if (this)
    {
      this = (WebCore::GraphicsContextCG *)(*(uint64_t (**)(WebCore::GraphicsContextCG *, float))(*(_QWORD *)this + 200))(this, a3);
      if ((this & 1) != 0)
        return;
    }
  }
  else if (!v7)
  {
    return;
  }
  cf[1] = 0;
  v20 = 0;
  v8 = (PAL *)objc_msgSend((id)PAL::getUIFocusRingStyleClass[0](this), "maxAlpha");
  v21 = v9;
  v10 = (PAL *)objc_msgSend((id)PAL::getUIFocusRingStyleClass[0](v8), "borderThickness");
  v22 = v11;
  objc_msgSend((id)PAL::getUIFocusRingStyleClass[0](v10), "alphaThreshold");
  v23 = v12;
  v13 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  v24 = *MEMORY[0x1E0C9D648];
  v25 = v13;
  v26 = -1;
  WebCore::cachedCGColor(a4, v14, cf);
  FocusRingWithColor = (const void *)CGStyleCreateFocusRingWithColor();
  v16 = cf[0];
  cf[0] = 0;
  if (v16)
    CFRelease(v16);
  *((_BYTE *)v6 + 744) |= 8u;
  v17 = (CGContext *)*((_QWORD *)v6 + 90);
  CGContextSaveGState(v17);
  CGContextSetStyle();
  CGContextBeginPath(v17);
  v18 = (const CGPath *)WebCore::Path::platformPath(a2);
  CGContextAddPath(v17, v18);
  CGContextFillPath(v17);
  CGContextRestoreGState(v17);
  if (FocusRingWithColor)
    CFRelease(FocusRingWithColor);
}

void sub_195276560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebCore::GraphicsContextCG::drawFocusRing(WebCore::GraphicsContextCG *a1, uint64_t a2, const WebCore::Color *a3, float a4)
{
  uint64_t v4;
  float v5;
  float *v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  char v36;
  _BYTE v37[8];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[12];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)&v41[8] = 0;
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    v5 = a4;
    v6 = *(float **)a2;
    v7 = *(_QWORD *)a2 + 16 * v4;
    while (1)
    {
      v8 = *v6 + v5;
      v9 = (float)(v6[2] - v5) - v5;
      v10 = v6[1] + v5;
      v11 = (float)(v6[3] - v5) - v5;
      v12 = *(unsigned int *)&v41[8];
      if (*(_DWORD *)&v41[8] != 2)
        break;
      v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v38 + 200))(v38);
      v12 = *(unsigned int *)&v41[8];
      if (!v13)
      {
LABEL_8:
        if (v12 == 1)
        {
          v15 = WTF::fastMalloc((WTF *)0x20);
          *(_DWORD *)(v15 + 8) = 1;
          *(_QWORD *)v15 = off_1E340EC98;
          v42 = v38;
          v43 = v39;
          v44 = v40;
          v45 = *(_QWORD *)v41;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)(v15 + 24) = 0;
          v21 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v15 + 24) = 1;
          *(_QWORD *)(v15 + 16) = v21;
          v22 = v21 + 56 * *(unsigned int *)(v15 + 28);
          *(_OWORD *)v22 = v42;
          *(_OWORD *)(v22 + 16) = v43;
          *(_OWORD *)(v22 + 32) = v44;
          *(_QWORD *)(v22 + 48) = v45;
          ++*(_DWORD *)(v15 + 28);
          v16 = *(unsigned int *)&v41[8];
          if (*(_DWORD *)&v41[8] != -1)
          {
            if (*(_DWORD *)&v41[8] == 2)
            {
              v17 = (unsigned int *)v38;
              *(_QWORD *)&v38 = v15;
              if (v17)
              {
                v23 = v17 + 2;
                do
                {
                  v24 = __ldaxr(v23);
                  v20 = --v24 == 0;
                }
                while (__stlxr(v24, v23));
                goto LABEL_23;
              }
LABEL_28:
              (*(void (**)(uint64_t, float, float, float, float))(*(_QWORD *)v15 + 104))(v15, v8, v10, v9, v11);
              goto LABEL_29;
            }
LABEL_26:
            ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v16])(&v42, &v38);
          }
        }
        else
        {
          if (v12 == 2)
          {
            v14 = atomic_load((unsigned int *)(v38 + 8));
            v15 = v38;
            if (v14 != 1)
            {
              (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v38 + 24))(&v42, v38);
              v25 = v42;
              *(_QWORD *)&v42 = 0;
              v26 = (unsigned int *)v38;
              *(_QWORD *)&v38 = v25;
              if (v26)
              {
                v27 = v26 + 2;
                do
                {
                  v28 = __ldaxr(v27);
                  v29 = v28 - 1;
                }
                while (__stlxr(v29, v27));
                if (!v29)
                {
                  atomic_store(1u, v26 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
                }
                v30 = (unsigned int *)v42;
                *(_QWORD *)&v42 = 0;
                if (v30)
                {
                  v31 = v30 + 2;
                  do
                  {
                    v32 = __ldaxr(v31);
                    v33 = v32 - 1;
                  }
                  while (__stlxr(v33, v31));
                  if (!v33)
                  {
                    atomic_store(1u, v30 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
                  }
                }
              }
              v15 = v38;
            }
            if (v15)
              goto LABEL_28;
          }
          v15 = WTF::fastMalloc((WTF *)0x20);
          *(_DWORD *)(v15 + 8) = 1;
          *(_QWORD *)v15 = off_1E340EC98;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)(v15 + 24) = 0;
          v16 = *(unsigned int *)&v41[8];
          if (*(_DWORD *)&v41[8] != -1)
          {
            if (*(_DWORD *)&v41[8] == 2)
            {
              v17 = (unsigned int *)v38;
              *(_QWORD *)&v38 = v15;
              if (v17)
              {
                v18 = v17 + 2;
                do
                {
                  v19 = __ldaxr(v18);
                  v20 = --v19 == 0;
                }
                while (__stlxr(v19, v18));
LABEL_23:
                if (v20)
                {
                  atomic_store(1u, v17 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
                }
              }
              goto LABEL_28;
            }
            goto LABEL_26;
          }
        }
        *(_QWORD *)&v38 = v15;
        *(_DWORD *)&v41[8] = 2;
        goto LABEL_28;
      }
      if (*(unsigned int *)&v41[8] != 0xFFFFFFFFLL)
      {
        if (*(unsigned int *)&v41[8] == 1)
        {
          *(_QWORD *)&v38 = __PAIR64__(LODWORD(v10), LODWORD(v8));
          *((_QWORD *)&v38 + 1) = __PAIR64__(LODWORD(v11), LODWORD(v9));
          *(_DWORD *)&v41[4] = 9;
          goto LABEL_29;
        }
LABEL_5:
        ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v12])(&v36, &v38);
      }
      *(_QWORD *)&v38 = __PAIR64__(LODWORD(v10), LODWORD(v8));
      *((_QWORD *)&v38 + 1) = __PAIR64__(LODWORD(v11), LODWORD(v9));
      a4 = *(float *)&v42;
      v39 = v42;
      v40 = v43;
      *(_DWORD *)v41 = v44;
      *(_QWORD *)&v41[4] = 0x100000009;
LABEL_29:
      v6 += 4;
      if (v6 == (float *)v7)
        goto LABEL_42;
    }
    if (*(_DWORD *)&v41[8])
      goto LABEL_8;
    goto LABEL_5;
  }
LABEL_42:
  WebCore::GraphicsContextCG::drawFocusRing(a1, (const WebCore::Path *)v37, a4, a3);
  if (*(_DWORD *)&v41[8] != -1)
    ((void (*)(__int128 *, __int128 *))off_1E334F1D8[*(unsigned int *)&v41[8]])(&v42, &v38);
}

void sub_195276968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,char a22)
{
  if (a20 != -1)
    ((void (*)(char *, uint64_t *))off_1E334F1D8[a20])(&a22, &a13);
  _Unwind_Resume(exception_object);
}

void WebCore::GraphicsContextCG::drawDotsForDocumentMarker(uint64_t a1, float *a2, unsigned __int8 *a3)
{
  int v4;
  CGContext *v5;
  uint64_t v6;
  const WebCore::Color *v7;
  CGColorRef v8;
  float v9;
  float v10;
  CGFloat v11;
  float v12;
  float v13;
  float v14;
  CGFloat v15;
  CGFloat v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  float v22;
  float v23;
  const WebCore::Color *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  unsigned int v30;
  CGColorRef v31;
  unsigned int v32;
  double v33;
  float v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  CGColorRef color;
  CGRect v44;

  v4 = *a3;
  *(_BYTE *)(a1 + 744) |= 8u;
  v5 = *(CGContext **)(a1 + 720);
  if (v4 != 3)
  {
    v21 = *((_QWORD *)a3 + 1);
    v40 = v21;
    if ((v21 & 0x8000000000000) != 0)
    {
      v37 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
    }
    v23 = a2[2];
    v22 = a2[3];
    CGContextSaveGState(v5);
    WebCore::cachedCGColor((WebCore *)&v40, v24, &color);
    CGContextSetFillColorWithColor(v5, color);
    v25 = v22;
    v26 = v22 * 9.457 / 13.247;
    v27 = v23;
    v28 = v26 + v23;
    v29 = v26 + v22;
    v30 = (v28 / v29);
    v31 = color;
    color = 0;
    if (v31)
    {
      CFRelease(v31);
      if (v30)
      {
LABEL_12:
        v32 = 0;
        v33 = (v27 - ((float)(v22 * (float)v30) + v26 * (double)(v30 - 1))) * 0.5;
        do
        {
          v34 = v33 + (double)v32 * v29;
          v44.origin.x = (float)(*a2 + v34);
          v44.origin.y = (float)(a2[1] + 0.0);
          v44.size.width = v25;
          v44.size.height = v25;
          CGContextAddEllipseInRect(v5, v44);
          ++v32;
        }
        while (v30 != v32);
      }
    }
    else if (v30)
    {
      goto LABEL_12;
    }
    CGContextSetCompositeOperation();
    CGContextFillPath(v5);
    CGContextRestoreGState(v5);
    if ((v40 & 0x8000000000000) == 0)
      return;
    v18 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
    do
    {
      v39 = __ldaxr(v18);
      v20 = --v39 == 0;
    }
    while (__stlxr(v39, v18));
    goto LABEL_26;
  }
  v41 = *a3;
  v6 = *((_QWORD *)a3 + 1);
  v42 = v6;
  if ((v6 & 0x8000000000000) != 0)
  {
    v35 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 + 1, v35));
  }
  CGContextSaveGState(v5);
  WebCore::cachedCGColor((WebCore *)&v42, v7, &color);
  CGContextSetFillColorWithColor(v5, color);
  v8 = color;
  color = 0;
  if (v8)
    CFRelease(v8);
  CGContextSetCompositeOperation();
  v10 = a2[2];
  v9 = a2[3];
  v11 = v9 * 0.5;
  v13 = *a2;
  v12 = a2[1];
  v14 = v9 + v12;
  v15 = v11 + *a2;
  CGContextMoveToPoint(v5, v15, (float)(v9 + v12));
  v16 = (float)(v12 + v14) * 0.5;
  CGContextAddArc(v5, v15, v16, v11, 1.57079633, 4.71238898, 0);
  CGContextAddLineToPoint(v5, (float)(v13 + v10) - v11, v12);
  CGContextAddArc(v5, (float)(v13 + v10) - v11, v16, v11, 4.71238898, 1.57079633, 0);
  CGContextClosePath(v5);
  CGContextFillPath(v5);
  CGContextRestoreGState(v5);
  if ((v42 & 0x8000000000000) != 0)
  {
    v18 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(v18);
      v20 = --v19 == 0;
    }
    while (__stlxr(v19, v18));
LABEL_26:
    if (v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v17);
    }
  }
}

void sub_195276CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  CGContext *v14;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  CGContextRestoreGState(v14);
  if ((a13 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::GraphicsContextCG::convertToDestinationColorSpaceIfNeeded(uint64_t a1, CGImageRef *a2)
{
  CGColorSpace *ColorSpace;
  uint64_t result;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  size_t Width;
  size_t Height;
  CGImageRef Image;
  CGImageRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef cf;
  char v19;
  WebCore::IOSurface *v20;
  CGRect v21;

  ColorSpace = CGImageGetColorSpace(*a2);
  result = CGColorSpaceUsesITUR_2100TF(ColorSpace);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 744) |= 8u;
    result = CGIOSurfaceContextGetSurface();
    if (result)
    {
      v6 = result;
      result = CGIOSurfaceContextGetColorSpace();
      if (result)
      {
        v16 = (CFTypeRef)result;
        CFRetain((CFTypeRef)result);
        WebCore::DestinationColorSpace::DestinationColorSpace(&v17, (uint64_t *)&v16);
        v7 = v17;
        v17 = 0;
        cf = v7;
        v19 = 1;
        WebCore::IOSurface::createFromSurface(v6, (uint64_t *)&cf, (uint64_t *)&v20);
        if (v19)
        {
          v8 = cf;
          cf = 0;
          if (v8)
            CFRelease(v8);
        }
        v9 = v17;
        v17 = 0;
        if (v9)
          CFRelease(v9);
        v10 = v16;
        v16 = 0;
        if (v10)
          CFRelease(v10);
        Width = CGImageGetWidth(*a2);
        Height = CGImageGetHeight(*a2);
        WebCore::IOSurface::createCompatibleBitmap(v20, Width, Height, (CGContextRef *)&cf);
        v21.size.width = (double)Width;
        v21.size.height = (double)Height;
        v21.origin.x = 0.0;
        v21.origin.y = 0.0;
        CGContextDrawImage((CGContextRef)cf, v21, *a2);
        Image = CGBitmapContextCreateImage((CGContextRef)cf);
        v14 = *a2;
        *a2 = Image;
        if (v14)
          CFRelease(v14);
        v15 = cf;
        cf = 0;
        if (v15)
          CFRelease(v15);
        return (uint64_t)std::unique_ptr<WebCore::IOSurface>::~unique_ptr[abi:sn180100]((uint64_t *)&v20);
      }
    }
  }
  return result;
}

void sub_195276EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, uint64_t a14)
{
  if (cf)
    CFRelease(cf);
  std::unique_ptr<WebCore::IOSurface>::~unique_ptr[abi:sn180100](&a14);
  _Unwind_Resume(a1);
}

void sub_195276EF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef a11, CFTypeRef cf, char a13)
{
  if (a13 && cf)
    CFRelease(cf);
  if (a11)
    CFRelease(a11);
  if (a10)
    CFRelease(a10);
  JUMPOUT(0x195276EECLL);
}

uint64_t *std::unique_ptr<WebCore::IOSurface>::~unique_ptr[abi:sn180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  const void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v3)
      CFRelease(v3);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v2 + 40));
    if (*(_BYTE *)(v2 + 16))
    {
      v5 = *(const void **)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v5)
        CFRelease(v5);
    }
    WTF::fastFree((WTF *)v2, v4);
  }
  return a1;
}

WTF::StringImpl *WebCore::defaultSupportedImageTypes(void)::$_0::operator() const(void)::{lambda(void const*,void *)#1}::__invoke(uint64_t a1, uint64_t *a2)
{
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  uint64_t v6;
  WTF::StringImpl *v7;

  MEMORY[0x19AEA5508](&v7, a1);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v7, v3, (uint64_t)&v6);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_195277004(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  v4 = *(unsigned int *)(*a1 + 4);
  if ((_DWORD)v4 != *(_DWORD *)(v3 + 4))
    return 0;
  v6 = *(_DWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v2 + 8);
  v8 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if ((v6 & 4) != 0)
      return WTF::equalIgnoringASCIICaseWithLength<unsigned char,unsigned char>(v7, v4, v8, v4, v4);
    else
      return WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>(v7, v4, v8, v4, v4);
  }
  else if ((v6 & 4) != 0)
  {
    return WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>(v7, v4, v8, v4, v4);
  }
  else
  {
    return WTF::equalIgnoringASCIICaseWithLength<char16_t,char16_t>(v7, v4, v8, v4, v4);
  }
}

BOOL WTF::equalIgnoringASCIICaseWithLength<unsigned char,unsigned char>(_BOOL8 result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (a5)
  {
    if (a2 > a4)
    {
      v5 = 0;
      v7 = 0;
      while (a2 != v7 && a4 != v7)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + v7)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(a3 + v7)))
        {
          v5 = ++v7 >= a5;
          if (a5 != v7)
            continue;
        }
        return v5;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
      while (a2 != v6)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + v6)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(a3 + v6)))
        {
          v5 = ++v6 >= a5;
          if (a5 != v6)
            continue;
        }
        return v5;
      }
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits> const>(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  return WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits> const&,void>::map((uint64_t)a1);
}

void sub_195277168(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits> const>(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  return WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits> const&,void>::map((uint64_t)a1, (uint64_t)&WebCore::additionalSupportedImageTypes(void)::additionalSupportedImageTypes);
}

void sub_1952771AC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::GPURenderBundleEncoder::setBindGroup@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (__CFADD__(a5, a6))
    goto LABEL_10;
  v8 = *(_QWORD *)(a4 + 32);
  if (!v8)
    goto LABEL_9;
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    goto LABEL_34;
  v10 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v10 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v9 & 0x3FFFFFFFFLL) + v10))
    goto LABEL_34;
  v11 = *(_BYTE *)(a4 + 6);
  if ((v11 & 3) == 0)
  {
    v8 = *(_QWORD *)(a4 + 16);
    goto LABEL_9;
  }
  if (*(_BYTE *)(v8 + 64) && (v32 = *(_QWORD *)(v8 + 32)) != 0)
  {
    v21 = atomic_load((unint64_t *)(v32 + 32));
    v11 = *(_BYTE *)(a4 + 6);
  }
  else
  {
    v21 = *(_QWORD *)(v8 + 48);
  }
  v22 = *(_QWORD *)(a4 + 8);
  if ((v11 & 4) == 0)
  {
    v23 = *(_QWORD *)(a4 + 16) + v22 <= v21 && v21 >= v22;
    if (v23)
      v8 = 0;
    else
      v8 = *(_QWORD *)(a4 + 16);
    goto LABEL_9;
  }
  v23 = v21 >= v22;
  v24 = v21 - v22;
  if (v23)
  {
LABEL_34:
    v8 = 0;
    goto LABEL_9;
  }
  if ((*(_BYTE *)(a4 + 4) - 4) > 7u)
    LOBYTE(v25) = 0;
  else
    v25 = qword_1968DD238[(char)(*(_BYTE *)(a4 + 4) - 4)];
  v8 = (-1 << v25) & v24;
LABEL_9:
  if (a5 + (unint64_t)a6 > v8 >> 2)
  {
LABEL_10:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a7 = 32;
    *(_BYTE *)(a7 + 16) = 1;
    return result;
  }
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a3 + 8);
  v15 = *(_QWORD *)(a4 + 32);
  if (!v15)
  {
    v19 = 0;
    goto LABEL_45;
  }
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v17 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (!v17 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
    {
      v19 = *(_QWORD *)(a4 + 24);
LABEL_43:
      v26 = *(_BYTE *)(a4 + 6);
      if ((v26 & 3) == 0)
      {
        v15 = *(_QWORD *)(a4 + 16);
        goto LABEL_45;
      }
      if (*(_BYTE *)(v15 + 64) && (v33 = *(_QWORD *)(v15 + 32)) != 0)
      {
        v27 = atomic_load((unint64_t *)(v33 + 32));
        v26 = *(_BYTE *)(a4 + 6);
      }
      else
      {
        v27 = *(_QWORD *)(v15 + 48);
      }
      v28 = *(_QWORD *)(a4 + 8);
      if ((v26 & 4) == 0)
      {
        if (*(_QWORD *)(a4 + 16) + v28 <= v27 && v27 >= v28)
          v15 = 0;
        else
          v15 = *(_QWORD *)(a4 + 16);
        goto LABEL_45;
      }
      v23 = v27 >= v28;
      v30 = v27 - v28;
      if (!v23)
      {
        if ((*(_BYTE *)(a4 + 4) - 4) > 7u)
          LOBYTE(v31) = 0;
        else
          v31 = qword_1968DD238[(char)(*(_BYTE *)(a4 + 4) - 4)];
        v15 = (-1 << v31) & v30;
        goto LABEL_45;
      }
      goto LABEL_21;
    }
    v18 = v16 & 0x3FFFFFFFFLL;
    if (v18 + v17)
    {
      v19 = *(_QWORD *)(a4 + 24);
      if (v19)
      {
        if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
          goto LABEL_43;
        v19 = (v19 & 0x3FFFFFFFFLL) + v17;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = -v17;
    if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0] || v18 != v20)
      goto LABEL_43;
  }
  else
  {
    v19 = 0;
  }
LABEL_21:
  v15 = 0;
LABEL_45:
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 80))(v13, a2, v14, v19, v15 >> 2, a5, a6);
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  return result;
}

_DWORD *WebCore::GPURenderBundleEncoder::finish@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  BOOL v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  _DWORD *result;
  WTF::StringImpl *v13;
  _DWORD *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(WTF::StringImpl **)a2;
  if (*(_BYTE *)(a2 + 8))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    v5 = 0;
  else
    *(_DWORD *)v5 += 2;
  v13 = v5;
  (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 112))(&v14, v4, &v13);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v14;
  if (v14)
  {
    v14 = 0;
    v10 = WTF::fastMalloc((WTF *)0x10);
    v11 = 0;
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)a3 = v10;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v11 = 1;
  }
  *(_DWORD *)(a3 + 16) = v11;
  result = v14;
  v14 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::DOMSetAdapter::add<WebCore::IDLDOMString>(WTF::StringImpl **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE v13[8];

  JSC::JSLockHolder::JSLockHolder();
  v4 = (uint64_t)*a1;
  v5 = *((_QWORD *)*a1 + 7);
  v6 = *a2;
  if (!*a2 || (v7 = *(_DWORD *)(v6 + 4)) == 0)
  {
    v8 = *(_QWORD *)(v5 + 41968);
    goto LABEL_7;
  }
  if (v7 == 1)
  {
    v10 = *(unsigned __int8 **)(v6 + 8);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_4;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v5 + 8 * v11 + 42216);
    goto LABEL_7;
  }
LABEL_4:
  v8 = *(_QWORD *)(v5 + 64760);
  if (!v8 || v6 != *(_QWORD *)(v8 + 8))
  {
    v8 = JSC::jsStringWithCacheSlowCase();
    v4 = (uint64_t)*a1;
  }
LABEL_7:
  WebCore::addToBackingSet(v4, a1[1], v8);
  return MEMORY[0x19AEA32A0](v13);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPUShaderModule::getCompilationInfo(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::GPUCompilationInfo>> &&)::$_0,void,WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E334F220;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUShaderModule::getCompilationInfo(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::GPUCompilationInfo>> &&)::$_0,void,WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334F220;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUShaderModule::getCompilationInfo(WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::GPUCompilationInfo>> &&)::$_0,void,WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU>,WTF::DefaultRefDerefTraits<WebCore::WebGPU>> &&>::call(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  objc_class *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  _BYTE v21[8];

  v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *a2;
  *a2 = 0;
  *((_QWORD *)v5 + 1) = v6;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v7 + 24);
  if (v8)
  {
    if (!*(_QWORD *)v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
    {
LABEL_4:
      v6 = *((_QWORD *)v5 + 1);
      goto LABEL_5;
    }
    v10 = *(_QWORD *)(v7 + 32);
    if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
      v11 = 0;
    else
      v11 = *(uint64_t **)v10;
    v12 = v11[7];
    MEMORY[0x19AEA3294](v21, v12);
    v13 = (objc_class *)WebCore::wrap<WebCore::GPUCompilationInfo>((uint64_t)v11, **(_QWORD **)(v7 + 32), v5);
    v14 = *(_QWORD *)(v12 + 16);
    if (!v14)
    {
      WebCore::DeferredPromise::callFunction(v7, v11, 0, v13);
      v14 = *(_QWORD *)(v12 + 16);
      if (!v14)
      {
LABEL_13:
        result = MEMORY[0x19AEA32A0](v21);
        if (*(_DWORD *)v5 != 1)
        {
          --*(_DWORD *)v5;
          return result;
        }
        goto LABEL_4;
      }
    }
    v15 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v11);
    if (!(*(unsigned int (**)(_QWORD *))(*v15 + 64))(v15))
    {
LABEL_16:
      WebCore::reportException((JSC::JSGlobalObject *)v11, v14, 0, 0, 0);
      goto LABEL_13;
    }
    v16 = v15[43];
    if (*(_QWORD *)(v12 + 24) == v14)
    {
LABEL_30:
      *(_BYTE *)(*(_QWORD *)(v16 + 8) + 93442) = 1;
      *(_BYTE *)(v7 + 44) = 1;
      goto LABEL_16;
    }
    if (!v16)
      goto LABEL_16;
    v17 = (unsigned __int8 *)(v16 + 40);
    if (__ldaxr((unsigned __int8 *)(v16 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v16 + 40);
LABEL_24:
    v19 = *(unsigned __int8 *)(v16 + 41);
    v20 = __ldxr(v17);
    if (v20 == 1)
    {
      if (!__stlxr(0, v17))
      {
LABEL_29:
        if (!v19)
          goto LABEL_16;
        goto LABEL_30;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v16 + 40));
    goto LABEL_29;
  }
LABEL_5:
  *((_QWORD *)v5 + 1) = 0;
  if (v6)
    WTF::RefCounted<WebCore::WebGPU::CompilationInfo>::deref(v6, v4);
  return WTF::fastFree(v5, v4);
}

uint64_t WebCore::validateHEVCParameters(uint64_t a1, int a2, int a3)
{
  BOOL v3;
  PAL *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const __CFAllocator *v14;
  int v15;
  const __CFArray *v16;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const void *Value;
  CFNumberRef v21;
  const __CFArray *v22;
  CFTypeID v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  const __CFArray *v26;
  CFTypeID v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  CFTypeID v30;
  const __CFArray *v31;
  CFTypeID v32;
  void *v33;
  _BOOL4 inited;
  void *v35;
  void *v36;
  uint64_t *v37;
  void *v38;
  uint64_t *v39;
  void *v40;
  uint64_t *v41;
  void *v42;
  uint64_t *v43;
  void *v44;
  uint64_t *v45;
  WTF::StringImpl *v46;
  __int16 valuePtr;
  void *key;
  CFRange v49;

  if (!a2)
  {
    v11 = 1752589105;
    if (!a3)
      goto LABEL_20;
LABEL_14:
    if (*(_WORD *)(a1 + 4))
      goto LABEL_21;
    if (*(_WORD *)(a1 + 6) != 2 && *(_DWORD *)(a1 + 8) != 1)
      goto LABEL_21;
LABEL_20:
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (WebCore::softLinkVideoToolboxVTSelectAndCreateVideoDecoderInstance(v11, *MEMORY[0x1E0C9AE00], 0, 0))goto LABEL_21;
    {
      if (!WebCore::canLoad_VideoToolbox_VTCopyHEVCDecoderCapabilitiesDictionary(void)::loaded)
        goto LABEL_21;
    }
    else
    {
      v35 = (void *)WebCore::VideoToolboxLibrary(0);
      WebCore::softLinkVideoToolboxVTCopyHEVCDecoderCapabilitiesDictionary = (uint64_t (*)(void))dlsym(v35, "VTCopyHEVCDecoderCapabilitiesDictionary");
      WebCore::canLoad_VideoToolbox_VTCopyHEVCDecoderCapabilitiesDictionary(void)::loaded = WebCore::softLinkVideoToolboxVTCopyHEVCDecoderCapabilitiesDictionary != 0;
      if (!WebCore::softLinkVideoToolboxVTCopyHEVCDecoderCapabilitiesDictionary)
        goto LABEL_21;
    }
    {
      if (!WebCore::canLoad_VideoToolbox_kVTHEVCDecoderCapability_SupportedProfiles(void)::loaded)
        goto LABEL_21;
    }
    else
    {
      v36 = (void *)WebCore::VideoToolboxLibrary(0);
      v37 = (uint64_t *)dlsym(v36, "kVTHEVCDecoderCapability_SupportedProfiles");
      if (!v37)
      {
        v15 = 0;
        LODWORD(v16) = 0;
        WebCore::canLoad_VideoToolbox_kVTHEVCDecoderCapability_SupportedProfiles(void)::loaded = 0;
        return (v15 << 24) | (v3 << 16) | ((_DWORD)v16 << 8) | v15;
      }
      WebCore::constantVideoToolboxkVTHEVCDecoderCapability_SupportedProfiles = *v37;
      WebCore::canLoad_VideoToolbox_kVTHEVCDecoderCapability_SupportedProfiles(void)::loaded = 1;
    }
    {
      if (!WebCore::canLoad_VideoToolbox_kVTHEVCDecoderCapability_PerProfileSupport(void)::loaded)
        goto LABEL_21;
    }
    else
    {
      v38 = (void *)WebCore::VideoToolboxLibrary(0);
      v39 = (uint64_t *)dlsym(v38, "kVTHEVCDecoderCapability_PerProfileSupport");
      if (!v39)
      {
        v15 = 0;
        LODWORD(v16) = 0;
        WebCore::canLoad_VideoToolbox_kVTHEVCDecoderCapability_PerProfileSupport(void)::loaded = 0;
        return (v15 << 24) | (v3 << 16) | ((_DWORD)v16 << 8) | v15;
      }
      WebCore::constantVideoToolboxkVTHEVCDecoderCapability_PerProfileSupport = *v39;
      WebCore::canLoad_VideoToolbox_kVTHEVCDecoderCapability_PerProfileSupport(void)::loaded = 1;
    }
    {
      if (!WebCore::canLoad_VideoToolbox_kVTHEVCDecoderProfileCapability_IsHardwareAccelerated(void)::loaded)
        goto LABEL_21;
    }
    else
    {
      v40 = (void *)WebCore::VideoToolboxLibrary(0);
      v41 = (uint64_t *)dlsym(v40, "kVTHEVCDecoderProfileCapability_IsHardwareAccelerated");
      if (!v41)
      {
        v15 = 0;
        LODWORD(v16) = 0;
        WebCore::canLoad_VideoToolbox_kVTHEVCDecoderProfileCapability_IsHardwareAccelerated(void)::loaded = 0;
        return (v15 << 24) | (v3 << 16) | ((_DWORD)v16 << 8) | v15;
      }
      WebCore::constantVideoToolboxkVTHEVCDecoderProfileCapability_IsHardwareAccelerated = *v41;
      WebCore::canLoad_VideoToolbox_kVTHEVCDecoderProfileCapability_IsHardwareAccelerated(void)::loaded = 1;
    }
    {
      if (!WebCore::canLoad_VideoToolbox_kVTHEVCDecoderProfileCapability_MaxDecodeLevel(void)::loaded)
        goto LABEL_21;
    }
    else
    {
      v42 = (void *)WebCore::VideoToolboxLibrary(0);
      v43 = (uint64_t *)dlsym(v42, "kVTHEVCDecoderProfileCapability_MaxDecodeLevel");
      if (!v43)
      {
        v15 = 0;
        LODWORD(v16) = 0;
        WebCore::canLoad_VideoToolbox_kVTHEVCDecoderProfileCapability_MaxDecodeLevel(void)::loaded = 0;
        return (v15 << 24) | (v3 << 16) | ((_DWORD)v16 << 8) | v15;
      }
      WebCore::constantVideoToolboxkVTHEVCDecoderProfileCapability_MaxDecodeLevel = *v43;
      WebCore::canLoad_VideoToolbox_kVTHEVCDecoderProfileCapability_MaxDecodeLevel(void)::loaded = 1;
    }
    {
      if (!WebCore::canLoad_VideoToolbox_kVTHEVCDecoderProfileCapability_MaxPlaybackLevel(void)::loaded)
        goto LABEL_21;
    }
    else
    {
      v44 = (void *)WebCore::VideoToolboxLibrary(0);
      v45 = (uint64_t *)dlsym(v44, "kVTHEVCDecoderProfileCapability_MaxPlaybackLevel");
      if (!v45)
      {
        v15 = 0;
        LODWORD(v16) = 0;
        WebCore::canLoad_VideoToolbox_kVTHEVCDecoderProfileCapability_MaxPlaybackLevel(void)::loaded = 0;
        return (v15 << 24) | (v3 << 16) | ((_DWORD)v16 << 8) | v15;
      }
      WebCore::constantVideoToolboxkVTHEVCDecoderProfileCapability_MaxPlaybackLevel = *v45;
      WebCore::canLoad_VideoToolbox_kVTHEVCDecoderProfileCapability_MaxPlaybackLevel(void)::loaded = 1;
    }
    v18 = (const __CFDictionary *)WebCore::softLinkVideoToolboxVTCopyHEVCDecoderCapabilitiesDictionary();
    if (!v18)
      goto LABEL_21;
    v19 = v18;
    Value = CFDictionaryGetValue(v18, (const void *)WebCore::constantVideoToolboxkVTHEVCDecoderCapability_SupportedProfiles);
    v16 = (const __CFArray *)WTF::dynamic_cf_cast<__CFArray const*>(Value);
    if (!v16)
    {
      v15 = 0;
LABEL_60:
      CFRelease(v19);
      return (v15 << 24) | (v3 << 16) | ((_DWORD)v16 << 8) | v15;
    }
    valuePtr = *(_WORD *)(a1 + 6);
    v21 = CFNumberCreate(v14, kCFNumberSInt16Type, &valuePtr);
    v49.length = CFArrayGetCount(v16);
    v49.location = 0;
    if (CFArrayContainsValue(v16, v49, v21))
    {
      v22 = (const __CFArray *)CFDictionaryGetValue(v19, (const void *)WebCore::constantVideoToolboxkVTHEVCDecoderCapability_PerProfileSupport);
      v16 = v22;
      if (!v22)
      {
        v15 = 0;
LABEL_58:
        if (v21)
          CFRelease(v21);
        goto LABEL_60;
      }
      v23 = CFGetTypeID(v22);
      if (v23 == CFDictionaryGetTypeID())
      {
        WTF::String::number((WTF::String *)valuePtr);
        WTF::String::createCFString((WTF::String *)&v46);
        v25 = v46;
        v46 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v24);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = (const __CFArray *)CFDictionaryGetValue(v16, key);
        v16 = v26;
        if (!v26)
        {
          v15 = 0;
          goto LABEL_66;
        }
        v27 = CFGetTypeID(v26);
        if (v27 != CFDictionaryGetTypeID())
        {
          v15 = 0;
          LODWORD(v16) = 0;
          goto LABEL_66;
        }
        v3 = CFDictionaryGetValue(v16, (const void *)WebCore::constantVideoToolboxkVTHEVCDecoderProfileCapability_IsHardwareAccelerated) == (const void *)*MEMORY[0x1E0C9AE50];
        v28 = (const __CFNumber *)CFDictionaryGetValue(v16, (const void *)WebCore::constantVideoToolboxkVTHEVCDecoderProfileCapability_MaxDecodeLevel);
        v29 = v28;
        if (!v28
          || (v30 = CFGetTypeID(v28), v30 != CFNumberGetTypeID())
          || (LOWORD(v46) = 0, CFNumberGetValue(v29, kCFNumberSInt16Type, &v46))
          && *(unsigned __int16 *)(a1 + 40) <= (__int16)v46)
        {
          v31 = (const __CFArray *)CFDictionaryGetValue(v16, (const void *)WebCore::constantVideoToolboxkVTHEVCDecoderProfileCapability_MaxPlaybackLevel);
          v16 = v31;
          if (!v31)
          {
LABEL_65:
            v15 = 1;
LABEL_66:
            v33 = key;
            key = 0;
            if (v33)
              CFRelease(v33);
            goto LABEL_58;
          }
          v32 = CFGetTypeID(v31);
          if (v32 != CFNumberGetTypeID())
          {
            LODWORD(v16) = 0;
            goto LABEL_65;
          }
          LOWORD(v46) = 0;
          if (CFNumberGetValue(v16, kCFNumberSInt16Type, &v46))
          {
            LODWORD(v16) = *(unsigned __int16 *)(a1 + 40) <= (__int16)v46;
            goto LABEL_65;
          }
        }
        v15 = 0;
        LODWORD(v16) = 0;
        goto LABEL_66;
      }
    }
    v15 = 0;
    LODWORD(v16) = 0;
    goto LABEL_58;
  }
  v6 = (PAL *)PAL::AVFoundationLibrary((PAL *)1);
  if (v6)
  {
    {
      inited = PAL::init_AVFoundation_AVVideoCodecTypeHEVCWithAlpha(v6);
      PAL::canLoad_AVFoundation_AVVideoCodecTypeHEVCWithAlpha(void)::loaded = inited;
      if (!inited)
        goto LABEL_21;
LABEL_5:
      MEMORY[0x19AEA5508](&key, PAL::constantAVFoundationAVVideoCodecTypeHEVCWithAlpha);
      v7 = key;
      if (key)
      {
        v8 = (unsigned __int8 *)*((_QWORD *)key + 1);
        v7 = *((_DWORD *)key + 1);
        v9 = ((unint64_t)*((unsigned int *)key + 4) >> 2) & 1;
      }
      else
      {
        v8 = 0;
        v9 = 1;
      }
      v11 = WebCore::FourCC::fromString(v8, v7 | (v9 << 32));
      v12 = (WTF::StringImpl *)key;
      key = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v10);
        else
          *(_DWORD *)v12 -= 2;
      }
      if ((v11 & 0xFF00000000) == 0)
        goto LABEL_21;
      if (!a3)
        goto LABEL_20;
      goto LABEL_14;
    }
    if (PAL::canLoad_AVFoundation_AVVideoCodecTypeHEVCWithAlpha(void)::loaded)
      goto LABEL_5;
  }
LABEL_21:
  v15 = 0;
  LODWORD(v16) = 0;
  return (v15 << 24) | (v3 << 16) | ((_DWORD)v16 << 8) | v15;
}

void sub_195277EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf)
{
  const void *v12;
  const void *v13;

  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  CFRelease(v12);
  _Unwind_Resume(a1);
}

uint64_t WebCore::validateDoViParameters(uint64_t a1, char a2, int a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  void *v21;
  void *v22;
  uint64_t *v23;
  void *v24;
  uint64_t *v25;
  void *v26;
  uint64_t *v27;
  WTF *v28;
  unsigned int v29;
  char v30;
  WTF *v31;
  unsigned int v32;
  char v33;

  if ((a2 & 1) != 0)
    goto LABEL_11;
  if (a3)
  {
    v4 = *(unsigned __int16 *)(a1 + 4);
    v5 = v4 > 8;
    v6 = (1 << v4) & 0x1B0;
    if (v5 || v6 == 0)
      goto LABEL_11;
  }
  v8 = (*(_DWORD *)a1 & 0xFFFFFFFE) == 2 ? 1752589105 : 1635148593;
  if (WebCore::softLinkVideoToolboxVTSelectAndCreateVideoDecoderInstance(v8, *MEMORY[0x1E0C9AE00], 0, 0))goto LABEL_11;
  {
    if (!WebCore::canLoad_VideoToolbox_VTCopyHEVCDecoderCapabilitiesDictionary(void)::loaded)
      goto LABEL_11;
  }
  else
  {
    v21 = (void *)WebCore::VideoToolboxLibrary(0);
    WebCore::softLinkVideoToolboxVTCopyHEVCDecoderCapabilitiesDictionary = (uint64_t (*)(void))dlsym(v21, "VTCopyHEVCDecoderCapabilitiesDictionary");
    WebCore::canLoad_VideoToolbox_VTCopyHEVCDecoderCapabilitiesDictionary(void)::loaded = WebCore::softLinkVideoToolboxVTCopyHEVCDecoderCapabilitiesDictionary != 0;
    if (!WebCore::softLinkVideoToolboxVTCopyHEVCDecoderCapabilitiesDictionary)
      goto LABEL_11;
  }
  {
    if (!WebCore::canLoad_VideoToolbox_kVTDolbyVisionDecoderCapability_SupportedProfiles(void)::loaded)
      goto LABEL_11;
  }
  else
  {
    v22 = (void *)WebCore::VideoToolboxLibrary(0);
    v23 = (uint64_t *)dlsym(v22, "kVTDolbyVisionDecoderCapability_SupportedProfiles");
    if (!v23)
    {
      v9 = 0;
      v10 = 0;
      WebCore::canLoad_VideoToolbox_kVTDolbyVisionDecoderCapability_SupportedProfiles(void)::loaded = 0;
      return v9 | (v9 << 24) | (v10 << 16) | 0x100u;
    }
    WebCore::constantVideoToolboxkVTDolbyVisionDecoderCapability_SupportedProfiles = *v23;
    WebCore::canLoad_VideoToolbox_kVTDolbyVisionDecoderCapability_SupportedProfiles(void)::loaded = 1;
  }
  {
    if (!WebCore::canLoad_VideoToolbox_kVTDolbyVisionDecoderCapability_SupportedLevels(void)::loaded)
      goto LABEL_11;
  }
  else
  {
    v24 = (void *)WebCore::VideoToolboxLibrary(0);
    v25 = (uint64_t *)dlsym(v24, "kVTDolbyVisionDecoderCapability_SupportedLevels");
    if (!v25)
    {
      v9 = 0;
      v10 = 0;
      WebCore::canLoad_VideoToolbox_kVTDolbyVisionDecoderCapability_SupportedLevels(void)::loaded = 0;
      return v9 | (v9 << 24) | (v10 << 16) | 0x100u;
    }
    WebCore::constantVideoToolboxkVTDolbyVisionDecoderCapability_SupportedLevels = *v25;
    WebCore::canLoad_VideoToolbox_kVTDolbyVisionDecoderCapability_SupportedLevels(void)::loaded = 1;
  }
  {
    if (WebCore::canLoad_VideoToolbox_kVTDolbyVisionDecoderCapability_IsHardwareAccelerated(void)::loaded)
      goto LABEL_21;
LABEL_11:
    v9 = 0;
    v10 = 0;
    return v9 | (v9 << 24) | (v10 << 16) | 0x100u;
  }
  v26 = (void *)WebCore::VideoToolboxLibrary(0);
  v27 = (uint64_t *)dlsym(v26, "kVTDolbyVisionDecoderCapability_IsHardwareAccelerated");
  if (!v27)
  {
    v9 = 0;
    v10 = 0;
    WebCore::canLoad_VideoToolbox_kVTDolbyVisionDecoderCapability_IsHardwareAccelerated(void)::loaded = 0;
    return v9 | (v9 << 24) | (v10 << 16) | 0x100u;
  }
  WebCore::constantVideoToolboxkVTDolbyVisionDecoderCapability_IsHardwareAccelerated = *v27;
  WebCore::canLoad_VideoToolbox_kVTDolbyVisionDecoderCapability_IsHardwareAccelerated(void)::loaded = 1;
LABEL_21:
  v12 = (const __CFDictionary *)WebCore::softLinkVideoToolboxVTCopyHEVCDecoderCapabilitiesDictionary();
  if (!v12)
    goto LABEL_11;
  v13 = v12;
  WebCore::parseStringArrayFromDictionaryToUInt16Vector((WebCore *)&v31, v12, (const void *)WebCore::constantVideoToolboxkVTDolbyVisionDecoderCapability_SupportedProfiles);
  if (v33)
  {
    WebCore::parseStringArrayFromDictionaryToUInt16Vector((WebCore *)&v28, v13, (const void *)WebCore::constantVideoToolboxkVTDolbyVisionDecoderCapability_SupportedLevels);
    if (v30)
    {
      v10 = CFDictionaryGetValue(v13, (const void *)WebCore::constantVideoToolboxkVTDolbyVisionDecoderCapability_IsHardwareAccelerated) == (const void *)*MEMORY[0x1E0C9AE50];
      v15 = v32;
      if (!v32)
        goto LABEL_35;
      v16 = v31;
      while (1)
      {
        v17 = *(unsigned __int16 *)v16;
        v16 = (WTF *)((char *)v16 + 2);
        if (v17 == *(unsigned __int16 *)(a1 + 4))
          break;
        if (!--v15)
          goto LABEL_35;
      }
      v18 = v29;
      if (v29)
      {
        v19 = v28;
        while (1)
        {
          v20 = *(unsigned __int16 *)v19;
          v19 = (WTF *)((char *)v19 + 2);
          if (v20 == *(unsigned __int16 *)(a1 + 6))
            break;
          if (!--v18)
            goto LABEL_35;
        }
        v9 = 1;
      }
      else
      {
LABEL_35:
        v9 = 0;
      }
      if (v28)
        WTF::fastFree(v28, v14);
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    if (v31)
      WTF::fastFree(v31, v14);
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  CFRelease(v13);
  return v9 | (v9 << 24) | (v10 << 16) | 0x100u;
}

void sub_195278308(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  const void *v12;

  if (a9)
    WTF::fastFree(a9, a2);
  if (a12)
    WTF::fastFree(a12, a2);
  CFRelease(v12);
  _Unwind_Resume(a1);
}

unint64_t WebCore::parseStringArrayFromDictionaryToUInt16Vector(WebCore *this, CFDictionaryRef theDict, const void *key)
{
  const void *Value;
  unint64_t result;
  void *v6;
  int v7;
  WTF *v8;
  void *v9;
  unint64_t v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  unsigned __int16 v42;
  int v43;
  int v44;
  int v46;
  uint64_t v47;
  char *v48;
  unsigned __int16 v49;
  char v50;
  unsigned __int16 v51;
  int v52;
  int v53;
  int v55;
  uint64_t v56;
  WebCore *v57;
  WTF *v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  WTF::StringImpl *v65;
  _BYTE v66[128];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  Value = CFDictionaryGetValue(theDict, key);
  result = (unint64_t)WTF::dynamic_cf_cast<__CFArray const*>(Value);
  if (!result)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 16) = 0;
    return result;
  }
  v6 = (void *)result;
  v58 = 0;
  v59 = 0;
  result = objc_msgSend((id)result, "count");
  v7 = result;
  if (result)
  {
    if (result >> 31)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (WTF *)WTF::fastMalloc((WTF *)(2 * result));
    LODWORD(v59) = v7;
    v58 = v8;
  }
  else
  {
    v8 = 0;
  }
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v61, v66, 16);
  v10 = result;
  if (!result)
  {
    if (v7)
    {
      v12 = 0;
      result = (unint64_t)v58;
      goto LABEL_106;
    }
    v11 = 0;
    goto LABEL_113;
  }
  v57 = this;
  v11 = 0;
  v12 = 0;
  v13 = *(_QWORD *)v62;
  do
  {
    v14 = 0;
    do
    {
      if (*(_QWORD *)v62 != v13)
        objc_enumerationMutation(v6);
      v15 = *(_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * v14);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v16 = v15;
      else
        v16 = 0;
      MEMORY[0x19AEA5508](&v65, v16);
      v18 = v65;
      if (v65)
      {
        v19 = *((_QWORD *)v65 + 1);
        v20 = *((unsigned int *)v65 + 1);
        if ((*((_BYTE *)v65 + 16) & 4) == 0)
        {
          if (v19)
            v21 = (_DWORD)v20 == 0;
          else
            v21 = 1;
          if (v21)
            goto LABEL_22;
          v26 = 0;
          v27 = 2 * v20;
          while (1)
          {
            v28 = *(unsigned __int16 *)(v19 + v26);
            if ((v28 - 9) >= 5 && v28 != 32)
              break;
            --v20;
            v26 += 2;
            if (v27 == v26)
              goto LABEL_22;
          }
          if (v28 == 43)
          {
            if (v27 - 2 == v26)
              goto LABEL_22;
            --v20;
            v29 = v19 + v26;
            v31 = *(unsigned __int16 *)(v29 + 2);
            v30 = v29 + 2;
            v28 = v31;
          }
          else
          {
            v30 = v19 + v26;
          }
          if ((v28 - 48) <= 9)
          {
            v49 = 0;
            v50 = 0;
            while (1)
            {
              v51 = v28 - 48;
              v52 = 10 * v49;
              if ((v52 & 0xF0000) == 0)
                v49 *= 10;
              v53 = v49 + v51;
              if ((v52 & 0xF0000) != 0 || (unsigned __int16)v53 != v53)
                v50 = 1;
              if ((unsigned __int16)v53 == v53)
                v49 = v53;
              if (!--v20)
                break;
              v55 = *(unsigned __int16 *)(v30 + 2);
              v30 += 2;
              LOWORD(v28) = v55;
              if ((v55 - 48) >= 0xA)
              {
                if (!v50)
                {
                  v56 = 1;
                  while ((unsigned __int16)v28 - 9 < 5 || (unsigned __int16)v28 == 32)
                  {
                    if (v20 == v56)
                      goto LABEL_99;
                    LOWORD(v28) = *(_WORD *)(v30 + 2 * v56++);
                  }
                }
                goto LABEL_22;
              }
            }
            if (v50)
              goto LABEL_22;
LABEL_99:
            v24 = v49 & 0xFF00;
            v23 = v49;
            v22 = 0x10000;
            goto LABEL_23;
          }
LABEL_22:
          v22 = 0;
          v23 = 0;
          v24 = 0;
LABEL_23:
          v25 = v23 | v22 | v24;
          goto LABEL_64;
        }
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v32 = 0;
      v33 = 0;
      v34 = 0;
      if (v19 && v20)
      {
        v35 = 0;
        while (1)
        {
          v36 = *(unsigned __int8 *)(v19 + v35);
          if ((v36 - 9) >= 5 && v36 != 32)
            break;
          if (v20 == ++v35)
            goto LABEL_62;
        }
        if (v36 == 43)
        {
          if (v20 - 1 == v35)
            goto LABEL_62;
          v37 = ~v35 + v20;
          v38 = v19 + v35;
          v40 = *(unsigned __int8 *)(v38 + 1);
          v39 = v38 + 1;
          v36 = v40;
        }
        else
        {
          v39 = v19 + v35;
          v37 = v20 - v35;
        }
        if ((v36 - 48) > 9)
        {
LABEL_62:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          goto LABEL_63;
        }
        LOWORD(v33) = 0;
        v41 = 0;
        while (1)
        {
          v42 = v36 - 48;
          v43 = 10 * (unsigned __int16)v33;
          if ((v43 & 0xF0000) == 0)
            LOWORD(v33) = 10 * v33;
          v44 = (unsigned __int16)v33 + v42;
          if ((v43 & 0xF0000) != 0 || (unsigned __int16)v44 != v44)
            v41 = 1;
          if ((unsigned __int16)v44 == v44)
            LOWORD(v33) = v44;
          if (!--v37)
            break;
          v46 = *(unsigned __int8 *)++v39;
          v36 = v46;
          if ((v46 - 48) >= 0xA)
          {
            if (!v41)
            {
              v47 = 1;
              while ((v36 - 9) < 5 || v36 == 32)
              {
                if (v37 == v47)
                  goto LABEL_97;
                v36 = *(unsigned __int8 *)(v39 + v47++);
              }
            }
            goto LABEL_62;
          }
        }
        if (v41)
          goto LABEL_62;
LABEL_97:
        v34 = v33 & 0xFF00;
        v33 = v33;
        v32 = 0x10000;
      }
LABEL_63:
      v25 = v33 | v32 | v34;
LABEL_64:
      v65 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
      v60 = v25;
      if ((v25 & 0x10000) != 0)
      {
        if (v11 == (_DWORD)v59)
        {
          v48 = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v58, v11 + 1, (unint64_t)&v60);
          v11 = HIDWORD(v59);
          v8 = v58;
          *((_WORD *)v58 + HIDWORD(v59)) = *(_WORD *)v48;
        }
        else
        {
          *((_WORD *)v8 + v11) = v25;
        }
        HIDWORD(v59) = ++v11;
      }
      v12 |= (v25 & 0x10000) == 0;
      ++v14;
    }
    while (v14 != v10);
    result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v61, v66, 16);
    v10 = result;
  }
  while (result);
  v7 = v59;
  if (v59 <= v11)
  {
    this = v57;
  }
  else
  {
    this = v57;
    result = (unint64_t)v58;
    if (v11)
    {
      result = WTF::fastRealloc(v58, (void *)(2 * v11));
      v58 = (WTF *)result;
      v7 = v11;
      goto LABEL_109;
    }
LABEL_106:
    if (result)
    {
      v58 = 0;
      LODWORD(v59) = 0;
      result = WTF::fastFree((WTF *)result, v9);
      v11 = 0;
      v7 = 0;
    }
    else
    {
      v11 = 0;
    }
  }
LABEL_109:
  if (!v12)
  {
LABEL_113:
    *(_QWORD *)this = v58;
    *((_DWORD *)this + 2) = v7;
    *((_DWORD *)this + 3) = v11;
    *((_BYTE *)this + 16) = 1;
    return result;
  }
  *(_BYTE *)this = 0;
  result = (unint64_t)v58;
  *((_BYTE *)this + 16) = 0;
  if (result)
  {
    LODWORD(v59) = 0;
    return WTF::fastFree((WTF *)result, v9);
  }
  return result;
}

void sub_195278870(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSurface::createFromSurface@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  __IOSurface *v5;
  uint64_t v6;

  if (result)
  {
    v5 = (__IOSurface *)result;
    v6 = WTF::fastMalloc((WTF *)0x40);
    result = WebCore::IOSurface::IOSurface(v6, v5, a2);
  }
  else
  {
    v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_1952788EC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::IOSurface::createFromImage(WebCore::IOSurface *this@<X0>, CGImageRef image@<X1>, WebCore::IOSurface **a3@<X8>)
{
  size_t Width;
  size_t Height;
  CGColorSpaceRef ColorSpace;
  CGColorSpaceRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  WebCore::IOSurface *v13;
  WebCore::IOSurface *v14;
  const void *v15;
  void *v16;
  const void *v17;
  CFTypeRef cf;
  WebCore::IOSurface *v19;
  CGRect v20;

  if (!image)
    goto LABEL_15;
  Width = CGImageGetWidth(image);
  Height = CGImageGetHeight(image);
  ColorSpace = CGImageGetColorSpace(image);
  v10 = ColorSpace;
  if (ColorSpace)
    CFRetain(ColorSpace);
  cf = v10;
  WebCore::IOSurface::create((uint64_t)this, Width | ((unint64_t)Height << 32), &cf, 4, 1u, (uint64_t *)&v19);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  if (v19)
  {
    WebCore::IOSurface::createPlatformContext((IOSurfaceRef *)v19, (PAL **)&cf);
    v12 = cf;
    v20.size.width = (double)Width;
    v20.size.height = (double)Height;
    v20.origin.x = 0.0;
    v20.origin.y = 0.0;
    CGContextDrawImage((CGContextRef)cf, v20, image);
    v13 = v19;
    v19 = 0;
    *a3 = v13;
    if (v12)
    {
      CFRelease(v12);
      v14 = v19;
      v19 = 0;
      if (v14)
      {
        v15 = (const void *)*((_QWORD *)v14 + 6);
        *((_QWORD *)v14 + 6) = 0;
        if (v15)
          CFRelease(v15);
        WTF::MachSendRight::~MachSendRight((WebCore::IOSurface *)((char *)v14 + 40));
        if (*((_BYTE *)v14 + 16))
        {
          v17 = (const void *)*((_QWORD *)v14 + 1);
          *((_QWORD *)v14 + 1) = 0;
          if (v17)
            CFRelease(v17);
        }
        WTF::fastFree(v14, v16);
      }
    }
  }
  else
  {
LABEL_15:
    *a3 = 0;
  }
}

void sub_195278A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10)
{
  const void *v10;
  const void *v12;
  void *v13;
  const void *v14;

  if (v10)
    CFRelease(v10);
  if (a10)
  {
    v12 = *(const void **)(a10 + 48);
    *(_QWORD *)(a10 + 48) = 0;
    if (v12)
      CFRelease(v12);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a10 + 40));
    if (*(_BYTE *)(a10 + 16))
    {
      v14 = *(const void **)(a10 + 8);
      *(_QWORD *)(a10 + 8) = 0;
      if (v14)
        CFRelease(v14);
    }
    WTF::fastFree((WTF *)a10, v13);
  }
  _Unwind_Resume(exception_object);
}

WebCore::IOSurface **WebCore::IOSurface::moveToPool(WebCore::IOSurface **result, uint64_t a2)
{
  if (a2)
    return (WebCore::IOSurface **)WebCore::IOSurfacePool::addSurface(a2, result);
  return result;
}

uint64_t WebCore::IOSurface::createImage@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = CGIOSurfaceContextCreateImage();
  *a1 = result;
  return result;
}

uint64_t WebCore::IOSurface::sinkIntoImage@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CGIOSurfaceContextCreateImageReference();
  *a1 = result;
  return result;
}

uint64_t WebCore::IOSurface::bitmapConfiguration(WebCore::IOSurface *this)
{
  uint64_t v1;

  if (*((_BYTE *)this + 4) && (v1 = *(int *)this, v1 <= 6))
    return qword_1968DD290[v1];
  else
    return 8194;
}

CGContextRef WebCore::IOSurface::createCompatibleBitmap@<X0>(WebCore::IOSurface *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, CGContextRef *a4@<X8>)
{
  uint64_t v8;
  uint32_t v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  CGContextRef result;
  NSObject *v15;
  uint8_t v16[16];

  if (*((_BYTE *)this + 4) && (v8 = *(int *)this, v8 <= 6))
  {
    v9 = dword_1968DD2C8[v8];
    v10 = qword_1968DD2E8[v8];
  }
  else
  {
    v9 = 8194;
    v10 = 8;
  }
  v11 = atomic_load(&WebCore::surfaceBytesPerRowAlignment(void)::alignment);
  if (!v11)
  {
    v11 = MEMORY[0x19AEA2BBC](*MEMORY[0x1E0CBBF08]);
    if (v11 <= 1)
      goto LABEL_14;
    goto LABEL_12;
  }
  while (1)
  {
    WebCore::IOSurface::ensureColorSpace((IOSurfaceRef *)this);
    if (*((_BYTE *)this + 16))
      break;
    __break(1u);
LABEL_14:
    v15 = qword_1ECE7C3D8;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C3D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v16 = 0;
      _os_log_error_impl(&dword_1940B8000, v15, OS_LOG_TYPE_ERROR, "Sandbox does not allow IOSurface IOKit access.", v16, 2u);
    }
    v11 = 64;
LABEL_12:
    atomic_store(v11, &WebCore::surfaceBytesPerRowAlignment(void)::alignment);
  }
  v12 = (v10 >> 1) * a2;
  if (v12 % v11)
    v13 = v11 - v12 % v11;
  else
    v13 = 0;
  result = CGBitmapContextCreate(0, a2, a3, v10, v13 + v12, *((CGColorSpaceRef *)this + 1), v9);
  *a4 = result;
  return result;
}

void WebCore::IOSurface::createBitmapPlatformContext(IOSurfaceRef *this@<X0>, uint64_t a2@<X8>)
{
  uint32_t v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  void *BaseAddress;
  size_t BytesPerRow;
  CGColorSpaceRef v10;
  CGContextRef v11;
  IOSurfaceRef v12;
  CGColorSpaceRef space[2];
  IOSurfaceRef buffer;
  char v15;

  WebCore::IOSurface::lock<(WebCore::IOSurface::AccessMode)0>(&buffer, (uint64_t)this);
  if (!v15)
    goto LABEL_8;
  v4 = WebCore::IOSurface::bitmapConfiguration((WebCore::IOSurface *)this);
  v6 = v5;
  v7 = (uint64_t)this[3];
  BaseAddress = IOSurfaceGetBaseAddress(buffer);
  BytesPerRow = IOSurfaceGetBytesPerRow(this[6]);
  WebCore::IOSurface::colorSpace(this, space);
  v10 = space[0];
  v11 = CGBitmapContextCreate(BaseAddress, (int)v7, v7 >> 32, v6, BytesPerRow, space[0], v4);
  if (v10)
    CFRelease(v10);
  if (!v11)
  {
LABEL_8:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    goto LABEL_7;
  }
  if (v15)
  {
    v12 = buffer;
    space[1] = 0;
    buffer = 0;
    space[0] = 0;
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v11;
    *(_BYTE *)(a2 + 16) = 1;
    WebCore::IOSurface::LockAndContext::~LockAndContext((WebCore::IOSurface::LockAndContext *)space);
LABEL_7:
    std::optional<WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>>::~optional((uint64_t)&buffer);
    return;
  }
  __break(1u);
}

void sub_195278DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  const void *v11;

  if (v11)
    CFRelease(v11);
  std::optional<WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>>::~optional((uint64_t)&a11);
  _Unwind_Resume(a1);
}

CFTypeRef WebCore::IOSurface::lock<(WebCore::IOSurface::AccessMode)0>(_BYTE *a1, uint64_t a2)
{
  CFTypeRef result;
  const void *v5;
  char v6;

  result = (CFTypeRef)IOSurfaceLock(*(IOSurfaceRef *)(a2 + 48), 0, 0);
  if ((_DWORD)result)
  {
    v6 = 0;
    *a1 = 0;
  }
  else
  {
    v5 = *(const void **)(a2 + 48);
    if (v5)
      result = CFRetain(v5);
    *(_QWORD *)a1 = v5;
    v6 = 1;
  }
  a1[8] = v6;
  return result;
}

size_t WebCore::IOSurface::bytesPerRow(IOSurfaceRef *this)
{
  return IOSurfaceGetBytesPerRow(this[6]);
}

void WebCore::IOSurface::colorSpace(IOSurfaceRef *this@<X0>, IOSurfaceRef *a2@<X8>)
{
  IOSurfaceRef v4;

  WebCore::IOSurface::ensureColorSpace(this);
  if (*((_BYTE *)this + 16))
  {
    v4 = this[1];
    *a2 = v4;
    if (v4)
      CFRetain(v4);
  }
  else
  {
    __break(1u);
  }
}

void WebCore::IOSurface::LockAndContext::~LockAndContext(WebCore::IOSurface::LockAndContext *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)this)
  {
    IOSurfaceUnlock(*(IOSurfaceRef *)this, 0, 0);
    v3 = *(const void **)this;
    *(_QWORD *)this = 0;
    if (v3)
      CFRelease(v3);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void sub_195278EF0(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WebCore::IOSurface::Locker<(WebCore::IOSurface::AccessMode)0>>::~optional(uint64_t a1)
{
  __IOSurface *v2;
  __IOSurface *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(__IOSurface **)a1;
    if (*(_QWORD *)a1)
    {
      IOSurfaceUnlock(v2, 0, 0);
      v3 = *(__IOSurface **)a1;
      *(_QWORD *)a1 = 0;
      if (v3)
        CFRelease(v3);
    }
    else
    {
      *(_QWORD *)a1 = 0;
    }
  }
  return a1;
}

void sub_195278F64(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSurface::seed(IOSurfaceRef *this)
{
  return IOSurfaceGetSeed(this[6]);
}

BOOL WebCore::IOSurface::setVolatile(IOSurfaceRef *this, uint32_t a2)
{
  uint32_t oldState;

  oldState = 0;
  IOSurfaceSetPurgeable(this[6], a2, &oldState);
  return oldState == 2;
}

uint64_t WebCore::IOSurface::surfaceID(IOSurfaceRef *this)
{
  return IOSurfaceGetID(this[6]);
}

BOOL WebCore::IOSurface::isInUse(IOSurfaceRef *this)
{
  return IOSurfaceIsInUse(this[6]) != 0;
}

BOOL WebCore::IOSurface::allowConversionFromFormatToFormat(int a1, int a2)
{
  return (a1 - 5) < 0xFFFFFFFE || a2 != 2;
}

uint64_t WebCore::IOSurface::convertToFormat(uint64_t a1, IOSurfaceRef **a2, int a3, unsigned int a4, uint64_t *a5)
{
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Main;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  CFTypeRef v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  const void *v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  const void *v26;
  void *v27;
  const void *v28;
  const void *v29;
  void *v30;
  const void *v31;
  CFTypeRef cf[3];
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x1E0C80C00];
  if (!WebCore::IOSurface::convertToFormat(WebCore::IOSurfacePool *,std::unique_ptr<WebCore::IOSurface> &&,WebCore::IOSurface::Name,WebCore::IOSurface::Format,WTF::Function<void ()(std::unique_ptr<WebCore::IOSurface>)> &&)::accelerator)
  {
    IOSurfaceAcceleratorCreate();
    if (!WebCore::IOSurface::convertToFormat(WebCore::IOSurfacePool *,std::unique_ptr<WebCore::IOSurface> &&,WebCore::IOSurface::Name,WebCore::IOSurface::Format,WTF::Function<void ()(std::unique_ptr<WebCore::IOSurface>)> &&)::accelerator)
    {
      v36 = 0;
      result = WTF::Function<void ()(std::unique_ptr<WebCore::IOSurface>)>::operator()(*a5, &v36);
      v14 = v36;
      if (!v36)
        return result;
      goto LABEL_31;
    }
    RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
    Main = CFRunLoopGetMain();
    CFRunLoopAddSource(Main, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
  }
  v12 = (uint64_t)*a2;
  if (*((_BYTE *)*a2 + 4) && *(_DWORD *)v12 == a4)
  {
    *a2 = 0;
    v35 = v12;
    result = WTF::Function<void ()(std::unique_ptr<WebCore::IOSurface>)>::operator()(*a5, &v35);
    v14 = v35;
    if (!v35)
      return result;
LABEL_31:
    v29 = *(const void **)(v14 + 48);
    *(_QWORD *)(v14 + 48) = 0;
    if (v29)
      CFRelease(v29);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v14 + 40));
    if (*(_BYTE *)(v14 + 16))
    {
      v31 = *(const void **)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      if (v31)
        CFRelease(v31);
    }
    return WTF::fastFree((WTF *)v14, v30);
  }
  v15 = *(_QWORD *)(v12 + 24);
  WebCore::IOSurface::ensureColorSpace(*a2);
  if (!*(_BYTE *)(v12 + 16))
    __break(1u);
  v16 = *(const void **)(v12 + 8);
  cf[0] = v16;
  if (v16)
    CFRetain(v16);
  WebCore::IOSurface::create(a1, v15, cf, a3, a4, (uint64_t *)&v34);
  v17 = cf[0];
  cf[0] = 0;
  if (v17)
    CFRelease(v17);
  if (v34)
  {
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    v19 = *a5;
    *a5 = 0;
    *v18 = v19;
    v20 = v34;
    v34 = 0;
    cf[1] = v18;
    cf[2] = v20;
    cf[0] = WebCore::IOSurface::convertToFormat(WebCore::IOSurfacePool *,std::unique_ptr<WebCore::IOSurface> &&,WebCore::IOSurface::Name,WebCore::IOSurface::Format,WTF::Function<void ()(std::unique_ptr<WebCore::IOSurface>)> &&)::$_0::__invoke;
    v37 = *MEMORY[0x1E0D3A338];
    v38[0] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, &v37, 1, WebCore::IOSurface::convertToFormat(WebCore::IOSurfacePool *,std::unique_ptr<WebCore::IOSurface> &&,WebCore::IOSurface::Name,WebCore::IOSurface::Format,WTF::Function<void ()(std::unique_ptr<WebCore::IOSurface>)> &&)::$_0::__invoke, v18, v20);
    result = IOSurfaceAcceleratorTransformSurface();
  }
  else
  {
    v33 = 0;
    result = WTF::Function<void ()(std::unique_ptr<WebCore::IOSurface>)>::operator()(*a5, &v33);
    v21 = v33;
    if (v33)
    {
      v22 = *(const void **)(v33 + 48);
      *(_QWORD *)(v33 + 48) = 0;
      if (v22)
        CFRelease(v22);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v21 + 40));
      if (*(_BYTE *)(v21 + 16))
      {
        v24 = *(const void **)(v21 + 8);
        *(_QWORD *)(v21 + 8) = 0;
        if (v24)
          CFRelease(v24);
      }
      result = WTF::fastFree((WTF *)v21, v23);
    }
  }
  v25 = (uint64_t)v34;
  v34 = 0;
  if (v25)
  {
    v26 = *(const void **)(v25 + 48);
    *(_QWORD *)(v25 + 48) = 0;
    if (v26)
      CFRelease(v26);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v25 + 40));
    if (*(_BYTE *)(v25 + 16))
    {
      v28 = *(const void **)(v25 + 8);
      *(_QWORD *)(v25 + 8) = 0;
      if (v28)
        CFRelease(v28);
    }
    return WTF::fastFree((WTF *)v25, v27);
  }
  return result;
}

void sub_195279300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  const void *v16;
  void *v17;
  const void *v18;

  if (a15)
  {
    v16 = *(const void **)(a15 + 48);
    *(_QWORD *)(a15 + 48) = 0;
    if (v16)
      CFRelease(v16);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a15 + 40));
    if (*(_BYTE *)(a15 + 16))
    {
      v18 = *(const void **)(a15 + 8);
      *(_QWORD *)(a15 + 8) = 0;
      if (v18)
        CFRelease(v18);
    }
    WTF::fastFree((WTF *)a15, v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Function<void ()(std::unique_ptr<WebCore::IOSurface>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  const void *v5;
  void *v6;
  const void *v7;
  uint64_t v8;

  v2 = *a2;
  *a2 = 0;
  v8 = v2;
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    v5 = *(const void **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;
    if (v5)
      CFRelease(v5);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v4 + 40));
    if (*(_BYTE *)(v4 + 16))
    {
      v7 = *(const void **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v7)
        CFRelease(v7);
    }
    return WTF::fastFree((WTF *)v4, v6);
  }
  return result;
}

void sub_195279460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v11;
  void *v12;
  const void *v13;

  if (a10)
  {
    v11 = *(const void **)(a10 + 48);
    *(_QWORD *)(a10 + 48) = 0;
    if (v11)
      CFRelease(v11);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a10 + 40));
    if (*(_BYTE *)(a10 + 16))
    {
      v13 = *(const void **)(a10 + 8);
      *(_QWORD *)(a10 + 8) = 0;
      if (v13)
        CFRelease(v13);
    }
    WTF::fastFree((WTF *)a10, v12);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::IOSurface::setOwnershipIdentity(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = IOSurfaceSetOwnershipIdentity();
  if (v4)
  {
    v5 = qword_1ECE7C2E8;
    v6 = v4;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C2E8, OS_LOG_TYPE_ERROR))
    {
      v7 = 134218496;
      v8 = a1;
      v9 = 1024;
      v10 = v3;
      v11 = 1024;
      v12 = v6;
      _os_log_error_impl(&dword_1940B8000, v5, OS_LOG_TYPE_ERROR, "IOSurface::setOwnershipIdentity: Failed to claim ownership of IOSurface %p, task id token: %d, error: %d", (uint8_t *)&v7, 0x18u);
    }
  }
}

void WebCore::IOSurface::surfaceColorSpace(IOSurfaceRef *this@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v3;
  const void *v4;
  CGColorSpaceRef v5;
  CGColorSpaceRef v6;

  v3 = IOSurfaceCopyValue(this[6], (CFStringRef)*MEMORY[0x1E0CBBF90]);
  if (v3)
  {
    v4 = v3;
    v5 = CGColorSpaceCreateWithPropertyList(v3);
    v6 = v5;
    if (v5)
    {
      CFRetain(v5);
      *(_QWORD *)a2 = v6;
      *(_BYTE *)(a2 + 8) = 1;
      CFRelease(v6);
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
    }
    CFRelease(v4);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_19527961C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::operator<<(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint32_t oldState;

  WTF::TextStream::operator<<();
  IOSurfaceGetID(*(IOSurfaceRef *)(a2 + 48));
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  -[__CFString UTF8String]((id)WebCore::surfaceNameToNSString(*(unsigned __int8 *)(a2 + 56)), "UTF8String");
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (!*(_BYTE *)(a2 + 4) || *(_DWORD *)a2 <= 6u)
    WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  oldState = 0;
  IOSurfaceSetPurgeable(*(IOSurfaceRef *)(a2 + 48), 3u, &oldState);
  WTF::TextStream::operator<<();
  return v3;
}

{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 304))(&v7, a2);
  WTF::TextStream::operator<<();
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

{
  int v4;
  int v5;

  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v4 = *(unsigned __int8 *)(a2 + 92);
  switch(*(_BYTE *)(a2 + 92))
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      goto LABEL_4;
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    default:
      if (v4 == 16 || v4 == 32)
LABEL_4:
        WTF::TextStream::operator<<();
      break;
  }
  WTF::TextStream::operator<<();
  v5 = *(unsigned __int8 *)(a2 + 93);
  switch(*(_BYTE *)(a2 + 93))
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      goto LABEL_8;
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    default:
      if (v5 == 16 || v5 == 32)
LABEL_8:
        WTF::TextStream::operator<<();
      break;
  }
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return a1;
}

{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;

  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    case 0u:
      WTF::TextStream::operator<<();
      if (*(_DWORD *)(a2 + 28))
      {
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        if (*(_DWORD *)(a2 + 28) >= 2u)
        {
          v4 = 0;
          v5 = 1;
          do
          {
            WTF::TextStream::operator<<();
            if (v5 >= *(unsigned int *)(a2 + 28))
            {
              __break(0xC471u);
              JUMPOUT(0x196100C4CLL);
            }
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            WTF::TextStream::operator<<();
            ++v5;
            v4 += 16;
          }
          while (v5 < *(unsigned int *)(a2 + 28));
        }
      }
      goto LABEL_12;
    case 1u:
    case 3u:
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      goto LABEL_12;
    case 2u:
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      v6 = *(unsigned __int16 *)(a2 + 16);
      if (v6 >= 0x100)
      {
        WTF::TextStream::operator<<();
        if (v6 <= 5u)
          WTF::TextStream::operator<<();
      }
LABEL_12:
      WTF::TextStream::operator<<();
      break;
    default:
      return a1;
  }
  return a1;
}

{
  unint64_t v4;
  uint64_t i;
  uint64_t result;

  if (!*(_DWORD *)(a2 + 12))
    return a1;
  WTF::TextStream::operator<<();
  WTF::operator<<();
  WTF::TextStream::operator<<();
  WTF::operator<<();
  WTF::TextStream::operator<<();
  if (*(_DWORD *)(a2 + 12) < 2u)
    return a1;
  v4 = 1;
  for (i = 24; ; i += 16)
  {
    result = WTF::TextStream::operator<<();
    if (v4 >= *(unsigned int *)(a2 + 12))
      break;
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::operator<<();
    if (++v4 >= *(unsigned int *)(a2 + 12))
      return a1;
  }
  __break(0xC471u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v5;
  char *v6;
  _QWORD v7[3];
  _QWORD *v8;

  v7[0] = a1;
  v7[1] = a1;
  v7[2] = a1;
  v2 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v2 == -1)
  {
    v5 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::parseBlendMode(v5, v6);
  }
  else
  {
    v8 = v7;
    ((void (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCorelsERNS6_10TextStreamERKNS_7variantIJNS8_18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEEE3__0JZNS8_lsESA_SH_E3__1ZNS8_lsESA_SH_E3__2EEEEEJRKNS0_6__implIJSC_SD_SE_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v8);
    return a1;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 120))(&v6, a2);
  WTF::TextStream::operator<<();
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 184))(&v6, a2);
  WTF::TextStream::operator<<();
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  char v8;

  v8 = 1;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E340EC70;
  v4[1] = a1;
  v4[2] = &v8;
  v7 = v4;
  WebCore::Path::applySegments(a2, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  return a1;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v5 = a1;
  v2 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::operator<<(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCorelsERNS6_10TextStreamERKNS8_11PathSegmentEE3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6);
  }
}

{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;
  int v12;
  __int16 v13;
  int v14;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  v12 = 0;
  v13 = 256;
  v14 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a2 + 72))(a2, &v8, 1);
  WTF::TextStream::release((WTF::TextStream *)&v8);
  v3 = WTF::TextStream::operator<<();
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1, 1);
}

{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
    case 6:
    case 0xC:
    case 0xE:
      goto LABEL_10;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      goto LABEL_10;
    case 0xA:
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      goto LABEL_10;
    case 0xB:
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WebCore::serializationForRenderTreeAsText((WebCore *)(a2 + 32), (uint64_t *)&v7);
      WTF::TextStream::operator<<();
      v5 = v7;
      v7 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
LABEL_10:
      WTF::TextStream::operator<<();
      break;
    case 0xD:
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      break;
    default:
      return a1;
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;

  WTF::TextStream::operator<<();
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)a2;
    WebCore::operator<<(a1, **(_QWORD **)a2);
    if ((_DWORD)v4 == 1 || *(_DWORD *)(a1 + 32) == 1)
    {
      LODWORD(v4) = 1;
    }
    else
    {
      v7 = 8 * v4 - 8;
      v8 = 1;
      while (1)
      {
        WTF::TextStream::operator<<();
        WebCore::operator<<(a1, v5[v8]);
        if ((_DWORD)v8 + 1 == *(_DWORD *)(a1 + 32))
          break;
        ++v8;
        v7 -= 8;
        if (!v7)
          goto LABEL_12;
      }
      LODWORD(v4) = v8 + 1;
    }
LABEL_12:
    if (*(_DWORD *)(a2 + 12) != (_DWORD)v4)
      WTF::TextStream::operator<<();
  }
  return WTF::TextStream::operator<<();
}

void WebCore::Icon::~Icon(WebCore::Icon *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
}

{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
}

CFTypeRef WebCore::Icon::create@<X0>(CFTypeRef this@<X0>, uint64_t *a2@<X8>)
{
  const void *v4;
  uint64_t v5;

  if (this)
  {
    v4 = this;
    v5 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v4;
    this = CFRetain(v4);
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return this;
}

void sub_195279884(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::Icon::create(PAL *a1@<X0>, uint64_t *a2@<X8>)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)a1)
  {
    v3 = (const void *)objc_msgSend(objc_alloc((Class)PAL::getUIImageClass[0](a1)), "initWithCGImage:", *(_QWORD *)a1);
    v4 = WTF::fastMalloc((WTF *)0x10);
    v5 = v4;
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = v3;
    if (v3)
    {
      CFRetain(v3);
      *a2 = v5;
      CFRelease(v3);
    }
    else
    {
      *a2 = v4;
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_195279930(_Unwind_Exception *a1, void *a2)
{
  const void *v2;
  WTF *v3;

  WTF::fastFree(v3, a2);
  CFRelease(v2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::Icon::paint(id *this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3)
{
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t IdentifierInternal;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  float32x2_t v23;
  float v24;
  float v25;

  result = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2);
  if ((result & 1) == 0)
  {
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
    v7 = (_QWORD *)objc_msgSend(this[1], "CGImage");
    v8 = v7;
    if (v7)
      CFRetain(v7);
    if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    {
      __break(0xC471u);
      JUMPOUT(0x195279B74);
    }
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    if (v8)
    {
      v10 = IdentifierInternal;
      if (CGImageGetWidth((CGImageRef)v8) >> 31 || CGImageGetHeight((CGImageRef)v8) >> 31)
      {
        CFRelease(v8);
        v8 = 0;
      }
      else
      {
        v11 = (_QWORD *)operator new();
        *v11 = &off_1E340E810;
        v11[1] = v8;
        v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
        v12 = WTF::fastMalloc((WTF *)0x20);
        *(_BYTE *)v12 = 0;
        *(_OWORD *)(v12 + 8) = xmmword_19689B170;
        *(_QWORD *)(v12 + 24) = v8;
        v8[2] = 0;
        v8[3] = 0;
        v8[4] = v10;
        v8[5] = 1;
        *v8 = off_1E340E858;
        v8[1] = v12;
        v8[6] = v11;
      }
    }
    v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v8[6] + 24))(v8[6]);
    v23 = 0;
    v24 = (float)(int)v13;
    v25 = (float)SHIDWORD(v13);
    WebCore::GraphicsContext::drawNativeImage(a2, (uint64_t)v8, (uint64_t)a3, &v23, 266785);
    v15 = v8[1];
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
      goto LABEL_13;
    }
    MEMORY[0x19AEA534C](v15);
LABEL_13:
    v17 = *(_QWORD *)(v15 + 8);
    v18 = v17 - 1;
    *(_QWORD *)(v15 + 8) = v17 - 1;
    if (v17 == 1)
    {
      v22 = *(_QWORD *)(v15 + 16);
      v19 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 24) = 0;
      v20 = v22 != 0;
    }
    else
    {
      v19 = 0;
      v20 = 1;
    }
    v21 = __ldxr((unsigned __int8 *)v15);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
        if (!v18)
          goto LABEL_21;
        return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (!v18)
    {
LABEL_21:
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      if (!v20)
        WTF::fastFree((WTF *)v15, v14);
    }
    return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  }
  return result;
}

void sub_195279B9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 104))(v1, 1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::makeNSArrayElement(WebCore *this, const WebCore::IntRect *a2)
{
  return objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGRect:", (double)*(int *)this, (double)*((int *)this + 1), (double)*((int *)this + 2), (double)*((int *)this + 3));
}

uint64_t WebCore::MediaPlayer::setVideoTarget(WebCore::MediaPlayer *this, void *const *a2)
{
  return (*(uint64_t (**)(_QWORD, void *const *))(**((_QWORD **)this + 9) + 1272))(*((_QWORD *)this + 9), a2);
}

CFTypeRef WebCore::SystemFontDatabaseCoreText::smallCaptionFontDescriptor@<X0>(WebCore::SystemFontDatabaseCoreText *this@<X0>, _QWORD *a2@<X8>)
{
  PAL *UIFontClass;
  CFTypeRef result;

  UIFontClass = (PAL *)PAL::getUIFontClass(this);
  objc_msgSend((id)PAL::getUIFontClass(UIFontClass), "smallSystemFontSize");
  result = (CFTypeRef)objc_msgSend((id)-[PAL systemFontOfSize:](UIFontClass, "systemFontOfSize:"), "fontDescriptor");
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::SystemFontDatabaseCoreText::menuFontDescriptor@<X0>(WebCore::SystemFontDatabaseCoreText *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  objc_msgSend((id)PAL::getUIFontClass(this), "systemFontSize");
  result = CTFontDescriptorCreateForUIType();
  *a2 = result;
  return result;
}

uint64_t WebCore::SystemFontDatabaseCoreText::statusBarFontDescriptor@<X0>(WebCore::SystemFontDatabaseCoreText *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  objc_msgSend((id)PAL::getUIFontClass(this), "labelFontSize");
  result = CTFontDescriptorCreateForUIType();
  *a2 = result;
  return result;
}

uint64_t WebCore::SystemFontDatabaseCoreText::miniControlFontDescriptor@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = CTFontDescriptorCreateForUIType();
  *a1 = result;
  return result;
}

uint64_t WebCore::SystemFontDatabaseCoreText::smallControlFontDescriptor@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = CTFontDescriptorCreateForUIType();
  *a1 = result;
  return result;
}

uint64_t WebCore::SystemFontDatabaseCoreText::controlFontDescriptor@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = CTFontDescriptorCreateForUIType();
  *a1 = result;
  return result;
}

uint64_t WebCore::TextTrackRepresentationCocoa::platformLayer(WebCore::TextTrackRepresentationCocoa *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t *WebCore::TextTrackRepresentationCocoa::representationFactory(WebCore::TextTrackRepresentationCocoa *this)
{
  {
    WebCore::TextTrackRepresentationCocoa::representationFactory(void)::factory = 0;
  }
  return &WebCore::TextTrackRepresentationCocoa::representationFactory(void)::factory;
}

uint64_t WebCore::TextTrackRepresentationCocoa::TextTrackRepresentationCocoa(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WebCoreTextTrackRepresentationCocoaHelper *v9;

  *(_QWORD *)a1 = off_1E334F2C0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a1;
  v6 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
    }
  }
  *(_QWORD *)a1 = off_1E334F270;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  v9 = -[WebCoreTextTrackRepresentationCocoaHelper initWithParent:]([WebCoreTextTrackRepresentationCocoaHelper alloc], "initWithParent:", a1);
  *(_QWORD *)(a1 + 32) = v9;
  objc_msgSend(*(id *)(a1 + 24), "setDelegate:", v9);
  objc_msgSend(*(id *)(a1 + 24), "setContentsGravity:", *MEMORY[0x1E0CD2F60]);
  objc_msgSend(*(id *)(a1 + 24), "setName:", CFSTR("TextTrackRepresentation"));
  return a1;
}

void sub_19527A07C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *(_QWORD *)(v2 + 8);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = *(unsigned int **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 8) = 0;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::TextTrackRepresentationCocoa::~TextTrackRepresentationCocoa(id *this)
{
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *this = off_1E334F270;
  objc_msgSend(this[3], "setDelegate:", 0);
  objc_msgSend(this[4], "setParent:", 0);
  v3 = this[4];
  this[4] = 0;
  if (v3)
    CFRelease(v3);
  v4 = this[3];
  this[3] = 0;
  if (v4)
    CFRelease(v4);
  v5 = this[1];
  if (v5)
  {
    v5[1] = 0;
    v6 = (unsigned int *)this[1];
    this[1] = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v2);
      }
    }
  }
  else
  {
    this[1] = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::TextTrackRepresentationCocoa::~TextTrackRepresentationCocoa(this);
  WTF::fastFree(v1, v2);
}

void sub_19527A1DC(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  const void *v4;
  const void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = (const void *)v2[4];
  v2[4] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)v2[3];
  v2[3] = 0;
  if (v5)
    CFRelease(v5);
  v6 = v2[1];
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)v2[1];
    v2[1] = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    v2[1] = 0;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::TextTrackRepresentationCocoa::update(WebCore::TextTrackRepresentationCocoa *this)
{
  _QWORD *result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v13);
  if (!v13)
    return result;
  result = (_QWORD *)objc_msgSend(*((id *)this + 3), "setContents:", *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 48) + 16))(*(_QWORD *)(v13 + 48)));
  v4 = v13;
  v13 = 0;
  if (!v4)
    return result;
  v5 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_7;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v5);
LABEL_7:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v12 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v12 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 != 1)
  {
    __clrex();
LABEL_14:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      return result;
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
    goto LABEL_14;
  if (v8)
    return result;
LABEL_15:
  if (v9)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (!v10)
    return (_QWORD *)WTF::fastFree((WTF *)v5, v3);
  return result;
}

void sub_19527A384(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;

  if (!a10)
    goto LABEL_19;
  v11 = *(_QWORD *)(a10 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
LABEL_7:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v18 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v18 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
LABEL_14:
        if (!v14)
        {
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          if (!v16)
            WTF::fastFree((WTF *)v11, a2);
        }
LABEL_19:
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v11);
  goto LABEL_7;
}

uint64_t WebCore::TextTrackRepresentationCocoa::setContentScale(id *this, float a2)
{
  return objc_msgSend(this[3], "setContentsScale:", a2);
}

uint64_t WebCore::TextTrackRepresentationCocoa::setHidden(id *this, uint64_t a2)
{
  return objc_msgSend(this[3], "setHidden:", a2);
}

uint64_t WebCore::TextTrackRepresentationCocoa::setBounds(id *this, const WebCore::IntRect *a2)
{
  return objc_msgSend(this[3], "setBounds:", (float)*(int *)a2, (float)*((int *)a2 + 1), (float)*((int *)a2 + 2), (float)*((int *)a2 + 3));
}

uint64_t WebCore::TextTrackRepresentationCocoa::bounds(id *this)
{
  double v1;
  float v2;
  double v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  objc_msgSend(this[3], "bounds");
  v2 = v1;
  v4 = v3;
  v5 = floorf(v2);
  v6 = 2147500000.0;
  if (v5 < 2147500000.0)
  {
    v6 = -2147500000.0;
    if (v5 > -2147500000.0)
      v6 = (float)(int)v5;
  }
  v7 = floorf(v4);
  v8 = 2147500000.0;
  if (v7 < 2147500000.0)
  {
    v8 = -2147500000.0;
    if (v7 > -2147500000.0)
      v8 = (float)(int)v7;
  }
  v9 = 0x7FFFFFFFLL;
  v10 = 0x80000000;
  if (v6 > -2147500000.0)
    v10 = (int)v6;
  if (v6 < 2147500000.0)
    v9 = v10;
  v11 = 0x7FFFFFFF00000000;
  v12 = 0x8000000000000000;
  if (v8 > -2147500000.0)
    v12 = (unint64_t)(int)v8 << 32;
  if (v8 < 2147500000.0)
    v11 = v12;
  return v11 | v9;
}

char *WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[2 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1)];
      }
      if (!(v10 >> 31))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(2 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, 2 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x19527A728);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 31)
      goto LABEL_30;
    v18 = *((unsigned int *)a1 + 3);
    v19 = (char *)WTF::fastMalloc((WTF *)(2 * v17));
    *((_DWORD *)a1 + 2) = v17;
    *a1 = v19;
    memcpy(v19, v5, 2 * v18);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

uint64_t WebCore::IOSurface::convertToFormat(WebCore::IOSurfacePool *,std::unique_ptr<WebCore::IOSurface> &&,WebCore::IOSurface::Name,WebCore::IOSurface::Format,WTF::Function<void ()(std::unique_ptr<WebCore::IOSurface>)> &&)::$_0::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v11;

  v11 = a3;
  WTF::Function<void ()(std::unique_ptr<WebCore::IOSurface>)>::operator()(*a1, &v11);
  v5 = v11;
  if (v11)
  {
    v6 = *(const void **)(v11 + 48);
    *(_QWORD *)(v11 + 48) = 0;
    if (v6)
      CFRelease(v6);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v5 + 40));
    if (*(_BYTE *)(v5 + 16))
    {
      v8 = *(const void **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v8)
        CFRelease(v8);
    }
    WTF::fastFree((WTF *)v5, v7);
  }
  v9 = *a1;
  *a1 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return WTF::fastFree((WTF *)a1, v4);
}

void sub_19527A7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v11;
  void *v12;
  const void *v13;

  if (a10)
  {
    v11 = *(const void **)(a10 + 48);
    *(_QWORD *)(a10 + 48) = 0;
    if (v11)
      CFRelease(v11);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a10 + 40));
    if (*(_BYTE *)(a10 + 16))
    {
      v13 = *(const void **)(a10 + 8);
      *(_QWORD *)(a10 + 8) = 0;
      if (v13)
        CFRelease(v13);
    }
    WTF::fastFree((WTF *)a10, v12);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::GPUTexture::GPUTexture(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::GPUTexture *v12;
  char v13;
  char *v14;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E334F3A0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a3 + 41);
  v5 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v5 == -1
    || (v9 = a3 + 8,
        v14 = &v13,
        *(_DWORD *)(a1 + 36) = ((uint64_t (*)(char **, uint64_t))off_1E334F5D0[v5])(&v14, a3 + 8),
        v10 = *(unsigned int *)(a3 + 24),
        (_DWORD)v10 == -1)
    || (v14 = &v13,
        *(_DWORD *)(a1 + 40) = ((uint64_t (*)(char **, uint64_t))off_1E334F5E0[v10])(&v14, v9),
        v11 = *(unsigned int *)(a3 + 24),
        (_DWORD)v11 == -1))
  {
    v12 = (WebCore::GPUTexture *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::GPUTexture::~GPUTexture(v12);
  }
  else
  {
    v14 = &v13;
    *(_DWORD *)(a1 + 44) = ((uint64_t (*)(char **, uint64_t))off_1E334F5F0[v11])(&v14, v9);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 32);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a3 + 40);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a3 + 44);
    ++*(_DWORD *)(a4 + 24);
    *(_QWORD *)(a1 + 64) = a4;
    *(_BYTE *)(a1 + 72) = 0;
  }
}

void WebCore::GPUTexture::~GPUTexture(WebCore::GPUTexture *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E334F3A0;
  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E334F3A0;
  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

_DWORD *WebCore::GPUTexture::createView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  BOOL v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  char v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;
  int v17;
  char v18;
  char v19;
  int v20;
  _DWORD *result;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  char v28;
  __int16 v29;
  char v30;
  WTF::StringImpl *v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  int v37;
  char v38;
  __int16 v39;
  char v40;
  char v41;
  int v42;
  char v43;
  __int16 v44;
  char v45;
  char v46;
  char v47;
  _DWORD *v48;

  v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
    v7 = *(_BYTE *)(a2 + 9) == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (!WebCore::GPUDevice::isSupportedFormat(*(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a2 + 8)))
    {
      result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 33;
      *(_DWORD *)(a3 + 16) = 1;
      return result;
    }
    v6 = *(unsigned __int8 *)(a2 + 40);
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    v9 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v9 += 2;
    LOBYTE(v10) = *(_BYTE *)(a2 + 9);
    if ((_BYTE)v10)
    {
      v10 = *(unsigned __int8 *)(a2 + 8);
      if (v10 >= 0x5F)
      {
        __break(0xC471u);
        JUMPOUT(0x19527AD78);
      }
      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
    LOBYTE(v14) = *(_BYTE *)(a2 + 11);
    if ((_BYTE)v14)
    {
      v14 = *(unsigned __int8 *)(a2 + 10);
      if (v14 >= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x19527AD98);
      }
      v12 = 1;
    }
    else
    {
      v12 = 0;
    }
    v13 = *(unsigned __int8 *)(a2 + 12);
    if (v13 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x19527AD58);
    }
    v20 = *(_DWORD *)(a2 + 16);
    v19 = *(_BYTE *)(a2 + 20);
    v29 = *(_WORD *)(a2 + 21);
    v30 = *(_BYTE *)(a2 + 23);
    v18 = *(_BYTE *)(a2 + 24);
    v17 = *(_DWORD *)(a2 + 28);
    v16 = *(_BYTE *)(a2 + 32);
    v27 = *(_WORD *)(a2 + 33);
    v28 = *(_BYTE *)(a2 + 35);
    v15 = *(_BYTE *)(a2 + 36);
  }
  else
  {
    v12 = 0;
    LOBYTE(v13) = 0;
    LOBYTE(v14) = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v11 = 0;
    LOBYTE(v10) = 0;
    v9 = 0;
  }
  v31 = v9;
  v32 = v10;
  v33 = v11;
  v34 = v14;
  v35 = v12;
  v36 = v13;
  v37 = v20;
  v38 = v19;
  v39 = v29;
  v40 = v30;
  v41 = v18;
  v42 = v17;
  v43 = v16;
  v44 = v27;
  v45 = v28;
  v46 = v15;
  v47 = 1;
  (*(void (**)(_DWORD **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(&v48, v8, &v31);
  if (v47)
  {
    v23 = v31;
    v31 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  v24 = v48;
  if (v48)
  {
    v48 = 0;
    v25 = WTF::fastMalloc((WTF *)0x18);
    v26 = 0;
    *(_DWORD *)v25 = 1;
    *(_QWORD *)(v25 + 8) = 0;
    *(_QWORD *)(v25 + 16) = v24;
    *(_QWORD *)a3 = v25;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v26 = 1;
  }
  *(_DWORD *)(a3 + 16) = v26;
  result = v48;
  v48 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::GPUTexture::texelBlockSize(unsigned int a1)
{
  if (a1 > 0x5E)
    return 0;
  else
    return dword_1968DD32C[(char)a1];
}

uint64_t WebCore::GPUTexture::texelBlockWidth(unsigned int a1)
{
  if (a1 > 0x5E)
    return 0;
  else
    return dword_1968DD4A8[(char)a1];
}

uint64_t WebCore::GPUTexture::texelBlockHeight(unsigned int a1)
{
  if (a1 > 0x5E)
    return 0;
  else
    return dword_1968DD624[(char)a1];
}

WTF::StringImpl *WebCore::WGSLLanguageFeatures::initializeSetLike(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::DOMSetAdapter::add<WebCore::IDLDOMString>(a2, (uint64_t *)&v11);
  v4 = v11;
  v11 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::DOMSetAdapter::add<WebCore::IDLDOMString>(a2, (uint64_t *)&v11);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::DOMSetAdapter::add<WebCore::IDLDOMString>(a2, (uint64_t *)&v11);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::DOMSetAdapter::add<WebCore::IDLDOMString>(a2, (uint64_t *)&v11);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::WebGPU::AdapterImpl::AdapterImpl(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  unsigned int v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  WTF::StringImpl *v20;
  int v21;
  WTF *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  WTF *v36;
  WTF::StringImpl *v37[2];
  __int128 v38;
  __int128 v39;
  char *v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  wgpuAdapterGetProperties();
  WTF::String::String((WTF::String *)v37, v40[0]);
  result = wgpuAdapterEnumerateFeatures();
  v7 = result;
  if (result)
  {
    if (result >> 30)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (WTF *)WTF::fastMalloc((WTF *)(4 * result));
  }
  else
  {
    v8 = 0;
  }
  wgpuAdapterEnumerateFeatures();
  WebCore::WebGPU::supportedFeatures((uint64_t *)&v36, v8, v7);
  if (v8)
    WTF::fastFree(v8, v9);
  v10 = v36;
  v37[1] = 0;
  wgpuAdapterGetLimits();
  v11 = v42;
  v12 = v43;
  v13 = v45;
  v14 = v46;
  v31 = v39;
  v32 = v38;
  v30 = *(_OWORD *)v40;
  v15 = v41;
  v16 = v44;
  v34 = v48;
  v35 = v47;
  v33 = v49;
  v17 = WTF::fastMalloc((WTF *)0x98);
  *(_DWORD *)v17 = 1;
  *(_OWORD *)(v17 + 4) = v32;
  *(_OWORD *)(v17 + 20) = v31;
  *(_OWORD *)(v17 + 36) = v30;
  *(_QWORD *)(v17 + 52) = v15;
  *(_QWORD *)(v17 + 64) = v11;
  *(_QWORD *)(v17 + 72) = v12;
  *(_QWORD *)(v17 + 80) = v16;
  *(_DWORD *)(v17 + 88) = v13;
  *(_QWORD *)(v17 + 96) = v14;
  *(_OWORD *)(v17 + 104) = v35;
  *(_OWORD *)(v17 + 120) = v34;
  *(_OWORD *)(v17 + 136) = v33;
  wgpuAdapterGetProperties();
  v19 = (_DWORD)v41 == 2;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E334F548;
  v20 = v37[0];
  v37[0] = 0;
  *(_QWORD *)(a1 + 16) = v20;
  ++*(_DWORD *)v10;
  *(_QWORD *)(a1 + 24) = v10;
  v21 = (*(_DWORD *)v17)++;
  *(_QWORD *)(a1 + 32) = v17;
  *(_BYTE *)(a1 + 40) = v19;
  if (v21)
    *(_DWORD *)v17 = v21;
  else
    WTF::fastFree((WTF *)v17, v18);
  v22 = v36;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
    {
      v25 = *((unsigned int *)v36 + 5);
      if ((_DWORD)v25)
      {
        v27 = (WTF::StringImpl **)*((_QWORD *)v36 + 1);
        v28 = 8 * v25;
        do
        {
          v29 = *v27;
          *v27 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v18);
            else
              *(_DWORD *)v29 -= 2;
          }
          ++v27;
          v28 -= 8;
        }
        while (v28);
      }
      v26 = (WTF *)*((_QWORD *)v22 + 1);
      if (v26)
      {
        *((_QWORD *)v22 + 1) = 0;
        *((_DWORD *)v22 + 4) = 0;
        WTF::fastFree(v26, v18);
      }
      WTF::fastFree(v22, v18);
    }
    else
    {
      --*(_DWORD *)v36;
    }
  }
  v23 = v37[0];
  v37[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)v23 -= 2;
  }
  *(_QWORD *)a1 = off_1E334F488;
  v24 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 48) = v24;
  ++*(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 56) = a3;
  return a1;
}

void WebCore::WebGPU::Adapter::~Adapter(WebCore::WebGPU::Adapter *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;

  *(_QWORD *)this = off_1E334F548;
  v3 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v6)
      {
        v8 = *(WTF::StringImpl ***)(v4 + 8);
        v9 = 8 * v6;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
            {
              v11 = v9;
              v12 = v8;
              WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
              v9 = v11;
              v8 = v12;
            }
            else
            {
              *(_DWORD *)v10 -= 2;
            }
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v7 = *(WTF **)(v4 + 8);
      if (v7)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v7, a2);
      }
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

void WebCore::WebGPU::AdapterImpl::~AdapterImpl(WebCore::WebGPU::AdapterImpl *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    wgpuAdapterRelease();
  WebCore::WebGPU::Adapter::~Adapter(this, a2);
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    wgpuAdapterRelease();
  WebCore::WebGPU::Adapter::~Adapter(this, a2);
  WTF::fastFree(v5, v6);
}

WTF *WebCore::WebGPU::AdapterImpl::requestDevice(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF *result;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  WTF *v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[2];
  uint64_t v52;
  uint64_t v53[8];
  __int128 v54;
  _DWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  WTF *v74;
  _OWORD v75[2];
  uint64_t v76;

  result = (WTF *)WTF::String::utf8();
  v7 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v7)
  {
    if (v7 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    v8 = WTF::fastMalloc((WTF *)(4 * v7));
    v9 = (WTF *)v8;
    v10 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *(_QWORD *)(a2 + 8);
      do
      {
        v13 = *(unsigned __int8 *)(v12 + v11) - 1;
        if (v13 > 9)
          v14 = 1;
        else
          v14 = dword_1968DD7A0[(char)v13];
        *(_DWORD *)(v8 + 4 * v11++) = v14;
      }
      while (v10 != v11);
    }
  }
  else
  {
    LODWORD(v10) = 0;
    v9 = 0;
  }
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v65 = 0u;
  wgpuDefaultLimits();
  v15 = *(unsigned int *)(a2 + 36);
  if (!(_DWORD)v15)
  {
LABEL_146:
    v55 = 0;
    v61 = v70;
    v62 = v71;
    v49 = v72;
    v50 = v71;
    v63 = v72;
    v64 = v73;
    v47 = v66;
    v48 = v73;
    v57 = v66;
    v58 = v67;
    v59 = v68;
    v60 = v69;
    v45 = v65;
    v46 = v67;
    v56 = v65;
    if (v74)
      v23 = (uint64_t)v74 + 16;
    else
      v23 = 0;
    v53[1] = 0;
    v53[2] = v23;
    v53[3] = v10;
    v53[4] = (uint64_t)v9;
    v53[5] = (uint64_t)&v55;
    v53[6] = 0;
    v53[7] = (uint64_t)"queue";
    v54 = 0u;
    v24 = *((_QWORD *)&v68 + 1);
    v25 = v69;
    v26 = v70;
    v27 = *((_QWORD *)&v70 + 1);
    v28 = v68;
    v29 = *((_QWORD *)&v69 + 1);
    v30 = WTF::fastMalloc((WTF *)0x98);
    *(_DWORD *)v30 = 1;
    *(_OWORD *)(v30 + 4) = v45;
    *(_OWORD *)(v30 + 20) = v47;
    *(_OWORD *)(v30 + 36) = v46;
    *(_QWORD *)(v30 + 52) = v28;
    *(_QWORD *)(v30 + 64) = v24;
    *(_QWORD *)(v30 + 72) = v25;
    *(_QWORD *)(v30 + 80) = v29;
    *(_DWORD *)(v30 + 88) = v26;
    *(_QWORD *)(v30 + 96) = v27;
    *(_OWORD *)(v30 + 104) = v50;
    *(_OWORD *)(v30 + 120) = v49;
    *(_OWORD *)(v30 + 136) = v48;
    WebCore::WebGPU::supportedFeatures(v53, v9, v10);
    ++*(_DWORD *)(a1 + 8);
    v31 = *(_QWORD *)(a1 + 56);
    ++*(_DWORD *)(v31 + 8);
    v32 = *a3;
    *a3 = 0;
    ++*(_DWORD *)v30;
    v33 = v53[0];
    ++*(_DWORD *)v53[0];
    memset(v51, 0, sizeof(v51));
    v52 = 0;
    v34 = malloc_type_malloc(0x48uLL, 0x10E004050894660uLL);
    *v34 = MEMORY[0x1E0C809A0];
    v34[1] = 50331650;
    v34[2] = WTF::BlockPtr<void ()(WGPURequestDeviceStatus,WGPUDeviceImpl *,char const*)>::fromCallable<WebCore::WebGPU::AdapterImpl::requestDevice(WebCore::WebGPU::DeviceDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU::Device>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Device>> &&)> &&)::$_1>(WebCore::WebGPU::AdapterImpl::requestDevice(WebCore::WebGPU::DeviceDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU::Device>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Device>> &&)> &&)::$_1)::{lambda(void *,WGPURequestDeviceStatus,WGPUDeviceImpl *,char const*)#1}::__invoke;
    v34[3] = &WTF::BlockPtr<void ()(WGPURequestDeviceStatus,WGPUDeviceImpl *,char const*)>::fromCallable<WebCore::WebGPU::AdapterImpl::requestDevice(WebCore::WebGPU::DeviceDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU::Device>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Device>> &&)> &&)::$_1>(WebCore::WebGPU::AdapterImpl::requestDevice(WebCore::WebGPU::DeviceDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU::Device>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Device>> &&)> &&)::$_1)::descriptor;
    v34[4] = a1;
    v34[5] = v31;
    memset(v75, 0, sizeof(v75));
    v34[6] = v32;
    v34[7] = v30;
    v76 = 0;
    v34[8] = v33;
    WebCore::WebGPU::AdapterImpl::requestDevice(WebCore::WebGPU::DeviceDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU::Device>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Device>> &&)> &&)::$_1::~$_1((uint64_t)v75, v35);
    WebCore::WebGPU::AdapterImpl::requestDevice(WebCore::WebGPU::DeviceDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU::Device>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Device>> &&)> &&)::$_1::~$_1((uint64_t)v51, v36);
    _Block_copy(v34);
    wgpuAdapterRequestDevice();
    _Block_release(v34);
    if (*(_DWORD *)v33 == 1)
    {
      v40 = *(unsigned int *)(v33 + 20);
      if ((_DWORD)v40)
      {
        v42 = *(WTF::StringImpl ***)(v33 + 8);
        v43 = 8 * v40;
        do
        {
          v44 = *v42;
          *v42 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v37);
            else
              *(_DWORD *)v44 -= 2;
          }
          ++v42;
          v43 -= 8;
        }
        while (v43);
      }
      v41 = *(WTF **)(v33 + 8);
      if (v41)
      {
        *(_QWORD *)(v33 + 8) = 0;
        *(_DWORD *)(v33 + 16) = 0;
        WTF::fastFree(v41, v37);
      }
      WTF::fastFree((WTF *)v33, v37);
    }
    else
    {
      --*(_DWORD *)v33;
    }
    if (*(_DWORD *)v30 == 1)
      WTF::fastFree((WTF *)v30, v37);
    else
      --*(_DWORD *)v30;
    goto LABEL_156;
  }
  v16 = 16 * v15;
  v17 = (_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  v18 = *(_QWORD *)(a1 + 32);
  while (1)
  {
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxTextureDimension1D", 21))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 4))
        goto LABEL_153;
      if (v65 < *v17)
        LODWORD(v65) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxTextureDimension2D", 21))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 8))
        goto LABEL_153;
      if (DWORD1(v65) < *v17)
        DWORD1(v65) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxTextureDimension3D", 21))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 12))
        goto LABEL_153;
      if (DWORD2(v65) < *v17)
        DWORD2(v65) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxTextureArrayLayers", 21))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 16))
        goto LABEL_153;
      if (HIDWORD(v65) < *v17)
        HIDWORD(v65) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxBindGroups", 13))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 20))
        goto LABEL_153;
      if (v66 < *v17)
        LODWORD(v66) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxBindGroupsPlusVertexBuffers", 30))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 24))
        goto LABEL_153;
      if (DWORD1(v66) < *v17)
        DWORD1(v66) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxBindingsPerBindGroup", 23))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 28))
        goto LABEL_153;
      if (DWORD2(v66) < *v17)
        DWORD2(v66) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxDynamicUniformBuffersPerPipelineLayout", 41))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 32))
        goto LABEL_153;
      if (HIDWORD(v66) < *v17)
        HIDWORD(v66) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxDynamicStorageBuffersPerPipelineLayout", 41))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 36))
        goto LABEL_153;
      if (v67 < *v17)
        LODWORD(v67) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxSampledTexturesPerShaderStage", 32))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 40))
        goto LABEL_153;
      if (DWORD1(v67) < *v17)
        DWORD1(v67) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxSamplersPerShaderStage", 25))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 44))
        goto LABEL_153;
      if (DWORD2(v67) < *v17)
        DWORD2(v67) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxStorageBuffersPerShaderStage", 31))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 48))
        goto LABEL_153;
      if (HIDWORD(v67) < *v17)
        HIDWORD(v67) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxStorageTexturesPerShaderStage", 32))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 52))
        goto LABEL_153;
      if (v68 < *v17)
        LODWORD(v68) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxUniformBuffersPerShaderStage", 31))
    {
      if (*v17 > (unint64_t)*(unsigned int *)(v18 + 56))
        goto LABEL_153;
      if (DWORD1(v68) < *v17)
        DWORD1(v68) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxUniformBufferBindingSize", 27))
    {
      if (*v17 > *(_QWORD *)(v18 + 64))
        goto LABEL_153;
      if (*((_QWORD *)&v68 + 1) < *v17)
        *((_QWORD *)&v68 + 1) = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxStorageBufferBindingSize", 27))
    {
      if (*v17 > *(_QWORD *)(v18 + 72))
        goto LABEL_153;
      if ((unint64_t)v69 < *v17)
        *(_QWORD *)&v69 = *v17;
      goto LABEL_145;
    }
    if (MEMORY[0x19AEA53F4](*(v17 - 1), "minUniformBufferOffsetAlignment", 31))
    {
      v19 = *v17;
      if (HIDWORD(*v17))
        goto LABEL_153;
      v20 = *(_DWORD *)(v18 + 80);
      if (v20 > v19 || v19 % v20)
        goto LABEL_153;
      if (DWORD2(v69) > v19)
        DWORD2(v69) = *v17;
      goto LABEL_145;
    }
    if (!MEMORY[0x19AEA53F4](*(v17 - 1), "minStorageBufferOffsetAlignment", 31))
      break;
    v21 = *v17;
    if (HIDWORD(*v17))
      goto LABEL_153;
    v22 = *(_DWORD *)(v18 + 84);
    if (v22 > v21 || v21 % v22)
      goto LABEL_153;
    if (HIDWORD(v69) > v21)
      HIDWORD(v69) = *v17;
LABEL_145:
    v17 += 2;
    v16 -= 16;
    if (!v16)
      goto LABEL_146;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxVertexBuffers", 16))
  {
    if (*v17 > (unint64_t)*(unsigned int *)(v18 + 88))
      goto LABEL_153;
    if (v70 < *v17)
      LODWORD(v70) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxBufferSize", 13))
  {
    if (*v17 > *(_QWORD *)(v18 + 96))
      goto LABEL_153;
    if (*((_QWORD *)&v70 + 1) < *v17)
      *((_QWORD *)&v70 + 1) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxVertexAttributes", 19))
  {
    if (*v17 > (unint64_t)*(unsigned int *)(v18 + 104))
      goto LABEL_153;
    if (v71 < *v17)
      LODWORD(v71) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxVertexBufferArrayStride", 26))
  {
    if (*v17 > (unint64_t)*(unsigned int *)(v18 + 108))
      goto LABEL_153;
    if (DWORD1(v71) < *v17)
      DWORD1(v71) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxInterStageShaderComponents", 29))
  {
    if (*v17 > (unint64_t)*(unsigned int *)(v18 + 112))
      goto LABEL_153;
    if (DWORD2(v71) < *v17)
      DWORD2(v71) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxInterStageShaderVariables", 28))
  {
    if (*v17 > (unint64_t)*(unsigned int *)(v18 + 116))
      goto LABEL_153;
    if (HIDWORD(v71) < *v17)
      HIDWORD(v71) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxColorAttachments", 19))
  {
    if (*v17 > (unint64_t)*(unsigned int *)(v18 + 120))
      goto LABEL_153;
    if (v72 < *v17)
      LODWORD(v72) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxColorAttachmentBytesPerSample", 32))
  {
    if (*v17 > (unint64_t)*(unsigned int *)(v18 + 124))
      goto LABEL_153;
    if (DWORD1(v72) < *v17)
      DWORD1(v72) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxComputeWorkgroupStorageSize", 30))
  {
    if (*v17 > (unint64_t)*(unsigned int *)(v18 + 128))
      goto LABEL_153;
    if (DWORD2(v72) < *v17)
      DWORD2(v72) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxComputeInvocationsPerWorkgroup", 33))
  {
    if (*v17 > (unint64_t)*(unsigned int *)(v18 + 132))
      goto LABEL_153;
    if (HIDWORD(v72) < *v17)
      HIDWORD(v72) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxComputeWorkgroupSizeX", 24))
  {
    if (*v17 > (unint64_t)*(unsigned int *)(v18 + 136))
      goto LABEL_153;
    if (v73 < *v17)
      LODWORD(v73) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxComputeWorkgroupSizeY", 24))
  {
    if (*v17 > (unint64_t)*(unsigned int *)(v18 + 140))
      goto LABEL_153;
    if (DWORD1(v73) < *v17)
      DWORD1(v73) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxComputeWorkgroupSizeZ", 24))
  {
    if (*v17 > (unint64_t)*(unsigned int *)(v18 + 144))
      goto LABEL_153;
    if (DWORD2(v73) < *v17)
      DWORD2(v73) = *v17;
    goto LABEL_145;
  }
  if (MEMORY[0x19AEA53F4](*(v17 - 1), "maxComputeWorkgroupsPerDimension", 32)
    && *v17 <= (unint64_t)*(unsigned int *)(v18 + 148))
  {
    if (HIDWORD(v73) < *v17)
      HIDWORD(v73) = *v17;
    goto LABEL_145;
  }
LABEL_153:
  v55 = 0;
  v38 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v38 + 16))(v38, &v55);
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = v55;
  v55 = 0;
  if (v39)
  {
    if (v39[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
    else
      --v39[2];
  }
LABEL_156:
  if (v9)
    WTF::fastFree(v9, v37);
  result = v74;
  v74 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v37);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::WebGPU::supportedFeatures(uint64_t *a1, _DWORD *a2, unsigned int a3)
{
  void *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v36;

  if (a3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 4 * a3;
    while (2)
    {
      switch(*a2)
      {
        case 1:
          v8 = v6;
          if (v6 != v5)
          {
            ++v6;
            goto LABEL_26;
          }
          v22 = ((unint64_t)v5 >> 2) + v5;
          if (v22 >= 0x10)
            v23 = v22 + 1;
          else
            v23 = 16;
          if (v23 <= (unint64_t)v6 + 1)
            v11 = v6 + 1;
          else
            v11 = v23;
          if (v11 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19527C704);
          }
          v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
          memcpy(v12, v4, 8 * v6);
          if (!v4)
            goto LABEL_125;
          if (v12 == v4)
          {
            LODWORD(v11) = 0;
            v12 = 0;
          }
          goto LABEL_157;
        case 2:
          v8 = v6;
          if (v6 != v5)
          {
            ++v6;
            goto LABEL_26;
          }
          v24 = ((unint64_t)v5 >> 2) + v5;
          if (v24 >= 0x10)
            v25 = v24 + 1;
          else
            v25 = 16;
          if (v25 <= (unint64_t)v6 + 1)
            v11 = v6 + 1;
          else
            v11 = v25;
          if (v11 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19527C70CLL);
          }
          v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
          memcpy(v12, v4, 8 * v6);
          if (!v4)
            goto LABEL_125;
          if (v12 == v4)
          {
            LODWORD(v11) = 0;
            v12 = 0;
          }
          goto LABEL_157;
        case 3:
          v8 = v6;
          if (v6 != v5)
          {
            ++v6;
            goto LABEL_26;
          }
          v16 = ((unint64_t)v5 >> 2) + v5;
          if (v16 >= 0x10)
            v17 = v16 + 1;
          else
            v17 = 16;
          if (v17 <= (unint64_t)v6 + 1)
            v11 = v6 + 1;
          else
            v11 = v17;
          if (v11 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19527C6ECLL);
          }
          v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
          memcpy(v12, v4, 8 * v6);
          if (!v4)
            goto LABEL_125;
          if (v12 == v4)
          {
            LODWORD(v11) = 0;
            v12 = 0;
          }
          goto LABEL_157;
        case 4:
          v8 = v6;
          if (v6 != v5)
          {
            ++v6;
            goto LABEL_26;
          }
          v18 = ((unint64_t)v5 >> 2) + v5;
          if (v18 >= 0x10)
            v19 = v18 + 1;
          else
            v19 = 16;
          if (v19 <= (unint64_t)v6 + 1)
            v11 = v6 + 1;
          else
            v11 = v19;
          if (v11 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19527C6F4);
          }
          v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
          memcpy(v12, v4, 8 * v6);
          if (!v4)
            goto LABEL_125;
          if (v12 == v4)
          {
            LODWORD(v11) = 0;
            v12 = 0;
          }
          goto LABEL_157;
        case 5:
          v8 = v6;
          if (v6 != v5)
          {
            ++v6;
            goto LABEL_26;
          }
          v9 = ((unint64_t)v5 >> 2) + v5;
          if (v9 >= 0x10)
            v10 = v9 + 1;
          else
            v10 = 16;
          if (v10 <= (unint64_t)v6 + 1)
            v11 = v6 + 1;
          else
            v11 = v10;
          if (v11 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19527C6DCLL);
          }
          v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
          memcpy(v12, v4, 8 * v6);
          if (!v4)
            goto LABEL_125;
          if (v12 == v4)
          {
            LODWORD(v11) = 0;
            v12 = 0;
          }
          goto LABEL_157;
        case 6:
          v8 = v6;
          if (v6 != v5)
          {
            ++v6;
            goto LABEL_26;
          }
          v26 = ((unint64_t)v5 >> 2) + v5;
          if (v26 >= 0x10)
            v27 = v26 + 1;
          else
            v27 = 16;
          if (v27 <= (unint64_t)v6 + 1)
            v11 = v6 + 1;
          else
            v11 = v27;
          if (v11 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19527C714);
          }
          v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
          memcpy(v12, v4, 8 * v6);
          if (!v4)
            goto LABEL_125;
          if (v12 == v4)
          {
            LODWORD(v11) = 0;
            v12 = 0;
          }
          goto LABEL_157;
        case 7:
          v8 = v6;
          if (v6 != v5)
          {
            ++v6;
            goto LABEL_26;
          }
          v28 = ((unint64_t)v5 >> 2) + v5;
          if (v28 >= 0x10)
            v29 = v28 + 1;
          else
            v29 = 16;
          if (v29 <= (unint64_t)v6 + 1)
            v11 = v6 + 1;
          else
            v11 = v29;
          if (v11 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19527C71CLL);
          }
          v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
          memcpy(v12, v4, 8 * v6);
          if (!v4)
            goto LABEL_125;
          if (v12 == v4)
          {
            LODWORD(v11) = 0;
            v12 = 0;
          }
          goto LABEL_157;
        case 8:
          v8 = v6;
          if (v6 != v5)
          {
            ++v6;
            goto LABEL_26;
          }
          v20 = ((unint64_t)v5 >> 2) + v5;
          if (v20 >= 0x10)
            v21 = v20 + 1;
          else
            v21 = 16;
          if (v21 <= (unint64_t)v6 + 1)
            v11 = v6 + 1;
          else
            v11 = v21;
          if (v11 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19527C6FCLL);
          }
          v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
          memcpy(v12, v4, 8 * v6);
          if (!v4)
            goto LABEL_125;
          if (v12 == v4)
          {
            LODWORD(v11) = 0;
            v12 = 0;
          }
          goto LABEL_157;
        case 9:
          v8 = v6;
          if (v6 != v5)
          {
            ++v6;
            goto LABEL_26;
          }
          v30 = ((unint64_t)v5 >> 2) + v5;
          if (v30 >= 0x10)
            v31 = v30 + 1;
          else
            v31 = 16;
          if (v31 <= (unint64_t)v6 + 1)
            v11 = v6 + 1;
          else
            v11 = v31;
          if (v11 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19527C724);
          }
          v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
          memcpy(v12, v4, 8 * v6);
          if (!v4)
            goto LABEL_125;
          if (v12 == v4)
          {
            LODWORD(v11) = 0;
            v12 = 0;
          }
          goto LABEL_157;
        case 0xA:
          v8 = v6;
          if (v6 != v5)
          {
            ++v6;
            goto LABEL_26;
          }
          v14 = ((unint64_t)v5 >> 2) + v5;
          if (v14 >= 0x10)
            v15 = v14 + 1;
          else
            v15 = 16;
          if (v15 <= (unint64_t)v6 + 1)
            v11 = v6 + 1;
          else
            v11 = v15;
          if (v11 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19527C6E4);
          }
          v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
          memcpy(v12, v4, 8 * v6);
          if (!v4)
            goto LABEL_125;
          if (v12 == v4)
          {
            LODWORD(v11) = 0;
            v12 = 0;
          }
          goto LABEL_157;
        case 0xB:
          v8 = v6;
          if (v6 == v5)
          {
            v32 = ((unint64_t)v5 >> 2) + v5;
            if (v32 >= 0x10)
              v33 = v32 + 1;
            else
              v33 = 16;
            if (v33 <= (unint64_t)v6 + 1)
              v11 = v6 + 1;
            else
              v11 = v33;
            if (v11 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x19527C72CLL);
            }
            v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
            memcpy(v12, v4, 8 * v6);
            if (v4)
            {
              if (v12 == v4)
              {
                LODWORD(v11) = 0;
                v12 = 0;
              }
LABEL_157:
              WTF::fastFree((WTF *)v4, v13);
            }
LABEL_125:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *((_QWORD *)v12 + v8) = v36;
            v6 = v5 + 1;
            v5 = v11;
            v4 = v12;
          }
          else
          {
            ++v6;
LABEL_26:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *((_QWORD *)v4 + v8) = v36;
          }
LABEL_126:
          ++a2;
          v7 -= 4;
          if (!v7)
            goto LABEL_162;
          continue;
        default:
          goto LABEL_126;
      }
    }
  }
  v6 = 0;
  v5 = 0;
  v4 = 0;
LABEL_162:
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v4;
  *(_DWORD *)(result + 16) = v5;
  *(_DWORD *)(result + 20) = v6;
  *a1 = result;
  return result;
}

uint64_t WebCore::WebGPU::AdapterImpl::requestDevice(WebCore::WebGPU::DeviceDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU::Device>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Device>> &&)> &&)::$_1::~$_1(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v9;
  WTF *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl **v15;

  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v9 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v9)
      {
        v11 = *(WTF::StringImpl ***)(v3 + 8);
        v12 = 8 * v9;
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
            {
              v14 = v12;
              v15 = v11;
              WTF::StringImpl::destroy(v13, a2);
              v12 = v14;
              v11 = v15;
            }
            else
            {
              *(_DWORD *)v13 -= 2;
            }
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      v10 = *(WTF **)(v3 + 8);
      if (v10)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v10, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *(WTF **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *(_DWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  return a1;
}

void WebCore::WebGPU::requestDeviceCallback(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  a4[2](a4, a1, a2, a3);
  _Block_release(a4);
}

void WebCore::WebGPU::BindGroupImpl::~BindGroupImpl(WebCore::WebGPU::BindGroupImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuBindGroupRelease();
  *(_QWORD *)this = off_1E334F590;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuBindGroupRelease();
  *(_QWORD *)this = off_1E334F590;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF *WebCore::WebGPU::BindGroupImpl::setLabelInternal(WebCore::WebGPU::BindGroupImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuBindGroupSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::BindGroupLayoutImpl::~BindGroupLayoutImpl(WebCore::WebGPU::BindGroupLayoutImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    wgpuBindGroupLayoutRelease();
  *(_QWORD *)this = off_1E334F5B8;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGPU::BindGroupLayoutImpl::~BindGroupLayoutImpl(this, a2);
  WTF::fastFree(v2, v3);
}

WTF *WebCore::WebGPU::BindGroupLayoutImpl::setLabelInternal(WebCore::WebGPU::BindGroupLayoutImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuBindGroupLayoutSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::GPUUncapturedErrorEvent::~GPUUncapturedErrorEvent(WebCore::GPUUncapturedErrorEvent *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v5;

  v3 = *((unsigned int *)this + 24);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E334F4F0[v3])(&v5, (char *)this + 88);
  *((_DWORD *)this + 24) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  bmalloc::api *v5;
  void *v6;
  char v7;

  v3 = *((unsigned int *)this + 24);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E334F4F0[v3])(&v7, (char *)this + 88);
  *((_DWORD *)this + 24) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t WTF::BlockPtr<void ()(WGPURequestDeviceStatus,WGPUDeviceImpl *,char const*)>::fromCallable<WebCore::WebGPU::AdapterImpl::requestDevice(WebCore::WebGPU::DeviceDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU::Device>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Device>> &&)> &&)::$_1>(WebCore::WebGPU::AdapterImpl::requestDevice(WebCore::WebGPU::DeviceDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU::Device>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Device>> &&)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  return WebCore::WebGPU::AdapterImpl::requestDevice(WebCore::WebGPU::DeviceDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU::Device>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Device>> &&)> &&)::$_1::~$_1(a1 + 32, a2);
}

_DWORD *WTF::BlockPtr<void ()(WGPURequestDeviceStatus,WGPUDeviceImpl *,char const*)>::fromCallable<WebCore::WebGPU::AdapterImpl::requestDevice(WebCore::WebGPU::DeviceDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU::Device>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Device>> &&)> &&)::$_1>(WebCore::WebGPU::AdapterImpl::requestDevice(WebCore::WebGPU::DeviceDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WebCore::WebGPU::Device>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Device>> &&)> &&)::$_1)::{lambda(void *,WGPURequestDeviceStatus,WGPUDeviceImpl *,char const*)#1}::__invoke(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Queue;
  uint64_t v10;
  uint64_t v11;
  _DWORD *result;
  _DWORD *v13;

  if (a2)
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  else
  {
    v5 = a1[8];
    a1[8] = 0;
  }
  v6 = a1[5];
  v7 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v5;
  v8 = a1[7];
  a1[7] = 0;
  *(_QWORD *)(v7 + 48) = v8;
  *(_QWORD *)v7 = off_1E3350CD8;
  if (a3)
    wgpuDeviceReference();
  ++*(_DWORD *)(v6 + 8);
  *(_QWORD *)(v7 + 56) = a3;
  *(_QWORD *)(v7 + 64) = v6;
  Queue = wgpuDeviceGetQueue();
  if (Queue)
    wgpuQueueReference();
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = off_1E3350F88;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = Queue;
  ++*(_DWORD *)(v6 + 8);
  *(_QWORD *)(v10 + 32) = v6;
  *(_QWORD *)(v7 + 72) = v10;
  v13 = (_DWORD *)v7;
  v11 = a1[6];
  a1[6] = 0;
  (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v11 + 16))(v11, &v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v13;
  v13 = 0;
  if (!result)
  {
LABEL_11:
    if (!a3)
      return result;
    return (_DWORD *)wgpuDeviceRelease();
  }
  if (result[2] != 1)
  {
    --result[2];
    goto LABEL_11;
  }
  result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  if (!a3)
    return result;
  return (_DWORD *)wgpuDeviceRelease();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<unsigned int WebCore::getDimension<0,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const>(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const &)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},unsigned int WebCore::getDimension<0,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const>(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const &)::{lambda(WebCore::GPUExtent3DDict const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&>(uint64_t a1, _DWORD *a2)
{
  if (a2[3])
    return **(unsigned int **)a2;
  else
    return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<unsigned int WebCore::getDimension<0,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const>(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const &)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},unsigned int WebCore::getDimension<0,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const>(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const &)::{lambda(WebCore::GPUExtent3DDict const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&>(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<unsigned int WebCore::getDimension<1,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const>(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const &)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},unsigned int WebCore::getDimension<1,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const>(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const &)::{lambda(WebCore::GPUExtent3DDict const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&>(uint64_t a1, _DWORD *a2)
{
  if (a2[3] < 2u)
    return 1;
  else
    return *(unsigned int *)(*(_QWORD *)a2 + 4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<unsigned int WebCore::getDimension<1,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const>(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const &)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},unsigned int WebCore::getDimension<1,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const>(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const &)::{lambda(WebCore::GPUExtent3DDict const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<unsigned int WebCore::getDimension<2,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const>(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const &)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},unsigned int WebCore::getDimension<2,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const>(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const &)::{lambda(WebCore::GPUExtent3DDict const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&>(uint64_t a1, _DWORD *a2)
{
  if (a2[3] < 3u)
    return 1;
  else
    return *(unsigned int *)(*(_QWORD *)a2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<unsigned int WebCore::getDimension<2,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const>(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const &)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},unsigned int WebCore::getDimension<2,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const>(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const &)::{lambda(WebCore::GPUExtent3DDict const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GPUExtent3DDict> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

uint64_t WebCore::VideoMediaSampleRenderer::VideoMediaSampleRenderer(uint64_t a1, const void *a2)
{
  uint64_t v4;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_19689B170;
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = a2;
  if (a2)
    CFRetain(a2);
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 38) = 0;
  return a1;
}

void WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(id *this)
{
  uint64_t v2;
  dispatch_source_s *v3;
  WebCore::WebCoreDecompressionSession *v4;
  void *v5;
  id v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  WebCore::WebCoreDecompressionSession *v12;
  BOOL v13;
  int v14;
  WTF *v15;
  void *v16;
  id v17;
  uint64_t v18;

  objc_msgSend(this[1], "flush");
  objc_msgSend(this[1], "stopRequestingMediaData");
  v4 = (WebCore::WebCoreDecompressionSession *)this[2];
  if (v4)
    WebCore::WebCoreDecompressionSession::invalidate(v4, v2, v3);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(this + 10));
  v6 = this[4];
  this[4] = 0;
  if (v6)
    (*(void (**)(id))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned __int8 **)this[2];
  this[2] = 0;
  if (v7)
  {
    v8 = *v7;
    if (__ldaxr(*v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_10:
    v10 = *((_QWORD *)v8 + 1);
    v11 = v10 - 1;
    *((_QWORD *)v8 + 1) = v10 - 1;
    if (v10 == 1)
    {
      v18 = *((_QWORD *)v8 + 2);
      v12 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v8 + 3);
      *((_QWORD *)v8 + 3) = 0;
      v13 = v18 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr(v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, v8))
      {
        if (v11)
          goto LABEL_22;
LABEL_18:
        if (v12)
        {
          WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v12);
          WTF::fastFree(v15, v16);
        }
        if (!v13)
          WTF::fastFree((WTF *)v8, v5);
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      goto LABEL_22;
    goto LABEL_18;
  }
LABEL_22:
  v17 = this[1];
  this[1] = 0;
  if (v17)
    CFRelease(v17);
}

void sub_19527D04C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  WebCore::WebCoreDecompressionSession *v10;
  BOOL v11;
  int v12;
  WTF *v13;
  void *v14;
  const void *v15;
  uint64_t v16;

  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v1 + 10));
  v4 = v1[4];
  v1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned __int8 **)v1[2];
  v1[2] = 0;
  if (!v5)
  {
LABEL_21:
    v15 = (const void *)v1[1];
    v1[1] = 0;
    if (v15)
      CFRelease(v15);
    _Unwind_Resume(a1);
  }
  v6 = *v5;
  if (__ldaxr(*v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
LABEL_9:
    v8 = *((_QWORD *)v6 + 1);
    v9 = v8 - 1;
    *((_QWORD *)v6 + 1) = v8 - 1;
    if (v8 == 1)
    {
      v16 = *((_QWORD *)v6 + 2);
      v10 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v6 + 3);
      *((_QWORD *)v6 + 3) = 0;
      v11 = v16 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr(v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_16:
        if (!v9)
        {
          if (v10)
          {
            WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v10);
            WTF::fastFree(v13, v14);
          }
          if (!v11)
            WTF::fastFree((WTF *)v6, v3);
        }
        goto LABEL_21;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v6);
  goto LABEL_9;
}

uint64_t WebCore::WebCoreDecompressionSession::invalidate(WebCore::WebCoreDecompressionSession *this, uint64_t a2, dispatch_source_s *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t result;
  int v15;
  _QWORD *v16;

  atomic_store(1u, (unsigned __int8 *)this + 224);
  v4 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WebCore::WebCoreDecompressionSession::setTimebaseWithLockHeld(this, 0, a3);
  v8 = *((_QWORD *)this + 7);
  if (v8)
  {
    dispatch_source_cancel(v8);
    v9 = (void *)*((_QWORD *)this + 7);
    if (v9)

    *((_QWORD *)this + 7) = 0;
  }
  v10 = *((_QWORD *)this + 5);
  v11 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E33504B0;
  v12[1] = v11;
  v16 = v12;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v10 + 32))(v10, &v16);
  v13 = v16;
  v16 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  result = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v15 = __ldxr(v4);
  if (v15 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_19527D270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned __int8 *v10;
  int v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  v12 = __ldxr(v10);
  if (v12 == 1)
  {
    if (!__stlxr(0, v10))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
  goto LABEL_8;
}

BOOL WebCore::WebCoreDecompressionSession::isReadyForMoreMediaData(WebCore::WebCoreDecompressionSession *this, opaqueCMBufferQueue *a2)
{
  PAL *BufferCount;
  unsigned __int8 v4;
  signed int v7;

  BufferCount = (PAL *)*((_QWORD *)this + 3);
  if (BufferCount)
    BufferCount = (PAL *)PAL::softLinkCoreMediaCMBufferQueueGetBufferCount(BufferCount, a2);
  v4 = atomic_load((unsigned __int8 *)this + 244);
  if ((v4 & 1) != 0)
  {
    if (atomic_load((unsigned int *)this + 57))
      return 0;
  }
  v7 = atomic_load((unsigned int *)this + 57);
  return (uint64_t)BufferCount + v7 < 61;
}

uint64_t WebCore::VideoMediaSampleRenderer::enqueueSample(WebCore::VideoMediaSampleRenderer *this, opaqueCMSampleBuffer *a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  WebCore::WebCoreDecompressionSession *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  PAL *FormatDescription;
  const opaqueCMFormatDescription *v14;
  WebCore *v15;
  uint64_t v16;
  dispatch_source_s *v17;
  int v18;
  WebCore::WebCoreDecompressionSession *v19;
  uint64_t v20;
  void *v21;
  unsigned __int8 **v22;
  unsigned __int8 *v23;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::WebCoreDecompressionSession *v30;
  BOOL v31;
  int v32;
  WTF *v33;
  void *v34;
  unsigned __int8 *v35;
  dispatch_source_s *v36;
  PAL *v37;
  unsigned __int8 *v38;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL4 inited;
  uint64_t v58;
  _BYTE v59[4];

  v8 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)this + 2);
  if (!v8)
  {
    if (*((_BYTE *)this + 52))
      return objc_msgSend(*((id *)this + 1), "enqueueSampleBuffer:", a2);
    FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(a2, a2);
    v15 = (WebCore *)PAL::softLinkCoreMediaCMFormatDescriptionGetMediaSubType[0](FormatDescription, v14);
    v18 = (int)v15;
    if ((_DWORD)v15 != 1987063864)
    {
      if ((_DWORD)v15 != 1987063865)
        goto LABEL_83;
      {
        if (!WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(void)::loaded)
          goto LABEL_13;
      }
      else
      {
        inited = WebCore::init_VideoToolbox_VTIsHardwareDecodeSupported(v15);
        WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(void)::loaded = inited;
        if (!inited)
          goto LABEL_13;
      }
      if (WebCore::softLinkVideoToolboxVTIsHardwareDecodeSupported(1987063865))
        goto LABEL_83;
    }
LABEL_13:
    v19 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)this + 2);
    if (v19)
      WebCore::WebCoreDecompressionSession::invalidate(v19, v16, v17);
    v20 = WTF::fastMalloc((WTF *)0x110);
    WebCore::WebCoreDecompressionSession::WebCoreDecompressionSession(v20, 0);
    v22 = (unsigned __int8 **)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v20;
    if (!v22)
    {
LABEL_44:
      v35 = (unsigned __int8 *)*((_QWORD *)this + 2);
      v37 = (PAL *)objc_msgSend(*((id *)this + 1), "timebase");
      v38 = v35 + 12;
      if (__ldaxr(v35 + 12))
      {
        __clrex();
      }
      else if (!__stxr(1u, v38))
      {
        goto LABEL_48;
      }
      MEMORY[0x19AEA534C](v35 + 12);
LABEL_48:
      WebCore::WebCoreDecompressionSession::setTimebaseWithLockHeld((WebCore::WebCoreDecompressionSession *)v35, v37, v36);
      v40 = __ldxr(v38);
      if (v40 == 1)
      {
        if (!__stlxr(0, v38))
        {
LABEL_53:
          WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v59, (WebCore::VideoMediaSampleRenderer *)((char *)this + 80));
          WTF::MachSendRight::operator=();
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v59);
          v41 = *((_QWORD *)this + 2);
          v42 = *(_QWORD *)this;
          if (!*(_QWORD *)this)
          {
            v44 = 0;
            goto LABEL_65;
          }
          if (__ldaxr((unsigned __int8 *)v42))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v42))
          {
            goto LABEL_58;
          }
          MEMORY[0x19AEA534C](v42);
LABEL_58:
          if (*(_QWORD *)(v42 + 24))
          {
            ++*(_QWORD *)(v42 + 16);
            v44 = v42;
          }
          else
          {
            v44 = 0;
          }
          v45 = __ldxr((unsigned __int8 *)v42);
          if (v45 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v42))
            {
LABEL_65:
              v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v46 = &off_1E3350418;
              v46[1] = v44;
              v46[2] = this;
              v47 = *(_QWORD *)(v41 + 80);
              *(_QWORD *)(v41 + 80) = v46;
              if (v47)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
                v48 = *(_QWORD *)(v41 + 80) != 0;
              }
              else
              {
                v48 = 1;
              }
              atomic_store(v48, (unsigned __int8 *)(v41 + 244));
              v49 = *((_QWORD *)this + 2);
              v50 = *(_QWORD *)this;
              if (!*(_QWORD *)this)
              {
                v52 = 0;
                goto LABEL_80;
              }
              if (__ldaxr((unsigned __int8 *)v50))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v50))
              {
LABEL_73:
                if (*(_QWORD *)(v50 + 24))
                {
                  ++*(_QWORD *)(v50 + 16);
                  v52 = v50;
                }
                else
                {
                  v52 = 0;
                }
                v53 = __ldxr((unsigned __int8 *)v50);
                if (v53 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v50))
                    goto LABEL_80;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v50);
LABEL_80:
                v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                *v54 = &off_1E3350440;
                v54[1] = v52;
                v54[2] = this;
                v54[3] = this;
                v55 = *(_QWORD *)(v49 + 216);
                *(_QWORD *)(v49 + 216) = v54;
                if (v55)
                  (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
                WebCore::VideoMediaSampleRenderer::resetReadyForMoreSample(this);
LABEL_83:
                *((_DWORD *)this + 12) = v18;
                *((_BYTE *)this + 52) = 1;
                v8 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)this + 2);
                if (v8)
                  goto LABEL_2;
                return objc_msgSend(*((id *)this + 1), "enqueueSampleBuffer:", a2);
              }
              MEMORY[0x19AEA534C](v50);
              goto LABEL_73;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v42);
          goto LABEL_65;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v35 + 12));
      goto LABEL_53;
    }
    v23 = *v22;
    if (__ldaxr(*v22))
    {
      __clrex();
    }
    else if (!__stxr(1u, v23))
    {
      goto LABEL_32;
    }
    MEMORY[0x19AEA534C](v23);
LABEL_32:
    v28 = *((_QWORD *)v23 + 1);
    v29 = v28 - 1;
    *((_QWORD *)v23 + 1) = v28 - 1;
    if (v28 == 1)
    {
      v56 = *((_QWORD *)v23 + 2);
      v30 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v23 + 3);
      *((_QWORD *)v23 + 3) = 0;
      v31 = v56 != 0;
    }
    else
    {
      v30 = 0;
      v31 = 1;
    }
    v32 = __ldxr(v23);
    if (v32 == 1)
    {
      if (!__stlxr(0, v23))
      {
LABEL_39:
        if (!v29)
        {
          if (v30)
          {
            WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v30);
            WTF::fastFree(v33, v34);
          }
          if (!v31)
            WTF::fastFree((WTF *)v23, v21);
        }
        goto LABEL_44;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    goto LABEL_39;
  }
LABEL_2:
  result = WebCore::WebCoreDecompressionSession::enqueueSample(v8, a2, a3, a4, a5);
  ++*((_DWORD *)this + 10);
  *((_BYTE *)this + 44) |= a3 ^ 1;
  if (*((_BYTE *)this + 45))
    return result;
  *((_BYTE *)this + 45) = 1;
  v10 = *((_QWORD *)this + 2);
  v11 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v25 = 0;
    goto LABEL_27;
  }
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_20:
  if (*(_QWORD *)(v11 + 24))
  {
    ++*(_QWORD *)(v11 + 16);
    v25 = v11;
  }
  else
  {
    v25 = 0;
  }
  v26 = __ldxr((unsigned __int8 *)v11);
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_27:
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v27 = &off_1E33503F0;
  v27[1] = v25;
  v27[2] = this;
  v27[3] = this;
  v58 = (uint64_t)v27;
  WebCore::WebCoreDecompressionSession::requestMediaDataWhenReady(v10, (opaqueCMBufferQueue *)&v58);
  result = v58;
  if (v58)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  return result;
}

void sub_19527D82C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  if (!v9)
LABEL_20:
    _Unwind_Resume(exception_object);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
LABEL_7:
    v12 = *(_QWORD *)(v9 + 16) - 1;
    *(_QWORD *)(v9 + 16) = v12;
    if (v12)
    {
      v15 = __ldxr((unsigned __int8 *)v9);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_20;
    }
    v13 = *(_QWORD *)(v9 + 8);
    v14 = __ldxr((unsigned __int8 *)v9);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
LABEL_13:
        if (!v13)
          WTF::fastFree((WTF *)v9, a2);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v9);
  goto LABEL_7;
}

uint64_t WebCore::WebCoreDecompressionSession::enqueueSample(WebCore::WebCoreDecompressionSession *this, opaqueCMSampleBuffer *a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  opaqueCMSampleBuffer *v12;
  WTF *v13;
  void *v14;
  opaqueCMBufferQueue **v15;
  const void *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  _OWORD v25[4];
  uint64_t v26;
  CMBufferCallbacks var40;

  *(void **)((char *)&var40.refcon + 4) = 0;
  result = PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfoArray(a2, 0, 0, (CMSampleTimingInfo *)((char *)&var40.refcon + 4), a5);
  if (!(_DWORD)result)
  {
    v10 = *(unint64_t *)((char *)&var40.refcon + 4);
    if (*(void **)((char *)&var40.refcon + 4))
    {
      if (*(void **)((char *)&var40.refcon + 4) <= (void *)0x10)
        v10 = 16;
      if (v10 >= 0x38E38E4)
      {
        __break(0xC471u);
        return result;
      }
      v11 = WTF::fastMalloc((WTF *)(72 * v10));
      v12 = *(opaqueCMSampleBuffer **)((char *)&var40.refcon + 4);
      v13 = (WTF *)v11;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    result = PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfoArray(a2, v12, (uint64_t)v13, 0, v9);
    if ((_DWORD)result)
      goto LABEL_27;
    if (!*((_QWORD *)this + 3))
    {
      *(_QWORD *)&var40.version = 0;
      v25[2] = xmmword_1E334F6B0;
      v25[3] = *(_OWORD *)&off_1E334F6C0;
      v26 = 0;
      v25[0] = xmmword_1E334F690;
      v25[1] = *(_OWORD *)&off_1E334F6A0;
      PAL::softLinkCoreMediaCMBufferQueueCreate((PAL *)*MEMORY[0x1E0C9AE00], (const __CFAllocator *)0x78, (uint64_t)v25 + 4, &var40, v15);
      v16 = (const void *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = *(_QWORD *)&var40.version;
      if (v16)
        CFRelease(v16);
    }
    v17 = (unsigned int *)((char *)this + 228);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = *((_QWORD *)this + 5);
    v20 = *(_QWORD *)this;
    if (__ldaxr(*(unsigned __int8 **)this))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v20))
    {
      goto LABEL_18;
    }
    MEMORY[0x19AEA534C](v20);
LABEL_18:
    ++*(_QWORD *)(v20 + 8);
    v22 = __ldxr((unsigned __int8 *)v20);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
        goto LABEL_23;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
LABEL_23:
    if (a2)
      CFRetain(a2);
    v23 = *((unsigned int *)this + 28);
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v24 = off_1E3350500;
    v24[1] = this;
    v24[2] = a2;
    v24[3] = a3 | (unint64_t)(v23 << 32);
    *(_QWORD *)&v25[0] = v24;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v19 + 32))(v19, v25);
    result = *(_QWORD *)&v25[0];
    *(_QWORD *)&v25[0] = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
LABEL_27:
    if (v13)
      return WTF::fastFree(v13, v14);
  }
  return result;
}

void sub_19527DBA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  WTF *v9;

  if (v9)
    WTF::fastFree(v9, a2);
  _Unwind_Resume(exception_object);
}

PAL *WebCore::WebCoreDecompressionSession::requestMediaDataWhenReady(uint64_t a1, opaqueCMBufferQueue *a2)
{
  uint64_t v3;
  PAL *result;
  unsigned __int8 v5;
  unsigned int v6;
  signed int v7;
  unsigned __int8 *v8;
  int v10;
  unsigned __int8 *v11;
  int v13;
  PAL *v14;
  void *v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  WebCore::WebCoreDecompressionSession *v20;
  BOOL v21;
  int v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  PAL *v26;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(PAL **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;
  if (result)
  {
    result = (PAL *)(*(uint64_t (**)(PAL *))(*(_QWORD *)result + 8))(result);
    v3 = *(_QWORD *)(a1 + 64);
  }
  if (v3)
  {
    result = *(PAL **)(a1 + 24);
    if (result)
      result = (PAL *)PAL::softLinkCoreMediaCMBufferQueueGetBufferCount(result, a2);
    v5 = atomic_load((unsigned __int8 *)(a1 + 244));
    if ((v5 & 1) == 0 || (v6 = atomic_load((unsigned int *)(a1 + 228))) == 0)
    {
      v7 = atomic_load((unsigned int *)(a1 + 228));
      if ((uint64_t)result + v7 <= 60)
      {
        v8 = *(unsigned __int8 **)a1;
        if (__ldaxr(*(unsigned __int8 **)a1))
        {
          __clrex();
        }
        else if (!__stxr(1u, v8))
        {
          goto LABEL_13;
        }
        result = (PAL *)MEMORY[0x19AEA534C](v8);
LABEL_13:
        ++*((_QWORD *)v8 + 1);
        v10 = __ldxr(v8);
        if (v10 == 1)
        {
          if (!__stlxr(0, v8))
          {
LABEL_18:
            WTF::RunLoop::main(result);
            v11 = *(unsigned __int8 **)a1;
            if (__ldaxr(*(unsigned __int8 **)a1))
            {
              __clrex();
            }
            else if (!__stxr(1u, v11))
            {
              goto LABEL_22;
            }
            MEMORY[0x19AEA534C](v11);
LABEL_22:
            ++*((_QWORD *)v11 + 1);
            v13 = __ldxr(v11);
            if (v13 == 1)
            {
              if (!__stlxr(0, v11))
              {
LABEL_27:
                v14 = (PAL *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v14 = &off_1E3350550;
                *((_QWORD *)v14 + 1) = a1;
                v26 = v14;
                WTF::RunLoop::dispatch();
                result = v26;
                if (v26)
                  result = (PAL *)(*(uint64_t (**)(PAL *))(*(_QWORD *)v26 + 8))(v26);
                v16 = *(unsigned __int8 **)a1;
                if (__ldaxr(v16))
                {
                  __clrex();
                }
                else if (!__stxr(1u, v16))
                {
                  goto LABEL_33;
                }
                result = (PAL *)MEMORY[0x19AEA534C](v16);
LABEL_33:
                v18 = *((_QWORD *)v16 + 1);
                v19 = v18 - 1;
                *((_QWORD *)v16 + 1) = v18 - 1;
                if (v18 == 1)
                {
                  v25 = *((_QWORD *)v16 + 2);
                  v20 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v16 + 3);
                  *((_QWORD *)v16 + 3) = 0;
                  v21 = v25 != 0;
                }
                else
                {
                  v20 = 0;
                  v21 = 1;
                }
                v22 = __ldxr(v16);
                if (v22 == 1)
                {
                  if (!__stlxr(0, v16))
                  {
                    if (v19)
                      return result;
LABEL_41:
                    if (v20)
                    {
                      WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v20);
                      result = (PAL *)WTF::fastFree(v23, v24);
                    }
                    if (!v21)
                      return (PAL *)WTF::fastFree((WTF *)v16, v15);
                    return result;
                  }
                }
                else
                {
                  __clrex();
                }
                result = (PAL *)WTF::Lock::unlockSlow((WTF::Lock *)v16);
                if (v19)
                  return result;
                goto LABEL_41;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v11);
            goto LABEL_27;
          }
        }
        else
        {
          __clrex();
        }
        result = (PAL *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
        goto LABEL_18;
      }
    }
  }
  return result;
}

void sub_19527DEC8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  WebCore::WebCoreDecompressionSession *v16;
  BOOL v17;
  int v18;
  WTF *v19;
  void *v20;
  uint64_t v21;

  v12 = *v10;
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
LABEL_6:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v21 = *(_QWORD *)(v12 + 16);
      v16 = *(WebCore::WebCoreDecompressionSession **)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v21 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
LABEL_13:
        if (!v15)
        {
          if (v16)
          {
            WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v16);
            WTF::fastFree(v19, v20);
          }
          if (!v17)
            WTF::fastFree((WTF *)v12, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v12);
  goto LABEL_6;
}

void WebCore::WebCoreDecompressionSession::setTimebase(WebCore::WebCoreDecompressionSession *this, PAL *cf, dispatch_source_s *a3)
{
  unsigned __int8 *v5;
  int v7;

  v5 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  WebCore::WebCoreDecompressionSession::setTimebaseWithLockHeld(this, cf, a3);
  v7 = __ldxr(v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v5))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
}

void sub_19527E0B8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::WebCoreDecompressionSession::decodedFrameWhenAvailable(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v3;
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v3 = *(_QWORD *)(a1 + 80);
  }
  atomic_store(v3 != 0, (unsigned __int8 *)(a1 + 244));
  return result;
}

uint64_t WebCore::WebCoreDecompressionSession::setErrorListener(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::VideoMediaSampleRenderer::resetReadyForMoreSample(WebCore::VideoMediaSampleRenderer *this)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  void *v6;
  WTF::Lock *v8;
  int v9;
  uint64_t result;
  void *v11;
  WTF::Lock *v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  _QWORD v23[4];
  WTF::Lock *v24;
  WebCore::VideoMediaSampleRenderer *v25;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v4 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
  {
    ++*(_QWORD *)(v2 + 16);
    v4 = v2;
  }
  else
  {
    v4 = 0;
  }
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_13:
  v6 = (void *)*((_QWORD *)this + 1);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3321888768;
  v23[2] = ___ZN7WebCore24VideoMediaSampleRenderer23resetReadyForMoreSampleEv_block_invoke;
  v23[3] = &__block_descriptor_48_e8_32c67_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore24VideoMediaSampleRendererEEE_e5_v8__0l;
  if (!v4)
  {
    v8 = 0;
    goto LABEL_25;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_18:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v8 = (WTF::Lock *)v4;
  }
  else
  {
    v8 = 0;
  }
  v9 = __ldxr((unsigned __int8 *)v4);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_25:
  v24 = v8;
  v25 = this;
  result = objc_msgSend(v6, "requestMediaDataWhenReadyOnQueue:usingBlock:", MEMORY[0x1E0C80D38], v23);
  v12 = v24;
  v24 = 0;
  if (!v12)
    goto LABEL_38;
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_30;
  }
  result = MEMORY[0x19AEA534C](v12);
LABEL_30:
  v14 = *((_QWORD *)v12 + 2) - 1;
  *((_QWORD *)v12 + 2) = v14;
  if (!v14)
  {
    v15 = *((_QWORD *)v12 + 1);
    v16 = __ldxr((unsigned __int8 *)v12);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
        if (v15)
          goto LABEL_38;
LABEL_37:
        result = WTF::fastFree(v12, v11);
        goto LABEL_38;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow(v12);
    if (v15)
      goto LABEL_38;
    goto LABEL_37;
  }
  v21 = __ldxr((unsigned __int8 *)v12);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_59;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
LABEL_59:
    result = WTF::Lock::unlockSlow(v12);
LABEL_38:
  if (!v4)
    return result;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_43;
  }
  result = MEMORY[0x19AEA534C](v4);
LABEL_43:
  v18 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v18;
  if (!v18)
  {
    v19 = *(_QWORD *)(v4 + 8);
    v20 = __ldxr((unsigned __int8 *)v4);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
        if (v19)
          return result;
        return WTF::fastFree((WTF *)v4, v11);
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v19)
      return result;
    return WTF::fastFree((WTF *)v4, v11);
  }
  v22 = __ldxr((unsigned __int8 *)v4);
  if (v22 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_19527E3F8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::Lock *a13)
{
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
LABEL_6:
    v16 = *(_QWORD *)(v13 + 16) - 1;
    *(_QWORD *)(v13 + 16) = v16;
    if (v16)
    {
      v19 = __ldxr((unsigned __int8 *)v13);
      if (v19 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v13))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_14:
      _Unwind_Resume(exception_object);
    }
    v17 = *(_QWORD *)(v13 + 8);
    v18 = __ldxr((unsigned __int8 *)v13);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
LABEL_12:
        if (!v17)
          WTF::fastFree((WTF *)v13, a2);
        goto LABEL_14;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v13);
  goto LABEL_6;
}

uint64_t WebCore::WebCoreDecompressionSession::flush(WebCore::WebCoreDecompressionSession *this)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  ++*((_DWORD *)this + 28);
  v2 = *((_QWORD *)this + 5);
  v3 = *(_QWORD *)this;
  if (__ldaxr(*(unsigned __int8 **)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_5:
  ++*(_QWORD *)(v3 + 8);
  v5 = __ldxr((unsigned __int8 *)v3);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E3350578;
  v6[1] = this;
  v6[2] = this;
  v8 = (uint64_t)v6;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 24))(v2, &v8);
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19527E620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_19527E844(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  BOOL v9;
  int v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  v4 = *v2;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v13 = *(_QWORD *)(v4 + 16);
      v8 = *(id **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v13 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
          {
            WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v8);
            WTF::fastFree(v11, v12);
          }
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

uint64_t __copy_helper_block_e8_32c67_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore24VideoMediaSampleRendererEEE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 40) = v8;
  return result;
}

uint64_t __destroy_helper_block_e8_32c67_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore24VideoMediaSampleRendererEEE(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  if (!v2)
    return result;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v4;
  if (v4)
  {
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return WTF::fastFree((WTF *)v2, a2);
      return result;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return WTF::fastFree((WTF *)v2, a2);
  return result;
}

uint64_t WebCore::VideoMediaSampleRenderer::expectMinimumUpcomingSampleBufferPresentationTime(WebCore::VideoMediaSampleRenderer *this, const WTF::MediaTime *a2)
{
  uint64_t result;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  int v9;
  double v10;
  _BYTE v11[12];
  unsigned int v12;

  result = objc_msgSend((id)PAL::getAVSampleBufferDisplayLayerClass(this), "instancesRespondToSelector:", sel_expectMinimumUpcomingSampleBufferPresentationTime_);
  if ((_DWORD)result)
  {
    if (*((_DWORD *)this + 10))
    {
      v6 = (_QWORD *)((char *)this + 56);
      if (*((_BYTE *)this + 72))
      {
        v7 = *(_QWORD *)a2;
        *(_QWORD *)((char *)this + 61) = *(_QWORD *)((char *)a2 + 5);
        *v6 = v7;
      }
      else
      {
        *(_OWORD *)v6 = *(_OWORD *)a2;
        *((_BYTE *)this + 72) = 1;
      }
    }
    else
    {
      v8 = (void *)*((_QWORD *)this + 1);
      if ((*((_BYTE *)a2 + 12) & 0x20) != 0)
      {
        WTF::MediaTime::toDouble(a2);
        PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*((unsigned int *)a2 + 2), v10, v9);
      }
      else
      {
        PAL::softLinkCoreMediaCMTimeMake(*(PAL **)a2, *((unsigned int *)a2 + 2), v5);
      }
      v12 = v12 & 0xFFFFFFFE | *((_BYTE *)a2 + 12) & 1 | *((_BYTE *)a2 + 12) & 0xE;
      return objc_msgSend(v8, "expectMinimumUpcomingSampleBufferPresentationTime:", v11);
    }
  }
  return result;
}

uint64_t WebCore::VideoMediaSampleRenderer::resetUpcomingSampleBufferPresentationTimeExpectations(id *this)
{
  uint64_t result;

  result = objc_msgSend((id)PAL::getAVSampleBufferDisplayLayerClass((PAL *)this), "instancesRespondToSelector:", sel_resetUpcomingSampleBufferPresentationTimeExpectations);
  if ((_DWORD)result)
  {
    result = objc_msgSend(this[1], "resetUpcomingSampleBufferPresentationTimeExpectations");
    if (*((_BYTE *)this + 72))
      *((_BYTE *)this + 72) = 0;
  }
  return result;
}

uint64_t WebCore::collectDescendantLayersAtPoint(uint64_t a1, void *a2, uint64_t a3, double a4, double a5)
{
  void *v8;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const double (*v16)[4][4];
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  __int128 v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  float v48;
  float *v49;
  uint64_t v50;
  WTF *v51;
  __int128 v52;
  float *v53;
  float v54;
  float v55;
  void *v56;
  WTF *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  __int128 v69;
  uint64_t v70;
  double v71;
  double v72;
  _QWORD v73[11];
  __int128 v74;
  uint64_t v75;
  double v76;
  double v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  _BYTE v83[128];
  uint64_t v84;
  CGRect v85;

  v8 = a2;
  v84 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend(a2, "masksToBounds")
    || (result = objc_msgSend(v8, "containsPoint:", a4, a5), (_DWORD)result))
  {
    if (!objc_msgSend(v8, "mask") || (result = objc_msgSend(v8, "_web_maskContainsPoint:", a4, a5), (_DWORD)result))
    {
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v11 = (void *)objc_msgSend(v8, "sublayers");
      result = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v78, v83, 16);
      if (result)
      {
        v12 = result;
        v13 = *(_QWORD *)v79;
        v56 = v8;
        v57 = (WTF *)(a1 + 16);
        do
        {
          v14 = 0;
          do
          {
            if (*(_QWORD *)v79 != v13)
              objc_enumerationMutation(v11);
            v15 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * v14);
            v17 = v15;
            if (objc_msgSend((id)objc_msgSend(v15, "animationKeys", v56), "count"))
              v17 = (void *)objc_msgSend(v15, "presentationLayer");
            if (v17)
            {
              objc_msgSend(v17, "transform");
              v18 = v58;
              v19 = v59;
              v21 = v60;
              v20 = v61;
              v23 = v62;
              v22 = v63;
              v25 = v64;
              v24 = v65;
              v27 = v66;
              v26 = v67;
              v28 = v68;
              v29 = v69;
              v31 = v70;
              v30 = v71;
              v32 = v72;
            }
            else
            {
              v29 = 0uLL;
              v32 = 0.0;
              v30 = 0.0;
              v31 = 0;
              v28 = 0.0;
              v26 = 0.0;
              v27 = 0.0;
              v24 = 0.0;
              v25 = 0.0;
              v22 = 0.0;
              v23 = 0.0;
              v20 = 0.0;
              v21 = 0.0;
              v19 = 0.0;
              v18 = 0.0;
            }
            *(double *)v73 = v18;
            *(double *)&v73[1] = v19;
            *(double *)&v73[2] = v21;
            *(double *)&v73[3] = v20;
            *(double *)&v73[4] = v23;
            *(double *)&v73[5] = v22;
            *(double *)&v73[6] = v25;
            *(double *)&v73[7] = v24;
            *(double *)&v73[8] = v27;
            *(double *)&v73[9] = v26;
            *(double *)&v73[10] = v28;
            v74 = v29;
            v75 = v31;
            v76 = v30;
            v77 = v32;
            if (v21 != 0.0
              || v20 != 0.0
              || v25 != 0.0
              || v24 != 0.0
              || *(double *)&v29 != 0.0
              || v27 != 0.0
              || v26 != 0.0
              || v28 != 1.0
              || v32 != 1.0)
            {
              goto LABEL_63;
            }
            if (v19 != 0.0 || v23 != 0.0 || v18 != 1.0 || v22 != 1.0)
            {
              if (v30 == 0.0)
                v33 = v18 * v22 - v19 * v23;
              else
LABEL_63:
                v33 = WebCore::determinant4x4((WebCore *)v73, v16);
              if (((*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
                goto LABEL_61;
            }
            objc_msgSend(v17, "convertPoint:fromLayer:", v8, a4, a5);
            v35 = v34;
            v37 = v36;
            objc_msgSend(v17, "frame");
            if (!CGRectIsEmpty(v85))
            {
              if (objc_msgSend(v17, "containsPoint:", v35, v37))
              {
                result = *(_QWORD *)(a3 + 24);
                if (!result
                  || (v58 = v35,
                      v59 = v37,
                      v82 = v15,
                      result = (*(uint64_t (**)(uint64_t, void **, double *))(*(_QWORD *)result + 48))(result, &v82, &v58), (_DWORD)result))
                {
                  v39 = *(unsigned int *)(a1 + 12);
                  if ((_DWORD)v39 == *(_DWORD *)(a1 + 8))
                  {
                    v40 = v11;
                    v41 = a3;
                    v42 = v39 + (v39 >> 2);
                    if (v42 >= 0x10)
                      v43 = v42 + 1;
                    else
                      v43 = 16;
                    if (v43 <= v39 + 1)
                      v44 = v39 + 1;
                    else
                      v44 = v43;
                    v45 = *(WTF **)a1;
                    if (v44 < 0x11)
                    {
                      v46 = (WTF *)(a1 + 16);
                      *(_QWORD *)a1 = v57;
                      *(_DWORD *)(a1 + 8) = 16;
                    }
                    else
                    {
                      if (v44 >> 28)
                      {
                        __break(0xC471u);
                        return result;
                      }
                      v46 = (WTF *)WTF::fastMalloc((WTF *)(16 * v44));
                      *(_DWORD *)(a1 + 8) = v44;
                      *(_QWORD *)a1 = v46;
                    }
                    a3 = v41;
                    if ((_DWORD)v39)
                    {
                      v50 = 16 * v39;
                      v51 = v45;
                      v11 = v40;
                      do
                      {
                        v52 = *(_OWORD *)v51;
                        v51 = (WTF *)((char *)v51 + 16);
                        *(_OWORD *)v46 = v52;
                        v46 = (WTF *)((char *)v46 + 16);
                        v50 -= 16;
                      }
                      while (v50);
                      v46 = *(WTF **)a1;
                    }
                    else
                    {
                      v11 = v40;
                    }
                    v8 = v56;
                    if (v57 != v45 && v45)
                    {
                      if (v46 == v45)
                      {
                        *(_QWORD *)a1 = 0;
                        *(_DWORD *)(a1 + 8) = 0;
                      }
                      WTF::fastFree(v45, v38);
                      v46 = *(WTF **)a1;
                    }
                    v39 = *(unsigned int *)(a1 + 12);
                    v53 = (float *)((char *)v46 + 16 * v39);
                    *(_QWORD *)v53 = v15;
                    v54 = v35;
                    v53[2] = v54;
                    v49 = v53 + 3;
                  }
                  else
                  {
                    v47 = *(_QWORD *)a1 + 16 * v39;
                    *(_QWORD *)v47 = v15;
                    v48 = v35;
                    *(float *)(v47 + 8) = v48;
                    v49 = (float *)(v47 + 12);
                  }
                  v55 = v37;
                  *v49 = v55;
                  *(_DWORD *)(a1 + 12) = v39 + 1;
                }
              }
            }
            if (objc_msgSend(v15, "sublayers"))
              WebCore::collectDescendantLayersAtPoint(a1, v15, a3, v35, v37);
LABEL_61:
            ++v14;
          }
          while (v14 != v12);
          result = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v78, v83, 16);
          v12 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

_QWORD *WebCore::layersAtPointToCheckForScrolling@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, float *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  float v11;
  float v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a6 = a6 + 16;
  *(_QWORD *)(a6 + 8) = 16;
  v11 = *a4;
  v12 = a4[1];
  v13 = operator new(0x20uLL);
  *v13 = &off_1E3350468;
  v13[1] = a1;
  v13[2] = a2;
  v13[3] = a5;
  v27 = v13;
  WebCore::collectDescendantLayersAtPoint(a6, a3, (uint64_t)v26, v11, v12);
  result = v27;
  if (v27 == v26)
  {
    v15 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v15 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
LABEL_6:
  LODWORD(v16) = *(_DWORD *)(a6 + 12);
  if (v16 >= 2)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    do
    {
      if (v19 >= v16 || (v20 = v16, v21 = v18 + (v16 - 1), v21 >= v20))
      {
        __break(0xC471u);
        JUMPOUT(0x19527F5D4);
      }
      v22 = (uint64_t *)(*(_QWORD *)a6 + v17);
      v23 = (uint64_t *)(*(_QWORD *)a6 + 16 * v21);
      v24 = *v22;
      *v22 = *v23;
      *v23 = v24;
      v25 = v22[1];
      v22[1] = v23[1];
      v23[1] = v25;
      ++v19;
      v16 = *(unsigned int *)(a6 + 12);
      --v18;
      v17 += 16;
    }
    while (v19 < v16 >> 1);
  }
  return result;
}

void sub_19527F5E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  WTF *v19;

  v17 = a13;
  if (a13 == v14)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  v19 = *(WTF **)v13;
  if (v15 != *(_QWORD *)v13 && v19 != 0)
  {
    *(_QWORD *)v13 = 0;
    *(_DWORD *)(v13 + 8) = 0;
    WTF::fastFree(v19, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::WebCoreDecompressionSession::WebCoreDecompressionSession(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_19689B170;
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  WTF::WorkQueue::create();
  WTF::WorkQueue::create();
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 116) = 1;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 224) = 256;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_DWORD *)(a1 + 256) = 10000000;
  *(_BYTE *)(a1 + 260) = 1;
  *(_DWORD *)(a1 + 264) = 0;
  return a1;
}

void sub_19527F73C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t *v2;
  const void **v3;
  uint64_t *v4;
  uint64_t v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v4 = v2;
  v6 = *v4;
  *v4 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  v7 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *v3;
  *v3 = 0;
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(exception_object);
}

void WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(WebCore::WebCoreDecompressionSession *this)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  unint64_t v5;
  unint64_t v6;
  WTF *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  const void *v13;
  const void **v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  const void *v27;

  WTF::MachSendRight::~MachSendRight((WebCore::WebCoreDecompressionSession *)((char *)this + 264));
  v3 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (const void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 20);
  v6 = *((_QWORD *)this + 21);
  v7 = (WTF *)*((_QWORD *)this + 22);
  if (v5 <= v6)
  {
    if (v5 == v6)
      goto LABEL_24;
    v14 = (const void **)((char *)v7 + 16 * v5);
    v15 = 16 * v6 - 16 * v5;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
        CFRelease(v16);
      v14 += 2;
      v15 -= 16;
    }
    while (v15);
  }
  else
  {
    if (v6)
    {
      v8 = 16 * v6;
      do
      {
        v9 = *(const void **)v7;
        *(_QWORD *)v7 = 0;
        if (v9)
          CFRelease(v9);
        v7 = (WTF *)((char *)v7 + 16);
        v8 -= 16;
      }
      while (v8);
      v7 = (WTF *)*((_QWORD *)this + 22);
      v5 = *((_QWORD *)this + 20);
    }
    v10 = *((unsigned int *)this + 46);
    if (v5 != v10)
    {
      v11 = (const void **)((char *)v7 + 16 * v5);
      v12 = 16 * v10 - 16 * v5;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
          CFRelease(v13);
        v11 += 2;
        v12 -= 16;
      }
      while (v12);
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 22);
LABEL_24:
  if (v7)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v7, v2);
  }
  v17 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v18)
    CFRelease(v18);
  v19 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = (void *)*((_QWORD *)this + 7);
  if (v22)

  v23 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23);
  v24 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 56))(v24);
  v25 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v25)
    CFRelease(v25);
  v26 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v26)
    CFRelease(v26);
  v27 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v27)
    CFRelease(v27);
}

void WebCore::WebCoreDecompressionSession::setTimebaseWithLockHeld(WebCore::WebCoreDecompressionSession *this, PAL *cf, dispatch_source_s *a3)
{
  PAL *v4;
  PAL *v5;
  const void *v6;
  OpaqueCMTimebase *v7;
  NSObject *v8;
  void *v9;
  _QWORD handler[5];

  v4 = (PAL *)*((_QWORD *)this + 4);
  if (v4 != cf)
  {
    v5 = cf;
    if (v4)
      PAL::softLinkCoreMediaCMTimebaseRemoveTimerDispatchSource(v4, *((OpaqueCMTimebase **)this + 7), a3);
    if (v5)
      CFRetain(v5);
    v6 = (const void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v5;
    if (v6)
    {
      CFRelease(v6);
      v5 = (PAL *)*((_QWORD *)this + 4);
    }
    if (v5)
    {
      v7 = (OpaqueCMTimebase *)*((_QWORD *)this + 7);
      if (!v7)
      {
        v8 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
        v9 = (void *)*((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v8;
        if (v9)
        {

          v8 = *((_QWORD *)this + 7);
        }
        handler[0] = MEMORY[0x1E0C809B0];
        handler[1] = 3321888768;
        handler[2] = ___ZN7WebCore27WebCoreDecompressionSession23setTimebaseWithLockHeldEP16OpaqueCMTimebase_block_invoke;
        handler[3] = &__block_descriptor_40_e8_32c94_ZTSKZN7WebCore27WebCoreDecompressionSession23setTimebaseWithLockHeldEP16OpaqueCMTimebaseE3__0_e5_v8__0l;
        handler[4] = this;
        dispatch_source_set_event_handler(v8, handler);
        dispatch_activate(*((dispatch_object_t *)this + 7));
        v5 = (PAL *)*((_QWORD *)this + 4);
        v7 = (OpaqueCMTimebase *)*((_QWORD *)this + 7);
      }
      PAL::softLinkCoreMediaCMTimebaseAddTimerDispatchSource[0](v5, v7, a3);
    }
  }
}

uint64_t WebCore::WebCoreDecompressionSession::removeErrorListener(WebCore::WebCoreDecompressionSession *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZN7WebCore27WebCoreDecompressionSession23setTimebaseWithLockHeldEP16OpaqueCMTimebase_block_invoke(uint64_t a1, OpaqueCMTimebase *a2)
{
  WebCore::WebCoreDecompressionSession::automaticDequeue(*(WebCore::WebCoreDecompressionSession **)(a1 + 32), a2);
}

uint64_t __copy_helper_block_e8_32c94_ZTSKZN7WebCore27WebCoreDecompressionSession23setTimebaseWithLockHeldEP16OpaqueCMTimebaseE3__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

CFTypeRef WebCore::WebCoreDecompressionSession::timebase@<X0>(WebCore::WebCoreDecompressionSession *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *v4;
  CFTypeRef result;
  int v7;

  v4 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  result = (CFTypeRef)*((_QWORD *)this + 4);
  *a2 = result;
  if (result)
    result = CFRetain(result);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (CFTypeRef)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (CFTypeRef)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_19527FB50(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

PAL *WebCore::WebCoreDecompressionSession::maybeBecomeReadyForMoreMediaData(WebCore::WebCoreDecompressionSession *this, opaqueCMBufferQueue *a2)
{
  PAL *result;
  unsigned __int8 v4;
  unsigned int v5;
  signed int v6;
  uint64_t v7;
  int v9;
  PAL *v10;
  PAL *v11;

  result = (PAL *)*((_QWORD *)this + 3);
  if (result)
    result = (PAL *)PAL::softLinkCoreMediaCMBufferQueueGetBufferCount(result, a2);
  v4 = atomic_load((unsigned __int8 *)this + 244);
  if ((v4 & 1) == 0 || (v5 = atomic_load((unsigned int *)this + 57)) == 0)
  {
    v6 = atomic_load((unsigned int *)this + 57);
    if ((uint64_t)result + v6 <= 60)
    {
      v7 = *(_QWORD *)this;
      if (__ldaxr(*(unsigned __int8 **)this))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v7))
      {
        goto LABEL_10;
      }
      MEMORY[0x19AEA534C](v7);
LABEL_10:
      ++*(_QWORD *)(v7 + 8);
      v9 = __ldxr((unsigned __int8 *)v7);
      if (v9 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
        {
LABEL_15:
          v10 = (PAL *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v10 = off_1E33504D8;
          *((_QWORD *)v10 + 1) = this;
          *((_QWORD *)v10 + 2) = this;
          v11 = v10;
          WTF::ensureOnMainThread();
          result = v11;
          if (v11)
            return (PAL *)(*(uint64_t (**)(PAL *))(*(_QWORD *)v11 + 8))(v11);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      goto LABEL_15;
    }
  }
  return result;
}

void sub_19527FC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::WebCoreDecompressionSession::getDecodeTime(PAL *cf, const void *a2, void *a3)
{
  PAL *v4;
  uint64_t result;

  if (!cf)
    return PAL::softLinkCoreMediaCMSampleBufferGetDecodeTimeStamp[0](cf, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetDecodeTimeStamp[0]);
  v4 = (PAL *)CFGetTypeID(cf);
  if (v4 == (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID(v4))
    return PAL::softLinkCoreMediaCMSampleBufferGetDecodeTimeStamp[0](cf, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetDecodeTimeStamp[0]);
  result = 71;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::WebCoreDecompressionSession::getPresentationTime(PAL *cf, const void *a2, void *a3)
{
  PAL *v4;
  uint64_t result;

  if (!cf)
    return PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](cf, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0]);
  v4 = (PAL *)CFGetTypeID(cf);
  if (v4 == (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID(v4))
    return PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](cf, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0]);
  result = 71;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::WebCoreDecompressionSession::getDuration(PAL *cf, const void *a2, void *a3)
{
  PAL *v4;
  uint64_t result;

  if (!cf)
    return PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](cf, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetDuration[0]);
  v4 = (PAL *)CFGetTypeID(cf);
  if (v4 == (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID(v4))
    return PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](cf, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetDuration[0]);
  result = 71;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::WebCoreDecompressionSession::compareBuffers(void *cf, opaqueCMSampleBuffer *a2, const void *a3, void *a4)
{
  PAL *v6;
  opaqueCMSampleBuffer *v7;
  PAL *v8;
  CMTime *v9;
  CMTime v11;
  __int128 v12;
  uint64_t v13;
  CMTime v14;
  __int128 v15;
  uint64_t v16;

  if (cf && (v6 = (PAL *)CFGetTypeID(cf), v6 != (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID(v6))
    || (PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0]((PAL *)cf, a2), a2)
    && (v8 = (PAL *)CFGetTypeID(a2), v8 != (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID(v8)))
  {
    __break(0xC471u);
    JUMPOUT(0x19527FFD8);
  }
  PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](a2, v7);
  v15 = v12;
  v16 = v13;
  v14 = v11;
  return (int)PAL::softLinkCoreMediaCMTimeCompare((PAL *)&v15, &v14, v9);
}

BOOL WebCore::WebCoreDecompressionSession::shouldDecodeSample(WebCore::WebCoreDecompressionSession *this, opaqueCMSampleBuffer *a2, int a3)
{
  unsigned __int8 *v5;
  void *v7;
  int v8;
  opaqueCMSampleBuffer *v9;
  opaqueCMSampleBuffer *v10;
  CMTime *v11;
  CMTime *v12;
  unsigned __int8 v13;
  BOOL v14;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v17;
  CFIndex Count;
  CFIndex v19;
  const void *v20;
  const __CFDictionary *ValueAtIndex;
  CMTime v22;
  __int128 v23;
  uint64_t v24;

  if (!a3)
    return 1;
  v5 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_6:
  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
    CFRetain(v7);
  v8 = __ldxr(v5);
  if (v8 == 1)
  {
    if (!__stlxr(0, v5))
    {
      if (v7)
        goto LABEL_11;
      return 1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v7)
    return 1;
LABEL_11:
  PAL::softLinkCoreMediaCMTimebaseGetTime[0]((PAL *)v7, a2);
  PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](a2, v9);
  PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](a2, v10);
  v23 = 0uLL;
  v24 = 0;
  memset(&v22, 0, sizeof(v22));
  PAL::softLinkCoreMediaCMTimeAdd[0]((PAL *)&v23, &v22, v11);
  v23 = 0uLL;
  v24 = 0;
  memset(&v22, 0, sizeof(v22));
  if ((PAL::softLinkCoreMediaCMTimeCompare((PAL *)&v23, &v22, v12) & 0x80000000) != 0
    && (SampleAttachmentsArray = (const __CFArray *)PAL::softLinkCoreMediaCMSampleBufferGetSampleAttachmentsArray(a2, 0, v13), (v17 = SampleAttachmentsArray) != 0)&& (Count = CFArrayGetCount(SampleAttachmentsArray), Count >= 1))
  {
    v14 = 0;
    v19 = 0;
    v20 = (const void *)*MEMORY[0x1E0C9AE40];
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v19);
      if (PAL::get_CoreMedia_kCMSampleAttachmentKey_IsDependedOnByOthers(void)::once != -1)
        dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_IsDependedOnByOthers(void)::once, &__block_literal_global_168);
      if (CFDictionaryGetValue(ValueAtIndex, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_IsDependedOnByOthers(void)::constantCoreMediakCMSampleAttachmentKey_IsDependedOnByOthers) == v20)break;
      v14 = ++v19 >= Count;
    }
    while (Count != v19);
  }
  else
  {
    v14 = 1;
  }
  CFRelease(v7);
  return v14;
}

void sub_195280254(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::WebCoreDecompressionSession::assignResourceOwner(WebCore::WebCoreDecompressionSession *this, void *cf)
{
  WebCore *v4;
  __CVBuffer *v5;
  uint64_t IOSurface;

  if (cf)
  {
    if (*((_DWORD *)this + 66))
    {
      v4 = (WebCore *)CFGetTypeID(cf);
      if (v4 == (WebCore *)WebCore::softLinkCoreVideoCVPixelBufferGetTypeID(v4))
      {
        IOSurface = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface((WebCore *)cf, v5);
        if (IOSurface)
          WebCore::IOSurface::setOwnershipIdentity(IOSurface, (int *)this + 66);
      }
    }
  }
}

unsigned __int8 *WebCore::WebCoreDecompressionSession::ensureDecompressionSessionForSample@<X0>(unsigned __int8 *this@<X0>, opaqueCMSampleBuffer *a2@<X1>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 v8;
  int v9;
  const opaqueCMFormatDescription *v10;
  OpaqueVTDecompressionSession *FormatDescription;
  WebCore *v12;
  OpaqueVTDecompressionSession *v13;
  const void *v14;
  void *v15;
  unsigned __int8 v16;
  const opaqueCMFormatDescription *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  void **p_decompressionOutputRefCon;
  uint64_t *v22;
  uint64_t v23;
  const __CFDictionary *v24;
  const __CFString *v25;
  OpaqueVTDecompressionSession **v26;
  void *v27;
  int v28;
  WebCore *decompressionOutputCallback;
  const __CFArray *v30;
  const void *v31;
  const void *ValueAtIndex;
  const __CFDictionary *v33;
  const __CFArray *v34;
  VTDecompressionOutputCallbackRecord v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];

  v4 = this;
  v41[1] = *MEMORY[0x1E0C80C00];
  v6 = this + 12;
  if (__ldaxr(this + 12))
  {
    __clrex();
LABEL_4:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](this + 12);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  v8 = atomic_load(v4 + 224);
  if ((v8 & 1) != 0 || *((_QWORD *)v4 + 15))
  {
    *a3 = 0;
    goto LABEL_8;
  }
  FormatDescription = (OpaqueVTDecompressionSession *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(a2, a2);
  v12 = (WebCore *)*((_QWORD *)v4 + 2);
  if (v12)
  {
    if (!WebCore::softLinkVideoToolboxVTDecompressionSessionCanAcceptFormatDescription(v12, FormatDescription, v10))
    {
      WebCore::softLinkVideoToolboxVTDecompressionSessionWaitForAsynchronousFrames(*((WebCore **)v4 + 2), v13);
      v14 = (const void *)*((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 2) = 0;
      if (!v14)
        goto LABEL_19;
      CFRelease(v14);
    }
    this = (unsigned __int8 *)*((_QWORD *)v4 + 2);
    if (this)
    {
      *a3 = this;
LABEL_43:
      this = (unsigned __int8 *)CFRetain(this);
      goto LABEL_8;
    }
  }
LABEL_19:
  if (WebCore::get_VideoToolbox_kVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder(void)::once != -1)
    dispatch_once(&WebCore::get_VideoToolbox_kVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder(void)::once, &__block_literal_global_12_14);
  v40 = WebCore::get_VideoToolbox_kVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder(void)::constantVideoToolboxkVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder;
  v15 = (void *)MEMORY[0x1E0CB37E8];
  v16 = atomic_load(v4 + 225);
  v41[0] = objc_msgSend(v15, "numberWithBool:", v16 & 1);
  v17 = (const opaqueCMFormatDescription *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, &v40, 1);
  v18 = &qword_1EE2F8000;
  v19 = &qword_1EE2F8000;
  v20 = MEMORY[0x1E0C9AA70];
  if (*((_DWORD *)v4 + 2))
  {
    if (WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once != -1)
    {
      dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once, &__block_literal_global_13_3);
      v18 = &qword_1EE2F8000;
      v19 = &qword_1EE2F8000;
      v20 = MEMORY[0x1E0C9AA70];
    }
    v35.decompressionOutputRefCon = (void *)WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::constantCoreVideokCVPixelBufferPixelFormatTypeKey;
    v37[0] = &unk_1E349D810;
    if (v18[241] != -1)
    {
      dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferIOSurfacePropertiesKey(void)::once, &__block_literal_global_37_1);
      v19 = &qword_1EE2F8000;
      v20 = MEMORY[0x1E0C9AA70];
    }
    v36 = v19[240];
    v37[1] = v20;
    p_decompressionOutputRefCon = &v35.decompressionOutputRefCon;
    v22 = v37;
    v23 = 2;
  }
  else
  {
    if (WebCore::get_CoreVideo_kCVPixelBufferIOSurfacePropertiesKey(void)::once != -1)
    {
      dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferIOSurfacePropertiesKey(void)::once, &__block_literal_global_37_1);
      v19 = &qword_1EE2F8000;
      v20 = MEMORY[0x1E0C9AA70];
    }
    v38 = v19[240];
    v39 = v20;
    p_decompressionOutputRefCon = (void **)&v38;
    v22 = &v39;
    v23 = 1;
  }
  v24 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, p_decompressionOutputRefCon, v23);
  v35.decompressionOutputCallback = 0;
  v25 = (const __CFString *)*MEMORY[0x1E0C9AE00];
  v28 = WebCore::softLinkVideoToolboxVTDecompressionSessionCreate((WebCore *)*MEMORY[0x1E0C9AE00], FormatDescription, v17, v24, 0, &v35, v26);
  this = (unsigned __int8 *)*((_QWORD *)v4 + 2);
  if (!v28)
  {
    decompressionOutputCallback = (WebCore *)v35.decompressionOutputCallback;
    *((_QWORD *)v4 + 2) = v35.decompressionOutputCallback;
    if (this)
    {
      CFRelease(this);
      decompressionOutputCallback = (WebCore *)v35.decompressionOutputCallback;
    }
    v34 = 0;
    if (WebCore::get_VideoToolbox_kVTDecompressionPropertyKey_SuggestedQualityOfServiceTiers(void)::once != -1)
      dispatch_once(&WebCore::get_VideoToolbox_kVTDecompressionPropertyKey_SuggestedQualityOfServiceTiers(void)::once, &__block_literal_global_21_1);
    WebCore::softLinkVideoToolboxVTSessionCopyProperty(decompressionOutputCallback, (const void *)WebCore::get_VideoToolbox_kVTDecompressionPropertyKey_SuggestedQualityOfServiceTiers(void)::constantVideoToolboxkVTDecompressionPropertyKey_SuggestedQualityOfServiceTiers, v25, (const __CFAllocator *)&v34, v27);
    v30 = v34;
    v31 = (const void *)*((_QWORD *)v4 + 11);
    *((_QWORD *)v4 + 11) = v34;
    if (v31)
    {
      CFRelease(v31);
      v30 = (const __CFArray *)*((_QWORD *)v4 + 11);
    }
    *((_DWORD *)v4 + 24) = 0;
    if (v30 && *((_QWORD *)v4 + 2) && CFArrayGetCount(v30) >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v4 + 11), *((int *)v4 + 24));
      WebCore::softLinkVideoToolboxVTSessionSetProperties(*((WebCore **)v4 + 2), ValueAtIndex, v33);
      atomic_store(0, (unsigned int *)v4 + 25);
    }
    atomic_store(0, v4 + 116);
    this = (unsigned __int8 *)*((_QWORD *)v4 + 2);
  }
  *a3 = this;
  if (this)
    goto LABEL_43;
LABEL_8:
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return this;
}

void sub_1952806E4(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

const __CFArray *WebCore::WebCoreDecompressionSession::resetQosTier(WebCore::WebCoreDecompressionSession *this)
{
  const __CFArray *result;
  const __CFArray *v3;
  const void *ValueAtIndex;
  const __CFDictionary *v5;

  result = (const __CFArray *)*((_QWORD *)this + 11);
  if (result)
  {
    if (*((_QWORD *)this + 2))
    {
      v3 = (const __CFArray *)*((unsigned int *)this + 24);
      if ((v3 & 0x80000000) == 0)
      {
        result = (const __CFArray *)CFArrayGetCount(result);
        if ((uint64_t)result > (uint64_t)v3)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)this + 11), *((int *)this + 24));
          result = (const __CFArray *)WebCore::softLinkVideoToolboxVTSessionSetProperties(*((WebCore **)this + 2), ValueAtIndex, v5);
          atomic_store(0, (unsigned int *)this + 25);
        }
      }
    }
  }
  return result;
}

void WebCore::WebCoreDecompressionSession::enqueueCompressedSample(WebCore::WebCoreDecompressionSession *this, CFTypeRef cf, char a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *((_QWORD *)this + 20);
  v9 = *((_QWORD *)this + 21);
  v8 = (uint64_t *)((char *)this + 160);
  if (v10)
  {
    if (v9 + 1 != v10)
      goto LABEL_10;
    goto LABEL_9;
  }
  v11 = *((unsigned int *)this + 46);
  if (!v9)
  {
    if ((_DWORD)v11)
    {
      v9 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v9 == v11 - 1)
  {
LABEL_9:
    WTF::Deque<std::tuple<WTF::RetainPtr<opaqueCMSampleBuffer *>,BOOL,unsigned int>,0ul>::expandCapacity(v8);
    v9 = *((_QWORD *)this + 21);
  }
LABEL_10:
  v12 = *((_QWORD *)this + 22) + 16 * v9;
  *(_QWORD *)v12 = cf;
  if (cf)
  {
    CFRetain(cf);
    v9 = *((_QWORD *)this + 21);
  }
  *(_BYTE *)(v12 + 8) = a3;
  *(_DWORD *)(v12 + 12) = a4;
  if (v9 == *((unsigned int *)this + 46) - 1)
    v13 = 0;
  else
    v13 = v9 + 1;
  *((_QWORD *)this + 21) = v13;
  WebCore::WebCoreDecompressionSession::maybeDecodeNextSample(this);
}

void WebCore::WebCoreDecompressionSession::maybeDecodeNextSample(WebCore::WebCoreDecompressionSession *this)
{
  uint64_t v1;
  uint64_t v3;
  opaqueCMSampleBuffer *v4;
  int v5;
  int v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  WTF::NativePromiseBase *v24;
  _BYTE *v25;
  _BYTE *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  WTF::Logger *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::Logger *v57;
  WTF::NativePromiseBase *v58;
  uint64_t v59;
  WTF::StringImpl **v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  char **v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  WTF::Lock *v77;
  int v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  opaqueCMSampleBuffer *v95;
  uint64_t v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  unsigned int *v99;
  __int128 v100;
  const char *v101;
  uint64_t v102;
  WTF::NativePromiseBase *v103;
  WTF::Lock *v104;
  char v105;
  WTF::Logger *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  __int128 buf;
  int v123;
  WTF::StringImpl *v124;
  int v125;
  WTF::StringImpl *v126;
  int v127;
  WTF::StringImpl *v128;
  int v129;
  WTF::StringImpl *v130;
  int v131;
  WTF::StringImpl *v132;
  int v133;
  WTF::StringImpl *v134;
  int v135;
  _QWORD v136[3];

  v136[1] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 20);
  if (v1 == *((_QWORD *)this + 21) || *((_BYTE *)this + 192))
    return;
  *((_BYTE *)this + 192) = 1;
  v3 = *((_QWORD *)this + 22) + 16 * v1;
  v4 = *(opaqueCMSampleBuffer **)v3;
  *(_QWORD *)v3 = 0;
  v5 = *(unsigned __int8 *)(v3 + 8);
  v6 = *(_DWORD *)(v3 + 12);
  v7 = *((_QWORD *)this + 22);
  v8 = *(const void **)(v7 + 16 * v1);
  *(_QWORD *)(v7 + 16 * v1) = 0;
  if (v8)
  {
    CFRelease(v8);
    v1 = *((_QWORD *)this + 20);
  }
  if (v1 == *((unsigned int *)this + 46) - 1)
    v9 = 0;
  else
    v9 = v1 + 1;
  *((_QWORD *)this + 20) = v9;
  WebCore::WebCoreDecompressionSession::decodeSample(this, v4, v5 != 0, &v97);
  v10 = v97;
  v11 = *((_QWORD *)this + 5);
  v12 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v14 = 0;
    goto LABEL_20;
  }
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
LABEL_12:
    MEMORY[0x19AEA534C](v12);
    goto LABEL_13;
  }
  if (__stxr(1u, (unsigned __int8 *)v12))
    goto LABEL_12;
LABEL_13:
  if (*(_QWORD *)(v12 + 24))
  {
    ++*(_QWORD *)(v12 + 16);
    v14 = v12;
  }
  else
  {
    v14 = 0;
  }
  v15 = __ldxr((unsigned __int8 *)v12);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_20;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_20:
  v16 = WTF::fastMalloc((WTF *)0x50);
  v18 = *(_QWORD *)(v11 + 32);
  v17 = v11 + 32;
  (*(void (**)(uint64_t))(v18 + 32))(v17);
  v19 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v19 = &off_1E334F788;
  *(_QWORD *)(v19 + 8) = v14;
  *(_QWORD *)(v19 + 16) = this;
  *(_QWORD *)(v19 + 24) = this;
  *(_DWORD *)(v19 + 32) = v6;
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = v17;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = "maybeDecodeNextSample";
  *(_QWORD *)(v16 + 48) = 0;
  *(_WORD *)(v16 + 56) = 0;
  *(_QWORD *)v16 = &off_1E334F828;
  v20 = (unsigned int *)(v10 + 8);
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 72) = v19;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  v100 = 0uLL;
  v101 = "maybeDecodeNextSample";
  v102 = 0;
  v98 = v10;
  v99 = 0;
  v22 = v10 + 48;
  v103 = (WTF::NativePromiseBase *)v16;
  v104 = (WTF::Lock *)(v10 + 48);
  v105 = 1;
  if (__ldaxr(v10 + 48))
  {
    __clrex();
LABEL_25:
    v22 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_26;
  }
  if (__stxr(1u, v22))
    goto LABEL_25;
LABEL_26:
  v10[120] = 1;
  v24 = v103;
  v25 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v22);
  v26 = v25;
  if (!*v25 || v25[16] < 4u)
    goto LABEL_138;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v100);
  WTF::String::String((WTF::String *)&v113, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v112, (uint64_t)v10);
  WTF::String::String((WTF::String *)&v111, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v109, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v27 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v108, "]");
  v106 = v113;
  v121 = v112;
  *(_QWORD *)&buf = v114;
  v119 = v110;
  v120 = v111;
  v118 = v109;
  v116 = v108;
  v117 = v27;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v106, (uint64_t *)&v121, (uint64_t *)&v120, (uint64_t *)&v119, (uint64_t *)&v118, (uint64_t *)&v117, (uint64_t *)&v116, &v115);
  if (!v115)
  {
    __break(0xC471u);
    return;
  }
  v29 = v108;
  v108 = 0;
  if (!v29)
  {
LABEL_32:
    if (v27)
      goto LABEL_33;
    goto LABEL_35;
  }
  if (*(_DWORD *)v29 != 2)
  {
    *(_DWORD *)v29 -= 2;
    goto LABEL_32;
  }
  WTF::StringImpl::destroy(v29, v28);
  if (v27)
  {
LABEL_33:
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v28);
    else
      *(_DWORD *)v27 -= 2;
  }
LABEL_35:
  v30 = v109;
  v109 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v110;
  v110 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v28);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v111;
  v111 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v28);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v112;
  v112 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v28);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v113;
  v113 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v28);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v114;
  v114 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v28);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = *((_QWORD *)v26 + 4);
  v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v37)
  {
    WTF::String::utf8();
    v39 = v106 ? (char *)v106 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v39;
    _os_log_impl(&dword_1940B8000, v36, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v37 = (uint64_t)v106;
    v106 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 1)
        v37 = WTF::fastFree((WTF *)v37, v38);
      else
        --*(_DWORD *)v37;
    }
  }
  if (*v26 && v26[16] >= 4u)
  {
    v40 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v41 = *v40;
      if ((v41 & 1) != 0)
        break;
      v42 = __ldaxr(v40);
      if (v42 == v41)
      {
        if (!__stxr(v41 | 1, v40))
        {
          v95 = v4;
          v43 = WTF::Logger::observers((WTF::Logger *)v37);
          v44 = *(unsigned int *)(v43 + 12);
          if ((_DWORD)v44)
          {
            v45 = *(uint64_t **)v43;
            v96 = *(_QWORD *)v43 + 8 * v44;
            do
            {
              v46 = *v45;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v100);
              v123 = 0;
              WTF::String::String((WTF::String *)&v124, " invoking maybeSettle() [");
              v125 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v126, (uint64_t)v10);
              v127 = 0;
              WTF::String::String((WTF::String *)&v128, " callback:");
              v129 = 0;
              WTF::LogArgument<void const*>::toString();
              v131 = 0;
              WTF::String::String((WTF::String *)&v132, " isNothing:");
              v133 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v134 = v121;
              v135 = 0;
              WTF::String::String((WTF::String *)v136, "]");
              v106 = 0;
              v107 = 0;
              v47 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v107) = 8;
              v106 = v47;
              v48 = HIDWORD(v107);
              *((_DWORD *)v47 + 4 * HIDWORD(v107)) = buf;
              v49 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v47 + 2 * v48 + 1) = v49;
              *((_DWORD *)v47 + 4 * (v48 + 1)) = v123;
              v50 = v124;
              if (v124)
                *(_DWORD *)v124 += 2;
              *((_QWORD *)v47 + 2 * (v48 + 1) + 1) = v50;
              *((_DWORD *)v47 + 4 * (v48 + 2)) = v125;
              v51 = v126;
              if (v126)
                *(_DWORD *)v126 += 2;
              *((_QWORD *)v47 + 2 * (v48 + 2) + 1) = v51;
              *((_DWORD *)v47 + 4 * (v48 + 3)) = v127;
              v52 = v128;
              if (v128)
                *(_DWORD *)v128 += 2;
              *((_QWORD *)v47 + 2 * (v48 + 3) + 1) = v52;
              *((_DWORD *)v47 + 4 * (v48 + 4)) = v129;
              v53 = v130;
              if (v130)
                *(_DWORD *)v130 += 2;
              *((_QWORD *)v47 + 2 * (v48 + 4) + 1) = v53;
              *((_DWORD *)v47 + 4 * (v48 + 5)) = v131;
              v54 = v132;
              if (v132)
                *(_DWORD *)v132 += 2;
              *((_QWORD *)v47 + 2 * (v48 + 5) + 1) = v54;
              *((_DWORD *)v47 + 4 * (v48 + 6)) = v133;
              v55 = v134;
              if (v134)
                *(_DWORD *)v134 += 2;
              *((_QWORD *)v47 + 2 * (v48 + 6) + 1) = v55;
              *((_DWORD *)v47 + 4 * (v48 + 7)) = v135;
              v56 = v136[0];
              if (v136[0])
                *(_DWORD *)v136[0] += 2;
              *((_QWORD *)v47 + 2 * (v48 + 7) + 1) = v56;
              HIDWORD(v107) = v48 + 8;
              (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v46 + 16))(v46, v26, 4, &v106);
              v57 = v106;
              if (HIDWORD(v107))
              {
                v58 = v24;
                v59 = 16 * HIDWORD(v107);
                v60 = (WTF::StringImpl **)((char *)v106 + 8);
                do
                {
                  v61 = *v60;
                  *v60 = 0;
                  if (v61)
                  {
                    if (*(_DWORD *)v61 == 2)
                      WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v38);
                    else
                      *(_DWORD *)v61 -= 2;
                  }
                  v60 += 2;
                  v59 -= 16;
                }
                while (v59);
                v57 = v106;
                v24 = v58;
              }
              if (v57)
              {
                v106 = 0;
                LODWORD(v107) = 0;
                WTF::fastFree(v57, v38);
              }
              v62 = (WTF::StringImpl *)v136[0];
              v136[0] = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                  WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v62 -= 2;
              }
              v63 = v134;
              v134 = 0;
              if (v63)
              {
                if (*(_DWORD *)v63 == 2)
                  WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v63 -= 2;
              }
              v64 = v132;
              v132 = 0;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2)
                  WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v64 -= 2;
              }
              v65 = v130;
              v130 = 0;
              if (v65)
              {
                if (*(_DWORD *)v65 == 2)
                  WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v65 -= 2;
              }
              v66 = v128;
              v128 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                  WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v66 -= 2;
              }
              v67 = v126;
              v126 = 0;
              if (v67)
              {
                if (*(_DWORD *)v67 == 2)
                  WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v67 -= 2;
              }
              v68 = v124;
              v124 = 0;
              if (v68)
              {
                if (*(_DWORD *)v68 == 2)
                  WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v68 -= 2;
              }
              v69 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2)
                  WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v69 -= 2;
              }
              ++v45;
            }
            while (v45 != (uint64_t *)v96);
          }
          v70 = __ldxr(v40);
          if (v70 == 1)
          {
            v4 = v95;
            if (!__stlxr(0, v40))
              break;
          }
          else
          {
            __clrex();
            v4 = v95;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v71 = v115;
  v115 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v38);
    else
      *(_DWORD *)v71 -= 2;
  }
LABEL_138:
  if (*((_DWORD *)v10 + 18))
  {
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::ThenCallbackBase::dispatch(v103, (uint64_t)v10, (unsigned __int8 **)&v104);
  }
  else
  {
    v72 = (char **)(v10 + 80);
    v73 = *((unsigned int *)v10 + 23);
    if ((_DWORD)v73 == *((_DWORD *)v10 + 22))
    {
      v74 = WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72, v73 + 1, (unint64_t)&v103);
      v73 = *((unsigned int *)v10 + 23);
      v75 = (char *)(*((_QWORD *)v10 + 10) + 8 * v73);
    }
    else
    {
      v75 = &(*v72)[8 * v73];
      v74 = (char *)&v103;
    }
    v76 = *(_QWORD *)v74;
    *(_QWORD *)v74 = 0;
    *(_QWORD *)v75 = v76;
    *((_DWORD *)v10 + 23) = v73 + 1;
  }
  if (!v105)
    goto LABEL_150;
  v77 = v104;
  v78 = __ldxr((unsigned __int8 *)v104);
  if (v78 != 1)
  {
    __clrex();
    goto LABEL_149;
  }
  if (__stlxr(0, (unsigned __int8 *)v104))
LABEL_149:
    WTF::Lock::unlockSlow(v77);
LABEL_150:
  v79 = (unsigned int *)v103;
  v103 = 0;
  if (v79)
  {
    v80 = v79 + 2;
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      atomic_store(1u, v79 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v79 + 8))(v79);
    }
  }
  v83 = v99;
  v99 = 0;
  if (v83)
  {
    v84 = v83 + 2;
    do
    {
      v85 = __ldaxr(v84);
      v86 = v85 - 1;
    }
    while (__stlxr(v86, v84));
    if (!v86)
    {
      atomic_store(1u, v83 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v83 + 8))(v83);
    }
  }
  v87 = (unsigned int *)v98;
  v98 = 0;
  if (v87)
  {
    v88 = v87 + 2;
    do
    {
      v89 = __ldaxr(v88);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, v88));
    if (!v90)
    {
      atomic_store(1u, v87 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v87 + 16))(v87);
    }
  }
  v91 = (unsigned int *)v97;
  v97 = 0;
  if (!v91)
    goto LABEL_169;
  v92 = v91 + 2;
  do
  {
    v93 = __ldaxr(v92);
    v94 = v93 - 1;
  }
  while (__stlxr(v94, v92));
  if (v94)
  {
LABEL_169:
    if (!v4)
      return;
    goto LABEL_170;
  }
  atomic_store(1u, v91 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v91 + 16))(v91);
  if (v4)
LABEL_170:
    CFRelease(v4);
}

void sub_195281438(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned int *a30,unsigned int *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,unsigned int *a36,WTF::Lock *a37,char a38,WTF *a39,int a40,int a41,WTF::StringImpl *a42,WTF::StringImpl *a43,WTF::StringImpl *a44,WTF::StringImpl *a45,WTF::StringImpl *a46,WTF::StringImpl *a47,uint64_t a48,WTF::StringImpl *a49)
{
  unsigned __int8 *v49;
  int v51;
  int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;

  v51 = __ldxr(v49);
  if (v51 == 1)
  {
    if (!__stlxr(0, v49))
    {
LABEL_6:
      if (a49)
      {
        if (*(_DWORD *)a49 == 2)
          WTF::StringImpl::destroy(a49, a2);
        else
          *(_DWORD *)a49 -= 2;
      }
      if (a38)
      {
        v52 = __ldxr((unsigned __int8 *)a37);
        if (v52 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a37))
            goto LABEL_15;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(a37);
      }
LABEL_15:
      if (a36)
      {
        v53 = a36 + 2;
        do
        {
          v54 = __ldaxr(v53);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v53));
        if (!v55)
        {
          atomic_store(1u, a36 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a36 + 8))(a36);
        }
      }
      if (a31)
      {
        v56 = a31 + 2;
        do
        {
          v57 = __ldaxr(v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, v56));
        if (!v58)
        {
          atomic_store(1u, a31 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a31 + 8))(a31);
        }
      }
      if (a30)
      {
        v59 = a30 + 2;
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
        {
          atomic_store(1u, a30 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a30 + 16))(a30);
        }
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void WebCore::WebCoreDecompressionSession::decodeSample(WebCore::WebCoreDecompressionSession *this@<X0>, opaqueCMSampleBuffer *a2@<X1>, int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  char v4;
  opaqueCMSampleBuffer *v5;
  uint64_t v8;
  unsigned __int8 *v9;
  opaqueCMSampleBuffer *v10;
  const char *v11;
  const char *v12;
  unsigned __int8 *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _BYTE *v25;
  uint64_t v26;
  WTF::Lock *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  void *v39;
  void *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned __int8 *v45;
  unsigned int *v47;
  unsigned __int8 v48;
  PAL *FormatDescription;
  const opaqueCMFormatDescription *v50;
  int v51;
  int v52;
  uint64_t v53;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t *v62;
  void *v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  void *v70;
  uint64_t *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  __int128 v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned __int8 **v84;
  unsigned __int8 *v85;
  uint64_t v87;
  uint64_t v88;
  WebCore::WebCoreDecompressionSession *v89;
  BOOL v90;
  int v91;
  WTF *v92;
  void *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  WebCore::WebCoreDecompressionSession *v98;
  WebCore::WebCoreDecompressionSession *v99;
  __int128 v100;
  const char *v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  const char *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[24];
  __int128 v112;
  unsigned __int8 *v113;
  __int128 v114;
  __int128 v115;
  const char *v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;

  v4 = a3;
  v5 = a2;
  if (a3)
    v8 = 8;
  else
    v8 = 10;
  if (WebCore::WebCoreDecompressionSession::shouldDecodeSample(this, a2, a3))
  {
    v9 = WebCore::WebCoreDecompressionSession::ensureDecompressionSessionForSample((unsigned __int8 *)this, v5, &v113);
    if (v113)
    {
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
      v12 = v11;
      v114 = 0uLL;
      *(_QWORD *)&v115 = "decodeSample";
      *((_QWORD *)&v115 + 1) = 0;
      WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v111, &v114);
      v13 = *(unsigned __int8 **)v111;
      if (*(_QWORD *)v111)
      {
        v14 = (unsigned int *)(*(_QWORD *)v111 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
      *a4 = v13;
      v16 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
      {
        v29 = 0;
        goto LABEL_42;
      }
      if (__ldaxr((unsigned __int8 *)v16))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v16))
      {
LABEL_35:
        if (*(_QWORD *)(v16 + 24))
        {
          ++*(_QWORD *)(v16 + 16);
          v29 = v16;
        }
        else
        {
          v29 = 0;
        }
        v30 = __ldxr((unsigned __int8 *)v16);
        if (v30 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v16))
            goto LABEL_42;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_42:
        *(_QWORD *)&v106 = this;
        BYTE8(v106) = v4;
        v107 = v12;
        v31 = *(_QWORD *)v111;
        *(_QWORD *)v111 = 0;
        v109 = *(_OWORD *)&v111[8];
        v110 = v112;
        v32 = v113;
        v105 = 0uLL;
        v100 = v106;
        v108 = 0;
        v103 = *(_OWORD *)&v111[8];
        v104 = v112;
        v98 = 0;
        v99 = 0;
        *(_QWORD *)&v114 = v29;
        *((_QWORD *)&v114 + 1) = this;
        v115 = v106;
        v101 = v12;
        v102 = 0;
        v116 = v12;
        v117 = v31;
        v118 = *(_OWORD *)&v111[8];
        v119 = v112;
        v33 = malloc_type_malloc(0x70uLL, 0x10F00409B455701uLL);
        *v33 = MEMORY[0x1E0C809A0];
        v33[1] = 50331650;
        v33[2] = WTF::BlockPtr<void ()(int,unsigned int,__CVBuffer *,CMTime,CMTime)>::fromCallable<WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_2>(WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_2)::{lambda(void *,int,unsigned int,__CVBuffer *,CMTime,CMTime)#1}::__invoke;
        v33[3] = &WTF::BlockPtr<void ()(int,unsigned int,__CVBuffer *,CMTime,CMTime)>::fromCallable<WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_2>(WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_2)::descriptor;
        v34 = v114;
        v114 = 0uLL;
        v35 = v115;
        *((_OWORD *)v33 + 2) = v34;
        *((_OWORD *)v33 + 3) = v35;
        v36 = v117;
        v117 = 0;
        v33[8] = v116;
        v33[9] = v36;
        v37 = v119;
        *((_OWORD *)v33 + 5) = v118;
        *((_OWORD *)v33 + 6) = v37;
        WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_3::~$_3((uint64_t *)&v114, v38);
        WebCore::softLinkVideoToolboxVTDecompressionSessionDecodeFrameWithOutputHandler(v32, v5, v8, 0, v33);
        _Block_release(v33);
        WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_3::~$_3((uint64_t *)&v98, v39);
        WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_3::~$_3((uint64_t *)&v105, v40);
        if (*(_QWORD *)v111)
        {
          WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead(*(uint64_t *)v111);
          v41 = *(unsigned int **)v111;
          *(_QWORD *)v111 = 0;
          if (v41)
          {
            v42 = v41 + 2;
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              atomic_store(1u, v41 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
            }
          }
        }
        goto LABEL_130;
      }
      MEMORY[0x19AEA534C](v16);
      goto LABEL_35;
    }
    if (*((_BYTE *)this + 128))
    {
      LODWORD(v105) = -12913;
      v114 = 0uLL;
      *(_QWORD *)&v115 = "decodeSample";
      *((_QWORD *)&v115 + 1) = 0;
      WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::createAndReject<$_13,std::enable_if<true,void>>(a4, (int *)&v105, &v114);
      goto LABEL_130;
    }
    v45 = (unsigned __int8 *)this + 12;
    if (__ldaxr((unsigned __int8 *)this + 12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v45))
    {
      goto LABEL_52;
    }
    MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_52:
    if (*((_QWORD *)this + 15))
    {
      v47 = 0;
      goto LABEL_56;
    }
    v48 = atomic_load((unsigned __int8 *)this + 224);
    if ((v48 & 1) == 0)
    {
      FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(v5, v10);
      v51 = PAL::softLinkCoreMediaCMFormatDescriptionGetMediaSubType[0](FormatDescription, v50);
      WebCore::WebCoreDecompressionSession::initializeVideoDecoder((unsigned __int8 **)this, v51, (uint64_t *)&v114);
      v47 = (unsigned int *)v114;
LABEL_56:
      v52 = __ldxr(v45);
      if (v52 == 1)
      {
        if (!__stlxr(0, v45))
        {
LABEL_61:
          v53 = *(_QWORD *)this;
          if (__ldaxr(*(unsigned __int8 **)this))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v53))
          {
            goto LABEL_65;
          }
          MEMORY[0x19AEA534C](v53);
LABEL_65:
          ++*(_QWORD *)(v53 + 8);
          v55 = __ldxr((unsigned __int8 *)v53);
          if (v55 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v53))
            {
LABEL_70:
              v98 = this;
              v99 = this;
              *(_QWORD *)&v100 = v5;
              if (v5)
                CFRetain(v5);
              BYTE8(v100) = v4;
              if (!v47)
              {
                WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_0::operator()((uint64_t *)a4, (uint64_t)&v98);
                goto LABEL_106;
              }
              v56 = *((_QWORD *)this + 5);
              *(_OWORD *)v111 = 0uLL;
              v98 = 0;
              *(_QWORD *)&v100 = 0;
              v57 = WTF::fastMalloc((WTF *)0x50);
              v58 = *(_QWORD *)(v56 + 32);
              v56 += 32;
              (*(void (**)(uint64_t))(v58 + 32))(v56);
              v59 = WTF::fastMalloc((WTF *)0x30);
              *(_QWORD *)v59 = off_1E334F888;
              *(_QWORD *)(v59 + 8) = this;
              *(_QWORD *)(v59 + 16) = this;
              *(_QWORD *)(v59 + 24) = v5;
              *(_BYTE *)(v59 + 32) = v4;
              *(_DWORD *)(v57 + 8) = 1;
              *(_QWORD *)(v57 + 16) = v56;
              *(_QWORD *)(v57 + 24) = 0;
              *(_QWORD *)(v57 + 32) = 0;
              *(_QWORD *)(v57 + 40) = "decodeSample";
              *(_QWORD *)(v57 + 48) = 0;
              *(_WORD *)(v57 + 56) = 0;
              *(_QWORD *)v57 = &off_1E334F8B0;
              v60 = v47 + 2;
              *(_QWORD *)(v57 + 64) = 0;
              *(_QWORD *)(v57 + 72) = v59;
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 + 1, v60));
              *(_QWORD *)&v114 = v47;
              *((_QWORD *)&v114 + 1) = v57;
              v115 = *(_OWORD *)v111;
              v116 = "decodeSample";
              v117 = 0;
              v105 = 0uLL;
              *(_QWORD *)&v106 = "<completion promise>";
              *((_QWORD *)&v106 + 1) = 0;
              v62 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
              WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v62, &v105);
              v64 = *v62;
              if (*v62)
              {
                v65 = (unsigned int *)(v64 + 8);
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 + 1, v65));
              }
              *a4 = (unsigned __int8 *)v64;
              v67 = *((_QWORD *)&v114 + 1);
              v68 = (unsigned __int8 *)(*((_QWORD *)&v114 + 1) + 57);
              if (__ldaxr((unsigned __int8 *)(*((_QWORD *)&v114 + 1) + 57)))
              {
                __clrex();
              }
              else if (!__stxr(1u, v68))
              {
                goto LABEL_83;
              }
              MEMORY[0x19AEA534C](v67 + 57);
LABEL_83:
              v71 = *(uint64_t **)(v67 + 64);
              *(_QWORD *)(v67 + 64) = v62;
              if (v71)
              {
                if (*v71)
                {
                  WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead(*v71);
                  v72 = (unsigned int *)*v71;
                  *v71 = 0;
                  if (v72)
                  {
                    v73 = v72 + 2;
                    do
                    {
                      v74 = __ldaxr(v73);
                      v75 = v74 - 1;
                    }
                    while (__stlxr(v75, v73));
                    if (!v75)
                    {
                      atomic_store(1u, v72 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 16))(v72);
                    }
                  }
                }
                else
                {
                  *v71 = 0;
                }
                WTF::fastFree((WTF *)v71, v63);
              }
              v78 = __ldxr(v68);
              if (v78 == 1)
              {
                if (!__stlxr(0, v68))
                {
LABEL_100:
                  v79 = v114;
                  *((_QWORD *)&v114 + 1) = 0;
                  *(_QWORD *)&v105 = *((_QWORD *)&v79 + 1);
                  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v79, (WTF::NativePromiseBase **)&v105, (WTF::Logger::LogSiteIdentifier *)&v115);
                  v80 = (unsigned int *)v105;
                  *(_QWORD *)&v105 = 0;
                  if (v80)
                  {
                    v81 = v80 + 2;
                    do
                    {
                      v82 = __ldaxr(v81);
                      v83 = v82 - 1;
                    }
                    while (__stlxr(v83, v81));
                    if (!v83)
                    {
                      atomic_store(1u, v80 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
                    }
                  }
                  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>>::~ThenCommand((uint64_t *)&v114);
                  v5 = (opaqueCMSampleBuffer *)v100;
LABEL_106:
                  *(_QWORD *)&v100 = 0;
                  if (v5)
                    CFRelease(v5);
                  v84 = (unsigned __int8 **)v98;
                  v98 = 0;
                  if (!v84)
                    goto LABEL_125;
                  v85 = *v84;
                  if (__ldaxr(*v84))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, v85))
                  {
                    goto LABEL_113;
                  }
                  MEMORY[0x19AEA534C](v85);
LABEL_113:
                  v87 = *((_QWORD *)v85 + 1);
                  v88 = v87 - 1;
                  *((_QWORD *)v85 + 1) = v87 - 1;
                  if (v87 == 1)
                  {
                    v97 = *((_QWORD *)v85 + 2);
                    v89 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v85 + 3);
                    *((_QWORD *)v85 + 3) = 0;
                    v90 = v97 != 0;
                  }
                  else
                  {
                    v89 = 0;
                    v90 = 1;
                  }
                  v91 = __ldxr(v85);
                  if (v91 == 1)
                  {
                    if (!__stlxr(0, v85))
                    {
LABEL_120:
                      if (!v88)
                      {
                        if (v89)
                        {
                          WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v89);
                          WTF::fastFree(v92, v93);
                        }
                        if (!v90)
                          WTF::fastFree((WTF *)v85, v70);
                      }
LABEL_125:
                      if (v47)
                      {
                        v94 = v47 + 2;
                        do
                        {
                          v95 = __ldaxr(v94);
                          v96 = v95 - 1;
                        }
                        while (__stlxr(v96, v94));
                        if (!v96)
                        {
                          atomic_store(1u, v47 + 2);
                          (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
                        }
                      }
                      goto LABEL_130;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v85);
                  goto LABEL_120;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)(v67 + 57));
              goto LABEL_100;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v53);
          goto LABEL_70;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WebCore::WebCoreDecompressionSession *)((char *)this + 12));
      goto LABEL_61;
    }
    LODWORD(v105) = 0;
    v114 = 0uLL;
    *(_QWORD *)&v115 = "decodeSample";
    *((_QWORD *)&v115 + 1) = 0;
    v76 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x80);
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::NativePromise((uint64_t)v76, &v114);
    *a4 = v76;
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::reject<int,std::enable_if<true,void>>(v76, (int *)&v105, (WTF::Logger::LogSiteIdentifier *)&v114);
    v77 = __ldxr(v45);
    if (v77 == 1)
    {
      if (!__stlxr(0, v45))
      {
LABEL_130:
        if (v113)
          CFRelease(v113);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WebCore::WebCoreDecompressionSession *)((char *)this + 12));
    goto LABEL_130;
  }
  v18 = (unsigned int *)((char *)this + 232);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v20 = (unsigned int *)((char *)this + 236);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  v114 = 0uLL;
  *(_QWORD *)&v115 = "decodeSample";
  *((_QWORD *)&v115 + 1) = 0;
  v22 = WTF::fastMalloc((WTF *)0x80);
  WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::NativePromise(v22, &v114);
  *a4 = (unsigned __int8 *)v22;
  v23 = (unsigned __int8 *)(v22 + 48);
  *(_QWORD *)&v105 = v22 + 48;
  BYTE8(v105) = 1;
  if (__ldaxr((unsigned __int8 *)(v22 + 48)))
  {
    __clrex();
LABEL_21:
    v23 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_22;
  }
  if (__stxr(1u, v23))
    goto LABEL_21;
LABEL_22:
  v25 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v23);
  if (*v25 && v25[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)v25, (WTF::Logger::LogSiteIdentifier *)&v114, " resolving ", v22);
  v26 = *(unsigned int *)(v22 + 72);
  if ((_DWORD)v26 != -1)
    ((void (*)(WebCore::WebCoreDecompressionSession **, uint64_t))off_1E334F8D0[v26])(&v98, v22 + 56);
  *(_QWORD *)(v22 + 56) = 0;
  *(_DWORD *)(v22 + 64) = 0;
  *(_DWORD *)(v22 + 72) = 1;
  WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::dispatchAll(v22, (unsigned __int8 **)&v105);
  if (BYTE8(v105))
  {
    v27 = (WTF::Lock *)v105;
    v28 = __ldxr((unsigned __int8 *)v105);
    if (v28 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v105))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v27);
  }
}

void sub_195282284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::Lock *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  unsigned int *v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;

  *v30 = 0;
  v34 = v29 + 2;
  do
  {
    v35 = __ldaxr(v34);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v34));
  if (!v36)
  {
    atomic_store(1u, v29 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
  }
  v37 = __ldxr(v31);
  if (v37 == 1)
  {
    if (!__stlxr(0, v31))
    {
LABEL_10:
      if (*(_QWORD *)(v32 - 168))
        CFRelease(*(CFTypeRef *)(v32 - 168));
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v31);
  goto LABEL_10;
}

void WebCore::WebCoreDecompressionSession::initializeVideoDecoder(unsigned __int8 **this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  unsigned __int8 *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned __int8 *v16;
  unsigned __int8 *v18;
  int v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  unsigned int *v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[3];

  memset(v41, 0, 44);
  v36 = 0uLL;
  *(_QWORD *)&v37 = "initializeVideoDecoder";
  *((_QWORD *)&v37 + 1) = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v38, 0, &v36);
  v6 = (uint64_t)v38;
  if (v38)
  {
    v7 = v38 + 2;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *a3 = v6;
  if (a2 == 1635135537 || a2 == 1987063865 || a2 == 1987063864)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *(_DWORD *)v9 += 2;
    v35 = v9;
  }
  v10 = *this;
  if (__ldaxr(*this))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_15:
  ++*((_QWORD *)v10 + 1);
  v12 = __ldxr(v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, v10))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  v13 = (uint64_t)v38;
  v38 = 0;
  v36 = v39;
  v37 = v40;
  v14 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v14 = off_1E33505E0;
  *(_QWORD *)(v14 + 8) = this;
  *(_QWORD *)(v14 + 16) = this;
  *(_QWORD *)(v14 + 24) = v13;
  v15 = v37;
  *(_OWORD *)(v14 + 32) = v36;
  *(_OWORD *)(v14 + 48) = v15;
  v34 = v14;
  v16 = *this;
  if (!*this)
  {
    v18 = 0;
    goto LABEL_32;
  }
  if (__ldaxr(v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_25;
  }
  MEMORY[0x19AEA534C](v16);
LABEL_25:
  if (*((_QWORD *)v16 + 3))
  {
    ++*((_QWORD *)v16 + 2);
    v18 = v16;
  }
  else
  {
    v18 = 0;
  }
  v19 = __ldxr(v16);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v16))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_32:
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v20 = &off_1E3350608;
  v20[1] = v18;
  v20[2] = this;
  v20[3] = this;
  v33 = v20;
  v21 = this[5];
  (*(void (**)(unsigned __int8 *))(*(_QWORD *)v21 + 48))(v21);
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v22 = &off_1E3350630;
  v22[1] = v21;
  v32 = v22;
  if (WebCore::VideoDecoder::s_customCreator)
    WebCore::VideoDecoder::s_customCreator(&v35, v41, &v34, &v33, &v32);
  else
    WebCore::VideoDecoder::createLocalDecoder(&v35, (uint64_t)v41, &v34, (uint64_t *)&v33, (uint64_t *)&v32);
  v24 = (uint64_t)v32;
  v32 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = (uint64_t)v33;
  v33 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v34;
  v34 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v35;
  v35 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v23);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (v38)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)v38);
    v28 = v38;
    v38 = 0;
    if (v28)
    {
      v29 = v28 + 2;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v28 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
      }
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v41[2] + 8));
}

void sub_195282BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int *a18)
{
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  if (a18)
  {
    v19 = a18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, a18 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a18 + 16))(a18);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 *v5;
  opaqueCMSampleBuffer *v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  _BOOL4 v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  opaqueCMSampleBuffer *v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  _BOOL4 v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  const __CFAllocator *v25;
  unint64_t v26;
  const __CFAllocator *v27;
  OpaqueCMBlockBuffer *v28;
  uint64_t DataLength;
  char **v30;
  WTF::MonotonicTime *DataPointer;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  const __CFAllocator *v46;
  uint64_t v47;
  int v48;
  int v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  void *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD v71[2];
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int *v76;
  __int128 v77;
  __int128 v78;
  unint64_t v79;
  PAL *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;

  v4 = *(uint64_t **)(a2 + 8);
  v5 = (unsigned __int8 *)v4 + 12;
  if (__ldaxr((unsigned __int8 *)v4 + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)v4 + 12);
LABEL_5:
  if (!v4[15])
  {
    LODWORD(v71[0]) = 0;
    v64 = 0uLL;
    *(_QWORD *)&v65 = "operator()";
    *((_QWORD *)&v65 + 1) = 0;
    v33 = (_DWORD *)WTF::fastMalloc((WTF *)0x80);
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::NativePromise((uint64_t)v33, &v64);
    *a1 = (uint64_t)v33;
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::reject<int,std::enable_if<true,void>>(v33, (int *)v71, (WTF::Logger::LogSiteIdentifier *)&v64);
    goto LABEL_94;
  }
  PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](*(PAL **)(a2 + 16), (opaqueCMSampleBuffer *)a2);
  v8 = DWORD2(v64);
  v9 = BYTE12(v64) & 1;
  if ((~HIDWORD(v64) & 3) == 0)
    v9 = BYTE12(v64) & 1 | 2;
  if ((~HIDWORD(v64) & 5) == 0)
    v9 |= 4u;
  if ((~HIDWORD(v64) & 9) == 0)
    v9 |= 8u;
  if ((~HIDWORD(v64) & 0x11) != 0)
    v10 = v9;
  else
    v10 = v9 | 0x10;
  v12 = (v10 & 1) == 0 || DWORD2(v64) != 0;
  if ((uint64_t)v64 >= 0)
    v13 = 5;
  else
    v13 = 9;
  v14 = !v12;
  if (v12)
  {
    v15 = v64;
  }
  else
  {
    v10 = v13;
    v15 = (uint64_t)v64 >> 63;
  }
  if (v14)
    v8 = 1;
  v82 = v15;
  v83 = v8 | ((unint64_t)v10 << 32);
  PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](*(PAL **)(a2 + 16), v7);
  v17 = DWORD2(v64);
  v18 = BYTE12(v64) & 1;
  if ((~HIDWORD(v64) & 3) == 0)
    v18 = BYTE12(v64) & 1 | 2;
  if ((~HIDWORD(v64) & 5) == 0)
    v18 |= 4u;
  if ((~HIDWORD(v64) & 9) == 0)
    v18 |= 8u;
  if ((~HIDWORD(v64) & 0x11) != 0)
    v19 = v18;
  else
    v19 = v18 | 0x10;
  v21 = (v19 & 1) == 0 || DWORD2(v64) != 0;
  if ((uint64_t)v64 >= 0)
    v22 = 5;
  else
    v22 = 9;
  v23 = !v21;
  if (v21)
  {
    v24 = v64;
  }
  else
  {
    v19 = v22;
    v24 = (uint64_t)v64 >> 63;
  }
  if (v23)
    v17 = 1;
  v80 = (PAL *)v24;
  v81 = v17 | ((unint64_t)v19 << 32);
  v25 = (const __CFAllocator *)PAL::softLinkCoreMediaCMSampleBufferGetDataBuffer[0](*(PAL **)(a2 + 16), v16);
  v27 = v25;
  if (v25)
    CFRetain(v25);
  if (!PAL::softLinkCoreMediaCMBlockBufferIsRangeContiguous(v27, 0, 0, v26))
  {
    v71[0] = 0;
    LODWORD(v76) = PAL::softLinkCoreMediaCMBlockBufferCreateContiguous(0, v27, 0, 0, 0, 0, 0, v71, (OpaqueCMBlockBuffer **)v64);
    if ((_DWORD)v76)
    {
      v64 = 0uLL;
      *(_QWORD *)&v65 = "operator()";
      *((_QWORD *)&v65 + 1) = 0;
      v34 = (_DWORD *)WTF::fastMalloc((WTF *)0x80);
      WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::NativePromise((uint64_t)v34, &v64);
      *a1 = (uint64_t)v34;
      WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::reject<int &,std::enable_if<true,void>>(v34, (int *)&v76, (WTF::Logger::LogSiteIdentifier *)&v64);
      goto LABEL_92;
    }
    v46 = (const __CFAllocator *)v71[0];
    if (v27)
      CFRelease(v27);
    v27 = v46;
  }
  DataLength = PAL::softLinkCoreMediaCMBlockBufferGetDataLength(v27, v28);
  v79 = 0;
  DataPointer = (WTF::MonotonicTime *)PAL::softLinkCoreMediaCMBlockBufferGetDataPointer(v27, 0, 0, 0, &v79, v30);
  LODWORD(v71[0]) = (_DWORD)DataPointer;
  if ((_DWORD)DataPointer)
  {
    v64 = 0uLL;
    *(_QWORD *)&v65 = "operator()";
    *((_QWORD *)&v65 + 1) = 0;
    v32 = (_DWORD *)WTF::fastMalloc((WTF *)0x80);
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::NativePromise((uint64_t)v32, &v64);
    *a1 = (uint64_t)v32;
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::reject<int &,std::enable_if<true,void>>(v32, (int *)v71, (WTF::Logger::LogSiteIdentifier *)&v64);
    goto LABEL_92;
  }
  WTF::MonotonicTime::now(DataPointer);
  v36 = *(_BYTE *)(a2 + 24);
  if (!*((_BYTE *)v4 + 152))
    *((_BYTE *)v4 + 152) = 1;
  v4[17] = v35;
  *((_BYTE *)v4 + 144) = v36;
  v37 = WTF::MediaTime::toTimeScale();
  v38 = WTF::MediaTime::toTimeScale();
  v64 = 0uLL;
  *(_QWORD *)&v65 = "operator()";
  *((_QWORD *)&v65 + 1) = 0;
  WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v76, &v64);
  v40 = (uint64_t)v76;
  if (v76)
  {
    v41 = v76 + 2;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
  }
  *a1 = v40;
  v43 = v4[15];
  v71[0] = v79;
  v71[1] = DataLength;
  v72 = 1;
  v73 = v37;
  v74 = v38;
  v75 = 1;
  v44 = *v4;
  if (!*v4)
  {
    v47 = 0;
    goto LABEL_82;
  }
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_75;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_75:
  if (*(_QWORD *)(v44 + 24))
  {
    ++*(_QWORD *)(v44 + 16);
    v47 = v44;
  }
  else
  {
    v47 = 0;
  }
  v48 = __ldxr((unsigned __int8 *)v44);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_81;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_81:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_82:
  *(_QWORD *)&v64 = v47;
  *((_QWORD *)&v64 + 1) = v4;
  *(_QWORD *)&v65 = v4;
  if ((v81 & 0x2000000000) != 0)
  {
    WTF::MediaTime::toDouble((WTF::MediaTime *)&v80);
    PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)v81, v50, v49);
  }
  else
  {
    PAL::softLinkCoreMediaCMTimeMake(v80, v81, v39);
  }
  DWORD1(v66) = DWORD1(v66) & 0xFFFFFFFE | BYTE4(v81) & 1 | BYTE4(v81) & 0xE;
  v51 = (uint64_t)v76;
  v76 = 0;
  v67 = v51;
  v68 = v77;
  v69 = v78;
  v52 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v52 = off_1E334F9A0;
  *(_QWORD *)(v52 + 8) = v64;
  v53 = *((_QWORD *)&v64 + 1);
  v64 = 0uLL;
  *(_QWORD *)(v52 + 16) = v53;
  v54 = v65;
  *(_OWORD *)(v52 + 40) = v66;
  *(_OWORD *)(v52 + 24) = v54;
  v55 = v67;
  v67 = 0;
  *(_QWORD *)(v52 + 56) = v55;
  v56 = v69;
  *(_OWORD *)(v52 + 64) = v68;
  *(_OWORD *)(v52 + 80) = v56;
  v70 = v52;
  (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v43 + 16))(v43, v71, &v70);
  v58 = v70;
  v70 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_0::operator() const(void)::{lambda(WTF::String &&)#1}::~String((uint64_t *)&v64, v57);
  if (!v76)
    goto LABEL_92;
  WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead((uint64_t)v76);
  v59 = v76;
  v76 = 0;
  if (!v59)
    goto LABEL_92;
  v60 = v59 + 2;
  do
  {
    v61 = __ldaxr(v60);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, v60));
  if (v62)
  {
LABEL_92:
    if (!v27)
      goto LABEL_94;
    goto LABEL_93;
  }
  atomic_store(1u, v59 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 16))(v59);
  if (v27)
LABEL_93:
    CFRelease(v27);
LABEL_94:
  v63 = __ldxr(v5);
  if (v63 != 1)
  {
    __clrex();
    goto LABEL_98;
  }
  if (__stlxr(0, v5))
LABEL_98:
    WTF::Lock::unlockSlow((WTF::Lock *)((char *)v4 + 12));
}

void sub_19528352C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned int *a27)
{
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  if (a27)
  {
    v28 = a27 + 2;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, a27 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a27 + 16))(a27);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::createAndReject<$_13,std::enable_if<true,void>>(unsigned __int8 **a1, int *a2, __int128 *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  WTF *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x80);
  WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::NativePromise((uint64_t)v6, a3);
  *a1 = v6;
  v7 = v6 + 48;
  v14 = (WTF::Lock *)(v6 + 48);
  v15 = 1;
  if (__ldaxr(v6 + 48))
  {
    __clrex();
LABEL_4:
    v7 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, v7))
    goto LABEL_4;
LABEL_5:
  v9 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v9 && v9[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)v9, (WTF::Logger::LogSiteIdentifier *)a3, " rejecting ", (uint64_t)v6);
  v10 = *a2;
  v11 = *((unsigned int *)v6 + 18);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E334F8D0[v11])(&v16, v6 + 56);
  *((_DWORD *)v6 + 14) = v10;
  *((_DWORD *)v6 + 16) = 1;
  *((_DWORD *)v6 + 18) = 1;
  result = WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::dispatchAll((uint64_t)v6, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_1952838A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, char a11)
{
  unsigned int **v11;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v13 = *v11;
  *v11 = 0;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_3::~$_3(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v14;

  v3 = a1[5];
  if (v3)
  {
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead(v3);
    v4 = (unsigned int *)a1[5];
    a1[5] = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      }
    }
  }
  else
  {
    a1[5] = 0;
  }
  v8 = *a1;
  *a1 = 0;
  if (!v8)
    return a1;
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_13:
  v10 = *(_QWORD *)(v8 + 16) - 1;
  *(_QWORD *)(v8 + 16) = v10;
  if (v10)
  {
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    return a1;
  }
  v11 = *(_QWORD *)(v8 + 8);
  v12 = __ldxr((unsigned __int8 *)v8);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
    {
      if (!v11)
        goto LABEL_20;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v11)
LABEL_20:
    WTF::fastFree((WTF *)v8, a2);
  return a1;
}

void sub_195283A54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::WebCoreDecompressionSession::decodeSampleSync(WebCore::WebCoreDecompressionSession *this@<X0>, opaqueCMSampleBuffer *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v6;
  int v8;
  int v9;
  _QWORD v10[7];
  int v11;
  unsigned __int8 v12[4];
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;

  WebCore::WebCoreDecompressionSession::ensureDecompressionSessionForSample((unsigned __int8 *)this, a2, &v13);
  v6 = v13;
  *a3 = 0;
  if (v6)
  {
    v11 = 0;
    *(_WORD *)v12 = 0;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3321888768;
    v10[2] = ___ZN7WebCore27WebCoreDecompressionSession16decodeSampleSyncEP20opaqueCMSampleBuffer_block_invoke;
    v10[3] = &__block_descriptor_56_e8_32c91_ZTSKZN7WebCore27WebCoreDecompressionSession16decodeSampleSyncEP20opaqueCMSampleBufferE3__0_e47_v72__0i8I12____CVBuffer__16___qiIq_24___qiIq_48l;
    v10[4] = this;
    v10[5] = a3;
    v10[6] = &v11;
    WebCore::softLinkVideoToolboxVTDecompressionSessionDecodeFrameWithOutputHandler(v6, a2, 0, 0, v10);
    v14 = 0x7FF0000000000000;
    v15 = 0;
    if (__ldaxr(v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v12);
LABEL_6:
    while (1)
    {
      v8 = v11;
      if (v11)
        break;
      if ((WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&v12[1], v12, (WTF::TimeWithDynamicClockType *)&v14) & 1) == 0)
      {
        v8 = v11;
        if (!v11)
          goto LABEL_10;
        break;
      }
    }
    v11 = v8 - 1;
LABEL_10:
    v9 = __ldxr(v12);
    if (v9 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_15:
        if (v13)
          CFRelease(v13);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    goto LABEL_15;
  }
}

void sub_195283BD8(_Unwind_Exception *exception_object)
{
  const void **v1;
  uint64_t v2;
  const void *v4;
  const void *v5;

  v4 = *v1;
  *v1 = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(v2 - 56);
  if (v5)
    CFRelease(v5);
  _Unwind_Resume(exception_object);
}

void ___ZN7WebCore27WebCoreDecompressionSession16decodeSampleSyncEP20opaqueCMSampleBuffer_block_invoke(_QWORD *a1, int a2, int a3, void *cf)
{
  uint64_t v6;
  WebCore *v7;
  __CVBuffer *v8;
  uint64_t IOSurface;
  WebCore *v10;
  const void **v11;
  const void *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  int v18;
  _QWORD v19[2];
  char v20;
  _QWORD v21[3];

  if (cf && (v6 = a1[4], *(_DWORD *)(v6 + 264)))
  {
    v7 = (WebCore *)CFGetTypeID(cf);
    if (v7 == (WebCore *)WebCore::softLinkCoreVideoCVPixelBufferGetTypeID(v7))
    {
      IOSurface = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface((WebCore *)cf, v8);
      if (IOSurface)
        WebCore::IOSurface::setOwnershipIdentity(IOSurface, (int *)(v6 + 264));
    }
  }
  else if (!cf)
  {
    goto LABEL_10;
  }
  v10 = (WebCore *)CFGetTypeID(cf);
  if (v10 == (WebCore *)WebCore::softLinkCoreVideoCVPixelBufferGetTypeID(v10))
  {
    v11 = (const void **)a1[5];
    CFRetain(cf);
    v12 = *v11;
    *v11 = cf;
    if (v12)
      CFRelease(v12);
  }
LABEL_10:
  v13 = a1[6];
  v14 = (unsigned __int8 *)(v13 + 4);
  if (__ldaxr((unsigned __int8 *)(v13 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v13 + 4);
LABEL_14:
  ++*(_DWORD *)v13;
  v16 = (unsigned __int8 *)(v13 + 5);
  v17 = atomic_load(v16);
  if ((v17 & 1) != 0)
  {
    v20 = 0;
    v19[0] = v16;
    v19[1] = &v20;
    v21[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v21[1] = v21;
    v21[2] = v19;
    WTF::ParkingLot::unparkOneImpl();
  }
  v18 = __ldxr(v14);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, v14))
LABEL_20:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
}

void sub_195283D90(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

__n128 __copy_helper_block_e8_32c91_ZTSKZN7WebCore27WebCoreDecompressionSession16decodeSampleSyncEP20opaqueCMSampleBufferE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

void WebCore::WebCoreDecompressionSession::handleDecompressionOutput(WebCore::WebCoreDecompressionSession *this, int a2, int a3, const opaqueCMFormatDescription **a4, __CVBuffer *a5, CMTime *a6, CMTime *a7)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  PAL *v17;
  int v18;
  opaqueCMSampleBuffer **v19;
  unsigned int *v20;
  unsigned int v21;
  __CVBuffer *v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  const void *v26;
  CMSampleTimingInfo v27;
  CMTimeValue value;
  __CVBuffer *v29;

  v11 = (unsigned int *)((char *)this + 232);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  if ((a4 & 2) != 0)
  {
    v15 = (unsigned int *)((char *)this + 236);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  else if (a3)
  {
    v13 = (unsigned int *)((char *)this + 240);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    *((_DWORD *)this + 52) = a3;
  }
  else if (a2)
  {
    v29 = 0;
    v17 = (PAL *)*MEMORY[0x1E0C9AE00];
    v18 = PAL::softLinkCoreMediaCMVideoFormatDescriptionCreateForImageBuffer((PAL *)*MEMORY[0x1E0C9AE00], a5, (__CVBuffer *)&v29, a4);
    if (v18)
    {
      v20 = (unsigned int *)((char *)this + 240);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
      *((_DWORD *)this + 52) = v18;
    }
    else
    {
      v22 = v29;
      *(_OWORD *)&v27.duration.timescale = *(_OWORD *)&a7->value;
      v27.presentationTimeStamp.value = a7->epoch;
      *(_OWORD *)&v27.presentationTimeStamp.timescale = *(_OWORD *)&a6->value;
      v27.decodeTimeStamp.value = a6->epoch;
      *(_OWORD *)&v27.decodeTimeStamp.timescale = *(_OWORD *)&v27.presentationTimeStamp.timescale;
      value = v27.decodeTimeStamp.value;
      v27.duration.value = 0;
      v23 = PAL::softLinkCoreMediaCMSampleBufferCreateReadyWithImageBuffer(v17, a5, v29, (const opaqueCMFormatDescription *)&v27.duration.timescale, &v27, v19);
      if (v23)
      {
        v24 = (unsigned int *)((char *)this + 240);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
        *((_DWORD *)this + 52) = v23;
      }
      else
      {
        v26 = (const void *)*((_QWORD *)this + 25);
        *((_QWORD *)this + 25) = v27.duration.value;
        if (v26)
          CFRelease(v26);
      }
      if (v22)
        CFRelease(v22);
    }
  }
}

void sub_195283F48(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::WebCoreDecompressionSession::getFirstVideoFrame(WebCore::WebCoreDecompressionSession *this@<X0>, opaqueCMBufferQueue *a2@<X1>, _QWORD *a3@<X8>)
{
  PAL *v5;
  opaqueCMBufferQueue *v6;
  PAL *v7;
  opaqueCMSampleBuffer *v8;
  PAL *v9;
  PAL *v10;
  const void *v11;
  opaqueCMBufferQueue *v12;

  v5 = (PAL *)*((_QWORD *)this + 3);
  if (v5 && !PAL::softLinkCoreMediaCMBufferQueueIsEmpty[0](v5, a2))
  {
    v7 = (PAL *)PAL::softLinkCoreMediaCMBufferQueueDequeueAndRetain(*((PAL **)this + 3), v6);
    v9 = v7;
    if (v7 && (v10 = (PAL *)CFGetTypeID(v7), v10 != (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID(v10)))
    {
      __break(0xC471u);
    }
    else
    {
      v11 = (const void *)PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0](v9, v8);
      *a3 = v11;
      if (v11)
        CFRetain(v11);
      WebCore::WebCoreDecompressionSession::maybeBecomeReadyForMoreMediaData(this, v12);
      if (v9)
        CFRelease(v9);
    }
  }
  else
  {
    *a3 = 0;
  }
}

void sub_195284050(_Unwind_Exception *exception_object)
{
  const void *v1;
  _QWORD *v2;
  const void *v3;

  *v2 = 0;
  if (v3)
    CFRelease(v3);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::WebCoreDecompressionSession::automaticDequeue(WebCore::WebCoreDecompressionSession *this, OpaqueCMTimebase *a2)
{
  unsigned __int8 *v3;
  PAL *v5;
  int v6;
  WTF::MediaTime *v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  _BOOL4 v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  opaqueCMBufferQueue *v16;
  PAL *v17;
  int v18;
  PAL *v19;
  PAL *v20;
  opaqueCMSampleBuffer *v21;
  opaqueCMSampleBuffer *v22;
  uint64_t v23;
  opaqueCMBufferQueue *v24;
  const void *v25;
  opaqueCMBufferQueue *v26;
  PAL *v27;
  PAL *v28;
  PAL *v29;
  opaqueCMSampleBuffer *v30;
  opaqueCMSampleBuffer *v31;
  uint64_t v32;
  unsigned __int8 v34;
  PAL *v35;
  OpaqueCMTimebase *v36;
  char v37;
  unsigned int v38;
  int v39;
  double v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[2];
  __int128 v46;
  uint64_t v47;

  v3 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v5 = (PAL *)*((_QWORD *)this + 4);
  if (v5)
    CFRetain(*((CFTypeRef *)this + 4));
  v6 = __ldxr(v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, v3))
    {
      if (!v5)
        return;
      goto LABEL_13;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v5)
    return;
LABEL_13:
  v7 = (WTF::MediaTime *)PAL::softLinkCoreMediaCMTimebaseGetTime[0](v5, a2);
  v8 = DWORD2(v46);
  v9 = BYTE12(v46) & 1;
  if ((~HIDWORD(v46) & 3) == 0)
    v9 = BYTE12(v46) & 1 | 2;
  if ((~HIDWORD(v46) & 5) == 0)
    v9 |= 4u;
  if ((~HIDWORD(v46) & 9) == 0)
    v9 |= 8u;
  if ((~HIDWORD(v46) & 0x11) != 0)
    v10 = v9;
  else
    v10 = v9 | 0x10;
  v12 = (v10 & 1) == 0 || DWORD2(v46) != 0;
  if ((uint64_t)v46 >= 0)
    v13 = 5;
  else
    v13 = 9;
  v14 = !v12;
  if (v12)
  {
    v15 = v46;
  }
  else
  {
    v10 = v13;
    v15 = (uint64_t)v46 >> 63;
  }
  if (v14)
    v8 = 1;
  v45[0] = v15;
  v45[1] = v8 | ((unint64_t)v10 << 32);
  v44 = *(_OWORD *)WTF::MediaTime::positiveInfiniteTime(v7);
  v17 = (PAL *)PAL::softLinkCoreMediaCMBufferQueueGetHead[0](*((PAL **)this + 3), v16);
  v19 = v17;
  if (v17)
  {
    v20 = (PAL *)CFGetTypeID(v17);
    if (v20 != (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID(v20))
    {
LABEL_63:
      __break(0xC471u);
      return;
    }
    PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](v19, v21);
    PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](v19, v22);
    *(_QWORD *)&v46 = WTF::MediaTime::operator+();
    *((_QWORD *)&v46 + 1) = v23;
    if (WTF::MediaTime::compare((WTF::MediaTime *)v45, (const WTF::MediaTime *)&v46) == 1)
    {
      while (1)
      {
        v25 = (const void *)PAL::softLinkCoreMediaCMBufferQueueDequeueAndRetain(*((PAL **)this + 3), v24);
        CFRelease(v25);
        v27 = (PAL *)PAL::softLinkCoreMediaCMBufferQueueGetHead[0](*((PAL **)this + 3), v26);
        v28 = v27;
        if (!v27)
          break;
        v29 = (PAL *)CFGetTypeID(v27);
        if (v29 != (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID(v29))
          goto LABEL_63;
        PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](v28, v30);
        PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](v28, v31);
        *(_QWORD *)&v46 = WTF::MediaTime::operator+();
        *((_QWORD *)&v46 + 1) = v32;
        if (WTF::MediaTime::compare((WTF::MediaTime *)v45, (const WTF::MediaTime *)&v46) != 1)
        {
          *(_QWORD *)&v44 = v46;
          *(_QWORD *)((char *)&v44 + 5) = *(_QWORD *)((char *)&v46 + 5);
          break;
        }
      }
      WebCore::WebCoreDecompressionSession::maybeBecomeReadyForMoreMediaData(this, v24);
    }
    else
    {
      *(_QWORD *)&v44 = v46;
      *(_QWORD *)((char *)&v44 + 5) = *(_QWORD *)((char *)&v46 + 5);
    }
  }
  if (__ldaxr(v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_51;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_51:
  v34 = atomic_load((unsigned __int8 *)this + 224);
  if ((v34 & 1) == 0)
  {
    v35 = (PAL *)*((_QWORD *)this + 4);
    v36 = (OpaqueCMTimebase *)*((_QWORD *)this + 7);
    v37 = BYTE12(v44);
    if ((BYTE12(v44) & 0x20) != 0)
    {
      WTF::MediaTime::toDouble((WTF::MediaTime *)&v44);
      PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)DWORD2(v44), v40, v39);
      v37 = BYTE12(v44);
    }
    else
    {
      PAL::softLinkCoreMediaCMTimeMake((PAL *)v44, DWORD2(v44), v18);
    }
    HIDWORD(v42) = HIDWORD(v42) & 0xFFFFFFFE | v37 & 1 | v37 & 0xE;
    v46 = v42;
    v47 = v43;
    PAL::softLinkCoreMediaCMTimebaseSetTimerDispatchSourceNextFireTime(v35, v36, (dispatch_source_s *)&v46, 0, v38);
  }
  v41 = __ldxr(v3);
  if (v41 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_61;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_61:
  CFRelease(v5);
}

void sub_19528464C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::WebCoreDecompressionSession::enqueueDecodedSample(WebCore::WebCoreDecompressionSession *this, opaqueCMSampleBuffer *a2, const void *a3)
{
  unsigned __int8 v3;
  unsigned __int8 *v6;
  PAL *v8;
  int v9;
  double Rate;
  OpaqueCMTimebase *v11;
  opaqueCMSampleBuffer *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  _BOOL4 v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  opaqueCMSampleBuffer *v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  _BOOL4 v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  dispatch_source_s *v32;
  PAL *v34;
  int v35;
  uint64_t v36;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  _QWORD v43[2];
  _QWORD v44[2];
  uint64_t v45;
  unsigned int v46;
  int v47;
  _QWORD v48[2];

  v3 = atomic_load((unsigned __int8 *)this + 224);
  if ((v3 & 1) == 0)
  {
    v6 = (unsigned __int8 *)this + 12;
    if (__ldaxr((unsigned __int8 *)this + 12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_6:
    v8 = (PAL *)*((_QWORD *)this + 4);
    if (v8)
      CFRetain(*((CFTypeRef *)this + 4));
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
      {
        if (v8)
          goto LABEL_11;
        goto LABEL_64;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v8)
    {
LABEL_11:
      Rate = PAL::softLinkCoreMediaCMTimebaseGetRate(v8, a2);
      PAL::softLinkCoreMediaCMTimebaseGetTime[0](v8, v11);
      v13 = v46;
      v14 = v47 & 1;
      if ((~v47 & 3) == 0)
        v14 = v47 & 1 | 2;
      if ((~v47 & 5) == 0)
        v14 |= 4u;
      if ((~v47 & 9) == 0)
        v14 |= 8u;
      if ((~v47 & 0x11) != 0)
        v15 = v14;
      else
        v15 = v14 | 0x10;
      v17 = (v15 & 1) == 0 || v46 != 0;
      if (v45 >= 0)
        v18 = 5;
      else
        v18 = 9;
      v19 = !v17;
      if (v17)
      {
        v20 = v45;
      }
      else
      {
        v15 = v18;
        v20 = v45 >> 63;
      }
      if (v19)
        v13 = 1;
      v48[0] = v20;
      v48[1] = v13 | ((unint64_t)v15 << 32);
      PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](a2, v12);
      v22 = v46;
      v23 = v47 & 1;
      if ((~v47 & 3) == 0)
        v23 = v47 & 1 | 2;
      if ((~v47 & 5) == 0)
        v23 |= 4u;
      if ((~v47 & 9) == 0)
        v23 |= 8u;
      if ((~v47 & 0x11) != 0)
        v24 = v23;
      else
        v24 = v23 | 0x10;
      v26 = (v24 & 1) == 0 || v46 != 0;
      if (v45 >= 0)
        v27 = 5;
      else
        v27 = 9;
      v28 = !v26;
      if (v26)
      {
        v29 = v45;
      }
      else
      {
        v24 = v27;
        v29 = v45 >> 63;
      }
      if (v28)
        v22 = 1;
      v44[0] = v29;
      v44[1] = v22 | ((unint64_t)v24 << 32);
      PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](a2, v21);
      v43[0] = WTF::MediaTime::operator+();
      v43[1] = v30;
      v31 = WTF::MediaTime::compare((WTF::MediaTime *)v48, (const WTF::MediaTime *)v44) != -1
         && (WTF::MediaTime::compare((WTF::MediaTime *)v48, (const WTF::MediaTime *)v43) & 0x80000000) != 0;
      if (Rate > 0.0 && WTF::MediaTime::compare((WTF::MediaTime *)v43, (const WTF::MediaTime *)v48) == -1)
      {
        v41 = (unsigned int *)((char *)this + 236);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 + 1, v41));
LABEL_92:
        CFRelease(v8);
        return;
      }
LABEL_68:
      PAL::softLinkCoreMediaCMBufferQueueEnqueue(*((PAL **)this + 3), a2, a3);
      if (__ldaxr(v6))
      {
        __clrex();
      }
      else if (!__stxr(1u, v6))
      {
        goto LABEL_72;
      }
      MEMORY[0x19AEA534C](v6);
LABEL_72:
      v34 = (PAL *)*((_QWORD *)this + 4);
      if (v34)
        v34 = (PAL *)PAL::softLinkCoreMediaCMTimebaseSetTimerDispatchSourceToFireImmediately(v34, *((OpaqueCMTimebase **)this + 7), v32);
      v35 = __ldxr(v6);
      if (v35 == 1)
      {
        if (!__stlxr(0, v6))
        {
          if (!v31)
            goto LABEL_91;
LABEL_80:
          WTF::RunLoop::main(v34);
          v36 = *(_QWORD *)this;
          if (__ldaxr(*(unsigned __int8 **)this))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v36))
          {
            goto LABEL_84;
          }
          MEMORY[0x19AEA534C](v36);
LABEL_84:
          ++*(_QWORD *)(v36 + 8);
          v38 = __ldxr((unsigned __int8 *)v36);
          if (v38 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v36))
            {
LABEL_89:
              v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v39 = off_1E3350528;
              v39[1] = this;
              v45 = (uint64_t)v39;
              WTF::RunLoop::dispatch();
              v40 = v45;
              v45 = 0;
              if (v40)
                (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
LABEL_91:
              if (!v8)
                return;
              goto LABEL_92;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v36);
          goto LABEL_89;
        }
      }
      else
      {
        __clrex();
      }
      v34 = (PAL *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (!v31)
        goto LABEL_91;
      goto LABEL_80;
    }
LABEL_64:
    v31 = 1;
    goto LABEL_68;
  }
}

void sub_195284B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  const void *v16;

  if (v16)
    CFRelease(v16);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::WebCoreDecompressionSession::stopRequestingMediaData(WebCore::WebCoreDecompressionSession *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::WebCoreDecompressionSession::notifyWhenHasAvailableVideoFrame(uint64_t a1, opaqueCMBufferQueue *a2)
{
  PAL *v4;
  WTF::RunLoop *v5;
  uint64_t v6;
  uint64_t result;

  v4 = *(PAL **)(a1 + 24);
  if (v4 && (v5 = (WTF::RunLoop *)PAL::softLinkCoreMediaCMBufferQueueIsEmpty[0](v4, a2), !(_DWORD)v5))
  {
    WTF::RunLoop::main(v5);
    return WTF::RunLoop::dispatch();
  }
  else
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    result = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v6;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebCore::WebCoreDecompressionSession::imageForTime(uint64_t a1@<X0>, opaqueCMBufferQueue *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  opaqueCMBufferQueue *v8;
  opaqueCMBufferQueue *v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  _BOOL4 v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  opaqueCMBufferQueue *v18;
  dispatch_source_s *v19;
  void *v20;
  PAL *v21;
  opaqueCMSampleBuffer *v22;
  opaqueCMSampleBuffer *v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  _BOOL4 v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  opaqueCMBufferQueue *v33;
  const void *v34;
  opaqueCMBufferQueue *v35;
  PAL *v36;
  opaqueCMSampleBuffer *v37;
  opaqueCMSampleBuffer *v38;
  uint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  _BOOL4 v43;
  char v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  PAL *v49;
  opaqueCMSampleBuffer *v50;
  opaqueCMSampleBuffer *v51;
  uint64_t v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  _BOOL4 v56;
  char v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  opaqueCMBufferQueue *v62;
  unsigned __int8 *v63;
  PAL *v65;
  opaqueCMSampleBuffer *v66;
  PAL *v67;
  PAL *v68;
  const void *v69;
  opaqueCMBufferQueue *v70;
  dispatch_source_s *v71;
  unsigned __int8 *v72;
  PAL *v74;
  int v75;
  PAL *v76;
  int v77;
  void *cf;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];

  if (PAL::softLinkCoreMediaCMBufferQueueIsEmpty[0](*(PAL **)(a1 + 24), a2))
    goto LABEL_2;
  PAL::softLinkCoreMediaCMBufferQueueGetFirstPresentationTimeStamp[0](*(PAL **)(a1 + 24), v8);
  v10 = v82;
  v11 = BYTE4(v82) & 1;
  if ((~HIDWORD(v82) & 3) == 0)
    v11 = BYTE4(v82) & 1 | 2;
  if ((~HIDWORD(v82) & 5) == 0)
    v11 |= 4u;
  if ((~HIDWORD(v82) & 9) == 0)
    v11 |= 8u;
  if ((~HIDWORD(v82) & 0x11) != 0)
    v12 = v11;
  else
    v12 = v11 | 0x10;
  v14 = (v12 & 1) == 0 || v82 != 0;
  if (v81 >= 0)
    v15 = 5;
  else
    v15 = 9;
  v16 = !v14;
  if (v14)
  {
    v17 = v81;
  }
  else
  {
    v12 = v15;
    v17 = v81 >> 63;
  }
  if (v16)
    v10 = 1;
  v83[0] = v17;
  v83[1] = v10 | ((unint64_t)v12 << 32);
  if (a3 != 2 && WTF::MediaTime::compare(a2, (const WTF::MediaTime *)v83) == -1)
    goto LABEL_2;
  cf = (void *)PAL::softLinkCoreMediaCMBufferQueueGetHead[0](*(PAL **)(a1 + 24), v9);
  if (!cf)
  {
LABEL_118:
    v63 = (unsigned __int8 *)(a1 + 12);
    if (__ldaxr((unsigned __int8 *)(a1 + 12)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v63))
    {
      goto LABEL_128;
    }
    MEMORY[0x19AEA534C](a1 + 12);
LABEL_128:
    v74 = *(PAL **)(a1 + 32);
    if (v74)
      PAL::softLinkCoreMediaCMTimebaseSetTimerDispatchSourceToFireImmediately(v74, *(OpaqueCMTimebase **)(a1 + 56), v19);
    v75 = __ldxr(v63);
    if (v75 == 1)
    {
      if (!__stlxr(0, v63))
      {
LABEL_135:
        if (cf)
          WebCore::WebCoreDecompressionSession::maybeBecomeReadyForMoreMediaData((WebCore::WebCoreDecompressionSession *)a1, v18);
LABEL_2:
        *a4 = 0;
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 12));
    goto LABEL_135;
  }
  if (a3 == 2)
  {
    v20 = cf;
    while (1)
    {
      v21 = (PAL *)CFGetTypeID(v20);
      if (v21 != (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID(v21))
        goto LABEL_148;
      PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0]((PAL *)v20, v22);
      v24 = v82;
      v25 = BYTE4(v82) & 1;
      if ((~HIDWORD(v82) & 3) == 0)
        v25 = BYTE4(v82) & 1 | 2;
      if ((~HIDWORD(v82) & 5) == 0)
        v25 |= 4u;
      if ((~HIDWORD(v82) & 9) == 0)
        v25 |= 8u;
      if ((~HIDWORD(v82) & 0x11) != 0)
        v26 = v25;
      else
        v26 = v25 | 0x10;
      v28 = (v26 & 1) == 0 || v82 != 0;
      if (v81 >= 0)
        v29 = 5;
      else
        v29 = 9;
      v30 = !v28;
      if (v28)
      {
        v31 = v81;
      }
      else
      {
        v26 = v29;
        v31 = v81 >> 63;
      }
      if (v30)
        v24 = 1;
      v79 = v31;
      v80 = v24 | ((unint64_t)v26 << 32);
      PAL::softLinkCoreMediaCMSampleBufferGetDuration[0]((PAL *)v20, v23);
      v81 = WTF::MediaTime::operator+();
      v82 = v32;
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v81, a2) != -1)
        goto LABEL_120;
      v34 = (const void *)PAL::softLinkCoreMediaCMBufferQueueDequeueAndRetain(*(PAL **)(a1 + 24), v33);
      CFRelease(v34);
      v20 = (void *)PAL::softLinkCoreMediaCMBufferQueueGetHead[0](*(PAL **)(a1 + 24), v35);
      if (!v20)
        goto LABEL_118;
    }
  }
  if (a3 != 1)
  {
    v48 = cf;
    while (1)
    {
      v49 = (PAL *)CFGetTypeID(v48);
      if (v49 != (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID(v49))
        break;
      PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0]((PAL *)v48, v50);
      v52 = v82;
      v53 = BYTE4(v82) & 1;
      if ((~HIDWORD(v82) & 3) == 0)
        v53 = BYTE4(v82) & 1 | 2;
      if ((~HIDWORD(v82) & 5) == 0)
        v53 |= 4u;
      if ((~HIDWORD(v82) & 9) == 0)
        v53 |= 8u;
      if ((~HIDWORD(v82) & 0x11) != 0)
        v54 = v53;
      else
        v54 = v53 | 0x10;
      v56 = (v54 & 1) == 0 || v82 != 0;
      if (v81 >= 0)
        v57 = 5;
      else
        v57 = 9;
      v58 = !v56;
      if (v56)
      {
        v59 = v81;
      }
      else
      {
        v54 = v57;
        v59 = v81 >> 63;
      }
      if (v58)
        v52 = 1;
      v79 = v59;
      v80 = v52 | ((unint64_t)v54 << 32);
      PAL::softLinkCoreMediaCMSampleBufferGetDuration[0]((PAL *)v48, v51);
      v81 = WTF::MediaTime::operator+();
      v82 = v60;
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v79, a2) == 1)
        goto LABEL_88;
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v81, a2) != -1)
        goto LABEL_120;
      v61 = (const void *)PAL::softLinkCoreMediaCMBufferQueueDequeueAndRetain(*(PAL **)(a1 + 24), v33);
      CFRelease(v61);
      v48 = (void *)PAL::softLinkCoreMediaCMBufferQueueGetHead[0](*(PAL **)(a1 + 24), v62);
      if (!v48)
        goto LABEL_118;
    }
LABEL_148:
    __break(0xC471u);
    JUMPOUT(0x1952854CCLL);
  }
  v36 = (PAL *)CFGetTypeID(cf);
  if (v36 != (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID(v36))
    goto LABEL_148;
  PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0]((PAL *)cf, v37);
  v39 = v82;
  v40 = BYTE4(v82) & 1;
  if ((~HIDWORD(v82) & 3) == 0)
    v40 = BYTE4(v82) & 1 | 2;
  if ((~HIDWORD(v82) & 5) == 0)
    v40 |= 4u;
  if ((~HIDWORD(v82) & 9) == 0)
    v40 |= 8u;
  if ((~HIDWORD(v82) & 0x11) != 0)
    v41 = v40;
  else
    v41 = v40 | 0x10;
  v43 = (v41 & 1) == 0 || v82 != 0;
  if (v81 >= 0)
    v44 = 5;
  else
    v44 = 9;
  v45 = !v43;
  if (v43)
  {
    v46 = v81;
  }
  else
  {
    v41 = v44;
    v46 = v81 >> 63;
  }
  if (v45)
    v39 = 1;
  v79 = v46;
  v80 = v39 | ((unint64_t)v41 << 32);
  PAL::softLinkCoreMediaCMSampleBufferGetDuration[0]((PAL *)cf, v38);
  v81 = WTF::MediaTime::operator+();
  v82 = v47;
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v79, a2) == 1)
  {
LABEL_88:
    *a4 = 0;
    return;
  }
LABEL_120:
  v65 = (PAL *)PAL::softLinkCoreMediaCMBufferQueueDequeueAndRetain(*(PAL **)(a1 + 24), v33);
  v67 = v65;
  if (v65)
  {
    v68 = (PAL *)CFGetTypeID(v65);
    if (v68 != (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID(v68))
      goto LABEL_148;
  }
  v69 = (const void *)PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0](v67, v66);
  *a4 = v69;
  if (v69)
    CFRetain(v69);
  v72 = (unsigned __int8 *)(a1 + 12);
  if (__ldaxr((unsigned __int8 *)(a1 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v72))
  {
    goto LABEL_139;
  }
  MEMORY[0x19AEA534C](a1 + 12);
LABEL_139:
  v76 = *(PAL **)(a1 + 32);
  if (v76)
    PAL::softLinkCoreMediaCMTimebaseSetTimerDispatchSourceToFireImmediately(v76, *(OpaqueCMTimebase **)(a1 + 56), v71);
  v77 = __ldxr(v72);
  if (v77 != 1)
  {
    __clrex();
    goto LABEL_145;
  }
  if (__stlxr(0, v72))
LABEL_145:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 12));
  WebCore::WebCoreDecompressionSession::maybeBecomeReadyForMoreMediaData((WebCore::WebCoreDecompressionSession *)a1, v70);
  if (v67)
    CFRelease(v67);
}

void sub_1952854F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10)
{
  const void *v10;
  unsigned __int8 *v11;
  int v13;
  const void *v14;

  v13 = __ldxr(v11);
  if (v13 == 1)
  {
    if (!__stlxr(0, v11))
    {
LABEL_6:
      v14 = *a10;
      *a10 = 0;
      if (v14)
        CFRelease(v14);
      if (v10)
        CFRelease(v10);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
  goto LABEL_6;
}

const __CFArray *WebCore::WebCoreDecompressionSession::increaseQosTier(WebCore::WebCoreDecompressionSession *this)
{
  unsigned __int8 *v2;
  const __CFArray *result;
  uint64_t v5;
  int v6;
  unsigned int v7;
  const void *ValueAtIndex;
  const __CFDictionary *v9;
  int v10;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]((char *)this + 12);
    goto LABEL_5;
  }
  if (__stxr(1u, v2))
    goto LABEL_4;
LABEL_5:
  result = (const __CFArray *)*((_QWORD *)this + 11);
  if (result)
  {
    v5 = *((int *)this + 24);
    result = (const __CFArray *)CFArrayGetCount(result);
    if ((uint64_t)result > v5 + 1)
    {
      v6 = *((_DWORD *)this + 24);
      v7 = v6 + 1;
      *((_DWORD *)this + 24) = v6 + 1;
      result = (const __CFArray *)*((_QWORD *)this + 11);
      if (result)
      {
        if (*((_QWORD *)this + 2) && v6 >= -1)
        {
          result = (const __CFArray *)CFArrayGetCount(result);
          if ((uint64_t)result > v7)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)this + 11), *((int *)this + 24));
            result = (const __CFArray *)WebCore::softLinkVideoToolboxVTSessionSetProperties(*((WebCore **)this + 2), ValueAtIndex, v9);
            atomic_store(0, (unsigned int *)this + 25);
          }
        }
      }
    }
  }
  v10 = __ldxr(v2);
  if (v10 != 1)
  {
    __clrex();
    return (const __CFArray *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return (const __CFArray *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void sub_19528566C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

const __CFArray *WebCore::WebCoreDecompressionSession::decreaseQosTier(WebCore::WebCoreDecompressionSession *this)
{
  unsigned __int8 *v2;
  const __CFArray *result;
  int v5;
  unsigned int v6;
  const void *ValueAtIndex;
  const __CFDictionary *v8;
  int v9;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]((char *)this + 12);
    goto LABEL_5;
  }
  if (__stxr(1u, v2))
    goto LABEL_4;
LABEL_5:
  result = (const __CFArray *)*((_QWORD *)this + 11);
  if (result)
  {
    v5 = *((_DWORD *)this + 24);
    v6 = v5 - 1;
    if (v5 >= 1)
    {
      *((_DWORD *)this + 24) = v6;
      if (*((_QWORD *)this + 2))
      {
        result = (const __CFArray *)CFArrayGetCount(result);
        if ((uint64_t)result > v6)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)this + 11), *((int *)this + 24));
          result = (const __CFArray *)WebCore::softLinkVideoToolboxVTSessionSetProperties(*((WebCore **)this + 2), ValueAtIndex, v8);
          atomic_store(0, (unsigned int *)this + 25);
        }
      }
    }
  }
  v9 = __ldxr(v2);
  if (v9 != 1)
  {
    __clrex();
    return (const __CFArray *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return (const __CFArray *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void sub_195285768(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebCore::WebCoreDecompressionSession::updateQosWithDecodeTimeStatistics(WebCore::WebCoreDecompressionSession *this, double a2, OpaqueCMTimebase *a3)
{
  unsigned __int8 *v5;
  PAL *v7;
  int v8;
  double Rate;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  double v13;

  v5 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v7 = (PAL *)*((_QWORD *)this + 4);
  if (v7)
    CFRetain(*((CFTypeRef *)this + 4));
  v8 = __ldxr(v5);
  if (v8 != 1)
  {
    __clrex();
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (!v7)
      return;
    goto LABEL_10;
  }
  if (__stlxr(0, v5))
    goto LABEL_18;
  if (!v7)
    return;
LABEL_10:
  Rate = PAL::softLinkCoreMediaCMTimebaseGetRate(v7, a3);
  if (Rate == 0.0)
    Rate = 1.0;
  *((double *)this + 13) = *((double *)this + 13) + (a2 - *((double *)this + 13)) * 0.1 * Rate;
  v10 = (unsigned int *)((char *)this + 100);
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 + 1;
  }
  while (__stlxr(v12, v10));
  if (v12 >= 0x3C)
  {
    v13 = *((double *)this + 13);
    if (v13 <= 1.0)
    {
      if (v13 < 0.5)
        WebCore::WebCoreDecompressionSession::decreaseQosTier(this);
    }
    else
    {
      WebCore::WebCoreDecompressionSession::increaseQosTier(this);
    }
    atomic_store(0, v10);
  }
  CFRelease(v7);
}

void sub_1952858CC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::createWebProcessGraphicsContextGL@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int16 v8;
  int v9;

  v4 = WTF::fastMalloc((WTF *)0x150);
  v7 = *(_QWORD *)a1;
  v8 = *(_WORD *)(a1 + 8);
  v9 = 0;
  WebCore::GraphicsContextGLCocoa::GraphicsContextGLCocoa(v4, &v7, (WTF::MachSendRight *)&v9);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v9);
  *(_QWORD *)v4 = &off_1E334FA10;
  LOBYTE(a1) = v7;
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E3350368;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = a1 ^ 1;
  *(_QWORD *)(v4 + 328) = v5;
  result = WebCore::GraphicsContextGLANGLE::initialize((WebCore::GraphicsContextGLANGLE *)v4);
  if ((result & 1) != 0)
  {
    *a2 = v4;
  }
  else
  {
    *a2 = 0;
    if (*(_DWORD *)(v4 + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      --*(_DWORD *)(v4 + 8);
  }
  return result;
}

void sub_1952859EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  _DWORD *v11;

  if (v11[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
  else
    --v11[2];
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ApplePayButtonCocoa::draw(uint64_t a1, uint64_t a2, float *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  NSString *v16;
  PAL *v17;
  unsigned int v18;
  CGContext *v19;
  int v20;
  PKPaymentButtonType v21;
  WTF::StringImpl *v22;
  const __CFString *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  CGRect v27;

  v6 = a3[4];
  if (v6 < a3[5])
    v6 = a3[5];
  v7 = a3[6];
  if (v7 < a3[7])
    v7 = a3[7];
  v8 = a3[8];
  if (v8 < a3[9])
    v8 = a3[9];
  v9 = a3[10];
  if (v9 < a3[11])
    v9 = a3[11];
  if (v6 < v7)
    v6 = v7;
  if (v6 < v8)
    v6 = v8;
  if (v6 >= v9)
    v10 = v6;
  else
    v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  if (!*(_BYTE *)(a2 + 343))
  {
    *(_BYTE *)(a2 + 343) = 1;
    *(_DWORD *)(a2 + 184) |= 0x1000u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
  v26 = 0xBF8000003F800000;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a2 + 632))(a2, &v26);
  v11 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v11 + 12) != 16)
  {
    __break(0xC471u);
    JUMPOUT(0x195285C5CLL);
  }
  v12 = *a3;
  v13 = a3[1];
  v14 = a3[2];
  v15 = a3[3];
  v17 = (PAL *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v18 = *(unsigned __int8 *)(v11 + 32) - 1;
  if (v18 > 0xD)
    v19 = 0;
  else
    v19 = (CGContext *)qword_1968DD800[(char)v18];
  v20 = *(unsigned __int8 *)(v11 + 33);
  if (v20 == 2)
    v21 = PKPaymentButtonTypeSetUp;
  else
    v21 = (unint64_t)(v20 == 1);
  v22 = *(WTF::StringImpl **)(v11 + 40);
  if (v22)
  {
    *(_DWORD *)v22 += 2;
    v23 = (const __CFString *)WTF::StringImpl::operator NSString *();
  }
  else
  {
    v23 = &stru_1E3487BC0;
  }
  v27.origin.x = v12;
  v27.origin.y = (float)-(float)(v13 + v15);
  v27.size.width = v14;
  v27.size.height = v15;
  PAL::softLinkPassKitCorePKDrawApplePayButtonWithCornerRadius(v17, v19, v27, 1.0, v10, v21, (PKPaymentButtonStyle)v23, v16);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v24);
    else
      *(_DWORD *)v22 -= 2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
}

void sub_195285C6C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;

  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 104))(v2, 1);
  _Unwind_Resume(a1);
}

_QWORD *WebCore::ControlFactoryCocoa::createPlatformApplePayButton@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E334F718;
  result[1] = a1;
  *a2 = result;
  return result;
}

uint64_t WebCore::FEColorMatrixCoreImageApplier::apply(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  const void *v13;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  unsigned int v28;
  float v29;
  uint64_t v30;
  __float2 v31;
  float v32;
  float v33;
  float v34;
  void *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  const void *v40;
  const void *v41;
  const void *v42;
  float v44;

  if (!*((_DWORD *)a3 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x195286274);
  }
  v12 = **a3;
  v13 = *(const void **)(v12 + 88);
  if (!v13)
    return 0;
  CFRetain(*(CFTypeRef *)(v12 + 88));
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(unsigned int *)(v17 + 84);
  if ((_DWORD)v18)
  {
    if (v18 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x19528627CLL);
    }
    v19 = WTF::fastMalloc((WTF *)(4 * v18));
    v20 = (float *)v19;
    v21 = *(unsigned int *)(v17 + 84);
    if ((_DWORD)v21)
    {
      v22 = 0;
      v23 = *(_QWORD *)(v17 + 72);
      v24 = 4 * v21;
      do
      {
        if (4 * v18 == v22)
        {
LABEL_74:
          __break(0xC471u);
          JUMPOUT(0x19528626CLL);
        }
        v25 = *(float *)(v23 + v22);
        v26 = -1.1755e-38;
        if (v25 <= -1.1755e-38 || v25 >= 0.0)
          v26 = *(float *)(v23 + v22);
        v28 = LODWORD(v25) - 1;
        v29 = 1.1755e-38;
        if (v28 >= 0x7FFFFF)
          v29 = v26;
        *(float *)(v19 + v22) = v29;
        v22 += 4;
      }
      while (v24 != v22);
    }
  }
  else
  {
    v20 = 0;
  }
  v30 = 0;
  switch(*(_BYTE *)(*(_QWORD *)(a1 + 8) + 64))
  {
    case 0:
    case 4:
      goto LABEL_48;
    case 2:
      if (!(_DWORD)v18)
      {
        __break(0xC471u);
        JUMPOUT(0x195286284);
      }
      v9 = (float)(*v20 * 0.787) + 0.213;
      v4 = (float)(*v20 * -0.715) + 0.715;
      v7 = (float)(*v20 * -0.072) + 0.072;
      v5 = (float)(*v20 * -0.213) + 0.213;
      v8 = (float)(*v20 * 0.285) + 0.715;
      v44 = (float)(*v20 * 0.928) + 0.072;
      v10 = v5;
      v6 = v7;
      v11 = v4;
      goto LABEL_22;
    case 3:
      if (!(_DWORD)v18)
      {
        __break(0xC471u);
        JUMPOUT(0x19528628CLL);
      }
      v31 = __sincosf_stret(*v20 * 0.017453);
      v9 = (float)((float)(v31.__cosval * 0.787) + 0.213) - (float)(v31.__sinval * 0.213);
      v32 = 0.715 - (float)(v31.__cosval * 0.715);
      v11 = v32 - (float)(v31.__sinval * 0.715);
      v33 = 0.072 - (float)(v31.__cosval * 0.072);
      v6 = v33 + (float)(v31.__sinval * 0.928);
      v34 = 0.213 - (float)(v31.__cosval * 0.213);
      v10 = v34 + (float)(v31.__sinval * 0.143);
      v8 = (float)((float)(v31.__cosval * 0.285) + 0.715) + (float)(v31.__sinval * 0.14);
      v7 = v33 + (float)(v31.__sinval * -0.283);
      v5 = v34 - (float)(v31.__sinval * 0.787);
      v4 = v32 + (float)(v31.__sinval * 0.715);
      v44 = (float)((float)(v31.__cosval * 0.928) + 0.072) + (float)(v31.__sinval * 0.072);
      goto LABEL_22;
    default:
LABEL_22:
      v35 = (void *)objc_msgSend(MEMORY[0x1E0C9DDB8], "filterWithName:", CFSTR("CIColorMatrix"));
      objc_msgSend(v35, "setValue:forKey:", v13, *MEMORY[0x1E0C9E1F8]);
      v30 = 0;
      switch(*(_BYTE *)(*(_QWORD *)(a1 + 8) + 64))
      {
        case 0:
        case 4:
          break;
        case 1:
          if (!(_DWORD)v18)
          {
            __break(0xC471u);
            JUMPOUT(0x195286294);
          }
          if ((_DWORD)v18 == 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19528629CLL);
          }
          if (v18 <= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1952862A4);
          }
          if ((_DWORD)v18 == 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1952862ACLL);
          }
          objc_msgSend(v35, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", *v20, v20[1], v20[2], v20[3]), CFSTR("inputRVector"));
          if (v18 <= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1952862B4);
          }
          if ((_DWORD)v18 == 6)
          {
            __break(0xC471u);
            JUMPOUT(0x1952862BCLL);
          }
          if (v18 <= 7)
          {
            __break(0xC471u);
            JUMPOUT(0x1952862C4);
          }
          if ((_DWORD)v18 == 8)
          {
            __break(0xC471u);
            JUMPOUT(0x1952862CCLL);
          }
          objc_msgSend(v35, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v20[5], v20[6], v20[7], v20[8]), CFSTR("inputGVector"));
          if (v18 <= 0xA)
          {
            __break(0xC471u);
            JUMPOUT(0x1952862D4);
          }
          if ((_DWORD)v18 == 11)
          {
            __break(0xC471u);
            JUMPOUT(0x1952862DCLL);
          }
          if (v18 <= 0xC)
          {
            __break(0xC471u);
            JUMPOUT(0x1952862E4);
          }
          if ((_DWORD)v18 == 13)
          {
            __break(0xC471u);
            JUMPOUT(0x1952862ECLL);
          }
          objc_msgSend(v35, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v20[10], v20[11], v20[12], v20[13]), CFSTR("inputBVector"));
          if (v18 <= 0xF)
          {
            __break(0xC471u);
            JUMPOUT(0x1952862F4);
          }
          if ((_DWORD)v18 == 16)
          {
            __break(0xC471u);
            JUMPOUT(0x1952862FCLL);
          }
          if (v18 <= 0x11)
          {
            __break(0xC471u);
            JUMPOUT(0x195286304);
          }
          if ((_DWORD)v18 == 18)
          {
            __break(0xC471u);
            JUMPOUT(0x19528630CLL);
          }
          objc_msgSend(v35, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v20[15], v20[16], v20[17], v20[18]), CFSTR("inputAVector"));
          if (v18 <= 0x13)
            goto LABEL_74;
          v37 = v20[9];
          v36 = v20[4];
          v38 = v20[14];
          v39 = v20[19];
LABEL_42:
          objc_msgSend(v35, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v36, v37, v38, v39), CFSTR("inputBiasVector"));
LABEL_43:
          v40 = (const void *)objc_msgSend(v35, "outputImage");
          v41 = v40;
          if (v40)
            CFRetain(v40);
          v42 = *(const void **)(a4 + 88);
          *(_QWORD *)(a4 + 88) = v41;
          if (v42)
            CFRelease(v42);
          v30 = 1;
          break;
        case 2:
        case 3:
          objc_msgSend(v35, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v9, v11, v6, 0.0), CFSTR("inputRVector"));
          objc_msgSend(v35, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v10, v8, v7, 0.0), CFSTR("inputGVector"));
          objc_msgSend(v35, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v5, v4, v44, 0.0), CFSTR("inputBVector"));
          v36 = 0.0;
          objc_msgSend(v35, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", 0.0, 0.0, 0.0, 1.0), CFSTR("inputAVector"));
          v37 = 0.0;
          v38 = 0.0;
          v39 = 0.0;
          goto LABEL_42;
        default:
          goto LABEL_43;
      }
LABEL_48:
      if (v20)
        WTF::fastFree((WTF *)v20, v16);
      CFRelease(v13);
      break;
  }
  return v30;
}

void sub_195286318(_Unwind_Exception *a1, void *a2)
{
  const void *v2;
  WTF *v3;

  if (v3)
    WTF::fastFree(v3, a2);
  CFRelease(v2);
  _Unwind_Resume(a1);
}

float WebCore::PlatformControl::sizeForBounds(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float WebCore::PlatformControl::rectForBounds(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9RetainPtrIP20opaqueCMSampleBufferEEiLj0EE11whenSettledIZN7WebCore27WebCoreDecompressionSession21maybeDecodeNextSampleEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS6_iEEE_vJSP_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E334F788;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9RetainPtrIP20opaqueCMSampleBufferEEiLj0EE11whenSettledIZN7WebCore27WebCoreDecompressionSession21maybeDecodeNextSampleEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS6_iEEE_vJSP_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E334F788;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9RetainPtrIP20opaqueCMSampleBufferEEiLj0EE11whenSettledIZN7WebCore27WebCoreDecompressionSession21maybeDecodeNextSampleEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS6_iEEE_vJSP_EE4callESP_(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned __int8 **v6;
  int v8;
  unsigned __int8 v9;
  unsigned int *v10;
  unsigned int v11;
  const void *v12;
  unsigned __int8 *v13;
  const void *v15;
  const void *v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v28;
  PAL *v29;
  int v30;
  uint64_t v31;
  int v32;
  PAL *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v39;
  uint64_t v40;
  WebCore::WebCoreDecompressionSession *v41;
  BOOL v42;
  int v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return;
  v6 = *(unsigned __int8 ***)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v6)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v6)
    return;
LABEL_15:
  v9 = atomic_load((unsigned __int8 *)(v5 + 224));
  if ((v9 & 1) != 0)
    goto LABEL_63;
  v10 = (unsigned int *)(v5 + 228);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  *(_BYTE *)(v5 + 192) = 0;
  *(_DWORD *)(v5 + 208) = 0;
  v12 = *(const void **)(v5 + 200);
  *(_QWORD *)(v5 + 200) = 0;
  if (v12)
    CFRelease(v12);
  if (*((_DWORD *)a2 + 2))
  {
    v13 = *(unsigned __int8 **)v5;
    if (__ldaxr(*(unsigned __int8 **)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_31;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_31:
    ++*((_QWORD *)v13 + 1);
    v21 = __ldxr(v13);
    if (v21 == 1)
    {
      if (!__stlxr(0, v13))
      {
LABEL_36:
        if (*((_DWORD *)a2 + 2) == 1)
        {
          v22 = *(_DWORD *)a2;
          v23 = *(_DWORD *)(a1 + 32);
          v24 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v24 = off_1E334F7B0;
          *(_QWORD *)(v24 + 8) = v5;
          *(_QWORD *)(v24 + 16) = v5;
          *(_DWORD *)(v24 + 24) = v22;
          *(_DWORD *)(v24 + 28) = v23;
          v47 = v24;
          WTF::ensureOnMainThread();
          v25 = v47;
          v47 = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          goto LABEL_62;
        }
LABEL_81:
        std::__throw_bad_variant_access[abi:sn180100]();
        __break(1u);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    goto LABEL_36;
  }
  if (*(_QWORD *)a2)
  {
    v15 = (const void *)PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0](*(PAL **)a2, a2);
    v16 = v15;
    if (v15)
      CFRetain(v15);
    v17 = atomic_load((unsigned __int8 *)(v5 + 244));
    if ((v17 & 1) == 0)
    {
      v18 = *(_QWORD *)(v5 + 48);
      v19 = *(unsigned __int8 **)v5;
      if (__ldaxr(*(unsigned __int8 **)v5))
      {
        __clrex();
      }
      else if (!__stxr(1u, v19))
      {
        goto LABEL_43;
      }
      MEMORY[0x19AEA534C](v19);
LABEL_43:
      ++*((_QWORD *)v19 + 1);
      v28 = __ldxr(v19);
      if (v28 == 1)
      {
        if (!__stlxr(0, v19))
          goto LABEL_48;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
LABEL_48:
      if (*((_DWORD *)a2 + 2))
        goto LABEL_81;
      v29 = *(PAL **)a2;
      *(_QWORD *)a2 = 0;
      v30 = *(_DWORD *)(a1 + 32);
      v31 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v31 = off_1E334F7D8;
      *(_QWORD *)(v31 + 8) = v5;
      *(_QWORD *)(v31 + 16) = v29;
      *(_QWORD *)(v31 + 24) = v16;
      *(_DWORD *)(v31 + 32) = v30;
      v47 = v31;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 32))(v18, &v47);
      goto LABEL_59;
    }
    v26 = *(unsigned __int8 **)v5;
    if (__ldaxr(*(unsigned __int8 **)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
      goto LABEL_52;
    }
    MEMORY[0x19AEA534C](v26);
LABEL_52:
    ++*((_QWORD *)v26 + 1);
    v32 = __ldxr(v26);
    if (v32 == 1)
    {
      if (!__stlxr(0, v26))
        goto LABEL_57;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_57:
    if (*((_DWORD *)a2 + 2))
      goto LABEL_81;
    v33 = *(PAL **)a2;
    *(_QWORD *)a2 = 0;
    v34 = *(_DWORD *)(a1 + 32);
    v35 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v35 = off_1E334F800;
    *(_QWORD *)(v35 + 8) = v5;
    *(_QWORD *)(v35 + 16) = v5;
    *(_QWORD *)(v35 + 24) = v33;
    *(_QWORD *)(v35 + 32) = v16;
    *(_DWORD *)(v35 + 40) = v34;
    v47 = v35;
    WTF::ensureOnMainThread();
LABEL_59:
    v36 = v47;
    v47 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
  WebCore::WebCoreDecompressionSession::maybeBecomeReadyForMoreMediaData((WebCore::WebCoreDecompressionSession *)v5, a2);
LABEL_62:
  WebCore::WebCoreDecompressionSession::maybeDecodeNextSample((WebCore::WebCoreDecompressionSession *)v5);
LABEL_63:
  v37 = *v6;
  if (__ldaxr(*v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v37))
  {
    goto LABEL_67;
  }
  MEMORY[0x19AEA534C](v37);
LABEL_67:
  v39 = *((_QWORD *)v37 + 1);
  v40 = v39 - 1;
  *((_QWORD *)v37 + 1) = v39 - 1;
  if (v39 == 1)
  {
    v46 = *((_QWORD *)v37 + 2);
    v41 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v37 + 3);
    *((_QWORD *)v37 + 3) = 0;
    v42 = v46 != 0;
  }
  else
  {
    v41 = 0;
    v42 = 1;
  }
  v43 = __ldxr(v37);
  if (v43 != 1)
  {
    __clrex();
LABEL_74:
    WTF::Lock::unlockSlow((WTF::Lock *)v37);
    if (v40)
      return;
    goto LABEL_75;
  }
  if (__stlxr(0, v37))
    goto LABEL_74;
  if (v40)
    return;
LABEL_75:
  if (v41)
  {
    WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v41);
    WTF::fastFree(v44, v45);
  }
  if (!v42)
    WTF::fastFree((WTF *)v37, a2);
}

void sub_19528692C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  unsigned __int8 **v11;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  WebCore::WebCoreDecompressionSession *v17;
  BOOL v18;
  int v19;
  WTF *v20;
  void *v21;
  uint64_t v22;

  if (v10)
    CFRelease(v10);
  v13 = *v11;
  if (__ldaxr(*v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
LABEL_8:
    v15 = *((_QWORD *)v13 + 1);
    v16 = v15 - 1;
    *((_QWORD *)v13 + 1) = v15 - 1;
    if (v15 == 1)
    {
      v22 = *((_QWORD *)v13 + 2);
      v17 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v13 + 3);
      *((_QWORD *)v13 + 3) = 0;
      v18 = v22 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr(v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, v13))
      {
LABEL_15:
        if (!v16)
        {
          if (v17)
          {
            WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v17);
            WTF::fastFree(v20, v21);
          }
          if (!v18)
            WTF::fastFree((WTF *)v13, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v13);
  goto LABEL_8;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore27WebCoreDecompressionSession21maybeDecodeNextSampleEvENK3__0clINSt12experimental15fundamentals_v38expectedINS_9RetainPtrIP20opaqueCMSampleBufferEEiEEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = off_1E334F7B0;
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore27WebCoreDecompressionSession21maybeDecodeNextSampleEvENK3__0clINSt12experimental15fundamentals_v38expectedINS_9RetainPtrIP20opaqueCMSampleBufferEEiEEEEDaOT_EUlvE_vJEED0Ev(unsigned __int8 ***a1, void *a2)
{
  void *v3;

  *a1 = (unsigned __int8 **)off_1E334F7B0;
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore27WebCoreDecompressionSession21maybeDecodeNextSampleEvENK3__0clINSt12experimental15fundamentals_v38expectedINS_9RetainPtrIP20opaqueCMSampleBufferEEiEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD *)(v2 + 216);
  if (result)
  {
    if (*(_DWORD *)(a1 + 28) == *(_DWORD *)(v2 + 112))
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, *(unsigned int *)(a1 + 24));
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore27WebCoreDecompressionSession21maybeDecodeNextSampleEvENK3__0clINSt12experimental15fundamentals_v38expectedINS_9RetainPtrIP20opaqueCMSampleBufferEEiEEEEDaOT_EUlvE0_vJEED1Ev(uint64_t a1, void *a2)
{
  const void *v3;
  const void *v4;

  *(_QWORD *)a1 = off_1E334F7D8;
  v3 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    CFRelease(v4);
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore27WebCoreDecompressionSession21maybeDecodeNextSampleEvENK3__0clINSt12experimental15fundamentals_v38expectedINS_9RetainPtrIP20opaqueCMSampleBufferEEiEEEEDaOT_EUlvE0_vJEED0Ev(uint64_t a1, void *a2)
{
  const void *v3;
  const void *v4;
  void *v5;

  *(_QWORD *)a1 = off_1E334F7D8;
  v3 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    CFRelease(v4);
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return WTF::fastFree((WTF *)a1, v5);
}

void _ZN3WTF6Detail15CallableWrapperIZZN7WebCore27WebCoreDecompressionSession21maybeDecodeNextSampleEvENK3__0clINSt12experimental15fundamentals_v38expectedINS_9RetainPtrIP20opaqueCMSampleBufferEEiEEEEDaOT_EUlvE0_vJEE4callEv(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v3;
  WebCore *v5;
  BOOL v6;
  WebCore *v7;
  __CVBuffer *v8;
  uint64_t IOSurface;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(v3 + 112))
  {
    v5 = *(WebCore **)(a1 + 24);
    if (v5)
      v6 = *(_DWORD *)(v3 + 264) == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = (WebCore *)CFGetTypeID(*(CFTypeRef *)(a1 + 24));
      if (v7 == (WebCore *)WebCore::softLinkCoreVideoCVPixelBufferGetTypeID(v7))
      {
        IOSurface = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface(v5, v8);
        if (IOSurface)
          WebCore::IOSurface::setOwnershipIdentity(IOSurface, (int *)(v3 + 264));
      }
    }
    WebCore::WebCoreDecompressionSession::enqueueDecodedSample(*(WebCore::WebCoreDecompressionSession **)(a1 + 8), *(opaqueCMSampleBuffer **)(a1 + 16), a3);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore27WebCoreDecompressionSession21maybeDecodeNextSampleEvENK3__0clINSt12experimental15fundamentals_v38expectedINS_9RetainPtrIP20opaqueCMSampleBufferEEiEEEEDaOT_EUlvE1_vJEED1Ev(uint64_t a1, void *a2)
{
  const void *v3;
  const void *v4;

  *(_QWORD *)a1 = off_1E334F800;
  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    CFRelease(v4);
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore27WebCoreDecompressionSession21maybeDecodeNextSampleEvENK3__0clINSt12experimental15fundamentals_v38expectedINS_9RetainPtrIP20opaqueCMSampleBufferEEiEEEEDaOT_EUlvE1_vJEED0Ev(uint64_t a1, void *a2)
{
  const void *v3;
  const void *v4;
  void *v5;

  *(_QWORD *)a1 = off_1E334F800;
  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    CFRelease(v4);
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore27WebCoreDecompressionSession21maybeDecodeNextSampleEvENK3__0clINSt12experimental15fundamentals_v38expectedINS_9RetainPtrIP20opaqueCMSampleBufferEEiEEEEDaOT_EUlvE1_vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  WebCore *v3;
  BOOL v4;
  WebCore *v5;
  __CVBuffer *v6;
  uint64_t IOSurface;

  v1 = *(_QWORD *)(result + 16);
  if (*(_DWORD *)(result + 40) == *(_DWORD *)(v1 + 112) && *(_QWORD *)(v1 + 80))
  {
    v2 = result;
    v3 = *(WebCore **)(result + 32);
    if (v3)
      v4 = *(_DWORD *)(v1 + 264) == 0;
    else
      v4 = 1;
    if (!v4)
    {
      v5 = (WebCore *)CFGetTypeID(*(CFTypeRef *)(result + 32));
      if (v5 == (WebCore *)WebCore::softLinkCoreVideoCVPixelBufferGetTypeID(v5))
      {
        IOSurface = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface(v3, v6);
        if (IOSurface)
          WebCore::IOSurface::setOwnershipIdentity(IOSurface, (int *)(v1 + 264));
      }
    }
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 80) + 16))(*(_QWORD *)(v1 + 80), v2 + 24);
  }
  return result;
}

_QWORD *WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E334F828;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E334F858;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

void sub_195287058(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E334F828;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E334F858;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

void sub_195287170(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  _BYTE *v6;
  BOOL v7;
  _BYTE *v8;
  const char *v9;
  WTF::StringImpl *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::Logger *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  unsigned __int8 *v55;
  uint64_t *v57;
  int v58;
  WTF::NativePromiseBase *v59;
  void *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v64;
  int v65;
  int v66;
  _BYTE *v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  char *v73;
  WTF::Logger *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  __int128 buf;
  const char *v93;
  WTF::StringImpl *v94;
  int v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  int v105;
  _QWORD v106[3];

  v106[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a3 + 8);
  v6 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v6)
    v7 = v6[16] >= 4u;
  else
    v7 = 0;
  if (v7)
  {
    v8 = v6;
    if (v5)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    v73 = (char *)v9;
    WTF::String::String((WTF::String *)&v84, v9);
    WTF::String::String((WTF::String *)&v83, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v81, "[");
    WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v80, a2);
    WTF::String::String((WTF::String *)&v79, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v77, "]");
    v75 = v83;
    v91 = v82;
    *(_QWORD *)&buf = v84;
    v10 = (WTF::StringImpl *)v80;
    v90 = v81;
    v88 = v79;
    v89 = v80;
    v86 = v77;
    v87 = v78;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v75, (uint64_t *)&v91, (uint64_t *)&v90, &v89, (uint64_t *)&v88, (uint64_t *)&v87, (uint64_t *)&v86, &v85);
    if (!v85)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v77;
    v77 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v78;
    v78 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v79;
    v79 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v80 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v84;
    v84 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *((_QWORD *)v8 + 4);
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v21)
    {
      WTF::String::utf8();
      v23 = v75 ? (char *)v75 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v23;
      _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v21 = (uint64_t)v75;
      v75 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          v21 = WTF::fastFree((WTF *)v21, v22);
        else
          --*(_DWORD *)v21;
      }
    }
    if (*v8 && v8[16] >= 4u)
    {
      v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v25 = *v24;
        if ((v25 & 1) != 0)
          break;
        v26 = __ldaxr(v24);
        if (v26 == v25)
        {
          if (!__stxr(v25 | 1, v24))
          {
            v27 = WTF::Logger::observers((WTF::Logger *)v21);
            v28 = *(unsigned int *)(v27 + 12);
            if ((_DWORD)v28)
            {
              v29 = *(uint64_t **)v27;
              v72 = *(_QWORD *)v27 + 8 * v28;
              do
              {
                v30 = *v29;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v73);
                LODWORD(v93) = 0;
                WTF::String::String((WTF::String *)&v94, " then() call made from ");
                v95 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v97 = 0;
                WTF::String::String((WTF::String *)&v98, "[");
                v99 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v100, a2);
                v101 = 0;
                WTF::String::String((WTF::String *)&v102, " callback:");
                v103 = 0;
                WTF::LogArgument<void const*>::toString();
                v105 = 0;
                WTF::String::String((WTF::String *)v106, "]");
                v75 = 0;
                v76 = 0;
                v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v76) = 8;
                v75 = v31;
                v32 = HIDWORD(v76);
                *((_DWORD *)v31 + 4 * HIDWORD(v76)) = buf;
                v33 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v31 + 2 * v32 + 1) = v33;
                *((_DWORD *)v31 + 4 * (v32 + 1)) = (_DWORD)v93;
                v34 = v94;
                if (v94)
                  *(_DWORD *)v94 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
                *((_DWORD *)v31 + 4 * (v32 + 2)) = v95;
                v35 = v96;
                if (v96)
                  *(_DWORD *)v96 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
                *((_DWORD *)v31 + 4 * (v32 + 3)) = v97;
                v36 = v98;
                if (v98)
                  *(_DWORD *)v98 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
                *((_DWORD *)v31 + 4 * (v32 + 4)) = v99;
                v37 = v100;
                if (v100)
                  *(_DWORD *)v100 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
                *((_DWORD *)v31 + 4 * (v32 + 5)) = v101;
                v38 = v102;
                if (v102)
                  *(_DWORD *)v102 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 5) + 1) = v38;
                *((_DWORD *)v31 + 4 * (v32 + 6)) = v103;
                v39 = v104;
                if (v104)
                  *(_DWORD *)v104 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 6) + 1) = v39;
                *((_DWORD *)v31 + 4 * (v32 + 7)) = v105;
                v40 = v106[0];
                if (v106[0])
                  *(_DWORD *)v106[0] += 2;
                *((_QWORD *)v31 + 2 * (v32 + 7) + 1) = v40;
                HIDWORD(v76) = v32 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, v8, 4, &v75);
                v41 = v75;
                if (HIDWORD(v76))
                {
                  v42 = 16 * HIDWORD(v76);
                  v43 = (WTF::StringImpl **)((char *)v75 + 8);
                  do
                  {
                    v44 = *v43;
                    *v43 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    v43 += 2;
                    v42 -= 16;
                  }
                  while (v42);
                  v41 = v75;
                }
                if (v41)
                {
                  v75 = 0;
                  LODWORD(v76) = 0;
                  WTF::fastFree(v41, v22);
                }
                v45 = (WTF::StringImpl *)v106[0];
                v106[0] = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v104;
                v104 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v102;
                v102 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v100;
                v100 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v98;
                v98 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v96;
                v96 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v94;
                v94 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                ++v29;
              }
              while (v29 != (uint64_t *)v72);
            }
            v53 = __ldxr(v24);
            if (v53 == 1)
            {
              if (!__stlxr(0, v24))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v54 = v85;
    v85 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  v55 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v55))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_123:
  v57 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v58 = __ldxr(v55);
  if (v58 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v55))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v59 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v57)
    goto LABEL_145;
  buf = 0uLL;
  v93 = "<chained completion promise>";
  v94 = 0;
  v61 = *v57;
  if (!*v57)
  {
    v64 = 0;
LABEL_141:
    v67 = (_BYTE *)WTF::NativePromiseBase::logChannel(v59);
    if (*v67 && v67[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v67, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, " ignored already resolved or rejected ", v64);
    goto LABEL_145;
  }
  v62 = (unsigned __int8 *)(v61 + 48);
  if (__ldaxr((unsigned __int8 *)(v61 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v62))
  {
    goto LABEL_135;
  }
  v59 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v61 + 48);
LABEL_135:
  v65 = *(_DWORD *)(v61 + 64);
  v66 = __ldxr(v62);
  if (v66 == 1)
  {
    if (!__stlxr(0, v62))
      goto LABEL_140;
  }
  else
  {
    __clrex();
  }
  v59 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v62);
LABEL_140:
  v64 = *v57;
  if (v65)
    goto LABEL_141;
  WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v57, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_145:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v57)
  {
    if (*v57)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v57);
      v68 = (unsigned int *)*v57;
      *v57 = 0;
      if (v68)
      {
        v69 = v68 + 2;
        do
        {
          v70 = __ldaxr(v69);
          v71 = v70 - 1;
        }
        while (__stlxr(v71, v69));
        if (!v71)
        {
          atomic_store(1u, v68 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 16))(v68);
        }
      }
    }
    else
    {
      *v57 = 0;
    }
    return WTF::fastFree((WTF *)v57, v60);
  }
  return result;
}

void sub_195287B80(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,int a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37)
{
  unsigned __int8 *v37;
  int v39;

  v39 = __ldxr(v37);
  if (v39 == 1)
  {
    if (!__stlxr(0, v37))
    {
LABEL_6:
      if (a37)
      {
        if (*(_DWORD *)a37 == 2)
          WTF::StringImpl::destroy(a37, a2);
        else
          *(_DWORD *)a37 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v16)
  {
    v5 = *((_DWORD *)v16 + 1);
    if (v15)
      goto LABEL_3;
LABEL_29:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = 0;
  if (!v15)
    goto LABEL_29;
LABEL_3:
  v6 = *((_DWORD *)v15 + 1);
  if (v6 < 0)
  {
LABEL_30:
    *a1 = 0;
LABEL_31:
    __break(0xC471u);
    return result;
  }
LABEL_4:
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    goto LABEL_30;
  v7 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v7;
  if (v5 < 0)
    goto LABEL_30;
  if (v10)
    goto LABEL_30;
  v7 = __OFADD__(v5, v9);
  v11 = v5 + v9;
  if (v7)
    goto LABEL_30;
  result = (v11 + 13);
  if (__OFADD__(v11, 13))
    goto LABEL_30;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v12, "NativePromise", 0xDu, (uint64_t)v16, 60, v15, 62, &v17);
  v14 = v17;
  *a1 = v17;
  if (!v14)
    goto LABEL_31;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = (uint64_t)v16;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      return WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  return result;
}

void sub_19528815C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(char *result, int8x16_t *a2, int a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  char *v11;
  char *v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;
  int8x16_t *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  char *v35;
  char *v36;
  int8x16_t *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int16 v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;

  v11 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v12 = &result[2 * (a3 & 0xFFFFFFC0)];
    v13 = 0uLL;
    do
    {
      v51.val[0] = *a2;
      v14 = a2[1];
      v54.val[0] = a2[2];
      v15 = a2[3];
      a2 += 4;
      v16 = v15;
      v54.val[1] = 0uLL;
      v57.val[0] = v14;
      v51.val[1] = 0uLL;
      v17 = result;
      vst2q_s8(v17, v51);
      v17 += 32;
      v57.val[1] = 0uLL;
      vst2q_s8(v17, v57);
      v18 = result + 64;
      vst2q_s8(v18, v54);
      v19 = result + 96;
      vst2q_s8(v19, *(int8x16x2_t *)(&v13 - 1));
      result += 128;
    }
    while (result != v12);
    result = v12;
  }
  while (result != v11)
  {
    v20 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v20;
    result += 2;
  }
  if (a4)
  {
    v21 = *(int8x16_t **)(a4 + 8);
    v22 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v23 = &v11[2 * v22];
      if (v22 >= 0x40)
      {
        v24 = &v11[2 * (v22 & 0xFFFFFFC0)];
        v26 = 0uLL;
        v27 = v11;
        do
        {
          v52.val[0] = *v21;
          v28 = v21[1];
          v55.val[0] = v21[2];
          v29 = v21[3];
          v21 += 4;
          v30 = v29;
          v55.val[1] = 0uLL;
          v58.val[0] = v28;
          v52.val[1] = 0uLL;
          v31 = v27;
          vst2q_s8(v31, v52);
          v31 += 32;
          v58.val[1] = 0uLL;
          vst2q_s8(v31, v58);
          v32 = v27 + 64;
          vst2q_s8(v32, v55);
          v33 = v27 + 96;
          vst2q_s8(v33, *(int8x16x2_t *)(&v26 - 1));
          v27 += 128;
        }
        while (v27 != v24);
      }
      else
      {
        v24 = v11;
      }
      while (v24 != v23)
      {
        v34 = v21->u8[0];
        v21 = (int8x16_t *)((char *)v21 + 1);
        *(_WORD *)v24 = v34;
        v24 += 2;
      }
    }
    else if ((_DWORD)v22 == 1)
    {
      *(_WORD *)v11 = v21->i16[0];
    }
    else if ((_DWORD)v22)
    {
      result = (char *)memcpy(v11, v21, 2 * v22);
    }
    v25 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v25 = 0;
  }
  v35 = &v11[2 * v25];
  *(_WORD *)v35 = a5;
  v36 = v35 + 2;
  if (a6)
  {
    v37 = *(int8x16_t **)(a6 + 8);
    v38 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) != 0)
    {
      v39 = &v36[2 * v38];
      if (v38 >= 0x40)
      {
        v40 = &v36[2 * (v38 & 0xFFFFFFC0)];
        v42 = 0uLL;
        v43 = v36;
        do
        {
          v53.val[0] = *v37;
          v44 = v37[1];
          v56.val[0] = v37[2];
          v45 = v37[3];
          v37 += 4;
          v46 = v45;
          v56.val[1] = 0uLL;
          v59.val[0] = v44;
          v53.val[1] = 0uLL;
          v47 = v43;
          vst2q_s8(v47, v53);
          v47 += 32;
          v59.val[1] = 0uLL;
          vst2q_s8(v47, v59);
          v48 = v43 + 64;
          vst2q_s8(v48, v56);
          v49 = v43 + 96;
          vst2q_s8(v49, *(int8x16x2_t *)(&v42 - 1));
          v43 += 128;
        }
        while (v43 != v40);
      }
      else
      {
        v40 = v36;
      }
      while (v40 != v39)
      {
        v50 = v37->u8[0];
        v37 = (int8x16_t *)((char *)v37 + 1);
        *(_WORD *)v40 = v50;
        v40 += 2;
      }
    }
    else if ((_DWORD)v38 == 1)
    {
      *(_WORD *)v36 = v37->i16[0];
    }
    else if ((_DWORD)v38)
    {
      result = (char *)memcpy(v36, v37, 2 * v38);
    }
    v41 = *(unsigned int *)(a6 + 4);
  }
  else
  {
    v41 = 0;
  }
  *(_WORD *)&v36[2 * v41] = a7;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS5_4thenIZNS3_27WebCoreDecompressionSession12decodeSampleEP20opaqueCMSampleBufferbE3__0ZNS8_12decodeSampleESA_bE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_OT0_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_EESD_SF_SH_SN_EUlSS_E_NS_3RefINS2_INS_9RetainPtrISA_EEiLj0EEENS_12RawPtrTraitsISY_EENS_21DefaultRefDerefTraitsISY_EEEEJSS_EED1Ev(uint64_t a1, void *a2)
{
  const void *v3;

  *(_QWORD *)a1 = off_1E334F888;
  v3 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    CFRelease(v3);
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS5_4thenIZNS3_27WebCoreDecompressionSession12decodeSampleEP20opaqueCMSampleBufferbE3__0ZNS8_12decodeSampleESA_bE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_OT0_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_EESD_SF_SH_SN_EUlSS_E_NS_3RefINS2_INS_9RetainPtrISA_EEiLj0EEENS_12RawPtrTraitsISY_EENS_21DefaultRefDerefTraitsISY_EEEEJSS_EED0Ev(uint64_t a1, void *a2)
{
  const void *v3;
  void *v4;

  *(_QWORD *)a1 = off_1E334F888;
  v3 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    CFRelease(v3);
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return WTF::fastFree((WTF *)a1, v4);
}

void _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS5_4thenIZNS3_27WebCoreDecompressionSession12decodeSampleEP20opaqueCMSampleBufferbE3__0ZNS8_12decodeSampleESA_bE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_OT0_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_EESD_SF_SH_SN_EUlSS_E_NS_3RefINS2_INS_9RetainPtrISA_EEiLj0EEENS_12RawPtrTraitsISY_EENS_21DefaultRefDerefTraitsISY_EEEEJSS_EE4callESS_(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X8>)
{
  __int128 v3;
  const char *v4;
  uint64_t v5;
  int v6;

  if (*(_BYTE *)(a2 + 1))
  {
    v6 = -12913;
    v3 = 0uLL;
    v4 = "operator()";
    v5 = 0;
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::createAndReject<$_13,std::enable_if<true,void>>(a3, &v6, &v3);
  }
  else
  {
    WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_0::operator()((uint64_t *)a3, a1 + 8);
  }
}

_QWORD *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E334F8B0;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E3205AE8;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

void sub_1952885A0(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E334F8B0;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E3205AE8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

void sub_1952886B8(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  unsigned int **v12;
  int v13;
  WTF::NativePromiseBase *v14;
  void *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  BOOL v24;
  WTF::StringImpl *v25;
  uint64_t result;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  WTF::Logger *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned __int8 v72;
  uint64_t v73;
  unsigned __int8 *v74;
  _BYTE *v76;
  int v77;
  unsigned int *v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _OWORD *v83;
  unsigned int **v84;
  unsigned int *v85;
  __int128 v86;
  int v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  uint64_t v97;
  _QWORD v98[4];
  uint64_t v99;
  WTF::Logger *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  __int128 buf;
  int v117;
  WTF::StringImpl *v118;
  int v119;
  WTF::StringImpl *v120;
  int v121;
  WTF::StringImpl *v122;
  int v123;
  WTF::StringImpl *v124;
  int v125;
  WTF::StringImpl *v126;
  int v127;
  WTF::StringImpl *v128;
  int v129;
  _QWORD v130[3];

  v130[1] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a3 + 1);
  *(_QWORD *)&buf = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)&buf, "]");
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_14:
  v12 = *(unsigned int ***)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v14 = (WTF::NativePromiseBase *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(&v99, *(_QWORD *)(a1 + 72), a3);
  if (!v12)
    goto LABEL_170;
  v16 = v99;
  v98[0] = 0;
  v98[1] = 0;
  v98[2] = "<chained completion promise>";
  v98[3] = 0;
  v17 = (unsigned __int8 *)(v99 + 48);
  if (__ldaxr((unsigned __int8 *)(v99 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_24;
  }
  v14 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v17);
LABEL_24:
  *(_BYTE *)(v16 + 120) = 1;
  v19 = *v12;
  if (*v12)
  {
    v20 = v19 + 2;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v96 = v19;
  v22 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v14);
  v23 = v22;
  if (*v22)
    v24 = v22[16] >= 4u;
  else
    v24 = 0;
  if (!v24)
    goto LABEL_142;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v98);
  WTF::String::String((WTF::String *)&v107, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v106, v16);
  WTF::String::String((WTF::String *)&v105, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v104, (uint64_t)v19);
  WTF::String::String((WTF::String *)&v103, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v102, "]");
  v100 = v107;
  v115 = v106;
  *(_QWORD *)&buf = v108;
  v113 = v104;
  v114 = v105;
  v112 = v103;
  v110 = v102;
  v111 = v25;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v100, (uint64_t *)&v115, (uint64_t *)&v114, (uint64_t *)&v113, (uint64_t *)&v112, (uint64_t *)&v111, (uint64_t *)&v110, &v109);
  if (!v109)
  {
    __break(0xC471u);
    return result;
  }
  v28 = v102;
  v102 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::destroy(v28, v27);
      if (!v25)
        goto LABEL_39;
      goto LABEL_37;
    }
    *(_DWORD *)v28 -= 2;
  }
  if (!v25)
    goto LABEL_39;
LABEL_37:
  if (*(_DWORD *)v25 == 2)
    WTF::StringImpl::destroy(v25, v27);
  else
    *(_DWORD *)v25 -= 2;
LABEL_39:
  v29 = v103;
  v103 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v27);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v104;
  v104 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v27);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v105;
  v105 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v27);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v106;
  v106 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v27);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v107;
  v107 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v27);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v108;
  v108 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v27);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = *((_QWORD *)v23 + 4);
  v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v36)
  {
    WTF::String::utf8();
    v38 = v100 ? (char *)v100 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v38;
    _os_log_impl(&dword_1940B8000, v35, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v36 = (uint64_t)v100;
    v100 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
        v36 = WTF::fastFree((WTF *)v36, v37);
      else
        --*(_DWORD *)v36;
    }
  }
  if (*v23 && v23[16] >= 4u)
  {
    v39 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v40 = *v39;
      if ((v40 & 1) != 0)
        break;
      v41 = __ldaxr(v39);
      if (v41 == v40)
      {
        if (!__stxr(v40 | 1, v39))
        {
          v42 = WTF::Logger::observers((WTF::Logger *)v36);
          v43 = *(unsigned int *)(v42 + 12);
          if ((_DWORD)v43)
          {
            v44 = *(uint64_t **)v42;
            v97 = *(_QWORD *)v42 + 8 * v43;
            do
            {
              v45 = *v44;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v98);
              v117 = 0;
              WTF::String::String((WTF::String *)&v118, " invoking chainTo() [");
              v119 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v120, v16);
              v121 = 0;
              WTF::String::String((WTF::String *)&v122, " chainedPromise:");
              v123 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v124, (uint64_t)v19);
              v125 = 0;
              WTF::String::String((WTF::String *)&v126, " isNothing:");
              v127 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v128 = v115;
              v129 = 0;
              WTF::String::String((WTF::String *)v130, "]");
              v100 = 0;
              v101 = 0;
              v46 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v101) = 8;
              v100 = v46;
              v47 = HIDWORD(v101);
              *((_DWORD *)v46 + 4 * HIDWORD(v101)) = buf;
              v48 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v46 + 2 * v47 + 1) = v48;
              *((_DWORD *)v46 + 4 * (v47 + 1)) = v117;
              v49 = v118;
              if (v118)
                *(_DWORD *)v118 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 1) + 1) = v49;
              *((_DWORD *)v46 + 4 * (v47 + 2)) = v119;
              v50 = v120;
              if (v120)
                *(_DWORD *)v120 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 2) + 1) = v50;
              *((_DWORD *)v46 + 4 * (v47 + 3)) = v121;
              v51 = v122;
              if (v122)
                *(_DWORD *)v122 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 3) + 1) = v51;
              *((_DWORD *)v46 + 4 * (v47 + 4)) = v123;
              v52 = v124;
              if (v124)
                *(_DWORD *)v124 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 4) + 1) = v52;
              *((_DWORD *)v46 + 4 * (v47 + 5)) = v125;
              v53 = v126;
              if (v126)
                *(_DWORD *)v126 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 5) + 1) = v53;
              *((_DWORD *)v46 + 4 * (v47 + 6)) = v127;
              v54 = v128;
              if (v128)
                *(_DWORD *)v128 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 6) + 1) = v54;
              *((_DWORD *)v46 + 4 * (v47 + 7)) = v129;
              v55 = v130[0];
              if (v130[0])
                *(_DWORD *)v130[0] += 2;
              *((_QWORD *)v46 + 2 * (v47 + 7) + 1) = v55;
              HIDWORD(v101) = v47 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v45 + 16))(v45, v23, 4, &v100);
              v56 = v100;
              if (HIDWORD(v101))
              {
                v57 = 16 * HIDWORD(v101);
                v58 = (WTF::StringImpl **)((char *)v100 + 8);
                do
                {
                  v59 = *v58;
                  *v58 = 0;
                  if (v59)
                  {
                    if (*(_DWORD *)v59 == 2)
                      WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v37);
                    else
                      *(_DWORD *)v59 -= 2;
                  }
                  v58 += 2;
                  v57 -= 16;
                }
                while (v57);
                v56 = v100;
                v19 = v96;
              }
              if (v56)
              {
                v100 = 0;
                LODWORD(v101) = 0;
                WTF::fastFree(v56, v37);
              }
              v60 = (WTF::StringImpl *)v130[0];
              v130[0] = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v60 -= 2;
              }
              v61 = v128;
              v128 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v61 -= 2;
              }
              v62 = v126;
              v126 = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                  WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v62 -= 2;
              }
              v63 = v124;
              v124 = 0;
              if (v63)
              {
                if (*(_DWORD *)v63 == 2)
                  WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v63 -= 2;
              }
              v64 = v122;
              v122 = 0;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2)
                  WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v64 -= 2;
              }
              v65 = v120;
              v120 = 0;
              if (v65)
              {
                if (*(_DWORD *)v65 == 2)
                  WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v65 -= 2;
              }
              v66 = v118;
              v118 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                  WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v66 -= 2;
              }
              v67 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v67)
              {
                if (*(_DWORD *)v67 == 2)
                  WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v67 -= 2;
              }
              ++v44;
            }
            while (v44 != (uint64_t *)v97);
          }
          v68 = __ldxr(v39);
          if (v68 == 1)
          {
            if (!__stlxr(0, v39))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v22 = (unsigned __int8 *)v109;
  v109 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      v22 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v22, (WTF::StringImpl *)v37);
      if (!v19)
        goto LABEL_147;
      goto LABEL_143;
    }
    *(_DWORD *)v22 -= 2;
  }
LABEL_142:
  if (!v19)
    goto LABEL_147;
LABEL_143:
  v69 = v19 + 2;
  do
  {
    v70 = __ldaxr(v69);
    v71 = v70 - 1;
  }
  while (__stlxr(v71, v69));
  if (!v71)
  {
    atomic_store(1u, v19 + 2);
    v22 = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
  }
LABEL_147:
  v72 = atomic_load((unsigned __int8 *)(v16 + 121));
  v73 = (uint64_t)*v12;
  v74 = (unsigned __int8 *)(*v12 + 12);
  if (__ldaxr(v74))
  {
    __clrex();
LABEL_150:
    v22 = (unsigned __int8 *)MEMORY[0x19AEA534C](v74);
    goto LABEL_151;
  }
  if (__stxr(1u, v74))
    goto LABEL_150;
LABEL_151:
  v76 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v22);
  if (*v76 && v76[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)v76, (WTF::Logger::LogSiteIdentifier *)v98, " runSynchronouslyOnTarget ", v73);
  atomic_store(v72, (unsigned __int8 *)(v73 + 121));
  v77 = __ldxr(v74);
  if (v77 != 1)
  {
    __clrex();
    goto LABEL_158;
  }
  if (__stlxr(0, v74))
LABEL_158:
    WTF::Lock::unlockSlow((WTF::Lock *)v74);
  if (*(_DWORD *)(v16 + 72))
  {
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::settleChainedPromise(v16, v12);
  }
  else
  {
    v78 = (unsigned int *)(v16 + 104);
    v79 = *(unsigned int *)(v16 + 116);
    if ((_DWORD)v79 == *(_DWORD *)(v16 + 112))
    {
      v80 = WTF::Vector<WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v78, v79 + 1, (unint64_t)v12);
      v81 = (_QWORD *)(*(_QWORD *)(v16 + 104) + 40 * *(unsigned int *)(v16 + 116));
      v82 = *(_QWORD *)v80;
      *(_QWORD *)v80 = 0;
      *v81 = v82;
      v83 = v81 + 1;
    }
    else
    {
      v84 = (unsigned int **)(*(_QWORD *)v78 + 40 * v79);
      v85 = *v12;
      *v12 = 0;
      *v84 = v85;
      v83 = v84 + 1;
      v80 = (unint64_t)v12;
    }
    v86 = *(_OWORD *)(v80 + 24);
    *v83 = *(_OWORD *)(v80 + 8);
    v83[1] = v86;
    ++*(_DWORD *)(v16 + 116);
  }
  v87 = __ldxr(v17);
  if (v87 != 1)
  {
    __clrex();
    goto LABEL_169;
  }
  if (__stlxr(0, v17))
LABEL_169:
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
LABEL_170:
  v88 = (unsigned int *)v99;
  v99 = 0;
  if (v88)
  {
    v89 = v88 + 2;
    do
    {
      v90 = __ldaxr(v89);
      v91 = v90 - 1;
    }
    while (__stlxr(v91, v89));
    if (!v91)
    {
      atomic_store(1u, v88 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 16))(v88);
    }
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    if (*v12)
    {
      WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead((uint64_t)*v12);
      v92 = *v12;
      *v12 = 0;
      if (v92)
      {
        v93 = v92 + 2;
        do
        {
          v94 = __ldaxr(v93);
          v95 = v94 - 1;
        }
        while (__stlxr(v95, v93));
        if (!v95)
        {
          atomic_store(1u, v92 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v92 + 16))(v92);
        }
      }
    }
    else
    {
      *v12 = 0;
    }
    return WTF::fastFree((WTF *)v12, v15);
  }
  return result;
}

void sub_19528931C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::Lock *a18, WTF *a19, unsigned int *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned int *a34,WTF *a35,int a36,int a37,WTF::StringImpl *a38,WTF::StringImpl *a39,WTF::StringImpl *a40,WTF::StringImpl *a41,WTF::StringImpl *a42,WTF::StringImpl *a43,uint64_t a44,WTF::StringImpl *a45)
{
  unsigned __int8 *v45;
  int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;

  v47 = __ldxr(v45);
  if (v47 == 1)
  {
    if (!__stlxr(0, v45))
    {
LABEL_6:
      if (a45)
      {
        if (*(_DWORD *)a45 == 2)
          WTF::StringImpl::destroy(a45, a2);
        else
          *(_DWORD *)a45 -= 2;
      }
      if (a20)
      {
        v48 = a20 + 2;
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          atomic_store(1u, a20 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a20 + 16))(a20);
        }
      }
      v51 = __ldxr((unsigned __int8 *)a18);
      if (v51 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)a18))
          goto LABEL_19;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(a18);
LABEL_19:
      if (a34)
      {
        v52 = a34 + 2;
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
        {
          atomic_store(1u, a34 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a34 + 16))(a34);
        }
      }
      if (*(_QWORD *)a19)
      {
        WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead(*(_QWORD *)a19);
        v55 = *(unsigned int **)a19;
        *(_QWORD *)a19 = 0;
        if (v55)
        {
          v56 = v55 + 2;
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (!v58)
          {
            atomic_store(1u, v55 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 16))(v55);
          }
        }
      }
      else
      {
        *(_QWORD *)a19 = 0;
      }
      WTF::fastFree(a19, a2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::settleChainedPromise(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::Lock *v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  _QWORD v19[4];
  WTF::Lock *v20;
  char v21;
  unsigned int *v22;

  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v19[0] = 0;
  v19[1] = 0;
  v19[2] = "<chained promise>";
  v19[3] = 0;
  v6 = (unsigned __int8 *)(v3 + 12);
  v20 = (WTF::Lock *)(v3 + 12);
  v21 = 1;
  if (__ldaxr((unsigned __int8 *)v3 + 48))
  {
    __clrex();
LABEL_7:
    v6 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_8;
  }
  if (__stxr(1u, v6))
    goto LABEL_7;
LABEL_8:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v8 && v8[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)v8, (WTF::Logger::LogSiteIdentifier *)v19, " settling chained promise ", (uint64_t)v3);
  v9 = v3[18];
  v10 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v9 == -1)
  {
    if ((_DWORD)v10 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v10 == -1)
  {
    ((void (*)(unsigned int **, unsigned int *))off_1E334F8D0[v9])(&v22, v3 + 14);
    v3[18] = -1;
    goto LABEL_16;
  }
  v22 = v3 + 14;
  ((void (*)(unsigned int **))off_1E334F8F8[v10])(&v22);
LABEL_16:
  WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::dispatchAll(v3, &v20);
  if (v21)
  {
    v11 = v20;
    v12 = __ldxr((unsigned __int8 *)v20);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v11);
  }
LABEL_22:
  v13 = v3 + 2;
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  result = WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead((uint64_t)v3);
  do
  {
    v17 = __ldaxr(v13);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v13));
  if (!v18)
  {
    atomic_store(1u, v3 + 2);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  return result;
}

void sub_195289AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::Lock *a14, char a15)
{
  unsigned int *v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  if (v15)
  {
    v17 = v15 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead((uint64_t)v15);
    do
    {
      v20 = __ldaxr(v17);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v17));
    if (!v21)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  uint64_t result;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::Logger *v35;
  const char *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  WTF::Logger *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57[3];

  v57[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v50, a3);
  result = WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v49, a4);
  v7 = (WTF::StringImpl *)v49;
  if (v51)
  {
    v8 = *((_DWORD *)v51 + 1);
    if (v50)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v49)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v50)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v50 + 1);
  if (!v49)
    goto LABEL_92;
LABEL_4:
  v10 = *(_DWORD *)(v49 + 4);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v50)
  {
    v15 = *((_DWORD *)v50 + 4);
    v14 = (v15 >> 2) & 1;
    if (v49 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v49)
    {
LABEL_18:
      v14 = (*(unsigned __int8 *)(v49 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v51, (uint64_t)v50, v49, &buf);
  v52 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v49 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v16);
    else
      *(_DWORD *)v7 -= 2;
  }
  v17 = v50;
  v50 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v51;
  v51 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(NSObject **)(a1 + 32);
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v20)
  {
    WTF::String::utf8();
    v22 = v47 ? (char *)v47 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v20 = (uint64_t)v47;
    v47 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        v20 = WTF::fastFree((WTF *)v20, v21);
      else
        --*(_DWORD *)v20;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v24 = *v23;
      if ((v24 & 1) != 0)
        break;
      v25 = __ldaxr(v23);
      if (v25 == v24)
      {
        if (!__stxr(v24 | 1, v23))
        {
          v26 = WTF::Logger::observers((WTF::Logger *)v20);
          v27 = *(unsigned int *)(v26 + 12);
          if ((_DWORD)v27)
          {
            v28 = *(uint64_t **)v26;
            v44 = *(_QWORD *)v26 + 8 * v27;
            do
            {
              v29 = *v28;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v54 = 0;
              WTF::String::String((WTF::String *)&v55, a3);
              v56 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(v57, a4);
              v47 = 0;
              v48 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v48) = 3;
              v47 = v30;
              v31 = HIDWORD(v48);
              *((_DWORD *)v30 + 4 * HIDWORD(v48)) = buf;
              v32 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v54;
              v33 = v55;
              if (v55)
                *(_DWORD *)v55 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              *((_DWORD *)v30 + 4 * (v31 + 2)) = v56;
              v34 = v57[0];
              if (v57[0])
                *(_DWORD *)v57[0] += 2;
              *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
              HIDWORD(v48) = v31 + 3;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, a1, 4, &v47);
              v35 = v47;
              if (HIDWORD(v48))
              {
                v36 = a3;
                v37 = 16 * HIDWORD(v48);
                v38 = (WTF::StringImpl **)((char *)v47 + 8);
                do
                {
                  v39 = *v38;
                  *v38 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v21);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v38 += 2;
                  v37 -= 16;
                }
                while (v37);
                v35 = v47;
                a3 = v36;
              }
              if (v35)
              {
                v47 = 0;
                LODWORD(v48) = 0;
                WTF::fastFree(v35, v21);
              }
              v40 = v57[0];
              v57[0] = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = v55;
              v55 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v42 -= 2;
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v44);
          }
          v43 = __ldxr(v23);
          if (v43 == 1)
          {
            if (!__stlxr(0, v23))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v52;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19528A078(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, int a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25)
{
  unsigned __int8 *v25;
  int v27;

  v27 = __ldxr(v25);
  if (v27 == 1)
  {
    if (!__stlxr(0, v25))
    {
LABEL_6:
      if (a19)
      {
        if (*(_DWORD *)a19 == 2)
          WTF::StringImpl::destroy(a19, a2);
        else
          *(_DWORD *)a19 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 40 * v4);
        v9 = v3;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = *(_OWORD *)((char *)v9 + 8);
          *(_OWORD *)(v7 + 6) = *(_OWORD *)((char *)v9 + 24);
          *(_OWORD *)(v7 + 2) = v11;
          result = *(unsigned int **)v9;
          if (*(_QWORD *)v9)
          {
            WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead((uint64_t)result);
            result = *(unsigned int **)v9;
            *(_QWORD *)v9 = 0;
            if (result)
            {
              v12 = result + 2;
              do
              {
                v13 = __ldaxr(v12);
                v14 = v13 - 1;
              }
              while (__stlxr(v14, v12));
              if (!v14)
              {
                atomic_store(1u, result + 2);
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
              }
            }
          }
          else
          {
            *(_QWORD *)v9 = 0;
          }
          v7 += 10;
          v9 = (WTF *)((char *)v9 + 40);
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void sub_19528A448(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int **v9;
  void *v10;
  WTF::NativePromiseBase **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *result;
  _QWORD v23[2];
  unsigned int **v24;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;

  v24 = (unsigned int **)&v26;
  v25 = 1;
  v27 = (WTF *)&v29;
  v28 = 1;
  v4 = *(void **)(a1 + 80);
  if (v4 == (void *)(a1 + 96))
  {
    v6 = *(unsigned int *)(a1 + 92);
    memcpy(&v29, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 80) = a1 + 96;
    v27 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 88);
    LODWORD(v6) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a1 + 88) = 1;
    LODWORD(v28) = v5;
  }
  HIDWORD(v28) = v6;
  *(_QWORD *)(a1 + 88) = 1;
  v7 = *(_DWORD *)(a1 + 112);
  v8 = *(_DWORD *)(a1 + 116);
  v9 = *(unsigned int ***)(a1 + 104);
  v24 = v9;
  v25 = __PAIR64__(v8, v7);
  v23[0] = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v23[1] = 0;
  *(_QWORD *)(a1 + 112) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v4);
  if (HIDWORD(v28))
  {
    v11 = (WTF::NativePromiseBase **)v27;
    v12 = 8 * HIDWORD(v28);
    do
    {
      WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::ThenCallbackBase::dispatch(*v11++, a1, a2);
      v12 -= 8;
    }
    while (v12);
    v9 = v24;
    v8 = HIDWORD(v25);
  }
  if (v8)
  {
    v13 = 40 * v8;
    do
    {
      WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::settleChainedPromise(a1, v9);
      v9 += 5;
      v13 -= 40;
    }
    while (v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v10);
  if (HIDWORD(v28))
  {
    v15 = v27;
    v16 = (WTF *)((char *)v27 + 8 * HIDWORD(v28));
    do
    {
      v17 = *(unsigned int **)v15;
      *(_QWORD *)v15 = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      v15 = (WTF *)((char *)v15 + 8);
    }
    while (v15 != v16);
  }
  result = v27;
  if (&v29 != (uint64_t *)v27 && v27 != 0)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    return (WTF *)WTF::fastFree(result, v14);
  }
  return result;
}

void sub_19528A64C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, unsigned int a16)
{
  WTF *v16;
  void *v18;
  WTF *v19;
  unsigned int **v21;
  unsigned int **v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  WTF::Vector<WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a16)
  {
    v21 = (unsigned int **)a14;
    v22 = (unsigned int **)((char *)a14 + 8 * a16);
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
      {
        v24 = v23 + 2;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v23 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
        }
      }
      ++v21;
    }
    while (v21 != v22);
  }
  v19 = a14;
  if (v16 != a14 && a14 != 0)
  {
    a14 = 0;
    a15 = 0;
    WTF::fastFree(v19, v18);
  }
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_9RetainPtrIP20opaqueCMSampleBufferEEiLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_iEENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E334F8E8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_9RetainPtrIP20opaqueCMSampleBufferEEiLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_iEENS8_8FunctionIFSK_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrIP20opaqueCMSampleBufferEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSC_iEEEEEEDcSG_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_9RetainPtrIP20opaqueCMSampleBufferEEiLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_iEENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E334F8D0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_9RetainPtrIP20opaqueCMSampleBufferEEiLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_iEENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  _BYTE *v12;
  BOOL v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v19[8];
  int v20;
  _BYTE v21[8];
  int v22;
  char v23;
  char v24;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = (_BYTE *)a2;
      v19[0] = 0;
      v20 = -1;
      v7 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v7 == -1)
      {
        v8 = *(_DWORD *)(a2 + 8);
        if (v8 == -1)
        {
LABEL_41:
          if (v20 != -1)
            return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E334F8E8[v20])(v21, v19);
          return result;
        }
      }
      else
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E334F910[v7])(&v24, v19, a3);
        v20 = v7;
        v8 = *((_DWORD *)v6 + 2);
        if (v8 != -1 && (_DWORD)v7 == v8)
        {
          result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))off_1E334F920[v7])(v21, v19, v6);
          goto LABEL_41;
        }
        if ((_DWORD)v7 != 1)
        {
          v14 = v19;
LABEL_32:
          v21[0] = 0;
          v22 = -1;
          if (v8 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E334F910[v8])(&v23, v21, v6);
            v22 = v8;
            v15 = *((unsigned int *)v6 + 2);
            if ((_DWORD)v15 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E334F8E8[v15])(&v24, v6);
          }
          *((_DWORD *)v6 + 2) = -1;
          v16 = *((unsigned int *)v14 + 2);
          if ((_DWORD)v16 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E334F930[v16])(&v23, v6, v14);
            *((_DWORD *)v6 + 2) = v16;
            v17 = *((unsigned int *)v14 + 2);
            if ((_DWORD)v17 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E334F8E8[v17])(&v24, v14);
          }
          *((_DWORD *)v14 + 2) = -1;
          v18 = v22;
          if (v22 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E334F930[v22])(&v23, v14, v21);
            *((_DWORD *)v14 + 2) = v18;
            if (v22 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E334F8E8[v22])(&v24, v21);
          }
          goto LABEL_41;
        }
      }
      v10 = v19;
      if (v8 == 1)
        v11 = 1;
      else
        v11 = v7;
      if (v8 == 1)
        v12 = v19;
      else
        v12 = v6;
      if (v8 == 1)
        v10 = v6;
      v13 = v8 == -1;
      if (v8 == -1)
        v8 = -1;
      else
        v8 = v11;
      if (v13)
        v14 = v19;
      else
        v14 = v12;
      if (!v13)
        v6 = v10;
      goto LABEL_32;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E334F8D0[v5])(v21, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 8) = -1;
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E334F910[v9])(v19, v4, a3);
    *(_DWORD *)(v4 + 8) = v9;
  }
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

void sub_19528AA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16)
{
  uint64_t v16;

  if (a16 != -1)
    ((void (*)(uint64_t, char *))off_1E334F8E8[a16])(v16 - 33, &a14);
  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E334F8E8[a12])(v16 - 33, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_9RetainPtrIP20opaqueCMSampleBufferEEiLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISD_iEENS8_8FunctionIFSK_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISO_LNS0_6_TraitE1EEEEEvOT_EUlRSU_OT0_E_JRNS0_6__baseILSS_1EJSG_SK_SN_EEEOS12_EEEDcSU_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E334F8D0[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrIP20opaqueCMSampleBufferEEiEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSC_iEEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrIP20opaqueCMSampleBufferEEiEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSC_iEEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF9RetainPtrIP20opaqueCMSampleBufferEEiEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_iEEESN_EEEDcSE_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF9RetainPtrIP20opaqueCMSampleBufferEEiEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSB_iEEESN_EEEDcSE_DpT0_(uint64_t a1, int *a2, int *a3)
{
  int v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrIP20opaqueCMSampleBufferEEiEEEE19__generic_constructB8sn180100INS0_6__implIJSC_iEEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_iEEEOSS_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrIP20opaqueCMSampleBufferEEiEEEE19__generic_constructB8sn180100INS0_6__implIJSC_iEEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_iEEEOSS_EEEDcSJ_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

unsigned __int8 *WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v22;
  int v23;
  unsigned __int8 *v25;
  int v26;
  char v27;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 121));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E334F950;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v25 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v25);
      result = v25;
      v25 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v25 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)&v25, (WTF::NativePromiseBase *)((char *)v5 + 24));
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 72);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::takeResult((uint64_t)&v25, a2);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v25);
    if (v26 != -1)
      ((void (*)(char *, unsigned __int8 **))off_1E334F8E8[v26])(&v27, &v25);
    goto LABEL_48;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 72) != 2)
  {
    result = (unsigned __int8 *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  v22 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v23 = __ldxr(v17);
  if (v23 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v22 + 16))(&v25, v22);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v25);
  if (v26 != -1)
    ((void (*)(char *, unsigned __int8 **))off_1E334F8E8[v26])(&v27, &v25);
  v26 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_48:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

void sub_19528AEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16)
{
  unsigned __int8 **v16;

  if (__ldaxr(*v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v16))
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  MEMORY[0x19AEA534C]();
  goto LABEL_6;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_19528B0C8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  v10 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::takeResult(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  _BYTE v8[2];

  v3 = result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 72) != 1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  *(_BYTE *)v3 = 0;
  *(_DWORD *)(v3 + 8) = -1;
  v6 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E334F910[v6])(v8, v3, a2 + 56);
    *(_DWORD *)(v3 + 8) = v6;
  }
  v7 = __ldxr(v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, v4))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

void sub_19528B1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;

  v16 = *(unsigned int *)(v14 + 8);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E334F8E8[v16])(&a13, v14);
  *(_DWORD *)(v14 + 8) = -1;
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  goto LABEL_8;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::Logger *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::Logger *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  __int128 buf;
  int v66;
  WTF::StringImpl *v67;
  int v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  int v76;
  _QWORD v77[3];

  v77[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v58, "ThenCallback disconnected from ");
  WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v57, a2);
  WTF::String::String((WTF::String *)&v56, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v54, " callSite:");
  WTF::Logger::LogSiteIdentifier::toString(a4);
  WTF::String::String((WTF::String *)&v52, "]");
  v6 = v57;
  *(_QWORD *)&buf = v58;
  v50 = v57;
  v63 = v55;
  v64 = v56;
  v61 = v53;
  v62 = v54;
  v60 = v52;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v50, (uint64_t *)&v64, (uint64_t *)&v63, (uint64_t *)&v62, (uint64_t *)&v61, (uint64_t *)&v60, &v59);
  if (v59)
  {
    v9 = v52;
    v52 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v53;
    v53 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v54;
    v54 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v55;
    v55 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v56;
    v56 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v8);
      else
        *(_DWORD *)v13 -= 2;
    }
    v57 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v8);
      else
        *(_DWORD *)v6 -= 2;
    }
    v14 = v58;
    v58 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *(NSObject **)(a1 + 32);
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v16)
    {
      WTF::String::utf8();
      v18 = v50 ? (char *)v50 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v18;
      _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v16 = (uint64_t)v50;
      v50 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          v16 = WTF::fastFree((WTF *)v16, v17);
        else
          --*(_DWORD *)v16;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v20 = *v19;
        if ((v20 & 1) != 0)
          break;
        v21 = __ldaxr(v19);
        if (v21 == v20)
        {
          if (!__stxr(v20 | 1, v19))
          {
            v22 = WTF::Logger::observers((WTF::Logger *)v16);
            v23 = *(unsigned int *)(v22 + 12);
            if ((_DWORD)v23)
            {
              v24 = *(uint64_t **)v22;
              v48 = *(_QWORD *)v22 + 8 * v23;
              do
              {
                v25 = *v24;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), "ThenCallback disconnected from ");
                v66 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v67, a2);
                v68 = 0;
                WTF::String::String((WTF::String *)&v69, " aborting [callback:");
                v70 = 0;
                WTF::LogArgument<void const*>::toString();
                v72 = 0;
                WTF::String::String((WTF::String *)&v73, " callSite:");
                v74 = 0;
                WTF::Logger::LogSiteIdentifier::toString(a4);
                v76 = 0;
                WTF::String::String((WTF::String *)v77, "]");
                v50 = 0;
                v51 = 0;
                v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v51) = 7;
                v50 = v26;
                v27 = HIDWORD(v51);
                *((_DWORD *)v26 + 4 * HIDWORD(v51)) = buf;
                v28 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v26 + 2 * v27 + 1) = v28;
                *((_DWORD *)v26 + 4 * (v27 + 1)) = v66;
                v29 = v67;
                if (v67)
                  *(_DWORD *)v67 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
                *((_DWORD *)v26 + 4 * (v27 + 2)) = v68;
                v30 = v69;
                if (v69)
                  *(_DWORD *)v69 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 2) + 1) = v30;
                *((_DWORD *)v26 + 4 * (v27 + 3)) = v70;
                v31 = v71;
                if (v71)
                  *(_DWORD *)v71 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 3) + 1) = v31;
                *((_DWORD *)v26 + 4 * (v27 + 4)) = v72;
                v32 = v73;
                if (v73)
                  *(_DWORD *)v73 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 4) + 1) = v32;
                *((_DWORD *)v26 + 4 * (v27 + 5)) = v74;
                v33 = v75;
                if (v75)
                  *(_DWORD *)v75 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 5) + 1) = v33;
                *((_DWORD *)v26 + 4 * (v27 + 6)) = v76;
                v34 = v77[0];
                if (v77[0])
                  *(_DWORD *)v77[0] += 2;
                *((_QWORD *)v26 + 2 * (v27 + 6) + 1) = v34;
                HIDWORD(v51) = v27 + 7;
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v25 + 16))(v25, a1, 4, &v50);
                v35 = v50;
                if (HIDWORD(v51))
                {
                  v36 = a2;
                  v37 = 16 * HIDWORD(v51);
                  v38 = (WTF::StringImpl **)((char *)v50 + 8);
                  do
                  {
                    v39 = *v38;
                    *v38 = 0;
                    if (v39)
                    {
                      if (*(_DWORD *)v39 == 2)
                        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v17);
                      else
                        *(_DWORD *)v39 -= 2;
                    }
                    v38 += 2;
                    v37 -= 16;
                  }
                  while (v37);
                  v35 = v50;
                  a2 = v36;
                }
                if (v35)
                {
                  v50 = 0;
                  LODWORD(v51) = 0;
                  WTF::fastFree(v35, v17);
                }
                v40 = (WTF::StringImpl *)v77[0];
                v77[0] = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                v41 = v75;
                v75 = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                v42 = v73;
                v73 = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v43 = v71;
                v71 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v44 = v69;
                v69 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v67;
                v67 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                ++v24;
              }
              while (v24 != (uint64_t *)v48);
            }
            v47 = __ldxr(v19);
            if (v47 == 1)
            {
              if (!__stlxr(0, v19))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v59;
    v59 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_19528B978(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,int a23,int a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,WTF::StringImpl *a30,uint64_t a31,WTF::StringImpl *a32)
{
  unsigned __int8 *v32;
  int v34;

  v34 = __ldxr(v32);
  if (v34 == 1)
  {
    if (!__stlxr(0, v32))
    {
LABEL_6:
      if (a32)
      {
        if (*(_DWORD *)a32 == 2)
          WTF::StringImpl::destroy(a32, a2);
        else
          *(_DWORD *)a32 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E334F950;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E334F950;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v15 = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v15, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 72);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
  v10 = *((_QWORD *)a1 + 3);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 72) != 2)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v10 + 56) = 0;
    v14 = __ldxr(v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, v11))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(&v15, v13);
    (*(void (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v15);
    if (v16 != -1)
      ((void (*)(char *, uint64_t *))off_1E334F8E8[v16])(&v17, &v15);
    v16 = -1;
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::takeResult((uint64_t)&v15, *((_QWORD *)a1 + 3));
  result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v15);
  if (v16 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E334F8E8[v16])(&v17, &v15);
  return result;
}

void sub_19528C01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a12 != -1)
    ((void (*)(char *, char *))off_1E334F8E8[a12])(&a17, &a10);
  a12 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

uint64_t *WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_0::operator() const(void)::{lambda(WTF::String &&)#1}::~String(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v14;

  v3 = a1[6];
  if (v3)
  {
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead(v3);
    v4 = (unsigned int *)a1[6];
    a1[6] = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      }
    }
  }
  else
  {
    a1[6] = 0;
  }
  v8 = *a1;
  *a1 = 0;
  if (!v8)
    return a1;
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_13:
  v10 = *(_QWORD *)(v8 + 16) - 1;
  *(_QWORD *)(v8 + 16) = v10;
  if (v10)
  {
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    return a1;
  }
  v11 = *(_QWORD *)(v8 + 8);
  v12 = __ldxr((unsigned __int8 *)v8);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
    {
      if (!v11)
        goto LABEL_20;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v11)
LABEL_20:
    WTF::fastFree((WTF *)v8, a2);
  return a1;
}

void sub_19528C1DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::reject<int &,std::enable_if<true,void>>(_DWORD *a1, int *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  WTF *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 12);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)v8, a3, " rejecting ", (uint64_t)a1);
  v10 = *a2;
  v11 = a1[18];
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, _DWORD *))off_1E334F8D0[v11])(&v16, a1 + 14);
  a1[14] = v10;
  a1[16] = 1;
  a1[18] = 1;
  result = WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::dispatchAll((uint64_t)a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_19528C328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, char a11)
{
  int v12;

  if (a11)
  {
    v12 = __ldxr((unsigned __int8 *)a10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a10))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a10);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::NativePromise(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::Logger *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int128 buf;
  int v46;
  WTF::StringImpl *v47[3];

  v2 = a1;
  v47[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E334F978;
  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  v5 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  v6 = v5;
  if (!*v5 || v5[16] < 4u)
    return v2;
  WTF::String::String((WTF::String *)&v43, "creating ");
  result = WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v42, v2);
  v8 = (WTF::StringImpl *)v42;
  if (!v43)
  {
    v9 = 0;
    if (v42)
      goto LABEL_5;
LABEL_74:
    v10 = 0;
    goto LABEL_6;
  }
  v9 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_74;
LABEL_5:
  v10 = *(_DWORD *)(v42 + 4);
LABEL_6:
  if ((v10 | v9) < 0)
    goto LABEL_77;
  result = (v9 + v10);
  if (__OFADD__(v9, v10))
    goto LABEL_77;
  if (v43)
  {
    v11 = *((_DWORD *)v43 + 4);
    v12 = (v11 >> 2) & 1;
    if (v42 && (v11 & 4) != 0)
      goto LABEL_11;
  }
  else
  {
    if (v42)
    {
LABEL_11:
      v12 = (*(unsigned __int8 *)(v42 + 16) >> 2) & 1;
      goto LABEL_12;
    }
    v12 = 1;
  }
LABEL_12:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, (uint64_t)v43, v42, &buf);
  v44 = (WTF::StringImpl *)buf;
  if ((_QWORD)buf)
  {
    v42 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v13);
      else
        *(_DWORD *)v8 -= 2;
    }
    v14 = v43;
    v43 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *((_QWORD *)v6 + 4);
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v16)
    {
      WTF::String::utf8();
      v18 = v40 ? (char *)v40 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v18;
      _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v16 = (uint64_t)v40;
      v40 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          v16 = WTF::fastFree((WTF *)v16, v17);
        else
          --*(_DWORD *)v16;
      }
    }
    if (*v6 && v6[16] >= 4u)
    {
      v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v20 = *v19;
        if ((v20 & 1) != 0)
          break;
        v21 = __ldaxr(v19);
        if (v21 == v20)
        {
          if (!__stxr(v20 | 1, v19))
          {
            v22 = WTF::Logger::observers((WTF::Logger *)v16);
            v23 = *(unsigned int *)(v22 + 12);
            if ((_DWORD)v23)
            {
              v24 = *(uint64_t **)v22;
              v25 = *(_QWORD *)v22 + 8 * v23;
              do
              {
                v26 = *v24;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), "creating ");
                v46 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(v47, v2);
                v40 = 0;
                v41 = 0;
                v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                LODWORD(v41) = 2;
                v40 = v27;
                v28 = HIDWORD(v41);
                *((_DWORD *)v27 + 4 * HIDWORD(v41)) = buf;
                v29 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v27 + 2 * v28 + 1) = v29;
                *((_DWORD *)v27 + 4 * (v28 + 1)) = v46;
                v30 = v47[0];
                if (v47[0])
                  *(_DWORD *)v47[0] += 2;
                *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
                HIDWORD(v41) = v28 + 2;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, v6, 4, &v40);
                v31 = v40;
                if (HIDWORD(v41))
                {
                  v32 = 16 * HIDWORD(v41);
                  v33 = (WTF::StringImpl **)((char *)v40 + 8);
                  do
                  {
                    v34 = *v33;
                    *v33 = 0;
                    if (v34)
                    {
                      if (*(_DWORD *)v34 == 2)
                        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                      else
                        *(_DWORD *)v34 -= 2;
                    }
                    v33 += 2;
                    v32 -= 16;
                  }
                  while (v32);
                  v2 = a1;
                  v31 = v40;
                }
                if (v31)
                {
                  v40 = 0;
                  LODWORD(v41) = 0;
                  WTF::fastFree(v31, v17);
                }
                v35 = v47[0];
                v47[0] = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2)
                    WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v35 -= 2;
                }
                v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 2)
                    WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v36 -= 2;
                }
                ++v24;
              }
              while (v24 != (uint64_t *)v25);
            }
            v37 = __ldxr(v19);
            if (v37 == 1)
            {
              if (!__stlxr(0, v19))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v38 = v44;
    v44 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v38 -= 2;
    }
    return v2;
  }
LABEL_77:
  __break(0xC471u);
  return result;
}

void sub_19528C7D8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, WTF *a12, int a13, int a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21)
{
  uint64_t v21;
  unsigned __int8 *v22;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v30;
  unsigned int **v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;

  v24 = __ldxr(v22);
  if (v24 == 1)
  {
    if (!__stlxr(0, v22))
    {
LABEL_6:
      v25 = a17;
      a17 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, a2);
        else
          *(_DWORD *)v25 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v21, a2);
      v27 = *(unsigned int *)(a11 + 92);
      if ((_DWORD)v27)
      {
        v31 = *(unsigned int ***)(a11 + 80);
        v32 = &v31[v27];
        do
        {
          v33 = *v31;
          *v31 = 0;
          if (v33)
          {
            v34 = v33 + 2;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              atomic_store(1u, v33 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
            }
          }
          ++v31;
        }
        while (v31 != v32);
      }
      v28 = *(WTF **)(a11 + 80);
      if (a10 != v28 && v28 != 0)
      {
        *(_QWORD *)(a11 + 80) = 0;
        *(_DWORD *)(a11 + 88) = 0;
        WTF::fastFree(v28, v26);
      }
      v30 = *(unsigned int *)(a11 + 72);
      if ((_DWORD)v30 != -1)
        ((void (*)(WTF **, uint64_t))off_1E334F8D0[v30])(&a12, v21 - 48);
      *(_DWORD *)(a11 + 72) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 116);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 104);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void sub_19528CAB8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  uint64_t v2;
  BOOL v3;
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unsigned int **v39;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v47;
  WTF::Logger *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55[3];

  v55[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(_BYTE *)v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    WTF::String::String((WTF::String *)&v51, "destroying ");
    result = WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v50, a1);
    v5 = (WTF::StringImpl *)v50;
    if (v51)
    {
      v6 = *((_DWORD *)v51 + 1);
      if (v50)
      {
LABEL_8:
        v7 = *(_DWORD *)(v50 + 4);
LABEL_9:
        if ((v7 | v6) < 0)
          goto LABEL_95;
        result = (v6 + v7);
        if (__OFADD__(v6, v7))
          goto LABEL_95;
        if (v51)
        {
          v8 = *((_DWORD *)v51 + 4);
          v9 = (v8 >> 2) & 1;
          if (v50 && (v8 & 4) != 0)
            goto LABEL_14;
        }
        else
        {
          if (v50)
          {
LABEL_14:
            v9 = (*(unsigned __int8 *)(v50 + 16) >> 2) & 1;
            goto LABEL_15;
          }
          v9 = 1;
        }
LABEL_15:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v51, v50, &buf);
        v52 = (WTF::StringImpl *)buf;
        if ((_QWORD)buf)
        {
          v50 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, v10);
            else
              *(_DWORD *)v5 -= 2;
          }
          v11 = v51;
          v51 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = *(NSObject **)(v2 + 32);
          v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v13)
          {
            WTF::String::utf8();
            v15 = v48 ? (char *)v48 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v15;
            _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v13 = (uint64_t)v48;
            v48 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 1)
                v13 = WTF::fastFree((WTF *)v13, v14);
              else
                --*(_DWORD *)v13;
            }
          }
          if (*(_BYTE *)v2 && *(unsigned __int8 *)(v2 + 16) >= 4u)
          {
            v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v17 = *v16;
              if ((v17 & 1) != 0)
                break;
              v18 = __ldaxr(v16);
              if (v18 == v17)
              {
                if (!__stxr(v17 | 1, v16))
                {
                  v19 = WTF::Logger::observers((WTF::Logger *)v13);
                  v20 = *(unsigned int *)(v19 + 12);
                  if ((_DWORD)v20)
                  {
                    v21 = *(uint64_t **)v19;
                    v22 = *(_QWORD *)v19 + 8 * v20;
                    do
                    {
                      v23 = *v21;
                      LODWORD(buf) = 0;
                      WTF::String::String((WTF::String *)((char *)&buf + 8), "destroying ");
                      v54 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(v55, a1);
                      v48 = 0;
                      v49 = 0;
                      v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v49) = 2;
                      v48 = v24;
                      v25 = HIDWORD(v49);
                      *((_DWORD *)v24 + 4 * HIDWORD(v49)) = buf;
                      v26 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v24 + 2 * v25 + 1) = v26;
                      *((_DWORD *)v24 + 4 * (v25 + 1)) = v54;
                      v27 = v55[0];
                      if (v55[0])
                        *(_DWORD *)v55[0] += 2;
                      *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
                      HIDWORD(v49) = v25 + 2;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, v2, 4, &v48);
                      v28 = v48;
                      if (HIDWORD(v49))
                      {
                        v29 = 16 * HIDWORD(v49);
                        v30 = (WTF::StringImpl **)((char *)v48 + 8);
                        do
                        {
                          v31 = *v30;
                          *v30 = 0;
                          if (v31)
                          {
                            if (*(_DWORD *)v31 == 2)
                              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v14);
                            else
                              *(_DWORD *)v31 -= 2;
                          }
                          v30 += 2;
                          v29 -= 16;
                        }
                        while (v29);
                        v28 = v48;
                      }
                      if (v28)
                      {
                        v48 = 0;
                        LODWORD(v49) = 0;
                        WTF::fastFree(v28, v14);
                      }
                      v32 = v55[0];
                      v55[0] = 0;
                      if (v32)
                      {
                        if (*(_DWORD *)v32 == 2)
                          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
                        else
                          *(_DWORD *)v32 -= 2;
                      }
                      v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2)
                          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v14);
                        else
                          *(_DWORD *)v33 -= 2;
                      }
                      ++v21;
                    }
                    while (v21 != (uint64_t *)v22);
                  }
                  v34 = __ldxr(v16);
                  if (v34 == 1)
                  {
                    if (!__stlxr(0, v16))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v35 = v52;
          v52 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v14);
            else
              *(_DWORD *)v35 -= 2;
          }
          goto LABEL_71;
        }
LABEL_95:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v6 = 0;
      if (v50)
        goto LABEL_8;
    }
    v7 = 0;
    goto LABEL_9;
  }
LABEL_71:
  WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 104, v36);
  v38 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v38)
  {
    v39 = *(unsigned int ***)(a1 + 80);
    v40 = &v39[v38];
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        v42 = v41 + 2;
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v41 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
        }
      }
      ++v39;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 80);
  if ((WTF *)(a1 + 96) != v45 && v45 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v45, v37);
  }
  v47 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v47 != -1)
    ((void (*)(__int128 *, uint64_t))off_1E334F8D0[v47])(&buf, a1 + 56);
  *(_DWORD *)(a1 + 72) = -1;
  return a1;
}

void sub_19528CFDC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  uint64_t v19;
  unsigned __int8 *v20;
  int v22;
  WTF::StringImpl *v23;
  void *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v28;
  unsigned int **v29;
  unsigned int **v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;

  v22 = __ldxr(v20);
  if (v22 == 1)
  {
    if (!__stlxr(0, v20))
    {
LABEL_6:
      v23 = a15;
      a15 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, a2);
        else
          *(_DWORD *)v23 -= 2;
      }
      WTF::Vector<WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19 + 104, a2);
      v25 = *(unsigned int *)(v19 + 92);
      if ((_DWORD)v25)
      {
        v29 = *(unsigned int ***)(v19 + 80);
        v30 = &v29[v25];
        do
        {
          v31 = *v29;
          *v29 = 0;
          if (v31)
          {
            v32 = v31 + 2;
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              atomic_store(1u, v31 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
            }
          }
          ++v29;
        }
        while (v29 != v30);
      }
      v26 = *(WTF **)(v19 + 80);
      if ((WTF *)(v19 + 96) != v26 && v26 != 0)
      {
        *(_QWORD *)(v19 + 80) = 0;
        *(_DWORD *)(v19 + 88) = 0;
        WTF::fastFree(v26, v24);
      }
      v28 = *(unsigned int *)(v19 + 72);
      if ((_DWORD)v28 != -1)
        ((void (*)(WTF **, uint64_t))off_1E334F8D0[v28])(&a10, v19 + 56);
      *(_DWORD *)(v19 + 72) = -1;
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  uint64_t result;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::Logger *v35;
  const char *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  WTF::Logger *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57[3];

  v57[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v50, a3);
  result = WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v49, a4);
  v7 = (WTF::StringImpl *)v49;
  if (v51)
  {
    v8 = *((_DWORD *)v51 + 1);
    if (v50)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v49)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v50)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v50 + 1);
  if (!v49)
    goto LABEL_92;
LABEL_4:
  v10 = *(_DWORD *)(v49 + 4);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v50)
  {
    v15 = *((_DWORD *)v50 + 4);
    v14 = (v15 >> 2) & 1;
    if (v49 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v49)
    {
LABEL_18:
      v14 = (*(unsigned __int8 *)(v49 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v51, (uint64_t)v50, v49, &buf);
  v52 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v49 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v16);
    else
      *(_DWORD *)v7 -= 2;
  }
  v17 = v50;
  v50 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v51;
  v51 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(NSObject **)(a1 + 32);
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v20)
  {
    WTF::String::utf8();
    v22 = v47 ? (char *)v47 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v20 = (uint64_t)v47;
    v47 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        v20 = WTF::fastFree((WTF *)v20, v21);
      else
        --*(_DWORD *)v20;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v24 = *v23;
      if ((v24 & 1) != 0)
        break;
      v25 = __ldaxr(v23);
      if (v25 == v24)
      {
        if (!__stxr(v24 | 1, v23))
        {
          v26 = WTF::Logger::observers((WTF::Logger *)v20);
          v27 = *(unsigned int *)(v26 + 12);
          if ((_DWORD)v27)
          {
            v28 = *(uint64_t **)v26;
            v44 = *(_QWORD *)v26 + 8 * v27;
            do
            {
              v29 = *v28;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v54 = 0;
              WTF::String::String((WTF::String *)&v55, a3);
              v56 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(v57, a4);
              v47 = 0;
              v48 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v48) = 3;
              v47 = v30;
              v31 = HIDWORD(v48);
              *((_DWORD *)v30 + 4 * HIDWORD(v48)) = buf;
              v32 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v54;
              v33 = v55;
              if (v55)
                *(_DWORD *)v55 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              *((_DWORD *)v30 + 4 * (v31 + 2)) = v56;
              v34 = v57[0];
              if (v57[0])
                *(_DWORD *)v57[0] += 2;
              *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
              HIDWORD(v48) = v31 + 3;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, a1, 4, &v47);
              v35 = v47;
              if (HIDWORD(v48))
              {
                v36 = a3;
                v37 = 16 * HIDWORD(v48);
                v38 = (WTF::StringImpl **)((char *)v47 + 8);
                do
                {
                  v39 = *v38;
                  *v38 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v21);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v38 += 2;
                  v37 -= 16;
                }
                while (v37);
                v35 = v47;
                a3 = v36;
              }
              if (v35)
              {
                v47 = 0;
                LODWORD(v48) = 0;
                WTF::fastFree(v35, v21);
              }
              v40 = v57[0];
              v57[0] = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = v55;
              v55 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v42 -= 2;
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v44);
          }
          v43 = __ldxr(v23);
          if (v43 == 1)
          {
            if (!__stlxr(0, v23))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v52;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19528D6D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, int a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25)
{
  unsigned __int8 *v25;
  int v27;

  v27 = __ldxr(v25);
  if (v27 == 1)
  {
    if (!__stlxr(0, v25))
    {
LABEL_6:
      if (a19)
      {
        if (*(_DWORD *)a19 == 2)
          WTF::StringImpl::destroy(a19, a2);
        else
          *(_DWORD *)a19 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_0::operator() const(void)::{lambda(WTF::String &&)#1},void,WTF::String &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E334F9A0;
  WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_0::operator() const(void)::{lambda(WTF::String &&)#1}::~String(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_0::operator() const(void)::{lambda(WTF::String &&)#1},void,WTF::String &>::~CallableWrapper(uint64_t *a1, void *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E334F9A0;
  WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_0::operator() const(void)::{lambda(WTF::String &&)#1}::~String(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_0::operator() const(void)::{lambda(WTF::String &&)#1},void,WTF::String &>::call(WTF::NativePromiseBase *a1)
{
  WTF::NativePromiseBase *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 **v4;
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 *v9;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _DWORD *v15;
  int v16;
  int v17;
  _BYTE *v18;
  void *v19;
  BOOL v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  WebCore::WebCoreDecompressionSession *v25;
  BOOL v26;
  int v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  int v39;
  CMTime *v40;
  double v41;
  double v42;
  double v43;
  double Seconds;
  OpaqueCMTimebase *v45;
  uint64_t v46;
  __int128 v47;
  const char *v48;
  uint64_t v49;
  int v50;

  v1 = a1;
  v2 = *((_QWORD *)a1 + 1);
  if (!v2)
  {
    v4 = 0;
    goto LABEL_20;
  }
  v4 = (unsigned __int8 **)*((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v2);
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 != 1)
  {
    __clrex();
LABEL_19:
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v4)
      goto LABEL_13;
LABEL_20:
    v11 = 1;
    goto LABEL_22;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_19;
  if (!v4)
    goto LABEL_20;
LABEL_13:
  v7 = atomic_load((unsigned __int8 *)(v3 + 224));
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)(v3 + 208))
    {
      v47 = 0uLL;
      v48 = "operator()";
      v49 = 0;
      v8 = *((_QWORD *)v1 + 7);
      if (!v8)
      {
        v33 = 0;
LABEL_71:
        v36 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
        if (*v36 && v36[16] >= 4u)
          v36 = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)v36, (WTF::Logger::LogSiteIdentifier *)&v47, v33);
        goto LABEL_88;
      }
      v9 = (unsigned __int8 *)(v8 + 48);
      if (__ldaxr((unsigned __int8 *)(v8 + 48)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v9))
      {
        goto LABEL_65;
      }
      a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v8 + 48);
LABEL_65:
      v34 = *(_DWORD *)(v8 + 72);
      v35 = __ldxr(v9);
      if (v35 == 1)
      {
        if (!__stlxr(0, v9))
        {
LABEL_70:
          v33 = *((_QWORD *)v1 + 7);
          if (!v34)
          {
            v36 = (unsigned __int8 *)WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::reject<int &,std::enable_if<true,void>>(*((_DWORD **)v1 + 7), (int *)(v3 + 208), (WTF::Logger::LogSiteIdentifier *)&v47);
            goto LABEL_88;
          }
          goto LABEL_71;
        }
      }
      else
      {
        __clrex();
      }
      a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_70;
    }
    v47 = 0uLL;
    v48 = "operator()";
    v49 = 0;
    v30 = *((_QWORD *)v1 + 7);
    if (!v30)
    {
      v37 = 0;
LABEL_84:
      v36 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*v36 && v36[16] >= 4u)
        v36 = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)v36, (WTF::Logger::LogSiteIdentifier *)&v47, v37);
LABEL_88:
      if (*(_BYTE *)(v3 + 152))
      {
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v36);
        if (!*(_BYTE *)(v3 + 152))
        {
          __break(1u);
          return;
        }
        v42 = v41;
        v43 = *(double *)(v3 + 136);
        v47 = *((_OWORD *)v1 + 2);
        v48 = (const char *)*((_QWORD *)v1 + 6);
        Seconds = PAL::softLinkCoreMediaCMTimeGetSeconds((PAL *)&v47, v40);
        WebCore::WebCoreDecompressionSession::updateQosWithDecodeTimeStatistics((WebCore::WebCoreDecompressionSession *)v3, (v42 - v43) / Seconds, v45);
        if (*(_BYTE *)(v3 + 152))
          *(_BYTE *)(v3 + 152) = 0;
      }
      goto LABEL_42;
    }
    v31 = (unsigned __int8 *)(v30 + 48);
    if (__ldaxr((unsigned __int8 *)(v30 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v31))
    {
      goto LABEL_78;
    }
    a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v30 + 48);
LABEL_78:
    v38 = *(_DWORD *)(v30 + 72);
    v39 = __ldxr(v31);
    if (v39 == 1)
    {
      if (!__stlxr(0, v31))
      {
LABEL_83:
        v37 = *((_QWORD *)v1 + 7);
        if (!v38)
        {
          v36 = (unsigned __int8 *)WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::resolve<WTF::RetainPtr<opaqueCMSampleBuffer *>,std::enable_if<true,void>>(*((_QWORD *)v1 + 7), (uint64_t *)(v3 + 200), (WTF::Logger::LogSiteIdentifier *)&v47);
          goto LABEL_88;
        }
        goto LABEL_84;
      }
    }
    else
    {
      __clrex();
    }
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v31);
    goto LABEL_83;
  }
  v11 = 0;
LABEL_22:
  v50 = 0;
  v47 = 0uLL;
  v48 = "operator()";
  v49 = 0;
  v12 = *((_QWORD *)v1 + 7);
  if (!v12)
  {
    v15 = 0;
    goto LABEL_34;
  }
  v13 = (unsigned __int8 *)(v12 + 48);
  if (__ldaxr((unsigned __int8 *)(v12 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_28;
  }
  a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v12 + 48);
LABEL_28:
  v16 = *(_DWORD *)(v12 + 72);
  v17 = __ldxr(v13);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, v13))
LABEL_32:
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
  v15 = (_DWORD *)*((_QWORD *)v1 + 7);
  if (!v16)
  {
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::reject<int,std::enable_if<true,void>>(v15, &v50, (WTF::Logger::LogSiteIdentifier *)&v47);
    goto LABEL_41;
  }
LABEL_34:
  v18 = (_BYTE *)WTF::NativePromiseBase::logChannel(a1);
  if (*v18)
    v20 = v18[16] >= 4u;
  else
    v20 = 0;
  if (v20)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)v18, (WTF::Logger::LogSiteIdentifier *)&v47, (uint64_t)v15);
LABEL_41:
  if ((v11 & 1) != 0)
    return;
LABEL_42:
  v21 = *v4;
  if (__ldaxr(*v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_46;
  }
  MEMORY[0x19AEA534C](v21);
LABEL_46:
  v23 = *((_QWORD *)v21 + 1);
  v24 = v23 - 1;
  *((_QWORD *)v21 + 1) = v23 - 1;
  if (v23 == 1)
  {
    v46 = *((_QWORD *)v21 + 2);
    v25 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v21 + 3);
    *((_QWORD *)v21 + 3) = 0;
    v26 = v46 != 0;
  }
  else
  {
    v25 = 0;
    v26 = 1;
  }
  v27 = __ldxr(v21);
  if (v27 != 1)
  {
    __clrex();
LABEL_53:
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
    if (v24)
      return;
    goto LABEL_54;
  }
  if (__stlxr(0, v21))
    goto LABEL_53;
  if (v24)
    return;
LABEL_54:
  if (v25)
  {
    WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v25);
    WTF::fastFree(v28, v29);
  }
  if (!v26)
    WTF::fastFree((WTF *)v21, v19);
}

void sub_19528DD18(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  WebCore::WebCoreDecompressionSession *v8;
  BOOL v9;
  int v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  v4 = *v2;
  if (__ldaxr(*v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
LABEL_6:
    v6 = *((_QWORD *)v4 + 1);
    v7 = v6 - 1;
    *((_QWORD *)v4 + 1) = v6 - 1;
    if (v6 == 1)
    {
      v13 = *((_QWORD *)v4 + 2);
      v8 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v4 + 3);
      *((_QWORD *)v4 + 3) = 0;
      v9 = v13 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr(v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
          {
            WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v8);
            WTF::fastFree(v11, v12);
          }
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

WTF *WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::reject<int,std::enable_if<true,void>>(_DWORD *a1, int *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  WTF *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 12);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)v8, a3, " rejecting ", (uint64_t)a1);
  v10 = *a2;
  v11 = a1[18];
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, _DWORD *))off_1E334F8D0[v11])(&v16, a1 + 14);
  a1[14] = v10;
  a1[16] = 1;
  a1[18] = 1;
  result = WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::dispatchAll((uint64_t)a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_19528DED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, char a11)
{
  int v12;

  if (a11)
  {
    v12 = __ldxr((unsigned __int8 *)a10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a10))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a10);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, uint64_t a3)
{
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::Logger *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  __int128 buf;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54[3];

  v54[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v47, " ignored already resolved or rejected ");
  result = WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(&v46, a3);
  v5 = (WTF::StringImpl *)v46;
  if (v48)
  {
    v6 = *((_DWORD *)v48 + 1);
    if (v47)
      goto LABEL_3;
LABEL_91:
    v7 = 0;
    if (v46)
      goto LABEL_4;
LABEL_92:
    v8 = 0;
    goto LABEL_5;
  }
  v6 = 0;
  if (!v47)
    goto LABEL_91;
LABEL_3:
  v7 = *((_DWORD *)v47 + 1);
  if (!v46)
    goto LABEL_92;
LABEL_4:
  v8 = *(_DWORD *)(v46 + 4);
LABEL_5:
  if ((v8 | v7) < 0)
    goto LABEL_95;
  v9 = __OFADD__(v7, v8);
  v10 = v7 + v8;
  v11 = v9;
  if (v6 < 0)
    goto LABEL_95;
  if (v11)
    goto LABEL_95;
  result = (v6 + v10);
  if (__OFADD__(v6, v10))
    goto LABEL_95;
  if (v48 && (*((_BYTE *)v48 + 16) & 4) == 0)
  {
    v12 = 0;
    goto LABEL_19;
  }
  if (v47)
  {
    v13 = *((_DWORD *)v47 + 4);
    v12 = (v13 >> 2) & 1;
    if (v46 && (v13 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v46)
    {
LABEL_18:
      v12 = (*(unsigned __int8 *)(v46 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v12 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, v48, (uint64_t)v47, v46, &buf);
  v49 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v46 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v14);
    else
      *(_DWORD *)v5 -= 2;
  }
  v15 = v47;
  v47 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v48;
  v48 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(NSObject **)(a1 + 32);
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v18)
  {
    WTF::String::utf8();
    v20 = v44 ? (char *)v44 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v20;
    _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v18 = (uint64_t)v44;
    v44 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        v18 = WTF::fastFree((WTF *)v18, v19);
      else
        --*(_DWORD *)v18;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        break;
      v23 = __ldaxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 | 1, v21))
        {
          v24 = WTF::Logger::observers((WTF::Logger *)v18);
          v25 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v25)
          {
            v26 = *(uint64_t **)v24;
            v27 = *(_QWORD *)v24 + 8 * v25;
            do
            {
              v28 = *v26;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v51 = 0;
              WTF::String::String((WTF::String *)&v52, " ignored already resolved or rejected ");
              v53 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>::toString(v54, a3);
              v44 = 0;
              v45 = 0;
              v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v45) = 3;
              v44 = v29;
              v30 = HIDWORD(v45);
              *((_DWORD *)v29 + 4 * HIDWORD(v45)) = buf;
              v31 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v29 + 2 * v30 + 1) = v31;
              *((_DWORD *)v29 + 4 * (v30 + 1)) = v51;
              v32 = v52;
              if (v52)
                *(_DWORD *)v52 += 2;
              *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
              *((_DWORD *)v29 + 4 * (v30 + 2)) = v53;
              v33 = v54[0];
              if (v54[0])
                *(_DWORD *)v54[0] += 2;
              *((_QWORD *)v29 + 2 * (v30 + 2) + 1) = v33;
              HIDWORD(v45) = v30 + 3;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, a1, 4, &v44);
              v34 = v44;
              if (HIDWORD(v45))
              {
                v35 = 16 * HIDWORD(v45);
                v36 = (WTF::StringImpl **)((char *)v44 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v44;
              }
              if (v34)
              {
                v44 = 0;
                LODWORD(v45) = 0;
                WTF::fastFree(v34, v19);
              }
              v38 = v54[0];
              v54[0] = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = v52;
              v52 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v40 -= 2;
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          v41 = __ldxr(v21);
          if (v41 == 1)
          {
            if (!__stlxr(0, v21))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v49;
  v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19528E3F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, int a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25)
{
  unsigned __int8 *v25;
  int v27;

  v27 = __ldxr(v25);
  if (v27 == 1)
  {
    if (!__stlxr(0, v25))
    {
LABEL_6:
      if (a19)
      {
        if (*(_DWORD *)a19 == 2)
          WTF::StringImpl::destroy(a19, a2);
        else
          *(_DWORD *)a19 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF *WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::resolve<WTF::RetainPtr<opaqueCMSampleBuffer *>,std::enable_if<true,void>>(uint64_t a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)v8, a3, " resolving ", a1);
  v10 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E334F8D0[v10])(&v16, a1 + 56);
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 56) = v11;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1;
  result = WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_19528E6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, char a11)
{
  int v12;

  if (a11)
  {
    v12 = __ldxr((unsigned __int8 *)a10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a10))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a10);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::BlockPtr<void ()(int,unsigned int,__CVBuffer *,CMTime,CMTime)>::fromCallable<WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_2>(WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_2)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  return WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_3::~$_3((uint64_t *)(a1 + 32), a2);
}

WTF *WTF::BlockPtr<void ()(int,unsigned int,__CVBuffer *,CMTime,CMTime)>::fromCallable<WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_2>(WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_2)::{lambda(void *,int,unsigned int,__CVBuffer *,CMTime,CMTime)#1}::__invoke(WTF::NativePromiseBase *a1, uint64_t a2, uint64_t a3, CFTypeRef cf, __int128 *a5, __int128 *a6)
{
  WTF::NativePromiseBase *v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  __int128 v21;
  unint64_t v22;
  CFTypeRef v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  WTF *result;
  uint64_t v29;
  unsigned __int8 *v30;
  _DWORD *v32;
  int v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  const char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  CFTypeRef v45;
  __int128 v46;
  _BYTE v47[32];
  uint64_t v48;

  v6 = a1;
  v37 = *a5;
  v38 = *((_QWORD *)a5 + 2);
  v35 = *a6;
  v36 = *((_QWORD *)a6 + 2);
  v7 = *((_QWORD *)a1 + 4);
  if (!v7)
    goto LABEL_19;
  v9 = a3;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 5);
  v11 = *((_QWORD *)a1 + 6);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v7);
LABEL_6:
  if (*(_QWORD *)(v7 + 24))
    ++*(_QWORD *)(v7 + 8);
  else
    v12 = 0;
  v14 = __ldxr((unsigned __int8 *)v7);
  if (v14 != 1)
  {
    __clrex();
LABEL_18:
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v12)
      goto LABEL_12;
    goto LABEL_19;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
    goto LABEL_18;
  if (v12)
  {
LABEL_12:
    v15 = *((_OWORD *)v6 + 6);
    v41 = *((_OWORD *)v6 + 5);
    v16 = *(_QWORD *)(v11 + 40);
    *(_QWORD *)&v39 = v12;
    *((_QWORD *)&v39 + 1) = v11;
    v17 = *((_QWORD *)v6 + 8);
    v18 = (const char *)*((_QWORD *)v6 + 9);
    *((_QWORD *)v6 + 9) = 0;
    v40 = v18;
    v42 = v15;
    LOBYTE(v43) = *((_BYTE *)v6 + 56);
    *((_QWORD *)&v43 + 1) = v17;
    v44 = __PAIR64__(v9, v10);
    v45 = cf;
    if (cf)
      CFRetain(cf);
    v46 = v37;
    *(_QWORD *)v47 = v38;
    *(_OWORD *)&v47[8] = v35;
    *(_QWORD *)&v47[24] = v36;
    v19 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v19 = off_1E334F9E8;
    *(_OWORD *)(v19 + 8) = v39;
    v20 = v40;
    *(_QWORD *)&v39 = 0;
    v40 = 0;
    *(_QWORD *)(v19 + 24) = v20;
    v21 = v42;
    *(_OWORD *)(v19 + 32) = v41;
    *(_OWORD *)(v19 + 48) = v21;
    v22 = v44;
    *(_OWORD *)(v19 + 64) = v43;
    *(_QWORD *)(v19 + 80) = v22;
    v23 = v45;
    v45 = 0;
    *(_QWORD *)(v19 + 88) = v23;
    v24 = v46;
    v25 = *(_OWORD *)&v47[16];
    *(_OWORD *)(v19 + 112) = *(_OWORD *)v47;
    *(_OWORD *)(v19 + 128) = v25;
    *(_OWORD *)(v19 + 96) = v24;
    v48 = v19;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 32))(v16, &v48);
    v27 = v48;
    v48 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    return (WTF *)WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_3::operator()(int,unsigned int,__CVBuffer *,CMTime,CMTime)::{lambda(void)#1}::~CMTime((uint64_t)&v39, v26);
  }
LABEL_19:
  LODWORD(v48) = 0;
  v39 = 0uLL;
  v40 = "operator()";
  *(_QWORD *)&v41 = 0;
  v29 = *((_QWORD *)v6 + 9);
  if (v29)
  {
    v30 = (unsigned __int8 *)(v29 + 48);
    if (__ldaxr((unsigned __int8 *)(v29 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v30))
    {
      goto LABEL_25;
    }
    a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v29 + 48, a2, a3, cf);
LABEL_25:
    v33 = *(_DWORD *)(v29 + 72);
    v34 = __ldxr(v30);
    if (v34 == 1)
    {
      if (!__stlxr(0, v30))
      {
LABEL_30:
        v32 = (_DWORD *)*((_QWORD *)v6 + 9);
        if (!v33)
          return WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::reject<int,std::enable_if<true,void>>(v32, (int *)&v48, (WTF::Logger::LogSiteIdentifier *)&v39);
        goto LABEL_31;
      }
    }
    else
    {
      __clrex();
    }
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v30);
    goto LABEL_30;
  }
  v32 = 0;
LABEL_31:
  result = (WTF *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result && *((unsigned __int8 *)result + 16) >= 4u)
    return (WTF *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)result, (WTF::Logger::LogSiteIdentifier *)&v39, (uint64_t)v32);
  return result;
}

void sub_19528E9C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 **a17, uint64_t a18, uint64_t a19)
{
  unsigned int *v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v26;
  uint64_t v27;
  WebCore::WebCoreDecompressionSession *v28;
  BOOL v29;
  int v30;
  WTF *v31;
  void *v32;
  uint64_t v33;

  if (v19)
  {
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead((uint64_t)v19);
    v21 = v19 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
    }
  }
  if (!a17)
LABEL_25:
    _Unwind_Resume(exception_object);
  v24 = *a17;
  if (__ldaxr(*a17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v24))
  {
LABEL_12:
    v26 = *((_QWORD *)v24 + 1);
    v27 = v26 - 1;
    *((_QWORD *)v24 + 1) = v26 - 1;
    if (v26 == 1)
    {
      v33 = *((_QWORD *)v24 + 2);
      v28 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v24 + 3);
      *((_QWORD *)v24 + 3) = 0;
      v29 = v33 != 0;
    }
    else
    {
      v28 = 0;
      v29 = 1;
    }
    v30 = __ldxr(v24);
    if (v30 == 1)
    {
      if (!__stlxr(0, v24))
      {
LABEL_19:
        if (!v27)
        {
          if (v28)
          {
            WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v28);
            WTF::fastFree(v31, v32);
          }
          if (!v29)
            WTF::fastFree((WTF *)v24, a2);
        }
        goto LABEL_25;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v24);
  goto LABEL_12;
}

uint64_t WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_3::operator()(int,unsigned int,__CVBuffer *,CMTime,CMTime)::{lambda(void)#1}::~CMTime(uint64_t a1, void *a2)
{
  const void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  WebCore::WebCoreDecompressionSession *v14;
  BOOL v15;
  int v16;
  WTF *v17;
  void *v18;
  uint64_t v20;

  v3 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::assertIsDead(v4);
    v5 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  v9 = *(unsigned __int8 ***)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
  {
    v10 = *v9;
    if (__ldaxr(*v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_15:
    v12 = *((_QWORD *)v10 + 1);
    v13 = v12 - 1;
    *((_QWORD *)v10 + 1) = v12 - 1;
    if (v12 == 1)
    {
      v20 = *((_QWORD *)v10 + 2);
      v14 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v10 + 3);
      *((_QWORD *)v10 + 3) = 0;
      v15 = v20 != 0;
    }
    else
    {
      v14 = 0;
      v15 = 1;
    }
    v16 = __ldxr(v10);
    if (v16 == 1)
    {
      if (!__stlxr(0, v10))
      {
        if (v13)
          return a1;
        goto LABEL_23;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return a1;
LABEL_23:
    if (v14)
    {
      WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v14);
      WTF::fastFree(v17, v18);
    }
    if (!v15)
      WTF::fastFree((WTF *)v10, a2);
  }
  return a1;
}

void sub_19528EC70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_3::operator()(int,unsigned int,__CVBuffer *,CMTime,CMTime)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E334F9E8;
  WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_3::operator()(int,unsigned int,__CVBuffer *,CMTime,CMTime)::{lambda(void)#1}::~CMTime((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_3::operator()(int,unsigned int,__CVBuffer *,CMTime,CMTime)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E334F9E8;
  WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_3::operator()(int,unsigned int,__CVBuffer *,CMTime,CMTime)::{lambda(void)#1}::~CMTime((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

WTF *WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::decodeSample(opaqueCMSampleBuffer *,BOOL)::$_3::operator()(int,unsigned int,__CVBuffer *,CMTime,CMTime)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  CMTime *v5;
  double Seconds;
  OpaqueCMTimebase *v7;
  int v8;
  int v9;
  const opaqueCMFormatDescription **v10;
  __CVBuffer *v11;
  WTF::NativePromiseBase *v12;
  int *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v17;
  unsigned __int8 *v18;
  _DWORD *v20;
  int v21;
  int v22;
  WTF *result;
  int v24;
  int v25;
  __int128 v26;
  const char *v27;
  uint64_t v28;
  CMTime v29;
  CMTime v30;

  v2 = *(_QWORD *)(a1 + 16);
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v4 = v3 - *(double *)(a1 + 72);
  v26 = *(_OWORD *)(a1 + 120);
  v27 = *(const char **)(a1 + 136);
  Seconds = PAL::softLinkCoreMediaCMTimeGetSeconds((PAL *)&v26, v5);
  WebCore::WebCoreDecompressionSession::updateQosWithDecodeTimeStatistics((WebCore::WebCoreDecompressionSession *)v2, v4 / Seconds, v7);
  v8 = *(unsigned __int8 *)(a1 + 64);
  v9 = *(_DWORD *)(a1 + 80);
  v10 = (const opaqueCMFormatDescription **)*(unsigned int *)(a1 + 84);
  v11 = *(__CVBuffer **)(a1 + 88);
  v30 = *(CMTime *)(a1 + 96);
  v29 = *(CMTime *)(a1 + 120);
  WebCore::WebCoreDecompressionSession::handleDecompressionOutput((WebCore::WebCoreDecompressionSession *)v2, v8, v9, v10, v11, &v30, &v29);
  v13 = (int *)(v2 + 208);
  if (*(_DWORD *)(v2 + 208))
  {
    v26 = 0uLL;
    v27 = "operator()";
    v28 = 0;
    v14 = *(_QWORD *)(a1 + 24);
    if (v14)
    {
      v15 = (unsigned __int8 *)(v14 + 48);
      if (__ldaxr((unsigned __int8 *)(v14 + 48)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v15))
      {
        goto LABEL_11;
      }
      v12 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v14 + 48);
LABEL_11:
      v21 = *(_DWORD *)(v14 + 72);
      v22 = __ldxr(v15);
      if (v22 == 1)
      {
        if (!__stlxr(0, v15))
        {
LABEL_16:
          v20 = *(_DWORD **)(a1 + 24);
          if (!v21)
            return WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::reject<int &,std::enable_if<true,void>>(v20, v13, (WTF::Logger::LogSiteIdentifier *)&v26);
          goto LABEL_26;
        }
      }
      else
      {
        __clrex();
      }
      v12 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v15);
      goto LABEL_16;
    }
    goto LABEL_8;
  }
  v26 = 0uLL;
  v27 = "operator()";
  v28 = 0;
  v17 = *(_QWORD *)(a1 + 24);
  if (!v17)
  {
LABEL_8:
    v20 = 0;
    goto LABEL_26;
  }
  v18 = (unsigned __int8 *)(v17 + 48);
  if (__ldaxr((unsigned __int8 *)(v17 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_20;
  }
  v12 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v17 + 48);
LABEL_20:
  v24 = *(_DWORD *)(v17 + 72);
  v25 = __ldxr(v18);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v18))
LABEL_24:
    v12 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v18);
  v20 = *(_DWORD **)(a1 + 24);
  if (!v24)
    return WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::resolve<WTF::RetainPtr<opaqueCMSampleBuffer *>,std::enable_if<true,void>>((uint64_t)v20, (uint64_t *)(v2 + 200), (WTF::Logger::LogSiteIdentifier *)&v26);
LABEL_26:
  result = (WTF *)WTF::NativePromiseBase::logChannel(v12);
  if (*(_BYTE *)result)
  {
    if (*((unsigned __int8 *)result + 16) >= 4u)
      return (WTF *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)result, (WTF::Logger::LogSiteIdentifier *)&v26, (uint64_t)v20);
  }
  return result;
}

uint64_t WebCore::`anonymous namespace'::WebProcessGraphicsContextGLCocoa::layerContentsDisplayDelegate@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 328);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return this;
}

void WebCore::`anonymous namespace'::WebProcessGraphicsContextGLCocoa::~WebProcessGraphicsContextGLCocoa(WebCore::_anonymous_namespace_::WebProcessGraphicsContextGLCocoa *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  WebCore::GraphicsContextGLCocoa::~GraphicsContextGLCocoa(this);
}

{
  _DWORD *v2;
  WTF *v3;
  void *v4;

  v2 = (_DWORD *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  WebCore::GraphicsContextGLCocoa::~GraphicsContextGLCocoa(this);
  WTF::fastFree(v3, v4);
}

void WebCore::`anonymous namespace'::WebProcessGraphicsContextGLCocoa::prepareForDisplay(WebCore::_anonymous_namespace_::WebProcessGraphicsContextGLCocoa *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::GraphicsContextGLANGLE *v5;
  WebCore::GraphicsContextGLANGLE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __IOSurface *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  void *v18;
  const void *v19;
  unsigned int v20;
  BOOL v21;
  const void *v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  WebCore::GraphicsContextGLANGLE *v28;
  CFTypeRef cf;
  char v30;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  v3 = (unsigned int *)(v2 + 8);
  *(_QWORD *)v2 = off_1E33503A0;
  *(_WORD *)(v2 + 12) = 0;
  *(_BYTE *)(v2 + 14) = 0;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (WebCore::GraphicsContextGLANGLE *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = &off_1E33503C8;
  *((_QWORD *)v5 + 1) = v2;
  v28 = v5;
  WebCore::GraphicsContextGLCocoa::prepareForDisplayWithFinishedSignal(this, &v28);
  v6 = v28;
  v28 = 0;
  if (v6)
    (*(void (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 41);
  v8 = *((_QWORD *)this + 2 * ((*((_QWORD *)this + 34) + 2) % 3uLL) + 35);
  if (!v8)
  {
    v12 = *(unsigned int **)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
    v16 = *(_QWORD *)(v7 + 16);
    *(_QWORD *)(v7 + 16) = 0;
    if (v16)
    {
      v17 = *(const void **)(v16 + 48);
      *(_QWORD *)(v16 + 48) = 0;
      if (v17)
        CFRelease(v17);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v16 + 40));
      if (*(_BYTE *)(v16 + 16))
      {
        v19 = *(const void **)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        if (v19)
          CFRelease(v19);
      }
      WTF::fastFree((WTF *)v16, v18);
    }
    goto LABEL_22;
  }
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(__IOSurface **)(v8 + 48);
  if (v9 && v10 == *(__IOSurface **)(v9 + 48))
  {
    do
    {
LABEL_22:
      v20 = __ldaxr(v3);
      v21 = --v20 == 0;
    }
    while (__stlxr(v20, v3));
    goto LABEL_38;
  }
  LOBYTE(cf) = 0;
  v30 = 0;
  if (v10)
  {
    v11 = WTF::fastMalloc((WTF *)0x40);
    WebCore::IOSurface::IOSurface(v11, v10, (uint64_t *)&cf);
    v9 = *(_QWORD *)(v7 + 16);
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(v7 + 16) = v11;
  if (v9)
  {
    v22 = *(const void **)(v9 + 48);
    *(_QWORD *)(v9 + 48) = 0;
    if (v22)
      CFRelease(v22);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v9 + 40));
    if (*(_BYTE *)(v9 + 16))
    {
      v24 = *(const void **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v24)
        CFRelease(v24);
    }
    WTF::fastFree((WTF *)v9, v23);
  }
  if (v30 && cf)
    CFRelease(cf);
  v25 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 24) = v2;
  if (v25)
  {
    v2 = v25;
    v26 = (unsigned int *)(v25 + 8);
    do
    {
      v27 = __ldaxr(v26);
      v21 = --v27 == 0;
    }
    while (__stlxr(v27, v26));
LABEL_38:
    if (v21)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
  }
}

void sub_19528F234(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12)
{
  unsigned int *v12;
  WTF *v13;
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;

  WTF::fastFree(v13, a2);
  if (a12 && cf)
    CFRelease(cf);
  do
  {
    v16 = __ldaxr(v14);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v14));
  if (!v17)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
  }
  _Unwind_Resume(a1);
}

void WebCore::`anonymous namespace'::DisplayBufferDisplayDelegate::~DisplayBufferDisplayDelegate(WebCore::_anonymous_namespace_::DisplayBufferDisplayDelegate *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  const void *v9;

  v2 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    v7 = *(const void **)(v6 + 48);
    *(_QWORD *)(v6 + 48) = 0;
    if (v7)
      CFRelease(v7);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v6 + 40));
    if (*(_BYTE *)(v6 + 16))
    {
      v9 = *(const void **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (v9)
        CFRelease(v9);
    }
    WTF::fastFree((WTF *)v6, v8);
  }
}

void WebCore::`anonymous namespace'::DisplayBufferDisplayDelegate::~DisplayBufferDisplayDelegate(WebCore::_anonymous_namespace_::DisplayBufferDisplayDelegate *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  const void *v10;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = *(const void **)(v7 + 48);
    *(_QWORD *)(v7 + 48) = 0;
    if (v8)
      CFRelease(v8);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v7 + 40));
    if (*(_BYTE *)(v7 + 16))
    {
      v10 = *(const void **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v10)
        CFRelease(v10);
    }
    WTF::fastFree((WTF *)v7, v9);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::`anonymous namespace'::DisplayBufferDisplayDelegate::prepareToDelegateDisplay(WebCore::_anonymous_namespace_::DisplayBufferDisplayDelegate *this, WebCore::PlatformCALayer *a2)
{
  return (*(uint64_t (**)(WebCore::PlatformCALayer *, _QWORD))(*(_QWORD *)a2 + 240))(a2, *((unsigned __int8 *)this + 32));
}

unsigned int *WebCore::`anonymous namespace'::DisplayBufferDisplayDelegate::display(WebCore::_anonymous_namespace_::DisplayBufferDisplayDelegate *this, WebCore::PlatformCALayer *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;

  if (!*((_QWORD *)this + 2))
    return (unsigned int *)(*(uint64_t (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 504))(a2);
  v9 = *((_QWORD *)this + 2);
  v2 = (unsigned int *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = v2 + 2;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v10 = v2;
  (*(void (**)(WebCore::PlatformCALayer *, uint64_t *))(*(_QWORD *)a2 + 520))(a2, &v9);
  result = v10;
  v10 = 0;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void sub_19528F51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::`anonymous namespace'::DisplayBufferDisplayDelegate::orientation(WebCore::_anonymous_namespace_::DisplayBufferDisplayDelegate *this)
{
  return 1;
}

BOOL WebCore::`anonymous namespace'::DisplayBufferFence::waitFor(unsigned __int8 *a1, double a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  double v6;
  _BOOL8 v7;
  int v8;
  double v10;
  int v11;

  v3 = a1;
  v4 = a1 + 12;
  if (__ldaxr(a1 + 12))
  {
    __clrex();
LABEL_4:
    a1 = (unsigned __int8 *)MEMORY[0x19AEA534C](a1 + 12);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  if (fabs(a2) != INFINITY)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    a2 = a2 + v6;
  }
  v10 = a2;
  v11 = 1;
  while (!v3[13])
  {
    if ((WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)(v3 + 14), v4, (WTF::TimeWithDynamicClockType *)&v10) & 1) == 0)
    {
      v7 = v3[13] != 0;
      goto LABEL_12;
    }
  }
  v7 = 1;
LABEL_12:
  v8 = __ldxr(v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, v4))
      return v7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return v7;
}

void sub_19528F65C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::`anonymous namespace'::WebProcessGraphicsContextGLCocoa::prepareForDisplay(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E33503C8;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::`anonymous namespace'::WebProcessGraphicsContextGLCocoa::prepareForDisplay(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33503C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::`anonymous namespace'::WebProcessGraphicsContextGLCocoa::prepareForDisplay(void)::$_0,void>::call(uint64_t result, const void *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 v5;
  int v6;

  v2 = *(unsigned __int8 **)(result + 8);
  v3 = v2 + 12;
  if (__ldaxr(v2 + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v2 + 12);
LABEL_5:
  if (!v2[13])
  {
    v2[13] = 1;
    result = (uint64_t)(v2 + 14);
    v5 = atomic_load(v2 + 14);
    if ((v5 & 1) != 0)
    {
      atomic_store(0, (unsigned __int8 *)result);
      result = WTF::ParkingLot::unparkAll((WTF::ParkingLot *)result, a2);
    }
  }
  v6 = __ldxr(v3);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 12));
  }
  if (__stlxr(0, v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 12));
  return result;
}

void sub_19528F7F0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::VideoMediaSampleRenderer::enqueueSample(opaqueCMSampleBuffer *,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E33503F0;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoMediaSampleRenderer::enqueueSample(opaqueCMSampleBuffer *,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33503F0;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

PAL *WTF::Detail::CallableWrapper<WebCore::VideoMediaSampleRenderer::enqueueSample(opaqueCMSampleBuffer *,BOOL)::$_0,void>::call(PAL *result, void *a2)
{
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  int v6;
  int v7;
  int v8;
  void *v9;
  int v10;
  double v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  BOOL v17;
  int v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[12];
  unsigned int v23;

  v2 = *((_QWORD *)result + 1);
  if (!v2)
    return result;
  v3 = (unsigned __int8 **)*((_QWORD *)result + 2);
  v4 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = (PAL *)MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = (PAL *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v3)
    return result;
LABEL_15:
  v7 = *(_DWORD *)(v4 + 40) - 1;
  *(_DWORD *)(v4 + 40) = v7;
  if (!v7 && *(_BYTE *)(v4 + 72))
  {
    result = (PAL *)objc_msgSend((id)PAL::getAVSampleBufferDisplayLayerClass(result), "instancesRespondToSelector:", sel_expectMinimumUpcomingSampleBufferPresentationTime_);
    if ((_DWORD)result)
    {
      if (*(_DWORD *)(v4 + 40))
      {
        if (!*(_BYTE *)(v4 + 72))
          *(_BYTE *)(v4 + 72) = 1;
        goto LABEL_26;
      }
      v9 = *(void **)(v4 + 8);
      if ((*(_BYTE *)(v4 + 68) & 0x20) != 0)
      {
        WTF::MediaTime::toDouble((WTF::MediaTime *)(v4 + 56));
        PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*(unsigned int *)(v4 + 64), v11, v10);
      }
      else
      {
        PAL::softLinkCoreMediaCMTimeMake(*(PAL **)(v4 + 56), *(unsigned int *)(v4 + 64), v8);
      }
      v23 = v23 & 0xFFFFFFFE | *(_BYTE *)(v4 + 68) & 1 | *(_BYTE *)(v4 + 68) & 0xE;
      result = (PAL *)objc_msgSend(v9, "expectMinimumUpcomingSampleBufferPresentationTime:", v22);
    }
    if (*(_BYTE *)(v4 + 72))
LABEL_26:
      *(_BYTE *)(v4 + 72) = 0;
  }
  if (*(_BYTE *)(v4 + 44))
  {
    *(_BYTE *)(v4 + 44) = 0;
    result = *(PAL **)(v4 + 32);
    if (result)
      result = (PAL *)(*(uint64_t (**)(PAL *))(*(_QWORD *)result + 16))(result);
  }
  v12 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_34;
  }
  result = (PAL *)MEMORY[0x19AEA534C](v12);
LABEL_34:
  v14 = *((_QWORD *)v12 + 1);
  v15 = v14 - 1;
  *((_QWORD *)v12 + 1) = v14 - 1;
  if (v14 == 1)
  {
    v21 = *((_QWORD *)v12 + 2);
    v16 = (id *)*((_QWORD *)v12 + 3);
    *((_QWORD *)v12 + 3) = 0;
    v17 = v21 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr(v12);
  if (v18 != 1)
  {
    __clrex();
LABEL_41:
    result = (PAL *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      return result;
    goto LABEL_42;
  }
  if (__stlxr(0, v12))
    goto LABEL_41;
  if (v15)
    return result;
LABEL_42:
  if (v16)
  {
    WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v16);
    result = (PAL *)WTF::fastFree(v19, v20);
  }
  if (!v17)
    return (PAL *)WTF::fastFree((WTF *)v12, a2);
  return result;
}

void sub_19528FBF4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  BOOL v9;
  int v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  v4 = *v2;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v13 = *(_QWORD *)(v4 + 16);
      v8 = *(id **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v13 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
          {
            WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v8);
            WTF::fastFree(v11, v12);
          }
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::VideoMediaSampleRenderer::initializeDecompressionSession(void)::$_0,void,WTF::RetainPtr<opaqueCMSampleBuffer *> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3350418;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoMediaSampleRenderer::initializeDecompressionSession(void)::$_0,void,WTF::RetainPtr<opaqueCMSampleBuffer *> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3350418;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoMediaSampleRenderer::initializeDecompressionSession(void)::$_0,void,WTF::RetainPtr<opaqueCMSampleBuffer *> &&>::call(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v6;
  void *v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  BOOL v13;
  int v14;
  WTF *v15;
  void *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(result + 8);
  if (!v2)
    return result;
  v4 = *(_QWORD *)(result + 16);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v4)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v4)
    return result;
LABEL_15:
  result = objc_msgSend(*(id *)(v4 + 8), "enqueueSampleBuffer:", *a2);
  v8 = *(unsigned __int8 **)v4;
  if (__ldaxr(*(unsigned __int8 **)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_19;
  }
  result = MEMORY[0x19AEA534C](v8);
LABEL_19:
  v10 = *((_QWORD *)v8 + 1);
  v11 = v10 - 1;
  *((_QWORD *)v8 + 1) = v10 - 1;
  if (v10 == 1)
  {
    v17 = *((_QWORD *)v8 + 2);
    v12 = (id *)*((_QWORD *)v8 + 3);
    *((_QWORD *)v8 + 3) = 0;
    v13 = v17 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr(v8);
  if (v14 != 1)
  {
    __clrex();
LABEL_26:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return result;
    goto LABEL_27;
  }
  if (__stlxr(0, v8))
    goto LABEL_26;
  if (v11)
    return result;
LABEL_27:
  if (v12)
  {
    WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v12);
    result = WTF::fastFree(v15, v16);
  }
  if (!v13)
    return WTF::fastFree((WTF *)v8, v7);
  return result;
}

void sub_19528FF94(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  BOOL v9;
  int v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  v4 = *v2;
  if (__ldaxr(*v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
LABEL_6:
    v6 = *((_QWORD *)v4 + 1);
    v7 = v6 - 1;
    *((_QWORD *)v4 + 1) = v6 - 1;
    if (v6 == 1)
    {
      v13 = *((_QWORD *)v4 + 2);
      v8 = (id *)*((_QWORD *)v4 + 3);
      *((_QWORD *)v4 + 3) = 0;
      v9 = v13 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr(v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
          {
            WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v8);
            WTF::fastFree(v11, v12);
          }
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::VideoMediaSampleRenderer::initializeDecompressionSession(void)::$_1,void,int>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3350440;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoMediaSampleRenderer::initializeDecompressionSession(void)::$_1,void,int>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3350440;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::VideoMediaSampleRenderer::initializeDecompressionSession(void)::$_1,void,int>::call(_QWORD *a1, int a2)
{
  uint64_t v2;
  unsigned __int8 **v4;
  uint64_t v5;
  int v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  BOOL v19;
  int v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t AVFoundation_AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if (!v2)
    return;
  v4 = (unsigned __int8 **)a1[2];
  v5 = a1[3];
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v7 = __ldxr((unsigned __int8 *)v2);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v4)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v4)
    return;
LABEL_15:
  v8 = (void *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.WebKit"), a2, 0);
  v9 = v8;
  if (v8)
    v8 = (void *)CFRetain(v8);
  AVFoundation_AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey = PAL::get_AVFoundation_AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey((PAL *)v8);
  v25[0] = v9;
  v10 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &AVFoundation_AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey, 1);
  v11 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  objc_msgSend(v11, "postNotificationName:object:userInfo:", PAL::get_AVFoundation_AVSampleBufferDisplayLayerFailedToDecodeNotification((PAL *)v11), *(_QWORD *)(v5 + 8), v10);
  v12 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  objc_msgSend(v12, "postNotificationName:object:userInfo:", PAL::get_AVFoundation_AVSampleBufferVideoRendererDidFailToDecodeNotification((PAL *)v12), *(_QWORD *)(v5 + 8), v10);
  if (v9)
    CFRelease(v9);
  v14 = *v4;
  if (__ldaxr(*v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_23:
  v16 = *((_QWORD *)v14 + 1);
  v17 = v16 - 1;
  *((_QWORD *)v14 + 1) = v16 - 1;
  if (v16 == 1)
  {
    v23 = *((_QWORD *)v14 + 2);
    v18 = (id *)*((_QWORD *)v14 + 3);
    *((_QWORD *)v14 + 3) = 0;
    v19 = v23 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr(v14);
  if (v20 != 1)
  {
    __clrex();
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
    if (v17)
      return;
    goto LABEL_31;
  }
  if (__stlxr(0, v14))
    goto LABEL_30;
  if (v17)
    return;
LABEL_31:
  if (v18)
  {
    WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v18);
    WTF::fastFree(v21, v22);
  }
  if (!v19)
    WTF::fastFree((WTF *)v14, v13);
}

void sub_1952903FC(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  BOOL v9;
  int v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  v4 = *v2;
  if (__ldaxr(*v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
LABEL_6:
    v6 = *((_QWORD *)v4 + 1);
    v7 = v6 - 1;
    *((_QWORD *)v4 + 1) = v6 - 1;
    if (v6 == 1)
    {
      v13 = *((_QWORD *)v4 + 2);
      v8 = (id *)*((_QWORD *)v4 + 3);
      *((_QWORD *)v4 + 3) = 0;
      v9 = v13 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr(v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
          {
            WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v8);
            WTF::fastFree(v11, v12);
          }
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

void std::__function::__func<WebCore::layersAtPointToCheckForScrolling(std::function<BOOL ()(CALayer *,CGPoint)>,std::function<unsigned long long ()(CALayer *)>,CALayer *,WebCore::FloatPoint const&,BOOL &)::$_0,std::allocator<WebCore::layersAtPointToCheckForScrolling(std::function<BOOL ()(CALayer *,CGPoint)>,std::function<unsigned long long ()(CALayer *)>,CALayer *,WebCore::FloatPoint const&,BOOL &)::$_0>,BOOL ()(CALayer *,CGPoint)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::layersAtPointToCheckForScrolling(std::function<BOOL ()(CALayer *,CGPoint)>,std::function<unsigned long long ()(CALayer *)>,CALayer *,WebCore::FloatPoint const&,BOOL &)::$_0,std::allocator<WebCore::layersAtPointToCheckForScrolling(std::function<BOOL ()(CALayer *,CGPoint)>,std::function<unsigned long long ()(CALayer *)>,CALayer *,WebCore::FloatPoint const&,BOOL &)::$_0>,BOOL ()(CALayer *,CGPoint)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3350468;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<WebCore::layersAtPointToCheckForScrolling(std::function<BOOL ()(CALayer *,CGPoint)>,std::function<unsigned long long ()(CALayer *)>,CALayer *,WebCore::FloatPoint const&,BOOL &)::$_0,std::allocator<WebCore::layersAtPointToCheckForScrolling(std::function<BOOL ()(CALayer *,CGPoint)>,std::function<unsigned long long ()(CALayer *)>,CALayer *,WebCore::FloatPoint const&,BOOL &)::$_0>,BOOL ()(CALayer *,CGPoint)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3350468;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<WebCore::layersAtPointToCheckForScrolling(std::function<BOOL ()(CALayer *,CGPoint)>,std::function<unsigned long long ()(CALayer *)>,CALayer *,WebCore::FloatPoint const&,BOOL &)::$_0,std::allocator<WebCore::layersAtPointToCheckForScrolling(std::function<BOOL ()(CALayer *,CGPoint)>,std::function<unsigned long long ()(CALayer *)>,CALayer *,WebCore::FloatPoint const&,BOOL &)::$_0>,BOOL ()(CALayer *,CGPoint)>::operator()(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  v12 = *a3;
  v11 = v4;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    goto LABEL_8;
  if (((*(uint64_t (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v6 + 48))(v6, &v11, &v12) & 1) != 0)
    return 1;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v12 = v4;
  v9 = *(_QWORD *)(v8 + 24);
  if (v9)
  {
    result = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v9 + 48))(v9, &v12);
    if (result)
    {
      result = 1;
      **(_BYTE **)(a1 + 24) = 1;
    }
  }
  else
  {
LABEL_8:
    v10 = (_QWORD *)std::__throw_bad_function_call[abi:sn180100]();
    return (uint64_t)WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::invalidate(void)::$_0,void>::~CallableWrapper(v10);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::invalidate(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33504B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::invalidate(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33504B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::invalidate(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::maybeBecomeReadyForMoreMediaData(void)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = off_1E33504D8;
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::maybeBecomeReadyForMoreMediaData(void)::$_0,void>::~CallableWrapper(unsigned __int8 ***a1, void *a2)
{
  void *v3;

  *a1 = (unsigned __int8 **)off_1E33504D8;
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::maybeBecomeReadyForMoreMediaData(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::enqueueSample(opaqueCMSampleBuffer *,BOOL)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  const void *v3;

  *(_QWORD *)a1 = off_1E3350500;
  v3 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    CFRelease(v3);
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return a1;
}

{
  const void *v3;
  void *v4;

  *(_QWORD *)a1 = off_1E3350500;
  v3 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    CFRelease(v3);
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::enqueueSample(opaqueCMSampleBuffer *,BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(const void **)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 28);
  v1 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v1 + 160);
  v6 = *(_QWORD *)(v1 + 168);
  if (v5)
  {
    if (v6 + 1 != v5)
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = *(unsigned int *)(v1 + 184);
  if (!v6)
  {
    if ((_DWORD)v7)
    {
      v6 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v6 == v7 - 1)
  {
LABEL_9:
    WTF::Deque<std::tuple<WTF::RetainPtr<opaqueCMSampleBuffer *>,BOOL,unsigned int>,0ul>::expandCapacity((uint64_t *)(v1 + 160));
    v6 = *(_QWORD *)(v1 + 168);
  }
LABEL_10:
  v8 = *(_QWORD *)(v1 + 176) + 16 * v6;
  *(_QWORD *)v8 = v2;
  if (v2)
  {
    CFRetain(v2);
    v6 = *(_QWORD *)(v1 + 168);
  }
  *(_BYTE *)(v8 + 8) = v3;
  *(_DWORD *)(v8 + 12) = v4;
  if (v6 == *(unsigned int *)(v1 + 184) - 1)
    v9 = 0;
  else
    v9 = v6 + 1;
  *(_QWORD *)(v1 + 168) = v9;
  WebCore::WebCoreDecompressionSession::maybeDecodeNextSample((WebCore::WebCoreDecompressionSession *)v1);
}

void WTF::Deque<std::tuple<WTF::RetainPtr<opaqueCMSampleBuffer *>,BOOL,unsigned int>,0ul>::expandCapacity(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  WTF *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  WTF *v11;
  WTF *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  WTF *v22;
  const void *v23;
  const void *v24;

  v1 = *((unsigned int *)a1 + 6);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0xFFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = (WTF *)a1[2];
    v5 = v2 + 1;
    v6 = WTF::fastMalloc((WTF *)(16 * (v2 + 1)));
    v8 = v6;
    *((_DWORD *)a1 + 6) = v5;
    a1[2] = v6;
    v9 = *a1;
    v10 = a1[1];
    v11 = (WTF *)((char *)v4 + 16 * v10);
    if (*a1 <= v10)
    {
      if (*a1 != v10)
      {
        v21 = v6 + 16 * v9;
        v22 = (WTF *)((char *)v4 + 16 * v9);
        do
        {
          v23 = *(const void **)v22;
          *(_QWORD *)v22 = 0;
          *(_QWORD *)v21 = v23;
          *(_BYTE *)(v21 + 8) = *((_BYTE *)v22 + 8);
          *(_DWORD *)(v21 + 12) = *((_DWORD *)v22 + 3);
          v24 = *(const void **)v22;
          *(_QWORD *)v22 = 0;
          if (v24)
            CFRelease(v24);
          v22 = (WTF *)((char *)v22 + 16);
          v21 += 16;
        }
        while (v22 != v11);
      }
    }
    else
    {
      if (v10)
      {
        v12 = v4;
        do
        {
          v13 = *(const void **)v12;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)v8 = v13;
          *(_BYTE *)(v8 + 8) = *((_BYTE *)v12 + 8);
          *(_DWORD *)(v8 + 12) = *((_DWORD *)v12 + 3);
          v14 = *(const void **)v12;
          *(_QWORD *)v12 = 0;
          if (v14)
            CFRelease(v14);
          v12 = (WTF *)((char *)v12 + 16);
          v8 += 16;
        }
        while (v12 != v11);
        v5 = *((_DWORD *)a1 + 6);
        v9 = *a1;
        v8 = a1[2];
      }
      v15 = v9 - v1 + v5;
      if (v9 != v1)
      {
        v16 = (char *)v4 + 16 * v1;
        v17 = v8 + 16 * v15;
        v18 = (char *)v4 + 16 * v9;
        do
        {
          v19 = *(const void **)v18;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)v17 = v19;
          *(_BYTE *)(v17 + 8) = v18[8];
          *(_DWORD *)(v17 + 12) = *((_DWORD *)v18 + 3);
          v20 = *(const void **)v18;
          *(_QWORD *)v18 = 0;
          if (v20)
            CFRelease(v20);
          v18 += 16;
          v17 += 16;
        }
        while (v18 != v16);
      }
      *a1 = v15;
    }
    if (v4)
    {
      if ((WTF *)a1[2] == v4)
      {
        a1[2] = 0;
        *((_DWORD *)a1 + 6) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
}

uint64_t WTF::NativePromiseProducer<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  WTF::NativePromiseBase *v5;
  __int128 v6;
  unsigned __int8 *v7;
  _BYTE *v9;
  int v10;

  v4 = WTF::fastMalloc((WTF *)0x80);
  v5 = (WTF::NativePromiseBase *)WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>::NativePromise(v4, a2);
  *(_QWORD *)a1 = v4;
  v6 = *a2;
  *(_OWORD *)(a1 + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v6;
  v7 = (unsigned __int8 *)(v4 + 48);
  if (__ldaxr((unsigned __int8 *)(v4 + 48)))
  {
    __clrex();
LABEL_4:
    v5 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v4 + 48);
    goto LABEL_5;
  }
  if (__stxr(1u, v7))
    goto LABEL_4;
LABEL_5:
  v9 = (_BYTE *)WTF::NativePromiseBase::logChannel(v5);
  if (*v9 && v9[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>((uint64_t)v9, (WTF::Logger::LogSiteIdentifier *)a2, " runSynchronouslyOnTarget ", v4);
  atomic_store(0, (unsigned __int8 *)(v4 + 121));
  v10 = __ldxr(v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, v7))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 48));
  return a1;
}

void sub_195290A98(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<WTF::RetainPtr<opaqueCMSampleBuffer *>,int,0u>>>::~ThenCommand(uint64_t *a1)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::NativePromiseBase *v17;

  v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    v3 = *a1;
    a1[1] = 0;
    v17 = v2;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v3, &v17, (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
    v4 = (unsigned int *)v17;
    v17 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    v8 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  v12 = (unsigned int *)*a1;
  *a1 = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  return a1;
}

void sub_195290C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int **v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  if (a10)
  {
    v12 = a10 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  v15 = v10[1];
  v10[1] = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  v19 = *v10;
  *v10 = 0;
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::enqueueDecodedSample(opaqueCMSampleBuffer *)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = off_1E3350528;
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::enqueueDecodedSample(opaqueCMSampleBuffer *)::$_0,void>::~CallableWrapper(unsigned __int8 ***a1, void *a2)
{
  void *v3;

  *a1 = (unsigned __int8 **)off_1E3350528;
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::enqueueDecodedSample(opaqueCMSampleBuffer *)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

void sub_195290DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::requestMediaDataWhenReady(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  WebCore::WebCoreDecompressionSession *v8;
  BOOL v9;
  int v10;
  WTF *v11;
  void *v12;
  uint64_t v14;

  v3 = (unsigned __int8 **)a1[1];
  *a1 = &off_1E3350550;
  a1[1] = 0;
  if (!v3)
    return a1;
  v4 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *((_QWORD *)v4 + 1);
  v7 = v6 - 1;
  *((_QWORD *)v4 + 1) = v6 - 1;
  if (v6 == 1)
  {
    v14 = *((_QWORD *)v4 + 2);
    v8 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    v9 = v14 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr(v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
  {
    WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v8);
    WTF::fastFree(v11, v12);
  }
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::requestMediaDataWhenReady(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  WebCore::WebCoreDecompressionSession *v8;
  BOOL v9;
  int v10;
  WTF *v11;
  void *v12;
  uint64_t v14;

  v3 = (unsigned __int8 **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3350550;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *((_QWORD *)v4 + 1);
  v7 = v6 - 1;
  *((_QWORD *)v4 + 1) = v6 - 1;
  if (v6 == 1)
  {
    v14 = *((_QWORD *)v4 + 2);
    v8 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    v9 = v14 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr(v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
  {
    WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v8);
    WTF::fastFree(v11, v12);
  }
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::requestMediaDataWhenReady(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::flush(void)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = off_1E3350578;
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::flush(void)::$_0,void>::~CallableWrapper(unsigned __int8 ***a1, void *a2)
{
  void *v3;

  *a1 = (unsigned __int8 **)off_1E3350578;
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref(a1 + 2, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::flush(void)::$_0,void>::call(uint64_t a1, opaqueCMBufferQueue *a2)
{
  uint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  WTF *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  const void *v13;
  const void **v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  _QWORD *v21;

  v3 = *(_QWORD *)(a1 + 8);
  PAL::softLinkCoreMediaCMBufferQueueReset(*(PAL **)(*(_QWORD *)(a1 + 16) + 24), a2);
  v5 = *(_QWORD *)(v3 + 160);
  v6 = *(_QWORD *)(v3 + 168);
  v7 = *(WTF **)(v3 + 176);
  if (v5 <= v6)
  {
    if (v5 == v6)
      goto LABEL_20;
    v14 = (const void **)((char *)v7 + 16 * v5);
    v15 = 16 * v6 - 16 * v5;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
        CFRelease(v16);
      v14 += 2;
      v15 -= 16;
    }
    while (v15);
  }
  else
  {
    if (v6)
    {
      v8 = 16 * v6;
      do
      {
        v9 = *(const void **)v7;
        *(_QWORD *)v7 = 0;
        if (v9)
          CFRelease(v9);
        v7 = (WTF *)((char *)v7 + 16);
        v8 -= 16;
      }
      while (v8);
      v7 = *(WTF **)(v3 + 176);
      v5 = *(_QWORD *)(v3 + 160);
    }
    v10 = *(unsigned int *)(v3 + 184);
    if (v5 != v10)
    {
      v11 = (const void **)((char *)v7 + 16 * v5);
      v12 = 16 * v10 - 16 * v5;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
          CFRelease(v13);
        v11 += 2;
        v12 -= 16;
      }
      while (v12);
    }
  }
  v7 = *(WTF **)(v3 + 176);
LABEL_20:
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  if (v7)
  {
    *(_QWORD *)(v3 + 176) = 0;
    *(_DWORD *)(v3 + 184) = 0;
    WTF::fastFree(v7, v4);
  }
  v17 = *(_QWORD *)(v3 + 48);
  v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v19 = off_1E33505A0;
  v19[1] = v18;
  v21 = v19;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v17 + 24))(v17, &v21);
  result = (uint64_t)v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19529115C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::flush(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = off_1E33505A0;
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::flush(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(unsigned __int8 ***a1, void *a2)
{
  void *v3;

  *a1 = (unsigned __int8 **)off_1E33505A0;
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

CFIndex WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::flush(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v4;
  CFIndex result;
  const void *ValueAtIndex;
  const __CFDictionary *v7;
  int v8;

  v2 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 12);
  if (__ldaxr(v2))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](v2);
    goto LABEL_5;
  }
  if (__stxr(1u, v2))
    goto LABEL_4;
LABEL_5:
  atomic_store(0, (unsigned int *)(*(_QWORD *)(a1 + 8) + 100));
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 96) = 0;
  result = *(_QWORD *)(v4 + 88);
  if (result && *(_QWORD *)(v4 + 16))
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 88), *(int *)(v4 + 96));
      result = WebCore::softLinkVideoToolboxVTSessionSetProperties(*(WebCore **)(v4 + 16), ValueAtIndex, v7);
      atomic_store(0, (unsigned int *)(v4 + 100));
    }
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void sub_19529134C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::initializeVideoDecoder(unsigned int)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = off_1E33505E0;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(v3);
    v4 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return a1;
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;

  *(_QWORD *)a1 = off_1E33505E0;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(v3);
    v4 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  WTF::Ref<WebCore::WebCoreDecompressionSession,WTF::RawPtrTraits<WebCore::WebCoreDecompressionSession>,WTF::DefaultRefDerefTraits<WebCore::WebCoreDecompressionSession>>::~Ref((unsigned __int8 ***)(a1 + 8), a2);
  return WTF::fastFree((WTF *)a1, v8);
}

void sub_195291400(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1952914D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::initializeVideoDecoder(unsigned int)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&>::call(WTF::NativePromiseBase *a1, uint64_t *a2)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 *v6;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  int v12;
  int v13;
  WTF *result;
  BOOL v15;
  uint64_t v16;
  WTF::NativePromiseBase *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  char v29;

  v2 = a1;
  if (*((_DWORD *)a2 + 2) || (v3 = *((_QWORD *)a1 + 2), v4 = atomic_load((unsigned __int8 *)(v3 + 224)), (v4 & 1) != 0))
  {
    v29 = 9;
    v25 = 0;
    v26 = 0;
    v27 = "operator()";
    v28 = 0;
    v8 = *((_QWORD *)a1 + 3);
    if (!v8)
    {
      v11 = 0;
LABEL_17:
      result = (WTF *)WTF::NativePromiseBase::logChannel(a1);
      if (*(_BYTE *)result)
        v15 = *((unsigned __int8 *)result + 16) >= 4u;
      else
        v15 = 0;
      if (v15)
        return (WTF *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, (WTF::Logger::LogSiteIdentifier *)&v25, " ignored already resolved or rejected ", v11);
      return result;
    }
    v9 = (unsigned __int8 *)(v8 + 48);
    if (__ldaxr((unsigned __int8 *)(v8 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_11;
    }
    a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v8 + 48);
LABEL_11:
    v12 = *(_DWORD *)(v8 + 64);
    v13 = __ldxr(v9);
    if (v13 == 1)
    {
      if (!__stlxr(0, v9))
      {
LABEL_16:
        v11 = *((_QWORD *)v2 + 3);
        if (!v12)
          return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(*((_QWORD *)v2 + 3), &v29, (WTF::Logger::LogSiteIdentifier *)&v25);
        goto LABEL_17;
      }
    }
    else
    {
      __clrex();
    }
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
    goto LABEL_16;
  }
  v6 = (unsigned __int8 *)(v3 + 12);
  if (__ldaxr((unsigned __int8 *)(v3 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_26;
  }
  MEMORY[0x19AEA534C](v3 + 12);
LABEL_26:
  if (*((_DWORD *)a2 + 2))
  {
    result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  v16 = *a2;
  *a2 = 0;
  v17 = *(WTF::NativePromiseBase **)(v3 + 120);
  *(_QWORD *)(v3 + 120) = v16;
  if (v17)
    v17 = (WTF::NativePromiseBase *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(_QWORD *)v17 + 8))(v17);
  v25 = 0;
  v26 = 0;
  v27 = "operator()";
  v28 = 0;
  v18 = *((_QWORD *)v2 + 3);
  if (!v18)
  {
    v21 = 0;
    goto LABEL_41;
  }
  v19 = (unsigned __int8 *)(v18 + 48);
  if (__ldaxr((unsigned __int8 *)(v18 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v19))
  {
    goto LABEL_35;
  }
  v17 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v18 + 48);
LABEL_35:
  v22 = *(_DWORD *)(v18 + 64);
  v23 = __ldxr(v19);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, v19))
LABEL_39:
    v17 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v19);
  v21 = *((_QWORD *)v2 + 3);
  if (v22)
  {
LABEL_41:
    result = (WTF *)WTF::NativePromiseBase::logChannel(v17);
    if (*(_BYTE *)result)
    {
      if (*((unsigned __int8 *)result + 16) >= 4u)
        result = (WTF *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, (WTF::Logger::LogSiteIdentifier *)&v25, " ignored already resolved or rejected ", v21);
    }
    goto LABEL_45;
  }
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v21, (WTF::Logger::LogSiteIdentifier *)&v25);
LABEL_45:
  v24 = __ldxr(v6);
  if (v24 == 1)
  {
    if (!__stlxr(0, v6))
      return result;
  }
  else
  {
    __clrex();
  }
  return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
}

void sub_195291760(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

WTF *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E33505B8[v11])(&v16, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 57) = 1;
  *(_DWORD *)(a1 + 64) = 1;
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_195291898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, char a11)
{
  int v12;

  if (a11)
  {
    v12 = __ldxr((unsigned __int8 *)a10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a10))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a10);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_195291DC0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1952924A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *a2)
{
  WTF::Lock *v4;
  _BYTE *v6;
  BOOL v7;
  uint64_t v8;
  WTF *result;
  int v10;
  WTF::Lock *v11;
  char v12;
  char v13;

  v4 = (WTF::Lock *)(a1 + 48);
  v11 = v4;
  v12 = 1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  v4 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v6 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
  if (*v6)
    v7 = v6[16] >= 4u;
  else
    v7 = 0;
  if (v7)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v6, 4u, a2, " resolving ", a1);
  v8 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_1E33505B8[v8])(&v13, a1 + 56);
  *(_WORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1;
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (unsigned __int8 **)&v11);
  if (v12)
  {
    result = v11;
    v10 = __ldxr((unsigned __int8 *)v11);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_195292784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, char a11)
{
  int v12;

  if (a11)
  {
    v12 = __ldxr((unsigned __int8 *)a10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a10))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a10);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::initializeVideoDecoder(unsigned int)::$_1,void,std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3350608;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::initializeVideoDecoder(unsigned int)::$_1,void,std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3350608;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::initializeVideoDecoder(unsigned int)::$_1,void,std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&>::call(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 **v6;
  int v8;
  unsigned __int8 v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  PAL *v15;
  int v16;
  __CVBuffer *v17;
  unsigned __int8 *v18;
  uint64_t v20;
  uint64_t v21;
  WebCore::WebCoreDecompressionSession *v22;
  BOOL v23;
  int v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  CMTime v28;
  CMTime v29;
  CMTime v30[2];

  v3 = a1[1];
  if (!v3)
    return;
  v6 = (unsigned __int8 **)a1[2];
  v5 = a1[3];
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v3);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
    return;
LABEL_15:
  v9 = atomic_load((unsigned __int8 *)(v5 + 224));
  if ((v9 & 1) != 0 || !*(_BYTE *)(v5 + 152))
    goto LABEL_32;
  if (!*((_DWORD *)a2 + 8))
  {
    memset(&v30[1], 0, sizeof(CMTime));
    PAL::softLinkCoreMediaCMTimeMake((PAL *)a2[1], 1000000, a3);
    *(_QWORD *)&v30[1].flags = 1;
    memset(v30, 0, 24);
    if (!*((_DWORD *)a2 + 8))
    {
      if (*((_BYTE *)a2 + 24))
        v15 = (PAL *)a2[2];
      else
        v15 = 0;
      PAL::softLinkCoreMediaCMTimeMake(v15, 1000000, v14);
      v30[0].flags |= 1u;
      if (!*(_BYTE *)(v5 + 152))
        goto LABEL_51;
      if (!*((_DWORD *)a2 + 8))
      {
        v16 = *(unsigned __int8 *)(v5 + 144);
        v17 = (__CVBuffer *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
        v29 = v30[1];
        v28 = v30[0];
        WebCore::WebCoreDecompressionSession::handleDecompressionOutput((WebCore::WebCoreDecompressionSession *)v5, v16 != 0, 0, 0, v17, &v29, &v28);
        goto LABEL_32;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_51:
    __break(1u);
    return;
  }
  if (PAL::get_CoreMedia_kCMTimeInvalid(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeInvalid(void)::once, &__block_literal_global_5);
  v10 = (unsigned int *)(v5 + 232);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = (unsigned int *)(v5 + 240);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_DWORD *)(v5 + 208) = -1;
LABEL_32:
  v18 = *v6;
  if (__ldaxr(*v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_36;
  }
  MEMORY[0x19AEA534C](v18);
LABEL_36:
  v20 = *((_QWORD *)v18 + 1);
  v21 = v20 - 1;
  *((_QWORD *)v18 + 1) = v20 - 1;
  if (v20 == 1)
  {
    v27 = *((_QWORD *)v18 + 2);
    v22 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v18 + 3);
    *((_QWORD *)v18 + 3) = 0;
    v23 = v27 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr(v18);
  if (v24 != 1)
  {
    __clrex();
LABEL_43:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
    if (v21)
      return;
    goto LABEL_44;
  }
  if (__stlxr(0, v18))
    goto LABEL_43;
  if (v21)
    return;
LABEL_44:
  if (v22)
  {
    WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v22);
    WTF::fastFree(v25, v26);
  }
  if (!v23)
    WTF::fastFree((WTF *)v18, a2);
}

void sub_195292C0C(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  WebCore::WebCoreDecompressionSession *v8;
  BOOL v9;
  int v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  v4 = *v2;
  if (__ldaxr(*v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
LABEL_6:
    v6 = *((_QWORD *)v4 + 1);
    v7 = v6 - 1;
    *((_QWORD *)v4 + 1) = v6 - 1;
    if (v6 == 1)
    {
      v13 = *((_QWORD *)v4 + 2);
      v8 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v4 + 3);
      *((_QWORD *)v4 + 3) = 0;
      v9 = v13 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr(v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
          {
            WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v8);
            WTF::fastFree(v11, v12);
          }
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::initializeVideoDecoder(unsigned int)::$_2,void,WTF::Function<void ()(void)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3350630;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::initializeVideoDecoder(unsigned int)::$_2,void,WTF::Function<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3350630;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCoreDecompressionSession::initializeVideoDecoder(unsigned int)::$_2,void,WTF::Function<void ()(void)> &&>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

void WebCore::WebGPU::BufferImpl::~BufferImpl(WebCore::WebGPU::BufferImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    wgpuBufferRelease();
  *(_QWORD *)this = off_1E3350848;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGPU::BufferImpl::~BufferImpl(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::WebGPU::BufferImpl::mapAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v7;
  _QWORD *v8;

  if (!a5)
    wgpuBufferGetInitialSize();
  v7 = *a6;
  *a6 = 0;
  v8 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v8 = MEMORY[0x1E0C809A0];
  v8[1] = 50331650;
  v8[2] = WTF::BlockPtr<void ()(WGPUBufferMapAsyncStatus)>::fromCallable<WebCore::WebGPU::BufferImpl::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebCore::WebGPU::BufferImpl::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,WGPUBufferMapAsyncStatus)#1}::__invoke;
  v8[3] = &WTF::BlockPtr<void ()(WGPUBufferMapAsyncStatus)>::fromCallable<WebCore::WebGPU::BufferImpl::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebCore::WebGPU::BufferImpl::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
  v8[4] = v7;
  _Block_copy(v8);
  wgpuBufferMapAsync();
  _Block_release(v8);
}

void WebCore::WebGPU::mapAsyncCallback(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  a2[2](a2, a1);
  _Block_release(a2);
}

uint64_t WebCore::WebGPU::BufferImpl::getMappedRange(uint64_t a1, unint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  unint64_t InitialSize;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (!a4)
  {
    InitialSize = wgpuBufferGetInitialSize();
    if (InitialSize >= a2)
      a3 = InitialSize - a2;
    else
      a3 = 0;
  }
  v9 = MEMORY[0x19AEA8AE4](*(_QWORD *)(a1 + 32), a2, a3);
  v10 = wgpuBufferGetInitialSize();
  if (v9)
    v11 = v10;
  else
    v11 = 0;
  if (v9)
    v12 = a2;
  else
    v12 = 0;
  return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, v9 - v12, v11);
}

uint64_t WebCore::WebGPU::BufferImpl::getBufferContents(WebCore::WebGPU::BufferImpl *this)
{
  uint64_t BufferContents;

  if (!*((_QWORD *)this + 4))
    return 0;
  BufferContents = wgpuBufferGetBufferContents();
  wgpuBufferGetCurrentSize();
  return BufferContents;
}

void WebCore::WebGPU::BufferImpl::copy()
{
  __break(0xC471u);
}

uint64_t WebCore::WebGPU::BufferImpl::unmap(WebCore::WebGPU::BufferImpl *this)
{
  return wgpuBufferUnmap();
}

uint64_t WebCore::WebGPU::BufferImpl::destroy(WebCore::WebGPU::BufferImpl *this)
{
  return wgpuBufferDestroy();
}

WTF *WebCore::WebGPU::BufferImpl::setLabelInternal(WebCore::WebGPU::BufferImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuBufferSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::CommandBufferImpl::~CommandBufferImpl(WebCore::WebGPU::CommandBufferImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuCommandBufferRelease();
  *(_QWORD *)this = off_1E33508C0;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuCommandBufferRelease();
  *(_QWORD *)this = off_1E33508C0;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF *WebCore::WebGPU::CommandBufferImpl::setLabelInternal(WebCore::WebGPU::CommandBufferImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuCommandBufferSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::CommandEncoderImpl::~CommandEncoderImpl(WebCore::WebGPU::CommandEncoderImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuCommandEncoderRelease();
  *(_QWORD *)this = off_1E33508E8;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuCommandEncoderRelease();
  *(_QWORD *)this = off_1E33508E8;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF *WebCore::WebGPU::CommandEncoderImpl::beginRenderPass@<X0>(WebCore::WebGPU::CommandEncoderImpl *this@<X0>, const WebCore::WebGPU::RenderPassDescriptor *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  _QWORD **v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  WTF *result;
  uint64_t v65;
  _QWORD v67[3];
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  char v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  WTF *v87;

  WTF::String::utf8();
  v85 = 0;
  v86 = 0;
  v5 = *((_DWORD *)a2 + 5);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 88 * v5;
    v9 = (_BYTE *)(*((_QWORD *)a2 + 1) + 80);
    do
    {
      if (*v9)
      {
        *(_QWORD *)&v80 = 0;
        *((_QWORD *)&v80 + 1) = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 200))(*((_QWORD *)this + 4), *(_QWORD *)(*((_QWORD *)v9 - 10) + 8));
        if (!*v9)
          goto LABEL_79;
        v10 = *((_DWORD *)v9 - 18);
        BYTE4(v81) = *(v9 - 68);
        LODWORD(v81) = v10;
        v11 = *((_QWORD *)v9 - 8);
        if (v11 && *(_QWORD *)(v11 + 8))
        {
          v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 200))(*((_QWORD *)this + 4));
          v13 = *v9;
          *((_QWORD *)&v81 + 1) = v12;
          if (!v13)
            goto LABEL_79;
        }
        else
        {
          *((_QWORD *)&v81 + 1) = 0;
        }
        v14.i32[0] = *(v9 - 8);
        v14.i32[1] = *(v9 - 7);
        *(int8x8_t *)&v82 = vbsl_s8((int8x8_t)vceqz_s32(v14), (int8x8_t)0x100000002, (int8x8_t)0x200000001);
        if (*(v9 - 16))
        {
          v15 = *((unsigned int *)v9 - 6);
          if ((_DWORD)v15 == -1)
            goto LABEL_80;
          v70 = v67;
          *((_QWORD *)&v82 + 1) = ((double (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_9ColorDictEEEEE3__0JZNSA_16convertToBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v15])(&v70, v9 - 56);
          *(_QWORD *)&v83 = v16;
          *((_QWORD *)&v83 + 1) = v18;
          v7 = HIDWORD(v86);
        }
        else
        {
          *((_QWORD *)&v82 + 1) = 0;
          v83 = 0uLL;
          v17 = 0;
        }
        v84 = v17;
        if (v7 == (_DWORD)v86)
        {
          v24 = WTF::Vector<WGPURenderPassColorAttachment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v85, v7 + 1, (unint64_t)&v80);
          v7 = HIDWORD(v86);
          v6 = v85;
          v25 = (char *)v85 + 72 * HIDWORD(v86);
          *(_OWORD *)v25 = *(_OWORD *)v24;
          v27 = *((_OWORD *)v24 + 2);
          v26 = *((_OWORD *)v24 + 3);
          v28 = *((_QWORD *)v24 + 8);
          v29 = *((_OWORD *)v24 + 1);
        }
        else
        {
          v6 = v85;
          v25 = (char *)v85 + 72 * v7;
          *(_OWORD *)v25 = v80;
          v26 = v83;
          v28 = v84;
          v29 = v81;
          v27 = v82;
        }
        *((_QWORD *)v25 + 8) = v28;
        *((_OWORD *)v25 + 2) = v27;
        *((_OWORD *)v25 + 3) = v26;
        *((_OWORD *)v25 + 1) = v29;
      }
      else
      {
        v81 = 0u;
        v84 = 0;
        v83 = 0u;
        v80 = 0u;
        v82 = 0x200000001uLL;
        if (v7 == (_DWORD)v86)
        {
          v19 = WTF::Vector<WGPURenderPassColorAttachment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v85, v7 + 1, (unint64_t)&v80);
          v7 = HIDWORD(v86);
          v6 = v85;
          v20 = (char *)v85 + 72 * HIDWORD(v86);
          *(_OWORD *)v20 = *(_OWORD *)v19;
          v22 = *((_OWORD *)v19 + 2);
          v21 = *((_OWORD *)v19 + 3);
          v23 = *((_OWORD *)v19 + 1);
          *((_QWORD *)v20 + 8) = *((_QWORD *)v19 + 8);
          *((_OWORD *)v20 + 2) = v22;
          *((_OWORD *)v20 + 3) = v21;
          *((_OWORD *)v20 + 1) = v23;
        }
        else
        {
          v30 = (char *)v6 + 72 * v7;
          *(_OWORD *)v30 = v80;
          v31 = v81;
          v32 = v82;
          v33 = v83;
          *((_QWORD *)v30 + 8) = v84;
          *((_OWORD *)v30 + 2) = v32;
          *((_OWORD *)v30 + 3) = v33;
          *((_OWORD *)v30 + 1) = v31;
        }
      }
      HIDWORD(v86) = ++v7;
      v9 += 88;
      v8 -= 88;
    }
    while (v8);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  LOBYTE(v70) = 0;
  v79 = 0;
  v34 = *((unsigned __int8 *)a2 + 56);
  if (!*((_BYTE *)a2 + 56))
  {
LABEL_51:
    v68 = 0;
    v69 = 0;
    if (*((_BYTE *)a2 + 88))
    {
      v48 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 120))(*((_QWORD *)this + 4), *(_QWORD *)(*((_QWORD *)a2 + 9) + 8));
      v49 = *((unsigned __int8 *)a2 + 88);
      v68 = v48;
      if (v49)
      {
        v50 = *((_DWORD *)a2 + 21);
        LODWORD(v69) = *((_DWORD *)a2 + 20);
LABEL_56:
        HIDWORD(v69) = v50;
        v67[0] = 0;
        v67[1] = 15;
        v51 = *((_BYTE *)a2 + 104) == 0;
        if (*((_BYTE *)a2 + 104))
          v52 = *((_QWORD *)a2 + 12);
        else
          v52 = 0;
        v67[2] = v52;
        v53 = v67;
        if (v51)
          v53 = 0;
        v54 = (char *)v87 + 16;
        if (!v87)
          v54 = 0;
        *(_QWORD *)&v80 = v53;
        *((_QWORD *)&v80 + 1) = v54;
        *(_QWORD *)&v81 = v7;
        *((_QWORD *)&v81 + 1) = v6;
        v55 = &v70;
        if (!v34)
          v55 = 0;
        *(_QWORD *)&v82 = v55;
        v56 = *((_QWORD *)a2 + 8);
        if (v56)
        {
          v57 = a3;
          if (*(_QWORD *)(v56 + 8))
            v58 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 120))(*((_QWORD *)this + 4));
          else
            v58 = 0;
        }
        else
        {
          v58 = 0;
          v57 = a3;
        }
        v59 = &v68;
        if (!v48)
          v59 = 0;
        *((_QWORD *)&v82 + 1) = v58;
        *(_QWORD *)&v83 = v59;
        v60 = wgpuCommandEncoderBeginRenderPass();
        v61 = *((_QWORD *)this + 4);
        v62 = WTF::fastMalloc((WTF *)0x28);
        *(_DWORD *)(v62 + 8) = 1;
        *(_QWORD *)v62 = off_1E3351578;
        *(_QWORD *)(v62 + 16) = 0;
        *(_QWORD *)(v62 + 24) = v60;
        ++*(_DWORD *)(v61 + 8);
        *(_QWORD *)(v62 + 32) = v61;
        *v57 = v62;
        if (v6)
        {
          v85 = 0;
          LODWORD(v86) = 0;
          WTF::fastFree(v6, v63);
        }
        result = v87;
        v87 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            return (WTF *)WTF::fastFree(result, v63);
          else
            --*(_DWORD *)result;
        }
        return result;
      }
    }
    else
    {
      v48 = 0;
    }
    v50 = 0;
    LODWORD(v69) = 0;
    goto LABEL_56;
  }
  v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 200))(*((_QWORD *)this + 4), *(_QWORD *)(*((_QWORD *)a2 + 3) + 8));
  if (*((_BYTE *)a2 + 56))
  {
    if (*((_BYTE *)a2 + 36))
      v36 = 1;
    else
      v36 = 2;
    if (*((_BYTE *)a2 + 37))
      v37 = v36;
    else
      v37 = 0;
    if (*((_BYTE *)a2 + 38))
      v38 = 2;
    else
      v38 = 1;
    if (*((_BYTE *)a2 + 39))
      v39 = v38;
    else
      v39 = 0;
    v40 = *((_DWORD *)a2 + 8);
    v41 = *((unsigned __int8 *)a2 + 40);
    if (*((_BYTE *)a2 + 48))
      v42 = 1;
    else
      v42 = 2;
    if (*((_BYTE *)a2 + 49))
      v43 = v42;
    else
      v43 = 0;
    if (*((_BYTE *)a2 + 50))
      v44 = 2;
    else
      v44 = 1;
    if (*((_BYTE *)a2 + 51))
      v45 = v44;
    else
      v45 = 0;
    v46 = *((_DWORD *)a2 + 11);
    v47 = *((unsigned __int8 *)a2 + 52);
    v70 = (_QWORD *)v35;
    v71 = v37;
    v72 = v39;
    v73 = v40;
    v74 = v41;
    v75 = v43;
    v76 = v45;
    v77 = v46;
    v78 = v47;
    v79 = 1;
    goto LABEL_51;
  }
LABEL_79:
  __break(1u);
LABEL_80:
  v65 = std::__throw_bad_variant_access[abi:sn180100]();
  return (WTF *)WebCore::WebGPU::CommandEncoderImpl::beginComputePass(v65);
}

WTF *WebCore::WebGPU::CommandEncoderImpl::beginComputePass@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WTF *result;
  WTF *v12;

  if (*(_BYTE *)(a2 + 32))
    WTF::String::utf8();
  else
    WTF::CString::CString((WTF::CString *)&v12, "");
  if (*(_BYTE *)(a2 + 32))
  {
    if (*(_BYTE *)(a2 + 24))
    {
      v6 = *(_QWORD *)(a2 + 8);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 8))
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 120))(*(_QWORD *)(a1 + 32));
      }
    }
  }
  v7 = wgpuCommandEncoderBeginComputePass();
  v8 = *(_QWORD *)(a1 + 32);
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)v9 = off_1E33507A8;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = v7;
  ++*(_DWORD *)(v8 + 8);
  *(_QWORD *)(v9 + 32) = v8;
  *a3 = v9;
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v10);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::WebGPU::CommandEncoderImpl::copyBufferToBuffer(WebCore::WebGPU::CommandEncoderImpl *this, const WebCore::WebGPU::Buffer *a2, unint64_t a3, const WebCore::WebGPU::Buffer *a4)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
  (*(void (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a4);
  return wgpuCommandEncoderCopyBufferToBuffer();
}

uint64_t WebCore::WebGPU::CommandEncoderImpl::copyBufferToTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  char *v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[3];
  int v23;
  int v24;
  uint64_t v25;
  char v26;

  v22[0] = 0;
  v22[1] = 0;
  v22[2] = *(_QWORD *)a2;
  if (*(_BYTE *)(a2 + 12))
    v7 = *(_DWORD *)(a2 + 8);
  else
    v7 = -1;
  v8 = *(_DWORD *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 20))
    v8 = -1;
  v23 = v7;
  v24 = v8;
  v25 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8));
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  *((_QWORD *)&v19 + 1) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 192))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8));
  LODWORD(v20) = *(_DWORD *)(a3 + 8);
  if (*(_BYTE *)(a3 + 40))
  {
    v9 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v9 == -1)
      goto LABEL_15;
    v17 = &v26;
    *(_QWORD *)((char *)&v20 + 4) = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Origin3DDictEEEEE3__0JZNSA_16convertToBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v17, a3 + 16);
    HIDWORD(v20) = v10;
  }
  else
  {
    *((_QWORD *)&v20 + 1) = 0;
    DWORD1(v20) = 0;
  }
  v11 = *(unsigned __int8 *)(a3 + 48);
  if (v11 == 2)
    v12 = 2;
  else
    v12 = v11 == 1;
  LODWORD(v21) = v12;
  v13 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v13 != -1)
  {
    v17 = &v26;
    v17 = (char *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Extent3DDictEEEEE3__0JZNSA_16convertToBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v13])(&v17, a4);
    v18 = v14;
    return MEMORY[0x19AEA8B80](*(_QWORD *)(a1 + 24), v22, &v19, &v17);
  }
LABEL_15:
  v16 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::WebGPU::CommandEncoderImpl::copyTextureToBuffer(v16);
}

uint64_t WebCore::WebGPU::CommandEncoderImpl::copyTextureToBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  char *v18;
  int v19;
  _QWORD v20[3];
  int v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;

  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  *((_QWORD *)&v24 + 1) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 192))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)a2 + 8));
  LODWORD(v25) = *(_DWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 40))
  {
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8 == -1)
      goto LABEL_15;
    v20[0] = &v18;
    *(_QWORD *)((char *)&v25 + 4) = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Origin3DDictEEEEE3__0JZNSA_16convertToBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v8])(v20, a2 + 16);
    HIDWORD(v25) = v9;
  }
  else
  {
    *((_QWORD *)&v25 + 1) = 0;
    DWORD1(v25) = 0;
  }
  v10 = *(unsigned __int8 *)(a2 + 48);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
  LODWORD(v26) = v11;
  v20[0] = 0;
  v20[1] = 0;
  v20[2] = *(_QWORD *)a3;
  if (*(_BYTE *)(a3 + 12))
    v12 = *(_DWORD *)(a3 + 8);
  else
    v12 = -1;
  v13 = *(_DWORD *)(a3 + 16);
  if (!*(_BYTE *)(a3 + 20))
    v13 = -1;
  v21 = v12;
  v22 = v13;
  v23 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8));
  v14 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v14 != -1)
  {
    v18 = &v27;
    v18 = (char *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Extent3DDictEEEEE3__0JZNSA_16convertToBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v14])(&v18, a4);
    v19 = v15;
    return MEMORY[0x19AEA8B8C](*(_QWORD *)(a1 + 24), &v24, v20, &v18);
  }
LABEL_15:
  v17 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::WebGPU::CommandEncoderImpl::copyTextureToTexture(v17);
}

uint64_t WebCore::WebGPU::CommandEncoderImpl::copyTextureToTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  char *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;

  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  *((_QWORD *)&v25 + 1) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 192))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)a2 + 8));
  LODWORD(v26) = *(_DWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 40))
  {
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8 == -1)
      goto LABEL_17;
    *(_QWORD *)&v22 = &v20;
    *(_QWORD *)((char *)&v26 + 4) = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Origin3DDictEEEEE3__0JZNSA_16convertToBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v22, a2 + 16);
    HIDWORD(v26) = v9;
  }
  else
  {
    *((_QWORD *)&v26 + 1) = 0;
    DWORD1(v26) = 0;
  }
  v10 = *(unsigned __int8 *)(a2 + 48);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
  LODWORD(v27) = v11;
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  *((_QWORD *)&v22 + 1) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 192))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)a3 + 8));
  LODWORD(v23) = *(_DWORD *)(a3 + 8);
  if (*(_BYTE *)(a3 + 40))
  {
    v12 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v12 == -1)
      goto LABEL_17;
    v20 = &v28;
    *(_QWORD *)((char *)&v23 + 4) = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Origin3DDictEEEEE3__0JZNSA_16convertToBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v12])(&v20, a3 + 16);
    HIDWORD(v23) = v13;
  }
  else
  {
    *((_QWORD *)&v23 + 1) = 0;
    DWORD1(v23) = 0;
  }
  v14 = *(unsigned __int8 *)(a3 + 48);
  if (v14 == 2)
    v15 = 2;
  else
    v15 = v14 == 1;
  LODWORD(v24) = v15;
  v16 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v16 != -1)
  {
    v20 = &v28;
    v20 = (char *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Extent3DDictEEEEE3__0JZNSA_16convertToBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v16])(&v20, a4);
    v21 = v17;
    return wgpuCommandEncoderCopyTextureToTexture();
  }
LABEL_17:
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::WebGPU::CommandEncoderImpl::clearBuffer(v19);
}

uint64_t WebCore::WebGPU::CommandEncoderImpl::clearBuffer(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  return wgpuCommandEncoderClearBuffer();
}

uint64_t WebCore::WebGPU::CommandEncoderImpl::pushDebugGroup()
{
  void *v0;
  uint64_t result;
  WTF *v2;

  WTF::String::utf8();
  wgpuCommandEncoderPushDebugGroup();
  result = (uint64_t)v2;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
      return WTF::fastFree(v2, v0);
    else
      --*(_DWORD *)v2;
  }
  return result;
}

uint64_t WebCore::WebGPU::CommandEncoderImpl::popDebugGroup(WebCore::WebGPU::CommandEncoderImpl *this)
{
  return wgpuCommandEncoderPopDebugGroup();
}

uint64_t WebCore::WebGPU::CommandEncoderImpl::insertDebugMarker()
{
  void *v0;
  uint64_t result;
  WTF *v2;

  WTF::String::utf8();
  wgpuCommandEncoderInsertDebugMarker();
  result = (uint64_t)v2;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
      return WTF::fastFree(v2, v0);
    else
      --*(_DWORD *)v2;
  }
  return result;
}

uint64_t WebCore::WebGPU::CommandEncoderImpl::writeTimestamp(WebCore::WebGPU::CommandEncoderImpl *this, const WebCore::WebGPU::QuerySet *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::QuerySet *))(**((_QWORD **)this + 4) + 120))(*((_QWORD *)this + 4), a2);
  return wgpuCommandEncoderWriteTimestamp();
}

uint64_t WebCore::WebGPU::CommandEncoderImpl::resolveQuerySet(WebCore::WebGPU::CommandEncoderImpl *this, const WebCore::WebGPU::QuerySet *a2, unsigned int a3, unsigned int a4, const WebCore::WebGPU::Buffer *a5)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::QuerySet *))(**((_QWORD **)this + 4) + 120))(*((_QWORD *)this + 4), a2);
  (*(void (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a5);
  return wgpuCommandEncoderResolveQuerySet();
}

uint64_t WebCore::WebGPU::CommandEncoderImpl::finish@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  WTF *v9;

  WTF::String::utf8();
  v4 = wgpuCommandEncoderFinish();
  v5 = *(_QWORD *)(a1 + 32);
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E33506B0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = v4;
  ++*(_DWORD *)(v5 + 8);
  *(_QWORD *)(v6 + 32) = v5;
  *a2 = v6;
  result = (uint64_t)v9;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      return WTF::fastFree(v9, v7);
    else
      --*(_DWORD *)v9;
  }
  return result;
}

WTF *WebCore::WebGPU::CommandEncoderImpl::setLabelInternal(WebCore::WebGPU::CommandEncoderImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuCommandEncoderSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::CompositorIntegrationImpl::~CompositorIntegrationImpl(WebCore::WebGPU::CompositorIntegrationImpl *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  void *v15;
  const void *v16;
  WTF *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  v3 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((unsigned int *)this + 9);
  if ((_DWORD)v10)
  {
    v11 = (uint64_t *)*((_QWORD *)this + 3);
    v12 = 8 * v10;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        v14 = *(const void **)(v13 + 48);
        *(_QWORD *)(v13 + 48) = 0;
        if (v14)
          CFRelease(v14);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v13 + 40));
        if (*(_BYTE *)(v13 + 16))
        {
          v16 = *(const void **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v16)
            CFRelease(v16);
        }
        WTF::fastFree((WTF *)v13, v15);
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v17 = (WTF *)*((_QWORD *)this + 3);
  if (v17)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v17, a2);
  }
  v18 = *((_QWORD *)this + 2);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    v19 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGPU::CompositorIntegrationImpl::~CompositorIntegrationImpl(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WebGPU::CompositorIntegrationImpl::prepareForDisplay(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;

  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 32))
      wgpuSwapChainPresent();
    v5 = *(_DWORD **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;
    if (v5)
    {
      if (v5[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      else
        --v5[2];
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a2);
}

void WebCore::WebGPU::CompositorIntegrationImpl::recreateRenderBuffers(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, const void **a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v9;
  int v10;
  const void **v11;
  int v13;
  char **v16;
  uint64_t v17;
  char **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  const void *v25;
  WTF *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  const void *v50;
  void *v51;
  const void *v52;
  uint64_t v53;
  const void *v54;
  void *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  void *v65;
  const void *v66;
  uint64_t v67;
  const void *v68;
  void *v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const void *v78;
  void *v79;
  const void *v80;
  uint64_t v81;
  const void *v82;
  void *v83;
  const void *v84;
  __CFArray *Mutable;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  WTF::MachSendRight *MachPort;
  uint64_t v97;
  uint64_t v98;

  v9 = a6;
  v10 = a5;
  v11 = a4;
  v13 = (int)a2;
  v16 = (char **)(a1 + 24);
  if (*(_DWORD *)(a1 + 32))
  {
    v17 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v17)
    {
      v19 = (char **)(a1 + 24);
      v20 = *v16;
      v21 = 8 * v17;
      do
      {
        v22 = *(_QWORD *)v20;
        *(_QWORD *)v20 = 0;
        if (v22)
        {
          v23 = *(const void **)(v22 + 48);
          *(_QWORD *)(v22 + 48) = 0;
          if (v23)
            CFRelease(v23);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v22 + 40));
          if (*(_BYTE *)(v22 + 16))
          {
            v25 = *(const void **)(v22 + 8);
            *(_QWORD *)(v22 + 8) = 0;
            if (v25)
              CFRelease(v25);
          }
          WTF::fastFree((WTF *)v22, v24);
        }
        v20 += 8;
        v21 -= 8;
      }
      while (v21);
      *(_DWORD *)(a1 + 36) = 0;
      v16 = v19;
      v11 = a4;
      v9 = a6;
      v10 = a5;
    }
    v26 = (WTF *)*v16;
    if (*v16)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v26, a2);
    }
  }
  v27 = *(_QWORD *)(a7 + 16);
  if (v27)
    goto LABEL_119;
  v27 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v27 = 1;
  *(_QWORD *)(v27 + 8) = a7;
  v28 = *(unsigned int **)(a7 + 16);
  *(_QWORD *)(a7 + 16) = v27;
  if (!v28)
    goto LABEL_119;
  do
  {
    v29 = __ldaxr(v28);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v28));
  if (!v30)
  {
    atomic_store(1u, v28);
    WTF::fastFree((WTF *)v28, a2);
  }
  v27 = *(_QWORD *)(a7 + 16);
  if (v27)
  {
LABEL_119:
    do
      v31 = __ldaxr((unsigned int *)v27);
    while (__stlxr(v31 + 1, (unsigned int *)v27));
  }
  v32 = *(unsigned int **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v27;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, a2);
    }
  }
  v35 = *(_QWORD *)(a1 + 56);
  if (v35)
  {
    if (*(_QWORD *)(v35 + 32))
    {
      *(_QWORD *)(v35 + 32) = 0;
      wgpuSwapChainRelease();
      *(_BYTE *)(v35 + 12) = 22;
      *(_QWORD *)(v35 + 16) = 0;
      v36 = *(_QWORD *)(v35 + 32);
      *(_QWORD *)(v35 + 32) = 0;
      if (v36)
        wgpuSwapChainRelease();
      v37 = *(_DWORD **)(v35 + 48);
      *(_QWORD *)(v35 + 48) = 0;
      if (v37)
      {
        if (v37[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
        else
          --v37[2];
      }
    }
    *(_DWORD *)(v35 + 16) = v13;
    *(_DWORD *)(v35 + 20) = a3;
  }
  if (v13 >= 0x4000)
    LODWORD(v38) = 0x4000;
  else
    LODWORD(v38) = v13;
  if ((int)v38 <= 1)
    v38 = 1;
  else
    v38 = v38;
  if (a3 >= 0x4000)
    LODWORD(v39) = 0x4000;
  else
    LODWORD(v39) = a3;
  if ((int)v39 <= 1)
    v39 = 1;
  else
    v39 = v39;
  if (v10 == 1)
    v40 = 6;
  else
    v40 = 5;
  if ((v9 - 17) >= 2)
    v41 = v10 != 1;
  else
    v41 = v40;
  v42 = v38 | (v39 << 32);
  WebCore::IOSurface::create(0, v42, v11, 0, v41, &v98);
  v43 = v98;
  if (v98)
  {
    v97 = v98;
    v98 = 0;
    v44 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(a1 + 32))
    {
      v45 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, v44 + 1, (unint64_t)&v97);
      v44 = *(unsigned int *)(a1 + 36);
      v46 = *(_QWORD *)(a1 + 24);
      v47 = *(_QWORD *)v45;
      *(_QWORD *)v45 = 0;
      *(_QWORD *)(v46 + 8 * v44) = v47;
    }
    else
    {
      v48 = *v16;
      v97 = 0;
      *(_QWORD *)&v48[8 * v44] = v43;
    }
    *(_DWORD *)(a1 + 36) = v44 + 1;
    v49 = v97;
    v97 = 0;
    if (v49)
    {
      v50 = *(const void **)(v49 + 48);
      *(_QWORD *)(v49 + 48) = 0;
      if (v50)
        CFRelease(v50);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v49 + 40));
      if (*(_BYTE *)(v49 + 16))
      {
        v52 = *(const void **)(v49 + 8);
        *(_QWORD *)(v49 + 8) = 0;
        if (v52)
          CFRelease(v52);
      }
      WTF::fastFree((WTF *)v49, v51);
    }
    v53 = v98;
    v98 = 0;
    if (v53)
    {
      v54 = *(const void **)(v53 + 48);
      *(_QWORD *)(v53 + 48) = 0;
      if (v54)
        CFRelease(v54);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v53 + 40));
      if (*(_BYTE *)(v53 + 16))
      {
        v56 = *(const void **)(v53 + 8);
        *(_QWORD *)(v53 + 8) = 0;
        if (v56)
          CFRelease(v56);
      }
      WTF::fastFree((WTF *)v53, v55);
    }
  }
  WebCore::IOSurface::create(0, v42, v11, 0, v41, &v98);
  v57 = v98;
  if (v98)
  {
    v97 = v98;
    v98 = 0;
    v58 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v58 == *(_DWORD *)(a1 + 32))
    {
      v59 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, v58 + 1, (unint64_t)&v97);
      v60 = *(unsigned int *)(a1 + 36);
      v61 = *(_QWORD *)(a1 + 24);
      v62 = *(_QWORD *)v59;
      *(_QWORD *)v59 = 0;
      *(_QWORD *)(v61 + 8 * v60) = v62;
      v63 = v97;
      *(_DWORD *)(a1 + 36) = v60 + 1;
      v97 = 0;
      if (v63)
      {
        v64 = *(const void **)(v63 + 48);
        *(_QWORD *)(v63 + 48) = 0;
        if (v64)
          CFRelease(v64);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v63 + 40));
        if (*(_BYTE *)(v63 + 16))
        {
          v66 = *(const void **)(v63 + 8);
          *(_QWORD *)(v63 + 8) = 0;
          if (v66)
            CFRelease(v66);
        }
        WTF::fastFree((WTF *)v63, v65);
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v58) = v57;
      *(_DWORD *)(a1 + 36) = v58 + 1;
    }
    v67 = v98;
    v98 = 0;
    if (v67)
    {
      v68 = *(const void **)(v67 + 48);
      *(_QWORD *)(v67 + 48) = 0;
      if (v68)
        CFRelease(v68);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v67 + 40));
      if (*(_BYTE *)(v67 + 16))
      {
        v70 = *(const void **)(v67 + 8);
        *(_QWORD *)(v67 + 8) = 0;
        if (v70)
          CFRelease(v70);
      }
      WTF::fastFree((WTF *)v67, v69);
    }
  }
  WebCore::IOSurface::create(0, v42, v11, 0, v41, &v98);
  v71 = v98;
  if (v98)
  {
    v97 = v98;
    v98 = 0;
    v72 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v72 == *(_DWORD *)(a1 + 32))
    {
      v73 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, v72 + 1, (unint64_t)&v97);
      v74 = *(unsigned int *)(a1 + 36);
      v75 = *(_QWORD *)(a1 + 24);
      v76 = *(_QWORD *)v73;
      *(_QWORD *)v73 = 0;
      *(_QWORD *)(v75 + 8 * v74) = v76;
      v77 = v97;
      *(_DWORD *)(a1 + 36) = v74 + 1;
      v97 = 0;
      if (v77)
      {
        v78 = *(const void **)(v77 + 48);
        *(_QWORD *)(v77 + 48) = 0;
        if (v78)
          CFRelease(v78);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v77 + 40));
        if (*(_BYTE *)(v77 + 16))
        {
          v80 = *(const void **)(v77 + 8);
          *(_QWORD *)(v77 + 8) = 0;
          if (v80)
            CFRelease(v80);
        }
        WTF::fastFree((WTF *)v77, v79);
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v72) = v71;
      *(_DWORD *)(a1 + 36) = v72 + 1;
    }
    v81 = v98;
    v98 = 0;
    if (v81)
    {
      v82 = *(const void **)(v81 + 48);
      *(_QWORD *)(v81 + 48) = 0;
      if (v82)
        CFRelease(v82);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v81 + 40));
      if (*(_BYTE *)(v81 + 16))
      {
        v84 = *(const void **)(v81 + 8);
        *(_QWORD *)(v81 + 8) = 0;
        if (v84)
          CFRelease(v84);
      }
      WTF::fastFree((WTF *)v81, v83);
    }
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(unsigned int *)(a1 + 36), MEMORY[0x1E0C9B378]);
  v86 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v86)
  {
    v87 = *(uint64_t **)(a1 + 24);
    v88 = 8 * v86;
    do
    {
      v89 = *v87++;
      CFArrayAppendValue(Mutable, *(const void **)(v89 + 48));
      v88 -= 8;
    }
    while (v88);
  }
  (*(void (**)(_QWORD, __CFArray *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), Mutable);
  if (Mutable)
    CFRelease(Mutable);
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  v90 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v90)
  {
    if (v90 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v91 = WTF::fastMalloc((WTF *)(4 * v90));
      *(_DWORD *)(a8 + 8) = v90;
      *(_QWORD *)a8 = v91;
      if (*(_DWORD *)(a1 + 36))
      {
        v92 = v91;
        v93 = 0;
        do
        {
          MachPort = (WTF::MachSendRight *)IOSurfaceCreateMachPort(*(IOSurfaceRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 24)
                                                                                               + 8 * v93)
                                                                                   + 48));
          WTF::MachSendRight::adopt(MachPort);
          WTF::MachSendRight::MachSendRight();
          *(_DWORD *)(a8 + 12) = ++v93;
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v98);
          v92 += 4;
        }
        while (v93 < *(unsigned int *)(a1 + 36));
      }
    }
  }
}

uint64_t WebCore::WebGPU::CompositorIntegrationImpl::withDisplayBufferAsNativeImage(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unsigned int v4;
  BOOL v5;
  uint64_t result;
  uint64_t v8;
  WebCore::WebGPU::PresentationContextImpl *v10;
  PAL *v11;
  PAL *v12;
  uint64_t Image;
  void *v14;
  uint64_t IdentifierInternal;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  PAL *v28;

  v4 = *(_DWORD *)(a1 + 36);
  if (v4)
    v5 = v4 > a2;
  else
    v5 = 0;
  if (!v5)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 16))(*a3, 0);
  v8 = *(_QWORD *)(a1 + 72);
  if (!v8 || !*(_QWORD *)(v8 + 8))
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 16))(*a3, 0);
  v10 = *(WebCore::WebGPU::PresentationContextImpl **)(a1 + 56);
  if (v10)
  {
    WebCore::WebGPU::PresentationContextImpl::getMetalTextureAsNativeImage(v10, &v28);
    v11 = v28;
    if (v28)
      goto LABEL_18;
    v4 = *(_DWORD *)(a1 + 36);
  }
  if (v4 <= a2)
    goto LABEL_40;
  WebCore::IOSurface::createPlatformContext(*(IOSurfaceRef **)(*(_QWORD *)(a1 + 24) + 8 * a2), &v28);
  v12 = v28;
  if (!v28)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 16))(*a3, 0);
  Image = CGIOSurfaceContextCreateImage();
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x195294C3CLL);
  }
  v14 = (void *)Image;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  if (!v14)
  {
LABEL_37:
    CFRelease(v12);
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 16))(*a3, 0);
  }
  v16 = IdentifierInternal;
  if (CGImageGetWidth((CGImageRef)v14) >> 31 || CGImageGetHeight((CGImageRef)v14) >> 31)
  {
    CFRelease(v14);
    goto LABEL_37;
  }
  v17 = (_QWORD *)operator new();
  *v17 = &off_1E340E810;
  v17[1] = v14;
  v11 = (PAL *)WTF::fastMalloc((WTF *)0x38);
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v18 = 0;
  *(_OWORD *)(v18 + 8) = xmmword_19689B170;
  *(_QWORD *)(v18 + 24) = v11;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = v16;
  *((_QWORD *)v11 + 5) = 1;
  *(_QWORD *)v11 = off_1E340E858;
  *((_QWORD *)v11 + 1) = v18;
  *((_QWORD *)v11 + 6) = v17;
  CFRelease(v12);
LABEL_18:
  (*(void (**)(_QWORD))(**((_QWORD **)v11 + 6) + 16))(*((_QWORD *)v11 + 6));
  CGImageSetCachingFlags();
  result = (*(uint64_t (**)(_QWORD, PAL *))(*(_QWORD *)*a3 + 16))(*a3, v11);
  v20 = *((_QWORD *)v11 + 1);
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_22;
  }
  result = MEMORY[0x19AEA534C](v20);
LABEL_22:
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v22 - 1;
  *(_QWORD *)(v20 + 8) = v22 - 1;
  if (v22 == 1)
  {
    v27 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 24) = 0;
    v25 = v27 != 0;
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  v26 = __ldxr((unsigned __int8 *)v20);
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, (unsigned __int8 *)v20))
LABEL_28:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v20);
  if (!v23)
  {
    if (v24)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (!v25)
      return WTF::fastFree((WTF *)v20, v19);
  }
  return result;
}

void WebCore::WebGPU::ComputePassEncoderImpl::~ComputePassEncoderImpl(WebCore::WebGPU::ComputePassEncoderImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuComputePassEncoderRelease();
  *(_QWORD *)this = off_1E3350978;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuComputePassEncoderRelease();
  *(_QWORD *)this = off_1E3350978;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGPU::ComputePassEncoderImpl::setPipeline(WebCore::WebGPU::ComputePassEncoderImpl *this, const WebCore::WebGPU::ComputePipeline *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::ComputePipeline *))(**((_QWORD **)this + 4) + 80))(*((_QWORD *)this + 4), a2);
  return wgpuComputePassEncoderSetPipeline();
}

uint64_t WebCore::WebGPU::ComputePassEncoderImpl::dispatch(WebCore::WebGPU::ComputePassEncoderImpl *this)
{
  return wgpuComputePassEncoderDispatchWorkgroups();
}

uint64_t WebCore::WebGPU::ComputePassEncoderImpl::dispatchIndirect(WebCore::WebGPU::ComputePassEncoderImpl *this, const WebCore::WebGPU::Buffer *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
  return wgpuComputePassEncoderDispatchWorkgroupsIndirect();
}

uint64_t WebCore::WebGPU::ComputePassEncoderImpl::end(WebCore::WebGPU::ComputePassEncoderImpl *this)
{
  return wgpuComputePassEncoderEnd();
}

uint64_t WebCore::WebGPU::ComputePassEncoderImpl::setBindGroup(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;

  v5 = result;
  if (*(_BYTE *)(a4 + 16) && (v7 = *(unsigned int *)(a4 + 12), (_DWORD)v7))
  {
    if (v7 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (void *)WTF::fastMalloc((WTF *)(4 * v7));
    memcpy(v8, *(const void **)a4, 4 * *(unsigned int *)(a4 + 12));
  }
  else
  {
    v8 = 0;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 32) + 24))(*(_QWORD *)(v5 + 32), a3);
  result = wgpuComputePassEncoderSetBindGroup();
  if (v8)
    return WTF::fastFree((WTF *)v8, v9);
  return result;
}

uint64_t WebCore::WebGPU::ComputePassEncoderImpl::setBindGroup(WebCore::WebGPU::ComputePassEncoderImpl *this, unsigned int a2, const WebCore::WebGPU::BindGroup *a3, const unsigned int *a4)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::BindGroup *))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), a3);
  return wgpuComputePassEncoderSetBindGroup();
}

uint64_t WebCore::WebGPU::ComputePassEncoderImpl::pushDebugGroup()
{
  void *v0;
  uint64_t result;
  WTF *v2;

  WTF::String::utf8();
  wgpuComputePassEncoderPushDebugGroup();
  result = (uint64_t)v2;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
      return WTF::fastFree(v2, v0);
    else
      --*(_DWORD *)v2;
  }
  return result;
}

uint64_t WebCore::WebGPU::ComputePassEncoderImpl::popDebugGroup(WebCore::WebGPU::ComputePassEncoderImpl *this)
{
  return wgpuComputePassEncoderPopDebugGroup();
}

uint64_t WebCore::WebGPU::ComputePassEncoderImpl::insertDebugMarker()
{
  void *v0;
  uint64_t result;
  WTF *v2;

  WTF::String::utf8();
  wgpuComputePassEncoderInsertDebugMarker();
  result = (uint64_t)v2;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
      return WTF::fastFree(v2, v0);
    else
      --*(_DWORD *)v2;
  }
  return result;
}

WTF *WebCore::WebGPU::ComputePassEncoderImpl::setLabelInternal(WebCore::WebGPU::ComputePassEncoderImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuComputePassEncoderSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::ComputePipelineImpl::~ComputePipelineImpl(WebCore::WebGPU::ComputePipelineImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuComputePipelineRelease();
  *(_QWORD *)this = off_1E33509E8;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuComputePipelineRelease();
  *(_QWORD *)this = off_1E33509E8;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGPU::ComputePipelineImpl::getBindGroupLayout@<X0>(WebCore::WebGPU::ComputePipelineImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t BindGroupLayout;
  uint64_t v5;
  uint64_t result;

  BindGroupLayout = wgpuComputePipelineGetBindGroupLayout();
  v5 = *((_QWORD *)this + 4);
  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E334F4D8;
  ++*(_DWORD *)(v5 + 8);
  *(_QWORD *)(result + 32) = BindGroupLayout;
  *(_QWORD *)(result + 40) = v5;
  *a2 = result;
  return result;
}

WTF *WebCore::WebGPU::ComputePipelineImpl::setLabelInternal(WebCore::WebGPU::ComputePipelineImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuComputePipelineSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

uint64_t WebCore::WebGPU::ConvertToBackingContext::convertToBacking(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0x5D)
    return 1;
  else
    return dword_1968DD870[(char)(a2 - 1)];
}

void WebCore::WebGPU::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t Instance;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;

  v3 = *a1;
  *a1 = 0;
  v4 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v4 = MEMORY[0x1E0C809A0];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtr<void ()(void({block_pointer})(void))>::fromCallable<WebCore::WebGPU::create(WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&,WebCore::ProcessIdentity const*)::$_0>(WebCore::WebGPU::create(WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&,WebCore::ProcessIdentity const*)::$_0)::{lambda(void *,void({block_pointer})(void))#1}::__invoke;
  v4[3] = &WTF::BlockPtr<void ()(void({block_pointer})(void))>::fromCallable<WebCore::WebGPU::create(WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&,WebCore::ProcessIdentity const*)::$_0>(WebCore::WebGPU::create(WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&,WebCore::ProcessIdentity const*)::$_0)::descriptor;
  v4[4] = v3;
  if (MEMORY[0x1E0DD9218] && (Instance = wgpuCreateInstance()) != 0)
  {
    v6 = Instance;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E3351330;
    v7[1] = 1;
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v8 + 8) = 1;
    *(_QWORD *)v8 = off_1E3350DE0;
    *(_QWORD *)(v8 + 16) = v6;
    v9 = *((_DWORD *)v7 + 2);
    *((_DWORD *)v7 + 2) = v9 + 1;
    *(_QWORD *)(v8 + 24) = v7;
    *a2 = v8;
    if (v9)
      *((_DWORD *)v7 + 2) = v9;
    else
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  else
  {
    *a2 = 0;
  }
  _Block_release(v4);
}

uint64_t WTF::BlockPtr<void ()(WGPUBufferMapAsyncStatus)>::fromCallable<WebCore::WebGPU::BufferImpl::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebCore::WebGPU::BufferImpl::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(WGPUBufferMapAsyncStatus)>::fromCallable<WebCore::WebGPU::BufferImpl::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebCore::WebGPU::BufferImpl::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,WGPUBufferMapAsyncStatus)#1}::__invoke(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v2 + 16))(v2, a2 == 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WTF::BlockPtr<void ()(void({block_pointer})(void))>::fromCallable<WebCore::WebGPU::create(WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&,WebCore::ProcessIdentity const*)::$_0>(WebCore::WebGPU::create(WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&,WebCore::ProcessIdentity const*)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtr<void ()(void({block_pointer})(void))>::fromCallable<WebCore::WebGPU::create(WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&,WebCore::ProcessIdentity const*)::$_0>(WebCore::WebGPU::create(WTF::Function<void ()(WTF::Function<void ()(void)> &&)> &&,WebCore::ProcessIdentity const*)::$_0)::{lambda(void *,void({block_pointer})(void))#1}::__invoke(uint64_t a1, void *aBlock)
{
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = _Block_copy(aBlock);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E3350A38;
  v4[1] = v3;
  v6 = v4;
  (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v6);
  v5 = v6;
  v6 = 0;
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  _Block_release(0);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(void)>,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3350A38;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(void)>,void>::~CallableWrapper(const void **a1)
{
  void *v2;

  *a1 = off_1E3350A38;
  _Block_release(a1[1]);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(void)>,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

char *WTF::Vector<WGPURenderPassColorAttachment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  WTF *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  WTF *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 72 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v18 = *(WTF **)a1;
        return (char *)v18 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v9 < 0x38E38E4)
      {
        v10 = 72 * v9;
        v11 = WTF::fastMalloc((WTF *)(72 * v9));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x48;
        *(_QWORD *)a1 = v11;
        do
        {
          v14 = v11 + v13;
          *(_OWORD *)v14 = *(_OWORD *)((char *)v5 + v13);
          v15 = *(_OWORD *)((char *)v5 + v13 + 16);
          v16 = *(_OWORD *)((char *)v5 + v13 + 32);
          v17 = *(_OWORD *)((char *)v5 + v13 + 48);
          *(_QWORD *)(v14 + 64) = *(_QWORD *)((char *)v5 + v13 + 64);
          *(_OWORD *)(v14 + 32) = v16;
          *(_OWORD *)(v14 + 48) = v17;
          *(_OWORD *)(v14 + 16) = v15;
          v13 += 72;
        }
        while (72 * v6 != v13);
        v18 = *(WTF **)a1;
        if (v5)
        {
          if (v18 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v18 = *(WTF **)a1;
        }
        return (char *)v18 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x19529579CLL);
    }
  }
  v19 = *(unsigned int *)(a1 + 8);
  v20 = v19 + (v19 >> 2);
  if (v20 >= 0x10)
    v21 = v20 + 1;
  else
    v21 = 16;
  if (v21 <= a2)
    v21 = a2;
  if (v21 > v19)
  {
    if (v21 >= 0x38E38E4)
      goto LABEL_33;
    v22 = *(unsigned int *)(a1 + 12);
    v23 = 72 * v21;
    v24 = WTF::fastMalloc((WTF *)(72 * v21));
    *(_DWORD *)(a1 + 8) = (v23 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)a1 = v24;
    if ((_DWORD)v22)
    {
      v26 = 72 * v22;
      v27 = v5;
      do
      {
        *(_OWORD *)v24 = *(_OWORD *)v27;
        v28 = *((_OWORD *)v27 + 1);
        v29 = *((_OWORD *)v27 + 2);
        v30 = *((_OWORD *)v27 + 3);
        *(_QWORD *)(v24 + 64) = *((_QWORD *)v27 + 8);
        *(_OWORD *)(v24 + 32) = v29;
        *(_OWORD *)(v24 + 48) = v30;
        *(_OWORD *)(v24 + 16) = v28;
        v24 += 72;
        v27 = (WTF *)((char *)v27 + 72);
        v26 -= 72;
      }
      while (v26);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v25);
    }
  }
  return (char *)v3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict> const&)::$_0,WebCore::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict> const&>(uint64_t a1, _DWORD *a2)
{
  if (a2[3])
    return **(double **)a2;
  else
    return 0.0;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict> const&)::$_0,WebCore::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict> const&>(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0,WebCore::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&>(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unint64_t v4;

  v2 = *(_DWORD *)(a2 + 12);
  if (!v2)
  {
    v3 = 1;
    goto LABEL_5;
  }
  v3 = **(_DWORD **)a2;
  if (v2 == 1)
  {
LABEL_5:
    v4 = 0x100000000;
    return v4 | v3;
  }
  v4 = (unint64_t)*(unsigned int *)(*(_QWORD *)a2 + 4) << 32;
  return v4 | v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0,WebCore::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict> const&)::$_0,WebCore::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict> const&>(uint64_t a1, _DWORD *a2)
{
  int v2;
  unsigned int v3;
  unint64_t v4;

  v2 = a2[3];
  if (v2)
  {
    v3 = **(_DWORD **)a2;
    if (v2 == 1)
      v4 = 0;
    else
      v4 = (unint64_t)*(unsigned int *)(*(_QWORD *)a2 + 4) << 32;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  return v4 | v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict> const&)::$_0,WebCore::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

BOOL WebCore::FEComponentTransferCoreImageApplier::supportsCoreImageRendering(uint64_t a1, void *a2)
{
  int v3;
  uint64_t v4;
  void *v5;
  _BOOL8 v6;
  int v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  char v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v3 = *(unsigned __int8 *)(a1 + 64);
  v4 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v4)
  {
    if (v4 >> 30)
      goto LABEL_34;
    v5 = (void *)WTF::fastMalloc((WTF *)(4 * v4));
    memcpy(v5, *(const void **)(a1 + 88), 4 * *(unsigned int *)(a1 + 100));
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0xFFFFFFFB) == 0)
  {
    v7 = *(unsigned __int8 *)(a1 + 104);
    v8 = *(unsigned int *)(a1 + 140);
    if ((_DWORD)v8)
    {
      if (v8 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x195295A50);
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(4 * v8));
      memcpy(v9, *(const void **)(a1 + 128), 4 * *(unsigned int *)(a1 + 140));
    }
    else
    {
      v9 = 0;
    }
    if ((v7 & 0xFFFFFFFB) != 0)
    {
      v6 = 0;
      if (v9)
      {
LABEL_26:
        WTF::fastFree((WTF *)v9, a2);
        if (!v5)
          return v6;
        goto LABEL_27;
      }
LABEL_19:
      if (!v5)
        return v6;
LABEL_27:
      WTF::fastFree((WTF *)v5, a2);
      return v6;
    }
    v10 = *(unsigned __int8 *)(a1 + 144);
    v11 = *(unsigned int *)(a1 + 180);
    if ((_DWORD)v11)
    {
      if (v11 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x195295A58);
      }
      v12 = (void *)WTF::fastMalloc((WTF *)(4 * v11));
      memcpy(v12, *(const void **)(a1 + 168), 4 * *(unsigned int *)(a1 + 180));
    }
    else
    {
      v12 = 0;
    }
    if ((v10 & 0xFFFFFFFB) != 0)
    {
      v6 = 0;
      if (!v12)
        goto LABEL_18;
      goto LABEL_25;
    }
    v14 = *(_BYTE *)(a1 + 184);
    v15 = *(unsigned int *)(a1 + 220);
    if (!(_DWORD)v15)
    {
LABEL_24:
      v6 = (v14 & 0xFB) == 0;
      if (!v12)
      {
LABEL_18:
        if (v9)
          goto LABEL_26;
        goto LABEL_19;
      }
LABEL_25:
      WTF::fastFree((WTF *)v12, a2);
      if (v9)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (!(v15 >> 30))
    {
      v16 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
      memcpy(v16, *(const void **)(a1 + 208), 4 * *(unsigned int *)(a1 + 220));
      WTF::fastFree((WTF *)v16, v17);
      goto LABEL_24;
    }
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x195295A48);
  }
  v6 = 0;
  if (v5)
    goto LABEL_27;
  return v6;
}

void sub_195295A64(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;
  WTF *v3;
  WTF *v4;

  if (v4)
  {
    WTF::fastFree(v4, a2);
    if (!v3)
    {
LABEL_3:
      if (!v2)
        goto LABEL_4;
LABEL_7:
      WTF::fastFree(v2, a2);
LABEL_4:
      _Unwind_Resume(exception_object);
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  WTF::fastFree(v3, a2);
  if (!v2)
    goto LABEL_4;
  goto LABEL_7;
}

BOOL WebCore::FEComponentTransferCoreImageApplier::apply(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v4;
  const void *v5;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  float v18;
  float v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  float v24;
  float v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  int v29;
  float v30;
  float v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  const void *v35;
  const void *v36;

  if (!*((_DWORD *)a3 + 3))
    goto LABEL_45;
  v4 = **a3;
  v5 = *(const void **)(v4 + 88);
  if (!v5)
    return v5 != 0;
  CFRetain(*(CFTypeRef *)(v4 + 88));
  v8 = (void *)objc_msgSend(MEMORY[0x1E0C9DDB8], "filterWithName:", CFSTR("CIColorPolynomial"));
  objc_msgSend(v8, "setValue:forKey:", v5, *MEMORY[0x1E0C9E1F8]);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned __int8 *)(v10 + 64);
  v12 = *(float *)(v10 + 68);
  v13 = *(float *)(v10 + 72);
  v14 = *(unsigned int *)(v10 + 100);
  if ((_DWORD)v14)
  {
    if (v14 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x195295DACLL);
    }
    v15 = (void *)WTF::fastMalloc((WTF *)(4 * v14));
    memcpy(v15, *(const void **)(v10 + 88), 4 * *(unsigned int *)(v10 + 100));
  }
  else
  {
    v15 = 0;
  }
  if (v11 == 4)
    objc_msgSend(v8, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v13, v12, 0.0, 0.0), CFSTR("inputRedCoefficients"));
  if (v15)
    WTF::fastFree((WTF *)v15, v9);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(unsigned __int8 *)(v16 + 104);
  v18 = *(float *)(v16 + 108);
  v19 = *(float *)(v16 + 112);
  v20 = *(unsigned int *)(v16 + 140);
  if ((_DWORD)v20)
  {
    if (v20 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x195295DB4);
    }
    v21 = (void *)WTF::fastMalloc((WTF *)(4 * v20));
    memcpy(v21, *(const void **)(v16 + 128), 4 * *(unsigned int *)(v16 + 140));
  }
  else
  {
    v21 = 0;
  }
  if (v17 == 4)
    objc_msgSend(v8, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v19, v18, 0.0, 0.0), CFSTR("inputGreenCoefficients"));
  if (v21)
    WTF::fastFree((WTF *)v21, v9);
  v22 = *(_QWORD *)(a1 + 8);
  v23 = *(unsigned __int8 *)(v22 + 144);
  v24 = *(float *)(v22 + 148);
  v25 = *(float *)(v22 + 152);
  v26 = *(unsigned int *)(v22 + 180);
  if ((_DWORD)v26)
  {
    if (v26 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x195295DBCLL);
    }
    v27 = (void *)WTF::fastMalloc((WTF *)(4 * v26));
    memcpy(v27, *(const void **)(v22 + 168), 4 * *(unsigned int *)(v22 + 180));
  }
  else
  {
    v27 = 0;
  }
  if (v23 == 4)
    objc_msgSend(v8, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v25, v24, 0.0, 0.0), CFSTR("inputBlueCoefficients"));
  if (v27)
    WTF::fastFree((WTF *)v27, v9);
  v28 = *(_QWORD *)(a1 + 8);
  v29 = *(unsigned __int8 *)(v28 + 184);
  v30 = *(float *)(v28 + 188);
  v31 = *(float *)(v28 + 192);
  v32 = *(unsigned int *)(v28 + 220);
  if (!(_DWORD)v32)
  {
    v33 = 0;
    goto LABEL_27;
  }
  if (v32 >> 30)
  {
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x195295DA4);
  }
  v33 = (void *)WTF::fastMalloc((WTF *)(4 * v32));
  memcpy(v33, *(const void **)(v28 + 208), 4 * *(unsigned int *)(v28 + 220));
LABEL_27:
  if (v29 == 4)
    objc_msgSend(v8, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v31, v30, 0.0, 0.0), CFSTR("inputAlphaCoefficients"));
  if (v33)
    WTF::fastFree((WTF *)v33, v9);
  v34 = (const void *)objc_msgSend(v8, "outputImage");
  v35 = v34;
  if (v34)
    CFRetain(v34);
  v36 = *(const void **)(a4 + 88);
  *(_QWORD *)(a4 + 88) = v35;
  if (v36)
    CFRelease(v36);
  CFRelease(v5);
  return v5 != 0;
}

void sub_195295DC8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

unint64_t WebCore::FilterImage::memoryCostOfCIImage(id *this)
{
  double v1;
  float v2;
  double v3;
  float v4;

  objc_msgSend(this[11], "extent");
  v2 = v1;
  v4 = v3;
  return vcvts_n_u32_f32(v2 * v4, 2uLL);
}

uint64_t WebCore::FilterImage::imageBufferFromCIImage(WebCore::FilterImage *this)
{
  uint64_t result;
  float v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  CGColorSpaceRef v29;
  const void *v30;
  float v31[2];
  CGColorSpaceRef v32;
  uint64_t v33;
  uint64_t v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  result = *((_QWORD *)this + 8);
  if (result)
    return result;
  v3 = (float)*((int *)this + 12);
  v31[0] = (float)*((int *)this + 11);
  v31[1] = v3;
  v32 = 0;
  v33 = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferIOSurfaceBackend,WebCore::ImageBuffer>(v31, (CFTypeRef *)this + 7, 1, 0, (uint64_t)&v32, v34, 1.0);
  v5 = v34[0];
  v34[0] = 0;
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v5;
  if (!v6)
    goto LABEL_36;
  v7 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_7:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v26 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v26 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 != 1)
  {
    __clrex();
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      goto LABEL_19;
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
    goto LABEL_14;
  if (v10)
    goto LABEL_19;
LABEL_15:
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!v12)
    WTF::fastFree((WTF *)v7, v4);
LABEL_19:
  v14 = v34[0];
  v34[0] = 0;
  if (!v14)
    goto LABEL_36;
  v15 = *(_QWORD *)(v14 + 8);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](v15);
LABEL_24:
  v17 = *(_QWORD *)(v15 + 8);
  v18 = v17 - 1;
  *(_QWORD *)(v15 + 8) = v17 - 1;
  if (v17 == 1)
  {
    v27 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v20 = v27 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = __ldxr((unsigned __int8 *)v15);
  if (v21 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v15))
    {
      if (!v18)
        goto LABEL_32;
      goto LABEL_36;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
  if (!v18)
  {
LABEL_32:
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (!v20)
      WTF::fastFree((WTF *)v15, v4);
  }
LABEL_36:
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v33 + 4));
  if (!*((_QWORD *)this + 8))
    return 0;
  v22 = *((_DWORD *)this + 11);
  v23 = *((_DWORD *)this + 12);
  v24 = &unk_1ECE81000;
  if ((_MergedGlobals_126 & 1) == 0)
  {
    v28 = (void *)MEMORY[0x1E0C9DD90];
    v34[0] = *MEMORY[0x1E0C9DFC0];
    v29 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    v32 = v29;
    v30 = (const void *)objc_msgSend(v28, "contextWithOptions:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v32, v34, 1));
    qword_1ECE81940 = (uint64_t)v30;
    if (v30)
      CFRetain(v30);
    if (v29)
      CFRelease(v29);
    _MergedGlobals_126 = 1;
    v24 = &unk_1ECE81000;
  }
  v25 = (void *)*((_QWORD *)v24 + 296);
  if (v25)
    CFRetain(*((CFTypeRef *)v24 + 296));
  objc_msgSend(v25, "render:toIOSurface:bounds:colorSpace:", *((_QWORD *)this + 11), *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 8) + 112) + 80))(*(_QWORD *)(*((_QWORD *)this + 8) + 112))+ 48), *((_QWORD *)this + 7), 0.0, 0.0, (float)v22, (float)v23);
  if (v25)
    CFRelease(v25);
  return *((_QWORD *)this + 8);
}

void sub_19529616C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::ImageBuffer::create<WebCore::ImageBufferIOSurfaceBackend,WebCore::ImageBuffer>(float *a1@<X0>, CFTypeRef *a2@<X1>, __int16 a3@<W2>, __int16 a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  float v12;
  float v13;
  CFTypeRef v14;
  unint64_t v15;
  float v16;
  float v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  WebCore::IOSurface *v22;
  int v23;
  double v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  uint64_t v30;
  CFTypeRef v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  CFTypeRef cf;
  __int16 v36;
  __int128 v37[2];
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  float v44;
  CFTypeRef v45;
  char v46;
  char v47;

  v12 = *a1;
  v13 = a1[1];
  v14 = *a2;
  if (*a2)
    CFRetain(*a2);
  v15 = 0;
  v16 = ceilf(v12 * a7);
  if (v16 > 0.0)
  {
    v17 = ceilf(v13 * a7);
    if (v17 > 0.0)
    {
      v18 = v16 > -2147500000.0 && v16 < 2147500000.0;
      if (v18 && (v17 > -2147500000.0 ? (v19 = v17 < 2147500000.0) : (v19 = 0), v19))
      {
        v20 = (int)v16;
        v21 = (unint64_t)(int)v17 << 32;
        if (v17 >= 2147500000.0)
          v21 = 0x7FFFFFFF00000000;
        if (v16 >= 2147500000.0)
          v20 = 0x7FFFFFFFLL;
        v15 = v21 | v20;
      }
      else
      {
        v15 = 0;
      }
    }
  }
  v43 = v15;
  v44 = a7;
  v45 = v14;
  if (v14)
    CFRetain(v14);
  v46 = a3;
  v47 = a4;
  WebCore::ImageBufferIOSurfaceBackend::create((uint64_t)&v43, a5, &v42);
  if (v42)
  {
    LOBYTE(v37[0]) = 1;
    v23 = v43;
    v24 = (double)-HIDWORD(v43);
    v39 = v24 * -0.0 + 0.0;
    v40 = 0.0 - v24;
    *((double *)v37 + 1) = v44;
    v37[1] = (__int128)vmulq_n_f64((float64x2_t)xmmword_1968DD9F0, v44);
    v38 = -v44;
    if (v43 >> 30
      || (v25 = WebCore::IOSurface::bytesPerRowAlignment(v22), (v43 & 0x8000000000000000) != 0)
      || (v26 = HIDWORD(v43) * (unint64_t)((v25 + 4 * v23 - 1) & -v25),
          (v26 & 0xFFFFFFFF00000000) != 0))
    {
      __break(0xC471u);
      JUMPOUT(0x1952963F4);
    }
    v41 = v26;
    v33 = __PAIR64__(LODWORD(v13), LODWORD(v12));
    v34 = a7;
    cf = v14;
    if (v14)
      CFRetain(v14);
    v36 = a3 | (a4 << 8);
    v27 = v42;
    v42 = 0;
    v32 = v27;
    WebCore::ImageBuffer::create<WebCore::ImageBuffer>((uint64_t *)&v33, v37, &v32, a6);
    v28 = v32;
    v32 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = cf;
    cf = 0;
    if (v29)
      CFRelease(v29);
    v30 = v42;
    v42 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  else
  {
    *a6 = 0;
  }
  v31 = v45;
  v45 = 0;
  if (v31)
    CFRelease(v31);
  if (v14)
    CFRelease(v14);
}

void sub_195296400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,CFTypeRef a25)
{
  const void *v25;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (cf)
    CFRelease(cf);
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  if (a25)
    CFRelease(a25);
  if (v25)
    CFRelease(v25);
  _Unwind_Resume(exception_object);
}

void WebCore::SourceGraphicCoreImageApplier::apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebCore::FilterImage *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  const void *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (!*(_DWORD *)(a3 + 12))
  {
    __break(0xC471u);
    return;
  }
  v5 = **(WebCore::FilterImage ***)a3;
  if (*((_QWORD *)v5 + 11))
    v6 = WebCore::FilterImage::imageBufferFromCIImage(v5);
  else
    v6 = WebCore::FilterImage::imageBufferFromPixelBuffer(v5);
  v7 = (_QWORD *)v6;
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_9:
    ++*(_QWORD *)(v8 + 8);
    v10 = __ldxr((unsigned __int8 *)v8);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
LABEL_14:
        v11 = v7[14];
        if (v11)
        {
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 80))(v11);
          v13 = (void *)MEMORY[0x1E0C9DDC8];
          if (v12)
          {
            v14 = (const void *)objc_msgSend(MEMORY[0x1E0C9DDC8], "imageWithIOSurface:", *(_QWORD *)(v12 + 48));
            v16 = v14;
            if (!v14)
              goto LABEL_41;
            CFRetain(v14);
LABEL_39:
            v26 = *(const void **)(a4 + 88);
            *(_QWORD *)(a4 + 88) = v16;
            if (v26)
              CFRelease(v26);
LABEL_41:
            v27 = v7[1];
            if (__ldaxr((unsigned __int8 *)v27))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v27))
            {
              goto LABEL_45;
            }
            MEMORY[0x19AEA534C](v27);
LABEL_45:
            v29 = *(_QWORD *)(v27 + 8);
            v30 = v29 - 1;
            *(_QWORD *)(v27 + 8) = v29 - 1;
            if (v29 == 1)
            {
              v34 = *(_QWORD *)(v27 + 16);
              v31 = *(_QWORD *)(v27 + 24);
              *(_QWORD *)(v27 + 24) = 0;
              v32 = v34 != 0;
            }
            else
            {
              v31 = 0;
              v32 = 1;
            }
            v33 = __ldxr((unsigned __int8 *)v27);
            if (v33 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v27))
              {
                if (v30)
                  return;
LABEL_53:
                if (v31)
                  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
                if (!v32)
                  WTF::fastFree((WTF *)v27, v15);
                return;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v27);
            if (v30)
              return;
            goto LABEL_53;
          }
        }
        else
        {
          v13 = (void *)MEMORY[0x1E0C9DDC8];
        }
        (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v7 + 48))(&v36, v7);
        v17 = (const void *)objc_msgSend(v13, "imageWithCGImage:", *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v36 + 48) + 16))(*(_QWORD *)(v36 + 48)));
        v16 = v17;
        if (v17)
          CFRetain(v17);
        v18 = v36;
        v36 = 0;
        if (!v18)
        {
LABEL_38:
          if (!v16)
            goto LABEL_41;
          goto LABEL_39;
        }
        v19 = *(_QWORD *)(v18 + 8);
        if (__ldaxr((unsigned __int8 *)v19))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v19))
        {
          goto LABEL_26;
        }
        MEMORY[0x19AEA534C](v19);
LABEL_26:
        v21 = *(_QWORD *)(v19 + 8);
        v22 = v21 - 1;
        *(_QWORD *)(v19 + 8) = v21 - 1;
        if (v21 == 1)
        {
          v35 = *(_QWORD *)(v19 + 16);
          v23 = *(_QWORD *)(v19 + 24);
          *(_QWORD *)(v19 + 24) = 0;
          v24 = v35 != 0;
        }
        else
        {
          v23 = 0;
          v24 = 1;
        }
        v25 = __ldxr((unsigned __int8 *)v19);
        if (v25 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v19))
          {
            if (v22)
              goto LABEL_38;
LABEL_34:
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            if (!v24)
              WTF::fastFree((WTF *)v19, v15);
            goto LABEL_38;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v19);
        if (v22)
          goto LABEL_38;
        goto LABEL_34;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    goto LABEL_14;
  }
}

void sub_19529674C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;

  v12 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
LABEL_6:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v19 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v19 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
LABEL_13:
        if (!v15)
        {
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          if (!v17)
            WTF::fastFree((WTF *)v12, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v12);
  goto LABEL_6;
}

uint64_t WebCore::createIOSurfaceCVPixelBufferPool@<X0>(WebCore *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _DWORD *a6@<X8>)
{
  uint64_t v12;
  __CVPixelBufferPool **v13;
  const __CFDictionary *v14;
  const __CFAllocator *v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  _QWORD v19[5];
  _QWORD v20[5];
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if (WebCore::get_CoreVideo_kCVPixelBufferWidthKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferWidthKey(void)::once, &__block_literal_global_25_0);
  v19[0] = WebCore::get_CoreVideo_kCVPixelBufferWidthKey(void)::constantCoreVideokCVPixelBufferWidthKey;
  v20[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", this);
  if (WebCore::get_CoreVideo_kCVPixelBufferHeightKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferHeightKey(void)::once, &__block_literal_global_28_5);
  v19[1] = WebCore::get_CoreVideo_kCVPixelBufferHeightKey(void)::constantCoreVideokCVPixelBufferHeightKey;
  v20[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a2);
  if (WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once, &__block_literal_global_13_3);
  v19[2] = WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::constantCoreVideokCVPixelBufferPixelFormatTypeKey;
  v20[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
  if (WebCore::get_CoreVideo_kCVPixelBufferCGImageCompatibilityKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferCGImageCompatibilityKey(void)::once, &__block_literal_global_19_0);
  v19[3] = WebCore::get_CoreVideo_kCVPixelBufferCGImageCompatibilityKey(void)::constantCoreVideokCVPixelBufferCGImageCompatibilityKey;
  v12 = MEMORY[0x1E0C9AAA0];
  if (a5)
    v12 = MEMORY[0x1E0C9AAB0];
  v20[3] = v12;
  if (WebCore::get_CoreVideo_kCVPixelBufferIOSurfacePropertiesKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferIOSurfacePropertiesKey(void)::once, &__block_literal_global_37_1);
  v19[4] = WebCore::get_CoreVideo_kCVPixelBufferIOSurfacePropertiesKey(void)::constantCoreVideokCVPixelBufferIOSurfacePropertiesKey;
  v20[4] = MEMORY[0x1E0C9AA70];
  v14 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 5);
  if ((_DWORD)a4)
  {
    if (WebCore::get_CoreVideo_kCVPixelBufferPoolMinimumBufferCountKey(void)::once != -1)
      dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPoolMinimumBufferCountKey(void)::once, &__block_literal_global_40_6);
    v21 = WebCore::get_CoreVideo_kCVPixelBufferPoolMinimumBufferCountKey(void)::constantCoreVideokCVPixelBufferPoolMinimumBufferCountKey;
    v22[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a4);
    v15 = (const __CFAllocator *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, &v21, 1);
  }
  else
  {
    v15 = 0;
  }
  v18 = 0;
  result = WebCore::softLinkCoreVideoCVPixelBufferPoolCreate((WebCore *)*MEMORY[0x1E0C9AE00], v15, v14, (const __CFDictionary *)&v18, v13);
  if ((_DWORD)result || !v18)
  {
    *a6 = result;
    v17 = 1;
  }
  else
  {
    v17 = 0;
    *(_QWORD *)a6 = v18;
  }
  a6[2] = v17;
  return result;
}

uint64_t WebCore::createInMemoryCVPixelBufferPool@<X0>(WebCore *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _DWORD *a6@<X8>)
{
  uint64_t v12;
  __CVPixelBufferPool **v13;
  const __CFDictionary *v14;
  const __CFAllocator *v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  _QWORD v19[4];
  _QWORD v20[4];
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if (WebCore::get_CoreVideo_kCVPixelBufferWidthKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferWidthKey(void)::once, &__block_literal_global_25_0);
  v19[0] = WebCore::get_CoreVideo_kCVPixelBufferWidthKey(void)::constantCoreVideokCVPixelBufferWidthKey;
  v20[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", this);
  if (WebCore::get_CoreVideo_kCVPixelBufferHeightKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferHeightKey(void)::once, &__block_literal_global_28_5);
  v19[1] = WebCore::get_CoreVideo_kCVPixelBufferHeightKey(void)::constantCoreVideokCVPixelBufferHeightKey;
  v20[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a2);
  if (WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once, &__block_literal_global_13_3);
  v19[2] = WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::constantCoreVideokCVPixelBufferPixelFormatTypeKey;
  v20[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
  if (WebCore::get_CoreVideo_kCVPixelBufferCGImageCompatibilityKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferCGImageCompatibilityKey(void)::once, &__block_literal_global_19_0);
  v19[3] = WebCore::get_CoreVideo_kCVPixelBufferCGImageCompatibilityKey(void)::constantCoreVideokCVPixelBufferCGImageCompatibilityKey;
  if (a5)
    v12 = MEMORY[0x1E0C9AAB0];
  else
    v12 = MEMORY[0x1E0C9AAA0];
  v20[3] = v12;
  v14 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 4);
  if ((_DWORD)a4)
  {
    if (WebCore::get_CoreVideo_kCVPixelBufferPoolMinimumBufferCountKey(void)::once != -1)
      dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPoolMinimumBufferCountKey(void)::once, &__block_literal_global_40_6);
    v21 = WebCore::get_CoreVideo_kCVPixelBufferPoolMinimumBufferCountKey(void)::constantCoreVideokCVPixelBufferPoolMinimumBufferCountKey;
    v22[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a4);
    v15 = (const __CFAllocator *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, &v21, 1);
  }
  else
  {
    v15 = 0;
  }
  v18 = 0;
  result = WebCore::softLinkCoreVideoCVPixelBufferPoolCreate((WebCore *)*MEMORY[0x1E0C9AE00], v15, v14, (const __CFDictionary *)&v18, v13);
  if ((_DWORD)result || !v18)
  {
    *a6 = result;
    v17 = 1;
  }
  else
  {
    v17 = 0;
    *(_QWORD *)a6 = v18;
  }
  a6[2] = v17;
  return result;
}

uint64_t WebCore::createCVPixelBufferPool@<X0>(WebCore *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _DWORD *a6@<X8>, int a7@<W5>)
{
  if (a7)
    return WebCore::createIOSurfaceCVPixelBufferPool(this, a2, a3, a4, a5, a6);
  else
    return WebCore::createInMemoryCVPixelBufferPool(this, a2, a3, a4, a5, a6);
}

uint64_t WebCore::createCVPixelBufferFromPool@<X0>(WebCore *this@<X0>, __CVPixelBufferPool *a2@<X1>, __CVBuffer **a3@<X3>, _DWORD *a4@<X8>)
{
  __CVPixelBufferPool *v7;
  __CVBuffer **v8;
  uint64_t result;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v12 = 0;
  if ((_DWORD)a2)
  {
    if (WebCore::get_CoreVideo_kCVPixelBufferPoolAllocationThresholdKey(void)::once != -1)
      dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPoolAllocationThresholdKey(void)::once, &__block_literal_global_43_2);
    v14[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2, v12, WebCore::get_CoreVideo_kCVPixelBufferPoolAllocationThresholdKey(void)::constantCoreVideokCVPixelBufferPoolAllocationThresholdKey);
    v7 = (__CVPixelBufferPool *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
    result = WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBufferWithAuxAttributes((WebCore *)*MEMORY[0x1E0C9AE00], this, v7, (const __CFDictionary *)&v12, v8);
  }
  else
  {
    result = WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBuffer((WebCore *)*MEMORY[0x1E0C9AE00], this, (__CVPixelBufferPool *)&v12, a3);
  }
  if ((_DWORD)result)
    v10 = 1;
  else
    v10 = v12 == 0;
  if (v10)
  {
    *a4 = result;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *(_QWORD *)a4 = v12;
  }
  a4[2] = v11;
  return result;
}

void WebCore::createCVPixelBuffer(WebCore *this@<X0>, __CVBuffer **a2@<X4>, _DWORD *a3@<X8>)
{
  int v5;
  uint64_t v6;
  BOOL v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v5 = WebCore::softLinkCoreVideoCVPixelBufferCreateWithIOSurface((WebCore *)*MEMORY[0x1E0C9AE00], this, MEMORY[0x1E0C9AA70], (const __CFDictionary *)&v10, a2);
  v6 = v10;
  if (v5)
    v7 = 1;
  else
    v7 = v10 == 0;
  if (v7)
  {
    v8 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      v12 = v5;
      v13 = 2048;
      v14 = v6;
      _os_log_error_impl(&dword_1940B8000, v8, OS_LOG_TYPE_ERROR, "createCVPixelBuffer failed with IOSurface status=%d, pixelBuffer=%p", buf, 0x12u);
    }
    *a3 = v5;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    *(_QWORD *)a3 = v10;
  }
  a3[2] = v9;
}

void WebCore::createCGColorSpaceForCVPixelBuffer(WebCore *this@<X0>, CVAttachmentMode *a2@<X3>, uint64_t *a3@<X8>)
{
  const void *Attachment;
  CVAttachmentMode v7;
  const void *v8;
  CFTypeID v9;
  WebCore *v10;
  const __CFDictionary *v11;
  uint64_t ColorSpaceFromAttachments;
  unint64_t v13;
  const void *v14;
  char v15;
  char **v16;
  char *v17;

  if (WebCore::get_CoreVideo_kCVImageBufferCGColorSpaceKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferCGColorSpaceKey(void)::once, &__block_literal_global_82_1);
  Attachment = (const void *)WebCore::softLinkCoreVideoCVBufferGetAttachment(this, (__CVBuffer *)WebCore::get_CoreVideo_kCVImageBufferCGColorSpaceKey(void)::constantCoreVideokCVImageBufferCGColorSpaceKey, 0, a2);
  if (Attachment && (v8 = Attachment, v9 = CFGetTypeID(Attachment), v9 == CGColorSpaceGetTypeID()))
  {
    *a3 = (uint64_t)v8;
    CFRetain(v8);
  }
  else
  {
    v10 = (WebCore *)WebCore::softLinkCoreVideoCVBufferCopyAttachments(this, (__CVBuffer *)1, v7);
    ColorSpaceFromAttachments = WebCore::softLinkCoreVideoCVImageBufferCreateColorSpaceFromAttachments(v10, v11);
    *a3 = ColorSpaceFromAttachments;
    if (!ColorSpaceFromAttachments)
    {
      *a3 = 0;
      {
        WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace = 0;
      }
      v13 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag);
      if (v13 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::{lambda(void)#1} &&>>);
      }
      v14 = (const void *)WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace;
      *a3 = WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace;
      if (v14)
        CFRetain(v14);
    }
    if (v10)
      CFRelease(v10);
  }
}

void sub_195297188(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::setOwnershipIdentityForCVPixelBuffer(WebCore *a1, __CVBuffer *a2)
{
  uint64_t IOSurface;

  IOSurface = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface(a1, a2);
  WebCore::IOSurface::setOwnershipIdentity(IOSurface, (int *)a2);
}

WebCore *WebCore::createBlackPixelBuffer@<X0>(WebCore *this@<X0>, unint64_t a2@<X1>, int a3@<W2>, WebCore **a4@<X8>)
{
  unsigned int v8;
  __CVBuffer **v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  WebCore *v13;
  WebCore *result;
  BOOL v15;
  unint64_t v16;
  uint64_t BaseAddressOfPlane;
  unint64_t v18;
  uint64_t BytesPerRowOfPlane;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  WebCore *v33;
  uint64_t v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  if (WebCore::get_CoreVideo_kCVPixelBufferIOSurfacePropertiesKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferIOSurfacePropertiesKey(void)::once, &__block_literal_global_37_1);
  v34 = WebCore::get_CoreVideo_kCVPixelBufferIOSurfacePropertiesKey(void)::constantCoreVideokCVPixelBufferIOSurfacePropertiesKey;
  v35[0] = MEMORY[0x1E0C9AA70];
  v8 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, &v34, 1);
  v33 = 0;
  if (a3)
    v10 = v8;
  else
    v10 = 0;
  v12 = WebCore::softLinkCoreVideoCVPixelBufferCreate((WebCore *)*MEMORY[0x1E0C9AE00], this, a2, 0x34323066uLL, v10, (const __CFDictionary *)&v33, v9);
  v13 = 0;
  result = v33;
  if (v12)
    v15 = 1;
  else
    v15 = v33 == 0;
  if (!v15)
  {
    WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress(v33, 0, v11);
    BaseAddressOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v33, 0, v16);
    BytesPerRowOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v33, 0, v18);
    if (a2)
    {
      v21 = BytesPerRowOfPlane;
      v22 = 0;
      v23 = 1;
      do
      {
        bzero((void *)(BaseAddressOfPlane + v22 * v21), (size_t)this);
        v22 = v23++;
      }
      while (v22 < a2);
    }
    v24 = WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v33, (__CVBuffer *)1, v20);
    v26 = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v33, (__CVBuffer *)1, v25);
    if (a2 >= 2)
    {
      v28 = v26;
      v29 = 0;
      v30 = a2 >> 1;
      v31 = 1;
      do
      {
        memset((void *)(v24 + v29 * v28), 128, (size_t)this);
        v29 = v31;
      }
      while (v30 > v31++);
    }
    result = (WebCore *)WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(v33, 0, v27);
    v13 = v33;
  }
  *a4 = v13;
  return result;
}

WebCore::ImageTransferSessionVT *WebCore::ImageTransferSessionVT::ImageTransferSessionVT(WebCore::ImageTransferSessionVT *this, int a2, OpaqueVTPixelTransferSession **a3)
{
  const void *v5;
  WebCore *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  int v10;
  NSObject *v11;
  WebCore *v12;
  const void *v13;
  int v14;
  NSObject *v15;
  WebCore *v16;
  const void *v17;
  int v18;
  NSObject *v19;
  WebCore *v20;
  int v21;
  NSObject *v22;
  WebCore *v24;
  uint8_t buf[4];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = (_BYTE)a3;
  *((_BYTE *)this + 20) = 0;
  *((_BYTE *)this + 36) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  v24 = 0;
  WebCore::softLinkVideoToolboxVTPixelTransferSessionCreate((WebCore *)*MEMORY[0x1E0C9AE00], (const __CFAllocator *)&v24, a3);
  v6 = v24;
  v7 = *(const void **)this;
  *(_QWORD *)this = v24;
  if (v7)
  {
    CFRelease(v7);
    v6 = v24;
  }
  if (WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_ScalingMode(void)::once != -1)
    dispatch_once(&WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_ScalingMode(void)::once, &__block_literal_global_33_1);
  v8 = (const void *)WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_ScalingMode(void)::constantVideoToolboxkVTPixelTransferPropertyKey_ScalingMode;
  if (WebCore::get_VideoToolbox_kVTScalingMode_Trim(void)::once != -1)
    dispatch_once(&WebCore::get_VideoToolbox_kVTScalingMode_Trim(void)::once, &__block_literal_global_39_2);
  v10 = WebCore::softLinkVideoToolboxVTSessionSetProperty(v6, v8, (const __CFString *)WebCore::get_VideoToolbox_kVTScalingMode_Trim(void)::constantVideoToolboxkVTScalingMode_Trim, v5);
  if (v10)
  {
    v11 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v26 = v10;
      _os_log_impl(&dword_1940B8000, v11, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::ImageTransferSessionVT: VTSessionSetProperty(kVTPixelTransferPropertyKey_ScalingMode) failed with error %d", buf, 8u);
    }
  }
  v12 = v24;
  if (WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_EnableHighSpeedTransfer(void)::once != -1)
    dispatch_once(&WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_EnableHighSpeedTransfer(void)::once, &__block_literal_global_48_6);
  v14 = WebCore::softLinkVideoToolboxVTSessionSetProperty(v12, (const void *)WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_EnableHighSpeedTransfer(void)::constantVideoToolboxkVTPixelTransferPropertyKey_EnableHighSpeedTransfer, MEMORY[0x1E0C9AAB0], v9);
  if (v14)
  {
    v15 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v26 = v14;
      _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::ImageTransferSessionVT: VTSessionSetProperty(kVTPixelTransferPropertyKey_EnableHighSpeedTransfer) failed with error %d", buf, 8u);
    }
  }
  v16 = v24;
  if (WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_RealTime(void)::once != -1)
    dispatch_once(&WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_RealTime(void)::once, &__block_literal_global_51_1);
  v18 = WebCore::softLinkVideoToolboxVTSessionSetProperty(v16, (const void *)WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_RealTime(void)::constantVideoToolboxkVTPixelTransferPropertyKey_RealTime, MEMORY[0x1E0C9AAB0], v13);
  if (v18)
  {
    v19 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v26 = v18;
      _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::ImageTransferSessionVT: VTSessionSetProperty(kVTPixelTransferPropertyKey_RealTime) failed with error %d", buf, 8u);
    }
  }
  v20 = v24;
  if (WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransfer(void)::once != -1)
    dispatch_once(&WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransfer(void)::once, &__block_literal_global_45_2);
  v21 = WebCore::softLinkVideoToolboxVTSessionSetProperty(v20, (const void *)WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransfer(void)::constantVideoToolboxkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransfer, MEMORY[0x1E0C9AAB0], v17);
  if (v21)
  {
    v22 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v26 = v21;
      _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::ImageTransferSessionVT: VTSessionSetProperty(kVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransfer) failed with error %d", buf, 8u);
    }
  }
  *((_DWORD *)this + 12) = a2;
  return this;
}

void sub_195297724(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;
  const void *v5;

  v3 = *(const void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  if (v5)
    CFRelease(v5);
  _Unwind_Resume(exception_object);
}

BOOL WebCore::ImageTransferSessionVT::setSize(WebCore::ImageTransferSessionVT *this, const WebCore::IntSize *a2)
{
  int v4;
  int v5;
  int v6;
  WebCore *v7;
  BOOL v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v15;
  unsigned int v16;
  char v17;

  v4 = *((_DWORD *)this + 13);
  v5 = *((_DWORD *)this + 14);
  v6 = *((_DWORD *)a2 + 1);
  v7 = (WebCore *)*(int *)a2;
  v8 = v4 == (_DWORD)v7 && v5 == v6;
  if (v8 && *((_QWORD *)this + 1))
    return 1;
  v10 = *((unsigned int *)this + 12);
  if (*((_BYTE *)this + 16))
    WebCore::createIOSurfaceCVPixelBufferPool(v7, v6, v10, 6, 0, &v15);
  else
    WebCore::createInMemoryCVPixelBufferPool(v7, v6, v10, 6, 0, &v15);
  v11 = v16;
  v9 = v16 == 0;
  if (v16)
  {
    if (v16 == -1)
      return v9;
  }
  else
  {
    v12 = v15;
    v15 = 0;
    v13 = (const void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v12;
    if (v13)
      CFRelease(v13);
    *(_QWORD *)((char *)this + 52) = *(_QWORD *)a2;
  }
  ((void (*)(char *, uint64_t *))off_1E3350B90[v11])(&v17, &v15);
  return v9;
}

void WebCore::ImageTransferSessionVT::convertPixelBuffer(WebCore::ImageTransferSessionVT *this@<X0>, __CVBuffer *a2@<X1>, const WebCore::IntSize *a3@<X2>, CVAttachmentMode a4@<W4>, __CVBuffer **a5@<X8>)
{
  uint64_t v9;
  int Width;
  __CVBuffer *v11;
  int Height;
  __CVBuffer *v13;
  int v15;
  __CVBuffer **v16;
  const __CFAllocator *v17;
  uint64_t v18;
  __CVPixelBufferPool *v19;
  __CVBuffer **v20;
  int PixelBufferWithAuxAttributes;
  __CVBuffer *v22;
  int v23;
  __CVBuffer *v24;
  BOOL v25;
  NSObject *v26;
  int v27;
  const __CFString *v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t buf[8];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 5);
  if (a2 && !v9)
  {
    Width = WebCore::softLinkCoreVideoCVPixelBufferGetWidth(a2, a2);
    Height = WebCore::softLinkCoreVideoCVPixelBufferGetHeight(a2, v11);
    if (*((_DWORD *)this + 13) == Width && *((_DWORD *)this + 14) == Height)
    {
      v15 = *((_DWORD *)this + 12);
      if (v15 == WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType(a2, v13))
      {
        *a5 = a2;
        CFRetain(a2);
        return;
      }
    }
    v9 = *((_QWORD *)this + 5);
  }
  if (v9)
  {
    if (WebCore::get_CoreVideo_kCVImageBufferCleanApertureKey(void)::once != -1)
      dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferCleanApertureKey(void)::once, &__block_literal_global_85_0);
    WebCore::softLinkCoreVideoCVBufferSetAttachment(a2, (__CVBuffer *)WebCore::get_CoreVideo_kCVImageBufferCleanApertureKey(void)::constantCoreVideokCVImageBufferCleanApertureKey, *((const __CFString **)this + 5), (const void *)1, a4);
  }
  if (a2 && WebCore::ImageTransferSessionVT::setSize(this, a3))
  {
    v17 = (const __CFAllocator *)*((_QWORD *)this + 1);
    v18 = *((unsigned int *)this + 16);
    *(_QWORD *)buf = 0;
    if ((_DWORD)v18)
    {
      if (WebCore::get_CoreVideo_kCVPixelBufferPoolAllocationThresholdKey(void)::once != -1)
        dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPoolAllocationThresholdKey(void)::once, &__block_literal_global_43_2);
      v33 = WebCore::get_CoreVideo_kCVPixelBufferPoolAllocationThresholdKey(void)::constantCoreVideokCVPixelBufferPoolAllocationThresholdKey;
      v34 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v18);
      v19 = (__CVPixelBufferPool *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
      PixelBufferWithAuxAttributes = WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBufferWithAuxAttributes((WebCore *)*MEMORY[0x1E0C9AE00], v17, v19, (const __CFDictionary *)buf, v20);
    }
    else
    {
      PixelBufferWithAuxAttributes = WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBuffer((WebCore *)*MEMORY[0x1E0C9AE00], v17, (__CVPixelBufferPool *)buf, v16);
    }
    v23 = PixelBufferWithAuxAttributes;
    v24 = *(__CVBuffer **)buf;
    if (PixelBufferWithAuxAttributes)
      v25 = 1;
    else
      v25 = *(_QWORD *)buf == 0;
    if (v25)
    {
      LODWORD(v31) = PixelBufferWithAuxAttributes;
      v32 = 1;
      v26 = qword_1ECE7C4A0;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v23;
        _os_log_impl(&dword_1940B8000, v26, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::convertPixelBuffer, createCVPixelBufferFromPool failed with error %d", buf, 8u);
      }
      *a5 = 0;
    }
    else
    {
      v32 = 0;
      v31 = 0;
      v27 = WebCore::softLinkVideoToolboxVTPixelTransferSessionTransferImage(*(WebCore **)this, a2, *(__CVBuffer **)buf, v22);
      v29 = v27;
      if (v27)
      {
        v30 = qword_1ECE7C4A0;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v29;
          _os_log_impl(&dword_1940B8000, v30, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::convertPixelBuffer, VTPixelTransferSessionTransferImage failed with error %d", buf, 8u);
        }
        *a5 = 0;
        CFRelease(v24);
      }
      else
      {
        if (*((_QWORD *)this + 5))
        {
          if (WebCore::get_CoreVideo_kCVImageBufferCleanApertureKey(void)::once != -1)
            dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferCleanApertureKey(void)::once, &__block_literal_global_85_0);
          WebCore::softLinkCoreVideoCVBufferRemoveAttachment(a2, (__CVBuffer *)WebCore::get_CoreVideo_kCVImageBufferCleanApertureKey(void)::constantCoreVideokCVImageBufferCleanApertureKey, v28);
        }
        *a5 = v24;
      }
    }
    if (v32 != -1)
      ((void (*)(uint8_t *, uint64_t *))off_1E3350BA0[v32])(buf, &v31);
  }
  else
  {
    *a5 = 0;
  }
}

void sub_195297BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, char a13)
{
  const void *v13;

  CFRelease(v13);
  if (a10 != -1)
    ((void (*)(char *, uint64_t *))off_1E3350BA0[a10])(&a13, &a9);
  _Unwind_Resume(a1);
}

void WebCore::ImageTransferSessionVT::convertCMSampleBuffer(WebCore::ImageTransferSessionVT *this@<X0>, opaqueCMSampleBuffer *a2@<X1>, const WebCore::IntSize *a3@<X2>, const WTF::MediaTime *a4@<X3>, _QWORD *a5@<X8>)
{
  PAL *FormatDescription;
  unsigned __int8 v11;
  float PresentationDimensions;
  double v13;
  float v14;
  opaqueCMSampleBuffer *v15;
  WebCore *v16;
  __CVBuffer *v17;
  __CVBuffer *v18;
  float v19;
  int v20;
  int v21;
  float v22;
  int v23;
  int v24;
  CVAttachmentMode v25;
  uint64_t *v26;
  const __CFAllocator *v27;
  const opaqueCMFormatDescription **v28;
  int SampleTimingInfoArray;
  NSObject *v30;
  unsigned int value;
  unint64_t v32;
  WTF *v33;
  uint64_t *v34;
  int v35;
  int v36;
  NSObject *v37;
  void *v38;
  PAL *v39;
  opaqueCMSampleBuffer **v40;
  CMTimeFlags v41;
  NSObject *v42;
  int ReadyWithImageBuffer;
  NSObject *v44;
  uint64_t v45;
  int v46;
  double v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  CMSampleTimingInfo v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_21;
  FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(a2, a2);
  PresentationDimensions = PAL::softLinkCoreMediaCMVideoFormatDescriptionGetPresentationDimensions(FormatDescription, (const opaqueCMFormatDescription *)1, 1u, v11);
  v14 = v13;
  v16 = (WebCore *)PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0](a2, v15);
  v18 = v16;
  v19 = ceilf(PresentationDimensions);
  if (v19 > -2147500000.0)
    v20 = (int)v19;
  else
    v20 = 0x80000000;
  if (v19 < 2147500000.0)
    v21 = v20;
  else
    v21 = 0x7FFFFFFF;
  v22 = ceilf(v14);
  if (v22 >= 2147500000.0)
  {
    v23 = 0x7FFFFFFF;
  }
  else if (v22 <= -2147500000.0)
  {
    v23 = 0x80000000;
  }
  else
  {
    v23 = (int)v22;
  }
  if (*(_DWORD *)a3 == v21 && *((_DWORD *)a3 + 1) == v23)
  {
    v24 = *((_DWORD *)this + 12);
    if (v24 == WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType(v16, v17))
    {
      *a5 = a2;
      CFRetain(a2);
      return;
    }
  }
  if (!WebCore::ImageTransferSessionVT::setSize(this, a3)
    || (WebCore::ImageTransferSessionVT::convertPixelBuffer(this, v18, a3, v25, (__CVBuffer **)&v52.duration.timescale),
        (v27 = *(const __CFAllocator **)&v52.duration.timescale) == 0))
  {
LABEL_21:
    *a5 = 0;
    return;
  }
  v52.duration.value = 0;
  SampleTimingInfoArray = PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfoArray(a2, (opaqueCMSampleBuffer *)1, 0, &v52, v26);
  if (SampleTimingInfoArray)
  {
    v30 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v52.decodeTimeStamp.value) = 67109120;
      HIDWORD(v52.decodeTimeStamp.value) = SampleTimingInfoArray;
      _os_log_impl(&dword_1940B8000, v30, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::convertCMSampleBuffer: CMSampleBufferGetSampleTimingInfoArray failed with error code: %d", (uint8_t *)&v52.decodeTimeStamp, 8u);
    }
    *a5 = 0;
    *(_QWORD *)&v52.duration.timescale = 0;
    goto LABEL_48;
  }
  value = v52.duration.value;
  if (v52.duration.value)
  {
    v32 = 16;
    if (v52.duration.value > 0x10uLL)
      v32 = v52.duration.value;
    if (v32 >= 0x38E38E4)
    {
      __break(0xC471u);
      return;
    }
    v33 = (WTF *)WTF::fastMalloc((WTF *)(72 * v32));
    v36 = PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfoArray(a2, (opaqueCMSampleBuffer *)v52.duration.value, (uint64_t)v33, 0, v34);
    if (v36)
    {
      v37 = qword_1ECE7C4A0;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v52.decodeTimeStamp.value) = 67109120;
        HIDWORD(v52.decodeTimeStamp.value) = v36;
        _os_log_impl(&dword_1940B8000, v37, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::convertCMSampleBuffer: CMSampleBufferGetSampleTimingInfoArray failed with error code: %d", (uint8_t *)&v52.decodeTimeStamp, 8u);
      }
      *a5 = 0;
LABEL_46:
      WTF::fastFree(v33, v38);
      v27 = *(const __CFAllocator **)&v52.duration.timescale;
      goto LABEL_47;
    }
    if (a4)
    {
      memset(&v52.decodeTimeStamp, 0, sizeof(v52.decodeTimeStamp));
      if ((*((_BYTE *)a4 + 12) & 0x20) != 0)
      {
        WTF::MediaTime::toDouble(a4);
        PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*((unsigned int *)a4 + 2), v47, v46);
      }
      else
      {
        PAL::softLinkCoreMediaCMTimeMake(*(PAL **)a4, *((unsigned int *)a4 + 2), v35);
      }
      v52.decodeTimeStamp.flags = v52.decodeTimeStamp.flags & 0xFFFFFFFE | *((_BYTE *)a4 + 12) & 1 | *((_BYTE *)a4 + 12) & 0xE;
      if (value)
      {
        v48 = 72 * value;
        v49 = (char *)v33 + 48;
        do
        {
          v50 = *(_OWORD *)&v52.decodeTimeStamp.value;
          *((_QWORD *)v49 - 1) = v52.decodeTimeStamp.epoch;
          *(_OWORD *)(v49 - 24) = v50;
          v51 = *(_OWORD *)&v52.decodeTimeStamp.value;
          *((_QWORD *)v49 + 2) = v52.decodeTimeStamp.epoch;
          *(_OWORD *)v49 = v51;
          v49 += 72;
          v48 -= 72;
        }
        while (v48);
      }
    }
  }
  else
  {
    v33 = 0;
  }
  v52.decodeTimeStamp.value = 0;
  v39 = (PAL *)*MEMORY[0x1E0C9AE00];
  v41 = PAL::softLinkCoreMediaCMVideoFormatDescriptionCreateForImageBuffer((PAL *)*MEMORY[0x1E0C9AE00], v27, (__CVBuffer *)&v52.decodeTimeStamp, v28);
  if (v41)
  {
    v42 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
    {
      v52.presentationTimeStamp.timescale = 67109120;
      v52.presentationTimeStamp.flags = v41;
      _os_log_impl(&dword_1940B8000, v42, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::convertCMSampleBuffer: CMVideoFormatDescriptionCreateForImageBuffer returned: %d", (uint8_t *)&v52.presentationTimeStamp.timescale, 8u);
    }
    *a5 = 0;
  }
  else
  {
    *(_QWORD *)&v52.presentationTimeStamp.timescale = 0;
    ReadyWithImageBuffer = PAL::softLinkCoreMediaCMSampleBufferCreateReadyWithImageBuffer(v39, v27, (__CVBuffer *)v52.decodeTimeStamp.value, v33, (const CMSampleTimingInfo *)&v52.presentationTimeStamp.timescale, v40);
    CFRelease((CFTypeRef)v52.decodeTimeStamp.value);
    if (ReadyWithImageBuffer)
    {
      v44 = qword_1ECE7C4A0;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v52.duration.epoch) = 67109120;
        HIDWORD(v52.duration.epoch) = ReadyWithImageBuffer;
        _os_log_impl(&dword_1940B8000, v44, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::convertCMSampleBuffer: failed to create CMSampleBuffer with error code: %d", (uint8_t *)&v52.duration.epoch, 8u);
      }
      v45 = 0;
    }
    else
    {
      v45 = *(_QWORD *)&v52.presentationTimeStamp.timescale;
    }
    *a5 = v45;
  }
  if (v33)
    goto LABEL_46;
LABEL_47:
  *(_QWORD *)&v52.duration.timescale = 0;
  if (v27)
LABEL_48:
    CFRelease(v27);
}

void sub_19529812C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  const void *v10;
  WTF *v11;

  if (v11)
  {
    WTF::fastFree(v11, a2);
    v10 = a10;
  }
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebCore::ImageTransferSessionVT::createPixelBuffer(WebCore::ImageTransferSessionVT *this@<X0>, CGImage *a2@<X1>, const WebCore::IntSize *a3@<X2>, __CVBuffer **a4@<X8>)
{
  int Width;
  int Height;
  __CVBuffer **v10;
  unint64_t v11;
  int v12;
  NSObject *v13;
  __CVBuffer *v14;
  void *BaseAddress;
  __CVBuffer *v16;
  size_t BytesPerRow;
  unint64_t v18;
  CGContext *v19;
  CGContext *v20;
  unint64_t v21;
  CVAttachmentMode v22;
  WebCore *v23;
  NSObject *v24;
  WebCore *cf;
  WebCore *v26;
  char v27;
  uint8_t *v28;
  uint8_t buf[8];
  uint64_t v30;
  CGRect v31;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a2 || !WebCore::ImageTransferSessionVT::setSize(this, a3))
    goto LABEL_6;
  v26 = 0;
  Width = CGImageGetWidth(a2);
  Height = CGImageGetHeight(a2);
  v12 = WebCore::softLinkCoreVideoCVPixelBufferCreate((WebCore *)*MEMORY[0x1E0C9AE00], (const __CFAllocator *)Width, Height, 0x20uLL, 0, (const __CFDictionary *)&v26, v10);
  if (v12)
  {
    v13 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v12;
      _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::createPixelBuffer: CVPixelBufferCreate failed with error code: %d", buf, 8u);
    }
LABEL_6:
    *a4 = 0;
    return;
  }
  WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress(v26, 0, v11);
  BaseAddress = (void *)WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddress(v26, v14);
  cf = v26;
  BytesPerRow = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRow(v26, v16);
  {
    WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace = 0;
  }
  v18 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag);
  if (v18 != -1)
  {
    *(_QWORD *)buf = &v27;
    v28 = buf;
    std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::{lambda(void)#1} &&>>);
  }
  v19 = CGBitmapContextCreate(BaseAddress, Width, Height, 8uLL, BytesPerRow, (CGColorSpaceRef)WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace, 6u);
  v20 = v19;
  if (v19)
  {
    v31.size.width = (double)Width;
    v31.size.height = (double)Height;
    v31.origin.x = 0.0;
    v31.origin.y = 0.0;
    CGContextDrawImage(v19, v31, a2);
    WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(v26, 0, v21);
    WebCore::ImageTransferSessionVT::convertPixelBuffer(this, v26, a3, v22, a4);
    CFRelease(v20);
    v23 = cf;
    if (!cf)
      return;
LABEL_18:
    CFRelease(v23);
    return;
  }
  v24 = qword_1ECE7C4A0;
  v23 = cf;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1940B8000, v24, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::createPixelBuffer: CGBitmapContextCreate returned nullptr", buf, 2u);
  }
  *a4 = 0;
  if (cf)
    goto LABEL_18;
}

void sub_195298430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  const void *v9;

  CFRelease(v9);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void WebCore::ImageTransferSessionVT::createCMSampleBuffer(WebCore::ImageTransferSessionVT *this@<X0>, __CVBuffer *a2@<X1>, const WTF::MediaTime *a3@<X2>, const WebCore::IntSize *a4@<X3>, CMTimeValue *a5@<X8>)
{
  WebCore *v7;
  __CVBuffer *v9;
  int Width;
  __CVBuffer *v11;
  int Height;
  __CVBuffer *v13;
  CVAttachmentMode v14;
  BOOL v15;
  int v16;
  const opaqueCMFormatDescription **v17;
  WebCore *v18;
  PAL *v19;
  int v20;
  CMTimeFlags v21;
  NSObject *v22;
  opaqueCMSampleBuffer **v23;
  int v24;
  double v25;
  int v26;
  NSObject *v27;
  CMTimeValue value;
  __int128 v29;
  CMSampleTimingInfo v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_14;
  v7 = a2;
  if (!WebCore::ImageTransferSessionVT::setSize(this, a4))
    goto LABEL_14;
  Width = WebCore::softLinkCoreVideoCVPixelBufferGetWidth(v7, v9);
  Height = WebCore::softLinkCoreVideoCVPixelBufferGetHeight(v7, v11);
  CFRetain(v7);
  v15 = *((_DWORD *)this + 13) == Width && *((_DWORD *)this + 14) == Height;
  if (v15
    && (v16 = *((_DWORD *)this + 12),
        v16 == WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType(v7, v13))
    || (WebCore::ImageTransferSessionVT::convertPixelBuffer(this, v7, (WebCore::ImageTransferSessionVT *)((char *)this + 52), v14, (__CVBuffer **)&v30.presentationTimeStamp.timescale), v18 = *(WebCore **)&v30.presentationTimeStamp.timescale, CFRelease(v7), (v7 = v18) != 0))
  {
    *(_QWORD *)&v30.duration.timescale = 0;
    v19 = (PAL *)*MEMORY[0x1E0C9AE00];
    v21 = PAL::softLinkCoreMediaCMVideoFormatDescriptionCreateForImageBuffer((PAL *)*MEMORY[0x1E0C9AE00], v7, (__CVBuffer *)&v30.duration.timescale, v17);
    if (v21)
    {
      v22 = qword_1ECE7C4A0;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
      {
        v30.presentationTimeStamp.timescale = 67109120;
        v30.presentationTimeStamp.flags = v21;
        _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::convertPixelBuffer: failed to initialize CMVideoFormatDescription with error code: %d", (uint8_t *)&v30.presentationTimeStamp.timescale, 8u);
      }
      *a5 = 0;
    }
    else
    {
      v30.duration.value = 0;
      v29 = 0uLL;
      if ((*((_BYTE *)a3 + 12) & 0x20) != 0)
      {
        WTF::MediaTime::toDouble(a3);
        PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*((unsigned int *)a3 + 2), v25, v24);
      }
      else
      {
        PAL::softLinkCoreMediaCMTimeMake(*(PAL **)a3, *((unsigned int *)a3 + 2), v20);
      }
      HIDWORD(v29) = ((unsigned __int128)0 >> 96) & 0xFFFFFFFE | *((_BYTE *)a3 + 12) & 1 | *((_BYTE *)a3 + 12) & 0xE;
      if (PAL::get_CoreMedia_kCMTimeInvalid(void)::once != -1)
        dispatch_once(&PAL::get_CoreMedia_kCMTimeInvalid(void)::once, &__block_literal_global_5);
      *(_OWORD *)&v30.presentationTimeStamp.timescale = PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
      v30.decodeTimeStamp.value = qword_1EE2E68A0;
      *(_OWORD *)&v30.decodeTimeStamp.timescale = v29;
      v31 = 0;
      v32 = v29;
      v33 = 0;
      v26 = PAL::softLinkCoreMediaCMSampleBufferCreateReadyWithImageBuffer(v19, v7, *(__CVBuffer **)&v30.duration.timescale, (const opaqueCMFormatDescription *)&v30.presentationTimeStamp.timescale, &v30, v23);
      CFRelease(*(CFTypeRef *)&v30.duration.timescale);
      if (v26)
      {
        v27 = qword_1ECE7C4A0;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v30.duration.epoch) = 67109120;
          HIDWORD(v30.duration.epoch) = v26;
          _os_log_impl(&dword_1940B8000, v27, OS_LOG_TYPE_DEFAULT, "ImageTransferSessionVT::convertPixelBuffer: failed to initialize CMSampleBuffer with error code: %d", (uint8_t *)&v30.duration.epoch, 8u);
        }
        value = 0;
      }
      else
      {
        value = v30.duration.value;
      }
      *a5 = value;
    }
    CFRelease(v7);
  }
  else
  {
LABEL_14:
    *a5 = 0;
  }
}

void sub_195298764(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::ImageTransferSessionVT::createCMSampleBuffer(WebCore::ImageTransferSessionVT *this@<X0>, __IOSurface *a2@<X1>, const WTF::MediaTime *a3@<X2>, const WebCore::IntSize *a4@<X3>, CMTimeValue *a5@<X8>)
{
  __CVBuffer **v10;
  int v11;
  __CVBuffer *v12;
  NSObject *v14;
  uint64_t v15;
  __CVBuffer *v16;
  uint8_t buf[8];
  _DWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a2 || !WebCore::ImageTransferSessionVT::setSize(this, a4))
    goto LABEL_13;
  v16 = 0;
  v11 = WebCore::softLinkCoreVideoCVPixelBufferCreateWithIOSurface((WebCore *)*MEMORY[0x1E0C9AE00], a2, MEMORY[0x1E0C9AA70], (const __CFDictionary *)&v16, v10);
  v12 = v16;
  if (v11 || v16 == 0)
  {
    v14 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v11;
      LOWORD(v18[0]) = 2048;
      *(_QWORD *)((char *)v18 + 2) = v12;
      _os_log_error_impl(&dword_1940B8000, v14, OS_LOG_TYPE_ERROR, "createCVPixelBuffer failed with IOSurface status=%d, pixelBuffer=%p", buf, 0x12u);
    }
    v12 = 0;
    v15 = 1;
    *(_DWORD *)buf = v11;
    v18[0] = 1;
  }
  else
  {
    v15 = 0;
    v18[0] = 0;
    *(_QWORD *)buf = 0;
  }
  ((void (*)(__CVBuffer **, uint8_t *))off_1E3350BA0[v15])(&v16, buf);
  if (v12)
  {
    WebCore::ImageTransferSessionVT::createCMSampleBuffer(this, v12, a3, a4, a5);
    CFRelease(v12);
  }
  else
  {
LABEL_13:
    *a5 = 0;
  }
}

void sub_195298914(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::ImageTransferSessionVT::convertVideoFrame(WebCore::ImageTransferSessionVT *this@<X0>, WebCore::VideoFrame *a2@<X1>, const WebCore::IntSize *a3@<X2>, uint64_t *a4@<X8>)
{
  float v8;
  float v9;
  int v10;
  int v11;
  float v12;
  int v13;
  int v14;
  __CVBuffer *v16;
  CVAttachmentMode v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _BYTE v25[10];
  CFTypeRef cf;

  v8 = ceilf((*(float (**)(WebCore::VideoFrame *))(*(_QWORD *)a2 + 16))(a2));
  if (v8 > -2147500000.0)
    v10 = (int)v8;
  else
    v10 = 0x80000000;
  if (v8 < 2147500000.0)
    v11 = v10;
  else
    v11 = 0x7FFFFFFF;
  v12 = ceilf(v9);
  if (v12 > -2147500000.0)
    v13 = (int)v12;
  else
    v13 = 0x80000000;
  if (v12 < 2147500000.0)
    v14 = v13;
  else
    v14 = 0x7FFFFFFF;
  if (*(_DWORD *)a3 == v11 && *((_DWORD *)a3 + 1) == v14)
  {
    v23 = (unsigned int *)((char *)a2 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    *a4 = (uint64_t)a2;
  }
  else
  {
    v16 = (__CVBuffer *)(*(uint64_t (**)(WebCore::VideoFrame *))(*(_QWORD *)a2 + 56))(a2);
    WebCore::ImageTransferSessionVT::convertPixelBuffer(this, v16, a3, v17, (__CVBuffer **)&cf);
    if (cf)
    {
      v18 = *((_QWORD *)a2 + 2);
      v19 = *((_QWORD *)a2 + 3);
      v20 = *((unsigned __int8 *)a2 + 32);
      v21 = *((_WORD *)a2 + 17);
      v25[0] = 0;
      v25[8] = 0;
      v22 = WTF::fastMalloc((WTF *)0x38);
      WebCore::VideoFrameCV::VideoFrameCV(v22, v18, v19, (CVAttachmentMode *)(v20 != 0), v21, (WebCore **)&cf, (uint64_t)v25);
      *a4 = v22;
      if (cf)
        CFRelease(cf);
    }
    else
    {
      *a4 = 0;
    }
  }
}

void sub_195298A88(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  WTF *v12;

  WTF::fastFree(v12, a2);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

uint64_t WebCore::VideoFrameCV::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CVAttachmentMode *a3@<X2>, __int16 a4@<W3>, WebCore **a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t result;

  v14 = WTF::fastMalloc((WTF *)0x38);
  result = WebCore::VideoFrameCV::VideoFrameCV(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14;
  return result;
}

void sub_195298B2C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::ImageTransferSessionVT::createVideoFrame(WebCore::IntSize *a1@<X3>, WebCore::ImageTransferSessionVT *a2@<X0>, CGImage *a3@<X1>, const WTF::MediaTime *a4@<X2>, __int16 a5@<W4>, opaqueCMSampleBuffer *a6@<X5>, __CVBuffer **a7@<X8>)
{
  __CVBuffer *v13;
  PAL *v14;
  PAL *v15;
  __CVBuffer *v16;

  WebCore::ImageTransferSessionVT::createPixelBuffer(a2, a3, a1, &v16);
  v13 = v16;
  if (v16
    && (WebCore::ImageTransferSessionVT::createCMSampleBuffer(a2, v16, a4, a1, (CMTimeValue *)&v15),
        CFRelease(v13),
        (v14 = v15) != 0))
  {
    WebCore::VideoFrameCV::create(v15, a6, a5, (uint64_t *)&v16);
    *a7 = v16;
    CFRelease(v14);
  }
  else
  {
    *a7 = 0;
  }
}

void sub_195298C0C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::ImageTransferSessionVT::createVideoFrame(WebCore::ImageTransferSessionVT *this@<X0>, __IOSurface *a2@<X1>, const WTF::MediaTime *a3@<X2>, const WebCore::IntSize *a4@<X3>, _QWORD *a5@<X8>)
{
  PAL *v6;
  uint64_t v7;
  PAL *v8;

  WebCore::ImageTransferSessionVT::createCMSampleBuffer(this, a2, a3, a4, (CMTimeValue *)&v8);
  v6 = v8;
  if (v8)
  {
    WebCore::VideoFrameCV::create(v8, 0, 0, &v7);
    *a5 = v7;
    CFRelease(v6);
  }
  else
  {
    *a5 = 0;
  }
}

void sub_195298C94(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::ImageTransferSessionVT::createVideoFrame(WebCore::ImageTransferSessionVT *a1@<X0>, __IOSurface *a2@<X1>, const WTF::MediaTime *a3@<X2>, const WebCore::IntSize *a4@<X3>, __int16 a5@<W4>, opaqueCMSampleBuffer *a6@<X5>, _QWORD *a7@<X8>)
{
  PAL *v10;
  uint64_t v11;
  PAL *v12;

  WebCore::ImageTransferSessionVT::createCMSampleBuffer(a1, a2, a3, a4, (CMTimeValue *)&v12);
  v10 = v12;
  if (v12)
  {
    WebCore::VideoFrameCV::create(v12, a6, a5, &v11);
    *a7 = v11;
    CFRelease(v10);
  }
  else
  {
    *a7 = 0;
  }
}

void sub_195298D24(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::VideoFrameCV::create(PAL *a1@<X0>, opaqueCMSampleBuffer *a2@<X1>, __int16 a3@<W2>, uint64_t *a4@<X8>)
{
  const void *v8;
  opaqueCMSampleBuffer *v9;
  opaqueCMSampleBuffer *v10;
  int v11;
  char v12;
  unsigned __int8 v13;
  _BOOL4 v15;
  char v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef cf;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v8 = (const void *)PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0](a1, a2);
  v24 = 0uLL;
  v25 = 0;
  PAL::softLinkCoreMediaCMSampleBufferGetOutputPresentationTimeStamp(a1, v9);
  v11 = (unsigned __int128)0 >> 96;
  if (v11)
  {
    v12 = 1;
  }
  else
  {
    PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](a1, v10);
    v24 = v22;
    v25 = v23;
    v11 = HIDWORD(v22);
    v12 = BYTE12(v22) & 1;
  }
  if ((~v11 & 3) == 0)
    v12 |= 2u;
  if ((~v11 & 5) == 0)
    v12 |= 4u;
  if ((~v11 & 9) == 0)
    v12 |= 8u;
  if ((~v11 & 0x11) != 0)
    v13 = v12;
  else
    v13 = v12 | 0x10;
  v15 = (v13 & 1) == 0 || DWORD2(v24) != 0;
  if ((uint64_t)v24 >= 0)
    v16 = 5;
  else
    v16 = 9;
  if (v15)
    v17 = v13;
  else
    v17 = v16;
  if (v15)
    v18 = v24;
  else
    v18 = (uint64_t)v24 >> 63;
  if (v15)
    v19 = DWORD2(v24);
  else
    v19 = 1;
  cf = v8;
  if (v8)
    CFRetain(v8);
  LOBYTE(v22) = 0;
  BYTE8(v22) = 0;
  v20 = WTF::fastMalloc((WTF *)0x38);
  WebCore::VideoFrameCV::VideoFrameCV(v20, v18, v19 | ((unint64_t)v17 << 32), (CVAttachmentMode *)a2, a3, (WebCore **)&cf, (uint64_t)&v22);
  *a4 = v20;
  if (cf)
    CFRelease(cf);
}

void sub_195298EB8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  WTF *v9;

  WTF::fastFree(v9, a2);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

uint64_t WebCore::VideoFrame::fromNativeImage@<X0>(WebCore::VideoFrame *this@<X0>, __CVBuffer **a2@<X8>)
{
  WebCore::ImageTransferSessionVT *v5;
  CGImage *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;

  v5 = (WebCore::ImageTransferSessionVT *)operator new();
  WebCore::ImageTransferSessionVT::ImageTransferSessionVT(v5, 32, 0);
  v6 = *(CGImage **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  v12 = 0;
  v13 = 10000000;
  v14 = 1;
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6));
  WebCore::ImageTransferSessionVT::createVideoFrame((WebCore::IntSize *)&v11, v5, v6, (const WTF::MediaTime *)&v12, 0, 0, a2);
  v7 = (const void *)*((_QWORD *)v5 + 5);
  *((_QWORD *)v5 + 5) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)v5;
  *(_QWORD *)v5 = 0;
  if (v9)
    CFRelease(v9);
  return MEMORY[0x19AEA7644](v5, 0x10C0C404B4E061BLL);
}

void sub_195298FE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;
  const void *v4;
  const void *v5;

  v3 = *(const void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  if (v5)
    CFRelease(v5);
  MEMORY[0x19AEA7644](v1, 0x10C0C404B4E061BLL);
  _Unwind_Resume(a1);
}

void WebCore::VideoFrame::createNV12(__CFAllocator *a1@<X2>, char *a2@<X0>, unint64_t a3@<X1>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __CVBuffer **a7@<X6>, uint64_t *a8@<X8>)
{
  int v16;
  unint64_t v17;
  WebCore *v18;
  BOOL v19;
  unint64_t v21;
  uint64_t v22;
  WebCore *v23;
  char *BaseAddressOfPlane;
  unint64_t v25;
  unsigned int BytesPerRowOfPlane;
  __CVBuffer *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  WebCore *v37;
  char *v38;
  unint64_t v39;
  unsigned int v40;
  size_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __CVBuffer **v48;
  char *__src;
  __CVBuffer *v50;
  char v51;
  WebCore *v52;
  WebCore *v53;

  v53 = 0;
  v16 = WebCore::softLinkCoreVideoCVPixelBufferCreate((WebCore *)*MEMORY[0x1E0C9AE00], a1, a4, 0x34323066uLL, 0, (const __CFDictionary *)&v53, a7);
  v18 = v53;
  if (v16)
    v19 = 1;
  else
    v19 = v53 == 0;
  if (v19)
  {
    *a8 = 0;
    return;
  }
  v52 = v53;
  if (!WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress(v53, 0, v17))
  {
    v22 = *(_QWORD *)(a5 + 40);
    if (a3 < v22 * a4)
    {
LABEL_10:
      *a8 = 0;
      goto LABEL_30;
    }
    v48 = a7;
    __src = a2;
    v46 = a3;
    v47 = a6;
    v23 = v53;
    BaseAddressOfPlane = (char *)WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v53, 0, v21);
    BytesPerRowOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v23, 0, v25);
    if (a4)
    {
      if (BytesPerRowOfPlane >= v22)
        v28 = v22;
      else
        v28 = BytesPerRowOfPlane;
      v29 = v22;
      v30 = BytesPerRowOfPlane;
      v31 = 1;
      v32 = __src;
      do
      {
        memcpy(BaseAddressOfPlane, v32, v28);
        v32 += v29;
        BaseAddressOfPlane += v30;
        v33 = v31++;
      }
      while (v33 < a4);
    }
    else
    {
      v32 = a2;
    }
    if (WebCore::softLinkCoreVideoCVPixelBufferGetPlaneCount(v53, v27) == 2)
    {
      if (WebCore::softLinkCoreVideoCVPixelBufferGetWidthOfPlane(v53, (__CVBuffer *)1, v34) != (unint64_t)a1 >> 1)
        goto LABEL_10;
      v35 = a4 >> 1;
      if (WebCore::softLinkCoreVideoCVPixelBufferGetHeightOfPlane(v53, (__CVBuffer *)1, v21) != a4 >> 1)
        goto LABEL_10;
      v36 = *(_QWORD *)(v47 + 40);
      if (&v32[v36 * v35] > &__src[v46])
        goto LABEL_10;
      v37 = v53;
      v38 = (char *)WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v53, (__CVBuffer *)1, v21);
      v40 = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v37, (__CVBuffer *)1, v39);
      if (a4 >= 2)
      {
        if (v40 >= v36)
          v41 = v36;
        else
          v41 = v40;
        v42 = v40;
        v43 = 1;
        do
        {
          memcpy(v38, v32, v41);
          v32 += v36;
          v38 += v42;
        }
        while (v35 > v43++);
      }
    }
    v50 = *v48;
    v51 = 1;
    v45 = WTF::fastMalloc((WTF *)0x38);
    WebCore::VideoFrameCV::VideoFrameCV(v45, 0, 0x100989680, 0, 0, &v52, (uint64_t)&v50);
    *a8 = v45;
    v18 = v52;
LABEL_30:
    WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(v53, 0, v21);
    v52 = 0;
    if (!v18)
      return;
    goto LABEL_31;
  }
  *a8 = 0;
  v52 = 0;
LABEL_31:
  CFRelease(v18);
}

void sub_195299304(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, WebCore *a16)
{
  WTF *v16;
  unint64_t v18;

  WTF::fastFree(v16, a2);
  WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(a16, 0, v18);
  if (a15)
    CFRelease(a15);
  _Unwind_Resume(a1);
}

void WebCore::VideoFrame::createRGBA(__CFAllocator *a1@<X2>, uint64_t a2@<X0>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, __CVBuffer **a6@<X6>, uint64_t *a7@<X8>)
{
  int v12;
  unint64_t v13;
  WebCore *v14;
  BOOL v15;
  unint64_t v17;
  uint64_t BaseAddressOfPlane;
  unint64_t v19;
  unint64_t BytesPerRowOfPlane;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  WebCore *v32;
  WebCore *v33;

  v33 = 0;
  v12 = WebCore::softLinkCoreVideoCVPixelBufferCreate((WebCore *)*MEMORY[0x1E0C9AE00], a1, a3, 0x20uLL, 0, (const __CFDictionary *)&v33, a6);
  v14 = v33;
  if (v12)
    v15 = 1;
  else
    v15 = v33 == 0;
  if (v15)
  {
    *a7 = 0;
    return;
  }
  v32 = v33;
  if (WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress(v33, 0, v13))
  {
    *a7 = 0;
LABEL_22:
    CFRelease(v14);
    return;
  }
  BaseAddressOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v33, 0, v17);
  BytesPerRowOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v33, 0, v19);
  if (a3)
  {
    LODWORD(v21) = 0;
    v22 = *(_QWORD *)(a4 + 40);
    do
    {
      if (BytesPerRowOfPlane >= v22)
        v23 = v22;
      else
        v23 = BytesPerRowOfPlane;
      if (v23)
      {
        v24 = 0;
        v25 = a2 + 1;
        do
        {
          v26 = (_BYTE *)(BaseAddressOfPlane + v24);
          *v26 = *(_BYTE *)(v25 + v24 + 2);
          v26[1] = *(_BYTE *)(a2 + v24);
          v26[2] = *(_BYTE *)(v25 + v24);
          v26[3] = *(_BYTE *)(v25 + v24 + 1);
          v24 += 4;
          v22 = *(_QWORD *)(a4 + 40);
          if (BytesPerRowOfPlane >= v22)
            v27 = *(_QWORD *)(a4 + 40);
          else
            v27 = BytesPerRowOfPlane;
        }
        while (v24 < v27);
      }
      a2 += v22;
      BaseAddressOfPlane += BytesPerRowOfPlane;
      v21 = (v21 + 1);
    }
    while (v21 < a3);
  }
  v30 = *a5;
  v31 = 1;
  v28 = WTF::fastMalloc((WTF *)0x38);
  WebCore::VideoFrameCV::VideoFrameCV(v28, 0, 0x100989680, 0, 0, &v32, (uint64_t)&v30);
  *a7 = v28;
  WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(v33, 0, v29);
  v14 = v32;
  if (v32)
    goto LABEL_22;
}

void sub_19529951C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, WebCore *a12)
{
  WTF *v12;
  unint64_t v14;

  WTF::fastFree(v12, a2);
  WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(a12, 0, v14);
  if (a11)
    CFRelease(a11);
  _Unwind_Resume(a1);
}

void WebCore::VideoFrame::createBGRA(__CFAllocator *a1@<X2>, char *a2@<X0>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, __CVBuffer **a6@<X6>, uint64_t *a7@<X8>)
{
  int v12;
  unint64_t v13;
  WebCore *v14;
  BOOL v15;
  unint64_t v17;
  WebCore *v18;
  uint64_t v19;
  char *BaseAddressOfPlane;
  unint64_t v21;
  unsigned int BytesPerRowOfPlane;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  WebCore *v32;
  WebCore *v33;

  v33 = 0;
  v12 = WebCore::softLinkCoreVideoCVPixelBufferCreate((WebCore *)*MEMORY[0x1E0C9AE00], a1, a3, 0x42475241uLL, 0, (const __CFDictionary *)&v33, a6);
  v14 = v33;
  if (v12)
    v15 = 1;
  else
    v15 = v33 == 0;
  if (v15)
  {
    *a7 = 0;
    return;
  }
  v32 = v33;
  if (WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress(v33, 0, v13))
  {
    *a7 = 0;
LABEL_16:
    CFRelease(v14);
    return;
  }
  v18 = v33;
  v19 = *(_QWORD *)(a4 + 40);
  BaseAddressOfPlane = (char *)WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v33, 0, v17);
  BytesPerRowOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v18, 0, v21);
  if (a3)
  {
    v23 = v19;
    if (BytesPerRowOfPlane >= v19)
      v24 = v19;
    else
      v24 = BytesPerRowOfPlane;
    v25 = BytesPerRowOfPlane;
    v26 = 1;
    do
    {
      memcpy(BaseAddressOfPlane, a2, v24);
      a2 += v23;
      BaseAddressOfPlane += v25;
      v27 = v26++;
    }
    while (v27 < a3);
  }
  v30 = *a5;
  v31 = 1;
  v28 = WTF::fastMalloc((WTF *)0x38);
  WebCore::VideoFrameCV::VideoFrameCV(v28, 0, 0x100989680, 0, 0, &v32, (uint64_t)&v30);
  *a7 = v28;
  WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(v33, 0, v29);
  v14 = v32;
  if (v32)
    goto LABEL_16;
}

void sub_195299714(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, WebCore *a12)
{
  WTF *v12;
  unint64_t v14;

  WTF::fastFree(v12, a2);
  WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(a12, 0, v14);
  if (a11)
    CFRelease(a11);
  _Unwind_Resume(a1);
}

void WebCore::VideoFrame::createI420(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t *a5@<X7>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore *PixelBufferFromI420Buffer;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 32) + v8 * a1;
  v10 = *(_QWORD *)(a3 + 40);
  v11 = v9 + *(_QWORD *)(a3 + 32);
  v12 = *(_QWORD *)(a4 + 40);
  v16 = *(_QWORD *)(a2 + 32);
  v17 = v8;
  v18 = v9;
  v19 = v10;
  v20 = v11 + v10 * ((unint64_t)(a1 + 1) >> 1);
  v21 = v12;
  PixelBufferFromI420Buffer = (WebCore *)webrtc::createPixelBufferFromI420Buffer();
  if (PixelBufferFromI420Buffer)
  {
    v14 = *a5;
    v15 = 1;
    v13 = WTF::fastMalloc((WTF *)0x38);
    WebCore::VideoFrameCV::VideoFrameCV(v13, 0, 0x100989680, 0, 0, &PixelBufferFromI420Buffer, (uint64_t)&v14);
    *a6 = v13;
    if (PixelBufferFromI420Buffer)
      CFRelease(PixelBufferFromI420Buffer);
  }
  else
  {
    *a6 = 0;
  }
}

void sub_195299830(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  uint64_t v3;

  WTF::fastFree(v2, a2);
  if (*(_QWORD *)(v3 - 40))
    CFRelease(*(CFTypeRef *)(v3 - 40));
  _Unwind_Resume(a1);
}

void WebCore::VideoFrame::createI420A(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WebCore *PixelBufferFromI420ABuffer;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a3 + 40);
  v11 = (unint64_t)(a1 + 1) >> 1;
  v12 = v8 + v9 * a1 + *(_QWORD *)(a3 + 32) + v10 * v11;
  v13 = *(_QWORD *)(a4 + 40);
  v14 = *(_QWORD *)(a5 + 40);
  v15 = v12 + *(_QWORD *)(a4 + 32) + v13 * v11;
  v19 = v8;
  v20 = v9;
  v21 = v8 + v9 * a1;
  v22 = v10;
  v23 = v12;
  v24 = v13;
  v25 = v15;
  v26 = v14;
  PixelBufferFromI420ABuffer = (WebCore *)webrtc::createPixelBufferFromI420ABuffer();
  if (PixelBufferFromI420ABuffer)
  {
    v17 = *a7;
    v18 = 1;
    v16 = WTF::fastMalloc((WTF *)0x38);
    WebCore::VideoFrameCV::VideoFrameCV(v16, 0, 0x100989680, 0, 0, &PixelBufferFromI420ABuffer, (uint64_t)&v17);
    *a6 = v16;
    if (PixelBufferFromI420ABuffer)
      CFRelease(PixelBufferFromI420ABuffer);
  }
  else
  {
    *a6 = 0;
  }
}

void sub_195299934(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  uint64_t v3;

  WTF::fastFree(v2, a2);
  if (*(_QWORD *)(v3 - 40))
    CFRelease(*(CFTypeRef *)(v3 - 40));
  _Unwind_Resume(a1);
}

WTF *WebCore::VideoFrame::copyTo(uint64_t a1, uint64_t a2, unint64_t a3, int a4, unsigned int *a5, uint64_t *a6)
{
  unsigned int v9;
  _OWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  WebCore *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  WebCore *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  NSObject *v22;
  WTF *v23;
  WTF *v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  WebCore *v30;
  WTF *result;
  void *v32;
  uint64_t v33;
  WebCore *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  _OWORD *v38;
  WebCore *v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  unint64_t v43;
  uint64_t BaseAddressOfPlane;
  unint64_t v45;
  uint64_t v46;
  uint64_t WidthOfPlane;
  unint64_t v48;
  uint64_t BytesPerRowOfPlane;
  WTF *v50;
  uint64_t v51;
  uint64_t (**v52)();
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (**v63)();
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  WTF *v72;
  __int128 v73;
  NSObject *v74;
  const char *v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  WTF *v79[2];
  __int128 v80;
  __int128 v81;
  WTF *v82;
  WTF *v83;
  __int128 v84;
  uint8_t buf[8];
  WTF *v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  switch(a4)
  {
    case 0:
      v9 = a5[3];
      if (!v9)
        goto LABEL_72;
      if (v9 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19529A118);
      }
      if (v9 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19529A120);
      }
      v10 = *(_OWORD **)a5;
      v11 = (uint64_t *)(*(_QWORD *)a5 + 48);
      v12 = (uint64_t *)(*(_QWORD *)a5 + 96);
      v13 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      WebCore::copyI420OrI420A((WTF **)buf, a2, a3, v10, v11, v12, 0, v13);
      v79[0] = *(WTF **)buf;
      v79[1] = v86;
      LOBYTE(v80) = 1;
      v14 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v14 + 16))(v14, v79);
      goto LABEL_18;
    case 1:
      v25 = a5[3];
      if (!v25)
      {
        __break(0xC471u);
        JUMPOUT(0x19529A138);
      }
      if (v25 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19529A140);
      }
      if (v25 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19529A148);
      }
      if (v25 == 3)
      {
LABEL_72:
        __break(0xC471u);
        JUMPOUT(0x19529A110);
      }
      v26 = *(_QWORD **)a5;
      v27 = (uint64_t *)(*(_QWORD *)a5 + 48);
      v28 = (uint64_t *)(*(_QWORD *)a5 + 96);
      v29 = (uint64_t *)(*(_QWORD *)a5 + 144);
      v30 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      WebCore::copyI420OrI420A((WTF **)buf, a2, a3, v26, v27, v28, v29, v30);
      v79[0] = *(WTF **)buf;
      v79[1] = v86;
      LOBYTE(v80) = 1;
      v14 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v14 + 16))(v14, v79);
      goto LABEL_18;
    case 4:
      v15 = a5[3];
      if (!v15)
      {
        __break(0xC471u);
        JUMPOUT(0x19529A128);
      }
      if (v15 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19529A130);
      }
      v16 = *(_QWORD **)a5;
      v17 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v19 = WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress(v17, (__CVBuffer *)1, v18);
      if (!v19)
      {
        BaseAddressOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v17, 0, v20);
        if (BaseAddressOfPlane)
        {
          v46 = WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v17, (__CVBuffer *)1, v43);
          if (v46)
          {
            WidthOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetWidthOfPlane(v17, 0, v45);
            BytesPerRowOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v17, 0, v48);
            v50 = (WTF *)v16[1];
            if (!v50)
              v50 = (WTF *)WidthOfPlane;
            *(_QWORD *)buf = *v16;
            v86 = v50;
            v51 = WTF::fastMalloc((WTF *)0x10);
            v52 = off_1E3350BC0;
            *(_QWORD *)v51 = off_1E3350BC0;
            if (v16[3])
            {
              v78 = v46;
              v53 = 0;
              v54 = *v16;
              v55 = v16[5];
              v56 = BaseAddressOfPlane + v16[4] + v16[2] * BytesPerRowOfPlane;
              do
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, a2 + v54, v56, v55);
                v54 += v16[1];
                ++v53;
                v56 += BytesPerRowOfPlane;
              }
              while (v53 < v16[3]);
              v52 = *(uint64_t (***)())v51;
              v46 = v78;
            }
            ((void (*)(uint64_t))v52[1])(v51);
            v58 = WebCore::softLinkCoreVideoCVPixelBufferGetWidthOfPlane(v17, (__CVBuffer *)1, v57);
            v60 = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v17, (__CVBuffer *)1, v59);
            v61 = v16[7];
            if (!v61)
              v61 = v58;
            *(_QWORD *)&v84 = v16[6];
            *((_QWORD *)&v84 + 1) = v61;
            v62 = WTF::fastMalloc((WTF *)0x10);
            v63 = off_1E3350BE8;
            *(_QWORD *)v62 = off_1E3350BE8;
            if (v16[9])
            {
              v64 = 0;
              v65 = v16[6];
              v66 = v16[11];
              v67 = v46 + v16[10] + v16[8] * v60;
              do
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, a2 + v65, v67, v66);
                v65 += v16[7];
                ++v64;
                v67 += v60;
              }
              while (v64 < v16[9]);
              v63 = *(uint64_t (***)())v62;
            }
            ((void (*)(uint64_t))v63[1])(v62);
            v82 = 0;
            v83 = 0;
            v68 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v82, 1uLL, (unint64_t)buf);
            *((_OWORD *)v82 + HIDWORD(v83)) = *(_OWORD *)v68;
            v70 = (HIDWORD(v83) + 1);
            HIDWORD(v83) = v70;
            if ((_DWORD)v70 == (_DWORD)v83)
            {
              v71 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v82, v70 + 1, (unint64_t)&v84);
              v70 = HIDWORD(v83);
              v72 = v82;
              v73 = *(_OWORD *)v71;
            }
            else
            {
              v72 = v82;
              v73 = v84;
            }
            *((_OWORD *)v72 + v70) = v73;
            ++HIDWORD(v83);
            goto LABEL_54;
          }
          v74 = qword_1ECE7CD60;
          if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
          {
LABEL_51:
            v82 = 0;
            v83 = 0;
LABEL_54:
            WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(v17, (__CVBuffer *)1, v69);
            v23 = v82;
            v24 = v83;
            goto LABEL_55;
          }
          *(_WORD *)buf = 0;
          v75 = "VideoFrame::copyTo plane UV is null";
        }
        else
        {
          v74 = qword_1ECE7CD60;
          if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
            goto LABEL_51;
          *(_WORD *)buf = 0;
          v75 = "VideoFrame::copyTo plane Y is null";
        }
        _os_log_error_impl(&dword_1940B8000, v74, OS_LOG_TYPE_ERROR, v75, buf, 2u);
        goto LABEL_51;
      }
      v21 = v19;
      v22 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v21;
        _os_log_error_impl(&dword_1940B8000, v22, OS_LOG_TYPE_ERROR, "VideoFrame::copyTo lock failed: %d", buf, 8u);
      }
      v23 = 0;
      v24 = 0;
LABEL_55:
      v82 = 0;
      v83 = 0;
      v79[0] = v23;
      v79[1] = v24;
      LOBYTE(v80) = 1;
      v76 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v76 + 16))(v76, v79);
      (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
      if ((_BYTE)v80)
      {
        v77 = v79[0];
        if (v79[0])
        {
          v79[0] = 0;
          LODWORD(v79[1]) = 0;
          WTF::fastFree(v77, v32);
        }
      }
      result = v82;
      if (v82)
      {
        v82 = 0;
        LODWORD(v83) = 0;
        return (WTF *)WTF::fastFree(result, v32);
      }
      return result;
    case 5:
      v80 = 0u;
      v81 = 0u;
      *(_OWORD *)v79 = 0u;
      if (a5[3])
      {
        v33 = *(_QWORD *)a5;
        *(_OWORD *)v79 = *(_OWORD *)*(_QWORD *)a5;
        v80 = *(_OWORD *)(v33 + 16);
        v81 = *(_OWORD *)(v33 + 32);
      }
      v34 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v35 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v35 = off_1E3350C88;
      *(_QWORD *)buf = v35;
      WebCore::copyRGBData((uint64_t)&v84, a2, a3, (uint64_t *)v79, v34, buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = (WTF *)*((_QWORD *)&v84 + 1);
      *(_QWORD *)buf = v84;
      v84 = 0uLL;
      v86 = v36;
      v87 = 1;
      v37 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v37 + 16))(v37, buf);
      goto LABEL_27;
    case 7:
      v80 = 0u;
      v81 = 0u;
      *(_OWORD *)v79 = 0u;
      if (a5[3])
      {
        v38 = *(_OWORD **)a5;
        *(_OWORD *)v79 = *(_OWORD *)*(_QWORD *)a5;
        v80 = v38[1];
        v81 = v38[2];
      }
      v39 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v40 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v40 = off_1E3350CB0;
      *(_QWORD *)buf = v40;
      WebCore::copyRGBData((uint64_t)&v84, a2, a3, (uint64_t *)v79, v39, buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      v41 = (WTF *)*((_QWORD *)&v84 + 1);
      *(_QWORD *)buf = v84;
      v84 = 0uLL;
      v86 = v41;
      v87 = 1;
      v37 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v37 + 16))(v37, buf);
LABEL_27:
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      if (v87)
      {
        v42 = *(WTF **)buf;
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)buf = 0;
          LODWORD(v86) = 0;
          WTF::fastFree(v42, v32);
        }
      }
      result = (WTF *)v84;
      if (!(_QWORD)v84)
        return result;
      *(_QWORD *)&v84 = 0;
      DWORD2(v84) = 0;
      return (WTF *)WTF::fastFree(result, v32);
    default:
      LOBYTE(v79[0]) = 0;
      LOBYTE(v80) = 0;
      v14 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v14 + 16))(v14, v79);
LABEL_18:
      result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      if (!(_BYTE)v80)
        return result;
      result = v79[0];
      if (!v79[0])
        return result;
      v79[0] = 0;
      LODWORD(v79[1]) = 0;
      return (WTF *)WTF::fastFree(result, v32);
  }
}

void sub_19529A154(_Unwind_Exception *a1, int a2, unint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, uint64_t a20,int a21,WTF *a22,int a23,int a24,char a25)
{
  WebCore *v25;

  WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(v25, (__CVBuffer *)1, a3);
  _Unwind_Resume(a1);
}

void WebCore::copyI420OrI420A(WTF **a1, uint64_t a2, unint64_t a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, WebCore *this)
{
  WebCore *v8;
  int v16;
  unint64_t v17;
  int v18;
  NSObject *v19;
  unint64_t v20;
  uint64_t BaseAddressOfPlane;
  unint64_t v22;
  uint64_t v23;
  uint64_t WidthOfPlane;
  unint64_t v25;
  uint64_t BytesPerRowOfPlane;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)();
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (***v46)();
  uint64_t (**v47)();
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  unint64_t v51;
  const char *v52;
  char *v53;
  void *v54;
  uint64_t v55;
  char *v56;
  WTF *v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  WTF *v61;
  __int128 v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (**v77)();
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  WTF *v84;
  __int128 v85;
  NSObject *v86;
  WTF *v87;
  WTF *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF **v92;
  WebCore *v93;
  uint64_t *v94;
  uint8_t v95[16];
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint8_t buf[8];
  uint64_t v103;
  uint64_t v104;

  v8 = this;
  v104 = *MEMORY[0x1E0C80C00];
  v16 = WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress(this, (__CVBuffer *)1, a3);
  if (!v16)
  {
    v94 = a7;
    BaseAddressOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v8, 0, v17);
    if (BaseAddressOfPlane)
    {
      v23 = WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v8, (__CVBuffer *)1, v20);
      if (v23)
      {
        v89 = a3;
        v92 = a1;
        v93 = v8;
        WidthOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetWidthOfPlane(v8, 0, v22);
        v91 = v23;
        BytesPerRowOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v8, 0, v25);
        v27 = a4[1];
        if (!v27)
          v27 = WidthOfPlane;
        *(_QWORD *)buf = *a4;
        v103 = v27;
        v28 = WTF::fastMalloc((WTF *)0x10);
        v29 = off_1E3350C10;
        *(_QWORD *)v28 = off_1E3350C10;
        if (a4[3])
        {
          v30 = 0;
          v31 = *a4;
          v32 = a4[5];
          v33 = BaseAddressOfPlane + a4[4] + a4[2] * BytesPerRowOfPlane;
          do
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, a2 + v31, v33, v32);
            v31 += a4[1];
            ++v30;
            v33 += BytesPerRowOfPlane;
          }
          while (v30 < a4[3]);
          v29 = *(uint64_t (***)())v28;
          v8 = v93;
        }
        ((void (*)(uint64_t))v29[1])(v28);
        v35 = WebCore::softLinkCoreVideoCVPixelBufferGetWidthOfPlane(v8, (__CVBuffer *)1, v34);
        v37 = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v8, (__CVBuffer *)1, v36);
        v39 = *a5;
        v38 = a5[1];
        if (v38)
          v40 = a5[1];
        else
          v40 = v35 >> 1;
        *(_QWORD *)&v101 = *a5;
        *((_QWORD *)&v101 + 1) = v40;
        v41 = *a6;
        if (a6[1])
          v42 = a6[1];
        else
          v42 = v35 >> 1;
        *(_QWORD *)&v100 = *a6;
        *((_QWORD *)&v100 + 1) = v42;
        v43 = a5[3];
        v90 = a5[2];
        v44 = a5[4];
        v45 = a5[5];
        v99 = a2 + v39;
        v98 = a2 + v41;
        v46 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x28);
        v47 = off_1E3350C38;
        *v46 = off_1E3350C38;
        v46[1] = (uint64_t (**)())&v99;
        v46[2] = (uint64_t (**)())&v98;
        v46[3] = (uint64_t (**)())v40;
        v46[4] = (uint64_t (**)())v42;
        if (v43)
        {
          v48 = 2 * v45;
          v49 = v91 + 2 * v44 + v90 * v37;
          v8 = v93;
          do
          {
            ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))(*v46)[2])(v46, v39, v49, v48);
            v39 += v38;
            v49 += v37;
            --v43;
          }
          while (v43);
          v47 = *v46;
        }
        else
        {
          v8 = v93;
        }
        ((void (*)(uint64_t (***)()))v47[1])(v46);
        v96 = 0;
        v97 = 0;
        v53 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v96, 1uLL, (unint64_t)buf);
        *((_OWORD *)v96 + HIDWORD(v97)) = *(_OWORD *)v53;
        v55 = (HIDWORD(v97) + 1);
        HIDWORD(v97) = v55;
        if ((_DWORD)v55 == (_DWORD)v97)
        {
          v56 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v96, v55 + 1, (unint64_t)&v101);
          v55 = HIDWORD(v97);
          v57 = v96;
          v58 = *(_OWORD *)v56;
        }
        else
        {
          v57 = v96;
          v58 = v101;
        }
        *((_OWORD *)v57 + v55) = v58;
        v59 = (HIDWORD(v97) + 1);
        HIDWORD(v97) = v59;
        if ((_DWORD)v59 == (_DWORD)v97)
        {
          v60 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v96, v59 + 1, (unint64_t)&v100);
          v59 = HIDWORD(v97);
          v61 = v96;
          v62 = *(_OWORD *)v60;
        }
        else
        {
          v61 = v96;
          v62 = v100;
        }
        *((_OWORD *)v61 + v59) = v62;
        v63 = ++HIDWORD(v97);
        if (!v94)
          goto LABEL_52;
        v65 = WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(v8, (__CVBuffer *)2, v51);
        if (v65)
        {
          v66 = WebCore::softLinkCoreVideoCVPixelBufferGetWidthOfPlane(v8, (__CVBuffer *)2, v64);
          v68 = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(v8, (__CVBuffer *)2, v67);
          v69 = *v94;
          v70 = v94[1];
          if (!v70)
            v70 = v66;
          *(_QWORD *)v95 = *v94;
          *(_QWORD *)&v95[8] = v70;
          v71 = v94[3];
          if (is_mul_ok(v70, v71))
          {
            v72 = v70 * v71;
            v73 = __CFADD__(v69, v72);
            v74 = v69 + v72;
            if (!v73 && v74 <= v89)
            {
              v75 = v68;
              v76 = WTF::fastMalloc((WTF *)0x10);
              v77 = off_1E3350C60;
              *(_QWORD *)v76 = off_1E3350C60;
              if (v94[3])
              {
                v78 = 0;
                v79 = *v94;
                v80 = v94[5];
                v81 = v65 + v94[4] + v94[2] * v75;
                do
                {
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v76 + 16))(v76, a2 + v79, v81, v80);
                  v79 += v94[1];
                  ++v78;
                  v81 += v75;
                }
                while (v78 < v94[3]);
                v77 = *(uint64_t (***)())v76;
                v8 = v93;
              }
              ((void (*)(uint64_t))v77[1])(v76);
              v82 = HIDWORD(v97);
              if (HIDWORD(v97) == (_DWORD)v97)
              {
                v83 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v96, HIDWORD(v97) + 1, (unint64_t)v95);
                v82 = HIDWORD(v97);
                v84 = v96;
                v85 = *(_OWORD *)v83;
              }
              else
              {
                v84 = v96;
                v85 = *(_OWORD *)v95;
              }
              *((_OWORD *)v84 + v82) = v85;
              v63 = HIDWORD(v97) + 1;
LABEL_52:
              v87 = v96;
              v96 = 0;
              *v92 = v87;
              HIDWORD(v97) = 0;
              *((_DWORD *)v92 + 2) = v97;
              *((_DWORD *)v92 + 3) = v63;
LABEL_53:
              v88 = v96;
              if (v96)
              {
                v96 = 0;
                LODWORD(v97) = 0;
                WTF::fastFree(v88, v54);
              }
              goto LABEL_55;
            }
          }
        }
        else
        {
          v86 = qword_1ECE7CD60;
          if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v95 = 0;
            _os_log_error_impl(&dword_1940B8000, v86, OS_LOG_TYPE_ERROR, "VideoFrame::copyTo plane A is null", v95, 2u);
          }
        }
        *v92 = 0;
        v92[1] = 0;
        goto LABEL_53;
      }
      v50 = qword_1ECE7CD60;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
LABEL_26:
        *a1 = 0;
        a1[1] = 0;
LABEL_55:
        WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(v8, (__CVBuffer *)1, v51);
        return;
      }
      *(_WORD *)buf = 0;
      v52 = "VideoFrame::copyTo plane UV is null";
    }
    else
    {
      v50 = qword_1ECE7CD60;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
        goto LABEL_26;
      *(_WORD *)buf = 0;
      v52 = "VideoFrame::copyTo plane Y is null";
    }
    _os_log_error_impl(&dword_1940B8000, v50, OS_LOG_TYPE_ERROR, v52, buf, 2u);
    goto LABEL_26;
  }
  v18 = v16;
  v19 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v18;
    _os_log_error_impl(&dword_1940B8000, v19, OS_LOG_TYPE_ERROR, "VideoFrame::copyTo lock failed: %d", buf, 8u);
  }
  *a1 = 0;
  a1[1] = 0;
}

void sub_19529A904(_Unwind_Exception *a1, void *a2, unint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebCore *a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18)
{
  if (a17)
    WTF::fastFree(a17, a2);
  WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(a13, (__CVBuffer *)1, a3);
  _Unwind_Resume(a1);
}

void WebCore::copyRGBData(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, WebCore *this, _QWORD *a6)
{
  int v11;
  unint64_t v12;
  int v13;
  NSObject *v14;
  __CVBuffer *v15;
  uint64_t BaseAddressOfPlane;
  uint64_t Width;
  __CVBuffer *v18;
  uint64_t BytesPerRow;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  NSObject *v27;
  _QWORD v28[4];

  v28[3] = *MEMORY[0x1E0C80C00];
  v11 = WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress(this, (__CVBuffer *)1, a3);
  if (v11)
  {
    v13 = v11;
    v14 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v28[0]) = 67109120;
      HIDWORD(v28[0]) = v13;
      _os_log_error_impl(&dword_1940B8000, v14, OS_LOG_TYPE_ERROR, "VideoFrame::copyTo lock failed: %d", (uint8_t *)v28, 8u);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    BaseAddressOfPlane = WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(this, 0, v12);
    if (BaseAddressOfPlane)
    {
      Width = WebCore::softLinkCoreVideoCVPixelBufferGetWidth(this, v15);
      BytesPerRow = WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRow(this, v18);
      v21 = *a4;
      v20 = a4[1];
      if (!v20)
        v20 = 4 * Width;
      v28[0] = *a4;
      v28[1] = v20;
      if (a4[3])
      {
        v22 = BytesPerRow;
        v23 = 0;
        v24 = a4[5];
        v25 = BaseAddressOfPlane + a4[4] + a4[2] * BytesPerRow;
        do
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, a2 + v21, v25, v24);
          v21 += a4[1];
          ++v23;
          v25 += v22;
        }
        while (v23 < a4[3]);
      }
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_OWORD *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *(_OWORD *)WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, 1uLL, (unint64_t)v28);
    }
    else
    {
      v27 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v28[0]) = 0;
        _os_log_error_impl(&dword_1940B8000, v27, OS_LOG_TYPE_ERROR, "VideoFrame::copyTo plane A is null", (uint8_t *)v28, 2u);
      }
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(this, (__CVBuffer *)1, v26);
  }
}

void sub_19529ABE0(_Unwind_Exception *a1, void *a2, unint64_t a3)
{
  WebCore *v3;
  uint64_t v4;
  WTF *v6;

  v6 = *(WTF **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)v4 = 0;
    *(_DWORD *)(v4 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(v3, (__CVBuffer *)1, a3);
  _Unwind_Resume(a1);
}

uint64_t WebCore::VideoFrame::paintInContext(WebCore::VideoFrame *this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3, const WebCore::ImageOrientation *a4)
{
  uint64_t v7;
  WebCore::PixelBufferConformerCV *v8;
  const void *v9;
  WebCore *v10;
  uint64_t IdentifierInternal;
  void *v12;
  CGImageRef v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  const void *v26;
  uint64_t v28;
  CGImageRef image;
  float v30;
  float v31;
  uint64_t v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  if (WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once, &__block_literal_global_13_3);
  v32 = WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::constantCoreVideokCVPixelBufferPixelFormatTypeKey;
  v33[0] = &unk_1E349D828;
  v7 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v33, &v32, 1);
  v8 = (WebCore::PixelBufferConformerCV *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v8 = 0;
  image = 0;
  WebCore::softLinkVideoToolboxVTPixelBufferConformerCreateWithAttributes(*MEMORY[0x1E0C9AE00], v7, &image);
  v9 = *(const void **)v8;
  *(_QWORD *)v8 = image;
  if (v9)
    CFRelease(v9);
  v10 = (WebCore *)(*(uint64_t (**)(WebCore::VideoFrame *))(*(_QWORD *)this + 56))(this);
  WebCore::PixelBufferConformerCV::createImageFromPixelBuffer(v8, v10, &image);
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x19529AEF0);
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v13 = image;
  if (image)
  {
    v14 = IdentifierInternal;
    if (CGImageGetWidth(image) >> 31 || CGImageGetHeight(v13) >> 31)
    {
      CFRelease(v13);
      goto LABEL_25;
    }
    v15 = (_QWORD *)operator new();
    *v15 = &off_1E340E810;
    v15[1] = v13;
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
    v17 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v17 = 0;
    *(_OWORD *)(v17 + 8) = xmmword_19689B170;
    *(_QWORD *)(v17 + 24) = v16;
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = v14;
    v16[5] = 1;
    *v16 = off_1E340E858;
    v16[1] = v17;
    v16[6] = v15;
    v18 = (*(uint64_t (**)(_QWORD *))(*v15 + 24))(v15);
    image = 0;
    v30 = (float)(int)v18;
    v31 = (float)SHIDWORD(v18);
    WebCore::GraphicsContext::drawNativeImage(a2, (uint64_t)v16, (uint64_t)a3, (float32x2_t *)&image, 4641);
    v19 = v16[1];
    if (__ldaxr((unsigned __int8 *)v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
      goto LABEL_13;
    }
    MEMORY[0x19AEA534C](v19);
LABEL_13:
    v21 = *(_QWORD *)(v19 + 8);
    v22 = v21 - 1;
    *(_QWORD *)(v19 + 8) = v21 - 1;
    if (v21 == 1)
    {
      v28 = *(_QWORD *)(v19 + 16);
      v23 = *(_QWORD *)(v19 + 24);
      *(_QWORD *)(v19 + 24) = 0;
      v24 = v28 != 0;
    }
    else
    {
      v23 = 0;
      v24 = 1;
    }
    v25 = __ldxr((unsigned __int8 *)v19);
    if (v25 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v19))
      {
        if (v22)
          goto LABEL_25;
LABEL_21:
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        if (!v24)
          WTF::fastFree((WTF *)v19, v12);
        goto LABEL_25;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
    if (v22)
      goto LABEL_25;
    goto LABEL_21;
  }
LABEL_25:
  v26 = *(const void **)v8;
  *(_QWORD *)v8 = 0;
  if (v26)
    CFRelease(v26);
  return WTF::fastFree(v8, v12);
}

void sub_19529AF18(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  WTF *v10;
  const void *v12;

  if (cf)
    CFRelease(cf);
  v12 = *(const void **)v10;
  *(_QWORD *)v10 = 0;
  if (v12)
    CFRelease(v12);
  WTF::fastFree(v10, a2);
  _Unwind_Resume(a1);
}

void WebCore::VideoFrame::createFromPixelBuffer(uint64_t *a1@<X0>, __CVBuffer ***a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __CVBuffer **v9;
  char v10;
  CFTypeRef cf;
  const void *v12;

  v5 = *a1;
  v7 = *(_QWORD *)(*a1 + 32);
  v6 = *(_QWORD *)(*a1 + 40);
  *a1 = 0;
  v12 = 0;
  WebCore::softLinkCoreVideoCVPixelBufferCreateWithBytes((WebCore *)*MEMORY[0x1E0C9AE00], (const __CFAllocator *)(int)v7, v7 >> 32, 0x42475241uLL, v6, (void *)(4 * (int)v7), (unint64_t)WebCore::VideoFrame::createFromPixelBuffer(WTF::Ref<WebCore::PixelBuffer,WTF::RawPtrTraits<WebCore::PixelBuffer>,WTF::DefaultRefDerefTraits<WebCore::PixelBuffer>> &&,WebCore::PlatformVideoColorSpace &&)::$_0::__invoke, (void (*)(void *, const void *))v5, 0, (const __CFDictionary *)&v12, v9);
  cf = v12;
  if (v12)
  {
    v9 = *a2;
    v10 = 1;
    v8 = WTF::fastMalloc((WTF *)0x38);
    WebCore::VideoFrameCV::VideoFrameCV(v8, 0, 0x100989680, 0, 0, (WebCore **)&cf, (uint64_t)&v9);
    *a3 = v8;
    if (cf)
      CFRelease(cf);
  }
  else
  {
    if (*(_DWORD *)(v5 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    else
      --*(_DWORD *)(v5 + 8);
    *a3 = 0;
  }
}

void sub_19529B068(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  WTF *v13;

  WTF::fastFree(v13, a2);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

uint64_t WebCore::VideoFrameCV::VideoFrameCV(uint64_t a1, uint64_t a2, uint64_t a3, CVAttachmentMode *a4, __int16 a5, WebCore **a6, uint64_t a7)
{
  WebCore *v10;
  CVAttachmentMode *v11;
  uint64_t Attachment;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  __int16 v21;
  const void *v22;
  _BOOL4 v23;
  const void *v24;
  _BOOL4 v25;
  const void *v26;
  _BOOL4 v27;
  const void *v28;
  _BOOL4 v29;
  CVAttachmentMode *v30;
  uint64_t v31;
  const void *v32;
  _BOOL4 v33;
  const void *v34;
  _BOOL4 v35;
  const void *v36;
  _BOOL4 v37;
  const void *v38;
  _BOOL4 v39;
  const void *v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  _BOOL4 v45;
  _BOOL4 v46;
  uint64_t v47;
  WebCore *v48;
  uint64_t *v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  __int16 v55;
  _QWORD block[4];
  char v57;

  v10 = *a6;
  if (!*a6)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v13 = 0;
    v21 = 0;
    goto LABEL_163;
  }
  v54 = (char)a4;
  v55 = a5;
  v52 = a2;
  v53 = a3;
  if (WebCore::get_CoreVideo_kCVImageBufferColorPrimariesKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferColorPrimariesKey(void)::once, &__block_literal_global_67_0);
  Attachment = WebCore::softLinkCoreVideoCVBufferGetAttachment(v10, (__CVBuffer *)WebCore::get_CoreVideo_kCVImageBufferColorPrimariesKey(void)::constantCoreVideokCVImageBufferColorPrimariesKey, 0, a4);
  if (WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_ITU_R_709_2(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_ITU_R_709_2(void)::once, &__block_literal_global_61_0);
  if (!(Attachment | WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_ITU_R_709_2(void)::constantCoreVideokCVImageBufferColorPrimaries_ITU_R_709_2))
    goto LABEL_10;
  if (Attachment
    && WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_ITU_R_709_2(void)::constantCoreVideokCVImageBufferColorPrimaries_ITU_R_709_2)
  {
    if (CFEqual((CFTypeRef)Attachment, (CFTypeRef)WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_ITU_R_709_2(void)::constantCoreVideokCVImageBufferColorPrimaries_ITU_R_709_2))
    {
LABEL_10:
      v13 = 0;
      v14 = 256;
      goto LABEL_57;
    }
    if (WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::once != -1)
      dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::once, &__block_literal_global_58_3);
    v22 = (const void *)WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::constantCoreVideokCVImageBufferColorPrimaries_EBU_3213;
    v23 = WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::constantCoreVideokCVImageBufferColorPrimaries_EBU_3213 != 0;
  }
  else
  {
    if (WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::once != -1)
      dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::once, &__block_literal_global_58_3);
    v22 = (const void *)WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::constantCoreVideokCVImageBufferColorPrimaries_EBU_3213;
    v23 = WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::constantCoreVideokCVImageBufferColorPrimaries_EBU_3213 != 0;
    if (!(Attachment | WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::constantCoreVideokCVImageBufferColorPrimaries_EBU_3213))
      goto LABEL_22;
    if (!Attachment)
    {
LABEL_23:
      if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::once != -1)
        dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::once, &__block_literal_global_24_1);
      v24 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_DCI_P3;
      v25 = PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_DCI_P3 != 0;
      if (!(Attachment | PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_DCI_P3))
        goto LABEL_33;
      if (!Attachment)
        goto LABEL_34;
      goto LABEL_31;
    }
  }
  if (!v23)
    goto LABEL_23;
  if (CFEqual((CFTypeRef)Attachment, v22))
  {
LABEL_22:
    v14 = 256;
    v13 = 10;
    goto LABEL_57;
  }
  if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::once, &__block_literal_global_24_1);
  v24 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_DCI_P3;
  v25 = PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_DCI_P3 != 0;
LABEL_31:
  if (v25)
  {
    if (CFEqual((CFTypeRef)Attachment, v24))
    {
LABEL_33:
      v14 = 256;
      v13 = 8;
      goto LABEL_57;
    }
    if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::once, &__block_literal_global_30_1);
    v26 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_P3_D65;
    v27 = PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_P3_D65 != 0;
    goto LABEL_41;
  }
LABEL_34:
  if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::once, &__block_literal_global_30_1);
  v26 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_P3_D65;
  v27 = PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_P3_D65 != 0;
  if (!(Attachment | PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_P3_D65))
    goto LABEL_44;
LABEL_41:
  if (Attachment && v27)
  {
    if (CFEqual((CFTypeRef)Attachment, v26))
    {
LABEL_44:
      v14 = 256;
      v13 = 9;
      goto LABEL_57;
    }
    if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::once, &__block_literal_global_27);
    v28 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_ITU_R_2020;
    v29 = PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_ITU_R_2020 != 0;
  }
  else
  {
    if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::once, &__block_literal_global_27);
    v28 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_ITU_R_2020;
    v29 = PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_ITU_R_2020 != 0;
    if (!(Attachment | PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_ITU_R_2020))
      goto LABEL_55;
  }
  v13 = 0;
  v14 = 0;
  if (Attachment && v29)
  {
    if (CFEqual((CFTypeRef)Attachment, v28))
    {
LABEL_55:
      v14 = 256;
      v13 = 6;
      goto LABEL_57;
    }
    v13 = 0;
    v14 = 0;
  }
LABEL_57:
  v51 = v14;
  if (WebCore::get_CoreVideo_kCVImageBufferTransferFunctionKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferTransferFunctionKey(void)::once, &__block_literal_global_70_2);
  v31 = WebCore::softLinkCoreVideoCVBufferGetAttachment(v10, (__CVBuffer *)WebCore::get_CoreVideo_kCVImageBufferTransferFunctionKey(void)::constantCoreVideokCVImageBufferTransferFunctionKey, 0, v11);
  if (WebCore::get_CoreVideo_kCVImageBufferTransferFunction_ITU_R_709_2(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferTransferFunction_ITU_R_709_2(void)::once, &__block_literal_global_73);
  if (!(v31 | WebCore::get_CoreVideo_kCVImageBufferTransferFunction_ITU_R_709_2(void)::constantCoreVideokCVImageBufferTransferFunction_ITU_R_709_2))
    goto LABEL_65;
  if (v31
    && WebCore::get_CoreVideo_kCVImageBufferTransferFunction_ITU_R_709_2(void)::constantCoreVideokCVImageBufferTransferFunction_ITU_R_709_2)
  {
    if (CFEqual((CFTypeRef)v31, (CFTypeRef)WebCore::get_CoreVideo_kCVImageBufferTransferFunction_ITU_R_709_2(void)::constantCoreVideokCVImageBufferTransferFunction_ITU_R_709_2))
    {
LABEL_65:
      v19 = 0;
      v20 = 0x1000000;
      goto LABEL_130;
    }
    if (WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::once != -1)
      dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::once, &__block_literal_global_76_2);
    v32 = (const void *)WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferTransferFunction_SMPTE_240M_1995;
    v33 = WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferTransferFunction_SMPTE_240M_1995 != 0;
  }
  else
  {
    if (WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::once != -1)
      dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::once, &__block_literal_global_76_2);
    v32 = (const void *)WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferTransferFunction_SMPTE_240M_1995;
    v33 = WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferTransferFunction_SMPTE_240M_1995 != 0;
    if (!(v31 | WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferTransferFunction_SMPTE_240M_1995))
      goto LABEL_76;
    if (!v31)
    {
LABEL_77:
      if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::once != -1)
        dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::once, &__block_literal_global_45);
      v34 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ;
      v35 = PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ != 0;
      if (!(v31 | PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ))
        goto LABEL_87;
      if (!v31)
        goto LABEL_88;
      goto LABEL_85;
    }
  }
  if (!v33)
    goto LABEL_77;
  if (CFEqual((CFTypeRef)v31, v32))
  {
LABEL_76:
    v20 = 0x1000000;
    v19 = 327680;
    goto LABEL_130;
  }
  if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::once, &__block_literal_global_45);
  v34 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ;
  v35 = PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ != 0;
LABEL_85:
  if (v35)
  {
    if (CFEqual((CFTypeRef)v31, v34))
    {
LABEL_87:
      v20 = 0x1000000;
      v19 = 851968;
      goto LABEL_130;
    }
    if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::once, &__block_literal_global_48_1);
    v36 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_428_1;
    v37 = PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_428_1 != 0;
    goto LABEL_95;
  }
LABEL_88:
  if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::once, &__block_literal_global_48_1);
  v36 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_428_1;
  v37 = PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_428_1 != 0;
  if (!(v31 | PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_428_1))
    goto LABEL_98;
LABEL_95:
  if (v31 && v37)
  {
    if (CFEqual((CFTypeRef)v31, v36))
    {
LABEL_98:
      v20 = 0x1000000;
      v19 = 917504;
      goto LABEL_130;
    }
    if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::once, &__block_literal_global_39);
    v38 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_2100_HLG;
    v39 = PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_2100_HLG != 0;
  }
  else
  {
    if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::once, &__block_literal_global_39);
    v38 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_2100_HLG;
    v39 = PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_2100_HLG != 0;
    if (!(v31 | PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_2100_HLG))
      goto LABEL_109;
  }
  if (v31 && v39)
  {
    if (CFEqual((CFTypeRef)v31, v38))
    {
LABEL_109:
      v20 = 0x1000000;
      v19 = 983040;
      goto LABEL_130;
    }
    if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::once, &__block_literal_global_42_1);
    v40 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::constantCoreMediakCMFormatDescriptionTransferFunction_Linear;
    v41 = PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::constantCoreMediakCMFormatDescriptionTransferFunction_Linear != 0;
  }
  else
  {
    if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::once, &__block_literal_global_42_1);
    v40 = (const void *)PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::constantCoreMediakCMFormatDescriptionTransferFunction_Linear;
    v41 = PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::constantCoreMediakCMFormatDescriptionTransferFunction_Linear != 0;
    if (!(v31 | PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::constantCoreMediakCMFormatDescriptionTransferFunction_Linear))
      goto LABEL_120;
  }
  if (v31 && v41 && CFEqual((CFTypeRef)v31, v40))
  {
LABEL_120:
    v20 = 0x1000000;
    v19 = 393216;
    goto LABEL_130;
  }
  {
    if (!PAL::canLoad_CoreMedia_kCMFormatDescriptionTransferFunction_sRGB(void)::loaded)
    {
LABEL_129:
      v19 = 0;
      v20 = 0;
      goto LABEL_130;
    }
    v42 = PAL::constantCoreMediakCMFormatDescriptionTransferFunction_sRGB;
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
    block[3] = &__block_descriptor_tmp_1;
    v57 = 0;
    if (PAL::CoreMediaLibrary(BOOL)::once != -1)
      dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    v50 = (uint64_t *)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_sRGB");
    if (!v50)
    {
      v19 = 0;
      v20 = 0;
      PAL::canLoad_CoreMedia_kCMFormatDescriptionTransferFunction_sRGB(void)::loaded = 0;
      goto LABEL_130;
    }
    v42 = *v50;
    PAL::constantCoreMediakCMFormatDescriptionTransferFunction_sRGB = *v50;
    PAL::canLoad_CoreMedia_kCMFormatDescriptionTransferFunction_sRGB(void)::loaded = 1;
  }
  if (!(v31 | v42))
  {
LABEL_128:
    v20 = 0x1000000;
    v19 = 0x20000;
    goto LABEL_130;
  }
  v19 = 0;
  v20 = 0;
  if (v31 && v42)
  {
    if (CFEqual((CFTypeRef)v31, (CFTypeRef)v42))
      goto LABEL_128;
    goto LABEL_129;
  }
LABEL_130:
  if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrixKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrixKey(void)::once, &__block_literal_global_46_6);
  v43 = WebCore::softLinkCoreVideoCVBufferGetAttachment(v10, (__CVBuffer *)WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrixKey(void)::constantCoreVideokCVImageBufferYCbCrMatrixKey, 0, v30);
  if (PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::once, &__block_literal_global_51);
  v44 = (void *)PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionYCbCrMatrix_ITU_R_2020;
  if (!(v43 | PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionYCbCrMatrix_ITU_R_2020))
    goto LABEL_138;
  if (!v43
    || !PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionYCbCrMatrix_ITU_R_2020)
  {
    if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::once != -1)
      dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::once, &__block_literal_global_49_1);
    v44 = (void *)WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_709_2;
    v45 = WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_709_2 != 0;
    if (!(v43 | WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_709_2))
      goto LABEL_149;
    if (!v43)
      goto LABEL_150;
    goto LABEL_147;
  }
  if (!CFEqual((CFTypeRef)v43, (CFTypeRef)PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionYCbCrMatrix_ITU_R_2020))
  {
    if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::once != -1)
      dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::once, &__block_literal_global_49_1);
    v44 = (void *)WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_709_2;
    v45 = WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_709_2 != 0;
LABEL_147:
    if (v45)
    {
      if (CFEqual((CFTypeRef)v43, v44))
      {
LABEL_149:
        v17 = 0x100000000;
        goto LABEL_161;
      }
      if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::once != -1)
        dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::once, &__block_literal_global_55_0);
      v44 = (void *)WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferYCbCrMatrix_SMPTE_240M_1995;
      v46 = WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferYCbCrMatrix_SMPTE_240M_1995 != 0;
      goto LABEL_157;
    }
LABEL_150:
    if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::once != -1)
      dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::once, &__block_literal_global_55_0);
    v44 = (void *)WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferYCbCrMatrix_SMPTE_240M_1995;
    v46 = WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferYCbCrMatrix_SMPTE_240M_1995 != 0;
    if (!(v43 | WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferYCbCrMatrix_SMPTE_240M_1995))
    {
LABEL_160:
      v17 = 0x400000000;
      goto LABEL_161;
    }
LABEL_157:
    v18 = 0;
    v17 = 0;
    if (!v43 || !v46)
      goto LABEL_162;
    if (!CFEqual((CFTypeRef)v43, v44))
    {
      v18 = 0;
      v17 = 0;
      goto LABEL_162;
    }
    goto LABEL_160;
  }
LABEL_138:
  v17 = 0x700000000;
LABEL_161:
  v18 = 0x10000000000;
LABEL_162:
  v15 = (unint64_t)(WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType(v10, (__CVBuffer *)v44) != 875704438) << 48;
  v16 = 0x100000000000000;
  LOBYTE(a4) = v54;
  a5 = v55;
  a2 = v52;
  a3 = v53;
  v21 = v51;
LABEL_163:
  v47 = v16 | v15 | v17 & 0x700000000 | v18 & 0x10000000000 | *(_QWORD *)&v19 & 0xF0000 | v20 & 0x1000000 | (unint64_t)v13 | v21 & 0x100;
  if (*(_BYTE *)(a7 + 8))
    v47 = *(_QWORD *)a7;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 32) = (_BYTE)a4;
  *(_WORD *)(a1 + 34) = a5;
  *(_QWORD *)(a1 + 36) = v47;
  *(_QWORD *)a1 = off_1E3350AB8;
  v48 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 48) = v48;
  return a1;
}

void WebCore::VideoFrameCV::~VideoFrameCV(WebCore::VideoFrameCV *this)
{
  const void *v2;

  *(_QWORD *)this = off_1E3350AB8;
  v2 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    CFRelease(v2);
}

{
  const void *v2;

  *(_QWORD *)this = off_1E3350AB8;
  v2 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    CFRelease(v2);
}

void WebCore::VideoFrameCV::~VideoFrameCV(WebCore::VideoFrameCV *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E3350AB8;
  v3 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    CFRelease(v3);
  WTF::fastFree(this, a2);
}

float WebCore::VideoFrameCV::presentationSize(WebCore **this, __CVBuffer *a2)
{
  float Width;
  __CVBuffer *v4;

  Width = (float)(unint64_t)WebCore::softLinkCoreVideoCVPixelBufferGetWidth(this[6], a2);
  WebCore::softLinkCoreVideoCVPixelBufferGetHeight(this[6], v4);
  return Width;
}

uint64_t WebCore::VideoFrameCV::pixelFormat(WebCore **this)
{
  return WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType(this[6], (__CVBuffer *)WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType);
}

void WebCore::VideoFrameCV::setOwnershipIdentity(uint64_t a1, __CVBuffer *a2)
{
  uint64_t IOSurface;

  IOSurface = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface(*(WebCore **)(a1 + 48), a2);
  WebCore::IOSurface::setOwnershipIdentity(IOSurface, (int *)a2);
}

uint64_t WebCore::VideoFrameCV::pixelBuffer(WebCore::VideoFrameCV *this)
{
  return *((_QWORD *)this + 6);
}

__n128 WebCore::VideoFrameCV::clone@<Q0>(WebCore::VideoFrameCV *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __n128 v10;

  v4 = WTF::fastMalloc((WTF *)0x38);
  v10 = *((__n128 *)this + 1);
  v5 = *((_BYTE *)this + 32);
  v6 = *((_WORD *)this + 17);
  v7 = *((_QWORD *)this + 6);
  if (v7)
    CFRetain(*((CFTypeRef *)this + 6));
  v8 = *(_QWORD *)((char *)this + 36);
  *(_DWORD *)(v4 + 8) = 1;
  result = v10;
  *(__n128 *)(v4 + 16) = v10;
  *(_BYTE *)(v4 + 32) = v5;
  *(_WORD *)(v4 + 34) = v6;
  *(_QWORD *)(v4 + 36) = v8;
  *(_QWORD *)v4 = off_1E3350AB8;
  *(_QWORD *)(v4 + 48) = v7;
  *a2 = v4;
  return result;
}

void sub_19529BD6C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::DisplayRefreshMonitorIOS::~DisplayRefreshMonitorIOS(WebCore::DisplayRefreshMonitorIOS *this, void *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = off_1E3350B18;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = off_1E340B3F8;
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)*((_QWORD *)this + 2);
      do
      {
        v7 = *v6;
        if ((unint64_t)(*v6 + 1) >= 2)
        {
          v8 = *(_DWORD *)(v7 + 8);
          if (!v8)
          {
            __break(0xC471u);
            return;
          }
          *(_DWORD *)(v7 + 8) = v8 - 1;
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
}

{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = off_1E3350B18;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = off_1E340B3F8;
  v4 = *((_QWORD *)this + 2);
  if (!v4)
    goto LABEL_11;
  v5 = *(unsigned int *)(v4 - 4);
  if (!(_DWORD)v5)
  {
LABEL_10:
    WTF::fastFree((WTF *)(v4 - 16), a2);
LABEL_11:
    WTF::fastFree(this, a2);
    return;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (1)
  {
    v7 = *v6;
    if ((unint64_t)(*v6 + 1) >= 2)
      break;
LABEL_9:
    ++v6;
    if (!--v5)
      goto LABEL_10;
  }
  v8 = *(_DWORD *)(v7 + 8);
  if (v8)
  {
    *(_DWORD *)(v7 + 8) = v8 - 1;
    goto LABEL_9;
  }
  __break(0xC471u);
}

void WebCore::DisplayRefreshMonitorIOS::stop(id *this)
{
  id v2;

  objc_msgSend(this[7], "invalidate");
  v2 = this[7];
  this[7] = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t WebCore::DisplayRefreshMonitorIOS::startNotificationMechanism(WebCore::DisplayRefreshMonitorIOS *this)
{
  WebDisplayLinkHandler *v2;
  const void *v3;

  if (!*((_BYTE *)this + 72))
  {
    v2 = (WebDisplayLinkHandler *)*((_QWORD *)this + 7);
    if (!v2)
    {
      v2 = -[WebDisplayLinkHandler initWithMonitor:]([WebDisplayLinkHandler alloc], "initWithMonitor:", this);
      v3 = (const void *)*((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v2;
      if (v3)
      {
        CFRelease(v3);
        v2 = (WebDisplayLinkHandler *)*((_QWORD *)this + 7);
      }
    }
    -[WebDisplayLinkHandler setPaused:](v2, "setPaused:", 0);
    *((_QWORD *)this + 8) = 0x3C00000000;
    *((_BYTE *)this + 72) = 1;
  }
  return 1;
}

uint64_t WebCore::DisplayRefreshMonitorIOS::stopNotificationMechanism(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 72))
  {
    v1 = this;
    this = objc_msgSend(*(id *)(this + 56), "setPaused:", 1);
    *(_BYTE *)(v1 + 72) = 0;
  }
  return this;
}

uint64_t WebCore::DisplayRefreshMonitorIOS::displayNominalFramesPerSecond(WebCore::DisplayRefreshMonitorIOS *this)
{
  return 0x10000003CLL;
}

uint64_t WebCore::VideoFrame::isRemoteProxy(WebCore::VideoFrame *this)
{
  return 0;
}

uint64_t WebCore::VideoFrame::isLibWebRTC(WebCore::VideoFrame *this)
{
  return 0;
}

uint64_t WebCore::VideoFrameCV::isCV(WebCore::VideoFrameCV *this)
{
  return 1;
}

void *WTF::Detail::CallableWrapper<WebCore::copyNV12(std::span<unsigned char,18446744073709551615ul>,WebCore::ComputedPlaneLayout const&,WebCore::ComputedPlaneLayout const&,__CVBuffer *)::$_1,void,unsigned char *,unsigned char const*,unsigned long>::call(int a1, void *__dst, void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

void *WTF::Detail::CallableWrapper<WebCore::copyNV12(std::span<unsigned char,18446744073709551615ul>,WebCore::ComputedPlaneLayout const&,WebCore::ComputedPlaneLayout const&,__CVBuffer *)::$_2,void,unsigned char *,unsigned char const*,unsigned long>::call(int a1, void *__dst, void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

void *WTF::Detail::CallableWrapper<WebCore::copyI420OrI420A(std::span<unsigned char,18446744073709551615ul>,WebCore::ComputedPlaneLayout const&,WebCore::ComputedPlaneLayout const&,WebCore::ComputedPlaneLayout const&,WebCore::ComputedPlaneLayout const*,__CVBuffer *)::$_1,void,unsigned char *,unsigned char const*,unsigned long>::call(int a1, void *__dst, void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::copyI420OrI420A(std::span<unsigned char,18446744073709551615ul>,WebCore::ComputedPlaneLayout const&,WebCore::ComputedPlaneLayout const&,WebCore::ComputedPlaneLayout const&,WebCore::ComputedPlaneLayout const*,__CVBuffer *)::$_2,void,unsigned char *,unsigned char const*,unsigned long>::call(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD **)(result + 8);
  v5 = (_BYTE *)*v4;
  if (a4)
  {
    v6 = 0;
    v7 = **(_BYTE ***)(result + 16);
    do
    {
      v8 = a3 + v6;
      *v5++ = *(_BYTE *)(a3 + v6);
      v6 += 2;
      *v7++ = *(_BYTE *)(v8 + 1);
    }
    while (v6 < a4);
    v4 = *(_QWORD **)(result + 8);
    v5 = (_BYTE *)*v4;
  }
  v9 = *(_QWORD *)(result + 32);
  *v4 = &v5[*(_QWORD *)(result + 24)];
  **(_QWORD **)(result + 16) += v9;
  return result;
}

void *WTF::Detail::CallableWrapper<WebCore::copyI420OrI420A(std::span<unsigned char,18446744073709551615ul>,WebCore::ComputedPlaneLayout const&,WebCore::ComputedPlaneLayout const&,WebCore::ComputedPlaneLayout const&,WebCore::ComputedPlaneLayout const*,__CVBuffer *)::$_3,void,unsigned char *,unsigned char const*,unsigned long>::call(int a1, void *__dst, void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

_DWORD *WebCore::VideoFrame::createFromPixelBuffer(WTF::Ref<WebCore::PixelBuffer,WTF::RawPtrTraits<WebCore::PixelBuffer>,WTF::DefaultRefDerefTraits<WebCore::PixelBuffer>> &&,WebCore::PlatformVideoColorSpace &&)::$_0::__invoke(_DWORD *result)
{
  if (result[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  --result[2];
  return result;
}

void WebCore::ImageBuffer::create<WebCore::ImageBuffer>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  const void *v9;
  __int16 v10;
  uint64_t IdentifierInternal;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v8 = WTF::fastMalloc((WTF *)0x88);
  v17 = *a1;
  v18 = *((_DWORD *)a1 + 2);
  v9 = (const void *)a1[2];
  if (v9)
    CFRetain((CFTypeRef)a1[2]);
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x19529C350);
  }
  v10 = *((_WORD *)a1 + 12);
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_19689B170;
  *(_QWORD *)(v12 + 24) = v8;
  *(_QWORD *)v8 = off_1E340D2A8;
  *(_QWORD *)(v8 + 8) = v12;
  *(_DWORD *)(v8 + 24) = v18;
  *(_QWORD *)(v8 + 16) = v17;
  *(_QWORD *)(v8 + 32) = v9;
  if (v9)
    CFRetain(v9);
  *(_WORD *)(v8 + 40) = v10;
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[3];
  *(_OWORD *)(v8 + 80) = a2[2];
  *(_OWORD *)(v8 + 96) = v15;
  *(_OWORD *)(v8 + 48) = v13;
  *(_OWORD *)(v8 + 64) = v14;
  v16 = *a3;
  *a3 = 0;
  *(_QWORD *)(v8 + 112) = v16;
  *(_QWORD *)(v8 + 120) = IdentifierInternal;
  *(_DWORD *)(v8 + 128) = 0;
  *(_BYTE *)(v8 + 132) = 0;
  *a4 = v8;
  if (v9)
    CFRelease(v9);
}

void sub_19529C370(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  const void *v3;

  if (v3)
    CFRelease(v3);
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebCore::VideoFrame::copyTo(std::span<unsigned char,18446744073709551615ul>,WebCore::VideoPixelFormat,WTF::Vector<WebCore::ComputedPlaneLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::PlaneLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,unsigned char *,unsigned char const*,unsigned long>::call(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;

  if (a4 >= 4)
  {
    v4 = a4 >> 2;
    v5 = (_BYTE *)(a2 + 3);
    v6 = (_BYTE *)(a3 + 3);
    do
    {
      *(v5 - 3) = *(v6 - 2);
      *(v5 - 2) = *(v6 - 1);
      *(v5 - 1) = *v6;
      *v5 = *(v6 - 3);
      v5 += 4;
      v6 += 4;
      --v4;
    }
    while (v4);
  }
}

void *WTF::Detail::CallableWrapper<WebCore::VideoFrame::copyTo(std::span<unsigned char,18446744073709551615ul>,WebCore::VideoPixelFormat,WTF::Vector<WebCore::ComputedPlaneLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::PlaneLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_1,void,unsigned char *,unsigned char const*,unsigned long>::call(int a1, void *__dst, void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

void WebCore::WebGPU::Device::~Device(WebCore::WebGPU::Device *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl **v17;

  *(_QWORD *)this = off_1E3350FE8;
  v3 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v11 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v11)
      {
        v13 = *(WTF::StringImpl ***)(v4 + 8);
        v14 = 8 * v11;
        do
        {
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
            {
              v16 = v14;
              v17 = v13;
              WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
              v14 = v16;
              v13 = v17;
            }
            else
            {
              *(_DWORD *)v15 -= 2;
            }
          }
          ++v13;
          v14 -= 8;
        }
        while (v14);
      }
      v12 = *(WTF **)(v4 + 8);
      if (v12)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v12, a2);
      }
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 4);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

void WebCore::WebGPU::DeviceImpl::~DeviceImpl(WebCore::WebGPU::DeviceImpl *this)
{
  void *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;

  wgpuDeviceSetUncapturedErrorCallback();
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    wgpuDeviceRelease();
  WebCore::WebGPU::Device::~Device(this, v2);
}

{
  void *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  wgpuDeviceSetUncapturedErrorCallback();
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    wgpuDeviceRelease();
  WebCore::WebGPU::Device::~Device(this, v2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::WebGPU::DeviceImpl::queue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 72);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return this;
}

uint64_t WebCore::WebGPU::DeviceImpl::destroy(WebCore::WebGPU::DeviceImpl *this)
{
  return wgpuDeviceDestroy();
}

uint64_t WebCore::WebGPU::DeviceImpl::createBuffer@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t Buffer;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  WTF *v9;

  WTF::String::utf8();
  Buffer = wgpuDeviceCreateBuffer();
  v5 = *(_QWORD *)(a1 + 64);
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)v6 = off_1E3350658;
  *(_QWORD *)(v6 + 32) = Buffer;
  ++*(_DWORD *)(v5 + 8);
  *(_QWORD *)(v6 + 40) = v5;
  *a2 = v6;
  result = (uint64_t)v9;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      return WTF::fastFree(v9, v7);
    else
      --*(_DWORD *)v9;
  }
  return result;
}

uint64_t WebCore::WebGPU::DeviceImpl::createTexture@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Texture;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  char v21;
  char *v22;

  result = WTF::String::utf8();
  v7 = *(unsigned int *)(a2 + 60);
  if ((_DWORD)v7)
  {
    if (v7 >> 30)
    {
LABEL_17:
      __break(0xC471u);
      return result;
    }
    v8 = *(_QWORD *)(a1 + 64);
    v9 = (WTF *)WTF::fastMalloc((WTF *)(4 * v7));
    v10 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *(_QWORD *)(a2 + 48);
      do
      {
        *((_DWORD *)v9 + v11) = WebCore::WebGPU::ConvertToBackingContext::convertToBacking(v8, *(unsigned __int8 *)(v12 + v11));
        ++v11;
      }
      while (v10 != v11);
    }
  }
  else
  {
    v9 = 0;
  }
  v13 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v13 == -1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_17;
  }
  v22 = &v21;
  ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Extent3DDictEEEEE3__0JZNSA_16convertToBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v13])(&v22, a2 + 8);
  WebCore::WebGPU::ConvertToBackingContext::convertToBacking(*(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a2 + 41));
  Texture = wgpuDeviceCreateTexture();
  v15 = *(_BYTE *)(a2 + 41);
  v16 = *(_BYTE *)(a2 + 40);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)v18 = off_1E33516C8;
  *(_BYTE *)(v18 + 32) = v15;
  *(_BYTE *)(v18 + 33) = v16;
  *(_QWORD *)(v18 + 40) = Texture;
  ++*(_DWORD *)(v17 + 8);
  *(_QWORD *)(v18 + 48) = v17;
  *a3 = v18;
  if (v9)
    WTF::fastFree(v9, v19);
  result = (uint64_t)v20;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      return WTF::fastFree(v20, v19);
    else
      --*(_DWORD *)v20;
  }
  return result;
}

uint64_t WebCore::WebGPU::DeviceImpl::createSampler@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t Sampler;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;

  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  v11 = v5;
  Sampler = wgpuDeviceCreateSampler();
  v7 = *(_QWORD *)(a1 + 64);
  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E3351670;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = Sampler;
  ++*(_DWORD *)(v7 + 8);
  *(_QWORD *)(v8 + 32) = v7;
  *a3 = v8;
  result = (uint64_t)v11;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      return WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  return result;
}

uint64_t WebCore::WebGPU::DeviceImpl::importExternalTexture@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  WTF *v11;

  WTF::String::utf8();
  v6 = wgpuDeviceImportExternalTexture();
  v7 = *(_QWORD *)(a1 + 64);
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = off_1E3350DA8;
  ++*(_DWORD *)(v7 + 8);
  *(_QWORD *)(v8 + 24) = v7;
  *(_QWORD *)(v8 + 32) = v6;
  *(_BYTE *)(v8 + 40) = *(_BYTE *)(a2 + 40);
  *a3 = v8;
  result = (uint64_t)v11;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      return WTF::fastFree(v11, v9);
    else
      --*(_DWORD *)v11;
  }
  return result;
}

uint64_t WebCore::WebGPU::DeviceImpl::createBindGroupLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int32x4_t v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint32x2_t v24;
  char v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t BindGroupLayout;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t result;
  uint64_t *v39;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  WTF *v46;

  WTF::String::utf8();
  v5 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v5)
  {
    if (v5 >> 25)
    {
      __break(0xC471u);
      JUMPOUT(0x19529CF70);
    }
    v6 = WTF::fastMalloc((WTF *)(v5 << 7));
    v9 = *(_DWORD *)(a2 + 20);
    if (v9)
    {
      v10 = 0;
      v11 = *(_QWORD *)(a2 + 8);
      v41 = (_BYTE *)(v11 + 48 * v9);
      v12 = (_BYTE *)(v11 + 40);
      v39 = a3;
      do
      {
        v13 = v12 - 40;
        v14 = *((_DWORD *)v12 - 10);
        if (*(v12 - 16))
        {
          v15 = *(v12 - 32);
          if (v15 == 1)
            v16 = 2;
          else
            v16 = 1;
          if (v15 == 2)
            v17 = 3;
          else
            v17 = v16;
          v18 = *(v12 - 31);
          v19 = *((_QWORD *)v12 - 3);
        }
        else
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
        }
        if (*(v12 - 7))
        {
          v20 = *(v12 - 8);
          if (v20 == 1)
            v21 = 2;
          else
            v21 = 1;
          if (v20 == 2)
            v22 = 3;
          else
            v22 = v21;
        }
        else
        {
          v22 = 0;
        }
        if (v12[3])
        {
          v23 = 0;
          *(_QWORD *)&v8 = 2147483646;
        }
        else if (*(v12 - 3))
        {
          v7.i8[0] = *(v12 - 6);
          v7.i8[4] = *(v12 - 5);
          *((_QWORD *)&v8 + 1) = -1;
          v24 = (uint32x2_t)vand_s8((int8x8_t)vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)-1), (int8x8_t)0xFF000000FFLL);
          *(uint32x2_t *)&v8 = vcgt_u32((uint32x2_t)0x500000004, v24);
          *(int32x2_t *)&v8 = vsub_s32((int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)v24, (int32x2_t)0x200000002), *(int8x8_t *)&v8), (int32x2_t)vmvn_s8(*(int8x8_t *)&v8));
          v23 = *(v12 - 4);
        }
        else
        {
          v23 = 0;
          v8 = 0uLL;
        }
        v25 = *(v12 - 36);
        if (v12[1])
        {
          v45 = v8;
          v42 = v23;
          v43 = v19;
          v44 = v17;
          v26 = v6;
          v27 = *(v12 - 2);
          v28 = 1;
          if (v27 == 1)
            v29 = 2;
          else
            v29 = 1;
          if (v27 == 2)
            v30 = 3;
          else
            v30 = v29;
          v31 = WebCore::WebGPU::ConvertToBackingContext::convertToBacking(*(_QWORD *)(a1 + 64), *(v12 - 1));
          v6 = v26;
          v8 = v45;
          switch(*v12)
          {
            case 1:
              v28 = 2;
              goto LABEL_41;
            case 2:
              v28 = 3;
              goto LABEL_41;
            case 3:
              v28 = 4;
              goto LABEL_41;
            case 4:
              v28 = 5;
              goto LABEL_41;
            case 5:
              v28 = 6;
LABEL_41:
              v17 = v44;
              v19 = v43;
              v23 = v42;
              break;
            default:
              v6 = v26;
              v17 = v44;
              v19 = v43;
              v23 = v42;
              v8 = v45;
              break;
          }
        }
        else
        {
          v30 = 0;
          v31 = 0;
          v28 = 0;
        }
        v32 = v6 + v10;
        *(_QWORD *)v32 = 0;
        v7 = vdupq_n_s32(v14);
        *(int32x4_t *)(v32 + 8) = v7;
        *(_DWORD *)(v32 + 24) = v25 & 7;
        *(_QWORD *)(v32 + 32) = 0;
        *(_DWORD *)(v32 + 40) = v17;
        *(_DWORD *)(v32 + 44) = v18;
        *(_QWORD *)(v32 + 56) = 0;
        *(_QWORD *)(v32 + 64) = 0;
        *(_QWORD *)(v32 + 48) = v19;
        *(_DWORD *)(v32 + 72) = v22;
        *(_QWORD *)(v32 + 80) = 0;
        *(_QWORD *)(v32 + 88) = v8;
        *(_DWORD *)(v32 + 96) = v23;
        *(_QWORD *)(v32 + 104) = 0;
        v12 += 48;
        *(_DWORD *)(v32 + 112) = v30;
        *(_DWORD *)(v32 + 116) = v31;
        v10 += 128;
        *(_DWORD *)(v32 + 120) = v28;
      }
      while (v13 + 48 != v41);
      a3 = v39;
    }
  }
  else
  {
    v6 = 0;
  }
  v33 = (WTF *)v6;
  BindGroupLayout = wgpuDeviceCreateBindGroupLayout();
  v35 = *(_QWORD *)(a1 + 64);
  v36 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v36 + 8) = 1;
  *(_QWORD *)(v36 + 16) = 0;
  *(_QWORD *)(v36 + 24) = 0;
  *(_QWORD *)v36 = off_1E334F4D8;
  *(_QWORD *)(v36 + 32) = BindGroupLayout;
  ++*(_DWORD *)(v35 + 8);
  *(_QWORD *)(v36 + 40) = v35;
  *a3 = v36;
  if (v33)
    WTF::fastFree(v33, v37);
  result = (uint64_t)v46;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      return WTF::fastFree(v46, v37);
    else
      --*(_DWORD *)v46;
  }
  return result;
}

uint64_t WebCore::WebGPU::DeviceImpl::createPipelineLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t PipelineLayout;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;

  result = WTF::String::utf8();
  if (*(_BYTE *)(a2 + 24) && (v7 = *(unsigned int *)(a2 + 20), (_DWORD)v7))
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v8 = *(_QWORD *)(a1 + 64);
    v9 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    if (*(_DWORD *)(a2 + 20))
    {
      v10 = 0;
      do
      {
        v11 = v10;
        v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v10));
        v10 = v11 + 1;
        *((_QWORD *)v9 + v11) = v12;
      }
      while (v11 + 1 < (unint64_t)*(unsigned int *)(a2 + 20));
    }
  }
  else
  {
    v9 = 0;
  }
  PipelineLayout = wgpuDeviceCreatePipelineLayout();
  v14 = *(_QWORD *)(a1 + 64);
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)v15 = off_1E3350EE8;
  *(_QWORD *)(v15 + 32) = PipelineLayout;
  ++*(_DWORD *)(v14 + 8);
  *(_QWORD *)(v15 + 40) = v14;
  *a3 = v15;
  if (v9)
    WTF::fastFree(v9, v16);
  result = (uint64_t)v17;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
      return WTF::fastFree(v17, v16);
    else
      --*(_DWORD *)v17;
  }
  return result;
}

WTF *WebCore::WebGPU::DeviceImpl::createBindGroup@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t BindGroup;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  WTF *v37;
  WTF **v38;
  WTF *v39;
  WTF *result;
  WTF *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[5];
  unint64_t v49;
  char *v50;
  uint64_t v51;
  WTF *v52;

  WTF::String::utf8();
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v6 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v6)
  {
    if (v6 >= 0x4924925)
    {
      __break(0xC471u);
LABEL_57:
      JUMPOUT(0x19529D4C0);
    }
    v46 = *(_QWORD *)(a1 + 64);
    v7 = WTF::fastMalloc((WTF *)(56 * v6));
    v8 = (WTF *)v7;
    if (*(_DWORD *)(a2 + 28))
    {
      v42 = a1;
      v43 = a3;
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 0;
      v12 = 0;
      v44 = a2;
      v41 = (WTF *)v7;
      v13 = (_QWORD *)(v7 + 24);
      v14 = 24;
      while (1)
      {
        v45 = *(_QWORD *)(a2 + 16);
        v15 = v45 + v14;
        if (*(_DWORD *)(v45 + v14 + 16) == 3)
          v16 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 96))(v46, *(_QWORD *)(v15 - 16));
        else
          v16 = 0;
        v17 = v11 + 1;
        v49 = v11 + 1;
        v18 = v10;
        if (v11 >= v10)
        {
          v20 = WTF::fastMalloc((WTF *)0x18);
          v48[0] = v20;
          if ((_DWORD)v10 == (_DWORD)v51)
          {
            v21 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v50, v10 + 1, (unint64_t)v48);
            LODWORD(v10) = HIDWORD(v51);
            v17 = v49;
            v9 = v50;
            *(_QWORD *)&v50[8 * HIDWORD(v51)] = *(_QWORD *)v21;
          }
          else
          {
            *(_QWORD *)&v9[8 * v10] = v20;
          }
          v10 = (v10 + 1);
          HIDWORD(v51) = v10;
          v19 = v17 - 1;
          v18 = v10;
        }
        else
        {
          v19 = v11;
        }
        if (v19 >= v18)
        {
          __break(0xC471u);
          goto LABEL_57;
        }
        v11 = v17;
        v22 = *(_QWORD *)&v9[8 * v19];
        *(_QWORD *)v22 = 0;
        *(_DWORD *)(v22 + 8) = -140055559;
        *(_QWORD *)(v22 + 16) = v16;
        if (v16)
        {
          if (v17 - 1 >= v10)
          {
            __break(0xC471u);
            JUMPOUT(0x19529D4C8);
          }
          v47 = *(_QWORD *)&v9[8 * v17 - 8];
        }
        else
        {
          v47 = 0;
        }
        v23 = *(_DWORD *)(v15 - 24);
        v24 = *(_DWORD *)(v15 + 16);
        if (v24 == 2)
        {
          v25 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 40))(v46, *(_QWORD *)(*(_QWORD *)(v15 - 16) + 8));
          v24 = *(_DWORD *)(v15 + 16);
          if (v24 == 2)
          {
            v26 = v9;
            v27 = 0;
            v28 = 0;
            v30 = *(_QWORD *)(v45 + v14 - 8);
            v29 = *(_QWORD *)(v45 + v14);
            if (!*(_BYTE *)(v45 + v14 + 8))
              v29 = -1;
            goto LABEL_31;
          }
        }
        else
        {
          v25 = 0;
        }
        v26 = v9;
        if (v24)
        {
          v27 = 0;
        }
        else
        {
          v27 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 168))(v46, *(_QWORD *)(v15 - 16));
          v24 = *(_DWORD *)(v15 + 16);
        }
        if (v24 == 1)
        {
          v28 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 200))(v46, *(_QWORD *)(v15 - 16));
          v29 = 0;
          v30 = 0;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v28 = 0;
        }
LABEL_31:
        *(v13 - 3) = v47;
        *((_DWORD *)v13 - 4) = v23;
        *(v13 - 1) = v25;
        *v13 = v30;
        v13[1] = v29;
        v13[2] = v27;
        v13[3] = v28;
        ++v12;
        a2 = v44;
        v14 += 48;
        v13 += 7;
        v9 = v26;
        if (v12 >= *(unsigned int *)(v44 + 28))
        {
          a1 = v42;
          a3 = v43;
          v8 = v41;
          goto LABEL_35;
        }
      }
    }
    LODWORD(v10) = 0;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    LODWORD(v10) = 0;
    v11 = 0;
    v12 = 0;
    v8 = 0;
  }
LABEL_35:
  if (v52)
    v31 = (char *)v52 + 16;
  else
    v31 = 0;
  v48[0] = 0;
  v48[1] = v31;
  v48[2] = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 32))(*(_QWORD *)(a1 + 64), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  v48[3] = v12;
  v48[4] = v8;
  BindGroup = wgpuDeviceCreateBindGroup();
  v33 = *(_QWORD *)(a1 + 64);
  v34 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v34 + 8) = 1;
  *(_QWORD *)v34 = off_1E334F4B0;
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = BindGroup;
  ++*(_DWORD *)(v33 + 8);
  *(_QWORD *)(v34 + 32) = v33;
  *a3 = v34;
  if (v8)
    WTF::fastFree(v8, v35);
  v36 = v10;
  if (v11 && v11 - 1 >= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x19529D4D0);
  }
  v37 = (WTF *)v50;
  if ((_DWORD)v10)
  {
    v38 = (WTF **)v50;
    do
    {
      v39 = *v38++;
      WTF::fastFree(v39, v35);
      --v36;
    }
    while (v36);
  }
  else if (!v50)
  {
    goto LABEL_48;
  }
  WTF::fastFree(v37, v35);
LABEL_48:
  result = v52;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v35);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF *WebCore::WebGPU::DeviceImpl::createShaderModule@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  char *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t ShaderModule;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF **v33;
  WTF *v34;
  WTF *v35;
  WTF *result;
  __int128 v37;
  uint64_t v38;
  char *v39;
  _QWORD v40[3];
  char *v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;

  WTF::String::utf8();
  WTF::String::utf8();
  v6 = *(unsigned int *)(a2 + 28);
  if (!(_DWORD)v6)
  {
    v7 = 0;
LABEL_20:
    LODWORD(v9) = 0;
    v13 = 0;
    v14 = 0;
    v41 = 0;
    v42 = 0;
    goto LABEL_23;
  }
  if (v6 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x19529D820);
  }
  v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
  if (!*(_DWORD *)(a2 + 28))
    goto LABEL_20;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = v9;
    WTF::String::utf8();
    ++v9;
    *((_QWORD *)v7 + v10) = v37;
    v11 = *(unsigned int *)(a2 + 28);
    v8 += 16;
  }
  while (v9 < v11);
  v41 = 0;
  v42 = 0;
  if ((_DWORD)v11)
  {
    if (v11 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      goto LABEL_55;
    }
    v12 = 24 * v11;
    v13 = (char *)WTF::fastMalloc((WTF *)(24 * v11));
    LODWORD(v42) = (v12 & 0xFFFFFFF8) / 0x18;
    v41 = v13;
    if (*(_DWORD *)(a2 + 28))
    {
      v14 = 0;
      v15 = 0;
      v16 = 8;
      while (1)
      {
        v17 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)&v37 = 0;
        if (v9 == v15)
          break;
        v18 = *((_QWORD *)v7 + v15);
        if (v18)
          v19 = v18 + 16;
        else
          v19 = 0;
        *((_QWORD *)&v37 + 1) = v19;
        v38 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 112))(*(_QWORD *)(a1 + 64), *(_QWORD *)(v17 + v16));
        if (v14 == (_DWORD)v42)
        {
          v20 = WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v41, v14 + 1, (unint64_t)&v37);
          v14 = HIDWORD(v42);
          v13 = v41;
          v21 = &v41[24 * HIDWORD(v42)];
          v22 = *((_QWORD *)v20 + 2);
          *(_OWORD *)v21 = *(_OWORD *)v20;
          *((_QWORD *)v21 + 2) = v22;
        }
        else
        {
          v23 = v37;
          v24 = &v13[24 * v14];
          *((_QWORD *)v24 + 2) = v38;
          *(_OWORD *)v24 = v23;
        }
        HIDWORD(v42) = ++v14;
        ++v15;
        v16 += 16;
        if (v15 >= *(unsigned int *)(a2 + 28))
          goto LABEL_23;
      }
      __break(0xC471u);
LABEL_55:
      JUMPOUT(0x19529D818);
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = 0;
LABEL_23:
  v40[0] = 0;
  v40[1] = 6;
  if (v43)
    v25 = (char *)v43 + 16;
  else
    v25 = 0;
  v40[2] = v25;
  v26 = (char *)v44 + 16;
  if (!v44)
    v26 = 0;
  *(_QWORD *)&v37 = v40;
  *((_QWORD *)&v37 + 1) = v26;
  if (v14)
    v27 = v13;
  else
    v27 = 0;
  v38 = v14;
  v39 = v27;
  ShaderModule = wgpuDeviceCreateShaderModule();
  v29 = *(_QWORD *)(a1 + 64);
  v30 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v30 + 8) = 1;
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)v30 = off_1E3351698;
  *(_QWORD *)(v30 + 32) = ShaderModule;
  ++*(_DWORD *)(v29 + 8);
  *(_QWORD *)(v30 + 40) = v29;
  *a3 = v30;
  if (v13)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    WTF::fastFree((WTF *)v13, v31);
  }
  if ((_DWORD)v9)
  {
    v32 = 8 * v9;
    v33 = (WTF **)v7;
    do
    {
      v34 = *v33;
      *v33 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 1)
          WTF::fastFree(v34, v31);
        else
          --*(_DWORD *)v34;
      }
      ++v33;
      v32 -= 8;
    }
    while (v32);
  }
  if (v7)
    WTF::fastFree(v7, v31);
  v35 = v43;
  v43 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 1)
      WTF::fastFree(v35, v31);
    else
      --*(_DWORD *)v35;
  }
  result = v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v31);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF *WebCore::WebGPU::DeviceImpl::createComputePipeline@<X0>(WebCore::WebGPU::DeviceImpl *this@<X0>, const WebCore::WebGPU::ComputePipelineDescriptor *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  char *v10;
  WTF *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  void *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  _BOOL4 v27;
  WTF *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  BOOL v57;
  char v58;
  uint64_t ComputePipeline;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  WTF **v63;
  WTF *v64;
  WTF *result;
  void *v66;
  WTF *v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  WTF::StringImpl *v72[8];
  WTF *v73;
  char *v74;

  v5 = *((_QWORD *)this + 7);
  v6 = *((_QWORD *)this + 8);
  v7 = v6;
  if (v5)
  {
    wgpuDeviceReference();
    v7 = *((_QWORD *)this + 8);
  }
  WTF::String::utf8();
  v9 = *((unsigned __int8 *)a2 + 32);
  if (*((_BYTE *)a2 + 32))
  {
    v10 = (char *)a2 + 24;
    WTF::String::utf8();
    if (!*((_BYTE *)a2 + 32))
    {
      __break(1u);
      goto LABEL_113;
    }
    v11 = v72[0];
    if (*(_QWORD *)v10)
      v12 = *(_DWORD *)(*(_QWORD *)v10 + 4);
    else
      v12 = 0;
    if (v72[0])
      strlen((const char *)v72[0] + 16);
    WTF::String::fromUTF8();
    v14 = v72[0];
    if (v72[0])
    {
      v15 = v6;
      v16 = *((_DWORD *)v72[0] + 1);
      v72[0] = 0;
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
      v57 = v12 == v16;
      v6 = v15;
      if (!v57)
        goto LABEL_13;
    }
    else if (v12)
    {
LABEL_13:
      WTF::CString::CString((WTF::CString *)v72, "");
      v18 = v72[0];
      v72[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          WTF::fastFree(v11, v17);
          v67 = v72[0];
          v72[0] = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 1)
              WTF::fastFree(v67, v66);
            else
              --*(_DWORD *)v67;
          }
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
      v11 = v18;
    }
  }
  else
  {
    v11 = 0;
  }
  v19 = *((unsigned int *)a2 + 13);
  v71 = v7;
  v70 = v9;
  if (!(_DWORD)v19)
  {
    LODWORD(v29) = 0;
    v20 = 0;
    v33 = 0;
    LODWORD(v30) = 0;
    goto LABEL_62;
  }
  v69 = v6;
  if (v19 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x19529DD9CLL);
  }
  v20 = (WTF *)WTF::fastMalloc((WTF *)(8 * v19));
  if (!*((_DWORD *)a2 + 13))
  {
    LODWORD(v29) = 0;
    v33 = 0;
    LODWORD(v30) = 0;
    goto LABEL_62;
  }
  v68 = a3;
  v21 = 0;
  v22 = 0;
  do
  {
    v23 = *((_QWORD *)a2 + 5) + v21;
    if (*(_QWORD *)v23)
      v24 = *(_DWORD *)(*(_QWORD *)v23 + 4);
    else
      v24 = 0;
    WTF::String::utf8();
    if (v74)
      strlen(v74 + 16);
    WTF::String::fromUTF8();
    v26 = v72[0];
    if (v72[0])
    {
      v27 = v24 == *((_DWORD *)v72[0] + 1);
      v72[0] = 0;
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    else
    {
      v27 = v24 == 0;
      v72[0] = 0;
    }
    v28 = (WTF *)v74;
    v74 = 0;
    if (!v28)
      goto LABEL_32;
    if (*(_DWORD *)v28 != 1)
    {
      --*(_DWORD *)v28;
LABEL_32:
      if (v27)
        goto LABEL_33;
      goto LABEL_35;
    }
    WTF::fastFree(v28, v25);
    if (v27)
    {
LABEL_33:
      WTF::String::utf8();
      goto LABEL_36;
    }
LABEL_35:
    WTF::CString::CString((WTF::CString *)v72, "");
LABEL_36:
    v29 = v22 + 1;
    *((WTF::StringImpl **)v20 + v22) = v72[0];
    v30 = *((unsigned int *)a2 + 13);
    v21 += 16;
    v22 = v29;
  }
  while (v29 < v30);
  a3 = v68;
  v6 = v69;
  if ((_DWORD)v30)
  {
    if (v30 < 0xAAAAAAB)
    {
      v31 = 24 * v30;
      v32 = WTF::fastMalloc((WTF *)(24 * v30));
      v33 = (WTF::StringImpl *)v32;
      v34 = *((unsigned int *)a2 + 13);
      if (v34 > v29)
      {
        v44 = 0;
        v45 = 0;
        v46 = 24 * v34;
        v47 = 8;
        while (v46 != v44)
        {
          if (v29 == v45)
          {
            __break(0xC471u);
            JUMPOUT(0x19529DD94);
          }
          v48 = *((_QWORD *)v20 + v45);
          if (v48)
            v49 = v48 + 16;
          else
            v49 = 0;
          v50 = *(_QWORD *)(*((_QWORD *)a2 + 5) + v47);
          v51 = (_QWORD *)(v32 + v44);
          *v51 = 0;
          v51[1] = v49;
          v51[2] = v50;
          ++v45;
          v47 += 16;
          v44 += 24;
          if (v31 == v44)
            goto LABEL_62;
        }
      }
      else
      {
        v35 = 0;
        v36 = 24 * v34;
        v37 = 8;
        v38 = v20;
        while (v36 != v35)
        {
          v39 = *(_QWORD *)v38;
          v38 = (WTF *)((char *)v38 + 8);
          v40 = v39 + 16;
          if (v39)
            v41 = v40;
          else
            v41 = 0;
          v42 = *(_QWORD *)(*((_QWORD *)a2 + 5) + v37);
          v43 = (_QWORD *)(v32 + v35);
          *v43 = 0;
          v43[1] = v41;
          v43[2] = v42;
          v37 += 16;
          v35 += 24;
          if (v31 == v35)
            goto LABEL_62;
        }
      }
    }
LABEL_113:
    __break(0xC471u);
    JUMPOUT(0x19529DD8CLL);
  }
  v33 = 0;
LABEL_62:
  if (v73)
    v52 = (WTF *)((char *)v73 + 16);
  else
    v52 = 0;
  v72[0] = 0;
  v72[1] = v52;
  v53 = *((_QWORD *)a2 + 1);
  if (v53 && *(_QWORD *)(v53 + 8))
    v54 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
  else
    v54 = 0;
  v72[2] = v54;
  v72[3] = 0;
  v55 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 176))(v6, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8));
  v56 = (WTF *)((char *)v11 + 16);
  if (v70)
    v57 = v11 == 0;
  else
    v57 = 1;
  v58 = v57;
  if (v57)
    v56 = 0;
  v72[4] = v55;
  v72[5] = v56;
  v72[6] = (WTF::StringImpl *)v30;
  v72[7] = v33;
  ComputePipeline = wgpuDeviceCreateComputePipeline();
  v61 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v61 + 8) = 1;
  *(_QWORD *)v61 = off_1E3350818;
  *(_QWORD *)(v61 + 16) = 0;
  *(_QWORD *)(v61 + 24) = ComputePipeline;
  ++*(_DWORD *)(v71 + 8);
  *(_QWORD *)(v61 + 32) = v71;
  if (v33)
    WTF::fastFree(v33, v60);
  if ((_DWORD)v29)
  {
    v62 = 8 * v29;
    v63 = (WTF **)v20;
    do
    {
      v64 = *v63;
      *v63 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 1)
          WTF::fastFree(v64, v60);
        else
          --*(_DWORD *)v64;
      }
      ++v63;
      v62 -= 8;
    }
    while (v62);
  }
  if (v20)
    WTF::fastFree(v20, v60);
  if ((v58 & 1) == 0)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, v60);
    else
      --*(_DWORD *)v11;
  }
  result = v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v60);
    else
      --*(_DWORD *)result;
  }
  *a3 = v61;
  if (v5)
    return (WTF *)wgpuDeviceRelease();
  return result;
}

uint64_t WebCore::WebGPU::DeviceImpl::createRenderPipeline@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF *a3@<X8>)
{
  char *v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  void *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  unint64_t v21;
  char *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _BOOL4 v26;
  WTF *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int32x2_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  uint32x2_t v78;
  int32x2_t v79;
  int v80;
  unsigned int v81;
  int v82;
  uint32x2_t v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  BOOL v91;
  WTF *v92;
  int v93;
  WTF *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  void *v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  WTF *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  _BOOL4 v115;
  WTF *v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  WTF *v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  __int32 v145;
  uint16x8_t v146;
  int8x16_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int32x4_t v153;
  uint64_t v154;
  int8x16_t v155;
  char v156;
  uint16x4_t v157;
  char *v158;
  uint64_t v159;
  int v160;
  WTF *v161;
  int v162;
  int v163;
  uint64_t *v164;
  WTF *v165;
  uint64_t v166;
  char *v167;
  BOOL v168;
  char v169;
  WTF *v170;
  unsigned __int8 v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  char v174;
  WTF *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  BOOL v180;
  char v181;
  int v182;
  _QWORD *v183;
  int v184;
  int v185;
  int v186;
  int v187;
  char **v188;
  unsigned __int8 v189;
  __int128 *v190;
  uint64_t RenderPipeline;
  void *v192;
  uint64_t v193;
  WTF *v194;
  uint64_t v195;
  WTF **v196;
  WTF *v197;
  uint64_t *v198;
  uint64_t v199;
  WTF *v200;
  WTF *v201;
  uint64_t v202;
  WTF **v203;
  WTF *v204;
  WTF *v205;
  uint64_t result;
  void *v207;
  WTF *v208;
  void *v209;
  WTF *v210;
  char *v211;
  int v212;
  WTF *v213;
  uint64_t v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  unint64_t v220;
  WTF *v221;
  WTF *v222;
  WTF *v223;
  WTF *v224;
  WTF *v225;
  WTF *v226;
  uint64_t v227;
  WTF *v228;
  WTF *v229;
  uint64_t v230;
  char v231;
  WTF::StringImpl *v232[2];
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  _QWORD v241[2];
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  WTF *v246;
  char *v247;
  uint64_t v248;
  char v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  int v253;
  int v254;
  uint64_t v255;

  v7 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v8 = v6;
  if (v7)
  {
    wgpuDeviceReference();
    v8 = *(_QWORD *)(a1 + 64);
  }
  WTF::String::utf8();
  LODWORD(v10) = *(unsigned __int8 *)(a2 + 32);
  if (!*(_BYTE *)(a2 + 32))
  {
    v3 = 0;
    goto LABEL_18;
  }
  v11 = a2 + 24;
  WTF::String::utf8();
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_355;
  v3 = (char *)v232[0];
  if (!*(_QWORD *)v11)
    goto LABEL_356;
  v12 = *(_DWORD *)(*(_QWORD *)v11 + 4);
  while (2)
  {
    if (v3)
      strlen(v3 + 16);
    WTF::String::fromUTF8();
    v14 = v232[0];
    if (v232[0])
    {
      v15 = *((_DWORD *)v232[0] + 1);
      v232[0] = 0;
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
      if (v12 != v15)
        goto LABEL_13;
    }
    else if (v12)
    {
LABEL_13:
      WTF::CString::CString((WTF::CString *)v232, "");
      v17 = v232[0];
      v232[0] = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 1)
        {
          WTF::fastFree((WTF *)v3, v16);
          v208 = v232[0];
          v232[0] = 0;
          if (v208)
          {
            if (*(_DWORD *)v208 == 1)
              WTF::fastFree(v208, v207);
            else
              --*(_DWORD *)v208;
          }
        }
        else
        {
          --*(_DWORD *)v3;
        }
      }
      v3 = (char *)v17;
    }
LABEL_18:
    v226 = (WTF *)v3;
    v18 = *(unsigned int *)(a2 + 52);
    v230 = v6;
    v220 = v8;
    v219 = v10;
    if (!(_DWORD)v18)
    {
      LODWORD(v28) = 0;
      v19 = 0;
LABEL_54:
      v6 = 0;
      goto LABEL_55;
    }
    if (v18 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19529F0E4);
    }
    v19 = WTF::fastMalloc((WTF *)(8 * v18));
    if (!*(_DWORD *)(a2 + 52))
    {
      LODWORD(v28) = 0;
      goto LABEL_54;
    }
    v20 = a3;
    v8 = 0;
    v21 = 0;
    do
    {
      v22 = (char *)(*(_QWORD *)(a2 + 40) + v8);
      if (*(_QWORD *)v22)
        v23 = *(_DWORD *)(*(_QWORD *)v22 + 4);
      else
        v23 = 0;
      WTF::String::utf8();
      if (v247)
        strlen(v247 + 16);
      WTF::String::fromUTF8();
      v25 = v232[0];
      if (v232[0])
      {
        v26 = v23 == *((_DWORD *)v232[0] + 1);
        v232[0] = 0;
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      else
      {
        v26 = v23 == 0;
        v232[0] = 0;
      }
      v27 = (WTF *)v247;
      v247 = 0;
      if (!v27)
        goto LABEL_32;
      if (*(_DWORD *)v27 != 1)
      {
        --*(_DWORD *)v27;
LABEL_32:
        if (v26)
          goto LABEL_33;
        goto LABEL_35;
      }
      WTF::fastFree(v27, v24);
      if (v26)
      {
LABEL_33:
        WTF::String::utf8();
        goto LABEL_36;
      }
LABEL_35:
      WTF::CString::CString((WTF::CString *)v232, "");
LABEL_36:
      v28 = v21 + 1;
      *(WTF::StringImpl **)(v19 + 8 * v21) = v232[0];
      v6 = *(unsigned int *)(a2 + 52);
      v8 += 16;
      v21 = v28;
    }
    while (v28 < v6);
    a3 = v20;
    if ((_DWORD)v6)
    {
      if (v6 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x19529F104);
      }
      v29 = 24 * v6;
      v30 = WTF::fastMalloc((WTF *)(24 * v6));
      v31 = *(unsigned int *)(a2 + 52);
      if (v31 > v28)
      {
        v96 = 0;
        v97 = 0;
        v98 = 24 * v31;
        v99 = 8;
        while (v98 != v96)
        {
          if (v28 == v97)
          {
            __break(0xC471u);
            JUMPOUT(0x19529F0D4);
          }
          v100 = *(_QWORD *)(v19 + 8 * v97);
          if (v100)
            v101 = v100 + 16;
          else
            v101 = 0;
          v102 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + v99);
          v103 = (_QWORD *)(v30 + v96);
          *v103 = 0;
          v103[1] = v101;
          v103[2] = v102;
          ++v97;
          v99 += 16;
          v96 += 24;
          if (v29 == v96)
            goto LABEL_56;
        }
      }
      else
      {
        v32 = 0;
        v33 = 24 * v31;
        v34 = 8;
        v35 = (uint64_t *)v19;
        while (v33 != v32)
        {
          v36 = *v35++;
          v37 = v36 + 16;
          if (v36)
            v38 = v37;
          else
            v38 = 0;
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + v34);
          v40 = (_QWORD *)(v30 + v32);
          *v40 = 0;
          v40[1] = v38;
          v40[2] = v39;
          v34 += 16;
          v32 += 24;
          if (v29 == v32)
            goto LABEL_56;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x19529F0B4);
    }
LABEL_55:
    v30 = 0;
LABEL_56:
    v218 = v28;
    v221 = (WTF *)v19;
    v41 = *(unsigned int *)(a2 + 68);
    v227 = v7;
    v225 = (WTF *)v30;
    if (!(_DWORD)v41)
    {
      LODWORD(v10) = 0;
      v228 = 0;
LABEL_86:
      v217 = 0;
      v3 = 0;
      goto LABEL_87;
    }
    if (v41 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19529F0ECLL);
    }
    v42 = WTF::fastMalloc((WTF *)(16 * v41));
    v228 = (WTF *)v42;
    if (!*(_DWORD *)(a2 + 68))
    {
      LODWORD(v10) = 0;
      goto LABEL_86;
    }
    v43 = v42;
    v44 = a3;
    v45 = v6;
    v10 = 0;
    v46 = 1;
    v8 = 40;
    do
    {
      v47 = v46;
      v48 = *(_QWORD *)(a2 + 56) + 40 * v10;
      LODWORD(v46) = *(unsigned __int8 *)(v48 + 32);
      if (*(_BYTE *)(v48 + 32) && (v46 = *(unsigned int *)(v48 + 28), (_DWORD)v46))
      {
        if (v46 >= 0xAAAAAAB)
        {
          __break(0xC471u);
          JUMPOUT(0x19529F0CCLL);
        }
        v49 = 24 * v46;
        v50 = WTF::fastMalloc((WTF *)(24 * v46));
        LODWORD(v46) = (v49 & 0xFFFFFFF8) / 0x18;
        LODWORD(v51) = *(_DWORD *)(v48 + 28);
        if ((_DWORD)v51)
        {
          v52 = 0;
          v51 = 0;
          v53 = *(_QWORD *)(v48 + 16);
          v43 = (uint64_t)v228;
          do
          {
            v54 = v53 + v52;
            if (*(unsigned __int8 *)(v53 + v52) - 1 >= 0x1E)
              v55 = 1;
            else
              v55 = (*(_BYTE *)(v53 + v52) - 1) + 2;
            v56 = *(_QWORD *)(v54 + 8);
            v57 = *(_DWORD *)(v54 + 16);
            v58 = v50 + v52;
            *(_DWORD *)v58 = v55;
            *(_QWORD *)(v58 + 8) = v56;
            *(_DWORD *)(v58 + 16) = v57;
            ++v51;
            v52 += 24;
          }
          while (v51 < *(unsigned int *)(v48 + 28));
        }
        else
        {
          v43 = (uint64_t)v228;
        }
      }
      else
      {
        v50 = 0;
        LODWORD(v51) = 0;
      }
      v59 = v43 + 16 * v10;
      *(_QWORD *)v59 = v50;
      *(_DWORD *)(v59 + 8) = v46;
      *(_DWORD *)(v59 + 12) = v51;
      ++v10;
      v60 = *(unsigned int *)(a2 + 68);
      v46 = v47 + 1;
    }
    while (v10 < v60);
    if ((_DWORD)v60)
    {
      if (v60 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19529F10CLL);
      }
      v8 = *(unsigned int *)(a2 + 68);
      v6 = v45;
      v61 = WTF::fastMalloc((WTF *)(32 * v60));
      v3 = (char *)v61;
      v62 = 0;
      v63 = 0;
      v64 = 40 * *(unsigned int *)(a2 + 68);
      v217 = v8;
      a3 = v44;
      v7 = v227;
      do
      {
        if (v64 == v63)
        {
          __break(0xC471u);
          JUMPOUT(0x19529F0A4);
        }
        v65 = *(_QWORD *)(a2 + 56) + v63;
        if (*(_BYTE *)(v65 + 32))
        {
          v66 = *(_QWORD *)v65;
          v67 = *(unsigned __int8 *)(v65 + 8) != 0;
          if (!v47)
            goto LABEL_367;
        }
        else
        {
          v67 = 0;
          v66 = 0xFFFFFFFFLL;
          if (!v47)
          {
LABEL_367:
            __break(0xC471u);
            JUMPOUT(0x19529F0ACLL);
          }
        }
        v68 = *(unsigned int *)(v43 + 12);
        v69 = *(_QWORD *)v43;
        v43 += 16;
        v70 = v61 + v62;
        *(_QWORD *)v70 = v66;
        *(_DWORD *)(v70 + 8) = v67;
        v63 += 40;
        *(_QWORD *)(v70 + 16) = v68;
        *(_QWORD *)(v70 + 24) = v69;
        v62 += 32;
        --v47;
      }
      while (40 * v8 != v63);
    }
    else
    {
      v217 = 0;
      v3 = 0;
      v6 = v45;
      a3 = v44;
      v7 = v227;
    }
LABEL_87:
    v247 = 0;
    if (*(_BYTE *)(a2 + 124))
    {
      LODWORD(v248) = WebCore::WebGPU::ConvertToBackingContext::convertToBacking(v230, *(unsigned __int8 *)(a2 + 80));
      v72 = *(unsigned __int16 *)(a2 + 81);
      BYTE4(v248) = 0;
      v249 = 0;
      if (v72 >= 0x100)
      {
        HIDWORD(v248) = v72;
        v249 = 1;
      }
      v73 = *(unsigned __int8 *)(a2 + 84);
      if (*(_BYTE *)(a2 + 84))
      {
        v74 = *(unsigned __int8 *)(a2 + 83) - 1;
        if (v74 > 6)
          v73 = 1;
        else
          v73 = dword_1968DDA38[(char)v74];
      }
      LODWORD(v250) = v73;
      v76 = *(unsigned __int8 *)(a2 + 85) - 1;
      if (v76 > 6)
        v77 = 1;
      else
        v77 = dword_1968DDA38[(char)v76];
      v71.i8[0] = *(_BYTE *)(a2 + 86);
      v71.i8[4] = *(_BYTE *)(a2 + 87);
      v78 = (uint32x2_t)vand_s8((int8x8_t)vadd_s32(v71, (int32x2_t)-1), (int8x8_t)0xFF000000FFLL);
      v79 = (int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)v78, (int32x2_t)0x100000001), (int8x8_t)vcgt_u32((uint32x2_t)0x700000007, v78));
      *((int32x2_t *)&v250 + 1) = v79;
      if (*(unsigned __int8 *)(a2 + 88) - 1 < 7)
        v80 = (*(_BYTE *)(a2 + 88) - 1) + 1;
      else
        v80 = 0;
      DWORD1(v250) = v77;
      LODWORD(v251) = v80;
      v81 = *(unsigned __int8 *)(a2 + 89) - 1;
      if (v81 > 6)
        v82 = 1;
      else
        v82 = dword_1968DDA38[(char)v81];
      v79.i8[0] = *(_BYTE *)(a2 + 90);
      v79.i8[4] = *(_BYTE *)(a2 + 91);
      v83 = (uint32x2_t)vand_s8((int8x8_t)vadd_s32(v79, (int32x2_t)-1), (int8x8_t)0xFF000000FFLL);
      *((int8x8_t *)&v251 + 1) = vand_s8((int8x8_t)vadd_s32((int32x2_t)v83, (int32x2_t)0x100000001), (int8x8_t)vcgt_u32((uint32x2_t)0x700000007, v83));
      if (*(unsigned __int8 *)(a2 + 92) - 1 < 7)
        v84 = (*(_BYTE *)(a2 + 92) - 1) + 1;
      else
        v84 = 0;
      DWORD1(v251) = v82;
      if (*(_BYTE *)(a2 + 100))
        v85 = *(_DWORD *)(a2 + 96);
      else
        v85 = 0;
      v86 = *(_DWORD *)(a2 + 104);
      if (!*(_BYTE *)(a2 + 108))
        v86 = 0;
      *(_QWORD *)&v252 = __PAIR64__(v85, v84);
      *((_QWORD *)&v252 + 1) = __PAIR64__(*(_DWORD *)(a2 + 112), v86);
      v75 = *(_DWORD *)(a2 + 120);
      v253 = *(_DWORD *)(a2 + 116);
    }
    else
    {
      v248 = 0;
      v249 = 1;
      v250 = 0u;
      v251 = 0u;
      v252 = 0u;
      v75 = 0;
      v253 = 0;
    }
    v254 = v75;
    if (!*(_BYTE *)(a2 + 200))
    {
      v8 = 0;
      v94 = 0;
      v229 = 0;
      LODWORD(v95) = 0;
      v216 = 0;
      v223 = 0;
      goto LABEL_222;
    }
    if (!*(_BYTE *)(a2 + 160))
    {
      v93 = 0;
      v8 = 0;
      goto LABEL_146;
    }
    v87 = a2 + 152;
    WTF::String::utf8();
    if (!*(_BYTE *)(a2 + 160))
      goto LABEL_355;
    v88 = *(_QWORD *)v87 ? *(_DWORD *)(*(_QWORD *)v87 + 4) : 0;
    if (!*(_BYTE *)(a2 + 200))
      goto LABEL_355;
    v8 = (unint64_t)v232[0];
    WTF::String::utf8();
    if ((_QWORD)v243)
      strlen((const char *)(v243 + 16));
    WTF::String::fromUTF8();
    v90 = v232[0];
    if (v232[0])
    {
      v91 = v88 == *((_DWORD *)v232[0] + 1);
      v232[0] = 0;
      if (*(_DWORD *)v90 == 2)
        WTF::StringImpl::destroy(v90, v89);
      else
        *(_DWORD *)v90 -= 2;
    }
    else
    {
      v91 = v88 == 0;
      v232[0] = 0;
    }
    v92 = (WTF *)v243;
    *(_QWORD *)&v243 = 0;
    if (!v92)
    {
LABEL_127:
      if (!v91)
        goto LABEL_142;
LABEL_128:
      v93 = 1;
      goto LABEL_146;
    }
    if (*(_DWORD *)v92 != 1)
    {
      --*(_DWORD *)v92;
      goto LABEL_127;
    }
    WTF::fastFree(v92, v89);
    if (v91)
      goto LABEL_128;
LABEL_142:
    WTF::CString::CString((WTF::CString *)v232, "");
    v105 = v232[0];
    v232[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WTF::fastFree((WTF *)v8, v104);
        v210 = v232[0];
        v232[0] = 0;
        if (v210)
        {
          if (*(_DWORD *)v210 == 1)
            WTF::fastFree(v210, v209);
          else
            --*(_DWORD *)v210;
        }
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
    v93 = 1;
    v8 = (unint64_t)v105;
LABEL_146:
    if (!*(_BYTE *)(a2 + 200))
      goto LABEL_355;
    v106 = *(unsigned int *)(a2 + 180);
    v223 = (WTF *)v8;
    v216 = v93;
    if ((_DWORD)v106)
    {
      if (v106 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19529F0F4);
      }
      v107 = a3;
      v108 = v3;
      v229 = (WTF *)WTF::fastMalloc((WTF *)(8 * v106));
      if (*(_DWORD *)(a2 + 180))
      {
        v109 = 0;
        v110 = 0;
        while (1)
        {
          v111 = *(_QWORD *)(a2 + 168) + v109;
          if (*(_QWORD *)v111)
            v112 = *(_DWORD *)(*(_QWORD *)v111 + 4);
          else
            v112 = 0;
          WTF::String::utf8();
          if ((_QWORD)v243)
            strlen((const char *)(v243 + 16));
          WTF::String::fromUTF8();
          v114 = v232[0];
          if (v232[0])
          {
            v115 = v112 == *((_DWORD *)v232[0] + 1);
            v232[0] = 0;
            if (*(_DWORD *)v114 == 2)
              WTF::StringImpl::destroy(v114, v113);
            else
              *(_DWORD *)v114 -= 2;
          }
          else
          {
            v115 = v112 == 0;
            v232[0] = 0;
          }
          v116 = (WTF *)v243;
          *(_QWORD *)&v243 = 0;
          if (!v116)
            goto LABEL_161;
          if (*(_DWORD *)v116 != 1)
            break;
          WTF::fastFree(v116, v113);
          if (!v115)
          {
LABEL_164:
            WTF::CString::CString((WTF::CString *)v232, "");
            goto LABEL_165;
          }
LABEL_162:
          WTF::String::utf8();
LABEL_165:
          v95 = v110 + 1;
          *((WTF::StringImpl **)v229 + v110) = v232[0];
          v8 = *(unsigned int *)(a2 + 180);
          v109 += 16;
          v110 = v95;
          if (v95 >= v8)
            goto LABEL_173;
        }
        --*(_DWORD *)v116;
LABEL_161:
        if (!v115)
          goto LABEL_164;
        goto LABEL_162;
      }
      v8 = 0;
      LODWORD(v95) = 0;
LABEL_173:
      v3 = v108;
      a3 = v107;
      v7 = v227;
    }
    else
    {
      v8 = 0;
      v229 = 0;
      LODWORD(v95) = 0;
    }
    if (!*(_BYTE *)(a2 + 200))
    {
      v8 = 0;
      v94 = 0;
LABEL_222:
      v222 = 0;
      LODWORD(v148) = 0;
      goto LABEL_223;
    }
    if ((_DWORD)v8)
    {
      if (v8 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x19529F114);
      }
      v117 = v95;
      v118 = WTF::fastMalloc((WTF *)(24 * v8));
      if (*(_BYTE *)(a2 + 200))
      {
        v94 = (WTF *)v118;
        v119 = *(unsigned int *)(a2 + 180);
        LODWORD(v95) = v117;
        if (v119 > v117)
        {
          v129 = 0;
          v130 = 3 * v119;
          v131 = 8;
          v132 = v229;
          v133 = 8 * v130;
          while (v133 != v129)
          {
            if (24 * v117 == v129)
            {
              __break(0xC471u);
              JUMPOUT(0x19529F0DCLL);
            }
            v134 = *(_QWORD *)v132;
            v132 = (WTF *)((char *)v132 + 8);
            v135 = v134 + 16;
            if (v134)
              v136 = v135;
            else
              v136 = 0;
            v137 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + v131);
            v138 = (_QWORD *)(v118 + v129);
            *v138 = 0;
            v138[1] = v136;
            v138[2] = v137;
            v131 += 16;
            v129 += 24;
            if (24 * v8 == v129)
              goto LABEL_195;
          }
        }
        else
        {
          v120 = 0;
          v121 = 24 * v119;
          v122 = 8;
          v123 = v229;
          while (v121 != v120)
          {
            v124 = *(_QWORD *)v123;
            v123 = (WTF *)((char *)v123 + 8);
            v125 = v124 + 16;
            if (v124)
              v126 = v125;
            else
              v126 = 0;
            v127 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + v122);
            v128 = (_QWORD *)(v118 + v120);
            *v128 = 0;
            v128[1] = v126;
            v128[2] = v127;
            v122 += 16;
            v120 += 24;
            if (24 * v8 == v120)
              goto LABEL_195;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x19529F0C4);
      }
LABEL_355:
      __break(1u);
LABEL_356:
      v12 = 0;
      continue;
    }
    break;
  }
  v94 = 0;
LABEL_195:
  v139 = *(unsigned int *)(a2 + 196);
  if (!(_DWORD)v139)
    goto LABEL_222;
  if (v139 >= 0x924924A)
  {
    __break(0xC471u);
    JUMPOUT(0x19529F11CLL);
  }
  v140 = v94;
  v141 = v95;
  v142 = WTF::fastMalloc((WTF *)(28 * v139));
  v222 = (WTF *)v142;
  v148 = 0;
  if (*(_DWORD *)(a2 + 196))
  {
    v149 = (char *)(v142 + 24);
    v150 = 6;
    v151 = vextq_s8((int8x16_t)0, (int8x16_t)0, 4uLL);
    v146.i64[0] = 0xFF00FF00FF00FFLL;
    v152.i64[0] = 0xFF000000FFLL;
    v152.i64[1] = 0xFF000000FFLL;
    v153.i64[0] = 0x100000001;
    v153.i64[1] = 0x100000001;
    LODWORD(v95) = v141;
    v94 = v140;
    do
    {
      v154 = *(_QWORD *)(a2 + 184);
      v155 = vextq_s8(v151, v147, 0xCuLL);
      v155.i32[3] = v145;
      if (*(_BYTE *)(v154 + v150 + 6))
      {
        v156 = *(_BYTE *)(v154 + v150 + 1);
        if (v156)
        {
          v155.i32[0] = *(_DWORD *)(v154 + v150 - 5);
          v157 = (uint16x4_t)vaddw_u8(v146, *(uint8x8_t *)v155.i8).u64[0];
          v155 = vandq_s8((int8x16_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v157), v152), v153), (int8x16_t)vmovl_s16((int16x4_t)vcgt_u16((uint16x4_t)0x4000C000C0004, (uint16x4_t)(*(_QWORD *)&v157 & 0xFF00FF00FF00FFLL))));
          if (*(unsigned __int8 *)(v154 + v150 - 1) - 1 < 0xC)
            v143 = (*(_BYTE *)(v154 + v150 - 1) - 1) + 1;
          else
            v143 = 0;
          switch(*(_BYTE *)(v154 + v150))
          {
            case 1:
              v144 = 1;
              goto LABEL_221;
            case 2:
              v156 = 1;
              v144 = 2;
              break;
            case 3:
              v156 = 1;
              v144 = 3;
              break;
            case 4:
              v156 = 1;
              v144 = 4;
              break;
            case 5:
              v156 = 1;
              v144 = 5;
              break;
            case 6:
              v156 = 1;
              v144 = 6;
              break;
            case 7:
              v156 = 1;
              v144 = 7;
              break;
            case 8:
              v156 = 1;
              v144 = 8;
              break;
            case 9:
              v156 = 1;
              v144 = 9;
              break;
            case 0xA:
              v156 = 1;
              v144 = 10;
              break;
            case 0xB:
              v156 = 1;
              v144 = 11;
              break;
            case 0xC:
              v156 = 1;
              v144 = 12;
              break;
            default:
              v144 = 0;
LABEL_221:
              v156 = 1;
              break;
          }
        }
      }
      else
      {
        v156 = 0;
      }
      *(int8x16_t *)(v149 - 24) = v155;
      *((_DWORD *)v149 - 2) = v143;
      *((_DWORD *)v149 - 1) = v144;
      *v149 = v156;
      v149 += 28;
      ++v148;
      v145 = v155.i32[3];
      v147 = vextq_s8(v155, v155, 4uLL);
      v150 += 16;
    }
    while (v148 < *(unsigned int *)(a2 + 196));
  }
  else
  {
    LODWORD(v95) = v141;
    v94 = v140;
  }
LABEL_223:
  v224 = v94;
  v215 = v95;
  if (*(_BYTE *)(a2 + 200))
  {
    v158 = (char *)*(unsigned int *)(a2 + 196);
    if ((_DWORD)v158)
    {
      v211 = v3;
      v212 = v6;
      v213 = a3;
      if (v158 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19529F0FCLL);
      }
      v3 = 0;
      v214 = WTF::fastMalloc((WTF *)(32 * (_QWORD)v158));
      v6 = v214 + 16;
      v7 = 8;
      a3 = v222;
      do
      {
        if (!*(_BYTE *)(a2 + 200))
          goto LABEL_355;
        if ((unint64_t)v3 >= *(unsigned int *)(a2 + 196))
        {
          __break(0xC471u);
          JUMPOUT(0x19529F09CLL);
        }
        v159 = *(_QWORD *)(a2 + 184);
        if (*(_BYTE *)(v159 + v7 + 4))
        {
          if ((unint64_t)v3 >= v148)
          {
            __break(0xC471u);
            JUMPOUT(0x19529F0BCLL);
          }
          v160 = WebCore::WebGPU::ConvertToBackingContext::convertToBacking(v230, *(unsigned __int8 *)(v159 + v7 - 8));
          if (*((_BYTE *)a3 + 24))
            v161 = a3;
          else
            v161 = 0;
          v162 = *(_DWORD *)(v159 + v7);
        }
        else
        {
          v160 = 0;
          v161 = 0;
          v162 = 0;
        }
        *(_QWORD *)(v6 - 16) = 0;
        *(_DWORD *)(v6 - 8) = v160;
        *(_DWORD *)(v6 - 4) = 0;
        *(_QWORD *)v6 = v161;
        ++v3;
        a3 = (WTF *)((char *)a3 + 28);
        v7 += 16;
        *(_DWORD *)(v6 + 8) = v162;
        *(_DWORD *)(v6 + 12) = 0;
        v6 += 32;
      }
      while (v158 != v3);
      v163 = *(unsigned __int8 *)(a2 + 200);
      v246 = 0;
      v244 = 0u;
      v245 = 0u;
      v243 = 0u;
      a3 = v213;
      if (v163)
      {
        v3 = v211;
        LODWORD(v6) = v212;
        goto LABEL_241;
      }
      v164 = (uint64_t *)v213;
      v166 = 0;
      v3 = v211;
      LODWORD(v6) = v212;
    }
    else
    {
      v214 = 0;
      v246 = 0;
      v244 = 0u;
      v245 = 0u;
      v243 = 0u;
LABEL_241:
      v164 = (uint64_t *)a3;
      v166 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v230 + 176))(v230, *(_QWORD *)(*(_QWORD *)(a2 + 144) + 8));
    }
    v94 = v224;
    v165 = (WTF *)v214;
  }
  else
  {
    v164 = (uint64_t *)a3;
    LODWORD(v158) = 0;
    v165 = 0;
    v166 = 0;
    v243 = 0uLL;
  }
  v167 = (char *)v223 + 16;
  if (v216)
    v168 = v223 == 0;
  else
    v168 = 1;
  if (v168)
    v167 = 0;
  *((_QWORD *)&v243 + 1) = v166;
  *(_QWORD *)&v244 = v167;
  v169 = v168;
  *((_QWORD *)&v244 + 1) = v8;
  *(_QWORD *)&v245 = v94;
  *((_QWORD *)&v245 + 1) = v158;
  v246 = v165;
  v170 = v165;
  v242 = 0;
  v241[0] = 0;
  v241[1] = 7;
  if (*(_BYTE *)(a2 + 78))
    v171 = *(_BYTE *)(a2 + 77);
  else
    v171 = 0;
  LODWORD(v242) = v171;
  v239 = 0u;
  v240 = 0u;
  v237 = 0u;
  v238 = 0u;
  v235 = 0u;
  v236 = 0u;
  v233 = 0u;
  v234 = 0u;
  *(_OWORD *)v232 = 0u;
  if (v255)
    v172 = (WTF::StringImpl *)(v255 + 16);
  else
    v172 = 0;
  v232[1] = v172;
  v173 = *(_QWORD *)(a2 + 8);
  if (v173)
  {
    v174 = v169;
    v175 = v221;
    if (*(_QWORD *)(v173 + 8))
    {
      v176 = v230;
      v177 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 112))(v230);
      goto LABEL_264;
    }
    v177 = 0;
  }
  else
  {
    v174 = v169;
    v177 = 0;
    v175 = v221;
  }
  v176 = v230;
LABEL_264:
  v233 = (unint64_t)v177;
  v178 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v176 + 176))(v176, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8));
  v179 = (char *)v226 + 16;
  if (v219)
    v180 = v226 == 0;
  else
    v180 = 1;
  v181 = v180;
  if (v180)
    v179 = 0;
  *(_QWORD *)&v234 = v178;
  *((_QWORD *)&v234 + 1) = v179;
  *(_QWORD *)&v235 = v6;
  *((_QWORD *)&v235 + 1) = v225;
  *(_QWORD *)&v236 = v217;
  *((_QWORD *)&v236 + 1) = v3;
  v182 = *(unsigned __int8 *)(a2 + 78);
  v231 = v181;
  if (*(_BYTE *)(a2 + 78))
  {
    v183 = v241;
    if (!*(_BYTE *)(a2 + 77))
      v183 = 0;
    *(_QWORD *)&v237 = v183;
    if (((*(_BYTE *)(a2 + 72) - 1) & 0xFC) != 0)
      v184 = 0;
    else
      v184 = (*(_BYTE *)(a2 + 72) - 1) + 1;
    if (*(_BYTE *)(a2 + 73))
      v185 = 2;
    else
      v185 = 1;
    if (*(_BYTE *)(a2 + 74))
      v186 = v185;
    else
      v186 = 0;
    *((_QWORD *)&v237 + 1) = __PAIR64__(v186, v184);
    LODWORD(v238) = *(_BYTE *)(a2 + 75) != 0;
    v187 = *(unsigned __int8 *)(a2 + 76);
    if (v187 == 2)
      v182 = 2;
    else
      v182 = v187 == 1;
  }
  else
  {
    *(_QWORD *)&v237 = 0;
    *((_QWORD *)&v237 + 1) = 3;
    LODWORD(v238) = 0;
  }
  DWORD1(v238) = v182;
  v188 = &v247;
  if (!*(_BYTE *)(a2 + 124))
    v188 = 0;
  *((_QWORD *)&v238 + 1) = v188;
  *(_QWORD *)&v239 = 0;
  v189 = *(_BYTE *)(a2 + 136);
  if (!*(_BYTE *)(a2 + 140))
    v189 = 0;
  *((int8x8_t *)&v239 + 1) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(_BYTE *)(a2 + 140) == 0), 0x1FuLL)), (int8x8_t)0xFFFFFFFF00000001, *(int8x8_t *)(a2 + 128));
  LODWORD(v240) = v189;
  v190 = &v243;
  if (!*(_BYTE *)(a2 + 200))
    v190 = 0;
  *((_QWORD *)&v240 + 1) = v190;
  RenderPipeline = wgpuDeviceCreateRenderPipeline();
  v193 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v193 + 8) = 1;
  *(_QWORD *)v193 = off_1E3351640;
  *(_QWORD *)(v193 + 16) = 0;
  *(_QWORD *)(v193 + 24) = RenderPipeline;
  ++*(_DWORD *)(v220 + 8);
  *(_QWORD *)(v193 + 32) = v220;
  if (v170)
    WTF::fastFree(v170, v192);
  if (v222)
    WTF::fastFree(v222, v192);
  v194 = (WTF *)v3;
  if (v224)
    WTF::fastFree(v224, v192);
  if (v215)
  {
    v195 = 8 * v215;
    v196 = (WTF **)v229;
    do
    {
      v197 = *v196;
      *v196 = 0;
      if (v197)
      {
        if (*(_DWORD *)v197 == 1)
          WTF::fastFree(v197, v192);
        else
          --*(_DWORD *)v197;
      }
      ++v196;
      v195 -= 8;
    }
    while (v195);
  }
  if (v229)
    WTF::fastFree(v229, v192);
  v198 = v164;
  if ((v174 & 1) != 0)
  {
LABEL_313:
    if (!v194)
      goto LABEL_315;
    goto LABEL_314;
  }
  if (*(_DWORD *)v223 != 1)
  {
    --*(_DWORD *)v223;
    goto LABEL_313;
  }
  WTF::fastFree(v223, v192);
  if (v194)
LABEL_314:
    WTF::fastFree(v194, v192);
LABEL_315:
  if ((_DWORD)v10)
  {
    v199 = 16 * v10;
    v200 = v228;
    do
    {
      v201 = *(WTF **)v200;
      if (*(_QWORD *)v200)
      {
        *(_QWORD *)v200 = 0;
        *((_DWORD *)v200 + 2) = 0;
        WTF::fastFree(v201, v192);
      }
      v200 = (WTF *)((char *)v200 + 16);
      v199 -= 16;
    }
    while (v199);
  }
  if (v228)
    WTF::fastFree(v228, v192);
  if (v225)
    WTF::fastFree(v225, v192);
  if (v218)
  {
    v202 = 8 * v218;
    v203 = (WTF **)v175;
    do
    {
      v204 = *v203;
      *v203 = 0;
      if (v204)
      {
        if (*(_DWORD *)v204 == 1)
          WTF::fastFree(v204, v192);
        else
          --*(_DWORD *)v204;
      }
      ++v203;
      v202 -= 8;
    }
    while (v202);
  }
  if (v175)
    WTF::fastFree(v175, v192);
  if ((v231 & 1) == 0)
  {
    if (*(_DWORD *)v226 == 1)
      WTF::fastFree(v226, v192);
    else
      --*(_DWORD *)v226;
  }
  v205 = (WTF *)v255;
  v255 = 0;
  if (v205)
  {
    if (*(_DWORD *)v205 == 1)
      WTF::fastFree(v205, v192);
    else
      --*(_DWORD *)v205;
  }
  *v198 = v193;
  result = v227;
  if (v227)
    return wgpuDeviceRelease();
  return result;
}

WTF *WebCore::WebGPU::DeviceImpl::createComputePipelineAsync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  void *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  _BOOL4 v27;
  WTF *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  BOOL v57;
  char v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  WTF **v62;
  WTF *v63;
  WTF *result;
  void *v65;
  WTF *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71[8];
  WTF *v72;
  char *v73;

  v6 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v7 = v5;
  if (v6)
  {
    wgpuDeviceReference();
    v7 = *(_QWORD *)(a1 + 64);
  }
  v9 = *a3;
  *a3 = 0;
  WTF::String::utf8();
  v10 = *(unsigned __int8 *)(a2 + 32);
  if (*(_BYTE *)(a2 + 32))
  {
    v11 = a2 + 24;
    WTF::String::utf8();
    if (!*(_BYTE *)(a2 + 32))
    {
      __break(1u);
      goto LABEL_114;
    }
    v12 = v71[0];
    if (*(_QWORD *)v11)
      v13 = *(_DWORD *)(*(_QWORD *)v11 + 4);
    else
      v13 = 0;
    if (v71[0])
      strlen((const char *)v71[0] + 16);
    WTF::String::fromUTF8();
    v15 = v71[0];
    if (v71[0])
    {
      v16 = *((_DWORD *)v71[0] + 1);
      v71[0] = 0;
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
      if (v13 != v16)
        goto LABEL_13;
    }
    else if (v13)
    {
LABEL_13:
      WTF::CString::CString((WTF::CString *)v71, "");
      v18 = v71[0];
      v71[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
        {
          WTF::fastFree(v12, v17);
          v66 = v71[0];
          v71[0] = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 1)
              WTF::fastFree(v66, v65);
            else
              --*(_DWORD *)v66;
          }
        }
        else
        {
          --*(_DWORD *)v12;
        }
      }
      v12 = v18;
    }
  }
  else
  {
    v12 = 0;
  }
  v19 = *(unsigned int *)(a2 + 52);
  v69 = v9;
  v70 = v7;
  v68 = v10;
  if (!(_DWORD)v19)
  {
    LODWORD(v29) = 0;
    v20 = 0;
    v33 = 0;
    LODWORD(v30) = 0;
    goto LABEL_62;
  }
  v67 = v6;
  if (v19 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x19529F6F8);
  }
  v20 = (WTF *)WTF::fastMalloc((WTF *)(8 * v19));
  if (!*(_DWORD *)(a2 + 52))
  {
    LODWORD(v29) = 0;
    v33 = 0;
    LODWORD(v30) = 0;
    goto LABEL_62;
  }
  v21 = 0;
  v22 = 0;
  do
  {
    v23 = *(_QWORD *)(a2 + 40) + v21;
    if (*(_QWORD *)v23)
      v24 = *(_DWORD *)(*(_QWORD *)v23 + 4);
    else
      v24 = 0;
    WTF::String::utf8();
    if (v73)
      strlen(v73 + 16);
    WTF::String::fromUTF8();
    v26 = v71[0];
    if (v71[0])
    {
      v27 = v24 == *((_DWORD *)v71[0] + 1);
      v71[0] = 0;
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    else
    {
      v27 = v24 == 0;
      v71[0] = 0;
    }
    v28 = (WTF *)v73;
    v73 = 0;
    if (!v28)
      goto LABEL_32;
    if (*(_DWORD *)v28 != 1)
    {
      --*(_DWORD *)v28;
LABEL_32:
      if (v27)
        goto LABEL_33;
      goto LABEL_35;
    }
    WTF::fastFree(v28, v25);
    if (v27)
    {
LABEL_33:
      WTF::String::utf8();
      goto LABEL_36;
    }
LABEL_35:
    WTF::CString::CString((WTF::CString *)v71, "");
LABEL_36:
    v29 = v22 + 1;
    *((WTF::StringImpl **)v20 + v22) = v71[0];
    v30 = *(unsigned int *)(a2 + 52);
    v21 += 16;
    v22 = v29;
  }
  while (v29 < v30);
  v6 = v67;
  if ((_DWORD)v30)
  {
    if (v30 < 0xAAAAAAB)
    {
      v31 = 24 * v30;
      v32 = WTF::fastMalloc((WTF *)(24 * v30));
      v33 = (WTF::StringImpl *)v32;
      v34 = *(unsigned int *)(a2 + 52);
      if (v34 > v29)
      {
        v44 = 0;
        v45 = 0;
        v46 = 24 * v34;
        v47 = 8;
        while (v46 != v44)
        {
          if (v29 == v45)
          {
            __break(0xC471u);
            JUMPOUT(0x19529F6F0);
          }
          v48 = *((_QWORD *)v20 + v45);
          if (v48)
            v49 = v48 + 16;
          else
            v49 = 0;
          v50 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + v47);
          v51 = (_QWORD *)(v32 + v44);
          *v51 = 0;
          v51[1] = v49;
          v51[2] = v50;
          ++v45;
          v47 += 16;
          v44 += 24;
          if (v31 == v44)
            goto LABEL_62;
        }
      }
      else
      {
        v35 = 0;
        v36 = 24 * v34;
        v37 = 8;
        v38 = v20;
        while (v36 != v35)
        {
          v39 = *(_QWORD *)v38;
          v38 = (WTF *)((char *)v38 + 8);
          v40 = v39 + 16;
          if (v39)
            v41 = v40;
          else
            v41 = 0;
          v42 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + v37);
          v43 = (_QWORD *)(v32 + v35);
          *v43 = 0;
          v43[1] = v41;
          v43[2] = v42;
          v37 += 16;
          v35 += 24;
          if (v31 == v35)
            goto LABEL_62;
        }
      }
    }
LABEL_114:
    __break(0xC471u);
    JUMPOUT(0x19529F6E8);
  }
  v33 = 0;
LABEL_62:
  if (v72)
    v52 = (WTF *)((char *)v72 + 16);
  else
    v52 = 0;
  v71[0] = 0;
  v71[1] = v52;
  v53 = *(_QWORD *)(a2 + 8);
  if (v53 && *(_QWORD *)(v53 + 8))
    v54 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5);
  else
    v54 = 0;
  v71[2] = v54;
  v71[3] = 0;
  v55 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 176))(v5, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8));
  v56 = (WTF *)((char *)v12 + 16);
  if (v68)
    v57 = v12 == 0;
  else
    v57 = 1;
  v58 = v57;
  if (v57)
    v56 = 0;
  v71[4] = v55;
  v71[5] = v56;
  v71[6] = (WTF::StringImpl *)v30;
  v71[7] = v33;
  ++*(_DWORD *)(v70 + 8);
  v59 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v59 = MEMORY[0x1E0C809A0];
  v59[1] = 50331650;
  v59[2] = WTF::BlockPtr<void ()(WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &&)>::fromCallable<WebCore::WebGPU::DeviceImpl::createComputePipelineAsync(WebCore::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::ComputePipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPUComputePipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &)#1}>(WebCore::WebGPU::DeviceImpl::createComputePipelineAsync(WebCore::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::ComputePipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPUComputePipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &)#1})::{lambda(void *,WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &)#1}::__invoke;
  v59[3] = &WTF::BlockPtr<void ()(WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &&)>::fromCallable<WebCore::WebGPU::DeviceImpl::createComputePipelineAsync(WebCore::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::ComputePipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPUComputePipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &)#1}>(WebCore::WebGPU::DeviceImpl::createComputePipelineAsync(WebCore::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::ComputePipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPUComputePipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &)#1})::descriptor;
  v59[4] = v70;
  v59[5] = v69;
  _Block_copy(v59);
  wgpuDeviceCreateComputePipelineAsync();
  _Block_release(v59);
  if (v33)
    WTF::fastFree(v33, v60);
  if ((_DWORD)v29)
  {
    v61 = 8 * v29;
    v62 = (WTF **)v20;
    do
    {
      v63 = *v62;
      *v62 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 1)
          WTF::fastFree(v63, v60);
        else
          --*(_DWORD *)v63;
      }
      ++v62;
      v61 -= 8;
    }
    while (v61);
  }
  if (v20)
    WTF::fastFree(v20, v60);
  if ((v58 & 1) == 0)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v60);
    else
      --*(_DWORD *)v12;
  }
  result = v72;
  v72 = 0;
  if (!result)
  {
LABEL_95:
    if (!v6)
      return result;
    return (WTF *)wgpuDeviceRelease();
  }
  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    goto LABEL_95;
  }
  result = (WTF *)WTF::fastFree(result, v60);
  if (v6)
    return (WTF *)wgpuDeviceRelease();
  return result;
}

WTF *WebCore::WebGPU::DeviceImpl::createRenderPipelineAsync(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  WTF *v6;
  _DWORD *v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int i;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  void *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  unint64_t v21;
  WTF *v22;
  unint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int32x2_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  uint32x2_t v78;
  int32x2_t v79;
  int v80;
  unsigned int v81;
  int v82;
  uint32x2_t v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  BOOL v91;
  WTF *v92;
  int v93;
  WTF *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  void *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  _BOOL4 v112;
  WTF *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  WTF *v136;
  uint64_t v137;
  int v138;
  int v139;
  __int32 v140;
  uint16x8_t v141;
  int8x16_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int32x4_t v148;
  uint64_t v149;
  int8x16_t v150;
  char v151;
  uint16x4_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  WTF *v157;
  int v158;
  int v159;
  WTF *v160;
  uint64_t v161;
  char *v162;
  BOOL v163;
  char v164;
  WTF *v165;
  unsigned __int8 v166;
  WTF::StringImpl *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  BOOL v173;
  char v174;
  int v175;
  _QWORD *v176;
  int v177;
  int v178;
  int v179;
  int v180;
  char **v181;
  unsigned __int8 v182;
  __int128 *v183;
  _QWORD *v184;
  void *v185;
  uint64_t v186;
  WTF **v187;
  WTF *v188;
  uint64_t v189;
  WTF *v190;
  WTF *v191;
  uint64_t v192;
  WTF **v193;
  WTF *v194;
  WTF *result;
  void *v196;
  WTF *v197;
  void *v198;
  WTF *v199;
  int v200;
  WTF *v201;
  _DWORD *v202;
  uint64_t v203;
  WTF *v204;
  WTF *v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  unint64_t v211;
  WTF *v212;
  WTF *v213;
  WTF *v214;
  WTF *v215;
  WTF *v216;
  WTF *v217;
  WTF *v218;
  WTF *v219;
  uint64_t v220;
  WTF::StringImpl *v221[2];
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  _QWORD v230[2];
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  WTF *v235;
  char *v236;
  uint64_t v237;
  char v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  int v242;
  int v243;
  uint64_t v244;

  v6 = *(WTF **)(a1 + 56);
  v7 = *(_DWORD **)(a1 + 64);
  v220 = (uint64_t)v7;
  if (v6)
  {
    wgpuDeviceReference();
    v7 = *(_DWORD **)(a1 + 64);
  }
  ++v7[2];
  v9 = *a3;
  *a3 = 0;
  WTF::String::utf8();
  LODWORD(v10) = *(unsigned __int8 *)(a2 + 32);
  if (!*(_BYTE *)(a2 + 32))
  {
    v3 = 0;
    goto LABEL_18;
  }
  v11 = a2 + 24;
  WTF::String::utf8();
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_359;
  v3 = (unint64_t)v221[0];
  if (!*(_QWORD *)v11)
    goto LABEL_360;
  for (i = *(_DWORD *)(*(_QWORD *)v11 + 4); ; i = 0)
  {
    if (v3)
      strlen((const char *)(v3 + 16));
    WTF::String::fromUTF8();
    v14 = v221[0];
    if (v221[0])
    {
      v15 = *((_DWORD *)v221[0] + 1);
      v221[0] = 0;
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
      if (i == v15)
        goto LABEL_18;
    }
    else if (!i)
    {
      goto LABEL_18;
    }
    WTF::CString::CString((WTF::CString *)v221, "");
    v17 = v221[0];
    v221[0] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        WTF::fastFree((WTF *)v3, v16);
        v197 = v221[0];
        v221[0] = 0;
        if (v197)
        {
          if (*(_DWORD *)v197 == 1)
            WTF::fastFree(v197, v196);
          else
            --*(_DWORD *)v197;
        }
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
    v3 = (unint64_t)v17;
LABEL_18:
    v217 = (WTF *)v3;
    v18 = *(unsigned int *)(a2 + 52);
    v211 = v9;
    v210 = v10;
    if (!(_DWORD)v18)
    {
      LODWORD(v28) = 0;
      v19 = 0;
LABEL_54:
      v208 = 0;
      v31 = 0;
      goto LABEL_55;
    }
    if (v18 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1952A0A74);
    }
    v19 = (WTF *)WTF::fastMalloc((WTF *)(8 * v18));
    if (!*(_DWORD *)(a2 + 52))
    {
      LODWORD(v28) = 0;
      goto LABEL_54;
    }
    v20 = v6;
    v9 = 0;
    v21 = 0;
    do
    {
      v22 = v19;
      v23 = *(_QWORD *)(a2 + 40) + v9;
      if (*(_QWORD *)v23)
        v24 = *(_DWORD *)(*(_QWORD *)v23 + 4);
      else
        v24 = 0;
      WTF::String::utf8();
      if (v236)
        strlen(v236 + 16);
      WTF::String::fromUTF8();
      v26 = v221[0];
      if (v221[0])
      {
        v3 = v24 == *((_DWORD *)v221[0] + 1);
        v221[0] = 0;
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      else
      {
        v3 = v24 == 0;
        v221[0] = 0;
      }
      v19 = v22;
      v27 = (WTF *)v236;
      v236 = 0;
      if (!v27)
        goto LABEL_32;
      if (*(_DWORD *)v27 != 1)
      {
        --*(_DWORD *)v27;
LABEL_32:
        if ((_DWORD)v3)
          goto LABEL_33;
        goto LABEL_35;
      }
      WTF::fastFree(v27, v25);
      if ((_DWORD)v3)
      {
LABEL_33:
        WTF::String::utf8();
        goto LABEL_36;
      }
LABEL_35:
      WTF::CString::CString((WTF::CString *)v221, "");
LABEL_36:
      v28 = v21 + 1;
      *((WTF::StringImpl **)v22 + v21) = v221[0];
      v29 = *(unsigned int *)(a2 + 52);
      v9 += 16;
      v21 = v28;
    }
    while (v28 < v29);
    if ((_DWORD)v29)
    {
      if (v29 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x1952A0A94);
      }
      v6 = v20;
      v208 = *(_DWORD *)(a2 + 52);
      v30 = 24 * v29;
      v31 = WTF::fastMalloc((WTF *)(24 * v29));
      v32 = *(unsigned int *)(a2 + 52);
      if (v32 > v28)
      {
        v95 = 0;
        v96 = 0;
        v97 = 24 * v32;
        v98 = 8;
        while (v97 != v95)
        {
          if (v28 == v96)
          {
            __break(0xC471u);
            JUMPOUT(0x1952A0A64);
          }
          v99 = *((_QWORD *)v19 + v96);
          if (v99)
            v100 = v99 + 16;
          else
            v100 = 0;
          v101 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + v98);
          v102 = (_QWORD *)(v31 + v95);
          *v102 = 0;
          v102[1] = v100;
          v102[2] = v101;
          ++v96;
          v98 += 16;
          v95 += 24;
          if (v30 == v95)
            goto LABEL_55;
        }
      }
      else
      {
        v33 = 0;
        v34 = 24 * v32;
        v35 = 8;
        v36 = v19;
        while (v34 != v33)
        {
          v37 = *(_QWORD *)v36;
          v36 = (WTF *)((char *)v36 + 8);
          v38 = v37 + 16;
          if (v37)
            v39 = v38;
          else
            v39 = 0;
          v40 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + v35);
          v41 = (_QWORD *)(v31 + v33);
          *v41 = 0;
          v41[1] = v39;
          v41[2] = v40;
          v35 += 16;
          v33 += 24;
          if (v30 == v33)
            goto LABEL_55;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1952A0A44);
    }
    v208 = 0;
    v31 = 0;
    v6 = v20;
LABEL_55:
    v209 = v28;
    v42 = *(unsigned int *)(a2 + 68);
    v216 = (WTF *)v31;
    if (!(_DWORD)v42)
    {
      LODWORD(v10) = 0;
      v218 = 0;
LABEL_85:
      v207 = 0;
      v215 = 0;
      goto LABEL_86;
    }
    if (v42 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1952A0A7CLL);
    }
    v43 = WTF::fastMalloc((WTF *)(16 * v42));
    v218 = (WTF *)v43;
    if (!*(_DWORD *)(a2 + 68))
    {
      LODWORD(v10) = 0;
      goto LABEL_85;
    }
    v44 = v43;
    v204 = v6;
    v45 = v19;
    v10 = 0;
    v3 = 178956971;
    v46 = 1;
    v9 = 40;
    do
    {
      v47 = v46;
      v48 = *(_QWORD *)(a2 + 56) + 40 * v10;
      LODWORD(v46) = *(unsigned __int8 *)(v48 + 32);
      if (*(_BYTE *)(v48 + 32) && (v46 = *(unsigned int *)(v48 + 28), (_DWORD)v46))
      {
        if (v46 >= 0xAAAAAAB)
        {
          __break(0xC471u);
          JUMPOUT(0x1952A0A5CLL);
        }
        v49 = 24 * v46;
        v50 = WTF::fastMalloc((WTF *)(24 * v46));
        LODWORD(v46) = (v49 & 0xFFFFFFF8) / 0x18;
        LODWORD(v51) = *(_DWORD *)(v48 + 28);
        if ((_DWORD)v51)
        {
          v52 = 0;
          v51 = 0;
          v53 = *(_QWORD *)(v48 + 16);
          v44 = (uint64_t)v218;
          do
          {
            v54 = v53 + v52;
            if (*(unsigned __int8 *)(v53 + v52) - 1 >= 0x1E)
              v55 = 1;
            else
              v55 = (*(_BYTE *)(v53 + v52) - 1) + 2;
            v56 = *(_QWORD *)(v54 + 8);
            v57 = *(_DWORD *)(v54 + 16);
            v58 = v50 + v52;
            *(_DWORD *)v58 = v55;
            *(_QWORD *)(v58 + 8) = v56;
            *(_DWORD *)(v58 + 16) = v57;
            ++v51;
            v52 += 24;
          }
          while (v51 < *(unsigned int *)(v48 + 28));
        }
        else
        {
          v44 = (uint64_t)v218;
        }
      }
      else
      {
        v50 = 0;
        LODWORD(v51) = 0;
      }
      v59 = v44 + 16 * v10;
      *(_QWORD *)v59 = v50;
      *(_DWORD *)(v59 + 8) = v46;
      *(_DWORD *)(v59 + 12) = v51;
      ++v10;
      v60 = *(unsigned int *)(a2 + 68);
      v46 = v47 + 1;
    }
    while (v10 < v60);
    if ((_DWORD)v60)
    {
      if (v60 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x1952A0A9CLL);
      }
      v3 = *(unsigned int *)(a2 + 68);
      v19 = v45;
      v61 = WTF::fastMalloc((WTF *)(32 * v60));
      v62 = 0;
      v63 = 0;
      v64 = 40 * *(unsigned int *)(a2 + 68);
      v207 = v3;
      v6 = v204;
      do
      {
        if (v64 == v63)
        {
          __break(0xC471u);
          JUMPOUT(0x1952A0A34);
        }
        v65 = *(_QWORD *)(a2 + 56) + v63;
        if (*(_BYTE *)(v65 + 32))
        {
          v66 = *(_QWORD *)v65;
          v67 = *(unsigned __int8 *)(v65 + 8) != 0;
          if (!v47)
            goto LABEL_371;
        }
        else
        {
          v67 = 0;
          v66 = 0xFFFFFFFFLL;
          if (!v47)
          {
LABEL_371:
            __break(0xC471u);
            JUMPOUT(0x1952A0A3CLL);
          }
        }
        v68 = *(unsigned int *)(v44 + 12);
        v69 = *(_QWORD *)v44;
        v44 += 16;
        v70 = v61 + v62;
        *(_QWORD *)v70 = v66;
        *(_DWORD *)(v70 + 8) = v67;
        v63 += 40;
        *(_QWORD *)(v70 + 16) = v68;
        *(_QWORD *)(v70 + 24) = v69;
        v62 += 32;
        --v47;
      }
      while (40 * v3 != v63);
      v215 = (WTF *)v61;
    }
    else
    {
      v207 = 0;
      v215 = 0;
      v19 = v45;
      v6 = v204;
    }
LABEL_86:
    v236 = 0;
    if (*(_BYTE *)(a2 + 124))
    {
      LODWORD(v237) = WebCore::WebGPU::ConvertToBackingContext::convertToBacking(v220, *(unsigned __int8 *)(a2 + 80));
      v72 = *(unsigned __int16 *)(a2 + 81);
      BYTE4(v237) = 0;
      v238 = 0;
      if (v72 >= 0x100)
      {
        HIDWORD(v237) = v72;
        v238 = 1;
      }
      v73 = *(unsigned __int8 *)(a2 + 84);
      if (*(_BYTE *)(a2 + 84))
      {
        v74 = *(unsigned __int8 *)(a2 + 83) - 1;
        if (v74 > 6)
          v73 = 1;
        else
          v73 = dword_1968DDA38[(char)v74];
      }
      LODWORD(v239) = v73;
      v76 = *(unsigned __int8 *)(a2 + 85) - 1;
      if (v76 > 6)
        v77 = 1;
      else
        v77 = dword_1968DDA38[(char)v76];
      v71.i8[0] = *(_BYTE *)(a2 + 86);
      v71.i8[4] = *(_BYTE *)(a2 + 87);
      v78 = (uint32x2_t)vand_s8((int8x8_t)vadd_s32(v71, (int32x2_t)-1), (int8x8_t)0xFF000000FFLL);
      v79 = (int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)v78, (int32x2_t)0x100000001), (int8x8_t)vcgt_u32((uint32x2_t)0x700000007, v78));
      *((int32x2_t *)&v239 + 1) = v79;
      if (*(unsigned __int8 *)(a2 + 88) - 1 < 7)
        v80 = (*(_BYTE *)(a2 + 88) - 1) + 1;
      else
        v80 = 0;
      DWORD1(v239) = v77;
      LODWORD(v240) = v80;
      v81 = *(unsigned __int8 *)(a2 + 89) - 1;
      if (v81 > 6)
        v82 = 1;
      else
        v82 = dword_1968DDA38[(char)v81];
      v79.i8[0] = *(_BYTE *)(a2 + 90);
      v79.i8[4] = *(_BYTE *)(a2 + 91);
      v83 = (uint32x2_t)vand_s8((int8x8_t)vadd_s32(v79, (int32x2_t)-1), (int8x8_t)0xFF000000FFLL);
      *((int8x8_t *)&v240 + 1) = vand_s8((int8x8_t)vadd_s32((int32x2_t)v83, (int32x2_t)0x100000001), (int8x8_t)vcgt_u32((uint32x2_t)0x700000007, v83));
      if (*(unsigned __int8 *)(a2 + 92) - 1 < 7)
        v84 = (*(_BYTE *)(a2 + 92) - 1) + 1;
      else
        v84 = 0;
      DWORD1(v240) = v82;
      if (*(_BYTE *)(a2 + 100))
        v85 = *(_DWORD *)(a2 + 96);
      else
        v85 = 0;
      v86 = *(_DWORD *)(a2 + 104);
      if (!*(_BYTE *)(a2 + 108))
        v86 = 0;
      *(_QWORD *)&v241 = __PAIR64__(v85, v84);
      *((_QWORD *)&v241 + 1) = __PAIR64__(*(_DWORD *)(a2 + 112), v86);
      v75 = *(_DWORD *)(a2 + 120);
      v242 = *(_DWORD *)(a2 + 116);
    }
    else
    {
      v237 = 0;
      v238 = 1;
      v239 = 0u;
      v240 = 0u;
      v241 = 0u;
      v75 = 0;
      v242 = 0;
    }
    v243 = v75;
    if (!*(_BYTE *)(a2 + 200))
    {
      v9 = 0;
      v94 = 0;
      v219 = 0;
      LODWORD(v3) = 0;
      v206 = 0;
      v213 = 0;
      goto LABEL_222;
    }
    if (!*(_BYTE *)(a2 + 160))
    {
      v93 = 0;
      v3 = 0;
      goto LABEL_146;
    }
    v87 = a2 + 152;
    WTF::String::utf8();
    if (*(_BYTE *)(a2 + 160))
    {
      v88 = *(_QWORD *)v87 ? *(_DWORD *)(*(_QWORD *)v87 + 4) : 0;
      if (*(_BYTE *)(a2 + 200))
      {
        v3 = (unint64_t)v221[0];
        WTF::String::utf8();
        if ((_QWORD)v232)
          strlen((const char *)(v232 + 16));
        WTF::String::fromUTF8();
        v90 = v221[0];
        if (v221[0])
        {
          v91 = v88 == *((_DWORD *)v221[0] + 1);
          v221[0] = 0;
          if (*(_DWORD *)v90 == 2)
            WTF::StringImpl::destroy(v90, v89);
          else
            *(_DWORD *)v90 -= 2;
        }
        else
        {
          v91 = v88 == 0;
          v221[0] = 0;
        }
        v92 = (WTF *)v232;
        *(_QWORD *)&v232 = 0;
        if (!v92)
        {
LABEL_126:
          if (!v91)
            goto LABEL_142;
LABEL_127:
          v93 = 1;
          goto LABEL_146;
        }
        if (*(_DWORD *)v92 != 1)
        {
          --*(_DWORD *)v92;
          goto LABEL_126;
        }
        WTF::fastFree(v92, v89);
        if (v91)
          goto LABEL_127;
LABEL_142:
        WTF::CString::CString((WTF::CString *)v221, "");
        v104 = v221[0];
        v221[0] = 0;
        if (v3)
        {
          if (*(_DWORD *)v3 == 1)
          {
            WTF::fastFree((WTF *)v3, v103);
            v199 = v221[0];
            v221[0] = 0;
            if (v199)
            {
              if (*(_DWORD *)v199 == 1)
                WTF::fastFree(v199, v198);
              else
                --*(_DWORD *)v199;
            }
          }
          else
          {
            --*(_DWORD *)v3;
          }
        }
        v93 = 1;
        v3 = (unint64_t)v104;
LABEL_146:
        if (*(_BYTE *)(a2 + 200))
          break;
      }
    }
LABEL_359:
    __break(1u);
LABEL_360:
    ;
  }
  v105 = *(unsigned int *)(a2 + 180);
  v213 = (WTF *)v3;
  v206 = v93;
  if ((_DWORD)v105)
  {
    if (v105 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1952A0A84);
    }
    v219 = (WTF *)WTF::fastMalloc((WTF *)(8 * v105));
    if (*(_DWORD *)(a2 + 180))
    {
      v106 = 0;
      v107 = 0;
      while (1)
      {
        v108 = *(_QWORD *)(a2 + 168) + v106;
        if (*(_QWORD *)v108)
          v109 = *(_DWORD *)(*(_QWORD *)v108 + 4);
        else
          v109 = 0;
        WTF::String::utf8();
        if ((_QWORD)v232)
          strlen((const char *)(v232 + 16));
        WTF::String::fromUTF8();
        v111 = v221[0];
        if (v221[0])
        {
          v112 = v109 == *((_DWORD *)v221[0] + 1);
          v221[0] = 0;
          if (*(_DWORD *)v111 == 2)
            WTF::StringImpl::destroy(v111, v110);
          else
            *(_DWORD *)v111 -= 2;
        }
        else
        {
          v112 = v109 == 0;
          v221[0] = 0;
        }
        v113 = (WTF *)v232;
        *(_QWORD *)&v232 = 0;
        if (!v113)
          goto LABEL_161;
        if (*(_DWORD *)v113 != 1)
          break;
        WTF::fastFree(v113, v110);
        if (!v112)
        {
LABEL_164:
          WTF::CString::CString((WTF::CString *)v221, "");
          goto LABEL_165;
        }
LABEL_162:
        WTF::String::utf8();
LABEL_165:
        v3 = v107 + 1;
        *((WTF::StringImpl **)v219 + v107) = v221[0];
        v9 = *(unsigned int *)(a2 + 180);
        v106 += 16;
        v107 = v3;
        if (v3 >= v9)
          goto LABEL_174;
      }
      --*(_DWORD *)v113;
LABEL_161:
      if (!v112)
        goto LABEL_164;
      goto LABEL_162;
    }
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v219 = 0;
  }
  v3 = 0;
LABEL_174:
  if (!*(_BYTE *)(a2 + 200))
  {
    v9 = 0;
    v94 = 0;
    goto LABEL_222;
  }
  if ((_DWORD)v9)
  {
    if (v9 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1952A0AA4);
    }
    v114 = WTF::fastMalloc((WTF *)(24 * v9));
    if (*(_BYTE *)(a2 + 200))
    {
      v94 = (WTF *)v114;
      v115 = *(unsigned int *)(a2 + 180);
      if (v115 > v3)
      {
        v125 = 0;
        v126 = 3 * v115;
        v127 = 8;
        v128 = v219;
        v129 = 8 * v126;
        while (v129 != v125)
        {
          if (24 * v3 == v125)
          {
            __break(0xC471u);
            JUMPOUT(0x1952A0A6CLL);
          }
          v130 = *(_QWORD *)v128;
          v128 = (WTF *)((char *)v128 + 8);
          v131 = v130 + 16;
          if (v130)
            v132 = v131;
          else
            v132 = 0;
          v133 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + v127);
          v134 = (_QWORD *)(v114 + v125);
          *v134 = 0;
          v134[1] = v132;
          v134[2] = v133;
          v127 += 16;
          v125 += 24;
          if (24 * v9 == v125)
            goto LABEL_195;
        }
      }
      else
      {
        v116 = 0;
        v117 = 24 * v115;
        v118 = 8;
        v119 = v219;
        while (v117 != v116)
        {
          v120 = *(_QWORD *)v119;
          v119 = (WTF *)((char *)v119 + 8);
          v121 = v120 + 16;
          if (v120)
            v122 = v121;
          else
            v122 = 0;
          v123 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + v118);
          v124 = (_QWORD *)(v114 + v116);
          *v124 = 0;
          v124[1] = v122;
          v124[2] = v123;
          v118 += 16;
          v116 += 24;
          if (24 * v9 == v116)
            goto LABEL_195;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1952A0A54);
    }
    goto LABEL_359;
  }
  v94 = 0;
LABEL_195:
  v135 = *(unsigned int *)(a2 + 196);
  if ((_DWORD)v135)
  {
    if (v135 >= 0x924924A)
    {
      __break(0xC471u);
      JUMPOUT(0x1952A0AACLL);
    }
    v136 = v94;
    v137 = WTF::fastMalloc((WTF *)(28 * v135));
    v212 = (WTF *)v137;
    v143 = 0;
    if (*(_DWORD *)(a2 + 196))
    {
      v144 = (char *)(v137 + 24);
      v145 = 6;
      v146 = vextq_s8((int8x16_t)0, (int8x16_t)0, 4uLL);
      v141.i64[0] = 0xFF00FF00FF00FFLL;
      v147.i64[0] = 0xFF000000FFLL;
      v147.i64[1] = 0xFF000000FFLL;
      v148.i64[0] = 0x100000001;
      v148.i64[1] = 0x100000001;
      v94 = v136;
      do
      {
        v149 = *(_QWORD *)(a2 + 184);
        v150 = vextq_s8(v146, v142, 0xCuLL);
        v150.i32[3] = v140;
        if (*(_BYTE *)(v149 + v145 + 6))
        {
          v151 = *(_BYTE *)(v149 + v145 + 1);
          if (v151)
          {
            v150.i32[0] = *(_DWORD *)(v149 + v145 - 5);
            v152 = (uint16x4_t)vaddw_u8(v141, *(uint8x8_t *)v150.i8).u64[0];
            v150 = vandq_s8((int8x16_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v152), v147), v148), (int8x16_t)vmovl_s16((int16x4_t)vcgt_u16((uint16x4_t)0x4000C000C0004, (uint16x4_t)(*(_QWORD *)&v152 & 0xFF00FF00FF00FFLL))));
            if (*(unsigned __int8 *)(v149 + v145 - 1) - 1 < 0xC)
              v138 = (*(_BYTE *)(v149 + v145 - 1) - 1) + 1;
            else
              v138 = 0;
            switch(*(_BYTE *)(v149 + v145))
            {
              case 1:
                v139 = 1;
                goto LABEL_221;
              case 2:
                v151 = 1;
                v139 = 2;
                break;
              case 3:
                v151 = 1;
                v139 = 3;
                break;
              case 4:
                v151 = 1;
                v139 = 4;
                break;
              case 5:
                v151 = 1;
                v139 = 5;
                break;
              case 6:
                v151 = 1;
                v139 = 6;
                break;
              case 7:
                v151 = 1;
                v139 = 7;
                break;
              case 8:
                v151 = 1;
                v139 = 8;
                break;
              case 9:
                v151 = 1;
                v139 = 9;
                break;
              case 0xA:
                v151 = 1;
                v139 = 10;
                break;
              case 0xB:
                v151 = 1;
                v139 = 11;
                break;
              case 0xC:
                v151 = 1;
                v139 = 12;
                break;
              default:
                v139 = 0;
LABEL_221:
                v151 = 1;
                break;
            }
          }
        }
        else
        {
          v151 = 0;
        }
        *(int8x16_t *)(v144 - 24) = v150;
        *((_DWORD *)v144 - 2) = v138;
        *((_DWORD *)v144 - 1) = v139;
        *v144 = v151;
        v144 += 28;
        ++v143;
        v140 = v150.i32[3];
        v142 = vextq_s8(v150, v150, 4uLL);
        v145 += 16;
      }
      while (v143 < *(unsigned int *)(a2 + 196));
    }
    else
    {
      v94 = v136;
    }
  }
  else
  {
LABEL_222:
    v212 = 0;
    LODWORD(v143) = 0;
  }
  v214 = v94;
  if (*(_BYTE *)(a2 + 200))
  {
    v153 = *(unsigned int *)(a2 + 196);
    if ((_DWORD)v153)
    {
      v200 = v3;
      v201 = v19;
      v202 = v7;
      v205 = v6;
      if (v153 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x1952A0A8CLL);
      }
      v3 = 0;
      v203 = WTF::fastMalloc((WTF *)(32 * v153));
      v7 = (_DWORD *)(v203 + 16);
      v154 = 8;
      v6 = v212;
      do
      {
        if (!*(_BYTE *)(a2 + 200))
          goto LABEL_359;
        if (v3 >= *(unsigned int *)(a2 + 196))
        {
          __break(0xC471u);
          JUMPOUT(0x1952A0A2CLL);
        }
        v155 = *(_QWORD *)(a2 + 184);
        if (*(_BYTE *)(v155 + v154 + 4))
        {
          if (v3 >= v143)
          {
            __break(0xC471u);
            JUMPOUT(0x1952A0A4CLL);
          }
          v156 = WebCore::WebGPU::ConvertToBackingContext::convertToBacking(v220, *(unsigned __int8 *)(v155 + v154 - 8));
          if (*((_BYTE *)v6 + 24))
            v157 = v6;
          else
            v157 = 0;
          v158 = *(_DWORD *)(v155 + v154);
        }
        else
        {
          v156 = 0;
          v157 = 0;
          v158 = 0;
        }
        *((_QWORD *)v7 - 2) = 0;
        *(v7 - 2) = v156;
        *(v7 - 1) = 0;
        *(_QWORD *)v7 = v157;
        ++v3;
        v6 = (WTF *)((char *)v6 + 28);
        v154 += 16;
        v7[2] = v158;
        v7[3] = 0;
        v7 += 8;
      }
      while (v153 != v3);
      v159 = *(unsigned __int8 *)(a2 + 200);
      v235 = 0;
      v233 = 0u;
      v234 = 0u;
      v232 = 0u;
      LODWORD(v3) = v200;
      v19 = v201;
      if (v159)
      {
        v6 = v205;
        v7 = v202;
        goto LABEL_241;
      }
      v161 = 0;
      v6 = v205;
      v7 = v202;
    }
    else
    {
      v203 = 0;
      v235 = 0;
      v233 = 0u;
      v234 = 0u;
      v232 = 0u;
LABEL_241:
      v161 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v220 + 176))(v220, *(_QWORD *)(*(_QWORD *)(a2 + 144) + 8));
    }
    v94 = v214;
    v160 = (WTF *)v203;
  }
  else
  {
    LODWORD(v153) = 0;
    v160 = 0;
    v161 = 0;
    v232 = 0uLL;
  }
  v162 = (char *)v213 + 16;
  if (v206)
    v163 = v213 == 0;
  else
    v163 = 1;
  if (v163)
    v162 = 0;
  *((_QWORD *)&v232 + 1) = v161;
  *(_QWORD *)&v233 = v162;
  v164 = v163;
  *((_QWORD *)&v233 + 1) = v9;
  *(_QWORD *)&v234 = v94;
  *((_QWORD *)&v234 + 1) = v153;
  v235 = v160;
  v165 = v160;
  v231 = 0;
  v230[0] = 0;
  v230[1] = 7;
  if (*(_BYTE *)(a2 + 78))
    v166 = *(_BYTE *)(a2 + 77);
  else
    v166 = 0;
  LODWORD(v231) = v166;
  v228 = 0u;
  v229 = 0u;
  v226 = 0u;
  v227 = 0u;
  v224 = 0u;
  v225 = 0u;
  v222 = 0u;
  v223 = 0u;
  *(_OWORD *)v221 = 0u;
  if (v244)
    v167 = (WTF::StringImpl *)(v244 + 16);
  else
    v167 = 0;
  v221[1] = v167;
  v168 = *(_QWORD *)(a2 + 8);
  if (v168)
  {
    v169 = v220;
    if (*(_QWORD *)(v168 + 8))
      v170 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v220 + 112))(v220);
    else
      v170 = 0;
  }
  else
  {
    v170 = 0;
    v169 = v220;
  }
  v222 = (unint64_t)v170;
  v171 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v169 + 176))(v169, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8));
  v172 = (char *)v217 + 16;
  if (v210)
    v173 = v217 == 0;
  else
    v173 = 1;
  v174 = v173;
  if (v173)
    v172 = 0;
  *(_QWORD *)&v223 = v171;
  *((_QWORD *)&v223 + 1) = v172;
  *(_QWORD *)&v224 = v208;
  *((_QWORD *)&v224 + 1) = v216;
  *(_QWORD *)&v225 = v207;
  *((_QWORD *)&v225 + 1) = v215;
  v175 = *(unsigned __int8 *)(a2 + 78);
  if (*(_BYTE *)(a2 + 78))
  {
    v176 = v230;
    if (!*(_BYTE *)(a2 + 77))
      v176 = 0;
    *(_QWORD *)&v226 = v176;
    if (((*(_BYTE *)(a2 + 72) - 1) & 0xFC) != 0)
      v177 = 0;
    else
      v177 = (*(_BYTE *)(a2 + 72) - 1) + 1;
    if (*(_BYTE *)(a2 + 73))
      v178 = 2;
    else
      v178 = 1;
    if (*(_BYTE *)(a2 + 74))
      v179 = v178;
    else
      v179 = 0;
    *((_QWORD *)&v226 + 1) = __PAIR64__(v179, v177);
    LODWORD(v227) = *(_BYTE *)(a2 + 75) != 0;
    v180 = *(unsigned __int8 *)(a2 + 76);
    if (v180 == 2)
      v175 = 2;
    else
      v175 = v180 == 1;
  }
  else
  {
    *(_QWORD *)&v226 = 0;
    *((_QWORD *)&v226 + 1) = 3;
    LODWORD(v227) = 0;
  }
  DWORD1(v227) = v175;
  v181 = &v236;
  if (!*(_BYTE *)(a2 + 124))
    v181 = 0;
  *((_QWORD *)&v227 + 1) = v181;
  *(_QWORD *)&v228 = 0;
  v182 = *(_BYTE *)(a2 + 136);
  if (!*(_BYTE *)(a2 + 140))
    v182 = 0;
  *((int8x8_t *)&v228 + 1) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(_BYTE *)(a2 + 140) == 0), 0x1FuLL)), (int8x8_t)0xFFFFFFFF00000001, *(int8x8_t *)(a2 + 128));
  LODWORD(v229) = v182;
  v183 = &v232;
  if (!*(_BYTE *)(a2 + 200))
    v183 = 0;
  *((_QWORD *)&v229 + 1) = v183;
  ++v7[2];
  v184 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v184 = MEMORY[0x1E0C809A0];
  v184[1] = 50331650;
  v184[2] = WTF::BlockPtr<void ()(WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &&)>::fromCallable<WebCore::WebGPU::DeviceImpl::createRenderPipelineAsync(WebCore::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::RenderPipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPURenderPipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &)#1}>(WebCore::WebGPU::DeviceImpl::createRenderPipelineAsync(WebCore::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::RenderPipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPURenderPipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &)#1})::{lambda(void *,WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &)#1}::__invoke;
  v184[3] = &WTF::BlockPtr<void ()(WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &&)>::fromCallable<WebCore::WebGPU::DeviceImpl::createRenderPipelineAsync(WebCore::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::RenderPipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPURenderPipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &)#1}>(WebCore::WebGPU::DeviceImpl::createRenderPipelineAsync(WebCore::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::RenderPipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPURenderPipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &)#1})::descriptor;
  v184[4] = v7;
  v184[5] = v211;
  _Block_copy(v184);
  wgpuDeviceCreateRenderPipelineAsync();
  _Block_release(v184);
  if (v165)
    WTF::fastFree(v165, v185);
  if (v212)
    WTF::fastFree(v212, v185);
  if (v214)
    WTF::fastFree(v214, v185);
  if ((_DWORD)v3)
  {
    v186 = 8 * v3;
    v187 = (WTF **)v219;
    do
    {
      v188 = *v187;
      *v187 = 0;
      if (v188)
      {
        if (*(_DWORD *)v188 == 1)
          WTF::fastFree(v188, v185);
        else
          --*(_DWORD *)v188;
      }
      ++v187;
      v186 -= 8;
    }
    while (v186);
  }
  if (v219)
    WTF::fastFree(v219, v185);
  if ((v164 & 1) != 0)
  {
LABEL_312:
    if (!v215)
      goto LABEL_314;
    goto LABEL_313;
  }
  if (*(_DWORD *)v213 != 1)
  {
    --*(_DWORD *)v213;
    goto LABEL_312;
  }
  WTF::fastFree(v213, v185);
  if (v215)
LABEL_313:
    WTF::fastFree(v215, v185);
LABEL_314:
  if ((_DWORD)v10)
  {
    v189 = 16 * v10;
    v190 = v218;
    do
    {
      v191 = *(WTF **)v190;
      if (*(_QWORD *)v190)
      {
        *(_QWORD *)v190 = 0;
        *((_DWORD *)v190 + 2) = 0;
        WTF::fastFree(v191, v185);
      }
      v190 = (WTF *)((char *)v190 + 16);
      v189 -= 16;
    }
    while (v189);
  }
  if (v218)
    WTF::fastFree(v218, v185);
  if (v216)
    WTF::fastFree(v216, v185);
  if (v209)
  {
    v192 = 8 * v209;
    v193 = (WTF **)v19;
    do
    {
      v194 = *v193;
      *v193 = 0;
      if (v194)
      {
        if (*(_DWORD *)v194 == 1)
          WTF::fastFree(v194, v185);
        else
          --*(_DWORD *)v194;
      }
      ++v193;
      v192 -= 8;
    }
    while (v192);
  }
  if (v19)
    WTF::fastFree(v19, v185);
  if ((v174 & 1) == 0)
  {
    if (*(_DWORD *)v217 == 1)
      WTF::fastFree(v217, v185);
    else
      --*(_DWORD *)v217;
  }
  result = (WTF *)v244;
  v244 = 0;
  if (!result)
  {
LABEL_339:
    if (!v7)
      goto LABEL_342;
    goto LABEL_340;
  }
  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    goto LABEL_339;
  }
  result = (WTF *)WTF::fastFree(result, v185);
  if (v7)
  {
LABEL_340:
    if (v7[2] == 1)
      result = (WTF *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
LABEL_342:
  if (v6)
    return (WTF *)wgpuDeviceRelease();
  return result;
}

WTF *WebCore::WebGPU::DeviceImpl::createCommandEncoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t CommandEncoder;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *result;
  WTF *v10;

  if (*(_BYTE *)(a2 + 8))
    WTF::String::utf8();
  else
    WTF::CString::CString((WTF::CString *)&v10, "");
  CommandEncoder = wgpuDeviceCreateCommandEncoder();
  v6 = *(_QWORD *)(a1 + 64);
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)v7 = off_1E33506D8;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = CommandEncoder;
  ++*(_DWORD *)(v6 + 8);
  *(_QWORD *)(v7 + 32) = v6;
  *a3 = v7;
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v8);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::WebGPU::DeviceImpl::createRenderBundleEncoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t RenderBundleEncoder;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF *v18;

  result = WTF::String::utf8();
  v7 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v7)
  {
    if (v7 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    v8 = *(_QWORD *)(a1 + 64);
    v9 = (WTF *)WTF::fastMalloc((WTF *)(4 * v7));
    v10 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *(_QWORD *)(a2 + 8);
      do
      {
        if (*(unsigned __int16 *)(v12 + 2 * v11) >= 0x100u)
          v13 = WebCore::WebGPU::ConvertToBackingContext::convertToBacking(v8, *(_WORD *)(v12 + 2 * v11));
        else
          v13 = 0;
        *((_DWORD *)v9 + v11++) = v13;
      }
      while (v10 != v11);
    }
  }
  else
  {
    v9 = 0;
  }
  if (*(_BYTE *)(a2 + 25))
    WebCore::WebGPU::ConvertToBackingContext::convertToBacking(*(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a2 + 24));
  RenderBundleEncoder = wgpuDeviceCreateRenderBundleEncoder();
  v15 = *(_QWORD *)(a1 + 64);
  v16 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)v16 = off_1E33514C0;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = RenderBundleEncoder;
  ++*(_DWORD *)(v15 + 8);
  *(_QWORD *)(v16 + 32) = v15;
  *a3 = v16;
  if (v9)
    WTF::fastFree(v9, v17);
  result = (uint64_t)v18;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      return WTF::fastFree(v18, v17);
    else
      --*(_DWORD *)v18;
  }
  return result;
}

uint64_t WebCore::WebGPU::DeviceImpl::createQuerySet@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t QuerySet;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  WTF *v9;

  WTF::String::utf8();
  QuerySet = wgpuDeviceCreateQuerySet();
  v5 = *(_QWORD *)(a1 + 64);
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)v6 = off_1E3350F58;
  *(_QWORD *)(v6 + 32) = QuerySet;
  ++*(_DWORD *)(v5 + 8);
  *(_QWORD *)(v6 + 40) = v5;
  *a2 = v6;
  result = (uint64_t)v9;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      return WTF::fastFree(v9, v7);
    else
      --*(_DWORD *)v9;
  }
  return result;
}

uint64_t WebCore::WebGPU::DeviceImpl::pushErrorScope()
{
  return wgpuDevicePushErrorScope();
}

void WebCore::WebGPU::DeviceImpl::popErrorScope(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a2;
  *a2 = 0;
  v3 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v3 = MEMORY[0x1E0C809A0];
  v3[1] = 50331650;
  v3[2] = WTF::BlockPtr<void ()(WGPUErrorType,char const*)>::fromCallable<WebCore::WebGPU::DeviceImpl::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(WebCore::WebGPU::DeviceImpl::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0)::{lambda(void *,WGPUErrorType,char const*)#1}::__invoke;
  v3[3] = &WTF::BlockPtr<void ()(WGPUErrorType,char const*)>::fromCallable<WebCore::WebGPU::DeviceImpl::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(WebCore::WebGPU::DeviceImpl::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0)::descriptor;
  v3[4] = v2;
  _Block_copy(v3);
  wgpuDevicePopErrorScope();
  _Block_release(v3);
}

void WebCore::WebGPU::popErrorScopeCallback(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  a3[2](a3, a1, a2);
  _Block_release(a3);
}

void WebCore::WebGPU::DeviceImpl::resolveUncapturedErrorEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a2;
  *a2 = 0;
  v3 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v3 = MEMORY[0x1E0C809A0];
  v3[1] = 50331650;
  v3[2] = WTF::BlockPtr<void ()(WGPUErrorType,char const*)>::fromCallable<WebCore::WebGPU::DeviceImpl::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(WebCore::WebGPU::DeviceImpl::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0)::{lambda(void *,WGPUErrorType,char const*)#1}::__invoke;
  v3[3] = &WTF::BlockPtr<void ()(WGPUErrorType,char const*)>::fromCallable<WebCore::WebGPU::DeviceImpl::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(WebCore::WebGPU::DeviceImpl::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0)::descriptor;
  v3[4] = v2;
  _Block_copy(v3);
  wgpuDeviceSetUncapturedErrorCallback();
  _Block_release(v3);
}

void WebCore::WebGPU::setUncapturedScopeCallback(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  a3[2](a3, a1, a2);
  _Block_release(a3);
}

void WebCore::WebGPU::DeviceImpl::resolveDeviceLostPromise(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a2;
  *a2 = 0;
  v3 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v3 = MEMORY[0x1E0C809A0];
  v3[1] = 50331650;
  v3[2] = WTF::BlockPtr<void ()(WGPUDeviceLostReason,char const*)>::fromCallable<WebCore::WebGPU::DeviceImpl::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0>(WebCore::WebGPU::DeviceImpl::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0)::{lambda(void *,WGPUDeviceLostReason,char const*)#1}::__invoke;
  v3[3] = &WTF::BlockPtr<void ()(WGPUDeviceLostReason,char const*)>::fromCallable<WebCore::WebGPU::DeviceImpl::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0>(WebCore::WebGPU::DeviceImpl::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0)::descriptor;
  v3[4] = v2;
  wgpuDeviceSetDeviceLostCallbackWithBlock();
  _Block_release(v3);
}

WTF *WebCore::WebGPU::DeviceImpl::setLabelInternal(WebCore::WebGPU::DeviceImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuDeviceSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

uint64_t WebCore::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebCore::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::Adapter *a2)
{
  return *((_QWORD *)a2 + 6);
}

uint64_t WebCore::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebCore::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::BindGroup *a2)
{
  return *((_QWORD *)a2 + 3);
}

uint64_t WebCore::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebCore::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::BindGroupLayout *a2)
{
  return *((_QWORD *)a2 + 4);
}

uint64_t WebCore::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebCore::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::Buffer *a2)
{
  return *((_QWORD *)a2 + 4);
}

uint64_t WebCore::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebCore::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::CommandBuffer *a2)
{
  return *((_QWORD *)a2 + 3);
}

uint64_t WebCore::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebCore::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::CommandEncoder *a2)
{
  return *((_QWORD *)a2 + 3);
}

uint64_t WebCore::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebCore::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::ComputePassEncoder *a2)
{
  return *((_QWORD *)a2 + 3);
}

uint64_t WebCore::WebGPU::DowncastConvertToBackingContext::convertToBacking(WebCore::WebGPU::DowncastConvertToBackingContext *this, const WebCore::WebGPU::ComputePipeline *a2)
{
  return *((_QWORD *)a2 + 3);
}

uint64_t WebCore::WebGPU::DowncastConvertToBackingContext::convertToBacking(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 56);
}

{
  return *(_QWORD *)(a2 + 32);
}

{
  return *(_QWORD *)(a2 + 16);
}

{
  return *(_QWORD *)(a2 + 32);
}

{
  return *(_QWORD *)(a2 + 24);
}

{
  return *(_QWORD *)(a2 + 32);
}

{
  return *(_QWORD *)(a2 + 24);
}

{
  return *(_QWORD *)(a2 + 24);
}

{
  return *(_QWORD *)(a2 + 24);
}

{
  return *(_QWORD *)(a2 + 24);
}

{
  return *(_QWORD *)(a2 + 24);
}

{
  return *(_QWORD *)(a2 + 24);
}

{
  return *(_QWORD *)(a2 + 32);
}

{
  return *(_QWORD *)(a2 + 40);
}

{
  return *(_QWORD *)(a2 + 32);
}

{
  return a2;
}

void WebCore::WebGPU::ExternalTextureImpl::~ExternalTextureImpl(WebCore::WebGPU::ExternalTextureImpl *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    wgpuExternalTextureRelease();
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *(_QWORD *)this = off_1E3351170;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    wgpuExternalTextureRelease();
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  *(_QWORD *)this = off_1E3351170;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGPU::ExternalTextureImpl::destroy(WebCore::WebGPU::ExternalTextureImpl *this)
{
  return wgpuExternalTextureDestroy();
}

uint64_t WebCore::WebGPU::ExternalTextureImpl::undestroy(WebCore::WebGPU::ExternalTextureImpl *this)
{
  return wgpuExternalTextureUndestroy();
}

void WebCore::WebGPU::GPUImpl::~GPUImpl(WebCore::WebGPU::GPUImpl *this)
{
  _DWORD *v2;
  uint64_t v3;

  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    wgpuInstanceRelease();
}

void WebCore::WebGPU::GPUImpl::~GPUImpl(WebCore::WebGPU::GPUImpl *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    wgpuInstanceRelease();
  WTF::fastFree(this, a2);
}

void WebCore::WebGPU::GPUImpl::requestAdapter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *(_QWORD *)(a1 + 24);
  ++*(_DWORD *)(v3 + 8);
  v4 = *a3;
  *a3 = 0;
  v5 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v5 = MEMORY[0x1E0C809A0];
  v5[1] = 50331650;
  v5[2] = WTF::BlockPtr<void ()(WGPURequestAdapterStatus,WGPUAdapterImpl *,char const*)>::fromCallable<WebCore::WebGPU::GPUImpl::requestAdapter(WebCore::WebGPU::RequestAdapterOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore::WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Adapter>> &&)> &&)::$_0>(WebCore::WebGPU::GPUImpl::requestAdapter(WebCore::WebGPU::RequestAdapterOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore::WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Adapter>> &&)> &&)::$_0)::{lambda(void *,WGPURequestAdapterStatus,WGPUAdapterImpl *,char const*)#1}::__invoke;
  v5[3] = &WTF::BlockPtr<void ()(WGPURequestAdapterStatus,WGPUAdapterImpl *,char const*)>::fromCallable<WebCore::WebGPU::GPUImpl::requestAdapter(WebCore::WebGPU::RequestAdapterOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore::WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Adapter>> &&)> &&)::$_0>(WebCore::WebGPU::GPUImpl::requestAdapter(WebCore::WebGPU::RequestAdapterOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore::WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Adapter>> &&)> &&)::$_0)::descriptor;
  v5[4] = v3;
  v5[5] = v4;
  _Block_copy(v5);
  wgpuInstanceRequestAdapter();
  _Block_release(v5);
}

void WebCore::WebGPU::requestAdapterCallback(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  a4[2](a4, a1, a2, a3);
  _Block_release(a4);
}

void WebCore::WebGPU::GPUImpl::createPresentationContext(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t Surface;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24), *a2);
  v6 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v6 = MEMORY[0x1E0C809A0];
  v6[1] = 50331650;
  v6[2] = WTF::BlockPtr<void ()(void({block_pointer})(__CFArray const*),void({block_pointer})(void({block_pointer})(void)))>::fromCallable<WebCore::WebGPU::GPUImpl::createPresentationContext(WebCore::WebGPU::PresentationContextDescriptor const&)::$_0>(WebCore::WebGPU::GPUImpl::createPresentationContext(WebCore::WebGPU::PresentationContextDescriptor const&)::$_0)::{lambda(void *,void({block_pointer})(__CFArray const*),void({block_pointer})(void({block_pointer})(void)))#1}::__invoke;
  v6[3] = &WTF::BlockPtr<void ()(void({block_pointer})(__CFArray const*),void({block_pointer})(void({block_pointer})(void)))>::fromCallable<WebCore::WebGPU::GPUImpl::createPresentationContext(WebCore::WebGPU::PresentationContextDescriptor const&)::$_0>(WebCore::WebGPU::GPUImpl::createPresentationContext(WebCore::WebGPU::PresentationContextDescriptor const&)::$_0)::descriptor;
  v6[4] = v5;
  Surface = wgpuInstanceCreateSurface();
  v8 = *(_QWORD *)(a1 + 24);
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)v9 = off_1E3350F10;
  *(_BYTE *)(v9 + 12) = 22;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = Surface;
  *(_QWORD *)(v9 + 32) = 0;
  ++*(_DWORD *)(v8 + 8);
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(v9 + 48) = 0;
  ++*(_DWORD *)(v9 + 8);
  v10 = *(_DWORD **)(v5 + 56);
  *(_QWORD *)(v5 + 56) = v9;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  *a3 = v9;
  _Block_release(v6);
}

double WebCore::WebGPU::GPUImpl::createCompositorIntegration@<D0>(WebCore::WebGPU::GPUImpl *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = *((_QWORD *)this + 3);
  v4 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = off_1E3350768;
  result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_QWORD *)(v4 + 56) = 0;
  ++*(_DWORD *)(v3 + 8);
  *(_QWORD *)(v4 + 64) = v3;
  *(_QWORD *)(v4 + 72) = 0;
  *a2 = v4;
  return result;
}

uint64_t WebCore::WebGPU::GPUImpl::paintToCanvas(WebCore::WebGPU::GPUImpl *this, WebCore::NativeImage *a2, int32x2_t *a3, WebCore::GraphicsContext *a4)
{
  uint64_t v7;
  float32x2_t v9;
  float v10;
  float v11;
  _QWORD v12[2];

  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 6) + 24))(*((_QWORD *)a2 + 6));
  v12[0] = 0;
  v12[1] = vcvt_f32_s32(*a3);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a4 + 96))(a4, 1);
  if (*((_BYTE *)a4 + 340) != 1)
  {
    *((_BYTE *)a4 + 340) = 1;
    *((_DWORD *)a4 + 46) |= 0x400u;
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a4 + 88))(a4, (char *)a4 + 8);
  v9 = 0;
  v10 = (float)(int)v7;
  v11 = (float)SHIDWORD(v7);
  WebCore::GraphicsContext::drawNativeImage(a4, (uint64_t)a2, (uint64_t)v12, &v9, 4385);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a4 + 104))(a4, 1);
}

uint64_t WebCore::WebGPU::GPUImpl::isValid()
{
  return 1;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::Buffer *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), a2);
  return wgpuBufferIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::Adapter *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::Adapter *))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), a2);
  return wgpuAdapterIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::BindGroup *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::BindGroup *))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), a2);
  return wgpuBindGroupIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::BindGroupLayout *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::BindGroupLayout *))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), a2);
  return wgpuBindGroupLayoutIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::CommandBuffer *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::CommandBuffer *))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3), a2);
  return wgpuCommandBufferIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::CommandEncoder *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::CommandEncoder *))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3), a2);
  return wgpuCommandEncoderIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::ComputePassEncoder *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::ComputePassEncoder *))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3), a2);
  return wgpuComputePassEncoderIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::ComputePipeline *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::ComputePipeline *))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3), a2);
  return wgpuComputePipelineIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::Device *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::Device *))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3), a2);
  return wgpuDeviceIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::ExternalTexture *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::ExternalTexture *))(**((_QWORD **)this + 3) + 96))(*((_QWORD *)this + 3), a2);
  return wgpuExternalTextureIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::PipelineLayout *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::PipelineLayout *))(**((_QWORD **)this + 3) + 112))(*((_QWORD *)this + 3), a2);
  return wgpuPipelineLayoutIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 184))(*(_QWORD *)(a1 + 24));
  return wgpuPresentationContextIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::QuerySet *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::QuerySet *))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3), a2);
  return wgpuQuerySetIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::Queue *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::Queue *))(**((_QWORD **)this + 3) + 128))(*((_QWORD *)this + 3), a2);
  return wgpuQueueIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::RenderBundleEncoder *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::RenderBundleEncoder *))(**((_QWORD **)this + 3) + 136))(*((_QWORD *)this + 3), a2);
  return wgpuRenderBundleEncoderIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::RenderBundle *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::RenderBundle *))(**((_QWORD **)this + 3) + 144))(*((_QWORD *)this + 3), a2);
  return wgpuRenderBundleIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::RenderPassEncoder *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::RenderPassEncoder *))(**((_QWORD **)this + 3) + 152))(*((_QWORD *)this + 3), a2);
  return wgpuRenderPassEncoderIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::RenderPipeline *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::RenderPipeline *))(**((_QWORD **)this + 3) + 160))(*((_QWORD *)this + 3), a2);
  return wgpuRenderPipelineIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::Sampler *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::Sampler *))(**((_QWORD **)this + 3) + 168))(*((_QWORD *)this + 3), a2);
  return wgpuSamplerIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::ShaderModule *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::ShaderModule *))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3), a2);
  return wgpuShaderModuleIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::Texture *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::Texture *))(**((_QWORD **)this + 3) + 192))(*((_QWORD *)this + 3), a2);
  return wgpuTextureIsValid() != 0;
}

BOOL WebCore::WebGPU::GPUImpl::isValid(WebCore::WebGPU::GPUImpl *this, const WebCore::WebGPU::TextureView *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::TextureView *))(**((_QWORD **)this + 3) + 200))(*((_QWORD *)this + 3), a2);
  return wgpuTextureViewIsValid() != 0;
}

void WebCore::WebGPU::PipelineLayoutImpl::~PipelineLayoutImpl(WebCore::WebGPU::PipelineLayoutImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    wgpuPipelineLayoutRelease();
  *(_QWORD *)this = off_1E3351258;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGPU::PipelineLayoutImpl::~PipelineLayoutImpl(this, a2);
  WTF::fastFree(v2, v3);
}

WTF *WebCore::WebGPU::PipelineLayoutImpl::setLabelInternal(WebCore::WebGPU::PipelineLayoutImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuPipelineLayoutSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::PresentationContextImpl::~PresentationContextImpl(WebCore::WebGPU::PresentationContextImpl *this)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    wgpuSwapChainRelease();
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    wgpuSurfaceRelease();
}

void WebCore::WebGPU::PresentationContextImpl::~PresentationContextImpl(WebCore::WebGPU::PresentationContextImpl *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    wgpuSwapChainRelease();
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    wgpuSurfaceRelease();
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGPU::PresentationContextImpl::configure(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t SwapChain;
  uint64_t v16;
  WTF *v17;

  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    wgpuSwapChainRelease();
  v5 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = v5;
  v6 = *(_QWORD *)(a1 + 40);
  result = WebCore::WebGPU::ConvertToBackingContext::convertToBacking(v6, v5);
  v17 = 0;
  v8 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v8)
  {
    if (v8 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    v9 = WTF::fastMalloc((WTF *)(4 * v8));
    v17 = (WTF *)v9;
    if (*(_DWORD *)(a2 + 28))
    {
      v10 = (_DWORD *)v9;
      v11 = *(unsigned __int8 **)(a2 + 16);
      v12 = *(unsigned int *)(a2 + 28);
      do
      {
        v13 = *v11++;
        *v10++ = WebCore::WebGPU::ConvertToBackingContext::convertToBacking(v6, v13);
        --v12;
      }
      while (v12);
    }
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 88))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)a2 + 8));
  SwapChain = wgpuDeviceCreateSwapChain();
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = SwapChain;
  if (v16)
    wgpuSwapChainRelease();
  if (v17)
    WTF::fastFree(v17, v14);
  return 1;
}

_DWORD *WebCore::WebGPU::PresentationContextImpl::unconfigure(WebCore::WebGPU::PresentationContextImpl *this)
{
  _DWORD *result;
  uint64_t v3;

  result = (_DWORD *)*((_QWORD *)this + 4);
  if (result)
  {
    *((_QWORD *)this + 4) = 0;
    wgpuSwapChainRelease();
    *((_BYTE *)this + 12) = 22;
    *((_QWORD *)this + 2) = 0;
    v3 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v3)
      wgpuSwapChainRelease();
    result = (_DWORD *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

uint64_t WebCore::WebGPU::PresentationContextImpl::getCurrentTexture@<X0>(WebCore::WebGPU::PresentationContextImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _DWORD *v8;

  if (!*((_QWORD *)this + 4))
  {
    result = 0;
    goto LABEL_9;
  }
  result = *((_QWORD *)this + 6);
  if (result)
    goto LABEL_7;
  result = wgpuSwapChainGetCurrentTexture();
  if (result)
  {
    v5 = result;
    wgpuTextureReference();
    v6 = *((_BYTE *)this + 12);
    v7 = *((_QWORD *)this + 5);
    result = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = off_1E33516C8;
    *(_BYTE *)(result + 32) = v6;
    *(_BYTE *)(result + 33) = 1;
    ++*(_DWORD *)(v7 + 8);
    *(_QWORD *)(result + 40) = v5;
    *(_QWORD *)(result + 48) = v7;
    v8 = (_DWORD *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = result;
    if (v8)
    {
      if (v8[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        result = *((_QWORD *)this + 6);
        if (!result)
          goto LABEL_9;
      }
      else
      {
        --v8[2];
      }
    }
LABEL_7:
    ++*(_DWORD *)(result + 8);
  }
LABEL_9:
  *a2 = result;
  return result;
}

_DWORD *WebCore::WebGPU::PresentationContextImpl::present(WebCore::WebGPU::PresentationContextImpl *this)
{
  _DWORD *result;

  if (*((_QWORD *)this + 4))
    wgpuSwapChainPresent();
  result = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebCore::WebGPU::PresentationContextImpl::getMetalTextureAsNativeImage(WebCore::WebGPU::PresentationContextImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t IdentifierInternal;
  _QWORD *v4;
  CGImage *v5;
  _QWORD *v6;
  uint64_t v7;
  CGImage *image;

  if (!*((_QWORD *)this + 4))
    goto LABEL_9;
  wgpuSwapChainGetTextureAsNativeImage();
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x1952A21B4);
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  if (image)
  {
    if (CGImageGetWidth(image) >> 31 || CGImageGetHeight(image) >> 31)
    {
      v6 = 0;
    }
    else
    {
      v4 = (_QWORD *)operator new();
      v5 = image;
      image = 0;
      *v4 = &off_1E340E810;
      v4[1] = v5;
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
      v7 = WTF::fastMalloc((WTF *)0x20);
      *(_BYTE *)v7 = 0;
      *(_OWORD *)(v7 + 8) = xmmword_19689B170;
      *(_QWORD *)(v7 + 24) = v6;
      v6[2] = 0;
      v6[3] = 0;
      v6[4] = IdentifierInternal;
      v6[5] = 1;
      *v6 = off_1E340E858;
      v6[1] = v7;
      v6[6] = v4;
    }
    *a2 = v6;
    if (image)
      CFRelease(image);
  }
  else
  {
LABEL_9:
    *a2 = 0;
  }
}

void WebCore::WebGPU::QuerySetImpl::~QuerySetImpl(WebCore::WebGPU::QuerySetImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    wgpuQuerySetRelease();
  *(_QWORD *)this = off_1E3351280;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGPU::QuerySetImpl::~QuerySetImpl(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WebGPU::QuerySetImpl::destroy(WebCore::WebGPU::QuerySetImpl *this)
{
  return wgpuQuerySetDestroy();
}

WTF *WebCore::WebGPU::QuerySetImpl::setLabelInternal(WebCore::WebGPU::QuerySetImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuQuerySetSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::QueueImpl::~QueueImpl(WebCore::WebGPU::QueueImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuQueueRelease();
  *(_QWORD *)this = off_1E33512B0;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuQueueRelease();
  *(_QWORD *)this = off_1E33512B0;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGPU::QueueImpl::submit(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  void *v7;

  v2 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v2)
    return wgpuQueueSubmit();
  if (v2 >> 29)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
    if (*(_DWORD *)(a2 + 12))
    {
      v6 = 0;
      do
      {
        *((_QWORD *)v5 + v6) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v4, *(_QWORD *)(*(_QWORD *)a2 + 8 * v6));
        ++v6;
      }
      while (v6 < *(unsigned int *)(a2 + 12));
    }
    wgpuQueueSubmit();
    return WTF::fastFree(v5, v7);
  }
  return result;
}

void WebCore::WebGPU::QueueImpl::onSubmittedWorkDone(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a2;
  *a2 = 0;
  v3 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v3 = MEMORY[0x1E0C809A0];
  v3[1] = 50331650;
  v3[2] = WTF::BlockPtr<void ()(WGPUQueueWorkDoneStatus)>::fromCallable<WebCore::WebGPU::QueueImpl::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::WebGPU::QueueImpl::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,WGPUQueueWorkDoneStatus)#1}::__invoke;
  v3[3] = &WTF::BlockPtr<void ()(WGPUQueueWorkDoneStatus)>::fromCallable<WebCore::WebGPU::QueueImpl::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::WebGPU::QueueImpl::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
  v3[4] = v2;
  _Block_copy(v3);
  wgpuQueueOnSubmittedWorkDone();
  _Block_release(v3);
}

void WebCore::WebGPU::onSubmittedWorkDoneCallback(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  a2[2](a2, a1);
  _Block_release(a2);
}

void WebCore::WebGPU::QueueImpl::writeBuffer()
{
  __break(0xC471u);
}

void WebCore::WebGPU::QueueImpl::writeTexture()
{
  __break(0xC471u);
}

uint64_t WebCore::WebGPU::QueueImpl::writeBufferNoCopy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, char a8)
{
  unint64_t v12;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  if (a8)
    v12 = a7;
  else
    v12 = a5 - a6;
  if (a5 < a6 || v12 != -1 && a5 - a6 < v12)
    __break(1u);
  return wgpuQueueWriteBuffer();
}

uint64_t WebCore::WebGPU::QueueImpl::writeTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  char *v22;
  int v23;
  _QWORD v24[2];
  int v25;
  int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;

  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  *((_QWORD *)&v27 + 1) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 192))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)a2 + 8));
  LODWORD(v28) = *(_DWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 40))
  {
    v12 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v12 == -1)
      goto LABEL_16;
    v24[0] = &v22;
    *(_QWORD *)((char *)&v28 + 4) = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Origin3DDictEEEEE3__0JZNSA_16convertToBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v12])(v24, a2 + 16);
  }
  else
  {
    v13 = 0;
    *(_QWORD *)((char *)&v28 + 4) = 0;
  }
  v14 = *(unsigned __int8 *)(a2 + 48);
  if (v14 == 2)
    v15 = 2;
  else
    v15 = v14 == 1;
  HIDWORD(v28) = v13;
  LODWORD(v29) = v15;
  v16 = *a5;
  v24[0] = 0;
  v24[1] = v16;
  if (*((_BYTE *)a5 + 12))
    v17 = *((_DWORD *)a5 + 2);
  else
    v17 = -1;
  if (*((_BYTE *)a5 + 20))
    v18 = *((_DWORD *)a5 + 4);
  else
    v18 = -1;
  v25 = v17;
  v26 = v18;
  v19 = *(unsigned int *)(a6 + 16);
  if ((_DWORD)v19 == -1)
  {
LABEL_16:
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1952A27F0);
  }
  v22 = &v30;
  v22 = (char *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Extent3DDictEEEEE3__0JZNSA_16convertToBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v19])(&v22, a6);
  v23 = v20;
  return MEMORY[0x19AEA8EC8](*(_QWORD *)(a1 + 24), &v27, a3, a4, v24, &v22);
}

WTF *WebCore::WebGPU::QueueImpl::setLabelInternal(WebCore::WebGPU::QueueImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuQueueSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

uint64_t WebCore::WebGPU::GPUImpl::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

uint64_t WebCore::WebGPU::GPUImpl::deref(uint64_t this, void *a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = (WTF *)this;
  if (*(_DWORD *)(this + 8) == 1)
  {
    v3 = *(_DWORD **)(this + 24);
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
    v4 = *((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v4)
      wgpuInstanceRelease();
    return WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)(this + 8);
  }
  return this;
}

void WebCore::WebGPU::createComputePipelineAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  a4[2](a4, a1, a2, a3);
  _Block_release(a4);
}

_DWORD *WTF::BlockPtr<void ()(WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &&)>::fromCallable<WebCore::WebGPU::DeviceImpl::createComputePipelineAsync(WebCore::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::ComputePipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPUComputePipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &)#1}>(WebCore::WebGPU::DeviceImpl::createComputePipelineAsync(WebCore::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::ComputePipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPUComputePipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  _DWORD *result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *WTF::BlockPtr<void ()(WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &&)>::fromCallable<WebCore::WebGPU::DeviceImpl::createComputePipelineAsync(WebCore::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::ComputePipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPUComputePipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &)#1}>(WebCore::WebGPU::DeviceImpl::createComputePipelineAsync(WebCore::ComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::ComputePipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPUComputePipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &)#1})::{lambda(void *,WGPUCreatePipelineAsyncStatus,WGPUComputePipelineImpl *,WTF::String &)#1}::__invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _DWORD *result;
  WTF::StringImpl *v14;
  _DWORD *v15;

  if (a2)
  {
    v15 = 0;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _DWORD **, uint64_t))(*(_QWORD *)v5 + 16))(v5, &v15, a4);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v8 + 8) = 1;
    *(_QWORD *)v8 = off_1E3350818;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = a3;
    ++*(_DWORD *)(v7 + 8);
    *(_QWORD *)(v8 + 32) = v7;
    v15 = (_DWORD *)v8;
    v9 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v14 = v9;
    v10 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v15, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebCore::WebGPU::createRenderPipelineAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  a4[2](a4, a1, a2, a3);
  _Block_release(a4);
}

_DWORD *WTF::BlockPtr<void ()(WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &&)>::fromCallable<WebCore::WebGPU::DeviceImpl::createRenderPipelineAsync(WebCore::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::RenderPipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPURenderPipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &)#1}>(WebCore::WebGPU::DeviceImpl::createRenderPipelineAsync(WebCore::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::RenderPipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPURenderPipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  _DWORD *result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *WTF::BlockPtr<void ()(WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &&)>::fromCallable<WebCore::WebGPU::DeviceImpl::createRenderPipelineAsync(WebCore::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::RenderPipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPURenderPipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &)#1}>(WebCore::WebGPU::DeviceImpl::createRenderPipelineAsync(WebCore::RenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::RenderPipeline,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::String &)> &&)::$_0::operator()(WGPURenderPipelineDescriptor const&)::{lambda(WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &)#1})::{lambda(void *,WGPUCreatePipelineAsyncStatus,WGPURenderPipelineImpl *,WTF::String &)#1}::__invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _DWORD *result;
  WTF::StringImpl *v14;
  _DWORD *v15;

  if (a2)
  {
    v15 = 0;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _DWORD **, uint64_t))(*(_QWORD *)v5 + 16))(v5, &v15, a4);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v8 + 8) = 1;
    *(_QWORD *)v8 = off_1E3351640;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = a3;
    ++*(_DWORD *)(v7 + 8);
    *(_QWORD *)(v8 + 32) = v7;
    v15 = (_DWORD *)v8;
    v9 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v14 = v9;
    v10 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, _DWORD **, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v15, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(WGPUErrorType,char const*)>::fromCallable<WebCore::WebGPU::DeviceImpl::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(WebCore::WebGPU::DeviceImpl::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(WGPUErrorType,char const*)>::fromCallable<WebCore::WebGPU::DeviceImpl::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(WebCore::WebGPU::DeviceImpl::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0)::{lambda(void *,WGPUErrorType,char const*)#1}::__invoke(uint64_t a1, int a2, char *a3)
{
  uint64_t v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  int v20;
  char v21;
  char v22;

  LOBYTE(v19) = 0;
  v21 = 0;
  switch(a2)
  {
    case 0:
      v4 = 1;
      goto LABEL_25;
    case 1:
      WTF::String::String((WTF::String *)&v18, a3);
      v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      v7 = v5;
      *(_DWORD *)v5 = 1;
      v8 = v18;
      v18 = 0;
      *((_QWORD *)v5 + 1) = v8;
      if (!v21)
      {
        v19 = v5;
        v20 = 1;
        goto LABEL_17;
      }
      if (v20 != -1)
      {
        if (v20 == 1)
          goto LABEL_12;
        ((void (*)(char *, WTF **))off_1E3351108[v20])(&v22, &v19);
      }
      v19 = v7;
      v9 = 1;
      goto LABEL_20;
    case 2:
      v10 = (WTF *)WTF::fastMalloc((WTF *)4);
      v4 = 0;
      *(_DWORD *)v10 = 1;
      v19 = v10;
      v20 = 0;
      v21 = 1;
      goto LABEL_25;
    case 3:
      WTF::String::String((WTF::String *)&v18, a3);
      v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      v7 = v11;
      *(_DWORD *)v11 = 1;
      v12 = v18;
      v18 = 0;
      *((_QWORD *)v11 + 1) = v12;
      if (v21)
      {
        if (v20 != -1)
        {
          if (v20 == 2)
          {
LABEL_12:
            v13 = v19;
            v19 = v7;
            if (v13)
            {
              if (*(_DWORD *)v13 == 1)
              {
                v17 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
                *((_QWORD *)v13 + 1) = 0;
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2)
                    WTF::StringImpl::destroy(v17, v6);
                  else
                    *(_DWORD *)v17 -= 2;
                }
                WTF::fastFree(v13, v6);
              }
              else
              {
                --*(_DWORD *)v13;
              }
            }
            goto LABEL_21;
          }
          ((void (*)(char *, WTF **))off_1E3351108[v20])(&v22, &v19);
        }
        v19 = v7;
        v9 = 2;
LABEL_20:
        v20 = v9;
      }
      else
      {
        v19 = v11;
        v20 = 2;
LABEL_17:
        v21 = 1;
      }
LABEL_21:
      v14 = v18;
      v18 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v6);
        else
          *(_DWORD *)v14 -= 2;
      }
LABEL_24:
      v4 = 0;
LABEL_25:
      v15 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v15 + 16))(v15, v4, &v19);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if (v21)
      {
        if (v20 != -1)
          return ((uint64_t (*)(WTF::StringImpl **, WTF **))off_1E3351108[v20])(&v18, &v19);
      }
      return result;
    default:
      goto LABEL_24;
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSB_15ValidationErrorENSD_ISI_EENSF_ISI_EEEENS9_INSB_13InternalErrorENSD_ISM_EENSF_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSH_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSB_15ValidationErrorENSD_ISI_EENSF_ISI_EEEENS9_INSB_13InternalErrorENSD_ISM_EENSF_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSH_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;

  v2 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore6WebGPU16OutOfMemoryErrorENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS9_INSB_15ValidationErrorENSD_ISI_EENSF_ISI_EEEENS9_INSB_13InternalErrorENSD_ISM_EENSF_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSH_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;

  v2 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

uint64_t WTF::BlockPtr<void ()(WGPUErrorType,char const*)>::fromCallable<WebCore::WebGPU::DeviceImpl::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(WebCore::WebGPU::DeviceImpl::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(WGPUErrorType,char const*)>::fromCallable<WebCore::WebGPU::DeviceImpl::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0>(WebCore::WebGPU::DeviceImpl::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore::WebGPU::OutOfMemoryError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::OutOfMemoryError>>,WTF::Ref<WebCore::WebGPU::ValidationError,WTF::RawPtrTraits<WebCore::WebGPU::ValidationError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::ValidationError>>,WTF::Ref<WebCore::WebGPU::InternalError,WTF::RawPtrTraits<WebCore::WebGPU::InternalError>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::InternalError>>>> &&)> &&)::$_0)::{lambda(void *,WGPUErrorType,char const*)#1}::__invoke(uint64_t a1, int a2, char *a3)
{
  uint64_t v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  int v20;
  char v21;
  char v22;

  LOBYTE(v19) = 0;
  v21 = 0;
  switch(a2)
  {
    case 0:
      v4 = 0;
      goto LABEL_25;
    case 1:
      WTF::String::String((WTF::String *)&v18, a3);
      v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      v7 = v5;
      *(_DWORD *)v5 = 1;
      v8 = v18;
      v18 = 0;
      *((_QWORD *)v5 + 1) = v8;
      if (!v21)
      {
        v19 = v5;
        v20 = 1;
        goto LABEL_17;
      }
      if (v20 != -1)
      {
        if (v20 == 1)
          goto LABEL_12;
        ((void (*)(char *, WTF **))off_1E3351108[v20])(&v22, &v19);
      }
      v19 = v7;
      v9 = 1;
      goto LABEL_20;
    case 2:
      v10 = (WTF *)WTF::fastMalloc((WTF *)4);
      v4 = 1;
      *(_DWORD *)v10 = 1;
      v19 = v10;
      v20 = 0;
      v21 = 1;
      goto LABEL_25;
    case 3:
      WTF::String::String((WTF::String *)&v18, a3);
      v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      v7 = v11;
      *(_DWORD *)v11 = 1;
      v12 = v18;
      v18 = 0;
      *((_QWORD *)v11 + 1) = v12;
      if (v21)
      {
        if (v20 != -1)
        {
          if (v20 == 2)
          {
LABEL_12:
            v13 = v19;
            v19 = v7;
            if (v13)
            {
              if (*(_DWORD *)v13 == 1)
              {
                v17 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
                *((_QWORD *)v13 + 1) = 0;
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2)
                    WTF::StringImpl::destroy(v17, v6);
                  else
                    *(_DWORD *)v17 -= 2;
                }
                WTF::fastFree(v13, v6);
              }
              else
              {
                --*(_DWORD *)v13;
              }
            }
            goto LABEL_21;
          }
          ((void (*)(char *, WTF **))off_1E3351108[v20])(&v22, &v19);
        }
        v19 = v7;
        v9 = 2;
LABEL_20:
        v20 = v9;
      }
      else
      {
        v19 = v11;
        v20 = 2;
LABEL_17:
        v21 = 1;
      }
LABEL_21:
      v14 = v18;
      v18 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v6);
        else
          *(_DWORD *)v14 -= 2;
      }
LABEL_24:
      v4 = 1;
LABEL_25:
      v15 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v15 + 16))(v15, v4, &v19);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if (v21)
      {
        if (v20 != -1)
          return ((uint64_t (*)(WTF::StringImpl **, WTF **))off_1E3351108[v20])(&v18, &v19);
      }
      return result;
    default:
      goto LABEL_24;
  }
}

uint64_t WTF::BlockPtr<void ()(WGPUDeviceLostReason,char const*)>::fromCallable<WebCore::WebGPU::DeviceImpl::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0>(WebCore::WebGPU::DeviceImpl::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(WGPUDeviceLostReason,char const*)>::fromCallable<WebCore::WebGPU::DeviceImpl::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0>(WebCore::WebGPU::DeviceImpl::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0)::{lambda(void *,WGPUDeviceLostReason,char const*)#1}::__invoke(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2 != 0x7FFFFFFF)
  {
    if (a2 == 1)
    {
      v2 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
    if (a2)
      return result;
  }
  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_DWORD *WTF::BlockPtr<void ()(WGPURequestAdapterStatus,WGPUAdapterImpl *,char const*)>::fromCallable<WebCore::WebGPU::GPUImpl::requestAdapter(WebCore::WebGPU::RequestAdapterOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore::WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Adapter>> &&)> &&)::$_0>(WebCore::WebGPU::GPUImpl::requestAdapter(WebCore::WebGPU::RequestAdapterOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore::WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Adapter>> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  _DWORD *result;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *WTF::BlockPtr<void ()(WGPURequestAdapterStatus,WGPUAdapterImpl *,char const*)>::fromCallable<WebCore::WebGPU::GPUImpl::requestAdapter(WebCore::WebGPU::RequestAdapterOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore::WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Adapter>> &&)> &&)::$_0>(WebCore::WebGPU::GPUImpl::requestAdapter(WebCore::WebGPU::RequestAdapterOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore::WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::Adapter>> &&)> &&)::$_0)::{lambda(void *,WGPURequestAdapterStatus,WGPUAdapterImpl *,char const*)#1}::__invoke(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;

  if (a2)
  {
    v11 = 0;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v4 + 16))(v4, &v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = (_DWORD *)v11;
    v11 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  else
  {
    v10 = (_DWORD *)a3;
    v6 = *(_QWORD *)(a1 + 32);
    v7 = WTF::fastMalloc((WTF *)0x40);
    v11 = WebCore::WebGPU::AdapterImpl::AdapterImpl(v7, (uint64_t *)&v10, v6);
    v8 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v8 + 16))(v8, &v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = (_DWORD *)v11;
    v11 = 0;
    if (v9)
    {
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    result = v10;
    if (v10)
      return (_DWORD *)wgpuAdapterRelease();
  }
  return result;
}

void WTF::BlockPtr<void ()(void({block_pointer})(__CFArray const*),void({block_pointer})(void({block_pointer})(void)))>::fromCallable<WebCore::WebGPU::GPUImpl::createPresentationContext(WebCore::WebGPU::PresentationContextDescriptor const&)::$_0>(WebCore::WebGPU::GPUImpl::createPresentationContext(WebCore::WebGPU::PresentationContextDescriptor const&)::$_0)::{lambda(void *,void({block_pointer})(__CFArray const*),void({block_pointer})(void({block_pointer})(void)))#1}::__invoke(uint64_t a1, void *aBlock, const void *a3)
{
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = _Block_copy(aBlock);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E33511E8;
  v6[1] = v5;
  v7 = _Block_copy(a3);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E3351210;
  v8[1] = v7;
  _Block_release(0);
  v9 = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v6;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 48) = v8;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Block_release(0);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(__CFArray const*)>,void,__CFArray const*>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E33511E8;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(__CFArray const*)>,void,__CFArray const*>::~CallableWrapper(const void **a1)
{
  void *v2;

  *a1 = off_1E33511E8;
  _Block_release(a1[1]);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(__CFArray const*)>,void,__CFArray const*>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebGPU::convert(void({block_pointer}&&)(void({block_pointer})(void)))::$_0,void,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3351210;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebGPU::convert(void({block_pointer}&&)(void({block_pointer})(void)))::$_0,void,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(const void **a1)
{
  void *v2;

  *a1 = off_1E3351210;
  _Block_release(a1[1]);
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<WebCore::WebGPU::convert(void({block_pointer}&&)(void({block_pointer})(void)))::$_0,void,WTF::CompletionHandler<void ()(void)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *a2;
  *a2 = 0;
  v4 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v4 = MEMORY[0x1E0C809A0];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
  v4[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
  v4[4] = v3;
  (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
  _Block_release(v4);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::BlockPtr<void ()(WGPUQueueWorkDoneStatus)>::fromCallable<WebCore::WebGPU::QueueImpl::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::WebGPU::QueueImpl::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(WGPUQueueWorkDoneStatus)>::fromCallable<WebCore::WebGPU::QueueImpl::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebCore::WebGPU::QueueImpl::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,WGPUQueueWorkDoneStatus)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void WebCore::Icon::createIconForFiles(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *WebCore::ControlFactory::create@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3351410;
  result[1] = 1;
  *a1 = result;
  return result;
}

void WebCore::ControlFactoryIOS::createPlatformButton(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformColorWell(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformInnerSpinButton(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformMenuList(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformMenuListButton(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformMeter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformProgressBar(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformSearchField(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformSearchFieldCancelButton(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformSearchFieldResults(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformSliderThumb(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformSliderTrack(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformSwitchThumb(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformSwitchTrack(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformTextArea(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformTextField(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ControlFactoryIOS::createPlatformToggleButton(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ComplexTextController::collectComplexTextRunsForCharacters(uint64_t a1, unsigned __int16 *a2, uint64_t a3, int a4, uint64_t a5)
{
  __CFDictionary *MutableCopy;
  WTF **v10;
  char v11;
  BOOL v12;
  unint64_t v13;
  const __CTTypesetter *v14;
  const __CTTypesetter *v15;
  const void *Line;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  _QWORD *v24;
  const __CFArray *GlyphRuns;
  const __CFArray *v26;
  CFIndex Count;
  CFIndex v28;
  CFIndex v29;
  const __CTRun *ValueAtIndex;
  CFDictionaryRef length;
  CFRange StringRange;
  WTF **v33;
  uint64_t v34;
  WTF **v35;
  WTF *v36;
  double v37;
  double v38;
  void *v39;
  const CFIndex *StringIndicesPtr;
  uint64_t v41;
  unsigned int v42;
  const __CFDictionary *v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  int v47;
  void *v48;
  const CGGlyph *GlyphsPtr;
  WTF *v50;
  uint64_t v51;
  unsigned int v52;
  const __CFDictionary *v53;
  __int16 v54;
  WTF *v55;
  int v56;
  int v57;
  float64x2_t *v58;
  CGSize *AdvancesPtr;
  unsigned int v60;
  CGSize *v61;
  uint64_t v62;
  unsigned int v63;
  const __CFDictionary *v64;
  float64x2_t v65;
  WTF *v66;
  int v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  char v72;
  uint64_t v73;
  const __CFDictionary *v74;
  uint64_t v75;
  int v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t Range;
  const __CFAllocator *v82;
  uint64_t v83;
  CFDictionaryRef v84;
  uint64_t v85;
  WTF *v86;
  const void *v87;
  const void *v88;
  const __CFDictionary *Attributes;
  WebCore::FontPlatformData *Value;
  unint64_t v91;
  int v92;
  CFDictionaryRef v93;
  int v94;
  CFTypeRef v95;
  uint64_t v96;
  uint64_t v97;
  CGPoint *v98;
  uint64_t v99;
  unint64_t v100;
  float64x2_t *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  WebCore::FontRanges *v105;
  uint64_t v106;
  uint64_t v107;
  CFDictionaryRef v108;
  int v109;
  CFDictionaryRef v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int i;
  uint64_t v114;
  uint64_t v115;
  CFDictionaryRef v116;
  int v117;
  CFDictionaryRef v118;
  CFStringRef v119;
  void *v120;
  int v121;
  void *v122;
  char v123;
  uint64_t v124;
  const __CFDictionary *v125;
  uint64_t v126;
  float Size;
  WTF **v128;
  WebCore::FontCache *v129;
  WTF::StringImpl *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  CFIndex v136;
  const __CFArray *v137;
  __CFDictionary *v138;
  WTF *v139;
  uint64_t v140;
  int v141;
  CFTypeRef cf;
  WTF **v144;
  WTF *__dst;
  WTF *v146;
  CFDictionaryRef theDict;
  uint64_t v148;
  _QWORD v149[64];
  CGGlyph *v150;
  uint64_t v151;
  CFTypeRef v152[3];
  CFRange v153;
  CFRange v154;
  CFRange v155;
  CFRange v156;
  CFRange v157;

  if (a5)
  {
    if (a5 != -1)
    {
      WebCore::Font::getCFStringAttributes((WTF::String *)(*(_QWORD *)(a1 + 5528) + 144), (void **)a5, *(_BYTE *)(*(_QWORD *)(a1 + 5528) + 229), *(unsigned __int8 *)(a5 + 100), &theDict);
      v135 = 0;
      MutableCopy = theDict;
      v10 = (WTF **)a5;
      goto LABEL_4;
    }
    if (a3)
    {
      v135 = *a2;
      if ((v135 & 0xFC00) == 0xD800 && a3 != 1)
      {
        v77 = a2[1];
        v12 = (v77 & 0xFC00) == 56320;
        v78 = *a2;
        v79 = v77 + (v135 << 10) - 56613888;
        if (v12)
          v78 = v79;
        v135 = v78;
      }
      v80 = WebCore::FontCascade::fallbackRangesAt(*(WebCore::FontCascade **)(a1 + 5528), 0);
      Range = WebCore::FontRanges::fontForCharacter(v80, v135);
      if (!Range)
      {
        v105 = (WebCore::FontRanges *)WebCore::FontCascade::fallbackRangesAt(*(WebCore::FontCascade **)(a1 + 5528), 0);
        Range = WebCore::FontRanges::fontForFirstRange(v105);
      }
      v82 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v83 = Range;
      WebCore::Font::getCFStringAttributes((WTF::String *)(*(_QWORD *)(a1 + 5528) + 144), (void **)Range, *(_BYTE *)(*(_QWORD *)(a1 + 5528) + 229), *(unsigned __int8 *)(Range + 100), &theDict);
      v84 = theDict;
      MutableCopy = CFDictionaryCreateMutableCopy(v82, 0, theDict);
      if (v84)
        CFRelease(v84);
      v10 = (WTF **)v83;
      CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8188], *(const void **)(v83 + 88));
LABEL_4:
      v11 = *(_BYTE *)(*(_QWORD *)(a1 + 5536) + 37);
      if (*(_BYTE *)(a1 + 5605))
        v12 = (v11 & 4) == 0;
      else
        v12 = 0;
      if (v12)
      {
        theDict = (CFDictionaryRef)a2;
        v148 = a3;
        v149[0] = MutableCopy;
        Line = (const void *)CTLineCreateWithUniCharProvider();
      }
      else
      {
        theDict = (CFDictionaryRef)a2;
        v148 = a3;
        v149[0] = MutableCopy;
        if ((v11 & 2) != 0)
        {
          v13 = atomic_load(&qword_1ECE81960);
          if (v13 != -1)
          {
            v152[0] = &v146;
            v150 = (CGGlyph *)v152;
            std::__call_once(&qword_1ECE81960, &v150, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<__CFDictionary const* WebCore::typesetterOptions<(WebCore::CoreTextTypesetterEmbeddingLevel)1>(void)::{lambda(void)#1} &&>>);
          }
        }
        else
        {
          v70 = atomic_load(&qword_1ECE81950);
          if (v70 != -1)
          {
            v152[0] = &v146;
            v150 = (CGGlyph *)v152;
            std::__call_once(&qword_1ECE81950, &v150, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<__CFDictionary const* WebCore::typesetterOptions<(WebCore::CoreTextTypesetterEmbeddingLevel)0>(void)::{lambda(void)#1} &&>>);
          }
        }
        v14 = (const __CTTypesetter *)CTTypesetterCreateWithUniCharProviderAndOptions();
        v15 = v14;
        if (!v14)
        {
LABEL_95:
          if (MutableCopy)
            CFRelease(MutableCopy);
          return;
        }
        v153.location = 0;
        v153.length = 0;
        Line = CTTypesetterCreateLine(v14, v153);
        CFRelease(v15);
      }
      if (Line)
      {
        v17 = *(unsigned int *)(a1 + 5500);
        v144 = v10;
        cf = Line;
        if ((_DWORD)v17 == *(_DWORD *)(a1 + 5496))
        {
          v18 = v17 + (v17 >> 2);
          if (v18 >= 0x10)
            v19 = v18 + 1;
          else
            v19 = 16;
          if (v19 <= v17 + 1)
            v20 = v17 + 1;
          else
            v20 = v19;
          if (v20 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1952A462CLL);
          }
          v21 = *(WTF **)(a1 + 5488);
          v23 = (WTF *)WTF::fastMalloc((WTF *)(8 * v20));
          *(_DWORD *)(a1 + 5496) = v20;
          *(_QWORD *)(a1 + 5488) = v23;
          if ((_DWORD)v17)
          {
            v85 = 8 * v17;
            v86 = v21;
            do
            {
              v87 = *(const void **)v86;
              *(_QWORD *)v86 = 0;
              *(_QWORD *)v23 = v87;
              v88 = *(const void **)v86;
              *(_QWORD *)v86 = 0;
              if (v88)
                CFRelease(v88);
              v23 = (WTF *)((char *)v23 + 8);
              v86 = (WTF *)((char *)v86 + 8);
              v85 -= 8;
            }
            while (v85);
            v23 = *(WTF **)(a1 + 5488);
          }
          if (v21)
          {
            if (v23 == v21)
            {
              *(_QWORD *)(a1 + 5488) = 0;
              *(_DWORD *)(a1 + 5496) = 0;
            }
            WTF::fastFree(v21, v22);
            v23 = *(WTF **)(a1 + 5488);
          }
          v24 = (_QWORD *)((char *)v23 + 8 * *(unsigned int *)(a1 + 5500));
        }
        else
        {
          v24 = (_QWORD *)(*(_QWORD *)(a1 + 5488) + 8 * v17);
        }
        *v24 = Line;
        CFRetain(Line);
        v141 = a3;
        v140 = (uint64_t)a2;
        ++*(_DWORD *)(a1 + 5500);
        GlyphRuns = CTLineGetGlyphRuns((CTLineRef)Line);
        v26 = GlyphRuns;
        if (GlyphRuns)
        {
          Count = CFArrayGetCount(GlyphRuns);
          if (Count >= 1)
          {
            v28 = 0;
            v134 = a1 + 5184;
            v137 = v26;
            v138 = MutableCopy;
            v136 = Count;
            do
            {
              if ((*(_BYTE *)(*(_QWORD *)(a1 + 5536) + 37) & 2) != 0)
                v29 = Count + ~v28;
              else
                v29 = v28;
              ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(v26, v29);
              StringRange = CTRunGetStringRange(ValueAtIndex);
              length = (CFDictionaryRef)StringRange.length;
              v33 = v144;
              if (a5 != -1)
                goto LABEL_35;
              Attributes = CTRunGetAttributes(ValueAtIndex);
              Value = (WebCore::FontPlatformData *)CFDictionaryGetValue(Attributes, (const void *)*MEMORY[0x1E0CA8188]);
              WebCore::FontPlatformData::objectForEqualityCheck(Value, v152);
              v91 = (unint64_t)v152[0];
              WebCore::FontPlatformData::objectForEqualityCheck(v144 + 11, (CFTypeRef *)&theDict);
              length = theDict;
              if (!(v91 | (unint64_t)theDict))
              {
LABEL_130:
                v94 = 0;
                v33 = v144;
                goto LABEL_131;
              }
              if (v91 && theDict)
              {
                v92 = CFEqual((CFTypeRef)v91, theDict);
                v93 = theDict;
                theDict = 0;
                if (v93)
                  CFRelease(v93);
                if (v92)
                  goto LABEL_130;
              }
              else
              {
                theDict = 0;
                if (length)
                  CFRelease(length);
              }
              if (*(_DWORD *)(WebCore::FontCascade::fallbackRangesAt(*(WebCore::FontCascade **)(a1 + 5528), 0) + 12))
              {
                v106 = WebCore::FontCascade::fallbackRangesAt(*(WebCore::FontCascade **)(a1 + 5528), 0);
                v107 = WebCore::FontRanges::fontForCharacter(v106, v135);
                v33 = (WTF **)v107;
                if (v107)
                {
                  WebCore::FontPlatformData::objectForEqualityCheck((CTFontRef *)(v107 + 88), (CFTypeRef *)&theDict);
                  v108 = theDict;
                  length = (CFDictionaryRef)v152[0];
                  if (!((unint64_t)theDict | (unint64_t)v152[0]))
                    goto LABEL_183;
                  if (theDict && v152[0])
                  {
                    v109 = CFEqual(theDict, v152[0]);
                    v110 = theDict;
                    theDict = 0;
                    if (v110)
                      CFRelease(v110);
                    if (v109)
                    {
LABEL_183:
                      if (*(_QWORD *)(a1 + 5520)
                        && v33 != (WTF **)WebCore::FontCascade::primaryFont(*(WebCore::FontCascade **)(a1 + 5528), length))
                      {
                        WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Font>(*(_QWORD *)(a1 + 5520), v33, (uint64_t)&theDict);
                      }
                      v94 = 0;
                      goto LABEL_131;
                    }
                  }
                  else
                  {
                    theDict = 0;
                    if (v108)
                      CFRelease(v108);
                  }
                }
                for (i = 1;
                      *(_DWORD *)(WebCore::FontCascade::fallbackRangesAt(*(WebCore::FontCascade **)(a1 + 5528), i) + 12);
                      ++i)
                {
                  v114 = WebCore::FontCascade::fallbackRangesAt(*(WebCore::FontCascade **)(a1 + 5528), i);
                  v115 = WebCore::FontRanges::fontForCharacter(v114, v135);
                  v33 = (WTF **)v115;
                  if (v115)
                  {
                    WebCore::FontPlatformData::objectForEqualityCheck((CTFontRef *)(v115 + 88), (CFTypeRef *)&theDict);
                    v116 = theDict;
                    length = (CFDictionaryRef)v152[0];
                    if (!((unint64_t)theDict | (unint64_t)v152[0]))
                      goto LABEL_183;
                    if (theDict && v152[0])
                    {
                      v117 = CFEqual(theDict, v152[0]);
                      v118 = theDict;
                      theDict = 0;
                      if (v118)
                        CFRelease(v118);
                      if (v117)
                        goto LABEL_183;
                    }
                    else
                    {
                      theDict = 0;
                      if (v116)
                        CFRelease(v116);
                    }
                  }
                }
              }
              else
              {
                v33 = v144;
                if (v144)
                  goto LABEL_183;
              }
              v119 = CTFontCopyPostScriptName(Value);
              v121 = CFEqual(v119, CFSTR("LastResort"));
              if (v121)
              {
                v122 = (void *)WebCore::FontCascade::primaryFont(*(WebCore::FontCascade **)(a1 + 5528), v120);
                v123 = *(_BYTE *)(*(_QWORD *)(a1 + 5536) + 37);
                v124 = WTF::fastMalloc((WTF *)0x708);
                v125 = (const __CFDictionary *)WebCore::ComplexTextController::ComplexTextRun::ComplexTextRun(v124, v122, v140, a4, v141, StringRange.location, LODWORD(StringRange.location) + LODWORD(StringRange.length), (v123 & 2) == 0);
                theDict = v125;
                v126 = *(unsigned int *)(a1 + 5196);
                if ((_DWORD)v126 == *(_DWORD *)(a1 + 5192))
                {
                  WTF::Vector<WTF::RefPtr<WebCore::ComplexTextController::ComplexTextRun,WTF::RawPtrTraits<WebCore::ComplexTextController::ComplexTextRun>,WTF::DefaultRefDerefTraits<WebCore::ComplexTextController::ComplexTextRun>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::ComplexTextController::ComplexTextRun,WTF::RawPtrTraits<WebCore::ComplexTextController::ComplexTextRun>,WTF::DefaultRefDerefTraits<WebCore::ComplexTextController::ComplexTextRun>>>(v134, (uint64_t *)&theDict);
                  if (theDict)
                    WTF::RefCounted<WebCore::ComplexTextController::ComplexTextRun>::deref((uint64_t)theDict, length);
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)(a1 + 5184) + 8 * v126) = v125;
                  *(_DWORD *)(a1 + 5196) = v126 + 1;
                }
                v33 = 0;
                v94 = 6;
              }
              else
              {
                v150 = (CGGlyph *)Value;
                if (Value)
                  CFRetain(Value);
                Size = CTFontGetSize(Value);
                WebCore::FontPlatformData::FontPlatformData((uint64_t)&theDict, (CFTypeRef *)&v150, 0, 0, 0, 0, 0, 0, Size);
                v128 = (WTF **)v150;
                v150 = 0;
                if (v128)
                  CFRelease(v128);
                v129 = (WebCore::FontCache *)WebCore::FontCache::forCurrentThread((WebCore::FontCache *)v128);
                WebCore::FontCache::fontForPlatformData(v129, (const WebCore::FontPlatformData *)&theDict, &v150);
                v33 = (WTF **)v150;
                WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>::~Ref((WTF ***)&v150);
                WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)&theDict, v130);
                v94 = 0;
              }
              if (v119)
                CFRelease(v119);
              if (!v121)
                goto LABEL_183;
LABEL_131:
              v95 = v152[0];
              v152[0] = 0;
              if (v95)
                CFRelease(v95);
              MutableCopy = v138;
              if (v94)
                goto LABEL_81;
LABEL_35:
              if (*(_QWORD *)(a1 + 5520)
                && v33 != (WTF **)WebCore::FontCascade::primaryFont(*(WebCore::FontCascade **)(a1 + 5528), length))
              {
                WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Font>(*(_QWORD *)(a1 + 5520), v144, (uint64_t)&theDict);
              }
              v34 = WTF::fastMalloc((WTF *)0x708);
              *(_DWORD *)v34 = 1;
              v139 = (WTF *)(v34 + 24);
              *(_QWORD *)(v34 + 8) = v34 + 24;
              v35 = (WTF **)(v34 + 8);
              *(_QWORD *)(v34 + 16) = 64;
              *(_QWORD *)(v34 + 536) = v34 + 552;
              *(_QWORD *)(v34 + 544) = 64;
              __dst = (WTF *)(v34 + 1080);
              *(_QWORD *)(v34 + 1064) = v34 + 1080;
              *(_QWORD *)(v34 + 1072) = 64;
              *(_QWORD *)(v34 + 1208) = v34 + 1224;
              *(_QWORD *)(v34 + 1216) = 64;
              v36 = (WTF *)(v34 + 1496);
              *(_QWORD *)(v34 + 1480) = v34 + 1496;
              *(_QWORD *)(v34 + 1488) = 64;
              CTRunGetInitialAdvance();
              *(float *)&v37 = v37;
              *(_DWORD *)(v34 + 1752) = LODWORD(v37);
              *(float *)&v37 = v38;
              *(_DWORD *)(v34 + 1756) = LODWORD(v37);
              *(_QWORD *)(v34 + 1760) = v33;
              *(_QWORD *)(v34 + 1768) = v140;
              *(_DWORD *)(v34 + 1776) = v141;
              *(_DWORD *)(v34 + 1780) = StringRange.location;
              *(_DWORD *)(v34 + 1784) = LODWORD(StringRange.location) + LODWORD(StringRange.length);
              *(_DWORD *)(v34 + 1788) = CTRunGetGlyphCount(ValueAtIndex);
              *(_DWORD *)(v34 + 1792) = a4;
              *(_BYTE *)(v34 + 1796) = (CTRunGetStatus(ValueAtIndex) & 1) == 0;
              *(_BYTE *)(v34 + 1797) = 1;
              StringIndicesPtr = CTRunGetStringIndicesPtr(ValueAtIndex);
              v152[0] = 0;
              v152[1] = 0;
              if (!StringIndicesPtr)
              {
                WTF::Vector<long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)v152, *(unsigned int *)(v34 + 1788));
                StringIndicesPtr = (const CFIndex *)v152[0];
                v155.location = 0;
                v155.length = 0;
                CTRunGetStringIndices(ValueAtIndex, v155, (CFIndex *)v152[0]);
              }
              v41 = *(unsigned int *)(v34 + 1788);
              theDict = (CFDictionaryRef)v149;
              v148 = 64;
              if (v41 >= 0x41)
              {
                if (v41 >> 30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1952A4634);
                }
                v43 = (const __CFDictionary *)WTF::fastMalloc((WTF *)(4 * v41));
                LODWORD(v148) = v41;
                theDict = v43;
                v42 = HIDWORD(v148);
              }
              else
              {
                if (!(_DWORD)v41)
                  goto LABEL_42;
                v42 = 0;
                v43 = (const __CFDictionary *)v149;
              }
              do
              {
                v44 = *StringIndicesPtr++;
                *((_DWORD *)v43 + v42) = v44;
                v42 = ++HIDWORD(v148);
                --v41;
              }
              while (v41);
LABEL_42:
              v45 = *(WTF **)(v34 + 1480);
              if (v45 != v36)
              {
                if (v45)
                {
                  *(_QWORD *)(v34 + 1480) = 0;
                  *(_DWORD *)(v34 + 1488) = 0;
                  WTF::fastFree(v45, v39);
                }
                *(_QWORD *)(v34 + 1480) = v36;
              }
              if (theDict == (CFDictionaryRef)v149)
              {
                v46 = HIDWORD(v148);
                memcpy(v36, v149, 4 * HIDWORD(v148));
                v47 = v148;
              }
              else
              {
                *(_QWORD *)(v34 + 1480) = theDict;
                v47 = v148;
                v46 = HIDWORD(v148);
              }
              *(_DWORD *)(v34 + 1488) = v47;
              *(_DWORD *)(v34 + 1492) = v46;
              GlyphsPtr = CTRunGetGlyphsPtr(ValueAtIndex);
              v50 = 0;
              v150 = 0;
              v151 = 0;
              if (!GlyphsPtr)
              {
                WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)&v150, *(unsigned int *)(v34 + 1788));
                v50 = (WTF *)v150;
                v156.location = 0;
                v156.length = 0;
                CTRunGetGlyphs(ValueAtIndex, v156, v150);
                GlyphsPtr = (const CGGlyph *)v50;
              }
              v51 = *(unsigned int *)(v34 + 1788);
              theDict = (CFDictionaryRef)v149;
              v148 = 64;
              if (v51 >= 0x41)
              {
                if ((v51 & 0x80000000) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1952A463CLL);
                }
                v53 = (const __CFDictionary *)WTF::fastMalloc((WTF *)(2 * v51));
                LODWORD(v148) = v51;
                theDict = v53;
                v52 = HIDWORD(v148);
              }
              else
              {
                if (!(_DWORD)v51)
                  goto LABEL_52;
                v52 = 0;
                v53 = (const __CFDictionary *)v149;
              }
              do
              {
                v54 = *GlyphsPtr++;
                *((_WORD *)v53 + v52++) = v54;
                --v51;
              }
              while (v51);
              HIDWORD(v148) = v52;
LABEL_52:
              v55 = *(WTF **)(v34 + 1064);
              if (v55 != __dst)
              {
                if (v55)
                {
                  *(_QWORD *)(v34 + 1064) = 0;
                  *(_DWORD *)(v34 + 1072) = 0;
                  WTF::fastFree(v55, v48);
                }
                *(_QWORD *)(v34 + 1064) = __dst;
              }
              if (theDict == (CFDictionaryRef)v149)
              {
                v56 = HIDWORD(v148);
                memcpy(__dst, v149, 2 * HIDWORD(v148));
                v57 = v148;
              }
              else
              {
                *(_QWORD *)(v34 + 1064) = theDict;
                v57 = v148;
                v56 = HIDWORD(v148);
              }
              *(_DWORD *)(v34 + 1072) = v57;
              *(_DWORD *)(v34 + 1076) = v56;
              if ((CTRunGetStatus(ValueAtIndex) & 0x10) == 0)
              {
                AdvancesPtr = (CGSize *)CTRunGetAdvancesPtr(ValueAtIndex);
                if (AdvancesPtr)
                {
                  v61 = 0;
                }
                else
                {
                  v60 = *(_DWORD *)(v34 + 1788);
                  if (v60)
                  {
                    if (v60 <= 0x10)
                      v60 = 16;
                    if (v60 >> 28)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1952A4674);
                    }
                    AdvancesPtr = (CGSize *)WTF::fastMalloc((WTF *)(16 * v60));
                  }
                  else
                  {
                    AdvancesPtr = 0;
                  }
                  v154.location = 0;
                  v154.length = 0;
                  CTRunGetAdvances(ValueAtIndex, v154, AdvancesPtr);
                  v61 = AdvancesPtr;
                }
                v62 = *(unsigned int *)(v34 + 1788);
                theDict = (CFDictionaryRef)v149;
                v148 = 64;
                if (v62 >= 0x41)
                {
                  if (v62 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1952A467CLL);
                  }
                  v64 = (const __CFDictionary *)WTF::fastMalloc((WTF *)(8 * v62));
                  LODWORD(v148) = v62;
                  theDict = v64;
                  v63 = HIDWORD(v148);
                  do
                  {
LABEL_66:
                    v65 = *(float64x2_t *)AdvancesPtr++;
                    *((float32x2_t *)v64 + v63++) = vcvt_f32_f64(v65);
                    --v62;
                  }
                  while (v62);
                  HIDWORD(v148) = v63;
                }
                else if ((_DWORD)v62)
                {
                  v63 = 0;
                  v64 = (const __CFDictionary *)v149;
                  goto LABEL_66;
                }
                v66 = *v35;
                if (*v35 != v139)
                {
                  if (v66)
                  {
                    *(_QWORD *)(v34 + 8) = 0;
                    *(_DWORD *)(v34 + 16) = 0;
                    WTF::fastFree(v66, v58);
                  }
                  *v35 = v139;
                }
                if (theDict == (CFDictionaryRef)v149)
                {
                  v67 = HIDWORD(v148);
                  if (HIDWORD(v148))
                    memcpy(v139, v149, 8 * HIDWORD(v148));
                  v68 = v148;
                }
                else
                {
                  *v35 = theDict;
                  v68 = v148;
                  v67 = HIDWORD(v148);
                }
                MutableCopy = v138;
                *(_DWORD *)(v34 + 16) = v68;
                *(_DWORD *)(v34 + 20) = v67;
                if (!v61)
                  goto LABEL_75;
                goto LABEL_74;
              }
              v96 = *(unsigned int *)(v34 + 1788);
              v133 = v96;
              if (!(_DWORD)v96)
              {
                v132 = 0;
                v61 = 0;
                goto LABEL_170;
              }
              if (v96 >> 28)
              {
                __break(0xC471u);
                JUMPOUT(0x1952A4644);
              }
              v61 = (CGSize *)WTF::fastMalloc((WTF *)(16 * v96));
              v97 = *(unsigned int *)(v34 + 1788);
              if (!(_DWORD)v97)
              {
                v132 = 0;
LABEL_170:
                v98 = 0;
                goto LABEL_146;
              }
              if (v97 >> 28)
              {
                __break(0xC471u);
                JUMPOUT(0x1952A464CLL);
              }
              v132 = *(unsigned int *)(v34 + 1788);
              v98 = (CGPoint *)WTF::fastMalloc((WTF *)(16 * v97));
LABEL_146:
              v157.location = 0;
              v157.length = 0;
              CTRunGetBaseAdvancesAndOrigins(ValueAtIndex, v157, v61, v98);
              v99 = *(unsigned int *)(v34 + 1788);
              if (v99 >= 0x41)
              {
                if (v99 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1952A4654);
                }
                v111 = WTF::fastMalloc((WTF *)(8 * v99));
                *(_DWORD *)(v34 + 16) = v99;
                *(_QWORD *)(v34 + 8) = v111;
                v99 = *(unsigned int *)(v34 + 1788);
                if (v99 >= 0x41)
                {
                  if (v99 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1952A465CLL);
                  }
                  v112 = WTF::fastMalloc((WTF *)(8 * v99));
                  *(_DWORD *)(v34 + 544) = v99;
                  *(_QWORD *)(v34 + 536) = v112;
                  LODWORD(v99) = *(_DWORD *)(v34 + 1788);
                }
              }
              if ((_DWORD)v99)
              {
                v100 = 0;
                do
                {
                  if (v100 == v133)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1952A4664);
                  }
                  v101 = (float64x2_t *)&v61[v100];
                  v102 = *(unsigned int *)(v34 + 20);
                  if ((_DWORD)v102 == *(_DWORD *)(v34 + 16))
                  {
                    WTF::Vector<WebCore::FloatSize,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize &>((uint64_t)v35, v101);
                  }
                  else
                  {
                    *(float32x2_t *)(*(_QWORD *)(v34 + 8) + 8 * v102) = vcvt_f32_f64(*v101);
                    *(_DWORD *)(v34 + 20) = v102 + 1;
                  }
                  if (v100 == v132)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1952A466CLL);
                  }
                  v58 = (float64x2_t *)&v98[v100];
                  v103 = *(unsigned int *)(v34 + 548);
                  if ((_DWORD)v103 == *(_DWORD *)(v34 + 544))
                  {
                    WTF::Vector<WebCore::FloatPoint,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGPoint &>(v34 + 536, v58);
                  }
                  else
                  {
                    *(float32x2_t *)(*(_QWORD *)(v34 + 536) + 8 * v103) = vcvt_f32_f64(*v58);
                    *(_DWORD *)(v34 + 548) = v103 + 1;
                  }
                  ++v100;
                }
                while (v100 < *(unsigned int *)(v34 + 1788));
              }
              if (v98)
                WTF::fastFree((WTF *)v98, v58);
              MutableCopy = v138;
              if (!v61)
                goto LABEL_75;
LABEL_74:
              WTF::fastFree((WTF *)v61, v58);
              v50 = (WTF *)v150;
LABEL_75:
              if (v50)
              {
                v150 = 0;
                LODWORD(v151) = 0;
                WTF::fastFree(v50, v58);
              }
              if (v152[0])
                WTF::fastFree((WTF *)v152[0], v58);
              v146 = (WTF *)v34;
              v69 = *(unsigned int *)(a1 + 5196);
              if ((_DWORD)v69 == *(_DWORD *)(a1 + 5192))
              {
                WTF::Vector<WTF::RefPtr<WebCore::ComplexTextController::ComplexTextRun,WTF::RawPtrTraits<WebCore::ComplexTextController::ComplexTextRun>,WTF::DefaultRefDerefTraits<WebCore::ComplexTextController::ComplexTextRun>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::ComplexTextController::ComplexTextRun,WTF::RawPtrTraits<WebCore::ComplexTextController::ComplexTextRun>,WTF::DefaultRefDerefTraits<WebCore::ComplexTextController::ComplexTextRun>>>(v134, (uint64_t *)&v146);
                if (v146)
                  WTF::RefCounted<WebCore::ComplexTextController::ComplexTextRun>::deref((uint64_t)v146, v104);
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(a1 + 5184) + 8 * v69) = v34;
                *(_DWORD *)(a1 + 5196) = v69 + 1;
              }
LABEL_81:
              ++v28;
              Count = v136;
              v26 = v137;
            }
            while (v28 != v136);
          }
        }
        CFRelease(cf);
      }
      goto LABEL_95;
    }
    __break(1u);
  }
  else
  {
    v71 = (void *)WebCore::FontCascade::primaryFont(*(WebCore::FontCascade **)(a1 + 5528), a2);
    v72 = (*(_BYTE *)(*(_QWORD *)(a1 + 5536) + 37) & 2) == 0;
    v73 = WTF::fastMalloc((WTF *)0x708);
    v74 = (const __CFDictionary *)WebCore::ComplexTextController::ComplexTextRun::ComplexTextRun(v73, v71, (uint64_t)a2, a4, a3, 0, a3, v72);
    theDict = v74;
    v75 = *(unsigned int *)(a1 + 5196);
    if ((_DWORD)v75 != *(_DWORD *)(a1 + 5192))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 5184) + 8 * v75) = v74;
      *(_DWORD *)(a1 + 5196) = v75 + 1;
      return;
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::ComplexTextController::ComplexTextRun,WTF::RawPtrTraits<WebCore::ComplexTextController::ComplexTextRun>,WTF::DefaultRefDerefTraits<WebCore::ComplexTextController::ComplexTextRun>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::ComplexTextController::ComplexTextRun,WTF::RawPtrTraits<WebCore::ComplexTextController::ComplexTextRun>,WTF::DefaultRefDerefTraits<WebCore::ComplexTextController::ComplexTextRun>>>(a1 + 5184, (uint64_t *)&theDict);
  if (theDict)
    WTF::RefCounted<WebCore::ComplexTextController::ComplexTextRun>::deref((uint64_t)theDict, v131);
}

void sub_1952A468C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CFTypeRef cf,uint64_t a24,uint64_t a25,uint64_t a26,WTF *a27,WTF *a28,int a29)
{
  if (a28)
    WTF::RefCounted<WebCore::ComplexTextController::ComplexTextRun>::deref((uint64_t)a28, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::FontCascade::fallbackRangesAt(WebCore::FontCascade *this, unsigned int a2)
{
  WebCore::FontCascadeFonts *v2;
  void *v3;
  uint64_t v4;
  WTF *v6;
  void *v7;

  v2 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 27);
  if (v2)
    ++*(_DWORD *)v2;
  v4 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v2, (WebCore::FontCascade *)((char *)this + 16), a2);
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v2, v3);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return v4;
}

void sub_1952A49EC(_Unwind_Exception *exception_object, void *a2)
{
  WebCore::FontCascadeFonts *v2;
  WTF *v4;
  void *v5;

  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v2, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::provideStringAndAttributes(unint64_t this, _QWORD *a2, uint64_t *a3, const __CFDictionary **a4, void *a5)
{
  const __CFDictionary *v5;
  BOOL v6;
  char *v7;

  if ((this & 0x8000000000000000) != 0)
    return 0;
  v5 = a4[1];
  v6 = (unint64_t)v5 > this;
  v7 = (char *)v5 - this;
  if (!v6)
    return 0;
  *a2 = v7;
  *a3 = (uint64_t)a4[2];
  return (uint64_t)*a4 + 2 * this;
}

WTF ***WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>::~Ref(WTF ***a1)
{
  WTF **v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::Font::~Font(v2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return a1;
}

WTF *WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Font>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  WTF *v11;
  void *v12;
  WTF *result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF **v17;
  unsigned int v19;
  void *v21;
  WTF *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  WTF *v28;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v14 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v14)
      goto LABEL_23;
    v15 = 0;
    v16 = v14 - 1;
    do
    {
      v17 = (WTF **)(v8 + 8 * v16);
      if ((unint64_t)*v17 + 1 >= 2 && !*((_QWORD *)*v17 + 1))
      {
        v27 = v15;
        v26 = v16;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v17, a2);
        v16 = v26;
        v15 = v27 + 1;
      }
    }
    while ((unint64_t)v16--);
    v8 = *(_QWORD *)a1;
    if (v15)
    {
      v23 = v15;
      *(_DWORD *)(v8 - 16) += v15;
      v24 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v25 = *(_DWORD *)(v24 - 12);
      else
        v25 = 0;
      *(_DWORD *)(v24 - 12) = v25 - v23;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v19 = *(_DWORD *)(v8 - 4);
    if (v19 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v19)
    {
LABEL_23:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = (WTF *)a2[1];
  if (!v11)
  {
    v11 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *((_QWORD *)v11 + 1) = a2;
    v22 = (WTF *)a2[1];
    a2[1] = v11;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WTF::fastFree(v22, v21);
        v11 = (WTF *)a2[1];
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
  }
  *(_DWORD *)v11 += 2;
  v28 = v11;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a1, &v28, a3);
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v12);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v11 == 1)
    return (WTF *)WTF::fastFree(v11, v12);
  --*(_DWORD *)v11;
  return result;
}

void sub_1952A4C8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  WTF *v12;

  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (*(_DWORD *)v12 == 1)
    WTF::fastFree(v12, a2);
  else
    --*(_DWORD *)v12;
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RefCounted<WebCore::ComplexTextController::ComplexTextRun>::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v5;
  WTF *v7;
  WTF *v9;
  WTF *v10;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(WTF **)(this + 1480);
    if ((WTF *)(v2 + 1496) != v3 && v3 != 0)
    {
      *(_QWORD *)(v2 + 1480) = 0;
      *(_DWORD *)(v2 + 1488) = 0;
      WTF::fastFree(v3, a2);
    }
    v5 = *(WTF **)(v2 + 1208);
    if ((WTF *)(v2 + 1224) != v5 && v5 != 0)
    {
      *(_QWORD *)(v2 + 1208) = 0;
      *(_DWORD *)(v2 + 1216) = 0;
      WTF::fastFree(v5, a2);
    }
    v7 = *(WTF **)(v2 + 1064);
    if ((WTF *)(v2 + 1080) != v7 && v7 != 0)
    {
      *(_QWORD *)(v2 + 1064) = 0;
      *(_DWORD *)(v2 + 1072) = 0;
      WTF::fastFree(v7, a2);
    }
    v9 = *(WTF **)(v2 + 536);
    if ((WTF *)(v2 + 552) != v9 && v9)
    {
      *(_QWORD *)(v2 + 536) = 0;
      *(_DWORD *)(v2 + 544) = 0;
      WTF::fastFree(v9, a2);
    }
    v10 = *(WTF **)(v2 + 8);
    if ((WTF *)(v2 + 24) != v10)
    {
      if (v10)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v10, a2);
      }
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::Vector<long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if (v4 >= a2)
  {
LABEL_10:
    *(_DWORD *)(v3 + 12) = v2;
    return result;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  if (!(v7 >> 29))
  {
    v8 = *(void **)result;
    v9 = *(unsigned int *)(result + 12);
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(v3 + 8) = v7;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v8, 8 * v9);
    if (v8)
    {
      if (*(void **)v3 == v8)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v8, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if (v4 >= a2)
  {
LABEL_13:
    *(_DWORD *)(v3 + 12) = v2;
    return result;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  if (!(v7 >> 31))
  {
    v8 = *(void **)result;
    v9 = *(unsigned int *)(result + 12);
    v10 = (void *)WTF::fastMalloc((WTF *)(2 * v7));
    *(_DWORD *)(v3 + 8) = v7;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v8, 2 * v9);
    if (v8)
    {
      if (*(void **)v3 == v8)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v8, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::VectorBuffer<WebCore::FloatSize,64ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 0x41)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 64;
  }
  else
  {
    v3 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

float32x2_t WTF::Vector<WebCore::FloatSize,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize &>(uint64_t a1, float64x2_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t result;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    v9 = *(WTF **)a1;
    WTF::VectorBuffer<WebCore::FloatSize,64ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, v8);
    if ((_DWORD)v5)
    {
      v11 = *(WTF **)a1;
      v12 = 8 * v5;
      v13 = v9;
      do
      {
        v14 = *(_QWORD *)v13;
        v13 = (WTF *)((char *)v13 + 8);
        *(_QWORD *)v11 = v14;
        v11 = (WTF *)((char *)v11 + 8);
        v12 -= 8;
      }
      while (v12);
    }
    if ((WTF *)(a1 + 16) != v9 && v9)
    {
      if (*(WTF **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v9, v10);
    }
  }
  v15 = *(unsigned int *)(a1 + 12);
  result = vcvt_f32_f64(*a2);
  *(float32x2_t *)(*(_QWORD *)a1 + 8 * v15) = result;
  *(_DWORD *)(a1 + 12) = v15 + 1;
  return result;
}

uint64_t WTF::Vector<WebCore::FloatPoint,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGPoint &>(uint64_t result, float64x2_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_16:
    v13 = *(unsigned int *)(v3 + 12);
    *(float32x2_t *)(*(_QWORD *)v3 + 8 * v13) = vcvt_f32_f64(*a2);
    *(_DWORD *)(v3 + 12) = v13 + 1;
    return result;
  }
  v9 = *(WTF **)result;
  if (v8 < 0x41)
  {
    result += 16;
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 64;
    if (!(_DWORD)v5)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (!(v8 >> 29))
  {
    result = WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = result;
    if (!(_DWORD)v5)
      goto LABEL_15;
LABEL_13:
    v10 = 8 * v5;
    v11 = v9;
    do
    {
      v12 = *(_QWORD *)v11;
      v11 = (WTF *)((char *)v11 + 8);
      *(_QWORD *)result = v12;
      result += 8;
      v10 -= 8;
    }
    while (v10);
LABEL_15:
    if ((WTF *)(v3 + 16) != v9 && v9)
    {
      if (*(WTF **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree(v9, a2);
    }
    goto LABEL_16;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::ComplexTextController::ComplexTextRun,WTF::RawPtrTraits<WebCore::ComplexTextController::ComplexTextRun>,WTF::DefaultRefDerefTraits<WebCore::ComplexTextController::ComplexTextRun>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::ComplexTextController::ComplexTextRun,WTF::RawPtrTraits<WebCore::ComplexTextController::ComplexTextRun>,WTF::DefaultRefDerefTraits<WebCore::ComplexTextController::ComplexTextRun>>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    v14 = *a2;
    *a2 = 0;
    v13[v12] = v14;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  v9 = *(void **)result;
  if (v8 < 0x11)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 16;
    goto LABEL_12;
  }
  if (!(v8 >> 29))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_12:
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

CFDictionaryRef std::__call_once_proxy[abi:sn180100]<std::tuple<__CFDictionary const* WebCore::typesetterOptions<(WebCore::CoreTextTypesetterEmbeddingLevel)0>(void)::{lambda(void)#1} &&>>()
{
  CFDictionaryRef result;
  uint64_t v1;

  result = WebCore::buildCoreTextTypesetterEmbeddingLevelDictionary((CFDictionaryRef *)&v1, 0);
  _MergedGlobals_127 = v1;
  return result;
}

CFDictionaryRef WebCore::buildCoreTextTypesetterEmbeddingLevelDictionary(CFDictionaryRef *a1, __int16 a2)
{
  const __CFAllocator *v3;
  CFDictionaryRef result;
  __int16 valuePtr;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = a2;
  keys[0] = *(void **)MEMORY[0x1E0CA8610];
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberShortType, &valuePtr);
  result = CFDictionaryCreate(v3, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  *a1 = result;
  return result;
}

CFDictionaryRef std::__call_once_proxy[abi:sn180100]<std::tuple<__CFDictionary const* WebCore::typesetterOptions<(WebCore::CoreTextTypesetterEmbeddingLevel)1>(void)::{lambda(void)#1} &&>>()
{
  CFDictionaryRef result;
  uint64_t v1;

  result = WebCore::buildCoreTextTypesetterEmbeddingLevelDictionary((CFDictionaryRef *)&v1, 1);
  qword_1ECE81958 = v1;
  return result;
}

uint64_t *WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  WTF **v9;
  WTF *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  WTF **v17;
  WTF *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::fastZeroedMalloc((WTF *)0x50),
        *v4 = (uint64_t)(result + 2),
        *((_DWORD *)result + 3) = 8,
        *(_DWORD *)(*v4 - 8) = 7,
        *(_DWORD *)(*v4 - 16) = 0,
        *(_DWORD *)(*v4 - 12) = 0,
        (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = (WTF *)*a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (WTF **)(v6 + 8 * v16);
    v18 = *v17;
    if (!*v17)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = (WTF *)*a2;
        v17 = v9;
      }
      *a2 = 0;
      result = (uint64_t *)*v17;
      *v17 = v10;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        else
          --*(_DWORD *)result;
      }
      v19 = *v4;
      if (*v4)
        v20 = *(_DWORD *)(v19 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *v4;
      if (*v4)
        v22 = *(_DWORD *)(v21 - 12);
      else
        v22 = 0;
      v23 = (*(_DWORD *)(v21 - 16) + v22);
      v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23)
          goto LABEL_15;
      }
      else if (3 * v24 > 4 * v23)
      {
LABEL_15:
        v25 = v21 + 8 * v24;
        v26 = 1;
        goto LABEL_16;
      }
      result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(v4, v17);
      v17 = (WTF **)result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_15;
    }
    if (v18 != (WTF *)-1)
      break;
    v9 = (WTF **)(v6 + 8 * v16);
LABEL_26:
    v14 = i + v16;
  }
  if (v18 != v10)
    goto LABEL_26;
  if ((v7 & 1) != 0)
    v27 = 0;
  else
    v27 = *(unsigned int *)(v6 - 4);
  v26 = 0;
  v25 = v6 + 8 * v27;
LABEL_16:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v25;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

WTF *WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(WTF **a1, void *a2)
{
  WTF *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  *a1 = (WTF *)-1;
  return result;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(v2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v4, 0);
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  WTF **v11;
  WTF **result;
  uint64_t v13;
  WTF **v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  WTF **v25;
  WTF *v26;
  WTF *v27;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v11 = 0;
    do
    {
      v14 = (WTF **)(v6 + 8 * v13);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != (WTF *)-1)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = ((unint64_t)v15 + ~((_QWORD)v15 << 32)) ^ (((unint64_t)v15 + ~((_QWORD)v15 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 8 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = (WTF **)(v16 + 8 * v23);
          *v25 = 0;
          v26 = *v14;
          *v14 = 0;
          *v25 = v26;
          v27 = *v14;
          *v14 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 1)
              WTF::fastFree(v27, v10);
            else
              --*(_DWORD *)v27;
          }
          if (v14 == a3)
            v11 = v25;
        }
      }
      else
      {
        *v14 = 0;
      }
      ++v13;
    }
    while (v13 != v7);
    goto LABEL_20;
  }
  v11 = 0;
  result = 0;
  if (v6)
  {
LABEL_20:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  WTF **v10;
  WTF **result;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WTF **v24;
  WTF *v25;
  WTF *v26;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
    goto LABEL_3;
  v7 = v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v10 = 0;
    do
    {
      v13 = (WTF **)(v4 + 8 * v12);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (WTF *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (WTF **)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
              WTF::fastFree(v26, v9);
            else
              --*(_DWORD *)v26;
          }
          if (v13 == a2)
            v10 = v24;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v12;
    }
    while (v12 != v5);
    goto LABEL_22;
  }
  v10 = 0;
  result = 0;
  if (v4)
  {
LABEL_22:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

void WebCore::WebGPU::RenderBundleEncoderImpl::~RenderBundleEncoderImpl(WebCore::WebGPU::RenderBundleEncoderImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuRenderBundleEncoderRelease();
  *(_QWORD *)this = off_1E3351728;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuRenderBundleEncoderRelease();
  *(_QWORD *)this = off_1E3351728;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WebCore::WebGPU::RenderBundleEncoderImpl::setPipeline(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 160))(*(_QWORD *)(a1 + 32));
  JUMPOUT(0x19AEA8F64);
}

void WebCore::WebGPU::RenderBundleEncoderImpl::setIndexBuffer(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  JUMPOUT(0x19AEA8F4CLL);
}

void WebCore::WebGPU::RenderBundleEncoderImpl::setVertexBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), a3);
  JUMPOUT(0x19AEA8F70);
}

void WebCore::WebGPU::RenderBundleEncoderImpl::draw()
{
  JUMPOUT(0x19AEA8ED4);
}

void WebCore::WebGPU::RenderBundleEncoderImpl::drawIndexed()
{
  JUMPOUT(0x19AEA8EE0);
}

uint64_t WebCore::WebGPU::RenderBundleEncoderImpl::drawIndirect(WebCore::WebGPU::RenderBundleEncoderImpl *this, const WebCore::WebGPU::Buffer *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
  return wgpuRenderBundleEncoderDrawIndirect();
}

uint64_t WebCore::WebGPU::RenderBundleEncoderImpl::drawIndexedIndirect(WebCore::WebGPU::RenderBundleEncoderImpl *this, const WebCore::WebGPU::Buffer *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
  return wgpuRenderBundleEncoderDrawIndexedIndirect();
}

uint64_t WebCore::WebGPU::RenderBundleEncoderImpl::setBindGroup(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v7 = result;
  if (*(_BYTE *)(a4 + 16) && (v8 = *(unsigned int *)(a4 + 12), (_DWORD)v8))
  {
    if (v8 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    v9 = (void *)WTF::fastMalloc((WTF *)(4 * v8));
    memcpy(v9, *(const void **)a4, 4 * *(unsigned int *)(a4 + 12));
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_QWORD *)(v7 + 24);
  v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 32) + 24))(*(_QWORD *)(v7 + 32), a3);
  result = MEMORY[0x19AEA30B4](v10, a2, v11, a4);
  if (v9)
    return WTF::fastFree((WTF *)v9, v12);
  return result;
}

void WebCore::WebGPU::RenderBundleEncoderImpl::setBindGroup(WebCore::WebGPU::RenderBundleEncoderImpl *this, unsigned int a2, const WebCore::WebGPU::BindGroup *a3, const unsigned int *a4)
{
  __break(0xC471u);
}

uint64_t WebCore::WebGPU::RenderBundleEncoderImpl::pushDebugGroup()
{
  void *v0;
  uint64_t result;
  WTF *v2;

  WTF::String::utf8();
  wgpuRenderBundleEncoderPushDebugGroup();
  result = (uint64_t)v2;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
      return WTF::fastFree(v2, v0);
    else
      --*(_DWORD *)v2;
  }
  return result;
}

uint64_t WebCore::WebGPU::RenderBundleEncoderImpl::popDebugGroup(WebCore::WebGPU::RenderBundleEncoderImpl *this)
{
  return wgpuRenderBundleEncoderPopDebugGroup();
}

uint64_t WebCore::WebGPU::RenderBundleEncoderImpl::insertDebugMarker()
{
  void *v0;
  uint64_t result;
  WTF *v2;

  WTF::String::utf8();
  wgpuRenderBundleEncoderInsertDebugMarker();
  result = (uint64_t)v2;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
      return WTF::fastFree(v2, v0);
    else
      --*(_DWORD *)v2;
  }
  return result;
}

uint64_t WebCore::WebGPU::RenderBundleEncoderImpl::finish@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  WTF *v9;

  WTF::String::utf8();
  v4 = wgpuRenderBundleEncoderFinish();
  v5 = *(_QWORD *)(a1 + 32);
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E3351550;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = v4;
  ++*(_DWORD *)(v5 + 8);
  *(_QWORD *)(v6 + 32) = v5;
  *a2 = v6;
  result = (uint64_t)v9;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      return WTF::fastFree(v9, v7);
    else
      --*(_DWORD *)v9;
  }
  return result;
}

WTF *WebCore::WebGPU::RenderBundleEncoderImpl::setLabelInternal(WebCore::WebGPU::RenderBundleEncoderImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuRenderBundleEncoderSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::RenderBundleImpl::~RenderBundleImpl(WebCore::WebGPU::RenderBundleImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuRenderBundleRelease();
  *(_QWORD *)this = off_1E33517B8;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuRenderBundleRelease();
  *(_QWORD *)this = off_1E33517B8;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF *WebCore::WebGPU::RenderBundleImpl::setLabelInternal(WebCore::WebGPU::RenderBundleImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuRenderBundleSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::RenderPassEncoderImpl::~RenderPassEncoderImpl(WebCore::WebGPU::RenderPassEncoderImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuRenderPassEncoderRelease();
  *(_QWORD *)this = off_1E33517E0;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuRenderPassEncoderRelease();
  *(_QWORD *)this = off_1E33517E0;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::setPipeline(WebCore::WebGPU::RenderPassEncoderImpl *this, const WebCore::WebGPU::RenderPipeline *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::RenderPipeline *))(**((_QWORD **)this + 4) + 160))(*((_QWORD *)this + 4), a2);
  return wgpuRenderPassEncoderSetPipeline();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::setIndexBuffer(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  return wgpuRenderPassEncoderSetIndexBuffer();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::setVertexBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), a3);
  return wgpuRenderPassEncoderSetVertexBuffer();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::draw()
{
  return wgpuRenderPassEncoderDraw();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::drawIndexed()
{
  return wgpuRenderPassEncoderDrawIndexed();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::drawIndirect(WebCore::WebGPU::RenderPassEncoderImpl *this, const WebCore::WebGPU::Buffer *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
  return wgpuRenderPassEncoderDrawIndirect();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::drawIndexedIndirect(WebCore::WebGPU::RenderPassEncoderImpl *this, const WebCore::WebGPU::Buffer *a2)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::Buffer *))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), a2);
  return wgpuRenderPassEncoderDrawIndexedIndirect();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::setBindGroup(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;

  v5 = result;
  if (*(_BYTE *)(a4 + 16) && (v7 = *(unsigned int *)(a4 + 12), (_DWORD)v7))
  {
    if (v7 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (void *)WTF::fastMalloc((WTF *)(4 * v7));
    memcpy(v8, *(const void **)a4, 4 * *(unsigned int *)(a4 + 12));
  }
  else
  {
    v8 = 0;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 32) + 24))(*(_QWORD *)(v5 + 32), a3);
  result = wgpuRenderPassEncoderSetBindGroup();
  if (v8)
    return WTF::fastFree((WTF *)v8, v9);
  return result;
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::setBindGroup(WebCore::WebGPU::RenderPassEncoderImpl *this, unsigned int a2, const WebCore::WebGPU::BindGroup *a3, const unsigned int *a4)
{
  (*(void (**)(_QWORD, const WebCore::WebGPU::BindGroup *))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), a3);
  return wgpuRenderPassEncoderSetBindGroup();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::pushDebugGroup()
{
  void *v0;
  uint64_t result;
  WTF *v2;

  WTF::String::utf8();
  wgpuRenderPassEncoderPushDebugGroup();
  result = (uint64_t)v2;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
      return WTF::fastFree(v2, v0);
    else
      --*(_DWORD *)v2;
  }
  return result;
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::popDebugGroup(WebCore::WebGPU::RenderPassEncoderImpl *this)
{
  return wgpuRenderPassEncoderPopDebugGroup();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::insertDebugMarker()
{
  void *v0;
  uint64_t result;
  WTF *v2;

  WTF::String::utf8();
  wgpuRenderPassEncoderInsertDebugMarker();
  result = (uint64_t)v2;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
      return WTF::fastFree(v2, v0);
    else
      --*(_DWORD *)v2;
  }
  return result;
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::setViewport(WebCore::WebGPU::RenderPassEncoderImpl *this, float a2, float a3, float a4, float a5, float a6, float a7)
{
  return wgpuRenderPassEncoderSetViewport();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::setScissorRect(WebCore::WebGPU::RenderPassEncoderImpl *this)
{
  return wgpuRenderPassEncoderSetScissorRect();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::setBlendConstant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::WebGPU::RenderPassEncoderImpl *v7;
  unsigned int v8;
  _QWORD v9[4];
  char v10;

  v2 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v2 == -1)
  {
    v7 = (WebCore::WebGPU::RenderPassEncoderImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::WebGPU::RenderPassEncoderImpl::setStencilReference(v7, v8);
  }
  else
  {
    v9[0] = &v10;
    v9[0] = ((double (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_9ColorDictEEEEE3__0JZNSA_16convertToBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v2])(v9);
    v9[1] = v3;
    v9[2] = v4;
    v9[3] = v5;
    return wgpuRenderPassEncoderSetBlendConstant();
  }
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::setStencilReference(WebCore::WebGPU::RenderPassEncoderImpl *this)
{
  return wgpuRenderPassEncoderSetStencilReference();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::beginOcclusionQuery(WebCore::WebGPU::RenderPassEncoderImpl *this)
{
  return wgpuRenderPassEncoderBeginOcclusionQuery();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::endOcclusionQuery(WebCore::WebGPU::RenderPassEncoderImpl *this)
{
  return wgpuRenderPassEncoderEndOcclusionQuery();
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::executeBundles(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  void *v7;

  v2 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v2)
    return wgpuRenderPassEncoderExecuteBundles();
  if (v2 >> 29)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
    if (*(_DWORD *)(a2 + 12))
    {
      v6 = 0;
      do
      {
        *((_QWORD *)v5 + v6) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 144))(v4, *(_QWORD *)(*(_QWORD *)a2 + 8 * v6));
        ++v6;
      }
      while (v6 < *(unsigned int *)(a2 + 12));
    }
    wgpuRenderPassEncoderExecuteBundles();
    return WTF::fastFree(v5, v7);
  }
  return result;
}

uint64_t WebCore::WebGPU::RenderPassEncoderImpl::end(WebCore::WebGPU::RenderPassEncoderImpl *this)
{
  return wgpuRenderPassEncoderEnd();
}

WTF *WebCore::WebGPU::RenderPassEncoderImpl::setLabelInternal(WebCore::WebGPU::RenderPassEncoderImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuRenderPassEncoderSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::RenderPipelineImpl::~RenderPipelineImpl(WebCore::WebGPU::RenderPipelineImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuRenderPipelineRelease();
  *(_QWORD *)this = off_1E33518A8;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuRenderPipelineRelease();
  *(_QWORD *)this = off_1E33518A8;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGPU::RenderPipelineImpl::getBindGroupLayout@<X0>(WebCore::WebGPU::RenderPipelineImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t BindGroupLayout;
  uint64_t v5;
  uint64_t result;

  BindGroupLayout = wgpuRenderPipelineGetBindGroupLayout();
  v5 = *((_QWORD *)this + 4);
  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E334F4D8;
  ++*(_DWORD *)(v5 + 8);
  *(_QWORD *)(result + 32) = BindGroupLayout;
  *(_QWORD *)(result + 40) = v5;
  *a2 = result;
  return result;
}

WTF *WebCore::WebGPU::RenderPipelineImpl::setLabelInternal(WebCore::WebGPU::RenderPipelineImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuRenderPipelineSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::SamplerImpl::~SamplerImpl(WebCore::WebGPU::SamplerImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuSamplerRelease();
  *(_QWORD *)this = off_1E33518D8;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    wgpuSamplerRelease();
  *(_QWORD *)this = off_1E33518D8;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF *WebCore::WebGPU::SamplerImpl::setLabelInternal(WebCore::WebGPU::SamplerImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuSamplerSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::ShaderModuleImpl::~ShaderModuleImpl(WebCore::WebGPU::ShaderModuleImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    wgpuShaderModuleRelease();
  *(_QWORD *)this = off_1E3351900;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGPU::ShaderModuleImpl::~ShaderModuleImpl(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::WebGPU::ShaderModuleImpl::compilationInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a2;
  *a2 = 0;
  v3 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v3 = MEMORY[0x1E0C809A0];
  v3[1] = 50331650;
  v3[2] = WTF::BlockPtr<void ()(WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const*)>::fromCallable<WebCore::WebGPU::ShaderModuleImpl::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0>(WebCore::WebGPU::ShaderModuleImpl::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0)::{lambda(void *,WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const*)#1}::__invoke;
  v3[3] = &WTF::BlockPtr<void ()(WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const*)>::fromCallable<WebCore::WebGPU::ShaderModuleImpl::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0>(WebCore::WebGPU::ShaderModuleImpl::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0)::descriptor;
  v3[4] = v2;
  _Block_copy(v3);
  wgpuShaderModuleGetCompilationInfo();
  _Block_release(v3);
}

void WebCore::WebGPU::compilationInfoCallback(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  a3[2](a3, a1, a2);
  _Block_release(a3);
}

WTF *WebCore::WebGPU::ShaderModuleImpl::setLabelInternal(WebCore::WebGPU::ShaderModuleImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuShaderModuleSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::TextureImpl::~TextureImpl(WebCore::WebGPU::TextureImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    wgpuTextureRelease();
  *(_QWORD *)this = off_1E3351950;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGPU::TextureImpl::~TextureImpl(this, a2);
  WTF::fastFree(v2, v3);
}

WTF *WebCore::WebGPU::TextureImpl::createView@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t View;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *result;
  WTF *v11;

  if (a2[40])
    WTF::String::utf8();
  else
    WTF::CString::CString((WTF::CString *)&v11, "");
  if (a2[40] && a2[9])
    WebCore::WebGPU::ConvertToBackingContext::convertToBacking(*(_QWORD *)(a1 + 48), a2[8]);
  View = wgpuTextureCreateView();
  v7 = *(_QWORD *)(a1 + 48);
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)v8 = off_1E3351700;
  *(_QWORD *)(v8 + 32) = View;
  ++*(_DWORD *)(v7 + 8);
  *(_QWORD *)(v8 + 40) = v7;
  *a3 = v8;
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v9);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::WebGPU::TextureImpl::destroy(WebCore::WebGPU::TextureImpl *this)
{
  return wgpuTextureDestroy();
}

WTF *WebCore::WebGPU::TextureImpl::setLabelInternal(WebCore::WebGPU::TextureImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuTextureSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::WebGPU::TextureViewImpl::~TextureViewImpl(WebCore::WebGPU::TextureViewImpl *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    wgpuTextureViewRelease();
  *(_QWORD *)this = off_1E3351988;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGPU::TextureViewImpl::~TextureViewImpl(this, a2);
  WTF::fastFree(v2, v3);
}

WTF *WebCore::WebGPU::TextureViewImpl::setLabelInternal(WebCore::WebGPU::TextureViewImpl *this, const WTF::String *a2)
{
  void *v2;
  WTF *result;
  WTF *v4;

  WTF::String::utf8();
  wgpuTextureViewSetLabel();
  result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return (WTF *)WTF::fastFree(v4, v2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const*)>::fromCallable<WebCore::WebGPU::ShaderModuleImpl::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0>(WebCore::WebGPU::ShaderModuleImpl::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const*)>::fromCallable<WebCore::WebGPU::ShaderModuleImpl::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0>(WebCore::WebGPU::ShaderModuleImpl::compilationInfo(WTF::CompletionHandler<void ()(WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore::WebGPU::CompilationInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGPU::CompilationInfo>> &&)> &&)::$_0)::{lambda(void *,WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const*)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t result;
  __int128 v29;
  WTF *v30;
  char *v31;
  uint64_t v32;

  v31 = 0;
  v32 = 0;
  if (a3 && *(_QWORD *)(a3 + 8))
  {
    v5 = 0;
    v6 = 0;
    LODWORD(v7) = 0;
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(a3 + 16);
      v10 = v9 + v5;
      v11 = *(_DWORD *)(v9 + v5 + 16);
      switch(v11)
      {
        case 1:
          v12 = 1;
          break;
        case 2:
          v12 = 2;
          break;
        case 0x7FFFFFFF:
          result = 59;
          __break(0xC471u);
          return result;
        default:
          v12 = 0;
          break;
      }
      v13 = v9 + v5;
      v15 = *(_QWORD *)(v13 + 24);
      v14 = *(_QWORD *)(v13 + 32);
      v29 = *(_OWORD *)(v13 + 40);
      v16 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v16 = 1;
      v18 = *(_DWORD **)(v10 + 8);
      if (v18)
        *v18 += 2;
      *(_QWORD *)(v16 + 8) = v18;
      *(_BYTE *)(v16 + 16) = v12;
      *(_QWORD *)(v16 + 24) = v15;
      *(_QWORD *)(v16 + 32) = v14 + 1;
      *(_OWORD *)(v16 + 40) = v29;
      v30 = (WTF *)v16;
      if ((_DWORD)v7 == (_DWORD)v32)
      {
        v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v31, v7 + 1, (unint64_t)&v30);
        v7 = HIDWORD(v32);
        v6 = v31;
        v20 = *(_QWORD *)v19;
        *(_QWORD *)v19 = 0;
        *(_QWORD *)&v6[8 * v7] = v20;
      }
      else
      {
        v30 = 0;
        *(_QWORD *)&v6[8 * v7] = v16;
      }
      LODWORD(v7) = v7 + 1;
      HIDWORD(v32) = v7;
      v21 = v30;
      v30 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
        {
          v22 = (WTF::StringImpl *)*((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v17);
            else
              *(_DWORD *)v22 -= 2;
          }
          WTF::fastFree(v21, v17);
        }
        else
        {
          --*(_DWORD *)v21;
        }
      }
      ++v8;
      v5 += 80;
      if (v8 >= *(_QWORD *)(a3 + 8))
      {
        v24 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = v31;
        *(_DWORD *)(v24 + 16) = v32;
        *(_DWORD *)(v24 + 20) = v7;
        v30 = (WTF *)v24;
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = 0;
        goto LABEL_26;
      }
    }
  }
  v23 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v23 = 1;
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  v30 = v23;
  v25 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
LABEL_26:
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v25 + 16))(v25, &v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  result = (uint64_t)v30;
  v30 = 0;
  if (result)
    return WTF::RefCounted<WebCore::WebGPU::CompilationInfo>::deref(result, v26);
  return result;
}

uint64_t *WebCore::ImageAdapter::loadPlatformResource@<X0>(WebCore::ImageAdapter *this@<X0>, uint64_t **a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WebCore::FragmentedSharedBuffer *v12;

  v12 = (WebCore::FragmentedSharedBuffer *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class()), "pathForResource:ofType:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", this), CFSTR("png")));
  if (v12)
  {
    WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v11);
    v4 = v11;
    WebCore::SharedBuffer::create<NSData *&>(&v12, &v9);
    v5 = v9;
    v9 = 0;
    v10 = v5;
    WebCore::Image::setData(v4, &v10, 1);
    v7 = v10;
    v10 = 0;
    if (v7)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v6);
    result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v9, v6);
    *a2 = v11;
  }
  else
  {
    result = (uint64_t *)WebCore::Image::nullImage(0);
    ++*((_DWORD *)result + 2);
    *a2 = result;
  }
  return result;
}

void sub_1952A74E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  uint64_t v12;
  _DWORD *v13;

  v12 = a10;
  a10 = 0;
  if (v12)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, a2);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  v13 = a11;
  a11 = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  _Unwind_Resume(a1);
}

void WebCore::ImageAdapter::tiffRepresentation(uint64_t *a1@<X0>, __CFData **a2@<X8>)
{
  __CFData *Mutable;
  CGImageDestination *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGImageRef *v9;

  if (*((_DWORD *)a1 + 3))
  {
    Mutable = CFDataCreateMutable(0, 0);
    v5 = CGImageDestinationCreateWithData(Mutable, (CFStringRef)*MEMORY[0x1E0CA5C80], *((unsigned int *)a1 + 3), 0);
    if (v5)
    {
      v6 = *((unsigned int *)a1 + 3);
      if ((_DWORD)v6)
      {
        v7 = *a1;
        v8 = 8 * v6;
        do
        {
          v9 = (CGImageRef *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v7 + 48) + 16))(*(_QWORD *)(*(_QWORD *)v7 + 48));
          CGImageDestinationAddImage(v5, *v9, 0);
          v7 += 8;
          v8 -= 8;
        }
        while (v8);
      }
      CGImageDestinationFinalize(v5);
      *a2 = Mutable;
      CFRelease(v5);
    }
    else
    {
      *a2 = 0;
      if (Mutable)
        CFRelease(Mutable);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1952A761C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

_QWORD *WebCore::ImageAdapter::multiRepresentationHEIC(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  _QWORD *v6;
  _QWORD *v7;
  WebCore *v8;
  void *v9;
  const void *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = this[2];
  if (v1)
    return (_QWORD *)v1;
  v2 = this;
  v3 = *(_QWORD *)(*(_QWORD *)(*this + 8) + 24);
  if (!v3)
    return 0;
  v12 = 0;
  v13 = 0;
  v4 = *(_QWORD *)(v3 + 48);
  if (!v4)
  {
LABEL_7:
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3406E88;
    v6[1] = &v12;
    v14 = v6;
    WebCore::FragmentedSharedBuffer::forEachSegment(v3, &v14);
    v7 = v14;
    v14 = 0;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    v8 = (WebCore *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v12, HIDWORD(v13));
    v1 = objc_msgSend(objc_alloc((Class)WebCore::getNSAdaptiveImageGlyphClass(v8)), "initWithImageContent:", v8);
    v10 = (const void *)v2[2];
    v2[2] = v1;
    if (v10)
    {
      CFRelease(v10);
      v1 = v2[2];
    }
    if (v8)
      CFRelease(v8);
    v11 = v12;
    if (v12)
    {
      v12 = 0;
      LODWORD(v13) = 0;
      WTF::fastFree(v11, v9);
    }
    return (_QWORD *)v1;
  }
  if (!HIDWORD(v4))
  {
    v5 = (WTF *)WTF::fastMalloc(*(WTF **)(v3 + 48));
    LODWORD(v13) = v4;
    v12 = v5;
    goto LABEL_7;
  }
  __break(0xC471u);
  return this;
}

void sub_1952A7780(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

void WebCore::ImageAdapter::invalidate(WebCore::ImageAdapter *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
}

CFTypeRef WebCore::ImageAdapter::tiffRepresentation(WebCore::ImageAdapter *this)
{
  CFTypeRef v1;
  void *v3;
  CFTypeRef v4;
  const void *v5;
  uint64_t v7[2];
  CFTypeRef cf;

  v1 = (CFTypeRef)*((_QWORD *)this + 1);
  if (!v1)
  {
    WebCore::ImageAdapter::allNativeImages(this, (uint64_t)v7);
    WebCore::ImageAdapter::tiffRepresentation(v7, (__CFData **)&cf);
    WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v3);
    v4 = cf;
    if (cf)
    {
      CFRetain(cf);
      v5 = (const void *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v4;
      v1 = v4;
      if (v5)
      {
        CFRelease(v5);
        v1 = (CFTypeRef)*((_QWORD *)this + 1);
      }
      CFRelease(v4);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_1952A7888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  const void *v10;

  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_1952A79F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  _Unwind_Resume(exception_object);
}

void sub_1952A7B08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_BYTE *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_1952A7C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_1952A7E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

void sub_1952A8000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_1952A81D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(uint64_t result, void *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  do
  {
    v2 = __ldaxr((unsigned int *)result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)result));
  if (!v3)
  {
    atomic_store(1u, (unsigned int *)result);
    v4 = *(unsigned int *)(result + 20);
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD *)(result + 8);
      v6 = v5 + 16 * v4;
      do
      {
        v7 = *(unsigned int **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v7)
        {
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            v13 = v5;
            v14 = v6;
            v17 = result;
            atomic_store(1u, v7);
            v15 = (WTF *)v7;
            v12 = v7[6];
            if ((_DWORD)v12 != -1)
              ((void (*)(char *, unsigned int *))off_1E33519A0[v12])(&v18, v7 + 2);
            *((_DWORD *)v15 + 6) = -1;
            WTF::fastFree(v15, a2);
            result = v17;
            v5 = v13;
            v6 = v14;
          }
        }
        v5 += 16;
      }
      while (v5 != v6);
    }
    v10 = *(WTF **)(result + 8);
    if ((WTF *)(result + 24) != v10 && v10 != 0)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 16) = 0;
      v16 = result;
      WTF::fastFree(v10, a2);
      result = v16;
    }
    return WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

WebCore::WebKitPlaybackTargetAvailabilityEvent *WebCore::WebKitPlaybackTargetAvailabilityEvent::WebKitPlaybackTargetAvailabilityEvent(WebCore::WebKitPlaybackTargetAvailabilityEvent *this, const WTF::AtomString *a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v10;

  WTF::MonotonicTime::now(this);
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xFFC00000 | 0x170200 | (*(_QWORD *)a2 != 0);
  v7 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v7 += 2;
  *((_QWORD *)this + 3) = v7;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = v6;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = off_1E33519D0;
  {
    WTF::AtomStringImpl::add();
    WebCore::stringForPlaybackTargetAvailability(BOOL)::availableString = v10;
  }
  {
    v8 = (_DWORD *)WebCore::stringForPlaybackTargetAvailability(BOOL)::notAvailableString;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v8 = (_DWORD *)v10;
    WebCore::stringForPlaybackTargetAvailability(BOOL)::notAvailableString = v10;
  }
  if (a3)
    v8 = (_DWORD *)WebCore::stringForPlaybackTargetAvailability(BOOL)::availableString;
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 9) = v8;
  return this;
}

void WebCore::ApplePayCouponCodeChangedEvent::~ApplePayCouponCodeChangedEvent(WebCore::ApplePayCouponCodeChangedEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

BOOL WebCore::ApplePayPaymentAuthorizationResult::isFinalState(WebCore::ApplePayPaymentAuthorizationResult *this)
{
  return *(unsigned __int16 *)this <= 1u && *((_DWORD *)this + 5) == 0;
}

void WebCore::ApplePayPaymentAuthorizedEvent::~ApplePayPaymentAuthorizedEvent(WebCore::ApplePayPaymentAuthorizedEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 616))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentAuthorizedEvent *)((char *)this + 472), a2);
  if (*((_BYTE *)this + 464))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentAuthorizedEvent *)((char *)this + 320), a2);
  WebCore::ApplePayPayment::Token::~Token((WebCore::ApplePayPaymentAuthorizedEvent *)((char *)this + 72), a2);
  WebCore::Event::~Event(this, v4);
}

{
  WTF::StringImpl *v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 616))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentAuthorizedEvent *)((char *)this + 472), a2);
  if (*((_BYTE *)this + 464))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentAuthorizedEvent *)((char *)this + 320), a2);
  WebCore::ApplePayPayment::Token::~Token((WebCore::ApplePayPaymentAuthorizedEvent *)((char *)this + 72), a2);
  WebCore::Event::~Event(this, v4);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::WebKitPlaybackTargetAvailabilityEvent::~WebKitPlaybackTargetAvailabilityEvent(WebCore::WebKitPlaybackTargetAvailabilityEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::ApplePayCancelEvent::~ApplePayCancelEvent(WebCore::ApplePayCancelEvent *this, void *a2)
{
  const void *v2;
  WebCore::ApplePayCancelEvent *v3;

  *(_QWORD *)this = off_1E3351A98;
  v2 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
  {
    v3 = this;
    CFRelease(v2);
    this = v3;
  }
  WebCore::Event::~Event(this, a2);
}

{
  const void *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E3351A98;
  v3 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::ApplePayPaymentMethodSelectedEvent::~ApplePayPaymentMethodSelectedEvent(WebCore::ApplePayPaymentMethodSelectedEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 288))
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentMethodSelectedEvent *)((char *)this + 144), a2);
  std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 96, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::Event::~Event(this, v4);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ApplePayPaymentMethodSelectedEvent::~ApplePayPaymentMethodSelectedEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::convertAndValidate(WebCore *this@<X0>, WebCore::Document *a2@<X1>, const WebCore::ApplePayRequestBase *a3@<X3>, uint64_t a4@<X2>, uint64_t a5@<X8>)
{
  const char **v10;
  _DWORD *v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  _DWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const WTF::String *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  void (**v33)(WebCore::PaymentContact *__hidden);
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  int v38;
  _BOOL4 v39;
  WTF::StringImpl *v40;
  WTF *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  WTF *v46;
  uint64_t v47;
  _BYTE *v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  CFTypeRef v54;
  CFTypeRef v55;
  CFTypeRef v56;
  uint64_t v57;
  _BYTE *v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  CFTypeRef v64;
  CFTypeRef v65;
  CFTypeRef v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  CFTypeRef v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl **v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  WTF::StringImpl *v97;
  __int128 v98;
  __int128 v99;
  char v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  const char **v108;
  int v109;
  int v110;
  char v111;
  uint64_t v112;
  int v113;
  const char *v114;
  _DWORD *v115;
  CFTypeRef v116[6];
  CFTypeRef v117;
  _QWORD v118[3];
  __int128 v119;
  __int128 v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  int v127;
  int64x2_t v128;
  uint64_t v129;
  __int16 v130;
  WTF::StringImpl *v131;
  WTF *v132;
  uint64_t v133;
  char v134;
  _BYTE v135[104];
  int v136;
  WTF::StringImpl *v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  char v146;
  char v147;
  __int16 v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  const char **v151;
  void (**v152)(WebCore::PaymentContact *__hidden);
  CFTypeRef v153;
  __int128 v154;
  __int128 v155;
  char v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2)
  {
    v114 = "\" is not a supported version.";
    LODWORD(v115) = 29;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v150, 34, 0, (uint64_t)&v114);
    v23 = v150;
    if (!v150)
    {
      __break(0xC471u);
      JUMPOUT(0x1952A8A54);
    }
    goto LABEL_23;
  }
  if (!WebCore::PaymentCoordinator::supportsVersion(a3, this, a2))
  {
    v114 = "\" is not a supported version.";
    LODWORD(v115) = 29;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v150, 34, a2, (uint64_t)&v114);
    v23 = v150;
    if (!v150)
    {
      __break(0xC471u);
      JUMPOUT(0x1952A9410);
    }
LABEL_23:
    *(_BYTE *)a5 = 12;
    *(_QWORD *)(a5 + 8) = v23;
    *(_DWORD *)(a5 + 896) = 1;
    return;
  }
  v10 = &v114;
  v115 = 0;
  memset(v116, 0, 13);
  v116[2] = &off_1E321E520;
  memset(&v116[3], 0, 13);
  v119 = 0u;
  v120 = 0u;
  v116[5] = &off_1E321E520;
  v117 = 0;
  memset(v118, 0, 22);
  v121 = 1;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0x7FF8000000000000;
  v126 = 1;
  v127 = 1;
  v128 = vdupq_n_s64(0x7FF8000000000000uLL);
  v129 = 0;
  v130 = 0;
  v135[0] = 0;
  v135[96] = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v131 = 0;
  v132 = 0;
  v134 = 0;
  v133 = 0;
  v136 = 0;
  LODWORD(v114) = (_DWORD)a2;
  v11 = *(_DWORD **)(a4 + 56);
  if (v11)
    *v11 += 2;
  v115 = v11;
  v12 = *(unsigned int *)(a4 + 36);
  if (!(_DWORD)v12)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v110) = 33;
    v22 = 1;
    v113 = 1;
    v24 = v112;
    v112 = 0;
    *(_BYTE *)a5 = 33;
    *(_QWORD *)(a5 + 8) = v24;
    goto LABEL_25;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = *(_DWORD **)(a4 + 24);
  v19 = 4 * v12;
  do
  {
    switch(*v18)
    {
      case 0:
        v17 = 1;
        break;
      case 1:
        v16 = 1;
        break;
      case 2:
        v15 = 1;
        break;
      case 3:
        v14 = 1;
        break;
      case 4:
        v13 = 1;
        break;
      default:
        break;
    }
    ++v18;
    v19 -= 4;
  }
  while (v19);
  LOBYTE(v110) = v17;
  BYTE1(v110) = v16;
  BYTE2(v110) = v15;
  HIBYTE(v110) = v14;
  v111 = v13;
  v113 = 0;
  BYTE4(v118[2]) = v13;
  LODWORD(v118[2]) = v110;
  if (*(_BYTE *)(a4 + 536))
    v20 = a2 >= 8;
  else
    v20 = 0;
  v21 = *(unsigned int *)(a4 + 52);
  if (!v20 && !(_DWORD)v21)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22 = 0;
    *(_BYTE *)a5 = 33;
LABEL_25:
    *(_DWORD *)(a5 + 896) = 1;
    goto LABEL_159;
  }
  v153 = 0;
  if (!(_DWORD)v21)
  {
    v25 = 0;
    v44 = 0;
LABEL_64:
    v109 = 0;
    v107 = 0;
    v108 = 0;
    v152 = (void (**)(WebCore::PaymentContact *__hidden))v25;
    v153 = (CFTypeRef)v44;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v118, (unsigned int *)&v152);
    if (HIDWORD(v153))
    {
      v88 = (WTF::StringImpl **)v152;
      v89 = 8 * HIDWORD(v153);
      do
      {
        v90 = *v88;
        *v88 = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 2)
            WTF::StringImpl::destroy(v90, v45);
          else
            *(_DWORD *)v90 -= 2;
        }
        ++v88;
        v89 -= 8;
      }
      while (v89);
    }
    v46 = (WTF *)v152;
    if (v152)
    {
      v152 = 0;
      LODWORD(v153) = 0;
      WTF::fastFree(v46, v45);
    }
    if (*(_BYTE *)(a4 + 80))
    {
      v47 = *(unsigned int *)(a4 + 76);
      if ((_DWORD)v47)
      {
        v48 = *(_BYTE **)(a4 + 64);
        if (a2 >= 3)
        {
          v49 = 0;
          v50 = 0;
          v51 = 0;
          v53 = 0;
          v52 = 0;
          do
          {
            switch(*v48)
            {
              case 0:
                v51 = 1;
                break;
              case 1:
                v52 = 1;
                break;
              case 2:
                v53 = 1;
                break;
              case 3:
                v50 = 1;
                break;
              case 4:
                v49 = 1;
                break;
              default:
                break;
            }
            ++v48;
            --v47;
          }
          while (v47);
        }
        else
        {
          v49 = 0;
          v50 = 0;
          v51 = 0;
          v52 = 0;
          while (2)
          {
            switch(*v48)
            {
              case 0:
                v51 = 1;
                goto LABEL_76;
              case 1:
                v52 = 1;
                goto LABEL_76;
              case 2:
LABEL_169:
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v43 = 0;
                v85 = v153;
                *(_BYTE *)a5 = 33;
                *(_QWORD *)(a5 + 8) = v85;
                goto LABEL_139;
              case 3:
                v50 = 1;
                goto LABEL_76;
              case 4:
                v49 = 1;
                goto LABEL_76;
              default:
LABEL_76:
                ++v48;
                if (--v47)
                  continue;
                v53 = 0;
                break;
            }
            break;
          }
        }
      }
      else
      {
        v52 = 0;
        v53 = 0;
        v51 = 0;
        v50 = 0;
        v49 = 0;
      }
      LOBYTE(v152) = v49;
      BYTE1(v152) = v50;
      BYTE2(v152) = v51;
      BYTE3(v152) = v52;
      BYTE4(v152) = v53;
      BYTE4(v116[1]) = v53;
      LODWORD(v116[1]) = (_DWORD)v152;
    }
    if (*(_BYTE *)(a4 + 232))
    {
      WebCore::PaymentContact::fromApplePayPaymentContact(a2, a4 + 88, &v152);
      v54 = v153;
      if (v153)
        CFRetain(v153);
      v55 = v116[3];
      v116[3] = v54;
      if (v55)
        CFRelease(v55);
      v56 = v153;
      v152 = &off_1E321E520;
      v153 = 0;
      if (v56)
        CFRelease(v56);
    }
    if (*(_BYTE *)(a4 + 256))
    {
      v57 = *(unsigned int *)(a4 + 252);
      if ((_DWORD)v57)
      {
        v58 = *(_BYTE **)(a4 + 240);
        if (a2 >= 3)
        {
          v59 = 0;
          v60 = 0;
          v61 = 0;
          v63 = 0;
          v62 = 0;
          do
          {
            switch(*v58)
            {
              case 0:
                v61 = 1;
                break;
              case 1:
                v62 = 1;
                break;
              case 2:
                v63 = 1;
                break;
              case 3:
                v60 = 1;
                break;
              case 4:
                v59 = 1;
                break;
              default:
                break;
            }
            ++v58;
            --v57;
          }
          while (v57);
        }
        else
        {
          v59 = 0;
          v60 = 0;
          v61 = 0;
          v62 = 0;
          while (2)
          {
            switch(*v58)
            {
              case 0:
                v61 = 1;
                goto LABEL_104;
              case 1:
                v62 = 1;
                goto LABEL_104;
              case 2:
                goto LABEL_169;
              case 3:
                v60 = 1;
                goto LABEL_104;
              case 4:
                v59 = 1;
                goto LABEL_104;
              default:
LABEL_104:
                ++v58;
                if (--v57)
                  continue;
                v63 = 0;
                break;
            }
            break;
          }
        }
      }
      else
      {
        v62 = 0;
        v63 = 0;
        v61 = 0;
        v60 = 0;
        v59 = 0;
      }
      LOBYTE(v152) = v59;
      BYTE1(v152) = v60;
      BYTE2(v152) = v61;
      BYTE3(v152) = v62;
      BYTE4(v152) = v63;
      BYTE4(v116[4]) = v63;
      LODWORD(v116[4]) = (_DWORD)v152;
    }
    if (*(_BYTE *)(a4 + 408))
    {
      WebCore::PaymentContact::fromApplePayPaymentContact(a2, a4 + 264, &v152);
      v64 = v153;
      if (v153)
        CFRetain(v153);
      v65 = v117;
      v117 = v64;
      if (v65)
        CFRelease(v65);
      v66 = v153;
      v152 = &off_1E321E520;
      v153 = 0;
      if (v66)
        CFRelease(v66);
    }
    v67 = *(WTF::StringImpl **)(a4 + 416);
    if (v67)
      *(_DWORD *)v67 += 2;
    v68 = v131;
    v131 = v67;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v45);
      else
        *(_DWORD *)v68 -= 2;
    }
    if (a2 >= 3)
    {
      v69 = *(unsigned int *)(a4 + 436);
      if ((_DWORD)v69)
      {
        if (v69 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1952A9420);
        }
        v91 = WTF::fastMalloc((WTF *)(8 * v69));
        v70 = (WTF *)v91;
        v92 = *(unsigned int *)(a4 + 436);
        if ((_DWORD)v92)
        {
          v93 = 0;
          v94 = *(_QWORD *)(a4 + 424);
          v95 = 8 * v92;
          do
          {
            v96 = *(_DWORD **)(v94 + v93);
            if (v96)
              *v96 += 2;
            *(_QWORD *)(v91 + v93) = v96;
            v93 += 8;
          }
          while (v95 != v93);
        }
      }
      else
      {
        v70 = 0;
      }
      if (HIDWORD(v133))
      {
        v82 = v132;
        v83 = 8 * HIDWORD(v133);
        do
        {
          v84 = *(WTF::StringImpl **)v82;
          *(_QWORD *)v82 = 0;
          if (v84)
          {
            if (*(_DWORD *)v84 == 2)
              WTF::StringImpl::destroy(v84, v45);
            else
              *(_DWORD *)v84 -= 2;
          }
          v82 = (WTF *)((char *)v82 + 8);
          v83 -= 8;
        }
        while (v83);
      }
      v71 = v132;
      if (v132)
      {
        v132 = 0;
        LODWORD(v133) = 0;
        WTF::fastFree(v71, v45);
      }
      v132 = v70;
      LODWORD(v133) = v69;
      HIDWORD(v133) = v69;
    }
    if (*(_BYTE *)(a4 + 536))
    {
      WebCore::PaymentInstallmentConfiguration::create((WebCore::PaymentInstallmentConfiguration *)(a4 + 440), (uint64_t)&v152);
      if (v163)
      {
        if (v163 != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_198:
          v151 = 0;
LABEL_199:
          __break(0xC471u);
          JUMPOUT(0x1952A9408);
        }
        v43 = 0;
        v72 = v154;
        *(_BYTE *)a5 = (_BYTE)v153;
        *(_QWORD *)(a5 + 8) = v72;
LABEL_139:
        *(_DWORD *)(a5 + 896) = 1;
        goto LABEL_158;
      }
      LOBYTE(v97) = 0;
      v106 = 0;
      if (v162)
      {
        LOBYTE(v97) = (_BYTE)v153;
        v73 = v155;
        v98 = v154;
        v154 = 0u;
        v155 = 0u;
        v99 = v73;
        v100 = v156;
        v74 = v157;
        v157 = 0u;
        v101 = v74;
        v102 = v158;
        v75 = v159;
        v158 = 0;
        v159 = 0;
        v103 = v75;
        v76 = v160;
        v160 = 0;
        v104 = v76;
        v105 = v161;
        v106 = 1;
      }
      std::__optional_storage_base<WebCore::ApplePayInstallmentConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplePayInstallmentConfiguration,false>>((uint64_t)v135, (uint64_t)&v97);
      if (v106)
        WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&v97, v45);
      if (v163 != -1)
        (*(&off_1E33520D0 + v163))((int)&v97, (WebCore::ApplePayInstallmentConfiguration *)&v153);
    }
    HIWORD(v136) = *(_WORD *)(a4 + 544);
    v77 = *(WTF::StringImpl **)(a4 + 552);
    if (v77)
      *(_DWORD *)v77 += 2;
    v78 = v137;
    v137 = v77;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v45);
      else
        *(_DWORD *)v78 -= 2;
    }
    LOWORD(v136) = *(_WORD *)(a4 + 560);
    v148 = *(_WORD *)(a4 + 562);
    v79 = *(WTF::StringImpl **)(a4 + 568);
    if (v79)
      *(_DWORD *)v79 += 2;
    v80 = v149;
    v149 = v79;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, v45);
      else
        *(_DWORD *)v80 -= 2;
    }
    WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)a5, (const WebCore::ApplePaySessionPaymentRequest *)&v114);
    v42 = 0;
    v43 = 0;
    goto LABEL_157;
  }
  if (v21 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x1952A9418);
  }
  v25 = WTF::fastMalloc((WTF *)(8 * v21));
  LODWORD(v153) = v21;
  v152 = (void (**)(WebCore::PaymentContact *__hidden))v25;
  v26 = *(unsigned int *)(a4 + 52);
  if (!(_DWORD)v26)
  {
    v44 = v21;
    goto LABEL_64;
  }
  v27 = *(const WTF::String **)(a4 + 40);
  v28 = 8 * v26;
  while (1)
  {
    WebCore::PaymentCoordinator::validatedPaymentNetwork((uint64_t)a3, v27, a2, &v97);
    v30 = v98;
    if ((_BYTE)v98)
    {
      v31 = HIDWORD(v153);
      if (HIDWORD(v153) == (_DWORD)v153)
      {
        v32 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v152, HIDWORD(v153) + 1, (unint64_t)&v97);
        v31 = HIDWORD(v153);
        v33 = v152;
        v34 = *v32;
        if (!*v32)
        {
LABEL_34:
          v33[v31] = (void (*)(WebCore::PaymentContact *__hidden))v34;
          HIDWORD(v153) = v31 + 1;
          goto LABEL_49;
        }
      }
      else
      {
        v33 = v152;
        v34 = v97;
        if (!v97)
          goto LABEL_34;
      }
      *(_DWORD *)v34 += 2;
      goto LABEL_34;
    }
    v35 = *(_QWORD *)v27;
    if (*(_QWORD *)v27)
    {
      v36 = *(_DWORD *)(v35 + 4);
      *(_DWORD *)v35 += 2;
      if (v36 < 0)
        goto LABEL_198;
    }
    else
    {
      v36 = 0;
    }
    v37 = __OFADD__(v36, 33);
    v38 = v36 + 33;
    if (v37 || __OFADD__(v38, 1))
      goto LABEL_198;
    v39 = !v35 || (*(_BYTE *)(v35 + 16) & 4) != 0;
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v38 + 1), v39, (int8x16_t *)"\"", 1u, v35, (int8x16_t *)"\" is not a valid payment network.", 0x21u, &v151);
    v10 = v151;
    if (!v151)
      goto LABEL_199;
    v151 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v35, v29);
      else
        *(_DWORD *)v35 -= 2;
    }
LABEL_49:
    if (!(_BYTE)v98)
      goto LABEL_53;
    v40 = v97;
    v97 = 0;
    if (!v40)
      goto LABEL_53;
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
LABEL_53:
      if (!v30)
        break;
      goto LABEL_54;
    }
    WTF::StringImpl::destroy(v40, v29);
    if (!v30)
      break;
LABEL_54:
    v27 = (const WTF::String *)((char *)v27 + 8);
    v28 -= 8;
    if (!v28)
    {
      LOBYTE(v107) = 33;
      v108 = v10;
      v109 = 1;
      v25 = (uint64_t)v152;
      v44 = (unint64_t)v153;
      goto LABEL_64;
    }
  }
  LOBYTE(v107) = 33;
  v109 = 1;
  v41 = (WTF *)v152;
  if (HIDWORD(v153))
  {
    v86 = 8 * HIDWORD(v153);
    do
    {
      v87 = *(WTF::StringImpl **)v41;
      *(_QWORD *)v41 = 0;
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
          WTF::StringImpl::destroy(v87, v29);
        else
          *(_DWORD *)v87 -= 2;
      }
      v41 = (WTF *)((char *)v41 + 8);
      v86 -= 8;
    }
    while (v86);
    v41 = (WTF *)v152;
    if (v152)
      goto LABEL_180;
  }
  else
  {
    if (!v152)
      goto LABEL_63;
LABEL_180:
    v152 = 0;
    LODWORD(v153) = 0;
    WTF::fastFree(v41, v29);
  }
LABEL_63:
  v108 = 0;
  *(_BYTE *)a5 = 33;
  *(_QWORD *)(a5 + 8) = v10;
  v42 = 1;
  v43 = 1;
LABEL_157:
  *(_DWORD *)(a5 + 896) = v42;
LABEL_158:
  ((void (*)(void (***)(WebCore::PaymentContact *__hidden), uint64_t *))off_1E33520E0[v43])(&v152, &v107);
  v22 = v113;
  if (v113 != -1)
LABEL_159:
    ((void (*)(void (***)(WebCore::PaymentContact *__hidden), int *))off_1E33520F0[v22])(&v152, &v110);
  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)&v114, v81);
}

int64x2_t WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest(WebCore::ApplePaySessionPaymentRequest *this)
{
  int64x2_t result;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 21) = 0;
  *((_QWORD *)this + 4) = &off_1E321E520;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)((char *)this + 45) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 7) = &off_1E321E520;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)((char *)this + 86) = 0;
  *((_BYTE *)this + 128) = 1;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_BYTE *)this + 152) = 0;
  *((_QWORD *)this + 20) = 0x7FF8000000000000;
  *((_BYTE *)this + 168) = 1;
  *((_DWORD *)this + 43) = 1;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 11) = result;
  *((_QWORD *)this + 24) = 0;
  *((_WORD *)this + 100) = 0;
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 336) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_BYTE *)this + 360) = 0;
  *((_BYTE *)this + 560) = 0;
  *((_BYTE *)this + 568) = 0;
  *((_BYTE *)this + 680) = 0;
  *((_BYTE *)this + 688) = 0;
  *((_BYTE *)this + 704) = 0;
  *((_BYTE *)this + 712) = 0;
  *((_BYTE *)this + 840) = 0;
  *((_BYTE *)this + 848) = 0;
  *((_BYTE *)this + 872) = 0;
  *((_WORD *)this + 440) = 0;
  *((_QWORD *)this + 111) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_BYTE *)this + 232) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 86) = 0;
  return result;
}

{
  int64x2_t result;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 21) = 0;
  *((_QWORD *)this + 4) = &off_1E321E520;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)((char *)this + 45) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 7) = &off_1E321E520;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)((char *)this + 86) = 0;
  *((_BYTE *)this + 128) = 1;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_BYTE *)this + 152) = 0;
  *((_QWORD *)this + 20) = 0x7FF8000000000000;
  *((_BYTE *)this + 168) = 1;
  *((_DWORD *)this + 43) = 1;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 11) = result;
  *((_QWORD *)this + 24) = 0;
  *((_WORD *)this + 100) = 0;
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 336) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_BYTE *)this + 360) = 0;
  *((_BYTE *)this + 560) = 0;
  *((_BYTE *)this + 568) = 0;
  *((_BYTE *)this + 680) = 0;
  *((_BYTE *)this + 688) = 0;
  *((_BYTE *)this + 704) = 0;
  *((_BYTE *)this + 712) = 0;
  *((_BYTE *)this + 840) = 0;
  *((_BYTE *)this + 848) = 0;
  *((_BYTE *)this + 872) = 0;
  *((_WORD *)this + 440) = 0;
  *((_QWORD *)this + 111) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_BYTE *)this + 232) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 86) = 0;
  return result;
}

uint64_t WebCore::ApplePayDeferredPaymentRequest::validate@<X0>(WebCore::ApplePayDeferredPaymentRequest *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  _BOOL4 v11;
  uint64_t result;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  char v35;
  int v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;

  if (*((_BYTE *)this + 32) != 2 || !*((_QWORD *)this + 2))
    goto LABEL_44;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(unsigned __int16 **)(v4 + 8);
    v6 = *(_DWORD *)(v4 + 4);
    v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 1;
  }
  if (WebCore::isValidDecimalMonetaryValue(v5, v6 | (v7 << 32)) || !*((_BYTE *)this + 8))
  {
    v15 = (WTF::StringImpl *)*((_QWORD *)this + 13);
    if (v15)
      *(_DWORD *)v15 += 2;
    v46 = v15;
    MEMORY[0x19AEA52D4](&v43, &v46, 0);
    v17 = v46;
    v46 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v44;
    v19 = v43;
    v43 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v16);
        if ((v18 & 1) == 0)
        {
LABEL_28:
          v20 = *((_QWORD *)this + 13);
          if (v20)
          {
            v21 = *(_DWORD *)(v20 + 4);
            *(_DWORD *)v20 += 2;
            if (v21 < 0)
              goto LABEL_89;
          }
          else
          {
            v21 = 0;
          }
          v9 = __OFADD__(v21, 21);
          v22 = v21 + 21;
          if (!v9 && !__OFADD__(v22, 1))
          {
            v23 = !v20 || (*(_BYTE *)(v20 + 16) & 4) != 0;
            result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v22 + 1), v23, 34, v20, (int8x16_t *)"\" is not a valid URL.", 0x15u, &v42);
            v24 = v42;
            if (v42)
            {
              *(_BYTE *)a2 = 33;
              *(_QWORD *)(a2 + 8) = v24;
              *(_BYTE *)(a2 + 16) = 1;
              v42 = 0;
              if (!v20)
                return result;
              goto LABEL_37;
            }
LABEL_90:
            __break(0xC471u);
            JUMPOUT(0x1952A99CCLL);
          }
LABEL_89:
          v42 = 0;
          goto LABEL_90;
        }
LABEL_43:
        v25 = *((_QWORD *)this + 12);
        if (!v25 || !*(_DWORD *)(v25 + 4))
          goto LABEL_44;
        result = WTF::isTimeZoneValid();
        if ((result & 1) != 0)
        {
          v26 = *((_QWORD *)this + 14);
          if (v26 && *(_DWORD *)(v26 + 4))
          {
            v32 = (WTF::StringImpl *)*((_QWORD *)this + 15);
            if (!v32)
              goto LABEL_84;
            *(_DWORD *)v32 += 2;
            v46 = v32;
            MEMORY[0x19AEA52D4](&v43, &v46, 0);
            v34 = v46;
            v46 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v33);
              else
                *(_DWORD *)v34 -= 2;
            }
            v35 = v44;
            result = (uint64_t)v43;
            v43 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v33);
                if ((v35 & 1) == 0)
                {
LABEL_72:
                  v20 = *((_QWORD *)this + 15);
                  if (v20)
                  {
                    v36 = *(_DWORD *)(v20 + 4);
                    *(_DWORD *)v20 += 2;
                    if (v36 < 0)
                      goto LABEL_98;
                  }
                  else
                  {
                    v36 = 0;
                  }
                  v9 = __OFADD__(v36, 21);
                  v37 = v36 + 21;
                  if (!v9 && !__OFADD__(v37, 1))
                  {
                    v38 = !v20 || (*(_BYTE *)(v20 + 16) & 4) != 0;
                    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v37 + 1), v38, 34, v20, (int8x16_t *)"\" is not a valid URL.", 0x15u, &v40);
                    v39 = v40;
                    if (v40)
                    {
                      *(_BYTE *)a2 = 33;
                      *(_QWORD *)(a2 + 8) = v39;
                      *(_BYTE *)(a2 + 16) = 1;
                      v40 = 0;
                      if (!v20)
                        return result;
LABEL_37:
                      if (*(_DWORD *)v20 != 2)
                      {
                        *(_DWORD *)v20 -= 2;
                        return result;
                      }
                      v31 = (WTF::StringImpl *)v20;
                      return WTF::StringImpl::destroy(v31, v13);
                    }
LABEL_99:
                    __break(0xC471u);
                    JUMPOUT(0x1952A9A08);
                  }
LABEL_98:
                  v40 = 0;
                  goto LABEL_99;
                }
LABEL_84:
                *(_QWORD *)a2 = 0;
                *(_QWORD *)(a2 + 8) = 0;
                *(_QWORD *)(a2 + 16) = 0;
                return result;
              }
              *(_DWORD *)result -= 2;
            }
            if ((v35 & 1) == 0)
              goto LABEL_72;
            goto LABEL_84;
          }
LABEL_44:
          result = WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_BYTE *)a2 = 33;
          *(_BYTE *)(a2 + 16) = 1;
          return result;
        }
        v20 = *((_QWORD *)this + 12);
        if (v20)
        {
          v27 = *(_DWORD *)(v20 + 4);
          *(_DWORD *)v20 += 2;
          if (v27 < 0)
            goto LABEL_95;
        }
        else
        {
          v27 = 0;
        }
        v9 = __OFADD__(v27, 27);
        v28 = v27 + 27;
        if (!v9 && !__OFADD__(v28, 1))
        {
          v29 = !v20 || (*(_BYTE *)(v20 + 16) & 4) != 0;
          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v28 + 1), v29, 34, v20, (int8x16_t *)"\" is not a valid time zone.", 0x1Bu, &v41);
          v30 = v41;
          if (v41)
          {
            *(_BYTE *)a2 = 33;
            *(_QWORD *)(a2 + 8) = v30;
            *(_BYTE *)(a2 + 16) = 1;
            v41 = 0;
            if (!v20)
              return result;
            goto LABEL_37;
          }
LABEL_96:
          __break(0xC471u);
          JUMPOUT(0x1952A99F4);
        }
LABEL_95:
        v41 = 0;
        goto LABEL_96;
      }
      *(_DWORD *)v19 -= 2;
    }
    if ((v18 & 1) == 0)
      goto LABEL_28;
    goto LABEL_43;
  }
  if (v4)
  {
    v8 = *(_DWORD *)(v4 + 4);
    *(_DWORD *)v4 += 2;
    if (v8 < 0)
    {
LABEL_91:
      v45 = 0;
      goto LABEL_92;
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = __OFADD__(v8, 24);
  v10 = v8 + 24;
  if (v9 || __OFADD__(v10, 1))
    goto LABEL_91;
  v11 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v10 + 1), v11, 34, v4, (int8x16_t *)"\" is not a valid amount.", 0x18u, &v45);
  v14 = v45;
  if (!v45)
  {
LABEL_92:
    __break(0xC471u);
    JUMPOUT(0x1952A99D8);
  }
  *(_BYTE *)a2 = 33;
  *(_QWORD *)(a2 + 8) = v14;
  *(_BYTE *)(a2 + 16) = 1;
  v45 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 != 2)
    {
      *(_DWORD *)v4 -= 2;
      return result;
    }
    v31 = (WTF::StringImpl *)v4;
    return WTF::StringImpl::destroy(v31, v13);
  }
  return result;
}

WTF *WebCore::ApplePaySession::create@<X0>(WebCore::PaymentSession *a1@<X0>, WebCore::Document *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WebCore::PaymentSession *v10;
  WTF *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  void *v32;
  char v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF *v42;
  unsigned __int16 *v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  BOOL v47;
  int v48;
  _BOOL4 v49;
  WTF::StringImpl *v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  int v55;
  _BOOL4 v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  int v60;
  int v61;
  _BOOL4 v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  unsigned __int16 *v75;
  unsigned int v76;
  unint64_t v77;
  int v78;
  int v79;
  _BOOL4 v80;
  WTF::StringImpl *v81;
  unsigned __int16 *v82;
  unsigned int v83;
  unint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  char v87;
  WTF::StringImpl *v88;
  int v89;
  int v90;
  _BOOL4 v91;
  int v92;
  int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::PaymentSession *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  char v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl **v113;
  uint64_t v114;
  int v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  int v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl **v128;
  WTF::StringImpl **v129;
  _BOOL4 v130;
  _QWORD *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  char v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  int v147;
  unsigned int v148;
  int v149;
  WTF *v150;
  uint64_t v151;
  WTF *v152;
  WTF::StringImpl *v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  WTF::StringImpl *v169;
  __int128 v170;
  int v171;
  WTF *v172;
  WTF *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  int v178;
  int v179;
  _BOOL4 v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  int v184;
  int v185;
  _BOOL4 v186;
  WTF::StringImpl *v187;
  __int128 v188;
  __int128 v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  __int128 v192;
  WTF::StringImpl *v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  _BYTE v205[64];
  WTF::StringImpl *v206;
  uint64_t v207;
  __int16 v208;
  _BYTE v209[24];
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  __int16 v214;
  char v215;
  __int128 v216;
  uint64_t v217;
  char v218;
  int v219;
  char v220[8];
  WTF::StringImpl *v221;
  char v222;
  uint64_t v223;
  char v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  __int16 v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  WTF::StringImpl *v239;
  uint64_t v240;
  __int16 v241;
  _QWORD v242[3];
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  __int16 v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  WTF::StringImpl *v252[2];
  WTF::StringImpl *v253[2];
  WTF::StringImpl *v254[2];
  __int128 v255;
  WTF::StringImpl *v256;
  uint64_t v257;
  __int16 v258;
  _BYTE v259[24];
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  __int16 v264;
  char v265;
  __int128 v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  WTF::StringImpl *v270;
  int v271;
  _BYTE v272[16];
  WTF::StringImpl *v273;
  char v274;
  uint64_t v275;
  unsigned int v276[30];
  char v277;
  uint64_t v278;
  WTF::StringImpl *v279;
  char v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  __int128 v283;
  __int128 v284;
  WTF::StringImpl *v285;
  uint64_t v286;
  __int16 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  WTF *v292;
  int v293;
  unsigned int v294;
  unsigned __int8 v295;
  WTF::StringImpl *v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  __int16 v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  WTF::StringImpl *v308;
  uint64_t v309;
  char v310;
  WTF *v311;
  int v312;
  int v313;
  unsigned __int8 v314;
  char v315;
  char v316[8];
  uint64_t v317;
  unsigned int v318;
  char v319[8];
  __int128 v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  WTF::StringImpl *v324;
  __int16 v325;
  int v326;
  uint64_t v327;

  v10 = a1;
  v327 = *MEMORY[0x1E0C80C00];
  result = (WTF *)WebCore::PaymentSession::canCreateSession(a1, (uint64_t)v220);
  if (v222)
  {
    v14 = v221;
    v221 = 0;
    *(_BYTE *)a4 = v220[0];
    *(_QWORD *)(a4 + 8) = v14;
LABEL_7:
    *(_DWORD *)(a4 + 16) = 1;
    goto LABEL_8;
  }
  if (!WTF::isMainThread(result))
  {
LABEL_6:
    result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 12;
    goto LABEL_7;
  }
  {
    WebCore::currentToken(void)::token = 0;
    goto LABEL_6;
  }
  if (!WebCore::currentToken(void)::token)
    goto LABEL_6;
  if (*(_DWORD *)(WebCore::currentToken(void)::token + 68))
    goto LABEL_6;
  if (*(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
    goto LABEL_6;
  v15 = *((_QWORD *)v10 + 66);
  if (!v15)
    goto LABEL_6;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
    goto LABEL_6;
  v17 = *(_QWORD *)(v16 + 24);
  if (!v17)
    goto LABEL_6;
  v18 = *(_QWORD *)(v17 + 8);
  if (!v18)
    goto LABEL_6;
  WebCore::convertAndValidate(v10, a2, *(const WebCore::ApplePayRequestBase **)(v18 + 1240), a3, (uint64_t)v316);
  if (v318)
  {
    if (v318 != 1)
      goto LABEL_369;
    v19 = v317;
    v317 = 0;
    v205[0] = v316[0];
    *(_QWORD *)&v205[8] = v19;
    v20 = 1;
    v219 = 1;
    goto LABEL_181;
  }
  WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)v272, (const WebCore::ApplePaySessionPaymentRequest *)v316);
  v277 = 0;
  v22 = *(WTF::StringImpl **)(a3 + 576);
  if (v22)
    *(_DWORD *)v22 += 2;
  v23 = v273;
  v273 = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  WebCore::convertAndValidateTotal((uint64_t)v319, a3 + 616);
  if (v326)
  {
    if (v326 != 1)
      goto LABEL_369;
    v24 = v320;
    *(_QWORD *)&v320 = 0;
    v205[0] = v319[0];
    *(_QWORD *)&v205[8] = v24;
    v25 = 1;
    v219 = 1;
    goto LABEL_179;
  }
  v205[0] = v319[0];
  v26 = v320;
  v320 = 0uLL;
  *(_OWORD *)&v205[8] = v26;
  *(_OWORD *)&v205[24] = v321;
  *(_OWORD *)&v205[40] = v322;
  v27 = v324;
  v324 = 0;
  *(_QWORD *)&v205[56] = v323;
  v206 = v27;
  LOWORD(v207) = v325;
  WebCore::ApplePaySessionPaymentRequest::setTotal((uint64_t)v272, (uint64_t)v205);
  v29 = v206;
  v206 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = *(WTF::StringImpl **)&v205[16];
  *(_QWORD *)&v205[16] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = *(WTF::StringImpl **)&v205[8];
  *(_QWORD *)&v205[8] = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v28);
    else
      *(_DWORD *)v31 -= 2;
  }
  WebCore::convertAndValidate((uint64_t)&v269, (unsigned __int8 **)(a3 + 696));
  if (v271)
  {
    if (v271 != 1)
      goto LABEL_369;
    v33 = v269;
    v34 = v270;
    v270 = 0;
    goto LABEL_175;
  }
  v35 = v269;
  v269 = 0;
  *(_QWORD *)v205 = v35;
  v36 = v270;
  v270 = 0;
  *(_QWORD *)&v205[8] = v36;
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v276, (unsigned int *)v205);
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v205, v37);
  v274 = *(_BYTE *)(a3 + 584);
  if (*(_BYTE *)(a3 + 608))
  {
    WebCore::convertAndValidate((uint64_t)v252, a3 + 592);
    v39 = v253[0];
    if (LODWORD(v253[0]))
      goto LABEL_173;
    v40 = v252[0];
    v252[0] = 0;
    *(_QWORD *)v205 = v40;
    v41 = v252[1];
    v252[1] = 0;
    *(_QWORD *)&v205[8] = v41;
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&v275, v205);
    if (*(_DWORD *)&v205[12])
      WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*(WTF::StringImpl **)v205, (WTF::StringImpl *)(*(_QWORD *)v205 + 104 * *(unsigned int *)&v205[12]));
    v42 = *(WTF **)v205;
    if (*(_QWORD *)v205)
    {
      *(_QWORD *)v205 = 0;
      *(_DWORD *)&v205[8] = 0;
      WTF::fastFree(v42, v32);
    }
    if (LODWORD(v253[0]) != -1)
      ((void (*)(_BYTE *, WTF::StringImpl **))off_1E3352110[LODWORD(v253[0])])(v205, v252);
  }
  if (!*(_BYTE *)(a3 + 920))
    goto LABEL_123;
  if (*(_BYTE *)(a3 + 752) != 1 || !*(_QWORD *)(a3 + 736))
    goto LABEL_111;
  v4 = *(_QWORD *)(a3 + 744);
  if (v4)
  {
    v43 = *(unsigned __int16 **)(v4 + 8);
    v44 = *(_DWORD *)(v4 + 4);
    v45 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  }
  else
  {
    v43 = 0;
    v44 = 0;
    v45 = 1;
  }
  if (!WebCore::isValidDecimalMonetaryValue(v43, v44 | (v45 << 32)) && *(_BYTE *)(a3 + 728))
  {
    if (v4)
    {
      v46 = *(_DWORD *)(v4 + 4);
      *(_DWORD *)v4 += 2;
      if (v46 < 0)
        goto LABEL_378;
    }
    else
    {
      v46 = 0;
    }
    v47 = __OFADD__(v46, 24);
    v48 = v46 + 24;
    if (!v47 && !__OFADD__(v48, 1))
    {
      v49 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v48 + 1), v49, 34, v4, (int8x16_t *)"\" is not a valid amount.", 0x18u, v205);
      v50 = *(WTF::StringImpl **)v205;
      if (*(_QWORD *)v205)
        goto LABEL_67;
LABEL_379:
      __break(0xC471u);
      JUMPOUT(0x1952AB38CLL);
    }
LABEL_378:
    *(_QWORD *)v205 = 0;
    goto LABEL_379;
  }
  if (!*(_BYTE *)(a3 + 888))
    goto LABEL_93;
  if (*(_BYTE *)(a3 + 832) == 1)
  {
    if (*(_QWORD *)(a3 + 816))
    {
      v4 = *(_QWORD *)(a3 + 824);
      if (v4)
      {
        v51 = *(unsigned __int16 **)(v4 + 8);
        v52 = *(_DWORD *)(v4 + 4);
        v53 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
      }
      else
      {
        v51 = 0;
        v52 = 0;
        v53 = 1;
      }
      if (!WebCore::isValidDecimalMonetaryValue(v51, v52 | (v53 << 32)) && *(_BYTE *)(a3 + 808))
      {
        if (v4)
        {
          v54 = *(_DWORD *)(v4 + 4);
          *(_DWORD *)v4 += 2;
          if (v54 < 0)
            goto LABEL_392;
        }
        else
        {
          v54 = 0;
        }
        v47 = __OFADD__(v54, 24);
        v55 = v54 + 24;
        if (!v47 && !__OFADD__(v55, 1))
        {
          v56 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v55 + 1), v56, 34, v4, (int8x16_t *)"\" is not a valid amount.", 0x18u, v205);
          v50 = *(WTF::StringImpl **)v205;
          if (!*(_QWORD *)v205)
          {
LABEL_393:
            __break(0xC471u);
            JUMPOUT(0x1952AB3E8);
          }
LABEL_67:
          LOBYTE(v252[0]) = 33;
          v252[1] = v50;
          v268 = 1;
          *(_QWORD *)v205 = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v4, (WTF::StringImpl *)v32);
            else
              *(_DWORD *)v4 -= 2;
          }
          goto LABEL_113;
        }
LABEL_392:
        *(_QWORD *)v205 = 0;
        goto LABEL_393;
      }
LABEL_93:
      v57 = *(WTF::StringImpl **)(a3 + 904);
      if (v57)
        *(_DWORD *)v57 += 2;
      v234 = v57;
      MEMORY[0x19AEA52D4](v205, &v234, 0);
      v58 = v234;
      v234 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v32);
        else
          *(_DWORD *)v58 -= 2;
      }
      v4 = *(unsigned int *)&v205[8];
      v59 = *(WTF::StringImpl **)v205;
      *(_QWORD *)v205 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
        {
          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v32);
          if ((v4 & 1) == 0)
          {
LABEL_102:
            v4 = *(_QWORD *)(a3 + 904);
            if (v4)
            {
              v60 = *(_DWORD *)(v4 + 4);
              *(_DWORD *)v4 += 2;
              if (v60 < 0)
                goto LABEL_386;
            }
            else
            {
              v60 = 0;
            }
            v47 = __OFADD__(v60, 21);
            v61 = v60 + 21;
            if (!v47 && !__OFADD__(v61, 1))
            {
              v62 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v61 + 1), v62, 34, v4, (int8x16_t *)"\" is not a valid URL.", 0x15u, v205);
              v50 = *(WTF::StringImpl **)v205;
              if (*(_QWORD *)v205)
                goto LABEL_67;
LABEL_387:
              __break(0xC471u);
              JUMPOUT(0x1952AB3C0);
            }
LABEL_386:
            *(_QWORD *)v205 = 0;
            goto LABEL_387;
          }
LABEL_317:
          v175 = *(WTF::StringImpl **)(a3 + 912);
          if (!v175)
            goto LABEL_360;
          *(_DWORD *)v175 += 2;
          v234 = v175;
          MEMORY[0x19AEA52D4](v205, &v234, 0);
          v176 = v234;
          v234 = 0;
          if (v176)
          {
            if (*(_DWORD *)v176 == 2)
              WTF::StringImpl::destroy(v176, (WTF::StringImpl *)v32);
            else
              *(_DWORD *)v176 -= 2;
          }
          v4 = *(unsigned int *)&v205[8];
          v177 = *(WTF::StringImpl **)v205;
          *(_QWORD *)v205 = 0;
          if (v177)
          {
            if (*(_DWORD *)v177 == 2)
            {
              WTF::StringImpl::destroy(v177, (WTF::StringImpl *)v32);
              if ((v4 & 1) == 0)
              {
LABEL_325:
                v4 = *(_QWORD *)(a3 + 912);
                if (v4)
                {
                  v178 = *(_DWORD *)(v4 + 4);
                  *(_DWORD *)v4 += 2;
                  if (v178 < 0)
                    goto LABEL_395;
                }
                else
                {
                  v178 = 0;
                }
                v47 = __OFADD__(v178, 21);
                v179 = v178 + 21;
                if (!v47 && !__OFADD__(v179, 1))
                {
                  v180 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
                  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v179 + 1), v180, 34, v4, (int8x16_t *)"\" is not a valid URL.", 0x15u, v205);
                  v50 = *(WTF::StringImpl **)v205;
                  if (*(_QWORD *)v205)
                    goto LABEL_67;
LABEL_396:
                  __break(0xC471u);
                  JUMPOUT(0x1952AB3FCLL);
                }
LABEL_395:
                *(_QWORD *)v205 = 0;
                goto LABEL_396;
              }
LABEL_360:
              v193 = *(WTF::StringImpl **)(a3 + 720);
              *(_QWORD *)(a3 + 720) = 0;
              v252[0] = v193;
              LOBYTE(v252[1]) = *(_BYTE *)(a3 + 728);
              v194 = *(_OWORD *)(a3 + 736);
              *(_OWORD *)(a3 + 736) = 0u;
              v195 = *(_OWORD *)(a3 + 752);
              v196 = *(_OWORD *)(a3 + 768);
              *(_OWORD *)v253 = v194;
              *(_OWORD *)v254 = v195;
              v255 = v196;
              v197 = *(WTF::StringImpl **)(a3 + 784);
              v198 = *(_QWORD *)(a3 + 792);
              *(_QWORD *)(a3 + 792) = 0;
              v256 = v197;
              v257 = v198;
              v258 = *(_WORD *)(a3 + 800);
              v259[0] = 0;
              v265 = 0;
              if (*(_BYTE *)(a3 + 888))
              {
                v259[0] = *(_BYTE *)(a3 + 808);
                v199 = *(_OWORD *)(a3 + 816);
                v200 = *(_OWORD *)(a3 + 832);
                *(_QWORD *)(a3 + 816) = 0;
                *(_QWORD *)(a3 + 824) = 0;
                *(_OWORD *)&v259[8] = v199;
                v260 = v200;
                v261 = *(_OWORD *)(a3 + 848);
                v201 = *(_QWORD *)(a3 + 864);
                v202 = *(_QWORD *)(a3 + 872);
                *(_QWORD *)(a3 + 872) = 0;
                v262 = v201;
                v263 = v202;
                v264 = *(_WORD *)(a3 + 880);
                v265 = 1;
              }
              v203 = *(_OWORD *)(a3 + 896);
              *(_QWORD *)(a3 + 904) = 0;
              *(_QWORD *)(a3 + 896) = 0;
              v266 = v203;
              v204 = *(_QWORD *)(a3 + 912);
              *(_QWORD *)(a3 + 912) = 0;
              v267 = v204;
              v268 = 0;
              goto LABEL_113;
            }
            *(_DWORD *)v177 -= 2;
          }
          if ((v4 & 1) == 0)
            goto LABEL_325;
          goto LABEL_360;
        }
        *(_DWORD *)v59 -= 2;
      }
      if ((v4 & 1) == 0)
        goto LABEL_102;
      goto LABEL_317;
    }
    v4 = 33;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v63 = *(WTF::StringImpl **)v205;
    LOBYTE(v252[0]) = 33;
  }
  else
  {
LABEL_111:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v63 = *(WTF::StringImpl **)v205;
    LOBYTE(v252[0]) = 33;
  }
  v252[1] = v63;
  v268 = 1;
LABEL_113:
  v39 = v268;
  if (v268)
    goto LABEL_173;
  v64 = v252[0];
  LOBYTE(v235) = v252[1];
  v65 = *(_OWORD *)v253;
  v252[0] = 0;
  v253[0] = 0;
  v237 = *(_OWORD *)v254;
  v238 = v255;
  v66 = v257;
  v239 = v256;
  v253[1] = 0;
  v257 = 0;
  v241 = v258;
  LOBYTE(v242[0]) = 0;
  v248 = 0;
  if (v265)
  {
    v67 = v259[0];
    LOBYTE(v242[0]) = v259[0];
    v68 = *(_OWORD *)&v259[8];
    *(_OWORD *)&v259[8] = 0uLL;
    *(_OWORD *)&v242[1] = v68;
    v243 = v260;
    v244 = v261;
    v69 = v263;
    v263 = 0;
    v245 = v262;
    v246 = v69;
    v247 = v264;
    v248 = 1;
  }
  else
  {
    v67 = 0;
  }
  v70 = v266;
  v266 = 0u;
  v71 = v267;
  v267 = 0;
  *(_QWORD *)v205 = v64;
  v205[8] = v252[1];
  v236 = 0u;
  *(_OWORD *)&v205[16] = v65;
  *(_OWORD *)&v205[32] = *(_OWORD *)v254;
  *(_OWORD *)&v205[48] = v255;
  v234 = 0;
  v240 = 0;
  v206 = v256;
  v207 = v66;
  v208 = v258;
  v209[0] = 0;
  v215 = 0;
  if (v265)
  {
    v209[0] = v67;
    v72 = *(_OWORD *)&v242[1];
    v242[1] = 0;
    v242[2] = 0;
    *(_OWORD *)&v209[8] = v72;
    v210 = v243;
    v211 = v244;
    v73 = v246;
    v246 = 0;
    v212 = v245;
    v213 = v73;
    v214 = v247;
    v215 = 1;
  }
  v250 = 0;
  v249 = 0;
  v216 = v70;
  v251 = 0;
  v217 = v71;
  v218 = 1;
  std::__optional_storage_base<WebCore::ApplePayRecurringPaymentRequest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplePayRecurringPaymentRequest,false>>((uint64_t)&v278, (WTF::StringImpl *)v205);
  if (v218)
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)v205, v74);
  WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&v234, v74);
  if (v268 != -1)
    (*(&off_1E3352120 + v268))((int)v205, (WebCore::ApplePayRecurringPaymentRequest *)v252);
LABEL_123:
  if (*(_BYTE *)(a3 + 1040))
  {
    v5 = (uint64_t)v252;
    if (*(_BYTE *)(a3 + 960) != 3 || !*(_QWORD *)(a3 + 944))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v252[0]) = 33;
      v252[1] = *(WTF::StringImpl **)v205;
      LODWORD(v260) = 1;
      goto LABEL_172;
    }
    v4 = *(_QWORD *)(a3 + 952);
    if (v4)
    {
      v75 = *(unsigned __int16 **)(v4 + 8);
      v76 = *(_DWORD *)(v4 + 4);
      v77 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
    }
    else
    {
      v75 = 0;
      v76 = 0;
      v77 = 1;
    }
    if (!WebCore::isValidDecimalMonetaryValue(v75, v76 | (v77 << 32)) && *(_BYTE *)(a3 + 936))
    {
      if (v4)
      {
        v78 = *(_DWORD *)(v4 + 4);
        *(_DWORD *)v4 += 2;
        if (v78 < 0)
          goto LABEL_380;
      }
      else
      {
        v78 = 0;
      }
      v47 = __OFADD__(v78, 24);
      v79 = v78 + 24;
      if (!v47 && !__OFADD__(v79, 1))
      {
        v80 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v79 + 1), v80, 34, v4, (int8x16_t *)"\" is not a valid amount.", 0x18u, v205);
        v81 = *(WTF::StringImpl **)v205;
        if (!*(_QWORD *)v205)
        {
LABEL_381:
          __break(0xC471u);
          JUMPOUT(0x1952AB398);
        }
        goto LABEL_169;
      }
LABEL_380:
      *(_QWORD *)v205 = 0;
      goto LABEL_381;
    }
    v4 = *(_QWORD *)(a3 + 1000);
    if (v4)
    {
      v82 = *(unsigned __int16 **)(v4 + 8);
      v83 = *(_DWORD *)(v4 + 4);
      v84 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
    }
    else
    {
      v82 = 0;
      v83 = 0;
      v84 = 1;
    }
    if (WebCore::isValidDecimalMonetaryValue(v82, v83 | (v84 << 32)))
    {
      v85 = *(WTF::StringImpl **)(a3 + 1024);
      if (v85)
        *(_DWORD *)v85 += 2;
      v234 = v85;
      MEMORY[0x19AEA52D4](v205, &v234, 0);
      v86 = v234;
      v234 = 0;
      if (v86)
      {
        if (*(_DWORD *)v86 == 2)
          WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v32);
        else
          *(_DWORD *)v86 -= 2;
      }
      v87 = v205[8];
      v88 = *(WTF::StringImpl **)v205;
      *(_QWORD *)v205 = 0;
      if (v88)
      {
        if (*(_DWORD *)v88 == 2)
        {
          WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v32);
          if ((v87 & 1) == 0)
          {
LABEL_152:
            v4 = *(_QWORD *)(a3 + 1024);
            if (v4)
            {
              v89 = *(_DWORD *)(v4 + 4);
              *(_DWORD *)v4 += 2;
              if (v89 < 0)
                goto LABEL_389;
            }
            else
            {
              v89 = 0;
            }
            v47 = __OFADD__(v89, 21);
            v90 = v89 + 21;
            if (!v47 && !__OFADD__(v90, 1))
            {
              v91 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v90 + 1), v91, 34, v4, (int8x16_t *)"\" is not a valid URL.", 0x15u, v205);
              v81 = *(WTF::StringImpl **)v205;
              if (!*(_QWORD *)v205)
              {
LABEL_390:
                __break(0xC471u);
                JUMPOUT(0x1952AB3D4);
              }
LABEL_169:
              LOBYTE(v252[0]) = 33;
              v252[1] = v81;
              LODWORD(v260) = 1;
              *(_QWORD *)v205 = 0;
              if (v4)
              {
                if (*(_DWORD *)v4 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v4, (WTF::StringImpl *)v32);
                else
                  *(_DWORD *)v4 -= 2;
              }
LABEL_172:
              v39 = v260;
              if ((_DWORD)v260)
              {
LABEL_173:
                if (v39 != 1)
                  goto LABEL_369;
                goto LABEL_174;
              }
              v102 = v252[0];
              v252[0] = 0;
              v103 = (char)v252[1];
              LOBYTE(v235) = v252[1];
              v104 = v253[0];
              v105 = v253[1];
              *(_OWORD *)v253 = 0u;
              v106 = v255;
              v107 = v255;
              v108 = v257;
              v109 = v258;
              v241 = v258;
              v110 = *(_QWORD *)v259;
              v111 = *(_QWORD *)&v259[8];
              *(_OWORD *)(v5 + 88) = 0u;
              v112 = *(_QWORD *)&v259[16];
              v257 = 0;
              *(_QWORD *)&v259[16] = 0;
              v234 = 0;
              *(_QWORD *)v205 = v102;
              v205[8] = v103;
              v237 = *(_OWORD *)v254;
              v238 = v106;
              v236 = 0u;
              *(_QWORD *)&v205[16] = v104;
              *(_QWORD *)&v205[24] = v105;
              *(_OWORD *)&v205[32] = *(_OWORD *)v254;
              *(_OWORD *)&v205[48] = v107;
              v239 = v256;
              v240 = 0;
              v206 = v256;
              v207 = v108;
              v208 = v109;
              memset(v242, 0, sizeof(v242));
              *(_QWORD *)v209 = v110;
              *(_QWORD *)&v209[8] = v111;
              *(_QWORD *)&v209[16] = v112;
              LOBYTE(v210) = 1;
              if (v291)
              {
                WebCore::ApplePayAutomaticReloadPaymentRequest::operator=((uint64_t)&v279, (WTF::StringImpl *)v205);
                if (!(_BYTE)v210)
                {
LABEL_197:
                  WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v234, (WTF::StringImpl *)v113);
                  if ((_DWORD)v260 != -1)
                    (*(&off_1E3352130 + v260))((int)v205, (WebCore::ApplePayAutomaticReloadPaymentRequest *)v252);
                  goto LABEL_199;
                }
              }
              else
              {
                *(_QWORD *)v205 = 0;
                v279 = v102;
                v280 = v103;
                v281 = v104;
                *(_OWORD *)&v205[16] = 0uLL;
                v282 = v105;
                v113 = v254;
                v283 = *(_OWORD *)v254;
                v284 = v255;
                v285 = v256;
                v207 = 0;
                v286 = v108;
                v287 = v109;
                v288 = v110;
                memset(v209, 0, sizeof(v209));
                v289 = v111;
                v290 = v112;
                v291 = 1;
              }
              WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)v205, (WTF::StringImpl *)v113);
              goto LABEL_197;
            }
LABEL_389:
            *(_QWORD *)v205 = 0;
            goto LABEL_390;
          }
LABEL_338:
          v181 = *(WTF::StringImpl **)(a3 + 1032);
          if (v181)
          {
            *(_DWORD *)v181 += 2;
            v234 = v181;
            MEMORY[0x19AEA52D4](v205, &v234, 0);
            v182 = v234;
            v234 = 0;
            if (v182)
            {
              if (*(_DWORD *)v182 == 2)
                WTF::StringImpl::destroy(v182, (WTF::StringImpl *)v32);
              else
                *(_DWORD *)v182 -= 2;
            }
            LODWORD(v6) = *(_DWORD *)&v205[8];
            v183 = *(WTF::StringImpl **)v205;
            *(_QWORD *)v205 = 0;
            if (v183)
            {
              if (*(_DWORD *)v183 == 2)
                WTF::StringImpl::destroy(v183, (WTF::StringImpl *)v32);
              else
                *(_DWORD *)v183 -= 2;
            }
            v4 = *(_QWORD *)(a3 + 1032);
            if ((v6 & 1) == 0)
            {
              if (v4)
              {
                v184 = *(_DWORD *)(v4 + 4);
                *(_DWORD *)v4 += 2;
                if (v184 < 0)
                  goto LABEL_398;
              }
              else
              {
                v184 = 0;
              }
              v47 = __OFADD__(v184, 21);
              v185 = v184 + 21;
              if (!v47 && !__OFADD__(v185, 1))
              {
                v186 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v185 + 1), v186, 34, v4, (int8x16_t *)"\" is not a valid URL.", 0x15u, v205);
                v81 = *(WTF::StringImpl **)v205;
                if (*(_QWORD *)v205)
                  goto LABEL_169;
LABEL_399:
                __break(0xC471u);
                JUMPOUT(0x1952AB410);
              }
LABEL_398:
              *(_QWORD *)v205 = 0;
              goto LABEL_399;
            }
          }
          else
          {
            v4 = 0;
          }
          v187 = *(WTF::StringImpl **)(a3 + 928);
          *(_QWORD *)(a3 + 928) = 0;
          v252[0] = v187;
          LOBYTE(v252[1]) = *(_BYTE *)(a3 + 936);
          v188 = *(_OWORD *)(a3 + 960);
          v189 = *(_OWORD *)(a3 + 976);
          *(_OWORD *)v253 = *(_OWORD *)(a3 + 944);
          *(_OWORD *)v254 = v188;
          *(_OWORD *)(a3 + 944) = 0u;
          v255 = v189;
          v190 = *(WTF::StringImpl **)(a3 + 992);
          v191 = *(_QWORD *)(a3 + 1000);
          *(_QWORD *)(a3 + 1000) = 0;
          v256 = v190;
          v257 = v191;
          v258 = *(_WORD *)(a3 + 1008);
          v192 = *(_OWORD *)(a3 + 1016);
          *(_OWORD *)(a3 + 1016) = 0u;
          *(_OWORD *)v259 = v192;
          *(_QWORD *)(a3 + 1032) = 0;
          *(_QWORD *)&v259[16] = v4;
          LODWORD(v260) = 0;
          goto LABEL_172;
        }
        *(_DWORD *)v88 -= 2;
      }
      if ((v87 & 1) == 0)
        goto LABEL_152;
      goto LABEL_338;
    }
    if (!v4)
      goto LABEL_370;
    v92 = *(_DWORD *)(v4 + 4);
    *(_DWORD *)v4 += 2;
    if ((v92 & 0x80000000) == 0)
    {
LABEL_163:
      v47 = __OFADD__(v92, 55);
      v93 = v92 + 55;
      if (!v47 && !__OFADD__(v93, 1))
      {
        v94 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v93 + 1), v94, 34, v4, (int8x16_t *)"\" is not a valid automaticReloadPaymentThresholdAmount.", 0x37u, v205);
        v81 = *(WTF::StringImpl **)v205;
        if (*(_QWORD *)v205)
          goto LABEL_169;
LABEL_384:
        __break(0xC471u);
        JUMPOUT(0x1952AB3ACLL);
      }
    }
    *(_QWORD *)v205 = 0;
    goto LABEL_384;
  }
LABEL_199:
  if (!*(_BYTE *)(a3 + 1064))
    goto LABEL_264;
  v235 = 0;
  v114 = *(unsigned int *)(a3 + 1060);
  if (!(_DWORD)v114)
  {
    v116 = 0;
    v38 = 0;
    goto LABEL_258;
  }
  if (v114 >= 0x6666667)
  {
    __break(0xC471u);
    JUMPOUT(0x1952AB3A0);
  }
  v115 = 40 * v114;
  v116 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(40 * v114));
  LODWORD(v235) = (v115 & 0xFFFFFFF8) / 0x28;
  v234 = v116;
  v117 = *(unsigned int *)(a3 + 1060);
  HIDWORD(v38) = 0;
  if (!(_DWORD)v117)
  {
    LODWORD(v38) = (v115 & 0xFFFFFFF8) / 0x28;
    goto LABEL_258;
  }
  v7 = v254;
  v4 = *(_QWORD *)(a3 + 1048) + 16;
  v5 = 40 * v117;
  while (1)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
      break;
    if (!WebCore::isValidDecimalMonetaryValue(0, 0x100000000))
    {
      LODWORD(v118) = 0;
      goto LABEL_210;
    }
LABEL_206:
    v119 = *(_OWORD *)(v4 - 16);
    v120 = *(_OWORD *)v4;
    *(_OWORD *)(v4 - 16) = 0u;
    *(_OWORD *)v4 = 0u;
    *(_QWORD *)(v4 + 16) = 0;
    *(_DWORD *)&v205[40] = 0;
LABEL_207:
    memset(v205, 0, 40);
    *(_OWORD *)v252 = v119;
    *(_OWORD *)v253 = v120;
    v254[0] = (WTF::StringImpl *)v6;
    v121 = HIDWORD(v235);
    if (HIDWORD(v235) == (_DWORD)v235)
    {
      v122 = (_QWORD *)WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v234, HIDWORD(v235) + 1, (unint64_t)v252);
      v121 = HIDWORD(v235);
      v123 = (_QWORD *)((char *)v234 + 40 * HIDWORD(v235));
      v124 = *v122;
      *v122 = 0;
      *v123 = v124;
      v125 = v122[1];
      v122[1] = 0;
      v123[1] = v125;
      v126 = v122[2];
      v122[2] = 0;
      v123[2] = v126;
      v127 = v122[3];
      v122[3] = 0;
      v123[3] = v127;
      v128 = (WTF::StringImpl **)(v123 + 4);
      v129 = (WTF::StringImpl **)(v122 + 4);
    }
    else
    {
      v131 = (_QWORD *)((char *)v234 + 40 * HIDWORD(v235));
      v252[0] = 0;
      *v131 = v119;
      v132 = v252[1];
      v252[1] = 0;
      v131[1] = v132;
      v133 = v253[0];
      v253[0] = 0;
      v131[2] = v133;
      v134 = v253[1];
      v253[1] = 0;
      v131[3] = v134;
      v128 = (WTF::StringImpl **)(v131 + 4);
      v129 = v254;
    }
    v135 = *v129;
    *v129 = 0;
    *v128 = v135;
    HIDWORD(v235) = v121 + 1;
    v136 = v254[0];
    v254[0] = 0;
    if (v136)
    {
      if (*(_DWORD *)v136 == 2)
        WTF::StringImpl::destroy(v136, (WTF::StringImpl *)v32);
      else
        *(_DWORD *)v136 -= 2;
    }
    v137 = v253[1];
    v253[1] = 0;
    if (v137)
    {
      if (*(_DWORD *)v137 == 2)
        WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v32);
      else
        *(_DWORD *)v137 -= 2;
    }
    v138 = v253[0];
    v253[0] = 0;
    if (v138)
    {
      if (*(_DWORD *)v138 == 2)
        WTF::StringImpl::destroy(v138, (WTF::StringImpl *)v32);
      else
        *(_DWORD *)v138 -= 2;
    }
    v139 = v252[1];
    v252[1] = 0;
    if (v139)
    {
      if (*(_DWORD *)v139 == 2)
        WTF::StringImpl::destroy(v139, (WTF::StringImpl *)v32);
      else
        *(_DWORD *)v139 -= 2;
    }
    v140 = v252[0];
    v252[0] = 0;
    if (v140)
    {
      if (*(_DWORD *)v140 == 2)
        WTF::StringImpl::destroy(v140, (WTF::StringImpl *)v32);
      else
        *(_DWORD *)v140 -= 2;
    }
    if (*(_DWORD *)&v205[40] != -1)
      (*(&off_1E3352140 + *(unsigned int *)&v205[40]))((int)v252, (WebCore::ApplePayPaymentTokenContext *)v205);
    v4 += 40;
    v5 -= 40;
    if (!v5)
    {
      v116 = v234;
      v38 = v235;
LABEL_258:
      v252[0] = v116;
      v252[1] = v38;
      LODWORD(v253[0]) = 0;
      goto LABEL_259;
    }
  }
  v118 = *(unsigned int *)(v6 + 4);
  if (WebCore::isValidDecimalMonetaryValue(*(unsigned __int16 **)(v6 + 8), v118 | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32)))
  {
    goto LABEL_206;
  }
  *(_DWORD *)v6 += 2;
  if ((v118 & 0x80000000) != 0)
    goto LABEL_376;
LABEL_210:
  if (__OFADD__((_DWORD)v118, 24) || __OFADD__(v118 + 24, 1))
  {
LABEL_376:
    v252[0] = 0;
LABEL_377:
    __break(0xC471u);
    JUMPOUT(0x1952AB380);
  }
  v130 = !v6 || (*(_BYTE *)(v6 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v118 + 25), v130, (int8x16_t *)"\"", 1u, v6, (int8x16_t *)"\" is not a valid amount.", 0x18u, v252);
  v141 = v252[0];
  if (!v252[0])
    goto LABEL_377;
  v205[0] = 33;
  *(WTF::StringImpl **)&v205[8] = v252[0];
  *(_DWORD *)&v205[40] = 1;
  v252[0] = 0;
  if (!v6)
    goto LABEL_249;
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v6, (WTF::StringImpl *)v32);
    if (*(_DWORD *)&v205[40])
    {
      if (*(_DWORD *)&v205[40] == 1)
      {
        v142 = v205[0];
        v141 = *(WTF::StringImpl **)&v205[8];
        goto LABEL_250;
      }
      goto LABEL_369;
    }
    v119 = *(_OWORD *)v205;
    v120 = *(_OWORD *)&v205[16];
    v6 = *(_QWORD *)&v205[32];
    goto LABEL_207;
  }
  *(_DWORD *)v6 -= 2;
LABEL_249:
  v142 = 33;
LABEL_250:
  LOBYTE(v252[0]) = v142;
  v252[1] = v141;
  LODWORD(v253[0]) = 1;
  v143 = v234;
  if (HIDWORD(v235))
  {
    v144 = 40 * HIDWORD(v235);
    do
    {
      WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v143, (WTF::StringImpl *)v32);
      v143 = (WTF::StringImpl *)(v145 + 40);
      v144 -= 40;
    }
    while (v144);
    v143 = v234;
  }
  if (v143)
  {
    v234 = 0;
    LODWORD(v235) = 0;
    WTF::fastFree(v143, v32);
  }
LABEL_259:
  v4 = LODWORD(v253[0]);
  if (LODWORD(v253[0]))
  {
    if (LODWORD(v253[0]) == 1)
    {
      v146 = v252[1];
      v252[1] = 0;
      v205[0] = v252[0];
      *(_QWORD *)&v205[8] = v146;
      v147 = 1;
      v219 = 1;
      goto LABEL_262;
    }
LABEL_369:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_370:
    v92 = 0;
    goto LABEL_163;
  }
  v5 = (uint64_t)v252[0];
  v252[0] = 0;
  v149 = (int)v252[1];
  LODWORD(v6) = HIDWORD(v252[1]);
  v252[1] = 0;
  v147 = v295;
  if (!v295)
  {
    v292 = (WTF *)v5;
    v293 = v149;
    v294 = v6;
    v295 = 1;
LABEL_262:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3352150[v147])(&v234, v252);
    goto LABEL_263;
  }
  if (v294)
  {
    v150 = v292;
    v7 = (WTF::StringImpl **)(40 * v294);
    do
    {
      WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v150, (WTF::StringImpl *)v32);
      v150 = (WTF *)(v151 + 40);
      v7 -= 5;
    }
    while (v7);
  }
  v152 = v292;
  if (v292)
  {
    v292 = 0;
    v293 = 0;
    WTF::fastFree(v152, v32);
  }
  v292 = (WTF *)v5;
  v293 = v149;
  v294 = v6;
  v147 = (int)v253[0];
  if (LODWORD(v253[0]) != -1)
    goto LABEL_262;
LABEL_263:
  if ((_DWORD)v4)
    goto LABEL_176;
LABEL_264:
  if (!*(_BYTE *)(a3 + 1200))
    goto LABEL_283;
  WebCore::ApplePayDeferredPaymentRequest::validate((WebCore::ApplePayDeferredPaymentRequest *)(a3 + 1072), (uint64_t)&v234);
  v4 = v236;
  if ((_BYTE)v236)
  {
    LOBYTE(v252[0]) = (_BYTE)v234;
    v148 = 1;
    LODWORD(v261) = 1;
    v252[1] = 0;
    v205[0] = (_BYTE)v234;
    *(_QWORD *)&v205[8] = v235;
    v219 = 1;
    goto LABEL_282;
  }
  v153 = *(WTF::StringImpl **)(a3 + 1072);
  *(_QWORD *)(a3 + 1072) = 0;
  LOBYTE(v252[1]) = *(_BYTE *)(a3 + 1080);
  v154 = (char)v252[1];
  v155 = *(_QWORD *)(a3 + 1088);
  v156 = *(_QWORD *)(a3 + 1096);
  *(_OWORD *)(a3 + 1088) = 0u;
  v157 = *(_OWORD *)(a3 + 1104);
  v255 = *(_OWORD *)(a3 + 1120);
  v158 = *(WTF::StringImpl **)(a3 + 1136);
  v159 = *(_QWORD *)(a3 + 1144);
  *(_QWORD *)(a3 + 1144) = 0;
  v258 = *(_WORD *)(a3 + 1152);
  v160 = v258;
  *(_QWORD *)v259 = *(_QWORD *)(a3 + 1160);
  v161 = *(_QWORD *)v259;
  v162 = *(_QWORD *)(a3 + 1168);
  v163 = *(_QWORD *)(a3 + 1176);
  *(_OWORD *)(a3 + 1168) = 0u;
  v164 = *(WTF::StringImpl **)(a3 + 1184);
  v165 = *(_QWORD *)(a3 + 1192);
  *(_OWORD *)(a3 + 1184) = 0u;
  LODWORD(v261) = 0;
  v252[0] = 0;
  v224 = v154;
  *(_OWORD *)v254 = v157;
  *(_OWORD *)v253 = 0u;
  v166 = *(_OWORD *)(a3 + 1120);
  v226 = *(_OWORD *)(a3 + 1104);
  v227 = v166;
  v167 = *(_QWORD *)(a3 + 1136);
  v256 = v158;
  v257 = 0;
  v230 = v160;
  v231 = v161;
  v260 = 0u;
  *(_OWORD *)&v259[8] = 0u;
  v223 = 0;
  v234 = v153;
  LOBYTE(v235) = v154;
  v225 = 0u;
  *(_QWORD *)&v236 = v155;
  *((_QWORD *)&v236 + 1) = v156;
  v168 = *(_OWORD *)(a3 + 1120);
  v169 = *(WTF::StringImpl **)(a3 + 1136);
  v237 = *(_OWORD *)(a3 + 1104);
  v238 = v168;
  v228 = v167;
  v229 = 0;
  v239 = v169;
  v240 = v159;
  v241 = v160;
  v242[0] = v161;
  v242[1] = v162;
  v242[2] = v163;
  *(_QWORD *)&v243 = v164;
  v232 = 0u;
  v233 = 0u;
  *((_QWORD *)&v243 + 1) = v165;
  LOBYTE(v244) = 1;
  if (!v310)
  {
    v296 = v153;
    v297 = v154;
    v298 = v155;
    v236 = 0uLL;
    v299 = v156;
    v170 = *(_OWORD *)(a3 + 1120);
    v300 = *(_OWORD *)(a3 + 1104);
    v301 = v170;
    v302 = *(_QWORD *)(a3 + 1136);
    v234 = 0;
    v240 = 0;
    v303 = v159;
    v304 = v160;
    v305 = v161;
    v306 = v162;
    v307 = v163;
    v308 = v164;
    *(_OWORD *)&v242[1] = 0uLL;
    v243 = 0uLL;
    v309 = v165;
    v310 = 1;
    goto LABEL_280;
  }
  WebCore::ApplePayDeferredPaymentRequest::operator=((uint64_t)&v296, (WTF::StringImpl *)&v234);
  if ((_BYTE)v244)
LABEL_280:
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&v234, v164);
  WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&v223, v164);
  v148 = v261;
  if ((_DWORD)v261 == -1)
    goto LABEL_283;
LABEL_282:
  (*(&off_1E3352160 + v148))((int)&v234, (WebCore::ApplePayDeferredPaymentRequest *)v252);
  if (!(_DWORD)v4)
  {
LABEL_283:
    if (!*(_BYTE *)(a3 + 1232))
      goto LABEL_305;
    v5 = *(unsigned __int8 *)(a3 + 1224);
    if (*(_BYTE *)(a3 + 1224))
    {
      v4 = *(_QWORD *)(a3 + 1208);
      *(_QWORD *)(a3 + 1208) = 0;
      LODWORD(v7) = *(_DWORD *)(a3 + 1216);
      LODWORD(v6) = *(_DWORD *)(a3 + 1220);
      *(_QWORD *)(a3 + 1216) = 0;
      v171 = 1;
      if (!v315)
      {
        v311 = (WTF *)v4;
        v312 = (int)v7;
        v313 = v6;
        v314 = 1;
        goto LABEL_302;
      }
LABEL_289:
      if (v314 == v171)
      {
        if (v314)
        {
          v172 = v311;
          if (v311)
          {
            v311 = 0;
            v312 = 0;
            WTF::fastFree(v172, v32);
          }
          v311 = (WTF *)v4;
          v312 = (int)v7;
          v313 = v6;
          goto LABEL_305;
        }
      }
      else
      {
        if (!v314)
        {
          v311 = (WTF *)v4;
          v312 = (int)v7;
          v313 = v6;
          v314 = 1;
          goto LABEL_305;
        }
        v173 = v311;
        if (v311)
        {
          v311 = 0;
          v312 = 0;
          WTF::fastFree(v173, v32);
        }
        v314 = 0;
      }
      if ((_DWORD)v5 && v4)
        WTF::fastFree((WTF *)v4, v32);
    }
    else
    {
      if (v315)
      {
        v171 = 0;
        v4 = 0;
        goto LABEL_289;
      }
      LOBYTE(v311) = 0;
      v314 = 0;
LABEL_302:
      v315 = 1;
    }
LABEL_305:
    WebCore::PaymentRequestValidator::validate((uint64_t)v272, 63, (uint64_t)v252, (uint8x8_t)v38);
    if (!LOBYTE(v253[0]))
    {
      WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)v205, (const WebCore::ApplePaySessionPaymentRequest *)v272);
      v219 = 0;
      if (LOBYTE(v253[0]))
      {
        v174 = v252[1];
        v252[1] = 0;
        if (v174)
        {
          if (*(_DWORD *)v174 == 2)
            WTF::StringImpl::destroy(v174, (WTF::StringImpl *)v32);
          else
            *(_DWORD *)v174 -= 2;
        }
      }
      goto LABEL_176;
    }
LABEL_174:
    v33 = (char)v252[0];
    v34 = v252[1];
LABEL_175:
    v205[0] = v33;
    *(_QWORD *)&v205[8] = v34;
    v219 = 1;
  }
LABEL_176:
  if (v271 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3352170[v271])(v252, &v269);
  v25 = v326;
  if (v326 != -1)
LABEL_179:
    ((void (*)(WTF::StringImpl **, char *))off_1E3352180[v25])(v252, v319);
  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)v272, (WTF::StringImpl *)v32);
  v20 = v318;
  if (v318 != -1)
LABEL_181:
    (*(&off_1E3352190 + v20))((int)v272, (WebCore::ApplePaySessionPaymentRequest *)v316);
  if (v219)
  {
    if (v219 != 1)
      goto LABEL_369;
    v95 = *(_QWORD *)&v205[8];
    *(_QWORD *)&v205[8] = 0;
    *(_BYTE *)a4 = v205[0];
    *(_QWORD *)(a4 + 8) = v95;
    v96 = 1;
    *(_DWORD *)(a4 + 16) = 1;
    goto LABEL_191;
  }
  v97 = bmalloc::api::isoAllocate();
  if (v219)
    goto LABEL_369;
  v98 = v97;
  WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)v316, (const WebCore::ApplePaySessionPaymentRequest *)v205);
  *(_DWORD *)(v98 + 976) = 1;
  *(_QWORD *)v98 = &unk_1E3352058;
  *(_QWORD *)(v98 + 968) = &unk_1E33520C0;
  v99 = *((_QWORD *)v10 + 88);
  if (v99)
  {
    v100 = *(WebCore::PaymentSession **)(v99 + 8);
    if (v100)
      v10 = v100;
  }
  *(_QWORD *)(v98 + 8) = &off_1E33A18C0;
  *(_QWORD *)(v98 + 16) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v98 + 8), (WebCore::PaymentSession *)((char *)v10 + 192));
  *(_QWORD *)(v98 + 8) = &off_1E33A0540;
  *(_QWORD *)(v98 + 24) = 0;
  if (*((_BYTE *)v10 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x1952AB0D4);
  }
  v252[0] = (WTF::StringImpl *)(v98 + 8);
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v10 + 40, (uint64_t *)v252, (uint64_t)v272);
  *(_QWORD *)(v98 + 40) = 0;
  *(_QWORD *)(v98 + 48) = 0;
  *(_QWORD *)(v98 + 968) = &unk_1E33524A0;
  *(_QWORD *)v98 = &off_1E3352320;
  *(_QWORD *)(v98 + 8) = &unk_1E33523C8;
  *(_QWORD *)(v98 + 32) = &unk_1E3352420;
  *(_QWORD *)(v98 + 56) = 0;
  WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)(v98 + 64), (const WebCore::ApplePaySessionPaymentRequest *)v316);
  *(_DWORD *)(v98 + 960) = (_DWORD)a2;
  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)v316, v101);
  result = (WTF *)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v98 + 8));
  *(_QWORD *)a4 = v98;
  *(_DWORD *)(a4 + 16) = 0;
  v96 = v219;
  if (v219 != -1)
LABEL_191:
    result = (WTF *)(*(&off_1E3352190 + v96))((int)v316, (WebCore::ApplePaySessionPaymentRequest *)v205);
LABEL_8:
  if (v222)
  {
    result = v221;
    v221 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::ApplePaySession::~ApplePaySession(WebCore::ApplePaySession *this, WTF::StringImpl *a2)
{
  void *v3;
  void *v4;

  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySession *)((char *)this + 64), a2);
  WebCore::EventTarget::~EventTarget((WebCore::ApplePaySession *)((char *)this + 32), v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ApplePaySession *)((char *)this + 8), v4);
}

{
  void *v3;
  void *v4;
  void *v5;

  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySession *)((char *)this + 64), a2);
  WebCore::EventTarget::~EventTarget((WebCore::ApplePaySession *)((char *)this + 32), v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ApplePaySession *)((char *)this + 8), v4);
  bmalloc::api::isoDeallocate(this, v5);
}

void `non-virtual thunk to'WebCore::ApplePaySession::~ApplePaySession(WebCore::ApplePaySession *this, WTF::StringImpl *a2)
{
  void *v3;
  void *v4;

  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySession *)((char *)this + 56), a2);
  WebCore::EventTarget::~EventTarget((WebCore::ApplePaySession *)((char *)this + 24), v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v4);
}

{
  void *v3;
  void *v4;

  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySession *)((char *)this + 32), a2);
  WebCore::EventTarget::~EventTarget(this, v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ApplePaySession *)((char *)this - 24), v4);
}

{
  bmalloc::api *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (WebCore::ApplePaySession *)((char *)this - 8);
  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySession *)((char *)this + 56), a2);
  WebCore::EventTarget::~EventTarget((WebCore::ApplePaySession *)((char *)this + 24), v4);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v5);
  bmalloc::api::isoDeallocate(v3, v6);
}

{
  bmalloc::api *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (WebCore::ApplePaySession *)((char *)this - 32);
  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySession *)((char *)this + 32), a2);
  WebCore::EventTarget::~EventTarget(this, v4);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ApplePaySession *)((char *)this - 24), v5);
  bmalloc::api::isoDeallocate(v3, v6);
}

void `virtual thunk to'WebCore::ApplePaySession::~ApplePaySession(WebCore::ApplePaySession *this, WTF::StringImpl *a2)
{
  char *v2;
  void *v3;
  void *v4;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)(v2 + 64), a2);
  WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v2 + 32), v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v2 + 8), v4);
}

{
  char *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)(v2 + 64), a2);
  WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v2 + 32), v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v2 + 8), v4);
  bmalloc::api::isoDeallocate((bmalloc::api *)v2, v5);
}

WTF::StringImpl *WebCore::ApplePaySession::canMakePaymentsWithActiveCard@<X0>(WebCore::PaymentSession *a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::RunLoop *Payments;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23[8];
  WTF::StringImpl *v24;
  char v25;

  result = (WTF::StringImpl *)WebCore::PaymentSession::canCreateSession(a1, (uint64_t)v23);
  if (v25)
  {
    v10 = v24;
    v24 = 0;
    *(_BYTE *)a4 = v23[0];
    *(_QWORD *)(a4 + 8) = v10;
    *(_BYTE *)(a4 + 16) = 1;
    goto LABEL_18;
  }
  v11 = *a3;
  *a3 = 0;
  v12 = *((_QWORD *)a1 + 66);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 24);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 1008);
          if (((v16 & 0x8000000000000000) == 0 || v16 == -1)
            && (*(_QWORD *)(*((_QWORD *)a1 + 85) + 704) & 0x20000000000) != 0)
          {
            v20 = *(uint64_t **)(v15 + 1240);
            if (v11)
              ++v11[4];
            v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v21 = &off_1E3352248;
            *((_QWORD *)v21 + 1) = v11;
            v22 = v21;
            WebCore::PaymentCoordinator::canMakePaymentsWithActiveCard(v20, (uint64_t)a1, a2, (uint64_t *)&v22);
            result = v22;
            if (!v22)
              goto LABEL_13;
          }
          else
          {
            Payments = (WTF::RunLoop *)WebCore::PaymentCoordinator::canMakePayments(*(WebCore::PaymentCoordinator **)(v15 + 1240));
            v18 = (char)Payments;
            WTF::RunLoop::main(Payments);
            if (v11)
              ++v11[4];
            v19 = WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v19 = &off_1E3352220;
            *(_QWORD *)(v19 + 8) = v11;
            *(_BYTE *)(v19 + 16) = v18;
            v22 = (WTF::StringImpl *)v19;
            WTF::RunLoop::dispatch();
            result = v22;
            v22 = 0;
            if (!result)
              goto LABEL_13;
          }
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
LABEL_13:
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          goto LABEL_15;
        }
      }
    }
  }
  *(_BYTE *)a4 = 12;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 1;
LABEL_15:
  if (v11)
  {
    if (v11[4] == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[4];
  }
LABEL_18:
  if (v25)
  {
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *WebCore::ApplePaySession::openPaymentSetup@<X0>(WebCore::PaymentSession *a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  WTF *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  WTF *v17;
  WTF *v18;
  char v19[8];
  WTF::StringImpl *v20;
  char v21;

  result = (WTF *)WebCore::PaymentSession::canCreateSession(a1, (uint64_t)v19);
  if (v21)
  {
    v10 = v20;
    v20 = 0;
    *(_BYTE *)a4 = v19[0];
    *(_QWORD *)(a4 + 8) = v10;
LABEL_7:
    *(_BYTE *)(a4 + 16) = 1;
    goto LABEL_8;
  }
  result = (WTF *)WTF::isMainThread(result);
  if (!(_DWORD)result)
  {
LABEL_6:
    result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 12;
    goto LABEL_7;
  }
  {
    WebCore::currentToken(void)::token = 0;
    goto LABEL_6;
  }
  if (!WebCore::currentToken(void)::token
    || *(_DWORD *)(WebCore::currentToken(void)::token + 68)
    || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
  {
    goto LABEL_6;
  }
  v11 = *((_QWORD *)a1 + 66);
  if (!v11
    || (v12 = *(_QWORD *)(v11 + 8)) == 0
    || (v13 = *(_QWORD *)(v12 + 24)) == 0
    || (v14 = *(_QWORD *)(v13 + 8)) == 0)
  {
    *(_BYTE *)a4 = 12;
    *(_QWORD *)(a4 + 8) = 0;
    goto LABEL_7;
  }
  v15 = *(_QWORD *)(v14 + 1240);
  v16 = *a3;
  *a3 = 0;
  if (v16)
    ++v16[4];
  v17 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v17 = &off_1E3352270;
  *((_QWORD *)v17 + 1) = v16;
  v18 = v17;
  WebCore::PaymentCoordinator::openPaymentSetup(v15, (uint64_t)a1, a2, (uint64_t *)&v18);
  result = v18;
  v18 = 0;
  if (result)
    result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (v16)
  {
    if (v16[4] == 1)
      result = (WTF *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
    else
      --v16[4];
  }
LABEL_8:
  if (v21)
  {
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::ApplePaySession::begin(WebCore::ApplePaySession *this@<X0>, WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  char v10;

  if ((*((_DWORD *)this + 14) - 11) >= 0xFFFFFFF6)
    goto LABEL_11;
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v7 = v6 - 96;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  if (*(_BYTE *)(v7 + 274))
    goto LABEL_22;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 336) + 8) + 24) + 8) + 1240)
                 + 16))
    v8 = WTF::RefPtr<WebCore::PaymentSession,WTF::RawPtrTraits<WebCore::PaymentSession>,WTF::DefaultRefDerefTraits<WebCore::PaymentSession>>::unspecifiedBoolTypeInstance;
  else
    v8 = 0;
  if (v8)
    goto LABEL_11;
  if (v5)
  {
    v9 = *(_QWORD *)(v5 + 8);
    if (v9)
      v5 = v9 - 96;
    else
      v5 = 0;
  }
  if (*(_BYTE *)(v5 + 274))
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x1952ABAC4);
  }
  WebCore::PaymentCoordinator::beginPaymentSession(*(WebCore::PaymentCoordinator **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 336) + 8) + 24) + 8)+ 1240), a2, this, (WebCore::ApplePaySession *)((char *)this + 64));
  if ((v10 & 1) == 0)
  {
LABEL_11:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 12;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  *((_DWORD *)this + 14) = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
}

WTF::StringImpl *WebCore::ApplePaySession::completeMerchantValidation@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  char v13;
  char v14;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  CFTypeRef cf;
  char v22;
  WTF::StringImpl *v23;

  if (*((_DWORD *)result + 14) != 1 || (v4 = result, *((_DWORD *)result + 15) != 1))
  {
    v13 = 12;
LABEL_23:
    *(_BYTE *)a3 = v13;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v13 = 33;
    goto LABEL_23;
  }
  v5 = *(_QWORD *)(*((_QWORD *)result + 2) + 8);
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  v6 = *(_QWORD *)(v5 + 408);
  v23 = 0;
  WebCore::PaymentMerchantSession::fromJS((uint64_t)&cf);
  if (!v22)
  {
    if (!v23)
      goto LABEL_27;
    if (!*((_DWORD *)v23 + 1))
      goto LABEL_27;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
    if (!v16)
      goto LABEL_27;
    v17 = *(_QWORD *)(v16 + 24);
    if (!v17)
      goto LABEL_27;
    v18 = *(_QWORD *)(v17 + 8);
    if (!v18)
      goto LABEL_27;
    v19 = *(_QWORD *)(v18 + 792);
    if (!v19)
      goto LABEL_27;
    ++*(_DWORD *)(v19 + 16);
    WebCore::PageConsoleClient::addMessage((uint64_t *)v19, 1, 2, (uint64_t)&v23, 0, 0);
    v20 = *(_DWORD *)(v19 + 16);
    if (v20)
    {
      *(_DWORD *)(v19 + 16) = v20 - 1;
LABEL_27:
      v14 = 12;
      goto LABEL_29;
    }
    __break(0xC471u);
LABEL_49:
    JUMPOUT(0x1952ABD30);
  }
  v8 = *((_QWORD *)v4 + 2);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = v9 - 96;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  if (*(_BYTE *)(v10 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1952ABD50);
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 336) + 8) + 24) + 8) + 1240)
                 + 16))
    v11 = WTF::RefPtr<WebCore::PaymentSession,WTF::RawPtrTraits<WebCore::PaymentSession>,WTF::DefaultRefDerefTraits<WebCore::PaymentSession>>::unspecifiedBoolTypeInstance;
  else
    v11 = 0;
  if (v11)
  {
    *((_DWORD *)v4 + 15) = 2;
    if (v8)
    {
      v12 = *(_QWORD *)(v8 + 8);
      if (v12)
        v8 = v12 - 96;
      else
        v8 = 0;
    }
    if (*(_BYTE *)(v8 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x1952ABD70);
    }
    WebCore::PaymentCoordinator::completeMerchantValidation(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 336) + 8) + 24) + 8) + 1240), (uint64_t)&cf);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_30;
  }
  v14 = 8;
LABEL_29:
  *(_BYTE *)a3 = v14;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_30:
  if (v22)
  {
    v15 = cf;
    cf = 0;
    if (v15)
      CFRelease(v15);
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ApplePaySession::scriptExecutionContext(WebCore::ApplePaySession *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

void WebCore::ApplePaySession::completeShippingMethodSelection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  int v63;
  unsigned int v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  WTF *v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  char v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  __int16 v111;
  char v112;
  __int128 v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  __int16 v123;
  __int128 v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  char v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  char v145;
  WTF *v146;
  uint64_t v147;
  __int128 v148;
  _BYTE v149[24];
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  __int16 v163;
  char v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  __int16 v170;
  char v171;
  __int128 v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  char v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  __int16 v182;
  __int128 v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  char v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  __int16 v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  char v204;
  WTF *v205;
  uint64_t v206;
  int v207;
  char v208;
  char v209[8];
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  __int16 v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  char v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  __int16 v227;
  char v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  __int16 v234;
  char v235;
  __int128 v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  char v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  __int16 v246;
  __int128 v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  char v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  __int16 v260;
  uint64_t v261;
  __int128 v262;
  __int128 v263;
  char v264;
  uint64_t v265;
  uint64_t v266;
  char v267;
  char v268;
  WTF *v269;
  int v270;
  unsigned int v271;
  char v272;
  uint64_t v273;

  v273 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 56) != 2)
  {
    *(_BYTE *)a3 = 12;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  WebCore::convertAndValidateTotal((uint64_t)v209, a2);
  v7 = v217;
  if ((_DWORD)v217)
  {
    if ((_DWORD)v217 != 1)
      goto LABEL_91;
    v8 = v210;
    v210 = 0;
    LOBYTE(v148) = v209[0];
    *((_QWORD *)&v148 + 1) = v8;
    v207 = 1;
  }
  else
  {
    v9 = v210;
    v10 = v211;
    v210 = 0;
    v211 = 0;
    v148 = v212;
    *(_OWORD *)v149 = v213;
    v11 = v215;
    *(_QWORD *)&v149[16] = v214;
    v215 = 0;
    v12 = v216;
    *(_BYTE *)a2 = v209[0];
    v13 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v9;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v6);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *(WTF::StringImpl **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v10;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v6);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *(_OWORD *)v149;
    *(_OWORD *)(a2 + 24) = v148;
    *(_OWORD *)(a2 + 40) = v15;
    v16 = *(WTF::StringImpl **)(a2 + 64);
    *(_QWORD *)(a2 + 56) = *(_QWORD *)&v149[16];
    *(_QWORD *)(a2 + 64) = v11;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v6);
      else
        *(_DWORD *)v16 -= 2;
    }
    *(_WORD *)(a2 + 72) = v12;
    *(_QWORD *)&v148 = *(_QWORD *)(a2 + 80);
    v17 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *((_QWORD *)&v148 + 1) = v17;
    v149[0] = 1;
    WebCore::convertAndValidate((uint64_t)&v87, (unsigned __int8 **)&v148);
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v148, v18);
    v20 = v89;
    if ((_DWORD)v89)
    {
      if ((_DWORD)v89 != 1)
        goto LABEL_91;
      v21 = v88;
      v88 = 0;
      LOBYTE(v148) = v87;
      *((_QWORD *)&v148 + 1) = v21;
    }
    else
    {
      v22 = v87;
      v23 = v88;
      v87 = 0;
      v88 = 0;
      v24 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v24)
      {
        v25 = 80 * v24;
        v26 = (WTF::StringImpl **)(*(_QWORD *)(a2 + 80) + 64);
        do
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v19);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = *(v26 - 6);
          *(v26 - 6) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v19);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = *(v26 - 7);
          *(v26 - 7) = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v19);
            else
              *(_DWORD *)v29 -= 2;
          }
          v26 += 10;
          v25 -= 80;
        }
        while (v25);
      }
      v30 = *(WTF **)(a2 + 80);
      if (v30)
      {
        *(_QWORD *)(a2 + 80) = 0;
        *(_DWORD *)(a2 + 88) = 0;
        WTF::fastFree(v30, v19);
      }
      *(_QWORD *)&v148 = 0;
      *(_QWORD *)(a2 + 80) = v22;
      *((_QWORD *)&v148 + 1) = 0;
      *(_QWORD *)(a2 + 88) = v23;
      WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v148, v19);
      WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)&v148, a2);
      v31 = *(WTF **)(a2 + 616);
      *(_QWORD *)(a2 + 616) = 0;
      v205 = v31;
      v32 = *(_QWORD *)(a2 + 624);
      *(_QWORD *)(a2 + 624) = 0;
      v206 = v32;
    }
    v207 = v20;
    ((void (*)(char *, uint64_t *))off_1E3352170[v20])(&v208, &v87);
  }
  ((void (*)(uint64_t *, char *))off_1E3352180[v7])(&v87, v209);
  if (v207)
  {
    if (v207 == 1)
    {
      v33 = *((_QWORD *)&v148 + 1);
      *((_QWORD *)&v148 + 1) = 0;
      *(_BYTE *)a3 = v148;
      *(_QWORD *)(a3 + 8) = v33;
      v34 = 1;
      *(_BYTE *)(a3 + 16) = 1;
LABEL_85:
      (*(&off_1E33521A0 + v34))((int)v209, (WebCore::ApplePayDetailsUpdateBase *)&v148);
      return;
    }
LABEL_91:
    v86 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ApplePaySession::completeShippingContactSelection(v86);
    return;
  }
  *(_DWORD *)(a1 + 56) = 1;
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 8);
    if (v36)
      v35 = v36 - 96;
    else
      v35 = 0;
  }
  if (*(_BYTE *)(v35 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1952AC80CLL);
  }
  v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 336) + 8) + 24) + 8) + 1240);
  LOBYTE(v87) = v148;
  v38 = *((_QWORD *)&v148 + 1);
  v39 = *(_QWORD *)v149;
  *((_QWORD *)&v148 + 1) = 0;
  *(_QWORD *)v149 = 0;
  v88 = v38;
  v89 = v39;
  v90 = *(_OWORD *)&v149[8];
  v91 = v150;
  v40 = v152;
  v92 = v151;
  v93 = v152;
  v94 = v153;
  v41 = v154;
  v152 = 0;
  v154 = 0;
  v95 = v41;
  v42 = v155;
  v43 = HIDWORD(v155);
  v155 = 0;
  v96 = __PAIR64__(v43, v42);
  LOBYTE(v97) = 0;
  v115 = 0;
  if (v174)
  {
    v97 = v156;
    v98 = v157;
    v44 = v158;
    v156 = 0;
    v158 = 0uLL;
    v99 = v44;
    v100 = v159;
    v101 = v160;
    v45 = v162;
    v162 = 0;
    v102 = v161;
    v103 = v45;
    v104 = v163;
    v105 = 0;
    v112 = 0;
    if (v171)
    {
      v105 = v164;
      v46 = v165;
      v165 = 0uLL;
      v106 = v46;
      v107 = v166;
      v108 = v167;
      v47 = v169;
      v169 = 0;
      v109 = v168;
      v110 = v47;
      v111 = v170;
      v112 = 1;
    }
    v48 = v172;
    v172 = 0uLL;
    v113 = v48;
    v49 = v173;
    v173 = 0;
    v114 = v49;
    v115 = 1;
  }
  LOBYTE(v116) = 0;
  v126 = 0;
  if (v185)
  {
    v116 = v175;
    v117 = v176;
    v50 = v177;
    v177 = 0u;
    v118 = v50;
    v119 = v178;
    v120 = v179;
    v51 = v181;
    v175 = 0;
    v181 = 0;
    v121 = v180;
    v122 = v51;
    v123 = v182;
    v52 = v183;
    v183 = 0u;
    v124 = v52;
    v53 = v184;
    v184 = 0;
    v125 = v53;
    v126 = 1;
  }
  LOBYTE(v127) = 0;
  v129 = 0;
  if (v188)
  {
    v54 = v186;
    v186 = 0;
    v127 = v54;
    v55 = v187;
    v187 = 0;
    v128 = v55;
    v129 = 1;
  }
  LOBYTE(v130) = 0;
  v141 = 0;
  if (v200)
  {
    v56 = v191;
    v191 = 0u;
    v132 = v56;
    v133 = v192;
    v134 = v193;
    v57 = v198;
    v58 = v199;
    v198 = 0u;
    v199 = 0u;
    v130 = v189;
    v131 = v190;
    v135 = v194;
    v59 = v195;
    v189 = 0;
    v195 = 0;
    v136 = v59;
    v137 = v196;
    v138 = v197;
    v139 = v57;
    v140 = v58;
    v141 = 1;
  }
  LOBYTE(v142) = 0;
  v145 = 0;
  if (v204)
  {
    v144 = 0;
    if (v203)
    {
      v60 = v201;
      v201 = 0;
      v142 = v60;
      v61 = v202;
      v202 = 0;
      v143 = v61;
      v144 = 1;
    }
    v145 = 1;
  }
  v62 = v205;
  v205 = 0;
  v146 = v62;
  v63 = v206;
  LODWORD(v147) = v206;
  v64 = HIDWORD(v206);
  v212 = v90;
  v206 = 0;
  HIDWORD(v147) = v64;
  v209[0] = v148;
  v88 = 0;
  v89 = 0;
  v210 = v38;
  v211 = v39;
  v213 = v91;
  v214 = v92;
  v215 = v40;
  v216 = v153;
  v93 = 0;
  v95 = 0;
  v217 = v41;
  v96 = 0;
  v218 = v42;
  v219 = v43;
  LOBYTE(v220) = 0;
  v238 = 0;
  if (v174)
  {
    v220 = v97;
    v221 = v98;
    v65 = v99;
    v97 = 0;
    v99 = 0uLL;
    v222 = v65;
    v223 = v100;
    v224 = v101;
    v66 = v103;
    v103 = 0;
    v225 = v102;
    v226 = v66;
    v227 = v104;
    v228 = 0;
    v235 = 0;
    if (v112)
    {
      v228 = v105;
      v67 = v106;
      v106 = 0uLL;
      v229 = v67;
      v230 = v107;
      v231 = v108;
      v68 = v110;
      v110 = 0;
      v232 = v109;
      v233 = v68;
      v234 = v111;
      v235 = 1;
    }
    v69 = v113;
    v113 = 0uLL;
    v236 = v69;
    v70 = v114;
    v114 = 0;
    v237 = v70;
    v238 = 1;
  }
  LOBYTE(v239) = 0;
  v249 = 0;
  if (v185)
  {
    v71 = v116;
    v116 = 0;
    v239 = v71;
    v240 = v117;
    v72 = v118;
    v118 = 0u;
    v241 = v72;
    v242 = v119;
    v243 = v120;
    v244 = v121;
    v245 = v122;
    v246 = v123;
    v73 = v124;
    v124 = 0u;
    v247 = v73;
    v74 = v125;
    v122 = 0;
    v125 = 0;
    v248 = v74;
    v249 = 1;
  }
  LOBYTE(v250) = 0;
  v252 = 0;
  if (v188)
  {
    v250 = v127;
    v75 = v128;
    v127 = 0;
    v128 = 0;
    v251 = v75;
    v252 = 1;
  }
  LOBYTE(v253) = 0;
  v264 = 0;
  if (v200)
  {
    v76 = v132;
    v132 = 0u;
    v255 = v76;
    v256 = v133;
    v257 = v134;
    v77 = v139;
    v78 = v140;
    v139 = 0u;
    v140 = 0u;
    v79 = v130;
    v130 = 0;
    v253 = v79;
    v254 = v131;
    v258 = v135;
    v80 = v136;
    v136 = 0;
    v259 = v80;
    v260 = v137;
    v261 = v138;
    v262 = v77;
    v263 = v78;
    v264 = 1;
  }
  LOBYTE(v265) = 0;
  v268 = 0;
  if (v204)
  {
    v267 = 0;
    if (v144)
    {
      v81 = v142;
      v142 = 0;
      v265 = v81;
      v82 = v143;
      v143 = 0;
      v266 = v82;
      v267 = 1;
    }
    v268 = 1;
  }
  v146 = 0;
  v269 = v62;
  v270 = v63;
  v147 = 0;
  v271 = v64;
  v272 = 1;
  WebCore::PaymentCoordinator::completeShippingMethodSelection(v37, (uint64_t)v209);
  if (v272)
  {
    if (v271)
      WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(v269, (WTF *)((char *)v269 + 104 * v271));
    v84 = v269;
    if (v269)
    {
      v269 = 0;
      v270 = 0;
      WTF::fastFree(v84, v83);
    }
    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v209, v83);
  }
  if (HIDWORD(v147))
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(v146, (WTF *)((char *)v146 + 104 * HIDWORD(v147)));
  v85 = v146;
  if (v146)
  {
    v146 = 0;
    LODWORD(v147) = 0;
    WTF::fastFree(v85, v83);
  }
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&v87, v83);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v34 = v207;
  if (v207 != -1)
    goto LABEL_85;
}

void WebCore::ApplePaySession::completeShippingContactSelection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  __int16 v114;
  char v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  char v122;
  __int128 v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  __int16 v133;
  __int128 v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  char v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  _BYTE v161[24];
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  __int16 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  __int16 v175;
  char v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  __int16 v182;
  char v183;
  __int128 v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  __int16 v194;
  __int128 v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  char v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  __int16 v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  char v225;
  _BYTE v226[8];
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  __int16 v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  char v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  __int16 v244;
  char v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  __int16 v251;
  char v252;
  __int128 v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  char v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  uint64_t v262;
  __int16 v263;
  __int128 v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  uint64_t v270;
  char v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  __int16 v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  char v284;
  char v285;
  uint64_t v286;
  int v287;
  int v288;
  uint64_t v289;
  int v290;
  int v291;
  char v292;
  uint64_t v293;

  v293 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 56) != 3)
  {
    *(_BYTE *)a3 = 12;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  v6 = (WTF::StringImpl **)(a2 + 632);
  WebCore::convertAndValidate((uint64_t)&v97, a2 + 632);
  v8 = v99;
  if ((_DWORD)v99)
  {
    if ((_DWORD)v99 != 1)
      goto LABEL_93;
    v9 = v98;
    v98 = 0;
    LOBYTE(v160) = v97;
    *((_QWORD *)&v160 + 1) = v9;
    v221 = 1;
  }
  else
  {
    v10 = v97;
    v11 = v98;
    v97 = 0;
    v98 = 0;
    v12 = *(_DWORD *)(a2 + 644);
    if (v12)
      WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*v6, (WTF::StringImpl *)((char *)*v6 + 104 * v12));
    v13 = *v6;
    if (*v6)
    {
      *(_QWORD *)(a2 + 632) = 0;
      *(_DWORD *)(a2 + 640) = 0;
      WTF::fastFree(v13, v7);
    }
    *(_QWORD *)(a2 + 632) = v10;
    *(_QWORD *)(a2 + 640) = v11;
    WebCore::convertAndValidateTotal((uint64_t)v226, a2);
    v15 = v234;
    if ((_DWORD)v234)
    {
      if ((_DWORD)v234 != 1)
        goto LABEL_93;
      v16 = v227;
      v227 = 0;
      LOBYTE(v160) = v226[0];
      *((_QWORD *)&v160 + 1) = v16;
      v221 = 1;
    }
    else
    {
      v17 = v227;
      v18 = v228;
      v227 = 0;
      v228 = 0;
      v160 = v229;
      *(_OWORD *)v161 = v230;
      v19 = v232;
      *(_QWORD *)&v161[16] = v231;
      v232 = 0;
      v20 = v233;
      *(_BYTE *)a2 = v226[0];
      v21 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v17;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v14);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *(WTF::StringImpl **)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v18;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v14);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = *(_OWORD *)v161;
      *(_OWORD *)(a2 + 24) = v160;
      *(_OWORD *)(a2 + 40) = v23;
      v24 = *(WTF::StringImpl **)(a2 + 64);
      *(_QWORD *)(a2 + 56) = *(_QWORD *)&v161[16];
      *(_QWORD *)(a2 + 64) = v19;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v14);
        else
          *(_DWORD *)v24 -= 2;
      }
      *(_WORD *)(a2 + 72) = v20;
      *(_QWORD *)&v160 = *(_QWORD *)(a2 + 80);
      v25 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *((_QWORD *)&v160 + 1) = v25;
      v161[0] = 1;
      WebCore::convertAndValidate((uint64_t)&v222, (unsigned __int8 **)&v160);
      if (v161[0])
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v160, v26);
      v27 = v224;
      if (v224)
      {
        if (v224 != 1)
          goto LABEL_93;
        v28 = v223;
        v223 = 0;
        LOBYTE(v160) = v222;
        *((_QWORD *)&v160 + 1) = v28;
      }
      else
      {
        v29 = v222;
        v222 = 0;
        v30 = v223;
        v223 = 0;
        v31 = *(unsigned int *)(a2 + 92);
        if ((_DWORD)v31)
        {
          v32 = 80 * v31;
          v33 = (WTF::StringImpl **)(*(_QWORD *)(a2 + 80) + 64);
          do
          {
            v34 = *v33;
            *v33 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v26);
              else
                *(_DWORD *)v34 -= 2;
            }
            v35 = *(v33 - 6);
            *(v33 - 6) = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v26);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = *(v33 - 7);
            *(v33 - 7) = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v26);
              else
                *(_DWORD *)v36 -= 2;
            }
            v33 += 10;
            v32 -= 80;
          }
          while (v32);
        }
        v37 = *(WTF **)(a2 + 80);
        if (v37)
        {
          *(_QWORD *)(a2 + 80) = 0;
          *(_DWORD *)(a2 + 88) = 0;
          WTF::fastFree(v37, v26);
        }
        *(_QWORD *)&v160 = 0;
        *(_QWORD *)(a2 + 80) = v29;
        *((_QWORD *)&v160 + 1) = 0;
        *(_QWORD *)(a2 + 88) = v30;
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v160, v26);
        WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)&v160, a2);
        v38 = *(_QWORD *)(a2 + 616);
        *(_QWORD *)(a2 + 616) = 0;
        v217 = v38;
        v39 = *(_QWORD *)(a2 + 624);
        *(_QWORD *)(a2 + 624) = 0;
        v218 = v39;
        v40 = *(_QWORD *)(a2 + 632);
        *(_QWORD *)(a2 + 632) = 0;
        v219 = v40;
        v41 = *(_QWORD *)(a2 + 640);
        *(_QWORD *)(a2 + 640) = 0;
        v220 = v41;
      }
      v221 = v27;
      ((void (*)(char *, uint64_t *))off_1E3352170[v27])(&v225, &v222);
    }
    ((void (*)(uint64_t *, _BYTE *))off_1E3352180[v15])(&v222, v226);
  }
  ((void (*)(_BYTE *, uint64_t *))off_1E3352110[v8])(v226, &v97);
  if (v221)
  {
    if (v221 == 1)
    {
      v42 = *((_QWORD *)&v160 + 1);
      *((_QWORD *)&v160 + 1) = 0;
      *(_BYTE *)a3 = v160;
      *(_QWORD *)(a3 + 8) = v42;
      v43 = 1;
      *(_BYTE *)(a3 + 16) = 1;
LABEL_87:
      (*(&off_1E33521B0 + v43))((int)v226, (WebCore::ApplePayCouponCodeUpdate *)&v160);
      return;
    }
LABEL_93:
    v96 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ApplePaySession::completePaymentMethodSelection(v96);
    return;
  }
  *(_DWORD *)(a1 + 56) = 1;
  v44 = *(_QWORD *)(a1 + 16);
  if (v44)
  {
    v45 = *(_QWORD *)(v44 + 8);
    if (v45)
      v44 = v45 - 96;
    else
      v44 = 0;
  }
  if (*(_BYTE *)(v44 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1952AD304);
  }
  v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 336) + 8) + 24) + 8) + 1240);
  LOBYTE(v97) = v160;
  v47 = *((_QWORD *)&v160 + 1);
  v48 = *(_QWORD *)v161;
  *((_QWORD *)&v160 + 1) = 0;
  *(_QWORD *)v161 = 0;
  v98 = v47;
  v99 = v48;
  v100 = *(_OWORD *)&v161[8];
  v101 = v162;
  v49 = v164;
  v102 = v163;
  v103 = v164;
  v104 = v165;
  v50 = v166;
  v164 = 0;
  v166 = 0;
  v105 = v50;
  v51 = v167;
  v52 = HIDWORD(v167);
  v167 = 0;
  v106 = __PAIR64__(v52, v51);
  LOBYTE(v107) = 0;
  v125 = 0;
  if (v186)
  {
    v107 = v168;
    v108 = v169;
    v53 = v170;
    v168 = 0;
    v170 = 0uLL;
    v109 = v53;
    v110 = v171;
    v111 = v172;
    v54 = v174;
    v174 = 0;
    v112 = v173;
    v113 = v54;
    v114 = v175;
    v115 = 0;
    v122 = 0;
    if (v183)
    {
      v115 = v176;
      v55 = v177;
      v177 = 0uLL;
      v116 = v55;
      v117 = v178;
      v118 = v179;
      v56 = v181;
      v181 = 0;
      v119 = v180;
      v120 = v56;
      v121 = v182;
      v122 = 1;
    }
    v57 = v184;
    v184 = 0uLL;
    v123 = v57;
    v58 = v185;
    v185 = 0;
    v124 = v58;
    v125 = 1;
  }
  LOBYTE(v126) = 0;
  v136 = 0;
  if (v197)
  {
    v126 = v187;
    v127 = v188;
    v59 = v189;
    v189 = 0u;
    v128 = v59;
    v129 = v190;
    v130 = v191;
    v60 = v193;
    v187 = 0;
    v193 = 0;
    v131 = v192;
    v132 = v60;
    v133 = v194;
    v61 = v195;
    v195 = 0u;
    v134 = v61;
    v62 = v196;
    v196 = 0;
    v135 = v62;
    v136 = 1;
  }
  LOBYTE(v137) = 0;
  v139 = 0;
  if (v200)
  {
    v63 = v198;
    v198 = 0;
    v137 = v63;
    v64 = v199;
    v199 = 0;
    v138 = v64;
    v139 = 1;
  }
  LOBYTE(v140) = 0;
  v151 = 0;
  if (v212)
  {
    v65 = v203;
    v203 = 0u;
    v142 = v65;
    v143 = v204;
    v144 = v205;
    v66 = v210;
    v67 = v211;
    v210 = 0u;
    v211 = 0u;
    v140 = v201;
    v141 = v202;
    v145 = v206;
    v68 = v207;
    v201 = 0;
    v207 = 0;
    v146 = v68;
    v147 = v208;
    v148 = v209;
    v149 = v66;
    v150 = v67;
    v151 = 1;
  }
  LOBYTE(v152) = 0;
  v155 = 0;
  if (v216)
  {
    v154 = 0;
    if (v215)
    {
      v69 = v213;
      v213 = 0;
      v152 = v69;
      v70 = v214;
      v214 = 0;
      v153 = v70;
      v154 = 1;
    }
    v155 = 1;
  }
  v71 = v217;
  v217 = 0;
  v156 = v71;
  v72 = v218;
  LODWORD(v157) = v218;
  v73 = HIDWORD(v218);
  v218 = 0;
  HIDWORD(v157) = v73;
  v74 = v219;
  v219 = 0;
  v158 = v74;
  v75 = v220;
  LODWORD(v159) = v220;
  v76 = HIDWORD(v220);
  v220 = 0;
  HIDWORD(v159) = v76;
  v226[0] = v160;
  v98 = 0;
  v99 = 0;
  v227 = v47;
  v228 = v48;
  v230 = v101;
  v229 = v100;
  v231 = v102;
  v232 = v49;
  v233 = v165;
  v103 = 0;
  v105 = 0;
  v234 = v50;
  v106 = 0;
  v235 = v51;
  v236 = v52;
  LOBYTE(v237) = 0;
  v255 = 0;
  if (v186)
  {
    v237 = v107;
    v238 = v108;
    v77 = v109;
    v107 = 0;
    v109 = 0uLL;
    v239 = v77;
    v240 = v110;
    v241 = v111;
    v78 = v113;
    v113 = 0;
    v242 = v112;
    v243 = v78;
    v244 = v114;
    v245 = 0;
    v252 = 0;
    if (v122)
    {
      v245 = v115;
      v79 = v116;
      v116 = 0uLL;
      v246 = v79;
      v247 = v117;
      v248 = v118;
      v80 = v120;
      v120 = 0;
      v249 = v119;
      v250 = v80;
      v251 = v121;
      v252 = 1;
    }
    v81 = v123;
    v123 = 0uLL;
    v253 = v81;
    v82 = v124;
    v124 = 0;
    v254 = v82;
    v255 = 1;
  }
  LOBYTE(v256) = 0;
  v266 = 0;
  if (v197)
  {
    v83 = v126;
    v126 = 0;
    v256 = v83;
    v257 = v127;
    v84 = v128;
    v128 = 0u;
    v258 = v84;
    v259 = v129;
    v260 = v130;
    v261 = v131;
    v262 = v132;
    v263 = v133;
    v85 = v134;
    v134 = 0u;
    v264 = v85;
    v86 = v135;
    v132 = 0;
    v135 = 0;
    v265 = v86;
    v266 = 1;
  }
  LOBYTE(v267) = 0;
  v269 = 0;
  if (v200)
  {
    v267 = v137;
    v87 = v138;
    v137 = 0;
    v138 = 0;
    v268 = v87;
    v269 = 1;
  }
  LOBYTE(v270) = 0;
  v281 = 0;
  if (v212)
  {
    v88 = v142;
    v142 = 0u;
    v272 = v88;
    v273 = v143;
    v274 = v144;
    v89 = v149;
    v90 = v150;
    v149 = 0u;
    v150 = 0u;
    v91 = v140;
    v140 = 0;
    v270 = v91;
    v271 = v141;
    v275 = v145;
    v92 = v146;
    v146 = 0;
    v276 = v92;
    v277 = v147;
    v278 = v148;
    v279 = v89;
    v280 = v90;
    v281 = 1;
  }
  LOBYTE(v282) = 0;
  v285 = 0;
  if (v216)
  {
    v284 = 0;
    if (v154)
    {
      v93 = v152;
      v152 = 0;
      v282 = v93;
      v94 = v153;
      v153 = 0;
      v283 = v94;
      v284 = 1;
    }
    v285 = 1;
  }
  v156 = 0;
  v286 = v71;
  v287 = v72;
  v157 = 0;
  v288 = v73;
  v158 = 0;
  v289 = v74;
  v290 = v75;
  v159 = 0;
  v291 = v76;
  v292 = 1;
  WebCore::PaymentCoordinator::completeShippingContactSelection(v46, (uint64_t)v226);
  if (v292)
    WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)v226, v95);
  WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)&v97, v95);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v43 = v221;
  if (v221 != -1)
    goto LABEL_87;
}

void WebCore::ApplePaySession::completePaymentMethodSelection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  __int16 v110;
  char v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  __int16 v117;
  char v118;
  __int128 v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  __int16 v129;
  __int128 v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  char v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  _BYTE v158[24];
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  __int16 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  __int16 v172;
  char v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  __int16 v179;
  char v180;
  __int128 v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  char v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  __int16 v191;
  __int128 v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  char v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  __int16 v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  char v220;
  _BYTE v221[8];
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  __int16 v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  char v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  __int16 v239;
  char v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  __int16 v246;
  char v247;
  __int128 v248;
  uint64_t v249;
  char v250;
  uint64_t v251;
  char v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  __int16 v258;
  __int128 v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  uint64_t v265;
  char v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  __int16 v272;
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  char v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  char v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  int v285;
  int v286;
  uint64_t v287;
  char v288;
  uint64_t v289;

  v289 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 56) != 4)
  {
    *(_BYTE *)a3 = 12;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  WebCore::convertAndValidateTotal((uint64_t)v221, a2);
  v7 = v229;
  if ((_DWORD)v229)
  {
    if ((_DWORD)v229 != 1)
      goto LABEL_83;
    v8 = v222;
    v222 = 0;
    LOBYTE(v157) = v221[0];
    *((_QWORD *)&v157 + 1) = v8;
    v219 = 1;
  }
  else
  {
    v9 = v222;
    v10 = v223;
    v222 = 0;
    v223 = 0;
    v157 = v224;
    *(_OWORD *)v158 = v225;
    v11 = v227;
    *(_QWORD *)&v158[16] = v226;
    v227 = 0;
    v12 = v228;
    *(_BYTE *)a2 = v221[0];
    v13 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v9;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v6);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *(WTF::StringImpl **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v10;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v6);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *(_OWORD *)v158;
    *(_OWORD *)(a2 + 24) = v157;
    *(_OWORD *)(a2 + 40) = v15;
    v16 = *(WTF::StringImpl **)(a2 + 64);
    *(_QWORD *)(a2 + 56) = *(_QWORD *)&v158[16];
    *(_QWORD *)(a2 + 64) = v11;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v6);
      else
        *(_DWORD *)v16 -= 2;
    }
    *(_WORD *)(a2 + 72) = v12;
    *(_QWORD *)&v157 = *(_QWORD *)(a2 + 80);
    v17 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *((_QWORD *)&v157 + 1) = v17;
    v158[0] = 1;
    WebCore::convertAndValidate((uint64_t)&v93, (unsigned __int8 **)&v157);
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v157, v18);
    v20 = v95;
    if ((_DWORD)v95)
    {
      if ((_DWORD)v95 != 1)
        goto LABEL_83;
      v21 = v94;
      v94 = 0;
      LOBYTE(v157) = v93;
      *((_QWORD *)&v157 + 1) = v21;
    }
    else
    {
      v22 = v93;
      v23 = v94;
      v93 = 0;
      v94 = 0;
      v24 = *(unsigned int *)(a2 + 92);
      if ((_DWORD)v24)
      {
        v25 = 80 * v24;
        v26 = (WTF::StringImpl **)(*(_QWORD *)(a2 + 80) + 64);
        do
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v19);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = *(v26 - 6);
          *(v26 - 6) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v19);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = *(v26 - 7);
          *(v26 - 7) = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v19);
            else
              *(_DWORD *)v29 -= 2;
          }
          v26 += 10;
          v25 -= 80;
        }
        while (v25);
      }
      v30 = *(WTF **)(a2 + 80);
      if (v30)
      {
        *(_QWORD *)(a2 + 80) = 0;
        *(_DWORD *)(a2 + 88) = 0;
        WTF::fastFree(v30, v19);
      }
      *(_QWORD *)&v157 = 0;
      *(_QWORD *)(a2 + 80) = v22;
      *((_QWORD *)&v157 + 1) = 0;
      *(_QWORD *)(a2 + 88) = v23;
      WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v157, v19);
      WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)&v157, a2);
      v31 = *(_QWORD *)(a2 + 616);
      *(_QWORD *)(a2 + 616) = 0;
      v214 = v31;
      v32 = *(_QWORD *)(a2 + 624);
      *(_QWORD *)(a2 + 624) = 0;
      v215 = v32;
      v33 = *(_QWORD *)(a2 + 632);
      *(_QWORD *)(a2 + 632) = 0;
      v216 = v33;
      v34 = *(_QWORD *)(a2 + 640);
      *(_QWORD *)(a2 + 640) = 0;
      v217 = v34;
      v35 = *(_QWORD *)(a2 + 648);
      *(_QWORD *)(a2 + 648) = 0;
      v218 = v35;
    }
    v219 = v20;
    ((void (*)(char *, uint64_t *))off_1E3352170[v20])(&v220, &v93);
  }
  ((void (*)(uint64_t *, _BYTE *))off_1E3352180[v7])(&v93, v221);
  if (v219)
  {
    if (v219 == 1)
    {
      v36 = *((_QWORD *)&v157 + 1);
      *((_QWORD *)&v157 + 1) = 0;
      *(_BYTE *)a3 = v157;
      *(_QWORD *)(a3 + 8) = v36;
      v37 = 1;
      *(_BYTE *)(a3 + 16) = 1;
LABEL_77:
      (*(&off_1E33521C0 + v37))((int)v221, (WebCore::ApplePayPaymentMethodUpdate *)&v157);
      return;
    }
LABEL_83:
    v92 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ApplePaySession::completeCouponCodeChange(v92);
    return;
  }
  *(_DWORD *)(a1 + 56) = 1;
  v38 = *(_QWORD *)(a1 + 16);
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 8);
    if (v39)
      v38 = v39 - 96;
    else
      v38 = 0;
  }
  if (*(_BYTE *)(v38 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1952ADCC0);
  }
  v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 336) + 8) + 24) + 8) + 1240);
  LOBYTE(v93) = v157;
  v41 = *((_QWORD *)&v157 + 1);
  v42 = *(_QWORD *)v158;
  *((_QWORD *)&v157 + 1) = 0;
  *(_QWORD *)v158 = 0;
  v94 = v41;
  v95 = v42;
  v96 = *(_OWORD *)&v158[8];
  v97 = v159;
  v43 = v161;
  v98 = v160;
  v99 = v161;
  v100 = v162;
  v44 = v163;
  v161 = 0;
  v163 = 0;
  v101 = v44;
  v45 = v164;
  v46 = HIDWORD(v164);
  v164 = 0;
  v102 = __PAIR64__(v46, v45);
  LOBYTE(v103) = 0;
  v121 = 0;
  if (v183)
  {
    v103 = v165;
    v104 = v166;
    v47 = v167;
    v165 = 0;
    v167 = 0uLL;
    v105 = v47;
    v106 = v168;
    v107 = v169;
    v48 = v171;
    v171 = 0;
    v108 = v170;
    v109 = v48;
    v110 = v172;
    v111 = 0;
    v118 = 0;
    if (v180)
    {
      v111 = v173;
      v49 = v174;
      v174 = 0uLL;
      v112 = v49;
      v113 = v175;
      v114 = v176;
      v50 = v178;
      v178 = 0;
      v115 = v177;
      v116 = v50;
      v117 = v179;
      v118 = 1;
    }
    v51 = v181;
    v181 = 0uLL;
    v119 = v51;
    v52 = v182;
    v182 = 0;
    v120 = v52;
    v121 = 1;
  }
  LOBYTE(v122) = 0;
  v132 = 0;
  if (v194)
  {
    v53 = v184;
    v184 = 0;
    v122 = v53;
    v123 = v185;
    v54 = v186;
    v186 = 0u;
    v124 = v54;
    v125 = v187;
    v126 = v188;
    v127 = v189;
    v128 = v190;
    v129 = v191;
    v55 = v192;
    v192 = 0u;
    v130 = v55;
    v56 = v193;
    v190 = 0;
    v193 = 0;
    v131 = v56;
    v132 = 1;
  }
  LOBYTE(v133) = 0;
  v135 = 0;
  if (v197)
  {
    v57 = v195;
    v195 = 0;
    v133 = v57;
    v58 = v196;
    v196 = 0;
    v134 = v58;
    v135 = 1;
  }
  LOBYTE(v136) = 0;
  v147 = 0;
  if (v209)
  {
    v59 = v200;
    v200 = 0u;
    v138 = v59;
    v139 = v201;
    v140 = v202;
    v60 = v207;
    v61 = v208;
    v207 = 0u;
    v208 = 0u;
    v62 = v198;
    v198 = 0;
    v136 = v62;
    v137 = v199;
    v141 = v203;
    v63 = v204;
    v204 = 0;
    v142 = v63;
    v143 = v205;
    v144 = v206;
    v145 = v60;
    v146 = v61;
    v147 = 1;
  }
  LOBYTE(v148) = 0;
  v151 = 0;
  if (v213)
  {
    v150 = 0;
    if (v212)
    {
      v64 = v210;
      v210 = 0;
      v148 = v64;
      v65 = v211;
      v211 = 0;
      v149 = v65;
      v150 = 1;
    }
    v151 = 1;
  }
  v66 = v214;
  v214 = 0;
  v152 = v66;
  v67 = v215;
  LODWORD(v153) = v215;
  v68 = HIDWORD(v215);
  v215 = 0;
  HIDWORD(v153) = v68;
  v69 = v216;
  v216 = 0;
  v154 = v69;
  v70 = v217;
  LODWORD(v155) = v217;
  v71 = HIDWORD(v217);
  v217 = 0;
  HIDWORD(v155) = v71;
  v72 = v218;
  v218 = 0;
  v156 = v72;
  v221[0] = v157;
  v94 = 0;
  v95 = 0;
  v222 = v41;
  v223 = v42;
  v225 = v97;
  v224 = v96;
  v226 = v98;
  v227 = v43;
  v228 = v162;
  v99 = 0;
  v101 = 0;
  v229 = v44;
  v102 = 0;
  v230 = v45;
  v231 = v46;
  LOBYTE(v232) = 0;
  v250 = 0;
  if (v183)
  {
    v232 = v103;
    v233 = v104;
    v73 = v105;
    v103 = 0;
    v105 = 0uLL;
    v234 = v73;
    v235 = v106;
    v236 = v107;
    v74 = v109;
    v109 = 0;
    v237 = v108;
    v238 = v74;
    v239 = v110;
    v240 = 0;
    v247 = 0;
    if (v118)
    {
      v240 = v111;
      v75 = v112;
      v112 = 0uLL;
      v241 = v75;
      v242 = v113;
      v243 = v114;
      v76 = v116;
      v116 = 0;
      v244 = v115;
      v245 = v76;
      v246 = v117;
      v247 = 1;
    }
    v77 = v119;
    v119 = 0uLL;
    v248 = v77;
    v78 = v120;
    v120 = 0;
    v249 = v78;
    v250 = 1;
  }
  LOBYTE(v251) = 0;
  v261 = 0;
  if (v194)
  {
    v79 = v122;
    v122 = 0;
    v251 = v79;
    v252 = v123;
    v80 = v124;
    v124 = 0u;
    v253 = v80;
    v254 = v125;
    v255 = v126;
    v256 = v127;
    v257 = v128;
    v258 = v129;
    v81 = v130;
    v130 = 0u;
    v259 = v81;
    v82 = v131;
    v128 = 0;
    v131 = 0;
    v260 = v82;
    v261 = 1;
  }
  LOBYTE(v262) = 0;
  v264 = 0;
  if (v197)
  {
    v262 = v133;
    v83 = v134;
    v133 = 0;
    v134 = 0;
    v263 = v83;
    v264 = 1;
  }
  LOBYTE(v265) = 0;
  v276 = 0;
  if (v209)
  {
    v84 = v138;
    v138 = 0u;
    v267 = v84;
    v268 = v139;
    v269 = v140;
    v85 = v145;
    v86 = v146;
    v145 = 0u;
    v146 = 0u;
    v87 = v136;
    v136 = 0;
    v265 = v87;
    v266 = v137;
    v270 = v141;
    v88 = v142;
    v142 = 0;
    v271 = v88;
    v272 = v143;
    v273 = v144;
    v274 = v85;
    v275 = v86;
    v276 = 1;
  }
  LOBYTE(v277) = 0;
  v280 = 0;
  if (v213)
  {
    v279 = 0;
    if (v150)
    {
      v89 = v148;
      v148 = 0;
      v277 = v89;
      v90 = v149;
      v149 = 0;
      v278 = v90;
      v279 = 1;
    }
    v280 = 1;
  }
  v152 = 0;
  v281 = v66;
  v282 = v67;
  v153 = 0;
  v283 = v68;
  v154 = 0;
  v284 = v69;
  v285 = v70;
  v155 = 0;
  v286 = v71;
  v156 = 0;
  v287 = v72;
  v288 = 1;
  WebCore::PaymentCoordinator::completePaymentMethodSelection(v40, (uint64_t)v221);
  if (v288)
    WebCore::ApplePayPaymentMethodUpdate::~ApplePayPaymentMethodUpdate((WebCore::ApplePayPaymentMethodUpdate *)v221, v91);
  WebCore::ApplePayPaymentMethodUpdate::~ApplePayPaymentMethodUpdate((WebCore::ApplePayPaymentMethodUpdate *)&v93, v91);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v37 = v219;
  if (v219 != -1)
    goto LABEL_77;
}

void WebCore::ApplePaySession::completeCouponCodeChange(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  __int16 v114;
  char v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  char v122;
  __int128 v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  __int16 v133;
  __int128 v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  char v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  _BYTE v161[24];
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  __int16 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  __int16 v175;
  char v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  __int16 v182;
  char v183;
  __int128 v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  __int16 v194;
  __int128 v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  char v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  __int16 v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  char v225;
  _BYTE v226[8];
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  __int16 v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  char v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  __int16 v244;
  char v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  __int16 v251;
  char v252;
  __int128 v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  char v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  uint64_t v262;
  __int16 v263;
  __int128 v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  uint64_t v270;
  char v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  __int16 v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  char v284;
  char v285;
  uint64_t v286;
  int v287;
  int v288;
  uint64_t v289;
  int v290;
  int v291;
  char v292;
  uint64_t v293;

  v293 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 56) != 5)
  {
    *(_BYTE *)a3 = 12;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  v6 = (WTF::StringImpl **)(a2 + 632);
  WebCore::convertAndValidate((uint64_t)&v97, a2 + 632);
  v8 = v99;
  if ((_DWORD)v99)
  {
    if ((_DWORD)v99 != 1)
      goto LABEL_93;
    v9 = v98;
    v98 = 0;
    LOBYTE(v160) = v97;
    *((_QWORD *)&v160 + 1) = v9;
    v221 = 1;
  }
  else
  {
    v10 = v97;
    v11 = v98;
    v97 = 0;
    v98 = 0;
    v12 = *(_DWORD *)(a2 + 644);
    if (v12)
      WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*v6, (WTF::StringImpl *)((char *)*v6 + 104 * v12));
    v13 = *v6;
    if (*v6)
    {
      *(_QWORD *)(a2 + 632) = 0;
      *(_DWORD *)(a2 + 640) = 0;
      WTF::fastFree(v13, v7);
    }
    *(_QWORD *)(a2 + 632) = v10;
    *(_QWORD *)(a2 + 640) = v11;
    WebCore::convertAndValidateTotal((uint64_t)v226, a2);
    v15 = v234;
    if ((_DWORD)v234)
    {
      if ((_DWORD)v234 != 1)
        goto LABEL_93;
      v16 = v227;
      v227 = 0;
      LOBYTE(v160) = v226[0];
      *((_QWORD *)&v160 + 1) = v16;
      v221 = 1;
    }
    else
    {
      v17 = v227;
      v18 = v228;
      v227 = 0;
      v228 = 0;
      v160 = v229;
      *(_OWORD *)v161 = v230;
      v19 = v232;
      *(_QWORD *)&v161[16] = v231;
      v232 = 0;
      v20 = v233;
      *(_BYTE *)a2 = v226[0];
      v21 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v17;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v14);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *(WTF::StringImpl **)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v18;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v14);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = *(_OWORD *)v161;
      *(_OWORD *)(a2 + 24) = v160;
      *(_OWORD *)(a2 + 40) = v23;
      v24 = *(WTF::StringImpl **)(a2 + 64);
      *(_QWORD *)(a2 + 56) = *(_QWORD *)&v161[16];
      *(_QWORD *)(a2 + 64) = v19;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v14);
        else
          *(_DWORD *)v24 -= 2;
      }
      *(_WORD *)(a2 + 72) = v20;
      *(_QWORD *)&v160 = *(_QWORD *)(a2 + 80);
      v25 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *((_QWORD *)&v160 + 1) = v25;
      v161[0] = 1;
      WebCore::convertAndValidate((uint64_t)&v222, (unsigned __int8 **)&v160);
      if (v161[0])
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v160, v26);
      v27 = v224;
      if (v224)
      {
        if (v224 != 1)
          goto LABEL_93;
        v28 = v223;
        v223 = 0;
        LOBYTE(v160) = v222;
        *((_QWORD *)&v160 + 1) = v28;
      }
      else
      {
        v29 = v222;
        v222 = 0;
        v30 = v223;
        v223 = 0;
        v31 = *(unsigned int *)(a2 + 92);
        if ((_DWORD)v31)
        {
          v32 = 80 * v31;
          v33 = (WTF::StringImpl **)(*(_QWORD *)(a2 + 80) + 64);
          do
          {
            v34 = *v33;
            *v33 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v26);
              else
                *(_DWORD *)v34 -= 2;
            }
            v35 = *(v33 - 6);
            *(v33 - 6) = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v26);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = *(v33 - 7);
            *(v33 - 7) = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v26);
              else
                *(_DWORD *)v36 -= 2;
            }
            v33 += 10;
            v32 -= 80;
          }
          while (v32);
        }
        v37 = *(WTF **)(a2 + 80);
        if (v37)
        {
          *(_QWORD *)(a2 + 80) = 0;
          *(_DWORD *)(a2 + 88) = 0;
          WTF::fastFree(v37, v26);
        }
        *(_QWORD *)&v160 = 0;
        *(_QWORD *)(a2 + 80) = v29;
        *((_QWORD *)&v160 + 1) = 0;
        *(_QWORD *)(a2 + 88) = v30;
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v160, v26);
        WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)&v160, a2);
        v38 = *(_QWORD *)(a2 + 616);
        *(_QWORD *)(a2 + 616) = 0;
        v217 = v38;
        v39 = *(_QWORD *)(a2 + 624);
        *(_QWORD *)(a2 + 624) = 0;
        v218 = v39;
        v40 = *(_QWORD *)(a2 + 632);
        *(_QWORD *)(a2 + 632) = 0;
        v219 = v40;
        v41 = *(_QWORD *)(a2 + 640);
        *(_QWORD *)(a2 + 640) = 0;
        v220 = v41;
      }
      v221 = v27;
      ((void (*)(char *, uint64_t *))off_1E3352170[v27])(&v225, &v222);
    }
    ((void (*)(uint64_t *, _BYTE *))off_1E3352180[v15])(&v222, v226);
  }
  ((void (*)(_BYTE *, uint64_t *))off_1E3352110[v8])(v226, &v97);
  if (v221)
  {
    if (v221 == 1)
    {
      v42 = *((_QWORD *)&v160 + 1);
      *((_QWORD *)&v160 + 1) = 0;
      *(_BYTE *)a3 = v160;
      *(_QWORD *)(a3 + 8) = v42;
      v43 = 1;
      *(_BYTE *)(a3 + 16) = 1;
LABEL_87:
      (*(&off_1E33521D0 + v43))((int)v226, (WebCore::ApplePayCouponCodeUpdate *)&v160);
      return;
    }
LABEL_93:
    v96 = std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ApplePaySession::completePayment(v96);
    return;
  }
  *(_DWORD *)(a1 + 56) = 1;
  v44 = *(_QWORD *)(a1 + 16);
  if (v44)
  {
    v45 = *(_QWORD *)(v44 + 8);
    if (v45)
      v44 = v45 - 96;
    else
      v44 = 0;
  }
  if (*(_BYTE *)(v44 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1952AE7B8);
  }
  v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 336) + 8) + 24) + 8) + 1240);
  LOBYTE(v97) = v160;
  v47 = *((_QWORD *)&v160 + 1);
  v48 = *(_QWORD *)v161;
  *((_QWORD *)&v160 + 1) = 0;
  *(_QWORD *)v161 = 0;
  v98 = v47;
  v99 = v48;
  v100 = *(_OWORD *)&v161[8];
  v101 = v162;
  v49 = v164;
  v102 = v163;
  v103 = v164;
  v104 = v165;
  v50 = v166;
  v164 = 0;
  v166 = 0;
  v105 = v50;
  v51 = v167;
  v52 = HIDWORD(v167);
  v167 = 0;
  v106 = __PAIR64__(v52, v51);
  LOBYTE(v107) = 0;
  v125 = 0;
  if (v186)
  {
    v107 = v168;
    v108 = v169;
    v53 = v170;
    v168 = 0;
    v170 = 0uLL;
    v109 = v53;
    v110 = v171;
    v111 = v172;
    v54 = v174;
    v174 = 0;
    v112 = v173;
    v113 = v54;
    v114 = v175;
    v115 = 0;
    v122 = 0;
    if (v183)
    {
      v115 = v176;
      v55 = v177;
      v177 = 0uLL;
      v116 = v55;
      v117 = v178;
      v118 = v179;
      v56 = v181;
      v181 = 0;
      v119 = v180;
      v120 = v56;
      v121 = v182;
      v122 = 1;
    }
    v57 = v184;
    v184 = 0uLL;
    v123 = v57;
    v58 = v185;
    v185 = 0;
    v124 = v58;
    v125 = 1;
  }
  LOBYTE(v126) = 0;
  v136 = 0;
  if (v197)
  {
    v126 = v187;
    v127 = v188;
    v59 = v189;
    v189 = 0u;
    v128 = v59;
    v129 = v190;
    v130 = v191;
    v60 = v193;
    v187 = 0;
    v193 = 0;
    v131 = v192;
    v132 = v60;
    v133 = v194;
    v61 = v195;
    v195 = 0u;
    v134 = v61;
    v62 = v196;
    v196 = 0;
    v135 = v62;
    v136 = 1;
  }
  LOBYTE(v137) = 0;
  v139 = 0;
  if (v200)
  {
    v63 = v198;
    v198 = 0;
    v137 = v63;
    v64 = v199;
    v199 = 0;
    v138 = v64;
    v139 = 1;
  }
  LOBYTE(v140) = 0;
  v151 = 0;
  if (v212)
  {
    v65 = v203;
    v203 = 0u;
    v142 = v65;
    v143 = v204;
    v144 = v205;
    v66 = v210;
    v67 = v211;
    v210 = 0u;
    v211 = 0u;
    v140 = v201;
    v141 = v202;
    v145 = v206;
    v68 = v207;
    v201 = 0;
    v207 = 0;
    v146 = v68;
    v147 = v208;
    v148 = v209;
    v149 = v66;
    v150 = v67;
    v151 = 1;
  }
  LOBYTE(v152) = 0;
  v155 = 0;
  if (v216)
  {
    v154 = 0;
    if (v215)
    {
      v69 = v213;
      v213 = 0;
      v152 = v69;
      v70 = v214;
      v214 = 0;
      v153 = v70;
      v154 = 1;
    }
    v155 = 1;
  }
  v71 = v217;
  v217 = 0;
  v156 = v71;
  v72 = v218;
  LODWORD(v157) = v218;
  v73 = HIDWORD(v218);
  v218 = 0;
  HIDWORD(v157) = v73;
  v74 = v219;
  v219 = 0;
  v158 = v74;
  v75 = v220;
  LODWORD(v159) = v220;
  v76 = HIDWORD(v220);
  v220 = 0;
  HIDWORD(v159) = v76;
  v226[0] = v160;
  v98 = 0;
  v99 = 0;
  v227 = v47;
  v228 = v48;
  v230 = v101;
  v229 = v100;
  v231 = v102;
  v232 = v49;
  v233 = v165;
  v103 = 0;
  v105 = 0;
  v234 = v50;
  v106 = 0;
  v235 = v51;
  v236 = v52;
  LOBYTE(v237) = 0;
  v255 = 0;
  if (v186)
  {
    v237 = v107;
    v238 = v108;
    v77 = v109;
    v107 = 0;
    v109 = 0uLL;
    v239 = v77;
    v240 = v110;
    v241 = v111;
    v78 = v113;
    v113 = 0;
    v242 = v112;
    v243 = v78;
    v244 = v114;
    v245 = 0;
    v252 = 0;
    if (v122)
    {
      v245 = v115;
      v79 = v116;
      v116 = 0uLL;
      v246 = v79;
      v247 = v117;
      v248 = v118;
      v80 = v120;
      v120 = 0;
      v249 = v119;
      v250 = v80;
      v251 = v121;
      v252 = 1;
    }
    v81 = v123;
    v123 = 0uLL;
    v253 = v81;
    v82 = v124;
    v124 = 0;
    v254 = v82;
    v255 = 1;
  }
  LOBYTE(v256) = 0;
  v266 = 0;
  if (v197)
  {
    v83 = v126;
    v126 = 0;
    v256 = v83;
    v257 = v127;
    v84 = v128;
    v128 = 0u;
    v258 = v84;
    v259 = v129;
    v260 = v130;
    v261 = v131;
    v262 = v132;
    v263 = v133;
    v85 = v134;
    v134 = 0u;
    v264 = v85;
    v86 = v135;
    v132 = 0;
    v135 = 0;
    v265 = v86;
    v266 = 1;
  }
  LOBYTE(v267) = 0;
  v269 = 0;
  if (v200)
  {
    v267 = v137;
    v87 = v138;
    v137 = 0;
    v138 = 0;
    v268 = v87;
    v269 = 1;
  }
  LOBYTE(v270) = 0;
  v281 = 0;
  if (v212)
  {
    v88 = v142;
    v142 = 0u;
    v272 = v88;
    v273 = v143;
    v274 = v144;
    v89 = v149;
    v90 = v150;
    v149 = 0u;
    v150 = 0u;
    v91 = v140;
    v140 = 0;
    v270 = v91;
    v271 = v141;
    v275 = v145;
    v92 = v146;
    v146 = 0;
    v276 = v92;
    v277 = v147;
    v278 = v148;
    v279 = v89;
    v280 = v90;
    v281 = 1;
  }
  LOBYTE(v282) = 0;
  v285 = 0;
  if (v216)
  {
    v284 = 0;
    if (v154)
    {
      v93 = v152;
      v152 = 0;
      v282 = v93;
      v94 = v153;
      v153 = 0;
      v283 = v94;
      v284 = 1;
    }
    v285 = 1;
  }
  v156 = 0;
  v286 = v71;
  v287 = v72;
  v157 = 0;
  v288 = v73;
  v158 = 0;
  v289 = v74;
  v290 = v75;
  v159 = 0;
  v291 = v76;
  v292 = 1;
  WebCore::PaymentCoordinator::completeCouponCodeChange(v46, (uint64_t)v226);
  if (v292)
    WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)v226, v95);
  WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)&v97, v95);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v43 = v221;
  if (v221 != -1)
    goto LABEL_87;
}

uint64_t WebCore::ApplePaySession::completePayment@<X0>(uint64_t result@<X0>, unsigned __int16 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF *v37;
  WTF::StringImpl *v38;
  unsigned __int16 v39;
  WTF *v40;
  int v41;
  unsigned int v42;
  _QWORD v43[4];
  char v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  char v50;
  int v51;

  if (*(_DWORD *)(result + 56) == 7)
  {
    v8 = *a2;
    v9 = result;
    switch(*a2)
    {
      case 0u:
      case 1u:
      case 5u:
      case 6u:
      case 7u:
        goto LABEL_18;
      case 2u:
        *a2 = 1;
        v10 = (char **)(a2 + 4);
        v11 = WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)(v11 + 8) = 1;
        *(_QWORD *)v11 = off_1E334CCA0;
        *(_BYTE *)(v11 + 12) = 2;
        goto LABEL_8;
      case 3u:
        *a2 = 1;
        v10 = (char **)(a2 + 4);
        v11 = WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)(v11 + 8) = 1;
        *(_QWORD *)v11 = off_1E334CCA0;
        *(_BYTE *)(v11 + 12) = 1;
        *(_WORD *)(v11 + 13) = 260;
        goto LABEL_9;
      case 4u:
        *a2 = 1;
        v10 = (char **)(a2 + 4);
        v11 = WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)(v11 + 8) = 1;
        *(_QWORD *)v11 = off_1E334CCA0;
        *(_BYTE *)(v11 + 12) = 1;
LABEL_8:
        *(_WORD *)(v11 + 13) = 0;
LABEL_9:
        v13 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
        if (*MEMORY[0x1E0CBF6F0])
          *v13 += 2;
        *(_QWORD *)(v11 + 16) = v13;
        *(_WORD *)(v11 + 24) = 0;
        v45 = (WTF *)v11;
        v14 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v14 == *((_DWORD *)a2 + 4))
        {
          v15 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v14 + 1, (unint64_t)&v45);
          LODWORD(v14) = *((_DWORD *)a2 + 5);
        }
        else
        {
          v15 = (uint64_t *)&v45;
        }
        v16 = (_QWORD *)*((_QWORD *)a2 + 1);
        memmove(v16 + 1, v16, 8 * v14);
        v18 = *v15;
        *v15 = 0;
        *v16 = v18;
        ++*((_DWORD *)a2 + 5);
        v19 = v45;
        v45 = 0;
        if (v19)
        {
          if (*((_DWORD *)v19 + 2) == 1)
          {
            v38 = (WTF::StringImpl *)*((_QWORD *)v19 + 2);
            *((_QWORD *)v19 + 2) = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
                WTF::StringImpl::destroy(v38, v17);
              else
                *(_DWORD *)v38 -= 2;
            }
            WTF::fastFree(v19, v17);
          }
          else
          {
            --*((_DWORD *)v19 + 2);
          }
        }
        v8 = *a2;
LABEL_18:
        LOWORD(v45) = v8;
        v20 = (WTF *)*((_QWORD *)a2 + 1);
        v22 = *((_DWORD *)a2 + 4);
        v21 = *((_DWORD *)a2 + 5);
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        LOBYTE(v48) = 0;
        v50 = 0;
        v23 = *((unsigned __int8 *)a2 + 56);
        if (*((_BYTE *)a2 + 56))
        {
          v24 = *((_QWORD *)a2 + 3);
          v3 = *((_QWORD *)a2 + 4);
          *(_OWORD *)(a2 + 12) = 0u;
          *(_QWORD *)&v48 = v24;
          *((_QWORD *)&v48 + 1) = v3;
          v4 = *((_QWORD *)a2 + 5);
          v5 = *((_QWORD *)a2 + 6);
          *(_OWORD *)(a2 + 20) = 0u;
          *(_QWORD *)&v49 = v4;
          *((_QWORD *)&v49 + 1) = v5;
          v50 = 1;
        }
        v51 = 0;
        v39 = v8;
        v46 = 0;
        v47 = 0;
        v40 = v20;
        v41 = v22;
        v42 = v21;
        LOBYTE(v43[0]) = 0;
        v44 = 0;
        if (v23)
        {
          v25 = v48;
          v48 = 0u;
          v49 = 0u;
          v43[0] = v25;
          v43[1] = v3;
          v43[2] = v4;
          v43[3] = v5;
          v44 = 1;
        }
        v27 = v8 < 2 && v21 == 0;
        v28 = *(_QWORD *)(v9 + 16);
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (v29)
            v28 = v29 - 96;
          else
            v28 = 0;
        }
        if (*(_BYTE *)(v28 + 274))
        {
          __break(0xC471u);
          JUMPOUT(0x1952AEB7CLL);
        }
        WebCore::PaymentCoordinator::completePaymentSession(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 336) + 8) + 24) + 8) + 1240), &v39);
        a3[1] = 0;
        a3[2] = 0;
        *a3 = 0;
        if (v27)
          v31 = 8;
        else
          v31 = 1;
        *(_DWORD *)(v9 + 56) = v31;
        *((_BYTE *)a3 + 16) = 0;
        std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v43, v30);
        if (v42)
        {
          v33 = v40;
          v34 = 8 * v42;
          do
          {
            v35 = *(_QWORD *)v33;
            *(_QWORD *)v33 = 0;
            if (v35)
            {
              if (*(_DWORD *)(v35 + 8) == 1)
              {
                v36 = *(WTF::StringImpl **)(v35 + 16);
                *(_QWORD *)(v35 + 16) = 0;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 2)
                    WTF::StringImpl::destroy(v36, v32);
                  else
                    *(_DWORD *)v36 -= 2;
                }
                WTF::fastFree((WTF *)v35, v32);
              }
              else
              {
                --*(_DWORD *)(v35 + 8);
              }
            }
            v33 = (WTF *)((char *)v33 + 8);
            v34 -= 8;
          }
          while (v34);
        }
        v37 = v40;
        if (v40)
        {
          v40 = 0;
          v41 = 0;
          WTF::fastFree(v37, v32);
        }
        v12 = 0;
        break;
      default:
        LOBYTE(v45) = 12;
        v12 = 1;
        v51 = 1;
        v46 = 0;
        *(_BYTE *)a3 = 12;
        a3[1] = 0;
        *((_BYTE *)a3 + 16) = 1;
        break;
    }
    return ((uint64_t (*)(unsigned __int16 *, WTF **))off_1E33521E0[v12])(&v39, &v45);
  }
  else
  {
    *(_BYTE *)a3 = 12;
    a3[1] = 0;
    *((_BYTE *)a3 + 16) = 1;
  }
  return result;
}

void WebCore::ApplePaySession::completeShippingMethodSelection(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  char v13[8];
  __int128 v14;
  __int128 v15;
  _BYTE v16[24];
  uint64_t v17;
  __int16 v18;
  __int128 v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;

  v13[0] = 1;
  v14 = 0u;
  LOBYTE(v15) = 0;
  *((_QWORD *)&v15 + 1) = 0x7FF8000000000000;
  v16[0] = 1;
  *(_DWORD *)&v16[4] = 1;
  *(int64x2_t *)&v16[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  v17 = 0;
  v18 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v20 = 0;
  v19 = 0u;
  v30 = 0u;
  if (((_DWORD)a2 - 1) >= 7)
  {
    if ((_DWORD)a2)
    {
      *(_BYTE *)a5 = 12;
      *(_QWORD *)(a5 + 8) = 0;
      *(_BYTE *)(a5 + 16) = 1;
    }
    else
    {
      v13[0] = *(_BYTE *)a3;
      v8 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v9 = *(_OWORD *)(a3 + 24);
      v14 = v8;
      v15 = v9;
      *(_OWORD *)v16 = *(_OWORD *)(a3 + 40);
      v10 = *(_QWORD *)(a3 + 56);
      v11 = *(_QWORD *)(a3 + 64);
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)&v16[16] = v10;
      v17 = v11;
      v18 = *(_WORD *)(a3 + 72);
      *(_QWORD *)&v19 = *a4;
      *(_QWORD *)&v9 = a4[1];
      *a4 = 0;
      a4[1] = 0;
      *((_QWORD *)&v19 + 1) = v9;
      WebCore::ApplePaySession::completeShippingMethodSelection(a1, (uint64_t)v13, a5);
      v12 = (WTF *)v30;
      if (HIDWORD(v30))
      {
        WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v30, (WTF::StringImpl *)(v30 + 104 * HIDWORD(v30)));
        v12 = (WTF *)v30;
      }
      if (v12)
      {
        *(_QWORD *)&v30 = 0;
        DWORD2(v30) = 0;
        WTF::fastFree(v12, a2);
      }
    }
    goto LABEL_8;
  }
  *(_DWORD *)(a1 + 56) = 6;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v6 = v7 - 96;
    else
      v6 = 0;
  }
  if (!*(_BYTE *)(v6 + 274))
  {
    WebCore::PaymentCoordinator::cancelPaymentSession(*(WebCore::PaymentCoordinator **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 336) + 8) + 24)
                                                                                                  + 8)
                                                                                      + 1240));
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
LABEL_8:
    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v13, a2);
    return;
  }
  __break(0xC471u);
}

void WebCore::ApplePaySession::completeShippingContactSelection(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v11;
  __int16 v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39[8];
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  __int128 v42;
  _BYTE v43[24];
  WTF::StringImpl *v44;
  __int16 v45;
  WTF *v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  __int128 v58;
  __int128 v59;

  v39[0] = 1;
  v40 = 0;
  v41 = 0;
  LOBYTE(v42) = 0;
  *((_QWORD *)&v42 + 1) = 0x7FF8000000000000;
  v43[0] = 1;
  *(_DWORD *)&v43[4] = 1;
  *(int64x2_t *)&v43[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  v44 = 0;
  v45 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v58 = 0u;
  v59 = 0u;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  switch((int)a2)
  {
    case 0:
      goto LABEL_27;
    case 1:
    case 5:
    case 6:
    case 7:
      goto LABEL_7;
    case 2:
      v11 = 0;
      v12 = 0;
      v13 = 2;
      goto LABEL_7;
    case 3:
      v12 = 1;
      v11 = 4;
      goto LABEL_6;
    case 4:
      v11 = 0;
      v12 = 0;
LABEL_6:
      v13 = 1;
LABEL_7:
      v14 = v11 | (v12 << 8);
      v15 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v15 + 8) = 1;
      *(_QWORD *)v15 = off_1E334CCA0;
      *(_BYTE *)(v15 + 12) = v13;
      *(_WORD *)(v15 + 13) = v14;
      *(_QWORD *)(v15 + 16) = 0;
      *(_WORD *)(v15 + 24) = 0;
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      ++*(_DWORD *)(v15 + 8);
      *v16 = v15;
      if (HIDWORD(v58))
      {
        v17 = (uint64_t *)v58;
        v18 = 8 * HIDWORD(v58);
        do
        {
          v19 = *v17;
          *v17 = 0;
          if (v19)
          {
            if (*(_DWORD *)(v19 + 8) == 1)
            {
              v20 = *(WTF::StringImpl **)(v19 + 16);
              *(_QWORD *)(v19 + 16) = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, a2);
                else
                  *(_DWORD *)v20 -= 2;
              }
              WTF::fastFree((WTF *)v19, a2);
            }
            else
            {
              --*(_DWORD *)(v19 + 8);
            }
          }
          ++v17;
          v18 -= 8;
        }
        while (v18);
      }
      if ((_QWORD)v58)
        WTF::fastFree((WTF *)v58, a2);
      *(_QWORD *)&v58 = v16;
      *((_QWORD *)&v58 + 1) = 0x100000001;
      if (*(_DWORD *)(v15 + 8) == 1)
      {
        v38 = *(WTF::StringImpl **)(v15 + 16);
        *(_QWORD *)(v15 + 16) = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, a2);
          else
            *(_DWORD *)v38 -= 2;
        }
        WTF::fastFree((WTF *)v15, a2);
      }
      else
      {
        --*(_DWORD *)(v15 + 8);
      }
      v21 = (WTF *)v59;
      if (HIDWORD(v59))
        WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v59, (WTF::StringImpl *)(v59 + 104 * HIDWORD(v59)));
      if ((_QWORD)v59)
      {
        *(_QWORD *)&v59 = 0;
        WTF::fastFree(v21, a2);
      }
LABEL_27:
      v22 = *((_DWORD *)a3 + 3);
      DWORD2(v59) = *((_DWORD *)a3 + 2);
      v23 = *a3;
      *a3 = 0;
      a3[1] = 0;
      HIDWORD(v59) = v22;
      v39[0] = *(_BYTE *)a4;
      v24 = *(WTF::StringImpl **)(a4 + 8);
      *(_QWORD *)(a4 + 8) = 0;
      v25 = v40;
      *(_QWORD *)&v59 = v23;
      v40 = v24;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, a2);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = *(WTF::StringImpl **)(a4 + 16);
      *(_QWORD *)(a4 + 16) = 0;
      v27 = v41;
      v41 = v26;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, a2);
        else
          *(_DWORD *)v27 -= 2;
      }
      v42 = *(_OWORD *)(a4 + 24);
      *(_OWORD *)v43 = *(_OWORD *)(a4 + 40);
      v28 = *(_QWORD *)(a4 + 56);
      v29 = *(WTF::StringImpl **)(a4 + 64);
      *(_QWORD *)(a4 + 64) = 0;
      v30 = v44;
      *(_QWORD *)&v43[16] = v28;
      v44 = v29;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, a2);
        else
          *(_DWORD *)v30 -= 2;
      }
      v45 = *(_WORD *)(a4 + 72);
      v31 = v46;
      if (HIDWORD(v47))
      {
        v32 = 80 * HIDWORD(v47);
        v33 = (WTF::StringImpl **)((char *)v46 + 64);
        do
        {
          v34 = *v33;
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, a2);
            else
              *(_DWORD *)v34 -= 2;
          }
          v35 = *(v33 - 6);
          *(v33 - 6) = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, a2);
            else
              *(_DWORD *)v35 -= 2;
          }
          v36 = *(v33 - 7);
          *(v33 - 7) = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, a2);
            else
              *(_DWORD *)v36 -= 2;
          }
          v33 += 10;
          v32 -= 80;
        }
        while (v32);
        v31 = v46;
      }
      if (v31)
        WTF::fastFree(v31, a2);
      v46 = *(WTF **)a5;
      v37 = *(_QWORD *)(a5 + 8);
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      v47 = v37;
      WebCore::ApplePaySession::completeShippingContactSelection(a1, (uint64_t)v39, a6);
      break;
    default:
      *(_BYTE *)a6 = 12;
      *(_QWORD *)(a6 + 8) = 0;
      *(_BYTE *)(a6 + 16) = 0;
      break;
  }
  WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)v39, a2);
}

WTF *WebCore::ApplePaySession::completePayment@<X0>(WebCore::ApplePaySession *this@<X0>, unsigned __int16 a2@<W1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *result;
  unsigned __int16 v10;
  WTF *v11;
  uint64_t v12;
  _BYTE v13[40];

  v13[32] = 0;
  v11 = 0;
  v12 = 0;
  v13[0] = 0;
  v10 = a2;
  WebCore::ApplePaySession::completePayment((uint64_t)this, &v10, a3);
  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v3);
  if (HIDWORD(v12))
  {
    v5 = v11;
    v6 = 8 * HIDWORD(v12);
    do
    {
      v7 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 8) == 1)
        {
          v8 = *(WTF::StringImpl **)(v7 + 16);
          *(_QWORD *)(v7 + 16) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v4);
            else
              *(_DWORD *)v8 -= 2;
          }
          WTF::fastFree((WTF *)v7, v4);
        }
        else
        {
          --*(_DWORD *)(v7 + 8);
        }
      }
      v5 = (WTF *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  result = v11;
  if (v11)
  {
    v11 = 0;
    LODWORD(v12) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

uint64_t WebCore::ApplePaySession::version(WebCore::ApplePaySession *this)
{
  return *((unsigned int *)this + 240);
}

WTF *WebCore::ApplePaySession::validateMerchant(WTF *result, uint64_t *a2)
{
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  if (*((_DWORD *)result + 14) != 9 && *a2 != 0)
  {
    v4 = result;
    *((_DWORD *)result + 15) = 1;
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
      v6 = WebCore::threadGlobalDataSlow(result);
    v7 = *(_QWORD *)(v6 + 40);
    if (!v7)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
      v7 = *(_QWORD *)(v6 + 40);
    }
    v8 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
    *(_QWORD *)(v8 + 8) = 0;
    v10 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x30200 | (*(_QWORD *)(v7 + 2232) != 0);
    *(_DWORD *)(v8 + 16) = 1;
    *(_DWORD *)(v8 + 20) = v10;
    v11 = *(_DWORD **)(v7 + 2232);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(v8 + 24) = v11;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 56) = v9;
    *(_QWORD *)(v8 + 64) = 0;
    *(_QWORD *)v8 = off_1E3351F88;
    v12 = *a2;
    *a2 = 0;
    *(_QWORD *)(v8 + 72) = v12;
    v13 = *(_DWORD *)(v8 + 80) & 0xFFFFFFFE | a2[1] & 1;
    *(_DWORD *)(v8 + 80) = v13;
    v14 = v13 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
    *(_DWORD *)(v8 + 80) = v14;
    v15 = v14 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
    *(_DWORD *)(v8 + 80) = v15;
    v16 = v15 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
    *(_DWORD *)(v8 + 80) = v16;
    *(_DWORD *)(v8 + 80) = a2[1] & 0xFFFFFFC0 | v16 & 0x3F;
    *(_OWORD *)(v8 + 84) = *(_OWORD *)((char *)a2 + 12);
    *(_QWORD *)(v8 + 100) = *(uint64_t *)((char *)a2 + 28);
    *(_DWORD *)(v8 + 108) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 2) &= ~1u;
    result = WebCore::EventTarget::dispatchEvent((WTF *)((char *)v4 + 32), (WebCore::Event *)v8);
    if (*(_DWORD *)(v8 + 16) == 1)
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    else
      --*(_DWORD *)(v8 + 16);
  }
  return result;
}

WTF *WebCore::ApplePaySession::didAuthorizePayment(WebCore::ApplePaySession *this, const WebCore::Payment *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  WTF *result;

  *((_DWORD *)this + 14) = 7;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(this);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = *((unsigned int *)this + 240);
  v8 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  *(_QWORD *)(v8 + 8) = 0;
  v10 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x10200 | (*(_QWORD *)(v6 + 1440) != 0);
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = v10;
  v11 = *(_DWORD **)(v6 + 1440);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 24) = v11;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)v8 = off_1E3351C28;
  (*(void (**)(const WebCore::Payment *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v7);
  result = WebCore::EventTarget::dispatchEvent((WebCore::ApplePaySession *)((char *)this + 32), (WebCore::Event *)v8);
  if (*(_DWORD *)(v8 + 16) == 1)
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  --*(_DWORD *)(v8 + 16);
  return result;
}

void WebCore::ApplePaySession::didSelectShippingMethod(WebCore::EventNames **a1, uint64_t a2)
{
  WebCore::EventNames **v3;
  unint64_t StatusReg;
  uint64_t v5;
  WebCore::EventNames **v6;
  WebCore::EventNames *v7;
  WebCore::EventNames *v8;
  WebCore::EventNames *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::EventTarget *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[616];
  WTF *v34;
  int v35;
  unsigned int v36;
  char v37;

  v3 = a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5 || (v6 = *(WebCore::EventNames ***)(v5 + 96)) == 0)
  {
    a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v6 = a1;
  }
  v7 = v6[5];
  if (!v7)
  {
    a1 = WebCore::ThreadGlobalData::initializeEventNames(v6);
    v7 = v6[5];
  }
  v8 = v3[6];
  if (((unint64_t)v8 & 0x1000000000000) != 0
    && (v14 = (unint64_t)v8 & 0xFFFFFFFFFFFFLL, v15 = *(unsigned int *)(v14 + 28), (_DWORD)v15))
  {
    v16 = (WebCore::EventTarget *)(v3 + 4);
    v17 = *(_QWORD **)(v14 + 16);
    v18 = *((_QWORD *)v7 + 229);
    v19 = 32 * v15;
    while (*v17 != v18)
    {
      v17 += 4;
      v19 -= 32;
      if (!v19)
        goto LABEL_7;
    }
    *((_DWORD *)v3 + 14) = 2;
    v20 = *(_QWORD *)(StatusReg + 736);
    if (!v20 || (v21 = *(_QWORD *)(v20 + 96)) == 0)
      v21 = WebCore::threadGlobalDataSlow((WebCore *)a1);
    v22 = *(_QWORD *)(v21 + 40);
    if (!v22)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v21);
      v22 = *(_QWORD *)(v21 + 40);
    }
    v23 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v23);
    *(_QWORD *)(v23 + 8) = 0;
    *(_DWORD *)(v23 + 16) = 1;
    *(_DWORD *)(v23 + 20) = *(_DWORD *)(v23 + 20) & 0xFFC00000 | 0x28200 | (*(_QWORD *)(v22 + 1832) != 0);
    v25 = *(_DWORD **)(v22 + 1832);
    if (v25)
      *v25 += 2;
    *(_QWORD *)(v23 + 24) = v25;
    *(_QWORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 40) = 0;
    *(_QWORD *)(v23 + 48) = 0;
    *(_QWORD *)(v23 + 56) = v24;
    *(_QWORD *)(v23 + 64) = 0;
    *(_QWORD *)v23 = off_1E3351EC0;
    v26 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v26 += 2;
    *(_QWORD *)(v23 + 72) = v26;
    v27 = *(_DWORD **)(a2 + 8);
    if (v27)
      *v27 += 2;
    *(_QWORD *)(v23 + 80) = v27;
    v28 = *(_DWORD **)(a2 + 16);
    if (v28)
      *v28 += 2;
    *(_QWORD *)(v23 + 88) = v28;
    v29 = *(_DWORD **)(a2 + 24);
    if (v29)
      *v29 += 2;
    *(_QWORD *)(v23 + 96) = v29;
    *(_OWORD *)(v23 + 104) = *(_OWORD *)(a2 + 32);
    v30 = *(_OWORD *)(a2 + 48);
    v31 = *(_OWORD *)(a2 + 64);
    v32 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(v23 + 165) = *(_QWORD *)(a2 + 93);
    *(_OWORD *)(v23 + 152) = v32;
    *(_OWORD *)(v23 + 136) = v31;
    *(_OWORD *)(v23 + 120) = v30;
    WebCore::EventTarget::dispatchEvent(v16, (WebCore::Event *)v23);
    if (*(_DWORD *)(v23 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    else
      --*(_DWORD *)(v23 + 16);
  }
  else
  {
LABEL_7:
    v9 = v3[2];
    if (v9)
    {
      v10 = *((_QWORD *)v9 + 1);
      if (v10)
        v9 = (WebCore::EventNames *)(v10 - 96);
      else
        v9 = 0;
    }
    if (*((_BYTE *)v9 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x1952AF77CLL);
    }
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 42) + 8) + 24) + 8) + 1240);
    v33[0] = 0;
    v37 = 0;
    WebCore::PaymentCoordinator::completeShippingMethodSelection(v11, (uint64_t)v33);
    if (v37)
    {
      if (v36)
        WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(v34, (WTF *)((char *)v34 + 104 * v36));
      v13 = v34;
      if (v34)
      {
        v34 = 0;
        v35 = 0;
        WTF::fastFree(v13, v12);
      }
      WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v33, v12);
    }
  }
}

void WebCore::ApplePaySession::didSelectShippingContact(WebCore::EventNames **this, const WebCore::PaymentContact *a2)
{
  WebCore::EventNames **v3;
  unint64_t StatusReg;
  uint64_t v5;
  WebCore::ApplePaySession *v6;
  uint64_t v7;
  unint64_t v8;
  WebCore::EventNames *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::EventTarget *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _BYTE v26[648];
  char v27;

  v3 = this;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5 || (v6 = *(WebCore::ApplePaySession **)(v5 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v6 = (WebCore::ApplePaySession *)this;
  }
  v7 = *((_QWORD *)v6 + 5);
  if (!v7)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *((_QWORD *)v6 + 5);
  }
  v8 = (unint64_t)v3[6];
  if ((v8 & 0x1000000000000) != 0 && (v13 = v8 & 0xFFFFFFFFFFFFLL, v14 = *(unsigned int *)(v13 + 28), (_DWORD)v14))
  {
    v15 = (WebCore::EventTarget *)(v3 + 4);
    v16 = *(_QWORD **)(v13 + 16);
    v17 = *(_QWORD *)(v7 + 1824);
    v18 = 32 * v14;
    while (*v16 != v17)
    {
      v16 += 4;
      v18 -= 32;
      if (!v18)
        goto LABEL_7;
    }
    *((_DWORD *)v3 + 14) = 3;
    v19 = *(_QWORD *)(StatusReg + 736);
    if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
      v20 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v21 = *(_QWORD *)(v20 + 40);
    if (!v21)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
      v21 = *(_QWORD *)(v20 + 40);
    }
    v22 = *((unsigned int *)v3 + 240);
    v23 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v23);
    *(_QWORD *)(v23 + 8) = 0;
    *(_DWORD *)(v23 + 16) = 1;
    *(_DWORD *)(v23 + 20) = *(_DWORD *)(v23 + 20) & 0xFFC00000 | 0x20200 | (*(_QWORD *)(v21 + 1824) != 0);
    v25 = *(_DWORD **)(v21 + 1824);
    if (v25)
      *v25 += 2;
    *(_QWORD *)(v23 + 40) = 0;
    *(_QWORD *)(v23 + 48) = 0;
    *(_QWORD *)(v23 + 24) = v25;
    *(_QWORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 56) = v24;
    *(_QWORD *)(v23 + 64) = 0;
    *(_QWORD *)v23 = off_1E3351DF8;
    (*(void (**)(const WebCore::PaymentContact *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v22);
    WebCore::EventTarget::dispatchEvent(v15, (WebCore::Event *)v23);
    if (*(_DWORD *)(v23 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    else
      --*(_DWORD *)(v23 + 16);
  }
  else
  {
LABEL_7:
    v9 = v3[2];
    if (v9)
    {
      v10 = *((_QWORD *)v9 + 1);
      if (v10)
        v9 = (WebCore::EventNames *)(v10 - 96);
      else
        v9 = 0;
    }
    if (*((_BYTE *)v9 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x1952AF9ACLL);
    }
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 42) + 8) + 24) + 8) + 1240);
    v26[0] = 0;
    v27 = 0;
    WebCore::PaymentCoordinator::completeShippingContactSelection(v11, (uint64_t)v26);
    if (v27)
      WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)v26, v12);
  }
}

void WebCore::ApplePaySession::didSelectPaymentMethod(WebCore::EventNames **this, const WebCore::PaymentMethod *a2)
{
  WebCore::EventNames **v3;
  unint64_t StatusReg;
  uint64_t v5;
  WebCore::ApplePaySession *v6;
  uint64_t v7;
  unint64_t v8;
  WebCore::EventNames *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::EventTarget *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _BYTE v25[656];
  char v26;

  v3 = this;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5 || (v6 = *(WebCore::ApplePaySession **)(v5 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v6 = (WebCore::ApplePaySession *)this;
  }
  v7 = *((_QWORD *)v6 + 5);
  if (!v7)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *((_QWORD *)v6 + 5);
  }
  v8 = (unint64_t)v3[6];
  if ((v8 & 0x1000000000000) != 0 && (v13 = v8 & 0xFFFFFFFFFFFFLL, v14 = *(unsigned int *)(v13 + 28), (_DWORD)v14))
  {
    v15 = (WebCore::EventTarget *)(v3 + 4);
    v16 = *(_QWORD **)(v13 + 16);
    v17 = *(_QWORD *)(v7 + 1456);
    v18 = 32 * v14;
    while (*v16 != v17)
    {
      v16 += 4;
      v18 -= 32;
      if (!v18)
        goto LABEL_7;
    }
    *((_DWORD *)v3 + 14) = 4;
    v19 = *(_QWORD *)(StatusReg + 736);
    if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
      v20 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v21 = *(_QWORD *)(v20 + 40);
    if (!v21)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
      v21 = *(_QWORD *)(v20 + 40);
    }
    v22 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v22);
    *(_QWORD *)(v22 + 8) = 0;
    *(_DWORD *)(v22 + 16) = 1;
    *(_DWORD *)(v22 + 20) = *(_DWORD *)(v22 + 20) & 0xFFC00000 | 0x18200 | (*(_QWORD *)(v21 + 1456) != 0);
    v24 = *(_DWORD **)(v21 + 1456);
    if (v24)
      *v24 += 2;
    *(_QWORD *)(v22 + 40) = 0;
    *(_QWORD *)(v22 + 48) = 0;
    *(_QWORD *)(v22 + 24) = v24;
    *(_QWORD *)(v22 + 32) = 0;
    *(_QWORD *)(v22 + 56) = v23;
    *(_QWORD *)(v22 + 64) = 0;
    *(_QWORD *)v22 = off_1E3351D30;
    (*(void (**)(const WebCore::PaymentMethod *))(*(_QWORD *)a2 + 16))(a2);
    WebCore::EventTarget::dispatchEvent(v15, (WebCore::Event *)v22);
    if (*(_DWORD *)(v22 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    else
      --*(_DWORD *)(v22 + 16);
  }
  else
  {
LABEL_7:
    v9 = v3[2];
    if (v9)
    {
      v10 = *((_QWORD *)v9 + 1);
      if (v10)
        v9 = (WebCore::EventNames *)(v10 - 96);
      else
        v9 = 0;
    }
    if (*((_BYTE *)v9 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x1952AFBD4);
    }
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 42) + 8) + 24) + 8) + 1240);
    v25[0] = 0;
    v26 = 0;
    WebCore::PaymentCoordinator::completePaymentMethodSelection(v11, (uint64_t)v25);
    if (v26)
      WebCore::ApplePayPaymentMethodUpdate::~ApplePayPaymentMethodUpdate((WebCore::ApplePayPaymentMethodUpdate *)v25, v12);
  }
}

void WebCore::ApplePaySession::didChangeCouponCode(WebCore::EventNames **a1, uint64_t *a2)
{
  WebCore::EventNames **v3;
  unint64_t StatusReg;
  uint64_t v5;
  WebCore::EventNames **v6;
  WebCore::EventNames *v7;
  WebCore::EventNames *v8;
  WebCore::EventNames *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::EventTarget *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _BYTE v26[648];
  char v27;

  v3 = a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5 || (v6 = *(WebCore::EventNames ***)(v5 + 96)) == 0)
  {
    a1 = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)a1);
    v6 = a1;
  }
  v7 = v6[5];
  if (!v7)
  {
    a1 = WebCore::ThreadGlobalData::initializeEventNames(v6);
    v7 = v6[5];
  }
  v8 = v3[6];
  if (((unint64_t)v8 & 0x1000000000000) != 0
    && (v13 = (unint64_t)v8 & 0xFFFFFFFFFFFFLL, v14 = *(unsigned int *)(v13 + 28), (_DWORD)v14))
  {
    v15 = (WebCore::EventTarget *)(v3 + 4);
    v16 = *(_QWORD **)(v13 + 16);
    v17 = *((_QWORD *)v7 + 67);
    v18 = 32 * v14;
    while (*v16 != v17)
    {
      v16 += 4;
      v18 -= 32;
      if (!v18)
        goto LABEL_7;
    }
    *((_DWORD *)v3 + 14) = 5;
    v19 = *(_QWORD *)(StatusReg + 736);
    if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
      v20 = WebCore::threadGlobalDataSlow((WebCore *)a1);
    v21 = *(_QWORD *)(v20 + 40);
    if (!v21)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
      v21 = *(_QWORD *)(v20 + 40);
    }
    v22 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v22);
    *(_QWORD *)(v22 + 8) = 0;
    *(_DWORD *)(v22 + 16) = 1;
    *(_DWORD *)(v22 + 20) = *(_DWORD *)(v22 + 20) & 0xFFC00000 | 0x38200 | (*(_QWORD *)(v21 + 536) != 0);
    v24 = *(_DWORD **)(v21 + 536);
    if (v24)
      *v24 += 2;
    *(_QWORD *)(v22 + 24) = v24;
    *(_QWORD *)(v22 + 32) = 0;
    *(_QWORD *)(v22 + 40) = 0;
    *(_QWORD *)(v22 + 48) = 0;
    *(_QWORD *)(v22 + 56) = v23;
    *(_QWORD *)(v22 + 64) = 0;
    *(_QWORD *)v22 = off_1E3351B60;
    v25 = *a2;
    *a2 = 0;
    *(_QWORD *)(v22 + 72) = v25;
    WebCore::EventTarget::dispatchEvent(v15, (WebCore::Event *)v22);
    if (*(_DWORD *)(v22 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    else
      --*(_DWORD *)(v22 + 16);
  }
  else
  {
LABEL_7:
    v9 = v3[2];
    if (v9)
    {
      v10 = *((_QWORD *)v9 + 1);
      if (v10)
        v9 = (WebCore::EventNames *)(v10 - 96);
      else
        v9 = 0;
    }
    if (*((_BYTE *)v9 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x1952AFDF4);
    }
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 42) + 8) + 24) + 8) + 1240);
    v26[0] = 0;
    v27 = 0;
    WebCore::PaymentCoordinator::completeCouponCodeChange(v11, (uint64_t)v26);
    if (v27)
      WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)v26, v12);
  }
}

WTF *WebCore::ApplePaySession::didCancelPaymentSession(_DWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  WTF *result;

  a1[14] = 10;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
  *(_QWORD *)(v7 + 8) = 0;
  v9 = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x8200 | (*(_QWORD *)(v6 + 344) != 0);
  *(_DWORD *)(v7 + 16) = 1;
  *(_DWORD *)(v7 + 20) = v9;
  v10 = *(_DWORD **)(v6 + 344);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v7 + 24) = v10;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = v8;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)v7 = off_1E3351A98;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(v7 + 72) = v11;
  result = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(a1 + 8), (WebCore::Event *)v7);
  if (*(_DWORD *)(v7 + 16) == 1)
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  --*(_DWORD *)(v7 + 16);
  return result;
}

uint64_t WebCore::ApplePaySession::stop(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_DWORD *)(this + 56) - 1) <= 6)
  {
    *(_DWORD *)(this + 56) = 9;
    v1 = *(_QWORD *)(this + 16);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 8);
      if (v2)
        v1 = v2 - 96;
      else
        v1 = 0;
    }
    if (*(_BYTE *)(v1 + 274))
    {
      this = 96;
      __break(0xC471u);
    }
    else
    {
      return WebCore::PaymentCoordinator::abortPaymentSession(*(char ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 336) + 8)
                                                                                                + 24)
                                                                                    + 8)
                                                                        + 1240));
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::ApplePaySession::stop(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_DWORD *)(this + 48) - 1) <= 6)
  {
    *(_DWORD *)(this + 48) = 9;
    v1 = *(_QWORD *)(this + 8);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 8);
      if (v2)
        v1 = v2 - 96;
      else
        v1 = 0;
    }
    if (*(_BYTE *)(v1 + 274))
    {
      this = 96;
      __break(0xC471u);
    }
    else
    {
      return WebCore::PaymentCoordinator::abortPaymentSession(*(char ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 336) + 8)
                                                                                                + 24)
                                                                                    + 8)
                                                                        + 1240));
    }
  }
  return this;
}

_DWORD *WebCore::ApplePaySession::suspend(_DWORD *result, int a2)
{
  _DWORD *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;

  if (a2 == 2)
  {
    v2 = result;
    if ((result[14] - 8) >= 0xFFFFFFF9)
    {
      v3 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v3 = 1;
      ++*(_DWORD *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 8);
      *((_QWORD *)v3 + 1) = v2;
      v4 = *((_QWORD *)v2 + 2);
      ++*((_QWORD *)v2 + 3);
      v2[14] = 10;
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
          v4 = v5 - 96;
        else
          v4 = 0;
      }
      if (*(_BYTE *)(v4 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x1952B0244);
      }
      v6 = (WebCore *)WebCore::PaymentCoordinator::abortPaymentSession(*(char ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 336) + 8) + 24)
                                                                                             + 8)
                                                                                 + 1240));
      v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
        v8 = WebCore::threadGlobalDataSlow(v6);
      v9 = *(_QWORD *)(v8 + 40);
      if (!v9)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
        v9 = *(_QWORD *)(v8 + 40);
      }
      v10 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
      *(_QWORD *)(v10 + 8) = 0;
      v12 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x8200 | (*(_QWORD *)(v9 + 344) != 0);
      *(_DWORD *)(v10 + 16) = 1;
      *(_DWORD *)(v10 + 20) = v12;
      v13 = *(_DWORD **)(v9 + 344);
      if (v13)
        *v13 += 2;
      *(_QWORD *)(v10 + 24) = v13;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = v11;
      *(_QWORD *)v10 = off_1E3351A98;
      *(_QWORD *)(v10 + 64) = 0;
      *(_QWORD *)(v10 + 72) = 0;
      v17 = (_DWORD *)v10;
      WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v2 + 1, (uint64_t)(v2 + 8), 20, (uint64_t *)&v17);
      result = v17;
      if (v17)
      {
        if (v17[4] == 1)
          result = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v17 + 8))();
        else
          --v17[4];
      }
      if (*(_DWORD *)v3 == 1)
      {
        v15 = (char *)*((_QWORD *)v3 + 1);
        --*((_QWORD *)v15 + 3);
        *((_QWORD *)v3 + 1) = 0;
        v16 = *(_QWORD *)(*(_QWORD *)v15 - 24);
        if (*(_DWORD *)&v15[v16 + 8] == 1)
          (*(void (**)(char *))(*(_QWORD *)&v15[v16] + 8))(&v15[v16]);
        else
          --*(_DWORD *)&v15[v16 + 8];
        return (_DWORD *)WTF::fastFree(v3, v14);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
  }
  return result;
}

_DWORD *`non-virtual thunk to'WebCore::ApplePaySession::suspend(uint64_t a1, int a2)
{
  return WebCore::ApplePaySession::suspend((_DWORD *)(a1 - 8), a2);
}

BOOL WebCore::ApplePaySession::virtualHasPendingActivity(WebCore::ApplePaySession *this)
{
  int v1;
  BOOL v2;

  v1 = *((_DWORD *)this + 14);
  if (v1)
    v2 = (v1 - 11) >= 0xFFFFFFFD;
  else
    v2 = 1;
  return !v2;
}

BOOL `non-virtual thunk to'WebCore::ApplePaySession::virtualHasPendingActivity(WebCore::ApplePaySession *this)
{
  int v1;
  BOOL v2;

  v1 = *((_DWORD *)this + 12);
  if (v1)
    v2 = (v1 - 11) >= 0xFFFFFFFD;
  else
    v2 = 1;
  return !v2;
}

void WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest(WebCore::ApplePaySessionPaymentRequest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  uint64_t v5;
  WebCore::ApplePayPaymentTokenContext *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  void *v17;
  unsigned int v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  const void *v22;
  const void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 872))
  {
    if (*((_BYTE *)this + 864))
    {
      v4 = (WTF *)*((_QWORD *)this + 106);
      if (v4)
      {
        *((_QWORD *)this + 106) = 0;
        *((_DWORD *)this + 214) = 0;
        WTF::fastFree(v4, a2);
      }
    }
  }
  if (*((_BYTE *)this + 840))
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)((char *)this + 712), a2);
  if (*((_BYTE *)this + 704))
  {
    v5 = *((unsigned int *)this + 175);
    if ((_DWORD)v5)
    {
      v6 = (WebCore::ApplePayPaymentTokenContext *)*((_QWORD *)this + 86);
      v7 = 40 * v5;
      do
      {
        WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v6, a2);
        v6 = (WebCore::ApplePayPaymentTokenContext *)(v8 + 40);
        v7 -= 40;
      }
      while (v7);
    }
    v9 = (WTF *)*((_QWORD *)this + 86);
    if (v9)
    {
      *((_QWORD *)this + 86) = 0;
      *((_DWORD *)this + 174) = 0;
      WTF::fastFree(v9, a2);
    }
  }
  if (*((_BYTE *)this + 680))
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)((char *)this + 568), a2);
  if (*((_BYTE *)this + 560))
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)((char *)this + 360), a2);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (*((_BYTE *)this + 336))
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePaySessionPaymentRequest *)((char *)this + 240), a2);
  v11 = *((unsigned int *)this + 57);
  if ((_DWORD)v11)
  {
    v26 = (WTF::StringImpl **)*((_QWORD *)this + 27);
    v27 = 8 * v11;
    do
    {
      v28 = *v26;
      *v26 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, a2);
        else
          *(_DWORD *)v28 -= 2;
      }
      ++v26;
      v27 -= 8;
    }
    while (v27);
  }
  v12 = (WTF *)*((_QWORD *)this + 27);
  if (v12)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 28, a2);
  v18 = *((_DWORD *)this + 27);
  if (v18)
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*((WTF::StringImpl **)this + 12), (WTF::StringImpl *)(*((_QWORD *)this + 12) + 104 * v18));
  v19 = (WTF *)*((_QWORD *)this + 12);
  if (v19)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v19, v17);
  }
  v20 = *((unsigned int *)this + 21);
  if ((_DWORD)v20)
  {
    v29 = (WTF::StringImpl **)*((_QWORD *)this + 9);
    v30 = 8 * v20;
    do
    {
      v31 = *v29;
      *v29 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)v31 -= 2;
      }
      ++v29;
      v30 -= 8;
    }
    while (v30);
  }
  v21 = (WTF *)*((_QWORD *)this + 9);
  if (v21)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v21, v17);
  }
  v22 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 7) = &off_1E321E520;
  *((_QWORD *)this + 8) = 0;
  if (v22)
    CFRelease(v22);
  v23 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 4) = &off_1E321E520;
  *((_QWORD *)this + 5) = 0;
  if (v23)
    CFRelease(v23);
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v25 -= 2;
  }
}

WTF::StringImpl *WebCore::ApplePaySetup::getSetupFeatures(uint64_t a1, WebCore::PaymentSession *a2, uint64_t *a3)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20[8];
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  objc_class *v25;

  WebCore::PaymentSession::canCreateSession(a2, (uint64_t)v20);
  if (v22)
  {
    v6 = v21;
    v21 = 0;
    v7 = *a3;
    v25 = 0;
    LOBYTE(v23) = v20[0];
    if (v6)
      *(_DWORD *)v6 += 2;
    v24 = v6;
    WebCore::DeferredPromise::reject(v7, (unsigned __int8 *)&v23, 0, &v25);
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        if (!v6)
          goto LABEL_18;
        goto LABEL_8;
      }
      *(_DWORD *)result -= 2;
    }
    if (v6)
    {
LABEL_8:
      if (*(_DWORD *)v6 != 2)
      {
        *(_DWORD *)v6 -= 2;
        goto LABEL_18;
      }
      result = v6;
LABEL_29:
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
  }
  else
  {
    v10 = *((_QWORD *)a2 + 66);
    if (!v10
      || (v11 = *(_QWORD *)(v10 + 8)) == 0
      || (v12 = *(_QWORD *)(v11 + 24)) == 0
      || (v13 = *(_QWORD *)(v12 + 8)) == 0
      || *(_BYTE *)(a1 + 80))
    {
      v14 = *a3;
      v24 = 0;
      v25 = 0;
      LOBYTE(v23) = 8;
      WebCore::DeferredPromise::reject(v14, (unsigned __int8 *)&v23, 0, &v25);
      result = v24;
      v24 = 0;
      if (!result)
        goto LABEL_18;
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        goto LABEL_18;
      }
      goto LABEL_29;
    }
    v15 = *(_QWORD *)(v13 + 1008);
    if (((v15 & 0x8000000000000000) == 0 || v15 == -1)
      && (*(_QWORD *)(*((_QWORD *)a2 + 85) + 704) & 0x20000000000) != 0)
    {
      v16 = *a3;
      *a3 = 0;
      *(_QWORD *)(a1 + 72) = v16;
      *(_BYTE *)(a1 + 80) = 1;
      v17 = *(uint64_t **)(v13 + 1240);
      v18 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v18 = 1;
      ++*(_DWORD *)(a1 + 24);
      *(_QWORD *)(v18 + 8) = a1;
      ++*(_QWORD *)(a1 + 16);
      v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v19 = &off_1E3352298;
      *((_QWORD *)v19 + 1) = a1;
      *((_QWORD *)v19 + 2) = v18;
      v23 = v19;
      WebCore::PaymentCoordinator::getSetupFeatures(v17, a1 + 32, (uint64_t)a2 + 736, (uint64_t *)&v23);
      result = v23;
      v23 = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      v23 = 0;
      v24 = 0;
      result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePaySetupFeature>>>(*a3, (uint64_t)&v23);
    }
  }
LABEL_18:
  if (v22)
  {
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::ApplePaySetup::begin(uint64_t a1, WebCore::PaymentSession *a2, uint64_t a3, uint64_t *a4)
{
  WTF *Session;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  uint64_t *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char v33[8];
  WTF::StringImpl *v34;
  char v35;
  objc_class *v36;
  WTF::StringImpl *v37;
  objc_class *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  Session = (WTF *)WebCore::PaymentSession::canCreateSession(a2, (uint64_t)v33);
  if (!v35)
  {
    if (WTF::isMainThread(Session))
    {
      {
        if (WebCore::currentToken(void)::token
          && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
          && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
        {
          v16 = a4;
          v32 = a3;
          v17 = *((_QWORD *)a2 + 66);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 8);
            if (v18)
            {
              v19 = *(_QWORD *)(v18 + 24);
              if (v19)
              {
                v20 = *(_QWORD *)(v19 + 8);
                if (v20)
                {
                  ++*(_DWORD *)v20;
                  if (*(_BYTE *)(a1 + 96))
                  {
                    v21 = *v16;
                    v36 = 0;
                    LOBYTE(v39) = 8;
                    v40 = 0;
                    WebCore::DeferredPromise::reject(v21, (unsigned __int8 *)&v39, 0, &v36);
                    result = v40;
                    v40 = 0;
                    if (result)
                    {
                      if (*(_DWORD *)result == 2)
                        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
                      else
                        *(_DWORD *)result -= 2;
                    }
                  }
                  else
                  {
                    v23 = *v16;
                    *v16 = 0;
                    *(_QWORD *)(a1 + 88) = v23;
                    *(_BYTE *)(a1 + 96) = 1;
                    v24 = WTF::fastMalloc((WTF *)0x10);
                    *(_DWORD *)v24 = 1;
                    ++*(_DWORD *)(a1 + 24);
                    *(_QWORD *)(v24 + 8) = a1;
                    ++*(_QWORD *)(a1 + 16);
                    v26 = *(WTF **)(a1 + 104);
                    *(_QWORD *)(a1 + 104) = v24;
                    if (v26)
                    {
                      if (*(_DWORD *)v26 == 1)
                      {
                        v31 = *((_QWORD *)v26 + 1);
                        --*(_QWORD *)(v31 + 16);
                        *((_QWORD *)v26 + 1) = 0;
                        if (*(_DWORD *)(v31 + 24) == 1)
                          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
                        else
                          --*(_DWORD *)(v31 + 24);
                        WTF::fastFree(v26, v25);
                      }
                      else
                      {
                        --*(_DWORD *)v26;
                      }
                    }
                    v27 = *(uint64_t **)(v20 + 1240);
                    v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v28 = off_1E33522C0;
                    *((_QWORD *)v28 + 1) = a1;
                    v39 = v28;
                    WebCore::PaymentCoordinator::beginApplePaySetup(v27, a1 + 32, v20 + 168, v32, (uint64_t *)&v39);
                    result = v39;
                    v39 = 0;
                    if (result)
                      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
                  }
                  if (*(_DWORD *)v20 == 1)
                  {
                    WebCore::Page::~Page(v20);
                    result = (WTF::StringImpl *)WTF::fastFree(v29, v30);
                  }
                  else
                  {
                    --*(_DWORD *)v20;
                  }
                  goto LABEL_21;
                }
              }
            }
          }
          v22 = *v16;
          v36 = 0;
          LOBYTE(v39) = 8;
          v40 = 0;
          WebCore::DeferredPromise::reject(v22, (unsigned __int8 *)&v39, 0, &v36);
          result = v40;
          v40 = 0;
          if (!result)
            goto LABEL_21;
          goto LABEL_19;
        }
      }
      else
      {
        WebCore::currentToken(void)::token = 0;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = *a4;
    LOBYTE(v36) = 12;
    v38 = 0;
    LOBYTE(v39) = 12;
    v14 = v37;
    if (v37)
      *(_DWORD *)v37 += 2;
    v40 = v14;
    WebCore::DeferredPromise::reject(v13, (unsigned __int8 *)&v39, 0, &v38);
    v15 = v40;
    v40 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = v37;
    v37 = 0;
    if (!result)
      goto LABEL_21;
LABEL_19:
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_21;
    }
    goto LABEL_29;
  }
  v9 = v34;
  v34 = 0;
  v10 = *a4;
  v36 = 0;
  LOBYTE(v39) = v33[0];
  if (v9)
    *(_DWORD *)v9 += 2;
  v40 = v9;
  WebCore::DeferredPromise::reject(v10, (unsigned __int8 *)&v39, 0, &v36);
  result = v40;
  v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      if (!v9)
        goto LABEL_21;
      goto LABEL_8;
    }
    *(_DWORD *)result -= 2;
  }
  if (v9)
  {
LABEL_8:
    if (*(_DWORD *)v9 != 2)
    {
      *(_DWORD *)v9 -= 2;
      goto LABEL_21;
    }
    result = v9;
LABEL_29:
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
  }
LABEL_21:
  if (v35)
  {
    result = v34;
    v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::ApplePaySetup::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::ContextDestructionObserver *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ContextDestructionObserver *)WTF::fastMalloc((WTF *)0x70);
  v7 = (uint64_t)v6;
  if (!*(_BYTE *)(a1 + 274))
  {
    v8 = a1 - 192;
    v9 = *(_QWORD *)(a1 + 512);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    a1 = v8 + 192;
  }
  *(_QWORD *)v6 = &off_1E33A18C0;
  *((_QWORD *)v6 + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(v6, (WebCore::ScriptExecutionContext *)a1);
  *(_QWORD *)v7 = &off_1E33A0540;
  *(_QWORD *)(v7 + 16) = 0;
  if (*(_BYTE *)(a1 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x1952B0D74);
  }
  v17 = v7;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 128), &v17, (uint64_t)&v16);
  *(_DWORD *)(v7 + 24) = 1;
  *(_QWORD *)v7 = &off_1E33524C0;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(v7 + 32) = v11;
  v12 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v7 + 40) = v12;
  v13 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 48) = v13;
  v14 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(v7 + 56) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(v7 + 64) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(v7 + 68) = v14;
  *(_BYTE *)(v7 + 72) = 0;
  *(_BYTE *)(v7 + 80) = 0;
  *(_BYTE *)(v7 + 88) = 0;
  *(_BYTE *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 104) = 0;
  *a3 = v7;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v7);
}

uint64_t WebCore::ApplePaySetup::stop(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  unsigned __int8 v13[8];
  WTF::StringImpl *v14;
  objc_class *v15;

  v2 = this;
  if (*(_BYTE *)(this + 80))
  {
    v3 = *(_DWORD **)(this + 72);
    *(_QWORD *)(this + 72) = 0;
    *(_BYTE *)(this + 80) = 0;
    v14 = 0;
    v15 = 0;
    v13[0] = 16;
    WebCore::DeferredPromise::reject((uint64_t)v3, v13, 0, &v15);
    this = (uint64_t)v14;
    v14 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        if (!v3)
          goto LABEL_8;
        goto LABEL_6;
      }
      *(_DWORD *)this -= 2;
    }
    if (!v3)
      goto LABEL_8;
LABEL_6:
    if (v3[4] == 1)
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
LABEL_8:
  if (!*(_BYTE *)(v2 + 96))
    goto LABEL_15;
  v4 = *(_DWORD **)(v2 + 88);
  *(_QWORD *)(v2 + 88) = 0;
  *(_BYTE *)(v2 + 96) = 0;
  v14 = 0;
  v15 = 0;
  v13[0] = 16;
  WebCore::DeferredPromise::reject((uint64_t)v4, v13, 0, &v15);
  this = (uint64_t)v14;
  v14 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
      if (!v4)
        goto LABEL_15;
      goto LABEL_13;
    }
    *(_DWORD *)this -= 2;
  }
  if (!v4)
    goto LABEL_15;
LABEL_13:
  if (v4[4] == 1)
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[4];
LABEL_15:
  v5 = *(_QWORD *)(v2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v5 = v6 - 96;
    else
      v5 = 0;
  }
  if (*(_BYTE *)(v5 + 274))
  {
    this = 96;
    __break(0xC471u);
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 336);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
            this = WebCore::PaymentCoordinator::endApplePaySetup(*(WebCore::PaymentCoordinator **)(v10 + 1240));
        }
      }
    }
    v11 = *(WTF **)(v2 + 104);
    *(_QWORD *)(v2 + 104) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        v12 = *((_QWORD *)v11 + 1);
        --*(_QWORD *)(v12 + 16);
        *((_QWORD *)v11 + 1) = 0;
        if (*(_DWORD *)(v12 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        else
          --*(_DWORD *)(v12 + 24);
        return WTF::fastFree(v11, a2);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
  }
  return this;
}

void WebCore::ApplePayShippingContactSelectedEvent::~ApplePayShippingContactSelectedEvent(WebCore::ApplePayShippingContactSelectedEvent *this, WTF::StringImpl *a2)
{
  void *v3;

  WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayShippingContactSelectedEvent *)((char *)this + 72), a2);
  WebCore::Event::~Event(this, v3);
}

{
  void *v3;
  bmalloc::api *v4;
  void *v5;

  WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayShippingContactSelectedEvent *)((char *)this + 72), a2);
  WebCore::Event::~Event(this, v3);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::ApplePayShippingMethodSelectedEvent::~ApplePayShippingMethodSelectedEvent(WebCore::ApplePayShippingMethodSelectedEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ApplePayShippingMethodSelectedEvent::~ApplePayShippingMethodSelectedEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::ApplePayValidateMerchantEvent::~ApplePayValidateMerchantEvent(WebCore::ApplePayValidateMerchantEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

_QWORD *WebCore::ApplePaySession::ref(_QWORD *this)
{
  ++*(_DWORD *)((char *)this + *(_QWORD *)(*this - 24) + 8);
  return this;
}

_QWORD *WebCore::ApplePaySession::deref(_QWORD *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*this - 24);
  if (*(_DWORD *)((char *)this + v1 + 8) == 1)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)((char *)this + v1) + 8))((uint64_t)this + v1);
  --*(_DWORD *)((char *)this + v1 + 8);
  return this;
}

uint64_t WebCore::ApplePaySession::eventTargetInterface(WebCore::ApplePaySession *this)
{
  return 1;
}

_QWORD *WebCore::ApplePaySession::refEventTarget(_QWORD *this)
{
  ++*(_DWORD *)((char *)this + *(_QWORD *)(*this - 24) + 8);
  return this;
}

_QWORD *WebCore::ApplePaySession::derefEventTarget(_QWORD *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*this - 24);
  if (*(_DWORD *)((char *)this + v1 + 8) == 1)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)((char *)this + v1) + 8))((uint64_t)this + v1);
  --*(_DWORD *)((char *)this + v1 + 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::ApplePaySession::ref(uint64_t this)
{
  ++*(_DWORD *)(this + *(_QWORD *)(*(_QWORD *)(this - 8) - 24));
  return this;
}

uint64_t `non-virtual thunk to'WebCore::ApplePaySession::deref(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(this - 8) - 24);
  if (*(_DWORD *)(this + v1) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 8 + v1) + 8))(this - 8 + v1);
  --*(_DWORD *)(this + v1);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::ApplePaySession::eventTargetInterface(WebCore::ApplePaySession *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::ApplePaySession::scriptExecutionContext(WebCore::ApplePaySession *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::ApplePaySession::refEventTarget(WebCore::ApplePaySession *this)
{
  uint64_t result;
  uint64_t v2;

  v2 = *((_QWORD *)this - 4);
  result = (uint64_t)this - 32;
  ++*(_DWORD *)(*(_QWORD *)(v2 - 24) + result + 8);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::ApplePaySession::derefEventTarget(WebCore::ApplePaySession *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this - 4);
  result = (uint64_t)this - 32;
  v3 = *(_QWORD *)(v2 - 24);
  if (*(_DWORD *)(result + v3 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + v3) + 8))(result + v3);
  --*(_DWORD *)(result + v3 + 8);
  return result;
}

void WebCore::ApplePaySetup::~ApplePaySetup(WebCore::ApplePaySetup *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ApplePaySetup::~ApplePaySetup(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v3;
  _DWORD *v4;
  _DWORD *v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E33524C0;
  v3 = (WTF *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v7 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  if (*((_BYTE *)this + 96))
  {
    v4 = (_DWORD *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v4)
    {
      if (v4[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      else
        --v4[4];
    }
  }
  if (*((_BYTE *)this + 80))
  {
    v5 = (_DWORD *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v5)
    {
      if (v5[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
      else
        --v5[4];
    }
  }
  WebCore::ApplePaySetupConfiguration::~ApplePaySetupConfiguration((WebCore::ApplePaySetup *)((char *)this + 32), (WTF::StringImpl *)a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v6);
}

uint64_t WebCore::ApplePaySetup::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::ApplePaySetup::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

void std::__optional_storage_base<WebCore::ApplePayInstallmentConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplePayInstallmentConfiguration,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96))
  {
    if (*(_BYTE *)(a1 + 96))
      WebCore::ApplePayInstallmentConfiguration::operator=(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 96))
  {
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)a1, (WTF::StringImpl *)a2);
    *(_BYTE *)(v2 + 96) = 0;
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 16) = v4;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a1 + 32) = v6;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v7 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a1 + 48) = v7;
    v8 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = v8;
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a1 + 64) = v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 0;
    *(_DWORD *)(a1 + 72) = v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(a2 + 76) = 0;
    *(_DWORD *)(a1 + 76) = v9;
    v10 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a1 + 80) = v10;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_BYTE *)(a1 + 96) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31PaymentInstallmentConfigurationENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayInstallmentConfiguration *this)
{
  if (*((_BYTE *)this + 96))
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31PaymentInstallmentConfigurationENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore29ApplePaySessionPaymentRequest20MerchantCapabilitiesENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::convertAndValidateTotal(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  _BOOL4 v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[8];
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 + 4);
    result = WebCore::isValidDecimalMonetaryValue(*(unsigned __int16 **)(v4 + 8), v5 | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32));
    if ((result & 1) != 0)
    {
LABEL_3:
      result = WebCore::PaymentRequestValidator::validateTotal(a2, (uint64_t)v14);
      v7 = v16;
      if (v16)
      {
        v8 = v15;
        *(_BYTE *)a1 = v14[0];
        *(_QWORD *)(a1 + 8) = v8;
        v7 = 1;
      }
      else
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v12 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 64) = v12;
        v13 = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_OWORD *)(a1 + 8) = v13;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_QWORD *)(a2 + 64) = 0;
        *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      }
      *(_DWORD *)(a1 + 80) = v7;
      return result;
    }
    *(_DWORD *)v4 += 2;
    if ((v5 & 0x80000000) != 0)
      goto LABEL_22;
  }
  else
  {
    result = WebCore::isValidDecimalMonetaryValue(0, 0x100000000);
    if ((result & 1) != 0)
      goto LABEL_3;
    LODWORD(v5) = 0;
  }
  if (__OFADD__((_DWORD)v5, 24) || (result = (v5 + 25), __OFADD__(v5 + 24, 1)))
  {
LABEL_22:
    v17 = 0;
LABEL_23:
    __break(0xC471u);
    return result;
  }
  v9 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v9, (int8x16_t *)"\"", 1u, v4, (int8x16_t *)"\" is not a valid amount.", 0x18u, &v17);
  v11 = v17;
  if (!v17)
    goto LABEL_23;
  *(_BYTE *)a1 = 33;
  *(_QWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 80) = 1;
  v17 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v4, v10);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ApplePaySessionPaymentRequest::setTotal(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  WTF::StringImpl *result;

  *(_BYTE *)(a1 + 128) = *(_BYTE *)a2;
  v4 = *(_DWORD **)(a2 + 8);
  if (v4)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_DWORD **)(a2 + 16);
  if (v6)
    *v6 += 2;
  v7 = *(WTF::StringImpl **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_OWORD *)(a2 + 24);
  v9 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 152) = v8;
  v10 = *(_DWORD **)(a2 + 64);
  if (v10)
    *v10 += 2;
  result = *(WTF::StringImpl **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v10;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 72);
  return result;
}

unsigned int *WebCore::convertAndValidate(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  __int128 v12;
  WTF::StringImpl *v13;
  __int16 v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int16 *v26;
  __int16 *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  __int128 v30;
  __int128 v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  char v37;
  _BOOL4 v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  char v41;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  __int16 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[8];
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  __int16 v64;
  unsigned int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v55 = 0;
  v56 = 0;
  if (*((_BYTE *)a2 + 16))
  {
    v4 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v4)
    {
      if (v4 >= 0x3333334)
      {
        __break(0xC471u);
      }
      else
      {
        v5 = 80 * v4;
        v6 = WTF::fastMalloc((WTF *)(80 * v4));
        LODWORD(v4) = (v5 & 0xFFFFFFF0) / 0x50;
        LODWORD(v56) = v4;
        v55 = v6;
        if (*((_BYTE *)a2 + 16))
        {
          v7 = *((_DWORD *)a2 + 3);
          if (!v7)
            goto LABEL_78;
          v8 = *a2;
          v43 = (uint64_t)&(*a2)[80 * v7];
          while (1)
          {
            v9 = *v8;
            v10 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
            if (v10)
              *(_DWORD *)v10 += 2;
            v11 = *((_QWORD *)v8 + 2);
            if (v11)
              *(_DWORD *)v11 += 2;
            v12 = *(_OWORD *)(v8 + 40);
            v52 = *(_OWORD *)(v8 + 24);
            v53 = v12;
            v13 = (WTF::StringImpl *)*((_QWORD *)v8 + 8);
            v54 = *((_QWORD *)v8 + 7);
            if (v13)
              *(_DWORD *)v13 += 2;
            v14 = *((_WORD *)v8 + 36);
            if (!v9)
              break;
            if (v11)
            {
              v15 = *(unsigned int *)(v11 + 4);
              if (WebCore::isValidDecimalMonetaryValue(*(unsigned __int16 **)(v11 + 8), v15 | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32)))
              {
                v16 = (WTF::StringImpl *)v11;
LABEL_22:
                v11 = 0;
                v57[0] = v9;
                v60 = v52;
                v61 = v53;
                v62 = v54;
                v64 = v14;
                v65 = 0;
                v17 = v13;
                v18 = v10;
                v13 = 0;
                v10 = 0;
                goto LABEL_23;
              }
              *(_DWORD *)v11 += 2;
              if ((v15 & 0x80000000) != 0)
                goto LABEL_83;
            }
            else
            {
              LODWORD(v15) = 0;
            }
            if (__OFADD__((_DWORD)v15, 24) || __OFADD__(v15 + 24, 1))
              goto LABEL_83;
            v38 = !v11 || (*(_BYTE *)(v11 + 16) & 4) != 0;
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v15 + 25), v38, (int8x16_t *)"\"", 1u, v11, (int8x16_t *)"\" is not a valid amount.", 0x18u, &v44);
            v40 = v44;
            if (!v44)
              goto LABEL_84;
            v57[0] = 33;
            v58 = v44;
            v65 = 1;
            v44 = 0;
            if (!v11)
              goto LABEL_48;
            if (*(_DWORD *)v11 != 2)
            {
              *(_DWORD *)v11 -= 2;
LABEL_48:
              v41 = 33;
LABEL_49:
              v37 = 0;
              v58 = 0;
              *(_BYTE *)a1 = v41;
              *(_QWORD *)(a1 + 8) = v40;
              v36 = 1;
              *(_DWORD *)(a1 + 16) = 1;
LABEL_50:
              ((void (*)(WTF::StringImpl **, char *))off_1E3352180[v36])(&v44, v57);
              goto LABEL_51;
            }
            WTF::StringImpl::destroy((WTF::StringImpl *)v11, v39);
            if (v65 == 1)
            {
              v41 = v57[0];
              v40 = v58;
              goto LABEL_49;
            }
            if (v65)
              goto LABEL_82;
            LOBYTE(v9) = v57[0];
            v18 = v58;
            v16 = v59;
            v17 = v63;
            v14 = v64;
LABEL_23:
            LOBYTE(v44) = v9;
            v58 = 0;
            v59 = 0;
            v45 = v18;
            v46 = v16;
            v47 = v60;
            v48 = v61;
            v49 = v62;
            v63 = 0;
            v50 = v17;
            v51 = v14;
            if (HIDWORD(v56) == (_DWORD)v56)
            {
              v19 = WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v55, HIDWORD(v56) + 1, (unint64_t)&v44);
              v20 = v55 + 80 * HIDWORD(v56);
              *(_BYTE *)v20 = *v19;
              v21 = *((_QWORD *)v19 + 1);
              *((_QWORD *)v19 + 1) = 0;
              *(_QWORD *)(v20 + 8) = v21;
              v22 = *((_QWORD *)v19 + 2);
              *((_QWORD *)v19 + 2) = 0;
              *(_QWORD *)(v20 + 16) = v22;
              v23 = *((_QWORD *)v19 + 7);
              v24 = *(_OWORD *)(v19 + 40);
              *(_OWORD *)(v20 + 24) = *(_OWORD *)(v19 + 24);
              *(_OWORD *)(v20 + 40) = v24;
              *(_QWORD *)(v20 + 56) = v23;
              v25 = *((_QWORD *)v19 + 8);
              *((_QWORD *)v19 + 8) = 0;
              *(_QWORD *)(v20 + 64) = v25;
              v26 = (__int16 *)(v20 + 72);
              v27 = (__int16 *)(v19 + 72);
            }
            else
            {
              v28 = v55 + 80 * HIDWORD(v56);
              *(_BYTE *)v28 = v9;
              v45 = 0;
              *(_QWORD *)(v28 + 8) = v18;
              v29 = v46;
              v46 = 0;
              *(_QWORD *)(v28 + 16) = v29;
              v30 = v47;
              v31 = v48;
              *(_QWORD *)(v28 + 56) = v49;
              *(_OWORD *)(v28 + 40) = v31;
              *(_OWORD *)(v28 + 24) = v30;
              v32 = v50;
              v50 = 0;
              *(_QWORD *)(v28 + 64) = v32;
              v26 = (__int16 *)(v28 + 72);
              v27 = &v51;
            }
            *v26 = *v27;
            ++HIDWORD(v56);
            v33 = v50;
            v50 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2)
                WTF::StringImpl::destroy(v33, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v33 -= 2;
            }
            v34 = v46;
            v46 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v34 -= 2;
            }
            v35 = v45;
            v45 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = v65;
            v37 = 1;
            if (v65 != -1)
              goto LABEL_50;
LABEL_51:
            if (!v13)
              goto LABEL_54;
            if (*(_DWORD *)v13 != 2)
            {
              *(_DWORD *)v13 -= 2;
LABEL_54:
              if (v11)
                goto LABEL_55;
              goto LABEL_57;
            }
            WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
            if (v11)
            {
LABEL_55:
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v11 -= 2;
            }
LABEL_57:
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v10 -= 2;
            }
            if ((v37 & 1) == 0)
              return WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v55, (WTF::StringImpl *)a2);
            v8 += 80;
            if (v8 == (unsigned __int8 *)v43)
            {
              v6 = v55;
              LODWORD(v4) = v56;
              v7 = HIDWORD(v56);
              goto LABEL_78;
            }
          }
          v16 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
          if (*MEMORY[0x1E0CBF6F0])
            *(_DWORD *)v16 += 2;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v11 -= 2;
          }
          goto LABEL_22;
        }
        std::__throw_bad_optional_access[abi:sn180100]();
LABEL_82:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_83:
        v44 = 0;
LABEL_84:
        __break(0xC471u);
      }
      JUMPOUT(0x1952B1C60);
    }
    v7 = 0;
    v6 = 0;
LABEL_78:
    v55 = 0;
    v56 = 0;
    *(_QWORD *)a1 = v6;
    *(_DWORD *)(a1 + 8) = v4;
  }
  else
  {
    v7 = 0;
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  *(_DWORD *)(a1 + 12) = v7;
  *(_DWORD *)(a1 + 16) = 0;
  return WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v55, (WTF::StringImpl *)a2);
}

WTF *WebCore::convertAndValidate(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  int v5;
  WTF *result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _BOOL4 v30;
  char *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  char v43;
  WTF::StringImpl *v44[2];
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];
  WTF *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[21];
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v52 = 0;
  v3 = *(_DWORD *)(a2 + 12);
  if (!v3)
  {
    result = 0;
    v8 = 0;
    goto LABEL_53;
  }
  if (v3 >= 0x2762763)
  {
    __break(0xC471u);
    goto LABEL_61;
  }
  v5 = 104 * v3;
  result = (WTF *)WTF::fastMalloc((WTF *)(104 * v3));
  LODWORD(v52) = (v5 & 0xFFFFFFF8) / 0x68;
  v51 = result;
  v7 = *(_DWORD *)(a2 + 12);
  HIDWORD(v8) = 0;
  if (!v7)
  {
    LODWORD(v8) = (v5 & 0xFFFFFFF8) / 0x68;
    goto LABEL_53;
  }
  v9 = *(_QWORD *)a2 + 16;
  v10 = 104 * v7;
  while (1)
  {
    v11 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
      break;
    if (!WebCore::isValidDecimalMonetaryValue(0, 0x100000000))
    {
      LODWORD(v12) = 0;
      goto LABEL_11;
    }
LABEL_7:
    v14 = *(_OWORD *)(v9 - 16);
    v15 = 0uLL;
    v16 = *(WTF::StringImpl **)(v9 + 8);
    *(_OWORD *)(v9 - 16) = 0u;
    *(_OWORD *)v9 = 0u;
    v17 = *(_OWORD *)(v9 + 32);
    v18 = *(_OWORD *)(v9 + 48);
    v19 = *(_OWORD *)(v9 + 64);
    *(_QWORD *)&v58[13] = *(_QWORD *)(v9 + 77);
    v57 = v18;
    *(_OWORD *)v58 = v19;
    v56 = v17;
    v55 = *(_OWORD *)(v9 + 16);
    v59 = 0;
LABEL_8:
    *(_OWORD *)v44 = v14;
    v53 = v15;
    v54 = v15;
    v45 = (WTF::StringImpl *)v11;
    v46 = v16;
    v49 = v57;
    v50[0] = *(_OWORD *)v58;
    *(_QWORD *)((char *)v50 + 13) = *(_QWORD *)&v58[13];
    v47 = v55;
    v48 = v56;
    v20 = HIDWORD(v52);
    if (HIDWORD(v52) == (_DWORD)v52)
    {
      v21 = WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v51, HIDWORD(v52) + 1, (unint64_t)v44);
      v20 = HIDWORD(v52);
      v22 = (char *)v51 + 104 * HIDWORD(v52);
      v23 = *(_QWORD *)v21;
      *(_QWORD *)v21 = 0;
      *(_QWORD *)v22 = v23;
      v24 = *((_QWORD *)v21 + 1);
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v22 + 1) = v24;
      v25 = *((_QWORD *)v21 + 2);
      *((_QWORD *)v21 + 2) = 0;
      *((_QWORD *)v22 + 2) = v25;
      v26 = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v22 + 3) = v26;
      *((_OWORD *)v22 + 2) = *((_OWORD *)v21 + 2);
      v27 = *(_QWORD *)(v21 + 93);
      v29 = *((_OWORD *)v21 + 4);
      v28 = *((_OWORD *)v21 + 5);
      *((_OWORD *)v22 + 3) = *((_OWORD *)v21 + 3);
      *((_OWORD *)v22 + 4) = v29;
      *((_OWORD *)v22 + 5) = v28;
      *(_QWORD *)(v22 + 93) = v27;
    }
    else
    {
      v31 = (char *)v51 + 104 * HIDWORD(v52);
      v44[0] = 0;
      *(_QWORD *)v31 = v14;
      v32 = v44[1];
      v44[1] = 0;
      *((_QWORD *)v31 + 1) = v32;
      v33 = v45;
      v45 = 0;
      *((_QWORD *)v31 + 2) = v33;
      v34 = v46;
      v46 = 0;
      *((_QWORD *)v31 + 3) = v34;
      v35 = v48;
      v36 = v49;
      v37 = v50[0];
      *(_QWORD *)(v31 + 93) = *(_QWORD *)((char *)v50 + 13);
      *((_OWORD *)v31 + 4) = v36;
      *((_OWORD *)v31 + 5) = v37;
      *((_OWORD *)v31 + 3) = v35;
      *((_OWORD *)v31 + 2) = v47;
    }
    HIDWORD(v52) = v20 + 1;
    v38 = v46;
    v46 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v13);
      else
        *(_DWORD *)v38 -= 2;
    }
    v39 = v45;
    v45 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v13);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = v44[1];
    v44[1] = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v13);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = v44[0];
    v44[0] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v13);
      else
        *(_DWORD *)v41 -= 2;
    }
    if (v59 != -1)
      ((void (*)(WTF::StringImpl **, __int128 *))off_1E3352100[v59])(v44, &v53);
    v9 += 104;
    v10 -= 104;
    if (!v10)
    {
      result = v51;
      v8 = v52;
LABEL_53:
      *(_QWORD *)a1 = result;
      *(_QWORD *)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 16) = 0;
      return result;
    }
  }
  v12 = *(unsigned int *)(v11 + 4);
  if (WebCore::isValidDecimalMonetaryValue(*(unsigned __int16 **)(v11 + 8), v12 | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32)))
  {
    goto LABEL_7;
  }
  *(_DWORD *)v11 += 2;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_58;
LABEL_11:
  if (__OFADD__((_DWORD)v12, 24) || __OFADD__(v12 + 24, 1))
    goto LABEL_58;
  v30 = !v11 || (*(_BYTE *)(v11 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v12 + 25), v30, (int8x16_t *)"\"", 1u, v11, (int8x16_t *)"\" is not a valid amount.", 0x18u, v44);
  v42 = v44[0];
  if (!v44[0])
    goto LABEL_59;
  LOBYTE(v53) = 33;
  *((WTF::StringImpl **)&v53 + 1) = v44[0];
  v59 = 1;
  v44[0] = 0;
  if (!v11)
    goto LABEL_46;
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v11, v13);
    if (!v59)
    {
      v14 = v53;
      v16 = (WTF::StringImpl *)*((_QWORD *)&v54 + 1);
      v11 = v54;
      v15 = 0uLL;
      goto LABEL_8;
    }
    if (v59 == 1)
    {
      v43 = v53;
      v42 = (WTF::StringImpl *)*((_QWORD *)&v53 + 1);
      goto LABEL_47;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_58:
    v44[0] = 0;
LABEL_59:
    __break(0xC471u);
LABEL_61:
    JUMPOUT(0x1952B20C4);
  }
  *(_DWORD *)v11 -= 2;
LABEL_46:
  v43 = 33;
LABEL_47:
  *(_BYTE *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v42;
  *(_DWORD *)(a1 + 16) = 1;
  result = v51;
  if (HIDWORD(v52))
  {
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(v51, (WTF *)((char *)v51 + 104 * HIDWORD(v52)));
    result = v51;
  }
  if (result)
  {
    v51 = 0;
    LODWORD(v52) = 0;
    return (WTF *)WTF::fastFree(result, v13);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int *result;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  __int128 v26;
  __int128 v27;
  _DWORD *v28;
  char v29;

  if (a2 == a1)
    return a1;
  v4 = a1[3];
  v5 = a2[3];
  if (v4 > v5)
  {
    v6 = 80 * v4 - 80 * v5;
    v7 = (WTF::StringImpl **)(*(_QWORD *)a1 + 80 * v5 + 64);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(v7 - 6);
      *(v7 - 6) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *(v7 - 7);
      *(v7 - 7) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v7 += 10;
      v6 -= 80;
    }
    while (v6);
    a1[3] = v5;
    goto LABEL_25;
  }
  if (v5 <= a1[2]
    || (result = WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0), v12 = a2[3], a1[2] >= v12))
  {
LABEL_25:
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::ApplePayLineItem const*,WebCore::ApplePayLineItem const*,WebCore::ApplePayLineItem*>((uint64_t)&v29, *(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 80 * a1[3]), *(_QWORD *)a1);
    v18 = a1[3];
    v19 = a2[3];
    if ((_DWORD)v18 != v19)
    {
      v20 = *(_QWORD *)a2 + 80 * v19;
      v21 = 5 * v18;
      v22 = *(_QWORD *)a1 + 80 * v18;
      v23 = *(_QWORD *)a2 + 16 * v21;
      do
      {
        *(_BYTE *)v22 = *(_BYTE *)v23;
        v24 = *(_DWORD **)(v23 + 8);
        if (v24)
          *v24 += 2;
        *(_QWORD *)(v22 + 8) = v24;
        v25 = *(_DWORD **)(v23 + 16);
        if (v25)
          *v25 += 2;
        *(_QWORD *)(v22 + 16) = v25;
        v26 = *(_OWORD *)(v23 + 24);
        v27 = *(_OWORD *)(v23 + 40);
        *(_QWORD *)(v22 + 56) = *(_QWORD *)(v23 + 56);
        *(_OWORD *)(v22 + 40) = v27;
        *(_OWORD *)(v22 + 24) = v26;
        v28 = *(_DWORD **)(v23 + 64);
        if (v28)
          *v28 += 2;
        *(_QWORD *)(v22 + 64) = v28;
        *(_WORD *)(v22 + 72) = *(_WORD *)(v23 + 72);
        v23 += 80;
        v22 += 80;
      }
      while (v23 != v20);
      LODWORD(v18) = a2[3];
    }
    a1[3] = v18;
    return a1;
  }
  if (v12 < 0x3333334)
  {
    v13 = *(WTF::StringImpl **)a1;
    v14 = (WTF::StringImpl *)(*(_QWORD *)a1 + 80 * a1[3]);
    v15 = 80 * v12;
    v16 = WTF::fastMalloc((WTF *)(80 * v12));
    a1[2] = (v15 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)a1 = v16;
    WTF::VectorMover<false,WebCore::ApplePayLineItem>::move(v13, v14, v16);
    if (v13)
    {
      if (*(WTF::StringImpl **)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        a1[2] = 0;
      }
      WTF::fastFree(v13, v17);
    }
    goto LABEL_25;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, WTF *this)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;

  if (result[2] > (unint64_t)this)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > (unint64_t)this)
    {
      v5 = 80 * v4 - 80 * (_QWORD)this;
      v6 = (WTF::StringImpl **)(*(_QWORD *)result + 80 * (_QWORD)this + 64);
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, this);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = *(v6 - 6);
        *(v6 - 6) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, this);
          else
            *(_DWORD *)v8 -= 2;
        }
        result = (unsigned int *)*(v6 - 7);
        *(v6 - 7) = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, this);
          else
            *result -= 2;
        }
        v6 += 10;
        v5 -= 80;
      }
      while (v5);
      v3[3] = this;
      LODWORD(v4) = (_DWORD)this;
    }
    v9 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if ((unint64_t)this >= 0x3333334)
      {
        __break(0xC471u);
        return result;
      }
      v10 = (WTF *)(80 * (_QWORD)this);
      result = (unsigned int *)WTF::fastMalloc(v10);
      v3[2] = (v10 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v9)
        result = (unsigned int *)WTF::VectorMover<false,WebCore::ApplePayLineItem>::move(v9, (WTF::StringImpl *)((char *)v9 + 80 * v4), (uint64_t)result);
    }
    if (v9)
    {
      if (*(WTF::StringImpl **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v9, this);
    }
  }
  return result;
}

WTF::StringImpl *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::ApplePayLineItem const*,WebCore::ApplePayLineItem const*,WebCore::ApplePayLineItem*>(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl *a3, uint64_t a4)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  __int128 v12;
  _DWORD *v13;
  WTF::StringImpl *v14;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_BYTE *)a4 = *(_BYTE *)v5;
    v7 = (_DWORD *)*((_QWORD *)v5 + 1);
    if (v7)
      *v7 += 2;
    v8 = *(WTF::StringImpl **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = (_DWORD *)*((_QWORD *)v5 + 2);
    if (v9)
      *v9 += 2;
    v10 = *(WTF::StringImpl **)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(_OWORD *)((char *)v5 + 24);
    v12 = *(_OWORD *)((char *)v5 + 40);
    *(_QWORD *)(a4 + 56) = *((_QWORD *)v5 + 7);
    *(_OWORD *)(a4 + 40) = v12;
    *(_OWORD *)(a4 + 24) = v11;
    v13 = (_DWORD *)*((_QWORD *)v5 + 8);
    if (v13)
      *v13 += 2;
    v14 = *(WTF::StringImpl **)(a4 + 64);
    *(_QWORD *)(a4 + 64) = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, a2);
      else
        *(_DWORD *)v14 -= 2;
    }
    *(_WORD *)(a4 + 72) = *((_WORD *)v5 + 36);
    a4 += 80;
    v5 = (WTF::StringImpl *)((char *)v5 + 80);
  }
  while (v5 != v6);
  return v6;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22ApplePayShippingMethodENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22ApplePayShippingMethodENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v2 = result;
  if (a2 == (_DWORD *)result)
    return v2;
  v4 = *(_DWORD *)(result + 12);
  v5 = a2[3];
  if (v4 > v5)
  {
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 104 * v5), (WTF::StringImpl *)(*(_QWORD *)result + 104 * v4));
    *(_DWORD *)(v2 + 12) = v5;
LABEL_17:
    v13 = *(_QWORD *)a2;
    v14 = *(_QWORD *)v2;
    if (v5)
    {
      v15 = 104 * v5;
      do
      {
        WebCore::ApplePayShippingMethod::operator=(v14, v13);
        v13 += 104;
        v14 += 104;
        v15 -= 104;
      }
      while (v15);
      v13 = *(_QWORD *)a2;
      v16 = *(_DWORD *)(v2 + 12);
      v14 = *(_QWORD *)v2;
    }
    else
    {
      v16 = 0;
    }
    v17 = a2[3];
    if (v16 != v17)
    {
      v18 = v13 + 104 * v17;
      v19 = v14 + 104 * v16;
      v20 = v13 + 104 * v16;
      do
      {
        v21 = *(_DWORD **)v20;
        if (*(_QWORD *)v20)
          *v21 += 2;
        *(_QWORD *)v19 = v21;
        v22 = *(_DWORD **)(v20 + 8);
        if (v22)
          *v22 += 2;
        *(_QWORD *)(v19 + 8) = v22;
        v23 = *(_DWORD **)(v20 + 16);
        if (v23)
          *v23 += 2;
        *(_QWORD *)(v19 + 16) = v23;
        v24 = *(_DWORD **)(v20 + 24);
        if (v24)
          *v24 += 2;
        *(_QWORD *)(v19 + 24) = v24;
        *(_OWORD *)(v19 + 32) = *(_OWORD *)(v20 + 32);
        v25 = *(_OWORD *)(v20 + 48);
        v26 = *(_OWORD *)(v20 + 64);
        v27 = *(_OWORD *)(v20 + 80);
        *(_QWORD *)(v19 + 93) = *(_QWORD *)(v20 + 93);
        *(_OWORD *)(v19 + 64) = v26;
        *(_OWORD *)(v19 + 80) = v27;
        *(_OWORD *)(v19 + 48) = v25;
        v20 += 104;
        v19 += 104;
      }
      while (v20 != v18);
      v16 = a2[3];
    }
    *(_DWORD *)(v2 + 12) = v16;
    return v2;
  }
  v6 = *(_DWORD *)(result + 8);
  if (v5 <= v6)
    goto LABEL_16;
  if (v6)
  {
    if (v4)
    {
      WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*(WTF::StringImpl **)result, (WTF::StringImpl *)(*(_QWORD *)result + 104 * v4));
      *(_DWORD *)(v2 + 12) = 0;
    }
    result = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  v7 = a2[3];
  if (*(_DWORD *)(v2 + 8) >= v7)
  {
LABEL_16:
    v5 = *(_DWORD *)(v2 + 12);
    goto LABEL_17;
  }
  if (v7 < 0x2762763)
  {
    v8 = *(WTF::StringImpl **)v2;
    v9 = (WTF::StringImpl *)(*(_QWORD *)v2 + 104 * *(unsigned int *)(v2 + 12));
    v10 = 104 * v7;
    v11 = WTF::fastMalloc((WTF *)(104 * v7));
    *(_DWORD *)(v2 + 8) = (v10 & 0xFFFFFFF8) / 0x68;
    *(_QWORD *)v2 = v11;
    WTF::VectorMover<false,WebCore::ApplePayShippingMethod>::move(v8, v9, v11);
    if (v8)
    {
      if (*(WTF::StringImpl **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v8, v12);
    }
    goto LABEL_16;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ApplePayShippingMethod::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_DWORD **)(a2 + 8);
  if (v6)
    *v6 += 2;
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_DWORD **)(a2 + 16);
  if (v8)
    *v8 += 2;
  v9 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(_DWORD **)(a2 + 24);
  if (v10)
    *v10 += 2;
  v11 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 48);
  v13 = *(_OWORD *)(a2 + 64);
  v14 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 93) = *(_QWORD *)(a2 + 93);
  *(_OWORD *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 80) = v14;
  *(_OWORD *)(a1 + 48) = v12;
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore22ApplePayShippingMethodELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  WTF *result;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 104 * v3));
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore22ApplePayShippingMethodELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__optional_storage_base<WebCore::ApplePayRecurringPaymentRequest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplePayRecurringPaymentRequest,false>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(unsigned __int8 *)(a1 + 200) == *((unsigned __int8 *)a2 + 200))
  {
    if (*(_BYTE *)(a1 + 200))
      WebCore::ApplePayRecurringPaymentRequest::operator=(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 200))
  {
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)a1, a2);
    *(_BYTE *)(v2 + 200) = 0;
  }
  else
  {
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v3;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v4 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)(a1 + 16) = v4;
    v5 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *((_OWORD *)a2 + 2);
    v7 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v7;
    v8 = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = 0;
    *(_QWORD *)(a1 + 72) = v8;
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    *(_BYTE *)(a1 + 88) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    if (*((_BYTE *)a2 + 168))
    {
      *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
      v9 = *((_QWORD *)a2 + 12);
      *((_QWORD *)a2 + 12) = 0;
      *(_QWORD *)(a1 + 96) = v9;
      v10 = *((_QWORD *)a2 + 13);
      *((_QWORD *)a2 + 13) = 0;
      *(_QWORD *)(a1 + 104) = v10;
      v11 = *((_OWORD *)a2 + 7);
      v12 = *((_OWORD *)a2 + 8);
      *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 128) = v12;
      v13 = *((_QWORD *)a2 + 19);
      *((_QWORD *)a2 + 19) = 0;
      *(_QWORD *)(a1 + 152) = v13;
      *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
      *(_BYTE *)(a1 + 168) = 1;
    }
    v14 = *((_QWORD *)a2 + 22);
    *((_QWORD *)a2 + 22) = 0;
    *(_QWORD *)(a1 + 176) = v14;
    v15 = *((_QWORD *)a2 + 23);
    *((_QWORD *)a2 + 23) = 0;
    *(_QWORD *)(a1 + 184) = v15;
    v16 = *((_QWORD *)a2 + 24);
    *((_QWORD *)a2 + 24) = 0;
    *(_QWORD *)(a1 + 192) = v16;
    *(_BYTE *)(a1 + 200) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31ApplePayRecurringPaymentRequestENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayRecurringPaymentRequest *this)
{
  WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31ApplePayRecurringPaymentRequestENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore37ApplePayAutomaticReloadPaymentRequestENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayAutomaticReloadPaymentRequest *this)
{
  WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore37ApplePayAutomaticReloadPaymentRequestENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27ApplePayPaymentTokenContextENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayPaymentTokenContext *this)
{
  WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27ApplePayPaymentTokenContextENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore27ApplePayPaymentTokenContextELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ApplePayPaymentTokenContext *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::ApplePayPaymentTokenContext **)a2;
    v5 = 40 * v3;
    do
    {
      WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v4, a2);
      v4 = (WebCore::ApplePayPaymentTokenContext *)(v6 + 40);
      v5 -= 40;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore27ApplePayPaymentTokenContextELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30ApplePayDeferredPaymentRequestENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayDeferredPaymentRequest *this)
{
  WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30ApplePayDeferredPaymentRequestENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16ApplePayLineItemELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, unsigned int *a2)
{
  return WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2, (WTF::StringImpl *)a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16ApplePayLineItemELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ApplePayLineItemENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ApplePayLineItemENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore29ApplePaySessionPaymentRequestENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePaySessionPaymentRequest *this)
{
  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore29ApplePaySessionPaymentRequestENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::ApplePaySessionPaymentRequest *WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest(WebCore::ApplePaySessionPaymentRequest *this, const WebCore::ApplePaySessionPaymentRequest *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  const void *v7;
  int v8;
  const void *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  __int128 v33;
  __int128 v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  __int128 v38;
  __int128 v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  char v43;
  _DWORD *v44;
  WTF *v45;
  void *v46;
  _DWORD *v47;
  _QWORD *v49;
  uint64_t v50;
  _DWORD **v51;
  uint64_t v52;
  _DWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _DWORD **v56;
  uint64_t v57;
  _DWORD *v58;

  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 1) = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 2) = v5;
  v6 = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
  *((_DWORD *)this + 6) = v6;
  v7 = (const void *)*((_QWORD *)a2 + 5);
  *((_QWORD *)this + 4) = &off_1E321E520;
  *((_QWORD *)this + 5) = v7;
  if (v7)
    CFRetain(v7);
  v8 = *((_DWORD *)a2 + 12);
  *((_BYTE *)this + 52) = *((_BYTE *)a2 + 52);
  *((_DWORD *)this + 12) = v8;
  v9 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)this + 7) = &off_1E321E520;
  *((_QWORD *)this + 8) = v9;
  if (v9)
    CFRetain(v9);
  v10 = *((unsigned int *)a2 + 21);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 21) = v10;
  if ((_DWORD)v10)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1952B32E4);
    }
    v49 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)this + 20) = v10;
    *((_QWORD *)this + 9) = v49;
    v50 = *((unsigned int *)a2 + 21);
    if ((_DWORD)v50)
    {
      v51 = (_DWORD **)*((_QWORD *)a2 + 9);
      v52 = 8 * v50;
      do
      {
        v53 = *v51;
        if (*v51)
          *v53 += 2;
        *v49++ = v53;
        ++v51;
        v52 -= 8;
      }
      while (v52);
    }
  }
  v11 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 46) = *((_WORD *)a2 + 46);
  *((_DWORD *)this + 22) = v11;
  v12 = *((_DWORD *)a2 + 27);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 27) = v12;
  if (v12)
  {
    if (v12 >= 0x2762763)
      goto LABEL_79;
    v13 = 104 * v12;
    v14 = WTF::fastMalloc((WTF *)(104 * v12));
    *((_DWORD *)this + 26) = (v13 & 0xFFFFFFF8) / 0x68;
    *((_QWORD *)this + 12) = v14;
    v15 = *((_DWORD *)a2 + 27);
    if (v15)
    {
      v16 = *((_QWORD *)a2 + 12);
      v17 = v16 + 104 * v15;
      do
      {
        v18 = *(_DWORD **)v16;
        if (*(_QWORD *)v16)
          *v18 += 2;
        *(_QWORD *)v14 = v18;
        v19 = *(_DWORD **)(v16 + 8);
        if (v19)
          *v19 += 2;
        *(_QWORD *)(v14 + 8) = v19;
        v20 = *(_DWORD **)(v16 + 16);
        if (v20)
          *v20 += 2;
        *(_QWORD *)(v14 + 16) = v20;
        v21 = *(_DWORD **)(v16 + 24);
        if (v21)
          *v21 += 2;
        *(_QWORD *)(v14 + 24) = v21;
        *(_OWORD *)(v14 + 32) = *(_OWORD *)(v16 + 32);
        v22 = *(_OWORD *)(v16 + 48);
        v23 = *(_OWORD *)(v16 + 64);
        v24 = *(_OWORD *)(v16 + 80);
        *(_QWORD *)(v14 + 93) = *(_QWORD *)(v16 + 93);
        *(_OWORD *)(v14 + 64) = v23;
        *(_OWORD *)(v14 + 80) = v24;
        *(_OWORD *)(v14 + 48) = v22;
        v16 += 104;
        v14 += 104;
      }
      while (v16 != v17);
    }
  }
  v25 = *((unsigned int *)a2 + 31);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 31) = v25;
  if ((_DWORD)v25)
  {
    if (v25 >= 0x3333334)
    {
      __break(0xC471u);
      JUMPOUT(0x1952B32DCLL);
    }
    v26 = 80 * v25;
    v27 = WTF::fastMalloc((WTF *)(80 * v25));
    *((_DWORD *)this + 30) = (v26 & 0xFFFFFFF0) / 0x50;
    *((_QWORD *)this + 14) = v27;
    v28 = *((_DWORD *)a2 + 31);
    if (v28)
    {
      v29 = *((_QWORD *)a2 + 14);
      v30 = v29 + 80 * v28;
      do
      {
        *(_BYTE *)v27 = *(_BYTE *)v29;
        v31 = *(_DWORD **)(v29 + 8);
        if (v31)
          *v31 += 2;
        *(_QWORD *)(v27 + 8) = v31;
        v32 = *(_DWORD **)(v29 + 16);
        if (v32)
          *v32 += 2;
        *(_QWORD *)(v27 + 16) = v32;
        v33 = *(_OWORD *)(v29 + 24);
        v34 = *(_OWORD *)(v29 + 40);
        *(_QWORD *)(v27 + 56) = *(_QWORD *)(v29 + 56);
        *(_OWORD *)(v27 + 40) = v34;
        *(_OWORD *)(v27 + 24) = v33;
        v35 = *(_DWORD **)(v29 + 64);
        if (v35)
          *v35 += 2;
        *(_QWORD *)(v27 + 64) = v35;
        *(_WORD *)(v27 + 72) = *(_WORD *)(v29 + 72);
        v29 += 80;
        v27 += 80;
      }
      while (v29 != v30);
    }
  }
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  v36 = (_DWORD *)*((_QWORD *)a2 + 17);
  if (v36)
    *v36 += 2;
  *((_QWORD *)this + 17) = v36;
  v37 = (_DWORD *)*((_QWORD *)a2 + 18);
  if (v37)
    *v37 += 2;
  *((_QWORD *)this + 18) = v37;
  v38 = *(_OWORD *)((char *)a2 + 152);
  v39 = *(_OWORD *)((char *)a2 + 168);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *(_OWORD *)((char *)this + 168) = v39;
  *(_OWORD *)((char *)this + 152) = v38;
  v40 = (_DWORD *)*((_QWORD *)a2 + 24);
  if (v40)
    *v40 += 2;
  *((_QWORD *)this + 24) = v40;
  *((_WORD *)this + 100) = *((_WORD *)a2 + 100);
  v41 = (_DWORD *)*((_QWORD *)a2 + 26);
  if (v41)
    *v41 += 2;
  v42 = *((unsigned int *)a2 + 57);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 26) = v41;
  *((_DWORD *)this + 57) = v42;
  if ((_DWORD)v42)
  {
    if (!(v42 >> 29))
    {
      v54 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v42));
      *((_DWORD *)this + 56) = v42;
      *((_QWORD *)this + 27) = v54;
      v55 = *((unsigned int *)a2 + 57);
      if ((_DWORD)v55)
      {
        v56 = (_DWORD **)*((_QWORD *)a2 + 27);
        v57 = 8 * v55;
        do
        {
          v58 = *v56;
          if (*v56)
            *v58 += 2;
          *v54++ = v58;
          ++v56;
          v57 -= 8;
        }
        while (v57);
      }
      goto LABEL_43;
    }
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x1952B32D4);
  }
LABEL_43:
  v43 = *((_BYTE *)a2 + 232);
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 232) = v43;
  *((_BYTE *)this + 336) = 0;
  if (*((_BYTE *)a2 + 336))
  {
    std::construct_at[abi:sn180100]<WebCore::ApplePayInstallmentConfiguration,WebCore::ApplePayInstallmentConfiguration const&,WebCore::ApplePayInstallmentConfiguration*>((uint64_t)this + 240, (uint64_t)a2 + 240);
    *((_BYTE *)this + 336) = 1;
  }
  *((_DWORD *)this + 86) = *((_DWORD *)a2 + 86);
  v44 = (_DWORD *)*((_QWORD *)a2 + 44);
  if (v44)
    *v44 += 2;
  *((_QWORD *)this + 44) = v44;
  *((_BYTE *)this + 360) = 0;
  *((_BYTE *)this + 560) = 0;
  if (*((_BYTE *)a2 + 560))
  {
    WebCore::ApplePayRecurringPaymentRequest::ApplePayRecurringPaymentRequest((uint64_t)this + 360, (uint64_t)a2 + 360);
    *((_BYTE *)this + 560) = 1;
  }
  std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100]((uint64_t)this + 568, (uint64_t)a2 + 568);
  *((_BYTE *)this + 688) = 0;
  *((_BYTE *)this + 704) = 0;
  if (*((_BYTE *)a2 + 704))
  {
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 688, (uint64_t *)a2 + 86);
    *((_BYTE *)this + 704) = 1;
  }
  *((_BYTE *)this + 712) = 0;
  *((_BYTE *)this + 840) = 0;
  if (*((_BYTE *)a2 + 840))
  {
    std::construct_at[abi:sn180100]<WebCore::ApplePayDeferredPaymentRequest,WebCore::ApplePayDeferredPaymentRequest const&,WebCore::ApplePayDeferredPaymentRequest*>((uint64_t)this + 712, (uint64_t)a2 + 712);
    *((_BYTE *)this + 840) = 1;
  }
  *((_BYTE *)this + 848) = 0;
  *((_BYTE *)this + 872) = 0;
  if (*((_BYTE *)a2 + 872))
  {
    *((_BYTE *)this + 864) = 0;
    if (*((_BYTE *)a2 + 864))
    {
      v45 = (WTF *)*((unsigned int *)a2 + 215);
      *((_QWORD *)this + 106) = 0;
      *((_QWORD *)this + 107) = 0;
      *((_DWORD *)this + 215) = (_DWORD)v45;
      if ((_DWORD)v45)
      {
        v46 = (void *)WTF::fastMalloc(v45);
        *((_DWORD *)this + 214) = (_DWORD)v45;
        *((_QWORD *)this + 106) = v46;
        memcpy(v46, *((const void **)a2 + 106), *((unsigned int *)a2 + 215));
      }
      *((_BYTE *)this + 864) = 1;
    }
    *((_BYTE *)this + 872) = 1;
  }
  *((_WORD *)this + 440) = *((_WORD *)a2 + 440);
  v47 = (_DWORD *)*((_QWORD *)a2 + 111);
  if (v47)
    *v47 += 2;
  *((_QWORD *)this + 111) = v47;
  return this;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ApplePayInstallmentConfiguration,WebCore::ApplePayInstallmentConfiguration const&,WebCore::ApplePayInstallmentConfiguration*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;

  if (result)
  {
    v3 = result;
    *(_BYTE *)result = *(_BYTE *)a2;
    v4 = *(_DWORD **)(a2 + 8);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(result + 8) = v4;
    v5 = *(_DWORD **)(a2 + 16);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(result + 16) = v5;
    v6 = *(_DWORD **)(a2 + 24);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(result + 24) = v6;
    v7 = *(_DWORD **)(a2 + 32);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(result + 32) = v7;
    *(_BYTE *)(result + 40) = *(_BYTE *)(a2 + 40);
    v8 = *(_DWORD **)(a2 + 48);
    if (v8)
      *v8 += 2;
    *(_QWORD *)(result + 48) = v8;
    v9 = *(_DWORD **)(a2 + 56);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(result + 56) = v9;
    WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(result + 64, (uint64_t *)(a2 + 64));
    v10 = *(_DWORD **)(a2 + 80);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(v3 + 80) = v10;
    *(_BYTE *)(v3 + 88) = *(_BYTE *)(a2 + 88);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebCore::ApplePayRecurringPaymentRequest::ApplePayRecurringPaymentRequest(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  __int128 v10;
  __int128 v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)result = v2;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_DWORD **)(a2 + 16);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(result + 16) = v3;
  v4 = *(_DWORD **)(a2 + 24);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(result + 24) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(result + 32) = v5;
  *(_OWORD *)(result + 48) = v6;
  v7 = *(_DWORD **)(a2 + 72);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(result + 72) = v7;
  *(_WORD *)(result + 80) = *(_WORD *)(a2 + 80);
  *(_BYTE *)(result + 88) = 0;
  *(_BYTE *)(result + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_BYTE *)(result + 88) = *(_BYTE *)(a2 + 88);
    v8 = *(_DWORD **)(a2 + 96);
    if (v8)
      *v8 += 2;
    *(_QWORD *)(result + 96) = v8;
    v9 = *(_DWORD **)(a2 + 104);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(result + 104) = v9;
    v10 = *(_OWORD *)(a2 + 112);
    v11 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(result + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(result + 112) = v10;
    *(_OWORD *)(result + 128) = v11;
    v12 = *(_DWORD **)(a2 + 152);
    if (v12)
      *v12 += 2;
    *(_QWORD *)(result + 152) = v12;
    *(_WORD *)(result + 160) = *(_WORD *)(a2 + 160);
    *(_BYTE *)(result + 168) = 1;
  }
  v13 = *(_DWORD **)(a2 + 176);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(result + 176) = v13;
  v14 = *(_DWORD **)(a2 + 184);
  if (v14)
    *v14 += 2;
  *(_QWORD *)(result + 184) = v14;
  v15 = *(_DWORD **)(a2 + 192);
  if (v15)
    *v15 += 2;
  *(_QWORD *)(result + 192) = v15;
  return result;
}

uint64_t std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    v2 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v2 += 2;
    *(_QWORD *)result = v2;
    *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
    v3 = *(_DWORD **)(a2 + 16);
    if (v3)
      *v3 += 2;
    *(_QWORD *)(result + 16) = v3;
    v4 = *(_DWORD **)(a2 + 24);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(result + 24) = v4;
    v5 = *(_OWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(result + 32) = v5;
    *(_OWORD *)(result + 48) = v6;
    v7 = *(_DWORD **)(a2 + 72);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(result + 72) = v7;
    *(_WORD *)(result + 80) = *(_WORD *)(a2 + 80);
    v8 = *(_DWORD **)(a2 + 88);
    if (v8)
      *v8 += 2;
    *(_QWORD *)(result + 88) = v8;
    v9 = *(_DWORD **)(a2 + 96);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(result + 96) = v9;
    v10 = *(_DWORD **)(a2 + 104);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(result + 104) = v10;
    *(_BYTE *)(result + 112) = 1;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x6666667)
  {
    v5 = 40 * v3;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = *a2;
      v9 = *a2 + 40 * v7;
      do
      {
        v10 = *(_DWORD **)v8;
        if (*(_QWORD *)v8)
          *v10 += 2;
        *v6 = v10;
        v11 = *(_DWORD **)(v8 + 8);
        if (v11)
          *v11 += 2;
        v6[1] = v11;
        v12 = *(_DWORD **)(v8 + 16);
        if (v12)
          *v12 += 2;
        v6[2] = v12;
        v13 = *(_DWORD **)(v8 + 24);
        if (v13)
          *v13 += 2;
        v6[3] = v13;
        v14 = *(_DWORD **)(v8 + 32);
        if (v14)
          *v14 += 2;
        v6[4] = v14;
        v8 += 40;
        v6 += 5;
      }
      while (v8 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ApplePayDeferredPaymentRequest,WebCore::ApplePayDeferredPaymentRequest const&,WebCore::ApplePayDeferredPaymentRequest*>(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;

  if (result)
  {
    v2 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v2 += 2;
    *(_QWORD *)result = v2;
    *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
    v3 = *(_DWORD **)(a2 + 16);
    if (v3)
      *v3 += 2;
    *(_QWORD *)(result + 16) = v3;
    v4 = *(_DWORD **)(a2 + 24);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(result + 24) = v4;
    v5 = *(_OWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(result + 32) = v5;
    *(_OWORD *)(result + 48) = v6;
    v7 = *(_DWORD **)(a2 + 72);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(result + 72) = v7;
    *(_WORD *)(result + 80) = *(_WORD *)(a2 + 80);
    *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
    v8 = *(_DWORD **)(a2 + 96);
    if (v8)
      *v8 += 2;
    *(_QWORD *)(result + 96) = v8;
    v9 = *(_DWORD **)(a2 + 104);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(result + 104) = v9;
    v10 = *(_DWORD **)(a2 + 112);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(result + 112) = v10;
    v11 = *(_DWORD **)(a2 + 120);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(result + 120) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore28ApplePayShippingMethodUpdateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayDetailsUpdateBase *this)
{
  unsigned int v3;
  WTF *v4;

  v3 = *((_DWORD *)this + 157);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(*((WTF::StringImpl **)this + 77), (WTF::StringImpl *)(*((_QWORD *)this + 77) + 104 * v3));
  v4 = (WTF *)*((_QWORD *)this + 77);
  if (v4)
  {
    *((_QWORD *)this + 77) = 0;
    *((_DWORD *)this + 156) = 0;
    WTF::fastFree(v4, this);
  }
  WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore28ApplePayShippingMethodUpdateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore29ApplePayShippingContactUpdateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayCouponCodeUpdate *this)
{
  WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore29ApplePayShippingContactUpdateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27ApplePayPaymentMethodUpdateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayPaymentMethodUpdate *this)
{
  WebCore::ApplePayPaymentMethodUpdate::~ApplePayPaymentMethodUpdate(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27ApplePayPaymentMethodUpdateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24ApplePayCouponCodeUpdateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ApplePayCouponCodeUpdate *this)
{
  WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24ApplePayCouponCodeUpdateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore34ApplePayPaymentAuthorizationResultENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *result;

  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100](a2 + 24, (WTF::StringImpl *)a2);
  v4 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a2 + 8);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 8) == 1)
        {
          v8 = *(WTF::StringImpl **)(v7 + 16);
          *(_QWORD *)(v7 + 16) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v3);
            else
              *(_DWORD *)v8 -= 2;
          }
          WTF::fastFree((WTF *)v7, v3);
        }
        else
        {
          --*(_DWORD *)(v7 + 8);
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)(a2 + 8);
  if (result)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore34ApplePayPaymentAuthorizationResultENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_BYTE *result, char a2, unsigned int a3, uint64_t a4)
{
  unsigned int v4;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD v20[3];

  v4 = a3;
  v6 = result;
  v7 = 0;
  v20[2] = *MEMORY[0x1E0C80C00];
  v8 = a3;
  do
  {
    ++v7;
    v9 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v9);
  v10 = *(_DWORD *)(a4 + 8);
  if ((v10 | v7) < 0)
    goto LABEL_20;
  v11 = __OFADD__(v7, v10);
  v12 = v7 + v10;
  if (v11)
    goto LABEL_20;
  v13 = (v12 + 1);
  if (__OFADD__(v12, 1))
    goto LABEL_20;
  if (v12 == -1)
  {
    v16 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_18;
  }
  if ((v13 & 0x80000000) != 0)
  {
LABEL_20:
    v16 = 0;
  }
  else
  {
    v14 = *(_BYTE **)a4;
    v15 = *(unsigned int *)(a4 + 8);
    result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
    v16 = v20[0];
    if (v20[0])
    {
      v17 = 0;
      *(_DWORD *)v20[0] = 2;
      *(_DWORD *)(v16 + 4) = v13;
      *(_BYTE *)(v16 + 20) = a2;
      *(_QWORD *)(v16 + 8) = v16 + 20;
      *(_DWORD *)(v16 + 16) = 4;
      v18 = v4;
      do
      {
        *((_BYTE *)&v20[1] + v17-- + 4) = (v18 % 0xA) | 0x30;
        v9 = v18 > 9;
        v18 /= 0xAu;
      }
      while (v9);
      if (v17 + 14 <= 13)
        result = memcpy((void *)(v16 + 21), (char *)&v20[1] + v17 + 5, -v17);
      v19 = 0;
      do
      {
        ++v19;
        v9 = v4 > 9;
        v4 /= 0xAu;
      }
      while (v9);
      if ((_DWORD)v15)
      {
        result = (_BYTE *)(v16 + 21 + v19);
        if ((_DWORD)v15 == 1)
          *result = *v14;
        else
          result = memcpy(result, v14, v15);
      }
    }
  }
LABEL_18:
  *v6 = v16;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, int8x16_t *a5@<X4>, unsigned int a6@<W5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  uint64_t v17;
  unsigned __int128 *v18;
  unsigned __int128 *v19;
  unsigned __int128 v20;
  char v21;
  uint64_t v22;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v22;
        if (v22)
        {
          *(_DWORD *)v22 = 2;
          *(_DWORD *)(v22 + 4) = v11;
          *(_BYTE *)(v22 + 20) = a3;
          *(_QWORD *)(v22 + 8) = v22 + 20;
          *(_DWORD *)(v22 + 16) = 4;
          v14 = (_BYTE *)(v22 + 21);
          if (a4)
          {
            v15 = *(_BYTE **)(a4 + 8);
            v16 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v16)
              {
                if ((_DWORD)v16 == 1)
                  *v14 = *v15;
                else
                  result = (uint64_t)memcpy((void *)(v22 + 21), v15, v16);
              }
            }
            else
            {
              if (v16 < 0x10)
              {
                v18 = (unsigned __int128 *)(v22 + 21);
              }
              else
              {
                v18 = (unsigned __int128 *)&v14[v16 & 0xFFFFFFF0];
                v19 = (unsigned __int128 *)(v22 + 21);
                do
                {
                  v20 = (unsigned __int128)vld2q_s8(v15);
                  v15 += 32;
                  *v19++ = v20;
                }
                while (v19 != v18);
              }
              while (v18 != (unsigned __int128 *)&v14[v16])
              {
                v21 = *v15;
                v15 += 2;
                *(_BYTE *)v18 = v21;
                v18 = (unsigned __int128 *)((char *)v18 + 1);
              }
            }
            v17 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v17 = 0;
          }
          if (a6)
          {
            result = (uint64_t)&v14[v17];
            if (a6 == 1)
              *(_BYTE *)result = a5->i8[0];
            else
              result = (uint64_t)memcpy((void *)result, a5, a6);
          }
        }
        goto LABEL_14;
      }
LABEL_23:
      v13 = 0;
      goto LABEL_14;
    }
LABEL_22:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_14;
  }
  if (!(_DWORD)result)
    goto LABEL_22;
  if (result > 0x7FFFFFEF)
    goto LABEL_23;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v22;
  if (v22)
  {
    *(_DWORD *)v22 = 2;
    *(_DWORD *)(v22 + 4) = v11;
    *(_QWORD *)(v22 + 8) = v22 + 20;
    *(_DWORD *)(v22 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((_WORD *)(v22 + 20), a3, a4, a5, a6);
  }
LABEL_14:
  *a7 = v13;
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_WORD *result, char a2, uint64_t a3, int8x16_t *a4, int a5)
{
  _WORD *v7;
  int8x16_t *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int16 v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int16 v33;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;

  *result = a2;
  v7 = result + 1;
  if (a3)
  {
    v9 = *(int8x16_t **)(a3 + 8);
    v10 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v11 = (char *)&v7[v10];
      if (v10 >= 0x40)
      {
        v12 = (char *)&v7[v10 & 0xFFFFFFC0];
        v14 = 0uLL;
        v15 = (char *)(result + 1);
        do
        {
          v34.val[0] = *v9;
          v16 = v9[1];
          v36.val[0] = v9[2];
          v17 = v9[3];
          v9 += 4;
          v18 = v17;
          v36.val[1] = 0uLL;
          v38.val[0] = v16;
          v34.val[1] = 0uLL;
          v19 = v15;
          vst2q_s8(v19, v34);
          v19 += 32;
          v38.val[1] = 0uLL;
          vst2q_s8(v19, v38);
          v20 = v15 + 64;
          vst2q_s8(v20, v36);
          v21 = v15 + 96;
          vst2q_s8(v21, *(int8x16x2_t *)(&v14 - 1));
          v15 += 128;
        }
        while (v15 != v12);
      }
      else
      {
        v12 = (char *)(result + 1);
      }
      while (v12 != v11)
      {
        v22 = v9->u8[0];
        v9 = (int8x16_t *)((char *)v9 + 1);
        *(_WORD *)v12 = v22;
        v12 += 2;
      }
    }
    else if ((_DWORD)v10 == 1)
    {
      *v7 = v9->i16[0];
    }
    else if ((_DWORD)v10)
    {
      result = memcpy(result + 1, v9, 2 * v10);
    }
    v13 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v13 = 0;
  }
  v23 = (char *)&v7[v13];
  v24 = &v23[2 * a5];
  if ((a5 & 0xFFFFFFC0) != 0)
  {
    v25 = &v23[2 * (a5 & 0xFFFFFFC0)];
    v26 = 0uLL;
    do
    {
      v35.val[0] = *a4;
      v27 = a4[1];
      v37.val[0] = a4[2];
      v28 = a4[3];
      a4 += 4;
      v29 = v28;
      v37.val[1] = 0uLL;
      v39.val[0] = v27;
      v35.val[1] = 0uLL;
      v30 = v23;
      vst2q_s8(v30, v35);
      v30 += 32;
      v39.val[1] = 0uLL;
      vst2q_s8(v30, v39);
      v31 = v23 + 64;
      vst2q_s8(v31, v37);
      v32 = v23 + 96;
      vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
      v23 += 128;
    }
    while (v23 != v25);
    v23 = v25;
  }
  while (v23 != v24)
  {
    v33 = a4->u8[0];
    a4 = (int8x16_t *)((char *)a4 + 1);
    *(_WORD *)v23 = v33;
    v23 += 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ApplePaySession::canMakePaymentsWithActiveCard(WebCore::Document &,WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3352220;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplePaySession::canMakePaymentsWithActiveCard(WebCore::Document &,WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3352220;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplePaySession::canMakePaymentsWithActiveCard(WebCore::Document &,WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t a1)
{
  return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ApplePaySession::canMakePaymentsWithActiveCard(WebCore::Document &,WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3352248;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplePaySession::canMakePaymentsWithActiveCard(WebCore::Document &,WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3352248;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplePaySession::canMakePaymentsWithActiveCard(WebCore::Document &,WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_1,void,BOOL>::call(uint64_t a1, int a2)
{
  return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ApplePaySession::openPaymentSetup(WebCore::Document &,WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3352270;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplePaySession::openPaymentSetup(WebCore::Document &,WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3352270;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplePaySession::openPaymentSetup(WebCore::Document &,WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePaySetupFeature>>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  objc_class *v13;
  int v14;
  BOOL v15;
  JSValue v16;
  void *v17;
  JSC::VM *v18;
  objc_class *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  JSC::VM *v37;

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](&v29, v7);
    v8 = **(_QWORD **)(v4 + 32);
    v9 = (JSC::VM *)v6[7];
    v37 = v9;
    v32 = 0;
    v33 = 0x800000000;
    v34 = (WTF *)((char *)v35 + 8);
    memset(v35, 0, sizeof(v35));
    v36 = 0;
    v10 = *(_DWORD *)(a2 + 12);
    if (v10 >= 9)
    {
      v32 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v33) == 1;
      v10 = *(_DWORD *)(a2 + 12);
      if (v10)
      {
LABEL_9:
        v11 = *(uint64_t **)a2;
        v12 = 8 * v10;
        do
        {
          v13 = (objc_class *)WebCore::wrap<WebCore::ApplePaySetupFeature>((uint64_t)v6, v8, *v11);
          if (*((_DWORD *)v9 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_41;
          }
          v14 = v33;
          if ((_DWORD)v33 != HIDWORD(v33) && (v34 != (WTF *)((char *)v35 + 8) ? (v15 = v34 == 0) : (v15 = 1), v15))
          {
            *((_QWORD *)v34 + v33) = v13;
            LODWORD(v33) = v14 + 1;
          }
          else
          {
            v16.super.isa = v13;
            if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v16) == 1)
              v32 = 1;
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
    }
    else if (v10)
    {
      goto LABEL_9;
    }
    if (v32)
    {
      JSC::throwOutOfMemoryError();
    }
    else
    {
      v30 = v34;
      v31 = v33;
      v18 = *(JSC::VM **)(v8 + 56);
      if (!*((_DWORD *)v18 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) == 0)
      {
        v19 = (objc_class *)JSC::constructArray();
        goto LABEL_28;
      }
    }
LABEL_41:
    v19 = 0;
LABEL_28:
    v20 = *(uint64_t **)&v35[0];
    if (*(_QWORD *)&v35[0])
    {
      v30 = (WTF *)&v33;
      v23 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)&v30);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v20, v23);
    }
    if (v34 != (WTF *)((char *)v35 + 8) && v34)
      WTF::fastFree(v34, v17);
    v21 = *(_QWORD *)(v7 + 16);
    if (!v21)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v19);
      v21 = *(_QWORD *)(v7 + 16);
      if (!v21)
        return MEMORY[0x19AEA32A0](&v29);
    }
    v22 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v22 + 64))(v22))
    {
LABEL_38:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v21, 0, 0, 0);
      return MEMORY[0x19AEA32A0](&v29);
    }
    v24 = v22[43];
    if (*(_QWORD *)(v7 + 24) == v21)
    {
LABEL_55:
      *(_BYTE *)(*(_QWORD *)(v24 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_38;
    }
    if (!v24)
      goto LABEL_38;
    v25 = (unsigned __int8 *)(v24 + 40);
    if (__ldaxr((unsigned __int8 *)(v24 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
      goto LABEL_49;
    }
    MEMORY[0x19AEA534C](v24 + 40);
LABEL_49:
    v27 = *(unsigned __int8 *)(v24 + 41);
    v28 = __ldxr(v25);
    if (v28 == 1)
    {
      if (!__stlxr(0, v25))
      {
LABEL_54:
        if (!v27)
          goto LABEL_38;
        goto LABEL_55;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v24 + 40));
    goto LABEL_54;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ApplePaySetup::getSetupFeatures(WebCore::Document &,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePaySetupFeature>>> &&)::$_0,void,WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;

  *a1 = &off_1E3352298;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      else
        --*(_DWORD *)(v5 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplePaySetup::getSetupFeatures(WebCore::Document &,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePaySetupFeature>>> &&)::$_0,void,WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;

  *(_QWORD *)this = &off_1E3352298;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      else
        --*(_DWORD *)(v5 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplePaySetup::getSetupFeatures(WebCore::Document &,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePaySetupFeature>>> &&)::$_0,void,WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(v2 + 80))
  {
    v3 = *(_DWORD **)(v2 + 72);
    *(_QWORD *)(v2 + 72) = 0;
    *(_BYTE *)(v2 + 80) = 0;
    result = WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePaySetupFeature>>>((uint64_t)v3, a2);
    if (v3)
    {
      if (v3[4] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
      else
        --v3[4];
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplePaySetup::begin(WebCore::Document &,WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(v2 + 96))
  {
    v3 = *(_DWORD **)(v2 + 88);
    *(_QWORD *)(v2 + 88) = 0;
    *(_BYTE *)(v2 + 96) = 0;
    result = WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>((uint64_t)v3, a2);
    if (v3)
    {
      if (v3[4] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
      else
        --v3[4];
    }
  }
  return result;
}

void WebCore::PaymentCoordinator::~PaymentCoordinator(WebCore::PaymentCoordinator *this, void *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (char *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)v3 - 24);
    if (*(_DWORD *)&v3[v4 + 8] == 1)
      (*(void (**)(char *))(*(_QWORD *)&v3[v4] + 8))(&v3[v4]);
    else
      --*(_DWORD *)&v3[v4 + 8];
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 152))(v5);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v6 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (char *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)v3 - 24);
    if (*(_DWORD *)&v3[v4 + 8] == 1)
      (*(void (**)(char *))(*(_QWORD *)&v3[v4] + 8))(&v3[v4]);
    else
      --*(_DWORD *)&v3[v4 + 8];
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 152))(v5);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v6 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

BOOL WebCore::PaymentCoordinator::supportsVersion(WebCore::PaymentCoordinator *this, WebCore::Document *a2, unsigned int a3)
{
  NSObject *v5;
  int v7;
  WebCore::PaymentCoordinator *v8;
  __int16 v9;
  unsigned int v10;
  __int16 v11;
  _BOOL4 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 134218496;
    v8 = this;
    v9 = 1024;
    v10 = a3;
    v11 = 1024;
    v12 = a3 < 0x10;
    _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::supportsVersion(%d) -> %d", (uint8_t *)&v7, 0x18u);
  }
  return a3 < 0x10;
}

uint64_t WebCore::PaymentCoordinator::canMakePayments(WebCore::PaymentCoordinator *this)
{
  uint64_t v2;
  NSObject *v3;
  int v5;
  WebCore::PaymentCoordinator *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
  v3 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 134218240;
    v6 = this;
    v7 = 1024;
    v8 = v2;
    _os_log_impl(&dword_1940B8000, v3, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::canMakePayments() -> %d", (uint8_t *)&v5, 0x12u);
  }
  return v2;
}

WTF::StringImpl *WebCore::PaymentCoordinator::canMakePaymentsWithActiveCard(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  _QWORD *v23;
  WTF::StringImpl *result;
  _QWORD *v25;
  WTF::StringImpl *v26;

  v8 = a1[1];
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 192), (WTF::StringImpl *)a2);
  v10 = *(WTF::StringImpl **)(v9 + 40);
  if (v10)
    *(_DWORD *)v10 += 2;
  v26 = v10;
  v11 = *a1;
  if (*a1)
    goto LABEL_21;
  v11 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = a1;
  v13 = (unsigned int *)*a1;
  *a1 = v11;
  if (!v13)
    goto LABEL_21;
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  v11 = *a1;
  if (*a1)
  {
LABEL_21:
    do
      v16 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v16 + 1, (unsigned int *)v11));
  }
  v17 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  v18 = v17;
  if (v17)
  {
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 + 1, v17));
  }
  v20 = *a4;
  *a4 = 0;
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v21 = &off_1E3352B78;
  v21[1] = a1;
  v21[2] = v11;
  v21[3] = v18;
  v21[4] = v20;
  v25 = v21;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, _QWORD **))(*(_QWORD *)v8 + 16))(v8, a3, &v26, &v25);
  v23 = v25;
  v25 = 0;
  if (v23)
    (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::PaymentCoordinator::openPaymentSetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSObject *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *result;
  uint64_t v17;
  uint8_t buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_1940B8000, v8, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::openPaymentSetup()", buf, 0xCu);
  }
  v10 = *(_QWORD *)(a1 + 8);
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 192), v9);
  v12 = *(_DWORD **)(v11 + 40);
  if (v12)
    *v12 += 2;
  *(_QWORD *)buf = v12;
  v13 = *a4;
  *a4 = 0;
  v17 = v13;
  (*(void (**)(uint64_t, uint64_t, uint8_t *, uint64_t *))(*(_QWORD *)v10 + 24))(v10, a3, buf, &v17);
  v15 = v17;
  v17 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::PaymentCoordinator::beginPaymentSession(WebCore::PaymentCoordinator *this, WebCore::Document *a2, WebCore::PaymentSession *a3, const WebCore::ApplePaySessionPaymentRequest *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  WTF *v22;
  int v23;
  NSObject *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char *v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  WebCore::LinkIcon *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Document *v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t buf[12];
  _DWORD v38[3];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 66);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(_DWORD **)(v6 + 8);
        if (v7)
        {
          ++*v7;
          v34 = a2;
          WebCore::LinkIconCollector::iconsOfTypes(&v34, 6, (uint64_t)buf);
          v35 = 0;
          v36 = 0;
          if (v38[0])
          {
            if (v38[0] >= 0x6666667u)
            {
              __break(0xC471u);
              return;
            }
            v13 = 40 * v38[0];
            v14 = WTF::fastMalloc((WTF *)(40 * v38[0]));
            LODWORD(v36) = (v13 & 0xFFFFFFF8) / 0x28;
            v35 = v14;
            if (v38[0])
            {
              v15 = 0;
              v16 = 0;
              do
              {
                v17 = *(_QWORD *)buf;
                v18 = *(_DWORD **)(*(_QWORD *)buf + v15);
                if (v18)
                  *v18 += 2;
                v19 = v17 + v15;
                v20 = *(_OWORD *)(v19 + 8);
                v21 = *(_OWORD *)(v19 + 24);
                *(_QWORD *)v14 = v18;
                *(_OWORD *)(v14 + 8) = v20;
                *(_OWORD *)(v14 + 24) = v21;
                ++v16;
                v14 += 40;
                v15 += 80;
              }
              while (v16 < v38[0]);
              HIDWORD(v36) = v16;
              if (v38[0])
              {
                v31 = *(WebCore::LinkIcon **)buf;
                v32 = 80 * v38[0];
                do
                {
                  WebCore::LinkIcon::~LinkIcon(v31, v12);
                  v31 = (WebCore::LinkIcon *)(v33 + 80);
                  v32 -= 80;
                }
                while (v32);
              }
            }
          }
          v22 = *(WTF **)buf;
          if (*(_QWORD *)buf)
          {
            memset(buf, 0, sizeof(buf));
            WTF::fastFree(v22, v12);
          }
          v23 = (*(uint64_t (**)(_QWORD, _DWORD *, uint64_t *, const WebCore::ApplePaySessionPaymentRequest *))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), v7 + 42, &v35, a4);
          v24 = qword_1ECE7BE60;
          if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = this;
            LOWORD(v38[0]) = 1024;
            *(_DWORD *)((char *)v38 + 2) = v23;
            _os_log_impl(&dword_1940B8000, v24, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::beginPaymentSession() -> %d", buf, 0x12u);
          }
          if (v23)
          {
            if (*((_BYTE *)a4 + 345))
            {
              if (*((_BYTE *)a4 + 344) == 1)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WebCore::Document::addConsoleMessage(a2, 15, 1, (WTF::StringImpl **)buf, 0);
                v26 = *(WTF::StringImpl **)buf;
                *(_QWORD *)buf = 0;
                if (v26)
                {
                  if (*(_DWORD *)v26 == 2)
                    WTF::StringImpl::destroy(v26, v25);
                  else
                    *(_DWORD *)v26 -= 2;
                }
              }
            }
            ++*(_DWORD *)((char *)a3 + *(_QWORD *)(*(_QWORD *)a3 - 24) + 8);
            v27 = (char *)*((_QWORD *)this + 2);
            *((_QWORD *)this + 2) = a3;
            if (v27)
            {
              v28 = *(_QWORD *)(*(_QWORD *)v27 - 24);
              if (*(_DWORD *)&v27[v28 + 8] == 1)
                (*(void (**)(char *))(*(_QWORD *)&v27[v28] + 8))(&v27[v28]);
              else
                --*(_DWORD *)&v27[v28 + 8];
            }
          }
          WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v25);
          if (*v7 == 1)
          {
            WebCore::Page::~Page((uint64_t)v7);
            WTF::fastFree(v29, v30);
          }
          else
          {
            --*v7;
          }
        }
      }
    }
  }
}

uint64_t WebCore::PaymentCoordinator::completeMerchantValidation(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = a1;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::completeMerchantValidation()", (uint8_t *)&v6, 0xCu);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WebCore::PaymentCoordinator::completeShippingMethodSelection(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = a1;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::completeShippingMethodSelection()", (uint8_t *)&v6, 0xCu);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WebCore::PaymentCoordinator::completeShippingContactSelection(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = a1;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::completeShippingContactSelection()", (uint8_t *)&v6, 0xCu);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WebCore::PaymentCoordinator::completePaymentMethodSelection(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = a1;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::completePaymentMethodSelection()", (uint8_t *)&v6, 0xCu);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WebCore::PaymentCoordinator::completeCouponCodeChange(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = a1;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::completeCouponCodeChange()", (uint8_t *)&v6, 0xCu);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WebCore::PaymentCoordinator::completePaymentSession(uint64_t a1, unsigned __int16 *a2)
{
  _BOOL4 v5;
  NSObject *v6;
  uint64_t result;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  _BOOL4 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = *a2 < 2u && *((_DWORD *)a2 + 5) == 0;
  v6 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 134218240;
    v11 = a1;
    v12 = 1024;
    v13 = v5;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::completePaymentSession() (isFinalState: %d)", (uint8_t *)&v10, 0x12u);
  }
  result = (*(uint64_t (**)(_QWORD, unsigned __int16 *))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), a2);
  if (v5)
  {
    v8 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)v8 - 24);
      if (*(_DWORD *)&v8[v9 + 8] == 1)
        return (*(uint64_t (**)(char *))(*(_QWORD *)&v8[v9] + 8))(&v8[v9]);
      else
        --*(_DWORD *)&v8[v9 + 8];
    }
  }
  return result;
}

uint64_t WebCore::PaymentCoordinator::abortPaymentSession(char **this)
{
  NSObject *v2;
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;
  WebCore::PaymentCoordinator *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = (WebCore::PaymentCoordinator *)this;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::abortPaymentSession()", (uint8_t *)&v6, 0xCu);
  }
  result = (*(uint64_t (**)(char *))(*(_QWORD *)this[1] + 88))(this[1]);
  v4 = this[2];
  this[2] = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)v4 - 24);
    if (*(_DWORD *)&v4[v5 + 8] == 1)
      return (*(uint64_t (**)(char *))(*(_QWORD *)&v4[v5] + 8))(&v4[v5]);
    else
      --*(_DWORD *)&v4[v5 + 8];
  }
  return result;
}

uint64_t WebCore::PaymentCoordinator::cancelPaymentSession(WebCore::PaymentCoordinator *this)
{
  NSObject *v2;
  int v4;
  WebCore::PaymentCoordinator *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 134217984;
    v5 = this;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::cancelPaymentSession()", (uint8_t *)&v4, 0xCu);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
}

uint64_t WebCore::PaymentCoordinator::validateMerchant(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = result;
    v5 = qword_1ECE7BE60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 134217984;
      v7 = v4;
      _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::validateMerchant()", (uint8_t *)&v6, 0xCu);
      v2 = *(_QWORD *)(v4 + 16);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 8))(v2, a2);
  }
  return result;
}

uint64_t WebCore::PaymentCoordinator::didAuthorizePayment(uint64_t this, const WebCore::Payment *a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 16);
  if (v2)
  {
    v4 = this;
    v5 = qword_1ECE7BE60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 134217984;
      v7 = v4;
      _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::didAuthorizePayment()", (uint8_t *)&v6, 0xCu);
      v2 = *(_QWORD *)(v4 + 16);
    }
    return (*(uint64_t (**)(uint64_t, const WebCore::Payment *))(*(_QWORD *)v2 + 16))(v2, a2);
  }
  return this;
}

uint64_t WebCore::PaymentCoordinator::didSelectPaymentMethod(uint64_t this, const WebCore::PaymentMethod *a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 16);
  if (v2)
  {
    v4 = this;
    v5 = qword_1ECE7BE60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 134217984;
      v7 = v4;
      _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::didSelectPaymentMethod()", (uint8_t *)&v6, 0xCu);
      v2 = *(_QWORD *)(v4 + 16);
    }
    return (*(uint64_t (**)(uint64_t, const WebCore::PaymentMethod *))(*(_QWORD *)v2 + 40))(v2, a2);
  }
  return this;
}

uint64_t WebCore::PaymentCoordinator::didSelectShippingMethod(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = result;
    v5 = qword_1ECE7BE60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 134217984;
      v7 = v4;
      _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::didSelectShippingMethod()", (uint8_t *)&v6, 0xCu);
      v2 = *(_QWORD *)(v4 + 16);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, a2);
  }
  return result;
}

uint64_t WebCore::PaymentCoordinator::didSelectShippingContact(uint64_t this, const WebCore::PaymentContact *a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 16);
  if (v2)
  {
    v4 = this;
    v5 = qword_1ECE7BE60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 134217984;
      v7 = v4;
      _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::didSelectShippingContact()", (uint8_t *)&v6, 0xCu);
      v2 = *(_QWORD *)(v4 + 16);
    }
    return (*(uint64_t (**)(uint64_t, const WebCore::PaymentContact *))(*(_QWORD *)v2 + 32))(v2, a2);
  }
  return this;
}

uint64_t WebCore::PaymentCoordinator::didChangeCouponCode(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = result;
    v5 = qword_1ECE7BE60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 134217984;
      v7 = v4;
      _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::didChangeCouponCode()", (uint8_t *)&v6, 0xCu);
      v2 = *(_QWORD *)(v4 + 16);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a2);
  }
  return result;
}

uint64_t WebCore::PaymentCoordinator::didCancelPaymentSession(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = result;
    v5 = qword_1ECE7BE60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 134217984;
      v9 = v4;
      _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::didCancelPaymentSession()", (uint8_t *)&v8, 0xCu);
      v2 = *(_QWORD *)(v4 + 16);
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 56))(v2, a2);
    v6 = *(char **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = 0;
    if (v6)
    {
      v7 = *(_QWORD *)(*(_QWORD *)v6 - 24);
      if (*(_DWORD *)&v6[v7 + 8] == 1)
        return (*(uint64_t (**)(char *))(*(_QWORD *)&v6[v7] + 8))(&v6[v7]);
      else
        --*(_DWORD *)&v6[v7 + 8];
    }
  }
  return result;
}

uint64_t WebCore::PaymentCoordinator::validatedPaymentNetwork@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X3>, unsigned int a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  if (a3 > 1)
  {
    if (a3 != 2)
      return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
    v5 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
      return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
    v6 = *(_DWORD *)(v5 + 4);
    goto LABEL_13;
  }
  v5 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
  v6 = *(_DWORD *)(v5 + 4);
  if (v6 != 3)
  {
LABEL_13:
    if (v6 != 13)
      return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
    v9 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v10 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v9);
      if (v10 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
      v11 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[1]);
      if (v11 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
        return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
      v12 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[2]);
      if (v12 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
        return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
        return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
      v13 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[4]);
      if (v13 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[6]) != v11
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[8]) != v10
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[9]) != v11
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[11]) != v12)
      {
        return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
      }
      v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[12]);
    }
    else
    {
      v15 = *(unsigned __int16 *)v9 | (32 * (*(unsigned __int16 *)v9 - 65 < 0x1A));
      if (v15 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
      v16 = *((unsigned __int16 *)v9 + 1) | (32 * (*((unsigned __int16 *)v9 + 1) - 65 < 0x1A));
      if (v16 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
        return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
      v17 = *((unsigned __int16 *)v9 + 2) | (32 * (*((unsigned __int16 *)v9 + 2) - 65 < 0x1A));
      if (v17 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
        return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
      if ((*((unsigned __int16 *)v9 + 3) | (32 * (*((unsigned __int16 *)v9 + 3) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
        return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
      v13 = *((unsigned __int16 *)v9 + 4) | (32 * (*((unsigned __int16 *)v9 + 4) - 65 < 0x1A));
      if (v13 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
        || (*((unsigned __int16 *)v9 + 5) | (32 * (*((unsigned __int16 *)v9 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
        || (*((unsigned __int16 *)v9 + 6) | (32 * (*((unsigned __int16 *)v9 + 6) - 65 < 0x1A))) != v16
        || (*((unsigned __int16 *)v9 + 7) | (32 * (*((unsigned __int16 *)v9 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
        || (*((unsigned __int16 *)v9 + 8) | (32 * (*((unsigned __int16 *)v9 + 8) - 65 < 0x1A))) != v15
        || (*((unsigned __int16 *)v9 + 9) | (32 * (*((unsigned __int16 *)v9 + 9) - 65 < 0x1A))) != v16
        || (*((unsigned __int16 *)v9 + 10) | (32 * (*((unsigned __int16 *)v9 + 10) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
        || (*((unsigned __int16 *)v9 + 11) | (32 * (*((unsigned __int16 *)v9 + 11) - 65 < 0x1A))) != v17)
      {
        return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
      }
      v14 = *((unsigned __int16 *)v9 + 12) | (32 * (*((unsigned __int16 *)v9 + 12) - 65 < 0x1A));
    }
    if (v14 != v13)
      return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
    goto LABEL_30;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v7 & 0xDF) != 0x4A || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x43)
      return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
    v8 = *(unsigned __int8 *)(v7 + 2);
  }
  else
  {
    if ((*(_WORD *)v7 & 0xFFDF) != 0x4A || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x43)
      return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
    v8 = *(unsigned __int16 *)(v7 + 4);
  }
  if ((v8 & 0xFFFFFFDF) != 0x42)
    return (***(uint64_t (****)(_QWORD, const WTF::String *))(this + 8))(*(_QWORD *)(this + 8), a2);
LABEL_30:
  *a4 = 0;
  a4[8] = 0;
  return this;
}

uint64_t WebCore::PaymentCoordinator::getSetupFeatures(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  uint8_t v19[24];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v19 = 134217984;
    *(_QWORD *)&v19[4] = a1;
    _os_log_impl(&dword_1940B8000, v8, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::getSetupFeatures()", v19, 0xCu);
  }
  v10 = *a1;
  v9 = a1[1];
  if (*a1)
    goto LABEL_14;
  v10 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = a1;
  v12 = (unsigned int *)*a1;
  *a1 = v10;
  if (!v12)
    goto LABEL_14;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v11);
  }
  v10 = *a1;
  if (*a1)
  {
LABEL_14:
    do
      v15 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v15 + 1, (unsigned int *)v10));
  }
  v16 = *a4;
  *a4 = 0;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v17 = &off_1E3352BA0;
  v17[1] = a1;
  v17[2] = v10;
  v17[3] = v16;
  *(_QWORD *)v19 = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v9 + 120))(v9, a2, a3, v19);
  result = *(_QWORD *)v19;
  *(_QWORD *)v19 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::PaymentCoordinator::beginApplePaySetup(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  uint8_t v21[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v10 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v21 = 134217984;
    *(_QWORD *)&v21[4] = a1;
    _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::beginApplePaySetup()", v21, 0xCu);
  }
  v12 = *a1;
  v11 = a1[1];
  if (*a1)
    goto LABEL_14;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = a1;
  v14 = (unsigned int *)*a1;
  *a1 = v12;
  if (!v14)
    goto LABEL_14;
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v13);
  }
  v12 = *a1;
  if (*a1)
  {
LABEL_14:
    do
      v17 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v17 + 1, (unsigned int *)v12));
  }
  v18 = *a5;
  *a5 = 0;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v19 = &off_1E3352BC8;
  v19[1] = a1;
  v19[2] = v12;
  v19[3] = v18;
  *(_QWORD *)v21 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v11 + 128))(v11, a2, a3, a4, v21);
  result = *(_QWORD *)v21;
  *(_QWORD *)v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::PaymentCoordinator::endApplePaySetup(WebCore::PaymentCoordinator *this)
{
  NSObject *v2;
  int v4;
  WebCore::PaymentCoordinator *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 134217984;
    v5 = this;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::endApplePaySetup()", (uint8_t *)&v4, 0xCu);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1));
}

uint64_t WebCore::PaymentSession::canCreateSession@<X0>(WebCore::PaymentSession *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::PaymentSession *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((WebCore::PermissionsPolicy::isFeatureEnabled(6u, this, 1) & 1) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 14;
    *(_BYTE *)(a2 + 16) = 1;
    return result;
  }
  v5 = *((_QWORD *)this + 66);
  if (!v5
    || (v6 = *(_QWORD *)(v5 + 8)) == 0
    || (!*(_QWORD *)(*(_QWORD *)(v6 + 280) + 88)
      ? (v7 = 0)
      : *(WebCore::PaymentSession **)(v6 + 296) != this
      ? (v7 = 0)
      : (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 280) + 88)),
        (WebCore::ResourceResponse::platformLazyInit(v7 + 1272, 1), !WTF::URL::protocolIs())
     || !*(_BYTE *)(v7 + 1400)
     || (result = WebCore::CertificateInfo::containsNonRootSHA1SignedCertificate((SecTrustRef *)(v7 + 1392)),
         (_DWORD)result)))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 12;
    *(_BYTE *)(a2 + 16) = 1;
    return result;
  }
  v9 = *((_QWORD *)this + 66);
  if (*((unsigned __int8 *)this + 3362) | *((unsigned __int8 *)this + 3405))
  {
    if (!v9)
      goto LABEL_23;
    v14 = *(_QWORD *)(v9 + 8);
    if (!v14)
      goto LABEL_23;
    v15 = *(_QWORD *)(v14 + 120);
    if (!v15)
      goto LABEL_23;
    v16 = *(_QWORD *)(v15 + 8);
    for (i = this; v16; v16 = *(_QWORD *)(v19 + 8))
    {
      i = *(WebCore::PaymentSession **)(*(_QWORD *)(v16 + 40) + 8);
      v17 = *((_QWORD *)i + 66);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 8);
      if (!v18)
        break;
      v19 = *(_QWORD *)(v18 + 120);
      if (!v19)
        break;
    }
  }
  else
  {
    if (!v9)
      goto LABEL_23;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      goto LABEL_23;
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 128) + 8);
    if (!v11 || *(_BYTE *)(v11 + 144) != 0)
      goto LABEL_23;
    i = *(WebCore::PaymentSession **)(v11 + 296);
    if (!i)
      goto LABEL_23;
  }
  if (i == this)
  {
LABEL_23:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return result;
  }
  result = WebCore::Document::parentDocument(this);
  if (result)
    *(_DWORD *)(result + 24) += 2;
  if ((WebCore::PaymentSession *)result == i)
  {
LABEL_55:
    if (*((_DWORD *)i + 6) == 2)
    {
      if ((*((_WORD *)i + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(i);
    }
    else
    {
      *((_DWORD *)i + 6) -= 2;
    }
    goto LABEL_23;
  }
  while (1)
  {
    v20 = result;
    v21 = *(_QWORD *)(result + 528);
    if (v21 && (v22 = *(_QWORD *)(v21 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v22 + 280) + 88))
      v23 = *(_QWORD *)(v22 + 296) == result ? *(_QWORD *)(*(_QWORD *)(v22 + 280) + 88) : 0;
    else
      v23 = 0;
    WebCore::ResourceResponse::platformLazyInit(v23 + 1272, 1);
    if (!WTF::URL::protocolIs()
      || !*(_BYTE *)(v23 + 1400)
      || WebCore::CertificateInfo::containsNonRootSHA1SignedCertificate((SecTrustRef *)(v23 + 1392)))
    {
      break;
    }
    result = WebCore::Document::parentDocument((WebCore::Document *)v20);
    if (result)
      *(_DWORD *)(result + 24) += 2;
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
      {
        v24 = result;
        WebCore::Node::removedLastRef((WebCore::Node *)v20);
        result = v24;
      }
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
    if ((WebCore::PaymentSession *)result == i)
      goto LABEL_55;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a2 = 12;
  *(_BYTE *)(a2 + 16) = 1;
  if (*(_DWORD *)(v20 + 24) == 2)
  {
    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v20);
  }
  else
  {
    *(_DWORD *)(v20 + 24) -= 2;
  }
  return result;
}

void WebCore::convertAndValidateApplePayRequest(uint64_t a1, _QWORD *a2, JSC::JSCell *a3)
{
  WTF::ThreadGroup ***v6;
  uint64_t v8;
  JSC::JSGlobalObject *v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint8x8_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _BYTE v22[896];
  _BYTE v23[8];
  WTF::StringImpl *v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29[72];
  WebCore::Document *v30;
  WTF::StringImpl *v31;
  _BYTE v32[8];
  uint64_t v33[72];
  WebCore::Document *v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = v26;
    *(_BYTE *)(a1 + 8) = 33;
    *(_QWORD *)(a1 + 16) = v8;
    *(_DWORD *)(a1 + 600) = 1;
    return;
  }
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists((WTF::RunLoop *)a1);
    JSC::VM::create();
    v6 = (WTF::ThreadGroup ***)v26;
    WebCore::g_commonVMOrNull = v26;
    if (__ldaxr((unsigned int *)(v26 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v26 + 1096)))
    {
LABEL_8:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v26 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(*v6[73]);
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v6, 0);
      goto LABEL_11;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v26 + 192));
    goto LABEL_8;
  }
LABEL_11:
  v9 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(a2 + 24));
  WebCore::convertDictionary<WebCore::ApplePayRequest>(a3, v9, (uint64_t)v32);
  v10 = v36;
  if (!v36)
  {
    WebCore::ApplePayRequestBase::ApplePayRequestBase((uint64_t)v29, v33);
    v30 = v34;
    v11 = v35;
    v35 = 0;
    v31 = v11;
    WebCore::convertAndValidate((WebCore *)a2, v34, *(const WebCore::ApplePayRequestBase **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[66] + 8) + 24) + 8) + 1240), (uint64_t)v29, (uint64_t)&v26);
    if (v28)
    {
      if (v28 != 1)
      {
        v21 = std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::ApplePayPaymentHandler::convertData(v21);
        return;
      }
      v12 = v27;
      v27 = 0;
      *(_BYTE *)(a1 + 8) = v26;
      *(_QWORD *)(a1 + 16) = v12;
      v13 = 1;
      *(_DWORD *)(a1 + 600) = 1;
    }
    else
    {
      WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)v22, (const WebCore::ApplePaySessionPaymentRequest *)&v26);
      WebCore::PaymentRequestValidator::validate((uint64_t)v22, 7, (uint64_t)v23, v14);
      WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)v22, v15);
      if (v25)
      {
        v17 = v24;
        *(_BYTE *)(a1 + 8) = v23[0];
        *(_QWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 600) = 1;
      }
      else
      {
        WebCore::ApplePayRequestBase::ApplePayRequestBase(a1 + 8, v29);
        *(_QWORD *)(a1 + 584) = v30;
        v18 = v31;
        v31 = 0;
        *(_QWORD *)(a1 + 592) = v18;
        LODWORD(v18) = v25;
        *(_DWORD *)(a1 + 600) = 0;
        if ((_DWORD)v18)
        {
          v19 = v24;
          v24 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v16);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
      }
      v13 = v28;
      if (v28 == -1)
        goto LABEL_24;
    }
    (*(&off_1E3352AC8 + v13))((int)v22, (WebCore::ApplePaySessionPaymentRequest *)&v26);
LABEL_24:
    v20 = v31;
    v31 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v16);
      else
        *(_DWORD *)v20 -= 2;
    }
    WebCore::ApplePayRequestBase::~ApplePayRequestBase((WebCore::ApplePayRequestBase *)v29, v16);
    v10 = v36;
    goto LABEL_28;
  }
  *(_BYTE *)(a1 + 8) = 37;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 600) = 1;
LABEL_28:
  if (v10 != -1)
    (*(&off_1E3352A48 + v10))((int)&v26, (WebCore::ApplePayRequestBase *)v33);
}

void WebCore::ApplePayPaymentHandler::convertData(uint64_t a1@<X0>, _QWORD *a2@<X1>, JSC::JSCell *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF **v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl **v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl **v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WebCore::ApplePayPaymentHandler *v70;
  WebCore::Document *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _WORD v113[56];
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  _BYTE v119[8];
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  unsigned int v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  WebCore::convertAndValidateApplePayRequest((uint64_t)v119, a2, a3);
  if (!v124)
  {
    WebCore::ApplePayRequestBase::ApplePayRequestBase((uint64_t)&v72, &v120);
    v117 = v122;
    v9 = v123;
    v123 = 0;
    v118 = v9;
    v10 = (WTF **)(a1 + 88);
    if (*(_BYTE *)(a1 + 680))
    {
      if (*(unsigned __int8 *)(a1 + 104) == v74)
      {
        if (*(_BYTE *)(a1 + 104))
        {
          v11 = *v10;
          if (v11)
          {
            *(_QWORD *)(a1 + 88) = 0;
            *(_DWORD *)(a1 + 96) = 0;
            WTF::fastFree(v11, v8);
          }
          *(_QWORD *)(a1 + 88) = v72;
          v12 = v73;
          v72 = 0;
          v73 = 0;
          *(_QWORD *)(a1 + 96) = v12;
        }
      }
      else if (*(_BYTE *)(a1 + 104))
      {
        v14 = *v10;
        if (v14)
        {
          *(_QWORD *)(a1 + 88) = 0;
          *(_DWORD *)(a1 + 96) = 0;
          WTF::fastFree(v14, v8);
        }
        *(_BYTE *)(a1 + 104) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 88) = v72;
        v15 = v73;
        v72 = 0;
        v73 = 0;
        *(_QWORD *)(a1 + 96) = v15;
        *(_BYTE *)(a1 + 104) = 1;
      }
      v16 = *(WTF **)(a1 + 112);
      if (v16)
      {
        *(_QWORD *)(a1 + 112) = 0;
        *(_DWORD *)(a1 + 120) = 0;
        WTF::fastFree(v16, v8);
      }
      *(_QWORD *)(a1 + 112) = v75;
      v17 = v76;
      v75 = 0;
      v76 = 0;
      *(_QWORD *)(a1 + 120) = v17;
      v18 = *(unsigned int *)(a1 + 140);
      if ((_DWORD)v18)
      {
        v63 = *(WTF::StringImpl ***)(a1 + 128);
        v64 = 8 * v18;
        do
        {
          v65 = *v63;
          *v63 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v65 -= 2;
          }
          ++v63;
          v64 -= 8;
        }
        while (v64);
      }
      v19 = *(WTF **)(a1 + 128);
      if (v19)
      {
        *(_QWORD *)(a1 + 128) = 0;
        *(_DWORD *)(a1 + 136) = 0;
        WTF::fastFree(v19, v8);
      }
      *(_QWORD *)(a1 + 128) = v77;
      v20 = v78;
      v77 = 0;
      v78 = 0;
      *(_QWORD *)(a1 + 136) = v20;
      v21 = v79;
      v79 = 0;
      v22 = *(WTF::StringImpl **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v22 -= 2;
      }
      if (*(unsigned __int8 *)(a1 + 168) == v82)
      {
        if (*(_BYTE *)(a1 + 168))
        {
          v23 = *(WTF **)(a1 + 152);
          if (v23)
          {
            *(_QWORD *)(a1 + 152) = 0;
            *(_DWORD *)(a1 + 160) = 0;
            WTF::fastFree(v23, v8);
          }
          *(_QWORD *)(a1 + 152) = v80;
          v24 = v81;
          v80 = 0;
          v81 = 0;
          *(_QWORD *)(a1 + 160) = v24;
        }
      }
      else if (*(_BYTE *)(a1 + 168))
      {
        v25 = *(WTF **)(a1 + 152);
        if (v25)
        {
          *(_QWORD *)(a1 + 152) = 0;
          *(_DWORD *)(a1 + 160) = 0;
          WTF::fastFree(v25, v8);
        }
        *(_BYTE *)(a1 + 168) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 152) = v80;
        v26 = v81;
        v80 = 0;
        v81 = 0;
        *(_QWORD *)(a1 + 160) = v26;
        *(_BYTE *)(a1 + 168) = 1;
      }
      v27 = (WTF::StringImpl **)(a1 + 176);
      if (*(unsigned __int8 *)(a1 + 320) == v94)
      {
        if (*(_BYTE *)(a1 + 320))
          WebCore::ApplePayPaymentContact::operator=(v27, (WTF::StringImpl **)&v83);
      }
      else if (*(_BYTE *)(a1 + 320))
      {
        WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v27, (WTF::StringImpl *)v8);
        *(_BYTE *)(a1 + 320) = 0;
      }
      else
      {
        v28 = v83;
        v29 = v84;
        v83 = 0u;
        v84 = 0u;
        *(_OWORD *)(a1 + 176) = v28;
        *(_OWORD *)(a1 + 192) = v29;
        v30 = v85;
        v85 = 0u;
        v31 = v86;
        v86 = 0u;
        *(_OWORD *)(a1 + 208) = v30;
        *(_OWORD *)(a1 + 224) = v31;
        *(_BYTE *)(a1 + 240) = 0;
        *(_BYTE *)(a1 + 256) = 0;
        if (v89)
        {
          *(_QWORD *)(a1 + 240) = v87;
          v32 = v88;
          v87 = 0;
          v88 = 0;
          *(_QWORD *)(a1 + 248) = v32;
          *(_BYTE *)(a1 + 256) = 1;
        }
        v33 = v90;
        v34 = v91;
        v90 = 0uLL;
        v91 = 0uLL;
        *(_OWORD *)(a1 + 264) = v33;
        *(_OWORD *)(a1 + 280) = v34;
        v35 = v92;
        v92 = 0uLL;
        *(_OWORD *)(a1 + 296) = v35;
        v36 = v93;
        v93 = 0;
        *(_QWORD *)(a1 + 312) = v36;
        *(_BYTE *)(a1 + 320) = 1;
      }
      if (*(unsigned __int8 *)(a1 + 344) == v97)
      {
        if (*(_BYTE *)(a1 + 344))
        {
          v37 = *(WTF **)(a1 + 328);
          if (v37)
          {
            *(_QWORD *)(a1 + 328) = 0;
            *(_DWORD *)(a1 + 336) = 0;
            WTF::fastFree(v37, v8);
          }
          *(_QWORD *)(a1 + 328) = v95;
          v38 = v96;
          v95 = 0;
          v96 = 0;
          *(_QWORD *)(a1 + 336) = v38;
        }
      }
      else if (*(_BYTE *)(a1 + 344))
      {
        v39 = *(WTF **)(a1 + 328);
        if (v39)
        {
          *(_QWORD *)(a1 + 328) = 0;
          *(_DWORD *)(a1 + 336) = 0;
          WTF::fastFree(v39, v8);
        }
        *(_BYTE *)(a1 + 344) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 328) = v95;
        v40 = v96;
        v95 = 0;
        v96 = 0;
        *(_QWORD *)(a1 + 336) = v40;
        *(_BYTE *)(a1 + 344) = 1;
      }
      v41 = (WTF::StringImpl *)&v98;
      v42 = (WTF::StringImpl **)(a1 + 352);
      if (*(unsigned __int8 *)(a1 + 496) == v109)
      {
        if (*(_BYTE *)(a1 + 496))
          WebCore::ApplePayPaymentContact::operator=(v42, (WTF::StringImpl **)&v98);
      }
      else if (*(_BYTE *)(a1 + 496))
      {
        WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v42, (WTF::StringImpl *)&v98);
        *(_BYTE *)(a1 + 496) = 0;
      }
      else
      {
        v43 = v98;
        v44 = v99;
        v98 = 0u;
        v99 = 0u;
        *(_OWORD *)(a1 + 352) = v43;
        *(_OWORD *)(a1 + 368) = v44;
        v45 = v100;
        v46 = v101;
        v100 = 0u;
        v101 = 0u;
        *(_OWORD *)(a1 + 384) = v45;
        *(_OWORD *)(a1 + 400) = v46;
        *(_BYTE *)(a1 + 416) = 0;
        *(_BYTE *)(a1 + 432) = 0;
        if (v104)
        {
          *(_QWORD *)(a1 + 416) = v102;
          v47 = v103;
          v102 = 0;
          v103 = 0;
          *(_QWORD *)(a1 + 424) = v47;
          *(_BYTE *)(a1 + 432) = 1;
        }
        v48 = v105;
        v49 = v106;
        v105 = 0uLL;
        v106 = 0uLL;
        *(_OWORD *)(a1 + 440) = v48;
        *(_OWORD *)(a1 + 456) = v49;
        v50 = v107;
        v107 = 0uLL;
        *(_OWORD *)(a1 + 472) = v50;
        v51 = v108;
        v108 = 0;
        *(_QWORD *)(a1 + 488) = v51;
        *(_BYTE *)(a1 + 496) = 1;
      }
      v52 = v110;
      v110 = 0;
      v53 = *(WTF::StringImpl **)(a1 + 504);
      *(_QWORD *)(a1 + 504) = v52;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v41);
        else
          *(_DWORD *)v53 -= 2;
      }
      v54 = *(unsigned int *)(a1 + 524);
      if ((_DWORD)v54)
      {
        v66 = *(WTF::StringImpl ***)(a1 + 512);
        v67 = 8 * v54;
        do
        {
          v68 = *v66;
          *v66 = 0;
          if (v68)
          {
            if (*(_DWORD *)v68 == 2)
              WTF::StringImpl::destroy(v68, v41);
            else
              *(_DWORD *)v68 -= 2;
          }
          ++v66;
          v67 -= 8;
        }
        while (v67);
      }
      v55 = *(WTF **)(a1 + 512);
      if (v55)
      {
        *(_QWORD *)(a1 + 512) = 0;
        *(_DWORD *)(a1 + 520) = 0;
        WTF::fastFree(v55, v41);
      }
      *(_QWORD *)(a1 + 512) = v111;
      v56 = v112;
      v111 = 0;
      v112 = 0;
      *(_QWORD *)(a1 + 520) = v56;
      std::__optional_storage_base<WebCore::ApplePayInstallmentConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplePayInstallmentConfiguration,false>>(a1 + 528, (uint64_t)v113);
      *(_WORD *)(a1 + 632) = v113[52];
      v57 = v114;
      v114 = 0;
      v58 = *(WTF::StringImpl **)(a1 + 640);
      *(_QWORD *)(a1 + 640) = v57;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v13);
        else
          *(_DWORD *)v58 -= 2;
      }
      *(_DWORD *)(a1 + 648) = v115;
      v59 = v116;
      v116 = 0;
      v60 = *(WTF::StringImpl **)(a1 + 656);
      *(_QWORD *)(a1 + 656) = v59;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, v13);
        else
          *(_DWORD *)v60 -= 2;
      }
      *(_QWORD *)(a1 + 664) = v117;
      v61 = v118;
      v118 = 0;
      v62 = *(WTF::StringImpl **)(a1 + 672);
      *(_QWORD *)(a1 + 672) = v61;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
        {
          WTF::StringImpl::destroy(v62, v13);
          v69 = v118;
          v118 = 0;
          if (v69)
          {
            if (*(_DWORD *)v69 == 2)
              WTF::StringImpl::destroy(v69, v13);
            else
              *(_DWORD *)v69 -= 2;
          }
LABEL_76:
          WebCore::ApplePayRequestBase::~ApplePayRequestBase((WebCore::ApplePayRequestBase *)&v72, v13);
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          v7 = v124;
          if (v124 == -1)
            return;
          goto LABEL_77;
        }
        *(_DWORD *)v62 -= 2;
      }
    }
    else
    {
      WebCore::ApplePayRequestBase::ApplePayRequestBase((uint64_t)v10, &v72);
      *(_QWORD *)(a1 + 664) = v117;
      *(_QWORD *)(a1 + 672) = v118;
      *(_BYTE *)(a1 + 680) = 1;
    }
    v118 = 0;
    goto LABEL_76;
  }
  if (v124 != 1)
  {
    v70 = (WebCore::ApplePayPaymentHandler *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ApplePayPaymentHandler::show(v70, v71);
    return;
  }
  v6 = v121;
  v121 = 0;
  *(_BYTE *)a4 = v120;
  a4[1] = v6;
  v7 = 1;
  *((_BYTE *)a4 + 16) = 1;
LABEL_77:
  (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15ApplePayRequestENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix
   + v7))((int)&v72, (WebCore::ApplePayRequestBase *)&v120);
}

void WebCore::ApplePayPaymentHandler::show(WebCore::ApplePayPaymentHandler *this@<X0>, WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint8x8_t v21;
  uint8x8_t v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  WTF *v54;
  uint8x8_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint8x8_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  WTF *v73;
  uint8x8_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  uint8x8_t v81;
  void *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  int16x8_t v87;
  int16x4_t v88;
  int v89;
  char v90;
  uint64_t v91;
  char v92;
  WTF::StringImpl **v93;
  WTF::StringImpl *v94;
  void *v95;
  uint8x8_t v96;
  WTF *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  WTF *v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  WTF *v109;
  WTF *v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  WTF *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  WTF *v121;
  WTF *v122;
  WTF *v123;
  WTF *v124;
  WTF *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  WTF::StringImpl *v131;
  _QWORD *v132;
  uint64_t v133;
  WTF *v134;
  WTF::StringImpl *v135;
  char v136;
  WTF *v137;
  WTF::StringImpl *v138;
  unsigned int v139;
  uint64_t v140;
  char v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  __int16 v147;
  char v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  char v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  __int16 v162;
  char v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  __int16 v169;
  char v170;
  __int128 v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  char v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  __int16 v181;
  __int128 v182;
  uint64_t v183;
  char v184;
  WTF *v185;
  uint8x8_t v186;
  char v187;
  uint64_t v188;
  char v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  __int16 v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  char v199;
  WTF *v200;
  uint8x8_t v201;
  char v202;
  char v203;
  char v204;
  WTF::StringImpl *v205;
  __int128 v206;
  uint64_t v207;
  char v208;
  char v209;
  uint64_t v210;
  WTF::StringImpl *v211;
  _QWORD *v212;
  uint64_t v213;
  char v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  __int16 v220;
  char v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  char v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  __int16 v233;
  char v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  __int16 v240;
  char v241;
  __int128 v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  char v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  __int16 v252;
  __int128 v253;
  uint64_t v254;
  char v255;
  WTF *v256;
  uint8x8_t v257;
  char v258;
  uint64_t v259;
  char v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  __int16 v266;
  uint64_t v267;
  __int128 v268;
  __int128 v269;
  char v270;
  WTF *v271;
  uint8x8_t v272;
  char v273;
  char v274;
  char v275;
  const WTF::StringImpl *v276;
  _BYTE v277[16];
  WTF::StringImpl *v278;
  char v279;
  unsigned __int32 v280;
  char v281;
  uint64_t v282;
  unsigned int v283[30];
  char v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  uint64_t v292;
  __int16 v293;
  __int128 v294;
  uint64_t v295;
  char v296;
  WTF *v297;
  uint8x8_t v298;
  char v299;
  uint64_t v300;
  char v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  uint64_t v306;
  __int16 v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  char v311;
  WTF *v312;
  uint8x8_t v313;
  char v314;
  char v315;
  char v316[8];
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  WTF::StringImpl *v320;
  __int128 v321;
  uint64_t v322;
  char v323;
  int v324;
  int64x2_t v325;
  WTF::StringImpl *v326;
  _QWORD *v327;
  uint64_t v328;
  char v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  uint64_t v333;
  uint64_t v334;
  __int16 v335;
  char v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  char v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  uint64_t v346;
  uint64_t v347;
  __int16 v348;
  char v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  uint64_t v354;
  __int16 v355;
  char v356;
  __int128 v357;
  uint64_t v358;
  char v359;
  uint64_t v360;
  char v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  uint64_t v366;
  __int16 v367;
  __int128 v368;
  uint64_t v369;
  char v370;
  WTF *v371;
  uint8x8_t v372;
  char v373;
  uint64_t v374;
  char v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  uint64_t v379;
  uint64_t v380;
  __int16 v381;
  uint64_t v382;
  __int128 v383;
  __int128 v384;
  char v385;
  WTF *v386;
  uint8x8_t v387;
  char v388;
  char v389;
  char v390;
  int v391;
  uint64_t v392;

  v392 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 680))
  {
LABEL_191:
    __break(1u);
    goto LABEL_192;
  }
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v6 = v7 - 96;
    else
      v6 = 0;
  }
  if (*(_BYTE *)(v6 + 274))
  {
LABEL_192:
    __break(0xC471u);
    JUMPOUT(0x1952B8078);
  }
  WebCore::convertAndValidate(a2, (WebCore::Document *)*((unsigned int *)this + 166), *(const WebCore::ApplePayRequestBase **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 336) + 8) + 24)+ 8)+ 1240), (uint64_t)this + 88, (uint64_t)v316);
  if (v318)
  {
    if (v318 == 1)
    {
      v8 = v317;
      v317 = 0;
      *(_BYTE *)a3 = v316[0];
      *(_QWORD *)(a3 + 8) = v8;
      v9 = 1;
      *(_BYTE *)(a3 + 16) = 1;
LABEL_115:
      (*(&off_1E3352AC8 + v9))((int)v277, (WebCore::ApplePaySessionPaymentRequest *)v316);
      return;
    }
LABEL_194:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)v277, (const WebCore::ApplePaySessionPaymentRequest *)v316);
  v284 = 1;
  v11 = *((_QWORD *)this + 10);
  v12 = *(const WTF::StringImpl **)(v11 + 152);
  if (v12)
    *(_DWORD *)v12 += 4;
  v276 = v12;
  v13 = v278;
  v278 = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::validate(&v319, (WTF **)(v11 + 152), &v276);
  if ((_BYTE)v321)
    goto LABEL_194;
  v14 = *(_DWORD **)(v11 + 160);
  if (v14)
    *v14 += 2;
  v15 = *(_BYTE *)(v11 + 168) ^ 1;
  v16 = *(WTF::StringImpl **)(v11 + 144);
  if (v16)
    *(_DWORD *)v16 += 2;
  LOBYTE(v319) = v15;
  v320 = v16;
  v321 = (unint64_t)v14;
  v322 = 0x7FF8000000000000;
  v323 = 1;
  v324 = 1;
  v325 = vdupq_n_s64(0x7FF8000000000000uLL);
  v326 = 0;
  LOWORD(v327) = 0;
  WebCore::ApplePaySessionPaymentRequest::setTotal((uint64_t)v277, (uint64_t)&v319);
  v18 = v326;
  v326 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)v321;
  *(_QWORD *)&v321 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v320;
  v320 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  WebCore::ApplePayPaymentHandler::firstApplicableModifier((WebCore::ApplePayPaymentHandler *)&v319, (uint64_t)this);
  if (v391)
  {
    if (v391 != 1)
      goto LABEL_194;
    v23 = v321;
    *(_QWORD *)&v321 = 0;
    *(_BYTE *)a3 = (_BYTE)v320;
    *(_QWORD *)(a3 + 8) = v23;
    v24 = 1;
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_110;
  }
  LOBYTE(v205) = 0;
  v275 = 0;
  if (!v390)
  {
    LOBYTE(v140) = 0;
    v204 = 0;
    if (*(_BYTE *)(v11 + 80))
      goto LABEL_80;
LABEL_88:
    v86 = *((_QWORD *)this + 10);
    v21.i32[0] = v280;
    v87 = (int16x8_t)vmovl_u8(v21);
    v22.i32[0] = *(_DWORD *)(v86 + 52);
    v88 = (int16x4_t)vmovl_u8(v22).u64[0];
    *(int8x8_t *)v87.i8 = vorr_s8((int8x8_t)vrev64_s16(v88), *(int8x8_t *)v87.i8);
    v280 = vmovn_s16(v87).u32[0];
    v279 |= *(_BYTE *)(v86 + 56);
    if (v88.i16[3])
    {
      v89 = *(_DWORD *)(v86 + 60);
      if (v89 == 2)
        v90 = 2;
      else
        v90 = v89 == 1;
      v281 = v90;
    }
    WebCore::ApplePayPaymentHandler::computeShippingMethods((uint64_t)&v137, (uint64_t)this);
    v91 = v139;
    if (v139)
    {
      if (v139 != 1)
        goto LABEL_194;
      v92 = (char)v137;
      v93 = &v138;
LABEL_103:
      v98 = *v93;
      *v93 = 0;
      *(_BYTE *)a3 = v92;
      *(_QWORD *)(a3 + 8) = v98;
      *(_BYTE *)(a3 + 16) = 1;
LABEL_104:
      ((void (*)(WTF **, WTF **))off_1E3352A98[v91])(&v134, &v137);
      goto LABEL_105;
    }
    v134 = v137;
    v94 = v138;
    v137 = 0;
    v138 = 0;
    v135 = v94;
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&v282, &v134);
    if (HIDWORD(v135))
      WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(v134, (WTF *)((char *)v134 + 104 * HIDWORD(v135)));
    v97 = v134;
    if (v134)
    {
      v134 = 0;
      LODWORD(v135) = 0;
      WTF::fastFree(v97, v95);
    }
    if (v391)
    {
      if (v391 != 1)
        goto LABEL_194;
      v92 = (char)v320;
      v93 = (WTF::StringImpl **)&v321;
      goto LABEL_103;
    }
    if (!v204)
    {
LABEL_175:
      WebCore::PaymentRequestValidator::validate((uint64_t)v277, 56, (uint64_t)&v134, v96);
      if (v136)
      {
        v127 = v135;
        v135 = 0;
        *(_BYTE *)a3 = (_BYTE)v134;
        *(_QWORD *)(a3 + 8) = v127;
      }
      else
      {
        v128 = *((_QWORD *)this + 3);
        if (v128)
        {
          v129 = *(_QWORD *)(v128 + 8);
          if (v129)
            v128 = v129 - 96;
          else
            v128 = 0;
        }
        if (*(_BYTE *)(v128 + 274))
        {
          __break(0xC471u);
          JUMPOUT(0x1952B8098);
        }
        WebCore::PaymentCoordinator::beginPaymentSession(*(WebCore::PaymentCoordinator **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v128 + 336) + 8) + 24)+ 8)+ 1240), a2, (WebCore::ApplePayPaymentHandler *)((char *)this + 8), (const WebCore::ApplePaySessionPaymentRequest *)v277);
        if ((v130 & 1) != 0)
        {
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
LABEL_186:
          if (v136)
          {
            v131 = v135;
            v135 = 0;
            if (v131)
            {
              if (*(_DWORD *)v131 == 2)
                WTF::StringImpl::destroy(v131, v126);
              else
                *(_DWORD *)v131 -= 2;
            }
          }
          goto LABEL_104;
        }
        *(_BYTE *)a3 = 16;
        *(_QWORD *)(a3 + 8) = 0;
      }
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_186;
    }
    std::__optional_storage_base<WebCore::ApplePayRecurringPaymentRequest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplePayRecurringPaymentRequest,false>>((uint64_t)&v285, (WTF::StringImpl *)&v155);
    if (v204)
    {
      if (v296 == v184)
      {
        if (v296)
          WebCore::ApplePayAutomaticReloadPaymentRequest::operator=((uint64_t)&v286, (WTF::StringImpl *)&v174);
      }
      else if (v296)
      {
        WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v286, v100);
        v296 = 0;
      }
      else
      {
        v101 = v174;
        v174 = 0;
        v286 = v101;
        v287 = v175;
        v96 = 0;
        v102 = v176;
        v176 = 0u;
        v288 = v102;
        v289 = v177;
        v290 = v178;
        v291 = v179;
        v292 = v180;
        v293 = v181;
        v103 = v182;
        v182 = 0u;
        v294 = v103;
        v104 = v183;
        v180 = 0;
        v183 = 0;
        v295 = v104;
        v296 = 1;
      }
      if (v204)
      {
        if (v299 == v187)
        {
          if (v299)
          {
            if (v298.i32[1])
            {
              v105 = v297;
              v106 = 40 * v298.u32[1];
              do
              {
                WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v105, v100);
                v105 = (WTF *)(v107 + 40);
                v106 -= 40;
              }
              while (v106);
            }
            v108 = v297;
            if (v297)
            {
              v297 = 0;
              v298.i32[0] = 0;
              WTF::fastFree(v108, v100);
            }
            v109 = v185;
            v185 = 0;
            v297 = v109;
            v96 = v186;
            v186 = 0;
            v298 = v96;
          }
        }
        else if (v299)
        {
          if (v298.i32[1])
          {
            v110 = v297;
            v111 = 40 * v298.u32[1];
            do
            {
              WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v110, v100);
              v110 = (WTF *)(v112 + 40);
              v111 -= 40;
            }
            while (v111);
          }
          v113 = v297;
          if (v297)
          {
            v297 = 0;
            v298.i32[0] = 0;
            WTF::fastFree(v113, v100);
          }
          v299 = 0;
        }
        else
        {
          v114 = v185;
          v185 = 0;
          v297 = v114;
          v96 = v186;
          v186 = 0;
          v298 = v96;
          v299 = 1;
        }
        if (v204)
        {
          if (v311 == v199)
          {
            if (v311)
              WebCore::ApplePayDeferredPaymentRequest::operator=((uint64_t)&v300, (WTF::StringImpl *)&v188);
          }
          else if (v311)
          {
            WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&v300, v100);
            v311 = 0;
          }
          else
          {
            v96 = 0;
            v115 = v190;
            v190 = 0u;
            v302 = v115;
            v303 = v191;
            v304 = v192;
            v116 = v197;
            v117 = v198;
            v197 = 0u;
            v198 = 0u;
            v118 = v188;
            v188 = 0;
            v300 = v118;
            v301 = v189;
            v305 = v193;
            v119 = v194;
            v194 = 0;
            v306 = v119;
            v307 = v195;
            v308 = v196;
            v309 = v116;
            v310 = v117;
            v311 = 1;
          }
          if (v204)
          {
            if (v315 == v203)
            {
              if (v315)
              {
                if (v314 == v202)
                {
                  if (v314)
                  {
                    v120 = v312;
                    if (v312)
                    {
                      v312 = 0;
                      v313.i32[0] = 0;
                      WTF::fastFree(v120, v100);
                    }
                    v121 = v200;
                    v200 = 0;
                    v312 = v121;
                    v96 = v201;
                    v201 = 0;
                    v313 = v96;
                  }
                }
                else if (v314)
                {
                  v124 = v312;
                  if (v312)
                  {
                    v312 = 0;
                    v313.i32[0] = 0;
                    WTF::fastFree(v124, v100);
                  }
                  v314 = 0;
                }
                else
                {
                  v125 = v200;
                  v200 = 0;
                  v312 = v125;
                  v96 = v201;
                  v201 = 0;
                  v313 = v96;
                  v314 = 1;
                }
              }
            }
            else if (v315)
            {
              if (v314)
              {
                v122 = v312;
                if (v312)
                {
                  v312 = 0;
                  v313.i32[0] = 0;
                  WTF::fastFree(v122, v100);
                }
              }
              v315 = 0;
            }
            else
            {
              LOBYTE(v312) = 0;
              v314 = 0;
              if (v202)
              {
                v123 = v200;
                v200 = 0;
                v312 = v123;
                v96 = v201;
                v201 = 0;
                v313 = v96;
                v314 = 1;
              }
              v315 = 1;
            }
            goto LABEL_175;
          }
        }
      }
    }
    goto LABEL_191;
  }
  v25 = v320;
  v320 = 0;
  v205 = v25;
  LOBYTE(v206) = 0;
  v209 = 0;
  if (v325.i8[0])
  {
    v26 = v321;
    v321 = 0uLL;
    v206 = v26;
    v27 = v322;
    v322 = 0;
    v207 = v27;
    v208 = v323;
    v209 = 1;
  }
  v28 = v325.i64[1];
  v325.i64[1] = 0;
  v210 = v28;
  v29 = v326;
  v326 = 0;
  v211 = v29;
  v212 = 0;
  if (v327)
  {
    v30 = *(_QWORD *)(((unint64_t)(v327 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v31 = *(_QWORD **)(v30 + 40);
    if (!v31)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v327 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
      v31 = *(_QWORD **)(v30 + 40);
    }
    *(_QWORD *)(v30 + 40) = *v31;
    v31[2] = 0;
    v32 = v31 + 2;
    *v31 = 0;
    v31[1] = 0;
    v212 = v31 + 2;
    v33 = v327;
    if (v327)
      v33 = (_QWORD *)*v327;
    v34 = (unint64_t)(v32 - 2);
    if ((v33 != 0) != (*v32 != 0))
    {
      if (v33)
      {
        v35 = *(unint64_t **)((v34 & 0xFFFFFFFFFFFFF000) + 0x10);
        v36 = v35[3];
        v35 += 3;
        *(_QWORD *)v34 = v36;
        *(v32 - 1) = v35;
        *v35 = v34;
        *(_QWORD *)(v36 + 8) = v34;
      }
      else
      {
        v133 = *(_QWORD *)v34;
        v132 = (_QWORD *)*(v32 - 1);
        *v132 = *(_QWORD *)v34;
        *(_QWORD *)(v133 + 8) = v132;
        *(_QWORD *)v34 = 0;
        *(_QWORD *)(v34 + 8) = 0;
        v32 = v212;
      }
    }
    *v32 = v33;
  }
  v213 = v328;
  v214 = 0;
  v221 = 0;
  if (v336)
  {
    v215 = v330;
    v37 = v329;
    v214 = v329;
    v330 = 0uLL;
    v216 = v331;
    v217 = v332;
    v38 = v334;
    v334 = 0;
    v218 = v333;
    v219 = v38;
    v220 = v335;
    v221 = 1;
  }
  else
  {
    v37 = 0;
  }
  v39 = v337;
  v337 = 0;
  v222 = v39;
  v40 = v338;
  v41 = HIDWORD(v338);
  v338 = 0;
  v223 = __PAIR64__(v41, v40);
  v42 = v339;
  v339 = 0;
  v224 = v42;
  v43 = v340;
  v44 = HIDWORD(v340);
  v340 = 0;
  v225 = __PAIR64__(v44, v43);
  LOBYTE(v226) = 0;
  v244 = 0;
  if (v359)
  {
    v228 = v343;
    v226 = v341;
    v227 = v342;
    v341 = 0;
    v343 = 0uLL;
    v229 = v344;
    v230 = v345;
    v45 = v347;
    v347 = 0;
    v231 = v346;
    v232 = v45;
    v233 = v348;
    v234 = 0;
    v241 = 0;
    if (v356)
    {
      v234 = v349;
      v46 = v350;
      v350 = 0uLL;
      v235 = v46;
      v236 = v351;
      v237 = v352;
      v47 = v354;
      v354 = 0;
      v238 = v353;
      v239 = v47;
      v240 = v355;
      v241 = 1;
    }
    v48 = v357;
    v357 = 0uLL;
    v242 = v48;
    v49 = v358;
    v358 = 0;
    v243 = v49;
    v244 = 1;
  }
  LOBYTE(v245) = 0;
  v255 = 0;
  if (v370)
  {
    v245 = v360;
    v246 = v361;
    v50 = v362;
    v362 = 0u;
    v247 = v50;
    v248 = v363;
    v249 = v364;
    v51 = v366;
    v360 = 0;
    v366 = 0;
    v250 = v365;
    v251 = v51;
    v252 = v367;
    v52 = v368;
    v368 = 0u;
    v253 = v52;
    v53 = v369;
    v369 = 0;
    v254 = v53;
    v255 = 1;
  }
  LOBYTE(v256) = 0;
  v258 = 0;
  if (v373)
  {
    v54 = v371;
    v371 = 0;
    v256 = v54;
    v55 = v372;
    v372 = 0;
    v257 = v55;
    v258 = 1;
  }
  LOBYTE(v259) = 0;
  v270 = 0;
  if (v385)
  {
    v56 = v376;
    v376 = 0u;
    v261 = v56;
    v262 = v377;
    v263 = v378;
    v57 = v383;
    v58 = v384;
    v383 = 0u;
    v384 = 0u;
    v59 = v374;
    v374 = 0;
    v259 = v59;
    v260 = v375;
    v264 = v379;
    v60 = v380;
    v380 = 0;
    v265 = v60;
    v266 = v381;
    v267 = v382;
    v268 = v57;
    v269 = v58;
    v270 = 1;
  }
  LOBYTE(v271) = 0;
  v274 = 0;
  if (v389)
  {
    v273 = 0;
    if (v388)
    {
      v61 = v386;
      v386 = 0;
      v271 = v61;
      v62 = v387;
      v387 = 0;
      v272 = v62;
      v273 = 1;
    }
    v274 = 1;
  }
  v275 = 1;
  v204 = 0;
  v140 = v328;
  v141 = 0;
  v148 = 0;
  if (v336)
  {
    v141 = v37;
    v63 = v215;
    v215 = 0uLL;
    v142 = v63;
    v143 = v216;
    v144 = v217;
    v64 = v219;
    v219 = 0;
    v145 = v218;
    v146 = v64;
    v147 = v220;
    v148 = 1;
  }
  v222 = 0;
  v149 = v39;
  v223 = 0;
  v150 = v40;
  v151 = v41;
  v224 = 0;
  v152 = v42;
  v225 = 0;
  v153 = v43;
  v154 = v44;
  LOBYTE(v155) = 0;
  v173 = 0;
  if (v359)
  {
    v155 = v226;
    v156 = v227;
    v65 = v228;
    v226 = 0;
    v228 = 0uLL;
    v157 = v65;
    v158 = v229;
    v159 = v230;
    v66 = v232;
    v232 = 0;
    v160 = v231;
    v161 = v66;
    v162 = v233;
    v163 = 0;
    v170 = 0;
    if (v241)
    {
      v164 = v235;
      v165 = v236;
      v163 = v234;
      v235 = 0uLL;
      v166 = v237;
      v67 = v239;
      v239 = 0;
      v167 = v238;
      v168 = v67;
      v169 = v240;
      v170 = 1;
    }
    v68 = v242;
    v242 = 0uLL;
    v171 = v68;
    v69 = v243;
    v243 = 0;
    v172 = v69;
    v173 = 1;
  }
  LOBYTE(v174) = 0;
  v184 = 0;
  if (v370)
  {
    v174 = v245;
    v175 = v246;
    v176 = v247;
    v177 = v248;
    v247 = 0u;
    v178 = v249;
    v70 = v251;
    v245 = 0;
    v251 = 0;
    v179 = v250;
    v180 = v70;
    v181 = v252;
    v71 = v253;
    v253 = 0u;
    v182 = v71;
    v72 = v254;
    v254 = 0;
    v183 = v72;
    v184 = 1;
  }
  LOBYTE(v185) = 0;
  v187 = 0;
  if (v373)
  {
    v73 = v256;
    v256 = 0;
    v185 = v73;
    v74 = v257;
    v257 = 0;
    v186 = v74;
    v187 = 1;
  }
  LOBYTE(v188) = 0;
  v199 = 0;
  if (v385)
  {
    v75 = v261;
    v261 = 0u;
    v190 = v75;
    v191 = v262;
    v192 = v263;
    v76 = v268;
    v77 = v269;
    v268 = 0u;
    v269 = 0u;
    v78 = v259;
    v259 = 0;
    v188 = v78;
    v189 = v260;
    v193 = v264;
    v79 = v265;
    v265 = 0;
    v194 = v79;
    v195 = v266;
    v196 = v267;
    v197 = v76;
    v198 = v77;
    v199 = 1;
  }
  LOBYTE(v200) = 0;
  v203 = 0;
  if (v389)
  {
    v202 = 0;
    if (v273)
    {
      v80 = v271;
      v271 = 0;
      v200 = v80;
      v81 = v272;
      v272 = 0;
      v201 = v81;
      v202 = 1;
    }
    v203 = 1;
  }
  v204 = 1;
  if (!*(_BYTE *)(v11 + 80))
  {
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v283, (unsigned int *)&v149);
    goto LABEL_88;
  }
LABEL_80:
  WebCore::convertAndValidate((unsigned int *)&v137, (unsigned int *)(v11 + 64), &v276);
  if (!v139)
  {
    v134 = v137;
    v84 = v138;
    v137 = 0;
    v138 = 0;
    v135 = v84;
    if (v204)
      WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v134, v149, v151);
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v283, (unsigned int *)&v134);
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v134, v85);
    if (v139 != -1)
      ((void (*)(WTF **, WTF **))off_1E3352A88[v139])(&v134, &v137);
    goto LABEL_88;
  }
  if (v139 != 1)
    goto LABEL_194;
  v83 = v138;
  *(_BYTE *)a3 = (_BYTE)v137;
  *(_QWORD *)(a3 + 8) = v83;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_105:
  if (v204)
    WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v140, v82);
  if (v275)
  {
    WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v213, v82);
    WebCore::PaymentDetailsModifier::~PaymentDetailsModifier((WebCore::PaymentDetailsModifier *)&v205, v99);
  }
  v24 = v391;
  if (v391 != -1)
LABEL_110:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3352AA8[v24])(&v205, &v320);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v82);
    else
      *(_DWORD *)v12 -= 2;
  }
  WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)v277, (WTF::StringImpl *)v82);
  v9 = v318;
  if (v318 != -1)
    goto LABEL_115;
}

void WebCore::ApplePayPaymentHandler::firstApplicableModifier(WebCore::ApplePayPaymentHandler *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSCell *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint16x8_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  WTF::StringImpl *v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  BOOL v55;
  int v56;
  _BOOL4 v57;
  WTF::StringImpl *v58;
  uint16x8_t v59;
  uint16x8_t v60;
  unsigned __int16 *v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  int v65;
  _BOOL4 v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  char v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  int v72;
  int v73;
  _BOOL4 v74;
  char v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  char v78;
  WTF::StringImpl *v79;
  int v80;
  int v81;
  _BOOL4 v82;
  unsigned __int16 *v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  _BOOL4 v88;
  unsigned __int16 *v89;
  uint64_t v90;
  unint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  char v94;
  WTF::StringImpl *v95;
  int v96;
  int v97;
  _BOOL4 v98;
  int v99;
  int v100;
  _BOOL4 v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  char v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  int v108;
  int v109;
  _BOOL4 v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unsigned __int16 *v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  _DWORD *v118;
  _DWORD *v119;
  _DWORD *v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  _DWORD *v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD **v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  WTF::StringImpl *v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  __int128 v171;
  _DWORD *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  WTF::StringImpl *v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  WTF::StringImpl *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  WTF::StringImpl *v206;
  __int128 v207;
  _DWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  void *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  int v221;
  int v222;
  _BOOL4 v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  WTF::StringImpl *v234;
  __int128 v235;
  _DWORD *v236;
  char v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  char v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  __int16 v249;
  unsigned __int8 v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  __int16 v262;
  char v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  uint64_t v267;
  uint64_t v268;
  __int16 v269;
  char v270;
  __int128 v271;
  WTF::StringImpl *v272;
  char v273;
  uint64_t v274;
  char v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  __int16 v281;
  __int128 v282;
  WTF::StringImpl *v283;
  char v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  char v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  uint64_t v293;
  uint64_t v294;
  __int16 v295;
  uint64_t v296;
  __int128 v297;
  __int128 v298;
  char v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  char v303;
  WTF::StringImpl *v304;
  __int128 v305;
  _DWORD *v306;
  char v307;
  char v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  char v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  uint64_t v317;
  uint64_t v318;
  __int16 v319;
  char v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  uint64_t v331;
  __int16 v332;
  char v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  uint64_t v337;
  uint64_t v338;
  __int16 v339;
  char v340;
  __int128 v341;
  WTF::StringImpl *v342;
  char v343;
  uint64_t v344;
  char v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  uint64_t v350;
  __int16 v351;
  __int128 v352;
  WTF::StringImpl *v353;
  char v354;
  uint64_t v355;
  uint64_t v356;
  char v357;
  uint64_t v358;
  char v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  uint64_t v363;
  uint64_t v364;
  __int16 v365;
  uint64_t v366;
  __int128 v367;
  __int128 v368;
  char v369;
  uint64_t v370;
  uint64_t v371;
  char v372;
  char v373;
  char v374;
  uint64_t v375;
  char v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  uint64_t v380;
  uint64_t v381;
  __int16 v382;
  unsigned __int8 v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  char v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  uint64_t v393;
  uint64_t v394;
  __int16 v395;
  char v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  uint64_t v401;
  __int16 v402;
  char v403;
  __int128 v404;
  WTF::StringImpl *v405;
  char v406;
  uint64_t v407;
  char v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  uint64_t v412;
  uint64_t v413;
  __int16 v414;
  __int128 v415;
  WTF::StringImpl *v416;
  char v417;
  uint64_t v418;
  uint64_t v419;
  char v420;
  uint64_t v421;
  char v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  uint64_t v426;
  uint64_t v427;
  __int16 v428;
  uint64_t v429;
  __int128 v430;
  __int128 v431;
  char v432;
  uint64_t v433;
  uint64_t v434;
  char v435;
  char v436;
  _BYTE v437[40];
  unsigned int v438;
  char v439;
  WTF::StringImpl *v440;
  WTF::StringImpl *v441;
  WTF::StringImpl *v442;
  WTF::StringImpl *v443;
  WTF::StringImpl *v444;
  WTF::StringImpl *v445;
  WTF::StringImpl *v446;
  WTF::StringImpl *v447;
  WTF::StringImpl *v448;
  char v449[8];
  uint64_t v450;
  char v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  uint64_t v455;
  uint64_t v456;
  __int16 v457;
  char v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  char v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  uint64_t v468;
  uint64_t v469;
  __int16 v470;
  char v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  uint64_t v475;
  uint64_t v476;
  __int16 v477;
  char v478;
  __int128 v479;
  WTF::StringImpl *v480;
  char v481;
  uint64_t v482;
  char v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  uint64_t v487;
  uint64_t v488;
  __int16 v489;
  __int128 v490;
  WTF::StringImpl *v491;
  char v492;
  uint64_t v493;
  uint64_t v494;
  char v495;
  uint64_t v496;
  char v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  uint64_t v501;
  uint64_t v502;
  __int16 v503;
  uint64_t v504;
  __int128 v505;
  __int128 v506;
  char v507;
  uint64_t v508;
  uint64_t v509;
  char v510;
  char v511;
  unsigned int v512;
  uint64_t v513;

  v513 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 80);
  if (*(_BYTE *)(v3 + 128))
  {
    v4 = a2;
    v5 = *(_QWORD *)(a2 + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        v7 = (WebCore::ScriptExecutionContext *)(v6 - 96);
      else
        v7 = 0;
    }
    else
    {
      v7 = 0;
    }
    if (*((_BYTE *)v7 + 274))
    {
LABEL_399:
      __break(0xC471u);
      JUMPOUT(0x1952B9C48);
    }
    v8 = WebCore::ScriptExecutionContext::globalObject(v7);
    if (!*(_BYTE *)(v3 + 128))
    {
LABEL_376:
      __break(1u);
      goto LABEL_399;
    }
    v9 = v8;
    v10 = 0;
    v233 = *(_QWORD *)(v4 + 80);
    while (1)
    {
      if (v10 >= *(unsigned int *)(v3 + 124))
        goto LABEL_374;
      v11 = *(_QWORD *)(v3 + 112);
      v12 = (WTF::StringImpl **)(v11 + 72 * v10);
      WebCore::convertAndValidatePaymentMethodIdentifier(v12, (uint64_t)v437);
      if (v439)
        break;
LABEL_39:
      ++v10;
      if (!*(_BYTE *)(v3 + 128))
        goto LABEL_376;
    }
    v13 = v438;
    if (v438 != 1)
    {
      v16 = 4;
      goto LABEL_36;
    }
    v14 = WTF::URL::host((WTF::URL *)v437);
    if ((char *)v14 == "apple.com" || v15 != 9)
    {
      v16 = 4;
      if ((char *)v14 != "apple.com" || v15 != 9)
        goto LABEL_34;
    }
    else if ((v15 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v14 != 97 || *(_DWORD *)(v14 + 1) != 1701605488 || *(_DWORD *)(v14 + 5) != 1836016430)
        goto LABEL_33;
    }
    else
    {
      if (*(_WORD *)v14 != 97)
        goto LABEL_33;
      v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v14 + 2), (int16x8_t)xmmword_1968DDA70);
      v25.i16[0] = vminvq_u16(v25);
      if (!v25.i32[0])
        goto LABEL_33;
    }
    v17 = WTF::URL::path((WTF::URL *)v437);
    if ((char *)v17 == "/apple-pay" || v18 != 10)
    {
      v16 = 4;
      if ((char *)v17 != "/apple-pay" || v18 != 10)
        goto LABEL_34;
    }
    else if ((v18 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v17 != 47
        || *(_QWORD *)(v17 + 1) != 0x61702D656C707061
        || *(_QWORD *)(v17 + 2) != 0x7961702D656C7070)
      {
LABEL_33:
        v16 = 4;
LABEL_34:
        if (!v439)
          goto LABEL_38;
        v13 = v438;
LABEL_36:
        if (v13 != 0xFFFFFFFFLL)
          ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3352A68[v13])(&v304, v437);
LABEL_38:
        if (v16 != 4)
          return;
        goto LABEL_39;
      }
    }
    else
    {
      if (*(_WORD *)v17 != 47)
        goto LABEL_33;
      v59 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v17 + 2), (int16x8_t)xmmword_1968DDA80);
      v59.i16[0] = vminvq_u16(v59);
      if (!v59.i32[0])
        goto LABEL_33;
      v60 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v17 + 4), (int16x8_t)xmmword_1968DDA90);
      v60.i16[0] = vminvq_u16(v60);
      if (!v60.i32[0])
        goto LABEL_33;
    }
    if (v10 >= *(unsigned int *)(v233 + 188))
    {
      __break(0xC471u);
      JUMPOUT(0x1952B9C5CLL);
    }
    v19 = *(_QWORD *)(*(_QWORD *)(v233 + 176) + 8 * v10);
    if (!v19 || !*(_DWORD *)(v19 + 4))
      goto LABEL_33;
    v230 = v4;
    v232 = v9;
    v20 = *(_QWORD *)(v9 + 56);
    JSC::JSLockHolder::JSLockHolder();
    if (v10 >= *(unsigned int *)(v233 + 188))
    {
      __break(0xC471u);
      JUMPOUT(0x1952B9C64);
    }
    v21 = JSC::JSONParse();
    if (*(_QWORD *)(v20 + 16))
    {
      *((_BYTE *)this + 8) = 37;
      *((_QWORD *)this + 2) = 0;
      v16 = 1;
      *((_DWORD *)this + 184) = 1;
      MEMORY[0x19AEA32A0](&v304);
      v4 = v230;
      goto LABEL_34;
    }
    v22 = (JSC::JSCell *)v21;
    MEMORY[0x19AEA32A0](&v304);
    WebCore::convertDictionary<WebCore::ApplePayModifier>(v22, (WTF::StringImpl **)v9, (uint64_t)v449);
    v24 = v512;
    v4 = v230;
    if (v512)
    {
      *((_BYTE *)this + 8) = 37;
      *((_QWORD *)this + 2) = 0;
      v16 = 1;
      *((_DWORD *)this + 184) = 1;
      goto LABEL_348;
    }
    v375 = v450;
    v376 = 0;
    v383 = 0;
    if (v458)
    {
      v376 = v451;
      v26 = v452;
      v452 = 0uLL;
      v377 = v26;
      v378 = v453;
      v379 = v454;
      v380 = v455;
      v27 = v456;
      v456 = 0;
      v381 = v27;
      v382 = v457;
      v383 = 1;
    }
    v28 = v459;
    v459 = 0;
    v384 = v28;
    v29 = v460;
    v460 = 0;
    v385 = v29;
    v30 = v461;
    v461 = 0;
    v386 = v30;
    v31 = v462;
    v462 = 0;
    v387 = v31;
    LOBYTE(v388) = 0;
    v406 = 0;
    if (v481)
    {
      v388 = v463;
      v389 = v464;
      v32 = v465;
      v463 = 0;
      v465 = 0uLL;
      v390 = v32;
      v391 = v466;
      v392 = v467;
      v393 = v468;
      v33 = v469;
      v469 = 0;
      v394 = v33;
      v395 = v470;
      v396 = 0;
      v403 = 0;
      if (v478)
      {
        v396 = v471;
        v34 = v472;
        v472 = 0uLL;
        v397 = v34;
        v398 = v473;
        v399 = v474;
        v400 = v475;
        v35 = v476;
        v476 = 0;
        v401 = v35;
        v402 = v477;
        v403 = 1;
      }
      v36 = v479;
      v479 = 0uLL;
      v404 = v36;
      v37 = v480;
      v480 = 0;
      v405 = v37;
      v406 = 1;
    }
    LOBYTE(v407) = 0;
    v417 = 0;
    if (v492)
    {
      v407 = v482;
      v408 = v483;
      v38 = v484;
      v484 = 0u;
      v409 = v38;
      v410 = v485;
      v411 = v486;
      v412 = v487;
      v39 = v488;
      v482 = 0;
      v488 = 0;
      v413 = v39;
      v414 = v489;
      v40 = v490;
      v490 = 0u;
      v415 = v40;
      v41 = v491;
      v491 = 0;
      v416 = v41;
      v417 = 1;
    }
    LOBYTE(v418) = 0;
    v420 = 0;
    if (v495)
    {
      v42 = v493;
      v493 = 0;
      v418 = v42;
      v43 = v494;
      v494 = 0;
      v419 = v43;
      v420 = 1;
    }
    LOBYTE(v421) = 0;
    v432 = 0;
    if (v507)
    {
      v421 = v496;
      v422 = v497;
      v44 = v498;
      v498 = 0u;
      v423 = v44;
      v424 = v499;
      v425 = v500;
      v426 = v501;
      v45 = v502;
      v496 = 0;
      v502 = 0;
      v427 = v45;
      v428 = v503;
      v429 = v504;
      v46 = v505;
      v47 = v506;
      v505 = 0u;
      v506 = 0u;
      v430 = v46;
      v431 = v47;
      v432 = 1;
    }
    LOBYTE(v433) = 0;
    v436 = 0;
    if (v511)
    {
      v435 = 0;
      if (v510)
      {
        v48 = v508;
        v508 = 0;
        v433 = v48;
        v49 = v509;
        v509 = 0;
        v434 = v49;
        v435 = 1;
      }
      v436 = 1;
    }
    if (!v481)
      goto LABEL_152;
    if (v391 != 1)
      goto LABEL_169;
    if (!(_QWORD)v390)
      goto LABEL_170;
    v50 = *((_QWORD *)&v390 + 1);
    if (*((_QWORD *)&v390 + 1))
    {
      v51 = *(unsigned __int16 **)(*((_QWORD *)&v390 + 1) + 8);
      v52 = *(unsigned int *)(*((_QWORD *)&v390 + 1) + 4);
      v53 = ((unint64_t)*(unsigned int *)(*((_QWORD *)&v390 + 1) + 16) >> 2) & 1;
    }
    else
    {
      v51 = 0;
      v52 = 0;
      v53 = 1;
    }
    if (!WebCore::isValidDecimalMonetaryValue(v51, v52 | (v53 << 32)) && v389)
    {
      if (v50)
      {
        v54 = *(_DWORD *)(v50 + 4);
        *(_DWORD *)v50 += 2;
        if (v54 < 0)
          goto LABEL_381;
      }
      else
      {
        v54 = 0;
      }
      v55 = __OFADD__(v54, 24);
      v56 = v54 + 24;
      if (v55 || __OFADD__(v56, 1))
      {
LABEL_381:
        v448 = 0;
LABEL_382:
        __break(0xC471u);
        JUMPOUT(0x1952B9C70);
      }
      v57 = !v50 || (*(_BYTE *)(v50 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v56 + 1), v57, 34, v50, (int8x16_t *)"\" is not a valid amount.", 0x18u, &v448);
      v58 = v448;
      if (!v448)
        goto LABEL_382;
      v448 = 0;
      if (!v50)
        goto LABEL_345;
      goto LABEL_202;
    }
    if (v403)
    {
      if (v398 != 1)
        goto LABEL_170;
      if (!(_QWORD)v397)
      {
        v75 = 33;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v58 = v304;
        goto LABEL_346;
      }
      v50 = *((_QWORD *)&v397 + 1);
      if (*((_QWORD *)&v397 + 1))
      {
        v61 = *(unsigned __int16 **)(*((_QWORD *)&v397 + 1) + 8);
        v62 = *(unsigned int *)(*((_QWORD *)&v397 + 1) + 4);
        v63 = ((unint64_t)*(unsigned int *)(*((_QWORD *)&v397 + 1) + 16) >> 2) & 1;
      }
      else
      {
        v61 = 0;
        v62 = 0;
        v63 = 1;
      }
      if (!WebCore::isValidDecimalMonetaryValue(v61, v62 | (v63 << 32)) && v396)
      {
        if (v50)
        {
          v64 = *(_DWORD *)(v50 + 4);
          *(_DWORD *)v50 += 2;
          if (v64 < 0)
            goto LABEL_383;
        }
        else
        {
          v64 = 0;
        }
        v55 = __OFADD__(v64, 24);
        v65 = v64 + 24;
        if (v55 || __OFADD__(v65, 1))
        {
LABEL_383:
          v447 = 0;
LABEL_384:
          __break(0xC471u);
          JUMPOUT(0x1952B9C7CLL);
        }
        v66 = !v50 || (*(_BYTE *)(v50 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v65 + 1), v66, 34, v50, (int8x16_t *)"\" is not a valid amount.", 0x18u, &v447);
        v58 = v447;
        if (!v447)
          goto LABEL_384;
        v447 = 0;
        if (!v50)
          goto LABEL_345;
        goto LABEL_202;
      }
    }
    v67 = (WTF::StringImpl *)*((_QWORD *)&v404 + 1);
    if (*((_QWORD *)&v404 + 1))
      **((_DWORD **)&v404 + 1) += 2;
    v234 = v67;
    MEMORY[0x19AEA52D4](&v304, &v234, 0);
    v68 = v234;
    v234 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v23);
      else
        *(_DWORD *)v68 -= 2;
    }
    v69 = v305;
    v70 = v304;
    v304 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
        WTF::StringImpl::destroy(v70, v23);
        if ((v69 & 1) == 0)
        {
LABEL_115:
          v71 = *((_QWORD *)&v404 + 1);
          if (*((_QWORD *)&v404 + 1))
          {
            v72 = *(_DWORD *)(*((_QWORD *)&v404 + 1) + 4);
            **((_DWORD **)&v404 + 1) += 2;
            v9 = v232;
            if (v72 < 0)
              goto LABEL_385;
          }
          else
          {
            v72 = 0;
            v9 = v232;
          }
          v55 = __OFADD__(v72, 21);
          v73 = v72 + 21;
          if (v55 || __OFADD__(v73, 1))
          {
LABEL_385:
            v446 = 0;
LABEL_386:
            __break(0xC471u);
            JUMPOUT(0x1952B9C88);
          }
          v74 = !v71 || (*(_BYTE *)(v71 + 16) & 4) != 0;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v73 + 1), v74, 34, v71, (int8x16_t *)"\" is not a valid URL.", 0x15u, &v446);
          v58 = v446;
          if (!v446)
            goto LABEL_386;
          v446 = 0;
          if (!v71)
            goto LABEL_345;
          goto LABEL_341;
        }
LABEL_130:
        if (!v406)
          goto LABEL_376;
        v76 = v405;
        if (!v405)
          goto LABEL_152;
        *(_DWORD *)v405 += 2;
        v234 = v76;
        MEMORY[0x19AEA52D4](&v304, &v234, 0);
        v77 = v234;
        v234 = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 == 2)
            WTF::StringImpl::destroy(v77, v23);
          else
            *(_DWORD *)v77 -= 2;
        }
        v78 = v305;
        v79 = v304;
        v304 = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2)
          {
            WTF::StringImpl::destroy(v79, v23);
            if ((v78 & 1) == 0)
            {
LABEL_139:
              v71 = (uint64_t)v405;
              if (v405)
              {
                v80 = *((_DWORD *)v405 + 1);
                *(_DWORD *)v405 += 2;
                if (v80 < 0)
                  goto LABEL_387;
              }
              else
              {
                v80 = 0;
              }
              v55 = __OFADD__(v80, 21);
              v81 = v80 + 21;
              if (v55 || __OFADD__(v81, 1))
              {
LABEL_387:
                v445 = 0;
LABEL_388:
                __break(0xC471u);
                JUMPOUT(0x1952B9C94);
              }
              v82 = !v71 || (*(_BYTE *)(v71 + 16) & 4) != 0;
              v9 = v232;
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v81 + 1), v82, 34, v71, (int8x16_t *)"\" is not a valid URL.", 0x15u, &v445);
              v58 = v445;
              if (!v445)
                goto LABEL_388;
              v445 = 0;
              if (!v71)
                goto LABEL_345;
              goto LABEL_341;
            }
LABEL_152:
            if (!v417)
            {
LABEL_230:
              if (v420 && HIDWORD(v419))
              {
                v111 = 40 * HIDWORD(v419);
                v112 = (uint64_t *)(v418 + 32);
                while (1)
                {
                  v113 = *v112;
                  v231 = *v112;
                  if (*v112)
                  {
                    v114 = *(unsigned int *)(v113 + 16);
                    v115 = *(unsigned __int16 **)(v113 + 8);
                    v113 = *(unsigned int *)(v113 + 4);
                    v116 = (v114 >> 2) & 1;
                  }
                  else
                  {
                    v115 = 0;
                    v116 = 1;
                  }
                  if (!WebCore::isValidDecimalMonetaryValue(v115, v113 | (v116 << 32)))
                    break;
                  v112 += 5;
                  v111 -= 40;
                  if (!v111)
                    goto LABEL_239;
                }
                v71 = v231;
                if (v231)
                {
                  v221 = *(_DWORD *)(v231 + 4);
                  *(_DWORD *)v231 += 2;
                  v9 = v232;
                  if (v221 < 0)
                    goto LABEL_398;
                }
                else
                {
                  v221 = 0;
                  v9 = v232;
                }
                v55 = __OFADD__(v221, 24);
                v222 = v221 + 24;
                if (v55 || __OFADD__(v222, 1))
                {
LABEL_398:
                  v440 = 0;
                  goto LABEL_399;
                }
                v223 = !v231 || (*(_BYTE *)(v231 + 16) & 4) != 0;
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v222 + 1), v223, 34, v231, (int8x16_t *)"\" is not a valid amount.", 0x18u, &v440);
                v58 = v440;
                if (!v440)
                  goto LABEL_399;
                v440 = 0;
                if (!v231)
                  goto LABEL_345;
LABEL_341:
                if (*(_DWORD *)v71 != 2)
                {
                  *(_DWORD *)v71 -= 2;
                  goto LABEL_345;
                }
                v102 = (WTF::StringImpl *)v71;
                goto LABEL_344;
              }
LABEL_239:
              v9 = v232;
              if (!v432
                || (WebCore::ApplePayDeferredPaymentRequest::validate((WebCore::ApplePayDeferredPaymentRequest *)&v421, (uint64_t)&v304), !BYTE8(v305)))
              {
                if (!BYTE4(v375) || (v16 = 4, *(_BYTE *)(v4 + 692)) && (_DWORD)v375 == *(_DWORD *)(v4 + 688))
                {
                  v117 = *v12;
                  if (*v12)
                    *(_DWORD *)v117 += 2;
                  v234 = v117;
                  LOBYTE(v235) = 0;
                  v238 = 0;
                  if (*(_BYTE *)(v11 + 72 * v10 + 40))
                  {
                    v118 = *(_DWORD **)(v11 + 72 * v10 + 8);
                    if (v118)
                      *v118 += 2;
                    *(_QWORD *)&v235 = v118;
                    v119 = *(_DWORD **)(v11 + 72 * v10 + 16);
                    if (v119)
                      *v119 += 2;
                    *((_QWORD *)&v235 + 1) = v119;
                    v120 = *(_DWORD **)(v11 + 72 * v10 + 24);
                    if (v120)
                      *v120 += 2;
                    v236 = v120;
                    v237 = *(_BYTE *)(v11 + 72 * v10 + 32);
                    v238 = 1;
                  }
                  v121 = v11 + 72 * v10;
                  v124 = *(_DWORD *)(v121 + 60);
                  v122 = (unsigned int *)(v121 + 60);
                  v123 = v124;
                  v239 = 0;
                  LODWORD(v240) = 0;
                  HIDWORD(v240) = v124;
                  if (v124)
                  {
                    if (v123 >> 27)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1952B9CCCLL);
                    }
                    v125 = WTF::fastMalloc((WTF *)(32 * v123));
                    LODWORD(v240) = v123;
                    v239 = v125;
                    v126 = *v122;
                    if ((_DWORD)v126)
                    {
                      v127 = *(_QWORD *)(v122 - 3);
                      v128 = v127 + 32 * v126;
                      do
                      {
                        v129 = *(_DWORD **)v127;
                        if (*(_QWORD *)v127)
                          *v129 += 2;
                        *(_QWORD *)v125 = v129;
                        v130 = *(_DWORD **)(v127 + 8);
                        if (v130)
                          *v130 += 2;
                        *(_QWORD *)(v125 + 8) = v130;
                        v131 = *(_DWORD **)(v127 + 16);
                        if (v131)
                          *v131 += 2;
                        *(_QWORD *)(v125 + 16) = v131;
                        *(_BYTE *)(v125 + 24) = *(_BYTE *)(v127 + 24);
                        v127 += 32;
                        v125 += 32;
                      }
                      while (v127 != v128);
                    }
                  }
                  v132 = v11 + 72 * v10;
                  v241 = 0;
                  v135 = *(_QWORD *)(v132 + 64);
                  v134 = (_QWORD **)(v132 + 64);
                  v133 = v135;
                  v9 = v232;
                  if (v135)
                  {
                    v136 = (v133 - 16) & 0xFFFFFFFFFFFFF000;
                    v137 = *(_QWORD *)(v136 + 16);
                    v138 = *(_QWORD **)(v137 + 40);
                    if (!v138)
                    {
                      JSC::HandleSet::grow(*(JSC::HandleSet **)(v136 + 16));
                      v138 = *(_QWORD **)(v137 + 40);
                    }
                    *(_QWORD *)(v137 + 40) = *v138;
                    v138[2] = 0;
                    v139 = v138 + 2;
                    *v138 = 0;
                    v138[1] = 0;
                    v241 = v138 + 2;
                    v140 = *v134;
                    if (*v134)
                      v140 = (_QWORD *)*v140;
                    v141 = (unint64_t)(v139 - 2);
                    if ((v140 != 0) != (*v139 != 0))
                    {
                      if (v140)
                      {
                        v142 = *(unint64_t **)((v141 & 0xFFFFFFFFFFFFF000) + 0x10);
                        v143 = v142[3];
                        v142 += 3;
                        *(_QWORD *)v141 = v143;
                        *(v139 - 1) = v142;
                        *v142 = v141;
                        *(_QWORD *)(v143 + 8) = v141;
                      }
                      else
                      {
                        v225 = *(_QWORD *)v141;
                        v224 = (_QWORD *)*(v139 - 1);
                        *v224 = *(_QWORD *)v141;
                        *(_QWORD *)(v225 + 8) = v224;
                        *(_QWORD *)v141 = 0;
                        *(_QWORD *)(v141 + 8) = 0;
                        v139 = v241;
                      }
                    }
                    *v139 = v140;
                  }
                  v144 = v375;
                  v242 = v375;
                  v243 = 0;
                  v250 = 0;
                  v145 = v383;
                  if (v383)
                  {
                    v243 = v376;
                    v146 = v377;
                    v377 = 0uLL;
                    v244 = v146;
                    v245 = v378;
                    v246 = v379;
                    v247 = v380;
                    v147 = v381;
                    v381 = 0;
                    v248 = v147;
                    v249 = v382;
                    v145 = 1;
                    v250 = 1;
                  }
                  v148 = v384;
                  v384 = 0;
                  v251 = v148;
                  v149 = v385;
                  v385 = 0;
                  v252 = v149;
                  v150 = v386;
                  v386 = 0;
                  v253 = v150;
                  v151 = v387;
                  v387 = 0;
                  v254 = v151;
                  LOBYTE(v255) = 0;
                  v273 = 0;
                  if (v406)
                  {
                    v255 = v388;
                    v256 = v389;
                    v152 = v390;
                    v388 = 0;
                    v390 = 0uLL;
                    v257 = v152;
                    v258 = v391;
                    v259 = v392;
                    v260 = v393;
                    v153 = v394;
                    v394 = 0;
                    v261 = v153;
                    v262 = v395;
                    v263 = 0;
                    v270 = 0;
                    if (v403)
                    {
                      v263 = v396;
                      v154 = v397;
                      v397 = 0uLL;
                      v264 = v154;
                      v265 = v398;
                      v266 = v399;
                      v267 = v400;
                      v155 = v401;
                      v401 = 0;
                      v268 = v155;
                      v269 = v402;
                      v270 = 1;
                    }
                    v156 = v404;
                    v404 = 0uLL;
                    v271 = v156;
                    v157 = v405;
                    v405 = 0;
                    v272 = v157;
                    v273 = 1;
                  }
                  LOBYTE(v274) = 0;
                  v284 = 0;
                  if (v417)
                  {
                    v274 = v407;
                    v275 = v408;
                    v158 = v409;
                    v409 = 0u;
                    v276 = v158;
                    v277 = v410;
                    v278 = v411;
                    v279 = v412;
                    v159 = v413;
                    v407 = 0;
                    v413 = 0;
                    v280 = v159;
                    v281 = v414;
                    v160 = v415;
                    v415 = 0u;
                    v282 = v160;
                    v161 = v416;
                    v416 = 0;
                    v283 = v161;
                    v284 = 1;
                  }
                  LOBYTE(v285) = 0;
                  v287 = 0;
                  if (v420)
                  {
                    v162 = v418;
                    v418 = 0;
                    v285 = v162;
                    v163 = v419;
                    v419 = 0;
                    v286 = v163;
                    v287 = 1;
                  }
                  LOBYTE(v288) = 0;
                  v299 = 0;
                  if (v432)
                  {
                    v288 = v421;
                    v289 = v422;
                    v164 = v423;
                    v423 = 0u;
                    v290 = v164;
                    v291 = v424;
                    v292 = v425;
                    v293 = v426;
                    v165 = v427;
                    v421 = 0;
                    v427 = 0;
                    v294 = v165;
                    v295 = v428;
                    v296 = v429;
                    v166 = v430;
                    v167 = v431;
                    v430 = 0u;
                    v431 = 0u;
                    v297 = v166;
                    v298 = v167;
                    v299 = 1;
                  }
                  LOBYTE(v300) = 0;
                  v303 = 0;
                  if (v436)
                  {
                    v302 = 0;
                    if (v435)
                    {
                      v168 = v433;
                      v433 = 0;
                      v300 = v168;
                      v169 = v434;
                      v434 = 0;
                      v301 = v169;
                      v302 = 1;
                    }
                    v303 = 1;
                  }
                  v170 = v234;
                  v234 = 0;
                  v304 = v170;
                  LOBYTE(v305) = 0;
                  v308 = 0;
                  if (v238)
                  {
                    v171 = v235;
                    v235 = 0uLL;
                    v305 = v171;
                    v172 = v236;
                    v236 = 0;
                    v306 = v172;
                    v307 = v237;
                    v308 = 1;
                  }
                  v309 = v239;
                  v173 = v240;
                  v239 = 0;
                  v240 = 0;
                  v310 = v173;
                  v311 = 0;
                  if (v241)
                  {
                    v174 = *(_QWORD *)(((unint64_t)(v241 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v175 = *(_QWORD **)(v174 + 40);
                    if (!v175)
                    {
                      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v241 - 2) & 0xFFFFFFFFFFFFF000)
                                                              + 0x10));
                      v175 = *(_QWORD **)(v174 + 40);
                    }
                    *(_QWORD *)(v174 + 40) = *v175;
                    v175[2] = 0;
                    v176 = v175 + 2;
                    *v175 = 0;
                    v175[1] = 0;
                    v311 = v175 + 2;
                    v177 = v241;
                    if (v241)
                      v177 = (_QWORD *)*v241;
                    v178 = (unint64_t)(v176 - 2);
                    if ((v177 != 0) != (*v176 != 0))
                    {
                      if (v177)
                      {
                        v179 = *(unint64_t **)((v178 & 0xFFFFFFFFFFFFF000) + 0x10);
                        v180 = v179[3];
                        v179 += 3;
                        *(_QWORD *)v178 = v180;
                        *(v176 - 1) = v179;
                        *v179 = v178;
                        *(_QWORD *)(v180 + 8) = v178;
                      }
                      else
                      {
                        v227 = *(_QWORD *)v178;
                        v226 = (_QWORD *)*(v176 - 1);
                        *v226 = *(_QWORD *)v178;
                        *(_QWORD *)(v227 + 8) = v226;
                        *(_QWORD *)v178 = 0;
                        *(_QWORD *)(v178 + 8) = 0;
                        v176 = v311;
                      }
                    }
                    *v176 = v177;
                    v144 = v242;
                    v145 = v250;
                  }
                  v312 = v144;
                  v313 = 0;
                  v320 = 0;
                  if (v145)
                  {
                    v313 = v243;
                    v181 = v244;
                    v244 = 0uLL;
                    v314 = v181;
                    v315 = v245;
                    v316 = v246;
                    v317 = v247;
                    v182 = v248;
                    v248 = 0;
                    v318 = v182;
                    v319 = v249;
                    v320 = 1;
                  }
                  v183 = v251;
                  v251 = 0;
                  v321 = v183;
                  v184 = v252;
                  v252 = 0;
                  v322 = v184;
                  v185 = v253;
                  v253 = 0;
                  v323 = v185;
                  v186 = v254;
                  v254 = 0;
                  v324 = v186;
                  LOBYTE(v325) = 0;
                  v343 = 0;
                  if (v273)
                  {
                    v325 = v255;
                    v326 = v256;
                    v187 = v257;
                    v255 = 0;
                    v257 = 0uLL;
                    v327 = v187;
                    v328 = v258;
                    v329 = v259;
                    v330 = v260;
                    v188 = v261;
                    v261 = 0;
                    v331 = v188;
                    v332 = v262;
                    v333 = 0;
                    v340 = 0;
                    if (v270)
                    {
                      v333 = v263;
                      v189 = v264;
                      v264 = 0uLL;
                      v334 = v189;
                      v335 = v265;
                      v336 = v266;
                      v337 = v267;
                      v190 = v268;
                      v268 = 0;
                      v338 = v190;
                      v339 = v269;
                      v340 = 1;
                    }
                    v191 = v271;
                    v271 = 0uLL;
                    v341 = v191;
                    v192 = v272;
                    v272 = 0;
                    v342 = v192;
                    v343 = 1;
                  }
                  LOBYTE(v344) = 0;
                  v354 = 0;
                  if (v284)
                  {
                    v344 = v274;
                    v345 = v275;
                    v193 = v276;
                    v276 = 0u;
                    v346 = v193;
                    v347 = v277;
                    v348 = v278;
                    v349 = v279;
                    v194 = v280;
                    v274 = 0;
                    v280 = 0;
                    v350 = v194;
                    v351 = v281;
                    v195 = v282;
                    v282 = 0u;
                    v352 = v195;
                    v196 = v283;
                    v283 = 0;
                    v353 = v196;
                    v354 = 1;
                  }
                  LOBYTE(v355) = 0;
                  v357 = 0;
                  if (v287)
                  {
                    v197 = v285;
                    v285 = 0;
                    v355 = v197;
                    v198 = v286;
                    v286 = 0;
                    v356 = v198;
                    v357 = 1;
                  }
                  LOBYTE(v358) = 0;
                  v369 = 0;
                  if (v299)
                  {
                    v199 = v288;
                    v288 = 0;
                    v358 = v199;
                    v359 = v289;
                    v200 = v290;
                    v290 = 0u;
                    v360 = v200;
                    v361 = v291;
                    v362 = v292;
                    v363 = v293;
                    v201 = v294;
                    v294 = 0;
                    v364 = v201;
                    v365 = v295;
                    v366 = v296;
                    v202 = v297;
                    v203 = v298;
                    v297 = 0u;
                    v298 = 0u;
                    v367 = v202;
                    v368 = v203;
                    v369 = 1;
                  }
                  LOBYTE(v370) = 0;
                  v373 = 0;
                  if (v303)
                  {
                    v372 = 0;
                    if (v302)
                    {
                      v204 = v300;
                      v300 = 0;
                      v370 = v204;
                      v205 = v301;
                      v301 = 0;
                      v371 = v205;
                      v372 = 1;
                    }
                    v373 = 1;
                  }
                  v374 = 1;
                  *((_BYTE *)this + 728) = 0;
                  v206 = v304;
                  v304 = 0;
                  *((_QWORD *)this + 1) = v206;
                  *((_BYTE *)this + 16) = 0;
                  *((_BYTE *)this + 48) = 0;
                  if (v308)
                  {
                    v207 = v305;
                    v305 = 0uLL;
                    *((_OWORD *)this + 1) = v207;
                    v208 = v306;
                    v306 = 0;
                    *((_QWORD *)this + 4) = v208;
                    *((_BYTE *)this + 40) = v307;
                    *((_BYTE *)this + 48) = 1;
                  }
                  v209 = v309;
                  v309 = 0;
                  *((_QWORD *)this + 7) = v209;
                  v210 = v310;
                  v310 = 0;
                  *((_QWORD *)this + 8) = v210;
                  *((_QWORD *)this + 9) = 0;
                  if (v311)
                  {
                    v211 = *(_QWORD *)(((unint64_t)(v311 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v212 = *(_QWORD **)(v211 + 40);
                    if (!v212)
                    {
                      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v311 - 2) & 0xFFFFFFFFFFFFF000)
                                                              + 0x10));
                      v212 = *(_QWORD **)(v211 + 40);
                    }
                    *(_QWORD *)(v211 + 40) = *v212;
                    v212[2] = 0;
                    v213 = v212 + 2;
                    *v212 = 0;
                    v212[1] = 0;
                    *((_QWORD *)this + 9) = v212 + 2;
                    v214 = v311;
                    if (v311)
                      v214 = (_QWORD *)*v311;
                    v215 = (unint64_t)(v213 - 2);
                    if ((v214 != 0) != (*v213 != 0))
                    {
                      if (v214)
                      {
                        v216 = *(unint64_t **)((v215 & 0xFFFFFFFFFFFFF000) + 0x10);
                        v217 = v216[3];
                        v216 += 3;
                        *(_QWORD *)v215 = v217;
                        *(v213 - 1) = v216;
                        *v216 = v215;
                        *(_QWORD *)(v217 + 8) = v215;
                      }
                      else
                      {
                        v229 = *(_QWORD *)v215;
                        v228 = (_QWORD *)*(v213 - 1);
                        *v228 = *(_QWORD *)v215;
                        *(_QWORD *)(v229 + 8) = v228;
                        *(_QWORD *)v215 = 0;
                        *(_QWORD *)(v215 + 8) = 0;
                        v213 = (_QWORD *)*((_QWORD *)this + 9);
                      }
                    }
                    *v213 = v214;
                  }
                  WebCore::ApplePayModifier::ApplePayModifier((uint64_t)this + 80, (uint64_t)&v312);
                  *((_BYTE *)this + 728) = 1;
                  *((_DWORD *)this + 184) = 0;
                  if (v374)
                  {
                    WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v312, v218);
                    WebCore::PaymentDetailsModifier::~PaymentDetailsModifier((WebCore::PaymentDetailsModifier *)&v304, v219);
                  }
                  WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v242, v218);
                  WebCore::PaymentDetailsModifier::~PaymentDetailsModifier((WebCore::PaymentDetailsModifier *)&v234, v220);
                  v16 = 1;
                }
                goto LABEL_347;
              }
              v75 = (char)v304;
              v58 = (WTF::StringImpl *)v305;
LABEL_346:
              *((_BYTE *)this + 8) = v75;
              *((_QWORD *)this + 2) = v58;
              v16 = 1;
              *((_DWORD *)this + 184) = 1;
LABEL_347:
              WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v375, v23);
              v24 = v512;
LABEL_348:
              if (v24 != 0xFFFFFFFFLL)
                (*(&off_1E3352AF8 + v24))((int)&v304, (WebCore::ApplePayModifier *)&v450);
              goto LABEL_34;
            }
            if (v410 == 3)
            {
              v9 = v232;
              if ((_QWORD)v409)
              {
                v50 = *((_QWORD *)&v409 + 1);
                if (*((_QWORD *)&v409 + 1))
                {
                  v83 = *(unsigned __int16 **)(*((_QWORD *)&v409 + 1) + 8);
                  v84 = *(unsigned int *)(*((_QWORD *)&v409 + 1) + 4);
                  v85 = ((unint64_t)*(unsigned int *)(*((_QWORD *)&v409 + 1) + 16) >> 2) & 1;
                }
                else
                {
                  v83 = 0;
                  v84 = 0;
                  v85 = 1;
                }
                if (!WebCore::isValidDecimalMonetaryValue(v83, v84 | (v85 << 32)) && v408)
                {
                  if (v50)
                  {
                    v86 = *(_DWORD *)(v50 + 4);
                    *(_DWORD *)v50 += 2;
                    if (v86 < 0)
                      goto LABEL_389;
                  }
                  else
                  {
                    v86 = 0;
                  }
                  v55 = __OFADD__(v86, 24);
                  v87 = v86 + 24;
                  if (v55 || __OFADD__(v87, 1))
                  {
LABEL_389:
                    v444 = 0;
LABEL_390:
                    __break(0xC471u);
                    JUMPOUT(0x1952B9CA0);
                  }
                  v88 = !v50 || (*(_BYTE *)(v50 + 16) & 4) != 0;
                  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v87 + 1), v88, 34, v50, (int8x16_t *)"\" is not a valid amount.", 0x18u, &v444);
                  v58 = v444;
                  if (!v444)
                    goto LABEL_390;
                  v444 = 0;
                  if (!v50)
                    goto LABEL_345;
                  goto LABEL_202;
                }
                v50 = v413;
                if (v413)
                {
                  v89 = *(unsigned __int16 **)(v413 + 8);
                  v90 = *(unsigned int *)(v413 + 4);
                  v91 = ((unint64_t)*(unsigned int *)(v413 + 16) >> 2) & 1;
                }
                else
                {
                  v89 = 0;
                  v90 = 0;
                  v91 = 1;
                }
                if (!WebCore::isValidDecimalMonetaryValue(v89, v90 | (v91 << 32)))
                {
                  if (v50)
                  {
                    v99 = *(_DWORD *)(v50 + 4);
                    *(_DWORD *)v50 += 2;
                    if (v99 < 0)
                      goto LABEL_393;
                  }
                  else
                  {
                    v99 = 0;
                  }
                  v55 = __OFADD__(v99, 55);
                  v100 = v99 + 55;
                  if (v55 || __OFADD__(v100, 1))
                  {
LABEL_393:
                    v443 = 0;
LABEL_394:
                    __break(0xC471u);
                    JUMPOUT(0x1952B9CB8);
                  }
                  v101 = !v50 || (*(_BYTE *)(v50 + 16) & 4) != 0;
                  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v100 + 1), v101, 34, v50, (int8x16_t *)"\" is not a valid automaticReloadPaymentThresholdAmount.", 0x37u, &v443);
                  v58 = v443;
                  if (!v443)
                    goto LABEL_394;
                  v443 = 0;
                  if (!v50)
                    goto LABEL_345;
LABEL_202:
                  if (*(_DWORD *)v50 != 2)
                  {
                    *(_DWORD *)v50 -= 2;
                    goto LABEL_345;
                  }
                  v102 = (WTF::StringImpl *)v50;
LABEL_344:
                  WTF::StringImpl::destroy(v102, v23);
                  goto LABEL_345;
                }
                v92 = (WTF::StringImpl *)*((_QWORD *)&v415 + 1);
                if (*((_QWORD *)&v415 + 1))
                  **((_DWORD **)&v415 + 1) += 2;
                v234 = v92;
                MEMORY[0x19AEA52D4](&v304, &v234, 0);
                v93 = v234;
                v234 = 0;
                if (v93)
                {
                  if (*(_DWORD *)v93 == 2)
                    WTF::StringImpl::destroy(v93, v23);
                  else
                    *(_DWORD *)v93 -= 2;
                }
                v94 = v305;
                v95 = v304;
                v304 = 0;
                if (v95)
                {
                  if (*(_DWORD *)v95 == 2)
                  {
                    WTF::StringImpl::destroy(v95, v23);
                    if ((v94 & 1) == 0)
                    {
LABEL_183:
                      v71 = *((_QWORD *)&v415 + 1);
                      if (*((_QWORD *)&v415 + 1))
                      {
                        v96 = *(_DWORD *)(*((_QWORD *)&v415 + 1) + 4);
                        **((_DWORD **)&v415 + 1) += 2;
                        v9 = v232;
                        if (v96 < 0)
                          goto LABEL_391;
                      }
                      else
                      {
                        v96 = 0;
                        v9 = v232;
                      }
                      v55 = __OFADD__(v96, 21);
                      v97 = v96 + 21;
                      if (v55 || __OFADD__(v97, 1))
                      {
LABEL_391:
                        v442 = 0;
LABEL_392:
                        __break(0xC471u);
                        JUMPOUT(0x1952B9CACLL);
                      }
                      v98 = !v71 || (*(_BYTE *)(v71 + 16) & 4) != 0;
                      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v97 + 1), v98, 34, v71, (int8x16_t *)"\" is not a valid URL.", 0x15u, &v442);
                      v58 = v442;
                      if (!v442)
                        goto LABEL_392;
                      v442 = 0;
                      if (!v71)
                        goto LABEL_345;
                      goto LABEL_341;
                    }
                    goto LABEL_209;
                  }
                  *(_DWORD *)v95 -= 2;
                }
                if ((v94 & 1) == 0)
                  goto LABEL_183;
LABEL_209:
                if (!v417)
                  goto LABEL_376;
                v103 = v416;
                if (v416)
                {
                  *(_DWORD *)v416 += 2;
                  v234 = v103;
                  MEMORY[0x19AEA52D4](&v304, &v234, 0);
                  v104 = v234;
                  v234 = 0;
                  if (v104)
                  {
                    if (*(_DWORD *)v104 == 2)
                      WTF::StringImpl::destroy(v104, v23);
                    else
                      *(_DWORD *)v104 -= 2;
                  }
                  v105 = v305;
                  v106 = v304;
                  v304 = 0;
                  if (v106)
                  {
                    if (*(_DWORD *)v106 == 2)
                      WTF::StringImpl::destroy(v106, v23);
                    else
                      *(_DWORD *)v106 -= 2;
                  }
                  v4 = v230;
                  if ((v105 & 1) == 0)
                  {
                    v107 = v416;
                    if (v416)
                    {
                      v108 = *((_DWORD *)v416 + 1);
                      *(_DWORD *)v416 += 2;
                      if (v108 < 0)
                        goto LABEL_395;
                    }
                    else
                    {
                      v108 = 0;
                    }
                    v55 = __OFADD__(v108, 21);
                    v109 = v108 + 21;
                    if (v55 || __OFADD__(v109, 1))
                    {
LABEL_395:
                      v441 = 0;
LABEL_396:
                      __break(0xC471u);
                      JUMPOUT(0x1952B9CC4);
                    }
                    v110 = !v107 || (*((_BYTE *)v107 + 16) & 4) != 0;
                    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v109 + 1), v110, 34, (uint64_t)v107, (int8x16_t *)"\" is not a valid URL.", 0x15u, &v441);
                    v58 = v441;
                    if (!v441)
                      goto LABEL_396;
                    v441 = 0;
                    if (v107)
                    {
                      if (*(_DWORD *)v107 == 2)
                        WTF::StringImpl::destroy(v107, v23);
                      else
                        *(_DWORD *)v107 -= 2;
                    }
                    v75 = 33;
                    v4 = v230;
                    v9 = v232;
                    goto LABEL_346;
                  }
                }
                goto LABEL_230;
              }
LABEL_170:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v58 = v304;
LABEL_345:
              v75 = 33;
              goto LABEL_346;
            }
LABEL_169:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v58 = v304;
            v75 = 33;
            v9 = v232;
            goto LABEL_346;
          }
          *(_DWORD *)v79 -= 2;
        }
        if ((v78 & 1) == 0)
          goto LABEL_139;
        goto LABEL_152;
      }
      *(_DWORD *)v70 -= 2;
    }
    if ((v69 & 1) == 0)
      goto LABEL_115;
    goto LABEL_130;
  }
LABEL_374:
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 728) = 0;
  *((_DWORD *)this + 184) = 0;
}

unsigned int *WebCore::convertAndValidate(unsigned int *result, unsigned int *a2, const WTF::StringImpl **a3)
{
  unsigned int *v3;
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int16 *v23;
  __int16 *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  __int128 v27;
  __int128 v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  char v46[8];
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  _BYTE v50[24];
  uint64_t v51;
  __int16 v52;
  int v53;
  uint64_t v54;

  v3 = result;
  v54 = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v45 = 0;
  v4 = a2[3];
  if (!(_DWORD)v4)
  {
    v8 = 0;
    v34 = 0;
    goto LABEL_32;
  }
  if (v4 < 0x3333334)
  {
    v7 = 80 * v4;
    v8 = WTF::fastMalloc((WTF *)(80 * v4));
    LODWORD(v45) = (v7 & 0xFFFFFFF0) / 0x50;
    v44 = v8;
    v9 = a2[3];
    if ((_DWORD)v9)
    {
      v10 = (WTF **)(*(_QWORD *)a2 + 24);
      v11 = 32 * v9;
      v35 = vdupq_n_s64(0x7FF8000000000000uLL);
      while (1)
      {
        WebCore::validate(&v36, v10 - 2, a3);
        if ((_BYTE)v38)
          break;
        v12 = *(v10 - 1);
        if (v12)
          *(_DWORD *)v12 += 2;
        v13 = *(_BYTE *)v10;
        v14 = *(v10 - 3);
        if (v14)
          *(_DWORD *)v14 += 2;
        v15 = v13 ^ 1;
        v46[0] = v15;
        *(_QWORD *)&v49 = 0;
        *((_QWORD *)&v49 + 1) = 0x7FF8000000000000;
        v50[0] = 1;
        *(_DWORD *)&v50[4] = 1;
        *(int64x2_t *)&v50[8] = v35;
        v52 = 0;
        v53 = 0;
        LOBYTE(v36) = v15;
        v47 = 0;
        v48 = 0;
        v37 = v14;
        v38 = v12;
        v39 = v49;
        v40 = *(_OWORD *)v50;
        v41 = v35.i64[1];
        v51 = 0;
        v42 = 0;
        v43 = 0;
        if (HIDWORD(v45) == (_DWORD)v45)
        {
          v16 = WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, HIDWORD(v45) + 1, (unint64_t)&v36);
          v17 = v44 + 80 * HIDWORD(v45);
          *(_BYTE *)v17 = *v16;
          v18 = *((_QWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          *(_QWORD *)(v17 + 8) = v18;
          v19 = *((_QWORD *)v16 + 2);
          *((_QWORD *)v16 + 2) = 0;
          *(_QWORD *)(v17 + 16) = v19;
          v20 = *((_QWORD *)v16 + 7);
          v21 = *(_OWORD *)(v16 + 40);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(v16 + 24);
          *(_OWORD *)(v17 + 40) = v21;
          *(_QWORD *)(v17 + 56) = v20;
          v22 = *((_QWORD *)v16 + 8);
          *((_QWORD *)v16 + 8) = 0;
          *(_QWORD *)(v17 + 64) = v22;
          v23 = (__int16 *)(v17 + 72);
          v24 = (__int16 *)(v16 + 72);
        }
        else
        {
          v25 = v44 + 80 * HIDWORD(v45);
          *(_BYTE *)v25 = v15;
          v37 = 0;
          *(_QWORD *)(v25 + 8) = v14;
          v26 = v38;
          v38 = 0;
          *(_QWORD *)(v25 + 16) = v26;
          v27 = v39;
          v28 = v40;
          *(_QWORD *)(v25 + 56) = v41;
          *(_OWORD *)(v25 + 40) = v28;
          *(_OWORD *)(v25 + 24) = v27;
          v29 = v42;
          v42 = 0;
          *(_QWORD *)(v25 + 64) = v29;
          v23 = (__int16 *)(v25 + 72);
          v24 = &v43;
        }
        *v23 = *v24;
        ++HIDWORD(v45);
        v30 = v42;
        v42 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v30 -= 2;
        }
        v31 = v38;
        v38 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v31 -= 2;
        }
        v32 = v37;
        v37 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v32 -= 2;
        }
        if (v53 != -1)
          ((void (*)(uint64_t *, char *))off_1E3352AB8[v53])(&v36, v46);
        v10 += 4;
        v11 -= 32;
        if (!v11)
        {
          v8 = v44;
          v34 = v45;
          goto LABEL_32;
        }
      }
      v33 = v37;
      *(_BYTE *)v3 = v36;
      *((_QWORD *)v3 + 1) = v33;
      v3[4] = 1;
      return WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v44, (WTF::StringImpl *)a2);
    }
    v34 = (v7 & 0xFFFFFFF0) / 0x50;
LABEL_32:
    v44 = 0;
    v45 = 0;
    *(_QWORD *)v3 = v8;
    *((_QWORD *)v3 + 1) = v34;
    v3[4] = 0;
    return WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v44, (WTF::StringImpl *)a2);
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  __int128 v21;
  __int128 v22;
  _DWORD *v23;

  if (!a3)
    return result;
  v4 = result;
  v7 = *(unsigned int *)(result + 8);
  v6 = *(unsigned int *)(result + 12);
  v8 = v6 + a3;
  if (v8 > v7)
  {
    v9 = v7 + (v7 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8)
      v10 = v6 + a3;
    if (v10 >= 0x3333334)
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x1952BA1BCLL);
    }
    v11 = *(WTF::StringImpl **)result;
    v12 = (WTF::StringImpl *)(*(_QWORD *)result + 80 * v6);
    v13 = 80 * v10;
    v14 = WTF::fastMalloc((WTF *)(80 * v10));
    *(_DWORD *)(v4 + 8) = (v13 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)v4 = v14;
    result = (uint64_t)WTF::VectorMover<false,WebCore::ApplePayLineItem>::move(v11, v12, v14);
    if (v11)
    {
      if (*(WTF::StringImpl **)v4 == v11)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      result = WTF::fastFree(v11, v15);
    }
  }
  v16 = *(unsigned int *)(v4 + 12);
  if (v8 < v16)
    goto LABEL_24;
  v17 = *(_QWORD *)v4 + 80 * v16;
  v18 = a2 + 80 * a3;
  do
  {
    *(_BYTE *)v17 = *(_BYTE *)a2;
    v19 = *(_DWORD **)(a2 + 8);
    if (v19)
      *v19 += 2;
    *(_QWORD *)(v17 + 8) = v19;
    v20 = *(_DWORD **)(a2 + 16);
    if (v20)
      *v20 += 2;
    *(_QWORD *)(v17 + 16) = v20;
    v21 = *(_OWORD *)(a2 + 24);
    v22 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(v17 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(v17 + 40) = v22;
    *(_OWORD *)(v17 + 24) = v21;
    v23 = *(_DWORD **)(a2 + 64);
    if (v23)
      *v23 += 2;
    *(_QWORD *)(v17 + 64) = v23;
    *(_WORD *)(v17 + 72) = *(_WORD *)(a2 + 72);
    a2 += 80;
    v17 += 80;
  }
  while (a2 != v18);
  *(_DWORD *)(v4 + 12) = v8;
  return result;
}

uint64_t WebCore::ApplePayPaymentHandler::computeShippingMethods(uint64_t this, uint64_t a2)
{
  WTF::StringImpl **v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v40;
  __int128 v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t *v62;
  unsigned int v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  int v119;
  WTF *v120;
  uint64_t *v121;
  uint64_t *v122;
  unsigned int v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  WTF::StringImpl *v132;
  WTF *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  __int16 v144;
  char v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t *v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  char v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  __int16 v159;
  char v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  __int16 v166;
  char v167;
  __int128 v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  char v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  __int16 v178;
  __int128 v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  char v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  __int16 v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  char v200;
  WTF::StringImpl *v201;
  __int128 v202;
  WTF::StringImpl *v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  _BYTE v207[24];
  uint64_t v208;
  uint64_t v209;
  __int16 v210;
  char v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __int16 v222;
  char v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  __int16 v228;
  char v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  char v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  __int16 v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  char v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  uint64_t v249;
  __int16 v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  char v256;
  char v257;
  WTF *v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  _BYTE v265[32];
  __int128 v266;
  __int128 v267;
  uint64_t v268;
  uint64_t v269;
  __int16 v270;
  unsigned __int8 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  char v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  __int16 v283;
  char v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  __int16 v290;
  char v291;
  __int128 v292;
  uint64_t v293;
  unsigned __int8 v294;
  uint64_t v295;
  char v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  uint64_t v301;
  __int16 v302;
  __int128 v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned __int8 v308;
  uint64_t v309;
  char v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  uint64_t v315;
  __int16 v316;
  uint64_t v317;
  __int128 v318;
  __int128 v319;
  unsigned __int8 v320;
  uint64_t v321;
  uint64_t v322;
  char v323;
  unsigned __int8 v324;
  char v325;
  int v326;
  uint64_t v327;

  v4 = this;
  v327 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 80);
  v259 = 0;
  v258 = 0;
  if (!*(_BYTE *)(v5 + 104))
    goto LABEL_39;
  v6 = *(_DWORD *)(v5 + 100);
  if (!v6)
    goto LABEL_39;
  if (v6 >= 0x2762763)
  {
    __break(0xC471u);
    goto LABEL_115;
  }
  v2 = (WTF::StringImpl **)(104 * v6);
  this = WTF::fastMalloc((WTF *)v2);
  LODWORD(v259) = (v2 & 0xFFFFFFF8) / 0x68;
  v258 = (WTF *)this;
  if (!*(_BYTE *)(v5 + 104))
  {
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
  v7 = *(unsigned int *)(v5 + 100);
  if ((_DWORD)v7)
  {
    v2 = (WTF::StringImpl **)(v5 + 152);
    v8 = *(_QWORD *)(v5 + 88) + 16;
    v9 = 40 * v7;
    while (1)
    {
      WebCore::validate(&v201, (WTF **)v8, v2);
      if (BYTE8(v202))
        break;
      v12 = *(_DWORD **)(v8 + 8);
      if (v12)
        *v12 += 2;
      v13 = *(WTF::StringImpl **)(v8 - 8);
      if (v13)
        *(_DWORD *)v13 += 2;
      v14 = *(WTF::StringImpl **)(v8 - 16);
      if (v14)
        *(_DWORD *)v14 += 2;
      LOBYTE(v262) = 0;
      v265[16] = 0;
      v265[20] = 0;
      *(_DWORD *)&v265[24] = 0;
      v201 = v13;
      *(_QWORD *)&v202 = 0;
      v260 = 0u;
      v261 = 0u;
      *((_QWORD *)&v202 + 1) = v12;
      v203 = v14;
      v206 = v264;
      *(_OWORD *)v207 = *(_OWORD *)v265;
      *(_QWORD *)&v207[13] = *(_QWORD *)&v265[13];
      v204 = v262;
      v205 = v263;
      if (WTF::equal(v14, *(const WTF::StringImpl **)(*(_QWORD *)(a2 + 80) + 208), v11))
        v207[20] = 1;
      v16 = HIDWORD(v259);
      if (HIDWORD(v259) == (_DWORD)v259)
      {
        v17 = WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v258, HIDWORD(v259) + 1, (unint64_t)&v201);
        v16 = HIDWORD(v259);
        v18 = (char *)v258 + 104 * HIDWORD(v259);
        v19 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        *(_QWORD *)v18 = v19;
        v20 = *((_QWORD *)v17 + 1);
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v18 + 1) = v20;
        v21 = *((_QWORD *)v17 + 2);
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v18 + 2) = v21;
        v22 = *((_QWORD *)v17 + 3);
        *((_QWORD *)v17 + 3) = 0;
        *((_QWORD *)v18 + 3) = v22;
        *((_OWORD *)v18 + 2) = *((_OWORD *)v17 + 2);
        v23 = *(_QWORD *)(v17 + 93);
        v25 = *((_OWORD *)v17 + 4);
        v24 = *((_OWORD *)v17 + 5);
        *((_OWORD *)v18 + 3) = *((_OWORD *)v17 + 3);
        *((_OWORD *)v18 + 4) = v25;
        *((_OWORD *)v18 + 5) = v24;
        *(_QWORD *)(v18 + 93) = v23;
      }
      else
      {
        v26 = (char *)v258 + 104 * HIDWORD(v259);
        v27 = v201;
        v201 = 0;
        *(_QWORD *)v26 = v27;
        v28 = v202;
        *(_QWORD *)&v202 = 0;
        *((_QWORD *)v26 + 1) = v28;
        v29 = *((_QWORD *)&v202 + 1);
        *((_QWORD *)&v202 + 1) = 0;
        *((_QWORD *)v26 + 2) = v29;
        v30 = v203;
        v203 = 0;
        *((_QWORD *)v26 + 3) = v30;
        v31 = v205;
        v32 = v206;
        v33 = *(_OWORD *)v207;
        *(_QWORD *)(v26 + 93) = *(_QWORD *)&v207[13];
        *((_OWORD *)v26 + 4) = v32;
        *((_OWORD *)v26 + 5) = v33;
        *((_OWORD *)v26 + 3) = v31;
        *((_OWORD *)v26 + 2) = v204;
      }
      HIDWORD(v259) = v16 + 1;
      v34 = v203;
      v203 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v15);
        else
          *(_DWORD *)v34 -= 2;
      }
      v35 = (WTF::StringImpl *)*((_QWORD *)&v202 + 1);
      *((_QWORD *)&v202 + 1) = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v15);
        else
          *(_DWORD *)v35 -= 2;
      }
      v36 = (WTF::StringImpl *)v202;
      *(_QWORD *)&v202 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v15);
        else
          *(_DWORD *)v36 -= 2;
      }
      v37 = v201;
      v201 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v15);
        else
          *(_DWORD *)v37 -= 2;
      }
      if (*(_DWORD *)&v265[24] != -1)
        ((void (*)(WTF::StringImpl **, __int128 *))off_1E3352AD8[*(unsigned int *)&v265[24]])(&v201, &v260);
      v8 += 40;
      v9 -= 40;
      if (!v9)
        goto LABEL_39;
    }
    v57 = v202;
    *(_BYTE *)v4 = (_BYTE)v201;
    *(_QWORD *)(v4 + 8) = v57;
    *(_DWORD *)(v4 + 16) = 1;
    goto LABEL_107;
  }
LABEL_39:
  WebCore::ApplePayPaymentHandler::firstApplicableModifier((WebCore::ApplePayPaymentHandler *)&v260, a2);
  if (v326)
  {
    if (v326 == 1)
    {
      v38 = v261;
      *(_QWORD *)&v261 = 0;
      *(_BYTE *)v4 = BYTE8(v260);
      *(_QWORD *)(v4 + 8) = v38;
      v39 = 1;
      *(_DWORD *)(v4 + 16) = 1;
LABEL_106:
      ((void (*)(WTF::StringImpl **, char *))off_1E3352AA8[v39])(&v201, (char *)&v260 + 8);
      goto LABEL_107;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_113;
  }
  v257 = 0;
  if (!v325)
    goto LABEL_105;
  v2 = &v201;
  v40 = (WTF::StringImpl *)*((_QWORD *)&v260 + 1);
  *((_QWORD *)&v260 + 1) = 0;
  v201 = v40;
  LOBYTE(v202) = 0;
  BYTE8(v204) = 0;
  if ((_BYTE)v263)
  {
    v41 = v261;
    v261 = 0uLL;
    v202 = v41;
    v42 = (WTF::StringImpl *)v262;
    *(_QWORD *)&v262 = 0;
    v203 = v42;
    LOBYTE(v204) = BYTE8(v262);
    BYTE8(v204) = 1;
  }
  v43 = *((_QWORD *)&v263 + 1);
  *((_QWORD *)&v263 + 1) = 0;
  *(_QWORD *)&v205 = v43;
  v44 = v264;
  *(_QWORD *)&v264 = 0;
  *((_QWORD *)&v205 + 1) = v44;
  *(_QWORD *)&v206 = 0;
  if (*((_QWORD *)&v264 + 1))
  {
    v45 = *(_QWORD *)(((*((_QWORD *)&v264 + 1) - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v46 = *(_QWORD **)(v45 + 40);
    if (!v46)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((*((_QWORD *)&v264 + 1) - 16) & 0xFFFFFFFFFFFFF000) + 0x10));
      v46 = *(_QWORD **)(v45 + 40);
    }
    *(_QWORD *)(v45 + 40) = *v46;
    v46[2] = 0;
    v47 = v46 + 2;
    *v46 = 0;
    v46[1] = 0;
    *(_QWORD *)&v206 = v46 + 2;
    v48 = *((_QWORD *)&v264 + 1);
    if (*((_QWORD *)&v264 + 1))
      v48 = **((_QWORD **)&v264 + 1);
    v49 = (unint64_t)(v47 - 2);
    if ((v48 != 0) == (*v47 != 0))
      goto LABEL_53;
    if (v48)
    {
      v50 = *(unint64_t **)((v49 & 0xFFFFFFFFFFFFF000) + 0x10);
      v51 = v50[3];
      v50 += 3;
      *(_QWORD *)v49 = v51;
      *(v47 - 1) = v50;
      *v50 = v49;
      *(_QWORD *)(v51 + 8) = v49;
LABEL_53:
      *v47 = v48;
      goto LABEL_54;
    }
LABEL_113:
    v136 = *(_QWORD *)v49;
    v135 = *(_QWORD **)(v49 + 8);
    *v135 = *(_QWORD *)v49;
    *(_QWORD *)(v136 + 8) = v135;
    *(_QWORD *)v49 = 0;
    *(_QWORD *)(v49 + 8) = 0;
    v47 = (_QWORD *)v206;
    goto LABEL_53;
  }
LABEL_54:
  v52 = *(_QWORD *)v265;
  *((_QWORD *)&v206 + 1) = *(_QWORD *)v265;
  v207[0] = 0;
  v211 = 0;
  v53 = v271;
  if (v271)
  {
    v54 = v266;
    *(_OWORD *)(v2 + 11) = *(_OWORD *)&v265[16];
    v55 = v265[8];
    v207[0] = v265[8];
    *(_OWORD *)&v265[16] = 0uLL;
    *(_OWORD *)(v2 + 13) = v54;
    *(_OWORD *)(v2 + 15) = v267;
    v56 = v269;
    v269 = 0;
    v208 = v268;
    v209 = v56;
    v210 = v270;
    v211 = 1;
  }
  else
  {
    v55 = 0;
  }
  v58 = (__int128 *)(v2 + 37);
  v59 = v272;
  v272 = 0;
  v212 = v59;
  v60 = v273;
  v61 = HIDWORD(v273);
  v273 = 0;
  v213 = __PAIR64__(v61, v60);
  v62 = v274;
  v274 = 0;
  v214 = v62;
  v63 = v275;
  v64 = HIDWORD(v275);
  v275 = 0;
  v215 = __PAIR64__(v64, v63);
  LOBYTE(v216) = 0;
  v231 = 0;
  this = v294;
  if (v294)
  {
    v65 = v279;
    *(_OWORD *)(v2 + 27) = v278;
    v216 = v276;
    v217 = v277;
    v276 = 0;
    *(_QWORD *)&v278 = 0;
    *(_OWORD *)(v2 + 29) = v65;
    *(_OWORD *)(v2 + 31) = v280;
    v66 = v282;
    *((_QWORD *)&v278 + 1) = 0;
    v282 = 0;
    v220 = v281;
    v221 = v66;
    v222 = v283;
    v223 = 0;
    v229 = 0;
    if (v291)
    {
      v223 = v284;
      v67 = v285;
      v68 = v286;
      v285 = 0uLL;
      *v58 = v67;
      v224 = v68;
      v225 = v287;
      v69 = v289;
      v289 = 0;
      v226 = v288;
      v227 = v69;
      v228 = v290;
      v229 = 1;
    }
    v70 = v292;
    v292 = 0uLL;
    *(_OWORD *)(v2 + 47) = v70;
    v71 = v293;
    v293 = 0;
    v230 = v71;
    v231 = 1;
  }
  LOBYTE(v232) = 0;
  v240 = 0;
  v72 = v305;
  if ((_BYTE)v305)
  {
    v73 = v295;
    v295 = 0;
    v232 = v73;
    v233 = v296;
    v74 = v297;
    v75 = v298;
    v297 = 0u;
    *(_OWORD *)(v2 + 53) = v74;
    v234 = v75;
    v235 = v299;
    v236 = v300;
    v237 = v301;
    v238 = v302;
    v76 = v303;
    v303 = 0u;
    *((_OWORD *)v2 + 31) = v76;
    v77 = v304;
    v301 = 0;
    v304 = 0;
    v239 = v77;
    v240 = 1;
  }
  LOBYTE(v241) = 0;
  v243 = 0;
  v78 = v308;
  if (v308)
  {
    v79 = v306;
    v306 = 0;
    v241 = v79;
    v80 = v307;
    v307 = 0;
    v242 = v80;
    v243 = 1;
  }
  LOBYTE(v244) = 0;
  v252 = 0;
  v81 = v320;
  if (v320)
  {
    v82 = v311;
    v83 = v312;
    v311 = 0u;
    *(_OWORD *)(v2 + 71) = v82;
    v246 = v83;
    v247 = v313;
    v84 = v318;
    v85 = v319;
    v318 = 0u;
    v319 = 0u;
    v86 = v309;
    v309 = 0;
    v244 = v86;
    v245 = v310;
    v248 = v314;
    v87 = v315;
    v315 = 0;
    v249 = v87;
    v250 = v316;
    v251 = v317;
    *(_OWORD *)(v2 + 81) = v84;
    *(_OWORD *)(v2 + 83) = v85;
    v252 = 1;
  }
  LOBYTE(v253) = 0;
  v256 = 0;
  v88 = v324;
  if (v324)
  {
    v255 = 0;
    if (v323)
    {
      v89 = v321;
      v321 = 0;
      v253 = v89;
      v90 = v322;
      v322 = 0;
      v254 = v90;
      v255 = 1;
    }
    v256 = 1;
  }
  v257 = 1;
  v137 = v52;
  v138 = 0;
  v145 = 0;
  if (v53)
  {
    v138 = v55;
    v91 = *(_OWORD *)(v2 + 11);
    *(_QWORD *)&v207[8] = 0;
    *(_QWORD *)&v207[16] = 0;
    v92 = *(_OWORD *)(v2 + 13);
    v139 = v91;
    v140 = v92;
    v141 = *(_OWORD *)(v2 + 15);
    v93 = v209;
    v209 = 0;
    v142 = v208;
    v143 = v93;
    v144 = v210;
    v145 = 1;
  }
  v212 = 0;
  v146 = v59;
  v213 = 0;
  v147 = v60;
  v148 = v61;
  v214 = 0;
  v149 = v62;
  v215 = 0;
  v150 = v63;
  v151 = v64;
  LOBYTE(v152) = 0;
  v170 = 0;
  if ((_DWORD)this)
  {
    v152 = v216;
    v153 = v217;
    v94 = *(_OWORD *)(v2 + 27);
    v216 = 0;
    v218 = 0;
    v95 = *(_OWORD *)(v2 + 29);
    v154 = v94;
    v155 = v95;
    v156 = *(_OWORD *)(v2 + 31);
    v96 = v221;
    v219 = 0;
    v221 = 0;
    v157 = v220;
    v158 = v96;
    v159 = v222;
    v160 = 0;
    v167 = 0;
    if (v229)
    {
      v97 = v225;
      v161 = *v58;
      v162 = v224;
      v160 = v223;
      *(_QWORD *)v58 = 0;
      v2[38] = 0;
      v163 = v97;
      v98 = v227;
      v227 = 0;
      v164 = v226;
      v165 = v98;
      v166 = v228;
      v167 = 1;
    }
    v99 = *(_OWORD *)(v2 + 47);
    v2[47] = 0;
    v2[48] = 0;
    v168 = v99;
    v100 = v230;
    v230 = 0;
    v169 = v100;
    v170 = 1;
  }
  LOBYTE(v171) = 0;
  v181 = 0;
  if ((_DWORD)v72)
  {
    v171 = v232;
    v172 = v233;
    v101 = v235;
    v173 = *(_OWORD *)(v2 + 53);
    v174 = v234;
    *(_OWORD *)(v2 + 53) = 0u;
    v175 = v101;
    v102 = v237;
    v232 = 0;
    v237 = 0;
    v176 = v236;
    v177 = v102;
    v178 = v238;
    v103 = *((_OWORD *)v2 + 31);
    *((_OWORD *)v2 + 31) = 0u;
    v179 = v103;
    v104 = v239;
    v239 = 0;
    v180 = v104;
    v181 = 1;
  }
  LOBYTE(v182) = 0;
  v184 = 0;
  if (v78)
  {
    v105 = v241;
    v241 = 0;
    v182 = v105;
    v106 = v242;
    v242 = 0;
    v183 = v106;
    v184 = 1;
  }
  LOBYTE(v185) = 0;
  v196 = 0;
  if (v81)
  {
    v107 = *(_OWORD *)(v2 + 71);
    *(_OWORD *)(v2 + 71) = 0u;
    v187 = v107;
    v188 = v246;
    v189 = v247;
    v108 = *(_OWORD *)(v2 + 81);
    v109 = *(_OWORD *)(v2 + 83);
    *(_OWORD *)(v2 + 81) = 0u;
    *(_OWORD *)(v2 + 83) = 0u;
    v110 = v244;
    v244 = 0;
    v185 = v110;
    v186 = v245;
    v190 = v248;
    v111 = v249;
    v249 = 0;
    v191 = v111;
    v192 = v250;
    v193 = v251;
    v194 = v108;
    v195 = v109;
    v196 = 1;
  }
  LOBYTE(v197) = 0;
  v200 = 0;
  if (v88)
  {
    v199 = 0;
    if (v255)
    {
      v112 = v253;
      v253 = 0;
      v197 = v112;
      v113 = v254;
      v254 = 0;
      v198 = v113;
      v199 = 1;
    }
    v200 = 1;
  }
  v114 = HIDWORD(v259) + v64;
  if (v114 <= v259)
    goto LABEL_99;
  v115 = v259 + ((unint64_t)v259 >> 2);
  if (v115 >= 0x10)
    v116 = v115 + 1;
  else
    v116 = 16;
  if (v116 > v114)
    v114 = v116;
  if (v114 >= 0x2762763)
  {
LABEL_116:
    __break(0xC471u);
    return this;
  }
  v117 = v258;
  v118 = (WTF *)((char *)v258 + 104 * HIDWORD(v259));
  v119 = 104 * v114;
  v120 = (WTF *)WTF::fastMalloc((WTF *)(104 * v114));
  LODWORD(v259) = (v119 & 0xFFFFFFF8) / 0x68;
  v258 = v120;
  WTF::VectorMover<false,WebCore::ApplePayShippingMethod>::move(v117, v118, (uint64_t)v120);
  if (v117)
  {
    if (v258 == v117)
    {
      v258 = 0;
      LODWORD(v259) = 0;
    }
    WTF::fastFree(v117, (void *)v72);
  }
LABEL_99:
  if (v151)
  {
    v121 = v149;
    v122 = &v149[13 * v151];
    v123 = HIDWORD(v259);
    do
    {
      v124 = (char *)v258 + 104 * v123;
      v125 = *v121;
      *v121 = 0;
      *(_QWORD *)v124 = v125;
      v126 = v121[1];
      v121[1] = 0;
      *((_QWORD *)v124 + 1) = v126;
      v127 = v121[2];
      v121[2] = 0;
      *((_QWORD *)v124 + 2) = v127;
      v128 = v121[3];
      v121[3] = 0;
      *((_QWORD *)v124 + 3) = v128;
      *((_OWORD *)v124 + 2) = *((_OWORD *)v121 + 2);
      v129 = *((_OWORD *)v121 + 3);
      v130 = *((_OWORD *)v121 + 4);
      v131 = *((_OWORD *)v121 + 5);
      *(_QWORD *)(v124 + 93) = *(uint64_t *)((char *)v121 + 93);
      *((_OWORD *)v124 + 4) = v130;
      *((_OWORD *)v124 + 5) = v131;
      *((_OWORD *)v124 + 3) = v129;
      ++v123;
      v121 += 13;
    }
    while (v121 != v122);
    HIDWORD(v259) = v123;
  }
  WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v137, (void *)v72);
  if (v257)
  {
    WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)((char *)&v206 + 8), v10);
    WebCore::PaymentDetailsModifier::~PaymentDetailsModifier((WebCore::PaymentDetailsModifier *)&v201, v132);
  }
LABEL_105:
  v133 = v258;
  v258 = 0;
  *(_QWORD *)v4 = v133;
  v134 = v259;
  v259 = 0;
  *(_QWORD *)(v4 + 8) = v134;
  *(_DWORD *)(v4 + 16) = 0;
  v39 = v326;
  if (v326 != -1)
    goto LABEL_106;
LABEL_107:
  this = (uint64_t)v258;
  if (HIDWORD(v259))
  {
    WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(v258, (WTF *)((char *)v258 + 104 * HIDWORD(v259)));
    this = (uint64_t)v258;
  }
  if (this)
  {
    v258 = 0;
    LODWORD(v259) = 0;
    return WTF::fastFree((WTF *)this, v10);
  }
  return this;
}

uint64_t WebCore::ApplePayPaymentHandler::hide(WebCore::ApplePayPaymentHandler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t result;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v1 = v2 - 96;
    else
      v1 = 0;
  }
  if (*(_BYTE *)(v1 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1952BAF68);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 336) + 8) + 24) + 8) + 1240);
  v4 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134217984;
    v9 = v3;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::abortPaymentSession()", (uint8_t *)&v8, 0xCu);
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 88))(*(_QWORD *)(v3 + 8));
  v6 = *(char **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)v6 - 24);
    if (*(_DWORD *)&v6[v7 + 8] == 1)
      return (*(uint64_t (**)(char *))(*(_QWORD *)&v6[v7] + 8))(&v6[v7]);
    else
      --*(_DWORD *)&v6[v7 + 8];
  }
  return result;
}

uint64_t WebCore::ApplePayPaymentHandler::canMakePayment(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v4 = v5 - 96;
    else
      v4 = 0;
  }
  if (*(_BYTE *)(v4 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1952BB098);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 336) + 8) + 24) + 8) + 1240);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 8))(*(_QWORD *)(v6 + 8));
  v8 = qword_1ECE7BE60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 134218240;
    v11 = v6;
    v12 = 1024;
    v13 = v7;
    _os_log_impl(&dword_1940B8000, v8, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::canMakePayments() -> %d", (uint8_t *)&v10, 0x12u);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v7);
}

uint64_t WebCore::ApplePayPaymentHandler::computeTotalAndLineItems(WebCore::ApplePayPaymentHandler *this, uint64_t a2)
{
  WTF *v4;
  const WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t result;
  WTF::StringImpl *v19;
  void *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  WTF::StringImpl *v64;
  int v65;
  void *v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  int v77;
  WTF *v78;
  char *v79;
  char *v80;
  unsigned int v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  WTF *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  _QWORD *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104[2];
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  __int16 v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  __int16 v129;
  char v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  __int16 v136;
  char v137;
  __int128 v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  __int16 v148;
  __int128 v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  char v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  __int16 v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  char v170;
  unsigned __int8 v171;
  WTF *v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  _BYTE v181[24];
  uint64_t v182;
  __int16 v183;
  int v184;
  WTF *v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  char v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  WTF::StringImpl *v199;
  __int16 v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  __int16 v213;
  char v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  __int16 v220;
  char v221;
  __int128 v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  char v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  __int16 v232;
  __int128 v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  char v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  __int16 v246;
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  char v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  char v254;
  char v255;
  int v256;
  char v257[8];
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  _BYTE v261[24];
  uint64_t v262;
  __int16 v263;
  int v264;
  uint64_t v265;

  v265 = *MEMORY[0x1E0C80C00];
  v4 = *(WTF **)(a2 + 80);
  v5 = (const WTF::StringImpl **)((char *)v4 + 152);
  WebCore::validate(&v185, (WTF **)v4 + 19, (const WTF::StringImpl **)v4 + 19);
  if ((_BYTE)v187)
  {
    v6 = v186;
    v257[0] = (char)v185;
    v7 = 1;
    v264 = 1;
    v258 = 0;
    *(_BYTE *)this = (_BYTE)v185;
    *((_QWORD *)this + 1) = v6;
    *((_DWORD *)this + 24) = 1;
    return ((uint64_t (*)(WTF **, char *))off_1E3352AB8[v7])(&v185, v257);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)v4 + 20);
  if (v8)
    *(_DWORD *)v8 += 2;
  v9 = *((_BYTE *)v4 + 168) ^ 1;
  v10 = (WTF::StringImpl *)*((_QWORD *)v4 + 18);
  if (v10)
    *(_DWORD *)v10 += 2;
  v257[0] = v9;
  *(_QWORD *)&v260 = 0;
  *((_QWORD *)&v260 + 1) = 0x7FF8000000000000;
  v261[0] = 1;
  *(_DWORD *)&v261[4] = 1;
  *(int64x2_t *)&v261[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  v263 = 0;
  v264 = 0;
  v258 = 0;
  v259 = 0;
  v174 = v260;
  v175 = *(_OWORD *)v261;
  v176 = *(_QWORD *)&v261[16];
  v262 = 0;
  v173 = 0;
  v172 = 0;
  if (!*((_BYTE *)v4 + 80))
    goto LABEL_16;
  WebCore::convertAndValidate((unsigned int *)&v185, (unsigned int *)v4 + 16, (const WTF::StringImpl **)v4 + 19);
  v12 = v187;
  if (!(_DWORD)v187)
  {
    v15 = v185;
    v185 = 0;
    v16 = v186;
    v186 = 0;
    v4 = v172;
    v172 = v15;
    v103 = 0;
    v104[0] = 0;
    v173 = v16;
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v103, v11);
    v14 = v187;
    if ((_DWORD)v187 == -1)
      goto LABEL_13;
    goto LABEL_12;
  }
  if ((_DWORD)v187 != 1)
  {
LABEL_141:
    while (1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_142:
      v99 = *(_QWORD *)v32;
      v98 = *(_QWORD **)(v32 + 8);
      *v98 = *(_QWORD *)v32;
      *(_QWORD *)(v99 + 8) = v98;
      *(_QWORD *)v32 = 0;
      *(_QWORD *)(v32 + 8) = 0;
      v30 = v108;
LABEL_30:
      *(_QWORD *)v30 = v31;
LABEL_31:
      v109 = v194;
      LOBYTE(v110) = 0;
      v117 = 0;
      if (v201)
      {
        LOBYTE(v110) = v195;
        v35 = *(_OWORD *)((char *)v4 + 184);
        v196 = 0;
        v197 = 0;
        v111 = v35;
        v112 = *(_OWORD *)((char *)v4 + 200);
        v113 = *(_OWORD *)((char *)v4 + 216);
        v36 = v199;
        v199 = 0;
        v114 = v198;
        v115 = v36;
        v116 = v200;
        v117 = 1;
      }
      v37 = v202;
      v202 = 0;
      v118 = v37;
      v38 = v203;
      v203 = 0;
      v119 = v38;
      v39 = v204;
      v204 = 0;
      v120 = v39;
      v40 = v205;
      v205 = 0;
      v121 = v40;
      LOBYTE(v122) = 0;
      v140 = 0;
      if (v224)
      {
        v124 = v208;
        v122 = v206;
        v123 = v207;
        v206 = 0;
        v208 = 0uLL;
        v125 = v209;
        v126 = v210;
        v41 = v212;
        v212 = 0;
        v127 = v211;
        v128 = v41;
        v129 = v213;
        v130 = 0;
        v137 = 0;
        if (v221)
        {
          v130 = v214;
          v42 = v215;
          v215 = 0uLL;
          v131 = v42;
          v132 = v216;
          v133 = v217;
          v43 = v219;
          v219 = 0;
          v134 = v218;
          v135 = v43;
          v136 = v220;
          v137 = 1;
        }
        v44 = v222;
        v222 = 0uLL;
        v138 = v44;
        v45 = v223;
        v223 = 0;
        v139 = v45;
        v140 = 1;
      }
      LOBYTE(v141) = 0;
      v151 = 0;
      if (v235)
      {
        v141 = v225;
        v142 = v226;
        v46 = v227;
        v227 = 0u;
        v143 = v46;
        v144 = v228;
        v145 = v229;
        v47 = v231;
        v225 = 0;
        v231 = 0;
        v146 = v230;
        v147 = v47;
        v148 = v232;
        v48 = v233;
        v233 = 0u;
        v149 = v48;
        v49 = v234;
        v234 = 0;
        v150 = v49;
        v151 = 1;
      }
      LOBYTE(v152) = 0;
      v154 = 0;
      if (v238)
      {
        v50 = v236;
        v236 = 0;
        v152 = v50;
        v51 = v237;
        v237 = 0;
        v153 = v51;
        v154 = 1;
      }
      LOBYTE(v155) = 0;
      v166 = 0;
      if (v250)
      {
        v52 = v241;
        v241 = 0u;
        v157 = v52;
        v158 = v242;
        v159 = v243;
        v53 = v248;
        v54 = v249;
        v248 = 0u;
        v249 = 0u;
        v55 = v239;
        v239 = 0;
        v155 = v55;
        v156 = v240;
        v160 = v244;
        v56 = v245;
        v245 = 0;
        v161 = v56;
        v162 = v246;
        v163 = v247;
        v164 = v53;
        v165 = v54;
        v166 = 1;
      }
      LOBYTE(v167) = 0;
      v170 = 0;
      if (v254)
      {
        v169 = 0;
        if (v253)
        {
          v57 = v251;
          v251 = 0;
          v167 = v57;
          v58 = v252;
          v252 = 0;
          v168 = v58;
          v169 = 1;
        }
        v170 = 1;
      }
      v171 = 1;
      if ((_BYTE)v106)
        break;
LABEL_65:
      v64 = v10;
      v4 = v8;
LABEL_66:
      result = (uint64_t)WebCore::convertAndValidate((unsigned int *)&v177, (unsigned int *)&v106 + 2, v5);
      v67 = v179;
      if (!(_DWORD)v179)
      {
        v70 = v177;
        v177 = 0;
        *(_QWORD *)&v100 = v70;
        LODWORD(v70) = v178;
        v71 = HIDWORD(v178);
        v178 = 0;
        *((_QWORD *)&v100 + 1) = __PAIR64__(v71, v70);
        v72 = HIDWORD(v173) + v71;
        if (v72 > v173)
        {
          v73 = v173 + ((unint64_t)v173 >> 2);
          if (v73 >= 0x10)
            v74 = v73 + 1;
          else
            v74 = 16;
          if (v74 > v72)
            v72 = v74;
          if (v72 >= 0x3333334)
          {
            __break(0xC471u);
            return result;
          }
          v75 = v172;
          v76 = (WTF *)((char *)v172 + 80 * HIDWORD(v173));
          v77 = 80 * v72;
          v78 = (WTF *)WTF::fastMalloc((WTF *)(80 * v72));
          LODWORD(v173) = (v77 & 0xFFFFFFF0) / 0x50;
          v172 = v78;
          WTF::VectorMover<false,WebCore::ApplePayLineItem>::move(v75, v76, (uint64_t)v78);
          if (v75)
          {
            if (v172 == v75)
            {
              v172 = 0;
              LODWORD(v173) = 0;
            }
            WTF::fastFree(v75, v66);
          }
        }
        if (HIDWORD(v100))
        {
          v79 = (char *)v100;
          v80 = (char *)(v100 + 80 * HIDWORD(v100));
          v81 = HIDWORD(v173);
          do
          {
            v82 = (char *)v172 + 80 * v81;
            *v82 = *v79;
            v83 = *((_QWORD *)v79 + 1);
            *((_QWORD *)v79 + 1) = 0;
            *((_QWORD *)v82 + 1) = v83;
            v84 = *((_QWORD *)v79 + 2);
            *((_QWORD *)v79 + 2) = 0;
            *((_QWORD *)v82 + 2) = v84;
            v85 = *(_OWORD *)(v79 + 24);
            v86 = *(_OWORD *)(v79 + 40);
            *((_QWORD *)v82 + 7) = *((_QWORD *)v79 + 7);
            *(_OWORD *)(v82 + 40) = v86;
            *(_OWORD *)(v82 + 24) = v85;
            v87 = *((_QWORD *)v79 + 8);
            *((_QWORD *)v79 + 8) = 0;
            *((_QWORD *)v82 + 8) = v87;
            *((_WORD *)v82 + 36) = *((_WORD *)v79 + 36);
            v81 = ++HIDWORD(v173);
            v79 += 80;
          }
          while (v79 != v80);
        }
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v100, (WTF::StringImpl *)v66);
        if (v117)
        {
          v9 = v110;
          v10 = (WTF::StringImpl *)v111;
          if ((_QWORD)v111)
            *(_DWORD *)v111 += 2;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
              WTF::StringImpl::destroy(v64, v88);
            else
              *(_DWORD *)v64 -= 2;
          }
          v8 = (WTF::StringImpl *)*((_QWORD *)&v111 + 1);
          if (*((_QWORD *)&v111 + 1))
            **((_DWORD **)&v111 + 1) += 2;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2)
              WTF::StringImpl::destroy(v4, v88);
            else
              *(_DWORD *)v4 -= 2;
          }
          v174 = v112;
          v175 = v113;
          v21 = v115;
          v176 = v114;
          if (v115)
            *(_DWORD *)v115 += 2;
          v63 = v116;
          v4 = v8;
          v64 = v10;
        }
        else
        {
          v21 = 0;
          v63 = 0;
          v10 = v64;
          v8 = v4;
        }
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v172, v118, HIDWORD(v119));
        v69 = v179;
        if ((_DWORD)v179 != -1)
        {
LABEL_99:
          ((void (*)(__int128 *, uint64_t *))off_1E3352A88[v69])(&v100, &v177);
          v8 = v4;
          v10 = v64;
        }
        v65 = v171;
        if (v67)
        {
LABEL_101:
          if (v65)
          {
            WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v109, v20);
            WebCore::PaymentDetailsModifier::~PaymentDetailsModifier((WebCore::PaymentDetailsModifier *)&v103, v89);
          }
          goto LABEL_115;
        }
        if (v171)
        {
          WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v109, v20);
          WebCore::PaymentDetailsModifier::~PaymentDetailsModifier((WebCore::PaymentDetailsModifier *)&v103, v90);
        }
LABEL_105:
        LOBYTE(v103) = v9;
        v91 = v174;
        v92 = v175;
        v105 = v174;
        v106 = v175;
        v93 = v176;
        LOWORD(v109) = v63;
        v94 = v172;
        v172 = 0;
        *(_BYTE *)this = v9;
        v104[0] = 0;
        v104[1] = 0;
        *((_QWORD *)this + 1) = v10;
        *((_QWORD *)this + 2) = v8;
        *(_OWORD *)((char *)this + 24) = v91;
        *(_OWORD *)((char *)this + 40) = v92;
        v107 = v93;
        v108 = 0;
        *((_QWORD *)this + 7) = v93;
        *((_QWORD *)this + 8) = v21;
        *((_WORD *)this + 36) = v63;
        v110 = 0;
        *((_QWORD *)this + 10) = v94;
        *(_QWORD *)&v111 = 0;
        *(_QWORD *)&v92 = v173;
        v173 = 0;
        *((_QWORD *)this + 11) = v92;
        *((_DWORD *)this + 24) = 0;
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v110, (WTF::StringImpl *)v20);
        v95 = v108;
        v108 = 0;
        if (v95)
        {
          if (*(_DWORD *)v95 == 2)
            WTF::StringImpl::destroy(v95, (WTF::StringImpl *)v20);
          else
            *(_DWORD *)v95 -= 2;
        }
        v96 = v104[1];
        v104[1] = 0;
        if (v96)
        {
          if (*(_DWORD *)v96 == 2)
            WTF::StringImpl::destroy(v96, (WTF::StringImpl *)v20);
          else
            *(_DWORD *)v96 -= 2;
        }
        v97 = v104[0];
        v104[0] = 0;
        if (v97)
        {
          if (*(_DWORD *)v97 == 2)
            WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v20);
          else
            *(_DWORD *)v97 -= 2;
        }
        v10 = 0;
        v8 = 0;
        v21 = 0;
        goto LABEL_115;
      }
      if ((_DWORD)v179 == 1)
      {
        v63 = 0;
        v21 = 0;
        v68 = v178;
        v178 = 0;
        *(_BYTE *)this = v177;
        *((_QWORD *)this + 1) = v68;
        v69 = 1;
        *((_DWORD *)this + 24) = 1;
        goto LABEL_99;
      }
    }
    WebCore::validate(&v100, &v104[1], v5);
    v60 = v101;
    if ((_BYTE)v101)
    {
      v61 = *((_QWORD *)&v100 + 1);
      LOBYTE(v177) = v100;
      v62 = 1;
      v184 = 1;
      v178 = 0;
      *(_BYTE *)this = v100;
      *((_QWORD *)this + 1) = v61;
      *((_DWORD *)this + 24) = 1;
LABEL_63:
      ((void (*)(__int128 *, uint64_t *))off_1E3352AB8[v62])(&v100, &v177);
      if (v60)
      {
        v21 = 0;
        v65 = v171;
        goto LABEL_101;
      }
      goto LABEL_65;
    }
    v4 = (WTF *)v105;
    if ((_QWORD)v105)
      *(_DWORD *)v105 += 2;
    v9 = BYTE8(v105) ^ 1;
    v64 = v104[0];
    if (v104[0])
      *(_DWORD *)v104[0] += 2;
    LOBYTE(v177) = v9;
    *(_QWORD *)&v180 = 0;
    *((_QWORD *)&v180 + 1) = 0x7FF8000000000000;
    v181[0] = 1;
    *(_DWORD *)&v181[4] = 1;
    *(int64x2_t *)&v181[8] = vdupq_n_s64(0x7FF8000000000000uLL);
    v183 = 0;
    v184 = 0;
    v179 = 0;
    v178 = 0;
    v100 = v180;
    v101 = *(_OWORD *)v181;
    v102 = *(_QWORD *)&v181[16];
    v182 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v59);
        if (v8)
        {
LABEL_59:
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v59);
          else
            *(_DWORD *)v8 -= 2;
        }
LABEL_61:
        v174 = v100;
        v175 = v101;
        v176 = v102;
        v62 = v184;
        if (v184 == -1)
          goto LABEL_66;
        v8 = v4;
        v10 = v64;
        goto LABEL_63;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v8)
      goto LABEL_59;
    goto LABEL_61;
  }
  v13 = v186;
  v186 = 0;
  *(_BYTE *)this = (_BYTE)v185;
  *((_QWORD *)this + 1) = v13;
  v14 = 1;
  *((_DWORD *)this + 24) = 1;
LABEL_12:
  ((void (*)(uint64_t *, WTF **))off_1E3352A88[v14])(&v103, &v185);
LABEL_13:
  if (v12)
  {
    result = (uint64_t)WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v172, v17);
    if (!v8)
      goto LABEL_123;
    goto LABEL_121;
  }
LABEL_16:
  WebCore::ApplePayPaymentHandler::firstApplicableModifier((WebCore::ApplePayPaymentHandler *)&v185, a2);
  if (!v256)
  {
    v171 = 0;
    if (v255)
    {
      v4 = (WTF *)&v177;
      v23 = v186;
      v186 = 0;
      v103 = v23;
      LOBYTE(v104[0]) = 0;
      LOBYTE(v106) = 0;
      if (v190)
      {
        v24 = v187;
        v187 = 0uLL;
        *(_OWORD *)v104 = v24;
        v25 = v188;
        v188 = 0;
        *(_QWORD *)&v105 = v25;
        BYTE8(v105) = v189;
        LOBYTE(v106) = 1;
      }
      v26 = v191;
      v191 = 0;
      *((_QWORD *)&v106 + 1) = v26;
      v27 = v192;
      v192 = 0;
      v107 = v27;
      v108 = 0;
      if (!v193)
        goto LABEL_31;
      v28 = *(_QWORD *)(((unint64_t)(v193 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v29 = *(_QWORD **)(v28 + 40);
      if (!v29)
      {
        JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v193 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
        v29 = *(_QWORD **)(v28 + 40);
      }
      *(_QWORD *)(v28 + 40) = *v29;
      v29[2] = 0;
      v30 = (WTF::StringImpl *)(v29 + 2);
      *v29 = 0;
      v29[1] = 0;
      v108 = (WTF::StringImpl *)(v29 + 2);
      v31 = v193;
      if (v193)
        v31 = (_QWORD *)*v193;
      v32 = (unint64_t)v30 - 16;
      if ((v31 != 0) == (*(_QWORD *)v30 != 0))
        goto LABEL_30;
      if (v31)
      {
        v33 = *(unint64_t **)((v32 & 0xFFFFFFFFFFFFF000) + 0x10);
        v34 = v33[3];
        v33 += 3;
        *(_QWORD *)v32 = v34;
        *((_QWORD *)v30 - 1) = v33;
        *v33 = v32;
        *(_QWORD *)(v34 + 8) = v32;
        goto LABEL_30;
      }
      goto LABEL_142;
    }
    v63 = 0;
    v21 = 0;
    goto LABEL_105;
  }
  if (v256 != 1)
    goto LABEL_141;
  v21 = 0;
  v22 = v187;
  *(_QWORD *)&v187 = 0;
  *(_BYTE *)this = v186;
  *((_QWORD *)this + 1) = v22;
  *((_DWORD *)this + 24) = 1;
LABEL_115:
  if (v256 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3352AA8[v256])(&v103, &v186);
  result = (uint64_t)WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v172, (WTF::StringImpl *)v20);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      result = WTF::StringImpl::destroy(v21, v19);
      if (!v8)
        goto LABEL_123;
      goto LABEL_121;
    }
    *(_DWORD *)v21 -= 2;
  }
  if (!v8)
    goto LABEL_123;
LABEL_121:
  if (*(_DWORD *)v8 == 2)
    result = WTF::StringImpl::destroy(v8, v19);
  else
    *(_DWORD *)v8 -= 2;
LABEL_123:
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      result = WTF::StringImpl::destroy(v10, v19);
    else
      *(_DWORD *)v10 -= 2;
  }
  v7 = v264;
  if (v264 != -1)
    return ((uint64_t (*)(WTF **, char *))off_1E3352AB8[v7])(&v185, v257);
  return result;
}

WTF::StringImpl *WebCore::ApplePayPaymentHandler::computeErrors(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::VM *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  char v18;

  *a1 = 0;
  a1[1] = 0;
  v10 = *(_QWORD *)(a2 + 80);
  if (!*(_BYTE *)(v10 + 104) || !*(_DWORD *)(v10 + 100))
  {
    WebCore::ApplePayPaymentHandler::computeAddressErrors(*(unsigned __int8 *)(v10 + 55), a3, a4, (uint64_t)a1);
    v10 = *(_QWORD *)(a2 + 80);
  }
  if (*(_BYTE *)(v10 + 52))
    WebCore::appendShippingContactInvalidError(a5 + 8, 258, (uint64_t)a1);
  if (*(_BYTE *)(v10 + 53))
    WebCore::appendShippingContactInvalidError(a5, 257, (uint64_t)a1);
  if (*(_BYTE *)(v10 + 54))
    WebCore::appendShippingContactInvalidError(a5 + 16, 256, (uint64_t)a1);
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (v11)
    v12 = v11 - 96;
  else
    v12 = 0;
  v13 = (JSC::VM *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 344))(v12);
  result = WebCore::ApplePayPaymentHandler::computePaymentMethodErrors((WTF::StringImpl *)v16, a2, a6, (uint64_t)a1);
  if (v18)
  {
    JSC::VM::clearException(v13);
    result = v17;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ApplePayPaymentHandler::computeAddressErrors(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((_BYTE)result)
  {
    WebCore::appendShippingContactInvalidError(a2, 0, a4);
    WebCore::appendShippingContactInvalidError(a3, 261, a4);
    WebCore::appendShippingContactInvalidError(a3 + 8, 263, a4);
    WebCore::appendShippingContactInvalidError(a3 + 16, 267, a4);
    WebCore::appendShippingContactInvalidError(a3 + 24, 262, a4);
    WebCore::appendShippingContactInvalidError(a3 + 48, 256, a4);
    WebCore::appendShippingContactInvalidError(a3 + 56, 264, a4);
    WebCore::appendShippingContactInvalidError(a3 + 64, 258, a4);
    return WebCore::appendShippingContactInvalidError(a3 + 72, 266, a4);
  }
  return result;
}

WTF::StringImpl *WebCore::ApplePayPaymentHandler::computePaymentMethodErrors(WTF::StringImpl *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v4;
  uint64_t v7;
  uint64_t v8;
  WebCore::ScriptExecutionContext *v9;
  JSC::JSGlobalObject *v10;
  void *v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  _QWORD *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v4 = result;
  if (!a3)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    return result;
  }
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = (WebCore::ScriptExecutionContext *)(v8 - 96);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v9 + 344))(v9);
  v10 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject(v9);
  v35 = *((_QWORD *)v10 + 7);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    result = v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
      else
        *(_DWORD *)result -= 2;
    }
    v12 = 1;
    v34 = 1;
    goto LABEL_39;
  }
  result = (WTF::StringImpl *)WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::ApplePayError>>>::convert(v10, a3, (uint64_t)&v32);
  v12 = v34;
  if (v34)
  {
LABEL_39:
    *(_BYTE *)v4 = 37;
    *((_QWORD *)v4 + 1) = 0;
    *((_BYTE *)v4 + 16) = 1;
    goto LABEL_44;
  }
  v13 = v32;
  v14 = HIDWORD(v33);
  v32 = 0;
  v33 = 0;
  v15 = *(unsigned int *)(a4 + 8);
  v16 = *(unsigned int *)(a4 + 12);
  if (v16 + v14 > v15)
  {
    v17 = v15 + (v15 >> 2);
    if (v17 >= 0x10)
      v18 = v17 + 1;
    else
      v18 = 16;
    if (v18 <= v16 + v14)
      v19 = v16 + v14;
    else
      v19 = v18;
    if (v19 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v20 = *(_QWORD **)a4;
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(a4 + 8) = v19;
    *(_QWORD *)a4 = v21;
    result = (WTF::StringImpl *)memcpy(v21, v20, 8 * v16);
    if (v20)
    {
      if (*(_QWORD **)a4 == v20)
      {
        *(_QWORD *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
      }
      result = (WTF::StringImpl *)WTF::fastFree((WTF *)v20, v11);
    }
  }
  if ((_DWORD)v14)
  {
    v22 = *(_DWORD *)(a4 + 12);
    v23 = 8 * v14;
    v24 = 8 * v14;
    v25 = v13;
    do
    {
      v26 = *(_QWORD **)a4;
      v27 = *(_QWORD *)v25;
      *(_QWORD *)v25 = 0;
      v25 = (WTF::StringImpl *)((char *)v25 + 8);
      v26[v22++] = v27;
      v24 -= 8;
    }
    while (v24);
    *(_DWORD *)(a4 + 12) = v22;
    v28 = v13;
    do
    {
      v29 = *(_QWORD *)v28;
      *(_QWORD *)v28 = 0;
      if (v29)
      {
        if (*(_DWORD *)(v29 + 8) == 1)
        {
          v30 = *(WTF::StringImpl **)(v29 + 16);
          *(_QWORD *)(v29 + 16) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v11);
            else
              *(_DWORD *)v30 -= 2;
          }
          result = (WTF::StringImpl *)WTF::fastFree((WTF *)v29, v11);
        }
        else
        {
          --*(_DWORD *)(v29 + 8);
        }
      }
      v28 = (WTF::StringImpl *)((char *)v28 + 8);
      v23 -= 8;
    }
    while (v23);
  }
  if (v13)
    result = (WTF::StringImpl *)WTF::fastFree(v13, v11);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  v12 = v34;
LABEL_44:
  if (v12 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E3352AE8[v12])(&v35, &v32);
  return result;
}

uint64_t WebCore::appendShippingContactInvalidError(uint64_t result, __int16 a2, uint64_t a3)
{
  _DWORD **v5;
  _DWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF *v14;

  if (*(_QWORD *)result)
  {
    v5 = (_DWORD **)result;
    result = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = off_1E334CCA0;
    *(_BYTE *)(result + 12) = 1;
    *(_WORD *)(result + 13) = a2;
    v6 = *v5;
    if (*v5)
      *v6 += 2;
    *(_QWORD *)(result + 16) = v6;
    *(_WORD *)(result + 24) = 0;
    v14 = (WTF *)result;
    v7 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v7 == *(_DWORD *)(a3 + 8))
    {
      result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v7 + 1, (unint64_t)&v14);
      v9 = *(unsigned int *)(a3 + 12);
      v10 = *(char **)a3;
      v11 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)&v10[8 * v9] = v11;
      v12 = v14;
      *(_DWORD *)(a3 + 12) = v9 + 1;
      v14 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 2) == 1)
        {
          v13 = (WTF::StringImpl *)*((_QWORD *)v12 + 2);
          *((_QWORD *)v12 + 2) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v8);
            else
              *(_DWORD *)v13 -= 2;
          }
          return WTF::fastFree(v12, v8);
        }
        else
        {
          --*((_DWORD *)v12 + 2);
        }
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = result;
      *(_DWORD *)(a3 + 12) = v7 + 1;
    }
  }
  return result;
}

void WebCore::ApplePayPaymentHandler::detailsUpdated(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  WTF *v7;
  unint64_t v8;
  unint64_t v9;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)();
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  int v82;
  __int128 v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  WTF *v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  WTF *v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  _BYTE *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  WTF *v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  __int128 v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  WebCore::ApplePayDeferredPaymentRequest *v222;
  WebCore::ApplePayPaymentTokenContext *v223;
  uint64_t v224;
  uint64_t v225;
  WTF *v226;
  uint64_t v227;
  uint64_t v228;
  WebCore::ApplePayPaymentTokenContext *v229;
  uint64_t v230;
  uint64_t v231;
  WTF *v232;
  uint64_t v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  WTF *v239;
  WTF *v240;
  uint64_t v241;
  WTF *v242;
  WTF *v243;
  uint64_t v244;
  WTF *v245;
  uint64_t v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  __int128 v253;
  uint64_t v254;
  __int128 v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  WTF *v268;
  uint64_t v269;
  __int128 v270;
  uint64_t v271;
  __int128 v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  WTF *v287;
  uint64_t v288;
  WTF::StringImpl *v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  unsigned int v294;
  unsigned int v295;
  uint64_t v296;
  __int128 v297;
  uint64_t v298;
  __int128 v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  WTF *v312;
  uint64_t v313;
  __int128 v314;
  uint64_t v315;
  __int128 v316;
  uint64_t v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  __int128 v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  uint64_t v329;
  uint64_t v330;
  WTF *v331;
  uint64_t v332;
  WTF::StringImpl *v333;
  __int128 v334;
  uint64_t v335;
  __int128 v336;
  uint64_t v337;
  WebCore::ApplePayPaymentTokenContext *v338;
  uint64_t v339;
  uint64_t v340;
  WTF *v341;
  uint64_t v342;
  uint64_t v343;
  WebCore::ApplePayPaymentTokenContext *v344;
  uint64_t v345;
  uint64_t v346;
  WTF *v347;
  uint64_t v348;
  uint64_t v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  WTF *v354;
  uint64_t v355;
  WTF *v356;
  uint64_t v357;
  WTF *v358;
  WTF *v359;
  uint64_t v360;
  void *v361;
  WTF::StringImpl *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  __int128 v366;
  uint64_t v367;
  __int128 v368;
  uint64_t v369;
  __int128 v370;
  uint64_t v371;
  __int128 v372;
  uint64_t v373;
  __int128 v374;
  uint64_t v375;
  __int128 v376;
  uint64_t v377;
  uint64_t v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  NSObject *v386;
  void *v387;
  WTF *v388;
  void *v389;
  WTF *v390;
  __int128 v391;
  uint64_t v392;
  __int128 v393;
  uint64_t v394;
  WebCore::ApplePayPaymentTokenContext *v395;
  uint64_t v396;
  uint64_t v397;
  WTF *v398;
  uint64_t v399;
  uint64_t v400;
  WebCore::ApplePayPaymentTokenContext *v401;
  uint64_t v402;
  uint64_t v403;
  WTF *v404;
  __int128 v405;
  uint64_t v406;
  __int128 v407;
  uint64_t v408;
  WebCore::ApplePayPaymentTokenContext *v409;
  uint64_t v410;
  uint64_t v411;
  WTF *v412;
  uint64_t v413;
  uint64_t v414;
  WebCore::ApplePayPaymentTokenContext *v415;
  uint64_t v416;
  uint64_t v417;
  WTF *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  uint64_t v426;
  WTF *v427;
  uint64_t v428;
  WTF *v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  uint64_t v433;
  WTF *v434;
  uint64_t v435;
  WTF *v436;
  uint64_t v437;
  uint64_t v438;
  WTF *v439;
  WTF *v440;
  uint64_t v441;
  void *v442;
  WTF::StringImpl *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  __int128 v449;
  uint64_t v450;
  __int128 v451;
  uint64_t v452;
  __int128 v453;
  uint64_t v454;
  __int128 v455;
  uint64_t v456;
  __int128 v457;
  uint64_t v458;
  uint64_t v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  WTF *v466;
  uint64_t v467;
  uint64_t v468;
  NSObject *v469;
  void *v470;
  void *v471;
  WTF *v472;
  uint64_t v473;
  uint64_t v474;
  WTF::StringImpl *v475;
  uint64_t v476;
  void *v477;
  WTF::StringImpl *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  __int128 v482;
  uint64_t v483;
  __int128 v484;
  uint64_t v485;
  __int128 v486;
  uint64_t v487;
  __int128 v488;
  uint64_t v489;
  __int128 v490;
  uint64_t v491;
  __int128 v492;
  uint64_t v493;
  uint64_t v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  WTF *v501;
  uint64_t v502;
  uint64_t v503;
  NSObject *v504;
  void *v505;
  void *v506;
  uint64_t v507;
  void *v508;
  WTF::StringImpl *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  __int128 v513;
  uint64_t v514;
  __int128 v515;
  uint64_t v516;
  __int128 v517;
  uint64_t v518;
  __int128 v519;
  uint64_t v520;
  __int128 v521;
  uint64_t v522;
  __int128 v523;
  uint64_t v524;
  uint64_t v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  WTF *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  NSObject *v536;
  WTF::StringImpl *v537;
  WTF::StringImpl *v538;
  WTF *v539;
  uint64_t v540;
  uint64_t v541;
  WTF::StringImpl *v542;
  WTF *v543;
  _QWORD *v544;
  uint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  _QWORD *v548;
  uint64_t v549;
  _QWORD *v550;
  uint64_t v551;
  _BYTE *v552;
  _BYTE *v553;
  WTF *v554;
  uint64_t v555;
  _BYTE *v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  WTF::StringImpl *v560;
  _QWORD *v561;
  uint64_t v562;
  uint64_t v563;
  __int128 v564;
  _BYTE v565[40];
  __int128 v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  __int128 v571;
  _BYTE v572[40];
  __int128 v573;
  uint64_t v574;
  __int128 v575;
  uint64_t v576;
  __int128 v577;
  _BYTE v578[40];
  __int128 v579;
  uint64_t v580;
  __int128 v581;
  __int128 v582;
  uint64_t v583;
  char v584;
  __int128 v585;
  __int128 v586;
  _BYTE v587[24];
  __int128 v588;
  __int128 v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  __int128 v594;
  _BYTE v595[24];
  __int128 v596;
  __int128 v597;
  WTF *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  __int128 v602;
  __int128 v603;
  char v604;
  WTF *v605;
  uint64_t v606;
  char v607;
  char v608;
  char v609;
  char v610[8];
  __int128 v611;
  __int128 v612;
  __int128 v613;
  uint64_t v614;
  WTF::StringImpl *v615;
  __int16 v616;
  uint64_t v617;
  uint64_t v618;
  unsigned int v619;
  uint64_t v620;
  uint64_t v621;
  unsigned int v622;
  _BYTE buf[64];
  _QWORD *v624;
  uint64_t v625;
  __int128 v626;
  uint64_t v627;
  unsigned int v628;
  unsigned int v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  uint64_t v641;
  char v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  _BYTE v648[24];
  uint64_t v649;
  __int16 v650;
  __int128 v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  unsigned __int8 v664;
  WTF *v665;
  uint64_t v666;
  __int128 v667;
  uint64_t v668;
  _BYTE v669[64];
  _QWORD *v670;
  uint64_t v671;
  __int128 v672;
  uint64_t v673;
  unsigned int v674;
  unsigned int v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  uint64_t v687;
  char v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  _BYTE v694[24];
  uint64_t v695;
  __int16 v696;
  __int128 v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  unsigned __int8 v710;
  __int128 v711;
  unsigned __int8 v712;
  char v713;
  char v714[8];
  _BYTE v715[32];
  __int128 v716;
  uint64_t v717;
  WTF::StringImpl *v718;
  _QWORD *v719;
  uint64_t v720;
  uint64_t v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  uint64_t v725;
  uint64_t v726;
  __int16 v727;
  char v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  char v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  uint64_t v738;
  uint64_t v739;
  __int16 v740;
  char v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  uint64_t v745;
  uint64_t v746;
  __int16 v747;
  char v748;
  __int128 v749;
  uint64_t v750;
  char v751;
  uint64_t v752;
  char v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  uint64_t v757;
  uint64_t v758;
  __int16 v759;
  __int128 v760;
  uint64_t v761;
  char v762;
  uint64_t v763;
  uint64_t v764;
  char v765;
  uint64_t v766;
  char v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  WTF *v771;
  uint64_t v772;
  __int16 v773;
  uint64_t v774;
  __int128 v775;
  __int128 v776;
  char v777;
  WTF *v778;
  uint64_t v779;
  char v780;
  char v781;
  char v782;
  int v783;
  uint64_t v784;

  v784 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case 1:
      WebCore::ApplePayPaymentHandler::computeErrors(&v554, a1, a3, a4, a5, a6);
      v16 = *(_QWORD *)(a1 + 24);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v17)
          v16 = v17 - 96;
        else
          v16 = 0;
      }
      if (*(_BYTE *)(v16 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x1952C07C8);
      }
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 336) + 8) + 24) + 8)
                                 + 1240)
                     + 16))
        v18 = WTF::RefPtr<WebCore::PaymentSession,WTF::RawPtrTraits<WebCore::PaymentSession>,WTF::DefaultRefDerefTraits<WebCore::PaymentSession>>::unspecifiedBoolTypeInstance;
      else
        v18 = 0;
      if (!v18)
      {
        *(_BYTE *)a7 = 8;
        *(_QWORD *)(a7 + 8) = 0;
        *(_BYTE *)(a7 + 16) = 1;
        goto LABEL_559;
      }
      *(_BYTE *)(a1 + 696) = 0;
      buf[0] = 1;
      memset(&buf[8], 0, 17);
      *(_QWORD *)&buf[32] = 0x7FF8000000000000;
      buf[40] = 1;
      *(_DWORD *)&buf[44] = 1;
      *(int64x2_t *)&buf[48] = vdupq_n_s64(0x7FF8000000000000uLL);
      v624 = 0;
      LOWORD(v625) = 0;
      v9 = (unint64_t)buf;
      v642 = 0;
      LOBYTE(v643) = 0;
      LOBYTE(v650) = 0;
      LOBYTE(v651) = 0;
      LOBYTE(v652) = 0;
      LOBYTE(v653) = 0;
      LOBYTE(v662) = 0;
      BYTE8(v662) = 0;
      v664 = 0;
      LOBYTE(v627) = 0;
      v626 = 0u;
      v667 = 0u;
      v665 = v554;
      v19 = v555;
      v554 = 0;
      v555 = 0;
      v666 = v19;
      WebCore::ApplePayPaymentHandler::computeShippingMethods((uint64_t)&v620, a1);
      v13 = v622;
      if (v622)
      {
        if (v622 != 1)
          goto LABEL_652;
        v21 = v621;
        v621 = 0;
        *(_BYTE *)a7 = v620;
        *(_QWORD *)(a7 + 8) = v21;
        *(_BYTE *)(a7 + 16) = 1;
        goto LABEL_558;
      }
      v35 = v620;
      v620 = 0;
      v36 = v621;
      v621 = 0;
      v7 = (WTF *)v667;
      if (HIDWORD(v667))
        WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v667, (WTF::StringImpl *)(v667 + 104 * HIDWORD(v667)));
      if (v7)
        WTF::fastFree(v7, v20);
      *(_QWORD *)&v667 = v35;
      *((_QWORD *)&v667 + 1) = v36;
      WebCore::ApplePayPaymentHandler::computeTotalAndLineItems((WebCore::ApplePayPaymentHandler *)v610, a1);
      v8 = v619;
      if (v619)
      {
        if (v619 != 1)
          goto LABEL_652;
        v37 = v611;
        *(_QWORD *)&v611 = 0;
        *(_BYTE *)a7 = v610[0];
        *(_QWORD *)(a7 + 8) = v37;
        *(_BYTE *)(a7 + 16) = 1;
        goto LABEL_557;
      }
      v714[0] = v610[0];
      v53 = v611;
      v611 = 0uLL;
      *(_OWORD *)v715 = v53;
      *(_OWORD *)&v715[16] = v612;
      v716 = v613;
      v717 = v614;
      v718 = v615;
      LOWORD(v719) = v616;
      v7 = (WTF *)&v720;
      v54 = v617;
      v615 = 0;
      v617 = 0;
      v720 = v54;
      *(_QWORD *)&v53 = v618;
      v618 = 0;
      v721 = v53;
      v556 = buf;
      *(_QWORD *)&v557 = &v626;
      std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebCore::ApplePayLineItem &,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WebCore::ApplePayLineItem,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WebCore::ApplePayLineItem,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,1ul>((uint64_t *)&v556, (uint64_t)v714);
      WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v720, v55);
      v57 = v718;
      v718 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v56);
        else
          *(_DWORD *)v57 -= 2;
      }
      v58 = *(WTF::StringImpl **)&v715[8];
      *(_QWORD *)&v715[8] = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v56);
        else
          *(_DWORD *)v58 -= 2;
      }
      v59 = *(WTF::StringImpl **)v715;
      *(_QWORD *)v715 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v56);
        else
          *(_DWORD *)v59 -= 2;
      }
      WebCore::ApplePayPaymentHandler::firstApplicableModifier((WebCore::ApplePayPaymentHandler *)v714, a1);
      if (v783)
      {
        if (v783 != 1)
          goto LABEL_652;
        v60 = *(_QWORD *)&v715[8];
        *(_QWORD *)&v715[8] = 0;
        *(_BYTE *)a7 = v715[0];
        *(_QWORD *)(a7 + 8) = v60;
        v61 = 1;
        *(_BYTE *)(a7 + 16) = 1;
      }
      else
      {
        v609 = 0;
        if (v782)
        {
          v92 = *(_QWORD *)v715;
          *(_QWORD *)v715 = 0;
          v556 = (_BYTE *)v92;
          LOBYTE(v557) = 0;
          LOBYTE(v559) = 0;
          if (BYTE8(v716))
          {
            v93 = *(_OWORD *)&v715[8];
            memset(&v715[8], 0, 24);
            v557 = v93;
            *(_QWORD *)&v558 = *(_QWORD *)&v715[24];
            BYTE8(v558) = v716;
            LOBYTE(v559) = 1;
          }
          v94 = v717;
          v717 = 0;
          *((_QWORD *)&v559 + 1) = v94;
          v95 = v718;
          v718 = 0;
          v560 = v95;
          v561 = 0;
          if (v719)
          {
            v96 = *(_QWORD *)(((unint64_t)(v719 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v97 = *(_QWORD **)(v96 + 40);
            if (!v97)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v719 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
              v97 = *(_QWORD **)(v96 + 40);
            }
            *(_QWORD *)(v96 + 40) = *v97;
            v97[2] = 0;
            v98 = v97 + 2;
            *v97 = 0;
            v97[1] = 0;
            v561 = v97 + 2;
            v99 = v719;
            if (v719)
              v99 = (_QWORD *)*v719;
            v100 = (unint64_t)(v98 - 2);
            if ((v99 != 0) != (*v98 != 0))
            {
              if (v99)
              {
                v101 = *(unint64_t **)((v100 & 0xFFFFFFFFFFFFF000) + 0x10);
                v102 = v101[3];
                v101 += 3;
                *(_QWORD *)v100 = v102;
                *(v98 - 1) = v101;
                *v101 = v100;
                *(_QWORD *)(v102 + 8) = v100;
              }
              else
              {
                v547 = *(_QWORD *)v100;
                v546 = (_QWORD *)*(v98 - 1);
                *v546 = *(_QWORD *)v100;
                *(_QWORD *)(v547 + 8) = v546;
                *(_QWORD *)v100 = 0;
                *(_QWORD *)(v100 + 8) = 0;
                v98 = v561;
              }
            }
            *v98 = v99;
          }
          v562 = v720;
          LOBYTE(v563) = 0;
          LOBYTE(v567) = 0;
          if (v728)
          {
            v564 = v722;
            *(_OWORD *)v565 = v723;
            v103 = v721;
            LOBYTE(v563) = v721;
            v722 = 0uLL;
            *(_OWORD *)&v565[16] = v724;
            v104 = v726;
            v726 = 0;
            *(_QWORD *)&v565[32] = v725;
            *(_QWORD *)&v566 = v104;
            WORD4(v566) = v727;
            LOBYTE(v567) = 1;
          }
          else
          {
            v103 = 0;
          }
          v175 = v729;
          v729 = 0;
          v568 = v175;
          v176 = v730;
          v177 = HIDWORD(v730);
          v730 = 0;
          v569 = __PAIR64__(v177, v176);
          v178 = v731;
          v731 = 0;
          v570 = v178;
          v179 = v732;
          v180 = HIDWORD(v732);
          v732 = 0;
          *(_QWORD *)&v571 = __PAIR64__(v180, v179);
          BYTE8(v571) = 0;
          BYTE8(v582) = 0;
          if (v751)
          {
            *(_OWORD *)&v572[8] = v735;
            *((_QWORD *)&v571 + 1) = v733;
            v572[0] = v734;
            v733 = 0;
            v735 = 0uLL;
            *(_OWORD *)&v572[24] = v736;
            v573 = v737;
            v181 = v739;
            v739 = 0;
            v574 = v738;
            *(_QWORD *)&v575 = v181;
            WORD4(v575) = v740;
            LOBYTE(v576) = 0;
            LOBYTE(v580) = 0;
            if (v748)
            {
              LOBYTE(v576) = v741;
              v182 = v742;
              v742 = 0uLL;
              v577 = v182;
              *(_OWORD *)v578 = v743;
              *(_OWORD *)&v578[16] = v744;
              v183 = v746;
              v746 = 0;
              *(_QWORD *)&v578[32] = v745;
              *(_QWORD *)&v579 = v183;
              WORD4(v579) = v747;
              LOBYTE(v580) = 1;
            }
            v184 = v749;
            v749 = 0uLL;
            v581 = v184;
            v185 = v750;
            v750 = 0;
            *(_QWORD *)&v582 = v185;
            BYTE8(v582) = 1;
          }
          LOBYTE(v583) = 0;
          LOBYTE(v591) = 0;
          if (v762)
          {
            v583 = v752;
            v584 = v753;
            v186 = v754;
            v754 = 0u;
            v585 = v186;
            v586 = v755;
            *(_OWORD *)v587 = v756;
            v187 = v758;
            v752 = 0;
            v758 = 0;
            *(_QWORD *)&v587[16] = v757;
            *(_QWORD *)&v588 = v187;
            WORD4(v588) = v759;
            v188 = v760;
            v760 = 0u;
            v589 = v188;
            v189 = v761;
            v761 = 0;
            v590 = v189;
            LOBYTE(v591) = 1;
          }
          LOBYTE(v592) = 0;
          LOBYTE(v594) = 0;
          if (v765)
          {
            v190 = v763;
            v763 = 0;
            v592 = v190;
            v191 = v764;
            v764 = 0;
            v593 = v191;
            LOBYTE(v594) = 1;
          }
          BYTE8(v594) = 0;
          v604 = 0;
          if (v777)
          {
            v192 = v768;
            v768 = 0u;
            *(_OWORD *)&v595[8] = v192;
            v596 = v769;
            v597 = v770;
            v193 = v775;
            v194 = v776;
            v775 = 0u;
            v776 = 0u;
            v195 = v766;
            v766 = 0;
            *((_QWORD *)&v594 + 1) = v195;
            v595[0] = v767;
            v598 = v771;
            v196 = v772;
            v772 = 0;
            v599 = v196;
            LOWORD(v600) = v773;
            v601 = v774;
            v602 = v193;
            v603 = v194;
            v604 = 1;
          }
          LOBYTE(v605) = 0;
          v608 = 0;
          if (v781)
          {
            v607 = 0;
            if (v780)
            {
              v197 = v778;
              v778 = 0;
              v605 = v197;
              v198 = v779;
              v779 = 0;
              v606 = v198;
              v607 = 1;
            }
            v608 = 1;
          }
          v609 = 1;
          *(_QWORD *)v669 = v720;
          v669[8] = 0;
          BYTE8(v672) = 0;
          if (v728)
          {
            v669[8] = v103;
            v199 = v564;
            v564 = 0uLL;
            *(_OWORD *)&v669[16] = v199;
            *(_OWORD *)&v669[32] = *(_OWORD *)v565;
            *(_OWORD *)&v669[48] = *(_OWORD *)&v565[16];
            v200 = v566;
            *(_QWORD *)&v566 = 0;
            v670 = *(_QWORD **)&v565[32];
            v671 = v200;
            LOWORD(v672) = WORD4(v566);
            BYTE8(v672) = 1;
          }
          v568 = 0;
          v673 = v175;
          v569 = 0;
          v674 = v176;
          v675 = v177;
          v570 = 0;
          *(_QWORD *)&v676 = v178;
          *(_QWORD *)&v571 = 0;
          *((_QWORD *)&v676 + 1) = __PAIR64__(v180, v179);
          LOBYTE(v677) = 0;
          BYTE8(v690) = 0;
          if (v751)
          {
            *(_QWORD *)&v677 = *((_QWORD *)&v571 + 1);
            BYTE8(v677) = v572[0];
            v201 = *(_OWORD *)&v572[8];
            *((_QWORD *)&v571 + 1) = 0;
            *(_QWORD *)&v572[8] = 0;
            *(_QWORD *)&v572[16] = 0;
            v678 = v201;
            v679 = *(_OWORD *)&v572[24];
            v680 = v573;
            v202 = v575;
            *(_QWORD *)&v575 = 0;
            *(_QWORD *)&v681 = v574;
            *((_QWORD *)&v681 + 1) = v202;
            LOWORD(v682) = WORD4(v575);
            BYTE8(v682) = 0;
            v688 = 0;
            if ((_BYTE)v580)
            {
              v683 = v577;
              v684 = *(_OWORD *)v578;
              BYTE8(v682) = v576;
              v577 = 0uLL;
              v685 = *(_OWORD *)&v578[16];
              v203 = v579;
              *(_QWORD *)&v579 = 0;
              *(_QWORD *)&v686 = *(_QWORD *)&v578[32];
              *((_QWORD *)&v686 + 1) = v203;
              LOWORD(v687) = WORD4(v579);
              v688 = 1;
            }
            v204 = v581;
            v581 = 0uLL;
            v689 = v204;
            v205 = v582;
            *(_QWORD *)&v582 = 0;
            *(_QWORD *)&v690 = v205;
            BYTE8(v690) = 1;
          }
          v206 = (_BYTE *)v8;
          LOBYTE(v691) = 0;
          LOBYTE(v699) = 0;
          if (v762)
          {
            *(_QWORD *)&v691 = v583;
            BYTE8(v691) = v584;
            v692 = v585;
            v693 = v586;
            v585 = 0u;
            *(_OWORD *)v694 = *(_OWORD *)v587;
            v207 = v588;
            v583 = 0;
            *(_QWORD *)&v588 = 0;
            *(_QWORD *)&v694[16] = *(_QWORD *)&v587[16];
            v695 = v207;
            v696 = WORD4(v588);
            v208 = v589;
            v589 = 0u;
            v697 = v208;
            v209 = v590;
            v590 = 0;
            v698 = v209;
            LOBYTE(v699) = 1;
          }
          LOBYTE(v700) = 0;
          BYTE8(v701) = 0;
          if (v765)
          {
            v210 = v592;
            v592 = 0;
            v700 = v210;
            v211 = v593;
            v593 = 0;
            *(_QWORD *)&v701 = v211;
            BYTE8(v701) = 1;
          }
          LOBYTE(v702) = 0;
          v710 = 0;
          if (v777)
          {
            v212 = *((_QWORD *)&v594 + 1);
            *((_QWORD *)&v594 + 1) = 0;
            *(_QWORD *)&v702 = v212;
            BYTE8(v702) = v595[0];
            v703 = *(_OWORD *)&v595[8];
            v704 = v596;
            v705 = v597;
            v213 = v603;
            v708 = v602;
            *(_OWORD *)&v595[8] = 0u;
            *(_QWORD *)&v706 = v598;
            v214 = v599;
            v599 = 0;
            *((_QWORD *)&v706 + 1) = v214;
            LOWORD(v707) = v600;
            *((_QWORD *)&v707 + 1) = v601;
            v602 = 0u;
            v603 = 0u;
            v709 = v213;
            v710 = 1;
          }
          LOBYTE(v711) = 0;
          v713 = 0;
          if (v781)
          {
            v712 = 0;
            if (v607)
            {
              v215 = v605;
              v605 = 0;
              *(_QWORD *)&v711 = v215;
              v216 = v606;
              v606 = 0;
              *((_QWORD *)&v711 + 1) = v216;
              v712 = 1;
            }
            v713 = 1;
          }
          std::__optional_storage_base<WebCore::ApplePayRecurringPaymentRequest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplePayRecurringPaymentRequest,false>>((uint64_t)&v627, (WTF::StringImpl *)&v677);
          if (v650 == v699)
          {
            if ((_BYTE)v650)
              WebCore::ApplePayAutomaticReloadPaymentRequest::operator=((uint64_t)&v643, (WTF::StringImpl *)&v691);
          }
          else if ((_BYTE)v650)
          {
            WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v643, v217);
            LOBYTE(v650) = 0;
          }
          else
          {
            *(_QWORD *)&v643 = v691;
            BYTE8(v643) = BYTE8(v691);
            v334 = v692;
            v692 = 0u;
            v644 = v334;
            v645 = v693;
            v646 = *(_OWORD *)v694;
            v335 = v695;
            *(_QWORD *)&v691 = 0;
            v695 = 0;
            *(_QWORD *)&v647 = *(_QWORD *)&v694[16];
            *((_QWORD *)&v647 + 1) = v335;
            *(_WORD *)v648 = v696;
            v336 = v697;
            v697 = 0u;
            *(_OWORD *)&v648[8] = v336;
            v337 = v698;
            v698 = 0;
            v649 = v337;
            LOBYTE(v650) = 1;
          }
          if (v652 == BYTE8(v701))
          {
            if ((_BYTE)v652)
            {
              if (HIDWORD(v651))
              {
                v338 = (WebCore::ApplePayPaymentTokenContext *)v651;
                v339 = 40 * HIDWORD(v651);
                do
                {
                  WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v338, v217);
                  v338 = (WebCore::ApplePayPaymentTokenContext *)(v340 + 40);
                  v339 -= 40;
                }
                while (v339);
              }
              v341 = (WTF *)v651;
              if ((_QWORD)v651)
              {
                *(_QWORD *)&v651 = 0;
                DWORD2(v651) = 0;
                WTF::fastFree(v341, v217);
              }
              v342 = v700;
              v700 = 0;
              *(_QWORD *)&v651 = v342;
              v343 = v701;
              *(_QWORD *)&v701 = 0;
              *((_QWORD *)&v651 + 1) = v343;
            }
          }
          else if ((_BYTE)v652)
          {
            if (HIDWORD(v651))
            {
              v344 = (WebCore::ApplePayPaymentTokenContext *)v651;
              v345 = 40 * HIDWORD(v651);
              do
              {
                WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v344, v217);
                v344 = (WebCore::ApplePayPaymentTokenContext *)(v346 + 40);
                v345 -= 40;
              }
              while (v345);
            }
            v347 = (WTF *)v651;
            if ((_QWORD)v651)
            {
              *(_QWORD *)&v651 = 0;
              DWORD2(v651) = 0;
              WTF::fastFree(v347, v217);
            }
            LOBYTE(v652) = 0;
          }
          else
          {
            v348 = v700;
            v700 = 0;
            *(_QWORD *)&v651 = v348;
            v349 = v701;
            *(_QWORD *)&v701 = 0;
            *((_QWORD *)&v651 + 1) = v349;
            LOBYTE(v652) = 1;
          }
          v8 = (unint64_t)v206;
          if (v662 == v710)
          {
            if ((_BYTE)v662)
              WebCore::ApplePayDeferredPaymentRequest::operator=((uint64_t)&v653, (WTF::StringImpl *)&v702);
          }
          else if ((_BYTE)v662)
          {
            WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&v653, v217);
            LOBYTE(v662) = 0;
          }
          else
          {
            v350 = v703;
            v703 = 0u;
            v655 = v350;
            v656 = v704;
            v657 = v705;
            v351 = v708;
            v708 = 0u;
            v352 = v709;
            v709 = 0u;
            v653 = v702;
            LOBYTE(v654) = BYTE8(v702);
            v353 = *((_QWORD *)&v706 + 1);
            *(_QWORD *)&v658 = v706;
            *(_QWORD *)&v702 = 0;
            *((_QWORD *)&v706 + 1) = 0;
            *((_QWORD *)&v658 + 1) = v353;
            LOWORD(v659) = v707;
            *((_QWORD *)&v659 + 1) = *((_QWORD *)&v707 + 1);
            v660 = v351;
            v661 = v352;
            LOBYTE(v662) = 1;
          }
          if (v664 == v713)
          {
            if (v664)
            {
              if (BYTE8(v663) == v712)
              {
                if (BYTE8(v663))
                {
                  v354 = (WTF *)*((_QWORD *)&v662 + 1);
                  if (*((_QWORD *)&v662 + 1))
                  {
                    *((_QWORD *)&v662 + 1) = 0;
                    LODWORD(v663) = 0;
                    WTF::fastFree(v354, v217);
                  }
                  v355 = *((_QWORD *)&v711 + 1);
                  *((_QWORD *)&v662 + 1) = v711;
                  v711 = 0uLL;
                  *(_QWORD *)&v663 = v355;
                }
              }
              else if (BYTE8(v663))
              {
                v358 = (WTF *)*((_QWORD *)&v662 + 1);
                if (*((_QWORD *)&v662 + 1))
                {
                  *((_QWORD *)&v662 + 1) = 0;
                  LODWORD(v663) = 0;
                  WTF::fastFree(v358, v217);
                }
                BYTE8(v663) = 0;
              }
              else
              {
                v441 = *((_QWORD *)&v711 + 1);
                *((_QWORD *)&v662 + 1) = v711;
                v711 = 0uLL;
                *(_QWORD *)&v663 = v441;
                BYTE8(v663) = 1;
              }
            }
          }
          else if (v664)
          {
            if (BYTE8(v663))
            {
              v356 = (WTF *)*((_QWORD *)&v662 + 1);
              if (*((_QWORD *)&v662 + 1))
              {
                *((_QWORD *)&v662 + 1) = 0;
                LODWORD(v663) = 0;
                WTF::fastFree(v356, v217);
              }
            }
            v664 = 0;
          }
          else
          {
            BYTE8(v662) = 0;
            BYTE8(v663) = 0;
            if (v712)
            {
              v357 = *((_QWORD *)&v711 + 1);
              *((_QWORD *)&v662 + 1) = v711;
              v711 = 0uLL;
              *(_QWORD *)&v663 = v357;
              BYTE8(v663) = 1;
            }
            v664 = 1;
          }
          WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)v669, v217);
          if (v609)
          {
            WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v562, v442);
            WebCore::PaymentDetailsModifier::~PaymentDetailsModifier((WebCore::PaymentDetailsModifier *)&v556, v443);
          }
        }
        v444 = *(_QWORD *)(a1 + 24);
        if (v444)
        {
          v445 = *(_QWORD *)(v444 + 8);
          if (v445)
            v444 = v445 - 96;
          else
            v444 = 0;
        }
        if (*(_BYTE *)(v444 + 274))
        {
          __break(0xC471u);
          JUMPOUT(0x1952C0828);
        }
        v446 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v444 + 336) + 8) + 24) + 8) + 1240);
        LOBYTE(v556) = buf[0];
        v447 = *(_OWORD *)&buf[8];
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[16] = 0;
        v557 = v447;
        v558 = *(_OWORD *)&buf[24];
        v559 = *(_OWORD *)&buf[40];
        v560 = *(WTF::StringImpl **)&buf[56];
        v561 = v624;
        LOWORD(v562) = v625;
        v624 = 0;
        v448 = *((_QWORD *)&v626 + 1);
        v563 = v626;
        v626 = 0uLL;
        *(_QWORD *)&v564 = v448;
        BYTE8(v564) = 0;
        LOBYTE(v577) = 0;
        if (v642)
        {
          *((_QWORD *)&v564 + 1) = v627;
          v565[0] = v628;
          v449 = v630;
          v627 = 0;
          v630 = 0uLL;
          *(_OWORD *)&v565[8] = v449;
          *(_OWORD *)&v565[24] = v631;
          v566 = v632;
          v450 = *((_QWORD *)&v633 + 1);
          *((_QWORD *)&v633 + 1) = 0;
          v567 = v633;
          v568 = v450;
          LOWORD(v569) = v634;
          LOBYTE(v570) = 0;
          LOBYTE(v574) = 0;
          if (BYTE8(v639))
          {
            LOBYTE(v570) = BYTE8(v634);
            v451 = v635;
            v635 = 0uLL;
            v571 = v451;
            *(_OWORD *)v572 = v636;
            *(_OWORD *)&v572[16] = v637;
            v452 = *((_QWORD *)&v638 + 1);
            *((_QWORD *)&v638 + 1) = 0;
            *(_QWORD *)&v572[32] = v638;
            *(_QWORD *)&v573 = v452;
            WORD4(v573) = v639;
            LOBYTE(v574) = 1;
          }
          v453 = v640;
          v640 = 0uLL;
          v575 = v453;
          v454 = v641;
          v641 = 0;
          v576 = v454;
          LOBYTE(v577) = 1;
        }
        BYTE8(v577) = 0;
        v584 = 0;
        if ((_BYTE)v650)
        {
          *((_QWORD *)&v577 + 1) = v643;
          v578[0] = BYTE8(v643);
          v455 = v644;
          v644 = 0u;
          *(_OWORD *)&v578[8] = v455;
          *(_OWORD *)&v578[24] = v645;
          v579 = v646;
          v456 = *((_QWORD *)&v647 + 1);
          *(_QWORD *)&v643 = 0;
          *((_QWORD *)&v647 + 1) = 0;
          v580 = v647;
          *(_QWORD *)&v581 = v456;
          WORD4(v581) = *(_WORD *)v648;
          v457 = *(_OWORD *)&v648[8];
          *(_OWORD *)&v648[8] = 0u;
          v582 = v457;
          v458 = v649;
          v649 = 0;
          v583 = v458;
          v584 = 1;
        }
        LOBYTE(v585) = 0;
        LOBYTE(v586) = 0;
        if ((_BYTE)v652)
        {
          v459 = *((_QWORD *)&v651 + 1);
          *(_QWORD *)&v585 = v651;
          v651 = 0uLL;
          *((_QWORD *)&v585 + 1) = v459;
          LOBYTE(v586) = 1;
        }
        BYTE8(v586) = 0;
        v595[16] = 0;
        if ((_BYTE)v662)
        {
          v460 = v655;
          v655 = 0u;
          *(_OWORD *)&v587[8] = v460;
          v588 = v656;
          v589 = v657;
          v461 = v660;
          v462 = v661;
          v660 = 0u;
          v661 = 0u;
          *((_QWORD *)&v586 + 1) = v653;
          v587[0] = v654;
          v463 = *((_QWORD *)&v658 + 1);
          v590 = v658;
          v653 = 0;
          *((_QWORD *)&v658 + 1) = 0;
          v591 = v463;
          LOWORD(v592) = v659;
          v593 = *((_QWORD *)&v659 + 1);
          v594 = v461;
          *(_OWORD *)v595 = v462;
          v595[16] = 1;
        }
        LOBYTE(v596) = 0;
        BYTE8(v597) = 0;
        if (v664)
        {
          LOBYTE(v597) = 0;
          if (BYTE8(v663))
          {
            v464 = *((_QWORD *)&v662 + 1);
            *((_QWORD *)&v662 + 1) = 0;
            *(_QWORD *)&v596 = v464;
            v465 = v663;
            *(_QWORD *)&v663 = 0;
            *((_QWORD *)&v596 + 1) = v465;
            LOBYTE(v597) = 1;
          }
          BYTE8(v597) = 1;
        }
        v466 = v665;
        v665 = 0;
        v598 = v466;
        v467 = v666;
        v666 = 0;
        v599 = v467;
        v468 = *((_QWORD *)&v667 + 1);
        v600 = v667;
        v667 = 0uLL;
        v601 = v468;
        LOBYTE(v602) = 1;
        v469 = qword_1ECE7BE60;
        if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v669 = 134217984;
          *(_QWORD *)&v669[4] = v446;
          _os_log_impl(&dword_1940B8000, v469, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::completeShippingContactSelection()", v669, 0xCu);
        }
        (*(void (**)(_QWORD, _BYTE **))(**(_QWORD **)(v446 + 8) + 56))(*(_QWORD *)(v446 + 8), &v556);
        if ((_BYTE)v602)
          WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)&v556, v470);
        *(_QWORD *)a7 = 0;
        *(_QWORD *)(a7 + 8) = 0;
        *(_QWORD *)(a7 + 16) = 0;
        v61 = v783;
        if (v783 == -1)
          goto LABEL_557;
      }
      ((void (*)(_BYTE **, _BYTE *))off_1E3352AA8[v61])(&v556, v715);
LABEL_557:
      ((void (*)(char *, char *))off_1E3352B08[v8])(v714, v610);
LABEL_558:
      ((void (*)(char *, uint64_t *))off_1E3352A98[v13])(v714, &v620);
      WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)buf, v471);
LABEL_559:
      if (HIDWORD(v555))
      {
        v472 = v554;
        v473 = 8 * HIDWORD(v555);
        do
        {
          v474 = *(_QWORD *)v472;
          *(_QWORD *)v472 = 0;
          if (v474)
          {
            if (*(_DWORD *)(v474 + 8) == 1)
            {
              v475 = *(WTF::StringImpl **)(v474 + 16);
              *(_QWORD *)(v474 + 16) = 0;
              if (v475)
              {
                if (*(_DWORD *)v475 == 2)
                  WTF::StringImpl::destroy(v475, v15);
                else
                  *(_DWORD *)v475 -= 2;
              }
              WTF::fastFree((WTF *)v474, v15);
            }
            else
            {
              --*(_DWORD *)(v474 + 8);
            }
          }
          v472 = (WTF *)((char *)v472 + 8);
          v473 -= 8;
        }
        while (v473);
      }
      goto LABEL_643;
    case 2:
      *(_BYTE *)(a1 + 696) = 0;
      v669[0] = 1;
      memset(&v669[8], 0, 17);
      *(_QWORD *)&v669[32] = 0x7FF8000000000000;
      v669[40] = 1;
      *(_DWORD *)&v669[44] = 1;
      *(int64x2_t *)&v669[48] = vdupq_n_s64(0x7FF8000000000000uLL);
      v670 = 0;
      LOWORD(v671) = 0;
      v8 = (unint64_t)v669;
      v688 = 0;
      LOBYTE(v689) = 0;
      LOBYTE(v696) = 0;
      LOBYTE(v697) = 0;
      LOBYTE(v698) = 0;
      LOBYTE(v699) = 0;
      LOBYTE(v708) = 0;
      BYTE8(v708) = 0;
      v710 = 0;
      LOBYTE(v673) = 0;
      v672 = 0u;
      v711 = 0u;
      WebCore::ApplePayPaymentHandler::computeShippingMethods((uint64_t)&v620, a1);
      v13 = v622;
      if (v622)
      {
        if (v622 != 1)
          goto LABEL_652;
        v14 = v621;
        v621 = 0;
        *(_BYTE *)a7 = v620;
        *(_QWORD *)(a7 + 8) = v14;
        *(_BYTE *)(a7 + 16) = 1;
        goto LABEL_440;
      }
      v29 = v620;
      v620 = 0;
      v30 = v621;
      v621 = 0;
      v7 = (WTF *)v711;
      if (HIDWORD(v711))
        WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v711, (WTF::StringImpl *)(v711 + 104 * HIDWORD(v711)));
      if (v7)
        WTF::fastFree(v7, v12);
      *(_QWORD *)&v711 = v29;
      *((_QWORD *)&v711 + 1) = v30;
      WebCore::ApplePayPaymentHandler::computeTotalAndLineItems((WebCore::ApplePayPaymentHandler *)v610, a1);
      v9 = v619;
      if (v619)
      {
        if (v619 != 1)
          goto LABEL_652;
        v31 = v611;
        *(_QWORD *)&v611 = 0;
        *(_BYTE *)a7 = v610[0];
        *(_QWORD *)(a7 + 8) = v31;
        *(_BYTE *)(a7 + 16) = 1;
        goto LABEL_439;
      }
      v714[0] = v610[0];
      v38 = v611;
      v611 = 0uLL;
      *(_OWORD *)v715 = v38;
      *(_OWORD *)&v715[16] = v612;
      v716 = v613;
      v717 = v614;
      v718 = v615;
      LOWORD(v719) = v616;
      v7 = (WTF *)&v720;
      v39 = v617;
      v615 = 0;
      v617 = 0;
      v720 = v39;
      *(_QWORD *)&v38 = v618;
      v618 = 0;
      v721 = v38;
      v556 = v669;
      *(_QWORD *)&v557 = &v672;
      std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebCore::ApplePayLineItem &,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WebCore::ApplePayLineItem,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WebCore::ApplePayLineItem,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,1ul>((uint64_t *)&v556, (uint64_t)v714);
      WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v720, v40);
      v42 = v718;
      v718 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v41);
        else
          *(_DWORD *)v42 -= 2;
      }
      v43 = *(WTF::StringImpl **)&v715[8];
      *(_QWORD *)&v715[8] = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v41);
        else
          *(_DWORD *)v43 -= 2;
      }
      v44 = *(WTF::StringImpl **)v715;
      *(_QWORD *)v715 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v41);
        else
          *(_DWORD *)v44 -= 2;
      }
      WebCore::ApplePayPaymentHandler::firstApplicableModifier((WebCore::ApplePayPaymentHandler *)v714, a1);
      if (v783)
      {
        if (v783 != 1)
          goto LABEL_652;
        v45 = *(_QWORD *)&v715[8];
        *(_QWORD *)&v715[8] = 0;
        *(_BYTE *)a7 = v715[0];
        *(_QWORD *)(a7 + 8) = v45;
        v46 = 1;
        *(_BYTE *)(a7 + 16) = 1;
        goto LABEL_438;
      }
      v609 = 0;
      if (!v782)
        goto LABEL_410;
      v62 = *(_QWORD *)v715;
      *(_QWORD *)v715 = 0;
      v556 = (_BYTE *)v62;
      LOBYTE(v557) = 0;
      LOBYTE(v559) = 0;
      if (BYTE8(v716))
      {
        v63 = *(_OWORD *)&v715[8];
        memset(&v715[8], 0, 24);
        v557 = v63;
        *(_QWORD *)&v558 = *(_QWORD *)&v715[24];
        BYTE8(v558) = v716;
        LOBYTE(v559) = 1;
      }
      v64 = v717;
      v717 = 0;
      *((_QWORD *)&v559 + 1) = v64;
      v65 = v718;
      v718 = 0;
      v560 = v65;
      v561 = 0;
      if (!v719)
        goto LABEL_99;
      v7 = *(WTF **)(((unint64_t)(v719 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v66 = (_QWORD *)*((_QWORD *)v7 + 5);
      if (!v66)
        goto LABEL_653;
      goto LABEL_93;
    case 3:
      WebCore::ApplePayPaymentHandler::computeErrors(&v554, a1, a3, a4, a5, a6);
      v22 = *(_QWORD *)(a1 + 24);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          v22 = v23 - 96;
        else
          v22 = 0;
      }
      if (*(_BYTE *)(v22 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x1952C07E8);
      }
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 336) + 8) + 24) + 8)
                                 + 1240)
                     + 16))
        v24 = WTF::RefPtr<WebCore::PaymentSession,WTF::RawPtrTraits<WebCore::PaymentSession>,WTF::DefaultRefDerefTraits<WebCore::PaymentSession>>::unspecifiedBoolTypeInstance;
      else
        v24 = 0;
      if (!v24)
      {
        *(_BYTE *)a7 = 8;
        *(_QWORD *)(a7 + 8) = 0;
        *(_BYTE *)(a7 + 16) = 1;
LABEL_631:
        if (HIDWORD(v555))
        {
          v539 = v554;
          v540 = 8 * HIDWORD(v555);
          do
          {
            v541 = *(_QWORD *)v539;
            *(_QWORD *)v539 = 0;
            if (v541)
            {
              if (*(_DWORD *)(v541 + 8) == 1)
              {
                v542 = *(WTF::StringImpl **)(v541 + 16);
                *(_QWORD *)(v541 + 16) = 0;
                if (v542)
                {
                  if (*(_DWORD *)v542 == 2)
                    WTF::StringImpl::destroy(v542, v15);
                  else
                    *(_DWORD *)v542 -= 2;
                }
                WTF::fastFree((WTF *)v541, v15);
              }
              else
              {
                --*(_DWORD *)(v541 + 8);
              }
            }
            v539 = (WTF *)((char *)v539 + 8);
            v540 -= 8;
          }
          while (v540);
        }
LABEL_643:
        v543 = v554;
        if (v554)
        {
          v554 = 0;
          LODWORD(v555) = 0;
          WTF::fastFree(v543, v15);
        }
        return;
      }
      v25 = *(unsigned __int8 *)(a1 + 696);
      *(_BYTE *)(a1 + 696) = 0;
      if (v25 != 4)
      {
        buf[0] = 1;
        memset(&buf[8], 0, 17);
        *(_QWORD *)&buf[32] = 0x7FF8000000000000;
        buf[40] = 1;
        *(_DWORD *)&buf[44] = 1;
        *(int64x2_t *)&buf[48] = vdupq_n_s64(0x7FF8000000000000uLL);
        v624 = 0;
        LOWORD(v625) = 0;
        v9 = (unint64_t)buf;
        v642 = 0;
        LOBYTE(v643) = 0;
        LOBYTE(v650) = 0;
        LOBYTE(v651) = 0;
        LOBYTE(v652) = 0;
        LOBYTE(v653) = 0;
        LOBYTE(v662) = 0;
        BYTE8(v662) = 0;
        v664 = 0;
        LOBYTE(v627) = 0;
        v626 = 0u;
        v667 = 0u;
        v668 = 0;
        v665 = v554;
        v32 = v555;
        v554 = 0;
        v555 = 0;
        v666 = v32;
        WebCore::ApplePayPaymentHandler::computeShippingMethods((uint64_t)&v620, a1);
        v13 = v622;
        if (v622)
        {
          if (v622 != 1)
            goto LABEL_652;
          v34 = v621;
          v621 = 0;
          *(_BYTE *)a7 = v620;
          *(_QWORD *)(a7 + 8) = v34;
          *(_BYTE *)(a7 + 16) = 1;
LABEL_630:
          ((void (*)(char *, uint64_t *))off_1E3352A98[v13])(v714, &v620);
          WebCore::ApplePayPaymentMethodUpdate::~ApplePayPaymentMethodUpdate((WebCore::ApplePayPaymentMethodUpdate *)buf, v538);
          goto LABEL_631;
        }
        v50 = v620;
        v620 = 0;
        v51 = v621;
        v621 = 0;
        v7 = (WTF *)v667;
        if (HIDWORD(v667))
          WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v667, (WTF::StringImpl *)(v667 + 104 * HIDWORD(v667)));
        if (v7)
          WTF::fastFree(v7, v33);
        *(_QWORD *)&v667 = v50;
        *((_QWORD *)&v667 + 1) = v51;
        WebCore::ApplePayPaymentHandler::computeTotalAndLineItems((WebCore::ApplePayPaymentHandler *)v610, a1);
        v8 = v619;
        if (v619)
        {
          if (v619 != 1)
            goto LABEL_652;
          v52 = v611;
          *(_QWORD *)&v611 = 0;
          *(_BYTE *)a7 = v610[0];
          *(_QWORD *)(a7 + 8) = v52;
          *(_BYTE *)(a7 + 16) = 1;
          goto LABEL_629;
        }
        v714[0] = v610[0];
        v83 = v611;
        v611 = 0uLL;
        *(_OWORD *)v715 = v83;
        *(_OWORD *)&v715[16] = v612;
        v716 = v613;
        v717 = v614;
        v718 = v615;
        LOWORD(v719) = v616;
        v84 = v617;
        v615 = 0;
        v617 = 0;
        v720 = v84;
        *(_QWORD *)&v83 = v618;
        v618 = 0;
        v721 = v83;
        v556 = buf;
        *(_QWORD *)&v557 = &v626;
        std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebCore::ApplePayLineItem &,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WebCore::ApplePayLineItem,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WebCore::ApplePayLineItem,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,1ul>((uint64_t *)&v556, (uint64_t)v714);
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v720, v85);
        v87 = v718;
        v718 = 0;
        v7 = (WTF *)v669;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, v86);
          else
            *(_DWORD *)v87 -= 2;
        }
        v88 = *(WTF::StringImpl **)&v715[8];
        *(_QWORD *)&v715[8] = 0;
        if (v88)
        {
          if (*(_DWORD *)v88 == 2)
            WTF::StringImpl::destroy(v88, v86);
          else
            *(_DWORD *)v88 -= 2;
        }
        v89 = *(WTF::StringImpl **)v715;
        *(_QWORD *)v715 = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 2)
            WTF::StringImpl::destroy(v89, v86);
          else
            *(_DWORD *)v89 -= 2;
        }
        WebCore::ApplePayPaymentHandler::firstApplicableModifier((WebCore::ApplePayPaymentHandler *)v714, a1);
        if (v783)
        {
          if (v783 != 1)
            goto LABEL_652;
          v90 = *(_QWORD *)&v715[8];
          *(_QWORD *)&v715[8] = 0;
          *(_BYTE *)a7 = v715[0];
          *(_QWORD *)(a7 + 8) = v90;
          v91 = 1;
          *(_BYTE *)(a7 + 16) = 1;
        }
        else
        {
          v609 = 0;
          v553 = (_BYTE *)v8;
          if (v782)
          {
            v118 = *(_QWORD *)v715;
            *(_QWORD *)v715 = 0;
            v556 = (_BYTE *)v118;
            LOBYTE(v557) = 0;
            LOBYTE(v559) = 0;
            if (BYTE8(v716))
            {
              v119 = *(_OWORD *)&v715[8];
              memset(&v715[8], 0, 24);
              v557 = v119;
              *(_QWORD *)&v558 = *(_QWORD *)&v715[24];
              BYTE8(v558) = v716;
              LOBYTE(v559) = 1;
            }
            v120 = v717;
            v717 = 0;
            *((_QWORD *)&v559 + 1) = v120;
            v121 = v718;
            v718 = 0;
            v560 = v121;
            v561 = 0;
            if (v719)
            {
              v122 = *(_QWORD *)(((unint64_t)(v719 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v123 = *(_QWORD **)(v122 + 40);
              if (!v123)
              {
                JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v719 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
                v123 = *(_QWORD **)(v122 + 40);
              }
              *(_QWORD *)(v122 + 40) = *v123;
              v123[2] = 0;
              v124 = v123 + 2;
              *v123 = 0;
              v123[1] = 0;
              v561 = v123 + 2;
              v125 = v719;
              if (v719)
                v125 = (_QWORD *)*v719;
              v126 = (unint64_t)(v124 - 2);
              if ((v125 != 0) != (*v124 != 0))
              {
                if (v125)
                {
                  v127 = *(unint64_t **)((v126 & 0xFFFFFFFFFFFFF000) + 0x10);
                  v128 = v127[3];
                  v127 += 3;
                  *(_QWORD *)v126 = v128;
                  *(v124 - 1) = v127;
                  *v127 = v126;
                  *(_QWORD *)(v128 + 8) = v126;
                }
                else
                {
                  v551 = *(_QWORD *)v126;
                  v550 = (_QWORD *)*(v124 - 1);
                  *v550 = *(_QWORD *)v126;
                  *(_QWORD *)(v551 + 8) = v550;
                  *(_QWORD *)v126 = 0;
                  *(_QWORD *)(v126 + 8) = 0;
                  v124 = v561;
                }
              }
              *v124 = v125;
            }
            v562 = v720;
            LOBYTE(v563) = 0;
            LOBYTE(v567) = 0;
            if (v728)
            {
              v564 = v722;
              *(_OWORD *)v565 = v723;
              v129 = v721;
              LOBYTE(v563) = v721;
              v722 = 0uLL;
              *(_OWORD *)&v565[16] = v724;
              v130 = v726;
              v726 = 0;
              *(_QWORD *)&v565[32] = v725;
              *(_QWORD *)&v566 = v130;
              WORD4(v566) = v727;
              LOBYTE(v567) = 1;
            }
            else
            {
              v129 = 0;
            }
            v290 = v729;
            v729 = 0;
            v568 = v290;
            v291 = v730;
            v292 = HIDWORD(v730);
            v730 = 0;
            v569 = __PAIR64__(v292, v291);
            v293 = v731;
            v731 = 0;
            v570 = v293;
            v294 = v732;
            v295 = HIDWORD(v732);
            v732 = 0;
            *(_QWORD *)&v571 = __PAIR64__(v295, v294);
            BYTE8(v571) = 0;
            BYTE8(v582) = 0;
            if (v751)
            {
              *(_OWORD *)&v572[8] = v735;
              *((_QWORD *)&v571 + 1) = v733;
              v572[0] = v734;
              v733 = 0;
              v735 = 0uLL;
              *(_OWORD *)&v572[24] = v736;
              v573 = v737;
              v296 = v739;
              v739 = 0;
              v574 = v738;
              *(_QWORD *)&v575 = v296;
              WORD4(v575) = v740;
              LOBYTE(v576) = 0;
              LOBYTE(v580) = 0;
              if (v748)
              {
                LOBYTE(v576) = v741;
                v297 = v742;
                v742 = 0uLL;
                v577 = v297;
                *(_OWORD *)v578 = v743;
                *(_OWORD *)&v578[16] = v744;
                v298 = v746;
                v746 = 0;
                *(_QWORD *)&v578[32] = v745;
                *(_QWORD *)&v579 = v298;
                WORD4(v579) = v747;
                LOBYTE(v580) = 1;
              }
              v299 = v749;
              v749 = 0uLL;
              v581 = v299;
              v300 = v750;
              v750 = 0;
              *(_QWORD *)&v582 = v300;
              BYTE8(v582) = 1;
            }
            LOBYTE(v583) = 0;
            LOBYTE(v591) = 0;
            if (v762)
            {
              v583 = v752;
              v584 = v753;
              v301 = v754;
              v754 = 0u;
              v585 = v301;
              v586 = v755;
              *(_OWORD *)v587 = v756;
              v302 = v758;
              v752 = 0;
              v758 = 0;
              *(_QWORD *)&v587[16] = v757;
              *(_QWORD *)&v588 = v302;
              WORD4(v588) = v759;
              v303 = v760;
              v760 = 0u;
              v589 = v303;
              v304 = v761;
              v761 = 0;
              v590 = v304;
              LOBYTE(v591) = 1;
            }
            LOBYTE(v592) = 0;
            LOBYTE(v594) = 0;
            if (v765)
            {
              v305 = v763;
              v763 = 0;
              v592 = v305;
              v306 = v764;
              v764 = 0;
              v593 = v306;
              LOBYTE(v594) = 1;
            }
            BYTE8(v594) = 0;
            v604 = 0;
            if (v777)
            {
              v307 = v768;
              v768 = 0u;
              *(_OWORD *)&v595[8] = v307;
              v596 = v769;
              v597 = v770;
              v308 = v775;
              v309 = v776;
              v775 = 0u;
              v776 = 0u;
              v310 = v766;
              v766 = 0;
              *((_QWORD *)&v594 + 1) = v310;
              v595[0] = v767;
              v598 = v771;
              v311 = v772;
              v772 = 0;
              v599 = v311;
              LOWORD(v600) = v773;
              v601 = v774;
              v602 = v308;
              v603 = v309;
              v604 = 1;
            }
            LOBYTE(v605) = 0;
            v608 = 0;
            if (v781)
            {
              v607 = 0;
              if (v780)
              {
                v312 = v778;
                v778 = 0;
                v605 = v312;
                v313 = v779;
                v779 = 0;
                v606 = v313;
                v607 = 1;
              }
              v608 = 1;
            }
            v609 = 1;
            *(_QWORD *)v669 = v720;
            v669[8] = 0;
            BYTE8(v672) = 0;
            if (v728)
            {
              v669[8] = v129;
              v314 = v564;
              v564 = 0uLL;
              *(_OWORD *)&v669[16] = v314;
              *(_OWORD *)&v669[32] = *(_OWORD *)v565;
              *(_OWORD *)&v669[48] = *(_OWORD *)&v565[16];
              v315 = v566;
              *(_QWORD *)&v566 = 0;
              v670 = *(_QWORD **)&v565[32];
              v671 = v315;
              LOWORD(v672) = WORD4(v566);
              BYTE8(v672) = 1;
            }
            v568 = 0;
            v673 = v290;
            v569 = 0;
            v674 = v291;
            v675 = v292;
            v570 = 0;
            *(_QWORD *)&v676 = v293;
            *(_QWORD *)&v571 = 0;
            *((_QWORD *)&v676 + 1) = __PAIR64__(v295, v294);
            LOBYTE(v677) = 0;
            BYTE8(v690) = 0;
            if (v751)
            {
              *(_QWORD *)&v677 = *((_QWORD *)&v571 + 1);
              BYTE8(v677) = v572[0];
              v316 = *(_OWORD *)&v572[8];
              *((_QWORD *)&v571 + 1) = 0;
              *(_QWORD *)&v572[8] = 0;
              *(_QWORD *)&v572[16] = 0;
              v678 = v316;
              v679 = *(_OWORD *)&v572[24];
              v680 = v573;
              v317 = v575;
              *(_QWORD *)&v575 = 0;
              *(_QWORD *)&v681 = v574;
              *((_QWORD *)&v681 + 1) = v317;
              LOWORD(v682) = WORD4(v575);
              BYTE8(v682) = 0;
              v688 = 0;
              if ((_BYTE)v580)
              {
                v683 = v577;
                v684 = *(_OWORD *)v578;
                BYTE8(v682) = v576;
                v577 = 0uLL;
                v685 = *(_OWORD *)&v578[16];
                v318 = v579;
                *(_QWORD *)&v579 = 0;
                *(_QWORD *)&v686 = *(_QWORD *)&v578[32];
                *((_QWORD *)&v686 + 1) = v318;
                LOWORD(v687) = WORD4(v579);
                v688 = 1;
              }
              v319 = v581;
              v581 = 0uLL;
              v689 = v319;
              v320 = v582;
              *(_QWORD *)&v582 = 0;
              *(_QWORD *)&v690 = v320;
              BYTE8(v690) = 1;
            }
            LOBYTE(v691) = 0;
            LOBYTE(v699) = 0;
            if (v762)
            {
              *(_QWORD *)&v691 = v583;
              BYTE8(v691) = v584;
              v692 = v585;
              v693 = v586;
              v585 = 0u;
              *(_OWORD *)v694 = *(_OWORD *)v587;
              v321 = v588;
              v583 = 0;
              *(_QWORD *)&v588 = 0;
              *(_QWORD *)&v694[16] = *(_QWORD *)&v587[16];
              v695 = v321;
              v696 = WORD4(v588);
              v322 = v589;
              v589 = 0u;
              v697 = v322;
              v323 = v590;
              v590 = 0;
              v698 = v323;
              LOBYTE(v699) = 1;
            }
            LOBYTE(v700) = 0;
            BYTE8(v701) = 0;
            if (v765)
            {
              v324 = v592;
              v592 = 0;
              v700 = v324;
              v325 = v593;
              v593 = 0;
              *(_QWORD *)&v701 = v325;
              BYTE8(v701) = 1;
            }
            LOBYTE(v702) = 0;
            v710 = 0;
            if (v777)
            {
              v326 = *(_OWORD *)&v595[8];
              *(_OWORD *)&v595[8] = 0u;
              v703 = v326;
              v704 = v596;
              v705 = v597;
              v327 = v602;
              v328 = v603;
              v602 = 0u;
              v603 = 0u;
              v329 = *((_QWORD *)&v594 + 1);
              *((_QWORD *)&v594 + 1) = 0;
              *(_QWORD *)&v702 = v329;
              BYTE8(v702) = v595[0];
              *(_QWORD *)&v706 = v598;
              v330 = v599;
              v599 = 0;
              *((_QWORD *)&v706 + 1) = v330;
              LOWORD(v707) = v600;
              *((_QWORD *)&v707 + 1) = v601;
              v708 = v327;
              v709 = v328;
              v710 = 1;
            }
            LOBYTE(v711) = 0;
            v713 = 0;
            if (v781)
            {
              v712 = 0;
              if (v607)
              {
                v331 = v605;
                v605 = 0;
                *(_QWORD *)&v711 = v331;
                v332 = v606;
                v606 = 0;
                *((_QWORD *)&v711 + 1) = v332;
                v712 = 1;
              }
              v713 = 1;
            }
            std::__optional_storage_base<WebCore::ApplePayRecurringPaymentRequest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplePayRecurringPaymentRequest,false>>((uint64_t)&v627, (WTF::StringImpl *)&v677);
            if (v650 == v699)
            {
              if ((_BYTE)v650)
                WebCore::ApplePayAutomaticReloadPaymentRequest::operator=((uint64_t)&v643, (WTF::StringImpl *)&v691);
            }
            else if ((_BYTE)v650)
            {
              WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v643, v333);
              LOBYTE(v650) = 0;
            }
            else
            {
              *(_QWORD *)&v643 = v691;
              BYTE8(v643) = BYTE8(v691);
              v405 = v692;
              v692 = 0u;
              v644 = v405;
              v645 = v693;
              v646 = *(_OWORD *)v694;
              v406 = v695;
              *(_QWORD *)&v691 = 0;
              v695 = 0;
              *(_QWORD *)&v647 = *(_QWORD *)&v694[16];
              *((_QWORD *)&v647 + 1) = v406;
              *(_WORD *)v648 = v696;
              v407 = v697;
              v697 = 0u;
              *(_OWORD *)&v648[8] = v407;
              v408 = v698;
              v698 = 0;
              v649 = v408;
              LOBYTE(v650) = 1;
            }
            if (v652 == BYTE8(v701))
            {
              if ((_BYTE)v652)
              {
                if (HIDWORD(v651))
                {
                  v409 = (WebCore::ApplePayPaymentTokenContext *)v651;
                  v410 = 40 * HIDWORD(v651);
                  do
                  {
                    WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v409, v333);
                    v409 = (WebCore::ApplePayPaymentTokenContext *)(v411 + 40);
                    v410 -= 40;
                  }
                  while (v410);
                }
                v412 = (WTF *)v651;
                if ((_QWORD)v651)
                {
                  *(_QWORD *)&v651 = 0;
                  DWORD2(v651) = 0;
                  WTF::fastFree(v412, v333);
                }
                v413 = v700;
                v700 = 0;
                *(_QWORD *)&v651 = v413;
                v414 = v701;
                *(_QWORD *)&v701 = 0;
                *((_QWORD *)&v651 + 1) = v414;
              }
            }
            else if ((_BYTE)v652)
            {
              if (HIDWORD(v651))
              {
                v415 = (WebCore::ApplePayPaymentTokenContext *)v651;
                v416 = 40 * HIDWORD(v651);
                do
                {
                  WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v415, v333);
                  v415 = (WebCore::ApplePayPaymentTokenContext *)(v417 + 40);
                  v416 -= 40;
                }
                while (v416);
              }
              v418 = (WTF *)v651;
              if ((_QWORD)v651)
              {
                *(_QWORD *)&v651 = 0;
                DWORD2(v651) = 0;
                WTF::fastFree(v418, v333);
              }
              LOBYTE(v652) = 0;
            }
            else
            {
              v421 = v700;
              v700 = 0;
              *(_QWORD *)&v651 = v421;
              v422 = v701;
              *(_QWORD *)&v701 = 0;
              *((_QWORD *)&v651 + 1) = v422;
              LOBYTE(v652) = 1;
            }
            if (v662 == v710)
            {
              if ((_BYTE)v662)
                WebCore::ApplePayDeferredPaymentRequest::operator=((uint64_t)&v653, (WTF::StringImpl *)&v702);
            }
            else if ((_BYTE)v662)
            {
              WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&v653, v333);
              LOBYTE(v662) = 0;
            }
            else
            {
              v430 = v703;
              v703 = 0u;
              v655 = v430;
              v656 = v704;
              v657 = v705;
              v431 = v708;
              v432 = v709;
              v708 = 0u;
              v709 = 0u;
              v653 = v702;
              LOBYTE(v654) = BYTE8(v702);
              v433 = *((_QWORD *)&v706 + 1);
              *(_QWORD *)&v658 = v706;
              *(_QWORD *)&v702 = 0;
              *((_QWORD *)&v706 + 1) = 0;
              *((_QWORD *)&v658 + 1) = v433;
              LOWORD(v659) = v707;
              *((_QWORD *)&v659 + 1) = *((_QWORD *)&v707 + 1);
              v660 = v431;
              v661 = v432;
              LOBYTE(v662) = 1;
            }
            if (v664 == v713)
            {
              if (v664)
              {
                if (BYTE8(v663) == v712)
                {
                  if (BYTE8(v663))
                  {
                    v434 = (WTF *)*((_QWORD *)&v662 + 1);
                    if (*((_QWORD *)&v662 + 1))
                    {
                      *((_QWORD *)&v662 + 1) = 0;
                      LODWORD(v663) = 0;
                      WTF::fastFree(v434, v333);
                    }
                    v435 = *((_QWORD *)&v711 + 1);
                    *((_QWORD *)&v662 + 1) = v711;
                    v711 = 0uLL;
                    *(_QWORD *)&v663 = v435;
                  }
                }
                else if (BYTE8(v663))
                {
                  v440 = (WTF *)*((_QWORD *)&v662 + 1);
                  if (*((_QWORD *)&v662 + 1))
                  {
                    *((_QWORD *)&v662 + 1) = 0;
                    LODWORD(v663) = 0;
                    WTF::fastFree(v440, v333);
                  }
                  BYTE8(v663) = 0;
                }
                else
                {
                  v507 = *((_QWORD *)&v711 + 1);
                  *((_QWORD *)&v662 + 1) = v711;
                  v711 = 0uLL;
                  *(_QWORD *)&v663 = v507;
                  BYTE8(v663) = 1;
                }
              }
            }
            else if (v664)
            {
              if (BYTE8(v663))
              {
                v436 = (WTF *)*((_QWORD *)&v662 + 1);
                if (*((_QWORD *)&v662 + 1))
                {
                  *((_QWORD *)&v662 + 1) = 0;
                  LODWORD(v663) = 0;
                  WTF::fastFree(v436, v333);
                }
              }
              v664 = 0;
            }
            else
            {
              BYTE8(v662) = 0;
              BYTE8(v663) = 0;
              if (v712)
              {
                v438 = *((_QWORD *)&v711 + 1);
                *((_QWORD *)&v662 + 1) = v711;
                v711 = 0uLL;
                *(_QWORD *)&v663 = v438;
                BYTE8(v663) = 1;
              }
              v664 = 1;
            }
            WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)v669, v333);
            if (v609)
            {
              WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v562, v508);
              WebCore::PaymentDetailsModifier::~PaymentDetailsModifier((WebCore::PaymentDetailsModifier *)&v556, v509);
            }
          }
          v510 = *(_QWORD *)(a1 + 24);
          if (v510)
          {
            v511 = *(_QWORD *)(v510 + 8);
            if (v511)
              v510 = v511 - 96;
            else
              v510 = 0;
          }
          if (*(_BYTE *)(v510 + 274))
          {
            __break(0xC471u);
            JUMPOUT(0x1952C0868);
          }
          v512 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v510 + 336) + 8) + 24) + 8) + 1240);
          LOBYTE(v556) = buf[0];
          v513 = *(_OWORD *)&buf[8];
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)&buf[16] = 0;
          v557 = v513;
          v558 = *(_OWORD *)&buf[24];
          v559 = *(_OWORD *)&buf[40];
          v560 = *(WTF::StringImpl **)&buf[56];
          v561 = v624;
          LOWORD(v562) = v625;
          v624 = 0;
          v514 = *((_QWORD *)&v626 + 1);
          v563 = v626;
          v626 = 0uLL;
          *(_QWORD *)&v564 = v514;
          BYTE8(v564) = 0;
          LOBYTE(v577) = 0;
          if (v642)
          {
            *((_QWORD *)&v564 + 1) = v627;
            v565[0] = v628;
            v515 = v630;
            v627 = 0;
            v630 = 0uLL;
            *(_OWORD *)&v565[8] = v515;
            *(_OWORD *)&v565[24] = v631;
            v566 = v632;
            v516 = *((_QWORD *)&v633 + 1);
            *((_QWORD *)&v633 + 1) = 0;
            v567 = v633;
            v568 = v516;
            LOWORD(v569) = v634;
            LOBYTE(v570) = 0;
            LOBYTE(v574) = 0;
            if (BYTE8(v639))
            {
              LOBYTE(v570) = BYTE8(v634);
              v517 = v635;
              v635 = 0uLL;
              v571 = v517;
              *(_OWORD *)v572 = v636;
              *(_OWORD *)&v572[16] = v637;
              v518 = *((_QWORD *)&v638 + 1);
              *((_QWORD *)&v638 + 1) = 0;
              *(_QWORD *)&v572[32] = v638;
              *(_QWORD *)&v573 = v518;
              WORD4(v573) = v639;
              LOBYTE(v574) = 1;
            }
            v519 = v640;
            v640 = 0uLL;
            v575 = v519;
            v520 = v641;
            v641 = 0;
            v576 = v520;
            LOBYTE(v577) = 1;
          }
          BYTE8(v577) = 0;
          v584 = 0;
          if ((_BYTE)v650)
          {
            *((_QWORD *)&v577 + 1) = v643;
            v578[0] = BYTE8(v643);
            v521 = v644;
            v644 = 0u;
            *(_OWORD *)&v578[8] = v521;
            *(_OWORD *)&v578[24] = v645;
            v579 = v646;
            v522 = *((_QWORD *)&v647 + 1);
            *(_QWORD *)&v643 = 0;
            *((_QWORD *)&v647 + 1) = 0;
            v580 = v647;
            *(_QWORD *)&v581 = v522;
            WORD4(v581) = *(_WORD *)v648;
            v523 = *(_OWORD *)&v648[8];
            *(_OWORD *)&v648[8] = 0u;
            v582 = v523;
            v524 = v649;
            v649 = 0;
            v583 = v524;
            v584 = 1;
          }
          LOBYTE(v585) = 0;
          LOBYTE(v586) = 0;
          if ((_BYTE)v652)
          {
            v525 = *((_QWORD *)&v651 + 1);
            *(_QWORD *)&v585 = v651;
            v651 = 0uLL;
            *((_QWORD *)&v585 + 1) = v525;
            LOBYTE(v586) = 1;
          }
          BYTE8(v586) = 0;
          v595[16] = 0;
          if ((_BYTE)v662)
          {
            v526 = v655;
            v655 = 0u;
            *(_OWORD *)&v587[8] = v526;
            v588 = v656;
            v589 = v657;
            v527 = v660;
            v528 = v661;
            v660 = 0u;
            v661 = 0u;
            *((_QWORD *)&v586 + 1) = v653;
            v587[0] = v654;
            v529 = *((_QWORD *)&v658 + 1);
            v590 = v658;
            v653 = 0;
            *((_QWORD *)&v658 + 1) = 0;
            v591 = v529;
            LOWORD(v592) = v659;
            v593 = *((_QWORD *)&v659 + 1);
            v594 = v527;
            *(_OWORD *)v595 = v528;
            v595[16] = 1;
          }
          LOBYTE(v596) = 0;
          BYTE8(v597) = 0;
          if (v664)
          {
            LOBYTE(v597) = 0;
            if (BYTE8(v663))
            {
              v530 = *((_QWORD *)&v662 + 1);
              *((_QWORD *)&v662 + 1) = 0;
              *(_QWORD *)&v596 = v530;
              v531 = v663;
              *(_QWORD *)&v663 = 0;
              *((_QWORD *)&v596 + 1) = v531;
              LOBYTE(v597) = 1;
            }
            BYTE8(v597) = 1;
          }
          v532 = v665;
          v665 = 0;
          v598 = v532;
          v533 = v666;
          v666 = 0;
          v599 = v533;
          v534 = *((_QWORD *)&v667 + 1);
          v600 = v667;
          v667 = 0uLL;
          v601 = v534;
          v535 = v668;
          v668 = 0;
          *(_QWORD *)&v602 = v535;
          BYTE8(v602) = 1;
          v536 = qword_1ECE7BE60;
          if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v669 = 134217984;
            *(_QWORD *)&v669[4] = v512;
            _os_log_impl(&dword_1940B8000, v536, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::completePaymentMethodSelection()", v669, 0xCu);
          }
          (*(void (**)(_QWORD, _BYTE **))(**(_QWORD **)(v512 + 8) + 64))(*(_QWORD *)(v512 + 8), &v556);
          if (BYTE8(v602))
            WebCore::ApplePayPaymentMethodUpdate::~ApplePayPaymentMethodUpdate((WebCore::ApplePayPaymentMethodUpdate *)&v556, v537);
          *(_QWORD *)a7 = 0;
          *(_QWORD *)(a7 + 8) = 0;
          *(_QWORD *)(a7 + 16) = 0;
          v91 = v783;
          v8 = (unint64_t)v553;
          if (v783 == -1)
            goto LABEL_629;
        }
        ((void (*)(_BYTE **, _BYTE *))off_1E3352AA8[v91])(&v556, v715);
LABEL_629:
        ((void (*)(char *, char *))off_1E3352B08[v8])(v714, v610);
        goto LABEL_630;
      }
      buf[0] = 1;
      memset(&buf[8], 0, 17);
      *(_QWORD *)&buf[32] = 0x7FF8000000000000;
      buf[40] = 1;
      *(_DWORD *)&buf[44] = 1;
      *(int64x2_t *)&buf[48] = vdupq_n_s64(0x7FF8000000000000uLL);
      v624 = 0;
      LOWORD(v625) = 0;
      v9 = (unint64_t)buf;
      v642 = 0;
      LOBYTE(v643) = 0;
      LOBYTE(v650) = 0;
      LOBYTE(v651) = 0;
      LOBYTE(v652) = 0;
      LOBYTE(v653) = 0;
      LOBYTE(v662) = 0;
      BYTE8(v662) = 0;
      v664 = 0;
      LOBYTE(v627) = 0;
      v626 = 0u;
      v667 = 0u;
      v665 = v554;
      v26 = v555;
      v554 = 0;
      v555 = 0;
      v666 = v26;
      WebCore::ApplePayPaymentHandler::computeShippingMethods((uint64_t)&v620, a1);
      v13 = v622;
      if (!v622)
      {
        v47 = v620;
        v620 = 0;
        v48 = v621;
        v621 = 0;
        v7 = (WTF *)v667;
        if (HIDWORD(v667))
          WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v667, (WTF::StringImpl *)(v667 + 104 * HIDWORD(v667)));
        if (v7)
          WTF::fastFree(v7, v27);
        *(_QWORD *)&v667 = v47;
        *((_QWORD *)&v667 + 1) = v48;
        WebCore::ApplePayPaymentHandler::computeTotalAndLineItems((WebCore::ApplePayPaymentHandler *)v610, a1);
        v8 = v619;
        if (v619)
        {
          if (v619 != 1)
            goto LABEL_652;
          v49 = v611;
          *(_QWORD *)&v611 = 0;
          *(_BYTE *)a7 = v610[0];
          *(_QWORD *)(a7 + 8) = v49;
          *(_BYTE *)(a7 + 16) = 1;
        }
        else
        {
          v714[0] = v610[0];
          v74 = v611;
          v611 = 0uLL;
          *(_OWORD *)v715 = v74;
          *(_OWORD *)&v715[16] = v612;
          v716 = v613;
          v717 = v614;
          v718 = v615;
          LOWORD(v719) = v616;
          v75 = v617;
          v615 = 0;
          v617 = 0;
          v720 = v75;
          *(_QWORD *)&v74 = v618;
          v618 = 0;
          v721 = v74;
          v556 = buf;
          *(_QWORD *)&v557 = &v626;
          std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebCore::ApplePayLineItem &,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WebCore::ApplePayLineItem,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WebCore::ApplePayLineItem,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,1ul>((uint64_t *)&v556, (uint64_t)v714);
          WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v720, v76);
          v78 = v718;
          v718 = 0;
          v7 = (WTF *)v669;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
              WTF::StringImpl::destroy(v78, v77);
            else
              *(_DWORD *)v78 -= 2;
          }
          v79 = *(WTF::StringImpl **)&v715[8];
          *(_QWORD *)&v715[8] = 0;
          if (v79)
          {
            if (*(_DWORD *)v79 == 2)
              WTF::StringImpl::destroy(v79, v77);
            else
              *(_DWORD *)v79 -= 2;
          }
          v80 = *(WTF::StringImpl **)v715;
          *(_QWORD *)v715 = 0;
          if (v80)
          {
            if (*(_DWORD *)v80 == 2)
              WTF::StringImpl::destroy(v80, v77);
            else
              *(_DWORD *)v80 -= 2;
          }
          WebCore::ApplePayPaymentHandler::firstApplicableModifier((WebCore::ApplePayPaymentHandler *)v714, a1);
          if (v783)
          {
            if (v783 != 1)
              goto LABEL_652;
            v81 = *(_QWORD *)&v715[8];
            *(_QWORD *)&v715[8] = 0;
            *(_BYTE *)a7 = v715[0];
            *(_QWORD *)(a7 + 8) = v81;
            v82 = 1;
            *(_BYTE *)(a7 + 16) = 1;
          }
          else
          {
            v609 = 0;
            v552 = (_BYTE *)v8;
            if (v782)
            {
              v105 = *(_QWORD *)v715;
              *(_QWORD *)v715 = 0;
              v556 = (_BYTE *)v105;
              LOBYTE(v557) = 0;
              LOBYTE(v559) = 0;
              if (BYTE8(v716))
              {
                v106 = *(_OWORD *)&v715[8];
                memset(&v715[8], 0, 24);
                v557 = v106;
                *(_QWORD *)&v558 = *(_QWORD *)&v715[24];
                BYTE8(v558) = v716;
                LOBYTE(v559) = 1;
              }
              v107 = v717;
              v717 = 0;
              *((_QWORD *)&v559 + 1) = v107;
              v108 = v718;
              v718 = 0;
              v560 = v108;
              v561 = 0;
              if (v719)
              {
                v109 = *(_QWORD *)(((unint64_t)(v719 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v110 = *(_QWORD **)(v109 + 40);
                if (!v110)
                {
                  JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v719 - 2) & 0xFFFFFFFFFFFFF000) + 0x10));
                  v110 = *(_QWORD **)(v109 + 40);
                }
                *(_QWORD *)(v109 + 40) = *v110;
                v110[2] = 0;
                v111 = v110 + 2;
                *v110 = 0;
                v110[1] = 0;
                v561 = v110 + 2;
                v112 = v719;
                if (v719)
                  v112 = (_QWORD *)*v719;
                v113 = (unint64_t)(v111 - 2);
                if ((v112 != 0) != (*v111 != 0))
                {
                  if (v112)
                  {
                    v114 = *(unint64_t **)((v113 & 0xFFFFFFFFFFFFF000) + 0x10);
                    v115 = v114[3];
                    v114 += 3;
                    *(_QWORD *)v113 = v115;
                    *(v111 - 1) = v114;
                    *v114 = v113;
                    *(_QWORD *)(v115 + 8) = v113;
                  }
                  else
                  {
                    v549 = *(_QWORD *)v113;
                    v548 = (_QWORD *)*(v111 - 1);
                    *v548 = *(_QWORD *)v113;
                    *(_QWORD *)(v549 + 8) = v548;
                    *(_QWORD *)v113 = 0;
                    *(_QWORD *)(v113 + 8) = 0;
                    v111 = v561;
                  }
                }
                *v111 = v112;
              }
              v562 = v720;
              LOBYTE(v563) = 0;
              LOBYTE(v567) = 0;
              if (v728)
              {
                v564 = v722;
                *(_OWORD *)v565 = v723;
                v116 = v721;
                LOBYTE(v563) = v721;
                v722 = 0uLL;
                *(_OWORD *)&v565[16] = v724;
                v117 = v726;
                v726 = 0;
                *(_QWORD *)&v565[32] = v725;
                *(_QWORD *)&v566 = v117;
                WORD4(v566) = v727;
                LOBYTE(v567) = 1;
              }
              else
              {
                v116 = 0;
              }
              v246 = v729;
              v729 = 0;
              v568 = v246;
              v247 = v730;
              v248 = HIDWORD(v730);
              v730 = 0;
              v569 = __PAIR64__(v248, v247);
              v249 = v731;
              v731 = 0;
              v570 = v249;
              v250 = v732;
              v251 = HIDWORD(v732);
              v732 = 0;
              *(_QWORD *)&v571 = __PAIR64__(v251, v250);
              BYTE8(v571) = 0;
              BYTE8(v582) = 0;
              if (v751)
              {
                *(_OWORD *)&v572[8] = v735;
                *((_QWORD *)&v571 + 1) = v733;
                v572[0] = v734;
                v733 = 0;
                v735 = 0uLL;
                *(_OWORD *)&v572[24] = v736;
                v573 = v737;
                v252 = v739;
                v739 = 0;
                v574 = v738;
                *(_QWORD *)&v575 = v252;
                WORD4(v575) = v740;
                LOBYTE(v576) = 0;
                LOBYTE(v580) = 0;
                if (v748)
                {
                  LOBYTE(v576) = v741;
                  v253 = v742;
                  v742 = 0uLL;
                  v577 = v253;
                  *(_OWORD *)v578 = v743;
                  *(_OWORD *)&v578[16] = v744;
                  v254 = v746;
                  v746 = 0;
                  *(_QWORD *)&v578[32] = v745;
                  *(_QWORD *)&v579 = v254;
                  WORD4(v579) = v747;
                  LOBYTE(v580) = 1;
                }
                v255 = v749;
                v749 = 0uLL;
                v581 = v255;
                v256 = v750;
                v750 = 0;
                *(_QWORD *)&v582 = v256;
                BYTE8(v582) = 1;
              }
              LOBYTE(v583) = 0;
              LOBYTE(v591) = 0;
              if (v762)
              {
                v583 = v752;
                v584 = v753;
                v257 = v754;
                v754 = 0u;
                v585 = v257;
                v586 = v755;
                *(_OWORD *)v587 = v756;
                v258 = v758;
                v752 = 0;
                v758 = 0;
                *(_QWORD *)&v587[16] = v757;
                *(_QWORD *)&v588 = v258;
                WORD4(v588) = v759;
                v259 = v760;
                v760 = 0u;
                v589 = v259;
                v260 = v761;
                v761 = 0;
                v590 = v260;
                LOBYTE(v591) = 1;
              }
              LOBYTE(v592) = 0;
              LOBYTE(v594) = 0;
              if (v765)
              {
                v261 = v763;
                v763 = 0;
                v592 = v261;
                v262 = v764;
                v764 = 0;
                v593 = v262;
                LOBYTE(v594) = 1;
              }
              BYTE8(v594) = 0;
              v604 = 0;
              if (v777)
              {
                v263 = v768;
                v768 = 0u;
                *(_OWORD *)&v595[8] = v263;
                v596 = v769;
                v597 = v770;
                v264 = v775;
                v265 = v776;
                v775 = 0u;
                v776 = 0u;
                v266 = v766;
                v766 = 0;
                *((_QWORD *)&v594 + 1) = v266;
                v595[0] = v767;
                v598 = v771;
                v267 = v772;
                v772 = 0;
                v599 = v267;
                LOWORD(v600) = v773;
                v601 = v774;
                v602 = v264;
                v603 = v265;
                v604 = 1;
              }
              LOBYTE(v605) = 0;
              v608 = 0;
              if (v781)
              {
                v607 = 0;
                if (v780)
                {
                  v268 = v778;
                  v778 = 0;
                  v605 = v268;
                  v269 = v779;
                  v779 = 0;
                  v606 = v269;
                  v607 = 1;
                }
                v608 = 1;
              }
              v609 = 1;
              *(_QWORD *)v669 = v720;
              v669[8] = 0;
              BYTE8(v672) = 0;
              if (v728)
              {
                v669[8] = v116;
                v270 = v564;
                v564 = 0uLL;
                *(_OWORD *)&v669[16] = v270;
                *(_OWORD *)&v669[32] = *(_OWORD *)v565;
                *(_OWORD *)&v669[48] = *(_OWORD *)&v565[16];
                v271 = v566;
                *(_QWORD *)&v566 = 0;
                v670 = *(_QWORD **)&v565[32];
                v671 = v271;
                LOWORD(v672) = WORD4(v566);
                BYTE8(v672) = 1;
              }
              v568 = 0;
              v673 = v246;
              v569 = 0;
              v674 = v247;
              v675 = v248;
              v570 = 0;
              *(_QWORD *)&v676 = v249;
              *(_QWORD *)&v571 = 0;
              *((_QWORD *)&v676 + 1) = __PAIR64__(v251, v250);
              LOBYTE(v677) = 0;
              BYTE8(v690) = 0;
              if (v751)
              {
                *(_QWORD *)&v677 = *((_QWORD *)&v571 + 1);
                BYTE8(v677) = v572[0];
                v272 = *(_OWORD *)&v572[8];
                *((_QWORD *)&v571 + 1) = 0;
                *(_QWORD *)&v572[8] = 0;
                *(_QWORD *)&v572[16] = 0;
                v678 = v272;
                v679 = *(_OWORD *)&v572[24];
                v680 = v573;
                v273 = v575;
                *(_QWORD *)&v575 = 0;
                *(_QWORD *)&v681 = v574;
                *((_QWORD *)&v681 + 1) = v273;
                LOWORD(v682) = WORD4(v575);
                BYTE8(v682) = 0;
                v688 = 0;
                if ((_BYTE)v580)
                {
                  v683 = v577;
                  v684 = *(_OWORD *)v578;
                  BYTE8(v682) = v576;
                  v577 = 0uLL;
                  v685 = *(_OWORD *)&v578[16];
                  v274 = v579;
                  *(_QWORD *)&v579 = 0;
                  *(_QWORD *)&v686 = *(_QWORD *)&v578[32];
                  *((_QWORD *)&v686 + 1) = v274;
                  LOWORD(v687) = WORD4(v579);
                  v688 = 1;
                }
                v275 = v581;
                v581 = 0uLL;
                v689 = v275;
                v276 = v582;
                *(_QWORD *)&v582 = 0;
                *(_QWORD *)&v690 = v276;
                BYTE8(v690) = 1;
              }
              LOBYTE(v691) = 0;
              LOBYTE(v699) = 0;
              if (v762)
              {
                *(_QWORD *)&v691 = v583;
                BYTE8(v691) = v584;
                v692 = v585;
                v693 = v586;
                v585 = 0u;
                *(_OWORD *)v694 = *(_OWORD *)v587;
                v277 = v588;
                v583 = 0;
                *(_QWORD *)&v588 = 0;
                *(_QWORD *)&v694[16] = *(_QWORD *)&v587[16];
                v695 = v277;
                v696 = WORD4(v588);
                v278 = v589;
                v589 = 0u;
                v697 = v278;
                v279 = v590;
                v590 = 0;
                v698 = v279;
                LOBYTE(v699) = 1;
              }
              LOBYTE(v700) = 0;
              BYTE8(v701) = 0;
              if (v765)
              {
                v280 = v592;
                v592 = 0;
                v700 = v280;
                v281 = v593;
                v593 = 0;
                *(_QWORD *)&v701 = v281;
                BYTE8(v701) = 1;
              }
              LOBYTE(v702) = 0;
              v710 = 0;
              if (v777)
              {
                v282 = *(_OWORD *)&v595[8];
                *(_OWORD *)&v595[8] = 0u;
                v703 = v282;
                v704 = v596;
                v705 = v597;
                v283 = v602;
                v284 = v603;
                v602 = 0u;
                v603 = 0u;
                v285 = *((_QWORD *)&v594 + 1);
                *((_QWORD *)&v594 + 1) = 0;
                *(_QWORD *)&v702 = v285;
                BYTE8(v702) = v595[0];
                *(_QWORD *)&v706 = v598;
                v286 = v599;
                v599 = 0;
                *((_QWORD *)&v706 + 1) = v286;
                LOWORD(v707) = v600;
                *((_QWORD *)&v707 + 1) = v601;
                v708 = v283;
                v709 = v284;
                v710 = 1;
              }
              LOBYTE(v711) = 0;
              v713 = 0;
              if (v781)
              {
                v712 = 0;
                if (v607)
                {
                  v287 = v605;
                  v605 = 0;
                  *(_QWORD *)&v711 = v287;
                  v288 = v606;
                  v606 = 0;
                  *((_QWORD *)&v711 + 1) = v288;
                  v712 = 1;
                }
                v713 = 1;
              }
              std::__optional_storage_base<WebCore::ApplePayRecurringPaymentRequest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplePayRecurringPaymentRequest,false>>((uint64_t)&v627, (WTF::StringImpl *)&v677);
              if (v650 == v699)
              {
                if ((_BYTE)v650)
                  WebCore::ApplePayAutomaticReloadPaymentRequest::operator=((uint64_t)&v643, (WTF::StringImpl *)&v691);
              }
              else if ((_BYTE)v650)
              {
                WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v643, v289);
                LOBYTE(v650) = 0;
              }
              else
              {
                *(_QWORD *)&v643 = v691;
                BYTE8(v643) = BYTE8(v691);
                v391 = v692;
                v692 = 0u;
                v644 = v391;
                v645 = v693;
                v646 = *(_OWORD *)v694;
                v392 = v695;
                *(_QWORD *)&v691 = 0;
                v695 = 0;
                *(_QWORD *)&v647 = *(_QWORD *)&v694[16];
                *((_QWORD *)&v647 + 1) = v392;
                *(_WORD *)v648 = v696;
                v393 = v697;
                v697 = 0u;
                *(_OWORD *)&v648[8] = v393;
                v394 = v698;
                v698 = 0;
                v649 = v394;
                LOBYTE(v650) = 1;
              }
              if (v652 == BYTE8(v701))
              {
                if ((_BYTE)v652)
                {
                  if (HIDWORD(v651))
                  {
                    v395 = (WebCore::ApplePayPaymentTokenContext *)v651;
                    v396 = 40 * HIDWORD(v651);
                    do
                    {
                      WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v395, v289);
                      v395 = (WebCore::ApplePayPaymentTokenContext *)(v397 + 40);
                      v396 -= 40;
                    }
                    while (v396);
                  }
                  v398 = (WTF *)v651;
                  if ((_QWORD)v651)
                  {
                    *(_QWORD *)&v651 = 0;
                    DWORD2(v651) = 0;
                    WTF::fastFree(v398, v289);
                  }
                  v399 = v700;
                  v700 = 0;
                  *(_QWORD *)&v651 = v399;
                  v400 = v701;
                  *(_QWORD *)&v701 = 0;
                  *((_QWORD *)&v651 + 1) = v400;
                }
              }
              else if ((_BYTE)v652)
              {
                if (HIDWORD(v651))
                {
                  v401 = (WebCore::ApplePayPaymentTokenContext *)v651;
                  v402 = 40 * HIDWORD(v651);
                  do
                  {
                    WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v401, v289);
                    v401 = (WebCore::ApplePayPaymentTokenContext *)(v403 + 40);
                    v402 -= 40;
                  }
                  while (v402);
                }
                v404 = (WTF *)v651;
                if ((_QWORD)v651)
                {
                  *(_QWORD *)&v651 = 0;
                  DWORD2(v651) = 0;
                  WTF::fastFree(v404, v289);
                }
                LOBYTE(v652) = 0;
              }
              else
              {
                v419 = v700;
                v700 = 0;
                *(_QWORD *)&v651 = v419;
                v420 = v701;
                *(_QWORD *)&v701 = 0;
                *((_QWORD *)&v651 + 1) = v420;
                LOBYTE(v652) = 1;
              }
              if (v662 == v710)
              {
                if ((_BYTE)v662)
                  WebCore::ApplePayDeferredPaymentRequest::operator=((uint64_t)&v653, (WTF::StringImpl *)&v702);
              }
              else if ((_BYTE)v662)
              {
                WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&v653, v289);
                LOBYTE(v662) = 0;
              }
              else
              {
                v423 = v703;
                v703 = 0u;
                v655 = v423;
                v656 = v704;
                v657 = v705;
                v424 = v708;
                v425 = v709;
                v708 = 0u;
                v709 = 0u;
                v653 = v702;
                LOBYTE(v654) = BYTE8(v702);
                v426 = *((_QWORD *)&v706 + 1);
                *(_QWORD *)&v658 = v706;
                *(_QWORD *)&v702 = 0;
                *((_QWORD *)&v706 + 1) = 0;
                *((_QWORD *)&v658 + 1) = v426;
                LOWORD(v659) = v707;
                *((_QWORD *)&v659 + 1) = *((_QWORD *)&v707 + 1);
                v660 = v424;
                v661 = v425;
                LOBYTE(v662) = 1;
              }
              if (v664 == v713)
              {
                if (v664)
                {
                  if (BYTE8(v663) == v712)
                  {
                    if (BYTE8(v663))
                    {
                      v427 = (WTF *)*((_QWORD *)&v662 + 1);
                      if (*((_QWORD *)&v662 + 1))
                      {
                        *((_QWORD *)&v662 + 1) = 0;
                        LODWORD(v663) = 0;
                        WTF::fastFree(v427, v289);
                      }
                      v428 = *((_QWORD *)&v711 + 1);
                      *((_QWORD *)&v662 + 1) = v711;
                      v711 = 0uLL;
                      *(_QWORD *)&v663 = v428;
                    }
                  }
                  else if (BYTE8(v663))
                  {
                    v439 = (WTF *)*((_QWORD *)&v662 + 1);
                    if (*((_QWORD *)&v662 + 1))
                    {
                      *((_QWORD *)&v662 + 1) = 0;
                      LODWORD(v663) = 0;
                      WTF::fastFree(v439, v289);
                    }
                    BYTE8(v663) = 0;
                  }
                  else
                  {
                    v476 = *((_QWORD *)&v711 + 1);
                    *((_QWORD *)&v662 + 1) = v711;
                    v711 = 0uLL;
                    *(_QWORD *)&v663 = v476;
                    BYTE8(v663) = 1;
                  }
                }
              }
              else if (v664)
              {
                if (BYTE8(v663))
                {
                  v429 = (WTF *)*((_QWORD *)&v662 + 1);
                  if (*((_QWORD *)&v662 + 1))
                  {
                    *((_QWORD *)&v662 + 1) = 0;
                    LODWORD(v663) = 0;
                    WTF::fastFree(v429, v289);
                  }
                }
                v664 = 0;
              }
              else
              {
                BYTE8(v662) = 0;
                BYTE8(v663) = 0;
                if (v712)
                {
                  v437 = *((_QWORD *)&v711 + 1);
                  *((_QWORD *)&v662 + 1) = v711;
                  v711 = 0uLL;
                  *(_QWORD *)&v663 = v437;
                  BYTE8(v663) = 1;
                }
                v664 = 1;
              }
              WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)v669, v289);
              if (v609)
              {
                WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v562, v477);
                WebCore::PaymentDetailsModifier::~PaymentDetailsModifier((WebCore::PaymentDetailsModifier *)&v556, v478);
              }
            }
            v479 = *(_QWORD *)(a1 + 24);
            if (v479)
            {
              v480 = *(_QWORD *)(v479 + 8);
              if (v480)
                v479 = v480 - 96;
              else
                v479 = 0;
            }
            if (*(_BYTE *)(v479 + 274))
            {
              __break(0xC471u);
              JUMPOUT(0x1952C0848);
            }
            v481 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v479 + 336) + 8) + 24) + 8) + 1240);
            LOBYTE(v556) = buf[0];
            v482 = *(_OWORD *)&buf[8];
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)&buf[16] = 0;
            v557 = v482;
            v558 = *(_OWORD *)&buf[24];
            v559 = *(_OWORD *)&buf[40];
            v560 = *(WTF::StringImpl **)&buf[56];
            v561 = v624;
            LOWORD(v562) = v625;
            v624 = 0;
            v483 = *((_QWORD *)&v626 + 1);
            v563 = v626;
            v626 = 0uLL;
            *(_QWORD *)&v564 = v483;
            BYTE8(v564) = 0;
            LOBYTE(v577) = 0;
            if (v642)
            {
              *((_QWORD *)&v564 + 1) = v627;
              v565[0] = v628;
              v484 = v630;
              v627 = 0;
              v630 = 0uLL;
              *(_OWORD *)&v565[8] = v484;
              *(_OWORD *)&v565[24] = v631;
              v566 = v632;
              v485 = *((_QWORD *)&v633 + 1);
              *((_QWORD *)&v633 + 1) = 0;
              v567 = v633;
              v568 = v485;
              LOWORD(v569) = v634;
              LOBYTE(v570) = 0;
              LOBYTE(v574) = 0;
              if (BYTE8(v639))
              {
                LOBYTE(v570) = BYTE8(v634);
                v486 = v635;
                v635 = 0uLL;
                v571 = v486;
                *(_OWORD *)v572 = v636;
                *(_OWORD *)&v572[16] = v637;
                v487 = *((_QWORD *)&v638 + 1);
                *((_QWORD *)&v638 + 1) = 0;
                *(_QWORD *)&v572[32] = v638;
                *(_QWORD *)&v573 = v487;
                WORD4(v573) = v639;
                LOBYTE(v574) = 1;
              }
              v488 = v640;
              v640 = 0uLL;
              v575 = v488;
              v489 = v641;
              v641 = 0;
              v576 = v489;
              LOBYTE(v577) = 1;
            }
            BYTE8(v577) = 0;
            v584 = 0;
            if ((_BYTE)v650)
            {
              *((_QWORD *)&v577 + 1) = v643;
              v578[0] = BYTE8(v643);
              v490 = v644;
              v644 = 0u;
              *(_OWORD *)&v578[8] = v490;
              *(_OWORD *)&v578[24] = v645;
              v579 = v646;
              v491 = *((_QWORD *)&v647 + 1);
              *(_QWORD *)&v643 = 0;
              *((_QWORD *)&v647 + 1) = 0;
              v580 = v647;
              *(_QWORD *)&v581 = v491;
              WORD4(v581) = *(_WORD *)v648;
              v492 = *(_OWORD *)&v648[8];
              *(_OWORD *)&v648[8] = 0u;
              v582 = v492;
              v493 = v649;
              v649 = 0;
              v583 = v493;
              v584 = 1;
            }
            LOBYTE(v585) = 0;
            LOBYTE(v586) = 0;
            if ((_BYTE)v652)
            {
              v494 = *((_QWORD *)&v651 + 1);
              *(_QWORD *)&v585 = v651;
              v651 = 0uLL;
              *((_QWORD *)&v585 + 1) = v494;
              LOBYTE(v586) = 1;
            }
            BYTE8(v586) = 0;
            v595[16] = 0;
            if ((_BYTE)v662)
            {
              v495 = v655;
              v655 = 0u;
              *(_OWORD *)&v587[8] = v495;
              v588 = v656;
              v589 = v657;
              v496 = v660;
              v497 = v661;
              v660 = 0u;
              v661 = 0u;
              *((_QWORD *)&v586 + 1) = v653;
              v587[0] = v654;
              v498 = *((_QWORD *)&v658 + 1);
              v590 = v658;
              v653 = 0;
              *((_QWORD *)&v658 + 1) = 0;
              v591 = v498;
              LOWORD(v592) = v659;
              v593 = *((_QWORD *)&v659 + 1);
              v594 = v496;
              *(_OWORD *)v595 = v497;
              v595[16] = 1;
            }
            LOBYTE(v596) = 0;
            BYTE8(v597) = 0;
            if (v664)
            {
              LOBYTE(v597) = 0;
              if (BYTE8(v663))
              {
                v499 = *((_QWORD *)&v662 + 1);
                *((_QWORD *)&v662 + 1) = 0;
                *(_QWORD *)&v596 = v499;
                v500 = v663;
                *(_QWORD *)&v663 = 0;
                *((_QWORD *)&v596 + 1) = v500;
                LOBYTE(v597) = 1;
              }
              BYTE8(v597) = 1;
            }
            v501 = v665;
            v665 = 0;
            v598 = v501;
            v502 = v666;
            v666 = 0;
            v599 = v502;
            v503 = *((_QWORD *)&v667 + 1);
            v600 = v667;
            v667 = 0uLL;
            v601 = v503;
            LOBYTE(v602) = 1;
            v504 = qword_1ECE7BE60;
            if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v669 = 134217984;
              *(_QWORD *)&v669[4] = v481;
              _os_log_impl(&dword_1940B8000, v504, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::completeCouponCodeChange()", v669, 0xCu);
            }
            (*(void (**)(_QWORD, _BYTE **))(**(_QWORD **)(v481 + 8) + 72))(*(_QWORD *)(v481 + 8), &v556);
            if ((_BYTE)v602)
              WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)&v556, v505);
            *(_QWORD *)a7 = 0;
            *(_QWORD *)(a7 + 8) = 0;
            *(_QWORD *)(a7 + 16) = 0;
            v82 = v783;
            v8 = (unint64_t)v552;
            if (v783 == -1)
              goto LABEL_599;
          }
          ((void (*)(_BYTE **, _BYTE *))off_1E3352AA8[v82])(&v556, v715);
        }
LABEL_599:
        ((void (*)(char *, char *))off_1E3352B08[v8])(v714, v610);
        goto LABEL_600;
      }
      if (v622 == 1)
      {
        v28 = v621;
        v621 = 0;
        *(_BYTE *)a7 = v620;
        *(_QWORD *)(a7 + 8) = v28;
        *(_BYTE *)(a7 + 16) = 1;
LABEL_600:
        ((void (*)(char *, uint64_t *))off_1E3352A98[v13])(v714, &v620);
        WebCore::ApplePayCouponCodeUpdate::~ApplePayCouponCodeUpdate((WebCore::ApplePayCouponCodeUpdate *)buf, v506);
        goto LABEL_631;
      }
LABEL_652:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_653:
      JSC::HandleSet::grow(v7);
      v66 = (_QWORD *)*((_QWORD *)v7 + 5);
LABEL_93:
      *((_QWORD *)v7 + 5) = *v66;
      v66[2] = 0;
      v67 = v66 + 2;
      *v66 = 0;
      v66[1] = 0;
      v561 = v66 + 2;
      v68 = v719;
      if (v719)
        v68 = (_QWORD *)*v719;
      v69 = (unint64_t)(v67 - 2);
      if ((v68 != 0) != (*v67 != 0))
      {
        if (v68)
        {
          v70 = *(unint64_t **)((v69 & 0xFFFFFFFFFFFFF000) + 0x10);
          v71 = v70[3];
          v70 += 3;
          *(_QWORD *)v69 = v71;
          *(v67 - 1) = v70;
          *v70 = v69;
          *(_QWORD *)(v71 + 8) = v69;
        }
        else
        {
          v545 = *(_QWORD *)v69;
          v544 = (_QWORD *)*(v67 - 1);
          *v544 = *(_QWORD *)v69;
          *(_QWORD *)(v545 + 8) = v544;
          *(_QWORD *)v69 = 0;
          *(_QWORD *)(v69 + 8) = 0;
          v67 = v561;
        }
      }
      *v67 = v68;
LABEL_99:
      v562 = v720;
      LOBYTE(v563) = 0;
      LOBYTE(v567) = 0;
      if (v728)
      {
        v564 = v722;
        *(_OWORD *)v565 = v723;
        v72 = v721;
        LOBYTE(v563) = v721;
        v722 = 0uLL;
        *(_OWORD *)&v565[16] = v724;
        v73 = v726;
        v726 = 0;
        *(_QWORD *)&v565[32] = v725;
        *(_QWORD *)&v566 = v73;
        WORD4(v566) = v727;
        LOBYTE(v567) = 1;
      }
      else
      {
        v72 = 0;
      }
      v131 = v729;
      v729 = 0;
      v568 = v131;
      v132 = v730;
      v133 = HIDWORD(v730);
      v730 = 0;
      v569 = __PAIR64__(v133, v132);
      v134 = v731;
      v731 = 0;
      v570 = v134;
      v135 = v732;
      v136 = HIDWORD(v732);
      v732 = 0;
      *(_QWORD *)&v571 = __PAIR64__(v136, v135);
      BYTE8(v571) = 0;
      BYTE8(v582) = 0;
      if (v751)
      {
        *(_OWORD *)&v572[8] = v735;
        *((_QWORD *)&v571 + 1) = v733;
        v572[0] = v734;
        v733 = 0;
        v735 = 0uLL;
        *(_OWORD *)&v572[24] = v736;
        v573 = v737;
        v137 = v739;
        v739 = 0;
        v574 = v738;
        *(_QWORD *)&v575 = v137;
        WORD4(v575) = v740;
        LOBYTE(v576) = 0;
        LOBYTE(v580) = 0;
        if (v748)
        {
          LOBYTE(v576) = v741;
          v138 = v742;
          v742 = 0uLL;
          v577 = v138;
          *(_OWORD *)v578 = v743;
          *(_OWORD *)&v578[16] = v744;
          v139 = v746;
          v746 = 0;
          *(_QWORD *)&v578[32] = v745;
          *(_QWORD *)&v579 = v139;
          WORD4(v579) = v747;
          LOBYTE(v580) = 1;
        }
        v140 = v749;
        v749 = 0uLL;
        v581 = v140;
        v141 = v750;
        v750 = 0;
        *(_QWORD *)&v582 = v141;
        BYTE8(v582) = 1;
      }
      LOBYTE(v583) = 0;
      LOBYTE(v591) = 0;
      if (v762)
      {
        v583 = v752;
        v584 = v753;
        v142 = v754;
        v754 = 0u;
        v585 = v142;
        v586 = v755;
        *(_OWORD *)v587 = v756;
        v143 = v758;
        v752 = 0;
        v758 = 0;
        *(_QWORD *)&v587[16] = v757;
        *(_QWORD *)&v588 = v143;
        WORD4(v588) = v759;
        v144 = v760;
        v760 = 0u;
        v589 = v144;
        v145 = v761;
        v761 = 0;
        v590 = v145;
        LOBYTE(v591) = 1;
      }
      LOBYTE(v592) = 0;
      LOBYTE(v594) = 0;
      if (v765)
      {
        v146 = v763;
        v763 = 0;
        v592 = v146;
        v147 = v764;
        v764 = 0;
        v593 = v147;
        LOBYTE(v594) = 1;
      }
      BYTE8(v594) = 0;
      v604 = 0;
      if (v777)
      {
        v148 = v768;
        v768 = 0u;
        *(_OWORD *)&v595[8] = v148;
        v596 = v769;
        v597 = v770;
        v149 = v775;
        v150 = v776;
        v775 = 0u;
        v776 = 0u;
        v151 = v766;
        v766 = 0;
        *((_QWORD *)&v594 + 1) = v151;
        v595[0] = v767;
        v598 = v771;
        v152 = v772;
        v772 = 0;
        v599 = v152;
        LOWORD(v600) = v773;
        v601 = v774;
        v602 = v149;
        v603 = v150;
        v604 = 1;
      }
      LOBYTE(v605) = 0;
      v608 = 0;
      if (v781)
      {
        v607 = 0;
        if (v780)
        {
          v153 = v778;
          v778 = 0;
          v605 = v153;
          v154 = v779;
          v779 = 0;
          v606 = v154;
          v607 = 1;
        }
        v608 = 1;
      }
      v609 = 1;
      *(_QWORD *)buf = v720;
      buf[8] = 0;
      BYTE8(v626) = 0;
      if (v728)
      {
        buf[8] = v72;
        v155 = v564;
        v564 = 0uLL;
        *(_OWORD *)&buf[16] = v155;
        *(_OWORD *)&buf[32] = *(_OWORD *)v565;
        *(_OWORD *)&buf[48] = *(_OWORD *)&v565[16];
        v156 = v566;
        *(_QWORD *)&v566 = 0;
        v624 = *(_QWORD **)&v565[32];
        v625 = v156;
        LOWORD(v626) = WORD4(v566);
        BYTE8(v626) = 1;
      }
      v568 = 0;
      v627 = v131;
      v569 = 0;
      v628 = v132;
      v629 = v133;
      v570 = 0;
      *(_QWORD *)&v630 = v134;
      *(_QWORD *)&v571 = 0;
      *((_QWORD *)&v630 + 1) = __PAIR64__(v136, v135);
      LOBYTE(v631) = 0;
      BYTE8(v644) = 0;
      if (v751)
      {
        *(_QWORD *)&v631 = *((_QWORD *)&v571 + 1);
        BYTE8(v631) = v572[0];
        v157 = *(_OWORD *)&v572[8];
        *((_QWORD *)&v571 + 1) = 0;
        *(_QWORD *)&v572[8] = 0;
        *(_QWORD *)&v572[16] = 0;
        v632 = v157;
        v633 = *(_OWORD *)&v572[24];
        v634 = v573;
        v158 = v575;
        *(_QWORD *)&v575 = 0;
        *(_QWORD *)&v635 = v574;
        *((_QWORD *)&v635 + 1) = v158;
        LOWORD(v636) = WORD4(v575);
        BYTE8(v636) = 0;
        v642 = 0;
        if ((_BYTE)v580)
        {
          v637 = v577;
          v638 = *(_OWORD *)v578;
          BYTE8(v636) = v576;
          v577 = 0uLL;
          v639 = *(_OWORD *)&v578[16];
          v159 = v579;
          *(_QWORD *)&v579 = 0;
          *(_QWORD *)&v640 = *(_QWORD *)&v578[32];
          *((_QWORD *)&v640 + 1) = v159;
          LOWORD(v641) = WORD4(v579);
          v642 = 1;
        }
        v160 = v581;
        v581 = 0uLL;
        v643 = v160;
        v161 = v582;
        *(_QWORD *)&v582 = 0;
        *(_QWORD *)&v644 = v161;
        BYTE8(v644) = 1;
      }
      LOBYTE(v645) = 0;
      LOBYTE(v653) = 0;
      if (v762)
      {
        *(_QWORD *)&v645 = v583;
        BYTE8(v645) = v584;
        v646 = v585;
        v647 = v586;
        v585 = 0u;
        *(_OWORD *)v648 = *(_OWORD *)v587;
        v162 = v588;
        v583 = 0;
        *(_QWORD *)&v588 = 0;
        *(_QWORD *)&v648[16] = *(_QWORD *)&v587[16];
        v649 = v162;
        v650 = WORD4(v588);
        v163 = v589;
        v589 = 0u;
        v651 = v163;
        v164 = v590;
        v590 = 0;
        v652 = v164;
        LOBYTE(v653) = 1;
      }
      LOBYTE(v654) = 0;
      BYTE8(v655) = 0;
      if (v765)
      {
        v165 = v592;
        v592 = 0;
        v654 = v165;
        v166 = v593;
        v593 = 0;
        *(_QWORD *)&v655 = v166;
        BYTE8(v655) = 1;
      }
      LOBYTE(v656) = 0;
      v664 = 0;
      if (v777)
      {
        v167 = *(_OWORD *)&v595[8];
        *(_OWORD *)&v595[8] = 0u;
        v657 = v167;
        v658 = v596;
        v659 = v597;
        v168 = v602;
        v169 = v603;
        v602 = 0u;
        v603 = 0u;
        v170 = *((_QWORD *)&v594 + 1);
        *((_QWORD *)&v594 + 1) = 0;
        *(_QWORD *)&v656 = v170;
        BYTE8(v656) = v595[0];
        *(_QWORD *)&v660 = v598;
        v171 = v599;
        v599 = 0;
        *((_QWORD *)&v660 + 1) = v171;
        LOWORD(v661) = v600;
        *((_QWORD *)&v661 + 1) = v601;
        v662 = v168;
        v663 = v169;
        v664 = 1;
      }
      LOBYTE(v665) = 0;
      BYTE8(v667) = 0;
      if (v781)
      {
        LOBYTE(v667) = 0;
        if (v607)
        {
          v172 = v605;
          v605 = 0;
          v665 = v172;
          v173 = v606;
          v606 = 0;
          v666 = v173;
          LOBYTE(v667) = 1;
        }
        BYTE8(v667) = 1;
      }
      std::__optional_storage_base<WebCore::ApplePayRecurringPaymentRequest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplePayRecurringPaymentRequest,false>>((uint64_t)&v673, (WTF::StringImpl *)&v631);
      if (v696 == v653)
      {
        if ((_BYTE)v696)
          WebCore::ApplePayAutomaticReloadPaymentRequest::operator=(v8 + 304, (WTF::StringImpl *)&v645);
      }
      else if ((_BYTE)v696)
      {
        WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)(v8 + 304), v174);
        LOBYTE(v696) = 0;
      }
      else
      {
        *(_QWORD *)&v689 = v645;
        BYTE8(v689) = BYTE8(v645);
        v218 = v646;
        v646 = 0u;
        v690 = v218;
        v691 = v647;
        v692 = *(_OWORD *)v648;
        v219 = v649;
        *(_QWORD *)&v645 = 0;
        v649 = 0;
        *(_QWORD *)&v693 = *(_QWORD *)&v648[16];
        *((_QWORD *)&v693 + 1) = v219;
        *(_WORD *)v694 = v650;
        v220 = v651;
        v651 = 0u;
        *(_OWORD *)&v694[8] = v220;
        v221 = v652;
        v652 = 0;
        v695 = v221;
        LOBYTE(v696) = 1;
      }
      v222 = (WebCore::ApplePayDeferredPaymentRequest *)(v8 + 448);
      if (v698 == BYTE8(v655))
      {
        if ((_BYTE)v698)
        {
          if (HIDWORD(v697))
          {
            v223 = (WebCore::ApplePayPaymentTokenContext *)v697;
            v224 = 40 * HIDWORD(v697);
            do
            {
              WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v223, v174);
              v223 = (WebCore::ApplePayPaymentTokenContext *)(v225 + 40);
              v224 -= 40;
            }
            while (v224);
          }
          v226 = (WTF *)v697;
          if ((_QWORD)v697)
          {
            *(_QWORD *)&v697 = 0;
            DWORD2(v697) = 0;
            WTF::fastFree(v226, v174);
          }
          v227 = v654;
          v654 = 0;
          *(_QWORD *)&v697 = v227;
          v228 = v655;
          *(_QWORD *)&v655 = 0;
          *((_QWORD *)&v697 + 1) = v228;
        }
      }
      else if ((_BYTE)v698)
      {
        if (HIDWORD(v697))
        {
          v229 = (WebCore::ApplePayPaymentTokenContext *)v697;
          v230 = 40 * HIDWORD(v697);
          do
          {
            WebCore::ApplePayPaymentTokenContext::~ApplePayPaymentTokenContext(v229, v174);
            v229 = (WebCore::ApplePayPaymentTokenContext *)(v231 + 40);
            v230 -= 40;
          }
          while (v230);
        }
        v232 = (WTF *)v697;
        if ((_QWORD)v697)
        {
          *(_QWORD *)&v697 = 0;
          DWORD2(v697) = 0;
          WTF::fastFree(v232, v174);
        }
        LOBYTE(v698) = 0;
      }
      else
      {
        v233 = v654;
        v654 = 0;
        *(_QWORD *)&v697 = v233;
        v234 = v655;
        *(_QWORD *)&v655 = 0;
        *((_QWORD *)&v697 + 1) = v234;
        LOBYTE(v698) = 1;
      }
      if (v708 == v664)
      {
        if ((_BYTE)v708)
          WebCore::ApplePayDeferredPaymentRequest::operator=((uint64_t)v222, (WTF::StringImpl *)&v656);
      }
      else if ((_BYTE)v708)
      {
        WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest(v222, v174);
        LOBYTE(v708) = 0;
      }
      else
      {
        v235 = v657;
        v657 = 0u;
        v701 = v235;
        v702 = v658;
        v703 = v659;
        v236 = v662;
        v237 = v663;
        v662 = 0u;
        v663 = 0u;
        v699 = v656;
        LOBYTE(v700) = BYTE8(v656);
        v238 = *((_QWORD *)&v660 + 1);
        *(_QWORD *)&v704 = v660;
        *(_QWORD *)&v656 = 0;
        *((_QWORD *)&v660 + 1) = 0;
        *((_QWORD *)&v704 + 1) = v238;
        LOWORD(v705) = v661;
        *((_QWORD *)&v705 + 1) = *((_QWORD *)&v661 + 1);
        v706 = v236;
        v707 = v237;
        LOBYTE(v708) = 1;
      }
      if (v710 == BYTE8(v667))
      {
        if (v710)
        {
          if (BYTE8(v709) == v667)
          {
            if (BYTE8(v709))
            {
              v239 = (WTF *)*((_QWORD *)&v708 + 1);
              if (*((_QWORD *)&v708 + 1))
              {
                *((_QWORD *)&v708 + 1) = 0;
                LODWORD(v709) = 0;
                WTF::fastFree(v239, v174);
              }
              v240 = v665;
              v665 = 0;
              *((_QWORD *)&v708 + 1) = v240;
              v241 = v666;
              v666 = 0;
              *(_QWORD *)&v709 = v241;
            }
          }
          else if (BYTE8(v709))
          {
            v245 = (WTF *)*((_QWORD *)&v708 + 1);
            if (*((_QWORD *)&v708 + 1))
            {
              *((_QWORD *)&v708 + 1) = 0;
              LODWORD(v709) = 0;
              WTF::fastFree(v245, v174);
            }
            BYTE8(v709) = 0;
          }
          else
          {
            v359 = v665;
            v665 = 0;
            *((_QWORD *)&v708 + 1) = v359;
            v360 = v666;
            v666 = 0;
            *(_QWORD *)&v709 = v360;
            BYTE8(v709) = 1;
          }
        }
      }
      else if (v710)
      {
        if (BYTE8(v709))
        {
          v242 = (WTF *)*((_QWORD *)&v708 + 1);
          if (*((_QWORD *)&v708 + 1))
          {
            *((_QWORD *)&v708 + 1) = 0;
            LODWORD(v709) = 0;
            WTF::fastFree(v242, v174);
          }
        }
        v710 = 0;
      }
      else
      {
        BYTE8(v708) = 0;
        BYTE8(v709) = 0;
        if ((_BYTE)v667)
        {
          v243 = v665;
          v665 = 0;
          *((_QWORD *)&v708 + 1) = v243;
          v244 = v666;
          v666 = 0;
          *(_QWORD *)&v709 = v244;
          BYTE8(v709) = 1;
        }
        v710 = 1;
      }
      WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)buf, v174);
      if (v609)
      {
        WebCore::ApplePayModifier::~ApplePayModifier((WebCore::ApplePayModifier *)&v562, v361);
        WebCore::PaymentDetailsModifier::~PaymentDetailsModifier((WebCore::PaymentDetailsModifier *)&v556, v362);
      }
LABEL_410:
      v363 = *(_QWORD *)(a1 + 24);
      if (v363)
      {
        v364 = *(_QWORD *)(v363 + 8);
        if (v364)
          v363 = v364 - 96;
        else
          v363 = 0;
      }
      if (*(_BYTE *)(v363 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x1952C0808);
      }
      v365 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v363 + 336) + 8) + 24) + 8) + 1240);
      LOBYTE(v556) = v669[0];
      v366 = *(_OWORD *)&v669[8];
      *(_QWORD *)&v669[8] = 0;
      *(_QWORD *)&v669[16] = 0;
      v557 = v366;
      v558 = *(_OWORD *)&v669[24];
      v559 = *(_OWORD *)&v669[40];
      v560 = *(WTF::StringImpl **)&v669[56];
      v561 = v670;
      LOWORD(v562) = v671;
      v670 = 0;
      v367 = *((_QWORD *)&v672 + 1);
      v563 = v672;
      v672 = 0uLL;
      *(_QWORD *)&v564 = v367;
      BYTE8(v564) = 0;
      LOBYTE(v577) = 0;
      if (v688)
      {
        *((_QWORD *)&v564 + 1) = v673;
        v565[0] = v674;
        v368 = v676;
        v673 = 0;
        v676 = 0uLL;
        *(_OWORD *)&v565[8] = v368;
        *(_OWORD *)&v565[24] = v677;
        v566 = v678;
        v369 = *((_QWORD *)&v679 + 1);
        *((_QWORD *)&v679 + 1) = 0;
        v567 = v679;
        v568 = v369;
        LOWORD(v569) = v680;
        LOBYTE(v570) = 0;
        LOBYTE(v574) = 0;
        if (BYTE8(v685))
        {
          LOBYTE(v570) = BYTE8(v680);
          v370 = v681;
          v681 = 0uLL;
          v571 = v370;
          *(_OWORD *)v572 = v682;
          *(_OWORD *)&v572[16] = v683;
          v371 = *((_QWORD *)&v684 + 1);
          *((_QWORD *)&v684 + 1) = 0;
          *(_QWORD *)&v572[32] = v684;
          *(_QWORD *)&v573 = v371;
          WORD4(v573) = v685;
          LOBYTE(v574) = 1;
        }
        v372 = v686;
        v686 = 0uLL;
        v575 = v372;
        v373 = v687;
        v687 = 0;
        v576 = v373;
        LOBYTE(v577) = 1;
      }
      BYTE8(v577) = 0;
      v584 = 0;
      if ((_BYTE)v696)
      {
        *((_QWORD *)&v577 + 1) = v689;
        v578[0] = BYTE8(v689);
        v374 = v690;
        v690 = 0u;
        *(_OWORD *)&v578[8] = v374;
        *(_OWORD *)&v578[24] = v691;
        v579 = v692;
        v375 = *((_QWORD *)&v693 + 1);
        *(_QWORD *)&v689 = 0;
        *((_QWORD *)&v693 + 1) = 0;
        v580 = v693;
        *(_QWORD *)&v581 = v375;
        WORD4(v581) = *(_WORD *)v694;
        v376 = *(_OWORD *)&v694[8];
        *(_OWORD *)&v694[8] = 0u;
        v582 = v376;
        v377 = v695;
        v695 = 0;
        v583 = v377;
        v584 = 1;
      }
      LOBYTE(v585) = 0;
      LOBYTE(v586) = 0;
      if ((_BYTE)v698)
      {
        v378 = *((_QWORD *)&v697 + 1);
        *(_QWORD *)&v585 = v697;
        v697 = 0uLL;
        *((_QWORD *)&v585 + 1) = v378;
        LOBYTE(v586) = 1;
      }
      BYTE8(v586) = 0;
      v595[16] = 0;
      if ((_BYTE)v708)
      {
        v379 = v701;
        v701 = 0u;
        *(_OWORD *)&v587[8] = v379;
        v588 = v702;
        v589 = v703;
        v380 = v706;
        v381 = v707;
        v706 = 0u;
        v707 = 0u;
        *((_QWORD *)&v586 + 1) = v699;
        v587[0] = v700;
        v382 = *((_QWORD *)&v704 + 1);
        v590 = v704;
        v699 = 0;
        *((_QWORD *)&v704 + 1) = 0;
        v591 = v382;
        LOWORD(v592) = v705;
        v593 = *((_QWORD *)&v705 + 1);
        v594 = v380;
        *(_OWORD *)v595 = v381;
        v595[16] = 1;
      }
      LOBYTE(v596) = 0;
      BYTE8(v597) = 0;
      if (v710)
      {
        LOBYTE(v597) = 0;
        if (BYTE8(v709))
        {
          v383 = *((_QWORD *)&v708 + 1);
          *((_QWORD *)&v708 + 1) = 0;
          *(_QWORD *)&v596 = v383;
          v384 = v709;
          *(_QWORD *)&v709 = 0;
          *((_QWORD *)&v596 + 1) = v384;
          LOBYTE(v597) = 1;
        }
        BYTE8(v597) = 1;
      }
      v385 = *((_QWORD *)&v711 + 1);
      v598 = (WTF *)v711;
      v711 = 0uLL;
      v599 = v385;
      LOBYTE(v600) = 1;
      v386 = qword_1ECE7BE60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v365;
        _os_log_impl(&dword_1940B8000, v386, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::completeShippingMethodSelection()", buf, 0xCu);
      }
      (*(void (**)(_QWORD, _BYTE **))(**(_QWORD **)(v365 + 8) + 48))(*(_QWORD *)(v365 + 8), &v556);
      if ((_BYTE)v600)
      {
        if (HIDWORD(v599))
          WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct(v598, (WTF *)((char *)v598 + 104 * HIDWORD(v599)));
        v388 = v598;
        if (v598)
        {
          v598 = 0;
          LODWORD(v599) = 0;
          WTF::fastFree(v388, v387);
        }
        WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)&v556, v387);
      }
      *(_QWORD *)a7 = 0;
      *(_QWORD *)(a7 + 8) = 0;
      *(_QWORD *)(a7 + 16) = 0;
      v46 = v783;
      if (v783 != -1)
LABEL_438:
        ((void (*)(_BYTE **, _BYTE *))off_1E3352AA8[v46])(&v556, v715);
LABEL_439:
      ((void (*)(char *, char *))off_1E3352B08[v9])(v714, v610);
LABEL_440:
      ((void (*)(char *, uint64_t *))off_1E3352A98[v13])(v714, &v620);
      if (HIDWORD(v711))
        WTF::VectorDestructor<true,WebCore::ApplePayShippingMethod>::destruct((WTF::StringImpl *)v711, (WTF::StringImpl *)(v711 + 104 * HIDWORD(v711)));
      v390 = (WTF *)v711;
      if ((_QWORD)v711)
      {
        *(_QWORD *)&v711 = 0;
        DWORD2(v711) = 0;
        WTF::fastFree(v390, v389);
      }
      WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)v669, v389);
      return;
    default:
      *(_QWORD *)a7 = 0;
      *(_QWORD *)(a7 + 8) = 0;
      *(_QWORD *)(a7 + 16) = 0;
      return;
  }
}

WTF::StringImpl *WebCore::ApplePayPaymentHandler::merchantValidationCompleted@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  char v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  CFTypeRef cf;
  char v23;
  WTF::StringImpl *v24;
  uint8_t buf[4];
  uint64_t v26;
  uint64_t v27;

  v3 = result;
  v27 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)result + 3);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v7 = v6 - 96;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  if (*(_BYTE *)(v7 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1952C0BB8);
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 336) + 8) + 24) + 8) + 1240)
                 + 16))
    v8 = WTF::RefPtr<WebCore::PaymentSession,WTF::RawPtrTraits<WebCore::PaymentSession>,WTF::DefaultRefDerefTraits<WebCore::PaymentSession>>::unspecifiedBoolTypeInstance;
  else
    v8 = 0;
  if (!v8)
  {
    v19 = 8;
    goto LABEL_38;
  }
  if ((*(_QWORD *)a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(*(_QWORD *)a2 + 5) <= 0x16u)
  {
    v19 = 33;
LABEL_38:
    *(_BYTE *)a3 = v19;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v24 = 0;
  if (v5)
  {
    v9 = *(_QWORD *)(v5 + 8);
    if (v9)
      v10 = (WebCore::ScriptExecutionContext *)(v9 - 96);
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  if (*((_BYTE *)v10 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1952C0BE0);
  }
  WebCore::ScriptExecutionContext::globalObject(v10);
  WebCore::PaymentMerchantSession::fromJS((uint64_t)&cf);
  if (v23)
  {
    v12 = *((_QWORD *)v3 + 3);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
        v14 = v13 - 96;
      else
        v14 = 0;
    }
    else
    {
      v14 = 0;
    }
    if (*(_BYTE *)(v14 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x1952C0C00);
    }
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 336) + 8) + 24) + 8)
                               + 1240)
                   + 16))
      v15 = WTF::RefPtr<WebCore::PaymentSession,WTF::RawPtrTraits<WebCore::PaymentSession>,WTF::DefaultRefDerefTraits<WebCore::PaymentSession>>::unspecifiedBoolTypeInstance;
    else
      v15 = 0;
    if (v15)
    {
      if (v12)
      {
        v16 = *(_QWORD *)(v12 + 8);
        if (v16)
          v12 = v16 - 96;
        else
          v12 = 0;
      }
      if (*(_BYTE *)(v12 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x1952C0C28);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 336) + 8) + 24) + 8) + 1240);
      v18 = qword_1ECE7BE60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7BE60, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v26 = v17;
        _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%p - PaymentCoordinator::completeMerchantValidation()", buf, 0xCu);
      }
      (*(void (**)(_QWORD, CFTypeRef *))(**(_QWORD **)(v17 + 8) + 40))(*(_QWORD *)(v17 + 8), &cf);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      if (!v23)
        goto LABEL_43;
    }
    else
    {
      *(_BYTE *)a3 = 8;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
    }
    v21 = cf;
    cf = 0;
    if (v21)
      CFRelease(v21);
  }
  else
  {
    v20 = v24;
    v24 = 0;
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = v20;
    *(_BYTE *)(a3 + 16) = 1;
  }
LABEL_43:
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WebCore::ApplePayPaymentHandler::complete@<X0>(WTF::RunLoop *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF *result;
  uint64_t *v18;
  uint64_t v19;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  JSC::JSCell *v23;
  JSC::JSGlobalObject *v24;
  int v25;
  int v26;
  __int128 v27;
  __int128 v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  char v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  BOOL v35;
  int v36;
  _BOOL4 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  __int128 v62;
  __int128 v63;
  char v64;
  unsigned __int16 v65;
  WTF *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  char v72;
  WTF::StringImpl *v73[2];
  WTF::StringImpl *v74[2];
  __int128 v75;
  __int128 v76;
  char v77;
  uint64_t *v78;
  WTF::StringImpl *v79[2];
  __int128 v80;
  int v81;
  _BYTE v82[8];
  _QWORD v83[4];
  char v84;
  int v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  char v89;
  int v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v72 = 0;
  v66 = 0;
  v67 = 0;
  LOBYTE(v68) = 0;
  if (*(_BYTE *)(a3 + 4))
    v8 = *(_DWORD *)a3;
  else
    v8 = 1;
  switch(v8)
  {
    case 2:
      goto LABEL_7;
    case 1:
      v65 = 0;
      break;
    case 0:
LABEL_7:
      v65 = 1;
      break;
  }
  if (!*(_QWORD *)a4 || !*(_DWORD *)(*(_QWORD *)a4 + 4))
  {
LABEL_10:
    v9 = *((_QWORD *)a1 + 3);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v9 = v10 - 96;
      else
        v9 = 0;
    }
    if (*(_BYTE *)(v9 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x1952C1360);
    }
    WebCore::PaymentCoordinator::completePaymentSession(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 336) + 8) + 24) + 8) + 1240), &v65);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_16;
  }
  v18 = &WebCore::g_commonVMOrNull;
  v19 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(a1);
    JSC::VM::create();
    v19 = v86;
    WebCore::g_commonVMOrNull = v86;
    if (__ldaxr((unsigned int *)(v86 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v86 + 1096)))
    {
LABEL_37:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v86 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v19 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v19, 0);
      goto LABEL_40;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v86 + 192));
    goto LABEL_37;
  }
LABEL_40:
  v21 = (WebCore::ScriptExecutionContext *)(a2 + 192);
  WebCore::ScriptExecutionContext::globalObject(v21);
  v22 = JSC::JSONParse();
  if (*(_QWORD *)(v19 + 16))
  {
    *(_BYTE *)a5 = 37;
    a5[1] = 0;
    *((_BYTE *)a5 + 16) = 1;
    goto LABEL_16;
  }
  v23 = (JSC::JSCell *)v22;
  v24 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject(v21);
  WebCore::convertDictionary<WebCore::ApplePayPaymentCompleteDetails>(v23, v24, (uint64_t)&v86);
  v25 = v90;
  if (v90)
  {
    *(_BYTE *)a5 = 37;
    a5[1] = 0;
    v26 = 1;
    *((_BYTE *)a5 + 16) = 1;
    goto LABEL_122;
  }
  LOBYTE(v62) = 0;
  v64 = 0;
  if (!v89)
  {
    LOBYTE(v75) = 0;
    v77 = 0;
    goto LABEL_84;
  }
  v64 = 1;
  v62 = 0u;
  v63 = 0u;
  v27 = v87;
  v28 = v88;
  v87 = 0u;
  v88 = 0u;
  v75 = v27;
  v76 = v28;
  v77 = 1;
  if ((_QWORD)v28)
    *(_DWORD *)v28 += 2;
  v73[0] = (WTF::StringImpl *)v28;
  MEMORY[0x19AEA52D4](v79, v73, 0);
  v30 = v73[0];
  v73[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = (char)v79[1];
  v32 = v79[0];
  v79[0] = 0;
  if (!v32)
  {
LABEL_53:
    if ((v31 & 1) == 0)
      goto LABEL_54;
    goto LABEL_69;
  }
  if (*(_DWORD *)v32 != 2)
  {
    *(_DWORD *)v32 -= 2;
    goto LABEL_53;
  }
  WTF::StringImpl::destroy(v32, v29);
  if ((v31 & 1) == 0)
  {
LABEL_54:
    v33 = (WTF::StringImpl *)v76;
    if ((_QWORD)v76)
    {
      v34 = *(_DWORD *)(v76 + 4);
      *(_DWORD *)v76 += 2;
      if (v34 < 0)
        goto LABEL_137;
    }
    else
    {
      v34 = 0;
    }
    v35 = __OFADD__(v34, 21);
    v36 = v34 + 21;
    if (!v35 && !__OFADD__(v36, 1))
    {
      v37 = !v33 || (*((_BYTE *)v33 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v36 + 1), v37, 34, (uint64_t)v33, (int8x16_t *)"\" is not a valid URL.", 0x15u, &v78);
      v18 = v78;
      if (v78)
      {
        LOBYTE(v79[0]) = 33;
        v39 = 1;
        v81 = 1;
        v78 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v38);
          else
            *(_DWORD *)v33 -= 2;
        }
        v79[1] = 0;
        LOBYTE(v83[0]) = 33;
        v83[1] = v18;
        v85 = 1;
        goto LABEL_82;
      }
LABEL_138:
      __break(0xC471u);
      JUMPOUT(0x1952C1398);
    }
LABEL_137:
    v78 = 0;
    goto LABEL_138;
  }
LABEL_69:
  v81 = 0;
  *(_OWORD *)v79 = 0u;
  v80 = 0u;
  v40 = v75;
  v41 = v76;
  v75 = 0u;
  v76 = 0u;
  *(_OWORD *)v73 = v40;
  *(_OWORD *)v74 = v41;
  std::optional<WebCore::ApplePayPaymentOrderDetails>::operator=[abi:sn180100]<WebCore::ApplePayPaymentOrderDetails,void>((uint64_t)&v62, (WTF::StringImpl *)v73);
  v43 = v74[1];
  v74[1] = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = v74[0];
  v74[0] = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v42);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = v73[1];
  v73[1] = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v42);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = v73[0];
  v73[0] = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v42);
    else
      *(_DWORD *)v46 -= 2;
  }
  v39 = 0;
LABEL_82:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3352B18[v39])(v73, v79);
  if ((v31 & 1) != 0)
  {
LABEL_84:
    std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v11);
    LOBYTE(v83[0]) = 0;
    v84 = 0;
    if (v64)
    {
      v84 = 1;
      v85 = 0;
      memset(v83, 0, sizeof(v83));
      LOBYTE(v81) = 1;
      *(_OWORD *)v79 = 0u;
      v80 = 0u;
    }
    else
    {
      v85 = 0;
      LOBYTE(v79[0]) = 0;
      LOBYTE(v81) = 0;
    }
    std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v79, v47);
    if (v72 == v64)
    {
      if (v72)
      {
        v49 = (WTF::StringImpl *)v62;
        if ((_QWORD)v62)
          *(_DWORD *)v62 += 2;
        v50 = v68;
        v68 = v49;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, v48);
          else
            *(_DWORD *)v50 -= 2;
        }
        v51 = (WTF::StringImpl *)*((_QWORD *)&v62 + 1);
        if (*((_QWORD *)&v62 + 1))
          **((_DWORD **)&v62 + 1) += 2;
        v52 = v69;
        v69 = v51;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v48);
          else
            *(_DWORD *)v52 -= 2;
        }
        v53 = (WTF::StringImpl *)v63;
        if ((_QWORD)v63)
          *(_DWORD *)v63 += 2;
        v54 = v70;
        v70 = v53;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v48);
          else
            *(_DWORD *)v54 -= 2;
        }
        v55 = (WTF::StringImpl *)*((_QWORD *)&v63 + 1);
        if (*((_QWORD *)&v63 + 1))
          **((_DWORD **)&v63 + 1) += 2;
        v56 = v71;
        v71 = v55;
        if (v56)
        {
          if (*(_DWORD *)v56 != 2)
          {
            v26 = 0;
            *(_DWORD *)v56 -= 2;
            goto LABEL_121;
          }
          WTF::StringImpl::destroy(v56, v48);
        }
      }
    }
    else
    {
      if (!v72)
      {
        v57 = (WTF::StringImpl *)v62;
        if ((_QWORD)v62)
          *(_DWORD *)v62 += 2;
        v68 = v57;
        v58 = (WTF::StringImpl *)*((_QWORD *)&v62 + 1);
        if (*((_QWORD *)&v62 + 1))
          **((_DWORD **)&v62 + 1) += 2;
        v69 = v58;
        v59 = (WTF::StringImpl *)v63;
        if ((_QWORD)v63)
          *(_DWORD *)v63 += 2;
        v70 = v59;
        v60 = (WTF::StringImpl *)*((_QWORD *)&v63 + 1);
        if (*((_QWORD *)&v63 + 1))
          **((_DWORD **)&v63 + 1) += 2;
        v26 = 0;
        v71 = v60;
        v72 = 1;
        goto LABEL_121;
      }
      std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::reset[abi:sn180100]((uint64_t)&v68, v48);
    }
    v26 = 0;
    goto LABEL_121;
  }
  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v11);
  v83[1] = 0;
  *(_BYTE *)a5 = 33;
  a5[1] = v18;
  v26 = 1;
  *((_BYTE *)a5 + 16) = 1;
LABEL_121:
  ((void (*)(WTF::StringImpl **, _QWORD *))off_1E3352B28[v26])(v79, v83);
  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v61);
  v25 = v90;
LABEL_122:
  if (v25 != -1)
    ((void (*)(_BYTE *, __int128 *))off_1E3352B38[v25])(v82, &v87);
  if (!v26)
    goto LABEL_10;
LABEL_16:
  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v68, v11);
  if (HIDWORD(v67))
  {
    v13 = v66;
    v14 = 8 * HIDWORD(v67);
    do
    {
      v15 = *(_QWORD *)v13;
      *(_QWORD *)v13 = 0;
      if (v15)
      {
        if (*(_DWORD *)(v15 + 8) == 1)
        {
          v16 = *(WTF::StringImpl **)(v15 + 16);
          *(_QWORD *)(v15 + 16) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v12);
            else
              *(_DWORD *)v16 -= 2;
          }
          WTF::fastFree((WTF *)v15, v12);
        }
        else
        {
          --*(_DWORD *)(v15 + 8);
        }
      }
      v13 = (WTF *)((char *)v13 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  result = v66;
  if (v66)
  {
    v66 = 0;
    LODWORD(v67) = 0;
    return (WTF *)WTF::fastFree(result, v12);
  }
  return result;
}

WTF *WebCore::ApplePayPaymentHandler::retry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)();
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  WTF *v39;
  int v40;
  unsigned int v41;
  _BYTE v42[40];
  _BYTE v43[8];
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;

  v46 = 0;
  v47 = 0;
  WebCore::ApplePayPaymentHandler::computeAddressErrors(*(unsigned __int8 *)(*(_QWORD *)(a1 + 80) + 55), a2 + 120, a2 + 24, (uint64_t)&v46);
  v6 = *(_BYTE **)(a1 + 80);
  if (v6[52])
    WebCore::appendShippingContactInvalidError(a2 + 8, 258, (uint64_t)&v46);
  if (v6[53])
    WebCore::appendShippingContactInvalidError(a2, 257, (uint64_t)&v46);
  if (v6[54])
    WebCore::appendShippingContactInvalidError(a2 + 16, 256, (uint64_t)&v46);
  v7 = *(uint64_t **)(a2 + 128);
  if (v7)
    v8 = *v7;
  else
    v8 = 0;
  WebCore::ApplePayPaymentHandler::computePaymentMethodErrors((WTF::StringImpl *)v43, a1, v8, (uint64_t)&v46);
  if (v45)
  {
    v10 = v44;
    *(_BYTE *)a3 = v43[0];
    *(_QWORD *)(a3 + 8) = v10;
LABEL_11:
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_12;
  }
  v16 = *(_QWORD *)(a1 + 24);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
      v18 = v17 - 96;
    else
      v18 = 0;
  }
  else
  {
    v18 = 0;
  }
  if (*(_BYTE *)(v18 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1952C175CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 336) + 8) + 24) + 8) + 1240)
                 + 16))
    v19 = WTF::RefPtr<WebCore::PaymentSession,WTF::RawPtrTraits<WebCore::PaymentSession>,WTF::DefaultRefDerefTraits<WebCore::PaymentSession>>::unspecifiedBoolTypeInstance;
  else
    v19 = 0;
  if (!v19)
  {
    *(_BYTE *)a3 = 16;
    *(_QWORD *)(a3 + 8) = 0;
    goto LABEL_11;
  }
  v20 = HIDWORD(v47);
  if (!HIDWORD(v47))
  {
    v21 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v21 + 8) = 1;
    *(_QWORD *)v21 = off_1E334CCA0;
    *(_BYTE *)(v21 + 12) = 0;
    *(_WORD *)(v21 + 13) = 0;
    v23 = *MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *(_DWORD *)v23 += 2;
    *(_QWORD *)(v21 + 16) = v23;
    *(_WORD *)(v21 + 24) = 0;
    v38 = (WTF *)v21;
    LODWORD(v23) = HIDWORD(v47);
    if (HIDWORD(v47) == (_DWORD)v47)
    {
      v24 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v46, HIDWORD(v47) + 1, (unint64_t)&v38);
      v23 = HIDWORD(v47);
      v25 = v46;
      v26 = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      *(_QWORD *)&v25[8 * v23] = v26;
    }
    else
    {
      v38 = 0;
      *(_QWORD *)&v46[8 * HIDWORD(v47)] = v21;
    }
    HIDWORD(v47) = v23 + 1;
    v27 = v38;
    v38 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 2) == 1)
      {
        v37 = (WTF::StringImpl *)*((_QWORD *)v27 + 2);
        *((_QWORD *)v27 + 2) = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v22);
          else
            *(_DWORD *)v37 -= 2;
        }
        WTF::fastFree(v27, v22);
      }
      else
      {
        --*((_DWORD *)v27 + 2);
      }
    }
    v16 = *(_QWORD *)(a1 + 24);
    v20 = HIDWORD(v47);
  }
  v42[32] = 0;
  v42[0] = 0;
  LOWORD(v38) = 1;
  v28 = v47;
  v29 = (WTF *)v46;
  v46 = 0;
  v47 = 0;
  v39 = v29;
  v40 = v28;
  v41 = v20;
  if (v16)
  {
    v30 = *(_QWORD *)(v16 + 8);
    if (v30)
      v16 = v30 - 96;
    else
      v16 = 0;
  }
  if (*(_BYTE *)(v16 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1952C177CLL);
  }
  WebCore::PaymentCoordinator::completePaymentSession(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 336) + 8) + 24) + 8) + 1240), (unsigned __int16 *)&v38);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v31);
  if (v41)
  {
    v32 = v39;
    v33 = 8 * v41;
    do
    {
      v34 = *(_QWORD *)v32;
      *(_QWORD *)v32 = 0;
      if (v34)
      {
        if (*(_DWORD *)(v34 + 8) == 1)
        {
          v35 = *(WTF::StringImpl **)(v34 + 16);
          *(_QWORD *)(v34 + 16) = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v9);
            else
              *(_DWORD *)v35 -= 2;
          }
          WTF::fastFree((WTF *)v34, v9);
        }
        else
        {
          --*(_DWORD *)(v34 + 8);
        }
      }
      v32 = (WTF *)((char *)v32 + 8);
      v33 -= 8;
    }
    while (v33);
  }
  v36 = v39;
  if (v39)
  {
    v39 = 0;
    v40 = 0;
    WTF::fastFree(v36, v9);
  }
LABEL_12:
  if (HIDWORD(v47))
  {
    v11 = v46;
    v12 = 8 * HIDWORD(v47);
    do
    {
      v13 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      if (v13)
      {
        if (*(_DWORD *)(v13 + 8) == 1)
        {
          v14 = *(WTF::StringImpl **)(v13 + 16);
          *(_QWORD *)(v13 + 16) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v9);
            else
              *(_DWORD *)v14 -= 2;
          }
          WTF::fastFree((WTF *)v13, v9);
        }
        else
        {
          --*(_DWORD *)(v13 + 8);
        }
      }
      v11 += 8;
      v12 -= 8;
    }
    while (v12);
  }
  result = (WTF *)v46;
  if (v46)
  {
    v46 = 0;
    LODWORD(v47) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

uint64_t WebCore::ApplePayPaymentHandler::version(WebCore::ApplePayPaymentHandler *this)
{
  if (*((_BYTE *)this + 680))
    return *((unsigned int *)this + 166);
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::ApplePayPaymentHandler::version(WebCore::ApplePayPaymentHandler *this)
{
  if (*((_BYTE *)this + 672))
    return *((unsigned int *)this + 164);
  else
    return 0;
}

WTF *WebCore::ApplePayPaymentHandler::validateMerchant(WTF *result, uint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::EventTarget *v7;
  _DWORD **v8;
  _QWORD *v9;
  WebCore::Event *v10;
  WTF *v11;
  uint64_t v12;

  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    v3 = result;
    v4 = *((_QWORD *)result + 10);
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5 || (result = *(WTF **)(v5 + 96)) == 0)
      result = (WTF *)WebCore::threadGlobalDataSlow(result);
    v6 = *((_QWORD *)result + 5);
    if (!v6)
    {
      v11 = result;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)result);
      v6 = *((_QWORD *)v11 + 5);
    }
    if (*((_DWORD *)v3 + 18) == 1)
    {
      v7 = (WebCore::EventTarget *)(v4 + 24);
      v8 = (_DWORD **)((char *)v3 + 32);
      v9 = (_QWORD *)(v6 + 1184);
      v10 = (WebCore::Event *)bmalloc::api::isoAllocate();
      WebCore::MerchantValidationEvent::MerchantValidationEvent((uint64_t)v10, v9, v8, (uint64_t *)a2);
      result = WebCore::EventTarget::dispatchEvent(v7, v10);
      if (*((_DWORD *)v10 + 4) == 1)
        return (WTF *)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)v10 + 8))(v10);
      else
        --*((_DWORD *)v10 + 4);
    }
    else
    {
      v12 = std::__throw_bad_variant_access[abi:sn180100]();
    }
  }
  return result;
}

WTF *`non-virtual thunk to'WebCore::ApplePayPaymentHandler::validateMerchant(uint64_t a1, uint64_t a2)
{
  return WebCore::ApplePayPaymentHandler::validateMerchant((WTF *)(a1 - 8), a2);
}

void WebCore::ApplePayPaymentHandler::didAuthorizePayment(WebCore::ApplePayPaymentHandler *this, const WebCore::Payment *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  WebCore::PaymentAddress *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  void *v16;
  WTF::StringImpl *v17;
  const WebCore::ApplePayPaymentContact *v18;
  WebCore::PaymentAddress *v19;
  _QWORD *v20;
  uint64_t v21[31];
  _BYTE v22[152];
  _BYTE v23[152];
  WTF::StringImpl *v24;
  _OWORD v25[2];
  _OWORD v26[2];
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33[31];
  _BYTE v34[152];
  _BYTE v35[144];
  char v36;
  WTF::StringImpl *v37;

  if (*((_BYTE *)this + 680))
    v4 = *((unsigned int *)this + 166);
  else
    v4 = 0;
  (*(void (**)(uint64_t *__return_ptr, const WebCore::Payment *, uint64_t))(*(_QWORD *)a2 + 16))(v33, a2, v4);
  if (v36)
  {
    WebCore::ApplePayPaymentContact::ApplePayPaymentContact((uint64_t)v25, (const WebCore::ApplePayPaymentContact *)v35);
  }
  else
  {
    v28 = 0;
    memset(v25, 0, sizeof(v25));
    memset(v26, 0, sizeof(v26));
    v27 = 0;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0;
  }
  WebCore::ApplePayPayment::ApplePayPayment((uint64_t)v21, v33);
  if (*((_DWORD *)this + 18) == 1)
  {
    v5 = (_QWORD *)((char *)this + 32);
    v6 = *((_QWORD *)this + 10);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x238);
    *v7 = off_1E3352BF0;
    WebCore::ApplePayPayment::ApplePayPayment((uint64_t)(v7 + 1), v21);
    v20 = v7;
    WebCore::convert((WTF::StringImpl *)&v19, (const WebCore::ApplePayPaymentContact *)v25);
    WebCore::PaymentRequest::accept(v6, v5, (uint64_t *)&v20, (_DWORD **)&v19, (WTF::StringImpl **)v26, (WTF::StringImpl **)v25 + 1, (WTF::StringImpl **)v25);
    v9 = v19;
    v19 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::PaymentAddress::~PaymentAddress(v9, v8);
        WTF::fastFree(v15, v16);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
    v10 = (uint64_t)v20;
    v20 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v24;
    v24 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (v23[144])
      WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v23, v8);
    if (v22[144])
      WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v22, v8);
    WebCore::ApplePayPayment::Token::~Token((WebCore::ApplePayPayment::Token *)v21, v8);
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v25, v12);
    v14 = v37;
    v37 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (v36)
      WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v35, v13);
    if (v34[144])
      WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v34, v13);
    WebCore::ApplePayPayment::Token::~Token((WebCore::ApplePayPayment::Token *)v33, v13);
  }
  else
  {
    v17 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::convert(v17, v18);
  }
}

WTF::StringImpl *WebCore::convert(WTF::StringImpl *this, const WebCore::ApplePayPaymentContact *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = this;
  if (*((_BYTE *)a2 + 80))
  {
    v4 = *((unsigned int *)a2 + 19);
    v18 = 0;
    LODWORD(v19) = 0;
    HIDWORD(v19) = v4;
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v10 = WTF::fastMalloc((WTF *)(8 * v4));
      v5 = (WTF *)v10;
      LODWORD(v19) = v4;
      v18 = v10;
      v11 = *((unsigned int *)a2 + 19);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = *((_QWORD *)a2 + 8);
        v14 = 8 * v11;
        do
        {
          v15 = *(_DWORD **)(v13 + v12);
          if (v15)
            *v15 += 2;
          *(_QWORD *)(v10 + v12) = v15;
          v12 += 8;
        }
        while (v14 != v12);
      }
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    LODWORD(v4) = 0;
    v18 = 0;
    v19 = 0;
  }
  v16 = 0;
  v17 = 0;
  v6 = WTF::fastMalloc((WTF *)0x60);
  this = (WTF::StringImpl *)WebCore::PaymentAddress::PaymentAddress(v6, (_DWORD **)a2 + 17, (uint64_t)&v18, (_DWORD **)a2 + 15, (_DWORD **)a2 + 12, (_DWORD **)a2 + 11, (_DWORD **)a2 + 13, &v17, &v16, (_DWORD **)a2 + 4, (_DWORD **)a2);
  *(_QWORD *)v3 = this;
  if ((_DWORD)v4)
  {
    v8 = 8 * v4;
    v9 = (WTF::StringImpl **)v5;
    do
    {
      this = *v9;
      *v9 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
        else
          *(_DWORD *)this -= 2;
      }
      ++v9;
      v8 -= 8;
    }
    while (v8);
  }
  if (v5)
    return (WTF::StringImpl *)WTF::fastFree(v5, v7);
  return this;
}

void `non-virtual thunk to'WebCore::ApplePayPaymentHandler::didAuthorizePayment(WebCore::ApplePayPaymentHandler *this, const WebCore::Payment *a2)
{
  WebCore::ApplePayPaymentHandler::didAuthorizePayment((WebCore::ApplePayPaymentHandler *)((char *)this - 8), a2);
}

_QWORD *WebCore::ApplePayPaymentHandler::didSelectShippingMethod(uint64_t a1, uint64_t a2)
{
  WebCore::PaymentRequest *v2;
  WTF::StringImpl *v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 696) = 2;
  v2 = *(WebCore::PaymentRequest **)(a1 + 80);
  ++*((_DWORD *)v2 + 12);
  v3 = *(WTF::StringImpl **)(a2 + 24);
  if (v3)
    *(_DWORD *)v3 += 2;
  v4 = operator new(0x20uLL);
  *v4 = &off_1E3364BE8;
  v4[1] = v2;
  v4[2] = v2;
  if (v3)
    *(_DWORD *)v3 += 2;
  v4[3] = v3;
  v9 = v4;
  WebCore::PaymentRequest::whenDetailsSettled(v2, v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_10;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_10:
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return (_QWORD *)WTF::StringImpl::destroy(v3, v5);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::ApplePayPaymentHandler::didSelectShippingMethod(uint64_t a1, uint64_t a2)
{
  WebCore::PaymentRequest *v2;
  WTF::StringImpl *v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 688) = 2;
  v2 = *(WebCore::PaymentRequest **)(a1 + 72);
  ++*((_DWORD *)v2 + 12);
  v3 = *(WTF::StringImpl **)(a2 + 24);
  if (v3)
    *(_DWORD *)v3 += 2;
  v4 = operator new(0x20uLL);
  *v4 = &off_1E3364BE8;
  v4[1] = v2;
  v4[2] = v2;
  if (v3)
    *(_DWORD *)v3 += 2;
  v4[3] = v3;
  v9 = v4;
  WebCore::PaymentRequest::whenDetailsSettled(v2, v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_10;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_10:
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return (_QWORD *)WTF::StringImpl::destroy(v3, v5);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

void WebCore::ApplePayPaymentHandler::didSelectShippingContact(WebCore::ApplePayPaymentHandler *this, const WebCore::PaymentContact *a2)
{
  WebCore::PaymentRequest *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[18];
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 696) = 1;
  v3 = (WebCore::PaymentRequest *)*((_QWORD *)this + 10);
  if (*((_BYTE *)this + 680))
    v4 = *((unsigned int *)this + 166);
  else
    v4 = 0;
  (*(void (**)(_QWORD *__return_ptr, const WebCore::PaymentContact *, uint64_t))(*(_QWORD *)a2 + 16))(v10, a2, v4);
  WebCore::convert((WTF::StringImpl *)&v11, (const WebCore::ApplePayPaymentContact *)v10);
  ++*((_DWORD *)v3 + 12);
  v5 = v11;
  v6 = operator new(0x20uLL);
  *v6 = &off_1E3364BA0;
  v6[1] = v3;
  v6[2] = v3;
  v6[3] = v5;
  v13 = v6;
  WebCore::PaymentRequest::whenDetailsSettled(v3, v12);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
    goto LABEL_8;
  }
  if (v13)
  {
    v9 = 5;
LABEL_8:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)v10, v7);
}

void `non-virtual thunk to'WebCore::ApplePayPaymentHandler::didSelectShippingContact(WebCore::ApplePayPaymentHandler *this, const WebCore::PaymentContact *a2)
{
  WebCore::ApplePayPaymentHandler::didSelectShippingContact((WebCore::ApplePayPaymentHandler *)((char *)this - 8), a2);
}

WTF::StringImpl *WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::ApplePayPaymentHandler *this, const WebCore::PaymentMethod *a2)
{
  WebCore::PaymentRequest *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  _QWORD *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *result;
  __int128 v42;
  __int128 v43;
  int v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  int v64;
  unsigned __int8 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unsigned __int8 v77;
  WTF::StringImpl *v78;
  _QWORD v79[3];
  _QWORD *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 696) = 3;
  (*(void (**)(WTF::StringImpl **__return_ptr, const WebCore::PaymentMethod *))(*(_QWORD *)a2 + 16))(&v59, a2);
  *((_DWORD *)this + 172) = v61;
  *((_BYTE *)this + 692) = BYTE4(v61);
  if (*((_DWORD *)this + 18) != 1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v3 = (WebCore::PaymentRequest *)*((_QWORD *)this + 10);
  v5 = v59;
  v4 = v60;
  v59 = 0;
  v60 = 0;
  v6 = v61;
  LOBYTE(v42) = 0;
  v45 = 0;
  v7 = v65;
  if (v65)
  {
    v8 = v62;
    v62 = 0u;
    v42 = v8;
    v9 = v63;
    v63 = 0u;
    v43 = v9;
    v44 = v64;
    v45 = 1;
  }
  LOBYTE(v46) = 0;
  v57 = 0;
  v10 = v77;
  if (v77)
  {
    v11 = v66;
    v66 = 0u;
    v46 = v11;
    v12 = v67;
    v67 = 0u;
    v47 = v12;
    v13 = v68;
    v68 = 0u;
    v48 = v13;
    v14 = v69;
    v69 = 0u;
    v49 = v14;
    LOBYTE(v50) = 0;
    v52 = 0;
    if (v72)
    {
      v50 = v70;
      v15 = v71;
      v70 = 0;
      v71 = 0;
      v51 = v15;
      v52 = 1;
    }
    v16 = v73;
    v17 = v74;
    v73 = 0uLL;
    v74 = 0uLL;
    v53 = v16;
    v54 = v17;
    v18 = v75;
    v75 = 0uLL;
    v55 = v18;
    v19 = v76;
    v76 = 0;
    v56 = v19;
    v57 = 1;
  }
  v20 = (WTF::StringImpl **)((char *)this + 32);
  v21 = v78;
  v78 = 0;
  v58 = v21;
  v80 = 0;
  v22 = (char *)operator new(0xF0uLL);
  *(_QWORD *)v22 = &off_1E3352C18;
  *((_QWORD *)v22 + 1) = v5;
  *((_QWORD *)v22 + 2) = v4;
  *((_QWORD *)v22 + 3) = v6;
  v22[32] = 0;
  v22[72] = 0;
  if (v7)
  {
    v23 = v42;
    v42 = 0u;
    v24 = v43;
    v43 = 0u;
    *((_OWORD *)v22 + 2) = v23;
    *((_OWORD *)v22 + 3) = v24;
    *((_DWORD *)v22 + 16) = v44;
    v22[72] = 1;
  }
  v22[80] = 0;
  v22[224] = 0;
  if (v10)
  {
    v25 = v46;
    v46 = 0u;
    v26 = v47;
    v47 = 0u;
    *((_OWORD *)v22 + 5) = v25;
    *((_OWORD *)v22 + 6) = v26;
    v27 = v48;
    v48 = 0u;
    v28 = v49;
    v49 = 0u;
    *((_OWORD *)v22 + 7) = v27;
    *((_OWORD *)v22 + 8) = v28;
    v22[144] = 0;
    v22[160] = 0;
    if (v52)
    {
      *((_QWORD *)v22 + 18) = v50;
      v29 = v51;
      v50 = 0;
      v51 = 0;
      *((_QWORD *)v22 + 19) = v29;
      v22[160] = 1;
    }
    v30 = v54;
    *(_OWORD *)(v22 + 168) = v53;
    v53 = 0uLL;
    v54 = 0uLL;
    *(_OWORD *)(v22 + 184) = v30;
    v31 = v55;
    v55 = 0uLL;
    *(_OWORD *)(v22 + 200) = v31;
    v32 = v56;
    v56 = 0;
    *((_QWORD *)v22 + 27) = v32;
    v22[224] = 1;
  }
  v58 = 0;
  *((_QWORD *)v22 + 29) = v21;
  v80 = v22;
  WebCore::PaymentRequest::paymentMethodChanged(v3, v20, v79);
  v34 = v80;
  if (v80 == v79)
  {
    v35 = 4;
    v34 = v79;
  }
  else
  {
    if (!v80)
      goto LABEL_19;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_19:
  v36 = v58;
  v58 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v33);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (v57)
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)&v46, v33);
  std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, v33);
  v38 = v78;
  v78 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v37);
    else
      *(_DWORD *)v38 -= 2;
  }
  if (v77)
    WebCore::ApplePayPaymentContact::~ApplePayPaymentContact((WebCore::ApplePayPaymentContact *)&v66, v37);
  std::__optional_destruct_base<WebCore::ApplePayPaymentPass,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v37);
  v40 = v60;
  v60 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  result = v59;
  v59 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::ApplePayPaymentHandler::didSelectPaymentMethod(WebCore::ApplePayPaymentHandler *this, const WebCore::PaymentMethod *a2)
{
  return WebCore::ApplePayPaymentHandler::didSelectPaymentMethod((WebCore::ApplePayPaymentHandler *)((char *)this - 8), a2);
}

_QWORD *WebCore::ApplePayPaymentHandler::didChangeCouponCode(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  WebCore::PaymentRequest *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 696) = 4;
  v2 = *a2;
  *a2 = 0;
  if (*(_DWORD *)(a1 + 72) != 1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v3 = (WTF::StringImpl **)(a1 + 32);
  v4 = *(WebCore::PaymentRequest **)(a1 + 80);
  v5 = operator new(0x10uLL);
  *v5 = &off_1E3352C60;
  v5[1] = v2;
  v9 = v5;
  WebCore::PaymentRequest::paymentMethodChanged(v4, v3, v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

_QWORD *`non-virtual thunk to'WebCore::ApplePayPaymentHandler::didChangeCouponCode(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  WebCore::PaymentRequest *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 688) = 4;
  v2 = *a2;
  *a2 = 0;
  if (*(_DWORD *)(a1 + 64) != 1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v3 = (WTF::StringImpl **)(a1 + 24);
  v4 = *(WebCore::PaymentRequest **)(a1 + 72);
  v5 = operator new(0x10uLL);
  *v5 = &off_1E3352C60;
  v5[1] = v2;
  v9 = v5;
  WebCore::PaymentRequest::paymentMethodChanged(v4, v3, v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

WTF::StringImpl *WebCore::ApplePayPaymentHandler::didCancelPaymentSession(uint64_t a1, void *a2)
{
  return WebCore::PaymentRequest::cancel(*(WebCore::PaymentRequest **)(a1 + 80), a2);
}

WTF::StringImpl *`non-virtual thunk to'WebCore::ApplePayPaymentHandler::didCancelPaymentSession(uint64_t a1, void *a2)
{
  return WebCore::PaymentRequest::cancel(*(WebCore::PaymentRequest **)(a1 + 72), a2);
}

uint64_t WebCore::convertAndValidateApplePayAMSUIRequest(uint64_t a1, uint64_t a2, JSC::JSCell *a3)
{
  WTF::ThreadGroup ***v6;
  uint64_t result;
  uint64_t v9;
  JSC::VM **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  if (!a3)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = v15;
    *(_BYTE *)a1 = 33;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = 1;
    return result;
  }
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists((WTF::RunLoop *)a1);
    JSC::VM::create();
    v6 = (WTF::ThreadGroup ***)v15;
    WebCore::g_commonVMOrNull = v15;
    if (__ldaxr((unsigned int *)(v15 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v15 + 1096)))
    {
LABEL_8:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v15 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(*v6[73]);
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v6, 0);
      goto LABEL_11;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v15 + 192));
    goto LABEL_8;
  }
LABEL_11:
  v10 = (JSC::VM **)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(a2 + 192));
  result = WebCore::convertDictionary<WebCore::ApplePayAMSUIRequest>(a3, v10, (uint64_t)&v15);
  if (v16)
  {
    *(_BYTE *)a1 = 37;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v11 = (WTF::StringImpl *)v15;
    v15 = 0;
    if (v11)
    {
      result = WTF::StringImpl::startsWith();
      if ((result & 1) != 0)
      {
        *(_QWORD *)a1 = v11;
        *(_DWORD *)(a1 + 16) = 0;
      }
      else
      {
        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
        v13 = v17;
        *(_BYTE *)a1 = 33;
        *(_QWORD *)(a1 + 8) = v13;
        *(_DWORD *)(a1 + 16) = 1;
        if (*(_DWORD *)v11 == 2)
          result = WTF::StringImpl::destroy(v11, v12);
        else
          *(_DWORD *)v11 -= 2;
      }
      goto LABEL_19;
    }
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v17;
    *(_BYTE *)a1 = 33;
    *(_QWORD *)(a1 + 8) = v14;
  }
  *(_DWORD *)(a1 + 16) = 1;
LABEL_19:
  if (v16 != -1)
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E3352B48[v16])(&v17, &v15);
  return result;
}

WTF::StringImpl *WebCore::ApplePayAMSUIPaymentHandler::finishSession(WTF::StringImpl *result, char *a2)
{
  _QWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  JSC::JSCell *v11;
  _QWORD *v12;
  char v13[8];
  WTF::StringImpl *v14;
  uint64_t v15[2];
  int v16;
  char v17;

  if (a2[1])
  {
    if (*((_DWORD *)result + 16) == 1)
    {
      v2 = (_QWORD *)((char *)result + 24);
      v3 = *((_QWORD *)result + 9);
      v4 = *a2;
      v5 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v5 = off_1E3352CA8;
      *(_BYTE *)(v5 + 8) = v4;
      v15[0] = v5;
      WebCore::PaymentRequest::accept(v3, v2, v15);
      result = (WTF::StringImpl *)v15[0];
      v15[0] = 0;
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      v9 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::ApplePayAMSUIPaymentHandler::convertData(v9, v10, v11, v12);
    }
  }
  else
  {
    v6 = *((_QWORD *)result + 9);
    v13[0] = 16;
    v14 = 0;
    if (*(_DWORD *)(v6 + 224) != 2)
    {
      WebCore::PaymentRequest::closeActivePaymentHandler((WebCore::PaymentRequest *)v6, a2);
      v7 = *(_QWORD *)(v6 + 280);
      if (v7)
      {
        WebCore::PaymentResponse::abortWithException(v7, (WTF::StringImpl *)v13);
        result = v14;
        v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
          else
            *(_DWORD *)result -= 2;
        }
      }
      else
      {
        LOBYTE(v15[0]) = 16;
        v15[1] = 0;
        v16 = 1;
        result = (WTF::StringImpl *)WebCore::PaymentRequest::settleShowPromise(v6, (uint64_t)v15);
        if (v16 != -1)
          return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore15PaymentResponseENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v16])(&v17, v15);
      }
    }
  }
  return result;
}

uint64_t WebCore::ApplePayAMSUIPaymentHandler::convertData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, JSC::JSCell *a3@<X2>, _QWORD *a4@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WebCore::ApplePayAMSUIPaymentHandler *v12;
  WebCore::Document *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;

  WebCore::convertAndValidateApplePayAMSUIRequest((uint64_t)&v14, a2, a3);
  v7 = v16;
  if (!v16)
  {
    v9 = v14;
    v14 = 0;
    if (*(_BYTE *)(a1 + 88))
    {
      v10 = *(WTF::StringImpl **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v6);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 80) = v9;
      *(_BYTE *)(a1 + 88) = 1;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20ApplePayAMSUIRequestENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v7])(&v17, &v14);
  }
  if (v16 == 1)
  {
    v8 = v15;
    v15 = 0;
    *(_BYTE *)a4 = v14;
    a4[1] = v8;
    *((_BYTE *)a4 + 16) = 1;
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20ApplePayAMSUIRequestENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v7])(&v17, &v14);
  }
  v12 = (WebCore::ApplePayAMSUIPaymentHandler *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::ApplePayAMSUIPaymentHandler::show(v12, v13);
}

BOOL WebCore::ApplePayAMSUIPaymentHandler::show@<W0>(WebCore::ApplePayAMSUIPaymentHandler *this@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BOOL8 result;
  char v14;
  char v15;

  v3 = (const char *)this;
  v5 = *((_QWORD *)this + 2);
  if (!v5)
    goto LABEL_28;
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
    v7 = v6 - 96;
  else
    v7 = 0;
  while (1)
  {
    if (*(_BYTE *)(v7 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x1952C2A14);
    }
    v8 = *(_QWORD *)(v7 + 336);
    if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && (v10 = *(_QWORD *)(v9 + 24)) != 0)
    {
      v11 = *(_QWORD **)(v10 + 8);
      if (!v5)
        goto LABEL_13;
    }
    else
    {
      v11 = 0;
      if (!v5)
        goto LABEL_13;
    }
    v12 = *(_QWORD *)(v5 + 8);
    v5 = v12 ? v12 - 96 : 0;
LABEL_13:
    if (!*(_BYTE *)(v5 + 274))
      break;
    v3 = "match_constness_t<Source, Target> &WTF::downcast(Source &) [Target = WebCore::Document, Source = WebCore::Scrip"
         "tExecutionContext]";
    __break(0xC471u);
LABEL_27:
    __break(1u);
LABEL_28:
    v7 = 0;
  }
  v5 = *(_QWORD *)(v5 + 336);
  if (v5)
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (v5)
    {
      v5 = *(_QWORD *)(v5 + 24);
      if (v5)
        v5 = *(_QWORD *)(v5 + 8);
    }
  }
  if (!v3[88])
    goto LABEL_27;
  result = WebCore::Page::startApplePayAMSUISession(v11, v5 + 168, (uint64_t)v3, (uint64_t)(v3 + 80));
  if (result)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    a2[1] = 0;
    v15 = 1;
    v14 = 16;
  }
  *(_BYTE *)a2 = v14;
  *((_BYTE *)a2 + 16) = v15;
  return result;
}

uint64_t WebCore::ApplePayAMSUIPaymentHandler::hide(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v1 = v2 - 96;
    else
      v1 = 0;
  }
  if (*(_BYTE *)(v1 + 274))
  {
    this = 96;
    __break(0xC471u);
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 336) + 8) + 24) + 8);
    if (*(_QWORD *)(v3 + 1248) == this)
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 16) + 1728))(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16));
      v4 = *(_QWORD *)(v3 + 1248);
      *(_QWORD *)(v3 + 1248) = 0;
      if (v4)
      {
        v5 = 0;
        this = (uint64_t)WebCore::ApplePayAMSUIPaymentHandler::finishSession((WTF::StringImpl *)v4, (char *)&v5);
        if (*(_DWORD *)(v4 + 104) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 96) + 8))(v4 + 96);
        else
          --*(_DWORD *)(v4 + 104);
      }
    }
  }
  return this;
}

uint64_t WebCore::ApplePayAMSUIPaymentHandler::canMakePayment(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  _BOOL8 v8;

  v3 = *(_QWORD *)(a2 + 528);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 24)) != 0 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    if (*(_QWORD *)(v6 + 1248))
      v7 = WTF::RefPtr<WebCore::ApplePayAMSUIPaymentHandler,WTF::RawPtrTraits<WebCore::ApplePayAMSUIPaymentHandler>,WTF::DefaultRefDerefTraits<WebCore::ApplePayAMSUIPaymentHandler>>::unspecifiedBoolTypeInstance;
    else
      v7 = 0;
    v8 = v7 == 0;
  }
  else
  {
    v8 = 0;
  }
  return (*(uint64_t (**)(_QWORD, _BOOL8))(*(_QWORD *)*a3 + 16))(*a3, v8);
}

void WebCore::ApplePayAMSUIPaymentHandler::detailsUpdated(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void WebCore::ApplePayAMSUIPaymentHandler::merchantValidationCompleted(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t WebCore::ApplePayAMSUIPaymentHandler::complete@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v3 = v4 - 96;
    else
      v3 = 0;
  }
  if (*(_BYTE *)(v3 + 274))
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 336) + 8) + 24) + 8);
    if (*(_QWORD *)(v5 + 1248) == result)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 16) + 1728))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16));
      v6 = *(_QWORD *)(v5 + 1248);
      *(_QWORD *)(v5 + 1248) = 0;
      if (v6)
      {
        v7 = 0;
        result = (uint64_t)WebCore::ApplePayAMSUIPaymentHandler::finishSession((WTF::StringImpl *)v6, (char *)&v7);
        if (*(_DWORD *)(v6 + 104) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 96) + 8))(v6 + 96);
        else
          --*(_DWORD *)(v6 + 104);
      }
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

uint64_t WebCore::ApplePayAMSUIPaymentHandler::retry@<X0>(WebCore::ApplePayAMSUIPaymentHandler *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  if (v2)
    v3 = v2 - 96;
  else
    v3 = 0;
  if (!*(_BYTE *)(v3 + 274))
    return WebCore::ApplePayAMSUIPaymentHandler::show(a1, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

WebCore::Node *WebCore::ApplicationManifestParser::parse@<X0>(WebCore::ApplicationManifestParser *this@<X0>, WebCore::Document *a2@<X1>, const WTF::String *a3@<X2>, const WTF::URL *a4@<X3>, uint64_t a5@<X8>)
{
  WTF::JSONImpl::Object *v11;
  WTF::JSONImpl::Object *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebCore::Node *result;
  WTF::JSONImpl::Object *v16;
  WTF::JSONImpl::Object *v17;
  WebCore::Node *v18;
  WTF::StringImpl *v19;

  *((_DWORD *)this + 6) += 4;
  v18 = this;
  v19 = 0;
  WTF::URL::invalidate((WTF::URL *)&v19);
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  v11 = (WTF::JSONImpl::Object *)WebCore::ApplicationManifestParser::createJSONObject((WebCore::ApplicationManifestParser *)&v18, &v17);
  v12 = v17;
  if (!v17)
  {
    WTF::JSONImpl::Object::create(v11);
    v12 = v16;
  }
  WebCore::ApplicationManifestParser::parseManifest((WebCore::ApplicationManifestParser *)&v18, v12, a2, a3, a4, a5);
  if (*(_DWORD *)v12 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*(_DWORD *)v12;
  v14 = v19;
  v19 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

_DWORD *WebCore::ApplicationManifestParser::createJSONObject@<X0>(WebCore::ApplicationManifestParser *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  _DWORD *result;
  _DWORD *v9;
  WTF::String *v10;

  WTF::JSONImpl::Value::parseJSON();
  v5 = v9;
  if (v9)
  {
    v6 = v9[1];
    if (v6 >= 5)
    {
      if (v6 == 5)
      {
        ++*v9;
        goto LABEL_6;
      }
      if (v6 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1952C2ED8);
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ApplicationManifestParser::logDeveloperWarning((uint64_t *)this, v10);
  if (v10)
  {
    if (*(_DWORD *)v10 != 2)
    {
      v5 = 0;
      *(_DWORD *)v10 -= 2;
      goto LABEL_6;
    }
    WTF::StringImpl::destroy(v10, v7);
  }
  v5 = 0;
LABEL_6:
  *a2 = v5;
  result = v9;
  if (v9)
  {
    if (*v9 == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*v9;
  }
  return result;
}

unsigned int *WebCore::ApplicationManifestParser::parseManifest@<X0>(WebCore::ApplicationManifestParser *this@<X0>, const WTF::JSONImpl::Object *a2@<X1>, const WTF::String *a3@<X2>, const WTF::URL *a4@<X3>, const WTF::URL *a5@<X4>, uint64_t a6@<X8>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WebCore::ApplicationManifestParser *v10;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::JSONImpl::Value *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  WTF::URL *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  __int128 v30;
  __int128 v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  _QWORD *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  _QWORD *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::JSONImpl::Value *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  char v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  int v62;
  unsigned __int8 *v63;
  int v64;
  unint64_t v65;
  int v66;
  BOOL v67;
  int v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  _DWORD *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  __int128 v90;
  __int128 v91;
  WTF::StringImpl *v92;
  int v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  const WTF::URL *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  _QWORD *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  _QWORD *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::JSONImpl::Value *v117;
  WTF::StringImpl *v118;
  const WTF::JSONImpl::Object *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  unsigned int v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  WTF *v153;
  void *v154;
  unsigned int v155;
  WTF *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  unsigned int v159;
  WTF::StringImpl *v160;
  WTF::JSONImpl::Value *v161;
  uint64_t v162;
  WTF *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  __int128 v172;
  __int128 v173;
  WTF::StringImpl *v174;
  WTF::StringImpl **v175;
  uint64_t v176;
  WTF::StringImpl *v177;
  int v178;
  uint64_t v179;
  WTF::JSONImpl::Value **v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  WTF::JSONImpl::ObjectBase *v191;
  unsigned int v192;
  WTF *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  uint64_t v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  __int128 v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF *v206;
  char *v207;
  int v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  WTF *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  unsigned int v230;
  unsigned int v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  WTF::StringImpl *v242;
  int v243;
  __int16 v244;
  __int16 v245;
  WTF::StringImpl *v246;
  unint64_t v247;
  int v248;
  unsigned __int8 *v249;
  int v250;
  unint64_t v251;
  int v252;
  unint64_t v253;
  int v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  _DWORD *v257;
  unsigned int *result;
  WTF::StringImpl *v259;
  int v260;
  int v261;
  unint64_t v262;
  unsigned __int16 v263;
  int v264;
  unint64_t v265;
  unsigned int v266;
  unsigned __int16 v267;
  int v268;
  unint64_t v269;
  unsigned __int16 v270;
  int v271;
  unint64_t v272;
  unsigned __int16 v273;
  int v274;
  int v275;
  unsigned int v276;
  unint64_t v277;
  int v278;
  int v279;
  unint64_t v280;
  int v281;
  int v282;
  unint64_t v283;
  int v284;
  int v285;
  unint64_t v286;
  int v287;
  int v288;
  unsigned int v289;
  unint64_t v290;
  int v291;
  int v292;
  unint64_t v293;
  int v294;
  int v295;
  unint64_t v296;
  unsigned __int8 *v297;
  int v298;
  int v299;
  unint64_t v300;
  int v301;
  int v302;
  int v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  uint64_t v306;
  unint64_t v307;
  unsigned __int16 v308;
  int v309;
  unint64_t v310;
  unsigned __int16 v311;
  int v312;
  unint64_t v313;
  unsigned __int16 v314;
  int v315;
  unint64_t v316;
  unsigned __int8 *v317;
  unsigned __int16 v318;
  int v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  uint64_t v322;
  WTF::StringImpl *v323;
  WTF::StringImpl *v324;
  uint64_t v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  uint64_t v328;
  WTF::StringImpl *v329;
  WTF::StringImpl *v330;
  uint64_t v331;
  int v332;
  unsigned int *v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int *v336;
  unsigned int v337;
  unsigned int v338;
  _BOOL4 v339;
  unsigned int *v340;
  unsigned int v341;
  unsigned int v342;
  _BOOL4 v343;
  unsigned int *v344;
  unsigned int v345;
  unsigned int v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  WTF::StringImpl *v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  WTF::StringImpl **v369;
  __int128 v370;
  uint64_t *v371;
  WTF::StringImpl *v372;
  WTF::StringImpl *v373;
  WTF::StringImpl *v374;
  WTF::StringImpl *v375;
  uint64_t v376;
  WTF::StringImpl *v377;
  uint64_t v378;
  WTF::StringImpl *v379;
  WTF::StringImpl *v380;
  WTF::StringImpl *v381;
  _BYTE v382[48];
  WTF *v383;
  uint64_t v384;
  _QWORD v385[5];
  WTF::JSONImpl::Value *v386;

  v7 = a4;
  v9 = a2;
  v10 = this;
  v12 = (WTF::StringImpl **)((char *)this + 8);
  v13 = *(WTF::StringImpl **)a4;
  if (*(_QWORD *)a4)
    *(_DWORD *)v13 += 2;
  v14 = *v12;
  *v12 = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)&v368 = v12;
  v15 = *(_OWORD *)((char *)v7 + 24);
  *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)v7 + 8);
  *((_OWORD *)v10 + 2) = v15;
  *(_QWORD *)(a6 + 32) = 0;
  v16 = (WTF::JSONImpl::Value *)(a6 + 32);
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  WTF::URL::invalidate((WTF::URL *)(a6 + 32));
  *(_BYTE *)(a6 + 72) = 0;
  *(_WORD *)(a6 + 74) = 0;
  *(_QWORD *)(a6 + 80) = 0;
  v17 = (WTF::StringImpl **)(a6 + 80);
  WTF::URL::invalidate((WTF::URL *)(a6 + 80));
  *(_QWORD *)(a6 + 120) = 0;
  *(_QWORD *)&v370 = a6 + 120;
  WTF::URL::invalidate((WTF::URL *)(a6 + 120));
  *(_QWORD *)(a6 + 160) = 0;
  v369 = (WTF::StringImpl **)(a6 + 160);
  WTF::URL::invalidate((WTF::URL *)(a6 + 160));
  *(_OWORD *)(a6 + 200) = 0u;
  v19 = a6 + 200;
  *(_OWORD *)(a6 + 232) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 216) = 0u;
  v20 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v20 += 2;
  v21 = *(WTF::StringImpl **)a6;
  *(_QWORD *)a6 = v20;
  v22 = (WTF::URL *)(a6 + 120);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v23 = *(WTF::StringImpl **)v7;
  if (*(_QWORD *)v7)
    *(_DWORD *)v23 += 2;
  v24 = *v17;
  *v17 = v23;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v18);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *(_OWORD *)((char *)v7 + 24);
  *(_OWORD *)(a6 + 88) = *(_OWORD *)((char *)v7 + 8);
  *(_OWORD *)(a6 + 104) = v25;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getValue(v9, (const WTF::String *)v382);
  v27 = *(WTF::StringImpl **)v382;
  *(_QWORD *)v382 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  v371 = (uint64_t *)v10;
  if (!v386)
  {
    v29 = *(_DWORD **)a5;
    if (*(_QWORD *)a5)
      *v29 += 2;
    v30 = *(_OWORD *)((char *)a5 + 8);
    v31 = *(_OWORD *)((char *)a5 + 24);
    goto LABEL_79;
  }
  WTF::JSONImpl::Value::asString(v386);
  if (!v381)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v32 = *(WTF::StringImpl **)v382;
    WebCore::ApplicationManifestParser::logManifestPropertyNotAString((uint64_t)v10, *(const WTF::String **)v382);
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v26);
      else
        *(_DWORD *)v32 -= 2;
    }
    goto LABEL_35;
  }
  if (!*((_DWORD *)v381 + 1))
  {
LABEL_35:
    v29 = *(_DWORD **)a5;
    if (*(_QWORD *)a5)
      *v29 += 2;
    v30 = *(_OWORD *)((char *)a5 + 8);
    v31 = *(_OWORD *)((char *)a5 + 24);
    goto LABEL_73;
  }
  MEMORY[0x19AEA52F8](v382, v368, &v381, 0);
  if ((v382[8] & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v28 = (WTF::StringImpl *)v385[0];
    WebCore::ApplicationManifestParser::logManifestPropertyInvalidURL((uint64_t)v10, (const WTF::String *)v385[0]);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v26);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = *(_DWORD **)a5;
    if (*(_QWORD *)a5)
      *v29 += 2;
    v30 = *(_OWORD *)((char *)a5 + 8);
    v31 = *(_OWORD *)((char *)a5 + 24);
    goto LABEL_70;
  }
  if ((WTF::protocolHostAndPortAreEqual() & 1) == 0)
  {
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)v382, (uint64_t *)&v380);
    WebCore::SecurityOrigin::create(a5, (uint64_t *)&v379);
    v33 = v380;
    v34 = *((unsigned int *)v380 + 8);
    if ((_DWORD)v34 == 1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    else
    {
      if ((_DWORD)v34 == -1)
        goto LABEL_866;
      v385[0] = &v377;
      v35 = (_QWORD *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v34])(v385, (char *)v380 + 8);
      if (MEMORY[0x19AEA53F4](*v35, "file", 4) && *((_BYTE *)v33 + 59))
        WTF::String::String(&v373, (uint64_t)"null", 5);
      else
        WebCore::SecurityOriginData::toString((WTF::StringImpl *)((char *)v33 + 8), &v373);
    }
    v36 = v379;
    v37 = *((unsigned int *)v379 + 8);
    v10 = (WebCore::ApplicationManifestParser *)v371;
    if ((_DWORD)v37 == 1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_52:
      v385[0] = "The start_url's origin of \"";
      v385[1] = 28;
      v377 = (WTF::StringImpl *)"\" is different from the document's origin of \"";
      v378 = 47;
      v375 = (WTF::StringImpl *)"\".";
      v376 = 3;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)v385, (uint64_t *)&v373, (uint64_t)&v377, (uint64_t *)&v372, (uint64_t)&v375, &v374);
      if (!v374)
      {
        __break(0xC471u);
        JUMPOUT(0x1952C61F4);
      }
      WebCore::ApplicationManifestParser::logDeveloperWarning(v371, v374);
      v39 = v374;
      v374 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v26);
        else
          *(_DWORD *)v39 -= 2;
      }
      v40 = v372;
      v372 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v26);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v373;
      v373 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v26);
        else
          *(_DWORD *)v41 -= 2;
      }
      v29 = *(_DWORD **)a5;
      if (*(_QWORD *)a5)
        *v29 += 2;
      v30 = *(_OWORD *)((char *)a5 + 8);
      v31 = *(_OWORD *)((char *)a5 + 24);
      v379 = 0;
      do
      {
        v42 = __ldaxr((unsigned int *)v36);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, (unsigned int *)v36));
      if (!v43)
      {
        v355 = v31;
        v366 = v30;
        atomic_store(1u, (unsigned int *)v36);
        v320 = (WTF::StringImpl *)*((_QWORD *)v36 + 6);
        *((_QWORD *)v36 + 6) = 0;
        if (v320)
        {
          if (*(_DWORD *)v320 == 2)
            WTF::StringImpl::destroy(v320, v26);
          else
            *(_DWORD *)v320 -= 2;
        }
        v321 = (WTF::StringImpl *)*((_QWORD *)v36 + 5);
        *((_QWORD *)v36 + 5) = 0;
        if (v321)
        {
          if (*(_DWORD *)v321 == 2)
            WTF::StringImpl::destroy(v321, v26);
          else
            *(_DWORD *)v321 -= 2;
        }
        v322 = *((unsigned int *)v36 + 8);
        if ((_DWORD)v322 != -1)
          ((void (*)(_QWORD *, char *))off_1E3352CC0[v322])(v385, (char *)v36 + 8);
        *((_DWORD *)v36 + 8) = -1;
        WTF::fastFree(v36, v26);
        v10 = (WebCore::ApplicationManifestParser *)v371;
        v22 = (WTF::URL *)(a6 + 120);
        v31 = v355;
        v30 = v366;
      }
      v7 = v380;
      v380 = 0;
      if (v7)
      {
        do
        {
          v44 = __ldaxr((unsigned int *)v7);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, (unsigned int *)v7));
        if (!v45)
        {
          v356 = v31;
          v367 = v30;
          atomic_store(1u, (unsigned int *)v7);
          v326 = (WTF::StringImpl *)*((_QWORD *)v7 + 6);
          *((_QWORD *)v7 + 6) = 0;
          if (v326)
          {
            if (*(_DWORD *)v326 == 2)
              WTF::StringImpl::destroy(v326, v26);
            else
              *(_DWORD *)v326 -= 2;
          }
          v327 = (WTF::StringImpl *)*((_QWORD *)v7 + 5);
          *((_QWORD *)v7 + 5) = 0;
          if (v327)
          {
            if (*(_DWORD *)v327 == 2)
              WTF::StringImpl::destroy(v327, v26);
            else
              *(_DWORD *)v327 -= 2;
          }
          v328 = *((unsigned int *)v7 + 8);
          if ((_DWORD)v328 != -1)
            ((void (*)(_QWORD *, char *))off_1E3352CC0[v328])(v385, (char *)v7 + 8);
          *((_DWORD *)v7 + 8) = -1;
          WTF::fastFree(v7, v26);
          v10 = (WebCore::ApplicationManifestParser *)v371;
          v22 = (WTF::URL *)(a6 + 120);
          v31 = v356;
          v30 = v367;
        }
      }
      goto LABEL_70;
    }
    if ((_DWORD)v37 != -1)
    {
      v385[0] = &v377;
      v38 = (_QWORD *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v37])(v385, (char *)v379 + 8);
      if (MEMORY[0x19AEA53F4](*v38, "file", 4) && *((_BYTE *)v36 + 59))
        WTF::String::String(&v372, (uint64_t)"null", 5);
      else
        WebCore::SecurityOriginData::toString((WTF::StringImpl *)((char *)v36 + 8), &v372);
      goto LABEL_52;
    }
LABEL_866:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_867:
    __break(0xC471u);
    JUMPOUT(0x1952C6014);
  }
  v29 = *(_DWORD **)v382;
  *(_QWORD *)v382 = 0;
  v30 = *(_OWORD *)&v382[8];
  v31 = *(_OWORD *)&v382[24];
  *(_DWORD *)&v382[8] &= ~1u;
LABEL_70:
  v46 = *(WTF::StringImpl **)v382;
  *(_QWORD *)v382 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      v350 = v31;
      v360 = v30;
      WTF::StringImpl::destroy(v46, v26);
      v31 = v350;
      v30 = v360;
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
LABEL_73:
  v47 = v381;
  v381 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      v349 = v31;
      v359 = v30;
      WTF::StringImpl::destroy(v47, v26);
      v31 = v349;
      v30 = v359;
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = v386;
  v386 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 1)
    {
      v348 = v31;
      v358 = v30;
      WTF::JSONImpl::Value::operator delete();
      v31 = v348;
      v30 = v358;
    }
    else
    {
      --*(_DWORD *)v48;
    }
  }
LABEL_79:
  v49 = *(WTF::StringImpl **)v22;
  *(_QWORD *)v22 = v29;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      v347 = v31;
      v357 = v30;
      WTF::StringImpl::destroy(v49, v26);
      v31 = v347;
      v30 = v357;
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  *(_OWORD *)(a6 + 128) = v30;
  *(_OWORD *)(a6 + 144) = v31;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getValue(v9, (const WTF::String *)v382);
  v51 = *(WTF::StringImpl **)v382;
  *(_QWORD *)v382 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v50);
    else
      *(_DWORD *)v51 -= 2;
  }
  if (!v385[0])
  {
    v59 = 0;
    goto LABEL_144;
  }
  WTF::JSONImpl::Value::asString((WTF::JSONImpl::Value *)v385[0]);
  v7 = v377;
  if (v377)
  {
    v53 = *((unsigned int *)v377 + 4);
    v54 = (unsigned __int8 *)*((_QWORD *)v377 + 1);
    v55 = *((unsigned int *)v377 + 1);
    v56 = v55 | (((v53 >> 2) & 1) << 32);
    if (((*((_DWORD *)v377 + 4) >> 2) & 1) == 0)
    {
      if (!(_DWORD)v55)
        goto LABEL_124;
      v57 = 0;
      v63 = (unsigned __int8 *)*((_QWORD *)v377 + 1);
      while (1)
      {
        v64 = *(unsigned __int16 *)v63;
        if ((v64 - 9) >= 5 && v64 != 32)
          break;
        ++v57;
        v63 += 2;
        if (v55 == v57)
          goto LABEL_128;
      }
      if ((_DWORD)v55 == 1)
      {
        if (!(_DWORD)v57)
          goto LABEL_124;
        LODWORD(v65) = 0;
      }
      else
      {
        v65 = (v55 - 1);
        do
        {
          if (v65 >= v55)
            goto LABEL_769;
          v66 = *(unsigned __int16 *)&v54[2 * v65];
          if ((v66 - 9) >= 5 && v66 != 32)
            break;
          --v65;
        }
        while ((_DWORD)v65);
        if (!(_DWORD)v57 && (_DWORD)v65 == (_DWORD)v55 - 1)
          goto LABEL_124;
      }
      v56 = (v65 - v57 + 1);
      v57 = v55 - v57;
      v54 = v63;
      if (v57 < v56)
        goto LABEL_769;
      goto LABEL_124;
    }
    if (!(_DWORD)v55)
      goto LABEL_124;
    v57 = 0;
    while (1)
    {
      v58 = v54[v57];
      if ((v58 - 9) >= 5 && v58 != 32)
        break;
      if (v55 == ++v57)
        goto LABEL_128;
    }
    if ((_DWORD)v55 == 1)
    {
      if (!(_DWORD)v57)
        goto LABEL_124;
      LODWORD(v61) = 0;
    }
    else
    {
      v61 = (v55 - 1);
      do
      {
        if (v61 >= v55)
          goto LABEL_769;
        v62 = v54[v61];
        if ((v62 - 9) >= 5 && v62 != 32)
          break;
        --v61;
      }
      while ((_DWORD)v61);
      if (!(_DWORD)v57 && (_DWORD)v61 == (_DWORD)v55 - 1)
      {
LABEL_124:
        v57 = v56;
        if ((v56 & 0x100000000) != 0)
        {
          switch((_DWORD)v56)
          {
            case 0:
              goto LABEL_128;
            case 7:
              v275 = *v54;
              if ((v275 & 0xFFFFFFDF) != 0x42)
                goto LABEL_128;
              if ((v54[1] & 0xDF) == 0x52
                && (v54[2] & 0xDF) == 0x4F
                && (v54[3] & 0xDF) == 0x57
                && (v54[4] & 0xDF) == 0x53
                && (v54[5] & 0xDF) == 0x45
                && (v54[6] & 0xDF) == 0x52)
              {
                v276 = 0;
                goto LABEL_662;
              }
              if (v57 != 10)
                goto LABEL_128;
              break;
            case 0xA:
              v275 = *v54;
              break;
            default:
              goto LABEL_128;
          }
          v289 = v275 & 0xFFFFFFDF;
          if (v289 == 70)
          {
            if ((v54[1] & 0xDF) == 0x55
              && (v54[2] & 0xDF) == 0x4C
              && (v54[3] & 0xDF) == 0x4C
              && (v54[4] & 0xDF) == 0x53
              && (v54[5] & 0xDF) == 0x43
              && (v54[6] & 0xDF) == 0x52
              && (v54[7] & 0xDF) == 0x45
              && (v54[8] & 0xDF) == 0x45)
            {
              v261 = v54[9];
              goto LABEL_660;
            }
          }
          else if (v289 == 77)
          {
            if ((v54[1] & 0xDF) == 0x49
              && (v54[2] & 0xDF) == 0x4E
              && (v54[3] & 0xDF) == 0x49
              && (v54[4] & 0xDF) == 0x4D
              && (v54[5] & 0xDF) == 0x41
              && (v54[6] & 0xDF) == 0x4C
              && (v54[7] & 0xDF) == 0xD
              && (v54[8] & 0xDF) == 0x55)
            {
              v303 = v54[9];
              goto LABEL_712;
            }
          }
          else if (v289 == 83
                 && (v54[1] & 0xDF) == 0x54
                 && (v54[2] & 0xDF) == 0x41
                 && (v54[3] & 0xDF) == 0x4E
                 && (v54[4] & 0xDF) == 0x44
                 && (v54[5] & 0xDF) == 0x41
                 && (v54[6] & 0xDF) == 0x4C
                 && (v54[7] & 0xDF) == 0x4F
                 && (v54[8] & 0xDF) == 0x4E)
          {
            v332 = v54[9];
            goto LABEL_828;
          }
        }
        else if ((_DWORD)v56)
        {
          if ((_DWORD)v56 == 7)
          {
            LODWORD(v56) = *(unsigned __int16 *)v54;
            if ((v56 & 0xFFFFFFDF) == 0x42)
            {
              if ((*((_WORD *)v54 + 1) & 0xFFDF) != 0x52
                || (*((_WORD *)v54 + 2) & 0xFFDF) != 0x4F
                || (*((_WORD *)v54 + 3) & 0xFFDF) != 0x57
                || (*((_WORD *)v54 + 4) & 0xFFDF) != 0x53
                || (*((_WORD *)v54 + 5) & 0xFFDF) != 0x45
                || (*((_WORD *)v54 + 6) & 0xFFDF) != 0x52)
              {
                goto LABEL_770;
              }
              v276 = 0;
              v10 = (WebCore::ApplicationManifestParser *)v371;
              v22 = (WTF::URL *)(a6 + 120);
              goto LABEL_662;
            }
          }
          else if ((_DWORD)v56 == 10)
          {
            LODWORD(v56) = *(unsigned __int16 *)v54;
            goto LABEL_567;
          }
        }
LABEL_128:
        *(_DWORD *)v7 += 2;
        if ((v55 & 0x80000000) != 0 || (v67 = __OFADD__((_DWORD)v55, 30), v68 = v55 + 30, v67) || __OFADD__(v68, 1))
        {
          *(_QWORD *)v382 = 0;
        }
        else
        {
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v68 + 1), (v53 >> 2) & 1, (int8x16_t *)"\"", 1u, (uint64_t)v7, (int8x16_t *)"\" is not a valid display mode.", 0x1Eu, v382);
          if (*(_QWORD *)v382)
          {
            WebCore::ApplicationManifestParser::logDeveloperWarning((uint64_t *)v10, *(const WTF::String **)v382);
            v69 = *(WTF::StringImpl **)v382;
            *(_QWORD *)v382 = 0;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
                WTF::StringImpl::destroy(v69, v52);
              else
                *(_DWORD *)v69 -= 2;
            }
            if (*(_DWORD *)v7 != 2)
            {
              *(_DWORD *)v7 -= 2;
              goto LABEL_137;
            }
            v115 = v7;
LABEL_235:
            WTF::StringImpl::destroy(v115, v52);
            goto LABEL_137;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1952C61E0);
      }
    }
    v56 = (v61 - v57 + 1);
    if (v55 - v57 < v56)
      goto LABEL_769;
    v54 += v57;
    v56 |= 0x100000000uLL;
    goto LABEL_124;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v60 = *(WTF::StringImpl **)v382;
  WebCore::ApplicationManifestParser::logManifestPropertyNotAString((uint64_t)v10, *(const WTF::String **)v382);
  if (!v60)
  {
LABEL_137:
    v59 = 0;
    goto LABEL_138;
  }
  if (*(_DWORD *)v60 == 2)
  {
    v115 = v60;
    goto LABEL_235;
  }
  v59 = 0;
  *(_DWORD *)v60 -= 2;
  while (1)
  {
LABEL_138:
    v70 = v377;
    v377 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v52);
      else
        *(_DWORD *)v70 -= 2;
    }
    v71 = (_DWORD *)v385[0];
    v385[0] = 0;
    if (v71)
    {
      if (*v71 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v71;
    }
LABEL_144:
    *(_BYTE *)(a6 + 73) = v59;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ApplicationManifestParser::parseGenericString((WebCore::ApplicationManifestParser *)v385, v10, v9, (const WTF::String *)v382);
    v73 = *(WTF::StringImpl **)v382;
    *(_QWORD *)v382 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
        WTF::StringImpl::destroy(v73, v72);
      else
        *(_DWORD *)v73 -= 2;
    }
    v74 = v385[0];
    v385[0] = 0;
    v75 = *(WTF::StringImpl **)(a6 + 8);
    *(_QWORD *)(a6 + 8) = v74;
    if (v75)
    {
      v76 = *(_DWORD *)v75 - 2;
      if (*(_DWORD *)v75 != 2)
        goto LABEL_149;
      WTF::StringImpl::destroy(v75, v72);
      v75 = (WTF::StringImpl *)v385[0];
      v385[0] = 0;
      if (v75)
      {
        v76 = *(_DWORD *)v75 - 2;
        if (*(_DWORD *)v75 != 2)
        {
LABEL_149:
          *(_DWORD *)v75 = v76;
          goto LABEL_150;
        }
        WTF::StringImpl::destroy(v75, v98);
      }
    }
LABEL_150:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ApplicationManifestParser::parseGenericString((WebCore::ApplicationManifestParser *)v385, v10, v9, (const WTF::String *)v382);
    v78 = *(WTF::StringImpl **)v382;
    *(_QWORD *)v382 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v77);
      else
        *(_DWORD *)v78 -= 2;
    }
    v79 = v385[0];
    v385[0] = 0;
    v80 = *(WTF::StringImpl **)(a6 + 24);
    *(_QWORD *)(a6 + 24) = v79;
    if (!v80)
      goto LABEL_156;
    v81 = *(_DWORD *)v80 - 2;
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::destroy(v80, v77);
      v80 = (WTF::StringImpl *)v385[0];
      v385[0] = 0;
      if (!v80)
        goto LABEL_156;
      v81 = *(_DWORD *)v80 - 2;
      if (*(_DWORD *)v80 == 2)
      {
        WTF::StringImpl::destroy(v80, v99);
        goto LABEL_156;
      }
    }
    *(_DWORD *)v80 = v81;
LABEL_156:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ApplicationManifestParser::parseGenericString((WebCore::ApplicationManifestParser *)v385, v10, v9, (const WTF::String *)v382);
    v83 = *(WTF::StringImpl **)v382;
    *(_QWORD *)v382 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
        WTF::StringImpl::destroy(v83, v82);
      else
        *(_DWORD *)v83 -= 2;
    }
    v84 = v385[0];
    v385[0] = 0;
    v85 = *(WTF::StringImpl **)(a6 + 16);
    *(_QWORD *)(a6 + 16) = v84;
    if (v85)
    {
      v86 = *(_DWORD *)v85 - 2;
      if (*(_DWORD *)v85 != 2)
        goto LABEL_161;
      WTF::StringImpl::destroy(v85, v82);
      v85 = (WTF::StringImpl *)v385[0];
      v385[0] = 0;
      if (v85)
      {
        v86 = *(_DWORD *)v85 - 2;
        if (*(_DWORD *)v85 != 2)
        {
LABEL_161:
          *(_DWORD *)v85 = v86;
          goto LABEL_162;
        }
        WTF::StringImpl::destroy(v85, v100);
      }
    }
LABEL_162:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::ObjectBase::getValue(v9, (const WTF::String *)v382);
    v88 = *(WTF::StringImpl **)v382;
    *(_QWORD *)v382 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2)
        WTF::StringImpl::destroy(v88, v87);
      else
        *(_DWORD *)v88 -= 2;
    }
    if (!v386)
      goto LABEL_250;
    WTF::JSONImpl::Value::asString(v386);
    if (!v381)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v95 = *(WTF::StringImpl **)v382;
      WebCore::ApplicationManifestParser::logManifestPropertyNotAString((uint64_t)v10, *(const WTF::String **)v382);
      if (v95)
      {
        if (*(_DWORD *)v95 != 2)
        {
          v93 = 0;
          v94 = 0;
          *(_DWORD *)v95 -= 2;
          goto LABEL_238;
        }
        WTF::StringImpl::destroy(v95, v89);
      }
LABEL_237:
      v93 = 0;
      v94 = 0;
      goto LABEL_238;
    }
    if (!*((_DWORD *)v381 + 1))
      goto LABEL_237;
    MEMORY[0x19AEA52F8](v382, v368, &v381, 0);
    if ((v382[8] & 1) != 0)
    {
      if ((WTF::protocolHostAndPortAreEqual() & 1) != 0)
      {
        if (!*(_QWORD *)v382
          || !*(_DWORD *)(*(_QWORD *)v382 + 4)
          || (*(_BYTE *)(a6 + 128) & 1) != 0
          && (WTF::URL::path((WTF::URL *)v382),
              a5 = v96,
              v385[0] = WTF::URL::path(v22),
              v385[1] = v97,
              WTF::protocolHostAndPortAreEqual())
          && WTF::StringView::startsWith())
        {
          WTF::URL::removeQueryAndFragmentIdentifier((WTF::URL *)v382);
          v94 = *(_QWORD *)v382;
          *(_QWORD *)v382 = 0;
          v90 = *(_OWORD *)&v382[8];
          v91 = *(_OWORD *)&v382[24];
          *(_DWORD *)&v382[8] &= ~1u;
          v93 = 1;
          goto LABEL_220;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v92 = (WTF::StringImpl *)v385[0];
        WebCore::ApplicationManifestParser::logDeveloperWarning((uint64_t *)v10, (const WTF::String *)v385[0]);
        if (v92)
        {
LABEL_170:
          if (*(_DWORD *)v92 != 2)
          {
            v93 = 0;
            v94 = 0;
            *(_DWORD *)v92 -= 2;
            goto LABEL_220;
          }
          WTF::StringImpl::destroy(v92, v89);
        }
      }
      else
      {
        WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)v382, (uint64_t *)&v380);
        WebCore::SecurityOrigin::create(a5, (uint64_t *)&v379);
        v101 = v380;
        v102 = *((unsigned int *)v380 + 8);
        if ((_DWORD)v102 == 1)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
        }
        else
        {
          if ((_DWORD)v102 == -1)
            goto LABEL_866;
          v385[0] = &v377;
          v103 = (_QWORD *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v102])(v385, (char *)v380 + 8);
          if (MEMORY[0x19AEA53F4](*v103, "file", 4) && *((_BYTE *)v101 + 59))
            WTF::String::String(&v373, (uint64_t)"null", 5);
          else
            WebCore::SecurityOriginData::toString((WTF::StringImpl *)((char *)v101 + 8), &v373);
        }
        v104 = v379;
        v105 = *((unsigned int *)v379 + 8);
        if ((_DWORD)v105 == 1)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
        }
        else
        {
          if ((_DWORD)v105 == -1)
            goto LABEL_866;
          v385[0] = &v377;
          v106 = (_QWORD *)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v105])(v385, (char *)v379 + 8);
          if (MEMORY[0x19AEA53F4](*v106, "file", 4) && *((_BYTE *)v104 + 59))
            WTF::String::String(&v372, (uint64_t)"null", 5);
          else
            WebCore::SecurityOriginData::toString((WTF::StringImpl *)((char *)v104 + 8), &v372);
        }
        v385[0] = "The scope's origin of \"";
        v385[1] = 24;
        v377 = (WTF::StringImpl *)"\" is different from the document's origin of \"";
        v378 = 47;
        v375 = (WTF::StringImpl *)"\".";
        v376 = 3;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)v385, (uint64_t *)&v373, (uint64_t)&v377, (uint64_t *)&v372, (uint64_t)&v375, &v374);
        if (!v374)
        {
          __break(0xC471u);
          JUMPOUT(0x1952C61FCLL);
        }
        WebCore::ApplicationManifestParser::logDeveloperWarning((uint64_t *)v10, v374);
        v107 = v374;
        v374 = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
            WTF::StringImpl::destroy(v107, v89);
          else
            *(_DWORD *)v107 -= 2;
        }
        v108 = v372;
        v372 = 0;
        if (v108)
        {
          if (*(_DWORD *)v108 == 2)
            WTF::StringImpl::destroy(v108, v89);
          else
            *(_DWORD *)v108 -= 2;
        }
        v109 = v373;
        v373 = 0;
        if (v109)
        {
          if (*(_DWORD *)v109 == 2)
            WTF::StringImpl::destroy(v109, v89);
          else
            *(_DWORD *)v109 -= 2;
        }
        v379 = 0;
        do
        {
          v110 = __ldaxr((unsigned int *)v104);
          v111 = v110 - 1;
        }
        while (__stlxr(v111, (unsigned int *)v104));
        if (!v111)
        {
          atomic_store(1u, (unsigned int *)v104);
          v323 = (WTF::StringImpl *)*((_QWORD *)v104 + 6);
          *((_QWORD *)v104 + 6) = 0;
          if (v323)
          {
            if (*(_DWORD *)v323 == 2)
              WTF::StringImpl::destroy(v323, v89);
            else
              *(_DWORD *)v323 -= 2;
          }
          v324 = (WTF::StringImpl *)*((_QWORD *)v104 + 5);
          *((_QWORD *)v104 + 5) = 0;
          if (v324)
          {
            if (*(_DWORD *)v324 == 2)
              WTF::StringImpl::destroy(v324, v89);
            else
              *(_DWORD *)v324 -= 2;
          }
          v325 = *((unsigned int *)v104 + 8);
          if ((_DWORD)v325 != -1)
            ((void (*)(_QWORD *, char *))off_1E3352CC0[v325])(v385, (char *)v104 + 8);
          *((_DWORD *)v104 + 8) = -1;
          WTF::fastFree(v104, v89);
          v22 = (WTF::URL *)v370;
        }
        a5 = v380;
        v380 = 0;
        if (a5)
        {
          do
          {
            v112 = __ldaxr((unsigned int *)a5);
            v113 = v112 - 1;
          }
          while (__stlxr(v113, (unsigned int *)a5));
          if (!v113)
          {
            atomic_store(1u, (unsigned int *)a5);
            v329 = (WTF::StringImpl *)*((_QWORD *)a5 + 6);
            *((_QWORD *)a5 + 6) = 0;
            if (v329)
            {
              if (*(_DWORD *)v329 == 2)
                WTF::StringImpl::destroy(v329, v89);
              else
                *(_DWORD *)v329 -= 2;
            }
            v330 = (WTF::StringImpl *)*((_QWORD *)a5 + 5);
            *((_QWORD *)a5 + 5) = 0;
            if (v330)
            {
              if (*(_DWORD *)v330 == 2)
                WTF::StringImpl::destroy(v330, v89);
              else
                *(_DWORD *)v330 -= 2;
            }
            v331 = *((unsigned int *)a5 + 8);
            if ((_DWORD)v331 != -1)
              ((void (*)(_QWORD *, char *))off_1E3352CC0[v331])(v385, (char *)a5 + 8);
            *((_DWORD *)a5 + 8) = -1;
            WTF::fastFree(a5, v89);
            v22 = (WTF::URL *)v370;
          }
        }
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v92 = (WTF::StringImpl *)v385[0];
      WebCore::ApplicationManifestParser::logManifestPropertyInvalidURL((uint64_t)v10, (const WTF::String *)v385[0]);
      if (v92)
        goto LABEL_170;
    }
    v93 = 0;
    v94 = 0;
LABEL_220:
    v114 = *(WTF::StringImpl **)v382;
    *(_QWORD *)v382 = 0;
    if (v114)
    {
      if (*(_DWORD *)v114 == 2)
      {
        v351 = v91;
        v361 = v90;
        WTF::StringImpl::destroy(v114, v89);
        v91 = v351;
        v90 = v361;
      }
      else
      {
        *(_DWORD *)v114 -= 2;
      }
    }
LABEL_238:
    v116 = v381;
    v381 = 0;
    if (v116)
    {
      if (*(_DWORD *)v116 == 2)
      {
        v353 = v91;
        v364 = v90;
        WTF::StringImpl::destroy(v116, v89);
        v91 = v353;
        v90 = v364;
      }
      else
      {
        *(_DWORD *)v116 -= 2;
      }
    }
    v117 = v386;
    v386 = 0;
    if (!v117)
      goto LABEL_244;
    if (*(_DWORD *)v117 != 1)
    {
      --*(_DWORD *)v117;
LABEL_244:
      if (v93)
        goto LABEL_245;
      goto LABEL_250;
    }
    v352 = v91;
    v362 = v90;
    WTF::JSONImpl::Value::operator delete();
    v91 = v352;
    v90 = v362;
    if (v93)
    {
LABEL_245:
      v118 = *(WTF::StringImpl **)v16;
      *(_QWORD *)v16 = v94;
      v119 = (const WTF::JSONImpl::Object *)v371;
      if (v118)
      {
        if (*(_DWORD *)v118 == 2)
        {
          v354 = v91;
          v365 = v90;
          WTF::StringImpl::destroy(v118, v89);
          v91 = v354;
          v90 = v365;
        }
        else
        {
          *(_DWORD *)v118 -= 2;
        }
      }
      *(_OWORD *)(a6 + 40) = v90;
      *(_OWORD *)(a6 + 56) = v91;
      goto LABEL_260;
    }
LABEL_250:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v385[0] = *(_QWORD *)v382;
    MEMORY[0x19AEA52F8](v382, v22, v385, 0);
    v121 = *(_QWORD *)v382;
    *(_QWORD *)v382 = 0;
    v122 = *(WTF::StringImpl **)v16;
    *(_QWORD *)v16 = v121;
    if (v122)
    {
      if (*(_DWORD *)v122 == 2)
      {
        WTF::StringImpl::destroy(v122, v120);
        v123 = *(WTF::StringImpl **)v382;
      }
      else
      {
        v123 = 0;
        *(_DWORD *)v122 -= 2;
      }
    }
    else
    {
      v123 = 0;
    }
    v119 = (const WTF::JSONImpl::Object *)v371;
    v124 = *(_DWORD *)&v382[8];
    *(_OWORD *)(a6 + 40) = *(_OWORD *)&v382[8];
    *(_DWORD *)&v382[8] = v124 & 0xFFFFFFFE;
    *(_OWORD *)(a6 + 56) = *(_OWORD *)&v382[24];
    *(_QWORD *)v382 = 0;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
        WTF::StringImpl::destroy(v123, v120);
      else
        *(_DWORD *)v123 -= 2;
    }
    v125 = (WTF::StringImpl *)v385[0];
    v385[0] = 0;
    if (v125)
    {
      if (*(_DWORD *)v125 == 2)
        WTF::StringImpl::destroy(v125, v120);
      else
        *(_DWORD *)v125 -= 2;
    }
    *(_BYTE *)(a6 + 72) = 1;
LABEL_260:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v375 = *(WTF::StringImpl **)v382;
    WebCore::ApplicationManifestParser::parseGenericString((WebCore::ApplicationManifestParser *)v382, v119, v9, (const WTF::String *)&v375);
    WebCore::CSSParser::parseColorWithoutContext((unsigned int **)v382, 0, (uint64_t *)&v377, v126, v127, v128, v129, v130, v131);
    v133 = *(WTF::StringImpl **)v382;
    *(_QWORD *)v382 = 0;
    if (v133)
    {
      if (*(_DWORD *)v133 == 2)
        WTF::StringImpl::destroy(v133, v132);
      else
        *(_DWORD *)v133 -= 2;
    }
    v134 = *(WTF::StringImpl **)v19;
    if ((*(_QWORD *)v19 & 0x8000000000000) != 0)
    {
      if (((unint64_t)v377 & 0x8000000000000) == 0)
        goto LABEL_266;
      *(_OWORD *)v382 = *(_OWORD *)(((unint64_t)v134 & 0xFFFFFFFFFFFFLL) + 4);
      *(_OWORD *)v385 = *(_OWORD *)(((unint64_t)v377 & 0xFFFFFFFFFFFFLL) + 4);
      v339 = WebCore::operator==<float,4ul>((float *)v382, (float *)v385);
      v134 = *(WTF::StringImpl **)v19;
      if (!v339 || (unint64_t)v134 >> 56 != (unint64_t)v377 >> 56)
      {
        v119 = (const WTF::JSONImpl::Object *)v371;
        v22 = (WTF::URL *)v370;
LABEL_266:
        if (((unint64_t)v134 & 0x8000000000000) != 0)
        {
          v333 = (unsigned int *)((unint64_t)v134 & 0xFFFFFFFFFFFFLL);
          do
          {
            v334 = __ldaxr(v333);
            v335 = v334 - 1;
          }
          while (__stlxr(v335, v333));
          v119 = (const WTF::JSONImpl::Object *)v371;
          v22 = (WTF::URL *)v370;
          if (!v335)
          {
            atomic_store(1u, v333);
            WTF::fastFree((WTF *)v333, v132);
          }
        }
        *(_QWORD *)v19 = v377;
        v377 = 0;
        goto LABEL_268;
      }
      v119 = (const WTF::JSONImpl::Object *)v371;
      v22 = (WTF::URL *)v370;
      if (BYTE6(v134) != BYTE6(v377))
        goto LABEL_266;
      v134 = v377;
    }
    else if (v134 != v377 || ((unint64_t)v377 & 0x8000000000000) != 0)
    {
      goto LABEL_266;
    }
    if (((unint64_t)v134 & 0x8000000000000) != 0)
    {
      v340 = (unsigned int *)((unint64_t)v134 & 0xFFFFFFFFFFFFLL);
      do
      {
        v341 = __ldaxr(v340);
        v342 = v341 - 1;
      }
      while (__stlxr(v342, v340));
      v119 = (const WTF::JSONImpl::Object *)v371;
      v22 = (WTF::URL *)v370;
      if (!v342)
      {
        atomic_store(1u, v340);
        WTF::fastFree((WTF *)v340, v132);
      }
    }
LABEL_268:
    v135 = v375;
    v375 = 0;
    if (v135)
    {
      if (*(_DWORD *)v135 == 2)
        WTF::StringImpl::destroy(v135, v132);
      else
        *(_DWORD *)v135 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v375 = *(WTF::StringImpl **)v382;
    WebCore::ApplicationManifestParser::parseGenericString((WebCore::ApplicationManifestParser *)v382, v119, v9, (const WTF::String *)&v375);
    WebCore::CSSParser::parseColorWithoutContext((unsigned int **)v382, 0, (uint64_t *)&v377, v136, v137, v138, v139, v140, v141);
    v143 = *(WTF::StringImpl **)v382;
    *(_QWORD *)v382 = 0;
    if (v143)
    {
      if (*(_DWORD *)v143 == 2)
        WTF::StringImpl::destroy(v143, v142);
      else
        *(_DWORD *)v143 -= 2;
    }
    v144 = *(WTF::StringImpl **)(a6 + 208);
    if (((unint64_t)v144 & 0x8000000000000) != 0)
    {
      if (((unint64_t)v377 & 0x8000000000000) == 0)
        goto LABEL_277;
      *(_OWORD *)v382 = *(_OWORD *)(((unint64_t)v144 & 0xFFFFFFFFFFFFLL) + 4);
      *(_OWORD *)v385 = *(_OWORD *)(((unint64_t)v377 & 0xFFFFFFFFFFFFLL) + 4);
      v343 = WebCore::operator==<float,4ul>((float *)v382, (float *)v385);
      v144 = *(WTF::StringImpl **)(a6 + 208);
      if (!v343 || (unint64_t)v144 >> 56 != (unint64_t)v377 >> 56)
      {
        v119 = (const WTF::JSONImpl::Object *)v371;
        v22 = (WTF::URL *)v370;
LABEL_277:
        if (((unint64_t)v144 & 0x8000000000000) != 0)
        {
          v336 = (unsigned int *)((unint64_t)v144 & 0xFFFFFFFFFFFFLL);
          do
          {
            v337 = __ldaxr(v336);
            v338 = v337 - 1;
          }
          while (__stlxr(v338, v336));
          v119 = (const WTF::JSONImpl::Object *)v371;
          v22 = (WTF::URL *)v370;
          if (!v338)
          {
            atomic_store(1u, v336);
            WTF::fastFree((WTF *)v336, v142);
          }
        }
        *(_QWORD *)(a6 + 208) = v377;
        v377 = 0;
        goto LABEL_279;
      }
      v119 = (const WTF::JSONImpl::Object *)v371;
      v22 = (WTF::URL *)v370;
      if (BYTE6(v144) != BYTE6(v377))
        goto LABEL_277;
      v144 = v377;
    }
    else if (v144 != v377 || ((unint64_t)v377 & 0x8000000000000) != 0)
    {
      goto LABEL_277;
    }
    if (((unint64_t)v144 & 0x8000000000000) != 0)
    {
      v344 = (unsigned int *)((unint64_t)v144 & 0xFFFFFFFFFFFFLL);
      do
      {
        v345 = __ldaxr(v344);
        v346 = v345 - 1;
      }
      while (__stlxr(v346, v344));
      v119 = (const WTF::JSONImpl::Object *)v371;
      v22 = (WTF::URL *)v370;
      if (!v346)
      {
        atomic_store(1u, v344);
        WTF::fastFree((WTF *)v344, v142);
      }
    }
LABEL_279:
    v145 = v375;
    v375 = 0;
    if (v145)
    {
      if (*(_DWORD *)v145 == 2)
        WTF::StringImpl::destroy(v145, v142);
      else
        *(_DWORD *)v145 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::ObjectBase::getValue(v9, (const WTF::String *)v382);
    v147 = *(WTF::StringImpl **)v382;
    *(_QWORD *)v382 = 0;
    if (v147)
    {
      if (*(_DWORD *)v147 == 2)
        WTF::StringImpl::destroy(v147, v146);
      else
        *(_DWORD *)v147 -= 2;
    }
    *(_QWORD *)v382 = 0;
    *(_QWORD *)&v382[8] = 0;
    v148 = v377;
    if (v377)
    {
      v149 = *((_DWORD *)v377 + 1);
      if (v149 >= 6)
      {
        if (v149 != 6)
          goto LABEL_867;
        v178 = (*(_DWORD *)v377)++;
        v179 = *((unsigned int *)v148 + 7);
        if ((_DWORD)v179)
        {
          v180 = (WTF::JSONImpl::Value **)*((_QWORD *)v148 + 2);
          v181 = 8 * v179;
          do
          {
            WTF::JSONImpl::Value::asString(*v180);
            v182 = v385[0];
            if (v385[0])
            {
              LODWORD(v183) = *(_DWORD *)&v382[12];
              if (*(_DWORD *)&v382[12] == *(_DWORD *)&v382[8])
              {
                v185 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v382, *(unsigned int *)&v382[12] + 1, (unint64_t)v385);
                v183 = *(unsigned int *)&v382[12];
                v186 = *(_QWORD *)v382;
                v187 = *v185;
                *v185 = 0;
                *(_QWORD *)(v186 + 8 * v183) = v187;
              }
              else
              {
                v385[0] = 0;
                *(_QWORD *)(*(_QWORD *)v382 + 8 * *(unsigned int *)&v382[12]) = v182;
              }
              *(_DWORD *)&v382[12] = v183 + 1;
              v184 = (WTF::StringImpl *)v385[0];
              v385[0] = 0;
              if (v184)
              {
                if (*(_DWORD *)v184 == 2)
                  WTF::StringImpl::destroy(v184, v146);
                else
                  *(_DWORD *)v184 -= 2;
              }
            }
            ++v180;
            v181 -= 8;
          }
          while (v181);
          v178 = *(_DWORD *)v148 - 1;
        }
        if (v178)
          *(_DWORD *)v148 = v178;
        else
          WTF::JSONImpl::Value::operator delete();
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v150 = (WTF::StringImpl *)v385[0];
        WebCore::ApplicationManifestParser::logDeveloperWarning((uint64_t *)v119, (const WTF::String *)v385[0]);
        if (v150)
        {
          if (*(_DWORD *)v150 == 2)
            WTF::StringImpl::destroy(v150, v146);
          else
            *(_DWORD *)v150 -= 2;
        }
      }
      v151 = v377;
      v377 = 0;
      if (v151)
      {
        if (*(_DWORD *)v151 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v151;
      }
    }
    v152 = *(unsigned int *)(a6 + 228);
    if ((_DWORD)v152)
    {
      v175 = *(WTF::StringImpl ***)(a6 + 216);
      v176 = 8 * v152;
      do
      {
        v177 = *v175;
        *v175 = 0;
        if (v177)
        {
          if (*(_DWORD *)v177 == 2)
            WTF::StringImpl::destroy(v177, v146);
          else
            *(_DWORD *)v177 -= 2;
        }
        ++v175;
        v176 -= 8;
      }
      while (v176);
    }
    v153 = *(WTF **)(a6 + 216);
    if (v153)
    {
      *(_QWORD *)(a6 + 216) = 0;
      *(_DWORD *)(a6 + 224) = 0;
      WTF::fastFree(v153, v146);
    }
    *(_QWORD *)(a6 + 216) = *(_QWORD *)v382;
    *(_QWORD *)(a6 + 224) = *(_QWORD *)&v382[8];
    WebCore::ApplicationManifestParser::parseIcons((WebCore::ApplicationManifestParser *)v382, v119, v9);
    v155 = *(_DWORD *)(a6 + 244);
    if (v155)
      WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct(*(WTF::StringImpl **)(a6 + 232), (WTF::StringImpl *)(*(_QWORD *)(a6 + 232) + 72 * v155));
    v156 = *(WTF **)(a6 + 232);
    if (v156)
    {
      *(_QWORD *)(a6 + 232) = 0;
      *(_DWORD *)(a6 + 240) = 0;
      WTF::fastFree(v156, v154);
    }
    *(_QWORD *)(a6 + 232) = *(_QWORD *)v382;
    *(_QWORD *)(a6 + 240) = *(_QWORD *)&v382[8];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::ObjectBase::getValue(v9, (const WTF::String *)v382);
    v158 = *(WTF::StringImpl **)v382;
    *(_QWORD *)v382 = 0;
    if (v158)
    {
      if (*(_DWORD *)v158 == 2)
        WTF::StringImpl::destroy(v158, v157);
      else
        *(_DWORD *)v158 -= 2;
    }
    v375 = 0;
    v376 = 0;
    v16 = v386;
    if (!v386)
    {
      v19 = 0;
      goto LABEL_312;
    }
    v159 = *((_DWORD *)v386 + 1);
    if (v159 >= 6)
    {
      if (v159 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1952C6034);
      }
      v188 = (*(_DWORD *)v386)++;
      v189 = *((unsigned int *)v16 + 7);
      if ((_DWORD)v189)
      {
        v363 = 0;
        v19 = 0;
        v7 = (WTF::StringImpl *)*((_QWORD *)v16 + 2);
        a5 = (const WTF::URL *)&v382[8];
        v190 = 8 * v189;
        do
        {
          *(_QWORD *)v382 = 0;
          *(_QWORD *)&v382[8] = 0;
          WTF::URL::invalidate((WTF::URL *)&v382[8]);
          v383 = 0;
          v384 = 0;
          v191 = *(WTF::JSONImpl::ObjectBase **)v7;
          v192 = *(_DWORD *)(*(_QWORD *)v7 + 4);
          if (v192 >= 5)
          {
            if (v192 == 5)
            {
              ++*(_DWORD *)v191;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v377 = (WTF::StringImpl *)v385[0];
              WTF::JSONImpl::ObjectBase::getValue(v191, (const WTF::String *)&v377);
              v196 = v377;
              v377 = 0;
              if (v196)
              {
                if (*(_DWORD *)v196 == 2)
                  WTF::StringImpl::destroy(v196, v157);
                else
                  *(_DWORD *)v196 -= 2;
              }
              if (v381)
              {
                WTF::JSONImpl::Value::asString(v381);
                if (v380)
                {
                  MEMORY[0x19AEA52F8](v385, v368, &v380, 0);
                  v197 = v385[0];
                  if (v385[0])
                  {
                    if (*(_DWORD *)(v385[0] + 4))
                    {
                      if ((v385[1] & 1) != 0)
                      {
                        v385[0] = 0;
                        v200 = *(WTF::StringImpl **)&v382[8];
                        *(_QWORD *)&v382[8] = v197;
                        if (v200)
                        {
                          if (*(_DWORD *)v200 == 2)
                            WTF::StringImpl::destroy(v200, v157);
                          else
                            *(_DWORD *)v200 -= 2;
                        }
                        v201 = *(_OWORD *)&v385[1];
                        LODWORD(v385[1]) &= ~1u;
                        *(_OWORD *)&v382[16] = v201;
                        *(_OWORD *)&v382[32] = *(_OWORD *)&v385[3];
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v379 = v377;
                        WebCore::ApplicationManifestParser::parseGenericString((WebCore::ApplicationManifestParser *)&v377, (const WTF::JSONImpl::Object *)v371, v191, (const WTF::String *)&v379);
                        v203 = v377;
                        v377 = 0;
                        v204 = *(WTF::StringImpl **)v382;
                        *(_QWORD *)v382 = v203;
                        if (v204)
                        {
                          if (*(_DWORD *)v204 == 2)
                          {
                            WTF::StringImpl::destroy(v204, v202);
                            v228 = v377;
                            v377 = 0;
                            if (v228)
                            {
                              if (*(_DWORD *)v228 == 2)
                                WTF::StringImpl::destroy(v228, v202);
                              else
                                *(_DWORD *)v228 -= 2;
                            }
                          }
                          else
                          {
                            *(_DWORD *)v204 -= 2;
                            v377 = 0;
                          }
                        }
                        v205 = v379;
                        v379 = 0;
                        if (v205)
                        {
                          if (*(_DWORD *)v205 == 2)
                            WTF::StringImpl::destroy(v205, v202);
                          else
                            *(_DWORD *)v205 -= 2;
                        }
                        WebCore::ApplicationManifestParser::parseIcons((WebCore::ApplicationManifestParser *)&v377, (const WTF::JSONImpl::Object *)v371, v191);
                        if (HIDWORD(v384))
                          WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct(v383, (WTF *)((char *)v383 + 72 * HIDWORD(v384)));
                        v206 = v383;
                        if (v383)
                        {
                          v383 = 0;
                          LODWORD(v384) = 0;
                          WTF::fastFree(v206, v157);
                        }
                        v383 = v377;
                        v384 = v378;
                        if ((_DWORD)v19 == (_DWORD)v376)
                        {
                          v207 = WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v375, v19 + 1, (unint64_t)v382);
                          v208 = HIDWORD(v376);
                          v363 = v375;
                          v209 = (char *)v375 + 64 * (unint64_t)HIDWORD(v376);
                          v210 = *(_QWORD *)v207;
                          *(_QWORD *)v207 = 0;
                          *(_QWORD *)v209 = v210;
                          v211 = *((_QWORD *)v207 + 1);
                          *((_QWORD *)v207 + 1) = 0;
                          *((_QWORD *)v209 + 1) = v211;
                          v212 = *((_DWORD *)v209 + 4) & 0xFFFFFFFE | *((_DWORD *)v207 + 4) & 1;
                          *((_DWORD *)v209 + 4) = v212;
                          v213 = v212 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v207 + 4) >> 1) & 1));
                          *((_DWORD *)v209 + 4) = v213;
                          v214 = v213 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v207 + 4) >> 2) & 1));
                          *((_DWORD *)v209 + 4) = v214;
                          v215 = v214 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v207 + 4) >> 3) & 7));
                          *((_DWORD *)v209 + 4) = v215;
                          *((_DWORD *)v209 + 4) = *((_DWORD *)v207 + 4) & 0xFFFFFFC0 | v215 & 0x3F;
                          *(_OWORD *)(v209 + 20) = *(_OWORD *)(v207 + 20);
                          *(_QWORD *)(v209 + 36) = *(_QWORD *)(v207 + 36);
                          *((_DWORD *)v209 + 11) = *((_DWORD *)v207 + 11);
                          *((_DWORD *)v207 + 4) &= ~1u;
                          *((_QWORD *)v209 + 6) = 0;
                          *((_QWORD *)v209 + 7) = 0;
                          v216 = *((_QWORD *)v207 + 6);
                          *((_QWORD *)v207 + 6) = 0;
                          *((_QWORD *)v209 + 6) = v216;
                          LODWORD(v216) = *((_DWORD *)v207 + 14);
                          *((_DWORD *)v207 + 14) = 0;
                          *((_DWORD *)v209 + 14) = v216;
                          LODWORD(v216) = *((_DWORD *)v207 + 15);
                          *((_DWORD *)v207 + 15) = 0;
                          *((_DWORD *)v209 + 15) = v216;
                          v19 = (v208 + 1);
                        }
                        else
                        {
                          v217 = (char *)v363 + 64 * (unint64_t)v19;
                          v218 = *(_QWORD *)v382;
                          *(_QWORD *)v382 = 0;
                          *(_QWORD *)v217 = v218;
                          v219 = *(_QWORD *)&v382[8];
                          *(_QWORD *)&v382[8] = 0;
                          *((_QWORD *)v217 + 1) = v219;
                          v220 = *((_DWORD *)v217 + 4) & 0xFFFFFFFE | v382[16] & 1;
                          *((_DWORD *)v217 + 4) = v220;
                          v221 = v220 & 0xFFFFFFFD | (2 * ((*(_DWORD *)&v382[16] >> 1) & 1));
                          *((_DWORD *)v217 + 4) = v221;
                          v222 = v221 & 0xFFFFFFFB | (4 * ((*(_DWORD *)&v382[16] >> 2) & 1));
                          *((_DWORD *)v217 + 4) = v222;
                          v223 = v222 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)&v382[16] >> 3) & 7));
                          *((_DWORD *)v217 + 4) = v223;
                          *((_DWORD *)v217 + 4) = *(_DWORD *)&v382[16] & 0xFFFFFFC0 | v223 & 0x3F;
                          *(_OWORD *)(v217 + 20) = *(_OWORD *)&v382[20];
                          *(_QWORD *)(v217 + 36) = *(_QWORD *)&v382[36];
                          *((_DWORD *)v217 + 11) = *(_DWORD *)&v382[44];
                          *(_DWORD *)&v382[16] &= ~1u;
                          *((_QWORD *)v217 + 6) = 0;
                          *((_QWORD *)v217 + 7) = 0;
                          v224 = v383;
                          v383 = 0;
                          *((_QWORD *)v217 + 6) = v224;
                          LODWORD(v224) = v384;
                          LODWORD(v384) = 0;
                          *((_DWORD *)v217 + 14) = (_DWORD)v224;
                          LODWORD(v224) = HIDWORD(v384);
                          HIDWORD(v384) = 0;
                          *((_DWORD *)v217 + 15) = (_DWORD)v224;
                          v19 = (v19 + 1);
                        }
                        HIDWORD(v376) = v19;
                      }
                      else
                      {
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v198 = v377;
                        WebCore::ApplicationManifestParser::logManifestPropertyInvalidURL((uint64_t)v371, v377);
                        if (v198)
                        {
                          if (*(_DWORD *)v198 == 2)
                            WTF::StringImpl::destroy(v198, v157);
                          else
                            *(_DWORD *)v198 -= 2;
                        }
                      }
                    }
                    v225 = (WTF::StringImpl *)v385[0];
                    v385[0] = 0;
                    if (v225)
                    {
                      if (*(_DWORD *)v225 == 2)
                        WTF::StringImpl::destroy(v225, v157);
                      else
                        *(_DWORD *)v225 -= 2;
                    }
                  }
                }
                else
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v199 = (WTF::StringImpl *)v385[0];
                  WebCore::ApplicationManifestParser::logManifestPropertyNotAString((uint64_t)v371, (const WTF::String *)v385[0]);
                  if (v199)
                  {
                    if (*(_DWORD *)v199 == 2)
                      WTF::StringImpl::destroy(v199, v157);
                    else
                      *(_DWORD *)v199 -= 2;
                  }
                }
                v226 = v380;
                v380 = 0;
                if (v226)
                {
                  if (*(_DWORD *)v226 == 2)
                    WTF::StringImpl::destroy(v226, v157);
                  else
                    *(_DWORD *)v226 -= 2;
                }
                v227 = v381;
                v381 = 0;
                if (v227)
                {
                  if (*(_DWORD *)v227 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v227;
                }
              }
              if (*(_DWORD *)v191 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v191;
            }
            else if (v192 != 6)
            {
              __break(0xC471u);
              JUMPOUT(0x1952C5FF0);
            }
          }
          v193 = v383;
          if (HIDWORD(v384))
          {
            WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct(v383, (WTF *)((char *)v383 + 72 * HIDWORD(v384)));
            v193 = v383;
          }
          if (v193)
          {
            v383 = 0;
            LODWORD(v384) = 0;
            WTF::fastFree(v193, v157);
          }
          v194 = *(WTF::StringImpl **)&v382[8];
          *(_QWORD *)&v382[8] = 0;
          if (v194)
          {
            if (*(_DWORD *)v194 == 2)
              WTF::StringImpl::destroy(v194, v157);
            else
              *(_DWORD *)v194 -= 2;
          }
          v195 = *(WTF::StringImpl **)v382;
          *(_QWORD *)v382 = 0;
          if (v195)
          {
            if (*(_DWORD *)v195 == 2)
              WTF::StringImpl::destroy(v195, v157);
            else
              *(_DWORD *)v195 -= 2;
          }
          v7 = (WTF::StringImpl *)((char *)v7 + 8);
          v190 -= 8;
        }
        while (v190);
        v188 = *(_DWORD *)v16 - 1;
        v119 = (const WTF::JSONImpl::Object *)v371;
        v22 = (WTF::URL *)v370;
        if (*(_DWORD *)v16 != 1)
        {
LABEL_452:
          *(_DWORD *)v16 = v188;
          goto LABEL_308;
        }
      }
      else
      {
        v19 = 0;
        if (v188)
          goto LABEL_452;
      }
      WTF::JSONImpl::Value::operator delete();
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v160 = *(WTF::StringImpl **)v382;
      WebCore::ApplicationManifestParser::logDeveloperWarning((uint64_t *)v119, *(const WTF::String **)v382);
      if (v160)
      {
        if (*(_DWORD *)v160 != 2)
        {
          v19 = 0;
          *(_DWORD *)v160 -= 2;
          goto LABEL_308;
        }
        WTF::StringImpl::destroy(v160, v157);
      }
      v19 = 0;
    }
LABEL_308:
    v161 = v386;
    v386 = 0;
    if (v161)
    {
      if (*(_DWORD *)v161 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v161;
    }
LABEL_312:
    v162 = *(unsigned int *)(a6 + 260);
    if ((_DWORD)v162)
      WTF::VectorDestructor<true,WebCore::ApplicationManifest::Shortcut>::destruct(*(WTF::StringImpl **)(a6 + 248), (WTF::StringImpl *)(*(_QWORD *)(a6 + 248) + (v162 << 6)));
    v163 = *(WTF **)(a6 + 248);
    if (v163)
    {
      *(_QWORD *)(a6 + 248) = 0;
      *(_DWORD *)(a6 + 256) = 0;
      WTF::fastFree(v163, v157);
    }
    *(_QWORD *)(a6 + 248) = v375;
    *(_DWORD *)(a6 + 256) = v376;
    *(_DWORD *)(a6 + 260) = v19;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::ObjectBase::getValue(v9, (const WTF::String *)v382);
    v165 = *(WTF::StringImpl **)v382;
    *(_QWORD *)v382 = 0;
    if (v165)
    {
      if (*(_DWORD *)v165 == 2)
        WTF::StringImpl::destroy(v165, v164);
      else
        *(_DWORD *)v165 -= 2;
    }
    if (v377)
    {
      WTF::JSONImpl::Value::asString(v377);
      if (v375)
      {
        if (*((_DWORD *)v375 + 1))
        {
          WebCore::SecurityOrigin::create(v22, (uint64_t *)&v386);
          v19 = (unint64_t)v386;
          v16 = (WTF::JSONImpl::Value *)((char *)v386 + 8);
          WebCore::SecurityOriginData::toString((WTF::JSONImpl::Value *)((char *)v386 + 8), v382);
          MEMORY[0x19AEA52D4](v385, v382, 0);
          v167 = *(WTF::StringImpl **)v382;
          *(_QWORD *)v382 = 0;
          if (v167)
          {
            if (*(_DWORD *)v167 == 2)
              WTF::StringImpl::destroy(v167, v166);
            else
              *(_DWORD *)v167 -= 2;
          }
          MEMORY[0x19AEA52F8](v382, v385, &v375, 0);
          v169 = (WTF::StringImpl *)v385[0];
          v385[0] = 0;
          if (v169)
          {
            if (*(_DWORD *)v169 == 2)
              WTF::StringImpl::destroy(v169, v168);
            else
              *(_DWORD *)v169 -= 2;
          }
          if ((v382[8] & 1) != 0)
          {
            if ((WTF::protocolHostAndPortAreEqual() & 1) != 0)
            {
              WTF::URL::removeFragmentIdentifier((WTF::URL *)v382);
              v171 = *(WTF::StringImpl **)v382;
              *(_QWORD *)v382 = 0;
              v172 = *(_OWORD *)&v382[8];
              v173 = *(_OWORD *)&v382[24];
              *(_DWORD *)&v382[8] &= ~1u;
LABEL_474:
              v229 = *(WTF::StringImpl **)v382;
              *(_QWORD *)v382 = 0;
              if (v229)
              {
                if (*(_DWORD *)v229 == 2)
                {
                  v370 = v172;
                  v368 = v173;
                  WTF::StringImpl::destroy(v229, v164);
                  v173 = v368;
                  v172 = v370;
                }
                else
                {
                  *(_DWORD *)v229 -= 2;
                }
              }
              v386 = 0;
              if (v19)
              {
                do
                {
                  v230 = __ldaxr((unsigned int *)v19);
                  v231 = v230 - 1;
                }
                while (__stlxr(v231, (unsigned int *)v19));
                if (!v231)
                {
                  v368 = v173;
                  v370 = v172;
                  atomic_store(1u, (unsigned int *)v19);
                  v304 = *(WTF::StringImpl **)(v19 + 48);
                  *(_QWORD *)(v19 + 48) = 0;
                  if (v304)
                  {
                    if (*(_DWORD *)v304 == 2)
                      WTF::StringImpl::destroy(v304, v164);
                    else
                      *(_DWORD *)v304 -= 2;
                  }
                  v305 = *(WTF::StringImpl **)(v19 + 40);
                  *(_QWORD *)(v19 + 40) = 0;
                  if (v305)
                  {
                    if (*(_DWORD *)v305 == 2)
                      WTF::StringImpl::destroy(v305, v164);
                    else
                      *(_DWORD *)v305 -= 2;
                  }
                  v306 = *(unsigned int *)(v19 + 32);
                  if ((_DWORD)v306 != -1)
                    ((void (*)(_BYTE *, unint64_t))off_1E3352CC0[v306])(v382, v19 + 8);
                  *(_DWORD *)(v19 + 32) = -1;
                  WTF::fastFree((WTF *)v19, v164);
                  v119 = (const WTF::JSONImpl::Object *)v371;
                  v172 = v370;
                  v173 = v368;
                }
              }
LABEL_480:
              v232 = v375;
              v375 = 0;
              if (v232)
              {
                if (*(_DWORD *)v232 == 2)
                {
                  v370 = v172;
                  v368 = v173;
                  WTF::StringImpl::destroy(v232, v164);
                  v173 = v368;
                  v172 = v370;
                }
                else
                {
                  *(_DWORD *)v232 -= 2;
                }
              }
              v233 = v377;
              v377 = 0;
              if (v233)
              {
                if (*(_DWORD *)v233 == 1)
                {
                  v370 = v172;
                  v368 = v173;
                  WTF::JSONImpl::Value::operator delete();
                  v173 = v368;
                  v172 = v370;
                }
                else
                {
                  --*(_DWORD *)v233;
                }
              }
              goto LABEL_486;
            }
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v170 = (WTF::StringImpl *)v385[0];
            WebCore::ApplicationManifestParser::logManifestPropertyInvalidURL((uint64_t)v119, (const WTF::String *)v385[0]);
            if (v170)
            {
              if (*(_DWORD *)v170 == 2)
                WTF::StringImpl::destroy(v170, v164);
              else
                *(_DWORD *)v170 -= 2;
            }
          }
          v171 = *(WTF::StringImpl **)v22;
          if (*(_QWORD *)v22)
            *(_DWORD *)v171 += 2;
          v172 = *(_OWORD *)(a6 + 128);
          v173 = *(_OWORD *)(a6 + 144);
          goto LABEL_474;
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v174 = *(WTF::StringImpl **)v382;
        WebCore::ApplicationManifestParser::logManifestPropertyNotAString((uint64_t)v119, *(const WTF::String **)v382);
        if (v174)
        {
          if (*(_DWORD *)v174 == 2)
            WTF::StringImpl::destroy(v174, v164);
          else
            *(_DWORD *)v174 -= 2;
        }
      }
      v171 = *(WTF::StringImpl **)v22;
      if (*(_QWORD *)v22)
        *(_DWORD *)v171 += 2;
      v172 = *(_OWORD *)(a6 + 128);
      v173 = *(_OWORD *)(a6 + 144);
      goto LABEL_480;
    }
    v171 = *(WTF::StringImpl **)v22;
    if (*(_QWORD *)v22)
      *(_DWORD *)v171 += 2;
    v172 = *(_OWORD *)(a6 + 128);
    v173 = *(_OWORD *)(a6 + 144);
LABEL_486:
    v234 = *v369;
    *v369 = v171;
    if (v234)
    {
      if (*(_DWORD *)v234 == 2)
      {
        v370 = v172;
        v368 = v173;
        WTF::StringImpl::destroy(v234, v164);
        v173 = v368;
        v172 = v370;
      }
      else
      {
        *(_DWORD *)v234 -= 2;
      }
    }
    *(_OWORD *)(a6 + 168) = v172;
    *(_OWORD *)(a6 + 184) = v173;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::ObjectBase::getValue(v9, (const WTF::String *)v382);
    v242 = *(WTF::StringImpl **)v382;
    *(_QWORD *)v382 = 0;
    if (v242)
    {
      if (*(_DWORD *)v242 == 2)
        WTF::StringImpl::destroy(v242, v235);
      else
        *(_DWORD *)v242 -= 2;
    }
    if (!v385[0])
    {
      v244 = 0;
      v245 = 0;
      goto LABEL_550;
    }
    WTF::JSONImpl::Value::asString((WTF::JSONImpl::Value *)v385[0]);
    v9 = v377;
    if (!v377)
      break;
    v53 = *((unsigned int *)v377 + 4);
    v54 = (unsigned __int8 *)*((_QWORD *)v377 + 1);
    v55 = *((unsigned int *)v377 + 1);
    v57 = v55 | (((v53 >> 2) & 1) << 32);
    if (((*((_DWORD *)v377 + 4) >> 2) & 1) != 0)
    {
      if (!(_DWORD)v55)
        goto LABEL_531;
      v56 = 0;
      while (1)
      {
        v243 = v54[v56];
        if ((v243 - 9) >= 5 && v243 != 32)
          break;
        if (v55 == ++v56)
          goto LABEL_534;
      }
      if ((_DWORD)v55 == 1)
      {
        if (!(_DWORD)v56)
          goto LABEL_531;
        LODWORD(v247) = 0;
      }
      else
      {
        v247 = (v55 - 1);
        do
        {
          if (v247 >= v55)
            goto LABEL_769;
          v248 = v54[v247];
          if ((v248 - 9) >= 5 && v248 != 32)
            break;
          --v247;
        }
        while ((_DWORD)v247);
        if (!(_DWORD)v56 && (_DWORD)v247 == (_DWORD)v55 - 1)
          goto LABEL_531;
      }
      v57 = (v247 - v56 + 1);
      if (v55 - v56 >= v57)
      {
        v54 += v56;
        v57 |= 0x100000000uLL;
LABEL_531:
        v253 = v57;
        if ((v57 & 0x100000000) != 0)
        {
          if (!(_DWORD)v57)
            goto LABEL_534;
          switch((int)v57)
          {
            case 3:
              if ((*v54 & 0xDF) != 0x41)
                goto LABEL_626;
              v277 = 0;
              while (v253 - 1 != v277)
              {
                v278 = aAny[v277 + 1];
                v279 = v54[++v277] | 0x20;
                if (v279 != v278)
                {
                  if (v277 < v253)
                  {
LABEL_626:
                    switch(v253)
                    {
                      case 7uLL:
                        goto LABEL_663;
                      case 8uLL:
                        goto LABEL_669;
                      case 9uLL:
                        goto LABEL_627;
                      case 0x10uLL:
                        goto LABEL_682;
                      case 0x11uLL:
                        goto LABEL_633;
                      case 0x12uLL:
                        goto LABEL_676;
                      case 0x13uLL:
                        goto LABEL_640;
                      default:
                        goto LABEL_534;
                    }
                  }
                  break;
                }
              }
              v266 = 0;
              goto LABEL_696;
            case 7:
              goto LABEL_663;
            case 8:
              goto LABEL_669;
            case 9:
LABEL_627:
              if ((*v54 & 0xDF) != 0x4C)
                goto LABEL_632;
              v280 = 0;
              v266 = 1;
              while (v253 - 1 != v280)
              {
                v281 = aLandscape[v280 + 1];
                v282 = v54[++v280] | 0x20;
                if (v282 != v281)
                {
                  if (v280 < v253)
                  {
LABEL_632:
                    switch(v253)
                    {
                      case 7uLL:
                        goto LABEL_663;
                      case 8uLL:
                        goto LABEL_669;
                      case 0x10uLL:
                        goto LABEL_682;
                      case 0x11uLL:
                        goto LABEL_633;
                      case 0x12uLL:
                        goto LABEL_676;
                      case 0x13uLL:
                        goto LABEL_640;
                      default:
                        goto LABEL_534;
                    }
                  }
                  v266 = 1;
                  goto LABEL_696;
                }
              }
              goto LABEL_696;
            case 16:
              goto LABEL_682;
            case 17:
LABEL_633:
              if ((*v54 & 0xDF) != 0x4C)
                goto LABEL_638;
              v283 = 0;
              v266 = 2;
              break;
            case 18:
              goto LABEL_676;
            case 19:
              goto LABEL_640;
            default:
              goto LABEL_534;
          }
          do
          {
            if (v253 - 1 == v283)
              goto LABEL_696;
            v284 = aLandscapePrima[v283 + 1];
            v285 = v54[++v283] | 0x20;
          }
          while (v285 == v284);
          if (v283 >= v253)
          {
            v266 = 2;
          }
          else
          {
LABEL_638:
            if ((uint64_t)v253 <= 15)
              goto LABEL_646;
            if (v253 != 19)
              goto LABEL_674;
            if ((*v54 & 0xDF) != 0x4C)
              goto LABEL_645;
LABEL_640:
            v286 = 0;
            v266 = 3;
            do
            {
              if (v253 - 1 == v286)
                goto LABEL_696;
              v287 = aLandscapeSecon[v286 + 1];
              v288 = v54[++v286] | 0x20;
            }
            while (v288 == v287);
            if (v286 >= v253)
            {
              v266 = 3;
            }
            else
            {
LABEL_645:
              if ((uint64_t)v253 > 15)
                goto LABEL_674;
LABEL_646:
              if (v253 != 7)
              {
                if (v253 == 8)
                  goto LABEL_669;
                goto LABEL_534;
              }
              if ((*v54 & 0xDF) != 0x4E)
                goto LABEL_668;
LABEL_663:
              v290 = 0;
              v266 = 4;
              do
              {
                if (v253 - 1 == v290)
                  goto LABEL_696;
                v291 = aNatural[v290 + 1];
                v292 = v54[++v290] | 0x20;
              }
              while (v292 == v291);
              if (v290 >= v253)
              {
                v266 = 4;
              }
              else
              {
LABEL_668:
                if (v253 != 8)
                  goto LABEL_674;
LABEL_669:
                if ((*v54 & 0xDF) != 0x50)
                  goto LABEL_674;
                v293 = 0;
                v266 = 5;
                do
                {
                  if (v253 - 1 == v293)
                    goto LABEL_696;
                  v294 = aPortrait[v293 + 1];
                  v295 = v54[++v293] | 0x20;
                }
                while (v295 == v294);
                if (v293 < v253)
                {
LABEL_674:
                  if (v253 != 16)
                    goto LABEL_675;
LABEL_682:
                  if ((*v54 & 0xDF) == 0x50)
                  {
                    v300 = 0;
                    v266 = 6;
                    do
                    {
                      if (v253 - 1 == v300)
                        goto LABEL_696;
                      v301 = aPortraitPrimar[v300 + 1];
                      v302 = v54[++v300] | 0x20;
                    }
                    while (v302 == v301);
                    if (v300 >= v253)
                    {
                      v266 = 6;
                      goto LABEL_696;
                    }
                  }
LABEL_675:
                  if (v253 != 18)
                    goto LABEL_534;
LABEL_676:
                  if ((*v54 & 0xDF) == 0x50)
                  {
                    v296 = 0;
                    v297 = v54 + 1;
                    v266 = 7;
                    do
                    {
                      if (v253 - 1 == v296)
                        goto LABEL_696;
                      v298 = aPortraitSecond[v296 + 1];
                      v299 = v297[v296++] | 0x20;
                    }
                    while (v299 == v298);
                    if (v296 >= v253)
                    {
LABEL_681:
                      v266 = 7;
                      goto LABEL_696;
                    }
                  }
LABEL_534:
                  *(_DWORD *)v377 += 2;
                  if ((v55 & 0x80000000) != 0
                    || (v67 = __OFADD__((_DWORD)v55, 29), v254 = v55 + 29, v67)
                    || __OFADD__(v254, 1))
                  {
                    *(_QWORD *)v382 = 0;
                  }
                  else
                  {
                    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v254 + 1), (v53 >> 2) & 1, (int8x16_t *)"\"", 1u, (uint64_t)v9, (int8x16_t *)"\" is not a valid orientation.", 0x1Du, v382);
                    if (*(_QWORD *)v382)
                    {
                      WebCore::ApplicationManifestParser::logDeveloperWarning((uint64_t *)v119, *(const WTF::String **)v382);
                      v255 = *(WTF::StringImpl **)v382;
                      *(_QWORD *)v382 = 0;
                      if (v255)
                      {
                        if (*(_DWORD *)v255 == 2)
                          WTF::StringImpl::destroy(v255, v52);
                        else
                          *(_DWORD *)v255 -= 2;
                      }
                      if (*(_DWORD *)v9 != 2)
                      {
                        *(_DWORD *)v9 -= 2;
                        goto LABEL_543;
                      }
                      v259 = v9;
LABEL_561:
                      WTF::StringImpl::destroy(v259, v52);
LABEL_543:
                      v245 = 0;
                      v244 = 0;
                      goto LABEL_544;
                    }
                  }
                  __break(0xC471u);
                  JUMPOUT(0x1952C61ECLL);
                }
                v266 = 5;
              }
            }
          }
LABEL_696:
          v244 = LOBYTE((&WebCore::ApplicationManifestParser::parseOrientation(WTF::JSONImpl::Object const&)::orientationValueMappings)[3 * v266 + 2]);
          v245 = 1;
          goto LABEL_544;
        }
        if (!(_DWORD)v57)
          goto LABEL_534;
        switch((int)v57)
        {
          case 3:
            if ((*(_WORD *)v54 & 0xFFDF) != 0x41)
              goto LABEL_584;
            v262 = 0;
            while (v253 - 1 != v262)
            {
              v263 = aAny[v262 + 1];
              v264 = *(unsigned __int16 *)&v54[2 * v262++ + 2] | 0x20;
              if (v264 != v263)
              {
                if (v262 < v253)
                {
LABEL_584:
                  v119 = (const WTF::JSONImpl::Object *)v371;
                  switch(v253)
                  {
                    case 7uLL:
                      goto LABEL_731;
                    case 8uLL:
                      goto LABEL_745;
                    case 9uLL:
                      goto LABEL_585;
                    case 0x10uLL:
                      goto LABEL_738;
                    case 0x11uLL:
                      goto LABEL_591;
                    case 0x12uLL:
                      goto LABEL_752;
                    case 0x13uLL:
                      goto LABEL_598;
                    default:
                      goto LABEL_534;
                  }
                }
                break;
              }
            }
            v266 = 0;
            goto LABEL_837;
          case 7:
            goto LABEL_731;
          case 8:
            goto LABEL_745;
          case 9:
LABEL_585:
            if ((*(_WORD *)v54 & 0xFFDF) != 0x4C)
              goto LABEL_590;
            v265 = 0;
            v266 = 1;
            while (v253 - 1 != v265)
            {
              v267 = aLandscape[v265 + 1];
              v268 = *(unsigned __int16 *)&v54[2 * v265++ + 2] | 0x20;
              if (v268 != v267)
              {
                if (v265 < v253)
                {
LABEL_590:
                  v119 = (const WTF::JSONImpl::Object *)v371;
                  switch(v253)
                  {
                    case 7uLL:
                      goto LABEL_731;
                    case 8uLL:
                      goto LABEL_745;
                    case 0x10uLL:
                      goto LABEL_738;
                    case 0x11uLL:
                      goto LABEL_591;
                    case 0x12uLL:
                      goto LABEL_752;
                    case 0x13uLL:
                      goto LABEL_598;
                    default:
                      goto LABEL_534;
                  }
                }
                v266 = 1;
                goto LABEL_837;
              }
            }
            goto LABEL_837;
          case 16:
            goto LABEL_738;
          case 17:
LABEL_591:
            if ((*(_WORD *)v54 & 0xFFDF) != 0x4C)
              goto LABEL_596;
            v269 = 0;
            v266 = 2;
            break;
          case 18:
            goto LABEL_752;
          case 19:
            goto LABEL_598;
          default:
            goto LABEL_534;
        }
        do
        {
          if (v253 - 1 == v269)
            goto LABEL_837;
          v270 = aLandscapePrima[v269 + 1];
          v271 = *(unsigned __int16 *)&v54[2 * v269++ + 2] | 0x20;
        }
        while (v271 == v270);
        if (v269 < v253)
        {
LABEL_596:
          if ((uint64_t)v253 <= 15)
            goto LABEL_604;
          v119 = (const WTF::JSONImpl::Object *)v371;
          if (v253 == 19)
          {
LABEL_598:
            if ((*(_WORD *)v54 & 0xFFDF) == 0x4C)
            {
              v272 = 0;
              v266 = 3;
              do
              {
                if (v253 - 1 == v272)
                  goto LABEL_837;
                v273 = aLandscapeSecon[v272 + 1];
                v274 = *(unsigned __int16 *)&v54[2 * v272++ + 2] | 0x20;
              }
              while (v274 == v273);
              if (v272 >= v253)
              {
                v266 = 3;
                goto LABEL_837;
              }
            }
            if ((uint64_t)v253 > 15)
              goto LABEL_750;
LABEL_604:
            v119 = (const WTF::JSONImpl::Object *)v371;
            if (v253 != 7)
            {
              if (v253 != 8)
                goto LABEL_534;
              if ((*(_WORD *)v54 & 0xFFDF) != 0x50)
                goto LABEL_750;
LABEL_745:
              v313 = 0;
              v266 = 5;
              do
              {
                if (v253 - 1 == v313)
                  goto LABEL_837;
                v314 = aPortrait[v313 + 1];
                v315 = *(unsigned __int16 *)&v54[2 * v313++ + 2] | 0x20;
              }
              while (v315 == v314);
              if (v313 >= v253)
              {
                v266 = 5;
              }
              else
              {
LABEL_750:
                v119 = (const WTF::JSONImpl::Object *)v371;
                if (v253 != 16)
                  goto LABEL_751;
LABEL_738:
                if ((*(_WORD *)v54 & 0xFFDF) != 0x50)
                  goto LABEL_743;
                v310 = 0;
                v266 = 6;
                do
                {
                  if (v253 - 1 == v310)
                    goto LABEL_837;
                  v311 = aPortraitPrimar[v310 + 1];
                  v312 = *(unsigned __int16 *)&v54[2 * v310++ + 2] | 0x20;
                }
                while (v312 == v311);
                if (v310 < v253)
                {
LABEL_743:
                  v119 = (const WTF::JSONImpl::Object *)v371;
                  if (v253 != 18)
                    goto LABEL_534;
                  goto LABEL_752;
                }
                v266 = 6;
              }
LABEL_837:
              v119 = (const WTF::JSONImpl::Object *)v371;
              goto LABEL_696;
            }
LABEL_731:
            if ((*(_WORD *)v54 & 0xFFDF) == 0x4E)
            {
              v307 = 0;
              v266 = 4;
              do
              {
                if (v253 - 1 == v307)
                  goto LABEL_837;
                v308 = aNatural[v307 + 1];
                v309 = *(unsigned __int16 *)&v54[2 * v307++ + 2] | 0x20;
              }
              while (v309 == v308);
              if (v307 >= v253)
              {
                v266 = 4;
                goto LABEL_837;
              }
            }
            v119 = (const WTF::JSONImpl::Object *)v371;
            if (v253 == 8)
              goto LABEL_745;
          }
          if (v253 == 16)
            goto LABEL_738;
LABEL_751:
          if (v253 != 18)
            goto LABEL_534;
LABEL_752:
          if ((*(_WORD *)v54 & 0xFFDF) != 0x50)
            goto LABEL_534;
          v316 = 0;
          v317 = v54 + 2;
          v266 = 7;
          do
          {
            if (v253 - 1 == v316)
              goto LABEL_837;
            v318 = aPortraitSecond[v316 + 1];
            v319 = *(unsigned __int16 *)&v317[2 * v316++] | 0x20;
          }
          while (v319 == v318);
          v119 = (const WTF::JSONImpl::Object *)v371;
          if (v316 < v253)
            goto LABEL_534;
          goto LABEL_681;
        }
        v266 = 2;
        goto LABEL_837;
      }
    }
    else
    {
      if (!(_DWORD)v55)
        goto LABEL_531;
      v56 = 0;
      v249 = (unsigned __int8 *)*((_QWORD *)v377 + 1);
      while (1)
      {
        v250 = *(unsigned __int16 *)v249;
        if ((v250 - 9) >= 5 && v250 != 32)
          break;
        ++v56;
        v249 += 2;
        if (v55 == v56)
          goto LABEL_534;
      }
      if ((_DWORD)v55 == 1)
      {
        if (!(_DWORD)v56)
          goto LABEL_531;
        LODWORD(v251) = 0;
      }
      else
      {
        v251 = (v55 - 1);
        do
        {
          if (v251 >= v55)
            goto LABEL_769;
          v252 = *(unsigned __int16 *)&v54[2 * v251];
          if ((v252 - 9) >= 5 && v252 != 32)
            break;
          --v251;
        }
        while ((_DWORD)v251);
        if (!(_DWORD)v56 && (_DWORD)v251 == (_DWORD)v55 - 1)
          goto LABEL_531;
      }
      v57 = (v251 - v56 + 1);
      v56 = v55 - v56;
      v54 = v249;
      if (v56 >= v57)
        goto LABEL_531;
    }
LABEL_769:
    __break(1u);
LABEL_770:
    v10 = (WebCore::ApplicationManifestParser *)v371;
    v22 = (WTF::URL *)v370;
    if (v57 != 10)
      goto LABEL_128;
LABEL_567:
    v260 = v56 & 0xFFFFFFDF;
    if (v260 == 70)
    {
      v10 = (WebCore::ApplicationManifestParser *)v371;
      v22 = (WTF::URL *)v370;
      if ((*((_WORD *)v54 + 1) & 0xFFDF) != 0x55
        || (*((_WORD *)v54 + 2) & 0xFFDF) != 0x4C
        || (*((_WORD *)v54 + 3) & 0xFFDF) != 0x4C
        || (*((_WORD *)v54 + 4) & 0xFFDF) != 0x53
        || (*((_WORD *)v54 + 5) & 0xFFDF) != 0x43
        || (*((_WORD *)v54 + 6) & 0xFFDF) != 0x52
        || (*((_WORD *)v54 + 7) & 0xFFDF) != 0x45
        || (*((_WORD *)v54 + 8) & 0xFFDF) != 0x45)
      {
        goto LABEL_128;
      }
      v261 = *((unsigned __int16 *)v54 + 9);
LABEL_660:
      if ((v261 & 0xFFFFFFDF) != 0x4E)
        goto LABEL_128;
      v276 = 1;
    }
    else if (v260 == 77)
    {
      v10 = (WebCore::ApplicationManifestParser *)v371;
      v22 = (WTF::URL *)v370;
      if ((*((_WORD *)v54 + 1) & 0xFFDF) != 0x49
        || (*((_WORD *)v54 + 2) & 0xFFDF) != 0x4E
        || (*((_WORD *)v54 + 3) & 0xFFDF) != 0x49
        || (*((_WORD *)v54 + 4) & 0xFFDF) != 0x4D
        || (*((_WORD *)v54 + 5) & 0xFFDF) != 0x41
        || (*((_WORD *)v54 + 6) & 0xFFDF) != 0x4C
        || (*((_WORD *)v54 + 7) & 0xFFDF) != 0xD
        || (*((_WORD *)v54 + 8) & 0xFFDF) != 0x55)
      {
        goto LABEL_128;
      }
      v303 = *((unsigned __int16 *)v54 + 9);
LABEL_712:
      if ((v303 & 0xFFFFFFDF) != 0x49)
        goto LABEL_128;
      v276 = 2;
    }
    else
    {
      v10 = (WebCore::ApplicationManifestParser *)v371;
      v22 = (WTF::URL *)v370;
      if (v260 != 83
        || (*((_WORD *)v54 + 1) & 0xFFDF) != 0x54
        || (*((_WORD *)v54 + 2) & 0xFFDF) != 0x41
        || (*((_WORD *)v54 + 3) & 0xFFDF) != 0x4E
        || (*((_WORD *)v54 + 4) & 0xFFDF) != 0x44
        || (*((_WORD *)v54 + 5) & 0xFFDF) != 0x41
        || (*((_WORD *)v54 + 6) & 0xFFDF) != 0x4C
        || (*((_WORD *)v54 + 7) & 0xFFDF) != 0x4F
        || (*((_WORD *)v54 + 8) & 0xFFDF) != 0x4E)
      {
        goto LABEL_128;
      }
      v332 = *((unsigned __int16 *)v54 + 9);
LABEL_828:
      if ((v332 & 0xFFFFFFDF) != 0x45)
        goto LABEL_128;
      v276 = 3;
    }
LABEL_662:
    v59 = (char)(&WebCore::ApplicationManifestParser::parseDisplay(WTF::JSONImpl::Object const&)::displayValueMappings)[3 * v276 + 2];
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v246 = *(WTF::StringImpl **)v382;
  WebCore::ApplicationManifestParser::logManifestPropertyNotAString((uint64_t)v119, *(const WTF::String **)v382);
  if (!v246)
    goto LABEL_543;
  if (*(_DWORD *)v246 == 2)
  {
    v259 = v246;
    goto LABEL_561;
  }
  v245 = 0;
  v244 = 0;
  *(_DWORD *)v246 -= 2;
LABEL_544:
  v256 = v377;
  v377 = 0;
  if (v256)
  {
    if (*(_DWORD *)v256 == 2)
      WTF::StringImpl::destroy(v256, v52);
    else
      *(_DWORD *)v256 -= 2;
  }
  v257 = (_DWORD *)v385[0];
  v385[0] = 0;
  if (v257)
  {
    if (*v257 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v257;
  }
LABEL_550:
  *(_WORD *)(a6 + 74) = v244 | (v245 << 8);
  result = *(unsigned int **)v119;
  if (*(_QWORD *)v119)
    return WebCore::Document::processApplicationManifest((WebCore::Document *)result, (const WebCore::ApplicationManifest *)a6, v236, v237, v238, v239, v240, v241);
  return result;
}

WebCore::Node *WebCore::ApplicationManifestParser::parse@<X0>(WebCore::ApplicationManifestParser *this@<X0>, const WTF::String *a2@<X1>, const WTF::URL *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::JSONImpl::Object *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebCore::Node *result;
  WTF::JSONImpl::Object *v14;
  WTF::JSONImpl::Object *v15;
  WebCore::Node *v16;
  WTF::StringImpl *v17;

  v16 = 0;
  v17 = 0;
  WTF::URL::invalidate((WTF::URL *)&v17);
  v9 = (WTF::JSONImpl::Object *)WebCore::ApplicationManifestParser::createJSONObject((WebCore::ApplicationManifestParser *)&v16, &v15);
  v10 = v15;
  if (!v15)
  {
    WTF::JSONImpl::Object::create(v9);
    v10 = v14;
  }
  WebCore::ApplicationManifestParser::parseManifest((WebCore::ApplicationManifestParser *)&v16, v10, this, a2, a3, a4);
  if (*(_DWORD *)v10 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*(_DWORD *)v10;
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::ApplicationManifestParser::parseWithValidation@<X0>(unsigned int *this@<X0>, const WTF::String *a2@<X1>, const WTF::URL *a3@<X2>, _BYTE *a4@<X8>)
{
  const WTF::String *v8;
  WTF::StringImpl *v9;
  const WTF::JSONImpl::Object *v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[33];
  const WTF::JSONImpl::Object *v14;
  unsigned int *v15;
  WTF::StringImpl *v16;

  if ((*((_BYTE *)a2 + 8) & 1) != 0 && (*((_BYTE *)a3 + 8) & 1) != 0)
  {
    v8 = (const WTF::String *)this;
    v15 = 0;
    v16 = 0;
    WTF::URL::invalidate((WTF::URL *)&v16);
    WebCore::ApplicationManifestParser::createJSONObject((WebCore::ApplicationManifestParser *)&v15, &v14);
    v10 = v14;
    if (v14)
    {
      WebCore::ApplicationManifestParser::parseManifest((WebCore::ApplicationManifestParser *)&v15, v14, v8, a2, a3, (uint64_t)v13);
      WebCore::ApplicationManifest::ApplicationManifest((uint64_t)a4, (uint64_t *)v13);
      a4[264] = 1;
      WebCore::ApplicationManifest::~ApplicationManifest(v13, v11);
      if (*(_DWORD *)v10 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v10;
    }
    else
    {
      *a4 = 0;
      a4[264] = 0;
    }
    v12 = v16;
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    this = v15;
    v15 = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)this, v9);
      }
      else
      {
        this[6] -= 2;
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[264] = 0;
  }
  return this;
}

uint64_t *WebCore::ApplicationManifestParser::logDeveloperWarning(uint64_t *this, const WTF::String *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  Inspector::ScriptArguments **v5;
  WTF *v6;
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _QWORD v13[2];
  Inspector::ScriptArguments **v14[2];

  v2 = *this;
  if (*this)
  {
    v3 = (WTF::StringImpl *)this[1];
    if (v3)
      *(_DWORD *)v3 += 2;
    v11 = v3;
    if (a2)
      *(_DWORD *)a2 += 2;
    v10 = a2;
    v14[0] = (Inspector::ScriptArguments **)"Parsing application manifest ";
    v14[1] = (Inspector::ScriptArguments **)30;
    v13[0] = ": ";
    v13[1] = 3;
    this = (uint64_t *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)v14, (uint64_t *)&v11, (uint64_t)v13, (uint64_t *)&v10, &v12);
    if (v12)
    {
      WTF::fastMalloc((WTF *)0x60);
      v14[0] = (Inspector::ScriptArguments **)Inspector::ConsoleMessage::ConsoleMessage();
      WebCore::Document::addConsoleMessage(v2, v14);
      v5 = v14[0];
      v14[0] = 0;
      if (v5)
      {
        v6 = (WTF *)MEMORY[0x19AEA5F58]();
        WTF::fastFree(v6, v7);
      }
      v8 = v12;
      v12 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v4);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = v10;
      v10 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v4);
        else
          *(_DWORD *)v9 -= 2;
      }
      this = (uint64_t *)v11;
      v11 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v4);
        else
          *(_DWORD *)this -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::ApplicationManifestParser::parseIcons(WebCore::ApplicationManifestParser *this, const WTF::JSONImpl::Object *a2, WTF::JSONImpl::ObjectBase *a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  WTF::JSONImpl::ObjectBase **v14;
  WTF::JSONImpl::ObjectBase **v15;
  char *v16;
  WTF::JSONImpl::ObjectBase *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::String *v23;
  WTF::StringImpl *v24;
  WTF::String *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF *v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::String *v46;
  WTF::StringImpl *v47;
  char v48;
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  int v71;
  BOOL v72;
  int v73;
  _BOOL4 v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  WTF::StringImpl *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  WTF *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::JSONImpl::Value *v103;
  int v104;
  unint64_t v105;
  char *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  unsigned int v109;
  unsigned int v110;
  char v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  __int16 v114;
  char v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::String *v118;
  __int128 v119;
  __int128 v120;
  WTF::StringImpl *v121;
  WTF::JSONImpl::Value *v122;
  WTF::StringImpl *v123;
  _BYTE v124[32];
  WTF *v125;
  unint64_t v126;
  WTF::StringImpl *v127;
  char v128;
  WTF::StringImpl *v129;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getValue(a3, (const WTF::String *)&v123);
  result = v123;
  v123 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      goto LABEL_264;
    *(_DWORD *)result -= 2;
  }
  while (2)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    v8 = v129;
    if (v129)
    {
      v9 = *((_DWORD *)v129 + 1);
      if (v9 < 6)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v10 = v123;
        WebCore::ApplicationManifestParser::logDeveloperWarning((uint64_t *)a2, v123);
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v11);
          else
            *(_DWORD *)v10 -= 2;
        }
        goto LABEL_9;
      }
      if (v9 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1952C7618);
      }
      v12 = (*(_DWORD *)v129)++;
      v13 = *((unsigned int *)v8 + 7);
      if (!(_DWORD)v13)
      {
LABEL_265:
        if (v12)
          *(_DWORD *)v8 = v12;
        else
          WTF::JSONImpl::Value::operator delete();
LABEL_9:
        result = v129;
        v129 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            return (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)result;
        }
        return result;
      }
      v14 = (WTF::JSONImpl::ObjectBase **)*((_QWORD *)v8 + 2);
      v15 = &v14[v13];
      v16 = (char *)a2 + 8;
LABEL_17:
      v123 = 0;
      WTF::URL::invalidate((WTF::URL *)&v123);
      v125 = 0;
      v126 = 0;
      v128 = 0;
      v127 = 0;
      v17 = *v14;
      v18 = *((_DWORD *)*v14 + 1);
      if (v18 < 5)
        goto LABEL_18;
      if (v18 != 5)
      {
        if (v18 != 6)
          goto LABEL_271;
        goto LABEL_18;
      }
      ++*(_DWORD *)v17;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v112 = v118;
      WTF::JSONImpl::ObjectBase::getValue(v17, (const WTF::String *)&v112);
      v22 = v112;
      v112 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v6);
        else
          *(_DWORD *)v22 -= 2;
      }
      if (!v122)
        goto LABEL_248;
      WTF::JSONImpl::Value::asString(v122);
      if (!v121)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v25 = v118;
        WebCore::ApplicationManifestParser::logManifestPropertyNotAString((uint64_t)a2, v118);
        if (!v25)
          goto LABEL_242;
        if (*(_DWORD *)v25 != 2)
        {
          *(_DWORD *)v25 -= 2;
          goto LABEL_242;
        }
        v46 = v25;
        goto LABEL_241;
      }
      MEMORY[0x19AEA52F8](&v118, v16, &v121, 0);
      v23 = v118;
      if (!v118)
        goto LABEL_242;
      if (!*((_DWORD *)v118 + 1))
        goto LABEL_238;
      if ((v119 & 1) == 0)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v24 = v112;
        WebCore::ApplicationManifestParser::logManifestPropertyInvalidURL((uint64_t)a2, v112);
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v6);
          else
            *(_DWORD *)v24 -= 2;
        }
        goto LABEL_238;
      }
      *(_DWORD *)v118 += 2;
      v26 = v123;
      v123 = v23;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v6);
        else
          *(_DWORD *)v26 -= 2;
      }
      v106 = v16;
      *(_OWORD *)v124 = v119;
      *(_OWORD *)&v124[16] = v120;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v117 = v112;
      WebCore::ApplicationManifestParser::parseGenericString((WebCore::ApplicationManifestParser *)&v108, a2, v17, (const WTF::String *)&v117);
      WTF::String::split();
      if (HIDWORD(v126))
      {
        v49 = v125;
        v50 = 8 * HIDWORD(v126);
        do
        {
          v51 = *(WTF::StringImpl **)v49;
          *(_QWORD *)v49 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v27);
            else
              *(_DWORD *)v51 -= 2;
          }
          v49 = (WTF *)((char *)v49 + 8);
          v50 -= 8;
        }
        while (v50);
      }
      v28 = v125;
      if (v125)
      {
        v125 = 0;
        LODWORD(v126) = 0;
        WTF::fastFree(v28, v27);
      }
      v125 = v112;
      v29 = v113;
      v112 = 0;
      v113 = 0;
      v126 = v29;
      v30 = v108;
      v108 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v27);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = v117;
      v117 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v27);
        else
          *(_DWORD *)v31 -= 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v108 = v112;
      WebCore::ApplicationManifestParser::parseGenericString((WebCore::ApplicationManifestParser *)&v112, a2, v17, (const WTF::String *)&v108);
      v33 = v112;
      v112 = 0;
      v34 = v127;
      v127 = v33;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::destroy(v34, v32);
          v57 = v112;
          v112 = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v32);
            else
              *(_DWORD *)v57 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v34 -= 2;
          v112 = 0;
        }
      }
      v35 = v108;
      v108 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v32);
        else
          *(_DWORD *)v35 -= 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v108 = v112;
      WTF::JSONImpl::ObjectBase::getValue(v17, (const WTF::String *)&v108);
      v36 = v108;
      v108 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v6);
        else
          *(_DWORD *)v36 -= 2;
      }
      if (!v117)
      {
        v128 = 1;
LABEL_228:
        v82 = *((unsigned int *)this + 3);
        if ((_DWORD)v82 == *((_DWORD *)this + 2))
        {
          v83 = WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v82 + 1, (unint64_t)&v123);
          LODWORD(v82) = *((_DWORD *)this + 3);
          v84 = *(_QWORD *)this + 72 * v82;
          v85 = *(_QWORD *)v83;
          *(_QWORD *)v83 = 0;
          *(_QWORD *)v84 = v85;
          v86 = *(_DWORD *)(v84 + 8) & 0xFFFFFFFE | *((_DWORD *)v83 + 2) & 1;
          *(_DWORD *)(v84 + 8) = v86;
          v87 = v86 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v83 + 2) >> 1) & 1));
          *(_DWORD *)(v84 + 8) = v87;
          v88 = v87 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v83 + 2) >> 2) & 1));
          *(_DWORD *)(v84 + 8) = v88;
          v89 = v88 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v83 + 2) >> 3) & 7));
          *(_DWORD *)(v84 + 8) = v89;
          *(_DWORD *)(v84 + 8) = *((_DWORD *)v83 + 2) & 0xFFFFFFC0 | v89 & 0x3F;
          *(_OWORD *)(v84 + 12) = *(_OWORD *)(v83 + 12);
          *(_QWORD *)(v84 + 28) = *(_QWORD *)(v83 + 28);
          *(_DWORD *)(v84 + 36) = *((_DWORD *)v83 + 9);
          *((_DWORD *)v83 + 2) &= ~1u;
          *(_QWORD *)(v84 + 40) = 0;
          *(_QWORD *)(v84 + 48) = 0;
          v90 = *((_QWORD *)v83 + 5);
          *((_QWORD *)v83 + 5) = 0;
          *(_QWORD *)(v84 + 40) = v90;
          LODWORD(v90) = *((_DWORD *)v83 + 12);
          *((_DWORD *)v83 + 12) = 0;
          *(_DWORD *)(v84 + 48) = v90;
          LODWORD(v90) = *((_DWORD *)v83 + 13);
          *((_DWORD *)v83 + 13) = 0;
          *(_DWORD *)(v84 + 52) = v90;
          v91 = *((_QWORD *)v83 + 7);
          *((_QWORD *)v83 + 7) = 0;
          *(_QWORD *)(v84 + 56) = v91;
          v92 = v83[64];
        }
        else
        {
          v84 = *(_QWORD *)this + 72 * v82;
          v93 = v123;
          v123 = 0;
          *(_QWORD *)v84 = v93;
          v94 = *(_DWORD *)(v84 + 8) & 0xFFFFFFFE | v124[0] & 1;
          *(_DWORD *)(v84 + 8) = v94;
          v95 = v94 & 0xFFFFFFFD | (2 * ((*(_DWORD *)v124 >> 1) & 1));
          *(_DWORD *)(v84 + 8) = v95;
          v96 = v95 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v124 >> 2) & 1));
          *(_DWORD *)(v84 + 8) = v96;
          v97 = v96 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v124 >> 3) & 7));
          *(_DWORD *)(v84 + 8) = v97;
          *(_DWORD *)(v84 + 8) = *(_DWORD *)v124 & 0xFFFFFFC0 | v97 & 0x3F;
          *(_OWORD *)(v84 + 12) = *(_OWORD *)&v124[4];
          *(_QWORD *)(v84 + 28) = *(_QWORD *)&v124[20];
          *(_DWORD *)(v84 + 36) = *(_DWORD *)&v124[28];
          *(_DWORD *)v124 &= ~1u;
          *(_QWORD *)(v84 + 40) = 0;
          *(_QWORD *)(v84 + 48) = 0;
          v98 = v125;
          v125 = 0;
          *(_QWORD *)(v84 + 40) = v98;
          LODWORD(v98) = v126;
          LODWORD(v126) = 0;
          *(_DWORD *)(v84 + 48) = (_DWORD)v98;
          LODWORD(v98) = HIDWORD(v126);
          HIDWORD(v126) = 0;
          *(_DWORD *)(v84 + 52) = (_DWORD)v98;
          v99 = v127;
          v127 = 0;
          *(_QWORD *)(v84 + 56) = v99;
          v92 = v128;
        }
        *(_BYTE *)(v84 + 64) = v92;
        *((_DWORD *)this + 3) = v82 + 1;
        v16 = v106;
        goto LABEL_235;
      }
      result = (WTF::StringImpl *)WTF::JSONImpl::Value::asString(v117);
      if (!v116)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v47 = v112;
        WebCore::ApplicationManifestParser::logManifestPropertyNotAString((uint64_t)a2, v112);
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v6);
          else
            *(_DWORD *)v47 -= 2;
        }
        v48 = 1;
LABEL_225:
        v128 = v48;
        v81 = v116;
        v116 = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
            WTF::StringImpl::destroy(v81, v6);
          else
            *(_DWORD *)v81 -= 2;
        }
        goto LABEL_228;
      }
      v37 = (WTF::StringImpl *)*((_QWORD *)v116 + 1);
      v38 = *((unsigned int *)v116 + 1);
      v39 = ((unint64_t)*((unsigned int *)v116 + 4) >> 2) & 1;
      v40 = v105 & 0xFFFFFF0000000000 | (v39 << 32);
      v41 = v40 | v38;
      v105 = v40 | v38;
      if ((_DWORD)v39)
      {
        if ((_DWORD)v38)
        {
          v52 = 0;
          while (1)
          {
            v53 = *((unsigned __int8 *)v37 + v52);
            if ((v53 - 9) >= 5 && v53 != 32)
              break;
            if (v38 == ++v52)
              goto LABEL_125;
          }
          if ((_DWORD)v38 == 1)
          {
            v42 = v41;
            if (!(_DWORD)v52)
              goto LABEL_134;
            LODWORD(v54) = 0;
          }
          else
          {
            v54 = (v38 - 1);
            do
            {
              if (v54 >= v38)
                goto LABEL_263;
              v55 = *((unsigned __int8 *)v37 + v54);
              if ((v55 - 9) >= 5 && v55 != 32)
                break;
              --v54;
            }
            while ((_DWORD)v54);
            if (!(_DWORD)v52)
            {
              v42 = v41;
              if ((_DWORD)v54 == (_DWORD)v38 - 1)
                goto LABEL_134;
            }
          }
          v56 = (v54 - v52 + 1);
          if (v38 - v52 < v56)
            goto LABEL_263;
          v37 = (WTF::StringImpl *)((char *)v37 + v52);
          v42 = v56 | 0x100000000;
          goto LABEL_134;
        }
      }
      else if ((_DWORD)v38)
      {
        v58 = 0;
        v59 = (WTF::StringImpl *)*((_QWORD *)v116 + 1);
        while (1)
        {
          v60 = *(unsigned __int16 *)v59;
          if ((v60 - 9) >= 5 && v60 != 32)
            break;
          ++v58;
          v59 = (WTF::StringImpl *)((char *)v59 + 2);
          if (v38 == v58)
          {
LABEL_125:
            v42 = 0x100000000;
            v37 = (WTF::StringImpl *)"";
            goto LABEL_134;
          }
        }
        if ((_DWORD)v38 == 1)
        {
          v42 = v41;
          if (!(_DWORD)v58)
            goto LABEL_134;
          LODWORD(v61) = 0;
LABEL_262:
          v42 = (v61 - v58 + 1);
          v37 = v59;
          if (v38 - v58 >= v42)
            goto LABEL_134;
LABEL_263:
          __break(1u);
LABEL_264:
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
          continue;
        }
        v61 = (v38 - 1);
        do
        {
          if (v61 >= v38)
            goto LABEL_263;
          v62 = *((unsigned __int16 *)v37 + v61);
          if ((v62 - 9) >= 5 && v62 != 32)
            break;
          --v61;
        }
        while ((_DWORD)v61);
        if ((_DWORD)v58)
          goto LABEL_262;
        v42 = v41;
        if ((_DWORD)v61 != (_DWORD)v38 - 1)
          goto LABEL_262;
        goto LABEL_134;
      }
      v42 = v40 | v38;
LABEL_134:
      v112 = v37;
      v113 = v42;
      v114 = 32;
      v115 = 1;
      v108 = (WTF::StringImpl *)&v112;
      v109 = 0;
      v111 = 0;
      result = (WTF::StringImpl *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v108);
      v63 = v109;
      v64 = v113;
      if (v109 == (_DWORD)v113 && v111)
        goto LABEL_232;
      v104 = 0;
      while (1)
      {
        v65 = *((unsigned int *)v108 + 2);
        if (v65 <= v63)
          goto LABEL_149;
        LODWORD(v66) = v110;
        if (v65 - v63 <= v110)
        {
          if (!v63)
          {
            v69 = *(_QWORD *)v108;
            v66 = *((_QWORD *)v108 + 1);
            goto LABEL_146;
          }
          LODWORD(v66) = v65 - v63;
        }
        v67 = v63;
        v66 = v66;
        v68 = v65 - v63;
        if (*((_BYTE *)v108 + 12))
        {
          if (v68 < v66)
            goto LABEL_263;
          v69 = *(_QWORD *)v108 + v67;
          v66 = v66 | 0x100000000;
        }
        else
        {
          if (v68 < v66)
            goto LABEL_263;
          v69 = *(_QWORD *)v108 + 2 * v67;
        }
LABEL_146:
        switch((_DWORD)v66)
        {
          case 0xA:
            if ((v66 & 0xFF00000000) != 0)
            {
              if ((*(_BYTE *)v69 & 0xDF) != 0x4D
                || (*(_BYTE *)(v69 + 1) & 0xDF) != 0x4F
                || (*(_BYTE *)(v69 + 2) & 0xDF) != 0x4E
                || (*(_BYTE *)(v69 + 3) & 0xDF) != 0x4F
                || (*(_BYTE *)(v69 + 4) & 0xDF) != 0x43
                || (*(_BYTE *)(v69 + 5) & 0xDF) != 0x48
                || (*(_BYTE *)(v69 + 6) & 0xDF) != 0x52
                || (*(_BYTE *)(v69 + 7) & 0xDF) != 0x4F
                || (*(_BYTE *)(v69 + 8) & 0xDF) != 0x4D)
              {
                break;
              }
              v77 = *(unsigned __int8 *)(v69 + 9);
            }
            else
            {
              if ((*(_WORD *)v69 & 0xFFDF) != 0x4D
                || (*(_WORD *)(v69 + 2) & 0xFFDF) != 0x4F
                || (*(_WORD *)(v69 + 4) & 0xFFDF) != 0x4E
                || (*(_WORD *)(v69 + 6) & 0xFFDF) != 0x4F
                || (*(_WORD *)(v69 + 8) & 0xFFDF) != 0x43
                || (*(_WORD *)(v69 + 10) & 0xFFDF) != 0x48
                || (*(_WORD *)(v69 + 12) & 0xFFDF) != 0x52
                || (*(_WORD *)(v69 + 14) & 0xFFDF) != 0x4F
                || (*(_WORD *)(v69 + 16) & 0xFFDF) != 0x4D)
              {
                break;
              }
              v77 = *(unsigned __int16 *)(v69 + 18);
            }
            if ((v77 & 0xFFFFFFDF) == 0x45)
            {
              v78 = v104 | 2;
LABEL_201:
              v104 = v78;
              goto LABEL_164;
            }
            break;
          case 8:
            if ((v66 & 0xFF00000000) != 0)
            {
              if ((*(_BYTE *)v69 & 0xDF) != 0x4D
                || (*(_BYTE *)(v69 + 1) & 0xDF) != 0x41
                || (*(_BYTE *)(v69 + 2) & 0xDF) != 0x53
                || (*(_BYTE *)(v69 + 3) & 0xDF) != 0x4B
                || (*(_BYTE *)(v69 + 4) & 0xDF) != 0x41
                || (*(_BYTE *)(v69 + 5) & 0xDF) != 0x42
                || (*(_BYTE *)(v69 + 6) & 0xDF) != 0x4C)
              {
                break;
              }
              v79 = *(unsigned __int8 *)(v69 + 7);
            }
            else
            {
              if ((*(_WORD *)v69 & 0xFFDF) != 0x4D
                || (*(_WORD *)(v69 + 2) & 0xFFDF) != 0x41
                || (*(_WORD *)(v69 + 4) & 0xFFDF) != 0x53
                || (*(_WORD *)(v69 + 6) & 0xFFDF) != 0x4B
                || (*(_WORD *)(v69 + 8) & 0xFFDF) != 0x41
                || (*(_WORD *)(v69 + 10) & 0xFFDF) != 0x42
                || (*(_WORD *)(v69 + 12) & 0xFFDF) != 0x4C)
              {
                break;
              }
              v79 = *(unsigned __int16 *)(v69 + 14);
            }
            if ((v79 & 0xFFFFFFDF) == 0x45)
            {
              v78 = v104 | 4;
              goto LABEL_201;
            }
            break;
          case 3:
            if ((v66 & 0xFF00000000) != 0)
            {
              if ((*(_BYTE *)v69 & 0xDF) != 0x41 || (*(_BYTE *)(v69 + 1) & 0xDF) != 0x4E)
                break;
              v80 = *(unsigned __int8 *)(v69 + 2);
            }
            else
            {
              if ((*(_WORD *)v69 & 0xFFDF) != 0x41 || (*(_WORD *)(v69 + 2) & 0xFFDF) != 0x4E)
                break;
              v80 = *(unsigned __int16 *)(v69 + 4);
            }
            if ((v80 & 0xFFFFFFDF) == 0x59)
            {
              v78 = v104 | 1;
              goto LABEL_201;
            }
            break;
          default:
            break;
        }
LABEL_149:
        v70 = v116;
        if (v116)
        {
          v71 = *((_DWORD *)v116 + 1);
          *(_DWORD *)v116 += 2;
          if (v71 < 0)
            goto LABEL_270;
        }
        else
        {
          v71 = 0;
        }
        v72 = __OFADD__(v71, 25);
        v73 = v71 + 25;
        if (v72 || __OFADD__(v73, 1))
        {
LABEL_270:
          v107 = 0;
LABEL_271:
          __break(0xC471u);
          JUMPOUT(0x1952C75F8);
        }
        v74 = !v70 || (*((_BYTE *)v70 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v73 + 1), v74, (int8x16_t *)"\"", 1u, (uint64_t)v70, (int8x16_t *)"\" is not a valid purpose.", 0x19u, &v107);
        if (!v107)
          goto LABEL_271;
        WebCore::ApplicationManifestParser::logDeveloperWarning((uint64_t *)a2, v107);
        v76 = v107;
        v107 = 0;
        if (!v76)
          goto LABEL_161;
        if (*(_DWORD *)v76 != 2)
        {
          *(_DWORD *)v76 -= 2;
LABEL_161:
          if (v70)
            goto LABEL_162;
          goto LABEL_164;
        }
        WTF::StringImpl::destroy(v76, v75);
        if (v70)
        {
LABEL_162:
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, v75);
          else
            *(_DWORD *)v70 -= 2;
        }
LABEL_164:
        result = (WTF::StringImpl *)WTF::StringView::SplitResult::Iterator::operator++();
        v63 = v109;
        if (v109 == v64 && v111)
        {
          v48 = v104;
          if (v104)
            goto LABEL_225;
LABEL_232:
          v100 = v116;
          v116 = 0;
          v16 = v106;
          if (v100)
          {
            if (*(_DWORD *)v100 == 2)
              WTF::StringImpl::destroy(v100, v6);
            else
              *(_DWORD *)v100 -= 2;
          }
LABEL_235:
          v101 = v117;
          v117 = 0;
          if (v101)
          {
            if (*(_DWORD *)v101 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v101;
          }
LABEL_238:
          v46 = v118;
          v118 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 != 2)
            {
              *(_DWORD *)v46 -= 2;
              goto LABEL_242;
            }
LABEL_241:
            WTF::StringImpl::destroy(v46, v6);
          }
LABEL_242:
          v102 = v121;
          v121 = 0;
          if (v102)
          {
            if (*(_DWORD *)v102 == 2)
              WTF::StringImpl::destroy(v102, v6);
            else
              *(_DWORD *)v102 -= 2;
          }
          v103 = v122;
          v122 = 0;
          if (v103)
          {
            if (*(_DWORD *)v103 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v103;
          }
LABEL_248:
          if (*(_DWORD *)v17 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v17;
LABEL_18:
          v19 = v127;
          v127 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v6);
            else
              *(_DWORD *)v19 -= 2;
          }
          v20 = v125;
          if (HIDWORD(v126))
          {
            v43 = v16;
            v44 = 8 * HIDWORD(v126);
            do
            {
              v45 = *(WTF::StringImpl **)v20;
              *(_QWORD *)v20 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, v6);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v20 = (WTF *)((char *)v20 + 8);
              v44 -= 8;
            }
            while (v44);
            v20 = v125;
            v16 = v43;
            if (v125)
              goto LABEL_82;
          }
          else
          {
            if (!v125)
              goto LABEL_23;
LABEL_82:
            v125 = 0;
            LODWORD(v126) = 0;
            WTF::fastFree(v20, v6);
          }
LABEL_23:
          v21 = v123;
          v123 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v6);
            else
              *(_DWORD *)v21 -= 2;
          }
          if (++v14 == v15)
          {
            v12 = *(_DWORD *)v8 - 1;
            goto LABEL_265;
          }
          goto LABEL_17;
        }
      }
    }
    return result;
  }
}

