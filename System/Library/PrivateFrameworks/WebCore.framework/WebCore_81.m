_QWORD *WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::didReceiveResponse(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_1E33F7BF8;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[1];
    a1[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::didReceiveResponse(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F7BF8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::didReceiveResponse(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_1E33F7C20;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[1];
    a1[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::didReceiveResponse(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F7C20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::didReceiveResponse(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;

  *a1 = &off_1E33F7C48;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[4];
    a1[4] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::didReceiveResponse(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E33F7C48;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[4];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::SubresourceLoader::didReceiveResponse(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2,void>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  void *v28;
  WTF::MonotonicTime *v29;
  uint64_t v30;
  uint64_t v31;
  const WebCore::NetworkLoadMetrics *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  char v42;
  unsigned int **v43;
  _BYTE buf[12];
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  _QWORD *v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 752))
  {
    v4 = *(_QWORD *)(v2 + 1328);
    if (!v4)
      goto LABEL_4;
    v5 = *(_QWORD *)(v4 + 8);
    if (!v5)
      goto LABEL_4;
    v33 = *(_QWORD *)(v5 + 8);
    if (v33)
      goto LABEL_64;
    v33 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = v5;
    v37 = *(unsigned int **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v33;
    if (!v37)
      goto LABEL_64;
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      WTF::fastFree((WTF *)v37, a2);
    }
    v33 = *(_QWORD *)(v5 + 8);
    if (v33)
    {
LABEL_64:
      do
        v34 = __ldaxr((unsigned int *)v33);
      while (__stlxr(v34 + 1, (unsigned int *)v33));
      v40 = (unsigned int *)v33;
      v35 = *(_QWORD *)(v33 + 8);
      if (v35)
      {
        v43 = &v40;
        ++*(_DWORD *)(v35 + 548);
        v36 = *(_QWORD *)(v35 + 488);
        if (v36)
        {
          if (*(_QWORD *)(v36 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v35 + 464), (uint64_t *)&v43, (uint64_t)buf);
        }
      }
    }
    else
    {
LABEL_4:
      v40 = 0;
    }
    if (!*(_BYTE *)(a1 + 24))
      goto LABEL_12;
    if (!v40)
      goto LABEL_12;
    v6 = *((_QWORD *)v40 + 1);
    if (!v6 || (*(_BYTE *)(v6 + 556) & 0x1F) == 0)
      goto LABEL_12;
    *(_BYTE *)(v2 + 1644) = 1;
    if (*(_BYTE *)(v2 + 1360))
    {
      WebCore::SubresourceLoader::RequestCountTracker::~RequestCountTracker((WebCore::SubresourceLoader::RequestCountTracker *)(v2 + 1344), a2);
      *(_BYTE *)(v2 + 1360) = 0;
      v6 = *((_QWORD *)v40 + 1);
    }
    if ((*(_BYTE *)(v6 + 556) & 0x1F) != 1)
    {
      v18 = qword_1ECE7C860;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(_QWORD **)(v2 + 32);
        if (v19)
        {
          v20 = v19[3];
          if (v20)
          {
            v20 = *(_QWORD *)(v20 + 8);
            if (v20)
            {
              if (*(_BYTE *)(v20 + 40))
                v20 = *(_QWORD *)(v20 + 32);
              else
                v20 = 0;
            }
          }
          v21 = v19[4];
          v19 = (_QWORD *)v19[35];
        }
        else
        {
          v21 = 0;
          v20 = 0;
        }
        v22 = *(_QWORD *)(v2 + 744);
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = v2;
        v45 = 2048;
        v46 = v20;
        v47 = 2048;
        v48 = v21;
        v49 = 2048;
        v50 = v19;
        v51 = 2048;
        v52 = v22;
        _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::didReceiveResponse: canceling load because something about a multi-part non-image", buf, 0x34u);
      }
      WebCore::ResourceLoader::cancel((WebCore::ResourceLoader *)v2);
    }
    else
    {
LABEL_12:
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 1328) + 8);
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8)
      {
        v8 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v8 = 1;
        *(_QWORD *)(v8 + 8) = v7;
        v24 = *(unsigned int **)(v7 + 8);
        *(_QWORD *)(v7 + 8) = v8;
        if (v24)
        {
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            atomic_store(1u, v24);
            WTF::fastFree((WTF *)v24, v23);
          }
          v8 = *(_QWORD *)(v7 + 8);
        }
      }
      do
        v9 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v9 + 1, (unsigned int *)v8));
      v41 = (unsigned int *)v8;
      v10 = *(_QWORD *)(v8 + 8);
      v43 = &v41;
      ++*(_DWORD *)(v10 + 548);
      v11 = *(_QWORD *)(v10 + 488);
      if (v11 && *(_QWORD *)(v11 + 8))
      {
        WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v10 + 464), (uint64_t *)&v43, (uint64_t)buf);
        v10 = *((_QWORD *)v41 + 1);
      }
      v12 = *(uint64_t **)(v10 + 400);
      if (!v12)
      {
        v13 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
        if (v13 != -1)
        {
          *(_QWORD *)buf = &v42;
          v43 = (unsigned int **)buf;
          std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v43, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
        }
        v12 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
      }
      WebCore::ResourceResponse::platformLazyInit((uint64_t)v12, 1);
      if (*((__int16 *)v12 + 68) > 399)
      {
        v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v41 + 1) + 80))(*((_QWORD *)v41 + 1));
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v41, v28);
        if ((v27 & 1) == 0)
        {
          WTF::MonotonicTime::now(v29);
          *(_QWORD *)(v2 + 312) = v30;
          v31 = *(_QWORD *)(v2 + 160);
          if (v31)
          {
            v32 = (const WebCore::NetworkLoadMetrics *)(v31 + 8);
          }
          else
          {
            v32 = (const WebCore::NetworkLoadMetrics *)&WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics;
            {
              dword_1EE2F9230 = 0;
              xmmword_1EE2F9210 = 0u;
              unk_1EE2F9220 = 0u;
              xmmword_1EE2F91F0 = 0u;
              *(_OWORD *)&qword_1EE2F9200 = 0u;
              WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics = 0u;
              *(_OWORD *)&qword_1EE2F91E0 = 0u;
              qword_1EE2F9238 = -1;
              unk_1EE2F9240 = -1;
              qword_1EE2F9248 = 0;
            }
          }
          WebCore::SubresourceLoader::reportResourceTiming((WebCore::SubresourceLoader *)v2, v32);
          *(_DWORD *)(v2 + 1336) = 2;
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 1) + 72))(*((_QWORD *)v40 + 1), 3);
          WebCore::ResourceLoader::cancel((WebCore::ResourceLoader *)v2);
        }
      }
      else
      {
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v41, v14);
      }
      if (*(_BYTE *)(v2 + 1645))
      {
        v16 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = 0;
        v17 = *(_QWORD *)(v2 + 1376);
        *(_QWORD *)(v2 + 1376) = v16;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v40, v15);
  }
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t result, WTF *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  size_t v9;
  void *v10;
  void *v11;

  v2 = (int)a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if (v4 >= (unint64_t)a2)
  {
LABEL_10:
    *(_DWORD *)(v3 + 12) = v2;
    return result;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= (unint64_t)a2)
    v7 = (unint64_t)a2;
  else
    v7 = v6;
  if (!HIDWORD(v7))
  {
    v8 = *(void **)result;
    v9 = *(unsigned int *)(result + 12);
    v10 = (void *)WTF::fastMalloc((WTF *)v7);
    *(_DWORD *)(v3 + 8) = v7;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v8, v9);
    if (v8)
    {
      if (*(void **)v3 == v8)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v8, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::TextTrackLoader::*&)(void),WebCore::TextTrackLoader*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(WebCore::ThreadableLoaderClientWrapper &,WebCore::WorkerLoaderProxy *,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WebCore::ResourceRequest &&,WebCore::ThreadableLoaderOptions const&,WTF::String const&,WebCore::WorkerOrWorkletGlobalScope &)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33F7C98;
  WebCore::WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(WebCore::ThreadableLoaderClientWrapper &,WebCore::WorkerLoaderProxy *,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WebCore::ResourceRequest &&,WebCore::ThreadableLoaderOptions const&,WTF::String const&,WebCore::WorkerOrWorkletGlobalScope &)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(WebCore::ThreadableLoaderClientWrapper &,WebCore::WorkerLoaderProxy *,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WebCore::ResourceRequest &&,WebCore::ThreadableLoaderOptions const&,WTF::String const&,WebCore::WorkerOrWorkletGlobalScope &)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33F7C98;
  WebCore::WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(WebCore::ThreadableLoaderClientWrapper &,WebCore::WorkerLoaderProxy *,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WebCore::ResourceRequest &&,WebCore::ThreadableLoaderOptions const&,WTF::String const&,WebCore::WorkerOrWorkletGlobalScope &)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(WebCore::ThreadableLoaderClientWrapper &,WebCore::WorkerLoaderProxy *,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WebCore::ResourceRequest &&,WebCore::ThreadableLoaderOptions const&,WTF::String const&,WebCore::WorkerOrWorkletGlobalScope &)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WebCore::Node *v4;
  uint64_t v5;
  WTF *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int *result;
  WTF::StringImpl *v11;
  WTF *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  __int16 v18;
  WTF::StringImpl *v19[2];
  char v20;
  WTF *v21;
  uint64_t v22;

  if (*(_BYTE *)(a2 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x195F2CCB8);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (WebCore::Node *)(a2 - 192);
  *(_DWORD *)(a2 - 168) += 2;
  v5 = *(_QWORD *)(a1 + 216);
  v6 = *(WTF **)(v5 + 168);
  *(_QWORD *)(v5 + 168) = 0;
  v21 = v6;
  v18 = *(_WORD *)(a1 + 232);
  v7 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)v19 = v7;
  v20 = 1;
  WebCore::DocumentThreadableLoader::create(a2 - 192, v3, a1 + 16, v5, (uint64_t *)&v21, (uint64_t *)(a1 + 224), (uint64_t)&v18, (uint64_t *)(*(_QWORD *)(a1 + 216) + 160), &v22, 0);
  v9 = v22;
  v22 = 0;
  result = *(unsigned int **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v9;
  if (result)
  {
    if (result[2] == 1)
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
      v22 = 0;
    }
    else
    {
      --result[2];
    }
  }
  if (v20)
  {
    v11 = v19[1];
    v19[1] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    result = (unsigned int *)v19[0];
    if (v19[0])
    {
      if (*(_DWORD *)v19[0] == 2)
        result = (unsigned int *)WTF::StringImpl::destroy(v19[0], v8);
      else
        *(_DWORD *)v19[0] -= 2;
    }
  }
  v12 = v21;
  v21 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v15 = (WTF::StringImpl *)*((_QWORD *)v12 + 6);
      *((_QWORD *)v12 + 6) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v8);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = (WTF::StringImpl *)*((_QWORD *)v12 + 5);
      *((_QWORD *)v12 + 5) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v8);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = *((unsigned int *)v12 + 8);
      if ((_DWORD)v17 != -1)
        ((void (*)(__int16 *, char *))off_1E33F7B38[v17])(&v18, (char *)v12 + 8);
      *((_DWORD *)v12 + 8) = -1;
      result = (unsigned int *)WTF::fastFree(v12, v8);
    }
  }
  if (*(_DWORD *)(a2 - 168) == 2)
  {
    if ((*(_WORD *)(a2 - 162) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v4, v8);
  }
  else
  {
    *(_DWORD *)(a2 - 168) -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::destroy(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33F7CC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::destroy(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F7CC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::destroy(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (result)
  {
    v2 = *(_DWORD *)(result + 8);
    *(_DWORD *)(result + 8) = v2 + 1;
    *(_QWORD *)(result + 40) = 0;
    if (v2)
      *(_DWORD *)(result + 8) = v2;
    else
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::cancel(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_DWORD **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v2)
  {
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    if (v2[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2);
    else
      --v2[2];
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::computeIsDone(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore::DocumentThreadableLoader *v2;
  __int128 v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(WebCore::DocumentThreadableLoader **)(v1 + 24);
  if (v2)
  {
    ++*((_DWORD *)v2 + 2);
    WebCore::DocumentThreadableLoader::computeIsDone(v2);
    if (*((_DWORD *)v2 + 2) == 1)
      (*(void (**)(WebCore::DocumentThreadableLoader *))(*(_QWORD *)v2 + 24))(v2);
    else
      --*((_DWORD *)v2 + 2);
    return;
  }
  v3 = *(_OWORD *)(v1 + 224);
  v14[0] = *(_OWORD *)(v1 + 208);
  v14[1] = v3;
  v4 = *(unsigned int **)(v1 + 40);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E33F7D38;
  *(_QWORD *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 16) = 1;
  v12 = v6;
  v13 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_12:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v14);
  if (v8)
  {
    v9 = v8[4];
    if (v9)
    {
      if (*(_BYTE *)(v9 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v9 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v9 + 360) + 48), &v12, v1 + 56);
    }
  }
  v10 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v11 = v12;
  v12 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::notifyIsDone(BOOL)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1[1];
  *a1 = &off_1E33F7D38;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WTF::StringImpl **)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
        {
          v11 = v3;
          WTF::StringImpl::destroy(v7, a2);
          v3 = v11;
        }
        else
        {
          *(_DWORD *)v7 -= 2;
        }
      }
      v8 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          v12 = v3;
          WTF::fastFree((WTF *)v8, a2);
          v3 = v12;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::notifyIsDone(BOOL)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F7D38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WTF::StringImpl **)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
        {
          v11 = v3;
          WTF::StringImpl::destroy(v7, a2);
          v3 = v11;
        }
        else
        {
          *(_DWORD *)v7 -= 2;
        }
      }
      v8 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          v12 = v3;
          WTF::fastFree((WTF *)v8, a2);
          v3 = v12;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::notifyIsDone(BOOL)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)v2 + 48))(v2, *(_BYTE *)(result + 16) != 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didSendData(unsigned long long,unsigned long long)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1[1];
  *a1 = &off_1E33F7D60;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WTF::StringImpl **)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
        {
          v11 = v3;
          WTF::StringImpl::destroy(v7, a2);
          v3 = v11;
        }
        else
        {
          *(_DWORD *)v7 -= 2;
        }
      }
      v8 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          v12 = v3;
          WTF::fastFree((WTF *)v8, a2);
          v3 = v12;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didSendData(unsigned long long,unsigned long long)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F7D60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WTF::StringImpl **)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
        {
          v11 = v3;
          WTF::StringImpl::destroy(v7, a2);
          v3 = v11;
        }
        else
        {
          *(_DWORD *)v7 -= 2;
        }
      }
      v8 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          v12 = v3;
          WTF::fastFree((WTF *)v8, a2);
          v3 = v12;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didSendData(unsigned long long,unsigned long long)::$_0,void,WebCore::ScriptExecutionContext &>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t (***v2)(_QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(result[1] + 8);
  if (v1)
  {
    v2 = *(uint64_t (****)(_QWORD, _QWORD, _QWORD))(v1 + 8);
    if (v2)
      return (_QWORD *)(**v2)(v2, result[2], result[3]);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didReceiveResponse(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceResponse const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = off_1E33F7D88;
  WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)(a1 + 9), a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WTF::StringImpl **)(v4 + 16);
      *(_QWORD *)(v4 + 16) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v12 = v4;
          WTF::StringImpl::destroy(v8, v3);
          v4 = v12;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      v9 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          v13 = v4;
          WTF::fastFree((WTF *)v9, v3);
          v4 = v13;
        }
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didReceiveResponse(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceResponse const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = off_1E33F7D88;
  WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)(a1 + 9), a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WTF::StringImpl **)(v4 + 16);
      *(_QWORD *)(v4 + 16) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v12 = v4;
          WTF::StringImpl::destroy(v8, v3);
          v4 = v12;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      v9 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          v13 = v4;
          WTF::fastFree((WTF *)v9, v3);
          v4 = v13;
        }
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didReceiveResponse(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceResponse const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  WTF::StringImpl *v8;
  Inspector::IdentifiersFactory *v9;
  uint64_t v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _BYTE v14[240];
  CFTypeRef cf;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  WebCore::ResourceResponseBase::fromCrossThreadData(a1 + 72, (uint64_t)v14);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 64);
      v7 = *(_OWORD *)(a1 + 48);
      v16[0] = *(_OWORD *)(a1 + 32);
      v16[1] = v7;
      (*(void (**)(uint64_t, _OWORD *, uint64_t, _BYTE *))(*(_QWORD *)v5 + 8))(v5, v16, v6, v14);
    }
  }
  if ((*(unsigned int (**)(_QWORD *))(*a2 + 64))(a2))
  {
    if ((*(unsigned int (**)(_QWORD *))(*a2 + 488))(a2) == 1)
    {
      v9 = *(Inspector::IdentifiersFactory **)(a1 + 24);
      v10 = *(_QWORD *)(a2[48] + 8);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v10 + 8) + 16))(*(_QWORD *)(v10 + 8)))
      {
        v12 = *(WTF::StringImpl **)(v10 + 192);
        if (v12)
          WebCore::InspectorNetworkAgent::didReceiveResponse(v12, v9, 0, (uint64_t)v14, 0);
        v13 = *(_QWORD *)(v10 + 16);
        if (v13)
          WebCore::WebConsoleAgent::didReceiveResponse(v13, (uint64_t)v9, (uint64_t)v14);
      }
    }
  }
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v14, v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didReceiveData(WebCore::SharedBuffer const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = off_1E33F7DB0;
  WebCore::ContentFilter::ResourceDataItem::~ResourceDataItem((WebCore::ContentFilter::ResourceDataItem *)(a1 + 3), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WTF::StringImpl **)(v4 + 16);
      *(_QWORD *)(v4 + 16) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v12 = v4;
          WTF::StringImpl::destroy(v8, v3);
          v4 = v12;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      v9 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          v13 = v4;
          WTF::fastFree((WTF *)v9, v3);
          v4 = v13;
        }
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didReceiveData(WebCore::SharedBuffer const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = off_1E33F7DB0;
  WebCore::ContentFilter::ResourceDataItem::~ResourceDataItem((WebCore::ContentFilter::ResourceDataItem *)(a1 + 3), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WTF::StringImpl **)(v4 + 16);
      *(_QWORD *)(v4 + 16) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v12 = v4;
          WTF::StringImpl::destroy(v8, v3);
          v4 = v12;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      v9 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          v13 = v4;
          WTF::fastFree((WTF *)v9, v3);
          v4 = v13;
        }
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didReceiveData(WebCore::SharedBuffer const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *result;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *(_QWORD *)(a1 + 24));
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
  if ((_DWORD)result)
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *))(*a2 + 488))(a2);
    if ((_DWORD)result == 1)
    {
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        result = *(WTF::StringImpl **)(*(_QWORD *)(a2[48] + 8) + 192);
        if (result)
          return WebCore::InspectorNetworkAgent::didReceiveData(result, *(Inspector::IdentifiersFactory **)(a1 + 16), *(_QWORD *)(a1 + 24));
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didFinishLoading(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33F7DD8;
  WebCore::WorkerThreadableLoader::MainThreadBridge::didFinishLoading(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics const&)::$_0::~$_0(a1 + 2, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didFinishLoading(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E33F7DD8;
  WebCore::WorkerThreadableLoader::MainThreadBridge::didFinishLoading(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics const&)::$_0::~$_0(a1 + 2, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didFinishLoading(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  v11 = *(_OWORD *)(a1 + 160);
  v12 = *(_OWORD *)(a1 + 176);
  v5 = *(_QWORD *)(a1 + 192);
  v6 = a1 + 32;
  *(_BYTE *)(v4 + 24) = 1;
  v7 = *(_QWORD *)(v4 + 8);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v13[0] = v11;
      v13[1] = v12;
      (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, v13, v5, v6);
    }
  }
  result = (uint64_t *)(*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*a2 + 64))(a2, a2, v5);
  if ((_DWORD)result)
  {
    result = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*a2 + 488))(a2);
    if ((_DWORD)result == 1)
    {
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        result = *(uint64_t **)(*(_QWORD *)(a2[48] + 8) + 192);
        if (result)
          return WebCore::InspectorNetworkAgent::didFinishLoading((uint64_t)result, *(Inspector::IdentifiersFactory **)(a1 + 24), 0, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didFail(WebCore::ProcessQualified<WTF::UUID>,WebCore::ResourceError const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33F7E00;
  WebCore::WorkerThreadableLoader::MainThreadBridge::didFail(WebCore::ProcessQualified<WTF::UUID>,WebCore::ResourceError const&)::$_0::~$_0(a1 + 2, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didFail(WebCore::ProcessQualified<WTF::UUID>,WebCore::ResourceError const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E33F7E00;
  WebCore::WorkerThreadableLoader::MainThreadBridge::didFail(WebCore::ProcessQualified<WTF::UUID>,WebCore::ResourceError const&)::$_0::~$_0(a1 + 2, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didFail(WebCore::ProcessQualified<WTF::UUID>,WebCore::ResourceError const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, WebCore::ThreadableLoader *this, uint64_t a3, const WTF::String *a4)
{
  WebCore::ResourceError *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = (WebCore::ResourceError *)(a1 + 64);
  WebCore::ThreadableLoader::logError(this, (WTF::StringImpl **)(a1 + 64), (WTF **)(*(_QWORD *)(a1 + 16) + 16), a4);
  v7 = *(_QWORD *)(a1 + 16);
  v11 = *(_OWORD *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(v7 + 24) = 1;
  v8 = *(_QWORD *)(v7 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v13[0] = v11;
      v13[1] = v12;
      (*(void (**)(uint64_t, _OWORD *, WebCore::ResourceError *))(*(_QWORD *)v9 + 32))(v9, v13, v6);
    }
  }
  result = (*(uint64_t (**)(WebCore::ThreadableLoader *))(*(_QWORD *)this + 64))(this);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(WebCore::ThreadableLoader *))(*(_QWORD *)this + 488))(this);
    if ((_DWORD)result == 1)
      return WebCore::InspectorInstrumentation::didFailLoadingImpl(*(_QWORD *)(*((_QWORD *)this + 48) + 8), *(Inspector::IdentifiersFactory **)(a1 + 24), 0, v6);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didFinishTiming(WebCore::ResourceTiming const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = off_1E33F7E28;
  WebCore::ResourceTiming::~ResourceTiming((WebCore::ResourceTiming *)(a1 + 2), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WTF::StringImpl **)(v4 + 16);
      *(_QWORD *)(v4 + 16) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v12 = v4;
          WTF::StringImpl::destroy(v8, v3);
          v4 = v12;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      v9 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          v13 = v4;
          WTF::fastFree((WTF *)v9, v3);
          v4 = v13;
        }
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didFinishTiming(WebCore::ResourceTiming const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = off_1E33F7E28;
  WebCore::ResourceTiming::~ResourceTiming((WebCore::ResourceTiming *)(a1 + 2), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WTF::StringImpl **)(v4 + 16);
      *(_QWORD *)(v4 + 16) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v12 = v4;
          WTF::StringImpl::destroy(v8, v3);
          v4 = v12;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      v9 = *(unsigned int **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          v13 = v4;
          WTF::fastFree((WTF *)v9, v3);
          v4 = v13;
        }
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

WTF::MonotonicTime *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableLoader::MainThreadBridge::didFinishTiming(WebCore::ResourceTiming const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, _QWORD *a2)
{
  WTF::MonotonicTime *result;
  WebCore::Performance *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  result = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
  if ((_DWORD)result)
  {
    v5 = (WebCore::Performance *)a2[74];
    ++*((_DWORD *)v5 + 4);
    result = WebCore::Performance::addResourceTiming((uint64_t)v5, a1 + 16);
    if (*((_DWORD *)v5 + 4) == 1)
    {
      WebCore::Performance::~Performance(v5, v6);
      return (WTF::MonotonicTime *)bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v5 + 4);
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl **v12;
  int i;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF::StringImpl *)-1)
      break;
    v12 = (WTF::StringImpl **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    v17 = *a2;
    if (*a2)
      *(_DWORD *)v17 += 2;
    *v15 = v17;
    v18 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = 0;
    result = (WTF::StringImpl **)v15[1];
    v15[1] = v18;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 1))(result);
      else
        --*((_DWORD *)result + 2);
    }
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_32;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_39:
        result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v28, v15);
        v15 = result;
        v24 = *a1;
        if (*a1)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_43;
      }
LABEL_32:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_39;
    }
LABEL_43:
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v24 + 16 * v27;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3))
    goto LABEL_13;
  v22 = *a1;
  if (*a1)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v22 + 16 * v23;
  *(_BYTE *)(a4 + 16) = 0;
  v29 = v8 + 16 * v14;
  v30 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  result = *(WTF::StringImpl ***)(v29 + 8);
  *(_QWORD *)(v29 + 8) = v30;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 1))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v14);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = v17 + 16 * v22;
          v24 = *(_DWORD **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            if (v24[2] != 1)
            {
              --v24[2];
              goto LABEL_25;
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
            v30 = *(WTF::StringImpl **)v23;
            *(_QWORD *)v23 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v10);
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          else
          {
LABEL_25:
            *(_QWORD *)v23 = 0;
          }
          v25 = *v13;
          *v13 = 0;
          *(_QWORD *)v23 = v25;
          v26 = v6 + 16 * v11;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v27;
          v28 = *(_DWORD **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (v28[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
            else
              --v28[2];
          }
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
          goto LABEL_34;
        }
        v15 = v6 + 16 * v11;
        v16 = *(_DWORD **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (v16[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            v14 = *v13;
          }
          else
          {
            --v16[2];
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_34:
      if (++v11 == v7)
        goto LABEL_45;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_45:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

unsigned int *WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int **v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = (WTF::StringImpl *)result[3];
  if (v4 != a2)
  {
    v5 = (unsigned int **)(*(_QWORD *)result + 40 * (_QWORD)a2);
    v6 = 40 * v4 - 40 * (_QWORD)a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

WTF *WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(WTF *result, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    v3 = *((unsigned int *)result + 3);
    if ((_DWORD)v3)
    {
      v4 = *(WTF::StringImpl ***)result;
      v5 = 40 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v4 += 5;
        v5 -= 40;
      }
      while (v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

uint64_t std::copy_n[abi:sn180100]<WTF::URL const*,unsigned long,WTF::URL*,0>(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  __int128 v8;

  if (a2)
  {
    v4 = a1;
    v5 = a1 + 40 * (_QWORD)a2;
    do
    {
      v6 = *(_DWORD **)v4;
      if (*(_QWORD *)v4)
        *v6 += 2;
      v7 = *(WTF::StringImpl **)a3;
      *(_QWORD *)a3 = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(_OWORD *)(v4 + 8);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(v4 + 24);
      *(_OWORD *)(a3 + 8) = v8;
      a3 += 40;
      v4 += 40;
    }
    while (v4 != v5);
  }
  return a3;
}

uint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x6666667)
  {
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 40 * *(unsigned int *)(result + 12));
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    WTF::VectorMover<false,WTF::URL>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

double std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  double result;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 8) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v5;
  v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  v7 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_DWORD *)(a1 + 48) & 0xFFFFFFFE | a2[6] & 1;
  *(_DWORD *)(a1 + 48) = v8;
  v9 = v8 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 12) >> 1) & 1));
  *(_DWORD *)(a1 + 48) = v9;
  v10 = v9 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 12) >> 2) & 1));
  *(_DWORD *)(a1 + 48) = v10;
  v11 = v10 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 12) >> 3) & 7));
  *(_DWORD *)(a1 + 48) = v11;
  *(_DWORD *)(a1 + 48) = a2[6] & 0xFFFFFFC0 | v11 & 0x3F;
  *(_OWORD *)(a1 + 52) = *(_OWORD *)((char *)a2 + 52);
  result = *(double *)((char *)a2 + 68);
  *(double *)(a1 + 68) = result;
  *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 12) &= ~1u;
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::URL,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x3333334)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(unsigned int *)(result + 12);
    v5 = 80 * a2;
    v6 = WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)v2 = v6;
    if ((_DWORD)v4)
    {
      v8 = v6;
      v9 = 80 * v4;
      v10 = (uint64_t *)v3;
      do
      {
        std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](v8, v10);
        v11 = (WTF::StringImpl *)v10[5];
        v10[5] = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v7);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = (WTF::StringImpl *)*v10;
        *v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v7);
          else
            *(_DWORD *)v12 -= 2;
        }
        v8 += 80;
        v10 += 10;
        v9 -= 80;
      }
      while (v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(uint64_t *a1, uint64_t *a2, unsigned int (**a3)(uint64_t *, uint64_t, __n128), unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  char *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  __int128 v38;
  __int128 v39;
  WTF::StringImpl *v40;
  __int128 v41;
  __int128 v42;

  if (a4 >= 2)
  {
    v8 = (uint64_t)a1;
    if (a4 == 2)
    {
      if (((unsigned int (*)(uint64_t *, uint64_t *))*a3)(a2 - 10, a1))
      {
        std::swap[abi:sn180100]<WTF::URL>(v8, (WTF::StringImpl **)a2 - 10);
        std::swap[abi:sn180100]<WTF::URL>(v8 + 40, (WTF::StringImpl **)a2 - 5);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        v15 = (WTF::StringImpl **)(a1 + 10);
        if (a1 + 10 != a2)
        {
          v16 = 0;
          v17 = (char *)a1;
          do
          {
            v18 = v15;
            if (((unsigned int (*)(WTF::StringImpl **, char *))*a3)(v15, v17))
            {
              v19 = *v18;
              *v18 = 0;
              v37 = v19;
              v38 = *(_OWORD *)(v17 + 88);
              v39 = *(_OWORD *)(v17 + 104);
              *((_DWORD *)v17 + 22) = v38 & 0xFFFFFFFE;
              v20 = (WTF::StringImpl *)*((_QWORD *)v17 + 15);
              *((_QWORD *)v17 + 15) = 0;
              v40 = v20;
              v21 = *((_OWORD *)v17 + 9);
              v41 = *((_OWORD *)v17 + 8);
              v42 = v21;
              *((_DWORD *)v17 + 32) = v41 & 0xFFFFFFFE;
              v22 = v16;
              while (1)
              {
                std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](v8 + v22 + 80, (uint64_t *)(v8 + v22));
                if (!v22)
                  break;
                v22 -= 80;
                if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))*a3)(&v37, v22 + v8) & 1) == 0)
                {
                  v23 = v8 + v22 + 80;
                  goto LABEL_18;
                }
              }
              v23 = v8;
LABEL_18:
              std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](v23, (uint64_t *)&v37);
              v25 = v40;
              v40 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v24);
                else
                  *(_DWORD *)v25 -= 2;
              }
              v26 = v37;
              v37 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v24);
                else
                  *(_DWORD *)v26 -= 2;
              }
            }
            v15 = v18 + 10;
            v16 += 80;
            v17 = (char *)v18;
          }
          while (v18 + 10 != (WTF::StringImpl **)a2);
        }
      }
    }
    else
    {
      v11 = (uint64_t *)a5;
      v12 = a4 >> 1;
      v13 = &a1[10 * (a4 >> 1)];
      v14 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(a1, v13, a3, v14, a5);
        v27 = (uint64_t)&v11[10 * v12];
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>((uint64_t *)(v8 + 80 * (a4 >> 1)), a2, a3, a4 - (a4 >> 1), v27);
        v29 = &v11[10 * a4];
        v30 = (uint64_t *)v27;
        v31 = v11;
        while (v30 != v29)
        {
          if (((unsigned int (*)(uint64_t *, uint64_t *))*a3)(v30, v31))
          {
            std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](v8, v30);
            v30 += 10;
          }
          else
          {
            std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](v8, v31);
            v31 += 10;
          }
          v8 += 80;
          if (v31 == (uint64_t *)v27)
          {
            if (v30 != v29)
            {
              v32 = 0;
              do
              {
                std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](v8 + v32 * 8, &v30[v32]);
                v32 += 10;
              }
              while (&v30[v32] != v29);
            }
            goto LABEL_41;
          }
        }
        if (v31 != (uint64_t *)v27)
        {
          v33 = 0;
          do
          {
            std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](v8 + v33 * 8, &v31[v33]);
            v33 += 10;
          }
          while (&v31[v33] != (uint64_t *)v27);
        }
LABEL_41:
        if (v11)
        {
          v34 = a4;
          do
          {
            v35 = (WTF::StringImpl *)v11[5];
            v11[5] = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v28);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = (WTF::StringImpl *)*v11;
            *v11 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v28);
              else
                *(_DWORD *)v36 -= 2;
            }
            v11 += 10;
            --v34;
          }
          while (v34);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(a1, v13, a3, v14, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(v8 + 80 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v11, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(v8, (WTF::StringImpl **)(v8 + 80 * (a4 >> 1)), (WTF::StringImpl **)a2, (uint64_t (**)(uint64_t, uint64_t, __n128))a3, a4 >> 1, a4 - (a4 >> 1), (uint64_t)v11, a6);
      }
    }
  }
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(uint64_t *a1, uint64_t *a2, unsigned int (**a3)(uint64_t *, uint64_t, __n128), unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  __n128 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  if (a4)
  {
    v5 = a5;
    v9 = a1;
    if (a4 == 2)
    {
      v11 = a2 - 10;
      if (!((unsigned int (*)(uint64_t *, uint64_t *))*a3)(a2 - 10, a1))
      {
        std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](v5, v9);
        v10 = v5 + 80;
        v12 = v11;
        goto LABEL_23;
      }
      std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](v5, v11);
      v10 = v5 + 80;
LABEL_7:
      v12 = v9;
LABEL_23:
      std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](v10, v12);
      return;
    }
    if (a4 == 1)
    {
      v10 = a5;
      goto LABEL_7;
    }
    if ((uint64_t)a4 > 8)
    {
      v20 = &a1[10 * (a4 >> 1)];
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(a1, v20, a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(&v9[10 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v5 + 80 * (a4 >> 1), a4 - (a4 >> 1));
      v21 = &v9[10 * (a4 >> 1)];
      while (v21 != a2)
      {
        if (((unsigned int (*)(uint64_t *, uint64_t *))*a3)(v21, v9))
        {
          std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](v5, v21);
          v21 += 10;
        }
        else
        {
          std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](v5, v9);
          v9 += 10;
        }
        v5 += 80;
        if (v9 == v20)
        {
          if (v21 != a2)
          {
            v22 = 0;
            do
            {
              std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](v5 + v22 * 8, &v21[v22]);
              v22 += 10;
            }
            while (&v21[v22] != a2);
          }
          return;
        }
      }
      if (v9 != v20)
      {
        v23 = 0;
        do
        {
          std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](v5 + v23 * 8, &v9[v23]);
          v23 += 10;
        }
        while (&v9[v23] != v20);
      }
    }
    else if (a1 != a2)
    {
      v13.n128_f64[0] = std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](a5, a1);
      v14 = v9 + 10;
      if (v14 != a2)
      {
        v15 = 0;
        v16 = (uint64_t *)v5;
        do
        {
          if ((*a3)(v14, (uint64_t)v16, v13))
          {
            v17.n128_f64[0] = std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100]((uint64_t)(v16 + 10), v16);
            v18 = v5;
            if (v16 != (uint64_t *)v5)
            {
              v19 = v15;
              while (1)
              {
                v18 = v5 + v19;
                if (!(*a3)(v14, v5 + v19 - 80, v17))
                  break;
                std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](v5 + v19, (uint64_t *)(v5 + v19 - 80));
                v19 -= 80;
                if (!v19)
                {
                  v18 = v5;
                  break;
                }
              }
            }
            std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](v18, v14);
          }
          else
          {
            v13.n128_f64[0] = std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100]((uint64_t)(v16 + 10), v14);
          }
          v14 += 10;
          v15 += 80;
          v16 += 10;
        }
        while (v14 != a2);
      }
    }
  }
}

void std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t (**a4)(uint64_t, uint64_t, __n128), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  unint64_t v24;
  WTF::StringImpl **v25;
  int v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl **i;
  uint64_t v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  __n128 v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v62 = a6;
  if (a6)
  {
    while (a5 > a8 && v62 > a8)
    {
      if (!a5)
        return;
      v15 = a1;
      while ((((uint64_t (*)(WTF::StringImpl **, uint64_t))*a4)(a2, a1) & 1) == 0)
      {
        a1 += 80;
        v15 += 80;
        if (!--a5)
          return;
      }
      v16 = v62;
      v61 = (uint64_t)a3;
      if (a5 >= v62)
      {
        if (a5 == 1)
        {
          std::swap[abi:sn180100]<WTF::URL>(a1, a2);
          std::swap[abi:sn180100]<WTF::URL>(a1 + 40, a2 + 5);
          return;
        }
        if (a5 >= 0)
          v21 = a5;
        else
          v21 = a5 + 1;
        v22 = v21 >> 1;
        v20 = a1 + 80 * (v21 >> 1);
        if (a3 == a2)
        {
          v27 = a3;
        }
        else
        {
          v54 = v21 >> 1;
          v59 = a8;
          v23 = *a4;
          v24 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 4);
          a3 = a2;
          do
          {
            v25 = &a3[10 * (v24 >> 1)];
            v26 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))v23)(v25, v20);
            if (v26)
              v24 += ~(v24 >> 1);
            else
              v24 >>= 1;
            if (v26)
              a3 = v25 + 10;
          }
          while (v24);
          v27 = a2;
          v22 = v54;
          a8 = v59;
          v16 = v62;
        }
        v18 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)v27) >> 4);
      }
      else
      {
        if (v62 >= 0)
          v17 = v62;
        else
          v17 = v62 + 1;
        v18 = v17 >> 1;
        a3 = &a2[10 * (v17 >> 1)];
        if ((WTF::StringImpl **)a1 == a2)
        {
          v20 = (uint64_t)a2;
          v15 = (uint64_t)a2;
        }
        else
        {
          v56 = v17 >> 1;
          v58 = a8;
          v19 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - v15) >> 4);
          v20 = a1;
          do
          {
            if (((unsigned int (*)(WTF::StringImpl **, unint64_t))*a4)(a3, v20 + 80 * (v19 >> 1)))
            {
              v19 >>= 1;
            }
            else
            {
              v20 += 80 * (v19 >> 1) + 80;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
          v18 = v56;
          a8 = v58;
          v16 = v62;
        }
        v22 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - v15) >> 4);
      }
      v28 = (uint64_t)a3;
      if ((WTF::StringImpl **)v20 != a2)
      {
        v28 = v20;
        if (a2 != a3)
        {
          v55 = v22;
          v57 = v18;
          std::swap[abi:sn180100]<WTF::URL>(v20, a2);
          std::swap[abi:sn180100]<WTF::URL>(v20 + 40, a2 + 5);
          v28 = v20 + 80;
          for (i = a2 + 10; i != a3; i += 10)
          {
            if ((WTF::StringImpl **)v28 == a2)
              a2 = i;
            std::swap[abi:sn180100]<WTF::URL>(v28, i);
            std::swap[abi:sn180100]<WTF::URL>(v28 + 40, i + 5);
            v28 += 80;
          }
          if ((WTF::StringImpl **)v28 == a2)
          {
            v28 = (uint64_t)a2;
          }
          else
          {
            v60 = a8;
            v30 = v28;
            v31 = a2;
            do
            {
              while (1)
              {
                std::swap[abi:sn180100]<WTF::URL>(v30, a2);
                std::swap[abi:sn180100]<WTF::URL>(v30 + 40, a2 + 5);
                v30 += 80;
                a2 += 10;
                if (a2 == a3)
                  break;
                if ((WTF::StringImpl **)v30 == v31)
                  v31 = a2;
              }
              a2 = v31;
            }
            while ((WTF::StringImpl **)v30 != v31);
            a8 = v60;
          }
          v16 = v62;
          v22 = v55;
          v18 = v57;
        }
      }
      v32 = a5 - v22;
      v33 = v16 - v18;
      if (v22 + v18 >= v16 - (v22 + v18) + a5)
      {
        v34 = v22;
        v35 = v32;
        v36 = v18;
        std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(v28, a3, v61, a4, v35, v16 - v18, a7, a8);
        a3 = (WTF::StringImpl **)v20;
        v33 = v36;
        v32 = v34;
        v61 = v28;
      }
      else
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::URL,WTF::URL> const&,std::pair<WTF::URL,WTF::URL> const&),std::pair<WTF::URL,WTF::URL>*>(a1, v20, v28, a4, v22, v18, a7, a8);
        a1 = v28;
      }
      a5 = v32;
      v62 = v33;
      a2 = a3;
      a3 = (WTF::StringImpl **)v61;
      if (!v33)
        return;
    }
    if (a5 <= v62)
    {
      if ((WTF::StringImpl **)a1 == a2)
        return;
      v45 = 0;
      v38 = 0;
      do
      {
        v46.n128_f64[0] = std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](a7 + v45, (uint64_t *)(a1 + v45));
        ++v38;
        v45 += 80;
      }
      while ((WTF::StringImpl **)(a1 + v45) != a2);
      if (v45)
      {
        v47 = (uint64_t *)(a7 + v45);
        v48 = (uint64_t *)a7;
        while (a2 != a3)
        {
          if ((*a4)((uint64_t)a2, (uint64_t)v48, v46))
          {
            std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](a1, (uint64_t *)a2);
            a2 += 10;
          }
          else
          {
            std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](a1, v48);
            v48 += 10;
          }
          a1 += 80;
          if (v47 == v48)
            goto LABEL_91;
        }
        v51 = 0;
        do
        {
          std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](a1 + v51 * 8, &v48[v51]);
          v51 += 10;
        }
        while (v47 - 10 != &v48[v51 - 10]);
      }
    }
    else
    {
      if (a2 == a3)
        return;
      v37 = 0;
      v38 = 0;
      do
      {
        v40.n128_f64[0] = std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](a7 + v37 * 8, (uint64_t *)&a2[v37]);
        ++v38;
        v37 += 10;
      }
      while (&a2[v37] != a3);
      if (v37 * 8)
      {
        v41 = a7 + v37 * 8;
        v42 = (uint64_t)(a3 - 10);
        while (a2 != (WTF::StringImpl **)a1)
        {
          v43 = (*a4)(v41 - 80, (uint64_t)(a2 - 10), v40);
          if (v43)
            v44 = (uint64_t *)(a2 - 10);
          else
            v44 = (uint64_t *)(v41 - 80);
          if (v43)
            a2 -= 10;
          else
            v41 -= 80;
          std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](v42, v44);
          v42 -= 80;
          if (v41 == a7)
            goto LABEL_91;
        }
        v49 = 0;
        do
        {
          v50 = v42 + v49;
          v49 -= 80;
          std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](v50, (uint64_t *)(v41 + v49));
        }
        while (v41 + v49 != a7);
      }
    }
LABEL_91:
    if (a7 && v38)
    {
      do
      {
        v52 = *(WTF::StringImpl **)(a7 + 40);
        *(_QWORD *)(a7 + 40) = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v39);
          else
            *(_DWORD *)v52 -= 2;
        }
        v53 = *(WTF::StringImpl **)a7;
        *(_QWORD *)a7 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, v39);
          else
            *(_DWORD *)v53 -= 2;
        }
        a7 += 80;
        --v38;
      }
      while (v38);
    }
  }
}

WTF::StringImpl *std::swap[abi:sn180100]<WTF::URL>(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  __int128 v5;
  __int128 v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  v5 = *(_OWORD *)(a1 + 8);
  v6 = *(_OWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v5 & 0xFFFFFFFE;
  v7 = *a2;
  *a2 = 0;
  v8 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      v14 = v6;
      v16 = v5;
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
      v6 = v14;
      v5 = v16;
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | (_DWORD)a2[1] & 1;
  v9 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v9 & 0xFFFFFFFE;
  v10 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v9 >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v10;
  v11 = v10 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v11;
  v12 = v11 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 8) = (_DWORD)a2[1] & 0xFFFFFFC0 | v12 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(WTF::StringImpl **)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  result = *a2;
  *a2 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      v15 = v6;
      v17 = v5;
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      v6 = v15;
      v5 = v17;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  *(_OWORD *)(a2 + 1) = v5;
  *(_OWORD *)(a2 + 3) = v6;
  return result;
}

uint64_t std::pair<WTF::URL,WTF::URL>::operator=[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  v6 = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6 & 0xFFFFFFFE;
  v7 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((v6 >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v7;
  v8 = v7 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v8;
  v9 = v8 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v9 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  v10 = a2[5];
  a2[5] = 0;
  v11 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 48) & 0xFFFFFFFE | a2[6] & 1;
  v12 = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v12 & 0xFFFFFFFE;
  v13 = *(_DWORD *)(a1 + 48) & 0xFFFFFFFD | (2 * ((v12 >> 1) & 1));
  *(_DWORD *)(a1 + 48) = v13;
  v14 = v13 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 12) >> 2) & 1));
  *(_DWORD *)(a1 + 48) = v14;
  v15 = v14 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 12) >> 3) & 7));
  *(_DWORD *)(a1 + 48) = v15;
  *(_DWORD *)(a1 + 48) = a2[6] & 0xFFFFFFC0 | v15 & 0x3F;
  *(_OWORD *)(a1 + 52) = *(_OWORD *)((char *)a2 + 52);
  *(_QWORD *)(a1 + 68) = *(uint64_t *)((char *)a2 + 68);
  *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
  return a1;
}

void WTF::Detail::CallableWrapper<WebCore::ApplicationCacheGroup::update(WebCore::LocalFrame &,WebCore::ApplicationCacheUpdateOption)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WebCore::ApplicationCacheResourceLoader::Error> &&>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  Inspector::IdentifiersFactory *v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WebCore::ApplicationCacheResourceLoader *v16;
  uint64_t v17;
  WebCore::SubstituteResource *v18;
  WebCore::ApplicationCacheResourceLoader *v19;
  uint64_t v20;
  Inspector::IdentifiersFactory *v21;
  _DWORD *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  Inspector::IdentifiersFactory *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  CFTypeRef v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _QWORD *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  BOOL v46;
  BOOL v47;
  int v48;
  WTF::StringImpl *v49;
  const WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t StatusReg;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WebCore *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  void *v61;
  void *v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  double v81;
  int v82;
  _DWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  Inspector::IdentifiersFactory *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  CFTypeRef v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint64_t *v97;
  unint64_t v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  uint64_t v106;
  Inspector::IdentifiersFactory *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  CFTypeRef v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  void *v116;
  _DWORD *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  WTF *v122;
  void *v123;
  WTF *v124;
  void *v125;
  WTF::StringImpl **v126;
  void *v127;
  WTF *v128;
  WTF::StringImpl **v129;
  uint64_t v130;
  uint64_t v131;
  const char *i;
  void *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  WebCore::ApplicationCache *v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  WebCore::DocumentLoader **v147;
  WebCore::DocumentLoader **v148;
  uint64_t v149;
  _QWORD *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  void *v153;
  _DWORD *v154;
  WTF::StringImpl *v155;
  WebCore::DocumentLoader **v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const WTF::StringImpl *v162;
  WTF::StringImpl **v163;
  WTF::StringImpl **v164;
  WTF::StringImpl **v165;
  void *v166;
  uint64_t v167;
  WebCore::ApplicationCacheStorage *v168;
  WTF *v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF *v173;
  WTF *v174;
  void *v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl **v182;
  WTF *v183;
  int v184;
  unsigned int v185;
  char v186;
  WTF::StringImpl *v187;
  int v188;
  __int16 v189;
  CFTypeRef cf;
  char v191;
  WTF::StringImpl **v192;
  char v193;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *((_DWORD *)a2 + 2);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = *(_DWORD *)a2;
      if (!*(_DWORD *)a2)
        return;
      if (v4 == 2)
      {
        v5 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 8);
        v6 = *(_DWORD **)(*(_QWORD *)(v5 + 280) + 88);
        if (v6)
          ++v6[6];
        v7 = *(Inspector::IdentifiersFactory **)(v2 + 184);
        v180 = 0;
        v181 = 0;
        WTF::URL::invalidate((WTF::URL *)&v181);
        v187 = 0;
        v188 = 0;
        v189 = 2;
        cf = 0;
        v191 = 1;
        WebCore::InspectorInstrumentation::didFailLoading(v5, (uint64_t)v6, v7, (WebCore::ResourceError *)&v180);
        v8 = cf;
        cf = 0;
        if (v8)
          CFRelease(v8);
        v9 = v187;
        v187 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, a2);
          else
            *(_DWORD *)v9 -= 2;
        }
        v10 = v181;
        v181 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        v11 = v180;
        v180 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::destroy(v11, a2);
            if (v6)
            {
LABEL_19:
              if (v6[6] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
              else
                --v6[6];
            }
LABEL_197:
            WebCore::ApplicationCacheGroup::stopLoading((WebCore::ApplicationCacheGroup *)v2, a2);
            v117 = *(_DWORD **)(v2 + 192);
            *(_QWORD *)(v2 + 192) = 0;
            if (v117)
            {
              if (v117[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v117 + 8))(v117);
              else
                --v117[2];
            }
            *(_DWORD *)(v2 + 160) = 2;
            WebCore::ApplicationCacheGroup::deliverDelayedMainResources((uint64_t *)v2, v116);
            return;
          }
          *(_DWORD *)v11 -= 2;
        }
        if (v6)
          goto LABEL_19;
        goto LABEL_197;
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 8);
      v21 = *(Inspector::IdentifiersFactory **)(v2 + 184);
      v22 = *(_DWORD **)(*(_QWORD *)(v20 + 280) + 88);
      if (v22)
        ++v22[6];
      v23 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 200) + 24) + 8) + 400);
      if (!v23)
      {
        v24 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
        if (v24 != -1)
        {
          v180 = (WTF::StringImpl *)&v193;
          v192 = &v180;
          std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v192, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
        }
        v23 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
      }
      v25 = *(_QWORD *)(v20 + 24);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26)
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v26 + 80) + 8);
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v27 + 8) + 16))(*(_QWORD *)(v27 + 8)))
          {
            v176 = *(WTF::StringImpl **)(v27 + 192);
            if (v176)
              WebCore::InspectorNetworkAgent::didReceiveResponse(v176, v21, (uint64_t)v22, (uint64_t)v23, 0);
            v177 = *(_QWORD *)(v27 + 16);
            if (v177)
              WebCore::WebConsoleAgent::didReceiveResponse(v177, (uint64_t)v21, (uint64_t)v23);
          }
        }
      }
      if (v22)
      {
        if (v22[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 24))(v22);
        else
          --v22[6];
      }
      switch(v4)
      {
        case 1:
          goto LABEL_197;
        case 3:
          v28 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 8);
          v29 = *(_QWORD *)(v28 + 280);
          v30 = *(_DWORD **)(v29 + 88);
          if (v30)
            ++v30[6];
          v31 = *(_QWORD *)(*(_QWORD *)(v2 + 200) + 24);
          if (v31)
            v31 = *(_QWORD *)(v31 + 8);
          v32 = *(Inspector::IdentifiersFactory **)(v2 + 184);
          (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v29 + 16) + 568))(&v180, *(_QWORD *)(v29 + 16), v31 + 160);
          LOBYTE(v189) = 3;
          v34 = *(_QWORD *)(v28 + 24);
          if (v34)
          {
            v35 = *(_QWORD *)(v34 + 8);
            if (v35)
              WebCore::InspectorInstrumentation::didFailLoadingImpl(*(_QWORD *)(*(_QWORD *)(v35 + 80) + 8), v32, (uint64_t)v30, (WebCore::ResourceError *)&v180);
          }
          v36 = cf;
          cf = 0;
          if (v36)
            CFRelease(v36);
          v37 = v187;
          v187 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v33);
            else
              *(_DWORD *)v37 -= 2;
          }
          v38 = v181;
          v181 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v33);
            else
              *(_DWORD *)v38 -= 2;
          }
          v39 = v180;
          v180 = 0;
          if (!v39)
            goto LABEL_68;
          if (*(_DWORD *)v39 == 2)
          {
            WTF::StringImpl::destroy(v39, v33);
            if (!v30)
              goto LABEL_71;
            goto LABEL_69;
          }
          *(_DWORD *)v39 -= 2;
LABEL_68:
          if (v30)
          {
LABEL_69:
            if (v30[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 24))(v30);
            else
              --v30[6];
          }
LABEL_71:
          v40 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + 144) + 8) + 296);
          v41 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 200) + 24) + 8) + 400);
          if (!v41)
          {
            v42 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
            if (v42 != -1)
            {
              v180 = (WTF::StringImpl *)&v193;
              v192 = &v180;
              std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v192, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
            }
            v41 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
          }
          WebCore::ResourceResponse::platformLazyInit((uint64_t)v41, 1);
          v43 = *((__int16 *)v41 + 68);
          if ((v43 & 0x80000000) != 0)
          {
            v178 = -v43;
            v44 = 1;
            do
            {
              ++v44;
              v77 = v178 >= 0xA;
              v178 /= 0xAu;
            }
            while (v77);
          }
          else
          {
            v44 = 0;
            v45 = *((__int16 *)v41 + 68);
            do
            {
              ++v44;
              v46 = v45 > 9;
              v45 /= 0xAu;
            }
            while (v46);
          }
          if (v44 < 0)
            goto LABEL_368;
          v47 = __OFADD__(v44, 10);
          v48 = v44 + 10;
          if (v47 || __OFADD__(v48, 76))
            goto LABEL_368;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v48 + 76), 1, (int8x16_t *)"Application Cache manifest could not be fetched, because the manifest had a ", 0x4Cu, v43, (int8x16_t *)" response.", 0xAu, &v180);
          if (!v180)
            goto LABEL_369;
          WebCore::Document::addConsoleMessage(v40, 5, 2, &v180, 0);
          v51 = v180;
          v180 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              v51 = (WTF::StringImpl *)WTF::StringImpl::destroy(v51, v49);
            else
              *(_DWORD *)v51 -= 2;
          }
          if (!*(_BYTE *)(v2 + 156))
          {
            *(_BYTE *)(v2 + 156) = 1;
            v51 = (WTF::StringImpl *)WebCore::ApplicationCacheStorage::cacheGroupMadeObsolete(*(WebCore::ApplicationCacheStorage **)(v2 + 16), (WebCore::ApplicationCacheGroup *)v2, v50);
          }
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          v53 = *(_QWORD *)(StatusReg + 736);
          if (!v53 || (v54 = *(_QWORD *)(v53 + 96)) == 0)
            v54 = WebCore::threadGlobalDataSlow(v51);
          v55 = *(_QWORD *)(v54 + 40);
          if (!v55)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v54);
            v55 = *(_QWORD *)(v54 + 40);
          }
          v56 = (WebCore *)WebCore::ApplicationCacheGroup::postListenerTask(v55 + 1352, 0, 0, *(_QWORD *)(v2 + 120));
          v57 = *(_QWORD *)(StatusReg + 736);
          if (!v57 || (v58 = *(_QWORD *)(v57 + 96)) == 0)
            v58 = WebCore::threadGlobalDataSlow(v56);
          v59 = *(_QWORD *)(v58 + 40);
          if (!v59)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v58);
            v59 = *(_QWORD *)(v58 + 40);
          }
          v60 = (uint64_t *)(v2 + 104);
          WebCore::ApplicationCacheGroup::postListenerTask(v59 + 784, 0, 0, *(_QWORD *)(v2 + 104));
          WebCore::ApplicationCacheGroup::stopLoading((WebCore::ApplicationCacheGroup *)v2, v61);
          v63 = *(_DWORD **)(v2 + 192);
          *(_QWORD *)(v2 + 192) = 0;
          if (v63)
          {
            if (v63[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
            else
              --v63[2];
          }
          v64 = *v60;
          if (!*v60)
          {
LABEL_201:
            *(_DWORD *)(v2 + 112) = 0;
            *(_DWORD *)(v2 + 72) = 0;
            v118 = *(unsigned int **)(v2 + 144);
            *(_QWORD *)(v2 + 144) = 0;
            if (v118)
            {
              do
              {
                v119 = __ldaxr(v118);
                v120 = v119 - 1;
              }
              while (__stlxr(v120, v118));
              if (!v120)
              {
                atomic_store(1u, v118);
                WTF::fastFree((WTF *)v118, v62);
              }
            }
            v121 = *(_QWORD *)(v2 + 88);
            if (!v121 || !*(_DWORD *)(v121 - 12))
              (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
            return;
          }
          while (1)
          {
            if (!*(_DWORD *)(v64 - 12))
              goto LABEL_201;
            v65 = *(unsigned int *)(v64 - 4);
            if ((_DWORD)v65)
            {
              v66 = 8 * v65;
              v67 = v64 + 8 * v65;
              while ((unint64_t)(*(_QWORD *)v64 + 1) <= 1)
              {
                v64 += 8;
                v66 -= 8;
                if (!v66)
                {
                  v64 = v67;
                  break;
                }
              }
            }
            v68 = *(_QWORD *)(*(_QWORD *)v64 + 2872);
            v69 = *(unsigned int **)(v68 + 48);
            *(_QWORD *)(v68 + 48) = 0;
            if (v69)
            {
              do
              {
                v70 = __ldaxr(v69);
                v71 = v70 - 1;
              }
              while (__stlxr(v71, v69));
              if (!v71)
              {
                atomic_store(1u, v69);
                WTF::fastFree((WTF *)v69, v62);
              }
            }
            v72 = *v60;
            if (*v60)
            {
              v73 = v72 + 8 * *(unsigned int *)(v72 - 4);
              if (v73 == v64)
                goto LABEL_126;
            }
            else
            {
              v73 = 0;
            }
            if (v73 != v64)
            {
              *(_QWORD *)v64 = -1;
              ++*(_DWORD *)(*v60 - 16);
              v74 = *v60;
              if (*v60)
                v75 = *(_DWORD *)(v74 - 12) - 1;
              else
                v75 = -1;
              *(_DWORD *)(v74 - 12) = v75;
              v72 = *v60;
              if (!*v60)
                goto LABEL_201;
              v76 = *(_DWORD *)(v72 - 4);
              v77 = 6 * *(_DWORD *)(v72 - 12) < v76 && v76 >= 9;
              if (v77)
              {
                WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash((uint64_t *)(v2 + 104), v76 >> 1);
                v72 = *v60;
              }
            }
LABEL_126:
            v64 = v72;
            if (!v72)
              goto LABEL_201;
          }
        case 4:
          v85 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 8);
          v86 = *(_QWORD *)(v85 + 280);
          v87 = *(_DWORD **)(v86 + 88);
          if (v87)
            ++v87[6];
          v88 = *(_QWORD *)(*(_QWORD *)(v2 + 200) + 24);
          if (v88)
            v88 = *(_QWORD *)(v88 + 8);
          v89 = *(Inspector::IdentifiersFactory **)(v2 + 184);
          (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v86 + 16) + 568))(&v180, *(_QWORD *)(v86 + 16), v88 + 160);
          LOBYTE(v189) = 3;
          v91 = *(_QWORD *)(v85 + 24);
          if (v91)
          {
            v92 = *(_QWORD *)(v91 + 8);
            if (v92)
              WebCore::InspectorInstrumentation::didFailLoadingImpl(*(_QWORD *)(*(_QWORD *)(v92 + 80) + 8), v89, (uint64_t)v87, (WebCore::ResourceError *)&v180);
          }
          v93 = cf;
          cf = 0;
          if (v93)
            CFRelease(v93);
          v94 = v187;
          v187 = 0;
          if (v94)
          {
            if (*(_DWORD *)v94 == 2)
              WTF::StringImpl::destroy(v94, v90);
            else
              *(_DWORD *)v94 -= 2;
          }
          v95 = v181;
          v181 = 0;
          if (v95)
          {
            if (*(_DWORD *)v95 == 2)
              WTF::StringImpl::destroy(v95, v90);
            else
              *(_DWORD *)v95 -= 2;
          }
          v96 = v180;
          v180 = 0;
          if (!v96)
            goto LABEL_156;
          if (*(_DWORD *)v96 == 2)
          {
            WTF::StringImpl::destroy(v96, v90);
            if (!v87)
              goto LABEL_159;
            goto LABEL_157;
          }
          *(_DWORD *)v96 -= 2;
LABEL_156:
          if (v87)
          {
LABEL_157:
            if (v87[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v87 + 24))(v87);
            else
              --v87[6];
          }
LABEL_159:
          v84 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + 144) + 8) + 296);
          v97 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 200) + 24) + 8) + 400);
          if (!v97)
          {
            v98 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
            if (v98 != -1)
            {
              v180 = (WTF::StringImpl *)&v193;
              v192 = &v180;
              std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v192, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
            }
            v97 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
          }
          WebCore::ResourceResponse::platformLazyInit((uint64_t)v97, 1);
          v99 = *((__int16 *)v97 + 68);
          if ((v99 & 0x80000000) != 0)
          {
            v179 = -v99;
            v100 = 1;
            do
            {
              ++v100;
              v77 = v179 >= 0xA;
              v179 /= 0xAu;
            }
            while (v77);
          }
          else
          {
            v100 = 0;
            v101 = *((__int16 *)v97 + 68);
            do
            {
              ++v100;
              v46 = v101 > 9;
              v101 /= 0xAu;
            }
            while (v46);
          }
          if (v100 < 0 || (v47 = __OFADD__(v100, 10), v102 = v100 + 10, v47) || __OFADD__(v102, 76))
          {
            v180 = 0;
LABEL_371:
            __break(0xC471u);
            JUMPOUT(0x195F3083CLL);
          }
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v102 + 76), 1, (int8x16_t *)"Application Cache manifest could not be fetched, because the manifest had a ", 0x4Cu, v99, (int8x16_t *)" response.", 0xAu, &v180);
          if (!v180)
            goto LABEL_371;
          goto LABEL_194;
        case 5:
          v103 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 8);
          v104 = *(_QWORD *)(v103 + 280);
          v105 = *(_DWORD **)(v104 + 88);
          if (v105)
            ++v105[6];
          v106 = *(_QWORD *)(*(_QWORD *)(v2 + 200) + 24);
          if (v106)
            v106 = *(_QWORD *)(v106 + 8);
          v107 = *(Inspector::IdentifiersFactory **)(v2 + 184);
          (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v104 + 16) + 568))(&v180, *(_QWORD *)(v104 + 16), v106 + 160);
          LOBYTE(v189) = 3;
          v109 = *(_QWORD *)(v103 + 24);
          if (v109)
          {
            v110 = *(_QWORD *)(v109 + 8);
            if (v110)
              WebCore::InspectorInstrumentation::didFailLoadingImpl(*(_QWORD *)(*(_QWORD *)(v110 + 80) + 8), v107, (uint64_t)v105, (WebCore::ResourceError *)&v180);
          }
          v111 = cf;
          cf = 0;
          if (v111)
            CFRelease(v111);
          v112 = v187;
          v187 = 0;
          if (v112)
          {
            if (*(_DWORD *)v112 == 2)
              WTF::StringImpl::destroy(v112, v108);
            else
              *(_DWORD *)v112 -= 2;
          }
          v113 = v181;
          v181 = 0;
          if (v113)
          {
            if (*(_DWORD *)v113 == 2)
              WTF::StringImpl::destroy(v113, v108);
            else
              *(_DWORD *)v113 -= 2;
          }
          v114 = v180;
          v180 = 0;
          if (!v114)
            goto LABEL_189;
          if (*(_DWORD *)v114 == 2)
          {
            WTF::StringImpl::destroy(v114, v108);
            if (!v105)
              goto LABEL_192;
            goto LABEL_190;
          }
          *(_DWORD *)v114 -= 2;
LABEL_189:
          if (v105)
          {
LABEL_190:
            if (v105[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v105 + 24))(v105);
            else
              --v105[6];
          }
LABEL_192:
          v84 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + 144) + 8) + 296);
          break;
        default:
          return;
      }
LABEL_193:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_194:
      WebCore::Document::addConsoleMessage(v84, 5, 2, &v180, 0);
      v115 = v180;
      v180 = 0;
      if (v115)
      {
        if (*(_DWORD *)v115 == 2)
          WTF::StringImpl::destroy(v115, a2);
        else
          *(_DWORD *)v115 -= 2;
      }
      goto LABEL_197;
    }
LABEL_367:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_368:
    v180 = 0;
LABEL_369:
    __break(0xC471u);
    JUMPOUT(0x195F30830);
  }
  v12 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v13 = *(_DWORD **)(v2 + 192);
  *(_QWORD *)(v2 + 192) = v12;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  v14 = *(_QWORD *)(v2 + 80);
  if (v14)
    v15 = (WTF::StringImpl **)WTF::RefPtr<WebCore::ApplicationCache,WTF::RawPtrTraits<WebCore::ApplicationCache>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCache>>::unspecifiedBoolTypeInstance;
  else
    v15 = 0;
  if (v15)
  {
    v16 = *(WebCore::ApplicationCacheResourceLoader **)(v2 + 200);
    *(_QWORD *)(v2 + 200) = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 4) == 1)
      {
        WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(v16, a2);
        WTF::fastFree(v122, v123);
        v14 = *(_QWORD *)(v2 + 80);
      }
      else
      {
        --*((_DWORD *)v16 + 4);
      }
    }
    v17 = *(_QWORD *)(v14 + 24);
    if (v17)
      v18 = *(WebCore::SubstituteResource **)(v17 + 8);
    else
      v18 = 0;
    if (!*(_QWORD *)(v2 + 192))
    {
      *(_DWORD *)(v2 + 160) = 1;
      *(_QWORD *)(v2 + 192) = 0;
LABEL_135:
      WebCore::ApplicationCacheGroup::deliverDelayedMainResources((uint64_t *)v2, a2);
      return;
    }
    v78 = WebCore::SubstituteResource::data(v18, a2);
    v80 = WebCore::SubstituteResource::data(*(WebCore::SubstituteResource **)(v2 + 192), v79);
    v81 = WebCore::FragmentedSharedBuffer::operator==(v78, v80);
    if (v82)
    {
      v83 = *(_DWORD **)(v2 + 192);
      *(_DWORD *)(v2 + 160) = 1;
      *(_QWORD *)(v2 + 192) = 0;
      if (v83)
      {
        if (v83[2] == 1)
          (*(void (**)(_DWORD *, double))(*(_QWORD *)v83 + 8))(v83, v81);
        else
          --v83[2];
      }
      goto LABEL_135;
    }
  }
  else
  {
    if (!*(_QWORD *)(v2 + 192))
    {
      v84 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + 144) + 8) + 296);
      goto LABEL_193;
    }
    v19 = *(WebCore::ApplicationCacheResourceLoader **)(v2 + 200);
    *(_QWORD *)(v2 + 200) = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 4) == 1)
      {
        WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(v19, a2);
        WTF::fastFree(v124, v125);
      }
      else
      {
        --*((_DWORD *)v19 + 4);
      }
    }
  }
  v126 = *(WTF::StringImpl ***)(v2 + 192);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)(v126 + 7), 1);
  v128 = (WTF *)WebCore::SubstituteResource::data(*(WebCore::SubstituteResource **)(v2 + 192), v127);
  WebCore::FragmentedSharedBuffer::makeContiguous(v128, &v192);
  v129 = v192;
  if (!*((_DWORD *)v192 + 5))
    goto LABEL_356;
  v130 = *((_QWORD *)v192[1] + 1);
  v131 = *(unsigned int *)(v130 + 24);
  if ((_DWORD)v131 == -1)
    goto LABEL_367;
  v180 = (WTF::StringImpl *)&v193;
  for (i = (const char *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v131])(&v180, v130 + 8); ; i = 0)
  {
    WebCore::parseApplicationCacheManifest((WTF::URL *)(v2 + 24), (uint64_t *)v126 + 12, i, (size_t)v129[6], (uint64_t)&v180);
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v192, v133);
    if (!(_BYTE)v187)
      break;
    v135 = WTF::fastMalloc((WTF *)0x58);
    *(_DWORD *)v135 = 1;
    *(_QWORD *)(v135 + 16) = 0;
    *(_QWORD *)(v135 + 24) = 0;
    *(_QWORD *)(v135 + 8) = 0;
    *(_BYTE *)(v135 + 32) = 0;
    *(_OWORD *)(v135 + 40) = 0u;
    *(_OWORD *)(v135 + 56) = 0u;
    *(_OWORD *)(v135 + 68) = 0u;
    v136 = *(WebCore::ApplicationCache **)(v2 + 96);
    *(_QWORD *)(v2 + 96) = v135;
    if (v136)
    {
      if (*(_DWORD *)v136 == 1)
      {
        WebCore::ApplicationCache::~ApplicationCache(v136, v134);
        WTF::fastFree(v174, v175);
        v135 = *(_QWORD *)(v2 + 96);
      }
      else
      {
        --*(_DWORD *)v136;
      }
    }
    v137 = *(_QWORD *)(v2 + 8);
    if (v137)
      goto LABEL_376;
    v137 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v137 = 1;
    *(_QWORD *)(v137 + 8) = v2;
    v138 = *(unsigned int **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = v137;
    if (!v138)
      goto LABEL_376;
    do
    {
      v139 = __ldaxr(v138);
      v140 = v139 - 1;
    }
    while (__stlxr(v140, v138));
    if (!v140)
    {
      atomic_store(1u, v138);
      WTF::fastFree((WTF *)v138, v134);
    }
    v137 = *(_QWORD *)(v2 + 8);
    if (v137)
    {
LABEL_376:
      do
        v141 = __ldaxr((unsigned int *)v137);
      while (__stlxr(v141 + 1, (unsigned int *)v137));
    }
    v142 = *(unsigned int **)(v135 + 8);
    *(_QWORD *)(v135 + 8) = v137;
    if (v142)
    {
      do
      {
        v143 = __ldaxr(v142);
        v144 = v143 - 1;
      }
      while (__stlxr(v144, v142));
      if (!v144)
      {
        atomic_store(1u, v142);
        v137 = WTF::fastFree((WTF *)v142, v134);
      }
    }
    v145 = *(_QWORD *)(v2 + 104);
    if (!v145)
    {
      v148 = 0;
      v146 = 0;
LABEL_251:
      v147 = (WebCore::DocumentLoader **)(v145 + 8 * v146);
      goto LABEL_252;
    }
    v146 = *(unsigned int *)(v145 - 4);
    v147 = (WebCore::DocumentLoader **)(v145 + 8 * v146);
    if (!*(_DWORD *)(v145 - 12))
    {
      v148 = (WebCore::DocumentLoader **)(v145 + 8 * v146);
      goto LABEL_251;
    }
    v148 = *(WebCore::DocumentLoader ***)(v2 + 104);
    if ((_DWORD)v146)
    {
      v149 = 8 * v146;
      v148 = *(WebCore::DocumentLoader ***)(v2 + 104);
      while ((unint64_t)*v148 + 1 <= 1)
      {
        ++v148;
        v149 -= 8;
        if (!v149)
        {
          v148 = v147;
          break;
        }
      }
    }
LABEL_252:
    if (v145)
      v129 = (WTF::StringImpl **)(v145 + 8 * *(unsigned int *)(v145 - 4));
    else
      v129 = 0;
    while (v148 != v129)
    {
      v156 = v148 + 1;
      v137 = (uint64_t)WebCore::ApplicationCacheGroup::associateDocumentLoaderWithCache((WebCore::ApplicationCacheGroup *)v2, *v148, *(WebCore::ApplicationCache **)(v2 + 96));
      v148 = v147;
      if (v156 != v147)
      {
        v148 = v156;
        while ((unint64_t)*v148 + 1 <= 1)
        {
          if (++v148 == v147)
          {
            v148 = v147;
            break;
          }
        }
      }
    }
    *(_DWORD *)(v2 + 72) = 2;
    v157 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v157 || (v126 = *(WTF::StringImpl ***)(v157 + 96)) == 0)
      v126 = (WTF::StringImpl **)WebCore::threadGlobalDataSlow((WebCore *)v137);
    v158 = v126[5];
    if (!v158)
    {
      WebCore::ThreadGlobalData::initializeEventNames(v126);
      v158 = v126[5];
    }
    WebCore::ApplicationCacheGroup::postListenerTask((uint64_t)v158 + 648, 0, 0, *(_QWORD *)(v2 + 120));
    if (v15)
    {
      v159 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + 16);
      if (v159)
      {
        v160 = *(unsigned int *)(v159 - 4);
        v15 = (WTF::StringImpl **)(v159 + 16 * v160);
        if (*(_DWORD *)(v159 - 12))
        {
          v126 = *(WTF::StringImpl ***)(*(_QWORD *)(v2 + 80) + 16);
          if ((_DWORD)v160)
          {
            v161 = 16 * v160;
            v126 = *(WTF::StringImpl ***)(*(_QWORD *)(v2 + 80) + 16);
            while ((unint64_t)*v126 + 1 <= 1)
            {
              v126 += 2;
              v161 -= 16;
              if (!v161)
              {
                v126 = v15;
                goto LABEL_278;
              }
            }
          }
          goto LABEL_278;
        }
        v126 = (WTF::StringImpl **)(v159 + 16 * v160);
      }
      else
      {
        v126 = 0;
        v160 = 0;
      }
      v15 = (WTF::StringImpl **)(v159 + 16 * v160);
LABEL_278:
      if (v159)
        v129 = (WTF::StringImpl **)(v159 + 16 * *(unsigned int *)(v159 - 4));
      else
        v129 = 0;
      while (v126 != v129)
      {
        v162 = (const WTF::StringImpl *)*((unsigned int *)v126[1] + 82);
        if ((v162 & 1) != 0)
          WebCore::ApplicationCacheGroup::addEntry((WebCore::ApplicationCacheGroup *)v2, v126, v162);
        v163 = v126 + 2;
        v126 = v15;
        if (v163 != v15)
        {
          v126 = v163;
          while ((unint64_t)*v126 + 1 <= 1)
          {
            v126 += 2;
            if (v126 == v15)
            {
              v126 = v15;
              break;
            }
          }
        }
      }
    }
    if ((_BYTE)v187)
    {
      v164 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(&v182);
      v15 = v164;
      v126 = v165;
      if (v182)
        v129 = &v182[*((unsigned int *)v182 - 1)];
      else
        v129 = 0;
      if (v129 != v164)
      {
        do
        {
          WebCore::ApplicationCacheGroup::addEntry((WebCore::ApplicationCacheGroup *)v2, v15, (const WTF::StringImpl *)4);
          while (++v15 != v126)
          {
            if ((unint64_t)*v15 + 1 > 1)
              goto LABEL_299;
          }
          v15 = v126;
LABEL_299:
          ;
        }
        while (v15 != v129);
      }
      if ((_BYTE)v187)
      {
        if (!v185)
          goto LABEL_377;
        v15 = (WTF::StringImpl **)(80 * v185);
        v126 = (WTF::StringImpl **)((char *)v183 + 40);
        do
        {
          WebCore::ApplicationCacheGroup::addEntry((WebCore::ApplicationCacheGroup *)v2, v126, (const WTF::StringImpl *)0x10);
          v126 += 10;
          v15 -= 10;
        }
        while (v15);
        if ((_BYTE)v187)
        {
LABEL_377:
          WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(*(_QWORD *)(v2 + 96) + 40), (uint64_t)&v180);
          if ((_BYTE)v187)
          {
            WebCore::ApplicationCache::setFallbackURLs(*(_QWORD *)(v2 + 96), (unsigned int *)&v183);
            if ((_BYTE)v187)
            {
              *(_BYTE *)(*(_QWORD *)(v2 + 96) + 32) = v186;
              v167 = *(_QWORD *)(v2 + 128);
              if (v167)
                LODWORD(v167) = *(_DWORD *)(v167 - 12);
              *(_DWORD *)(v2 + 136) = v167;
              *(_DWORD *)(v2 + 140) = 0;
              v168 = *(WebCore::ApplicationCacheStorage **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 144)
                                                                                              + 8)
                                                                                  + 24)
                                                                      + 8)
                                                          + 896);
              if (v168
                && (WebCore::ApplicationCacheStorage::calculateRemainingSizeForOriginExcludingCache(v168, *(const WebCore::SecurityOrigin **)(v2 + 64), *(WebCore::ApplicationCache **)(v2 + 80), (uint64_t *)(v2 + 208)) & 1) == 0)
              {
                *(_QWORD *)(v2 + 208) = 0x7FFFFFFFFFFFFFFFLL;
              }
              WebCore::ApplicationCacheGroup::startLoadingEntry((WebCore::ApplicationCacheGroup *)v2, v166);
              goto LABEL_313;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_356:
    ;
  }
  v150 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + 144) + 8) + 296);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::Document::addConsoleMessage(v150, 5, 2, (WTF::StringImpl **)&v192, 0);
  v152 = (WTF::StringImpl *)v192;
  v192 = 0;
  if (v152)
  {
    if (*(_DWORD *)v152 == 2)
      WTF::StringImpl::destroy(v152, v151);
    else
      *(_DWORD *)v152 -= 2;
  }
  WebCore::ApplicationCacheGroup::stopLoading((WebCore::ApplicationCacheGroup *)v2, v151);
  v154 = *(_DWORD **)(v2 + 192);
  *(_QWORD *)(v2 + 192) = 0;
  if (v154)
  {
    if (v154[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v154 + 8))(v154);
    else
      --v154[2];
  }
  *(_DWORD *)(v2 + 160) = 2;
  WebCore::ApplicationCacheGroup::deliverDelayedMainResources((uint64_t *)v2, v153);
LABEL_313:
  if ((_BYTE)v187)
  {
    if (v185)
    {
      v169 = v183;
      v170 = 80 * v185;
      do
      {
        v171 = (WTF::StringImpl *)*((_QWORD *)v169 + 5);
        *((_QWORD *)v169 + 5) = 0;
        if (v171)
        {
          if (*(_DWORD *)v171 == 2)
            WTF::StringImpl::destroy(v171, v155);
          else
            *(_DWORD *)v171 -= 2;
        }
        v172 = *(WTF::StringImpl **)v169;
        *(_QWORD *)v169 = 0;
        if (v172)
        {
          if (*(_DWORD *)v172 == 2)
            WTF::StringImpl::destroy(v172, v155);
          else
            *(_DWORD *)v172 -= 2;
        }
        v169 = (WTF *)((char *)v169 + 80);
        v170 -= 80;
      }
      while (v170);
    }
    v173 = v183;
    if (v183)
    {
      v183 = 0;
      v184 = 0;
      WTF::fastFree(v173, v155);
    }
    if (v182)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v182, v155);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v180, v155);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ApplicationCacheGroup::startLoadingEntry(void)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WebCore::ApplicationCacheResourceLoader::Error> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E33F7E78;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplicationCacheGroup::startLoadingEntry(void)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WebCore::ApplicationCacheResourceLoader::Error> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E33F7E78;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::ApplicationCacheGroup::startLoadingEntry(void)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WebCore::ApplicationCacheResourceLoader::Error> &&>::call(WTF::StringImpl *result, int *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  __int128 v17;
  const WTF::StringImpl *v18;
  _DWORD *v19;
  void *v20;
  const WTF::StringImpl *v21;
  _QWORD *v22;
  uint64_t v23;
  int8x16_t *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  Inspector::IdentifiersFactory *v30;
  WTF::StringImpl **v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int j;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int v51;
  BOOL v52;
  int v53;
  _BOOL4 v54;
  void *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  void *v59;
  _DWORD *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int i;
  uint64_t v67;
  WTF *v68;
  _DWORD **v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  void *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF *v76;
  unsigned int v77;
  unsigned int v78;
  WTF::StringImpl *v79;
  CFTypeRef v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl **v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WebCore::ApplicationCacheResourceLoader *v86;
  _DWORD *v87;
  _QWORD *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  void *v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  WTF *v98;
  void *v99;
  int k;
  uint64_t v101;
  WTF *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  void *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  unsigned int v111;
  unsigned int v112;
  WebCore::ApplicationCacheResourceLoader *v113;
  _DWORD *v114;
  WTF *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  WTF *v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  WTF *v138;
  unsigned int v140;
  WTF *v141;
  WTF::StringImpl *v142;
  __int128 v143;
  __int128 v144;
  WTF::StringImpl *v145[3];
  WTF::StringImpl *v146;
  WTF::StringImpl *v147[2];
  __int128 v148;
  __int128 v149;
  WTF::StringImpl *v150[2];
  CFTypeRef cf[2];
  WTF::StringImpl *v152[2];
  int v153;
  uint64_t v154;
  uint64_t v155;
  _DWORD *v156;

  v4 = result;
  v5 = *((_QWORD *)result + 1);
  v6 = a2[2];
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = *a2;
      if (!*a2)
        return result;
      v8 = *((_DWORD *)result + 14);
      if (v7 == 2)
        v9 = 2;
      else
        v9 = 1;
      v147[0] = 0;
      v147[1] = 0;
      WTF::URL::invalidate((WTF::URL *)&v147[1]);
      v150[0] = 0;
      LODWORD(v150[1]) = 0;
      WORD2(v150[1]) = v9;
      cf[0] = 0;
      LOBYTE(cf[1]) = 1;
      v10 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 8);
      v11 = *(_DWORD **)(*(_QWORD *)(v10 + 280) + 88);
      if (v11)
      {
        v12 = v11[6] + 1;
        v11[6] = v12;
        v13 = *(_QWORD *)(v10 + 24);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
          {
            WebCore::InspectorInstrumentation::didFailLoadingImpl(*(_QWORD *)(*(_QWORD *)(v14 + 80) + 8), *(Inspector::IdentifiersFactory **)(v5 + 184), (uint64_t)v11, (WebCore::ResourceError *)v147);
            v12 = v11[6];
          }
        }
        v15 = v12 - 1;
        if (v15)
          v11[6] = v15;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 24))(v11);
      }
      else
      {
        v120 = *(_QWORD *)(v10 + 24);
        if (v120)
        {
          v121 = *(_QWORD *)(v120 + 8);
          if (v121)
            WebCore::InspectorInstrumentation::didFailLoadingImpl(*(_QWORD *)(*(_QWORD *)(v121 + 80) + 8), *(Inspector::IdentifiersFactory **)(v5 + 184), 0, (WebCore::ResourceError *)v147);
        }
      }
      v16 = (WTF::StringImpl *)*((_QWORD *)v4 + 2);
      if (v16)
        *(_DWORD *)v16 += 2;
      v142 = v16;
      v17 = *(_OWORD *)((char *)v4 + 40);
      v143 = *(_OWORD *)((char *)v4 + 24);
      v144 = v17;
      WTF::URL::removeFragmentIdentifier((WTF::URL *)&v142);
      v19 = *(_DWORD **)(v5 + 168);
      *(_QWORD *)(v5 + 168) = 0;
      if (v19)
      {
        if (v19[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
        else
          --v19[2];
      }
      WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove(v5 + 128, &v142, v18);
      if ((v8 & 0x14) == 0)
      {
        if (v7 == 3)
        {
          WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove(v5 + 128, &v142, v21);
        }
        else
        {
          v62 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 16);
          if (v62)
          {
            v63 = *(_DWORD *)(v62 - 8);
            v64 = *((_DWORD *)v142 + 4);
            if (v64 < 0x100)
              v65 = WTF::StringImpl::hashSlowCase(v142);
            else
              v65 = v64 >> 8;
            for (i = 0; ; v65 = i + v67)
            {
              v67 = v65 & v63;
              v68 = *(WTF **)(v62 + 16 * v67);
              if (v68 != (WTF *)-1)
              {
                if (!v68)
                  goto LABEL_94;
                if ((WTF::equal(v68, v142, v21) & 1) != 0)
                  break;
              }
              ++i;
            }
            v69 = *(_DWORD ***)(v62 + 16 * v67 + 8);
          }
          else
          {
LABEL_94:
            v69 = 0;
          }
          v70 = *(_QWORD *)(v5 + 96);
          v71 = (unsigned int *)WebCore::SubstituteResource::data((WebCore::SubstituteResource *)v69, v20);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 + 1, v71));
          v141 = (WTF *)v71;
          WebCore::ApplicationCacheResource::create((WebCore::ResourceResponseBase *)(v69 + 7), (uint64_t)&v142, v8, (unsigned int **)&v141, v69 + 43, (uint64_t *)&v146);
          v74 = v146;
          if (*(_DWORD *)(v70 + 80))
            WebCore::ApplicationCacheStorage::store(*(sqlite3 ***)(*(_QWORD *)(*(_QWORD *)(v70 + 8) + 8) + 16), v146, (WebCore::ApplicationCache *)v70);
          *(_QWORD *)(v70 + 72) += WebCore::ApplicationCacheResource::estimatedSizeInStorage(v146, v73);
          WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>((uint64_t *)(v70 + 16), (WTF::StringImpl **)v74 + 2, (const WTF::StringImpl *)&v146, (uint64_t)v145);
          v75 = v146;
          v146 = 0;
          if (v75)
          {
            if (*((_DWORD *)v75 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v75 + 8))(v75);
            else
              --*((_DWORD *)v75 + 2);
          }
          v76 = v141;
          v141 = 0;
          if (v76)
          {
            do
            {
              v77 = __ldaxr((unsigned int *)v76);
              v78 = v77 - 1;
            }
            while (__stlxr(v78, (unsigned int *)v76));
            if (!v78)
            {
              atomic_store(1u, (unsigned int *)v76);
              v122 = *((unsigned int *)v76 + 5);
              if ((_DWORD)v122)
              {
                v123 = *((_QWORD *)v76 + 1);
                v124 = v123 + 16 * v122;
                do
                {
                  v125 = *(unsigned int **)(v123 + 8);
                  *(_QWORD *)(v123 + 8) = 0;
                  if (v125)
                  {
                    do
                    {
                      v126 = __ldaxr(v125);
                      v127 = v126 - 1;
                    }
                    while (__stlxr(v127, v125));
                    if (!v127)
                    {
                      atomic_store(1u, v125);
                      v128 = v125[6];
                      if ((_DWORD)v128 != -1)
                        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F7AE0[v128])(v145, v125 + 2);
                      v125[6] = -1;
                      WTF::fastFree((WTF *)v125, v55);
                    }
                  }
                  v123 += 16;
                }
                while (v123 != v124);
              }
              v129 = (WTF *)*((_QWORD *)v76 + 1);
              if ((WTF *)((char *)v76 + 24) != v129 && v129 != 0)
              {
                *((_QWORD *)v76 + 1) = 0;
                *((_DWORD *)v76 + 4) = 0;
                WTF::fastFree(v129, v55);
              }
              WTF::fastFree(v76, v55);
            }
          }
        }
        WebCore::ApplicationCacheGroup::startLoadingEntry((WebCore::ApplicationCacheGroup *)v5, v55);
        goto LABEL_107;
      }
      v22 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v5 + 144) + 8) + 296);
      WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)&v142);
      v23 = *(_QWORD *)(v5 + 176);
      if (v23 && *(_BYTE *)(v23 + 48))
      {
        v24 = (int8x16_t *)" was redirected.";
        v25 = 17;
      }
      else
      {
        v24 = (int8x16_t *)" could not be fetched.";
        v25 = 23;
      }
      v140 = v25 - 1;
      if ((unint64_t)(v25 - 1) >> 31)
      {
LABEL_233:
        __break(0xC471u);
        JUMPOUT(0x195F314CCLL);
      }
      if (v146)
      {
        v51 = *((_DWORD *)v146 + 1);
        if (v51 < 0)
          goto LABEL_230;
      }
      else
      {
        v51 = 0;
      }
      v52 = __OFADD__(v51, v140);
      v53 = v51 + v140;
      if (!v52 && !__OFADD__(v53, 41))
      {
        v54 = !v146 || (*((_BYTE *)v146 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v53 + 41), v54, (int8x16_t *)"Application Cache update failed, because ", 0x29u, (uint64_t)v146, v24, v140, v145);
        if (!v145[0])
          goto LABEL_233;
        WebCore::Document::addConsoleMessage(v22, 5, 2, v145, 0);
        v57 = v145[0];
        v145[0] = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v56);
          else
            *(_DWORD *)v57 -= 2;
        }
        v58 = v146;
        v146 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, v56);
          else
            *(_DWORD *)v58 -= 2;
        }
        WebCore::ApplicationCacheGroup::stopLoading((WebCore::ApplicationCacheGroup *)v5, v56);
        v60 = *(_DWORD **)(v5 + 192);
        *(_QWORD *)(v5 + 192) = 0;
        if (v60)
        {
          if (v60[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v60 + 8))(v60);
          else
            --v60[2];
        }
        *(_DWORD *)(v5 + 160) = 2;
        WebCore::ApplicationCacheGroup::deliverDelayedMainResources((uint64_t *)v5, v59);
LABEL_107:
        v79 = v142;
        v142 = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2)
            WTF::StringImpl::destroy(v79, v61);
          else
            *(_DWORD *)v79 -= 2;
        }
        v80 = cf[0];
        cf[0] = 0;
        if (v80)
          CFRelease(v80);
        v81 = v150[0];
        v150[0] = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
            WTF::StringImpl::destroy(v81, v61);
          else
            *(_DWORD *)v81 -= 2;
        }
        v82 = v147[1];
        v147[1] = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 2)
            WTF::StringImpl::destroy(v82, v61);
          else
            *(_DWORD *)v82 -= 2;
        }
        result = v147[0];
        v147[0] = 0;
        if (result)
          goto LABEL_179;
        return result;
      }
LABEL_230:
      v145[0] = 0;
      goto LABEL_233;
    }
    v138 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_229;
  }
  v26 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v27 = *(_DWORD **)(v5 + 168);
  *(_QWORD *)(v5 + 168) = v26;
  if (v27)
  {
    if (v27[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
    else
      --v27[2];
  }
  v153 = 0;
  *(_OWORD *)cf = 0u;
  *(_OWORD *)v152 = 0u;
  v149 = 0u;
  *(_OWORD *)v150 = 0u;
  *(_OWORD *)v147 = 0u;
  v148 = 0u;
  v154 = -1;
  v155 = -1;
  v156 = 0;
  v28 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 8);
  v29 = *(_DWORD **)(*(_QWORD *)(v28 + 280) + 88);
  if (v29)
    ++v29[6];
  v30 = *(Inspector::IdentifiersFactory **)(v5 + 184);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v117 = *(_QWORD *)(v28 + 24);
    if (v117)
    {
      v118 = *(_QWORD *)(v117 + 8);
      if (v118)
      {
        v119 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v118 + 80) + 8) + 192);
        if (v119)
          WebCore::InspectorNetworkAgent::didFinishLoading(v119, v30, (uint64_t)v29, (uint64_t)v147);
      }
    }
  }
  if (v29)
  {
    if (v29[6] == 1)
      (*(void (**)(_DWORD *, Inspector::IdentifiersFactory *))(*(_QWORD *)v29 + 24))(v29, v30);
    else
      --v29[6];
  }
  v32 = (WTF::StringImpl **)((char *)v4 + 16);
  v34 = (uint64_t *)(v5 + 128);
  v33 = *(_QWORD *)(v5 + 128);
  if (!v33)
    goto LABEL_128;
  v35 = *(_DWORD *)(v33 - 8);
  v36 = *((_DWORD *)*v32 + 4);
  if (v36 < 0x100)
    v37 = WTF::StringImpl::hashSlowCase(*v32);
  else
    v37 = v36 >> 8;
  for (j = 0; ; v37 = j + v39)
  {
    v39 = v37 & v35;
    v40 = *(WTF **)(v33 + 16 * v39);
    if (v40 == (WTF *)-1)
      goto LABEL_39;
    if (!v40)
      break;
    if ((WTF::equal(v40, *v32, a3) & 1) != 0)
    {
      v41 = v33 + 16 * v39;
      v42 = *v34;
      if (*v34)
      {
        v43 = *(unsigned int *)(v42 - 4);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
LABEL_39:
    ++j;
  }
  v42 = *v34;
  if (!*v34)
    goto LABEL_127;
  v43 = *(unsigned int *)(v42 - 4);
  v41 = v42 + 16 * v43;
LABEL_42:
  if (v42 + 16 * v43 == v41)
  {
LABEL_127:
    LODWORD(v33) = 0;
    goto LABEL_128;
  }
LABEL_43:
  LODWORD(v33) = *(_DWORD *)(v41 + 8);
  v44 = *(WTF::StringImpl **)v41;
  *(_QWORD *)v41 = -1;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v30);
    else
      *(_DWORD *)v44 -= 2;
  }
  ++*(_DWORD *)(*v34 - 16);
  v45 = *v34;
  if (*v34)
    v46 = *(_DWORD *)(v45 - 12) - 1;
  else
    v46 = -1;
  *(_DWORD *)(v45 - 12) = v46;
  v47 = *v34;
  if (*v34)
  {
    v48 = 6 * *(_DWORD *)(v47 - 12);
    v49 = *(_DWORD *)(v47 - 4);
    if (v48 < v49 && v49 >= 9)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)(v5 + 128), v49 >> 1, 0);
  }
LABEL_128:
  v83 = *(WTF::StringImpl ***)(v5 + 168);
  if (!v83)
  {
    v93 = *(_QWORD *)(v5 + 80);
    if (!v93)
      goto LABEL_172;
    v94 = *(_QWORD *)(v93 + 16);
    if (!v94)
      goto LABEL_172;
    v95 = *(_DWORD *)(v94 - 8);
    v96 = *((_DWORD *)*v32 + 4);
    v97 = v96 < 0x100 ? WTF::StringImpl::hashSlowCase(*v32) : v96 >> 8;
    for (k = 0; ; v97 = ++k + v101)
    {
      v101 = v97 & v95;
      v102 = *(WTF **)(v94 + 16 * v101);
      if (v102 != (WTF *)-1)
      {
        if (!v102)
          goto LABEL_172;
        if ((WTF::equal(v102, *v32, a3) & 1) != 0)
          break;
      }
    }
    v103 = v94 + 16 * v101;
    v104 = *(_QWORD *)(v103 + 8);
    if (!v104)
      goto LABEL_172;
    v105 = *(_QWORD *)(v5 + 96);
    v106 = (unsigned int *)WebCore::SubstituteResource::data(*(WebCore::SubstituteResource **)(v103 + 8), v30);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 + 1, v106));
    v146 = (WTF::StringImpl *)v106;
    WebCore::ApplicationCacheResource::create((WebCore::ResourceResponseBase *)(v104 + 56), (uint64_t)v32, v33, (unsigned int **)&v146, (_DWORD **)(v104 + 344), (uint64_t *)v145);
    v109 = v145[0];
    if (*(_DWORD *)(v105 + 80))
      WebCore::ApplicationCacheStorage::store(*(sqlite3 ***)(*(_QWORD *)(*(_QWORD *)(v105 + 8) + 8) + 16), v145[0], (WebCore::ApplicationCache *)v105);
    *(_QWORD *)(v105 + 72) += WebCore::ApplicationCacheResource::estimatedSizeInStorage(v145[0], v108);
    WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>((uint64_t *)(v105 + 16), (WTF::StringImpl **)v109 + 2, (const WTF::StringImpl *)v145, (uint64_t)&v142);
    v110 = v145[0];
    v145[0] = 0;
    if (v110)
    {
      if (*((_DWORD *)v110 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v110 + 8))(v110);
      else
        --*((_DWORD *)v110 + 2);
    }
    v3 = v146;
    v146 = 0;
    if (!v3)
      goto LABEL_172;
    do
    {
      v111 = __ldaxr((unsigned int *)v3);
      v112 = v111 - 1;
    }
    while (__stlxr(v112, (unsigned int *)v3));
    if (v112)
      goto LABEL_172;
    atomic_store(1u, (unsigned int *)v3);
    v131 = *((unsigned int *)v3 + 5);
    if ((_DWORD)v131)
    {
      v132 = *((_QWORD *)v3 + 1);
      v133 = v132 + 16 * v131;
      do
      {
        v134 = *(unsigned int **)(v132 + 8);
        *(_QWORD *)(v132 + 8) = 0;
        if (v134)
        {
          do
          {
            v135 = __ldaxr(v134);
            v136 = v135 - 1;
          }
          while (__stlxr(v136, v134));
          if (!v136)
          {
            atomic_store(1u, v134);
            v137 = v134[6];
            if ((_DWORD)v137 != -1)
              ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F7AE0[v137])(&v142, v134 + 2);
            v134[6] = -1;
            WTF::fastFree((WTF *)v134, v30);
          }
        }
        v132 += 16;
      }
      while (v132 != v133);
    }
    v138 = (WTF *)*((_QWORD *)v3 + 1);
    if ((WTF::StringImpl *)((char *)v3 + 24) == v138 || v138 == 0)
    {
LABEL_227:
      WTF::fastFree(v3, v30);
LABEL_172:
      v113 = *(WebCore::ApplicationCacheResourceLoader **)(v5 + 176);
      *(_QWORD *)(v5 + 176) = 0;
      if (v113)
      {
        if (*((_DWORD *)v113 + 4) == 1)
        {
          WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(v113, v30);
          WTF::fastFree(v115, v116);
        }
        else
        {
          --*((_DWORD *)v113 + 4);
        }
      }
LABEL_175:
      WebCore::ApplicationCacheGroup::startLoadingEntry((WebCore::ApplicationCacheGroup *)v5, v30);
      goto LABEL_176;
    }
LABEL_229:
    *((_QWORD *)v3 + 1) = 0;
    *((_DWORD *)v3 + 4) = 0;
    WTF::fastFree(v138, v30);
    goto LABEL_227;
  }
  v84 = *(_QWORD *)(v5 + 96);
  v145[0] = *(WTF::StringImpl **)(v5 + 168);
  *(_QWORD *)(v5 + 168) = 0;
  if (*(_DWORD *)(v84 + 80))
    WebCore::ApplicationCacheStorage::store(*(sqlite3 ***)(*(_QWORD *)(*(_QWORD *)(v84 + 8) + 8) + 16), (WebCore::ApplicationCacheResource *)v83, (WebCore::ApplicationCache *)v84);
  *(_QWORD *)(v84 + 72) += WebCore::ApplicationCacheResource::estimatedSizeInStorage((WebCore::ApplicationCacheResource *)v83, v30);
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>((uint64_t *)(v84 + 16), v83 + 2, (const WTF::StringImpl *)v145, (uint64_t)&v142);
  v85 = v145[0];
  v145[0] = 0;
  if (v85)
  {
    if (*((_DWORD *)v85 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v85 + 8))(v85);
    else
      --*((_DWORD *)v85 + 2);
  }
  v86 = *(WebCore::ApplicationCacheResourceLoader **)(v5 + 176);
  *(_QWORD *)(v5 + 176) = 0;
  if (v86)
  {
    if (*((_DWORD *)v86 + 4) == 1)
    {
      WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(v86, v30);
      WTF::fastFree(v98, v99);
    }
    else
    {
      --*((_DWORD *)v86 + 4);
    }
  }
  if (!*(_BYTE *)(v5 + 216) || *(_QWORD *)(v5 + 208) >= *(_QWORD *)(*(_QWORD *)(v5 + 96) + 72))
    goto LABEL_175;
  v87 = *(_DWORD **)(v5 + 168);
  *(_QWORD *)(v5 + 168) = 0;
  if (v87)
  {
    if (v87[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v87 + 8))(v87);
    else
      --v87[2];
  }
  v88 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v5 + 144) + 8) + 296);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::Document::addConsoleMessage(v88, 5, 2, &v142, 0);
  v90 = v142;
  v142 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
      WTF::StringImpl::destroy(v90, v89);
    else
      *(_DWORD *)v90 -= 2;
  }
  WebCore::ApplicationCacheGroup::stopLoading((WebCore::ApplicationCacheGroup *)v5, v89);
  v92 = *(_DWORD **)(v5 + 192);
  *(_QWORD *)(v5 + 192) = 0;
  if (v92)
  {
    if (v92[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v92 + 8))(v92);
    else
      --v92[2];
  }
  *(_DWORD *)(v5 + 160) = 2;
  WebCore::ApplicationCacheGroup::deliverDelayedMainResources((uint64_t *)v5, v91);
LABEL_176:
  v114 = v156;
  v156 = 0;
  if (v114)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v114, v61);
  result = v152[1];
  v152[1] = 0;
  if (result)
  {
LABEL_179:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v61);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ApplicationCacheGroup::postListenerTask(WTF::AtomString const&,int,int,WebCore::DocumentLoader &)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33F7EA0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2);
    else
      --v2[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplicationCacheGroup::postListenerTask(WTF::AtomString const&,int,int,WebCore::DocumentLoader &)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F7EA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    else
      --v3[6];
  }
  return WTF::fastFree(this, a2);
}

WebCore *WTF::Detail::CallableWrapper<WebCore::ApplicationCacheGroup::postListenerTask(WTF::AtomString const&,int,int,WebCore::DocumentLoader &)::$_0,void,WebCore::ScriptExecutionContext &>::call(WebCore *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)result + 1);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
      return WebCore::ApplicationCacheHost::notifyDOMApplicationCache(*(WebCore **)(v1 + 2872), *((const WTF::AtomString **)result + 2), *((_DWORD *)result + 6), *((_DWORD *)result + 7));
  }
  return result;
}

WebCore::ApplicationCacheHost *WebCore::ApplicationCacheHost::ApplicationCacheHost(WebCore::ApplicationCacheHost *this, WebCore::DocumentLoader *a2)
{
  uint64_t v3;
  char *v6;
  void *v7;
  WTF *v8;

  *(_QWORD *)this = 0;
  v3 = *((_QWORD *)a2 + 8);
  if (!v3)
  {
    v6 = (char *)a2 + 56;
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = v6;
    v8 = (WTF *)*((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = v3;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WTF::fastFree(v8, v7);
        v3 = *((_QWORD *)a2 + 8);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  ++*(_DWORD *)v3;
  *((_QWORD *)this + 1) = v3;
  *((_BYTE *)this + 16) = 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return this;
}

BOOL WebCore::ApplicationCacheHost::isApplicationCacheBlockedForRequest(WebCore::ApplicationCacheHost *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v2)
    v3 = v2 - 56;
  else
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5 || *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5)
    return 0;
  WebCore::ScriptExecutionContext::canAccessResource((unsigned __int8 *)(*(_QWORD *)(v5 + 296) + 192), 0);
  return v6 != 1;
}

uint64_t WebCore::ApplicationCacheHost::scheduleLoadFallbackResourceFromApplicationCache(WebCore::ApplicationCacheHost *this, WebCore::ResourceLoader *a2, WebCore::ApplicationCache *a3)
{
  uint64_t ApplicationCacheFallbackResource;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  WebCore::DocumentLoader *v13;
  WebCore::SubstituteResource *v14;
  WebCore::SubstituteResource *v15;

  if (!a2 || !WebCore::ApplicationCacheHost::isApplicationCacheBlockedForRequest(this, a2) || *((_QWORD *)a2 + 128))
    return 0;
  v15 = 0;
  ApplicationCacheFallbackResource = WebCore::ApplicationCacheHost::getApplicationCacheFallbackResource((uint64_t)this, (WebCore::ResourceLoader *)((char *)a2 + 336), (_DWORD **)&v15, (uint64_t)a3);
  if ((_DWORD)ApplicationCacheFallbackResource)
  {
    v9 = WebCore::s_platformStrategies;
    v10 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v10)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v9 + 8) = v10;
    }
    (*(void (**)(uint64_t, WebCore::ResourceLoader *))(*(_QWORD *)v10 + 32))(v10, a2);
    v11 = (_DWORD *)*((_QWORD *)a2 + 3);
    if (v11)
    {
      ++v11[2];
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 72))(v11);
      if (v11[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 48))(v11);
      else
        --v11[2];
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    if (v12)
      v13 = (WebCore::DocumentLoader *)(v12 - 56);
    else
      v13 = 0;
    v14 = v15;
    v8.n128_f64[0] = WebCore::DocumentLoader::scheduleSubstituteResourceLoad(v13, a2, v15);
  }
  else
  {
    v14 = v15;
  }
  if (v14)
  {
    if (*((_DWORD *)v14 + 2) == 1)
      (*(void (**)(WebCore::SubstituteResource *, __n128))(*(_QWORD *)v14 + 8))(v14, v8);
    else
      --*((_DWORD *)v14 + 2);
  }
  return ApplicationCacheFallbackResource;
}

uint64_t WebCore::ApplicationCacheHost::shouldLoadResourceFromApplicationCache(uint64_t a1, const WebCore::ResourceRequest *a2, _DWORD **a3)
{
  uint64_t v3;
  const WebCore::ResourceRequest *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v18;
  void *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  const WTF::StringImpl *v26;
  WTF *v27;
  WTF::StringImpl *v28[23];
  char v29;
  unsigned __int8 *v30[2];
  unsigned __int8 *v31[2];

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    if (WebCore::ApplicationCache::isComplete(*(WebCore::ApplicationCache **)(a1 + 40)))
    {
      WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v28, a2);
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      if (v9)
        v10 = v9 - 56;
      else
        v10 = 0;
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v13 = (unsigned int *)(v12 + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
          v15 = *(_QWORD *)(v12 + 296);
          if (v15)
          {
            *(_DWORD *)(v15 + 24) += 2;
            WebCore::SecurityContext::checkedContentSecurityPolicy((WebCore::SecurityContext *)(v15 + 192), (unsigned int **)v31);
            WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v31[0], (WebCore::ResourceRequest *)v28, 0, 0);
            v16 = (unsigned int *)v31[0];
            if (v31[0])
            {
              if (!atomic_load((unsigned int *)v31[0]))
              {
                __break(0xC471u);
                JUMPOUT(0x195F31A30);
              }
              do
                v18 = __ldaxr(v16);
              while (__stlxr(v18 - 1, v16));
            }
            if (*(_DWORD *)(v15 + 24) == 2)
            {
              if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v15);
            }
            else
            {
              *(_DWORD *)(v15 + 24) -= 2;
            }
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v13);
        }
      }
      if (!WebCore::ApplicationCache::requestIsHTTPOrHTTPSGet((WebCore::ApplicationCache *)v28, v8))
        goto LABEL_30;
      if ((v29 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v28);
        v29 |= 1u;
      }
      v20 = (unsigned __int8 *)WTF::URL::protocol((WTF::URL *)v28);
      v22 = v21;
      v23 = *(_QWORD *)(v3 + 24);
      if (v23)
        v23 = *(_QWORD *)(v23 + 8);
      v24 = (unsigned __int8 *)WTF::URL::protocol((WTF::URL *)(v23 + 16));
      v31[0] = v20;
      v31[1] = v22;
      v30[0] = v24;
      v30[1] = v25;
      if (!WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>(v31, v30))
        goto LABEL_30;
      if ((v29 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v28);
        v29 |= 1u;
      }
      v27 = WebCore::ApplicationCache::resourceForURL((WebCore::ApplicationCache *)v3, v28, v26);
      WTF::RefPtr<WebCore::MockContentFilterSettingsClient,WTF::RawPtrTraits<WebCore::MockContentFilterSettingsClient>,WTF::DefaultRefDerefTraits<WebCore::MockContentFilterSettingsClient>>::operator=(a3, v27);
      if (*a3)
        goto LABEL_27;
      if (*(_BYTE *)(v3 + 32))
        goto LABEL_30;
      if ((v29 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v28);
        v29 |= 1u;
      }
      if ((WebCore::ApplicationCache::urlMatchesFallbackNamespace((WebCore::ApplicationCache *)v3, (const WTF::URL *)v28, 0) & 1) != 0)goto LABEL_30;
      if ((v29 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v28);
        v29 |= 1u;
      }
      if ((WebCore::ApplicationCache::isURLInOnlineAllowlist((WebCore::ApplicationCache *)v3, (const WTF::URL *)v28) & 1) == 0)
LABEL_27:
        v3 = 1;
      else
LABEL_30:
        v3 = 0;
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v28, v19);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

BOOL WebCore::ApplicationCacheHost::maybeLoadFallbackForRedirect(WebCore::ApplicationCacheHost *this, WebCore::ResourceLoader *a2, WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4)
{
  if (a2 && (*((_BYTE *)a2 + 1092) & 4) != 0 || (*((_BYTE *)a4 + 138) & 1) != 0)
    return 0;
  if ((*((_BYTE *)a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a3);
    *((_BYTE *)a3 + 184) |= 1u;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a4, 1);
  return (WTF::protocolHostAndPortAreEqual() & 1) == 0
      && (WebCore::ApplicationCacheHost::scheduleLoadFallbackResourceFromApplicationCache(this, a2, 0) & 1) != 0;
}

BOOL WebCore::ApplicationCacheHost::maybeLoadFallbackForError(WebCore::ApplicationCacheHost *this, WebCore::ResourceLoader *a2, const WebCore::ResourceError *a3)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::ResourceLoader *v5;

  if (a2 && (*((_BYTE *)a2 + 1092) & 4) != 0)
    return 0;
  if (*((_BYTE *)a3 + 60) == 3)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v4 = v3 ? v3 - 56 : 0;
  v5 = *(WebCore::ResourceLoader **)(v4 + 80);
  if (v5)
  {
    v5 = (WebCore::ResourceLoader *)*((_QWORD *)v5 + 1);
    if (v5)
      v5 = (WebCore::ResourceLoader *)*((_QWORD *)v5 + 48);
  }
  return v5 != a2
      && (WebCore::ApplicationCacheHost::scheduleLoadFallbackResourceFromApplicationCache(this, a2, 0) & 1) != 0;
}

uint64_t WebCore::ApplicationCacheHost::maybeLoadSynchronously(uint64_t a1, const WebCore::ResourceRequest *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t shouldLoadResourceFromApplicationCache;
  WebCore::ApplicationCacheResource *v11;
  void *v13;
  uint64_t v14;
  WebCore::DocumentLoader *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _QWORD v18[10];
  uint64_t v19;
  WebCore::ApplicationCacheResource *v20;

  v20 = 0;
  shouldLoadResourceFromApplicationCache = WebCore::ApplicationCacheHost::shouldLoadResourceFromApplicationCache(a1, a2, (_DWORD **)&v20);
  if ((_DWORD)shouldLoadResourceFromApplicationCache)
  {
    if (v20 && (WebCore::bufferFromResource((WebCore *)&v19, v20), v19))
    {
      WebCore::ResourceResponse::operator=(a4, (uint64_t)v20 + 56);
      WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::operator=(a5, &v19);
      if (v19)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v13);
    }
    else
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      if (v14)
        v15 = (WebCore::DocumentLoader *)(v14 - 56);
      else
        v15 = 0;
      v16 = WebCore::DocumentLoader::frameLoader(v15);
      (*(void (**)(_QWORD *__return_ptr, _QWORD, const WebCore::ResourceRequest *))(**(_QWORD **)(v16 + 16)
                                                                                             + 592))(v18, *(_QWORD *)(v16 + 16), a2);
      WebCore::ResourceError::operator=(a3, (uint64_t)v18);
      WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v18, v17);
    }
  }
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 2) == 1)
      (*(void (**)(WebCore::ApplicationCacheResource *))(*(_QWORD *)v11 + 8))(v11);
    else
      --*((_DWORD *)v11 + 2);
  }
  return shouldLoadResourceFromApplicationCache;
}

void WebCore::bufferFromResource(WebCore *this, WebCore::ApplicationCacheResource *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = *((_QWORD *)a2 + 43);
  if (v3 && *(_DWORD *)(v3 + 4))
  {
    WebCore::SharedBuffer::createWithContentsOfFile((WebCore::ApplicationCacheResource *)((char *)a2 + 344), 0, 1, (uint64_t *)this);
  }
  else
  {
    v4 = (WTF *)WebCore::SubstituteResource::data(a2, a2);
    WebCore::FragmentedSharedBuffer::makeContiguous(v4, &v7);
    v5 = v7;
    v7 = 0;
    *(_QWORD *)this = v5;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v7, v6);
  }
}

uint64_t *WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(v4 + 8);
        v10 = v9 + 16 * v8;
        do
        {
          v11 = *(unsigned int **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v17 = v10;
              v18 = v9;
              v19 = (WTF *)v11;
              v20 = v4;
              atomic_store(1u, v11);
              v14 = v11[6];
              if ((_DWORD)v14 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F80A8[v14])(&v22, v11 + 2);
              *((_DWORD *)v19 + 6) = -1;
              WTF::fastFree(v19, a2);
              v4 = v20;
              v10 = v17;
              v9 = v18;
            }
          }
          v9 += 16;
        }
        while (v9 != v10);
      }
      v15 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v15 && v15 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v21 = v4;
        WTF::fastFree(v15, a2);
        v4 = v21;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WebCore::ApplicationCacheHost::maybeLoadFallbackSynchronously(uint64_t a1, WebCore::ApplicationCache *this, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  BOOL v9;
  uint64_t result;
  WebCore::SubstituteResource *v11;
  void *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WebCore::SubstituteResource *v16;

  if (*(_BYTE *)(a3 + 60))
    v9 = *(_BYTE *)(a3 + 60) == 3;
  else
    v9 = 1;
  if (!v9)
    goto LABEL_12;
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  if ((*(__int16 *)(a4 + 136) - 400) < 0x64)
    goto LABEL_12;
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  if ((*(__int16 *)(a4 + 136) - 500) < 0x64)
    goto LABEL_12;
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  result = WTF::protocolHostAndPortAreEqual();
  if ((result & 1) == 0)
  {
LABEL_12:
    v16 = 0;
    result = WebCore::ApplicationCacheHost::getApplicationCacheFallbackResource(a1, this, (_DWORD **)&v16, 0);
    v11 = v16;
    if ((_DWORD)result)
    {
      WebCore::ResourceResponse::operator=(a4, (uint64_t)v16 + 56);
      v13 = (WTF *)WebCore::SubstituteResource::data(v11, v12);
      WebCore::FragmentedSharedBuffer::makeContiguous(v13, &v15);
      WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::operator=<WebCore::SharedBuffer>(a5, &v15);
      result = (uint64_t)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v15, v14);
    }
    if (v11)
    {
      if (*((_DWORD *)v11 + 2) == 1)
        return (*(uint64_t (**)(WebCore::SubstituteResource *))(*(_QWORD *)v11 + 8))(v11);
      else
        --*((_DWORD *)v11 + 2);
    }
  }
  return result;
}

uint64_t WebCore::ApplicationCacheHost::getApplicationCacheFallbackResource(uint64_t a1, WebCore::ApplicationCache *this, _DWORD **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int i;
  uint64_t v28;
  WTF *v29;
  _DWORD *v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v34[5];

  v4 = a4;
  if (a4 || (v4 = *(_QWORD *)(a1 + 40)) != 0)
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (!v6)
      return 0;
    v8 = *(_QWORD *)(v6 + 8);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(v8 + 88);
    if (!v9)
      return 0;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v9 + 8 * v14);
    if (v15 != v4)
    {
      v16 = 1;
      while (v15)
      {
        v14 = (v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 8 * v14);
        ++v16;
        if (v15 == v4)
          goto LABEL_12;
      }
      return 0;
    }
LABEL_12:
    if (!WebCore::ApplicationCache::requestIsHTTPOrHTTPSGet(this, this))
      return 0;
    v34[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v34);
    v17 = *((_BYTE *)this + 184);
    if ((v17 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      v17 = *((_BYTE *)this + 184) | 1;
      *((_BYTE *)this + 184) = v17;
    }
    v18 = *(unsigned int *)(v4 + 52);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)(v4 + 40);
      v20 = 40 * v18;
      while (1)
      {
        if (WTF::protocolHostAndPortAreEqual())
        {
          if (*(_QWORD *)v19)
          {
            if (!*(_QWORD *)this)
            {
              if (!*(_DWORD *)(*(_QWORD *)v19 + 4))
                goto LABEL_33;
              goto LABEL_21;
            }
          }
          else if (!*(_QWORD *)this)
          {
            goto LABEL_33;
          }
          if ((WTF::StringImpl::startsWith() & 1) != 0)
            goto LABEL_33;
        }
LABEL_21:
        v19 += 40;
        v20 -= 40;
        if (!v20)
        {
          v17 = *((_BYTE *)this + 184);
          break;
        }
      }
    }
    if ((v17 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    if (WebCore::ApplicationCache::urlMatchesFallbackNamespace((WebCore::ApplicationCache *)v4, this, (WTF::URL *)v34))
    {
      v23 = *(_QWORD *)(v4 + 16);
      if (v23)
      {
        v24 = *(_DWORD *)(v23 - 8);
        v25 = *((_DWORD *)v34[0] + 4);
        if (v25 < 0x100)
          v26 = WTF::StringImpl::hashSlowCase(v34[0]);
        else
          v26 = v25 >> 8;
        for (i = 0; ; v26 = i + v28)
        {
          v28 = v26 & v24;
          v29 = *(WTF **)(v23 + 16 * v28);
          if (v29 != (WTF *)-1)
          {
            if (!v29)
              goto LABEL_40;
            if ((WTF::equal(v29, v34[0], v22) & 1) != 0)
              break;
          }
          ++i;
        }
        v30 = *(_DWORD **)(v23 + 16 * v28 + 8);
        if (v30)
          ++v30[2];
      }
      else
      {
LABEL_40:
        v30 = 0;
      }
      v31 = *a3;
      *a3 = v30;
      if (v31)
      {
        if (v31[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
        else
          --v31[2];
      }
      v4 = 1;
    }
    else
    {
LABEL_33:
      v4 = 0;
    }
    v32 = v34[0];
    v34[0] = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v21);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  return v4;
}

WebCore *WebCore::ApplicationCacheHost::notifyDOMApplicationCache(WebCore *this, const WTF::AtomString *a2, int a3, int a4)
{
  WebCore *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::LocalFrame *v14;
  BOOL v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  _QWORD *v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;

  v7 = this;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
  {
    this = (WebCore *)WebCore::threadGlobalDataSlow(this);
    v9 = (uint64_t)this;
  }
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    this = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(v10 + 1584))
  {
    v11 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8);
    if (v11)
      v12 = v11 - 56;
    else
      v12 = 0;
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v14 = *(WebCore::LocalFrame **)(v13 + 8);
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        v16 = v14 == 0;
      else
        v16 = 1;
      if (!v16)
      {
        v24 = *((_QWORD *)v14 + 3);
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 8);
          if (v25)
          {
            this = *(WebCore **)(*(_QWORD *)(*(_QWORD *)(v25 + 80) + 8) + 88);
            if (this)
              this = WebCore::InspectorApplicationCacheAgent::updateApplicationCacheStatus(this, v14);
          }
        }
      }
    }
    else
    {
      atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
    }
  }
  if (!*((_BYTE *)v7 + 16))
    return WebCore::ApplicationCacheHost::dispatchDOMEvent(v7, a2, a3, a4);
  v17 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v17 += 2;
  v26 = v17;
  v27 = __PAIR64__(a4, a3);
  v18 = *((unsigned int *)v7 + 9);
  if ((_DWORD)v18 == *((_DWORD *)v7 + 8))
  {
    v19 = (uint64_t *)WTF::Vector<WebCore::ApplicationCacheHost::DeferredEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)v7 + 6, v18 + 1, (unint64_t)&v26);
    v21 = (_QWORD *)(*((_QWORD *)v7 + 3) + 16 * *((unsigned int *)v7 + 9));
    v22 = *v19;
    *v19 = 0;
    *v21 = v22;
    v21[1] = v19[1];
    this = v26;
    ++*((_DWORD *)v7 + 9);
    v26 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WebCore *)WTF::StringImpl::destroy(this, v20);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    v23 = (WTF::StringImpl **)(*((_QWORD *)v7 + 3) + 16 * v18);
    *v23 = v17;
    v23[1] = (WTF::StringImpl *)v27;
    ++*((_DWORD *)v7 + 9);
  }
  return this;
}

WTF *WebCore::ApplicationCacheHost::dispatchDOMEvent(WTF *this, const WTF::AtomString *a2, int a3, int a4)
{
  WebCore::EventTarget *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  unsigned int v22;
  _DWORD *v23;
  WTF *v24;

  if (*(_QWORD *)this)
  {
    v4 = *(WebCore::EventTarget **)(*(_QWORD *)this + 8);
    if (v4)
    {
      v5 = *((_QWORD *)v4 + 4);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 72);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              if (*(_BYTE *)(v8 + 178))
              {
                __break(0xC471u);
                JUMPOUT(0x195F325E8);
              }
              v9 = *(_QWORD *)(v8 + 240);
              if (v9 && *(_QWORD *)(v9 + 8))
              {
                v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                if (!v13 || (this = *(WTF **)(v13 + 96)) == 0)
                  this = (WTF *)WebCore::threadGlobalDataSlow(this);
                v14 = *((_QWORD *)this + 5);
                if (!v14)
                {
                  v24 = this;
                  WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
                  v14 = *((_QWORD *)v24 + 5);
                }
                if (*(_QWORD *)a2 == *(_QWORD *)(v14 + 1584))
                {
                  v19 = a3;
                  v15 = bmalloc::api::isoAllocate();
                  WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
                  *(_QWORD *)(v15 + 8) = 0;
                  v21 = *(_QWORD *)a2 != 0;
                  v22 = *(_DWORD *)(v15 + 20) & 0xFFC00000;
                  *(_DWORD *)(v15 + 16) = 1;
                  *(_DWORD *)(v15 + 20) = v22 | v21 | 0x2A0200;
                  v23 = *(_DWORD **)a2;
                  if (*(_QWORD *)a2)
                    *v23 += 2;
                  *(_QWORD *)(v15 + 24) = v23;
                  *(_QWORD *)(v15 + 32) = 0;
                  *(_QWORD *)(v15 + 40) = 0;
                  *(_QWORD *)(v15 + 48) = 0;
                  *(_QWORD *)(v15 + 56) = v20;
                  *(_QWORD *)(v15 + 64) = 0;
                  *(_QWORD *)v15 = off_1E33A6BE0;
                  *(_BYTE *)(v15 + 72) = 1;
                  *(_QWORD *)(v15 + 80) = a4;
                  *(_QWORD *)(v15 + 88) = v19;
                }
                else
                {
                  v15 = bmalloc::api::isoAllocate();
                  WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
                  *(_QWORD *)v15 = off_1E33A4B48;
                  *(_QWORD *)(v15 + 8) = 0;
                  v17 = *(_DWORD *)(v15 + 20) & 0xFFC00000 | (*(_QWORD *)a2 != 0) | 0x1E8200;
                  *(_DWORD *)(v15 + 16) = 1;
                  *(_DWORD *)(v15 + 20) = v17;
                  v18 = *(_DWORD **)a2;
                  if (*(_QWORD *)a2)
                    *v18 += 2;
                  *(_QWORD *)(v15 + 24) = v18;
                  *(_QWORD *)(v15 + 32) = 0;
                  *(_QWORD *)(v15 + 40) = 0;
                  *(_QWORD *)(v15 + 48) = 0;
                  *(_QWORD *)(v15 + 56) = v16;
                  *(_QWORD *)(v15 + 64) = 0;
                }
                this = WebCore::EventTarget::dispatchEvent(v4, (WebCore::Event *)v15);
                if (*(_DWORD *)(v15 + 16) == 1)
                  return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
                else
                  --*(_DWORD *)(v15 + 16);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

WTF *WebCore::ApplicationCacheHost::stopDeferringEvents(WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = this;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v3)
    v4 = v3 - 56;
  else
    v4 = 0;
  ++*(_DWORD *)(v4 + 24);
  v5 = (unsigned int *)((char *)this + 24);
  if (*((_DWORD *)this + 9))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      this = WebCore::ApplicationCacheHost::dispatchDOMEvent(v2, (const WTF::AtomString *)(*((_QWORD *)v2 + 3) + v7), *(_DWORD *)(*((_QWORD *)v2 + 3) + v7 + 8), *(_DWORD *)(*((_QWORD *)v2 + 3) + v7 + 12));
      ++v8;
      v9 = *((unsigned int *)v2 + 9);
      v7 += 16;
    }
    while (v8 < v9);
    if (!*((_DWORD *)v2 + 8))
      goto LABEL_6;
    if ((_DWORD)v9)
      WTF::Vector<WebCore::ApplicationCacheHost::DeferredEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(v5, 0);
    v6 = (_DWORD *)((char *)v2 + 32);
  }
  else
  {
    v6 = (_DWORD *)((char *)this + 32);
    if (!*((_DWORD *)this + 8))
      goto LABEL_6;
  }
  this = *(WTF **)v5;
  if (*(_QWORD *)v5)
  {
    *(_QWORD *)v5 = 0;
    *v6 = 0;
    this = (WTF *)WTF::fastFree(this, a2);
  }
LABEL_6:
  *((_BYTE *)v2 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v4 + 24) == 1)
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 56) + 24))(v3 - 56);
    else
      --*(_DWORD *)(v4 + 24);
  }
  return this;
}

uint64_t WebCore::ApplicationCacheHost::resourceList@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *i;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  int16x8_t v30;
  __int128 v31;
  __int128 v32;

  v2 = *(_QWORD *)(this + 40);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0 || (v4 = *(_QWORD *)(v3 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 88)) == 0)
  {
LABEL_3:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return this;
  }
  v6 = *(_DWORD *)(v5 - 8);
  v7 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(v5 + 8 * v10);
  if (v11 != v2)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 8 * v10);
      ++v12;
      if (v11 == v2)
        goto LABEL_11;
    }
    goto LABEL_3;
  }
LABEL_11:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *(_QWORD *)(v2 + 16);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 12);
    if ((_DWORD)v15)
    {
      v16 = v2;
      if (v15 >= 0x4924925)
      {
        __break(0xC471u);
      }
      else
      {
        v17 = 56 * v15;
        this = WTF::fastMalloc((WTF *)(56 * v15));
        *(_DWORD *)(a2 + 8) = v17 / 0x38;
        *(_QWORD *)a2 = this;
        v19 = *(_QWORD *)(v16 + 16);
        if (v19 && *(_DWORD *)(v19 - 12))
        {
          v20 = this;
          v21 = *(unsigned int *)(v19 - 4);
          if ((_DWORD)v21)
          {
            v22 = 16 * v21;
            for (i = *(_QWORD **)(v16 + 16); (unint64_t)(*i + 1) <= 1; i += 2)
            {
              v22 -= 16;
              if (!v22)
                return this;
            }
          }
          else
          {
            i = *(_QWORD **)(v16 + 16);
          }
          v24 = (_QWORD *)(v19 + 16 * v21);
          if (i != v24)
          {
            v25 = 0;
LABEL_24:
            v26 = i[1];
            v27 = *(_DWORD *)(v26 + 328);
            v28 = *(_DWORD **)(v26 + 16);
            if (v28)
              *v28 += 2;
            v29 = v20 + 56 * v25;
            v31 = *(_OWORD *)(v26 + 40);
            v32 = *(_OWORD *)(v26 + 24);
            this = WebCore::ApplicationCacheResource::estimatedSizeInStorage((WebCore::ApplicationCacheResource *)v26, v18);
            *(_QWORD *)v29 = v28;
            *(_OWORD *)(v29 + 8) = v32;
            v30.i64[1] = *((_QWORD *)&v31 + 1);
            *(_OWORD *)(v29 + 24) = v31;
            *(_BYTE *)(v29 + 40) = v27 & 1;
            v30.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v27) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFDFFFCFFFFLL) & 0xFF01FF01FF01FF01;
            *(_DWORD *)(v29 + 41) = vmovn_s16(v30).u32[0];
            *(_QWORD *)(v29 + 48) = this;
            *(_DWORD *)(a2 + 12) = ++v25;
            while (1)
            {
              i += 2;
              if (i == v24)
                break;
              if ((unint64_t)(*i + 1) > 1)
              {
                if (i != v24)
                  goto LABEL_24;
                return this;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

__n128 WebCore::ApplicationCacheHost::applicationCacheInfo@<Q0>(WebCore::ApplicationCacheHost *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;

  v3 = (_QWORD *)*((_QWORD *)this + 5);
  if (!v3 || (v4 = v3[1]) == 0 || (v6 = *(_QWORD *)(v4 + 8)) == 0 || (v7 = *(_QWORD *)(v6 + 88)) == 0)
  {
LABEL_3:
    *(_QWORD *)a2 = 0;
    WTF::URL::invalidate((WTF::URL *)a2);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    return result;
  }
  v8 = *(_DWORD *)(v7 - 8);
  v9 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(_QWORD **)(v7 + 8 * v12);
  if (v13 != v3)
  {
    v14 = 1;
    while (v13)
    {
      v12 = (v12 + v14) & v8;
      v13 = *(_QWORD **)(v7 + 8 * v12);
      ++v14;
      if (v13 == v3)
        goto LABEL_10;
    }
    goto LABEL_3;
  }
LABEL_10:
  v15 = *(_QWORD *)(v3[3] + 8);
  v16 = *(_DWORD **)(v15 + 16);
  if (v16)
    *v16 += 2;
  *(_QWORD *)a2 = v16;
  result = *(__n128 *)(v15 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v15 + 40);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v3[9];
  return result;
}

uint64_t WebCore::ApplicationCacheHost::swapCache(WebCore::ApplicationCacheHost *this, void *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WebCore::DocumentLoader *v7;
  _DWORD *v8;
  BOOL v9;
  uint64_t v10;
  WebCore::ApplicationCache *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::LocalFrame *v15;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  unsigned int v23;
  WebCore::ApplicationCacheHost *v24;
  WebCore::ApplicationCacheHost *v25;

  v2 = (_DWORD *)*((_QWORD *)this + 5);
  if (!v2)
    return 0;
  v3 = *((_QWORD *)v2 + 1);
  if (!v3)
    return 0;
  v5 = *(_QWORD *)(v3 + 8);
  if (!v5)
    return 0;
  if (!*(_BYTE *)(v5 + 156))
  {
    v8 = *(_DWORD **)(v5 + 80);
    if (v8)
      v9 = v2 == v8;
    else
      v9 = 1;
    if (!v9)
    {
      ++*v8;
      v10 = *((_QWORD *)this + 6);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 8))
        {
          v25 = this;
          *((_QWORD *)this + 6) = 0;
          do
          {
            v22 = __ldaxr((unsigned int *)v10);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, (unsigned int *)v10));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)v10);
            WTF::fastFree((WTF *)v10, a2);
            this = v25;
          }
        }
      }
      v11 = (WebCore::ApplicationCache *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v8;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          v24 = this;
          v17 = v11;
          WebCore::ApplicationCache::~ApplicationCache(v11, (WTF::StringImpl *)a2);
          WTF::fastFree(v17, v18);
          this = v24;
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
      v12 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
      if (v12)
        v13 = v12 - 56;
      else
        v13 = 0;
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
      {
        v15 = *(WebCore::LocalFrame **)(v14 + 8);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          if (v15)
          {
            v19 = *((_QWORD *)v15 + 3);
            if (v19)
            {
              v20 = *(_QWORD *)(v19 + 8);
              if (v20)
              {
                v21 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v20 + 80) + 8) + 88);
                if (v21)
                  WebCore::InspectorApplicationCacheAgent::updateApplicationCacheStatus(v21, v15);
              }
            }
          }
        }
      }
      else
      {
        atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
      }
      return 1;
    }
    return 0;
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v6)
    v7 = (WebCore::DocumentLoader *)(v6 - 56);
  else
    v7 = 0;
  WebCore::ApplicationCacheGroup::disassociateDocumentLoader((uint64_t *)v5, v7);
  return 1;
}

uint64_t WebCore::parseApplicationCacheManifest@<X0>(WTF::URL *this@<X0>, uint64_t *a2@<X1>, const char *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  const char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  const WTF::String *v21;
  PAL *v22;
  _BYTE *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v33;
  char v34;
  unsigned __int16 *v35;
  unsigned int v36;
  int v37;
  char v40;
  WTF::StringImpl *v41;
  uint64_t result;
  uint64_t v43;
  int v44;
  unsigned __int8 *v45;
  char v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  WebCore::HTMLMetaCharsetParser *v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  int v58;
  _BYTE *v59;
  _BYTE *v60;
  char *v61;
  unsigned int *v62;
  int *v63;
  uint64_t *v64;
  unsigned __int16 *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  int v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  int v77;
  uint64_t v79;
  unint64_t v80;
  int v82;
  int v83;
  uint64_t *v84;
  int *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  const WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  int v103;
  uint64_t v104;
  int v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  char *v109;
  int v110;
  char *v111;
  uint64_t *v112;
  int *v113;
  unsigned int *v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  int *v118;
  uint64_t *v119;
  unsigned __int8 *v120;
  uint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  int v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  int *v137;
  int *v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  WTF::StringImpl *v145;
  unsigned int *v146;
  int *v147;
  uint64_t *v148;
  uint64_t i;
  __int16 v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  __int128 v154;
  WTF::StringImpl *v155;
  __int128 v156;
  uint64_t *v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  WTF::StringImpl *v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  int v185;
  int v186;
  _BYTE *v187;
  _BYTE *v188;
  char *v189;
  unsigned int *v190;
  int *v191;
  uint64_t *v192;
  unsigned __int8 *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  int v201;
  int v202;
  unsigned __int8 *v203;
  unsigned __int8 *v204;
  int v205;
  unint64_t v207;
  unsigned __int8 *v209;
  unsigned __int8 *v210;
  int v211;
  _BOOL4 v213;
  unsigned __int8 *v214;
  int v215;
  uint64_t *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  unsigned __int8 *v219;
  uint64_t v220;
  uint64_t v221;
  unsigned __int8 *v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  int v226;
  int v227;
  const WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  uint64_t v230;
  int v231;
  unint64_t v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  uint64_t v236;
  unsigned __int8 *v237;
  int v238;
  uint64_t *v239;
  int *v240;
  unsigned int *v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  uint64_t *v244;
  unsigned __int8 *v245;
  uint64_t v246;
  uint64_t v247;
  unsigned __int8 *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  int v252;
  int v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  int *v263;
  int *v264;
  uint64_t v265;
  WTF::StringImpl *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  WTF::StringImpl *v271;
  unsigned int *v272;
  int *v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  __int128 v280;
  WTF::StringImpl *v281;
  __int128 v282;
  uint64_t *v283;
  uint64_t v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  WTF::StringImpl *v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  WTF::StringImpl *v294;
  WTF::StringImpl *v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  int v301;
  int v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  int v306;
  int v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  int v311;
  uint64_t *v312;
  unsigned __int8 *v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t *v316;
  unsigned __int8 *v317;
  int *v318;
  unsigned int *v319;
  unsigned int *v320;
  unsigned int *v321;
  _OWORD *v322;
  uint64_t v323;
  int *v324;
  int *v325;
  int *v326;
  unsigned int *v327;
  unsigned int *v328;
  unsigned int *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  _OWORD *v333;
  _OWORD *v334;
  _BYTE *v335;
  _OWORD *v336;
  _OWORD *v337;
  _BYTE *v338;
  char *v339;
  _BOOL4 v340;
  WTF::StringImpl *v341;
  WTF::StringImpl *v342;
  _BYTE v343[20];
  uint64_t v344;
  int v345;
  WTF::StringImpl *v346;
  unsigned int v347;
  __int128 v348;
  uint64_t v349;
  int v350;
  WTF::StringImpl *v351;
  _BYTE v352[32];
  WTF::StringImpl *v353;
  _BYTE v354[32];
  __int128 v355;
  _OWORD v356[3];

  v9 = *a2;
  if (!*a2 || *(_DWORD *)(v9 + 4) != 19)
    goto LABEL_2;
  v43 = *(_QWORD *)(v9 + 8);
  if ((*(_BYTE *)(v9 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v43 & 0xFFDF) == 0x54
      && (*(_WORD *)(v43 + 2) & 0xFFDF) == 0x45
      && (*(_WORD *)(v43 + 4) & 0xFFDF) == 0x58
      && (*(_WORD *)(v43 + 6) & 0xFFDF) == 0x54
      && (*(_WORD *)(v43 + 8) & 0xFFDF) == 0xF
      && (*(_WORD *)(v43 + 10) & 0xFFDF) == 0x43
      && (*(_WORD *)(v43 + 12) & 0xFFDF) == 0x41
      && (*(_WORD *)(v43 + 14) & 0xFFDF) == 0x43
      && (*(_WORD *)(v43 + 16) & 0xFFDF) == 0x48
      && (*(_WORD *)(v43 + 18) & 0xFFDF) == 0x45
      && (*(_WORD *)(v43 + 20) & 0xFFDF) == 0xD
      && (*(_WORD *)(v43 + 22) & 0xFFDF) == 0x4D
      && (*(_WORD *)(v43 + 24) & 0xFFDF) == 0x41
      && (*(_WORD *)(v43 + 26) & 0xFFDF) == 0x4E
      && (*(_WORD *)(v43 + 28) & 0xFFDF) == 0x49
      && (*(_WORD *)(v43 + 30) & 0xFFDF) == 0x46
      && (*(_WORD *)(v43 + 32) & 0xFFDF) == 0x45
      && (*(_WORD *)(v43 + 34) & 0xFFDF) == 0x53)
    {
      v44 = *(unsigned __int16 *)(v43 + 36);
      goto LABEL_78;
    }
LABEL_2:
    v10 = 0;
    goto LABEL_3;
  }
  if ((*(_BYTE *)v43 & 0xDF) != 0x54
    || (*(_BYTE *)(v43 + 1) & 0xDF) != 0x45
    || (*(_BYTE *)(v43 + 2) & 0xDF) != 0x58
    || (*(_BYTE *)(v43 + 3) & 0xDF) != 0x54
    || (*(_BYTE *)(v43 + 4) & 0xDF) != 0xF
    || (*(_BYTE *)(v43 + 5) & 0xDF) != 0x43
    || (*(_BYTE *)(v43 + 6) & 0xDF) != 0x41
    || (*(_BYTE *)(v43 + 7) & 0xDF) != 0x43
    || (*(_BYTE *)(v43 + 8) & 0xDF) != 0x48
    || (*(_BYTE *)(v43 + 9) & 0xDF) != 0x45
    || (*(_BYTE *)(v43 + 10) & 0xDF) != 0xD
    || (*(_BYTE *)(v43 + 11) & 0xDF) != 0x4D
    || (*(_BYTE *)(v43 + 12) & 0xDF) != 0x41
    || (*(_BYTE *)(v43 + 13) & 0xDF) != 0x4E
    || (*(_BYTE *)(v43 + 14) & 0xDF) != 0x49
    || (*(_BYTE *)(v43 + 15) & 0xDF) != 0x46
    || (*(_BYTE *)(v43 + 16) & 0xDF) != 0x45
    || (*(_BYTE *)(v43 + 17) & 0xDF) != 0x53)
  {
    goto LABEL_2;
  }
  v44 = *(unsigned __int8 *)(v43 + 18);
LABEL_78:
  v10 = (v44 & 0xFFFFFFDF) == 84;
LABEL_3:
  v342 = (WTF::StringImpl *)WTF::URL::path(this);
  *(_QWORD *)v343 = v11;
  v12 = WTF::StringView::reverseFind((uint64_t)&v342, 0x2Fu, 0xFFFFFFFF);
  if (*(_DWORD *)v343)
  {
    v13 = (v12 + 1);
    if (*(_DWORD *)v343 <= v13)
    {
      v13 = *(_QWORD *)v343;
    }
    else if (v343[4])
    {
      v13 |= 0x100000000uLL;
    }
  }
  else
  {
    v13 = 0x100000000;
  }
  *(_DWORD *)v343 = v13;
  v343[4] = BYTE4(v13);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = (uint64_t *)v342;
  v353 = v342;
  v342 = (WTF::StringImpl *)&off_1E31F4A18;
  v16 = PAL::atomCanonicalTextEncodingName(v14, (PAL *)"UTF-8", v15);
  v18 = v17;
  *(_QWORD *)v343 = v16;
  *(_QWORD *)&v343[8] = v17;
  *(_QWORD *)&v355 = v16;
  *((_QWORD *)&v355 + 1) = v17;
  if (v17 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v355))
    {
      v19 = 165;
    }
    else
    {
      v19 = 92;
    }
  }
  else
  {
    v19 = 92;
  }
  *(_WORD *)&v343[16] = v19;
  v20 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v20 = 1;
  v22 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&v353, v21);
  *(_DWORD *)(v20 + 4) = (_DWORD)v22;
  if ((_DWORD)v22 == 2)
  {
    v312 = PAL::UTF8Encoding(v22);
  }
  else
  {
    if (v18)
    {
      v23 = v343;
      goto LABEL_19;
    }
    v312 = PAL::Latin1Encoding(v22);
  }
  v23 = v312 + 1;
LABEL_19:
  *(_QWORD *)(v20 + 8) = &off_1E31F4A18;
  v24 = *(_OWORD *)v23;
  *(_WORD *)(v20 + 32) = *((_WORD *)v23 + 8);
  *(_OWORD *)(v20 + 16) = v24;
  *(_QWORD *)(v20 + 40) = 0;
  v25 = (uint64_t *)(v20 + 40);
  *(_QWORD *)(v20 + 48) = 0;
  *(_DWORD *)(v20 + 56) = 0;
  *(_QWORD *)(v20 + 72) = 0;
  *(_QWORD *)(v20 + 80) = 0;
  *(_QWORD *)(v20 + 64) = 0;
  *(_QWORD *)(v20 + 87) = 0;
  WebCore::TextResourceDecoder::decodeAndFlush((WebCore::TextResourceDecoder *)v20, a3, a4, &v341);
  if (*(_DWORD *)v20 == 1)
  {
    v53 = *(WTF **)(v20 + 72);
    if (v53)
    {
      *(_QWORD *)(v20 + 72) = 0;
      *(_DWORD *)(v20 + 80) = 0;
      WTF::fastFree(v53, (void *)v26);
    }
    v54 = *(WebCore::HTMLMetaCharsetParser **)(v20 + 48);
    *(_QWORD *)(v20 + 48) = 0;
    if (v54)
    {
      WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v54, (WTF::StringImpl *)v26);
      WTF::fastFree(v55, v56);
    }
    v57 = *v25;
    *v25 = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    WTF::fastFree((WTF *)v20, (void *)v26);
  }
  else
  {
    --*(_DWORD *)v20;
  }
  v27 = v353;
  v353 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (!v341)
  {
    v355 = 0u;
    memset(v356, 0, 25);
    goto LABEL_52;
  }
  v28 = *((_QWORD *)v341 + 1);
  v29 = *((unsigned int *)v341 + 1);
  if ((*((_BYTE *)v341 + 16) & 4) != 0)
  {
    v355 = 0u;
    memset(v356, 0, 25);
    if (v29 < 0xE)
      goto LABEL_52;
    if (*(_QWORD *)v28 != 0x414D204548434143 || *(_QWORD *)(v28 + 6) != 0x54534546494E414DLL)
      goto LABEL_52;
    v45 = (unsigned __int8 *)(v29 - 14);
    if (v29 == 14)
      goto LABEL_87;
    v48 = *(unsigned __int8 *)(v28 + 14);
    v47 = v28 + 14;
    v46 = v48;
    if (v48 > 0x20 || ((1 << v46) & 0x100002600) == 0)
      goto LABEL_52;
    while (1)
    {
      v49 = *(unsigned __int8 *)v47;
      if (v49 == 10 || v49 == 13)
        break;
      ++v47;
      if (!--v45)
        goto LABEL_87;
    }
    v186 = 0;
    v187 = v354;
    v188 = v352;
    v189 = (char *)v356 + 8;
    result = (uint64_t)v343;
    v190 = &v347;
    v191 = &v345;
    v192 = (uint64_t *)v356;
    while (1)
    {
      v193 = 0;
      v194 = v47;
      v195 = -v47;
      v196 = v47;
      while (1)
      {
        v197 = v193[v47];
        if (v197 > 0x20 || ((1 << v197) & 0x100002600) == 0)
          break;
        ++v193;
        ++v196;
        --v195;
        if (v45 == v193)
          goto LABEL_87;
      }
      v340 = v10;
      v199 = &v45[v47];
      v200 = &v193[v47];
      v45 -= (uint64_t)v193;
      v201 = v193[v47];
      v47 += (uint64_t)v193;
      while (v201 != 10 && v201 != 13)
      {
        if (!--v45)
        {
          v47 = (uint64_t)v199;
          break;
        }
        v202 = *(unsigned __int8 *)++v47;
        v201 = v202;
      }
      if (v197 == 35)
        goto LABEL_482;
      v203 = (unsigned __int8 *)(v47 - 1);
      v204 = (unsigned __int8 *)v47;
      if (v47 - 1 > (unint64_t)v200)
      {
        do
        {
          v205 = *v203;
          if (v205 != 32 && v205 != 9)
            break;
          --v203;
        }
        while (v203 > v200);
        v204 = v203 + 1;
      }
      v207 = &v204[-v194] - v193;
      if ((v207 & 0x8000000000000000) != 0 || &v204[-v194] == v193)
        goto LABEL_552;
      if (v200[v207 - 1] == 58)
      {
        if (v207 < 5)
          goto LABEL_368;
        if (*(_DWORD *)v200 != 1212367171 || v200[4] != 69)
          goto LABEL_356;
        if (&v204[-v194 - 6] != v193)
        {
          v200 = &v193[v194 + 5];
          v207 -= 5;
LABEL_356:
          v186 = v207 - 8;
          if (v207 >= 8)
          {
            if (*(_QWORD *)v200 == 0x4B4341424C4C4146)
            {
              if (v207 == 9)
                goto LABEL_482;
              v200 += 8;
              v207 -= 8;
              goto LABEL_357;
            }
          }
          else
          {
LABEL_357:
            if (v207 < 7)
            {
LABEL_368:
              v186 = 3;
              goto LABEL_482;
            }
          }
          v213 = *(_DWORD *)v200 != 1465140558 || *(_DWORD *)(v200 + 3) != 1263685463;
          if (v207 == 8 && !v213)
            goto LABEL_404;
          goto LABEL_368;
        }
        v186 = 0;
      }
      else
      {
        v26 = (uint64_t)&v193[v194];
        if (!v186)
        {
          v214 = v204;
          while (1)
          {
            v215 = *v200;
            if (v215 == 9 || v215 == 32)
              break;
            ++v200;
            if ((unsigned __int8 *)v196 == --v214)
            {
              v200 = v204;
              break;
            }
          }
          v319 = v190;
          v324 = v191;
          v336 = v187;
          v339 = (char *)result;
          v330 = (uint64_t)v189;
          v333 = v188;
          if (&v200[-v194] - v193 < 0)
          {
LABEL_552:
            __break(1u);
            return result;
          }
          v216 = v192;
          WTF::String::String();
          MEMORY[0x19AEA52F8](&v342, this, &v353, 0);
          v218 = v353;
          v353 = 0;
          if (v218)
          {
            if (*(_DWORD *)v218 == 2)
              WTF::StringImpl::destroy(v218, v217);
            else
              *(_DWORD *)v218 -= 2;
          }
          WTF::URL::removeFragmentIdentifier((WTF::URL *)&v342);
          if ((v343[0] & 1) == 0)
            goto LABEL_391;
          v219 = (unsigned __int8 *)WTF::URL::protocol((WTF::URL *)&v342);
          v221 = v220;
          v222 = (unsigned __int8 *)WTF::URL::protocol(this);
          if ((_DWORD)v221 != (_DWORD)v26)
            goto LABEL_391;
          v223 = v26 & 0xFF00000000;
          if ((v221 & 0xFF00000000) != 0)
          {
            if (v223)
            {
              if ((_DWORD)v221)
              {
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v219) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + *v222))
                {
                  v224 = 1;
                  do
                  {
                    v225 = v224;
                    if (v221 == v224)
                      break;
                    v226 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v219[v224]);
                    v227 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v222[v224++]);
                  }
                  while (v226 == v227);
                  goto LABEL_387;
                }
LABEL_391:
                v229 = v342;
                v342 = 0;
                v190 = v319;
                v191 = v324;
                v192 = v216;
                if (v229)
                {
                  if (*(_DWORD *)v229 == 2)
                  {
                    WTF::StringImpl::destroy(v229, (WTF::StringImpl *)v26);
                    v192 = v216;
                    v190 = v319;
                    v191 = v324;
                  }
                  else
                  {
                    *(_DWORD *)v229 -= 2;
                  }
                }
                v186 = 0;
                goto LABEL_481;
              }
LABEL_388:
              if (!WTF::URL::protocolIs() || WTF::protocolHostAndPortAreEqual())
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v216, &v342, v228, (uint64_t)&v353);
              goto LABEL_391;
            }
            if (!(_DWORD)v221)
              goto LABEL_388;
            if ((*(unsigned __int16 *)v222 | (32 * (*(unsigned __int16 *)v222 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v219))
              goto LABEL_391;
            v300 = 1;
            do
            {
              v225 = v300;
              if (v221 == v300)
                break;
              v301 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v219[v300]);
              v302 = *(unsigned __int16 *)&v222[2 * v300] | (32
                                                           * (*(unsigned __int16 *)&v222[2 * v300] - 65 < 0x1A));
              ++v300;
            }
            while (v302 == v301);
          }
          else if (v223)
          {
            if (!(_DWORD)v221)
              goto LABEL_388;
            if ((*(unsigned __int16 *)v219 | (32 * (*(unsigned __int16 *)v219 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v222))
              goto LABEL_391;
            v298 = 1;
            do
            {
              v225 = v298;
              if (v221 == v298)
                break;
              v299 = *(unsigned __int16 *)&v219[2 * v298] | (32
                                                           * (*(unsigned __int16 *)&v219[2 * v298] - 65 < 0x1A));
              ++v298;
            }
            while (v299 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v222[v225]));
          }
          else
          {
            if (!(_DWORD)v221)
              goto LABEL_388;
            if ((*(unsigned __int16 *)v219 | (32 * (*(unsigned __int16 *)v219 - 65 < 0x1A))) != (*(unsigned __int16 *)v222 | (32 * (*(unsigned __int16 *)v222 - 65 < 0x1A))))
              goto LABEL_391;
            v308 = 1;
            do
            {
              v225 = v308;
              if (v221 == v308)
                break;
              v309 = *(unsigned __int16 *)&v219[2 * v308] | (32
                                                           * (*(unsigned __int16 *)&v219[2 * v308] - 65 < 0x1A));
              ++v308;
            }
            while (v309 == (*(unsigned __int16 *)&v222[2 * v225] | (32
                                                                   * (*(unsigned __int16 *)&v222[2 * v225]
                                                                    - 65 < 0x1A))));
          }
LABEL_387:
          if (v225 < v221)
            goto LABEL_391;
          goto LABEL_388;
        }
        if (v186 == 2)
        {
          v230 = v196 - (_QWORD)v204;
          while (1)
          {
            v231 = *v200;
            if (v231 == 9 || v231 == 32)
              break;
            ++v200;
            if (__CFADD__(v230++, 1))
            {
              v200 = v204;
              break;
            }
          }
          v233 = &v200[-v194] - v193;
          if (&v200[-v194 - 1] != v193)
          {
            v239 = v192;
            v240 = v191;
            v241 = v190;
            v336 = v187;
            v339 = (char *)result;
            v330 = (uint64_t)v189;
            v333 = v188;
            if ((v233 & 0x8000000000000000) != 0)
              goto LABEL_552;
LABEL_423:
            WTF::String::String();
            MEMORY[0x19AEA52F8](&v342, this, &v353, 0);
            v243 = v353;
            v353 = 0;
            if (v243)
            {
              if (*(_DWORD *)v243 == 2)
                WTF::StringImpl::destroy(v243, v242);
              else
                *(_DWORD *)v243 -= 2;
            }
            WTF::URL::removeFragmentIdentifier((WTF::URL *)&v342);
            v190 = v241;
            v191 = v240;
            v192 = v239;
            if ((v343[0] & 1) == 0)
              goto LABEL_440;
            v321 = v241;
            v326 = v240;
            v244 = v239;
            v245 = (unsigned __int8 *)WTF::URL::protocol((WTF::URL *)&v342);
            v247 = v246;
            v248 = (unsigned __int8 *)WTF::URL::protocol(this);
            v192 = v244;
            v190 = v321;
            v191 = v326;
            if ((_DWORD)v247 != (_DWORD)v26)
              goto LABEL_440;
            v249 = v26 & 0xFF00000000;
            if ((v247 & 0xFF00000000) != 0)
            {
              if (v249)
              {
                if (!(_DWORD)v247)
                  goto LABEL_436;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v245) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + *v248))
                {
                  v250 = 1;
                  do
                  {
                    v251 = v250;
                    if (v247 == v250)
                      break;
                    v252 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v245[v250]);
                    v253 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v248[v250++]);
                  }
                  while (v252 == v253);
LABEL_435:
                  if (v251 >= v247)
                  {
LABEL_436:
                    if (HIDWORD(v355) == DWORD2(v355))
                    {
                      v254 = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v355, HIDWORD(v355) + 1, (unint64_t)&v342);
                      v255 = v355 + 40 * HIDWORD(v355);
                      v256 = *(_QWORD *)v254;
                      *(_QWORD *)v254 = 0;
                      *(_QWORD *)v255 = v256;
                      v258 = *((_DWORD *)v254 + 2);
                      v257 = v254 + 8;
                      v259 = *(_DWORD *)(v255 + 8) & 0xFFFFFFFE | v258 & 1;
                      *(_DWORD *)(v255 + 8) = v259;
                      v260 = v259 & 0xFFFFFFFD | (2 * ((*(_DWORD *)v257 >> 1) & 1));
                      *(_DWORD *)(v255 + 8) = v260;
                      v261 = v260 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v257 >> 2) & 1));
                      *(_DWORD *)(v255 + 8) = v261;
                      v262 = v261 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v257 >> 3) & 7));
                      *(_DWORD *)(v255 + 8) = v262;
                      *(_DWORD *)(v255 + 8) = *(_DWORD *)v257 & 0xFFFFFFC0 | v262 & 0x3F;
                      *(_OWORD *)(v255 + 12) = *(_OWORD *)(v257 + 4);
                      *(_QWORD *)(v255 + 28) = *(_QWORD *)(v257 + 20);
                      v263 = (int *)(v255 + 36);
                      v264 = (int *)(v257 + 28);
                    }
                    else
                    {
                      v265 = v355 + 40 * HIDWORD(v355);
                      v266 = v342;
                      v342 = 0;
                      *(_QWORD *)v265 = v266;
                      v267 = *(_DWORD *)(v265 + 8) & 0xFFFFFFFE | v343[0] & 1;
                      *(_DWORD *)(v265 + 8) = v267;
                      v268 = v267 & 0xFFFFFFFD | (2 * ((*(_DWORD *)v343 >> 1) & 1));
                      *(_DWORD *)(v265 + 8) = v268;
                      v269 = v268 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v343 >> 2) & 1));
                      *(_DWORD *)(v265 + 8) = v269;
                      v270 = v269 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v343 >> 3) & 7));
                      *(_DWORD *)(v265 + 8) = v270;
                      *(_DWORD *)(v265 + 8) = *(_DWORD *)v343 & 0xFFFFFFC0 | v270 & 0x3F;
                      *(_OWORD *)(v265 + 12) = *(_OWORD *)&v343[4];
                      *(_QWORD *)(v265 + 28) = v344;
                      v263 = (int *)(v265 + 36);
                      v264 = v326;
                      v257 = v339;
                    }
                    *v263 = *v264;
                    *(_DWORD *)v257 &= ~1u;
                    ++HIDWORD(v355);
                    v190 = v321;
                    v191 = v326;
                    v192 = v244;
                  }
                }
                goto LABEL_440;
              }
              if (!(_DWORD)v247)
                goto LABEL_436;
              if ((*(unsigned __int16 *)v248 | (32 * (*(unsigned __int16 *)v248 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v245))
                goto LABEL_440;
              v305 = 1;
              while (1)
              {
                v251 = v305;
                if (v247 == v305)
                  break;
                v306 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v245[v305]);
                v307 = *(unsigned __int16 *)&v248[2 * v305] | (32
                                                             * (*(unsigned __int16 *)&v248[2 * v305] - 65 < 0x1A));
                ++v305;
                v190 = v321;
                v191 = v326;
                v192 = v244;
                if (v307 != v306)
                  goto LABEL_435;
              }
LABEL_527:
              v190 = v321;
              v191 = v326;
              v192 = v244;
              goto LABEL_435;
            }
            if (v249)
            {
              v190 = v321;
              v191 = v326;
              if (!(_DWORD)v247)
                goto LABEL_436;
              v192 = v244;
              if ((*(unsigned __int16 *)v245 | (32 * (*(unsigned __int16 *)v245 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v248))
                goto LABEL_440;
              v303 = 1;
              while (1)
              {
                v251 = v303;
                if (v247 == v303)
                  goto LABEL_527;
                v304 = *(unsigned __int16 *)&v245[2 * v303] | (32
                                                             * (*(unsigned __int16 *)&v245[2 * v303] - 65 < 0x1A));
                ++v303;
                v190 = v321;
                v191 = v326;
                v192 = v244;
                if (v304 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v248[v251]))
                  goto LABEL_435;
              }
            }
            v190 = v321;
            v191 = v326;
            if (!(_DWORD)v247)
              goto LABEL_436;
            v192 = v244;
            if ((*(unsigned __int16 *)v245 | (32 * (*(unsigned __int16 *)v245 - 65 < 0x1A))) == (*(unsigned __int16 *)v248 | (32 * (*(unsigned __int16 *)v248 - 65 < 0x1A))))
            {
              v310 = 1;
              while (1)
              {
                v251 = v310;
                if (v247 == v310)
                  goto LABEL_527;
                v311 = *(unsigned __int16 *)&v245[2 * v310] | (32
                                                             * (*(unsigned __int16 *)&v245[2 * v310] - 65 < 0x1A));
                ++v310;
                v190 = v321;
                v191 = v326;
                v192 = v244;
                if (v311 != (*(unsigned __int16 *)&v248[2 * v251] | (32
                                                                    * (*(unsigned __int16 *)&v248[2 * v251]
                                                                     - 65 < 0x1A))))
                  goto LABEL_435;
              }
            }
LABEL_440:
            v271 = v342;
            v342 = 0;
            if (v271)
            {
              if (*(_DWORD *)v271 == 2)
              {
                v272 = v190;
                v273 = v191;
                v274 = v192;
                WTF::StringImpl::destroy(v271, (WTF::StringImpl *)v26);
                v192 = v274;
                v191 = v273;
                v190 = v272;
              }
              else
              {
                *(_DWORD *)v271 -= 2;
              }
            }
            v186 = 2;
LABEL_481:
            v188 = v333;
            v187 = v336;
            v189 = (char *)v330;
            result = (uint64_t)v339;
            goto LABEL_482;
          }
          if (v197 != 42)
          {
            v239 = v192;
            v240 = v191;
            v241 = v190;
            v336 = v187;
            v339 = (char *)result;
            v330 = (uint64_t)v189;
            v333 = v188;
            goto LABEL_423;
          }
          BYTE8(v356[1]) = 1;
LABEL_404:
          v186 = 2;
          goto LABEL_482;
        }
        v317 = v204;
        if (v186 == 1)
        {
          v209 = 0;
          v210 = v317;
          while (1)
          {
            v211 = *v200;
            if (v211 == 9 || v211 == 32)
              break;
            ++v200;
            ++v209;
            --v210;
            v186 = 1;
            if (&v317[v195] == v209)
              goto LABEL_482;
          }
          v313 = v210;
          v315 = v192;
          v320 = v190;
          v325 = v191;
          v336 = v187;
          v339 = (char *)result;
          v330 = (uint64_t)v189;
          v333 = v188;
          if (((unint64_t)v209 & 0x8000000000000000) != 0)
            goto LABEL_552;
          WTF::String::String();
          MEMORY[0x19AEA52F8](&v353, this, &v342, 0);
          v235 = v342;
          v342 = 0;
          if (v235)
          {
            if (*(_DWORD *)v235 == 2)
              WTF::StringImpl::destroy(v235, v234);
            else
              *(_DWORD *)v235 -= 2;
          }
          WTF::URL::removeFragmentIdentifier((WTF::URL *)&v353);
          if ((v354[0] & 1) != 0)
          {
            result = WTF::protocolHostAndPortAreEqual();
            if ((_DWORD)result)
            {
              if (v340
                || (v342 = (WTF::StringImpl *)WTF::URL::path((WTF::URL *)&v353),
                    *(_QWORD *)v343 = v236,
                    result = WTF::StringView::startsWith(),
                    (result & 1) != 0))
              {
                v237 = v313;
                while (1)
                {
                  v238 = *v200;
                  if (v238 != 9 && v238 != 32)
                    break;
                  ++v200;
                  if ((unsigned __int8 *)v196 == --v237)
                  {
                    v200 = v317;
                    goto LABEL_455;
                  }
                }
                v275 = 0;
                v276 = (uint64_t)&v237[v195 - 1];
                while (v238 != 9 && v238 != 32)
                {
                  if (v276 == v275)
                    goto LABEL_455;
                  LOBYTE(v238) = v200[++v275];
                }
                v317 = &v200[v275];
LABEL_455:
                if (v317 - v200 < 0)
                  goto LABEL_552;
                WTF::String::String();
                MEMORY[0x19AEA52F8](&v351, this, &v342, 0);
                v278 = v342;
                v342 = 0;
                if (v278)
                {
                  if (*(_DWORD *)v278 == 2)
                    WTF::StringImpl::destroy(v278, v277);
                  else
                    *(_DWORD *)v278 -= 2;
                }
                WTF::URL::removeFragmentIdentifier((WTF::URL *)&v351);
                if ((v352[0] & 1) != 0 && WTF::protocolHostAndPortAreEqual())
                {
                  v279 = v353;
                  if (v353)
                    *(_DWORD *)v353 += 2;
                  v342 = v279;
                  v280 = v336[1];
                  *(_OWORD *)v339 = *v336;
                  *((_OWORD *)v339 + 1) = v280;
                  v281 = v351;
                  if (v351)
                    *(_DWORD *)v351 += 2;
                  v346 = v281;
                  v282 = v333[1];
                  *(_OWORD *)v320 = *v333;
                  *((_OWORD *)v320 + 1) = v282;
                  if (DWORD1(v356[1]) == LODWORD(v356[1]))
                  {
                    v283 = (uint64_t *)WTF::Vector<std::pair<WTF::URL,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v330, DWORD1(v356[1]) + 1, (unint64_t)&v342);
                    std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](*((_QWORD *)&v356[0] + 1) + 80 * DWORD1(v356[1]), v283);
                  }
                  else
                  {
                    v284 = *((_QWORD *)&v356[0] + 1) + 80 * DWORD1(v356[1]);
                    v342 = 0;
                    *(_QWORD *)v284 = v279;
                    v285 = *(_DWORD *)(v284 + 8) & 0xFFFFFFFE | v343[0] & 1;
                    *(_DWORD *)(v284 + 8) = v285;
                    v286 = v285 & 0xFFFFFFFD | (2 * ((*(_DWORD *)v343 >> 1) & 1));
                    *(_DWORD *)(v284 + 8) = v286;
                    v287 = v286 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v343 >> 2) & 1));
                    *(_DWORD *)(v284 + 8) = v287;
                    v288 = v287 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v343 >> 3) & 7));
                    *(_DWORD *)(v284 + 8) = v288;
                    *(_DWORD *)(v284 + 8) = *(_DWORD *)v343 & 0xFFFFFFC0 | v288 & 0x3F;
                    *(_OWORD *)(v284 + 12) = *(_OWORD *)&v343[4];
                    *(_QWORD *)(v284 + 28) = v344;
                    *(_DWORD *)(v284 + 36) = v345;
                    *(_DWORD *)v343 &= ~1u;
                    v289 = v346;
                    v346 = 0;
                    *(_QWORD *)(v284 + 40) = v289;
                    v290 = *(_DWORD *)(v284 + 48) & 0xFFFFFFFE | v347 & 1;
                    *(_DWORD *)(v284 + 48) = v290;
                    v291 = v290 & 0xFFFFFFFD | (2 * ((v347 >> 1) & 1));
                    *(_DWORD *)(v284 + 48) = v291;
                    v292 = v291 & 0xFFFFFFFB | (4 * ((v347 >> 2) & 1));
                    *(_DWORD *)(v284 + 48) = v292;
                    v293 = v292 & 0xFFFFFFC7 | (8 * ((v347 >> 3) & 7));
                    *(_DWORD *)(v284 + 48) = v293;
                    *(_DWORD *)(v284 + 48) = v347 & 0xFFFFFFC0 | v293 & 0x3F;
                    *(_OWORD *)(v284 + 52) = v348;
                    *(_QWORD *)(v284 + 68) = v349;
                    *(_DWORD *)(v284 + 76) = v350;
                    v347 &= ~1u;
                  }
                  ++DWORD1(v356[1]);
                  v294 = v346;
                  v346 = 0;
                  if (v294)
                  {
                    if (*(_DWORD *)v294 == 2)
                      WTF::StringImpl::destroy(v294, (WTF::StringImpl *)v26);
                    else
                      *(_DWORD *)v294 -= 2;
                  }
                  v295 = v342;
                  v342 = 0;
                  if (v295)
                  {
                    if (*(_DWORD *)v295 == 2)
                      WTF::StringImpl::destroy(v295, (WTF::StringImpl *)v26);
                    else
                      *(_DWORD *)v295 -= 2;
                  }
                }
                v296 = v351;
                v351 = 0;
                if (v296)
                {
                  if (*(_DWORD *)v296 == 2)
                    WTF::StringImpl::destroy(v296, (WTF::StringImpl *)v26);
                  else
                    *(_DWORD *)v296 -= 2;
                }
              }
            }
          }
          v297 = v353;
          v353 = 0;
          v190 = v320;
          v191 = v325;
          v192 = v315;
          if (v297)
          {
            if (*(_DWORD *)v297 == 2)
            {
              WTF::StringImpl::destroy(v297, (WTF::StringImpl *)v26);
              v192 = v315;
              v190 = v320;
              v191 = v325;
            }
            else
            {
              *(_DWORD *)v297 -= 2;
            }
          }
          v186 = 1;
          goto LABEL_481;
        }
      }
LABEL_482:
      v10 = v340;
      if (!v45)
        goto LABEL_87;
    }
  }
  v355 = 0u;
  memset(v356, 0, 25);
  if (v29 < 0xE)
    goto LABEL_52;
  v30 = *(_QWORD *)v28 == 0x48004300410043 && *(_QWORD *)(v28 + 8) == 0x41004D00200045;
  v31 = v30 && *(_QWORD *)(v28 + 16) == 0x4500460049004ELL;
  if (!v31 || *(_DWORD *)(v28 + 24) != 5505107)
    goto LABEL_52;
  v33 = v29 - 14;
  if (v29 != 14)
  {
    v36 = *(unsigned __int16 *)(v28 + 28);
    v35 = (unsigned __int16 *)(v28 + 28);
    v34 = v36;
    if (v36 <= 0x20 && ((1 << v34) & 0x100002600) != 0)
    {
      while (1)
      {
        v37 = *v35;
        if (v37 == 10 || v37 == 13)
          break;
        ++v35;
        if (!--v33)
          goto LABEL_87;
      }
      v58 = 0;
      v59 = v354;
      v60 = v352;
      v61 = (char *)v356 + 8;
      result = (uint64_t)v343;
      v62 = &v347;
      v63 = &v345;
      v64 = (uint64_t *)v356;
      while (1)
      {
        v65 = 0;
        v66 = (char *)v35;
        v67 = (char *)(v35 + 1);
        v68 = v33;
        while (1)
        {
          v69 = *(unsigned __int16 *)((char *)v65 + (_QWORD)v35);
          if (v69 > 0x20 || ((1 << v69) & 0x100002600) == 0)
            break;
          ++v65;
          v67 += 2;
          if (!--v68)
            goto LABEL_87;
        }
        v71 = &v35[v33];
        v72 = (unsigned __int16 *)((char *)v65 + (_QWORD)v35);
        v73 = *(unsigned __int16 *)((char *)v65 + (_QWORD)v35);
        v35 = (unsigned __int16 *)((char *)v65 + (_QWORD)v35);
        v33 = v68;
        while (1)
        {
          if (v73 == 10 || v73 == 13)
          {
            v26 = 0x4B004300410042;
            goto LABEL_112;
          }
          if (!--v33)
            break;
          v74 = v35[1];
          ++v35;
          v73 = v74;
        }
        v26 = 0x4B004300410042;
        v35 = v71;
LABEL_112:
        if (v69 == 35)
          goto LABEL_113;
        v75 = v35 - 1;
        v76 = v35;
        if (v35 - 1 > v72)
        {
          do
          {
            v77 = *v75;
            if (v77 != 32 && v77 != 9)
              break;
            --v75;
          }
          while (v75 > v72);
          v76 = v75 + 1;
        }
        v79 = (char *)v76 - v66 - (_QWORD)v65;
        if (v79 <= -2 || v72 == v76)
          goto LABEL_552;
        v80 = v79 >> 1;
        if (*(_WORD *)&v66[2 * (v79 >> 1) - 2 + (_QWORD)v65] == 58)
        {
          if ((unint64_t)v79 < 0xA)
            goto LABEL_186;
          if (*(_QWORD *)v72 == 0x48004300410043 && v72[4] == 69)
          {
            v80 -= 5;
            if (v80 == 1)
            {
              v58 = 0;
              goto LABEL_113;
            }
            v72 = (unsigned __int16 *)((char *)v65 + (_QWORD)v66 + 10);
          }
          v58 = v80 - 8;
          if (v80 < 8)
            goto LABEL_176;
          if (*(_QWORD *)v72 != 0x4C004C00410046 || *((_QWORD *)v72 + 1) != 0x4B004300410042)
            goto LABEL_176;
          if (v80 != 9)
          {
            v72 += 8;
            v80 -= 8;
LABEL_176:
            if (v80 < 7
              || ((v100 = *(_QWORD *)v72, v101 = *(_QWORD *)(v72 + 3), v100 == 0x5700540045004ELL)
                ? (v102 = v101 == 0x4B0052004F0057)
                : (v102 = 0),
                  v102 ? (v103 = 0) : (v103 = 1),
                  v80 != 8 || v103))
            {
LABEL_186:
              v58 = 3;
              goto LABEL_113;
            }
LABEL_185:
            v58 = 2;
          }
        }
        else
        {
          v26 = (uint64_t)v65 + (_QWORD)v66;
          switch(v58)
          {
            case 0:
              do
              {
                v83 = *v72;
                if (v83 == 9)
                  break;
                if (v83 == 32)
                  break;
                ++v72;
                --v80;
              }
              while (v80);
              v322 = (_OWORD *)result;
              v327 = v62;
              v331 = (uint64_t)v61;
              v334 = v60;
              v337 = v59;
              if ((char *)v72 - v66 - (uint64_t)v65 <= -2)
                goto LABEL_552;
              v84 = v64;
              v85 = v63;
              WTF::String::String();
              MEMORY[0x19AEA52F8](&v342, this, &v353, 0);
              v87 = v353;
              v353 = 0;
              if (v87)
              {
                if (*(_DWORD *)v87 == 2)
                  WTF::StringImpl::destroy(v87, v86);
                else
                  *(_DWORD *)v87 -= 2;
              }
              WTF::URL::removeFragmentIdentifier((WTF::URL *)&v342);
              if ((v343[0] & 1) == 0)
                goto LABEL_163;
              v88 = (unsigned __int8 *)WTF::URL::protocol((WTF::URL *)&v342);
              v90 = v89;
              v91 = (unsigned __int8 *)WTF::URL::protocol(this);
              if ((_DWORD)v90 != (_DWORD)v26)
                goto LABEL_163;
              v92 = v26 & 0xFF00000000;
              if ((v90 & 0xFF00000000) != 0)
              {
                if (v92)
                {
                  if ((_DWORD)v90)
                  {
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v88) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + *v91))
                    {
                      v93 = 1;
                      do
                      {
                        v94 = v93;
                        if (v90 == v93)
                          break;
                        v95 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v88[v93]);
                        v96 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v91[v93++]);
                      }
                      while (v95 == v96);
                      goto LABEL_159;
                    }
LABEL_163:
                    v98 = v342;
                    v342 = 0;
                    v62 = v327;
                    v63 = v85;
                    v64 = v84;
                    if (v98)
                    {
                      if (*(_DWORD *)v98 == 2)
                      {
                        WTF::StringImpl::destroy(v98, (WTF::StringImpl *)v26);
                        v64 = v84;
                        v63 = v85;
                        v62 = v327;
                      }
                      else
                      {
                        *(_DWORD *)v98 -= 2;
                      }
                    }
                    v58 = 0;
LABEL_268:
                    v60 = v334;
                    v59 = v337;
                    v61 = (char *)v331;
                    result = (uint64_t)v322;
                    break;
                  }
LABEL_160:
                  if (!WTF::URL::protocolIs() || WTF::protocolHostAndPortAreEqual())
                    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v84, &v342, v97, (uint64_t)&v353);
                  goto LABEL_163;
                }
                if (!(_DWORD)v90)
                  goto LABEL_160;
                if ((*(unsigned __int16 *)v91 | (32 * (*(unsigned __int16 *)v91 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v88))
                  goto LABEL_163;
                v174 = 1;
                do
                {
                  v94 = v174;
                  if (v90 == v174)
                    break;
                  v175 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v88[v174]);
                  v176 = *(unsigned __int16 *)&v91[2 * v174] | (32
                                                              * (*(unsigned __int16 *)&v91[2 * v174] - 65 < 0x1A));
                  ++v174;
                }
                while (v176 == v175);
              }
              else if (v92)
              {
                if (!(_DWORD)v90)
                  goto LABEL_160;
                if ((*(unsigned __int16 *)v88 | (32 * (*(unsigned __int16 *)v88 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v91))
                  goto LABEL_163;
                v172 = 1;
                do
                {
                  v94 = v172;
                  if (v90 == v172)
                    break;
                  v173 = *(unsigned __int16 *)&v88[2 * v172] | (32
                                                              * (*(unsigned __int16 *)&v88[2 * v172] - 65 < 0x1A));
                  ++v172;
                }
                while (v173 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v91[v94]));
              }
              else
              {
                if (!(_DWORD)v90)
                  goto LABEL_160;
                if ((*(unsigned __int16 *)v88 | (32 * (*(unsigned __int16 *)v88 - 65 < 0x1A))) != (*(unsigned __int16 *)v91 | (32 * (*(unsigned __int16 *)v91 - 65 < 0x1A))))
                  goto LABEL_163;
                v182 = 1;
                do
                {
                  v94 = v182;
                  if (v90 == v182)
                    break;
                  v183 = *(unsigned __int16 *)&v88[2 * v182] | (32
                                                              * (*(unsigned __int16 *)&v88[2 * v182] - 65 < 0x1A));
                  ++v182;
                }
                while (v183 == (*(unsigned __int16 *)&v91[2 * v94] | (32
                                                                     * (*(unsigned __int16 *)&v91[2 * v94]
                                                                      - 65 < 0x1A))));
              }
LABEL_159:
              if (v94 < v90)
                goto LABEL_163;
              goto LABEL_160;
            case 1:
              v104 = 0;
              while (1)
              {
                v105 = *(unsigned __int16 *)((char *)v65 + (_QWORD)v66 + v104);
                if (v105 == 9 || v105 == 32)
                  break;
                v104 += 2;
                v67 += 2;
                v58 = 1;
                if (!--v80)
                  goto LABEL_113;
              }
              if (v80)
              {
                v316 = v64;
                v318 = v63;
                v322 = (_OWORD *)result;
                v328 = v62;
                v331 = (uint64_t)v61;
                v334 = v60;
                v337 = v59;
                if (v104 <= -2)
                  goto LABEL_552;
                v314 = v104;
                WTF::String::String();
                MEMORY[0x19AEA52F8](&v353, this, &v342, 0);
                v107 = v342;
                v342 = 0;
                if (v107)
                {
                  if (*(_DWORD *)v107 == 2)
                    WTF::StringImpl::destroy(v107, v106);
                  else
                    *(_DWORD *)v107 -= 2;
                }
                WTF::URL::removeFragmentIdentifier((WTF::URL *)&v353);
                if ((v354[0] & 1) != 0)
                {
                  result = WTF::protocolHostAndPortAreEqual();
                  if ((_DWORD)result)
                  {
                    if (v10
                      || (v342 = (WTF::StringImpl *)WTF::URL::path((WTF::URL *)&v353),
                          *(_QWORD *)v343 = v108,
                          result = WTF::StringView::startsWith(),
                          (result & 1) != 0))
                    {
                      v109 = (char *)v65 + (_QWORD)v66 + v314;
                      while (1)
                      {
                        v110 = *(unsigned __int16 *)v109;
                        if (v110 != 9 && v110 != 32)
                          break;
                        v109 += 2;
                        v67 += 2;
                        v111 = v109;
                        if (!--v80)
                          goto LABEL_242;
                      }
                      for (i = 1; ; ++i)
                      {
                        if ((unsigned __int16)v110 == 9 || (unsigned __int16)v110 == 32)
                        {
                          v111 = v67 - 2;
                          goto LABEL_242;
                        }
                        if (v80 == i)
                          break;
                        v150 = *(_WORD *)v67;
                        v67 += 2;
                        LOWORD(v110) = v150;
                      }
                      v111 = v67;
LABEL_242:
                      if (v111 - v109 <= -2)
                        goto LABEL_552;
                      WTF::String::String();
                      MEMORY[0x19AEA52F8](&v351, this, &v342, 0);
                      v152 = v342;
                      v342 = 0;
                      if (v152)
                      {
                        if (*(_DWORD *)v152 == 2)
                          WTF::StringImpl::destroy(v152, v151);
                        else
                          *(_DWORD *)v152 -= 2;
                      }
                      WTF::URL::removeFragmentIdentifier((WTF::URL *)&v351);
                      if ((v352[0] & 1) != 0 && WTF::protocolHostAndPortAreEqual())
                      {
                        v153 = v353;
                        if (v353)
                          *(_DWORD *)v353 += 2;
                        v342 = v153;
                        v154 = v337[1];
                        *v322 = *v337;
                        v322[1] = v154;
                        v155 = v351;
                        if (v351)
                          *(_DWORD *)v351 += 2;
                        v346 = v155;
                        v156 = v334[1];
                        *(_OWORD *)v328 = *v334;
                        *((_OWORD *)v328 + 1) = v156;
                        if (DWORD1(v356[1]) == LODWORD(v356[1]))
                        {
                          v157 = (uint64_t *)WTF::Vector<std::pair<WTF::URL,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v331, DWORD1(v356[1]) + 1, (unint64_t)&v342);
                          std::pair<WTF::URL,WTF::URL>::pair[abi:sn180100](*((_QWORD *)&v356[0] + 1) + 80 * DWORD1(v356[1]), v157);
                        }
                        else
                        {
                          v158 = *((_QWORD *)&v356[0] + 1) + 80 * DWORD1(v356[1]);
                          v342 = 0;
                          *(_QWORD *)v158 = v153;
                          v159 = *(_DWORD *)(v158 + 8) & 0xFFFFFFFE | v343[0] & 1;
                          *(_DWORD *)(v158 + 8) = v159;
                          v160 = v159 & 0xFFFFFFFD | (2 * ((*(_DWORD *)v343 >> 1) & 1));
                          *(_DWORD *)(v158 + 8) = v160;
                          v161 = v160 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v343 >> 2) & 1));
                          *(_DWORD *)(v158 + 8) = v161;
                          v162 = v161 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v343 >> 3) & 7));
                          *(_DWORD *)(v158 + 8) = v162;
                          *(_DWORD *)(v158 + 8) = *(_DWORD *)v343 & 0xFFFFFFC0 | v162 & 0x3F;
                          *(_OWORD *)(v158 + 12) = *(_OWORD *)&v343[4];
                          *(_QWORD *)(v158 + 28) = v344;
                          *(_DWORD *)(v158 + 36) = v345;
                          *(_DWORD *)v343 &= ~1u;
                          v163 = v346;
                          v346 = 0;
                          *(_QWORD *)(v158 + 40) = v163;
                          v164 = *(_DWORD *)(v158 + 48) & 0xFFFFFFFE | v347 & 1;
                          *(_DWORD *)(v158 + 48) = v164;
                          v165 = v164 & 0xFFFFFFFD | (2 * ((v347 >> 1) & 1));
                          *(_DWORD *)(v158 + 48) = v165;
                          v166 = v165 & 0xFFFFFFFB | (4 * ((v347 >> 2) & 1));
                          *(_DWORD *)(v158 + 48) = v166;
                          v167 = v166 & 0xFFFFFFC7 | (8 * ((v347 >> 3) & 7));
                          *(_DWORD *)(v158 + 48) = v167;
                          *(_DWORD *)(v158 + 48) = v347 & 0xFFFFFFC0 | v167 & 0x3F;
                          *(_OWORD *)(v158 + 52) = v348;
                          *(_QWORD *)(v158 + 68) = v349;
                          *(_DWORD *)(v158 + 76) = v350;
                          v347 &= ~1u;
                        }
                        ++DWORD1(v356[1]);
                        v168 = v346;
                        v346 = 0;
                        if (v168)
                        {
                          if (*(_DWORD *)v168 == 2)
                            WTF::StringImpl::destroy(v168, (WTF::StringImpl *)v26);
                          else
                            *(_DWORD *)v168 -= 2;
                        }
                        v169 = v342;
                        v342 = 0;
                        if (v169)
                        {
                          if (*(_DWORD *)v169 == 2)
                            WTF::StringImpl::destroy(v169, (WTF::StringImpl *)v26);
                          else
                            *(_DWORD *)v169 -= 2;
                        }
                      }
                      v170 = v351;
                      v351 = 0;
                      if (v170)
                      {
                        if (*(_DWORD *)v170 == 2)
                          WTF::StringImpl::destroy(v170, (WTF::StringImpl *)v26);
                        else
                          *(_DWORD *)v170 -= 2;
                      }
                    }
                  }
                }
                v171 = v353;
                v353 = 0;
                v62 = v328;
                v64 = v316;
                v63 = v318;
                if (v171)
                {
                  if (*(_DWORD *)v171 == 2)
                  {
                    WTF::StringImpl::destroy(v171, (WTF::StringImpl *)v26);
                    v64 = v316;
                    v63 = v318;
                    v62 = v328;
                  }
                  else
                  {
                    *(_DWORD *)v171 -= 2;
                  }
                }
                v58 = 1;
                goto LABEL_268;
              }
              v58 = 1;
              break;
            case 2:
              do
              {
                v82 = *v72;
                if (v82 == 9)
                  break;
                if (v82 == 32)
                  break;
                ++v72;
                --v80;
              }
              while (v80);
              if ((unsigned __int16 *)((char *)v72 - v66 - 2) != v65)
              {
                if ((char *)v72 - v66 - (uint64_t)v65 <= -2)
                  goto LABEL_552;
LABEL_209:
                v112 = v64;
                v113 = v63;
                v114 = v62;
                v115 = result;
                v332 = v61;
                v335 = v60;
                v338 = v59;
                WTF::String::String();
                MEMORY[0x19AEA52F8](&v342, this, &v353, 0);
                v117 = v353;
                v353 = 0;
                if (v117)
                {
                  if (*(_DWORD *)v117 == 2)
                    WTF::StringImpl::destroy(v117, v116);
                  else
                    *(_DWORD *)v117 -= 2;
                }
                WTF::URL::removeFragmentIdentifier((WTF::URL *)&v342);
                v62 = v114;
                v63 = v113;
                v64 = v112;
                if ((v343[0] & 1) == 0)
                  goto LABEL_226;
                v329 = v114;
                v118 = v113;
                v119 = v112;
                v120 = (unsigned __int8 *)WTF::URL::protocol((WTF::URL *)&v342);
                v323 = v121;
                v122 = (unsigned __int8 *)WTF::URL::protocol(this);
                v64 = v119;
                v63 = v118;
                v62 = v329;
                if ((_DWORD)v323 != (_DWORD)v26)
                  goto LABEL_226;
                v123 = v26 & 0xFF00000000;
                if ((v323 & 0xFF00000000) != 0)
                {
                  if (v123)
                  {
                    if (!(_DWORD)v323)
                      goto LABEL_222;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v120) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + *v122))
                    {
                      v124 = 1;
                      do
                      {
                        v125 = v124;
                        if (v323 == v124)
                          break;
                        v126 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v120[v124]);
                        v127 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v122[v124++]);
                      }
                      while (v126 == v127);
LABEL_221:
                      if (v125 >= v323)
                      {
LABEL_222:
                        if (HIDWORD(v355) == DWORD2(v355))
                        {
                          v128 = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v355, HIDWORD(v355) + 1, (unint64_t)&v342);
                          v129 = v355 + 40 * HIDWORD(v355);
                          v130 = *(_QWORD *)v128;
                          *(_QWORD *)v128 = 0;
                          *(_QWORD *)v129 = v130;
                          v132 = *((_DWORD *)v128 + 2);
                          v131 = v128 + 8;
                          v133 = *(_DWORD *)(v129 + 8) & 0xFFFFFFFE | v132 & 1;
                          *(_DWORD *)(v129 + 8) = v133;
                          v134 = v133 & 0xFFFFFFFD | (2 * ((*(_DWORD *)v131 >> 1) & 1));
                          *(_DWORD *)(v129 + 8) = v134;
                          v135 = v134 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v131 >> 2) & 1));
                          *(_DWORD *)(v129 + 8) = v135;
                          v136 = v135 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v131 >> 3) & 7));
                          *(_DWORD *)(v129 + 8) = v136;
                          *(_DWORD *)(v129 + 8) = *(_DWORD *)v131 & 0xFFFFFFC0 | v136 & 0x3F;
                          *(_OWORD *)(v129 + 12) = *(_OWORD *)(v131 + 4);
                          *(_QWORD *)(v129 + 28) = *(_QWORD *)(v131 + 20);
                          v137 = (int *)(v129 + 36);
                          v138 = (int *)(v131 + 28);
                        }
                        else
                        {
                          v139 = v355 + 40 * HIDWORD(v355);
                          v140 = v342;
                          v342 = 0;
                          *(_QWORD *)v139 = v140;
                          v141 = *(_DWORD *)(v139 + 8) & 0xFFFFFFFE | v343[0] & 1;
                          *(_DWORD *)(v139 + 8) = v141;
                          v142 = v141 & 0xFFFFFFFD | (2 * ((*(_DWORD *)v343 >> 1) & 1));
                          *(_DWORD *)(v139 + 8) = v142;
                          v143 = v142 & 0xFFFFFFFB | (4 * ((*(_DWORD *)v343 >> 2) & 1));
                          *(_DWORD *)(v139 + 8) = v143;
                          v144 = v143 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)v343 >> 3) & 7));
                          *(_DWORD *)(v139 + 8) = v144;
                          *(_DWORD *)(v139 + 8) = *(_DWORD *)v343 & 0xFFFFFFC0 | v144 & 0x3F;
                          *(_OWORD *)(v139 + 12) = *(_OWORD *)&v343[4];
                          *(_QWORD *)(v139 + 28) = v344;
                          v137 = (int *)(v139 + 36);
                          v138 = v118;
                          v131 = (char *)v115;
                        }
                        *v137 = *v138;
                        *(_DWORD *)v131 &= ~1u;
                        ++HIDWORD(v355);
                        v62 = v329;
                        v63 = v118;
                        v64 = v119;
                      }
                    }
                    goto LABEL_226;
                  }
                  if (!(_DWORD)v323)
                    goto LABEL_222;
                  if ((*(unsigned __int16 *)v122 | (32 * (*(unsigned __int16 *)v122 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v120))
                    goto LABEL_226;
                  v179 = 1;
                  while (1)
                  {
                    v125 = v179;
                    if (v323 == v179)
                      break;
                    v180 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v120[v179]);
                    v181 = *(unsigned __int16 *)&v122[2 * v179] | (32
                                                                 * (*(unsigned __int16 *)&v122[2 * v179]
                                                                  - 65 < 0x1A));
                    ++v179;
                    v62 = v329;
                    v63 = v118;
                    v64 = v119;
                    if (v181 != v180)
                      goto LABEL_221;
                  }
                }
                else if (v123)
                {
                  v62 = v329;
                  if (!(_DWORD)v323)
                    goto LABEL_222;
                  v63 = v118;
                  v64 = v119;
                  if ((*(unsigned __int16 *)v120 | (32 * (*(unsigned __int16 *)v120 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v122))
                    goto LABEL_226;
                  v177 = 1;
                  while (1)
                  {
                    v125 = v177;
                    if (v323 == v177)
                      break;
                    v178 = *(unsigned __int16 *)&v120[2 * v177] | (32
                                                                 * (*(unsigned __int16 *)&v120[2 * v177]
                                                                  - 65 < 0x1A));
                    ++v177;
                    v62 = v329;
                    v63 = v118;
                    v64 = v119;
                    if (v178 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v122[v125]))
                      goto LABEL_221;
                  }
                }
                else
                {
                  v62 = v329;
                  if (!(_DWORD)v323)
                    goto LABEL_222;
                  v63 = v118;
                  v64 = v119;
                  if ((*(unsigned __int16 *)v120 | (32 * (*(unsigned __int16 *)v120 - 65 < 0x1A))) != (*(unsigned __int16 *)v122 | (32 * (*(unsigned __int16 *)v122 - 65 < 0x1A))))
                  {
LABEL_226:
                    v145 = v342;
                    v342 = 0;
                    if (v145)
                    {
                      if (*(_DWORD *)v145 == 2)
                      {
                        v146 = v62;
                        v147 = v63;
                        v148 = v64;
                        WTF::StringImpl::destroy(v145, (WTF::StringImpl *)v26);
                        v64 = v148;
                        v63 = v147;
                        v62 = v146;
                      }
                      else
                      {
                        *(_DWORD *)v145 -= 2;
                      }
                    }
                    v58 = 2;
                    v60 = v335;
                    v59 = v338;
                    v61 = v332;
                    result = v115;
                    break;
                  }
                  v184 = 1;
                  while (1)
                  {
                    v125 = v184;
                    if (v323 == v184)
                      break;
                    v185 = *(unsigned __int16 *)&v120[2 * v184] | (32
                                                                 * (*(unsigned __int16 *)&v120[2 * v184]
                                                                  - 65 < 0x1A));
                    ++v184;
                    v62 = v329;
                    v63 = v118;
                    v64 = v119;
                    if (v185 != (*(unsigned __int16 *)&v122[2 * v125] | (32
                                                                        * (*(unsigned __int16 *)&v122[2 * v125]
                                                                         - 65 < 0x1A))))
                      goto LABEL_221;
                  }
                }
                v62 = v329;
                v63 = v118;
                v64 = v119;
                goto LABEL_221;
              }
              if (v69 != 42)
                goto LABEL_209;
              BYTE8(v356[1]) = 1;
              goto LABEL_185;
          }
        }
LABEL_113:
        if (!v33)
          goto LABEL_87;
      }
    }
LABEL_52:
    v40 = 0;
    *(_BYTE *)a5 = 0;
    goto LABEL_53;
  }
LABEL_87:
  v51 = v355;
  *(_QWORD *)&v355 = 0;
  *(_QWORD *)a5 = v51;
  v52 = *(_QWORD *)&v356[1];
  *(_QWORD *)(a5 + 8) = *((_QWORD *)&v355 + 1);
  *(_OWORD *)(a5 + 16) = v356[0];
  *((_QWORD *)&v355 + 1) = 0;
  memset(v356, 0, 24);
  *(_QWORD *)(a5 + 32) = v52;
  v40 = 1;
  *(_BYTE *)(a5 + 40) = BYTE8(v356[1]);
LABEL_53:
  *(_BYTE *)(a5 + 48) = v40;
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v355, (void *)v26);
  result = (uint64_t)v341;
  v341 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v41);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ApplicationCacheResource::create(WebCore::ResourceResponseBase *a1@<X1>, uint64_t a2@<X0>, int a3@<W2>, unsigned int **a4@<X3>, _DWORD **a5@<X4>, uint64_t *a6@<X8>)
{
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  CFTypeRef v35;
  void *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  CFTypeRef v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[19];
  CFTypeRef cf;
  char v75;

  if (!*a4)
  {
    v13 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = v13 + 24;
    *(_QWORD *)(v13 + 16) = 1;
    *(_QWORD *)(v13 + 48) = 0;
    *(_BYTE *)(v13 + 40) = 1;
    v55 = 0;
    v14 = *a4;
    *a4 = (unsigned int *)v13;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        v40 = v14[5];
        if ((_DWORD)v40)
        {
          v41 = *((_QWORD *)v14 + 1);
          v42 = v41 + 16 * v40;
          do
          {
            v43 = *(unsigned int **)(v41 + 8);
            *(_QWORD *)(v41 + 8) = 0;
            if (v43)
            {
              do
              {
                v44 = __ldaxr(v43);
                v45 = v44 - 1;
              }
              while (__stlxr(v45, v43));
              if (!v45)
              {
                v49 = v42;
                v50 = v41;
                v51 = (WTF *)v43;
                v52 = v14;
                atomic_store(1u, v43);
                v46 = v43[6];
                if ((_DWORD)v46 != -1)
                  ((void (*)(unsigned int **, unsigned int *))off_1E33F80A8[v46])(&v54, v43 + 2);
                *((_DWORD *)v51 + 6) = -1;
                WTF::fastFree(v51, v12);
                v14 = v52;
                v42 = v49;
                v41 = v50;
              }
            }
            v41 += 16;
          }
          while (v41 != v42);
        }
        v47 = (WTF *)*((_QWORD *)v14 + 1);
        if (v14 + 6 != (unsigned int *)v47 && v47 != 0)
        {
          *((_QWORD *)v14 + 1) = 0;
          v14[4] = 0;
          v53 = v14;
          WTF::fastFree(v47, v12);
          v14 = v53;
        }
        WTF::fastFree((WTF *)v14, v12);
      }
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v55, v12);
  }
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v55, a1);
  v17 = (const void *)*((_QWORD *)a1 + 30);
  cf = v17;
  if (v17)
    CFRetain(v17);
  v75 = *((_BYTE *)a1 + 248);
  *(_WORD *)&v73[16] = *(_WORD *)&v73[16] & 0xC3FF | 0x1C00;
  v18 = WTF::fastMalloc((WTF *)0x160);
  v19 = v18;
  v20 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v20 += 2;
  v54 = *a4;
  v21 = *(_OWORD *)(a2 + 8);
  v22 = *(_OWORD *)(a2 + 24);
  *a4 = 0;
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)v18 = off_1E33F8110;
  *(_QWORD *)(v18 + 16) = v20;
  *(_OWORD *)(v18 + 24) = v21;
  *(_OWORD *)(v18 + 40) = v22;
  *(_QWORD *)(v18 + 56) = v55;
  LODWORD(v21) = v56;
  v23 = v57;
  *(_OWORD *)(v18 + 64) = v56;
  *(_OWORD *)(v18 + 80) = v23;
  v24 = v21;
  v25 = v60;
  v60 = 0u;
  v26 = v61;
  v61 = 0u;
  v55 = 0;
  LODWORD(v56) = v24 & 0xFFFFFFFE;
  v27 = v58;
  v28 = v59;
  v58 = 0;
  *(_QWORD *)(v18 + 96) = v27;
  *(_QWORD *)(v18 + 104) = v28;
  *(_OWORD *)(v18 + 112) = v25;
  *(_OWORD *)(v18 + 128) = v26;
  *(_QWORD *)&v25 = v62;
  v62 = 0;
  *(_QWORD *)(v18 + 144) = v25;
  v29 = v63;
  v63 = 0;
  *(_QWORD *)(v18 + 152) = v29;
  *(_QWORD *)&v25 = v64;
  v64 = 0;
  *(_QWORD *)(v18 + 160) = v25;
  v30 = v65;
  v65 = 0;
  *(_QWORD *)(v18 + 168) = v30;
  *(_BYTE *)(v18 + 176) = 0;
  *(_BYTE *)(v18 + 184) = 0;
  if (v67)
  {
    v31 = v66;
    v66 = 0;
    *(_QWORD *)(v18 + 176) = v31;
    *(_BYTE *)(v18 + 184) = 1;
  }
  v32 = v71;
  v33 = *(_OWORD *)v73;
  *(_OWORD *)(v18 + 256) = v72;
  *(_OWORD *)(v18 + 272) = v33;
  v34 = v69;
  *(_OWORD *)(v18 + 192) = v68;
  *(_OWORD *)(v18 + 208) = v34;
  *(_OWORD *)(v18 + 224) = v70;
  *(_OWORD *)(v18 + 240) = v32;
  *(_DWORD *)(v18 + 287) = *(_DWORD *)&v73[15];
  v35 = cf;
  cf = 0;
  *(_QWORD *)(v18 + 296) = v35;
  *(_BYTE *)(v18 + 304) = v75;
  *(_QWORD *)(v18 + 312) = 0;
  WebCore::SharedBufferBuilder::initialize((WebCore::SharedBufferBuilder *)(v18 + 312), &v54);
  *(_QWORD *)(v19 + 320) = 0;
  *(_QWORD *)v19 = off_1E33F7EF0;
  *(_DWORD *)(v19 + 328) = a3;
  *(_DWORD *)(v19 + 332) = 0;
  *(_QWORD *)(v19 + 336) = 0;
  v37 = *a5;
  if (*a5)
    *v37 += 2;
  *(_QWORD *)(v19 + 344) = v37;
  *a6 = v19;
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v54, v36);
  v39 = cf;
  cf = 0;
  if (v39)
    CFRelease(v39);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v55, v38);
}

uint64_t WebCore::ApplicationCacheResource::deliver(WebCore::ApplicationCacheResource *this, WebCore::ResourceLoader *a2)
{
  uint64_t v3;
  char *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 43);
  if (v3 && *(_DWORD *)(v3 + 4))
  {
    v4 = (char *)this + 56;
    WebCore::SharedBuffer::createWithContentsOfFile((WebCore::ApplicationCacheResource *)((char *)this + 344), 0, 1, &v10);
    v6 = v10;
  }
  else
  {
    v4 = (char *)this + 56;
    v5 = (unsigned int *)WebCore::SubstituteResource::data(this, a2);
    v6 = (uint64_t)v5;
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 + 1, v5));
  }
  ++*((_DWORD *)a2 + 4);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E33F7770;
  v8[1] = a2;
  v8[2] = a2;
  v8[3] = v6;
  v11 = (uint64_t)v8;
  (*(void (**)(WebCore::ResourceLoader *, char *, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v4, &v11);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::ApplicationCacheResource::estimatedSizeInStorage(WebCore::ApplicationCacheResource *this, void *a2)
{
  uint64_t result;
  WTF::StringImpl *v4;
  int v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  result = *((_QWORD *)this + 42);
  if (!result)
  {
    *((_QWORD *)this + 42) = *(_QWORD *)(WebCore::SubstituteResource::data(this, a2) + 48);
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 56, 2);
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v20, (uint64_t)this + 136, *((WTF::StringImpl **)this + 17), *((_QWORD *)this + 19));
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v17, (uint64_t)this + 136, (WTF::StringImpl *)(*((_QWORD *)this + 17) + 16 * *((unsigned int *)this + 37)), *((_QWORD *)this + 19) + 16 * *((unsigned int *)this + 41));
    while (v21 != v17[1] || v22 != v17[2])
    {
      v5 = (int)v23;
      if (v23)
        v5 = *((_DWORD *)v23 + 1);
      v6 = (int)v24;
      if (v24)
        v6 = *((_DWORD *)v24 + 1);
      *((_QWORD *)this + 42) += 2 * (v5 + v6 + 2);
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)v20, v4);
    }
    v7 = v19;
    v19 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v18;
    v18 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v4);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v24;
    v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v4);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v23;
    v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v4);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *((_QWORD *)this + 2);
    if (v11)
      v12 = 2 * *(unsigned int *)(v11 + 4) + 4;
    else
      v12 = 4;
    *((_QWORD *)this + 42) += v12;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 56, 1);
    v13 = *((_QWORD *)this + 7);
    if (v13)
      v14 = 2 * *(unsigned int *)(v13 + 4) + 4;
    else
      v14 = 4;
    *((_QWORD *)this + 42) += v14;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 56, 1);
    v15 = *((_QWORD *)this + 12);
    if (v15)
      v15 = 2 * *(unsigned int *)(v15 + 4);
    *((_QWORD *)this + 42) += v15;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 56, 1);
    v16 = *((_QWORD *)this + 14);
    if (v16)
      v16 = 2 * *(unsigned int *)(v16 + 4);
    result = *((_QWORD *)this + 42) + v16;
    *((_QWORD *)this + 42) = result;
  }
  return result;
}

void WebCore::ApplicationCacheResourceLoader::create(int a1@<W0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::CachedResource *v25;
  WTF::StringImpl *v26;
  WebCore::ApplicationCacheResourceLoader *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[10];
  unsigned int v31;
  _BYTE v32[152];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _WORD v39[76];
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  int v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  char v52;
  char v53;
  char v54;
  __int16 v55;
  int v56;
  __int128 v57;
  WTF::StringImpl *v58;
  int v59;
  unsigned int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v44 = 512;
  v45 = 2;
  v46 = 0;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0;
  v52 = 1;
  v53 = 0;
  v54 = 0;
  v55 = 20;
  v57 = 0u;
  v56 = 201591123;
  WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)v32, (uint64_t *)a3);
  v10 = *(_OWORD *)(a3 + 152);
  *(_OWORD *)(a3 + 152) = 0u;
  v33 = v10;
  v11 = *(_QWORD *)(a3 + 168);
  v12 = *(_QWORD *)(a3 + 176);
  *(_QWORD *)(a3 + 168) = 0;
  v34 = v11;
  v35 = v12;
  v36 = *(_BYTE *)(a3 + 184);
  v13 = *(_QWORD *)(a3 + 192);
  *(_QWORD *)(a3 + 192) = 0;
  v37 = v13;
  v38 = 0;
  WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v39, (const WebCore::ResourceLoaderOptions *)&v44);
  v39[72] = 0;
  v40 = 0;
  v41 = 0u;
  WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)v32, &v42);
  v43 = 0;
  WebCore::CachedResourceLoader::requestResource(&v58, (WebCore::ResourceRequest *)v32, a2, (WTF::StringImpl *)8, 0, 0);
  WebCore::castCachedResourceTo<WebCore::CachedRawResource,WebCore::CachedResource>((uint64_t)v30, &v58);
  if (v60 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
     + v60))((int)&v29, (WebCore::CachedResourceHandleBase *)&v58);
  if (v31)
  {
    LODWORD(v58) = 2;
    v59 = 1;
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v58);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v59 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore24ApplicationCacheResourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_30ApplicationCacheResourceLoader5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v59])(&v29, &v58);
    v16 = 0;
  }
  else
  {
    v17 = WTF::fastMalloc((WTF *)0x38);
    if (v31)
    {
      v27 = (WebCore::ApplicationCacheResourceLoader *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(v27, v28);
      return;
    }
    v16 = v17;
    *(_QWORD *)v17 = off_1E33F7F18;
    *(_QWORD *)(v17 + 8) = 0;
    *(_DWORD *)(v17 + 16) = 1;
    *(_DWORD *)(v17 + 20) = a1;
    v18 = (_QWORD *)(v17 + 24);
    v19 = v30[0];
    if (v30[0])
    {
      do
        v20 = __ldaxr((unsigned int *)v19);
      while (__stlxr(v20 + 1, (unsigned int *)v19));
      *v18 = v19;
      v21 = *(_QWORD *)(v19 + 8);
      if (v21)
      {
        v29 = v17 + 24;
        ++*(_DWORD *)(v21 + 548);
        v22 = *(_QWORD *)(v21 + 488);
        if (v22)
        {
          if (*(_QWORD *)(v22 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v21 + 464), &v29, (uint64_t)&v58);
        }
      }
    }
    else
    {
      *v18 = 0;
    }
    *(_QWORD *)(v16 + 32) = 0;
    v23 = *a4;
    *a4 = 0;
    *(_QWORD *)(v16 + 40) = v23;
    *(_BYTE *)(v16 + 48) = 0;
    v24 = *(_QWORD *)(v16 + 24);
    if (v24)
      v25 = *(WebCore::CachedResource **)(v24 + 8);
    else
      v25 = 0;
    if (WebCore::CachedResource::addClientToSet(v25, (WebCore::CachedResourceClient *)v16))
      (*(void (**)(WebCore::CachedResource *, uint64_t))(*(_QWORD *)v25 + 88))(v25, v16);
  }
  *a5 = v16;
  if (v31 != -1)
    (*(&off_1E33F8048 + v31))((int)&v58, (WebCore::CachedResourceHandleBase *)v30);
  WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v32, v15);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v44, v26);
}

void WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(WebCore::ApplicationCacheResourceLoader *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::CachedResource *v5;
  uint64_t v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  int v12;
  char v13;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    v11 = 0;
    v12 = 1;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v3 + 16))(v3, &v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v12 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore24ApplicationCacheResourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_30ApplicationCacheResourceLoader5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v12])(&v13, &v11);
  }
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(WebCore::CachedResource **)(v4 + 8);
    if (v5)
      WebCore::CachedResource::removeClient(v5, (unsigned int **)this);
  }
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 3, a2);
  *(_QWORD *)this = &off_1E33F87C8;
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v8);
      else
        --*(_DWORD *)v10;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WebCore::ApplicationCacheResourceLoader::cancel(uint64_t *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  int v7;
  int v8;
  char v9;

  v2 = (uint64_t)this;
  ++*((_DWORD *)this + 4);
  v3 = this[5];
  this[5] = 0;
  if (v3)
  {
    v7 = (int)a2;
    v8 = 1;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v3 + 16))(v3, &v7);
    this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v8 != -1)
      this = (uint64_t *)((uint64_t (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore24ApplicationCacheResourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_30ApplicationCacheResourceLoader5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v8])(&v9, &v7);
  }
  v4 = *(_QWORD *)(v2 + 24);
  if (v4)
  {
    this = *(uint64_t **)(v4 + 8);
    if (this)
    {
      WebCore::CachedResource::removeClient((WebCore::CachedResource *)this, (unsigned int **)v2);
      this = WebCore::CachedResourceHandleBase::setResource((uint64_t *)(v2 + 24), 0);
    }
  }
  if (*(_DWORD *)(v2 + 16) == 1)
  {
    WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader((WebCore::ApplicationCacheResourceLoader *)v2, a2);
    return (uint64_t *)WTF::fastFree(v5, v6);
  }
  else
  {
    --*(_DWORD *)(v2 + 16);
  }
  return this;
}

void WebCore::ApplicationCacheResourceLoader::responseReceived(uint64_t a1, uint64_t a2, WebCore::ResourceResponseBase *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  _DWORD *v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  _DWORD *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;

  v6 = *a4;
  *a4 = 0;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1);
  if (*((_WORD *)a3 + 68) == 404
    || (WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1), *((_WORD *)a3 + 68) == 410))
  {
    v7 = (uint64_t *)a1;
    v8 = 3;
LABEL_4:
    WebCore::ApplicationCacheResourceLoader::cancel(v7, (void *)v8);
    goto LABEL_5;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1);
  if (*((_WORD *)a3 + 68) == 304)
  {
    WebCore::ApplicationCacheResourceLoader::notifyFinished((WebCore::ApplicationCacheResourceLoader *)a1);
  }
  else
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1);
    if ((*((__int16 *)a3 + 68) - 200) >= 0x64)
    {
      v7 = (uint64_t *)a1;
      v8 = 4;
      goto LABEL_4;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v10 = v9 + 160;
    if ((*(_BYTE *)(v9 + 344) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v9 + 160));
      *(_BYTE *)(v9 + 344) |= 1u;
    }
    v11 = *(_DWORD *)(a1 + 20);
    v12 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = v12 + 24;
    *(_QWORD *)(v12 + 16) = 1;
    *(_QWORD *)(v12 + 48) = 0;
    *(_BYTE *)(v12 + 40) = 1;
    v28 = 0;
    v29 = (WTF *)v12;
    v27 = 0;
    WebCore::ApplicationCacheResource::create(a3, v10, v11, (unsigned int **)&v29, &v27, &v30);
    v14 = *(_DWORD **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v30;
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[2];
    }
    v15 = v29;
    v29 = 0;
    v30 = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v15));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v15);
        v18 = *((unsigned int *)v15 + 5);
        if ((_DWORD)v18)
        {
          v19 = *((_QWORD *)v15 + 1);
          v20 = v19 + 16 * v18;
          do
          {
            v21 = *(unsigned int **)(v19 + 8);
            *(_QWORD *)(v19 + 8) = 0;
            if (v21)
            {
              do
              {
                v22 = __ldaxr(v21);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, v21));
              if (!v23)
              {
                atomic_store(1u, v21);
                v24 = v21[6];
                if ((_DWORD)v24 != -1)
                  ((void (*)(_DWORD **, unsigned int *))off_1E33F80A8[v24])(&v27, v21 + 2);
                v21[6] = -1;
                WTF::fastFree((WTF *)v21, v13);
              }
            }
            v19 += 16;
          }
          while (v19 != v20);
        }
        v25 = (WTF *)*((_QWORD *)v15 + 1);
        if ((WTF *)((char *)v15 + 24) != v25 && v25 != 0)
        {
          *((_QWORD *)v15 + 1) = 0;
          *((_DWORD *)v15 + 4) = 0;
          WTF::fastFree(v25, v13);
        }
        WTF::fastFree(v15, v13);
      }
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v28, v13);
  }
LABEL_5:
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

void WebCore::ApplicationCacheResourceLoader::notifyFinished(WebCore::ApplicationCacheResourceLoader *this)
{
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  WebCore::CachedResource *v7;
  void *v8;
  void *v9;
  WebCore::CachedResource *v10;
  WTF *v11;
  void *v12;
  unsigned int *v13;
  unsigned int *v14;
  int v15;

  v3 = (uint64_t *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  ++*((_DWORD *)this + 4);
  if ((*(_WORD *)(*(_QWORD *)(v2 + 8) + 557) >> 5) - 3 <= 1)
  {
    WebCore::ApplicationCacheResourceLoader::cancel((uint64_t *)this, (void *)1);
    goto LABEL_14;
  }
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    v6 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    v14 = v6;
    v15 = 0;
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v5 + 16))(v5, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v15 != -1)
      ((void (*)(unsigned int **, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore24ApplicationCacheResourceENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_30ApplicationCacheResourceLoader5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v15])(&v13, &v14);
    v2 = *v3;
    v13 = 0;
    v14 = 0;
    if (!v2)
    {
      v7 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v7 = *(WebCore::CachedResource **)(v2 + 8);
LABEL_10:
  WebCore::CachedResourceHandleBase::setResource((uint64_t *)&v13, v7);
  WebCore::CachedResourceHandleBase::setResource(v3, 0);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v14, v8);
  if (v13)
  {
    v10 = (WebCore::CachedResource *)*((_QWORD *)v13 + 1);
    if (v10)
      WebCore::CachedResource::removeClient(v10, (unsigned int **)this);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v13, v9);
LABEL_14:
  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::ApplicationCacheResourceLoader::~ApplicationCacheResourceLoader(this, v4);
    WTF::fastFree(v11, v12);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
}

uint64_t WebCore::ApplicationCacheResourceLoader::dataReceived(WebCore::ApplicationCacheResourceLoader *this, WebCore::CachedResource *a2, const WebCore::SharedBuffer *a3)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 4);
  WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)(v4 + 312));
  return WebCore::FragmentedSharedBuffer::append(*(WebCore::FragmentedSharedBuffer **)(v4 + 312), a3);
}

void WebCore::ApplicationCacheResourceLoader::redirectReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[7];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  char v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  *(_BYTE *)(a1 + 48) = 1;
  if ((*(_BYTE *)(a1 + 20) & 0x16) != 0)
  {
    WebCore::ApplicationCacheResourceLoader::cancel((uint64_t *)a1, (void *)5);
    v30 = 0;
    WTF::URL::invalidate((WTF::URL *)&v30);
    v6 = v30;
    if (v30)
      *(_DWORD *)v30 += 2;
    v14 = v6;
    v15 = v31;
    v16 = v32;
    v17[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v17);
    v17[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v17[6] = v33;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0x10000;
    v8 = v22 & 0x80 | 4;
    v22 = v8;
    v23 = 0;
    v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v9 += 2;
      v8 = v22;
    }
    v24 = v9;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = v28 & 0xE0 | 5;
    v22 = v8 | 2;
    v10 = v30;
    v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    v29 = 0;
    v11 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v14, v12);
  }
  else
  {
    v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

uint64_t WebCore::ApplicationCacheStorage::openDatabase(WTF::StringImpl **this, char a2)
{
  WebCore::SQLiteDatabaseTracker *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned __int8 *v16;
  int v18;
  WebCore::SQLiteDatabaseTracker *v19;
  int v20;
  unsigned __int8 *v21;
  WebCore::SQLiteDatabaseTracker *v23;
  WebCore::SQLiteDatabaseTracker *v24;
  int v25;
  int v26;
  WebCore::SQLiteDatabaseTracker *v27;
  uint64_t v28;
  sqlite3_stmt *v29;
  int v30;
  char *v31;
  __int16 v32;
  WTF::StringImpl *v33;
  sqlite3_stmt *pStmt;
  int v35;
  char v36;

  v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)this);
  if (this[8] || !this[1])
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
  WTF::FileSystemImpl::pathByAppendingComponent();
  v7 = this[3];
  v8 = v33;
  v33 = 0;
  this[3] = v8;
  if (v7)
  {
    v9 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 != 2)
    {
LABEL_6:
      *(_DWORD *)v7 = v9;
      goto LABEL_7;
    }
    WTF::StringImpl::destroy(v7, v6);
    v7 = v33;
    v33 = 0;
    if (v7)
    {
      v9 = *(_DWORD *)v7 - 2;
      if (*(_DWORD *)v7 != 2)
        goto LABEL_6;
      WTF::StringImpl::destroy(v7, v6);
    }
  }
LABEL_7:
  if ((a2 & 1) == 0)
  {
    v4 = (WebCore::SQLiteDatabaseTracker *)WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)(this + 3), v6);
    if (!(_DWORD)v4)
      return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
  }
  v10 = (unsigned int *)(this + 7);
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)(this + 1), v6);
  v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::open((uint64_t)(this + 7), (WTF::FileSystemImpl *)(this + 3), 2u, 0);
  if (!this[8])
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)(this + 7), "PRAGMA user_version", 20, (uint64_t)&v33);
  if (v35)
    goto LABEL_11;
  if (!sqlite3_stmt_busy(pStmt))
  {
    v21 = (unsigned __int8 *)v33 + 32;
    if (__ldaxr((unsigned __int8 *)v33 + 32))
    {
      __clrex();
    }
    else if (!__stxr(1u, v21))
    {
LABEL_50:
      if (*((_BYTE *)v33 + 20) || (v24 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v24))
      {
        v25 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v24);
        v27 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v25 = (int)v27;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v27);
      }
      v26 = __ldxr(v21);
      if (v26 == 1)
      {
        if (!__stlxr(0, v21))
        {
LABEL_58:
          if (v25 != 100)
            goto LABEL_11;
          goto LABEL_20;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v21);
      goto LABEL_58;
    }
    MEMORY[0x19AEA534C](v21);
    goto LABEL_50;
  }
LABEL_20:
  if (sqlite3_data_count(pStmt) >= 1)
  {
    v18 = sqlite3_column_int(pStmt, 0);
    if (v18)
    {
      if (v18 == 7)
      {
LABEL_41:
        if (v35 != -1)
          ((void (*)(uint64_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v35])(&v28, &v33);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TABLE IF NOT EXISTS CacheGroups (id INTEGER PRIMARY KEY AUTOINCREMENT, manifestHostHash INTEGER NOT NULL ON CONFLICT FAIL, manifestURL TEXT UNIQUE ON CONFLICT FAIL, newestCache INTEGER, origin TEXT)", 206);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TABLE IF NOT EXISTS Caches (id INTEGER PRIMARY KEY AUTOINCREMENT, cacheGroup INTEGER, size INTEGER)", 107);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TABLE IF NOT EXISTS CacheWhitelistURLs (url TEXT NOT NULL ON CONFLICT FAIL, cache INTEGER NOT NULL ON CONFLICT FAIL)", 124);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TABLE IF NOT EXISTS CacheAllowsAllNetworkRequests (wildcard INTEGER NOT NULL ON CONFLICT FAIL, cache INTEGER NOT NULL ON CONFLICT FAIL)", 143);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TABLE IF NOT EXISTS FallbackURLs (namespace TEXT NOT NULL ON CONFLICT FAIL, fallbackURL TEXT NOT NULL ON CONFLICT FAIL, cache INTEGER NOT NULL ON CONFLICT FAIL)", 168);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TABLE IF NOT EXISTS CacheEntries (cache INTEGER NOT NULL ON CONFLICT FAIL, type INTEGER, resource INTEGER NOT NULL)", 123);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TABLE IF NOT EXISTS CacheResources (id INTEGER PRIMARY KEY AUTOINCREMENT, url TEXT NOT NULL ON CONFLICT FAIL, statusCode INTEGER NOT NULL, responseURL TEXT NOT NULL, mimeType TEXT, textEncodingName TEXT, headers TEXT, data INTEGER NOT NULL ON CONFLICT FAIL)", 265);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TABLE IF NOT EXISTS CacheResourceData (id INTEGER PRIMARY KEY AUTOINCREMENT, data BLOB, path TEXT)", 106);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TABLE IF NOT EXISTS DeletedCacheResources (id INTEGER PRIMARY KEY AUTOINCREMENT, path TEXT)", 99);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TABLE IF NOT EXISTS Origins (origin TEXT UNIQUE ON CONFLICT IGNORE, quota INTEGER NOT NULL ON CONFLICT FAIL)", 116);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TRIGGER IF NOT EXISTS CacheDeleted AFTER DELETE ON Caches FOR EACH ROW BEGIN  DELETE FROM CacheEntries WHERE cache = OLD.id;  DELETE FROM CacheWhitelistURLs WHERE cache = OLD.id;  DELETE FROM CacheAllowsAllNetwork"
          "Requests WHERE cache = OLD.id;  DELETE FROM FallbackURLs WHERE cache = OLD.id; END",
          303);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TRIGGER IF NOT EXISTS CacheEntryDeleted AFTER DELETE ON CacheEntries FOR EACH ROW BEGIN  DELETE FROM CacheResources WHERE id = OLD.resource; END",
          152);
        WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TRIGGER IF NOT EXISTS CacheResourceDeleted AFTER DELETE ON CacheResources FOR EACH ROW BEGIN  DELETE FROM CacheResourceData WHERE id = OLD.data; END",
          156);
        v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::executeCommand((uint64_t)v10, "CREATE TRIGGER IF NOT EXISTS CacheResourceDataDeleted AFTER DELETE ON CacheResourceData FOR EACH ROW WHEN OLD.path NOT NULL BEGIN  INSERT INTO DeletedCacheResources (path) values (OLD.path); END",
                                                 195);
        return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
      }
      WebCore::ApplicationCacheStorage::empty((WebCore::ApplicationCacheStorage *)this);
      WebCore::SQLiteDatabase::clearAllTables((WebCore::SQLiteDatabase *)(this + 7));
    }
  }
LABEL_11:
  v31 = (char *)(this + 7);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v32 = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v31);
  result = WTF::tryFastCompactMalloc((WTF *)0x29);
  v12 = v28;
  if (v28)
  {
    v13 = (char *)(v28 + 20);
    *(_QWORD *)v28 = 0x1500000002;
    *(_QWORD *)(v12 + 8) = v12 + 20;
    *(_DWORD *)(v12 + 16) = 4;
    *(_DWORD *)(v12 + 36) = 1030647657;
    *(_OWORD *)(v12 + 20) = *(_OWORD *)"PRAGMA user_version=";
    *(_BYTE *)(v12 + 40) = 55;
    WebCore::SQLiteDatabase::prepareStatementSlow((WTF *)v10, v13, 0x100000015uLL, (uint64_t)&v28);
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v12, v14);
    else
      *(_DWORD *)v12 -= 2;
    v15 = v30;
    if (v30)
      goto LABEL_38;
    v16 = (unsigned __int8 *)(v28 + 32);
    if (__ldaxr((unsigned __int8 *)(v28 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v16))
    {
LABEL_29:
      if (*(_BYTE *)(v28 + 20) || (v19 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v29), (_DWORD)v19))
      {
        sqlite3_step(v29);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v19);
        v23 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v29);
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v23);
      }
      v20 = __ldxr(v16);
      if (v20 == 1)
      {
        if (!__stlxr(0, v16))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_37:
      WebCore::SQLiteTransaction::commit((uint64_t)&v31);
      v15 = v30;
LABEL_38:
      if (v15 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v15])(&v36, &v28);
      WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v31);
      goto LABEL_41;
    }
    MEMORY[0x19AEA534C](v16);
    goto LABEL_29;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::urlHostHash(WebCore *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v2 = WTF::URL::host(this);
  v4 = -1640531527;
  if ((v3 & 0xFF00000000) != 0)
  {
    if (v3 >= 2uLL)
    {
      v5 = 0;
      do
      {
        v6 = (*(unsigned __int8 *)(v2 + v5 + 1) << 11) ^ ((v4 + *(unsigned __int8 *)(v2 + v5)) << 16) ^ (v4 + *(unsigned __int8 *)(v2 + v5));
        v4 = v6 + (v6 >> 11);
        v7 = v5 + 3;
        v5 += 2;
      }
      while (v7 < v3);
    }
    if ((v3 & 1) != 0)
    {
      v8 = *(unsigned __int8 *)(v3 + v2 - 1);
LABEL_7:
      v4 = ((v4 + v8) ^ ((v4 + v8) << 11)) + (((v4 + v8) ^ ((v4 + v8) << 11)) >> 17);
    }
  }
  else
  {
    if (v3 >= 2uLL)
    {
      v9 = 0;
      do
      {
        v10 = (*(unsigned __int16 *)(v2 + 2 * v9 + 2) << 11) ^ ((v4 + *(unsigned __int16 *)(v2 + 2 * v9)) << 16) ^ (v4 + *(unsigned __int16 *)(v2 + 2 * v9));
        v4 = v10 + (v10 >> 11);
        v11 = v9 + 3;
        v9 += 2;
      }
      while (v11 < v3);
    }
    if ((v3 & 1) != 0)
    {
      v8 = *(unsigned __int16 *)(v2 + 2 * v3 - 2);
      goto LABEL_7;
    }
  }
  v12 = (v4 ^ (8 * v4)) + ((v4 ^ (8 * v4)) >> 5);
  v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  v14 = (v13 ^ (v13 << 10)) & 0xFFFFFF;
  if (v14)
    return v14;
  else
    return 0x800000;
}

uint64_t WTF::HashMap<WTF::String,WebCore::ApplicationCacheGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ApplicationCacheGroup *>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
      {
        v12 = (WTF::StringImpl **)*a1;
        if (!*a1)
          return 0;
        v13 = *((unsigned int *)v12 - 1);
        v14 = &v12[2 * v13];
        goto LABEL_14;
      }
      if ((WTF::equal(v11, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  v14 = (WTF::StringImpl **)(v3 + 16 * v10);
  v12 = (WTF::StringImpl **)*a1;
  if (!*a1)
    goto LABEL_15;
  v13 = *((unsigned int *)v12 - 1);
LABEL_14:
  v12 += 2 * v13;
  if (v12 == v14)
    return 0;
LABEL_15:
  if (v12 != v14)
  {
    v15 = *v14;
    *v14 = (WTF::StringImpl *)-1;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v15 -= 2;
    }
    ++*(_DWORD *)(*a1 - 16);
    v16 = *a1;
    if (*a1)
      v17 = *(_DWORD *)(v16 - 12) - 1;
    else
      v17 = -1;
    *(_DWORD *)(v16 - 12) = v17;
    v19 = *a1;
    if (*a1)
    {
      v20 = 6 * *(_DWORD *)(v19 - 12);
      v21 = *(_DWORD *)(v19 - 4);
      if (v20 < v21 && v21 >= 9)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ApplicationCacheGroup *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ApplicationCacheGroup *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ApplicationCacheGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ApplicationCacheGroup *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v21 >> 1, 0);
    }
  }
  return 1;
}

uint64_t *WebCore::ApplicationCacheStorage::cacheGroupMadeObsolete(WebCore::ApplicationCacheStorage *this, WebCore::ApplicationCacheGroup *a2, const WTF::StringImpl *a3)
{
  WebCore::ApplicationCache *v5;
  WTF::StringImpl **v6;
  const WTF::URL *v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  _DWORD *v16;
  int v17;
  int v18;

  v5 = (WebCore::ApplicationCache *)*((_QWORD *)a2 + 10);
  if (v5)
    WebCore::ApplicationCacheStorage::remove(this, v5);
  v6 = (WTF::StringImpl **)((char *)a2 + 24);
  WTF::HashMap<WTF::String,WebCore::ApplicationCacheGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ApplicationCacheGroup *>,WTF::HashTableTraits>::remove((uint64_t *)this + 16, v6, a3);
  result = (uint64_t *)WebCore::urlHostHash((WebCore *)v6, v7);
  v11 = *((_QWORD *)this + 15);
  v10 = (uint64_t *)((char *)this + 120);
  v9 = v11;
  if (v11)
  {
    v12 = *(_DWORD *)(v9 - 8);
    v13 = v12 & result;
    v14 = *(_DWORD *)(v9 + 8 * v13);
    if (v14 != (_DWORD)result)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v12;
        v14 = *(_DWORD *)(v9 + 8 * v13);
        ++v15;
        if (v14 == (_DWORD)result)
          goto LABEL_10;
      }
      v13 = *(unsigned int *)(v9 - 4);
    }
LABEL_10:
    if (v13 != *(_DWORD *)(v9 - 4))
    {
      v16 = (_DWORD *)(v9 + 8 * v13);
      v17 = v16[1];
      v18 = v17 - 1;
      if (v17 == 1)
        return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,unsigned int,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::remove(v10, v16);
      else
        v16[1] = v18;
    }
  }
  return result;
}

uint64_t WebCore::ApplicationCacheStorage::remove(WebCore::ApplicationCacheStorage *this, WebCore::ApplicationCache *a2)
{
  WebCore::SQLiteDatabaseTracker *v4;
  int v5;
  unsigned __int8 *v6;
  WebCore::SQLiteDatabaseTracker *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v17;
  WebCore::SQLiteDatabaseTracker *v19;
  WebCore::SQLiteDatabaseTracker *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::SQLiteDatabaseTracker *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  sqlite3_stmt *v28;
  int v29;
  uint64_t v30;
  sqlite3_stmt *pStmt;
  int v32;
  char v33;

  v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
  if (!*((_DWORD *)a2 + 20))
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
  v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::ApplicationCacheStorage::openDatabase((WTF::StringImpl **)this, 0);
  if (!*((_QWORD *)this + 8))
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 56, "DELETE FROM Caches WHERE id=?", 30, (uint64_t)&v30);
  v5 = v32;
  if (v32)
  {
LABEL_39:
    if (v5 != -1)
      v4 = (WebCore::SQLiteDatabaseTracker *)((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v5])(&v27, &v30);
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
  }
  sqlite3_bind_int64(pStmt, 1, *((unsigned int *)a2 + 20));
  if (v32)
    goto LABEL_65;
  v6 = (unsigned __int8 *)(v30 + 32);
  if (__ldaxr((unsigned __int8 *)(v30 + 32)))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEA534C](v6);
    goto LABEL_9;
  }
  if (__stxr(1u, v6))
    goto LABEL_8;
LABEL_9:
  if (*(_BYTE *)(v30 + 20) || (v8 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v8))
  {
    sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v8);
    v19 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v19);
  }
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  *((_DWORD *)a2 + 20) = 0;
  v10 = (_QWORD *)*((_QWORD *)a2 + 2);
  if (!v10)
  {
    v13 = 0;
    v11 = 0;
LABEL_26:
    v12 = &v10[2 * v11];
    goto LABEL_27;
  }
  v11 = *((unsigned int *)v10 - 1);
  v12 = &v10[2 * v11];
  if (!*((_DWORD *)v10 - 3))
  {
    v13 = &v10[2 * v11];
    goto LABEL_26;
  }
  v13 = (_QWORD *)*((_QWORD *)a2 + 2);
  if ((_DWORD)v11)
  {
    v14 = 16 * v11;
    v13 = (_QWORD *)*((_QWORD *)a2 + 2);
    while ((unint64_t)(*v13 + 1) <= 1)
    {
      v13 += 2;
      v14 -= 16;
      if (!v14)
      {
        v13 = v12;
        break;
      }
    }
  }
LABEL_27:
  if (v10)
    v10 += 2 * *((unsigned int *)v10 - 1);
  while (v13 != v10)
  {
    *(_DWORD *)(v13[1] + 332) = 0;
    v15 = v13 + 2;
    v13 = v12;
    if (v15 != v12)
    {
      v13 = v15;
      while ((unint64_t)(*v13 + 1) <= 1)
      {
        v13 += 2;
        if (v13 == v12)
        {
          v13 = v12;
          break;
        }
      }
    }
  }
  if (*(WebCore::ApplicationCache **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) + 80) != a2)
    goto LABEL_37;
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 56, "DELETE FROM CacheGroups WHERE id=?", 35, (uint64_t)&v27);
  if (v29 == -1)
    goto LABEL_38;
  if (v29)
  {
    v4 = (WebCore::SQLiteDatabaseTracker *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v29])(&v33, &v27);
    goto LABEL_38;
  }
  sqlite3_bind_int64(v28, 1, *(unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) + 152));
  if (!v29)
  {
    v17 = (unsigned __int8 *)(v27 + 32);
    if (__ldaxr((unsigned __int8 *)(v27 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
LABEL_51:
      if (*(_BYTE *)(v27 + 20) || (v20 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v28), (_DWORD)v20))
      {
        sqlite3_step(v28);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v20);
        v24 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v28);
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v24);
      }
      v21 = __ldxr(v17);
      if (v21 == 1)
      {
        if (!__stlxr(0, v17))
          goto LABEL_59;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
LABEL_59:
      v22 = *((_QWORD *)a2 + 1);
      if (v22)
        v23 = *(_QWORD *)(v22 + 8);
      else
        v23 = 0;
      WebCore::ApplicationCacheGroup::clearStorageID(v23);
      if (v29 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v29])(&v33, &v27);
LABEL_37:
      WebCore::ApplicationCacheStorage::checkForDeletedResources(this);
LABEL_38:
      v5 = v32;
      goto LABEL_39;
    }
    MEMORY[0x19AEA534C](v17);
    goto LABEL_51;
  }
LABEL_65:
  v25 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::ApplicationCacheStorage::setMaximumSize(v25, v26);
}

uint64_t WebCore::ApplicationCacheStorage::setMaximumSize(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 32) = a2;
  return this;
}

uint64_t WebCore::ApplicationCacheStorage::maximumSize(WebCore::ApplicationCacheStorage *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::ApplicationCacheStorage::flatFileAreaSize(WTF::StringImpl **this)
{
  int v2;
  uint64_t v3;
  unsigned __int8 *v4;
  WebCore::SQLiteDatabaseTracker *v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::SQLiteDatabaseTracker *v16;
  WTF::StringImpl *v17;
  WebCore::ApplicationCacheStorage *v19;
  const WebCore::SecurityOrigin *v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  sqlite3_stmt *v25;
  sqlite3_stmt *pStmt;
  int v27;

  WebCore::ApplicationCacheStorage::openDatabase(this, 0);
  if (!this[8])
    return 0;
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)(this + 7), "SELECT path FROM CacheResourceData WHERE path NOT NULL", 55, (uint64_t)&v25);
  v2 = v27;
  if (v27)
  {
    v3 = 0;
    goto LABEL_39;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (v27)
  {
LABEL_43:
    v19 = (WebCore::ApplicationCacheStorage *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ApplicationCacheStorage::calculateQuotaForOrigin(v19, v20, v21);
  }
  v3 = 0;
  while (1)
  {
    v4 = (unsigned __int8 *)v25 + 32;
    if (__ldaxr((unsigned __int8 *)v25 + 32))
    {
      __clrex();
LABEL_10:
      MEMORY[0x19AEA534C](v4);
      goto LABEL_11;
    }
    if (__stxr(1u, v4))
      goto LABEL_10;
LABEL_11:
    if (*((_BYTE *)v25 + 20) || (v6 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v6))
    {
      v8 = sqlite3_step(pStmt);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v6);
      v16 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
      v8 = (int)v16;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v16);
    }
    v9 = __ldxr(v4);
    if (v9 != 1)
    {
      __clrex();
LABEL_18:
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      goto LABEL_19;
    }
    if (__stlxr(0, v4))
      goto LABEL_18;
LABEL_19:
    if (v8 != 100)
      break;
    if (!v27)
    {
      WebCore::SQLiteStatement::columnText(&v25, 0, &v22);
      WTF::FileSystemImpl::pathByAppendingComponent();
      v11 = v22;
      v22 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)&v23, v10);
      v14 = (_BYTE)v13 ? v12 : 0;
      v15 = v23;
      v23 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      v3 += v14;
      if (!v27)
        continue;
    }
    goto LABEL_43;
  }
  v17 = v24;
  v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v7);
    else
      *(_DWORD *)v17 -= 2;
  }
  v2 = v27;
LABEL_39:
  if (v2 != -1)
    ((void (*)(WTF::StringImpl **, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v2])(&v24, &v25);
  return v3;
}

uint64_t WebCore::ApplicationCacheStorage::calculateQuotaForOrigin(WebCore::ApplicationCacheStorage *this, const WebCore::SecurityOrigin *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  char *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned __int8 *v13;
  WebCore::SQLiteDatabaseTracker *v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  WebCore::SQLiteDatabaseTracker *v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  WebCore::SQLiteDatabaseTracker *v25;
  WebCore::SQLiteDatabaseTracker *v26;
  int v27;
  int v28;
  WebCore::SQLiteDatabaseTracker *v30;
  WebCore::SQLiteDatabaseTracker *v31;
  WebCore::ApplicationCacheStorage *v32;
  const WebCore::SecurityOriginData *v33;
  uint64_t *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  sqlite3_stmt *pStmt;
  int v38;

  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 56, "SELECT COUNT(quota), quota FROM Origins WHERE origin=?", 55, (uint64_t)&v36);
  v7 = v38;
  if (!v38)
  {
    WebCore::SecurityOriginData::databaseIdentifier((const WebCore::SecurityOrigin *)((char *)a2 + 8), &v35);
    if (v35)
    {
      v9 = (char *)*((_QWORD *)v35 + 1);
      v10 = *((unsigned int *)v35 + 1) | ((unint64_t)((*((_DWORD *)v35 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)&v36, 1, v9, v10);
    v12 = v35;
    v35 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (v38)
      goto LABEL_68;
    v13 = (unsigned __int8 *)(v36 + 32);
    if (__ldaxr((unsigned __int8 *)(v36 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
LABEL_13:
      if (*(_BYTE *)(v36 + 20) || (v15 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v15))
      {
        v6 = sqlite3_step(pStmt);
        v16 = v6;
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v15);
        v25 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v16 = (int)v25;
        v6 = WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v25);
      }
      v17 = __ldxr(v13);
      if (v17 == 1)
      {
        if (!__stlxr(0, v13))
        {
LABEL_21:
          v8 = v16 == 100;
          if (v16 != 100)
          {
LABEL_62:
            v7 = v38;
            goto LABEL_63;
          }
          if (v38)
            goto LABEL_68;
          if (sqlite3_stmt_busy(pStmt))
          {
LABEL_39:
            if (sqlite3_data_count(pStmt) >= 1 && sqlite3_column_int64(pStmt, 0))
            {
              if (!v38)
              {
                if (sqlite3_stmt_busy(pStmt))
                {
LABEL_58:
                  if (sqlite3_data_count(pStmt) >= 2)
                  {
                    v6 = sqlite3_column_int64(pStmt, 1);
                    goto LABEL_61;
                  }
LABEL_60:
                  v6 = 0;
                  goto LABEL_61;
                }
                v23 = (unsigned __int8 *)(v36 + 32);
                if (__ldaxr((unsigned __int8 *)(v36 + 32)))
                {
                  __clrex();
                }
                else if (!__stxr(1u, v23))
                {
LABEL_49:
                  if (*(_BYTE *)(v36 + 20)
                    || (v26 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v26))
                  {
                    v27 = sqlite3_step(pStmt);
                  }
                  else
                  {
                    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v26);
                    v31 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
                    v27 = (int)v31;
                    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v31);
                  }
                  v28 = __ldxr(v23);
                  if (v28 == 1)
                  {
                    if (!__stlxr(0, v23))
                    {
LABEL_57:
                      if (v27 != 100)
                        goto LABEL_60;
                      goto LABEL_58;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v23);
                  goto LABEL_57;
                }
                MEMORY[0x19AEA534C](v23);
                goto LABEL_49;
              }
LABEL_68:
              v32 = (WebCore::ApplicationCacheStorage *)std::__throw_bad_variant_access[abi:sn180100]();
              return WebCore::ApplicationCacheStorage::calculateUsageForOrigin(v32, v33, v34);
            }
LABEL_45:
            v6 = *((_QWORD *)this + 6);
LABEL_61:
            *a3 = v6;
            goto LABEL_62;
          }
          v18 = (unsigned __int8 *)(v36 + 32);
          if (__ldaxr((unsigned __int8 *)(v36 + 32)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v18))
          {
LABEL_30:
            if (*(_BYTE *)(v36 + 20)
              || (v20 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v20))
            {
              v21 = sqlite3_step(pStmt);
            }
            else
            {
              WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v20);
              v30 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
              v21 = (int)v30;
              WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v30);
            }
            v22 = __ldxr(v18);
            if (v22 == 1)
            {
              if (!__stlxr(0, v18))
              {
LABEL_38:
                if (v21 != 100)
                  goto LABEL_45;
                goto LABEL_39;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v18);
            goto LABEL_38;
          }
          MEMORY[0x19AEA534C](v18);
          goto LABEL_30;
        }
      }
      else
      {
        __clrex();
      }
      v6 = WTF::Lock::unlockSlow((WTF::Lock *)v13);
      goto LABEL_21;
    }
    MEMORY[0x19AEA534C](v13);
    goto LABEL_13;
  }
  v8 = 0;
LABEL_63:
  if (v7 != -1)
    v6 = ((uint64_t (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v7])(&v35, &v36);
  WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v6);
  return v8;
}

uint64_t WebCore::ApplicationCacheStorage::calculateUsageForOrigin(WebCore::ApplicationCacheStorage *this, const WebCore::SecurityOriginData *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  char *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned __int8 *v13;
  WebCore::SQLiteDatabaseTracker *v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  WebCore::SQLiteDatabaseTracker *v20;
  int v21;
  int v22;
  WebCore::SQLiteDatabaseTracker *v24;
  WebCore::SQLiteDatabaseTracker *v25;
  WebCore::ApplicationCacheStorage *v26;
  const WebCore::SecurityOrigin *v27;
  WebCore::ApplicationCache *v28;
  uint64_t *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  sqlite3_stmt *pStmt;
  int v33;

  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 56, "SELECT SUM(Caches.size) FROM CacheGroups INNER JOIN Origins ON CacheGroups.origin = Origins.origin INNER JOIN Caches ON CacheGroups.id = Caches.cacheGroup WHERE Origins.origin=?", 178, (uint64_t)&v31);
  v7 = v33;
  if (!v33)
  {
    WebCore::SecurityOriginData::databaseIdentifier(a2, &v30);
    if (v30)
    {
      v9 = (char *)*((_QWORD *)v30 + 1);
      v10 = *((unsigned int *)v30 + 1) | ((unint64_t)((*((_DWORD *)v30 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)&v31, 1, v9, v10);
    v12 = v30;
    v30 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (v33)
      goto LABEL_49;
    v13 = (unsigned __int8 *)(v31 + 32);
    if (__ldaxr((unsigned __int8 *)(v31 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
LABEL_13:
      if (*(_BYTE *)(v31 + 20) || (v15 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v15))
      {
        v6 = sqlite3_step(pStmt);
        v16 = v6;
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v15);
        v24 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v16 = (int)v24;
        v6 = WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v24);
      }
      v17 = __ldxr(v13);
      if (v17 == 1)
      {
        if (!__stlxr(0, v13))
        {
LABEL_21:
          v8 = v16 == 100;
          if (v16 != 100)
          {
LABEL_43:
            v7 = v33;
            goto LABEL_44;
          }
          if (!v33)
          {
            if (sqlite3_stmt_busy(pStmt))
            {
LABEL_39:
              if (sqlite3_data_count(pStmt) >= 1)
              {
                v6 = sqlite3_column_int64(pStmt, 0);
LABEL_42:
                *a3 = v6;
                goto LABEL_43;
              }
LABEL_41:
              v6 = 0;
              goto LABEL_42;
            }
            v18 = (unsigned __int8 *)(v31 + 32);
            if (__ldaxr((unsigned __int8 *)(v31 + 32)))
            {
              __clrex();
            }
            else if (!__stxr(1u, v18))
            {
LABEL_30:
              if (*(_BYTE *)(v31 + 20)
                || (v20 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v20))
              {
                v21 = sqlite3_step(pStmt);
              }
              else
              {
                WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v20);
                v25 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
                v21 = (int)v25;
                WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v25);
              }
              v22 = __ldxr(v18);
              if (v22 == 1)
              {
                if (!__stlxr(0, v18))
                {
LABEL_38:
                  if (v21 != 100)
                    goto LABEL_41;
                  goto LABEL_39;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v18);
              goto LABEL_38;
            }
            MEMORY[0x19AEA534C](v18);
            goto LABEL_30;
          }
LABEL_49:
          v26 = (WebCore::ApplicationCacheStorage *)std::__throw_bad_variant_access[abi:sn180100]();
          return WebCore::ApplicationCacheStorage::calculateRemainingSizeForOriginExcludingCache(v26, v27, v28, v29);
        }
      }
      else
      {
        __clrex();
      }
      v6 = WTF::Lock::unlockSlow((WTF::Lock *)v13);
      goto LABEL_21;
    }
    MEMORY[0x19AEA534C](v13);
    goto LABEL_13;
  }
  v8 = 0;
LABEL_44:
  if (v7 != -1)
    v6 = ((uint64_t (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v7])(&v30, &v31);
  WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v6);
  return v8;
}

uint64_t WebCore::ApplicationCacheStorage::calculateRemainingSizeForOriginExcludingCache(WebCore::ApplicationCacheStorage *this, const WebCore::SecurityOrigin *a2, WebCore::ApplicationCache *a3, uint64_t *a4)
{
  uint64_t v8;
  const char *v9;
  int v10;
  int v11;
  _BOOL8 v12;
  char *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned __int8 *v17;
  WebCore::SQLiteDatabaseTracker *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  WebCore::SQLiteDatabaseTracker *v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  WebCore::SQLiteDatabaseTracker *v29;
  WebCore::SQLiteDatabaseTracker *v30;
  int v31;
  int v32;
  WebCore::SQLiteDatabaseTracker *v34;
  WebCore::SQLiteDatabaseTracker *v35;
  WebCore::ApplicationCacheStorage *v36;
  const WebCore::SecurityOrigin *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  sqlite3_stmt *pStmt;
  int v42;

  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
  v8 = WebCore::ApplicationCacheStorage::openDatabase((WTF::StringImpl **)this, 0);
  if (!*((_QWORD *)this + 8))
  {
    v12 = 0;
LABEL_79:
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v8);
    return v12;
  }
  if (a3)
    a3 = (WebCore::ApplicationCache *)*((unsigned int *)a3 + 20);
  if (a3)
    v9 = "SELECT COUNT(Caches.size), Origins.quota - SUM(Caches.size)  FROM CacheGroups INNER JOIN Origins ON CacheGroups"
         ".origin = Origins.origin INNER JOIN Caches ON CacheGroups.id = Caches.cacheGroup WHERE Origins.origin=?   AND Caches.id!=?";
  else
    v9 = "SELECT COUNT(Caches.size), Origins.quota - SUM(Caches.size)  FROM CacheGroups INNER JOIN Origins ON CacheGroups"
         ".origin = Origins.origin INNER JOIN Caches ON CacheGroups.id = Caches.cacheGroup WHERE Origins.origin=?";
  if (a3)
    v10 = 234;
  else
    v10 = 215;
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 56, v9, v10, (uint64_t)&v40);
  v11 = v42;
  if (v42)
  {
    v12 = 0;
    goto LABEL_77;
  }
  WebCore::SecurityOriginData::databaseIdentifier((const WebCore::SecurityOrigin *)((char *)a2 + 8), &v39);
  if (v39)
  {
    v13 = (char *)*((_QWORD *)v39 + 1);
    v14 = *((unsigned int *)v39 + 1) | ((unint64_t)((*((_DWORD *)v39 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v13 = 0;
    v14 = 0x100000000;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v40, 1, v13, v14);
  v16 = v39;
  v39 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      if (!a3)
        goto LABEL_21;
      goto LABEL_19;
    }
    *(_DWORD *)v16 -= 2;
  }
  if (!a3)
    goto LABEL_21;
LABEL_19:
  if (v42)
    goto LABEL_82;
  sqlite3_bind_int64(pStmt, 2, (sqlite3_int64)a3);
LABEL_21:
  if (v42)
    goto LABEL_82;
  v17 = (unsigned __int8 *)(v40 + 32);
  if (__ldaxr((unsigned __int8 *)(v40 + 32)))
  {
    __clrex();
LABEL_25:
    MEMORY[0x19AEA534C](v17);
    goto LABEL_26;
  }
  if (__stxr(1u, v17))
    goto LABEL_25;
LABEL_26:
  if (*(_BYTE *)(v40 + 20) || (v19 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v19))
  {
    v8 = sqlite3_step(pStmt);
    v20 = v8;
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v19);
    v29 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v20 = (int)v29;
    v8 = WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v29);
  }
  v21 = __ldxr(v17);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, v17))
LABEL_33:
    v8 = WTF::Lock::unlockSlow((WTF::Lock *)v17);
  v12 = v20 == 100;
  if (v20 != 100)
  {
LABEL_76:
    v11 = v42;
LABEL_77:
    if (v11 != -1)
      v8 = ((uint64_t (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v11])(&v39, &v40);
    goto LABEL_79;
  }
  if (v42)
    goto LABEL_82;
  if (sqlite3_stmt_busy(pStmt))
    goto LABEL_53;
  v22 = (unsigned __int8 *)(v40 + 32);
  if (__ldaxr((unsigned __int8 *)(v40 + 32)))
  {
    __clrex();
LABEL_43:
    MEMORY[0x19AEA534C](v22);
    goto LABEL_44;
  }
  if (__stxr(1u, v22))
    goto LABEL_43;
LABEL_44:
  if (*(_BYTE *)(v40 + 20) || (v24 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v24))
  {
    v25 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v24);
    v34 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v25 = (int)v34;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v34);
  }
  v26 = __ldxr(v22);
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_51;
  }
  if (__stlxr(0, v22))
LABEL_51:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
  if (v25 != 100)
  {
LABEL_59:
    v8 = WebCore::ApplicationCacheStorage::calculateQuotaForOrigin(this, a2, a4);
    goto LABEL_76;
  }
LABEL_53:
  if (sqlite3_data_count(pStmt) < 1 || !sqlite3_column_int64(pStmt, 0))
    goto LABEL_59;
  if (!v42)
  {
    if (sqlite3_stmt_busy(pStmt))
    {
LABEL_72:
      if (sqlite3_data_count(pStmt) >= 2)
      {
        v8 = sqlite3_column_int64(pStmt, 1);
LABEL_75:
        *a4 = v8;
        goto LABEL_76;
      }
LABEL_74:
      v8 = 0;
      goto LABEL_75;
    }
    v27 = (unsigned __int8 *)(v40 + 32);
    if (__ldaxr((unsigned __int8 *)(v40 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v27))
    {
LABEL_63:
      if (*(_BYTE *)(v40 + 20) || (v30 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v30))
      {
        v31 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v30);
        v35 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v31 = (int)v35;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v35);
      }
      v32 = __ldxr(v27);
      if (v32 == 1)
      {
        if (!__stlxr(0, v27))
        {
LABEL_71:
          if (v31 != 100)
            goto LABEL_74;
          goto LABEL_72;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
      goto LABEL_71;
    }
    MEMORY[0x19AEA534C](v27);
    goto LABEL_63;
  }
LABEL_82:
  v36 = (WebCore::ApplicationCacheStorage *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::ApplicationCacheStorage::storeUpdatedQuotaForOrigin(v36, v37, v38);
}

uint64_t WebCore::ApplicationCacheStorage::storeUpdatedQuotaForOrigin(WebCore::ApplicationCacheStorage *this, const WebCore::SecurityOrigin *a2, sqlite3_int64 a3)
{
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  char *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned __int8 *v13;
  WebCore::SQLiteDatabaseTracker *v15;
  int v16;
  int v17;
  WebCore::SQLiteDatabaseTracker *v19;
  WebCore::ApplicationCacheStorage *v20;
  const WebCore::SecurityOrigin *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  sqlite3_stmt *pStmt;
  int v25;

  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
  v6 = WebCore::ApplicationCacheStorage::openDatabase((WTF::StringImpl **)this, 1);
  if (!*((_QWORD *)this + 8) || (v6 = WebCore::ApplicationCacheStorage::ensureOriginRecord(this, a2), !(_DWORD)v6))
  {
    v8 = 0;
LABEL_28:
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v6);
    return v8;
  }
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 56, "UPDATE Origins SET quota=? WHERE origin=?", 42, (uint64_t)&v23);
  v7 = v25;
  if (v25)
  {
    v8 = 0;
    goto LABEL_26;
  }
  sqlite3_bind_int64(pStmt, 1, a3);
  if (!v25)
  {
    WebCore::SecurityOriginData::databaseIdentifier((const WebCore::SecurityOrigin *)((char *)a2 + 8), &v22);
    if (v22)
    {
      v9 = (char *)*((_QWORD *)v22 + 1);
      v10 = *((unsigned int *)v22 + 1) | ((unint64_t)((*((_DWORD *)v22 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)&v23, 2, v9, v10);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (!v25)
    {
      v13 = (unsigned __int8 *)(v23 + 32);
      if (__ldaxr((unsigned __int8 *)(v23 + 32)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v13))
      {
LABEL_17:
        if (*(_BYTE *)(v23 + 20) || (v15 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v15))
        {
          v6 = sqlite3_step(pStmt);
          v16 = v6;
        }
        else
        {
          WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v15);
          v19 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
          v16 = (int)v19;
          v6 = WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v19);
        }
        v17 = __ldxr(v13);
        if (v17 == 1)
        {
          if (!__stlxr(0, v13))
            goto LABEL_25;
        }
        else
        {
          __clrex();
        }
        v6 = WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_25:
        v8 = v16 == 101;
        v7 = v25;
LABEL_26:
        if (v7 != -1)
          v6 = ((uint64_t (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v7])(&v22, &v23);
        goto LABEL_28;
      }
      MEMORY[0x19AEA534C](v13);
      goto LABEL_17;
    }
  }
  v20 = (WebCore::ApplicationCacheStorage *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::ApplicationCacheStorage::ensureOriginRecord(v20, v21);
}

uint64_t WebCore::ApplicationCacheStorage::ensureOriginRecord(WebCore::ApplicationCacheStorage *this, const WebCore::SecurityOrigin *a2)
{
  int v4;
  _BOOL8 v5;
  char *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int8 *v10;
  WebCore::SQLiteDatabaseTracker *v12;
  int v13;
  int v14;
  WebCore::SQLiteDatabaseTracker *v16;
  WebCore::ApplicationCacheStorage *v17;
  const WTF::String *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  sqlite3_stmt *pStmt;
  int v22;

  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 56, "INSERT INTO Origins (origin, quota) VALUES (?, ?)", 50, (uint64_t)&v20);
  v4 = v22;
  if (!v22)
  {
    WebCore::SecurityOriginData::databaseIdentifier((const WebCore::SecurityOrigin *)((char *)a2 + 8), &v19);
    if (v19)
    {
      v6 = (char *)*((_QWORD *)v19 + 1);
      v7 = *((unsigned int *)v19 + 1) | ((unint64_t)((*((_DWORD *)v19 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v6 = 0;
      v7 = 0x100000000;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)&v20, 1, v6, v7);
    v9 = v19;
    v19 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (v22 || (sqlite3_bind_int64(pStmt, 2, *((_QWORD *)this + 6)), v22))
    {
      v17 = (WebCore::ApplicationCacheStorage *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::ApplicationCacheStorage::deleteCacheGroupRecord(v17, v18);
    }
    v10 = (unsigned __int8 *)(v20 + 32);
    if (__ldaxr((unsigned __int8 *)(v20 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
LABEL_14:
      if (*(_BYTE *)(v20 + 20) || (v12 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v12))
      {
        v13 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v12);
        v16 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v13 = (int)v16;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v16);
      }
      v14 = __ldxr(v10);
      if (v14 == 1)
      {
        if (!__stlxr(0, v10))
          goto LABEL_22;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_22:
      v5 = v13 == 101;
      v4 = v22;
      goto LABEL_23;
    }
    MEMORY[0x19AEA534C](v10);
    goto LABEL_14;
  }
  v5 = 0;
LABEL_23:
  if (v4 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v4])(&v19, &v20);
  return v5;
}

BOOL WebCore::ApplicationCacheStorage::deleteCacheGroupRecord(WebCore::ApplicationCacheStorage *this, const WTF::String *a2)
{
  char *v3;
  int v4;
  _BOOL8 v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  WebCore::SQLiteDatabaseTracker *v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  WebCore::SQLiteDatabaseTracker *v16;
  int v17;
  int v18;
  sqlite3_int64 v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  WebCore::SQLiteDatabaseTracker *v24;
  WebCore::SQLiteDatabaseTracker *v25;
  int v26;
  unsigned __int8 *v27;
  WebCore::SQLiteDatabaseTracker *v29;
  int v30;
  WebCore::SQLiteDatabaseTracker *v32;
  WebCore::SQLiteDatabaseTracker *v33;
  WebCore::SQLiteDatabaseTracker *v34;
  WTF::StringImpl **v35;
  WebCore::ApplicationCacheResource *v36;
  unsigned int v37;
  uint64_t v38;
  sqlite3_stmt *v39;
  int v40;
  uint64_t v41;
  sqlite3_stmt *v42;
  int v43;
  uint64_t v44;
  sqlite3_stmt *pStmt;
  int v46;
  char v47;

  v3 = (char *)this + 56;
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 56, "SELECT id FROM CacheGroups WHERE manifestURL=?", 47, (uint64_t)&v44);
  v4 = v46;
  if (!v46)
  {
    v6 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v7 = *(char **)(v6 + 8);
      v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v7 = 0;
      v8 = 0x100000000;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)&v44, 1, v7, v8);
    if (v46)
      goto LABEL_84;
    v9 = (unsigned __int8 *)(v44 + 32);
    if (__ldaxr((unsigned __int8 *)(v44 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
LABEL_10:
      if (*(_BYTE *)(v44 + 20) || (v11 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v11))
      {
        v12 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v11);
        v24 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v12 = (int)v24;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v24);
      }
      v13 = __ldxr(v9);
      if (v13 == 1)
      {
        if (!__stlxr(0, v9))
        {
LABEL_18:
          if (v12 != 100)
          {
            v5 = 0;
LABEL_77:
            v4 = v46;
            goto LABEL_78;
          }
          if (v46)
            goto LABEL_84;
          if (sqlite3_stmt_busy(pStmt))
          {
LABEL_36:
            if (sqlite3_data_count(pStmt) >= 1)
            {
              v19 = sqlite3_column_int64(pStmt, 0);
              goto LABEL_39;
            }
LABEL_38:
            v19 = 0;
LABEL_39:
            WebCore::SQLiteDatabase::prepareStatement((uint64_t)v3, "DELETE FROM Caches WHERE cacheGroup=?", 38, (uint64_t)&v41);
            v20 = v43;
            if (v43)
            {
              v5 = 0;
LABEL_75:
              if (v20 != -1)
                ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v20])(&v38, &v41);
              goto LABEL_77;
            }
            WebCore::SQLiteDatabase::prepareStatement((uint64_t)v3, "DELETE FROM CacheGroups WHERE id=?", 35, (uint64_t)&v38);
            v21 = v40;
            v5 = v40 == 0;
            if (v40)
            {
LABEL_72:
              if (v21 != -1)
                ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v21])(&v47, &v38);
              v20 = v43;
              goto LABEL_75;
            }
            if (v43)
              goto LABEL_84;
            sqlite3_bind_int64(v42, 1, v19);
            if (v43)
              goto LABEL_84;
            v22 = (unsigned __int8 *)(v41 + 32);
            if (__ldaxr((unsigned __int8 *)(v41 + 32)))
            {
              __clrex();
            }
            else if (!__stxr(1u, v22))
            {
LABEL_49:
              if (*(_BYTE *)(v41 + 20)
                || (v25 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v42), (_DWORD)v25))
              {
                sqlite3_step(v42);
              }
              else
              {
                WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v25);
                v33 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v42);
                WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v33);
              }
              v26 = __ldxr(v22);
              if (v26 == 1)
              {
                if (!__stlxr(0, v22))
                  goto LABEL_57;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_57:
              if (!v40)
              {
                sqlite3_bind_int64(v39, 1, v19);
                if (!v40)
                {
                  v27 = (unsigned __int8 *)(v38 + 32);
                  if (__ldaxr((unsigned __int8 *)(v38 + 32)))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, v27))
                  {
LABEL_63:
                    if (*(_BYTE *)(v38 + 20)
                      || (v29 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v39), (_DWORD)v29))
                    {
                      sqlite3_step(v39);
                    }
                    else
                    {
                      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v29);
                      v34 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v39);
                      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v34);
                    }
                    v30 = __ldxr(v27);
                    if (v30 == 1)
                    {
                      if (!__stlxr(0, v27))
                        goto LABEL_71;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_71:
                    v21 = v40;
                    goto LABEL_72;
                  }
                  MEMORY[0x19AEA534C](v27);
                  goto LABEL_63;
                }
              }
LABEL_84:
              v35 = (WTF::StringImpl **)std::__throw_bad_variant_access[abi:sn180100]();
              return WebCore::ApplicationCacheStorage::store(v35, v36, v37);
            }
            MEMORY[0x19AEA534C](v22);
            goto LABEL_49;
          }
          v14 = (unsigned __int8 *)(v44 + 32);
          if (__ldaxr((unsigned __int8 *)(v44 + 32)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v14))
          {
LABEL_27:
            if (*(_BYTE *)(v44 + 20)
              || (v16 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v16))
            {
              v17 = sqlite3_step(pStmt);
            }
            else
            {
              WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v16);
              v32 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
              v17 = (int)v32;
              WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v32);
            }
            v18 = __ldxr(v14);
            if (v18 == 1)
            {
              if (!__stlxr(0, v14))
              {
LABEL_35:
                if (v17 != 100)
                  goto LABEL_38;
                goto LABEL_36;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v14);
            goto LABEL_35;
          }
          MEMORY[0x19AEA534C](v14);
          goto LABEL_27;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_18;
    }
    MEMORY[0x19AEA534C](v9);
    goto LABEL_10;
  }
  v5 = 0;
LABEL_78:
  if (v4 != -1)
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v4])(&v41, &v44);
  return v5;
}

BOOL WebCore::ApplicationCacheStorage::store(WTF::StringImpl **this, WebCore::ApplicationCacheResource *a2, unsigned int a3)
{
  char *v6;
  const WTF::String *v7;
  int v8;
  _BOOL8 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  sqlite3_int64 v16;
  uint64_t v17;
  void *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  char *v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const WTF::String *v25;
  void *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  sqlite3_stmt *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  char *v40;
  const char *v41;
  size_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  const WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int *v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  WTF::StringImpl *v57;
  _BOOL4 v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  void *v66;
  WTF *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  const void *v71;
  void *v72;
  unsigned __int8 *v73;
  WebCore::SQLiteDatabaseTracker *v75;
  int v76;
  int v77;
  sqlite3 *v78;
  unsigned int insert_rowid;
  uint64_t *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  BOOL v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  BOOL v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  unsigned int v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  unsigned __int8 *v119;
  WebCore::SQLiteDatabaseTracker *v121;
  int v122;
  int v123;
  sqlite3 *v124;
  unsigned int v125;
  WebCore::SQLiteDatabaseTracker *v126;
  int v127;
  unsigned __int8 *v128;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WebCore::SQLiteDatabaseTracker *v132;
  int v133;
  int v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WebCore::SQLiteDatabaseTracker *v139;
  unint64_t v140;
  int v141;
  WebCore::SQLiteDatabaseTracker *v142;
  uint64_t v143;
  char *v144;
  unsigned int v145;
  WTF::StringImpl **v146;
  WTF::StringImpl *v147;
  sqlite3_stmt *v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  sqlite3_stmt *pStmt;
  uint64_t v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  unsigned int v159;
  char v160;
  uint64_t v161;
  const WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  sqlite3_stmt *v165;
  int v166;
  WTF::StringImpl *v167;
  _BYTE **v168[2];

  WebCore::ApplicationCacheStorage::openDatabase(this, 1);
  if (!this[8])
    return 0;
  v6 = (char *)(this + 7);
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)(this + 7), "INSERT INTO CacheResourceData (data, path) VALUES (?, ?)", 57, (uint64_t)&v164);
  v8 = v166;
  if (v166)
  {
    v9 = 0;
    goto LABEL_313;
  }
  v163 = 0;
  v10 = *((_QWORD *)a2 + 43);
  v146 = this;
  if (v10 && *(_DWORD *)(v10 + 4))
  {
    WTF::FileSystemImpl::pathFileName((WebCore::ApplicationCacheResource *)((char *)a2 + 344), v7);
    v20 = v152;
    if (v152)
    {
      v21 = (char *)*((_QWORD *)v152 + 1);
      v20 = *((_DWORD *)v152 + 1);
      v22 = ((unint64_t)*((unsigned int *)v152 + 4) >> 2) & 1;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)&v164, 2, v21, v20 | (v22 << 32));
    v24 = v152;
    v152 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    goto LABEL_114;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2 + 56, 1);
  v12 = *((_QWORD *)a2 + 12);
  if (!v12 || *(_DWORD *)(v12 + 4) < 6u)
    goto LABEL_108;
  v13 = *(_QWORD *)(v12 + 8);
  if ((*(_BYTE *)(v12 + 16) & 4) == 0)
  {
    v141 = *(_WORD *)v13 & 0xFFDF;
    if (v141 == 65)
    {
      if ((*(_WORD *)(v13 + 2) & 0xFFDF) != 0x55
        || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x44
        || (*(_WORD *)(v13 + 6) & 0xFFDF) != 0x49)
      {
        goto LABEL_108;
      }
    }
    else if (v141 != 86
           || (*(_WORD *)(v13 + 2) & 0xFFDF) != 0x49
           || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x44
           || (*(_WORD *)(v13 + 6) & 0xFFDF) != 0x45)
    {
      goto LABEL_108;
    }
    if ((*(_WORD *)(v13 + 8) & 0xFFDF) == 0x4F)
    {
      v15 = *(unsigned __int16 *)(v13 + 10);
      goto LABEL_15;
    }
LABEL_108:
    if (*(_QWORD *)(WebCore::SubstituteResource::data(a2, v11) + 48))
    {
      v67 = (WTF *)WebCore::SubstituteResource::data(a2, v66);
      WebCore::FragmentedSharedBuffer::makeContiguous(v67, &v147);
      if (v166)
        goto LABEL_345;
      v68 = v147;
      if (*((_DWORD *)v147 + 5))
      {
        v69 = *(_QWORD *)(*((_QWORD *)v147 + 1) + 8);
        v70 = *(unsigned int *)(v69 + 24);
        if ((_DWORD)v70 == -1)
          goto LABEL_345;
        v152 = (WTF::StringImpl *)&v157;
        v71 = (const void *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v70])(&v152, v69 + 8);
      }
      else
      {
        v71 = 0;
      }
      sqlite3_bind_blob(v165, 1, v71, *((_DWORD *)v68 + 12), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v147, v72);
    }
LABEL_114:
    v61 = 0;
    goto LABEL_115;
  }
  v14 = *(_BYTE *)v13 & 0xDF;
  if (v14 != 65)
  {
    if (v14 == 86
      && (*(_BYTE *)(v13 + 1) & 0xDF) == 0x49
      && (*(_BYTE *)(v13 + 2) & 0xDF) == 0x44
      && (*(_BYTE *)(v13 + 3) & 0xDF) == 0x45)
    {
      goto LABEL_13;
    }
    goto LABEL_108;
  }
  if ((*(_BYTE *)(v13 + 1) & 0xDF) != 0x55
    || (*(_BYTE *)(v13 + 2) & 0xDF) != 0x44
    || (*(_BYTE *)(v13 + 3) & 0xDF) != 0x49)
  {
    goto LABEL_108;
  }
LABEL_13:
  if ((*(_BYTE *)(v13 + 4) & 0xDF) != 0x4F)
    goto LABEL_108;
  v15 = *(unsigned __int8 *)(v13 + 5);
LABEL_15:
  if ((v15 & 0xFFFFFFDF) != 0xF)
    goto LABEL_108;
  v16 = WebCore::SQLiteDatabase::totalSize((WebCore::SQLiteDatabase *)(this + 7));
  v17 = WebCore::ApplicationCacheStorage::flatFileAreaSize(this) + v16;
  if (v17 + *(_QWORD *)(WebCore::SubstituteResource::data(a2, v18) + 48) > (uint64_t)this[4])
  {
    v9 = 0;
    *((_BYTE *)this + 40) = 1;
    goto LABEL_309;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v162, v25);
  v26 = (void *)*((_QWORD *)a2 + 37);
  if (!v26)
  {
    if ((*((_BYTE *)a2 + 194) & 1) != 0)
    {
      v26 = 0;
    }
    else
    {
      WebCore::ResourceResponse::initNSURLResponse((WebCore::ApplicationCacheResource *)((char *)a2 + 56));
      v26 = (void *)*((_QWORD *)a2 + 37);
    }
  }
  MEMORY[0x19AEA5508](&v161, objc_msgSend(v26, "suggestedFilename"));
  v145 = a3;
  v144 = (char *)(this + 7);
  if (!v161)
    goto LABEL_34;
  v28 = WTF::StringImpl::reverseFind();
  if (v28 == -1)
    goto LABEL_34;
  if (!v161)
  {
    v32 = 0x100000000;
    if (v28 >= 0xFFFFFFFF)
    {
      v30 = 0;
      goto LABEL_35;
    }
    goto LABEL_341;
  }
  v29 = *(unsigned int *)(v161 + 4);
  if (v28 >= (v29 - 1))
  {
LABEL_34:
    v30 = 0;
    v32 = 0x100000000;
    goto LABEL_35;
  }
  if (v29 <= v28)
  {
    v32 = 0x100000000;
LABEL_341:
    v30 = "";
    goto LABEL_35;
  }
  v30 = *(const char **)(v161 + 8);
  v31 = ((unint64_t)*(unsigned int *)(v161 + 16) >> 2) & 1;
  if ((_DWORD)v28)
  {
    v32 = (v29 - v28);
    v140 = v29 - v28;
    if ((_DWORD)v31)
    {
      if (v140 >= v32)
      {
        v30 += v28;
        v32 |= 0x100000000uLL;
        goto LABEL_35;
      }
    }
    else if (v140 >= v32)
    {
      v30 += 2 * v28;
      goto LABEL_35;
    }
    __break(1u);
LABEL_345:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_346;
  }
  v32 = v29 | (v31 << 32);
LABEL_35:
  v143 = WebCore::SubstituteResource::data(a2, v27);
  v167 = 0;
  WTF::UUID::UUID((WTF::UUID *)&v152);
  v147 = v152;
  v148 = pStmt;
  v33 = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_();
  if (((v33 | v32) & 0x80000000) != 0)
  {
LABEL_346:
    __break(0xC471u);
    JUMPOUT(0x195F393A0);
  }
  v34 = 0;
  while (1)
  {
    v35 = (v33 + v32);
    if (__OFADD__(v33, (_DWORD)v32))
      goto LABEL_346;
    v36 = v147;
    v37 = v148;
    if ((v32 & 0x100000000) != 0)
    {
      if (!(_DWORD)v35)
        goto LABEL_79;
      if ((v35 & 0x80000000) != 0)
        goto LABEL_346;
      WTF::tryFastCompactMalloc((WTF *)(v35 + 20));
      v38 = v152;
      if (!v152)
        goto LABEL_346;
      *(_DWORD *)v152 = 2;
      *((_DWORD *)v38 + 1) = v35;
      *((_QWORD *)v38 + 1) = (char *)v38 + 20;
      *((_DWORD *)v38 + 4) = 4;
      v152 = v36;
      pStmt = v37;
      v157 = (WTF::StringImpl *)((char *)v38 + 20);
      v168[0] = (_BYTE **)&v157;
      _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)&v152, v168);
      v39 = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_();
      if (!(_DWORD)v32)
        goto LABEL_51;
      v40 = (char *)v38 + v39 + 20;
      if ((_DWORD)v32 == 1)
      {
        *v40 = *v30;
        goto LABEL_51;
      }
      v41 = v30;
      v42 = v32;
    }
    else
    {
      if (!(_DWORD)v35)
      {
LABEL_79:
        v38 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        goto LABEL_51;
      }
      if (v35 > 0x7FFFFFEF)
        goto LABEL_346;
      WTF::tryFastCompactMalloc((WTF *)(2 * v35 + 20));
      v38 = v152;
      if (!v152)
        goto LABEL_346;
      *(_DWORD *)v152 = 2;
      *((_DWORD *)v38 + 1) = v35;
      *((_QWORD *)v38 + 1) = (char *)v38 + 20;
      *((_DWORD *)v38 + 4) = 0;
      v152 = v36;
      pStmt = v37;
      v157 = (WTF::StringImpl *)((char *)v38 + 20);
      v168[0] = (_BYTE **)&v157;
      _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIDsEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)&v152, v168);
      v40 = (char *)v38
          + 2 * _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_()
          + 20;
      if ((_DWORD)v32 == 1)
      {
        *(_WORD *)v40 = *(_WORD *)v30;
        goto LABEL_51;
      }
      if (!(_DWORD)v32)
        goto LABEL_51;
      v41 = v30;
      v42 = 2 * v32;
    }
    memcpy(v40, v41, v42);
LABEL_51:
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v19);
      else
        *(_DWORD *)v34 -= 2;
    }
    if (!*((_DWORD *)v38 + 1))
      goto LABEL_85;
    WTF::FileSystemImpl::pathByAppendingComponent();
    v44 = v152;
    v152 = 0;
    v45 = v167;
    v167 = v44;
    if (v45)
    {
      v46 = *(_DWORD *)v45 - 2;
      if (*(_DWORD *)v45 != 2)
        goto LABEL_57;
      WTF::StringImpl::destroy(v45, v43);
      v45 = v152;
      v152 = 0;
      if (v45)
      {
        v46 = *(_DWORD *)v45 - 2;
        if (*(_DWORD *)v45 != 2)
        {
LABEL_57:
          *(_DWORD *)v45 = v46;
          goto LABEL_58;
        }
        WTF::StringImpl::destroy(v45, v43);
      }
    }
LABEL_58:
    WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)&v167, v43);
    if (!WTF::equal(v152, v162, v47))
    {
      v52 = v152;
      v152 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v48);
        else
          *(_DWORD *)v52 -= 2;
      }
      goto LABEL_67;
    }
    v50 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v167, v48);
    v51 = v152;
    v152 = 0;
    if (!v51)
      goto LABEL_62;
    if (*(_DWORD *)v51 != 2)
    {
      *(_DWORD *)v51 -= 2;
LABEL_62:
      if (!v50)
        break;
      goto LABEL_67;
    }
    WTF::StringImpl::destroy(v51, v49);
    if (!v50)
      break;
LABEL_67:
    WTF::UUID::UUID((WTF::UUID *)&v152);
    v147 = v152;
    v148 = pStmt;
    v33 = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_();
    v34 = v38;
    if (((v33 | v32) & 0x80000000) != 0)
      goto LABEL_346;
  }
  LODWORD(v157) = WTF::FileSystemImpl::openFile();
  if ((_DWORD)v157)
  {
    v152 = 0;
    v53 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v53 = off_1E33F80D8;
    *((_QWORD *)v53 + 1) = &v152;
    *((_QWORD *)v53 + 2) = &v157;
    v147 = v53;
    WebCore::FragmentedSharedBuffer::forEachSegment(v143, &v147);
    v55 = (uint64_t)v147;
    v147 = 0;
    a3 = v145;
    v56 = (WTF::StringImpl **)((char *)a2 + 344);
    v6 = v144;
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v157, v54);
    v57 = *(WTF::StringImpl **)(v143 + 48);
    v58 = v152 == v57;
    if (v152 != v57)
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v167, v19);
  }
  else
  {
LABEL_85:
    v58 = 0;
    v56 = (WTF::StringImpl **)((char *)a2 + 344);
    a3 = v145;
    v6 = v144;
  }
  v59 = v167;
  v167 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 != 2)
    {
      *(_DWORD *)v59 -= 2;
      goto LABEL_89;
    }
    WTF::StringImpl::destroy(v59, v19);
    if (!v58)
    {
LABEL_258:
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v19);
      else
        *(_DWORD *)v38 -= 2;
      v130 = (WTF::StringImpl *)v161;
      v161 = 0;
      if (v130)
      {
        if (*(_DWORD *)v130 == 2)
          WTF::StringImpl::destroy(v130, v19);
        else
          *(_DWORD *)v130 -= 2;
      }
      v131 = v162;
      v162 = 0;
      if (v131)
      {
        if (*(_DWORD *)v131 == 2)
          WTF::StringImpl::destroy(v131, v19);
        else
          *(_DWORD *)v131 -= 2;
      }
      goto LABEL_266;
    }
  }
  else
  {
LABEL_89:
    if (!v58)
      goto LABEL_258;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  v61 = v152;
  v163 = v152;
  if (v152)
    *(_DWORD *)v152 += 2;
  v62 = *v56;
  *v56 = v61;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v60);
    else
      *(_DWORD *)v62 -= 2;
  }
  if (v166)
    goto LABEL_345;
  WebCore::SQLiteStatement::bindText((uint64_t)&v164, 2, *((char **)v38 + 1), *((unsigned int *)v38 + 1) | ((unint64_t)((*((_DWORD *)v38 + 4) >> 2) & 1) << 32));
  if (*(_DWORD *)v38 == 2)
    WTF::StringImpl::destroy(v38, v63);
  else
    *(_DWORD *)v38 -= 2;
  v64 = (WTF::StringImpl *)v161;
  v161 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v63);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = v162;
  v162 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v63);
    else
      *(_DWORD *)v65 -= 2;
  }
LABEL_115:
  if (v166)
    goto LABEL_345;
  v73 = (unsigned __int8 *)(v164 + 32);
  if (__ldaxr((unsigned __int8 *)(v164 + 32)))
  {
    __clrex();
    goto LABEL_119;
  }
  if (__stxr(1u, v73))
LABEL_119:
    MEMORY[0x19AEA534C](v73);
  if (*(_BYTE *)(v164 + 20) || (v75 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v165), (_DWORD)v75))
  {
    v76 = sqlite3_step(v165);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v75);
    v126 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v165);
    v76 = (int)v126;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v126);
  }
  v77 = __ldxr(v73);
  if (v77 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v73))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)v73);
  if (v76 != 101)
  {
    if (!v61)
    {
      v9 = 0;
      goto LABEL_312;
    }
    if (*((_DWORD *)v61 + 1))
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v163, v19);
LABEL_266:
    v9 = 0;
    goto LABEL_309;
  }
  v78 = v146[8];
  if (v78)
    insert_rowid = sqlite3_last_insert_rowid(v78);
  else
    insert_rowid = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 1;
  v80 = (uint64_t *)((char *)a2 + 56);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2 + 56, 2);
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)&v152, (uint64_t)a2 + 136, *((WTF::StringImpl **)a2 + 17), *((_QWORD *)a2 + 19));
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)&v147, (uint64_t)a2 + 136, (WTF::StringImpl *)(*((_QWORD *)a2 + 17) + 16 * *((unsigned int *)a2 + 37)), *((_QWORD *)a2 + 19) + 16 * *((unsigned int *)a2 + 41));
  while (2)
  {
    if (pStmt != v148 || v154 != v149)
    {
      v82 = v155;
      if (v159)
        v83 = 0;
      else
        v83 = v158 == 0;
      if (!v83)
      {
        if (v155 && (*((_BYTE *)v155 + 16) & 4) == 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
LABEL_150:
        LOBYTE(v168[0]) = 58;
        if (v158 && ((v85 = v159, v159 < *((_DWORD *)v158 + 1)) ? (v86 = v157 == 0) : (v86 = 0), v86))
        {
          v89 = *((_DWORD *)v158 + 4);
          v90 = *((_QWORD *)v158 + 1);
          ++v159;
          if ((v89 & 4) != 0)
          {
            *(_BYTE *)(v90 + v85) = 58;
            goto LABEL_156;
          }
          *(_WORD *)(v90 + 2 * v85) = 58;
        }
        else
        {
          WTF::StringBuilder::append();
LABEL_156:
          if (!v159 && !v158)
          {
            v87 = v156;
            if (v156)
              *(_DWORD *)v156 += 2;
            v88 = v157;
            v157 = v87;
            if (v88)
            {
              if (*(_DWORD *)v88 != 2)
              {
                *(_DWORD *)v88 -= 2;
                goto LABEL_163;
              }
              WTF::StringImpl::destroy(v88, v81);
              v87 = v156;
              if (!v156)
              {
LABEL_165:
                v159 = v87;
                goto LABEL_171;
              }
            }
            else
            {
LABEL_163:
              if (!v87)
                goto LABEL_165;
            }
            LODWORD(v87) = *((_DWORD *)v87 + 1);
            goto LABEL_165;
          }
        }
        if (v156 && (*((_BYTE *)v156 + 16) & 4) == 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
LABEL_171:
        LOBYTE(v168[0]) = 10;
        if (!v158 || (v91 = v159, v159 >= *((_DWORD *)v158 + 1)) || v157)
        {
          WTF::StringBuilder::append();
        }
        else
        {
          v92 = *((_DWORD *)v158 + 4);
          v93 = *((_QWORD *)v158 + 1);
          ++v159;
          if ((v92 & 4) != 0)
            *(_BYTE *)(v93 + v91) = 10;
          else
            *(_WORD *)(v93 + 2 * v91) = 10;
        }
        WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)&v152, v81);
        continue;
      }
      if (v155)
        *(_DWORD *)v155 += 2;
      v84 = v157;
      v157 = v82;
      if (v84)
      {
        if (*(_DWORD *)v84 != 2)
        {
          *(_DWORD *)v84 -= 2;
          goto LABEL_147;
        }
        WTF::StringImpl::destroy(v84, v81);
        v82 = v155;
        if (!v155)
        {
LABEL_149:
          v159 = v82;
          goto LABEL_150;
        }
      }
      else
      {
LABEL_147:
        if (!v82)
          goto LABEL_149;
      }
      LODWORD(v82) = *((_DWORD *)v82 + 1);
      goto LABEL_149;
    }
    break;
  }
  v94 = v151;
  v151 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, v81);
    else
      *(_DWORD *)v94 -= 2;
  }
  v95 = v150;
  v150 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
      WTF::StringImpl::destroy(v95, v81);
    else
      *(_DWORD *)v95 -= 2;
  }
  v96 = v156;
  v156 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
      WTF::StringImpl::destroy(v96, v81);
    else
      *(_DWORD *)v96 -= 2;
  }
  v97 = v155;
  v155 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
      WTF::StringImpl::destroy(v97, v81);
    else
      *(_DWORD *)v97 -= 2;
  }
  v98 = v157;
  if (v157
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v157),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v157),
        (v98 = v157) != 0))
  {
    *(_DWORD *)v98 += 2;
  }
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)v6, "INSERT INTO CacheResources (url, statusCode, responseURL, headers, data, mimeType, textEncodingName) VALUES (?, ?, ?, ?, ?, ?, ?)", 130, (uint64_t)&v152);
  v99 = v154;
  if ((_DWORD)v154)
  {
    v9 = 0;
    goto LABEL_298;
  }
  v100 = *((_QWORD *)a2 + 2);
  if (v100)
  {
    v101 = *(unsigned int *)(v100 + 16);
    v102 = *(char **)(v100 + 8);
    LODWORD(v100) = *(_DWORD *)(v100 + 4);
    v103 = (v101 >> 2) & 1;
  }
  else
  {
    v102 = 0;
    v103 = 1;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v152, 1, v102, v100 | (unint64_t)(v103 << 32));
  if ((_DWORD)v154)
    goto LABEL_345;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2 + 56, 1);
  sqlite3_bind_int64(pStmt, 2, *((__int16 *)a2 + 96));
  if ((_DWORD)v154)
    goto LABEL_345;
  v104 = 1;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2 + 56, 1);
  v105 = *v80;
  if (*v80)
  {
    v106 = *(unsigned int *)(v105 + 16);
    v107 = *(char **)(v105 + 8);
    LODWORD(v105) = *(_DWORD *)(v105 + 4);
    v104 = (v106 >> 2) & 1;
  }
  else
  {
    v107 = 0;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v152, 3, v107, v105 | (unint64_t)(v104 << 32));
  if ((_DWORD)v154)
    goto LABEL_345;
  if (v98)
  {
    v108 = (char *)*((_QWORD *)v98 + 1);
    v109 = *((_DWORD *)v98 + 1);
    v110 = ((unint64_t)*((unsigned int *)v98 + 4) >> 2) & 1;
  }
  else
  {
    v108 = 0;
    v109 = 0;
    v110 = 1;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v152, 4, v108, v109 | (v110 << 32));
  if ((_DWORD)v154)
    goto LABEL_345;
  sqlite3_bind_int64(pStmt, 5, insert_rowid);
  if ((_DWORD)v154)
    goto LABEL_345;
  v111 = 1;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2 + 56, 1);
  v112 = *((_QWORD *)a2 + 12);
  if (v112)
  {
    v113 = *(unsigned int *)(v112 + 16);
    v114 = *(char **)(v112 + 8);
    LODWORD(v112) = *(_DWORD *)(v112 + 4);
    v111 = (v113 >> 2) & 1;
  }
  else
  {
    v114 = 0;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v152, 6, v114, v112 | (unint64_t)(v111 << 32));
  if ((_DWORD)v154)
    goto LABEL_345;
  v115 = 1;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2 + 56, 1);
  v116 = *((_QWORD *)a2 + 14);
  if (v116)
  {
    v117 = *(unsigned int *)(v116 + 16);
    v118 = *(char **)(v116 + 8);
    LODWORD(v116) = *(_DWORD *)(v116 + 4);
    v115 = (v117 >> 2) & 1;
  }
  else
  {
    v118 = 0;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v152, 7, v118, v116 | (unint64_t)(v115 << 32));
  if ((_DWORD)v154)
    goto LABEL_345;
  v119 = (unsigned __int8 *)v152 + 32;
  if (__ldaxr((unsigned __int8 *)v152 + 32))
  {
    __clrex();
    goto LABEL_230;
  }
  if (__stxr(1u, v119))
LABEL_230:
    MEMORY[0x19AEA534C](v119);
  if (*((_BYTE *)v152 + 20) || (v121 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v121))
  {
    v122 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v121);
    v139 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v122 = (int)v139;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v139);
  }
  v123 = __ldxr(v119);
  if (v123 != 1)
  {
    __clrex();
    goto LABEL_238;
  }
  if (__stlxr(0, v119))
LABEL_238:
    WTF::Lock::unlockSlow((WTF::Lock *)v119);
  if (v122 != 101)
  {
    v9 = 0;
    goto LABEL_297;
  }
  v124 = v146[8];
  if (v124)
    v125 = sqlite3_last_insert_rowid(v124);
  else
    v125 = 0;
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)v6, "INSERT INTO CacheEntries (cache, type, resource) VALUES (?, ?, ?)", 66, (uint64_t)&v147);
  v127 = v149;
  if ((_DWORD)v149)
  {
    v9 = 0;
    goto LABEL_295;
  }
  sqlite3_bind_int64(v148, 1, a3);
  if ((_DWORD)v149)
    goto LABEL_345;
  sqlite3_bind_int64(v148, 2, *((unsigned int *)a2 + 82));
  if ((_DWORD)v149)
    goto LABEL_345;
  sqlite3_bind_int64(v148, 3, v125);
  if ((_DWORD)v149)
    goto LABEL_345;
  v128 = (unsigned __int8 *)v147 + 32;
  if (__ldaxr((unsigned __int8 *)v147 + 32))
  {
    __clrex();
    goto LABEL_282;
  }
  if (__stxr(1u, v128))
LABEL_282:
    MEMORY[0x19AEA534C](v128);
  if (*((_BYTE *)v147 + 20) || (v132 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v148), (_DWORD)v132))
  {
    v133 = sqlite3_step(v148);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v132);
    v142 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v148);
    v133 = (int)v142;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v142);
  }
  v134 = __ldxr(v128);
  if (v134 == 1)
  {
    if (!__stlxr(0, v128))
      goto LABEL_291;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v128);
LABEL_291:
  v9 = v133 == 101;
  if (v133 == 101)
  {
    if (v163 && *((_DWORD *)v163 + 1))
      WebCore::SharedBufferBuilder::empty((WebCore::ApplicationCacheResource *)((char *)a2 + 312));
    *((_DWORD *)a2 + 83) = v125;
  }
  v127 = v149;
LABEL_295:
  if (v127 != -1)
    ((void (*)(_BYTE ***, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v127])(v168, &v147);
LABEL_297:
  v99 = v154;
LABEL_298:
  if (v99 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v99])(&v147, &v152);
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
      WTF::StringImpl::destroy(v98, v19);
    else
      *(_DWORD *)v98 -= 2;
  }
  v135 = v158;
  v158 = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
      WTF::StringImpl::destroy(v135, v19);
    else
      *(_DWORD *)v135 -= 2;
  }
  v136 = v157;
  v157 = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
      WTF::StringImpl::destroy(v136, v19);
    else
      *(_DWORD *)v136 -= 2;
  }
LABEL_309:
  v137 = v163;
  v163 = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
      WTF::StringImpl::destroy(v137, v19);
    else
      *(_DWORD *)v137 -= 2;
  }
LABEL_312:
  v8 = v166;
LABEL_313:
  if (v8 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v8])(&v152, &v164);
  return v9;
}

uint64_t WebCore::ApplicationCacheStorage::store(sqlite3 **this, WebCore::ApplicationCacheResource *a2, WebCore::ApplicationCache *a3)
{
  WebCore::SQLiteDatabaseTracker *v6;
  unsigned int *v7;
  sqlite3 *v8;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  int v12;
  _BOOL8 v13;
  sqlite3 *v14;
  int v15;
  sqlite3_int64 v16;
  unsigned __int8 *v17;
  WebCore::SQLiteDatabaseTracker *v19;
  int v20;
  int v21;
  WebCore::SQLiteDatabaseTracker *v23;
  uint64_t v24;
  uint64_t v25;
  sqlite3_stmt *pStmt;
  int v27;
  char *v28;
  __int16 v29;
  char v30;

  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)this);
  v6 = (WebCore::SQLiteDatabaseTracker *)WebCore::ApplicationCacheStorage::openDatabase(this, 1);
  if (!this[8])
  {
    v13 = 0;
LABEL_33:
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v6);
    return v13;
  }
  v7 = (unsigned int *)(this + 7);
  *((_BYTE *)this + 40) = 0;
  v8 = this[4];
  v9 = WebCore::ApplicationCacheStorage::flatFileAreaSize(this);
  WebCore::SQLiteDatabase::setMaximumSize(this + 7, (uint64_t)v8 - v9);
  v28 = (char *)(this + 7);
  do
    v10 = __ldaxr(v7);
  while (__stlxr(v10 + 1, v7));
  v29 = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v28);
  if (!WebCore::ApplicationCacheStorage::store(this, a2, *((_DWORD *)a3 + 20)))
  {
    v14 = this[8];
    if (v14)
      v15 = sqlite3_errcode(v14);
    else
      v15 = *((_DWORD *)this + 27);
    v13 = 0;
    if (v15 == 13)
      *((_BYTE *)this + 40) = 1;
    goto LABEL_32;
  }
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)(this + 7), "UPDATE Caches SET size=size+? WHERE id=?", 41, (uint64_t)&v25);
  v12 = v27;
  if (v27)
  {
    v13 = 0;
LABEL_30:
    if (v12 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v12])(&v30, &v25);
LABEL_32:
    WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v28);
    goto LABEL_33;
  }
  v16 = WebCore::ApplicationCacheResource::estimatedSizeInStorage(a2, v11);
  sqlite3_bind_int64(pStmt, 1, v16);
  if (!v27)
  {
    sqlite3_bind_int64(pStmt, 2, *((unsigned int *)a3 + 20));
    if (!v27)
    {
      v17 = (unsigned __int8 *)(v25 + 32);
      if (__ldaxr((unsigned __int8 *)(v25 + 32)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v17))
      {
LABEL_19:
        if (*(_BYTE *)(v25 + 20) || (v19 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v19))
        {
          v20 = sqlite3_step(pStmt);
        }
        else
        {
          WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v19);
          v23 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
          v20 = (int)v23;
          WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v23);
        }
        v21 = __ldxr(v17);
        if (v21 == 1)
        {
          if (!__stlxr(0, v17))
            goto LABEL_27;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v17);
LABEL_27:
        v13 = v20 == 101;
        if (v20 == 101)
          WebCore::SQLiteTransaction::commit((uint64_t)&v28);
        v12 = v27;
        goto LABEL_30;
      }
      MEMORY[0x19AEA534C](v17);
      goto LABEL_19;
    }
  }
  v24 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::ApplicationCacheStorage::storeNewestCache(v24);
}

void WebCore::ApplicationCacheStorage::storeNewestCache(uint64_t a1, uint64_t a2, WebCore::ApplicationCache *a3, int *a4)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  const WebCore::SecurityOrigin *v13;
  uint64_t *v14;
  const WTF::URL *v15;
  int v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned __int8 *v26;
  WebCore::SQLiteDatabaseTracker *v28;
  int v29;
  int v30;
  sqlite3 *v31;
  int insert_rowid;
  int v33;
  char *v34;
  uint64_t v35;
  int v36;
  char v37;
  unsigned __int8 *v38;
  sqlite3 *v40;
  int v41;
  int v42;
  WebCore::SQLiteDatabaseTracker *v43;
  int v44;
  int v45;
  sqlite3 *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  sqlite3_stmt **v50;
  sqlite3_stmt **v51;
  uint64_t v52;
  sqlite3_stmt **v53;
  WebCore::ApplicationCacheResource *v54;
  int v55;
  int v56;
  char *v57;
  sqlite3_stmt **v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  WebCore::SQLiteDatabaseTracker *v69;
  int v70;
  int v71;
  WebCore::SQLiteDatabaseTracker *v72;
  unsigned __int8 *v73;
  WebCore::SQLiteDatabaseTracker *v75;
  WebCore::SQLiteDatabaseTracker *v76;
  WebCore::SQLiteDatabaseTracker *v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  WebCore::SQLiteDatabaseTracker *v92;
  int v93;
  int v94;
  WebCore::SQLiteDatabaseTracker *v95;
  int v96;
  sqlite3 *v97;
  int v98;
  int v99;
  unsigned __int8 *v100;
  WebCore::SQLiteDatabaseTracker *v102;
  int v103;
  int v104;
  WTF *v105;
  WTF *v106;
  WTF *v107;
  WTF *v108;
  WTF *v109;
  WTF *v110;
  WTF *v111;
  WTF *v112;
  WebCore::SQLiteDatabaseTracker *v113;
  WebCore::SQLiteDatabaseTracker *v114;
  WebCore::ApplicationCacheStorage *v115;
  uint64_t *v116;
  uint64_t v117;
  WTF *v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  uint64_t v122;
  __int16 v123;
  sqlite3_stmt *v124[2];
  unsigned int v125;
  uint64_t v126;
  sqlite3_stmt *pStmt;
  int v128;
  char v129;

  WebCore::ApplicationCacheStorage::openDatabase((WTF::StringImpl **)a1, 1);
  if (!*(_QWORD *)(a1 + 64))
    return;
  v8 = (unsigned int *)(a1 + 56);
  *(_BYTE *)(a1 + 40) = 0;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = WebCore::ApplicationCacheStorage::flatFileAreaSize((WTF::StringImpl **)a1);
  WebCore::SQLiteDatabase::setMaximumSize((sqlite3 **)(a1 + 56), v9 - v10);
  v122 = a1 + 56;
  do
    v11 = __ldaxr(v8);
  while (__stlxr(v11 + 1, v8));
  v123 = 0;
  WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v122);
  v12 = *(_QWORD *)(a2 + 80);
  v126 = 0;
  v13 = *(const WebCore::SecurityOrigin **)(a2 + 64);
  if (WebCore::ApplicationCacheStorage::calculateRemainingSizeForOriginExcludingCache((WebCore::ApplicationCacheStorage *)a1, v13, a3, &v126)&& v126 < *(_QWORD *)(v12 + 72))
  {
    WebCore::ApplicationCacheStorage::calculateQuotaForOrigin((WebCore::ApplicationCacheStorage *)a1, v13, (uint64_t *)v124);
    *a4 = 0;
    goto LABEL_233;
  }
  v120 = 0;
  v121 = 0;
  if (!*(_DWORD *)(a2 + 152))
  {
    v14 = (uint64_t *)(a2 + 24);
    WebCore::ApplicationCacheStorage::deleteCacheGroupRecord((WebCore::ApplicationCacheStorage *)a1, (const WTF::String *)(a2 + 24));
    WebCore::SQLiteDatabase::prepareStatement(a1 + 56, "INSERT INTO CacheGroups (manifestHostHash, manifestURL, origin) VALUES (?, ?, ?)", 81, (uint64_t)&v126);
    v16 = v128;
    if (v128)
    {
      v17 = 0;
      goto LABEL_44;
    }
    v18 = WebCore::urlHostHash((WebCore *)(a2 + 24), v15);
    sqlite3_bind_int64(pStmt, 1, v18);
    if (v128)
      goto LABEL_238;
    v19 = *v14;
    if (*v14)
    {
      v20 = *(char **)(v19 + 8);
      v21 = *(unsigned int *)(v19 + 4) | ((unint64_t)((*(_DWORD *)(v19 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v20 = 0;
      v21 = 0x100000000;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)&v126, 2, v20, v21);
    if (v128)
      goto LABEL_238;
    WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)(*(_QWORD *)(a2 + 64) + 8), v124);
    if (v124[0])
    {
      v22 = (char *)*((_QWORD *)v124[0] + 1);
      v23 = *((unsigned int *)v124[0] + 1) | ((unint64_t)((*((_DWORD *)v124[0] + 4) >> 2) & 1) << 32);
    }
    else
    {
      v22 = 0;
      v23 = 0x100000000;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)&v126, 3, v22, v23);
    v25 = v124[0];
    v124[0] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v128)
      goto LABEL_238;
    v26 = (unsigned __int8 *)(v126 + 32);
    if (__ldaxr((unsigned __int8 *)(v126 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
LABEL_25:
      if (*(_BYTE *)(v126 + 20) || (v28 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v28))
      {
        v29 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v28);
        v76 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v29 = (int)v76;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v76);
      }
      v30 = __ldxr(v26);
      if (v30 == 1)
      {
        if (!__stlxr(0, v26))
        {
LABEL_33:
          if (v29 == 101
            && ((v31 = *(sqlite3 **)(a1 + 64)) == 0
              ? (insert_rowid = 0)
              : (insert_rowid = sqlite3_last_insert_rowid(v31)),
                WebCore::ApplicationCacheStorage::ensureOriginRecord((WebCore::ApplicationCacheStorage *)a1, *(const WebCore::SecurityOrigin **)(a2 + 64))))
          {
            *(_DWORD *)(a2 + 152) = insert_rowid;
            v124[0] = (sqlite3_stmt *)a2;
            LODWORD(v124[1]) = 0;
            v33 = HIDWORD(v121);
            if (HIDWORD(v121) == (_DWORD)v121)
            {
              v34 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v120, HIDWORD(v121) + 1, (unint64_t)v124);
              v33 = HIDWORD(v121);
              *((_OWORD *)v120 + HIDWORD(v121)) = *(_OWORD *)v34;
            }
            else
            {
              *((_OWORD *)v120 + HIDWORD(v121)) = *(_OWORD *)v124;
            }
            HIDWORD(v121) = v33 + 1;
            v17 = 1;
          }
          else
          {
            v17 = 0;
          }
          v16 = v128;
LABEL_44:
          if (v16 != -1)
            ((void (*)(sqlite3_stmt **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v16])(v124, &v126);
          if ((v17 & 1) == 0)
          {
            v40 = *(sqlite3 **)(a1 + 64);
            if (v40)
              v41 = sqlite3_errcode(v40);
            else
              v41 = *(_DWORD *)(a1 + 108);
            if (v41 == 13)
            {
              v42 = 1;
              *(_BYTE *)(a1 + 40) = 1;
            }
            else if (*(_BYTE *)(a1 + 40))
            {
              v42 = 1;
            }
            else
            {
              v42 = 2;
            }
            *a4 = v42;
            goto LABEL_228;
          }
          goto LABEL_47;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v26);
      goto LABEL_33;
    }
    MEMORY[0x19AEA534C](v26);
    goto LABEL_25;
  }
LABEL_47:
  v118 = 0;
  v119 = 0;
  v35 = *(_QWORD *)(a2 + 80);
  WebCore::SQLiteDatabase::prepareStatement(a1 + 56, "INSERT INTO Caches (cacheGroup, size) VALUES (?, ?)", 52, (uint64_t)&v126);
  v36 = v128;
  if (v128)
  {
    v37 = 0;
    goto LABEL_184;
  }
  sqlite3_bind_int64(pStmt, 1, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) + 8) + 152));
  if (v128)
    goto LABEL_238;
  sqlite3_bind_int64(pStmt, 2, *(_QWORD *)(v35 + 72));
  if (v128)
    goto LABEL_238;
  v38 = (unsigned __int8 *)(v126 + 32);
  if (__ldaxr((unsigned __int8 *)(v126 + 32)))
  {
    __clrex();
LABEL_58:
    MEMORY[0x19AEA534C](v38);
    goto LABEL_59;
  }
  if (__stxr(1u, v38))
    goto LABEL_58;
LABEL_59:
  if (*(_BYTE *)(v126 + 20) || (v43 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v43))
  {
    v44 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v43);
    v75 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v44 = (int)v75;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v75);
  }
  v45 = __ldxr(v38);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_66;
  }
  if (__stlxr(0, v38))
LABEL_66:
    WTF::Lock::unlockSlow((WTF::Lock *)v38);
  if (v44 != 101)
    goto LABEL_182;
  v46 = *(sqlite3 **)(a1 + 64);
  if (v46)
    v47 = sqlite3_last_insert_rowid(v46);
  else
    v47 = 0;
  v48 = *(_QWORD *)(v35 + 16);
  if (!v48)
  {
    v51 = 0;
    v49 = 0;
LABEL_84:
    v50 = (sqlite3_stmt **)(v48 + 16 * v49);
    goto LABEL_85;
  }
  v49 = *(unsigned int *)(v48 - 4);
  v50 = (sqlite3_stmt **)(v48 + 16 * v49);
  if (!*(_DWORD *)(v48 - 12))
  {
    v51 = (sqlite3_stmt **)(v48 + 16 * v49);
    goto LABEL_84;
  }
  v51 = *(sqlite3_stmt ***)(v35 + 16);
  if ((_DWORD)v49)
  {
    v52 = 16 * v49;
    v51 = *(sqlite3_stmt ***)(v35 + 16);
    while ((unint64_t)*v51 + 1 <= 1)
    {
      v51 += 2;
      v52 -= 16;
      if (!v52)
      {
        v51 = v50;
        break;
      }
    }
  }
LABEL_85:
  if (v48)
    v53 = (sqlite3_stmt **)(v48 + 16 * *(unsigned int *)(v48 - 4));
  else
    v53 = 0;
  while (v51 != v53)
  {
    v54 = v51[1];
    v55 = *((_DWORD *)v54 + 83);
    if (!WebCore::ApplicationCacheStorage::store((WTF::StringImpl **)a1, v54, v47))
      goto LABEL_182;
    v124[0] = v51[1];
    LODWORD(v124[1]) = v55;
    v56 = HIDWORD(v119);
    if (HIDWORD(v119) == (_DWORD)v119)
    {
      v57 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v118, HIDWORD(v119) + 1, (unint64_t)v124);
      v56 = HIDWORD(v119);
      *((_OWORD *)v118 + HIDWORD(v119)) = *(_OWORD *)v57;
    }
    else
    {
      *((_OWORD *)v118 + HIDWORD(v119)) = *(_OWORD *)v124;
    }
    HIDWORD(v119) = v56 + 1;
    v58 = v51 + 2;
    v51 = v50;
    if (v58 != v50)
    {
      v51 = v58;
      while ((unint64_t)*v51 + 1 <= 1)
      {
        v51 += 2;
        if (v51 == v50)
        {
          v51 = v50;
          break;
        }
      }
    }
  }
  v117 = v35;
  v59 = *(unsigned int *)(v35 + 52);
  if (!(_DWORD)v59)
  {
LABEL_125:
    WebCore::SQLiteDatabase::prepareStatement(a1 + 56, "INSERT INTO CacheAllowsAllNetworkRequests (wildcard, cache) VALUES (?, ?)", 74, (uint64_t)v124);
    v62 = v125;
    if (v125 == -1)
      goto LABEL_182;
    if (v125)
      goto LABEL_181;
    sqlite3_bind_int64(v124[1], 1, *(unsigned __int8 *)(v117 + 32));
    if (v125)
      goto LABEL_238;
    sqlite3_bind_int64(v124[1], 2, v47);
    if (v125)
      goto LABEL_238;
    v73 = (unsigned __int8 *)v124[0] + 32;
    if (__ldaxr((unsigned __int8 *)v124[0] + 32))
    {
      __clrex();
    }
    else if (!__stxr(1u, v73))
    {
LABEL_139:
      if (*((_BYTE *)v124[0] + 20)
        || (v77 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v124[1]), (_DWORD)v77))
      {
        v78 = sqlite3_step(v124[1]);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v77);
        v114 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v124[1]);
        v78 = (int)v114;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v114);
      }
      v79 = __ldxr(v73);
      if (v79 == 1)
      {
        if (!__stlxr(0, v73))
          goto LABEL_147;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v73);
LABEL_147:
      if (v125 != -1)
        ((void (*)(char *, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v125])(&v129, v124);
      if (v78 != 101)
        goto LABEL_182;
      v80 = *(_DWORD *)(v117 + 68);
      if (!v80)
      {
LABEL_236:
        *(_DWORD *)(v117 + 80) = v47;
        v37 = 1;
        goto LABEL_183;
      }
      v81 = *(uint64_t **)(v117 + 56);
      v116 = &v81[10 * v80];
      while (1)
      {
        WebCore::SQLiteDatabase::prepareStatement(a1 + 56, "INSERT INTO FallbackURLs (namespace, fallbackURL, cache) VALUES (?, ?, ?)", 74, (uint64_t)v124);
        v62 = v125;
        if (v125)
          goto LABEL_180;
        v82 = *v81;
        if (*v81)
        {
          v83 = *(unsigned int *)(v82 + 16);
          v84 = *(char **)(v82 + 8);
          v82 = *(unsigned int *)(v82 + 4);
          v85 = (v83 >> 2) & 1;
        }
        else
        {
          v84 = 0;
          v85 = 1;
        }
        WebCore::SQLiteStatement::bindText((uint64_t)v124, 1, v84, v82 | (v85 << 32));
        if (v125)
          goto LABEL_238;
        v86 = v81[5];
        if (v86)
        {
          v87 = *(unsigned int *)(v86 + 16);
          v88 = *(char **)(v86 + 8);
          v86 = *(unsigned int *)(v86 + 4);
          v89 = (v87 >> 2) & 1;
        }
        else
        {
          v88 = 0;
          v89 = 1;
        }
        WebCore::SQLiteStatement::bindText((uint64_t)v124, 2, v88, v86 | (v89 << 32));
        if (v125)
          goto LABEL_238;
        sqlite3_bind_int64(v124[1], 3, v47);
        if (v125)
          goto LABEL_238;
        v90 = (unsigned __int8 *)v124[0] + 32;
        if (__ldaxr((unsigned __int8 *)v124[0] + 32))
          break;
        if (__stxr(1u, v90))
          goto LABEL_163;
LABEL_164:
        if (*((_BYTE *)v124[0] + 20)
          || (v92 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v124[1]), (_DWORD)v92))
        {
          v93 = sqlite3_step(v124[1]);
        }
        else
        {
          WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v92);
          v95 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v124[1]);
          v93 = (int)v95;
          WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v95);
        }
        v94 = __ldxr(v90);
        if (v94 != 1)
        {
          __clrex();
LABEL_171:
          WTF::Lock::unlockSlow((WTF::Lock *)v90);
          goto LABEL_172;
        }
        if (__stlxr(0, v90))
          goto LABEL_171;
LABEL_172:
        if (v125 != -1)
          ((void (*)(char *, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v125])(&v129, v124);
        if (v93 != 101)
          goto LABEL_182;
        v81 += 10;
        if (v81 == v116)
          goto LABEL_236;
      }
      __clrex();
LABEL_163:
      MEMORY[0x19AEA534C](v90);
      goto LABEL_164;
    }
    MEMORY[0x19AEA534C](v73);
    goto LABEL_139;
  }
  v60 = *(uint64_t **)(v35 + 40);
  v61 = 40 * v59;
  while (1)
  {
    WebCore::SQLiteDatabase::prepareStatement(a1 + 56, "INSERT INTO CacheWhitelistURLs (url, cache) VALUES (?, ?)", 58, (uint64_t)v124);
    v62 = v125;
    if (v125)
      break;
    v63 = *v60;
    if (*v60)
    {
      v64 = *(unsigned int *)(v63 + 16);
      v65 = *(char **)(v63 + 8);
      v63 = *(unsigned int *)(v63 + 4);
      v66 = (v64 >> 2) & 1;
    }
    else
    {
      v65 = 0;
      v66 = 1;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)v124, 1, v65, v63 | (v66 << 32));
    if (v125)
      goto LABEL_238;
    sqlite3_bind_int64(v124[1], 2, v47);
    if (v125)
      goto LABEL_238;
    v67 = (unsigned __int8 *)v124[0] + 32;
    if (__ldaxr((unsigned __int8 *)v124[0] + 32))
    {
      __clrex();
LABEL_109:
      MEMORY[0x19AEA534C](v67);
      goto LABEL_110;
    }
    if (__stxr(1u, v67))
      goto LABEL_109;
LABEL_110:
    if (*((_BYTE *)v124[0] + 20)
      || (v69 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v124[1]), (_DWORD)v69))
    {
      v70 = sqlite3_step(v124[1]);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v69);
      v72 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v124[1]);
      v70 = (int)v72;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v72);
    }
    v71 = __ldxr(v67);
    if (v71 != 1)
    {
      __clrex();
LABEL_117:
      WTF::Lock::unlockSlow((WTF::Lock *)v67);
      goto LABEL_118;
    }
    if (__stlxr(0, v67))
      goto LABEL_117;
LABEL_118:
    if (v125 != -1)
      ((void (*)(char *, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v125])(&v129, v124);
    if (v70 != 101)
      goto LABEL_182;
    v60 += 5;
    v61 -= 40;
    if (!v61)
      goto LABEL_125;
  }
LABEL_180:
  if ((_DWORD)v62 != -1)
LABEL_181:
    ((void (*)(char *, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v62])(&v129, v124);
LABEL_182:
  v37 = 0;
LABEL_183:
  v36 = v128;
LABEL_184:
  if (v36 != -1)
    ((void (*)(sqlite3_stmt **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v36])(v124, &v126);
  if ((v37 & 1) == 0)
  {
    v97 = *(sqlite3 **)(a1 + 64);
    if (v97)
      v98 = sqlite3_errcode(v97);
    else
      v98 = *(_DWORD *)(a1 + 108);
    if (v98 == 13)
    {
      v99 = 1;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (*(_BYTE *)(a1 + 40))
    {
      v99 = 1;
    }
    else
    {
      v99 = 2;
    }
    *a4 = v99;
    goto LABEL_223;
  }
  WebCore::SQLiteDatabase::prepareStatement(a1 + 56, "UPDATE CacheGroups SET newestCache=? WHERE id=?", 48, (uint64_t)&v126);
  v96 = v128;
  if (v128)
  {
    *a4 = 2;
    goto LABEL_221;
  }
  sqlite3_bind_int64(pStmt, 1, *(unsigned int *)(*(_QWORD *)(a2 + 80) + 80));
  if (v128 || (sqlite3_bind_int64(pStmt, 2, *(unsigned int *)(a2 + 152)), v128))
  {
LABEL_238:
    v115 = (WebCore::ApplicationCacheStorage *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ApplicationCacheStorage::checkForDeletedResources(v115);
    return;
  }
  v100 = (unsigned __int8 *)(v126 + 32);
  if (__ldaxr((unsigned __int8 *)(v126 + 32)))
  {
    __clrex();
    goto LABEL_202;
  }
  if (__stxr(1u, v100))
LABEL_202:
    MEMORY[0x19AEA534C](v100);
  if (*(_BYTE *)(v126 + 20) || (v102 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v102))
  {
    v103 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v102);
    v113 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v103 = (int)v113;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v113);
  }
  v104 = __ldxr(v100);
  if (v104 == 1)
  {
    if (!__stlxr(0, v100))
      goto LABEL_211;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v100);
LABEL_211:
  if (v103 == 101)
  {
    if ((_DWORD)v121)
    {
      HIDWORD(v121) = 0;
      v105 = v120;
      if (v120)
      {
        v120 = 0;
        WTF::fastFree(v105, v15);
      }
    }
    if ((_DWORD)v119)
    {
      HIDWORD(v119) = 0;
      v106 = v118;
      if (v118)
      {
        v118 = 0;
        WTF::fastFree(v106, v15);
      }
    }
    WebCore::SQLiteTransaction::commit((uint64_t)&v122);
  }
  else
  {
    *a4 = 2;
  }
  v96 = v128;
LABEL_221:
  if (v96 != -1)
    ((void (*)(sqlite3_stmt **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v96])(v124, &v126);
LABEL_223:
  v107 = v118;
  if (HIDWORD(v119))
  {
    v108 = (WTF *)((char *)v118 + 16 * HIDWORD(v119));
    v109 = v118;
    do
    {
      *(_DWORD *)(*(_QWORD *)v109 + 332) = *((_DWORD *)v109 + 2);
      v109 = (WTF *)((char *)v109 + 16);
    }
    while (v109 != v108);
  }
  if (v107)
    WTF::fastFree(v107, v15);
LABEL_228:
  v110 = v120;
  if (HIDWORD(v121))
  {
    v111 = (WTF *)((char *)v120 + 16 * HIDWORD(v121));
    v112 = v120;
    do
    {
      *(_DWORD *)(*(_QWORD *)v112 + 152) = *((_DWORD *)v112 + 2);
      v112 = (WTF *)((char *)v112 + 16);
    }
    while (v112 != v111);
  }
  if (v110)
    WTF::fastFree(v110, v15);
LABEL_233:
  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v122);
}

void WebCore::ApplicationCacheStorage::checkForDeletedResources(WebCore::ApplicationCacheStorage *this)
{
  int v2;
  unsigned __int8 *v3;
  WebCore::SQLiteDatabaseTracker *v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const WTF::String *v10;
  const WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  WebCore::SQLiteDatabaseTracker *v18;
  int v19;
  int v20;
  WebCore::SQLiteDatabaseTracker *v21;
  WebCore::SQLiteDatabaseTracker *v22;
  WebCore::ApplicationCacheStorage *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  sqlite3_stmt *v28;
  sqlite3_stmt *pStmt;
  int v30;

  WebCore::ApplicationCacheStorage::openDatabase(this, 0);
  if (*((_QWORD *)this + 8))
  {
    WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 56, "SELECT DeletedCacheResources.path FROM DeletedCacheResources LEFT JOIN CacheResourceData ON DeletedCacheResources.path = CacheResourceData.path WHERE (SELECT DeletedCacheResources.path == CacheResourceData.path) IS NULL", 220, (uint64_t)&v28);
    v2 = v30;
    if (v30)
    {
LABEL_57:
      if (v2 != -1)
        ((void (*)(WTF::StringImpl **, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v2])(&v27, &v28);
      return;
    }
    v3 = (unsigned __int8 *)v28 + 32;
    if (__ldaxr((unsigned __int8 *)v28 + 32))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
LABEL_7:
      if (*((_BYTE *)v28 + 20) || (v5 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v5))
      {
        v6 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v5);
        v22 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v6 = (int)v22;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v22);
      }
      v7 = __ldxr(v3);
      if (v7 == 1)
      {
        if (!__stlxr(0, v3))
          goto LABEL_15;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_15:
      if (v6 == 100)
      {
        while (1)
        {
          if (v30)
          {
LABEL_61:
            v23 = (WebCore::ApplicationCacheStorage *)std::__throw_bad_variant_access[abi:sn180100]();
            WebCore::ApplicationCacheStorage::empty(v23);
            return;
          }
          WebCore::SQLiteStatement::columnText(&v28, 0, &v27);
          v9 = v27;
          if (!v27)
            goto LABEL_35;
          if (!*((_DWORD *)v27 + 1))
          {
            v27 = 0;
LABEL_33:
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v8);
            else
              *(_DWORD *)v9 -= 2;
            goto LABEL_35;
          }
          WTF::FileSystemImpl::pathByAppendingComponent();
          WTF::FileSystemImpl::pathByAppendingComponent();
          WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)&v25, v10);
          v12 = WTF::equal(v24, v26, v11);
          v13 = v24;
          v24 = 0;
          if (!v13)
            goto LABEL_22;
          if (*(_DWORD *)v13 != 2)
            break;
          WTF::StringImpl::destroy(v13, v8);
          if (v12)
            goto LABEL_23;
LABEL_24:
          v14 = v25;
          v25 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v8);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = v26;
          v26 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v8);
            else
              *(_DWORD *)v15 -= 2;
          }
          v9 = v27;
          v27 = 0;
          if (v9)
            goto LABEL_33;
LABEL_35:
          if (v30)
            goto LABEL_61;
          v16 = (unsigned __int8 *)v28 + 32;
          if (__ldaxr((unsigned __int8 *)v28 + 32))
          {
            __clrex();
LABEL_39:
            MEMORY[0x19AEA534C](v16);
            goto LABEL_40;
          }
          if (__stxr(1u, v16))
            goto LABEL_39;
LABEL_40:
          if (*((_BYTE *)v28 + 20)
            || (v18 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v18))
          {
            v19 = sqlite3_step(pStmt);
          }
          else
          {
            WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v18);
            v21 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
            v19 = (int)v21;
            WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v21);
          }
          v20 = __ldxr(v16);
          if (v20 == 1)
          {
            if (!__stlxr(0, v16))
              goto LABEL_48;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_48:
          if (v19 != 100)
          {
            WebCore::SQLiteDatabase::executeCommand((uint64_t)this + 56, "DELETE FROM DeletedCacheResources", 34);
            goto LABEL_56;
          }
        }
        *(_DWORD *)v13 -= 2;
LABEL_22:
        if (!v12)
          goto LABEL_24;
LABEL_23:
        WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v25, v8);
        goto LABEL_24;
      }
LABEL_56:
      v2 = v30;
      goto LABEL_57;
    }
    MEMORY[0x19AEA534C](v3);
    goto LABEL_7;
  }
}

uint64_t WebCore::ApplicationCacheStorage::empty(WebCore::ApplicationCacheStorage *this)
{
  WebCore::SQLiteDatabaseTracker *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
  v2 = (WebCore::SQLiteDatabaseTracker *)WebCore::ApplicationCacheStorage::openDatabase(this, 0);
  if (!*((_QWORD *)this + 8))
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v2);
  WebCore::SQLiteDatabase::executeCommand((uint64_t)this + 56, "DELETE FROM CacheGroups", 24);
  WebCore::SQLiteDatabase::executeCommand((uint64_t)this + 56, "DELETE FROM Caches", 19);
  WebCore::SQLiteDatabase::executeCommand((uint64_t)this + 56, "DELETE FROM Origins", 20);
  v3 = *((_QWORD *)this + 16);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_QWORD *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = (_QWORD *)*((_QWORD *)this + 16);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = (_QWORD *)*((_QWORD *)this + 16);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v6 = (_QWORD *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (!v3)
  {
    v8 = 0;
    goto LABEL_14;
  }
LABEL_9:
  v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
LABEL_14:
  while (v6 != v8)
  {
    WebCore::ApplicationCacheGroup::clearStorageID(v6[1]);
    v9 = v6 + 2;
    v6 = v5;
    if (v9 != v5)
    {
      v6 = v9;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  WebCore::ApplicationCacheStorage::checkForDeletedResources(this);
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v2);
}

uint64_t WebCore::ApplicationCacheStorage::manifestURLs(WebCore::ApplicationCacheStorage *this, uint64_t a2)
{
  WebCore::SQLiteDatabaseTracker *v4;
  int v5;
  unsigned __int8 *v6;
  WebCore::SQLiteDatabaseTracker *v8;
  void *v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebCore::SQLiteDatabaseTracker *v30;
  uint64_t v31;
  WebCore::ApplicationCacheStorage *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35[5];
  WTF::StringImpl *v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  sqlite3_stmt *v42;
  sqlite3_stmt *v43;
  int v44;

  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
  v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::ApplicationCacheStorage::openDatabase((WTF::StringImpl **)a2, 0);
  if (!*(_QWORD *)(a2 + 64))
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 16) = 0;
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
  }
  WebCore::SQLiteDatabase::prepareStatement(a2 + 56, "SELECT manifestURL FROM CacheGroups", 36, (uint64_t)&v42);
  v5 = v44;
  if (v44)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 16) = 0;
LABEL_39:
    if (v5 != -1)
      v4 = (WebCore::SQLiteDatabaseTracker *)((uint64_t (*)(WTF::StringImpl **, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v5])(&v36, &v42);
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
  }
  v40 = 0;
  v41 = 0;
  do
  {
    v6 = (unsigned __int8 *)v42 + 32;
    if (__ldaxr((unsigned __int8 *)v42 + 32))
    {
      __clrex();
LABEL_9:
      MEMORY[0x19AEA534C](v6);
      goto LABEL_10;
    }
    if (__stxr(1u, v6))
      goto LABEL_9;
LABEL_10:
    if (*((_BYTE *)v42 + 20) || (v8 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v43), (_DWORD)v8))
    {
      v10 = sqlite3_step(v43);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v8);
      v30 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v43);
      v10 = (int)v30;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v30);
    }
    v11 = __ldxr(v6);
    if (v11 != 1)
    {
      __clrex();
LABEL_17:
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      goto LABEL_18;
    }
    if (__stlxr(0, v6))
      goto LABEL_17;
LABEL_18:
    if (v10 != 100)
    {
      *(_QWORD *)this = v40;
      v31 = v41;
      v40 = 0;
      v41 = 0;
      *((_QWORD *)this + 1) = v31;
      *((_BYTE *)this + 16) = 1;
      v4 = (WebCore::SQLiteDatabaseTracker *)WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v9);
      v5 = v44;
      goto LABEL_39;
    }
    v35[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v35);
    if (v44)
      break;
    WebCore::SQLiteStatement::columnText(&v42, 0, &v34);
    MEMORY[0x19AEA52F8](&v36, v35, &v34, 0);
    if (HIDWORD(v41) == (_DWORD)v41)
    {
      v13 = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41) + 1, (unint64_t)&v36);
      v14 = v40 + 40 * HIDWORD(v41);
      v15 = *(_QWORD *)v13;
      *(_QWORD *)v13 = 0;
      *(_QWORD *)v14 = v15;
      v16 = *(_DWORD *)(v14 + 8) & 0xFFFFFFFE | *((_DWORD *)v13 + 2) & 1;
      *(_DWORD *)(v14 + 8) = v16;
      v17 = v16 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v13 + 2) >> 1) & 1));
      *(_DWORD *)(v14 + 8) = v17;
      v18 = v17 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v13 + 2) >> 2) & 1));
      *(_DWORD *)(v14 + 8) = v18;
      v19 = v18 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v13 + 2) >> 3) & 7));
      *(_DWORD *)(v14 + 8) = v19;
      *(_DWORD *)(v14 + 8) = *((_DWORD *)v13 + 2) & 0xFFFFFFC0 | v19 & 0x3F;
      *(_OWORD *)(v14 + 12) = *(_OWORD *)(v13 + 12);
      *(_QWORD *)(v14 + 28) = *(_QWORD *)(v13 + 28);
      v20 = (_DWORD *)(v14 + 36);
    }
    else
    {
      v21 = v40 + 40 * HIDWORD(v41);
      v22 = v36;
      v36 = 0;
      *(_QWORD *)v21 = v22;
      v23 = *(_DWORD *)(v21 + 8) & 0xFFFFFFFE | v37 & 1;
      *(_DWORD *)(v21 + 8) = v23;
      v24 = v23 & 0xFFFFFFFD | (2 * ((v37 >> 1) & 1));
      *(_DWORD *)(v21 + 8) = v24;
      v25 = v24 & 0xFFFFFFFB | (4 * ((v37 >> 2) & 1));
      *(_DWORD *)(v21 + 8) = v25;
      v26 = v25 & 0xFFFFFFC7 | (8 * ((v37 >> 3) & 7));
      *(_DWORD *)(v21 + 8) = v26;
      *(_DWORD *)(v21 + 8) = v37 & 0xFFFFFFC0 | v26 & 0x3F;
      *(_OWORD *)(v21 + 12) = v38;
      *(_QWORD *)(v21 + 28) = v39;
      v20 = (_DWORD *)(v21 + 36);
      v13 = (char *)&v36;
    }
    *v20 = *((_DWORD *)v13 + 9);
    *((_DWORD *)v13 + 2) &= ~1u;
    ++HIDWORD(v41);
    v27 = v36;
    v36 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v12);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = v34;
    v34 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v12);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = v35[0];
    v35[0] = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v12);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  while (!v44);
  v33 = (WebCore::ApplicationCacheStorage *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::ApplicationCacheStorage::originsWithCache(v33);
}

uint64_t WebCore::ApplicationCacheStorage::originsWithCache@<X0>(WebCore::ApplicationCacheStorage *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  const WTF::URL *v4;
  int v5;
  WebCore::SecurityOriginData *v6;
  uint64_t v7;
  _BYTE v8[24];
  WebCore::SecurityOriginData *v9;
  unsigned int v10;
  unsigned __int8 v11;
  _BYTE v12[24];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = WebCore::ApplicationCacheStorage::manifestURLs((WebCore::ApplicationCacheStorage *)&v9, (uint64_t)this);
  v5 = v11;
  *a2 = 0;
  if (v5)
  {
    if (v10)
    {
      v6 = v9;
      v7 = 40 * v10;
      do
      {
        if (WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin(v6, v4))
          WebCore::SecurityOriginData::createOpaque((uint64_t)v12);
        else
          WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v6, (uint64_t)v12);
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(a2, (uint64_t)v12, (uint64_t)v8);
        if (v13 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E33F8068[v13])(v8, v12);
        v6 = (WebCore::SecurityOriginData *)((char *)v6 + 40);
        v7 -= 40;
      }
      while (v7);
    }
    return WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
  }
  return result;
}

uint64_t WebCore::ApplicationCacheStorage::deleteAllEntries(WebCore::ApplicationCacheStorage *this)
{
  WebCore::SQLiteDatabaseTracker *v2;
  WebCore::SQLiteDatabaseTracker *v3;

  v2 = (WebCore::SQLiteDatabaseTracker *)WebCore::ApplicationCacheStorage::empty(this);
  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v2);
  v3 = (WebCore::SQLiteDatabaseTracker *)WebCore::ApplicationCacheStorage::openDatabase((WTF::StringImpl **)this, 0);
  if (*((_QWORD *)this + 8))
    v3 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::runVacuumCommand((WebCore::ApplicationCacheStorage *)((char *)this + 56));
  return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v3);
}

uint64_t WebCore::ApplicationCacheStorage::deleteAllCaches(WebCore::ApplicationCacheStorage *this)
{
  uint64_t isNull;
  const WTF::URL *v3;
  WebCore::SecurityOriginData *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::SQLiteDatabaseTracker *v15;
  uint64_t result;
  void *v17;
  WebCore::SecurityOriginData *v18;
  uint64_t v19;
  WebCore::SecurityOriginData *i;
  uint64_t v21;
  uint64_t v22;
  WebCore::SecurityOriginData *v23;
  _BYTE v24[24];
  WebCore::SecurityOriginData *v25;
  unsigned int v26;
  char v27;
  _QWORD v28[3];
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  isNull = WebCore::ApplicationCacheStorage::manifestURLs((WebCore::ApplicationCacheStorage *)&v25, (uint64_t)this);
  v23 = 0;
  if (!v27)
  {
    v6 = 0;
LABEL_23:
    v11 = 0;
    v7 = 0;
    goto LABEL_24;
  }
  if (v26)
  {
    v4 = v25;
    v5 = 40 * v26;
    do
    {
      if (WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin(v4, v3))
        WebCore::SecurityOriginData::createOpaque((uint64_t)v28);
      else
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v4, (uint64_t)v28);
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v23, (uint64_t)v28, (uint64_t)v24);
      if (v29 != -1)
        ((void (*)(_BYTE *, _QWORD *))off_1E33F8068[v29])(v24, v28);
      v4 = (WebCore::SecurityOriginData *)((char *)v4 + 40);
      v5 -= 40;
    }
    while (v5);
  }
  isNull = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v3);
  v6 = (unsigned int *)v23;
  if (!v23)
    goto LABEL_23;
  v7 = *((unsigned int *)v23 - 1);
  v8 = (unsigned int *)((char *)v23 + 32 * v7);
  if (!*((_DWORD *)v23 - 3))
  {
    v11 = (unsigned int *)((char *)v23 + 32 * v7);
LABEL_24:
    v8 = &v6[8 * v7];
    if (!v6)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (!(_DWORD)v7)
  {
    v11 = (unsigned int *)v23;
LABEL_25:
    v6 += 8 * *(v6 - 1);
    goto LABEL_26;
  }
  v9 = 32 * v7;
  while (1)
  {
    isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v6);
    if ((isNull & 1) == 0)
    {
      v10 = v6[6];
      if ((_DWORD)v10 == -1)
        goto LABEL_51;
      v28[0] = &v25;
      isNull = ((uint64_t (*)(_QWORD *, unsigned int *))off_1E33F8078[v10])(v28, v6);
      if (!(_DWORD)isNull)
        break;
    }
    v6 += 8;
    v9 -= 32;
    if (!v9)
    {
      v6 = v8;
      break;
    }
  }
  v11 = v6;
  v6 = (unsigned int *)v23;
  if (v23)
    goto LABEL_25;
LABEL_26:
  while (v11 != v6)
  {
    isNull = WebCore::ApplicationCacheStorage::deleteCacheForOrigin(this, (const WebCore::SecurityOriginData *)v11);
    v12 = v11 + 8;
    v11 = v8;
    if (v12 != v8)
    {
      v11 = v12;
      do
      {
        v13 = v11[6];
        if ((_DWORD)v13 == -1)
          goto LABEL_51;
        v28[0] = &v25;
        isNull = ((uint64_t (*)(_QWORD *, unsigned int *))off_1E33F80F0[v13])(v28, v11);
        if ((isNull & 1) == 0)
        {
          v14 = v11[6];
          if ((_DWORD)v14 == -1)
            goto LABEL_51;
          v28[0] = &v25;
          isNull = ((uint64_t (*)(_QWORD *, unsigned int *))off_1E33F8078[v14])(v28, v11);
          if (!(_DWORD)isNull)
            goto LABEL_35;
        }
        v11 += 8;
      }
      while (v11 != v8);
      v11 = v8;
    }
LABEL_35:
    ;
  }
  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)isNull);
  v15 = (WebCore::SQLiteDatabaseTracker *)WebCore::ApplicationCacheStorage::openDatabase((WTF::StringImpl **)this, 0);
  if (*((_QWORD *)this + 8))
    v15 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::runVacuumCommand((WebCore::ApplicationCacheStorage *)((char *)this + 56));
  result = WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v15);
  v18 = v23;
  if (v23)
  {
    v19 = *((unsigned int *)v23 - 1);
    if ((_DWORD)v19)
    {
      for (i = v23; ; i = (WebCore::SecurityOriginData *)((char *)i + 32))
      {
        v21 = *((unsigned int *)i + 6);
        if ((_DWORD)v21 == -1)
          break;
        v28[0] = &v25;
        if ((((uint64_t (*)(_QWORD *, WebCore::SecurityOriginData *))off_1E33F8078[v21])(v28, i) & 1) == 0)
        {
          v22 = *((unsigned int *)i + 6);
          if ((_DWORD)v22 != -1)
            ((void (*)(_QWORD *, WebCore::SecurityOriginData *))off_1E33F8068[v22])(v28, i);
          *((_DWORD *)i + 6) = -1;
        }
        if (!--v19)
          return WTF::fastFree((WebCore::SecurityOriginData *)((char *)v18 - 16), v17);
      }
LABEL_51:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    return WTF::fastFree((WebCore::SecurityOriginData *)((char *)v18 - 16), v17);
  }
  return result;
}

uint64_t WebCore::ApplicationCacheStorage::deleteCacheForOrigin(WebCore::ApplicationCacheStorage *this, const WebCore::SecurityOriginData *a2)
{
  uint64_t result;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  unsigned int *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int i;
  uint64_t v17;
  const WTF::StringImpl *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int j;
  uint64_t v25;
  WTF *v26;
  WebCore::ApplicationCacheGroup *v27;
  WebCore::SQLiteDatabaseTracker *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **v31;
  unsigned int v32;
  char v33;
  WTF::StringImpl *v34;
  __int16 v35;

  result = WebCore::ApplicationCacheStorage::manifestURLs((WebCore::ApplicationCacheStorage *)&v31, (uint64_t)this);
  if (v33)
  {
    WebCore::SecurityOriginData::toString(a2, &v34);
    MEMORY[0x19AEA52D4](&v30, &v34, 0);
    v6 = v34;
    v34 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    if (v32)
    {
      v7 = v31;
      v8 = &v31[5 * v32];
      v9 = (unsigned int *)((char *)this + 56);
      while (1)
      {
        v10 = WTF::protocolHostAndPortAreEqual();
        if ((_DWORD)v10)
          break;
LABEL_37:
        v7 += 5;
        if (v7 == v8)
          goto LABEL_38;
      }
      v12 = *((_QWORD *)this + 16);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 - 8);
        v14 = *((_DWORD *)*v7 + 4);
        v15 = v14 < 0x100 ? WTF::StringImpl::hashSlowCase(*v7) : v14 >> 8;
        for (i = 0; ; v15 = i + v17)
        {
          v17 = v15 & v13;
          v10 = *(_QWORD *)(v12 + 16 * v17);
          if (v10 != -1)
          {
            if (!v10)
              goto LABEL_20;
            v10 = WTF::equal((WTF *)v10, *v7, v11);
            if ((v10 & 1) != 0)
              break;
          }
          ++i;
        }
        v5 = *(_QWORD *)(v12 + 16 * v17 + 8);
        if (v5)
        {
          if (!*(_BYTE *)(v5 + 156))
          {
            *(_BYTE *)(v5 + 156) = 1;
            WebCore::ApplicationCacheStorage::cacheGroupMadeObsolete(*(WebCore::ApplicationCacheStorage **)(v5 + 16), (WebCore::ApplicationCacheGroup *)v5, v11);
          }
          goto LABEL_37;
        }
      }
LABEL_20:
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v10);
      v34 = (WebCore::ApplicationCacheStorage *)((char *)this + 56);
      do
        v19 = __ldaxr(v9);
      while (__stlxr(v19 + 1, v9));
      v35 = 0;
      v20 = *((_QWORD *)this + 16);
      if (!v20)
        goto LABEL_33;
      v21 = *(_DWORD *)(v20 - 8);
      v22 = *((_DWORD *)*v7 + 4);
      v23 = v22 < 0x100 ? WTF::StringImpl::hashSlowCase(*v7) : v22 >> 8;
      for (j = 0; ; v23 = ++j + v25)
      {
        v25 = v23 & v21;
        v26 = *(WTF **)(v20 + 16 * v25);
        if (v26 != (WTF *)-1)
        {
          if (!v26)
            goto LABEL_33;
          if ((WTF::equal(v26, *v7, v18) & 1) != 0)
            break;
        }
      }
      v27 = *(WebCore::ApplicationCacheGroup **)(v20 + 16 * v25 + 8);
      if (v27)
      {
        WebCore::ApplicationCacheStorage::cacheGroupMadeObsolete(this, v27, v18);
      }
      else
      {
LABEL_33:
        WebCore::ApplicationCacheStorage::openDatabase((WTF::StringImpl **)this, 0);
        if (!*((_QWORD *)this + 8)
          || !WebCore::ApplicationCacheStorage::deleteCacheGroupRecord(this, (const WTF::String *)v7))
        {
          goto LABEL_36;
        }
      }
      WebCore::SQLiteTransaction::commit((uint64_t)&v34);
      WebCore::ApplicationCacheStorage::checkForDeletedResources(this);
LABEL_36:
      WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v34);
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v28);
      goto LABEL_37;
    }
LABEL_38:
    v29 = v30;
    v30 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v29 -= 2;
    }
    return WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, (void *)v5);
  }
  return result;
}

uint64_t WebCore::ApplicationCacheStorage::diskUsageForOrigin(WebCore::ApplicationCacheStorage *this, const WebCore::SecurityOriginData *a2)
{
  uint64_t v3;

  v3 = 0;
  WebCore::ApplicationCacheStorage::calculateUsageForOrigin(this, a2, &v3);
  return v3;
}

void WebCore::DOMApplicationCache::update(WebCore::DOMApplicationCache *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    goto LABEL_19;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_19;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    goto LABEL_19;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_19;
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F3B1A0);
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (!v7)
    goto LABEL_19;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_19;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
  if (!v9)
    goto LABEL_19;
  v10 = *(_QWORD *)(v9 + 2872);
  if (!v10)
    goto LABEL_19;
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
    goto LABEL_19;
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
  v13 = v12 ? v12 - 56 : 0;
  v14 = *(_QWORD *)(v13 + 16);
  if (v14 && (v15 = *(WTF::StringImpl **)(v14 + 8)) != 0)
  {
    v16 = *(_QWORD *)(v11 + 8);
    if (v16)
      v17 = *(_QWORD *)(v16 + 8);
    else
      v17 = 0;
    WebCore::ApplicationCacheGroup::update(v17, v15, 1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
LABEL_19:
    *(_BYTE *)a2 = 8;
    a2[1] = 0;
    *((_BYTE *)a2 + 16) = 1;
  }
}

uint64_t *WebCore::DOMApplicationCache::abort(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::LocalFrame *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = this[4];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 72);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (*(_BYTE *)(v4 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x195F3B25CLL);
          }
          v5 = *(_QWORD *)(v4 + 240);
          if (v5)
          {
            v6 = *(_QWORD *)(v5 + 8);
            if (v6)
            {
              v7 = *(_QWORD *)(*(_QWORD *)(v6 + 280) + 88);
              if (v7)
              {
                v8 = *(_QWORD **)(v7 + 2872);
                if (v8)
                {
                  v9 = *(_QWORD *)(v8[1] + 8);
                  v10 = v9 ? v9 - 56 : 0;
                  v11 = *(_QWORD *)(v10 + 16);
                  if (v11)
                  {
                    v12 = *(WebCore::LocalFrame **)(v11 + 8);
                    if (v12)
                    {
                      v13 = v8[6];
                      if (v13)
                      {
                        this = *(uint64_t **)(v13 + 8);
                        if (this)
                          return WebCore::ApplicationCacheGroup::abort(this, v12);
                      }
                      v14 = v8[5];
                      if (v14)
                      {
                        v15 = *(_QWORD *)(v14 + 8);
                        if (v15)
                          this = *(uint64_t **)(v15 + 8);
                        else
                          this = 0;
                        return WebCore::ApplicationCacheGroup::abort(this, v12);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::DOMApplicationCache::scriptExecutionContext(WebCore::DOMApplicationCache *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    v3 = *(_QWORD *)(v3 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      v3 -= 288;
    }
  }
  if (v3)
    return v3 + 192;
  else
    return 0;
}

void WebCore::Archive::~Archive(WebCore::Archive *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  _DWORD *v13;

  *(_QWORD *)this = off_1E33F8008;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 9);
  if ((_DWORD)v8)
  {
    v9 = (_DWORD **)*((_QWORD *)this + 3);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 3);
  if (v12)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
}

unint64_t *WebCore::Archive::saveResourcesToDisk@<X0>(WebCore::Archive *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *result;
  int v7;
  int v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  _DWORD *v12;
  WTF *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  _DWORD *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WebCore::Archive **v28;
  uint64_t i;
  WebCore::Archive *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WebCore::DOMApplicationCache *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  int v42;
  WTF *v43;
  uint64_t v44;
  char v45;

  v43 = 0;
  v44 = 0;
  result = (unint64_t *)*((_QWORD *)this + 2);
  if (!result)
  {
    v9 = 0;
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_62;
  }
  result = WebCore::ArchiveResource::saveToDisk(result, a2, (uint64_t)&v41);
  v7 = v42;
  if (v42)
  {
    if (v42 != 1)
    {
LABEL_74:
      v37 = (WebCore::DOMApplicationCache *)std::__throw_bad_variant_access[abi:sn180100]();
      return (unint64_t *)WebCore::DOMApplicationCache::eventTargetInterface(v37);
    }
    *(_BYTE *)a3 = (_BYTE)v41;
    v8 = 1;
    goto LABEL_48;
  }
  v10 = HIDWORD(v44);
  if (HIDWORD(v44) == (_DWORD)v44)
  {
    result = (unint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v43, HIDWORD(v44) + 1, (unint64_t)&v41);
    v10 = HIDWORD(v44);
    v11 = v43;
    v12 = (_DWORD *)*result;
    if (*result)
      *v12 += 2;
    *((_QWORD *)v11 + v10) = v12;
  }
  else
  {
    v13 = v43;
    v14 = v41;
    if (v41)
      *v41 += 2;
    *((_QWORD *)v13 + v10) = v14;
  }
  HIDWORD(v44) = v10 + 1;
  v15 = *((unsigned int *)this + 9);
  if ((_DWORD)v15)
  {
    v8 = 0;
    v16 = (uint64_t *)*((_QWORD *)this + 3);
    v17 = 8 * v15;
    while (1)
    {
      v18 = *v16;
      *(_DWORD *)(v18 + 8) = *(_DWORD *)(*v16 + 8) + 1;
      WebCore::ArchiveResource::saveToDisk((unint64_t *)v18, a2, (uint64_t)&v38);
      v19 = v39;
      if (v39)
        break;
      v21 = HIDWORD(v44);
      if (HIDWORD(v44) != (_DWORD)v44)
      {
        v25 = v43;
        v26 = v38;
        if (v38)
          *(_DWORD *)v38 += 2;
        v20 = 0;
        *((_QWORD *)v25 + v21) = v26;
        HIDWORD(v44) = v21 + 1;
LABEL_26:
        result = (unint64_t *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E33F8088[v20])(&v45, &v38);
        goto LABEL_27;
      }
      result = (unint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v43, HIDWORD(v44) + 1, (unint64_t)&v38);
      v22 = HIDWORD(v44);
      v23 = v43;
      v24 = (_DWORD *)*result;
      if (*result)
        *v24 += 2;
      *((_QWORD *)v23 + v22) = v24;
      HIDWORD(v44) = v22 + 1;
      v20 = v39;
      if (v39 != -1)
        goto LABEL_26;
LABEL_27:
      if (*(_DWORD *)(v18 + 8) == 1)
        result = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      else
        --*(_DWORD *)(v18 + 8);
      if (v19)
        goto LABEL_49;
      ++v16;
      v17 -= 8;
      if (!v17)
        goto LABEL_34;
    }
    if (v39 != 1)
      goto LABEL_74;
    *(_BYTE *)a3 = (_BYTE)v38;
    v8 = 1;
    *(_DWORD *)(a3 + 16) = 1;
    v20 = 1;
    goto LABEL_26;
  }
  v8 = 0;
LABEL_34:
  v27 = *((unsigned int *)this + 13);
  if ((_DWORD)v27)
  {
    v28 = (WebCore::Archive **)*((_QWORD *)this + 5);
    for (i = 8 * v27; i; i -= 8)
    {
      v30 = *v28;
      *((_DWORD *)v30 + 2) = *((_DWORD *)*v28 + 2) + 1;
      WebCore::Archive::saveResourcesToDisk((uint64_t *)&v38, v30, a2);
      v31 = v40;
      if (v40)
      {
        if (v40 != 1)
          goto LABEL_74;
        *(_BYTE *)a3 = (_BYTE)v38;
        v8 = 1;
        *(_DWORD *)(a3 + 16) = 1;
        v32 = 1;
      }
      else
      {
        result = (unint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v43, (uint64_t)&v38);
        v32 = v40;
        if (v40 == -1)
          goto LABEL_41;
      }
      result = (unint64_t *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E33F8098[v32])(&v45, &v38);
LABEL_41:
      if (*((_DWORD *)v30 + 2) == 1)
      {
        result = (unint64_t *)(*(uint64_t (**)(WebCore::Archive *))(*(_QWORD *)v30 + 8))(v30);
        if (v31)
          goto LABEL_49;
      }
      else
      {
        --*((_DWORD *)v30 + 2);
        if (v31)
          goto LABEL_49;
      }
      ++v28;
    }
  }
  *(_QWORD *)a3 = v43;
  v33 = v44;
  v43 = 0;
  v44 = 0;
  *(_QWORD *)(a3 + 8) = v33;
LABEL_48:
  *(_DWORD *)(a3 + 16) = v7;
LABEL_49:
  if (v42 != -1)
    result = (unint64_t *)((uint64_t (*)(WTF::StringImpl **, _DWORD **))off_1E33F8088[v42])(&v38, &v41);
  v9 = v43;
  if (v8 && HIDWORD(v44))
  {
    v34 = 8 * HIDWORD(v44);
    do
    {
      v35 = *(WTF::StringImpl **)v9;
      if (*(_QWORD *)v9)
        *(_DWORD *)v35 += 2;
      v38 = v35;
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v38, a2);
      result = (unint64_t *)v38;
      v38 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (unint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v9 = (WTF *)((char *)v9 + 8);
      v34 -= 8;
    }
    while (v34);
    v9 = v43;
  }
LABEL_62:
  if (!HIDWORD(v44))
  {
    if (!v9)
      return result;
LABEL_73:
    v43 = 0;
    LODWORD(v44) = 0;
    return (unint64_t *)WTF::fastFree(v9, a2);
  }
  v36 = 8 * HIDWORD(v44);
  do
  {
    result = *(unint64_t **)v9;
    *(_QWORD *)v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (unint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    v9 = (WTF *)((char *)v9 + 8);
    v36 -= 8;
  }
  while (v36);
  v9 = v43;
  if (v43)
    goto LABEL_73;
  return result;
}

uint64_t WebCore::DOMApplicationCache::eventTargetInterface(WebCore::DOMApplicationCache *this)
{
  return 53;
}

void WebCore::DOMApplicationCache::~DOMApplicationCache(WebCore::DOMApplicationCache *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::EventTarget::~EventTarget(this, a2);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::EventTarget::~EventTarget(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::DOMApplicationCache::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t WebCore::DOMApplicationCache::derefEventTarget(WebCore::DOMApplicationCache *this, void *a2)
{
  return WTF::RefCounted<WebCore::DOMApplicationCache>::deref((uint64_t)this + 24, a2);
}

void WebCore::ApplicationCacheResource::~ApplicationCacheResource(WebCore::ApplicationCacheResource *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E33F7EF0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 40);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 40);
    *((_QWORD *)this + 40) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 40) = 0;
  }
  WebCore::SubstituteResource::~SubstituteResource(this, a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = off_1E33F7EF0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 40);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 40);
    *((_QWORD *)this + 40) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 40) = 0;
  }
  WebCore::SubstituteResource::~SubstituteResource(this, a2);
  WTF::fastFree(v8, v9);
}

void WebCore::SubstituteResource::~SubstituteResource(WebCore::SubstituteResource *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::SubstituteResource::~SubstituteResource(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::ResourceResponseBase *v6;
  const void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  *(_QWORD *)this = off_1E33F8110;
  v3 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v3 + 8);
        v12 = v11 + 16 * v10;
        do
        {
          v13 = *(unsigned int **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v19 = v12;
              v20 = v11;
              v21 = (WTF *)v13;
              v22 = v3;
              atomic_store(1u, v13);
              v16 = v13[6];
              if ((_DWORD)v16 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F80A8[v16])(&v24, v13 + 2);
              *((_DWORD *)v21 + 6) = -1;
              WTF::fastFree(v21, a2);
              v3 = v22;
              v12 = v19;
              v11 = v20;
            }
          }
          v11 += 16;
        }
        while (v11 != v12);
      }
      v17 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v17 && v17 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v23 = v3;
        WTF::fastFree(v17, a2);
        v3 = v23;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WebCore::SubstituteResource *)((char *)this + 56);
  v7 = (const void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v7)
  {
    CFRelease(v7);
    v6 = (WebCore::SubstituteResource *)((char *)this + 56);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v6, (WTF::StringImpl *)a2);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
}

uint64_t *WebCore::SubstituteResource::deliver(WebCore::SubstituteResource *this, WebCore::ResourceLoader *a2)
{
  char *v3;
  WebCore::FragmentedSharedBuffer *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v10;
  _QWORD *v11;

  v3 = (char *)this + 56;
  v4 = (WebCore::FragmentedSharedBuffer *)*((_QWORD *)this + 39);
  if (v4)
  {
    WebCore::FragmentedSharedBuffer::copy(v4, &v10);
    v5 = v10;
  }
  else
  {
    v5 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v5 + 24;
    *(_QWORD *)(v5 + 16) = 1;
    *(_BYTE *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
  }
  v10 = 0;
  ++*((_DWORD *)a2 + 4);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E33F7770;
  v6[1] = a2;
  v6[2] = a2;
  v6[3] = v5;
  v11 = v6;
  (*(void (**)(WebCore::ResourceLoader *, char *, _QWORD **))(*(_QWORD *)a2 + 208))(a2, v3, &v11);
  v8 = v11;
  v11 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v10, v7);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore24ApplicationCacheResourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_30ApplicationCacheResourceLoader5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::URL,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::URL,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::URL,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore12ArchiveErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore12ArchiveErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

__n128 WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &),WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>> (*)(WTF::URL const&,WebCore::FragmentedSharedBuffer &)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, WTF::ASCIICaseInsensitiveHash *this)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  __n128 *v8;
  __n128 result;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::ASCIICaseInsensitiveHash::hash(this, this);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(a1 + 16 * v7));
  v8 = (__n128 *)(a1 + 16 * v7);
  v8->n128_u64[0] = 0;
  result = *(__n128 *)this;
  *(_QWORD *)this = 0;
  *v8 = result;
  return result;
}

unint64_t WTF::Vector<WebCore::ApplicationCacheHost::DeferredEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WebCore::ApplicationCacheHost::DeferredEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::ApplicationCacheHost::DeferredEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::ApplicationCacheHost::DeferredEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (unsigned int **)((char *)v7 + 16 * v8);
        v12 = (unsigned int **)v7;
        do
        {
          v13 = *v12;
          *v12 = 0;
          *(_QWORD *)v10 = v13;
          *((_QWORD *)v10 + 1) = v12[1];
          result = *v12;
          *v12 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
            else
              *result -= 2;
          }
          v12 += 2;
          v10 += 4;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::ApplicationCacheHost::DeferredEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int **v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((WTF::StringImpl *)v4 != a2)
  {
    v5 = (unsigned int **)(*(_QWORD *)result + 16 * (_QWORD)a2);
    v6 = 16 * v4 - 16 * (_QWORD)a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ApplicationCacheGroup *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ApplicationCacheGroup *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ApplicationCacheGroup *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ApplicationCacheGroup *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  WTF::StringImpl *v23;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v14 + 4);
          if (v17 < 0x100)
            v18 = WTF::StringImpl::hashSlowCase(v14);
          else
            v18 = v17 >> 8;
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v18 = ++v19 + v20;
          }
          while (*(_QWORD *)(v15 + 16 * v20));
          v21 = (_QWORD *)(v15 + 16 * v20);
          *v21 = 0;
          v22 = *(_OWORD *)v13;
          *v13 = 0;
          *(_OWORD *)v21 = v22;
          v23 = *v13;
          *v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v10);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,unsigned int,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::remove(uint64_t *result, _DWORD *a2)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;

  v2 = result;
  v3 = -1;
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v4 = *result;
  if (*result)
    v3 = *(_DWORD *)(v4 - 12) - 1;
  *(_DWORD *)(v4 - 12) = v3;
  v5 = *result;
  if (*result)
  {
    v6 = *(_DWORD *)(v5 - 12);
    v7 = *(unsigned int *)(v5 - 4);
    if (6 * v6 < v7 && v7 >= 9)
    {
      v9 = WTF::fastZeroedMalloc((WTF *)(8 * (v7 >> 1) + 16));
      v11 = 0;
      *v2 = v9 + 16;
      *(_DWORD *)(v9 + 12) = v7 >> 1;
      *(_DWORD *)(*v2 - 8) = (v7 >> 1) - 1;
      *(_DWORD *)(*v2 - 16) = 0;
      *(_DWORD *)(*v2 - 12) = v6;
      do
      {
        v12 = (int *)(v5 + 8 * v11);
        v13 = *v12;
        if ((*v12 + 1) >= 2)
        {
          v14 = *v2;
          if (*v2)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          do
          {
            v17 = v13 & v15;
            v13 = ++v16 + v17;
          }
          while (*(_DWORD *)(v14 + 8 * v17));
          *(_QWORD *)(v14 + 8 * v17) = *(_QWORD *)v12;
        }
        ++v11;
      }
      while (v11 != v7);
      return (uint64_t *)WTF::fastFree((WTF *)(v5 - 16), v10);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ApplicationCacheStorage::writeDataToUniqueFileInDirectory(WebCore::FragmentedSharedBuffer &,WTF::String const&,WTF::String&,WTF::StringView)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t a1)
{
  uint64_t result;

  result = WTF::FileSystemImpl::writeToFile();
  **(_QWORD **)(a1 + 8) += result;
  return result;
}

void WebCore::ArchiveResource::create(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X2>, _DWORD **a4@<X3>, _DWORD **a5@<X4>, WebCore::ResourceResponseBase *a6@<X5>, _DWORD **a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned int *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  void *v23;
  WTF::StringImpl *v24;
  CFTypeRef v25;
  unsigned int *v26;
  unsigned int *v27;
  __int128 v28;
  __int128 v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  __int16 v38;
  char v39;
  int64x2_t v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  char v47;
  __int16 v48;
  char v49;
  CFTypeRef cf;
  char v51;

  if (*(_QWORD *)a1)
  {
    if ((*((_BYTE *)a6 + 138) & 1) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)a1 + 48);
      v19 = *(unsigned int **)a2;
      if (*(_QWORD *)a2)
        *v19 += 2;
      v27 = v19;
      v28 = *(_OWORD *)(a2 + 8);
      v29 = *(_OWORD *)(a2 + 24);
      v20 = *a3;
      if (*a3)
        *v20 += 2;
      v30 = v20;
      v31 = v18;
      v21 = *a4;
      if (*a4)
        *v21 += 2;
      v32 = v21;
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 1;
      v38 = 0;
      v40 = vdupq_n_s64(0x7FF8000000000000uLL);
      v41 = v40;
      v42 = 0;
      v43 = 0;
      v45 = v40;
      v44 = 0x8000000000000000;
      v46 = 0x7FF8000000000000;
      v47 = 0;
      v48 = 0;
      v49 = 2;
      cf = 0;
      v51 = 0;
      v39 = 4;
      if ((*(_BYTE *)(a2 + 8) & 2) != 0)
      {
        WebCore::ResourceResponse::platformLazyInit((uint64_t)&v27, 1);
        v38 = 200;
        v39 &= ~1u;
      }
      v22 = WTF::fastMalloc((WTF *)0x168);
      v26 = *(unsigned int **)a1;
      *(_QWORD *)a1 = 0;
      *a8 = WebCore::ArchiveResource::ArchiveResource(v22, &v26, a2, a3, a4, a5, (WebCore::ResourceResponseBase *)&v27, a7);
      WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v26, v23);
      v25 = cf;
      cf = 0;
      if (v25)
        CFRelease(v25);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v27, v24);
    }
    else
    {
      v16 = WTF::fastMalloc((WTF *)0x168);
      v27 = *(unsigned int **)a1;
      *(_QWORD *)a1 = 0;
      *a8 = WebCore::ArchiveResource::ArchiveResource(v16, &v27, a2, a3, a4, a5, a6, a7);
      WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v27, v17);
    }
  }
  else
  {
    *a8 = 0;
  }
}

WTF::StringImpl *WebCore::ArchiveResource::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WebCore::ResourceResponseBase *a3@<X2>, uint64_t *a4@<X8>)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1);
  v11 = 0;
  v12 = 0;
  WebCore::ArchiveResource::create(a1, a2, (_DWORD **)a3 + 5, (_DWORD **)a3 + 7, (_DWORD **)&v12, a3, (_DWORD **)&v11, a4);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t *WebCore::ArchiveResource::saveToDisk@<X0>(unint64_t *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::SubstituteResource *v4;
  unint64_t v5;
  const WTF::String *v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  const WTF::String *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _QWORD *v24;

  if (!*(_QWORD *)a2
    || !*(_DWORD *)(*(_QWORD *)a2 + 4)
    || (v4 = (WebCore::SubstituteResource *)this, (v5 = this[43]) == 0)
    || !*(_DWORD *)(v5 + 4))
  {
    *(_BYTE *)a3 = 2;
    *(_DWORD *)(a3 + 8) = 1;
    return this;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)&v23, v6);
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v21, v7);
  v9 = v21;
  v21 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  this = (unint64_t *)WebCore::SubstituteResource::data(v4, v8);
  v10 = (uint64_t)this;
  v11 = atomic_load((unsigned int *)this);
  if (v11 == 1)
  {
    WebCore::FragmentedSharedBuffer::takeData((WTF *)this, &v21);
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v17 = this[6];
    if (v17)
    {
      if (HIDWORD(v17))
      {
        __break(0xC471u);
        return this;
      }
      v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)this[6]);
      LODWORD(v22) = v17;
      v21 = v18;
    }
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E3406E88;
    v19[1] = &v21;
    v24 = v19;
    WebCore::FragmentedSharedBuffer::forEachSegment(v10, &v24);
    v20 = v24;
    v24 = 0;
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  }
  v12 = WTF::FileSystemImpl::overwriteEntireFile();
  if (v12 < 0)
    goto LABEL_16;
  if (HIDWORD(v22) != v12)
  {
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v23, v13);
LABEL_16:
    v14 = 1;
    *(_BYTE *)a3 = 1;
    goto LABEL_17;
  }
  v14 = 0;
  v15 = v23;
  v23 = 0;
  *(_QWORD *)a3 = v15;
LABEL_17:
  *(_DWORD *)(a3 + 8) = v14;
  v16 = v21;
  if (v21)
  {
    v21 = 0;
    LODWORD(v22) = 0;
    WTF::fastFree(v16, v13);
  }
  this = (unint64_t *)v23;
  v23 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (unint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v13);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::ArchiveResourceCollection::addAllResources(WTF::StringImpl *this, WebCore::Archive *a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl ***v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _BYTE v17[24];
  WTF::StringImpl *v18;

  v3 = (uint64_t *)this;
  v4 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v4)
  {
    v5 = (WTF::StringImpl ***)*((_QWORD *)a2 + 3);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      v18 = (WTF::StringImpl *)v7;
      this = (WTF::StringImpl *)WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::ArchiveResource*>(v3, v7 + 2, (const WTF::StringImpl *)&v18, (uint64_t)v17);
      v6 -= 8;
    }
    while (v6);
  }
  v8 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 5);
    v10 = v3 + 1;
    v11 = 8 * v8;
    do
    {
      v12 = *v9;
      v13 = *(_QWORD *)(*v9 + 16);
      v14 = *(WTF::StringImpl **)(v13 + 336);
      if (v14 || (v14 = *(WTF::StringImpl **)(v13 + 16)) != 0)
        *(_DWORD *)v14 += 2;
      v18 = v14;
      v16 = v12;
      WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::ArchiveResource*>(v10, &v18, (const WTF::StringImpl *)&v16, (uint64_t)v17);
      this = v18;
      v18 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v15);
        else
          *(_DWORD *)this -= 2;
      }
      ++v9;
      v11 -= 8;
    }
    while (v11);
  }
  return this;
}

_DWORD *WebCore::ArchiveResourceCollection::archiveResourceForURL(WebCore::ArchiveResourceCollection *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  _DWORD *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int j;
  uint64_t v22;
  WTF *v23;
  WTF::StringImpl *v25;

  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_13;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v7 >> 8;
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
        goto LABEL_13;
      if ((WTF::equal(v11, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  v12 = *(_DWORD **)(v5 + 16 * v10 + 8);
  if (v12)
  {
    v13 = v12[2];
    v12[2] = v13 + 1;
    if (v13)
      v12[2] = v13;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
LABEL_13:
    if (WTF::URL::protocolIs())
    {
      v14 = *a2;
      if (*a2)
        *(_DWORD *)v14 += 2;
      v25 = v14;
      WTF::URL::setProtocol();
      v17 = *(_QWORD *)this;
      if (v17)
      {
        v18 = *(_DWORD *)(v17 - 8);
        v19 = *((_DWORD *)v25 + 4);
        if (v19 < 0x100)
          v20 = WTF::StringImpl::hashSlowCase(v25);
        else
          v20 = v19 >> 8;
        for (j = 0; ; v20 = j + v22)
        {
          v22 = v20 & v18;
          v23 = *(WTF **)(v17 + 16 * v22);
          if (v23 != (WTF *)-1)
          {
            if (!v23)
              goto LABEL_26;
            if ((WTF::equal(v23, v25, v16) & 1) != 0)
              break;
          }
          ++j;
        }
        v12 = *(_DWORD **)(v17 + 16 * v22 + 8);
      }
      else
      {
LABEL_26:
        v12 = 0;
      }
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v15);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
    else
    {
      return 0;
    }
  }
  return v12;
}

uint64_t WebCore::ArchiveResourceCollection::popSubframeArchive@<X0>(WebCore::ArchiveResourceCollection *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, _QWORD *a4@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t result;

  v6 = (WebCore::ArchiveResourceCollection *)((char *)this + 8);
  result = WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>>>,WTF::HashTableTraits>::take((uint64_t)a4, (WebCore::ArchiveResourceCollection *)((char *)this + 8), a2);
  if (!*a4)
  {
    *a4 = 0;
    return WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>>>,WTF::HashTableTraits>::take((uint64_t)a4, v6, a3);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::Archive,WTF::RawPtrTraits<WebCore::Archive>,WTF::DefaultRefDerefTraits<WebCore::Archive>>>,WTF::HashTableTraits>::take(uint64_t result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_27;
  v7 = *(_DWORD *)(v4 - 8);
  v8 = *((_DWORD *)*a3 + 4);
  v9 = v8 < 0x100 ? WTF::StringImpl::hashSlowCase(*a3) : v8 >> 8;
  for (i = 0; ; v9 = ++i + v11)
  {
    v11 = v9 & v7;
    result = *(_QWORD *)(v4 + 16 * v11);
    if (result != -1)
    {
      if (!result)
      {
        v12 = *(_QWORD *)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_27;
        v13 = *(unsigned int *)(v12 - 4);
        v14 = v12 + 16 * v13;
        goto LABEL_14;
      }
      result = WTF::equal((WTF *)result, *a3, (const WTF::StringImpl *)a3);
      if ((result & 1) != 0)
        break;
    }
  }
  v14 = v4 + 16 * v11;
  v12 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_15;
  v13 = *(unsigned int *)(v12 - 4);
LABEL_14:
  v12 += 16 * v13;
LABEL_15:
  if (v12 == v14)
  {
LABEL_27:
    *v3 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v14 + 8) = 0;
    *v3 = v15;
    v16 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2 || (v16 += 16 * *(unsigned int *)(v16 - 4), v16 != v14))
    {
      if (v16 != v14)
      {
        v17 = *(WTF::StringImpl **)v14;
        *(_QWORD *)v14 = -1;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, a2);
          else
            *(_DWORD *)v17 -= 2;
        }
        result = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 8) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          else
            --*(_DWORD *)(result + 8);
        }
        ++*(_DWORD *)(*(_QWORD *)a2 - 16);
        v18 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
          v19 = *(_DWORD *)(v18 - 12) - 1;
        else
          v19 = -1;
        *(_DWORD *)(v18 - 12) = v19;
        v20 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v21 = 6 * *(_DWORD *)(v20 - 12);
          v22 = *(_DWORD *)(v20 - 4);
          if (v21 < v22 && v22 >= 9)
            return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)a2, v22 >> 1, 0);
        }
      }
    }
  }
  return result;
}

void WebCore::LegacyWebArchive::createPropertyListRepresentation(__CFDictionary **a1, uint64_t a2, int a3)
{
  __CFDictionary *Mutable;
  void *v7;
  WTF *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  WebCore::SharedBuffer *v22;
  void *value;

  if (!a2)
  {
    Mutable = CFDictionaryCreateMutable(0, 3, 0, 0);
    CFDictionarySetValue(Mutable, CFSTR("WebResourceData"), 0);
    CFDictionarySetValue(Mutable, CFSTR("WebResourceURL"), 0);
    CFDictionarySetValue(Mutable, CFSTR("WebResourceMIMEType"), 0);
LABEL_27:
    *a1 = Mutable;
    return;
  }
  Mutable = CFDictionaryCreateMutable(0, 6, 0, MEMORY[0x1E0C9B3A0]);
  v8 = (WTF *)WebCore::SubstituteResource::data((WebCore::SubstituteResource *)a2, v7);
  WebCore::FragmentedSharedBuffer::makeContiguous(v8, &v22);
  WebCore::SharedBuffer::createCFData(v22, (WebCoreSharedBufferData **)&value);
  CFDictionarySetValue(Mutable, CFSTR("WebResourceData"), value);
  v10 = value;
  value = 0;
  if (v10)
    CFRelease(v10);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v22, v9);
  WTF::String::createCFString((WTF::String *)(a2 + 16));
  if (value)
  {
    CFDictionarySetValue(Mutable, CFSTR("WebResourceURL"), value);
    v11 = value;
    value = 0;
    if (v11)
      CFRelease(v11);
    v12 = *(_QWORD *)(a2 + 344);
    if (v12)
    {
      if (*(_DWORD *)(v12 + 4))
      {
        WTF::String::createCFString((WTF::String *)(a2 + 344));
        CFDictionarySetValue(Mutable, CFSTR("WebResourceFilePath"), value);
        v15 = value;
        value = 0;
        if (v15)
          CFRelease(v15);
      }
    }
    v13 = *(_QWORD *)(a2 + 336);
    if (v13)
    {
      v14 = *(_DWORD *)(v13 + 4) == 0;
      if (a3)
        goto LABEL_19;
    }
    else
    {
      v14 = 1;
      if (a3)
        goto LABEL_19;
    }
    if (v14)
    {
LABEL_21:
      v17 = *(_QWORD *)(a2 + 320);
      if (v17)
      {
        if (*(_DWORD *)(v17 + 4))
        {
          WTF::String::createCFString((WTF::String *)(a2 + 320));
          CFDictionarySetValue(Mutable, CFSTR("WebResourceMIMEType"), value);
          v20 = value;
          value = 0;
          if (v20)
            CFRelease(v20);
        }
      }
      v18 = *(_QWORD *)(a2 + 328);
      if (v18)
      {
        if (*(_DWORD *)(v18 + 4))
        {
          WTF::String::createCFString((WTF::String *)(a2 + 328));
          CFDictionarySetValue(Mutable, CFSTR("WebResourceTextEncodingName"), value);
          v21 = value;
          value = 0;
          if (v21)
            CFRelease(v21);
        }
      }
      if (!a3)
      {
        WebCore::LegacyWebArchive::createPropertyListRepresentation((WebCore::LegacyWebArchive *)(a2 + 56), &value);
        if (value)
        {
          CFDictionarySetValue(Mutable, CFSTR("WebResourceResponse"), value);
          v19 = value;
          value = 0;
          if (v19)
            CFRelease(v19);
        }
      }
      goto LABEL_27;
    }
LABEL_19:
    WTF::String::createCFString((WTF::String *)(a2 + 336));
    CFDictionarySetValue(Mutable, CFSTR("WebResourceFrameName"), value);
    v16 = value;
    value = 0;
    if (v16)
      CFRelease(v16);
    goto LABEL_21;
  }
  *a1 = 0;
  if (Mutable)
    CFRelease(Mutable);
}

void WebCore::LegacyWebArchive::createPropertyListRepresentation(WebCore::LegacyWebArchive *this@<X0>, __CFDictionary **a2@<X8>)
{
  __CFDictionary *Mutable;
  void *v6;
  __CFArray *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  WebCore::Archive *v12;
  __CFArray *v13;
  uint64_t v14;
  WebCore::LegacyWebArchive **v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *value;

  Mutable = CFDictionaryCreateMutable(0, 3, 0, MEMORY[0x1E0C9B3A0]);
  WebCore::LegacyWebArchive::createPropertyListRepresentation((__CFDictionary **)&value, *((_QWORD *)this + 2), 1);
  v6 = value;
  if (value)
  {
    CFDictionarySetValue(Mutable, CFSTR("WebMainResource"), value);
    v7 = CFArrayCreateMutable(0, *((unsigned int *)this + 9), MEMORY[0x1E0C9B378]);
    v8 = *((unsigned int *)this + 9);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)*((_QWORD *)this + 3);
      v10 = 8 * v8;
      do
      {
        WebCore::LegacyWebArchive::createPropertyListRepresentation((__CFDictionary **)&v18, *v9, 0);
        v11 = v18;
        if (v18)
        {
          CFArrayAppendValue(v7, v18);
          CFRelease(v11);
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    if (CFArrayGetCount(v7))
      CFDictionarySetValue(Mutable, CFSTR("WebSubresources"), v7);
    v13 = CFArrayCreateMutable(0, *((unsigned int *)this + 13), MEMORY[0x1E0C9B378]);
    v14 = *((unsigned int *)this + 13);
    if ((_DWORD)v14)
    {
      v15 = (WebCore::LegacyWebArchive **)*((_QWORD *)this + 5);
      v16 = 8 * v14;
      do
      {
        WebCore::LegacyWebArchive::createPropertyListRepresentation((uint64_t *)&v18, *v15, v12);
        v17 = v18;
        if (v18)
        {
          CFArrayAppendValue(v13, v18);
          CFRelease(v17);
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    if (CFArrayGetCount(v13))
      CFDictionarySetValue(Mutable, CFSTR("WebSubframeArchives"), v13);
    *a2 = Mutable;
    if (v13)
    {
      CFRelease(v13);
      if (!v7)
        goto LABEL_18;
    }
    else if (!v7)
    {
LABEL_18:
      CFRelease(v6);
      return;
    }
    CFRelease(v7);
    goto LABEL_18;
  }
  *a2 = 0;
  if (Mutable)
    CFRelease(Mutable);
}

void WebCore::LegacyWebArchive::createResource(WebCore::LegacyWebArchive *this, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v5;
  CFTypeID v6;
  const void *v7;
  const void *v8;
  CFTypeID v9;
  const void *v10;
  const void *v11;
  CFTypeID v12;
  const void *v13;
  const void *v14;
  CFTypeID v15;
  const void *v16;
  const void *v17;
  CFTypeID v18;
  WebCore::LegacyWebArchive *v19;
  WebCore::LegacyWebArchive *v20;
  CFTypeID v21;
  WTF::StringImpl *v22;
  const void *v23;
  CFTypeID v24;
  WTF::StringImpl *v25;
  CFTypeRef v26;
  CFTypeRef v27;
  const void *v28;
  const void *v29;
  const void *v30;
  CFIndex v31;
  WTF *v32;
  void *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF *v41;
  unsigned int v42;
  unsigned int v43;
  CFTypeRef v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  WTF *v52;
  CFTypeRef v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF *v61;
  WTF::StringImpl *v62[5];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68;
  char v69;
  __int16 v70;
  char v71;
  int64x2_t v72;
  int64x2_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int64x2_t v77;
  uint64_t v78;
  char v79;
  __int16 v80;
  char v81;
  CFTypeRef v82;
  char v83;
  _QWORD v84[5];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  char v90;
  char v91;
  __int16 v92;
  char v93;
  int64x2_t v94;
  int64x2_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int64x2_t v99;
  uint64_t v100;
  char v101;
  __int16 v102;
  char v103;
  CFTypeRef cf;
  char v105;

  if (!theDict)
    goto LABEL_17;
  Value = CFDictionaryGetValue(theDict, CFSTR("WebResourceData"));
  v5 = Value;
  if (Value)
  {
    v6 = CFGetTypeID(Value);
    if (v6 != CFDataGetTypeID())
      goto LABEL_17;
  }
  v7 = CFDictionaryGetValue(theDict, CFSTR("WebResourceFrameName"));
  v8 = v7;
  if (v7)
  {
    v9 = CFGetTypeID(v7);
    if (v9 != CFStringGetTypeID())
      goto LABEL_17;
  }
  v10 = CFDictionaryGetValue(theDict, CFSTR("WebResourceMIMEType"));
  v11 = v10;
  if (v10)
  {
    v12 = CFGetTypeID(v10);
    if (v12 != CFStringGetTypeID())
      goto LABEL_17;
  }
  if ((v13 = CFDictionaryGetValue(theDict, CFSTR("WebResourceURL")), (v14 = v13) != 0)
    && (v15 = CFGetTypeID(v13), v15 != CFStringGetTypeID())
    || (v16 = CFDictionaryGetValue(theDict, CFSTR("WebResourceTextEncodingName")), (v17 = v16) != 0)
    && (v18 = CFGetTypeID(v16), v18 != CFStringGetTypeID()))
  {
LABEL_17:
    *(_QWORD *)this = 0;
    return;
  }
  v84[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v84);
  v91 = 0;
  v92 = 0;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0;
  v94 = vdupq_n_s64(0x7FF8000000000000uLL);
  v95 = v94;
  v96 = 0;
  v97 = 0;
  v99 = v94;
  v98 = 0x8000000000000000;
  v100 = 0x7FF8000000000000;
  v101 &= 0xF0u;
  v102 &= 0xC000u;
  v103 = v103 & 0xF8 | 2;
  cf = 0;
  v105 = 0;
  v93 = v93 & 0xC0 | 5;
  v19 = (WebCore::LegacyWebArchive *)CFDictionaryGetValue(theDict, CFSTR("WebResourceResponse"));
  if (v19)
  {
    v20 = v19;
    v21 = CFGetTypeID(v19);
    if (v21 != CFDataGetTypeID())
      goto LABEL_24;
    v23 = CFDictionaryGetValue(theDict, CFSTR("WebResourceResponseVersion"));
    if (v23)
    {
      v24 = CFGetTypeID(v23);
      if (v24 != CFStringGetTypeID())
        goto LABEL_24;
      v62[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v62);
      v69 = 0;
      v70 = 0;
      v63 = 0u;
      v64 = 0u;
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0;
      v72 = vdupq_n_s64(0x7FF8000000000000uLL);
      v73 = v72;
      v74 = 0;
      v75 = 0;
      v77 = v72;
      v76 = 0x8000000000000000;
      v78 = 0x7FF8000000000000;
      v79 &= 0xF0u;
      v80 &= 0xC000u;
      v81 = v81 & 0xF8 | 2;
      v82 = 0;
      v83 = 0;
      v71 = v71 & 0xC0 | 5;
    }
    else
    {
      WebCore::LegacyWebArchive::createResourceResponseFromMacArchivedData(v20, (uint64_t)v62);
    }
    WebCore::ResourceResponseBase::operator=((uint64_t)v84, (uint64_t *)v62);
    v26 = v82;
    v82 = 0;
    v27 = cf;
    cf = v26;
    if (v27)
    {
      CFRelease(v27);
      v54 = v82;
      v105 = v83;
      v82 = 0;
      if (v54)
        CFRelease(v54);
    }
    else
    {
      v105 = v83;
      v82 = 0;
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v62, v25);
  }
  v28 = CFDictionaryGetValue(theDict, CFSTR("WebResourceFilePath"));
  v29 = WTF::dynamic_cf_cast<__CFString const*>(v28);
  v30 = v29;
  if (!v28 || v29)
  {
    v31 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = v31 + 24;
    *(_QWORD *)(v31 + 16) = 1;
    *(_BYTE *)(v31 + 40) = 0;
    *(_QWORD *)(v31 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v31, v5);
    v62[0] = (WTF::StringImpl *)v31;
    v32 = (WTF *)WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer((uint64_t)v32, (uint64_t *)v62);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)v62, v33);
    v60 = 0;
    v61 = v32;
    MEMORY[0x19AEA5508](&v59, v14);
    MEMORY[0x19AEA52D4](v62, &v59, 0);
    MEMORY[0x19AEA5508](&v58, v11);
    MEMORY[0x19AEA5508](&v57, v17);
    MEMORY[0x19AEA5508](&v56, v8);
    MEMORY[0x19AEA5508](&v55, v30);
    WebCore::ArchiveResource::create((uint64_t)&v61, (uint64_t)v62, (_DWORD **)&v58, (_DWORD **)&v57, (_DWORD **)&v56, (WebCore::ResourceResponseBase *)v84, (_DWORD **)&v55, (uint64_t *)this);
    v35 = v55;
    v55 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = v56;
    v56 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v34);
      else
        *(_DWORD *)v36 -= 2;
    }
    v37 = v57;
    v57 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v34);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = v58;
    v58 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v34);
      else
        *(_DWORD *)v38 -= 2;
    }
    v39 = v62[0];
    v62[0] = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v34);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = v59;
    v59 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v34);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = v61;
    v61 = 0;
    if (v41)
    {
      do
      {
        v42 = __ldaxr((unsigned int *)v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, (unsigned int *)v41));
      if (!v43)
      {
        atomic_store(1u, (unsigned int *)v41);
        v45 = *((unsigned int *)v41 + 5);
        if ((_DWORD)v45)
        {
          v46 = *((_QWORD *)v41 + 1);
          v47 = v46 + 16 * v45;
          do
          {
            v48 = *(unsigned int **)(v46 + 8);
            *(_QWORD *)(v46 + 8) = 0;
            if (v48)
            {
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50)
              {
                atomic_store(1u, v48);
                v51 = v48[6];
                if ((_DWORD)v51 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v51])(v62, v48 + 2);
                v48[6] = -1;
                WTF::fastFree((WTF *)v48, v34);
              }
            }
            v46 += 16;
          }
          while (v46 != v47);
        }
        v52 = (WTF *)*((_QWORD *)v41 + 1);
        if ((WTF *)((char *)v41 + 24) != v52 && v52 != 0)
        {
          *((_QWORD *)v41 + 1) = 0;
          *((_DWORD *)v41 + 4) = 0;
          WTF::fastFree(v52, v34);
        }
        WTF::fastFree(v41, v34);
      }
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v60, v34);
    goto LABEL_47;
  }
LABEL_24:
  *(_QWORD *)this = 0;
LABEL_47:
  v44 = cf;
  cf = 0;
  if (v44)
    CFRelease(v44);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v84, v22);
}

double WebCore::LegacyWebArchive::create@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  double result;

  v3 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v3 + 8) = 1;
  result = 0.0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = off_1E33F8428;
  *a1 = v3;
  return result;
}

char *WebCore::LegacyWebArchive::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char **v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char **v26;
  char *v27;

  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 48) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_QWORD *)v8 = off_1E33F8428;
  *a4 = v8;
  v9 = *a1;
  *a1 = 0;
  result = *(char **)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v9;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  v11 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)a2;
    v13 = 8 * v11;
    do
    {
      v14 = *a4;
      v15 = (char **)(*a4 + 24);
      v16 = *(unsigned int *)(*a4 + 36);
      if ((_DWORD)v16 == *(_DWORD *)(*a4 + 32))
      {
        result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, v12);
        v16 = *(unsigned int *)(v14 + 36);
        v17 = (char *)(*(_QWORD *)(v14 + 24) + 8 * v16);
      }
      else
      {
        v17 = &(*v15)[8 * v16];
        result = (char *)v12;
      }
      v18 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v17 = v18;
      *(_DWORD *)(v14 + 36) = v16 + 1;
      v12 += 8;
      v13 -= 8;
    }
    while (v13);
  }
  v19 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v19)
  {
    v20 = *(char ***)a3;
    v21 = *a4;
    v22 = 8 * v19;
    do
    {
      v23 = *v20;
      *v20 = 0;
      v27 = v23;
      v24 = *(unsigned int *)(v21 + 52);
      if ((_DWORD)v24 == *(_DWORD *)(v21 + 48))
      {
        v25 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v21 + 40), v24 + 1, (unint64_t)&v27);
        v24 = *(unsigned int *)(v21 + 52);
        v26 = (char **)(*(_QWORD *)(v21 + 40) + 8 * v24);
        v23 = *(char **)v25;
      }
      else
      {
        v26 = (char **)(*(_QWORD *)(v21 + 40) + 8 * v24);
        v25 = (char *)&v27;
      }
      *(_QWORD *)v25 = 0;
      *v26 = v23;
      *(_DWORD *)(v21 + 52) = v24 + 1;
      result = v27;
      v27 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
      ++v20;
      v22 -= 8;
    }
    while (v22);
  }
  return result;
}

WTF::StringImpl *WebCore::LegacyWebArchive::create@<X0>(WebCore::LegacyWebArchive *this@<X0>, WebCore::LegacyWebArchive **a2@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  v7 = 0;
  WTF::URL::invalidate((WTF::URL *)&v7);
  WebCore::LegacyWebArchive::create(this, a2);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::LegacyWebArchive::create(const WTF::URL *a1@<X1>, WebCore::LegacyWebArchive **a2@<X8>)
{
  WebCore::LegacyWebArchive *v6;
  void *v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  CFTypeID v10;
  int v11;
  WebCore::LegacyWebArchive *v12;
  CFDataRef v13;
  CFTypeRef cf;
  CFDataRef data;

  v6 = (WebCore::LegacyWebArchive *)WTF::fastMalloc((WTF *)0x38);
  *((_DWORD *)v6 + 2) = 1;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_QWORD *)v6 + 6) = 0;
  *(_QWORD *)v6 = off_1E33F8428;
  WebCore::FragmentedSharedBuffer::makeContiguous(a1, &cf);
  WebCore::SharedBuffer::createCFData((WebCore::SharedBuffer *)cf, (WebCoreSharedBufferData **)&data);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&cf, v7);
  if (!data)
  {
    *a2 = 0;
LABEL_19:
    if (*((_DWORD *)v6 + 2) == 1)
      (*(void (**)(WebCore::LegacyWebArchive *))(*(_QWORD *)v6 + 8))(v6);
    else
      --*((_DWORD *)v6 + 2);
    return;
  }
  cf = 0;
  v8 = (const __CFDictionary *)CFPropertyListCreateWithData(0, data, 0, 0, (CFErrorRef *)&cf);
  if (v8)
  {
    v9 = v8;
    v10 = CFGetTypeID(v8);
    if (v10 == CFDictionaryGetTypeID())
    {
      v11 = WebCore::LegacyWebArchive::extract(v6, v9);
      if (v11)
        v12 = v6;
      else
        v12 = 0;
      if (v11)
        v6 = 0;
    }
    else
    {
      v12 = 0;
    }
    *a2 = v12;
    CFRelease(v9);
  }
  else
  {
    if (cf)
      CFRelease(cf);
    *a2 = 0;
  }
  v13 = data;
  data = 0;
  if (v13)
    CFRelease(v13);
  if (v6)
    goto LABEL_19;
}

uint64_t WebCore::LegacyWebArchive::extract(WebCore::LegacyWebArchive *this, const __CFDictionary *a2)
{
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  CFTypeID v6;
  _DWORD *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFTypeID v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  const void *ValueAtIndex;
  CFTypeID v15;
  WebCore::LegacyWebArchive *v16;
  uint64_t v17;
  char *v18;
  WebCore::LegacyWebArchive **v19;
  WebCore::LegacyWebArchive *v20;
  const __CFArray *v21;
  const __CFArray *v22;
  CFTypeID v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex i;
  const void *v27;
  CFTypeID v28;
  BOOL v29;
  WebCore::LegacyWebArchive *v30;
  uint64_t v31;
  char *v32;
  WebCore::LegacyWebArchive **v33;
  WebCore::LegacyWebArchive *v34;
  WebCore::LegacyWebArchive *v36;
  WebCore::LegacyWebArchive *v37;
  uint64_t v38;

  if (!a2)
    return 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("WebMainResource"));
  v5 = Value;
  if (!Value)
    return (uint64_t)v5;
  v6 = CFGetTypeID(Value);
  if (v6 != CFDictionaryGetTypeID())
    return 0;
  WebCore::LegacyWebArchive::createResource((WebCore::LegacyWebArchive *)&v38, v5);
  if (!v38)
    return 0;
  if (!*(_QWORD *)(v38 + 320))
  {
    if (*(_DWORD *)(v38 + 8) != 1)
    {
      v5 = 0;
      --*(_DWORD *)(v38 + 8);
      return (uint64_t)v5;
    }
    (*(void (**)(void))(*(_QWORD *)v38 + 8))();
    return 0;
  }
  v7 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v38;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("WebSubresources"));
  if (v8)
  {
    v9 = v8;
    v10 = CFGetTypeID(v8);
    if (v10 != CFArrayGetTypeID())
      return 0;
    Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      v12 = Count;
      v13 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v9, v13);
        v15 = CFGetTypeID(ValueAtIndex);
        if (v15 != CFDictionaryGetTypeID())
          return 0;
        WebCore::LegacyWebArchive::createResource((WebCore::LegacyWebArchive *)&v37, (CFDictionaryRef)ValueAtIndex);
        v16 = v37;
        if (v37)
        {
          v36 = v37;
          v37 = 0;
          v17 = *((unsigned int *)this + 9);
          if ((_DWORD)v17 == *((_DWORD *)this + 8))
          {
            v18 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 3, v17 + 1, (unint64_t)&v36);
            v17 = *((unsigned int *)this + 9);
            v19 = (WebCore::LegacyWebArchive **)(*((_QWORD *)this + 3) + 8 * v17);
            v16 = *(WebCore::LegacyWebArchive **)v18;
          }
          else
          {
            v19 = (WebCore::LegacyWebArchive **)(*((_QWORD *)this + 3) + 8 * v17);
            v18 = (char *)&v36;
          }
          *(_QWORD *)v18 = 0;
          *v19 = v16;
          *((_DWORD *)this + 9) = v17 + 1;
          v20 = v36;
          v36 = 0;
          if (v20)
          {
            if (*((_DWORD *)v20 + 2) == 1)
              (*(void (**)(WebCore::LegacyWebArchive *))(*(_QWORD *)v20 + 8))(v20);
            else
              --*((_DWORD *)v20 + 2);
          }
        }
      }
      while (v12 != ++v13);
    }
  }
  v21 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("WebSubframeArchives"));
  if (!v21)
    return 1;
  v22 = v21;
  v23 = CFGetTypeID(v21);
  if (v23 != CFArrayGetTypeID())
    return 0;
  v24 = CFArrayGetCount(v22);
  if (v24 < 1)
    return 1;
  v25 = v24;
  for (i = 0; i != v25; ++i)
  {
    v27 = CFArrayGetValueAtIndex(v22, i);
    v28 = CFGetTypeID(v27);
    v29 = v28 == CFDictionaryGetTypeID();
    v5 = (const __CFDictionary *)v29;
    if (!v29)
      break;
    v30 = (WebCore::LegacyWebArchive *)WTF::fastMalloc((WTF *)0x38);
    *((_DWORD *)v30 + 2) = 1;
    *((_OWORD *)v30 + 1) = 0u;
    *((_OWORD *)v30 + 2) = 0u;
    *((_QWORD *)v30 + 6) = 0;
    *(_QWORD *)v30 = off_1E33F8428;
    if (WebCore::LegacyWebArchive::extract(v30, (const __CFDictionary *)v27))
    {
      v37 = v30;
      v31 = *((unsigned int *)this + 13);
      if ((_DWORD)v31 == *((_DWORD *)this + 12))
      {
        v32 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 5, v31 + 1, (unint64_t)&v37);
        v31 = *((unsigned int *)this + 13);
        v33 = (WebCore::LegacyWebArchive **)(*((_QWORD *)this + 5) + 8 * v31);
        v30 = *(WebCore::LegacyWebArchive **)v32;
      }
      else
      {
        v33 = (WebCore::LegacyWebArchive **)(*((_QWORD *)this + 5) + 8 * v31);
        v32 = (char *)&v37;
      }
      *(_QWORD *)v32 = 0;
      *v33 = v30;
      *((_DWORD *)this + 13) = v31 + 1;
      v34 = v37;
      v37 = 0;
      if (v34)
      {
        if (*((_DWORD *)v34 + 2) == 1)
          (*(void (**)(WebCore::LegacyWebArchive *))(*(_QWORD *)v34 + 8))(v34);
        else
          --*((_DWORD *)v34 + 2);
      }
    }
    else if (*((_DWORD *)v30 + 2) == 1)
    {
      (*(void (**)(WebCore::LegacyWebArchive *))(*(_QWORD *)v30 + 8))(v30);
    }
    else
    {
      --*((_DWORD *)v30 + 2);
    }
  }
  return (uint64_t)v5;
}

void WebCore::LegacyWebArchive::rawDataRepresentation(WebCore::LegacyWebArchive *this@<X0>, _QWORD *a2@<X8>)
{
  __CFDictionary *v3;
  __CFWriteStream *v4;
  CFTypeRef v5;
  __CFDictionary *v6;

  WebCore::LegacyWebArchive::createPropertyListRepresentation(this, &v6);
  v3 = v6;
  if (v6)
  {
    v4 = CFWriteStreamCreateWithAllocatedBuffers(0, 0);
    CFWriteStreamOpen(v4);
    CFPropertyListWrite(v3, v4, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    v5 = CFWriteStreamCopyProperty(v4, (CFStreamPropertyKey)*MEMORY[0x1E0C9B2A8]);
    CFWriteStreamClose(v4);
    *a2 = v5;
    if (v4)
      CFRelease(v4);
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t WebCore::LegacyWebArchive::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  WTF *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  WTF::StringImpl *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  WTF *v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF *v69;
  uint64_t v70;
  WTF *v71;
  int v72;
  unsigned int v73;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    result = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(result + 8) = 1;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)result = off_1E33F8428;
    *a5 = result;
    return result;
  }
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v71, a3);
  v11 = *(_QWORD *)(v7 + 24);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 112);
      if (*(_BYTE *)(v13 + 245))
      {
        if (!*(_BYTE *)(v13 + 244))
          goto LABEL_28;
      }
      else if ((*(_QWORD *)(v13 + 688) & 0x10000000000000) == 0)
      {
        goto LABEL_28;
      }
      WTF::AtomStringImpl::add();
      v15 = v65;
      v69 = 0;
      v70 = 0;
      v68 = v65;
      if (v73 == v72)
      {
        v16 = WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v71, v73 + 1, (unint64_t)&v68);
        v17 = (char *)v71 + 24 * v73;
        v18 = *(_QWORD *)v16;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *(_QWORD *)v17 = v18;
        v19 = *((_QWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v17 + 1) = v19;
        LODWORD(v19) = *((_DWORD *)v16 + 4);
        *((_DWORD *)v16 + 4) = 0;
        *((_DWORD *)v17 + 4) = v19;
        LODWORD(v19) = *((_DWORD *)v16 + 5);
        *((_DWORD *)v16 + 5) = 0;
        *((_DWORD *)v17 + 5) = v19;
      }
      else
      {
        v21 = (char *)v71 + 24 * v73;
        v68 = 0;
        *((_QWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 2) = 0;
        *(_QWORD *)v21 = v15;
        v22 = v69;
        v69 = 0;
        *((_QWORD *)v21 + 1) = v22;
        LODWORD(v22) = v70;
        LODWORD(v70) = 0;
        *((_DWORD *)v21 + 4) = (_DWORD)v22;
        LODWORD(v22) = HIDWORD(v70);
        HIDWORD(v70) = 0;
        *((_DWORD *)v21 + 5) = (_DWORD)v22;
      }
      ++v73;
      if (HIDWORD(v70))
      {
        v23 = 16 * HIDWORD(v70);
        v24 = (WTF::StringImpl **)((char *)v69 + 8);
        do
        {
          v25 = *v24;
          *v24 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v14);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = *(v24 - 1);
          *(v24 - 1) = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v14);
            else
              *(_DWORD *)v26 -= 2;
          }
          v24 += 2;
          v23 -= 16;
        }
        while (v23);
      }
      v27 = v69;
      if (v69)
      {
        v69 = 0;
        LODWORD(v70) = 0;
        WTF::fastFree(v27, v14);
      }
      v28 = v68;
      v68 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v14);
        else
          *(_DWORD *)v28 -= 2;
      }
    }
  }
LABEL_28:
  if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    WTF::AtomStringImpl::add();
    v44 = v65;
    v69 = 0;
    v70 = 0;
    v68 = v65;
    if (v73 == v72)
    {
      v45 = WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v71, v73 + 1, (unint64_t)&v68);
      v46 = (char *)v71 + 24 * v73;
      v47 = *(_QWORD *)v45;
      *(_QWORD *)v45 = 0;
      *((_QWORD *)v46 + 1) = 0;
      *((_QWORD *)v46 + 2) = 0;
      *(_QWORD *)v46 = v47;
      v48 = *((_QWORD *)v45 + 1);
      *((_QWORD *)v45 + 1) = 0;
      *((_QWORD *)v46 + 1) = v48;
      LODWORD(v48) = *((_DWORD *)v45 + 4);
      *((_DWORD *)v45 + 4) = 0;
      *((_DWORD *)v46 + 4) = v48;
      LODWORD(v48) = *((_DWORD *)v45 + 5);
      *((_DWORD *)v45 + 5) = 0;
      *((_DWORD *)v46 + 5) = v48;
    }
    else
    {
      v49 = (char *)v71 + 24 * v73;
      v68 = 0;
      *((_QWORD *)v49 + 1) = 0;
      *((_QWORD *)v49 + 2) = 0;
      *(_QWORD *)v49 = v44;
      v50 = v69;
      v69 = 0;
      *((_QWORD *)v49 + 1) = v50;
      LODWORD(v50) = v70;
      LODWORD(v70) = 0;
      *((_DWORD *)v49 + 4) = (_DWORD)v50;
      LODWORD(v50) = HIDWORD(v70);
      HIDWORD(v70) = 0;
      *((_DWORD *)v49 + 5) = (_DWORD)v50;
    }
    ++v73;
    if (HIDWORD(v70))
    {
      v51 = 16 * HIDWORD(v70);
      v52 = (WTF::StringImpl **)((char *)v69 + 8);
      do
      {
        v53 = *v52;
        *v52 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, v43);
          else
            *(_DWORD *)v53 -= 2;
        }
        v54 = *(v52 - 1);
        *(v52 - 1) = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v43);
          else
            *(_DWORD *)v54 -= 2;
        }
        v52 += 2;
        v51 -= 16;
      }
      while (v51);
    }
    v55 = v69;
    if (v69)
    {
      v69 = 0;
      LODWORD(v70) = 0;
      WTF::fastFree(v55, v43);
    }
    v56 = v68;
    v68 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v43);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v68 = 0;
  v69 = 0;
  v65 = 0;
  v66 = 0;
  WebCore::serializeFragment(a1, 0, (uint64_t)&v68, 0, 0, 2, (uint64_t *)&v65, (uint64_t *)&v71, &v67);
  if (HIDWORD(v66))
  {
    v61 = v65;
    v62 = 8 * HIDWORD(v66);
    do
    {
      v63 = *(_QWORD *)v61;
      *(_QWORD *)v61 = 0;
      if (v63)
      {
        if (*(_DWORD *)(v63 + 24) == 2)
        {
          if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v63, v29);
        }
        else
        {
          *(_DWORD *)(v63 + 24) -= 2;
        }
      }
      v61 = (WTF::StringImpl *)((char *)v61 + 8);
      v62 -= 8;
    }
    while (v62);
  }
  v30 = v65;
  if (v65)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree(v30, v29);
  }
  if ((*(unsigned __int16 *)(a1 + 28) >> 12) - 11 > 0xFFFFFFFD)
    goto LABEL_54;
  result = (uint64_t)WebCore::documentTypeString(*(unsigned int **)(*(_QWORD *)(a1 + 40) + 8), &v64);
  v31 = v67;
  if (v67)
    *(_DWORD *)v67 += 2;
  if (!v64)
  {
    v32 = 0;
    if (v31)
      goto LABEL_37;
LABEL_93:
    v33 = 0;
    goto LABEL_38;
  }
  v32 = *((_DWORD *)v64 + 1);
  if (!v31)
    goto LABEL_93;
LABEL_37:
  v33 = *((_DWORD *)v31 + 1);
LABEL_38:
  if ((v33 | v32) < 0 || (result = (v32 + v33), __OFADD__(v32, v33)))
  {
    v65 = 0;
    goto LABEL_118;
  }
  if (v64)
  {
    v34 = *((_DWORD *)v64 + 4);
    v35 = (v34 >> 2) & 1;
    if (v31 && (v34 & 4) != 0)
      goto LABEL_43;
  }
  else
  {
    if (v31)
    {
LABEL_43:
      v35 = (*((unsigned __int8 *)v31 + 16) >> 2) & 1;
      goto LABEL_44;
    }
    v35 = 1;
  }
LABEL_44:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v35, (uint64_t)v64, (uint64_t)v31, &v65);
  v37 = v65;
  if (!v65)
  {
LABEL_118:
    __break(0xC471u);
    return result;
  }
  v65 = 0;
  v38 = v67;
  v67 = v37;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::destroy(v38, v36);
      v57 = v65;
      v65 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v36);
        else
          *(_DWORD *)v57 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v38 -= 2;
      v65 = 0;
    }
  }
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v36);
    else
      *(_DWORD *)v31 -= 2;
  }
  v39 = v64;
  v64 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v36);
    else
      *(_DWORD *)v39 -= 2;
  }
LABEL_54:
  WebCore::LegacyWebArchive::create(a5, &v67, v7, &v68, a2, &v71, a4);
  v41 = v67;
  v67 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  if (HIDWORD(v69))
  {
    v58 = v68;
    v59 = 8 * HIDWORD(v69);
    do
    {
      v60 = *(_QWORD *)v58;
      *(_QWORD *)v58 = 0;
      if (v60)
      {
        if (*(_DWORD *)(v60 + 24) == 2)
        {
          if ((*(_WORD *)(v60 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v60, v40);
        }
        else
        {
          *(_DWORD *)(v60 + 24) -= 2;
        }
      }
      v58 = (WTF::StringImpl *)((char *)v58 + 8);
      v59 -= 8;
    }
    while (v59);
  }
  v42 = v68;
  if (v68)
  {
    v68 = 0;
    LODWORD(v69) = 0;
    WTF::fastFree(v42, v40);
  }
  if (v73)
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v71, (WTF *)((char *)v71 + 24 * v73));
  result = (uint64_t)v71;
  if (v71)
  {
    v71 = 0;
    v72 = 0;
    return WTF::fastFree((WTF *)result, v40);
  }
  return result;
}

WTF::StringImpl *WebCore::LegacyWebArchive::create(_QWORD *a1, uint64_t *a2, uint64_t a3, unsigned int *a4, _QWORD *a5, uint64_t a6, WTF::StringImpl **a7)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  WTF *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int j;
  int v45;
  WTF *v46;
  const WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  __int128 v50;
  WTF::StringImpl *v51;
  __int8 v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WebCore::SecurityOrigin *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  char v62;
  WTF::StringImpl *v63;
  WTF *v64;
  uint64_t isMainThread;
  uint64_t v66;
  uint64_t *v67;
  void *v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  WebCore::ResourceResponseBase *v72;
  unint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unsigned int v76;
  unsigned int v77;
  const WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl **v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  char *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  WTF *v101;
  int v103;
  WTF *v104;
  WTF *v105;
  WTF::StringImpl *v106;
  unsigned int *v107;
  unsigned int v108;
  WTF::StringImpl **v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  __int128 v112;
  WTF::FileSystemImpl *v113;
  _DWORD *v114;
  WTF::StringImpl *v115;
  _QWORD *v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  int i;
  unsigned int v121;
  WTF **v122;
  WTF *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF *v126;
  WTF::StringImpl *v127;
  int v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  unsigned int v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  char *v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  _DWORD *v139;
  WTF::StringImpl *v140;
  unsigned int v141;
  unsigned int v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  _DWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  WTF *v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  WTF::StringImpl *v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t *v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  WebCore::Document *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl **v165;
  WTF::StringImpl **v166;
  unsigned int *v167;
  unsigned int v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  CFTypeRef v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  unsigned int v174;
  unsigned int v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  char *v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  uint64_t v183;
  unsigned int **v184;
  WTF *v185;
  unsigned int *v186;
  unsigned int v187;
  unsigned int v188;
  uint64_t v189;
  WTF *v190;
  uint64_t v192;
  WTF *v193;
  unsigned int *v194;
  unsigned int v195;
  WebCore::StyleSheetList *v196;
  WTF::StringImpl *v197;
  const WTF::StringImpl *v198;
  uint64_t v199;
  uint64_t v200;
  WTF::StringImpl *v201;
  const WTF::StringImpl *v202;
  uint64_t v203;
  int v204;
  int v205;
  int v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unsigned int v210;
  _DWORD *v211;
  int v212;
  _DWORD *v213;
  _DWORD *v214;
  uint64_t v215;
  _DWORD *v216;
  _DWORD *v217;
  uint64_t v218;
  _DWORD *v219;
  _DWORD *v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  int v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  WTF::StringImpl *v228;
  __int128 v229;
  WTF::StringImpl *v230;
  int v231;
  _DWORD *v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unsigned int v236;
  uint64_t v237;
  _DWORD *v238;
  _QWORD *v239;
  int v240;
  _DWORD *v241;
  WTF::StringImpl *v242;
  int v243;
  int v244;
  uint64_t v245;
  unint64_t v246;
  unsigned int v247;
  unint64_t v248;
  uint64_t v249;
  const WTF::String *v250;
  const WTF::StringImpl *v251;
  const WTF::StringImpl *v252;
  WTF::StringImpl **v253;
  WTF::StringImpl **v254;
  WTF::StringImpl **v255;
  WTF::StringImpl *v256;
  _QWORD *v257;
  _DWORD *v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  const WTF::StringImpl *v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  int v264;
  WTF::StringImpl **v265;
  int v266;
  WTF::StringImpl *v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unsigned int v271;
  WTF::StringImpl **v272;
  WTF::StringImpl *v273;
  WTF::StringImpl **v274;
  int v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  int v278;
  int v279;
  uint64_t v280;
  unint64_t v281;
  unsigned int v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  _DWORD *v285;
  int v286;
  uint64_t v287;
  _DWORD **v288;
  _DWORD *v289;
  WTF::StringImpl **v290;
  WTF::StringImpl **v291;
  WTF::StringImpl **v292;
  WTF::StringImpl **v293;
  WTF::StringImpl *v294;
  uint64_t v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  WTF::StringImpl *v301;
  WTF::StringImpl *v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  uint64_t v305;
  uint64_t v306;
  WTF::StringImpl **v307;
  uint64_t v308;
  WTF::StringImpl *v309;
  uint64_t v310;
  char *v311;
  WTF::StringImpl *v312;
  uint64_t v313;
  _DWORD *v314;
  WTF::StringImpl *v315;
  uint64_t v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  int v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;
  WTF::StringImpl *v323;
  CFTypeRef v324;
  WTF::StringImpl *v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  WTF::StringImpl *v329;
  unsigned int v330;
  unsigned int v331;
  WTF::StringImpl *v332;
  unsigned int v333;
  unsigned int v334;
  WTF::StringImpl *v335;
  uint64_t v336;
  char *v337;
  WTF::StringImpl *v338;
  uint64_t v339;
  WTF::StringImpl *v340;
  WTF::StringImpl *v341;
  WTF::StringImpl *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int *v346;
  unsigned int v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int *v353;
  unsigned int v354;
  unsigned int v355;
  uint64_t v356;
  WTF *v357;
  WTF *v359;
  WTF::StringImpl **v361;
  uint64_t v362;
  WebCore::StyleSheetList *v363;
  unsigned int v364;
  unsigned int v365;
  unint64_t v366;
  double v367;
  double v368;
  double v369;
  WTF::StringImpl *v370;
  WTF::StringImpl *v371;
  WTF::StringImpl *v372;
  char v373;
  uint64_t v374;
  char v375;
  WTF::StringImpl *v376;
  int v377;
  int v378;
  uint64_t v379;
  unsigned int v380;
  int v381;
  WTF::StringImpl *v382;
  uint64_t v383;
  WTF::StringImpl *v384;
  WTF::StringImpl *v385;
  WTF::StringImpl *v386;
  WTF::StringImpl *v387;
  WTF::StringImpl *v388;
  WTF::StringImpl **v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  uint64_t v393;
  BOOL v394;
  _QWORD *v395;
  WTF::StringImpl *v396;
  WTF::StringImpl *v397;
  WTF::StringImpl *v398;
  WTF::StringImpl *v399;
  WTF::StringImpl *v400;
  WTF::StringImpl *v401;
  CFTypeRef v402;
  WTF::StringImpl *v403;
  WTF::StringImpl *v404;
  WTF::StringImpl *v405;
  WTF::StringImpl *v406;
  unsigned int v407;
  unsigned int v408;
  WTF::StringImpl *v409;
  unsigned int v410;
  unsigned int v411;
  WTF::StringImpl *v412;
  WTF::StringImpl *v413;
  WTF::StringImpl *v414;
  WTF::StringImpl *v415;
  WTF::StringImpl *v416;
  _QWORD *v417;
  WTF::StringImpl *v418;
  uint64_t v419;
  _DWORD *v420;
  WTF::StringImpl *v421;
  uint64_t v422;
  _DWORD *v423;
  WTF::StringImpl *result;
  uint64_t v425;
  _DWORD *v426;
  _DWORD *v427;
  WTF::StringImpl *v428;
  unsigned int v429;
  _DWORD *v430;
  _DWORD *v431;
  WTF::StringImpl *v432;
  uint64_t v433;
  WTF::StringImpl *v434;
  WTF::StringImpl *v435;
  uint64_t v436;
  WTF::StringImpl *v437;
  int v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unsigned int v443;
  int v444;
  unsigned int v445;
  uint64_t v446;
  _QWORD *v447;
  _DWORD *v448;
  WTF::StringImpl *v449;
  WTF::StringImpl *v450;
  WTF::StringImpl *v451;
  WTF::StringImpl *v452;
  WTF::StringImpl **v453;
  WTF::StringImpl *v454;
  WTF *v455;
  void *v456;
  WTF *v457;
  void *v458;
  uint64_t v459;
  WTF::StringImpl **v460;
  WTF::StringImpl *v461;
  WTF::StringImpl *v462;
  WTF::StringImpl *v463;
  _BYTE *v464;
  size_t v465;
  WTF::StringImpl *v466;
  uint64_t v467;
  WTF::StringImpl *v468;
  WTF::StringImpl *v469;
  WTF::StringImpl *v470;
  uint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unsigned int *v476;
  unsigned int v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t v480;
  _QWORD *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unsigned int *v485;
  unsigned int v486;
  unsigned int v487;
  uint64_t v488;
  WTF *v489;
  WTF *v491;
  WTF::StringImpl *v493;
  uint64_t v494;
  WTF::StringImpl *v495;
  WTF::StringImpl *v496;
  WTF::StringImpl *v497;
  uint64_t v498;
  WTF::StringImpl **v499;
  WTF::StringImpl *v500;
  WTF::StringImpl *v501;
  uint64_t v502;
  WTF::StringImpl *v503;
  _DWORD *v504;
  WTF::StringImpl *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unsigned int *v509;
  unsigned int v510;
  unsigned int v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unsigned int *v516;
  unsigned int v517;
  unsigned int v518;
  uint64_t v519;
  WTF *v520;
  WTF *v522;
  WebCore::Editor *v524;
  WebCore::Editor *v525;
  uint64_t v526;
  _BYTE *v527;
  _BYTE *v528;
  unsigned __int128 v529;
  char v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  _DWORD **v535;
  WTF *v536;
  WTF *v537;
  WTF *v538;
  WTF *v539;
  _QWORD *v540;
  WebCore::FrameTree *v541;
  uint64_t v542;
  uint64_t v544;
  WebCore::Node *v546;
  WebCore::Node *v547;
  WTF *v549;
  WTF *v550;
  WTF *v551;
  WTF::URL *v552[2];
  WTF::URL *v553[2];
  WTF::StringImpl *v555;
  WTF::StringImpl *v556;
  WTF::StringImpl *v557;
  WTF::StringImpl *v558;
  uint64_t v559;
  WTF::StringImpl *v560;
  WTF::StringImpl **v561;
  _QWORD *v562;
  WTF::StringImpl *v563;
  uint64_t v564;
  WTF::StringImpl *v565;
  uint64_t v566;
  WTF::StringImpl *v567;
  WTF::StringImpl *v568;
  __int128 v569;
  __int128 v570;
  WTF::StringImpl *v571;
  WTF::StringImpl *v572;
  WTF::StringImpl *v573;
  WTF::StringImpl *v574;
  WTF::StringImpl *v575;
  WTF::StringImpl *v576[5];
  _QWORD v577[4];
  __int128 v578;
  _BYTE v579[40];
  __int128 v580;
  int64x2_t v581;
  WTF::StringImpl *v582[2];
  __int128 v583;
  unint64_t v584;
  int64x2_t v585;
  uint64_t v586;
  char v587;
  __int16 v588;
  char v589;
  CFTypeRef cf;
  char v591;
  WTF::StringImpl *v592;
  WTF::StringImpl *v593;
  __int128 v594;
  uint64_t v595;
  WTF::StringImpl **v596;
  int v597;
  unsigned int v598;
  WTF::StringImpl *v599;
  _DWORD *v600[3];

  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 280) + 88);
  v11 = v10 + 1272;
  WebCore::ResourceResponse::platformLazyInit(v10 + 1272, 1);
  v12 = *(WTF::StringImpl **)(v10 + 1272);
  if (v12)
  {
    *(_DWORD *)v12 += 2;
    v568 = v12;
    v569 = *(_OWORD *)(v10 + 1280);
    v570 = *(_OWORD *)(v10 + 1296);
  }
  else
  {
    *(_QWORD *)&v594 = 0;
    WTF::URL::invalidate((WTF::URL *)&v594);
    MEMORY[0x19AEA52F8](v576, &v594, MEMORY[0x1E0CBF738], 0);
    v568 = v576[0];
    v569 = *(_OWORD *)&v576[1];
    LODWORD(v576[1]) &= ~1u;
    v570 = *(_OWORD *)&v576[3];
    v576[0] = 0;
    v470 = (WTF::StringImpl *)v594;
    *(_QWORD *)&v594 = 0;
    if (v470)
    {
      if (*(_DWORD *)v470 == 2)
        WTF::StringImpl::destroy(v470, v469);
      else
        *(_DWORD *)v470 -= 2;
    }
  }
  WebCore::utf8Buffer(a2, (uint64_t *)&v558);
  v13 = v558;
  v558 = 0;
  *(_QWORD *)&v594 = v13;
  WebCore::ResourceResponse::platformLazyInit(v10 + 1272, 1);
  v14 = (_DWORD **)(v10 + 1312);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v596 = (WTF::StringImpl **)v576[0];
  v541 = (WebCore::FrameTree *)(a3 + 48);
  WebCore::FrameTree::uniqueName(a3 + 48, v15, (WTF::AtomString *)&v565);
  v576[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v576);
  LOBYTE(v580) = 0;
  WORD4(v580) = 0;
  memset(v577, 0, sizeof(v577));
  v578 = 0u;
  memset(v579, 0, 33);
  v581 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)v582 = v581;
  v583 = 0uLL;
  v585 = v581;
  v584 = 0x8000000000000000;
  v586 = 0x7FF8000000000000;
  v587 &= 0xF0u;
  v588 &= 0xC000u;
  v589 = v589 & 0xF8 | 2;
  cf = 0;
  v591 = 0;
  BYTE10(v580) = BYTE10(v580) & 0xC0 | 5;
  v563 = 0;
  WebCore::ArchiveResource::create((uint64_t)&v594, (uint64_t)&v568, v14, (_DWORD **)&v596, (_DWORD **)&v565, (WebCore::ResourceResponseBase *)v576, (_DWORD **)&v563, (uint64_t *)&v567);
  v17 = v563;
  v563 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v576, v16);
  v21 = v565;
  v565 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)v596;
  v596 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v594;
  *(_QWORD *)&v594 = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v23));
    if (!v25)
    {
      v471 = v11;
      v472 = a1;
      atomic_store(1u, (unsigned int *)v23);
      v473 = *(unsigned int *)(v23 + 20);
      if ((_DWORD)v473)
      {
        v474 = *(_QWORD *)(v23 + 8);
        v475 = v474 + 16 * v473;
        do
        {
          v476 = *(unsigned int **)(v474 + 8);
          *(_QWORD *)(v474 + 8) = 0;
          if (v476)
          {
            do
            {
              v477 = __ldaxr(v476);
              v478 = v477 - 1;
            }
            while (__stlxr(v478, v476));
            if (!v478)
            {
              atomic_store(1u, v476);
              v479 = v476[6];
              if ((_DWORD)v479 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v479])(v576, v476 + 2);
              v476[6] = -1;
              WTF::fastFree((WTF *)v476, v19);
            }
          }
          v474 += 16;
        }
        while (v474 != v475);
      }
      v489 = *(WTF **)(v23 + 8);
      if ((WTF *)(v23 + 24) != v489 && v489 != 0)
      {
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 16) = 0;
        WTF::fastFree(v489, v19);
      }
      WTF::fastFree((WTF *)v23, v19);
      a1 = v472;
      v11 = v471;
    }
  }
  v26 = v558;
  v558 = 0;
  if (v26)
  {
    do
    {
      v27 = __ldaxr((unsigned int *)v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, (unsigned int *)v26));
    if (!v28)
    {
      v480 = v11;
      v481 = a1;
      atomic_store(1u, (unsigned int *)v26);
      v482 = *((unsigned int *)v26 + 5);
      if ((_DWORD)v482)
      {
        v483 = *((_QWORD *)v26 + 1);
        v484 = v483 + 16 * v482;
        do
        {
          v485 = *(unsigned int **)(v483 + 8);
          *(_QWORD *)(v483 + 8) = 0;
          if (v485)
          {
            do
            {
              v486 = __ldaxr(v485);
              v487 = v486 - 1;
            }
            while (__stlxr(v487, v485));
            if (!v487)
            {
              atomic_store(1u, v485);
              v488 = v485[6];
              if ((_DWORD)v488 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v488])(v576, v485 + 2);
              v485[6] = -1;
              WTF::fastFree((WTF *)v485, v19);
            }
          }
          v483 += 16;
        }
        while (v483 != v484);
      }
      v491 = (WTF *)*((_QWORD *)v26 + 1);
      if ((WTF::StringImpl *)((char *)v26 + 24) != v491 && v491 != 0)
      {
        *((_QWORD *)v26 + 1) = 0;
        *((_DWORD *)v26 + 4) = 0;
        WTF::fastFree(v491, v19);
      }
      WTF::fastFree(v26, v19);
      a1 = v481;
      v11 = v480;
    }
  }
  if (!v567)
  {
    *a1 = 0;
    goto LABEL_820;
  }
  v565 = 0;
  v566 = 0;
  v563 = 0;
  v564 = 0;
  v561 = 0;
  v562 = 0;
  v29 = *a7;
  v540 = a1;
  v542 = v11;
  v535 = v14;
  v544 = (uint64_t)a7;
  if (*a7)
  {
    v30 = *((_DWORD *)v29 + 1);
    *(_DWORD *)v29 += 2;
    if (v30 < 0 || __OFADD__(v30, 6))
    {
      v560 = 0;
    }
    else
    {
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v30 + 6), (*((_DWORD *)v29 + 4) >> 2) & 1, (uint64_t)v29, (int8x16_t *)"_files", 6u, &v560);
      if (v560)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v19);
        else
          *(_DWORD *)v29 -= 2;
        goto LABEL_29;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195F41F78);
  }
  v560 = 0;
LABEL_29:
  v31 = a4[3];
  if (!(_DWORD)v31)
    goto LABEL_260;
  v32 = *(WTF **)a4;
  v549 = (WTF *)(*(_QWORD *)a4 + 8 * v31);
  do
  {
    v33 = *(_QWORD **)v32;
    if ((*(_WORD *)(*(_QWORD *)v32 + 28) & 0x10) != 0)
    {
      v34 = *(_QWORD *)(v33[12] + 24);
      if (v34 == *(_QWORD *)(WebCore::HTMLNames::frameTag + 24)
        || v34 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24)
        || v34 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
      {
        if (((*(uint64_t (**)(_QWORD))(*v33 + 192))(*(_QWORD *)v32) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F416FCLL);
        }
        v35 = v33[14];
        if (v35)
        {
          v36 = *(_QWORD *)(v35 + 8);
          if (v36)
          {
            if (!*(_BYTE *)(v36 + 144))
            {
              v107 = (unsigned int *)(v36 + 8);
              do
                v108 = __ldaxr(v107);
              while (__stlxr(v108 + 1, v107));
              if (*a5 && ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, v36) & 1) == 0)
                goto LABEL_246;
              WebCore::LegacyWebArchive::create(*(_QWORD *)(v36 + 296), (uint64_t)a5, (uint64_t *)a6, v544, (uint64_t *)&v596);
              v109 = v596;
              if (!v596)
                goto LABEL_246;
              v110 = v596[2];
              if (v110)
              {
                v111 = (WTF::StringImpl *)*((_QWORD *)v110 + 2);
                if (v111)
                  *(_DWORD *)v111 += 2;
                v576[0] = v111;
                v112 = *(_OWORD *)((char *)v110 + 40);
                *(_OWORD *)&v576[1] = *(_OWORD *)((char *)v110 + 24);
                *(_OWORD *)&v576[3] = v112;
                if (!v111)
                  goto LABEL_237;
              }
              else
              {
                v576[0] = 0;
                WTF::URL::invalidate((WTF::URL *)v576);
                v111 = v576[0];
                if (!v576[0])
                  goto LABEL_237;
              }
              if (!*((_DWORD *)v111 + 1))
                goto LABEL_237;
              v113 = (WTF::StringImpl *)((char *)v110 + 344);
              if (*(_QWORD *)(*(_QWORD *)(a3 + 128) + 8) == a3)
              {
                v114 = *(_DWORD **)v113;
                if (*(_QWORD *)v113)
                  *v114 += 2;
                v600[0] = v114;
              }
              else
              {
                WTF::FileSystemImpl::lastComponentOfPathIgnoringTrailingSlash(v113, v19);
              }
              v115 = *(WTF::StringImpl **)(v36 + 32);
              *(_QWORD *)&v594 = *(_QWORD *)(v36 + 40);
              LOBYTE(v593) = 45;
              v558 = v115;
              WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((unint64_t *)&v594, (char *)&v593, (unint64_t *)&v558, &v599);
              if (!v599)
              {
                __break(0xC471u);
                JUMPOUT(0x195F41F80);
              }
              v116 = v562;
              if (v562
                || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v562, 8u, 0), (v116 = v562) != 0))
              {
                v117 = *((_DWORD *)v116 - 2);
              }
              else
              {
                v117 = 0;
              }
              v118 = *((_DWORD *)v599 + 4);
              if (v118 < 0x100)
                v119 = WTF::StringImpl::hashSlowCase(v599);
              else
                v119 = v118 >> 8;
              v536 = 0;
              for (i = 1; ; ++i)
              {
                v121 = v119 & v117;
                v122 = (WTF **)&v116[2 * (v119 & v117)];
                v123 = *v122;
                if (*v122 == (WTF *)-1)
                {
                  v536 = (WTF *)&v116[2 * v121];
                }
                else
                {
                  if (!v123)
                  {
                    if (v536)
                    {
                      *(_QWORD *)v536 = 0;
                      *((_QWORD *)v536 + 1) = 0;
                      --*((_DWORD *)v562 - 4);
                      v122 = (WTF **)v536;
                    }
                    v124 = v599;
                    v599 = 0;
                    v125 = *v122;
                    *v122 = v124;
                    if (v125)
                    {
                      if (*(_DWORD *)v125 == 2)
                        WTF::StringImpl::destroy(v125, v19);
                      else
                        *(_DWORD *)v125 -= 2;
                    }
                    v126 = (WTF *)v600[0];
                    if (v600[0])
                      *v600[0] += 2;
                    v127 = v122[1];
                    v122[1] = v126;
                    if (v127)
                    {
                      if (*(_DWORD *)v127 == 2)
                        WTF::StringImpl::destroy(v127, v19);
                      else
                        *(_DWORD *)v127 -= 2;
                    }
                    if (v562)
                      v128 = *((_DWORD *)v562 - 3) + 1;
                    else
                      v128 = 1;
                    *((_DWORD *)v562 - 3) = v128;
                    if (v562)
                      v129 = *((_DWORD *)v562 - 3);
                    else
                      v129 = 0;
                    v130 = (*((_DWORD *)v562 - 4) + v129);
                    v131 = *((unsigned int *)v562 - 1);
                    if (v131 > 0x400)
                    {
                      if (v131 <= 2 * v130)
                      {
LABEL_226:
                        v132 = (_DWORD)v131 << (6 * *((_DWORD *)v562 - 3) >= (2 * v131));
                        goto LABEL_229;
                      }
                    }
                    else if (3 * v131 <= 4 * v130)
                    {
                      if ((_DWORD)v131)
                        goto LABEL_226;
                      v132 = 8;
LABEL_229:
                      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v562, v132, v122);
                    }
LABEL_230:
                    v133 = v599;
                    v599 = 0;
                    if (v133)
                    {
                      if (*(_DWORD *)v133 == 2)
                        WTF::StringImpl::destroy(v133, v19);
                      else
                        *(_DWORD *)v133 -= 2;
                    }
                    v134 = (WTF::StringImpl *)v600[0];
                    v600[0] = 0;
                    if (v134)
                    {
                      if (*(_DWORD *)v134 == 2)
                        WTF::StringImpl::destroy(v134, v19);
                      else
                        *(_DWORD *)v134 -= 2;
                    }
                    v109 = v596;
LABEL_237:
                    *(_QWORD *)&v594 = v109;
                    v596 = 0;
                    LODWORD(v135) = HIDWORD(v566);
                    if (HIDWORD(v566) == (_DWORD)v566)
                    {
                      v136 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v565, HIDWORD(v566) + 1, (unint64_t)&v594);
                      v135 = HIDWORD(v566);
                      v137 = v565;
                      v138 = *(_QWORD *)v136;
                      *(_QWORD *)v136 = 0;
                      *((_QWORD *)v137 + v135) = v138;
                    }
                    else
                    {
                      *(_QWORD *)&v594 = 0;
                      *((_QWORD *)v565 + HIDWORD(v566)) = v109;
                    }
                    HIDWORD(v566) = v135 + 1;
                    v139 = (_DWORD *)v594;
                    *(_QWORD *)&v594 = 0;
                    if (v139)
                    {
                      if (v139[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v139 + 8))(v139);
                      else
                        --v139[2];
                    }
                    v140 = v576[0];
                    v576[0] = 0;
                    if (v140)
                    {
                      if (*(_DWORD *)v140 == 2)
                        WTF::StringImpl::destroy(v140, v19);
                      else
                        *(_DWORD *)v140 -= 2;
                    }
                    do
                    {
LABEL_246:
                      v141 = __ldaxr(v107);
                      v142 = v141 - 1;
                    }
                    while (__stlxr(v142, v107));
                    if (!v142)
                    {
                      atomic_store(1u, v107);
                      v143 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v143 = off_1E31FE290;
                      *((_QWORD *)v143 + 1) = v107;
                      v576[0] = v143;
                      WTF::ensureOnMainThread();
                      v144 = v576[0];
                      v576[0] = 0;
                      if (v144)
                        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v144 + 8))(v144);
                    }
                    goto LABEL_175;
                  }
                  if ((WTF::equal(v123, v599, v20) & 1) != 0)
                    goto LABEL_230;
                }
                v119 = i + v121;
              }
            }
          }
        }
      }
    }
    v594 = 0uLL;
    v595 = 0;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)v32 + 352))(*(_QWORD *)v32, &v594);
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)v32 + 360))(*(_QWORD *)v32, &v594);
    v37 = *(_DWORD **)(*(_QWORD *)(a3 + 280) + 88);
    v38 = v37[6] + 1;
    v37[6] = v38;
    v39 = *((_QWORD *)&v594 + 1);
    if (!*((_QWORD *)&v594 + 1))
    {
LABEL_164:
      v103 = v38 - 1;
      if (v103)
        v37[6] = v103;
      else
        (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 24))(v37);
      goto LABEL_166;
    }
    do
    {
      v40 = v562;
      if (v562)
      {
        v41 = *((_DWORD *)v562 - 2);
        v42 = *(_DWORD *)(*(_QWORD *)v39 + 16);
        if (v42 < 0x100)
          v43 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v39);
        else
          v43 = v42 >> 8;
        for (j = 0; ; v43 = j + v45)
        {
          v45 = v43 & v41;
          v46 = (WTF *)v40[2 * (v43 & v41)];
          if (v46 != (WTF *)-1)
          {
            if (!v46)
              goto LABEL_49;
            if ((WTF::equal(v46, *(const WTF::StringImpl **)v39, v20) & 1) != 0)
              break;
          }
          ++j;
        }
        goto LABEL_123;
      }
LABEL_49:
      if (v560 && (WTF::URL::protocolIs() & 1) != 0)
        goto LABEL_123;
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String const&>((uint64_t *)&v562, (WTF::StringImpl **)v39, MEMORY[0x1E0CBF738], (uint64_t)&v558);
      WebCore::DocumentLoader::subresource((uint64_t)v37, (WTF::StringImpl **)v39, v47, (uint64_t *)&v593);
      v48 = v593;
      if (v593)
      {
LABEL_94:
        if (v560)
        {
          WebCore::generateValidFileName((WTF::StringImpl **)&v596, (WTF::URL *)v39, (uint64_t *)&v561, 0);
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v561, (WTF::StringImpl **)&v596, v78, (uint64_t)v576);
          WTF::FileSystemImpl::pathByAppendingComponent();
          v79 = v593;
          v80 = v576[0];
          if (v576[0])
            *(_DWORD *)v576[0] += 2;
          v81 = (WTF::StringImpl *)*((_QWORD *)v79 + 43);
          *((_QWORD *)v79 + 43) = v80;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2)
              WTF::StringImpl::destroy(v81, v19);
            else
              *(_DWORD *)v81 -= 2;
          }
          v82 = v558;
          v83 = v576;
          if (*(_QWORD *)(*(_QWORD *)(a3 + 128) + 8) != a3)
            v83 = (WTF::StringImpl **)&v596;
          v84 = *v83;
          if (v84)
            *(_DWORD *)v84 += 2;
          v85 = (WTF::StringImpl *)*((_QWORD *)v82 + 1);
          *((_QWORD *)v82 + 1) = v84;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, v19);
            else
              *(_DWORD *)v85 -= 2;
          }
          v86 = v576[0];
          v576[0] = 0;
          if (v86)
          {
            if (*(_DWORD *)v86 == 2)
              WTF::StringImpl::destroy(v86, v19);
            else
              *(_DWORD *)v86 -= 2;
          }
          v87 = (WTF::StringImpl *)v596;
          v596 = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
              WTF::StringImpl::destroy(v87, v19);
            else
              *(_DWORD *)v87 -= 2;
          }
          v48 = v593;
        }
        v576[0] = v48;
        v593 = 0;
        LODWORD(v88) = HIDWORD(v564);
        if (HIDWORD(v564) == (_DWORD)v564)
        {
          v89 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v563, HIDWORD(v564) + 1, (unint64_t)v576);
          v88 = HIDWORD(v564);
          v90 = v563;
          v91 = *(_QWORD *)v89;
          *(_QWORD *)v89 = 0;
          *((_QWORD *)v90 + v88) = v91;
        }
        else
        {
          v576[0] = 0;
          *((_QWORD *)v563 + HIDWORD(v564)) = v48;
        }
        HIDWORD(v564) = v88 + 1;
        v92 = v576[0];
        v576[0] = 0;
        if (v92)
        {
          if (*((_DWORD *)v92 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v92 + 8))(v92);
          else
            --*((_DWORD *)v92 + 2);
        }
        v93 = v593;
        v593 = 0;
        if (v93)
        {
          if (*((_DWORD *)v93 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v93 + 8))(v93);
          else
            --*((_DWORD *)v93 + 2);
        }
        goto LABEL_123;
      }
      v49 = *(WTF::StringImpl **)v39;
      if (*(_QWORD *)v39)
        *(_DWORD *)v49 += 2;
      v50 = *(_OWORD *)(v39 + 24);
      *(_OWORD *)&v576[1] = *(_OWORD *)(v39 + 8);
      *(_OWORD *)&v576[3] = v50;
      v576[0] = v49;
      v577[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v577);
      *((_QWORD *)&v578 + 1) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_QWORD *)v579 = v596;
      v581.i32[0] = 0x10000;
      v580 = 0u;
      memset(&v579[8], 0, 32);
      v52 = v581.i8[4] & 0x80 | 4;
      v581.i8[4] = v52;
      v581.i64[1] = 0;
      v53 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        *(_DWORD *)v53 += 2;
        v52 = v581.i8[4];
      }
      v582[0] = v53;
      v582[1] = 0;
      LOBYTE(v583) = 0;
      BYTE4(v583) = 0;
      BYTE8(v583) = BYTE8(v583) & 0xE0 | 5;
      v581.i8[4] = v52 | 2;
      v584 = 0;
      v54 = *(_QWORD *)(a3 + 296);
      v55 = *(WTF::StringImpl **)(v54 + 408);
      if (v55)
      {
        *(_DWORD *)v55 += 2;
        v592 = v55;
LABEL_59:
        v57 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
        if (v57 != -1)
        {
          v596 = &v575;
          v600[0] = &v596;
          std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, v600, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
        }
        if (v592)
        {
          v58 = *((_QWORD *)v592 + 1);
          v59 = *((unsigned int *)v592 + 1) | ((unint64_t)((*((_DWORD *)v592 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v58 = 0;
          v59 = 0x100000000;
        }
        WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v58, v59, (uint64_t *)&v599);
        v60 = v599;
        if (v599)
          goto LABEL_64;
        v60 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
        {
          *(_DWORD *)v60 += 2;
LABEL_64:
          v61 = *(_DWORD *)v60;
LABEL_65:
          v62 = 0;
          *(_DWORD *)v60 = v61 + 2;
          goto LABEL_66;
        }
        goto LABEL_161;
      }
      if (*(_BYTE *)(v54 + 464) == 1)
      {
        v56 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v54 + 192) + 256))(v54 + 192);
        WebCore::SecurityOrigin::domainForCachePartition(v56, &v592);
        if (v592)
          goto LABEL_59;
      }
      else
      {
        if (v53)
          *(_DWORD *)v53 += 2;
        v592 = v53;
        if (v53)
          goto LABEL_59;
      }
      v60 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        v61 = *(_DWORD *)v60 + 2;
        *(_DWORD *)v60 = v61;
        goto LABEL_65;
      }
LABEL_161:
      v62 = 1;
LABEL_66:
      v63 = v582[0];
      v582[0] = v60;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
        {
          WTF::StringImpl::destroy(v63, v51);
          if ((v62 & 1) != 0)
            goto LABEL_72;
          goto LABEL_70;
        }
        *(_DWORD *)v63 -= 2;
      }
      if ((v62 & 1) != 0)
        goto LABEL_72;
LABEL_70:
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v51);
      else
        *(_DWORD *)v60 -= 2;
LABEL_72:
      v64 = v592;
      if (v592)
      {
        if (*(_DWORD *)v592 == 2)
          v64 = (WTF *)WTF::StringImpl::destroy(v592, v51);
        else
          *(_DWORD *)v592 -= 2;
      }
      isMainThread = WTF::isMainThread(v64);
      if ((isMainThread & 1) == 0)
        goto LABEL_1086;
      {
        isMainThread = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
      }
      v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) + 1008);
      if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F40C54);
      }
      v67 = (uint64_t *)WebCore::MemoryCache::sessionResourceMap((WTF *)&WebCore::MemoryCache::singleton(void)::memoryCache, v66);
      if (v67)
      {
        v69 = WebCore::MemoryCache::resourceForRequestImpl((int)v67, (WebCore::ResourceRequest *)v576, v67);
        if (v69)
        {
          v70 = *(unsigned int **)(v69 + 392);
          if (v70)
          {
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 + 1, v70));
          }
          v599 = (WTF::StringImpl *)v70;
          v72 = *(WebCore::ResourceResponseBase **)(v69 + 400);
          if (!v72)
          {
            v73 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
            if (v73 != -1)
            {
              v596 = &v592;
              v600[0] = &v596;
              std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v600, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
            }
            v72 = (WebCore::ResourceResponseBase *)&WebCore::CachedResource::response(void)const::staticEmptyResponse;
          }
          WebCore::ArchiveResource::create((uint64_t)&v599, v39, v72, (uint64_t *)&v596);
          v74 = v593;
          v593 = (WTF::StringImpl *)v596;
          if (v74)
          {
            if (*((_DWORD *)v74 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v74 + 8))(v74);
            else
              --*((_DWORD *)v74 + 2);
          }
          v596 = 0;
          v75 = v599;
          v599 = 0;
          if (v75)
          {
            do
            {
              v76 = __ldaxr((unsigned int *)v75);
              v77 = v76 - 1;
            }
            while (__stlxr(v77, (unsigned int *)v75));
            if (!v77)
            {
              atomic_store(1u, (unsigned int *)v75);
              v94 = *((unsigned int *)v75 + 5);
              if ((_DWORD)v94)
              {
                v95 = *((_QWORD *)v75 + 1);
                v96 = v95 + 16 * v94;
                do
                {
                  v97 = *(unsigned int **)(v95 + 8);
                  *(_QWORD *)(v95 + 8) = 0;
                  if (v97)
                  {
                    do
                    {
                      v98 = __ldaxr(v97);
                      v99 = v98 - 1;
                    }
                    while (__stlxr(v99, v97));
                    if (!v99)
                    {
                      atomic_store(1u, v97);
                      v100 = v97[6];
                      if ((_DWORD)v100 != -1)
                        ((void (*)(_DWORD **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v100])(v600, v97 + 2);
                      v97[6] = -1;
                      WTF::fastFree((WTF *)v97, v68);
                    }
                  }
                  v95 += 16;
                }
                while (v95 != v96);
              }
              v101 = (WTF *)*((_QWORD *)v75 + 1);
              if ((WTF::StringImpl *)((char *)v75 + 24) != v101 && v101 != 0)
              {
                *((_QWORD *)v75 + 1) = 0;
                *((_DWORD *)v75 + 4) = 0;
                WTF::fastFree(v101, v68);
              }
              WTF::fastFree(v75, v68);
            }
          }
        }
      }
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v576, v68);
      v48 = v593;
      if (v593)
        goto LABEL_94;
LABEL_123:
      v39 = *(_QWORD *)(v39 + 48);
    }
    while (v39);
    if (v37)
    {
      v38 = v37[6];
      goto LABEL_164;
    }
LABEL_166:
    v104 = (WTF *)*((_QWORD *)&v594 + 1);
    if (*((_QWORD *)&v594 + 1))
    {
      do
      {
        v105 = v104;
        v104 = (WTF *)*((_QWORD *)v104 + 6);
        v106 = *(WTF::StringImpl **)v105;
        *(_QWORD *)v105 = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 2)
            WTF::StringImpl::destroy(v106, v19);
          else
            *(_DWORD *)v106 -= 2;
        }
        WTF::fastFree(v105, v19);
      }
      while (v104);
    }
    if ((_QWORD)v594)
      WTF::fastFree((WTF *)(v594 - 16), v19);
LABEL_175:
    v32 = (WTF *)((char *)v32 + 8);
  }
  while (v32 != v549);
LABEL_260:
  if (!v560 || !*((_DWORD *)v560 + 1) || (v192 = *(_QWORD *)(a3 + 296)) == 0)
  {
    v145 = 0;
    v146 = (uint64_t *)v544;
    goto LABEL_262;
  }
  *(_DWORD *)(v192 + 24) += 2;
  v558 = 0;
  v596 = 0;
  v193 = *(WTF **)(v192 + 1344);
  if (!v193)
  {
    v193 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v193 = 1;
    v194 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v192);
    if (v194)
    {
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 + 1, v194));
    }
    *((_QWORD *)v193 + 1) = v194;
    *((_QWORD *)v193 + 2) = 0;
    *((_QWORD *)v193 + 3) = 0;
    *((_QWORD *)v193 + 4) = 0;
    v196 = *(WebCore::StyleSheetList **)(v192 + 1344);
    *(_QWORD *)(v192 + 1344) = v193;
    if (v196)
    {
      if (*(_DWORD *)v196 == 1)
      {
        WebCore::StyleSheetList::~StyleSheetList(v196, v19);
        WTF::fastFree(v457, v458);
        v193 = *(WTF **)(v192 + 1344);
      }
      else
      {
        --*(_DWORD *)v196;
      }
    }
  }
  v547 = (WebCore::Node *)v192;
  ++*(_DWORD *)v193;
  v551 = v193;
  if (!WebCore::StyleSheetList::length(v193, (uint64_t)v19, v20))
    goto LABEL_516;
  v199 = 0;
  while (2)
  {
    v200 = WebCore::StyleSheetList::item(v193, v199, v198);
    if (!v200)
      goto LABEL_502;
    v203 = v200;
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v200 + 112))(v200))
      goto LABEL_502;
    v204 = *(_DWORD *)(v203 + 8);
    v205 = v204 + 1;
    *(_DWORD *)(v203 + 8) = v204 + 1;
    if (v558)
    {
      v206 = *((_DWORD *)v558 - 2);
      v207 = (~(v203 << 32) + v203) ^ ((unint64_t)(~(v203 << 32) + v203) >> 22);
      v208 = 9 * ((v207 + ~(v207 << 13)) ^ ((v207 + ~(v207 << 13)) >> 8));
      v209 = (v208 ^ (v208 >> 15)) + ~((v208 ^ (v208 >> 15)) << 27);
      v210 = v206 & ((v209 >> 31) ^ v209);
      v211 = (_DWORD *)*((_QWORD *)v558 + 2 * v210);
      if (v211 == (_DWORD *)v203)
        goto LABEL_500;
      v212 = 1;
      while (v211)
      {
        v210 = (v210 + v212) & v206;
        v211 = (_DWORD *)*((_QWORD *)v558 + 2 * v210);
        ++v212;
        if (v211 == (_DWORD *)v203)
          goto LABEL_500;
      }
    }
    v600[0] = 0;
    *(_DWORD *)(v203 + 8) = v204 + 2;
    *(_QWORD *)&v594 = v203;
    WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::add((uint64_t *)v600, (uint64_t *)&v594, (uint64_t)v576);
    v213 = (_DWORD *)v594;
    *(_QWORD *)&v594 = 0;
    if (v213)
    {
      if (v213[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v213 + 8))(v213);
      else
        --v213[2];
    }
    WebCore::CSSStyleSheet::getChildStyleSheets((WebCore::CSSStyleSheet *)v203, (WTF::StringImpl *)v600);
    v214 = v600[0];
    if (v600[0])
    {
      v215 = *(v600[0] - 1);
      v216 = &v600[0][2 * v215];
      if (*(v600[0] - 3))
      {
        v217 = v600[0];
        if ((_DWORD)v215)
        {
          v218 = 8 * v215;
          v217 = v600[0];
          while ((unint64_t)(*(_QWORD *)v217 + 1) <= 1)
          {
            v217 += 2;
            v218 -= 8;
            if (!v218)
            {
              v217 = v216;
              break;
            }
          }
        }
LABEL_361:
        v219 = &v600[0][2 * *(v600[0] - 1)];
        goto LABEL_366;
      }
      v217 = &v600[0][2 * v215];
    }
    else
    {
      v217 = 0;
      v215 = 0;
    }
    v216 = &v600[0][2 * v215];
    if (v600[0])
      goto LABEL_361;
    v219 = 0;
LABEL_366:
    if (v219 == v217)
      goto LABEL_498;
    v220 = v219;
    while (2)
    {
      v221 = *(_QWORD *)v217;
      v222 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v217 + 24) + 24);
      if (!v222 || (v223 = *(_DWORD *)v222, v224 = *((_DWORD *)v222 + 1), *(_DWORD *)v222 += 2, !v224))
      {
        v225 = *(_QWORD *)(v221 + 104);
        if (v225)
        {
          v226 = *(_QWORD *)(v225 + 8);
          if (!v222)
            goto LABEL_376;
        }
        else
        {
          v226 = 0;
          if (!v222)
            goto LABEL_376;
        }
        if (*(_DWORD *)v222 == 2)
          WTF::StringImpl::destroy(v222, v201);
        else
          *(_DWORD *)v222 -= 2;
LABEL_376:
        if (v226)
          goto LABEL_377;
        goto LABEL_474;
      }
      if (v223)
        *(_DWORD *)v222 = v223;
      else
        WTF::StringImpl::destroy(v222, v201);
LABEL_377:
      v227 = *(_QWORD *)(*(_QWORD *)v217 + 24);
      v228 = *(WTF::StringImpl **)(v227 + 136);
      if (!v228)
        goto LABEL_474;
      *(_DWORD *)v228 += 2;
      v576[0] = v228;
      v229 = *(_OWORD *)(v227 + 160);
      *(_OWORD *)&v576[1] = *(_OWORD *)(v227 + 144);
      *(_OWORD *)&v576[3] = v229;
      if (!*((_DWORD *)v228 + 1))
      {
        v576[0] = 0;
        goto LABEL_472;
      }
      v230 = v558;
      if (v558
        || (WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>>,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashMap<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::rehash((uint64_t *)&v558, 8u, 0), (v230 = v558) != 0))
      {
        v231 = *((_DWORD *)v230 - 2);
      }
      else
      {
        v231 = 0;
      }
      v232 = *(_DWORD **)v217;
      v233 = ~(*(_QWORD *)v217 << 32) + *(_QWORD *)v217;
      v234 = (v233 ^ (v233 >> 22)) + ~((v233 ^ (v233 >> 22)) << 13);
      v235 = (9 * (v234 ^ (v234 >> 8))) ^ ((9 * (v234 ^ (v234 >> 8))) >> 15);
      v236 = v231 & (((v235 + ~(v235 << 27)) >> 31) ^ (v235 + ~((_DWORD)v235 << 27)));
      v237 = (uint64_t)v230 + 16 * v236;
      v238 = *(_DWORD **)v237;
      if (!*(_QWORD *)v237)
      {
LABEL_390:
        if (v232)
          ++v232[2];
        *(_QWORD *)v237 = v232;
        v241 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v241 += 2;
        v242 = *(WTF::StringImpl **)(v237 + 8);
        *(_QWORD *)(v237 + 8) = v241;
        if (v242)
        {
          if (*(_DWORD *)v242 == 2)
            WTF::StringImpl::destroy(v242, v201);
          else
            *(_DWORD *)v242 -= 2;
        }
        if (v558)
          v243 = *((_DWORD *)v558 - 3) + 1;
        else
          v243 = 1;
        *((_DWORD *)v558 - 3) = v243;
        if (v558)
          v244 = *((_DWORD *)v558 - 3);
        else
          v244 = 0;
        v245 = (*((_DWORD *)v558 - 4) + v244);
        v246 = *((unsigned int *)v558 - 1);
        if (v246 > 0x400)
        {
          if (v246 > 2 * v245)
          {
LABEL_411:
            if (!HIDWORD(v564))
              goto LABEL_428;
            v248 = 0;
            v249 = -8;
            while ((WTF::equal(*(WTF **)(*((_QWORD *)v563 + v248) + 16), v576[0], v202) & 1) == 0)
            {
              ++v248;
              v249 -= 8;
              if (v248 >= HIDWORD(v564))
                goto LABEL_428;
            }
            if (v248 >= HIDWORD(v564))
            {
              __break(0xC471u);
              JUMPOUT(0x195F41F6CLL);
            }
            WTF::FileSystemImpl::lastComponentOfPathIgnoringTrailingSlash((WTF::FileSystemImpl *)(*((_QWORD *)v563 + v248) + 344), v250);
            WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((uint64_t *)&v561, (WTF::StringImpl **)&v594, v251);
            v253 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)&v562, v576, v252);
            v254 = v253;
            if (v562)
            {
              v255 = (WTF::StringImpl **)&v562[2 * *((unsigned int *)v562 - 1)];
              if (v255 != v253)
              {
LABEL_420:
                if (v255 != v253)
                  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)&v562, v253);
              }
            }
            else if (v253)
            {
              v255 = 0;
              goto LABEL_420;
            }
            v256 = v563;
            v257 = (_QWORD *)((char *)v563 + 8 * v248);
            v258 = (_DWORD *)*v257;
            *v257 = 0;
            if (v258)
            {
              if (v258[2] == 1)
                (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v258 + 8))(v258, v254);
              else
                --v258[2];
            }
            memmove(v257, v257 + 1, (WTF::StringImpl *)((char *)v563 + 8 * HIDWORD(v564)) - v256 + v249);
            --HIDWORD(v564);
            v260 = (WTF::StringImpl *)v594;
            *(_QWORD *)&v594 = 0;
            if (v260)
            {
              if (*(_DWORD *)v260 == 2)
                WTF::StringImpl::destroy(v260, v259);
              else
                *(_DWORD *)v260 -= 2;
            }
LABEL_428:
            WebCore::MIMETypeRegistry::preferredExtensionForMIMEType((WebCore::MIMETypeRegistry *)&WebCore::cssContentTypeAtomData, &v599);
            WebCore::generateValidFileName(&v593, (WTF::URL *)v576, (uint64_t *)&v561, v599);
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v561, &v593, v261, (uint64_t)&v594);
            v219 = v220;
            WTF::FileSystemImpl::pathByAppendingComponent();
            v262 = v594;
            *(_QWORD *)&v594 = 0;
            v263 = *(WTF::StringImpl **)(v237 + 8);
            *(_QWORD *)(v237 + 8) = v262;
            if (v263)
            {
              v264 = *(_DWORD *)v263 - 2;
              if (*(_DWORD *)v263 == 2)
              {
                WTF::StringImpl::destroy(v263, v201);
                v263 = (WTF::StringImpl *)v594;
                *(_QWORD *)&v594 = 0;
                if (!v263)
                  goto LABEL_431;
                v264 = *(_DWORD *)v263 - 2;
                if (*(_DWORD *)v263 == 2)
                {
                  WTF::StringImpl::destroy(v263, v201);
                  goto LABEL_431;
                }
              }
              *(_DWORD *)v263 = v264;
            }
LABEL_431:
            v265 = v596;
            if (v596
              || (WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>>,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashMap<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::rehash((uint64_t *)&v596, 8u, 0), (v265 = v596) != 0))
            {
              v266 = *((_DWORD *)v265 - 2);
            }
            else
            {
              v266 = 0;
            }
            v267 = *(WTF::StringImpl **)v217;
            v268 = ~(*(_QWORD *)v217 << 32) + *(_QWORD *)v217;
            v269 = (v268 ^ (v268 >> 22)) + ~((v268 ^ (v268 >> 22)) << 13);
            v270 = (9 * (v269 ^ (v269 >> 8))) ^ ((9 * (v269 ^ (v269 >> 8))) >> 15);
            v271 = v266 & (((v270 + ~(v270 << 27)) >> 31) ^ (v270 + ~((_DWORD)v270 << 27)));
            v272 = &v265[2 * v271];
            v273 = *v272;
            if (*v272)
            {
              v274 = 0;
              v275 = 1;
              while (v273 != v267)
              {
                if (v273 == (WTF::StringImpl *)-1)
                  v274 = v272;
                v271 = (v271 + v275) & v266;
                v272 = &v265[2 * v271];
                v273 = *v272;
                ++v275;
                if (!*v272)
                {
                  if (v274)
                  {
                    *v274 = 0;
                    v274[1] = 0;
                    --*((_DWORD *)v265 - 4);
                    v267 = *(WTF::StringImpl **)v217;
                    v272 = v274;
                  }
                  goto LABEL_442;
                }
              }
              goto LABEL_465;
            }
LABEL_442:
            if (v267)
              ++*((_DWORD *)v267 + 2);
            *v272 = v267;
            v276 = v593;
            if (v593)
              *(_DWORD *)v593 += 2;
            v277 = v272[1];
            v272[1] = v276;
            if (v277)
            {
              if (*(_DWORD *)v277 == 2)
                WTF::StringImpl::destroy(v277, v201);
              else
                *(_DWORD *)v277 -= 2;
            }
            if (v596)
              v278 = *((_DWORD *)v596 - 3) + 1;
            else
              v278 = 1;
            *((_DWORD *)v596 - 3) = v278;
            if (v596)
              v279 = *((_DWORD *)v596 - 3);
            else
              v279 = 0;
            v280 = (*((_DWORD *)v596 - 4) + v279);
            v281 = *((unsigned int *)v596 - 1);
            if (v281 > 0x400)
            {
              if (v281 > 2 * v280)
                goto LABEL_465;
            }
            else
            {
              if (3 * v281 > 4 * v280)
              {
LABEL_465:
                v283 = v593;
                v593 = 0;
                if (v283)
                {
                  if (*(_DWORD *)v283 == 2)
                    WTF::StringImpl::destroy(v283, v201);
                  else
                    *(_DWORD *)v283 -= 2;
                }
                v284 = v599;
                v599 = 0;
                if (v284)
                {
                  if (*(_DWORD *)v284 == 2)
                    WTF::StringImpl::destroy(v284, v201);
                  else
                    *(_DWORD *)v284 -= 2;
                }
                goto LABEL_471;
              }
              if (!(_DWORD)v281)
              {
                v282 = 8;
                goto LABEL_464;
              }
            }
            v282 = (_DWORD)v281 << (6 * *((_DWORD *)v596 - 3) >= (2 * v281));
LABEL_464:
            WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>>,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashMap<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::rehash((uint64_t *)&v596, v282, (_DWORD **)v272);
            goto LABEL_465;
          }
        }
        else
        {
          if (3 * v246 > 4 * v245)
            goto LABEL_411;
          if (!(_DWORD)v246)
          {
            v247 = 8;
            goto LABEL_410;
          }
        }
        v247 = (_DWORD)v246 << (6 * *((_DWORD *)v558 - 3) >= (2 * v246));
LABEL_410:
        v237 = WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>>,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashMap<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::rehash((uint64_t *)&v558, v247, (_DWORD **)v237);
        goto LABEL_411;
      }
      v239 = 0;
      v240 = 1;
      while (v238 != v232)
      {
        if (v238 == (_DWORD *)-1)
          v239 = (_QWORD *)v237;
        v236 = (v236 + v240) & v231;
        v237 = (uint64_t)v230 + 16 * v236;
        v238 = *(_DWORD **)v237;
        ++v240;
        if (!*(_QWORD *)v237)
        {
          if (v239)
          {
            *v239 = 0;
            v239[1] = 0;
            --*((_DWORD *)v230 - 4);
            v232 = *(_DWORD **)v217;
            v237 = (uint64_t)v239;
          }
          goto LABEL_390;
        }
      }
LABEL_471:
      v228 = v576[0];
      v576[0] = 0;
      if (v228)
      {
LABEL_472:
        if (*(_DWORD *)v228 == 2)
          WTF::StringImpl::destroy(v228, v201);
        else
          *(_DWORD *)v228 -= 2;
      }
LABEL_474:
      v285 = v217 + 2;
      v217 = v216;
      if (v285 != v216)
      {
        v217 = v285;
        while ((unint64_t)(*(_QWORD *)v217 + 1) <= 1)
        {
          v217 += 2;
          if (v217 == v216)
          {
            v217 = v216;
            break;
          }
        }
      }
      if (v217 != v219)
        continue;
      break;
    }
    v214 = v600[0];
LABEL_498:
    v193 = v551;
    if (v214)
    {
      v287 = *(v214 - 1);
      if ((_DWORD)v287)
      {
        v288 = (_DWORD **)v214;
        do
        {
          v289 = *v288;
          if (*v288 != (_DWORD *)-1)
          {
            *v288 = 0;
            if (v289)
            {
              if (v289[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v289 + 8))(v289);
              else
                --v289[2];
            }
          }
          ++v288;
          --v287;
        }
        while (v287);
      }
      WTF::fastFree((WTF *)(v214 - 4), v201);
    }
    v205 = *(_DWORD *)(v203 + 8);
LABEL_500:
    v286 = v205 - 1;
    if (v286)
      *(_DWORD *)(v203 + 8) = v286;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
LABEL_502:
    v199 = (v199 + 1);
    if (v199 < WebCore::StyleSheetList::length(v193, (uint64_t)v201, v202))
      continue;
    break;
  }
LABEL_516:
  WebCore::FrameTree::uniqueName((uint64_t)v541, v197, (WTF::AtomString *)v600);
  v599 = 0;
  v290 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(&v562);
  v291 = v290;
  v292 = (WTF::StringImpl **)v19;
  v293 = 0;
  if (v562)
    v293 = (WTF::StringImpl **)&v562[2 * *((unsigned int *)v562 - 1)];
  if (v293 != v290)
  {
    do
    {
      WTF::FileSystemImpl::lastComponentOfPathIgnoringTrailingSlash((WTF::FileSystemImpl *)(v291 + 1), v19);
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>((uint64_t *)&v599, v291, (const WTF::StringImpl *)&v594, (uint64_t)v576);
      v294 = (WTF::StringImpl *)v594;
      *(_QWORD *)&v594 = 0;
      if (v294)
      {
        if (*(_DWORD *)v294 == 2)
          WTF::StringImpl::destroy(v294, v19);
        else
          *(_DWORD *)v294 -= 2;
      }
      while (1)
      {
        v291 += 2;
        if (v291 == v292)
          break;
        if ((unint64_t)*v291 + 1 > 1)
          goto LABEL_526;
      }
      v291 = v292;
LABEL_526:
      ;
    }
    while (v291 != v293);
  }
  if (!v558)
  {
    v297 = 0;
    v295 = 0;
LABEL_594:
    v296 = (WTF::StringImpl *)((char *)v558 + 16 * v295);
    goto LABEL_595;
  }
  v295 = *((unsigned int *)v558 - 1);
  v296 = (WTF::StringImpl *)((char *)v558 + 16 * v295);
  if (!*((_DWORD *)v558 - 3))
  {
    v297 = (WTF::StringImpl *)((char *)v558 + 16 * v295);
    goto LABEL_594;
  }
  v297 = v558;
  if ((_DWORD)v295)
  {
    v298 = 16 * v295;
    v297 = v558;
    while ((unint64_t)(*(_QWORD *)v297 + 1) <= 1)
    {
      v297 = (WTF::StringImpl *)((char *)v297 + 16);
      v298 -= 16;
      if (!v298)
      {
        v297 = v296;
        break;
      }
    }
  }
LABEL_595:
  if (v558)
    v320 = (WTF::StringImpl *)((char *)v558 + 16 * *((unsigned int *)v558 - 1));
  else
    v320 = 0;
  if (v320 != v297)
  {
    *(int64x2_t *)v553 = vdupq_n_s64(0x7FF8000000000000uLL);
    do
    {
      WebCore::CSSStyleSheet::cssTextWithReplacementURLs(*(_QWORD *)v297, (uint64_t)&v599, (uint64_t)&v596, &v593);
      WebCore::utf8Buffer((uint64_t *)&v593, (uint64_t *)&v574);
      v321 = v574;
      v574 = 0;
      v575 = v321;
      v322 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v297 + 24) + 24);
      if (v322)
        *(_DWORD *)v322 += 2;
      v573 = v322;
      MEMORY[0x19AEA52D4](&v594, &v573, 0);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v572 = v576[0];
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v571 = v576[0];
      v576[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v576);
      LOBYTE(v580) = 0;
      WORD4(v580) = 0;
      memset(v577, 0, sizeof(v577));
      v578 = 0u;
      memset(v579, 0, 33);
      v581 = *(int64x2_t *)v553;
      *(_OWORD *)v582 = *(_OWORD *)v553;
      v583 = 0uLL;
      v585 = *(int64x2_t *)v553;
      v584 = 0x8000000000000000;
      v586 = 0x7FF8000000000000;
      v587 &= 0xF0u;
      v588 &= 0xC000u;
      v589 = v589 & 0xF8 | 2;
      cf = 0;
      v591 = 0;
      BYTE10(v580) = BYTE10(v580) & 0xC0 | 5;
      WebCore::ArchiveResource::create((uint64_t)&v575, (uint64_t)&v594, (_DWORD **)&v572, (_DWORD **)&v571, v600, (WebCore::ResourceResponseBase *)v576, (_DWORD **)v297 + 1, (uint64_t *)&v592);
      v324 = cf;
      cf = 0;
      if (v324)
        CFRelease(v324);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v576, v323);
      v325 = v571;
      v571 = 0;
      if (v325)
      {
        if (*(_DWORD *)v325 == 2)
          WTF::StringImpl::destroy(v325, v19);
        else
          *(_DWORD *)v325 -= 2;
      }
      v326 = v572;
      v572 = 0;
      if (v326)
      {
        if (*(_DWORD *)v326 == 2)
          WTF::StringImpl::destroy(v326, v19);
        else
          *(_DWORD *)v326 -= 2;
      }
      v327 = (WTF::StringImpl *)v594;
      *(_QWORD *)&v594 = 0;
      if (v327)
      {
        if (*(_DWORD *)v327 == 2)
          WTF::StringImpl::destroy(v327, v19);
        else
          *(_DWORD *)v327 -= 2;
      }
      v328 = v573;
      v573 = 0;
      if (v328)
      {
        if (*(_DWORD *)v328 == 2)
          WTF::StringImpl::destroy(v328, v19);
        else
          *(_DWORD *)v328 -= 2;
      }
      v329 = v575;
      v575 = 0;
      if (v329)
      {
        do
        {
          v330 = __ldaxr((unsigned int *)v329);
          v331 = v330 - 1;
        }
        while (__stlxr(v331, (unsigned int *)v329));
        if (!v331)
        {
          atomic_store(1u, (unsigned int *)v329);
          v343 = *((unsigned int *)v329 + 5);
          if ((_DWORD)v343)
          {
            v344 = *((_QWORD *)v329 + 1);
            v345 = v344 + 16 * v343;
            do
            {
              v346 = *(unsigned int **)(v344 + 8);
              *(_QWORD *)(v344 + 8) = 0;
              if (v346)
              {
                do
                {
                  v347 = __ldaxr(v346);
                  v348 = v347 - 1;
                }
                while (__stlxr(v348, v346));
                if (!v348)
                {
                  v531 = v345;
                  v533 = v344;
                  atomic_store(1u, v346);
                  v538 = (WTF *)v346;
                  v349 = v346[6];
                  if ((_DWORD)v349 != -1)
                    ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v349])(v576, v346 + 2);
                  *((_DWORD *)v538 + 6) = -1;
                  WTF::fastFree(v538, v19);
                  v345 = v531;
                  v344 = v533;
                }
              }
              v344 += 16;
            }
            while (v344 != v345);
          }
          v357 = (WTF *)*((_QWORD *)v329 + 1);
          if ((WTF::StringImpl *)((char *)v329 + 24) != v357 && v357 != 0)
          {
            *((_QWORD *)v329 + 1) = 0;
            *((_DWORD *)v329 + 4) = 0;
            WTF::fastFree(v357, v19);
          }
          WTF::fastFree(v329, v19);
        }
      }
      v332 = v574;
      v574 = 0;
      if (v332)
      {
        do
        {
          v333 = __ldaxr((unsigned int *)v332);
          v334 = v333 - 1;
        }
        while (__stlxr(v334, (unsigned int *)v332));
        if (!v334)
        {
          atomic_store(1u, (unsigned int *)v332);
          v350 = *((unsigned int *)v332 + 5);
          if ((_DWORD)v350)
          {
            v351 = *((_QWORD *)v332 + 1);
            v352 = v351 + 16 * v350;
            do
            {
              v353 = *(unsigned int **)(v351 + 8);
              *(_QWORD *)(v351 + 8) = 0;
              if (v353)
              {
                do
                {
                  v354 = __ldaxr(v353);
                  v355 = v354 - 1;
                }
                while (__stlxr(v355, v353));
                if (!v355)
                {
                  v532 = v352;
                  v534 = v351;
                  atomic_store(1u, v353);
                  v539 = (WTF *)v353;
                  v356 = v353[6];
                  if ((_DWORD)v356 != -1)
                    ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v356])(v576, v353 + 2);
                  *((_DWORD *)v539 + 6) = -1;
                  WTF::fastFree(v539, v19);
                  v352 = v532;
                  v351 = v534;
                }
              }
              v351 += 16;
            }
            while (v351 != v352);
          }
          v359 = (WTF *)*((_QWORD *)v332 + 1);
          if ((WTF::StringImpl *)((char *)v332 + 24) != v359 && v359 != 0)
          {
            *((_QWORD *)v332 + 1) = 0;
            *((_DWORD *)v332 + 4) = 0;
            WTF::fastFree(v359, v19);
          }
          WTF::fastFree(v332, v19);
        }
      }
      v335 = v592;
      if (v592)
      {
        v576[0] = v592;
        v592 = 0;
        LODWORD(v336) = HIDWORD(v564);
        if (HIDWORD(v564) == (_DWORD)v564)
        {
          v337 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v563, HIDWORD(v564) + 1, (unint64_t)v576);
          v336 = HIDWORD(v564);
          v338 = v563;
          v339 = *(_QWORD *)v337;
          *(_QWORD *)v337 = 0;
          *((_QWORD *)v338 + v336) = v339;
        }
        else
        {
          v576[0] = 0;
          *((_QWORD *)v563 + HIDWORD(v564)) = v335;
        }
        HIDWORD(v564) = v336 + 1;
        v340 = v576[0];
        v576[0] = 0;
        if (v340)
        {
          if (*((_DWORD *)v340 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v340 + 8))(v340);
          else
            --*((_DWORD *)v340 + 2);
        }
      }
      v341 = v593;
      v593 = 0;
      if (v341)
      {
        if (*(_DWORD *)v341 == 2)
          WTF::StringImpl::destroy(v341, v19);
        else
          *(_DWORD *)v341 -= 2;
      }
      v342 = (WTF::StringImpl *)((char *)v297 + 16);
      v297 = v296;
      if (v342 != v296)
      {
        v297 = v342;
        while ((unint64_t)(*(_QWORD *)v297 + 1) <= 1)
        {
          v297 = (WTF::StringImpl *)((char *)v297 + 16);
          if (v297 == v296)
          {
            v297 = v296;
            break;
          }
        }
      }
    }
    while (v297 != v320);
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 128) + 8) == a3)
    v361 = &v558;
  else
    v361 = (WTF::StringImpl **)&v596;
  if (!*v361)
  {
    v145 = 0;
    v146 = (uint64_t *)v544;
    v363 = v551;
    goto LABEL_882;
  }
  v362 = *((unsigned int *)*v361 - 3);
  v146 = (uint64_t *)v544;
  v363 = v551;
  if (!(_DWORD)v362)
  {
    v145 = 0;
    goto LABEL_882;
  }
  v364 = (v362 - 1) | ((v362 - 1) >> 1) | ((((_DWORD)v362 - 1) | ((v362 - 1) >> 1)) >> 2);
  v365 = v364 | (v364 >> 4) | ((v364 | (v364 >> 4)) >> 8);
  v366 = (v365 | HIWORD(v365)) + 1;
  if (v366 > 0x400)
  {
    if (v366 <= 2 * v362)
    {
LABEL_684:
      LODWORD(v366) = 2 * v366;
      if (v366 <= 0x400)
        goto LABEL_685;
    }
    v367 = (double)v362;
    v368 = (double)v366;
    v369 = 0.416666667;
  }
  else
  {
    if (3 * v366 <= 4 * v362)
      goto LABEL_684;
LABEL_685:
    v367 = (double)v362;
    v368 = (double)v366;
    v369 = 0.604166667;
  }
  if (v368 * v369 <= v367)
    LODWORD(v366) = 2 * v366;
  if (v366 <= 8)
    v429 = 8;
  else
    v429 = v366;
  v430 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v429 + 16));
  v431 = v430;
  v430[2] = v429 - 1;
  v430[3] = v429;
  *v430 = 0;
  v430[1] = v362;
  v432 = *v361;
  if (!*v361)
  {
    v435 = 0;
    v433 = 0;
LABEL_860:
    v434 = (WTF::StringImpl *)((char *)v432 + 16 * v433);
    goto LABEL_861;
  }
  v433 = *((unsigned int *)v432 - 1);
  v434 = (WTF::StringImpl *)((char *)v432 + 16 * v433);
  if (!*((_DWORD *)v432 - 3))
  {
    v435 = (WTF::StringImpl *)((char *)v432 + 16 * v433);
    goto LABEL_860;
  }
  v435 = v432;
  if ((_DWORD)v433)
  {
    v436 = 16 * v433;
    v435 = v432;
    while ((unint64_t)(*(_QWORD *)v435 + 1) <= 1)
    {
      v435 = (WTF::StringImpl *)((char *)v435 + 16);
      v436 -= 16;
      if (!v436)
      {
        v435 = v434;
        break;
      }
    }
  }
LABEL_861:
  v145 = v430 + 4;
  if (v432)
    v437 = (WTF::StringImpl *)((char *)v432 + 16 * *((unsigned int *)v432 - 1));
  else
    v437 = 0;
  while (v435 != v437)
  {
    v438 = v431[2];
    v439 = *(_QWORD *)v435;
    v440 = ~(*(_QWORD *)v435 << 32) + *(_QWORD *)v435;
    v441 = (v440 ^ (v440 >> 22)) + ~((v440 ^ (v440 >> 22)) << 13);
    v442 = (9 * (v441 ^ (v441 >> 8))) ^ ((9 * (v441 ^ (v441 >> 8))) >> 15);
    v443 = v438 & (((v442 + ~(v442 << 27)) >> 31) ^ (v442 + ~((_DWORD)v442 << 27)));
    v444 = 1;
    do
    {
      v445 = v443;
      v446 = *(_QWORD *)&v145[4 * v443];
      v443 = (v443 + v444++) & v438;
    }
    while (v446);
    if (v439)
      ++*(_DWORD *)(v439 + 8);
    v447 = &v145[4 * v445];
    *v447 = v439;
    v448 = (_DWORD *)*((_QWORD *)v435 + 1);
    if (v448)
      *v448 += 2;
    v449 = (WTF::StringImpl *)v447[1];
    v447[1] = v448;
    if (v449)
    {
      if (*(_DWORD *)v449 == 2)
        WTF::StringImpl::destroy(v449, v19);
      else
        *(_DWORD *)v449 -= 2;
    }
    v450 = (WTF::StringImpl *)((char *)v435 + 16);
    v435 = v434;
    if (v450 != v434)
    {
      v435 = v450;
      while ((unint64_t)(*(_QWORD *)v435 + 1) <= 1)
      {
        v435 = (WTF::StringImpl *)((char *)v435 + 16);
        if (v435 == v434)
        {
          v435 = v434;
          break;
        }
      }
    }
  }
LABEL_882:
  v451 = v599;
  if (v599)
  {
    v494 = *((unsigned int *)v599 - 1);
    if ((_DWORD)v494)
    {
      v495 = v599;
      do
      {
        v496 = *(WTF::StringImpl **)v495;
        if (*(_QWORD *)v495 != -1)
        {
          v497 = (WTF::StringImpl *)*((_QWORD *)v495 + 1);
          *((_QWORD *)v495 + 1) = 0;
          if (v497)
          {
            if (*(_DWORD *)v497 == 2)
            {
              WTF::StringImpl::destroy(v497, v19);
              v496 = *(WTF::StringImpl **)v495;
            }
            else
            {
              *(_DWORD *)v497 -= 2;
            }
          }
          *(_QWORD *)v495 = 0;
          if (v496)
          {
            if (*(_DWORD *)v496 == 2)
              WTF::StringImpl::destroy(v496, v19);
            else
              *(_DWORD *)v496 -= 2;
          }
        }
        v495 = (WTF::StringImpl *)((char *)v495 + 16);
        --v494;
      }
      while (v494);
    }
    WTF::fastFree((WTF::StringImpl *)((char *)v451 - 16), v19);
  }
  v452 = (WTF::StringImpl *)v600[0];
  v600[0] = 0;
  if (v452)
  {
    if (*(_DWORD *)v452 == 2)
      WTF::StringImpl::destroy(v452, v19);
    else
      *(_DWORD *)v452 -= 2;
  }
  if (*(_DWORD *)v363 == 1)
  {
    WebCore::StyleSheetList::~StyleSheetList(v363, v19);
    WTF::fastFree(v455, v456);
  }
  else
  {
    --*(_DWORD *)v363;
  }
  v453 = v596;
  if (v596)
  {
    v498 = *((unsigned int *)v596 - 1);
    if ((_DWORD)v498)
    {
      v499 = v596;
      do
      {
        v500 = *v499;
        if (*v499 != (WTF::StringImpl *)-1)
        {
          v501 = v499[1];
          v499[1] = 0;
          if (v501)
          {
            if (*(_DWORD *)v501 == 2)
            {
              WTF::StringImpl::destroy(v501, v19);
              v500 = *v499;
            }
            else
            {
              *(_DWORD *)v501 -= 2;
            }
          }
          *v499 = 0;
          if (v500)
          {
            if (*((_DWORD *)v500 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v500 + 8))(v500);
            else
              --*((_DWORD *)v500 + 2);
          }
        }
        v499 += 2;
        --v498;
      }
      while (v498);
    }
    WTF::fastFree((WTF *)(v453 - 2), v19);
  }
  v454 = v558;
  if (v558)
  {
    v502 = *((unsigned int *)v558 - 1);
    if ((_DWORD)v502)
    {
      v503 = v558;
      do
      {
        v504 = *(_DWORD **)v503;
        if (*(_QWORD *)v503 != -1)
        {
          v505 = (WTF::StringImpl *)*((_QWORD *)v503 + 1);
          *((_QWORD *)v503 + 1) = 0;
          if (v505)
          {
            if (*(_DWORD *)v505 == 2)
            {
              WTF::StringImpl::destroy(v505, v19);
              v504 = *(_DWORD **)v503;
            }
            else
            {
              *(_DWORD *)v505 -= 2;
            }
          }
          *(_QWORD *)v503 = 0;
          if (v504)
          {
            if (v504[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v504 + 8))(v504);
            else
              --v504[2];
          }
        }
        v503 = (WTF::StringImpl *)((char *)v503 + 16);
        --v502;
      }
      while (v502);
    }
    WTF::fastFree((WTF::StringImpl *)((char *)v454 - 16), v19);
  }
  if (*((_DWORD *)v547 + 6) == 2)
  {
    if ((*((_WORD *)v547 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v547, v19);
  }
  else
  {
    *((_DWORD *)v547 + 6) -= 2;
  }
LABEL_262:
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    unk_1ECE90A5B = 0;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    v148 = v540;
    v149 = v542;
    if (a4[3])
      goto LABEL_562;
    goto LABEL_584;
  }
  v147 = a4[3];
  v148 = v540;
  v149 = v542;
  if (!byte_1ECE90A59)
    goto LABEL_561;
  v558 = 0;
  v559 = 0;
  if (!(_DWORD)v147)
    goto LABEL_560;
  v150 = *(WTF **)a4;
  v151 = 8 * v147;
  while (2)
  {
    v152 = *(_QWORD *)v150;
    v153 = *(_WORD *)(*(_QWORD *)v150 + 28);
    if ((v153 & 0x10) != 0
      && (v153 & 0x110) != 0x110
      && *(_QWORD *)(*(_QWORD *)(v152 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
    {
      v154 = *(WTF::StringImpl **)(v152 + 128);
      if (v154)
      {
        v155 = *(_DWORD *)v154 + 2;
        *(_DWORD *)v154 = v155;
        v576[0] = v154;
        if (!*((_DWORD *)v154 + 1))
        {
          v576[0] = 0;
          goto LABEL_276;
        }
        LODWORD(v156) = HIDWORD(v559);
        if (HIDWORD(v559) == (_DWORD)v559)
        {
          v158 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v558, HIDWORD(v559) + 1, (unint64_t)v576);
          v156 = HIDWORD(v559);
          v159 = v558;
          v160 = *v158;
          *v158 = 0;
          *((_QWORD *)v159 + v156) = v160;
        }
        else
        {
          v576[0] = 0;
          *((_QWORD *)v558 + HIDWORD(v559)) = v154;
        }
        HIDWORD(v559) = v156 + 1;
        v154 = v576[0];
        v576[0] = 0;
        if (v154)
        {
          v155 = *(_DWORD *)v154;
LABEL_276:
          v157 = v155 - 2;
          if (v157)
            *(_DWORD *)v154 = v157;
          else
            WTF::StringImpl::destroy(v154, v19);
        }
      }
    }
    v150 = (WTF *)((char *)v150 + 8);
    v151 -= 8;
    if (v151)
      continue;
    break;
  }
  if (HIDWORD(v559))
  {
    v161 = *(WebCore::Document **)(a3 + 296);
    v162 = *((_QWORD *)v161 + 382);
    if (!v162)
    {
      v524 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v524, v161);
      v525 = (WebCore::Editor *)*((_QWORD *)v161 + 382);
      *((_QWORD *)v161 + 382) = v524;
      if (v525)
      {
        WebCore::Editor::~Editor(v525, v19);
        if (*(_DWORD *)v526)
        {
          *(_QWORD *)(v526 + 496) = 0;
          *(_OWORD *)(v526 + 464) = 0u;
          *(_OWORD *)(v526 + 480) = 0u;
          *(_OWORD *)(v526 + 432) = 0u;
          *(_OWORD *)(v526 + 448) = 0u;
          *(_OWORD *)(v526 + 400) = 0u;
          *(_OWORD *)(v526 + 416) = 0u;
          *(_OWORD *)(v526 + 368) = 0u;
          *(_OWORD *)(v526 + 384) = 0u;
          *(_OWORD *)(v526 + 336) = 0u;
          *(_OWORD *)(v526 + 352) = 0u;
          *(_OWORD *)(v526 + 304) = 0u;
          *(_OWORD *)(v526 + 320) = 0u;
          *(_OWORD *)(v526 + 272) = 0u;
          *(_OWORD *)(v526 + 288) = 0u;
          *(_OWORD *)(v526 + 240) = 0u;
          *(_OWORD *)(v526 + 256) = 0u;
          *(_OWORD *)(v526 + 208) = 0u;
          *(_OWORD *)(v526 + 224) = 0u;
          *(_OWORD *)(v526 + 176) = 0u;
          *(_OWORD *)(v526 + 192) = 0u;
          *(_OWORD *)(v526 + 144) = 0u;
          *(_OWORD *)(v526 + 160) = 0u;
          *(_OWORD *)(v526 + 112) = 0u;
          *(_OWORD *)(v526 + 128) = 0u;
          *(_OWORD *)(v526 + 80) = 0u;
          *(_OWORD *)(v526 + 96) = 0u;
          *(_OWORD *)(v526 + 48) = 0u;
          *(_OWORD *)(v526 + 64) = 0u;
          *(_OWORD *)(v526 + 16) = 0u;
          *(_OWORD *)(v526 + 32) = 0u;
          *(_OWORD *)v526 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v526, v19);
        }
      }
      v162 = *((_QWORD *)v161 + 382);
    }
    v163 = *(_QWORD *)(v162 + 8);
    if (v163)
    {
      v164 = *(_QWORD *)(v163 + 8);
      if (v164)
      {
        WebCore::FrameTree::uniqueName((uint64_t)v541, v19, (WTF::AtomString *)v600);
        (*(void (**)(WTF::StringImpl ***__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v164 + 232))(&v596, v164, &v558);
        v165 = v596;
        if (!v598)
          goto LABEL_552;
        v166 = &v596[3 * v598];
        *(int64x2_t *)v552 = vdupq_n_s64(0x7FF8000000000000uLL);
        do
        {
          WebCore::HTMLAttachmentElement::archiveResourceURL((uint64_t)&v594);
          v167 = (unsigned int *)v165[2];
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 + 1, v167));
          v592 = 0;
          v593 = (WTF::StringImpl *)v167;
          v576[0] = 0;
          WTF::URL::invalidate((WTF::URL *)v576);
          LOBYTE(v580) = 0;
          WORD4(v580) = 0;
          memset(v577, 0, sizeof(v577));
          v578 = 0u;
          memset(v579, 0, 33);
          v581 = *(int64x2_t *)v552;
          *(_OWORD *)v582 = *(_OWORD *)v552;
          v583 = 0uLL;
          v585 = *(int64x2_t *)v552;
          v584 = 0x8000000000000000;
          v586 = 0x7FF8000000000000;
          v587 &= 0xF0u;
          v588 &= 0xC000u;
          v589 = v589 & 0xF8 | 2;
          cf = 0;
          v591 = 0;
          BYTE10(v580) = BYTE10(v580) & 0xC0 | 5;
          v575 = 0;
          WebCore::ArchiveResource::create((uint64_t)&v593, (uint64_t)&v594, (_DWORD **)v165 + 1, (_DWORD **)&v592, v600, (WebCore::ResourceResponseBase *)v576, (_DWORD **)&v575, (uint64_t *)&v599);
          v170 = v575;
          v575 = 0;
          if (v170)
          {
            if (*(_DWORD *)v170 == 2)
              WTF::StringImpl::destroy(v170, v169);
            else
              *(_DWORD *)v170 -= 2;
          }
          v171 = cf;
          cf = 0;
          if (v171)
            CFRelease(v171);
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v576, v169);
          v172 = v592;
          v592 = 0;
          if (v172)
          {
            if (*(_DWORD *)v172 == 2)
              WTF::StringImpl::destroy(v172, v19);
            else
              *(_DWORD *)v172 -= 2;
          }
          v173 = v593;
          v593 = 0;
          if (v173)
          {
            do
            {
              v174 = __ldaxr((unsigned int *)v173);
              v175 = v174 - 1;
            }
            while (__stlxr(v175, (unsigned int *)v173));
            if (!v175)
            {
              atomic_store(1u, (unsigned int *)v173);
              v183 = *((unsigned int *)v173 + 5);
              if ((_DWORD)v183)
              {
                v184 = (unsigned int **)*((_QWORD *)v173 + 1);
                v185 = (WTF *)&v184[2 * v183];
                do
                {
                  v186 = v184[1];
                  v184[1] = 0;
                  if (v186)
                  {
                    do
                    {
                      v187 = __ldaxr(v186);
                      v188 = v187 - 1;
                    }
                    while (__stlxr(v188, v186));
                    if (!v188)
                    {
                      v537 = v185;
                      v546 = (WebCore::Node *)v184;
                      atomic_store(1u, v186);
                      v550 = (WTF *)v186;
                      v189 = v186[6];
                      if ((_DWORD)v189 != -1)
                        ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v189])(v576, v186 + 2);
                      *((_DWORD *)v550 + 6) = -1;
                      WTF::fastFree(v550, v19);
                      v184 = (unsigned int **)v546;
                      v185 = v537;
                    }
                  }
                  v184 += 2;
                }
                while (v184 != (unsigned int **)v185);
              }
              v190 = (WTF *)*((_QWORD *)v173 + 1);
              if ((WTF::StringImpl *)((char *)v173 + 24) != v190 && v190 != 0)
              {
                *((_QWORD *)v173 + 1) = 0;
                *((_DWORD *)v173 + 4) = 0;
                WTF::fastFree(v190, v19);
              }
              WTF::fastFree(v173, v19);
            }
          }
          v176 = v599;
          if (v599)
          {
            v576[0] = v599;
            v599 = 0;
            LODWORD(v177) = HIDWORD(v564);
            if (HIDWORD(v564) == (_DWORD)v564)
            {
              v178 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v563, HIDWORD(v564) + 1, (unint64_t)v576);
              v177 = HIDWORD(v564);
              v179 = v563;
              v180 = *(_QWORD *)v178;
              *(_QWORD *)v178 = 0;
              *((_QWORD *)v179 + v177) = v180;
            }
            else
            {
              v576[0] = 0;
              *((_QWORD *)v563 + HIDWORD(v564)) = v176;
            }
            HIDWORD(v564) = v177 + 1;
            v181 = v576[0];
            v576[0] = 0;
            if (v181)
            {
              if (*((_DWORD *)v181 + 2) == 1)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v181 + 8))(v181);
              else
                --*((_DWORD *)v181 + 2);
            }
          }
          v182 = (WTF::StringImpl *)v594;
          *(_QWORD *)&v594 = 0;
          if (v182)
          {
            if (*(_DWORD *)v182 == 2)
              WTF::StringImpl::destroy(v182, v19);
            else
              *(_DWORD *)v182 -= 2;
          }
          v165 += 3;
        }
        while (v165 != v166);
        v165 = v596;
        if (v598)
        {
          v299 = 24 * v598;
          v300 = (uint64_t *)(v596 + 2);
          v149 = v542;
          v146 = (uint64_t *)v544;
          do
          {
            WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v300, v19);
            v301 = (WTF::StringImpl *)*(v300 - 1);
            *(v300 - 1) = 0;
            if (v301)
            {
              if (*(_DWORD *)v301 == 2)
                WTF::StringImpl::destroy(v301, v19);
              else
                *(_DWORD *)v301 -= 2;
            }
            v302 = (WTF::StringImpl *)*(v300 - 2);
            *(v300 - 2) = 0;
            if (v302)
            {
              if (*(_DWORD *)v302 == 2)
                WTF::StringImpl::destroy(v302, v19);
              else
                *(_DWORD *)v302 -= 2;
            }
            v300 += 3;
            v299 -= 24;
          }
          while (v299);
          v165 = v596;
LABEL_552:
          if (v165)
          {
LABEL_553:
            v596 = 0;
            v597 = 0;
            WTF::fastFree((WTF *)v165, v19);
          }
        }
        else
        {
          v149 = v542;
          v146 = (uint64_t *)v544;
          if (v596)
            goto LABEL_553;
        }
        v303 = (WTF::StringImpl *)v600[0];
        v600[0] = 0;
        if (v303)
        {
          if (*(_DWORD *)v303 == 2)
            WTF::StringImpl::destroy(v303, v19);
          else
            *(_DWORD *)v303 -= 2;
        }
      }
    }
    if (HIDWORD(v559))
    {
      v466 = v558;
      v467 = 8 * HIDWORD(v559);
      do
      {
        v468 = *(WTF::StringImpl **)v466;
        *(_QWORD *)v466 = 0;
        if (v468)
        {
          if (*(_DWORD *)v468 == 2)
            WTF::StringImpl::destroy(v468, v19);
          else
            *(_DWORD *)v468 -= 2;
        }
        v466 = (WTF::StringImpl *)((char *)v466 + 8);
        v467 -= 8;
      }
      while (v467);
    }
  }
  v304 = v558;
  if (v558)
  {
    v558 = 0;
    LODWORD(v559) = 0;
    WTF::fastFree(v304, v19);
  }
LABEL_560:
  LODWORD(v147) = a4[3];
LABEL_561:
  if ((_DWORD)v147)
  {
LABEL_562:
    if ((*(_WORD *)(**(_QWORD **)a4 + 28) & 0xF000) == 0x9000)
    {
      v305 = *(_QWORD *)(*(_QWORD *)(a3 + 280) + 88);
      if (v305)
        ++*(_DWORD *)(v305 + 24);
      v306 = *(unsigned int *)(v305 + 2828);
      if (!(_DWORD)v306)
        goto LABEL_582;
      v307 = *(WTF::StringImpl ***)(v305 + 2816);
      v308 = 80 * v306;
      do
      {
        WebCore::DocumentLoader::subresource(v305, v307, v20, (uint64_t *)v576);
        v309 = v576[0];
        if (v576[0])
        {
          *(WTF::StringImpl **)&v594 = v576[0];
          v576[0] = 0;
          LODWORD(v310) = HIDWORD(v564);
          if (HIDWORD(v564) == (_DWORD)v564)
          {
            v311 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v563, HIDWORD(v564) + 1, (unint64_t)&v594);
            v310 = HIDWORD(v564);
            v312 = v563;
            v313 = *(_QWORD *)v311;
            *(_QWORD *)v311 = 0;
            *((_QWORD *)v312 + v310) = v313;
          }
          else
          {
            *(_QWORD *)&v594 = 0;
            *((_QWORD *)v563 + HIDWORD(v564)) = v309;
          }
          HIDWORD(v564) = v310 + 1;
          v314 = (_DWORD *)v594;
          *(_QWORD *)&v594 = 0;
          if (v314)
          {
            if (v314[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v314 + 8))(v314);
            else
              --v314[2];
          }
          v315 = v576[0];
          v576[0] = 0;
          if (v315)
          {
            if (*((_DWORD *)v315 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v315 + 8))(v315);
            else
              --*((_DWORD *)v315 + 2);
          }
        }
        v307 += 10;
        v308 -= 80;
      }
      while (v308);
      if (v305)
      {
LABEL_582:
        if (*(_DWORD *)(v305 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v305 + 24))(v305);
        else
          --*(_DWORD *)(v305 + 24);
      }
    }
  }
LABEL_584:
  if (!*v146)
    goto LABEL_787;
  v316 = *(_QWORD *)(a3 + 296);
  if (!v316 || !v568 || !*((_DWORD *)v568 + 1))
  {
    *v148 = 0;
    if (v145)
      goto LABEL_828;
    goto LABEL_791;
  }
  WebCore::MIMETypeRegistry::preferredExtensionForMIMEType((WebCore::MIMETypeRegistry *)&WebCore::textHTMLContentTypeAtomData, &v558);
  v317 = v558;
  if (!v558)
    goto LABEL_591;
  v319 = *((_DWORD *)v558 + 1);
  if (!v319)
  {
LABEL_704:
    v318 = (WTF::StringImpl *)*((_QWORD *)v317 + 1);
    goto LABEL_705;
  }
  *(_DWORD *)v558 += 2;
  if (v319 < 0 || __OFADD__(v319, 1))
  {
    v576[0] = 0;
    goto LABEL_1086;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((v319 + 1), (*((_DWORD *)v317 + 4) >> 2) & 1, 46, (uint64_t)v317, v576);
  v371 = v576[0];
  if (!v576[0])
  {
LABEL_1086:
    __break(0xC471u);
    JUMPOUT(0x195F40C34);
  }
  v576[0] = 0;
  v372 = v558;
  v558 = v371;
  if (v372)
  {
    if (*(_DWORD *)v372 == 2)
    {
      WTF::StringImpl::destroy(v372, v370);
      v493 = v576[0];
      v576[0] = 0;
      if (v493)
      {
        if (*(_DWORD *)v493 == 2)
          WTF::StringImpl::destroy(v493, v370);
        else
          *(_DWORD *)v493 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v372 -= 2;
      v576[0] = 0;
    }
  }
  if (*(_DWORD *)v317 == 2)
    WTF::StringImpl::destroy(v317, v370);
  else
    *(_DWORD *)v317 -= 2;
  v317 = v558;
  if (v558)
  {
    v319 = *((_DWORD *)v558 + 1);
    goto LABEL_704;
  }
LABEL_591:
  v318 = 0;
  v319 = 0;
LABEL_705:
  if (!*v146)
  {
    v374 = 0;
    if (!v319)
      goto LABEL_709;
    goto LABEL_1026;
  }
  v373 = WTF::StringImpl::endsWith();
  v374 = *v146;
  if ((v373 & 1) == 0)
  {
    if (v374)
    {
      v375 = 0;
      *(_DWORD *)v374 += 2;
      goto LABEL_712;
    }
LABEL_1026:
    v375 = 1;
LABEL_712:
    v376 = v558;
    if (v558)
      *(_DWORD *)v558 += 2;
    if ((v375 & 1) != 0)
    {
      v377 = 0;
      if (v376)
        goto LABEL_716;
    }
    else
    {
      v377 = *(_DWORD *)(v374 + 4);
      if (v376)
      {
LABEL_716:
        v378 = *((_DWORD *)v376 + 1);
LABEL_717:
        if (((v378 | v377) & 0x80000000) == 0)
        {
          v379 = (v377 + v378);
          if (!__OFADD__(v377, v378))
          {
            if ((v375 & 1) == 0)
            {
              v380 = *(_DWORD *)(v374 + 16);
              v381 = (v380 >> 2) & 1;
              if (!v376 || (v380 & 4) == 0)
              {
LABEL_723:
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v377 + v378), v381, v374, (uint64_t)v376, &v596);
                if (v596)
                {
                  if (v376)
                  {
                    if (*(_DWORD *)v376 == 2)
                      WTF::StringImpl::destroy(v376, v318);
                    else
                      *(_DWORD *)v376 -= 2;
                  }
LABEL_727:
                  if (!v374)
                    goto LABEL_730;
                  goto LABEL_728;
                }
LABEL_1082:
                __break(0xC471u);
                JUMPOUT(0x195F41FD0);
              }
LABEL_722:
              v381 = (*((unsigned __int8 *)v376 + 16) >> 2) & 1;
              goto LABEL_723;
            }
            if (v376)
              goto LABEL_722;
            if (!(_DWORD)v379)
            {
              v463 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
LABEL_1080:
              v596 = (WTF::StringImpl **)v463;
              goto LABEL_727;
            }
            if ((v379 & 0x80000000) == 0)
            {
              WTF::tryFastCompactMalloc((WTF *)(v379 + 20));
              v463 = v576[0];
              if (v576[0])
              {
                v464 = (char *)v576[0] + 20;
                *(_DWORD *)v576[0] = 2;
                *((_DWORD *)v463 + 1) = v379;
                *((_QWORD *)v463 + 1) = (char *)v463 + 20;
                *((_DWORD *)v463 + 4) = 4;
                if (v374)
                {
                  v318 = *(WTF::StringImpl **)(v374 + 8);
                  v465 = *(unsigned int *)(v374 + 4);
                  if ((*(_BYTE *)(v374 + 16) & 4) != 0)
                  {
                    if ((_DWORD)v465)
                    {
                      if ((_DWORD)v465 == 1)
                        *v464 = *(_BYTE *)v318;
                      else
                        memcpy(v464, v318, v465);
                    }
                    v596 = (WTF::StringImpl **)v463;
LABEL_728:
                    if (*(_DWORD *)v374 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v374, v318);
                    else
                      *(_DWORD *)v374 -= 2;
                    goto LABEL_730;
                  }
                  v527 = &v464[v465];
                  if (v465 >= 0x10)
                  {
                    v528 = &v464[v465 & 0xFFFFFFF0];
                    do
                    {
                      v529 = (unsigned __int128)vld2q_s8((const char *)v318);
                      v318 = (WTF::StringImpl *)((char *)v318 + 32);
                      *(_OWORD *)v464 = v529;
                      v464 += 16;
                    }
                    while (v464 != v528);
                    v464 = v528;
                  }
                  while (v464 != v527)
                  {
                    v530 = *(_BYTE *)v318;
                    v318 = (WTF::StringImpl *)((char *)v318 + 2);
                    *v464++ = v530;
                  }
                }
                goto LABEL_1080;
              }
            }
          }
        }
        v596 = 0;
        goto LABEL_1082;
      }
    }
    v378 = 0;
    goto LABEL_717;
  }
  if (v374)
    *(_DWORD *)v374 += 2;
LABEL_709:
  v596 = (WTF::StringImpl **)v374;
LABEL_730:
  if (*(_QWORD *)(*(_QWORD *)(a3 + 128) + 8) == a3)
  {
    v389 = v596;
    if (v596)
      *(_DWORD *)v596 += 2;
    v600[0] = v389;
  }
  else
  {
    v382 = v560;
    if (v560)
      *(_DWORD *)v560 += 2;
    v557 = v382;
    v383 = *(_QWORD *)(a3 + 32);
    v576[0] = *(WTF::StringImpl **)(a3 + 40);
    LOBYTE(v600[0]) = 45;
    *(_QWORD *)&v594 = v383;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((unint64_t *)v576, (char *)v600, (unint64_t *)&v594, &v556);
    if (!v556)
    {
      __break(0xC471u);
      JUMPOUT(0x195F41FD8);
    }
    v384 = v558;
    if (v558)
      *(_DWORD *)v558 += 2;
    v555 = v384;
    v576[0] = (WTF::StringImpl *)"/frame_";
    v576[1] = (WTF::StringImpl *)8;
    WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)&v557, (uint64_t)v576, (uint64_t *)&v556, (uint64_t *)&v555, v600);
    if (!v600[0])
    {
      __break(0xC471u);
      JUMPOUT(0x195F41FE0);
    }
    v386 = v555;
    v555 = 0;
    if (v386)
    {
      if (*(_DWORD *)v386 == 2)
        WTF::StringImpl::destroy(v386, v385);
      else
        *(_DWORD *)v386 -= 2;
    }
    v387 = v556;
    v556 = 0;
    if (v387)
    {
      if (*(_DWORD *)v387 == 2)
        WTF::StringImpl::destroy(v387, v385);
      else
        *(_DWORD *)v387 -= 2;
    }
    v388 = v557;
    v557 = 0;
    if (v388)
    {
      if (*(_DWORD *)v388 == 2)
        WTF::StringImpl::destroy(v388, v385);
      else
        *(_DWORD *)v388 -= 2;
    }
  }
  v390 = *(unsigned int *)(a6 + 12);
  if ((_DWORD)v390)
  {
    v391 = *(_QWORD **)a6;
    v392 = 24 * v390;
    while (!MEMORY[0x19AEA53F4](*v391, "base", 4))
    {
      v391 += 3;
      v392 -= 24;
      if (!v392)
      {
        LOBYTE(v390) = 0;
        goto LABEL_755;
      }
    }
    LOBYTE(v390) = 2;
  }
LABEL_755:
  v393 = *(_QWORD *)(v316 + 928);
  if (!v393 || !*(_DWORD *)(v393 + 4))
    LOBYTE(v390) = 0;
  v394 = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v316 + 40) + 8) + 3358) & 1) == 0;
  v576[0] = (WTF::StringImpl *)&off_1E33AD290;
  memset(&v576[1], 0, 28);
  BYTE4(v576[4]) = 1;
  LOBYTE(v577[0]) = v390;
  BYTE1(v577[0]) = v394;
  memset((char *)v577 + 4, 0, 20);
  LOBYTE(v577[3]) = 2;
  v578 = 0u;
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v579, (uint64_t *)a6);
  v395 = v562;
  v562 = 0;
  v594 = 0u;
  *(_QWORD *)&v579[16] = v395;
  *(_QWORD *)&v579[24] = v145;
  v579[32] = 1;
  WebCore::MarkupAccumulator::URLReplacementData::~URLReplacementData((WebCore::MarkupAccumulator::URLReplacementData *)&v594, v396);
  WebCore::MarkupAccumulator::serializeNodes(v576, v316, 0, &v594);
  WebCore::MarkupAccumulator::~MarkupAccumulator((WebCore::MarkupAccumulator *)v576, v397);
  WebCore::utf8Buffer((uint64_t *)&v594, (uint64_t *)&v592);
  v398 = v592;
  v592 = 0;
  v593 = v398;
  WebCore::ResourceResponse::platformLazyInit(v149, 1);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v575 = v576[0];
  WebCore::FrameTree::uniqueName((uint64_t)v541, v399, (WTF::AtomString *)&v574);
  v576[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v576);
  LOBYTE(v580) = 0;
  WORD4(v580) = 0;
  memset(v577, 0, sizeof(v577));
  v578 = 0u;
  memset(v579, 0, 33);
  v581 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)v582 = v581;
  v583 = 0u;
  v585 = v581;
  v584 = 0x8000000000000000;
  v586 = 0x7FF8000000000000;
  v587 &= 0xF0u;
  v588 &= 0xC000u;
  v589 = v589 & 0xF8 | 2;
  cf = 0;
  v591 = 0;
  BYTE10(v580) = BYTE10(v580) & 0xC0 | 5;
  WebCore::ArchiveResource::create((uint64_t)&v593, (uint64_t)&v568, v535, (_DWORD **)&v575, (_DWORD **)&v574, (WebCore::ResourceResponseBase *)v576, v600, (uint64_t *)&v599);
  v401 = v567;
  v567 = v599;
  if (v401)
  {
    if (*((_DWORD *)v401 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v401 + 8))(v401);
    else
      --*((_DWORD *)v401 + 2);
  }
  v599 = 0;
  v402 = cf;
  cf = 0;
  if (v402)
    CFRelease(v402);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v576, v400);
  v404 = v574;
  v574 = 0;
  if (v404)
  {
    if (*(_DWORD *)v404 == 2)
      WTF::StringImpl::destroy(v404, v403);
    else
      *(_DWORD *)v404 -= 2;
  }
  v405 = v575;
  v575 = 0;
  if (v405)
  {
    if (*(_DWORD *)v405 == 2)
      WTF::StringImpl::destroy(v405, v403);
    else
      *(_DWORD *)v405 -= 2;
  }
  v406 = v593;
  v593 = 0;
  if (v406)
  {
    do
    {
      v407 = __ldaxr((unsigned int *)v406);
      v408 = v407 - 1;
    }
    while (__stlxr(v408, (unsigned int *)v406));
    if (!v408)
    {
      atomic_store(1u, (unsigned int *)v406);
      v506 = *((unsigned int *)v406 + 5);
      if ((_DWORD)v506)
      {
        v507 = *((_QWORD *)v406 + 1);
        v508 = v507 + 16 * v506;
        do
        {
          v509 = *(unsigned int **)(v507 + 8);
          *(_QWORD *)(v507 + 8) = 0;
          if (v509)
          {
            do
            {
              v510 = __ldaxr(v509);
              v511 = v510 - 1;
            }
            while (__stlxr(v511, v509));
            if (!v511)
            {
              atomic_store(1u, v509);
              v512 = v509[6];
              if ((_DWORD)v512 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v512])(v576, v509 + 2);
              v509[6] = -1;
              WTF::fastFree((WTF *)v509, v403);
            }
          }
          v507 += 16;
        }
        while (v507 != v508);
      }
      v520 = (WTF *)*((_QWORD *)v406 + 1);
      if ((WTF::StringImpl *)((char *)v406 + 24) != v520 && v520 != 0)
      {
        *((_QWORD *)v406 + 1) = 0;
        *((_DWORD *)v406 + 4) = 0;
        WTF::fastFree(v520, v403);
      }
      WTF::fastFree(v406, v403);
    }
  }
  v409 = v592;
  v592 = 0;
  if (v409)
  {
    do
    {
      v410 = __ldaxr((unsigned int *)v409);
      v411 = v410 - 1;
    }
    while (__stlxr(v411, (unsigned int *)v409));
    if (!v411)
    {
      atomic_store(1u, (unsigned int *)v409);
      v513 = *((unsigned int *)v409 + 5);
      if ((_DWORD)v513)
      {
        v514 = *((_QWORD *)v409 + 1);
        v515 = v514 + 16 * v513;
        do
        {
          v516 = *(unsigned int **)(v514 + 8);
          *(_QWORD *)(v514 + 8) = 0;
          if (v516)
          {
            do
            {
              v517 = __ldaxr(v516);
              v518 = v517 - 1;
            }
            while (__stlxr(v518, v516));
            if (!v518)
            {
              atomic_store(1u, v516);
              v519 = v516[6];
              if ((_DWORD)v519 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v519])(v576, v516 + 2);
              v516[6] = -1;
              WTF::fastFree((WTF *)v516, v403);
            }
          }
          v514 += 16;
        }
        while (v514 != v515);
      }
      v522 = (WTF *)*((_QWORD *)v409 + 1);
      if ((WTF::StringImpl *)((char *)v409 + 24) != v522 && v522 != 0)
      {
        *((_QWORD *)v409 + 1) = 0;
        *((_DWORD *)v409 + 4) = 0;
        WTF::fastFree(v522, v403);
      }
      WTF::fastFree(v409, v403);
    }
  }
  v412 = (WTF::StringImpl *)v594;
  *(_QWORD *)&v594 = 0;
  if (v412)
  {
    if (*(_DWORD *)v412 == 2)
      WTF::StringImpl::destroy(v412, v403);
    else
      *(_DWORD *)v412 -= 2;
  }
  v413 = (WTF::StringImpl *)v600[0];
  v600[0] = 0;
  if (v413)
  {
    if (*(_DWORD *)v413 == 2)
      WTF::StringImpl::destroy(v413, v403);
    else
      *(_DWORD *)v413 -= 2;
  }
  v414 = (WTF::StringImpl *)v596;
  v596 = 0;
  if (v414)
  {
    if (*(_DWORD *)v414 == 2)
      WTF::StringImpl::destroy(v414, v403);
    else
      *(_DWORD *)v414 -= 2;
  }
  v415 = v558;
  v558 = 0;
  if (v415)
  {
    if (*(_DWORD *)v415 == 2)
      WTF::StringImpl::destroy(v415, v403);
    else
      *(_DWORD *)v415 -= 2;
  }
  v145 = 0;
LABEL_787:
  *(_QWORD *)&v594 = v567;
  v567 = 0;
  WebCore::LegacyWebArchive::create((uint64_t *)&v594, (uint64_t)&v563, (uint64_t)&v565, (uint64_t *)v576);
  *v148 = v576[0];
  if ((_QWORD)v594)
  {
    if (*(_DWORD *)(v594 + 8) != 1)
    {
      --*(_DWORD *)(v594 + 8);
      goto LABEL_790;
    }
    (*(void (**)(void))(*(_QWORD *)v594 + 8))();
    if (v145)
    {
LABEL_828:
      v425 = *(v145 - 1);
      if ((_DWORD)v425)
      {
        v426 = v145;
        do
        {
          v427 = *(_DWORD **)v426;
          if (*(_QWORD *)v426 != -1)
          {
            v428 = (WTF::StringImpl *)*((_QWORD *)v426 + 1);
            *((_QWORD *)v426 + 1) = 0;
            if (v428)
            {
              if (*(_DWORD *)v428 == 2)
              {
                WTF::StringImpl::destroy(v428, v19);
                v427 = *(_DWORD **)v426;
              }
              else
              {
                *(_DWORD *)v428 -= 2;
              }
            }
            *(_QWORD *)v426 = 0;
            if (v427)
            {
              if (v427[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v427 + 8))(v427);
              else
                --v427[2];
            }
          }
          v426 += 4;
          --v425;
        }
        while (v425);
      }
      WTF::fastFree((WTF *)(v145 - 4), v19);
    }
  }
  else
  {
LABEL_790:
    if (v145)
      goto LABEL_828;
  }
LABEL_791:
  v416 = v560;
  v560 = 0;
  if (v416)
  {
    if (*(_DWORD *)v416 == 2)
      WTF::StringImpl::destroy(v416, v19);
    else
      *(_DWORD *)v416 -= 2;
  }
  if (v561)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v561, v19);
  v417 = v562;
  if (v562)
  {
    v459 = *((unsigned int *)v562 - 1);
    if ((_DWORD)v459)
    {
      v460 = (WTF::StringImpl **)v562;
      do
      {
        v461 = *v460;
        if (*v460 != (WTF::StringImpl *)-1)
        {
          v462 = v460[1];
          v460[1] = 0;
          if (v462)
          {
            if (*(_DWORD *)v462 == 2)
            {
              WTF::StringImpl::destroy(v462, v19);
              v461 = *v460;
            }
            else
            {
              *(_DWORD *)v462 -= 2;
            }
          }
          *v460 = 0;
          if (v461)
          {
            if (*(_DWORD *)v461 == 2)
              WTF::StringImpl::destroy(v461, v19);
            else
              *(_DWORD *)v461 -= 2;
          }
        }
        v460 += 2;
        --v459;
      }
      while (v459);
    }
    WTF::fastFree((WTF *)(v417 - 2), v19);
  }
  v418 = v563;
  if (HIDWORD(v564))
  {
    v419 = 8 * HIDWORD(v564);
    do
    {
      v420 = *(_DWORD **)v418;
      *(_QWORD *)v418 = 0;
      if (v420)
      {
        if (v420[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v420 + 8))(v420);
        else
          --v420[2];
      }
      v418 = (WTF::StringImpl *)((char *)v418 + 8);
      v419 -= 8;
    }
    while (v419);
    v418 = v563;
  }
  if (v418)
  {
    v563 = 0;
    LODWORD(v564) = 0;
    WTF::fastFree(v418, v19);
  }
  if (HIDWORD(v566))
  {
    v421 = v565;
    v422 = 8 * HIDWORD(v566);
    do
    {
      v423 = *(_DWORD **)v421;
      *(_QWORD *)v421 = 0;
      if (v423)
      {
        if (v423[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v423 + 8))(v423);
        else
          --v423[2];
      }
      v421 = (WTF::StringImpl *)((char *)v421 + 8);
      v422 -= 8;
    }
    while (v422);
  }
  if (v565)
    WTF::fastFree(v565, v19);
  if (v567)
  {
    if (*((_DWORD *)v567 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v567 + 8))();
    else
      --*((_DWORD *)v567 + 2);
  }
LABEL_820:
  result = v568;
  v568 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::LegacyWebArchive::create@<X0>(WTF::StringImpl *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::DocumentLoader *v4;
  WTF::StringImpl *v5;
  WebCore::LocalFrame *v6;
  const WTF::StringImpl *v7;
  char *v8;
  WTF *v9;
  uint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  unsigned int v14;
  int v15;
  BOOL v17;
  WTF *v18;
  char *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  WTF *v27;
  uint64_t v28;
  _DWORD *v29;
  WTF *v30;
  int v31;
  unsigned int v32;
  WTF *v33;
  char *v34;
  uint64_t v35;
  WTF *v36;

  v4 = *(WebCore::DocumentLoader **)(*((_QWORD *)this + 35) + 88);
  if (!v4)
  {
    *a2 = 0;
    return this;
  }
  v5 = this;
  ++*((_DWORD *)v4 + 6);
  this = WebCore::DocumentLoader::mainResource(v4, (uint64_t *)&v36);
  if (v36)
  {
    v8 = 0;
    v9 = 0;
    LODWORD(v10) = 0;
    v11 = 0;
    v34 = 0;
    v35 = 0;
    for (i = -1; ; ++i)
    {
      v13 = *((_QWORD *)v5 + 11);
      if (v13)
      {
        v14 = 0;
        v22 = *((_QWORD *)v5 + 11);
        do
        {
          ++v14;
          v22 = *(_QWORD *)(v22 + 72);
        }
        while (v22);
      }
      else
      {
        v14 = 0;
      }
      if (v11 >= v14)
        break;
      if (v11 && v13)
      {
        v15 = i;
        do
        {
          v13 = *(_QWORD *)(v13 + 72);
          v17 = v15-- != 0;
        }
        while (v13 && v17);
      }
      if (v13)
      {
        if (!*(_BYTE *)(v13 + 144))
        {
          WebCore::LegacyWebArchive::create((uint64_t *)&v30, (WebCore::LegacyWebArchive *)v13, v6);
          v18 = v30;
          if (v30)
          {
            v33 = v30;
            v30 = 0;
            if ((_DWORD)v10 == (_DWORD)v35)
            {
              v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v34, v10 + 1, (unint64_t)&v33);
              v10 = HIDWORD(v35);
              v8 = v34;
              v20 = *(_QWORD *)v19;
              *(_QWORD *)v19 = 0;
              *(_QWORD *)&v8[8 * v10] = v20;
            }
            else
            {
              v33 = 0;
              *(_QWORD *)&v8[8 * v10] = v18;
            }
            LODWORD(v10) = v10 + 1;
            HIDWORD(v35) = v10;
            v21 = v33;
            v33 = 0;
            if (v21)
            {
              if (*((_DWORD *)v21 + 2) == 1)
                (*(void (**)(WTF *))(*(_QWORD *)v21 + 8))(v21);
              else
                --*((_DWORD *)v21 + 2);
            }
            v9 = (WTF *)v8;
          }
        }
      }
      ++v11;
    }
    v33 = v36;
    v36 = 0;
    WebCore::DocumentLoader::subresources((uint64_t)v4, v7, (uint64_t)&v30);
    WebCore::LegacyWebArchive::create((uint64_t *)&v33, (uint64_t)&v30, (uint64_t)&v34, a2);
    if (v32)
    {
      v24 = v30;
      v25 = 8 * v32;
      do
      {
        v26 = *(_DWORD **)v24;
        *(_QWORD *)v24 = 0;
        if (v26)
        {
          if (v26[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
          else
            --v26[2];
        }
        v24 = (WTF *)((char *)v24 + 8);
        v25 -= 8;
      }
      while (v25);
    }
    v27 = v30;
    if (v30)
    {
      v30 = 0;
      v31 = 0;
      WTF::fastFree(v27, v23);
    }
    if (v33)
    {
      if (*((_DWORD *)v33 + 2) == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v33 + 8))();
        if ((_DWORD)v10)
        {
LABEL_44:
          v28 = 8 * v10;
          do
          {
            v29 = *(_DWORD **)v9;
            *(_QWORD *)v9 = 0;
            if (v29)
            {
              if (v29[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
              else
                --v29[2];
            }
            v9 = (WTF *)((char *)v9 + 8);
            v28 -= 8;
          }
          while (v28);
          v9 = (WTF *)v34;
        }
LABEL_51:
        if (v9)
        {
          v34 = 0;
          LODWORD(v35) = 0;
          WTF::fastFree(v9, v23);
        }
        this = v36;
        v36 = 0;
        if (this)
        {
          if (*((_DWORD *)this + 2) == 1)
            this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
          else
            --*((_DWORD *)this + 2);
        }
        goto LABEL_57;
      }
      --*((_DWORD *)v33 + 2);
    }
    if ((_DWORD)v10)
      goto LABEL_44;
    goto LABEL_51;
  }
  *a2 = 0;
LABEL_57:
  if (*((_DWORD *)v4 + 6) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::DocumentLoader *))(*(_QWORD *)v4 + 24))(v4);
  --*((_DWORD *)v4 + 6);
  return this;
}

uint64_t WebCore::LegacyWebArchive::create@<X0>(WebCore::LegacyWebArchive *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;

  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 40) + 8);
  v6 = *(_QWORD *)(result + 528);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    *a2 = 0;
    return result;
  }
  v28 = 0;
  v29 = 0;
  WebCore::documentTypeString((unsigned int *)result, &v26);
  result = (uint64_t)WebCore::serializePreservingVisualAppearance((uint64_t)this, (uint64_t)&v28, 1, 0, 0, &v25);
  v8 = (WTF::StringImpl *)v25;
  if (!v26)
  {
    v9 = 0;
    if (v25)
      goto LABEL_5;
LABEL_35:
    v10 = 0;
    goto LABEL_6;
  }
  v9 = *((_DWORD *)v26 + 1);
  if (!v25)
    goto LABEL_35;
LABEL_5:
  v10 = *(_DWORD *)(v25 + 4);
LABEL_6:
  if ((v10 | v9) < 0 || (result = (v9 + v10), __OFADD__(v9, v10)))
  {
    v27 = 0;
    goto LABEL_47;
  }
  if (v26)
  {
    v11 = *((_DWORD *)v26 + 4);
    v12 = (v11 >> 2) & 1;
    if (v25 && (v11 & 4) != 0)
      goto LABEL_11;
  }
  else
  {
    if (v25)
    {
LABEL_11:
      v12 = (*(unsigned __int8 *)(v25 + 16) >> 2) & 1;
      goto LABEL_12;
    }
    v12 = 1;
  }
LABEL_12:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, (uint64_t)v26, v25, &v27);
  if (!v27)
  {
LABEL_47:
    __break(0xC471u);
    return result;
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v13);
    else
      *(_DWORD *)v8 -= 2;
  }
  v14 = v26;
  v26 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  WebCore::LegacyWebArchive::create(a2, (uint64_t *)&v27, v7, (unsigned int *)&v28, &v24, (uint64_t)&v22, &v21);
  if (HIDWORD(v23))
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v22, (WTF *)((char *)v22 + 24 * HIDWORD(v23)));
  v16 = v22;
  if (v22)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    WTF::fastFree(v16, v15);
  }
  v17 = v27;
  v27 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (HIDWORD(v29))
  {
    v18 = (uint64_t *)v28;
    v19 = 8 * HIDWORD(v29);
    do
    {
      v20 = *v18;
      *v18 = 0;
      if (v20)
      {
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v20, v15);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  result = v28;
  if (v28)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    return WTF::fastFree((WTF *)result, v15);
  }
  return result;
}

WTF::StringImpl *WebCore::generateValidFileName(WTF::StringImpl **a1, WTF::URL *this, uint64_t *a3, WTF::StringImpl *a4)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unint64_t i;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char v27;
  int v28;
  int v29;
  WTF::StringImpl *v30;
  int v31;
  char v32;
  unsigned int v33;
  int v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  int8x16_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  int v41;
  unsigned int v42;
  BOOL v43;
  BOOL v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  _WORD *v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  _WORD *v57;
  _BYTE *v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  unsigned int v64;
  char *v65;
  char *v66;
  __int16 v67;
  int v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  int v72;
  char v73;
  WTF::StringImpl *v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  const WTF::StringImpl *v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  WTF *v87;
  char v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  char *v92;
  int8x16_t v93;
  __int128 v94;
  char *v95;
  char *v96;
  char *v97;
  unsigned __int128 *v98;
  unsigned __int128 *v99;
  unsigned __int128 v100;
  char v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *result;
  WTF::StringImpl *v104;
  char v105;
  WTF::StringImpl *v106;
  unsigned int v108;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  char v124;
  __int16 v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  unsigned int v128;
  char v129;
  uint64_t v130;
  int8x16x2_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;

  v130 = *MEMORY[0x1E0C80C00];
  if (!a4 || (v24 = *((_DWORD *)a4 + 1)) == 0)
  {
    v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v5 += 2;
    v122 = v5;
    goto LABEL_5;
  }
  *(_DWORD *)a4 += 2;
  if (v24 < 0 || __OFADD__(v24, 1))
  {
    v122 = 0;
    goto LABEL_251;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((v24 + 1), (*((_DWORD *)a4 + 4) >> 2) & 1, 46, (uint64_t)a4, &v122);
  if (!v122)
  {
LABEL_251:
    __break(0xC471u);
    JUMPOUT(0x195F43080);
  }
  if (*(_DWORD *)a4 == 2)
    WTF::StringImpl::destroy(a4, v25);
  else
    *(_DWORD *)a4 -= 2;
LABEL_5:
  WTF::URL::lastPathComponent(this);
  WTF::URLParser::formURLDecode();
  if (!v124 || (v8 = v123) == 0)
  {
    v20 = 0;
    goto LABEL_62;
  }
  v9 = *((unsigned int *)v123 + 1);
  if (!(_DWORD)v9)
  {
    v20 = 0;
    v123 = 0;
LABEL_60:
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
    goto LABEL_62;
  }
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v126);
  for (i = 0; i != v9; ++i)
  {
    if (!v124)
    {
      __break(1u);
LABEL_240:
      v34 = 255;
      goto LABEL_82;
    }
    v11 = v123;
    if (v123)
    {
      if (i >= *((unsigned int *)v123 + 1))
      {
        v11 = 0;
      }
      else
      {
        v12 = *((_QWORD *)v123 + 1);
        if ((*((_BYTE *)v123 + 16) & 4) != 0)
          v11 = *(unsigned __int8 *)(v12 + i);
        else
          v11 = *(unsigned __int16 *)(v12 + 2 * i);
      }
    }
    if (v11 - 48 < 0xA || (v11 | 0x20) - 97 < 0x1A || v11 - 45 < 2 || v11 == 126 || v11 == 95)
    {
      v125 = v11;
      if (!v127 || ((v13 = v128, v128 < *((_DWORD *)v127 + 1)) ? (v14 = v126 == 0) : (v14 = 0), !v14))
      {
LABEL_24:
        WTF::StringBuilder::append();
        continue;
      }
      if ((*((_BYTE *)v127 + 16) & 4) != 0)
      {
        if (v11 > 0xFF)
          goto LABEL_24;
        v16 = *((_QWORD *)v127 + 1);
        ++v128;
        *(_BYTE *)(v16 + v13) = v11;
      }
      else
      {
        v15 = *((_QWORD *)v127 + 1);
        ++v128;
        *(_WORD *)(v15 + 2 * v13) = v11;
      }
    }
    else
    {
      LOBYTE(v125) = 45;
      if (!v127 || (v17 = v128, v128 >= *((_DWORD *)v127 + 1)) || v126)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v18 = *((_DWORD *)v127 + 4);
        v19 = *((_QWORD *)v127 + 1);
        ++v128;
        if ((v18 & 4) != 0)
          *(_BYTE *)(v19 + v17) = 45;
        else
          *(_WORD *)(v19 + 2 * v17) = 45;
      }
    }
  }
  v20 = v126;
  if (v126
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v126),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v126),
        (v20 = v126) != 0))
  {
    *(_DWORD *)v20 += 2;
  }
  v21 = v127;
  v127 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v6);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v126;
  v126 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v6);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (v124)
  {
    v8 = v123;
    v123 = 0;
    if (v8)
      goto LABEL_60;
  }
LABEL_62:
  v26 = v122;
  if (!v122)
  {
    if (!v20)
      goto LABEL_244;
LABEL_64:
    if ((WTF::StringImpl::endsWith() & 1) == 0)
    {
      v30 = v20;
      goto LABEL_75;
    }
    v27 = 0;
    v28 = *((_DWORD *)v20 + 1);
    v26 = v122;
    if (!v122)
      goto LABEL_67;
LABEL_66:
    LODWORD(v26) = *((_DWORD *)v26 + 1);
    goto LABEL_67;
  }
  if (v20)
    goto LABEL_64;
  if (*((_DWORD *)v122 + 1))
  {
LABEL_243:
    v30 = 0;
    goto LABEL_73;
  }
LABEL_244:
  v28 = 0;
  v27 = 1;
  if (v122)
    goto LABEL_66;
LABEL_67:
  if ((v27 & 1) != 0)
    goto LABEL_243;
  if (*((_DWORD *)v20 + 1) > (v28 - (_DWORD)v26))
  {
    WTF::StringImpl::substring(v20);
    v30 = v126;
    v29 = *(_DWORD *)v20;
  }
  else
  {
    v29 = *(_DWORD *)v20 + 2;
    *(_DWORD *)v20 = v29;
    v30 = v20;
  }
  v126 = 0;
  v31 = v29 - 2;
  if (v31)
  {
    *(_DWORD *)v20 = v31;
  }
  else
  {
    WTF::StringImpl::destroy(v20, v6);
    v104 = v126;
    v126 = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 2)
        WTF::StringImpl::destroy(v104, v6);
      else
        *(_DWORD *)v104 -= 2;
    }
  }
  if (!v30)
  {
LABEL_73:
    v32 = 1;
    goto LABEL_78;
  }
LABEL_75:
  if (*((_DWORD *)v30 + 1))
  {
    v32 = 0;
    *(_DWORD *)v30 += 2;
    v123 = v30;
  }
  else
  {
    v32 = 0;
LABEL_78:
    WTF::String::String((WTF::String *)&v123, "file");
  }
  v106 = v30;
  v105 = v32;
  if (!v122)
    goto LABEL_240;
  v33 = *((_DWORD *)v122 + 1);
  if (v33 >= 0xFF)
    goto LABEL_251;
  v34 = 255 - v33;
LABEL_82:
  v108 = v34;
  v35 = 0;
  v36 = 0;
  v37 = 0uLL;
LABEL_83:
  v38 = v123;
  if (v123)
    *(_DWORD *)v123 += 2;
  v110 = v7;
  v116 = v37;
  if (!v35)
  {
LABEL_88:
    if (!v36)
      goto LABEL_139;
LABEL_89:
    v39 = v123;
    if (v123)
    {
      v40 = *((_DWORD *)v123 + 1);
      *(_DWORD *)v123 += 2;
    }
    else
    {
      v40 = 0;
    }
    v41 = 0;
    v42 = v36;
    do
    {
      ++v41;
      v43 = v42 > 9;
      v42 /= 0xAu;
    }
    while (v43);
    if ((v41 & 0x80000000) == 0)
    {
      v44 = __OFADD__(v41, 1);
      v45 = v41 + 1;
      v46 = v44;
      if ((v40 & 0x80000000) == 0 && !v46)
      {
        v47 = (v40 + v45);
        if (!__OFADD__(v40, v45))
        {
          if (!v39 || (*((_BYTE *)v39 + 16) & 4) != 0)
          {
            if ((v47 & 0x80000000) == 0)
            {
              WTF::tryFastCompactMalloc((WTF *)(v47 + 20));
              v7 = v110;
              v37 = v116;
              v48 = v126;
              if (v126)
              {
                v59 = (char *)v126 + 20;
                *(_DWORD *)v126 = 2;
                *((_DWORD *)v48 + 1) = v47;
                *((_QWORD *)v48 + 1) = (char *)v48 + 20;
                *((_DWORD *)v48 + 4) = 4;
                if (v39)
                {
                  v50 = (_OWORD *)*((_QWORD *)v39 + 1);
                  v60 = *((unsigned int *)v39 + 1);
                  if ((*((_BYTE *)v39 + 16) & 4) != 0)
                  {
                    if ((_DWORD)v60)
                    {
                      if ((_DWORD)v60 == 1)
                      {
                        *v59 = *(_BYTE *)v50;
                      }
                      else
                      {
                        memcpy((char *)v48 + 20, v50, v60);
                        v7 = v110;
                        v37 = v116;
                      }
                    }
                  }
                  else
                  {
                    if (v60 < 0x10)
                    {
                      v98 = (unsigned __int128 *)((char *)v48 + 20);
                    }
                    else
                    {
                      v98 = (unsigned __int128 *)&v59[v60 & 0xFFFFFFF0];
                      v99 = (unsigned __int128 *)((char *)v48 + 20);
                      do
                      {
                        v100 = (unsigned __int128)vld2q_s8((const char *)v50);
                        v50 += 2;
                        *v99++ = v100;
                      }
                      while (v99 != v98);
                    }
                    while (v98 != (unsigned __int128 *)&v59[v60])
                    {
                      v101 = *(_BYTE *)v50;
                      v50 = (_OWORD *)((char *)v50 + 2);
                      *(_BYTE *)v98 = v101;
                      v98 = (unsigned __int128 *)((char *)v98 + 1);
                    }
                  }
                  v61 = *((unsigned int *)v39 + 1);
                }
                else
                {
                  v61 = 0;
                }
                v62 = 0;
                v63 = &v59[v61];
                *v63 = 45;
                v64 = v36;
                do
                {
                  *((_BYTE *)&v127 + v62-- + 4) = (v64 % 0xA) | 0x30;
                  v43 = v64 > 9;
                  v64 /= 0xAu;
                }
                while (v43);
                if (v62 + 14 <= 13)
                {
                  memcpy(v63 + 1, (char *)&v127 + v62 + 5, -v62);
                  v7 = v110;
                  v37 = v116;
                }
LABEL_126:
                *a1 = v48;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                  {
                    v112 = v7;
                    v118 = v37;
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v50);
                    v7 = v112;
                    v37 = v118;
                    if (v39)
                    {
LABEL_130:
                      if (*(_DWORD *)v39 == 2)
                      {
                        v113 = v7;
                        v119 = v37;
                        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v50);
                        v7 = v113;
                        v37 = v119;
                      }
                      else
                      {
                        *(_DWORD *)v39 -= 2;
                      }
                    }
LABEL_132:
                    v38 = v48;
                    goto LABEL_140;
                  }
                  *(_DWORD *)v38 -= 2;
                }
                if (v39)
                  goto LABEL_130;
                goto LABEL_132;
              }
            }
          }
          else if (v47 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * (v40 + v45) + 20));
            v7 = v110;
            v37 = v116;
            v48 = v126;
            if (v126)
            {
              v49 = (_WORD *)((char *)v126 + 20);
              *(_DWORD *)v126 = 2;
              *((_DWORD *)v48 + 1) = v47;
              *((_QWORD *)v48 + 1) = (char *)v48 + 20;
              *((_DWORD *)v48 + 4) = 0;
              v50 = (_OWORD *)*((_QWORD *)v39 + 1);
              v51 = *((unsigned int *)v39 + 1);
              if ((*((_BYTE *)v39 + 16) & 4) != 0)
              {
                if (v51 >= 0x40)
                {
                  v65 = (char *)&v49[v51 & 0xFFFFFFC0];
                  v92 = (char *)v48 + 20;
                  do
                  {
                    v131.val[0] = (int8x16_t)*v50;
                    v93 = *((int8x16_t *)v50 + 1);
                    v132.val[0] = (int8x16_t)v50[2];
                    v94 = v50[3];
                    v50 += 4;
                    v7 = v94;
                    v132.val[1] = v116;
                    v133.val[0] = v93;
                    v131.val[1] = v116;
                    v95 = v92;
                    vst2q_s8(v95, v131);
                    v95 += 32;
                    v133.val[1] = v116;
                    vst2q_s8(v95, v133);
                    v96 = v92 + 64;
                    vst2q_s8(v96, v132);
                    v97 = v92 + 96;
                    vst2q_s8(v97, *(int8x16x2_t *)&v7);
                    v92 += 128;
                  }
                  while (v92 != v65);
                }
                else
                {
                  v65 = (char *)v48 + 20;
                }
                v66 = (char *)&v49[v51];
                while (v65 != v66)
                {
                  v67 = *(unsigned __int8 *)v50;
                  v50 = (_OWORD *)((char *)v50 + 1);
                  *(_WORD *)v65 = v67;
                  v65 += 2;
                }
              }
              else if ((_DWORD)v51 == 1)
              {
                *v49 = *(_WORD *)v50;
              }
              else if ((_DWORD)v51)
              {
                memcpy((char *)v48 + 20, v50, 2 * v51);
                v7 = v110;
                v37 = v116;
              }
              v52 = *((unsigned int *)v39 + 1);
              v49[v52] = 45;
              v53 = -1;
              v54 = 12;
              v55 = v36;
              do
              {
                v56 = v53;
                *((_BYTE *)&v126 + v54--) = (v55 % 0xA) | 0x30;
                --v53;
                v43 = v55 > 9;
                v55 /= 0xAu;
              }
              while (v43);
              if (v54 + 2 <= 13)
              {
                v57 = (_WORD *)((char *)v48 + 2 * v52 + 22);
                do
                  *v57++ = *((unsigned __int8 *)&v127 + v56 + 5);
                while (!__CFADD__(v56++, 1));
              }
              goto LABEL_126;
            }
          }
        }
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195F43088);
  }
  if (*(_DWORD *)v35 != 2)
  {
    *(_DWORD *)v35 -= 2;
    goto LABEL_88;
  }
  WTF::StringImpl::destroy(v35, v6);
  v7 = v110;
  v37 = v116;
  if (v36)
    goto LABEL_89;
LABEL_139:
  if (!v38)
  {
    v71 = 0;
    goto LABEL_201;
  }
LABEL_140:
  v68 = *((_DWORD *)v38 + 1);
  if (v68 << ((*((_DWORD *)v38 + 4) & 4) == 0) <= v108)
  {
    v71 = v38;
LABEL_148:
    v73 = 0;
    *(_DWORD *)v71 += 2;
    goto LABEL_149;
  }
  v69 = (WTF::StringImpl *)(v68 - v108);
  if (v68 == v108)
  {
    v70 = *(_DWORD *)v38 + 2;
    *(_DWORD *)v38 = v70;
    v71 = v38;
  }
  else
  {
    v115 = v7;
    v121 = v37;
    WTF::StringImpl::substring(v38);
    v7 = v115;
    v37 = v121;
    v71 = v126;
    v70 = *(_DWORD *)v38;
  }
  v126 = 0;
  *a1 = v71;
  v72 = v70 - 2;
  if (v72)
  {
    *(_DWORD *)v38 = v72;
  }
  else
  {
    v114 = v7;
    v120 = v37;
    WTF::StringImpl::destroy(v38, v69);
    v7 = v114;
    v37 = v120;
    v91 = v126;
    v126 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2)
      {
        WTF::StringImpl::destroy(v91, v90);
        v7 = v114;
        v37 = v120;
      }
      else
      {
        *(_DWORD *)v91 -= 2;
      }
    }
  }
  if (v71)
    goto LABEL_148;
LABEL_201:
  v73 = 1;
LABEL_149:
  v74 = v122;
  if (v122)
    *(_DWORD *)v122 += 2;
  if ((v73 & 1) != 0)
  {
    v75 = 0;
    if (!v74)
      goto LABEL_189;
LABEL_153:
    v76 = *((_DWORD *)v74 + 1);
  }
  else
  {
    v75 = *((_DWORD *)v71 + 1);
    if (v74)
      goto LABEL_153;
LABEL_189:
    v76 = 0;
  }
  if ((v76 | v75) < 0 || (v77 = (v75 + v76), __OFADD__(v75, v76)))
  {
    v126 = 0;
    goto LABEL_249;
  }
  v111 = v7;
  v117 = v37;
  if ((v73 & 1) != 0)
  {
    if (v74)
      goto LABEL_159;
    v79 = 1;
  }
  else
  {
    v78 = *((_DWORD *)v71 + 4);
    v79 = (v78 >> 2) & 1;
    if (v74 && (v78 & 4) != 0)
LABEL_159:
      v79 = (*((unsigned __int8 *)v74 + 16) >> 2) & 1;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v77, v79, (uint64_t)v71, (uint64_t)v74, &v126);
  v35 = v126;
  if (!v126)
  {
LABEL_249:
    __break(0xC471u);
    JUMPOUT(0x195F43094);
  }
  v126 = 0;
  *a1 = v35;
  if ((v73 & 1) == 0)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::destroy(v71, v6);
      v89 = v126;
      v126 = 0;
      if (v89)
      {
        if (*(_DWORD *)v89 == 2)
          WTF::StringImpl::destroy(v89, v6);
        else
          *(_DWORD *)v89 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v71 -= 2;
      v126 = 0;
    }
  }
  if (!v74)
  {
LABEL_167:
    if ((v73 & 1) != 0)
      goto LABEL_170;
    goto LABEL_168;
  }
  if (*(_DWORD *)v74 != 2)
  {
    *(_DWORD *)v74 -= 2;
    goto LABEL_167;
  }
  WTF::StringImpl::destroy(v74, v6);
  if ((v73 & 1) == 0)
  {
LABEL_168:
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, v6);
    else
      *(_DWORD *)v71 -= 2;
  }
LABEL_170:
  v81 = *a3;
  if (*a3)
  {
    v82 = *(_DWORD *)(v81 - 8);
    v83 = *((_DWORD *)v35 + 4);
    if (v83 < 0x100)
      v84 = WTF::StringImpl::hashSlowCase(v35);
    else
      v84 = v83 >> 8;
    v85 = 0;
    ++v36;
    while (1)
    {
      v86 = v84 & v82;
      v87 = *(WTF **)(v81 + 8 * (v84 & v82));
      if (!v87)
        break;
      if (v87 != (WTF *)-1)
      {
        v88 = WTF::equal(v87, v35, v80);
        v7 = v111;
        v37 = v117;
        if ((v88 & 1) != 0)
          goto LABEL_83;
      }
      v84 = ++v85 + v86;
    }
  }
  v102 = v123;
  v123 = 0;
  if (!v102)
  {
LABEL_218:
    if ((v105 & 1) != 0)
      goto LABEL_221;
    goto LABEL_219;
  }
  if (*(_DWORD *)v102 != 2)
  {
    *(_DWORD *)v102 -= 2;
    goto LABEL_218;
  }
  WTF::StringImpl::destroy(v102, v6);
  if ((v105 & 1) == 0)
  {
LABEL_219:
    if (*(_DWORD *)v106 == 2)
      WTF::StringImpl::destroy(v106, v6);
    else
      *(_DWORD *)v106 -= 2;
  }
LABEL_221:
  result = v122;
  v122 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::LegacyWebArchive::createFromSelection(WebCore::LegacyWebArchive *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  _BYTE *v33;
  size_t v34;
  _BYTE *v35;
  uint64_t *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  CFTypeRef v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  void *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  WTF *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  WTF *v74;
  WTF *v76;
  uint64_t v78;
  uint64_t v79;
  unsigned __int128 *v80;
  unsigned __int128 *v81;
  unsigned __int128 v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86[2];
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char v95;
  char v96;
  __int16 v97;
  char v98;
  int64x2_t v99;
  int64x2_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int64x2_t v104;
  uint64_t v105;
  char v106;
  __int16 v107;
  char v108;
  CFTypeRef cf;
  char v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  _DWORD *v116;
  WTF *v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  int v121;
  char v122;
  int8x16x2_t v123;
  int8x16x2_t v124;
  int8x16x2_t v125;
  int8x16x2_t v126;

  if (!this || (v5 = (unsigned int *)*((_QWORD *)this + 37)) == 0)
  {
    *a2 = 0;
    return;
  }
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 1;
  WebCore::documentTypeString(v5, &v88);
  v7 = v88;
  if (!v121 && !v120)
  {
    if (v88)
      *(_DWORD *)v88 += 2;
    v8 = v119;
    v119 = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v6);
        v7 = v88;
        if (!v88)
          goto LABEL_12;
        goto LABEL_11;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (!v7)
    {
LABEL_12:
      v121 = (int)v7;
      goto LABEL_13;
    }
LABEL_11:
    LODWORD(v7) = *((_DWORD *)v7 + 1);
    goto LABEL_12;
  }
  if (v88 && (*((_BYTE *)v88 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_13:
  v9 = v88;
  v88 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  v117 = 0;
  v118 = 0;
  WebCore::serializePreservingVisualAppearanceInternal((uint64_t *)&v88, (WebCore *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 120), *(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 136, (uint64_t)&v117, 0, 1, 1, 1, 0, 0, 1, 1);
  v11 = v88;
  if (!v121 && !v120)
  {
    if (v88)
      *(_DWORD *)v88 += 2;
    v12 = v119;
    v119 = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v10);
        if (v11)
          goto LABEL_24;
        goto LABEL_114;
      }
      *(_DWORD *)v12 -= 2;
    }
    if (v11)
    {
LABEL_24:
      v13 = *((_DWORD *)v11 + 1);
      goto LABEL_25;
    }
LABEL_114:
    v13 = 0;
LABEL_25:
    v121 = v13;
    if (!v11)
      goto LABEL_28;
    goto LABEL_26;
  }
  if (v88 && (*((_BYTE *)v88 + 16) & 4) == 0)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    WTF::StringBuilder::append();
    if (!v11)
      goto LABEL_28;
  }
LABEL_26:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, v10);
  else
    *(_DWORD *)v11 -= 2;
LABEL_28:
  v14 = v119;
  if (v119
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v119),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v119),
        (v14 = v119) != 0))
  {
    *(_DWORD *)v14 += 2;
  }
  v86[0] = v14;
  v114 = 0;
  v115 = 0;
  v88 = 0;
  v89 = 0;
  WebCore::LegacyWebArchive::create(&v116, (uint64_t *)v86, (uint64_t)this, (unsigned int *)&v117, &v115, (uint64_t)&v88, &v114);
  if (HIDWORD(v89))
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v88, (WTF::StringImpl *)((char *)v88 + 24 * HIDWORD(v89)));
  v16 = v88;
  if (v88)
  {
    v88 = 0;
    LODWORD(v89) = 0;
    WTF::fastFree(v16, v15);
  }
  v17 = v86[0];
  v86[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (uint64_t)v116;
  if (!v116 || !(*(unsigned int (**)(unsigned int *))(*(_QWORD *)v5 + 392))(v5))
  {
    *a2 = v18;
    goto LABEL_96;
  }
  v19 = *(_QWORD *)(*((_QWORD *)this + 35) + 88);
  WebCore::ResourceResponse::platformLazyInit(v19 + 1272, 1);
  v20 = *(_QWORD *)(v19 + 1272);
  if (v20)
  {
    v21 = *(_DWORD *)(v20 + 4);
    *(_DWORD *)v20 += 2;
    if (v21 < 0)
      goto LABEL_181;
  }
  else
  {
    v21 = 0;
  }
  v22 = __OFADD__(v21, 11);
  v23 = v21 + 11;
  if (v22)
    goto LABEL_181;
  v24 = (v23 + 90);
  if (__OFADD__(v23, 90))
    goto LABEL_181;
  if (v20)
  {
    if ((*(_BYTE *)(v20 + 16) & 4) != 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v24 + 20));
      v25 = v88;
      if (v88)
      {
        *(_OWORD *)((char *)v88 + 20) = *(_OWORD *)"<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width"
                                                   "=\"98%%\" height=\"98%%\" src=\"";
        qmemcpy((char *)v25 + 36, "der=\"no\" marginwidth=\"0\" marginheight=\"0\" width=\"98%%\" height=\"98%%\" src=\"", 74);
        *(_DWORD *)v25 = 2;
        *((_DWORD *)v25 + 1) = v24;
        *((_QWORD *)v25 + 1) = (char *)v25 + 20;
        *((_DWORD *)v25 + 4) = 4;
        v33 = (char *)v25 + 110;
        v30 = *(_BYTE **)(v20 + 8);
        v34 = *(unsigned int *)(v20 + 4);
        if ((*(_BYTE *)(v20 + 16) & 4) != 0)
        {
          if ((_DWORD)v34)
          {
            if ((_DWORD)v34 == 1)
              *v33 = *v30;
            else
              memcpy((char *)v25 + 110, v30, v34);
          }
        }
        else
        {
          if (v34 < 0x10)
          {
            v80 = (unsigned __int128 *)((char *)v25 + 110);
          }
          else
          {
            v80 = (unsigned __int128 *)&v33[v34 & 0xFFFFFFF0];
            v81 = (unsigned __int128 *)((char *)v25 + 110);
            do
            {
              v82 = (unsigned __int128)vld2q_s8(v30);
              v30 += 32;
              *v81++ = v82;
            }
            while (v81 != v80);
          }
          while (v80 != (unsigned __int128 *)&v33[v34])
          {
            v83 = *v30;
            v30 += 2;
            *(_BYTE *)v80 = v83;
            v80 = (unsigned __int128 *)((char *)v80 + 1);
          }
        }
        v35 = &v33[*(unsigned int *)(v20 + 4)];
        *(_QWORD *)v35 = *(_QWORD *)"\"></iframe>";
        *(_DWORD *)(v35 + 7) = 1046834529;
        goto LABEL_66;
      }
    }
    else if (v24 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * (v23 + 90) + 20));
      v25 = v88;
      if (v88)
      {
        v26 = (char *)v88 + 20;
        *(_DWORD *)v88 = 2;
        *((_DWORD *)v25 + 1) = v24;
        *((_QWORD *)v25 + 1) = (char *)v25 + 20;
        *((_DWORD *)v25 + 4) = 0;
        v123.val[0] = *(int8x16_t *)"<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=\"98%%\" heigh"
                                    "t=\"98%%\" src=\"";
        v124.val[0] = *(int8x16_t *)"idth=\"0\" marginheight=\"0\" width=\"98%%\" height=\"98%%\" src=\"";
        v125.val[1] = 0uLL;
        v125.val[0] = *(int8x16_t *)"eight=\"0\" width=\"98%%\" height=\"98%%\" src=\"";
        v124.val[1] = 0u;
        v126.val[0] = *(int8x16_t *)"der=\"no\" marginwidth=\"0\" marginheight=\"0\" width=\"98%%\" height=\"98%%\" src=\"";
        v123.val[1] = 0u;
        vst2q_s8(v26, v123);
        v126.val[1] = 0u;
        v27 = (char *)v25 + 52;
        vst2q_s8(v27, v126);
        v28 = (char *)v25 + 84;
        vst2q_s8(v28, v124);
        v29 = (char *)v25 + 116;
        *(_OWORD *)((char *)v25 + 148) = xmmword_1969F2C30;
        *(_OWORD *)((char *)v25 + 164) = xmmword_1969F2C40;
        *(_OWORD *)((char *)v25 + 180) = xmmword_1969F2C50;
        *((_DWORD *)v25 + 49) = 2228285;
        v88 = (WTF::StringImpl *)v20;
        vst2q_s8(v29, v125);
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v88, (char *)v25 + 200);
        v31 = v88;
        if (v88)
          v31 = (WTF::StringImpl *)*((unsigned int *)v88 + 1);
        v32 = (uint64_t)v25 + 2 * (_QWORD)v31 + 200;
        *(_OWORD *)v32 = xmmword_1969F2C60;
        *(_DWORD *)(v32 + 16) = 6619245;
        *(_WORD *)(v32 + 20) = 62;
LABEL_66:
        v115 = v25;
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v20, (WTF::StringImpl *)v30);
        else
          *(_DWORD *)v20 -= 2;
        goto LABEL_68;
      }
    }
LABEL_181:
    v115 = 0;
    __break(0xC471u);
    return;
  }
  WTF::tryFastCompactMalloc((WTF *)(v24 + 20));
  v59 = v88;
  if (!v88)
    goto LABEL_181;
  *(_OWORD *)((char *)v88 + 52) = *(_OWORD *)"idth=\"0\" marginheight=\"0\" width=\"98%%\" height=\"98%%\" src=\"";
  qmemcpy((char *)v59 + 68, "eight=\"0\" width=\"98%%\" height=\"98%%\" src=\"\"></iframe>", 53);
  qmemcpy((char *)v59 + 20, "<iframe frameborder=\"no\" marginw", 32);
  *(_DWORD *)v59 = 2;
  *((_DWORD *)v59 + 1) = v24;
  *((_QWORD *)v59 + 1) = (char *)v59 + 20;
  *((_DWORD *)v59 + 4) = 4;
  v115 = v59;
LABEL_68:
  v36 = WebCore::utf8Buffer((uint64_t *)&v115, (uint64_t *)&v113);
  v37 = v113;
  v113 = 0;
  v86[0] = v37;
  v38 = WTF::aboutBlankURL((WTF *)v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v111 = 0;
  v112 = v88;
  v88 = 0;
  WTF::URL::invalidate((WTF::URL *)&v88);
  v96 = 0;
  v97 = 0;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0;
  v99 = vdupq_n_s64(0x7FF8000000000000uLL);
  v100 = v99;
  v101 = 0;
  v102 = 0;
  v104 = v99;
  v103 = 0x8000000000000000;
  v105 = 0x7FF8000000000000;
  v106 &= 0xF0u;
  v107 &= 0xC000u;
  v108 = v108 & 0xF8 | 2;
  cf = 0;
  v110 = 0;
  v98 = v98 & 0xC0 | 5;
  v87 = 0;
  WebCore::ArchiveResource::create((uint64_t)v86, v38, (_DWORD **)&WebCore::textHTMLContentTypeAtomData, (_DWORD **)&v112, (_DWORD **)&v111, (WebCore::ResourceResponseBase *)&v88, (_DWORD **)&v87, (uint64_t *)&v114);
  v40 = v87;
  v87 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = cf;
  cf = 0;
  if (v41)
    CFRelease(v41);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v88, v39);
  v43 = v111;
  v111 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = v112;
  v112 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v42);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = v86[0];
  v86[0] = 0;
  if (v45)
  {
    do
    {
      v46 = __ldaxr((unsigned int *)v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, (unsigned int *)v45));
    if (!v47)
    {
      atomic_store(1u, (unsigned int *)v45);
      v60 = *((unsigned int *)v45 + 5);
      if ((_DWORD)v60)
      {
        v61 = *((_QWORD *)v45 + 1);
        v62 = v61 + 16 * v60;
        do
        {
          v63 = *(unsigned int **)(v61 + 8);
          *(_QWORD *)(v61 + 8) = 0;
          if (v63)
          {
            do
            {
              v64 = __ldaxr(v63);
              v65 = v64 - 1;
            }
            while (__stlxr(v65, v63));
            if (!v65)
            {
              v84 = v62;
              atomic_store(1u, v63);
              v66 = v63[6];
              if ((_DWORD)v66 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v66])(&v88, v63 + 2);
              v63[6] = -1;
              WTF::fastFree((WTF *)v63, v42);
              v62 = v84;
            }
          }
          v61 += 16;
        }
        while (v61 != v62);
      }
      v74 = (WTF *)*((_QWORD *)v45 + 1);
      if ((WTF::StringImpl *)((char *)v45 + 24) != v74 && v74 != 0)
      {
        *((_QWORD *)v45 + 1) = 0;
        *((_DWORD *)v45 + 4) = 0;
        WTF::fastFree(v74, v42);
      }
      WTF::fastFree(v45, v42);
    }
  }
  v48 = (uint64_t)v113;
  v113 = 0;
  if (v48)
  {
    do
    {
      v49 = __ldaxr((unsigned int *)v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, (unsigned int *)v48));
    if (!v50)
    {
      atomic_store(1u, (unsigned int *)v48);
      v67 = *(unsigned int *)(v48 + 20);
      if ((_DWORD)v67)
      {
        v68 = *(_QWORD *)(v48 + 8);
        v69 = v68 + 16 * v67;
        do
        {
          v70 = *(unsigned int **)(v68 + 8);
          *(_QWORD *)(v68 + 8) = 0;
          if (v70)
          {
            do
            {
              v71 = __ldaxr(v70);
              v72 = v71 - 1;
            }
            while (__stlxr(v72, v70));
            if (!v72)
            {
              v85 = v69;
              atomic_store(1u, v70);
              v73 = v70[6];
              if ((_DWORD)v73 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v73])(&v88, v70 + 2);
              v70[6] = -1;
              WTF::fastFree((WTF *)v70, v42);
              v69 = v85;
            }
          }
          v68 += 16;
        }
        while (v68 != v69);
      }
      v76 = *(WTF **)(v48 + 8);
      if ((WTF *)(v48 + 24) != v76 && v76 != 0)
      {
        *(_QWORD *)(v48 + 8) = 0;
        *(_DWORD *)(v48 + 16) = 0;
        WTF::fastFree(v76, v42);
      }
      WTF::fastFree((WTF *)v48, v42);
    }
  }
  v113 = v114;
  v88 = 0;
  v89 = 0;
  v51 = v116;
  v52 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
  v86[0] = v52;
  ++v51[2];
  *(_QWORD *)v52 = v51;
  v86[1] = (WTF::StringImpl *)0x100000001;
  WebCore::LegacyWebArchive::create((uint64_t *)&v113, (uint64_t)&v88, (uint64_t)v86, a2);
  v54 = *(_DWORD **)v52;
  *(_QWORD *)v52 = 0;
  if (v54)
  {
    if (v54[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
    else
      --v54[2];
  }
  WTF::fastFree(v52, v53);
  if (v51[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
  else
    --v51[2];
  if (v113)
  {
    if (*((_DWORD *)v113 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v113 + 8))();
    else
      --*((_DWORD *)v113 + 2);
  }
  v55 = v115;
  v115 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v55 -= 2;
  }
LABEL_96:
  v56 = v117;
  if (HIDWORD(v118))
  {
    v78 = 8 * HIDWORD(v118);
    do
    {
      v79 = *(_QWORD *)v56;
      *(_QWORD *)v56 = 0;
      if (v79)
      {
        if (*(_DWORD *)(v79 + 24) == 2)
        {
          if ((*(_WORD *)(v79 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v79, v15);
        }
        else
        {
          *(_DWORD *)(v79 + 24) -= 2;
        }
      }
      v56 = (WTF *)((char *)v56 + 8);
      v78 -= 8;
    }
    while (v78);
    v56 = v117;
    if (!v117)
      goto LABEL_99;
    goto LABEL_98;
  }
  if (v117)
  {
LABEL_98:
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree(v56, v15);
  }
LABEL_99:
  v57 = v120;
  v120 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = v119;
  v119 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v58 -= 2;
  }
}

uint64_t WebCore::CachedApplicationManifest::CachedApplicationManifest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const WTF::String *v7;
  int v8;
  char *v9;
  uint64_t *v10;
  __int128 v11;
  WTF::StringImpl *v12;
  __int16 v14;
  char *v15;
  __int16 v16;
  WTF::StringImpl *v17;
  const char *v18;
  char *v19;

  *(_QWORD *)WebCore::CachedResource::CachedResource(a1, a2, 15, a3, a4) = off_1E33F8138;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  {
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v15;
    v18 = (const char *)xmmword_1ECE86C80;
    v19 = v15;
    if (v15 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v18))
      {
        v16 = 165;
      }
      else
      {
        v16 = 92;
      }
    }
    else
    {
      v16 = 92;
    }
    word_1ECE86C90 = v16;
  }
  v6 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v6 = 1;
  v8 = WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&v17, v7);
  *(_DWORD *)(v6 + 4) = v8;
  if (v8 == 2)
  {
    v10 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
    {
      PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
      *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)"UTF-8", (PAL *)"UTF-8", v9);
      *((_QWORD *)&xmmword_1ECE86C80 + 1) = v9;
      v18 = (const char *)xmmword_1ECE86C80;
      v19 = v9;
      if (v9 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
      {
        if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v18))
        {
          v14 = 165;
        }
        else
        {
          v14 = 92;
        }
      }
      else
      {
        v14 = 92;
      }
      v10 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
      word_1ECE86C90 = v14;
    }
  }
  else
  {
    v10 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
    if (!*((_QWORD *)&xmmword_1ECE86C80 + 1))
      v10 = PAL::Latin1Encoding((PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding);
  }
  *(_QWORD *)(v6 + 8) = &off_1E31F4A18;
  v11 = *(_OWORD *)(v10 + 1);
  *(_WORD *)(v6 + 32) = *((_WORD *)v10 + 12);
  *(_OWORD *)(v6 + 16) = v11;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 87) = 0;
  *(_QWORD *)(a1 + 656) = v6;
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_BYTE *)(a1 + 664) = 0;
  *(_BYTE *)(a1 + 672) = 0;
  return a1;
}

uint64_t *WebCore::CachedApplicationManifest::finishLoading(WebCore::CachedApplicationManifest *this, const WebCore::FragmentedSharedBuffer *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  WTF *v23;
  WTF *v25;
  WebCore::HTMLMetaCharsetParser *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  WTF::StringImpl *v59;
  WTF *v60;
  int v61;
  char v62;

  if (!a2)
  {
    v15 = *((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v15));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v15);
        v41 = *(unsigned int *)(v15 + 20);
        if ((_DWORD)v41)
        {
          v42 = *(_QWORD *)(v15 + 8);
          v43 = v42 + 16 * v41;
          do
          {
            v44 = *(unsigned int **)(v42 + 8);
            *(_QWORD *)(v42 + 8) = 0;
            if (v44)
            {
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                v54 = v42;
                v56 = v43;
                atomic_store(1u, v44);
                v47 = v44;
                v48 = v44[6];
                if ((_DWORD)v48 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v48])(&v59, v44 + 2);
                v47[6] = -1;
                WTF::fastFree((WTF *)v47, a2);
                v42 = v54;
                v43 = v56;
              }
            }
            v42 += 16;
          }
          while (v42 != v43);
        }
        v49 = *(WTF **)(v15 + 8);
        if ((WTF *)(v15 + 24) != v49 && v49 != 0)
        {
          *(_QWORD *)(v15 + 8) = 0;
          *(_DWORD *)(v15 + 16) = 0;
          WTF::fastFree(v49, a2);
        }
        WTF::fastFree((WTF *)v15, a2);
      }
    }
    WebCore::CachedResource::setEncodedSize(this, 0);
    goto LABEL_21;
  }
  WebCore::FragmentedSharedBuffer::makeContiguous(a2, &v57);
  WebCore::CachedResource::setEncodedSize(this, *((_DWORD *)a2 + 12));
  v6 = *((_QWORD *)this + 82);
  ++*(_DWORD *)v6;
  v7 = v57;
  if (*(_DWORD *)(v57 + 20))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v57 + 8) + 8);
    v9 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v9 == -1)
    {
      v51 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::Ref<WebCore::TextResourceDecoder,WTF::RawPtrTraits<WebCore::TextResourceDecoder>,WTF::DefaultRefDerefTraits<WebCore::TextResourceDecoder>>::~Ref(v51, v52);
    }
    v59 = (WTF::StringImpl *)&v58;
    v10 = (const char *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v59, v8 + 8);
  }
  else
  {
    v10 = 0;
  }
  WebCore::TextResourceDecoder::decodeAndFlush((WebCore::TextResourceDecoder *)v6, v10, *(_QWORD *)(v7 + 48), &v59);
  v12 = *((unsigned __int8 *)this + 672);
  v13 = v59;
  v59 = 0;
  if (v12)
  {
    v14 = (WTF::StringImpl *)*((_QWORD *)this + 83);
    *((_QWORD *)this + 83) = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v11);
        v30 = v59;
        v59 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v11);
          else
            *(_DWORD *)v30 -= 2;
        }
        goto LABEL_15;
      }
      *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    *((_QWORD *)this + 83) = v13;
    *((_BYTE *)this + 672) = 1;
  }
  v59 = 0;
LABEL_15:
  if (*(_DWORD *)v6 == 1)
  {
    v25 = *(WTF **)(v6 + 72);
    if (v25)
    {
      *(_QWORD *)(v6 + 72) = 0;
      *(_DWORD *)(v6 + 80) = 0;
      WTF::fastFree(v25, v11);
    }
    v26 = *(WebCore::HTMLMetaCharsetParser **)(v6 + 48);
    *(_QWORD *)(v6 + 48) = 0;
    if (v26)
    {
      WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v26, v11);
      WTF::fastFree(v27, v28);
    }
    v29 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    WTF::fastFree((WTF *)v6, v11);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  v18 = v57;
  v57 = 0;
  v19 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = v18;
  if (v19)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v19));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v19);
      v31 = *(unsigned int *)(v19 + 20);
      if ((_DWORD)v31)
      {
        v32 = *(_QWORD *)(v19 + 8);
        v33 = v32 + 16 * v31;
        do
        {
          v34 = *(unsigned int **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v53 = v32;
              v55 = v33;
              atomic_store(1u, v34);
              v37 = v34;
              v38 = v34[6];
              if ((_DWORD)v38 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v38])(&v59, v34 + 2);
              v37[6] = -1;
              WTF::fastFree((WTF *)v37, v11);
              v32 = v53;
              v33 = v55;
            }
          }
          v32 += 16;
        }
        while (v32 != v33);
      }
      v39 = *(WTF **)(v19 + 8);
      if ((WTF *)(v19 + 24) != v39 && v39 != 0)
      {
        *(_QWORD *)(v19 + 8) = 0;
        *(_DWORD *)(v19 + 16) = 0;
        WTF::fastFree(v39, v11);
      }
      WTF::fastFree((WTF *)v19, v11);
    }
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v57, v11);
LABEL_21:
  LOBYTE(v59) = 0;
  v62 = 0;
  std::array<std::optional<WebCore::ResourceCryptographicDigest>,3ul>::fill[abi:sn180100]((uint64_t)this + 560, (uint64_t)&v59);
  if (v62)
  {
    v23 = v60;
    if (v60)
    {
      v60 = 0;
      v61 = 0;
      WTF::fastFree(v23, v22);
    }
  }
  *(_WORD *)((char *)this + 557) &= ~0x400u;
  return (uint64_t *)(*(uint64_t (**)(WebCore::CachedApplicationManifest *, const WebCore::NetworkLoadMetrics *, _QWORD))(*(_QWORD *)this + 200))(this, a3, 0);
}

uint64_t *WTF::Ref<WebCore::TextResourceDecoder,WTF::RawPtrTraits<WebCore::TextResourceDecoder>,WTF::DefaultRefDerefTraits<WebCore::TextResourceDecoder>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  WTF *v5;
  WebCore::HTMLMetaCharsetParser *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(WTF **)(v3 + 72);
      if (v5)
      {
        *(_QWORD *)(v3 + 72) = 0;
        *(_DWORD *)(v3 + 80) = 0;
        WTF::fastFree(v5, a2);
      }
      v6 = *(WebCore::HTMLMetaCharsetParser **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v6)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v6, (WTF::StringImpl *)a2);
        WTF::fastFree(v7, v8);
      }
      v9 = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

const char *WebCore::CachedApplicationManifest::setEncoding(WebCore::CachedApplicationManifest *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const char *result;
  char *v7;
  const char *v8;
  char *v9;
  __int16 v10;
  WTF *v11;
  WebCore::HTMLMetaCharsetParser *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  const char *v16[2];

  v2 = *((_QWORD *)this + 82);
  ++*(_DWORD *)v2;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  result = (const char *)PAL::atomCanonicalTextEncodingName(v4, (const char *)v5);
  v8 = result;
  v9 = v7;
  v16[0] = result;
  v16[1] = v7;
  if (v7 && (result = (const char *)PAL::nonBackslashEncodings) != 0 && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    result = (const char *)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v16);
    if (result)
      v10 = 165;
    else
      v10 = 92;
  }
  else
  {
    v10 = 92;
  }
  if (v9 && !*(_BYTE *)(v2 + 94))
  {
    *(_QWORD *)(v2 + 16) = v8;
    *(_QWORD *)(v2 + 24) = v9;
    *(_WORD *)(v2 + 32) = v10;
    result = *(const char **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (result)
      result = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
    *(_DWORD *)(v2 + 56) = 5;
  }
  if (*(_DWORD *)v2 == 1)
  {
    v11 = *(WTF **)(v2 + 72);
    if (v11)
    {
      *(_QWORD *)(v2 + 72) = 0;
      *(_DWORD *)(v2 + 80) = 0;
      WTF::fastFree(v11, v7);
    }
    v12 = *(WebCore::HTMLMetaCharsetParser **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v12)
    {
      WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v12, (WTF::StringImpl *)v7);
      WTF::fastFree(v13, v14);
    }
    v15 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return (const char *)WTF::fastFree((WTF *)v2, v7);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return result;
}

uint64_t WebCore::CachedApplicationManifest::encoding@<X0>(WebCore::CachedApplicationManifest *this@<X0>, WTF::String *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  WTF *v5;
  WebCore::HTMLMetaCharsetParser *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 82);
  ++*(_DWORD *)v2;
  result = WTF::String::String(a2, *(const char **)(v2 + 16));
  if (*(_DWORD *)v2 == 1)
  {
    v5 = *(WTF **)(v2 + 72);
    if (v5)
    {
      *(_QWORD *)(v2 + 72) = 0;
      *(_DWORD *)(v2 + 80) = 0;
      WTF::fastFree(v5, v4);
    }
    v6 = *(WebCore::HTMLMetaCharsetParser **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v6)
    {
      WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v6, (WTF::StringImpl *)v4);
      WTF::fastFree(v7, v8);
    }
    v9 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return WTF::fastFree((WTF *)v2, v4);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return result;
}

void WebCore::CachedApplicationManifest::process(WebCore::CachedApplicationManifest *this@<X0>, const WTF::URL *a2@<X1>, const WTF::URL *a3@<X2>, WebCore::Document *a4@<X3>, _BYTE *a5@<X8>)
{
  void *v6;
  WTF::StringImpl *v7[33];

  if (*((_BYTE *)this + 672))
  {
    if (a4)
      WebCore::ApplicationManifestParser::parse(a4, (WebCore::CachedApplicationManifest *)((char *)this + 664), a2, a3, (uint64_t)v7);
    else
      WebCore::ApplicationManifestParser::parse((WebCore::CachedApplicationManifest *)((char *)this + 664), a2, a3, (uint64_t)v7);
    WebCore::ApplicationManifest::ApplicationManifest((uint64_t)a5, (uint64_t *)v7);
    a5[264] = 1;
    WebCore::ApplicationManifest::~ApplicationManifest(v7, v6);
  }
  else
  {
    *a5 = 0;
    a5[264] = 0;
  }
}

void WebCore::CachedCSSStyleSheet::~CachedCSSStyleSheet(WebCore::CachedCSSStyleSheet *this, void *a2)
{
  WebCore::StyleSheetContents *v3;
  int v4;
  WTF::StringImpl *v5;
  WebCore::TextResourceDecoder *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  void *v12;

  v3 = (WebCore::StyleSheetContents *)*((_QWORD *)this + 84);
  if (!v3)
  {
    *((_QWORD *)this + 84) = 0;
    goto LABEL_6;
  }
  v4 = (*(_DWORD *)v3)++;
  --*((_DWORD *)v3 + 32);
  if (v4)
  {
    *(_DWORD *)v3 = v4;
    *((_QWORD *)this + 84) = 0;
  }
  else
  {
    WebCore::StyleSheetContents::~StyleSheetContents(v3, a2);
    WTF::fastFree(v7, v8);
    v3 = (WebCore::StyleSheetContents *)*((_QWORD *)this + 84);
    *((_QWORD *)this + 84) = 0;
    if (!v3)
      goto LABEL_6;
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::StyleSheetContents::~StyleSheetContents(v3, a2);
    WTF::fastFree(v9, v10);
  }
  else
  {
    --*(_DWORD *)v3;
  }
LABEL_6:
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WebCore::TextResourceDecoder *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::TextResourceDecoder::~TextResourceDecoder(v6, a2);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  WebCore::CachedResource::~CachedResource(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CachedCSSStyleSheet::~CachedCSSStyleSheet(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CachedCSSStyleSheet::encoding@<X0>(WebCore::CachedCSSStyleSheet *this@<X0>, WTF::String *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  WTF *v5;
  WebCore::HTMLMetaCharsetParser *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 82);
  ++*(_DWORD *)v2;
  result = WTF::String::String(a2, *(const char **)(v2 + 16));
  if (*(_DWORD *)v2 == 1)
  {
    v5 = *(WTF **)(v2 + 72);
    if (v5)
    {
      *(_QWORD *)(v2 + 72) = 0;
      *(_DWORD *)(v2 + 80) = 0;
      WTF::fastFree(v5, v4);
    }
    v6 = *(WebCore::HTMLMetaCharsetParser **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v6)
    {
      WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v6, (WTF::StringImpl *)v4);
      WTF::fastFree(v7, v8);
    }
    v9 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return WTF::fastFree((WTF *)v2, v4);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return result;
}

WTF::StringImpl *WebCore::CachedCSSStyleSheet::setBodyDataFrom(WTF::StringImpl **this, WebCore::StyleSheetContents **a2)
{
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WebCore::StyleSheetContents *v9;
  void *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  WebCore::HTMLMetaCharsetParser *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WebCore::StyleSheetContents *v18;

  WebCore::CachedResource::setBodyDataFrom((WebCore::CachedResource *)this, (const WebCore::CachedResource *)a2);
  v5 = a2[82];
  ++*(_DWORD *)v5;
  v6 = this[82];
  this[82] = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v13 = (WTF *)*((_QWORD *)v6 + 9);
      if (v13)
      {
        *((_QWORD *)v6 + 9) = 0;
        *((_DWORD *)v6 + 20) = 0;
        WTF::fastFree(v13, v4);
      }
      v14 = (WebCore::HTMLMetaCharsetParser *)*((_QWORD *)v6 + 6);
      *((_QWORD *)v6 + 6) = 0;
      if (v14)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v14, (WTF::StringImpl *)v4);
        WTF::fastFree(v15, v16);
      }
      v17 = *((_QWORD *)v6 + 5);
      *((_QWORD *)v6 + 5) = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      WTF::fastFree(v6, v4);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = a2[83];
  if (v7)
    *(_DWORD *)v7 += 2;
  result = this[83];
  this[83] = v7;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)result -= 2;
  }
  v9 = a2[84];
  if (v9)
  {
    ++*(_DWORD *)v9;
    v18 = v9;
    result = (WTF::StringImpl *)WebCore::CachedCSSStyleSheet::saveParsedStyleSheet((WebCore::CachedResource *)this, &v18);
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v9, v10);
      return (WTF::StringImpl *)WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return result;
}

uint64_t WebCore::CachedCSSStyleSheet::saveParsedStyleSheet(WebCore::CachedResource *a1, void *a2)
{
  WebCore::StyleSheetContents *v4;
  int v5;
  _DWORD *v6;
  WebCore::StyleSheetContents *v7;
  int v8;
  WTF *v10;
  void *v11;
  _DWORD *v12;
  WTF *v13;
  void *v14;
  _DWORD *v15;

  v4 = (WebCore::StyleSheetContents *)*((_QWORD *)a1 + 84);
  if (v4)
  {
    v5 = (*(_DWORD *)v4)++;
    --*((_DWORD *)v4 + 32);
    if (v5)
    {
      *(_DWORD *)v4 = v5;
      v6 = *(_DWORD **)a2;
      *v6 = **(_DWORD **)a2 + 1;
      *((_QWORD *)a1 + 84) = v6;
    }
    else
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v4, a2);
      WTF::fastFree(v10, v11);
      v4 = (WebCore::StyleSheetContents *)*((_QWORD *)a1 + 84);
      v12 = *(_DWORD **)a2;
      *v12 = **(_DWORD **)a2 + 1;
      *((_QWORD *)a1 + 84) = v12;
      if (!v4)
        goto LABEL_6;
    }
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v4, a2);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  else
  {
    v15 = *(_DWORD **)a2;
    *v15 = **(_DWORD **)a2 + 1;
    *((_QWORD *)a1 + 84) = v15;
  }
LABEL_6:
  v7 = *(WebCore::StyleSheetContents **)a2;
  *((_DWORD *)v7 + 32) = *(_DWORD *)(*(_QWORD *)a2 + 128) + 1;
  v8 = WebCore::StyleSheetContents::estimatedSizeInBytes(v7);
  return WebCore::CachedResource::setDecodedSize(a1, v8);
}

void WebCore::CachedCSSStyleSheet::checkNotify(uint64_t a1)
{
  unsigned int *v2;
  void *v3;
  WTF *v4;
  uint64_t v5;
  WTF **v6;
  uint64_t v7;
  WTF *v8;
  unsigned int *v9;
  uint64_t *v10;
  const char **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF *v15;
  void *v16;
  unsigned int *v17;
  WTF *v18;
  char v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;

  if ((*(_WORD *)(a1 + 557) & 0x400) == 0)
  {
    WebCore::CachedResourceClientWalker<WebCore::CachedStyleSheetClient>::CachedResourceClientWalker((uint64_t *)&v17, a1);
    v2 = WebCore::CachedResourceClientWalker<WebCore::CachedStyleSheetClient>::next(&v17);
    if (v2)
    {
      v9 = v2;
      do
      {
        if ((*(_BYTE *)(a1 + 344) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 160));
          *(_BYTE *)(a1 + 344) |= 1u;
        }
        v10 = *(uint64_t **)(a1 + 400);
        if (!v10)
        {
          v14 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
          if (v14 != -1)
          {
            v20 = &v21;
            v21 = (WTF::StringImpl *)&v19;
            std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
          }
          v10 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
        }
        WebCore::ResourceResponse::platformLazyInit((uint64_t)v10, 1);
        v11 = *(const char ***)(a1 + 656);
        ++*(_DWORD *)v11;
        WTF::String::String((WTF::String *)&v21, v11[2]);
        (*(void (**)(unsigned int *, uint64_t, uint64_t *, WTF::StringImpl **, uint64_t))(*(_QWORD *)v9 + 48))(v9, a1 + 160, v10, &v21, a1);
        v13 = v21;
        v21 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
        if (*(_DWORD *)v11 == 1)
        {
          WebCore::TextResourceDecoder::~TextResourceDecoder((WebCore::TextResourceDecoder *)v11, v12);
          WTF::fastFree(v15, v16);
        }
        else
        {
          --*(_DWORD *)v11;
        }
        v9 = WebCore::CachedResourceClientWalker<WebCore::CachedStyleSheetClient>::next(&v17);
      }
      while (v9);
    }
    v4 = v18;
    v18 = 0;
    if (v4)
    {
      v6 = (WTF **)((char *)v4 + 8);
      v5 = *(unsigned int *)v4;
      if ((_DWORD)v5)
      {
        v7 = 8 * v5;
        do
        {
          v8 = *v6;
          *v6 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
              WTF::fastFree(v8, v3);
            else
              --*(_DWORD *)v8;
          }
          ++v6;
          v7 -= 8;
        }
        while (v7);
      }
      WTF::fastFree(v4, v3);
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v17, v3);
  }
}

WTF::StringImpl *WebCore::CachedCSSStyleSheet::responseMIMEType@<X0>(WebCore::CachedCSSStyleSheet *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  v3 = WebCore::CachedResource::response(this);
  WebCore::ResourceResponseBase::httpHeaderField((uint64_t)v3, 26, &v6);
  WebCore::extractMIMETypeFromMediaType((WebCore *)&v6, a2);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::StyleSheetContents *WebCore::CachedCSSStyleSheet::destroyDecodedData(WebCore::CachedCSSStyleSheet *this, void *a2)
{
  WebCore::StyleSheetContents *result;
  int v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;

  result = (WebCore::StyleSheetContents *)*((_QWORD *)this + 84);
  if (result)
  {
    v4 = (*(_DWORD *)result)++;
    --*((_DWORD *)result + 32);
    if (v4)
    {
      *(_DWORD *)result = v4;
      *((_QWORD *)this + 84) = 0;
    }
    else
    {
      WebCore::StyleSheetContents::~StyleSheetContents(result, a2);
      WTF::fastFree(v5, v6);
      result = (WebCore::StyleSheetContents *)*((_QWORD *)this + 84);
      *((_QWORD *)this + 84) = 0;
      if (!result)
        return (WebCore::StyleSheetContents *)WebCore::CachedResource::setDecodedSize(this, 0);
    }
    if (*(_DWORD *)result == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(result, a2);
      WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)result;
    }
    return (WebCore::StyleSheetContents *)WebCore::CachedResource::setDecodedSize(this, 0);
  }
  return result;
}

uint64_t WebCore::CachedFont::CachedFont(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  result = WebCore::CachedResource::CachedResource(a1, a2, a5, a3, a4);
  *(_QWORD *)result = off_1E33F8308;
  *(_QWORD *)(result + 664) = 0;
  *(_DWORD *)(result + 656) = 0;
  return result;
}

void WebCore::CachedFont::~CachedFont(WebCore::CachedFont *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  void *v5;
  const void *v6;

  *(_QWORD *)this = off_1E33F8308;
  v3 = (uint64_t *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (WTF::StringImpl *)v3[3];
      v3[3] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v3 + 2, a2);
      v6 = (const void *)v3[1];
      v3[1] = 0;
      if (v6)
        CFRelease(v6);
      WTF::fastFree((WTF *)v3, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::CachedResource::~CachedResource(this, a2);
}

{
  uint64_t *v3;
  WTF::StringImpl *v4;
  void *v5;
  const void *v6;

  *(_QWORD *)this = off_1E33F8308;
  v3 = (uint64_t *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = (WTF::StringImpl *)v3[3];
      v3[3] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v3 + 2, a2);
      v6 = (const void *)v3[1];
      v3[1] = 0;
      if (v6)
        CFRelease(v6);
      WTF::fastFree((WTF *)v3, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::CachedResource::~CachedResource(this, a2);
}

{
  uint64_t *v3;
  WTF *v4;
  void *v5;
  WTF::StringImpl *v6;
  void *v7;
  const void *v8;

  *(_QWORD *)this = off_1E33F8308;
  v3 = (uint64_t *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v6 = (WTF::StringImpl *)v3[3];
      v3[3] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v3 + 2, a2);
      v8 = (const void *)v3[1];
      v3[1] = 0;
      if (v8)
        CFRelease(v8);
      WTF::fastFree((WTF *)v3, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::CachedResource::~CachedResource(this, a2);
  WTF::fastFree(v4, v5);
}

void WebCore::CachedFont::setErrorAndDeleteData(WebCore::CachedFont *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WebCore::ResourceLoader *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  _BYTE v14[24];
  unsigned int **v15;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    goto LABEL_27;
  v2 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v2 = 1;
  *(_QWORD *)(v2 + 8) = this;
  v10 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v2;
  if (!v10)
    goto LABEL_27;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
LABEL_27:
    do
      v3 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v3 + 1, (unsigned int *)v2));
    v13 = (unsigned int *)v2;
    v4 = *(_QWORD *)(v2 + 8);
  }
  else
  {
    v4 = 0;
    v13 = 0;
  }
  v15 = &v13;
  ++*(_DWORD *)(v4 + 548);
  v5 = *(_QWORD *)(v4 + 488);
  if (v5 && *(_QWORD *)(v5 + 8))
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v4 + 464), (uint64_t *)&v15, (uint64_t)v14);
  WebCore::CachedResource::setEncodedSize(this, 0);
  v6 = (WTF *)(*(uint64_t (**)(WebCore::CachedFont *, uint64_t))(*(_QWORD *)this + 72))(this, 4);
  if ((*(_WORD *)((_BYTE *)this + 557) & 0x200) != 0)
  {
    if ((WTF::isMainThread(v6) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F44DE4);
    }
    {
      WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
    }
    WebCore::MemoryCache::remove((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, this);
  }
  v8 = (WebCore::ResourceLoader *)*((_QWORD *)this + 48);
  if (v8)
  {
    ++*((_DWORD *)v8 + 4);
    WebCore::ResourceLoader::cancel(v8);
    if (*((_DWORD *)v8 + 4) == 1)
      (*(void (**)(WebCore::ResourceLoader *))(*(_QWORD *)v8 + 8))(v8);
    else
      --*((_DWORD *)v8 + 4);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v13, v7);
}

uint64_t WebCore::CachedFont::allClientsRemoved(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  void *v4;
  const void *v5;

  v2 = *(uint64_t **)(this + 664);
  *(_QWORD *)(this + 664) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF::StringImpl *)v2[3];
      v2[3] = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v2 + 2, a2);
      v5 = (const void *)v2[1];
      v2[1] = 0;
      if (v5)
        CFRelease(v5);
      return WTF::fastFree((WTF *)v2, v4);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

void WebCore::CachedFont::checkNotify(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int i;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF **v46;
  uint64_t v47;
  WTF *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  WTF *v53;
  unint64_t v54;
  _BYTE v55[24];
  unsigned int **v56;

  if ((*(_WORD *)(a1 + 557) & 0x400) != 0)
    return;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    goto LABEL_110;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a1;
  v49 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (!v49)
    goto LABEL_110;
  do
  {
    v50 = __ldaxr(v49);
    v51 = v50 - 1;
  }
  while (__stlxr(v51, v49));
  if (!v51)
  {
    atomic_store(1u, v49);
    WTF::fastFree((WTF *)v49, a2);
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
LABEL_110:
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
    v52 = (unsigned int *)v3;
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v56 = &v52;
      ++*(_DWORD *)(v5 + 548);
      v6 = *(_QWORD *)(v5 + 488);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v56, (uint64_t)v55);
      }
    }
  }
  else
  {
    v52 = 0;
  }
  WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a1 + 360, a2);
  v8 = *(_QWORD *)(a1 + 360);
  if (!v8)
  {
    v54 = 0;
LABEL_78:
    v53 = 0;
    goto LABEL_79;
  }
  v9 = *(unsigned int *)(v8 - 12);
  if ((_DWORD)v9)
  {
    v10 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v9 + 8));
    *v10 = v9;
    bzero(v10 + 2, 8 * v9);
    v8 = *(_QWORD *)(a1 + 360);
    v53 = (WTF *)v10;
    v54 = 0;
    if (!v8)
      goto LABEL_59;
  }
  else
  {
    v10 = 0;
    v53 = 0;
    v54 = 0;
  }
  v11 = *(unsigned int *)(v8 - 4);
  v12 = v8 + 16 * v11;
  if (*(_DWORD *)(v8 - 12))
  {
    if ((_DWORD)v11)
    {
      v13 = 16 * v11;
      v14 = v8;
      while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
      {
        v14 += 16;
        v13 -= 16;
        if (!v13)
          goto LABEL_16;
      }
    }
    else
    {
      v11 = 0;
      v14 = v8;
    }
  }
  else
  {
LABEL_16:
    v14 = v8 + 16 * v11;
  }
  v15 = v8 + 16 * v11;
  if (v15 != v14)
  {
    while (!*(_QWORD *)(*(_QWORD *)v14 + 8))
    {
      v16 = v14 + 16;
      v14 = v12;
      if (v16 != v12)
      {
        v14 = v16;
        while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
        {
          v14 += 16;
          if (v14 == v12)
          {
            v14 = v12;
            break;
          }
        }
      }
      if (v14 == v15)
      {
        v14 = v15;
        break;
      }
    }
  }
  if (v14 == v12)
    goto LABEL_58;
  v17 = 0;
  do
  {
    v18 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
      goto LABEL_29;
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = v18;
    v23 = *(WTF **)(v18 + 8);
    *(_QWORD *)(v18 + 8) = v19;
    if (!v23)
      goto LABEL_29;
    if (*(_DWORD *)v23 != 1)
    {
      --*(_DWORD *)v23;
LABEL_29:
      ++*(_DWORD *)v19;
      goto LABEL_30;
    }
    WTF::fastFree(v23, v7);
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
      goto LABEL_29;
LABEL_30:
    if (*(_DWORD *)v53 <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x195F45320);
    }
    v20 = (char *)v53 + 8 * v17;
    v21 = (WTF *)*((_QWORD *)v20 + 1);
    *((_QWORD *)v20 + 1) = v19;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree(v21, v7);
      else
        --*(_DWORD *)v21;
    }
    v22 = v12;
    if (v14 + 16 != v12)
    {
      v22 = v14 + 16;
      while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
      {
        v22 += 16;
        if (v22 == v12)
        {
          v22 = v12;
          break;
        }
      }
    }
    v14 = v15;
    if (v22 != v15)
    {
      v14 = v22;
      if (!*(_QWORD *)(*(_QWORD *)v22 + 8))
      {
        while (1)
        {
          v24 = v14 + 16;
          v14 = v12;
          if (v24 != v12)
          {
            v14 = v24;
            while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
            {
              v14 += 16;
              if (v14 == v12)
              {
                v14 = v12;
                break;
              }
            }
          }
          if (v14 == v15)
            break;
          if (*(_QWORD *)(*(_QWORD *)v14 + 8))
            goto LABEL_41;
        }
        v14 = v15;
      }
    }
LABEL_41:
    ++v17;
    ++*(_DWORD *)(a1 + 368);
  }
  while (v14 != v12);
  v10 = (unsigned int *)v53;
LABEL_58:
  if (!v10)
    goto LABEL_78;
LABEL_59:
  while (1)
  {
    v25 = *v10;
    v26 = v54;
    if (v54 >= v25)
      break;
    v27 = v10 + 2;
    v28 = v52;
    while (1)
    {
      v29 = v26++;
      if (v25 <= v29)
      {
        v54 = v26;
        __break(0xC471u);
        JUMPOUT(0x195F45394);
      }
      v30 = *(_QWORD *)&v27[2 * v29];
      if (v30)
      {
        v31 = *(_QWORD **)(v30 + 8);
        if (v31)
        {
          v32 = *((_QWORD *)v28 + 1);
          ++*(_DWORD *)(v32 + 368);
          v33 = v31[1];
          if (v33)
          {
            if (*(_QWORD *)(v33 + 8))
            {
              v34 = *(_QWORD *)(v32 + 360);
              if (v34)
                break;
            }
          }
        }
      }
LABEL_72:
      if (v26 == v25)
      {
        v54 = v25;
        goto LABEL_82;
      }
    }
    v35 = v29;
    v36 = *(_DWORD *)(v34 - 8);
    v37 = (~(v33 << 32) + v33) ^ ((unint64_t)(~(v33 << 32) + v33) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v40 = v36 & ((v39 >> 31) ^ v39);
    for (i = 1; ; ++i)
    {
      v42 = *(_QWORD *)(v34 + 16 * v40);
      if (v42 != -1)
      {
        if (!v42)
          goto LABEL_72;
        if (v42 == v33)
          break;
      }
      v40 = (v40 + i) & v36;
    }
    v54 = v26;
    if ((*(unsigned int (**)(_QWORD *))(*v31 + 32))(v31) != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x195F453B4);
    }
    v43 = *(_QWORD *)&v27[2 * v35];
    if (!v43)
      break;
    v44 = *(_QWORD *)(v43 + 8);
    if (!v44)
      break;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 48))(v44, a1);
    v10 = (unsigned int *)v53;
    if (!v53)
      goto LABEL_78;
  }
  v10 = (unsigned int *)v53;
LABEL_82:
  v53 = 0;
  if (v10)
  {
    v46 = (WTF **)(v10 + 2);
    v45 = *v10;
    if ((_DWORD)v45)
    {
      v47 = 8 * v45;
      do
      {
        v48 = *v46;
        *v46 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 1)
            WTF::fastFree(v48, v7);
          else
            --*(_DWORD *)v48;
        }
        ++v46;
        v47 -= 8;
      }
      while (v47);
    }
    WTF::fastFree((WTF *)v10, v7);
  }
LABEL_79:
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v52, v7);
}

BOOL WebCore::CachedFont::mayTryReplaceEncodedData(WebCore::CachedFont *this)
{
  return *((_BYTE *)this + 657) == 0;
}

void WebCore::CachedApplicationManifest::~CachedApplicationManifest(WebCore::CachedApplicationManifest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF *v5;
  WebCore::HTMLMetaCharsetParser *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 672))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 83);
    *((_QWORD *)this + 83) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v5 = *(WTF **)(v4 + 72);
      if (v5)
      {
        *(_QWORD *)(v4 + 72) = 0;
        *(_DWORD *)(v4 + 80) = 0;
        WTF::fastFree(v5, a2);
      }
      v6 = *(WebCore::HTMLMetaCharsetParser **)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;
      if (v6)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v6, a2);
        WTF::fastFree(v7, v8);
      }
      v9 = *(_QWORD *)(v4 + 40);
      *(_QWORD *)(v4 + 40) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WebCore::CachedResource::~CachedResource(this, a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  WebCore::HTMLMetaCharsetParser *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  if (*((_BYTE *)this + 672))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 83);
    *((_QWORD *)this + 83) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *(WTF **)(v4 + 72);
      if (v7)
      {
        *(_QWORD *)(v4 + 72) = 0;
        *(_DWORD *)(v4 + 80) = 0;
        WTF::fastFree(v7, a2);
      }
      v8 = *(WebCore::HTMLMetaCharsetParser **)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;
      if (v8)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v8, a2);
        WTF::fastFree(v9, v10);
      }
      v11 = *(_QWORD *)(v4 + 40);
      *(_QWORD *)(v4 + 40) = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WebCore::CachedResource::~CachedResource(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::CachedApplicationManifest::textResourceDecoder(WebCore::CachedApplicationManifest *this)
{
  return *((_QWORD *)this + 82);
}

uint64_t WebCore::CachedResource::shouldIgnoreHTTPStatusCodeErrors(WebCore::CachedResource *this)
{
  return 0;
}

uint64_t WebCore::CachedResource::shouldCacheResponse()
{
  return 1;
}

uint64_t WebCore::CachedResource::mayTryReplaceEncodedData(WebCore::CachedResource *this)
{
  return 0;
}

uint64_t WebCore::CachedCSSStyleSheet::mayTryReplaceEncodedData(WebCore::CachedCSSStyleSheet *this)
{
  return 1;
}

void WebCore::CachedResource::encoding(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL WebCore::CachedFont::stillNeedsLoad(WebCore::CachedFont *this)
{
  return *((_BYTE *)this + 656) == 0;
}

uint64_t WebCore::ArchiveResource::ArchiveResource(uint64_t a1, unsigned int **a2, uint64_t a3, _DWORD **a4, _DWORD **a5, _DWORD **a6, WebCore::ResourceResponseBase *a7, _DWORD **a8)
{
  _DWORD *v15;
  const void *v16;
  char v17;
  int v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  CFTypeRef v32;
  WTF::StringImpl *v33;
  CFTypeRef v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[19];
  CFTypeRef cf;
  char v62;

  v15 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v15 += 2;
  v40 = *(_OWORD *)(a3 + 24);
  v41 = *(_OWORD *)(a3 + 8);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v42, a7);
  v16 = (const void *)*((_QWORD *)a7 + 30);
  cf = v16;
  if (v16)
    CFRetain(v16);
  v17 = *((_BYTE *)a7 + 248);
  *(_OWORD *)(a1 + 24) = v41;
  *(_OWORD *)(a1 + 40) = v40;
  v18 = v43;
  v19 = v44;
  *(_OWORD *)(a1 + 64) = v43;
  *(_OWORD *)(a1 + 80) = v19;
  v20 = v18;
  v21 = v47;
  v47 = 0u;
  v22 = v48;
  v48 = 0u;
  v62 = v17;
  *(_QWORD *)a1 = off_1E33F8110;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v15;
  v23 = v42;
  v42 = 0;
  *(_QWORD *)(a1 + 56) = v23;
  LODWORD(v43) = v20 & 0xFFFFFFFE;
  v24 = v45;
  v25 = v46;
  v45 = 0;
  *(_QWORD *)(a1 + 96) = v24;
  *(_QWORD *)(a1 + 104) = v25;
  *(_OWORD *)(a1 + 112) = v21;
  *(_OWORD *)(a1 + 128) = v22;
  *(_QWORD *)&v21 = v49;
  v49 = 0;
  *(_QWORD *)(a1 + 144) = v21;
  v26 = v50;
  v50 = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)&v21 = v51;
  v51 = 0;
  *(_QWORD *)(a1 + 160) = v21;
  v27 = v52;
  v52 = 0;
  *(_QWORD *)(a1 + 168) = v27;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (v54)
  {
    v28 = v53;
    v53 = 0;
    *(_QWORD *)(a1 + 176) = v28;
    *(_BYTE *)(a1 + 184) = 1;
  }
  v29 = v58;
  v30 = *(_OWORD *)v60;
  *(_OWORD *)(a1 + 256) = v59;
  *(_OWORD *)(a1 + 272) = v30;
  v31 = v56;
  *(_OWORD *)(a1 + 192) = v55;
  *(_OWORD *)(a1 + 208) = v31;
  *(_OWORD *)(a1 + 224) = v57;
  *(_OWORD *)(a1 + 240) = v29;
  *(_DWORD *)(a1 + 287) = *(_DWORD *)&v60[15];
  v32 = cf;
  cf = 0;
  *(_QWORD *)(a1 + 296) = v32;
  *(_BYTE *)(a1 + 304) = v62;
  *(_QWORD *)(a1 + 312) = 0;
  WebCore::SharedBufferBuilder::initialize((WebCore::SharedBufferBuilder *)(a1 + 312), a2);
  v34 = cf;
  cf = 0;
  if (v34)
    CFRelease(v34);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v42, v33);
  *(_QWORD *)a1 = off_1E33F8400;
  v35 = *a4;
  if (*a4)
    *v35 += 2;
  *(_QWORD *)(a1 + 320) = v35;
  v36 = *a5;
  if (*a5)
    *v36 += 2;
  *(_QWORD *)(a1 + 328) = v36;
  v37 = *a6;
  if (*a6)
    *v37 += 2;
  *(_QWORD *)(a1 + 336) = v37;
  v38 = *a8;
  if (*a8)
    *v38 += 2;
  *(_QWORD *)(a1 + 344) = v38;
  *(_BYTE *)(a1 + 352) = 0;
  return a1;
}

void WebCore::ArchiveResource::~ArchiveResource(WebCore::ArchiveResource *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ArchiveResource::~ArchiveResource(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = off_1E33F8400;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::SubstituteResource::~SubstituteResource(this, a2);
}

void WebCore::LegacyWebArchive::~LegacyWebArchive(WebCore::LegacyWebArchive *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::Archive::~Archive(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::LegacyWebArchive::shouldLoadFromArchiveOnly(WebCore::LegacyWebArchive *this)
{
  return 0;
}

uint64_t WebCore::LegacyWebArchive::shouldOverrideBaseURL(WebCore::LegacyWebArchive *this)
{
  return 0;
}

uint64_t WebCore::LegacyWebArchive::shouldUseMainResourceEncoding(WebCore::LegacyWebArchive *this)
{
  return 1;
}

uint64_t WebCore::LegacyWebArchive::shouldUseMainResourceURL(WebCore::LegacyWebArchive *this)
{
  return 1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl **result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (WTF::StringImpl **)a2[1];
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ArchiveResource,WTF::RawPtrTraits<WebCore::ArchiveResource>,WTF::DefaultRefDerefTraits<WebCore::ArchiveResource>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::ArchiveResource*>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl **v12;
  int i;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl ***v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF::StringImpl *)-1)
      break;
    v12 = (WTF::StringImpl **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    v17 = *a2;
    if (*a2)
      *(_DWORD *)v17 += 2;
    *v15 = v17;
    v18 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      ++*((_DWORD *)v18 + 2);
    result = (WTF::StringImpl **)v15[1];
    v15[1] = v18;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 1))(result);
      else
        --*((_DWORD *)result + 2);
    }
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_34;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_43:
        result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v28, v15);
        v15 = result;
        v24 = *a1;
        if (*a1)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_47;
      }
LABEL_34:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_43;
    }
LABEL_47:
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v24 + 16 * v27;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3))
    goto LABEL_13;
  v22 = *a1;
  if (*a1)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v22 + 16 * v23;
  *(_BYTE *)(a4 + 16) = 0;
  v29 = *(WTF::StringImpl **)a3;
  v30 = (WTF::StringImpl ***)(v8 + 16 * v14 + 8);
  if (*(_QWORD *)a3)
    ++*((_DWORD *)v29 + 2);
  result = *v30;
  *v30 = (WTF::StringImpl **)v29;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 1))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

char *WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x195F46040);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12));
      v18 = 24 * v16;
      v19 = WTF::fastMalloc((WTF *)(24 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::MarkupExclusionRule>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x195F46048);
      }
      v10 = 24 * v9;
      v11 = WTF::fastMalloc((WTF *)(24 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::MarkupExclusionRule>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::MarkupExclusionRule>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 4);
      *((_DWORD *)v5 + 4) = 0;
      *(_DWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 5);
      *((_DWORD *)v5 + 5) = 0;
      *(_DWORD *)(a3 + 20) = v7;
      v8 = *((unsigned int *)v5 + 5);
      if ((_DWORD)v8)
      {
        v9 = 16 * v8;
        v10 = (WTF::StringImpl **)(*((_QWORD *)v5 + 1) + 8);
        do
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = *(v10 - 1);
          *(v10 - 1) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
          v10 += 2;
          v9 -= 16;
        }
        while (v9);
      }
      v13 = (WTF *)*((_QWORD *)v5 + 1);
      if (v13)
      {
        *((_QWORD *)v5 + 1) = 0;
        *((_DWORD *)v5 + 4) = 0;
        WTF::fastFree(v13, a2);
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 24;
      v5 = (WTF::StringImpl *)((char *)v5 + 24);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::String>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;

  v7 = *(_QWORD *)result;
  v8 = *(_OWORD **)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v10 = v9 - 1;
    if ((unint64_t)(v9 - 1) >> 31)
    {
      result = 124;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = *a3;
  v12 = *a4;
  if (v7)
  {
    v13 = *(_DWORD *)(v7 + 4);
    if (v11)
      goto LABEL_5;
LABEL_24:
    v14 = 0;
    if (v12)
      goto LABEL_6;
LABEL_25:
    v15 = 0;
    goto LABEL_7;
  }
  v13 = 0;
  if (!v11)
    goto LABEL_24;
LABEL_5:
  v14 = *(_DWORD *)(v11 + 4);
  if (!v12)
    goto LABEL_25;
LABEL_6:
  v15 = *(_DWORD *)(v12 + 4);
LABEL_7:
  if (((v15 | v14) & 0x80000000) == 0)
  {
    v16 = __OFADD__(v14, v15);
    v17 = v14 + v15;
    if (!v16)
    {
      v16 = __OFADD__(v10, v17);
      v18 = v10 + v17;
      v19 = v16;
      if ((v13 & 0x80000000) == 0 && !v19)
      {
        result = (v13 + v18);
        if (!__OFADD__(v13, v18))
        {
          if (!v7 || (*(_BYTE *)(v7 + 16) & 4) != 0)
          {
            if (v11)
            {
              v21 = *(_DWORD *)(v11 + 16);
              v20 = (v21 >> 2) & 1;
              if (!v12 || (v21 & 4) == 0)
                return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, (_DWORD *)v7, v8, v10, v11, v12, a5);
            }
            else if (!v12)
            {
              v20 = 1;
              return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, (_DWORD *)v7, v8, v10, v11, v12, a5);
            }
            v20 = (*(unsigned __int8 *)(v12 + 16) >> 2) & 1;
          }
          else
          {
            v20 = 0;
          }
          return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v20, (_DWORD *)v7, v8, v10, v11, v12, a5);
        }
      }
    }
  }
  *a5 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, _OWORD *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  int v13;
  _DWORD *v15;
  _BYTE *v16;
  _BYTE *v17;
  size_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int8x16_t v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  unsigned __int128 *v33;
  unsigned __int128 *v34;
  unsigned __int128 v35;
  char v36;
  _DWORD *v37;
  int8x16x2_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v37;
        if (v37)
        {
          v16 = v37 + 5;
          *v37 = 2;
          v15[1] = v13;
          *((_QWORD *)v15 + 1) = v15 + 5;
          v15[4] = 4;
          if (a3)
          {
            v17 = (_BYTE *)*((_QWORD *)a3 + 1);
            v18 = a3[1];
            if ((a3[4] & 4) != 0)
            {
              if ((_DWORD)v18)
              {
                if ((_DWORD)v18 == 1)
                  *v16 = *v17;
                else
                  memcpy(v15 + 5, v17, v18);
              }
            }
            else
            {
              if (v18 < 0x10)
              {
                v33 = (unsigned __int128 *)(v15 + 5);
              }
              else
              {
                v33 = (unsigned __int128 *)&v16[v18 & 0xFFFFFFF0];
                v34 = (unsigned __int128 *)(v15 + 5);
                do
                {
                  v35 = (unsigned __int128)vld2q_s8(v17);
                  v17 += 32;
                  *v34++ = v35;
                }
                while (v34 != v33);
              }
              while (v33 != (unsigned __int128 *)&v16[v18])
              {
                v36 = *v17;
                v17 += 2;
                *(_BYTE *)v33 = v36;
                v33 = (unsigned __int128 *)((char *)v33 + 1);
              }
            }
            v19 = a3[1];
          }
          else
          {
            v19 = 0;
          }
          v20 = &v16[v19];
          if (a5)
          {
            if (a5 == 1)
              *v20 = *(_BYTE *)a4;
            else
              memcpy(&v16[v19], a4, a5);
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v20[a5], a6, a7);
        }
        goto LABEL_27;
      }
LABEL_32:
      v15 = 0;
      goto LABEL_27;
    }
LABEL_31:
    v15 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_27;
  }
  if (!(_DWORD)result)
    goto LABEL_31;
  if (result > 0x7FFFFFEF)
    goto LABEL_32;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v37;
  if (v37)
  {
    *v37 = 2;
    v15[1] = v13;
    *((_QWORD *)v15 + 1) = v15 + 5;
    v15[4] = 0;
    v37 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v37, (char *)v15 + 20);
    v21 = (unint64_t)v37;
    if (v37)
      v21 = v37[1];
    v22 = (char *)v15 + 2 * v21 + 20;
    v23 = &v22[2 * a5];
    if ((a5 & 0xFFFFFFC0) != 0)
    {
      v24 = &v22[2 * (a5 & 0xFFFFFFC0)];
      v25 = 0uLL;
      do
      {
        v38.val[0] = (int8x16_t)*a4;
        v26 = *((int8x16_t *)a4 + 1);
        v39.val[0] = (int8x16_t)a4[2];
        v27 = a4[3];
        a4 += 4;
        v28 = v27;
        v39.val[1] = 0uLL;
        v40.val[0] = v26;
        v38.val[1] = 0uLL;
        v29 = v22;
        vst2q_s8(v29, v38);
        v29 += 32;
        v40.val[1] = 0uLL;
        vst2q_s8(v29, v40);
        v30 = v22 + 64;
        vst2q_s8(v30, v39);
        v31 = v22 + 96;
        vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
        v22 += 128;
      }
      while (v22 != v24);
      v22 = v24;
    }
    while (v22 != v23)
    {
      v32 = *(unsigned __int8 *)a4;
      a4 = (_OWORD *)((char *)a4 + 1);
      *(_WORD *)v22 = v32;
      v22 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v23, a6, a7);
  }
LABEL_27:
  *a8 = v15;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v8, 0);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (WTF *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = v15 + 16 * v22;
          *(_QWORD *)v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *(_QWORD *)v24 = v25;
          *(_DWORD *)(v24 + 8) = *(_DWORD *)(v6 + 16 * v11 + 8);
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
              WTF::fastFree(v26, v10);
            else
              --*(_DWORD *)v26;
          }
          if (v13 == a3)
            v12 = v24;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

double WebCore::CachedImage::CachedImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double result;

  v4 = WebCore::CachedResource::CachedResource(a1, a2, 1, a3, a4);
  *(_QWORD *)v4 = off_1E33F8488;
  result = 0.0;
  *(_OWORD *)(v4 + 656) = 0u;
  *(_OWORD *)(v4 + 672) = 0u;
  *(_OWORD *)(v4 + 688) = 0u;
  *(_OWORD *)(v4 + 704) = 0u;
  *(_BYTE *)(v4 + 720) = -112;
  *(_WORD *)(v4 + 557) &= 0xFF1Fu;
  return result;
}

BOOL WebCore::CachedResource::isCORSSameOrigin(WebCore::CachedResource *this)
{
  uint64_t v1;
  uint64_t *v2;
  WebCore::CachedResource *v4;
  char v5;

  v1 = *((_QWORD *)this + 50);
  if (v1)
  {
    v2 = (uint64_t *)(v1 + 320);
  }
  else
  {
    v4 = this;
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v5);
    this = v4;
    v2 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  return !*((_BYTE *)v2 + 60) && (*(_WORD *)((_BYTE *)this + 557) & 3) != 2;
}

void WebCore::CachedImage::~CachedImage(unsigned int **this, void *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::SVGImageCache *v7;
  WTF *v8;
  void *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF **v20;
  WTF *v21;
  WTF::StringImpl *v22;
  unsigned int *v23;
  uint64_t v24;
  WTF **v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  WTF **v29;
  unsigned int *v30;

  WebCore::CachedImage::clearImage(this, a2);
  v4 = this[89];
  this[89] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v17 = v4[7];
      if ((_DWORD)v17)
      {
        v30 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v4 + 2), (WTF::StringImpl *)(*((_QWORD *)v4 + 2) + 32 * v17));
        v4 = v30;
      }
      v18 = (WTF *)*((_QWORD *)v4 + 2);
      if (v18)
      {
        *((_QWORD *)v4 + 2) = 0;
        v4[6] = 0;
        v26 = v4;
        WTF::fastFree(v18, v3);
        v4 = v26;
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  v7 = (WebCore::SVGImageCache *)this[87];
  this[87] = 0;
  if (v7)
  {
    WebCore::SVGImageCache::~SVGImageCache(v7, v3);
    WTF::fastFree(v8, v9);
  }
  v10 = this[86];
  this[86] = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = this[85];
  this[85] = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = this[83];
  if (v12)
  {
    v14 = *(v12 - 1);
    if ((_DWORD)v14)
    {
      v15 = (WTF **)this[83];
      do
      {
        v16 = *v15;
        if (*v15 != (WTF *)-1)
        {
          *v15 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 1)
              WTF::fastFree(v16, v3);
            else
              --*(_DWORD *)v16;
          }
        }
        ++v15;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v12 - 4), v3);
  }
  v13 = this[82];
  if (v13)
  {
    v19 = *(v13 - 1);
    if ((_DWORD)v19)
    {
      v20 = (WTF **)this[82];
      do
      {
        v21 = *v20;
        if (*v20 != (WTF *)-1)
        {
          v22 = v20[3];
          v20[3] = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
            {
              v23 = v13;
              v24 = v19;
              v25 = v20;
              WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v3);
              v20 = v25;
              v19 = v24;
              v13 = v23;
              v21 = *v25;
            }
            else
            {
              *(_DWORD *)v22 -= 2;
            }
          }
          *v20 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
            {
              v27 = v13;
              v28 = v19;
              v29 = v20;
              WTF::fastFree(v21, v3);
              v20 = v29;
              v19 = v28;
              v13 = v27;
            }
            else
            {
              --*(_DWORD *)v21;
            }
          }
        }
        v20 += 8;
        --v19;
      }
      while (v19);
    }
    WTF::fastFree((WTF *)(v13 - 4), v3);
  }
  WebCore::CachedResource::~CachedResource((WebCore::CachedResource *)this, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::CachedImage::~CachedImage(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned int **WebCore::CachedImage::clearImage(unsigned int **this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t **v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  WTF *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v22;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  WTF *v35;

  if (!this[86])
    return this;
  v2 = (uint64_t)this;
  v3 = this[85];
  this[85] = 0;
  if (v3)
  {
    v4 = (uint64_t **)(v3 + 6);
    v5 = v3[9];
    v6 = v3[8] + 1;
    v3[8] = v6;
    if (v6 <= v5)
      goto LABEL_8;
    v7 = *v4;
    if (!*v4)
      goto LABEL_5;
    v18 = *((unsigned int *)v7 - 1);
    if (!(_DWORD)v18)
      goto LABEL_49;
    v19 = 0;
    v20 = v18 - 1;
    do
    {
      this = (unsigned int **)&v7[v20];
      if ((unint64_t)*this + 1 >= 2 && !*((_QWORD *)*this + 1))
      {
        v33 = v20;
        v34 = v7;
        v32 = v19;
        this = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(this, a2);
        v20 = v33;
        v7 = v34;
        v19 = v32 + 1;
      }
    }
    while ((unint64_t)v20--);
    v7 = *v4;
    if (v19)
    {
      v26 = v19;
      *((_DWORD *)v7 - 4) += v19;
      v27 = *v4;
      if (*v4)
        v28 = *((_DWORD *)v27 - 3);
      else
        v28 = 0;
      *((_DWORD *)v27 - 3) = v28 - v26;
      v7 = *v4;
    }
    if (!v7)
    {
LABEL_5:
      LODWORD(v7) = 0;
      v3[8] = 0;
LABEL_6:
      v8 = (int)v7;
LABEL_7:
      v3[9] = 2 * v8;
LABEL_8:
      v9 = *(WTF **)(v2 + 8);
      if (v9 && *((_QWORD *)v9 + 1))
        this = (unsigned int **)WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)v3 + 3, v9);
      v10 = *v4;
      if (*v4 && *((_DWORD *)v10 - 3))
      {
        v15 = *((unsigned int *)v10 - 1);
        if ((_DWORD)v15)
        {
          v16 = 8 * v15;
          v17 = *v4;
          while ((unint64_t)(*v17 + 1) <= 1)
          {
            ++v17;
            v16 -= 8;
            if (!v16)
              goto LABEL_12;
          }
        }
        else
        {
          v17 = *v4;
        }
        v24 = &v10[v15];
        if (v17 != v24)
        {
          v25 = *v17;
LABEL_55:
          if (*(_QWORD *)(v25 + 8))
            goto LABEL_21;
          while (++v17 != v24)
          {
            v25 = *v17;
            if ((unint64_t)(*v17 + 1) > 1)
            {
              if (v17 != v24)
                goto LABEL_55;
              break;
            }
          }
        }
      }
LABEL_12:
      if ((*(_WORD *)(v2 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v2 + 720) & 0x10) != 0)
      {
        WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v35);
        v29 = (unsigned int *)v35;
        v11 = *((_QWORD *)v35 + 1);
        v35 = 0;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          atomic_store(1u, v29);
          WTF::fastFree((WTF *)v29, v9);
        }
      }
      else
      {
        v11 = *(_QWORD *)(v2 + 688);
        if (!v11)
          v11 = WebCore::Image::nullImage((WebCore::Image *)this);
      }
      ++*(_DWORD *)(v11 + 8);
      v12 = *(unsigned int **)(v11 + 32);
      *(_QWORD *)(v11 + 32) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v9);
        }
      }
      if (*(_DWORD *)(v11 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      else
        --*(_DWORD *)(v11 + 8);
LABEL_21:
      if (v3[2] == 1)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
      goto LABEL_23;
    }
    v22 = *((_DWORD *)v7 - 1);
    if (v22 < 9 || 6 * *((_DWORD *)v7 - 3) >= v22)
    {
LABEL_49:
      v3[8] = 0;
    }
    else
    {
      this = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)v3 + 3);
      v7 = (uint64_t *)*((_QWORD *)v3 + 3);
      v3[8] = 0;
      if (!v7)
        goto LABEL_6;
    }
    LODWORD(v7) = *((_DWORD *)v7 - 3);
    v8 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_23:
  this = *(unsigned int ***)(v2 + 688);
  *(_QWORD *)(v2 + 688) = 0;
  if (this)
  {
    if (*((_DWORD *)this + 2) == 1)
      this = (unsigned int **)(*((uint64_t (**)(unsigned int **))*this + 1))(this);
    else
      --*((_DWORD *)this + 2);
  }
  *(_QWORD *)(v2 + 704) = 0;
  *(_BYTE *)(v2 + 720) = *(_BYTE *)(v2 + 720) & 0x78 | 0x80;
  return this;
}

WebCore::SVGImageCache **std::unique_ptr<WebCore::SVGImageCache>::~unique_ptr[abi:sn180100](WebCore::SVGImageCache **a1, void *a2)
{
  WebCore::SVGImageCache *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::SVGImageCache::~SVGImageCache(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

_QWORD *WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::~HashMap(_QWORD *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF **v4;
  WTF *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF **v9;
  WTF **v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *result;
  if (*result)
  {
    v13 = result;
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = (WTF **)*result;
      do
      {
        v5 = *v4;
        if (*v4 != (WTF *)-1)
        {
          v6 = v4[3];
          v4[3] = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
            {
              v9 = v4;
              v11 = v2;
              v7 = v3;
              WTF::StringImpl::destroy(v6, a2);
              v3 = v7;
              v4 = v9;
              v2 = v11;
              v5 = *v9;
            }
            else
            {
              *(_DWORD *)v6 -= 2;
            }
          }
          *v4 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 1)
            {
              v10 = v4;
              v12 = v2;
              v8 = v3;
              WTF::fastFree(v5, a2);
              v3 = v8;
              v4 = v10;
              v2 = v12;
            }
            else
            {
              --*(_DWORD *)v5;
            }
          }
        }
        v4 += 8;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
    return v13;
  }
  return result;
}

void WebCore::CachedResource::~CachedResource(WebCore::CachedResource *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  WebCore::CachedResource::ResponseData *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  WebCore::ResourceRequest *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  WTF **v34;
  WTF *v35;
  WTF::StringImpl *v36;
  void *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  WTF *v51;
  uint64_t v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl **v57;
  WTF::StringImpl **v58;
  uint64_t v59;
  unsigned int ***v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;

  *(_QWORD *)this = off_1E33F86E0;
  if (*((_BYTE *)this + 648))
  {
    v3 = (WTF *)*((_QWORD *)this + 79);
    if (v3)
    {
      *((_QWORD *)this + 79) = 0;
      *((_DWORD *)this + 160) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  if (*((_BYTE *)this + 616))
  {
    v4 = (WTF *)*((_QWORD *)this + 75);
    if (v4)
    {
      *((_QWORD *)this + 75) = 0;
      *((_DWORD *)this + 152) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  if (*((_BYTE *)this + 584))
  {
    v5 = (WTF *)*((_QWORD *)this + 71);
    if (v5)
    {
      *((_QWORD *)this + 71) = 0;
      *((_DWORD *)this + 144) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v42 = *(WTF::StringImpl **)(v7 + 48);
      *(_QWORD *)(v7 + 48) = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v42 -= 2;
      }
      v43 = *(WTF::StringImpl **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v43 -= 2;
      }
      v44 = *(unsigned int *)(v7 + 32);
      if ((_DWORD)v44 != -1)
        ((void (*)(char *, uint64_t))off_1E33F88A0[v44])(&v68, v7 + 8);
      *(_DWORD *)(v7 + 32) = -1;
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (unsigned int *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v14 = (unsigned int *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  v17 = *((unsigned int *)this + 121);
  if ((_DWORD)v17)
  {
    v53 = 16 * v17;
    v54 = (WTF::StringImpl **)(*((_QWORD *)this + 59) + 8);
    do
    {
      v55 = *v54;
      *v54 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
        {
          v57 = v54;
          WTF::StringImpl::destroy(v55, (WTF::StringImpl *)a2);
          v54 = v57;
        }
        else
        {
          *(_DWORD *)v55 -= 2;
        }
      }
      v56 = *(v54 - 1);
      *(v54 - 1) = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
        {
          v58 = v54;
          WTF::StringImpl::destroy(v56, (WTF::StringImpl *)a2);
          v54 = v58;
        }
        else
        {
          *(_DWORD *)v56 -= 2;
        }
      }
      v54 += 2;
      v53 -= 16;
    }
    while (v53);
  }
  v18 = (WTF *)*((_QWORD *)this + 59);
  if (v18)
  {
    *((_QWORD *)this + 59) = 0;
    *((_DWORD *)this + 120) = 0;
    WTF::fastFree(v18, a2);
  }
  v19 = *((_QWORD *)this + 58);
  if (v19)
    WTF::fastFree((WTF *)(v19 - 16), a2);
  v20 = *((_QWORD *)this + 56);
  if (v20)
  {
    v66 = *((_QWORD *)this + 56);
    v59 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v59)
    {
      v60 = (unsigned int ***)(v66 + 8);
      do
      {
        if (*(v60 - 1) != (unsigned int **)-1)
        {
          std::unique_ptr<WebCore::CachedResource::Callback>::reset[abi:sn180100](v60, 0);
          v61 = (WTF *)*(v60 - 1);
          *(v60 - 1) = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 1)
              WTF::fastFree(v61, a2);
            else
              --*(_DWORD *)v61;
          }
        }
        v60 += 2;
        --v59;
      }
      while (v59);
    }
    WTF::fastFree((WTF *)(v66 - 16), a2);
  }
  v21 = (_DWORD *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 120))(v21);
    else
      --v21[2];
  }
  v22 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v22)
  {
    WebCore::CachedResource::ResponseData::~ResponseData(v22, (WTF::StringImpl *)a2);
    WTF::fastFree(v23, v24);
  }
  v25 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr((unsigned int *)v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v25));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v25);
      v45 = *(unsigned int *)(v25 + 20);
      if ((_DWORD)v45)
      {
        v46 = *(_QWORD *)(v25 + 8);
        v47 = v46 + 16 * v45;
        do
        {
          v48 = *(unsigned int **)(v46 + 8);
          *(_QWORD *)(v46 + 8) = 0;
          if (v48)
          {
            do
            {
              v49 = __ldaxr(v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, v48));
            if (!v50)
            {
              v67 = v47;
              v63 = v46;
              v64 = v25;
              atomic_store(1u, v48);
              v65 = v48[6];
              if ((_DWORD)v65 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v65])(&v69, v48 + 2);
              v48[6] = -1;
              WTF::fastFree((WTF *)v48, a2);
              v25 = v64;
              v46 = v63;
              v47 = v67;
            }
          }
          v46 += 16;
        }
        while (v46 != v47);
      }
      v51 = *(WTF **)(v25 + 8);
      if ((WTF *)(v25 + 24) != v51 && v51 != 0)
      {
        *(_QWORD *)(v25 + 8) = 0;
        *(_DWORD *)(v25 + 16) = 0;
        v62 = v25;
        WTF::fastFree(v51, a2);
        v25 = v62;
      }
      WTF::fastFree((WTF *)v25, a2);
    }
  }
  v28 = (_DWORD *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v28)
  {
    if (v28[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
    else
      --v28[4];
  }
  v29 = (WebCore::ResourceRequest *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v29)
  {
    WebCore::ResourceRequest::~ResourceRequest(v29, a2);
    WTF::fastFree(v30, v31);
  }
  v32 = *((_QWORD *)this + 45);
  if (v32)
  {
    v33 = *(unsigned int *)(v32 - 4);
    if ((_DWORD)v33)
    {
      v34 = (WTF **)*((_QWORD *)this + 45);
      do
      {
        v35 = *v34;
        if (*v34 != (WTF *)-1)
        {
          *v34 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 1)
              WTF::fastFree(v35, a2);
            else
              --*(_DWORD *)v35;
          }
        }
        v34 += 2;
        --v33;
      }
      while (v33);
    }
    WTF::fastFree((WTF *)(v32 - 16), a2);
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::CachedResource *)((char *)this + 160), a2);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::CachedResource *)((char *)this + 16), v36);
  v38 = *((_QWORD *)this + 1);
  if (v38)
  {
    *(_QWORD *)(v38 + 8) = 0;
    v39 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v39)
    {
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        atomic_store(1u, v39);
        WTF::fastFree((WTF *)v39, v37);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::CachedResource::~CachedResource(this, a2);
  WTF::fastFree(v2, v3);
}

WebCore::SVGImageCache *WebCore::CachedImage::setBodyDataFrom(WebCore::SVGImageCache **this, WebCore::SVGImageCache **a2)
{
  WebCore::SVGImageCache *v4;
  WebCore::SVGImageCache *v5;
  WebCore::SVGImageCache *v6;
  WebCore::SVGImageCache *result;
  uint64_t *v8;
  void *v9;
  WebCore::SVGImageCache *v10;
  uint64_t v11;
  unsigned int v12;
  WTF *v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  char v18[24];

  WebCore::CachedResource::setBodyDataFrom((WebCore::CachedResource *)this, (const WebCore::CachedResource *)a2);
  v4 = a2[86];
  if (v4)
    ++*((_DWORD *)v4 + 2);
  v5 = this[86];
  this[86] = v4;
  if (v5)
  {
    if (*((_DWORD *)v5 + 2) == 1)
      (*(void (**)(WebCore::SVGImageCache *))(*(_QWORD *)v5 + 8))(v5);
    else
      --*((_DWORD *)v5 + 2);
  }
  v6 = a2[85];
  if (v6)
    ++*((_DWORD *)v6 + 2);
  result = this[85];
  this[85] = v6;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      result = (WebCore::SVGImageCache *)(*(uint64_t (**)(WebCore::SVGImageCache *))(*(_QWORD *)result + 8))(result);
      v6 = this[85];
      if (!v6)
        goto LABEL_13;
      goto LABEL_12;
    }
    --*((_DWORD *)result + 2);
  }
  if (v6)
LABEL_12:
    result = (WebCore::SVGImageCache *)WTF::WeakHashSet<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedImage>((uint64_t)v18, (_DWORD *)v6 + 6, (uint64_t)this);
LABEL_13:
  v8 = (uint64_t *)this[86];
  if (v8)
  {
    result = (WebCore::SVGImageCache *)(*(uint64_t (**)(WebCore::SVGImageCache *))(*v8 + 56))(this[86]);
    if ((_DWORD)result)
    {
      ++*((_DWORD *)v8 + 2);
      v10 = (WebCore::SVGImageCache *)WTF::fastMalloc((WTF *)0x10);
      v11 = v8[2];
      if (v11)
        goto LABEL_34;
      v11 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = v8;
      v15 = (unsigned int *)v8[2];
      v8[2] = v11;
      if (!v15)
        goto LABEL_34;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v9);
      }
      v11 = v8[2];
      if (v11)
      {
LABEL_34:
        do
          v12 = __ldaxr((unsigned int *)v11);
        while (__stlxr(v12 + 1, (unsigned int *)v11));
      }
      *(_QWORD *)v10 = v11;
      *((_QWORD *)v10 + 1) = 0;
      result = this[87];
      this[87] = v10;
      if (result)
      {
        WebCore::SVGImageCache::~SVGImageCache(result, v9);
        result = (WebCore::SVGImageCache *)WTF::fastFree(v13, v14);
      }
      if (*((_DWORD *)v8 + 2) == 1)
        return (WebCore::SVGImageCache *)(*(uint64_t (**)(uint64_t *))(*v8 + 8))(v8);
      else
        --*((_DWORD *)v8 + 2);
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedImage>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  unsigned int *result;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int **v23;
  unsigned int v25;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  WTF *v33;

  v6 = a2[3];
  v7 = a2[2] + 1;
  a2[2] = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
    {
LABEL_3:
      v9 = 0;
      a2[2] = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      a2[3] = 2 * v10;
      goto LABEL_6;
    }
    v20 = *(_DWORD *)(v8 - 4);
    if (!v20)
      goto LABEL_31;
    v21 = 0;
    v22 = v20 - 1;
    do
    {
      v23 = (unsigned int **)(v8 + 8 * v22);
      if ((unint64_t)*v23 + 1 >= 2 && !*((_QWORD *)*v23 + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v23, a2);
        ++v21;
      }
    }
    while ((unint64_t)v22--);
    v8 = *(_QWORD *)a2;
    if (v21)
    {
      *(_DWORD *)(v8 - 16) += v21;
      v31 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        v32 = *(_DWORD *)(v31 - 12);
      else
        v32 = 0;
      *(_DWORD *)(v31 - 12) = v32 - v21;
      v8 = *(_QWORD *)a2;
    }
    if (!v8)
      goto LABEL_3;
    v25 = *(_DWORD *)(v8 - 4);
    if (v25 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v25)
    {
LABEL_31:
      a2[2] = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
      v8 = *(_QWORD *)a2;
      a2[2] = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = *(_QWORD *)(a3 + 8);
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a3;
    v28 = *(unsigned int **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v11;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v27);
      }
      v11 = *(_QWORD *)(a3 + 8);
    }
  }
  do
    v12 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v12 + 1, (unsigned int *)v11));
  do
    v13 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v13 + 1, (unsigned int *)v11));
  v33 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v33, a1);
  result = (unsigned int *)v33;
  v33 = 0;
  if (result)
  {
    do
    {
      v18 = __ldaxr(result);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, result));
    if (!v19)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v14);
    }
  }
  if (v11)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v11);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v11));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v11);
      return (unsigned int *)WTF::fastFree((WTF *)v11, v14);
    }
  }
  return result;
}

WebCore::SVGImageCache **std::unique_ptr<WebCore::SVGImageCache>::operator=[abi:sn180100](WebCore::SVGImageCache **a1, WebCore::SVGImageCache **a2)
{
  WebCore::SVGImageCache *v3;
  WebCore::SVGImageCache *v4;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::SVGImageCache::~SVGImageCache(v4, a2);
    WTF::fastFree(v5, v6);
  }
  return a1;
}

unsigned int *WebCore::CachedImage::protectedImage@<X0>(WebCore::CachedImage *this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *result;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  WTF *v8;

  if ((*(_WORD *)((char *)this + 557) >> 5) - 3 > 1
    || (*((_BYTE *)this + 720) & 0x10) == 0)
  {
    result = (unsigned int *)*((_QWORD *)this + 86);
    if (!result)
      result = (unsigned int *)WebCore::Image::nullImage(0);
    goto LABEL_4;
  }
  WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v8);
  result = (unsigned int *)v8;
  if (v8)
  {
    v7 = (unsigned int *)*((_QWORD *)v8 + 1);
    v8 = 0;
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      WTF::fastFree((WTF *)result, v4);
    }
    result = v7;
    if (v7)
LABEL_4:
      ++result[2];
  }
  *a2 = result;
  return result;
}

uint64_t WebCore::CachedImage::didRemoveClient(WebCore::CachedImage *this, WebCore::CachedResourceClient *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int i;
  WebCore::CachedResourceClient **v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v38;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  WebCore::CachedResourceClient *v45;

  if ((*(unsigned int (**)(WebCore::CachedResourceClient *))(*(_QWORD *)a2 + 32))(a2) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195F47B04);
  }
  v5 = (uint64_t *)((char *)this + 656);
  v6 = *((_QWORD *)this + 82);
  if (v6)
  {
    v17 = *(_DWORD *)(v6 - 8);
    v18 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    for (i = 1; ; ++i)
    {
      v23 = *(WebCore::CachedResourceClient ***)(v6 + ((unint64_t)v21 << 6));
      if (!v23)
        break;
      v24 = v21;
      if (v23 != (WebCore::CachedResourceClient **)-1 && v23[1] == a2)
      {
        if (v21 != *(_DWORD *)(v6 - 4))
        {
          v25 = (_QWORD *)(v6 + ((unint64_t)v21 << 6));
          *v25 = 0;
          if (*(_DWORD *)v23 == 1)
            WTF::fastFree((WTF *)v23, v4);
          else
            --*(_DWORD *)v23;
          *v25 = -1;
          v26 = v6 + (v24 << 6);
          v27 = *(WTF::StringImpl **)(v26 + 24);
          *(_QWORD *)(v26 + 24) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v27 -= 2;
          }
          ++*(_DWORD *)(*v5 - 16);
          v28 = *v5;
          if (*v5)
            v29 = *(_DWORD *)(v28 - 12) - 1;
          else
            v29 = -1;
          *(_DWORD *)(v28 - 12) = v29;
          v30 = *v5;
          if (*v5)
          {
            v31 = 6 * *(_DWORD *)(v30 - 12);
            v32 = *(_DWORD *)(v30 - 4);
            if (v31 < v32 && v32 >= 9)
              WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::rehash((uint64_t *)this + 82, v32 >> 1, 0);
          }
        }
        break;
      }
      v21 = (v21 + i) & v17;
    }
  }
  if ((*(unsigned int (**)(WebCore::CachedResourceClient *))(*(_QWORD *)a2 + 32))(a2) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195F47B24);
  }
  v8 = (uint64_t *)((char *)this + 664);
  v9 = *((_DWORD *)this + 168) + 1;
  *((_DWORD *)this + 168) = v9;
  if (v9 > *((_DWORD *)this + 169))
  {
    v10 = *v8;
    if (!*v8)
    {
LABEL_6:
      v11 = 0;
      *((_DWORD *)this + 168) = 0;
LABEL_7:
      v12 = v11;
LABEL_8:
      *((_DWORD *)this + 169) = 2 * v12;
      goto LABEL_9;
    }
    v16 = *(unsigned int *)(v10 - 4);
    if (!(_DWORD)v16)
      goto LABEL_18;
    v34 = 0;
    v35 = v16 - 1;
    do
    {
      v36 = v10 + 8 * v35;
      if ((unint64_t)(*(_QWORD *)v36 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v36 + 8))
      {
        v41 = v8;
        v42 = v35;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket((WTF **)(v10 + 8 * v35), v7);
        v35 = v42;
        v8 = v41;
        ++v34;
      }
    }
    while ((unint64_t)v35--);
    v10 = *v8;
    if (v34)
    {
      *(_DWORD *)(v10 - 16) += v34;
      v43 = *v8;
      if (*v8)
        v44 = *(_DWORD *)(v43 - 12);
      else
        v44 = 0;
      *(_DWORD *)(v43 - 12) = v44 - v34;
      v10 = *v8;
    }
    if (!v10)
      goto LABEL_6;
    v38 = *(_DWORD *)(v10 - 4);
    if (v38 < 9 || 6 * *(_DWORD *)(v10 - 12) >= v38)
    {
LABEL_18:
      *((_DWORD *)this + 168) = 0;
    }
    else
    {
      v40 = v8;
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(v8);
      v8 = v40;
      v10 = *((_QWORD *)this + 83);
      *((_DWORD *)this + 168) = 0;
      if (!v10)
      {
        v11 = 0;
        goto LABEL_7;
      }
    }
    v11 = *(_DWORD *)(v10 - 12);
    v12 = 0x7FFFFFFF;
    if (v11 >= 0x7FFFFFFF)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_9:
  v13 = (WTF *)*((_QWORD *)a2 + 1);
  if (v13 && *((_QWORD *)v13 + 1))
    WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(v8, v13);
  v14 = *((_QWORD *)this + 87);
  if (v14)
  {
    if ((*(unsigned int (**)(WebCore::CachedResourceClient *))(*(_QWORD *)a2 + 32))(a2) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x195F47B6CLL);
    }
    v45 = a2;
    WTF::HashMap<WebCore::CachedImageClient const*,WTF::RefPtr<WebCore::SVGImageForContainer,WTF::RawPtrTraits<WebCore::SVGImageForContainer>,WTF::DefaultRefDerefTraits<WebCore::SVGImageForContainer>>,WTF::DefaultHash<WebCore::CachedImageClient const*>,WTF::HashTraits<WebCore::CachedImageClient const*>,WTF::HashTraits<WTF::RefPtr<WebCore::SVGImageForContainer,WTF::RawPtrTraits<WebCore::SVGImageForContainer>,WTF::DefaultRefDerefTraits<WebCore::SVGImageForContainer>>>,WTF::HashTableTraits>::remove((uint64_t *)(v14 + 8), &v45);
  }
  if ((*(unsigned int (**)(WebCore::CachedResourceClient *))(*(_QWORD *)a2 + 32))(a2) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195F47B44);
  }
  return (*(uint64_t (**)(WebCore::CachedResourceClient *, WebCore::CachedImage *))(*(_QWORD *)a2 + 80))(a2, this);
}

uint64_t WebCore::CachedImage::isClientWaitingForAsyncDecoding(WebCore::CachedImage *this, const WebCore::CachedImageClient *a2)
{
  return WTF::WeakHashSet<WebCore::CachedImageClient,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::CachedImageClient>((uint64_t *)this + 83, (uint64_t)a2);
}

WTF *WTF::WeakHashSet<WebCore::CachedImageClient,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedImageClient>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  WTF *v11;
  void *v12;
  WTF *result;
  uint64_t v14;
  void *v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  WTF **v19;
  unsigned int v21;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  WTF *v28;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v14 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v14)
      goto LABEL_11;
    v17 = 0;
    v18 = v14 - 1;
    do
    {
      v19 = (WTF **)(v8 + 8 * v18);
      if ((unint64_t)*v19 + 1 >= 2 && !*((_QWORD *)*v19 + 1))
      {
        v27 = v17;
        v26 = v18;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v19, a2);
        v18 = v26;
        v17 = v27 + 1;
      }
    }
    while ((unint64_t)v18--);
    v8 = *(_QWORD *)a1;
    if (v17)
    {
      v23 = v17;
      *(_DWORD *)(v8 - 16) += v17;
      v24 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v25 = *(_DWORD *)(v24 - 12);
      else
        v25 = 0;
      *(_DWORD *)(v24 - 12) = v25 - v23;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v21 = *(_DWORD *)(v8 - 4);
    if (v21 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v21)
    {
LABEL_11:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = (WTF *)a2[1];
  if (!v11)
  {
    v11 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *((_QWORD *)v11 + 1) = a2;
    v16 = (WTF *)a2[1];
    a2[1] = v11;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        WTF::fastFree(v16, v15);
        v11 = (WTF *)a2[1];
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
  }
  *(_DWORD *)v11 += 2;
  v28 = v11;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a1, &v28, a3);
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v12);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v11 == 1)
    return (WTF *)WTF::fastFree(v11, v12);
  --*(_DWORD *)v11;
  return result;
}

uint64_t WebCore::CachedImage::removeAllClientsWaitingForAsyncDecoding(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t **v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;

  v1 = *(_QWORD *)(this + 664);
  if (v1 && *(_DWORD *)(v1 - 12))
  {
    v2 = this;
    v3 = *(unsigned int *)(v1 - 4);
    if ((_DWORD)v3)
    {
      v4 = 8 * v3;
      for (i = *(uint64_t **)(this + 664); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v4 -= 8;
        if (!v4)
          return this;
      }
    }
    else
    {
      i = *(uint64_t **)(this + 664);
    }
    v6 = (uint64_t *)(v1 + 8 * v3);
    if (i != v6)
    {
      v7 = *i;
LABEL_11:
      if (!*(_QWORD *)(v7 + 8))
      {
        while (1)
        {
          if (++i == v6)
            return this;
          v7 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v6)
              goto LABEL_11;
            return this;
          }
        }
      }
      v8 = *(_DWORD **)(this + 688);
      if (!v8)
        return this;
      if ((*(_WORD *)(this + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(this + 720) & 0x10) != 0)
      {
        WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v27);
        this = (uint64_t)v27;
        if (!v27)
          return this;
        v8 = (_DWORD *)*((_QWORD *)v27 + 1);
        v27 = 0;
        do
        {
          v25 = __ldaxr((unsigned int *)this);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, (unsigned int *)this));
        if (v26)
        {
          if (!v8)
            return this;
        }
        else
        {
          atomic_store(1u, (unsigned int *)this);
          this = WTF::fastFree((WTF *)this, v24);
          if (!v8)
            return this;
        }
      }
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      if (!(_DWORD)this)
        return this;
      v9 = (uint64_t **)(v2 + 664);
      ++v8[2];
      (*(void (**)(_QWORD))(**((_QWORD **)v8 + 8) + 88))(*((_QWORD *)v8 + 8));
      v11 = *(_QWORD *)(v2 + 664);
      if (v11)
      {
        v13 = *(unsigned int *)(v11 - 4);
        v12 = (uint64_t *)(v11 + 8 * v13);
        if (*(_DWORD *)(v11 - 12))
        {
          if (!(_DWORD)v13)
          {
            v17 = 0;
            v14 = *v9;
            goto LABEL_31;
          }
          v15 = 8 * v13;
          v14 = *v9;
          while ((unint64_t)(*v14 + 1) <= 1)
          {
            ++v14;
            v15 -= 8;
            if (!v15)
            {
              v14 = v12;
              break;
            }
          }
LABEL_28:
          if (!v11)
          {
            v16 = 0;
LABEL_32:
            if (v16 != v14)
            {
              while (!*(_QWORD *)(*v14 + 8))
              {
                v18 = v14 + 1;
                v14 = v12;
                if (v18 != v12)
                {
                  v14 = v18;
                  while ((unint64_t)(*v14 + 1) <= 1)
                  {
                    if (++v14 == v12)
                    {
                      v14 = v12;
                      break;
                    }
                  }
                }
                if (v14 == v16)
                {
                  v14 = v16;
                  break;
                }
              }
            }
            if (v11)
              v19 = (uint64_t *)(v11 + 8 * *(unsigned int *)(v11 - 4));
            else
              v19 = 0;
            while (v14 != v19)
            {
              v21 = *v14;
              v20 = v14 + 1;
              (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v21 + 8) + 48))(*(_QWORD *)(v21 + 8), v2, 0);
              v22 = v12;
              if (v20 != v12)
              {
                v22 = v20;
                while ((unint64_t)(*v22 + 1) <= 1)
                {
                  if (++v22 == v12)
                  {
                    v22 = v12;
                    break;
                  }
                }
              }
              v14 = v16;
              if (v22 != v16)
              {
                v14 = v22;
                if (!*(_QWORD *)(*v22 + 8))
                {
                  while (1)
                  {
                    v23 = v14 + 1;
                    v14 = v12;
                    if (v23 != v12)
                    {
                      v14 = v23;
                      while ((unint64_t)(*v14 + 1) <= 1)
                      {
                        if (++v14 == v12)
                        {
                          v14 = v12;
                          break;
                        }
                      }
                    }
                    if (v14 == v16)
                      break;
                    if (*(_QWORD *)(*v14 + 8))
                      goto LABEL_60;
                  }
                  v14 = v16;
                }
              }
LABEL_60:
              ++*(_DWORD *)(v2 + 672);
            }
            this = WTF::WeakHashSet<WebCore::CachedImageClient,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(v2 + 664, v10);
            if (v8[2] == 1)
              return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
            --v8[2];
            return this;
          }
          v17 = *(unsigned int *)(v11 - 4);
LABEL_31:
          v16 = (uint64_t *)(v11 + 8 * v17);
          goto LABEL_32;
        }
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
      v14 = v12;
      v12 = (uint64_t *)(v11 + 8 * v13);
      goto LABEL_28;
    }
  }
  return this;
}

WTF *WebCore::CachedImage::image(WebCore::CachedImage *this)
{
  WTF *result;
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7[2];

  if ((*(_WORD *)((char *)this + 557) >> 5) - 3 <= 1
    && (*((_BYTE *)this + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v7);
    v3 = (unsigned int *)v7[0];
    if (!v7[0])
      return 0;
    v6 = *((_QWORD *)v7[0] + 1);
    v7[0] = 0;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
    return (WTF *)v6;
  }
  else
  {
    result = (WTF *)*((_QWORD *)this + 86);
    if (!result)
    {
      {
        return (WTF *)WebCore::Image::nullImage(void)::nullImage;
      }
      else
      {
        WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v7);
        result = v7[0];
        WebCore::Image::nullImage(void)::nullImage = (uint64_t)v7[0];
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::CachedImageClient,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  WTF **v6;
  WTF *v7;

  v2 = result;
  v3 = *(WTF ***)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    v5 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v5)
    {
      v6 = v3;
      do
      {
        v7 = *v6;
        if (*v6 != (WTF *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
              WTF::fastFree(v7, a2);
            else
              --*(_DWORD *)v7;
          }
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    result = WTF::fastFree((WTF *)(v3 - 2), a2);
    v4 = *(_QWORD *)v2;
    *(_DWORD *)(v2 + 8) = 0;
    if (v4)
    {
      LODWORD(v4) = *(_DWORD *)(v4 - 12);
      if (v4 > 0x7FFFFFFE)
        LODWORD(v4) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v4) = 0;
    *(_DWORD *)(result + 8) = 0;
  }
  *(_DWORD *)(v2 + 12) = 2 * v4;
  return result;
}

void WebCore::CachedImage::switchClientsToRevalidatedResource(WebCore::CachedImage *this, void *a2)
{
  _QWORD *v3;
  WTF **v4;
  WTF **v5;
  WTF **v6;
  WTF **v7;
  WTF **v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  int32x2_t *v12;
  int32x2_t *v13;
  int32x2_t *v14;
  int32x2_t *v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  unsigned int *v18[3];
  int32x2_t *v19;

  v3 = (_QWORD *)*((_QWORD *)this + 82);
  if (v3 && *((_DWORD *)v3 - 3))
  {
    v19 = 0;
    v4 = (WTF **)WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::begin(v3);
    v6 = (WTF **)&v3[8 * (unint64_t)*((unsigned int *)v3 - 1)];
    if (v6 != v4)
    {
      v7 = v4;
      v8 = v5;
      do
      {
        WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl> const&,WebCore::CachedImage::ContainerContext&>((uint64_t)v18, (uint64_t *)&v19, v7, (uint64_t)(v7 + 1));
        while (1)
        {
          v7 += 8;
          if (v7 == v8)
            break;
          if ((unint64_t)*v7 + 1 > 1)
            goto LABEL_11;
        }
        v7 = v8;
LABEL_11:
        ;
      }
      while (v7 != v6);
    }
    WebCore::CachedResource::switchClientsToRevalidatedResource((unsigned int ****)this, v5);
    v9 = *((_QWORD *)this + 61);
    if (v9)
      v10 = *(_QWORD *)(v9 + 8);
    else
      v10 = 0;
    if ((*(_BYTE *)(v10 + 556) & 0x1F) == 1)
    {
      WebCore::CachedResourceHandle<WebCore::CachedImage>::CachedResourceHandle((uint64_t *)v18, v10);
      v11 = v19;
      v12 = (int32x2_t *)WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::begin(v19);
      v14 = v12;
      v15 = v13;
      if (v11)
        v11 += 8 * (unint64_t)v11[-1].u32[1];
      if (v11 != v12)
      {
        do
        {
          if (v18[0])
            v16 = (uint64_t *)*((_QWORD *)v18[0] + 1);
          else
            v16 = 0;
          WebCore::CachedImage::setContainerContextForClient(v16, *(WTF ***)(*(_QWORD *)v14 + 8), v14 + 1, *(float *)v14[2].i32, (const WTF::URL *)&v14[3]);
          while (1)
          {
            v14 += 8;
            if (v14 == v15)
              break;
            if ((unint64_t)(*(_QWORD *)v14 + 1) > 1)
              goto LABEL_25;
          }
          v14 = v15;
LABEL_25:
          ;
        }
        while (v14 != v11);
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v18, v13);
      WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::~HashMap(&v19, v17);
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    WebCore::CachedResource::switchClientsToRevalidatedResource((unsigned int ****)this, a2);
  }
}

void WebCore::CachedResource::switchClientsToRevalidatedResource(unsigned int ****this, void *a2)
{
  WebCore::CachedResource *v2;
  _WORD *v3;
  unsigned int ***v4;
  uint64_t v5;
  unsigned int ***v6;
  unsigned int ***v7;
  uint64_t v8;
  unsigned int ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int ***v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  WTF *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::CachedResource *v36;
  WTF *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  _QWORD *v44;
  WTF **v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  _WORD *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  int i;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  WTF *v80;
  WTF *v81;
  void *v82;
  unsigned int *v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  void *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  _WORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int *v108;
  _BYTE v109[24];
  unsigned int **v110;

  v2 = (WebCore::CachedResource *)this;
  v3 = (_WORD *)((char *)this + 557);
  *(_WORD *)((char *)this + 557) |= 0x2000u;
  v4 = this[58];
  if (!v4)
  {
    v7 = 0;
    v5 = 0;
LABEL_148:
    v6 = &v4[v5];
    goto LABEL_8;
  }
  v5 = *((unsigned int *)v4 - 1);
  v6 = &v4[v5];
  if (!*((_DWORD *)v4 - 3))
  {
    v7 = &v4[v5];
    goto LABEL_148;
  }
  v7 = this[58];
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    v7 = this[58];
    while ((unint64_t)*v7 + 1 <= 1)
    {
      ++v7;
      v8 -= 8;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_8:
  if (v4)
    v9 = &v4[*((unsigned int *)v4 - 1)];
  else
    v9 = 0;
  if (v9 != v7)
  {
    do
    {
      v10 = *((_QWORD *)v2 + 61);
      if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          goto LABEL_217;
        v12 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v12 = 1;
        *(_QWORD *)(v12 + 8) = v11;
        v93 = *(unsigned int **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = v12;
        if (!v93)
          goto LABEL_217;
        do
        {
          v94 = __ldaxr(v93);
          v95 = v94 - 1;
        }
        while (__stlxr(v95, v93));
        if (!v95)
        {
          atomic_store(1u, v93);
          WTF::fastFree((WTF *)v93, a2);
        }
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
LABEL_217:
          do
            v84 = __ldaxr((unsigned int *)v12);
          while (__stlxr(v84 + 1, (unsigned int *)v12));
        }
      }
      else
      {
        v12 = 0;
      }
      v13 = **v7;
      **v7 = (unsigned int *)v12;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((WTF *)v13, a2);
        }
      }
      v16 = *((_QWORD *)v2 + 61);
      if (!v16)
        goto LABEL_20;
      v17 = *(_QWORD *)(v16 + 8);
      if (!v17)
        goto LABEL_20;
      v85 = *(_QWORD *)(v17 + 8);
      if (v85)
        goto LABEL_218;
      v85 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v85 = 1;
      *(_QWORD *)(v85 + 8) = v17;
      v96 = *(unsigned int **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = v85;
      if (!v96)
        goto LABEL_218;
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (!v98)
      {
        atomic_store(1u, v96);
        WTF::fastFree((WTF *)v96, a2);
      }
      v85 = *(_QWORD *)(v17 + 8);
      if (v85)
      {
LABEL_218:
        do
          v86 = __ldaxr((unsigned int *)v85);
        while (__stlxr(v86 + 1, (unsigned int *)v85));
        v108 = (unsigned int *)v85;
        v18 = *(unsigned int **)(v85 + 8);
        if (v18)
        {
          v110 = &v108;
          ++v18[137];
          v87 = *((_QWORD *)v18 + 61);
          if (v87)
          {
            if (*(_QWORD *)(v87 + 8))
            {
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)v18 + 58, (uint64_t *)&v110, (uint64_t)v109);
              v18 = v108;
              if (v108)
                v18 = (unsigned int *)*((_QWORD *)v108 + 1);
            }
          }
        }
      }
      else
      {
LABEL_20:
        v18 = 0;
        v108 = 0;
      }
      v110 = *v7;
      ++v18[137];
      v19 = *((_QWORD *)v18 + 61);
      if (v19 && *(_QWORD *)(v19 + 8))
        WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)v18 + 58, (uint64_t *)&v110, (uint64_t)v109);
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v108, a2);
      --*((_DWORD *)v2 + 137);
      v20 = v7 + 1;
      v7 = v6;
      if (v20 != v6)
      {
        v7 = v20;
        while ((unint64_t)*v7 + 1 <= 1)
        {
          if (++v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
      }
    }
    while (v7 != v9);
    v4 = (unsigned int ***)*((_QWORD *)v2 + 58);
  }
  if (v4)
  {
    *((_QWORD *)v2 + 58) = 0;
    WTF::fastFree((WTF *)(v4 - 2), a2);
  }
  v21 = *((_QWORD *)v2 + 45);
  if (!v21)
  {
    v23 = 0;
    v22 = 0;
    goto LABEL_145;
  }
  v22 = *(unsigned int *)(v21 - 4);
  v23 = (_DWORD *)(v21 + 16 * v22);
  if (!*(_DWORD *)(v21 - 12))
  {
LABEL_145:
    v25 = v23;
    v23 = (_DWORD *)(v21 + 16 * v22);
    goto LABEL_40;
  }
  if (!(_DWORD)v22)
  {
    v26 = 0;
    v25 = (_DWORD *)*((_QWORD *)v2 + 45);
    goto LABEL_42;
  }
  v24 = 16 * v22;
  v25 = (_DWORD *)*((_QWORD *)v2 + 45);
  while ((unint64_t)(*(_QWORD *)v25 + 1) <= 1)
  {
    v25 += 4;
    v24 -= 16;
    if (!v24)
    {
      v25 = v23;
      break;
    }
  }
LABEL_40:
  if (!v21)
  {
    v27 = 0;
    goto LABEL_43;
  }
  v26 = *(unsigned int *)(v21 - 4);
LABEL_42:
  v27 = (_DWORD *)(v21 + 16 * v26);
LABEL_43:
  if (v27 != v25)
  {
    while (!*(_QWORD *)(*(_QWORD *)v25 + 8))
    {
      v89 = v25 + 4;
      v25 = v23;
      if (v89 != v23)
      {
        v25 = v89;
        while ((unint64_t)(*(_QWORD *)v25 + 1) <= 1)
        {
          v25 += 4;
          if (v25 == v23)
          {
            v25 = v23;
            break;
          }
        }
      }
      if (v25 == v27)
      {
        v25 = v27;
        break;
      }
    }
  }
  if (v21)
    v28 = (_DWORD *)(v21 + 16 * *(unsigned int *)(v21 - 4));
  else
    v28 = 0;
  if (v25 == v28)
  {
    v55 = 0;
LABEL_137:
    *v3 &= ~0x2000u;
    goto LABEL_133;
  }
  v103 = v3;
  v104 = v27;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v105 = v28;
  do
  {
    v32 = v25[2];
    if (v32)
    {
      v34 = *(_QWORD *)(*(_QWORD *)v25 + 8);
      v106 = v34;
      do
      {
        v35 = v31;
        if (v31 == v30)
        {
          v36 = v2;
          v37 = v29;
          v38 = ((unint64_t)v30 >> 2) + v30;
          if (v38 >= 0x10)
            v39 = v38 + 1;
          else
            v39 = 16;
          v107 = v31;
          if (v39 <= (unint64_t)v31 + 1)
            v40 = v31 + 1;
          else
            v40 = v39;
          if (v40 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195F48DD8);
          }
          v41 = WTF::fastMalloc((WTF *)(8 * v40));
          v42 = (WTF *)v41;
          if (v30)
          {
            v43 = 8 * v31;
            v44 = (_QWORD *)v41;
            v45 = (WTF **)v37;
            do
            {
              v46 = *v45;
              *v45 = 0;
              *v44 = v46;
              v47 = *v45;
              *v45 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 1)
                  WTF::fastFree(v47, a2);
                else
                  --*(_DWORD *)v47;
              }
              ++v44;
              ++v45;
              v43 -= 8;
            }
            while (v43);
          }
          v30 = v40;
          if (v37)
          {
            if (v42 == v37)
              v30 = 0;
            else
              v30 = v40;
            if (v42 == v37)
              v29 = 0;
            else
              v29 = v42;
            WTF::fastFree(v37, a2);
          }
          else
          {
            v29 = v42;
          }
          v2 = v36;
          v28 = v105;
          v34 = v106;
          v48 = *(_QWORD *)(v106 + 8);
          v27 = v104;
          v35 = v107;
          if (!v48)
          {
            v48 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v48 = 1;
            *(_QWORD *)(v48 + 8) = v106;
            v81 = *(WTF **)(v106 + 8);
            *(_QWORD *)(v106 + 8) = v48;
            if (v81)
            {
              if (*(_DWORD *)v81 == 1)
              {
                WTF::fastFree(v81, a2);
                v48 = *(_QWORD *)(v106 + 8);
                v35 = v107;
                if (!v48)
                  goto LABEL_78;
                goto LABEL_77;
              }
              --*(_DWORD *)v81;
            }
            v35 = v107;
          }
        }
        else
        {
          v48 = *(_QWORD *)(v34 + 8);
          if (!v48)
          {
            v48 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v48 = 1;
            *(_QWORD *)(v48 + 8) = v34;
            v49 = *(WTF **)(v34 + 8);
            *(_QWORD *)(v34 + 8) = v48;
            if (v49)
            {
              if (*(_DWORD *)v49 == 1)
              {
                WTF::fastFree(v49, a2);
                v48 = *(_QWORD *)(v34 + 8);
                v35 = v31;
                if (!v48)
                  goto LABEL_78;
                goto LABEL_77;
              }
              --*(_DWORD *)v49;
            }
            v35 = v31;
          }
        }
LABEL_77:
        ++*(_DWORD *)v48;
LABEL_78:
        *((_QWORD *)v29 + v35) = v48;
        v31 = v35 + 1;
        --v32;
      }
      while (v32);
    }
    v33 = v23;
    if (v25 + 4 != v23)
    {
      v33 = v25 + 4;
      while ((unint64_t)(*(_QWORD *)v33 + 1) <= 1)
      {
        v33 += 4;
        if (v33 == v23)
        {
          v33 = v23;
          break;
        }
      }
    }
    v25 = v27;
    if (v33 != v27)
    {
      v25 = v33;
      if (!*(_QWORD *)(*(_QWORD *)v33 + 8))
      {
        while (1)
        {
          v88 = v25 + 4;
          v25 = v23;
          if (v88 != v23)
          {
            v25 = v88;
            while ((unint64_t)(*(_QWORD *)v25 + 1) <= 1)
            {
              v25 += 4;
              if (v25 == v23)
              {
                v25 = v23;
                break;
              }
            }
          }
          if (v25 == v27)
            break;
          v28 = v105;
          if (*(_QWORD *)(*(_QWORD *)v25 + 8))
            goto LABEL_57;
        }
        v25 = v27;
        v28 = v105;
      }
    }
LABEL_57:
    ++*((_DWORD *)v2 + 92);
  }
  while (v25 != v28);
  if (!v31)
  {
    v55 = v29;
    v3 = v103;
    goto LABEL_137;
  }
  v50 = 0;
  v51 = (WTF *)((char *)v29 + 8 * v31);
  v52 = 8 * v31;
  v53 = v103;
  do
  {
    v54 = *(_QWORD *)((char *)v29 + v50);
    if (v54)
    {
      a2 = *(void **)(v54 + 8);
      if (a2)
        WebCore::CachedResource::removeClient(v2, (unsigned int **)a2);
    }
    v50 += 8;
  }
  while (v52 != v50);
  v55 = v29;
  do
  {
    if (*(_QWORD *)v29 && *(_QWORD *)(*(_QWORD *)v29 + 8))
    {
      v56 = *((_QWORD *)v2 + 61);
      if (!v56)
        goto LABEL_103;
      v57 = *(_QWORD *)(v56 + 8);
      if (!v57)
        goto LABEL_103;
      v90 = *(_QWORD *)(v57 + 8);
      if (v90)
        goto LABEL_219;
      v90 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v90 = 1;
      *(_QWORD *)(v90 + 8) = v57;
      v100 = *(unsigned int **)(v57 + 8);
      *(_QWORD *)(v57 + 8) = v90;
      if (!v100)
        goto LABEL_219;
      do
      {
        v101 = __ldaxr(v100);
        v102 = v101 - 1;
      }
      while (__stlxr(v102, v100));
      if (!v102)
      {
        atomic_store(1u, v100);
        WTF::fastFree((WTF *)v100, v99);
      }
      v90 = *(_QWORD *)(v57 + 8);
      v53 = v103;
      if (v90)
      {
LABEL_219:
        do
          v91 = __ldaxr((unsigned int *)v90);
        while (__stlxr(v91 + 1, (unsigned int *)v90));
        v108 = (unsigned int *)v90;
        v58 = *(_QWORD *)(v90 + 8);
        if (v58)
        {
          v110 = &v108;
          ++*(_DWORD *)(v58 + 548);
          v92 = *(_QWORD *)(v58 + 488);
          if (v92)
          {
            if (*(_QWORD *)(v92 + 8))
            {
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v58 + 464), (uint64_t *)&v110, (uint64_t)v109);
              if (v108)
                v58 = *((_QWORD *)v108 + 1);
              else
                v58 = 0;
            }
          }
        }
        v53 = v103;
      }
      else
      {
LABEL_103:
        v58 = 0;
        v108 = 0;
      }
      WebCore::CachedResource::addClientToSet((WebCore::CachedResource *)v58, *(WebCore::CachedResourceClient **)(*(_QWORD *)v29 + 8));
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v108, v59);
    }
    v29 = (WTF *)((char *)v29 + 8);
  }
  while (v29 != v51);
  v60 = v55;
  do
  {
    if (*(_QWORD *)v60)
    {
      v61 = *(_QWORD *)(*(_QWORD *)v60 + 8);
      if (v61)
      {
        v62 = *(_QWORD *)(*((_QWORD *)v2 + 61) + 8);
        ++*(_DWORD *)(v62 + 368);
        v63 = *(_QWORD *)(v61 + 8);
        if (v63)
        {
          if (*(_QWORD *)(v63 + 8))
          {
            v64 = *(_QWORD *)(v62 + 360);
            if (v64)
            {
              v65 = *(_DWORD *)(v64 - 8);
              v66 = (~(v63 << 32) + v63) ^ ((unint64_t)(~(v63 << 32) + v63) >> 22);
              v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
              v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
              v69 = v65 & ((v68 >> 31) ^ v68);
              for (i = 1; ; ++i)
              {
                v71 = *(_QWORD *)(v64 + 16 * v69);
                if (v71 != -1)
                {
                  if (!v71)
                    goto LABEL_123;
                  if (v71 == v63)
                    break;
                }
                v69 = (v69 + i) & v65;
              }
              v72 = *(_QWORD *)(v62 + 8);
              if (!v72)
              {
                v72 = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v72 = 1;
                *(_QWORD *)(v72 + 8) = v62;
                v83 = *(unsigned int **)(v62 + 8);
                *(_QWORD *)(v62 + 8) = v72;
                if (v83)
                {
                  do
                  {
                    v77 = __ldaxr(v83);
                    v78 = v77 - 1;
                  }
                  while (__stlxr(v78, v83));
                  if (!v78)
                  {
                    atomic_store(1u, v83);
                    WTF::fastFree((WTF *)v83, v82);
                  }
                  v72 = *(_QWORD *)(v62 + 8);
                }
              }
              do
                v73 = __ldaxr((unsigned int *)v72);
              while (__stlxr(v73 + 1, (unsigned int *)v72));
              v108 = (unsigned int *)v72;
              v74 = *(_QWORD *)(v72 + 8);
              v110 = &v108;
              ++*(_DWORD *)(v74 + 548);
              v75 = *(_QWORD *)(v74 + 488);
              if (v75 && *(_QWORD *)(v75 + 8))
              {
                WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v74 + 464), (uint64_t *)&v110, (uint64_t)v109);
                v74 = *((_QWORD *)v108 + 1);
              }
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 88))(v74, *(_QWORD *)(*(_QWORD *)v60 + 8));
              WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v108, v76);
            }
          }
        }
      }
    }
LABEL_123:
    v60 = (WTF *)((char *)v60 + 8);
  }
  while (v60 != v51);
  v79 = 0;
  *v53 &= ~0x2000u;
  do
  {
    v80 = *(WTF **)((char *)v55 + v79);
    *(_QWORD *)((char *)v55 + v79) = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 1)
        WTF::fastFree(v80, a2);
      else
        --*(_DWORD *)v80;
    }
    v79 += 8;
  }
  while (v52 != v79);
LABEL_133:
  if (v55)
    WTF::fastFree(v55, a2);
}

uint64_t *WebCore::CachedResourceHandle<WebCore::CachedImage>::CachedResourceHandle(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    goto LABEL_16;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v10 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v3;
  if (!v10)
    goto LABEL_16;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
LABEL_16:
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
    *a1 = v3;
    v5 = *(_QWORD *)(v3 + 8);
  }
  else
  {
    v5 = 0;
    *a1 = 0;
  }
  v14 = a1;
  ++*(_DWORD *)(v5 + 548);
  v6 = *(_QWORD *)(v5 + 488);
  if (v6 && *(_QWORD *)(v6 + 8))
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v14, (uint64_t)&v13);
  return a1;
}

uint64_t WebCore::CachedImage::allClientsRemoved(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF **v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF **v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;

  v2 = this;
  v3 = *(WTF ***)(this + 656);
  if (v3)
  {
    *(_QWORD *)(this + 656) = 0;
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = v3;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF *)-1)
        {
          v7 = v5[3];
          v5[3] = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
            {
              WTF::StringImpl::destroy(v7, a2);
              v6 = *v5;
            }
            else
            {
              *(_DWORD *)v7 -= 2;
            }
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        v5 += 8;
        --v4;
      }
      while (v4);
    }
    this = WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  v8 = *(WTF ***)(v2 + 664);
  if (v8)
  {
    *(_QWORD *)(v2 + 664) = 0;
    v12 = *((unsigned int *)v8 - 1);
    if ((_DWORD)v12)
    {
      v13 = v8;
      do
      {
        v14 = *v13;
        if (*v13 != (WTF *)-1)
        {
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
              WTF::fastFree(v14, a2);
            else
              --*(_DWORD *)v14;
          }
        }
        ++v13;
        --v12;
      }
      while (v12);
    }
    this = WTF::fastFree((WTF *)(v8 - 2), a2);
    v9 = *(_QWORD *)(v2 + 664);
    *(_DWORD *)(v2 + 672) = 0;
    if (v9)
    {
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
      if (v9 > 0x7FFFFFFE)
        LODWORD(v9) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v9) = 0;
    *(_DWORD *)(v2 + 672) = 0;
  }
  *(_DWORD *)(v2 + 676) = 2 * v9;
  v10 = *(_DWORD **)(v2 + 688);
  if (v10)
  {
    v11 = v10[2];
    v10[2] = v11 + 1;
    if ((*(_WORD *)(v2 + 557) >> 5) - 3 >= 2)
    {
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 272))(v10);
      v11 = v10[2] - 1;
    }
    if (v11)
      v10[2] = v11;
    else
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t *WebCore::CachedImage::brokenImage@<X0>(float a1@<S0>, uint64_t a2@<X8>)
{
  char *v4;
  float v5;
  uint64_t *result;
  char *v7;

  if (a1 >= 3.0)
  {
    {
      v4 = (char *)WebCore::CachedImage::brokenImage(float)const::brokenImageVeryHiRes;
    }
    else
    {
      WebCore::ImageAdapter::loadPlatformResource((WebCore::ImageAdapter *)"missingImage@3x", (uint64_t **)&v7);
      v4 = v7;
      WebCore::CachedImage::brokenImage(float)const::brokenImageVeryHiRes = (uint64_t)v7;
    }
    v5 = 3.0;
  }
  else if (a1 >= 2.0)
  {
    {
      v4 = (char *)WebCore::CachedImage::brokenImage(float)const::brokenImageHiRes;
    }
    else
    {
      WebCore::ImageAdapter::loadPlatformResource((WebCore::ImageAdapter *)"missingImage@2x", (uint64_t **)&v7);
      v4 = v7;
      WebCore::CachedImage::brokenImage(float)const::brokenImageHiRes = (uint64_t)v7;
    }
    v5 = 2.0;
  }
  else
  {
    {
      v4 = (char *)WebCore::CachedImage::brokenImage(float)const::brokenImageLoRes;
    }
    else
    {
      WebCore::ImageAdapter::loadPlatformResource((WebCore::ImageAdapter *)"missingImage", (uint64_t **)&v7);
      v4 = v7;
      WebCore::CachedImage::brokenImage(float)const::brokenImageLoRes = (uint64_t)v7;
    }
    v5 = 1.0;
  }
  result = WTF::WeakPtr<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)a2, (uint64_t)v4);
  *(float *)(a2 + 8) = v5;
  return result;
}

float WebCore::CachedImage::imageSizeForRenderer(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v3;
  void *v7;
  double v8;
  int v9;
  float v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;

  v3 = *(_DWORD **)(a1 + 688);
  if (!v3)
    return 0.0;
  ++v3[2];
  if (a2 && (((*(_BYTE *)(a2 + 52) & 7) == 3) & *(_BYTE *)(a2 + 53)) == 1)
  {
    ++*(_DWORD *)(a2 + 16);
    if (WebCore::RenderImage::isMultiRepresentationHEIC((WebCore::RenderImage *)a2, (void *)a2))
    {
      WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(a2 + 112) + 32), v7);
      CTFontGetTypographicBoundsForEmojiImageProvider();
      v9 = *(_DWORD *)(a2 + 16);
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x195F49484);
      }
      v10 = v8;
      *(_DWORD *)(a2 + 16) = v9 - 1;
      goto LABEL_34;
    }
    v11 = *(_DWORD *)(a2 + 16);
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x195F494A4);
    }
    *(_DWORD *)(a2 + 16) = v11 - 1;
  }
  if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 56))(v3) & 1) != 0)
  {
    v12 = 1;
    if (a3)
    {
LABEL_21:
      if (!a2)
        goto LABEL_31;
      if ((*(_BYTE *)(a2 + 45) & 1) != 0)
        goto LABEL_30;
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      if (!v23)
        goto LABEL_30;
      v24 = *(_WORD *)(v23 + 28);
      if ((v24 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F494C4);
      }
      if ((v24 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v23 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
        && (v25 = *(_QWORD *)(*(_QWORD *)(v23 + 176) + 24)) != 0
        && (v26 = *(_QWORD *)(v25 + 8)) != 0
        && (*(char *)(v26 + 720) & 0x80000000) == 0)
      {
LABEL_31:
        v27 = 0;
      }
      else
      {
LABEL_30:
        v27 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 104) + 232) >> 15) & 1;
      }
      v28 = (*(float (**)(_DWORD *, unint64_t))(*(_QWORD *)v3 + 168))(v3, v27);
      goto LABEL_33;
    }
  }
  else
  {
    v12 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 64))(v3);
    if (a3)
      goto LABEL_21;
  }
  if (!v12)
    goto LABEL_21;
  v13 = *(_QWORD **)(a1 + 696);
  if (!a2)
    goto LABEL_19;
  v14 = v13[1];
  if (!v14)
    goto LABEL_19;
  v15 = *(_DWORD *)(v14 - 8);
  v16 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = *(_QWORD *)(v14 + 16 * v19);
  if (v20 != a2)
  {
    v21 = 1;
    while (v20)
    {
      v19 = ((_DWORD)v19 + v21) & v15;
      v20 = *(_QWORD *)(v14 + 16 * v19);
      ++v21;
      if (v20 == a2)
        goto LABEL_18;
    }
    goto LABEL_19;
  }
LABEL_18:
  v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
  if (!v22)
  {
LABEL_19:
    v10 = *(float *)(*(_QWORD *)(*v13 + 8) + 72);
    goto LABEL_34;
  }
  v28 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 168))(v22, 0);
LABEL_33:
  v10 = v28;
LABEL_34:
  if (v3[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  else
    --v3[2];
  return v10;
}

uint64_t WebCore::CachedImage::clear(WTF ***this, void *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  WTF **v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF **v10;
  WTF **v11;
  uint64_t v13;
  WTF **v14;
  WTF *v15;

  WebCore::CachedImage::destroyDecodedData((WebCore::CachedImage *)this, a2);
  WebCore::CachedImage::clearImage((unsigned int **)this, v3);
  v5 = this[82];
  if (v5)
  {
    this[82] = 0;
    v6 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v6)
    {
      v7 = v5;
      do
      {
        v8 = *v7;
        if (*v7 != (WTF *)-1)
        {
          v9 = v7[3];
          v7[3] = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
            {
              WTF::StringImpl::destroy(v9, v4);
              v8 = *v7;
            }
            else
            {
              *(_DWORD *)v9 -= 2;
            }
          }
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
              WTF::fastFree(v8, v4);
            else
              --*(_DWORD *)v8;
          }
        }
        v7 += 8;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 2), v4);
  }
  v10 = this[83];
  if (v10)
  {
    this[83] = 0;
    v13 = *((unsigned int *)v10 - 1);
    if ((_DWORD)v13)
    {
      v14 = v10;
      do
      {
        v15 = *v14;
        if (*v14 != (WTF *)-1)
        {
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
              WTF::fastFree(v15, v4);
            else
              --*(_DWORD *)v15;
          }
        }
        ++v14;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v10 - 2), v4);
    v11 = this[83];
    *((_DWORD *)this + 168) = 0;
    if (v11)
    {
      LODWORD(v11) = *((_DWORD *)v11 - 3);
      if (v11 > 0x7FFFFFFE)
        LODWORD(v11) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v11) = 0;
    *((_DWORD *)this + 168) = 0;
  }
  *((_DWORD *)this + 169) = 2 * (_DWORD)v11;
  return WebCore::CachedResource::setEncodedSize((WebCore::CachedResource *)this, 0);
}

uint64_t WebCore::CachedImage::destroyDecodedData(WebCore::CachedImage *this, void *a2)
{
  uint64_t result;
  _DWORD *v4;
  int v5;
  _DWORD *v6;

  result = *((_QWORD *)this + 86);
  if (result
    && (*(_DWORD *)(result + 8) != 1
     || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result), !(_DWORD)result))
    || (*(_WORD *)((_BYTE *)this + 557) & 0x400) != 0
    || (result = WebCore::CachedResource::hasClients(this, a2), (result & 1) != 0))
  {
    v4 = (_DWORD *)*((_QWORD *)this + 86);
    if (v4)
    {
      v5 = v4[2];
      v4[2] = v5 + 1;
      if ((*(_WORD *)((char *)this + 557) >> 5) - 3 >= 2)
      {
        result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v4 + 240))(v4, 1);
        v5 = v4[2] - 1;
      }
      if (v5)
        v4[2] = v5;
      else
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  else
  {
    v6 = (_DWORD *)*((_QWORD *)this + 86);
    *((_QWORD *)this + 86) = 0;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
    return WebCore::CachedResource::setDecodedSize(this, 0);
  }
  return result;
}

void WebCore::CachedImage::CachedImageObserver::encodedDataStatusChanged(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  _BYTE v24[24];
  unsigned int **v25;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = v4 + 8 * v6;
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = v4 + 8 * v6;
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v19 = 0;
    v7 = *(_QWORD *)(a1 + 24);
    goto LABEL_42;
  }
  v18 = 8 * v6;
  v7 = *(_QWORD *)(a1 + 24);
  while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
  {
    v7 += 8;
    v18 -= 8;
    if (!v18)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (!v4)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v19 = *(unsigned int *)(v4 - 4);
LABEL_42:
  v8 = v4 + 8 * v19;
LABEL_6:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      v22 = v7 + 8;
      v7 = v5;
      if (v22 != v5)
      {
        v7 = v22;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 8;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v9 = v4 + 8 * *(unsigned int *)(v4 - 4);
  else
    v9 = 0;
  for (; v7 != v9; ++*(_DWORD *)(a1 + 32))
  {
    v10 = *(_QWORD *)(*(_QWORD *)v7 + 8);
    v11 = *(unsigned int **)(v10 + 8);
    if (v11)
      goto LABEL_65;
    v11 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v11 = 1;
    *((_QWORD *)v11 + 1) = v10;
    v20 = *(unsigned int **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v11;
    if (!v20)
      goto LABEL_65;
    do
    {
      v16 = __ldaxr(v20);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v20));
    if (!v17)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
    v11 = *(unsigned int **)(v10 + 8);
    if (v11)
    {
LABEL_65:
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v23 = v11;
      v13 = *((_QWORD *)v11 + 1);
    }
    else
    {
      v13 = 0;
      v23 = 0;
    }
    v25 = &v23;
    ++*(_DWORD *)(v13 + 548);
    v14 = *(_QWORD *)(v13 + 488);
    if (v14 && *(_QWORD *)(v14 + 8))
    {
      WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v13 + 464), (uint64_t *)&v25, (uint64_t)v24);
      v11 = v23;
    }
    if (v11)
      v11 = (unsigned int *)*((_QWORD *)v11 + 1);
    if (*((void **)v11 + 86) == a2)
      WebCore::CachedImage::notifyObservers((WebCore::CachedImage *)v11, 0);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v23, a2);
    v15 = v5;
    if (v7 + 8 != v5)
    {
      v15 = v7 + 8;
      while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
      {
        v15 += 8;
        if (v15 == v5)
        {
          v15 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v15 != v8)
    {
      v7 = v15;
      if (!*(_QWORD *)(*(_QWORD *)v15 + 8))
      {
        while (1)
        {
          v21 = v7 + 8;
          v7 = v5;
          if (v21 != v5)
          {
            v7 = v21;
            while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
            {
              v7 += 8;
              if (v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*(_QWORD *)v7 + 8))
            goto LABEL_27;
        }
        v7 = v8;
      }
    }
LABEL_27:
    ;
  }
}

uint64_t **WTF::WeakHashSet<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v4 = *(unsigned int *)(v2 - 4);
    v3 = (uint64_t *)(v2 + 8 * v4);
    *result = a2;
    result[1] = v3;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *result = a2;
    result[1] = 0;
  }
  result[2] = v3;
  result[3] = v3;
  result[4] = (uint64_t *)(v2 + 8 * v4);
  return result;
}

uint64_t WebCore::CachedImage::CachedImageObserver::canDestroyDecodedData(WebCore::CachedImage::CachedImageObserver *this, const WebCore::Image *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  WebCore::CachedImage *v6;
  void *v7;
  const WebCore::Image **v8;
  unsigned int *v10;
  uint64_t *v11[5];
  uint64_t *v12;
  uint64_t *v13;

  v3 = (uint64_t *)((char *)this + 24);
  WTF::WeakHashSet<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v12, (uint64_t *)this + 3);
  WTF::WeakHashSet<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v11, v3);
  v4 = v13;
  v5 = v11[1];
  while (v4 != v5)
  {
    WebCore::CachedResourceHandle<WebCore::CachedImage>::CachedResourceHandle((uint64_t *)&v10, *(_QWORD *)(*v4 + 8));
    if (v10)
      v6 = (WebCore::CachedImage *)*((_QWORD *)v10 + 1);
    else
      v6 = 0;
    if (WebCore::CachedImage::image(v6) == a2)
    {
      v8 = v10 ? (const WebCore::Image **)*((_QWORD *)v10 + 1) : 0;
      if (!WebCore::CachedImage::canDestroyDecodedData(v8, a2))
      {
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v10, v7);
        return 0;
      }
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v10, v7);
    WTF::WeakHashSet<WebCore::DocumentTimeline,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
    v4 = v13;
  }
  return 1;
}

BOOL WebCore::CachedImage::canDestroyDecodedData(const WebCore::Image **this, const WebCore::Image *a2)
{
  unsigned int *v2;
  void *v3;
  _BOOL8 v4;
  uint64_t v6[3];

  if (this[86] != a2)
    return 0;
  WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::CachedResourceClientWalker(v6, (uint64_t)this);
  do
  {
    v2 = WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::next(v6);
    v4 = v2 == 0;
  }
  while (v2 && ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 56))(v2) & 1) != 0);
  WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::~CachedResourceClientWalker((WebCore::CachedResourceHandleBase *)v6, v3);
  return v4;
}

void WebCore::CachedImage::CachedImageObserver::changedInRect(WebCore::CachedImage::CachedImageObserver *this, const WebCore::Image *a2, const WebCore::IntRect *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  _BYTE v26[24];
  unsigned int **v27;

  v6 = *((_QWORD *)this + 3);
  if (!v6)
  {
    v7 = 0;
    v8 = 0;
LABEL_3:
    v9 = v7;
    v7 = v6 + 8 * v8;
    goto LABEL_4;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v7 = v6 + 8 * v8;
  if (!*(_DWORD *)(v6 - 12))
    goto LABEL_3;
  if (!(_DWORD)v8)
  {
    v12 = 0;
    v9 = *((_QWORD *)this + 3);
    goto LABEL_16;
  }
  v11 = 8 * v8;
  v9 = *((_QWORD *)this + 3);
  while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
  {
    v9 += 8;
    v11 -= 8;
    if (!v11)
    {
      v9 = v7;
      break;
    }
  }
LABEL_4:
  if (!v6)
  {
    v10 = 0;
    goto LABEL_6;
  }
  v12 = *(unsigned int *)(v6 - 4);
LABEL_16:
  v10 = v6 + 8 * v12;
LABEL_6:
  if (v10 != v9)
  {
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v13 = v9 + 8;
      v9 = v7;
      if (v13 != v7)
      {
        v9 = v13;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
      {
        v9 = v10;
        if (!v6)
          goto LABEL_25;
        goto LABEL_64;
      }
    }
  }
  if (v6)
LABEL_64:
    v14 = v6 + 8 * *(unsigned int *)(v6 - 4);
  else
LABEL_25:
    v14 = 0;
  if (v9 != v14)
  {
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)v9 + 8);
      v16 = *(unsigned int **)(v15 + 8);
      if (v16)
        goto LABEL_67;
      v16 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v16 = 1;
      *((_QWORD *)v16 + 1) = v15;
      v21 = *(unsigned int **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = v16;
      if (!v21)
        goto LABEL_67;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, a2);
      }
      v16 = *(unsigned int **)(v15 + 8);
      if (v16)
      {
LABEL_67:
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
        v25 = v16;
        v18 = *((_QWORD *)v16 + 1);
      }
      else
      {
        v18 = 0;
        v25 = 0;
      }
      v27 = &v25;
      ++*(_DWORD *)(v18 + 548);
      v19 = *(_QWORD *)(v18 + 488);
      if (v19)
      {
        if (*(_QWORD *)(v19 + 8))
          break;
      }
      if (v16)
        goto LABEL_33;
LABEL_34:
      if (*((const WebCore::Image **)v16 + 86) == a2)
        WebCore::CachedImage::notifyObservers((WebCore::CachedImage *)v16, a3);
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v25, a2);
      v20 = v7;
      if (v9 + 8 != v7)
      {
        v20 = v9 + 8;
        while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
        {
          v20 += 8;
          if (v20 == v7)
          {
            v20 = v7;
            break;
          }
        }
      }
      v9 = v10;
      if (v20 != v10)
      {
        v9 = v20;
        if (!*(_QWORD *)(*(_QWORD *)v20 + 8))
        {
          while (1)
          {
            v24 = v9 + 8;
            v9 = v7;
            if (v24 != v7)
            {
              v9 = v24;
              while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
              {
                v9 += 8;
                if (v9 == v7)
                {
                  v9 = v7;
                  break;
                }
              }
            }
            if (v9 == v10)
              break;
            if (*(_QWORD *)(*(_QWORD *)v9 + 8))
              goto LABEL_43;
          }
          v9 = v10;
        }
      }
LABEL_43:
      ++*((_DWORD *)this + 8);
      if (v9 == v14)
        return;
    }
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v18 + 464), (uint64_t *)&v27, (uint64_t)v26);
    v16 = v25;
    if (!v25)
      goto LABEL_34;
LABEL_33:
    v16 = (unsigned int *)*((_QWORD *)v16 + 1);
    goto LABEL_34;
  }
}

void WebCore::CachedImage::CachedImageObserver::scheduleRenderingUpdate(WebCore::CachedImage::CachedImageObserver *this, const WebCore::Image *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  WTF **v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int **v32;
  unsigned int *v33;
  WTF *v34;

  v4 = *((_QWORD *)this + 3);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = v4 + 8 * v6;
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = v4 + 8 * v6;
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v27 = 0;
    v7 = *((_QWORD *)this + 3);
    goto LABEL_54;
  }
  v26 = 8 * v6;
  v7 = *((_QWORD *)this + 3);
  while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
  {
    v7 += 8;
    v26 -= 8;
    if (!v26)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (!v4)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v27 = *(unsigned int *)(v4 - 4);
LABEL_54:
  v8 = v4 + 8 * v27;
LABEL_6:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      v30 = v7 + 8;
      v7 = v5;
      if (v30 != v5)
      {
        v7 = v30;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 8;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v9 = v4 + 8 * *(unsigned int *)(v4 - 4);
  else
    v9 = 0;
  for (; v7 != v9; ++*((_DWORD *)this + 8))
  {
    v10 = *(_QWORD *)(*(_QWORD *)v7 + 8);
    v11 = *(unsigned int **)(v10 + 8);
    if (v11)
      goto LABEL_78;
    v11 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v11 = 1;
    *((_QWORD *)v11 + 1) = v10;
    v28 = *(unsigned int **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v11;
    if (!v28)
      goto LABEL_78;
    do
    {
      v24 = __ldaxr(v28);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v28));
    if (!v25)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, a2);
    }
    v11 = *(unsigned int **)(v10 + 8);
    if (v11)
    {
LABEL_78:
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v31 = v11;
      v13 = *((_QWORD *)v11 + 1);
    }
    else
    {
      v13 = 0;
      v31 = 0;
    }
    v32 = &v31;
    ++*(_DWORD *)(v13 + 548);
    v14 = *(_QWORD *)(v13 + 488);
    if (v14 && *(_QWORD *)(v14 + 8))
    {
      WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v13 + 464), (uint64_t *)&v32, (uint64_t)&v33);
      v11 = v31;
    }
    if (v11)
      v15 = *((_QWORD *)v11 + 1);
    else
      v15 = 0;
    if (*(const WebCore::Image **)(v15 + 688) == a2)
    {
      WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::CachedResourceClientWalker((uint64_t *)&v33, v15);
      while (1)
      {
        v16 = WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::next(&v33);
        if (!v16)
          break;
        (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v16 + 88))(v16, v15);
      }
      v18 = v34;
      v34 = 0;
      if (v18)
      {
        v20 = (WTF **)((char *)v18 + 8);
        v19 = *(unsigned int *)v18;
        if ((_DWORD)v19)
        {
          v21 = 8 * v19;
          do
          {
            v22 = *v20;
            *v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 1)
                WTF::fastFree(v22, v17);
              else
                --*(_DWORD *)v22;
            }
            ++v20;
            v21 -= 8;
          }
          while (v21);
        }
        WTF::fastFree(v18, v17);
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v33, v17);
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v31, a2);
    v23 = v5;
    if (v7 + 8 != v5)
    {
      v23 = v7 + 8;
      while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
      {
        v23 += 8;
        if (v23 == v5)
        {
          v23 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v23 != v8)
    {
      v7 = v23;
      if (!*(_QWORD *)(*(_QWORD *)v23 + 8))
      {
        while (1)
        {
          v29 = v7 + 8;
          v7 = v5;
          if (v29 != v5)
          {
            v7 = v29;
            while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
            {
              v7 += 8;
              if (v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*(_QWORD *)v7 + 8))
            goto LABEL_38;
        }
        v7 = v8;
      }
    }
LABEL_38:
    ;
  }
}

void WebCore::CachedImage::error(WebCore::CachedImage *this, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *((_QWORD *)this + 48);
  if (v4 && !*(_BYTE *)(v4 + 752))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 280) + 16);
    if ((*((_BYTE *)this + 344) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedImage *)((char *)this + 160));
      *((_BYTE *)this + 344) |= 1u;
    }
    if ((*(unsigned int (**)(uint64_t, char *))(*(_QWORD *)v5 + 992))(v5, (char *)this + 160))
      v6 = 16;
    else
      v6 = 0;
    *((_BYTE *)this + 720) = *((_BYTE *)this + 720) & 0xEF | v6;
  }
  WebCore::CachedImage::clear((WTF ***)this, a2);
  WebCore::CachedResource::error((uint64_t)this, a2);
  WebCore::CachedImage::notifyObservers(this, 0);
}

uint64_t WebCore::CachedResource::finishLoading(WebCore::CachedResource *this, const WebCore::FragmentedSharedBuffer *a2, const WebCore::NetworkLoadMetrics *a3)
{
  void *v5;
  WTF *v6;
  _BYTE v8[8];
  WTF *v9;
  int v10;
  char v11;

  v8[0] = 0;
  v11 = 0;
  std::array<std::optional<WebCore::ResourceCryptographicDigest>,3ul>::fill[abi:sn180100]((uint64_t)this + 560, (uint64_t)v8);
  if (v11)
  {
    v6 = v9;
    if (v9)
    {
      v9 = 0;
      v10 = 0;
      WTF::fastFree(v6, v5);
    }
  }
  *(_WORD *)((char *)this + 557) &= ~0x400u;
  return (*(uint64_t (**)(WebCore::CachedResource *, const WebCore::NetworkLoadMetrics *, _QWORD))(*(_QWORD *)this + 200))(this, a3, 0);
}

uint64_t WebCore::CachedImage::didReplaceSharedBufferContents(uint64_t this)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(this + 688);
  if (v1)
  {
    ++v1[2];
    this = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v1 + 240))(v1, 1);
    if (v1[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  return this;
}

WTF::StringImpl *WebCore::CachedResource::error(uint64_t a1, void *a2)
{
  _WORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31[2];
  int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;

  v3 = (_WORD *)(a1 + 557);
  *(_WORD *)(a1 + 557) = *(_WORD *)(a1 + 557) & 0xFF1F | (32 * (a2 & 7));
  v4 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v12 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(v4 + 8);
        v14 = v13 + 16 * v12;
        do
        {
          v15 = *(unsigned int **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v15)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              v21 = v13;
              v22 = v14;
              v23 = (WTF *)v15;
              v25 = v4;
              atomic_store(1u, v15);
              v20 = v15[6];
              if ((_DWORD)v20 != -1)
                ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v20])(v26, v15 + 2);
              *((_DWORD *)v23 + 6) = -1;
              WTF::fastFree(v23, a2);
              v4 = v25;
              v13 = v21;
              v14 = v22;
            }
          }
          v13 += 16;
        }
        while (v13 != v14);
      }
      v18 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v18 && v18 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v24 = v4;
        WTF::fastFree(v18, a2);
        v4 = v24;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  LOBYTE(v26[0]) = 0;
  BYTE8(v27) = 0;
  std::array<std::optional<WebCore::ResourceCryptographicDigest>,3ul>::fill[abi:sn180100](a1 + 560, (uint64_t)v26);
  if (BYTE8(v27))
  {
    v8 = v26[1];
    if (v26[1])
    {
      v26[1] = 0;
      LODWORD(v27) = 0;
      WTF::fastFree(v8, v7);
    }
  }
  *v3 &= ~0x400u;
  v32 = 0;
  v30 = 0u;
  *(_OWORD *)v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  *(_OWORD *)v26 = 0u;
  v27 = 0u;
  v33 = -1;
  v34 = -1;
  v35 = 0;
  (*(void (**)(uint64_t, WTF **, _QWORD))(*(_QWORD *)a1 + 200))(a1, v26, 0);
  v10 = v35;
  v35 = 0;
  if (v10)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v10, v9);
  result = v31[1];
  v31[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CachedResource::hasClients(WebCore::CachedResource *this, void *a2)
{
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  _QWORD v7[6];
  _BYTE v8[8];
  uint64_t v9;

  if (!WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences((uint64_t)this + 360, a2))return 1;
  v4 = *((_QWORD *)this + 56);
  if (!v4 || !*(_DWORD *)(v4 - 12))
    return 0;
  v5 = (uint64_t *)((char *)this + 448);
  WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::begin(v5, (uint64_t)v8);
  WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::end(v5, (uint64_t)v7);
  if (v9 == v7[1])
  {
    WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::clear((uint64_t)v5, v6);
    return 0;
  }
  return 1;
}

uint64_t WebCore::CachedResource::didAccessDecodedData(uint64_t result, double a2)
{
  WebCore::CachedResource *v2;

  *(double *)(result + 408) = a2;
  if ((*(_BYTE *)(result + 131) & 4) == 0)
  {
    v2 = (WebCore::CachedResource *)result;
    if ((*(_WORD *)(result + 557) & 0x200) != 0)
    {
      if ((WTF::isMainThread((WTF *)result) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F4A69CLL);
      }
      {
        WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
      }
      WebCore::MemoryCache::moveToEndOfLiveDecodedResourcesListIfPresent((WTF **)&WebCore::MemoryCache::singleton(void)::memoryCache, v2);
      return WebCore::MemoryCache::pruneSoon((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
    }
  }
  return result;
}

uint64_t WebCore::CachedImage::makeRevalidationDecision(WebCore::CachedResource *a1, int a2)
{
  if ((*((_BYTE *)a1 + 720) & 8) != 0)
    return 0;
  else
    return WebCore::CachedResource::makeRevalidationDecision(a1, a2);
}

uint64_t WebCore::CachedResource::makeRevalidationDecision(WebCore::CachedResource *this, int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  const WebCore::HTTPHeaderMap *v8;
  const WebCore::HTTPHeaderMap *v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  char v13;
  _BYTE *v14;
  _BYTE v15[25];

  if (!a2)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 50);
    if (!v3)
    {
      v6 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v6 != -1)
      {
        *(_QWORD *)v15 = &v13;
        v14 = v15;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v3 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    if ((v3[29] & 1) == 0)
    {
      WebCore::ResourceResponse::platformLazyInit((uint64_t)v3, 1);
      WebCore::parseCacheControlDirectives((unsigned int *)v3 + 20, v9, (int64x2_t *)v15);
      *(_OWORD *)(v3 + 25) = *(_OWORD *)v15;
      *(_OWORD *)((char *)v3 + 209) = *(_OWORD *)&v15[9];
      *((_WORD *)v3 + 116) |= 1u;
    }
    if ((v3[28] & 1) != 0)
      return 3;
    v4 = (uint64_t *)*((_QWORD *)this + 50);
    if (!v4)
    {
      v7 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v7 != -1)
      {
        *(_QWORD *)v15 = &v13;
        v14 = v15;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v4 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    if ((v4[29] & 1) == 0)
    {
      WebCore::ResourceResponse::platformLazyInit((uint64_t)v4, 1);
      WebCore::parseCacheControlDirectives((unsigned int *)v4 + 20, v8, (int64x2_t *)v15);
      *(_OWORD *)(v4 + 25) = *(_OWORD *)v15;
      *(_OWORD *)((char *)v4 + 209) = *(_OWORD *)&v15[9];
      *((_WORD *)v4 + 116) |= 1u;
    }
    if ((v4[28] & 2) != 0)
      return 2;
LABEL_10:
    if (WebCore::CachedResource::isExpired(this))
      return 4;
    else
      return 0;
  }
  if (a2 != 1)
    return a2 == 2;
  v10 = WebCore::CachedResource::response(this);
  if (!WebCore::ResourceResponseBase::cacheControlContainsImmutable((WebCore::ResourceResponseBase *)v10))
    return 1;
  v11 = WebCore::CachedResource::response(this);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v11, 1);
  v12 = WTF::URL::protocolIs();
  result = 1;
  if (v12)
    goto LABEL_10;
  return result;
}

uint64_t WebCore::CachedRawResource::clear(WebCore::CachedRawResource *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v9 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v3 + 8);
        v11 = v10 + 16 * v9;
        do
        {
          v12 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              v18 = v11;
              v19 = v10;
              v20 = (WTF *)v12;
              v21 = v3;
              atomic_store(1u, v12);
              v15 = v12[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v15])(&v23, v12 + 2);
              *((_DWORD *)v20 + 6) = -1;
              WTF::fastFree(v20, a2);
              v3 = v21;
              v11 = v18;
              v10 = v19;
            }
          }
          v10 += 16;
        }
        while (v10 != v11);
      }
      v16 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v16 && v16 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v22 = v3;
        WTF::fastFree(v16, a2);
        v3 = v22;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  result = WebCore::CachedResource::setEncodedSize(this, 0);
  v7 = (_DWORD *)*((_QWORD *)this + 48);
  if (v7)
  {
    v8 = v7[4];
    v7[4] = v8 + 1;
    if (*((_QWORD *)v7 + 92))
    {
      result = (uint64_t)WebCore::SharedBufferBuilder::empty((WebCore::SharedBufferBuilder *)(v7 + 184));
      v8 = v7[4] - 1;
    }
    if (v8)
      v7[4] = v8;
    else
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

uint64_t *WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v6;
  WTF *v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = a2;
    v7 = *(WTF **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v3;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WTF::fastFree(v7, v6);
        v3 = *(_QWORD *)(a2 + 8);
        if (!v3)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  ++*(_DWORD *)v3;
LABEL_3:
  *a1 = v3;
  return a1;
}

WTF::StringImpl *WebCore::CachedRawResource::allClientsRemoved(WTF::StringImpl *this)
{
  WebCore::ResourceLoader *v1;
  int v2;

  v1 = (WebCore::ResourceLoader *)*((_QWORD *)this + 48);
  if (v1)
  {
    v2 = *((_DWORD *)v1 + 4);
    *((_DWORD *)v1 + 4) = v2 + 1;
    if (*((_DWORD *)v1 + 334) == 1)
    {
      this = WebCore::ResourceLoader::cancel(v1);
      v2 = *((_DWORD *)v1 + 4) - 1;
    }
    if (v2)
      *((_DWORD *)v1 + 4) = v2;
    else
      return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)v1 + 8))(v1);
  }
  return this;
}

void WebCore::CachedRawResource::redirectReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSObject *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  WebCore::HTTPHeaderMap *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  const void *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  WebCore::HTTPHeaderMap *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  CFTypeRef v37;
  uint64_t v38;
  CFTypeRef v39;
  CFTypeRef v40;
  void *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  CFTypeRef v62;
  WTF::StringImpl *v63;
  CFTypeRef v64;
  void *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WebCore::ResourceResponseBase *v68;
  const void *v69;
  WTF *v70;
  void *v71;
  void *v72;
  WTF *v73;
  uint64_t v74;
  WTF **v75;
  uint64_t v76;
  WTF *v77;
  void *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  void *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  WebCore::ResourceResponseBase *v86;
  unsigned int *v87;
  unsigned int *v88;
  WTF *v89;
  uint64_t v90[3];
  _QWORD *v91;
  __int128 buf;
  uint64_t v93;
  _BYTE v94[128];
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  uint64_t v98;
  char v99;
  CFTypeRef cf;
  _BYTE v101[64];
  CFTypeRef v102;
  char v103;
  CFTypeRef v104;
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_1940B8000, v8, OS_LOG_TYPE_DEFAULT, "%p - CachedRawResource::redirectReceived:", (uint8_t *)&buf, 0xCu);
  }
  if ((*(_BYTE *)(a3 + 138) & 1) != 0)
  {
    WebCore::CachedResource::redirectReceived(a1, a2, (WebCore::ResourceResponseBase *)a3, a4);
  }
  else
  {
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&buf, (const WebCore::ResourceRequestBase::RequestData *)a2);
    v9 = *(_DWORD **)(a2 + 152);
    if (v9)
      *v9 += 2;
    v95 = v9;
    v10 = *(_DWORD **)(a2 + 160);
    if (v10)
      *v10 += 2;
    v96 = v10;
    v11 = *(_DWORD **)(a2 + 168);
    if (v11)
      ++*v11;
    v12 = *(_QWORD *)(a2 + 176);
    v97 = v11;
    v98 = v12;
    v99 = *(_BYTE *)(a2 + 184);
    v13 = *(const void **)(a2 + 192);
    cf = v13;
    if (v13)
      CFRetain(v13);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v101, (const WebCore::ResourceResponseBase *)a3);
    v14 = *(const void **)(a3 + 240);
    v104 = v14;
    if (v14)
      CFRetain(v14);
    v15 = (uint64_t *)(a1 + 664);
    v105 = *(_BYTE *)(a3 + 248);
    v16 = *(unsigned int *)(a1 + 676);
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 672))
    {
      v17 = WTF::Vector<WebCore::CachedRawResource::RedirectPair,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&buf);
      v18 = *(_DWORD *)(a1 + 676);
      v19 = *(_QWORD *)(a1 + 664);
      v20 = WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(v19 + 456 * v18), (const WebCore::ResourceRequestBase::RequestData *)v17);
      v21 = (_DWORD *)*((_QWORD *)v17 + 19);
      if (v21)
        *v21 += 2;
      *((_QWORD *)v20 + 19) = v21;
      v22 = (_DWORD *)*((_QWORD *)v17 + 20);
      if (v22)
        *v22 += 2;
      *((_QWORD *)v20 + 20) = v22;
      v23 = (_DWORD *)*((_QWORD *)v17 + 21);
      if (v23)
        ++*v23;
      *((_QWORD *)v20 + 21) = v23;
      v24 = *((_QWORD *)v17 + 22);
      *((_BYTE *)v20 + 184) = v17[184];
      *((_QWORD *)v20 + 22) = v24;
      v25 = (const void *)*((_QWORD *)v17 + 24);
      *((_QWORD *)v20 + 24) = v25;
      if (v25)
        CFRetain(v25);
      v26 = v19 + 456 * v18;
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v26 + 200), (const WebCore::ResourceResponseBase *)(v17 + 200));
      v28 = (const void *)*((_QWORD *)v17 + 55);
      *(_QWORD *)(v26 + 440) = v28;
      if (v28)
        CFRetain(v28);
      v29 = (char *)(v19 + 456 * v18 + 448);
      v30 = v17 + 448;
    }
    else
    {
      v31 = *v15;
      v32 = WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(*v15 + 456 * v16), (const WebCore::ResourceRequestBase::RequestData *)&buf);
      v33 = v95;
      if (v95)
        *v95 += 2;
      *((_QWORD *)v32 + 19) = v33;
      v34 = v96;
      if (v96)
        *v96 += 2;
      *((_QWORD *)v32 + 20) = v34;
      v35 = v97;
      if (v97)
        ++*v97;
      *((_QWORD *)v32 + 21) = v35;
      v36 = v98;
      *((_BYTE *)v32 + 184) = v99;
      *((_QWORD *)v32 + 22) = v36;
      v37 = cf;
      *((_QWORD *)v32 + 24) = cf;
      if (v37)
        CFRetain(v37);
      v30 = &v105;
      v38 = v31 + 456 * v16;
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v38 + 200), (const WebCore::ResourceResponseBase *)v101);
      v39 = v104;
      *(_QWORD *)(v38 + 440) = v104;
      if (v39)
        CFRetain(v39);
      v29 = (char *)(v31 + 456 * v16 + 448);
    }
    *v29 = *v30;
    ++*(_DWORD *)(a1 + 676);
    v40 = v104;
    v104 = 0;
    if (v40)
      CFRelease(v40);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v101, v27);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&buf, v41);
    WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient>::CachedResourceClientWalker((uint64_t *)&v88, a1);
    v42 = *(_QWORD *)(a1 + 8);
    if (v42)
      goto LABEL_100;
    v42 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v42 = 1;
    *(_QWORD *)(v42 + 8) = a1;
    v79 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v42;
    if (!v79)
      goto LABEL_100;
    do
    {
      v80 = __ldaxr(v79);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v79));
    if (!v81)
    {
      atomic_store(1u, v79);
      WTF::fastFree((WTF *)v79, v78);
    }
    v42 = *(_QWORD *)(a1 + 8);
    if (v42)
    {
LABEL_100:
      do
        v43 = __ldaxr((unsigned int *)v42);
      while (__stlxr(v43 + 1, (unsigned int *)v42));
      v87 = (unsigned int *)v42;
      v44 = *(_QWORD *)(v42 + 8);
      if (v44)
      {
        v90[0] = (uint64_t)&v87;
        ++*(_DWORD *)(v44 + 548);
        v45 = *(_QWORD *)(v44 + 488);
        if (v45)
        {
          if (*(_QWORD *)(v45 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v44 + 464), v90, (uint64_t)&buf);
        }
      }
    }
    else
    {
      v87 = 0;
    }
    v46 = WTF::fastMalloc((WTF *)0x100);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v46, (const WebCore::ResourceResponseBase *)a3);
    v47 = *(const void **)(a3 + 240);
    *(_QWORD *)(v46 + 240) = v47;
    if (v47)
      CFRetain(v47);
    *(_BYTE *)(v46 + 248) = *(_BYTE *)(a3 + 248);
    v86 = (WebCore::ResourceResponseBase *)v46;
    *(_QWORD *)&buf = a1;
    v48 = *(_QWORD *)(a1 + 8);
    if (v48)
      goto LABEL_101;
    v48 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v48 = 1;
    *(_QWORD *)(v48 + 8) = a1;
    v83 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v48;
    if (!v83)
      goto LABEL_101;
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v83);
      WTF::fastFree((WTF *)v83, v82);
    }
    v48 = *(_QWORD *)(a1 + 8);
    if (v48)
    {
LABEL_101:
      do
        v49 = __ldaxr((unsigned int *)v48);
      while (__stlxr(v49 + 1, (unsigned int *)v48));
      *((_QWORD *)&buf + 1) = v48;
      v50 = *(_QWORD *)(v48 + 8);
      if (v50)
      {
        v91 = (_QWORD *)&buf + 1;
        ++*(_DWORD *)(v50 + 548);
        v51 = *(_QWORD *)(v50 + 488);
        if (v51)
        {
          if (*(_QWORD *)(v51 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v50 + 464), (uint64_t *)&v91, (uint64_t)v90);
        }
      }
    }
    else
    {
      *((_QWORD *)&buf + 1) = 0;
    }
    v52 = *a4;
    *a4 = 0;
    v93 = v52;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v94, (const WebCore::ResourceResponseBase *)a3);
    v53 = *(const void **)(a3 + 240);
    v102 = v53;
    if (v53)
      CFRetain(v53);
    v103 = *(_BYTE *)(a3 + 248);
    v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x120);
    v55 = (uint64_t)v54;
    *v54 = off_1E33F8938;
    v54[1] = buf;
    v56 = v54 + 2;
    v57 = *((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      do
        v58 = __ldaxr((unsigned int *)v57);
      while (__stlxr(v58 + 1, (unsigned int *)v57));
      *v56 = v57;
      v59 = *(_QWORD *)(v57 + 8);
      if (v59)
      {
        v91 = v54 + 2;
        ++*(_DWORD *)(v59 + 548);
        v60 = *(_QWORD *)(v59 + 488);
        if (v60)
        {
          if (*(_QWORD *)(v60 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v59 + 464), (uint64_t *)&v91, (uint64_t)v90);
        }
      }
    }
    else
    {
      *v56 = 0;
    }
    v61 = v93;
    v93 = 0;
    *(_QWORD *)(v55 + 24) = v61;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v55 + 32), (const WebCore::ResourceResponseBase *)v94);
    v62 = v102;
    *(_QWORD *)(v55 + 272) = v102;
    if (v62)
      CFRetain(v62);
    *(_BYTE *)(v55 + 280) = v103;
    v90[0] = v55;
    WebCore::iterateClients((uint64_t *)&v88, (uint64_t *)&v87, a2, (uint64_t *)&v86, v90);
    if (v90[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v90[0] + 8))(v90[0]);
    v64 = v102;
    v102 = 0;
    if (v64)
      CFRelease(v64);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v94, v63);
    v66 = v93;
    v93 = 0;
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&buf + 1, v65);
    v68 = v86;
    if (v86)
    {
      v69 = (const void *)*((_QWORD *)v86 + 30);
      *((_QWORD *)v86 + 30) = 0;
      if (v69)
        CFRelease(v69);
      WebCore::ResourceResponseBase::~ResourceResponseBase(v68, v67);
      WTF::fastFree(v70, v71);
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v87, v67);
    v73 = v89;
    v89 = 0;
    if (v73)
    {
      v75 = (WTF **)((char *)v73 + 8);
      v74 = *(unsigned int *)v73;
      if ((_DWORD)v74)
      {
        v76 = 8 * v74;
        do
        {
          v77 = *v75;
          *v75 = 0;
          if (v77)
          {
            if (*(_DWORD *)v77 == 1)
              WTF::fastFree(v77, v72);
            else
              --*(_DWORD *)v77;
          }
          ++v75;
          v76 -= 8;
        }
        while (v76);
      }
      WTF::fastFree(v73, v72);
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v88, v72);
  }
}

void WebCore::CachedResource::redirectReceived(uint64_t a1, uint64_t a2, WebCore::ResourceResponseBase *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  unint64_t updated;
  uint64_t v14;
  void *v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int **v21;
  uint8_t buf[4];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_31;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = a1;
  v17 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  if (!v17)
    goto LABEL_31;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v16);
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
LABEL_31:
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
    v20 = (unsigned int *)v8;
    v10 = *(_QWORD *)(v8 + 8);
  }
  else
  {
    v10 = 0;
    v20 = 0;
  }
  v21 = &v20;
  ++*(_DWORD *)(v10 + 548);
  v11 = *(_QWORD *)(v10 + 488);
  if (v11 && *(_QWORD *)(v11 + 8))
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v10 + 464), (uint64_t *)&v21, (uint64_t)buf);
  v12 = qword_1ECE7C608;
  updated = os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)updated)
  {
    *(_DWORD *)buf = 134217984;
    v23 = a1;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%p - CachedResource::redirectReceived:", buf, 0xCu);
  }
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    updated = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) != 0 && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4) > *(_DWORD *)(a2 + 36))
  {
    if ((WTF::isMainThread((WTF *)updated) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F4B45CLL);
    }
    {
      WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
    }
    WebCore::MemoryCache::remove((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, (WebCore::CachedResource *)a1);
  }
  *(_WORD *)(a1 + 557) |= 0x100u;
  if ((*((_BYTE *)a3 + 138) & 1) == 0)
    WebCore::updateRedirectChainStatus((unsigned int *)(a1 + 528), a3);
  v14 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v20, v15);
}

void WebCore::iterateClients(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t *v50;

  v10 = WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient>::next(a1);
  if (v10)
  {
    v11 = v10;
    if (*a2)
      v12 = *(_QWORD *)(*a2 + 8);
    else
      v12 = 0;
    v13 = *a4;
    v14 = *a1;
    if (*a1)
    {
      do
        v15 = __ldaxr((unsigned int *)v14);
      while (__stlxr(v15 + 1, (unsigned int *)v14));
      v43 = v14;
      v16 = *(_QWORD *)(v14 + 8);
      if (v16)
      {
        v50 = &v43;
        ++*(_DWORD *)(v16 + 548);
        v17 = *(_QWORD *)(v16 + 488);
        if (v17)
        {
          if (*(_QWORD *)(v17 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v16 + 464), (uint64_t *)&v50, (uint64_t)v49);
        }
      }
    }
    else
    {
      v43 = 0;
    }
    v18 = a1[1];
    v19 = a1[2];
    a1[1] = 0;
    v44 = v18;
    v45 = v19;
    v20 = *a2;
    if (*a2)
    {
      do
        v21 = __ldaxr((unsigned int *)v20);
      while (__stlxr(v21 + 1, (unsigned int *)v20));
      v46 = v20;
      v22 = *(_QWORD *)(v20 + 8);
      if (v22)
      {
        v50 = &v46;
        ++*(_DWORD *)(v22 + 548);
        v23 = *(_QWORD *)(v22 + 488);
        if (v23)
        {
          if (*(_QWORD *)(v23 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v22 + 464), (uint64_t *)&v50, (uint64_t)v49);
        }
      }
    }
    else
    {
      v46 = 0;
    }
    v24 = *a4;
    *a4 = 0;
    v25 = *a5;
    *a5 = 0;
    v47 = v24;
    v48 = v25;
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
    v27 = v26;
    *v26 = off_1E33F8850;
    v28 = v26 + 1;
    v29 = v43;
    if (v43)
    {
      do
        v30 = __ldaxr((unsigned int *)v29);
      while (__stlxr(v30 + 1, (unsigned int *)v29));
      *v28 = v29;
      v31 = *(_QWORD *)(v29 + 8);
      if (v31)
      {
        v50 = v26 + 1;
        ++*(_DWORD *)(v31 + 548);
        v32 = *(_QWORD *)(v31 + 488);
        if (v32)
        {
          if (*(_QWORD *)(v32 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v31 + 464), (uint64_t *)&v50, (uint64_t)v49);
        }
      }
    }
    else
    {
      *v28 = 0;
    }
    v33 = v44;
    v44 = 0;
    v27[2] = v33;
    v27[3] = v45;
    v34 = v27 + 4;
    v35 = v46;
    if (v46)
    {
      do
        v36 = __ldaxr((unsigned int *)v35);
      while (__stlxr(v36 + 1, (unsigned int *)v35));
      *v34 = v35;
      v37 = *(_QWORD *)(v35 + 8);
      if (v37)
      {
        v50 = v27 + 4;
        ++*(_DWORD *)(v37 + 548);
        v38 = *(_QWORD *)(v37 + 488);
        if (v38)
        {
          if (*(_QWORD *)(v38 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v37 + 464), (uint64_t *)&v50, (uint64_t)v49);
        }
      }
    }
    else
    {
      *v34 = 0;
    }
    v27[5] = v47;
    v39 = v48;
    v47 = 0;
    v48 = 0;
    v27[6] = v39;
    v49[0] = v27;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v11 + 80))(v11, v12, a3, v13, v49);
    v41 = v49[0];
    v49[0] = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    WebCore::iterateClients(WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient> &&,WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::ResourceRequest &&,std::unique_ptr<WebCore::ResourceResponse,WebCore::ResourceRequest::default_delete<WebCore::ResourceRequest &&>> &&,WTF::CompletionHandler<void ()(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&)> &&)::$_0::~$_0((uint64_t)&v43, v40);
  }
  else
  {
    v42 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
}

uint64_t WebCore::CachedRawResource::shouldCacheResponse(WebCore::CachedRawResource *this, const WebCore::ResourceResponse *a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  WTF *v19;
  unsigned int *v21;
  WTF *v22;
  unint64_t v23;

  WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient>::CachedResourceClientWalker((uint64_t *)&v21, (uint64_t)this);
  do
  {
    if (!v22)
    {
      v22 = 0;
      v14 = 1;
      goto LABEL_30;
    }
    v5 = *(unsigned int *)v22;
    v6 = v23;
    if (v23 >= v5)
    {
LABEL_18:
      v14 = 1;
      goto LABEL_19;
    }
    while (1)
    {
      v7 = v6 + 1;
      v23 = v6 + 1;
      if (*(_DWORD *)v22 <= v6)
        goto LABEL_31;
      v8 = (char *)v22 + 8;
      v9 = *((_QWORD *)v22 + v6 + 1);
      if (v9)
      {
        v4 = *(void **)(v9 + 8);
        if (v4)
          break;
      }
LABEL_11:
      v6 = v7;
      if (v7 >= v5)
        goto LABEL_18;
    }
    v10 = v21;
    if (v21)
      v10 = (unsigned int *)*((_QWORD *)v21 + 1);
    if ((WTF::WeakHashCountedSet<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::contains((uint64_t *)v10 + 45, (uint64_t)v4) & 1) == 0)
    {
      v7 = v23;
      goto LABEL_11;
    }
    v11 = *(_QWORD *)(*(_QWORD *)&v8[8 * v6] + 8);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11) != 5)
    {
LABEL_31:
      __break(0xC471u);
      JUMPOUT(0x195F4B910);
    }
    v12 = *(_QWORD *)&v8[8 * v6];
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
        continue;
    }
    goto LABEL_18;
  }
  while (((*(uint64_t (**)(uint64_t, WebCore::CachedRawResource *, const WebCore::ResourceResponse *))(*(_QWORD *)v13 + 64))(v13, this, a2) & 1) != 0);
  v14 = 0;
LABEL_19:
  v15 = v22;
  v22 = 0;
  if (v15)
  {
    v17 = (WTF **)((char *)v15 + 8);
    v16 = *(unsigned int *)v15;
    if ((_DWORD)v16)
    {
      v18 = 8 * v16;
      do
      {
        v19 = *v17;
        *v17 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
            WTF::fastFree(v19, v4);
          else
            --*(_DWORD *)v19;
        }
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    WTF::fastFree(v15, v4);
  }
LABEL_30:
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v21, v4);
  return v14;
}

void WebCore::CachedRawResource::finishedTimingForWorkerLoad(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  WTF *v10;
  unsigned int *v11;
  WTF *v12;

  WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient>::CachedResourceClientWalker((uint64_t *)&v11, a1);
  while (1)
  {
    v4 = WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient>::next((uint64_t *)&v11);
    if (!v4)
      break;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, a1, a2);
  }
  v6 = v12;
  v12 = 0;
  if (v6)
  {
    v8 = (WTF **)((char *)v6 + 8);
    v7 = *(unsigned int *)v6;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        *v8 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 1)
            WTF::fastFree(v10, v5);
          else
            --*(_DWORD *)v10;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    WTF::fastFree(v6, v5);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v11, v5);
}

void WebCore::CachedRawResource::switchClientsToRevalidatedResource(WebCore::CachedRawResource *this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  int v5;

  v2 = *((_QWORD *)this + 61);
  if (v2)
    v2 = *(_QWORD *)(v2 + 8);
  v3 = *(_BYTE *)(v2 + 556) & 0x1F;
  v4 = v3 > 0xB;
  v5 = (1 << v3) & 0xFC1;
  if (v4 || v5 == 0)
  {
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)(v2 + 656) = *(_QWORD *)(*((_QWORD *)this + 48) + 744);
    WebCore::CachedResource::switchClientsToRevalidatedResource((unsigned int ****)this, a2);
  }
}

void WebCore::CachedRawResource::previewResponseReceived(WebCore::CachedRawResource *this, WTF::StringImpl **a2)
{
  WTF::WallTime *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  WTF *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF **v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  char v37;
  unsigned int ***v38;
  WTF::StringImpl *v39;
  WTF *v40;
  unint64_t v41;
  unsigned int **v42;

  if (!this)
    goto LABEL_2;
  v28 = *((_QWORD *)this + 1);
  if (v28)
    goto LABEL_57;
  v28 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v28 = 1;
  *(_QWORD *)(v28 + 8) = this;
  v33 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v28;
  if (!v33)
    goto LABEL_57;
  do
  {
    v34 = __ldaxr(v33);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, v33));
  if (!v35)
  {
    atomic_store(1u, v33);
    WTF::fastFree((WTF *)v33, v32);
  }
  v28 = *((_QWORD *)this + 1);
  if (v28)
  {
LABEL_57:
    do
      v29 = __ldaxr((unsigned int *)v28);
    while (__stlxr(v29 + 1, (unsigned int *)v28));
    v36 = (unsigned int *)v28;
    v30 = *(_QWORD *)(v28 + 8);
    if (v30)
    {
      v42 = &v36;
      ++*(_DWORD *)(v30 + 548);
      v31 = *(_QWORD *)(v30 + 488);
      if (v31)
      {
        if (*(_QWORD *)(v31 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v30 + 464), (uint64_t *)&v42, (uint64_t)&v39);
      }
    }
  }
  else
  {
LABEL_2:
    v36 = 0;
  }
  v4 = (WTF::WallTime *)WebCore::CachedResource::setResponse(this, (const WebCore::ResourceResponse *)a2);
  WTF::WallTime::now(v4);
  *((_QWORD *)this + 54) = v5;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  v6 = a2[7];
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    v39 = v6;
    (*(void (**)(WebCore::CachedRawResource *, WTF::StringImpl **))(*(_QWORD *)this + 24))(this, &v39);
    v8 = v39;
    v39 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient>::CachedResourceClientWalker((uint64_t *)&v39, (uint64_t)this);
  v10 = v40;
  if (!v40)
  {
LABEL_26:
    v40 = 0;
    goto LABEL_37;
  }
LABEL_8:
  v11 = *(unsigned int *)v10;
  v12 = v41;
  if (v41 < v11)
  {
    do
    {
      v13 = v12 + 1;
      v41 = v12 + 1;
      if (*(_DWORD *)v40 <= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x195F4BCB8);
      }
      v14 = (char *)v40 + 8;
      v15 = *((_QWORD *)v40 + v12 + 1);
      if (v15)
      {
        v9 = *(void **)(v15 + 8);
        if (v9)
        {
          v16 = v39;
          if (v39)
            v16 = (WTF::StringImpl *)*((_QWORD *)v39 + 1);
          if ((WTF::WeakHashCountedSet<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::contains((uint64_t *)v16 + 45, (uint64_t)v9) & 1) != 0)
          {
            v17 = *(_QWORD *)(*(_QWORD *)&v14[8 * v12] + 8);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17) != 5)
            {
              __break(0xC471u);
              JUMPOUT(0x195F4BCD8);
            }
            v18 = *(_QWORD *)&v14[8 * v12];
            if (!v18)
              break;
            v19 = *(_QWORD *)(v18 + 8);
            if (!v19)
              break;
            v20 = (uint64_t *)*((_QWORD *)this + 50);
            if (!v20)
            {
              v21 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
              if (v21 != -1)
              {
                v42 = (unsigned int **)&v37;
                v38 = &v42;
                std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
              }
              v20 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
            }
            (*(void (**)(uint64_t, WebCore::CachedRawResource *, uint64_t *))(*(_QWORD *)v19 + 96))(v19, this, v20);
            v10 = v40;
            if (!v40)
              goto LABEL_26;
            goto LABEL_8;
          }
          v13 = v41;
        }
      }
      v12 = v13;
    }
    while (v13 < v11);
  }
  v22 = v40;
  v40 = 0;
  if (v22)
  {
    v24 = (WTF **)((char *)v22 + 8);
    v23 = *(unsigned int *)v22;
    if ((_DWORD)v23)
    {
      v25 = 8 * v23;
      do
      {
        v26 = *v24;
        *v24 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 1)
            WTF::fastFree(v26, v9);
          else
            --*(_DWORD *)v26;
        }
        ++v24;
        v25 -= 8;
      }
      while (v25);
    }
    WTF::fastFree(v22, v9);
  }
LABEL_37:
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v39, v9);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v36, v27);
}

void WebCore::CachedResource::previewResponseReceived(WebCore::CachedResource *this, WTF::StringImpl **a2)
{
  WTF::WallTime *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v4 = (WTF::WallTime *)WebCore::CachedResource::setResponse(this, (const WebCore::ResourceResponse *)a2);
  WTF::WallTime::now(v4);
  *((_QWORD *)this + 54) = v5;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  v6 = a2[7];
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    v9 = v6;
    (*(void (**)(WebCore::CachedResource *, WTF::StringImpl **))(*(_QWORD *)this + 24))(this, &v9);
    v8 = v9;
    v9 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
}

uint64_t WebCore::CachedResource::failBeforeStarting(WebCore::CachedResource *this)
{
  uint64_t v2;
  uint64_t isMainThread;
  void *v4;

  if ((*((_BYTE *)this + 131) & 4) == 0)
  {
    v2 = *((_QWORD *)this + 61);
    if (v2)
    {
      if (*(_QWORD *)(v2 + 8))
      {
        isMainThread = WTF::isMainThread(this);
        if ((isMainThread & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F4BEB8);
        }
        {
          isMainThread = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
        }
        if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F4BED8);
        }
        WebCore::CachedResource::clearResourceToRevalidate((uint64_t)this, v4);
      }
    }
  }
  return (*(uint64_t (**)(WebCore::CachedResource *, uint64_t))(*(_QWORD *)this + 72))(this, 3);
}

uint64_t WebCore::CachedResourceLoader::cachePolicy(uint64_t a1, int a2, WTF::URL *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::FrameLoader *v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  WebCore::Page *v14;
  int v15;
  WTF *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;

  if (!a1 || (v3 = *(_QWORD *)(a1 + 8)) == 0 || (v4 = *(_QWORD *)(v3 - 40)) == 0)
  {
    LOBYTE(v5) = 0;
    return v5;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    if (a2)
    {
      v8 = *(WebCore::FrameLoader **)(v5 + 280);
      ++*(_DWORD *)v8;
      v9 = WebCore::FrameLoader::subresourceCachePolicy(v8, a3);
      if (!*(_DWORD *)v8)
      {
        __break(0xC471u);
        JUMPOUT(0x195F4C078);
      }
      LOBYTE(v5) = v9;
      --*(_DWORD *)v8;
      goto LABEL_10;
    }
    v13 = *(_QWORD *)(v5 + 24);
    if (v13)
    {
      v14 = *(WebCore::Page **)(v13 + 8);
      if (v14)
      {
        v15 = (*(_DWORD *)v14)++;
        if (*((_BYTE *)v14 + 1092))
        {
          WTF::RefCounted<WebCore::Page>::deref(v14);
          LOBYTE(v5) = 2;
          goto LABEL_10;
        }
        if (v15)
        {
          *(_DWORD *)v14 = v15;
        }
        else
        {
          WebCore::Page::~Page(v14);
          WTF::fastFree(v16, v17);
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v5 + 280) + 81) - 1) >= 8u)
      LOBYTE(v5) = 0;
    else
      v5 = 0x200000002030303uLL >> (8 * (*(_BYTE *)(*(_QWORD *)(v5 + 280) + 81) - 1));
    do
    {
LABEL_10:
      v10 = __ldaxr(v6);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v6));
    if (!v11)
    {
      atomic_store(1u, v6);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = off_1E31FE290;
      v18[1] = v6;
      v19 = v18;
      WTF::ensureOnMainThread();
      if (v19)
        (*(void (**)(_QWORD *))(*v19 + 8))(v19);
    }
  }
  return v5;
}

WTF::JSONImpl::Object *WebCore::InspectorInstrumentation::willSendRequestOfType(WTF::JSONImpl::Object *result, Inspector::IdentifiersFactory *a2, uint64_t a3, WebCore::ResourceRequest *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  WTF::JSONImpl::Object *v10;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v5 = *((_QWORD *)result + 3);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 8);
        v9 = *(_QWORD *)(v8 + 192);
        if (v9)
          WebCore::InspectorNetworkAgent::willSendRequestOfType(v9, a2, a3, (uint64_t)this, 1);
        result = *(WTF::JSONImpl::Object **)(v8 + 144);
        if (result && (*((_BYTE *)this + 147) & 0xFE) != 2)
        {
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            v10 = *(WTF::JSONImpl::Object **)(v8 + 144);
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            result = v10;
            *((_BYTE *)this + 184) |= 1u;
          }
          return WebCore::InspectorDOMDebuggerAgent::breakOnURLIfNeeded((Inspector::InspectorDebuggerAgent **)result, this);
        }
      }
    }
  }
  return result;
}

_QWORD *WebCore::CachedResourceHandle<WebCore::CachedResource>::CachedResourceHandle(_QWORD *a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;

  if (a2)
  {
    do
      v3 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v3 + 1, (unsigned int *)a2));
    *a1 = a2;
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v8 = a1;
      ++*(_DWORD *)(v4 + 548);
      v5 = *(_QWORD *)(v4 + 488);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v4 + 464), (uint64_t *)&v8, (uint64_t)&v7);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

_QWORD *WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>::Function<WebCore::CachedResource::load(WebCore::CachedResourceLoader &)::$_0,void>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  v5 = v4;
  *v4 = off_1E33F8960;
  v4[1] = *a2;
  v6 = v4 + 2;
  v7 = a2[1];
  if (v7)
  {
    do
      v8 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v8 + 1, (unsigned int *)v7));
    *v6 = v7;
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
    {
      v14 = v4 + 2;
      ++*(_DWORD *)(v9 + 548);
      v10 = *(_QWORD *)(v9 + 488);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v9 + 464), (uint64_t *)&v14, (uint64_t)&v13);
      }
    }
  }
  else
  {
    *v6 = 0;
  }
  v11 = a2[2];
  a2[2] = 0;
  v5[3] = v11;
  v5[4] = a2[3];
  *a1 = v5;
  return a1;
}

uint64_t WebCore::CachedResource::load(WebCore::CachedResourceLoader &)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 8), a2);
  return a1;
}

void WebCore::CachedResource::checkNotify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  WTF *v12;
  unsigned int *v13;
  WTF *v14;

  if ((*(_WORD *)(a1 + 557) & 0x400) == 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) & 1) == 0)
  {
    WebCore::CachedResourceClientWalker<WebCore::CachedResourceClient>::CachedResourceClientWalker((uint64_t *)&v13, a1);
    while (1)
    {
      v6 = WebCore::CachedResourceClientWalker<WebCore::CachedResourceClient>::next(&v13);
      if (!v6)
        break;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a1, a2, a3);
    }
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      v10 = (WTF **)((char *)v8 + 8);
      v9 = *(unsigned int *)v8;
      if ((_DWORD)v9)
      {
        v11 = 8 * v9;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1)
              WTF::fastFree(v12, v7);
            else
              --*(_DWORD *)v12;
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      WTF::fastFree(v8, v7);
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v13, v7);
  }
}

uint64_t std::array<std::optional<WebCore::ResourceCryptographicDigest>,3ul>::fill[abi:sn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  const void **v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;

  v3 = result;
  v4 = (const void **)(a2 + 8);
  if (*(unsigned __int8 *)(result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
    {
      *(_BYTE *)result = *(_BYTE *)a2;
      result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(result + 8, (const void **)(a2 + 8));
    }
  }
  else if (*(_BYTE *)(result + 24))
  {
    result = *(_QWORD *)(result + 8);
    if (result)
    {
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      result = WTF::fastFree((WTF *)result, (void *)a2);
    }
    *(_BYTE *)(v3 + 24) = 0;
  }
  else
  {
    *(_BYTE *)result = *(_BYTE *)a2;
    v5 = (WTF *)*(unsigned int *)(a2 + 20);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 20) = (_DWORD)v5;
    if ((_DWORD)v5)
    {
      v6 = (void *)WTF::fastMalloc(v5);
      *(_DWORD *)(v3 + 16) = (_DWORD)v5;
      *(_QWORD *)(v3 + 8) = v6;
      result = (uint64_t)memcpy(v6, *(const void **)(a2 + 8), *(unsigned int *)(a2 + 20));
    }
    *(_BYTE *)(v3 + 24) = 1;
  }
  if (*(unsigned __int8 *)(v3 + 56) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(v3 + 56))
    {
      *(_BYTE *)(v3 + 32) = *(_BYTE *)a2;
      result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 40, v4);
    }
  }
  else if (*(_BYTE *)(v3 + 56))
  {
    result = *(_QWORD *)(v3 + 40);
    if (result)
    {
      *(_QWORD *)(v3 + 40) = 0;
      *(_DWORD *)(v3 + 48) = 0;
      result = WTF::fastFree((WTF *)result, (void *)a2);
    }
    *(_BYTE *)(v3 + 56) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 32) = *(_BYTE *)a2;
    v7 = (WTF *)*(unsigned int *)(a2 + 20);
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 52) = (_DWORD)v7;
    if ((_DWORD)v7)
    {
      v8 = (void *)WTF::fastMalloc(v7);
      *(_DWORD *)(v3 + 48) = (_DWORD)v7;
      *(_QWORD *)(v3 + 40) = v8;
      result = (uint64_t)memcpy(v8, *(const void **)(a2 + 8), *(unsigned int *)(a2 + 20));
    }
    *(_BYTE *)(v3 + 56) = 1;
  }
  if (*(unsigned __int8 *)(v3 + 88) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(v3 + 88))
    {
      *(_BYTE *)(v3 + 64) = *(_BYTE *)a2;
      return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 72, v4);
    }
  }
  else if (*(_BYTE *)(v3 + 88))
  {
    result = *(_QWORD *)(v3 + 72);
    if (result)
    {
      *(_QWORD *)(v3 + 72) = 0;
      *(_DWORD *)(v3 + 80) = 0;
      result = WTF::fastFree((WTF *)result, (void *)a2);
    }
    *(_BYTE *)(v3 + 88) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 64) = *(_BYTE *)a2;
    v9 = (WTF *)*(unsigned int *)(a2 + 20);
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_DWORD *)(v3 + 84) = (_DWORD)v9;
    if ((_DWORD)v9)
    {
      v10 = (void *)WTF::fastMalloc(v9);
      *(_DWORD *)(v3 + 80) = (_DWORD)v9;
      *(_QWORD *)(v3 + 72) = v10;
      result = (uint64_t)memcpy(v10, *(const void **)(a2 + 8), *(unsigned int *)(a2 + 20));
    }
    *(_BYTE *)(v3 + 88) = 1;
  }
  return result;
}

WTF::StringImpl *WebCore::CachedResource::cancelLoad(uint64_t a1, uint64_t a2)
{
  _WORD *v4;
  WTF::StringImpl *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  CFTypeRef v14;
  const void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  CFTypeRef v21;
  WTF::StringImpl *v22[2];
  __int128 v23;
  __int128 v24;
  WTF::StringImpl *v25[2];
  CFTypeRef cf[2];
  WTF::StringImpl *v27[2];
  int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;

  v4 = (_WORD *)(a1 + 557);
  if ((*(_WORD *)(a1 + 557) & 0x400) != 0
    || (result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a1 + 384);
    if (v6 && (v7 = *(_QWORD *)(v6 + 32)) != 0)
    {
      v8 = *(_QWORD *)(v7 + 280);
      v9 = 88;
      if (!*(_BYTE *)(v8 + 80))
        v9 = 96;
      v10 = *(_QWORD *)(v8 + v9);
      if (v10)
      {
        ++*(_DWORD *)(v10 + 24);
        if (*(_BYTE *)(a1 + 22))
        {
          v11 = 0;
          if (!*(_BYTE *)(v10 + 3538))
            goto LABEL_26;
LABEL_13:
          if (*(_QWORD *)(a1 + 400))
          {
            v22[0] = 0;
            v22[1] = 0;
            WTF::URL::invalidate((WTF::URL *)&v22[1]);
            cf[0] = 0;
            v25[0] = 0;
            *(WTF::StringImpl **)((char *)v25 + 6) = 0;
            LOBYTE(cf[1]) = 1;
            v12 = *(_QWORD *)(a1 + 400);
            WebCore::ResourceErrorBase::operator=(v12 + 320, (uint64_t *)v22);
            v14 = cf[0];
            cf[0] = 0;
            v15 = *(const void **)(v12 + 384);
            *(_QWORD *)(v12 + 384) = v14;
            if (v15)
            {
              CFRelease(v15);
              v21 = cf[0];
              *(_BYTE *)(v12 + 392) = cf[1];
              cf[0] = 0;
              if (v21)
                CFRelease(v21);
            }
            else
            {
              *(_BYTE *)(v12 + 392) = cf[1];
              cf[0] = 0;
            }
            v16 = v25[0];
            v25[0] = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v13);
              else
                *(_DWORD *)v16 -= 2;
            }
            v17 = v22[1];
            v22[1] = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v13);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = v22[0];
            v22[0] = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v13);
              else
                *(_DWORD *)v18 -= 2;
            }
          }
LABEL_27:
          *v4 &= ~0x400u;
          v28 = 0;
          *(_OWORD *)cf = 0u;
          *(_OWORD *)v27 = 0u;
          v24 = 0u;
          *(_OWORD *)v25 = 0u;
          *(_OWORD *)v22 = 0u;
          v23 = 0u;
          v29 = -1;
          v30 = -1;
          v31 = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)a1 + 200))(a1, v22, a2);
          v20 = v31;
          v31 = 0;
          if (v20)
            WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v20, v19);
          result = v27[1];
          v27[1] = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
            {
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
              if ((v11 & 1) != 0)
                return result;
              goto LABEL_33;
            }
            *(_DWORD *)result -= 2;
          }
          if ((v11 & 1) != 0)
            return result;
LABEL_33:
          if (*(_DWORD *)(v10 + 24) == 1)
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
          --*(_DWORD *)(v10 + 24);
          return result;
        }
        v11 = 0;
LABEL_26:
        *v4 = *v4 & 0xFF1F | 0x60;
        goto LABEL_27;
      }
    }
    else
    {
      v10 = 0;
    }
    v11 = 1;
    if (*(_BYTE *)(a1 + 22))
      goto LABEL_13;
    goto LABEL_26;
  }
  return result;
}

BOOL WebCore::CachedResource::isExpired(WebCore::CachedResource *this)
{
  uint64_t *v2;
  WebCore::ResourceResponseBase *v3;
  double v4;
  double v5;
  char v6;
  double v7;
  WTF::WallTime *v8;
  double v9;
  char v10;
  double v11;
  double v12;
  double v13;
  uint64_t *v14;
  double v15;
  double v16;
  double v17;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  char v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29[2];

  v2 = (uint64_t *)*((_QWORD *)this + 50);
  if (!v2)
  {
    v23 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v23 != -1)
    {
      v29[0] = (unsigned __int8 *)&v27;
      v28 = v29;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v2 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  if ((*((_BYTE *)v2 + 138) & 1) == 0)
  {
    v3 = (WebCore::ResourceResponseBase *)*((_QWORD *)this + 50);
    if (!v3)
    {
      v24 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v24 != -1)
      {
        v29[0] = (unsigned __int8 *)&v27;
        v28 = v29;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v3 = (WebCore::ResourceResponseBase *)&WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    v4 = *((double *)this + 54);
    v5 = fmax(v4 - COERCE_DOUBLE(WebCore::ResourceResponseBase::date(v3)), 0.0);
    if (v6)
      v7 = v5;
    else
      v7 = 0.0;
    WebCore::ResourceResponseBase::age(v3);
    v9 = *(double *)&v8;
    if (!v10)
      v9 = 0.0;
    if (v9 <= v7)
      v11 = v7;
    else
      v11 = v9;
    WTF::WallTime::now(v8);
    v13 = v12 - v4;
    v14 = (uint64_t *)*((_QWORD *)this + 50);
    if (!v14)
    {
      v25 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v25 != -1)
      {
        v29[0] = (unsigned __int8 *)&v27;
        v28 = v29;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v14 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    v15 = v13 + v11;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v14, 1);
    if ((v14[1] & 2) != 0)
    {
      WebCore::computeFreshnessLifetimeForHTTPFamily((uint64_t)v14);
      v17 = v16;
      return v15 > v17;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v14, 1);
    v19 = WTF::URL::protocol((WTF::URL *)v14);
    if ((_DWORD)v20 == 12)
    {
      if (((unint64_t)v20 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)v19 & 0xDF) != 0x41
          || (*(_BYTE *)(v19 + 1) & 0xDF) != 0x50
          || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x50
          || (*(_BYTE *)(v19 + 3) & 0xDF) != 0x4C
          || (*(_BYTE *)(v19 + 4) & 0xDF) != 0x45
          || (*(_BYTE *)(v19 + 5) & 0xDF) != 0x57
          || (*(_BYTE *)(v19 + 6) & 0xDF) != 0x45
          || (*(_BYTE *)(v19 + 7) & 0xDF) != 0x42
          || (*(_BYTE *)(v19 + 8) & 0xDF) != 0x44
          || (*(_BYTE *)(v19 + 9) & 0xDF) != 0x41
          || (*(_BYTE *)(v19 + 10) & 0xDF) != 0x54)
        {
          goto LABEL_18;
        }
        v26 = *(unsigned __int8 *)(v19 + 11);
      }
      else
      {
        if ((*(_WORD *)v19 & 0xFFDF) != 0x41
          || (*(_WORD *)(v19 + 2) & 0xFFDF) != 0x50
          || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x50
          || (*(_WORD *)(v19 + 6) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v19 + 8) & 0xFFDF) != 0x45
          || (*(_WORD *)(v19 + 10) & 0xFFDF) != 0x57
          || (*(_WORD *)(v19 + 12) & 0xFFDF) != 0x45
          || (*(_WORD *)(v19 + 14) & 0xFFDF) != 0x42
          || (*(_WORD *)(v19 + 16) & 0xFFDF) != 0x44
          || (*(_WORD *)(v19 + 18) & 0xFFDF) != 0x41
          || (*(_WORD *)(v19 + 20) & 0xFFDF) != 0x54)
        {
          goto LABEL_18;
        }
        v26 = *(unsigned __int16 *)(v19 + 22);
      }
    }
    else
    {
      if ((_DWORD)v20 != 4)
        goto LABEL_18;
      if (((unint64_t)v20 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)v19 & 0xDF) != 0x44
          || (*(_BYTE *)(v19 + 1) & 0xDF) != 0x41
          || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x54)
        {
          goto LABEL_18;
        }
        v26 = *(unsigned __int8 *)(v19 + 3);
      }
      else
      {
        if ((*(_WORD *)v19 & 0xFFDF) != 0x44
          || (*(_WORD *)(v19 + 2) & 0xFFDF) != 0x41
          || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x54)
        {
          goto LABEL_18;
        }
        v26 = *(unsigned __int16 *)(v19 + 6);
      }
    }
    if ((v26 & 0xFFFFFFDF) == 0x41)
    {
LABEL_23:
      v17 = INFINITY;
      return v15 > v17;
    }
LABEL_18:
    v17 = 0.0;
    if ((*((_BYTE *)this + 556) & 0x1F) == 0)
      return v15 > v17;
    v29[0] = (unsigned __int8 *)v19;
    v29[1] = v20;
    if (v19)
    {
      {
        WebCore::alwaysRevalidatedSchemes(void)::schemes = 0;
      }
      if ((WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::alwaysRevalidatedSchemes(void)::schemes, v29, v21, v22) & 1) != 0)return v15 > v17;
    }
    goto LABEL_23;
  }
  return 0;
}

uint64_t WebCore::CachedResource::removeClient(WebCore::CachedResource *this, unsigned int **a2)
{
  WebCore::CachedResourceClient *v2;
  unsigned int ***v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int **v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v31;
  void *v32;
  uint64_t result;
  unsigned int **v34;
  unsigned int *v35;
  void *v36;
  WTF *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  void *v41;
  uint64_t v42;
  double v43;
  WTF *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  int i;
  uint64_t v51;
  unsigned int *v52;
  void *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  unsigned int **v57;
  char v58[8];
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v2 = (WebCore::CachedResourceClient *)a2;
  v4 = (unsigned int ***)((char *)this + 448);
  v5 = *((_DWORD *)this + 114);
  *((_DWORD *)this + 114) = v5 + 1;
  if (v5 > *((_DWORD *)this + 115))
    WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)this + 448, a2);
  v6 = *((_QWORD *)v2 + 1);
  if (!v6 || !*(_QWORD *)(v6 + 8) || (v7 = *v4) == 0)
  {
LABEL_6:
    v57 = 0;
    goto LABEL_7;
  }
  v45 = *((_DWORD *)v7 - 2);
  v46 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
  v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
  v49 = v45 & ((v48 >> 31) ^ v48);
  for (i = 1; ; ++i)
  {
    v51 = v49;
    v52 = v7[2 * v49];
    if (v52 == (unsigned int *)-1)
      goto LABEL_84;
    if (!v52)
      break;
    if (v52 == (unsigned int *)v6)
    {
      a2 = &v7[2 * v51];
      v54 = *((unsigned int *)v7 - 1);
      goto LABEL_89;
    }
LABEL_84:
    v49 = (v51 + i) & v45;
  }
  v54 = *((unsigned int *)v7 - 1);
  a2 = &v7[2 * v54];
LABEL_89:
  if (a2 == &v7[2 * v54])
    goto LABEL_6;
  v55 = a2[1];
  a2[1] = 0;
  WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::remove(v4, (unsigned int ***)a2);
  v57 = (unsigned int **)v55;
  if (v55)
  {
    if ((*((_QWORD *)v55 + 6) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*((_QWORD *)v55 + 6) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v55 + 4));
    }
    std::unique_ptr<WebCore::CachedResource::Callback>::reset[abi:sn180100](&v57, 0);
    goto LABEL_39;
  }
  v6 = *((_QWORD *)v2 + 1);
LABEL_7:
  v8 = (uint64_t *)((char *)this + 360);
  ++*((_DWORD *)this + 92);
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::end((uint64_t)&v60, (uint64_t *)this + 45);
    v9 = *v8;
    goto LABEL_20;
  }
  v9 = *v8;
  if (!*v8)
  {
    v18 = 0;
    v20 = 0;
    v21 = 0;
    v19 = 0;
    v61 = 0;
    v62 = 0;
    v60 = (char *)this + 360;
    goto LABEL_17;
  }
  v10 = *(_DWORD *)(v9 - 8);
  v11 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = 1;
  while (2)
  {
    v16 = v14;
    v17 = *(_QWORD *)(v9 + 16 * v14);
    if (v17 == -1)
    {
LABEL_14:
      v14 = (v16 + v15++) & v10;
      continue;
    }
    break;
  }
  if (v17)
  {
    if (v17 == v6)
    {
      v18 = v9 + 16 * v16;
      v19 = *(unsigned int *)(v9 - 4);
      v20 = v9 + 16 * v19;
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v19 = *(unsigned int *)(v9 - 4);
  v18 = v9 + 16 * v19;
  v20 = v18;
LABEL_16:
  v60 = (char *)this + 360;
  v61 = v18;
  v21 = v9 + 16 * v19;
  v62 = v20;
LABEL_17:
  v63 = v21;
  v64 = v9 + 16 * v19;
LABEL_18:
  while (v18 != v21 && !*(_QWORD *)(*(_QWORD *)v18 + 8))
  {
    v56 = v18 + 16;
    v61 = v56;
    v18 = v20;
    if (v56 != v20)
    {
      v18 = v56;
      while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
      {
        v18 += 16;
        v61 = v18;
        if (v18 == v20)
        {
          v18 = v20;
          goto LABEL_18;
        }
      }
    }
  }
LABEL_20:
  if (v9)
    v22 = v9 + 16 * *(unsigned int *)(v9 - 4);
  else
    v22 = 0;
  v23 = (_QWORD *)v61;
  if (v61 != v22)
  {
    if (*(_DWORD *)(v61 + 8) == 1)
    {
      if (!v9 || (v9 += 16 * *(unsigned int *)(v9 - 4), v9 != v61))
      {
        if (v9 != v61)
        {
          v24 = *(WTF **)v61;
          *(_QWORD *)v61 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
              WTF::fastFree(v24, a2);
            else
              --*(_DWORD *)v24;
          }
          *v23 = -1;
          ++*(_DWORD *)(*v8 - 16);
          v25 = *v8;
          if (*v8)
            v26 = *(_DWORD *)(v25 - 12) - 1;
          else
            v26 = -1;
          *(_DWORD *)(v25 - 12) = v26;
          v27 = *v8;
          if (*v8)
          {
            v28 = 6 * *(_DWORD *)(v27 - 12);
            v29 = *(_DWORD *)(v27 - 4);
            if (v28 < v29 && v29 >= 9)
              WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)this + 45, v29 >> 1, 0);
          }
        }
      }
      v31 = *((_DWORD *)this + 92);
      *((_DWORD *)this + 92) = v31 + 1;
      if (v31 > *((_DWORD *)this + 93))
        WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)this + 360, a2);
    }
    else
    {
      --*(_DWORD *)(v61 + 8);
    }
  }
  (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)this + 96))(this, v2);
LABEL_39:
  result = WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences((uint64_t)this + 360, v32);
  if ((_DWORD)result)
  {
    if (*v4 && *((_DWORD *)*v4 - 3))
    {
      WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::begin((uint64_t *)v4, (uint64_t)&v60);
      result = (uint64_t)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::end((uint64_t *)v4, (uint64_t)v58);
      if (v61 != v59)
        goto LABEL_40;
      result = WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::clear((uint64_t)v4, v53);
    }
    if ((WTF::isMainThread((WTF *)result) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F4D1A8);
    }
    {
      WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
    }
    if ((*((_BYTE *)this + 131) & 4) == 0 && (*(_WORD *)((_BYTE *)this + 557) & 0x200) != 0)
    {
      WebCore::MemoryCache::removeFromLiveResourcesSize((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, this);
      if ((WTF::isMainThread(v44) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F4D1F0);
      }
      WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CachedResource>((uint64_t)&qword_1ECE909D8, (uint64_t)this);
    }
    result = WebCore::CachedResource::deleteIfPossible(this, v41);
    if ((result & 1) == 0)
    {
      if ((*(_WORD *)((_BYTE *)this + 557) & 0x2000) == 0)
        result = (*(uint64_t (**)(WebCore::CachedResource *))(*(_QWORD *)this + 104))(this);
      v42 = *((_QWORD *)this + 50);
      if (v42 && *(_DWORD *)(v42 + 404))
      {
        result = WTF::isMainThread((WTF *)result);
        if ((result & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F4D224);
        }
        {
          result = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
        }
        if (*(double *)&qword_1ECE908B8 != 0.0)
          result = (uint64_t)WebCore::CachedResource::restartDecodedDataDeletionTimer(this);
      }
      if ((*((_BYTE *)this + 131) & 4) == 0)
      {
        result = WTF::isMainThread((WTF *)result);
        if ((result & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F4D1C8);
        }
        if ((dword_1ECE908C4 + dword_1ECE908C0 > dword_1ECE908AC
           || dword_1ECE908C4 > dword_1ECE908B4)
          && ((qword_1ECE90A20 & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((qword_1ECE90A20 & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
        {
          qword_1ECE90A18 = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
          result = WebCore::TimerBase::setNextFireTime((uint64_t)&unk_1ECE90A00, v43 + 0.0);
        }
      }
    }
  }
LABEL_40:
  v34 = v57;
  v57 = 0;
  if (v34)
  {
    v34[2] = (unsigned int *)off_1E31F7378;
    v35 = v34[8];
    v34[8] = 0;
    if (v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v34 + 2));
    v37 = (WTF *)v34[1];
    v34[1] = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 1)
        WTF::fastFree(v37, v36);
      else
        --*(_DWORD *)v37;
    }
    v38 = *v34;
    *v34 = 0;
    if (v38)
    {
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v38);
        WTF::fastFree((WTF *)v38, v36);
      }
    }
    return WTF::fastFree((WTF *)v34, v36);
  }
  return result;
}

uint64_t WebCore::CachedResource::allClientsRemoved(uint64_t this)
{
  int v1;
  uint64_t v2;

  if ((*(_WORD *)(this + 557) & 0x800) != 0)
  {
    this = *(_QWORD *)(this + 384);
    if (this)
    {
      v1 = *(_DWORD *)(this + 16);
      *(_DWORD *)(this + 16) = v1 + 1;
      if (*(_DWORD *)(this + 1336) == 1)
      {
        v2 = this;
        WebCore::ResourceLoader::cancel((WebCore::ResourceLoader *)this);
        this = v2;
        v1 = *(_DWORD *)(v2 + 16) - 1;
      }
      if (v1)
        *(_DWORD *)(this + 16) = v1;
      else
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

WebCore::CachedResource::ResponseData *WebCore::CachedResource::mutableResponseData(WebCore::CachedResource *this)
{
  WebCore::CachedResource::ResponseData *result;
  WebCore::CachedResource::ResponseData *v3;
  WTF::StringImpl *v4;
  WebCore::CachedResource::ResponseData *v5;
  WTF *v6;
  void *v7;

  result = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
  if (!result)
  {
    v3 = (WebCore::CachedResource::ResponseData *)WTF::fastMalloc((WTF *)0x198);
    result = WebCore::CachedResource::ResponseData::ResponseData(v3, this);
    v5 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = result;
    if (v5)
    {
      WebCore::CachedResource::ResponseData::~ResponseData(v5, v4);
      WTF::fastFree(v6, v7);
      return (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
    }
  }
  return result;
}

uint64_t WebCore::CachedResource::clearResourceToRevalidate(uint64_t this, void *a2)
{
  WebCore::CachedResource *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WebCore::CachedResource *v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((*(_WORD *)(this + 557) & 0x2000) == 0)
  {
    v2 = (WebCore::CachedResource *)this;
    v3 = *(_QWORD *)(*(_QWORD *)(this + 488) + 8);
    v4 = *(unsigned int **)(v3 + 496);
    *(_QWORD *)(v3 + 496) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    v7 = *((_QWORD *)v2 + 61);
    if (v7)
      v8 = *(WebCore::CachedResource **)(v7 + 8);
    else
      v8 = 0;
    WebCore::CachedResource::deleteIfPossible(v8, a2);
    v10 = *((_QWORD *)v2 + 58);
    if (v10)
    {
      *((_QWORD *)v2 + 58) = 0;
      WTF::fastFree((WTF *)(v10 - 16), v9);
    }
    v11 = (unsigned int *)*((_QWORD *)v2 + 61);
    *((_QWORD *)v2 + 61) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v9);
      }
    }
    return WebCore::CachedResource::deleteIfPossible(v2, v9);
  }
  return this;
}

uint64_t WebCore::CachedResource::canUseCacheValidator(WebCore::CachedResource *this)
{
  __int16 v1;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  const WebCore::HTTPHeaderMap *v7;
  char v9;
  _BYTE *v10;
  _BYTE v11[25];

  v1 = *(_WORD *)((char *)this + 557);
  if ((v1 & 0x400) == 0 && (v1 >> 5) - 3 >= 2)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 50);
    if (!v3)
    {
      v5 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v5 != -1)
      {
        *(_QWORD *)v11 = &v9;
        v10 = v11;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v3 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    if ((v3[29] & 1) == 0)
    {
      WebCore::ResourceResponse::platformLazyInit((uint64_t)v3, 1);
      WebCore::parseCacheControlDirectives((unsigned int *)v3 + 20, v7, (int64x2_t *)v11);
      *(_OWORD *)(v3 + 25) = *(_OWORD *)v11;
      *(_OWORD *)((char *)v3 + 209) = *(_OWORD *)&v11[9];
      *((_WORD *)v3 + 116) |= 1u;
    }
    if ((v3[28] & 2) == 0)
    {
      v4 = (uint64_t *)*((_QWORD *)this + 50);
      if (!v4)
      {
        v6 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
        if (v6 != -1)
        {
          *(_QWORD *)v11 = &v9;
          v10 = v11;
          std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
        }
        v4 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
      }
      if ((v4[29] & 1) == 0)
        WebCore::ResourceResponseBase::parseCacheControlDirectives((WebCore::ResourceResponseBase *)v4);
    }
  }
  return 0;
}

void std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::CachedResource::resourceError(void)const::onceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::CachedResource::resourceError(void)const::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::resourceError(void)::$_0 &&>>);
  }
}

BOOL WebCore::CachedResource::wasCanceled(WebCore::CachedResource *this)
{
  uint64_t v1;
  uint64_t *v2;
  char v4;

  v1 = *((_QWORD *)this + 50);
  if (v1)
  {
    v2 = (uint64_t *)(v1 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v4);
    v2 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  return *((_BYTE *)v2 + 60) == 3;
}

void WebCore::CachedResource::Callback::timerFired(WebCore::CachedResource::Callback *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  _BYTE v13[24];
  unsigned int **v14;

  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  v3 = *(unsigned int **)(v2 + 8);
  if (v3)
    goto LABEL_16;
  v3 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
  *v3 = 1;
  *((_QWORD *)v3 + 1) = v2;
  v9 = *(unsigned int **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = v3;
  if (!v9)
    goto LABEL_16;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  v3 = *(unsigned int **)(v2 + 8);
  if (v3)
  {
LABEL_16:
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v12 = v3;
    v5 = *((_QWORD *)v3 + 1);
  }
  else
  {
    v5 = 0;
    v12 = 0;
  }
  v14 = &v12;
  ++*(_DWORD *)(v5 + 548);
  v6 = *(_QWORD *)(v5 + 488);
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v14, (uint64_t)v13);
    v3 = v12;
  }
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v3 + 1) + 88))(*((_QWORD *)v3 + 1), *(_QWORD *)(*((_QWORD *)this + 1) + 8));
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v12, v7);
}

void WebCore::CachedResource::tryReplaceEncodedData(WebCore::CachedResource *this, WebCore::SharedBuffer *a2)
{
  void *v4;
  __n128 v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  char v24;

  if (*((_QWORD *)this + 49))
  {
    if ((*(unsigned int (**)(WebCore::CachedResource *))(*(_QWORD *)this + 208))(this))
    {
      v5.n128_f64[0] = WebCore::FragmentedSharedBuffer::operator==(*((_QWORD *)this + 49), (uint64_t)a2);
      if (v6)
      {
        do
          v7 = __ldaxr((unsigned int *)a2);
        while (__stlxr(v7 + 1, (unsigned int *)a2));
        v8 = *((_QWORD *)this + 49);
        *((_QWORD *)this + 49) = a2;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            atomic_store(1u, (unsigned int *)v8);
            v11 = *(unsigned int *)(v8 + 20);
            if ((_DWORD)v11)
            {
              v12 = *(_QWORD *)(v8 + 8);
              v13 = v12 + 16 * v11;
              do
              {
                v14 = *(unsigned int **)(v12 + 8);
                *(_QWORD *)(v12 + 8) = 0;
                if (v14)
                {
                  do
                  {
                    v15 = __ldaxr(v14);
                    v16 = v15 - 1;
                  }
                  while (__stlxr(v16, v14));
                  if (!v16)
                  {
                    v21 = v8;
                    v22 = v13;
                    atomic_store(1u, v14);
                    v23 = (WTF *)v14;
                    v20 = v14[6];
                    if ((_DWORD)v20 != -1)
                      ((void (*)(char *, unsigned int *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v20])(&v24, v14 + 2, v5);
                    *((_DWORD *)v23 + 6) = -1;
                    WTF::fastFree(v23, v4);
                    v8 = v21;
                    v13 = v22;
                  }
                }
                v12 += 16;
              }
              while (v12 != v13);
            }
            v17 = *(WTF **)(v8 + 8);
            if ((WTF *)(v8 + 24) != v17 && v17 != 0)
            {
              *(_QWORD *)(v8 + 8) = 0;
              *(_DWORD *)(v8 + 16) = 0;
              v19 = v8;
              WTF::fastFree(v17, v4);
              v8 = v19;
            }
            WTF::fastFree((WTF *)v8, v4);
          }
        }
        (*(void (**)(WebCore::CachedResource *, __n128))(*(_QWORD *)this + 184))(this, v5);
      }
    }
  }
}

uint64_t WebCore::CachedResource::cryptographicDigest@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  char v12[8];
  uint64_t v13;
  int v14;
  unsigned int v15;

  v3 = a3;
  LODWORD(a3) = (a2 & (a2 - 1)) != 0;
  v4 = a2 >> 4;
  if (a2 >= 0x10)
    LODWORD(a3) = a3 | 4;
  else
    v4 = a2;
  if (v4 >= 4)
  {
    v4 >>= 2;
    LODWORD(a3) = a3 | 2;
  }
  if (v4 <= 1)
    a3 = a3;
  else
    a3 = (a3 + 1);
  if (a3 >= 3)
    goto LABEL_21;
  v5 = result + 32 * a3;
  v6 = v5 + 560;
  if (*(_BYTE *)(v5 + 584))
  {
    v7 = *(_DWORD *)(v5 + 580);
    goto LABEL_12;
  }
  result = WebCore::cryptographicDigestForSharedBuffer(a2, *(_QWORD *)(result + 392), (uint64_t)v12);
  v10 = *(unsigned __int8 *)(v6 + 24);
  *(_BYTE *)v6 = v12[0];
  if (v10)
  {
    result = *(_QWORD *)(v6 + 8);
    if (!result)
    {
      *(_QWORD *)(v6 + 8) = v13;
      v7 = v15;
      *(_DWORD *)(v6 + 16) = v14;
      *(_DWORD *)(v6 + 20) = v7;
      goto LABEL_12;
    }
    *(_QWORD *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    result = WTF::fastFree((WTF *)result, v9);
    v11 = *(unsigned __int8 *)(v6 + 24);
    *(_QWORD *)(v6 + 8) = v13;
    v7 = v15;
    *(_DWORD *)(v6 + 16) = v14;
    *(_DWORD *)(v6 + 20) = v7;
    if (!v11)
    {
      __break(1u);
LABEL_21:
      result = 1073;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    *(_QWORD *)(v6 + 8) = v13;
    v7 = v15;
    *(_DWORD *)(v6 + 16) = v14;
    *(_DWORD *)(v6 + 20) = v7;
    *(_BYTE *)(v6 + 24) = 1;
  }
LABEL_12:
  *(_BYTE *)v3 = *(_BYTE *)v6;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_DWORD *)(v3 + 20) = v7;
  if (v7)
  {
    v8 = (void *)WTF::fastMalloc((WTF *)v7);
    *(_DWORD *)(v3 + 16) = v7;
    *(_QWORD *)(v3 + 8) = v8;
    return (uint64_t)memcpy(v8, *(const void **)(v6 + 8), *(unsigned int *)(v6 + 20));
  }
  return result;
}

_QWORD *WebCore::CachedResourceClient::CachedResourceClient(_QWORD *this)
{
  *this = &off_1E33F87C8;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E33F87C8;
  this[1] = 0;
  return this;
}

void WebCore::CachedResourceClient::~CachedResourceClient(WebCore::CachedResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::CachedResourceClient::expectedType(WebCore::CachedResourceClient *this)
{
  return 0;
}

uint64_t WebCore::CachedResourceClient::resourceClientType(WebCore::CachedResourceClient *this)
{
  return 0;
}

_QWORD *WebCore::CachedResourceHandleBase::CachedResourceHandleBase(_QWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

uint64_t WebCore::CachedResourceHandleBase::get(WebCore::CachedResourceHandleBase *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)(*(_QWORD *)this + 8);
  else
    return 0;
}

uint64_t *WebCore::CachedResourceHandleBase::setResource(uint64_t *this, WebCore::CachedResource *a2)
{
  WebCore::CachedResourceHandleBase *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::CachedResourceHandleBase *v14;

  v3 = (WebCore::CachedResourceHandleBase *)this;
  if (!*this)
  {
    if (!a2)
      return this;
    goto LABEL_19;
  }
  this = *(uint64_t **)(*this + 8);
  if (this == (uint64_t *)a2)
    return this;
  if (this)
    WebCore::CachedResource::unregisterHandle(this, v3);
  if (a2)
  {
LABEL_19:
    this = (uint64_t *)*((_QWORD *)a2 + 1);
    if (this)
      goto LABEL_30;
    this = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)this = 1;
    this[1] = (uint64_t)a2;
    v10 = (unsigned int *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = this;
    if (!v10)
      goto LABEL_30;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
    this = (uint64_t *)*((_QWORD *)a2 + 1);
    if (this)
    {
LABEL_30:
      do
        v9 = __ldaxr((unsigned int *)this);
      while (__stlxr(v9 + 1, (unsigned int *)this));
    }
    goto LABEL_7;
  }
  this = 0;
LABEL_7:
  v4 = *(unsigned int **)v3;
  *(_QWORD *)v3 = this;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
    this = *(uint64_t **)v3;
  }
  if (this)
  {
    v7 = this[1];
    if (v7)
    {
      v14 = v3;
      ++*(_DWORD *)(v7 + 548);
      v8 = *(_QWORD *)(v7 + 488);
      if (v8)
      {
        if (*(_QWORD *)(v8 + 8))
          return WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v7 + 464), (uint64_t *)&v14, (uint64_t)&v13);
      }
    }
  }
  return this;
}

uint64_t WebCore::CachedResourceLoader::warnUnusedPreloads(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;

  v1 = *(_QWORD *)(this + 96);
  if (v1)
  {
    v2 = *(_QWORD *)(this + 72);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = *(_DWORD *)(v3 + 24);
        *(_DWORD *)(v3 + 24) = v4 + 2;
        v5 = *(_QWORD **)(v1 + 8);
        if (v5)
        {
          while (1)
          {
            v6 = *(_QWORD *)(*v5 + 8);
            if (v6)
              break;
            v5 = (_QWORD *)v5[2];
            if (!v5)
              goto LABEL_35;
          }
LABEL_8:
          if ((*(_WORD *)(v6 + 557) & 0x800) != 0 && (*(_BYTE *)(v6 + 556) & 0x60) == 0)
          {
            v7 = (uint64_t *)(v6 + 160);
            if ((*(_BYTE *)(v6 + 344) & 1) == 0)
            {
              v14 = v6;
              this = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v6 + 160));
              *(_BYTE *)(v14 + 344) |= 1u;
            }
            v8 = *v7;
            if (v8)
            {
              v9 = *(_DWORD *)(v8 + 4);
              *(_DWORD *)v8 += 2;
              if (v9 < 0)
                goto LABEL_40;
            }
            else
            {
              v9 = 0;
            }
            v10 = __OFADD__(v9, 147);
            v11 = v9 + 147;
            if (!v10)
            {
              this = (v11 + 13);
              if (!__OFADD__(v11, 13))
              {
                v12 = !v8 || (*(_BYTE *)(v8 + 16) & 4) != 0;
                this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(this, v12, (int8x16_t *)"The resource ", 0xDu, v8, (int8x16_t *)" was preloaded using link preload but not used within a few seconds from the window's load event. Please make sure it wasn't preloaded for nothing.", 0x93u, &v15);
                if (v15)
                {
                  WebCore::Document::addConsoleMessage((_QWORD *)v3, 16, 1, &v15, 0);
                  this = (uint64_t)v15;
                  v15 = 0;
                  if (this)
                  {
                    if (*(_DWORD *)this == 2)
                    {
                      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v13);
                      if (!v8)
                        goto LABEL_27;
                      goto LABEL_25;
                    }
                    *(_DWORD *)this -= 2;
                  }
                  if (!v8)
                    goto LABEL_27;
LABEL_25:
                  if (*(_DWORD *)v8 == 2)
                    this = WTF::StringImpl::destroy((WTF::StringImpl *)v8, v13);
                  else
                    *(_DWORD *)v8 -= 2;
                  goto LABEL_27;
                }
                goto LABEL_41;
              }
            }
LABEL_40:
            v15 = 0;
LABEL_41:
            __break(0xC471u);
            return this;
          }
LABEL_27:
          while (1)
          {
            v5 = (_QWORD *)v5[2];
            if (!v5)
              break;
            v6 = *(_QWORD *)(*v5 + 8);
            if (v6)
            {
              ++*(_DWORD *)(v1 + 24);
              goto LABEL_8;
            }
          }
          ++*(_DWORD *)(v1 + 24);
          v4 = *(_DWORD *)(v3 + 24) - 2;
        }
LABEL_35:
        if (v4)
        {
          *(_DWORD *)(v3 + 24) = v4;
        }
        else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        {
          return WebCore::Node::removedLastRef((WebCore::Node *)v3);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::CachedResourceLoader::cachedResource(WebCore::CachedResourceLoader *this, const WTF::String *a2)
{
  uint64_t v2;
  WebCore::Document *v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  unsigned int *v19;

  v2 = *((_QWORD *)this + 9);
  if (!v2)
    return 0;
  v4 = *(WebCore::Document **)(v2 + 8);
  if (!v4)
    return 0;
  WebCore::Document::completeURL(v4, a2, (uint64_t)v4 + 848, 0, (WTF::URL *)&v13);
  v6 = v13;
  if ((v14 & 1) == 0)
  {
    if (!v13)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v13)
  {
    if (*((_DWORD *)v13 + 1) > HIDWORD(v15) && (v14 & 2) != 0)
    {
      *(_DWORD *)v13 += 2;
      v16 = v6;
      v17 = v14;
      v18 = v15;
      WTF::URL::removeFragmentIdentifier((WTF::URL *)&v16);
      goto LABEL_8;
    }
LABEL_6:
    *(_DWORD *)v13 += 2;
  }
LABEL_7:
  v16 = v6;
  v17 = v14;
  v18 = v15;
LABEL_8:
  WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 8, &v16, v5, &v19);
  if (v19)
    v8 = *((_QWORD *)v19 + 1);
  else
    v8 = 0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v19, v7);
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v8;
}

uint64_t WebCore::CachedResourceLoader::cachedResource(WebCore::CachedResourceLoader *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  void *v3;
  uint64_t v4;
  unsigned int *v6;

  WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 8, a2, a3, &v6);
  if (v6)
    v4 = *((_QWORD *)v6 + 1);
  else
    v4 = 0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v6, v3);
  return v4;
}

BOOL WebCore::CachedResourceLoader::canRequest(_QWORD *a1, WTF::StringImpl *a2, WTF::URL *a3, _BYTE *a4, char a5, const WTF::URL *a6)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  char canDisplay;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  _BOOL4 v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WebCore::Page *v64;
  _BOOL4 v65;
  WTF *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  const WTF::String *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF::StringImpl *v81[5];

  v10 = a1[9];
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v11 + 192), a2);
      v15 = v14;
      if (v14)
      {
        do
          v16 = __ldaxr(v14);
        while (__stlxr(v16 + 1, v14));
      }
      {
        WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
      }
      canDisplay = WebCore::SecurityOrigin::canDisplay((uint64_t)v14, a3, (uint64_t (***)(_QWORD, WebCore::SecurityOrigin *))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
      if (v15)
      {
        do
        {
          v19 = __ldaxr(v15);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v15));
        if (!v20)
        {
          atomic_store(1u, v15);
          v50 = (WTF::StringImpl *)*((_QWORD *)v15 + 6);
          *((_QWORD *)v15 + 6) = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v17);
            else
              *(_DWORD *)v50 -= 2;
          }
          v51 = (WTF::StringImpl *)*((_QWORD *)v15 + 5);
          *((_QWORD *)v15 + 5) = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v17);
            else
              *(_DWORD *)v51 -= 2;
          }
          v52 = v15[8];
          if ((_DWORD)v52 != -1)
            ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F88A0[v52])(v81, v15 + 2);
          v15[8] = -1;
          WTF::fastFree((WTF *)v15, v17);
        }
      }
      if ((canDisplay & 1) == 0)
      {
        if ((a5 & 1) == 0)
        {
          v69 = a1[10];
          if (v69 && (v70 = *(_QWORD *)(v69 + 8)) != 0 && (v71 = *(_QWORD *)(v70 - 40)) != 0)
          {
            v72 = *(_QWORD *)(v71 + 8);
            if (v72)
            {
              v73 = (unsigned int *)(v72 + 8);
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 + 1, v73));
            }
          }
          else
          {
            v72 = 0;
          }
          WTF::URL::stringCenterEllipsizedToLength(a3);
          WebCore::FrameLoader::reportLocalLoadFailed(v72, (WebCore::LocalFrame *)v81, v75);
          v77 = v81[0];
          v81[0] = 0;
          if (v77)
          {
            if (*(_DWORD *)v77 == 2)
              WTF::StringImpl::destroy(v77, v76);
            else
              *(_DWORD *)v77 -= 2;
          }
          if (v72)
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v72 + 8));
        }
        return 0;
      }
      v21 = a4[1];
      if (v21 != 1)
        goto LABEL_12;
      v42 = a1[9];
      if (v42)
        v42 = *(_QWORD *)(v42 + 8);
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v42 + 192), v17);
      v44 = v43;
      if (v43)
      {
        do
          v45 = __ldaxr(v43);
        while (__stlxr(v45 + 1, v43));
      }
      {
        WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
      }
      if ((WebCore::SecurityOrigin::canRequest((uint64_t)v43, a3, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance) & 1) != 0)v46 = 0;
      else
        v46 = WTF::URL::protocolIs() ^ 1 | ((a4[115] & 8) >> 3);
      if (!v44)
        goto LABEL_52;
      do
      {
        v47 = __ldaxr(v44);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v44));
      if (!v48)
      {
        atomic_store(1u, v44);
        v78 = (WTF::StringImpl *)*((_QWORD *)v44 + 6);
        *((_QWORD *)v44 + 6) = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
            WTF::StringImpl::destroy(v78, v17);
          else
            *(_DWORD *)v78 -= 2;
        }
        v79 = (WTF::StringImpl *)*((_QWORD *)v44 + 5);
        *((_QWORD *)v44 + 5) = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2)
            WTF::StringImpl::destroy(v79, v17);
          else
            *(_DWORD *)v79 -= 2;
        }
        v80 = v44[8];
        if ((_DWORD)v80 != -1)
          ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F88A0[v80])(v81, v44 + 2);
        v44[8] = -1;
        WTF::fastFree((WTF *)v44, v17);
        if ((v46 & 1) != 0)
          goto LABEL_53;
      }
      else
      {
LABEL_52:
        if (v46)
        {
LABEL_53:
          WebCore::CachedResourceLoader::printAccessDeniedMessage(a1, a3);
          return 0;
        }
      }
      v21 = a4[1];
LABEL_12:
      if (v21 == 2)
      {
        v22 = a1[9];
        if (v22)
          v22 = *(_QWORD *)(v22 + 8);
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v22 + 192), v17);
        v24 = v23;
        if (v23)
        {
          do
            v25 = __ldaxr(v23);
          while (__stlxr(v25 + 1, v23));
        }
        {
          WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
        }
        v27 = (WebCore::SecurityOrigin::canRequest((uint64_t)v23, a3, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance) & 1) == 0&& (_DWORD)a2 != 11&& a4[4] != 0;
        if (!v24)
          goto LABEL_24;
        do
        {
          v28 = __ldaxr(v24);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v24));
        if (!v29)
        {
          atomic_store(1u, v24);
          v53 = (WTF::StringImpl *)*((_QWORD *)v24 + 6);
          *((_QWORD *)v24 + 6) = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v26);
            else
              *(_DWORD *)v53 -= 2;
          }
          v54 = (WTF::StringImpl *)*((_QWORD *)v24 + 5);
          *((_QWORD *)v24 + 5) = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v26);
            else
              *(_DWORD *)v54 -= 2;
          }
          v55 = v24[8];
          if ((_DWORD)v55 != -1)
            ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F88A0[v55])(v81, v24 + 2);
          v24[8] = -1;
          WTF::fastFree((WTF *)v24, v26);
          if (v27)
            goto LABEL_25;
        }
        else
        {
LABEL_24:
          if (v27)
          {
LABEL_25:
            v30 = a1[10];
            if (v30)
            {
              v31 = *(_QWORD *)(v30 + 8);
              if (v31)
              {
                v32 = *(_QWORD *)(v31 - 40);
                if (v32)
                {
                  v33 = *(_QWORD *)(v32 + 8);
                  if (v33)
                  {
                    v34 = (unsigned int *)(v33 + 8);
                    do
                      v35 = __ldaxr(v34);
                    while (__stlxr(v35 + 1, v34));
                    v36 = *(_QWORD *)(v33 + 296);
                    if (v36)
                    {
                      *(_DWORD *)(v36 + 24) += 2;
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      WebCore::Document::addConsoleMessage((_QWORD *)v36, 8, 2, v81, 0);
                      v38 = v81[0];
                      v81[0] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, v37);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                      if (*(_DWORD *)(v36 + 24) == 2)
                      {
                        if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v36);
                      }
                      else
                      {
                        *(_DWORD *)(v36 + 24) -= 2;
                      }
                    }
                    do
                      v39 = __ldaxr(v34);
                    while (__stlxr(v39 - 1, v34));
                    if (v39 == 1)
                    {
                      atomic_store(1u, v34);
                      v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v40 = off_1E31FE290;
                      *((_QWORD *)v40 + 1) = v34;
                      v81[0] = v40;
                      WTF::ensureOnMainThread();
                      v41 = v81[0];
                      v81[0] = 0;
                      if (v41)
                        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
                    }
                  }
                }
              }
            }
            return 0;
          }
        }
      }
      v81[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v81);
      v57 = WebCore::CachedResourceLoader::allowedByContentSecurityPolicy((uint64_t)a1, (int)a2, a3, a4, 0, (WTF::URL *)v81);
      v58 = v81[0];
      v81[0] = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v56);
        else
          *(_DWORD *)v58 -= 2;
      }
      if (!v57)
        return 0;
    }
  }
  if (!(_DWORD)a2)
    return WebCore::CachedResourceLoader::checkInsecureContent((uint64_t)a1, a2, a3, a6);
  v59 = a1[10];
  if (!v59)
    return WebCore::CachedResourceLoader::checkInsecureContent((uint64_t)a1, a2, a3, a6);
  v60 = *(_QWORD *)(v59 + 8);
  if (!v60)
    return WebCore::CachedResourceLoader::checkInsecureContent((uint64_t)a1, a2, a3, a6);
  v61 = *(_QWORD *)(v60 - 40);
  if (!v61)
    return WebCore::CachedResourceLoader::checkInsecureContent((uint64_t)a1, a2, a3, a6);
  v62 = *(_QWORD *)(v61 + 8);
  if (!v62)
    return WebCore::CachedResourceLoader::checkInsecureContent((uint64_t)a1, a2, a3, a6);
  v63 = *(_QWORD *)(v62 + 24);
  if (!v63)
    return WebCore::CachedResourceLoader::checkInsecureContent((uint64_t)a1, a2, a3, a6);
  v64 = *(WebCore::Page **)(v63 + 8);
  if (!v64)
    return WebCore::CachedResourceLoader::checkInsecureContent((uint64_t)a1, a2, a3, a6);
  ++*(_DWORD *)v64;
  v65 = !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v64 + 6) + 16) + 1352))(*(_QWORD *)(*((_QWORD *)v64 + 6) + 16))
     || WTF::URL::protocolIs();
  if (*(_DWORD *)v64 == 1)
  {
    WebCore::Page::~Page(v64);
    WTF::fastFree(v67, v68);
  }
  else
  {
    --*(_DWORD *)v64;
  }
  if (v65)
    return WebCore::CachedResourceLoader::checkInsecureContent((uint64_t)a1, a2, a3, a6);
  return 0;
}

uint64_t std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedImage>,WebCore::ResourceError>::expected(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    do
      v3 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v3 + 1, (unsigned int *)a2));
    *(_QWORD *)a1 = a2;
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v8 = a1;
      ++*(_DWORD *)(v4 + 548);
      v5 = *(_QWORD *)(v4 + 488);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v4 + 464), &v8, (uint64_t)&v7);
      }
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void WebCore::CachedResourceLoader::requestTextTrack(WebCore::ResourceRequest *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  CFTypeRef v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  unsigned int *v25;
  int v26;
  __int16 v27;
  unsigned int **v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  __int128 v31;
  __int128 v32;
  _DWORD *v33;
  int v34;
  __int16 v35;
  CFTypeRef cf;
  char v37;
  unsigned int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  WebCore::CachedResourceLoader::requestResource(&v29, this, a2, (WTF::StringImpl *)0xE, 0, 0);
  if (!v38)
  {
    if (!v29)
      goto LABEL_14;
    v3 = *((_QWORD *)v29 + 1);
    if (!v3)
      goto LABEL_14;
    goto LABEL_21;
  }
  if (v38 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_21:
    v13 = *(unsigned int **)(v3 + 8);
    if (v13)
      goto LABEL_41;
    v13 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v13 = 1;
    *((_QWORD *)v13 + 1) = v3;
    v20 = *(unsigned int **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v13;
    if (!v20)
      goto LABEL_41;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v5);
    }
    v13 = *(unsigned int **)(v3 + 8);
    if (v13)
    {
LABEL_41:
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v25 = v13;
      v15 = *((_QWORD *)v13 + 1);
      if (!v15
        || (v28 = &v25, ++*(_DWORD *)(v15 + 548), (v16 = *(_QWORD *)(v15 + 488)) == 0)
        || !*(_QWORD *)(v16 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v15 + 464), (uint64_t *)&v28, (uint64_t)&v26), (v13 = v25) != 0))
      {
        do
          v17 = __ldaxr(v13);
        while (__stlxr(v17 + 1, v13));
        *(_QWORD *)a3 = v13;
        v18 = *((_QWORD *)v13 + 1);
        if (v18)
        {
          v28 = (unsigned int **)a3;
          ++*(_DWORD *)(v18 + 548);
          v19 = *(_QWORD *)(v18 + 488);
          if (v19)
          {
            if (*(_QWORD *)(v19 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v18 + 464), (uint64_t *)&v28, (uint64_t)&v26);
          }
        }
        goto LABEL_16;
      }
LABEL_15:
      *(_QWORD *)a3 = 0;
LABEL_16:
      *(_DWORD *)(a3 + 80) = 0;
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v25, v5);
      goto LABEL_17;
    }
LABEL_14:
    v25 = 0;
    goto LABEL_15;
  }
  v6 = v29;
  if (v29)
    *(_DWORD *)v29 += 2;
  v7 = v30;
  if (v30)
    *v30 += 2;
  v8 = v31;
  v9 = v32;
  v10 = v33;
  if (v33)
    *v33 += 2;
  v26 = v34;
  v27 = v35;
  v11 = cf;
  if (cf)
  {
    v23 = v9;
    v24 = v8;
    CFRetain(cf);
    v9 = v23;
    v8 = v24;
  }
  v12 = v37;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  *(_OWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 48) = v10;
  *(_DWORD *)(a3 + 56) = v26;
  *(_WORD *)(a3 + 60) = v27;
  *(_QWORD *)(a3 + 64) = v11;
  *(_BYTE *)(a3 + 72) = v12;
  *(_DWORD *)(a3 + 80) = 1;
LABEL_17:
  if (v38 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
     + v38))((int)&v26, (WebCore::CachedResourceHandleBase *)&v29);
}

void WebCore::CachedResourceLoader::requestUserCSSStyleSheet(WebCore::CachedResourceRequest *this@<X2>, WTF::StringImpl *Ref@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  WebCore::CachedResourceLoader *v6;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  const WTF::StringImpl *v11;
  WebCore::MemoryCache *v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  int v17;
  __int128 *v18;
  WTF::StringImpl *v19;
  __int128 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::CachedResource *v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  WTF::StringImpl *v55;
  __int128 v56;
  __int128 v57;
  unsigned int **v58;

  v6 = Ref;
  if (!*((_BYTE *)this + 208))
    *((_BYTE *)this + 208) = 16;
  v8 = *((_QWORD *)Ref + 9);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      *(_DWORD *)(v9 + 24) += 2;
      Ref = WebCore::CachedResourceRequest::setDomainForCachePartition(this, (WebCore::Document *)v9);
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          Ref = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
  }
  v10 = (WTF *)WebCore::MemoryCache::singleton(Ref);
  v12 = v10;
  if ((*((_BYTE *)this + 323) & 4) != 0)
  {
LABEL_13:
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    v18 = (__int128 *)((char *)this + 8);
    v17 = *((_DWORD *)this + 2);
    v19 = *(WTF::StringImpl **)this;
    if ((v17 & 1) != 0)
    {
      if (!v19)
      {
LABEL_19:
        v55 = v19;
        v20 = *(_OWORD *)((char *)this + 24);
        v56 = *v18;
        v57 = v20;
        goto LABEL_20;
      }
      if (*((_DWORD *)v19 + 1) > *((_DWORD *)this + 9) && (v17 & 2) != 0)
      {
        *(_DWORD *)v19 += 2;
        v55 = v19;
        v38 = *(_OWORD *)((char *)this + 24);
        v56 = *v18;
        v57 = v38;
        WTF::URL::removeFragmentIdentifier((WTF::URL *)&v55);
LABEL_20:
        if ((*((_BYTE *)this + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(this);
          *((_BYTE *)this + 184) |= 1u;
        }
        if ((WTF::equal(v55, *(const WTF::StringImpl **)this, v11) & 1) == 0)
        {
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          v22 = v55;
          if (v55)
            *(_DWORD *)v55 += 2;
          v23 = *(WTF::StringImpl **)this;
          *(_QWORD *)this = v22;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v21);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = v57;
          *v18 = v56;
          *(_OWORD *)((char *)this + 24) = v24;
          *((_BYTE *)this + 148) &= ~0x20u;
          *((_BYTE *)this + 184) &= ~2u;
        }
        v25 = v55;
        v55 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v21);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = WTF::fastMalloc((WTF *)0x2B0);
        v27 = *(_QWORD *)(a3 + 1008);
        v28 = *(_DWORD **)(a3 + 888);
        ++v28[2];
        v29 = *(_QWORD *)(WebCore::CachedCSSStyleSheet::CachedCSSStyleSheet(v26, (uint64_t)this, v27, (uint64_t)v28) + 8);
        if (v29)
          goto LABEL_96;
        v29 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v29 = 1;
        *(_QWORD *)(v29 + 8) = v26;
        v35 = *(unsigned int **)(v26 + 8);
        *(_QWORD *)(v26 + 8) = v29;
        if (!v35)
          goto LABEL_96;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v35);
          WTF::fastFree((WTF *)v35, v34);
        }
        v29 = *(_QWORD *)(v26 + 8);
        if (v29)
        {
LABEL_96:
          do
            v30 = __ldaxr((unsigned int *)v29);
          while (__stlxr(v30 + 1, (unsigned int *)v29));
          *(_QWORD *)a4 = v29;
          v31 = *(_QWORD *)(v29 + 8);
          if (v31)
          {
            v58 = (unsigned int **)a4;
            ++*(_DWORD *)(v31 + 548);
            v32 = *(_QWORD *)(v31 + 488);
            if (v32)
            {
              if (*(_QWORD *)(v32 + 8))
                WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v31 + 464), (uint64_t *)&v58, (uint64_t)&v55);
            }
          }
        }
        else
        {
          *(_QWORD *)a4 = 0;
        }
        if (v28[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 120))(v28);
        else
          --v28[2];
        if (*(_QWORD *)a4)
        {
          v33 = *(WebCore::CachedResource **)(*(_QWORD *)a4 + 8);
          if ((*((_BYTE *)v33 + 131) & 4) != 0)
          {
LABEL_46:
            WebCore::CachedResource::load(v33, v6);
            return;
          }
          WebCore::MemoryCache::add(v12, v33);
          if (*(_QWORD *)a4)
          {
            v33 = *(WebCore::CachedResource **)(*(_QWORD *)a4 + 8);
            goto LABEL_46;
          }
        }
        v33 = 0;
        goto LABEL_46;
      }
    }
    else if (!v19)
    {
      goto LABEL_19;
    }
    *(_DWORD *)v19 += 2;
    goto LABEL_19;
  }
  v13 = *(_QWORD *)(a3 + 1008);
  if ((WTF::isMainThread(v10) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F4F128);
  }
  v14 = (uint64_t *)WebCore::MemoryCache::sessionResourceMap(v12, v13);
  if (!v14)
    goto LABEL_11;
  v16 = WebCore::MemoryCache::resourceForRequestImpl((int)v14, this, v14);
  if (!v16)
    goto LABEL_11;
  v39 = v16;
  v40 = *(_QWORD *)(v16 + 8);
  if (!v40)
  {
    v40 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v40 = 1;
    *(_QWORD *)(v40 + 8) = v39;
    v48 = *(unsigned int **)(v39 + 8);
    *(_QWORD *)(v39 + 8) = v40;
    if (v48)
    {
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, v48);
        WTF::fastFree((WTF *)v48, v15);
      }
      v40 = *(_QWORD *)(v39 + 8);
      if (!v40)
      {
LABEL_11:
        v54 = 0;
LABEL_12:
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v54, v15);
        goto LABEL_13;
      }
    }
  }
  do
    v41 = __ldaxr((unsigned int *)v40);
  while (__stlxr(v41 + 1, (unsigned int *)v40));
  v54 = (unsigned int *)v40;
  v42 = *(_QWORD *)(v40 + 8);
  if (!v42)
    goto LABEL_12;
  v58 = &v54;
  ++*(_DWORD *)(v42 + 548);
  v43 = *(_QWORD *)(v42 + 488);
  if (v43)
  {
    if (*(_QWORD *)(v43 + 8))
    {
      WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v42 + 464), (uint64_t *)&v58, (uint64_t)&v55);
      if (!v54)
        goto LABEL_12;
      v42 = *((_QWORD *)v54 + 1);
      if (!v42)
        goto LABEL_12;
    }
  }
  if ((*(_BYTE *)(v42 + 556) & 0x1F) != 2)
  {
    WebCore::MemoryCache::remove(v12, (WebCore::CachedResource *)v42);
    goto LABEL_12;
  }
  v44 = *(_QWORD *)(v42 + 8);
  if (v44)
    goto LABEL_97;
  v44 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v44 = 1;
  *(_QWORD *)(v44 + 8) = v42;
  v51 = *(unsigned int **)(v42 + 8);
  *(_QWORD *)(v42 + 8) = v44;
  if (!v51)
    goto LABEL_97;
  do
  {
    v52 = __ldaxr(v51);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, v51));
  if (!v53)
  {
    atomic_store(1u, v51);
    WTF::fastFree((WTF *)v51, v15);
  }
  v44 = *(_QWORD *)(v42 + 8);
  if (v44)
  {
LABEL_97:
    do
      v45 = __ldaxr((unsigned int *)v44);
    while (__stlxr(v45 + 1, (unsigned int *)v44));
    *(_QWORD *)a4 = v44;
    v46 = *(_QWORD *)(v44 + 8);
    if (v46)
    {
      v58 = (unsigned int **)a4;
      ++*(_DWORD *)(v46 + 548);
      v47 = *(_QWORD *)(v46 + 488);
      if (v47)
      {
        if (*(_QWORD *)(v47 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v46 + 464), (uint64_t *)&v58, (uint64_t)&v55);
      }
    }
  }
  else
  {
    *(_QWORD *)a4 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v54, v15);
}

void WebCore::CachedResourceLoader::requestXSLStyleSheet(WebCore::ResourceRequest *this@<X1>, int a2@<W0>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  _DWORD *v7;
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  CFTypeRef v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  unsigned int *v25;
  int v26;
  __int16 v27;
  unsigned int **v28;
  uint64_t v29;
  _DWORD *v30;
  __int128 v31;
  __int128 v32;
  _DWORD *v33;
  int v34;
  __int16 v35;
  CFTypeRef cf;
  char v37;
  unsigned int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  WebCore::CachedResourceLoader::requestResource(&v29, a2, 12, this);
  if (!v38)
  {
    if (!v29)
      goto LABEL_14;
    v3 = *(_QWORD *)(v29 + 8);
    if (!v3)
      goto LABEL_14;
    goto LABEL_21;
  }
  if (v38 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_21:
    v13 = *(unsigned int **)(v3 + 8);
    if (v13)
      goto LABEL_41;
    v13 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v13 = 1;
    *((_QWORD *)v13 + 1) = v3;
    v20 = *(unsigned int **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v13;
    if (!v20)
      goto LABEL_41;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v5);
    }
    v13 = *(unsigned int **)(v3 + 8);
    if (v13)
    {
LABEL_41:
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v25 = v13;
      v15 = *((_QWORD *)v13 + 1);
      if (!v15
        || (v28 = &v25, ++*(_DWORD *)(v15 + 548), (v16 = *(_QWORD *)(v15 + 488)) == 0)
        || !*(_QWORD *)(v16 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v15 + 464), (uint64_t *)&v28, (uint64_t)&v26), (v13 = v25) != 0))
      {
        do
          v17 = __ldaxr(v13);
        while (__stlxr(v17 + 1, v13));
        *(_QWORD *)a3 = v13;
        v18 = *((_QWORD *)v13 + 1);
        if (v18)
        {
          v28 = (unsigned int **)a3;
          ++*(_DWORD *)(v18 + 548);
          v19 = *(_QWORD *)(v18 + 488);
          if (v19)
          {
            if (*(_QWORD *)(v19 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v18 + 464), (uint64_t *)&v28, (uint64_t)&v26);
          }
        }
        goto LABEL_16;
      }
LABEL_15:
      *(_QWORD *)a3 = 0;
LABEL_16:
      *(_DWORD *)(a3 + 80) = 0;
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v25, v5);
      goto LABEL_17;
    }
LABEL_14:
    v25 = 0;
    goto LABEL_15;
  }
  v6 = v29;
  if (v29)
    *(_DWORD *)v29 += 2;
  v7 = v30;
  if (v30)
    *v30 += 2;
  v8 = v31;
  v9 = v32;
  v10 = v33;
  if (v33)
    *v33 += 2;
  v26 = v34;
  v27 = v35;
  v11 = cf;
  if (cf)
  {
    v23 = v9;
    v24 = v8;
    CFRetain(cf);
    v9 = v23;
    v8 = v24;
  }
  v12 = v37;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  *(_OWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 48) = v10;
  *(_DWORD *)(a3 + 56) = v26;
  *(_WORD *)(a3 + 60) = v27;
  *(_QWORD *)(a3 + 64) = v11;
  *(_BYTE *)(a3 + 72) = v12;
  *(_DWORD *)(a3 + 80) = 1;
LABEL_17:
  if (v38 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
     + v38))((int)&v26, (WebCore::CachedResourceHandleBase *)&v29);
}

void WebCore::CachedResourceLoader::requestSVGDocument(WebCore::ResourceRequest *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  char v4;
  WTF::StringImpl *v5[10];
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  WebCore::CachedResourceLoader::requestResource(v5, this, a2, (WTF::StringImpl *)0x10, 0, 0);
  WebCore::castCachedResourceTo<WebCore::CachedSVGDocument,WebCore::CachedResource>(a3, v5);
  if (v6 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
     + v6))((int)&v4, (WebCore::CachedResourceHandleBase *)v5);
}

void WebCore::castCachedResourceTo<WebCore::CachedSVGDocument,WebCore::CachedResource>(uint64_t a1, _DWORD *a2)
{
  int v3;
  WebCore::CachedResource *v4;
  void *v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  WebCore::ResourceRequest *v8;
  uint64_t v9;
  unsigned int *v10[10];

  v3 = a2[20];
  if (v3)
  {
    if (v3 == 1)
    {
      makeUnexpected<WebCore::ResourceError &>((uint64_t)v10, (uint64_t)a2);
      std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected(a1, (uint64_t *)v10);
      WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v10, v6);
    }
    else
    {
      v7 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::CachedResourceLoader::requestIcon(v8, v7, v9);
    }
  }
  else
  {
    if (*(_QWORD *)a2)
      v4 = *(WebCore::CachedResource **)(*(_QWORD *)a2 + 8);
    else
      v4 = 0;
    WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)v10, v4);
    std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedImage>,WebCore::ResourceError>::expected(a1, (uint64_t)v10[0]);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v10, v5);
  }
}

void WebCore::CachedResourceLoader::requestIcon(WebCore::ResourceRequest *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  char v4;
  WTF::StringImpl *v5[10];
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  WebCore::CachedResourceLoader::requestResource(v5, this, a2, (WTF::StringImpl *)9, 0, 0);
  WebCore::castCachedResourceTo<WebCore::CachedRawResource,WebCore::CachedResource>(a3, v5);
  if (v6 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
     + v6))((int)&v4, (WebCore::CachedResourceHandleBase *)v5);
}

void WebCore::CachedResourceLoader::requestApplicationManifest(WebCore::ResourceRequest *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  CFTypeRef v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  unsigned int *v25;
  int v26;
  __int16 v27;
  unsigned int **v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  __int128 v31;
  __int128 v32;
  _DWORD *v33;
  int v34;
  __int16 v35;
  CFTypeRef cf;
  char v37;
  unsigned int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  WebCore::CachedResourceLoader::requestResource(&v29, this, a2, (WTF::StringImpl *)0xF, 0, 0);
  if (!v38)
  {
    if (!v29)
      goto LABEL_14;
    v3 = *((_QWORD *)v29 + 1);
    if (!v3)
      goto LABEL_14;
    goto LABEL_21;
  }
  if (v38 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_21:
    v13 = *(unsigned int **)(v3 + 8);
    if (v13)
      goto LABEL_41;
    v13 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v13 = 1;
    *((_QWORD *)v13 + 1) = v3;
    v20 = *(unsigned int **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v13;
    if (!v20)
      goto LABEL_41;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v5);
    }
    v13 = *(unsigned int **)(v3 + 8);
    if (v13)
    {
LABEL_41:
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v25 = v13;
      v15 = *((_QWORD *)v13 + 1);
      if (!v15
        || (v28 = &v25, ++*(_DWORD *)(v15 + 548), (v16 = *(_QWORD *)(v15 + 488)) == 0)
        || !*(_QWORD *)(v16 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v15 + 464), (uint64_t *)&v28, (uint64_t)&v26), (v13 = v25) != 0))
      {
        do
          v17 = __ldaxr(v13);
        while (__stlxr(v17 + 1, v13));
        *(_QWORD *)a3 = v13;
        v18 = *((_QWORD *)v13 + 1);
        if (v18)
        {
          v28 = (unsigned int **)a3;
          ++*(_DWORD *)(v18 + 548);
          v19 = *(_QWORD *)(v18 + 488);
          if (v19)
          {
            if (*(_QWORD *)(v19 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v18 + 464), (uint64_t *)&v28, (uint64_t)&v26);
          }
        }
        goto LABEL_16;
      }
LABEL_15:
      *(_QWORD *)a3 = 0;
LABEL_16:
      *(_DWORD *)(a3 + 80) = 0;
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v25, v5);
      goto LABEL_17;
    }
LABEL_14:
    v25 = 0;
    goto LABEL_15;
  }
  v6 = v29;
  if (v29)
    *(_DWORD *)v29 += 2;
  v7 = v30;
  if (v30)
    *v30 += 2;
  v8 = v31;
  v9 = v32;
  v10 = v33;
  if (v33)
    *v33 += 2;
  v26 = v34;
  v27 = v35;
  v11 = cf;
  if (cf)
  {
    v23 = v9;
    v24 = v8;
    CFRetain(cf);
    v9 = v23;
    v8 = v24;
  }
  v12 = v37;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  *(_OWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 48) = v10;
  *(_DWORD *)(a3 + 56) = v26;
  *(_WORD *)(a3 + 60) = v27;
  *(_QWORD *)(a3 + 64) = v11;
  *(_BYTE *)(a3 + 72) = v12;
  *(_DWORD *)(a3 + 80) = 1;
LABEL_17:
  if (v38 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
     + v38))((int)&v26, (WebCore::CachedResourceHandleBase *)&v29);
}

BOOL WebCore::CachedResourceLoader::checkInsecureContent(uint64_t a1, WTF::StringImpl *a2, WebCore::ThreadableBlobRegistry *a3, const WTF::URL *a4)
{
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  char shouldBlockRequestForDisplayableContent;
  unsigned int v18;
  unsigned int v19;
  uint64_t CanRunInsecureContent;
  uint64_t v21;
  WebCore::Node *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int isAttachment;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  char canRequest;
  unsigned int v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WebCore::Node *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;

  v6 = a2;
  if ((_DWORD)a2 == 2)
  {
    v21 = *(_QWORD *)(a1 + 72);
    if (!v21)
      goto LABEL_3;
    v22 = *(WebCore::Node **)(v21 + 8);
    if (!v22)
      goto LABEL_3;
    *((_DWORD *)v22 + 6) += 2;
LABEL_24:
    if ((*(_QWORD *)(*((_QWORD *)v22 + 85) + 664) & 0x200000000000000) != 0 && !*((_BYTE *)v22 + 3399))
    {
      v23 = *((_QWORD *)v22 + 66);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
        {
          v48 = *(_QWORD *)(v24 + 280);
          v49 = 88;
          if (!*(_BYTE *)(v48 + 80))
            v49 = 96;
          v50 = *(_DWORD **)(v48 + v49);
          if (v50)
          {
            v66 = v22;
            ++v50[6];
            isAttachment = WebCore::ResourceResponseBase::isAttachment((WebCore::ResourceResponseBase *)(v50 + 318));
            if (v50[6] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 24))(v50);
              v22 = v66;
              if (isAttachment)
              {
LABEL_68:
                WebCore::SecurityContext::securityOrigin((WebCore::Node *)((char *)v22 + 192), a2);
                v53 = v52;
                if (v52)
                {
                  do
                    v54 = __ldaxr(v52);
                  while (__stlxr(v54 + 1, v52));
                }
                {
                  WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
                }
                canRequest = WebCore::SecurityOrigin::canRequest((uint64_t)v52, a3, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
                if (v53)
                {
                  do
                  {
                    v56 = __ldaxr(v53);
                    v57 = v56 - 1;
                  }
                  while (__stlxr(v57, v53));
                  if (!v57)
                  {
                    atomic_store(1u, v53);
                    v63 = (WTF::StringImpl *)*((_QWORD *)v53 + 6);
                    *((_QWORD *)v53 + 6) = 0;
                    if (v63)
                    {
                      if (*(_DWORD *)v63 == 2)
                        WTF::StringImpl::destroy(v63, a2);
                      else
                        *(_DWORD *)v63 -= 2;
                    }
                    v64 = (WTF::StringImpl *)*((_QWORD *)v53 + 5);
                    *((_QWORD *)v53 + 5) = 0;
                    if (v64)
                    {
                      if (*(_DWORD *)v64 == 2)
                        WTF::StringImpl::destroy(v64, a2);
                      else
                        *(_DWORD *)v64 -= 2;
                    }
                    v65 = v53[8];
                    if ((_DWORD)v65 != -1)
                      ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F88A0[v65])(&v69, v53 + 2);
                    v53[8] = -1;
                    WTF::fastFree((WTF *)v53, a2);
                  }
                }
                v22 = v66;
                if ((canRequest & 1) == 0)
                {
                  WTF::URL::stringCenterEllipsizedToLength(a3);
                  WTF::URL::stringCenterEllipsizedToLength((WebCore::Node *)((char *)v66 + 736));
                  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Unsafe attempt to load URL ", 28, (uint64_t *)&v68, (uint64_t)" from document with Content-Disposition: attachment at URL ", 60, (uint64_t *)&v67, 46, &v69);
                  v59 = v67;
                  v67 = 0;
                  if (v59)
                  {
                    if (*(_DWORD *)v59 == 2)
                      WTF::StringImpl::destroy(v59, v58);
                    else
                      *(_DWORD *)v59 -= 2;
                  }
                  v60 = v68;
                  v68 = 0;
                  if (v60)
                  {
                    if (*(_DWORD *)v60 == 2)
                      WTF::StringImpl::destroy(v60, v58);
                    else
                      *(_DWORD *)v60 -= 2;
                  }
                  WebCore::Document::addConsoleMessage(v66, 8, 2, &v69, 0);
                  v62 = v69;
                  v69 = 0;
                  if (v62)
                  {
                    if (*(_DWORD *)v62 == 2)
                      WTF::StringImpl::destroy(v62, v61);
                    else
                      *(_DWORD *)v62 -= 2;
                  }
                  if (*((_DWORD *)v66 + 6) != 2)
                  {
                    CanRunInsecureContent = 0;
                    *((_DWORD *)v66 + 6) -= 2;
                    return CanRunInsecureContent;
                  }
                  if ((*((_WORD *)v66 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v66);
                  return 0;
                }
              }
            }
            else
            {
              --v50[6];
              v22 = v66;
              if ((isAttachment & 1) != 0)
                goto LABEL_68;
            }
          }
        }
      }
    }
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v22);
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
    goto LABEL_3;
  }
  if (!(_DWORD)a2)
  {
    v26 = *(_QWORD *)(a1 + 80);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 8);
      if (v27)
      {
        v28 = *(_QWORD *)(v27 - 40);
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (v29)
          {
            v30 = *(_QWORD *)(v29 + 120);
            if (v30)
            {
              v31 = *(_QWORD *)(v30 + 8);
              if (v31)
              {
                v32 = *(_DWORD *)(v31 + 24) + 2;
                *(_DWORD *)(v31 + 24) = v32;
                v33 = *(WebCore::Node **)(*(_QWORD *)(v31 + 40) + 8);
                v34 = v33;
                if (v33)
                {
                  *((_DWORD *)v33 + 6) += 2;
                  v32 = *(_DWORD *)(v31 + 24);
                }
                v35 = v32 - 2;
                if (v35)
                {
                  *(_DWORD *)(v31 + 24) = v35;
                }
                else if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v31);
                }
                v22 = v34;
                if (v34)
                  goto LABEL_24;
              }
            }
          }
        }
      }
    }
  }
LABEL_3:
  v8 = *(_QWORD *)(a1 + 72);
  if (!v8
    || (v9 = *(_QWORD *)(v8 + 8)) == 0
    || (*(_QWORD *)(*(_QWORD *)(v9 + 680) + 696) & 0x4000000000000000) != 0
    || v6 > 0x10
    || ((1 << v6) & 0x1100C) == 0
    || (v38 = *(_QWORD *)(a1 + 80)) == 0
    || (v39 = *(_QWORD *)(v38 + 8)) == 0
    || (v40 = *(_QWORD *)(v39 - 40)) == 0
    || (v41 = *(_QWORD *)(v40 + 8)) == 0)
  {
    if (v6 - 1 >= 0xC && v6 != 16 && v6 != 14)
      return 1;
    v10 = *(_QWORD *)(a1 + 80);
    if (!v10)
      return 1;
    v11 = *(_QWORD *)(v10 + 8);
    if (!v11)
      return 1;
    v12 = *(_QWORD *)(v11 - 40);
    if (!v12)
      return 1;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      return 1;
    v14 = (unsigned int *)(v13 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    if ((v6 - 1) > 0xFu)
      v16 = 0;
    else
      v16 = dword_1969F2CE4[(char)(v6 - 1)];
    shouldBlockRequestForDisplayableContent = WebCore::MixedContentChecker::shouldBlockRequestForDisplayableContent(v13, a3, v16, a4);
    do
    {
      v18 = __ldaxr(v14);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v14));
    if (!v19)
    {
      atomic_store(1u, v14);
      v36 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v36 = off_1E31FE290;
      *((_QWORD *)v36 + 1) = v14;
      v69 = v36;
      WTF::ensureOnMainThread();
      v37 = v69;
      v69 = 0;
      if (v37)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v37 + 8))(v37);
    }
    return (shouldBlockRequestForDisplayableContent & 1) == 0;
  }
  v42 = (unsigned int *)(v41 + 8);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 + 1, v42));
  v44 = *(_QWORD *)(a1 + 72);
  if (v44)
    v44 = *(_QWORD *)(v44 + 8);
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v44 + 192), a2);
  if (v45)
  {
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v69 = (WTF::StringImpl *)v45;
  CanRunInsecureContent = WebCore::MixedContentChecker::frameAndAncestorsCanRunInsecureContent(v41, (WebCore::Document *)v45, a3, 1);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v69, v47);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v41 + 8));
  return CanRunInsecureContent;
}

_QWORD *WebCore::CachedResourceLoader::printAccessDeniedMessage(_QWORD *this, const WTF::URL *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  _QWORD *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];

  if (!*(_QWORD *)a2)
    return this;
  v2 = this;
  v3 = this[10];
  if (!v3)
    return this;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return this;
  v5 = *(_QWORD *)(v4 - 40);
  if (!v5)
    return this;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return this;
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v38 = 0;
  v9 = this[9];
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 736))
      {
        WTF::URL::stringCenterEllipsizedToLength(a2);
        v12 = v2[9];
        if (v12)
          v12 = *(_QWORD *)(v12 + 8);
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), v11);
        v14 = v13;
        if (v13)
        {
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 + 1, v13));
        }
        v16 = v13[8];
        if ((_DWORD)v16 == 1)
          goto LABEL_65;
        if ((_DWORD)v16 == -1)
        {
          this = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_67;
        }
        v41[0] = v40;
        v17 = (_QWORD *)((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v16])(v41, v13 + 2);
        if (MEMORY[0x19AEA53F4](*v17, "file", 4) && *((_BYTE *)v14 + 59))
LABEL_65:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
        else
          WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v14 + 2), &v34);
        v41[0] = "Unsafe attempt to load URL ";
        v41[1] = 28;
        v40[0] = " from origin ";
        v40[1] = 14;
        v39[0] = ". Domains, protocols and ports must match.\n";
        v39[1] = 44;
        this = (_QWORD *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)v41, (uint64_t *)&v35, (uint64_t)v40, (uint64_t *)&v34, (uint64_t)v39, &v36);
        v19 = v36;
        if (v36)
        {
          v36 = 0;
          v20 = v38;
          v38 = v19;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
            {
              WTF::StringImpl::destroy(v20, v18);
              v29 = v36;
              v36 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v18);
                else
                  *(_DWORD *)v29 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v20 -= 2;
              v36 = 0;
            }
          }
          v21 = v34;
          v34 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v18);
            else
              *(_DWORD *)v21 -= 2;
          }
          do
          {
            v22 = __ldaxr(v14);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v14));
          if (!v23)
          {
            atomic_store(1u, v14);
            v31 = (WTF::StringImpl *)*((_QWORD *)v14 + 6);
            *((_QWORD *)v14 + 6) = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v18);
              else
                *(_DWORD *)v31 -= 2;
            }
            v32 = (WTF::StringImpl *)*((_QWORD *)v14 + 5);
            *((_QWORD *)v14 + 5) = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v18);
              else
                *(_DWORD *)v32 -= 2;
            }
            v33 = v14[8];
            if ((_DWORD)v33 != -1)
              ((void (*)(_QWORD *, unsigned int *))off_1E33F88A0[v33])(v41, v14 + 2);
            v14[8] = -1;
            WTF::fastFree((WTF *)v14, v18);
          }
          v24 = v35;
          v35 = 0;
          if (!v24)
            goto LABEL_33;
          goto LABEL_31;
        }
LABEL_67:
        __break(0xC471u);
        return this;
      }
    }
  }
  WTF::URL::stringCenterEllipsizedToLength(a2);
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Unsafe attempt to load URL ", 28, (uint64_t *)&v37, 46, v41);
  v25 = (WTF::StringImpl *)v41[0];
  v41[0] = 0;
  v24 = v37;
  v37 = 0;
  v38 = v25;
  if (v24)
  {
LABEL_31:
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v18);
    else
      *(_DWORD *)v24 -= 2;
  }
LABEL_33:
  v26 = *(_QWORD *)(v6 + 296);
  if (v26)
  {
    *(_DWORD *)(v26 + 24) += 2;
    WebCore::Document::addConsoleMessage((_QWORD *)v26, 8, 2, &v38, 0);
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26);
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
  }
  this = v38;
  v38 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v18);
    else
      *(_DWORD *)this -= 2;
  }
  do
  {
    v27 = __ldaxr(v7);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v7));
  if (!v28)
  {
    atomic_store(1u, v7);
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v30 = off_1E31FE290;
    v30[1] = v7;
    v41[0] = v30;
    WTF::ensureOnMainThread();
    this = (_QWORD *)v41[0];
    v41[0] = 0;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t WebCore::computeFetchMetadataSiteInternal(WebCore::SecurityOrigin *this, WTF::StringImpl *a2, int a3, WTF *a4, uint64_t a5, unsigned int a6, char a7)
{
  int v9;
  WTF *v11;
  unsigned int v12;
  unsigned int *v13;
  WTF::StringImpl *v14;
  WebCore::SecurityOrigin *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WebCore::SecurityOrigin *v27;
  char v28;

  v9 = (int)a2;
  if (!(a3 | a2) && (a7 & 1) != 0)
    return 0;
  if (!a4)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(a5 + 296) + 192), a2);
    a4 = v11;
  }
  do
    v12 = __ldaxr((unsigned int *)a4);
  while (__stlxr(v12 + 1, (unsigned int *)a4));
  if (v9 || !a5)
    goto LABEL_8;
  v20 = *(_QWORD *)(a5 + 280);
  v21 = 88;
  if (!*(_BYTE *)(v20 + 80))
    v21 = 96;
  v22 = *(_QWORD *)(v20 + v21);
  if (v22 && *(_BYTE *)(v22 + 1856))
  {
    v13 = *(unsigned int **)(v22 + 1672);
    do
      v23 = __ldaxr(v13);
    while (__stlxr(v23 + 1, v13));
    if (a4)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a4, a2);
  }
  else
  {
LABEL_8:
    v13 = (unsigned int *)a4;
  }
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WebCore::SecurityOrigin::create(this, (uint64_t *)&v27);
  if (a6 >= 2)
  {
    if (a6 == 3)
    {
      v15 = v27;
      goto LABEL_43;
    }
    v15 = v27;
  }
  else
  {
    v15 = v27;
    if (WebCore::SecurityOrigin::isSameOriginAs((WebCore::SecurityOrigin *)v13, v27))
    {
      v16 = 1;
      goto LABEL_14;
    }
  }
  if (!WebCore::SecurityOrigin::isSameSiteAs((WebCore::SecurityOrigin *)v13, v15))
  {
LABEL_43:
    v16 = 3;
    goto LABEL_14;
  }
  v16 = 2;
LABEL_14:
  v27 = 0;
  if (v15)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v15);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v15));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v15);
      v24 = (WTF::StringImpl *)*((_QWORD *)v15 + 6);
      *((_QWORD *)v15 + 6) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v14);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = (WTF::StringImpl *)*((_QWORD *)v15 + 5);
      *((_QWORD *)v15 + 5) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v14);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = *((unsigned int *)v15 + 8);
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, char *))off_1E33F88A0[v26])(&v28, (char *)v15 + 8);
      *((_DWORD *)v15 + 8) = -1;
      WTF::fastFree(v15, v14);
    }
  }
  if (v13)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v13, v14);
  return v16;
}

uint64_t WebCore::CachedResourceLoader::computeFetchMetadataSiteAfterRedirection(WebCore::SecurityOrigin *a1, WTF::StringImpl *a2, int a3, WTF *a4, unsigned int a5, char a6)
{
  return WebCore::computeFetchMetadataSiteInternal(a1, a2, a3, a4, 0, a5, a6);
}

uint64_t WebCore::CachedResourceLoader::updateRequestAfterRedirection(_QWORD *a1, WTF::StringImpl *a2, WebCore::LocalFrame *a3, unsigned __int8 *a4, unsigned int a5, WebCore::SecurityOrigin *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore **v17;
  _BOOL4 v19;
  int shouldUpgradeInsecureContent;
  uint64_t v21;
  void *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  WebCore::Document *v30;
  WebCore::Quirks *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  char canDisplay;
  WTF::StringImpl *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  char canRequest;
  WTF::StringImpl *v47;
  unsigned int v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  NSObject *v51;
  const char *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  const WTF::String *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  WTF *v71;
  unsigned int v72;
  unsigned int v73;
  WTF *v74;
  unsigned int v75;
  unsigned int v76;
  _QWORD *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WebCore **v86;
  _BOOL4 v87;
  _QWORD *v88;
  uint64_t v89;
  char v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  NSObject *v94;
  char v95;
  WTF *v96;
  WTF *v97;
  uint8_t buf[24];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v6 = a1[10];
  if (!v6)
    return 1;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return 1;
  v14 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 72);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      *(_DWORD *)(v15 + 24) += 2;
      v16 = *(_QWORD *)(v15 + 528);
      if (v16 && (v17 = *(WebCore ***)(v16 + 8)) != 0)
      {
        v19 = (_DWORD)a2 == 1 || (a2 & 0xFE) == 6;
        if ((*((_BYTE *)a3 + 184) & 1) == 0)
        {
          v86 = *(WebCore ***)(v16 + 8);
          v87 = v19;
          WebCore::ResourceRequest::doUpdateResourceRequest(a3);
          v19 = v87;
          v17 = v86;
          *((_BYTE *)a3 + 184) |= 1u;
        }
        shouldUpgradeInsecureContent = WebCore::MixedContentChecker::shouldUpgradeInsecureContent(v17, v19, a3, a4[1], *a4, (unsigned __int16)*(_DWORD *)(a4 + 114) >> 13);
      }
      else
      {
        shouldUpgradeInsecureContent = 0;
      }
      WebCore::upgradeInsecureResourceRequestIfNeeded(a3, v15, shouldUpgradeInsecureContent);
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v22);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
  }
  if ((*((_BYTE *)a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a3);
    *((_BYTE *)a3 + 184) |= 1u;
  }
  WebCore::SecurityOrigin::create(a3, (uint64_t *)&v97);
  WebCore::SecurityOrigin::create(a6, (uint64_t *)&v96);
  if (!WebCore::SecurityOrigin::isSameSiteAs(v97, v96))
    WebCore::ResourceRequestBase::setIsSameSite(a3, 0);
  v24 = *(_QWORD *)(a1[10] + 8);
  if (v24)
    v25 = v24 - 56;
  else
    v25 = 0;
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    v27 = 0;
    goto LABEL_72;
  }
  v27 = *(_QWORD *)(v26 + 8);
  if (!v27)
  {
LABEL_72:
    v32 = 1;
    goto LABEL_39;
  }
  v28 = (unsigned int *)(v27 + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  v30 = *(WebCore::Document **)(v27 + 296);
  if (!v30)
    goto LABEL_35;
  v31 = (WebCore::Quirks *)*((_QWORD *)v30 + 86);
  if (!v31)
    v31 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v30);
  if ((WebCore::Quirks::shouldDisableFetchMetadata(v31) & 1) == 0)
  {
LABEL_35:
    if (WebCore::SecurityOrigin::isPotentiallyTrustworthy(v97))
    {
      WebCore::updateRequestFetchMetadataHeaders(a3, a4, a5);
    }
    else
    {
      WebCore::ResourceRequestBase::removeHTTPHeaderField(a3, (WTF::StringImpl *)0x41);
      WebCore::ResourceRequestBase::removeHTTPHeaderField(a3, (WTF::StringImpl *)0x42);
      WebCore::ResourceRequestBase::removeHTTPHeaderField(a3, (WTF::StringImpl *)0x43);
    }
  }
  v32 = 0;
LABEL_39:
  if ((*((_BYTE *)a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a3);
    *((_BYTE *)a3 + 184) |= 1u;
  }
  v33 = a1[9];
  if (!v33)
    goto LABEL_63;
  v34 = *(_QWORD *)(v33 + 8);
  if (!v34)
    goto LABEL_63;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v34 + 192), v23);
  v36 = v35;
  if (v35)
  {
    do
      v37 = __ldaxr(v35);
    while (__stlxr(v37 + 1, v35));
  }
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  canDisplay = WebCore::SecurityOrigin::canDisplay((uint64_t)v35, a3, (uint64_t (***)(_QWORD, WebCore::SecurityOrigin *))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
  if (!v36)
    goto LABEL_50;
  do
  {
    v40 = __ldaxr(v36);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v36));
  if (v41)
  {
LABEL_50:
    if ((canDisplay & 1) != 0)
      goto LABEL_51;
LABEL_82:
    v56 = a1[10];
    if (v56 && (v57 = *(_QWORD *)(v56 + 8)) != 0 && (v58 = *(_QWORD *)(v57 - 40)) != 0)
    {
      v59 = *(_QWORD *)(v58 + 8);
      if (v59)
      {
        v60 = (unsigned int *)(v59 + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 + 1, v60));
      }
    }
    else
    {
      v59 = 0;
    }
    WTF::URL::stringCenterEllipsizedToLength(a3);
    WebCore::FrameLoader::reportLocalLoadFailed(v59, (WebCore::LocalFrame *)buf, v62);
    v64 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::destroy(v64, v63);
        if (v59)
          goto LABEL_92;
        goto LABEL_95;
      }
      *(_DWORD *)v64 -= 2;
    }
    if (v59)
    {
LABEL_92:
      v65 = (unsigned int *)(v59 + 8);
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
      {
        atomic_store(1u, v65);
        v88 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v88 = off_1E31FE290;
        v88[1] = v65;
        *(_QWORD *)buf = v88;
        WTF::ensureOnMainThread();
        v89 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v89)
          (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
      }
    }
LABEL_95:
    v51 = qword_1ECE7C608;
    v21 = 0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
      goto LABEL_99;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    v52 = "%p - CachedResourceLoader::canRequestAfterRedirection: URL was not allowed by SecurityOrigin::canDisplay";
    goto LABEL_97;
  }
  v95 = canDisplay;
  atomic_store(1u, v36);
  v53 = (WTF::StringImpl *)*((_QWORD *)v36 + 6);
  *((_QWORD *)v36 + 6) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v39);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = (WTF::StringImpl *)*((_QWORD *)v36 + 5);
  *((_QWORD *)v36 + 5) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v39);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = v36[8];
  if ((_DWORD)v55 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E33F88A0[v55])(buf, v36 + 2);
  v36[8] = -1;
  WTF::fastFree((WTF *)v36, v39);
  if ((v95 & 1) == 0)
    goto LABEL_82;
LABEL_51:
  if (a4[1] != 1)
    goto LABEL_62;
  v42 = a1[9];
  if (v42)
    v42 = *(_QWORD *)(v42 + 8);
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v42 + 192), v39);
  v44 = v43;
  if (v43)
  {
    do
      v45 = __ldaxr(v43);
    while (__stlxr(v45 + 1, v43));
  }
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  canRequest = WebCore::SecurityOrigin::canRequest((uint64_t)v43, a3, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
  if (!v44)
    goto LABEL_61;
  do
  {
    v48 = __ldaxr(v44);
    v49 = v48 - 1;
  }
  while (__stlxr(v49, v44));
  if (v49)
  {
LABEL_61:
    if ((canRequest & 1) != 0)
      goto LABEL_62;
LABEL_144:
    v94 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a1;
      _os_log_impl(&dword_1940B8000, v94, OS_LOG_TYPE_DEFAULT, "%p - CachedResourceLoader::canRequestAfterRedirection: URL was not allowed by SecurityOrigin::canRequest", buf, 0xCu);
    }
    WebCore::CachedResourceLoader::printAccessDeniedMessage(a1, a3);
    goto LABEL_98;
  }
  v90 = canRequest;
  atomic_store(1u, v44);
  v91 = (WTF::StringImpl *)*((_QWORD *)v44 + 6);
  *((_QWORD *)v44 + 6) = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
      WTF::StringImpl::destroy(v91, v47);
    else
      *(_DWORD *)v91 -= 2;
  }
  v92 = (WTF::StringImpl *)*((_QWORD *)v44 + 5);
  *((_QWORD *)v44 + 5) = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
      WTF::StringImpl::destroy(v92, v47);
    else
      *(_DWORD *)v92 -= 2;
  }
  v93 = v44[8];
  if ((_DWORD)v93 != -1)
    ((void (*)(uint8_t *, unsigned int *))off_1E33F88A0[v93])(buf, v44 + 2);
  v44[8] = -1;
  WTF::fastFree((WTF *)v44, v47);
  if ((v90 & 1) == 0)
    goto LABEL_144;
LABEL_62:
  if ((WebCore::CachedResourceLoader::allowedByContentSecurityPolicy((uint64_t)a1, (int)a2, a3, a4, 1, a6) & 1) == 0)
  {
    v51 = qword_1ECE7C608;
    v21 = 0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
      goto LABEL_99;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    v52 = "%p - CachedResourceLoader::canRequestAfterRedirection: URL was not allowed by content policy";
    goto LABEL_97;
  }
LABEL_63:
  if (WebCore::CachedResourceLoader::checkInsecureContent((uint64_t)a1, a2, a3, 0))
  {
    v21 = 1;
    goto LABEL_99;
  }
  v51 = qword_1ECE7C608;
  v21 = 0;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    v52 = "%p - CachedResourceLoader::canRequestAfterRedirection: URL was not allowed because content is insecure";
LABEL_97:
    _os_log_impl(&dword_1940B8000, v51, OS_LOG_TYPE_DEFAULT, v52, buf, 0xCu);
LABEL_98:
    v21 = 0;
  }
LABEL_99:
  if ((v32 & 1) == 0)
  {
    v68 = (unsigned int *)(v27 + 8);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      v78 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v78 = off_1E31FE290;
      v78[1] = v68;
      *(_QWORD *)buf = v78;
      WTF::ensureOnMainThread();
      v79 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v79)
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
    }
  }
  v71 = v96;
  v96 = 0;
  if (v71)
  {
    do
    {
      v72 = __ldaxr((unsigned int *)v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, (unsigned int *)v71));
    if (!v73)
    {
      atomic_store(1u, (unsigned int *)v71);
      v80 = (WTF::StringImpl *)*((_QWORD *)v71 + 6);
      *((_QWORD *)v71 + 6) = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v50);
        else
          *(_DWORD *)v80 -= 2;
      }
      v81 = (WTF::StringImpl *)*((_QWORD *)v71 + 5);
      *((_QWORD *)v71 + 5) = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
          WTF::StringImpl::destroy(v81, v50);
        else
          *(_DWORD *)v81 -= 2;
      }
      v82 = *((unsigned int *)v71 + 8);
      if ((_DWORD)v82 != -1)
        ((void (*)(uint8_t *, char *))off_1E33F88A0[v82])(buf, (char *)v71 + 8);
      *((_DWORD *)v71 + 8) = -1;
      WTF::fastFree(v71, v50);
    }
  }
  v74 = v97;
  v97 = 0;
  if (v74)
  {
    do
    {
      v75 = __ldaxr((unsigned int *)v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, (unsigned int *)v74));
    if (!v76)
    {
      atomic_store(1u, (unsigned int *)v74);
      v83 = (WTF::StringImpl *)*((_QWORD *)v74 + 6);
      *((_QWORD *)v74 + 6) = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
          WTF::StringImpl::destroy(v83, v50);
        else
          *(_DWORD *)v83 -= 2;
      }
      v84 = (WTF::StringImpl *)*((_QWORD *)v74 + 5);
      *((_QWORD *)v74 + 5) = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
          WTF::StringImpl::destroy(v84, v50);
        else
          *(_DWORD *)v84 -= 2;
      }
      v85 = *((unsigned int *)v74 + 8);
      if ((_DWORD)v85 != -1)
        ((void (*)(uint8_t *, char *))off_1E33F88A0[v85])(buf, (char *)v74 + 8);
      *((_DWORD *)v74 + 8) = -1;
      WTF::fastFree(v74, v50);
    }
  }
  return v21;
}

WTF::StringImpl *WebCore::upgradeInsecureResourceRequestIfNeeded(WebCore::ResourceRequest *this, uint64_t a2, int a3)
{
  WTF::StringImpl *v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  const WTF::StringImpl *v11;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v6 = *(WTF::StringImpl **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v6 += 2;
  v16 = v6;
  v7 = *(_OWORD *)((char *)this + 24);
  v17 = *(_OWORD *)((char *)this + 8);
  v18 = v7;
  v8 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(a2 + 192));
  if (v8)
  {
    v9 = v8;
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 + 1, v8));
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v8, (WebCore::SecurityOriginData *)&v16, 0, a3);
    if (!atomic_load(v9))
    {
      __break(0xC471u);
      JUMPOUT(0x195F50F50);
    }
    do
      v13 = __ldaxr(v9);
    while (__stlxr(v13 - 1, v9));
  }
  else
  {
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(0, (WebCore::SecurityOriginData *)&v16, 0, a3);
  }
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if ((WTF::equal(v16, *(const WTF::StringImpl **)this, v11) & 1) == 0)
    WebCore::ResourceRequestBase::setURL(this, (const WTF::URL *)&v16, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  double result;
  uint64_t v9;
  uint64_t v10;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_DWORD *)(a1 + 16) & 0xFFFFFFFE | a2[2] & 1;
  *(_DWORD *)(a1 + 16) = v4;
  v5 = v4 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 4) >> 1) & 1));
  *(_DWORD *)(a1 + 16) = v5;
  v6 = v5 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 4) >> 2) & 1));
  *(_DWORD *)(a1 + 16) = v6;
  v7 = v6 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 4) >> 3) & 7));
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 16) = a2[2] & 0xFFFFFFC0 | v7 & 0x3F;
  *(_OWORD *)(a1 + 20) = *(_OWORD *)((char *)a2 + 20);
  result = *(double *)((char *)a2 + 36);
  *(double *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 4) &= ~1u;
  v9 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v9;
  v10 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_DWORD *)(a1 + 80) = 1;
  return result;
}

WebCore::SubstituteData *WebCore::SubstituteData::SubstituteData(WebCore::SubstituteData *this)
{
  char v2;
  int64x2_t v3;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  WTF::URL::invalidate((WebCore::SubstituteData *)((char *)this + 8));
  *((_QWORD *)this + 6) = 0;
  WTF::URL::invalidate((WebCore::SubstituteData *)((char *)this + 48));
  *((_BYTE *)this + 176) = 0;
  *((_WORD *)this + 92) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_BYTE *)this + 168) = 0;
  v2 = *((_BYTE *)this + 186);
  v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 12) = v3;
  *((int64x2_t *)this + 13) = v3;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0x8000000000000000;
  *(int64x2_t *)((char *)this + 248) = v3;
  *((_QWORD *)this + 33) = 0x7FF8000000000000;
  *((_BYTE *)this + 272) &= 0xF0u;
  *((_WORD *)this + 140) &= 0xC000u;
  *((_BYTE *)this + 282) = *((_BYTE *)this + 282) & 0xF8 | 2;
  *((_QWORD *)this + 36) = 0;
  *((_BYTE *)this + 296) = 0;
  *((_BYTE *)this + 186) = v2 & 0xC0 | 5;
  *((_BYTE *)this + 304) = 1;
  return this;
}

void WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  v3 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v3 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      v11 = *(WTF **)(v3 + 16 * v10);
      if (v11 != (WTF *)-1)
      {
        if (!v11)
        {
          v13 = *a1;
          if (!*a1)
            return;
          v14 = *(unsigned int *)(v13 - 4);
          v12 = v13 + 16 * v14;
          goto LABEL_11;
        }
        if ((WTF::equal(v11, *a2, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v12 = v3 + 16 * v10;
    v13 = *a1;
    if (!*a1)
      goto LABEL_12;
    v14 = *(unsigned int *)(v13 - 4);
LABEL_11:
    v13 += 16 * v14;
    if (v13 == v12)
      return;
LABEL_12:
    if (v13 != v12)
    {
      v15 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = -1;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(v12 + 8), a2);
      ++*(_DWORD *)(*a1 - 16);
      v16 = *a1;
      if (*a1)
        v17 = *(_DWORD *)(v16 - 12) - 1;
      else
        v17 = -1;
      *(_DWORD *)(v16 - 12) = v17;
      v18 = *a1;
      if (*a1)
      {
        v19 = 6 * *(_DWORD *)(v18 - 12);
        v20 = *(_DWORD *)(v18 - 4);
        if (v19 < v20 && v20 >= 9)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v20 >> 1, 0);
      }
    }
  }
}

uint64_t *WTF::Box<WebCore::NetworkLoadMetrics>::operator=(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v8;
  WTF::StringImpl *v9;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(_DWORD **)(v4 + 128);
      *(_QWORD *)(v4 + 128) = 0;
      if (v8)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v8, a2);
      v9 = *(WTF::StringImpl **)(v4 + 96);
      *(_QWORD *)(v4 + 96) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

WebCore::ResourceError *WebCore::ResourceError::ResourceError(WebCore::ResourceError *this, const WebCore::ResourceError *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  _DWORD *v7;
  int v8;
  const void *v9;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 1) = v5;
  v6 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 6);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 6) = v7;
  v8 = *((_DWORD *)a2 + 14);
  *((_WORD *)this + 30) = *((_WORD *)a2 + 30);
  *((_DWORD *)this + 14) = v8;
  v9 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)this + 8) = v9;
  if (v9)
    CFRetain(v9);
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  return this;
}

CFTypeRef makeUnexpected<WebCore::ResourceError &>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  _DWORD *v7;
  CFTypeRef result;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_DWORD **)(a2 + 48);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  result = *(CFTypeRef *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = result;
  if (result)
    result = CFRetain(result);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return result;
}

uint64_t WebCore::CachedResourceLoader::documentDidFinishLoadEvent(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t *v2;
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  double v10;
  void *v11;
  uint64_t v12;

  v2 = (uint64_t *)this;
  v3 = *(WTF **)(this + 16);
  if (v3)
  {
    v4 = *(unsigned int *)(this + 24);
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
    *(_QWORD *)(this + 29) = 0;
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)v3;
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v5 += 5;
        --v4;
      }
      while (v4);
    }
    this = WTF::fastFree(v3, a2);
  }
  v7 = v2[12];
  if (v7 && *(_QWORD *)v7 && *(_DWORD *)(*(_QWORD *)v7 - 12))
  {
    v9 = (_QWORD *)(v7 + 8);
    v8 = *(_QWORD **)(v7 + 8);
    if (v8)
    {
      while (!*(_QWORD *)(*v8 + 8))
      {
        v8 = (_QWORD *)v8[2];
        if (!v8)
          goto LABEL_20;
      }
      if ((v2[17] & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((v2[17] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        v2[16] = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
        return WebCore::TimerBase::setNextFireTime((uint64_t)(v2 + 13), v10 + 3.0);
      }
    }
    else
    {
LABEL_20:
      this = WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes(v2[12], a2);
      v12 = *(_QWORD *)v7;
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)v7 = 0;
        this = WTF::fastFree((WTF *)(v12 - 16), v11);
        v12 = *(_QWORD *)v7;
        *v9 = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        if (v12)
        {
          LODWORD(v12) = *(_DWORD *)(v12 - 12);
          if (v12 > 0x7FFFFFFE)
            LODWORD(v12) = 0x7FFFFFFF;
        }
      }
      else
      {
        *v9 = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
      }
      *(_DWORD *)(v7 + 28) = 2 * v12;
    }
  }
  return this;
}

void WebCore::CachedResourceLoader::reloadImagesIfNotDeferred(WebCore::CachedResourceLoader *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::CachedImage *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  char v21[24];
  unsigned int **v22;

  v2 = (_QWORD *)*((_QWORD *)this + 8);
  v3 = WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSWindowProxy,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::begin(v2);
  v5 = v3;
  v6 = v4;
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  if (v2 != v3)
  {
    do
    {
      v7 = v5[1];
      if (!v7)
        goto LABEL_9;
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8 || (*(_BYTE *)(v8 + 556) & 0x1F) != 1)
        goto LABEL_9;
      v10 = *(_QWORD *)(v8 + 8);
      if (v10)
        goto LABEL_41;
      v16 = v8;
      v10 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = v16;
      v17 = *(unsigned int **)(v16 + 8);
      *(_QWORD *)(v16 + 8) = v10;
      if (!v17)
        goto LABEL_41;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v4);
      }
      v10 = *(_QWORD *)(v16 + 8);
      if (v10)
      {
LABEL_41:
        do
          v11 = __ldaxr((unsigned int *)v10);
        while (__stlxr(v11 + 1, (unsigned int *)v10));
        v20 = (unsigned int *)v10;
        v12 = *(_QWORD *)(v10 + 8);
        if (v12)
        {
          v22 = &v20;
          ++*(_DWORD *)(v12 + 548);
          v13 = *(_QWORD *)(v12 + 488);
          if (!v13
            || !*(_QWORD *)(v13 + 8)
            || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v12 + 464), (uint64_t *)&v22, (uint64_t)v21), v20)&& *((_QWORD *)v20 + 1))
          {
            if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5[1] + 8) + 112))(*(_QWORD *)(v5[1] + 8)))
            {
              v14 = *(_QWORD *)(v5[1] + 8);
              if ((*(_BYTE *)(v14 + 344) & 1) == 0)
              {
                WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v14 + 160));
                *(_BYTE *)(v14 + 344) |= 1u;
              }
              if (*((_BYTE *)this + 273))
              {
                if (v20)
                  v15 = (WebCore::CachedImage *)*((_QWORD *)v20 + 1);
                else
                  v15 = 0;
                WebCore::CachedImage::load(v15, this);
              }
            }
          }
        }
      }
      else
      {
LABEL_9:
        v20 = 0;
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v20, v4);
      while (1)
      {
        v5 += 2;
        if (v5 == v6)
          break;
        if ((unint64_t)(*v5 + 1) > 1)
          goto LABEL_15;
      }
      v5 = v6;
LABEL_15:
      ;
    }
    while (v5 != v2);
  }
}

uint64_t WebCore::CachedResourceLoader::shouldDeferImageLoad(WebCore::CachedResourceLoader *this, const WTF::URL *a2)
{
  if (!*((_BYTE *)this + 273))
    return 1;
  if (*((_BYTE *)this + 272))
    return 0;
  return WTF::URL::protocolIs() ^ 1;
}

WTF::StringImpl *WebCore::CachedResourceLoader::notifyFinished(WTF::StringImpl *this, const WebCore::CachedResource *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  void *v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9[3];

  if ((*((_BYTE *)a2 + 556) & 0x1F) != 1)
    return this;
  v3 = this;
  if ((*(_WORD *)((char *)a2 + 557) >> 5) - 3 > 1 || (*((_BYTE *)a2 + 720) & 0x10) == 0)
  {
    this = (WTF::StringImpl *)*((_QWORD *)a2 + 86);
    if (!this)
      this = (WTF::StringImpl *)WebCore::Image::nullImage(0);
    goto LABEL_5;
  }
  WebCore::CachedImage::brokenImage(1.0, (uint64_t)v9);
  this = v9[0];
  if (v9[0])
  {
    v6 = (WTF::StringImpl *)*((_QWORD *)v9[0] + 1);
    v9[0] = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)this);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)this));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)this);
      WTF::fastFree(this, v5);
    }
    this = v6;
    if (v6)
    {
LABEL_5:
      this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 56))(this);
      if ((_DWORD)this)
      {
        v4 = (uint64_t)v3 + 40;
        if ((*((_BYTE *)a2 + 344) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((const WebCore::CachedResource *)((char *)a2 + 160));
          *((_BYTE *)a2 + 344) |= 1u;
        }
        return WTF::RobinHoodHashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v4, (uint64_t)a2 + 160, (uint64_t)v9);
      }
    }
  }
  return this;
}

unsigned int *WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedResource>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int *result;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;

  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v7;
  if (v7 > v6)
  {
    v17 = *(WTF **)(a1 + 8);
    if (v17)
    {
      do
      {
        v18 = (WTF *)*((_QWORD *)v17 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v17 + 8))
          WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, (void *)a1, v17);
        v17 = v18;
      }
      while (v18);
    }
    *(_DWORD *)(a1 + 24) = 0;
    v19 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      LODWORD(v19) = *(_DWORD *)(v19 - 12);
      if (v19 > 0x7FFFFFFE)
        LODWORD(v19) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 28) = 2 * v19;
  }
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a2;
    v21 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v8;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v20);
      }
      v8 = *(_QWORD *)(a2 + 8);
    }
  }
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  do
    v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  v24 = (WTF *)v8;
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, (uint64_t *)&v24, a3);
  result = (unsigned int *)v24;
  v24 = 0;
  if (result)
  {
    do
    {
      v15 = __ldaxr(result);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, result));
    if (!v16)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
  }
  if (v8)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v8));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v8);
      return (unsigned int *)WTF::fastFree((WTF *)v8, v11);
    }
  }
  return result;
}

uint64_t WebCore::CachedResourceLoader::isPreloaded(WebCore::CachedResourceLoader *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 9);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::Document::completeURL((WebCore::Document *)v3, a2, v3 + 848, 0, (WTF::URL *)&v13);
  v7 = *((_QWORD *)this + 12);
  if (v7 && (v8 = *(_QWORD **)(v7 + 8)) != 0)
  {
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(*v8 + 8);
      if (v10)
        break;
      v8 = (_QWORD *)v8[2];
      if (!v8)
        goto LABEL_17;
    }
LABEL_9:
    if ((*(_BYTE *)(v10 + 344) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v10 + 160));
      *(_BYTE *)(v10 + 344) |= 1u;
    }
    if ((WTF::equal(*(WTF **)(v10 + 160), v13, v6) & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      while (1)
      {
        v8 = (_QWORD *)v8[2];
        if (!v8)
          break;
        v10 = *(_QWORD *)(*v8 + 8);
        if (v10)
        {
          ++*(_DWORD *)(v7 + 24);
          goto LABEL_9;
        }
      }
      v9 = 0;
      ++*(_DWORD *)(v7 + 24);
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_17:
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v9;
}

uint64_t WebCore::CachedResourceRequest::CachedResourceRequest(uint64_t a1, uint64_t a2, const WebCore::ResourceLoaderOptions *a3, __int16 a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  WebCore::ResourceRequestBase::RequestData::RequestData(a1, (uint64_t *)a2);
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(v11 + 152) = v10;
  v12 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(v11 + 160) = v12;
  v13 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(v11 + 168) = v13;
  v14 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(v11 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(v11 + 176) = v14;
  v15 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(v11 + 192) = v15;
  v16 = *a5;
  *a5 = 0;
  *(_QWORD *)(v11 + 200) = v16;
  WebCore::ResourceLoaderOptions::ResourceLoaderOptions(v11 + 208, a3);
  *(_WORD *)(a1 + 352) = a4;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)a1, (_QWORD *)(a1 + 384));
  *(_WORD *)(a1 + 392) = 0;
  return a1;
}

unsigned int *WebCore::CachedResourceRequest::setInitiator(WebCore::CachedResourceRequest *this, WebCore::Element *a2)
{
  unsigned int *result;

  *((_DWORD *)a2 + 6) += 2;
  result = (unsigned int *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = a2;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CachedResourceRequest::setInitiatorType(WebCore::CachedResourceRequest *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CachedResourceRequest::updateForAccessControl(WebCore::CachedResourceRequest *this, WebCore::Document *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;

  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)a2 + 192), a2);
  v4 = (WTF::StringImpl *)v3;
  if (v3)
  {
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
  }
  v6 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = v4;
  if (v6)
  {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v4);
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  }
  return WebCore::updateRequestForAccessControl(this, (uint64_t)v4, (*((unsigned __int8 *)this + 322) >> 4) & 3);
}

uint64_t WebCore::CachedImage::shouldIgnoreHTTPStatusCodeErrors(WebCore::CachedImage *this)
{
  return 1;
}

uint64_t WebCore::CachedImage::mayTryReplaceEncodedData(WebCore::CachedImage *this)
{
  return 1;
}

void WebCore::CachedImage::CachedImageObserver::~CachedImageObserver(WebCore::CachedImage::CachedImageObserver *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v8 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v10 = *(unsigned int **)(v3 + 8 * i);
        if (v10 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              v14 = i;
              v15 = v3;
              v13 = v8;
              WTF::fastFree((WTF *)v10, a2);
              v8 = v13;
              i = v14;
              v3 = v15;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v8 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v10 = *(unsigned int **)(v3 + 8 * i);
        if (v10 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              v14 = i;
              v15 = v3;
              v13 = v8;
              WTF::fastFree((WTF *)v10, a2);
              v8 = v13;
              i = v14;
              v3 = v15;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CachedImage::CachedImageObserver::numberOfClients(WebCore::CachedImage::CachedImageObserver *this, void *a2)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (uint64_t *)*((_QWORD *)this + 3);
  if (!v2 || !*((_DWORD *)v2 - 3))
    return 0;
  v4 = *((unsigned int *)v2 - 1);
  v5 = 8 * v4;
  i = (uint64_t *)*((_QWORD *)this + 3);
  if ((_DWORD)v4)
  {
    v7 = 8 * v4;
    for (i = (uint64_t *)*((_QWORD *)this + 3); (unint64_t)(*i + 1) <= 1; ++i)
    {
      v7 -= 8;
      if (!v7)
        return 0;
    }
  }
  v8 = &v2[v4];
  if (i == v8)
    return 0;
  v9 = *i;
  while (!*(_QWORD *)(v9 + 8))
  {
    if (++i != v8)
    {
      while (1)
      {
        v9 = *i;
        if ((unint64_t)(*i + 1) > 1)
          break;
        result = 0;
        if (++i == v8)
          return result;
      }
      if (i != v8)
        continue;
    }
    return 0;
  }
  if ((_DWORD)v4)
  {
    while ((unint64_t)(*v2 + 1) <= 1)
    {
      ++v2;
      v5 -= 8;
      if (!v5)
        goto LABEL_15;
    }
  }
  if (v8 == v2)
    goto LABEL_15;
  v12 = *v2;
LABEL_20:
  if (!*(_QWORD *)(v12 + 8))
  {
    while (++v2 != v8)
    {
      v12 = *v2;
      if ((unint64_t)(*v2 + 1) > 1)
      {
        if (v2 != v8)
          goto LABEL_20;
        break;
      }
    }
LABEL_15:
    v2 = v8;
  }
  v10 = *(_QWORD *)(*v2 + 8);
  WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(v10 + 360, a2);
  v11 = *(_QWORD *)(v10 + 360);
  if (!v11)
    return 0;
  return *(unsigned int *)(v11 - 12);
}

uint64_t WebCore::CachedImage::CachedImageObserver::layerBasedSVGEngineEnabled(WebCore::CachedImage::CachedImageObserver *this)
{
  uint64_t *v1;
  uint64_t *v3[5];

  v1 = (uint64_t *)((char *)this + 24);
  if ((WTF::WeakHashSet<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(*((_QWORD **)this + 3)) & 1) != 0)
    return 0;
  WTF::WeakHashSet<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v3, v1);
  return (*(unsigned __int8 *)(*(_QWORD *)(*v3[1] + 8) + 720) >> 6) & 1;
}

void WebCore::CachedRawResource::~CachedRawResource(WebCore::CachedRawResource *this, void *a2)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  WTF *v5;
  _QWORD *v6;
  uint64_t v7;
  const void *v8;
  void *v9;

  std::__optional_destruct_base<WebCore::CachedRawResource::DelayedFinishLoading,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)this + 85, a2);
  v4 = *((_DWORD *)this + 169);
  if (v4)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 83);
    v7 = 456 * v4;
    do
    {
      v8 = (const void *)v6[55];
      v6[55] = 0;
      if (v8)
        CFRelease(v8);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(v6 + 25), v3);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v6, v9);
      v6 += 57;
      v7 -= 456;
    }
    while (v7);
  }
  v5 = (WTF *)*((_QWORD *)this + 83);
  if (v5)
  {
    *((_QWORD *)this + 83) = 0;
    *((_DWORD *)this + 168) = 0;
    WTF::fastFree(v5, v3);
  }
  WebCore::CachedResource::~CachedResource(this, v3);
}

{
  WTF::StringImpl *v3;
  unsigned int v4;
  WTF *v5;
  WTF *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  const void *v10;
  void *v11;

  std::__optional_destruct_base<WebCore::CachedRawResource::DelayedFinishLoading,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)this + 85, a2);
  v4 = *((_DWORD *)this + 169);
  if (v4)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 83);
    v9 = 456 * v4;
    do
    {
      v10 = (const void *)v8[55];
      v8[55] = 0;
      if (v10)
        CFRelease(v10);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(v8 + 25), v3);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v8, v11);
      v8 += 57;
      v9 -= 456;
    }
    while (v9);
  }
  v5 = (WTF *)*((_QWORD *)this + 83);
  if (v5)
  {
    *((_QWORD *)this + 83) = 0;
    *((_DWORD *)this + 168) = 0;
    WTF::fastFree(v5, v3);
  }
  WebCore::CachedResource::~CachedResource(this, v3);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::CachedRawResource::shouldIgnoreHTTPStatusCodeErrors(WebCore::CachedRawResource *this)
{
  return 1;
}

uint64_t WebCore::CachedRawResource::mayTryReplaceEncodedData(WebCore::CachedRawResource *this)
{
  return *((unsigned __int8 *)this + 696);
}

WTF **WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>::~KeyValuePair(WTF **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  return a1;
}

uint64_t *WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::begin@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  if (!*result)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v2 + 16 * v4;
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = v2 + 16 * v4;
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = v2 + 16 * v4;
    goto LABEL_3;
  }
  v3 = *result;
  if ((_DWORD)v4)
  {
    v9 = 16 * v4;
    v3 = *result;
    while ((unint64_t)(*(_QWORD *)v3 + 1) <= 1)
    {
      v3 += 16;
      v9 -= 16;
      if (!v9)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = v2 + 16 * v7;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v2 + 16 * v7;
  *(_DWORD *)(a2 + 40) = 0;
LABEL_7:
  while (v3 != v6 && !*(_QWORD *)(*(_QWORD *)v3 + 8))
  {
    v8 = v3 + 16;
    *(_QWORD *)(a2 + 8) = v3 + 16;
    v3 = v5;
    if (v8 != v5)
    {
      v3 = v8;
      while ((unint64_t)(*(_QWORD *)v3 + 1) <= 1)
      {
        v3 += 16;
        *(_QWORD *)(a2 + 8) = v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::end@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  if (*result)
  {
    v4 = *(unsigned int *)(v2 - 4);
    v3 = v2 + 16 * v4;
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v3;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v2 + 16 * v4;
  *(_DWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::clear(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int ***v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (unsigned int ***)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (unsigned int **)-1)
        {
          std::unique_ptr<WebCore::CachedResource::Callback>::reset[abi:sn180100](v5, 0);
          v6 = (WTF *)*(v5 - 1);
          *(v5 - 1) = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    result = WTF::fastFree((WTF *)(v3 - 16), a2);
    v7 = 0;
    v8 = *(_QWORD *)v2;
    *(_DWORD *)(v2 + 8) = 0;
    if (v8)
    {
      v7 = *(_DWORD *)(v8 - 12);
      if (v7 > 0x7FFFFFFE)
        v7 = 0x7FFFFFFF;
    }
  }
  else
  {
    v7 = 0;
    *(_DWORD *)(result + 8) = 0;
  }
  *(_DWORD *)(v2 + 12) = 2 * v7;
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::CachedRawResource::DelayedFinishLoading,false>::reset[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (*(_BYTE *)(result + 8))
  {
    v2 = result;
    result = *(_QWORD *)result;
    *(_QWORD *)v2 = 0;
    if (result)
    {
      do
      {
        v3 = __ldaxr((unsigned int *)result);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, (unsigned int *)result));
      if (!v4)
      {
        atomic_store(1u, (unsigned int *)result);
        v5 = *(unsigned int *)(result + 20);
        if ((_DWORD)v5)
        {
          v6 = *(_QWORD *)(result + 8);
          v7 = v6 + 16 * v5;
          do
          {
            v8 = *(unsigned int **)(v6 + 8);
            *(_QWORD *)(v6 + 8) = 0;
            if (v8)
            {
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
              {
                v14 = v7;
                v15 = v6;
                v16 = (WTF *)v8;
                v17 = result;
                atomic_store(1u, v8);
                v11 = v8[6];
                if ((_DWORD)v11 != -1)
                  ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v11])(&v19, v8 + 2);
                *((_DWORD *)v16 + 6) = -1;
                WTF::fastFree(v16, a2);
                result = v17;
                v7 = v14;
                v6 = v15;
              }
            }
            v6 += 16;
          }
          while (v6 != v7);
        }
        v12 = *(WTF **)(result + 8);
        if ((WTF *)(result + 24) != v12 && v12 != 0)
        {
          *(_QWORD *)(result + 8) = 0;
          *(_DWORD *)(result + 16) = 0;
          v18 = result;
          WTF::fastFree(v12, a2);
          result = v18;
        }
        result = WTF::fastFree((WTF *)result, a2);
      }
    }
    *(_BYTE *)(v2 + 8) = 0;
  }
  return result;
}

uint64_t *std::__optional_destruct_base<WebCore::CachedRawResource::DelayedFinishLoading,false>::~__optional_destruct_base[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  if (*((_BYTE *)a1 + 8))
  {
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr((unsigned int *)v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, (unsigned int *)v3));
      if (!v5)
      {
        atomic_store(1u, (unsigned int *)v3);
        v7 = *(unsigned int *)(v3 + 20);
        if ((_DWORD)v7)
        {
          v8 = *(_QWORD *)(v3 + 8);
          v9 = v8 + 16 * v7;
          do
          {
            v10 = *(unsigned int **)(v8 + 8);
            *(_QWORD *)(v8 + 8) = 0;
            if (v10)
            {
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                v16 = v9;
                v17 = v8;
                v18 = (WTF *)v10;
                v19 = v3;
                atomic_store(1u, v10);
                v13 = v10[6];
                if ((_DWORD)v13 != -1)
                  ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v13])(&v21, v10 + 2);
                *((_DWORD *)v18 + 6) = -1;
                WTF::fastFree(v18, a2);
                v3 = v19;
                v9 = v16;
                v8 = v17;
              }
            }
            v8 += 16;
          }
          while (v8 != v9);
        }
        v14 = *(WTF **)(v3 + 8);
        if ((WTF *)(v3 + 24) != v14 && v14 != 0)
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_DWORD *)(v3 + 16) = 0;
          v20 = v3;
          WTF::fastFree(v14, a2);
          v3 = v20;
        }
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  return a1;
}

void WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast(uint64_t a1, uint64_t *a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  void *v20;

  v2 = *((_DWORD *)a2 + 3);
  if (!v2)
    goto LABEL_6;
  v5 = *a2 + 456 * v2;
  WebCore::ResourceRequestBase::RequestData::RequestData(a1, (uint64_t *)(v5 - 456));
  v6 = *(_QWORD *)(v5 - 304);
  *(_QWORD *)(v5 - 304) = 0;
  *(_QWORD *)(v7 + 152) = v6;
  v8 = *(_QWORD *)(v5 - 296);
  *(_QWORD *)(v5 - 296) = 0;
  *(_QWORD *)(v7 + 160) = v8;
  v9 = *(_QWORD *)(v5 - 288);
  *(_QWORD *)(v5 - 288) = 0;
  *(_QWORD *)(v7 + 168) = v9;
  v10 = *(_QWORD *)(v5 - 280);
  *(_BYTE *)(v7 + 184) = *(_BYTE *)(v5 - 272);
  *(_QWORD *)(v7 + 176) = v10;
  v11 = *(_QWORD *)(v5 - 264);
  *(_QWORD *)(v5 - 264) = 0;
  *(_QWORD *)(v7 + 192) = v11;
  WebCore::ResourceResponseBase::ResourceResponseBase(v7 + 200, (uint64_t *)(v5 - 256));
  v13 = *(_QWORD *)(v5 - 16);
  *(_QWORD *)(v5 - 16) = 0;
  *(_QWORD *)(a1 + 440) = v13;
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(v5 - 8);
  v14 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v14)
  {
LABEL_6:
    __break(0xC471u);
    JUMPOUT(0x195F52800);
  }
  v15 = v14 - 1;
  v16 = *a2;
  v17 = *a2 + 456 * (v14 - 1);
  v18 = *(const void **)(v17 + 440);
  *(_QWORD *)(v17 + 440) = 0;
  if (v18)
    CFRelease(v18);
  v19 = v16 + 456 * v15;
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(v19 + 200), v12);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v19, v20);
  *((_DWORD *)a2 + 3) = v15;
}

_QWORD *WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::CompletionHandler<WebCore::iterateRedirects(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::CachedRawResourceClient &,WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,void (&&)(WebCore::ResourceRequest &&))::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v5 = v4;
  *v4 = off_1E33F8828;
  v6 = v4 + 1;
  v7 = *a2;
  if (*a2)
  {
    do
      v8 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v8 + 1, (unsigned int *)v7));
    *v6 = v7;
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
    {
      v16 = v4 + 1;
      ++*(_DWORD *)(v9 + 548);
      v10 = *(_QWORD *)(v9 + 488);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v9 + 464), (uint64_t *)&v16, (uint64_t)&v15);
      }
    }
  }
  else
  {
    *v6 = 0;
  }
  v11 = a2[1];
  a2[1] = 0;
  v5[3] = 0;
  v5[4] = 0;
  v5[2] = v11;
  v12 = a2[2];
  a2[2] = 0;
  v5[3] = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *((_DWORD *)v5 + 8) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *((_DWORD *)v5 + 9) = v12;
  v13 = a2[4];
  a2[4] = 0;
  v5[5] = v13;
  *a1 = v5;
  return a1;
}

void WebCore::iterateRedirects(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::CachedRawResourceClient &,WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WebCore::CachedRawResourceClient &::CrashOnOverflow,16ul,WebCore::CachedRawResourceClient &::FastMalloc> &&,WebCore::CachedRawResourceClient &::CompletionHandler<void ()(std::pair&&)> &&)::$_0::~$_0(WebCore::CachedResourceHandleBase *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  WTF *v5;
  WTF *v6;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;
  void *v10;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_DWORD *)this + 7);
  if (v4)
  {
    v7 = (_QWORD *)*((_QWORD *)this + 2);
    v8 = 456 * v4;
    do
    {
      v9 = (const void *)v7[55];
      v7[55] = 0;
      if (v9)
        CFRelease(v9);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(v7 + 25), a2);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v7, v10);
      v7 += 57;
      v8 -= 456;
    }
    while (v8);
  }
  v5 = (WTF *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this, a2);
}

void std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>::~pair(_QWORD *a1, WTF::StringImpl *a2)
{
  const void *v3;
  void *v4;

  v3 = (const void *)a1[55];
  a1[55] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 25), a2);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)a1, v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::iterateRedirects(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::CachedRawResourceClient &,WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::pair&&)> &&)::$_0,void,WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33F8828;
  WebCore::iterateRedirects(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::CachedRawResourceClient &,WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WebCore::CachedRawResourceClient &::CrashOnOverflow,16ul,WebCore::CachedRawResourceClient &::FastMalloc> &&,WebCore::CachedRawResourceClient &::CompletionHandler<void ()(std::pair&&)> &&)::$_0::~$_0((WebCore::CachedResourceHandleBase *)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::iterateRedirects(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::CachedRawResourceClient &,WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::pair&&)> &&)::$_0,void,WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33F8828;
  WebCore::iterateRedirects(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::CachedRawResourceClient &,WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WebCore::CachedRawResourceClient &::CrashOnOverflow,16ul,WebCore::CachedRawResourceClient &::FastMalloc> &&,WebCore::CachedRawResourceClient &::CompletionHandler<void ()(std::pair&&)> &&)::$_0::~$_0((WebCore::CachedResourceHandleBase *)(a1 + 8), a2);
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::iterateRedirects(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::CachedRawResourceClient &,WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::pair&&)> &&)::$_0,void,WTF::Vector<std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  void *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  _QWORD v14[7];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  char v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v2 = a1[2];
  if (v2 && (v3 = *(_QWORD **)(v2 + 8)) != 0)
  {
    WebCore::iterateRedirects(a1 + 1, v3, (uint64_t)(a1 + 3), a1 + 5);
  }
  else
  {
    v27 = 0;
    WTF::URL::invalidate((WTF::URL *)&v27);
    v4 = v27;
    if (v27)
      *(_DWORD *)v27 += 2;
    v11 = v4;
    v12 = v28;
    v13 = v29;
    v14[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v14);
    v14[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14[6] = v30;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0x10000;
    v6 = v19 & 0x80 | 4;
    v19 = v6;
    v20 = 0;
    v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v7 += 2;
      v6 = v19;
    }
    v21 = v7;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = v25 & 0xE0 | 5;
    v19 = v6 | 2;
    v8 = v27;
    v27 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v26 = 0;
    v9 = a1[5];
    a1[5] = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v11, v10);
  }
}

void WebCore::iterateClients(WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient> &&,WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::ResourceRequest &&,std::unique_ptr<WebCore::ResourceResponse,WebCore::ResourceRequest::default_delete<WebCore::ResourceRequest &&>> &&,WTF::CompletionHandler<void ()(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ResourceResponseBase *v4;
  const void *v5;
  WTF *v6;
  void *v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  WTF *v13;

  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WebCore::ResourceResponseBase **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
  {
    v5 = (const void *)*((_QWORD *)v4 + 30);
    *((_QWORD *)v4 + 30) = 0;
    if (v5)
      CFRelease(v5);
    WebCore::ResourceResponseBase::~ResourceResponseBase(v4, a2);
    WTF::fastFree(v6, v7);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 24), a2);
  v9 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v9)
  {
    v11 = (WTF **)((char *)v9 + 8);
    v10 = *(unsigned int *)v9;
    if ((_DWORD)v10)
    {
      v12 = 8 * v10;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 1)
            WTF::fastFree(v13, v8);
          else
            --*(_DWORD *)v13;
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    WTF::fastFree(v9, v8);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)a1, v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::iterateClients(WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient> &&,WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::ResourceRequest &&,std::unique_ptr<WebCore::ResourceResponse,WebCore::ResourceRequest::default_delete<WebCore::ResourceRequest &&>> &&,WTF::CompletionHandler<void ()(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&)> &&)::$_0,void,WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33F8850;
  WebCore::iterateClients(WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient> &&,WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::ResourceRequest &&,std::unique_ptr<WebCore::ResourceResponse,WebCore::ResourceRequest::default_delete<WebCore::ResourceRequest &&>> &&,WTF::CompletionHandler<void ()(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::iterateClients(WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient> &&,WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::ResourceRequest &&,std::unique_ptr<WebCore::ResourceResponse,WebCore::ResourceRequest::default_delete<WebCore::ResourceRequest &&>> &&,WTF::CompletionHandler<void ()(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&)> &&)::$_0,void,WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33F8850;
  WebCore::iterateClients(WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient> &&,WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::ResourceRequest &&,std::unique_ptr<WebCore::ResourceResponse,WebCore::ResourceRequest::default_delete<WebCore::ResourceRequest &&>> &&,WTF::CompletionHandler<void ()(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::iterateClients(WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient> &&,WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&,WebCore::ResourceRequest &&,std::unique_ptr<WebCore::ResourceResponse,WebCore::ResourceRequest::default_delete<WebCore::ResourceRequest &&>> &&,WTF::CompletionHandler<void ()(WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&)> &&)::$_0,void,WebCore::CachedResourceHandle<WebCore::CachedRawResource> &&>::call(uint64_t *a1, uint64_t a2)
{
  WebCore::iterateClients(a1 + 1, a1 + 4, a2, a1 + 5, a1 + 6);
}

void WebCore::CachedResource::ResponseData::~ResponseData(WebCore::CachedResource::ResponseData *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const void *v9;

  v3 = (const void *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *((_QWORD *)this + 32) = off_1E33DC988;
  v7 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WebCore::TimerBase::~TimerBase((WebCore::CachedResource::ResponseData *)((char *)this + 256));
  v9 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceResponseBase::~ResourceResponseBase(this, v8);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, const void **a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  size_t v9;
  void *v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v15;

  if (a2 != (const void **)a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *((_DWORD *)a2 + 3);
    if (v4 <= v5)
    {
      v6 = *(_DWORD *)(a1 + 8);
      if (v5 > v6)
      {
        if (v6)
        {
          if (v4)
            *(_DWORD *)(a1 + 12) = 0;
          v15 = *(WTF **)a1;
          if (*(_QWORD *)a1)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v15, a2);
            v6 = *(_DWORD *)(a1 + 8);
          }
        }
        v7 = *((_DWORD *)a2 + 3);
        if (v6 < v7)
        {
          v8 = *(WTF **)a1;
          v9 = *(unsigned int *)(a1 + 12);
          v10 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)a2 + 3));
          *(_DWORD *)(a1 + 8) = v7;
          *(_QWORD *)a1 = v10;
          memcpy(v10, v8, v9);
          if (v8)
          {
            if (*(WTF **)a1 == v8)
            {
              *(_QWORD *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree(v8, v11);
          }
        }
      }
      v5 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
    }
    v12 = *(WTF **)a1;
    if (v5)
    {
      memmove(v12, *a2, v5);
      v13 = *(unsigned int *)(a1 + 12);
      v12 = *(WTF **)a1;
    }
    else
    {
      v13 = 0;
    }
    memcpy((char *)v12 + v13, (char *)*a2 + v13, (_BYTE *)*a2 + *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + v13));
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::CachedResource::Callback::*&)(void),WebCore::CachedResource::Callback*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unsigned int ***std::unique_ptr<WebCore::CachedResource::Callback>::reset[abi:sn180100](unsigned int ***result, unsigned int **a2)
{
  unsigned int **v2;
  unsigned int *v3;
  void *v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v2[2] = (unsigned int *)off_1E31F7378;
    v3 = v2[8];
    v2[8] = 0;
    if (v3)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v2 + 2));
    v5 = (WTF *)v2[1];
    v2[1] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, v4);
      else
        --*(_DWORD *)v5;
    }
    v6 = *v2;
    *v2 = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v4);
      }
    }
    return (unsigned int ***)WTF::fastFree((WTF *)v2, v4);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(const void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *WebCore::acceptHeaderValueForImageResource(void)::$_0::operator()(WTF::StringImpl **a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  char v8;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 1;
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v5);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v5);
  result = v5;
  if (v5)
    *(_DWORD *)v5 += 2;
  *a1 = result;
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v2);
      result = v5;
    }
    else
    {
      *(_DWORD *)v4 -= 2;
    }
  }
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  WTF **result;
  WTF **v17;
  WTF **v18;
  WTF::StringImpl *v19;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  v12 = v10;
  v13 = v10 + 16;
  if (a2)
  {
    v14 = v10 + 40;
    do
    {
      *(_OWORD *)(v14 + 24) = 0u;
      *(_OWORD *)(v14 + 8) = 0u;
      *(_OWORD *)(v14 - 8) = 0u;
      *(_OWORD *)(v14 - 24) = 0u;
      WTF::URL::invalidate((WTF::URL *)v14);
      v14 += 64;
      --v9;
    }
    while (v9);
  }
  *a1 = v13;
  *(_DWORD *)(v12 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v15 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v17 = (WTF **)v6;
    do
    {
      if (*v17 != (WTF *)-1)
      {
        if (*v17)
        {
          v18 = WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::reinsert(*a1, (uint64_t)v17);
          WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>::~KeyValuePair(v17, v19);
          if (v17 == a3)
            v15 = v18;
        }
        else
        {
          WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>::~KeyValuePair(v17, v11);
        }
      }
      v17 += 8;
      --v7;
    }
    while (v7);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v11);
    return v15;
  }
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::reinsert(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  void *v24;
  WTF *v25;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = ~(*(_QWORD *)(*(_QWORD *)a2 + 8) << 32) + *(_QWORD *)(*(_QWORD *)a2 + 8);
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
  v9 = 1;
  do
  {
    v10 = v8;
    v11 = *(_QWORD *)(a1 + ((unint64_t)v8 << 6));
    v8 = (v8 + v9++) & v4;
  }
  while (v11);
  v12 = v10;
  v13 = (WTF **)(a1 + ((unint64_t)v10 << 6));
  v14 = v13[3];
  v13[3] = 0;
  if (!v14)
    goto LABEL_8;
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
LABEL_8:
    *v13 = 0;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
  v25 = *v13;
  *v13 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree(v25, v24);
    else
      --*(_DWORD *)v25;
  }
LABEL_9:
  v15 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  *v13 = v15;
  v16 = a1 + (v12 << 6);
  v17 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(v16 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(v16 + 8) = v17;
  v18 = *(WTF **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v13[3] = v18;
  v19 = *(_DWORD *)(v16 + 32) & 0xFFFFFFFE | *(_DWORD *)(a2 + 32) & 1;
  *(_DWORD *)(v16 + 32) = v19;
  v20 = v19 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 32) >> 1) & 1));
  *(_DWORD *)(v16 + 32) = v20;
  v21 = v20 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 32) >> 2) & 1));
  *(_DWORD *)(v16 + 32) = v21;
  v22 = v21 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 32) >> 3) & 7));
  *(_DWORD *)(v16 + 32) = v22;
  *(_DWORD *)(v16 + 32) = *(_DWORD *)(a2 + 32) & 0xFFFFFFC0 | v22 & 0x3F;
  *(_OWORD *)(v16 + 36) = *(_OWORD *)(a2 + 36);
  *(_QWORD *)(v16 + 52) = *(_QWORD *)(a2 + 52);
  *(_DWORD *)(v16 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 32) &= ~1u;
  return v13;
}

_QWORD *WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[8 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[8 * v1];
  if ((_DWORD)v1)
  {
    v3 = v1 << 6;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 8;
      v3 -= 64;
      if (!v3)
        return v2;
    }
  }
  return result;
}

__n128 WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl> const&,WebCore::CachedImage::ContainerContext&>(uint64_t a1, uint64_t *a2, WTF **a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF **v11;
  WTF *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  WTF **v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF::StringImpl *v27;
  __n128 result;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  WTF *v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  __int128 v42;
  uint64_t v43;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = *((_QWORD *)*a3 + 1);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (WTF **)(v8 + (v19 << 6));
    v21 = *v20;
    if (*v20 != (WTF *)-1)
      break;
    v11 = (WTF **)(v8 + (v19 << 6));
LABEL_10:
    v17 = i + v19;
  }
  if (!v21)
  {
    if (v11)
    {
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *(_OWORD *)v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      WTF::URL::invalidate((WTF::URL *)(v11 + 3));
      --*(_DWORD *)(*a2 - 16);
      v22 = *v11;
      v23 = *a3;
      *(_DWORD *)v23 = *(_DWORD *)*a3 + 1;
      *v11 = v23;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          WTF::fastFree(v22, a2);
        else
          --*(_DWORD *)v22;
      }
      v20 = v11;
    }
    else
    {
      ++*(_DWORD *)v12;
      *v20 = v12;
    }
    v25 = *(WTF **)a4;
    *((_DWORD *)v20 + 4) = *(_DWORD *)(a4 + 8);
    v20[1] = v25;
    v26 = *(WTF **)(a4 + 16);
    if (v26)
      *(_DWORD *)v26 += 2;
    v27 = v20[3];
    v20[3] = v26;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v27 -= 2;
    }
    result = *(__n128 *)(a4 + 24);
    v29 = *(_OWORD *)(a4 + 40);
    *((__n128 *)v20 + 2) = result;
    *((_OWORD *)v20 + 3) = v29;
    v30 = *a2;
    if (*a2)
      v31 = *(_DWORD *)(v30 - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(v30 - 12) = v31;
    v32 = *a2;
    if (*a2)
      v33 = *(_DWORD *)(v32 - 12);
    else
      v33 = 0;
    v34 = (*(_DWORD *)(v32 - 16) + v33);
    v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 <= 2 * v34)
        goto LABEL_45;
    }
    else if (3 * v35 <= 4 * v34)
    {
      if (!(_DWORD)v35)
      {
        v36 = 8;
        goto LABEL_34;
      }
LABEL_45:
      v36 = (_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35));
LABEL_34:
      v20 = WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, v36, v20);
      v32 = *a2;
      if (*a2)
        v35 = *(unsigned int *)(v32 - 4);
      else
        v35 = 0;
    }
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v32 + (v35 << 6);
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (*((_QWORD *)v21 + 1) != v13)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v8 + (v24 << 6);
  *(_BYTE *)(a1 + 16) = 0;
  v37 = v8 + (v19 << 6);
  v38 = *(WTF **)a4;
  *(_DWORD *)(v37 + 16) = *(_DWORD *)(a4 + 8);
  *(_QWORD *)(v37 + 8) = v38;
  v39 = (WTF::StringImpl **)(v37 + 24);
  v40 = *(WTF::StringImpl **)(a4 + 16);
  if (v40)
    *(_DWORD *)v40 += 2;
  v41 = *v39;
  *v39 = v40;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v41 -= 2;
  }
  result = *(__n128 *)(a4 + 24);
  v42 = *(_OWORD *)(a4 + 40);
  v43 = v8 + (v19 << 6);
  *(__n128 *)(v43 + 32) = result;
  *(_OWORD *)(v43 + 48) = v42;
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v4, a2);
}

WTF::StringImpl *WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *result;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = *(_QWORD *)(*a3 + 8);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (WTF::StringImpl *)(v8 + (v19 << 6));
    v21 = *(WTF **)v20;
    if (!*(_QWORD *)v20)
    {
      if (v11)
      {
        v11[2] = 0u;
        v11[3] = 0u;
        *v11 = 0u;
        v11[1] = 0u;
        v20 = (WTF::StringImpl *)v11;
        WTF::URL::invalidate((WTF::URL *)((char *)v11 + 24));
        --*(_DWORD *)(*a2 - 16);
        v12 = *a3;
      }
      *a3 = 0;
      v22 = *(WTF **)v20;
      *(_QWORD *)v20 = v12;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          WTF::fastFree(v22, a2);
        else
          --*(_DWORD *)v22;
      }
      v23 = *(_QWORD *)a4;
      *((_DWORD *)v20 + 4) = *(_DWORD *)(a4 + 8);
      *((_QWORD *)v20 + 1) = v23;
      v24 = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a4 + 16) = 0;
      result = (WTF::StringImpl *)*((_QWORD *)v20 + 3);
      *((_QWORD *)v20 + 3) = v24;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      *((_DWORD *)v20 + 8) = *((_DWORD *)v20 + 8) & 0xFFFFFFFE | *(_DWORD *)(a4 + 24) & 1;
      v26 = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a4 + 24) = v26 & 0xFFFFFFFE;
      v27 = *((_DWORD *)v20 + 8) & 0xFFFFFFFD | (2 * ((v26 >> 1) & 1));
      *((_DWORD *)v20 + 8) = v27;
      v28 = v27 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a4 + 24) >> 2) & 1));
      *((_DWORD *)v20 + 8) = v28;
      v29 = v28 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a4 + 24) >> 3) & 7));
      *((_DWORD *)v20 + 8) = v29;
      *((_DWORD *)v20 + 8) = *(_DWORD *)(a4 + 24) & 0xFFFFFFC0 | v29 & 0x3F;
      *(_OWORD *)((char *)v20 + 36) = *(_OWORD *)(a4 + 28);
      *(_QWORD *)((char *)v20 + 52) = *(_QWORD *)(a4 + 44);
      *((_DWORD *)v20 + 15) = *(_DWORD *)(a4 + 52);
      v30 = *a2;
      if (*a2)
        v31 = *(_DWORD *)(v30 - 12) + 1;
      else
        v31 = 1;
      *(_DWORD *)(v30 - 12) = v31;
      v32 = *a2;
      if (*a2)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      v34 = (*(_DWORD *)(v32 - 16) + v33);
      v35 = *(unsigned int *)(v32 - 4);
      if (v35 > 0x400)
      {
        if (v35 > 2 * v34)
          goto LABEL_18;
      }
      else if (3 * v35 > 4 * v34)
      {
LABEL_18:
        *(_QWORD *)a1 = v20;
        *(_QWORD *)(a1 + 8) = v32 + (v35 << 6);
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
      result = (WTF::StringImpl *)WTF::HashTable<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>,WebCore::CachedImage::ContainerContext,WTF::DefaultHash<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::CachedImage::ContainerContext>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CachedImageClient const,WTF::SingleThreadWeakPtrImpl>>>::expand(a2, (WTF **)v20);
      v20 = result;
      v32 = *a2;
      if (*a2)
        v35 = *(unsigned int *)(v32 - 4);
      else
        v35 = 0;
      goto LABEL_18;
    }
    if (v21 == (WTF *)-1)
    {
      v11 = (_OWORD *)(v8 + (v19 << 6));
      goto LABEL_31;
    }
    if (*((_QWORD *)v21 + 1) == v13)
      break;
LABEL_31:
    v17 = i + v19;
  }
  if ((v9 & 1) != 0)
    v36 = 0;
  else
    v36 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v8 + (v36 << 6);
  *(_BYTE *)(a1 + 16) = 0;
  return (WTF::StringImpl *)WebCore::CachedImage::ContainerContext::operator=(v8 + (v19 << 6) + 8, (uint64_t *)a4);
}

uint64_t WebCore::CachedImage::ContainerContext::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  a2[2] = 0;
  v6 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) & 0xFFFFFFFE | a2[3] & 1;
  v7 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7 & 0xFFFFFFFE;
  v8 = *(_DWORD *)(a1 + 24) & 0xFFFFFFFD | (2 * ((v7 >> 1) & 1));
  *(_DWORD *)(a1 + 24) = v8;
  v9 = v8 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 6) >> 2) & 1));
  *(_DWORD *)(a1 + 24) = v9;
  v10 = v9 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 6) >> 3) & 7));
  *(_DWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 24) = a2[3] & 0xFFFFFFC0 | v10 & 0x3F;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)((char *)a2 + 28);
  *(_QWORD *)(a1 + 44) = *(uint64_t *)((char *)a2 + 44);
  *(_DWORD *)(a1 + 52) = *((_DWORD *)a2 + 13);
  return a1;
}

uint64_t std::pair<WebCore::ResourceRequest,WebCore::ResourceResponse>::pair[abi:sn180100]<true,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;

  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)a1, (const WebCore::ResourceRequestBase::RequestData *)a2);
  v6 = *(_DWORD **)(a2 + 152);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a1 + 152) = v6;
  v7 = *(_DWORD **)(a2 + 160);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a1 + 160) = v7;
  v8 = *(_DWORD **)(a2 + 168);
  if (v8)
    ++*v8;
  *(_QWORD *)(a1 + 168) = v8;
  v9 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v9;
  v10 = *(const void **)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v10;
  if (v10)
    CFRetain(v10);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 200), (const WebCore::ResourceResponseBase *)a3);
  v11 = *(const void **)(a3 + 240);
  *(_QWORD *)(a1 + 440) = v11;
  if (v11)
    CFRetain(v11);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a3 + 248);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CachedRawResource::didAddClient(WebCore::CachedResourceClient &)::$_1::operator()(WebCore::ResourceRequest &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;

  *(_QWORD *)a1 = off_1E33F88E8;
  v3 = *(WTF **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 16), a2);
  return a1;
}

{
  WTF *v3;
  void *v4;

  *(_QWORD *)a1 = off_1E33F88E8;
  v3 = *(WTF **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 16), a2);
  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CachedRawResource::didAddClient(WebCore::CachedResourceClient &)::$_1::operator()(WebCore::ResourceRequest &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebCore::CachedRawResource::didAddClient(WebCore::CachedResourceClient &)::$_1::operator()(WebCore::ResourceRequest &&)::{lambda(void)#1}::operator()(a1 + 8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore17CachedRawResource12didAddClientERNS2_20CachedResourceClientEEN3__1clEONS2_15ResourceRequestEENKUlvE_clEvEUlOT_E_vJONS_3RefINS2_12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEE4callESK_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = **(_QWORD **)(a1 + 16);
  if (!v5
    || (v6 = *(_QWORD *)(v5 + 8)) == 0
    || (result = WTF::WeakHashCountedSet<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::contains((uint64_t *)(v4 + 360), *(_QWORD *)(v5 + 8)), (result & 1) != 0))
  {
LABEL_12:
    v17 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8);
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 72))(v17, v4, *a2);
  }
  ++*(_DWORD *)(v4 + 456);
  v8 = *(_QWORD *)(v6 + 8);
  if (v8)
  {
    if (*(_QWORD *)(v8 + 8))
    {
      v9 = *(_QWORD *)(v4 + 448);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 - 8);
        v11 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
        v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
        v14 = v10 & ((v13 >> 31) ^ v13);
        for (i = 1; ; ++i)
        {
          v16 = *(_QWORD *)(v9 + 16 * v14);
          if (v16 != -1)
          {
            if (!v16)
              return result;
            if (v16 == v8)
              break;
          }
          v14 = (v14 + i) & v10;
        }
        goto LABEL_12;
      }
    }
  }
  return result;
}

char *WTF::Vector<WebCore::CachedRawResource::RedirectPair,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (unint64_t)v5 + 456 * *(unsigned int *)(a1 + 12), v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 + 1 > a2)
      v16 = v15 + 1;
    else
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x8FB824)
      {
        __break(0xC471u);
        JUMPOUT(0x195F5403CLL);
      }
      v17 = (uint64_t)v5 + 456 * *(unsigned int *)(a1 + 12);
      v18 = 456 * v16;
      v19 = WTF::fastMalloc((WTF *)(456 * v16));
      *(_DWORD *)(a1 + 8) = v18 / 0x1C8;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::CachedRawResource::RedirectPair>::move((uint64_t)v5, v17, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 + 1 > a2)
      v9 = v8 + 1;
    else
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v9 >= 0x8FB824)
      {
        __break(0xC471u);
        JUMPOUT(0x195F54044);
      }
      v10 = 456 * v9;
      v11 = WTF::fastMalloc((WTF *)(456 * v9));
      *(_DWORD *)(a1 + 8) = v10 / 0x1C8;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::CachedRawResource::RedirectPair>::move((uint64_t)v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

void WTF::VectorMover<false,WebCore::CachedRawResource::RedirectPair>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WebCore::HTTPHeaderMap *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  const void *v17;
  const void *v18;
  void *v19;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(a3 + v6), (const WebCore::ResourceRequestBase::RequestData *)(a1 + v6));
      v8 = *(_DWORD **)(a1 + v6 + 152);
      if (v8)
        *v8 += 2;
      *((_QWORD *)v7 + 19) = v8;
      v9 = *(_DWORD **)(a1 + v6 + 160);
      if (v9)
        *v9 += 2;
      *((_QWORD *)v7 + 20) = v9;
      v10 = a1 + v6;
      v11 = *(_DWORD **)(a1 + v6 + 168);
      if (v11)
        ++*v11;
      v12 = a3 + v6;
      *(_QWORD *)(v12 + 168) = v11;
      v13 = *(_QWORD *)(v10 + 176);
      *(_BYTE *)(v12 + 184) = *(_BYTE *)(v10 + 184);
      *(_QWORD *)(v12 + 176) = v13;
      v14 = *(const void **)(v10 + 192);
      *(_QWORD *)(v12 + 192) = v14;
      if (v14)
        CFRetain(v14);
      v15 = a1 + v6;
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v12 + 200), (const WebCore::ResourceResponseBase *)(a1 + v6 + 200));
      v17 = *(const void **)(a1 + v6 + 440);
      *(_QWORD *)(v12 + 440) = v17;
      if (v17)
        CFRetain(v17);
      *(_BYTE *)(a3 + v6 + 448) = *(_BYTE *)(v15 + 448);
      v18 = *(const void **)(v15 + 440);
      *(_QWORD *)(v15 + 440) = 0;
      if (v18)
        CFRelease(v18);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + v6 + 200), v16);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(a1 + v6), v19);
      v6 += 456;
    }
    while (a1 + v6 != a2);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CachedRawResource::redirectReceived(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  WebCore::ResourceResponseBase *v8;

  *(_QWORD *)a1 = off_1E33F8938;
  v3 = (WebCore::ResourceResponseBase *)(a1 + 32);
  v4 = *(const void **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v4)
  {
    v8 = v3;
    CFRelease(v4);
    v3 = v8;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 16), v5);
  return a1;
}

{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  WebCore::ResourceResponseBase *v9;

  *(_QWORD *)a1 = off_1E33F8938;
  v3 = (WebCore::ResourceResponseBase *)(a1 + 32);
  v4 = *(const void **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v4)
  {
    v9 = v3;
    CFRelease(v4);
    v3 = v9;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 16), v5);
  return WTF::fastFree((WTF *)a1, v7);
}

void WTF::Detail::CallableWrapper<WebCore::CachedRawResource::redirectReceived(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t *a1, uint64_t a2)
{
  WebCore::CachedResource::redirectReceived(a1[1], a2, (WebCore::ResourceResponseBase *)(a1 + 4), a1 + 3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CachedResource::load(WebCore::CachedResourceLoader &)::$_0,void,WebCore::ResourceError const&,WebCore::ResourceResponse const&>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)a1 = off_1E33F8960;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 16), a2);
  return a1;
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)a1 = off_1E33F8960;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v4;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 16), a2);
  return WTF::fastFree((WTF *)a1, v7);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::CachedResource::load(WebCore::CachedResourceLoader &)::$_0,void,WebCore::ResourceError const&,WebCore::ResourceResponse const&>::call(uint64_t a1, WebCore::ResourceError *a2, uint64_t a3)
{
  WebCore::CachedResource *v5;
  uint64_t v7;
  Inspector::IdentifiersFactory *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::CachedResource::ResponseData *v15;
  WTF::StringImpl *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  Inspector::IdentifiersFactory *v30;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  WTF::StringImpl *v43[2];
  int v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;

  v5 = *(WebCore::CachedResource **)(a1 + 8);
  if ((*(_BYTE *)(a3 + 138) & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(Inspector::IdentifiersFactory **)(a1 + 32);
    v9 = *(_QWORD *)(v7 + 280);
    v10 = 88;
    if (!*(_BYTE *)(v9 + 80))
      v10 = 96;
    v11 = *(_DWORD **)(v9 + v10);
    if (v11)
      ++v11[6];
    v12 = *(_QWORD *)(v7 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 80) + 8);
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 8) + 16))(*(_QWORD *)(v14 + 8)))
        {
          v36 = *(WTF::StringImpl **)(v14 + 192);
          if (v36)
            WebCore::InspectorNetworkAgent::didReceiveResponse(v36, v8, (uint64_t)v11, a3, 0);
          v37 = *(_QWORD *)(v14 + 16);
          if (v37)
            WebCore::WebConsoleAgent::didReceiveResponse(v37, (uint64_t)v8, a3);
        }
      }
    }
    if (v11)
    {
      if (v11[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 24))(v11);
      else
        --v11[6];
    }
  }
  if (*((_BYTE *)a2 + 60))
  {
    v15 = WebCore::CachedResource::mutableResponseData(v5);
    WebCore::ResourceError::operator=((uint64_t)v15 + 320, (uint64_t)a2);
    result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::CachedResource *, uint64_t))(*(_QWORD *)v5 + 72))(v5, 3);
    v17 = *(_QWORD *)(a1 + 24);
    v18 = *(_QWORD *)(v17 + 280);
    v19 = 88;
    if (!*(_BYTE *)(v18 + 80))
      v19 = 96;
    v20 = *(_DWORD **)(v18 + v19);
    if (v20)
      ++v20[6];
    v21 = *(_QWORD *)(v17 + 24);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
        result = (WTF::StringImpl *)WebCore::InspectorInstrumentation::didFailLoadingImpl(*(_QWORD *)(*(_QWORD *)(v22 + 80) + 8), *(Inspector::IdentifiersFactory **)(a1 + 32), (uint64_t)v20, a2);
    }
    if (v20)
    {
      if (v20[6] == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v20 + 24))(v20);
      else
        --v20[6];
    }
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    *(_OWORD *)v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v45 = -1;
    v46 = -1;
    v47 = 0;
    (*(void (**)(WebCore::CachedResource *, _QWORD, __int128 *))(*(_QWORD *)v5 + 64))(v5, 0, &v38);
    v24 = v47;
    v47 = 0;
    if (v24)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v24, v23);
    v25 = v43[1];
    v43[1] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v23);
      else
        *(_DWORD *)v25 -= 2;
    }
    v44 = 0;
    v42 = 0u;
    *(_OWORD *)v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v45 = -1;
    v46 = -1;
    v47 = 0;
    v26 = *(_QWORD *)(a1 + 24);
    v27 = *(_QWORD *)(v26 + 280);
    v28 = 88;
    if (!*(_BYTE *)(v27 + 80))
      v28 = 96;
    v29 = *(_DWORD **)(v27 + v28);
    if (v29)
      ++v29[6];
    v30 = *(Inspector::IdentifiersFactory **)(a1 + 32);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v33 = *(_QWORD *)(v26 + 24);
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 8);
        if (v34)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 80) + 8) + 192);
          if (v35)
            WebCore::InspectorNetworkAgent::didFinishLoading(v35, v30, (uint64_t)v29, (uint64_t)&v38);
        }
      }
    }
    if (v29)
    {
      if (v29[6] == 1)
        (*(void (**)(_DWORD *, Inspector::IdentifiersFactory *))(*(_QWORD *)v29 + 24))(v29, v30);
      else
        --v29[6];
    }
    v32 = v47;
    v47 = 0;
    if (v32)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v32, v30);
    result = v43[1];
    v43[1] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CachedResource::load(WebCore::CachedResourceLoader &)::$_1,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WebCore::SubresourceLoader>,WTF::DefaultRefDerefTraits<WebCore::SubresourceLoader>> &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)a1 = off_1E33F8988;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 16), a2);
  return a1;
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)a1 = off_1E33F8988;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v4;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 16), a2);
  return WTF::fastFree((WTF *)a1, v7);
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::CachedResource::load(WebCore::CachedResourceLoader &)::$_1,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WebCore::SubresourceLoader>,WTF::DefaultRefDerefTraits<WebCore::SubresourceLoader>> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *result;
  NSObject *v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isMainThread;
  void *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  *a2 = 0;
  result = *(_DWORD **)(v3 + 384);
  *(_QWORD *)(v3 + 384) = v4;
  if (result)
  {
    if (result[4] == 1)
    {
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      if (*(_QWORD *)(v3 + 384))
        goto LABEL_5;
      goto LABEL_7;
    }
    --result[4];
  }
  if (v4)
  {
LABEL_5:
    *(_WORD *)(v3 + 557) = *(_WORD *)(v3 + 557) & 0xFF1F | 0x20;
    return result;
  }
LABEL_7:
  v6 = qword_1ECE7C608;
  v7 = os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(v8 + 24);
    if (v9)
    {
      v9 = *(_QWORD *)(v9 + 8);
      if (v9)
      {
        if (*(_BYTE *)(v9 + 40))
          v9 = *(_QWORD *)(v9 + 32);
        else
          v9 = 0;
      }
    }
    v10 = *(_QWORD *)(v8 + 32);
    v14 = 134218496;
    v15 = v3;
    v16 = 2048;
    v17 = v9;
    v18 = 2048;
    v19 = v10;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] CachedResource::load: Unable to create SubresourceLoader", (uint8_t *)&v14, 0x20u);
  }
  if ((*(_BYTE *)(v3 + 131) & 4) == 0)
  {
    v11 = *(_QWORD *)(v3 + 488);
    if (v11)
    {
      if (*(_QWORD *)(v11 + 8))
      {
        isMainThread = WTF::isMainThread((WTF *)v7);
        if ((isMainThread & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F549E8);
        }
        {
          isMainThread = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
        }
        if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F54A08);
        }
        WebCore::CachedResource::clearResourceToRevalidate(v3, v13);
      }
    }
  }
  return (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(v3, 3);
}

uint64_t WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(uint64_t *a1, WTF *this)
{
  uint64_t v2;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  WTF *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  for (i = 1; ; v9 = (v11 + i++) & v5)
  {
    v11 = v9;
    v12 = *(WTF **)(v2 + 16 * v9);
    if (v12 != (WTF *)-1)
    {
      if (!v12)
        return 0;
      if (v12 == this)
        break;
    }
  }
  if ((_DWORD)v11 == *(_DWORD *)(v2 - 4))
    return 0;
  v13 = (_QWORD *)(v2 + 16 * v11);
  *v13 = 0;
  if (this)
  {
    v21 = v11;
    v22 = (_QWORD *)(v2 + 16 * v11);
    v20 = v2;
    if (*(_DWORD *)this == 1)
      WTF::fastFree(this, this);
    else
      --*(_DWORD *)this;
    v2 = v20;
    v11 = v21;
    v13 = v22;
  }
  *v13 = -1;
  std::unique_ptr<WebCore::CachedResource::Callback>::reset[abi:sn180100]((unsigned int ***)(v2 + 16 * v11 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  v14 = *a1;
  if (*a1)
    v15 = *(_DWORD *)(v14 - 12) - 1;
  else
    v15 = -1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a1;
  if (*a1)
  {
    v17 = 6 * *(_DWORD *)(v16 - 12);
    v18 = *(_DWORD *)(v16 - 4);
    if (v17 < v18 && v18 >= 9)
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v18 >> 1);
  }
  return 1;
}

unsigned int ***WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(uint64_t a1, void *a2)
{
  WTF *v3;

  v3 = *(WTF **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)a1 = -1;
  return std::unique_ptr<WebCore::CachedResource::Callback>::reset[abi:sn180100]((unsigned int ***)(a1 + 8), 0);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v8);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  WTF **v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (WTF *)-1)
      {
        if (v11)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          v18 = v14 & ((v17 >> 31) ^ v17);
          if (*(_QWORD *)(v13 + 16 * v18))
          {
            v25 = 1;
            do
              v18 = ((_DWORD)v18 + v25++) & v14;
            while (*(_QWORD *)(v13 + 16 * v18));
          }
          v19 = v13 + 16 * v18;
          std::unique_ptr<WebCore::CachedResource::Callback>::reset[abi:sn180100]((unsigned int ***)(v19 + 8), 0);
          v21 = *(WTF **)v19;
          *(_QWORD *)v19 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              WTF::fastFree(v21, v20);
            else
              --*(_DWORD *)v21;
          }
          v22 = *v10;
          *v10 = 0;
          *(_QWORD *)v19 = v22;
          v23 = v4 + 16 * v9;
          v24 = *(_QWORD *)(v23 + 8);
          v23 += 8;
          *(_QWORD *)v23 = 0;
          *(_QWORD *)(v19 + 8) = v24;
          std::unique_ptr<WebCore::CachedResource::Callback>::reset[abi:sn180100]((unsigned int ***)v23, 0);
          v12 = *v10;
          *v10 = 0;
          if (!v12)
            goto LABEL_6;
          if (*(_DWORD *)v12 == 1)
          {
LABEL_26:
            WTF::fastFree(v12, v8);
            goto LABEL_6;
          }
          --*(_DWORD *)v12;
        }
        else
        {
          std::unique_ptr<WebCore::CachedResource::Callback>::reset[abi:sn180100]((unsigned int ***)(v4 + 16 * v9 + 8), 0);
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1)
              goto LABEL_26;
            --*(_DWORD *)v12;
          }
        }
      }
LABEL_6:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

unsigned int ***WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::remove(unsigned int ***result, unsigned int ***a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int ***v11;

  v2 = (uint64_t *)result;
  if (*result)
  {
    v3 = (uint64_t)&(*result)[2 * *((unsigned int *)*result - 1)];
    if ((unsigned int ***)v3 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v3 = 0;
  }
  if ((unsigned int ***)v3 != a2)
  {
    v4 = (WTF *)*a2;
    *a2 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        v11 = a2;
        WTF::fastFree(v4, a2);
        a2 = v11;
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    *a2 = (unsigned int **)-1;
    result = std::unique_ptr<WebCore::CachedResource::Callback>::reset[abi:sn180100](a2 + 1, 0);
    ++*(_DWORD *)(*v2 - 16);
    v5 = *v2;
    if (*v2)
      v6 = *(_DWORD *)(v5 - 12) - 1;
    else
      v6 = -1;
    *(_DWORD *)(v5 - 12) = v6;
    v7 = *v2;
    if (*v2)
    {
      v8 = 6 * *(_DWORD *)(v7 - 12);
      v9 = *(_DWORD *)(v7 - 4);
      if (v8 < v9 && v9 >= 9)
        return (unsigned int ***)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v2, v9 >> 1);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t *v11;
  WTF *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  unsigned int v18;
  uint64_t *v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = (WTF *)*a2;
  v13 = ~(*a2 << 32) + *a2;
  v14 = 9
      * (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) ^ (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = (v15 >> 31) ^ v15;
  for (i = 1; ; ++i)
  {
    v18 = v16 & v10;
    v19 = (uint64_t *)(v8 + 16 * v18);
    v20 = (WTF *)*v19;
    if (!*v19)
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v12 = (WTF *)*a2;
        v19 = v11;
      }
      *a2 = 0;
      result = (uint64_t *)*v19;
      *v19 = (uint64_t)v12;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        else
          --*(_DWORD *)result;
      }
      *((_DWORD *)v19 + 2) = *a3;
      v21 = *v6;
      if (*v6)
        v22 = *(_DWORD *)(v21 - 12) + 1;
      else
        v22 = 1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v6;
      if (*v6)
        v24 = *(_DWORD *)(v23 - 12);
      else
        v24 = 0;
      v25 = (*(_DWORD *)(v23 - 16) + v24);
      v26 = *(unsigned int *)(v23 - 4);
      if (v26 > 0x400)
      {
        if (v26 > 2 * v25)
          goto LABEL_17;
      }
      else
      {
        if (3 * v26 > 4 * v25)
        {
LABEL_17:
          v27 = v23 + 16 * v26;
          v28 = 1;
          goto LABEL_18;
        }
        if (!(_DWORD)v26)
        {
          v29 = 8;
LABEL_30:
          result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v6, v29, (WTF **)v19);
          v19 = result;
          v23 = *v6;
          if (*v6)
            v26 = *(unsigned int *)(v23 - 4);
          else
            v26 = 0;
          goto LABEL_17;
        }
      }
      v29 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
      goto LABEL_30;
    }
    if (v20 != (WTF *)-1)
      break;
    v11 = (uint64_t *)(v8 + 16 * v18);
LABEL_7:
    v16 = i + v18;
  }
  if (v20 != v12)
    goto LABEL_7;
  if ((v9 & 1) != 0)
    v30 = 0;
  else
    v30 = *(unsigned int *)(v8 - 4);
  v28 = 0;
  v27 = v8 + 16 * v30;
LABEL_18:
  *(_QWORD *)a4 = v19;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
  {
    if (6 * *(_DWORD *)(v1 - 12) >= 2 * v2)
      v2 *= 2;
  }
  else
  {
    v2 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::CachedResource::Callback>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v2);
}

uint64_t *WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v6 - 4);
        v23 = 0;
        v22 = v6 + 8 * v27;
        goto LABEL_11;
      }
      if (v15 == -1)
        v24 = v14;
      v13 = (v13 + v25) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v25;
    }
    while (*v14);
    if (v24)
    {
      *v24 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v24;
    }
  }
  *v14 = v9;
  v16 = *v4;
  if (*v4)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_10;
    goto LABEL_20;
  }
  if (3 * v21 <= 4 * v20)
  {
    if (!(_DWORD)v21)
    {
      v26 = 8;
LABEL_23:
      result = WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::rehash(v4, v26, v14);
      v14 = result;
      v18 = *v4;
      if (*v4)
        v21 = *(unsigned int *)(v18 - 4);
      else
        v21 = 0;
      goto LABEL_10;
    }
LABEL_20:
    v26 = (_DWORD)v21 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v21));
    goto LABEL_23;
  }
LABEL_10:
  v22 = v18 + 8 * v21;
  v23 = 1;
LABEL_11:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

_QWORD *WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::CachedResource::*&)(void),WebCore::CachedResource*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

int64x2_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>()
{
  int64x2_t result;

  WebCore::CachedResource::response(void)const::staticEmptyResponse = 0;
  WTF::URL::invalidate((WTF::URL *)&WebCore::CachedResource::response(void)const::staticEmptyResponse);
  byte_1EE2F7D00 = 0;
  word_1EE2F7D08 = 0;
  *(_OWORD *)&qword_1EE2F7CA8 = 0u;
  unk_1EE2F7CB8 = 0u;
  unk_1EE2F7CC8 = 0u;
  unk_1EE2F7CD8 = 0u;
  unk_1EE2F7CE8 = 0u;
  byte_1EE2F7CF8 = 0;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  xmmword_1EE2F7D10 = (__int128)result;
  unk_1EE2F7D20 = result;
  qword_1EE2F7D30 = 0;
  unk_1EE2F7D38 = 0;
  qword_1EE2F7D40 = 0x8000000000000000;
  unk_1EE2F7D48 = result;
  qword_1EE2F7D58 = 0x7FF8000000000000;
  byte_1EE2F7D60 &= 0xF0u;
  word_1EE2F7D68 &= 0xC000u;
  byte_1EE2F7D6A = byte_1EE2F7D6A & 0xF8 | 2;
  qword_1EE2F7D70 = 0;
  byte_1EE2F7D78 = 0;
  byte_1EE2F7D0A = byte_1EE2F7D0A & 0xC0 | 5;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::resourceError(void)::$_0 &&>>()
{
  uint64_t result;

  WebCore::CachedResource::resourceError(void)const::emptyError = 0;
  qword_1EE2F7D90 = 0;
  result = WTF::URL::invalidate((WTF::URL *)&qword_1EE2F7D90);
  qword_1EE2F7DC8 = 0;
  qword_1EE2F7DB8 = 0;
  *(uint64_t *)((char *)&qword_1EE2F7DB8 + 6) = 0;
  byte_1EE2F7DD0 = 1;
  return result;
}

void WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17[3];
  _QWORD *v18;

  v5 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = *((_DWORD *)*a2 + 4);
    if (v8 < 0x100)
      v9 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v9 = v8 >> 8;
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v7;
      v12 = *(WTF **)(v5 + 16 * v11);
      if (!v12)
        break;
      if (v12 != (WTF *)-1 && (WTF::equal(v12, *a2, a3) & 1) != 0)
      {
        v13 = *(_QWORD *)(v5 + 16 * v11 + 8);
        if (v13)
        {
          do
            v14 = __ldaxr((unsigned int *)v13);
          while (__stlxr(v14 + 1, (unsigned int *)v13));
          *a4 = v13;
          v15 = *(_QWORD *)(v13 + 8);
          if (v15)
          {
            v18 = a4;
            ++*(_DWORD *)(v15 + 548);
            v16 = *(_QWORD *)(v15 + 488);
            if (v16)
            {
              if (*(_QWORD *)(v16 + 8))
                WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v15 + 464), (uint64_t *)&v18, (uint64_t)v17);
            }
          }
        }
        else
        {
          *a4 = 0;
        }
        return;
      }
      ++i;
    }
  }
  v17[0] = 0;
  *a4 = 0;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v17, a2);
}

_DWORD **WTF::Vector<WTF::String,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String&>(uint64_t a1, unint64_t a2)
{
  _DWORD **result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  result = (_DWORD **)WTF::Vector<WTF::String,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  if (*result)
    *v6 += 2;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<WTF::String,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - (_QWORD)v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::String,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::String,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  return v3;
}

void **WTF::Vector<WTF::String,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  void **v2;
  void **v3;
  uint64_t v4;
  void *v5;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = result;
    v3 = (void **)*result;
    v4 = *((unsigned int *)result + 3);
    WTF::VectorBuffer<WTF::String,10ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)result, a2);
    result = (void **)memcpy(*v2, v3, 8 * v4);
    if (v2 + 2 != v3 && v3 != 0)
    {
      if (*v2 == v3)
      {
        *v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v3, v5);
    }
  }
  return result;
}

uint64_t WTF::VectorBuffer<WTF::String,10ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 0xB)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 10;
  }
  else
  {
    v3 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

uint64_t *WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  unsigned int v26;
  char v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = ~(*a2 << 32) + *a2;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v7;
    v15 = (_QWORD *)(v6 + 8 * (v12 & v7));
    v16 = (_QWORD *)*v15;
    if (*v15 == -1)
    {
      v8 = (_QWORD *)(v6 + 8 * v14);
      goto LABEL_9;
    }
    if (!v16)
      break;
    if (*v16 == *a2)
    {
      v27 = 0;
      goto LABEL_22;
    }
LABEL_9:
    v12 = i + v14;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*v4 - 16);
    v15 = v8;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v17 = *a2;
  *a2 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v17;
  *v15 = result;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_18;
    goto LABEL_24;
  }
  if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v26 = 8;
      goto LABEL_29;
    }
LABEL_24:
    v26 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_29:
    v15 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::rehash(v4, v26, (_QWORD **)v15);
    result = (uint64_t *)*v15;
  }
LABEL_18:
  v24 = v4[2];
  result[1] = v24;
  result[2] = 0;
  if (v24)
    v25 = (uint64_t **)(v24 + 16);
  else
    v25 = (uint64_t **)(v4 + 1);
  *v25 = result;
  v4[2] = (uint64_t)result;
  v16 = (_QWORD *)*v15;
  v27 = 1;
LABEL_22:
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

BOOL WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(uint64_t *a1, void *a2, WTF *this)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int *v23;
  unsigned int v25;
  unsigned int v26;

  if (this)
  {
    v5 = *a1;
    if (*a1)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = ~(*(_QWORD *)this << 32) + *(_QWORD *)this;
      v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
      v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
      v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
      for (i = 1; ; ++i)
      {
        v12 = v10;
        v13 = *(_QWORD **)(v5 + 8 * v10);
        if (v13 != (_QWORD *)-1)
        {
          if (!v13)
            goto LABEL_17;
          if (*v13 == *(_QWORD *)this)
            break;
        }
        v10 = (v12 + i) & v6;
      }
      if (*(_DWORD *)(v5 - 4) != (_DWORD)v12)
      {
        *(_QWORD *)(v5 + 8 * v12) = -1;
        ++*(_DWORD *)(*a1 - 16);
        v14 = *a1;
        v15 = *a1 ? *(_DWORD *)(v14 - 12) - 1 : -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *a1;
        if (*a1)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::rehash(a1, v18 >> 1, 0);
        }
      }
    }
LABEL_17:
    v20 = *((_QWORD *)this + 1);
    v21 = *((_QWORD *)this + 2);
    if (v20)
    {
      *(_QWORD *)(v20 + 16) = v21;
      v21 = *((_QWORD *)this + 2);
    }
    else
    {
      a1[1] = v21;
    }
    if (v21)
      v22 = (_QWORD *)(v21 + 8);
    else
      v22 = a1 + 2;
    *v22 = v20;
    v23 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v23)
    {
      do
      {
        v25 = __ldaxr(v23);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v23));
      if (!v26)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, a2);
      }
    }
    WTF::fastFree(this, a2);
  }
  return this != 0;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD **)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = ~(*v14 << 32) + *v14;
        v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
        v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
        v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebCore::CachedSVGDocument::CachedSVGDocument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD v13[4];
  WTF::StringImpl *v14;
  uint64_t v15;

  v7 = (_QWORD *)WebCore::CachedResource::CachedResource(a1, a2, 16, a3, a4);
  *v7 = off_1E33F8A20;
  v7[82] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13[0] = &off_1E31F4A18;
  memset(&v13[1], 0, 24);
  WebCore::TextResourceDecoder::create((WebCore::TextResourceDecoder *)&v14, (const WTF::String *)v13, 0, &v15);
  v8 = v15;
  v15 = 0;
  *(_QWORD *)(a1 + 664) = v8;
  WTF::Ref<WebCore::TextResourceDecoder,WTF::RawPtrTraits<WebCore::TextResourceDecoder>,WTF::DefaultRefDerefTraits<WebCore::TextResourceDecoder>>::~Ref(&v15, v9);
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  ++*(_DWORD *)(a5 + 228);
  *(_QWORD *)(a1 + 672) = a5;
  return a1;
}

uint64_t WebCore::CachedSVGDocument::CachedSVGDocument(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebCore::CachedSVGDocument::CachedSVGDocument(a1, a2, a3[52], a3[53], a3[84]);
}

void WebCore::CachedSVGDocument::~CachedSVGDocument(WebCore::CachedSVGDocument *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WebCore::HTMLMetaCharsetParser *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = (_DWORD *)*((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v3)
  {
    if (v3[57] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    else
      --v3[57];
  }
  v4 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *(WTF **)(v4 + 72);
      if (v6)
      {
        *(_QWORD *)(v4 + 72) = 0;
        *(_DWORD *)(v4 + 80) = 0;
        WTF::fastFree(v6, a2);
      }
      v7 = *(WebCore::HTMLMetaCharsetParser **)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;
      if (v7)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v7, (WTF::StringImpl *)a2);
        WTF::fastFree(v8, v9);
      }
      v10 = *(_QWORD *)(v4 + 40);
      *(_QWORD *)(v4 + 40) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  WebCore::CachedResource::~CachedResource(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CachedSVGDocument::~CachedSVGDocument(this, a2);
  WTF::fastFree(v2, v3);
}

const char *WebCore::CachedSVGDocument::setEncoding(WebCore::CachedSVGDocument *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const char *result;
  void *v7;
  const char *v8;
  void *v9;
  __int16 v10;
  WTF *v11;
  WebCore::HTMLMetaCharsetParser *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  void *v20;
  void *v21;
  __int16 v22;
  const char *v23;
  void *v24;

  v2 = *((_QWORD *)this + 83);
  if (v2)
  {
    ++*(_DWORD *)v2;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v4 = *(_QWORD *)(v3 + 8);
      v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v4 = 0;
      v5 = 0x100000000;
    }
    result = (const char *)PAL::atomCanonicalTextEncodingName(v4, (const char *)v5);
    v8 = result;
    v9 = v7;
    v23 = result;
    v24 = v7;
    if (v7 && (result = (const char *)PAL::nonBackslashEncodings) != 0 && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      result = (const char *)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v23);
      if (result)
        v10 = 165;
      else
        v10 = 92;
      if (!v9)
      {
LABEL_18:
        if (*(_DWORD *)v2 == 1)
        {
          v11 = *(WTF **)(v2 + 72);
          if (v11)
          {
            *(_QWORD *)(v2 + 72) = 0;
            *(_DWORD *)(v2 + 80) = 0;
            WTF::fastFree(v11, v7);
          }
          v12 = *(WebCore::HTMLMetaCharsetParser **)(v2 + 48);
          *(_QWORD *)(v2 + 48) = 0;
          if (v12)
          {
            WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v12, (WTF::StringImpl *)v7);
            WTF::fastFree(v13, v14);
          }
          v15 = *(_QWORD *)(v2 + 40);
          *(_QWORD *)(v2 + 40) = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          return (const char *)WTF::fastFree((WTF *)v2, v7);
        }
        else
        {
          --*(_DWORD *)v2;
        }
        return result;
      }
    }
    else
    {
      v10 = 92;
      if (!v7)
        goto LABEL_18;
    }
    if (!*(_BYTE *)(v2 + 94))
    {
      *(_QWORD *)(v2 + 16) = v8;
      *(_QWORD *)(v2 + 24) = v9;
      *(_WORD *)(v2 + 32) = v10;
      result = *(const char **)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (result)
        result = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
      *(_DWORD *)(v2 + 56) = 5;
    }
    goto LABEL_18;
  }
  v16 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v17 = *(_QWORD *)(v16 + 8);
    v18 = *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v17 = 0;
    v18 = 0x100000000;
  }
  result = (const char *)PAL::atomCanonicalTextEncodingName(v17, (const char *)v18);
  v19 = result;
  v21 = v20;
  v23 = result;
  v24 = v20;
  if (v20 && (result = (const char *)PAL::nonBackslashEncodings) != 0 && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    result = (const char *)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v23);
    if (result)
      v22 = 165;
    else
      v22 = 92;
  }
  else
  {
    v22 = 92;
  }
  if (v21 && !MEMORY[0x5E])
  {
    MEMORY[0x10] = v19;
    MEMORY[0x18] = v21;
    MEMORY[0x20] = v22;
    result = (const char *)MEMORY[0x28];
    MEMORY[0x28] = 0;
    if (result)
      result = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
    MEMORY[0x38] = 5;
  }
  return result;
}

uint64_t WebCore::CachedSVGDocument::encoding@<X0>(WebCore::CachedSVGDocument *this@<X0>, WTF::String *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  WTF *v5;
  WebCore::HTMLMetaCharsetParser *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 83);
  if (v2)
    ++*(_DWORD *)v2;
  result = WTF::String::String(a2, *(const char **)(v2 + 16));
  if (*(_DWORD *)v2 == 1)
  {
    v5 = *(WTF **)(v2 + 72);
    if (v5)
    {
      *(_QWORD *)(v2 + 72) = 0;
      *(_DWORD *)(v2 + 80) = 0;
      WTF::fastFree(v5, v4);
    }
    v6 = *(WebCore::HTMLMetaCharsetParser **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v6)
    {
      WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v6, (WTF::StringImpl *)v4);
      WTF::fastFree(v7, v8);
    }
    v9 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return WTF::fastFree((WTF *)v2, v4);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return result;
}

uint64_t WebCore::CachedSVGDocument::finishLoading(WebCore::CachedSVGDocument *this, const WebCore::FragmentedSharedBuffer *a2, const WebCore::NetworkLoadMetrics *a3)
{
  WebCore::LocalFrame *v6;
  uint64_t *v7;
  uint64_t v8;
  WebCore::TextResourceDecoder *v9;
  WebCore::SharedBuffer *v10;
  const char *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  void *v14;
  WebCore::SharedBuffer *v16;
  WTF::StringImpl *v17;
  uint64_t v18;

  if (a2)
  {
    v6 = (WebCore::LocalFrame *)*((_QWORD *)this + 84);
    ++*((_DWORD *)v6 + 57);
    v7 = WebCore::CachedResource::response(this);
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v7, 1);
    WebCore::SVGDocument::create(0, v6, (const WebCore::Settings *)v7, &v18);
    if (*((_DWORD *)v6 + 57) == 1)
      (*(void (**)(WebCore::LocalFrame *))(*(_QWORD *)v6 + 24))(v6);
    else
      --*((_DWORD *)v6 + 57);
    v8 = v18;
    v9 = (WebCore::TextResourceDecoder *)*((_QWORD *)this + 83);
    if (v9)
      ++*(_DWORD *)v9;
    WebCore::FragmentedSharedBuffer::makeContiguous(a2, &v16);
    v10 = v16;
    v11 = (const char *)WebCore::SharedBuffer::data(v16);
    WebCore::TextResourceDecoder::decodeAndFlush(v9, v11, *((_QWORD *)v10 + 6), &v17);
    WebCore::Document::setMarkupUnsafe(v8, &v17, 4);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v16, v12);
    if (v9)
      WTF::RefCounted<WebCore::TextResourceDecoder>::deref(v9, v14);
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)this + 82, &v18);
    WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v18);
  }
  return WebCore::CachedResource::finishLoading(this, a2, a3);
}

void WebCore::CachedSVGDocumentReference::~CachedSVGDocumentReference(WebCore::CachedSVGDocumentReference *this, void *a2)
{
  unsigned int *v3;
  unsigned int **v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CachedResource *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  unsigned int *v14;
  _BYTE v15[24];
  unsigned int **v16;

  v4 = (unsigned int **)((char *)this + 24);
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v3)
  {
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
    v14 = v3;
    v6 = *((_QWORD *)v3 + 1);
    if (!v6
      || (v16 = &v14, ++*(_DWORD *)(v6 + 548), (v7 = *(_QWORD *)(v6 + 488)) == 0)
      || !*(_QWORD *)(v7 + 8)
      || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v16, (uint64_t)v15), (v3 = v14) != 0))
    {
      v8 = (WebCore::CachedResource *)*((_QWORD *)v3 + 1);
      if (v8)
        WebCore::CachedResource::removeClient(v8, (unsigned int **)this);
    }
  }
  else
  {
    v14 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v14, a2);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, v9);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v10);
      else
        --*(_DWORD *)v13;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::CachedSVGDocumentReference::~CachedSVGDocumentReference(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::CachedSVGDocumentReference::load(WebCore::CachedSVGDocumentReference *this, WebCore::CachedResourceLoader *a2, const WebCore::ResourceLoaderOptions *a3)
{
  _DWORD *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  WebCore::Document *v13;
  WTF::StringImpl *v14;
  char v15;
  _DWORD *v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebCore::CachedResource *v26;
  uint64_t *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  const WebCore::ResourceLoaderOptions *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  unsigned int *v48;
  WTF::StringImpl *v49;
  __int128 v50;
  __int128 v51;
  unsigned int **v52;
  unsigned int *v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[5];
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  char v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  _QWORD v69[19];
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  _WORD v76[76];
  uint64_t v77;
  WTF::StringImpl *v78[2];
  uint64_t v79;
  __int16 v80;
  _DWORD v81[2];
  _DWORD *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  char v90;
  __int16 v91;
  _DWORD *v92;
  _DWORD *v93;
  char v94;
  __int128 v95;
  _DWORD *v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 32))
    return;
  v81[0] = *(_DWORD *)a3;
  *(_DWORD *)((char *)v81 + 3) = *(_DWORD *)((char *)a3 + 3);
  v5 = (_DWORD *)*((_QWORD *)a3 + 1);
  if (v5)
    *v5 += 2;
  v82 = v5;
  v6 = *((_OWORD *)a3 + 2);
  v83 = *((_OWORD *)a3 + 1);
  v84 = v6;
  v7 = *((_QWORD *)a3 + 6);
  v8 = *((unsigned int *)a3 + 17);
  v86 = 0;
  v87 = 0;
  v85 = v7;
  v88 = v8;
  if ((_DWORD)v8)
  {
    if (v8 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v42 = a3;
    v43 = WTF::fastMalloc((WTF *)(16 * v8));
    v87 = v8;
    v86 = v43;
    a3 = v42;
    v44 = *((unsigned int *)v42 + 17);
    if ((_DWORD)v44)
    {
      v45 = *((_QWORD *)v42 + 7);
      v46 = v45 + 16 * v44;
      do
      {
        v47 = *(_DWORD **)v45;
        if (*(_QWORD *)v45)
          *v47 += 2;
        *(_QWORD *)v43 = v47;
        *(_BYTE *)(v43 + 8) = *(_BYTE *)(v45 + 8);
        v45 += 16;
        v43 += 16;
      }
      while (v45 != v46);
    }
  }
  v89 = *((_DWORD *)a3 + 18);
  v90 = *((_BYTE *)a3 + 76);
  LOBYTE(v91) = 0;
  v94 = 0;
  if (*((_BYTE *)a3 + 104))
  {
    v91 = *((_WORD *)a3 + 40);
    v9 = (_DWORD *)*((_QWORD *)a3 + 11);
    if (v9)
      *v9 += 2;
    v92 = v9;
    v10 = (_DWORD *)*((_QWORD *)a3 + 12);
    if (v10)
      *v10 += 2;
    v93 = v10;
    v94 = 1;
  }
  v95 = *((_OWORD *)a3 + 7);
  v11 = (_DWORD *)*((_QWORD *)a3 + 16);
  if (v11)
    *v11 += 2;
  v96 = v11;
  BYTE1(v81[0]) = 1;
  v12 = *((_QWORD *)a2 + 9);
  if (v12)
    v13 = *(WebCore::Document **)(v12 + 8);
  else
    v13 = 0;
  WebCore::Document::completeURL(v13, (_QWORD *)this + 2, (uint64_t)v13 + 848, 0, (WTF::URL *)&v49);
  v14 = v49;
  if (v49)
    *(_DWORD *)v49 += 2;
  v53 = (unsigned int *)v14;
  v54 = v50;
  v55 = v51;
  v56[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v56);
  v57 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = v69[0];
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0x10000;
  v15 = v63 & 0x80 | 4;
  v63 = v15;
  *(_QWORD *)&v64 = 0;
  v16 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v16 += 2;
    v15 = v63;
  }
  *((_QWORD *)&v64 + 1) = v16;
  v65 = 0;
  LOBYTE(v66) = 0;
  BYTE4(v66) = 0;
  v67 = v67 & 0xE0 | 5;
  v63 = v15 | 2;
  v68 = 0;
  WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)v69, (uint64_t *)&v53);
  v17 = v64;
  v64 = 0u;
  v70 = v17;
  v71 = v65;
  v72 = v66;
  v73 = v67;
  v18 = v68;
  v65 = 0;
  v68 = 0;
  v74 = v18;
  v75 = 0;
  WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v76, (const WebCore::ResourceLoaderOptions *)v81);
  v76[72] = 0;
  v77 = 0;
  *(_OWORD *)v78 = 0u;
  WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)v69, &v79);
  v80 = 0;
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v53, v19);
  v21 = v49;
  v49 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      v21 = (WTF::StringImpl *)WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v22 || (v21 = *(WTF::StringImpl **)(v22 + 96)) == 0)
    v21 = (WTF::StringImpl *)WebCore::threadGlobalDataSlow(v21);
  v23 = (WTF::StringImpl **)*((_QWORD *)v21 + 4);
  if (!v23)
  {
    v41 = v21;
    WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v21);
    v23 = (WTF::StringImpl **)*((_QWORD *)v41 + 4);
  }
  v24 = *v23;
  if (v24)
    *(_DWORD *)v24 += 2;
  v25 = v78[0];
  v78[0] = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v20);
    else
      *(_DWORD *)v25 -= 2;
  }
  WebCore::CachedResourceLoader::requestSVGDocument((WebCore::ResourceRequest *)v69, a2, (uint64_t)&v53);
  if ((_DWORD)v57 || (v28 = v53) == 0)
  {
    v26 = 0;
    v48 = 0;
LABEL_34:
    v27 = (uint64_t *)((char *)this + 24);
    goto LABEL_42;
  }
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  v48 = v28;
  v30 = *((_QWORD *)v28 + 1);
  if (!v30)
  {
    v26 = 0;
    goto LABEL_34;
  }
  v52 = &v48;
  ++*(_DWORD *)(v30 + 548);
  v31 = *(_QWORD *)(v30 + 488);
  if (v31 && *(_QWORD *)(v31 + 8))
  {
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v30 + 464), (uint64_t *)&v52, (uint64_t)&v49);
    v28 = v48;
    v27 = (uint64_t *)((char *)this + 24);
    if (!v48)
    {
      v26 = 0;
      goto LABEL_42;
    }
  }
  else
  {
    v27 = (uint64_t *)((char *)this + 24);
  }
  v26 = (WebCore::CachedResource *)*((_QWORD *)v28 + 1);
LABEL_42:
  WebCore::CachedResourceHandleBase::setResource(v27, v26);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v48, v32);
  if ((_DWORD)v57 != -1)
    (*(&off_1E33F8EE8 + v57))((int)&v49, (WebCore::CachedResourceHandleBase *)&v53);
  v34 = (unsigned int *)*v27;
  if (*v27)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v52 = (unsigned int **)v34;
    v36 = *((_QWORD *)v34 + 1);
    if (!v36
      || (v49 = (WTF::StringImpl *)&v52, ++*(_DWORD *)(v36 + 548), (v37 = *(_QWORD *)(v36 + 488)) == 0)
      || !*(_QWORD *)(v37 + 8)
      || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v36 + 464), (uint64_t *)&v49, (uint64_t)&v53), (v34 = (unsigned int *)v52) != 0))
    {
      v38 = *((_QWORD *)v34 + 1);
      if (v38)
      {
        if (WebCore::CachedResource::addClientToSet(*((WebCore::CachedResource **)v34 + 1), this))
          (*(void (**)(uint64_t, WebCore::CachedSVGDocumentReference *))(*(_QWORD *)v38 + 88))(v38, this);
      }
    }
  }
  else
  {
    v52 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v52, v33);
  *((_BYTE *)this + 32) = 1;
  WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v69, v39);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v81, v40);
}

WebCore::CachedResourceHandleBase *std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedSVGDocument>,WebCore::ResourceError>::value_or<decltype(nullptr)>@<X0>(WebCore::CachedResourceHandleBase *result@<X0>, WebCore::CachedResourceHandleBase *a2@<X8>)
{
  if (!*((_DWORD *)result + 20))
    return WebCore::CachedResourceHandleBase::CachedResourceHandleBase(a2, result);
  *(_QWORD *)a2 = 0;
  return result;
}

double WebCore::CachedSVGFont::CachedSVGFont(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  double result;

  v6 = WebCore::CachedResource::CachedResource(a1, a2, 5, a3, a4);
  result = 0.0;
  *(_OWORD *)(v6 + 664) = 0u;
  *(_DWORD *)(v6 + 656) = 0;
  *(_QWORD *)v6 = off_1E33F8B48;
  *(_QWORD *)(v6 + 688) = 0;
  *(_QWORD *)(v6 + 680) = 0;
  ++*(_DWORD *)(a5 + 228);
  *(_QWORD *)(v6 + 696) = a5;
  return result;
}

uint64_t WebCore::CachedSVGFont::CachedSVGFont(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v4 = a3[52];
  v5 = (_DWORD *)a3[53];
  if (v5)
    ++v5[2];
  v6 = (_DWORD *)a3[87];
  ++v6[57];
  WebCore::CachedResource::CachedResource(a1, a2, 5, v4, (uint64_t)v5);
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 656) = 0;
  *(_QWORD *)a1 = off_1E33F8B48;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  v7 = v6[57];
  v6[57] = v7 + 1;
  *(_QWORD *)(a1 + 696) = v6;
  if (v7)
  {
    v6[57] = v7;
    if (!v5)
      return a1;
  }
  else
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
    if (!v5)
      return a1;
  }
  if (v5[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 120))(v5);
  else
    --v5[2];
  return a1;
}

BOOL WebCore::CachedSVGFont::ensureCustomFontData(WebCore::CachedSVGFont *this)
{
  uint64_t v2;
  unsigned int v3;
  void *v4;
  _BOOL8 v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  __int16 v15;
  WebCore::LocalFrame *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  const WTF::String *v20;
  PAL *v21;
  char *v22;
  uint64_t *v23;
  __int128 v24;
  __int16 v25;
  uint64_t *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  WebCore::HTMLMetaCharsetParser *v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF *v49;
  char v50;
  void *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  WTF *v64;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  WTF *v74;
  WTF *v76[2];
  char v77;
  WTF::StringImpl *v78;
  char v79;
  WTF::StringImpl *v80[5];
  WTF *v81;
  WTF *v82;
  char v83;

  if (!*((_QWORD *)this + 85))
  {
    v5 = 0;
    v15 = *(_WORD *)((char *)this + 557);
    if ((v15 & 0x400) != 0 || (v15 >> 5) - 3 < 2)
      return v5;
    if (!*((_QWORD *)this + 49))
      return 0;
    v16 = (WebCore::LocalFrame *)*((_QWORD *)this + 87);
    ++*((_DWORD *)v16 + 57);
    v80[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v80);
    WebCore::SVGDocument::create(0, v16, (const WebCore::Settings *)v80, (uint64_t *)v76);
    v18 = v80[0];
    v80[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (*((_DWORD *)v16 + 57) == 1)
      (*(void (**)(WebCore::LocalFrame *))(*(_QWORD *)v16 + 24))(v16);
    else
      --*((_DWORD *)v16 + 57);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v78 = v80[0];
    v19 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)v19 = 1;
    v21 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&v78, v20);
    *(_DWORD *)(v19 + 4) = (_DWORD)v21;
    if ((_DWORD)v21 == 2)
    {
      v23 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
      {
        PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
        *((_QWORD *)&xmmword_1ECE86C80 + 1) = v22;
        v80[0] = (WTF::StringImpl *)xmmword_1ECE86C80;
        v80[1] = (WTF::StringImpl *)v22;
        if (v22 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
        {
          if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)v80))
          {
            v66 = 165;
          }
          else
          {
            v66 = 92;
          }
        }
        else
        {
          v66 = 92;
        }
        word_1ECE86C90 = v66;
      }
    }
    else
    {
      v23 = PAL::Latin1Encoding(v21);
    }
    *(_QWORD *)(v19 + 8) = &off_1E31F4A18;
    v24 = *(_OWORD *)(v23 + 1);
    v25 = *((_WORD *)v23 + 12);
    *(_QWORD *)(v19 + 40) = 0;
    v26 = (uint64_t *)(v19 + 40);
    *(_WORD *)(v19 + 32) = v25;
    *(_OWORD *)(v19 + 16) = v24;
    *(_QWORD *)(v19 + 48) = 0;
    *(_DWORD *)(v19 + 56) = 0;
    *(_QWORD *)(v19 + 72) = 0;
    *(_QWORD *)(v19 + 80) = 0;
    *(_QWORD *)(v19 + 64) = 0;
    *(_QWORD *)(v19 + 87) = 0;
    v27 = v78;
    v78 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = WebCore::ScriptDisallowedScope::s_count;
    WebCore::ScriptDisallowedScope::s_count = 0;
    v29 = v76[0];
    WebCore::FragmentedSharedBuffer::makeContiguous(*((WTF **)this + 49), &v78);
    v30 = v78;
    if (*((_DWORD *)v78 + 5))
    {
      v31 = *(_QWORD *)(*((_QWORD *)v78 + 1) + 8);
      v32 = *(unsigned int *)(v31 + 24);
      if ((_DWORD)v32 == -1)
      {
        v56 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_129:
        *(_QWORD *)(v19 + 16) = 0;
        *(_DWORD *)(v19 + 24) = 0;
        WTF::fastFree(v56, v51);
LABEL_79:
        WTF::fastFree((WTF *)v19, v51);
        goto LABEL_84;
      }
      v80[0] = (WTF::StringImpl *)&v79;
      v33 = (const char *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v32])(v80, v31 + 8);
    }
    else
    {
      v33 = 0;
    }
    v23 = (uint64_t *)((char *)this + 680);
    WebCore::TextResourceDecoder::decodeAndFlush((WebCore::TextResourceDecoder *)v19, v33, *((_QWORD *)v30 + 6), v80);
    WebCore::Document::setMarkupUnsafe((uint64_t)v29, v80, 4);
    v35 = v80[0];
    v80[0] = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v78, v34);
    v36 = *(unsigned __int8 *)(v19 + 92);
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)this + 85, (uint64_t *)v76);
    WebCore::ScriptDisallowedScope::s_count = v28;
    if (*(_DWORD *)v19 == 1)
    {
      v43 = *(WTF **)(v19 + 72);
      if (v43)
      {
        *(_QWORD *)(v19 + 72) = 0;
        *(_DWORD *)(v19 + 80) = 0;
        WTF::fastFree(v43, v37);
      }
      v44 = *(WebCore::HTMLMetaCharsetParser **)(v19 + 48);
      *(_QWORD *)(v19 + 48) = 0;
      if (v44)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v44, (WTF::StringImpl *)v37);
        WTF::fastFree(v45, v46);
      }
      v47 = *v26;
      *v26 = 0;
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      WTF::fastFree((WTF *)v19, v37);
    }
    else
    {
      --*(_DWORD *)v19;
    }
    WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)v76);
    if (v36)
    {
      v39 = *v23;
      *v23 = 0;
      if (!v39)
        goto LABEL_44;
      if (*(_DWORD *)(v39 + 24) == 2)
      {
        if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v39, v38);
      }
      else
      {
        *(_DWORD *)(v39 + 24) -= 2;
      }
    }
    if (*v23)
      WebCore::CachedSVGFont::maybeInitializeExternalSVGFontElement(this);
LABEL_44:
    v40 = *((_QWORD *)this + 86);
    if (!v40)
      return 0;
    if (!*(_QWORD *)(v40 + 8))
      return 0;
    if (!WebCore::CachedSVGFont::maybeInitializeExternalSVGFontElement(this))
      return 0;
    v41 = *(_QWORD *)(*((_QWORD *)this + 86) + 8);
    v42 = *(_QWORD *)(v41 + 80);
    if (!v42)
      return 0;
    while ((*(_WORD *)(v42 + 28) & 0x20) == 0
         || *(_QWORD *)(*(_QWORD *)(v42 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::font_faceTag + 24))
    {
      v5 = 0;
      v42 = *(_QWORD *)(v42 + 56);
      if (!v42)
        return v5;
    }
    *(_DWORD *)(v41 + 24) += 2;
    WebCore::SVGToOTFFontConverter::SVGToOTFFontConverter((WebCore::SVGToOTFFontConverter *)v80, (const WebCore::SVGFontElement *)v41);
    if (v83 || !WebCore::SVGToOTFFontConverter::convertSVGToOTFFont((WebCore::SVGToOTFFontConverter *)v80))
    {
      v50 = 0;
      LOBYTE(v76[0]) = 0;
      LOBYTE(v26) = 1;
    }
    else
    {
      LOBYTE(v26) = 0;
      v76[0] = v81;
      v49 = v82;
      v81 = 0;
      v82 = 0;
      v76[1] = v49;
      v50 = 1;
    }
    v77 = v50;
    WebCore::SVGToOTFFontConverter::~SVGToOTFFontConverter((WebCore::SVGToOTFFontConverter *)v80, v48);
    if (*(_DWORD *)(v41 + 24) == 2)
    {
      if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v41, v51);
    }
    else
    {
      *(_DWORD *)(v41 + 24) -= 2;
    }
    if ((v26 & 1) != 0)
    {
      v52 = *v23;
      *v23 = 0;
      if (v52)
      {
        if (*(_DWORD *)(v52 + 24) == 2)
        {
          if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v52, v51);
        }
        else
        {
          *(_DWORD *)(v52 + 24) -= 2;
        }
      }
      v19 = *((_QWORD *)this + 86);
      *((_QWORD *)this + 86) = 0;
      if (v19)
      {
        do
        {
          v53 = __ldaxr((unsigned int *)v19);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, (unsigned int *)v19));
        if (!v54)
        {
          atomic_store(1u, (unsigned int *)v19);
          v55 = *(unsigned int *)(v19 + 28);
          if ((_DWORD)v55)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v19 + 16), (WTF::StringImpl *)(*(_QWORD *)(v19 + 16) + 32 * v55));
          v56 = *(WTF **)(v19 + 16);
          if (!v56)
            goto LABEL_79;
          goto LABEL_129;
        }
      }
    }
    else
    {
      WebCore::FragmentedSharedBuffer::create(v76, (uint64_t *)v80);
      v57 = WTF::fastMalloc((WTF *)0x38);
      WebCore::SharedBuffer::SharedBuffer(v57, (uint64_t *)v80);
      WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)v80, v58);
      v80[0] = 0;
      v60 = *((_QWORD *)this + 84);
      *((_QWORD *)this + 84) = v57;
      if (v60)
      {
        do
        {
          v61 = __ldaxr((unsigned int *)v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, (unsigned int *)v60));
        if (!v62)
        {
          atomic_store(1u, (unsigned int *)v60);
          v67 = *(unsigned int *)(v60 + 20);
          if ((_DWORD)v67)
          {
            v68 = *(_QWORD *)(v60 + 8);
            v69 = v68 + 16 * v67;
            do
            {
              v70 = *(unsigned int **)(v68 + 8);
              *(_QWORD *)(v68 + 8) = 0;
              if (v70)
              {
                do
                {
                  v71 = __ldaxr(v70);
                  v72 = v71 - 1;
                }
                while (__stlxr(v72, v70));
                if (!v72)
                {
                  atomic_store(1u, v70);
                  v73 = v70[6];
                  if ((_DWORD)v73 != -1)
                    ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F8F08[v73])(&v78, v70 + 2);
                  v70[6] = -1;
                  WTF::fastFree((WTF *)v70, v59);
                }
              }
              v68 += 16;
            }
            while (v68 != v69);
          }
          v74 = *(WTF **)(v60 + 8);
          if ((WTF *)(v60 + 24) != v74 && v74 != 0)
          {
            *(_QWORD *)(v60 + 8) = 0;
            *(_DWORD *)(v60 + 16) = 0;
            WTF::fastFree(v74, v59);
          }
          WTF::fastFree((WTF *)v60, v59);
        }
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v80, v59);
    }
LABEL_84:
    if (v77 && v76[0])
      WTF::fastFree(v76[0], v51);
    if ((v26 & 1) == 0 && *v23)
      goto LABEL_2;
    return 0;
  }
LABEL_2:
  v2 = *((_QWORD *)this + 84);
  if (!v2)
    return WebCore::CachedFont::ensureCustomFontData(this, 0);
  do
    v3 = __ldaxr((unsigned int *)v2);
  while (__stlxr(v3 + 1, (unsigned int *)v2));
  v5 = WebCore::CachedFont::ensureCustomFontData(this, (WebCore::SharedBuffer *)v2);
  do
  {
    v6 = __ldaxr((unsigned int *)v2);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)v2));
  if (!v7)
  {
    atomic_store(1u, (unsigned int *)v2);
    v8 = *(unsigned int *)(v2 + 20);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(v2 + 8);
      v10 = v9 + 16 * v8;
      do
      {
        v11 = *(unsigned int **)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (v11)
        {
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            atomic_store(1u, v11);
            v14 = v11[6];
            if ((_DWORD)v14 != -1)
              ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F8F08[v14])(v80, v11 + 2);
            v11[6] = -1;
            WTF::fastFree((WTF *)v11, v4);
          }
        }
        v9 += 16;
      }
      while (v9 != v10);
    }
    v64 = *(WTF **)(v2 + 8);
    if ((WTF *)(v2 + 24) != v64 && v64 != 0)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v64, v4);
    }
    WTF::fastFree((WTF *)v2, v4);
  }
  return v5;
}

uint64_t WebCore::CachedSVGFont::maybeInitializeExternalSVGFontElement(WebCore::CachedSVGFont *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  __int16 v9;
  BOOL v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  __int16 v19;
  BOOL v20;
  BOOL v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;

  v2 = *((_QWORD *)this + 86);
  if (!v2 || (result = *(_QWORD *)(v2 + 8)) == 0)
  {
    if ((*((_BYTE *)this + 344) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedSVGFont *)((char *)this + 160));
      *((_BYTE *)this + 344) |= 1u;
    }
    WTF::URL::fragmentIdentifier((WebCore::CachedSVGFont *)((char *)this + 160));
    if ((v4 & 0xFF00000000) != 0)
      WTF::AtomStringImpl::add();
    else
      WTF::AtomStringImpl::add();
    v6 = (_QWORD *)*((_QWORD *)this + 85);
    if (v37 && *((_DWORD *)v37 + 1))
    {
      v11 = v6[10];
      if (v11)
      {
        while (1)
        {
          v8 = (_QWORD *)v11;
          v12 = *(_WORD *)(v11 + 28);
          if ((v12 & 0x20) != 0)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24);
            v14 = *(_QWORD *)(WebCore::SVGNames::fontTag + 24);
            if (v13 == v14)
              break;
          }
          if ((v12 & 4) != 0)
          {
            v11 = v8[10];
            if (v11)
              continue;
          }
          if (v8 == v6)
            goto LABEL_76;
          while (1)
          {
            v11 = v8[7];
            if (v11)
              break;
            v8 = (_QWORD *)v8[4];
            if (v8)
              v15 = v8 == v6;
            else
              v15 = 1;
            if (v15)
              goto LABEL_76;
          }
        }
        while (1)
        {
          v16 = v8[13];
          if (v16)
          {
            v17 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            if (*(_QWORD *)(v16 + 24))
            {
              v22 = *(unsigned int *)(v16 + 4);
              if ((v22 & 1) != 0)
              {
                v23 = *(_QWORD **)(v16 + 40);
                v24 = *(unsigned int *)(v16 + 52);
              }
              else
              {
                v23 = (_QWORD *)(v16 + 32);
                v24 = v22 >> 5;
              }
              if (v24)
              {
                while (1)
                {
                  v25 = *v23;
                  if (*v23 == WebCore::HTMLNames::idAttr
                    || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                    && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
                  {
                    break;
                  }
                  v23 += 2;
                  if (!--v24)
                    goto LABEL_71;
                }
              }
              else
              {
LABEL_71:
                v23 = 0;
              }
              v17 = (WTF::StringImpl **)(v23 + 1);
            }
          }
          else
          {
            v17 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
          }
          if (*v17 == v37)
            break;
          v18 = v8[10];
          if (!v18)
          {
            if (v8 != v6)
            {
              do
              {
                v18 = v8[7];
                if (v18)
                  goto LABEL_40;
                v8 = (_QWORD *)v8[4];
                if (v8)
                  v21 = v8 == v6;
                else
                  v21 = 1;
              }
              while (!v21);
            }
            goto LABEL_76;
          }
LABEL_40:
          while (1)
          {
            v8 = (_QWORD *)v18;
            v19 = *(_WORD *)(v18 + 28);
            if ((v19 & 0x20) != 0 && *(_QWORD *)(v8[12] + 24) == v14)
              break;
            if ((v19 & 4) != 0)
            {
              v18 = v8[10];
              if (v18)
                continue;
            }
            if (v8 == v6)
              goto LABEL_76;
            while (1)
            {
              v18 = v8[7];
              if (v18)
                break;
              v8 = (_QWORD *)v8[4];
              if (v8)
                v20 = v8 == v6;
              else
                v20 = 1;
              if (v20)
                goto LABEL_76;
            }
          }
        }
LABEL_73:
        v26 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)v8);
        v27 = v26;
        if (v26)
        {
          do
            v28 = __ldaxr(v26);
          while (__stlxr(v28 + 1, v26));
        }
LABEL_77:
        v29 = *((_QWORD *)this + 86);
        *((_QWORD *)this + 86) = v27;
        if (!v29)
          goto LABEL_80;
        do
        {
          v30 = __ldaxr((unsigned int *)v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, (unsigned int *)v29));
        if (!v31)
        {
          atomic_store(1u, (unsigned int *)v29);
          v33 = *(unsigned int *)(v29 + 28);
          if ((_DWORD)v33)
          {
            v36 = v29;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v29 + 16), (WTF::StringImpl *)(*(_QWORD *)(v29 + 16) + 32 * v33));
            v29 = v36;
          }
          v34 = *(WTF **)(v29 + 16);
          if (v34)
          {
            *(_QWORD *)(v29 + 16) = 0;
            *(_DWORD *)(v29 + 24) = 0;
            v35 = v29;
            WTF::fastFree(v34, v5);
            v29 = v35;
          }
          WTF::fastFree((WTF *)v29, v5);
          if (!v37)
            goto LABEL_83;
        }
        else
        {
LABEL_80:
          if (!v37)
          {
LABEL_83:
            v32 = *((_QWORD *)this + 86);
            if (v32)
              return *(_QWORD *)(v32 + 8);
            else
              return 0;
          }
        }
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)v37 -= 2;
        goto LABEL_83;
      }
    }
    else
    {
      v7 = v6[10];
      if (v7)
      {
        while (1)
        {
          v8 = (_QWORD *)v7;
          v9 = *(_WORD *)(v7 + 28);
          if ((v9 & 0x20) != 0 && *(_QWORD *)(v8[12] + 24) == *(_QWORD *)(WebCore::SVGNames::fontTag + 24))
            goto LABEL_73;
          if ((v9 & 4) != 0)
          {
            v7 = v8[10];
            if (v7)
              continue;
          }
          if (v8 == v6)
            break;
          while (1)
          {
            v7 = v8[7];
            if (v7)
              break;
            v8 = (_QWORD *)v8[4];
            if (v8)
              v10 = v8 == v6;
            else
              v10 = 1;
            if (v10)
              goto LABEL_76;
          }
        }
      }
    }
LABEL_76:
    v27 = 0;
    goto LABEL_77;
  }
  return result;
}

void WebCore::CachedScript::~CachedScript(WebCore::CachedScript *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WebCore::HTMLMetaCharsetParser *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(WTF **)(v3 + 72);
      if (v5)
      {
        *(_QWORD *)(v3 + 72) = 0;
        *(_DWORD *)(v3 + 80) = 0;
        WTF::fastFree(v5, a2);
      }
      v6 = *(WebCore::HTMLMetaCharsetParser **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v6)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v6, (WTF::StringImpl *)a2);
        WTF::fastFree(v7, v8);
      }
      v9 = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::CachedResource::~CachedResource(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  WebCore::HTMLMetaCharsetParser *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v7 = *(WTF **)(v3 + 72);
      if (v7)
      {
        *(_QWORD *)(v3 + 72) = 0;
        *(_DWORD *)(v3 + 80) = 0;
        WTF::fastFree(v7, a2);
      }
      v8 = *(WebCore::HTMLMetaCharsetParser **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v8)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v8, (WTF::StringImpl *)a2);
        WTF::fastFree(v9, v10);
      }
      v11 = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::CachedResource::~CachedResource(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::CachedScript::encoding@<X0>(WebCore::CachedScript *this@<X0>, WTF::String *a2@<X8>)
{
  const char **v2;
  uint64_t result;
  void *v4;
  WTF *v5;
  void *v6;

  v2 = (const char **)*((_QWORD *)this + 85);
  if (v2)
    ++*(_DWORD *)v2;
  result = WTF::String::String(a2, v2[2]);
  if (*(_DWORD *)v2 == 1)
  {
    WebCore::TextResourceDecoder::~TextResourceDecoder((WebCore::TextResourceDecoder *)v2, v4);
    return WTF::fastFree(v5, v6);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return result;
}

uint64_t *WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::operator=<WebCore::SharedBuffer>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(v4 + 8);
        v10 = v9 + 16 * v8;
        do
        {
          v11 = *(unsigned int **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v17 = v9;
              v18 = v10;
              v19 = (WTF *)v11;
              v21 = v4;
              atomic_store(1u, v11);
              v16 = v11[6];
              if ((_DWORD)v16 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F8F08[v16])(&v22, v11 + 2);
              *((_DWORD *)v19 + 6) = -1;
              WTF::fastFree(v19, a2);
              v4 = v21;
              v9 = v17;
              v10 = v18;
            }
          }
          v9 += 16;
        }
        while (v9 != v10);
      }
      v14 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v14 && v14 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v20 = v4;
        WTF::fastFree(v14, a2);
        v4 = v20;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WebCore::CachedScript::scriptHash(WebCore::CachedResource *this, void *a2)
{
  int v3;

  v3 = *((_DWORD *)this + 168);
  if (v3 == 2)
  {
    if (*((unsigned __int8 *)this + 668) == (_DWORD)a2)
      return *((unsigned int *)this + 166);
LABEL_5:
    WebCore::CachedScript::script(this, a2);
    return *((unsigned int *)this + 166);
  }
  if (!v3)
    goto LABEL_5;
  return *((unsigned int *)this + 166);
}

uint64_t WebCore::CachedScript::destroyDecodedData(WebCore::CachedScript *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WebCore::CachedResource::setDecodedSize(this, 0);
}

uint64_t WebCore::CachedScript::shouldIgnoreHTTPStatusCodeErrors(WebCore::CachedScript *this)
{
  return 0;
}

_QWORD *WebCore::CachedTextTrack::CachedTextTrack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)WebCore::CachedResource::CachedResource(a1, a2, 14, a3, a4);
  *result = off_1E33F8D28;
  return result;
}

void WebCore::CachedTextTrack::doUpdateBuffer(WebCore::CachedTextTrack *this, const WebCore::FragmentedSharedBuffer *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  WTF **v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  WTF *v31;
  uint64_t v32;

  if (a2)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous(a2, &v32);
    v4 = v32;
    v32 = 0;
  }
  else
  {
    v4 = 0;
  }
  v5 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = v4;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v5 + 8);
        v11 = v10 + 16 * v9;
        do
        {
          v12 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              v28 = v11;
              v29 = v10;
              v27 = v5;
              atomic_store(1u, v12);
              v15 = v12;
              v16 = v12[6];
              if ((_DWORD)v16 != -1)
                ((void (*)(unsigned int **, unsigned int *))off_1E33F8F08[v16])(&v30, v12 + 2);
              v15[6] = -1;
              WTF::fastFree((WTF *)v15, a2);
              v5 = v27;
              v11 = v28;
              v10 = v29;
            }
          }
          v10 += 16;
        }
        while (v10 != v11);
      }
      v17 = *(WTF **)(v5 + 8);
      if ((WTF *)(v5 + 24) != v17 && v17 != 0)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        v26 = v5;
        WTF::fastFree(v17, a2);
        v5 = v26;
      }
      WTF::fastFree((WTF *)v5, a2);
      if (a2)
        goto LABEL_8;
LABEL_25:
      v8 = 0;
      goto LABEL_26;
    }
  }
  if (!a2)
    goto LABEL_25;
LABEL_8:
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v32, a2);
  v8 = *((_DWORD *)a2 + 12);
LABEL_26:
  WebCore::CachedResource::setEncodedSize(this, v8);
  WebCore::CachedResourceClientWalker<WebCore::CachedResourceClient>::CachedResourceClientWalker((uint64_t *)&v30, (uint64_t)this);
  while (1)
  {
    v19 = WebCore::CachedResourceClientWalker<WebCore::CachedResourceClient>::next(&v30);
    if (!v19)
      break;
    (*(void (**)(uint64_t, WebCore::CachedTextTrack *))(*(_QWORD *)v19 + 24))(v19, this);
  }
  v21 = v31;
  v31 = 0;
  if (v21)
  {
    v23 = (WTF **)((char *)v21 + 8);
    v22 = *(unsigned int *)v21;
    if ((_DWORD)v22)
    {
      v24 = 8 * v22;
      do
      {
        v25 = *v23;
        *v23 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1)
            WTF::fastFree(v25, v20);
          else
            --*(_DWORD *)v25;
        }
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
    WTF::fastFree(v21, v20);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v30, v20);
}

uint64_t WebCore::CachedTextTrack::finishLoading(WebCore::CachedTextTrack *this, const WebCore::FragmentedSharedBuffer *a2, const WebCore::NetworkLoadMetrics *a3)
{
  void *v5;
  WTF *v6;
  _BYTE v8[8];
  WTF *v9;
  int v10;
  char v11;

  WebCore::CachedTextTrack::doUpdateBuffer(this, a2);
  v8[0] = 0;
  v11 = 0;
  std::array<std::optional<WebCore::ResourceCryptographicDigest>,3ul>::fill[abi:sn180100]((uint64_t)this + 560, (uint64_t)v8);
  if (v11)
  {
    v6 = v9;
    if (v9)
    {
      v9 = 0;
      v10 = 0;
      WTF::fastFree(v6, v5);
    }
  }
  *(_WORD *)((char *)this + 557) &= ~0x400u;
  return (*(uint64_t (**)(WebCore::CachedTextTrack *, const WebCore::NetworkLoadMetrics *, _QWORD))(*(_QWORD *)this + 200))(this, a3, 0);
}

uint64_t WebCore::CachedXSLStyleSheet::CachedXSLStyleSheet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  const WTF::String *v7;
  PAL *v8;
  char *v9;
  uint64_t *v10;
  __int128 v11;
  WTF::StringImpl *v12;
  __int16 v14;
  WTF::StringImpl *v15;
  const char *v16[2];

  v5 = (_QWORD *)WebCore::CachedResource::CachedResource(a1, a2, 12, a3, a4);
  *v5 = off_1E33F8E10;
  v5[82] = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v6 = 1;
  v8 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&v15, v7);
  *(_DWORD *)(v6 + 4) = (_DWORD)v8;
  if ((_DWORD)v8 == 2)
  {
    v10 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
    {
      PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
      *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)"UTF-8", (PAL *)"UTF-8", v9);
      *((_QWORD *)&xmmword_1ECE86C80 + 1) = v9;
      v16[0] = (const char *)xmmword_1ECE86C80;
      v16[1] = v9;
      if (v9 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
      {
        if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v16))
        {
          v14 = 165;
        }
        else
        {
          v14 = 92;
        }
      }
      else
      {
        v14 = 92;
      }
      v10 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
      word_1ECE86C90 = v14;
    }
  }
  else
  {
    v10 = PAL::Latin1Encoding(v8);
  }
  *(_QWORD *)(v6 + 8) = &off_1E31F4A18;
  v11 = *(_OWORD *)(v10 + 1);
  *(_WORD *)(v6 + 32) = *((_WORD *)v10 + 12);
  *(_OWORD *)(v6 + 16) = v11;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 87) = 0;
  *(_QWORD *)(a1 + 664) = v6;
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

void WebCore::CachedXSLStyleSheet::~CachedXSLStyleSheet(WebCore::CachedXSLStyleSheet *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WebCore::HTMLMetaCharsetParser *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(WTF **)(v3 + 72);
      if (v5)
      {
        *(_QWORD *)(v3 + 72) = 0;
        *(_DWORD *)(v3 + 80) = 0;
        WTF::fastFree(v5, a2);
      }
      v6 = *(WebCore::HTMLMetaCharsetParser **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v6)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v6, (WTF::StringImpl *)a2);
        WTF::fastFree(v7, v8);
      }
      v9 = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::CachedResource::~CachedResource(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  WebCore::HTMLMetaCharsetParser *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v7 = *(WTF **)(v3 + 72);
      if (v7)
      {
        *(_QWORD *)(v3 + 72) = 0;
        *(_DWORD *)(v3 + 80) = 0;
        WTF::fastFree(v7, a2);
      }
      v8 = *(WebCore::HTMLMetaCharsetParser **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v8)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v8, (WTF::StringImpl *)a2);
        WTF::fastFree(v9, v10);
      }
      v11 = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::CachedResource::~CachedResource(this, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::CachedXSLStyleSheet::didAddClient(uint64_t this, WebCore::CachedResourceClient *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  char v6;
  char **v7;
  char *v8;

  if ((*(_WORD *)(this + 557) & 0x400) == 0)
  {
    v3 = this;
    if ((*(unsigned int (**)(WebCore::CachedResourceClient *))(*(_QWORD *)a2 + 32))(a2) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x195F57FCCLL);
    }
    if ((*(_BYTE *)(v3 + 344) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v3 + 160));
      *(_BYTE *)(v3 + 344) |= 1u;
    }
    v4 = *(uint64_t **)(v3 + 400);
    if (!v4)
    {
      v5 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v5 != -1)
      {
        v8 = &v6;
        v7 = &v8;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v4 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v4, 1);
    return (*(uint64_t (**)(WebCore::CachedResourceClient *, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v3 + 160, v4, v3 + 656);
  }
  return this;
}

const char *WebCore::CachedXSLStyleSheet::setEncoding(WebCore::CachedXSLStyleSheet *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const char *result;
  void *v7;
  const char *v8;
  void *v9;
  __int16 v10;
  WTF *v11;
  WebCore::HTMLMetaCharsetParser *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  void *v20;
  void *v21;
  __int16 v22;
  const char *v23;
  void *v24;

  v2 = *((_QWORD *)this + 83);
  if (v2)
  {
    ++*(_DWORD *)v2;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v4 = *(_QWORD *)(v3 + 8);
      v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v4 = 0;
      v5 = 0x100000000;
    }
    result = (const char *)PAL::atomCanonicalTextEncodingName(v4, (const char *)v5);
    v8 = result;
    v9 = v7;
    v23 = result;
    v24 = v7;
    if (v7 && (result = (const char *)PAL::nonBackslashEncodings) != 0 && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      result = (const char *)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v23);
      if (result)
        v10 = 165;
      else
        v10 = 92;
      if (!v9)
      {
LABEL_18:
        if (*(_DWORD *)v2 == 1)
        {
          v11 = *(WTF **)(v2 + 72);
          if (v11)
          {
            *(_QWORD *)(v2 + 72) = 0;
            *(_DWORD *)(v2 + 80) = 0;
            WTF::fastFree(v11, v7);
          }
          v12 = *(WebCore::HTMLMetaCharsetParser **)(v2 + 48);
          *(_QWORD *)(v2 + 48) = 0;
          if (v12)
          {
            WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v12, (WTF::StringImpl *)v7);
            WTF::fastFree(v13, v14);
          }
          v15 = *(_QWORD *)(v2 + 40);
          *(_QWORD *)(v2 + 40) = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          return (const char *)WTF::fastFree((WTF *)v2, v7);
        }
        else
        {
          --*(_DWORD *)v2;
        }
        return result;
      }
    }
    else
    {
      v10 = 92;
      if (!v7)
        goto LABEL_18;
    }
    if (!*(_BYTE *)(v2 + 94))
    {
      *(_QWORD *)(v2 + 16) = v8;
      *(_QWORD *)(v2 + 24) = v9;
      *(_WORD *)(v2 + 32) = v10;
      result = *(const char **)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (result)
        result = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
      *(_DWORD *)(v2 + 56) = 5;
    }
    goto LABEL_18;
  }
  v16 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v17 = *(_QWORD *)(v16 + 8);
    v18 = *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v17 = 0;
    v18 = 0x100000000;
  }
  result = (const char *)PAL::atomCanonicalTextEncodingName(v17, (const char *)v18);
  v19 = result;
  v21 = v20;
  v23 = result;
  v24 = v20;
  if (v20 && (result = (const char *)PAL::nonBackslashEncodings) != 0 && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    result = (const char *)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v23);
    if (result)
      v22 = 165;
    else
      v22 = 92;
  }
  else
  {
    v22 = 92;
  }
  if (v21 && !MEMORY[0x5E])
  {
    MEMORY[0x10] = v19;
    MEMORY[0x18] = v21;
    MEMORY[0x20] = v22;
    result = (const char *)MEMORY[0x28];
    MEMORY[0x28] = 0;
    if (result)
      result = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
    MEMORY[0x38] = 5;
  }
  return result;
}

uint64_t WebCore::CachedXSLStyleSheet::encoding@<X0>(WebCore::CachedXSLStyleSheet *this@<X0>, WTF::String *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  WTF *v5;
  WebCore::HTMLMetaCharsetParser *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 83);
  if (v2)
    ++*(_DWORD *)v2;
  result = WTF::String::String(a2, *(const char **)(v2 + 16));
  if (*(_DWORD *)v2 == 1)
  {
    v5 = *(WTF **)(v2 + 72);
    if (v5)
    {
      *(_QWORD *)(v2 + 72) = 0;
      *(_DWORD *)(v2 + 80) = 0;
      WTF::fastFree(v5, v4);
    }
    v6 = *(WebCore::HTMLMetaCharsetParser **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v6)
    {
      WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v6, (WTF::StringImpl *)v4);
      WTF::fastFree(v7, v8);
    }
    v9 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return WTF::fastFree((WTF *)v2, v4);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return result;
}

void WebCore::CachedXSLStyleSheet::finishLoading(WebCore::CachedXSLStyleSheet *this, const WebCore::FragmentedSharedBuffer *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  WebCore::HTMLMetaCharsetParser *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  WTF::StringImpl *v53;

  if (!a2)
  {
    v17 = *((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr((unsigned int *)v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unsigned int *)v17));
      if (!v19)
      {
        atomic_store(1u, (unsigned int *)v17);
        v36 = *(unsigned int *)(v17 + 20);
        if ((_DWORD)v36)
        {
          v37 = *(_QWORD *)(v17 + 8);
          v38 = v37 + 16 * v36;
          do
          {
            v39 = *(unsigned int **)(v37 + 8);
            *(_QWORD *)(v37 + 8) = 0;
            if (v39)
            {
              do
              {
                v40 = __ldaxr(v39);
                v41 = v40 - 1;
              }
              while (__stlxr(v41, v39));
              if (!v41)
              {
                v48 = v37;
                v50 = v38;
                atomic_store(1u, v39);
                v42 = v39;
                v43 = v39[6];
                if ((_DWORD)v43 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *, const WebCore::NetworkLoadMetrics *))off_1E33F8F08[v43])(&v53, v39 + 2, a3);
                v42[6] = -1;
                WTF::fastFree((WTF *)v42, a2);
                v37 = v48;
                v38 = v50;
              }
            }
            v37 += 16;
          }
          while (v37 != v38);
        }
        v44 = *(WTF **)(v17 + 8);
        if ((WTF *)(v17 + 24) != v44 && v44 != 0)
        {
          *(_QWORD *)(v17 + 8) = 0;
          *(_DWORD *)(v17 + 16) = 0;
          WTF::fastFree(v44, a2);
        }
        WTF::fastFree((WTF *)v17, a2);
      }
    }
    WebCore::CachedResource::setEncodedSize(this, 0);
    goto LABEL_21;
  }
  WebCore::FragmentedSharedBuffer::makeContiguous(a2, &v51);
  WebCore::CachedResource::setEncodedSize(this, *((_DWORD *)a2 + 12));
  v5 = *((_QWORD *)this + 83);
  if (v5)
    ++*(_DWORD *)v5;
  v6 = v51;
  if (!*(_DWORD *)(v51 + 20))
  {
    v9 = 0;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v51 + 8) + 8);
  v8 = *(unsigned int *)(v7 + 24);
  if ((_DWORD)v8 != -1)
  {
    v53 = (WTF::StringImpl *)&v52;
    v9 = (const char *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v53, v7 + 8);
LABEL_7:
    WebCore::TextResourceDecoder::decodeAndFlush((WebCore::TextResourceDecoder *)v5, v9, *(_QWORD *)(v6 + 48), &v53);
    v11 = v53;
    v53 = 0;
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 82);
    *((_QWORD *)this + 82) = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v10);
        v25 = v53;
        v53 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v10);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v12 -= 2;
        v53 = 0;
      }
    }
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
      {
        v20 = *(WTF **)(v5 + 72);
        if (v20)
        {
          *(_QWORD *)(v5 + 72) = 0;
          *(_DWORD *)(v5 + 80) = 0;
          WTF::fastFree(v20, v10);
        }
        v21 = *(WebCore::HTMLMetaCharsetParser **)(v5 + 48);
        *(_QWORD *)(v5 + 48) = 0;
        if (v21)
        {
          WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v21, v10);
          WTF::fastFree(v22, v23);
        }
        v24 = *(_QWORD *)(v5 + 40);
        *(_QWORD *)(v5 + 40) = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        WTF::fastFree((WTF *)v5, v10);
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
    v13 = v51;
    v51 = 0;
    v14 = *((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = v13;
    if (v14)
    {
      do
      {
        v15 = __ldaxr((unsigned int *)v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)v14));
      if (!v16)
      {
        atomic_store(1u, (unsigned int *)v14);
        v26 = *(unsigned int *)(v14 + 20);
        if ((_DWORD)v26)
        {
          v27 = *(_QWORD *)(v14 + 8);
          v28 = v27 + 16 * v26;
          do
          {
            v29 = *(unsigned int **)(v27 + 8);
            *(_QWORD *)(v27 + 8) = 0;
            if (v29)
            {
              do
              {
                v30 = __ldaxr(v29);
                v31 = v30 - 1;
              }
              while (__stlxr(v31, v29));
              if (!v31)
              {
                v47 = v27;
                v49 = v28;
                atomic_store(1u, v29);
                v32 = v29;
                v33 = v29[6];
                if ((_DWORD)v33 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F8F08[v33])(&v53, v29 + 2);
                v32[6] = -1;
                WTF::fastFree((WTF *)v32, v10);
                v27 = v47;
                v28 = v49;
              }
            }
            v27 += 16;
          }
          while (v27 != v28);
        }
        v34 = *(WTF **)(v14 + 8);
        if ((WTF *)(v14 + 24) != v34 && v34 != 0)
        {
          *(_QWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v14 + 16) = 0;
          WTF::fastFree(v34, v10);
        }
        WTF::fastFree((WTF *)v14, v10);
      }
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v51, v10);
LABEL_21:
    *(_WORD *)((char *)this + 557) &= ~0x400u;
    WebCore::CachedXSLStyleSheet::checkNotify((uint64_t)this);
    return;
  }
  v46 = std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::CachedXSLStyleSheet::checkNotify(v46);
}

void WebCore::CachedXSLStyleSheet::checkNotify(uint64_t a1)
{
  unsigned int *v2;
  void *v3;
  unsigned int *v4;
  uint64_t *v5;
  unint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF **v9;
  uint64_t v10;
  WTF *v11;
  unsigned int *v12;
  WTF *v13;
  char v14;
  char **v15;
  char *v16;

  if ((*(_WORD *)(a1 + 557) & 0x400) == 0)
  {
    WebCore::CachedResourceClientWalker<WebCore::CachedStyleSheetClient>::CachedResourceClientWalker((uint64_t *)&v12, a1);
    v2 = WebCore::CachedResourceClientWalker<WebCore::CachedStyleSheetClient>::next(&v12);
    if (v2)
    {
      v4 = v2;
      do
      {
        if ((*(_BYTE *)(a1 + 344) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 160));
          *(_BYTE *)(a1 + 344) |= 1u;
        }
        v5 = *(uint64_t **)(a1 + 400);
        if (!v5)
        {
          v6 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
          if (v6 != -1)
          {
            v15 = &v16;
            v16 = &v14;
            std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
          }
          v5 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
        }
        WebCore::ResourceResponse::platformLazyInit((uint64_t)v5, 1);
        (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 56))(v4, a1 + 160, v5, a1 + 656);
        v4 = WebCore::CachedResourceClientWalker<WebCore::CachedStyleSheetClient>::next(&v12);
      }
      while (v4);
    }
    v7 = v13;
    v13 = 0;
    if (v7)
    {
      v9 = (WTF **)((char *)v7 + 8);
      v8 = *(unsigned int *)v7;
      if ((_DWORD)v8)
      {
        v10 = 8 * v8;
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 1)
              WTF::fastFree(v11, v3);
            else
              --*(_DWORD *)v11;
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      WTF::fastFree(v7, v3);
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v12, v3);
  }
}

uint64_t WebCore::KeepaliveRequestTracker::tryRegisterRequest(uint64_t this, WebCore::CachedResource *a2)
{
  uint64_t v2;
  WebCore::CachedResource *v3;
  uint64_t v4;
  WebCore::ResourceRequest *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  void *v21;
  uint64_t *v22;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  bmalloc::api *v39;
  void *v40;
  bmalloc::api *v41;
  void *v42;
  void *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  WebCore::CachedResource *v55;
  WebCore::CachedResource *v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t *v59;

  v3 = a2;
  v4 = this;
  v5 = (WebCore::CachedResource *)((char *)a2 + 160);
  if ((*((_BYTE *)a2 + 344) & 1) != 0)
  {
    if ((*((_BYTE *)a2 + 344) & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    this = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
    v51 = *((_BYTE *)v3 + 344) | 1;
    *((_BYTE *)v3 + 344) = v51;
    if ((v51 & 4) != 0)
      goto LABEL_3;
  }
  this = (uint64_t)WebCore::ResourceRequest::doUpdateResourceHTTPBody(v5);
  *((_BYTE *)v3 + 344) |= 4u;
LABEL_3:
  v6 = *((_QWORD *)v3 + 41);
  if (!v6)
    return 1;
  ++*(_DWORD *)v6;
  if (*(_BYTE *)(v6 + 64))
  {
    v7 = *(_QWORD *)(v6 + 56);
  }
  else
  {
    v55 = v3;
    v8 = *(unsigned int *)(v6 + 20);
    if ((_DWORD)v8)
    {
      v7 = 0;
      v9 = *(_QWORD *)(v6 + 8);
      v10 = 48 * v8;
      v11 = (uint64_t)&dword_1E341D9C8;
      v12 = (unint64_t)&v57;
      v3 = (WebCore::CachedResource *)&v59;
      do
      {
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v13 = &dword_1E341D9C8;
        v57 = (uint64_t)v13;
        v59 = &v57;
        v14 = *(unsigned int *)(v9 + 40);
        if ((_DWORD)v14 == -1)
          goto LABEL_85;
        v58[0] = &v59;
        v2 = ((uint64_t (*)(_QWORD *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore15FormDataElement13lengthInBytesERKNS6_8FunctionIFyRKNS6_3URLEEEEE3__0JZNKS9_13lengthInBytesESH_E3__1ZNKS9_13lengthInBytesESH_E3__2EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_15EncodedFileDataENS9_15EncodedBlobDataEEEEEEEDcOT_DpOT0____fmatrix
                                                         + v14))(v58, v9);
        this = v57;
        v57 = 0;
        if (this)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        v7 += v2;
        v9 += 48;
        v10 -= 48;
      }
      while (v10);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(v6 + 56) = v7;
    *(_BYTE *)(v6 + 64) = 1;
    v3 = v55;
  }
  v15 = *(_QWORD *)(v4 + 32) + v7;
  v12 = v15 <= 0x10000;
  if (v15 > 0x10000)
  {
LABEL_61:
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::FormData::~FormData((WebCore::FormData *)v6, a2);
      bmalloc::api::isoDeallocate(v39, v40);
    }
    else
    {
      --*(_DWORD *)v6;
    }
    return v12;
  }
  if ((*((_BYTE *)v3 + 344) & 1) != 0)
  {
    if ((*((_BYTE *)v3 + 344) & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    this = WebCore::ResourceRequest::doUpdateResourceRequest(v5);
    v52 = *((_BYTE *)v3 + 344) | 1;
    *((_BYTE *)v3 + 344) = v52;
    if ((v52 & 4) != 0)
      goto LABEL_18;
  }
  this = (uint64_t)WebCore::ResourceRequest::doUpdateResourceHTTPBody(v5);
  *((_BYTE *)v3 + 344) |= 4u;
LABEL_18:
  v11 = *((_QWORD *)v3 + 41);
  if (!v11)
    goto LABEL_61;
  ++*(_DWORD *)v11;
  v16 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v16 != *(_DWORD *)(v4 + 24))
  {
    v2 = *(_QWORD *)(v4 + 16) + 8 * v16;
    v28 = *((_QWORD *)v3 + 1);
    if (v28)
      goto LABEL_39;
    v28 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = v3;
    v44 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = v28;
    if (!v44)
      goto LABEL_39;
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
      goto LABEL_86;
    goto LABEL_69;
  }
  v17 = v16 + (v16 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v16 + 1)
    v19 = v16 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = *(WTF **)(v4 + 16);
    v22 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(v4 + 24) = v19;
    *(_QWORD *)(v4 + 16) = v22;
    if ((_DWORD)v16)
    {
      v23 = (unsigned int **)v20;
      do
      {
        v24 = *v23;
        if (*v23)
        {
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 + 1, v24));
          *v22 = (uint64_t)v24;
          v26 = *((_QWORD *)v24 + 1);
          if (v26)
          {
            v59 = v22;
            ++*(_DWORD *)(v26 + 548);
            v27 = *(_QWORD *)(v26 + 488);
            if (v27)
            {
              if (*(_QWORD *)(v27 + 8))
                WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v26 + 464), (uint64_t *)&v59, (uint64_t)v58);
            }
          }
        }
        else
        {
          *v22 = 0;
        }
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v23, v21);
        ++v22;
        ++v23;
      }
      while (v23 != (unsigned int **)((char *)v20 + 8 * v16));
      v22 = *(uint64_t **)(v4 + 16);
    }
    if (v20)
    {
      if (v22 == (uint64_t *)v20)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
      }
      WTF::fastFree(v20, v21);
      v22 = *(uint64_t **)(v4 + 16);
    }
    v2 = (uint64_t)&v22[*(unsigned int *)(v4 + 28)];
    v28 = *((_QWORD *)v3 + 1);
    if (v28)
      goto LABEL_90;
    v28 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = v3;
    v48 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = v28;
    if (!v48)
      goto LABEL_90;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v48);
      WTF::fastFree((WTF *)v48, v47);
    }
    v28 = *((_QWORD *)v3 + 1);
    if (v28)
    {
LABEL_90:
      do
        v30 = __ldaxr((unsigned int *)v28);
      while (__stlxr(v30 + 1, (unsigned int *)v28));
      goto LABEL_44;
    }
LABEL_76:
    *(_QWORD *)v2 = 0;
    while (1)
    {
      ++*(_DWORD *)(v4 + 28);
      if (*(_BYTE *)(v11 + 64))
      {
        v33 = *(_QWORD *)(v11 + 56);
        goto LABEL_57;
      }
      v53 = v12;
      v54 = v11;
      v56 = v3;
      v34 = *(unsigned int *)(v11 + 20);
      v33 = 0;
      if (!(_DWORD)v34)
        break;
      v2 = *(_QWORD *)(v11 + 8);
      v11 = 48 * v34;
      v12 = (unint64_t)&dword_1E341D9C8;
      v3 = (WebCore::CachedResource *)&v59;
      while (1)
      {
        v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v35 = &dword_1E341D9C8;
        v57 = (uint64_t)v35;
        v59 = &v57;
        v36 = *(unsigned int *)(v2 + 40);
        if ((_DWORD)v36 == -1)
          break;
        v58[0] = &v59;
        v37 = ((uint64_t (*)(_QWORD *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore15FormDataElement13lengthInBytesERKNS6_8FunctionIFyRKNS6_3URLEEEEE3__0JZNKS9_13lengthInBytesESH_E3__1ZNKS9_13lengthInBytesESH_E3__2EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_15EncodedFileDataENS9_15EncodedBlobDataEEEEEEEDcOT_DpOT0____fmatrix
                                                          + v36))(v58, v2);
        v38 = v57;
        v57 = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        v33 += v37;
        v2 += 48;
        v11 -= 48;
        if (!v11)
          goto LABEL_56;
      }
LABEL_85:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_86:
      atomic_store(1u, v44);
      WTF::fastFree((WTF *)v44, v43);
LABEL_69:
      v28 = *((_QWORD *)v3 + 1);
      if (!v28)
        goto LABEL_76;
      do
LABEL_39:
        v29 = __ldaxr((unsigned int *)v28);
      while (__stlxr(v29 + 1, (unsigned int *)v28));
LABEL_44:
      *(_QWORD *)v2 = v28;
      v31 = *(_QWORD *)(v28 + 8);
      if (v31)
      {
        v59 = (uint64_t *)v2;
        ++*(_DWORD *)(v31 + 548);
        v32 = *(_QWORD *)(v31 + 488);
        if (v32)
        {
          if (*(_QWORD *)(v32 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v31 + 464), (uint64_t *)&v59, (uint64_t)v58);
        }
      }
    }
LABEL_56:
    v11 = v54;
    v3 = v56;
    *(_QWORD *)(v54 + 56) = v33;
    *(_BYTE *)(v54 + 64) = 1;
    v12 = v53;
LABEL_57:
    *(_QWORD *)(v4 + 32) += v33;
    if (WebCore::CachedResource::addClientToSet(v3, (WebCore::CachedResourceClient *)v4))
      (*(void (**)(WebCore::CachedResource *, uint64_t))(*(_QWORD *)v3 + 88))(v3, v4);
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::FormData::~FormData((WebCore::FormData *)v11, a2);
      bmalloc::api::isoDeallocate(v41, v42);
    }
    else
    {
      --*(_DWORD *)v11;
    }
    goto LABEL_61;
  }
  __break(0xC471u);
  return this;
}

void WebCore::KeepaliveRequestTracker::notifyFinished(WebCore::CachedResourceClient *a1, WebCore::CachedResource *this)
{
  WebCore::ResourceRequest *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  unsigned int **i;
  void *v17;
  unsigned int **v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  bmalloc::api *v25;
  void *v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD v30[3];
  unsigned int **v31;

  v4 = (WebCore::CachedResource *)((char *)this + 160);
  if ((*((_BYTE *)this + 344) & 1) != 0)
  {
    if ((*((_BYTE *)this + 344) & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)this + 160));
    v27 = *((_BYTE *)this + 344) | 1;
    *((_BYTE *)this + 344) = v27;
    if ((v27 & 4) != 0)
      goto LABEL_3;
  }
  WebCore::ResourceRequest::doUpdateResourceHTTPBody(v4);
  *((_BYTE *)this + 344) |= 4u;
LABEL_3:
  v5 = *((_QWORD *)this + 41);
  if (v5)
    ++*(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 64))
  {
    v6 = *(_QWORD *)(v5 + 56);
LABEL_16:
    *((_QWORD *)a1 + 4) -= v6;
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::FormData::~FormData((WebCore::FormData *)v5, this);
      bmalloc::api::isoDeallocate(v25, v26);
    }
    else
    {
      --*(_DWORD *)v5;
    }
    WebCore::CachedResource::removeClient(this, (unsigned int **)a1);
    v15 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v15)
    {
      for (i = (unsigned int **)*((_QWORD *)a1 + 2); !*i || *((WebCore::CachedResource **)*i + 1) != this; ++i)
      {
        if (!--v15)
          return;
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(i, v14);
      v18 = i + 1;
      v19 = *((unsigned int *)a1 + 7);
      v20 = *((_QWORD *)a1 + 2) + 8 * v19;
      if (i + 1 != (unsigned int **)v20)
      {
        do
        {
          v21 = *v18;
          if (*v18)
          {
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 + 1, v21));
            *i = v21;
            v23 = *((_QWORD *)v21 + 1);
            if (v23)
            {
              v31 = i;
              ++*(_DWORD *)(v23 + 548);
              v24 = *(_QWORD *)(v23 + 488);
              if (v24)
              {
                if (*(_QWORD *)(v24 + 8))
                  WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v23 + 464), (uint64_t *)&v31, (uint64_t)v30);
              }
            }
          }
          else
          {
            *i = 0;
          }
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v18, v17);
          ++i;
          ++v18;
        }
        while (v18 != (unsigned int **)v20);
        LODWORD(v19) = *((_DWORD *)a1 + 7);
      }
      *((_DWORD *)a1 + 7) = v19 - 1;
    }
    return;
  }
  v7 = *(unsigned int *)(v5 + 20);
  if (!(_DWORD)v7)
  {
    v6 = 0;
LABEL_15:
    *(_QWORD *)(v5 + 56) = v6;
    *(_BYTE *)(v5 + 64) = 1;
    goto LABEL_16;
  }
  v6 = 0;
  v8 = *(_QWORD *)(v5 + 8);
  v9 = 48 * v7;
  while (1)
  {
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &dword_1E341D9C8;
    v29 = v10;
    v31 = (unsigned int **)&v29;
    v11 = *(unsigned int *)(v8 + 40);
    if ((_DWORD)v11 == -1)
      break;
    v30[0] = &v31;
    v12 = ((uint64_t (*)(_QWORD *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore15FormDataElement13lengthInBytesERKNS6_8FunctionIFyRKNS6_3URLEEEEE3__0JZNKS9_13lengthInBytesESH_E3__1ZNKS9_13lengthInBytesESH_E3__2EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_15EncodedFileDataENS9_15EncodedBlobDataEEEEEEEDcOT_DpOT0____fmatrix
                                                      + v11))(v30, v8);
    v13 = v29;
    v29 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    v6 += v12;
    v8 += 48;
    v9 -= 48;
    if (!v9)
      goto LABEL_15;
  }
  v28 = std::__throw_bad_variant_access[abi:sn180100]();
  std::call_once[abi:sn180100]<WebCore::MemoryCache::MemoryCache(void)::$_0>(v28);
}

void std::call_once[abi:sn180100]<WebCore::MemoryCache::MemoryCache(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::MemoryCache::MemoryCache(void)::onceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::MemoryCache::MemoryCache(void)::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MemoryCache::MemoryCache(void)::$_0 &&>>);
  }
}

uint64_t **std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>::operator=[abi:sn180100](uint64_t **a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*v4)
      WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::deallocateTable(*v4, a2);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t **std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](uint64_t **a1, void *a2)
{
  uint64_t *v3;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*v3)
      WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::deallocateTable(*v3, a2);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WebCore::MemoryCache::removeFragmentIdentifierIfNeeded@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v3;
  int v4;
  _DWORD *v5;
  __int128 v6;
  __int128 v7;

  v3 = (_OWORD *)(this + 8);
  v4 = *(_DWORD *)(this + 8);
  v5 = *(_DWORD **)this;
  if ((v4 & 1) == 0)
  {
    if (!v5)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (!v5)
  {
LABEL_5:
    *(_QWORD *)a2 = v5;
    v6 = *(_OWORD *)(this + 24);
    *(_OWORD *)(a2 + 8) = *v3;
    *(_OWORD *)(a2 + 24) = v6;
    return this;
  }
  if (v5[1] <= *(_DWORD *)(this + 36) || (v4 & 2) == 0)
  {
LABEL_4:
    *v5 += 2;
    goto LABEL_5;
  }
  *v5 += 2;
  *(_QWORD *)a2 = v5;
  v7 = *(_OWORD *)(this + 24);
  *(_OWORD *)(a2 + 8) = *v3;
  *(_OWORD *)(a2 + 24) = v7;
  return WTF::URL::removeFragmentIdentifier((WTF::URL *)a2);
}

void WebCore::MemoryCache::revalidationSucceeded(WebCore::MemoryCache *this, WebCore::CachedResource *a2, const WebCore::ResourceResponse *a3)
{
  unsigned int *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int128 v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF **v14;
  void *v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  int v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  WTF **v28;
  const WTF::StringImpl *v29;
  WTF **v30;
  int v31;
  const WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  WebCore::CachedResource *v41;
  const WebCore::ResourceResponse *v42;
  uint64_t v43;
  WebCore *v44;
  WTF::StringImpl *updated;
  WebCore::CachedResource *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  WTF *isEmptyIgnoringNullReferences;
  uint64_t v57;
  int v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  void *v62;
  WTF::StringImpl *v63;
  void *v64;
  unint64_t v65;
  WTF *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  WebCore::CachedResource::ResponseData *v74;
  WTF::StringImpl *v75;
  WebCore::CachedResource::ResponseData *v76;
  WTF *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  WebCore::CachedResource *v87;
  WebCore::MemoryCache *v88;
  const WebCore::ResourceResponse *v89;
  unsigned int *v90;
  WTF::StringImpl *v91;
  __int128 v92;
  __int128 v93;
  WTF::StringImpl *v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int **v97;
  uint64_t v98;
  unsigned int **v99;
  __int128 v100;
  __int128 v101;

  if ((WTF::isMainThread(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F596B8);
  }
  v89 = a3;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v96, a2);
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v95, *(WebCore::CachedResource **)(*((_QWORD *)a2 + 61) + 8));
  v87 = a2;
  WebCore::MemoryCache::remove(this, a2);
  v6 = v95;
  v7 = *((_QWORD *)v95 + 1);
  v8 = (WTF::StringImpl **)(v7 + 160);
  if ((*(_BYTE *)(v7 + 344) & 1) != 0
    || (WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v7 + 160)),
        *(_BYTE *)(v7 + 344) |= 1u,
        (v6 = v95) != 0))
  {
    v9 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = *v8;
  if (*v8)
    *(_DWORD *)v10 += 2;
  v91 = v10;
  v11 = *(_OWORD *)(v7 + 184);
  v92 = *(_OWORD *)(v7 + 168);
  v93 = v11;
  v12 = *(WTF::StringImpl **)(v9 + 320);
  if (v12)
    *(_DWORD *)v12 += 2;
  v94 = v12;
  v13 = (uint64_t *)WebCore::MemoryCache::sessionResourceMap(this, *(_QWORD *)(*((_QWORD *)v6 + 1) + 416));
  if (v13)
  {
    v14 = WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>>>,std::pair<WTF::URL,WTF::String>>(*v13, &v91);
    if (v14 && (v66 = v14[6]) != 0)
    {
      do
        v67 = __ldaxr((unsigned int *)v66);
      while (__stlxr(v67 + 1, (unsigned int *)v66));
      v68 = *((_QWORD *)v66 + 1);
      if (!v68)
        goto LABEL_79;
      v80 = *(_QWORD *)(v68 + 8);
      if (v80)
        goto LABEL_137;
      v80 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v80 = 1;
      *(_QWORD *)(v80 + 8) = v68;
      v84 = *(unsigned int **)(v68 + 8);
      *(_QWORD *)(v68 + 8) = v80;
      if (!v84)
        goto LABEL_137;
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        atomic_store(1u, v84);
        WTF::fastFree((WTF *)v84, v15);
      }
      v80 = *(_QWORD *)(v68 + 8);
      if (v80)
      {
LABEL_137:
        do
          v81 = __ldaxr((unsigned int *)v80);
        while (__stlxr(v81 + 1, (unsigned int *)v80));
        v90 = (unsigned int *)v80;
        v82 = *(_QWORD *)(v80 + 8);
        if (v82)
        {
          v97 = &v90;
          ++*(_DWORD *)(v82 + 548);
          v83 = *(_QWORD *)(v82 + 488);
          if (v83)
          {
            if (*(_QWORD *)(v83 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v82 + 464), (uint64_t *)&v97, (uint64_t)&v99);
          }
        }
      }
      else
      {
LABEL_79:
        v90 = 0;
      }
      do
      {
        v69 = __ldaxr((unsigned int *)v66);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, (unsigned int *)v66));
      if (!v70)
      {
        atomic_store(1u, (unsigned int *)v66);
        WTF::fastFree(v66, v15);
      }
      if (v90)
      {
        v15 = (void *)*((_QWORD *)v90 + 1);
        if (v15)
          WebCore::MemoryCache::remove(this, (WebCore::CachedResource *)v15);
      }
    }
    else
    {
      v90 = 0;
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v90, v15);
  }
  v16 = WebCore::MemoryCache::ensureSessionResourceMap((uint64_t *)this, *(_QWORD *)(*((_QWORD *)v95 + 1) + 416));
  v17 = v16;
  v18 = v95;
  v88 = this;
  if (v95)
    v18 = (unsigned int *)*((_QWORD *)v95 + 1);
  v97 = (unsigned int **)v18;
  v19 = *v16;
  if (*v16
    || (WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::expand(v16, 0), (v19 = *v17) != 0))
  {
    v20 = *(_DWORD *)(v19 - 8);
  }
  else
  {
    v20 = 0;
  }
  v21 = v91;
  v22 = *((_DWORD *)v91 + 4);
  if (v22 < 0x100)
    v23 = WTF::StringImpl::hashSlowCase(v91);
  else
    v23 = v22 >> 8;
  v24 = v94;
  v25 = *((_DWORD *)v94 + 4);
  if (v25 < 0x100)
    v26 = WTF::StringImpl::hashSlowCase(v94);
  else
    v26 = v25 >> 8;
  v27 = v20 & ((0xD7862706ELL * (unint64_t)(277951225 * v23 + 95187966 * v26)) >> 4);
  v28 = (WTF **)(v19 + 56 * v27);
  if ((WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::isEmptyBucket(v28) & 1) == 0)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (*v28 == (WTF *)-1)
      {
        v30 = v28;
      }
      else if (WTF::equal(*v28, v21, v29))
      {
        v33 = WTF::equal(v28[5], v24, v32);
        if ((v33 & 1) != 0)
          goto LABEL_36;
      }
      v27 = (v27 + v31) & v20;
      v28 = (WTF **)(v19 + 56 * v27);
      ++v31;
    }
    while (!WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::isEmptyBucket(v28));
    if (v30)
    {
      v99 = 0;
      WTF::URL::invalidate((WTF::URL *)&v99);
      *v30 = (WTF *)v99;
      *(_OWORD *)(v30 + 1) = v100;
      *(_OWORD *)(v30 + 3) = v101;
      v30[5] = 0;
      v30[6] = 0;
      --*(_DWORD *)(*v17 - 16);
      v28 = v30;
    }
  }
  v33 = WTF::HashMapTranslator<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>>::translate<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,std::pair<WTF::URL,WTF::String> const&,WebCore::CachedResource*>((uint64_t)v28, (uint64_t)&v91, (uint64_t *)&v97);
  v34 = *v17;
  if (*v17)
    v35 = *(_DWORD *)(v34 - 12) + 1;
  else
    v35 = 1;
  *(_DWORD *)(v34 - 12) = v35;
  v36 = *v17;
  if (*v17)
    v37 = *(_DWORD *)(v36 - 12);
  else
    v37 = 0;
  v38 = (*(_DWORD *)(v36 - 16) + v37);
  v39 = *(unsigned int *)(v36 - 4);
  if (v39 > 0x400)
  {
    if (v39 > 2 * v38)
      goto LABEL_36;
  }
  else if (3 * v39 > 4 * v38)
  {
    goto LABEL_36;
  }
  v33 = WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::expand(v17, v28);
LABEL_36:
  v40 = v95;
  if (v95)
  {
    *(_WORD *)(*((_QWORD *)v95 + 1) + 557) |= 0x200u;
    v41 = (WebCore::CachedResource *)*((_QWORD *)v40 + 1);
  }
  else
  {
    v41 = 0;
    MEMORY[0x22D] |= 0x200u;
  }
  WTF::WallTime::now((WTF::WallTime *)v33);
  *((_QWORD *)v41 + 54) = v43;
  v44 = (WebCore *)*((_QWORD *)v41 + 50);
  if (!v44)
  {
    v74 = (WebCore::CachedResource::ResponseData *)WTF::fastMalloc((WTF *)0x198);
    v44 = WebCore::CachedResource::ResponseData::ResponseData(v74, v41);
    v76 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)v41 + 50);
    *((_QWORD *)v41 + 50) = v44;
    if (v76)
    {
      WebCore::CachedResource::ResponseData::~ResponseData(v76, v75);
      WTF::fastFree(v77, v78);
      v44 = (WebCore *)*((_QWORD *)v41 + 50);
    }
  }
  updated = WebCore::updateResponseHeadersAfterRevalidation(v44, v89, v42);
  if (v95)
    v46 = (WebCore::CachedResource *)*((_QWORD *)v95 + 1);
  else
    v46 = 0;
  if ((WTF::isMainThread(updated) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F596D8);
  }
  v47 = WebCore::MemoryCache::lruListFor(v88, v46);
  WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedResource>(v47, (uint64_t)v46, (uint64_t)&v99);
  if (v95)
    v49 = *((_QWORD *)v95 + 1);
  else
    v49 = 0;
  v50 = *(_QWORD *)(v49 + 400);
  if (v50)
  {
    v51 = *(_DWORD *)(v50 + 404) + *(_DWORD *)(v50 + 400);
  }
  else
  {
    v65 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v65 != -1)
    {
      v99 = &v90;
      v97 = (unsigned int **)&v99;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v97, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v51 = 0;
  }
  v52 = v49 + 160;
  if ((*(_BYTE *)(v49 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v49 + 160));
    *(_BYTE *)(v49 + 344) |= 1u;
  }
  v53 = 4840;
  if (*(_QWORD *)v52)
    v53 = 2 * *(_DWORD *)(*(_QWORD *)v52 + 4) + 4840;
  v54 = *((_QWORD *)v95 + 1);
  v55 = *(_QWORD *)(v54 + 400);
  if (v55 && *(_DWORD *)(v55 + 404))
  {
    isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences(v54 + 360, v48);
    if ((_DWORD)isEmptyIgnoringNullReferences)
    {
      v72 = *(_QWORD *)(v54 + 448);
      if (!v72 || !*(_DWORD *)(v72 - 12))
        goto LABEL_57;
      WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::begin((uint64_t *)(v54 + 448), (uint64_t)&v99);
      isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::end((uint64_t *)(v54 + 448), (uint64_t)&v97);
      if ((_QWORD)v100 == v98)
      {
        WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::clear(v54 + 448, v73);
        goto LABEL_57;
      }
    }
    if (v95)
      v57 = *((_QWORD *)v95 + 1);
    else
      v57 = 0;
    if ((WTF::isMainThread(isEmptyIgnoringNullReferences) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F59784);
    }
    WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedResource>((uint64_t)v88 + 304, v57, (uint64_t)&v99);
  }
LABEL_57:
  v58 = v53 + v51;
  if (!v58)
    goto LABEL_66;
  if (v95)
    v59 = *((_QWORD *)v95 + 1);
  else
    v59 = 0;
  v60 = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences(v59 + 360, v48);
  if (!(_DWORD)v60)
    goto LABEL_61;
  v71 = *(_QWORD *)(v59 + 448);
  if (!v71 || !*(_DWORD *)(v71 - 12))
  {
LABEL_87:
    v61 = 0;
    goto LABEL_62;
  }
  WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::begin((uint64_t *)(v59 + 448), (uint64_t)&v99);
  v60 = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::end((uint64_t *)(v59 + 448), (uint64_t)&v97);
  if ((_QWORD)v100 == v98)
  {
    v60 = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::clear(v59 + 448, v79);
    goto LABEL_87;
  }
LABEL_61:
  v61 = 1;
LABEL_62:
  if ((WTF::isMainThread(v60) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F596F8);
  }
  if (v61)
    *((_DWORD *)v88 + 6) += v58;
  else
    *((_DWORD *)v88 + 7) += v58;
LABEL_66:
  (*(void (**)(WebCore::CachedResource *))(*(_QWORD *)v87 + 160))(v87);
  WebCore::CachedResource::clearResourceToRevalidate((uint64_t)v87, v62);
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, v63);
    else
      *(_DWORD *)v94 -= 2;
  }
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
      WTF::StringImpl::destroy(v91, v63);
    else
      *(_DWORD *)v91 -= 2;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v95, v63);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v96, v64);
}

void WebCore::MemoryCache::remove(WebCore::MemoryCache *this, WebCore::CachedResource *a2)
{
  WebCore::MemoryCache *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t updated;
  uint64_t *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  WTF::StringImpl *v12;
  _WORD *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int i;
  uint64_t v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  char v26;
  const WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t isMainThread;
  uint64_t v41;
  void *v42;
  WTF *isEmptyIgnoringNullReferences;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  WTF::StringImpl *v49;
  int v50;
  WTF **v51;
  WTF *v52;
  unsigned int v53;
  WebCore::CachedResource *v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  WebCore::ResourceRequest *v65;
  WebCore::MemoryCache *v66;
  int v67;
  WTF::StringImpl *v68;
  __int128 v69;
  __int128 v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73[6];
  WTF::StringImpl *v74[6];
  char v75;

  v3 = this;
  if ((WTF::isMainThread(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F59DF8);
  }
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
    goto LABEL_132;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v61 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (!v61)
    goto LABEL_132;
  do
  {
    v62 = __ldaxr(v61);
    v63 = v62 - 1;
  }
  while (__stlxr(v63, v61));
  if (!v63)
  {
    atomic_store(1u, v61);
    WTF::fastFree((WTF *)v61, v60);
  }
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
  {
LABEL_132:
    do
      v5 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v5 + 1, (unsigned int *)v4));
    v72 = v4;
    v6 = *(_QWORD *)(v4 + 8);
  }
  else
  {
    v6 = 0;
    v72 = 0;
  }
  v73[0] = (uint64_t)&v72;
  ++*(_DWORD *)(v6 + 548);
  v7 = *(_QWORD *)(v6 + 488);
  if (v7 && *(_QWORD *)(v7 + 8))
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), v73, (uint64_t)v74);
  updated = WebCore::MemoryCache::sessionResourceMap(v3, *((_QWORD *)a2 + 52));
  if (updated)
  {
    v9 = (uint64_t *)updated;
    if ((*((_BYTE *)a2 + 344) & 1) == 0)
    {
      updated = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
      *((_BYTE *)a2 + 344) |= 1u;
    }
    v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 20);
    if (v10)
      *(_DWORD *)v10 += 2;
    v68 = v10;
    v11 = *(_OWORD *)((char *)a2 + 184);
    v69 = *(_OWORD *)((char *)a2 + 168);
    v70 = v11;
    v12 = (WTF::StringImpl *)*((_QWORD *)a2 + 40);
    if (v12)
      *(_DWORD *)v12 += 2;
    v71 = v12;
    v13 = (_WORD *)((char *)a2 + 557);
    v14 = *v9;
    if ((*(_WORD *)((_BYTE *)a2 + 557) & 0x200) != 0)
    {
      v65 = (WebCore::CachedResource *)((char *)a2 + 160);
      if (v14)
      {
        v66 = v3;
        v67 = *(_DWORD *)(v14 - 8);
        v15 = *((_DWORD *)v10 + 4);
        if (v15 < 0x100)
          v16 = WTF::StringImpl::hashSlowCase(v10);
        else
          v16 = v15 >> 8;
        v17 = *((_DWORD *)v12 + 4);
        if (v17 < 0x100)
          v18 = WTF::StringImpl::hashSlowCase(v12);
        else
          v18 = v17 >> 8;
        v19 = v67 & ((0xD7862706ELL * (unint64_t)(277951225 * v16 + 95187966 * v18)) >> 4);
        for (i = 1; ; ++i)
        {
          v21 = v14 + 56 * v19;
          v74[0] = 0;
          WTF::URL::invalidate((WTF::URL *)v74);
          v22 = v74[0];
          updated = WTF::equal(*(WTF **)v21, v74[0], v23);
          if ((_DWORD)updated)
          {
            updated = WTF::equal(*(WTF **)(v21 + 40), 0, v25);
            v26 = updated;
          }
          else
          {
            v26 = 0;
          }
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              updated = WTF::StringImpl::destroy(v22, v24);
            else
              *(_DWORD *)v22 -= 2;
          }
          if ((v26 & 1) != 0)
          {
            v28 = *v9;
            v13 = (_WORD *)((char *)a2 + 557);
            v3 = v66;
            if (!*v9)
              goto LABEL_57;
            v29 = *(_DWORD *)(v28 - 4);
            v21 = v28 + 56 * v29;
            goto LABEL_37;
          }
          if (*(_QWORD *)v21 != -1)
          {
            if (WTF::equal(*(WTF **)v21, v10, v25))
            {
              updated = WTF::equal(*(WTF **)(v21 + 40), v12, v27);
              if ((updated & 1) != 0)
                break;
            }
          }
          v19 = (v19 + i) & v67;
        }
        v28 = *v9;
        if (!*v9)
        {
          v13 = (_WORD *)((char *)a2 + 557);
          v3 = v66;
          goto LABEL_38;
        }
        v29 = *(_DWORD *)(v28 - 4);
        v13 = (_WORD *)((char *)a2 + 557);
        v3 = v66;
LABEL_37:
        v28 += 56 * v29;
        if (v28 == v21)
          goto LABEL_57;
LABEL_38:
        if (v28 != v21)
        {
          v30 = *(WTF::StringImpl **)(v21 + 40);
          *(_QWORD *)(v21 + 40) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v24);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = *(WTF::StringImpl **)v21;
          *(_QWORD *)v21 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v24);
            else
              *(_DWORD *)v31 -= 2;
          }
          *(_QWORD *)v21 = -1;
          updated = *(_QWORD *)(v21 + 48);
          *(_QWORD *)(v21 + 48) = 0;
          if (updated)
          {
            do
            {
              v32 = __ldaxr((unsigned int *)updated);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, (unsigned int *)updated));
            if (!v33)
            {
              atomic_store(1u, (unsigned int *)updated);
              updated = WTF::fastFree((WTF *)updated, v24);
            }
          }
          ++*(_DWORD *)(*v9 - 16);
          v34 = *v9;
          if (*v9)
            v35 = *(_DWORD *)(v34 - 12) - 1;
          else
            v35 = -1;
          *(_DWORD *)(v34 - 12) = v35;
          v36 = *v9;
          if (*v9)
          {
            v37 = 6 * *(_DWORD *)(v36 - 12);
            v38 = *(_DWORD *)(v36 - 4);
            if (v37 < v38 && v38 >= 9)
              updated = WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::rehash(v9, v38 >> 1, 0);
          }
        }
      }
LABEL_57:
      *v13 &= ~0x200u;
      if (*v9 && *(_DWORD *)(*v9 - 12))
      {
LABEL_59:
        isMainThread = WTF::isMainThread((WTF *)updated);
        if ((isMainThread & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F59E38);
        }
        if (*((_DWORD *)a2 + 136))
        {
          v41 = WebCore::MemoryCache::lruListFor(v3, a2);
          isMainThread = WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CachedResource>(v41, (uint64_t)a2);
        }
        if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F59E58);
        }
        WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CachedResource>((uint64_t)v3 + 304, (uint64_t)a2);
        isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences((uint64_t)a2 + 360, v42);
        if (!(_DWORD)isEmptyIgnoringNullReferences)
          goto LABEL_64;
        v58 = *((_QWORD *)a2 + 56);
        if (v58 && *(_DWORD *)(v58 - 12))
        {
          WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::begin((uint64_t *)a2 + 56, (uint64_t)v74);
          isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::end((uint64_t *)a2 + 56, (uint64_t)v73);
          if (v74[1] != (WTF::StringImpl *)v73[1])
          {
LABEL_64:
            v44 = 1;
LABEL_65:
            v45 = *((_QWORD *)a2 + 50);
            if (v45)
            {
              v46 = *(_DWORD *)(v45 + 400);
              v47 = *(_DWORD *)(v45 + 404);
            }
            else
            {
              v57 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
              if (v57 != -1)
              {
                v74[0] = (WTF::StringImpl *)&v75;
                v73[0] = (uint64_t)v74;
                std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v73, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
              }
              v47 = 0;
              v46 = 0;
            }
            if ((*((_BYTE *)a2 + 344) & 1) == 0)
            {
              isEmptyIgnoringNullReferences = (WTF *)WebCore::ResourceRequest::doUpdateResourceRequest(v65);
              *((_BYTE *)a2 + 344) |= 1u;
            }
            v48 = 4840;
            if (*(_QWORD *)v65)
              v48 = 2 * *(_DWORD *)(*(_QWORD *)v65 + 4) + 4840;
            if ((WTF::isMainThread(isEmptyIgnoringNullReferences) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195F59E88);
            }
            v50 = v46 + v47 + v48;
            if (v44)
              *((_DWORD *)v3 + 6) -= v50;
            else
              *((_DWORD *)v3 + 7) -= v50;
LABEL_84:
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
                WTF::StringImpl::destroy(v71, v49);
              else
                *(_DWORD *)v71 -= 2;
            }
            if (v68)
            {
              if (*(_DWORD *)v68 == 2)
                WTF::StringImpl::destroy(v68, v49);
              else
                *(_DWORD *)v68 -= 2;
            }
            goto LABEL_90;
          }
          isEmptyIgnoringNullReferences = (WTF *)WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::clear((uint64_t)a2 + 448, v59);
        }
        v44 = 0;
        goto LABEL_65;
      }
      v64 = *((_QWORD *)a2 + 52);
      if ((unint64_t)(v64 - 1) < 0xFFFFFFFFFFFFFFFELL)
      {
        updated = (unint64_t)WTF::HashMap<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::remove((uint64_t *)v3 + 42, v64);
        goto LABEL_59;
      }
      __break(0xC471u);
    }
    else
    {
      v51 = WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>>>,std::pair<WTF::URL,WTF::String>>(*v9, &v68);
      if (!v51)
        goto LABEL_84;
      v52 = v51[6];
      if (!v52)
        goto LABEL_84;
      do
        v53 = __ldaxr((unsigned int *)v52);
      while (__stlxr(v53 + 1, (unsigned int *)v52));
      v54 = (WebCore::CachedResource *)*((_QWORD *)v52 + 1);
      do
      {
        v55 = __ldaxr((unsigned int *)v52);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, (unsigned int *)v52));
      if (!v56)
      {
        atomic_store(1u, (unsigned int *)v52);
        WTF::fastFree(v52, v49);
      }
      if (v54 != a2)
        goto LABEL_84;
      __break(0xC471u);
    }
    JUMPOUT(0x195F59C38);
  }
LABEL_90:
  if ((*(_WORD *)((_BYTE *)a2 + 557) & 0x200) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F59E18);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v72);
}

uint64_t WebCore::MemoryCache::revalidationFailed(WebCore::MemoryCache *this, WebCore::CachedResource *a2)
{
  void *v3;
  uint64_t result;

  if ((WTF::isMainThread(this) & 1) != 0)
    return WebCore::CachedResource::clearResourceToRevalidate((uint64_t)a2, v3);
  result = 191;
  __break(0xC471u);
  return result;
}

uint64_t *WebCore::MemoryCache::resourceForRequest(WTF *a1, WebCore::ResourceRequest *a2, uint64_t a3)
{
  uint64_t *result;

  if ((WTF::isMainThread(a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5A00CLL);
  }
  result = (uint64_t *)WebCore::MemoryCache::sessionResourceMap(a1, a3);
  if (result)
    return (uint64_t *)WebCore::MemoryCache::resourceForRequestImpl((int)result, a2, result);
  return result;
}

void WebCore::MemoryCache::pruneLiveResources(WebCore::MemoryCache *this, char a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  if ((WTF::isMainThread(this) & 1) != 0)
  {
    if ((a2 & 1) != 0)
    {
      v4 = 0;
LABEL_12:
      WebCore::MemoryCache::pruneLiveResourcesToSize(this, (float)((float)v4 * 0.95), a2);
      return;
    }
    v5 = *((_DWORD *)this + 6);
    v6 = *((_DWORD *)this + 1);
    v7 = *((_DWORD *)this + 2);
    v8 = v6 - v5;
    if (v6 < v5)
      v8 = 0;
    if (v8 > v7)
      v7 = v8;
    if (*((_DWORD *)this + 3) < v7)
      v7 = *((_DWORD *)this + 3);
    v4 = v6 - v7;
    if (!v4 || v5 > v4)
      goto LABEL_12;
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::MemoryCache::pruneLiveResourcesToSize(WebCore::MemoryCache *this, unsigned int a2, char a3)
{
  uint64_t isMainThread;
  double v7;
  double v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  isMainThread = WTF::isMainThread(this);
  if ((isMainThread & 1) != 0)
  {
    if (!*((_BYTE *)this + 1))
    {
      *((_BYTE *)this + 1) = 1;
      v7 = *(double *)&WebCore::LocalFrameView::sCurrentPaintTimeStamp;
      if (*(double *)&WebCore::LocalFrameView::sCurrentPaintTimeStamp == 0.0)
      {
        WTF::MonotonicTime::now((WTF::MonotonicTime *)isMainThread);
        v7 = v8;
      }
      v9 = (_QWORD *)*((_QWORD *)this + 39);
      if (v9)
      {
        while (!*(_QWORD *)(*v9 + 8))
        {
          v9 = (_QWORD *)v9[2];
          if (!v9)
            goto LABEL_24;
        }
        while (1)
        {
          WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v13, *(WebCore::CachedResource **)(*v9 + 8));
          v10 = (_QWORD *)v9[2];
          if (v10)
          {
            while (!*(_QWORD *)(*v10 + 8))
            {
              v9 = 0;
              v10 = (_QWORD *)v10[2];
              if (!v10)
                goto LABEL_15;
            }
            v9 = v10;
          }
          else
          {
            v9 = 0;
          }
LABEL_15:
          ++*((_DWORD *)this + 82);
          if (v13)
          {
            v11 = *(_QWORD *)(v13 + 8);
            if ((*(_WORD *)(v11 + 557) & 0x400) == 0)
            {
              v12 = *(_QWORD *)(v11 + 400);
              if (v12)
              {
                if (*(_DWORD *)(v12 + 404))
                {
                  if ((a3 & 1) == 0 && v7 - *(double *)(v11 + 408) < 1.0)
                    break;
                  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 144))(v11);
                  if (a2)
                  {
                    if (*((_DWORD *)this + 6) <= a2)
                      break;
                  }
                }
              }
            }
          }
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v13);
          if (!v9)
            goto LABEL_24;
        }
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v13);
      }
LABEL_24:
      *((_BYTE *)this + 1) = 0;
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebCore::MemoryCache::destroyDecodedDataForAllImages(uint64_t **this)
{
  WTF *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  WTF *v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int **v18;
  unsigned int **v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  WTF *v33;
  WTF *v34;
  unsigned int **v35;
  unsigned int **v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  WTF *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  WTF *v64;
  unsigned int *v65;
  WTF *v66;
  uint64_t v67;
  char v68[24];
  unsigned int **v69;

  if ((WTF::isMainThread((WTF *)this) & 1) == 0)
  {
LABEL_105:
    __break(0xC471u);
    JUMPOUT(0x195F5A754);
  }
  v2 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E33F8F98;
  if ((WTF::isMainThread(v2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5A774);
  }
  v66 = 0;
  v67 = 0;
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v64 = v2;
    v5 = this[4];
    v6 = &v5[v4];
    do
    {
      v7 = HIDWORD(v67);
      v8 = *v5;
      v9 = *(WTF **)(*v5 + 8);
      if (v9)
      {
        do
        {
          v10 = (WTF *)*((_QWORD *)v9 + 2);
          if (!*(_QWORD *)(*(_QWORD *)v9 + 8))
            WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)v8, (void *)v8, v9);
          v9 = v10;
        }
        while (v10);
      }
      *(_DWORD *)(v8 + 24) = 0;
      v11 = *(_QWORD *)v8;
      if (*(_QWORD *)v8)
      {
        v12 = *(_DWORD *)(v11 - 12);
        if (v12 >= 0x7FFFFFFF)
          v13 = -2;
        else
          v13 = 2 * v12;
        *(_DWORD *)(v8 + 28) = v13;
        v11 = *(unsigned int *)(v11 - 12);
      }
      else
      {
        *(_DWORD *)(v8 + 28) = 0;
      }
      v14 = v11 + v7;
      if (v11 + v7 > (unint64_t)v67)
      {
        if (v14 >> 29)
          goto LABEL_105;
        v15 = v66;
        v16 = WTF::fastMalloc((WTF *)(8 * v14));
        LODWORD(v67) = v14;
        v66 = (WTF *)v16;
        if ((_DWORD)v7)
        {
          v17 = (_QWORD *)v16;
          v18 = (unsigned int **)((char *)v15 + 8 * v7);
          v19 = (unsigned int **)v15;
          do
          {
            v20 = *v19;
            *v19 = 0;
            *v17 = v20;
            v21 = *v19;
            *v19 = 0;
            if (v21)
            {
              do
              {
                v22 = __ldaxr(v21);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, v21));
              if (!v23)
              {
                atomic_store(1u, v21);
                WTF::fastFree((WTF *)v21, v3);
              }
            }
            ++v17;
            ++v19;
          }
          while (v19 != v18);
        }
        if (v15)
        {
          if (v66 == v15)
          {
            v66 = 0;
            LODWORD(v67) = 0;
          }
          WTF::fastFree(v15, v3);
        }
      }
      v24 = *v5;
      v25 = *(_QWORD **)(*v5 + 8);
      if (v25)
      {
        while (1)
        {
          v26 = *(_QWORD *)(*v25 + 8);
          if (v26)
            break;
          v25 = (_QWORD *)v25[2];
          if (!v25)
            goto LABEL_75;
        }
        v27 = HIDWORD(v67);
LABEL_32:
        v28 = v27;
        if (v27 == (_DWORD)v67)
        {
          v29 = v27 + 1;
          v30 = v28 + (v28 >> 2);
          if (v30 >= 0x10)
            v31 = v30 + 1;
          else
            v31 = 16;
          if (v31 <= v29)
            v32 = v28 + 1;
          else
            v32 = v31;
          if (v32 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195F5A77CLL);
          }
          v33 = v66;
          v34 = (WTF *)WTF::fastMalloc((WTF *)(8 * v32));
          LODWORD(v67) = v32;
          v66 = v34;
          if ((_DWORD)v28)
          {
            v35 = (unsigned int **)((char *)v33 + 8 * v28);
            v36 = (unsigned int **)v33;
            do
            {
              v37 = *v36;
              *v36 = 0;
              *(_QWORD *)v34 = v37;
              v38 = *v36;
              *v36 = 0;
              if (v38)
              {
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                {
                  atomic_store(1u, v38);
                  WTF::fastFree((WTF *)v38, v3);
                }
              }
              v34 = (WTF *)((char *)v34 + 8);
              ++v36;
            }
            while (v36 != v35);
            v34 = v66;
          }
          if (v33)
          {
            if (v34 == v33)
            {
              v34 = 0;
              v66 = 0;
              LODWORD(v67) = 0;
            }
            WTF::fastFree(v33, v3);
          }
          v44 = HIDWORD(v67);
          v45 = *(_QWORD *)(v26 + 8);
          if (v45)
            goto LABEL_111;
          v45 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v45 = 1;
          *(_QWORD *)(v45 + 8) = v26;
          v50 = *(unsigned int **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = v45;
          if (!v50)
            goto LABEL_111;
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            atomic_store(1u, v50);
            WTF::fastFree((WTF *)v50, v3);
          }
          v45 = *(_QWORD *)(v26 + 8);
          if (v45)
          {
LABEL_111:
            do
              v46 = __ldaxr((unsigned int *)v45);
            while (__stlxr(v46 + 1, (unsigned int *)v45));
          }
          *((_QWORD *)v34 + v44) = v45;
        }
        else
        {
          v41 = v66;
          v42 = *(_QWORD *)(v26 + 8);
          if (v42)
            goto LABEL_112;
          v42 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v42 = 1;
          *(_QWORD *)(v42 + 8) = v26;
          v47 = *(unsigned int **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = v42;
          if (!v47)
            goto LABEL_112;
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            atomic_store(1u, v47);
            WTF::fastFree((WTF *)v47, v3);
          }
          v42 = *(_QWORD *)(v26 + 8);
          if (v42)
          {
LABEL_112:
            do
              v43 = __ldaxr((unsigned int *)v42);
            while (__stlxr(v43 + 1, (unsigned int *)v42));
          }
          *((_QWORD *)v41 + v28) = v42;
        }
        v27 = ++HIDWORD(v67);
        while (1)
        {
          v25 = (_QWORD *)v25[2];
          if (!v25)
            break;
          v26 = *(_QWORD *)(*v25 + 8);
          if (v26)
          {
            ++*(_DWORD *)(v24 + 24);
            goto LABEL_32;
          }
        }
        ++*(_DWORD *)(v24 + 24);
      }
LABEL_75:
      ++v5;
    }
    while (v5 != v6);
    v2 = v64;
    if (HIDWORD(v67))
    {
      v53 = v66;
      v54 = (WTF *)((char *)v66 + 8 * HIDWORD(v67));
      do
      {
        if (!*(_QWORD *)v53)
          goto LABEL_82;
        v55 = *(_QWORD *)(*(_QWORD *)v53 + 8);
        if (!v55)
          goto LABEL_82;
        v56 = *(unsigned int **)(v55 + 8);
        if (v56)
          goto LABEL_113;
        v56 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v56 = 1;
        *((_QWORD *)v56 + 1) = v55;
        v60 = *(unsigned int **)(v55 + 8);
        *(_QWORD *)(v55 + 8) = v56;
        if (!v60)
          goto LABEL_113;
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          atomic_store(1u, v60);
          WTF::fastFree((WTF *)v60, v3);
        }
        v56 = *(unsigned int **)(v55 + 8);
        v2 = v64;
        if (v56)
        {
LABEL_113:
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 + 1, v56));
          v65 = v56;
          v58 = *((_QWORD *)v56 + 1);
          if (!v58
            || (v69 = &v65, ++*(_DWORD *)(v58 + 548), (v59 = *(_QWORD *)(v58 + 488)) == 0)
            || !*(_QWORD *)(v59 + 8))
          {
            v2 = v64;
LABEL_91:
            v3 = (void *)*((_QWORD *)v56 + 1);
            if (v3)
              (*(void (**)(WTF *))(*(_QWORD *)v2 + 16))(v2);
            goto LABEL_83;
          }
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v58 + 464), (uint64_t *)&v69, (uint64_t)v68);
          v2 = v64;
          v56 = v65;
          if (v65)
            goto LABEL_91;
        }
        else
        {
LABEL_82:
          v65 = 0;
        }
LABEL_83:
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v65, v3);
        v53 = (WTF *)((char *)v53 + 8);
      }
      while (v53 != v54);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v3);
  return (*(uint64_t (**)(WTF *))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::MemoryCache::pruneDeadResources(WebCore::MemoryCache *this)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  result = WTF::isMainThread(this);
  if ((result & 1) != 0)
  {
    v3 = *((_DWORD *)this + 6);
    v4 = *((_DWORD *)this + 1);
    v5 = v4 >= v3;
    v6 = v4 - v3;
    if (!v5)
      v6 = 0;
    if (v6 <= *((_DWORD *)this + 2))
      v6 = *((_DWORD *)this + 2);
    if (*((_DWORD *)this + 3) < v6)
      v6 = *((_DWORD *)this + 3);
    if (!v6 || *((_DWORD *)this + 7) > v6)
      return WebCore::MemoryCache::pruneDeadResourcesToSize(this, (float)((float)v6 * 0.95));
  }
  else
  {
    result = 339;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::MemoryCache::pruneDeadResourcesToSize(WebCore::MemoryCache *this, unsigned int a2)
{
  uint64_t result;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::CachedResource *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::CachedResource *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  result = WTF::isMainThread(this);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_53;
  }
  if (!*((_BYTE *)this + 1))
  {
    *((_BYTE *)this + 1) = 1;
    if (!a2 || *((_DWORD *)this + 7) > a2)
    {
      v5 = *((_DWORD *)this + 11);
      v6 = (v5 - 1);
      if (v5 - 1 >= 0)
      {
        v7 = (_QWORD *)((char *)this + 32);
        v8 = 1;
        while (1)
        {
          if (v6 >= *((unsigned int *)this + 11))
          {
            __break(0xC471u);
            JUMPOUT(0x195F5AA94);
          }
          v9 = *(_QWORD *)(*v7 + 8 * v6);
          v28 = 0;
          v29 = 0;
          WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebCore::CachedResource,WTF::DefaultWeakPtrImpl>(WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::CachedResource&)#1},WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v28, v9);
          if (HIDWORD(v29))
          {
            v11 = v28;
            v12 = 8 * HIDWORD(v29);
            do
            {
              if (*(_QWORD *)v11)
                v13 = *(WebCore::CachedResource **)(*(_QWORD *)v11 + 8);
              else
                v13 = 0;
              WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v27, v13);
              if (v27)
              {
                v15 = *(_QWORD *)(v27 + 8);
                if (v15)
                {
                  if ((*(_WORD *)(v15 + 557) & 0x200) != 0
                    && (WebCore::CachedResource::hasClients((WebCore::CachedResource *)v15, v14) & 1) == 0)
                  {
                    if (v27)
                    {
                      v23 = *(_QWORD *)(v27 + 8);
                      if (!*(_DWORD *)(v23 + 552) && (*(_WORD *)(v23 + 557) & 0x400) == 0)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 144))(v23);
                        if (a2)
                        {
                          if (*((_DWORD *)this + 7) <= a2)
                            goto LABEL_49;
                        }
                      }
                    }
                  }
                }
              }
              WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v27);
              v11 += 8;
              v12 -= 8;
            }
            while (v12);
            if (HIDWORD(v29))
              break;
          }
LABEL_25:
          if (v6 >= *((unsigned int *)this + 11))
          {
            __break(0xC471u);
LABEL_53:
            JUMPOUT(0x195F5AA8CLL);
          }
          v8 &= WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(*(_QWORD *)(*v7 + 8 * v6), v10);
          if (v8 == 1)
            WTF::Vector<std::unique_ptr<WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)this + 32, (void *)v6);
          result = WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v21);
          if ((uint64_t)v6-- <= 0)
            goto LABEL_47;
        }
        v16 = v28;
        v17 = 8 * HIDWORD(v29);
        while (1)
        {
          v18 = *(_QWORD *)v16 ? *(WebCore::CachedResource **)(*(_QWORD *)v16 + 8) : 0;
          WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v27, v18);
          if (v27)
          {
            v20 = *(_QWORD *)(v27 + 8);
            if (v20)
            {
              if ((*(_WORD *)(v20 + 557) & 0x200) != 0
                && (WebCore::CachedResource::hasClients((WebCore::CachedResource *)v20, v19) & 1) == 0)
              {
                if (v27)
                {
                  v24 = *(_QWORD *)(v27 + 8);
                  if (!*(_DWORD *)(v24 + 552))
                  {
                    v25 = *(_QWORD *)(v24 + 488);
                    if (!v25 || !*(_QWORD *)(v25 + 8))
                    {
                      WebCore::MemoryCache::remove(this, (WebCore::CachedResource *)v24);
                      if (a2)
                      {
                        if (*((_DWORD *)this + 7) <= a2)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v27);
          v16 += 8;
          v17 -= 8;
          if (!v17)
            goto LABEL_25;
        }
LABEL_49:
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v27);
        result = WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v26);
      }
    }
LABEL_47:
    *((_BYTE *)this + 1) = 0;
  }
  return result;
}

uint64_t WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;

  if (!*(_QWORD *)a1 || !*(_DWORD *)(*(_QWORD *)a1 - 12))
    return 1;
  v4 = a1 + 8;
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
  {
LABEL_7:
    WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes(a1, a2);
    v7 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      WTF::fastFree((WTF *)(v7 - 16), v6);
      v7 = *(_QWORD *)a1;
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 16) = 0;
      if (v7)
      {
        LODWORD(v7) = *(_DWORD *)(v7 - 12);
        if (v7 > 0x7FFFFFFE)
          LODWORD(v7) = 0x7FFFFFFF;
      }
    }
    else
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 16) = 0;
    }
    *(_DWORD *)(a1 + 28) = 2 * v7;
    return 1;
  }
  while (!*(_QWORD *)(*v3 + 8))
  {
    v3 = (_QWORD *)v3[2];
    if (!v3)
      goto LABEL_7;
  }
  return 0;
}

uint64_t WTF::Vector<std::unique_ptr<WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, void *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF **v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;

  v2 = (int)a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if ((void *)v4 != a2)
  {
    v5 = *(_QWORD *)result + 8 * v4;
    v6 = (WTF **)(*(_QWORD *)result + 8 * (_QWORD)a2);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        v8 = (WTF *)*((_QWORD *)v7 + 1);
        while (v8)
        {
          v9 = v8;
          v8 = (WTF *)*((_QWORD *)v8 + 2);
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              v13 = v9;
              WTF::fastFree((WTF *)v10, a2);
              v9 = v13;
            }
          }
          WTF::fastFree(v9, a2);
        }
        if (*(_QWORD *)v7)
          WTF::fastFree((WTF *)(*(_QWORD *)v7 - 16), a2);
        result = WTF::fastFree(v7, a2);
      }
      ++v6;
    }
    while (v6 != (WTF **)v5);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

uint64_t *WTF::HashMap<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::remove(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *result;
  if (*result)
  {
    v4 = result;
    v5 = *(_DWORD *)(v2 - 8);
    result = (uint64_t *)WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
    v7 = result & v5;
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 != a2)
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v5;
        v8 = *(_QWORD *)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_8;
      }
      v7 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v7 != *(_DWORD *)(v2 - 4))
    {
      v10 = (_QWORD *)(v2 + 16 * v7);
      v11 = (uint64_t *)v10[1];
      *v10 = -1;
      v10[1] = 0;
      if (v11)
      {
        if (*v11)
          WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::deallocateTable(*v11, v6);
        result = (uint64_t *)WTF::fastFree((WTF *)v11, v6);
      }
      ++*(_DWORD *)(*v4 - 16);
      v12 = *v4;
      if (*v4)
        v13 = *(_DWORD *)(v12 - 12) - 1;
      else
        v13 = -1;
      *(_DWORD *)(v12 - 12) = v13;
      v14 = *v4;
      if (*v4)
      {
        v15 = 6 * *(_DWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
          return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(v4, v16 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebCore::MemoryCache::inLiveDecodedResourcesList(WebCore::MemoryCache *this, WebCore::CachedResource *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  _QWORD *v12;
  uint64_t result;

  if ((WTF::isMainThread(this) & 1) != 0)
  {
    ++*((_DWORD *)this + 82);
    v4 = *((_QWORD *)a2 + 1);
    if (v4 && *(_QWORD *)(v4 + 8) && (v5 = *((_QWORD *)this + 38)) != 0)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      for (i = 1; ; ++i)
      {
        v12 = *(_QWORD **)(v5 + 8 * v10);
        if (v12 != (_QWORD *)-1)
        {
          if (!v12)
            return 0;
          if (*v12 == v4)
            break;
        }
        v10 = (v10 + i) & v6;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 537;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::MemoryCache::removeResourcesWithOrigin(WebCore::MemoryCache *this, const WebCore::SecurityOrigin *a2, const WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF ***v13;
  WTF **v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  int v20;
  int v21;
  WTF **v22;
  WTF **v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  WTF *v30;
  WTF *v31;
  unsigned int **v32;
  unsigned int **v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  unsigned int v44;
  _BOOL4 isSameSchemeHostPort;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  WTF *v53;
  WTF *v54;
  unsigned int **v55;
  unsigned int **v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  WTF *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  WTF **v69;
  WTF::StringImpl *v70;
  const WTF::StringImpl *v71;
  int v72;
  int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  _QWORD *v89;
  WTF *v90;
  WTF *v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  WebCore::MemoryCache *v101;
  _QWORD *v102;
  _QWORD *v103;
  const WTF::String *v104;
  unsigned int *v105;
  WTF *v106;
  uint64_t v107;
  WTF::StringImpl *v108[2];
  char v109;
  uint64_t v110[2];
  char v111;
  char v112;
  unsigned int *v113;

  if ((WTF::isMainThread(this) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_209;
  }
  v106 = 0;
  v107 = 0;
  v8 = (_QWORD *)*((_QWORD *)this + 42);
  if (!v8)
  {
    v11 = 0;
    v9 = 0;
LABEL_11:
    v10 = &v8[2 * v9];
    goto LABEL_12;
  }
  v9 = *((unsigned int *)v8 - 1);
  v10 = &v8[2 * v9];
  if (!*((_DWORD *)v8 - 3))
  {
    v11 = &v8[2 * v9];
    goto LABEL_11;
  }
  v11 = (_QWORD *)*((_QWORD *)this + 42);
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    v11 = (_QWORD *)*((_QWORD *)this + 42);
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      v11 += 2;
      v12 -= 16;
      if (!v12)
      {
        v11 = v10;
        break;
      }
    }
  }
LABEL_12:
  v101 = this;
  if (v8)
    v8 += 2 * *((unsigned int *)v8 - 1);
  if (v8 != v11)
  {
    v104 = (const WTF::String *)a3;
    v102 = v8;
    v103 = v10;
    while (1)
    {
      v13 = (WTF ***)v11[1];
      v14 = *v13;
      if (!*v13)
      {
        v22 = 0;
        LODWORD(v15) = 0;
        goto LABEL_34;
      }
      v15 = *((unsigned int *)v14 - 1);
      v16 = &v14[7 * v15];
      if (!*((_DWORD *)v14 - 3))
      {
        v22 = &v14[7 * v15];
LABEL_34:
        v16 = &v14[7 * v15];
        goto LABEL_37;
      }
      if (!(_DWORD)v15)
      {
        v22 = *v13;
        goto LABEL_37;
      }
      v17 = 56 * v15;
      do
      {
        v108[0] = 0;
        WTF::URL::invalidate((WTF::URL *)v108);
        v18 = v108[0];
        if (WTF::equal(*v14, v108[0], v19))
        {
          v20 = WTF::equal(v14[5], 0, v7);
          if (v18)
            goto LABEL_24;
        }
        else
        {
          v20 = 0;
          if (v18)
          {
LABEL_24:
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v6);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        if (*v14 == (WTF *)-1)
          v21 = 1;
        else
          v21 = v20;
        if (v21 != 1)
          goto LABEL_36;
        v14 += 7;
        v17 -= 56;
      }
      while (v17);
      v14 = v16;
LABEL_36:
      v22 = v14;
      v14 = *v13;
LABEL_37:
      if (v14)
        v23 = &v14[7 * *((unsigned int *)v14 - 1)];
      else
        v23 = 0;
      if (v23 == v22)
        goto LABEL_173;
      while (2)
      {
        v24 = v22[6];
        if (v24)
          v25 = *((_QWORD *)v24 + 1);
        else
          v25 = 0;
        if (!WTF::equal(v22[5], *a3, v7))
        {
          if ((*(_BYTE *)(v25 + 344) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v25 + 160));
            *(_BYTE *)(v25 + 344) |= 1u;
          }
          WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v25 + 160), (uint64_t *)&v105);
          v38 = v105;
          if (v105 == (unsigned int *)a2)
            goto LABEL_91;
          v39 = v105[8];
          if ((_DWORD)v39 == 1 || *((_DWORD *)a2 + 8) == 1)
          {
            if ((_DWORD)v39 == -1
              || (v110[0] = (uint64_t)&v113,
                  ((void (*)(WTF::StringImpl **__return_ptr, uint64_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData22opaqueOriginIdentifierEvEUlRKNS9_5TupleEE_JZNKS9_22opaqueOriginIdentifierEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v39])(v108, v110, v105 + 2), v41 = *((unsigned int *)a2 + 8), (_DWORD)v41 == -1))
            {
              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_207:
              __break(0xC471u);
              JUMPOUT(0x195F5B7B0);
            }
            v113 = (unsigned int *)&v112;
            ((void (*)(uint64_t *__return_ptr, unsigned int **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData22opaqueOriginIdentifierEvEUlRKNS9_5TupleEE_JZNKS9_22opaqueOriginIdentifierEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v41])(v110, &v113, (char *)a2 + 8);
            if (!v109 || !v111)
            {
              if ((v109 != 0) != (v111 != 0))
                goto LABEL_81;
              goto LABEL_91;
            }
            if (v108[0] == (WTF::StringImpl *)v110[0] && v108[1] == (WTF::StringImpl *)v110[1])
              goto LABEL_91;
LABEL_81:
            v105 = 0;
            goto LABEL_118;
          }
          isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort((uint64_t)v105, (uint64_t)a2);
          if (!isSameSchemeHostPort
            || *((unsigned __int8 *)v38 + 57) != *((unsigned __int8 *)a2 + 57)
            || *((_BYTE *)v38 + 57)
            && (WTF::equal(*((WTF **)v38 + 5), *((const WTF::StringImpl **)a2 + 5), v7) & 1) == 0)
          {
            goto LABEL_81;
          }
LABEL_91:
          v49 = HIDWORD(v107);
          if (HIDWORD(v107) != (_DWORD)v107)
          {
            v61 = v106;
            v62 = *(_QWORD *)(v25 + 8);
            if (v62)
              goto LABEL_213;
            v62 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v62 = 1;
            *(_QWORD *)(v62 + 8) = v25;
            v80 = *(unsigned int **)(v25 + 8);
            *(_QWORD *)(v25 + 8) = v62;
            if (!v80)
              goto LABEL_213;
            do
            {
              v81 = __ldaxr(v80);
              v82 = v81 - 1;
            }
            while (__stlxr(v82, v80));
            if (!v82)
            {
              atomic_store(1u, v80);
              WTF::fastFree((WTF *)v80, v6);
            }
            v62 = *(_QWORD *)(v25 + 8);
            if (v62)
            {
LABEL_213:
              do
                v63 = __ldaxr((unsigned int *)v62);
              while (__stlxr(v63 + 1, (unsigned int *)v62));
            }
            *((_QWORD *)v61 + v49) = v62;
            goto LABEL_117;
          }
          v50 = HIDWORD(v107) + ((unint64_t)HIDWORD(v107) >> 2);
          if (v50 >= 0x10)
            v51 = v50 + 1;
          else
            v51 = 16;
          if (v51 <= (unint64_t)HIDWORD(v107) + 1)
            v52 = HIDWORD(v107) + 1;
          else
            v52 = v51;
          if (!(v52 >> 29))
          {
            v53 = v106;
            v54 = (WTF *)WTF::fastMalloc((WTF *)(8 * v52));
            LODWORD(v107) = v52;
            v106 = v54;
            if ((_DWORD)v49)
            {
              v55 = (unsigned int **)((char *)v53 + 8 * v49);
              v56 = (unsigned int **)v53;
              do
              {
                v57 = *v56;
                *v56 = 0;
                *(_QWORD *)v54 = v57;
                v58 = *v56;
                *v56 = 0;
                if (v58)
                {
                  do
                  {
                    v59 = __ldaxr(v58);
                    v60 = v59 - 1;
                  }
                  while (__stlxr(v60, v58));
                  if (!v60)
                  {
                    atomic_store(1u, v58);
                    WTF::fastFree((WTF *)v58, v6);
                  }
                }
                v54 = (WTF *)((char *)v54 + 8);
                ++v56;
              }
              while (v56 != v55);
              v54 = v106;
            }
            a3 = (const WTF::StringImpl **)v104;
            if (v53)
            {
              if (v54 == v53)
              {
                v54 = 0;
                v106 = 0;
                LODWORD(v107) = 0;
              }
              WTF::fastFree(v53, v6);
            }
            v64 = HIDWORD(v107);
            v65 = *(_QWORD *)(v25 + 8);
            if (v65)
              goto LABEL_214;
            v65 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v65 = 1;
            *(_QWORD *)(v65 + 8) = v25;
            v83 = *(unsigned int **)(v25 + 8);
            *(_QWORD *)(v25 + 8) = v65;
            if (!v83)
              goto LABEL_214;
            do
            {
              v84 = __ldaxr(v83);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, v83));
            if (!v85)
            {
              atomic_store(1u, v83);
              WTF::fastFree((WTF *)v83, v6);
            }
            v65 = *(_QWORD *)(v25 + 8);
            if (v65)
            {
LABEL_214:
              do
                v66 = __ldaxr((unsigned int *)v65);
              while (__stlxr(v66 + 1, (unsigned int *)v65));
            }
            *((_QWORD *)v54 + v64) = v65;
LABEL_117:
            ++HIDWORD(v107);
            v38 = v105;
            v105 = 0;
            if (!v38)
              goto LABEL_120;
            do
            {
LABEL_118:
              v67 = __ldaxr(v38);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v38));
            if (!v68)
            {
              atomic_store(1u, v38);
              v86 = (WTF::StringImpl *)*((_QWORD *)v38 + 6);
              *((_QWORD *)v38 + 6) = 0;
              if (v86)
              {
                if (*(_DWORD *)v86 == 2)
                  WTF::StringImpl::destroy(v86, v6);
                else
                  *(_DWORD *)v86 -= 2;
              }
              v87 = (WTF::StringImpl *)*((_QWORD *)v38 + 5);
              *((_QWORD *)v38 + 5) = 0;
              if (v87)
              {
                if (*(_DWORD *)v87 == 2)
                  WTF::StringImpl::destroy(v87, v6);
                else
                  *(_DWORD *)v87 -= 2;
              }
              v88 = v38[8];
              if ((_DWORD)v88 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F8F28[v88])(v108, v38 + 2);
              v38[8] = -1;
              WTF::fastFree((WTF *)v38, v6);
            }
            goto LABEL_120;
          }
          __break(0xC471u);
LABEL_209:
          JUMPOUT(0x195F5B7A4);
        }
        v26 = HIDWORD(v107);
        if (HIDWORD(v107) == (_DWORD)v107)
        {
          v27 = HIDWORD(v107) + ((unint64_t)HIDWORD(v107) >> 2);
          if (v27 >= 0x10)
            v28 = v27 + 1;
          else
            v28 = 16;
          if (v28 <= (unint64_t)HIDWORD(v107) + 1)
            v29 = HIDWORD(v107) + 1;
          else
            v29 = v28;
          if (v29 >> 29)
            goto LABEL_207;
          v30 = v106;
          v31 = (WTF *)WTF::fastMalloc((WTF *)(8 * v29));
          LODWORD(v107) = v29;
          v106 = v31;
          if ((_DWORD)v26)
          {
            v32 = (unsigned int **)((char *)v30 + 8 * v26);
            v33 = (unsigned int **)v30;
            do
            {
              v34 = *v33;
              *v33 = 0;
              *(_QWORD *)v31 = v34;
              v35 = *v33;
              *v33 = 0;
              if (v35)
              {
                do
                {
                  v36 = __ldaxr(v35);
                  v37 = v36 - 1;
                }
                while (__stlxr(v37, v35));
                if (!v37)
                {
                  atomic_store(1u, v35);
                  WTF::fastFree((WTF *)v35, v6);
                }
              }
              v31 = (WTF *)((char *)v31 + 8);
              ++v33;
            }
            while (v33 != v32);
            v31 = v106;
          }
          if (v30)
          {
            if (v31 == v30)
            {
              v31 = 0;
              v106 = 0;
              LODWORD(v107) = 0;
            }
            WTF::fastFree(v30, v6);
          }
          v46 = HIDWORD(v107);
          v47 = *(_QWORD *)(v25 + 8);
          a3 = (const WTF::StringImpl **)v104;
          if (v47)
            goto LABEL_215;
          v47 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v47 = 1;
          *(_QWORD *)(v47 + 8) = v25;
          v77 = *(unsigned int **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = v47;
          if (!v77)
            goto LABEL_215;
          do
          {
            v78 = __ldaxr(v77);
            v79 = v78 - 1;
          }
          while (__stlxr(v79, v77));
          if (!v79)
          {
            atomic_store(1u, v77);
            WTF::fastFree((WTF *)v77, v6);
          }
          v47 = *(_QWORD *)(v25 + 8);
          if (v47)
          {
LABEL_215:
            do
              v48 = __ldaxr((unsigned int *)v47);
            while (__stlxr(v48 + 1, (unsigned int *)v47));
          }
          *((_QWORD *)v31 + v46) = v47;
        }
        else
        {
          v42 = v106;
          v43 = *(_QWORD *)(v25 + 8);
          if (v43)
            goto LABEL_216;
          v43 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v43 = 1;
          *(_QWORD *)(v43 + 8) = v25;
          v74 = *(unsigned int **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = v43;
          if (!v74)
            goto LABEL_216;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            atomic_store(1u, v74);
            WTF::fastFree((WTF *)v74, v6);
          }
          v43 = *(_QWORD *)(v25 + 8);
          if (v43)
          {
LABEL_216:
            do
              v44 = __ldaxr((unsigned int *)v43);
            while (__stlxr(v44 + 1, (unsigned int *)v43));
          }
          *((_QWORD *)v42 + v26) = v43;
        }
        ++HIDWORD(v107);
LABEL_120:
        v69 = v22 + 7;
        v22 = v16;
        if (v69 == v16)
          goto LABEL_135;
        v22 = v69;
        while (2)
        {
          v108[0] = 0;
          WTF::URL::invalidate((WTF::URL *)v108);
          v70 = v108[0];
          if (!WTF::equal(*v22, v108[0], v71))
          {
            v72 = 0;
            if (!v70)
              goto LABEL_128;
LABEL_126:
            if (*(_DWORD *)v70 == 2)
              WTF::StringImpl::destroy(v70, v6);
            else
              *(_DWORD *)v70 -= 2;
            goto LABEL_128;
          }
          v72 = WTF::equal(v22[5], 0, v7);
          if (v70)
            goto LABEL_126;
LABEL_128:
          if (*v22 == (WTF *)-1)
            v73 = 1;
          else
            v73 = v72;
          if (v73 != 1)
            goto LABEL_135;
          v22 += 7;
          if (v22 != v16)
            continue;
          break;
        }
        v22 = v16;
LABEL_135:
        if (v22 != v23)
          continue;
        break;
      }
LABEL_173:
      v89 = v11 + 2;
      v11 = v103;
      if (v89 != v103)
      {
        v11 = v89;
        while ((unint64_t)(*v11 + 1) <= 1)
        {
          v11 += 2;
          if (v11 == v103)
          {
            v11 = v103;
            break;
          }
        }
      }
      if (v11 == v102)
      {
        if (HIDWORD(v107))
        {
          v90 = v106;
          v91 = (WTF *)((char *)v106 + 8 * HIDWORD(v107));
          do
          {
            if (!*(_QWORD *)v90)
              goto LABEL_186;
            v92 = *(_QWORD *)(*(_QWORD *)v90 + 8);
            if (!v92)
              goto LABEL_186;
            v93 = *(unsigned int **)(v92 + 8);
            if (v93)
              goto LABEL_217;
            v93 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
            *v93 = 1;
            *((_QWORD *)v93 + 1) = v92;
            v97 = *(unsigned int **)(v92 + 8);
            *(_QWORD *)(v92 + 8) = v93;
            if (!v97)
              goto LABEL_217;
            do
            {
              v98 = __ldaxr(v97);
              v99 = v98 - 1;
            }
            while (__stlxr(v99, v97));
            if (!v99)
            {
              atomic_store(1u, v97);
              WTF::fastFree((WTF *)v97, v6);
            }
            v93 = *(unsigned int **)(v92 + 8);
            if (v93)
            {
LABEL_217:
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 + 1, v93));
              v113 = v93;
              v95 = *((_QWORD *)v93 + 1);
              if (!v95
                || (v110[0] = (uint64_t)&v113, ++*(_DWORD *)(v95 + 548), (v96 = *(_QWORD *)(v95 + 488)) == 0)
                || !*(_QWORD *)(v96 + 8)
                || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v95 + 464), v110, (uint64_t)v108), (v93 = v113) != 0))
              {
                v6 = (WTF::StringImpl *)*((_QWORD *)v93 + 1);
                if (v6)
                  WebCore::MemoryCache::remove(v101, v6);
              }
            }
            else
            {
LABEL_186:
              v113 = 0;
            }
            WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v113, v6);
            v90 = (WTF *)((char *)v90 + 8);
          }
          while (v90 != v91);
        }
        return WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v106, v6);
      }
    }
  }
  return WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v106, v6);
}

uint64_t WebCore::MemoryCache::removeResourcesWithOrigin(WebCore::MemoryCache *this, const WebCore::SecurityOrigin *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t result;
  WTF::StringImpl *v13;
  uint64_t v14;
  char v15;
  const WTF::StringImpl ***v16;
  const WTF::StringImpl **v17;

  if ((WTF::isMainThread(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5B8FCLL);
  }
  v4 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::MemoryCache::removeResourcesWithOrigin(v14);
  }
  else
  {
    v17 = (const WTF::StringImpl **)&v16;
    v5 = (uint64_t *)((uint64_t (*)(const WTF::StringImpl ***, char *))off_1E33F8EF8[v4])(&v17, (char *)a2 + 8);
    if (!*v5)
      goto LABEL_16;
    v6 = v5;
    v7 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
    if (v7 != -1)
    {
      v17 = (const WTF::StringImpl **)&v15;
      v16 = &v17;
      std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
    }
    v8 = *v6;
    if (*v6)
    {
      v9 = *(_QWORD *)(v8 + 8);
      v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v9, v10, (uint64_t *)&v17);
    v11 = (const WTF::StringImpl *)v17;
    if (!v17)
    {
LABEL_16:
      v11 = (const WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v11 += 2;
    }
    v16 = (const WTF::StringImpl ***)v11;
    result = WebCore::MemoryCache::removeResourcesWithOrigin(this, a2, (const WTF::StringImpl **)&v16);
    v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return WTF::StringImpl::destroy(v11, v13);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::MemoryCache::removeResourcesWithOrigin(WTF *a1, unsigned int *a2)
{
  WebCore::SecurityOriginData *v4;
  uint64_t v5;
  unsigned int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  char v11;
  WebCore::SecurityOrigin *v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WebCore::SecurityOrigin *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *result;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  WTF::StringImpl *v29;
  WebCore::SecurityOrigin *v30;

  if ((WTF::isMainThread(a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5BB10);
  }
  v4 = (WebCore::SecurityOriginData *)(a2 + 8);
  v5 = a2[6];
  v6 = a2[14];
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 != -1)
      v10 = v8;
    if (v10)
      goto LABEL_18;
  }
  else
  {
    v30 = (WebCore::SecurityOrigin *)&v29;
    v11 = ((uint64_t (*)(WebCore::SecurityOrigin **, unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v5])(&v30, a2, a2 + 8);
    if ((v11 & 1) != 0)
    {
LABEL_18:
      v12 = (WebCore::SecurityOrigin *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v12 += 2;
      goto LABEL_28;
    }
    LODWORD(v5) = a2[6];
  }
  if ((_DWORD)v5 == -1)
  {
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::MemoryCache::removeResourcesWithOrigins(v27);
  }
  v30 = (WebCore::SecurityOrigin *)&v29;
  v13 = (uint64_t *)((uint64_t (*)(WebCore::SecurityOrigin **, unsigned int *))off_1E33F8EF8[v5])(&v30, a2);
  if (!*v13)
    goto LABEL_18;
  v14 = v13;
  v15 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v15 != -1)
  {
    v30 = (WebCore::SecurityOrigin *)&v28;
    v29 = (WTF::StringImpl *)&v30;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v29, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  v16 = *v14;
  if (*v14)
  {
    v17 = *(_QWORD *)(v16 + 8);
    v18 = *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v17 = 0;
    v18 = 0x100000000;
  }
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v17, v18, (uint64_t *)&v30);
  v12 = v30;
  if (!v30)
    goto LABEL_18;
LABEL_28:
  v29 = v12;
  WebCore::SecurityOriginData::securityOrigin(v4, &v30);
  v19 = v30;
  WebCore::MemoryCache::removeResourcesWithOrigin(a1, v30, &v29);
  v30 = 0;
  do
  {
    v21 = __ldaxr((unsigned int *)v19);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v19));
  if (!v22)
  {
    atomic_store(1u, (unsigned int *)v19);
    v24 = (WTF::StringImpl *)*((_QWORD *)v19 + 6);
    *((_QWORD *)v19 + 6) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v20);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = (WTF::StringImpl *)*((_QWORD *)v19 + 5);
    *((_QWORD *)v19 + 5) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v20);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = *((unsigned int *)v19 + 8);
    if ((_DWORD)v26 != -1)
      ((void (*)(char *, char *))off_1E33F8F28[v26])(&v28, (char *)v19 + 8);
    *((_DWORD *)v19 + 8) = -1;
    WTF::fastFree(v19, v20);
  }
  result = v29;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v29, v20);
    else
      *(_DWORD *)v29 -= 2;
  }
  return result;
}

WTF::StringImpl **WebCore::MemoryCache::removeResourcesWithOrigins(WTF *a1, uint64_t a2, uint64_t *a3)
{
  WTF::StringImpl **result;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const WTF::StringImpl *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF **v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  const WTF::StringImpl *v32;
  int v33;
  int v34;
  WTF **v35;
  WTF **v36;
  WTF *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  int v43;
  int j;
  int v45;
  WTF *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unsigned int **v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  WTF **v65;
  WTF::StringImpl *v66;
  const WTF::StringImpl *v67;
  int v68;
  int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  int i;
  int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  WTF::StringImpl *v88;
  unsigned int **v89;
  unsigned int **v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  WTF::StringImpl *v116;
  WebCore::MemoryCache *v117;
  uint64_t *v118;
  WTF ***v119;
  unsigned int *v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  WTF::StringImpl **v123;
  WTF::StringImpl *v124[5];
  unsigned int **v125;

  if ((WTF::isMainThread(a1) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_227;
  }
  result = (WTF::StringImpl **)WebCore::MemoryCache::sessionResourceMap(a1, a2);
  if (!result)
    return result;
  v123 = 0;
  v9 = *a3;
  if (!*a3)
  {
    v12 = 0;
    v10 = 0;
LABEL_12:
    v11 = v9 + 8 * v10;
    goto LABEL_13;
  }
  v10 = *(unsigned int *)(v9 - 4);
  v11 = v9 + 8 * v10;
  if (!*(_DWORD *)(v9 - 12))
  {
    v12 = v9 + 8 * v10;
    goto LABEL_12;
  }
  v12 = *a3;
  if ((_DWORD)v10)
  {
    v13 = 8 * v10;
    v12 = *a3;
    while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
    {
      v12 += 8;
      v13 -= 8;
      if (!v13)
      {
        v12 = v11;
        break;
      }
    }
  }
LABEL_13:
  v118 = a3;
  v119 = (WTF ***)result;
  v117 = a1;
  if (v9)
    v14 = v9 + 8 * *(unsigned int *)(v9 - 4);
  else
    v14 = 0;
  while (v12 != v14)
  {
    v15 = *(unsigned int *)(*(_QWORD *)v12 + 32);
    if ((_DWORD)v15 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_225:
      __break(0xC471u);
      JUMPOUT(0x195F5C5D0);
    }
    v16 = *(_QWORD *)v12 + 8;
    v124[0] = (WTF::StringImpl *)&v121;
    v17 = (uint64_t *)((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E33F8EF8[v15])(v124, v16);
    if (!*v17)
      goto LABEL_36;
    v19 = v17;
    v20 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
    if (v20 != -1)
    {
      v124[0] = (WTF::StringImpl *)&v125;
      v121 = (WTF::StringImpl *)v124;
      std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v121, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
    }
    v21 = *v19;
    if (*v19)
    {
      v22 = *(_QWORD *)(v21 + 8);
      v23 = *(unsigned int *)(v21 + 4) | ((unint64_t)((*(_DWORD *)(v21 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v22 = 0;
      v23 = 0x100000000;
    }
    WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v22, v23, (uint64_t *)v124);
    v24 = v124[0];
    if (!v124[0])
    {
LABEL_36:
      v24 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v24 += 2;
    }
    v121 = v24;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v123, &v121, v18, (uint64_t)v124);
    v25 = v121;
    v121 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v7);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v12 + 8;
    v12 = v11;
    if (v26 != v11)
    {
      v12 = v26;
      while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
      {
        v12 += 8;
        if (v12 == v11)
        {
          v12 = v11;
          break;
        }
      }
    }
  }
  v121 = 0;
  v122 = 0;
  v27 = *v119;
  if (*v119)
  {
    v28 = *((unsigned int *)v27 - 1);
    v29 = &v27[7 * v28];
    if (*((_DWORD *)v27 - 3))
    {
      if ((_DWORD)v28)
      {
        v30 = 56 * v28;
        while (1)
        {
          v124[0] = 0;
          WTF::URL::invalidate((WTF::URL *)v124);
          v31 = v124[0];
          if (WTF::equal(*v27, v124[0], v32))
            v33 = WTF::equal(v27[5], 0, v8);
          else
            v33 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v7);
            else
              *(_DWORD *)v31 -= 2;
          }
          v34 = *v27 == (WTF *)-1 ? 1 : v33;
          if (v34 != 1)
            break;
          v27 += 7;
          v30 -= 56;
          if (!v30)
          {
            v27 = v29;
            break;
          }
        }
        v35 = v27;
        v27 = *v119;
      }
      else
      {
        v35 = *v119;
      }
      goto LABEL_59;
    }
    v35 = &v27[7 * v28];
  }
  else
  {
    v35 = 0;
    LODWORD(v28) = 0;
  }
  v29 = &v27[7 * v28];
LABEL_59:
  if (v27)
    v36 = &v27[7 * *((unsigned int *)v27 - 1)];
  else
    v36 = 0;
  if (v36 == v35)
    goto LABEL_218;
  do
  {
    v37 = v35[6];
    if (v37)
      v38 = *((_QWORD *)v37 + 1);
    else
      v38 = 0;
    v39 = v123;
    if (!v123)
    {
LABEL_130:
      if ((*(_BYTE *)(v38 + 344) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v38 + 160));
        *(_BYTE *)(v38 + 344) |= 1u;
      }
      WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v38 + 160), (uint64_t *)v124);
      v76 = v124[0];
      v77 = *v118;
      if (*v118)
      {
        v78 = *(_DWORD *)(v77 - 8);
        v79 = WTF::computeHash<WebCore::SecurityOrigin>((uint64_t)v124[0]);
        for (i = 0; ; v79 = i + v81)
        {
          v81 = v79 & v78;
          v82 = *(_QWORD *)(v77 + 8 * (v79 & v78));
          if (v82 != -1)
          {
            if (!v82)
            {
              LODWORD(v77) = 0;
              goto LABEL_140;
            }
            if (WebCore::SecurityOrigin::isSameSchemeHostPort(v82, (uint64_t)v76))
              break;
          }
          ++i;
        }
        LODWORD(v77) = 1;
      }
LABEL_140:
      v124[0] = 0;
      if (!v76)
        goto LABEL_143;
      do
      {
        v83 = __ldaxr((unsigned int *)v76);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, (unsigned int *)v76));
      if (!v84)
      {
        atomic_store(1u, (unsigned int *)v76);
        v103 = (WTF::StringImpl *)*((_QWORD *)v76 + 6);
        *((_QWORD *)v76 + 6) = 0;
        if (v103)
        {
          if (*(_DWORD *)v103 == 2)
            WTF::StringImpl::destroy(v103, v7);
          else
            *(_DWORD *)v103 -= 2;
        }
        v104 = (WTF::StringImpl *)*((_QWORD *)v76 + 5);
        *((_QWORD *)v76 + 5) = 0;
        if (v104)
        {
          if (*(_DWORD *)v104 == 2)
            WTF::StringImpl::destroy(v104, v7);
          else
            *(_DWORD *)v104 -= 2;
        }
        v105 = *((unsigned int *)v76 + 8);
        if ((_DWORD)v105 != -1)
          ((void (*)(unsigned int ***, char *))off_1E33F8F28[v105])(&v125, (char *)v76 + 8);
        *((_DWORD *)v76 + 8) = -1;
        WTF::fastFree(v76, v7);
        if (!(_DWORD)v77)
          goto LABEL_100;
      }
      else
      {
LABEL_143:
        if (!(_DWORD)v77)
          goto LABEL_100;
      }
      v47 = HIDWORD(v122);
      if (HIDWORD(v122) != (_DWORD)v122)
      {
        v59 = v121;
        v60 = *(_QWORD *)(v38 + 8);
        if (v60)
          goto LABEL_231;
        v60 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v60 = 1;
        *(_QWORD *)(v60 + 8) = v38;
        v97 = *(unsigned int **)(v38 + 8);
        *(_QWORD *)(v38 + 8) = v60;
        if (!v97)
          goto LABEL_231;
        do
        {
          v98 = __ldaxr(v97);
          v99 = v98 - 1;
        }
        while (__stlxr(v99, v97));
        if (!v99)
        {
          atomic_store(1u, v97);
          WTF::fastFree((WTF *)v97, v7);
        }
        v60 = *(_QWORD *)(v38 + 8);
        if (v60)
        {
LABEL_231:
          do
            v95 = __ldaxr((unsigned int *)v60);
          while (__stlxr(v95 + 1, (unsigned int *)v60));
        }
        goto LABEL_91;
      }
      v85 = HIDWORD(v122) + ((unint64_t)HIDWORD(v122) >> 2);
      if (v85 >= 0x10)
        v86 = v85 + 1;
      else
        v86 = 16;
      if (v86 <= (unint64_t)HIDWORD(v122) + 1)
        v87 = HIDWORD(v122) + 1;
      else
        v87 = v86;
      if (!(v87 >> 29))
      {
        v88 = v121;
        v52 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v87));
        LODWORD(v122) = v87;
        v121 = v52;
        if ((_DWORD)v47)
        {
          v89 = (unsigned int **)((char *)v88 + 8 * v47);
          v90 = (unsigned int **)v88;
          do
          {
            v91 = *v90;
            *v90 = 0;
            *(_QWORD *)v52 = v91;
            v92 = *v90;
            *v90 = 0;
            if (v92)
            {
              do
              {
                v93 = __ldaxr(v92);
                v94 = v93 - 1;
              }
              while (__stlxr(v94, v92));
              if (!v94)
              {
                atomic_store(1u, v92);
                WTF::fastFree((WTF *)v92, v7);
              }
            }
            v52 = (WTF::StringImpl *)((char *)v52 + 8);
            ++v90;
          }
          while (v90 != v89);
          v52 = v121;
        }
        if (v88)
        {
          if (v52 == v88)
          {
            v52 = 0;
            v121 = 0;
            LODWORD(v122) = 0;
          }
          WTF::fastFree(v88, v7);
        }
        v62 = HIDWORD(v122);
        v63 = *(_QWORD *)(v38 + 8);
        if (v63)
          goto LABEL_232;
        v63 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v63 = 1;
        *(_QWORD *)(v63 + 8) = v38;
        v100 = *(unsigned int **)(v38 + 8);
        *(_QWORD *)(v38 + 8) = v63;
        if (!v100)
          goto LABEL_232;
        do
        {
          v101 = __ldaxr(v100);
          v102 = v101 - 1;
        }
        while (__stlxr(v102, v100));
        if (!v102)
        {
          atomic_store(1u, v100);
          WTF::fastFree((WTF *)v100, v7);
        }
        v63 = *(_QWORD *)(v38 + 8);
        if (v63)
        {
LABEL_232:
          do
            v96 = __ldaxr((unsigned int *)v63);
          while (__stlxr(v96 + 1, (unsigned int *)v63));
        }
LABEL_98:
        *((_QWORD *)v52 + v62) = v63;
        goto LABEL_99;
      }
      __break(0xC471u);
LABEL_227:
      JUMPOUT(0x195F5C5A8);
    }
    v40 = *((_DWORD *)v123 - 2);
    v41 = v35[5];
    v42 = *((_DWORD *)v41 + 4);
    if (v42 < 0x100)
      v43 = WTF::StringImpl::hashSlowCase(v41);
    else
      v43 = v42 >> 8;
    for (j = 0; ; v43 = j + v45)
    {
      v45 = v43 & v40;
      v46 = v39[v43 & v40];
      if (!v46)
        goto LABEL_130;
      if (v46 != (WTF *)-1 && (WTF::equal(v46, v35[5], v8) & 1) != 0)
        break;
      ++j;
    }
    v47 = HIDWORD(v122);
    if (HIDWORD(v122) == (_DWORD)v122)
    {
      v48 = HIDWORD(v122) + ((unint64_t)HIDWORD(v122) >> 2);
      if (v48 >= 0x10)
        v49 = v48 + 1;
      else
        v49 = 16;
      if (v49 <= (unint64_t)HIDWORD(v122) + 1)
        v50 = HIDWORD(v122) + 1;
      else
        v50 = v49;
      if (v50 >> 29)
        goto LABEL_225;
      v51 = v121;
      v52 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v50));
      LODWORD(v122) = v50;
      v121 = v52;
      if ((_DWORD)v47)
      {
        v53 = (unsigned int **)((char *)v51 + 8 * v47);
        v54 = (unsigned int **)v51;
        do
        {
          v55 = *v54;
          *v54 = 0;
          *(_QWORD *)v52 = v55;
          v56 = *v54;
          *v54 = 0;
          if (v56)
          {
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
            {
              atomic_store(1u, v56);
              WTF::fastFree((WTF *)v56, v7);
            }
          }
          v52 = (WTF::StringImpl *)((char *)v52 + 8);
          ++v54;
        }
        while (v54 != v53);
        v52 = v121;
      }
      if (v51)
      {
        if (v52 == v51)
        {
          v52 = 0;
          v121 = 0;
          LODWORD(v122) = 0;
        }
        WTF::fastFree(v51, v7);
      }
      v62 = HIDWORD(v122);
      v63 = *(_QWORD *)(v38 + 8);
      if (v63)
        goto LABEL_233;
      v63 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v63 = 1;
      *(_QWORD *)(v63 + 8) = v38;
      v73 = *(unsigned int **)(v38 + 8);
      *(_QWORD *)(v38 + 8) = v63;
      if (!v73)
        goto LABEL_233;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        atomic_store(1u, v73);
        WTF::fastFree((WTF *)v73, v7);
      }
      v63 = *(_QWORD *)(v38 + 8);
      if (v63)
      {
LABEL_233:
        do
          v64 = __ldaxr((unsigned int *)v63);
        while (__stlxr(v64 + 1, (unsigned int *)v63));
      }
      goto LABEL_98;
    }
    v59 = v121;
    v60 = *(_QWORD *)(v38 + 8);
    if (v60)
      goto LABEL_234;
    v60 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v60 = 1;
    *(_QWORD *)(v60 + 8) = v38;
    v70 = *(unsigned int **)(v38 + 8);
    *(_QWORD *)(v38 + 8) = v60;
    if (!v70)
      goto LABEL_234;
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
    {
      atomic_store(1u, v70);
      WTF::fastFree((WTF *)v70, v7);
    }
    v60 = *(_QWORD *)(v38 + 8);
    if (v60)
    {
LABEL_234:
      do
        v61 = __ldaxr((unsigned int *)v60);
      while (__stlxr(v61 + 1, (unsigned int *)v60));
    }
LABEL_91:
    *((_QWORD *)v59 + v47) = v60;
LABEL_99:
    ++HIDWORD(v122);
LABEL_100:
    v65 = v35 + 7;
    v35 = v29;
    if (v65 == v29)
      continue;
    v35 = v65;
    do
    {
      v124[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v124);
      v66 = v124[0];
      if (WTF::equal(*v35, v124[0], v67))
      {
        v68 = WTF::equal(v35[5], 0, v8);
        if (v66)
          goto LABEL_106;
      }
      else
      {
        v68 = 0;
        if (v66)
        {
LABEL_106:
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v7);
          else
            *(_DWORD *)v66 -= 2;
        }
      }
      if (*v35 == (WTF *)-1)
        v69 = 1;
      else
        v69 = v68;
      if (v69 != 1)
        goto LABEL_115;
      v35 += 7;
    }
    while (v35 != v29);
    v35 = v29;
LABEL_115:
    ;
  }
  while (v35 != v36);
  if (HIDWORD(v122))
  {
    v106 = v121;
    v107 = (WTF::StringImpl *)((char *)v121 + 8 * HIDWORD(v122));
    do
    {
      if (!*(_QWORD *)v106)
        goto LABEL_200;
      v108 = *(_QWORD *)(*(_QWORD *)v106 + 8);
      if (!v108)
        goto LABEL_200;
      v109 = *(unsigned int **)(v108 + 8);
      if (v109)
        goto LABEL_235;
      v109 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v109 = 1;
      *((_QWORD *)v109 + 1) = v108;
      v113 = *(unsigned int **)(v108 + 8);
      *(_QWORD *)(v108 + 8) = v109;
      if (!v113)
        goto LABEL_235;
      do
      {
        v114 = __ldaxr(v113);
        v115 = v114 - 1;
      }
      while (__stlxr(v115, v113));
      if (!v115)
      {
        atomic_store(1u, v113);
        WTF::fastFree((WTF *)v113, v7);
      }
      v109 = *(unsigned int **)(v108 + 8);
      if (v109)
      {
LABEL_235:
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 + 1, v109));
        v120 = v109;
        v111 = *((_QWORD *)v109 + 1);
        if (!v111
          || (v125 = &v120, ++*(_DWORD *)(v111 + 548), (v112 = *(_QWORD *)(v111 + 488)) == 0)
          || !*(_QWORD *)(v112 + 8)
          || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v111 + 464), (uint64_t *)&v125, (uint64_t)v124), (v109 = v120) != 0))
        {
          v7 = (WTF::StringImpl *)*((_QWORD *)v109 + 1);
          if (v7)
            WebCore::MemoryCache::remove(v117, v7);
        }
      }
      else
      {
LABEL_200:
        v120 = 0;
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v120, v7);
      v106 = (WTF::StringImpl *)((char *)v106 + 8);
    }
    while (v106 != v107);
  }
LABEL_218:
  WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v121, v7);
  result = v123;
  if (v123)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v123, v116);
  return result;
}

uint64_t WebCore::MemoryCache::getOriginsWithCache(WTF *a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  WTF ***v10;
  WTF **v11;
  uint64_t v12;
  WTF **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  int v19;
  int v20;
  WTF **v21;
  WTF **v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int i;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _BOOL4 v47;
  _BOOL4 v49;
  _BOOL4 v50;
  unsigned int v51;
  unsigned int v52;
  WTF **v53;
  WTF **v54;
  WTF *v55;
  unsigned int v56;
  unsigned int v57;
  WTF **v58;
  WTF::StringImpl *v59;
  const WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  const WTF::StringImpl *v62;
  int v63;
  int v64;
  __n128 v65;
  WTF *v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  uint64_t *v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  _BOOL4 v86;
  _BOOL4 v88;
  _BOOL4 v89;
  char v90;
  unsigned int v91;
  unsigned int v92;
  WTF *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  unint64_t v128;
  WTF **v129;
  WTF **v130;
  char *v131;
  char *v132;
  WTF::StringImpl *v133;
  WTF *v134;
  unsigned int v135;
  unsigned __int16 v136;
  char v137;
  unsigned int *v138;
  WTF::StringImpl *v139[5];

  result = WTF::isMainThread(a1);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5D228);
  }
  v5 = (_QWORD *)*((_QWORD *)a1 + 42);
  if (v5)
  {
    v6 = *((unsigned int *)v5 - 1);
    v7 = &v5[2 * v6];
    if (*((_DWORD *)v5 - 3))
    {
      v8 = (_QWORD *)*((_QWORD *)a1 + 42);
      if ((_DWORD)v6)
      {
        v9 = 16 * v6;
        v8 = (_QWORD *)*((_QWORD *)a1 + 42);
        while ((unint64_t)(*v8 + 1) <= 1)
        {
          v8 += 2;
          v9 -= 16;
          if (!v9)
          {
            v8 = v7;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v8 = &v5[2 * v6];
  }
  else
  {
    v8 = 0;
    v6 = 0;
  }
  v7 = &v5[2 * v6];
LABEL_12:
  if (v5)
    v5 += 2 * *((unsigned int *)v5 - 1);
  if (v5 == v8)
    return result;
  v125 = v5;
  v126 = v7;
  do
  {
    v10 = (WTF ***)v8[1];
    v11 = *v10;
    v127 = v8;
    if (!*v10)
    {
      v21 = 0;
      LODWORD(v12) = 0;
      goto LABEL_34;
    }
    v12 = *((unsigned int *)v11 - 1);
    v13 = &v11[7 * v12];
    if (!*((_DWORD *)v11 - 3))
    {
      v21 = &v11[7 * v12];
LABEL_34:
      v13 = &v11[7 * v12];
      goto LABEL_37;
    }
    if (!(_DWORD)v12)
    {
      v21 = *v10;
      goto LABEL_37;
    }
    v14 = 56 * v12;
    do
    {
      v139[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v139);
      v15 = v139[0];
      result = WTF::equal(*v11, v139[0], v16);
      if ((_DWORD)result)
      {
        result = WTF::equal(v11[5], 0, v18);
        v19 = result;
        if (v15)
          goto LABEL_24;
      }
      else
      {
        v19 = 0;
        if (v15)
        {
LABEL_24:
          if (*(_DWORD *)v15 == 2)
            result = WTF::StringImpl::destroy(v15, v17);
          else
            *(_DWORD *)v15 -= 2;
        }
      }
      if (*v11 == (WTF *)-1)
        v20 = 1;
      else
        v20 = v19;
      if (v20 != 1)
        goto LABEL_36;
      v11 += 7;
      v14 -= 56;
    }
    while (v14);
    v11 = v13;
LABEL_36:
    v21 = v11;
    v11 = *v10;
LABEL_37:
    if (v11)
      v22 = &v11[7 * *((unsigned int *)v11 - 1)];
    else
      v22 = 0;
    if (v22 == v21)
      goto LABEL_233;
    v129 = v22;
    v130 = v13;
    while (2)
    {
      v23 = v21[6];
      if (v23)
        v24 = *((_QWORD *)v23 + 1);
      else
        v24 = 0;
      v25 = v21[5];
      if (!v25 || !*((_DWORD *)v25 + 1))
      {
        if ((*(_BYTE *)(v24 + 344) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v24 + 160));
          *(_BYTE *)(v24 + 344) |= 1u;
        }
        WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v24 + 160), (uint64_t *)&v134);
        v26 = v134;
        v134 = 0;
        v27 = *a2;
        if (*a2
          || (WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::rehash(a2, 8u, 0), (v27 = *a2) != 0))
        {
          v28 = *(_DWORD *)(v27 - 8);
        }
        else
        {
          v28 = 0;
        }
        v136 = 0;
        v137 = 0;
        v29 = *((unsigned int *)v26 + 8);
        v138 = &v135;
        if ((_DWORD)v29 == -1)
          v30 = -1;
        else
          v30 = v29;
        v31 = (v30 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v30 - 1640531527) << 16) ^ ((unsigned __int16)v30 - 1640531527);
        v32 = (v30 >> 37) & 0x7FFF800 ^ ((v31 + WORD2(v30) + (v31 >> 11)) << 16) ^ (v31 + WORD2(v30) + (v31 >> 11));
        v135 = v32 + (v32 >> 11);
        if ((_DWORD)v29 == -1)
        {
LABEL_244:
          v124 = std::__throw_bad_variant_access[abi:sn180100]();
          return WebCore::MemoryCache::originsWithCache(v124);
        }
        v33 = a2;
        v139[0] = (WTF::StringImpl *)&v138;
        v131 = (char *)v26 + 8;
        result = ((uint64_t (*)(WTF::StringImpl **))off_1E33F8FB0[v29])(v139);
        v35 = v135;
        if (v137)
        {
          v122 = (v135 + v136) ^ ((v135 + v136) << 11);
          v35 = v122 + (v122 >> 17);
        }
        v36 = 0;
        v37 = (v35 ^ (8 * v35)) + ((v35 ^ (8 * v35)) >> 5);
        v38 = (v37 ^ (4 * v37)) + ((v37 ^ (4 * v37)) >> 15);
        v39 = v38 ^ (v38 << 10);
        if (!v39)
          v39 = 0x800000;
        for (i = 1; ; ++i)
        {
          v41 = v39 & v28;
          v42 = (uint64_t *)(v27 + 8 * (v39 & v28));
          v43 = *v42;
          if (*v42 == -1)
          {
            v36 = (uint64_t *)(v27 + 8 * v41);
            goto LABEL_78;
          }
          if (!v43)
          {
            if (v36)
            {
              *v36 = 0;
              a2 = v33;
              --*(_DWORD *)(*v33 - 16);
              *v36 = (uint64_t)v26;
              v42 = v36;
            }
            else
            {
              *v42 = (uint64_t)v26;
              a2 = v33;
            }
            v54 = v129;
            v53 = v130;
            v96 = *a2;
            if (*a2)
              v97 = *(_DWORD *)(v96 - 12) + 1;
            else
              v97 = 1;
            *(_DWORD *)(v96 - 12) = v97;
            v98 = *a2;
            if (*a2)
              v99 = *(_DWORD *)(v98 - 12);
            else
              v99 = 0;
            v100 = (*(_DWORD *)(v98 - 16) + v99);
            v101 = *(unsigned int *)(v98 - 4);
            if (v101 > 0x400)
            {
              if (v101 <= 2 * v100)
              {
LABEL_166:
                v102 = (_DWORD)v101 << (6 * *(_DWORD *)(v98 - 12) >= (2 * v101));
                goto LABEL_171;
              }
            }
            else if (3 * v101 <= 4 * v100)
            {
              if ((_DWORD)v101)
                goto LABEL_166;
              v102 = 8;
LABEL_171:
              result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::rehash(a2, v102, v42);
            }
LABEL_84:
            v55 = v134;
            v134 = 0;
            if (v55)
            {
              do
              {
                v56 = __ldaxr((unsigned int *)v55);
                v57 = v56 - 1;
              }
              while (__stlxr(v57, (unsigned int *)v55));
              if (!v57)
              {
                atomic_store(1u, (unsigned int *)v55);
                v113 = (WTF::StringImpl *)*((_QWORD *)v55 + 6);
                *((_QWORD *)v55 + 6) = 0;
                if (v113)
                {
                  if (*(_DWORD *)v113 == 2)
                    WTF::StringImpl::destroy(v113, v34);
                  else
                    *(_DWORD *)v113 -= 2;
                }
                v114 = (WTF::StringImpl *)*((_QWORD *)v55 + 5);
                *((_QWORD *)v55 + 5) = 0;
                if (v114)
                {
                  if (*(_DWORD *)v114 == 2)
                    WTF::StringImpl::destroy(v114, v34);
                  else
                    *(_DWORD *)v114 -= 2;
                }
                v115 = *((unsigned int *)v55 + 8);
                if ((_DWORD)v115 != -1)
                  ((void (*)(WTF::StringImpl **, char *))off_1E33F8F28[v115])(v139, (char *)v55 + 8);
                *((_DWORD *)v55 + 8) = -1;
                result = WTF::fastFree(v55, v34);
              }
            }
            goto LABEL_87;
          }
          if ((WTF *)v43 != v26)
          {
            v44 = *(unsigned int *)(v43 + 32);
            v45 = *((_DWORD *)v26 + 8);
            v47 = v45 == (_DWORD)v44 && v45 != -1;
            if ((_DWORD)v44 == -1 || !v47)
            {
              v49 = v45 == -1;
              if ((_DWORD)v44 == -1)
                v50 = v49;
              else
                v50 = v47;
              if (!v50)
                goto LABEL_78;
            }
            else
            {
              v139[0] = (WTF::StringImpl *)&v138;
              result = ((uint64_t (*)(WTF::StringImpl **, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v44])(v139, v43 + 8, v131);
              if ((result & 1) == 0)
                goto LABEL_78;
            }
          }
          if (!*(_BYTE *)(v43 + 63) || !(*(unsigned __int8 *)(v43 + 59) | *((unsigned __int8 *)v26 + 59)))
          {
            do
            {
              v51 = __ldaxr((unsigned int *)v26);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, (unsigned int *)v26));
            a2 = v33;
            v54 = v129;
            v53 = v130;
            if (!v52)
            {
              atomic_store(1u, (unsigned int *)v26);
              v110 = (WTF::StringImpl *)*((_QWORD *)v26 + 6);
              *((_QWORD *)v26 + 6) = 0;
              if (v110)
              {
                if (*(_DWORD *)v110 == 2)
                  WTF::StringImpl::destroy(v110, v34);
                else
                  *(_DWORD *)v110 -= 2;
              }
              v111 = (WTF::StringImpl *)*((_QWORD *)v26 + 5);
              *((_QWORD *)v26 + 5) = 0;
              if (v111)
              {
                if (*(_DWORD *)v111 == 2)
                  WTF::StringImpl::destroy(v111, v34);
                else
                  *(_DWORD *)v111 -= 2;
              }
              v112 = *((unsigned int *)v26 + 8);
              if ((_DWORD)v112 != -1)
                ((void (*)(WTF::StringImpl **, char *))off_1E33F8F28[v112])(v139, v131);
              *((_DWORD *)v26 + 8) = -1;
              result = WTF::fastFree(v26, v34);
            }
            goto LABEL_84;
          }
LABEL_78:
          v39 = i + v41;
        }
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v133 = v139[0];
      WebCore::SecurityOrigin::create((uint64_t *)&v133, (const char *)v21 + 40, 0x10000, (uint64_t *)&v134, v65);
      v66 = v134;
      v134 = 0;
      v67 = *a2;
      if (*a2
        || (WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::rehash(a2, 8u, 0), (v67 = *a2) != 0))
      {
        v68 = *(_DWORD *)(v67 - 8);
      }
      else
      {
        v68 = 0;
      }
      v136 = 0;
      v137 = 0;
      v69 = *((unsigned int *)v66 + 8);
      v138 = &v135;
      if ((_DWORD)v69 == -1)
        v70 = -1;
      else
        v70 = v69;
      v71 = (v70 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v70 - 1640531527) << 16) ^ ((unsigned __int16)v70
                                                                                                 - 1640531527);
      v72 = (v70 >> 37) & 0x7FFF800 ^ ((v71 + WORD2(v70) + (v71 >> 11)) << 16) ^ (v71 + WORD2(v70) + (v71 >> 11));
      v135 = v72 + (v72 >> 11);
      if ((_DWORD)v69 == -1)
        goto LABEL_244;
      v128 = v128 & 0xFFFFFFFF00000000 | 0x10000;
      v139[0] = (WTF::StringImpl *)&v138;
      v132 = (char *)v66 + 8;
      ((void (*)(WTF::StringImpl **))off_1E33F8FB0[v69])(v139);
      v74 = v135;
      if (v137)
      {
        v123 = (v135 + v136) ^ ((v135 + v136) << 11);
        v74 = v123 + (v123 >> 17);
      }
      v75 = 0;
      v76 = (v74 ^ (8 * v74)) + ((v74 ^ (8 * v74)) >> 5);
      v77 = (v76 ^ (4 * v76)) + ((v76 ^ (4 * v76)) >> 15);
      v78 = v77 ^ (v77 << 10);
      if (!v78)
        v78 = 0x800000;
      v79 = 1;
      while (2)
      {
        v80 = v78 & v68;
        v81 = (uint64_t *)(v67 + 8 * (v78 & v68));
        v82 = *v81;
        if (*v81 == -1)
        {
          v75 = (uint64_t *)(v67 + 8 * v80);
          goto LABEL_137;
        }
        if (!v82)
        {
          if (v75)
          {
            *v75 = 0;
            --*(_DWORD *)(*a2 - 16);
            *v75 = (uint64_t)v66;
            v81 = v75;
          }
          else
          {
            *v81 = (uint64_t)v66;
          }
          v54 = v129;
          v53 = v130;
          v103 = *a2;
          if (*a2)
            v104 = *(_DWORD *)(v103 - 12) + 1;
          else
            v104 = 1;
          *(_DWORD *)(v103 - 12) = v104;
          v105 = *a2;
          if (*a2)
            v106 = *(_DWORD *)(v105 - 12);
          else
            v106 = 0;
          v107 = (*(_DWORD *)(v105 - 16) + v106);
          v108 = *(unsigned int *)(v105 - 4);
          if (v108 > 0x400)
          {
            if (v108 > 2 * v107)
              goto LABEL_143;
          }
          else
          {
            if (3 * v108 > 4 * v107)
              goto LABEL_143;
            if (!(_DWORD)v108)
            {
              v109 = 8;
              goto LABEL_186;
            }
          }
          v109 = (_DWORD)v108 << (6 * *(_DWORD *)(v105 - 12) >= (2 * v108));
LABEL_186:
          WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::rehash(a2, v109, v81);
          goto LABEL_143;
        }
        if ((WTF *)v82 == v66)
          goto LABEL_139;
        v83 = *(unsigned int *)(v82 + 32);
        v84 = *((_DWORD *)v66 + 8);
        v86 = v84 == (_DWORD)v83 && v84 != -1;
        if ((_DWORD)v83 != -1 && v86)
        {
          v139[0] = (WTF::StringImpl *)&v138;
          v90 = ((uint64_t (*)(WTF::StringImpl **, uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v83])(v139, v82 + 8, v132);
          if ((v90 & 1) != 0)
            goto LABEL_139;
          goto LABEL_137;
        }
        v88 = v84 == -1;
        if ((_DWORD)v83 == -1)
          v89 = v88;
        else
          v89 = v86;
        if (!v89)
          goto LABEL_137;
LABEL_139:
        if (*(_BYTE *)(v82 + 63) && *(unsigned __int8 *)(v82 + 59) | *((unsigned __int8 *)v66 + 59))
        {
LABEL_137:
          v78 = v79 + v80;
          ++v79;
          continue;
        }
        break;
      }
      do
      {
        v91 = __ldaxr((unsigned int *)v66);
        v92 = v91 - 1;
      }
      while (__stlxr(v92, (unsigned int *)v66));
      v54 = v129;
      v53 = v130;
      if (!v92)
      {
        atomic_store(1u, (unsigned int *)v66);
        v116 = (WTF::StringImpl *)*((_QWORD *)v66 + 6);
        *((_QWORD *)v66 + 6) = 0;
        if (v116)
        {
          if (*(_DWORD *)v116 == 2)
            WTF::StringImpl::destroy(v116, v73);
          else
            *(_DWORD *)v116 -= 2;
        }
        v117 = (WTF::StringImpl *)*((_QWORD *)v66 + 5);
        *((_QWORD *)v66 + 5) = 0;
        if (v117)
        {
          if (*(_DWORD *)v117 == 2)
            WTF::StringImpl::destroy(v117, v73);
          else
            *(_DWORD *)v117 -= 2;
        }
        v118 = *((unsigned int *)v66 + 8);
        if ((_DWORD)v118 != -1)
          ((void (*)(WTF::StringImpl **, char *))off_1E33F8F28[v118])(v139, v132);
        *((_DWORD *)v66 + 8) = -1;
        WTF::fastFree(v66, v73);
      }
LABEL_143:
      v93 = v134;
      v134 = 0;
      if (v93)
      {
        do
        {
          v94 = __ldaxr((unsigned int *)v93);
          v95 = v94 - 1;
        }
        while (__stlxr(v95, (unsigned int *)v93));
        if (!v95)
        {
          atomic_store(1u, (unsigned int *)v93);
          v119 = (WTF::StringImpl *)*((_QWORD *)v93 + 6);
          *((_QWORD *)v93 + 6) = 0;
          if (v119)
          {
            if (*(_DWORD *)v119 == 2)
              WTF::StringImpl::destroy(v119, v73);
            else
              *(_DWORD *)v119 -= 2;
          }
          v120 = (WTF::StringImpl *)*((_QWORD *)v93 + 5);
          *((_QWORD *)v93 + 5) = 0;
          if (v120)
          {
            if (*(_DWORD *)v120 == 2)
              WTF::StringImpl::destroy(v120, v73);
            else
              *(_DWORD *)v120 -= 2;
          }
          v121 = *((unsigned int *)v93 + 8);
          if ((_DWORD)v121 != -1)
            ((void (*)(WTF::StringImpl **, char *))off_1E33F8F28[v121])(v139, (char *)v93 + 8);
          *((_DWORD *)v93 + 8) = -1;
          WTF::fastFree(v93, v73);
        }
      }
      result = (uint64_t)v133;
      v133 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v73);
        else
          *(_DWORD *)result -= 2;
      }
LABEL_87:
      v58 = v21 + 7;
      v21 = v53;
      if (v58 == v53)
        goto LABEL_102;
      v21 = v58;
      while (2)
      {
        v139[0] = 0;
        WTF::URL::invalidate((WTF::URL *)v139);
        v59 = v139[0];
        result = WTF::equal(*v21, v139[0], v60);
        if (!(_DWORD)result)
        {
          v63 = 0;
          if (!v59)
            goto LABEL_95;
LABEL_93:
          if (*(_DWORD *)v59 == 2)
            result = WTF::StringImpl::destroy(v59, v61);
          else
            *(_DWORD *)v59 -= 2;
          goto LABEL_95;
        }
        result = WTF::equal(v21[5], 0, v62);
        v63 = result;
        if (v59)
          goto LABEL_93;
LABEL_95:
        if (*v21 == (WTF *)-1)
          v64 = 1;
        else
          v64 = v63;
        if (v64 != 1)
          goto LABEL_102;
        v21 += 7;
        if (v21 != v53)
          continue;
        break;
      }
      v21 = v53;
LABEL_102:
      if (v21 != v54)
        continue;
      break;
    }
LABEL_233:
    v8 = v126;
    if (v127 + 2 != v126)
    {
      v8 = v127 + 2;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v126)
        {
          v8 = v126;
          break;
        }
      }
    }
  }
  while (v8 != v125);
  return result;
}

uint64_t WebCore::MemoryCache::originsWithCache@<X0>(WTF *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF ***v12;
  WTF **v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  int v21;
  WTF **v22;
  WTF **v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  unsigned int v30;
  unsigned int v31;
  WTF *v32;
  unsigned int v33;
  unsigned int v34;
  WTF **v35;
  WTF::StringImpl *v36;
  const WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  const WTF::StringImpl *v39;
  int v40;
  int v41;
  __n128 v42;
  WTF *v43;
  WTF::StringImpl *v44;
  WTF *v45;
  unsigned int v46;
  unsigned int v47;
  WTF *v48;
  unsigned int v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF *v64;
  WTF *v65;
  WTF::StringImpl *v66[5];

  result = WTF::isMainThread(a1);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5D800);
  }
  *a3 = 0;
  v7 = *((_QWORD *)a1 + 42);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
    v9 = result & v8;
    v10 = *(_QWORD *)(v7 + 16 * v9);
    if (v10 != a2)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v8;
        v10 = *(_QWORD *)(v7 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_9;
      }
      v9 = *(unsigned int *)(v7 - 4);
    }
LABEL_9:
    if (v9 != *(_DWORD *)(v7 - 4))
    {
      v12 = *(WTF ****)(v7 + 16 * v9 + 8);
      v13 = *v12;
      if (*v12)
      {
        v14 = *((unsigned int *)v13 - 1);
        v15 = &v13[7 * v14];
        if (*((_DWORD *)v13 - 3))
        {
          if ((_DWORD)v14)
          {
            v16 = 56 * v14;
            while (1)
            {
              v66[0] = 0;
              WTF::URL::invalidate((WTF::URL *)v66);
              v17 = v66[0];
              result = WTF::equal(*v13, v66[0], v18);
              if ((_DWORD)result)
              {
                result = WTF::equal(v13[5], 0, v20);
                v7 = result;
              }
              else
              {
                v7 = 0;
              }
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  result = WTF::StringImpl::destroy(v17, v19);
                else
                  *(_DWORD *)v17 -= 2;
              }
              v21 = *v13 == (WTF *)-1 ? 1 : v7;
              if (v21 != 1)
                break;
              v13 += 7;
              v16 -= 56;
              if (!v16)
              {
                v13 = v15;
                break;
              }
            }
            v22 = v13;
            v13 = *v12;
          }
          else
          {
            v22 = *v12;
          }
          goto LABEL_31;
        }
        v22 = &v13[7 * v14];
      }
      else
      {
        v22 = 0;
        LODWORD(v14) = 0;
      }
      v15 = &v13[7 * v14];
LABEL_31:
      if (v13)
        v23 = &v13[7 * *((unsigned int *)v13 - 1)];
      else
        v23 = 0;
      while (v22 != v23)
      {
        v24 = v22[6];
        if (v24)
          v25 = *((_QWORD *)v24 + 1);
        else
          v25 = 0;
        v26 = v22[5];
        if (v26 && *((_DWORD *)v26 + 1))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v63 = v66[0];
          v7 = v7 & 0xFFFFFFFF00000000 | 0x10000;
          WebCore::SecurityOrigin::create((uint64_t *)&v63, (const char *)v22 + 40, v7, (uint64_t *)&v64, v42);
          v43 = v64;
          v64 = 0;
          v65 = v43;
          WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::add(a3, (uint64_t *)&v65, (uint64_t)v66);
          v45 = v65;
          v65 = 0;
          if (v45)
          {
            do
            {
              v46 = __ldaxr((unsigned int *)v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, (unsigned int *)v45));
            if (!v47)
            {
              atomic_store(1u, (unsigned int *)v45);
              v57 = (WTF::StringImpl *)*((_QWORD *)v45 + 6);
              *((_QWORD *)v45 + 6) = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, v44);
                else
                  *(_DWORD *)v57 -= 2;
              }
              v58 = (WTF::StringImpl *)*((_QWORD *)v45 + 5);
              *((_QWORD *)v45 + 5) = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, v44);
                else
                  *(_DWORD *)v58 -= 2;
              }
              v59 = *((unsigned int *)v45 + 8);
              if ((_DWORD)v59 != -1)
                ((void (*)(WTF::StringImpl **, char *))off_1E33F8F28[v59])(v66, (char *)v45 + 8);
              *((_DWORD *)v45 + 8) = -1;
              WTF::fastFree(v45, v44);
            }
          }
          v48 = v64;
          v64 = 0;
          if (v48)
          {
            do
            {
              v49 = __ldaxr((unsigned int *)v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, (unsigned int *)v48));
            if (!v50)
            {
              atomic_store(1u, (unsigned int *)v48);
              v60 = (WTF::StringImpl *)*((_QWORD *)v48 + 6);
              *((_QWORD *)v48 + 6) = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, v44);
                else
                  *(_DWORD *)v60 -= 2;
              }
              v61 = (WTF::StringImpl *)*((_QWORD *)v48 + 5);
              *((_QWORD *)v48 + 5) = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WTF::StringImpl::destroy(v61, v44);
                else
                  *(_DWORD *)v61 -= 2;
              }
              v62 = *((unsigned int *)v48 + 8);
              if ((_DWORD)v62 != -1)
                ((void (*)(WTF::StringImpl **, char *))off_1E33F8F28[v62])(v66, (char *)v48 + 8);
              *((_DWORD *)v48 + 8) = -1;
              WTF::fastFree(v48, v44);
            }
          }
          result = (uint64_t)v63;
          v63 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v44);
            else
              *(_DWORD *)result -= 2;
          }
        }
        else
        {
          if ((*(_BYTE *)(v25 + 344) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v25 + 160));
            *(_BYTE *)(v25 + 344) |= 1u;
          }
          WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v25 + 160), (uint64_t *)&v64);
          v27 = v64;
          v64 = 0;
          v65 = v27;
          result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::add(a3, (uint64_t *)&v65, (uint64_t)v66);
          v29 = v65;
          v65 = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr((unsigned int *)v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, (unsigned int *)v29));
            if (!v31)
            {
              atomic_store(1u, (unsigned int *)v29);
              v51 = (WTF::StringImpl *)*((_QWORD *)v29 + 6);
              *((_QWORD *)v29 + 6) = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, v28);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = (WTF::StringImpl *)*((_QWORD *)v29 + 5);
              *((_QWORD *)v29 + 5) = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, v28);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = *((unsigned int *)v29 + 8);
              if ((_DWORD)v53 != -1)
                ((void (*)(WTF::StringImpl **, char *))off_1E33F8F28[v53])(v66, (char *)v29 + 8);
              *((_DWORD *)v29 + 8) = -1;
              result = WTF::fastFree(v29, v28);
            }
          }
          v32 = v64;
          v64 = 0;
          if (v32)
          {
            do
            {
              v33 = __ldaxr((unsigned int *)v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, (unsigned int *)v32));
            if (!v34)
            {
              atomic_store(1u, (unsigned int *)v32);
              v54 = (WTF::StringImpl *)*((_QWORD *)v32 + 6);
              *((_QWORD *)v32 + 6) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, v28);
                else
                  *(_DWORD *)v54 -= 2;
              }
              v55 = (WTF::StringImpl *)*((_QWORD *)v32 + 5);
              *((_QWORD *)v32 + 5) = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, v28);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = *((unsigned int *)v32 + 8);
              if ((_DWORD)v56 != -1)
                ((void (*)(WTF::StringImpl **, char *))off_1E33F8F28[v56])(v66, (char *)v32 + 8);
              *((_DWORD *)v32 + 8) = -1;
              result = WTF::fastFree(v32, v28);
            }
          }
        }
        v35 = v22 + 7;
        v22 = v15;
        if (v35 != v15)
        {
          v22 = v35;
          while (1)
          {
            v66[0] = 0;
            WTF::URL::invalidate((WTF::URL *)v66);
            v36 = v66[0];
            result = WTF::equal(*v22, v66[0], v37);
            if ((_DWORD)result)
            {
              result = WTF::equal(v22[5], 0, v39);
              v40 = result;
            }
            else
            {
              v40 = 0;
            }
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                result = WTF::StringImpl::destroy(v36, v38);
              else
                *(_DWORD *)v36 -= 2;
            }
            v41 = *v22 == (WTF *)-1 ? 1 : v40;
            if (v41 != 1)
              break;
            v22 += 7;
            if (v22 == v15)
            {
              v22 = v15;
              break;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::MemoryCache::moveToEndOfLiveDecodedResourcesListIfPresent(WTF **this, WebCore::CachedResource *a2)
{
  void *v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  WTF *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  WTF *v21;
  WTF **v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;

  if ((WTF::isMainThread((WTF *)this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5DA4CLL);
  }
  v5 = (uint64_t *)(this + 38);
  v6 = *((_DWORD *)this + 82) + 1;
  *((_DWORD *)this + 82) = v6;
  if (v6 > *((_DWORD *)this + 83))
  {
    v27 = this[39];
    if (v27)
    {
      do
      {
        v28 = (WTF *)*((_QWORD *)v27 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v27 + 8))
        {
          v34 = (WTF *)*((_QWORD *)v27 + 2);
          WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)this + 38, this + 38, v27);
          v28 = v34;
        }
        v27 = v28;
      }
      while (v28);
    }
    *((_DWORD *)this + 82) = 0;
    v29 = this[38];
    if (v29)
    {
      LODWORD(v29) = *((_DWORD *)v29 - 3);
      if (v29 > 0x7FFFFFFE)
        LODWORD(v29) = 0x7FFFFFFF;
    }
    *((_DWORD *)this + 83) = 2 * (_DWORD)v29;
  }
  result = *((_QWORD *)a2 + 1);
  if (!result)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v30 = (unsigned int *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = result;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v4);
      }
      result = *((_QWORD *)a2 + 1);
    }
  }
  do
    v8 = __ldaxr((unsigned int *)result);
  while (__stlxr(v8 + 1, (unsigned int *)result));
  do
    v9 = __ldaxr((unsigned int *)result);
  while (__stlxr(v9 + 1, (unsigned int *)result));
  v10 = *v5;
  if (*v5)
  {
    v11 = *(_DWORD *)(v10 - 8);
    v12 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    for (i = 1; ; ++i)
    {
      v17 = *(WTF **)(v10 + 8 * v15);
      if (v17 != (WTF *)-1)
      {
        if (!v17)
          goto LABEL_22;
        if (*(_QWORD *)v17 == result)
          break;
      }
      v15 = (v15 + i) & v11;
    }
    if (v15 != *(_DWORD *)(v10 - 4))
    {
      v18 = *((_QWORD *)v17 + 1);
      v19 = (_QWORD *)*((_QWORD *)v17 + 2);
      if (v18)
      {
        *(_QWORD *)(v18 + 16) = v19;
        v19 = (_QWORD *)*((_QWORD *)v17 + 2);
      }
      else
      {
        this[39] = (WTF *)v19;
      }
      if (v19)
        v20 = v19 + 1;
      else
        v20 = this + 40;
      *v20 = v18;
      v21 = this[40];
      *((_QWORD *)v17 + 1) = v21;
      *((_QWORD *)v17 + 2) = 0;
      if (v21)
        v22 = (WTF **)((char *)v21 + 16);
      else
        v22 = this + 39;
      *v22 = v17;
      this[40] = v17;
    }
  }
LABEL_22:
  if (result)
  {
    do
    {
      v23 = __ldaxr((unsigned int *)result);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)result));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)result);
      v33 = result;
      WTF::fastFree((WTF *)result, v4);
      result = v33;
    }
    do
    {
      v25 = __ldaxr((unsigned int *)result);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)result));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

void WebCore::MemoryCache::removeFromLiveResourcesSize(WebCore::MemoryCache *this, WebCore::CachedResource *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char **v15;
  char *v16;

  if ((WTF::isMainThread(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5DC00);
  }
  v4 = *((_QWORD *)a2 + 50);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 400);
    v6 = *(_DWORD *)(v4 + 404);
  }
  else
  {
    v12 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v12 != -1)
    {
      v16 = &v14;
      v15 = &v16;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v6 = 0;
    v5 = 0;
  }
  v7 = (char *)a2 + 160;
  if ((*((_BYTE *)a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
    *((_BYTE *)a2 + 344) |= 1u;
  }
  v8 = -4840;
  if (*(_QWORD *)v7)
    v8 = -4840 - 2 * *(_DWORD *)(*(_QWORD *)v7 + 4);
  *((_DWORD *)this + 6) += v8 - v5 - v6;
  v9 = *((_QWORD *)a2 + 50);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 404) + *(_DWORD *)(v9 + 400);
  }
  else
  {
    v13 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v13 != -1)
    {
      v16 = &v14;
      v15 = &v16;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v10 = 0;
  }
  if ((*((_BYTE *)a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
    *((_BYTE *)a2 + 344) |= 1u;
  }
  v11 = 4840;
  if (*(_QWORD *)v7)
    v11 = 2 * *(_DWORD *)(*(_QWORD *)v7 + 4) + 4840;
  *((_DWORD *)this + 7) += v11 + v10;
}

void WebCore::MemoryCache::removeRequestFromSessionCaches(WebCore::MemoryCache *this, WebCore::ScriptExecutionContext *a2, const WebCore::ResourceRequest *a3)
{
  WTF *v5;
  int isMainThread;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int **v66;

  v5 = (WTF *)(*(uint64_t (**)(WebCore::MemoryCache *, WebCore::ScriptExecutionContext *, const WebCore::ResourceRequest *))(*(_QWORD *)this + 64))(this, a2, a3);
  if ((_DWORD)v5)
  {
    v24 = *(_QWORD *)(*((_QWORD *)this + 45) + 128);
    if (v24)
    {
      WebCore::ResourceRequestBase::isolatedCopy(a2, (uint64_t)&v40);
      v25 = WTF::fastMalloc((WTF *)0xD0);
      *(_QWORD *)v25 = off_1E33F8FD0;
      v26 = v40;
      v40 = 0;
      *(_QWORD *)(v25 + 8) = v26;
      LODWORD(v26) = v41;
      *(_DWORD *)(v25 + 16) = v41;
      *(_OWORD *)(v25 + 20) = v42;
      *(_QWORD *)(v25 + 36) = v43;
      *(_DWORD *)(v25 + 44) = v44;
      v41 = v26 & 0xFFFFFFFE;
      v27 = v45;
      v45 = 0;
      *(_QWORD *)(v25 + 48) = v27;
      LODWORD(v27) = v46;
      *(_DWORD *)(v25 + 56) = v46;
      *(_OWORD *)(v25 + 60) = v47;
      *(_QWORD *)(v25 + 76) = v48;
      *(_DWORD *)(v25 + 84) = v49;
      v46 = v27 & 0xFFFFFFFE;
      *(_QWORD *)(v25 + 88) = v50;
      *(_QWORD *)(v25 + 96) = v51;
      v28 = *((_QWORD *)&v51 + 1);
      v51 = 0u;
      *(_QWORD *)(v25 + 104) = v28;
      v29 = v52;
      v52 = 0;
      *(_QWORD *)(v25 + 112) = v29;
      v30 = v53;
      v53 = 0;
      *(_QWORD *)(v25 + 120) = v30;
      v31 = v54;
      v54 = 0;
      *(_QWORD *)(v25 + 128) = v31;
      v32 = v55;
      v55 = 0;
      *(_QWORD *)(v25 + 136) = v32;
      v33 = v56;
      v56 = 0;
      *(_QWORD *)(v25 + 144) = v33;
      LODWORD(v32) = v57;
      *(_BYTE *)(v25 + 156) = v58;
      *(_DWORD *)(v25 + 152) = v32;
      *(_QWORD *)(v25 + 160) = v59;
      v34 = *((_QWORD *)&v59 + 1);
      v59 = 0u;
      *(_QWORD *)(v25 + 168) = v34;
      *(_QWORD *)(v25 + 176) = v60;
      v35 = v61;
      *(_BYTE *)(v25 + 192) = v62;
      *(_QWORD *)(v25 + 184) = v35;
      v36 = v63;
      v60 = 0;
      v63 = 0;
      *(_QWORD *)(v25 + 200) = v36;
      v64 = v25;
      v65 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 56))(v24, &v64);
      v38 = v64;
      v64 = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v40, v37);
    }
    return;
  }
  isMainThread = WTF::isMainThread(v5);
  if ((isMainThread & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5DFF4);
  }
  {
    isMainThread = WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
  }
  if (qword_1ECE909F8)
  {
    v7 = *(unsigned int *)(qword_1ECE909F8 - 4);
    v8 = qword_1ECE909F8 + 16 * v7;
    if (*(_DWORD *)(qword_1ECE909F8 - 12))
    {
      v9 = qword_1ECE909F8;
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = qword_1ECE909F8;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 16;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    v9 = qword_1ECE909F8 + 16 * v7;
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = qword_1ECE909F8 + 16 * v7;
LABEL_15:
  if (qword_1ECE909F8)
    v11 = qword_1ECE909F8 + 16 * *(unsigned int *)(qword_1ECE909F8 - 4);
  else
    v11 = 0;
  while (v9 != v11)
  {
    v12 = WebCore::MemoryCache::resourceForRequestImpl(isMainThread, a2, *(uint64_t **)(v9 + 8));
    if (!v12)
      goto LABEL_19;
    v15 = v12;
    v16 = *(unsigned int **)(v12 + 8);
    if (v16)
      goto LABEL_52;
    v20 = v15;
    v16 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v16 = 1;
    *((_QWORD *)v16 + 1) = v20;
    v21 = *(unsigned int **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v16;
    if (!v21)
      goto LABEL_52;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v13);
    }
    v16 = *(unsigned int **)(v20 + 8);
    if (v16)
    {
LABEL_52:
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v39 = v16;
      v18 = *((_QWORD *)v16 + 1);
      if (!v18
        || (v66 = &v39, ++*(_DWORD *)(v18 + 548), (v19 = *(_QWORD *)(v18 + 488)) == 0)
        || !*(_QWORD *)(v19 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v18 + 464), (uint64_t *)&v66, (uint64_t)&v64), (v16 = v39) != 0))
      {
        v13 = (void *)*((_QWORD *)v16 + 1);
        if (v13)
          WebCore::MemoryCache::remove((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, (WebCore::CachedResource *)v13);
      }
    }
    else
    {
LABEL_19:
      v39 = 0;
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v39, v13);
    v14 = v9 + 16;
    v9 = v8;
    if (v14 != v8)
    {
      v9 = v14;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 16;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
}

void WebCore::MemoryCache::TypeStatistic::addResource(WebCore::MemoryCache::TypeStatistic *this, WebCore::CachedResource *a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  char *v7;
  int v8;
  void *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int ***v22;
  WTF *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char **v28;
  char *v29;

  ++*(_DWORD *)this;
  v4 = *((_QWORD *)a2 + 50);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 404) + *(_DWORD *)(v4 + 400);
  }
  else
  {
    v6 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v6 != -1)
    {
      v29 = &v27;
      v28 = &v29;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v5 = 0;
  }
  v7 = (char *)a2 + 160;
  if ((*((_BYTE *)a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
    *((_BYTE *)a2 + 344) |= 1u;
  }
  v8 = 4840;
  if (*(_QWORD *)v7)
    v8 = 2 * *(_DWORD *)(*(_QWORD *)v7 + 4) + 4840;
  *((_DWORD *)this + 1) += v8 + v5;
  if (!WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences((uint64_t)a2 + 360, a2))
  {
LABEL_11:
    v10 = *((_QWORD *)a2 + 50);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 404) + *(_DWORD *)(v10 + 400);
    }
    else
    {
      v12 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v12 != -1)
      {
        v29 = &v27;
        v28 = &v29;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v11 = 0;
    }
    if ((*((_BYTE *)a2 + 344) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
      *((_BYTE *)a2 + 344) |= 1u;
    }
    v13 = 4840;
    if (*(_QWORD *)v7)
      v13 = 2 * *(_DWORD *)(*(_QWORD *)v7 + 4) + 4840;
    v14 = v13 + v11;
    goto LABEL_23;
  }
  v15 = *((_QWORD *)a2 + 56);
  if (!v15)
  {
    v14 = 0;
    goto LABEL_23;
  }
  v14 = *(_DWORD *)(v15 - 12);
  if (v14)
  {
    v26 = *((_QWORD *)a2 + 56);
    v17 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v17)
    {
      v18 = 16 * v17;
      v19 = (uint64_t *)*((_QWORD *)a2 + 56);
      while ((unint64_t)(*v19 + 1) <= 1)
      {
        v19 += 2;
        v18 -= 16;
        if (!v18)
          goto LABEL_39;
      }
    }
    else
    {
      v19 = (uint64_t *)*((_QWORD *)a2 + 56);
    }
    v20 = (uint64_t *)(v26 + 16 * v17);
    if (v19 != v20)
    {
      v21 = *v19;
LABEL_35:
      if (*(_QWORD *)(v21 + 8))
        goto LABEL_11;
      while (1)
      {
        v19 += 2;
        if (v19 == v20)
          break;
        v21 = *v19;
        if ((unint64_t)(*v19 + 1) > 1)
        {
          if (v19 != v20)
            goto LABEL_35;
          break;
        }
      }
    }
LABEL_39:
    *((_QWORD *)a2 + 56) = 0;
    if ((_DWORD)v17)
    {
      v22 = (unsigned int ***)(v26 + 8);
      do
      {
        if (*(v22 - 1) != (unsigned int **)-1)
        {
          std::unique_ptr<WebCore::CachedResource::Callback>::reset[abi:sn180100](v22, 0);
          v23 = (WTF *)*(v22 - 1);
          *(v22 - 1) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
              WTF::fastFree(v23, v9);
            else
              --*(_DWORD *)v23;
          }
        }
        v22 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v26 - 16), v9);
    v24 = 0;
    v25 = *((_QWORD *)a2 + 56);
    *((_DWORD *)a2 + 114) = 0;
    if (v25)
    {
      v24 = *(_DWORD *)(v25 - 12);
      if (v24 > 0x7FFFFFFE)
        v24 = 0x7FFFFFFF;
    }
    v14 = 0;
    *((_DWORD *)a2 + 115) = 2 * v24;
  }
LABEL_23:
  *((_DWORD *)this + 2) += v14;
  v16 = *((_QWORD *)a2 + 50);
  if (v16)
    LODWORD(v16) = *(_DWORD *)(v16 + 404);
  *((_DWORD *)this + 3) += v16;
}

void WebCore::MemoryCache::getStatistics(WebCore::MemoryCache *this@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  WebCore::MemoryCache::TypeStatistic *v8;
  WTF ***v9;
  WTF **v10;
  uint64_t v11;
  WTF **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  int v18;
  int v19;
  WTF **v20;
  WebCore::CachedResource *v21;
  WebCore::MemoryCache::TypeStatistic *v22;
  WTF **v23;
  WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  const WTF::StringImpl *v27;
  int v28;
  int v29;
  _QWORD *v30;
  WebCore::MemoryCache::TypeStatistic *v31;
  _QWORD *v32;
  WebCore::MemoryCache::TypeStatistic *v33;
  WebCore::MemoryCache::TypeStatistic *v34;
  WebCore::MemoryCache::TypeStatistic *v35;
  WTF::StringImpl *v36[5];

  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  v3 = (_QWORD *)*((_QWORD *)this + 42);
  if (v3)
  {
    v4 = *((unsigned int *)v3 - 1);
    v5 = &v3[2 * v4];
    if (*((_DWORD *)v3 - 3))
    {
      v6 = (_QWORD *)*((_QWORD *)this + 42);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = (_QWORD *)*((_QWORD *)this + 42);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_11;
          }
        }
      }
      goto LABEL_11;
    }
    v6 = &v3[2 * v4];
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = &v3[2 * v4];
LABEL_11:
  if (v3)
    v3 += 2 * *((unsigned int *)v3 - 1);
  if (v3 == v6)
    return;
  v8 = (WebCore::MemoryCache::TypeStatistic *)(a2 + 4);
  v34 = (WebCore::MemoryCache::TypeStatistic *)(a2 + 2);
  v35 = (WebCore::MemoryCache::TypeStatistic *)(a2 + 3);
  v32 = v3;
  v33 = (WebCore::MemoryCache::TypeStatistic *)(a2 + 1);
  v31 = (WebCore::MemoryCache::TypeStatistic *)a2;
  do
  {
    v9 = (WTF ***)v6[1];
    v10 = *v9;
    if (!*v9)
    {
      v20 = 0;
      LODWORD(v11) = 0;
      goto LABEL_33;
    }
    v11 = *((unsigned int *)v10 - 1);
    v12 = &v10[7 * v11];
    if (!*((_DWORD *)v10 - 3))
    {
      v20 = &v10[7 * v11];
LABEL_33:
      v12 = &v10[7 * v11];
      goto LABEL_36;
    }
    if (!(_DWORD)v11)
    {
      v20 = *v9;
      goto LABEL_36;
    }
    v13 = 56 * v11;
    do
    {
      v36[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v36);
      v14 = v36[0];
      if (WTF::equal(*v10, v36[0], v15))
      {
        v18 = WTF::equal(v10[5], 0, v17);
        if (v14)
          goto LABEL_23;
      }
      else
      {
        v18 = 0;
        if (v14)
        {
LABEL_23:
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v16);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      if (*v10 == (WTF *)-1)
        v19 = 1;
      else
        v19 = v18;
      if (v19 != 1)
        goto LABEL_35;
      v10 += 7;
      v13 -= 56;
    }
    while (v13);
    v10 = v12;
LABEL_35:
    v20 = v10;
    v10 = *v9;
LABEL_36:
    if (v10)
      v10 += 7 * *((unsigned int *)v10 - 1);
    if (v10 != v20)
    {
      while (1)
      {
        v21 = (WebCore::CachedResource *)*((_QWORD *)v20[6] + 1);
        switch(*((_BYTE *)v21 + 556) & 0x1F)
        {
          case 1:
            v22 = v31;
            goto LABEL_45;
          case 2:
            v22 = v33;
            goto LABEL_45;
          case 3:
            v22 = v34;
            goto LABEL_45;
          case 4:
          case 5:
            v22 = v8;
            goto LABEL_45;
          case 0xC:
            v22 = v35;
LABEL_45:
            WebCore::MemoryCache::TypeStatistic::addResource(v22, v21);
            break;
          default:
            break;
        }
        v23 = v20 + 7;
        v20 = v12;
        if (v23 != v12)
          break;
LABEL_61:
        if (v20 == v10)
          goto LABEL_62;
      }
      v20 = v23;
      while (2)
      {
        v36[0] = 0;
        WTF::URL::invalidate((WTF::URL *)v36);
        v24 = v36[0];
        if (WTF::equal(*v20, v36[0], v25))
        {
          v28 = WTF::equal(v20[5], 0, v27);
          if (!v24)
          {
LABEL_54:
            if (*v20 == (WTF *)-1)
              v29 = 1;
            else
              v29 = v28;
            if (v29 != 1)
              goto LABEL_61;
            v20 += 7;
            if (v20 == v12)
            {
              v20 = v12;
              goto LABEL_61;
            }
            continue;
          }
        }
        else
        {
          v28 = 0;
          if (!v24)
            goto LABEL_54;
        }
        break;
      }
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v26);
      else
        *(_DWORD *)v24 -= 2;
      goto LABEL_54;
    }
LABEL_62:
    v30 = v6 + 2;
    v6 = v5;
    if (v30 != v5)
    {
      v6 = v30;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  while (v6 != v32);
}

void WebCore::MemoryCache::setDisabled(WebCore::MemoryCache *this, int a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  int v16;
  int v17;
  void *v18;
  WTF::StringImpl *v19[5];

  if ((WTF::isMainThread(this) & 1) != 0)
  {
    *(_BYTE *)this = a2;
    if (a2)
    {
      for (i = *((_QWORD *)this + 42); i; i = *((_QWORD *)this + 42))
      {
        if (!*(_DWORD *)(i - 12))
          break;
        v5 = *(unsigned int *)(i - 4);
        if ((_DWORD)v5)
        {
          v6 = 16 * v5;
          v7 = i + 16 * v5;
          while ((unint64_t)(*(_QWORD *)i + 1) <= 1)
          {
            i += 16;
            v6 -= 16;
            if (!v6)
            {
              i = v7;
              break;
            }
          }
        }
        v8 = **(WTF ****)(i + 8);
        v9 = *((unsigned int *)v8 - 1);
        v10 = &v8[7 * v9];
        if (*((_DWORD *)v8 - 3))
        {
          if ((_DWORD)v9)
          {
            v11 = 56 * v9;
            while (1)
            {
              v19[0] = 0;
              WTF::URL::invalidate((WTF::URL *)v19);
              v12 = v19[0];
              if (WTF::equal(*v8, v19[0], v13))
                v16 = WTF::equal(v8[5], 0, v15);
              else
                v16 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12 == 2)
                  WTF::StringImpl::destroy(v12, v14);
                else
                  *(_DWORD *)v12 -= 2;
              }
              v17 = *v8 == (WTF *)-1 ? 1 : v16;
              if (v17 != 1)
                break;
              v8 += 7;
              v11 -= 56;
              if (!v11)
                goto LABEL_27;
            }
          }
          v10 = v8;
        }
LABEL_27:
        WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)v19, *((WebCore::CachedResource **)v10[6] + 1));
        WebCore::MemoryCache::remove(this, *((WebCore::CachedResource **)v19[0] + 1));
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)v19, v18);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebCore::MemoryCache::evictResources(WebCore::MemoryCache *this)
{
  uint64_t result;
  WTF *v3;

  result = WTF::isMainThread(this);
  if ((result & 1) == 0)
    goto LABEL_6;
  if (*(_BYTE *)this)
    return result;
  WebCore::MemoryCache::setDisabled(this, 1);
  result = WTF::isMainThread(v3);
  if ((result & 1) == 0)
  {
LABEL_6:
    __break(0xC471u);
    JUMPOUT(0x195F5E7E4);
  }
  *(_BYTE *)this = 0;
  return result;
}

uint64_t WebCore::MemoryCache::evictResources(WTF *a1, uint64_t a2)
{
  uint64_t result;
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF ***v12;
  WTF **v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  int v20;
  int v21;
  WTF **v22;
  WTF **v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  WTF **v29;
  WTF::StringImpl *v30;
  const WTF::StringImpl *v31;
  const WTF::StringImpl *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47[5];
  unsigned int **v48;

  result = WTF::isMainThread(a1);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_90;
  }
  if (*(_BYTE *)a1)
    return result;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E33F8FF8;
  *((_QWORD *)v5 + 1) = a1;
  if ((WTF::isMainThread(v5) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5EC38);
  }
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5EC58);
  }
  v6 = *((_QWORD *)a1 + 42);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v9 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2) & v7;
    v10 = *(_QWORD *)(v6 + 16 * v9);
    if (v10 != a2)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v7;
        v10 = *(_QWORD *)(v6 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_12;
      }
      v9 = *(unsigned int *)(v6 - 4);
    }
LABEL_12:
    if (v9 != *(_DWORD *)(v6 - 4))
    {
      v12 = *(WTF ****)(v6 + 16 * v9 + 8);
      v13 = *v12;
      if (*v12)
      {
        v14 = *((unsigned int *)v13 - 1);
        v15 = &v13[7 * v14];
        if (*((_DWORD *)v13 - 3))
        {
          if ((_DWORD)v14)
          {
            v16 = 56 * v14;
            while (1)
            {
              v47[0] = 0;
              WTF::URL::invalidate((WTF::URL *)v47);
              v17 = v47[0];
              if (WTF::equal(*v13, v47[0], v18))
                v20 = WTF::equal(v13[5], 0, v19);
              else
                v20 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  WTF::StringImpl::destroy(v17, v8);
                else
                  *(_DWORD *)v17 -= 2;
              }
              v21 = *v13 == (WTF *)-1 ? 1 : v20;
              if (v21 != 1)
                break;
              v13 += 7;
              v16 -= 56;
              if (!v16)
              {
                v13 = v15;
                break;
              }
            }
            v22 = v13;
            v13 = *v12;
          }
          else
          {
            v22 = *v12;
          }
          goto LABEL_34;
        }
        v22 = &v13[7 * v14];
      }
      else
      {
        v22 = 0;
        LODWORD(v14) = 0;
      }
      v15 = &v13[7 * v14];
LABEL_34:
      if (!v13)
      {
        v23 = 0;
        v25 = 0;
        v45 = 0;
        v46 = 0;
        goto LABEL_39;
      }
      v23 = &v13[7 * *((unsigned int *)v13 - 1)];
      v45 = 0;
      v46 = 0;
      v24 = *((unsigned int *)v13 - 3);
      if (!(_DWORD)v24)
      {
        v25 = 0;
LABEL_39:
        if (v23 != v22)
        {
          v26 = 0;
          do
          {
            v27 = (unsigned int *)v22[6];
            if (v27)
            {
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 + 1, v27));
              v26 = HIDWORD(v46);
              v25 = v45;
            }
            *(_QWORD *)(v25 + 8 * v26++) = v27;
            HIDWORD(v46) = v26;
            v29 = v22 + 7;
            v22 = v15;
            if (v29 != v15)
            {
              v22 = v29;
              while (1)
              {
                v47[0] = 0;
                WTF::URL::invalidate((WTF::URL *)v47);
                v30 = v47[0];
                if (WTF::equal(*v22, v47[0], v31))
                  v33 = WTF::equal(v22[5], 0, v32);
                else
                  v33 = 0;
                if (v30)
                {
                  if (*(_DWORD *)v30 == 2)
                    WTF::StringImpl::destroy(v30, v8);
                  else
                    *(_DWORD *)v30 -= 2;
                }
                v34 = *v22 == (WTF *)-1 ? 1 : v33;
                if (v34 != 1)
                  break;
                v22 += 7;
                if (v22 == v15)
                {
                  v22 = v15;
                  break;
                }
              }
            }
          }
          while (v22 != v23);
          if (v26)
          {
            v35 = v25 + 8 * v26;
            do
            {
              if (!*(_QWORD *)v25)
                goto LABEL_64;
              v36 = *(_QWORD *)(*(_QWORD *)v25 + 8);
              if (!v36)
                goto LABEL_64;
              v37 = *(unsigned int **)(v36 + 8);
              if (v37)
                goto LABEL_95;
              v37 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
              *v37 = 1;
              *((_QWORD *)v37 + 1) = v36;
              v41 = *(unsigned int **)(v36 + 8);
              *(_QWORD *)(v36 + 8) = v37;
              if (!v41)
                goto LABEL_95;
              do
              {
                v42 = __ldaxr(v41);
                v43 = v42 - 1;
              }
              while (__stlxr(v43, v41));
              if (!v43)
              {
                atomic_store(1u, v41);
                WTF::fastFree((WTF *)v41, v8);
              }
              v37 = *(unsigned int **)(v36 + 8);
              if (v37)
              {
LABEL_95:
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 + 1, v37));
                v44 = v37;
                v39 = *((_QWORD *)v37 + 1);
                if (!v39
                  || (v48 = &v44, ++*(_DWORD *)(v39 + 548), (v40 = *(_QWORD *)(v39 + 488)) == 0)
                  || !*(_QWORD *)(v40 + 8)
                  || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v39 + 464), (uint64_t *)&v48, (uint64_t)v47), (v37 = v44) != 0))
                {
                  v8 = (WTF::StringImpl *)*((_QWORD *)v37 + 1);
                  if (v8)
                    (*(void (**)(WTF *))(*(_QWORD *)v5 + 16))(v5);
                }
              }
              else
              {
LABEL_64:
                v44 = 0;
              }
              WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v44, v8);
              v25 += 8;
            }
            while (v25 != v35);
          }
        }
        WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v8);
        return (*(uint64_t (**)(WTF *))(*(_QWORD *)v5 + 8))(v5);
      }
      if (!(v24 >> 29))
      {
        v25 = WTF::fastMalloc((WTF *)(8 * v24));
        LODWORD(v46) = v24;
        v45 = v25;
        goto LABEL_39;
      }
      __break(0xC471u);
LABEL_90:
      JUMPOUT(0x195F5EC18);
    }
  }
  return (*(uint64_t (**)(WTF *))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::MemoryCache::pruneSoon(WebCore::MemoryCache *this)
{
  uint64_t result;
  unsigned int v3;
  double v4;

  result = WTF::isMainThread(this);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5ECE0);
  }
  v3 = *((_DWORD *)this + 7);
  if ((v3 + *((_DWORD *)this + 6) > *((_DWORD *)this + 1) || v3 > *((_DWORD *)this + 3))
    && ((*((_QWORD *)this + 47) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*((_QWORD *)this + 47) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
  {
    *((_QWORD *)this + 46) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    return WebCore::TimerBase::setNextFireTime((uint64_t)this + 344, v4 + 0.0);
  }
  return result;
}

uint64_t WebCore::CachedSVGDocument::textResourceDecoder(WebCore::CachedSVGDocument *this)
{
  return *((_QWORD *)this + 83);
}

uint64_t WebCore::CachedSVGDocument::mayTryReplaceEncodedData(WebCore::CachedSVGDocument *this)
{
  return 1;
}

void WebCore::CachedSVGFont::~CachedSVGFont(WebCore::CachedSVGFont *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CachedSVGFont::~CachedSVGFont(this, a2);
  WTF::fastFree(v2, v3);
}

{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v3 = (_DWORD *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v3)
  {
    if (v3[57] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    else
      --v3[57];
  }
  v4 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v11 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v11)
      {
        v28 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v11));
        v4 = v28;
      }
      v12 = *(WTF **)(v4 + 16);
      if (v12)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v26 = v4;
        WTF::fastFree(v12, a2);
        v4 = v26;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v13 = *(unsigned int *)(v8 + 20);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)(v8 + 8);
        v15 = v14 + 16 * v13;
        do
        {
          v16 = *(unsigned int **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              v22 = v15;
              v23 = v14;
              v24 = (WTF *)v16;
              v25 = v8;
              atomic_store(1u, v16);
              v19 = v16[6];
              if ((_DWORD)v19 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F8F08[v19])(&v29, v16 + 2);
              *((_DWORD *)v24 + 6) = -1;
              WTF::fastFree(v24, a2);
              v8 = v25;
              v15 = v22;
              v14 = v23;
            }
          }
          v14 += 16;
        }
        while (v14 != v15);
      }
      v20 = *(WTF **)(v8 + 8);
      if ((WTF *)(v8 + 24) != v20 && v20 != 0)
      {
        *(_QWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        v27 = v8;
        WTF::fastFree(v20, a2);
        v8 = v27;
      }
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  WebCore::CachedFont::~CachedFont(this, (WTF::StringImpl *)a2);
}

uint64_t WebCore::CachedScript::mayTryReplaceEncodedData(WebCore::CachedScript *this)
{
  return 1;
}

void WebCore::CachedTextTrack::~CachedTextTrack(WebCore::CachedTextTrack *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CachedResource::~CachedResource(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CachedTextTrack::mayTryReplaceEncodedData(WebCore::CachedTextTrack *this)
{
  return 1;
}

uint64_t WebCore::CachedXSLStyleSheet::textResourceDecoder(WebCore::CachedXSLStyleSheet *this)
{
  return *((_QWORD *)this + 83);
}

uint64_t WebCore::CachedXSLStyleSheet::mayTryReplaceEncodedData(WebCore::CachedXSLStyleSheet *this)
{
  return 1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_17CachedSVGDocumentEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(int a1, unsigned int **this)
{
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_17CachedSVGDocumentEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF::StringImpl **v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF::StringImpl **)(a1 + 56 * i);
      if (*v5 != (WTF::StringImpl *)-1)
      {
        v6 = a1 + 56 * i;
        v7 = *(unsigned int **)(v6 + 48);
        *(_QWORD *)(v6 + 48) = 0;
        if (v7)
        {
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, a2);
          }
        }
        v10 = v5[5];
        v5[5] = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        v11 = *v5;
        *v5 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MemoryCache::*&)(void),WebCore::MemoryCache*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WTF *WTF::Detail::CallableWrapper<WebCore::MemoryCache::MemoryCache(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call(WTF *a1)
{
  WTF *v1;
  WTF *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  __int128 v11;
  WTF *v12;
  char v13;
  __int128 *v14;

  if ((WTF::isMainThread(a1) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_33;
  }
  {
    WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
  }
  WebCore::MemoryCache::getStatistics((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, &v11);
  WTFLogAlways();
  WTFLogAlways();
  WTFLogAlways();
  WTFLogAlways();
  WTFLogAlways();
  WTFLogAlways();
  WTFLogAlways();
  WTFLogAlways();
  WTFLogAlways();
  v1 = (WTF *)WTFLogAlways();
  if ((WTF::isMainThread(v1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F5F5E0);
  }
  {
    WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
  }
  result = (WTF *)WTFLogAlways();
  v3 = dword_1ECE908D4;
  if (dword_1ECE908D4 >= 1)
  {
    while (1)
    {
      v4 = v3--;
      result = (WTF *)WTFLogAlways();
      if (dword_1ECE908D4 <= v3)
        break;
      v5 = *(_QWORD *)(qword_1ECE908C8 + 8 * v3);
      v6 = *(_QWORD **)(v5 + 8);
      if (v6)
      {
        while (1)
        {
          v7 = *(_QWORD *)(*v6 + 8);
          if (v7)
            break;
          v6 = (_QWORD *)v6[2];
          if (!v6)
            goto LABEL_28;
        }
LABEL_13:
        if ((*(_BYTE *)(v7 + 344) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v7 + 160));
          *(_BYTE *)(v7 + 344) |= 1u;
        }
        WTF::String::utf8();
        if (!*(_QWORD *)(v7 + 400))
        {
          v9 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
          if (v9 != -1)
          {
            *(_QWORD *)&v11 = &v13;
            v14 = &v11;
            std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
          }
        }
        if ((*(_BYTE *)(v7 + 344) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v7 + 160));
          *(_BYTE *)(v7 + 344) |= 1u;
        }
        WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(v7 + 360, v8);
        WTFLogAlways();
        result = v12;
        v12 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = (WTF *)WTF::fastFree(result, v10);
          else
            --*(_DWORD *)result;
        }
        while (1)
        {
          v6 = (_QWORD *)v6[2];
          if (!v6)
            break;
          v7 = *(_QWORD *)(*v6 + 8);
          if (v7)
          {
            ++*(_DWORD *)(v5 + 24);
            goto LABEL_13;
          }
        }
        ++*(_DWORD *)(v5 + 24);
      }
LABEL_28:
      if (v4 < 2)
        return result;
    }
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x195F5F5C0);
  }
  return result;
}

uint64_t WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>::~KeyValuePair(uint64_t a1, void *a2)
{
  uint64_t *v3;

  v3 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*v3)
      WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::deallocateTable(*v3, a2);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  int v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2);
  v7 = 0;
  do
  {
    v8 = v5 & v4;
    v5 = ++v7 + v8;
  }
  while (*(_QWORD *)(a1 + 16 * v8));
  v9 = (uint64_t *)(a1 + 16 * v8);
  v10 = (uint64_t *)v9[1];
  v9[1] = 0;
  if (v10)
  {
    if (*v10)
      WTF::HashTable<std::pair<WTF::URL,WTF::String>,WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>>::deallocateTable(*v10, v6);
    WTF::fastFree((WTF *)v10, v6);
  }
  v11 = a2[1];
  *v9 = *a2;
  a2[1] = 0;
  v9[1] = v11;
  return v9;
}

uint64_t WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(uint64_t result)
{
  WTF *v1;
  WTF *v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;

  v1 = *(WTF **)(result + 8);
  if (v1)
  {
    do
    {
      v2 = (WTF *)*((_QWORD *)v1 + 2);
      if (!*(_QWORD *)(*(_QWORD *)v1 + 8))
      {
        v4 = (WTF *)*((_QWORD *)v1 + 2);
        v5 = result;
        WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)result, (void *)result, v1);
        v2 = v4;
        result = v5;
      }
      v1 = v2;
    }
    while (v2);
  }
  *(_DWORD *)(result + 24) = 0;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    LODWORD(v3) = *(_DWORD *)(v3 - 12);
    if (v3 > 0x7FFFFFFE)
      LODWORD(v3) = 0x7FFFFFFF;
  }
  *(_DWORD *)(result + 28) = 2 * v3;
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::MemoryCache::destroyDecodedDataForAllImages(void)::$_0,void,WebCore::CachedResource &>::call(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7[2];

  if ((*(_BYTE *)(a2 + 556) & 0x1F) == 1)
  {
    if ((*(_WORD *)(a2 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(a2 + 720) & 0x10) != 0)
    {
      WebCore::CachedImage::brokenImage(1.0, (uint64_t)v7);
      v4 = (unsigned int *)v7[0];
      if (v7[0])
      {
        v2 = (WTF *)*((_QWORD *)v7[0] + 1);
        v7[0] = 0;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          WTF::fastFree((WTF *)v4, v3);
        }
      }
      else
      {
        v2 = 0;
      }
    }
    else
    {
      v2 = *(WTF **)(a2 + 688);
      if (v2)
      {
LABEL_4:
        ++*((_DWORD *)v2 + 2);
        (*(void (**)(WTF *, uint64_t))(*(_QWORD *)v2 + 240))(v2, 1);
        if (*((_DWORD *)v2 + 2) == 1)
          (*(void (**)(WTF *))(*(_QWORD *)v2 + 8))(v2);
        else
          --*((_DWORD *)v2 + 2);
        return;
      }
      {
        v2 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
      }
      else
      {
        WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v7);
        v2 = v7[0];
        WebCore::Image::nullImage(void)::nullImage = (uint64_t)v7[0];
      }
    }
    if (!v2)
      return;
    goto LABEL_4;
  }
}

uint64_t WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebCore::CachedResource,WTF::DefaultWeakPtrImpl>(WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::CachedResource&)#1},WTF::Vector<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  unsigned int *v13;

  result = WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a2);
  if (*(_QWORD *)a2)
  {
    v5 = *(unsigned int *)(*(_QWORD *)a2 - 12);
    if ((_DWORD)v5)
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = result;
    }
  }
  v6 = *(_QWORD **)(a2 + 8);
  if (v6)
  {
    while (1)
    {
      v7 = *(_QWORD *)(*v6 + 8);
      if (v7)
        break;
      v6 = (_QWORD *)v6[2];
      if (!v6)
        return result;
    }
LABEL_5:
    result = *(_QWORD *)(v7 + 8);
    if (result)
      goto LABEL_27;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v7;
    v13 = *(unsigned int **)(v7 + 8);
    *(_QWORD *)(v7 + 8) = result;
    if (!v13)
      goto LABEL_27;
    do
    {
      v10 = __ldaxr(v13);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v13));
    if (!v11)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
    result = *(_QWORD *)(v7 + 8);
    if (result)
    {
LABEL_27:
      do
        v8 = __ldaxr((unsigned int *)result);
      while (__stlxr(v8 + 1, (unsigned int *)result));
    }
    v9 = *(unsigned int *)(a1 + 12);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = result;
    *(_DWORD *)(a1 + 12) = v9 + 1;
    while (1)
    {
      v6 = (_QWORD *)v6[2];
      if (!v6)
        break;
      v7 = *(_QWORD *)(*v6 + 8);
      if (v7)
      {
        ++*(_DWORD *)(a2 + 24);
        goto LABEL_5;
      }
    }
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

char *WTF::Vector<std::unique_ptr<WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  result = WTF::Vector<std::unique_ptr<WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(char **)a1;
  v6 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

char *WTF::Vector<std::unique_ptr<WTF::WeakListHashSet<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  char *v14;
  void *v15;
  int v16;
  char *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *__src;
  char *__srca;

  v3 = *a1;
  if ((unint64_t)*a1 <= a3 && (unint64_t)&v3[8 * *((unsigned int *)a1 + 3)] > a3)
  {
    v4 = *((unsigned int *)a1 + 2);
    v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= v4)
    {
      v7 = *a1;
      return &v7[8 * ((uint64_t)(a3 - (_QWORD)v3) >> 3)];
    }
    v19 = *((unsigned int *)a1 + 3);
    v21 = a3;
    __srca = *a1;
    if (v6 < 0x21)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 32;
LABEL_32:
      memcpy(v17, __srca, 8 * v19);
      v7 = *a1;
      if (a1 + 2 == (char **)__srca)
      {
        a3 = v21;
        v3 = __srca;
      }
      else
      {
        a3 = v21;
        v3 = __srca;
        if (__srca)
        {
          if (v7 == __srca)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          v3 = __srca;
          WTF::fastFree((WTF *)__srca, v18);
          a3 = v21;
          v7 = *a1;
        }
      }
      return &v7[8 * ((uint64_t)(a3 - (_QWORD)v3) >> 3)];
    }
    if (!(v6 >> 29))
    {
      v16 = v6;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v6));
      *((_DWORD *)a1 + 2) = v16;
      *a1 = v17;
      goto LABEL_32;
    }
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x195F5FC30);
  }
  v8 = *((unsigned int *)a1 + 2);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= a2)
    v10 = a2;
  if (v10 > v8)
  {
    __src = *a1;
    v20 = a3;
    v12 = *((unsigned int *)a1 + 3);
    if (v10 < 0x21)
    {
      v14 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 32;
    }
    else
    {
      if (v10 >> 29)
        goto LABEL_38;
      v13 = v10;
      v14 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
      *((_DWORD *)a1 + 2) = v13;
      *a1 = v14;
    }
    memcpy(v14, __src, 8 * v12);
    if (a1 + 2 != (char **)__src && __src)
    {
      if (*a1 == __src)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)__src, v15);
    }
    return (char *)v20;
  }
  return (char *)a3;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::add@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::rehash(a1, 8u, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::computeHash<WebCore::SecurityOrigin>(*a2);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = v8 & v7;
    v12 = (uint64_t *)(v6 + 8 * (v8 & v7));
    v13 = *v12;
    if (*v12 == -1)
    {
      v9 = (uint64_t *)(v6 + 8 * v11);
      goto LABEL_11;
    }
    if (!v13)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*a1 - 16);
        v12 = v9;
      }
      result = WTF::GenericHashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>::assignToEmpty<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(v12, (WTF::StringImpl *)a2);
      v15 = *a1;
      if (*a1)
        v16 = *(_DWORD *)(v15 - 12) + 1;
      else
        v16 = 1;
      *(_DWORD *)(v15 - 12) = v16;
      v19 = *a1;
      if (*a1)
        v20 = *(_DWORD *)(v19 - 12);
      else
        v20 = 0;
      v21 = (*(_DWORD *)(v19 - 16) + v20);
      v22 = *(unsigned int *)(v19 - 4);
      if (v22 > 0x400)
      {
        if (v22 <= 2 * v21)
          goto LABEL_30;
      }
      else if (3 * v22 <= 4 * v21)
      {
        if (!(_DWORD)v22)
        {
          v23 = 8;
          goto LABEL_31;
        }
LABEL_30:
        v23 = (_DWORD)v22 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v22));
LABEL_31:
        result = WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::rehash(a1, v23, v12);
        v12 = result;
        v19 = *a1;
        if (*a1)
          v22 = *(unsigned int *)(v19 - 4);
        else
          v22 = 0;
      }
      v25 = v19 + 8 * v22;
      v24 = 1;
      goto LABEL_35;
    }
    if (*a2)
    {
      result = (uint64_t *)WebCore::SecurityOrigin::isSameSchemeHostPort(v13, *a2);
      if ((result & 1) != 0)
        break;
    }
LABEL_11:
    v8 = i + v11;
  }
  v17 = *a1;
  if (*a1)
    v18 = *(unsigned int *)(v17 - 4);
  else
    v18 = 0;
  v24 = 0;
  v25 = v17 + 8 * v18;
LABEL_35:
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v25;
  *(_BYTE *)(a3 + 16) = v24;
  return result;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t *result;
  char v29;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = WTF::computeHash<WebCore::SecurityOrigin>(v14);
          v18 = 0;
          do
          {
            v19 = v17 & v16;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v15 + 8 * v19));
          v20 = (uint64_t *)(v15 + 8 * v19);
          *v20 = 0;
          v21 = *v13;
          *v13 = 0;
          *v20 = v21;
          v22 = *v13;
          *v13 = 0;
          if (v22)
          {
            do
            {
              v23 = __ldaxr((unsigned int *)v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, (unsigned int *)v22));
            if (!v24)
            {
              atomic_store(1u, (unsigned int *)v22);
              v25 = *(WTF::StringImpl **)(v22 + 48);
              *(_QWORD *)(v22 + 48) = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v10);
                else
                  *(_DWORD *)v25 -= 2;
              }
              v26 = *(WTF::StringImpl **)(v22 + 40);
              *(_QWORD *)(v22 + 40) = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v10);
                else
                  *(_DWORD *)v26 -= 2;
              }
              v27 = *(unsigned int *)(v22 + 32);
              if ((_DWORD)v27 != -1)
                ((void (*)(char *, uint64_t))off_1E33F8F28[v27])(&v29, v22 + 8);
              *(_DWORD *)(v22 + 32) = -1;
              WTF::fastFree((WTF *)v22, v10);
            }
          }
          if (v13 == a3)
            v12 = v20;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MemoryCache::removeRequestFromSessionCaches(WebCore::ScriptExecutionContext &,WebCore::ResourceRequest const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E33F8FD0;
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MemoryCache::removeRequestFromSessionCaches(WebCore::ScriptExecutionContext &,WebCore::ResourceRequest const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33F8FD0;
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(a1 + 8), a2);
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::MemoryCache::removeRequestFromSessionCaches(WebCore::ScriptExecutionContext &,WebCore::ResourceRequest const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, WebCore::MemoryCache *this, const WebCore::ResourceRequest *a3)
{
  WebCore::MemoryCache::removeRequestFromSessionCaches(this, (WebCore::ScriptExecutionContext *)(a1 + 8), a3);
}

void WTF::Detail::CallableWrapper<WebCore::MemoryCache::evictResources(PAL::SessionID)::$_0,void,WebCore::CachedResource &>::call(uint64_t a1, WebCore::CachedResource *a2)
{
  WebCore::MemoryCache::remove(*(WebCore::MemoryCache **)(a1 + 8), a2);
}

uint64_t WebCore::fontBinaryParsingPolicy(const void *a1, CC_LONG a2, int a3)
{
  uint64_t v3;
  WTF *v6;
  WTF *v7;
  unint64_t v8;
  uint64_t v9;
  WebCore *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  WTF::StringImpl *v27;
  WTF *v28;
  unsigned int v29;
  WTF *v30;
  uint8_t buf[72];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = 1;
  switch(a3)
  {
    case 0:
      return v3;
    case 1:
      PAL::CryptoDigest::create(2, (uint64_t *)&v30);
      v6 = v30;
      PAL::CryptoDigest::addBytes((uint64_t)v30, a1, a2);
      PAL::CryptoDigest::computeHash((uint64_t)v6, (unsigned __int8 **)&v28);
      v7 = v28;
      if (v29 + 1115575925 < 0x427E5676)
        goto LABEL_8;
      v8 = (2863311531u * (unint64_t)(v29 + 2)) >> 32;
      v9 = (2 * (_DWORD)v8) & 0xFFFFFFFC;
      if (((v8 & 0x40000000) != 0) != __OFSUB__(v29 + 1115575925, 1115575926))
        goto LABEL_41;
      if (v29 > 0x2D)
      {
        WTF::tryFastCompactMalloc((WTF *)(v9 + 20));
        v12 = *(WTF::StringImpl **)buf;
        if (*(_QWORD *)buf)
        {
          **(_DWORD **)buf = 2;
          *((_DWORD *)v12 + 1) = v9;
          *((_QWORD *)v12 + 1) = (char *)v12 + 20;
          *((_DWORD *)v12 + 4) = 4;
          v10 = (WebCore *)WTF::base64Encode();
          if ((*((_BYTE *)v12 + 16) & 0x10) != 0)
          {
            v13 = *(_DWORD *)v12;
            *(_DWORD *)v12 += 2;
            v14 = v12;
          }
          else
          {
            v10 = (WebCore *)WTF::AtomStringImpl::addSlowCase(v12, v11);
            v14 = *(WTF::StringImpl **)buf;
            v13 = *(_DWORD *)v12 - 2;
          }
          v27 = v14;
          if (!v13)
          {
            v10 = (WebCore *)WTF::StringImpl::destroy(v12, v11);
            if (!v14)
              goto LABEL_41;
            goto LABEL_15;
          }
          *(_DWORD *)v12 = v13;
          if (v14)
            goto LABEL_15;
        }
LABEL_41:
        __break(0xC471u);
        JUMPOUT(0x195F603A4);
      }
LABEL_8:
      WTF::base64Encode();
      v10 = (WebCore *)WTF::AtomStringImpl::add();
      if (!v27)
        goto LABEL_41;
LABEL_15:
      if (v7)
        v10 = (WebCore *)WTF::fastFree(v7, v11);
      if (v6)
      {
        v15 = *(unsigned int **)v6;
        *(_QWORD *)v6 = 0;
        if (v15)
        {
          v16 = v15[4];
          if ((_DWORD)v16 != -1)
            ((void (*)(uint8_t *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v16])(buf, v15 + 2);
          v15[4] = -1;
          WTF::fastFree((WTF *)v15, v11);
        }
        v10 = (WebCore *)WTF::fastFree(v6, v11);
      }
      WebCore::trustedFontHashesInLockdownMode(v10, (uint64_t)v11);
      if (qword_1ECE83830)
      {
        v17 = dword_1ECE83838 - 1;
        v18 = *((_DWORD *)v27 + 4);
        v19 = (dword_1ECE83840 ^ (v18 >> 8)) & (dword_1ECE83838 - 1);
        v20 = *(WTF::StringImpl **)(qword_1ECE83830 + 8 * v19);
        if (v20)
        {
          v21 = v18 >> 8;
          v22 = -1;
          do
          {
            v23 = *((_DWORD *)v20 + 4);
            v24 = (WTF::StringImpl *)(v19 + dword_1ECE83838);
            if (++v22 > ((v24 - ((dword_1ECE83840 ^ (v23 >> 8)) & v17)) & v17))
              break;
            if (v20 == v27 && v23 >> 8 == v21)
            {
              v3 = 1;
              goto LABEL_33;
            }
            v19 = (v19 + 1) & v17;
            v20 = *(WTF::StringImpl **)(qword_1ECE83830 + 8 * v19);
          }
          while (v20);
        }
      }
      v25 = qword_1ECE7C1D0;
      v3 = 0;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C1D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "[Lockdown Mode] A font with a forbidden type has been blocked from being parsed by system font parser.", buf, 2u);
        v3 = 0;
      }
LABEL_33:
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v24);
        else
          *(_DWORD *)v27 -= 2;
      }
      return v3;
    case 2:
      return 2;
    default:
      return 0;
  }
}

WTF::StringImpl *WebCore::trustedFontHashesInLockdownMode(WebCore *this, uint64_t a2)
{
  WTF::StringImpl *result;
  _QWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[802];

  result = (WTF::StringImpl *)MEMORY[0x1E0C80A78](this, a2);
  v8[801] = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_208 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    v8[0] = v7[0];
    WTF::AtomStringImpl::add();
    v8[1] = v7[0];
    WTF::AtomStringImpl::add();
    v8[2] = v7[0];
    WTF::AtomStringImpl::add();
    v8[3] = v7[0];
    WTF::AtomStringImpl::add();
    v8[4] = v7[0];
    WTF::AtomStringImpl::add();
    v8[5] = v7[0];
    WTF::AtomStringImpl::add();
    v8[6] = v7[0];
    WTF::AtomStringImpl::add();
    v8[7] = v7[0];
    WTF::AtomStringImpl::add();
    v8[8] = v7[0];
    WTF::AtomStringImpl::add();
    v8[9] = v7[0];
    WTF::AtomStringImpl::add();
    v8[10] = v7[0];
    WTF::AtomStringImpl::add();
    v8[11] = v7[0];
    WTF::AtomStringImpl::add();
    v8[12] = v7[0];
    WTF::AtomStringImpl::add();
    v8[13] = v7[0];
    WTF::AtomStringImpl::add();
    v8[14] = v7[0];
    WTF::AtomStringImpl::add();
    v8[15] = v7[0];
    WTF::AtomStringImpl::add();
    v8[16] = v7[0];
    WTF::AtomStringImpl::add();
    v8[17] = v7[0];
    WTF::AtomStringImpl::add();
    v8[18] = v7[0];
    WTF::AtomStringImpl::add();
    v8[19] = v7[0];
    WTF::AtomStringImpl::add();
    v8[20] = v7[0];
    WTF::AtomStringImpl::add();
    v8[21] = v7[0];
    WTF::AtomStringImpl::add();
    v8[22] = v7[0];
    WTF::AtomStringImpl::add();
    v8[23] = v7[0];
    WTF::AtomStringImpl::add();
    v8[24] = v7[0];
    WTF::AtomStringImpl::add();
    v8[25] = v7[0];
    WTF::AtomStringImpl::add();
    v8[26] = v7[0];
    WTF::AtomStringImpl::add();
    v8[27] = v7[0];
    WTF::AtomStringImpl::add();
    v8[28] = v7[0];
    WTF::AtomStringImpl::add();
    v8[29] = v7[0];
    WTF::AtomStringImpl::add();
    v8[30] = v7[0];
    WTF::AtomStringImpl::add();
    v8[31] = v7[0];
    WTF::AtomStringImpl::add();
    v8[32] = v7[0];
    WTF::AtomStringImpl::add();
    v8[33] = v7[0];
    WTF::AtomStringImpl::add();
    v8[34] = v7[0];
    WTF::AtomStringImpl::add();
    v8[35] = v7[0];
    WTF::AtomStringImpl::add();
    v8[36] = v7[0];
    WTF::AtomStringImpl::add();
    v8[37] = v7[0];
    WTF::AtomStringImpl::add();
    v8[38] = v7[0];
    WTF::AtomStringImpl::add();
    v8[39] = v7[0];
    WTF::AtomStringImpl::add();
    v8[40] = v7[0];
    WTF::AtomStringImpl::add();
    v8[41] = v7[0];
    WTF::AtomStringImpl::add();
    v8[42] = v7[0];
    WTF::AtomStringImpl::add();
    v8[43] = v7[0];
    WTF::AtomStringImpl::add();
    v8[44] = v7[0];
    WTF::AtomStringImpl::add();
    v8[45] = v7[0];
    WTF::AtomStringImpl::add();
    v8[46] = v7[0];
    WTF::AtomStringImpl::add();
    v8[47] = v7[0];
    WTF::AtomStringImpl::add();
    v8[48] = v7[0];
    WTF::AtomStringImpl::add();
    v8[49] = v7[0];
    WTF::AtomStringImpl::add();
    v8[50] = v7[0];
    WTF::AtomStringImpl::add();
    v8[51] = v7[0];
    WTF::AtomStringImpl::add();
    v8[52] = v7[0];
    WTF::AtomStringImpl::add();
    v8[53] = v7[0];
    WTF::AtomStringImpl::add();
    v8[54] = v7[0];
    WTF::AtomStringImpl::add();
    v8[55] = v7[0];
    WTF::AtomStringImpl::add();
    v8[56] = v7[0];
    WTF::AtomStringImpl::add();
    v8[57] = v7[0];
    WTF::AtomStringImpl::add();
    v8[58] = v7[0];
    WTF::AtomStringImpl::add();
    v8[59] = v7[0];
    WTF::AtomStringImpl::add();
    v8[60] = v7[0];
    WTF::AtomStringImpl::add();
    v8[61] = v7[0];
    WTF::AtomStringImpl::add();
    v8[62] = v7[0];
    WTF::AtomStringImpl::add();
    v8[63] = v7[0];
    WTF::AtomStringImpl::add();
    v8[64] = v7[0];
    WTF::AtomStringImpl::add();
    v8[65] = v7[0];
    WTF::AtomStringImpl::add();
    v8[66] = v7[0];
    WTF::AtomStringImpl::add();
    v8[67] = v7[0];
    WTF::AtomStringImpl::add();
    v8[68] = v7[0];
    WTF::AtomStringImpl::add();
    v8[69] = v7[0];
    WTF::AtomStringImpl::add();
    v8[70] = v7[0];
    WTF::AtomStringImpl::add();
    v8[71] = v7[0];
    WTF::AtomStringImpl::add();
    v8[72] = v7[0];
    WTF::AtomStringImpl::add();
    v8[73] = v7[0];
    WTF::AtomStringImpl::add();
    v8[74] = v7[0];
    WTF::AtomStringImpl::add();
    v8[75] = v7[0];
    WTF::AtomStringImpl::add();
    v8[76] = v7[0];
    WTF::AtomStringImpl::add();
    v8[77] = v7[0];
    WTF::AtomStringImpl::add();
    v8[78] = v7[0];
    WTF::AtomStringImpl::add();
    v8[79] = v7[0];
    WTF::AtomStringImpl::add();
    v8[80] = v7[0];
    WTF::AtomStringImpl::add();
    v8[81] = v7[0];
    WTF::AtomStringImpl::add();
    v8[82] = v7[0];
    WTF::AtomStringImpl::add();
    v8[83] = v7[0];
    WTF::AtomStringImpl::add();
    v8[84] = v7[0];
    WTF::AtomStringImpl::add();
    v8[85] = v7[0];
    WTF::AtomStringImpl::add();
    v8[86] = v7[0];
    WTF::AtomStringImpl::add();
    v8[87] = v7[0];
    WTF::AtomStringImpl::add();
    v8[88] = v7[0];
    WTF::AtomStringImpl::add();
    v8[89] = v7[0];
    WTF::AtomStringImpl::add();
    v8[90] = v7[0];
    WTF::AtomStringImpl::add();
    v8[91] = v7[0];
    WTF::AtomStringImpl::add();
    v8[92] = v7[0];
    WTF::AtomStringImpl::add();
    v8[93] = v7[0];
    WTF::AtomStringImpl::add();
    v8[94] = v7[0];
    WTF::AtomStringImpl::add();
    v8[95] = v7[0];
    WTF::AtomStringImpl::add();
    v8[96] = v7[0];
    WTF::AtomStringImpl::add();
    v8[97] = v7[0];
    WTF::AtomStringImpl::add();
    v8[98] = v7[0];
    WTF::AtomStringImpl::add();
    v8[99] = v7[0];
    WTF::AtomStringImpl::add();
    v8[100] = v7[0];
    WTF::AtomStringImpl::add();
    v8[101] = v7[0];
    WTF::AtomStringImpl::add();
    v8[102] = v7[0];
    WTF::AtomStringImpl::add();
    v8[103] = v7[0];
    WTF::AtomStringImpl::add();
    v8[104] = v7[0];
    WTF::AtomStringImpl::add();
    v8[105] = v7[0];
    WTF::AtomStringImpl::add();
    v8[106] = v7[0];
    WTF::AtomStringImpl::add();
    v8[107] = v7[0];
    WTF::AtomStringImpl::add();
    v8[108] = v7[0];
    WTF::AtomStringImpl::add();
    v8[109] = v7[0];
    WTF::AtomStringImpl::add();
    v8[110] = v7[0];
    WTF::AtomStringImpl::add();
    v8[111] = v7[0];
    WTF::AtomStringImpl::add();
    v8[112] = v7[0];
    WTF::AtomStringImpl::add();
    v8[113] = v7[0];
    WTF::AtomStringImpl::add();
    v8[114] = v7[0];
    WTF::AtomStringImpl::add();
    v8[115] = v7[0];
    WTF::AtomStringImpl::add();
    v8[116] = v7[0];
    WTF::AtomStringImpl::add();
    v8[117] = v7[0];
    WTF::AtomStringImpl::add();
    v8[118] = v7[0];
    WTF::AtomStringImpl::add();
    v8[119] = v7[0];
    WTF::AtomStringImpl::add();
    v8[120] = v7[0];
    WTF::AtomStringImpl::add();
    v8[121] = v7[0];
    WTF::AtomStringImpl::add();
    v8[122] = v7[0];
    WTF::AtomStringImpl::add();
    v8[123] = v7[0];
    WTF::AtomStringImpl::add();
    v8[124] = v7[0];
    WTF::AtomStringImpl::add();
    v8[125] = v7[0];
    WTF::AtomStringImpl::add();
    v8[126] = v7[0];
    WTF::AtomStringImpl::add();
    v8[127] = v7[0];
    WTF::AtomStringImpl::add();
    v8[128] = v7[0];
    WTF::AtomStringImpl::add();
    v8[129] = v7[0];
    WTF::AtomStringImpl::add();
    v8[130] = v7[0];
    WTF::AtomStringImpl::add();
    v8[131] = v7[0];
    WTF::AtomStringImpl::add();
    v8[132] = v7[0];
    WTF::AtomStringImpl::add();
    v8[133] = v7[0];
    WTF::AtomStringImpl::add();
    v8[134] = v7[0];
    WTF::AtomStringImpl::add();
    v8[135] = v7[0];
    WTF::AtomStringImpl::add();
    v8[136] = v7[0];
    WTF::AtomStringImpl::add();
    v8[137] = v7[0];
    WTF::AtomStringImpl::add();
    v8[138] = v7[0];
    WTF::AtomStringImpl::add();
    v8[139] = v7[0];
    WTF::AtomStringImpl::add();
    v8[140] = v7[0];
    WTF::AtomStringImpl::add();
    v8[141] = v7[0];
    WTF::AtomStringImpl::add();
    v8[142] = v7[0];
    WTF::AtomStringImpl::add();
    v8[143] = v7[0];
    WTF::AtomStringImpl::add();
    v8[144] = v7[0];
    WTF::AtomStringImpl::add();
    v8[145] = v7[0];
    WTF::AtomStringImpl::add();
    v8[146] = v7[0];
    WTF::AtomStringImpl::add();
    v8[147] = v7[0];
    WTF::AtomStringImpl::add();
    v8[148] = v7[0];
    WTF::AtomStringImpl::add();
    v8[149] = v7[0];
    WTF::AtomStringImpl::add();
    v8[150] = v7[0];
    WTF::AtomStringImpl::add();
    v8[151] = v7[0];
    WTF::AtomStringImpl::add();
    v8[152] = v7[0];
    WTF::AtomStringImpl::add();
    v8[153] = v7[0];
    WTF::AtomStringImpl::add();
    v8[154] = v7[0];
    WTF::AtomStringImpl::add();
    v8[155] = v7[0];
    WTF::AtomStringImpl::add();
    v8[156] = v7[0];
    WTF::AtomStringImpl::add();
    v8[157] = v7[0];
    WTF::AtomStringImpl::add();
    v8[158] = v7[0];
    WTF::AtomStringImpl::add();
    v8[159] = v7[0];
    WTF::AtomStringImpl::add();
    v8[160] = v7[0];
    WTF::AtomStringImpl::add();
    v8[161] = v7[0];
    WTF::AtomStringImpl::add();
    v8[162] = v7[0];
    WTF::AtomStringImpl::add();
    v8[163] = v7[0];
    WTF::AtomStringImpl::add();
    v8[164] = v7[0];
    WTF::AtomStringImpl::add();
    v8[165] = v7[0];
    WTF::AtomStringImpl::add();
    v8[166] = v7[0];
    WTF::AtomStringImpl::add();
    v8[167] = v7[0];
    WTF::AtomStringImpl::add();
    v8[168] = v7[0];
    WTF::AtomStringImpl::add();
    v8[169] = v7[0];
    WTF::AtomStringImpl::add();
    v8[170] = v7[0];
    WTF::AtomStringImpl::add();
    v8[171] = v7[0];
    WTF::AtomStringImpl::add();
    v8[172] = v7[0];
    WTF::AtomStringImpl::add();
    v8[173] = v7[0];
    WTF::AtomStringImpl::add();
    v8[174] = v7[0];
    WTF::AtomStringImpl::add();
    v8[175] = v7[0];
    WTF::AtomStringImpl::add();
    v8[176] = v7[0];
    WTF::AtomStringImpl::add();
    v8[177] = v7[0];
    WTF::AtomStringImpl::add();
    v8[178] = v7[0];
    WTF::AtomStringImpl::add();
    v8[179] = v7[0];
    WTF::AtomStringImpl::add();
    v8[180] = v7[0];
    WTF::AtomStringImpl::add();
    v8[181] = v7[0];
    WTF::AtomStringImpl::add();
    v8[182] = v7[0];
    WTF::AtomStringImpl::add();
    v8[183] = v7[0];
    WTF::AtomStringImpl::add();
    v8[184] = v7[0];
    WTF::AtomStringImpl::add();
    v8[185] = v7[0];
    WTF::AtomStringImpl::add();
    v8[186] = v7[0];
    WTF::AtomStringImpl::add();
    v8[187] = v7[0];
    WTF::AtomStringImpl::add();
    v8[188] = v7[0];
    WTF::AtomStringImpl::add();
    v8[189] = v7[0];
    WTF::AtomStringImpl::add();
    v8[190] = v7[0];
    WTF::AtomStringImpl::add();
    v8[191] = v7[0];
    WTF::AtomStringImpl::add();
    v8[192] = v7[0];
    WTF::AtomStringImpl::add();
    v8[193] = v7[0];
    WTF::AtomStringImpl::add();
    v8[194] = v7[0];
    WTF::AtomStringImpl::add();
    v8[195] = v7[0];
    WTF::AtomStringImpl::add();
    v8[196] = v7[0];
    WTF::AtomStringImpl::add();
    v8[197] = v7[0];
    WTF::AtomStringImpl::add();
    v8[198] = v7[0];
    WTF::AtomStringImpl::add();
    v8[199] = v7[0];
    WTF::AtomStringImpl::add();
    v8[200] = v7[0];
    WTF::AtomStringImpl::add();
    v8[201] = v7[0];
    WTF::AtomStringImpl::add();
    v8[202] = v7[0];
    WTF::AtomStringImpl::add();
    v8[203] = v7[0];
    WTF::AtomStringImpl::add();
    v8[204] = v7[0];
    WTF::AtomStringImpl::add();
    v8[205] = v7[0];
    WTF::AtomStringImpl::add();
    v8[206] = v7[0];
    WTF::AtomStringImpl::add();
    v8[207] = v7[0];
    WTF::AtomStringImpl::add();
    v8[208] = v7[0];
    WTF::AtomStringImpl::add();
    v8[209] = v7[0];
    WTF::AtomStringImpl::add();
    v8[210] = v7[0];
    WTF::AtomStringImpl::add();
    v8[211] = v7[0];
    WTF::AtomStringImpl::add();
    v8[212] = v7[0];
    WTF::AtomStringImpl::add();
    v8[213] = v7[0];
    WTF::AtomStringImpl::add();
    v8[214] = v7[0];
    WTF::AtomStringImpl::add();
    v8[215] = v7[0];
    WTF::AtomStringImpl::add();
    v8[216] = v7[0];
    WTF::AtomStringImpl::add();
    v8[217] = v7[0];
    WTF::AtomStringImpl::add();
    v8[218] = v7[0];
    WTF::AtomStringImpl::add();
    v8[219] = v7[0];
    WTF::AtomStringImpl::add();
    v8[220] = v7[0];
    WTF::AtomStringImpl::add();
    v8[221] = v7[0];
    WTF::AtomStringImpl::add();
    v8[222] = v7[0];
    WTF::AtomStringImpl::add();
    v8[223] = v7[0];
    WTF::AtomStringImpl::add();
    v8[224] = v7[0];
    WTF::AtomStringImpl::add();
    v8[225] = v7[0];
    WTF::AtomStringImpl::add();
    v8[226] = v7[0];
    WTF::AtomStringImpl::add();
    v8[227] = v7[0];
    WTF::AtomStringImpl::add();
    v8[228] = v7[0];
    WTF::AtomStringImpl::add();
    v8[229] = v7[0];
    WTF::AtomStringImpl::add();
    v8[230] = v7[0];
    WTF::AtomStringImpl::add();
    v8[231] = v7[0];
    WTF::AtomStringImpl::add();
    v8[232] = v7[0];
    WTF::AtomStringImpl::add();
    v8[233] = v7[0];
    WTF::AtomStringImpl::add();
    v8[234] = v7[0];
    WTF::AtomStringImpl::add();
    v8[235] = v7[0];
    WTF::AtomStringImpl::add();
    v8[236] = v7[0];
    WTF::AtomStringImpl::add();
    v8[237] = v7[0];
    WTF::AtomStringImpl::add();
    v8[238] = v7[0];
    WTF::AtomStringImpl::add();
    v8[239] = v7[0];
    WTF::AtomStringImpl::add();
    v8[240] = v7[0];
    WTF::AtomStringImpl::add();
    v8[241] = v7[0];
    WTF::AtomStringImpl::add();
    v8[242] = v7[0];
    WTF::AtomStringImpl::add();
    v8[243] = v7[0];
    WTF::AtomStringImpl::add();
    v8[244] = v7[0];
    WTF::AtomStringImpl::add();
    v8[245] = v7[0];
    WTF::AtomStringImpl::add();
    v8[246] = v7[0];
    WTF::AtomStringImpl::add();
    v8[247] = v7[0];
    WTF::AtomStringImpl::add();
    v8[248] = v7[0];
    WTF::AtomStringImpl::add();
    v8[249] = v7[0];
    WTF::AtomStringImpl::add();
    v8[250] = v7[0];
    WTF::AtomStringImpl::add();
    v8[251] = v7[0];
    WTF::AtomStringImpl::add();
    v8[252] = v7[0];
    WTF::AtomStringImpl::add();
    v8[253] = v7[0];
    WTF::AtomStringImpl::add();
    v8[254] = v7[0];
    WTF::AtomStringImpl::add();
    v8[255] = v7[0];
    WTF::AtomStringImpl::add();
    v8[256] = v7[0];
    WTF::AtomStringImpl::add();
    v8[257] = v7[0];
    WTF::AtomStringImpl::add();
    v8[258] = v7[0];
    WTF::AtomStringImpl::add();
    v8[259] = v7[0];
    WTF::AtomStringImpl::add();
    v8[260] = v7[0];
    WTF::AtomStringImpl::add();
    v8[261] = v7[0];
    WTF::AtomStringImpl::add();
    v8[262] = v7[0];
    WTF::AtomStringImpl::add();
    v8[263] = v7[0];
    WTF::AtomStringImpl::add();
    v8[264] = v7[0];
    WTF::AtomStringImpl::add();
    v8[265] = v7[0];
    WTF::AtomStringImpl::add();
    v8[266] = v7[0];
    WTF::AtomStringImpl::add();
    v8[267] = v7[0];
    WTF::AtomStringImpl::add();
    v8[268] = v7[0];
    WTF::AtomStringImpl::add();
    v8[269] = v7[0];
    WTF::AtomStringImpl::add();
    v8[270] = v7[0];
    WTF::AtomStringImpl::add();
    v8[271] = v7[0];
    WTF::AtomStringImpl::add();
    v8[272] = v7[0];
    WTF::AtomStringImpl::add();
    v8[273] = v7[0];
    WTF::AtomStringImpl::add();
    v8[274] = v7[0];
    WTF::AtomStringImpl::add();
    v8[275] = v7[0];
    WTF::AtomStringImpl::add();
    v8[276] = v7[0];
    WTF::AtomStringImpl::add();
    v8[277] = v7[0];
    WTF::AtomStringImpl::add();
    v8[278] = v7[0];
    WTF::AtomStringImpl::add();
    v8[279] = v7[0];
    WTF::AtomStringImpl::add();
    v8[280] = v7[0];
    WTF::AtomStringImpl::add();
    v8[281] = v7[0];
    WTF::AtomStringImpl::add();
    v8[282] = v7[0];
    WTF::AtomStringImpl::add();
    v8[283] = v7[0];
    WTF::AtomStringImpl::add();
    v8[284] = v7[0];
    WTF::AtomStringImpl::add();
    v8[285] = v7[0];
    WTF::AtomStringImpl::add();
    v8[286] = v7[0];
    WTF::AtomStringImpl::add();
    v8[287] = v7[0];
    WTF::AtomStringImpl::add();
    v8[288] = v7[0];
    WTF::AtomStringImpl::add();
    v8[289] = v7[0];
    WTF::AtomStringImpl::add();
    v8[290] = v7[0];
    WTF::AtomStringImpl::add();
    v8[291] = v7[0];
    WTF::AtomStringImpl::add();
    v8[292] = v7[0];
    WTF::AtomStringImpl::add();
    v8[293] = v7[0];
    WTF::AtomStringImpl::add();
    v8[294] = v7[0];
    WTF::AtomStringImpl::add();
    v8[295] = v7[0];
    WTF::AtomStringImpl::add();
    v8[296] = v7[0];
    WTF::AtomStringImpl::add();
    v8[297] = v7[0];
    WTF::AtomStringImpl::add();
    v8[298] = v7[0];
    WTF::AtomStringImpl::add();
    v8[299] = v7[0];
    WTF::AtomStringImpl::add();
    v8[300] = v7[0];
    WTF::AtomStringImpl::add();
    v8[301] = v7[0];
    WTF::AtomStringImpl::add();
    v8[302] = v7[0];
    WTF::AtomStringImpl::add();
    v8[303] = v7[0];
    WTF::AtomStringImpl::add();
    v8[304] = v7[0];
    WTF::AtomStringImpl::add();
    v8[305] = v7[0];
    WTF::AtomStringImpl::add();
    v8[306] = v7[0];
    WTF::AtomStringImpl::add();
    v8[307] = v7[0];
    WTF::AtomStringImpl::add();
    v8[308] = v7[0];
    WTF::AtomStringImpl::add();
    v8[309] = v7[0];
    WTF::AtomStringImpl::add();
    v8[310] = v7[0];
    WTF::AtomStringImpl::add();
    v8[311] = v7[0];
    WTF::AtomStringImpl::add();
    v8[312] = v7[0];
    WTF::AtomStringImpl::add();
    v8[313] = v7[0];
    WTF::AtomStringImpl::add();
    v8[314] = v7[0];
    WTF::AtomStringImpl::add();
    v8[315] = v7[0];
    WTF::AtomStringImpl::add();
    v8[316] = v7[0];
    WTF::AtomStringImpl::add();
    v8[317] = v7[0];
    WTF::AtomStringImpl::add();
    v8[318] = v7[0];
    WTF::AtomStringImpl::add();
    v8[319] = v7[0];
    WTF::AtomStringImpl::add();
    v8[320] = v7[0];
    WTF::AtomStringImpl::add();
    v8[321] = v7[0];
    WTF::AtomStringImpl::add();
    v8[322] = v7[0];
    WTF::AtomStringImpl::add();
    v8[323] = v7[0];
    WTF::AtomStringImpl::add();
    v8[324] = v7[0];
    WTF::AtomStringImpl::add();
    v8[325] = v7[0];
    WTF::AtomStringImpl::add();
    v8[326] = v7[0];
    WTF::AtomStringImpl::add();
    v8[327] = v7[0];
    WTF::AtomStringImpl::add();
    v8[328] = v7[0];
    WTF::AtomStringImpl::add();
    v8[329] = v7[0];
    WTF::AtomStringImpl::add();
    v8[330] = v7[0];
    WTF::AtomStringImpl::add();
    v8[331] = v7[0];
    WTF::AtomStringImpl::add();
    v8[332] = v7[0];
    WTF::AtomStringImpl::add();
    v8[333] = v7[0];
    WTF::AtomStringImpl::add();
    v8[334] = v7[0];
    WTF::AtomStringImpl::add();
    v8[335] = v7[0];
    WTF::AtomStringImpl::add();
    v8[336] = v7[0];
    WTF::AtomStringImpl::add();
    v8[337] = v7[0];
    WTF::AtomStringImpl::add();
    v8[338] = v7[0];
    WTF::AtomStringImpl::add();
    v8[339] = v7[0];
    WTF::AtomStringImpl::add();
    v8[340] = v7[0];
    WTF::AtomStringImpl::add();
    v8[341] = v7[0];
    WTF::AtomStringImpl::add();
    v8[342] = v7[0];
    WTF::AtomStringImpl::add();
    v8[343] = v7[0];
    WTF::AtomStringImpl::add();
    v8[344] = v7[0];
    WTF::AtomStringImpl::add();
    v8[345] = v7[0];
    WTF::AtomStringImpl::add();
    v8[346] = v7[0];
    WTF::AtomStringImpl::add();
    v8[347] = v7[0];
    WTF::AtomStringImpl::add();
    v8[348] = v7[0];
    WTF::AtomStringImpl::add();
    v8[349] = v7[0];
    WTF::AtomStringImpl::add();
    v8[350] = v7[0];
    WTF::AtomStringImpl::add();
    v8[351] = v7[0];
    WTF::AtomStringImpl::add();
    v8[352] = v7[0];
    WTF::AtomStringImpl::add();
    v8[353] = v7[0];
    WTF::AtomStringImpl::add();
    v8[354] = v7[0];
    WTF::AtomStringImpl::add();
    v8[355] = v7[0];
    WTF::AtomStringImpl::add();
    v8[356] = v7[0];
    WTF::AtomStringImpl::add();
    v8[357] = v7[0];
    WTF::AtomStringImpl::add();
    v8[358] = v7[0];
    WTF::AtomStringImpl::add();
    v8[359] = v7[0];
    WTF::AtomStringImpl::add();
    v8[360] = v7[0];
    WTF::AtomStringImpl::add();
    v8[361] = v7[0];
    WTF::AtomStringImpl::add();
    v8[362] = v7[0];
    WTF::AtomStringImpl::add();
    v8[363] = v7[0];
    WTF::AtomStringImpl::add();
    v8[364] = v7[0];
    WTF::AtomStringImpl::add();
    v8[365] = v7[0];
    WTF::AtomStringImpl::add();
    v8[366] = v7[0];
    WTF::AtomStringImpl::add();
    v8[367] = v7[0];
    WTF::AtomStringImpl::add();
    v8[368] = v7[0];
    WTF::AtomStringImpl::add();
    v8[369] = v7[0];
    WTF::AtomStringImpl::add();
    v8[370] = v7[0];
    WTF::AtomStringImpl::add();
    v8[371] = v7[0];
    WTF::AtomStringImpl::add();
    v8[372] = v7[0];
    WTF::AtomStringImpl::add();
    v8[373] = v7[0];
    WTF::AtomStringImpl::add();
    v8[374] = v7[0];
    WTF::AtomStringImpl::add();
    v8[375] = v7[0];
    WTF::AtomStringImpl::add();
    v8[376] = v7[0];
    WTF::AtomStringImpl::add();
    v8[377] = v7[0];
    WTF::AtomStringImpl::add();
    v8[378] = v7[0];
    WTF::AtomStringImpl::add();
    v8[379] = v7[0];
    WTF::AtomStringImpl::add();
    v8[380] = v7[0];
    WTF::AtomStringImpl::add();
    v8[381] = v7[0];
    WTF::AtomStringImpl::add();
    v8[382] = v7[0];
    WTF::AtomStringImpl::add();
    v8[383] = v7[0];
    WTF::AtomStringImpl::add();
    v8[384] = v7[0];
    WTF::AtomStringImpl::add();
    v8[385] = v7[0];
    WTF::AtomStringImpl::add();
    v8[386] = v7[0];
    WTF::AtomStringImpl::add();
    v8[387] = v7[0];
    WTF::AtomStringImpl::add();
    v8[388] = v7[0];
    WTF::AtomStringImpl::add();
    v8[389] = v7[0];
    WTF::AtomStringImpl::add();
    v8[390] = v7[0];
    WTF::AtomStringImpl::add();
    v8[391] = v7[0];
    WTF::AtomStringImpl::add();
    v8[392] = v7[0];
    WTF::AtomStringImpl::add();
    v8[393] = v7[0];
    WTF::AtomStringImpl::add();
    v8[394] = v7[0];
    WTF::AtomStringImpl::add();
    v8[395] = v7[0];
    WTF::AtomStringImpl::add();
    v8[396] = v7[0];
    WTF::AtomStringImpl::add();
    v8[397] = v7[0];
    WTF::AtomStringImpl::add();
    v8[398] = v7[0];
    WTF::AtomStringImpl::add();
    v8[399] = v7[0];
    WTF::AtomStringImpl::add();
    v8[400] = v7[0];
    WTF::AtomStringImpl::add();
    v8[401] = v7[0];
    WTF::AtomStringImpl::add();
    v8[402] = v7[0];
    WTF::AtomStringImpl::add();
    v8[403] = v7[0];
    WTF::AtomStringImpl::add();
    v8[404] = v7[0];
    WTF::AtomStringImpl::add();
    v8[405] = v7[0];
    WTF::AtomStringImpl::add();
    v8[406] = v7[0];
    WTF::AtomStringImpl::add();
    v8[407] = v7[0];
    WTF::AtomStringImpl::add();
    v8[408] = v7[0];
    WTF::AtomStringImpl::add();
    v8[409] = v7[0];
    WTF::AtomStringImpl::add();
    v8[410] = v7[0];
    WTF::AtomStringImpl::add();
    v8[411] = v7[0];
    WTF::AtomStringImpl::add();
    v8[412] = v7[0];
    WTF::AtomStringImpl::add();
    v8[413] = v7[0];
    WTF::AtomStringImpl::add();
    v8[414] = v7[0];
    WTF::AtomStringImpl::add();
    v8[415] = v7[0];
    WTF::AtomStringImpl::add();
    v8[416] = v7[0];
    WTF::AtomStringImpl::add();
    v8[417] = v7[0];
    WTF::AtomStringImpl::add();
    v8[418] = v7[0];
    WTF::AtomStringImpl::add();
    v8[419] = v7[0];
    WTF::AtomStringImpl::add();
    v8[420] = v7[0];
    WTF::AtomStringImpl::add();
    v8[421] = v7[0];
    WTF::AtomStringImpl::add();
    v8[422] = v7[0];
    WTF::AtomStringImpl::add();
    v8[423] = v7[0];
    WTF::AtomStringImpl::add();
    v8[424] = v7[0];
    WTF::AtomStringImpl::add();
    v8[425] = v7[0];
    WTF::AtomStringImpl::add();
    v8[426] = v7[0];
    WTF::AtomStringImpl::add();
    v8[427] = v7[0];
    WTF::AtomStringImpl::add();
    v8[428] = v7[0];
    WTF::AtomStringImpl::add();
    v8[429] = v7[0];
    WTF::AtomStringImpl::add();
    v8[430] = v7[0];
    WTF::AtomStringImpl::add();
    v8[431] = v7[0];
    WTF::AtomStringImpl::add();
    v8[432] = v7[0];
    WTF::AtomStringImpl::add();
    v8[433] = v7[0];
    WTF::AtomStringImpl::add();
    v8[434] = v7[0];
    WTF::AtomStringImpl::add();
    v8[435] = v7[0];
    WTF::AtomStringImpl::add();
    v8[436] = v7[0];
    WTF::AtomStringImpl::add();
    v8[437] = v7[0];
    WTF::AtomStringImpl::add();
    v8[438] = v7[0];
    WTF::AtomStringImpl::add();
    v8[439] = v7[0];
    WTF::AtomStringImpl::add();
    v8[440] = v7[0];
    WTF::AtomStringImpl::add();
    v8[441] = v7[0];
    WTF::AtomStringImpl::add();
    v8[442] = v7[0];
    WTF::AtomStringImpl::add();
    v8[443] = v7[0];
    WTF::AtomStringImpl::add();
    v8[444] = v7[0];
    WTF::AtomStringImpl::add();
    v8[445] = v7[0];
    WTF::AtomStringImpl::add();
    v8[446] = v7[0];
    WTF::AtomStringImpl::add();
    v8[447] = v7[0];
    WTF::AtomStringImpl::add();
    v8[448] = v7[0];
    WTF::AtomStringImpl::add();
    v8[449] = v7[0];
    WTF::AtomStringImpl::add();
    v8[450] = v7[0];
    WTF::AtomStringImpl::add();
    v8[451] = v7[0];
    WTF::AtomStringImpl::add();
    v8[452] = v7[0];
    WTF::AtomStringImpl::add();
    v8[453] = v7[0];
    WTF::AtomStringImpl::add();
    v8[454] = v7[0];
    WTF::AtomStringImpl::add();
    v8[455] = v7[0];
    WTF::AtomStringImpl::add();
    v8[456] = v7[0];
    WTF::AtomStringImpl::add();
    v8[457] = v7[0];
    WTF::AtomStringImpl::add();
    v8[458] = v7[0];
    WTF::AtomStringImpl::add();
    v8[459] = v7[0];
    WTF::AtomStringImpl::add();
    v8[460] = v7[0];
    WTF::AtomStringImpl::add();
    v8[461] = v7[0];
    WTF::AtomStringImpl::add();
    v8[462] = v7[0];
    WTF::AtomStringImpl::add();
    v8[463] = v7[0];
    WTF::AtomStringImpl::add();
    v8[464] = v7[0];
    WTF::AtomStringImpl::add();
    v8[465] = v7[0];
    WTF::AtomStringImpl::add();
    v8[466] = v7[0];
    WTF::AtomStringImpl::add();
    v8[467] = v7[0];
    WTF::AtomStringImpl::add();
    v8[468] = v7[0];
    WTF::AtomStringImpl::add();
    v8[469] = v7[0];
    WTF::AtomStringImpl::add();
    v8[470] = v7[0];
    WTF::AtomStringImpl::add();
    v8[471] = v7[0];
    WTF::AtomStringImpl::add();
    v8[472] = v7[0];
    WTF::AtomStringImpl::add();
    v8[473] = v7[0];
    WTF::AtomStringImpl::add();
    v8[474] = v7[0];
    WTF::AtomStringImpl::add();
    v8[475] = v7[0];
    WTF::AtomStringImpl::add();
    v8[476] = v7[0];
    WTF::AtomStringImpl::add();
    v8[477] = v7[0];
    WTF::AtomStringImpl::add();
    v8[478] = v7[0];
    WTF::AtomStringImpl::add();
    v8[479] = v7[0];
    WTF::AtomStringImpl::add();
    v8[480] = v7[0];
    WTF::AtomStringImpl::add();
    v8[481] = v7[0];
    WTF::AtomStringImpl::add();
    v8[482] = v7[0];
    WTF::AtomStringImpl::add();
    v8[483] = v7[0];
    WTF::AtomStringImpl::add();
    v8[484] = v7[0];
    WTF::AtomStringImpl::add();
    v8[485] = v7[0];
    WTF::AtomStringImpl::add();
    v8[486] = v7[0];
    WTF::AtomStringImpl::add();
    v8[487] = v7[0];
    WTF::AtomStringImpl::add();
    v8[488] = v7[0];
    WTF::AtomStringImpl::add();
    v8[489] = v7[0];
    WTF::AtomStringImpl::add();
    v8[490] = v7[0];
    WTF::AtomStringImpl::add();
    v8[491] = v7[0];
    WTF::AtomStringImpl::add();
    v8[492] = v7[0];
    WTF::AtomStringImpl::add();
    v8[493] = v7[0];
    WTF::AtomStringImpl::add();
    v8[494] = v7[0];
    WTF::AtomStringImpl::add();
    v8[495] = v7[0];
    WTF::AtomStringImpl::add();
    v8[496] = v7[0];
    WTF::AtomStringImpl::add();
    v8[497] = v7[0];
    WTF::AtomStringImpl::add();
    v8[498] = v7[0];
    WTF::AtomStringImpl::add();
    v8[499] = v7[0];
    WTF::AtomStringImpl::add();
    v8[500] = v7[0];
    WTF::AtomStringImpl::add();
    v8[501] = v7[0];
    WTF::AtomStringImpl::add();
    v8[502] = v7[0];
    WTF::AtomStringImpl::add();
    v8[503] = v7[0];
    WTF::AtomStringImpl::add();
    v8[504] = v7[0];
    WTF::AtomStringImpl::add();
    v8[505] = v7[0];
    WTF::AtomStringImpl::add();
    v8[506] = v7[0];
    WTF::AtomStringImpl::add();
    v8[507] = v7[0];
    WTF::AtomStringImpl::add();
    v8[508] = v7[0];
    WTF::AtomStringImpl::add();
    v8[509] = v7[0];
    WTF::AtomStringImpl::add();
    v8[510] = v7[0];
    WTF::AtomStringImpl::add();
    v8[511] = v7[0];
    WTF::AtomStringImpl::add();
    v8[512] = v7[0];
    WTF::AtomStringImpl::add();
    v8[513] = v7[0];
    WTF::AtomStringImpl::add();
    v8[514] = v7[0];
    WTF::AtomStringImpl::add();
    v8[515] = v7[0];
    WTF::AtomStringImpl::add();
    v8[516] = v7[0];
    WTF::AtomStringImpl::add();
    v8[517] = v7[0];
    WTF::AtomStringImpl::add();
    v8[518] = v7[0];
    WTF::AtomStringImpl::add();
    v8[519] = v7[0];
    WTF::AtomStringImpl::add();
    v8[520] = v7[0];
    WTF::AtomStringImpl::add();
    v8[521] = v7[0];
    WTF::AtomStringImpl::add();
    v8[522] = v7[0];
    WTF::AtomStringImpl::add();
    v8[523] = v7[0];
    WTF::AtomStringImpl::add();
    v8[524] = v7[0];
    WTF::AtomStringImpl::add();
    v8[525] = v7[0];
    WTF::AtomStringImpl::add();
    v8[526] = v7[0];
    WTF::AtomStringImpl::add();
    v8[527] = v7[0];
    WTF::AtomStringImpl::add();
    v8[528] = v7[0];
    WTF::AtomStringImpl::add();
    v8[529] = v7[0];
    WTF::AtomStringImpl::add();
    v8[530] = v7[0];
    WTF::AtomStringImpl::add();
    v8[531] = v7[0];
    WTF::AtomStringImpl::add();
    v8[532] = v7[0];
    WTF::AtomStringImpl::add();
    v8[533] = v7[0];
    WTF::AtomStringImpl::add();
    v8[534] = v7[0];
    WTF::AtomStringImpl::add();
    v8[535] = v7[0];
    WTF::AtomStringImpl::add();
    v8[536] = v7[0];
    WTF::AtomStringImpl::add();
    v8[537] = v7[0];
    WTF::AtomStringImpl::add();
    v8[538] = v7[0];
    WTF::AtomStringImpl::add();
    v8[539] = v7[0];
    WTF::AtomStringImpl::add();
    v8[540] = v7[0];
    WTF::AtomStringImpl::add();
    v8[541] = v7[0];
    WTF::AtomStringImpl::add();
    v8[542] = v7[0];
    WTF::AtomStringImpl::add();
    v8[543] = v7[0];
    WTF::AtomStringImpl::add();
    v8[544] = v7[0];
    WTF::AtomStringImpl::add();
    v8[545] = v7[0];
    WTF::AtomStringImpl::add();
    v8[546] = v7[0];
    WTF::AtomStringImpl::add();
    v8[547] = v7[0];
    WTF::AtomStringImpl::add();
    v8[548] = v7[0];
    WTF::AtomStringImpl::add();
    v8[549] = v7[0];
    WTF::AtomStringImpl::add();
    v8[550] = v7[0];
    WTF::AtomStringImpl::add();
    v8[551] = v7[0];
    WTF::AtomStringImpl::add();
    v8[552] = v7[0];
    WTF::AtomStringImpl::add();
    v8[553] = v7[0];
    WTF::AtomStringImpl::add();
    v8[554] = v7[0];
    WTF::AtomStringImpl::add();
    v8[555] = v7[0];
    WTF::AtomStringImpl::add();
    v8[556] = v7[0];
    WTF::AtomStringImpl::add();
    v8[557] = v7[0];
    WTF::AtomStringImpl::add();
    v8[558] = v7[0];
    WTF::AtomStringImpl::add();
    v8[559] = v7[0];
    WTF::AtomStringImpl::add();
    v8[560] = v7[0];
    WTF::AtomStringImpl::add();
    v8[561] = v7[0];
    WTF::AtomStringImpl::add();
    v8[562] = v7[0];
    WTF::AtomStringImpl::add();
    v8[563] = v7[0];
    WTF::AtomStringImpl::add();
    v8[564] = v7[0];
    WTF::AtomStringImpl::add();
    v8[565] = v7[0];
    WTF::AtomStringImpl::add();
    v8[566] = v7[0];
    WTF::AtomStringImpl::add();
    v8[567] = v7[0];
    WTF::AtomStringImpl::add();
    v8[568] = v7[0];
    WTF::AtomStringImpl::add();
    v8[569] = v7[0];
    WTF::AtomStringImpl::add();
    v8[570] = v7[0];
    WTF::AtomStringImpl::add();
    v8[571] = v7[0];
    WTF::AtomStringImpl::add();
    v8[572] = v7[0];
    WTF::AtomStringImpl::add();
    v8[573] = v7[0];
    WTF::AtomStringImpl::add();
    v8[574] = v7[0];
    WTF::AtomStringImpl::add();
    v8[575] = v7[0];
    WTF::AtomStringImpl::add();
    v8[576] = v7[0];
    WTF::AtomStringImpl::add();
    v8[577] = v7[0];
    WTF::AtomStringImpl::add();
    v8[578] = v7[0];
    WTF::AtomStringImpl::add();
    v8[579] = v7[0];
    WTF::AtomStringImpl::add();
    v8[580] = v7[0];
    WTF::AtomStringImpl::add();
    v8[581] = v7[0];
    WTF::AtomStringImpl::add();
    v8[582] = v7[0];
    WTF::AtomStringImpl::add();
    v8[583] = v7[0];
    WTF::AtomStringImpl::add();
    v8[584] = v7[0];
    WTF::AtomStringImpl::add();
    v8[585] = v7[0];
    WTF::AtomStringImpl::add();
    v8[586] = v7[0];
    WTF::AtomStringImpl::add();
    v8[587] = v7[0];
    WTF::AtomStringImpl::add();
    v8[588] = v7[0];
    WTF::AtomStringImpl::add();
    v8[589] = v7[0];
    WTF::AtomStringImpl::add();
    v8[590] = v7[0];
    WTF::AtomStringImpl::add();
    v8[591] = v7[0];
    WTF::AtomStringImpl::add();
    v8[592] = v7[0];
    WTF::AtomStringImpl::add();
    v8[593] = v7[0];
    WTF::AtomStringImpl::add();
    v8[594] = v7[0];
    WTF::AtomStringImpl::add();
    v8[595] = v7[0];
    WTF::AtomStringImpl::add();
    v8[596] = v7[0];
    WTF::AtomStringImpl::add();
    v8[597] = v7[0];
    WTF::AtomStringImpl::add();
    v8[598] = v7[0];
    WTF::AtomStringImpl::add();
    v8[599] = v7[0];
    WTF::AtomStringImpl::add();
    v8[600] = v7[0];
    WTF::AtomStringImpl::add();
    v8[601] = v7[0];
    WTF::AtomStringImpl::add();
    v8[602] = v7[0];
    WTF::AtomStringImpl::add();
    v8[603] = v7[0];
    WTF::AtomStringImpl::add();
    v8[604] = v7[0];
    WTF::AtomStringImpl::add();
    v8[605] = v7[0];
    WTF::AtomStringImpl::add();
    v8[606] = v7[0];
    WTF::AtomStringImpl::add();
    v8[607] = v7[0];
    WTF::AtomStringImpl::add();
    v8[608] = v7[0];
    WTF::AtomStringImpl::add();
    v8[609] = v7[0];
    WTF::AtomStringImpl::add();
    v8[610] = v7[0];
    WTF::AtomStringImpl::add();
    v8[611] = v7[0];
    WTF::AtomStringImpl::add();
    v8[612] = v7[0];
    WTF::AtomStringImpl::add();
    v8[613] = v7[0];
    WTF::AtomStringImpl::add();
    v8[614] = v7[0];
    WTF::AtomStringImpl::add();
    v8[615] = v7[0];
    WTF::AtomStringImpl::add();
    v8[616] = v7[0];
    WTF::AtomStringImpl::add();
    v8[617] = v7[0];
    WTF::AtomStringImpl::add();
    v8[618] = v7[0];
    WTF::AtomStringImpl::add();
    v8[619] = v7[0];
    WTF::AtomStringImpl::add();
    v8[620] = v7[0];
    WTF::AtomStringImpl::add();
    v8[621] = v7[0];
    WTF::AtomStringImpl::add();
    v8[622] = v7[0];
    WTF::AtomStringImpl::add();
    v8[623] = v7[0];
    WTF::AtomStringImpl::add();
    v8[624] = v7[0];
    WTF::AtomStringImpl::add();
    v8[625] = v7[0];
    WTF::AtomStringImpl::add();
    v8[626] = v7[0];
    WTF::AtomStringImpl::add();
    v8[627] = v7[0];
    WTF::AtomStringImpl::add();
    v8[628] = v7[0];
    WTF::AtomStringImpl::add();
    v8[629] = v7[0];
    WTF::AtomStringImpl::add();
    v8[630] = v7[0];
    WTF::AtomStringImpl::add();
    v8[631] = v7[0];
    WTF::AtomStringImpl::add();
    v8[632] = v7[0];
    WTF::AtomStringImpl::add();
    v8[633] = v7[0];
    WTF::AtomStringImpl::add();
    v8[634] = v7[0];
    WTF::AtomStringImpl::add();
    v8[635] = v7[0];
    WTF::AtomStringImpl::add();
    v8[636] = v7[0];
    WTF::AtomStringImpl::add();
    v8[637] = v7[0];
    WTF::AtomStringImpl::add();
    v8[638] = v7[0];
    WTF::AtomStringImpl::add();
    v8[639] = v7[0];
    WTF::AtomStringImpl::add();
    v8[640] = v7[0];
    WTF::AtomStringImpl::add();
    v8[641] = v7[0];
    WTF::AtomStringImpl::add();
    v8[642] = v7[0];
    WTF::AtomStringImpl::add();
    v8[643] = v7[0];
    WTF::AtomStringImpl::add();
    v8[644] = v7[0];
    WTF::AtomStringImpl::add();
    v8[645] = v7[0];
    WTF::AtomStringImpl::add();
    v8[646] = v7[0];
    WTF::AtomStringImpl::add();
    v8[647] = v7[0];
    WTF::AtomStringImpl::add();
    v8[648] = v7[0];
    WTF::AtomStringImpl::add();
    v8[649] = v7[0];
    WTF::AtomStringImpl::add();
    v8[650] = v7[0];
    WTF::AtomStringImpl::add();
    v8[651] = v7[0];
    WTF::AtomStringImpl::add();
    v8[652] = v7[0];
    WTF::AtomStringImpl::add();
    v8[653] = v7[0];
    WTF::AtomStringImpl::add();
    v8[654] = v7[0];
    WTF::AtomStringImpl::add();
    v8[655] = v7[0];
    WTF::AtomStringImpl::add();
    v8[656] = v7[0];
    WTF::AtomStringImpl::add();
    v8[657] = v7[0];
    WTF::AtomStringImpl::add();
    v8[658] = v7[0];
    WTF::AtomStringImpl::add();
    v8[659] = v7[0];
    WTF::AtomStringImpl::add();
    v8[660] = v7[0];
    WTF::AtomStringImpl::add();
    v8[661] = v7[0];
    WTF::AtomStringImpl::add();
    v8[662] = v7[0];
    WTF::AtomStringImpl::add();
    v8[663] = v7[0];
    WTF::AtomStringImpl::add();
    v8[664] = v7[0];
    WTF::AtomStringImpl::add();
    v8[665] = v7[0];
    WTF::AtomStringImpl::add();
    v8[666] = v7[0];
    WTF::AtomStringImpl::add();
    v8[667] = v7[0];
    WTF::AtomStringImpl::add();
    v8[668] = v7[0];
    WTF::AtomStringImpl::add();
    v8[669] = v7[0];
    WTF::AtomStringImpl::add();
    v8[670] = v7[0];
    WTF::AtomStringImpl::add();
    v8[671] = v7[0];
    WTF::AtomStringImpl::add();
    v8[672] = v7[0];
    WTF::AtomStringImpl::add();
    v8[673] = v7[0];
    WTF::AtomStringImpl::add();
    v8[674] = v7[0];
    WTF::AtomStringImpl::add();
    v8[675] = v7[0];
    WTF::AtomStringImpl::add();
    v8[676] = v7[0];
    WTF::AtomStringImpl::add();
    v8[677] = v7[0];
    WTF::AtomStringImpl::add();
    v8[678] = v7[0];
    WTF::AtomStringImpl::add();
    v8[679] = v7[0];
    WTF::AtomStringImpl::add();
    v8[680] = v7[0];
    WTF::AtomStringImpl::add();
    v8[681] = v7[0];
    WTF::AtomStringImpl::add();
    v8[682] = v7[0];
    WTF::AtomStringImpl::add();
    v8[683] = v7[0];
    WTF::AtomStringImpl::add();
    v8[684] = v7[0];
    WTF::AtomStringImpl::add();
    v8[685] = v7[0];
    WTF::AtomStringImpl::add();
    v8[686] = v7[0];
    WTF::AtomStringImpl::add();
    v8[687] = v7[0];
    WTF::AtomStringImpl::add();
    v8[688] = v7[0];
    WTF::AtomStringImpl::add();
    v8[689] = v7[0];
    WTF::AtomStringImpl::add();
    v8[690] = v7[0];
    WTF::AtomStringImpl::add();
    v8[691] = v7[0];
    WTF::AtomStringImpl::add();
    v8[692] = v7[0];
    WTF::AtomStringImpl::add();
    v8[693] = v7[0];
    WTF::AtomStringImpl::add();
    v8[694] = v7[0];
    WTF::AtomStringImpl::add();
    v8[695] = v7[0];
    WTF::AtomStringImpl::add();
    v8[696] = v7[0];
    WTF::AtomStringImpl::add();
    v8[697] = v7[0];
    WTF::AtomStringImpl::add();
    v8[698] = v7[0];
    WTF::AtomStringImpl::add();
    v8[699] = v7[0];
    WTF::AtomStringImpl::add();
    v8[700] = v7[0];
    WTF::AtomStringImpl::add();
    v8[701] = v7[0];
    WTF::AtomStringImpl::add();
    v8[702] = v7[0];
    WTF::AtomStringImpl::add();
    v8[703] = v7[0];
    WTF::AtomStringImpl::add();
    v8[704] = v7[0];
    WTF::AtomStringImpl::add();
    v8[705] = v7[0];
    WTF::AtomStringImpl::add();
    v8[706] = v7[0];
    WTF::AtomStringImpl::add();
    v8[707] = v7[0];
    WTF::AtomStringImpl::add();
    v8[708] = v7[0];
    WTF::AtomStringImpl::add();
    v8[709] = v7[0];
    WTF::AtomStringImpl::add();
    v8[710] = v7[0];
    WTF::AtomStringImpl::add();
    v8[711] = v7[0];
    WTF::AtomStringImpl::add();
    v8[712] = v7[0];
    WTF::AtomStringImpl::add();
    v8[713] = v7[0];
    WTF::AtomStringImpl::add();
    v8[714] = v7[0];
    WTF::AtomStringImpl::add();
    v8[715] = v7[0];
    WTF::AtomStringImpl::add();
    v8[716] = v7[0];
    WTF::AtomStringImpl::add();
    v8[717] = v7[0];
    WTF::AtomStringImpl::add();
    v8[718] = v7[0];
    WTF::AtomStringImpl::add();
    v8[719] = v7[0];
    WTF::AtomStringImpl::add();
    v8[720] = v7[0];
    WTF::AtomStringImpl::add();
    v8[721] = v7[0];
    WTF::AtomStringImpl::add();
    v8[722] = v7[0];
    WTF::AtomStringImpl::add();
    v8[723] = v7[0];
    WTF::AtomStringImpl::add();
    v8[724] = v7[0];
    WTF::AtomStringImpl::add();
    v8[725] = v7[0];
    WTF::AtomStringImpl::add();
    v8[726] = v7[0];
    WTF::AtomStringImpl::add();
    v8[727] = v7[0];
    WTF::AtomStringImpl::add();
    v8[728] = v7[0];
    WTF::AtomStringImpl::add();
    v8[729] = v7[0];
    WTF::AtomStringImpl::add();
    v8[730] = v7[0];
    WTF::AtomStringImpl::add();
    v8[731] = v7[0];
    WTF::AtomStringImpl::add();
    v8[732] = v7[0];
    WTF::AtomStringImpl::add();
    v8[733] = v7[0];
    WTF::AtomStringImpl::add();
    v8[734] = v7[0];
    WTF::AtomStringImpl::add();
    v8[735] = v7[0];
    WTF::AtomStringImpl::add();
    v8[736] = v7[0];
    WTF::AtomStringImpl::add();
    v8[737] = v7[0];
    WTF::AtomStringImpl::add();
    v8[738] = v7[0];
    WTF::AtomStringImpl::add();
    v8[739] = v7[0];
    WTF::AtomStringImpl::add();
    v8[740] = v7[0];
    WTF::AtomStringImpl::add();
    v8[741] = v7[0];
    WTF::AtomStringImpl::add();
    v8[742] = v7[0];
    WTF::AtomStringImpl::add();
    v8[743] = v7[0];
    WTF::AtomStringImpl::add();
    v8[744] = v7[0];
    WTF::AtomStringImpl::add();
    v8[745] = v7[0];
    WTF::AtomStringImpl::add();
    v8[746] = v7[0];
    WTF::AtomStringImpl::add();
    v8[747] = v7[0];
    WTF::AtomStringImpl::add();
    v8[748] = v7[0];
    WTF::AtomStringImpl::add();
    v8[749] = v7[0];
    WTF::AtomStringImpl::add();
    v8[750] = v7[0];
    WTF::AtomStringImpl::add();
    v8[751] = v7[0];
    WTF::AtomStringImpl::add();
    v8[752] = v7[0];
    WTF::AtomStringImpl::add();
    v8[753] = v7[0];
    WTF::AtomStringImpl::add();
    v8[754] = v7[0];
    WTF::AtomStringImpl::add();
    v8[755] = v7[0];
    WTF::AtomStringImpl::add();
    v8[756] = v7[0];
    WTF::AtomStringImpl::add();
    v8[757] = v7[0];
    WTF::AtomStringImpl::add();
    v8[758] = v7[0];
    WTF::AtomStringImpl::add();
    v8[759] = v7[0];
    WTF::AtomStringImpl::add();
    v8[760] = v7[0];
    WTF::AtomStringImpl::add();
    v8[761] = v7[0];
    WTF::AtomStringImpl::add();
    v8[762] = v7[0];
    WTF::AtomStringImpl::add();
    v8[763] = v7[0];
    WTF::AtomStringImpl::add();
    v8[764] = v7[0];
    WTF::AtomStringImpl::add();
    v8[765] = v7[0];
    WTF::AtomStringImpl::add();
    v8[766] = v7[0];
    WTF::AtomStringImpl::add();
    v8[767] = v7[0];
    WTF::AtomStringImpl::add();
    v8[768] = v7[0];
    WTF::AtomStringImpl::add();
    v8[769] = v7[0];
    WTF::AtomStringImpl::add();
    v8[770] = v7[0];
    WTF::AtomStringImpl::add();
    v8[771] = v7[0];
    WTF::AtomStringImpl::add();
    v8[772] = v7[0];
    WTF::AtomStringImpl::add();
    v8[773] = v7[0];
    WTF::AtomStringImpl::add();
    v8[774] = v7[0];
    WTF::AtomStringImpl::add();
    v8[775] = v7[0];
    WTF::AtomStringImpl::add();
    v8[776] = v7[0];
    WTF::AtomStringImpl::add();
    v8[777] = v7[0];
    WTF::AtomStringImpl::add();
    v8[778] = v7[0];
    WTF::AtomStringImpl::add();
    v8[779] = v7[0];
    WTF::AtomStringImpl::add();
    v8[780] = v7[0];
    WTF::AtomStringImpl::add();
    v8[781] = v7[0];
    WTF::AtomStringImpl::add();
    v8[782] = v7[0];
    WTF::AtomStringImpl::add();
    v8[783] = v7[0];
    WTF::AtomStringImpl::add();
    v8[784] = v7[0];
    WTF::AtomStringImpl::add();
    v8[785] = v7[0];
    WTF::AtomStringImpl::add();
    v8[786] = v7[0];
    WTF::AtomStringImpl::add();
    v8[787] = v7[0];
    WTF::AtomStringImpl::add();
    v8[788] = v7[0];
    WTF::AtomStringImpl::add();
    v8[789] = v7[0];
    WTF::AtomStringImpl::add();
    v8[790] = v7[0];
    WTF::AtomStringImpl::add();
    v8[791] = v7[0];
    WTF::AtomStringImpl::add();
    v8[792] = v7[0];
    WTF::AtomStringImpl::add();
    v8[793] = v7[0];
    WTF::AtomStringImpl::add();
    v8[794] = v7[0];
    WTF::AtomStringImpl::add();
    v8[795] = v7[0];
    WTF::AtomStringImpl::add();
    v8[796] = v7[0];
    WTF::AtomStringImpl::add();
    v8[797] = v7[0];
    WTF::AtomStringImpl::add();
    v8[798] = v7[0];
    WTF::AtomStringImpl::add();
    v8[799] = v7[0];
    WTF::AtomStringImpl::add();
    v8[800] = v7[0];
    qword_1ECE83830 = 0;
    *(_QWORD *)&dword_1ECE83838 = 0;
    *(_QWORD *)&algn_1ECE8383C[1] = 0;
    v3 = v8;
    v4 = 801;
    do
    {
      WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83830, (uint64_t)v3++, (uint64_t)v7);
      --v4;
    }
    while (v4);
    v6 = 801;
    do
    {
      result = (WTF::StringImpl *)v7[v6 + 2];
      v7[v6 + 2] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
      --v6;
    }
    while (v6 * 8);
    _MergedGlobals_208 = 1;
  }
  return result;
}

WebCore::IconLoader *WebCore::IconLoader::IconLoader(WebCore::IconLoader *this, WebCore::DocumentLoader *a2, const WTF::URL *a3)
{
  _QWORD *v6;
  _DWORD *v7;
  __int128 v8;

  v6 = WebCore::CachedResourceClient::CachedResourceClient(this);
  *v6 = off_1E33F9098;
  WTF::WeakRef<WebCore::DocumentLoader,WTF::SingleThreadWeakPtrImpl>::WeakRef<void>(v6 + 2, (uint64_t)a2);
  v7 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v7 += 2;
  *((_QWORD *)this + 3) = v7;
  v8 = *(_OWORD *)((char *)a3 + 24);
  *((_OWORD *)this + 2) = *(_OWORD *)((char *)a3 + 8);
  *((_OWORD *)this + 3) = v8;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((_QWORD *)this + 8);
  return this;
}

uint64_t *WTF::WeakRef<WebCore::DocumentLoader,WTF::SingleThreadWeakPtrImpl>::WeakRef<void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  WTF *v8;

  v3 = *(_QWORD *)(a2 + 64);
  if (!v3)
  {
    v6 = a2 + 56;
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = v6;
    v8 = *(WTF **)(a2 + 64);
    *(_QWORD *)(a2 + 64) = v3;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WTF::fastFree(v8, v7);
        v3 = *(_QWORD *)(a2 + 64);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  ++*(_DWORD *)v3;
  *a1 = v3;
  return a1;
}

void WebCore::IconLoader::~IconLoader(WebCore::IconLoader *this)
{
  void *v2;
  WTF::StringImpl *v3;
  void *v4;
  void *v5;

  WebCore::IconLoader::stopLoading((unsigned int **)this);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 8, v2);
  WebCore::ContentType::~ContentType((WTF::StringImpl **)this + 3, v3);
  WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::~WeakRef((WTF **)this + 2, v4);
  WebCore::CachedResourceClient::~CachedResourceClient(this, v5);
}

{
  WTF *v1;
  void *v2;

  WebCore::IconLoader::~IconLoader(this);
  WTF::fastFree(v1, v2);
}

void WebCore::IconLoader::stopLoading(unsigned int **this)
{
  uint64_t *v2;
  void *v3;
  WebCore::CachedResource *v4;
  unsigned int *v5;

  v2 = (uint64_t *)(this + 8);
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v5, (const WebCore::CachedResourceHandleBase *)(this + 8));
  WebCore::CachedResourceHandleBase::setResource(v2, 0);
  if (v5)
  {
    v4 = (WebCore::CachedResource *)*((_QWORD *)v5 + 1);
    if (v4)
      WebCore::CachedResource::removeClient(v4, this);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v5, v3);
}

unsigned int *WebCore::IconLoader::startLoading(unsigned int *this)
{
  WebCore::CachedResourceClient *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  WebCore::CachedResource *v16;
  void *v17;
  void *v18;
  WebCore::CachedResource *v19;
  WTF::StringImpl *v20;
  void *v21;
  WTF::StringImpl *v22;
  _BYTE v23[192];
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  char v33;
  unsigned int v34;
  char v35;
  __int16 v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[408];
  uint64_t v41;

  v1 = (WebCore::CachedResourceClient *)this;
  v41 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)(this + 16);
  v2 = *((_QWORD *)this + 8);
  if (!v2 || !*(_QWORD *)(v2 + 8))
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    v5 = v4 ? v4 - 56 : 0;
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v23, (uint64_t)(this + 6), 0);
        v24 = 0;
        WebCore::ResourceRequestBase::setPriority(v23, 1);
        v25 = 512;
        v26 = 0;
        v27 = 0;
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v32 = 0;
        v33 = 1;
        LOBYTE(v34) = 0;
        v35 = 0;
        v36 = 20;
        v37 = v37 & 0xF0000000 | 0xC0009C0;
        v38 = 0;
        v39 = 0;
        v22 = 0;
        WebCore::CachedResourceRequest::CachedResourceRequest((uint64_t)v40, (uint64_t)v23, (const WebCore::ResourceLoaderOptions *)&v25, 0, (uint64_t *)&v22);
        v11 = v22;
        v22 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
        WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v25, v10);
        v13 = WebCore::cachedResourceRequestInitiatorTypes(v12);
        WebCore::CachedResourceRequest::setInitiatorType((WebCore::CachedResourceRequest *)v40, (const WTF::AtomString *)(v13 + 24));
        v15 = *(_QWORD **)(*(_QWORD *)(v7 + 296) + 720);
        if (!v15)
          v15 = (_QWORD *)WebCore::Document::ensureCachedResourceLoader(*(WebCore::Document **)(v7 + 296), v14);
        WebCore::CachedResourceLoader::requestIcon((WebCore::ResourceRequest *)v40, v15, (uint64_t)&v25);
        if (v34)
        {
          v16 = 0;
          v22 = 0;
        }
        else
        {
          WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v22, (const WebCore::CachedResourceHandleBase *)&v25);
          if (v22)
            v16 = (WebCore::CachedResource *)*((_QWORD *)v22 + 1);
          else
            v16 = 0;
        }
        WebCore::CachedResourceHandleBase::setResource(v3, v16);
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v22, v17);
        WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v22, (const WebCore::CachedResourceHandleBase *)v3);
        if (v22)
        {
          v19 = (WebCore::CachedResource *)*((_QWORD *)v22 + 1);
          if (v19)
            WebCore::CachedResource::addClient(v19, v1);
        }
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v22, v18);
        if (v34 != -1)
          (*(&off_1E33F9100 + v34))((int)&v22, (WebCore::CachedResourceHandleBase *)&v25);
        WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v40, v20);
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v23, v21);
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
      }
    }
  }
  return this;
}

WebCore::FragmentedSharedBuffer *WebCore::IconLoader::notifyFinished(WebCore::IconLoader *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::CachedResource *v5;
  uint64_t *v6;
  int v7;
  void *v8;
  void *v9;
  uint64_t v10;
  WebCore::DocumentLoader *v11;
  void *v12;
  WebCore::FragmentedSharedBuffer *result;
  int v14;
  WebCore::FragmentedSharedBuffer *v15;

  v2 = *((_QWORD *)a1 + 8);
  v3 = *(unsigned int **)(*(_QWORD *)(v2 + 8) + 392);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v2 = *((_QWORD *)a1 + 8);
    v15 = (WebCore::FragmentedSharedBuffer *)v3;
    if (!v2)
    {
      v5 = 0;
      goto LABEL_5;
    }
  }
  else
  {
    v15 = 0;
  }
  v5 = *(WebCore::CachedResource **)(v2 + 8);
LABEL_5:
  v6 = WebCore::CachedResource::response(v5);
  v7 = WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)v6);
  if (v7 && (v7 - 300) <= 0xFFFFFF9B)
  {
    WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::operator=((uint64_t *)&v15, v8);
    v3 = (unsigned int *)v15;
  }
  v14 = 1178882085;
  if (v3 && WebCore::FragmentedSharedBuffer::startsWith((uint64_t)v3, (char *)&v14, 4uLL))
    WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::operator=((uint64_t *)&v15, v9);
  v10 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  if (v10)
    v11 = (WebCore::DocumentLoader *)(v10 - 56);
  else
    v11 = 0;
  ++*((_DWORD *)v11 + 6);
  WebCore::DocumentLoader::finishedLoadingIcon(v11, a1, v15);
  if (v10)
  {
    if (*((_DWORD *)v11 + 6) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 - 56) + 24))(v10 - 56);
    else
      --*((_DWORD *)v11 + 6);
  }
  result = v15;
  v15 = 0;
  if (result)
    return (WebCore::FragmentedSharedBuffer *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((uint64_t)result, v12);
  return result;
}

uint64_t *WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::operator=(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v3 + 8);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v8;
              v17 = v9;
              v18 = (WTF *)v10;
              v20 = v3;
              atomic_store(1u, v10);
              v15 = v10[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F9110[v15])(&v21, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, a2);
              v3 = v20;
              v8 = v16;
              v9 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v13 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v19 = v3;
        WTF::fastFree(v13, a2);
        v3 = v19;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

_DWORD *WebCore::DocumentLoader::schedule(WebCore::DocumentLoader *this, WTF::SchedulePair *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 384);
      if (v6)
      {
        ++*(_DWORD *)(v6 + 16);
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_DWORD *)(v7 + 8);
          *(_DWORD *)(v7 + 8) = v8 + 1;
          v9 = *((_QWORD *)a2 + 1);
          if (v9)
          {
            objc_msgSend(*(id *)(*(_QWORD *)(v7 + 16) + 480), "scheduleInRunLoop:forMode:", v9, *((_QWORD *)a2 + 3));
            v8 = *(_DWORD *)(v7 + 8) - 1;
          }
          if (v8)
            *(_DWORD *)(v7 + 8) = v8;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
        }
        if (*(_DWORD *)(v6 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        else
          --*(_DWORD *)(v6 + 16);
      }
    }
  }
  WebCore::scheduleAll(*((_DWORD **)this + 11), a2);
  WebCore::scheduleAll(*((_DWORD **)this + 13), a2);
  return WebCore::scheduleAll(*((_DWORD **)this + 12), a2);
}

_DWORD *WebCore::scheduleAll(_DWORD *result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  WTF *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;

  if (result)
  {
    v3 = *(result - 1);
    v4 = &result[4 * v3];
    if (*(result - 3))
    {
      v5 = result;
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = result;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v5 = &result[4 * v3];
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = &result[4 * v3];
  if (!result)
  {
    v7 = 0;
    goto LABEL_14;
  }
LABEL_8:
  v7 = &result[4 * *(result - 1)];
  v8 = *(result - 3);
  if (!(_DWORD)v8)
  {
LABEL_14:
    v9 = 0;
    goto LABEL_15;
  }
  if (v8 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v8));
  v9 = (WTF *)result;
LABEL_15:
  if (v7 != v5)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = v11;
      v13 = v5[1];
      if (v13)
        ++*(_DWORD *)(v13 + 16);
      *((_QWORD *)v9 + v10) = v13;
      v14 = v5 + 2;
      v5 = v4;
      if (v14 != v4)
      {
        v5 = v14;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          if (v5 == v4)
          {
            v5 = v4;
            break;
          }
        }
      }
      ++v10;
      v11 = v12 + 1;
    }
    while (v5 != v7);
    if (v10)
    {
      v15 = 8 * v12;
      v16 = v9;
      do
      {
        v17 = *(_QWORD *)v16;
        if (*(_QWORD *)v16)
        {
          ++*(_DWORD *)(v17 + 16);
          v18 = *(_QWORD *)(v17 + 24);
          if (v18)
          {
            v19 = *(_DWORD *)(v18 + 8);
            *(_DWORD *)(v18 + 8) = v19 + 1;
            v20 = a2[1];
            if (v20)
            {
              objc_msgSend(*(id *)(*(_QWORD *)(v18 + 16) + 480), "scheduleInRunLoop:forMode:", v20, a2[3]);
              v19 = *(_DWORD *)(v18 + 8) - 1;
            }
            if (v19)
              *(_DWORD *)(v18 + 8) = v19;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
          }
          if (*(_DWORD *)(v17 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          else
            --*(_DWORD *)(v17 + 16);
        }
        else
        {
          v21 = MEMORY[0x18];
          if (MEMORY[0x18])
          {
            v22 = *(_DWORD *)(MEMORY[0x18] + 8);
            *(_DWORD *)(MEMORY[0x18] + 8) = v22 + 1;
            v23 = a2[1];
            if (v23)
            {
              objc_msgSend(*(id *)(*(_QWORD *)(v21 + 16) + 480), "scheduleInRunLoop:forMode:", v23, a2[3]);
              v22 = *(_DWORD *)(v21 + 8) - 1;
            }
            if (v22)
              *(_DWORD *)(v21 + 8) = v22;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21);
          }
        }
        v16 = (WTF *)((char *)v16 + 8);
        v15 -= 8;
      }
      while (v15);
      v24 = 8 * v12;
      v25 = v9;
      do
      {
        result = *(_DWORD **)v25;
        *(_QWORD *)v25 = 0;
        if (result)
        {
          if (result[4] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[4];
        }
        v25 = (WTF *)((char *)v25 + 8);
        v24 -= 8;
      }
      while (v24);
    }
  }
  if (v9)
    return (_DWORD *)WTF::fastFree(v9, a2);
  return result;
}

WTF *WebCore::DocumentLoader::unschedule(WebCore::DocumentLoader *this, WTF::SchedulePair *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 384);
      if (v6)
      {
        ++*(_DWORD *)(v6 + 16);
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_DWORD *)(v7 + 8);
          *(_DWORD *)(v7 + 8) = v8 + 1;
          v9 = *((_QWORD *)a2 + 1);
          if (v9)
          {
            objc_msgSend(*(id *)(*(_QWORD *)(v7 + 16) + 480), "unscheduleFromRunLoop:forMode:", v9, *((_QWORD *)a2 + 3));
            v8 = *(_DWORD *)(v7 + 8) - 1;
          }
          if (v8)
            *(_DWORD *)(v7 + 8) = v8;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
        }
        if (*(_DWORD *)(v6 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        else
          --*(_DWORD *)(v6 + 16);
      }
    }
  }
  WebCore::unscheduleAll((WebCore::DocumentLoader *)((char *)this + 88), a2);
  WebCore::unscheduleAll((WebCore::DocumentLoader *)((char *)this + 104), a2);
  return WebCore::unscheduleAll((WebCore::DocumentLoader *)((char *)this + 96), a2);
}

WTF *WebCore::unscheduleAll(WTF *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;

  v3 = *(_QWORD **)result;
  if (!*(_QWORD *)result)
  {
    v6 = 0;
    v4 = 0;
    goto LABEL_13;
  }
  v4 = *((unsigned int *)v3 - 1);
  v5 = &v3[2 * v4];
  if (!*((_DWORD *)v3 - 3))
  {
    v6 = &v3[2 * v4];
LABEL_13:
    v5 = &v3[2 * v4];
    if (v3)
      goto LABEL_9;
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v6 = *(_QWORD **)result;
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v6 = *(_QWORD **)result;
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 2;
      v7 -= 16;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
  if (!v3)
    goto LABEL_14;
LABEL_9:
  v8 = &v3[2 * *((unsigned int *)v3 - 1)];
  v9 = *((unsigned int *)v3 - 3);
  if (!(_DWORD)v9)
  {
LABEL_15:
    v10 = 0;
    goto LABEL_16;
  }
  if (v9 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  result = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
  v10 = result;
LABEL_16:
  if (v8 != v6)
  {
    v11 = 0;
    v12 = 1;
    do
    {
      v13 = v12;
      v14 = v6[1];
      if (v14)
        ++*(_DWORD *)(v14 + 16);
      *((_QWORD *)v10 + v11) = v14;
      v15 = v6 + 2;
      v6 = v5;
      if (v15 != v5)
      {
        v6 = v15;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
      ++v11;
      v12 = v13 + 1;
    }
    while (v6 != v8);
    if (v11)
    {
      v16 = 8 * v13;
      v17 = v10;
      do
      {
        v18 = *(_QWORD *)v17;
        if (*(_QWORD *)v17)
        {
          ++*(_DWORD *)(v18 + 16);
          v19 = *(_QWORD *)(v18 + 24);
          if (v19)
          {
            v20 = *(_DWORD *)(v19 + 8);
            *(_DWORD *)(v19 + 8) = v20 + 1;
            v21 = a2[1];
            if (v21)
            {
              objc_msgSend(*(id *)(*(_QWORD *)(v19 + 16) + 480), "unscheduleFromRunLoop:forMode:", v21, a2[3]);
              v20 = *(_DWORD *)(v19 + 8) - 1;
            }
            if (v20)
              *(_DWORD *)(v19 + 8) = v20;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19);
          }
          if (*(_DWORD *)(v18 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          else
            --*(_DWORD *)(v18 + 16);
        }
        else
        {
          v22 = MEMORY[0x18];
          if (MEMORY[0x18])
          {
            v23 = *(_DWORD *)(MEMORY[0x18] + 8);
            *(_DWORD *)(MEMORY[0x18] + 8) = v23 + 1;
            v24 = a2[1];
            if (v24)
            {
              objc_msgSend(*(id *)(*(_QWORD *)(v22 + 16) + 480), "unscheduleFromRunLoop:forMode:", v24, a2[3]);
              v23 = *(_DWORD *)(v22 + 8) - 1;
            }
            if (v23)
              *(_DWORD *)(v22 + 8) = v23;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
          }
        }
        v17 = (WTF *)((char *)v17 + 8);
        v16 -= 8;
      }
      while (v16);
      v25 = 8 * v13;
      v26 = v10;
      do
      {
        result = *(WTF **)v26;
        *(_QWORD *)v26 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 4) == 1)
            result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
          else
            --*((_DWORD *)result + 4);
        }
        v26 = (WTF *)((char *)v26 + 8);
        v25 -= 8;
      }
      while (v25);
    }
  }
  if (v10)
    return (WTF *)WTF::fastFree(v10, a2);
  return result;
}

void WebCore::MathMLAnnotationElement::createElementRenderer(WebCore::Document *a1@<X0>, WebCore::Style *this@<X1>, const WebCore::Element *a3@<X3>, uint64_t *a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if (*(_QWORD *)(*((_QWORD *)a1 + 12) + 24) == *(_QWORD *)(WebCore::MathMLNames::annotationTag + 24))
  {
    WebCore::RenderElement::createFor(a1, this, 0, a3, a4);
  }
  else
  {
    v7 = (_QWORD *)bmalloc::api::isoAllocate();
    v8 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v7, 51, (uint64_t)a1, this, 76, 0);
    *(_OWORD *)(v8 + 184) = 0u;
    *(_OWORD *)(v8 + 168) = 0u;
    *(_OWORD *)(v8 + 152) = 0u;
    *(_QWORD *)v8 = off_1E343A178;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v9 = 1;
    v7[25] = v9;
    (*(void (**)(_QWORD *, _QWORD))(*v7 + 168))(v7, 0);
    *a4 = (uint64_t)v7;
  }
}

uint64_t WebCore::MathMLAnnotationElement::childShouldCreateRenderer(WebCore::MathMLAnnotationElement *this, const WebCore::Node *a2)
{
  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::MathMLNames::annotationTag + 24))
    return (*((unsigned __int16 *)a2 + 14) >> 1) & 1;
  if ((*((_WORD *)a2 + 14) & 0x20) == 0)
    return 1;
  if (*(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    return (*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)a2 + 1232))(a2);
  return 0;
}

void WebCore::MathMLAnnotationElement::attributeChanged(WebCore::Node *a1, _QWORD *a2, WTF::AtomString *a3, const WebCore::QualifiedName *a4, int a5)
{
  _WORD *v11;
  __int16 v12;
  int v13;

  if (*a2 == WebCore::MathMLNames::srcAttr || *a2 == WebCore::MathMLNames::encodingAttr)
  {
    v11 = (_WORD *)*((_QWORD *)a1 + 4);
    if (v11)
    {
      v12 = v11[14];
      if ((v12 & 8) != 0)
      {
        v13 = *((_DWORD *)v11 + 6);
        *((_DWORD *)v11 + 6) = v13 + 2;
        if ((v12 & 0x40) != 0
          && *(_QWORD *)(*((_QWORD *)v11 + 12) + 24) == *(_QWORD *)(WebCore::MathMLNames::semanticsTag + 24))
        {
          (*(void (**)(_WORD *))(*(_QWORD *)v11 + 1184))(v11);
          v13 = *((_DWORD *)v11 + 6) - 2;
        }
        if (v13)
        {
          *((_DWORD *)v11 + 6) = v13;
        }
        else if ((v11[15] & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
        }
      }
    }
  }
  WebCore::MathMLPresentationElement::attributeChanged(a1, (WebCore::HTMLElement *)a2, a3, a4, a5);
}

uint64_t WebCore::MathMLElement::colSpan(WebCore::MathMLElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::MathMLNames::mtdTag + 24))
    return 1;
  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_15;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_7;
LABEL_15:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_16;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_15;
LABEL_7:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::MathMLNames::columnspanAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::MathMLNames::columnspanAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::MathMLNames::columnspanAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_16:
  v8 = *v6;
  if (v8)
  {
    v9 = *(uint64_t **)(v8 + 8);
    v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v9 = 0;
    v10 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v9, v10, &v11);
  if (HIDWORD(v11) == 1)
    return 1;
  if (HIDWORD(v11))
    std::__throw_bad_variant_access[abi:sn180100]();
  if ((v11 & 0x80000000) != 0)
    return 1;
  if (v11 <= 1)
    return 1;
  else
    return v11;
}

uint64_t WebCore::MathMLElement::rowSpan(WebCore::MathMLElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;

  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::MathMLNames::mtdTag + 24))
    return 1;
  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_14;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_6;
LABEL_14:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_15;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_14;
LABEL_6:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::MathMLNames::rowspanAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::MathMLNames::rowspanAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::MathMLNames::rowspanAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_15:
  v8 = *v6;
  if (v8)
  {
    v9 = *(uint64_t **)(v8 + 8);
    v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v9 = 0;
    v10 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v9, v10, &v12);
  if (HIDWORD(v12) == 1)
    return 1;
  if (HIDWORD(v12))
    std::__throw_bad_variant_access[abi:sn180100]();
  v11 = v12;
  if ((v12 & 0x80000000) != 0)
    return 1;
  if (v12 >= 0x1FFE)
    v11 = 8190;
  if (v11 <= 1)
    return 1;
  else
    return v11;
}

void WebCore::MathMLElement::attributeChanged(WebCore::Node *a1, WebCore::HTMLElement *this, WTF::AtomString *a3, const WebCore::QualifiedName *a4, int a5)
{
  unsigned int v10;
  WebCore::RenderTableCell *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl **v15;
  __n128 v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  const WTF::AtomString *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const WTF::AtomString *v25;

  v10 = *(unsigned __int16 *)(*(_QWORD *)this + 10);
  if (v10 > 0x369)
  {
    if (v10 == 874)
    {
      v13 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 && (v20 = *(unsigned int *)(v13 + 4), (_DWORD)v20))
      {
        WebCore::parseHTMLInteger(*(uint64_t **)(v13 + 8), v20 | ((unint64_t)((*(_DWORD *)(v13 + 16) >> 2) & 1) << 32), (uint64_t *)&v25);
        if (HIDWORD(v25))
          return;
        v21 = (int)v25;
        if ((_DWORD)v25)
        {
          if ((_DWORD)v25 == -1)
          {
            v22 = 0x800000000000000;
          }
          else
          {
            v23 = *((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL;
            if (!v23)
            {
              WebCore::Node::materializeRareData(a1);
              v23 = *((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL;
            }
            *(_DWORD *)(v23 + 28) = v21;
            v22 = 0xC00000000000000;
          }
        }
        else
        {
          v22 = 0x400000000000000;
        }
        v14 = *((_QWORD *)a1 + 9) & 0xF3FFFFFFFFFFFFFFLL | v22;
      }
      else
      {
        v14 = *((_QWORD *)a1 + 9) & 0xF3FFFFFFFFFFFFFFLL;
      }
      *((_QWORD *)a1 + 9) = v14;
      return;
    }
    if (v10 == 948)
    {
      if (*(_QWORD *)a4)
        v12 = (void *)(WebCore::isInSVGImage(a1, this) ^ 1);
      else
        v12 = 0;
      WebCore::Element::setIsLink((unsigned __int8 *)a1, v12);
      return;
    }
  }
  else if (v10 == 407 || v10 == 809)
  {
    v11 = (WebCore::RenderTableCell *)(*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL);
    if (v11)
    {
      if ((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F67078);
      }
      if (*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37
        && *(_QWORD *)(*((_QWORD *)a1 + 12) + 24) == *(_QWORD *)(WebCore::MathMLNames::mtdTag + 24))
      {
        WebCore::RenderTableCell::colSpanOrRowSpanChanged(v11);
      }
    }
    return;
  }
  v15 = (WTF::StringImpl **)WebCore::HTMLElement::eventNameForEventHandlerAttribute(this, this);
  if (*v15)
  {
    v17 = v15;
    WebCore::JSLazyEventListener::create(a1, this, a4, (uint64_t *)&v25);
    {
      v18 = WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    }
    else
    {
      v24 = WebCore::g_commonVMOrNull;
      if (!WebCore::g_commonVMOrNull)
        v24 = WebCore::commonVMSlow(0);
      v18 = *(_QWORD *)(*(_QWORD *)(v24 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = v18;
    }
    WebCore::EventTarget::setAttributeEventListener(a1, v17, &v25, v18);
    v19 = v25;
    v25 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 4) == 1)
        (*(void (**)(const WTF::AtomString *))(*(_QWORD *)v19 + 8))(v19);
      else
        --*((_DWORD *)v19 + 4);
    }
  }
  else
  {
    WebCore::StyledElement::attributeChanged((uint64_t)a1, this, a3, (WTF::StringImpl **)a4, a5, v16);
  }
}

uint64_t WebCore::MathMLElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x23D)
  {
    if (v2 - 574 >= 3)
      return 0;
  }
  else
  {
    v4 = v2 - 432 > 0x30 || ((1 << (v2 + 80)) & 0x1E00000000081) == 0;
    if (v4 && v2 != 367 && v2 != 402)
      return 0;
  }
  return result;
}

WTF::StringImpl *WebCore::MathMLElement::collectPresentationalHintsForAttribute(WTF::StringImpl *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  WTF::StringImpl *v6;
  unsigned int v7;
  WebCore::MutableStyleProperties *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  WTF::StringImpl *v40;
  char __s[124];
  unsigned int v42;
  uint64_t v43;

  v6 = this;
  v43 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v7 <= 0x23D)
  {
    if (v7 == 432)
    {
      v8 = a4;
      v9 = 6;
      return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v8, v9, (uint64_t)a3);
    }
    if (v7 != 439)
      goto LABEL_22;
    v10 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      return this;
    v11 = *(_DWORD *)(v10 + 4);
    if (v11 == 5)
    {
      v22 = *(_QWORD *)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v22 & 0xDF) != 0x46
          || (*(_BYTE *)(v22 + 1) & 0xDF) != 0x41
          || (*(_BYTE *)(v22 + 2) & 0xDF) != 0x4C
          || (*(_BYTE *)(v22 + 3) & 0xDF) != 0x53)
        {
          return this;
        }
        v23 = *(unsigned __int8 *)(v22 + 4);
      }
      else
      {
        if ((*(_WORD *)v22 & 0xFFDF) != 0x46
          || (*(_WORD *)(v22 + 2) & 0xFFDF) != 0x41
          || (*(_WORD *)(v22 + 4) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v22 + 6) & 0xFFDF) != 0x53)
        {
          return this;
        }
        v23 = *(unsigned __int16 *)(v22 + 8);
      }
      if ((v23 & 0xFFFFFFDF) != 0x45)
        return this;
      WebCore::staticCSSValuePool[7068] += 2;
      *(_QWORD *)__s = &WebCore::staticCSSValuePool[7068];
    }
    else
    {
      if (v11 != 4)
        return this;
      v12 = *(_QWORD *)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v12 & 0xDF) != 0x54
          || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x52
          || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x55)
        {
          return this;
        }
        v13 = *(unsigned __int8 *)(v12 + 3);
      }
      else
      {
        if ((*(_WORD *)v12 & 0xFFDF) != 0x54
          || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x52
          || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x55)
        {
          return this;
        }
        v13 = *(unsigned __int16 *)(v12 + 6);
      }
      if ((v13 & 0xFFFFFFDF) != 0x45)
        return this;
      dword_1ECE8C188 += 2;
      *(_QWORD *)__s = &WebCore::staticCSSValuePool[3448];
    }
    WebCore::MutableStyleProperties::setProperty(a4, 173, (_DWORD **)__s, 0);
    this = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (!this)
      return this;
    v17 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, v24);
LABEL_47:
    *(_DWORD *)this = v17;
    return this;
  }
  if (v7 != 576)
  {
    if (v7 == 575)
    {
LABEL_41:
      v8 = a4;
      v9 = 5;
      return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v8, v9, (uint64_t)a3);
    }
    if (v7 == 574)
    {
LABEL_5:
      v8 = a4;
      v9 = 61;
      return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v8, v9, (uint64_t)a3);
    }
LABEL_22:
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 664) & 0x8000000000000000) == 0)
    {
      switch(*(_WORD *)(*(_QWORD *)a2 + 10))
      {
        case 0x1DD:
          v8 = a4;
          v9 = 8;
          return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v8, v9, (uint64_t)a3);
        case 0x1DE:
          v8 = a4;
          v9 = 13;
          return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v8, v9, (uint64_t)a3);
        case 0x1DF:
          v8 = a4;
          v9 = 16;
          return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v8, v9, (uint64_t)a3);
        case 0x1E0:
          v8 = a4;
          v9 = 28;
          return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)v8, v9, (uint64_t)a3);
        default:
          if (v7 == 367)
            goto LABEL_5;
          if (v7 == 402)
            goto LABEL_41;
          return this;
      }
    }
    return this;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 664) & 0x8000000000000000) != 0)
  {
    __s[0] = 0;
    WTF::String::toDouble(a3, (BOOL *)__s);
    if (__s[0])
    {
      this = (WTF::StringImpl *)MEMORY[0x19AEA53F4](*(_QWORD *)a3, "0", 1);
      if (!(_DWORD)this)
        return this;
    }
    this = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
    {
      if (*((_DWORD *)this + 1) == 6)
      {
        v25 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if ((*((_BYTE *)this + 16) & 4) != 0)
        {
          v26 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v25);
          if (v26 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v25[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v25[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v25[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v25[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v25[5]) == v26)
          {
            return this;
          }
        }
        else
        {
          v37 = *(unsigned __int16 *)v25 | (32 * (*(unsigned __int16 *)v25 - 65 < 0x1A));
          if (v37 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
            && (*((unsigned __int16 *)v25 + 1) | (32 * (*((unsigned __int16 *)v25 + 1) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
            && (*((unsigned __int16 *)v25 + 2) | (32 * (*((unsigned __int16 *)v25 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
            && (*((unsigned __int16 *)v25 + 3) | (32 * (*((unsigned __int16 *)v25 + 3) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
            && (*((unsigned __int16 *)v25 + 4) | (32 * (*((unsigned __int16 *)v25 + 4) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
            && (*((unsigned __int16 *)v25 + 5) | (32 * (*((unsigned __int16 *)v25 + 5) - 65 < 0x1A))) == v37)
          {
            return this;
          }
        }
      }
      this = (WTF::StringImpl *)WTF::StringImpl::endsWithIgnoringASCIICase();
      if ((this & 1) != 0)
        return this;
      if (*(_QWORD *)a3)
      {
        this = (WTF::StringImpl *)WTF::StringImpl::endsWithIgnoringASCIICase();
        if ((this & 1) != 0)
          return this;
        v14 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v15 = *(_DWORD *)(v14 + 4);
          if (v15 == 7)
          {
            v27 = *(unsigned __int8 **)(v14 + 8);
            if ((*(_BYTE *)(v14 + 16) & 4) != 0)
            {
              v28 = MEMORY[0x1E0CBF868];
              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v27) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
              v29 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[3]);
              if (v29 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[4]) != v29
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
              {
                return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
              }
              v30 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[6]);
            }
            else
            {
              v28 = MEMORY[0x1E0CBF868];
              if ((*(unsigned __int16 *)v27 | (32 * (*(unsigned __int16 *)v27 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
              if ((*((unsigned __int16 *)v27 + 1) | (32 * (*((unsigned __int16 *)v27 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
              if ((*((unsigned __int16 *)v27 + 2) | (32 * (*((unsigned __int16 *)v27 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
              v38 = *((unsigned __int16 *)v27 + 3) | (32 * (*((unsigned __int16 *)v27 + 3) - 65 < 0x1A));
              if (v38 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                || (*((unsigned __int16 *)v27 + 4) | (32 * (*((unsigned __int16 *)v27 + 4) - 65 < 0x1A))) != v38
                || (*((unsigned __int16 *)v27 + 5) | (32 * (*((unsigned __int16 *)v27 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
              {
                return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
              }
              v30 = *((unsigned __int16 *)v27 + 6) | (32 * (*((unsigned __int16 *)v27 + 6) - 65 < 0x1A));
            }
            v31 = *(unsigned __int8 *)(v28 + 114);
LABEL_107:
            if (v30 == v31)
              return this;
            return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
          }
          if (v15 != 6)
          {
            if (v15 != 4)
              return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
            v35 = *(unsigned __int8 **)(v14 + 8);
            if ((*(_BYTE *)(v14 + 16) & 4) != 0)
            {
              v36 = MEMORY[0x1E0CBF868];
              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v35) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v35[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v35[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
              {
                return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
              }
              v30 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v35[3]);
            }
            else
            {
              v36 = MEMORY[0x1E0CBF868];
              if ((*(unsigned __int16 *)v35 | (32 * (*(unsigned __int16 *)v35 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                || (*((unsigned __int16 *)v35 + 1) | (32 * (*((unsigned __int16 *)v35 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                || (*((unsigned __int16 *)v35 + 2) | (32 * (*((unsigned __int16 *)v35 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
              {
                return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
              }
              v30 = *((unsigned __int16 *)v35 + 3) | (32 * (*((unsigned __int16 *)v35 + 3) - 65 < 0x1A));
            }
            v31 = *(unsigned __int8 *)(v36 + 104);
            goto LABEL_107;
          }
          v32 = *(unsigned __int8 **)(v14 + 8);
          if ((*(_BYTE *)(v14 + 16) & 4) != 0)
          {
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v32) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
              return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
              return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
            v33 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[2]);
            if (v33 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
            {
              return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
            }
            v34 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[5]);
          }
          else
          {
            if ((*(unsigned __int16 *)v32 | (32 * (*(unsigned __int16 *)v32 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
              return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
            if ((*((unsigned __int16 *)v32 + 1) | (32 * (*((unsigned __int16 *)v32 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
              return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
            v33 = *((unsigned __int16 *)v32 + 2) | (32 * (*((unsigned __int16 *)v32 + 2) - 65 < 0x1A));
            if (v33 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
              || (*((unsigned __int16 *)v32 + 3) | (32 * (*((unsigned __int16 *)v32 + 3) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
              || (*((unsigned __int16 *)v32 + 4) | (32 * (*((unsigned __int16 *)v32 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
            {
              return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
            }
            v34 = *((unsigned __int16 *)v32 + 5) | (32 * (*((unsigned __int16 *)v32 + 5) - 65 < 0x1A));
          }
          if (v34 == v33)
            return this;
        }
      }
    }
    return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)a3);
  }
  if (MEMORY[0x19AEA53F4](*(_QWORD *)a3, "small", 5)
    || MEMORY[0x19AEA53F4](*(_QWORD *)a3, "normal", 6)
    || MEMORY[0x19AEA53F4](*(_QWORD *)a3, "big", 3))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    v39 = 0;
    WTF::String::toFloat(a3, &v39);
    if (v39)
    {
      WTF::numberToFixedWidthString();
      v18 = strlen(__s);
      v42 = v18;
      if ((v18 & 0x80000000) != 0
        || (v19 = v18 + 1, __OFADD__(v18, 1))
        || (WTF::tryFastCompactMalloc((WTF *)(v19 + 20)), (v20 = v40) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x195F67C40);
      }
      v21 = (char *)v40 + 20;
      *(_DWORD *)v40 = 2;
      *((_DWORD *)v20 + 1) = v19;
      *((_QWORD *)v20 + 1) = (char *)v20 + 20;
      *((_DWORD *)v20 + 4) = 4;
      if (v42)
      {
        if (v42 == 1)
          *v21 = __s[0];
        else
          memcpy((char *)v20 + 20, __s, v42);
      }
      v21[v42] = 37;
    }
    else
    {
      v20 = *(WTF::StringImpl **)a3;
      if (*(_QWORD *)a3)
        *(_DWORD *)v20 += 2;
    }
    v40 = v20;
  }
  WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)v6, (uint64_t)a4, 13, (uint64_t)&v40);
  this = v40;
  v40 = 0;
  if (this)
  {
    v17 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v16);
    goto LABEL_47;
  }
  return this;
}

uint64_t WebCore::MathMLElement::childShouldCreateRenderer(WebCore::MathMLElement *this, const WebCore::Node *a2)
{
  return (*((unsigned __int16 *)a2 + 14) >> 6) & 1;
}

uint64_t WebCore::MathMLElement::willRespondToMouseClickEventsWithEditability(uint64_t a1, int a2)
{
  if ((*(_WORD *)(a1 + 30) & 1) != 0)
    return 1;
  else
    return WebCore::Node::willRespondToMouseClickEventsWithEditability(a1, a2);
}

void WebCore::MathMLElement::defaultEventHandler(uint64_t this, WebCore::Event *a2)
{
  WebCore *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  WebCore *v18;
  WTF::StringImpl *v19;
  char shouldOpenExternalURLsPolicyToPropagate;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[39];
  char v32;
  char v33;
  WTF::StringImpl *v34;
  _QWORD v35[5];

  v3 = (WebCore *)this;
  if ((*(_WORD *)(this + 30) & 1) == 0)
    goto LABEL_9;
  if ((*(_BYTE *)(this + 54) & 2) != 0)
  {
    this = WebCore::Element::isUserActionElementFocused((WebCore::Element *)this);
    if ((_DWORD)this)
    {
      v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v26 || (v27 = *(_QWORD *)(v26 + 96)) == 0)
      {
        this = WebCore::threadGlobalDataSlow((WebCore *)this);
        v27 = this;
      }
      v28 = *(_QWORD *)(v27 + 40);
      if (!v28)
      {
        this = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v27);
        v28 = *(_QWORD *)(v27 + 40);
      }
      if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v28 + 1048))
      {
        this = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2);
        if ((_DWORD)this)
        {
          this = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Enter", 5);
          if ((_DWORD)this)
          {
            *((_DWORD *)a2 + 5) |= 0x80u;
            WebCore::simulateClick(v3, (uint64_t)a2, 0, 1, 1);
            return;
          }
        }
      }
    }
  }
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow((WebCore *)this);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  if (*((_QWORD *)a2 + 3) != *(_QWORD *)(v6 + 400)
    || (*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2)
    && ((v7 = *((unsigned __int16 *)a2 + 77), v7 < 3) || v7 - 65534 <= 1)
    && *((_WORD *)a2 + 77) == 2)
  {
LABEL_9:
    WebCore::Node::defaultEventHandler(v3, (WebCore::Node **)a2);
    return;
  }
  v8 = *((_QWORD *)v3 + 13);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v8 + 40);
      LODWORD(v11) = *(_DWORD *)(v8 + 52);
      if ((_DWORD)v11)
      {
LABEL_17:
        v11 = v11;
        v12 = (_QWORD *)(v10 + 8);
        while (1)
        {
          v13 = *(v12 - 1);
          if (v13 == WebCore::MathMLNames::hrefAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::MathMLNames::hrefAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::MathMLNames::hrefAttr + 32))
          {
            goto LABEL_26;
          }
          v12 += 2;
          if (!--v11)
          {
            v12 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_26;
          }
        }
      }
    }
    else
    {
      v10 = v8 + 32;
      LODWORD(v11) = v9 >> 5;
      if ((_DWORD)v11)
        goto LABEL_17;
    }
  }
  v12 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_26:
  *((_DWORD *)a2 + 5) |= 0x80u;
  v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 528);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = (unsigned int *)(v15 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v18 = *(WebCore **)(v15 + 280);
      ++*(_DWORD *)v18;
      WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)v3 + 5) + 8), v12, *(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 848, 0, (WTF::URL *)v35);
      WTF::AtomStringImpl::add();
      v33 = 0;
      shouldOpenExternalURLsPolicyToPropagate = WebCore::Document::shouldOpenExternalURLsPolicyToPropagate(*(WebCore::Document **)(*((_QWORD *)v3 + 5) + 8), v19);
      LOBYTE(v31[0]) = 0;
      v32 = 0;
      WebCore::FrameLoader::changeLocation(v18, (uint64_t)v35, (_DWORD **)&v34, a2, &v33, shouldOpenExternalURLsPolicyToPropagate, 0, MEMORY[0x1E0CBF2F8], (const WebCore::Document *)v31);
      if (v32)
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v31, v21);
      v22 = v34;
      v34 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = (WTF::StringImpl *)v35[0];
      v35[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v21);
        else
          *(_DWORD *)v23 -= 2;
      }
      if (!*(_DWORD *)v18)
      {
        __break(0xC471u);
        JUMPOUT(0x195F67FE8);
      }
      --*(_DWORD *)v18;
      do
      {
        v24 = __ldaxr(v16);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v16));
      if (!v25)
      {
        atomic_store(1u, v16);
        v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v29 = off_1E31FE290;
        v29[1] = v16;
        v31[0] = v29;
        WTF::ensureOnMainThread();
        v30 = v31[0];
        v31[0] = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      }
    }
  }
}

uint64_t WebCore::MathMLElement::canStartSelection(WebCore::MathMLElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if ((*((_WORD *)this + 15) & 1) != 0)
    return WebCore::Node::computeEditability((uint64_t)this, 0, 1) != 0;
  if (!WebCore::Node::hasEditableStyle((uint64_t)this, 0))
  {
    v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v2)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        v2 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 32) + 148) & 0xC00000) == 0x800000)
      {
        v3 = *(_QWORD *)(v2 + 104);
        if ((*(_BYTE *)(v3 + 239) & 1) != 0 || (*(_DWORD *)(v3 + 228) & 0x18000) == 0)
          return 0;
      }
    }
    if ((*((_WORD *)this + 14) & 0x80) != 0)
    {
      v6 = *((_QWORD *)this + 25);
      if (v6)
      {
        v4 = *(_QWORD *)(v6 + 8);
        if (v4)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
      }
    }
    else
    {
      v4 = *((_QWORD *)this + 4);
      if (v4)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
    }
  }
  return 1;
}

uint64_t WebCore::MathMLElement::isKeyboardFocusable(WebCore::MathMLElement *this, WebCore::KeyboardEvent *a2)
{
  uint64_t result;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if ((!(*(unsigned int (**)(WebCore::MathMLElement *))(*(_QWORD *)this + 552))(this)
     || ((*((_QWORD *)this + 9) >> 58) & 3) - 1 > 2)
    && (*((_WORD *)this + 15) & 1) != 0)
  {
    return WebCore::EventHandler::tabsToLinks(*(WebCore::EventHandler **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528) + 8)+ 640), a2);
  }
  result = (*(uint64_t (**)(WebCore::MathMLElement *))(*(_QWORD *)this + 552))(this);
  if ((_DWORD)result)
  {
    if (((*(uint64_t (**)(WebCore::MathMLElement *))(*(_QWORD *)this + 1120))(this) & 0x80000000) == 0
      || (result = (*(uint64_t (**)(WebCore::MathMLElement *))(*(_QWORD *)this + 544))(this), (_DWORD)result))
    {
      v6 = *((_QWORD *)this + 9);
      v7 = (v6 >> 58) & 3;
      if ((_DWORD)v7 == 2)
        return 0;
      v8 = v6 & 0xFFFFFFFFFFFFLL;
      if ((_DWORD)v7 == 3 && (*(_DWORD *)(v8 + 28) & 0x80000000) != 0)
      {
        return 0;
      }
      else
      {
        if (v8 && (v10 = *(_QWORD *)(v8 + 88)) != 0)
        {
          v11 = *(_DWORD *)(v10 + 24);
          *(_DWORD *)(v10 + 24) = v11 + 2;
          v9 = (*(unsigned __int8 *)(v10 + 192) >> 1) & 1;
          if (v11)
          {
            *(_DWORD *)(v10 + 24) = v11;
          }
          else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v10, v5);
          }
        }
        else
        {
          v9 = 0;
        }
        return v9 ^ 1u;
      }
    }
  }
  return result;
}

uint64_t WebCore::MathMLElement::isMouseFocusable(WebCore::MathMLElement *this)
{
  if ((*((_WORD *)this + 15) & 1) != 0)
    return (0xEu >> ((*((_QWORD *)this + 9) >> 58) & 3)) & 1;
  else
    return (*(uint64_t (**)(WebCore::MathMLElement *))(*(_QWORD *)this + 552))(this);
}

BOOL WebCore::MathMLElement::isURLAttribute(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 24) == *(_QWORD *)(WebCore::MathMLNames::hrefAttr + 24);
}

uint64_t WebCore::MathMLElement::supportsFocus(WebCore::MathMLElement *this)
{
  if (!WebCore::Node::computeEditability((uint64_t)this, 0, 1) && (*((_WORD *)this + 15) & 1) != 0)
    return 1;
  else
    return (0xEu >> ((*((_QWORD *)this + 9) >> 58) & 3)) & 1;
}

unint64_t *WebCore::MathMLFractionElement::lineThickness(WebCore::MathMLFractionElement *this)
{
  unint64_t *v1;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::MathMLPresentationElement *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v1 = (unint64_t *)((char *)this + 120);
  if (!*((_BYTE *)this + 128))
  {
    v3 = *((_QWORD *)this + 13);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 4);
      if ((v4 & 1) != 0)
      {
        v5 = *(_QWORD *)(v3 + 40);
        LODWORD(v6) = *(_DWORD *)(v3 + 52);
        if ((_DWORD)v6)
        {
LABEL_5:
          v6 = v6;
          v7 = (WebCore::MathMLPresentationElement *)(v5 + 8);
          while (1)
          {
            v8 = *((_QWORD *)v7 - 1);
            if (v8 == WebCore::MathMLNames::linethicknessAttr
              || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::MathMLNames::linethicknessAttr + 24)
              && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::MathMLNames::linethicknessAttr + 32))
            {
              break;
            }
            v7 = (WebCore::MathMLPresentationElement *)((char *)v7 + 16);
            if (!--v6)
            {
              v7 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_14:
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 664) & 0x8000000000000000) != 0)
          {
            v10 = WebCore::MathMLPresentationElement::parseMathMLLength(v7, 0);
            if (!*((_BYTE *)this + 128))
              *((_BYTE *)this + 128) = 1;
            goto LABEL_20;
          }
          *((_BYTE *)this + 128) = 1;
          *((_QWORD *)this + 15) = 6;
          v9 = *(_QWORD *)v7;
          if (!*(_QWORD *)v7)
          {
LABEL_16:
            v10 = WebCore::MathMLPresentationElement::parseMathMLLength(v7, (const WTF::String *)1);
            if (!*((_BYTE *)this + 128))
              *((_BYTE *)this + 128) = 1;
LABEL_20:
            *v1 = v10;
            return v1;
          }
          v12 = *(_DWORD *)(v9 + 4);
          switch(v12)
          {
            case 4:
              v16 = *(_QWORD *)(v9 + 8);
              if ((*(_BYTE *)(v9 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v16 & 0xDF) != 0x54
                  || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x48
                  || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x49)
                {
                  goto LABEL_16;
                }
                v17 = *(unsigned __int8 *)(v16 + 3);
              }
              else
              {
                if ((*(_WORD *)v16 & 0xFFDF) != 0x54
                  || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x48
                  || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x49)
                {
                  goto LABEL_16;
                }
                v17 = *(unsigned __int16 *)(v16 + 6);
              }
              if ((v17 & 0xFFFFFFDF) != 0x4E)
                goto LABEL_16;
              v15 = 0x3F0000000000000BLL;
              break;
            case 6:
              v18 = *(_QWORD *)(v9 + 8);
              if ((*(_BYTE *)(v9 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v18 & 0xDF) != 0x4D
                  || (*(_BYTE *)(v18 + 1) & 0xDF) != 0x45
                  || (*(_BYTE *)(v18 + 2) & 0xDF) != 0x44
                  || (*(_BYTE *)(v18 + 3) & 0xDF) != 0x49
                  || (*(_BYTE *)(v18 + 4) & 0xDF) != 0x55)
                {
                  goto LABEL_16;
                }
                v19 = *(unsigned __int8 *)(v18 + 5);
              }
              else
              {
                if ((*(_WORD *)v18 & 0xFFDF) != 0x4D
                  || (*(_WORD *)(v18 + 2) & 0xFFDF) != 0x45
                  || (*(_WORD *)(v18 + 4) & 0xFFDF) != 0x44
                  || (*(_WORD *)(v18 + 6) & 0xFFDF) != 0x49
                  || (*(_WORD *)(v18 + 8) & 0xFFDF) != 0x55)
                {
                  goto LABEL_16;
                }
                v19 = *(unsigned __int16 *)(v18 + 10);
              }
              if ((v19 & 0xFFFFFFDF) != 0x4D)
                goto LABEL_16;
              v15 = 0x3F8000000000000BLL;
              break;
            case 5:
              v13 = *(_QWORD *)(v9 + 8);
              if ((*(_BYTE *)(v9 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v13 & 0xDF) != 0x54
                  || (*(_BYTE *)(v13 + 1) & 0xDF) != 0x48
                  || (*(_BYTE *)(v13 + 2) & 0xDF) != 0x49
                  || (*(_BYTE *)(v13 + 3) & 0xDF) != 0x43)
                {
                  goto LABEL_16;
                }
                v14 = *(unsigned __int8 *)(v13 + 4);
              }
              else
              {
                if ((*(_WORD *)v13 & 0xFFDF) != 0x54
                  || (*(_WORD *)(v13 + 2) & 0xFFDF) != 0x48
                  || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x49
                  || (*(_WORD *)(v13 + 6) & 0xFFDF) != 0x43)
                {
                  goto LABEL_16;
                }
                v14 = *(unsigned __int16 *)(v13 + 8);
              }
              if ((v14 & 0xFFFFFFDF) != 0x4B)
                goto LABEL_16;
              v15 = 0x400000000000000BLL;
              break;
            default:
              goto LABEL_16;
          }
          *((_QWORD *)this + 15) = v15;
          return v1;
        }
      }
      else
      {
        v5 = v3 + 32;
        LODWORD(v6) = v4 >> 5;
        if ((_DWORD)v6)
          goto LABEL_5;
      }
    }
    v7 = (WebCore::MathMLPresentationElement *)MEMORY[0x1E0CBF2F8];
    goto LABEL_14;
  }
  return v1;
}

uint64_t WebCore::MathMLFractionElement::cachedFractionAlignment(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  if (a3[4])
    return *(unsigned int *)a3;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 664) & 0x8000000000000000) != 0)
    goto LABEL_17;
  v4 = *(_QWORD *)(a1 + 104);
  if (!v4)
    goto LABEL_15;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_7;
LABEL_15:
    v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_16;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_15;
LABEL_7:
  v8 = *a2;
  v7 = v7;
  v9 = (uint64_t *)(v6 + 8);
  while (1)
  {
    v10 = *(v9 - 1);
    if (v10 == v8 || *(_QWORD *)(v10 + 24) == *(_QWORD *)(v8 + 24) && *(_QWORD *)(v10 + 32) == *(_QWORD *)(v8 + 32))
      break;
    v9 += 2;
    if (!--v7)
    {
      v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_16:
  v11 = *v9;
  if (!*v9)
    goto LABEL_17;
  v12 = *(_DWORD *)(v11 + 4);
  if (v12 != 4)
  {
    if (v12 == 5)
    {
      v13 = *(_QWORD *)(v11 + 8);
      if ((*(_BYTE *)(v11 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v13 & 0xDF) != 0x52
          || (*(_BYTE *)(v13 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(v13 + 2) & 0xDF) != 0x47
          || (*(_BYTE *)(v13 + 3) & 0xDF) != 0x48)
        {
          goto LABEL_17;
        }
        v14 = *(unsigned __int8 *)(v13 + 4);
      }
      else
      {
        if ((*(_WORD *)v13 & 0xFFDF) != 0x52
          || (*(_WORD *)(v13 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x47
          || (*(_WORD *)(v13 + 6) & 0xFFDF) != 0x48)
        {
          goto LABEL_17;
        }
        v14 = *(unsigned __int16 *)(v13 + 8);
      }
      if ((v14 & 0xFFFFFFDF) == 0x54)
      {
        result = 2;
        *(_DWORD *)a3 = 2;
        goto LABEL_18;
      }
    }
LABEL_17:
    result = 0;
    *(_DWORD *)a3 = 0;
LABEL_18:
    a3[4] = 1;
    return result;
  }
  v15 = *(_QWORD *)(v11 + 8);
  if ((*(_BYTE *)(v11 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v15 & 0xDF) != 0x4C || (*(_BYTE *)(v15 + 1) & 0xDF) != 0x45 || (*(_BYTE *)(v15 + 2) & 0xDF) != 0x46)
      goto LABEL_17;
    v16 = *(unsigned __int8 *)(v15 + 3);
  }
  else
  {
    if ((*(_WORD *)v15 & 0xFFDF) != 0x4C
      || (*(_WORD *)(v15 + 2) & 0xFFDF) != 0x45
      || (*(_WORD *)(v15 + 4) & 0xFFDF) != 0x46)
    {
      goto LABEL_17;
    }
    v16 = *(unsigned __int16 *)(v15 + 6);
  }
  if ((v16 & 0xFFFFFFDF) != 0x54)
    goto LABEL_17;
  result = 1;
  *(_DWORD *)a3 = 1;
  a3[4] = 1;
  return result;
}

void WebCore::MathMLFractionElement::attributeChanged(WebCore::Node *a1, WebCore::HTMLElement *this, WTF::AtomString *a3, const WebCore::QualifiedName *a4, int a5)
{
  int v5;
  _BYTE *v6;

  v5 = *(unsigned __int16 *)(*(_QWORD *)this + 10);
  switch(v5)
  {
    case 428:
      v6 = (char *)a1 + 144;
      if (!*((_BYTE *)a1 + 144))
        break;
      goto LABEL_5;
    case 602:
      v6 = (char *)a1 + 136;
      if (!*((_BYTE *)a1 + 136))
        break;
      goto LABEL_5;
    case 550:
      v6 = (char *)a1 + 128;
      if (*((_BYTE *)a1 + 128))
LABEL_5:
        *v6 = 0;
      break;
  }
  WebCore::MathMLElement::attributeChanged(a1, this, a3, a4, a5);
}

uint64_t WebCore::MathMLFractionElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v6, 54, a1, a2, 76, 0);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E343A178;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = 1;
  v6[25] = v8;
  result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v6 + 168))(v6, 0);
  *v6 = off_1E343C040;
  *a3 = v6;
  return result;
}

uint64_t WebCore::MathMLMathElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v6, 55, a1, a2, 76, 0);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E343A178;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = 1;
  v6[25] = v8;
  result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v6 + 168))(v6, 0);
  *v6 = off_1E343C7D8;
  *a3 = v6;
  return result;
}

void WebCore::MathMLMathElement::attributeChanged(uint64_t a1, WebCore::HTMLElement *this, WTF::AtomString *a3, const WebCore::QualifiedName *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  WebCore::MathMLStyle **v12;
  WebCore::RenderObject *v13;
  WebCore::MathMLStyle **v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)this != WebCore::MathMLNames::mathvariantAttr)
    goto LABEL_22;
  if (*(_BYTE *)(a1 + 116))
    *(_BYTE *)(a1 + 116) = 0;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      v12 = (WebCore::MathMLStyle **)(v10 & 0xFFFFFFFFFFFFLL);
      while (1)
      {
        v13 = (WebCore::RenderObject *)v12;
        if (*((_BYTE *)v12 + 46) == 63)
          break;
        if ((*((unsigned int (**)(WebCore::MathMLStyle **))*v12 + 22))(v12))
        {
          v14 = (WebCore::MathMLStyle **)((char *)v13 + 200);
          goto LABEL_11;
        }
LABEL_12:
        v12 = (WebCore::MathMLStyle **)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v13 + 112))(v13);
        if (!v12)
        {
          if (v13 == (WebCore::RenderObject *)v11)
            goto LABEL_22;
          while (1)
          {
            v15 = *(unsigned int *)((char *)v13 + 47);
            if (v15 | ((unint64_t)*((unsigned __int8 *)v13 + 51) << 32))
            {
              v12 = *(WebCore::MathMLStyle ***)((v15 | ((unint64_t)*((unsigned __int8 *)v13 + 51) << 32)) + 8);
              if (v12)
                break;
            }
            v16 = *((_QWORD *)v13 + 4);
            if (v16)
            {
              v13 = *(WebCore::RenderObject **)(v16 + 8);
              if (v13 && v13 != (WebCore::RenderObject *)v11)
                continue;
            }
            goto LABEL_22;
          }
        }
      }
      v14 = v12 + 45;
LABEL_11:
      WebCore::MathMLStyle::resolveMathMLStyle(*v14, v13);
      goto LABEL_12;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_22:
    WebCore::MathMLElement::attributeChanged((WebCore::Node *)a1, this, a3, a4, a5);
  }
}

uint64_t WebCore::MathMLMathElement::didAttachRenderers(uint64_t this)
{
  uint64_t v1;
  WebCore::RenderObject *v2;
  WebCore::MathMLStyle **v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      this = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
      while (1)
      {
        v2 = (WebCore::RenderObject *)this;
        if (*(_BYTE *)(this + 46) == 63)
          break;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)this + 176))(this))
        {
          v3 = (WebCore::MathMLStyle **)((char *)v2 + 200);
          goto LABEL_8;
        }
LABEL_9:
        this = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v2 + 112))(v2);
        if (!this)
        {
          if (v2 == (WebCore::RenderObject *)v1)
            return this;
          while (1)
          {
            v4 = *(unsigned int *)((char *)v2 + 47);
            if (v4 | ((unint64_t)*((unsigned __int8 *)v2 + 51) << 32))
            {
              this = *(_QWORD *)((v4 | ((unint64_t)*((unsigned __int8 *)v2 + 51) << 32)) + 8);
              if (this)
                break;
            }
            v5 = *((_QWORD *)v2 + 4);
            if (v5)
            {
              v2 = *(WebCore::RenderObject **)(v5 + 8);
              if (v2 && v2 != (WebCore::RenderObject *)v1)
                continue;
            }
            return this;
          }
        }
      }
      v3 = (WebCore::MathMLStyle **)(this + 360);
LABEL_8:
      WebCore::MathMLStyle::resolveMathMLStyle(*v3, v2);
      goto LABEL_9;
    }
    this = 105;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::MathMLMencloseElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v6, 56, a1, a2, 76, 0);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E343A178;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = 1;
  v6[25] = v8;
  result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v6 + 168))(v6, 0);
  *v6 = off_1E343CF70;
  v6[26] = 0;
  v6[27] = 0;
  *a3 = v6;
  return result;
}

uint64_t WebCore::MathMLMencloseElement::addNotationFlags(uint64_t result, const char *a2, uint64_t a3)
{
  BOOL v3;
  __int16 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  BOOL v8;
  BOOL v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint8x16_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint16x8_t v18;
  uint16x8_t v19;
  _BOOL4 v20;
  _BOOL4 v21;
  BOOL v22;
  const char *v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;

  v3 = (_DWORD)a3 != 7;
  if (a2 == "longdiv" || (_DWORD)a3 != 7)
  {
    if (a2 == "longdiv" && (_DWORD)a3 == 7)
      goto LABEL_10;
    if (a2 == "roundedbox" || (_DWORD)a3 != 10)
    {
      if (a2 == "roundedbox" && (_DWORD)a3 == 10)
        goto LABEL_18;
      v20 = a3 == 6;
      v22 = (_DWORD)a3 != 6;
      v21 = a2 == "circle";
      if (a2 != "circle" && (_DWORD)a3 == 6)
      {
        if ((a3 & 0xFF00000000) != 0)
        {
          if (*a2 == 99 && *(_DWORD *)(a2 + 1) == 1818456681 && *(_DWORD *)(a2 + 2) == 1701602162)
            goto LABEL_50;
        }
        else if (*(_WORD *)a2 == 99)
        {
          v22 = 0;
          v9 = 1;
          if (*(_QWORD *)(a2 + 2) == 0x6C006300720069)
          {
            v6 = 0;
            if (*(_QWORD *)(a2 + 4) == 0x65006C00630072)
            {
LABEL_50:
              if (!*(_BYTE *)(result + 122))
                goto LABEL_236;
              v4 = 8;
              goto LABEL_230;
            }
          }
          else
          {
            v6 = 0;
          }
          goto LABEL_59;
        }
        v22 = 0;
LABEL_58:
        v6 = 0;
        v9 = 1;
        goto LABEL_59;
      }
    }
    else
    {
      if ((a3 & 0xFF00000000) != 0)
      {
        if (*a2 != 114 || *(_QWORD *)(a2 + 1) != 0x6F626465646E756FLL || *(_QWORD *)(a2 + 2) != 0x786F626465646E75)
          goto LABEL_23;
LABEL_18:
        if (!*(_BYTE *)(result + 122))
          goto LABEL_236;
        v4 = 4;
        goto LABEL_230;
      }
      if (*(_WORD *)a2 != 114)
        goto LABEL_23;
      v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 2), (int16x8_t)xmmword_1969F2D40);
      v18.i16[0] = vminvq_u16(v18);
      if (!v18.i32[0])
        goto LABEL_23;
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 4), (int16x8_t)xmmword_1969F2D50);
      v19.i16[0] = vminvq_u16(v19);
      if (v19.i32[0])
        goto LABEL_18;
      v20 = 0;
      v21 = a2 == "circle";
      v22 = 1;
    }
    if (v21 && v20)
      goto LABEL_50;
    if (a2 != "left" && (_DWORD)a3 == 4)
    {
      if ((a3 & 0xFF00000000) != 0)
      {
        if (*a2 != 108 || *(_WORD *)(a2 + 1) != 26213 || *((_WORD *)a2 + 1) != 29798)
          goto LABEL_58;
LABEL_70:
        if (!*(_BYTE *)(result + 122))
          goto LABEL_236;
        v4 = 16;
        goto LABEL_230;
      }
      if (*(_WORD *)a2 == 108)
      {
        v6 = 0;
        v9 = 1;
        if (*(_DWORD *)(a2 + 2) == 6684773 && *((_DWORD *)a2 + 1) == 7602278)
          goto LABEL_70;
LABEL_59:
        v23 = "bottom";
        if (a2 == "bottom" || v22)
          goto LABEL_237;
        if ((_DWORD)a3)
        {
          if ((a3 & 0xFF00000000) != 0)
          {
            if (*a2 != 98 || *(_DWORD *)(a2 + 1) != 1869902959 || *(_DWORD *)(a2 + 2) != 1836020852)
              goto LABEL_100;
          }
          else if (*(_WORD *)a2 != 98
                 || *(_QWORD *)(a2 + 2) != 0x6F00740074006FLL
                 || *(_QWORD *)(a2 + 4) != 0x6D006F00740074)
          {
            goto LABEL_100;
          }
        }
        goto LABEL_66;
      }
      goto LABEL_58;
    }
    if (a2 == "left" && (_DWORD)a3 == 4)
      goto LABEL_70;
    if (a2 != "right" && (_DWORD)a3 == 5)
    {
      if ((a3 & 0xFF00000000) != 0)
      {
        if (*a2 != 114 || *(_WORD *)(a2 + 1) != 26473 || *(_WORD *)(a2 + 3) != 29800)
          goto LABEL_58;
      }
      else if (*(_WORD *)a2 != 114 || *(_QWORD *)(a2 + 2) != 0x74006800670069)
      {
        goto LABEL_58;
      }
LABEL_81:
      if (!*(_BYTE *)(result + 122))
        goto LABEL_236;
      v4 = 32;
      goto LABEL_230;
    }
    if (a2 == "right" && (_DWORD)a3 == 5)
      goto LABEL_81;
    v6 = a3 == 3;
    v9 = (_DWORD)a3 != 3;
    if (a2 == "top" || (_DWORD)a3 != 3)
    {
      if (a2 != "top" || (_DWORD)a3 != 3)
        goto LABEL_59;
    }
    else if ((a3 & 0xFF00000000) != 0)
    {
      if (*a2 != 116 || *(_WORD *)(a2 + 1) != 28783)
      {
LABEL_88:
        v9 = 0;
        goto LABEL_59;
      }
    }
    else if (*(_WORD *)a2 != 116 || *(_DWORD *)(a2 + 2) != 7340143)
    {
      goto LABEL_88;
    }
    if (!*(_BYTE *)(result + 122))
      goto LABEL_236;
    v4 = 64;
    goto LABEL_230;
  }
  if ((a3 & 0xFF00000000) != 0)
  {
    if (*a2 != 108 || *(_DWORD *)(a2 + 1) != 1684500079 || *(_DWORD *)(a2 + 3) != 1986618471)
    {
LABEL_23:
      v5 = 0;
      v6 = 0;
      v7 = a2 == "updiagonalstrike";
      v8 = 1;
      v9 = 1;
      goto LABEL_24;
    }
  }
  else if (*(_WORD *)a2 != 108
         || *(_QWORD *)(a2 + 2) != 0x640067006E006FLL
         || *(_QWORD *)(a2 + 6) != 0x76006900640067)
  {
    goto LABEL_23;
  }
LABEL_10:
  if (!*(_BYTE *)(result + 122))
  {
    while (1)
    {
      while (1)
      {
LABEL_236:
        while (1)
        {
          result = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_237:
          if (a2 != v23)
            v20 = 0;
          if (!v20)
            break;
LABEL_66:
          if (*(_BYTE *)(result + 122))
          {
            v4 = 128;
            goto LABEL_230;
          }
        }
LABEL_100:
        v5 = a3 == 16;
        v8 = (_DWORD)a3 != 16;
        v7 = a2 == "updiagonalstrike";
        if (a2 != "updiagonalstrike" && (_DWORD)a3 == 16)
          break;
LABEL_24:
        if (v7 && v5)
          goto LABEL_26;
        v10 = a3 == 18;
        v11 = a2 == "downdiagonalstrike";
        if (a2 == "downdiagonalstrike" || (_DWORD)a3 != 18)
        {
LABEL_142:
          if (v11 && v10)
            goto LABEL_33;
          v16 = a3 == 14;
          v17 = a2 == "verticalstrike";
          if (a2 == "verticalstrike" || (_DWORD)a3 != 14)
            goto LABEL_40;
          if ((a3 & 0xFF00000000) != 0)
          {
            if (*a2 != 118
              || *(_QWORD *)(a2 + 1) != 0x736C616369747265
              || *(_QWORD *)(a2 + 6) != 0x656B697274736C61)
            {
              goto LABEL_107;
            }
LABEL_42:
            if (*(_BYTE *)(result + 122))
            {
              v4 = 1024;
              goto LABEL_230;
            }
          }
          else
          {
            if (*(_WORD *)a2 == 118)
            {
              v32 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 2), (int16x8_t)xmmword_1969F2DC0);
              v32.i16[0] = vminvq_u16(v32);
              if (v32.i32[0])
              {
                v33 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 12), (int16x8_t)xmmword_1969F2D70);
                v33.i16[0] = vminvq_u16(v33);
                if (v33.i32[0])
                  goto LABEL_42;
              }
            }
LABEL_107:
            if (a2 == "horizontalstrike" || v8)
            {
              if (a2 != "horizontalstrike")
                v5 = 0;
              if (v5)
                goto LABEL_128;
              goto LABEL_117;
            }
            if ((a3 & 0xFF00000000) != 0)
            {
              if (*a2 == 104
                && *(_QWORD *)(a2 + 1) == 0x61746E6F7A69726FLL
                && *((_QWORD *)a2 + 1) == 0x656B697274736C61)
              {
                goto LABEL_128;
              }
LABEL_191:
              if (a2 == "box")
                v9 = 1;
              else
                v6 = 0;
              if (v9)
                goto LABEL_200;
              if (!(_DWORD)a3)
                goto LABEL_201;
              if ((a3 & 0xFF00000000) != 0)
                goto LABEL_197;
              if (*(_WORD *)a2 == 98 && *(_DWORD *)(a2 + 2) == 7864431)
                goto LABEL_201;
LABEL_205:
              if (a2 == "actuarial" || (_DWORD)a3 != 9)
              {
                if (a2 != "actuarial" || (_DWORD)a3 != 9)
                  goto LABEL_218;
                goto LABEL_214;
              }
              if ((a3 & 0xFF00000000) != 0)
              {
                if (*a2 == 97 && *(_DWORD *)(a2 + 1) == 1635087459 && *(_DWORD *)(a2 + 5) == 1818323314)
                  goto LABEL_214;
LABEL_218:
                if (a2 == "madruwb")
                  v3 = 1;
                if (v3)
                {
                  if (a2 != "madruwb" || (_DWORD)a3 != 7)
                    return result;
                }
                else if ((a3 & 0xFF00000000) != 0)
                {
                  if (*a2 != 109 || *(_DWORD *)(a2 + 1) != 1970431073 || *(_DWORD *)(a2 + 3) != 1651996018)
                    return result;
                }
                else if (*(_WORD *)a2 != 109
                       || *(_QWORD *)(a2 + 2) != 0x75007200640061
                       || *(_QWORD *)(a2 + 6) != 0x62007700750072)
                {
                  return result;
                }
                if (*(_BYTE *)(result + 122))
                {
                  v4 = 160;
                  goto LABEL_230;
                }
              }
              else
              {
                if (*(_WORD *)a2 != 97)
                  goto LABEL_218;
                v36 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 2), (int16x8_t)xmmword_1969F2E10);
                v36.i16[0] = vminvq_u16(v36);
                if (!v36.i32[0])
                  goto LABEL_218;
LABEL_214:
                if (*(_BYTE *)(result + 122))
                {
                  v4 = 96;
                  goto LABEL_230;
                }
              }
            }
            else
            {
              if (*(_WORD *)a2 != 104)
                goto LABEL_191;
              v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 2), (int16x8_t)xmmword_1969F2DD0);
              v24.i16[0] = vminvq_u16(v24);
              if (!v24.i32[0])
                goto LABEL_191;
              v25 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a2 + 1), (int16x8_t)xmmword_1969F2D70);
              v25.i16[0] = vminvq_u16(v25);
              if (v25.i32[0])
              {
LABEL_128:
                if (*(_BYTE *)(result + 122))
                {
                  v4 = 2048;
                  goto LABEL_230;
                }
              }
              else
              {
LABEL_117:
                if (a2 == "updiagonalarrow" || (_DWORD)a3 != 15)
                {
                  if (a2 == "updiagonalarrow" && (_DWORD)a3 == 15)
                    goto LABEL_123;
                  v28 = a3 == 11;
                  v29 = a2 == "phasorangle";
                  if (a2 == "phasorangle" || (_DWORD)a3 != 11)
                    goto LABEL_134;
                  if ((a3 & 0xFF00000000) == 0)
                  {
                    if (*(_WORD *)a2 != 112)
                      goto LABEL_191;
                    v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 2), (int16x8_t)xmmword_1969F2DF0);
                    v34.i16[0] = vminvq_u16(v34);
                    if (!v34.i32[0])
                      goto LABEL_191;
                    v35 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 6), (int16x8_t)xmmword_1969F2E00);
                    v35.i16[0] = vminvq_u16(v35);
                    if (!v35.i32[0])
                      goto LABEL_191;
                    goto LABEL_136;
                  }
                  if (*a2 != 112 || *(_QWORD *)(a2 + 1) != 0x676E61726F736168)
                    goto LABEL_191;
                  if (*(_QWORD *)(a2 + 3) == 0x656C676E61726F73)
                  {
LABEL_136:
                    if (*(_BYTE *)(result + 122))
                    {
                      v4 = 0x2000;
                      goto LABEL_230;
                    }
                  }
                  else
                  {
                    if (a2 == "box")
                      v9 = 1;
                    else
                      v6 = 0;
                    if (v9)
                    {
LABEL_200:
                      if (!v6)
                        goto LABEL_205;
                      goto LABEL_201;
                    }
LABEL_197:
                    if (*a2 != 98 || *(_WORD *)(a2 + 1) != 30831)
                      goto LABEL_205;
LABEL_201:
                    if (*(_BYTE *)(result + 122))
                    {
                      v4 = 240;
                      goto LABEL_230;
                    }
                  }
                }
                else
                {
                  if ((a3 & 0xFF00000000) == 0)
                  {
                    if (*(_WORD *)a2 != 117)
                      goto LABEL_191;
                    v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 2), (int16x8_t)xmmword_1969F2D60);
                    v26.i16[0] = vminvq_u16(v26);
                    if (!v26.i32[0])
                      goto LABEL_191;
                    v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 14), (int16x8_t)xmmword_1969F2DE0);
                    v27.i16[0] = vminvq_u16(v27);
                    v28 = v27.i32[0];
                    if (v27.i32[0])
                      goto LABEL_123;
                    v29 = a2 == "phasorangle";
LABEL_134:
                    if (!v29 || !v28)
                      goto LABEL_191;
                    goto LABEL_136;
                  }
                  if (*a2 != 117
                    || *(_QWORD *)(a2 + 1) != 0x616E6F6761696470
                    || *(_QWORD *)(a2 + 7) != 0x776F7272616C616ELL)
                  {
                    goto LABEL_191;
                  }
LABEL_123:
                  if (*(_BYTE *)(result + 122))
                  {
                    v4 = 4096;
                    goto LABEL_230;
                  }
                }
              }
            }
          }
        }
        else
        {
          if ((a3 & 0xFF00000000) != 0)
          {
            if (*a2 != 100)
              goto LABEL_107;
            v12 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(a2 + 2), (int8x16_t)xmmword_1969F2D90), vceqq_s8(*(int8x16_t *)(a2 + 1), (int8x16_t)xmmword_1969F2D80));
            v12.i8[0] = vminvq_u8(v12);
            if (!v12.i32[0])
              goto LABEL_107;
          }
          else
          {
            if (*(_WORD *)a2 != 100)
              goto LABEL_107;
            v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 2), (int16x8_t)xmmword_1969F2DA0);
            v13.i16[0] = vminvq_u16(v13);
            if (!v13.i32[0])
              goto LABEL_107;
            v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 4), (int16x8_t)xmmword_1969F2DB0);
            v14.i16[0] = vminvq_u16(v14);
            if (!v14.i32[0]
              || (v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 20), (int16x8_t)xmmword_1969F2D70),
                  v15.i16[0] = vminvq_u16(v15),
                  !v15.i32[0]))
            {
              v16 = 0;
              v17 = a2 == "verticalstrike";
LABEL_40:
              if (v17 && v16)
                goto LABEL_42;
              goto LABEL_107;
            }
          }
LABEL_33:
          if (*(_BYTE *)(result + 122))
          {
            v4 = 512;
            goto LABEL_230;
          }
        }
      }
      if ((a3 & 0xFF00000000) != 0)
      {
        if (*a2 != 117 || *(_QWORD *)(a2 + 1) != 0x616E6F6761696470 || *((_QWORD *)a2 + 1) != 0x656B697274736C61)
        {
LABEL_106:
          v8 = 0;
          goto LABEL_107;
        }
        goto LABEL_26;
      }
      if (*(_WORD *)a2 != 117)
        goto LABEL_106;
      v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 2), (int16x8_t)xmmword_1969F2D60);
      v30.i16[0] = vminvq_u16(v30);
      v8 = v30.i8[0];
      if (!v30.i32[0])
        goto LABEL_107;
      v31 = (uint16x8_t)vceqq_s16(*((int16x8_t *)a2 + 1), (int16x8_t)xmmword_1969F2D70);
      v31.i16[0] = vminvq_u16(v31);
      v8 = v31.i8[0];
      if (!v31.i32[0])
      {
        v10 = 0;
        v11 = a2 == "downdiagonalstrike";
        goto LABEL_142;
      }
LABEL_26:
      if (*(_BYTE *)(result + 122))
      {
        v4 = 256;
        goto LABEL_230;
      }
    }
  }
  v4 = 2;
LABEL_230:
  *(_WORD *)(result + 120) |= v4;
  return result;
}

void WebCore::MathMLMencloseElement::parseNotationAttribute(WebCore::MathMLMencloseElement *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v28;
  uint64_t v29;
  const char *v30;
  unsigned int v31;
  uint64_t v32;
  const char *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v42;
  uint64_t v43;
  const char *v44;
  WebCore::Node *v45;
  WebCore::HTMLElement *v46;
  WTF::AtomString *v47;
  const WebCore::QualifiedName *v48;
  int v49;

  if (!*((_BYTE *)this + 122))
    *((_BYTE *)this + 122) = 1;
  *((_WORD *)this + 60) = 0;
  if (WebCore::Element::hasAttribute(this, (const WebCore::QualifiedName *)&WebCore::MathMLNames::notationAttr, a4, a5, a2))
  {
    v6 = *((_QWORD *)this + 13);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 & 1) != 0)
      {
        v8 = *(_QWORD *)(v6 + 40);
        LODWORD(v9) = *(_DWORD *)(v6 + 52);
        if ((_DWORD)v9)
        {
LABEL_7:
          v9 = v9;
          v10 = (uint64_t *)(v8 + 8);
          do
          {
            v11 = *(v10 - 1);
            if (v11 == WebCore::MathMLNames::notationAttr
              || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::MathMLNames::notationAttr + 24)
              && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::MathMLNames::notationAttr + 32))
            {
              goto LABEL_18;
            }
            v10 += 2;
            --v9;
          }
          while (v9);
          v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          goto LABEL_18;
        }
      }
      else
      {
        v8 = v6 + 32;
        LODWORD(v9) = v7 >> 5;
        if ((_DWORD)v9)
          goto LABEL_7;
      }
    }
    v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_18:
    v12 = *v10;
    if (!v12)
      return;
    v13 = *(unsigned int *)(v12 + 4);
    v14 = v13 | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
    if (!(_DWORD)v13)
      return;
    v15 = *(const char **)(v12 + 8);
    v16 = v13;
    if ((v14 & 0xFF00000000) == 0)
    {
      v17 = 0;
      while (1)
      {
        v18 = v17;
        v19 = &v15[2 * v17];
        v20 = *(unsigned __int16 *)v19;
        v21 = v20 > 0x20;
        v22 = (1 << v20) & 0x100003600;
        if (v21 || v22 == 0)
          break;
        ++v17;
LABEL_27:
        if (v17 >= v14)
          return;
      }
      v24 = 0;
      if (v17 + 1 > v14)
        ++v17;
      else
        v17 = v14;
      while ((int)v18 + (int)v24 + 1 < v14)
      {
        v25 = *(unsigned __int16 *)&v15[2 * (v18 + 1) + 2 * v24++];
        v21 = v25 > 0x20;
        v26 = (1 << v25) & 0x100003600;
        if (!v21 && v26 != 0)
        {
          v17 = v18 + v24;
          break;
        }
      }
      v28 = v17 - v18;
      if ((int)v14 - (int)v18 <= v17 - v18)
      {
        v30 = v15;
        v29 = v14;
        if (!(_DWORD)v18)
        {
LABEL_42:
          WebCore::MathMLMencloseElement::addNotationFlags((uint64_t)this, v30, v29);
          goto LABEL_27;
        }
        v28 = v14 - v18;
      }
      if (v16 - v18 < (unint64_t)v28)
        goto LABEL_68;
      v29 = v28;
      v30 = v19;
      goto LABEL_42;
    }
    v31 = 0;
    while (1)
    {
      v32 = v31;
      v33 = &v15[v31];
      v34 = *(unsigned __int8 *)v33;
      v21 = v34 > 0x20;
      v35 = (1 << v34) & 0x100003600;
      if (v21 || v35 == 0)
        break;
      ++v31;
LABEL_50:
      if (v31 >= v14)
        return;
    }
    v37 = 0;
    v38 = v31 + 1;
    if (v38 > v14)
      ++v31;
    else
      v31 = v14;
    while ((int)v38 + (int)v37 < v14)
    {
      v39 = v15[v38 + v37++];
      v21 = v39 > 0x20;
      v40 = (1 << v39) & 0x100003600;
      if (!v21 && v40 != 0)
      {
        v31 = v32 + v37;
        break;
      }
    }
    v42 = v31 - v32;
    if ((int)v14 - (int)v32 <= v31 - v32)
    {
      v44 = v15;
      v43 = v14;
      if (!(_DWORD)v32)
      {
LABEL_65:
        WebCore::MathMLMencloseElement::addNotationFlags((uint64_t)this, v44, v43);
        goto LABEL_50;
      }
      v42 = v14 - v32;
    }
    if (v16 - v32 < (unint64_t)v42)
    {
LABEL_68:
      __break(1u);
LABEL_69:
      v45 = (WebCore::Node *)std::__throw_bad_optional_access[abi:sn180100]();
      WebCore::MathMLMencloseElement::attributeChanged(v45, v46, v47, v48, v49);
      return;
    }
    v43 = v42 | 0x100000000;
    v44 = v33;
    goto LABEL_65;
  }
  if (!*((_BYTE *)this + 122))
    goto LABEL_69;
  *((_WORD *)this + 60) |= 2u;
}

void WebCore::MathMLMencloseElement::attributeChanged(WebCore::Node *a1, WebCore::HTMLElement *this, WTF::AtomString *a3, const WebCore::QualifiedName *a4, int a5)
{
  if (*(_QWORD *)this == WebCore::MathMLNames::notationAttr && *((_BYTE *)a1 + 122))
    *((_BYTE *)a1 + 122) = 0;
  WebCore::MathMLPresentationElement::attributeChanged(a1, this, a3, a4, a5);
}

unint64_t WebCore::MathMLOperatorDictionary::search(unsigned int a1, unsigned int a2, char a3)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;

  v3 = 0;
  if (!a1)
    goto LABEL_22;
  v4 = 1061;
  v5 = (char *)&WebCore::dictionary;
  do
  {
    v7 = (char *)&WebCore::dictionary + 8 * v3 + 8 * ((v4 - 1) >> 1);
    v8 = *((unsigned __int16 *)v7 + 2);
    v9 = v8 & 3;
    v10 = *(_DWORD *)v7;
    v11 = v10 == a1 && v9 == a2;
    if (v11)
      goto LABEL_23;
    v6 = v4 - 1;
    v12 = (v4 - 1) >> 1;
    v11 = v9 == a2;
    v13 = (unint64_t)(v9 > a2) << 7;
    if (v11)
      v13 = 0;
    v11 = v10 == a1;
    v14 = (unint64_t)(v10 > a1) << 7;
    if (!v11)
      v13 = v14;
    v4 -= v12 + 1;
    if (v13)
    {
      v4 = v6 >> 1;
      v15 = 0;
    }
    else
    {
      v15 = v12 + 1;
    }
    v3 += v15;
  }
  while (v4 > 1);
  if (v4)
  {
    v16 = (char *)&WebCore::dictionary + 8 * v3;
    v8 = *((unsigned __int16 *)v16 + 2);
    v9 = v8 & 3;
    if (*(_DWORD *)v16 == a1 && v9 == a2)
    {
LABEL_23:
      v18 = ((unint64_t)((v8 >> 2) & 7) << 32) | ((unint64_t)(v8 >> 5) << 48);
      LOBYTE(v3) = v9;
      return v18 | v3;
    }
  }
  if ((a3 & 1) == 0)
  {
    v20 = 0;
    v21 = 1061;
    do
    {
      v22 = v21 - 1;
      v23 = (char *)&WebCore::dictionary + 8 * v20 + 8 * ((v21 - 1) >> 1);
      if (*(_DWORD *)v23 == a1)
        goto LABEL_33;
      v21 -= (v22 >> 1) + 1;
      if (*(_DWORD *)v23 <= a1)
      {
        v24 = (v22 >> 1) + 1;
      }
      else
      {
        v21 = v22 >> 1;
        v24 = 0;
      }
      v20 += v24;
    }
    while (v21 > 1);
    if (!v21)
    {
      LOBYTE(v3) = 0;
      goto LABEL_22;
    }
    v23 = (char *)&WebCore::dictionary + 8 * v20;
    if (*(_DWORD *)v23 != a1)
      goto LABEL_21;
LABEL_33:
    if (v23 != (char *)&WebCore::dictionary)
    {
      v25 = *((_DWORD *)v23 - 2);
      if (v25 != a1)
      {
LABEL_37:
        if (v25 == a1)
          v26 = -1;
        else
          v26 = 0;
        v5 = &v23[8 * v26];
        goto LABEL_41;
      }
      if (v23 - 8 != (char *)&WebCore::dictionary)
      {
        v25 = *((_DWORD *)v23 - 4);
        v23 -= 8;
        goto LABEL_37;
      }
    }
LABEL_41:
    v27 = *((unsigned __int16 *)v5 + 2);
    v18 = ((unint64_t)((v27 >> 2) & 7) << 32) | ((unint64_t)(v27 >> 5) << 48);
    LOBYTE(v3) = v27 & 3;
    return v18 | v3;
  }
LABEL_21:
  LOBYTE(v3) = 0;
LABEL_22:
  v18 = 0;
  return v18 | v3;
}

char *WebCore::MathMLOperatorElement::operatorChar(WebCore::MathMLOperatorElement *this, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringBuilder *a6)
{
  char *v6;
  WTF::StringImpl *v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::MathMLOperatorElement *v22;
  const char **v23;

  v6 = (char *)this + 120;
  if (*((_BYTE *)this + 128))
    return v6;
  WebCore::Node::textContent(this, 0, a6, (WTF::StringImpl **)&v23, a2);
  v8 = (WTF::StringImpl *)v23;
  if (v23)
  {
    v9 = v23[1];
    v10 = *((unsigned int *)v23 + 1) | ((unint64_t)((*((_DWORD *)v23 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v9 = 0;
    v10 = 0x100000000;
  }
  v11 = WebCore::MathMLTokenElement::convertToSingleCodePoint(v9, v10);
  if ((v11 & 0xFF00000000) != 0)
  {
    v13 = 0;
    if ((_DWORD)v11 == 45)
      v14 = 8722;
    else
      v14 = v11;
    v15 = 110;
    do
    {
      v16 = WebCore::horizontalOperators[v13 + ((v15 - 1) >> 1)];
      if (v16 == (_DWORD)v14)
      {
        v19 = 0;
        goto LABEL_19;
      }
      v17 = (v15 - 1) >> 1;
      v15 -= v17 + 1;
      if (v16 <= v14)
      {
        v18 = v17 + 1;
      }
      else
      {
        v15 = v17;
        v18 = 0;
      }
      v13 += v18;
    }
    while (v15 > 1);
    if (!v15)
      goto LABEL_17;
    v19 = WebCore::horizontalOperators[v13] != (_DWORD)v14;
  }
  else
  {
    v14 = 0;
LABEL_17:
    v19 = 1;
  }
LABEL_19:
  v20 = v14 | (v19 << 32);
  if (*((_BYTE *)this + 128))
  {
    *(_DWORD *)v6 = v20;
    v6[4] = BYTE4(v20);
    if (!v8)
      return v6;
  }
  else
  {
    *((_QWORD *)this + 15) = v20;
    *((_BYTE *)this + 128) = 1;
    if (!v8)
      return v6;
  }
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
    return v6;
  }
  WTF::StringImpl::destroy(v8, v12);
  if (*((_BYTE *)this + 128))
    return v6;
  v22 = (WebCore::MathMLOperatorElement *)std::__throw_bad_optional_access[abi:sn180100]();
  return (char *)WebCore::MathMLOperatorElement::computeDictionaryProperty(v22);
}

unint64_t WebCore::MathMLOperatorElement::computeDictionaryProperty(WebCore::MathMLOperatorElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringBuilder *v11;
  __n128 v12;
  unsigned int v13;
  char v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (_QWORD *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::MathMLNames::formAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::MathMLNames::formAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::MathMLNames::formAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if ((MEMORY[0x19AEA53F4](*v6, "prefix", 6) & 1) != 0)
  {
    v13 = 1;
LABEL_17:
    v14 = 1;
    goto LABEL_18;
  }
  if ((MEMORY[0x19AEA53F4](*v6, "infix", 5) & 1) != 0)
  {
    v13 = 0;
    goto LABEL_17;
  }
  if ((MEMORY[0x19AEA53F4](*v6, "postfix", 7) & 1) != 0)
  {
    v14 = 1;
LABEL_26:
    v13 = 2;
    goto LABEL_18;
  }
  v21 = *((_QWORD *)this + 7);
  if ((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (!v21)
    {
      v14 = 0;
      goto LABEL_26;
    }
  }
  else if (v21)
  {
    v14 = 0;
    v13 = 1;
    goto LABEL_18;
  }
  v13 = 0;
  v14 = 0;
LABEL_18:
  v15 = (unsigned int *)WebCore::MathMLOperatorElement::operatorChar(this, v12, v8, v9, v10, v11);
  v16 = WebCore::MathMLOperatorDictionary::search(*v15, v13, v14);
  v18 = v16 & 0xFFFFFFFF00000000;
  if ((v17 & 0xFF00000000) != 0)
    v19 = v16;
  else
    v19 = v13;
  if ((v17 & 0xFF00000000) == 0)
    v18 = 0x5000500000000;
  return v18 | v19;
}

unint64_t WebCore::MathMLOperatorElement::computeOperatorFlag(unint64_t this, int a2)
{
  unsigned __int16 v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;

  v2 = a2;
  v3 = this;
  if (a2 > 15)
  {
    switch(a2)
    {
      case 16:
        v4 = &WebCore::MathMLNames::separatorAttr;
        break;
      case 32:
        v4 = &WebCore::MathMLNames::stretchyAttr;
        break;
      case 64:
        v4 = &WebCore::MathMLNames::symmetricAttr;
        break;
      default:
LABEL_12:
        v4 = &WebCore::nullName;
        break;
    }
  }
  else
  {
    v4 = &WebCore::MathMLNames::accentAttr;
    switch(a2)
    {
      case 1:
        break;
      case 2:
        v4 = &WebCore::MathMLNames::fenceAttr;
        break;
      case 4:
        v4 = &WebCore::MathMLNames::largeopAttr;
        break;
      case 8:
        v4 = &WebCore::MathMLNames::movablelimitsAttr;
        break;
      default:
        goto LABEL_12;
    }
  }
  v5 = *(_QWORD *)(this + 104);
  if (!v5)
    goto LABEL_24;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) == 0)
  {
    v7 = v5 + 32;
    LODWORD(v8) = v6 >> 5;
    if ((_DWORD)v8)
      goto LABEL_16;
LABEL_24:
    v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_25;
  }
  v7 = *(_QWORD *)(v5 + 40);
  LODWORD(v8) = *(_DWORD *)(v5 + 52);
  if (!(_DWORD)v8)
    goto LABEL_24;
LABEL_16:
  v9 = *v4;
  v8 = v8;
  v10 = (uint64_t *)(v7 + 8);
  while (1)
  {
    v11 = *(v10 - 1);
    if (v11 == v9 || *(_QWORD *)(v11 + 24) == *(_QWORD *)(v9 + 24) && *(_QWORD *)(v11 + 32) == *(_QWORD *)(v9 + 32))
      break;
    v10 += 2;
    if (!--v8)
    {
      v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_25:
  v12 = *v10;
  if (v12 == WebCore::falseAtomData)
    v13 = 1;
  else
    v13 = 2;
  if (v12 == WebCore::trueAtomData)
    v14 = 0;
  else
    v14 = v13;
  if (v14 == 2)
  {
    if (*(_BYTE *)(this + 144))
    {
      LOWORD(v16) = *(_WORD *)(this + 140);
    }
    else
    {
      this = WebCore::MathMLOperatorElement::computeDictionaryProperty((WebCore::MathMLOperatorElement *)this);
      if (*(_BYTE *)(v3 + 144))
      {
        *(_QWORD *)(v3 + 132) = this;
        *(_WORD *)(v3 + 140) = v16;
      }
      else
      {
        *(_QWORD *)(v3 + 132) = this;
        *(_DWORD *)(v3 + 140) = v16;
        *(_BYTE *)(v3 + 144) = 1;
      }
    }
    v15 = *(_WORD *)(v3 + 148);
    if (((unsigned __int16)v16 & v2) != 0)
      goto LABEL_41;
LABEL_42:
    v17 = v15 & ~v2;
    goto LABEL_43;
  }
  if (v14 == 1)
  {
    v15 = *(_WORD *)(this + 148);
    goto LABEL_42;
  }
  v15 = *(_WORD *)(this + 148);
LABEL_41:
  v17 = v15 | v2;
LABEL_43:
  *(_WORD *)(v3 + 148) = v17;
  return this;
}

unsigned int *WebCore::MathMLOperatorElement::childrenChanged(uint64_t a1, _BYTE *a2)
{
  unsigned int *result;
  _BYTE *v4;

  if (*(_BYTE *)(a1 + 128))
    *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a1 + 144))
    *(_BYTE *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 150) = 127;
  result = WebCore::Element::childrenChanged(a1, a2);
  v4 = (_BYTE *)(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL);
  if (v4)
  {
    if ((v4[45] & 2) != 0)
      goto LABEL_11;
    result = (unsigned int *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 208))(v4);
    if ((_DWORD)result)
    {
      if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 208))(v4) & 1) != 0)
        return (unsigned int *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 1928))(v4);
LABEL_11:
      __break(0xC471u);
      JUMPOUT(0x195F6A324);
    }
  }
  return result;
}

void WebCore::MathMLOperatorElement::attributeChanged(uint64_t a1, WebCore::HTMLElement *a2, WTF::AtomString *a3, const WebCore::QualifiedName *a4, int a5)
{
  unsigned int v10;
  __int16 v11;
  uint64_t v12;
  WebCore::RenderMathMLToken *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v10 > 0x24A)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) > 0x339u)
    {
      if (v10 == 826)
      {
        v11 = *(_WORD *)(a1 + 150) | 0x10;
        goto LABEL_44;
      }
      if (v10 != 856)
      {
        if (v10 != 872)
          goto LABEL_50;
        v11 = *(_WORD *)(a1 + 150) | 0x40;
        goto LABEL_44;
      }
      *(_WORD *)(a1 + 150) |= 0x20u;
      v16 = *(_QWORD *)(a1 + 64);
      v13 = (WebCore::RenderMathMLToken *)(v16 & 0xFFFFFFFFFFFFLL);
      if ((v16 & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_50;
      if ((*(_BYTE *)((v16 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F6A664);
      }
      if (((*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)v13 + 184))(v13) & 1) == 0)
        goto LABEL_55;
    }
    else
    {
      if (v10 == 587)
      {
        if (*(_BYTE *)(a1 + 184))
          *(_BYTE *)(a1 + 184) = 0;
        goto LABEL_50;
      }
      if (v10 == 589)
      {
        *(_WORD *)(a1 + 150) |= 8u;
        v14 = *(_QWORD *)(a1 + 64);
        v13 = (WebCore::RenderMathMLToken *)(v14 & 0xFFFFFFFFFFFFLL);
        if ((v14 & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_50;
        if ((*(_BYTE *)((v14 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F6A624);
        }
        if (((*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)v13 + 184))(v13) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F6A4ECLL);
        }
        goto LABEL_48;
      }
      if (v10 != 810)
        goto LABEL_50;
      if (*(_BYTE *)(a1 + 172))
        *(_BYTE *)(a1 + 172) = 0;
      v12 = *(_QWORD *)(a1 + 64);
      v13 = (WebCore::RenderMathMLToken *)(v12 & 0xFFFFFFFFFFFFLL);
      if ((v12 & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_50;
      if ((*(_BYTE *)((v12 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F6A604);
      }
      if (((*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)v13 + 184))(v13) & 1) == 0)
      {
LABEL_55:
        __break(0xC471u);
        JUMPOUT(0x195F6A424);
      }
    }
LABEL_48:
    WebCore::RenderMathMLToken::updateTokenContent(v13);
    if ((*(unsigned int (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)v13 + 2000))(v13))
      (*(void (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)v13 + 1960))(v13);
    goto LABEL_50;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x21Fu)
  {
    switch(v10)
    {
      case 0x115u:
        v11 = *(_WORD *)(a1 + 150) | 1;
        break;
      case 0x1CBu:
        v11 = *(_WORD *)(a1 + 150) | 2;
        break;
      case 0x1E2u:
        if (*(_BYTE *)(a1 + 144))
          *(_BYTE *)(a1 + 144) = 0;
        v11 = 127;
        break;
      default:
        goto LABEL_50;
    }
LABEL_44:
    *(_WORD *)(a1 + 150) = v11;
    goto LABEL_50;
  }
  if (v10 == 544)
  {
    v11 = *(_WORD *)(a1 + 150) | 4;
    goto LABEL_44;
  }
  if (v10 != 561)
  {
    if (v10 == 580 && *(_BYTE *)(a1 + 196))
      *(_BYTE *)(a1 + 196) = 0;
    goto LABEL_50;
  }
  if (*(_BYTE *)(a1 + 160))
    *(_BYTE *)(a1 + 160) = 0;
  v15 = *(_QWORD *)(a1 + 64);
  v13 = (WebCore::RenderMathMLToken *)(v15 & 0xFFFFFFFFFFFFLL);
  if ((v15 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v15 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F6A644);
    }
    if (((*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)v13 + 184))(v13) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F6A54CLL);
    }
    goto LABEL_48;
  }
LABEL_50:
  WebCore::MathMLPresentationElement::attributeChanged((WebCore::Node *)a1, a2, a3, a4, a5);
}

uint64_t WebCore::MathMLOperatorElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, WebCore::RenderMathMLToken **a3@<X8>)
{
  WebCore::RenderMathMLToken *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v6 = (WebCore::RenderMathMLToken *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v6, 57, a1, a2, 76, 0);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E343A178;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = 1;
  *((_QWORD *)v6 + 25) = v8;
  (*(void (**)(WebCore::RenderMathMLToken *, _QWORD))(*(_QWORD *)v6 + 168))(v6, 0);
  *((_BYTE *)v6 + 208) = 0;
  *((_BYTE *)v6 + 212) = 0;
  *((_WORD *)v6 + 108) = 0;
  *(_QWORD *)v6 = off_1E343D708;
  *(_QWORD *)((char *)v6 + 220) = 0;
  *(_QWORD *)((char *)v6 + 225) = 0;
  *((_QWORD *)v6 + 30) = 0;
  *((_DWORD *)v6 + 59) = 0;
  *((_QWORD *)v6 + 35) = 0;
  *((_QWORD *)v6 + 36) = 0;
  *((_QWORD *)v6 + 37) = 0x3F80000000000000;
  *((_WORD *)v6 + 124) = 0;
  WebCore::RenderMathMLToken::updateTokenContent(v6);
  result = (*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)v6 + 2000))(v6);
  if ((_DWORD)result)
    result = (*(uint64_t (**)(WebCore::RenderMathMLToken *))(*(_QWORD *)v6 + 1960))(v6);
  *a3 = v6;
  return result;
}

void WebCore::MathMLPaddedElement::attributeChanged(WebCore::Node *a1, WebCore::HTMLElement *this, WTF::AtomString *a3, const WebCore::QualifiedName *a4, int a5)
{
  unsigned int v5;
  _BYTE *v6;

  v5 = *(unsigned __int16 *)(*(_QWORD *)this + 10);
  if (v5 > 0x230)
  {
    switch(v5)
    {
      case 0x231u:
        v6 = (char *)a1 + 164;
        if (!*((_BYTE *)a1 + 164))
          goto LABEL_6;
        break;
      case 0x38Fu:
        v6 = (char *)a1 + 176;
        if (!*((_BYTE *)a1 + 176))
          goto LABEL_6;
        break;
      case 0x39Au:
        v6 = (char *)a1 + 128;
        if (!*((_BYTE *)a1 + 128))
          goto LABEL_6;
        break;
      default:
        goto LABEL_6;
    }
LABEL_16:
    *v6 = 0;
    goto LABEL_6;
  }
  if (v5 == 429)
  {
    v6 = (char *)a1 + 152;
    if (!*((_BYTE *)a1 + 152))
      goto LABEL_6;
    goto LABEL_16;
  }
  if (v5 == 504)
  {
    v6 = (char *)a1 + 140;
    if (*((_BYTE *)a1 + 140))
      goto LABEL_16;
  }
LABEL_6:
  WebCore::MathMLElement::attributeChanged(a1, this, a3, a4, a5);
}

uint64_t WebCore::MathMLPaddedElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v6, 58, a1, a2, 76, 0);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E343A178;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = 1;
  v6[25] = v8;
  result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v6 + 168))(v6, 0);
  *v6 = off_1E343DEF0;
  *a3 = v6;
  return result;
}

void WebCore::MathMLAnnotationElement::~MathMLAnnotationElement(WebCore::MathMLAnnotationElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::MathMLAnnotationElement::isSemanticAnnotation(WebCore::MathMLAnnotationElement *this)
{
  return 1;
}

uint64_t WebCore::MathMLPresentationElement::isPresentationMathML(WebCore::MathMLPresentationElement *this)
{
  return 1;
}

uint64_t WebCore::MathMLPresentationElement::acceptsMathVariantAttribute(WebCore::MathMLPresentationElement *this)
{
  return 0;
}

void WebCore::MathMLFractionElement::~MathMLFractionElement(WebCore::MathMLFractionElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::MathMLMathElement::~MathMLMathElement(WebCore::MathMLMathElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::MathMLMathElement::acceptsMathVariantAttribute(WebCore::MathMLMathElement *this)
{
  return 1;
}

void WebCore::MathMLMencloseElement::~MathMLMencloseElement(WebCore::MathMLMencloseElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::MathMLOperatorElement::~MathMLOperatorElement(WebCore::MathMLOperatorElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::MathMLTokenElement::isMathMLToken(WebCore::MathMLTokenElement *this)
{
  return 1;
}

uint64_t WebCore::MathMLTokenElement::acceptsMathVariantAttribute(WebCore::MathMLTokenElement *this)
{
  return 1;
}

void WebCore::MathMLPaddedElement::~MathMLPaddedElement(WebCore::MathMLPaddedElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::MathMLPresentationElement::createElementRenderer(WebCore::Document *a1@<X0>, WebCore::Style *this@<X1>, const WebCore::Element *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;

  if (*(_QWORD *)(*((_QWORD *)a1 + 12) + 24) == *(_QWORD *)(WebCore::MathMLNames::mtableTag + 24))
  {
    v7 = bmalloc::api::isoAllocate();
    v8 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v7, 63, (uint64_t)a1, this, 76, 0);
    *(_OWORD *)(v8 + 184) = 0u;
    *(_OWORD *)(v8 + 168) = 0u;
    *(_OWORD *)(v8 + 152) = 0u;
    *(_QWORD *)v8 = off_1E3432148;
    *(_QWORD *)(v8 + 200) = 0;
    *(_QWORD *)(v8 + 208) = 0;
    *(_DWORD *)(v8 + 212) = 1;
    v9 = (void *)WTF::fastMalloc((WTF *)4);
    *(_DWORD *)(v7 + 208) = 1;
    *(_QWORD *)(v7 + 200) = v9;
    v10 = *(unsigned int *)(v7 + 212);
    if ((_DWORD)v10)
      bzero(v9, 4 * v10);
    *(_OWORD *)(v7 + 248) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 296) = 0u;
    *(_OWORD *)(v7 + 312) = 0u;
    *(_OWORD *)(v7 + 264) = 0u;
    *(_OWORD *)(v7 + 280) = 0u;
    *(_BYTE *)(v7 + 328) &= 0x80u;
    *(_QWORD *)(v7 + 340) = 0;
    *(_QWORD *)(v7 + 332) = 0;
    *(_DWORD *)(v7 + 348) = -64;
    *(_QWORD *)(v7 + 352) = 4294967232;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 168))(v7, 0);
    *(_QWORD *)v7 = off_1E343A910;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v11 = 1;
    *(_QWORD *)(v7 + 360) = v11;
    *a4 = v7;
  }
  else
  {
    WebCore::RenderElement::createFor(a1, this, 0, a3, a4);
  }
}

unint64_t WebCore::MathMLPresentationElement::parseMathMLLength(WebCore::MathMLPresentationElement *this, const WTF::String *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;
  uint8x16_t v26;
  int v27;
  int v28;
  unint64_t v29;
  BOOL v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  _BOOL4 v34;
  BOOL v35;
  uint16x8_t v36;
  uint16x8_t v37;
  _BOOL4 v38;
  BOOL v39;
  _BOOL4 v40;
  BOOL v41;
  uint8x16_t v42;
  _BOOL4 v43;
  BOOL v44;
  BOOL v45;
  _BOOL4 v46;
  BOOL v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  _BOOL4 v54;
  BOOL v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  char v63;
  uint16x8_t v64;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_55;
  v4 = *(unsigned int *)(v3 + 16);
  v5 = *(const char **)(v3 + 8);
  v6 = *(unsigned int *)(v3 + 4);
  v7 = v6 & 0xFFFFFFFEFFFFFFFFLL | (((v4 >> 2) & 1) << 32);
  if (((v4 >> 2) & 1) != 0)
  {
    if ((_DWORD)v6)
    {
      v8 = 0;
      v9 = 6;
      while (1)
      {
        v10 = v5[v8];
        v11 = v10 > 0x20;
        v12 = (1 << v10) & 0x100002600;
        if (v11 || v12 == 0)
          break;
        if (v6 == ++v8)
          goto LABEL_30;
      }
      if ((_DWORD)v6 != 1)
      {
        v14 = (v6 - 1);
        while (v14 < v6)
        {
          v15 = v5[v14];
          v11 = v15 > 0x20;
          v16 = (1 << v15) & 0x100002600;
          if (!v11 && v16 != 0)
          {
            if ((_DWORD)--v14)
              continue;
          }
          if (!(_DWORD)v8 && (_DWORD)v14 == (_DWORD)v6 - 1)
            goto LABEL_41;
          goto LABEL_21;
        }
        goto LABEL_144;
      }
      if ((_DWORD)v8)
      {
        LODWORD(v14) = 0;
LABEL_21:
        v14 = (v14 - v8 + 1);
        v6 -= v8;
        if (v6 < v14)
          goto LABEL_144;
        v5 += v8;
        v7 = v14 | 0x100000000;
      }
    }
  }
  else if ((_DWORD)v6)
  {
    v18 = 0;
    v9 = 6;
    v19 = v5;
    while (1)
    {
      v20 = *(unsigned __int16 *)v19;
      v11 = v20 > 0x20;
      v21 = (1 << v20) & 0x100002600;
      if (v11 || v21 == 0)
        break;
      ++v18;
      v19 += 2;
      if (v6 == v18)
      {
LABEL_30:
        v3 = 0;
        return v3 | v9;
      }
    }
    if ((_DWORD)v6 != 1)
    {
      v14 = (v6 - 1);
      while (v14 < v6)
      {
        v23 = *(unsigned __int16 *)&v5[2 * v14];
        v11 = v23 > 0x20;
        v24 = (1 << v23) & 0x100002600;
        if (!v11 && v24 != 0)
        {
          if ((_DWORD)--v14)
            continue;
        }
        if ((_DWORD)v18 || (_DWORD)v14 != (_DWORD)v6 - 1)
          goto LABEL_143;
        goto LABEL_41;
      }
      goto LABEL_144;
    }
    if ((_DWORD)v18)
    {
      LODWORD(v14) = 0;
LABEL_143:
      LODWORD(v14) = v14 - v18;
      v7 = (v14 + 1);
      v6 -= v18;
      v5 = v19;
      if (v6 < v7)
        goto LABEL_144;
    }
  }
LABEL_41:
  if (!(_DWORD)v7)
  {
LABEL_54:
    v3 = 0;
LABEL_55:
    v9 = 6;
    return v3 | v9;
  }
  v2 = v7 & 0x100000000;
  if ((v7 & 0x100000000) != 0)
    LODWORD(v14) = *(unsigned __int8 *)v5;
  else
    LODWORD(v14) = *(unsigned __int16 *)v5;
  if ((v14 - 48) >= 0xA && (unsigned __int16)(v14 - 45) > 1u)
  {
    if ((_DWORD)a2)
    {
      LOBYTE(v6) = (_DWORD)v7 != 21;
      if (v5 != "veryverythinmathspace" && (_DWORD)v7 == 21)
      {
        if (v2)
        {
          if (v14 == 118)
          {
            v26 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 5), (int8x16_t)xmmword_1969F5120), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1969F5110));
            v26.i8[0] = vminvq_u8(v26);
            if (!v26.i32[0])
              goto LABEL_122;
            goto LABEL_76;
          }
LABEL_123:
          v43 = 0;
          v44 = v5 == "veryverythickmathspace";
          v45 = 1;
          goto LABEL_124;
        }
        LODWORD(v14) = *(unsigned __int16 *)v5;
        if ((_DWORD)v14 != 118)
          goto LABEL_123;
        v31 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F5130);
        v31.i16[0] = vminvq_u16(v31);
        if (v31.i32[0])
        {
          v32 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1969F5140);
          v32.i16[0] = vminvq_u16(v32);
          if (!v32.i32[0]
            || (v33 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 26), (int16x8_t)xmmword_1969F5150),
                v33.i16[0] = vminvq_u16(v33),
                !v33.i32[0]))
          {
            v34 = 0;
            v35 = v5 == "mediummathspace";
            LOBYTE(v14) = 118;
            goto LABEL_107;
          }
LABEL_76:
          v29 = 0x3F80000000000000;
LABEL_221:
          v9 = 4;
LABEL_222:
          v3 = v29 & 0xFFFFFFFF00000000;
          return v3 | v9;
        }
LABEL_122:
        LOBYTE(v14) = 118;
        goto LABEL_123;
      }
      if (v5 == "veryverythinmathspace" && (_DWORD)v7 == 21)
        goto LABEL_76;
      if (v5 != "verythinmathspace" && (_DWORD)v7 == 17)
      {
        if (v2)
        {
          if (v14 != 118)
            goto LABEL_123;
          if (*(_QWORD *)(v5 + 1) != 0x6D6E696874797265 || *(_QWORD *)(v5 + 9) != 0x6563617073687461)
            goto LABEL_122;
        }
        else
        {
          LODWORD(v14) = *(unsigned __int16 *)v5;
          if ((_DWORD)v14 != 118)
            goto LABEL_123;
          v36 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F5140);
          v36.i16[0] = vminvq_u16(v36);
          if (!v36.i32[0])
            goto LABEL_122;
          v37 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 18), (int16x8_t)xmmword_1969F5150);
          v37.i16[0] = vminvq_u16(v37);
          if (!v37.i32[0])
          {
            v38 = 0;
            v39 = v5 == "thickmathspace";
            LOBYTE(v14) = 118;
            goto LABEL_114;
          }
        }
LABEL_91:
        v29 = 0x4000000000000000;
        goto LABEL_221;
      }
      if (v5 == "verythinmathspace" && (_DWORD)v7 == 17)
        goto LABEL_91;
      if (v5 != "thinmathspace" && (_DWORD)v7 == 13)
      {
        if (v2)
        {
          if (v14 != 116)
            goto LABEL_123;
          if (*(_QWORD *)(v5 + 1) == 0x736874616D6E6968 && *(_QWORD *)(v5 + 5) == 0x6563617073687461)
            goto LABEL_261;
        }
        else
        {
          LODWORD(v14) = *(unsigned __int16 *)v5;
          if ((_DWORD)v14 != 116)
            goto LABEL_123;
          v82 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F5160);
          v82.i16[0] = vminvq_u16(v82);
          if (v82.i32[0])
          {
            v83 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1969F5150);
            v83.i16[0] = vminvq_u16(v83);
            if (!v83.i32[0])
            {
              v40 = 0;
              v41 = v5 == "verythickmathspace";
              LOBYTE(v14) = 116;
              goto LABEL_276;
            }
            goto LABEL_261;
          }
        }
        LOBYTE(v14) = 116;
        goto LABEL_123;
      }
      if ((_DWORD)v7 != 13 || v5 != "thinmathspace")
      {
        v34 = v7 == 15;
        v35 = v5 == "mediummathspace";
        if (v5 != "mediummathspace" && (_DWORD)v7 == 15)
        {
          if (v2)
          {
            if (v14 != 109)
              goto LABEL_304;
            if (*(_QWORD *)(v5 + 1) == 0x74616D6D75696465 && *(_QWORD *)(v5 + 7) == 0x6563617073687461)
            {
LABEL_109:
              v29 = 0x4080000000000000;
              goto LABEL_221;
            }
          }
          else
          {
            LODWORD(v14) = *(unsigned __int16 *)v5;
            if ((_DWORD)v14 != 109)
              goto LABEL_304;
            v87 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F5170);
            v87.i16[0] = vminvq_u16(v87);
            if (v87.i32[0])
            {
              v88 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 14), (int16x8_t)xmmword_1969F5150);
              v88.i16[0] = vminvq_u16(v88);
              if (!v88.i32[0])
              {
                LOBYTE(v14) = 109;
                goto LABEL_123;
              }
              goto LABEL_109;
            }
          }
          LOBYTE(v43) = 0;
          v45 = 1;
          LOBYTE(v14) = 109;
          goto LABEL_165;
        }
LABEL_107:
        if (!v34 || !v35)
        {
LABEL_145:
          v38 = v7 == 14;
          v39 = v5 == "thickmathspace";
          if (v5 != "thickmathspace" && (_DWORD)v7 == 14)
          {
            if (v2)
            {
              if (v14 == 116)
              {
                if (*(_QWORD *)(v5 + 1) == 0x6874616D6B636968 && *(_QWORD *)(v5 + 6) == 0x6563617073687461)
                  goto LABEL_151;
                goto LABEL_242;
              }
              goto LABEL_304;
            }
            LODWORD(v14) = *(unsigned __int16 *)v5;
            if ((_DWORD)v14 == 116)
            {
              v52 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F5180);
              v52.i16[0] = vminvq_u16(v52);
              if (!v52.i32[0])
              {
LABEL_242:
                LOBYTE(v43) = 0;
                v45 = 1;
                LOBYTE(v14) = 116;
                goto LABEL_165;
              }
              v53 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 12), (int16x8_t)xmmword_1969F5150);
              v53.i16[0] = vminvq_u16(v53);
              if (v53.i32[0])
              {
LABEL_151:
                v29 = 0x40A0000000000000;
                goto LABEL_221;
              }
              v46 = 0;
              LOBYTE(v43) = 0;
              v47 = v5 == "negativeveryverythinmathspace";
              v45 = 1;
              LOBYTE(v14) = 116;
              goto LABEL_156;
            }
LABEL_304:
            LOBYTE(v43) = 0;
            v45 = 1;
            goto LABEL_165;
          }
LABEL_114:
          if (v38 && v39)
            goto LABEL_151;
          v40 = v7 == 18;
          v41 = v5 == "verythickmathspace";
          if (v5 != "verythickmathspace" && (_DWORD)v7 == 18)
          {
            if (v2)
            {
              if (v14 != 118)
                goto LABEL_304;
              v42 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 2), (int8x16_t)xmmword_1969F51A0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1969F5190));
              v42.i8[0] = vminvq_u8(v42);
              if (v42.i32[0])
                goto LABEL_121;
              goto LABEL_251;
            }
            LODWORD(v14) = *(unsigned __int16 *)v5;
            if ((_DWORD)v14 != 118)
              goto LABEL_304;
            v77 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F51B0);
            v77.i16[0] = vminvq_u16(v77);
            if (!v77.i32[0])
            {
LABEL_251:
              LOBYTE(v43) = 0;
              v45 = 1;
LABEL_252:
              LOBYTE(v14) = 118;
              goto LABEL_165;
            }
            v78 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 4), (int16x8_t)xmmword_1969F51C0);
            v78.i16[0] = vminvq_u16(v78);
            if (!v78.i32[0]
              || (v79 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 20), (int16x8_t)xmmword_1969F5150),
                  v79.i16[0] = vminvq_u16(v79),
                  !v79.i32[0]))
            {
              v54 = 0;
              LOBYTE(v43) = 0;
              v55 = v5 == "negativeverythinmathspace";
              v45 = 1;
              LOBYTE(v14) = 118;
LABEL_248:
              if (v54 && v55)
                goto LABEL_250;
LABEL_165:
              if (v5 == "negativethinmathspace")
                LOBYTE(v6) = 1;
              if ((v6 & 1) != 0)
              {
                if (v5 != "negativethinmathspace" || (_DWORD)v7 != 21)
                {
                  if (v5 == "negativemediummathspace" || (_DWORD)v7 != 23)
                  {
                    if (v5 != "negativemediummathspace" || (_DWORD)v7 != 23)
                      goto LABEL_192;
                  }
                  else
                  {
                    if (v2)
                    {
                      if (v14 != 110)
                        goto LABEL_192;
                      v58 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 7), (int8x16_t)xmmword_1969F5270), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1969F5260));
                      v58.i8[0] = vminvq_u8((uint8x16_t)v58);
                    }
                    else
                    {
                      LODWORD(v14) = *(unsigned __int16 *)v5;
                      if ((_DWORD)v14 != 110)
                        goto LABEL_192;
                      v61 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F5280);
                      v61.i16[0] = vminvq_u16(v61);
                      if (!v61.i32[0])
                        goto LABEL_191;
                      v62 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 14), (int16x8_t)xmmword_1969F5290);
                      v62.i16[0] = vminvq_u16(v62);
                      if (!v62.i32[0])
                        goto LABEL_191;
                      v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 30), (int16x8_t)xmmword_1969F5150);
                      v58.i16[0] = vminvq_u16(v58);
                    }
                    if (!v58.i32[0])
                      goto LABEL_191;
                  }
                  v29 = 0xC080000000000000;
                  goto LABEL_221;
                }
              }
              else
              {
                if (v2)
                {
                  if (v14 != 110)
                    goto LABEL_192;
                  v57 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 5), (int8x16_t)xmmword_1969F5230), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1969F5220));
                  v57.i8[0] = vminvq_u8((uint8x16_t)v57);
                }
                else
                {
                  LODWORD(v14) = *(unsigned __int16 *)v5;
                  if ((_DWORD)v14 != 110)
                    goto LABEL_192;
                  v59 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F5240);
                  v59.i16[0] = vminvq_u16(v59);
                  if (!v59.i32[0])
                    goto LABEL_191;
                  v60 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1969F5250);
                  v60.i16[0] = vminvq_u16(v60);
                  if (!v60.i32[0])
                    goto LABEL_191;
                  v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 26), (int16x8_t)xmmword_1969F5150);
                  v57.i16[0] = vminvq_u16(v57);
                }
                if (!v57.i32[0])
                {
LABEL_191:
                  LOBYTE(v14) = 110;
LABEL_192:
                  v63 = v5 == "negativethickmathspace" || v45;
                  if ((v63 & 1) != 0)
                  {
                    if (v5 == "negativethickmathspace" && v43)
                      goto LABEL_206;
                  }
                  else
                  {
                    if (!(_DWORD)v7)
                      goto LABEL_206;
                    if (!v2)
                    {
                      LODWORD(v14) = *(unsigned __int16 *)v5;
                      if ((_DWORD)v14 != 110)
                        goto LABEL_211;
                      v66 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F5240);
                      v66.i16[0] = vminvq_u16(v66);
                      if (!v66.i32[0])
                        goto LABEL_201;
                      v67 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 12), (int16x8_t)xmmword_1969F52C0);
                      v67.i16[0] = vminvq_u16(v67);
                      if (!v67.i32[0])
                        goto LABEL_201;
                      v64 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 28), (int16x8_t)xmmword_1969F5150);
                      v64.i16[0] = vminvq_u16(v64);
LABEL_200:
                      if (!v64.i32[0])
                      {
LABEL_201:
                        LOBYTE(v14) = 110;
                        goto LABEL_211;
                      }
LABEL_206:
                      v29 = 0xC0A0000000000000;
                      goto LABEL_221;
                    }
                    if (v14 == 110)
                    {
                      v64 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 6), (int8x16_t)xmmword_1969F52B0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1969F52A0));
                      v64.i8[0] = vminvq_u8((uint8x16_t)v64);
                      goto LABEL_200;
                    }
                  }
LABEL_211:
                  if (v5 != "negativeverythickmathspace" && (_DWORD)v7 == 26)
                  {
                    if (!v2)
                    {
                      if (*(_WORD *)v5 != 110)
                        goto LABEL_241;
                      v71 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F51F0);
                      v71.i16[0] = vminvq_u16(v71);
                      if (!v71.i32[0])
                        goto LABEL_241;
                      v72 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 4), (int16x8_t)xmmword_1969F52E0);
                      v72.i16[0] = vminvq_u16(v72);
                      if (!v72.i32[0])
                        goto LABEL_241;
                      v73 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 20), (int16x8_t)xmmword_1969F51C0);
                      v73.i16[0] = vminvq_u16(v73);
                      if (!v73.i32[0])
                        goto LABEL_241;
                      v68 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 36), (int16x8_t)xmmword_1969F5150);
                      v68.i16[0] = vminvq_u16(v68);
LABEL_216:
                      if (!v68.i32[0])
                        goto LABEL_241;
LABEL_220:
                      v29 = 0xC0C0000000000000;
                      goto LABEL_221;
                    }
                    if (v14 == 110)
                    {
                      v68 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 10), (int8x16_t)xmmword_1969F51A0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1969F52D0));
                      v68.i8[0] = vminvq_u8((uint8x16_t)v68);
                      goto LABEL_216;
                    }
LABEL_241:
                    v29 = 0;
                    v9 = 6;
                    goto LABEL_222;
                  }
                  if (v5 == "negativeverythickmathspace" && (_DWORD)v7 == 26)
                    goto LABEL_220;
                  if (v5 == "negativeveryverythickmathspace" || (_DWORD)v7 != 30)
                  {
                    v29 = 0;
                    v9 = 6;
                    if (v5 != "negativeveryverythickmathspace" || (_DWORD)v7 != 30)
                      goto LABEL_222;
                  }
                  else
                  {
                    if (v2)
                    {
                      if (v14 != 110)
                        goto LABEL_241;
                      v70 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 14), (int8x16_t)xmmword_1969F51A0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1969F51E0));
                      v70.i8[0] = vminvq_u8((uint8x16_t)v70);
                    }
                    else
                    {
                      if (*(_WORD *)v5 != 110)
                        goto LABEL_241;
                      v74 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F51F0);
                      v74.i16[0] = vminvq_u16(v74);
                      if (!v74.i32[0])
                        goto LABEL_241;
                      v75 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 12), (int16x8_t)xmmword_1969F52F0);
                      v75.i16[0] = vminvq_u16(v75);
                      if (!v75.i32[0])
                        goto LABEL_241;
                      v76 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 28), (int16x8_t)xmmword_1969F51C0);
                      v76.i16[0] = vminvq_u16(v76);
                      if (!v76.i32[0])
                        goto LABEL_241;
                      v70 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 44), (int16x8_t)xmmword_1969F5150);
                      v70.i16[0] = vminvq_u16(v70);
                    }
                    if (!v70.i32[0])
                      goto LABEL_241;
                  }
                  v29 = 0xC0E0000000000000;
                  goto LABEL_221;
                }
              }
              v29 = 0xC040000000000000;
              goto LABEL_221;
            }
LABEL_121:
            v29 = 0x40C0000000000000;
            goto LABEL_221;
          }
LABEL_276:
          if (v40 && v41)
            goto LABEL_121;
          v43 = v7 == 22;
          v45 = (_DWORD)v7 != 22;
          v44 = v5 == "veryverythickmathspace";
          if (v5 != "veryverythickmathspace" && (_DWORD)v7 == 22)
          {
            if (v2)
            {
              if (v14 == 118)
              {
                v84 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 6), (int8x16_t)xmmword_1969F51A0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1969F51D0));
                v84.i8[0] = vminvq_u8((uint8x16_t)v84);
                goto LABEL_283;
              }
            }
            else
            {
              LODWORD(v14) = *(unsigned __int16 *)v5;
              if ((_DWORD)v14 == 118)
              {
                v85 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F5130);
                v85.i16[0] = vminvq_u16(v85);
                if (!v85.i32[0])
                  goto LABEL_284;
                v86 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 12), (int16x8_t)xmmword_1969F51C0);
                v86.i16[0] = vminvq_u16(v86);
                if (!v86.i32[0])
                  goto LABEL_284;
                v84 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 28), (int16x8_t)xmmword_1969F5150);
                v84.i16[0] = vminvq_u16(v84);
LABEL_283:
                if (!v84.i32[0])
                {
LABEL_284:
                  v45 = 0;
                  goto LABEL_252;
                }
LABEL_126:
                v29 = 0x40E0000000000000;
                goto LABEL_221;
              }
            }
            v45 = 0;
            goto LABEL_165;
          }
LABEL_124:
          if (!v43 || !v44)
          {
            v46 = v7 == 29;
            v47 = v5 == "negativeveryverythinmathspace";
            if (v5 != "negativeveryverythinmathspace" && (_DWORD)v7 == 29)
            {
              if (v2)
              {
                if (v14 != 110)
                  goto LABEL_165;
                v48 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 13), (int8x16_t)xmmword_1969F5120), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1969F51E0));
                v48.i8[0] = vminvq_u8((uint8x16_t)v48);
              }
              else
              {
                LODWORD(v14) = *(unsigned __int16 *)v5;
                if ((_DWORD)v14 != 110)
                  goto LABEL_165;
                v49 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F51F0);
                v49.i16[0] = vminvq_u16(v49);
                if (!v49.i32[0])
                  goto LABEL_164;
                v50 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1969F5200);
                v50.i16[0] = vminvq_u16(v50);
                if (!v50.i32[0])
                  goto LABEL_164;
                v51 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 26), (int16x8_t)xmmword_1969F5140);
                v51.i16[0] = vminvq_u16(v51);
                if (!v51.i32[0])
                  goto LABEL_164;
                v48 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 42), (int16x8_t)xmmword_1969F5150);
                v48.i16[0] = vminvq_u16(v48);
              }
              if (!v48.i32[0])
                goto LABEL_164;
LABEL_133:
              v29 = 0xBF80000000000000;
              goto LABEL_221;
            }
LABEL_156:
            if (!v46 || !v47)
            {
              v54 = v7 == 25;
              v55 = v5 == "negativeverythinmathspace";
              if (v5 != "negativeverythinmathspace" && (_DWORD)v7 == 25)
              {
                if (v2)
                {
                  if (v14 != 110)
                    goto LABEL_165;
                  v56 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 9), (int8x16_t)xmmword_1969F5120), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1969F5210));
                  v56.i8[0] = vminvq_u8((uint8x16_t)v56);
LABEL_163:
                  if (!v56.i32[0])
                    goto LABEL_164;
LABEL_250:
                  v29 = 0xC000000000000000;
                  goto LABEL_221;
                }
                LODWORD(v14) = *(unsigned __int16 *)v5;
                if ((_DWORD)v14 != 110)
                  goto LABEL_165;
                v80 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1969F51F0);
                v80.i16[0] = vminvq_u16(v80);
                if (v80.i32[0])
                {
                  v81 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 18), (int16x8_t)xmmword_1969F5140);
                  v81.i16[0] = vminvq_u16(v81);
                  if (v81.i32[0])
                  {
                    v56 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 34), (int16x8_t)xmmword_1969F5150);
                    v56.i16[0] = vminvq_u16(v56);
                    goto LABEL_163;
                  }
                }
LABEL_164:
                LOBYTE(v14) = 110;
                goto LABEL_165;
              }
              goto LABEL_248;
            }
            goto LABEL_133;
          }
          goto LABEL_126;
        }
        goto LABEL_109;
      }
LABEL_261:
      v29 = 0x4040000000000000;
      goto LABEL_221;
    }
    goto LABEL_54;
  }
  LODWORD(v6) = v7 - 1;
  if (v2)
  {
    if ((_DWORD)v7)
    {
      v27 = v5[v6];
      goto LABEL_61;
    }
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
  if (!(_DWORD)v7)
    goto LABEL_144;
  v27 = *(unsigned __int16 *)&v5[2 * v6];
  if (v27 != 37)
  {
    v6 = (v7 - 2);
    if (v7 < 2)
      goto LABEL_69;
    if (v2)
      v28 = v5[v6];
    else
      v28 = *(unsigned __int16 *)&v5[2 * v6];
    v30 = v27 == 109;
    if (v28 != 99)
      v30 = 0;
    if ((v27 != 109 || v28 != 101)
      && (v27 != 120 || v28 != 101)
      && (v27 != 110 || v28 != 105)
      && (v27 != 109 || v28 != 109)
      && (v27 != 99 || v28 != 112)
      && (v27 != 116 || v28 != 112)
      && (v27 != 120 || v28 != 112)
      && !v30)
    {
      goto LABEL_69;
    }
  }
LABEL_61:
  if (v6 < v7)
  {
    v6 = v6;
    if (v2)
      v6 = v6 | 0x100000000;
  }
  else
  {
LABEL_69:
    v6 = v7;
  }
  if ((v6 & 0x100000000) != 0)
    WTF::charactersToFloat();
  else
    WTF::charactersToFloat();
  v3 = 0;
  v9 = 6;
  return v3 | v9;
}

unint64_t WebCore::MathMLPresentationElement::specifiedMathVariant(WebCore::MathMLPresentationElement *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  unint64_t v15;
  __int32 v17;
  uint64_t v19;
  char **v21;
  int v22;
  int v23;
  uint16x8_t v26;
  uint16x8_t v27;
  BOOL v28;
  _BOOL4 v29;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  BOOL v36;
  BOOL v37;
  char v38;
  uint16x8_t v39;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;

  if (!(*(unsigned int (**)(WebCore::MathMLPresentationElement *))(*(_QWORD *)this + 1192))(this))
    goto LABEL_51;
  if (!*((_BYTE *)this + 116))
  {
    v6 = *((_QWORD *)this + 13);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 & 1) != 0)
      {
        v8 = *(_QWORD *)(v6 + 40);
        LODWORD(v9) = *(_DWORD *)(v6 + 52);
        if ((_DWORD)v9)
        {
LABEL_8:
          v9 = v9;
          v10 = (uint64_t *)(v8 + 8);
          while (1)
          {
            v11 = *(v10 - 1);
            if (v11 == WebCore::MathMLNames::mathvariantAttr
              || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::MathMLNames::mathvariantAttr + 24)
              && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::MathMLNames::mathvariantAttr + 32))
            {
              break;
            }
            v10 += 2;
            if (!--v9)
            {
              v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_17:
          v12 = *v10;
          if (!*v10)
            goto LABEL_27;
          v13 = *(const char **)(v12 + 8);
          v14 = *(_DWORD *)(v12 + 4);
          v15 = ((unint64_t)*(unsigned int *)(v12 + 16) >> 2) & 1;
          if (v13 != "bold" && v14 == 4)
          {
            if ((_DWORD)v15)
            {
              if (*v13 != 98 || *(_WORD *)(v13 + 1) != 27759 || *((_WORD *)v13 + 1) != 25708)
                goto LABEL_27;
            }
            else
            {
              if (*(_WORD *)v13 != 98)
                goto LABEL_27;
              v22 = *(_DWORD *)(v13 + 2);
              v23 = *((_DWORD *)v13 + 1);
              if (v22 != 7077999 || v23 != 6553708)
                goto LABEL_27;
            }
          }
          else if (v13 != "bold" || v14 != 4)
          {
            v19 = v15 << 32;
            if (v13 != "bold-fraktur" && v14 == 12)
            {
              if ((_DWORD)v15)
              {
                if (*v13 != 98
                  || *(_QWORD *)(v13 + 1) != 0x6B6172662D646C6FLL
                  || *(_QWORD *)(v13 + 4) != 0x7275746B6172662DLL)
                {
                  goto LABEL_27;
                }
              }
              else
              {
                if (*(_WORD *)v13 != 98)
                  goto LABEL_27;
                v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1969F5300);
                v26.i16[0] = vminvq_u16(v26);
                if (!v26.i32[0])
                  goto LABEL_27;
                v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 8), (int16x8_t)xmmword_1969F5310);
                v27.i16[0] = vminvq_u16(v27);
                v28 = v27.i8[0];
                if (!v27.i32[0])
                {
                  v29 = v13 == "double-struck";
                  v30 = 12;
                  goto LABEL_57;
                }
              }
            }
            else if (v13 != "bold-fraktur" || v14 != 12)
            {
              v33 = v14 != 11;
              if (v13 != "bold-italic" && v14 == 11)
              {
                if ((_DWORD)v15)
                {
                  if (*v13 == 98
                    && *(_QWORD *)(v13 + 1) == 0x6C6174692D646C6FLL
                    && *(_QWORD *)(v13 + 3) == 0x63696C6174692D64)
                  {
LABEL_79:
                    v21 = &off_1E33FB300;
                    goto LABEL_49;
                  }
                }
                else if (*(_WORD *)v13 == 98)
                {
                  v41 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1969F5320);
                  v41.i16[0] = vminvq_u16(v41);
                  if (v41.i32[0])
                  {
                    v42 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 6), (int16x8_t)xmmword_1969F5330);
                    v42.i16[0] = vminvq_u16(v42);
                    if (v42.i32[0])
                      goto LABEL_79;
                  }
                }
                v33 = 0;
                v30 = 11;
LABEL_179:
                if (v13 == "bold-script" || v33)
                {
                  if (v13 == "bold-script" && v14 == 11)
                    goto LABEL_186;
                }
                else
                {
                  if (!v30)
                  {
LABEL_186:
                    v21 = &off_1E33FB330;
                    goto LABEL_49;
                  }
                  if ((_DWORD)v15)
                  {
                    if (*v13 == 98
                      && *(_QWORD *)(v13 + 1) == 0x697263732D646C6FLL
                      && *(_QWORD *)(v13 + 3) == 0x7470697263732D64)
                    {
                      goto LABEL_186;
                    }
                  }
                  else
                  {
                    if (*(_WORD *)v13 == 98)
                    {
                      v43 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1969F5360);
                      v43.i16[0] = vminvq_u16(v43);
                      if (v43.i32[0])
                      {
                        v44 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 6), (int16x8_t)xmmword_1969F5370);
                        v44.i16[0] = vminvq_u16(v44);
                        if (v44.i32[0])
                          goto LABEL_186;
                      }
                    }
                    v19 = 0;
                  }
                }
                v28 = v30 == 13;
                v29 = v13 == "double-struck";
                if (v13 != "double-struck" && v30 == 13)
                {
                  if (v19)
                  {
                    if (*v13 == 100
                      && *(_QWORD *)(v13 + 1) == 0x74732D656C62756FLL
                      && *(_QWORD *)(v13 + 5) == 0x6B63757274732D65)
                    {
LABEL_59:
                      v21 = &off_1E33FB348;
                      goto LABEL_49;
                    }
                  }
                  else if (*(_WORD *)v13 == 100)
                  {
                    v45 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1969F5380);
                    v45.i16[0] = vminvq_u16(v45);
                    if (v45.i32[0])
                    {
                      v46 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 10), (int16x8_t)xmmword_1969F5390);
                      v46.i16[0] = vminvq_u16(v46);
                      v17 = v46.i32[0];
                      if (!v46.i32[0])
                      {
LABEL_50:
                        *((_DWORD *)this + 28) = v17;
                        *((_BYTE *)this + 116) = 1;
                        if (v17)
                          goto LABEL_4;
LABEL_51:
                        v5 = 0;
                        v3 = 0;
                        v2 = 0;
                        v4 = 0;
                        return v3 | v5 | v2 | v4;
                      }
                      goto LABEL_59;
                    }
                  }
LABEL_27:
                  v17 = 0;
                  goto LABEL_50;
                }
LABEL_57:
                if (v29 && v28)
                  goto LABEL_59;
                v31 = v30 != 7;
                if (v13 == "fraktur" || v30 != 7)
                {
                  if (v13 == "fraktur")
                  {
                    v32 = v30;
                    if (v30 == 7)
                    {
LABEL_66:
                      v21 = &off_1E33FB360;
                      goto LABEL_49;
                    }
                  }
                  else
                  {
                    v32 = v30;
                  }
                }
                else
                {
                  if (v19)
                  {
                    if (*v13 == 102 && *(_DWORD *)(v13 + 1) == 1953194354 && *(_DWORD *)(v13 + 3) == 1920300139)
                      goto LABEL_66;
                    goto LABEL_81;
                  }
                  if (*(_WORD *)v13 != 102)
                  {
                    v19 = 0;
LABEL_81:
                    v31 = 0;
                    v32 = 7;
                    goto LABEL_82;
                  }
                  v31 = 0;
                  v19 = 0;
                  v32 = 7;
                  if (*(_QWORD *)(v13 + 2) == 0x74006B00610072 && *(_QWORD *)(v13 + 6) == 0x7200750074006BLL)
                    goto LABEL_66;
                }
LABEL_82:
                if (v13 == "initial" || v31)
                {
                  if (v13 == "initial" && v30 == 7)
                    goto LABEL_89;
                }
                else
                {
                  if (!v32)
                  {
LABEL_89:
                    v21 = &off_1E33FB378;
                    goto LABEL_49;
                  }
                  if (v19)
                  {
                    if (*v13 == 105 && *(_DWORD *)(v13 + 1) == 1769236846 && *(_DWORD *)(v13 + 3) == 1818323316)
                      goto LABEL_89;
                  }
                  else if (*(_WORD *)v13 == 105)
                  {
                    v19 = 0;
                    if (*(_QWORD *)(v13 + 2) == 0x6900740069006ELL && *(_QWORD *)(v13 + 6) == 0x6C006100690074)
                      goto LABEL_89;
                  }
                  else
                  {
                    v19 = 0;
                  }
                }
                v34 = v32 != 6;
                if (v13 == "italic" || v32 != 6)
                {
                  v35 = v32;
                  if (v13 == "italic" && v32 == 6)
                    goto LABEL_99;
                }
                else
                {
                  if (v19)
                  {
                    if (*v13 == 105 && *(_DWORD *)(v13 + 1) == 1768710516 && *(_DWORD *)(v13 + 2) == 1667853409)
                    {
LABEL_99:
                      v21 = &off_1E33FB390;
                      goto LABEL_49;
                    }
                    v34 = 0;
                    goto LABEL_101;
                  }
                  if (*(_WORD *)v13 != 105)
                  {
                    v34 = 0;
                    v19 = 0;
LABEL_101:
                    v35 = 6;
                    goto LABEL_102;
                  }
                  v19 = 0;
                  v34 = 0;
                  v35 = 6;
                  if (*(_QWORD *)(v13 + 2) == 0x69006C00610074 && *(_QWORD *)(v13 + 4) == 0x630069006C0061)
                    goto LABEL_99;
                }
LABEL_102:
                if (v13 != "looped" && !v34)
                {
                  if (v19)
                  {
                    if (*v13 == 108 && *(_DWORD *)(v13 + 1) == 1701867375 && *(_DWORD *)(v13 + 2) == 1684369519)
                    {
LABEL_108:
                      v21 = &off_1E33FB3A8;
                      goto LABEL_49;
                    }
                    goto LABEL_120;
                  }
                  if (*(_WORD *)v13 != 108)
                  {
                    v19 = 0;
LABEL_120:
                    v36 = 0;
                    v37 = 1;
                    goto LABEL_121;
                  }
                  v36 = 0;
                  v19 = 0;
                  v37 = 1;
                  if (*(_QWORD *)(v13 + 2) == 0x650070006F006FLL && *(_QWORD *)(v13 + 4) == 0x6400650070006FLL)
                    goto LABEL_108;
LABEL_121:
                  v38 = v13 == "normal" || v34;
                  if ((v38 & 1) == 0)
                  {
                    if (v19)
                    {
                      if (*v13 == 110 && *(_DWORD *)(v13 + 1) == 1634562671 && *(_DWORD *)(v13 + 2) == 1818324338)
                      {
LABEL_129:
                        v21 = &off_1E33FB3D8;
                        goto LABEL_49;
                      }
                      v34 = 0;
                    }
                    else if (*(_WORD *)v13 == 110)
                    {
                      v19 = 0;
                      v34 = 0;
                      if (*(_QWORD *)(v13 + 2) == 0x61006D0072006FLL && *(_QWORD *)(v13 + 4) == 0x6C0061006D0072)
                        goto LABEL_129;
                    }
                    else
                    {
                      v34 = 0;
                      v19 = 0;
                    }
LABEL_131:
                    if (v13 == "script" || v34)
                    {
                      if (v13 == "script" && v32 == 6)
                        goto LABEL_137;
                    }
                    else if (v19)
                    {
                      if (*v13 == 115 && *(_DWORD *)(v13 + 1) == 1885958755 && *(_DWORD *)(v13 + 2) == 1953524082)
                      {
LABEL_137:
                        v21 = &off_1E33FB438;
                        goto LABEL_49;
                      }
                    }
                    else if (*(_WORD *)v13 == 115)
                    {
                      v19 = 0;
                      if (*(_QWORD *)(v13 + 2) == 0x70006900720063 && *(_QWORD *)(v13 + 4) == 0x74007000690072)
                        goto LABEL_137;
                    }
                    else
                    {
                      v19 = 0;
                    }
                    if (v13 == "stretched")
                      v37 = 1;
                    if (v37)
                    {
                      if (v13 != "stretched")
                        v36 = 0;
                      if (v36)
                        goto LABEL_153;
                    }
                    else
                    {
                      if (!v35)
                      {
LABEL_153:
                        v21 = &off_1E33FB450;
                        goto LABEL_49;
                      }
                      if (v19)
                      {
                        if (*v13 == 115 && *(_DWORD *)(v13 + 1) == 1952805492 && *(_DWORD *)(v13 + 5) == 1684367459)
                          goto LABEL_153;
                        v19 = 1;
                      }
                      else
                      {
                        if (*(_WORD *)v13 == 115)
                        {
                          v39 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1969F5400);
                          v39.i16[0] = vminvq_u16(v39);
                          if (v39.i32[0])
                            goto LABEL_153;
                        }
                        v19 = 0;
                      }
                    }
                    if (v13 == "tailed")
                      v34 = 1;
                    if (v34)
                    {
                      if (v32 != 6 || v13 != "tailed")
                        goto LABEL_27;
                    }
                    else if (v19)
                    {
                      if (*v13 != 116 || *(_DWORD *)(v13 + 1) != 1701603681 || *(_DWORD *)(v13 + 2) != 1684368489)
                        goto LABEL_27;
                    }
                    else
                    {
                      if (*(_WORD *)v13 != 116)
                        goto LABEL_27;
                      if (*(_QWORD *)(v13 + 4) != 0x640065006C0069 || *(_QWORD *)(v13 + 2) != 0x65006C00690061)
                        goto LABEL_27;
                    }
                    v21 = &off_1E33FB468;
                    goto LABEL_49;
                  }
                  if (v13 == "normal" && v32 == 6)
                    goto LABEL_129;
                  if (v13 != "sans-serif" && v35 == 10)
                  {
                    if (v19)
                    {
                      if (*v13 == 115
                        && *(_QWORD *)(v13 + 1) == 0x697265732D736E61
                        && *(_QWORD *)(v13 + 2) == 0x66697265732D736ELL)
                      {
LABEL_232:
                        v21 = &off_1E33FB3F0;
                        goto LABEL_49;
                      }
LABEL_304:
                      v35 = 17;
                      goto LABEL_131;
                    }
                    if (*(_WORD *)v13 == 115)
                    {
                      v49 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1969F53B0);
                      v49.i16[0] = vminvq_u16(v49);
                      if (v49.i32[0])
                      {
                        v50 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 4), (int16x8_t)xmmword_1969F5350);
                        v50.i16[0] = vminvq_u16(v50);
                        if (v50.i32[0])
                          goto LABEL_232;
                      }
                    }
LABEL_303:
                    v19 = 0;
                    goto LABEL_304;
                  }
                  if (v13 == "sans-serif" && v35 == 10)
                    goto LABEL_232;
                  if (v13 == "sans-serif-bold-italic" || v35 != 22)
                  {
                    if (v13 != "sans-serif-bold-italic" || v35 != 22)
                    {
                      if (v13 == "sans-serif-italic" || v35 != 17)
                      {
                        if (v13 != "sans-serif-italic" || v35 != 17)
                          goto LABEL_131;
                      }
                      else if (v19)
                      {
                        if (*v13 != 115
                          || *(_QWORD *)(v13 + 1) != 0x697265732D736E61
                          || *(_QWORD *)(v13 + 9) != 0x63696C6174692D66)
                        {
                          goto LABEL_304;
                        }
                      }
                      else
                      {
                        if (*(_WORD *)v13 != 115)
                          goto LABEL_303;
                        v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1969F53B0);
                        v57.i16[0] = vminvq_u16(v57);
                        if (!v57.i32[0])
                          goto LABEL_303;
                        v58 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 18), (int16x8_t)xmmword_1969F53F0);
                        v58.i16[0] = vminvq_u16(v58);
                        if (!v58.i32[0])
                          goto LABEL_303;
                      }
                      v21 = &off_1E33FB420;
                      goto LABEL_49;
                    }
                  }
                  else if (v19)
                  {
                    if (*v13 != 115)
                      goto LABEL_304;
                    v51 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v13 + 6), (int8x16_t)xmmword_1969F53D0), vceqq_s8(*(int8x16_t *)(v13 + 1), (int8x16_t)xmmword_1969F53C0));
                    v51.i8[0] = vminvq_u8(v51);
                    if (!v51.i32[0])
                      goto LABEL_304;
                  }
                  else
                  {
                    if (*(_WORD *)v13 != 115)
                      goto LABEL_303;
                    v54 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1969F53B0);
                    v54.i16[0] = vminvq_u16(v54);
                    if (!v54.i32[0])
                      goto LABEL_303;
                    v55 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 12), (int16x8_t)xmmword_1969F53E0);
                    v55.i16[0] = vminvq_u16(v55);
                    if (!v55.i32[0])
                      goto LABEL_303;
                    v56 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 28), (int16x8_t)xmmword_1969F5330);
                    v56.i16[0] = vminvq_u16(v56);
                    if (!v56.i32[0])
                      goto LABEL_303;
                  }
                  v21 = &off_1E33FB408;
                  goto LABEL_49;
                }
                if (v13 == "looped" && v32 == 6)
                  goto LABEL_108;
                v36 = v35 == 9;
                v37 = v35 != 9;
                if (v13 != "monospace" && v35 == 9)
                {
                  if (v19)
                  {
                    if (*v13 == 109 && *(_DWORD *)(v13 + 1) == 1936682607 && *(_DWORD *)(v13 + 5) == 1701011824)
                      goto LABEL_220;
                  }
                  else
                  {
                    if (*(_WORD *)v13 == 109)
                    {
                      v48 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1969F53A0);
                      v48.i16[0] = vminvq_u16(v48);
                      if (v48.i32[0])
                        goto LABEL_220;
                    }
                    v19 = 0;
                  }
                  v37 = 0;
                  v35 = 9;
                  goto LABEL_121;
                }
                if (v13 != "monospace" || v35 != 9)
                  goto LABEL_121;
LABEL_220:
                v21 = &off_1E33FB3C0;
                goto LABEL_49;
              }
              if (v13 == "bold-italic" && v14 == 11)
                goto LABEL_79;
              if (v13 == "bold-sans-serif" || v14 != 15)
              {
                if (v13 != "bold-sans-serif")
                {
                  v30 = v14;
                  goto LABEL_179;
                }
                v30 = v14;
                if (v14 != 15)
                  goto LABEL_179;
              }
              else if ((_DWORD)v15)
              {
                if (*v13 != 98
                  || *(_QWORD *)(v13 + 1) != 0x736E61732D646C6FLL
                  || *(_QWORD *)(v13 + 7) != 0x66697265732D736ELL)
                {
LABEL_305:
                  v30 = 15;
                  goto LABEL_179;
                }
              }
              else
              {
                if (*(_WORD *)v13 != 98)
                  goto LABEL_305;
                v52 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1969F5340);
                v52.i16[0] = vminvq_u16(v52);
                if (!v52.i32[0])
                  goto LABEL_305;
                v53 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 14), (int16x8_t)xmmword_1969F5350);
                v53.i16[0] = vminvq_u16(v53);
                if (!v53.i32[0])
                  goto LABEL_305;
              }
              v21 = &off_1E33FB318;
              goto LABEL_49;
            }
            v21 = &off_1E33FB2E8;
LABEL_49:
            v17 = *((_DWORD *)v21 + 4);
            goto LABEL_50;
          }
          v21 = &WebCore::MathMLPresentationElement::parseMathVariantAttribute(WTF::AtomString const&)::mappings;
          goto LABEL_49;
        }
      }
      else
      {
        v8 = v6 + 32;
        LODWORD(v9) = v7 >> 5;
        if ((_DWORD)v9)
          goto LABEL_8;
      }
    }
    v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_17;
  }
  if (!*((_DWORD *)this + 28))
    goto LABEL_51;
LABEL_4:
  v5 = *((_QWORD *)this + 14);
  v2 = v5 & 0xFFFFFF0000000000;
  v3 = v5 & 0xFF00000000;
  v4 = v5 & 0xFFFFFF00;
  v5 = v5;
  return v3 | v5 | v2 | v4;
}

void WebCore::MathMLPresentationElement::attributeChanged(WebCore::Node *a1, WebCore::HTMLElement *this, WTF::AtomString *a3, const WebCore::QualifiedName *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  WebCore::MathMLStyle **v12;
  WebCore::RenderObject *v13;
  WebCore::MathMLStyle **v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)this != WebCore::MathMLNames::mathvariantAttr
    || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)a1 + 1192))(a1))
  {
    goto LABEL_23;
  }
  if (*((_BYTE *)a1 + 116))
    *((_BYTE *)a1 + 116) = 0;
  v10 = *((_QWORD *)a1 + 8);
  v11 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      v12 = (WebCore::MathMLStyle **)(v10 & 0xFFFFFFFFFFFFLL);
      while (1)
      {
        v13 = (WebCore::RenderObject *)v12;
        if (*((_BYTE *)v12 + 46) == 63)
          break;
        if ((*((unsigned int (**)(WebCore::MathMLStyle **))*v12 + 22))(v12))
        {
          v14 = (WebCore::MathMLStyle **)((char *)v13 + 200);
          goto LABEL_12;
        }
LABEL_13:
        v12 = (WebCore::MathMLStyle **)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v13 + 112))(v13);
        if (!v12)
        {
          if (v13 == (WebCore::RenderObject *)v11)
            goto LABEL_23;
          while (1)
          {
            v15 = *(unsigned int *)((char *)v13 + 47);
            if (v15 | ((unint64_t)*((unsigned __int8 *)v13 + 51) << 32))
            {
              v12 = *(WebCore::MathMLStyle ***)((v15 | ((unint64_t)*((unsigned __int8 *)v13 + 51) << 32)) + 8);
              if (v12)
                break;
            }
            v16 = *((_QWORD *)v13 + 4);
            if (v16)
            {
              v13 = *(WebCore::RenderObject **)(v16 + 8);
              if (v13 && v13 != (WebCore::RenderObject *)v11)
                continue;
            }
            goto LABEL_23;
          }
        }
      }
      v14 = v12 + 45;
LABEL_12:
      WebCore::MathMLStyle::resolveMathMLStyle(*v14, v13);
      goto LABEL_13;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_23:
    WebCore::MathMLElement::attributeChanged(a1, this, a3, a4, a5);
  }
}

void WebCore::MathMLRootElement::createElementRenderer(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 59, a1, a2, 76, 0);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E343A178;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = 1;
  *(_QWORD *)(v6 + 200) = v8;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 168))(v6, 0);
  *(_QWORD *)v6 = off_1E343E688;
  *(_DWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 252) = 0;
  *(_QWORD *)(v6 + 208) = 0x20000221ALL;
  *(_QWORD *)(v6 + 260) = 0;
  *(_QWORD *)(v6 + 268) = 0x3F80000000000000;
  *(_WORD *)(v6 + 220) = 0;
  *(_QWORD *)(v6 + 276) = 0;
  WebCore::MathOperator::reset((WebCore::MathOperator *)(v6 + 208), (WebCore::Font **)(v6 + 80));
  *a3 = v6;
}

unsigned int *WebCore::MathMLRowElement::childrenChanged(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  unsigned int *result;
  void *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;

  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    *(_DWORD *)(v4 + 24) += 2;
    do
    {
      v5 = v4;
      v6 = *(_WORD *)(v4 + 28);
      if ((v6 & 0x40) != 0
        && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::moTag + 24)
        && *(_BYTE *)(v4 + 144))
      {
        *(_BYTE *)(v4 + 144) = 0;
      }
      v4 = *(_QWORD *)(v4 + 56);
      if (v4)
        *(_DWORD *)(v4 + 24) += 2;
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        v7 = *(_WORD *)(v5 + 30);
        if ((v7 & 0x400) == 0)
        {
          if ((v6 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v5, a2);
          }
          else
          {
            if ((v6 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
              v7 = *(_WORD *)(v5 + 30);
            }
            *(_WORD *)(v5 + 30) = v7 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
          }
        }
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    while (v4);
  }
  result = (unsigned int *)WebCore::ContainerNode::childrenChanged(a1, a2);
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v10 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 24);
      *(_DWORD *)(v10 + 24) = v11 + 2;
      v12 = *a2;
      if ((v12 - 2) < 3)
      {
        result = *(unsigned int **)(v10 + 224);
        if (!result)
          goto LABEL_27;
        v13 = 14;
      }
      else
      {
        if (v12 != 8 && v12 != 5 || (result = *(unsigned int **)(v10 + 224)) == 0)
        {
LABEL_27:
          if (v11)
          {
            *(_DWORD *)(v10 + 24) = v11;
          }
          else
          {
            v14 = *(_WORD *)(v10 + 30);
            if ((v14 & 0x400) == 0)
            {
              v15 = *(_WORD *)(v10 + 28);
              if ((v15 & 0xF000) == 0x9000)
              {
                return WebCore::Document::removedLastRef((WebCore::Document *)v10, v9);
              }
              else
              {
                if ((v15 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 160) + 16))(*(_QWORD *)(v10 + 160));
                  v14 = *(_WORD *)(v10 + 30);
                }
                *(_WORD *)(v10 + 30) = v14 | 0x400;
                return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
              }
            }
          }
          return result;
        }
        v13 = 13;
      }
      result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v13))();
      v11 = *(_DWORD *)(v10 + 24) - 2;
      goto LABEL_27;
    }
  }
  return result;
}

uint64_t WebCore::MathMLRowElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::mfencedTag + 24))
  {
    v6 = bmalloc::api::isoAllocate();
    v10 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 52, a1, a2, 76, 0);
    *(_OWORD *)(v10 + 184) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_QWORD *)v10 = off_1E343A178;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v11 = 1;
    *(_QWORD *)(v6 + 200) = v11;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 168))(v6, 0);
    *(_QWORD *)v6 = off_1E343B0C0;
    *(_OWORD *)(v6 + 208) = 0u;
    *(_OWORD *)(v6 + 224) = 0u;
  }
  else
  {
    v6 = bmalloc::api::isoAllocate();
    v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 60, a1, a2, 76, 0);
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_QWORD *)v7 = off_1E343A178;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v8 = 1;
    *(_QWORD *)(v6 + 200) = v8;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 168))(v6, 0);
    *(_QWORD *)v6 = off_1E343EEB8;
  }
  *a3 = v6;
  return result;
}

BOOL WebCore::MathMLRowElement::acceptsMathVariantAttribute(WebCore::MathMLRowElement *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::MathMLNames::mstyleTag + 24);
}

uint64_t WebCore::MathMLScriptsElement::MathMLScriptsElement(uint64_t result, _DWORD **a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;

  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x104C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a3 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a3 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v3 = *a2;
  if (*a2)
    ++*v3;
  *(_QWORD *)(result + 96) = v3;
  *(_QWORD *)(result + 104) = 0;
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 116) = 0;
  *(_QWORD *)result = off_1E33FB950;
  v4 = *a2;
  if ((_DWORD *)WebCore::MathMLNames::msubTag == *a2
    || (v5 = *((_QWORD *)v4 + 3), v5 == *(_QWORD *)(WebCore::MathMLNames::msubTag + 24))
    && *((_QWORD *)v4 + 4) == *(_QWORD *)(WebCore::MathMLNames::msubTag + 32))
  {
    v6 = 0;
  }
  else if ((_DWORD *)WebCore::MathMLNames::msupTag == v4
         || v5 == *(_QWORD *)(WebCore::MathMLNames::msupTag + 24)
         && *((_QWORD *)v4 + 4) == *(_QWORD *)(WebCore::MathMLNames::msupTag + 32))
  {
    v6 = 1;
  }
  else if ((_DWORD *)WebCore::MathMLNames::msubsupTag == v4
         || v5 == *(_QWORD *)(WebCore::MathMLNames::msubsupTag + 24)
         && *((_QWORD *)v4 + 4) == *(_QWORD *)(WebCore::MathMLNames::msubsupTag + 32))
  {
    v6 = 2;
  }
  else if ((_DWORD *)WebCore::MathMLNames::munderTag == v4
         || v5 == *(_QWORD *)(WebCore::MathMLNames::munderTag + 24)
         && *((_QWORD *)v4 + 4) == *(_QWORD *)(WebCore::MathMLNames::munderTag + 32))
  {
    v6 = 4;
  }
  else if ((_DWORD *)WebCore::MathMLNames::moverTag == v4
         || v5 == *(_QWORD *)(WebCore::MathMLNames::moverTag + 24)
         && *((_QWORD *)v4 + 4) == *(_QWORD *)(WebCore::MathMLNames::moverTag + 32))
  {
    v6 = 5;
  }
  else if ((_DWORD *)WebCore::MathMLNames::munderoverTag == v4
         || v5 == *(_QWORD *)(WebCore::MathMLNames::munderoverTag + 24)
         && *((_QWORD *)v4 + 4) == *(_QWORD *)(WebCore::MathMLNames::munderoverTag + 32))
  {
    v6 = 6;
  }
  else
  {
    v6 = 3;
  }
  *(_DWORD *)(result + 120) = v6;
  *(_BYTE *)(result + 124) = 0;
  *(_BYTE *)(result + 132) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_BYTE *)(result + 144) = 0;
  return result;
}

void WebCore::MathMLScriptsElement::attributeChanged(WebCore::Node *a1, WebCore::HTMLElement *this, WTF::AtomString *a3, const WebCore::QualifiedName *a4, int a5)
{
  _BYTE *v5;

  if (*(_QWORD *)this == WebCore::MathMLNames::subscriptshiftAttr)
  {
    v5 = (char *)a1 + 132;
    if (!*((_BYTE *)a1 + 132))
      goto LABEL_3;
    goto LABEL_7;
  }
  if (*(_QWORD *)this == WebCore::MathMLNames::superscriptshiftAttr)
  {
    v5 = (char *)a1 + 144;
    if (*((_BYTE *)a1 + 144))
LABEL_7:
      *v5 = 0;
  }
LABEL_3:
  WebCore::MathMLElement::attributeChanged(a1, this, a3, a4, a5);
}

uint64_t WebCore::MathMLScriptsElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v6, 61, a1, a2, 76, 0);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E343A178;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = 1;
  v6[25] = v8;
  result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v6 + 168))(v6, 0);
  *v6 = off_1E343F650;
  *a3 = v6;
  return result;
}

uint64_t WebCore::MathMLSelectElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v6, 60, a1, a2, 76, 0);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E343A178;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = 1;
  v6[25] = v8;
  result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v6 + 168))(v6, 0);
  *v6 = off_1E343EEB8;
  *a3 = v6;
  return result;
}

BOOL WebCore::MathMLSelectElement::childShouldCreateRenderer(WebCore::MathMLSelectElement *this, const WebCore::Node *a2)
{
  return (*((_WORD *)a2 + 14) & 0x40) != 0 && *((_QWORD *)this + 15) == (_QWORD)a2;
}

WTF::MonotonicTime *WebCore::MathMLSelectElement::finishParsingChildren(WebCore::MathMLSelectElement *this, char *a2)
{
  WebCore::MathMLSelectElement::updateSelectedChild(this, a2);
  return WebCore::Element::finishParsingChildren(this);
}

WebCore::Node *WebCore::MathMLSelectElement::updateSelectedChild(WebCore::MathMLSelectElement *this, char *a2)
{
  WebCore::MathMLSelectElement *v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  WebCore::Node *result;
  uint64_t v7;
  WebCore::Element *v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  int *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  _QWORD *v40;
  char *v41;
  __int16 v42;
  __int16 v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  char *v47;
  int *v48;
  _QWORD *v49;
  _QWORD *v50;
  int *v51;
  WebCore::Document *v52;
  char *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::String *v62;
  __n128 v63;
  uint64_t v64;
  __int16 v65;
  __int16 v66;
  __int16 v67;
  __int16 v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;

  v2 = this;
  v3 = *((_QWORD *)this + 10);
  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::MathMLNames::mactionTag + 24))
  {
    if (v3)
    {
      v4 = 0;
      while (1)
      {
        v5 = *(_WORD *)(v3 + 28);
        if ((v5 & 8) != 0)
          break;
        v3 = *(_QWORD *)(v3 + 56);
        if (!v3)
          goto LABEL_9;
      }
      *(_DWORD *)(v3 + 24) += 2;
      if ((v5 & 0x40) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1168))(v3) & 1) != 0)
      {
        if ((*(_WORD *)(v3 + 28) & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F6DCB4);
        }
        v11 = v3;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1160))(v3) & 1) == 0)
        {
LABEL_34:
          if (*(_DWORD *)(v3 + 24) == 2)
          {
            v67 = *(_WORD *)(v3 + 30);
            if ((v67 & 0x400) == 0)
            {
              v68 = *(_WORD *)(v3 + 28);
              if ((v68 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
              }
              else
              {
                if ((v68 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD, char *))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160), a2);
                  v67 = *(_WORD *)(v3 + 30);
                }
                *(_WORD *)(v3 + 30) = v67 | 0x400;
                (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 72))(v3, a2);
              }
            }
          }
          else
          {
            *(_DWORD *)(v3 + 24) -= 2;
          }
          v4 = v3;
          goto LABEL_9;
        }
        goto LABEL_45;
      }
      v11 = v3;
      while (1)
      {
        v11 = *(_QWORD *)(v11 + 56);
        if (!v11)
          break;
        if ((*(_WORD *)(v11 + 28) & 8) != 0)
        {
          *(_DWORD *)(v11 + 24) += 2;
          break;
        }
      }
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        v65 = *(_WORD *)(v3 + 30);
        if ((v65 & 0x400) == 0)
        {
          v66 = *(_WORD *)(v3 + 28);
          if ((v66 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
          }
          else
          {
            if ((v66 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
              v65 = *(_WORD *)(v3 + 30);
            }
            *(_WORD *)(v3 + 30) = v65 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
          }
        }
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
      if (v11)
      {
LABEL_45:
        v12 = &WebCore::MathMLNames::annotationTag;
        v13 = &WebCore::MathMLNames::srcAttr;
        a2 = "application/mathml-presentation+xml";
        v14 = &WebCore::MathMLNames::annotation_xmlTag;
        v15 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        v16 = &dword_1ECE90000;
        v17 = &WebCore::MathMLNames::encodingAttr;
        do
        {
          v3 = v11;
          if ((*(_WORD *)(v11 + 28) & 0x40) != 0)
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24);
            if (v18 == *(_QWORD *)(*v12 + 24))
            {
              v24 = *(_QWORD *)(v11 + 104);
              if (!v24)
                goto LABEL_34;
              v25 = *(unsigned int *)(v24 + 4);
              if ((v25 & 1) != 0)
              {
                v26 = *(uint64_t **)(v24 + 40);
                v27 = *(unsigned int *)(v24 + 52);
              }
              else
              {
                v26 = (uint64_t *)(v24 + 32);
                v27 = v25 >> 5;
              }
              if (!v27)
                goto LABEL_34;
              v28 = *v13;
              while (1)
              {
                v29 = *v26;
                if (*v26 == v28
                  || *(_QWORD *)(v29 + 24) == *(_QWORD *)(v28 + 24) && *(_QWORD *)(v29 + 32) == *(_QWORD *)(v28 + 32))
                {
                  goto LABEL_92;
                }
                v26 += 2;
                if (!--v27)
                  goto LABEL_34;
              }
            }
            if (v18 == *(_QWORD *)(*v14 + 24))
            {
              v19 = *(_QWORD *)(v11 + 104);
              if (!v19)
              {
                v37 = v12;
                v38 = v14;
                v39 = v17;
                v33 = v16;
                goto LABEL_85;
              }
              v20 = *(unsigned int *)(v19 + 4);
              v21 = v20 >> 5;
              if ((v20 & 1) != 0)
              {
                v22 = *(uint64_t **)(v19 + 40);
                v23 = *(unsigned int *)(v19 + 52);
              }
              else
              {
                v22 = (uint64_t *)(v19 + 32);
                v23 = v20 >> 5;
              }
              if (!v23)
              {
LABEL_73:
                if ((v20 & 1) != 0)
                {
                  v32 = *(_QWORD *)(v19 + 40);
                  v21 = *(unsigned int *)(v19 + 52);
                }
                else
                {
                  v32 = v19 + 32;
                }
                v33 = v16;
                if (v21)
                {
                  v34 = *v17;
                  v35 = (_QWORD *)(v32 + 8);
                  while (1)
                  {
                    v36 = *(v35 - 1);
                    if (v36 == v34
                      || *(_QWORD *)(v36 + 24) == *(_QWORD *)(v34 + 24)
                      && *(_QWORD *)(v36 + 32) == *(_QWORD *)(v34 + 32))
                    {
                      break;
                    }
                    v35 += 2;
                    if (!--v21)
                      goto LABEL_84;
                  }
                  v37 = v12;
                  v38 = v14;
                  v39 = v17;
                  v40 = v15;
LABEL_86:
                  v41 = a2;
                  if ((MEMORY[0x19AEA53F4](*v35) & 1) != 0)
                    goto LABEL_34;
                  if ((MEMORY[0x19AEA53F4](*v35, "MathML-Presentation", 19) & 1) != 0)
                    goto LABEL_34;
                  if (*v35 == WebCore::imageSVGContentTypeAtomData)
                    goto LABEL_34;
                  if ((MEMORY[0x19AEA53F4](*v35, "SVG1.1", 6) & 1) != 0)
                    goto LABEL_34;
                  if (*v35 == *((_QWORD *)v33 + 337))
                    goto LABEL_34;
                  v16 = v33;
                  a2 = v41;
                  v15 = v40;
                  v17 = v39;
                  v14 = v38;
                  v12 = v37;
                  if (*v35 == WebCore::textHTMLContentTypeAtomData)
                    goto LABEL_34;
                  goto LABEL_92;
                }
LABEL_84:
                v37 = v12;
                v38 = v14;
                v39 = v17;
LABEL_85:
                v40 = v15;
                v35 = v15;
                goto LABEL_86;
              }
              v30 = *v13;
              while (1)
              {
                v31 = *v22;
                if (*v22 == v30
                  || *(_QWORD *)(v31 + 24) == *(_QWORD *)(v30 + 24) && *(_QWORD *)(v31 + 32) == *(_QWORD *)(v30 + 32))
                {
                  break;
                }
                v22 += 2;
                if (!--v23)
                  goto LABEL_73;
              }
            }
          }
LABEL_92:
          v11 = v3;
          while (1)
          {
            v11 = *(_QWORD *)(v11 + 56);
            if (!v11)
              break;
            if ((*(_WORD *)(v11 + 28) & 8) != 0)
            {
              *(_DWORD *)(v11 + 24) += 2;
              break;
            }
          }
          if (*(_DWORD *)(v3 + 24) == 2)
          {
            v42 = *(_WORD *)(v3 + 30);
            if ((v42 & 0x400) == 0)
            {
              v43 = *(_WORD *)(v3 + 28);
              if ((v43 & 0xF000) == 0x9000)
              {
                v50 = v15;
                v51 = v16;
                v52 = (WebCore::Document *)v3;
                v53 = a2;
                WebCore::Document::removedLastRef(v52, a2);
                a2 = v53;
                v16 = v51;
                v15 = v50;
              }
              else
              {
                v44 = v14;
                v45 = v13;
                v46 = v17;
                v47 = a2;
                v48 = v16;
                v49 = v15;
                if ((v43 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
                  v42 = *(_WORD *)(v3 + 30);
                }
                *(_WORD *)(v3 + 30) = v42 | 0x400;
                (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
                v15 = v49;
                v16 = v48;
                a2 = v47;
                v17 = v46;
                v13 = v45;
                v14 = v44;
                v12 = &WebCore::MathMLNames::annotationTag;
              }
            }
          }
          else
          {
            *(_DWORD *)(v3 + 24) -= 2;
          }
        }
        while (v11);
      }
      v58 = *((_QWORD *)v2 + 10);
      if (v58)
      {
        v4 = 0;
        while ((*(_WORD *)(v58 + 28) & 8) == 0)
        {
          v58 = *(_QWORD *)(v58 + 56);
          if (!v58)
            goto LABEL_9;
        }
        v4 = v58;
        goto LABEL_9;
      }
    }
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  if (!v3)
    goto LABEL_8;
  v4 = 0;
  while ((*(_WORD *)(v3 + 28) & 8) == 0)
  {
    v3 = *(_QWORD *)(v3 + 56);
    if (!v3)
      goto LABEL_9;
  }
  *(_DWORD *)(v3 + 24) += 2;
  v54 = *((_QWORD *)this + 13);
  if (v54
    && ((v55 = *(_DWORD *)(v54 + 4), (v55 & 1) != 0)
      ? (v56 = *(_QWORD *)(v54 + 40), LODWORD(v57) = *(_DWORD *)(v54 + 52))
      : (v56 = v54 + 32, LODWORD(v57) = v55 >> 5),
        (_DWORD)v57))
  {
    v57 = v57;
    v59 = (_QWORD *)(v56 + 8);
    while (1)
    {
      v60 = *(v59 - 1);
      if (v60 == WebCore::MathMLNames::actiontypeAttr
        || *(_QWORD *)(v60 + 24) == *(_QWORD *)(WebCore::MathMLNames::actiontypeAttr + 24)
        && *(_QWORD *)(v60 + 32) == *(_QWORD *)(WebCore::MathMLNames::actiontypeAttr + 32))
      {
        break;
      }
      v59 += 2;
      if (!--v57)
      {
        v59 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v59 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  if ((MEMORY[0x19AEA53F4](*v59, "statusline", 10) & 1) != 0 || (MEMORY[0x19AEA53F4](*v59, "tooltip", 7) & 1) != 0)
  {
    v4 = v3;
  }
  else
  {
    v64 = *((_QWORD *)v2 + 10);
    if (v64)
    {
      v4 = 0;
      while ((*(_WORD *)(v64 + 28) & 8) == 0)
      {
        v64 = *(_QWORD *)(v64 + 56);
        if (!v64)
          goto LABEL_133;
      }
      v73 = *(_QWORD *)WebCore::Element::getAttribute(v2, (const WebCore::QualifiedName *)&WebCore::MathMLNames::selectionAttr, v61, v62, v63);
      if (v73)
      {
        v74 = *(uint64_t **)(v73 + 8);
        v75 = *(unsigned int *)(v73 + 4) | ((unint64_t)((*(_DWORD *)(v73 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v74 = 0;
        v75 = 0x100000000;
      }
      WebCore::parseHTMLInteger(v74, v75, &v79);
      if (HIDWORD(v79))
        v76 = 0;
      else
        v76 = v79;
      if (v76 >= 2)
      {
        v77 = 1;
        v4 = v64;
        while (1)
        {
          v4 = *(_QWORD *)(v4 + 56);
          if (!v4)
            break;
          if ((*(_WORD *)(v4 + 28) & 8) != 0)
          {
            ++v77;
            v64 = v4;
            if (v77 == v76)
              goto LABEL_175;
          }
        }
      }
      v4 = v64;
LABEL_175:
      *(_DWORD *)(v4 + 24) += 2;
    }
    else
    {
      v4 = 0;
    }
LABEL_133:
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v71 = *(_WORD *)(v3 + 30);
      if ((v71 & 0x400) == 0)
      {
        v72 = *(_WORD *)(v3 + 28);
        if ((v72 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
        }
        else
        {
          if ((v72 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v71 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v71 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v69 = *(_WORD *)(v4 + 30);
      if ((v69 & 0x400) == 0)
      {
        v70 = *(_WORD *)(v4 + 28);
        if ((v70 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
        }
        else
        {
          if ((v70 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v69 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v69 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
LABEL_9:
  result = (WebCore::Node *)*((_QWORD *)v2 + 15);
  if (result != (WebCore::Node *)v4)
  {
    if (result && (*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F6DAF8);
      }
      WebCore::RenderTreeUpdater::tearDownRenderers(result, 0);
    }
    if (v4)
      *(_DWORD *)(v4 + 24) += 2;
    v7 = *((_QWORD *)v2 + 15);
    *((_QWORD *)v2 + 15) = v4;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        v9 = *(_WORD *)(v7 + 30);
        if ((v9 & 0x400) == 0)
        {
          v10 = *(_WORD *)(v7 + 28);
          if ((v10 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
          }
          else
          {
            if ((v10 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
              v9 = *(_WORD *)(v7 + 30);
            }
            *(_WORD *)(v7 + 30) = v9 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
          }
        }
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    result = (WebCore::Node *)WebCore::Node::invalidateStyle((uint64_t)v2, 4u, 0);
    if ((*((_BYTE *)v2 + 71) & 1) != 0)
    {
      v78 = *((_QWORD *)v2 + 4);
      if (!v78 || (*(_WORD *)(v78 + 28) & 8) == 0 || (*(_BYTE *)(v78 + 70) & 4) == 0)
      {
        do
          v2 = (WebCore::MathMLSelectElement *)*((_QWORD *)v2 + 7);
        while (v2 && (*((_WORD *)v2 + 14) & 8) == 0);
        return WebCore::invalidateForSiblingCombinators(v2, v8);
      }
    }
  }
  return result;
}

unsigned int *WebCore::MathMLSelectElement::childrenChanged(WebCore::MathMLSelectElement *a1, char *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  unsigned int *result;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;

  WebCore::MathMLSelectElement::updateSelectedChild(a1, a2);
  v5 = *((_QWORD *)a1 + 10);
  if (v5)
  {
    *(_DWORD *)(v5 + 24) += 2;
    do
    {
      v6 = v5;
      v7 = *(_WORD *)(v5 + 28);
      if ((v7 & 0x40) != 0
        && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::MathMLNames::moTag + 24)
        && *(_BYTE *)(v5 + 144))
      {
        *(_BYTE *)(v5 + 144) = 0;
      }
      v5 = *(_QWORD *)(v5 + 56);
      if (v5)
        *(_DWORD *)(v5 + 24) += 2;
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        v8 = *(_WORD *)(v6 + 30);
        if ((v8 & 0x400) == 0)
        {
          if ((v7 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v6, v4);
          }
          else
          {
            if ((v7 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
              v8 = *(_WORD *)(v6 + 30);
            }
            *(_WORD *)(v6 + 30) = v8 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
          }
        }
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    while (v5);
  }
  result = (unsigned int *)WebCore::ContainerNode::childrenChanged((uint64_t)a1, a2);
  if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v11 = *(_QWORD *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = v12 + 2;
      v13 = *a2;
      if ((v13 - 2) < 3)
      {
        result = *(unsigned int **)(v11 + 224);
        if (!result)
          goto LABEL_27;
        v14 = 14;
      }
      else
      {
        if (v13 != 8 && v13 != 5 || (result = *(unsigned int **)(v11 + 224)) == 0)
        {
LABEL_27:
          if (v12)
          {
            *(_DWORD *)(v11 + 24) = v12;
          }
          else
          {
            v15 = *(_WORD *)(v11 + 30);
            if ((v15 & 0x400) == 0)
            {
              v16 = *(_WORD *)(v11 + 28);
              if ((v16 & 0xF000) == 0x9000)
              {
                return WebCore::Document::removedLastRef((WebCore::Document *)v11, v10);
              }
              else
              {
                if ((v16 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
                  v15 = *(_WORD *)(v11 + 30);
                }
                *(_WORD *)(v11 + 30) = v15 | 0x400;
                return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
              }
            }
          }
          return result;
        }
        v14 = 13;
      }
      result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v14))();
      v12 = *(_DWORD *)(v11 + 24) - 2;
      goto LABEL_27;
    }
  }
  return result;
}

void WebCore::MathMLSelectElement::attributeChanged(WebCore::MathMLSelectElement *this, WebCore::HTMLElement *a2, WTF::AtomString *a3, const WebCore::QualifiedName *a4, int a5)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  WebCore::MathMLStyle **v14;
  WebCore::RenderObject *v15;
  WebCore::MathMLStyle **v16;
  uint64_t v17;
  uint64_t v18;

  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::MathMLNames::mactionTag + 24)
    && (v10 == WebCore::MathMLNames::actiontypeAttr || v10 == WebCore::MathMLNames::selectionAttr))
  {
    WebCore::MathMLSelectElement::updateSelectedChild(this, (char *)a2);
    v10 = *(_QWORD *)a2;
  }
  if (v10 != WebCore::MathMLNames::mathvariantAttr
    || !(*(unsigned int (**)(WebCore::MathMLSelectElement *))(*(_QWORD *)this + 1192))(this))
  {
    goto LABEL_30;
  }
  if (*((_BYTE *)this + 116))
    *((_BYTE *)this + 116) = 0;
  v12 = *((_QWORD *)this + 8);
  v13 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v12 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      v14 = (WebCore::MathMLStyle **)(v12 & 0xFFFFFFFFFFFFLL);
      while (1)
      {
        v15 = (WebCore::RenderObject *)v14;
        if (*((_BYTE *)v14 + 46) == 63)
          break;
        if ((*((unsigned int (**)(WebCore::MathMLStyle **))*v14 + 22))(v14))
        {
          v16 = (WebCore::MathMLStyle **)((char *)v15 + 200);
          goto LABEL_19;
        }
LABEL_20:
        v14 = (WebCore::MathMLStyle **)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v15 + 112))(v15);
        if (!v14)
        {
          if (v15 == (WebCore::RenderObject *)v13)
            goto LABEL_30;
          while (1)
          {
            v17 = *(unsigned int *)((char *)v15 + 47);
            if (v17 | ((unint64_t)*((unsigned __int8 *)v15 + 51) << 32))
            {
              v14 = *(WebCore::MathMLStyle ***)((v17 | ((unint64_t)*((unsigned __int8 *)v15 + 51) << 32)) + 8);
              if (v14)
                break;
            }
            v18 = *((_QWORD *)v15 + 4);
            if (v18)
            {
              v15 = *(WebCore::RenderObject **)(v18 + 8);
              if (v15 && v15 != (WebCore::RenderObject *)v13)
                continue;
            }
            goto LABEL_30;
          }
        }
      }
      v16 = v14 + 45;
LABEL_19:
      WebCore::MathMLStyle::resolveMathMLStyle(*v16, v15);
      goto LABEL_20;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_30:
    WebCore::MathMLElement::attributeChanged(this, a2, a3, a4, a5);
  }
}

void WebCore::MathMLSelectElement::defaultEventHandler(WebCore::MathMLSelectElement *this, WebCore::Event *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::String *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(this);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  if (*((_QWORD *)a2 + 3) != *(_QWORD *)(v6 + 400))
    goto LABEL_22;
  v7 = *((_QWORD *)this + 13);
  if (!v7)
    goto LABEL_18;
  v8 = *(_DWORD *)(v7 + 4);
  if ((v8 & 1) == 0)
  {
    v9 = v7 + 32;
    LODWORD(v10) = v8 >> 5;
    if ((_DWORD)v10)
      goto LABEL_10;
LABEL_18:
    v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_19;
  }
  v9 = *(_QWORD *)(v7 + 40);
  LODWORD(v10) = *(_DWORD *)(v7 + 52);
  if (!(_DWORD)v10)
    goto LABEL_18;
LABEL_10:
  v10 = v10;
  v11 = (_QWORD *)(v9 + 8);
  while (1)
  {
    v12 = *(v11 - 1);
    if (v12 == WebCore::MathMLNames::actiontypeAttr
      || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::MathMLNames::actiontypeAttr + 24)
      && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::MathMLNames::actiontypeAttr + 32))
    {
      break;
    }
    v11 += 2;
    if (!--v10)
    {
      v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_19:
  if (!MEMORY[0x19AEA53F4](*v11, "toggle", 6))
  {
LABEL_22:
    WebCore::MathMLElement::defaultEventHandler((uint64_t)this, a2);
    return;
  }
  v16 = *((_QWORD *)this + 10);
  if (v16)
  {
    v17 = 1;
    while ((*(_WORD *)(v16 + 28) & 8) == 0)
    {
      v16 = *(_QWORD *)(v16 + 56);
      if (!v16)
        goto LABEL_26;
    }
    v26 = *(_QWORD *)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)&WebCore::MathMLNames::selectionAttr, v13, v14, v15);
    if (v26)
    {
      v27 = *(uint64_t **)(v26 + 8);
      v28 = *(unsigned int *)(v26 + 4) | ((unint64_t)((*(_DWORD *)(v26 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v27 = 0;
      v28 = 0x100000000;
    }
    WebCore::parseHTMLInteger(v27, v28, (uint64_t *)&v32);
    if (HIDWORD(v32))
      v29 = 0;
    else
      v29 = (int)v32;
    v30 = 1;
    if (v29 >= 2)
    {
      v31 = v16;
      while (1)
      {
        v31 = *(_QWORD *)(v31 + 56);
        if (!v31)
          break;
        if ((*(_WORD *)(v31 + 28) & 8) != 0)
        {
          ++v30;
          v16 = v31;
          if (v30 == v29)
          {
            v16 = v31;
            v30 = v29;
            break;
          }
        }
      }
    }
    v17 = (v30 + 1);
    while (1)
    {
      v16 = *(_QWORD *)(v16 + 56);
      if (!v16)
        break;
      if ((*(_WORD *)(v16 + 28) & 8) != 0)
        goto LABEL_26;
    }
  }
  v17 = 1;
LABEL_26:
  WTF::AtomString::number((WTF::AtomString *)v17);
  v18 = *((_QWORD *)this + 13);
  if (!v18)
    goto LABEL_38;
  v19 = *(_DWORD *)(v18 + 4);
  if ((v19 & 1) == 0)
  {
    v20 = (uint64_t *)(v18 + 32);
    v21 = v19 >> 5;
    if (!v21)
      goto LABEL_38;
LABEL_31:
    v22 = 0;
    while (1)
    {
      v23 = *v20;
      if (*v20 == WebCore::MathMLNames::selectionAttr
        || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::MathMLNames::selectionAttr + 24)
        && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::MathMLNames::selectionAttr + 32))
      {
        goto LABEL_39;
      }
      ++v22;
      v20 += 2;
      if (v21 == v22)
        goto LABEL_38;
    }
  }
  v20 = *(uint64_t **)(v18 + 40);
  v21 = *(_DWORD *)(v18 + 52);
  if (v21)
    goto LABEL_31;
LABEL_38:
  v22 = 0xFFFFFFFFLL;
LABEL_39:
  WebCore::Element::setAttributeInternal(this, v22, (WebCore::TreeScope *)&WebCore::MathMLNames::selectionAttr, &v32, 0);
  v25 = v32;
  v32 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  *((_DWORD *)a2 + 5) |= 0x80u;
}

uint64_t WebCore::MathMLSelectElement::willRespondToMouseClickEventsWithEditability(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 104);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (_QWORD *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::MathMLNames::actiontypeAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::MathMLNames::actiontypeAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::MathMLNames::actiontypeAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if ((MEMORY[0x19AEA53F4](*v8, "toggle", 6) & 1) != 0 || (*(_WORD *)(a1 + 30) & 1) != 0)
    return 1;
  else
    return WebCore::Node::willRespondToMouseClickEventsWithEditability(a1, a2);
}

void WebCore::MathMLSpaceElement::attributeChanged(WebCore::Node *a1, WebCore::HTMLElement *this, WTF::AtomString *a3, const WebCore::QualifiedName *a4, int a5)
{
  uint64_t v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::MathMLStyle **v15;
  WebCore::RenderObject *v16;
  WebCore::MathMLStyle **v17;
  uint64_t v18;
  uint64_t v19;

  v10 = *(_QWORD *)this;
  v11 = *(unsigned __int16 *)(*(_QWORD *)this + 10);
  if (v11 == 429)
  {
    v12 = (char *)a1 + 152;
    if (!*((_BYTE *)a1 + 152))
      goto LABEL_6;
LABEL_5:
    *v12 = 0;
    goto LABEL_6;
  }
  if (v11 != 504)
  {
    if (v11 != 922)
      goto LABEL_6;
    v12 = (char *)a1 + 128;
    if (!*((_BYTE *)a1 + 128))
      goto LABEL_6;
    goto LABEL_5;
  }
  v12 = (char *)a1 + 140;
  if (*((_BYTE *)a1 + 140))
    goto LABEL_5;
  if (v10 != WebCore::MathMLNames::mathvariantAttr
    || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)a1 + 1192))(a1))
  {
    goto LABEL_28;
  }
LABEL_6:
  if (*((_BYTE *)a1 + 116))
    *((_BYTE *)a1 + 116) = 0;
  v13 = *((_QWORD *)a1 + 8);
  v14 = v13 & 0xFFFFFFFFFFFFLL;
  if ((v13 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v13 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      v15 = (WebCore::MathMLStyle **)(v13 & 0xFFFFFFFFFFFFLL);
      while (1)
      {
        v16 = (WebCore::RenderObject *)v15;
        if (*((_BYTE *)v15 + 46) == 63)
          break;
        if ((*((unsigned int (**)(WebCore::MathMLStyle **))*v15 + 22))(v15))
        {
          v17 = (WebCore::MathMLStyle **)((char *)v16 + 200);
          goto LABEL_17;
        }
LABEL_18:
        v15 = (WebCore::MathMLStyle **)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v16 + 112))(v16);
        if (!v15)
        {
          if (v16 == (WebCore::RenderObject *)v14)
            goto LABEL_28;
          while (1)
          {
            v18 = *(unsigned int *)((char *)v16 + 47);
            if (v18 | ((unint64_t)*((unsigned __int8 *)v16 + 51) << 32))
            {
              v15 = *(WebCore::MathMLStyle ***)((v18 | ((unint64_t)*((unsigned __int8 *)v16 + 51) << 32)) + 8);
              if (v15)
                break;
            }
            v19 = *((_QWORD *)v16 + 4);
            if (v19)
            {
              v16 = *(WebCore::RenderObject **)(v19 + 8);
              if (v16 && v16 != (WebCore::RenderObject *)v14)
                continue;
            }
            goto LABEL_28;
          }
        }
      }
      v17 = v15 + 45;
LABEL_17:
      WebCore::MathMLStyle::resolveMathMLStyle(*v17, v16);
      goto LABEL_18;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_28:
    WebCore::MathMLElement::attributeChanged(a1, this, a3, a4, a5);
  }
}

uint64_t WebCore::MathMLSpaceElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v6, 62, a1, a2, 76, 0);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E343A178;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = 1;
  v6[25] = v8;
  result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v6 + 168))(v6, 0);
  *v6 = off_1E343FDE8;
  *a3 = v6;
  return result;
}

uint64_t WebCore::MathMLTokenElement::didAttachRenderers(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_7;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL);
    if ((_DWORD)this)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(v1) & 1) != 0)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1928))(v1);
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x195F6E73CLL);
    }
  }
  return this;
}

_QWORD *WebCore::MathMLTokenElement::childrenChanged(uint64_t a1, _BYTE *a2)
{
  _QWORD *result;
  void *v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;

  result = (_QWORD *)WebCore::ContainerNode::childrenChanged(a1, a2);
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v7 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v7)
    goto LABEL_2;
  v8 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 2;
  v9 = *a2;
  if ((v9 - 2) < 3)
  {
    result = *(_QWORD **)(v7 + 224);
    if (!result)
      goto LABEL_14;
    v10 = 14;
    goto LABEL_27;
  }
  if (v9 == 8 || v9 == 5)
  {
    result = *(_QWORD **)(v7 + 224);
    if (result)
    {
      v10 = 13;
LABEL_27:
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
      v8 = *(_DWORD *)(v7 + 24) - 2;
    }
  }
LABEL_14:
  if (v8)
  {
    *(_DWORD *)(v7 + 24) = v8;
  }
  else
  {
    v11 = *(_WORD *)(v7 + 30);
    if ((v11 & 0x400) == 0)
    {
      v12 = *(_WORD *)(v7 + 28);
      if ((v12 & 0xF000) == 0x9000)
      {
        result = WebCore::Document::removedLastRef((WebCore::Document *)v7, v5);
      }
      else
      {
        if ((v12 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
          v11 = *(_WORD *)(v7 + 30);
        }
        *(_WORD *)(v7 + 30) = v11 | 0x400;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      }
    }
  }
LABEL_2:
  v6 = (_BYTE *)(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL);
  if (v6)
  {
    if ((v6[45] & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F6E8ACLL);
    }
    result = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 208))(v6);
    if ((_DWORD)result)
    {
      if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 208))(v6) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F6E8E4);
      }
      return (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 1928))(v6);
    }
  }
  return result;
}

uint64_t WebCore::MathMLTokenElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 64, a1, a2, 76, 0);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E343A178;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = 1;
  *(_QWORD *)(v6 + 200) = v8;
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 168))(v6, 0);
  *(_QWORD *)v6 = off_1E3440580;
  *(_BYTE *)(v6 + 208) = 0;
  *(_BYTE *)(v6 + 212) = 0;
  *(_WORD *)(v6 + 216) = 0;
  *a3 = v6;
  return result;
}

uint64_t WebCore::MathMLTokenElement::childShouldCreateRenderer(WebCore::MathMLTokenElement *this, const WebCore::Node *a2)
{
  if ((*((_WORD *)a2 + 14) & 0x20) == 0)
    return 1;
  if (*(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    return (*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)a2 + 1232))(a2);
  return 0;
}

uint64_t WebCore::MathMLTokenElement::convertToSingleCodePoint(const char *a1, unint64_t a2)
{
  const char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  int v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v28;

  v2 = (const char *)a2;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      v3 = 0;
      v4 = (a2 - 1);
      LODWORD(v5) = 1;
      while (1)
      {
        v6 = a1[v3];
        v7 = v6 > 0x20;
        v8 = (1 << v6) & 0x100002600;
        v9 = v7 || v8 == 0;
        if (v9)
          break;
        if (a2 == ++v3)
        {
          a2 = 0x100000000;
          a1 = "";
          goto LABEL_40;
        }
      }
      if ((_DWORD)a2 != 1)
      {
        LODWORD(v5) = 1;
        v10 = (a2 - 1);
        while (v10 < a2)
        {
          v11 = a1[v10];
          v7 = v11 > 0x20;
          v12 = (1 << v11) & 0x100002600;
          if (!v7 && v12 != 0)
          {
            if ((_DWORD)--v10)
              continue;
          }
          if (!(_DWORD)v3 && (_DWORD)v10 == (_DWORD)v4)
            goto LABEL_40;
          goto LABEL_20;
        }
        goto LABEL_59;
      }
      if ((_DWORD)v3)
      {
        LODWORD(v10) = 0;
LABEL_20:
        v4 = (v10 - v3 + 1);
        v2 = (const char *)(a2 - v3);
        if ((unint64_t)v2 < v4)
          goto LABEL_59;
        a1 += v3;
        a2 = v4 | 0x100000000;
      }
    }
  }
  else if ((_DWORD)a2)
  {
    v14 = 0;
    LODWORD(v10) = a2 - 1;
    v4 = (unint64_t)a1;
    while (1)
    {
      v15 = *(unsigned __int16 *)v4;
      v7 = v15 > 0x20;
      v16 = (1 << v15) & 0x100002600;
      if (v7 || v16 == 0)
        break;
      ++v14;
      v4 += 2;
      if (a2 == v14)
      {
        a2 = 0x100000000;
        a1 = "";
        goto LABEL_40;
      }
    }
    if ((_DWORD)a2 != 1)
    {
      v5 = (a2 - 1);
      while (v5 < a2)
      {
        v18 = *(unsigned __int16 *)&a1[2 * v5];
        v7 = v18 > 0x20;
        v19 = (1 << v18) & 0x100002600;
        if (!v7 && v19 != 0)
        {
          if ((_DWORD)--v5)
            continue;
        }
        if ((_DWORD)v14 || (_DWORD)v5 != (_DWORD)v10)
          goto LABEL_58;
        goto LABEL_40;
      }
      goto LABEL_59;
    }
    if ((_DWORD)v14)
    {
      LODWORD(v5) = 0;
LABEL_58:
      LODWORD(v10) = v5 - v14;
      a2 = (v5 - v14 + 1);
      v2 -= v14;
      a1 = (const char *)v4;
      if ((unint64_t)v2 < a2)
      {
LABEL_59:
        __break(1u);
LABEL_60:
        if (v4 != 1)
        {
          v21 = v10;
          if ((v10 & 0x400) == 0)
          {
            v28 = *((unsigned __int16 *)a1 + 1);
            v9 = (v28 & 0xFC00) == 56320;
            v21 = v28 + ((_DWORD)v10 << 10) - 56613888;
            if (!v9)
              v21 = v10;
          }
          goto LABEL_46;
        }
LABEL_45:
        v21 = v10;
LABEL_46:
        if ((v10 & 0xFC00) == (_DWORD)v5)
        {
          if (v4 != 1)
          {
            v4 = 1;
            if ((*((_WORD *)a1 + 1) & 0xFC00) == 0xDC00)
              v4 = 2;
          }
        }
        else
        {
          v4 = 1;
        }
        v22 = &a1[2 * v4];
        goto LABEL_51;
      }
    }
  }
LABEL_40:
  v2 = &a1[a2];
  if ((a2 & 0xFF00000000) == 0)
    v2 = &a1[2 * a2];
  if (a1 == v2)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    return v24 | v23 | v25;
  }
  if ((a2 & 0xFF00000000) == 0)
  {
    v4 = a2;
    LODWORD(v10) = *(unsigned __int16 *)a1;
    LODWORD(v5) = 55296;
    if ((v10 & 0xF800) != 0xD800)
      goto LABEL_45;
    goto LABEL_60;
  }
  v26 = *(unsigned __int8 *)a1;
  v22 = a1 + 1;
  v21 = v26;
LABEL_51:
  v9 = v22 == v2;
  v25 = v21 & 0xFFFFFF00;
  v23 = v21;
  v24 = 0x100000000;
  if (!v9)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
  }
  return v24 | v23 | v25;
}

void WebCore::MathMLUnderOverElement::attributeChanged(WebCore::Node *a1, WebCore::HTMLElement *this, WTF::AtomString *a3, const WebCore::QualifiedName *a4, int a5)
{
  _BYTE *v5;

  if (*(_QWORD *)this == WebCore::MathMLNames::accentAttr)
  {
    v5 = (char *)a1 + 152;
    if (!*((_BYTE *)a1 + 152))
      goto LABEL_3;
    goto LABEL_7;
  }
  if (*(_QWORD *)this == WebCore::MathMLNames::accentunderAttr)
  {
    v5 = (char *)a1 + 160;
    if (*((_BYTE *)a1 + 160))
LABEL_7:
      *v5 = 0;
  }
LABEL_3:
  WebCore::MathMLElement::attributeChanged(a1, this, a3, a4, a5);
}

uint64_t WebCore::MathMLUnderOverElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject((uint64_t)v6, 65, a1, a2, 76, 0);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E343A178;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v8 = 1;
  v6[25] = v8;
  result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v6 + 168))(v6, 0);
  *v6 = off_1E3440D20;
  *a3 = v6;
  return result;
}

void WebCore::MathMLPresentationElement::~MathMLPresentationElement(WebCore::MathMLPresentationElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::MathMLRowElement::~MathMLRowElement(WebCore::MathMLRowElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::MathMLRootElement::~MathMLRootElement(WebCore::MathMLRootElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::MathMLScriptsElement::~MathMLScriptsElement(WebCore::MathMLScriptsElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::MathMLSelectElement::~MathMLSelectElement(WebCore::MathMLSelectElement *this, void *a2)
{
  uint64_t v3;
  __int16 v4;
  __int16 v5;

  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v4 = *(_WORD *)(v3 + 30);
      if ((v4 & 0x400) == 0)
      {
        v5 = *(_WORD *)(v3 + 28);
        if ((v5 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
        }
        else
        {
          if ((v5 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v4 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v4 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;
  __int16 v6;
  __int16 v7;

  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v6 = *(_WORD *)(v3 + 30);
      if ((v6 & 0x400) == 0)
      {
        v7 = *(_WORD *)(v3 + 28);
        if ((v7 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
        }
        else
        {
          if ((v7 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v6 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v6 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::MathMLSpaceElement::~MathMLSpaceElement(WebCore::MathMLSpaceElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::MathMLTokenElement::~MathMLTokenElement(WebCore::MathMLTokenElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::MathMLUnderOverElement::~MathMLUnderOverElement(WebCore::MathMLUnderOverElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::operator<<(uint64_t a1, __int16 a2)
{
  if ((a2 & 1) != 0)
  {
    WTF::TextStream::operator<<();
    if ((a2 & 2) == 0)
    {
      if ((a2 & 4) != 0)
      {
LABEL_24:
        WTF::TextStream::operator<<();
LABEL_25:
        WTF::TextStream::operator<<();
        if ((a2 & 8) != 0)
          goto LABEL_26;
        goto LABEL_15;
      }
LABEL_14:
      if ((a2 & 8) != 0)
      {
LABEL_26:
        WTF::TextStream::operator<<();
LABEL_27:
        WTF::TextStream::operator<<();
        if ((a2 & 0x10) != 0)
          goto LABEL_28;
        goto LABEL_16;
      }
LABEL_15:
      if ((a2 & 0x10) != 0)
      {
LABEL_28:
        WTF::TextStream::operator<<();
LABEL_29:
        WTF::TextStream::operator<<();
        if ((a2 & 0x20) != 0)
          goto LABEL_30;
        goto LABEL_17;
      }
LABEL_16:
      if ((a2 & 0x20) != 0)
      {
LABEL_30:
        WTF::TextStream::operator<<();
LABEL_31:
        WTF::TextStream::operator<<();
        if ((a2 & 0x40) != 0)
          goto LABEL_32;
        goto LABEL_18;
      }
LABEL_17:
      if ((a2 & 0x40) != 0)
      {
LABEL_32:
        WTF::TextStream::operator<<();
LABEL_33:
        WTF::TextStream::operator<<();
        if ((a2 & 0x80) != 0)
          goto LABEL_34;
        goto LABEL_19;
      }
LABEL_18:
      if ((a2 & 0x80) != 0)
      {
LABEL_34:
        WTF::TextStream::operator<<();
LABEL_35:
        WTF::TextStream::operator<<();
        if ((a2 & 0x100) != 0)
          goto LABEL_36;
        goto LABEL_20;
      }
LABEL_19:
      if ((a2 & 0x100) != 0)
      {
LABEL_36:
        WTF::TextStream::operator<<();
        goto LABEL_37;
      }
LABEL_20:
      if ((a2 & 0x200) == 0)
        return a1;
      goto LABEL_38;
    }
    WTF::TextStream::operator<<();
LABEL_23:
    WTF::TextStream::operator<<();
    if ((a2 & 4) != 0)
      goto LABEL_24;
    goto LABEL_14;
  }
  if ((a2 & 2) != 0)
    goto LABEL_23;
  if ((a2 & 4) != 0)
    goto LABEL_25;
  if ((a2 & 8) != 0)
    goto LABEL_27;
  if ((a2 & 0x10) != 0)
    goto LABEL_29;
  if ((a2 & 0x20) != 0)
    goto LABEL_31;
  if ((a2 & 0x40) != 0)
    goto LABEL_33;
  if ((a2 & 0x80) != 0)
    goto LABEL_35;
  if ((a2 & 0x100) == 0)
  {
    if ((a2 & 0x200) == 0)
      return a1;
    goto LABEL_39;
  }
LABEL_37:
  WTF::TextStream::operator<<();
  if ((a2 & 0x200) != 0)
  {
LABEL_38:
    WTF::TextStream::operator<<();
LABEL_39:
    WTF::TextStream::operator<<();
  }
  return a1;
}

WTF *WebCore::AutoscrollController::autoscrollTimerFired(WTF *this)
{
  WTF *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  double v9;
  _DWORD *v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  WTF *v21;

  v1 = this;
  v2 = *((_QWORD *)this + 7);
  if (!v2)
    return WebCore::AutoscrollController::stopAutoscrollTimer(this, 0);
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return WebCore::AutoscrollController::stopAutoscrollTimer(this, 0);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40) + 8) + 528);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *((unsigned __int8 *)this + 64);
  if (v8 != 2)
  {
    if (v8 != 1 || (this = (WTF *)WTF::WallTime::now(this), v9 - *((double *)v1 + 10) <= 0.2))
    {
LABEL_12:
      if (!v5)
        return this;
      goto LABEL_23;
    }
    v10 = *(_DWORD **)(*((_QWORD *)v1 + 7) + 8);
    ++v10[4];
    this = (WTF *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v10 + 1392))(v10, (uint64_t)v1 + 68);
    v11 = v10[4];
    if (v11)
    {
      v10[4] = v11 - 1;
      goto LABEL_12;
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x195F6F334);
  }
  v12 = *(unsigned __int8 **)(v5 + 640);
  v13 = (*(_DWORD *)v12)++;
  if (v13 == -1)
    goto LABEL_33;
  v14 = v12[794];
  *(_DWORD *)v12 = v13;
  if (v14)
  {
    v15 = *((_QWORD *)this + 7);
    if (v15)
      v16 = *(_DWORD **)(v15 + 8);
    else
      v16 = 0;
    ++v16[4];
    ++*(_DWORD *)v12;
    v21 = (WTF *)WebCore::EventHandler::targetPositionInWindowForSelectionAutoscroll((WebCore::EventHandler *)v12);
    this = (WTF *)(*(uint64_t (**)(_DWORD *, WTF **))(*(_QWORD *)v16 + 1392))(v16, &v21);
    if (!*(_DWORD *)v12)
    {
      __break(0xC471u);
      JUMPOUT(0x195F6F354);
    }
    --*(_DWORD *)v12;
    v17 = v16[4];
    if (!v17)
    {
      __break(0xC471u);
      JUMPOUT(0x195F6F374);
    }
    v16[4] = v17 - 1;
  }
  else
  {
    this = WebCore::AutoscrollController::stopAutoscrollTimer(this, 0);
  }
  do
  {
LABEL_23:
    v18 = __ldaxr(v6);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v6));
  if (!v19)
  {
    atomic_store(1u, v6);
    v20 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v20 = off_1E31FE290;
    *((_QWORD *)v20 + 1) = v6;
    v21 = v20;
    WTF::ensureOnMainThread();
    this = v21;
    v21 = 0;
    if (this)
      return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

double WebCore::AutoscrollController::startAutoscrollForSelection(WebCore::AutoscrollController *this, WebCore::RenderObject *a2)
{
  void *v4;
  WebCore::RenderObject *Autoscrollable;
  double result;
  WTF::MonotonicTime *v7;
  WTF *v8;
  double v9;
  WTF *v10;

  if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) != 0)
  {
    result = *(double *)((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) + 8);
    if (result != 0.0)
      return result;
  }
  Autoscrollable = (WebCore::RenderObject *)WebCore::RenderBox::findAutoscrollable((uint64_t)a2, a2);
  if (!Autoscrollable)
  {
    Autoscrollable = a2;
    if (*((_BYTE *)a2 + 46) != 18)
      return result;
  }
  *((_BYTE *)this + 64) = 2;
  v7 = (WTF::MonotonicTime *)*((_QWORD *)Autoscrollable + 1);
  if (!v7)
  {
    v7 = (WTF::MonotonicTime *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *((_QWORD *)v7 + 1) = Autoscrollable;
    v10 = (WTF *)*((_QWORD *)Autoscrollable + 1);
    *((_QWORD *)Autoscrollable + 1) = v7;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WTF::fastFree(v10, v4);
        v7 = (WTF::MonotonicTime *)*((_QWORD *)Autoscrollable + 1);
        if (!v7)
          goto LABEL_6;
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  ++*(_DWORD *)v7;
LABEL_6:
  v8 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      v7 = (WTF::MonotonicTime *)WTF::fastFree(v8, v4);
    else
      --*(_DWORD *)v8;
  }
  *((_QWORD *)this + 3) = 0x3FA999999999999ALL;
  WTF::MonotonicTime::now(v7);
  WebCore::TimerBase::setNextFireTime((uint64_t)this, v9 + 0.05);
  return result;
}

WTF *WebCore::AutoscrollController::stopAutoscrollTimer(WebCore::AutoscrollController *this, void *a2)
{
  BOOL v2;
  WTF *result;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WebCore::AutoscrollController **v17;
  char v18;
  uint64_t v19;

  v2 = (char)a2;
  result = (WTF *)*((_QWORD *)this + 7);
  if (!result)
  {
    v5 = 0;
LABEL_3:
    v6 = 1;
    goto LABEL_4;
  }
  v5 = *((_QWORD *)result + 1);
  if (!v5)
    goto LABEL_3;
  v6 = 0;
  ++*(_DWORD *)(v5 + 16);
LABEL_4:
  if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) != 0)
  {
    WebCore::TimerBase::stopSlowCase(this);
    result = (WTF *)*((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 7) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  if (v5)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8) + 528);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        v13 = *((unsigned __int8 *)this + 64);
        v12 = (char *)this + 64;
        if (v13 == 2)
        {
          v14 = *(_QWORD *)(v9 + 640);
          if (*(_BYTE *)(v14 + 185))
          {
            ++*(_DWORD *)v14;
            WebCore::EventHandler::subframeForTargetNode(*(_QWORD *)(v14 + 16), (WebCore::Node *)a2, &v19);
            v15 = v19;
            if (v19)
            {
              v16 = *(unsigned __int8 *)(v19 + 144);
              v19 = 0;
              if (!v16)
              {
                if (*(_DWORD *)v14)
                {
                  --*(_DWORD *)v14;
                  v17 = *(WebCore::AutoscrollController ***)(v15 + 640);
                  ++*(_DWORD *)v17;
                  WebCore::EventHandler::stopAutoscrollTimer(v17, v2);
                  if (!*(_DWORD *)v17)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195F6F6E4);
                  }
                  --*(_DWORD *)v17;
                  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
                  goto LABEL_32;
                }
LABEL_39:
                __break(0xC471u);
                JUMPOUT(0x195F6F6C4);
              }
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
            }
            else
            {
              v19 = 0;
            }
            if (!*(_DWORD *)v14)
              goto LABEL_39;
            --*(_DWORD *)v14;
LABEL_32:
            result = (WTF *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
            goto LABEL_10;
          }
        }
        v18 = 0;
LABEL_29:
        if (!v2)
          result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1400))(v5);
        *v12 = 0;
        if ((v18 & 1) != 0)
          goto LABEL_10;
        goto LABEL_32;
      }
    }
    else
    {
      v9 = 0;
    }
    v12 = (char *)this + 64;
    v18 = 1;
    goto LABEL_29;
  }
LABEL_10:
  if ((v6 & 1) == 0)
  {
    v7 = *(_DWORD *)(v5 + 16);
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x195F6F67CLL);
    }
    *(_DWORD *)(v5 + 16) = v7 - 1;
  }
  return result;
}

_QWORD *WebCore::AutoscrollController::updateAutoscrollRenderer(_QWORD *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v2 = this[7];
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return this;
  v4 = this;
  while (1)
  {
    if ((*(_BYTE *)(v3 + 45) & 4) != 0)
    {
      if (*(_BYTE *)(v3 + 46) == 49)
      {
        if (WebCore::LocalFrameView::isScrollable(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8)
                                                                                                 + 40)
                                                                                     + 8)
                                                                         + 1944)
                                                             + 248)))
          break;
        goto LABEL_9;
      }
      if ((WebCore::RenderBox::canBeScrolledAndHasScrollableArea((WebCore::RenderBox *)v3) & 1) != 0)
        break;
    }
LABEL_9:
    v5 = *(_QWORD *)(v3 + 32);
    if (v5)
    {
      v3 = *(_QWORD *)(v5 + 8);
      if (v3)
        continue;
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v3 + 45) & 4) == 0)
  {
LABEL_13:
    this = (_QWORD *)v4[7];
    v4[7] = 0;
    if (!this)
      return this;
    if (*(_DWORD *)this != 1)
    {
      --*(_DWORD *)this;
      return this;
    }
    return (_QWORD *)WTF::fastFree((WTF *)this, a2);
  }
  this = *(_QWORD **)(v3 + 8);
  if (this)
    goto LABEL_18;
  this = (_QWORD *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)this = 1;
  this[1] = v3;
  v7 = *(WTF **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = this;
  if (!v7)
    goto LABEL_18;
  if (*(_DWORD *)v7 != 1)
  {
    --*(_DWORD *)v7;
    goto LABEL_18;
  }
  WTF::fastFree(v7, a2);
  this = *(_QWORD **)(v3 + 8);
  if (this)
LABEL_18:
    ++*(_DWORD *)this;
  v6 = (_DWORD *)v4[7];
  v4[7] = this;
  if (!v6)
    return this;
  if (*v6 != 1)
  {
    --*v6;
    return this;
  }
  this = v6;
  return (_QWORD *)WTF::fastFree((WTF *)this, a2);
}

WTF *WebCore::AutoscrollController::updateDragAndDrop(uint64_t a1, WebCore::RenderObject *a2, const WebCore::IntPoint *a3, double a4)
{
  WTF *result;
  void *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  WTF *v14;
  int v15;
  WTF *v16;
  WTF *v17;
  WTF::MonotonicTime *v18;
  WTF *v19;
  double v20;
  int v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  WTF *v25;

  if (!a2)
    return WebCore::AutoscrollController::stopAutoscrollTimer((WebCore::AutoscrollController *)a1, 0);
  result = (WTF *)WebCore::RenderBox::findAutoscrollable(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL, a2);
  if (!result)
    return WebCore::AutoscrollController::stopAutoscrollTimer((WebCore::AutoscrollController *)a1, 0);
  v9 = result;
  ++*((_DWORD *)result + 4);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 3) + 8) + 40)
                                                      + 8)
                                          + 528)
                              + 8)
                  + 24);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
  {
    ++*(_DWORD *)v11;
    if ((*(_QWORD *)(*(_QWORD *)(v11 + 112) + 664) & 0x1000000000) != 0)
    {
      result = (WTF *)WebCore::RenderBox::calculateAutoscrollDirection(result, a3);
      if (result)
        v12 = HIDWORD(result);
      else
        v12 = 0;
      if (result)
        v13 = (int)result;
      else
        v13 = 0;
      if (result)
        v14 = v9;
      else
        v14 = 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
    }
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::Page::~Page(v11);
      result = (WTF *)WTF::fastFree(v22, v23);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  v15 = *((_DWORD *)v9 + 4);
  if (!v15)
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x195F6FB1CLL);
  }
  *((_DWORD *)v9 + 4) = v15 - 1;
  if (!v14)
    return WebCore::AutoscrollController::stopAutoscrollTimer((WebCore::AutoscrollController *)a1, 0);
  ++*((_DWORD *)v14 + 4);
  *(_QWORD *)(a1 + 68) = (*(_DWORD *)a3 + v13) | ((unint64_t)(*((_DWORD *)a3 + 1)
                                                                                               + v12) << 32);
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 64) = 1;
    v18 = (WTF::MonotonicTime *)*((_QWORD *)v14 + 1);
    if (!v18)
    {
      v18 = (WTF::MonotonicTime *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v18 = 1;
      *((_QWORD *)v18 + 1) = v14;
      v25 = (WTF *)*((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = v18;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
        {
          WTF::fastFree(v25, v8);
          v18 = (WTF::MonotonicTime *)*((_QWORD *)v14 + 1);
          if (!v18)
            goto LABEL_32;
        }
        else
        {
          --*(_DWORD *)v25;
        }
      }
    }
    ++*(_DWORD *)v18;
LABEL_32:
    v19 = *(WTF **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
        v18 = (WTF::MonotonicTime *)WTF::fastFree(v19, v8);
      else
        --*(_DWORD *)v19;
    }
    *(double *)(a1 + 80) = a4;
    *(_QWORD *)(a1 + 24) = 0x3FA999999999999ALL;
    WTF::MonotonicTime::now(v18);
    result = (WTF *)WebCore::TimerBase::setNextFireTime(a1, v20 + 0.05);
    goto LABEL_36;
  }
  v16 = *(WTF **)(a1 + 56);
  if (v16)
    v16 = (WTF *)*((_QWORD *)v16 + 1);
  if (v16 != v14)
  {
    *(double *)(a1 + 80) = a4;
    result = (WTF *)*((_QWORD *)v14 + 1);
    if (!result)
    {
      result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *((_QWORD *)result + 1) = v14;
      v24 = (WTF *)*((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = result;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
        {
          WTF::fastFree(v24, v8);
          result = (WTF *)*((_QWORD *)v14 + 1);
          if (!result)
          {
LABEL_26:
            v17 = *(WTF **)(a1 + 56);
            *(_QWORD *)(a1 + 56) = result;
            if (v17)
            {
              if (*(_DWORD *)v17 == 1)
                result = (WTF *)WTF::fastFree(v17, v8);
              else
                --*(_DWORD *)v17;
            }
            goto LABEL_36;
          }
        }
        else
        {
          --*(_DWORD *)v24;
        }
      }
    }
    ++*(_DWORD *)result;
    goto LABEL_26;
  }
LABEL_36:
  v21 = *((_DWORD *)v14 + 4);
  if (!v21)
    goto LABEL_52;
  *((_DWORD *)v14 + 4) = v21 - 1;
  return result;
}

uint64_t WebCore::BarProp::visible(WebCore::BarProp *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  WTF *v13;
  void *v14;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (!*(_BYTE *)(v4 + 178))
  {
    v5 = *(_QWORD *)(v4 + 240);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            v9 = (*(_DWORD *)v8)++;
            v10 = *((int *)this + 6);
            if (v10 > 5)
            {
              v11 = 0;
              if (v9)
                goto LABEL_12;
            }
            else
            {
              v11 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 8 * qword_1969F5448[v10]))();
              v9 = *(_DWORD *)v8 - 1;
              if (*(_DWORD *)v8 != 1)
              {
LABEL_12:
                *(_DWORD *)v8 = v9;
                return v11;
              }
            }
            WebCore::Page::~Page(v8);
            WTF::fastFree(v13, v14);
            return v11;
          }
        }
      }
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CaptionUserPreferences::timerFired(WebCore::CaptionUserPreferences *this)
{
  return (*(uint64_t (**)(WebCore::CaptionUserPreferences *))(*(_QWORD *)this + 136))(this);
}

void WebCore::CaptionUserPreferences::~CaptionUserPreferences(WebCore::CaptionUserPreferences *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  *(_QWORD *)this = off_1E33FD660;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *((_QWORD *)this + 5) = off_1E31F7378;
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WebCore::TimerBase::~TimerBase((WebCore::CaptionUserPreferences *)((char *)this + 40));
  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v8);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::CaptionUserPreferences::~CaptionUserPreferences(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CaptionUserPreferences::createTestingModeToken@<X0>(WebCore::CaptionUserPreferences *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  result = *((_QWORD *)this + 2);
  if (result)
    goto LABEL_11;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = this;
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = result;
  if (!v7)
    goto LABEL_11;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  result = *((_QWORD *)this + 2);
  if (result)
  {
LABEL_11:
    do
      v10 = __ldaxr((unsigned int *)result);
    while (__stlxr(v10 + 1, (unsigned int *)result));
  }
  *v4 = result;
  ++*((_DWORD *)this + 34);
  *a2 = v4;
  return result;
}

uint64_t WebCore::CaptionUserPreferences::captionDisplayMode(WebCore::CaptionUserPreferences *this)
{
  return *((unsigned __int8 *)this + 32);
}

WTF::MonotonicTime *WebCore::CaptionUserPreferences::setCaptionDisplayMode(_BYTE *a1, int a2)
{
  WTF::MonotonicTime *result;
  double v5;

  a1[32] = a2;
  result = (WTF::MonotonicTime *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  if (a2 != 2 && (_DWORD)result)
  {
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0);
    result = (WTF::MonotonicTime *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 72))(a1, 0);
  }
  if (!*((_DWORD *)a1 + 32))
  {
    a1[132] = 1;
    if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)a1 + 8) = 0;
      WTF::MonotonicTime::now(result);
      return (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)(a1 + 40), v5 + 0.0);
    }
  }
  return result;
}

uint64_t WebCore::CaptionUserPreferences::userPrefersCaptions(WebCore::CaptionUserPreferences *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
LABEL_3:
    v4 = v2;
    v2 = v1 + 8 * v3;
    goto LABEL_4;
  }
  v3 = *(unsigned int *)(v1 - 4);
  v2 = v1 + 8 * v3;
  if (!*(_DWORD *)(v1 - 12))
    goto LABEL_3;
  if (!(_DWORD)v3)
  {
    v10 = 0;
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
    goto LABEL_29;
  }
  v9 = 8 * v3;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
  while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
  {
    v4 += 8;
    v9 -= 8;
    if (!v9)
    {
      v4 = v2;
      break;
    }
  }
LABEL_4:
  if (!v1)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v10 = *(unsigned int *)(v1 - 4);
LABEL_29:
  v5 = v1 + 8 * v10;
LABEL_6:
  if (v5 != v4)
  {
    while (!*(_QWORD *)(*(_QWORD *)v4 + 8))
    {
      v6 = v4 + 8;
      v4 = v2;
      if (v6 != v2)
      {
        v4 = v6;
        while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
        {
          v4 += 8;
          if (v4 == v2)
          {
            v4 = v2;
            break;
          }
        }
      }
      if (v4 == v5)
      {
        v4 = v5;
        break;
      }
    }
  }
  if (v1)
    v1 += 8 * *(unsigned int *)(v1 - 4);
  if (v4 == v1)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  if (!v7)
    return 0;
  else
    return (*(_QWORD *)(*(_QWORD *)(v7 + 112) + 712) >> 57) & 1;
}

uint64_t WebCore::CaptionUserPreferences::setUserPrefersCaptions(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 16);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = v2 + 8 * v4;
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = v2 + 8 * v4;
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v15 = 0;
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 16);
    goto LABEL_36;
  }
  v12 = 8 * v4;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 16);
  while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
  {
    v5 += 8;
    v12 -= 8;
    if (!v12)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v15 = *(unsigned int *)(v2 - 4);
LABEL_36:
  v6 = v2 + 8 * v15;
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*(_QWORD *)v5 + 8))
    {
      v7 = v5 + 8;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 8;
          if (v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v2 += 8 * *(unsigned int *)(v2 - 4);
  if (v5 != v2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    if (v8)
    {
      ++*(_DWORD *)v8;
      v9 = 0x200000000000000;
      if (!a2)
        v9 = 0;
      *(_QWORD *)(*(_QWORD *)(v8 + 112) + 712) = *(_QWORD *)(*(_QWORD *)(v8 + 112) + 712) & 0xFDFFFFFFFFFFFFFFLL | v9;
      if (!*(_DWORD *)(this + 128))
      {
        *(_BYTE *)(this + 132) = 1;
        if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          v10 = this + 40;
          *(_QWORD *)(this + 64) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          this = WebCore::TimerBase::setNextFireTime(v10, v11 + 0.0);
        }
      }
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::Page::~Page(v8);
        return WTF::fastFree(v13, v14);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  return this;
}

uint64_t WebCore::CaptionUserPreferences::userPrefersSubtitles(WebCore::CaptionUserPreferences *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
LABEL_3:
    v4 = v2;
    v2 = v1 + 8 * v3;
    goto LABEL_4;
  }
  v3 = *(unsigned int *)(v1 - 4);
  v2 = v1 + 8 * v3;
  if (!*(_DWORD *)(v1 - 12))
    goto LABEL_3;
  if (!(_DWORD)v3)
  {
    v14 = 0;
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
    goto LABEL_32;
  }
  v11 = 8 * v3;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
  while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
  {
    v4 += 8;
    v11 -= 8;
    if (!v11)
    {
      v4 = v2;
      break;
    }
  }
LABEL_4:
  if (!v1)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v14 = *(unsigned int *)(v1 - 4);
LABEL_32:
  v5 = v1 + 8 * v14;
LABEL_6:
  if (v5 != v4)
  {
    while (!*(_QWORD *)(*(_QWORD *)v4 + 8))
    {
      v6 = v4 + 8;
      v4 = v2;
      if (v6 != v2)
      {
        v4 = v6;
        while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
        {
          v4 += 8;
          if (v4 == v2)
          {
            v4 = v2;
            break;
          }
        }
      }
      if (v4 == v5)
      {
        v4 = v5;
        break;
      }
    }
  }
  if (v1)
    v1 += 8 * *(unsigned int *)(v1 - 4);
  if (v4 == v1)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  if (!v7)
    return 0;
  v8 = (*(_DWORD *)v7)++;
  v9 = (*(_QWORD *)(*(_QWORD *)(v7 + 112) + 712) >> 58) & 1;
  if (v8)
  {
    *(_DWORD *)v7 = v8;
  }
  else
  {
    WebCore::Page::~Page(v7);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebCore::CaptionUserPreferences::setUserPrefersSubtitles(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 16);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = v2 + 8 * v4;
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = v2 + 8 * v4;
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v15 = 0;
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 16);
    goto LABEL_36;
  }
  v12 = 8 * v4;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 16);
  while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
  {
    v5 += 8;
    v12 -= 8;
    if (!v12)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v15 = *(unsigned int *)(v2 - 4);
LABEL_36:
  v6 = v2 + 8 * v15;
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*(_QWORD *)v5 + 8))
    {
      v7 = v5 + 8;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 8;
          if (v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v2 += 8 * *(unsigned int *)(v2 - 4);
  if (v5 != v2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    if (v8)
    {
      ++*(_DWORD *)v8;
      v9 = 0x400000000000000;
      if (!a2)
        v9 = 0;
      *(_QWORD *)(*(_QWORD *)(v8 + 112) + 712) = *(_QWORD *)(*(_QWORD *)(v8 + 112) + 712) & 0xFBFFFFFFFFFFFFFFLL | v9;
      if (!*(_DWORD *)(this + 128))
      {
        *(_BYTE *)(this + 132) = 1;
        if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          v10 = this + 40;
          *(_QWORD *)(this + 64) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          this = WebCore::TimerBase::setNextFireTime(v10, v11 + 0.0);
        }
      }
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::Page::~Page(v8);
        return WTF::fastFree(v13, v14);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  return this;
}

uint64_t WebCore::CaptionUserPreferences::userPrefersTextDescriptions(WebCore::CaptionUserPreferences *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
LABEL_3:
    v4 = v2;
    v2 = v1 + 8 * v3;
    goto LABEL_4;
  }
  v3 = *(unsigned int *)(v1 - 4);
  v2 = v1 + 8 * v3;
  if (!*(_DWORD *)(v1 - 12))
    goto LABEL_3;
  if (!(_DWORD)v3)
  {
    v17 = 0;
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
    goto LABEL_40;
  }
  v14 = 8 * v3;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 16);
  while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
  {
    v4 += 8;
    v14 -= 8;
    if (!v14)
    {
      v4 = v2;
      break;
    }
  }
LABEL_4:
  if (!v1)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v17 = *(unsigned int *)(v1 - 4);
LABEL_40:
  v5 = v1 + 8 * v17;
LABEL_6:
  if (v5 != v4)
  {
    while (!*(_QWORD *)(*(_QWORD *)v4 + 8))
    {
      v6 = v4 + 8;
      v4 = v2;
      if (v6 != v2)
      {
        v4 = v6;
        while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
        {
          v4 += 8;
          if (v4 == v2)
          {
            v4 = v2;
            break;
          }
        }
      }
      if (v4 == v5)
      {
        v4 = v5;
        break;
      }
    }
  }
  if (v1)
    v1 += 8 * *(unsigned int *)(v1 - 4);
  if (v4 == v1)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  if (!v7)
    return 0;
  ++*(_DWORD *)v7;
  v8 = *(_QWORD *)(v7 + 112);
  v9 = *(_DWORD *)(v8 + 228);
  *(_DWORD *)(v8 + 228) = v9 + 1;
  v10 = *(_QWORD *)(v8 + 712);
  if ((v10 & 0x10000000000000) != 0)
    v11 = 1;
  else
    v11 = (v10 >> 53) & 1;
  if ((v10 & 0x800000000000000) != 0)
    v12 = v11;
  else
    v12 = 0;
  if (v9)
    *(_DWORD *)(v8 + 228) = v9;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  if (*(_DWORD *)v7 == 1)
  {
    WebCore::Page::~Page(v7);
    WTF::fastFree(v15, v16);
  }
  else
  {
    --*(_DWORD *)v7;
  }
  return v12;
}

uint64_t WebCore::CaptionUserPreferences::setUserPrefersTextDescriptions(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 16);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = v2 + 8 * v4;
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = v2 + 8 * v4;
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v15 = 0;
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 16);
    goto LABEL_36;
  }
  v12 = 8 * v4;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 16);
  while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
  {
    v5 += 8;
    v12 -= 8;
    if (!v12)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v15 = *(unsigned int *)(v2 - 4);
LABEL_36:
  v6 = v2 + 8 * v15;
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*(_QWORD *)v5 + 8))
    {
      v7 = v5 + 8;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 8;
          if (v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v2 += 8 * *(unsigned int *)(v2 - 4);
  if (v5 != v2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    if (v8)
    {
      ++*(_DWORD *)v8;
      v9 = 0x800000000000000;
      if (!a2)
        v9 = 0;
      *(_QWORD *)(*(_QWORD *)(v8 + 112) + 712) = *(_QWORD *)(*(_QWORD *)(v8 + 112) + 712) & 0xF7FFFFFFFFFFFFFFLL | v9;
      if (!*(_DWORD *)(this + 128))
      {
        *(_BYTE *)(this + 132) = 1;
        if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          v10 = this + 40;
          *(_QWORD *)(this + 64) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          this = WebCore::TimerBase::setNextFireTime(v10, v11 + 0.0);
        }
      }
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::Page::~Page(v8);
        return WTF::fastFree(v13, v14);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  return this;
}

uint64_t WebCore::CaptionUserPreferences::captionPreferencesChanged(WebCore::CaptionUserPreferences *this)
{
  return WebCore::PageGroup::captionPreferencesChanged(*(_QWORD *)(*((_QWORD *)this + 3) + 8));
}

void *WebCore::CaptionUserPreferences::preferredLanguages@<X0>(WebCore::CaptionUserPreferences *this@<X0>, _DWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;

  WTF::userPreferredLanguages();
  result = (void *)(*(uint64_t (**)(WebCore::CaptionUserPreferences *))(*(_QWORD *)this + 208))(this);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 12);
    v6 = (_QWORD *)((char *)this + 96);
    v5 = v7;
    if (v7)
    {
      if (*(_DWORD *)(v5 + 4))
      {
        v8 = a2[3];
        if ((_DWORD)v8 == a2[2])
        {
          v6 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v8 + 1, (unint64_t)v6);
          LODWORD(v8) = a2[3];
        }
        v9 = *(_QWORD **)a2;
        result = memmove((void *)(*(_QWORD *)a2 + 8), *(const void **)a2, 8 * v8);
        v10 = (_DWORD *)*v6;
        if (*v6)
          *v10 += 2;
        *v9 = v10;
        ++a2[3];
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CaptionUserPreferences::setPreferredLanguage(WebCore::CaptionUserPreferences *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;
  double v5;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  if (!*((_DWORD *)this + 32))
  {
    *((_BYTE *)this + 132) = 1;
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)this + 8) = 0;
      WTF::MonotonicTime::now(result);
      return (WTF::StringImpl *)WebCore::TimerBase::setNextFireTime((uint64_t)this + 40, v5 + 0.0);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CaptionUserPreferences::setPreferredAudioCharacteristic(WebCore::CaptionUserPreferences *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;
  double v5;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  if (!*((_DWORD *)this + 32))
  {
    *((_BYTE *)this + 132) = 1;
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)this + 8) = 0;
      WTF::MonotonicTime::now(result);
      return (WTF::StringImpl *)WebCore::TimerBase::setNextFireTime((uint64_t)this + 40, v5 + 0.0);
    }
  }
  return result;
}

uint64_t WebCore::CaptionUserPreferences::preferredAudioCharacteristics@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(this + 104);
  if (v3 && *(_DWORD *)(v3 + 4))
  {
    this = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, 1uLL, this + 104);
    v4 = *(unsigned int *)(a2 + 12);
    v5 = *(_QWORD *)a2;
    v6 = *(_DWORD **)this;
    if (*(_QWORD *)this)
      *v6 += 2;
    *(_QWORD *)(v5 + 8 * v4) = v6;
    *(_DWORD *)(a2 + 12) = v4 + 1;
  }
  return this;
}

void WebCore::CaptionUserPreferences::displayNameForTrack(WebCore::TextTrack *a1@<X1>, WebCore *a2@<X8>)
{
  WebCore::trackDisplayName(a2, a1);
}

void WebCore::trackDisplayName(WebCore *this, WebCore::TextTrack *a2)
{
  WebCore::TextTrack *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  WTF::StringImpl *v15;
  int v16;
  int v17;

  v4 = (WebCore::TextTrack *)WebCore::TextTrack::captionMenuOffItem(this);
  if (v4 == a2)
  {
    WebCore::textTrackOffMenuItemText((uint64_t)this);
    return;
  }
  if ((WebCore::TextTrack *)WebCore::TextTrack::captionMenuAutomaticItem(v4) == a2)
  {
    WebCore::textTrackAutomaticMenuItemText((uint64_t)this);
    return;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
  if (!v6)
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
    if (!v9)
      goto LABEL_33;
LABEL_10:
    v10 = *(_DWORD *)v9;
    v11 = *((_DWORD *)v9 + 1);
    *(_DWORD *)v9 += 2;
    if (v10)
    {
      *(_DWORD *)v9 = v10;
      if (!v6)
        goto LABEL_14;
    }
    else
    {
      WTF::StringImpl::destroy(v9, v5);
      if (!v6)
        goto LABEL_14;
    }
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
LABEL_14:
    if (v11)
      goto LABEL_15;
LABEL_33:
    WebCore::trackNoLabelText((uint64_t)this);
    return;
  }
  v7 = *(_DWORD *)v6;
  v8 = *((_DWORD *)v6 + 1);
  *(_DWORD *)v6 += 2;
  if (!v8)
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
    if (!v9)
    {
      if (v7)
        *(_DWORD *)v6 = v7;
      else
        WTF::StringImpl::destroy(v6, v5);
      goto LABEL_33;
    }
    goto LABEL_10;
  }
  if (v7)
    *(_DWORD *)v6 = v7;
  else
    WTF::StringImpl::destroy(v6, v5);
LABEL_15:
  v12 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
  if (v12)
  {
    v13 = *(_DWORD *)v12;
    v14 = *((_DWORD *)v12 + 1);
    *(_DWORD *)v12 += 2;
    if (v13)
    {
      *(_DWORD *)v12 = v13;
      if (v14)
        goto LABEL_18;
    }
    else
    {
      WTF::StringImpl::destroy(v12, v5);
      if (v14)
      {
LABEL_18:
        v15 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
        if (v15)
          goto LABEL_19;
LABEL_23:
        *(_QWORD *)this = 0;
        return;
      }
    }
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  if (!v15)
    goto LABEL_23;
LABEL_19:
  v16 = *(_DWORD *)v15;
  *(_DWORD *)v15 += 4;
  *(_QWORD *)this = v15;
  v17 = v16 + 2;
  if (v17)
    *(_DWORD *)v15 = v17;
  else
    WTF::StringImpl::destroy(v15, v5);
}

void WebCore::CaptionUserPreferences::sortedTrackListForMenu(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  void *v11;
  unint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  WTF *v34;
  BOOL v35;
  WebCore::TextTrack **v36;
  unint64_t v37;
  uint64_t v38;
  WebCore::TextTrack *v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  size_t v56;
  void *v57;
  WebCore::TextTrack *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _DWORD *v68;
  _BYTE v69[24];
  _BYTE *v70;

  v4 = a3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(_DWORD *)(a1 + 124) + *(_DWORD *)(a1 + 108);
  v6 = *(_DWORD *)(a1 + 68);
  v7 = (v5 + v6);
  v68 = v4;
  if (v5 + v6)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *(unsigned int *)(a1 + 124);
      if (v9 >= v12)
      {
        v14 = v9 - v12;
        v15 = *(_DWORD *)(a1 + 108);
        v16 = v14 >= v15;
        v17 = v14 - v15;
        if (v16)
        {
          v13 = *(_DWORD **)(*(_QWORD *)(a1 + 56) + 8 * v17);
          if (v13[10] != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x195F710F4);
          }
        }
        else
        {
          v13 = *(_DWORD **)(*(_QWORD *)(a1 + 96) + 8 * v14);
          if (v13[10] != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x195F710D4);
          }
        }
      }
      else
      {
        v13 = *(_DWORD **)(*(_QWORD *)(a1 + 112) + 8 * v9);
        if (v13[10] != 1)
        {
          __break(0xC471u);
          goto LABEL_83;
        }
      }
      v18 = *a2;
      if (*a2)
      {
        v19 = v13[57];
        v20 = *(_DWORD *)(v18 - 8);
        v21 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
        v22 = (v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11);
        v23 = v20 & (v22 ^ HIWORD(v22));
        v24 = *(_DWORD *)(v18 + 4 * v23);
        if (v24 == v19)
        {
LABEL_15:
          v26 = v10;
          if (v10 == v4[2])
          {
            v27 = v10 + ((unint64_t)v10 >> 2);
            if (v27 >= 0x10)
              v28 = v27 + 1;
            else
              v28 = 16;
            if (v28 <= (unint64_t)v10 + 1)
              v29 = v10 + 1;
            else
              v29 = v28;
            if (v29 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195F710FCLL);
            }
            v30 = v11;
            v31 = a2;
            v32 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
            v68[2] = v29;
            *(_QWORD *)v68 = v32;
            memcpy(v32, v30, 8 * v10);
            if (v30)
            {
              v34 = (WTF *)v30;
              v35 = v32 == v30;
              v4 = v68;
              if (v35)
              {
                v32 = 0;
                *(_QWORD *)v68 = 0;
                v68[2] = 0;
              }
              WTF::fastFree(v34, v33);
              v11 = v32;
              a2 = v31;
            }
            else
            {
              v11 = v32;
              a2 = v31;
              v4 = v68;
            }
          }
          ++v13[4];
          ++v10;
          *((_QWORD *)v11 + v26) = v13;
          v4[3] = v10;
        }
        else
        {
          v25 = 1;
          while (v24 != 0x7FFFFFFF)
          {
            v23 = (v23 + v25) & v20;
            v24 = *(_DWORD *)(v18 + 4 * v23);
            ++v25;
            if (v24 == v19)
              goto LABEL_15;
          }
        }
      }
      if (++v9 == v7)
      {
        v36 = *(WebCore::TextTrack ***)v4;
        goto LABEL_33;
      }
    }
  }
  v10 = 0;
  v36 = 0;
LABEL_33:
  MEMORY[0x19AEA5694](v69, 0, 0);
  v70 = v69;
  v37 = 126 - 2 * __clz(v10);
  if (v10)
    v38 = v37;
  else
    v38 = 0;
  v39 = (WebCore::TextTrack *)std::__introsort<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *,false>((uint64_t)v36, &v36[v10], (uint64_t *)&v70, v38, 1);
  v40 = *a2;
  if (*a2)
  {
    v41 = *(_DWORD *)(v40 - 8);
    v42 = v41 & 0x4636B9C9;
    v43 = *(_DWORD *)(v40 + 4 * (v41 & 0x4636B9C9));
    if (!v43)
      goto LABEL_51;
    v44 = 1;
    while (v43 != 0x7FFFFFFF)
    {
      v42 = (v42 + v44) & v41;
      v43 = *(_DWORD *)(v40 + 4 * v42);
      ++v44;
      if (!v43)
        goto LABEL_51;
    }
    v45 = v41 & 0x62BAF5A0;
    v46 = *(_DWORD *)(v40 + 4 * (v41 & 0x62BAF5A0));
    if (v46 == 1)
      goto LABEL_51;
    v47 = 1;
    while (v46 != 0x7FFFFFFF)
    {
      v45 = (v45 + v47) & v41;
      v46 = *(_DWORD *)(v40 + 4 * v45);
      ++v47;
      if (v46 == 1)
        goto LABEL_51;
    }
    v48 = v41 & 0xFF4D1170;
    v49 = *(_DWORD *)(v40 + 4 * (v41 & 0xFF4D1170));
    if (v49 == 2)
    {
LABEL_51:
      v51 = WebCore::TextTrack::captionMenuOffItem(v39);
      if (v10 == v4[2])
      {
        v52 = v10 + ((unint64_t)v10 >> 2);
        if (v52 >= 0x10)
          v53 = v52 + 1;
        else
          v53 = 16;
        if (v53 <= (unint64_t)v10 + 1)
          v54 = v10 + 1;
        else
          v54 = v53;
        if (v54 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195F71104);
        }
        v55 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v54));
        v68[2] = v54;
        *(_QWORD *)v68 = v55;
        v56 = 8 * v10;
        memcpy(v55, v36, v56);
        if (v36)
        {
          if (v55 == (uint64_t *)v36)
          {
            v55 = 0;
            *(_QWORD *)v68 = 0;
            v68[2] = 0;
          }
          WTF::fastFree((WTF *)v36, v57);
        }
        v4 = v68;
      }
      else
      {
        v55 = *(uint64_t **)v4;
        v56 = 8 * v10;
      }
      v58 = (WebCore::TextTrack *)memmove(v55 + 1, v55, v56);
      ++*(_DWORD *)(v51 + 16);
      *v55 = v51;
      v59 = v10 + 1;
      v4[3] = v59;
      v60 = WebCore::TextTrack::captionMenuAutomaticItem(v58);
      if ((_DWORD)v59 == v4[2])
      {
        v61 = v59 + (v59 >> 2);
        if (v61 >= 0x10)
          v62 = v61 + 1;
        else
          v62 = 16;
        if (v62 <= v59 + 1)
          v63 = v59 + 1;
        else
          v63 = v62;
        if (v63 >> 29)
        {
          __break(0xC471u);
LABEL_83:
          JUMPOUT(0x195F710B4);
        }
        v64 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v63));
        v68[2] = v63;
        *(_QWORD *)v68 = v64;
        v65 = 8 * v59;
        memcpy(v64, v55, 8 * v59);
        if (v64 == v55)
        {
          *(_QWORD *)v68 = 0;
          v68[2] = 0;
        }
        WTF::fastFree((WTF *)v55, v66);
      }
      else
      {
        v65 = 8 * v59;
      }
      v67 = *(_QWORD *)v68;
      memmove((void *)(*(_QWORD *)v68 + 16), (const void *)(*(_QWORD *)v68 + 8), v65 - 8);
      ++*(_DWORD *)(v60 + 16);
      *(_QWORD *)(v67 + 8) = v60;
      v68[3] = v10 + 2;
    }
    else
    {
      v50 = 1;
      while (v49 != 0x7FFFFFFF)
      {
        v48 = (v48 + v50) & v41;
        v49 = *(_DWORD *)(v40 + 4 * v48);
        ++v50;
        if (v49 == 2)
          goto LABEL_51;
      }
    }
  }
  WTF::Collator::~Collator((WTF::Collator *)v69);
}

void WebCore::CaptionUserPreferences::displayNameForTrack(WebCore::AudioTrack *a1@<X1>, WebCore *a2@<X8>)
{
  WebCore::trackDisplayName(a2, a1);
}

void WebCore::trackDisplayName(WebCore *this, WebCore::AudioTrack *a2)
{
  WTF::StringImpl *v4;
  int v5;
  int v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;

  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
  if (!v4)
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
    if (!v7)
      goto LABEL_29;
LABEL_6:
    v8 = *(_DWORD *)v7;
    v9 = *((_DWORD *)v7 + 1);
    *(_DWORD *)v7 += 2;
    if (v8)
    {
      *(_DWORD *)v7 = v8;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      WTF::StringImpl::destroy(v7, a2);
      if (!v4)
        goto LABEL_10;
    }
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
LABEL_10:
    if (v9)
      goto LABEL_11;
LABEL_29:
    WebCore::trackNoLabelText((uint64_t)this);
    return;
  }
  v5 = *(_DWORD *)v4;
  v6 = *((_DWORD *)v4 + 1);
  *(_DWORD *)v4 += 2;
  if (!v6)
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
    if (!v7)
    {
      if (v5)
        *(_DWORD *)v4 = v5;
      else
        WTF::StringImpl::destroy(v4, a2);
      goto LABEL_29;
    }
    goto LABEL_6;
  }
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy(v4, a2);
LABEL_11:
  v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
  if (v10)
  {
    v11 = *(_DWORD *)v10;
    v12 = *((_DWORD *)v10 + 1);
    *(_DWORD *)v10 += 2;
    if (v11)
    {
      *(_DWORD *)v10 = v11;
      if (v12)
        goto LABEL_14;
    }
    else
    {
      WTF::StringImpl::destroy(v10, a2);
      if (v12)
      {
LABEL_14:
        v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
        if (v13)
          goto LABEL_15;
LABEL_19:
        *(_QWORD *)this = 0;
        return;
      }
    }
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  if (!v13)
    goto LABEL_19;
LABEL_15:
  v14 = *(_DWORD *)v13;
  *(_DWORD *)v13 += 4;
  *(_QWORD *)this = v13;
  v15 = v14 + 2;
  if (v15)
    *(_DWORD *)v13 = v15;
  else
    WTF::StringImpl::destroy(v13, a2);
}

void WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *((unsigned int *)a1 + 17);
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (v6 >= *((unsigned int *)a1 + 17))
      {
        v8 = 0;
      }
      else
      {
        v8 = *(_QWORD *)(*((_QWORD *)a1 + 7) + 8 * v6);
        if (v8 && *(_DWORD *)(v8 + 40) != 2)
          goto LABEL_30;
      }
      if (v6 == *(_DWORD *)(a2 + 8))
      {
        v9 = v6 + (v6 >> 2);
        if (v9 >= 0x10)
          v10 = v9 + 1;
        else
          v10 = 16;
        if (v10 <= v6 + 1)
          v11 = v6 + 1;
        else
          v11 = v10;
        if (v11 >> 29)
        {
LABEL_30:
          __break(0xC471u);
          JUMPOUT(0x195F713ECLL);
        }
        v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
        *(_DWORD *)(a2 + 8) = v11;
        *(_QWORD *)a2 = v12;
        memcpy(v12, v7, 8 * v6);
        if (v7)
        {
          if (v12 == v7)
          {
            v12 = 0;
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
          }
          WTF::fastFree((WTF *)v7, v13);
        }
        v7 = v12;
      }
      if (v8)
        ++*(_DWORD *)(v8 + 16);
      *((_QWORD *)v7 + v6++) = v8;
      *(_DWORD *)(a2 + 12) = v6;
    }
    while (v6 != v3);
    v14 = *(_QWORD *)a2;
  }
  else
  {
    v14 = 0;
  }
  MEMORY[0x19AEA5694](v17, 0, 0);
  v18 = v17;
  v15 = 126 - 2 * __clz(v3);
  if ((_DWORD)v3)
    v16 = v15;
  else
    v16 = 0;
  std::__introsort<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *,false>(v14, (WebCore::AudioTrack **)(v14 + 8 * v3), (uint64_t *)&v18, v16, 1);
  WTF::Collator::~Collator((WTF::Collator *)v17);
}

uint64_t WebCore::CaptionUserPreferences::textTrackSelectionScore(WebCore::CaptionUserPreferences *this, WebCore::TextTrack *a2, WebCore::HTMLMediaElement *a3)
{
  int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  _DWORD **v31;
  WTF *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  WTF *v39;
  BOOL v40;
  int v41;
  int v42;
  WTF *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF *v60;
  int v61;
  unsigned int v62;

  if (!a3 || !*((_QWORD *)a3 + 142))
    return 0;
  v6 = (*(uint64_t (**)(WebCore::CaptionUserPreferences *))(*(_QWORD *)this + 16))(this);
  v7 = *((_DWORD *)a2 + 57);
  v8 = v7 == 2 ? (*(uint64_t (**)(WebCore::CaptionUserPreferences *))(*(_QWORD *)this + 80))(this) : 0;
  v9 = v6 == 3 && v8 == 0;
  if (v9
    || v6 == 2
    && ((*(uint64_t (**)(WebCore::CaptionUserPreferences *))(*(_QWORD *)this + 64))(this) & 1) == 0
    && !(*(unsigned int (**)(WebCore::CaptionUserPreferences *))(*(_QWORD *)this + 48))(this)
    || (v7 > 5 || ((1 << v7) & 0x23) == 0) && !v8)
  {
    return 0;
  }
  if (((*(unsigned int (**)(WebCore::TextTrack *))(*(_QWORD *)a2 + 160))(a2) | v8) != 1)
    return 0;
  v10 = (*(uint64_t (**)(WebCore::TextTrack *))(*(_QWORD *)a2 + 152))(a2);
  if ((v6 != 1) == v10)
    return 0;
  v11 = v10;
  (*(void (**)(WTF **__return_ptr, WebCore::CaptionUserPreferences *))(*(_QWORD *)this + 152))(&v60, this);
  if (v6)
    v13 = v11;
  else
    v13 = 1;
  if ((v13 | v8) != 1)
    goto LABEL_89;
  v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  if (v14)
  {
    v15 = *(_DWORD *)v14;
    *(_DWORD *)v14 += 4;
    v59 = v14;
    v16 = v15 + 2;
    if (v16)
    {
      *(_DWORD *)v14 = v16;
    }
    else
    {
      WTF::StringImpl::destroy(v14, v12);
      v14 = v59;
    }
    if (!*((_DWORD *)v14 + 1))
    {
      v59 = 0;
      v21 = 1;
LABEL_84:
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if (v21)
          goto LABEL_87;
        goto LABEL_89;
      }
      *(_DWORD *)v14 -= 2;
LABEL_86:
      if (v21)
        goto LABEL_87;
LABEL_89:
      if (v7 != 2
        || ((*(uint64_t (**)(WebCore::CaptionUserPreferences *))(*(_QWORD *)this + 80))(this) & 1) == 0)
      {
        if ((*(unsigned int (**)(WebCore::CaptionUserPreferences *))(*(_QWORD *)this + 48))(this))
        {
          if (v7)
          {
            v40 = (*(unsigned int (**)(WebCore::TextTrack *))(*(_QWORD *)a2 + 136))(a2) == 0;
            v41 = 2;
            goto LABEL_96;
          }
          v42 = 1;
LABEL_101:
          v19 = (*(unsigned int (**)(WebCore::CaptionUserPreferences *, WebCore::TextTrack *, WTF **))(*(_QWORD *)this + 40))(this, a2, &v60)+ v42;
          goto LABEL_102;
        }
        if (v7)
        {
          v40 = (*(unsigned int (**)(WebCore::TextTrack *))(*(_QWORD *)a2 + 136))(a2) == 0;
          v41 = 1;
LABEL_96:
          if (v40)
            v42 = v41 + 1;
          else
            v42 = v41;
          goto LABEL_101;
        }
      }
      v42 = 3;
      goto LABEL_101;
    }
    v58 = 1;
    v56 = 0;
    v57 = (WTF *)WTF::fastMalloc((WTF *)8);
    if ((*(unsigned int (**)(WebCore::CaptionUserPreferences *))(*(_QWORD *)this + 208))(this))
    {
      v17 = (WTF::StringImpl *)*((_QWORD *)this + 15);
      if (v17 && *((_DWORD *)v17 + 1))
      {
        *(_DWORD *)v17 += 2;
      }
      else
      {
        WTF::defaultLanguage();
        v17 = v55;
      }
      v18 = v56;
      v55 = 0;
      v56 = v17;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, v12);
          v55 = 0;
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
      goto LABEL_53;
    }
    v22 = *((_QWORD *)a3 + 142);
    if (!v22)
      goto LABEL_45;
    v23 = *(unsigned __int8 **)v22;
    if (__ldaxr(*(unsigned __int8 **)v22))
    {
      __clrex();
    }
    else if (!__stxr(1u, v23))
    {
LABEL_40:
      ++*((_QWORD *)v23 + 1);
      v25 = __ldxr(v23);
      if (v25 == 1)
      {
        if (!__stlxr(0, v23))
          goto LABEL_45;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
LABEL_45:
      v26 = *(_QWORD *)(v22 + 72);
      if (v26)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v26 + 1024))(&v55);
        v27 = v55;
      }
      else
      {
        v27 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v27 += 2;
      }
      v28 = v56;
      v55 = 0;
      v56 = v27;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::destroy(v28, v12);
          v45 = v55;
          v55 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v44);
            else
              *(_DWORD *)v45 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v28 -= 2;
          v55 = 0;
        }
      }
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v22);
LABEL_53:
      v29 = v56;
      if (!v56)
      {
        v21 = 1;
        goto LABEL_80;
      }
      if (!*((_DWORD *)v56 + 1))
      {
        v56 = 0;
        v21 = 1;
LABEL_78:
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v12);
        else
          *(_DWORD *)v29 -= 2;
LABEL_80:
        if (HIDWORD(v58))
        {
          v52 = v57;
          v53 = 8 * HIDWORD(v58);
          do
          {
            v54 = *(WTF::StringImpl **)v52;
            *(_QWORD *)v52 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2)
                WTF::StringImpl::destroy(v54, v12);
              else
                *(_DWORD *)v54 -= 2;
            }
            v52 = (WTF *)((char *)v52 + 8);
            v53 -= 8;
          }
          while (v53);
        }
        v39 = v57;
        if (v57)
        {
          v57 = 0;
          LODWORD(v58) = 0;
          WTF::fastFree(v39, v12);
        }
        v14 = v59;
        v59 = 0;
        if (!v14)
          goto LABEL_86;
        goto LABEL_84;
      }
      if (v11)
      {
        v30 = HIDWORD(v58);
        if (HIDWORD(v58) == (_DWORD)v58)
        {
          v31 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v57, HIDWORD(v58) + 1, (unint64_t)&v56);
          v30 = HIDWORD(v58);
          v32 = v57;
          v33 = *v31;
          if (*v31)
            *v33 += 2;
          *((_QWORD *)v32 + v30) = v33;
        }
        else
        {
          v38 = v57;
          *(_DWORD *)v56 += 2;
          *((_QWORD *)v38 + v30) = v29;
        }
        HIDWORD(v58) = v30 + 1;
      }
      else
      {
        WTF::defaultLanguage();
        LODWORD(v35) = HIDWORD(v58);
        if (HIDWORD(v58) == (_DWORD)v58)
        {
          v49 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v57, HIDWORD(v58) + 1, (unint64_t)&v55);
          v35 = HIDWORD(v58);
          v50 = v57;
          v51 = *v49;
          *v49 = 0;
          *((_QWORD *)v50 + v35) = v51;
        }
        else
        {
          v36 = v55;
          v55 = 0;
          *((_QWORD *)v57 + HIDWORD(v58)) = v36;
        }
        HIDWORD(v58) = v35 + 1;
        v37 = v55;
        v55 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v34);
          else
            *(_DWORD *)v37 -= 2;
        }
        if (!WTF::indexOfBestMatchingLanguageInList())
          goto LABEL_75;
      }
      if (!WTF::indexOfBestMatchingLanguageInList())
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v60, (unsigned int *)&v57);
        v21 = 0;
LABEL_77:
        v29 = v56;
        v56 = 0;
        if (!v29)
          goto LABEL_80;
        goto LABEL_78;
      }
LABEL_75:
      v21 = 1;
      goto LABEL_77;
    }
    MEMORY[0x19AEA534C](v23);
    goto LABEL_40;
  }
LABEL_87:
  v19 = 0;
LABEL_102:
  if (v62)
  {
    v46 = v60;
    v47 = 8 * v62;
    do
    {
      v48 = *(WTF::StringImpl **)v46;
      *(_QWORD *)v46 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v12);
        else
          *(_DWORD *)v48 -= 2;
      }
      v46 = (WTF *)((char *)v46 + 8);
      v47 -= 8;
    }
    while (v47);
  }
  v43 = v60;
  if (v60)
  {
    v60 = 0;
    v61 = 0;
    WTF::fastFree(v43, v12);
  }
  return v19;
}

WTF::StringImpl *WebCore::CaptionUserPreferences::textTrackLanguageSelectionScore(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *result;
  int v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v12;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  if (!result)
    return result;
  v5 = *(_DWORD *)result;
  v6 = *((_DWORD *)result + 1);
  v7 = *(_DWORD *)result + 2;
  *(_DWORD *)result = v7;
  if (v5)
  {
    *(_DWORD *)result = v5;
    if (v6)
      goto LABEL_4;
    return 0;
  }
  WTF::StringImpl::destroy(result, a2);
  if (!v6)
    return 0;
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  if (!result)
    goto LABEL_5;
  v7 = *(_DWORD *)result + 2;
LABEL_4:
  *(_DWORD *)result = v7;
LABEL_5:
  v12 = result;
  v9 = WTF::indexOfBestMatchingLanguageInList();
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  v10 = *(unsigned int *)(a3 + 12);
  if (v10 <= v9)
    return 0;
  else
    return (WTF::StringImpl *)(10 * (v10 - v9));
}

uint64_t WebCore::CaptionUserPreferences::setCaptionsStyleSheetOverride(const WTF::StringImpl **this, WTF **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  double v9;

  result = WTF::equal(*a2, this[14], a3);
  if ((result & 1) == 0)
  {
    v7 = *a2;
    if (*a2)
      *(_DWORD *)v7 += 2;
    v8 = this[14];
    this[14] = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = (uint64_t)WebCore::CaptionUserPreferences::updateCaptionStyleSheetOverride((WebCore::CaptionUserPreferences *)this);
    if (((unint64_t)this[9] & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)(((unint64_t)this[9] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      this[8] = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      return WebCore::TimerBase::setNextFireTime((uint64_t)(this + 5), v9 + 0.0);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CaptionUserPreferences::updateCaptionStyleSheetOverride(WebCore::CaptionUserPreferences *this)
{
  WTF::StringImpl *v2;
  const WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *result;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 112))(&v22);
  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    v6 = 0;
    v7 = 0;
LABEL_3:
    v8 = v6;
    v6 = v5 + 8 * v7;
    goto LABEL_4;
  }
  v7 = *(unsigned int *)(v5 - 4);
  v6 = v5 + 8 * v7;
  if (!*(_DWORD *)(v5 - 12))
    goto LABEL_3;
  if (!(_DWORD)v7)
  {
    v21 = 0;
    v8 = *(_QWORD *)(v4 + 16);
    goto LABEL_59;
  }
  v20 = 8 * v7;
  v8 = *(_QWORD *)(v4 + 16);
  while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
  {
    v8 += 8;
    v20 -= 8;
    if (!v20)
    {
      v8 = v6;
      break;
    }
  }
LABEL_4:
  if (!v5)
  {
    v9 = 0;
    goto LABEL_6;
  }
  v21 = *(unsigned int *)(v5 - 4);
LABEL_59:
  v9 = v5 + 8 * v21;
LABEL_6:
  if (v9 != v8)
  {
    while (!*(_QWORD *)(*(_QWORD *)v8 + 8))
    {
      v10 = v8 + 8;
      v8 = v6;
      if (v10 != v6)
      {
        v8 = v10;
        while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
        {
          v8 += 8;
          if (v8 == v6)
          {
            v8 = v6;
            break;
          }
        }
      }
      if (v8 == v9)
      {
        v8 = v9;
        break;
      }
    }
  }
  if (v5)
    v11 = v5 + 8 * *(unsigned int *)(v5 - 4);
  else
    v11 = 0;
  while (v8 != v11)
  {
    v12 = *(_QWORD *)(*(_QWORD *)v8 + 8);
    ++*(_DWORD *)v12;
    if ((WTF::equal(*(WTF **)(v12 + 512), v22, v3) & 1) == 0)
    {
      v13 = v22;
      if (v22)
        *(_DWORD *)v22 += 2;
      v14 = *(WTF::StringImpl **)(v12 + 512);
      *(_QWORD *)(v12 + 512) = v13;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v2);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::Page::~Page(v12);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v12;
    }
    v15 = v6;
    if (v8 + 8 != v6)
    {
      v15 = v8 + 8;
      while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
      {
        v15 += 8;
        if (v15 == v6)
        {
          v15 = v6;
          break;
        }
      }
    }
    v8 = v9;
    if (v15 != v9)
    {
      v8 = v15;
      if (!*(_QWORD *)(*(_QWORD *)v15 + 8))
      {
        while (1)
        {
          v16 = v8 + 8;
          v8 = v6;
          if (v16 != v6)
          {
            v8 = v16;
            while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
            {
              v8 += 8;
              if (v8 == v6)
              {
                v8 = v6;
                break;
              }
            }
          }
          if (v8 == v9)
            break;
          if (*(_QWORD *)(*(_QWORD *)v8 + 8))
            goto LABEL_42;
        }
        v8 = v9;
      }
    }
LABEL_42:
    ++*(_DWORD *)(v4 + 24);
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::Page **WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(WebCore::Page **a1)
{
  WebCore::Page *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::Page::~Page(v2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return a1;
}

void WebCore::Chrome::~Chrome(WebCore::Chrome *this)
{
  void *v2;
  uint64_t v3;
  unsigned int **v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)this = off_1E33FD748;
  (***((void (****)(_QWORD))this + 2))(*((_QWORD *)this + 2));
  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int **)*((_QWORD *)this + 3);
    v5 = &v4[v3];
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          WTF::fastFree((WTF *)v6, v2);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v9 = (WTF *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v9, v2);
  }
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1904))(v10);
  v11 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v2);
    }
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::Chrome::~Chrome(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::Chrome::invalidateContentsForSlowScroll(WebCore::Chrome *this, const WebCore::IntRect *a2)
{
  return (*(uint64_t (**)(_QWORD, const WebCore::IntRect *))(**((_QWORD **)this + 2) + 328))(*((_QWORD *)this + 2), a2);
}

uint64_t WebCore::Chrome::screenToRootView(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 344))(*(_QWORD *)(a1 + 16));
}

uint64_t WebCore::Chrome::rootViewToScreen(WebCore::Chrome *this, const WebCore::IntRect *a2)
{
  return (*(uint64_t (**)(_QWORD, const WebCore::IntRect *))(**((_QWORD **)this + 2) + 352))(*((_QWORD *)this + 2), a2);
}

uint64_t WebCore::Chrome::accessibilityScreenToRootView(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 360))(*(_QWORD *)(a1 + 16));
}

uint64_t WebCore::Chrome::rootViewToAccessibilityScreen(WebCore::Chrome *this, const WebCore::IntRect *a2)
{
  return (*(uint64_t (**)(_QWORD, const WebCore::IntRect *))(**((_QWORD **)this + 2) + 368))(*((_QWORD *)this + 2), a2);
}

uint64_t WebCore::Chrome::relayAccessibilityNotification(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 376))(*(_QWORD *)(a1 + 16));
}

uint64_t WebCore::Chrome::platformPageClient(WebCore::Chrome *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 392))(*((_QWORD *)this + 2));
}

uint64_t WebCore::Chrome::scrollMainFrameToRevealRect(WebCore::Chrome *this, const WebCore::IntRect *a2)
{
  return (*(uint64_t (**)(_QWORD, const WebCore::IntRect *))(**((_QWORD **)this + 2) + 504))(*((_QWORD *)this + 2), a2);
}

uint64_t WebCore::Chrome::setWindowRect(WebCore::Chrome *this, const WebCore::FloatRect *a2)
{
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRect *))(**((_QWORD **)this + 2) + 8))(*((_QWORD *)this + 2), a2);
}

uint64_t WebCore::Chrome::windowRect(WebCore::Chrome *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
}

uint64_t WebCore::Chrome::focusedFrameChanged(WebCore::Chrome *this, WebCore::Frame *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::Frame *))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2), a2);
}

_DWORD *WebCore::Chrome::createWindow@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  if (result)
    ++*result;
  *a2 = result;
  return result;
}

uint64_t WebCore::Chrome::show(WebCore::Chrome *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 88))(*((_QWORD *)this + 2));
}

void WebCore::Chrome::runModal(WebCore::Chrome *this)
{
  WTF::RunLoop *Deferrer;
  void *v3;
  uint64_t v4;
  BOOL v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  WTF *v16[18];
  uint64_t v17;

  Deferrer = (WTF::RunLoop *)WebCore::PageGroupLoadDeferrer::PageGroupLoadDeferrer(v16, *(WebCore::Page **)(*((_QWORD *)this + 1) + 8), 0);
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 160);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (!v5)
    goto LABEL_19;
  v6 = (unsigned int *)(v4 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(Deferrer);
    JSC::VM::create();
    v8 = v17;
    WebCore::g_commonVMOrNull = v17;
    if (__ldaxr((unsigned int *)(v17 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v17 + 1096)))
    {
LABEL_13:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v8 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v8 + 584));
      Deferrer = (WTF::RunLoop *)WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v8, 0);
      goto LABEL_16;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v8 + 192));
    goto LABEL_13;
  }
LABEL_16:
  v10 = *(_QWORD *)(v8 + 90568);
  *(_QWORD *)(v8 + 90568) = 0;
  v11 = WebCore::threadGlobalData(Deferrer);
  WebCore::ThreadTimers::fireTimersInNestedEventLoop(*(uint64_t ***)(v11 + 48));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  *(_QWORD *)(v8 + 90568) = v10;
  do
  {
    v12 = __ldaxr(v6);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v6));
  if (!v13)
  {
    atomic_store(1u, v6);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E31FE290;
    v14[1] = v6;
    v17 = (uint64_t)v14;
    WTF::ensureOnMainThread();
    v15 = v17;
    v17 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
LABEL_19:
  WebCore::PageGroupLoadDeferrer::~PageGroupLoadDeferrer(v16, v3);
}

uint64_t WebCore::Chrome::runBeforeUnloadConfirmPanel(WebCore::Chrome *this, const WTF::String *a2, WebCore::LocalFrame *a3)
{
  uint64_t v6;
  void *v7;
  WTF *v9[18];

  WebCore::PageGroupLoadDeferrer::PageGroupLoadDeferrer((WebCore::PageGroupLoadDeferrer *)v9, *(WebCore::Page **)(*((_QWORD *)this + 1) + 8), 1);
  v6 = (*(uint64_t (**)(_QWORD, const WTF::String *, WebCore::LocalFrame *))(**((_QWORD **)this + 2) + 208))(*((_QWORD *)this + 2), a2, a3);
  WebCore::PageGroupLoadDeferrer::~PageGroupLoadDeferrer(v9, v7);
  return v6;
}

void WebCore::Chrome::runJavaScriptAlert(WebCore::Chrome *this, WebCore::LocalFrame *a2, const char **a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  BOOL v10;
  const char *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF *v14[18];
  const char *v15[2];

  WebCore::PageGroupLoadDeferrer::PageGroupLoadDeferrer(v14, *(WebCore::Page **)(*((_QWORD *)this + 1) + 8), 1);
  WebCore::Chrome::notifyPopupOpeningObservers((uint64_t)this);
  v6 = *((_QWORD *)a2 + 37);
  if (v6 && (v7 = *(_QWORD *)(v6 + 1744)) != 0)
  {
    v9 = *(const char **)(v7 + 16);
    v8 = *(const char **)(v7 + 24);
    v15[0] = v9;
    v15[1] = v8;
    if (v8)
      v10 = PAL::nonBackslashEncodings == 0;
    else
      v10 = 1;
    if (!v10 && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v15);
    if (*a3)
      WTF::StringImpl::replace();
    else
      v15[0] = 0;
  }
  else
  {
    v11 = *a3;
    if (*a3)
      *(_DWORD *)v11 += 2;
    v15[0] = v11;
  }
  (*(void (**)(_QWORD, WebCore::LocalFrame *, const char **))(**((_QWORD **)this + 2) + 240))(*((_QWORD *)this + 2), a2, v15);
  v13 = (WTF::StringImpl *)v15[0];
  v15[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::PageGroupLoadDeferrer::~PageGroupLoadDeferrer(v14, v12);
}

uint64_t WebCore::Chrome::notifyPopupOpeningObservers(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  unsigned int **v6;
  unsigned int **v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int **v12;
  void *v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v1 = *(unsigned int *)(this + 36);
  if ((_DWORD)v1)
  {
    if (v1 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = this;
      v3 = WTF::fastMalloc((WTF *)(8 * v1));
      v4 = (WTF *)v3;
      v5 = *(unsigned int *)(v2 + 36);
      if ((_DWORD)v5)
      {
        v6 = *(unsigned int ***)(v2 + 24);
        v7 = &v6[v5];
        v8 = (unsigned int **)v3;
        do
        {
          v9 = *v6;
          if (*v6)
          {
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 + 1, v9));
          }
          *v8++ = v9;
          ++v6;
        }
        while (v6 != v7);
      }
      v11 = 0;
      v12 = (unsigned int **)(v3 + 8 * v1);
      do
      {
        (***(void (****)(_QWORD))(*(_QWORD *)((char *)v4 + v11) + 8))(*(_QWORD *)(*(_QWORD *)((char *)v4 + v11)
                                                                                             + 8));
        v11 += 8;
      }
      while (8 * v1 != v11);
      v14 = (unsigned int **)v4;
      do
      {
        v15 = *v14;
        *v14 = 0;
        if (v15)
        {
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v13);
          }
        }
        ++v14;
      }
      while (v14 != v12);
      return WTF::fastFree(v4, v13);
    }
  }
  return this;
}

uint64_t WebCore::Chrome::runJavaScriptConfirm(WebCore::Chrome *this, WebCore::LocalFrame *a2, const char **a3)
{
  WebCore::Page *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  BOOL v12;
  const char *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF *v18;
  void *v19;
  WTF *v20[18];
  const char *v21[2];

  v6 = *(WebCore::Page **)(*((_QWORD *)this + 1) + 8);
  ++*(_DWORD *)v6;
  WebCore::PageGroupLoadDeferrer::PageGroupLoadDeferrer(v20, v6, 1);
  if (*(_DWORD *)v6 == 1)
  {
    WebCore::Page::~Page((uint64_t)v6);
    WTF::fastFree(v18, v19);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  WebCore::Chrome::notifyPopupOpeningObservers((uint64_t)this);
  v7 = *((_QWORD *)this + 2);
  v8 = *((_QWORD *)a2 + 37);
  if (v8 && (v9 = *(_QWORD *)(v8 + 1744)) != 0)
  {
    v11 = *(const char **)(v9 + 16);
    v10 = *(const char **)(v9 + 24);
    v21[0] = v11;
    v21[1] = v10;
    if (v10)
      v12 = PAL::nonBackslashEncodings == 0;
    else
      v12 = 1;
    if (!v12 && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v21);
    if (*a3)
      WTF::StringImpl::replace();
    else
      v21[0] = 0;
  }
  else
  {
    v13 = *a3;
    if (*a3)
      *(_DWORD *)v13 += 2;
    v21[0] = v13;
  }
  v15 = (*(uint64_t (**)(uint64_t, WebCore::LocalFrame *, const char **))(*(_QWORD *)v7 + 248))(v7, a2, v21);
  v16 = (WTF::StringImpl *)v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  WebCore::PageGroupLoadDeferrer::~PageGroupLoadDeferrer(v20, v14);
  return v15;
}

uint64_t WebCore::Chrome::runJavaScriptPrompt(WebCore::Chrome *this, WebCore::LocalFrame *a2, WTF::StringImpl **a3, const char **a4, const char **a5)
{
  WebCore::Page *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  BOOL v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  BOOL v22;
  const char *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF *v36;
  void *v37;
  WTF::StringImpl *v38;
  WTF *v39[18];
  WTF::StringImpl *v40;
  uint64_t v41;

  v10 = *(WebCore::Page **)(*((_QWORD *)this + 1) + 8);
  ++*(_DWORD *)v10;
  WebCore::PageGroupLoadDeferrer::PageGroupLoadDeferrer(v39, v10, 1);
  if (*(_DWORD *)v10 == 1)
  {
    WebCore::Page::~Page((uint64_t)v10);
    WTF::fastFree(v36, v37);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  WebCore::Chrome::notifyPopupOpeningObservers((uint64_t)this);
  v11 = *((_QWORD *)a2 + 37);
  if (v11 && (v12 = *(_QWORD *)(v11 + 1744)) != 0)
  {
    v14 = *(const char **)(v12 + 16);
    v13 = *(_QWORD *)(v12 + 24);
    v40 = (WTF::StringImpl *)v14;
    v41 = v13;
    if (v13)
      v15 = PAL::nonBackslashEncodings == 0;
    else
      v15 = 1;
    if (!v15 && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v40);
    if (*a3)
      WTF::StringImpl::replace();
    else
      v38 = 0;
  }
  else
  {
    v16 = *a3;
    if (*a3)
      *(_DWORD *)v16 += 2;
    v38 = v16;
  }
  v17 = *((_QWORD *)this + 2);
  v18 = *((_QWORD *)a2 + 37);
  if (v18 && (v19 = *(_QWORD *)(v18 + 1744)) != 0)
  {
    v21 = *(const char **)(v19 + 16);
    v20 = *(_QWORD *)(v19 + 24);
    v40 = (WTF::StringImpl *)v21;
    v41 = v20;
    if (v20)
      v22 = PAL::nonBackslashEncodings == 0;
    else
      v22 = 1;
    if (!v22 && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v40);
    if (*a4)
      WTF::StringImpl::replace();
    else
      v40 = 0;
  }
  else
  {
    v23 = *a4;
    if (*a4)
      *(_DWORD *)v23 += 2;
    v40 = (WTF::StringImpl *)v23;
  }
  v25 = (*(uint64_t (**)(uint64_t, WebCore::LocalFrame *, WTF::StringImpl **, WTF::StringImpl **, const char **))(*(_QWORD *)v17 + 256))(v17, a2, &v38, &v40, a5);
  v26 = v40;
  v40 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::destroy(v26, v24);
      if (!(_DWORD)v25)
        goto LABEL_46;
      goto LABEL_33;
    }
    *(_DWORD *)v26 -= 2;
  }
  if (!(_DWORD)v25)
    goto LABEL_46;
LABEL_33:
  v27 = *((_QWORD *)a2 + 37);
  if (v27 && (v28 = *(_QWORD *)(v27 + 1744)) != 0)
  {
    v30 = *(const char **)(v28 + 16);
    v29 = *(_QWORD *)(v28 + 24);
    v40 = (WTF::StringImpl *)v30;
    v41 = v29;
    if (v29 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)&v40);
    if (!*a5)
    {
      *a5 = 0;
      goto LABEL_46;
    }
    WTF::StringImpl::replace();
    v31 = (const char *)v40;
  }
  else
  {
    v31 = *a5;
    if (*a5)
      *(_DWORD *)v31 += 2;
  }
  v32 = (WTF::StringImpl *)*a5;
  v40 = 0;
  *a5 = v31;
  if (!v32)
    goto LABEL_46;
  v33 = *(_DWORD *)v32 - 2;
  if (*(_DWORD *)v32 != 2)
    goto LABEL_45;
  WTF::StringImpl::destroy(v32, v24);
  v32 = v40;
  v40 = 0;
  if (v32)
  {
    v33 = *(_DWORD *)v32 - 2;
    if (*(_DWORD *)v32 != 2)
    {
LABEL_45:
      *(_DWORD *)v32 = v33;
      goto LABEL_46;
    }
    WTF::StringImpl::destroy(v32, v24);
  }
LABEL_46:
  v34 = v38;
  v38 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v24);
    else
      *(_DWORD *)v34 -= 2;
  }
  WebCore::PageGroupLoadDeferrer::~PageGroupLoadDeferrer(v39, v24);
  return v25;
}

WTF::StringImpl *WebCore::Chrome::setStatusbarText(WebCore::Chrome *this, WebCore::LocalFrame *a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  BOOL v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[2];

  v4 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)a2 + 37);
  if (v5 && (v6 = *(_QWORD *)(v5 + 1744)) != 0)
  {
    v8 = *(WTF::StringImpl **)(v6 + 16);
    v7 = *(WTF::StringImpl **)(v6 + 24);
    v13[0] = v8;
    v13[1] = v7;
    if (v7)
      v9 = PAL::nonBackslashEncodings == 0;
    else
      v9 = 1;
    if (!v9 && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)v13);
    if (*a3)
      WTF::StringImpl::replace();
    else
      v13[0] = 0;
  }
  else
  {
    v10 = *a3;
    if (*a3)
      *(_DWORD *)v10 += 2;
    v13[0] = v10;
  }
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 264))(v4, v13);
  result = v13[0];
  v13[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Chrome::mouseDidMoveOverElement(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  unsigned __int8 v5;
  uint64_t v8;
  BOOL v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t result;
  WTF *v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31[5];
  WTF::StringImpl *v32;

  v5 = a3;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 160);
  if (v8)
    v9 = *(_BYTE *)(v8 + 144) == 0;
  else
    v9 = 0;
  if (v9)
  {
    v10 = (unsigned int *)(v8 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *((_QWORD *)a2 + 9);
    if (v12)
    {
      v13 = *(unsigned __int8 **)(*(_QWORD *)(v12 + 40) + 8);
      v14 = v13[3397];
      if (v14 == 2)
      {
        WebCore::Document::initDNSPrefetch((WebCore::Document *)v13, a2);
        v14 = v13[3397];
      }
      if (v14 == 1)
      {
        v15 = *(_QWORD *)(v8 + 280);
        ++*(_DWORD *)v15;
        v16 = *(_QWORD *)(v15 + 16);
        WebCore::HitTestResult::absoluteLinkURL(a2, a3, a4, (uint64_t)v31, a5);
        WTF::URL::host((WTF::URL *)v31);
        if ((v17 & 0xFF00000000) != 0)
          WTF::String::String();
        else
          WTF::String::String();
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 1104))(v16, &v32);
        v19 = v32;
        v32 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = v31[0];
        v31[0] = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v18);
          else
            *(_DWORD *)v20 -= 2;
        }
        if (!*(_DWORD *)v15)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        --*(_DWORD *)v15;
      }
    }
    do
    {
      v21 = __ldaxr(v10);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v10));
    if (!v22)
    {
      atomic_store(1u, v10);
      v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = off_1E31FE290;
      *((_QWORD *)v29 + 1) = v10;
      v31[0] = v29;
      WTF::ensureOnMainThread();
      v30 = v31[0];
      v31[0] = 0;
      if (v30)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
    }
  }
  v31[0] = 0;
  LOBYTE(v32) = 0;
  WebCore::Chrome::getToolTip(a1, a2, (uint64_t *)v31, (BOOL *)&v32);
  (*(void (**)(_QWORD, WTF::StringImpl *, _QWORD, WTF::StringImpl **, _QWORD))(**(_QWORD **)(a1 + 16) + 528))(*(_QWORD *)(a1 + 16), a2, v5, v31, v32);
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  ++*(_DWORD *)v24;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    WebCore::InspectorInstrumentation::mouseDidMoveOverElementImpl(*(unsigned int **)(*(_QWORD *)(v24 + 80) + 8), a2);
  if (*(_DWORD *)v24 == 1)
  {
    WebCore::Page::~Page(v24);
    WTF::fastFree(v27, v28);
  }
  else
  {
    --*(_DWORD *)v24;
  }
  result = (uint64_t)v31[0];
  v31[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Chrome::getToolTip(uint64_t a1, WebCore::HitTestResult *a2, uint64_t *a3, BOOL *a4)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::String *v10;
  __n128 v11;
  WTF::StringImpl *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  __int16 v34;
  __int16 v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WebCore::Node *v38;
  WTF::StringImpl *v39[5];

  WebCore::HitTestResult::spellingToolTip((uint64_t)a2, a4, v39);
  v12 = v39[0];
  v39[0] = 0;
  result = *a3;
  *a3 = (uint64_t)v12;
  if (result)
  {
    v14 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      result = (uint64_t)v39[0];
      v39[0] = 0;
      if (!result)
        goto LABEL_4;
      v14 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
        goto LABEL_4;
      }
    }
    *(_DWORD *)result = v14;
LABEL_4:
    v12 = (WTF::StringImpl *)*a3;
  }
  if (v12 && *((_DWORD *)v12 + 1))
    return result;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 112) + 696) & 0x400000000) != 0)
  {
    v15 = *((_QWORD *)a2 + 10);
    if (!v15)
      goto LABEL_20;
    if ((*(_WORD *)(v15 + 28) & 8) == 0)
    {
      v15 = *(_QWORD *)(v15 + 32);
      if (!v15 || (*(_WORD *)(v15 + 28) & 8) == 0)
        goto LABEL_20;
    }
    v16 = *(_DWORD *)(v15 + 24);
    v17 = v16 + 2;
    *(_DWORD *)(v15 + 24) = v16 + 2;
    if ((*(_WORD *)(v15 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      *(_DWORD *)(v15 + 24) = v16 + 4;
      v18 = *(_DWORD *)(*(_QWORD *)(v15 + 240) + 12);
      if (v18 == 0x10000 || v18 == 256)
      {
        v19 = *(_QWORD *)(v15 + 120);
        if (v19)
        {
          result = *(_QWORD *)(v19 + 8);
          if (result)
          {
            *(_DWORD *)(result + 24) += 2;
            v38 = (WebCore::Node *)result;
            WebCore::HTMLFormElement::action((WebCore::HTMLFormElement *)result, v39);
            v36 = (WTF::StringImpl *)*a3;
            *a3 = (uint64_t)v39[0];
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v8);
              else
                *(_DWORD *)v36 -= 2;
            }
            v37 = *((_QWORD *)v38 + 8) & 0xFFFFFFFFFFFFLL;
            if (v37)
            {
              if ((*(_BYTE *)((*((_QWORD *)v38 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                result = 105;
                __break(0xC471u);
                return result;
              }
              LODWORD(v37) = (*(_DWORD *)((*((_QWORD *)v38 + 8) & 0xFFFFFFFFFFFFLL) + 0x78) >> 26) & 1;
            }
            *a4 = v37;
            result = (uint64_t)v38;
            if (*((_DWORD *)v38 + 6) == 2)
            {
              if ((*((_WORD *)v38 + 15) & 0x400) == 0)
                result = (uint64_t)WebCore::Node::removedLastRef(v38, v8);
            }
            else
            {
              *((_DWORD *)v38 + 6) -= 2;
            }
          }
        }
      }
      v17 = *(_DWORD *)(v15 + 24) - 2;
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        v35 = *(_WORD *)(v15 + 30);
        if ((v35 & 0x400) != 0)
          goto LABEL_84;
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v15, v8);
        v17 = *(_DWORD *)(v15 + 24);
      }
      else
      {
        *(_DWORD *)(v15 + 24) = v17;
      }
    }
    v20 = v17 - 2;
    if (v20)
    {
      *(_DWORD *)(v15 + 24) = v20;
LABEL_20:
      if (*a3 && *(_DWORD *)(*a3 + 4))
        return result;
      WebCore::HitTestResult::absoluteLinkURL(a2, v9, v10, (uint64_t)v39, v11);
      result = (uint64_t)v39[0];
      if (v39[0])
        *(_DWORD *)v39[0] += 2;
      v22 = (WTF::StringImpl *)*a3;
      *a3 = result;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy(v22, v21);
          result = (uint64_t)v39[0];
        }
        else
        {
          *(_DWORD *)v22 -= 2;
        }
      }
      v39[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
        else
          *(_DWORD *)result -= 2;
      }
      *a4 = 0;
      v12 = (WTF::StringImpl *)*a3;
      goto LABEL_30;
    }
    v35 = *(_WORD *)(v15 + 30);
LABEL_84:
    if ((v35 & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v15, v8);
    goto LABEL_20;
  }
LABEL_30:
  if (v12 && *((_DWORD *)v12 + 1))
    return result;
  WebCore::HitTestResult::title((uint64_t)a2, a4, v39);
  v24 = v39[0];
  v39[0] = 0;
  result = *a3;
  *a3 = (uint64_t)v24;
  if (result)
  {
    v25 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
      result = (uint64_t)v39[0];
      v39[0] = 0;
      if (!result)
        goto LABEL_34;
      v25 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
        goto LABEL_34;
      }
    }
    *(_DWORD *)result = v25;
LABEL_34:
    v24 = (WTF::StringImpl *)*a3;
  }
  if (v24 && *((_DWORD *)v24 + 1))
    return result;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 112) + 696) & 0x200000000) == 0)
    goto LABEL_41;
  WebCore::HitTestResult::innerTextIfTruncated((uint64_t)a2, (const WebCore::RenderBlockFlow *)a4, v39);
  v26 = v39[0];
  v39[0] = 0;
  result = *a3;
  *a3 = (uint64_t)v26;
  if (result)
  {
    v27 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
      result = (uint64_t)v39[0];
      v39[0] = 0;
      if (!result)
        goto LABEL_40;
      v27 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
        goto LABEL_40;
      }
    }
    *(_DWORD *)result = v27;
  }
LABEL_40:
  v24 = (WTF::StringImpl *)*a3;
LABEL_41:
  if (!v24 || !*((_DWORD *)v24 + 1))
  {
    v28 = *((_QWORD *)a2 + 10);
    if (v28)
    {
      if ((*(_WORD *)(v28 + 28) & 8) != 0 || (v28 = *(_QWORD *)(v28 + 32)) != 0 && (*(_WORD *)(v28 + 28) & 8) != 0)
      {
        v29 = *(_DWORD *)(v28 + 24);
        v30 = v29 + 2;
        *(_DWORD *)(v28 + 24) = v29 + 2;
        if ((*(_WORD *)(v28 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
        {
          goto LABEL_53;
        }
        *(_DWORD *)(v28 + 24) = v29 + 4;
        (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(v28 + 240) + 800))(v39);
        v31 = v39[0];
        v39[0] = 0;
        result = *a3;
        *a3 = (uint64_t)v31;
        if (result)
        {
          v32 = *(_DWORD *)result - 2;
          if (*(_DWORD *)result != 2)
          {
LABEL_50:
            *(_DWORD *)result = v32;
            goto LABEL_51;
          }
          WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
          result = (uint64_t)v39[0];
          v39[0] = 0;
          if (result)
          {
            v32 = *(_DWORD *)result - 2;
            if (*(_DWORD *)result != 2)
              goto LABEL_50;
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
          }
        }
LABEL_51:
        *a4 = 0;
        v30 = *(_DWORD *)(v28 + 24) - 2;
        if (*(_DWORD *)(v28 + 24) == 2)
        {
          v34 = *(_WORD *)(v28 + 30);
          if ((v34 & 0x400) != 0)
          {
LABEL_77:
            if ((v34 & 0x400) == 0)
              return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v28, v23);
            return result;
          }
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v28, v23);
          v30 = *(_DWORD *)(v28 + 24);
        }
        else
        {
          *(_DWORD *)(v28 + 24) = v30;
        }
LABEL_53:
        v33 = v30 - 2;
        if (v33)
        {
          *(_DWORD *)(v28 + 24) = v33;
          return result;
        }
        v34 = *(_WORD *)(v28 + 30);
        goto LABEL_77;
      }
    }
  }
  return result;
}

uint64_t WebCore::Chrome::print(WebCore::Chrome *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t result;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)a2 + 37);
  v3 = *(_DWORD *)(v2 + 268);
  if ((v3 & 0x1000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 536))(*((_QWORD *)this + 2));
    return (v3 & 0x1000) == 0;
  }
  v4 = *(_DWORD **)(v2 + 696);
  if (v4)
    ++v4[6];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (!v13)
    goto LABEL_16;
  if (!*((_DWORD *)v13 + 1)
    || (v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 104))(v4)) == 0
    || (v7 = *(_QWORD *)(v6 + 24)) == 0
    || (v8 = *(_QWORD *)(v7 + 8)) == 0
    || (v9 = *(_QWORD *)(v8 + 792)) == 0)
  {
LABEL_13:
    v11 = v13;
    v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v5);
        if (!v4)
          return (v3 & 0x1000) == 0;
        goto LABEL_17;
      }
      *(_DWORD *)v11 -= 2;
    }
LABEL_16:
    if (!v4)
      return (v3 & 0x1000) == 0;
LABEL_17:
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 72))(v4);
    else
      --v4[6];
    return (v3 & 0x1000) == 0;
  }
  ++*(_DWORD *)(v9 + 16);
  WebCore::PageConsoleClient::addMessage((uint64_t *)v9, 1, 2, (uint64_t)&v13, 0, 0);
  v10 = *(_DWORD *)(v9 + 16);
  if (v10)
  {
    *(_DWORD *)(v9 + 16) = v10 - 1;
    goto LABEL_13;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Chrome::enableSuddenTermination(WebCore::Chrome *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 1264))(*((_QWORD *)this + 2));
}

uint64_t WebCore::Chrome::disableSuddenTermination(WebCore::Chrome *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 1272))(*((_QWORD *)this + 2));
}

uint64_t WebCore::Chrome::screenSize(WebCore::Chrome *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 432))(*((_QWORD *)this + 2));
}

uint64_t WebCore::Chrome::availableScreenSize(WebCore::Chrome *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 440))(*((_QWORD *)this + 2));
}

uint64_t WebCore::Chrome::overrideAvailableScreenSize(WebCore::Chrome *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 456))(*((_QWORD *)this + 2));
}

uint64_t WebCore::Chrome::dispatchViewportPropertiesDidChange(uint64_t result)
{
  if (!*(_BYTE *)(result + 40))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 16) + 472))(*(_QWORD *)(result + 16));
  return result;
}

uint64_t WebCore::Chrome::setCursor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 400))(*(_QWORD *)(a1 + 16));
}

uint64_t WebCore::Chrome::setCursorHiddenUntilMouseMoves(WebCore::Chrome *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 408))(*((_QWORD *)this + 2));
}

uint64_t WebCore::Chrome::createImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 920))(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6);
}

uint64_t WebCore::Chrome::sinkIntoImageBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 928))(v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::Chrome::createGraphicsContextGL(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 936))(*(_QWORD *)(a1 + 16));
}

uint64_t WebCore::Chrome::createGPUForWebGPU(WebCore::Chrome *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 944))(*((_QWORD *)this + 2));
}

uint64_t WebCore::Chrome::displayID(WebCore::Chrome *this)
{
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 312);
}

uint64_t WebCore::Chrome::didReceiveDocType(uint64_t this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t IgnoringASCIICase;
  uint64_t v5;

  if (*(WebCore::LocalFrame **)(*((_QWORD *)a2 + 16) + 8) == a2)
  {
    v2 = *(_QWORD *)(*((_QWORD *)a2 + 37) + 80);
    if (v2)
    {
      while ((*(_WORD *)(v2 + 28) & 0xF000) != 0xA000)
      {
        v2 = *(_QWORD *)(v2 + 56);
        if (!v2)
          return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(this + 16) + 632))(*(_QWORD *)(this + 16), 0);
      }
      v3 = *(_QWORD *)(this + 16);
      if (*(_QWORD *)(v2 + 88))
      {
        v5 = v3;
        IgnoringASCIICase = WTF::StringImpl::findIgnoringASCIICase();
        return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 632))(v5, IgnoringASCIICase != -1);
      }
      else
      {
        return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 632))(v3, 0);
      }
    }
    else
    {
      return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(this + 16) + 632))(*(_QWORD *)(this + 16), 0);
    }
  }
  return this;
}

uint64_t WebCore::Chrome::registerPopupOpeningObserver(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v4 = (uint64_t *)(a1 + 24);
  v5 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 32))
  {
    WTF::Vector<WTF::WeakPtr<WebCore::RenderedDocumentMarker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v5 + 1);
    v5 = *(unsigned int *)(a1 + 36);
    v6 = *(_QWORD *)(a1 + 24);
    result = *(_QWORD *)(a2 + 8);
    if (result)
      goto LABEL_20;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v9 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = result;
    if (!v9)
      goto LABEL_20;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
    result = *(_QWORD *)(a2 + 8);
    if (result)
    {
LABEL_20:
      do
        v12 = __ldaxr((unsigned int *)result);
      while (__stlxr(v12 + 1, (unsigned int *)result));
    }
  }
  else
  {
    v6 = *v4;
    result = *(_QWORD *)(a2 + 8);
    if (result)
      goto LABEL_21;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v14 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = result;
    if (!v14)
      goto LABEL_21;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
    result = *(_QWORD *)(a2 + 8);
    if (result)
    {
LABEL_21:
      do
        v17 = __ldaxr((unsigned int *)result);
      while (__stlxr(v17 + 1, (unsigned int *)result));
    }
  }
  *(_QWORD *)(v6 + 8 * v5) = result;
  ++*(_DWORD *)(a1 + 36);
  return result;
}

uint64_t WebCore::Chrome::unregisterPopupOpeningObserver(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *i;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;

  result = a2[1];
  if (!result)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v5 = (unsigned int *)a2[1];
    a2[1] = result;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
      result = a2[1];
      if (!result)
      {
        v10 = (_DWORD *)(a1 + 36);
        v19 = *(unsigned int *)(a1 + 36);
        if (!(_DWORD)v19)
          return result;
        v20 = 0;
        v11 = *(_QWORD **)(a1 + 24);
        v21 = -v19;
        for (i = v11; ; ++i)
        {
          v14 = *i;
          if (!*i)
          {
            result = 0;
            goto LABEL_32;
          }
          if (!*(_QWORD *)(v14 + 8))
            break;
          if (v21 == --v20)
            return result;
        }
        result = 0;
        v13 = -v20;
        goto LABEL_21;
      }
    }
  }
  do
    v8 = __ldaxr((unsigned int *)result);
  while (__stlxr(v8 + 1, (unsigned int *)result));
  v10 = (_DWORD *)(a1 + 36);
  v9 = *(unsigned int *)(a1 + 36);
  if (!(_DWORD)v9)
  {
    do
    {
LABEL_38:
      v25 = __ldaxr((unsigned int *)result);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)result));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, a2);
    }
    return result;
  }
  v11 = *(_QWORD **)(a1 + 24);
  v12 = *(_QWORD *)(result + 8);
  if (v12)
  {
    v13 = 0;
    while (1)
    {
      v14 = v11[v13];
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8) == v12)
          break;
      }
      if (v9 == ++v13)
        goto LABEL_37;
    }
LABEL_21:
    i = &v11[v13];
    *i = 0;
    do
    {
      v17 = __ldaxr((unsigned int *)v14);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v14));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v14);
      v27 = i;
      v28 = result;
      WTF::fastFree((WTF *)v14, a2);
      i = v27;
      result = v28;
    }
    goto LABEL_33;
  }
  v15 = -v9;
  i = *(_QWORD **)(a1 + 24);
  while (1)
  {
    v14 = *i;
    if (!*i)
      break;
    if (!*(_QWORD *)(v14 + 8))
    {
      v13 = -v12;
      goto LABEL_21;
    }
    --v12;
    ++i;
    if (v15 == v12)
      goto LABEL_37;
  }
LABEL_32:
  *i = 0;
LABEL_33:
  v22 = i + 1;
  v23 = *(unsigned int *)(a1 + 36);
  v24 = *(_QWORD *)(a1 + 24) + 8 * v23;
  while (v22 != (_QWORD *)v24)
  {
    *(v22 - 1) = *v22;
    *v22++ = 0;
  }
  *v10 = v23 - 1;
LABEL_37:
  if (result)
    goto LABEL_38;
  return result;
}

uint64_t WebCore::ChromeClient::createGraphicsContextGL@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return WebCore::createWebProcessGraphicsContextGL(a1, a2);
}

uint64_t WebCore::ChromeClient::sinkIntoImageBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::ChromeClient::ensureScrollbarsController(WebCore::ChromeClient *this, WebCore::Page *a2, WebCore::ScrollableArea *a3)
{
  return WebCore::ScrollableArea::createScrollbarsController(a3);
}

float WebCore::CaptionUserPreferences::captionFontSizeScaleAndImportance(WebCore::CaptionUserPreferences *this, BOOL *a2)
{
  *a2 = 0;
  return 0.05;
}

uint64_t WebCore::CaptionUserPreferences::captionStrokeWidthForFont(WebCore::CaptionUserPreferences *this, float a2, const WTF::String *a3, float *a4, BOOL *a5)
{
  return 0;
}

uint64_t WebCore::CaptionUserPreferences::captionsStyleSheetOverride@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 112);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

BOOL WebCore::CaptionUserPreferences::testingMode(WebCore::CaptionUserPreferences *this)
{
  return *((_DWORD *)this + 34) != 0;
}

uint64_t WebCore::ChromeClient::showShareSheet(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebCore::ChromeClient::displayRefreshMonitorFactory(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::isEmptyChromeClient(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::shouldNotifyOnFormChanges(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *,false>(uint64_t result, WebCore::TextTrack **a2, uint64_t *a3, uint64_t a4, char a5)
{
  WebCore::TextTrack **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WebCore::TextTrack **v12;
  WebCore::TextTrack **v13;
  WebCore::TextTrack *v14;
  uint64_t v15;
  WebCore::TextTrack *v16;
  WebCore::TextTrack **v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WebCore::TextTrack **v21;
  WebCore::TextTrack **v22;
  WebCore::TextTrack *v23;
  WebCore::TextTrack *v24;
  WebCore::TextTrack **v25;
  WebCore::TextTrack **v26;
  WebCore::TextTrack *v27;
  WebCore::TextTrack *v28;
  WebCore::TextTrack **v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WebCore::TextTrack *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WebCore::TextTrack **v37;
  WebCore::TextTrack *v38;
  WebCore::TextTrack *v39;
  WebCore::TextTrack *v40;
  WebCore::TextTrack *v41;
  BOOL v42;
  BOOL v43;
  WebCore::TextTrack *v44;
  WebCore::TextTrack **v45;
  WebCore::TextTrack **v46;
  WebCore::TextTrack *v47;
  WebCore::TextTrack **v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  WebCore::TextTrack **v55;
  uint64_t v56;
  WebCore::TextTrack *v57;
  WebCore::TextTrack *v58;
  WebCore::TextTrack **v59;
  WebCore::TextTrack *v60;
  WebCore::TextTrack *v61;
  WebCore::TextTrack *v62;
  WebCore::TextTrack **v63;
  BOOL v65;
  uint64_t v66;
  WebCore::TextTrack **v67;
  WebCore::TextTrack **v68;
  _DWORD *v69;
  WebCore::TextTrack *v70;
  uint64_t i;
  _QWORD *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t *v78;
  int64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  WebCore::TextTrack **v83;
  WebCore::TextTrack **v84;
  WTF::StringImpl *v85;
  WebCore::TextTrack **v86;
  WebCore::TextTrack *v87;
  WebCore::TextTrack *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WebCore::TextTrack *v92;
  uint64_t v93;
  uint64_t v94;
  WebCore::TextTrack **v95;
  WebCore::TextTrack *v96;
  int64_t v97;
  WebCore::TextTrack **v98;
  WebCore::TextTrack **v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WebCore::TextTrack *v106;
  WebCore::TextTrack *v107;
  WebCore::TextTrack *v108;
  WebCore::TextTrack *v109;
  uint64_t v110;
  unint64_t v111;
  WebCore::TextTrack **v112;
  WebCore::TextTrack *v113;
  uint64_t *v114;
  WebCore::TextTrack *v115;
  WebCore::TextTrack *v116;
  WTF::StringImpl *v117;
  int v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WebCore::TextTrack **v125;
  WebCore::TextTrack *v126;
  uint64_t *v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  int v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WebCore::TextTrack **v133;
  WebCore::TextTrack **v134;
  WebCore::TextTrack **v135;
  WebCore::TextTrack **v136;
  WebCore::TextTrack *v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v141;
  WebCore::TextTrack **v142;
  WebCore::TextTrack **v143;
  WebCore::TextTrack **v144;
  WebCore::TextTrack **v145;
  WebCore::TextTrack *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;

  v145 = (WebCore::TextTrack **)result;
LABEL_2:
  v135 = a2 - 2;
  v136 = a2 - 1;
  v134 = a2 - 3;
  v8 = v145;
  v142 = a2;
  while (2)
  {
    v145 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *(a2 - 1), v8);
        if ((_DWORD)result)
        {
          v58 = *v8;
          *v8 = *(a2 - 1);
          *(a2 - 1) = v58;
        }
        return result;
      case 3:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(v8, v8 + 1, v136, a3);
      case 4:
        v59 = v8 + 2;
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(v8, v8 + 1, v8 + 2, a3);
        result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *(a2 - 1), v8 + 2);
        if ((_DWORD)result)
        {
          v60 = *v59;
          *v59 = *(a2 - 1);
          *(a2 - 1) = v60;
          result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *v59, v8 + 1);
          if ((_DWORD)result)
          {
            v62 = v8[1];
            v61 = v8[2];
            v8[1] = v61;
            v8[2] = v62;
            result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, v61, v8);
            if ((_DWORD)result)
              *(int8x16_t *)v8 = vextq_s8(*(int8x16_t *)v8, *(int8x16_t *)v8, 8uLL);
          }
        }
        return result;
      case 5:
        return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *,0>(v8, v8 + 1, v8 + 2, v8 + 3, v136, a3);
      default:
        if (v9 <= 191)
        {
          v63 = v8 + 1;
          v65 = v8 == a2 || v63 == a2;
          if ((a5 & 1) == 0)
          {
            if (v65)
              return result;
            v122 = 0;
            v123 = 1;
            while (1)
            {
              v124 = v122;
              v122 = v123;
              v125 = v8;
              result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *v63, &v8[v124]);
              if ((_DWORD)result)
              {
                result = 0;
                v126 = *v63;
                *v63 = 0;
                do
                {
                  v127 = (uint64_t *)&v8[v124];
                  v128 = *v127;
                  *v127 = 0;
                  v127[1] = v128;
                  if (result)
                  {
                    if (*(_DWORD *)(result + 16) == 1)
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                    else
                      --*(_DWORD *)(result + 16);
                  }
                  if (v124 == -1)
                    goto LABEL_276;
                  WebCore::trackDisplayName((WebCore *)&v148, v126);
                  WebCore::trackDisplayName((WebCore *)&v147, v8[v124 - 1]);
                  v130 = WTF::Collator::collate();
                  v131 = v147;
                  v147 = 0;
                  if (v131)
                  {
                    if (*(_DWORD *)v131 == 2)
                      WTF::StringImpl::destroy(v131, v129);
                    else
                      *(_DWORD *)v131 -= 2;
                  }
                  v132 = v148;
                  v148 = 0;
                  if (v132)
                  {
                    if (*(_DWORD *)v132 == 2)
                      WTF::StringImpl::destroy(v132, v129);
                    else
                      *(_DWORD *)v132 -= 2;
                  }
                  result = *v127;
                  --v124;
                }
                while (v130 < 0);
                v125 = v8;
                v8[v124 + 1] = v126;
                if (result)
                {
                  if (*(_DWORD *)(result + 16) == 1)
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                  else
                    --*(_DWORD *)(result + 16);
                }
              }
              v123 = v122 + 1;
              v63 = &v125[v122 + 1];
              if (v63 == a2)
                return result;
            }
          }
          if (v65)
            return result;
          v66 = 0;
          v67 = v8;
LABEL_140:
          v68 = v67;
          v67 = v63;
          result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, v68[1], v68);
          if (!(_DWORD)result)
            goto LABEL_163;
          v69 = 0;
          v70 = *v63;
          v143 = v63;
          *v63 = 0;
          for (i = v66; ; i -= 8)
          {
            v72 = (WebCore::TextTrack **)((char *)v145 + i);
            v73 = *(uint64_t *)((char *)v145 + i);
            *v72 = 0;
            v72[1] = v73;
            if (!v69)
              goto LABEL_145;
            if (v69[4] != 1)
              break;
            (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 16))(v69);
            if (!i)
            {
LABEL_159:
              v78 = (uint64_t *)v145;
              goto LABEL_160;
            }
LABEL_146:
            WebCore::trackDisplayName((WebCore *)&v148, v70);
            WebCore::trackDisplayName((WebCore *)&v147, *(WebCore::TextTrack **)((char *)v145 + i - 8));
            v75 = WTF::Collator::collate();
            v76 = v147;
            v147 = 0;
            if (v76)
            {
              if (*(_DWORD *)v76 == 2)
                WTF::StringImpl::destroy(v76, v74);
              else
                *(_DWORD *)v76 -= 2;
            }
            v77 = v148;
            v148 = 0;
            if (!v77)
              goto LABEL_152;
            if (*(_DWORD *)v77 != 2)
            {
              *(_DWORD *)v77 -= 2;
LABEL_152:
              if ((v75 & 0x80000000) == 0)
                goto LABEL_158;
              goto LABEL_153;
            }
            WTF::StringImpl::destroy(v77, v74);
            if ((v75 & 0x80000000) == 0)
            {
LABEL_158:
              v78 = (uint64_t *)((char *)v145 + i);
LABEL_160:
              v67 = v143;
              result = *v78;
              *v78 = (uint64_t)v70;
              if (result)
              {
                if (*(_DWORD *)(result + 16) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                else
                  --*(_DWORD *)(result + 16);
              }
LABEL_163:
              v63 = v67 + 1;
              v66 += 8;
              if (v67 + 1 == a2)
                return result;
              goto LABEL_140;
            }
LABEL_153:
            v69 = (_DWORD *)*v72;
          }
          --v69[4];
LABEL_145:
          if (!i)
            goto LABEL_159;
          goto LABEL_146;
        }
        if (!a4)
        {
          if (v8 == a2)
            return result;
          v79 = (unint64_t)(v10 - 2) >> 1;
          v80 = v79;
          do
          {
            v81 = v80;
            if (v79 >= v80)
            {
              v82 = (2 * v80) | 1;
              v83 = &v145[v82];
              if (2 * v80 + 2 < v10
                && WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *v83, v83 + 1))
              {
                ++v83;
                v82 = 2 * v81 + 2;
              }
              v84 = &v145[v81];
              a2 = v142;
              if ((WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *v83, v84) & 1) == 0)
              {
                v85 = *v84;
                *v84 = 0;
                v148 = v85;
                do
                {
                  v86 = v83;
                  v87 = *v83;
                  *v83 = 0;
                  v88 = *v84;
                  *v84 = v87;
                  if (v88)
                  {
                    if (*((_DWORD *)v88 + 4) == 1)
                      (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v88 + 16))(v88);
                    else
                      --*((_DWORD *)v88 + 4);
                  }
                  if (v79 < v82)
                    break;
                  v89 = (2 * v82) | 1;
                  v83 = &v145[v89];
                  v90 = 2 * v82 + 2;
                  if (v90 < v10
                    && WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *v83, v83 + 1))
                  {
                    ++v83;
                    v89 = v90;
                  }
                  v84 = v86;
                  v82 = v89;
                  a2 = v142;
                }
                while (!WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *v83, &v148));
                v91 = v148;
                v148 = 0;
                v92 = *v86;
                *v86 = v91;
                if (v92)
                {
                  if (*((_DWORD *)v92 + 4) == 1)
                    (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v92 + 16))(v92);
                  else
                    --*((_DWORD *)v92 + 4);
                }
                if (v148)
                {
                  if (*((_DWORD *)v148 + 4) == 1)
                    (*(void (**)(void))(*(_QWORD *)v148 + 16))();
                  else
                    --*((_DWORD *)v148 + 4);
                }
              }
            }
            v80 = v81 - 1;
          }
          while (v81);
          v93 = (unint64_t)v9 >> 3;
          while (1)
          {
            v94 = 0;
            v95 = v145;
            v96 = *v145;
            *v145 = 0;
            v97 = (unint64_t)(v93 - 2) >> 1;
            v98 = v145;
            v141 = v93;
            v144 = a2;
            v137 = v96;
            v139 = v97;
            do
            {
              v99 = v98;
              v98 += v94 + 1;
              v100 = 2 * v94;
              v94 = (2 * v94) | 1;
              v101 = v100 + 2;
              if (v100 + 2 < v93)
              {
                WebCore::trackDisplayName((WebCore *)&v148, *v98);
                WebCore::trackDisplayName((WebCore *)&v147, v98[1]);
                v103 = WTF::Collator::collate();
                v104 = v147;
                v147 = 0;
                v93 = v141;
                a2 = v144;
                if (v104)
                {
                  if (*(_DWORD *)v104 == 2)
                    WTF::StringImpl::destroy(v104, v102);
                  else
                    *(_DWORD *)v104 -= 2;
                }
                v105 = v148;
                v148 = 0;
                if (v105)
                {
                  if (*(_DWORD *)v105 == 2)
                    WTF::StringImpl::destroy(v105, v102);
                  else
                    *(_DWORD *)v105 -= 2;
                }
                if (v103 < 0)
                {
                  ++v98;
                  v94 = v101;
                }
                v95 = v145;
                v97 = v139;
              }
              v106 = *v98;
              *v98 = 0;
              v107 = *v99;
              *v99 = v106;
              if (v107)
              {
                if (*((_DWORD *)v107 + 4) == 1)
                  (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v107 + 16))(v107);
                else
                  --*((_DWORD *)v107 + 4);
              }
            }
            while (v94 <= v97);
            if (v98 != --a2)
              break;
            result = (uint64_t)*v98;
            *v98 = v137;
            if (result)
            {
LABEL_242:
              if (*(_DWORD *)(result + 16) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
              else
                --*(_DWORD *)(result + 16);
            }
LABEL_244:
            if (v93-- <= 2)
              return result;
          }
          v108 = *a2;
          *a2 = 0;
          v109 = *v98;
          *v98 = v108;
          if (v109)
          {
            if (*((_DWORD *)v109 + 4) == 1)
              (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v109 + 16))(v109);
            else
              --*((_DWORD *)v109 + 4);
          }
          result = (uint64_t)*a2;
          *a2 = v137;
          if (result)
          {
            if (*(_DWORD *)(result + 16) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            else
              --*(_DWORD *)(result + 16);
          }
          v110 = (char *)(v98 + 1) - (char *)v95;
          if (v110 < 9)
            goto LABEL_244;
          v111 = (((unint64_t)v110 >> 3) - 2) >> 1;
          v112 = &v95[v111];
          result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *v112, v98);
          if (!(_DWORD)result)
            goto LABEL_244;
          v113 = *v98;
          *v98 = 0;
          while (1)
          {
            v114 = (uint64_t *)v112;
            v115 = *v112;
            *v112 = 0;
            v116 = *v98;
            *v98 = v115;
            if (v116)
            {
              if (*((_DWORD *)v116 + 4) == 1)
              {
                (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v116 + 16))(v116);
                if (!v111)
                  goto LABEL_241;
                goto LABEL_227;
              }
              --*((_DWORD *)v116 + 4);
            }
            if (!v111)
              goto LABEL_241;
LABEL_227:
            v111 = (v111 - 1) >> 1;
            v112 = &v145[v111];
            WebCore::trackDisplayName((WebCore *)&v148, *v112);
            WebCore::trackDisplayName((WebCore *)&v147, v113);
            v118 = WTF::Collator::collate();
            v119 = v147;
            v147 = 0;
            if (v119)
            {
              if (*(_DWORD *)v119 == 2)
                WTF::StringImpl::destroy(v119, v117);
              else
                *(_DWORD *)v119 -= 2;
            }
            v120 = v148;
            v148 = 0;
            if (v120)
            {
              if (*(_DWORD *)v120 == 2)
                WTF::StringImpl::destroy(v120, v117);
              else
                *(_DWORD *)v120 -= 2;
            }
            v98 = (WebCore::TextTrack **)v114;
            if ((v118 & 0x80000000) == 0)
            {
LABEL_241:
              result = *v114;
              *v114 = (uint64_t)v113;
              v93 = v141;
              if (result)
                goto LABEL_242;
              goto LABEL_244;
            }
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8;
        v13 = &v8[v11];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(&v8[v11], v8, v136, a3);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(v8, &v8[v11], v136, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(v8 + 1, v13 - 1, v135, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(v8 + 2, &v8[v11 + 1], v134, a3);
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(v13 - 1, v13, &v8[v11 + 1], a3);
          v14 = *v8;
          *v8 = *v13;
          *v13 = v14;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *(v8 - 1), v8);
          if ((result & 1) == 0)
          {
            v44 = *v8;
            *v8 = 0;
            result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, v44, v136);
            if ((result & 1) != 0)
            {
              while (++v8 != a2)
              {
                result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, v44, v8);
                if ((result & 1) != 0)
                  goto LABEL_83;
              }
LABEL_276:
              __break(1u);
              return result;
            }
            v45 = v8 + 1;
            do
            {
              v8 = v45;
              if (v45 >= a2)
                break;
              result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, v44, v45);
              v45 = v8 + 1;
            }
            while (!(_DWORD)result);
LABEL_83:
            v46 = a2;
            if (v8 < a2)
            {
              v46 = a2;
              while (v46 != v145)
              {
                result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, v44, --v46);
                if ((result & 1) == 0)
                  goto LABEL_87;
              }
              goto LABEL_276;
            }
LABEL_87:
            if (v8 < v46)
            {
              v47 = *v8;
              *v8 = *v46;
              v48 = v8 + 1;
              *v46 = v47;
              do
              {
                if (v48 == a2)
                  goto LABEL_276;
                WebCore::trackDisplayName((WebCore *)&v148, v44);
                WebCore::trackDisplayName((WebCore *)&v147, *v48);
                v50 = WTF::Collator::collate();
                v51 = v147;
                v147 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, v49);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                result = (uint64_t)v148;
                v148 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v49);
                  else
                    *(_DWORD *)result -= 2;
                }
                ++v48;
              }
              while ((v50 & 0x80000000) == 0);
              v8 = v48 - 1;
              while (v46 != v145)
              {
                WebCore::trackDisplayName((WebCore *)&v148, v44);
                WebCore::trackDisplayName((WebCore *)&v147, *(v46 - 1));
                v53 = WTF::Collator::collate();
                v54 = v147;
                v147 = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, v52);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                result = (uint64_t)v148;
                v148 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v52);
                  else
                    *(_DWORD *)result -= 2;
                }
                --v46;
                if ((v53 & 0x80000000) == 0)
                  goto LABEL_87;
              }
              goto LABEL_276;
            }
            v55 = v8 - 1;
            if (v8 - 1 != v145)
            {
              v56 = (uint64_t)*v55;
              *v55 = 0;
              v57 = *v145;
              *v145 = (WebCore::TextTrack *)v56;
              if (v57)
              {
                if (*((_DWORD *)v57 + 4) == 1)
                  (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v57 + 16))(v57);
                else
                  --*((_DWORD *)v57 + 4);
              }
            }
            a5 = 0;
            result = (uint64_t)*v55;
            *v55 = v44;
            if (result)
            {
              if (*(_DWORD *)(result + 16) == 1)
              {
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                a5 = 0;
              }
              else
              {
                a5 = 0;
                --*(_DWORD *)(result + 16);
              }
            }
            continue;
          }
        }
        v15 = 0;
        v16 = *v8;
        *v145 = 0;
        v146 = v16;
        do
        {
          v17 = &v145[v15 + 1];
          if (v17 == a2)
            goto LABEL_276;
          WebCore::trackDisplayName((WebCore *)&v148, *v17);
          WebCore::trackDisplayName((WebCore *)&v147, v16);
          v19 = WTF::Collator::collate();
          v20 = v147;
          v147 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v18);
            else
              *(_DWORD *)v20 -= 2;
          }
          result = (uint64_t)v148;
          v148 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
            else
              *(_DWORD *)result -= 2;
          }
          ++v15;
        }
        while (v19 < 0);
        v138 = a4;
        v21 = &v145[v15];
        v22 = a2;
        if (v15 != 1)
        {
          while (v22 != v145)
          {
            v23 = *--v22;
            result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, v23, &v146);
            if ((_DWORD)result)
              goto LABEL_30;
          }
          goto LABEL_276;
        }
        v22 = a2;
        do
        {
          if (v21 >= v22)
            break;
          v24 = *--v22;
          result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, v24, &v146);
        }
        while ((result & 1) == 0);
LABEL_30:
        if (v21 >= v22)
        {
          v37 = v21 - 1;
          goto LABEL_58;
        }
        v133 = &v145[v15];
        v25 = &v145[v15];
        v26 = v22;
        while (2)
        {
          v27 = *v25;
          *v25 = *v26;
          *v26 = v27;
          v28 = v146;
          v29 = v25 + 1;
          do
          {
            if (v29 == a2)
              goto LABEL_276;
            WebCore::trackDisplayName((WebCore *)&v148, *v29);
            WebCore::trackDisplayName((WebCore *)&v147, v28);
            v31 = WTF::Collator::collate();
            v32 = v147;
            v147 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v30);
              else
                *(_DWORD *)v32 -= 2;
            }
            result = (uint64_t)v148;
            v148 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v30);
              else
                *(_DWORD *)result -= 2;
            }
            ++v29;
          }
          while (v31 < 0);
          v25 = v29 - 1;
          while (2)
          {
            while (2)
            {
              if (v26 == v145)
                goto LABEL_276;
              v33 = *--v26;
              WebCore::trackDisplayName((WebCore *)&v148, v33);
              WebCore::trackDisplayName((WebCore *)&v147, v28);
              v35 = WTF::Collator::collate();
              v36 = v147;
              v147 = 0;
              a2 = v142;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, v34);
                else
                  *(_DWORD *)v36 -= 2;
              }
              result = (uint64_t)v148;
              v148 = 0;
              if (!result)
              {
LABEL_51:
                if (v35 < 0)
                  goto LABEL_55;
                continue;
              }
              break;
            }
            if (*(_DWORD *)result != 2)
            {
              *(_DWORD *)result -= 2;
              goto LABEL_51;
            }
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v34);
            if ((v35 & 0x80000000) == 0)
              continue;
            break;
          }
LABEL_55:
          if (v25 < v26)
            continue;
          break;
        }
        v37 = v29 - 2;
        v12 = v145;
        v21 = v133;
LABEL_58:
        if (v37 != v12)
        {
          v38 = *v37;
          *v37 = 0;
          v39 = *v12;
          *v12 = v38;
          if (v39)
          {
            if (*((_DWORD *)v39 + 4) == 1)
              (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v39 + 16))(v39);
            else
              --*((_DWORD *)v39 + 4);
          }
        }
        v40 = v146;
        v146 = 0;
        v41 = *v37;
        *v37 = v40;
        if (v41)
        {
          if (*((_DWORD *)v41 + 4) == 1)
            (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v41 + 16))(v41);
          else
            --*((_DWORD *)v41 + 4);
        }
        if (v146)
        {
          if (*((_DWORD *)v146 + 4) == 1)
            (*(void (**)(void))(*(_QWORD *)v146 + 16))();
          else
            --*((_DWORD *)v146 + 4);
        }
        v42 = v21 >= v22;
        a4 = v138;
        if (!v42)
        {
LABEL_72:
          result = std::__introsort<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *,false>(v12, v37, a3, v138, a5 & 1);
          a5 = 0;
          v8 = v37 + 1;
          continue;
        }
        v43 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(v12, v37, a3);
        v8 = v37 + 1;
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(v37 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v43)
            continue;
          goto LABEL_72;
        }
        a2 = v37;
        if (!v43)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(uint64_t a1, WebCore::TextTrack *a2, WebCore::TextTrack **a3)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  WebCore::trackDisplayName((WebCore *)&v10, a2);
  WebCore::trackDisplayName((WebCore *)&v9, *a3);
  v5 = WTF::Collator::collate();
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v5 >> 31;
}

uint64_t std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *,0>(WebCore::TextTrack **a1, WebCore::TextTrack **a2, WebCore::TextTrack **a3, WebCore::TextTrack **a4, WebCore::TextTrack **a5, uint64_t *a6)
{
  WebCore::TextTrack *v12;
  WebCore::TextTrack *v13;
  WebCore::TextTrack *v14;
  uint64_t result;
  WebCore::TextTrack *v16;
  WebCore::TextTrack *v17;
  WebCore::TextTrack *v18;
  WebCore::TextTrack *v19;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(a1, a2, a3, a6);
  if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a6, *a4, a3))
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a6, *a3, a2))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a6, *a2, a1))
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a6, *a5, a4);
  if ((_DWORD)result)
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a6, *a4, a3);
    if ((_DWORD)result)
    {
      v17 = *a3;
      *a3 = *a4;
      *a4 = v17;
      result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a6, *a3, a2);
      if ((_DWORD)result)
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a6, *a2, a1);
        if ((_DWORD)result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(WebCore::TextTrack **a1, WebCore::TextTrack **a2, WebCore::TextTrack **a3, uint64_t *a4)
{
  char v8;
  uint64_t result;
  WebCore::TextTrack *v10;
  WebCore::TextTrack *v11;
  WebCore::TextTrack *v12;

  v8 = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a4, *a2, a1);
  result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a4, *a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a4, *a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *a2;
      *a2 = *a3;
    }
    *a3 = v10;
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a4, *a2, a1);
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(WebCore::TextTrack **a1, WebCore::TextTrack **a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  WebCore::TextTrack *v8;
  WebCore::TextTrack **v9;
  WebCore::TextTrack **v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  WebCore::TextTrack *v14;
  uint64_t i;
  char *v16;
  uint64_t v17;
  WebCore::TextTrack **v18;
  WebCore::TextTrack *v19;
  WebCore::TextTrack **v20;
  WebCore::TextTrack *v21;
  WebCore::TextTrack *v22;
  WebCore::TextTrack *v23;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *(a2 - 1), a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      v20 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(a1, a1 + 1, a1 + 2, a3);
      if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *(a2 - 1), a1 + 2))
      {
        v21 = *v20;
        *v20 = *(a2 - 1);
        *(a2 - 1) = v21;
        if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *v20, a1 + 1))
        {
          v23 = a1[1];
          v22 = a1[2];
          a1[1] = v22;
          a1[2] = v23;
          if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, v22, a1))*(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0 &,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, *v10, v9))
    {
      v13 = 0;
      v14 = *v10;
      *v10 = 0;
      for (i = v11; ; i -= 8)
      {
        v16 = (char *)a1 + i;
        v17 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v16 + 2) = 0;
        *((_QWORD *)v16 + 3) = v17;
        if (v13)
        {
          if (v13[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
          else
            --v13[4];
        }
        if (i == -16)
        {
          v18 = a1;
          goto LABEL_17;
        }
        if ((WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::TextTrackList *,WTF::HashSet<WebCore::TextTrack::Kind,WTF::DefaultHash<WebCore::TextTrack::Kind>,WTF::HashTraits<WebCore::TextTrack::Kind>,WTF::HashTableTraits>)::$_0::operator()<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>>(*a3, v14, (WebCore::TextTrack **)((char *)a1 + i + 8)) & 1) == 0)break;
        v13 = (_DWORD *)*((_QWORD *)v16 + 2);
      }
      v18 = (WebCore::TextTrack **)((char *)a1 + i + 16);
LABEL_17:
      v19 = *v18;
      *v18 = v14;
      if (v19)
      {
        if (*((_DWORD *)v19 + 4) == 1)
          (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v19 + 16))(v19);
        else
          --*((_DWORD *)v19 + 4);
      }
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *,false>(uint64_t result, WebCore::AudioTrack **a2, uint64_t *a3, uint64_t a4, char a5)
{
  WebCore::AudioTrack **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WebCore::AudioTrack **v12;
  WebCore::AudioTrack **v13;
  WebCore::AudioTrack *v14;
  uint64_t v15;
  WebCore::AudioTrack *v16;
  WebCore::AudioTrack **v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WebCore::AudioTrack **v21;
  WebCore::AudioTrack **v22;
  WebCore::AudioTrack *v23;
  WebCore::AudioTrack *v24;
  WebCore::AudioTrack **v25;
  WebCore::AudioTrack **v26;
  WebCore::AudioTrack *v27;
  WebCore::AudioTrack *v28;
  WebCore::AudioTrack **v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WebCore::AudioTrack *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WebCore::AudioTrack **v37;
  WebCore::AudioTrack *v38;
  WebCore::AudioTrack *v39;
  WebCore::AudioTrack *v40;
  WebCore::AudioTrack *v41;
  BOOL v42;
  BOOL v43;
  WebCore::AudioTrack *v44;
  WebCore::AudioTrack **v45;
  WebCore::AudioTrack **v46;
  WebCore::AudioTrack *v47;
  WebCore::AudioTrack **v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  WebCore::AudioTrack **v55;
  uint64_t v56;
  WebCore::AudioTrack *v57;
  WebCore::AudioTrack *v58;
  WebCore::AudioTrack **v59;
  WebCore::AudioTrack *v60;
  WebCore::AudioTrack *v61;
  WebCore::AudioTrack *v62;
  WebCore::AudioTrack **v63;
  BOOL v65;
  uint64_t v66;
  WebCore::AudioTrack **v67;
  WebCore::AudioTrack **v68;
  _DWORD *v69;
  WebCore::AudioTrack *v70;
  uint64_t i;
  _QWORD *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t *v78;
  int64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  WebCore::AudioTrack **v83;
  WebCore::AudioTrack **v84;
  WTF::StringImpl *v85;
  WebCore::AudioTrack **v86;
  WebCore::AudioTrack *v87;
  WebCore::AudioTrack *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WebCore::AudioTrack *v92;
  uint64_t v93;
  uint64_t v94;
  WebCore::AudioTrack **v95;
  WebCore::AudioTrack *v96;
  int64_t v97;
  WebCore::AudioTrack **v98;
  WebCore::AudioTrack **v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WebCore::AudioTrack *v106;
  WebCore::AudioTrack *v107;
  WebCore::AudioTrack *v108;
  WebCore::AudioTrack *v109;
  uint64_t v110;
  unint64_t v111;
  WebCore::AudioTrack **v112;
  WebCore::AudioTrack *v113;
  uint64_t *v114;
  WebCore::AudioTrack *v115;
  WebCore::AudioTrack *v116;
  WTF::StringImpl *v117;
  int v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WebCore::AudioTrack **v125;
  WebCore::AudioTrack *v126;
  uint64_t *v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  int v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WebCore::AudioTrack **v133;
  WebCore::AudioTrack **v134;
  WebCore::AudioTrack **v135;
  WebCore::AudioTrack **v136;
  WebCore::AudioTrack *v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v141;
  WebCore::AudioTrack **v142;
  WebCore::AudioTrack **v143;
  WebCore::AudioTrack **v144;
  WebCore::AudioTrack **v145;
  WebCore::AudioTrack *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;

  v145 = (WebCore::AudioTrack **)result;
LABEL_2:
  v135 = a2 - 2;
  v136 = a2 - 1;
  v134 = a2 - 3;
  v8 = v145;
  v142 = a2;
  while (2)
  {
    v145 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *(a2 - 1), v8);
        if ((_DWORD)result)
        {
          v58 = *v8;
          *v8 = *(a2 - 1);
          *(a2 - 1) = v58;
        }
        return result;
      case 3:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v8, v8 + 1, v136, a3);
      case 4:
        v59 = v8 + 2;
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v8, v8 + 1, v8 + 2, a3);
        result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *(a2 - 1), v8 + 2);
        if ((_DWORD)result)
        {
          v60 = *v59;
          *v59 = *(a2 - 1);
          *(a2 - 1) = v60;
          result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *v59, v8 + 1);
          if ((_DWORD)result)
          {
            v62 = v8[1];
            v61 = v8[2];
            v8[1] = v61;
            v8[2] = v62;
            result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v61, v8);
            if ((_DWORD)result)
              *(int8x16_t *)v8 = vextq_s8(*(int8x16_t *)v8, *(int8x16_t *)v8, 8uLL);
          }
        }
        return result;
      case 5:
        return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *,0>(v8, v8 + 1, v8 + 2, v8 + 3, v136, a3);
      default:
        if (v9 <= 191)
        {
          v63 = v8 + 1;
          v65 = v8 == a2 || v63 == a2;
          if ((a5 & 1) == 0)
          {
            if (v65)
              return result;
            v122 = 0;
            v123 = 1;
            while (1)
            {
              v124 = v122;
              v122 = v123;
              v125 = v8;
              result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *v63, &v8[v124]);
              if ((_DWORD)result)
              {
                result = 0;
                v126 = *v63;
                *v63 = 0;
                do
                {
                  v127 = (uint64_t *)&v8[v124];
                  v128 = *v127;
                  *v127 = 0;
                  v127[1] = v128;
                  if (result)
                  {
                    if (*(_DWORD *)(result + 16) == 1)
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                    else
                      --*(_DWORD *)(result + 16);
                  }
                  if (v124 == -1)
                    goto LABEL_276;
                  WebCore::trackDisplayName((WebCore *)&v148, v126);
                  WebCore::trackDisplayName((WebCore *)&v147, v8[v124 - 1]);
                  v130 = WTF::Collator::collate();
                  v131 = v147;
                  v147 = 0;
                  if (v131)
                  {
                    if (*(_DWORD *)v131 == 2)
                      WTF::StringImpl::destroy(v131, v129);
                    else
                      *(_DWORD *)v131 -= 2;
                  }
                  v132 = v148;
                  v148 = 0;
                  if (v132)
                  {
                    if (*(_DWORD *)v132 == 2)
                      WTF::StringImpl::destroy(v132, v129);
                    else
                      *(_DWORD *)v132 -= 2;
                  }
                  result = *v127;
                  --v124;
                }
                while (v130 < 0);
                v125 = v8;
                v8[v124 + 1] = v126;
                if (result)
                {
                  if (*(_DWORD *)(result + 16) == 1)
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                  else
                    --*(_DWORD *)(result + 16);
                }
              }
              v123 = v122 + 1;
              v63 = &v125[v122 + 1];
              if (v63 == a2)
                return result;
            }
          }
          if (v65)
            return result;
          v66 = 0;
          v67 = v8;
LABEL_140:
          v68 = v67;
          v67 = v63;
          result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v68[1], v68);
          if (!(_DWORD)result)
            goto LABEL_163;
          v69 = 0;
          v70 = *v63;
          v143 = v63;
          *v63 = 0;
          for (i = v66; ; i -= 8)
          {
            v72 = (WebCore::AudioTrack **)((char *)v145 + i);
            v73 = *(uint64_t *)((char *)v145 + i);
            *v72 = 0;
            v72[1] = v73;
            if (!v69)
              goto LABEL_145;
            if (v69[4] != 1)
              break;
            (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 16))(v69);
            if (!i)
            {
LABEL_159:
              v78 = (uint64_t *)v145;
              goto LABEL_160;
            }
LABEL_146:
            WebCore::trackDisplayName((WebCore *)&v148, v70);
            WebCore::trackDisplayName((WebCore *)&v147, *(WebCore::AudioTrack **)((char *)v145 + i - 8));
            v75 = WTF::Collator::collate();
            v76 = v147;
            v147 = 0;
            if (v76)
            {
              if (*(_DWORD *)v76 == 2)
                WTF::StringImpl::destroy(v76, v74);
              else
                *(_DWORD *)v76 -= 2;
            }
            v77 = v148;
            v148 = 0;
            if (!v77)
              goto LABEL_152;
            if (*(_DWORD *)v77 != 2)
            {
              *(_DWORD *)v77 -= 2;
LABEL_152:
              if ((v75 & 0x80000000) == 0)
                goto LABEL_158;
              goto LABEL_153;
            }
            WTF::StringImpl::destroy(v77, v74);
            if ((v75 & 0x80000000) == 0)
            {
LABEL_158:
              v78 = (uint64_t *)((char *)v145 + i);
LABEL_160:
              v67 = v143;
              result = *v78;
              *v78 = (uint64_t)v70;
              if (result)
              {
                if (*(_DWORD *)(result + 16) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                else
                  --*(_DWORD *)(result + 16);
              }
LABEL_163:
              v63 = v67 + 1;
              v66 += 8;
              if (v67 + 1 == a2)
                return result;
              goto LABEL_140;
            }
LABEL_153:
            v69 = (_DWORD *)*v72;
          }
          --v69[4];
LABEL_145:
          if (!i)
            goto LABEL_159;
          goto LABEL_146;
        }
        if (!a4)
        {
          if (v8 == a2)
            return result;
          v79 = (unint64_t)(v10 - 2) >> 1;
          v80 = v79;
          do
          {
            v81 = v80;
            if (v79 >= v80)
            {
              v82 = (2 * v80) | 1;
              v83 = &v145[v82];
              if (2 * v80 + 2 < v10
                && WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *v83, v83 + 1))
              {
                ++v83;
                v82 = 2 * v81 + 2;
              }
              v84 = &v145[v81];
              a2 = v142;
              if ((WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *v83, v84) & 1) == 0)
              {
                v85 = *v84;
                *v84 = 0;
                v148 = v85;
                do
                {
                  v86 = v83;
                  v87 = *v83;
                  *v83 = 0;
                  v88 = *v84;
                  *v84 = v87;
                  if (v88)
                  {
                    if (*((_DWORD *)v88 + 4) == 1)
                      (*(void (**)(WebCore::AudioTrack *))(*(_QWORD *)v88 + 16))(v88);
                    else
                      --*((_DWORD *)v88 + 4);
                  }
                  if (v79 < v82)
                    break;
                  v89 = (2 * v82) | 1;
                  v83 = &v145[v89];
                  v90 = 2 * v82 + 2;
                  if (v90 < v10
                    && WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *v83, v83 + 1))
                  {
                    ++v83;
                    v89 = v90;
                  }
                  v84 = v86;
                  v82 = v89;
                  a2 = v142;
                }
                while (!WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *v83, &v148));
                v91 = v148;
                v148 = 0;
                v92 = *v86;
                *v86 = v91;
                if (v92)
                {
                  if (*((_DWORD *)v92 + 4) == 1)
                    (*(void (**)(WebCore::AudioTrack *))(*(_QWORD *)v92 + 16))(v92);
                  else
                    --*((_DWORD *)v92 + 4);
                }
                if (v148)
                {
                  if (*((_DWORD *)v148 + 4) == 1)
                    (*(void (**)(void))(*(_QWORD *)v148 + 16))();
                  else
                    --*((_DWORD *)v148 + 4);
                }
              }
            }
            v80 = v81 - 1;
          }
          while (v81);
          v93 = (unint64_t)v9 >> 3;
          while (1)
          {
            v94 = 0;
            v95 = v145;
            v96 = *v145;
            *v145 = 0;
            v97 = (unint64_t)(v93 - 2) >> 1;
            v98 = v145;
            v141 = v93;
            v144 = a2;
            v137 = v96;
            v139 = v97;
            do
            {
              v99 = v98;
              v98 += v94 + 1;
              v100 = 2 * v94;
              v94 = (2 * v94) | 1;
              v101 = v100 + 2;
              if (v100 + 2 < v93)
              {
                WebCore::trackDisplayName((WebCore *)&v148, *v98);
                WebCore::trackDisplayName((WebCore *)&v147, v98[1]);
                v103 = WTF::Collator::collate();
                v104 = v147;
                v147 = 0;
                v93 = v141;
                a2 = v144;
                if (v104)
                {
                  if (*(_DWORD *)v104 == 2)
                    WTF::StringImpl::destroy(v104, v102);
                  else
                    *(_DWORD *)v104 -= 2;
                }
                v105 = v148;
                v148 = 0;
                if (v105)
                {
                  if (*(_DWORD *)v105 == 2)
                    WTF::StringImpl::destroy(v105, v102);
                  else
                    *(_DWORD *)v105 -= 2;
                }
                if (v103 < 0)
                {
                  ++v98;
                  v94 = v101;
                }
                v95 = v145;
                v97 = v139;
              }
              v106 = *v98;
              *v98 = 0;
              v107 = *v99;
              *v99 = v106;
              if (v107)
              {
                if (*((_DWORD *)v107 + 4) == 1)
                  (*(void (**)(WebCore::AudioTrack *))(*(_QWORD *)v107 + 16))(v107);
                else
                  --*((_DWORD *)v107 + 4);
              }
            }
            while (v94 <= v97);
            if (v98 != --a2)
              break;
            result = (uint64_t)*v98;
            *v98 = v137;
            if (result)
            {
LABEL_242:
              if (*(_DWORD *)(result + 16) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
              else
                --*(_DWORD *)(result + 16);
            }
LABEL_244:
            if (v93-- <= 2)
              return result;
          }
          v108 = *a2;
          *a2 = 0;
          v109 = *v98;
          *v98 = v108;
          if (v109)
          {
            if (*((_DWORD *)v109 + 4) == 1)
              (*(void (**)(WebCore::AudioTrack *))(*(_QWORD *)v109 + 16))(v109);
            else
              --*((_DWORD *)v109 + 4);
          }
          result = (uint64_t)*a2;
          *a2 = v137;
          if (result)
          {
            if (*(_DWORD *)(result + 16) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            else
              --*(_DWORD *)(result + 16);
          }
          v110 = (char *)(v98 + 1) - (char *)v95;
          if (v110 < 9)
            goto LABEL_244;
          v111 = (((unint64_t)v110 >> 3) - 2) >> 1;
          v112 = &v95[v111];
          result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *v112, v98);
          if (!(_DWORD)result)
            goto LABEL_244;
          v113 = *v98;
          *v98 = 0;
          while (1)
          {
            v114 = (uint64_t *)v112;
            v115 = *v112;
            *v112 = 0;
            v116 = *v98;
            *v98 = v115;
            if (v116)
            {
              if (*((_DWORD *)v116 + 4) == 1)
              {
                (*(void (**)(WebCore::AudioTrack *))(*(_QWORD *)v116 + 16))(v116);
                if (!v111)
                  goto LABEL_241;
                goto LABEL_227;
              }
              --*((_DWORD *)v116 + 4);
            }
            if (!v111)
              goto LABEL_241;
LABEL_227:
            v111 = (v111 - 1) >> 1;
            v112 = &v145[v111];
            WebCore::trackDisplayName((WebCore *)&v148, *v112);
            WebCore::trackDisplayName((WebCore *)&v147, v113);
            v118 = WTF::Collator::collate();
            v119 = v147;
            v147 = 0;
            if (v119)
            {
              if (*(_DWORD *)v119 == 2)
                WTF::StringImpl::destroy(v119, v117);
              else
                *(_DWORD *)v119 -= 2;
            }
            v120 = v148;
            v148 = 0;
            if (v120)
            {
              if (*(_DWORD *)v120 == 2)
                WTF::StringImpl::destroy(v120, v117);
              else
                *(_DWORD *)v120 -= 2;
            }
            v98 = (WebCore::AudioTrack **)v114;
            if ((v118 & 0x80000000) == 0)
            {
LABEL_241:
              result = *v114;
              *v114 = (uint64_t)v113;
              v93 = v141;
              if (result)
                goto LABEL_242;
              goto LABEL_244;
            }
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8;
        v13 = &v8[v11];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(&v8[v11], v8, v136, a3);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v8, &v8[v11], v136, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v8 + 1, v13 - 1, v135, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v8 + 2, &v8[v11 + 1], v134, a3);
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v13 - 1, v13, &v8[v11 + 1], a3);
          v14 = *v8;
          *v8 = *v13;
          *v13 = v14;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *(v8 - 1), v8);
          if ((result & 1) == 0)
          {
            v44 = *v8;
            *v8 = 0;
            result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v44, v136);
            if ((result & 1) != 0)
            {
              while (++v8 != a2)
              {
                result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v44, v8);
                if ((result & 1) != 0)
                  goto LABEL_83;
              }
LABEL_276:
              __break(1u);
              return result;
            }
            v45 = v8 + 1;
            do
            {
              v8 = v45;
              if (v45 >= a2)
                break;
              result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v44, v45);
              v45 = v8 + 1;
            }
            while (!(_DWORD)result);
LABEL_83:
            v46 = a2;
            if (v8 < a2)
            {
              v46 = a2;
              while (v46 != v145)
              {
                result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v44, --v46);
                if ((result & 1) == 0)
                  goto LABEL_87;
              }
              goto LABEL_276;
            }
LABEL_87:
            if (v8 < v46)
            {
              v47 = *v8;
              *v8 = *v46;
              v48 = v8 + 1;
              *v46 = v47;
              do
              {
                if (v48 == a2)
                  goto LABEL_276;
                WebCore::trackDisplayName((WebCore *)&v148, v44);
                WebCore::trackDisplayName((WebCore *)&v147, *v48);
                v50 = WTF::Collator::collate();
                v51 = v147;
                v147 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, v49);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                result = (uint64_t)v148;
                v148 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v49);
                  else
                    *(_DWORD *)result -= 2;
                }
                ++v48;
              }
              while ((v50 & 0x80000000) == 0);
              v8 = v48 - 1;
              while (v46 != v145)
              {
                WebCore::trackDisplayName((WebCore *)&v148, v44);
                WebCore::trackDisplayName((WebCore *)&v147, *(v46 - 1));
                v53 = WTF::Collator::collate();
                v54 = v147;
                v147 = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, v52);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                result = (uint64_t)v148;
                v148 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v52);
                  else
                    *(_DWORD *)result -= 2;
                }
                --v46;
                if ((v53 & 0x80000000) == 0)
                  goto LABEL_87;
              }
              goto LABEL_276;
            }
            v55 = v8 - 1;
            if (v8 - 1 != v145)
            {
              v56 = (uint64_t)*v55;
              *v55 = 0;
              v57 = *v145;
              *v145 = (WebCore::AudioTrack *)v56;
              if (v57)
              {
                if (*((_DWORD *)v57 + 4) == 1)
                  (*(void (**)(WebCore::AudioTrack *))(*(_QWORD *)v57 + 16))(v57);
                else
                  --*((_DWORD *)v57 + 4);
              }
            }
            a5 = 0;
            result = (uint64_t)*v55;
            *v55 = v44;
            if (result)
            {
              if (*(_DWORD *)(result + 16) == 1)
              {
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                a5 = 0;
              }
              else
              {
                a5 = 0;
                --*(_DWORD *)(result + 16);
              }
            }
            continue;
          }
        }
        v15 = 0;
        v16 = *v8;
        *v145 = 0;
        v146 = v16;
        do
        {
          v17 = &v145[v15 + 1];
          if (v17 == a2)
            goto LABEL_276;
          WebCore::trackDisplayName((WebCore *)&v148, *v17);
          WebCore::trackDisplayName((WebCore *)&v147, v16);
          v19 = WTF::Collator::collate();
          v20 = v147;
          v147 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v18);
            else
              *(_DWORD *)v20 -= 2;
          }
          result = (uint64_t)v148;
          v148 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
            else
              *(_DWORD *)result -= 2;
          }
          ++v15;
        }
        while (v19 < 0);
        v138 = a4;
        v21 = &v145[v15];
        v22 = a2;
        if (v15 != 1)
        {
          while (v22 != v145)
          {
            v23 = *--v22;
            result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v23, &v146);
            if ((_DWORD)result)
              goto LABEL_30;
          }
          goto LABEL_276;
        }
        v22 = a2;
        do
        {
          if (v21 >= v22)
            break;
          v24 = *--v22;
          result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v24, &v146);
        }
        while ((result & 1) == 0);
LABEL_30:
        if (v21 >= v22)
        {
          v37 = v21 - 1;
          goto LABEL_58;
        }
        v133 = &v145[v15];
        v25 = &v145[v15];
        v26 = v22;
        while (2)
        {
          v27 = *v25;
          *v25 = *v26;
          *v26 = v27;
          v28 = v146;
          v29 = v25 + 1;
          do
          {
            if (v29 == a2)
              goto LABEL_276;
            WebCore::trackDisplayName((WebCore *)&v148, *v29);
            WebCore::trackDisplayName((WebCore *)&v147, v28);
            v31 = WTF::Collator::collate();
            v32 = v147;
            v147 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v30);
              else
                *(_DWORD *)v32 -= 2;
            }
            result = (uint64_t)v148;
            v148 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v30);
              else
                *(_DWORD *)result -= 2;
            }
            ++v29;
          }
          while (v31 < 0);
          v25 = v29 - 1;
          while (2)
          {
            while (2)
            {
              if (v26 == v145)
                goto LABEL_276;
              v33 = *--v26;
              WebCore::trackDisplayName((WebCore *)&v148, v33);
              WebCore::trackDisplayName((WebCore *)&v147, v28);
              v35 = WTF::Collator::collate();
              v36 = v147;
              v147 = 0;
              a2 = v142;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, v34);
                else
                  *(_DWORD *)v36 -= 2;
              }
              result = (uint64_t)v148;
              v148 = 0;
              if (!result)
              {
LABEL_51:
                if (v35 < 0)
                  goto LABEL_55;
                continue;
              }
              break;
            }
            if (*(_DWORD *)result != 2)
            {
              *(_DWORD *)result -= 2;
              goto LABEL_51;
            }
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v34);
            if ((v35 & 0x80000000) == 0)
              continue;
            break;
          }
LABEL_55:
          if (v25 < v26)
            continue;
          break;
        }
        v37 = v29 - 2;
        v12 = v145;
        v21 = v133;
LABEL_58:
        if (v37 != v12)
        {
          v38 = *v37;
          *v37 = 0;
          v39 = *v12;
          *v12 = v38;
          if (v39)
          {
            if (*((_DWORD *)v39 + 4) == 1)
              (*(void (**)(WebCore::AudioTrack *))(*(_QWORD *)v39 + 16))(v39);
            else
              --*((_DWORD *)v39 + 4);
          }
        }
        v40 = v146;
        v146 = 0;
        v41 = *v37;
        *v37 = v40;
        if (v41)
        {
          if (*((_DWORD *)v41 + 4) == 1)
            (*(void (**)(WebCore::AudioTrack *))(*(_QWORD *)v41 + 16))(v41);
          else
            --*((_DWORD *)v41 + 4);
        }
        if (v146)
        {
          if (*((_DWORD *)v146 + 4) == 1)
            (*(void (**)(void))(*(_QWORD *)v146 + 16))();
          else
            --*((_DWORD *)v146 + 4);
        }
        v42 = v21 >= v22;
        a4 = v138;
        if (!v42)
        {
LABEL_72:
          result = std::__introsort<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *,false>(v12, v37, a3, v138, a5 & 1);
          a5 = 0;
          v8 = v37 + 1;
          continue;
        }
        v43 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v12, v37, a3);
        v8 = v37 + 1;
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(v37 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v43)
            continue;
          goto LABEL_72;
        }
        a2 = v37;
        if (!v43)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(uint64_t a1, WebCore::AudioTrack *a2, WebCore::AudioTrack **a3)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  WebCore::trackDisplayName((WebCore *)&v10, a2);
  WebCore::trackDisplayName((WebCore *)&v9, *a3);
  v5 = WTF::Collator::collate();
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v5 >> 31;
}

uint64_t std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *,0>(WebCore::AudioTrack **a1, WebCore::AudioTrack **a2, WebCore::AudioTrack **a3, WebCore::AudioTrack **a4, WebCore::AudioTrack **a5, uint64_t *a6)
{
  WebCore::AudioTrack *v12;
  WebCore::AudioTrack *v13;
  WebCore::AudioTrack *v14;
  uint64_t result;
  WebCore::AudioTrack *v16;
  WebCore::AudioTrack *v17;
  WebCore::AudioTrack *v18;
  WebCore::AudioTrack *v19;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(a1, a2, a3, a6);
  if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, *a4, a3))
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, *a3, a2))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, *a2, a1))
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, *a5, a4);
  if ((_DWORD)result)
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, *a4, a3);
    if ((_DWORD)result)
    {
      v17 = *a3;
      *a3 = *a4;
      *a4 = v17;
      result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, *a3, a2);
      if ((_DWORD)result)
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a6, *a2, a1);
        if ((_DWORD)result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(WebCore::AudioTrack **a1, WebCore::AudioTrack **a2, WebCore::AudioTrack **a3, uint64_t *a4)
{
  char v8;
  uint64_t result;
  WebCore::AudioTrack *v10;
  WebCore::AudioTrack *v11;
  WebCore::AudioTrack *v12;

  v8 = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a4, *a2, a1);
  result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a4, *a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a4, *a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *a2;
      *a2 = *a3;
    }
    *a3 = v10;
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a4, *a2, a1);
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(WebCore::AudioTrack **a1, WebCore::AudioTrack **a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  WebCore::AudioTrack *v8;
  WebCore::AudioTrack **v9;
  WebCore::AudioTrack **v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  WebCore::AudioTrack *v14;
  uint64_t i;
  char *v16;
  uint64_t v17;
  WebCore::AudioTrack **v18;
  WebCore::AudioTrack *v19;
  WebCore::AudioTrack **v20;
  WebCore::AudioTrack *v21;
  WebCore::AudioTrack *v22;
  WebCore::AudioTrack *v23;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *(a2 - 1), a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      v20 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(a1, a1 + 1, a1 + 2, a3);
      if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *(a2 - 1), a1 + 2))
      {
        v21 = *v20;
        *v20 = *(a2 - 1);
        *(a2 - 1) = v21;
        if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *v20, a1 + 1))
        {
          v23 = a1[1];
          v22 = a1[2];
          a1[1] = v22;
          a1[2] = v23;
          if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v22, a1))*(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0 &,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> *>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, *v10, v9))
    {
      v13 = 0;
      v14 = *v10;
      *v10 = 0;
      for (i = v11; ; i -= 8)
      {
        v16 = (char *)a1 + i;
        v17 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v16 + 2) = 0;
        *((_QWORD *)v16 + 3) = v17;
        if (v13)
        {
          if (v13[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
          else
            --v13[4];
        }
        if (i == -16)
        {
          v18 = a1;
          goto LABEL_17;
        }
        if ((WebCore::CaptionUserPreferences::sortedTrackListForMenu(WebCore::AudioTrackList *)::$_0::operator()<WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>(*a3, v14, (WebCore::AudioTrack **)((char *)a1 + i + 8)) & 1) == 0)break;
        v13 = (_DWORD *)*((_QWORD *)v16 + 2);
      }
      v18 = (WebCore::AudioTrack **)((char *)a1 + i + 16);
LABEL_17:
      v19 = *v18;
      *v18 = v14;
      if (v19)
      {
        if (*((_DWORD *)v19 + 4) == 1)
          (*(void (**)(WebCore::AudioTrack *))(*(_QWORD *)v19 + 16))(v19);
        else
          --*((_DWORD *)v19 + 4);
      }
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::AutoscrollController::*&)(void),WebCore::AutoscrollController*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::CaptionUserPreferences::*&)(void),WebCore::CaptionUserPreferences*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WebCore::Crypto *WebCore::Crypto::Crypto(WebCore::Crypto *this, WebCore::ScriptExecutionContext *a2)
{
  WebCore::SubtleCrypto *v4;

  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, a2);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33FE000;
  v4 = (WebCore::SubtleCrypto *)WTF::fastMalloc((WTF *)0x30);
  *((_QWORD *)this + 3) = WebCore::SubtleCrypto::SubtleCrypto(v4, a2);
  return this;
}

void WebCore::Crypto::~Crypto(WebCore::Crypto *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E33FE000;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::Crypto::~Crypto(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::Crypto::getRandomValues(JSC::ArrayBufferView *a1@<X1>, uint64_t a2@<X8>)
{
  int v5;
  void *v6;
  size_t v7;
  char v8;

  v5 = *((unsigned __int8 *)a1 + 4);
  if ((v5 - 1) >= 7 && (v5 - 10) >= 2)
  {
    v8 = 13;
LABEL_8:
    *(_BYTE *)a2 = v8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    return;
  }
  if (JSC::ArrayBufferView::byteLength(a1) > 0x10000)
  {
    v8 = 18;
    goto LABEL_8;
  }
  v6 = (void *)JSC::ArrayBufferView::baseAddress(*((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4));
  v7 = JSC::ArrayBufferView::byteLength(a1);
  if (CCRandomGenerateBytes(v6, v7))
  {
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
}

unint64_t JSC::ArrayBufferView::byteLength(JSC::ArrayBufferView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v3 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v2 & 0x3FFFFFFFFLL) + v3))
    return 0;
  v4 = *((_BYTE *)this + 6);
  if ((v4 & 3) == 0)
    return *((_QWORD *)this + 2);
  if (*(_BYTE *)(v1 + 64) && (v11 = *(_QWORD *)(v1 + 32)) != 0)
  {
    v6 = atomic_load((unint64_t *)(v11 + 32));
    v4 = *((_BYTE *)this + 6);
  }
  else
  {
    v6 = *(_QWORD *)(v1 + 48);
  }
  v7 = *((_QWORD *)this + 1);
  if ((v4 & 4) == 0)
  {
    v8 = *((_QWORD *)this + 2) + v7 <= v6 && v6 >= v7;
    if (v8)
      return 0;
    else
      return *((_QWORD *)this + 2);
  }
  v8 = v6 >= v7;
  v9 = v6 - v7;
  if (v8)
    return 0;
  if ((*((_BYTE *)this + 4) - 4) > 7u)
    LOBYTE(v10) = 0;
  else
    v10 = qword_1969F54F8[(char)(*((_BYTE *)this + 4) - 4)];
  return (-1 << v10) & v9;
}

uint64_t JSC::ArrayBufferView::baseAddress(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (!a2)
    return 0;
  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v3 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
  {
    if ((v2 & 0x3FFFFFFFFLL) + v3)
      v4 = this == 0;
    else
      v4 = 1;
    if (!v4)
      return (this & 0x3FFFFFFFFLL) + v3;
    return 0;
  }
  return this;
}

unsigned int *WebCore::DOMSelection::create@<X0>(WebCore::DOMSelection *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  unsigned int *result;
  unsigned int v7;

  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (result)
  {
    do
      v7 = __ldaxr(result);
    while (__stlxr(v7 + 1, result));
  }
  *(_QWORD *)(v5 + 8) = result;
  *a2 = v5;
  return result;
}

uint64_t WebCore::DOMSelection::range@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::VisibleSelection *v11;
  void *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  unsigned int v15;
  unsigned int v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  int v19;
  WebCore::Node *v20;
  int v21;
  char v22;

  v3 = *(_QWORD *)(this + 8);
  if (!v3)
    goto LABEL_12;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    goto LABEL_12;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_12;
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F76D64);
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
LABEL_12:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return this;
  }
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = (WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v8 + 296) + 3064) + 56);
  if ((*(_QWORD *)(*(_QWORD *)(v8 + 136) + 680) & 0x800000000000000) != 0)
    this = WebCore::VisibleSelection::range(v11, (uint64_t)&v18);
  else
    this = (uint64_t)WebCore::VisibleSelection::firstRange(v11, &v18);
  if (!v22)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    goto LABEL_24;
  }
  this = (uint64_t)v18;
  if ((*((_BYTE *)v18 + 22) & 0x10) != 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    v14 = v20;
    v20 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v14, v12);
          this = (uint64_t)v18;
          v18 = 0;
          if (!this)
            goto LABEL_24;
LABEL_22:
          if (*(_DWORD *)(this + 24) == 2)
          {
            if ((*(_WORD *)(this + 30) & 0x400) == 0)
              this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v12);
          }
          else
          {
            *(_DWORD *)(this + 24) -= 2;
          }
          goto LABEL_24;
        }
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    v18 = 0;
    goto LABEL_22;
  }
  *(_QWORD *)a2 = v18;
  *(_DWORD *)(a2 + 8) = v19;
  v13 = v20;
  v18 = 0;
  v20 = 0;
  *(_QWORD *)(a2 + 16) = v13;
  *(_DWORD *)(a2 + 24) = v21;
  *(_BYTE *)(a2 + 32) = 1;
  do
  {
LABEL_24:
    v15 = __ldaxr(v9);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v9));
  if (!v16)
  {
    atomic_store(1u, v9);
    v17 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v17 = off_1E31FE290;
    *((_QWORD *)v17 + 1) = v9;
    v18 = v17;
    WTF::ensureOnMainThread();
    this = (uint64_t)v18;
    v18 = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::DOMSelection::anchorPosition@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(this + 8);
  if (!v2)
    goto LABEL_18;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    goto LABEL_18;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_18;
  if (*(_BYTE *)(v5 + 178))
  {
    this = 105;
    __break(0xC471u);
    return this;
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 136) + 680);
    v11 = *(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064);
    if ((v10 & 0x800000000000000) != 0)
    {
      v12 = *(_QWORD *)(v11 + 56);
      if (v12)
        *(_DWORD *)(v12 + 24) += 2;
      *(_QWORD *)a2 = v12;
      v13 = *(_DWORD *)(v11 + 64);
      *(_BYTE *)(a2 + 12) = *(_BYTE *)(v11 + 68);
      *(_DWORD *)(a2 + 8) = v13;
    }
    else
    {
      v17 = *(_BYTE *)(v11 + 154);
      v18 = v11 + 120;
      v19 = v11 + 136;
      if ((v17 & 1) != 0)
        v20 = v18;
      else
        v20 = v19;
      this = WebCore::Position::parentAnchoredEquivalent(v20, a2);
    }
    do
    {
      v14 = __ldaxr(v8);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v8));
    if (!v15)
    {
      atomic_store(1u, v8);
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E31FE290;
      v16[1] = v8;
      v21 = (uint64_t)v16;
      WTF::ensureOnMainThread();
      this = v21;
      if (v21)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  else
  {
LABEL_18:
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) &= 0xF0u;
  }
  return this;
}

uint64_t WebCore::DOMSelection::focusPosition@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(this + 8);
  if (!v2)
    goto LABEL_18;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    goto LABEL_18;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_18;
  if (*(_BYTE *)(v5 + 178))
  {
    this = 105;
    __break(0xC471u);
    return this;
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 136) + 680);
    v11 = *(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064);
    if ((v10 & 0x800000000000000) != 0)
    {
      v12 = *(_QWORD *)(v11 + 72);
      if (v12)
        *(_DWORD *)(v12 + 24) += 2;
      *(_QWORD *)a2 = v12;
      v13 = *(_DWORD *)(v11 + 80);
      *(_BYTE *)(a2 + 12) = *(_BYTE *)(v11 + 84);
      *(_DWORD *)(a2 + 8) = v13;
    }
    else
    {
      v17 = *(_BYTE *)(v11 + 154);
      v18 = v11 + 136;
      v19 = v11 + 120;
      if ((v17 & 1) != 0)
        v20 = v18;
      else
        v20 = v19;
      this = WebCore::Position::parentAnchoredEquivalent(v20, a2);
    }
    do
    {
      v14 = __ldaxr(v8);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v8));
    if (!v15)
    {
      atomic_store(1u, v8);
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E31FE290;
      v16[1] = v8;
      v21 = (uint64_t)v16;
      WTF::ensureOnMainThread();
      this = v21;
      if (v21)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  else
  {
LABEL_18:
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) &= 0xF0u;
  }
  return this;
}

uint64_t WebCore::DOMSelection::basePosition@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(this + 8);
  if (!v2)
    goto LABEL_12;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_12;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_12;
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F77148);
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 136) + 680);
    v11 = *(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064);
    if ((v10 & 0x800000000000000) != 0)
    {
      v12 = *(_QWORD *)(v11 + 56);
      if (v12)
        *(_DWORD *)(v12 + 24) += 2;
      *(_QWORD *)a2 = v12;
      v13 = *(_DWORD *)(v11 + 64);
      *(_BYTE *)(a2 + 12) = *(_BYTE *)(v11 + 68);
      *(_DWORD *)(a2 + 8) = v13;
    }
    else
    {
      this = WebCore::Position::parentAnchoredEquivalent(v11 + 88, a2);
    }
    do
    {
      v14 = __ldaxr(v8);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v8));
    if (!v15)
    {
      atomic_store(1u, v8);
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E31FE290;
      v16[1] = v8;
      v17 = (uint64_t)v16;
      WTF::ensureOnMainThread();
      this = v17;
      if (v17)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  else
  {
LABEL_12:
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) &= 0xF0u;
  }
  return this;
}

uint64_t WebCore::DOMSelection::extentPosition@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(this + 8);
  if (!v2)
    goto LABEL_12;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_12;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_12;
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F7728CLL);
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 136) + 680);
    v11 = *(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064);
    if ((v10 & 0x800000000000000) != 0)
    {
      v12 = *(_QWORD *)(v11 + 72);
      if (v12)
        *(_DWORD *)(v12 + 24) += 2;
      *(_QWORD *)a2 = v12;
      v13 = *(_DWORD *)(v11 + 80);
      *(_BYTE *)(a2 + 12) = *(_BYTE *)(v11 + 84);
      *(_DWORD *)(a2 + 8) = v13;
    }
    else
    {
      this = WebCore::Position::parentAnchoredEquivalent(v11 + 104, a2);
    }
    do
    {
      v14 = __ldaxr(v8);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v8));
    if (!v15)
    {
      atomic_store(1u, v8);
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E31FE290;
      v16[1] = v8;
      v17 = (uint64_t)v16;
      WTF::ensureOnMainThread();
      this = v17;
      if (v17)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  else
  {
LABEL_12:
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) &= 0xF0u;
  }
  return this;
}

unsigned int *WebCore::DOMSelection::shadowAdjustedNode@<X0>(unsigned int *this@<X0>, const WebCore::Position *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *((_BYTE *)a2 + 12) & 7;
    v6 = 1;
    if (v5 > 4)
    {
      v4 = 0;
    }
    else if (((1 << v5) & 0x19) != 0 || (v4 = *(_QWORD *)(v4 + 32)) != 0)
    {
      v6 = 0;
      *(_DWORD *)(v4 + 24) += 2;
    }
    else
    {
      v6 = 1;
    }
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 72) + 8);
    if (*(_BYTE *)(v7 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195F774D0);
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 240) + 8);
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    this = *(unsigned int **)(v8 + 296);
    if (this)
      this[6] += 2;
    if ((v6 & 1) != 0)
    {
LABEL_44:
      v14 = 0;
      v12 = 1;
    }
    else
    {
      v11 = v4;
      v12 = 1;
      while (1)
      {
        v13 = *(unsigned int **)(v11 + 40);
        if (v13 == this + 24)
          break;
        if ((*(_BYTE *)(v11 + 22) & 0x10) == 0)
          goto LABEL_44;
        v18 = *(_QWORD *)v13;
        v19 = *(_WORD *)(*(_QWORD *)v13 + 28) & 0x80;
        if (!v18 || v19 == 0)
          goto LABEL_44;
        v21 = *(_QWORD *)(v18 + 200);
        if (!v21)
          goto LABEL_44;
        v14 = 0;
        v11 = *(_QWORD *)(v21 + 8);
        if (!v11)
          goto LABEL_14;
      }
      v12 = 0;
      *(_DWORD *)(v11 + 24) += 2;
      v14 = v11;
    }
LABEL_14:
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
      else
      {
        this[6] -= 2;
      }
    }
    do
    {
      v15 = __ldaxr(v9);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v9));
    if (!v16)
    {
      atomic_store(1u, v9);
      v22 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v22 = off_1E31FE290;
      *((_QWORD *)v22 + 1) = v9;
      v23 = v22;
      WTF::ensureOnMainThread();
      this = v23;
      if (v23)
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
    }
    if ((v12 & 1) != 0)
    {
      *a3 = 0;
    }
    else
    {
      if (v4 == v14)
      {
        v17 = v4;
        v4 = 0;
      }
      else
      {
        v17 = *(_QWORD *)(v14 + 32);
        if (v17)
          *(_DWORD *)(v17 + 24) += 2;
      }
      *a3 = v17;
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
    }
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

uint64_t WebCore::DOMSelection::shadowAdjustedOffset(WebCore::DOMSelection *this, const WebCore::Position *a2)
{
  uint64_t v2;
  unsigned int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t i;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v2 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v4 = *((_BYTE *)a2 + 12) & 7;
  v5 = 1;
  if (v4 > 4)
  {
    v2 = 0;
  }
  else if (((1 << v4) & 0x19) != 0 || (v2 = *(_QWORD *)(v2 + 32)) != 0)
  {
    v5 = 0;
    *(_DWORD *)(v2 + 24) += 2;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 72) + 8);
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F777A0);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 240) + 8);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v7 + 296);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  if ((v5 & 1) != 0)
  {
LABEL_58:
    v14 = 0;
    v12 = 1;
  }
  else
  {
    v11 = v2;
    v12 = 1;
    while (1)
    {
      v13 = *(uint64_t **)(v11 + 40);
      if (v13 == (uint64_t *)(v10 + 96))
        break;
      if ((*(_BYTE *)(v11 + 22) & 0x10) == 0)
        goto LABEL_58;
      v25 = *v13;
      v26 = *(_WORD *)(*v13 + 28) & 0x80;
      if (!v25 || v26 == 0)
        goto LABEL_58;
      v28 = *(_QWORD *)(v25 + 200);
      if (!v28)
        goto LABEL_58;
      v14 = 0;
      v11 = *(_QWORD *)(v28 + 8);
      if (!v11)
        goto LABEL_14;
    }
    v12 = 0;
    *(_DWORD *)(v11 + 24) += 2;
    v14 = v11;
  }
LABEL_14:
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  do
  {
    v15 = __ldaxr(v8);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v8));
  if (!v16)
  {
    atomic_store(1u, v8);
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v29 = off_1E31FE290;
    v29[1] = v8;
    v33 = v29;
    WTF::ensureOnMainThread();
    if (v33)
      (*(void (**)(_QWORD *))(*v33 + 8))(v33);
  }
  if ((v12 & 1) == 0)
  {
    if (v2 == v14)
    {
      v17 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v18 = *((_BYTE *)a2 + 12) & 7;
        if ((*((_BYTE *)a2 + 12) & 7) == 0)
        {
          i = *((unsigned int *)a2 + 2);
          goto LABEL_24;
        }
        switch(v18)
        {
          case 4:
            v21 = *(_WORD *)(v17 + 28);
            if ((v21 & 1) == 0)
            {
              if ((v21 & 4) == 0)
                break;
              v22 = *(_QWORD *)(v17 + 80);
              if (!v22)
                break;
              LODWORD(i) = 0;
              do
              {
                i = (i + 1);
                v22 = *(_QWORD *)(v22 + 56);
              }
              while (v22);
LABEL_24:
              if (*(_DWORD *)(v14 + 24) == 2)
              {
                if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
              }
              else
              {
                *(_DWORD *)(v14 + 24) -= 2;
              }
              goto LABEL_26;
            }
            v23 = *(_QWORD *)(v17 + 80);
            if (v23)
            {
              i = *(unsigned int *)(v23 + 4);
              goto LABEL_24;
            }
            break;
          case 1:
            v32 = *(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFLL;
            if (v32)
            {
              LODWORD(i) = 0;
              do
              {
                i = (i + 1);
                v32 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFLL;
              }
              while (v32);
              goto LABEL_24;
            }
            break;
          case 2:
            v30 = *(_QWORD *)(v17 + 48);
            for (i = 1; ; i = (i + 1))
            {
              v31 = v30 & 0xFFFFFFFFFFFFLL;
              if (!v31)
                break;
              v30 = *(_QWORD *)(v31 + 48);
            }
            goto LABEL_24;
        }
      }
    }
    else
    {
      v24 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
      if (v24)
      {
        LODWORD(i) = 0;
        do
        {
          i = (i + 1);
          v24 = *(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFLL;
        }
        while (v24);
        goto LABEL_24;
      }
    }
    i = 0;
    goto LABEL_24;
  }
  i = 0;
LABEL_26:
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return i;
}

BOOL WebCore::DOMSelection::isCollapsed(WebCore::DOMSelection *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  WebCore::Node *v10;
  _BOOL8 v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  int v19;
  WebCore::Node *v20;
  int v21;
  char v22;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return 1;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 1;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F7798CLL);
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return 1;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 1;
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebCore::DOMSelection::range((uint64_t)this, (uint64_t)&v18);
  if (v22)
  {
    v10 = v18;
    v12 = v18 == v20 && v19 == v21;
    if (v20)
    {
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20, v9);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v9);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
  }
  else
  {
    v12 = 1;
  }
  do
  {
    v13 = __ldaxr(v7);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v7));
  if (!v14)
  {
    atomic_store(1u, v7);
    v16 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v16 = off_1E31FE290;
    *((_QWORD *)v16 + 1) = v7;
    v18 = v16;
    WTF::ensureOnMainThread();
    v17 = v18;
    v18 = 0;
    if (v17)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v17 + 8))(v17);
  }
  return v12;
}

uint64_t WebCore::DOMSelection::type(WebCore::DOMSelection *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  WebCore::Node *v10;
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  char v17;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F77BACLL);
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if ((*(_QWORD *)(*(_QWORD *)(v6 + 136) + 680) & 0x800000000000000) != 0)
  {
    WebCore::VisibleSelection::range((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v6 + 296) + 3064) + 56), (uint64_t)&v15);
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v17)
    {
      v10 = v16;
      v16 = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10, v9);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
      result = (uint64_t)v15;
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
    }
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  do
  {
    v12 = __ldaxr(v7);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v7));
  if (!v13)
  {
    atomic_store(1u, v7);
    v14 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v14 = off_1E31FE290;
    *((_QWORD *)v14 + 1) = v7;
    v15 = v14;
    WTF::ensureOnMainThread();
    result = (uint64_t)v15;
    v15 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::DOMSelection::direction@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)(this + 8);
  if (!v3)
    goto LABEL_20;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_20;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    goto LABEL_20;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_20;
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F77D64);
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 296) + 3064);
    if ((*(_BYTE *)(v11 + 154) & 2) != 0 && *(_BYTE *)(v11 + 153))
    {
      this = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v12 = v17;
    }
    else
    {
      v12 = WebCore::noneAtomData;
      if (WebCore::noneAtomData)
        *(_DWORD *)WebCore::noneAtomData += 2;
    }
    *a2 = v12;
    do
    {
      v13 = __ldaxr(v9);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v9));
    if (!v14)
    {
      atomic_store(1u, v9);
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v15 = off_1E31FE290;
      v15[1] = v9;
      v18 = (uint64_t)v15;
      WTF::ensureOnMainThread();
      this = v18;
      if (v18)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  else
  {
LABEL_20:
    v16 = WebCore::noneAtomData;
    if (WebCore::noneAtomData)
      *(_DWORD *)WebCore::noneAtomData += 2;
    *a2 = v16;
  }
  return this;
}

uint64_t WebCore::DOMSelection::rangeCount(WebCore::DOMSelection *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::Node *v9;
  unsigned int v10;
  unsigned int v11;
  WebCore::Node *v13;
  WebCore::Node *v14;
  void *v15;
  WebCore::Node *v16;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F77E88);
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if ((*(_QWORD *)(*(_QWORD *)(v6 + 136) + 680) & 0x800000000000000) != 0)
    {
      WebCore::FrameSelection::associatedLiveRange(*(WebCore::Node **)(*(_QWORD *)(v6 + 296) + 3064), &v16);
      v9 = v16;
      v16 = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 2) == 1)
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v9 + 8))(v9);
        else
          --*((_DWORD *)v9 + 2);
        v6 = 1;
      }
      else
      {
        WebCore::selectionShadowAncestor((unsigned int *)&v16, *(WebCore::LocalFrame **)(*(_QWORD *)(*(_QWORD *)(v6 + 296) + 3064) + 88));
        v6 = v16 != 0;
        if (v16)
        {
          if (*((_DWORD *)v16 + 6) == 2)
          {
            if ((*((_WORD *)v16 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v16, v15);
          }
          else
          {
            *((_DWORD *)v16 + 6) -= 2;
          }
        }
      }
    }
    else
    {
      v6 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 296) + 3064) + 153) != 0;
    }
    do
    {
      v10 = __ldaxr(v7);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v7));
    if (!v11)
    {
      atomic_store(1u, v7);
      v13 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v13 = off_1E31FE290;
      *((_QWORD *)v13 + 1) = v7;
      v16 = v13;
      WTF::ensureOnMainThread();
      v14 = v16;
      v16 = 0;
      if (v14)
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  return v6;
}

unsigned int *WebCore::selectionShadowAncestor(unsigned int *this, WebCore::LocalFrame *a2)
{
  unsigned int *v2;
  uint64_t v4;

  v2 = this;
  if (a2)
  {
    *((_DWORD *)a2 + 6) += 2;
    if ((*((_BYTE *)a2 + 22) & 0x10) != 0)
    {
      v4 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
      *(_DWORD *)(v4 + 24) += 2;
      this = (unsigned int *)WebCore::TreeScope::ancestorNodeInThisScope((WebCore::TreeScope *)(v4 + 96), a2);
      if (this)
        this[6] += 2;
      *(_QWORD *)v2 = this;
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      *(_QWORD *)this = 0;
    }
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(a2, a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

unsigned int *WebCore::DOMSelection::collapse@<X0>(WebCore::DOMSelection *this@<X0>, WebCore::Node *a2@<X1>, WebCore::Node *a3@<X2>, _QWORD *a4@<X8>)
{
  WebCore::DOMSelection **v8;
  unsigned int *result;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::Node *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::Node *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  char v23;

  v8 = (WebCore::DOMSelection **)((char *)this + 8);
  result = (unsigned int *)WebCore::LocalDOMWindowProperty::frame((WebCore::DOMSelection *)((char *)this + 8));
  if (!result)
    goto LABEL_30;
  v10 = result;
  v11 = result + 2;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  if ((*(_QWORD *)(*((_QWORD *)result + 17) + 680) & 0x800000000000000) != 0)
  {
    if (a2)
    {
      WebCore::Range::checkNodeOffsetPair((uint64_t)a2, a3, (uint64_t)&v20);
      if (!v22)
      {
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4NodeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_((uint64_t)&v23, &v20);
        v13 = *((_QWORD *)a2 + 2);
        if ((*(_QWORD *)(*((_QWORD *)v10 + 17) + 696) & 0x10) == 0
          || (v13 & 0x8000000000000) == 0
          || (v14 = (WebCore::Node *)*((_QWORD *)v10 + 37), v14 != *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8)))
        {
          if ((v13 & 0x18000000000000) != 0)
          {
            v14 = (WebCore::Node *)**((_QWORD **)a2 + 5);
          }
          else
          {
            v18 = a2;
            do
            {
              v14 = v18;
              v18 = (WebCore::Node *)*((_QWORD *)v18 + 4);
            }
            while (v18);
          }
          if (v14 != *((WebCore::Node **)v10 + 37))
            goto LABEL_25;
        }
LABEL_10:
        v15 = *((_QWORD *)v14 + 383);
        ++*(_DWORD *)(v15 + 28);
        v16 = *(_QWORD *)(v15 + 40);
        *(_QWORD *)(v15 + 40) = 0;
        if (v16)
        {
          *(_BYTE *)(v16 + 80) = 0;
          if (*(_DWORD *)(v16 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          else
            --*(_DWORD *)(v16 + 8);
        }
        if (a2)
          *((_DWORD *)a2 + 6) += 2;
        v20 = (unsigned int *)a2;
        LODWORD(v21) = (_DWORD)a3;
        BYTE4(v21) &= 0xF0u;
        WebCore::FrameSelection::moveTo(v15, (uint64_t *)&v20, 1, 0);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v20);
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        v17 = *(_DWORD *)(v15 + 28);
        if (!v17)
        {
          __break(0xC471u);
          JUMPOUT(0x195F781E4);
        }
        *(_DWORD *)(v15 + 28) = v17 - 1;
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
      }
      if (v22 == 1)
      {
        v19 = v21;
        *(_BYTE *)a4 = (_BYTE)v20;
        a4[1] = v19;
        *((_BYTE *)a4 + 16) = 1;
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
      }
      result = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_30:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return result;
    }
    WebCore::DOMSelection::removeAllRanges(this);
  }
  else if (WebCore::DOMSelection::isValidForPosition(*v8, a2))
  {
    v14 = (WebCore::Node *)*((_QWORD *)v10 + 37);
    goto LABEL_10;
  }
LABEL_25:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
}

void WebCore::DOMSelection::removeAllRanges(WebCore::DOMSelection *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::FrameSelection *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 72);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (*(_BYTE *)(v4 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x195F782D8);
          }
          v5 = *(_QWORD *)(v4 + 240);
          if (v5)
          {
            v6 = *(_QWORD *)(v5 + 8);
            if (v6)
            {
              v7 = (unsigned int *)(v6 + 8);
              do
                v8 = __ldaxr(v7);
              while (__stlxr(v8 + 1, v7));
              v9 = *(WebCore::FrameSelection **)(*(_QWORD *)(v6 + 296) + 3064);
              ++*((_DWORD *)v9 + 7);
              WebCore::FrameSelection::clear(v9);
              v10 = *((_DWORD *)v9 + 7);
              if (!v10)
              {
                __break(0xC471u);
                JUMPOUT(0x195F782F8);
              }
              *((_DWORD *)v9 + 7) = v10 - 1;
              do
              {
                v11 = __ldaxr(v7);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v7));
              if (!v12)
              {
                atomic_store(1u, v7);
                v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v13 = off_1E31FE290;
                v13[1] = v7;
                v14 = v13;
                WTF::ensureOnMainThread();
                if (v14)
                  (*(void (**)(_QWORD *))(*v14 + 8))(v14);
              }
            }
          }
        }
      }
    }
  }
}

BOOL WebCore::DOMSelection::isValidForPosition(WebCore::DOMSelection *this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _BOOL8 v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v13;
  _QWORD *v14;

  if (!this)
    return 0;
  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F78404);
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if (a2)
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8) == *(_QWORD *)(v6 + 296);
  else
    v9 = 1;
  do
  {
    v10 = __ldaxr(v7);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v7));
  if (!v11)
  {
    atomic_store(1u, v7);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E31FE290;
    v13[1] = v7;
    v14 = v13;
    WTF::ensureOnMainThread();
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
  return v9;
}

void WebCore::DOMSelection::collapseToEnd(WebCore::DOMSelection *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    goto LABEL_13;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_13;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    goto LABEL_13;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_13;
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F78590);
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 296) + 3064);
    v12 = *(_DWORD *)(v11 + 28) + 1;
    *(_DWORD *)(v11 + 28) = v12;
    if (*(_BYTE *)(v11 + 153))
    {
      if ((*(_QWORD *)(*(_QWORD *)(v8 + 136) + 680) & 0x800000000000000) != 0)
      {
        v14 = *(_QWORD *)(v11 + 40);
        *(_QWORD *)(v11 + 40) = 0;
        if (v14)
        {
          *(_BYTE *)(v14 + 80) = 0;
          if (*(_DWORD *)(v14 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          else
            --*(_DWORD *)(v14 + 8);
        }
        if ((*(_BYTE *)(v11 + 154) & 1) != 0)
          v13 = (uint64_t *)(v11 + 72);
        else
          v13 = (uint64_t *)(v11 + 56);
      }
      else
      {
        v13 = (uint64_t *)(v11 + 136);
      }
      WebCore::FrameSelection::moveTo(v11, v13, 1, 0);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v12 = *(_DWORD *)(v11 + 28);
    }
    else
    {
      *(_BYTE *)a2 = 8;
      a2[1] = 0;
      *((_BYTE *)a2 + 16) = 1;
    }
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x195F785B0);
    }
    *(_DWORD *)(v11 + 28) = v12 - 1;
    do
    {
      v15 = __ldaxr(v9);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v9));
    if (!v16)
    {
      atomic_store(1u, v9);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = off_1E31FE290;
      v17[1] = v9;
      v18 = v17;
      WTF::ensureOnMainThread();
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
  }
  else
  {
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void WebCore::DOMSelection::collapseToStart(WebCore::DOMSelection *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    goto LABEL_13;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_13;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    goto LABEL_13;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_13;
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F78764);
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 296) + 3064);
    v12 = *(_DWORD *)(v11 + 28) + 1;
    *(_DWORD *)(v11 + 28) = v12;
    if (*(_BYTE *)(v11 + 153))
    {
      if ((*(_QWORD *)(*(_QWORD *)(v8 + 136) + 680) & 0x800000000000000) != 0)
      {
        v14 = *(_QWORD *)(v11 + 40);
        *(_QWORD *)(v11 + 40) = 0;
        if (v14)
        {
          *(_BYTE *)(v14 + 80) = 0;
          if (*(_DWORD *)(v14 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          else
            --*(_DWORD *)(v14 + 8);
        }
        if ((*(_BYTE *)(v11 + 154) & 1) != 0)
          v13 = (uint64_t *)(v11 + 56);
        else
          v13 = (uint64_t *)(v11 + 72);
      }
      else
      {
        v13 = (uint64_t *)(v11 + 120);
      }
      WebCore::FrameSelection::moveTo(v11, v13, 1, 0);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v12 = *(_DWORD *)(v11 + 28);
    }
    else
    {
      *(_BYTE *)a2 = 8;
      a2[1] = 0;
      *((_BYTE *)a2 + 16) = 1;
    }
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x195F78784);
    }
    *(_DWORD *)(v11 + 28) = v12 - 1;
    do
    {
      v15 = __ldaxr(v9);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v9));
    if (!v16)
    {
      atomic_store(1u, v9);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = off_1E31FE290;
      v17[1] = v9;
      v18 = v17;
      WTF::ensureOnMainThread();
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
  }
  else
  {
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void WebCore::DOMSelection::setBaseAndExtent(WebCore::DOMSelection *this@<X0>, WebCore::Node *a2@<X1>, WebCore::Node *a3@<X2>, WebCore::Node *a4@<X3>, WebCore::Node *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v15;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  WebCore::Node *v44;
  WebCore::Node *v45;
  void *v46;
  int v47;
  void *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  void *v55;
  int v56;
  WebCore::Node *v57;
  WebCore::Node **v58;
  uint64_t v60;
  WebCore::Node *v61;
  WebCore::Node **v62;
  uint64_t v64;
  WebCore::Node *v65;
  WebCore::Node *v66;
  unsigned int *v67;
  WebCore::Node *v68;
  WebCore::Node *v69;
  WebCore::DOMSelection *v70;
  char v71;
  char v72;
  WebCore::Node *v73;
  uint64_t v74;
  WebCore::Node *v75;
  int v76;
  char v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t v81;
  int v82;
  char v83;
  uint64_t v84;
  int v85;
  char v86;
  uint64_t v87;
  int v88;
  char v89;
  __int16 v90;
  char v91;

  v7 = *((_QWORD *)this + 1);
  if (!v7)
    goto LABEL_49;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_49;
  v9 = *(_QWORD *)(v8 + 72);
  if (!v9)
    goto LABEL_49;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_49;
  if (*(_BYTE *)(v10 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F78D68);
  }
  v11 = *(_QWORD *)(v10 + 240);
  if (!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
  {
LABEL_49:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  v15 = (int)a3;
  v17 = (unsigned int *)(v12 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  if ((*(_QWORD *)(*(_QWORD *)(v12 + 136) + 680) & 0x800000000000000) != 0)
  {
    if (!a2 || !a4)
    {
      *(_BYTE *)a6 = 33;
      a6[1] = 0;
      goto LABEL_60;
    }
    WebCore::Range::checkNodeOffsetPair((uint64_t)a2, a3, (uint64_t)&v73);
    v47 = (int)v75;
    if ((_DWORD)v75)
      goto LABEL_57;
    if (v73)
    {
      if (*((_DWORD *)v73 + 6) == 2)
      {
        if ((*((_WORD *)v73 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v73, v46);
      }
      else
      {
        *((_DWORD *)v73 + 6) -= 2;
      }
    }
    WebCore::Range::checkNodeOffsetPair((uint64_t)a4, a5, (uint64_t)&v73);
    v47 = (int)v75;
    if ((_DWORD)v75)
    {
LABEL_57:
      if (v47 != 1)
      {
        v54 = std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_145;
      }
      v49 = v74;
      *(_BYTE *)a6 = (_BYTE)v73;
      a6[1] = v49;
LABEL_60:
      *((_BYTE *)a6 + 16) = 1;
      goto LABEL_61;
    }
    if (v73)
    {
      if (*((_DWORD *)v73 + 6) == 2)
      {
        if ((*((_WORD *)v73 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v73, v48);
      }
      else
      {
        *((_DWORD *)v73 + 6) -= 2;
      }
    }
    v52 = *(_QWORD *)(v12 + 296);
    v53 = *(_DWORD *)(v52 + 24);
    *(_DWORD *)(v52 + 24) = v53 + 2;
    if ((*(_QWORD *)(*(_QWORD *)(v12 + 136) + 696) & 0x10) != 0)
    {
      if ((WebCore::Node *)v52 == a2)
        goto LABEL_114;
      v57 = a2;
      do
      {
        if ((*((_WORD *)v57 + 14) & 0x80) != 0)
        {
          v60 = *((_QWORD *)v57 + 25);
          if (!v60)
            goto LABEL_69;
          v58 = (WebCore::Node **)(v60 + 8);
        }
        else
        {
          v58 = (WebCore::Node **)((char *)v57 + 32);
        }
        v57 = *v58;
      }
      while (v57 != (WebCore::Node *)v52 && v57 != 0);
      if (v57)
      {
LABEL_114:
        if ((WebCore::Node *)v52 == a4)
          goto LABEL_73;
        v61 = a4;
        do
        {
          if ((*((_WORD *)v61 + 14) & 0x80) != 0)
          {
            v64 = *((_QWORD *)v61 + 25);
            if (!v64)
              goto LABEL_69;
            v62 = (WebCore::Node **)(v64 + 8);
          }
          else
          {
            v62 = (WebCore::Node **)((char *)v61 + 32);
          }
          v61 = *v62;
        }
        while (v61 != (WebCore::Node *)v52 && v61 != 0);
        if (v61)
          goto LABEL_73;
      }
    }
    else if (v52 + 96 == *((_QWORD *)a2 + 5)
           && (*((_BYTE *)a2 + 22) & 8) != 0
           && v52 + 96 == *((_QWORD *)a4 + 5)
           && (*((_BYTE *)a4 + 22) & 8) != 0)
    {
LABEL_73:
      if (v53)
      {
        *(_DWORD *)(v52 + 24) = v53;
      }
      else if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v52, v48);
      }
      goto LABEL_75;
    }
LABEL_69:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    if (v53)
    {
      *(_DWORD *)(v52 + 24) = v53;
    }
    else if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v52, v48);
    }
    goto LABEL_61;
  }
  v19 = *((_QWORD *)this + 1);
  if (!v19)
    goto LABEL_42;
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20)
    goto LABEL_42;
  v21 = *(_QWORD *)(v20 + 72);
  if (!v21)
    goto LABEL_42;
  v22 = *(_QWORD *)(v21 + 8);
  if (!v22)
    goto LABEL_42;
  if (*(_BYTE *)(v22 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F78DCCLL);
  }
  v23 = *(_QWORD *)(v22 + 240);
  if (!v23)
    goto LABEL_42;
  v24 = *(_QWORD *)(v23 + 8);
  if (!v24)
    goto LABEL_42;
  v25 = (unsigned int *)(v24 + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  if (!a2)
  {
    do
      LODWORD(v24) = __ldaxr(v25);
    while (__stlxr(v24 - 1, v25));
    if ((_DWORD)v24 != 1)
    {
LABEL_28:
      v31 = *((_QWORD *)this + 1);
      if (!v31)
        goto LABEL_42;
      v32 = *(_QWORD *)(v31 + 8);
      if (!v32)
        goto LABEL_42;
      v33 = *(_QWORD *)(v32 + 72);
      if (!v33)
        goto LABEL_42;
      v34 = *(_QWORD *)(v33 + 8);
      if (!v34)
        goto LABEL_42;
      if (*(_BYTE *)(v34 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195F78E48);
      }
      v35 = *(_QWORD *)(v34 + 240);
      if (!v35)
        goto LABEL_42;
      v36 = *(_QWORD *)(v35 + 8);
      if (!v36)
        goto LABEL_42;
      v37 = (unsigned int *)(v36 + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
      if (a4)
      {
        v39 = *(_QWORD *)(*((_QWORD *)a4 + 5) + 8);
        v40 = *(_QWORD *)(v36 + 296);
        LOBYTE(v36) = v39 == v40;
        do
        {
          v41 = __ldaxr(v37);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v37));
        if (v42)
        {
          if (v39 != v40)
            goto LABEL_42;
          goto LABEL_75;
        }
        goto LABEL_45;
      }
      do
        LODWORD(v36) = __ldaxr(v37);
      while (__stlxr(v36 - 1, v37));
      if ((_DWORD)v36 == 1)
      {
LABEL_45:
        v71 = v36;
        atomic_store(1u, v37);
        v43 = v37;
        v44 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v44 = off_1E31FE290;
        *((_QWORD *)v44 + 1) = v43;
        v73 = v44;
        WTF::ensureOnMainThread();
        v45 = v73;
        v73 = 0;
        if (v45)
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v45 + 8))(v45);
        if ((v71 & 1) == 0)
          goto LABEL_42;
      }
LABEL_75:
      v12 = *(_QWORD *)(*(_QWORD *)(v12 + 296) + 3064);
      ++*(_DWORD *)(v12 + 28);
      v54 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v12 + 40) = 0;
      if (!v54)
      {
LABEL_76:
        if (a2)
          *((_DWORD *)a2 + 6) += 2;
        if (a4)
          *((_DWORD *)a4 + 6) += 2;
        if (a2)
          *((_DWORD *)a2 + 6) += 2;
        v73 = a2;
        LODWORD(v74) = v15;
        BYTE4(v74) = 0;
        if (a4)
          *((_DWORD *)a4 + 6) += 2;
        v75 = a4;
        v76 = (int)a5;
        v77 = 0;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v85 = 0;
        v86 = 0;
        v87 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 1;
        v91 = -1;
        WebCore::VisibleSelection::validate((uint64_t)&v73, 0);
        WebCore::FrameSelection::setSelection(v12, (uint64_t)&v73, 6u, 0, 0, 0, 0);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v73);
        if (a4)
        {
          if (*((_DWORD *)a4 + 6) == 2)
          {
            if ((*((_WORD *)a4 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(a4, v55);
          }
          else
          {
            *((_DWORD *)a4 + 6) -= 2;
          }
        }
        if (a2)
        {
          if (*((_DWORD *)a2 + 6) == 2)
          {
            if ((*((_WORD *)a2 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(a2, v55);
          }
          else
          {
            *((_DWORD *)a2 + 6) -= 2;
          }
        }
        *a6 = 0;
        a6[1] = 0;
        a6[2] = 0;
        v56 = *(_DWORD *)(v12 + 28);
        if (!v56)
        {
          __break(0xC471u);
          JUMPOUT(0x195F78E88);
        }
        *(_DWORD *)(v12 + 28) = v56 - 1;
        goto LABEL_61;
      }
      *(_BYTE *)(v54 + 80) = 0;
      if (*(_DWORD *)(v54 + 8) != 1)
      {
        --*(_DWORD *)(v54 + 8);
        goto LABEL_76;
      }
LABEL_145:
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
      goto LABEL_76;
    }
LABEL_132:
    v72 = v24;
    v70 = this;
    atomic_store(1u, v25);
    v67 = v25;
    v68 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v68 = off_1E31FE290;
    *((_QWORD *)v68 + 1) = v67;
    v73 = v68;
    WTF::ensureOnMainThread();
    v69 = v73;
    v73 = 0;
    if (v69)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v69 + 8))(v69);
    this = v70;
    if ((v72 & 1) == 0)
      goto LABEL_42;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  v28 = *(_QWORD *)(v24 + 296);
  LOBYTE(v24) = v27 == v28;
  do
  {
    v29 = __ldaxr(v25);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v25));
  if (!v30)
    goto LABEL_132;
  if (v27 == v28)
    goto LABEL_28;
LABEL_42:
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  do
  {
LABEL_61:
    v50 = __ldaxr(v17);
    v51 = v50 - 1;
  }
  while (__stlxr(v51, v17));
  if (!v51)
  {
    atomic_store(1u, v17);
    v65 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v65 = off_1E31FE290;
    *((_QWORD *)v65 + 1) = v17;
    v73 = v65;
    WTF::ensureOnMainThread();
    v66 = v73;
    v73 = 0;
    if (v66)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v66 + 8))(v66);
  }
}

uint64_t WebCore::DOMSelection::modify(uint64_t this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  _QWORD *v53;
  int v54;
  int v55;
  unsigned int *v56;
  uint64_t v57;

  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return this;
  v5 = *(_DWORD *)(v4 + 4);
  if (v5 == 6)
  {
    v9 = *(_QWORD *)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v9 & 0xDF) != 0x45
        || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x58
        || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x54
        || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x45
        || (*(_BYTE *)(v9 + 4) & 0xDF) != 0x4E)
      {
        return this;
      }
      v10 = *(unsigned __int8 *)(v9 + 5);
    }
    else
    {
      if ((*(_WORD *)v9 & 0xFFDF) != 0x45
        || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x58
        || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x54
        || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x45
        || (*(_WORD *)(v9 + 8) & 0xFFDF) != 0x4E)
      {
        return this;
      }
      v10 = *(unsigned __int16 *)(v9 + 10);
    }
    if ((v10 & 0xFFFFFFDF) != 0x44)
      return this;
    v8 = 1;
  }
  else
  {
    if (v5 != 4)
      return this;
    v6 = *(_QWORD *)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v6 & 0xDF) != 0x4D || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x4F || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x56)
        return this;
      v7 = *(unsigned __int8 *)(v6 + 3);
    }
    else
    {
      if ((*(_WORD *)v6 & 0xFFDF) != 0x4D
        || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x56)
      {
        return this;
      }
      v7 = *(unsigned __int16 *)(v6 + 6);
    }
    if ((v7 & 0xFFFFFFDF) != 0x45)
      return this;
    v8 = 0;
  }
  v11 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    return this;
  switch(*(_DWORD *)(v11 + 4))
  {
    case 4:
      v17 = *(_QWORD *)(v11 + 8);
      if ((*(_BYTE *)(v11 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v17 & 0xDF) != 0x4C
          || (*(_BYTE *)(v17 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v17 + 2) & 0xDF) != 0x46)
        {
          return this;
        }
        v18 = *(unsigned __int8 *)(v17 + 3);
      }
      else
      {
        if ((*(_WORD *)v17 & 0xFFDF) != 0x4C
          || (*(_WORD *)(v17 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v17 + 4) & 0xFFDF) != 0x46)
        {
          return this;
        }
        v18 = *(unsigned __int16 *)(v17 + 6);
      }
      if ((v18 & 0xFFFFFFDF) != 0x54)
        return this;
      v14 = 3;
      goto LABEL_59;
    case 5:
      v19 = *(_QWORD *)(v11 + 8);
      if ((*(_BYTE *)(v11 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v19 & 0xDF) != 0x52
          || (*(_BYTE *)(v19 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x47
          || (*(_BYTE *)(v19 + 3) & 0xDF) != 0x48)
        {
          return this;
        }
        v20 = *(unsigned __int8 *)(v19 + 4);
      }
      else
      {
        if ((*(_WORD *)v19 & 0xFFDF) != 0x52
          || (*(_WORD *)(v19 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x47
          || (*(_WORD *)(v19 + 6) & 0xFFDF) != 0x48)
        {
          return this;
        }
        v20 = *(unsigned __int16 *)(v19 + 8);
      }
      if ((v20 & 0xFFFFFFDF) != 0x54)
        return this;
      v14 = 2;
      goto LABEL_59;
    case 7:
      v12 = *(_QWORD *)(v11 + 8);
      if ((*(_BYTE *)(v11 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v12 & 0xDF) != 0x46
          || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x52
          || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x57
          || (*(_BYTE *)(v12 + 4) & 0xDF) != 0x41
          || (*(_BYTE *)(v12 + 5) & 0xDF) != 0x52)
        {
          return this;
        }
        v13 = *(unsigned __int8 *)(v12 + 6);
      }
      else
      {
        if ((*(_WORD *)v12 & 0xFFDF) != 0x46
          || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x52
          || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x57
          || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x41
          || (*(_WORD *)(v12 + 10) & 0xFFDF) != 0x52)
        {
          return this;
        }
        v13 = *(unsigned __int16 *)(v12 + 12);
      }
      if ((v13 & 0xFFFFFFDF) != 0x44)
        return this;
      v14 = 0;
      goto LABEL_59;
    case 8:
      v15 = *(_QWORD *)(v11 + 8);
      if ((*(_BYTE *)(v11 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v15 & 0xDF) != 0x42
          || (*(_BYTE *)(v15 + 1) & 0xDF) != 0x41
          || (*(_BYTE *)(v15 + 2) & 0xDF) != 0x43
          || (*(_BYTE *)(v15 + 3) & 0xDF) != 0x4B
          || (*(_BYTE *)(v15 + 4) & 0xDF) != 0x57
          || (*(_BYTE *)(v15 + 5) & 0xDF) != 0x41
          || (*(_BYTE *)(v15 + 6) & 0xDF) != 0x52)
        {
          return this;
        }
        v16 = *(unsigned __int8 *)(v15 + 7);
      }
      else
      {
        if ((*(_WORD *)v15 & 0xFFDF) != 0x42
          || (*(_WORD *)(v15 + 2) & 0xFFDF) != 0x41
          || (*(_WORD *)(v15 + 4) & 0xFFDF) != 0x43
          || (*(_WORD *)(v15 + 6) & 0xFFDF) != 0x4B
          || (*(_WORD *)(v15 + 8) & 0xFFDF) != 0x57
          || (*(_WORD *)(v15 + 10) & 0xFFDF) != 0x41
          || (*(_WORD *)(v15 + 12) & 0xFFDF) != 0x52)
        {
          return this;
        }
        v16 = *(unsigned __int16 *)(v15 + 14);
      }
      if ((v16 & 0xFFFFFFDF) != 0x44)
        return this;
      v14 = 1;
LABEL_59:
      v21 = *(_QWORD *)a4;
      if (!*(_QWORD *)a4)
        return this;
      break;
    default:
      return this;
  }
  switch(*(_DWORD *)(v21 + 4))
  {
    case 4:
      v26 = *(_QWORD *)(v21 + 8);
      if ((*(_BYTE *)(v21 + 16) & 4) != 0)
      {
        v27 = *(_BYTE *)v26 & 0xDF;
        if (v27 == 87)
        {
          if ((*(_BYTE *)(v26 + 1) & 0xDF) != 0x4F || (*(_BYTE *)(v26 + 2) & 0xDF) != 0x52)
            return this;
          v28 = *(unsigned __int8 *)(v26 + 3);
LABEL_88:
          if ((v28 & 0xFFFFFFDF) == 0x44)
          {
            v25 = 1;
            goto LABEL_196;
          }
          return this;
        }
        if (v27 != 76 || (*(_BYTE *)(v26 + 1) & 0xDF) != 0x49 || (*(_BYTE *)(v26 + 2) & 0xDF) != 0x4E)
          return this;
        v39 = *(unsigned __int8 *)(v26 + 3);
      }
      else
      {
        v55 = *(_WORD *)v26 & 0xFFDF;
        if (v55 == 87)
        {
          if ((*(_WORD *)(v26 + 2) & 0xFFDF) != 0x4F || (*(_WORD *)(v26 + 4) & 0xFFDF) != 0x52)
            return this;
          v28 = *(unsigned __int16 *)(v26 + 6);
          goto LABEL_88;
        }
        if (v55 != 76 || (*(_WORD *)(v26 + 2) & 0xFFDF) != 0x49 || (*(_WORD *)(v26 + 4) & 0xFFDF) != 0x4E)
          return this;
        v39 = *(unsigned __int16 *)(v26 + 6);
      }
      if ((v39 & 0xFFFFFFDF) == 0x45)
      {
        v25 = 3;
        goto LABEL_196;
      }
      return this;
    case 8:
      v29 = *(_QWORD *)(v21 + 8);
      if ((*(_BYTE *)(v21 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v29 & 0xDF) != 0x53
          || (*(_BYTE *)(v29 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v29 + 2) & 0xDF) != 0x4E
          || (*(_BYTE *)(v29 + 3) & 0xDF) != 0x54
          || (*(_BYTE *)(v29 + 4) & 0xDF) != 0x45
          || (*(_BYTE *)(v29 + 5) & 0xDF) != 0x4E
          || (*(_BYTE *)(v29 + 6) & 0xDF) != 0x43)
        {
          return this;
        }
        v30 = *(unsigned __int8 *)(v29 + 7);
      }
      else
      {
        if ((*(_WORD *)v29 & 0xFFDF) != 0x53
          || (*(_WORD *)(v29 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v29 + 4) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v29 + 6) & 0xFFDF) != 0x54
          || (*(_WORD *)(v29 + 8) & 0xFFDF) != 0x45
          || (*(_WORD *)(v29 + 10) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v29 + 12) & 0xFFDF) != 0x43)
        {
          return this;
        }
        v30 = *(unsigned __int16 *)(v29 + 14);
      }
      if ((v30 & 0xFFFFFFDF) == 0x45)
      {
        v25 = 2;
        goto LABEL_196;
      }
      return this;
    case 9:
      v22 = *(_QWORD *)(v21 + 8);
      if ((*(_BYTE *)(v21 + 16) & 4) != 0)
      {
        v23 = *(_BYTE *)v22 & 0xDF;
        if (v23 == 67)
        {
          if ((*(_BYTE *)(v22 + 1) & 0xDF) != 0x48
            || (*(_BYTE *)(v22 + 2) & 0xDF) != 0x41
            || (*(_BYTE *)(v22 + 3) & 0xDF) != 0x52
            || (*(_BYTE *)(v22 + 4) & 0xDF) != 0x41
            || (*(_BYTE *)(v22 + 5) & 0xDF) != 0x43
            || (*(_BYTE *)(v22 + 6) & 0xDF) != 0x54
            || (*(_BYTE *)(v22 + 7) & 0xDF) != 0x45)
          {
            return this;
          }
          v24 = *(unsigned __int8 *)(v22 + 8);
LABEL_71:
          if ((v24 & 0xFFFFFFDF) == 0x52)
          {
            v25 = 0;
            goto LABEL_196;
          }
          return this;
        }
        if (v23 != 80
          || (*(_BYTE *)(v22 + 1) & 0xDF) != 0x41
          || (*(_BYTE *)(v22 + 2) & 0xDF) != 0x52
          || (*(_BYTE *)(v22 + 3) & 0xDF) != 0x41
          || (*(_BYTE *)(v22 + 4) & 0xDF) != 0x47
          || (*(_BYTE *)(v22 + 5) & 0xDF) != 0x52
          || (*(_BYTE *)(v22 + 6) & 0xDF) != 0x41
          || (*(_BYTE *)(v22 + 7) & 0xDF) != 0x50)
        {
          return this;
        }
        v38 = *(unsigned __int8 *)(v22 + 8);
      }
      else
      {
        v54 = *(_WORD *)v22 & 0xFFDF;
        if (v54 == 67)
        {
          if ((*(_WORD *)(v22 + 2) & 0xFFDF) != 0x48
            || (*(_WORD *)(v22 + 4) & 0xFFDF) != 0x41
            || (*(_WORD *)(v22 + 6) & 0xFFDF) != 0x52
            || (*(_WORD *)(v22 + 8) & 0xFFDF) != 0x41
            || (*(_WORD *)(v22 + 10) & 0xFFDF) != 0x43
            || (*(_WORD *)(v22 + 12) & 0xFFDF) != 0x54
            || (*(_WORD *)(v22 + 14) & 0xFFDF) != 0x45)
          {
            return this;
          }
          v24 = *(unsigned __int16 *)(v22 + 16);
          goto LABEL_71;
        }
        if (v54 != 80
          || (*(_WORD *)(v22 + 2) & 0xFFDF) != 0x41
          || (*(_WORD *)(v22 + 4) & 0xFFDF) != 0x52
          || (*(_WORD *)(v22 + 6) & 0xFFDF) != 0x41
          || (*(_WORD *)(v22 + 8) & 0xFFDF) != 0x47
          || (*(_WORD *)(v22 + 10) & 0xFFDF) != 0x52
          || (*(_WORD *)(v22 + 12) & 0xFFDF) != 0x41
          || (*(_WORD *)(v22 + 14) & 0xFFDF) != 0x50)
        {
          return this;
        }
        v38 = *(unsigned __int16 *)(v22 + 16);
      }
      if ((v38 & 0xFFFFFFDF) == 0x48)
      {
        v25 = 4;
        goto LABEL_196;
      }
      return this;
    case 0xC:
      v31 = *(_QWORD *)(v21 + 8);
      if ((*(_BYTE *)(v21 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v31 & 0xDF) != 0x4C
          || (*(_BYTE *)(v31 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(v31 + 2) & 0xDF) != 0x4E
          || (*(_BYTE *)(v31 + 3) & 0xDF) != 0x45
          || (*(_BYTE *)(v31 + 4) & 0xDF) != 0x42
          || (*(_BYTE *)(v31 + 5) & 0xDF) != 0x4F
          || (*(_BYTE *)(v31 + 6) & 0xDF) != 0x55
          || (*(_BYTE *)(v31 + 7) & 0xDF) != 0x4E
          || (*(_BYTE *)(v31 + 8) & 0xDF) != 0x44
          || (*(_BYTE *)(v31 + 9) & 0xDF) != 0x41
          || (*(_BYTE *)(v31 + 10) & 0xDF) != 0x52)
        {
          return this;
        }
        v32 = *(unsigned __int8 *)(v31 + 11);
      }
      else
      {
        if ((*(_WORD *)v31 & 0xFFDF) != 0x4C
          || (*(_WORD *)(v31 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(v31 + 4) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v31 + 6) & 0xFFDF) != 0x45
          || (*(_WORD *)(v31 + 8) & 0xFFDF) != 0x42
          || (*(_WORD *)(v31 + 10) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v31 + 12) & 0xFFDF) != 0x55
          || (*(_WORD *)(v31 + 14) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v31 + 16) & 0xFFDF) != 0x44
          || (*(_WORD *)(v31 + 18) & 0xFFDF) != 0x41
          || (*(_WORD *)(v31 + 20) & 0xFFDF) != 0x52)
        {
          return this;
        }
        v32 = *(unsigned __int16 *)(v31 + 22);
      }
      if ((v32 & 0xFFFFFFDF) == 0x59)
      {
        v25 = 7;
        goto LABEL_196;
      }
      return this;
    case 0x10:
      v33 = *(_QWORD *)(v21 + 8);
      if ((*(_BYTE *)(v21 + 16) & 4) != 0)
      {
        v34 = *(_BYTE *)v33 & 0xDF;
        if (v34 == 83
          && (*(_BYTE *)(v33 + 1) & 0xDF) == 0x45
          && (*(_BYTE *)(v33 + 2) & 0xDF) == 0x4E
          && (*(_BYTE *)(v33 + 3) & 0xDF) == 0x54
          && (*(_BYTE *)(v33 + 4) & 0xDF) == 0x45
          && (*(_BYTE *)(v33 + 5) & 0xDF) == 0x4E
          && (*(_BYTE *)(v33 + 6) & 0xDF) == 0x43
          && (*(_BYTE *)(v33 + 7) & 0xDF) == 0x45
          && (*(_BYTE *)(v33 + 8) & 0xDF) == 0x42
          && (*(_BYTE *)(v33 + 9) & 0xDF) == 0x4F
          && (*(_BYTE *)(v33 + 10) & 0xDF) == 0x55
          && (*(_BYTE *)(v33 + 11) & 0xDF) == 0x4E
          && (*(_BYTE *)(v33 + 12) & 0xDF) == 0x44
          && (*(_BYTE *)(v33 + 13) & 0xDF) == 0x41
          && (*(_BYTE *)(v33 + 14) & 0xDF) == 0x52
          && (*(_BYTE *)(v33 + 15) & 0xDF) == 0x59)
        {
LABEL_133:
          v25 = 6;
          goto LABEL_196;
        }
        if (v34 != 68
          || (*(_BYTE *)(v33 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v33 + 2) & 0xDF) != 0x43
          || (*(_BYTE *)(v33 + 3) & 0xDF) != 0x55
          || (*(_BYTE *)(v33 + 4) & 0xDF) != 0x4D
          || (*(_BYTE *)(v33 + 5) & 0xDF) != 0x45
          || (*(_BYTE *)(v33 + 6) & 0xDF) != 0x4E
          || (*(_BYTE *)(v33 + 7) & 0xDF) != 0x54
          || (*(_BYTE *)(v33 + 8) & 0xDF) != 0x42
          || (*(_BYTE *)(v33 + 9) & 0xDF) != 0x4F
          || (*(_BYTE *)(v33 + 10) & 0xDF) != 0x55
          || (*(_BYTE *)(v33 + 11) & 0xDF) != 0x4E
          || (*(_BYTE *)(v33 + 12) & 0xDF) != 0x44
          || (*(_BYTE *)(v33 + 13) & 0xDF) != 0x41
          || (*(_BYTE *)(v33 + 14) & 0xDF) != 0x52)
        {
          return this;
        }
        v37 = *(unsigned __int8 *)(v33 + 15);
      }
      else
      {
        if ((*(_WORD *)v33 & 0xFFDF) == 0x53
          && (*(_WORD *)(v33 + 2) & 0xFFDF) == 0x45
          && (*(_WORD *)(v33 + 4) & 0xFFDF) == 0x4E
          && (*(_WORD *)(v33 + 6) & 0xFFDF) == 0x54
          && (*(_WORD *)(v33 + 8) & 0xFFDF) == 0x45
          && (*(_WORD *)(v33 + 10) & 0xFFDF) == 0x4E
          && (*(_WORD *)(v33 + 12) & 0xFFDF) == 0x43
          && (*(_WORD *)(v33 + 14) & 0xFFDF) == 0x45
          && (*(_WORD *)(v33 + 16) & 0xFFDF) == 0x42
          && (*(_WORD *)(v33 + 18) & 0xFFDF) == 0x4F
          && (*(_WORD *)(v33 + 20) & 0xFFDF) == 0x55
          && (*(_WORD *)(v33 + 22) & 0xFFDF) == 0x4E
          && (*(_WORD *)(v33 + 24) & 0xFFDF) == 0x44
          && (*(_WORD *)(v33 + 26) & 0xFFDF) == 0x41
          && (*(_WORD *)(v33 + 28) & 0xFFDF) == 0x52
          && (*(_WORD *)(v33 + 30) & 0xFFDF) == 0x59)
        {
          goto LABEL_133;
        }
        if ((*(_WORD *)v33 & 0xFFDF) != 0x44
          || (*(_WORD *)(v33 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v33 + 4) & 0xFFDF) != 0x43
          || (*(_WORD *)(v33 + 6) & 0xFFDF) != 0x55
          || (*(_WORD *)(v33 + 8) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v33 + 10) & 0xFFDF) != 0x45
          || (*(_WORD *)(v33 + 12) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v33 + 14) & 0xFFDF) != 0x54
          || (*(_WORD *)(v33 + 16) & 0xFFDF) != 0x42
          || (*(_WORD *)(v33 + 18) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v33 + 20) & 0xFFDF) != 0x55
          || (*(_WORD *)(v33 + 22) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v33 + 24) & 0xFFDF) != 0x44
          || (*(_WORD *)(v33 + 26) & 0xFFDF) != 0x41
          || (*(_WORD *)(v33 + 28) & 0xFFDF) != 0x52)
        {
          return this;
        }
        v37 = *(unsigned __int16 *)(v33 + 30);
      }
      if ((v37 & 0xFFFFFFDF) == 0x59)
      {
        v25 = 9;
LABEL_196:
        v40 = *(_QWORD *)(this + 8);
        if (v40)
        {
          v41 = *(_QWORD *)(v40 + 8);
          if (v41)
          {
            v42 = *(_QWORD *)(v41 + 72);
            if (v42)
            {
              v43 = *(_QWORD *)(v42 + 8);
              if (v43)
              {
                if (*(_BYTE *)(v43 + 178))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195F7A0D4);
                }
                v44 = *(_QWORD *)(v43 + 240);
                if (v44)
                {
                  v45 = *(_QWORD *)(v44 + 8);
                  if (v45)
                  {
                    v46 = (unsigned int *)(v45 + 8);
                    do
                      v47 = __ldaxr(v46);
                    while (__stlxr(v47 + 1, v46));
                    v56 = (unsigned int *)(v45 + 8);
                    v48 = *(_QWORD *)(*(_QWORD *)(v45 + 296) + 3064);
                    ++*(_DWORD *)(v48 + 28);
                    this = WebCore::FrameSelection::modify(v48, v8, v14, v25, 0);
                    v49 = *(_DWORD *)(v48 + 28);
                    if (!v49)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195F7A0F4);
                    }
                    *(_DWORD *)(v48 + 28) = v49 - 1;
                    do
                    {
                      v50 = __ldaxr(v56);
                      v51 = v50 - 1;
                    }
                    while (__stlxr(v51, v56));
                    if (!v51)
                    {
                      v52 = v56;
                      atomic_store(1u, v56);
                      v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                      *v53 = off_1E31FE290;
                      v53[1] = v52;
                      v57 = (uint64_t)v53;
                      WTF::ensureOnMainThread();
                      this = v57;
                      if (v57)
                        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
                    }
                  }
                }
              }
            }
          }
        }
      }
      return this;
    case 0x11:
      v35 = *(_QWORD *)(v21 + 8);
      if ((*(_BYTE *)(v21 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v35 & 0xDF) != 0x50
          || (*(_BYTE *)(v35 + 1) & 0xDF) != 0x41
          || (*(_BYTE *)(v35 + 2) & 0xDF) != 0x52
          || (*(_BYTE *)(v35 + 3) & 0xDF) != 0x41
          || (*(_BYTE *)(v35 + 4) & 0xDF) != 0x47
          || (*(_BYTE *)(v35 + 5) & 0xDF) != 0x52
          || (*(_BYTE *)(v35 + 6) & 0xDF) != 0x41
          || (*(_BYTE *)(v35 + 7) & 0xDF) != 0x50
          || (*(_BYTE *)(v35 + 8) & 0xDF) != 0x48
          || (*(_BYTE *)(v35 + 9) & 0xDF) != 0x42
          || (*(_BYTE *)(v35 + 10) & 0xDF) != 0x4F
          || (*(_BYTE *)(v35 + 11) & 0xDF) != 0x55
          || (*(_BYTE *)(v35 + 12) & 0xDF) != 0x4E
          || (*(_BYTE *)(v35 + 13) & 0xDF) != 0x44
          || (*(_BYTE *)(v35 + 14) & 0xDF) != 0x41
          || (*(_BYTE *)(v35 + 15) & 0xDF) != 0x52)
        {
          return this;
        }
        v36 = *(unsigned __int8 *)(v35 + 16);
      }
      else
      {
        if ((*(_WORD *)v35 & 0xFFDF) != 0x50
          || (*(_WORD *)(v35 + 2) & 0xFFDF) != 0x41
          || (*(_WORD *)(v35 + 4) & 0xFFDF) != 0x52
          || (*(_WORD *)(v35 + 6) & 0xFFDF) != 0x41
          || (*(_WORD *)(v35 + 8) & 0xFFDF) != 0x47
          || (*(_WORD *)(v35 + 10) & 0xFFDF) != 0x52
          || (*(_WORD *)(v35 + 12) & 0xFFDF) != 0x41
          || (*(_WORD *)(v35 + 14) & 0xFFDF) != 0x50
          || (*(_WORD *)(v35 + 16) & 0xFFDF) != 0x48
          || (*(_WORD *)(v35 + 18) & 0xFFDF) != 0x42
          || (*(_WORD *)(v35 + 20) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v35 + 22) & 0xFFDF) != 0x55
          || (*(_WORD *)(v35 + 24) & 0xFFDF) != 0x4E
          || (*(_WORD *)(v35 + 26) & 0xFFDF) != 0x44
          || (*(_WORD *)(v35 + 28) & 0xFFDF) != 0x41
          || (*(_WORD *)(v35 + 30) & 0xFFDF) != 0x52)
        {
          return this;
        }
        v36 = *(unsigned __int16 *)(v35 + 32);
      }
      if ((v36 & 0xFFFFFFDF) != 0x59)
        return this;
      v25 = 8;
      goto LABEL_196;
    default:
      return this;
  }
}

void WebCore::DOMSelection::extend(WebCore::DOMSelection *this@<X0>, WebCore::Node *a2@<X1>, WebCore::Node *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  WebCore::Node *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  WebCore::Node *v53;
  void *v54;
  unsigned int v55;
  unsigned int v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  unsigned int *v59;
  WebCore::Node *v60;
  WebCore::Node *v61;
  WebCore::DOMSelection *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  WebCore::Node *v66;
  uint64_t v67;
  WebCore::Node *v68;
  int v69;
  char v70;
  uint64_t v71;
  int v72;
  char v73;
  uint64_t v74;
  int v75;
  char v76;
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  int v81;
  char v82;
  __int16 v83;
  char v84;

  v5 = *((_QWORD *)this + 1);
  if (!v5)
    goto LABEL_16;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_16;
  v7 = *(_QWORD *)(v6 + 72);
  if (!v7)
    goto LABEL_16;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_16;
  if (*(_BYTE *)(v8 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F7A6D0);
  }
  v9 = *(_QWORD *)(v8 + 240);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
  {
LABEL_16:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  v14 = (unsigned int *)(v10 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v16 = WebCore::DOMSelection::rangeCount(this);
  v17 = *(_QWORD *)(v10 + 136);
  v18 = *(_QWORD *)(v17 + 696);
  v19 = *(_QWORD *)(v17 + 680);
  if (v16)
  {
    if ((v19 & 0x800000000000000) == 0)
    {
      v20 = *((_WORD *)a2 + 14);
      if ((v20 & 1) != 0)
      {
        v22 = *((_QWORD *)a2 + 10);
        if (v22)
          LODWORD(v22) = *(_DWORD *)(v22 + 4);
      }
      else if ((v20 & 4) != 0 && (v21 = *((_QWORD *)a2 + 10)) != 0)
      {
        LODWORD(v22) = 0;
        do
        {
          LODWORD(v22) = v22 + 1;
          v21 = *(_QWORD *)(v21 + 56);
        }
        while (v21);
      }
      else
      {
        LODWORD(v22) = 0;
      }
      if (v22 < a3)
      {
        *(_BYTE *)a4 = 0;
        a4[1] = 0;
        goto LABEL_62;
      }
      v39 = *((_QWORD *)this + 1);
      if (v39)
      {
        v40 = *(_QWORD *)(v39 + 8);
        if (v40)
        {
          v41 = *(_QWORD *)(v40 + 72);
          if (v41)
          {
            v42 = *(_QWORD *)(v41 + 8);
            if (v42)
            {
              if (*(_BYTE *)(v42 + 178))
              {
                __break(0xC471u);
                JUMPOUT(0x195F7A734);
              }
              v43 = *(_QWORD *)(v42 + 240);
              if (v43)
              {
                v44 = *(_QWORD *)(v43 + 8);
                if (v44)
                {
                  v45 = (unsigned int *)(v44 + 8);
                  do
                    v46 = __ldaxr(v45);
                  while (__stlxr(v46 + 1, v45));
                  v47 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
                  v48 = *(_QWORD *)(v44 + 296);
                  do
                  {
                    v49 = __ldaxr(v45);
                    v50 = v49 - 1;
                  }
                  while (__stlxr(v50, v45));
                  if (!v50)
                  {
                    v65 = v48;
                    atomic_store(1u, v45);
                    v59 = v45;
                    v60 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v60 = off_1E31FE290;
                    *((_QWORD *)v60 + 1) = v59;
                    v66 = v60;
                    WTF::ensureOnMainThread();
                    v61 = v66;
                    v66 = 0;
                    if (v61)
                      (*(void (**)(WebCore::Node *))(*(_QWORD *)v61 + 8))(v61);
                    if (v47 != v65)
                      goto LABEL_82;
                    goto LABEL_76;
                  }
                  if (v47 == v48)
                  {
LABEL_76:
                    v51 = *(_QWORD *)(*(_QWORD *)(v10 + 296) + 3064);
                    v29 = (int *)(v51 + 28);
                    ++*(_DWORD *)(v51 + 28);
                    v52 = *((_DWORD *)a2 + 6) + 2;
                    *((_DWORD *)a2 + 6) = v52;
                    v53 = *(WebCore::Node **)(v51 + 88);
                    if (v53)
                    {
                      *((_DWORD *)v53 + 6) += 2;
                      v52 = *((_DWORD *)a2 + 6);
                    }
                    v66 = v53;
                    LODWORD(v67) = *(_DWORD *)(v51 + 96);
                    BYTE4(v67) = *(_BYTE *)(v51 + 100);
                    *((_DWORD *)a2 + 6) = v52 + 2;
                    v68 = a2;
                    v69 = (int)a3;
                    v70 = 0;
                    v71 = 0;
                    v72 = 0;
                    v73 = 0;
                    v74 = 0;
                    v75 = 0;
                    v76 = 0;
                    v77 = 0;
                    v78 = 0;
                    v79 = 0;
                    v80 = 0;
                    v81 = 0;
                    v82 = 0;
                    v83 = 1;
                    v84 = -1;
                    WebCore::VisibleSelection::validate((uint64_t)&v66, 0);
                    WebCore::FrameSelection::setSelection(v51, (uint64_t)&v66, 6u, 0, 0, 0, 0);
                    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v66);
                    if (*((_DWORD *)a2 + 6) == 2)
                    {
                      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(a2, v54);
                    }
                    else
                    {
                      *((_DWORD *)a2 + 6) -= 2;
                    }
                    v38 = *v29;
                    if (!*v29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195F7A7ACLL);
                    }
LABEL_81:
                    *v29 = v38 - 1;
                  }
                }
              }
            }
          }
        }
      }
LABEL_82:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      goto LABEL_83;
    }
LABEL_19:
    v23 = *((_QWORD *)a2 + 2);
    if ((v18 & 0x10) == 0
      || (v23 & 0x8000000000000) == 0
      || *(_QWORD *)(v10 + 296) != *(_QWORD *)(*((_QWORD *)a2 + 5) + 8))
    {
      if ((v23 & 0x18000000000000) != 0)
      {
        v25 = (WebCore::Node *)**((_QWORD **)a2 + 5);
      }
      else
      {
        v24 = a2;
        do
        {
          v25 = v24;
          v24 = (WebCore::Node *)*((_QWORD *)v24 + 4);
        }
        while (v24);
      }
      if (v25 != *(WebCore::Node **)(v10 + 296))
        goto LABEL_82;
    }
    WebCore::Range::checkNodeOffsetPair((uint64_t)a2, a3, (uint64_t)&v66);
    if ((_DWORD)v68)
    {
      if ((_DWORD)v68 != 1)
      {
        v62 = (WebCore::DOMSelection *)std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::DOMSelection::getRangeAt(v62, v63, v64);
        return;
      }
      v27 = v67;
      *(_BYTE *)a4 = (_BYTE)v66;
      a4[1] = v27;
      goto LABEL_62;
    }
    if (v66)
    {
      if (*((_DWORD *)v66 + 6) == 2)
      {
        if ((*((_WORD *)v66 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v66, v26);
      }
      else
      {
        *((_DWORD *)v66 + 6) -= 2;
      }
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v10 + 296) + 3064);
    v29 = (int *)(v28 + 28);
    ++*(_DWORD *)(v28 + 28);
    v30 = *(WebCore::Node **)(v28 + 56);
    if (v30)
      *((_DWORD *)v30 + 6) += 2;
    v66 = v30;
    LODWORD(v67) = *(_DWORD *)(v28 + 64);
    BYTE4(v67) = *(_BYTE *)(v28 + 68);
    v31 = *(_QWORD *)(v28 + 72);
    if (v31)
      *(_DWORD *)(v31 + 24) += 2;
    v68 = (WebCore::Node *)v31;
    v69 = *(_DWORD *)(v28 + 80);
    v70 = *(_BYTE *)(v28 + 84);
    v32 = *(_QWORD *)(v28 + 88);
    if (v32)
      *(_DWORD *)(v32 + 24) += 2;
    v71 = v32;
    v72 = *(_DWORD *)(v28 + 96);
    v73 = *(_BYTE *)(v28 + 100);
    v33 = *(_QWORD *)(v28 + 104);
    if (v33)
      *(_DWORD *)(v33 + 24) += 2;
    v74 = v33;
    v75 = *(_DWORD *)(v28 + 112);
    v76 = *(_BYTE *)(v28 + 116);
    v34 = *(_QWORD *)(v28 + 120);
    if (v34)
      *(_DWORD *)(v34 + 24) += 2;
    v77 = v34;
    v78 = *(_DWORD *)(v28 + 128);
    v79 = *(_BYTE *)(v28 + 132);
    v35 = *(_QWORD *)(v28 + 136);
    if (v35)
      *(_DWORD *)(v35 + 24) += 2;
    v81 = *(_DWORD *)(v28 + 144);
    v82 = *(_BYTE *)(v28 + 148);
    v83 = *(_WORD *)(v28 + 152);
    v84 = *(_BYTE *)(v28 + 154);
    *((_DWORD *)a2 + 6) += 4;
    v80 = v35;
    v68 = a2;
    if (v31)
    {
      if (*(_DWORD *)(v31 + 24) == 2)
      {
        if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v31, v26);
      }
      else
      {
        *(_DWORD *)(v31 + 24) -= 2;
      }
    }
    v69 = (int)a3;
    v70 = 0;
    WebCore::VisibleSelection::validate((uint64_t)&v66, 0);
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2, v36);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
    v37 = *(_QWORD *)(v28 + 40);
    *(_QWORD *)(v28 + 40) = 0;
    if (v37)
    {
      *(_BYTE *)(v37 + 80) = 0;
      if (*(_DWORD *)(v37 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      else
        --*(_DWORD *)(v37 + 8);
    }
    WebCore::FrameSelection::setSelection(v28, (uint64_t)&v66, 6u, 0, 0, 0, 0);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v66);
    v38 = *(_DWORD *)(v28 + 28);
    if (!v38)
    {
      __break(0xC471u);
      JUMPOUT(0x195F7A488);
    }
    goto LABEL_81;
  }
  if ((v19 & 0x800000000000000) != 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 296) + 3064) + 153))
    goto LABEL_19;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a4 = 8;
LABEL_62:
  *((_BYTE *)a4 + 16) = 1;
  do
  {
LABEL_83:
    v55 = __ldaxr(v14);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, v14));
  if (!v56)
  {
    atomic_store(1u, v14);
    v57 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v57 = off_1E31FE290;
    *((_QWORD *)v57 + 1) = v14;
    v66 = v57;
    WTF::ensureOnMainThread();
    v58 = v66;
    v66 = 0;
    if (v58)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v58 + 8))(v58);
  }
}

WebCore::Node *WebCore::DOMSelection::getRangeAt@<X0>(WebCore::DOMSelection *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  WebCore::Node *result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  WebCore::Node *v11;
  WebCore::Document *v12;
  WebCore::Range *v13;
  WebCore *v14;
  const WebCore::SimpleRange *v15;
  void *v16;
  WebCore::Node *v17;
  unsigned int v18;
  unsigned int v19;
  WebCore::Node *v20;
  WebCore::Node *v21[2];
  WebCore::Node *v22;
  char v23;

  result = (WebCore::Node *)WebCore::DOMSelection::rangeCount(this);
  if (result <= a2)
  {
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 72) + 8);
  if (*(_BYTE *)(v8 + 178))
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 240) + 8);
  v3 = (unsigned int *)(v9 + 8);
  do
    v10 = __ldaxr(v3);
  while (__stlxr(v10 + 1, v3));
  if ((*(_QWORD *)(*(_QWORD *)(v9 + 136) + 680) & 0x800000000000000) != 0)
  {
    result = WebCore::FrameSelection::associatedLiveRange(*(WebCore::Node **)(*(_QWORD *)(v9 + 296) + 3064), v21);
    v11 = v21[0];
    if (!v21[0])
    {
      result = (WebCore::Node *)WebCore::createLiveRangeBeforeShadowHostWithSelection((WebCore *)a3, *(WebCore::LocalFrame **)(*(_QWORD *)(*(_QWORD *)(v9 + 296) + 3064) + 88));
      *(_DWORD *)(a3 + 16) = 0;
      goto LABEL_19;
    }
LABEL_17:
    *(_QWORD *)a3 = v11;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_19;
  }
  result = (WebCore::Node *)WebCore::createLiveRangeBeforeShadowHostWithSelection((WebCore *)v21, *(WebCore::LocalFrame **)(*(_QWORD *)(*(_QWORD *)(v9 + 296) + 3064) + 88));
  v11 = v21[0];
  if (v21[0])
    goto LABEL_17;
  WebCore::VisibleSelection::firstRange((WebCore::Node *)(*(_QWORD *)(*(_QWORD *)(v9 + 296) + 3064) + 56), v21);
  if (!v23)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    atomic_store(1u, v3);
    v20 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v20 = off_1E31FE290;
    *((_QWORD *)v20 + 1) = v3;
    v21[0] = v20;
    WTF::ensureOnMainThread();
    result = v21[0];
    v21[0] = 0;
    if (result)
      return (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
    return result;
  }
  v12 = *(WebCore::Document **)(*((_QWORD *)v21[0] + 5) + 8);
  v13 = (WebCore::Range *)bmalloc::api::isoAllocate();
  v14 = WebCore::Range::Range(v13, v12);
  result = WebCore::setBothEndpoints(v14, (WebCore::Range *)v21, v15);
  *(_QWORD *)a3 = v13;
  *(_DWORD *)(a3 + 16) = 0;
  if (v23)
  {
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v16);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    result = v21[0];
    v21[0] = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v16);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  do
  {
LABEL_19:
    v18 = __ldaxr(v3);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v3));
  if (!v19)
    goto LABEL_28;
  return result;
}

unsigned int *WebCore::createLiveRangeBeforeShadowHostWithSelection(WebCore *this, WebCore::LocalFrame *a2)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WebCore::Document *v8;
  WebCore::Range *v9;
  WebCore *v10;
  const WebCore::SimpleRange *v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  result = WebCore::selectionShadowAncestor((unsigned int *)&v19, a2);
  v4 = v19;
  if (!v19)
  {
    *(_QWORD *)this = 0;
    return result;
  }
  v5 = *(_QWORD *)(v19 + 32);
  if (!v5)
  {
    __break(1u);
    return result;
  }
  v6 = *(_QWORD *)(v19 + 48) & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    v7 = 0;
    do
    {
      ++v7;
      v6 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL;
    }
    while (v6);
  }
  else
  {
    v7 = 0;
  }
  *(_DWORD *)(v5 + 24) += 4;
  v15 = v5;
  v16 = v7;
  v17 = v5;
  v18 = v7;
  v8 = *(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8);
  v9 = (WebCore::Range *)bmalloc::api::isoAllocate();
  v10 = WebCore::Range::Range(v9, v8);
  result = (unsigned int *)WebCore::setBothEndpoints(v10, (WebCore::Range *)&v15, v11);
  *(_QWORD *)this = v9;
  v13 = *(_DWORD *)(v5 + 24) - 2;
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) != 0)
    {
LABEL_17:
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v5, v12);
      goto LABEL_9;
    }
    result = WebCore::Node::removedLastRef((WebCore::Node *)v5, v12);
    v13 = *(_DWORD *)(v5 + 24);
  }
  else
  {
    *(_DWORD *)(v5 + 24) = v13;
  }
  v14 = v13 - 2;
  if (!v14)
    goto LABEL_17;
  *(_DWORD *)(v5 + 24) = v14;
LABEL_9:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v12);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

void WebCore::DOMSelection::addRange(WebCore::DOMSelection *this, WebCore::Range *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  unsigned __int8 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  WebCore::Node **v33;
  WebCore::Node *v34;
  int *v35;
  BOOL v36;
  WebCore::Node **v37;
  WebCore::Node *v38;
  int *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  _QWORD *v42;
  uint64_t v43;
  WebCore::Range *v44;
  _DWORD *v45;
  WebCore::Node *v46;
  int v47;
  WebCore::Node *v48;
  int v49;
  _QWORD v50[13];
  WebCore::Node *v51;
  uint64_t v52;
  WebCore::Node *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    return;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return;
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    goto LABEL_71;
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (!v6)
    return;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return;
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 296) + 3064);
  ++*(_DWORD *)(v10 + 28);
  if ((*(_QWORD *)(*(_QWORD *)(v7 + 136) + 680) & 0x800000000000000) == 0)
  {
    v11 = *((_QWORD *)a2 + 4);
    *(_DWORD *)(v11 + 24) += 2;
    v12 = *((_DWORD *)a2 + 10);
    v13 = *((_QWORD *)a2 + 7);
    *(_DWORD *)(v13 + 24) += 2;
    v14 = *((_DWORD *)a2 + 16);
    v56 = v11;
    v57 = v12;
    v58 = v13;
    v59 = v14;
    WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v10 + 56), &v51);
    if (!v55)
    {
      WebCore::VisibleSelection::VisibleSelection((uint64_t)v50, (uint64_t)&v56, 1, 0);
      WebCore::FrameSelection::setSelection(v10, (uint64_t)v50, 6u, 0, 0, 0, 0);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v50);
LABEL_26:
      v20 = v58;
      v58 = 0;
      if (v20)
      {
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v20, v15);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
      }
      v21 = v56;
      v56 = 0;
      if (v21)
      {
        if (*(_DWORD *)(v21 + 24) == 2)
        {
          if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v21, v15);
        }
        else
        {
          *(_DWORD *)(v21 + 24) -= 2;
        }
      }
      goto LABEL_32;
    }
    v16 = **((_QWORD **)v51 + 5);
    if (v16 && (*(_WORD *)(v16 + 28) & 0x80) != 0
      || (v25 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v51, (uint64_t)&v58), v25 == 129)
      || (char)v25 > 0
      || (v26 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v56, (uint64_t)&v53), v26 == 129)
      || (char)v26 > 0)
    {
LABEL_14:
      if (v55)
      {
        v17 = v53;
        v53 = 0;
        if (v17)
        {
          if (*((_DWORD *)v17 + 6) == 2)
          {
            if ((*((_WORD *)v17 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v17, v15);
          }
          else
          {
            *((_DWORD *)v17 + 6) -= 2;
          }
        }
        v18 = v51;
        v51 = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 6) == 2)
          {
            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v18, v15);
          }
          else
          {
            *((_DWORD *)v18 + 6) -= 2;
          }
        }
      }
      goto LABEL_26;
    }
    if (v55)
    {
      v27 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v56, (uint64_t)&v51);
      v28 = v27 != 129;
      v29 = (v27 & 0x80u) != 0;
      v30 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v53, (uint64_t)&v58);
      v31 = v30 != 129;
      v32 = (v30 & 0x80u) != 0;
      if (v28 && v29)
        v33 = (WebCore::Node **)&v56;
      else
        v33 = &v51;
      v34 = *v33;
      *((_DWORD *)v34 + 6) += 2;
      v46 = v34;
      v35 = (int *)&v52;
      if (v28 && v29)
        v35 = &v57;
      v47 = *v35;
      v36 = !v31 || !v32;
      if (v31 && v32)
        v37 = (WebCore::Node **)&v58;
      else
        v37 = &v53;
      v38 = *v37;
      *((_DWORD *)v38 + 6) += 2;
      v48 = v38;
      v39 = (int *)&v54;
      if (!v36)
        v39 = &v59;
      v49 = *v39;
      WebCore::VisibleSelection::VisibleSelection((uint64_t)v50, (uint64_t)&v46, 1, 0);
      WebCore::FrameSelection::setSelection(v10, (uint64_t)v50, 6u, 0, 0, 0, 0);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v50);
      v40 = v48;
      v48 = 0;
      if (v40)
      {
        if (*((_DWORD *)v40 + 6) == 2)
        {
          if ((*((_WORD *)v40 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v40, v15);
        }
        else
        {
          *((_DWORD *)v40 + 6) -= 2;
        }
      }
      v41 = v46;
      v46 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 6) == 2)
        {
          if ((*((_WORD *)v41 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v41, v15);
        }
        else
        {
          *((_DWORD *)v41 + 6) -= 2;
        }
      }
      goto LABEL_14;
    }
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (!*(_BYTE *)(v10 + 153))
  {
    v19 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v10 + 40) = 0;
    if (v19)
    {
      v44 = a2;
      *(_BYTE *)(v19 + 80) = 0;
      if (*(_DWORD *)(v19 + 8) == 1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v45 = *(_DWORD **)(v10 + 40);
        a2 = v44;
        ++*((_DWORD *)v44 + 2);
        *(_QWORD *)(v10 + 40) = v44;
        if (v45)
        {
          if (v45[2] == 1)
            (*(void (**)(_DWORD *, WebCore::Range *))(*(_QWORD *)v45 + 8))(v45, v44);
          else
            --v45[2];
          a2 = v44;
        }
      }
      else
      {
        --*(_DWORD *)(v19 + 8);
        ++*((_DWORD *)a2 + 2);
        *(_QWORD *)(v10 + 40) = a2;
      }
    }
    else
    {
      ++*((_DWORD *)a2 + 2);
      *(_QWORD *)(v10 + 40) = a2;
    }
    *((_BYTE *)a2 + 80) = 1;
    WebCore::FrameSelection::updateFromAssociatedLiveRange((WebCore::FrameSelection *)v10);
  }
LABEL_32:
  v22 = *(_DWORD *)(v10 + 28);
  if (!v22)
  {
LABEL_72:
    __break(0xC471u);
    JUMPOUT(0x195F7AF78);
  }
  *(_DWORD *)(v10 + 28) = v22 - 1;
  do
  {
    v23 = __ldaxr(v8);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v8));
  if (!v24)
  {
    atomic_store(1u, v8);
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v42 = off_1E31FE290;
    v42[1] = v8;
    v50[0] = v42;
    WTF::ensureOnMainThread();
    v43 = v50[0];
    v50[0] = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
}

void WebCore::DOMSelection::removeRange(WebCore::DOMSelection *this@<X0>, WebCore::Range *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v12;
  unsigned int v13;
  WebCore::Range *v14;
  char v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  WebCore::Range *v19;
  WebCore::Range *v20;
  WebCore::Range *v21;

  v4 = *((_QWORD *)this + 1);
  if (!v4)
    goto LABEL_15;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_15;
  v6 = *(_QWORD *)(v5 + 72);
  if (!v6)
    goto LABEL_15;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_15;
  if (*(_BYTE *)(v7 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F7B17CLL);
  }
  v8 = *(_QWORD *)(v7 + 240);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    v12 = (unsigned int *)(v9 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    WebCore::FrameSelection::associatedLiveRange(*(WebCore::Node **)(*(_QWORD *)(v9 + 296) + 3064), &v21);
    v14 = v21;
    v21 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 2) == 1)
        (*(void (**)(WebCore::Range *))(*(_QWORD *)v14 + 8))(v14);
      else
        --*((_DWORD *)v14 + 2);
    }
    if (v14 == a2)
    {
      WebCore::DOMSelection::removeAllRanges(this);
      v16 = 0;
      v15 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    else
    {
      a3[1] = 0;
      v15 = 1;
      v16 = 5;
    }
    *(_BYTE *)a3 = v16;
    *((_BYTE *)a3 + 16) = v15;
    do
    {
      v17 = __ldaxr(v12);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v12));
    if (!v18)
    {
      atomic_store(1u, v12);
      v19 = (WebCore::Range *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v19 = off_1E31FE290;
      *((_QWORD *)v19 + 1) = v12;
      v21 = v19;
      WTF::ensureOnMainThread();
      v20 = v21;
      v21 = 0;
      if (v20)
        (*(void (**)(WebCore::Range *))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  else
  {
LABEL_15:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

WebCore::Node *WebCore::DOMSelection::getComposedRanges@<X0>(WebCore::Node *result@<X0>, unsigned int **a2@<X1>, WebCore::Node **a3@<X8>)
{
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int i;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  WebCore::Node *v43;
  int k;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int j;
  uint64_t v53;
  int v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  WebCore::Node *v59;
  uint64_t v60;
  uint64_t v61;
  WebCore::Node *v62;
  int v63;
  WebCore::Node *v64;
  uint64_t v65;
  void *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  WebCore::Node *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  int n;
  uint64_t v83;
  int v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int m;
  uint64_t v91;
  WebCore::Node *v92;
  _QWORD *v93;
  WebCore::Node *v94;
  int v95;
  WebCore::Node *v96;
  int v97;
  char v98;

  v5 = *((_QWORD *)result + 1);
  if (!v5)
    goto LABEL_13;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_13;
  v7 = *(_QWORD *)(v6 + 72);
  if (!v7)
    goto LABEL_13;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_13;
  if (*(_BYTE *)(v8 + 178))
  {
    __break(0xC471u);
LABEL_184:
    __break(1u);
LABEL_185:
    atomic_store(1u, v3);
    v92 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v92 = off_1E31FE290;
    *((_QWORD *)v92 + 1) = v3;
    v94 = v92;
    WTF::ensureOnMainThread();
    result = v94;
    v94 = 0;
    if (result)
      return (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
    return result;
  }
  v9 = *(_QWORD *)(v8 + 240);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
  {
LABEL_13:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  v3 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldaxr(v3);
  while (__stlxr(v12 + 1, v3));
  result = (WebCore::Node *)WebCore::VisibleSelection::range((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v10 + 296) + 3064) + 56), (uint64_t)&v94);
  if (!v98)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_134;
  }
  if (*a2)
    v13 = **a2;
  else
    v13 = 0;
  v14 = (v13 - 1) | ((v13 - 1) >> 1) | (((v13 - 1) | ((v13 - 1) >> 1)) >> 2);
  v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
  v16 = (v15 | HIWORD(v15)) + 1;
  if (v16 > 0x400)
  {
    if (v16 > 2 * (unint64_t)v13)
      goto LABEL_21;
  }
  else if (3 * v16 > 4 * (unint64_t)v13)
  {
LABEL_19:
    v17 = (double)v13;
    v18 = (double)v16;
    v19 = 0.604166667;
    goto LABEL_22;
  }
  LODWORD(v16) = 2 * v16;
  if (v16 <= 0x400)
    goto LABEL_19;
LABEL_21:
  v17 = (double)v13;
  v18 = (double)v16;
  v19 = 0.416666667;
LABEL_22:
  if (v18 * v19 <= v17)
    LODWORD(v16) = 2 * v16;
  if (v16 <= 8)
    v20 = 8;
  else
    v20 = v16;
  v21 = WTF::fastZeroedMalloc((WTF *)(8 * v20 + 16));
  v93 = (_QWORD *)(v21 + 16);
  *(_DWORD *)(v21 + 8) = v20 - 1;
  *(_DWORD *)(v21 + 12) = v20;
  *(_QWORD *)v21 = 0;
  v23 = *a2;
  if (*a2)
    v24 = (uint64_t)(*a2 + 2);
  else
    v24 = 0;
  if (v23)
    v25 = (uint64_t)&(*a2)[2 * *v23 + 2];
  else
    v25 = 0;
  if (v24 == v25)
    goto LABEL_66;
  do
  {
    v26 = *(_QWORD *)v24;
    *(_DWORD *)(*(_QWORD *)v24 + 24) += 2;
    v27 = (uint64_t)v93;
    if (v93
      || (WTF::HashTable<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>>::rehash((uint64_t *)&v93, 8u), (v27 = (uint64_t)v93) != 0))
    {
      v28 = *(_DWORD *)(v27 - 8);
    }
    else
    {
      v28 = 0;
    }
    v29 = 0;
    v30 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
    v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
    v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
    v33 = (v32 >> 31) ^ v32;
    for (i = 1; ; ++i)
    {
      v35 = v33 & v28;
      v36 = (uint64_t *)(v27 + 8 * v35);
      v37 = *v36;
      if (*v36 != -1)
        break;
      v29 = (_QWORD *)(v27 + 8 * v35);
LABEL_43:
      v33 = i + v35;
    }
    if (!v37)
    {
      if (v29)
      {
        *v29 = 0;
        --*((_DWORD *)v93 - 4);
        *v29 = v26;
      }
      else
      {
        *v36 = v26;
      }
      v38 = (uint64_t)v93;
      if (v93)
        v39 = *((_DWORD *)v93 - 3) + 1;
      else
        v39 = 1;
      *((_DWORD *)v93 - 3) = v39;
      v40 = (*(_DWORD *)(v38 - 16) + v39);
      v41 = *(unsigned int *)(v38 - 4);
      if (v41 > 0x400)
      {
        if (v41 > 2 * v40)
          goto LABEL_60;
      }
      else
      {
        if (3 * v41 > 4 * v40)
          goto LABEL_60;
        if (!(_DWORD)v41)
        {
          v42 = 8;
          goto LABEL_59;
        }
      }
      v42 = (_DWORD)v41 << (6 * v39 >= (2 * v41));
LABEL_59:
      WTF::HashTable<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>,WTF::HashTraits<WTF::Ref<WebCore::HTMLSlotElement,WTF::RawPtrTraits<WebCore::HTMLSlotElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLSlotElement>>>>::rehash((uint64_t *)&v93, v42);
      goto LABEL_60;
    }
    if (v37 != v26)
      goto LABEL_43;
    if (v26)
    {
      if (*(_DWORD *)(v26 + 24) == 2)
      {
        if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v26, v22);
      }
      else
      {
        *(_DWORD *)(v26 + 24) -= 2;
      }
    }
LABEL_60:
    v24 += 8;
  }
  while (v24 != v25);
LABEL_66:
  if (!v98)
    goto LABEL_184;
  v43 = v94;
  *((_DWORD *)v94 + 6) += 2;
  k = v95;
  if ((*((_BYTE *)v43 + 22) & 0x10) == 0)
    goto LABEL_111;
  v45 = (uint64_t)v93;
  while (2)
  {
    if ((*(_WORD *)(**((_QWORD **)v43 + 5) + 28) & 0x80) != 0)
      v46 = **((_QWORD **)v43 + 5);
    else
      v46 = 0;
    if (v46)
      *(_DWORD *)(v46 + 24) += 2;
    if (v45)
    {
      v47 = *(_DWORD *)(v45 - 8);
      v48 = (~(v46 << 32) + v46) ^ ((unint64_t)(~(v46 << 32) + v46) >> 22);
      v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
      v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
      v51 = v47 & ((v50 >> 31) ^ v50);
      for (j = 1; ; ++j)
      {
        v53 = *(_QWORD *)(v45 + 8 * v51);
        if (v53 != -1)
        {
          if (!v53)
            goto LABEL_80;
          if (v53 == v46)
            break;
        }
        v51 = (v51 + j) & v47;
      }
      v54 = 0;
      if (v46)
      {
LABEL_83:
        if (*(_DWORD *)(v46 + 24) == 2)
        {
          if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v46, v22);
        }
        else
        {
          *(_DWORD *)(v46 + 24) -= 2;
        }
      }
    }
    else
    {
LABEL_80:
      v54 = 1;
      if (v46)
        goto LABEL_83;
    }
    if (v54)
    {
      v55 = **((_QWORD **)v43 + 5);
      if (v55)
        v56 = (*(_WORD *)(v55 + 28) & 0x80) == 0;
      else
        v56 = 1;
      if (!v56 && (v57 = *(_QWORD *)(v55 + 200)) != 0)
      {
        v58 = *(_QWORD *)(v57 + 8);
        if (v58)
          *(_DWORD *)(v58 + 24) += 2;
      }
      else
      {
        v58 = 0;
      }
      v59 = *(WebCore::Node **)(v58 + 32);
      *((_DWORD *)v59 + 6) += 2;
      if (*((_DWORD *)v43 + 6) == 2)
      {
        if ((*((_WORD *)v43 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v43, v22);
      }
      else
      {
        *((_DWORD *)v43 + 6) -= 2;
      }
      v60 = *(_QWORD *)(v58 + 48);
      for (k = 0; ; ++k)
      {
        v61 = v60 & 0xFFFFFFFFFFFFLL;
        if (!v61)
          break;
        v60 = *(_QWORD *)(v61 + 48);
      }
      if (*(_DWORD *)(v58 + 24) == 2)
      {
        if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v58, v22);
      }
      else
      {
        *(_DWORD *)(v58 + 24) -= 2;
      }
      v43 = v59;
      if ((*((_BYTE *)v59 + 22) & 0x10) == 0)
        goto LABEL_110;
      continue;
    }
    break;
  }
  v59 = v43;
LABEL_110:
  v43 = v59;
  if (!v98)
    goto LABEL_184;
LABEL_111:
  v62 = v96;
  *((_DWORD *)v96 + 6) += 2;
  v63 = v97;
  if ((*((_BYTE *)v62 + 22) & 0x10) != 0)
  {
    v75 = (uint64_t)v93;
    while (1)
    {
      if ((*(_WORD *)(**((_QWORD **)v62 + 5) + 28) & 0x80) != 0)
        v76 = **((_QWORD **)v62 + 5);
      else
        v76 = 0;
      if (v76)
        *(_DWORD *)(v76 + 24) += 2;
      if (v75)
        break;
LABEL_149:
      v84 = 1;
      if (v76)
        goto LABEL_152;
LABEL_154:
      if (!v84)
        goto LABEL_112;
      v85 = **((_QWORD **)v62 + 5);
      if (v85)
        v86 = (*(_WORD *)(v85 + 28) & 0x80) == 0;
      else
        v86 = 1;
      if (!v86 && (v87 = *(_QWORD *)(v85 + 200)) != 0)
      {
        v88 = *(_QWORD *)(v87 + 8);
        if (v88)
          *(_DWORD *)(v88 + 24) += 2;
      }
      else
      {
        v88 = 0;
      }
      v64 = *(WebCore::Node **)(v88 + 32);
      *((_DWORD *)v64 + 6) += 2;
      if (*((_DWORD *)v62 + 6) == 2)
      {
        if ((*((_WORD *)v62 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v62, v22);
      }
      else
      {
        *((_DWORD *)v62 + 6) -= 2;
      }
      v89 = *(_QWORD *)(v88 + 48);
      for (m = 0; ; ++m)
      {
        v91 = v89 & 0xFFFFFFFFFFFFLL;
        if (!v91)
          break;
        v89 = *(_QWORD *)(v91 + 48);
      }
      if (*(_DWORD *)(v88 + 24) == 2)
      {
        if ((*(_WORD *)(v88 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v88, v22);
      }
      else
      {
        *(_DWORD *)(v88 + 24) -= 2;
      }
      v63 = m + 1;
      v62 = v64;
      if ((*((_BYTE *)v64 + 22) & 0x10) == 0)
        goto LABEL_113;
    }
    v77 = *(_DWORD *)(v75 - 8);
    v78 = (~(v76 << 32) + v76) ^ ((unint64_t)(~(v76 << 32) + v76) >> 22);
    v79 = 9 * ((v78 + ~(v78 << 13)) ^ ((v78 + ~(v78 << 13)) >> 8));
    v80 = (v79 ^ (v79 >> 15)) + ~((v79 ^ (v79 >> 15)) << 27);
    v81 = v77 & ((v80 >> 31) ^ v80);
    for (n = 1; ; ++n)
    {
      v83 = *(_QWORD *)(v75 + 8 * v81);
      if (v83 != -1)
      {
        if (!v83)
          goto LABEL_149;
        if (v83 == v76)
          break;
      }
      v81 = (v81 + n) & v77;
    }
    v84 = 0;
    if (!v76)
      goto LABEL_154;
LABEL_152:
    if (*(_DWORD *)(v76 + 24) == 2)
    {
      if ((*(_WORD *)(v76 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v76, v22);
    }
    else
    {
      *(_DWORD *)(v76 + 24) -= 2;
    }
    goto LABEL_154;
  }
LABEL_112:
  v64 = v62;
LABEL_113:
  v65 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v65 + 8) = 1;
  *(_QWORD *)(v65 + 16) = v43;
  *(_DWORD *)(v65 + 24) = k;
  *(_QWORD *)(v65 + 32) = v64;
  *(_DWORD *)(v65 + 40) = v63;
  *(_QWORD *)v65 = off_1E33A7EF0;
  result = (WebCore::Node *)WTF::fastMalloc((WTF *)8);
  *a3 = result;
  v67 = *(_DWORD *)(v65 + 8);
  *(_DWORD *)(v65 + 8) = v67 + 1;
  *(_QWORD *)result = v65;
  a3[1] = (WebCore::Node *)0x100000001;
  if (v67)
    *(_DWORD *)(v65 + 8) = v67;
  else
    result = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v68 = (uint64_t)v93;
  if (v93)
  {
    v69 = *((unsigned int *)v93 - 1);
    if ((_DWORD)v69)
    {
      v70 = v93;
      do
      {
        v71 = *v70;
        if (*v70 != -1)
        {
          *v70 = 0;
          if (v71)
          {
            if (*(_DWORD *)(v71 + 24) == 2)
            {
              if ((*(_WORD *)(v71 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v71, v66);
            }
            else
            {
              *(_DWORD *)(v71 + 24) -= 2;
            }
          }
        }
        ++v70;
        --v69;
      }
      while (v69);
    }
    result = (WebCore::Node *)WTF::fastFree((WTF *)(v68 - 16), v66);
  }
  if (v98)
  {
    v72 = v96;
    v96 = 0;
    if (v72)
    {
      if (*((_DWORD *)v72 + 6) == 2)
      {
        if ((*((_WORD *)v72 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v72, v66);
      }
      else
      {
        *((_DWORD *)v72 + 6) -= 2;
      }
    }
    result = v94;
    v94 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v66);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  do
  {
LABEL_134:
    v73 = __ldaxr(v3);
    v74 = v73 - 1;
  }
  while (__stlxr(v74, v3));
  if (!v74)
    goto LABEL_185;
  return result;
}

void WebCore::DOMSelection::deleteFromDocument(WebCore::DOMSelection *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  _QWORD *v10;
  BOOL v11;
  WebCore::Document *v12;
  WebCore::Range *v13;
  WebCore *v14;
  const WebCore::SimpleRange *v15;
  char v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore::Node *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WebCore::Node *v24;
  int v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  int v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  WebCore::DOMSelection *v35;
  WebCore::Node *v36;
  BOOL v37;
  WebCore::Node *v38;
  int v39;
  WebCore::Node *v40;
  int v41;
  char v42;
  WebCore::Node *v43;
  int v44;
  WebCore::Node *v45;
  char v46;
  _QWORD *v47;
  WTF::StringImpl *v48;
  int v49;
  char v50;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 72);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (*(_BYTE *)(v4 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x195F7BDF8);
          }
          v5 = *(_QWORD *)(v4 + 240);
          if (v5)
          {
            v6 = *(_QWORD *)(v5 + 8);
            if (v6)
            {
              v7 = (unsigned int *)(v6 + 8);
              do
                v8 = __ldaxr(v7);
              while (__stlxr(v8 + 1, v7));
              if ((*(_QWORD *)(*(_QWORD *)(v6 + 136) + 680) & 0x800000000000000) == 0)
              {
                WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v6 + 296) + 3064) + 56), &v43);
                if (!v46)
                  goto LABEL_57;
                v10 = (_QWORD *)*((_QWORD *)v43 + 5);
                if (*v10)
                  v11 = (*(_WORD *)(*v10 + 28) & 0x80) == 0;
                else
                  v11 = 1;
                if (!v11)
                  goto LABEL_51;
                v12 = (WebCore::Document *)v10[1];
                v13 = (WebCore::Range *)bmalloc::api::isoAllocate();
                v14 = WebCore::Range::Range(v13, v12);
                WebCore::setBothEndpoints(v14, (WebCore::Range *)&v43, v15);
                WebCore::Range::processContents((uint64_t)v13, 0, (uint64_t)&v47);
                if (!v49)
                {
                  v17 = 0;
                  v16 = 1;
                  goto LABEL_33;
                }
                if (v49 == 1)
                {
                  v16 = 0;
                  v17 = v48;
                  v48 = 0;
LABEL_33:
                  ((void (*)(WebCore::Node **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16DocumentFragmentENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v49])(&v38, &v47);
                  if ((v16 & 1) == 0 && v17)
                  {
                    if (*(_DWORD *)v17 == 2)
                      WTF::StringImpl::destroy(v17, v22);
                    else
                      *(_DWORD *)v17 -= 2;
                  }
                  if (*((_DWORD *)v13 + 2) == 1)
                    (*(void (**)(WebCore::Range *))(*(_QWORD *)v13 + 8))(v13);
                  else
                    --*((_DWORD *)v13 + 2);
                  v23 = *(_QWORD *)(*(_QWORD *)(v6 + 296) + 3064);
                  ++*(_DWORD *)(v23 + 28);
                  if (v46)
                  {
                    v24 = v43;
                    v25 = v44;
                    *((_DWORD *)v43 + 6) += 4;
                    v38 = v24;
                    v39 = v25;
                    v40 = v24;
                    v41 = v25;
                    v42 = 1;
                    WebCore::VisibleSelection::VisibleSelection((uint64_t)&v47, (uint64_t)&v38, 1, 0);
                    if (v50)
                      WebCore::FrameSelection::setSelection(v23, (uint64_t)&v47, 4u, 0, 0, 0, 0);
                    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v47);
                    if (v42)
                    {
                      v26 = v40;
                      v40 = 0;
                      if (v26)
                      {
                        if (*((_DWORD *)v26 + 6) == 2)
                        {
                          if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v26, v9);
                        }
                        else
                        {
                          *((_DWORD *)v26 + 6) -= 2;
                        }
                      }
                      v27 = v38;
                      v38 = 0;
                      if (v27)
                      {
                        if (*((_DWORD *)v27 + 6) == 2)
                        {
                          if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v27, v9);
                        }
                        else
                        {
                          *((_DWORD *)v27 + 6) -= 2;
                        }
                      }
                    }
                    v28 = *(_DWORD *)(v23 + 28);
                    if (v28)
                    {
                      *(_DWORD *)(v23 + 28) = v28 - 1;
                      if (v46)
                      {
LABEL_51:
                        v29 = v45;
                        v45 = 0;
                        if (v29)
                        {
                          if (*((_DWORD *)v29 + 6) == 2)
                          {
                            if ((*((_WORD *)v29 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v29, v9);
                          }
                          else
                          {
                            *((_DWORD *)v29 + 6) -= 2;
                          }
                        }
                        v30 = v43;
                        v43 = 0;
                        if (v30)
                        {
                          if (*((_DWORD *)v30 + 6) == 2)
                          {
                            if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v30, v9);
                          }
                          else
                          {
                            *((_DWORD *)v30 + 6) -= 2;
                          }
                        }
                        goto LABEL_57;
                      }
                      do
                      {
LABEL_57:
                        v31 = __ldaxr(v7);
                        v32 = v31 - 1;
                      }
                      while (__stlxr(v32, v7));
                      if (!v32)
                      {
                        atomic_store(1u, v7);
                        v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                        *v33 = off_1E31FE290;
                        v33[1] = v7;
                        v47 = v33;
                        WTF::ensureOnMainThread();
                        v34 = v47;
                        v47 = 0;
                        if (v34)
                          (*(void (**)(_QWORD *))(*v34 + 8))(v34);
                      }
                      return;
                    }
                  }
                  else
                  {
                    __break(1u);
                  }
                  __break(0xC471u);
                  JUMPOUT(0x195F7BE60);
                }
LABEL_77:
                v35 = (WebCore::DOMSelection *)std::__throw_bad_variant_access[abi:sn180100]();
                WebCore::DOMSelection::containsNode(v35, v36, v37);
                return;
              }
              WebCore::FrameSelection::associatedLiveRange(*(WebCore::Node **)(*(_QWORD *)(v6 + 296) + 3064), &v43);
              if (!v43)
                goto LABEL_57;
              WebCore::Range::processContents((uint64_t)v43, 0, (uint64_t)&v47);
              if (v49)
              {
                if (v49 != 1)
                  goto LABEL_77;
                v18 = 0;
                v19 = v48;
                v48 = 0;
              }
              else
              {
                v19 = 0;
                v18 = 1;
              }
              ((void (*)(WebCore::Node **, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16DocumentFragmentENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v49])(&v38, &v47);
              if ((v18 & 1) == 0 && v19)
              {
                if (*(_DWORD *)v19 == 2)
                  WTF::StringImpl::destroy(v19, v20);
                else
                  *(_DWORD *)v19 -= 2;
              }
              v21 = v43;
              v43 = 0;
              if (v21)
              {
                if (*((_DWORD *)v21 + 2) == 1)
                  (*(void (**)(WebCore::Node *))(*(_QWORD *)v21 + 8))(v21);
                else
                  --*((_DWORD *)v21 + 2);
              }
              goto LABEL_57;
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::DOMSelection::containsNode(WebCore::DOMSelection *this, WebCore::Node *a2, int a3)
{
  int v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  WebCore::Node *v11[2];
  WebCore::Node *v12;
  char v13;

  v3 = a3;
  if ((*((_WORD *)a2 + 14) & 2) != 0)
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 680) + 680) & 0x800000000000000) != 0)
      v3 = a3;
    else
      v3 = 1;
  }
  WebCore::DOMSelection::range((uint64_t)this, (uint64_t)v11);
  if (!v13)
    return 0;
  if (v3)
    v5 = WebCore::intersects<(WebCore::TreeType)0>((int *)v11, (uint64_t)a2);
  else
    v5 = WebCore::contains<(WebCore::TreeType)0>((int *)v11, a2);
  v7 = v5;
  if (v13)
  {
    v8 = v12;
    v12 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8, v6);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    v9 = v11[0];
    v11[0] = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, v6);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
  }
  return v7;
}

WebCore::Node *WebCore::DOMSelection::toString@<X0>(WebCore::Node *this@<X0>, const WTF::String *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  __int16 v12;
  void *v13;
  WebCore::Node *v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  WebCore::Node *v18;
  uint64_t v19;
  WebCore::Node *v20[2];
  WebCore::Node *v21;
  char v22;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    goto LABEL_14;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_14;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    goto LABEL_14;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_14;
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F7C0ECLL);
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 296) + 688);
    if (!v11)
    {
      v19 = v8;
      v11 = WebCore::Document::ensureQuirks(*(WebCore::Document **)(v8 + 296));
      v8 = v19;
    }
    v12 = (*(_BYTE *)(v11 + 66) == 0) << 11;
    if ((*(_QWORD *)(*(_QWORD *)(v8 + 136) + 680) & 0x800000000000000) != 0)
      this = (WebCore::Node *)WebCore::VisibleSelection::range((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v8 + 296) + 3064) + 56), (uint64_t)v20);
    else
      this = WebCore::VisibleSelection::firstRange((WebCore::Node *)(*(_QWORD *)(*(_QWORD *)(v8 + 296) + 3064) + 56), v20);
    if (v22)
    {
      this = WebCore::plainText(v20, v12, 0, a2);
      if (v22)
      {
        v14 = v21;
        v21 = 0;
        if (v14)
        {
          if (*((_DWORD *)v14 + 6) == 2)
          {
            if ((*((_WORD *)v14 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v14, v13);
          }
          else
          {
            *((_DWORD *)v14 + 6) -= 2;
          }
        }
        this = v20[0];
        v20[0] = 0;
        if (this)
        {
          if (*((_DWORD *)this + 6) == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = (WebCore::Node *)WebCore::Node::removedLastRef(this, v13);
          }
          else
          {
            *((_DWORD *)this + 6) -= 2;
          }
        }
      }
    }
    else
    {
      v15 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v15 += 2;
      *(_QWORD *)a2 = v15;
    }
    do
    {
      v16 = __ldaxr(v9);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v9));
    if (!v17)
    {
      atomic_store(1u, v9);
      v18 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v18 = off_1E31FE290;
      *((_QWORD *)v18 + 1) = v9;
      v20[0] = v18;
      WTF::ensureOnMainThread();
      this = v20[0];
      v20[0] = 0;
      if (this)
        return (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)this + 8))(this);
    }
  }
  else
  {
LABEL_14:
    *(_QWORD *)a2 = 0;
  }
  return this;
}

double WebCore::DOMTimer::intervalClampedToMinimum(WebCore::DOMTimer *this)
{
  double result;
  double v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  double v7;
  double v8;

  result = *((double *)this + 8);
  v2 = 0.001;
  if (*((_BYTE *)this + 76))
  {
    v2 = 0.0;
    v3 = 10;
  }
  else
  {
    v3 = 5;
  }
  if (v2 >= result)
    result = v2;
  if (*((_DWORD *)this + 11) >= v3)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    if (v4)
      v5 = v4 - 96;
    else
      v5 = 0;
    v8 = result;
    v7 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 360))(v5);
    result = v8;
    if (v8 < v7)
      result = v7;
    if (*((_DWORD *)this + 18) == 1 && result < 1.0)
      return 1.0;
  }
  return result;
}

void WebCore::DOMTimer::updateThrottlingStateIfNecessary(WebCore::DOMTimer *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (*((_BYTE *)a2 + 8))
  {
    v2 = *a2;
    if (*a2)
    {
      if (*(_BYTE *)(v2 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x195F7C2FCLL);
      }
      v3 = *(_DWORD *)(v2 - 168);
      *(_DWORD *)(v2 - 168) = v3 + 2;
      v4 = *(_QWORD *)(v2 + 336);
      if (v4
        && (v5 = *(_QWORD *)(v4 + 8)) != 0
        && (v6 = *(_QWORD *)(v5 + 24)) != 0
        && (v7 = *(_QWORD *)(v6 + 8)) != 0
        && (*(_QWORD *)(*(_QWORD *)(v7 + 112) + 672) & 0x100000000000000) == 0)
      {
        if (*((_DWORD *)a1 + 18) != 1)
        {
LABEL_12:
          if (v3)
          {
            *(_DWORD *)(v2 - 168) = v3;
          }
          else if ((*(_WORD *)(v2 - 162) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 192), a2);
          }
          return;
        }
      }
      else
      {
        if (!*((_BYTE *)a2 + 10) && *(_QWORD *)(v2 + 1096) == a2[2])
        {
          if (!*((_BYTE *)a2 + 9) || *((_DWORD *)a1 + 18) == 1)
            goto LABEL_12;
          v8 = 1;
          goto LABEL_19;
        }
        if (*((_DWORD *)a1 + 18) == 2)
          goto LABEL_12;
      }
      v8 = 2;
LABEL_19:
      *((_DWORD *)a1 + 18) = v8;
      WebCore::DOMTimer::updateTimerIntervalIfNecessary(a1);
      v3 = *(_DWORD *)(v2 - 168) - 2;
      goto LABEL_12;
    }
  }
}

WebCore::ImminentlyScheduledWorkScope *WebCore::DOMTimer::stop(WebCore::DOMTimer *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::ImminentlyScheduledWorkScope *result;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
    {
      v6 = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(_QWORD *)(v3 + 56);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 0;
        v8 = *(unsigned int **)(v3 + 56);
        *(_QWORD *)(v3 + 56) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v8);
            WTF::fastFree((WTF *)v8, a2);
          }
        }
      }
      else
      {
        *(_QWORD *)(v3 + 56) = 0;
      }
      WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)v3);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)(v3 + 48);
    }
  }
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = (WebCore::ImminentlyScheduledWorkScope *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::ImminentlyScheduledWorkScope::~ImminentlyScheduledWorkScope(result, a2);
      return (WebCore::ImminentlyScheduledWorkScope *)WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::alignedFireTime(uint64_t a1, double a2)
{
  WTF *v3;
  double v4;
  uint64_t result;
  long double v6;
  uint64_t v7;

  v4 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1);
  if (v4 == 0.0)
  {
    *(double *)&result = 0.0;
  }
  else
  {
    v6 = v4;
    {
      v7 = WebCore::ScriptExecutionContext::alignedFireTime(BOOL,WTF::MonotonicTime)const::randomizedProportion;
    }
    else
    {
      WTF::cryptographicallyRandomUnitInterval(v3);
      WebCore::ScriptExecutionContext::alignedFireTime(BOOL,WTF::MonotonicTime)const::randomizedProportion = v7;
    }
    *(double *)&result = v6 * *(double *)&v7 + v6 + a2 - v6 * *(double *)&v7 - fmod(a2 - v6 * *(double *)&v7, v6);
  }
  return result;
}

void WebCore::DOMWindow::createTargetOriginForPostMessage(WTF::StringImpl **a1@<X1>, WebCore::Document *a2@<X2>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v7;
  unsigned int *v8;
  WTF *v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF *v17;
  char v18;

  if (MEMORY[0x19AEA53F4](*a1, "/", 1))
  {
    WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)a2 + 192), v7);
    v9 = (WTF *)v8;
    if (v8)
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
    }
    goto LABEL_20;
  }
  if ((MEMORY[0x19AEA53F4](*a1, "*", 1) & 1) != 0)
  {
    v9 = 0;
LABEL_20:
    *(_QWORD *)a3 = v9;
    *(_DWORD *)(a3 + 16) = 0;
    return;
  }
  WebCore::SecurityOrigin::createFromString(a1, (uint64_t *)&v17);
  v9 = v17;
  if (*((_DWORD *)v17 + 8) != 1)
    goto LABEL_20;
  *(_BYTE *)a3 = 9;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1;
  do
  {
    v12 = __ldaxr((unsigned int *)v9);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, (unsigned int *)v9));
  if (!v13)
  {
    atomic_store(1u, (unsigned int *)v9);
    v14 = (WTF::StringImpl *)*((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 6) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = (WTF::StringImpl *)*((_QWORD *)v9 + 5);
    *((_QWORD *)v9 + 5) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = *((unsigned int *)v9 + 8);
    if ((_DWORD)v16 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_12[v16])(&v18, (char *)v9 + 8);
    *((_DWORD *)v9 + 8) = -1;
    WTF::fastFree(v9, v11);
  }
}

BOOL WebCore::DOMWindow::closed(WebCore::DOMWindow *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;

  v1 = (*(uint64_t (**)(WebCore::DOMWindow *))(*(_QWORD *)this + 104))(this);
  if (!v1)
    return 1;
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = *(_QWORD *)(v1 + 24);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = (*(_DWORD *)v5)++;
    v7 = *(_BYTE *)(v5 + 1021) != 0;
    if (v6)
    {
      *(_DWORD *)v5 = v6;
    }
    else
    {
      WebCore::Page::~Page(v5);
      WTF::fastFree(v11, v12);
    }
  }
  else
  {
    v7 = 1;
  }
  do
  {
    v8 = __ldaxr(v2);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v2));
  if (!v9)
  {
    atomic_store(1u, v2);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E31FE290;
    v13[1] = v2;
    v14 = v13;
    WTF::ensureOnMainThread();
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
  return v7;
}

WTF::StringImpl *WebCore::DOMWindow::close(WebCore::DOMWindow *this, WebCore::Document *a2)
{
  uint64_t v4;
  WebCore::Frame *v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  _BOOL4 canNavigate;
  WTF::StringImpl *result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  v4 = (*(uint64_t (**)(WebCore::DOMWindow *))(*(_QWORD *)this + 104))(this);
  v5 = (WebCore::Frame *)v4;
  if (v4)
  {
    v6 = (unsigned int *)(v4 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v15[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v15);
  canNavigate = WebCore::Document::canNavigate(a2, v5, (const WTF::URL *)v15);
  result = v15[0];
  v15[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      if (!v5)
        goto LABEL_11;
      goto LABEL_8;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v5)
    goto LABEL_11;
LABEL_8:
  v11 = (unsigned int *)((char *)v5 + 8);
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v14 = off_1E31FE290;
    *((_QWORD *)v14 + 1) = v11;
    v15[0] = v14;
    WTF::ensureOnMainThread();
    result = v15[0];
    v15[0] = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
LABEL_11:
  if (canNavigate)
    return (WTF::StringImpl *)WebCore::DOMWindow::close(this);
  return result;
}

uint64_t WebCore::DOMWindow::close(WebCore::DOMWindow *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;
  unsigned int v11;
  WebCore::FrameLoader *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;

  result = (*(uint64_t (**)(WebCore::DOMWindow *))(*(_QWORD *)this + 104))(this);
  if (!result)
    return result;
  v3 = result;
  v4 = (unsigned int *)(result + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(result + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      ++*(_DWORD *)v7;
      if (*(_QWORD *)(*(_QWORD *)(result + 128) + 8) != result)
        goto LABEL_26;
      if (*(_BYTE *)(v7 + 336))
        goto LABEL_62;
      v8 = *(_DWORD **)(*(_QWORD *)(v7 + 136) + 16);
      ++v8[2];
      v9 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 40))(v8);
      v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 48))(v8);
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
      if ((v9 + v10 + 1) < 2)
      {
LABEL_62:
        do
          v11 = __ldaxr(v4);
        while (__stlxr(v11 + 1, v4));
        if (*(_BYTE *)(v3 + 144))
        {
          do
            v31 = __ldaxr(v4);
          while (__stlxr(v31 - 1, v4));
          if (v31 == 1)
          {
            atomic_store(1u, v4);
            v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v32 = off_1E31FE290;
            *((_QWORD *)v32 + 1) = v4;
            v34 = v32;
            WTF::ensureOnMainThread();
            v33 = v34;
            v34 = 0;
            if (v33)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v33 + 8))(v33);
          }
          v3 = 0;
        }
        else
        {
          v12 = *(WebCore::FrameLoader **)(v3 + 280);
          ++*(_DWORD *)v12;
          result = WebCore::FrameLoader::shouldClose(v12);
          if (!*(_DWORD *)v12)
          {
            __break(0xC471u);
            JUMPOUT(0x195F7CB44);
          }
          --*(_DWORD *)v12;
          if (!(_DWORD)result)
          {
LABEL_23:
            v16 = (unsigned int *)(v3 + 8);
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v30 = off_1E31FE290;
              *((_QWORD *)v30 + 1) = v16;
              v34 = v30;
              WTF::ensureOnMainThread();
              result = (uint64_t)v34;
              v34 = 0;
              if (result)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            }
            goto LABEL_26;
          }
        }
        {
          WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
        }
        if (WebCore::sharedObserver(void)::observer)
          v13 = (uint64_t *)WebCore::sharedObserver(void)::observer;
        else
          v13 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
        v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v14 = off_1E33FE590;
        v34 = v14;
        (*(void (**)(uint64_t *, WTF::StringImpl **))(*v13 + 96))(v13, &v34);
        v15 = v34;
        v34 = 0;
        if (v15)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v15 + 8))(v15);
        *(_BYTE *)(v7 + 1021) = 1;
        result = (*(uint64_t (**)(WebCore::DOMWindow *))(*(_QWORD *)this + 120))(this);
        if (!v3)
          goto LABEL_26;
        goto LABEL_23;
      }
      v23 = (*(uint64_t (**)(WebCore::DOMWindow *))(*(_QWORD *)this + 104))(this);
      if (v23 && (v24 = *(_QWORD *)(v23 + 24)) != 0 && (v25 = *(_QWORD *)(v24 + 8)) != 0)
      {
        v26 = *(_QWORD *)(v25 + 792);
        if (v26)
          ++*(_DWORD *)(v26 + 16);
      }
      else
      {
        v26 = 0;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::PageConsoleClient::addMessage((uint64_t *)v26, 1, 1, (uint64_t)&v34, 0, 0);
      result = (uint64_t)v34;
      v34 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v27);
          if (v26)
            goto LABEL_42;
          goto LABEL_26;
        }
        *(_DWORD *)result -= 2;
      }
      if (v26)
      {
LABEL_42:
        v28 = *(_DWORD *)(v26 + 16);
        if (!v28)
        {
          __break(0xC471u);
          JUMPOUT(0x195F7CBA8);
        }
        *(_DWORD *)(v26 + 16) = v28 - 1;
      }
LABEL_26:
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::Page::~Page(v7);
        result = WTF::fastFree(v21, v22);
      }
      else
      {
        --*(_DWORD *)v7;
      }
      goto LABEL_28;
    }
  }
  do
  {
LABEL_28:
    v19 = __ldaxr(v4);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v4));
  if (!v20)
  {
    atomic_store(1u, v4);
    v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v29 = off_1E31FE290;
    *((_QWORD *)v29 + 1) = v4;
    v34 = v29;
    WTF::ensureOnMainThread();
    result = (uint64_t)v34;
    v34 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::DOMWindow::opener(WebCore::DOMWindow *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = (*(uint64_t (**)(WebCore::DOMWindow *))(*(_QWORD *)this + 104))(this);
  if (!v1)
    return 0;
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = *(_QWORD *)(v1 + 160);
  if (v4 && (v9 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v5 = *(_QWORD *)(v9 + 112);
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      v14 = v10;
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v15 = off_1E31FE290;
      v15[1] = v14;
      v17 = v15;
      WTF::ensureOnMainThread();
      if (v17)
        (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    }
  }
  else
  {
    v5 = 0;
  }
  do
  {
    v6 = __ldaxr(v2);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v2));
  if (!v7)
  {
    atomic_store(1u, v2);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E31FE290;
    v16[1] = v2;
    v18 = v16;
    WTF::ensureOnMainThread();
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  return v5;
}

uint64_t WebCore::DOMWindow::parent(WebCore::DOMWindow *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v14;
  unsigned int *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = (*(uint64_t (**)(WebCore::DOMWindow *))(*(_QWORD *)this + 104))(this);
  if (!v1)
    return 0;
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = *(_QWORD *)(v1 + 56);
  if (v4 && (v6 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v5 = *(_QWORD *)(v6 + 112);
    do
    {
      v9 = __ldaxr(v7);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v7));
    if (!v10)
    {
      atomic_store(1u, v7);
      v15 = v7;
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E31FE290;
      v16[1] = v15;
      v18 = v16;
      WTF::ensureOnMainThread();
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 112);
  }
  do
  {
    v11 = __ldaxr(v2);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v2));
  if (!v12)
  {
    atomic_store(1u, v2);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E31FE290;
    v14[1] = v2;
    v17 = v14;
    WTF::ensureOnMainThread();
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  return v5;
}

uint64_t WebCore::DOMWindow::length(WebCore::DOMWindow *this)
{
  if (*((_BYTE *)this + 56))
    return WebCore::RemoteDOMWindow::length(this);
  else
    return WebCore::LocalDOMWindow::length(this);
}

uint64_t WebCore::DOMWindow::documentIfLocal(WebCore::DOMWindow *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = 0;
  if (this && !*((_BYTE *)this + 56))
  {
    v3 = *((_QWORD *)this + 9);
    if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    {
      if (*(_BYTE *)(v4 + 178))
      {
        result = 105;
        __break(0xC471u);
      }
      else
      {
        return v4 - 288;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void WebCore::DOMWindow::localStorage(WebCore::LocalDOMWindow *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  if (!this || *((_BYTE *)this + 56))
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
    WebCore::LocalDOMWindow::localStorage(this, a2, a3);
  }
}

WTF *WebCore::DOMWindow::postMessage@<X0>(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WTF::StringImpl **a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v18 = *(WTF **)a6;
  v7 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v19 = v7;
  v8 = *a5;
  *a5 = 0;
  v20 = v8;
  if (*(_BYTE *)(a1 + 56))
    WebCore::RemoteDOMWindow::postMessage((unsigned int *)a1, a2, a3, a4, (uint64_t)&v18, a7);
  else
    WebCore::LocalDOMWindow::postMessage(a1, a2, a3, a4, (uint64_t)&v18, a7);
  v10 = v20;
  v20 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v18;
  if (!HIDWORD(v19))
  {
    if (!v18)
      return result;
LABEL_18:
    v18 = 0;
    LODWORD(v19) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  v12 = 8 * HIDWORD(v19);
  do
  {
    v13 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v14 = (uint64_t *)(v13 - 16);
      v15 = *(_QWORD *)(((v13 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v16 = *(uint64_t **)(v13 - 8);
      if (v16)
      {
        v17 = *v14;
        *v16 = *v14;
        *(_QWORD *)(v17 + 8) = v16;
        *v14 = 0;
        v14[1] = 0;
      }
      *v14 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v14;
      *(_QWORD *)result = 0;
    }
    result = (WTF *)((char *)result + 8);
    v12 -= 8;
  }
  while (v12);
  result = v18;
  if (v18)
    goto LABEL_18;
  return result;
}

WebCore::LocalDOMWindow *WebCore::DOMWindow::matchMedia@<X0>(WebCore::LocalDOMWindow *this@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  int v4;

  if (!this || *((_BYTE *)this + 56))
  {
    *(_BYTE *)a3 = 14;
    *(_QWORD *)(a3 + 8) = 0;
    v4 = 1;
  }
  else
  {
    this = (WebCore::LocalDOMWindow *)WebCore::LocalDOMWindow::matchMedia(this, a2, (uint64_t *)a3);
    v4 = 0;
  }
  *(_DWORD *)(a3 + 16) = v4;
  return this;
}

uint64_t WebCore::DOMWindow::orientation@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  WTF *v11;
  void *v12;

  if (!this || *(_BYTE *)(this + 56))
  {
    *(_BYTE *)a2 = 14;
    *(_QWORD *)(a2 + 8) = 0;
    v10 = 1;
LABEL_15:
    *(_DWORD *)(a2 + 16) = v10;
    return this;
  }
  v3 = *(_QWORD *)(this + 72);
  if (!v3)
    goto LABEL_13;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_13;
  if (!*(_BYTE *)(v4 + 178))
  {
    v5 = *(_QWORD *)(v4 + 240);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            ++*(_DWORD *)v8;
            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 768))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16));
            v9 = this;
            if (*(_DWORD *)v8 == 1)
            {
              WebCore::Page::~Page(v8);
              this = WTF::fastFree(v11, v12);
            }
            else
            {
              --*(_DWORD *)v8;
            }
            goto LABEL_14;
          }
        }
      }
    }
LABEL_13:
    v9 = 0;
LABEL_14:
    v10 = 0;
    *(_DWORD *)a2 = v9;
    goto LABEL_15;
  }
  this = 105;
  __break(0xC471u);
  return this;
}

WebCore::DOMWindowExtension *WebCore::DOMWindowExtension::DOMWindowExtension(WebCore::DOMWindowExtension *this, WebCore::LocalDOMWindow *a2, WebCore::DOMWrapperWorld *a3)
{
  uint64_t v5;
  _DWORD *v6;
  unsigned int v8;
  _BYTE v9[24];

  v5 = 0;
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = off_1E33FE110;
  *((_QWORD *)this + 1) = 0;
  if (a2)
  {
    v5 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    if (v5)
    {
      do
        v8 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v8 + 1, (unsigned int *)v5));
    }
  }
  *((_QWORD *)this + 3) = v5;
  ++*(_DWORD *)a3;
  *((_QWORD *)this + 4) = a3;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  if (v5)
  {
    v6 = *(_DWORD **)(v5 + 8);
    if (v6)
    {
      ++v6[6];
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)(v6 + 24), this, (uint64_t)v9);
      if (v6[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
      else
        --v6[6];
    }
  }
  return this;
}

{
  uint64_t v5;
  _DWORD *v6;
  unsigned int v8;
  _BYTE v9[24];

  v5 = 0;
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = off_1E33FE110;
  *((_QWORD *)this + 1) = 0;
  if (a2)
  {
    v5 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    if (v5)
    {
      do
        v8 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v8 + 1, (unsigned int *)v5));
    }
  }
  *((_QWORD *)this + 3) = v5;
  ++*(_DWORD *)a3;
  *((_QWORD *)this + 4) = a3;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  if (v5)
  {
    v6 = *(_DWORD **)(v5 + 8);
    if (v6)
    {
      ++v6[6];
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)(v6 + 24), this, (uint64_t)v9);
      if (v6[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
      else
        --v6[6];
    }
  }
  return this;
}

void WebCore::DOMWindowExtension::~DOMWindowExtension(WebCore::DOMWindowExtension *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WebCore::DOMWrapperWorld *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_DWORD **)(v3 + 8);
    if (v4)
    {
      ++v4[6];
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v4 + 24), this);
      if (v4[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 72))(v4);
      else
        --v4[6];
    }
  }
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v19 = off_1E31FE290;
      v19[1] = v6;
      v24 = v19;
      WTF::ensureOnMainThread();
      if (v24)
        (*(void (**)(_QWORD *))(*v24 + 8))(v24);
    }
  }
  v9 = (WebCore::DOMWrapperWorld *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v9, a2);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v20 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v20)
      {
        v23 = v10;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v20));
        v10 = v23;
      }
      v21 = *(WTF **)(v10 + 16);
      if (v21)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        v22 = v10;
        WTF::fastFree(v21, a2);
        v10 = v22;
      }
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::DOMWindowExtension::~DOMWindowExtension(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::DOMWindowExtension::frame(WebCore::DOMWindowExtension *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 72);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (!*(_BYTE *)(v4 + 178))
  {
    v5 = *(_QWORD *)(v4 + 240);
    if (v5)
      return *(_QWORD *)(v5 + 8);
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::DOMWindowExtension::suspendForBackForwardCache(WebCore::DOMWindowExtension *this)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;

  ++*((_DWORD *)this + 4);
  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) + 8);
  if (*(_BYTE *)(v1 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F7D61CLL);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 240) + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(v3 + 280);
  ++*(_DWORD *)v6;
  result = (*(uint64_t (**)(_QWORD, WebCore::DOMWindowExtension *))(**(_QWORD **)(v6 + 16) + 1016))(*(_QWORD *)(v6 + 16), this);
  if (!*(_DWORD *)v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195F7D63CLL);
  }
  --*(_DWORD *)v6;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v3;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v15 = off_1E31FE290;
      v15[1] = v10;
      v16 = (uint64_t)v15;
      WTF::ensureOnMainThread();
      result = v16;
      if (v16)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::DOMWindowExtension::~DOMWindowExtension(this, v8);
    return WTF::fastFree(v13, v14);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return result;
}

uint64_t WebCore::DOMWindowExtension::resumeFromBackForwardCache(WebCore::DOMWindowExtension *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = off_1E31FE290;
      v14[1] = v3;
      v16 = v14;
      WTF::ensureOnMainThread();
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    }
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) + 8);
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F7D7B0);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 240) + 8);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v7 + 280);
  ++*(_DWORD *)v10;
  result = (*(uint64_t (**)(_QWORD, WebCore::DOMWindowExtension *))(**(_QWORD **)(v10 + 16) + 1024))(*(_QWORD *)(v10 + 16), this);
  if (!*(_DWORD *)v10)
  {
    __break(0xC471u);
    JUMPOUT(0x195F7D7D0);
  }
  --*(_DWORD *)v10;
  do
  {
    v12 = __ldaxr(v8);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v8));
  if (!v13)
  {
    atomic_store(1u, v8);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E31FE290;
    v15[1] = v8;
    v17 = (uint64_t)v15;
    WTF::ensureOnMainThread();
    result = v17;
    if (v17)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return result;
}

uint64_t WebCore::DOMWindowExtension::willDestroyGlobalObjectInCachedFrame(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  WTF *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = this;
  ++*(_DWORD *)(this + 16);
  v3 = *(_QWORD *)(this + 40);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v6 = *(_QWORD *)(v3 + 280);
    ++*(_DWORD *)v6;
    this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 16) + 1032))(*(_QWORD *)(v6 + 16), this);
    if (!*(_DWORD *)v6)
    {
      __break(0xC471u);
      JUMPOUT(0x195F7D988);
    }
    --*(_DWORD *)v6;
    do
    {
      v7 = __ldaxr(v4);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v4));
    if (!v8)
    {
      atomic_store(1u, v4);
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v21 = off_1E31FE290;
      v21[1] = v4;
      v25 = (uint64_t)v21;
      WTF::ensureOnMainThread();
      this = v25;
      if (v25)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    }
    v9 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v22 = off_1E31FE290;
        v22[1] = v10;
        v26 = (uint64_t)v22;
        WTF::ensureOnMainThread();
        this = v26;
        if (v26)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      }
    }
  }
  else
  {
    *(_QWORD *)(this + 40) = 0;
  }
  v13 = *(_QWORD *)(v2 + 24);
  if (v13)
  {
    v14 = *(_DWORD **)(v13 + 8);
    if (v14)
    {
      ++v14[6];
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v14 + 24), (_QWORD *)v2);
      if (v14[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 72))(v14);
      else
        --v14[6];
    }
    this = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (this)
    {
      do
      {
        v15 = __ldaxr((unsigned int *)this);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)this));
      if (!v16)
      {
        atomic_store(1u, (unsigned int *)this);
        v19 = *(unsigned int *)(this + 28);
        if ((_DWORD)v19)
        {
          v24 = this;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(this + 16), (WTF::StringImpl *)(*(_QWORD *)(this + 16) + 32 * v19));
          this = v24;
        }
        v20 = *(WTF **)(this + 16);
        if (v20)
        {
          *(_QWORD *)(this + 16) = 0;
          *(_DWORD *)(this + 24) = 0;
          v23 = this;
          WTF::fastFree(v20, a2);
          this = v23;
        }
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 24) = 0;
  }
  if (*(_DWORD *)(v2 + 16) == 1)
  {
    WebCore::DOMWindowExtension::~DOMWindowExtension((WebCore::DOMWindowExtension *)v2, (WTF::StringImpl *)a2);
    return WTF::fastFree(v17, v18);
  }
  else
  {
    --*(_DWORD *)(v2 + 16);
  }
  return this;
}

uint64_t WebCore::DOMWindowExtension::willDestroyGlobalObjectInFrame(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = this;
  ++*(_DWORD *)(this + 16);
  if (!*(_BYTE *)(this + 48))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 72) + 8);
    if (*(_BYTE *)(v3 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x195F7DBF8);
    }
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 240) + 8);
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = *(_QWORD *)(v4 + 280);
    ++*(_DWORD *)v7;
    this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 16) + 1032))(*(_QWORD *)(v7 + 16), this);
    if (!*(_DWORD *)v7)
    {
      __break(0xC471u);
      JUMPOUT(0x195F7DC18);
    }
    --*(_DWORD *)v7;
    do
    {
      v8 = __ldaxr(v5);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v5));
    if (!v9)
    {
      atomic_store(1u, v5);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = off_1E31FE290;
      v18[1] = v5;
      v21 = (uint64_t)v18;
      WTF::ensureOnMainThread();
      this = v21;
      if (v21)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  v10 = *(_QWORD *)(v2 + 24);
  if (v10)
  {
    v11 = *(_DWORD **)(v10 + 8);
    if (v11)
    {
      ++v11[6];
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)(v11 + 24), (_QWORD *)v2);
      if (v11[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 72))(v11);
      else
        --v11[6];
    }
    this = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (this)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)this);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)this));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)this);
        v16 = *(unsigned int *)(this + 28);
        if ((_DWORD)v16)
        {
          v20 = this;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(this + 16), (WTF::StringImpl *)(*(_QWORD *)(this + 16) + 32 * v16));
          this = v20;
        }
        v17 = *(WTF **)(this + 16);
        if (v17)
        {
          *(_QWORD *)(this + 16) = 0;
          *(_DWORD *)(this + 24) = 0;
          v19 = this;
          WTF::fastFree(v17, a2);
          this = v19;
        }
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 24) = 0;
  }
  if (*(_DWORD *)(v2 + 16) == 1)
  {
    WebCore::DOMWindowExtension::~DOMWindowExtension((WebCore::DOMWindowExtension *)v2, (WTF::StringImpl *)a2);
    return WTF::fastFree(v14, v15);
  }
  else
  {
    --*(_DWORD *)(v2 + 16);
  }
  return this;
}

uint64_t WebCore::DOMWindowExtension::willDetachGlobalObjectFromFrame(WebCore::DOMWindowExtension *this)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;

  ++*((_DWORD *)this + 4);
  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) + 8);
  if (*(_BYTE *)(v1 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195F7DD98);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 240) + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(v3 + 280);
  ++*(_DWORD *)v6;
  result = (*(uint64_t (**)(_QWORD, WebCore::DOMWindowExtension *))(**(_QWORD **)(v6 + 16) + 1032))(*(_QWORD *)(v6 + 16), this);
  if (!*(_DWORD *)v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195F7DDB8);
  }
  --*(_DWORD *)v6;
  *((_BYTE *)this + 48) = 1;
  do
  {
    v9 = __ldaxr(v4);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v4));
  if (!v10)
  {
    atomic_store(1u, v4);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E31FE290;
    v13[1] = v4;
    v14 = (uint64_t)v13;
    WTF::ensureOnMainThread();
    result = v14;
    if (v14)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::DOMWindowExtension::~DOMWindowExtension(this, v8);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return result;
}

uint64_t WebCore::MouseWheelRegionOverlay::updateRegion(WebCore::MouseWheelRegionOverlay *this)
{
  uint64_t v1;
  _DWORD *v2;
  int v3;
  WTF *v5;
  void *v6;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_DWORD **)(v1 + 8);
    if (v2)
    {
      v3 = (*v2)++;
      if (v3)
      {
        *v2 = v3;
      }
      else
      {
        WebCore::Page::~Page((uint64_t)v2);
        WTF::fastFree(v5, v6);
      }
    }
  }
  return 0;
}

BOOL WebCore::NonFastScrollableRegionOverlay::updateRegion(WebCore::NonFastScrollableRegionOverlay *this)
{
  uint64_t v1;
  WebCore::Page *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  WebCore::Document *v12;
  uint64_t v13;
  void *v14;
  _BOOL4 v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  WTF *v21;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  WTF *v39;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  WTF *v44;
  WTF *v46;
  _QWORD *v48;
  _QWORD *v49;
  __int128 v50;
  WTF *v51[2];
  uint64_t v52;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(WebCore::Page **)(v1 + 8);
  if (!v2)
    return 0;
  ++*(_DWORD *)v2;
  v4 = WebCore::Page::scrollingCoordinator(v2);
  if (!v4)
  {
    v8 = 0;
    goto LABEL_55;
  }
  v5 = v4;
  v6 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_9:
  ++*(_QWORD *)(v6 + 8);
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 160);
  if (v10)
    v11 = *(_BYTE *)(v10 + 144) == 0;
  else
    v11 = 0;
  if (v11
    && (v12 = *(WebCore::Document **)(v10 + 296)) != 0
    && (v13 = *((_QWORD *)v12 + 243)) != 0
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40) + 8) + 3405))
  {
    WebCore::Document::eventTrackingRegions(v12, (uint64_t)&v50);
  }
  else
  {
    v50 = 0u;
    *(_OWORD *)v51 = 0u;
  }
  v15 = WebCore::operator==((uint64_t)&v50, (uint64_t)this + 56);
  if (!v15)
  {
    WebCore::Region::operator=((uint64_t)this + 56, &v50);
    WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::HashTable(&v52, (unsigned __int8 **)&v51[1]);
    v16 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v52;
    v52 = v16;
    if (v16)
    {
      v41 = *(unsigned int *)(v16 - 4);
      if ((_DWORD)v41)
      {
        v42 = (_QWORD *)(v16 + 24);
        do
        {
          if (*((unsigned __int8 *)v42 - 24) != 254)
          {
            v43 = *v42;
            *v42 = 0;
            if (v43)
            {
              v49 = v42;
              v44 = *(WTF **)(v43 + 144);
              if ((WTF *)(v43 + 160) != v44 && v44 != 0)
              {
                *(_QWORD *)(v43 + 144) = 0;
                *(_DWORD *)(v43 + 152) = 0;
                WTF::fastFree(v44, v14);
              }
              v46 = *(WTF **)v43;
              if (v43 + 16 != *(_QWORD *)v43 && v46 != 0)
              {
                *(_QWORD *)v43 = 0;
                *(_DWORD *)(v43 + 8) = 0;
                WTF::fastFree(v46, v14);
              }
              WTF::fastFree((WTF *)v43, v14);
              v42 = v49;
            }
          }
          v42 += 4;
          --v41;
        }
        while (v41);
      }
      WTF::fastFree((WTF *)(v16 - 16), v14);
    }
  }
  v17 = v51[1];
  if (v51[1])
  {
    v34 = *((unsigned int *)v51[1] - 1);
    if ((_DWORD)v34)
    {
      v35 = (_QWORD *)((char *)v51[1] + 24);
      do
      {
        if (*((unsigned __int8 *)v35 - 24) != 254)
        {
          v36 = *v35;
          *v35 = 0;
          if (v36)
          {
            v48 = v35;
            v37 = *(WTF **)(v36 + 144);
            if ((WTF *)(v36 + 160) != v37 && v37 != 0)
            {
              *(_QWORD *)(v36 + 144) = 0;
              *(_DWORD *)(v36 + 152) = 0;
              WTF::fastFree(v37, v14);
            }
            v39 = *(WTF **)v36;
            if (v36 + 16 != *(_QWORD *)v36 && v39 != 0)
            {
              *(_QWORD *)v36 = 0;
              *(_DWORD *)(v36 + 8) = 0;
              WTF::fastFree(v39, v14);
            }
            WTF::fastFree((WTF *)v36, v14);
            v35 = v48;
          }
        }
        v35 += 4;
        --v34;
      }
      while (v34);
    }
    WTF::fastFree((WTF *)((char *)v17 - 16), v14);
  }
  v18 = v51[0];
  v51[0] = 0;
  if (v18)
  {
    v19 = (WTF *)*((_QWORD *)v18 + 18);
    if ((WTF *)((char *)v18 + 160) != v19 && v19 != 0)
    {
      *((_QWORD *)v18 + 18) = 0;
      *((_DWORD *)v18 + 38) = 0;
      WTF::fastFree(v19, v14);
    }
    v21 = *(WTF **)v18;
    if ((WTF *)((char *)v18 + 16) != *(WTF **)v18 && v21 != 0)
    {
      *(_QWORD *)v18 = 0;
      *((_DWORD *)v18 + 2) = 0;
      WTF::fastFree(v21, v14);
    }
    WTF::fastFree(v18, v14);
  }
  v23 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v23))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v23);
LABEL_43:
  v25 = *(_QWORD *)(v23 + 8);
  v26 = v25 - 1;
  *(_QWORD *)(v23 + 8) = v25 - 1;
  if (v25 == 1)
  {
    v33 = *(_QWORD *)(v23 + 16);
    v27 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v23 + 24) = 0;
    v28 = v33 != 0;
  }
  else
  {
    v27 = 0;
    v28 = 1;
  }
  v8 = !v15;
  v29 = __ldxr((unsigned __int8 *)v23);
  if (v29 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v23))
    {
      if (!v26)
        goto LABEL_51;
      goto LABEL_55;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v23);
  if (!v26)
  {
LABEL_51:
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (!v28)
      WTF::fastFree((WTF *)v23, v14);
  }
LABEL_55:
  if (*(_DWORD *)v2 == 1)
  {
    WebCore::Page::~Page((uint64_t)v2);
    WTF::fastFree(v31, v32);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return v8;
}

void WebCore::NonFastScrollableRegionOverlay::drawRect(unsigned __int8 **this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebCore *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  const WebCore::IntRect *v27;
  WebCore::NonFastScrollableRegionOverlay *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int *v35;
  void *v36;
  unsigned __int8 *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  void *v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  WebCore::Region *v70;
  WebCore *v71[3];
  WTF::StringImpl *v72;
  float v73;
  float v74;
  _OWORD v75[6];
  uint64_t v76;
  char v77;
  _DWORD *v78;
  __int16 v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  char v87;
  WTF *v88;
  int v89;
  __int16 v90;
  float v91;
  uint64_t v92;
  int v93;
  _QWORD v94[2];
  int v95;
  _QWORD v96[3];

  v95 = 0x40000000;
  v6 = WebCore::PageOverlay::bounds(a2);
  v7 = v6;
  v9 = v8;
  v94[0] = v6;
  v94[1] = v8;
  *(float *)&v72 = (float)(int)v6;
  *((float *)&v72 + 1) = (float)SHIDWORD(v6);
  v73 = (float)(int)v8;
  v74 = (float)SHIDWORD(v8);
  (*(void (**)(WebCore::GraphicsContext *, WTF::StringImpl **))(*(_QWORD *)a3 + 280))(a3, &v72);
  v91 = (float)(v9 + v7) + -30.0;
  v92 = 0x41A0000041200000;
  v93 = 1101004800;
  v76 = 256;
  memset(v75, 0, sizeof(v75));
  v77 = 0;
  v10 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v10 += 2;
  v78 = v10;
  v79 = 0;
  v80 = 2143289344;
  v81 = 0;
  v82 = 0;
  v83 = 26216000;
  v84 = 257;
  v85 = 0xE00000000000;
  v87 = 0;
  v86 = 0;
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x100000001;
  *(_QWORD *)(v11 + 8) = 0;
  v88 = (WTF *)v11;
  v89 = 0;
  v90 = 0;
  WTF::AtomStringImpl::add();
  if (!*(_DWORD *)(v11 + 4))
  {
    __break(0xC471u);
    JUMPOUT(0x195F7E78CLL);
  }
  v13 = v72;
  if (v72)
    *(_DWORD *)v72 += 2;
  v14 = *(WTF::StringImpl **)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v13;
  if (!v14)
  {
LABEL_9:
    if (!v13)
      goto LABEL_12;
    goto LABEL_10;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v14, v12);
  if (!v13)
    goto LABEL_12;
LABEL_10:
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v12);
  else
    *(_DWORD *)v13 -= 2;
LABEL_12:
  v89 = 1094713344;
  LODWORD(v85) = 1094713344;
  LOWORD(v83) = 2000;
  v15 = (WebCore *)WebCore::FontCascade::FontCascade((uint64_t)&v72, (uint64_t *)v75);
  v71[0] = 0;
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
    v17 = WebCore::threadGlobalDataSlow(v15);
  v18 = *(_QWORD *)(v17 + 80);
  if (!v18)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v17);
    v18 = *(_QWORD *)(v17 + 80);
  }
  WebCore::FontCache::updateFontCascade(v18, (uint64_t)&v72, v71);
  v19 = v71[0];
  v71[0] = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v19 + 8))(v19);
    else
      --*((_DWORD *)v19 + 2);
  }
  v71[0] = a3;
  v71[1] = (WebCore *)&v91;
  v71[2] = (WebCore *)&v72;
  v96[0] = 0x11040000BFBF3F32;
  WebCore::NonFastScrollableRegionOverlay::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0::operator()(v71, (const WebCore::Color *)v96, (uint64_t)"touchstart", 11);
  if ((v96[0] & 0x8000000000000) != 0)
  {
    v49 = (unsigned int *)(v96[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      atomic_store(1u, v49);
      WTF::fastFree((WTF *)v49, v20);
    }
  }
  v96[0] = 0x1104000050CCF532;
  WebCore::NonFastScrollableRegionOverlay::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0::operator()(v71, (const WebCore::Color *)v96, (uint64_t)"touchmove", 10);
  if ((v96[0] & 0x8000000000000) != 0)
  {
    v52 = (unsigned int *)(v96[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v52);
      WTF::fastFree((WTF *)v52, v21);
    }
  }
  v96[0] = 0x11040000BF3F7F32;
  WebCore::NonFastScrollableRegionOverlay::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0::operator()(v71, (const WebCore::Color *)v96, (uint64_t)"touchend", 9);
  if ((v96[0] & 0x8000000000000) != 0)
  {
    v55 = (unsigned int *)(v96[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v55);
      WTF::fastFree((WTF *)v55, v22);
    }
  }
  v96[0] = 0x110400003F3FBF32;
  WebCore::NonFastScrollableRegionOverlay::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0::operator()(v71, (const WebCore::Color *)v96, (uint64_t)"touchforcechange", 17);
  if ((v96[0] & 0x8000000000000) != 0)
  {
    v58 = (unsigned int *)(v96[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      atomic_store(1u, v58);
      WTF::fastFree((WTF *)v58, v23);
    }
  }
  v70 = (WebCore::Region *)(this + 5);
  WebCore::NonFastScrollableRegionOverlay::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0::operator()(v71, (const WebCore::Color *)(this + 5), (uint64_t)"passive listeners", 18);
  v96[0] = 0x1104000050F55032;
  WebCore::NonFastScrollableRegionOverlay::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0::operator()(v71, (const WebCore::Color *)v96, (uint64_t)"mousedown", 10);
  if ((v96[0] & 0x8000000000000) != 0)
  {
    v61 = (unsigned int *)(v96[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v62 = __ldaxr(v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v61));
    if (!v63)
    {
      atomic_store(1u, v61);
      WTF::fastFree((WTF *)v61, v24);
    }
  }
  v96[0] = 0x11040000F5F55032;
  WebCore::NonFastScrollableRegionOverlay::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0::operator()(v71, (const WebCore::Color *)v96, (uint64_t)"mousemove", 10);
  if ((v96[0] & 0x8000000000000) != 0)
  {
    v64 = (unsigned int *)(v96[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, v64);
      WTF::fastFree((WTF *)v64, v25);
    }
  }
  v96[0] = 0x1104000050F5B032;
  WebCore::NonFastScrollableRegionOverlay::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0::operator()(v71, (const WebCore::Color *)v96, (uint64_t)"mouseup", 8);
  if ((v96[0] & 0x8000000000000) != 0)
  {
    v67 = (unsigned int *)(v96[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      atomic_store(1u, v67);
      WTF::fastFree((WTF *)v67, v26);
    }
  }
  v28 = (WebCore::NonFastScrollableRegionOverlay *)this;
  v29 = this[10];
  if (!v29)
  {
    v30 = 0;
    v31 = 0;
LABEL_29:
    v32 = &v29[32 * v31];
    goto LABEL_30;
  }
  v31 = *((unsigned int *)v29 - 1);
  v32 = &v29[32 * v31];
  if (!*((_DWORD *)v29 - 3))
  {
    v30 = &v29[32 * v31];
    goto LABEL_29;
  }
  v30 = this[10];
  if ((_DWORD)v31)
  {
    v48 = 32 * v31;
    v30 = v29;
    while (*v30 >= 0xFEu)
    {
      v30 += 32;
      v48 -= 32;
      if (!v48)
      {
        v30 = v32;
        break;
      }
    }
  }
LABEL_30:
  if (v29)
    v33 = &v29[32 * *((unsigned int *)v29 - 1)];
  else
    v33 = 0;
  while (v30 != v33)
  {
    v34 = *v30;
    if (v34 <= 0xF && ((0xF807u >> v34) & 1) != 0)
      v35 = (unsigned int *)((char *)&WebCore::NonFastScrollableRegionOverlay::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::colorMappings
                           + 5 * qword_1969F5538[(char)v34]
                           + 1);
    else
      v35 = 0;
    if (!v35)
      v35 = (unsigned int *)&v95;
    v96[0] = bswap32(*v35) | 0x1104000000000000;
    WebCore::RegionOverlay::drawRegion(a3, (WebCore::GraphicsContext *)(v30 + 8), (const WebCore::Region *)v96, (const WebCore::Color *)v94, v27);
    if ((v96[0] & 0x8000000000000) != 0)
    {
      v38 = (unsigned int *)(v96[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v38);
        WTF::fastFree((WTF *)v38, v36);
      }
    }
    v37 = v30 + 32;
    v30 = v32;
    if (v37 != v32)
    {
      v30 = v37;
      while (*v30 >= 0xFEu)
      {
        v30 += 32;
        if (v30 == v32)
        {
          v30 = v32;
          break;
        }
      }
    }
  }
  WebCore::RegionOverlay::drawRegion(a3, (WebCore::NonFastScrollableRegionOverlay *)((char *)v28 + 56), v70, (const WebCore::Color *)v94, v27);
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)&v72, v41);
  v43 = (unsigned int *)v88;
  v88 = 0;
  if (v43)
  {
    if (*v43 == 1)
    {
      v44 = v43[1];
      if ((_DWORD)v44)
      {
        v45 = (WTF::StringImpl **)(v43 + 2);
        v46 = 8 * v44;
        do
        {
          v47 = *v45;
          *v45 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, v42);
            else
              *(_DWORD *)v47 -= 2;
          }
          ++v45;
          v46 -= 8;
        }
        while (v46);
      }
      WTF::fastFree((WTF *)v43, v42);
    }
    else
    {
      --*v43;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v75, v42);
}

float32x2_t WebCore::NonFastScrollableRegionOverlay::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0::operator()(WebCore::GraphicsContext **a1, const WebCore::Color *a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::GraphicsContext *v8;
  float32x2_t v9;
  float v10;
  void *v11;
  float32x2_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  float32x2_t *v21;
  float32x2_t result;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;
  __int16 v33;

  WebCore::GraphicsContext::setFillColor(*a1, a2);
  (*(void (**)(WebCore::GraphicsContext *, WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)*a1 + 216))(*a1, a1[1], 1);
  if (a4)
  {
    if (a4 == 1)
    {
      v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v27;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = (uint64_t)a1[2];
  v8 = *a1;
  v9 = *(float32x2_t *)a1[1];
  LODWORD(v27) = 0;
  if (v6)
    *(_DWORD *)v6 += 2;
  v28 = v6;
  v29 = 0;
  v30 = 1;
  v31 = 0x3F80000000000000;
  v32 = 0;
  v33 = 2052;
  v10 = WebCore::FontCascade::width(v7, (uint64_t)&v27);
  v26 = 0x11040000000000FFLL;
  WebCore::GraphicsContext::setFillColor(v8, (const WebCore::Color *)&v26);
  if ((v26 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v11);
    }
  }
  __asm { FMOV            V1.2S, #14.0 }
  v17 = vadd_f32(v9, _D1);
  _D1.f32[0] = v10 + 10.0;
  LODWORD(v18) = vsub_f32(v9, _D1).u32[0];
  HIDWORD(v18) = v17.i32[1];
  v26 = v18;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t, WTF::StringImpl **, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v8 + 520))(v8, v7, &v27, &v26, 0, 0);
  v20 = v28;
  v28 = 0;
  if (!v20)
  {
LABEL_10:
    if (!v6)
      goto LABEL_13;
    goto LABEL_11;
  }
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v20, v19);
  if (!v6)
    goto LABEL_13;
LABEL_11:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v19);
  else
    *(_DWORD *)v6 -= 2;
LABEL_13:
  v21 = (float32x2_t *)a1[1];
  result = vadd_f32(*v21, (float32x2_t)0x41F0000000000000);
  *v21 = result;
  return result;
}

uint64_t WebCore::RegionOverlay::drawRegion(WebCore::RegionOverlay *this, WebCore::GraphicsContext *a2, const WebCore::Region *a3, const WebCore::Color *a4, const WebCore::IntRect *a5)
{
  void *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  int v14;
  int v15;
  int v18;
  int v19;
  float v23[4];
  WTF *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  (*(void (**)(WebCore::RegionOverlay *, uint64_t, const WebCore::Region *, const WebCore::Color *, const WebCore::IntRect *))(*(_QWORD *)this + 96))(this, 1, a3, a4, a5);
  WebCore::GraphicsContext::setFillColor(this, a3);
  WebCore::Region::rects((uint64_t)a2, (uint64_t)&v24);
  v10 = v24;
  if (v26)
  {
    v11 = (WTF *)((char *)v24 + 16 * v26);
    do
    {
      v12 = *((_QWORD *)v10 + 1);
      if ((int)v12 >= 1 && SHIDWORD(v12) >= 1)
      {
        v15 = *((_DWORD *)a4 + 2);
        v14 = *((_DWORD *)a4 + 3);
        if (v15 >= 1 && v14 >= 1 && *(_DWORD *)a4 + v15 > *(_DWORD *)v10 && *(_DWORD *)a4 < (int)v12 + *(_DWORD *)v10)
        {
          v18 = *((_DWORD *)v10 + 1);
          v19 = *((_DWORD *)a4 + 1);
          if (v19 + v14 > v18 && v19 < HIDWORD(v12) + v18)
          {
            v23[0] = (float)*(int *)v10;
            v23[1] = (float)v18;
            v23[2] = (float)(int)v12;
            v23[3] = (float)SHIDWORD(v12);
            (*(void (**)(WebCore::RegionOverlay *, float *, uint64_t))(*(_QWORD *)this + 216))(this, v23, 1);
          }
        }
      }
      v10 = (WTF *)((char *)v10 + 16);
    }
    while (v10 != v11);
    v10 = v24;
  }
  if (&v27 != (uint64_t *)v10 && v10 != 0)
  {
    v24 = 0;
    v25 = 0;
    WTF::fastFree(v10, v9);
  }
  return (*(uint64_t (**)(WebCore::RegionOverlay *, uint64_t))(*(_QWORD *)this + 104))(this, 1);
}

uint64_t WebCore::InteractionRegionOverlay::updateRegion(WebCore::InteractionRegionOverlay *this)
{
  WebCore::PageOverlay *v1;
  uint64_t v2;
  __n128 v3;
  _QWORD v5[2];

  v1 = (WebCore::PageOverlay *)*((_QWORD *)this + 3);
  v5[0] = WebCore::PageOverlay::bounds(v1);
  v5[1] = v2;
  WebCore::PageOverlay::setNeedsDisplay((uint64_t)v1, (const WebCore::IntRect *)v5, v3);
  return 1;
}

uint64_t WebCore::InteractionRegionOverlay::drawRect(int32x2_t *this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  uint64_t v4;
  float v8;
  float v9;
  char *v10;
  unsigned int *v11;
  char **v12;
  char **v13;
  char **v14;
  char **v15;
  char **v16;
  char *v17;
  char **v18;
  const char *v19;
  char **v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  float v36;
  float v37;
  void *v38;
  WebCore *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  float v47;
  float v48;
  uint64_t v49;
  void *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v58;
  const char **v59;
  const char **v60;
  uint64_t v61;
  const char **v62;
  char **v63;
  char *v64;
  uint64_t v65;
  char **v66;
  char *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  unsigned int *v72;
  unsigned int v73;
  BOOL v74;
  const char **v75;
  const char **v76;
  const char **v77;
  const char **v78;
  char **v79;
  char *v80;
  uint64_t v81;
  char **v82;
  char *v83;
  uint64_t v84;
  void *v85;
  unsigned int v86;
  void *v87;
  void *v88;
  WebCore *v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  int v96;
  float v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  int v102;
  uint64_t v103;
  float v104;
  int v105;
  float v106;
  float v107;
  float v108;
  unsigned int *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  int v114;
  uint64_t v115;
  int v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  uint64_t v127;
  void *v128;
  uint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WebCore *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WebCore *v144;
  unsigned int *v145;
  unint64_t v146;
  unsigned int *v148;
  uint64_t v149;
  WebCore *v150;
  uint64_t v151;
  uint64_t v152;
  _DWORD *v153;
  int v154;
  uint64_t v155;
  float v156;
  float v157;
  int v158;
  int v159;
  void *v160;
  void *v161;
  void *v162;
  WTF::StringImpl *v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int *v170;
  unsigned int v171;
  unsigned int v172;
  WTF::StringImpl *v173;
  unsigned int *v174;
  uint64_t result;
  uint64_t v176;
  WTF::StringImpl **v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  WTF::StringImpl *v207[2];
  __int128 v208;
  __int128 v209;
  char v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  char v218;
  _DWORD *v219;
  __int16 v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int16 v225;
  int v226;
  unsigned int v227;
  __int16 v228;
  char v229;
  WTF *v230;
  int v231;
  __int16 v232;
  _QWORD v233[2];
  __int128 v234;
  __int128 v235;
  int v236;
  WTF::StringImpl *v237;
  int v238;
  char v239;
  uint64_t v240;
  int v241;
  __int16 v242;
  char v243;
  uint64_t v244;
  int v245;
  char v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;

  v251 = *MEMORY[0x1E0C80C00];
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
  v8 = (float)*((int *)a4 + 1);
  *(float *)v207 = (float)*(int *)a4;
  *((float *)v207 + 1) = v8;
  v9 = (float)*((int *)a4 + 3);
  *(float *)&v207[1] = (float)*((int *)a4 + 2);
  *((float *)&v207[1] + 1) = v9;
  (*(void (**)(WebCore::GraphicsContext *, WTF::StringImpl **))(*(_QWORD *)a3 + 280))(a3, v207);
  v243 = 0;
  v247 = 0;
  v11 = (unsigned int *)this[7];
  v12 = (char **)(v11 + 2);
  if (v11)
    v13 = (char **)(v11 + 2);
  else
    v13 = 0;
  if (v11)
    v14 = &v12[5 * *v11];
  else
    v14 = 0;
  if (v13 != v14)
  {
    if ("constrain")
    {
      v15 = v13;
      while (1)
      {
        v10 = *v15;
        if (*v15)
        {
          if (!strcmp("constrain", v10))
            goto LABEL_21;
        }
        else if (!"constrain")
        {
          goto LABEL_21;
        }
        v15 += 5;
        if (v15 == v14)
          goto LABEL_22;
      }
    }
    v15 = (char **)(v11 + 2);
    if ("constrain" == *v13)
    {
LABEL_21:
      if (*((_BYTE *)v15 + 32))
        goto LABEL_201;
    }
    else
    {
      v16 = (char **)(v11 + 12);
      while (v16 != v14)
      {
        v17 = *v16;
        v16 += 5;
        if ("constrain" == v17)
        {
          v15 = v16 - 5;
          goto LABEL_21;
        }
      }
    }
  }
LABEL_22:
  if (v11)
    v18 = &v12[5 * *v11];
  else
    v18 = 0;
  if (v13 != v18)
  {
    v19 = "clip";
    if ("clip")
    {
      while (1)
      {
        v10 = *v13;
        if (*v13)
        {
          if (!strcmp("clip", v10))
            goto LABEL_32;
        }
        else if (!"clip")
        {
LABEL_32:
          v12 = v13;
          goto LABEL_38;
        }
        v13 += 5;
        if (v13 == v18)
          goto LABEL_39;
      }
    }
    if ("clip" == *v13)
    {
LABEL_38:
      v22 = *((unsigned __int8 *)v12 + 32);
      if (*((_BYTE *)v12 + 32))
      {
        __break(1u);
LABEL_341:
        v182 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
        do
        {
          v183 = __ldaxr(v182);
          v184 = v183 - 1;
        }
        while (__stlxr(v184, v182));
        if (!v184)
        {
          atomic_store(1u, v182);
          WTF::fastFree((WTF *)v182, v10);
        }
        goto LABEL_241;
      }
    }
    else
    {
      v20 = (char **)(v11 + 12);
      while (v20 != v18)
      {
        v21 = *v20;
        v20 += 5;
        if ("clip" == v21)
        {
          v12 = v20 - 5;
          goto LABEL_38;
        }
      }
    }
  }
LABEL_39:
  *(float32x2_t *)&v23 = vcvt_f32_s32(this[8]);
  *((_QWORD *)&v23 + 1) = v23;
  v211 = v23;
  *(_QWORD *)&v212 = 0x42C8000000000000;
  *((_QWORD *)&v212 + 1) = 0x13F800000;
  v207[0] = (WTF::StringImpl *)&v208;
  v207[1] = (WTF::StringImpl *)2;
  v210 = 1;
  v24 = WTF::fastMalloc((WTF *)0xC8);
  v248 = WebCore::Gradient::Gradient(v24, &v211, 0x600000000, 1, 0, (uint64_t *)v207, 0, 0);
  v26 = v207[0];
  if (HIDWORD(v207[1]))
  {
    v27 = (WTF::StringImpl *)((char *)v207[0] + 16 * HIDWORD(v207[1]));
    do
    {
      v28 = *((_QWORD *)v26 + 1);
      if ((v28 & 0x8000000000000) != 0)
      {
        v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          atomic_store(1u, v29);
          WTF::fastFree((WTF *)v29, v25);
        }
      }
      v26 = (WTF::StringImpl *)((char *)v26 + 16);
    }
    while (v26 != v27);
    v26 = v207[0];
  }
  if (&v208 != (__int128 *)v26 && v26)
  {
    v207[0] = 0;
    LODWORD(v207[1]) = 0;
    WTF::fastFree(v26, v25);
  }
  LODWORD(v207[0]) = 1036831949;
  v32 = llroundf(51.0);
  if (v32 >= 255)
    v32 = 255;
  v204 = v32 & ~(v32 >> 63);
  v207[1] = (WTF::StringImpl *)(v204 | 0x1104000000000000);
  WebCore::Gradient::addColorStop(v248, (float *)v207);
  if (((unint64_t)v207[1] & 0x8000000000000) != 0)
  {
    v185 = (unsigned int *)((unint64_t)v207[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v186 = __ldaxr(v185);
      v187 = v186 - 1;
    }
    while (__stlxr(v187, v185));
    if (!v187)
    {
      atomic_store(1u, v185);
      WTF::fastFree((WTF *)v185, v33);
    }
  }
  LODWORD(v207[0]) = 1065353216;
  v34 = llroundf(0.0);
  if (v34 >= 255)
    v34 = 255;
  v205 = v34 & ~(v34 >> 63);
  v207[1] = (WTF::StringImpl *)(v205 | 0x1104000000000000);
  WebCore::Gradient::addColorStop(v248, (float *)v207);
  if (((unint64_t)v207[1] & 0x8000000000000) != 0)
  {
    v188 = (unsigned int *)((unint64_t)v207[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v189 = __ldaxr(v188);
      v190 = v189 - 1;
    }
    while (__stlxr(v190, v188));
    if (!v190)
    {
      atomic_store(1u, v188);
      WTF::fastFree((WTF *)v188, v35);
    }
  }
  *(_OWORD *)v207 = xmmword_1969F54C8;
  v208 = unk_1969F54D8;
  v209 = xmmword_1969F54E8;
  WebCore::SourceBrush::setGradient((uint64_t)a3 + 8, &v248, (__int128 *)v207);
  *((_DWORD *)a3 + 46) |= 1u;
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
  v36 = (float)*((int *)a4 + 1);
  *(float *)v207 = (float)*(int *)a4;
  *((float *)v207 + 1) = v36;
  v37 = (float)*((int *)a4 + 3);
  *(float *)&v207[1] = (float)*((int *)a4 + 2);
  *((float *)&v207[1] + 1) = v37;
  (*(void (**)(WebCore::GraphicsContext *, WTF::StringImpl **, uint64_t))(*(_QWORD *)a3 + 216))(a3, v207, 1);
  v39 = (WebCore *)v248;
  v248 = 0;
  if (v39)
  {
    v40 = *((_QWORD *)v39 + 1);
    if (__ldaxr((unsigned __int8 *)v40))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v40))
    {
      goto LABEL_62;
    }
    MEMORY[0x19AEA534C](v40);
LABEL_62:
    v42 = *(_QWORD *)(v40 + 8);
    v43 = v42 - 1;
    *(_QWORD *)(v40 + 8) = v42 - 1;
    if (v42 == 1)
    {
      v180 = *(_QWORD *)(v40 + 16);
      v44 = *(_QWORD *)(v40 + 24);
      *(_QWORD *)(v40 + 24) = 0;
      v45 = v180 != 0;
    }
    else
    {
      v44 = 0;
      v45 = 1;
    }
    v46 = __ldxr((unsigned __int8 *)v40);
    if (v46 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v40))
      {
        if (v43)
          goto LABEL_74;
LABEL_70:
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        if (!v45)
          WTF::fastFree((WTF *)v40, v38);
        goto LABEL_74;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v40);
    if (v43)
      goto LABEL_74;
    goto LABEL_70;
  }
LABEL_74:
  v47 = (float)this[8].i32[0];
  v48 = (float)this[8].i32[1];
  *(float *)&v211 = v47;
  *((float *)&v211 + 1) = v48;
  *((_QWORD *)&v211 + 1) = LODWORD(v47) | ((unint64_t)LODWORD(v48) << 32);
  *(_QWORD *)&v212 = 0x4248000000000000;
  *((_QWORD *)&v212 + 1) = 0x13F800000;
  v207[0] = (WTF::StringImpl *)&v208;
  v207[1] = (WTF::StringImpl *)2;
  v210 = 1;
  v49 = WTF::fastMalloc((WTF *)0xC8);
  v248 = WebCore::Gradient::Gradient(v49, &v211, 0x600000000, 1, 0, (uint64_t *)v207, 0, 0);
  v51 = v207[0];
  if (HIDWORD(v207[1]))
  {
    v52 = (WTF::StringImpl *)((char *)v207[0] + 16 * HIDWORD(v207[1]));
    do
    {
      v53 = *((_QWORD *)v51 + 1);
      if ((v53 & 0x8000000000000) != 0)
      {
        v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFLL);
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          atomic_store(1u, v54);
          WTF::fastFree((WTF *)v54, v50);
        }
      }
      v51 = (WTF::StringImpl *)((char *)v51 + 16);
    }
    while (v51 != v52);
    v51 = v207[0];
  }
  if (&v208 != (__int128 *)v51 && v51 != 0)
  {
    v207[0] = 0;
    LODWORD(v207[1]) = 0;
    WTF::fastFree(v51, v50);
  }
  v58 = (unsigned int *)this[7];
  if (v247)
  {
    v59 = (const char **)(v58 + 2);
    v60 = v58 ? (const char **)(v58 + 2) : 0;
    v61 = v58 ? (uint64_t)&v59[5 * *v58] : 0;
    if (v60 != (const char **)v61)
    {
      if ("wash")
      {
        v62 = v60;
        while (1)
        {
          if (*v62)
          {
            if (!strcmp("wash", *v62))
              goto LABEL_109;
          }
          else if (!"wash")
          {
            goto LABEL_109;
          }
          v62 += 5;
          if (v62 == (const char **)v61)
            goto LABEL_136;
        }
      }
      v62 = (const char **)(v58 + 2);
      if ("wash" == *v60)
      {
LABEL_109:
        if (*((_BYTE *)v62 + 32))
        {
          v65 = v58 ? (uint64_t)&v59[5 * *v58] : 0;
          if (v60 != (const char **)v65)
          {
            if ("clip")
            {
              while (1)
              {
                if (*v60)
                {
                  if (!strcmp("clip", *v60))
                    goto LABEL_120;
                }
                else if (!"clip")
                {
LABEL_120:
                  v59 = v60;
                  goto LABEL_126;
                }
                v60 += 5;
                if (v60 == (const char **)v65)
                  goto LABEL_136;
              }
            }
            if ("clip" == *v60)
            {
LABEL_126:
              if (*((_BYTE *)v59 + 32))
              {
                LODWORD(v207[0]) = 1036831949;
                v68 = llroundf(127.5);
                if (v68 >= 255)
                  v68 = 255;
                v207[1] = (WTF::StringImpl *)(v68 & ~(v68 >> 63) | 0x11040000FFFFFF00);
                WebCore::Gradient::addColorStop(v248, (float *)v207);
                if (((unint64_t)v207[1] & 0x8000000000000) != 0)
                {
                  v201 = (unsigned int *)((unint64_t)v207[1] & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v202 = __ldaxr(v201);
                    v203 = v202 - 1;
                  }
                  while (__stlxr(v203, v201));
                  if (!v203)
                  {
                    atomic_store(1u, v201);
                    WTF::fastFree((WTF *)v201, v69);
                  }
                }
                LODWORD(v207[0]) = 1065353216;
                v70 = llroundf(25.5);
                if (v70 >= 255)
                  v70 = 255;
                v207[1] = (WTF::StringImpl *)(v70 & ~(v70 >> 63) | 0x11040000FFFFFF00);
                WebCore::Gradient::addColorStop(v248, (float *)v207);
                if (((unint64_t)v207[1] & 0x8000000000000) != 0)
                {
                  v72 = (unsigned int *)((unint64_t)v207[1] & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v73 = __ldaxr(v72);
                    v74 = --v73 == 0;
                  }
                  while (__stlxr(v73, v72));
                  goto LABEL_359;
                }
                goto LABEL_183;
              }
            }
            else
            {
              v66 = (char **)(v58 + 12);
              while (v66 != (char **)v65)
              {
                v67 = *v66;
                v66 += 5;
                if ("clip" == v67)
                {
                  v59 = (const char **)(v66 - 5);
                  goto LABEL_126;
                }
              }
            }
          }
        }
      }
      else
      {
        v63 = (char **)(v58 + 12);
        while (v63 != (char **)v61)
        {
          v64 = *v63;
          v63 += 5;
          if ("wash" == v64)
          {
            v62 = (const char **)(v63 - 5);
            goto LABEL_109;
          }
        }
      }
    }
  }
LABEL_136:
  v75 = (const char **)(v58 + 2);
  if (v58)
    v76 = (const char **)(v58 + 2);
  else
    v76 = 0;
  if (v58)
    v77 = &v75[5 * *v58];
  else
    v77 = 0;
  if (v76 == v77)
    goto LABEL_181;
  if ("clip")
  {
    v78 = v76;
    while (1)
    {
      if (*v78)
      {
        if (!strcmp("clip", *v78))
          goto LABEL_156;
      }
      else if (!"clip")
      {
        goto LABEL_156;
      }
      v78 += 5;
      if (v78 == v77)
        goto LABEL_181;
    }
  }
  v78 = (const char **)(v58 + 2);
  if ("clip" != *v76)
  {
    v79 = (char **)(v58 + 12);
    while (v79 != (char **)v77)
    {
      v80 = *v79;
      v79 += 5;
      if ("clip" == v80)
      {
        v78 = (const char **)(v79 - 5);
        goto LABEL_156;
      }
    }
    goto LABEL_181;
  }
LABEL_156:
  if (!*((_BYTE *)v78 + 32))
    goto LABEL_181;
  v81 = v58 ? (uint64_t)&v75[5 * *v58] : 0;
  if (v76 == (const char **)v81)
    goto LABEL_181;
  if ("constrain")
  {
    while (1)
    {
      if (*v76)
      {
        if (!strcmp("constrain", *v76))
          goto LABEL_167;
      }
      else if (!"constrain")
      {
LABEL_167:
        v75 = v76;
        goto LABEL_173;
      }
      v76 += 5;
      if (v76 == (const char **)v81)
        goto LABEL_181;
    }
  }
  if ("constrain" != *v76)
  {
    v82 = (char **)(v58 + 12);
    while (v82 != (char **)v81)
    {
      v83 = *v82;
      v82 += 5;
      if ("constrain" == v83)
      {
        v75 = (const char **)(v82 - 5);
        goto LABEL_173;
      }
    }
    goto LABEL_181;
  }
LABEL_173:
  if (!*((_BYTE *)v75 + 32))
  {
LABEL_181:
    LODWORD(v207[0]) = 1036831949;
    v207[1] = (WTF::StringImpl *)(v204 | 0x11040000FFFFFF00);
    WebCore::Gradient::addColorStop(v248, (float *)v207);
    if (((unint64_t)v207[1] & 0x8000000000000) != 0)
    {
      v191 = (unsigned int *)((unint64_t)v207[1] & 0xFFFFFFFFFFFFLL);
      do
      {
        v192 = __ldaxr(v191);
        v193 = v192 - 1;
      }
      while (__stlxr(v193, v191));
      if (!v193)
      {
        atomic_store(1u, v191);
        WTF::fastFree((WTF *)v191, v87);
      }
    }
    LODWORD(v207[0]) = 1065353216;
    v207[1] = (WTF::StringImpl *)(v205 | 0x11040000FFFFFF00);
    WebCore::Gradient::addColorStop(v248, (float *)v207);
    if (((unint64_t)v207[1] & 0x8000000000000) == 0)
      goto LABEL_183;
    v72 = (unsigned int *)((unint64_t)v207[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v194 = __ldaxr(v72);
      v74 = --v194 == 0;
    }
    while (__stlxr(v194, v72));
LABEL_359:
    if (v74)
    {
      atomic_store(1u, v72);
      WTF::fastFree((WTF *)v72, v71);
    }
    goto LABEL_183;
  }
  LODWORD(v207[0]) = 1036831949;
  v84 = llroundf(127.5);
  if (v84 >= 255)
    v84 = 255;
  v207[1] = (WTF::StringImpl *)(v84 & ~(v84 >> 63) | 0x11040000FFFFFF00);
  WebCore::Gradient::addColorStop(v248, (float *)v207);
  if (((unint64_t)v207[1] & 0x8000000000000) != 0)
  {
    v198 = (unsigned int *)((unint64_t)v207[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v199 = __ldaxr(v198);
      v200 = v199 - 1;
    }
    while (__stlxr(v200, v198));
    if (!v200)
    {
      atomic_store(1u, v198);
      WTF::fastFree((WTF *)v198, v85);
    }
  }
  LODWORD(v207[0]) = 1065353216;
  v207[1] = (WTF::StringImpl *)(v205 | 0x11040000FFFFFF00);
  WebCore::Gradient::addColorStop(v248, (float *)v207);
  if (((unint64_t)v207[1] & 0x8000000000000) != 0)
  {
    v72 = (unsigned int *)((unint64_t)v207[1] & 0xFFFFFFFFFFFFLL);
    do
    {
      v86 = __ldaxr(v72);
      v74 = --v86 == 0;
    }
    while (__stlxr(v86, v72));
    goto LABEL_359;
  }
LABEL_183:
  *(_OWORD *)v207 = xmmword_1969F54C8;
  v208 = unk_1969F54D8;
  v209 = xmmword_1969F54E8;
  WebCore::SourceBrush::setGradient((uint64_t)a3 + 8, &v248, (__int128 *)v207);
  *((_DWORD *)a3 + 46) |= 1u;
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
  v89 = (WebCore *)v248;
  v248 = 0;
  if (!v89)
    goto LABEL_200;
  v90 = *((_QWORD *)v89 + 1);
  if (__ldaxr((unsigned __int8 *)v90))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v90))
  {
    goto LABEL_188;
  }
  MEMORY[0x19AEA534C](v90);
LABEL_188:
  v92 = *(_QWORD *)(v90 + 8);
  v93 = v92 - 1;
  *(_QWORD *)(v90 + 8) = v92 - 1;
  if (v92 == 1)
  {
    v181 = *(_QWORD *)(v90 + 16);
    v94 = *(_QWORD *)(v90 + 24);
    *(_QWORD *)(v90 + 24) = 0;
    v95 = v181 != 0;
  }
  else
  {
    v94 = 0;
    v95 = 1;
  }
  v96 = __ldxr((unsigned __int8 *)v90);
  if (v96 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v90))
    {
      if (!v93)
        goto LABEL_196;
      goto LABEL_200;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v90);
  if (!v93)
  {
LABEL_196:
    if (v94)
      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
    if (!v95)
      WTF::fastFree((WTF *)v90, v88);
  }
LABEL_200:
  v97 = (float)*((int *)a4 + 1);
  *(float *)v207 = (float)*(int *)a4;
  *((float *)v207 + 1) = v97;
  v98 = (float)*((int *)a4 + 3);
  *(float *)&v207[1] = (float)*((int *)a4 + 2);
  *((float *)&v207[1] + 1) = v98;
  (*(void (**)(WebCore::GraphicsContext *, WTF::StringImpl **, uint64_t))(*(_QWORD *)a3 + 216))(a3, v207, 1);
LABEL_201:
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
  v99 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&this[2] + 8) + 160);
  v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 56))(v99);
  if (v100)
  {
    v101 = (_DWORD *)v100;
    v102 = *(_DWORD *)(v100 + 8) + 1;
    *(_DWORD *)(v100 + 8) = v102;
    if (*(int *)(v100 + 248) >= 1 && *(int *)(v100 + 252) >= 1 && *(_BYTE *)(v100 + 321))
    {
      v103 = *(_QWORD *)(v100 + 248);
    }
    else
    {
      LODWORD(v103) = WebCore::ScrollView::sizeForUnobscuredContent((id *)v100, 0);
      v102 = v101[2];
    }
    v104 = (float)((float)((float)(int)v103 + -150.0) + -14.0) + 4.0;
    v105 = v102 - 1;
    if (v105)
      v101[2] = v105;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v101 + 8))(v101);
    v106 = 16.0;
    v107 = 12.0;
    v108 = 150.0;
  }
  else
  {
    v104 = 0.0;
    v107 = 0.0;
    v108 = 0.0;
    v106 = 0.0;
  }
  v109 = (unsigned int *)this[7];
  if (v109)
  {
    v110 = 1;
    do
    {
      if (*v109 <= v110)
        break;
      v111 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&this[2] + 8) + 160);
      v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 56))(v111);
      if (v112)
      {
        v113 = (_DWORD *)v112;
        v114 = *(_DWORD *)(v112 + 8) + 1;
        *(_DWORD *)(v112 + 8) = v114;
        if (*(int *)(v112 + 248) >= 1 && *(int *)(v112 + 252) >= 1 && *(_BYTE *)(v112 + 321))
        {
          v115 = *(_QWORD *)(v112 + 248);
        }
        else
        {
          LODWORD(v115) = WebCore::ScrollView::sizeForUnobscuredContent((id *)v112, 0);
          v114 = v113[2];
        }
        v116 = v114 - 1;
        if (v116)
          v113[2] = v116;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v113 + 8))(v113);
        v117 = (float)((float)((float)(int)v115 + -150.0) + -14.0) + 4.0;
        v118 = (float)((float)((float)v110 * 16.0) + 2.0) + 10.0;
        if (v108 <= 0.0 || v106 <= 0.0)
        {
          v104 = (float)((float)((float)(int)v115 + -150.0) + -14.0) + 4.0;
          v107 = (float)((float)((float)v110 * 16.0) + 2.0) + 10.0;
          v108 = 150.0;
          v106 = 16.0;
        }
        else
        {
          v119 = v104 + v108;
          if (v117 < v104)
            v104 = (float)((float)((float)(int)v115 + -150.0) + -14.0) + 4.0;
          v120 = v107 + v106;
          if (v118 < v107)
            v107 = (float)((float)((float)v110 * 16.0) + 2.0) + 10.0;
          v121 = v117 + 150.0;
          if (v119 >= v121)
            v121 = v119;
          v122 = v118 + 16.0;
          if (v120 >= v122)
            v122 = v120;
          v108 = v121 - v104;
          v106 = v122 - v107;
        }
      }
      ++v110;
      v109 = (unsigned int *)this[7];
    }
    while (v109);
  }
  v123 = v104 + -4.0;
  v124 = v107 + -4.0;
  v125 = v108 + 8.0;
  v126 = v106 + 8.0;
  a4 = (WebCore::GraphicsContext *)((char *)a3 + 8);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
  v127 = llroundf(127.5);
  if (v127 >= 255)
    v127 = 255;
  v207[0] = 0;
  LODWORD(v207[1]) = 1084227584;
  *(_QWORD *)&v208 = v127 & ~(v127 >> 63) | 0x1104000000000000;
  v4 = 0x3F80000000000000;
  *((_QWORD *)&v208 + 1) = 0x3F80000000000000;
  LOBYTE(v209) = 1;
  WebCore::GraphicsContextState::setDropShadow((uint64_t)a3 + 8, (uint64_t)v207);
  if ((_BYTE)v209)
  {
    if ((v208 & 0x8000000000000) != 0)
    {
      v195 = (unsigned int *)(v208 & 0xFFFFFFFFFFFFLL);
      do
      {
        v196 = __ldaxr(v195);
        v197 = v196 - 1;
      }
      while (__stlxr(v197, v195));
      if (!v197)
      {
        atomic_store(1u, v195);
        WTF::fastFree((WTF *)v195, v128);
      }
    }
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
  v207[0] = (WTF::StringImpl *)__PAIR64__(LODWORD(v124), LODWORD(v123));
  v207[1] = (WTF::StringImpl *)__PAIR64__(LODWORD(v126), LODWORD(v125));
  __asm { FMOV            V0.4S, #6.0 }
  v208 = _Q0;
  v209 = _Q0;
  v133 = llroundf(216.75);
  if (v133 >= 255)
    v133 = 255;
  *(_QWORD *)&v211 = v133 & ~(v133 >> 63) | 0x11040000FFFFFF00;
  LOBYTE(v19) = 1;
  (*(void (**)(WebCore::GraphicsContext *, WTF::StringImpl **, __int128 *, uint64_t))(*(_QWORD *)a3 + 264))(a3, v207, &v211, 1);
  v22 = v211;
  if ((v211 & 0x8000000000000) != 0)
    goto LABEL_341;
LABEL_241:
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
  v217 = 0;
  v215 = 0u;
  v216 = 0u;
  v213 = 0u;
  v214 = 0u;
  v211 = 0u;
  v212 = 0u;
  BYTE1(v217) = (_BYTE)v19;
  v218 = 0;
  v134 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v134 += 2;
  v219 = v134;
  v220 = 0;
  v221 = 2143289344;
  v222 = 0;
  v223 = 0;
  v224 = 26216000;
  v225 = 257;
  v226 = 0;
  v227 = v227 & 0x80000000 | 0xE000;
  v228 = 0;
  v229 &= 0xFCu;
  v135 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v135 = 0x100000001;
  *(_QWORD *)(v135 + 8) = 0;
  v230 = (WTF *)v135;
  v231 = 0;
  v232 &= 0xFC00u;
  WTF::AtomStringImpl::add();
  if (!*(_DWORD *)(v135 + 4))
  {
    __break(0xC471u);
    JUMPOUT(0x195F8009CLL);
  }
  v137 = v207[0];
  if (v207[0])
    *(_DWORD *)v207[0] += 2;
  v138 = *(WTF::StringImpl **)(v135 + 8);
  *(_QWORD *)(v135 + 8) = v137;
  if (!v138)
  {
LABEL_249:
    if (!v137)
      goto LABEL_252;
    goto LABEL_250;
  }
  if (*(_DWORD *)v138 != 2)
  {
    *(_DWORD *)v138 -= 2;
    goto LABEL_249;
  }
  WTF::StringImpl::destroy(v138, v136);
  if (!v137)
    goto LABEL_252;
LABEL_250:
  if (*(_DWORD *)v137 == 2)
    WTF::StringImpl::destroy(v137, v136);
  else
    *(_DWORD *)v137 -= 2;
LABEL_252:
  v231 = 1094713344;
  v226 = 1094713344;
  LOWORD(v224) = 2000;
  v139 = (WebCore *)WebCore::FontCascade::FontCascade((uint64_t)v207, (uint64_t *)&v211);
  v248 = 0;
  v140 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v140 || (v141 = *(_QWORD *)(v140 + 96)) == 0)
    v141 = WebCore::threadGlobalDataSlow(v139);
  v142 = *(_QWORD *)(v141 + 80);
  if (!v142)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v141);
    v142 = *(_QWORD *)(v141 + 80);
  }
  WebCore::FontCache::updateFontCascade(v142, (uint64_t)v207, (WebCore **)&v248);
  v144 = (WebCore *)v248;
  v248 = 0;
  if (v144)
  {
    if (*((_DWORD *)v144 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v144 + 8))(v144);
    else
      --*((_DWORD *)v144 + 2);
  }
  v145 = (unsigned int *)this[7];
  if (v145)
  {
    v146 = 0;
    __asm { FMOV            V0.4S, #3.0 }
    v206 = _Q0;
    while (1)
    {
      if (v146 >= *v145)
        goto LABEL_312;
      v148 = v145 + 2;
      v149 = *(_QWORD *)&v145[10 * v146 + 8];
      if (v149)
      {
        if (v149 == 1)
        {
          v150 = (WebCore *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v150 = (WebCore *)v248;
        }
      }
      else
      {
        v150 = 0;
      }
      v151 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&this[2] + 8) + 160);
      v152 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 56))(v151);
      if (v152)
      {
        v153 = (_DWORD *)v152;
        v154 = *(_DWORD *)(v152 + 8) + 1;
        *(_DWORD *)(v152 + 8) = v154;
        if (*(int *)(v152 + 248) >= 1 && *(int *)(v152 + 252) >= 1 && *(_BYTE *)(v152 + 321))
        {
          v155 = *(_QWORD *)(v152 + 248);
        }
        else
        {
          LODWORD(v155) = WebCore::ScrollView::sizeForUnobscuredContent((id *)v152, 0);
          v154 = v153[2];
        }
        v156 = (float)((float)((float)(int)v155 + -150.0) + -14.0) + 4.0;
        v157 = (float)((float)((float)v146 * 16.0) + 2.0) + 10.0;
        v158 = v154 - 1;
        if (v158)
          v153[2] = v158;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v153 + 8))(v153);
      }
      else
      {
        v156 = 0.0;
        v157 = 0.0;
      }
      v159 = LOBYTE(v148[10 * v146 + 8]);
      v236 = 0;
      if (v150)
        *(_DWORD *)v150 += 2;
      v237 = v150;
      v238 = 0;
      v239 = 1;
      v240 = v4;
      v241 = 0;
      v242 = 2052;
      v248 = 0x11040000000000FFLL;
      WebCore::GraphicsContext::setFillColor(a3, (const WebCore::Color *)&v248);
      if ((v248 & 0x8000000000000) != 0)
      {
        v164 = (unsigned int *)(v248 & 0xFFFFFFFFFFFFLL);
        do
        {
          v165 = __ldaxr(v164);
          v166 = v165 - 1;
        }
        while (__stlxr(v166, v164));
        if (!v166)
        {
          atomic_store(1u, v164);
          WTF::fastFree((WTF *)v164, v160);
        }
      }
      *(float *)&v248 = v156 + 18.0;
      *((float *)&v248 + 1) = v157 + 14.0;
      (*(void (**)(WebCore::GraphicsContext *, WTF::StringImpl **, int *, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)a3 + 520))(a3, v207, &v236, &v248, 0, 0);
      v250 = 0;
      *(float *)v233 = v156;
      *((float *)v233 + 1) = v157 + 2.0;
      v233[1] = 0x4160000041600000;
      v234 = v206;
      v235 = v206;
      WebCore::Path::addRoundedRect((WebCore::Path *)&v248, (WebCore::FloatRect *)v233, 0);
      if (v159)
      {
        v233[0] = 0x11040000808080FFLL;
        WebCore::GraphicsContext::setFillColor(a3, (const WebCore::Color *)v233);
        if ((v233[0] & 0x8000000000000) != 0)
        {
          v170 = (unsigned int *)(v233[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v171 = __ldaxr(v170);
            v172 = v171 - 1;
          }
          while (__stlxr(v172, v170));
          if (!v172)
          {
            atomic_store(1u, v170);
            WTF::fastFree((WTF *)v170, v161);
          }
        }
        (*(void (**)(WebCore::GraphicsContext *, uint64_t *))(*(_QWORD *)a3 + 176))(a3, &v248);
      }
      v233[0] = 0x110400000000007FLL;
      WebCore::GraphicsContext::setStrokeColor(a3, (const WebCore::Color *)v233);
      if ((v233[0] & 0x8000000000000) != 0)
      {
        v167 = (unsigned int *)(v233[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v168 = __ldaxr(v167);
          v169 = v168 - 1;
        }
        while (__stlxr(v169, v167));
        if (!v169)
        {
          atomic_store(1u, v167);
          WTF::fastFree((WTF *)v167, v162);
        }
      }
      if (*((float *)a3 + 47) != 1.0)
      {
        *((_DWORD *)a3 + 46) |= 8u;
        *((_DWORD *)a3 + 47) = 1065353216;
      }
      (*(void (**)(WebCore::GraphicsContext *, const WebCore::IntRect *))(*(_QWORD *)a3 + 88))(a3, a4);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t *))(*(_QWORD *)a3 + 184))(a3, &v248);
      if (v250 != -1)
        ((void (*)(_QWORD *, uint64_t *))*(&off_1E33FE3A0 + v250))(v233, &v249);
      v163 = v237;
      v237 = 0;
      if (!v163)
        goto LABEL_286;
      if (*(_DWORD *)v163 != 2)
        break;
      WTF::StringImpl::destroy(v163, v143);
      if (v150)
      {
LABEL_287:
        if (*(_DWORD *)v150 == 2)
          WTF::StringImpl::destroy(v150, v143);
        else
          *(_DWORD *)v150 -= 2;
      }
LABEL_289:
      ++v146;
      v145 = (unsigned int *)this[7];
      if (!v145)
        goto LABEL_312;
    }
    *(_DWORD *)v163 -= 2;
LABEL_286:
    if (v150)
      goto LABEL_287;
    goto LABEL_289;
  }
LABEL_312:
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v207, v143);
  v174 = (unsigned int *)v230;
  v230 = 0;
  if (v174)
  {
    if (*v174 == 1)
    {
      v176 = v174[1];
      if ((_DWORD)v176)
      {
        v177 = (WTF::StringImpl **)(v174 + 2);
        v178 = 8 * v176;
        do
        {
          v179 = *v177;
          *v177 = 0;
          if (v179)
          {
            if (*(_DWORD *)v179 == 2)
              WTF::StringImpl::destroy(v179, v173);
            else
              *(_DWORD *)v179 -= 2;
          }
          ++v177;
          v178 -= 8;
        }
        while (v178);
      }
      WTF::fastFree((WTF *)v174, v173);
    }
    else
    {
      --*v174;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)&v211, v173);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
  if (v247 && v246 && v245 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v245])(v207, &v244);
  return result;
}

uint64_t WebCore::InteractionRegionOverlay::mouseEvent(_QWORD *a1, WebCore::PageOverlay *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  const char **v13;
  const char **v14;
  char **v15;
  const char **v16;
  char **v17;
  char *v18;
  const char **v19;
  char *v20;
  _DWORD *v21;
  int v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  uint64_t v43;
  char v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  unsigned int *v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int *v56;
  char **v57;
  char *v58;
  char **v59;
  char *v60;
  char v61;
  _DWORD *v62;
  unsigned int v63;
  unsigned int v64;
  WTF *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  WebCore::Page *v74;
  _QWORD *v75;
  _DWORD *v76;
  __int128 v77;
  char v78;
  _QWORD v79[2];

  v3 = a1[2];
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  ++*(_DWORD *)v4;
  v5 = *(_QWORD *)(v4 + 160);
  if (v5)
    v6 = *(_BYTE *)(v5 + 144) == 0;
  else
    v6 = 0;
  if (v6)
  {
    v9 = (unsigned int *)(v5 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v74 = (WebCore::Page *)v4;
    v11 = *(_QWORD *)(v5 + 288);
    if (v11)
      ++*(_DWORD *)(v11 + 8);
    LOBYTE(v75) = 0;
    v78 = 0;
    v12 = (unsigned int *)a1[7];
    v13 = (const char **)(v12 + 2);
    if (v12)
      v14 = (const char **)(v12 + 2);
    else
      v14 = 0;
    if (v12)
      v15 = (char **)&v13[5 * *v12];
    else
      v15 = 0;
    if (v14 != (const char **)v15)
    {
      if ("cursor")
      {
        v16 = v14;
        while (1)
        {
          if (*v16)
          {
            if (!strcmp("cursor", *v16))
              goto LABEL_33;
          }
          else if (!"cursor")
          {
            goto LABEL_33;
          }
          v16 += 5;
          if (v16 == (const char **)v15)
            goto LABEL_36;
        }
      }
      v16 = (const char **)(v12 + 2);
      if ("cursor" == *v14)
      {
LABEL_33:
        if (*((_BYTE *)v16 + 32))
        {
          if (v12)
            v19 = &v13[5 * *v12];
          else
            v19 = 0;
          if (v14 != v19)
          {
            if ("hover")
            {
              while (1)
              {
                if (*v14)
                {
                  if (!strcmp("hover", *v14))
                    goto LABEL_121;
                }
                else if (!"hover")
                {
LABEL_121:
                  v13 = v14;
                  goto LABEL_127;
                }
                v14 += 5;
                if (v14 == v19)
                  goto LABEL_129;
              }
            }
            if ("hover" == *v14)
            {
LABEL_127:
              if (*((_BYTE *)v13 + 32))
              {
                v22 = 0;
LABEL_40:
                v23 = WebCore::ScrollView::windowToContents((WebCore::ScrollView *)v11, (const WebCore::IntPoint *)(a3 + 52), (const WebCore::IntPoint *)a3);
                v24 = (unsigned int *)a1[7];
                v72 = v23;
                if (v24)
                {
                  v25 = 0;
                  v26 = (float)(int)v23;
                  v27 = (float)SHIDWORD(v23);
                  while (*v24 > v25)
                  {
                    v28 = *(_QWORD *)(*(_QWORD *)(a1[2] + 8) + 160);
                    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 56))(v28);
                    if (v29)
                    {
                      v32 = (_DWORD *)v29;
                      v33 = *(_DWORD *)(v29 + 8) + 1;
                      *(_DWORD *)(v29 + 8) = v33;
                      if (*(int *)(v29 + 248) >= 1 && *(int *)(v29 + 252) >= 1 && *(_BYTE *)(v29 + 321))
                      {
                        v34 = *(_QWORD *)(v29 + 248);
                      }
                      else
                      {
                        LODWORD(v34) = WebCore::ScrollView::sizeForUnobscuredContent((id *)v29, 0);
                        v33 = v32[2];
                      }
                      v35 = (float)((float)((float)(int)v34 + -150.0) + -14.0) + 4.0;
                      v36 = (float)((float)((float)v25 * 16.0) + 2.0) + 10.0;
                      v37 = v33 - 1;
                      if (v37)
                        v32[2] = v37;
                      else
                        (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
                      v38 = 16.0;
                      v39 = 150.0;
                    }
                    else
                    {
                      v35 = 0.0;
                      v36 = 0.0;
                      v39 = 0.0;
                      v38 = 0.0;
                    }
                    v31.n128_f32[0] = v35 + v39;
                    v30.n128_f32[0] = v36 + v38;
                    if (v35 <= v26 && v31.n128_f32[0] >= v26 && v36 <= v27 && v30.n128_f32[0] >= v27)
                    {
                      {
                        v43 = qword_1ECE90BB8;
                        v44 = WebCore::handCursor(void)::c;
                      }
                      else
                      {
                        v43 = 0;
                        v44 = 3;
                        WebCore::handCursor(void)::c = 3;
                        xmmword_1ECE90BC0 = 0uLL;
                        qword_1ECE90BB8 = 0;
                      }
                      LOBYTE(v75) = v44;
                      if (v22)
                      {
                        if (v43)
                          ++*(_DWORD *)(v43 + 8);
                        v45 = v76;
                        v76 = (_DWORD *)v43;
                        if (v45)
                        {
                          if (v45[2] == 1)
                            (*(void (**)(_DWORD *, __n128, __n128))(*(_QWORD *)v45 + 8))(v45, v30, v31);
                          else
                            --v45[2];
                        }
                        v77 = xmmword_1ECE90BC0;
                      }
                      else
                      {
                        if (v43)
                          ++*(_DWORD *)(v43 + 8);
                        v76 = (_DWORD *)v43;
                        v77 = xmmword_1ECE90BC0;
                        v22 = 1;
                        v78 = 1;
                      }
                      if (!*(_BYTE *)(a3 + 48) && *(_BYTE *)(a3 + 8) == 6)
                      {
                        v56 = (unsigned int *)a1[7];
                        if (*v56 <= v25)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x195F809A0);
                        }
                        LOBYTE(v56[10 * v25 + 10]) ^= 1u;
                        v4 = (uint64_t)v74;
                        WebCore::Page::forceRepaintAllFrames((uint64_t)v74);
                        goto LABEL_133;
                      }
                    }
                    ++v25;
                    v24 = (unsigned int *)a1[7];
                    if (!v24)
                      break;
                  }
                }
                v4 = (uint64_t)v74;
                if (v22)
                {
                  v46 = *(_QWORD *)(v11 + 32);
                  i = v11;
                  if (v46)
                  {
                    v48 = *(_QWORD *)(v46 + 8);
                    for (i = v11; v48; v48 = *(_QWORD *)(v68 + 8))
                    {
                      i = v48;
                      v68 = *(_QWORD *)(v48 + 32);
                      if (!v68)
                        break;
                    }
                  }
                  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 72))(i) & 1) != 0
                    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)i + 80))(i))
                  {
                    v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 720))(i)
                                                            + 24)
                                                + 8)
                                    + 48);
                    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v49 + 136))(v49, &v75);
                  }
                }
                a1[8] = v72;
                v79[0] = WebCore::PageOverlay::bounds(a2);
                v79[1] = v50;
                WebCore::PageOverlay::setNeedsDisplay((uint64_t)a2, (const WebCore::IntRect *)v79, v51);
                if (*(_BYTE *)(a3 + 8) != 5 || *(_WORD *)(a3 + 120) != 0)
                  goto LABEL_91;
                v53 = (unsigned int *)a1[7];
                if (v53)
                  v54 = v53 + 2;
                else
                  v54 = 0;
                if (v53)
                  v55 = (uint64_t)&v53[10 * *v53 + 2];
                else
                  v55 = 0;
                if (v54 != (unsigned int *)v55)
                {
                  if ("hover")
                  {
                    while (1)
                    {
                      if (*(_QWORD *)v54)
                      {
                        if (!strcmp("hover", *(const char **)v54))
                          goto LABEL_132;
                      }
                      else if (!"hover")
                      {
                        goto LABEL_132;
                      }
                      v54 += 10;
                      if (v54 == (unsigned int *)v55)
                        goto LABEL_133;
                    }
                  }
                  if ("hover" == *(char **)v54)
                  {
                    v54 = v53 + 2;
LABEL_132:
                    if (*((_BYTE *)v54 + 32))
                    {
LABEL_91:
                      v69 = 0;
LABEL_134:
                      if (v78)
                      {
                        v62 = v76;
                        v76 = 0;
                        if (v62)
                        {
                          if (v62[2] == 1)
                          {
                            (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
                            if (!v11)
                              goto LABEL_141;
LABEL_139:
                            if (*(_DWORD *)(v11 + 8) == 1)
                              (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
                            else
                              --*(_DWORD *)(v11 + 8);
                            do
                            {
LABEL_141:
                              v63 = __ldaxr(v9);
                              v64 = v63 - 1;
                            }
                            while (__stlxr(v64, v9));
                            if (!v64)
                            {
                              atomic_store(1u, v9);
                              v70 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                              *v70 = off_1E31FE290;
                              v70[1] = v9;
                              v75 = v70;
                              WTF::ensureOnMainThread();
                              v71 = v75;
                              v75 = 0;
                              if (v71)
                                (*(void (**)(_QWORD *))(*v71 + 8))(v71);
                            }
                            goto LABEL_143;
                          }
                          --v62[2];
                        }
                      }
                      if (!v11)
                        goto LABEL_141;
                      goto LABEL_139;
                    }
                  }
                  else
                  {
                    v57 = (char **)(v53 + 12);
                    while (v57 != (char **)v55)
                    {
                      v58 = *v57;
                      v57 += 5;
                      if ("hover" == v58)
                      {
                        v54 = (unsigned int *)(v57 - 5);
                        goto LABEL_132;
                      }
                    }
                  }
                }
LABEL_133:
                v69 = 1;
                goto LABEL_134;
              }
            }
            else
            {
              v59 = (char **)(v12 + 12);
              while (v59 != (char **)v19)
              {
                v60 = *v59;
                v59 += 5;
                if ("hover" == v60)
                {
                  v13 = (const char **)(v59 - 5);
                  goto LABEL_127;
                }
              }
            }
          }
LABEL_129:
          v20 = &WebCore::pointerCursor(void)::c;
            goto LABEL_37;
          v21 = 0;
          v61 = 1;
          WebCore::pointerCursor(void)::c = 1;
          xmmword_1EE2F7FC0 = 0uLL;
          qword_1EE2F7FB8 = 0;
          goto LABEL_159;
        }
      }
      else
      {
        v17 = (char **)(v12 + 12);
        while (v17 != v15)
        {
          v18 = *v17;
          v17 += 5;
          if ("cursor" == v18)
          {
            v16 = (const char **)(v17 - 5);
            goto LABEL_33;
          }
        }
      }
    }
LABEL_36:
    v20 = &WebCore::noneCursor(void)::c;
    {
LABEL_37:
      v21 = (_DWORD *)*((_QWORD *)v20 + 1);
      LOBYTE(v75) = *v20;
      if (v21)
        ++v21[2];
      goto LABEL_39;
    }
    v21 = 0;
    v61 = 38;
    WebCore::noneCursor(void)::c = 38;
    xmmword_1EE2F8148 = 0uLL;
    qword_1EE2F8140 = 0;
LABEL_159:
    LOBYTE(v75) = v61;
LABEL_39:
    v76 = v21;
    v77 = *((_OWORD *)v20 + 1);
    v22 = 1;
    v78 = 1;
    goto LABEL_40;
  }
  v69 = 0;
LABEL_143:
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v66, v67);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return v69;
}

uint64_t WebCore::SiteIsolationOverlay::updateRegion(WebCore::SiteIsolationOverlay *this)
{
  WebCore::PageOverlay *v1;
  uint64_t v2;
  __n128 v3;
  _QWORD v5[2];

  v1 = (WebCore::PageOverlay *)*((_QWORD *)this + 3);
  v5[0] = WebCore::PageOverlay::bounds(v1);
  v5[1] = v2;
  WebCore::PageOverlay::setNeedsDisplay((uint64_t)v1, (const WebCore::IntRect *)v5, v3);
  return 1;
}

uint64_t WebCore::SiteIsolationOverlay::drawRect(uint64_t this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  CGFloat v23;
  const char *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  void *v29;
  void *v30;
  float v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  char v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WebCore *v44;
  WebCore *v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  const CGRect *v50;
  int v51;
  void *v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  const CGRect *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  WTF::StringImpl *v61;
  unsigned int *v62;
  WTF *v63;
  void *v64;
  uint64_t v65;
  WTF::StringImpl **v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  float v69;
  _DWORD *v70;
  WebCore *v71;
  WTF::StringImpl *v72;
  int v73;
  char v74;
  uint64_t v75;
  int v76;
  char v77;
  char v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81[24];
  _OWORD v82[6];
  uint64_t v83;
  char v84;
  _DWORD *v85;
  __int16 v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  char v94;
  WTF *v95;
  int v96;
  __int16 v97;
  CGRect v98;

  v4 = *(_QWORD *)(this + 16);
  if (!v4)
    return this;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return this;
  ++*(_DWORD *)v5;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
  v83 = 256;
  memset(v82, 0, sizeof(v82));
  v84 = 0;
  v7 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v7 += 2;
  v85 = v7;
  v86 = 0;
  v87 = 2143289344;
  v88 = 0;
  v89 = 0;
  v90 = 26216000;
  v91 = 257;
  v92 = 0xE00000000000;
  v94 = 0;
  v93 = 0;
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = 0x100000001;
  *(_QWORD *)(v8 + 8) = 0;
  v95 = (WTF *)v8;
  v96 = 0;
  v97 = 0;
  WTF::AtomStringImpl::add();
  if (!*(_DWORD *)(v8 + 4))
  {
    __break(0xC471u);
    goto LABEL_101;
  }
  v10 = v81[0];
  if (v81[0])
    *(_DWORD *)v81[0] += 2;
  v11 = *(WTF::StringImpl **)(v8 + 8);
  *(_QWORD *)(v8 + 8) = v10;
  if (!v11)
  {
LABEL_11:
    if (v10)
      goto LABEL_12;
    goto LABEL_14;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v11, v9);
  if (v10)
  {
LABEL_12:
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
LABEL_14:
  v96 = 1094713344;
  LODWORD(v92) = 1094713344;
  LOWORD(v90) = 2000;
  v12 = (WebCore *)WebCore::FontCascade::FontCascade((uint64_t)v81, (uint64_t *)v82);
  v71 = 0;
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
    v14 = WebCore::threadGlobalDataSlow(v12);
  v15 = *(_QWORD *)(v14 + 80);
  if (!v15)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v14);
    v15 = *(_QWORD *)(v14 + 80);
  }
  WebCore::FontCache::updateFontCascade(v15, (uint64_t)v81, &v71);
  v17 = v71;
  v71 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v17 + 8))(v17);
    else
      --*((_DWORD *)v17 + 2);
  }
  v70 = (_DWORD *)v5;
  v18 = *(_QWORD *)(v5 + 160);
  v19 = (unsigned int *)(v18 + 8);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  if (v18)
  {
    do
    {
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 56))(v18))
        goto LABEL_48;
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 56))(v18);
      v22 = *(unsigned __int8 *)(v18 + 144);
      v23 = *(double *)(v18 + 32);
      v71 = *(WebCore **)(v18 + 40);
      LOBYTE(v80) = 45;
      v98.origin.x = v23;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((unint64_t *)&v71, (char *)&v80, (unint64_t *)&v98, &v79);
      if (!v79)
      {
        __break(0xC471u);
LABEL_101:
        JUMPOUT(0x195F81080);
      }
      if (v22)
        v24 = "remote(";
      else
        v24 = "local(";
      if (v22)
        v25 = 8;
      else
        v25 = 7;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)v24, v25, (uint64_t *)&v79, 41, &v80);
      v27 = v79;
      v79 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      LODWORD(v71) = 0;
      v28 = v80;
      if (v80)
        *(_DWORD *)v80 += 2;
      v72 = v28;
      v73 = 0;
      v74 = 1;
      v75 = 0x3F80000000000000;
      v76 = 0;
      v77 = 4;
      v78 = v78 & 0xE0 | 8;
      v98.origin.x = 1.05531781e-226;
      WebCore::GraphicsContext::setFillColor(a3, (const WebCore::Color *)&v98);
      if ((*(_QWORD *)&v98.origin.x & 0x8000000000000) != 0)
      {
        v58 = (unsigned int *)(*(_QWORD *)&v98.origin.x & 0xFFFFFFFFFFFFLL);
        do
        {
          v59 = __ldaxr(v58);
          v60 = v59 - 1;
        }
        while (__stlxr(v60, v58));
        if (!v60)
        {
          atomic_store(1u, v58);
          WTF::fastFree((WTF *)v58, v29);
        }
      }
      v30 = *(void **)(v21 + 40);
      if (v30)
      {
        if (objc_msgSend(*(id *)(v21 + 40), "conformsToProtocol:", &unk_1EE342188))
          v30 = (void *)objc_msgSend(v30, "superview");
        objc_msgSend(v30, "frame");
        v98.origin.x = v46;
        v98.origin.y = v47;
        v98.size.width = v48;
        v98.size.height = v49;
        v51 = WebCore::enclosingIntRect(&v98, v50);
        v52 = *(void **)(v21 + 40);
        v69 = (float)v51;
        if (v52)
        {
          if (objc_msgSend(v52, "conformsToProtocol:", &unk_1EE342188))
            v52 = (void *)objc_msgSend(v52, "superview");
          objc_msgSend(v52, "frame");
          v98.origin.x = v53;
          v98.origin.y = v54;
          v98.size.width = v55;
          v98.size.height = v56;
          v32 = WebCore::enclosingIntRect(&v98, v57);
          v31 = v69;
          goto LABEL_42;
        }
        v31 = (float)v51;
      }
      else
      {
        v31 = (float)*(int *)(v21 + 48);
      }
      v32 = *(_QWORD *)(v21 + 48);
LABEL_42:
      *(float *)&v98.origin.x = v31;
      *((float *)&v98.origin.x + 1) = (float)(HIDWORD(v32) + 12);
      (*(void (**)(WebCore::GraphicsContext *, WTF::StringImpl **, WebCore **, CGRect *, _QWORD, _QWORD))(*(_QWORD *)a3 + 520))(a3, v81, &v71, &v98, 0, 0);
      v33 = v72;
      v72 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v16);
        else
          *(_DWORD *)v33 -= 2;
      }
      v34 = v80;
      v80 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v16);
        else
          *(_DWORD *)v34 -= 2;
      }
LABEL_48:
      v35 = *(_QWORD *)(v18 + 88);
      if (v35)
        goto LABEL_54;
      v36 = *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8);
      if (v36)
      {
        v35 = *(_QWORD *)(v18 + 72);
        if (v35)
        {
LABEL_54:
          v38 = (unsigned int *)(v35 + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 + 1, v38));
          v40 = 0;
          goto LABEL_58;
        }
        while (1)
        {
          v37 = *(_QWORD *)(v36 + 56);
          if (!v37)
            break;
          v36 = *(_QWORD *)(v37 + 8);
          if (!v36)
            break;
          v35 = *(_QWORD *)(v36 + 72);
          if (v35)
            goto LABEL_54;
        }
      }
      v35 = 0;
      v40 = 1;
LABEL_58:
      v41 = (unsigned int *)(v18 + 8);
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        atomic_store(1u, v41);
        v44 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v44 = off_1E31FE290;
        *((_QWORD *)v44 + 1) = v41;
        v71 = v44;
        WTF::ensureOnMainThread();
        v45 = v71;
        v71 = 0;
        if (v45)
          (*(void (**)(WebCore *))(*(_QWORD *)v45 + 8))(v45);
      }
      v18 = v35;
    }
    while ((v40 & 1) == 0);
  }
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v81, v16);
  v62 = (unsigned int *)v95;
  v95 = 0;
  if (v62)
  {
    if (*v62 == 1)
    {
      v65 = v62[1];
      if ((_DWORD)v65)
      {
        v66 = (WTF::StringImpl **)(v62 + 2);
        v67 = 8 * v65;
        do
        {
          v68 = *v66;
          *v66 = 0;
          if (v68)
          {
            if (*(_DWORD *)v68 == 2)
              WTF::StringImpl::destroy(v68, v61);
            else
              *(_DWORD *)v68 -= 2;
          }
          ++v66;
          v67 -= 8;
        }
        while (v67);
      }
      WTF::fastFree((WTF *)v62, v61);
    }
    else
    {
      --*v62;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v82, v61);
  this = (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
  if (*v70 == 1)
  {
    WebCore::Page::~Page((uint64_t)v70);
    return WTF::fastFree(v63, v64);
  }
  else
  {
    --*v70;
  }
  return this;
}

void sub_195F8109C()
{
  objc_end_catch();
  JUMPOUT(0x195F810A8);
}

uint64_t WebCore::SiteIsolationOverlay::mouseEvent()
{
  return 0;
}

uint64_t WebCore::RegionOverlay::create(uint64_t *a1, WebCore::Page *a2, int a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t StatusReg;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;

  switch(a3)
  {
    case 1:
      v5 = WTF::fastMalloc((WTF *)0x58);
      *(_DWORD *)(v5 + 8) = 1;
      *(_QWORD *)v5 = off_1E33FE158;
      v7 = *((_QWORD *)a2 + 2);
      if (v7)
        goto LABEL_47;
      v7 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = a2;
      v9 = (unsigned int *)*((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = v7;
      if (!v9)
        goto LABEL_47;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v8);
      }
      v7 = *((_QWORD *)a2 + 2);
      if (v7)
      {
LABEL_47:
        do
          v12 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v12 + 1, (unsigned int *)v7));
      }
      *(_QWORD *)(v5 + 16) = v7;
      v13 = WTF::fastMalloc((WTF *)0xA8);
      *(_DWORD *)(v13 + 8) = 1;
      *(_QWORD *)v13 = off_1E3401600;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = v5;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 40) = off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      v15 = *(unsigned int **)(StatusReg + 736);
      if (!v15)
        v15 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      *(_QWORD *)(v13 + 80) = v15;
      *(_QWORD *)(v13 + 40) = off_1E31F7378;
      result = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)result = off_1E3401888;
      *(_QWORD *)(result + 8) = WebCore::PageOverlay::fadeAnimationTimerFired;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = v13;
      *(_QWORD *)(v13 + 88) = result;
      *(_QWORD *)(v13 + 96) = 0;
      *(_QWORD *)(v13 + 104) = 0x3FC999999999999ALL;
      *(_QWORD *)(v13 + 112) = 0x3F80000000000000;
      *(_WORD *)(v13 + 120) = 256;
      *(_BYTE *)(v13 + 122) = 1;
      *(_QWORD *)(v13 + 132) = 0;
      *(_QWORD *)(v13 + 124) = 0;
      v17 = ++WebCore::generatePageOverlayID(void)::pageOverlayID;
      *(_QWORD *)(v13 + 144) = 0x1104000000000000;
      *(_QWORD *)(v13 + 152) = v17;
      *(_BYTE *)(v13 + 160) = 1;
      *(_QWORD *)(v5 + 24) = v13;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = 0x11040000FF800066;
      *(_BYTE *)(v5 + 48) = 1;
      *(_QWORD *)v5 = off_1E33FE260;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_OWORD *)(v5 + 72) = 0u;
      break;
    case 2:
      v5 = WTF::fastMalloc((WTF *)0x48);
      *(_DWORD *)(v5 + 8) = 1;
      *(_QWORD *)v5 = off_1E33FE158;
      v18 = *((_QWORD *)a2 + 2);
      if (v18)
        goto LABEL_48;
      v18 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = a2;
      v20 = (unsigned int *)*((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = v18;
      if (!v20)
        goto LABEL_48;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v19);
      }
      v18 = *((_QWORD *)a2 + 2);
      if (v18)
      {
LABEL_48:
        do
          v23 = __ldaxr((unsigned int *)v18);
        while (__stlxr(v23 + 1, (unsigned int *)v18));
      }
      *(_QWORD *)(v5 + 16) = v18;
      v24 = WTF::fastMalloc((WTF *)0xA8);
      *(_DWORD *)(v24 + 8) = 1;
      *(_QWORD *)v24 = off_1E3401600;
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = v5;
      *(_QWORD *)(v24 + 32) = 0;
      *(_QWORD *)(v24 + 40) = off_1E3407128;
      v25 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v24 + 48) = 0u;
      *(_OWORD *)(v24 + 64) = 0u;
      v26 = *(unsigned int **)(v25 + 736);
      if (!v26)
        v26 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      *(_QWORD *)(v24 + 80) = v26;
      *(_QWORD *)(v24 + 40) = off_1E31F7378;
      v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v28 = off_1E3401888;
      v28[1] = WebCore::PageOverlay::fadeAnimationTimerFired;
      v28[2] = 0;
      v28[3] = v24;
      *(_QWORD *)(v24 + 88) = v28;
      *(_QWORD *)(v24 + 96) = 0;
      *(_QWORD *)(v24 + 104) = 0x3FC999999999999ALL;
      *(_QWORD *)(v24 + 112) = 0x3F80000000000000;
      *(_WORD *)(v24 + 120) = 256;
      *(_BYTE *)(v24 + 122) = 1;
      *(_QWORD *)(v24 + 132) = 0;
      *(_QWORD *)(v24 + 124) = 0;
      v29 = ++WebCore::generatePageOverlayID(void)::pageOverlayID;
      *(_QWORD *)(v24 + 144) = 0x1104000000000000;
      *(_QWORD *)(v24 + 152) = v29;
      *(_BYTE *)(v24 + 160) = 1;
      *(_QWORD *)(v5 + 24) = v24;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = 0x1104000000FF0066;
      *(_BYTE *)(v5 + 48) = 1;
      *(_QWORD *)v5 = off_1E33FE2D0;
      result = WTF::fastMalloc((WTF *)0x120);
      *(_QWORD *)(result + 280) = 0;
      *(_OWORD *)(result + 248) = 0u;
      *(_OWORD *)(result + 232) = 0u;
      *(_OWORD *)(result + 216) = 0u;
      *(_OWORD *)(result + 200) = 0u;
      *(_OWORD *)(result + 184) = 0u;
      *(_OWORD *)(result + 168) = 0u;
      *(_OWORD *)(result + 152) = 0u;
      *(_OWORD *)(result + 136) = 0u;
      *(_OWORD *)(result + 120) = 0u;
      *(_OWORD *)(result + 104) = 0u;
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 264) = 0u;
      *(_QWORD *)(v5 + 56) = result;
      *(_OWORD *)(result + 24) = *(_OWORD *)&off_1E33FE3C8;
      *(_DWORD *)result = 7;
      *(_BYTE *)(result + 40) = 1;
      *(_OWORD *)(result + 8) = xmmword_1E33FE3B8;
      v30 = *(_QWORD *)(v5 + 56);
      if (*(_DWORD *)v30 < 2u)
        goto LABEL_43;
      *(_OWORD *)(v30 + 48) = xmmword_1E33FE3E0;
      *(_OWORD *)(v30 + 64) = *(_OWORD *)&off_1E33FE3F0;
      *(_BYTE *)(v30 + 80) = 1;
      v31 = *(_QWORD *)(v5 + 56);
      if (*(_DWORD *)v31 < 3u)
        goto LABEL_43;
      *(_OWORD *)(v31 + 88) = xmmword_1E33FE408;
      *(_OWORD *)(v31 + 104) = *(_OWORD *)&off_1E33FE418;
      *(_BYTE *)(v31 + 120) = 0;
      v32 = *(_QWORD *)(v5 + 56);
      if (*(_DWORD *)v32 < 4u)
        goto LABEL_43;
      *(_OWORD *)(v32 + 128) = xmmword_1E33FE430;
      *(_OWORD *)(v32 + 144) = *(_OWORD *)&off_1E33FE440;
      *(_BYTE *)(v32 + 160) = 1;
      v33 = *(_QWORD *)(v5 + 56);
      if (*(_DWORD *)v33 < 5u)
        goto LABEL_43;
      *(_OWORD *)(v33 + 168) = xmmword_1E33FE458;
      *(_OWORD *)(v33 + 184) = *(_OWORD *)&off_1E33FE468;
      *(_BYTE *)(v33 + 200) = 1;
      v34 = *(_QWORD *)(v5 + 56);
      if (*(_DWORD *)v34 < 6u
        || (*(_OWORD *)(v34 + 208) = xmmword_1E33FE480,
            *(_OWORD *)(v34 + 224) = *(_OWORD *)&off_1E33FE490,
            *(_BYTE *)(v34 + 240) = 0,
            v35 = *(_QWORD *)(v5 + 56),
            *(_DWORD *)v35 < 7u))
      {
LABEL_43:
        __break(0xC471u);
        JUMPOUT(0x195F81710);
      }
      *(_OWORD *)(v35 + 248) = xmmword_1E33FE4A8;
      *(_OWORD *)(v35 + 264) = *(_OWORD *)&off_1E33FE4B8;
      *(_BYTE *)(v35 + 280) = 0;
      *(_QWORD *)(v5 + 64) = 0;
      break;
    case 3:
      v5 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v5 + 8) = 1;
      *(_QWORD *)v5 = off_1E33FE158;
      v36 = *((_QWORD *)a2 + 2);
      if (v36)
        goto LABEL_49;
      v36 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = a2;
      v38 = (unsigned int *)*((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = v36;
      if (!v38)
        goto LABEL_49;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v38);
        WTF::fastFree((WTF *)v38, v37);
      }
      v36 = *((_QWORD *)a2 + 2);
      if (v36)
      {
LABEL_49:
        do
          v41 = __ldaxr((unsigned int *)v36);
        while (__stlxr(v41 + 1, (unsigned int *)v36));
      }
      *(_QWORD *)(v5 + 16) = v36;
      v42 = WTF::fastMalloc((WTF *)0xA8);
      *(_DWORD *)(v42 + 8) = 1;
      *(_QWORD *)v42 = off_1E3401600;
      *(_QWORD *)(v42 + 16) = 0;
      *(_QWORD *)(v42 + 24) = v5;
      *(_QWORD *)(v42 + 32) = 0;
      *(_QWORD *)(v42 + 40) = off_1E3407128;
      v43 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v42 + 48) = 0u;
      *(_OWORD *)(v42 + 64) = 0u;
      v44 = *(unsigned int **)(v43 + 736);
      if (!v44)
        v44 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 + 1, v44));
      *(_QWORD *)(v42 + 80) = v44;
      *(_QWORD *)(v42 + 40) = off_1E31F7378;
      result = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)result = off_1E3401888;
      *(_QWORD *)(result + 8) = WebCore::PageOverlay::fadeAnimationTimerFired;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = v42;
      *(_QWORD *)(v42 + 88) = result;
      *(_QWORD *)(v42 + 96) = 0;
      *(_QWORD *)(v42 + 104) = 0x3FC999999999999ALL;
      *(_QWORD *)(v42 + 112) = 0x3F80000000000000;
      *(_WORD *)(v42 + 120) = 256;
      *(_BYTE *)(v42 + 122) = 1;
      *(_QWORD *)(v42 + 132) = 0;
      *(_QWORD *)(v42 + 124) = 0;
      v46 = ++WebCore::generatePageOverlayID(void)::pageOverlayID;
      *(_QWORD *)(v42 + 144) = 0x1104000000000000;
      *(_QWORD *)(v42 + 152) = v46;
      *(_BYTE *)(v42 + 160) = 1;
      *(_QWORD *)(v5 + 24) = v42;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = 0x1104000000FF0066;
      *(_BYTE *)(v5 + 48) = 1;
      *(_QWORD *)v5 = off_1E33FE340;
      break;
    default:
      v5 = WTF::fastMalloc((WTF *)0x38);
      result = (uint64_t)WebCore::MouseWheelRegionOverlay::MouseWheelRegionOverlay((WebCore::MouseWheelRegionOverlay *)v5, a2);
      break;
  }
  *a1 = v5;
  return result;
}

void WebCore::RegionOverlay::~RegionOverlay(WebCore::RegionOverlay *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::PageOverlay *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v11;
  WebCore::PageOverlay *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  *(_QWORD *)this = off_1E33FE158;
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      ++*(_DWORD *)v4;
      v5 = (WebCore::PageOverlay *)*((_QWORD *)this + 3);
      if (v5)
      {
        ++*((_DWORD *)v5 + 2);
        WebCore::PageOverlayController::uninstallPageOverlay(*(_QWORD *)(v4 + 1232), (uint64_t)v5, 0);
        if (*((_DWORD *)v5 + 2) == 1)
        {
          WebCore::PageOverlay::~PageOverlay(v5, a2);
          WTF::fastFree(v21, v22);
        }
        else
        {
          --*((_DWORD *)v5 + 2);
        }
      }
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::Page::~Page(v4);
        WTF::fastFree(v19, v20);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  v6 = *((_QWORD *)this + 5);
  if ((v6 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    v8 = *((_QWORD *)v7 + 2);
    *((_QWORD *)v7 + 2) = 0;
    if (v8)
    {
      v9 = *(WTF **)(v8 + 144);
      if ((WTF *)(v8 + 160) != v9 && v9 != 0)
      {
        *(_QWORD *)(v8 + 144) = 0;
        *(_DWORD *)(v8 + 152) = 0;
        WTF::fastFree(v9, a2);
      }
      v11 = *(WTF **)v8;
      if (v8 + 16 != *(_QWORD *)v8 && v11 != 0)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
        WTF::fastFree(v11, a2);
      }
      WTF::fastFree((WTF *)v8, a2);
    }
    WTF::fastFree(v7, a2);
  }
  v13 = (WebCore::PageOverlay *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
    {
      WebCore::PageOverlay::~PageOverlay(v13, a2);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*((_DWORD *)v13 + 2);
    }
  }
  v14 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
}

uint64_t WebCore::RegionOverlay::willMoveToPage(uint64_t this, WebCore::PageOverlay *a2, WebCore::Page *a3)
{
  uint64_t v3;
  WTF *v4;
  void *v5;

  if (!a3)
  {
    v3 = this;
    this = *(_QWORD *)(this + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 8) == 1)
      {
        WebCore::PageOverlay::~PageOverlay((WebCore::PageOverlay *)this, a2);
        return WTF::fastFree(v4, v5);
      }
      else
      {
        --*(_DWORD *)(this + 8);
      }
    }
  }
  return this;
}

uint64_t WebCore::RegionOverlay::didMoveToPage(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
    *(_BYTE *)(result + 48) = 1;
  return result;
}

uint64_t WebCore::RegionOverlay::drawRect(WebCore::RegionOverlay *this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  float v7;
  float v8;
  uint64_t result;
  const WebCore::IntRect *v10;
  WebCore::GraphicsContext *v11;
  float v12[4];

  v7 = (float)*((int *)a4 + 1);
  v12[0] = (float)*(int *)a4;
  v12[1] = v7;
  v8 = (float)*((int *)a4 + 3);
  v12[2] = (float)*((int *)a4 + 2);
  v12[3] = v8;
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, float *))(*(_QWORD *)a3 + 280))(a3, v12);
  v11 = (WebCore::GraphicsContext *)*((_QWORD *)this + 4);
  if (v11)
    return WebCore::RegionOverlay::drawRegion(a3, v11, (WebCore::RegionOverlay *)((char *)this + 40), a4, v10);
  return result;
}

uint64_t WebCore::RegionOverlay::mouseEvent()
{
  return 0;
}

uint64_t WebCore::DebugPageOverlays::ensureRegionOverlayForPage(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _OWORD *v11;
  void *v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int i;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD **v41;
  uint64_t v42;
  _DWORD *v43;
  WTF *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _DWORD **v53;
  _DWORD *v54;
  _DWORD *v55;
  char v56[8];
  uint64_t v57;

  result = WTF::WeakHashMap<WebCore::Page,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultWeakPtrImpl>::find((uint64_t)v56, (uint64_t *)a1, a2[2]);
  if (*(_QWORD *)a1)
    v7 = *(_QWORD *)a1 + 24 * *(unsigned int *)(*(_QWORD *)a1 - 4);
  else
    v7 = 0;
  if (v57 == v7)
  {
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
    *v11 = 0u;
    v11[1] = 0u;
    WebCore::RegionOverlay::create((uint64_t *)&v55, (WebCore::Page *)a2, a3);
    v9 = v55;
    ++v55[2];
    v13 = (_DWORD *)*((_QWORD *)v11 + a3);
    *((_QWORD *)v11 + a3) = v9;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    v14 = *(_DWORD *)(a1 + 8);
    v15 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v14 + 1;
    if (v14 > v15)
      WTF::WeakHashMap<WebCore::Page,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, v12);
    v16 = a2[2];
    if (v16
      || (v16 = WTF::fastCompactMalloc((WTF *)0x10),
          *(_DWORD *)v16 = 1,
          *(_QWORD *)(v16 + 8) = a2,
          v19 = (unsigned int *)a2[2],
          a2[2] = v16,
          !v19))
    {
      do
        v17 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v17 + 1, (unsigned int *)v16));
      do
        v18 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v18 + 1, (unsigned int *)v16));
    }
    else
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v12);
      }
      v16 = a2[2];
      do
        v22 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v22 + 1, (unsigned int *)v16));
      do
        v23 = __ldaxr((unsigned int *)v16);
      while (__stlxr(v23 + 1, (unsigned int *)v16));
      if (!v16)
        goto LABEL_30;
    }
    do
    {
      v24 = __ldaxr((unsigned int *)v16);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v16));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v16);
      WTF::fastFree((WTF *)v16, v12);
    }
LABEL_30:
    v26 = *(_QWORD *)a1;
    if (*(_QWORD *)a1
      || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, 8u, 0), (v26 = *(_QWORD *)a1) != 0))
    {
      v27 = *(_DWORD *)(v26 - 8);
    }
    else
    {
      v27 = 0;
    }
    v28 = 0;
    v29 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
    v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
    v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
    v32 = (v31 >> 31) ^ v31;
    for (i = 1; ; ++i)
    {
      v34 = v32 & v27;
      v35 = (uint64_t *)(v26 + 24 * (v32 & v27));
      v36 = *v35;
      if (*v35 == -1)
      {
        v28 = (uint64_t *)(v26 + 24 * v34);
      }
      else
      {
        if (!v36)
        {
          if (v28)
          {
            *v28 = 0;
            v28[1] = 0;
            v28[2] = 0;
            --*(_DWORD *)(*(_QWORD *)a1 - 16);
            *v28 = v16;
          }
          else
          {
            *v35 = v16;
            v28 = v35;
          }
          v40 = *((unsigned int *)v28 + 5);
          if ((_DWORD)v40)
          {
            v41 = (_DWORD **)v28[1];
            v42 = 8 * v40;
            do
            {
              v43 = *v41;
              *v41 = 0;
              if (v43)
              {
                if (v43[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
                else
                  --v43[2];
              }
              ++v41;
              v42 -= 8;
            }
            while (v42);
          }
          v44 = (WTF *)v28[1];
          if (v44)
          {
            v28[1] = 0;
            *((_DWORD *)v28 + 4) = 0;
            WTF::fastFree(v44, v12);
          }
          v28[1] = (uint64_t)v11;
          v28[2] = 0x400000004;
          v45 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
            v46 = *(_DWORD *)(v45 - 12) + 1;
          else
            v46 = 1;
          *(_DWORD *)(v45 - 12) = v46;
          v47 = *(_QWORD *)a1;
          if (*(_QWORD *)a1)
            v48 = *(_DWORD *)(v47 - 12);
          else
            v48 = 0;
          v49 = (*(_DWORD *)(v47 - 16) + v48);
          v50 = *(unsigned int *)(v47 - 4);
          if (v50 > 0x400)
          {
            if (v50 <= 2 * v49)
            {
LABEL_67:
              v51 = (_DWORD)v50 << (6 * *(_DWORD *)(v47 - 12) >= (2 * v50));
              goto LABEL_71;
            }
          }
          else if (3 * v50 <= 4 * v49)
          {
            if ((_DWORD)v50)
              goto LABEL_67;
            v51 = 8;
LABEL_71:
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v51, (unsigned int **)v28);
          }
          v11 = 0;
          v39 = 0;
          v38 = 1;
          goto LABEL_73;
        }
        if (v36 == v16)
        {
          if (v16)
          {
            do
              v37 = __ldaxr((unsigned int *)v16);
            while (__stlxr(v37 - 1, (unsigned int *)v16));
            if (v37 == 1)
            {
              atomic_store(1u, (unsigned int *)v16);
              WTF::fastFree((WTF *)v16, v12);
            }
          }
          v38 = 0;
          v39 = 4;
LABEL_73:
          if (v9[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
            if ((v38 & 1) != 0)
              goto LABEL_75;
          }
          else
          {
            --v9[2];
            if ((v38 & 1) != 0)
              goto LABEL_75;
          }
          v52 = 8 * v39;
          v53 = (_DWORD **)v11;
          do
          {
            v54 = *v53;
            *v53 = 0;
            if (v54)
            {
              if (v54[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
              else
                --v54[2];
            }
            ++v53;
            v52 -= 8;
          }
          while (v52);
LABEL_75:
          if (v11)
            WTF::fastFree((WTF *)v11, v12);
          return (uint64_t)v9;
        }
      }
      v32 = i + v34;
    }
  }
  if (*(_DWORD *)(v57 + 20) > a3)
  {
    v8 = *(_QWORD *)(v57 + 8);
    v9 = *(_DWORD **)(v8 + 8 * a3);
    if (!v9)
    {
      WebCore::RegionOverlay::create((uint64_t *)&v55, (WebCore::Page *)a2, a3);
      v9 = v55;
      v10 = *(_DWORD **)(v8 + 8 * a3);
      *(_QWORD *)(v8 + 8 * a3) = v55;
      if (v10)
      {
        if (v10[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          return *(_QWORD *)(v8 + 8 * a3);
        }
        else
        {
          --v10[2];
        }
      }
    }
    return (uint64_t)v9;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Page,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultWeakPtrImpl>::find(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t **v18;
  uint64_t *v19;

  ++*((_DWORD *)a2 + 2);
  if (a3 && *(_QWORD *)(a3 + 8))
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = *(_DWORD *)(v3 - 8);
      v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      v8 = v4 & ((v7 >> 31) ^ v7);
      for (i = 1; ; ++i)
      {
        v10 = (uint64_t *)(v3 + 24 * v8);
        v11 = *v10;
        if (*v10 != -1)
        {
          if (!v11)
          {
            v17 = *(_DWORD *)(v3 - 4);
            v10 = (uint64_t *)(v3 + 24 * v17);
            v15 = v10;
            goto LABEL_17;
          }
          if (v11 == a3)
            break;
        }
        v8 = (v8 + i) & v4;
      }
      v17 = *(_DWORD *)(v3 - 4);
      v15 = (uint64_t *)(v3 + 24 * v17);
LABEL_17:
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = v10;
      v18 = (uint64_t **)(result + 8);
      *(_QWORD *)(result + 16) = v15;
      v16 = (uint64_t *)(v3 + 24 * v17);
    }
    else
    {
      v10 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = 0;
      v18 = (uint64_t **)(result + 8);
      *(_QWORD *)(result + 16) = 0;
    }
    *(_QWORD *)(result + 24) = v16;
    *(_QWORD *)(result + 32) = v3 + 24 * v17;
    *(_DWORD *)(result + 40) = 0;
LABEL_19:
    while (v10 != v16 && !*(_QWORD *)(*v10 + 8))
    {
      v19 = v10 + 3;
      *v18 = v10 + 3;
      v10 = v15;
      if (v19 != v15)
      {
        v10 = v19;
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 3;
          *v18 = v10;
          if (v10 == v15)
          {
            v10 = v15;
            goto LABEL_19;
          }
        }
      }
    }
  }
  else
  {
    v12 = *a2;
    if (*a2)
    {
      v13 = *(_DWORD *)(v12 - 4);
      v14 = v12 + 24 * v13;
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = v14;
    }
    else
    {
      v14 = 0;
      v13 = 0;
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = 0;
    }
    *(_QWORD *)(result + 16) = v14;
    *(_QWORD *)(result + 24) = v14;
    *(_QWORD *)(result + 32) = v12 + 24 * v13;
    *(_DWORD *)(result + 40) = 0;
  }
  return result;
}

uint64_t *WebCore::DebugPageOverlays::regionChanged(uint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  WebCore::Page *v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(WebCore::Page **)(v3 + 8);
    if (v4)
    {
      v6 = result;
      ++*(_DWORD *)v4;
      result = WTF::WeakHashMap<WebCore::Page,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultWeakPtrImpl>::find(result, (uint64_t)v4, (uint64_t)&v11);
      if (*v6)
        v7 = *v6 + 24 * *(unsigned int *)(*v6 - 4);
      else
        v7 = 0;
      if (v12 != v7)
      {
        if (*(_DWORD *)(v12 + 20) <= a3)
        {
          __break(0xC471u);
          return result;
        }
        result = *(uint64_t **)(*(_QWORD *)(v12 + 8) + 8 * a3);
        if (result)
        {
          v8 = *((_DWORD *)result + 2);
          *((_DWORD *)result + 2) = v8 + 1;
          *((_BYTE *)result + 48) = 1;
          if (v8)
            *((_DWORD *)result + 2) = v8;
          else
            result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        }
      }
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::Page::~Page(v4);
        return (uint64_t *)WTF::fastFree(v9, v10);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return result;
}

uint64_t WebCore::DebugPageOverlays::hasOverlaysForPage(WebCore::DebugPageOverlays *this, WebCore::Page *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;

  ++*((_DWORD *)this + 2);
  v2 = *((_QWORD *)a2 + 2);
  if (!v2)
    return 0;
  if (!*(_QWORD *)(v2 + 8))
    return 0;
  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; ++i)
  {
    v10 = *(_QWORD *)(v3 + 24 * v8);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (v10 == v2)
        break;
    }
    v8 = (v8 + i) & v4;
  }
  return 1;
}

uint64_t WebCore::DebugPageOverlays::updateRegionIfNecessary(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WebCore::PageOverlay *v9;
  uint64_t v10;
  __n128 v11;
  void *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  result = (uint64_t)WTF::WeakHashMap<WebCore::Page,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultWeakPtrImpl>::find(a1, a2, (uint64_t)&v15);
  if (*a1)
    v6 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
  else
    v6 = 0;
  if (v16 != v6)
  {
    if (*(_DWORD *)(v16 + 20) <= a3)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * a3);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 8);
        *(_DWORD *)(v7 + 8) = v8 + 1;
        if (*(_BYTE *)(v7 + 48))
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
          if ((_DWORD)result)
          {
            v9 = *(WebCore::PageOverlay **)(v7 + 24);
            ++*((_DWORD *)v9 + 2);
            v15 = WebCore::PageOverlay::bounds(v9);
            v16 = v10;
            result = WebCore::PageOverlay::setNeedsDisplay((uint64_t)v9, (const WebCore::IntRect *)&v15, v11);
            if (*((_DWORD *)v9 + 2) == 1)
            {
              WebCore::PageOverlay::~PageOverlay(v9, v12);
              result = WTF::fastFree(v13, v14);
            }
            else
            {
              --*((_DWORD *)v9 + 2);
            }
          }
          *(_BYTE *)(v7 + 48) = 0;
          v8 = *(_DWORD *)(v7 + 8) - 1;
        }
        if (v8)
          *(_DWORD *)(v7 + 8) = v8;
        else
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return result;
}

uint64_t *WTF::WeakHashMap<WebCore::Page,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultWeakPtrImpl>::find@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *v20;

  ++*((_DWORD *)result + 2);
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = *result;
    if (*result)
    {
      v5 = *(_DWORD *)(v4 - 8);
      v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      for (i = 1; ; ++i)
      {
        v11 = (uint64_t *)(v4 + 24 * v9);
        v12 = *v11;
        if (*v11 != -1)
        {
          if (!v12)
          {
            v18 = *(_DWORD *)(v4 - 4);
            v11 = (uint64_t *)(v4 + 24 * v18);
            v16 = v11;
            goto LABEL_17;
          }
          if (v12 == v3)
            break;
        }
        v9 = (v9 + i) & v5;
      }
      v18 = *(_DWORD *)(v4 - 4);
      v16 = (uint64_t *)(v4 + 24 * v18);
LABEL_17:
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = v11;
      v19 = (uint64_t **)(a3 + 8);
      *(_QWORD *)(a3 + 16) = v16;
      v17 = (uint64_t *)(v4 + 24 * v18);
    }
    else
    {
      v11 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = 0;
      v19 = (uint64_t **)(a3 + 8);
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)(a3 + 24) = v17;
    *(_QWORD *)(a3 + 32) = v4 + 24 * v18;
    *(_DWORD *)(a3 + 40) = 0;
LABEL_19:
    while (v11 != v17 && !*(_QWORD *)(*v11 + 8))
    {
      v20 = v11 + 3;
      *v19 = v11 + 3;
      v11 = v16;
      if (v20 != v16)
      {
        v11 = v20;
        while ((unint64_t)(*v11 + 1) <= 1)
        {
          v11 += 3;
          *v19 = v11;
          if (v11 == v16)
          {
            v11 = v16;
            goto LABEL_19;
          }
        }
      }
    }
  }
  else
  {
    v13 = *result;
    if (*result)
    {
      v14 = *(_DWORD *)(v13 - 4);
      v15 = v13 + 24 * v14;
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = v15;
    }
    else
    {
      v15 = 0;
      v14 = 0;
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = 0;
    }
    *(_QWORD *)(a3 + 16) = v15;
    *(_QWORD *)(a3 + 24) = v15;
    *(_QWORD *)(a3 + 32) = v13 + 24 * v14;
    *(_DWORD *)(a3 + 40) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::DebugPageOverlays::updateOverlayRegionVisibility(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  WTF::StringImpl *result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if ((a3 & 1) != 0)
  {
    v7 = WebCore::DebugPageOverlays::ensureRegionOverlayForPage((uint64_t)a1, a2, 1u);
    WebCore::PageOverlayController::installPageOverlay(a2[154], *(_QWORD *)(v7 + 24), 0);
  }
  else
  {
    WTF::WeakHashMap<WebCore::Page,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultWeakPtrImpl>::find((uint64_t)&v25, a1, a2[2]);
    if (*a1)
      v6 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
    else
      v6 = 0;
    if (v26 != v6)
    {
      if (*(_DWORD *)(v26 + 20) <= 1u)
        goto LABEL_55;
      v8 = *(_QWORD *)(v26 + 8);
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        WebCore::PageOverlayController::uninstallPageOverlay(a2[154], *(_QWORD *)(v9 + 24), 0);
        v10 = *(_DWORD **)(v8 + 8);
        *(_QWORD *)(v8 + 8) = 0;
        if (v10)
        {
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
        }
      }
    }
  }
  if ((a3 & 2) == 0)
  {
    WTF::WeakHashMap<WebCore::Page,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultWeakPtrImpl>::find((uint64_t)&v25, a1, a2[2]);
    if (*a1)
      v11 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
    else
      v11 = 0;
    if (v26 != v11)
    {
      if (!*(_DWORD *)(v26 + 20))
      {
        __break(0xC471u);
        JUMPOUT(0x195F8289CLL);
      }
      v13 = *(_QWORD *)(v26 + 8);
      if (*(_QWORD *)v13)
      {
        WebCore::PageOverlayController::uninstallPageOverlay(a2[154], *(_QWORD *)(*(_QWORD *)v13 + 24), 0);
        v14 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        if (v14)
        {
          if (v14[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
            if ((a3 & 0x10) == 0)
              goto LABEL_25;
            goto LABEL_37;
          }
          --v14[2];
        }
      }
    }
    if ((a3 & 0x10) == 0)
      goto LABEL_25;
LABEL_37:
    v19 = WebCore::DebugPageOverlays::ensureRegionOverlayForPage((uint64_t)a1, a2, 2u);
    WebCore::PageOverlayController::installPageOverlay(a2[154], *(_QWORD *)(v19 + 24), 0);
    goto LABEL_38;
  }
  v12 = WebCore::DebugPageOverlays::ensureRegionOverlayForPage((uint64_t)a1, a2, 0);
  WebCore::PageOverlayController::installPageOverlay(a2[154], *(_QWORD *)(v12 + 24), 0);
  if ((a3 & 0x10) != 0)
    goto LABEL_37;
LABEL_25:
  WTF::WeakHashMap<WebCore::Page,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultWeakPtrImpl>::find((uint64_t)&v25, a1, a2[2]);
  if (*a1)
    v15 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
  else
    v15 = 0;
  if (v26 == v15)
    goto LABEL_38;
  if (*(_DWORD *)(v26 + 20) <= 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x195F828A4);
  }
  v16 = *(_QWORD *)(v26 + 8);
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17
    || (WebCore::PageOverlayController::uninstallPageOverlay(a2[154], *(_QWORD *)(v17 + 24), 0),
        v18 = *(_DWORD **)(v16 + 16),
        *(_QWORD *)(v16 + 16) = 0,
        !v18))
  {
LABEL_38:
    if ((a3 & 0x20) == 0)
      goto LABEL_39;
    goto LABEL_50;
  }
  if (v18[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    if ((a3 & 0x20) == 0)
      goto LABEL_39;
LABEL_50:
    v24 = WebCore::DebugPageOverlays::ensureRegionOverlayForPage((uint64_t)a1, a2, 3u);
    return WebCore::PageOverlayController::installPageOverlay(a2[154], *(_QWORD *)(v24 + 24), 0);
  }
  --v18[2];
  if ((a3 & 0x20) != 0)
    goto LABEL_50;
LABEL_39:
  result = (WTF::StringImpl *)WTF::WeakHashMap<WebCore::Page,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultWeakPtrImpl>::find((uint64_t)&v25, a1, a2[2]);
  if (*a1)
    v21 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
  else
    v21 = 0;
  if (v26 != v21)
  {
    if (*(_DWORD *)(v26 + 20) > 3u)
    {
      v22 = *(_QWORD *)(v26 + 8);
      v23 = *(_QWORD *)(v22 + 24);
      if (v23)
      {
        WebCore::PageOverlayController::uninstallPageOverlay(a2[154], *(_QWORD *)(v23 + 24), 0);
        result = *(WTF::StringImpl **)(v22 + 24);
        *(_QWORD *)(v22 + 24) = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
          else
            --*((_DWORD *)result + 2);
        }
      }
      return result;
    }
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x195F82894);
  }
  return result;
}

uint64_t WebCore::DOMTimer::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::DOMTimer *WebCore::DOMTimer::deref(WebCore::DOMTimer *this, void *a2)
{
  WTF *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::DOMTimer::~DOMTimer(this, a2);
    return (WebCore::DOMTimer *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

void WebCore::MouseWheelRegionOverlay::~MouseWheelRegionOverlay(WebCore::MouseWheelRegionOverlay *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::RegionOverlay::~RegionOverlay(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::PageOverlayClient::copyAccessibilityAttributeStringValueForPoint()
{
  return 0;
}

uint64_t WebCore::PageOverlayClient::copyAccessibilityAttributeBoolValueForPoint()
{
  return 0;
}

void WebCore::PageOverlayClient::copyAccessibilityAttributeNames(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::RegionOverlay::shouldPaintOverlayIntoLayer(WebCore::RegionOverlay *this)
{
  return 1;
}

void WebCore::NonFastScrollableRegionOverlay::~NonFastScrollableRegionOverlay(WebCore::NonFastScrollableRegionOverlay *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    v9 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v9)
    {
      v10 = (_QWORD *)(v3 + 24);
      do
      {
        if (*((unsigned __int8 *)v10 - 24) != 254)
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
          {
            v18 = v9;
            v19 = v10;
            v12 = *(WTF **)(v11 + 144);
            if ((WTF *)(v11 + 160) != v12 && v12 != 0)
            {
              *(_QWORD *)(v11 + 144) = 0;
              *(_DWORD *)(v11 + 152) = 0;
              v16 = v11;
              WTF::fastFree(v12, a2);
              v11 = v16;
            }
            v14 = *(WTF **)v11;
            if (v11 + 16 != *(_QWORD *)v11 && v14 != 0)
            {
              *(_QWORD *)v11 = 0;
              *(_DWORD *)(v11 + 8) = 0;
              v17 = v11;
              WTF::fastFree(v14, a2);
              v11 = v17;
            }
            WTF::fastFree((WTF *)v11, a2);
            v9 = v18;
            v10 = v19;
          }
        }
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    v5 = *(WTF **)(v4 + 144);
    if ((WTF *)(v4 + 160) != v5 && v5 != 0)
    {
      *(_QWORD *)(v4 + 144) = 0;
      *(_DWORD *)(v4 + 152) = 0;
      WTF::fastFree(v5, a2);
    }
    v7 = *(WTF **)v4;
    if (v4 + 16 != *(_QWORD *)v4 && v7 != 0)
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      WTF::fastFree(v7, a2);
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  WebCore::RegionOverlay::~RegionOverlay(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v7;
  WTF *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  WTF *v14;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    v11 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v11)
    {
      v12 = (_QWORD *)(v3 + 24);
      do
      {
        if (*((unsigned __int8 *)v12 - 24) != 254)
        {
          v13 = *v12;
          *v12 = 0;
          if (v13)
          {
            v20 = v11;
            v21 = v12;
            v14 = *(WTF **)(v13 + 144);
            if ((WTF *)(v13 + 160) != v14 && v14 != 0)
            {
              *(_QWORD *)(v13 + 144) = 0;
              *(_DWORD *)(v13 + 152) = 0;
              v18 = v13;
              WTF::fastFree(v14, a2);
              v13 = v18;
            }
            v16 = *(WTF **)v13;
            if (v13 + 16 != *(_QWORD *)v13 && v16 != 0)
            {
              *(_QWORD *)v13 = 0;
              *(_DWORD *)(v13 + 8) = 0;
              v19 = v13;
              WTF::fastFree(v16, a2);
              v13 = v19;
            }
            WTF::fastFree((WTF *)v13, a2);
            v11 = v20;
            v12 = v21;
          }
        }
        v12 += 4;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    v5 = *(WTF **)(v4 + 144);
    if ((WTF *)(v4 + 160) != v5 && v5 != 0)
    {
      *(_QWORD *)(v4 + 144) = 0;
      *(_DWORD *)(v4 + 152) = 0;
      WTF::fastFree(v5, a2);
    }
    v7 = *(WTF **)v4;
    if (v4 + 16 != *(_QWORD *)v4 && v7 != 0)
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      WTF::fastFree(v7, a2);
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  WebCore::RegionOverlay::~RegionOverlay(this, a2);
  WTF::fastFree(v9, v10);
}

void WebCore::InteractionRegionOverlay::~InteractionRegionOverlay(WebCore::InteractionRegionOverlay *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  WebCore::RegionOverlay::~RegionOverlay(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  v3 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  WebCore::RegionOverlay::~RegionOverlay(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::InteractionRegionOverlay::shouldPaintOverlayIntoLayer(WebCore::InteractionRegionOverlay *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int *v3;
  char **v4;
  char **v5;
  char *v6;
  int v7;

  v1 = (unsigned int *)*((_QWORD *)this + 7);
  v2 = v1 + 2;
  if (v1)
    v3 = v1 + 2;
  else
    v3 = 0;
  if (v1)
    v4 = (char **)&v2[10 * *v1];
  else
    v4 = 0;
  if (v3 == (unsigned int *)v4)
  {
LABEL_20:
    v7 = 0;
    return v7 & v2;
  }
  if ("regions")
  {
    while (1)
    {
      if (*(_QWORD *)v3)
      {
        if (!strcmp("regions", *(const char **)v3))
          goto LABEL_22;
      }
      else if (!"regions")
      {
        goto LABEL_22;
      }
      v3 += 10;
      if (v3 == (unsigned int *)v4)
        goto LABEL_20;
    }
  }
  if ("regions" != *(char **)v3)
  {
    v5 = (char **)(v1 + 12);
    while (v5 != v4)
    {
      v6 = *v5;
      v5 += 5;
      LODWORD(v2) = (_DWORD)v6;
      if ("regions" == v6)
      {
        v3 = (unsigned int *)(v5 - 5);
        goto LABEL_22;
      }
    }
    goto LABEL_20;
  }
  v3 = v1 + 2;
LABEL_22:
  LODWORD(v2) = *((_BYTE *)v3 + 32) != 0;
  v7 = 1;
  return v7 & v2;
}

void WebCore::SiteIsolationOverlay::~SiteIsolationOverlay(WebCore::SiteIsolationOverlay *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::RegionOverlay::~RegionOverlay(this, a2);
  WTF::fastFree(v2, v3);
}

_DWORD *WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::expand(_DWORD *a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE83850 && (v2 = *(_DWORD *)(qword_1ECE83850 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE83850 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v3, a1);
}

_DWORD *WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(unsigned int a1, _DWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v4 = qword_1ECE83850;
  if (qword_1ECE83850)
  {
    v5 = *(_DWORD *)(qword_1ECE83850 - 4);
    v6 = *(_DWORD *)(qword_1ECE83850 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE83850 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE83850 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    v11 = (_DWORD *)v4;
    do
    {
      if (*v11 != -1)
      {
        if (*v11)
        {
          v12 = v9;
          v13 = (uint64_t)v11;
          v14 = v4;
          v15 = WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::reinsert((uint64_t)v11, v8);
          v11 = (_DWORD *)WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>::~KeyValuePair(v13, v16);
          if (v11 == a2)
            v9 = v15;
          else
            v9 = v12;
          v4 = v14;
        }
        else
        {
          v11 = (_DWORD *)WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>::~KeyValuePair((uint64_t)v11, v8);
        }
      }
      v11 += 4;
      --v10;
    }
    while (v10);
    return (_DWORD *)WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return (_DWORD *)WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>::~KeyValuePair(uint64_t a1, void *a2)
{
  WebCore::DOMTimer *v3;
  WTF *v5;
  void *v6;

  v3 = *(WebCore::DOMTimer **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::DOMTimer::~DOMTimer(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return a1;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::reinsert(uint64_t a1, void *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::DOMTimer *v9;
  uint64_t v10;
  WTF *v12;
  void *v13;

  if (qword_1ECE83850)
    v3 = *(_DWORD *)(qword_1ECE83850 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((*(_DWORD *)a1 + ~(*(_DWORD *)a1 << 15)) ^ ((*(_DWORD *)a1 + ~(*(_DWORD *)a1 << 15)) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + v7;
  }
  while (*(_DWORD *)(qword_1ECE83850 + 16 * v7));
  v8 = qword_1ECE83850 + 16 * v7;
  v9 = *(WebCore::DOMTimer **)(v8 + 8);
  *(_QWORD *)(v8 + 8) = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 1)
    {
      WebCore::DOMTimer::~DOMTimer(v9, a2);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*((_DWORD *)v9 + 6);
    }
  }
  *(_DWORD *)v8 = *(_DWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(v8 + 8) = v10;
  return v8;
}

_DWORD *WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::remove(int a1)
{
  _DWORD *result;
  void *v2;
  uint64_t v3;

  result = (_DWORD *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>,int>(a1);
  v3 = qword_1ECE83850;
  if (qword_1ECE83850)
    v3 = qword_1ECE83850 + 16 * *(unsigned int *)(qword_1ECE83850 - 4);
  if ((_DWORD *)v3 != result)
    return WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::removeWithoutEntryConsistencyCheck(result, v2);
  return result;
}

_DWORD *WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::removeWithoutEntryConsistencyCheck(_DWORD *result, void *a2)
{
  uint64_t v2;
  WebCore::DOMTimer *v3;
  int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v2 = qword_1ECE83850;
  if (qword_1ECE83850)
    v2 = qword_1ECE83850 + 16 * *(unsigned int *)(qword_1ECE83850 - 4);
  if ((_DWORD *)v2 != result)
  {
    *result = -1;
    v3 = (WebCore::DOMTimer *)*((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = 0;
    if (v3)
    {
      if (*((_DWORD *)v3 + 6) == 1)
      {
        WebCore::DOMTimer::~DOMTimer(v3, a2);
        result = (_DWORD *)WTF::fastFree(v7, v8);
      }
      else
      {
        --*((_DWORD *)v3 + 6);
      }
    }
    ++*(_DWORD *)(qword_1ECE83850 - 16);
    if (qword_1ECE83850)
      v4 = *(_DWORD *)(qword_1ECE83850 - 12) - 1;
    else
      v4 = -1;
    *(_DWORD *)(qword_1ECE83850 - 12) = v4;
    if (qword_1ECE83850)
    {
      v5 = *(_DWORD *)(qword_1ECE83850 - 4);
      if (6 * *(_DWORD *)(qword_1ECE83850 - 12) < v5 && v5 >= 9)
        return WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v5 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>,int>(int a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = qword_1ECE83850;
  if (!qword_1ECE83850)
    return 0;
  result = WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>,int>(a1);
  if (!result)
    return v1 + 16 * *(unsigned int *)(v1 - 4);
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::Ref<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>,int>(int a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;

  if (qword_1ECE83850)
  {
    v1 = *(_DWORD *)(qword_1ECE83850 - 8);
    v2 = 9 * ((~(a1 << 15) + a1) ^ ((~(a1 << 15) + a1) >> 10));
    v3 = (v2 ^ (v2 >> 6)) + ~((v2 ^ (v2 >> 6)) << 11);
    v4 = v1 & (v3 ^ HIWORD(v3));
    v5 = *(_DWORD *)(qword_1ECE83850 + 16 * v4);
    if (v5 == a1)
      return qword_1ECE83850 + 16 * v4;
    v6 = 1;
    while (v5)
    {
      v4 = ((_DWORD)v4 + v6) & v1;
      v5 = *(_DWORD *)(qword_1ECE83850 + 16 * v4);
      ++v6;
      if (v5 == a1)
        return qword_1ECE83850 + 16 * v4;
    }
  }
  return 0;
}

WebCore::MouseWheelRegionOverlay *WebCore::MouseWheelRegionOverlay::MouseWheelRegionOverlay(WebCore::MouseWheelRegionOverlay *this, WebCore::Page *a2)
{
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t StatusReg;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E33FE158;
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
    goto LABEL_14;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v6 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  if (!v6)
    goto LABEL_14;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
  {
LABEL_14:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  *((_QWORD *)this + 2) = v3;
  v10 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = off_1E3401600;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = this;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  v12 = *(unsigned int **)(StatusReg + 736);
  if (!v12)
    v12 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(v10 + 80) = v12;
  *(_QWORD *)(v10 + 40) = off_1E31F7378;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v14 = off_1E3401888;
  v14[1] = WebCore::PageOverlay::fadeAnimationTimerFired;
  v14[2] = 0;
  v14[3] = v10;
  *(_QWORD *)(v10 + 88) = v14;
  *(_QWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 104) = 0x3FC999999999999ALL;
  *(_QWORD *)(v10 + 112) = 0x3F80000000000000;
  *(_WORD *)(v10 + 120) = 256;
  *(_BYTE *)(v10 + 122) = 1;
  *(_QWORD *)(v10 + 132) = 0;
  *(_QWORD *)(v10 + 124) = 0;
  v15 = ++WebCore::generatePageOverlayID(void)::pageOverlayID;
  *(_QWORD *)(v10 + 144) = 0x1104000000000000;
  *(_QWORD *)(v10 + 152) = v15;
  *(_BYTE *)(v10 + 160) = 1;
  *((_QWORD *)this + 3) = v10;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0x1104000080000066;
  *((_BYTE *)this + 48) = 1;
  *(_QWORD *)this = off_1E33FE1F0;
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMTimer::DOMTimer(WebCore::ScriptExecutionContext &,WTF::Function<void ()(WebCore::ScriptExecutionContext &)> &&,WTF::Seconds,WebCore::DOMTimer::Type)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33FE4F0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMTimer::DOMTimer(WebCore::ScriptExecutionContext &,WTF::Function<void ()(WebCore::ScriptExecutionContext &)> &&,WTF::Seconds,WebCore::DOMTimer::Type)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33FE518;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMTimer::DOMTimer(WebCore::ScriptExecutionContext &,WTF::Function<void ()(WebCore::ScriptExecutionContext &)> &&,WTF::Seconds,WebCore::DOMTimer::Type)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33FE518;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMTimer::install(WebCore::ScriptExecutionContext &,std::unique_ptr<WebCore::ScheduledAction>,WTF::Seconds,WebCore::DOMTimer::Type)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::ScheduledAction *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::ScheduledAction *)a1[1];
  *a1 = &off_1E33FE540;
  a1[1] = 0;
  if (v3)
  {
    WebCore::ScheduledAction::~ScheduledAction(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMTimer::install(WebCore::ScriptExecutionContext &,std::unique_ptr<WebCore::ScheduledAction>,WTF::Seconds,WebCore::DOMTimer::Type)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WebCore::ScheduledAction *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::ScheduledAction *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33FE540;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    WebCore::ScheduledAction::~ScheduledAction(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMTimer::install(WebCore::ScriptExecutionContext &,std::unique_ptr<WebCore::ScheduledAction>,WTF::Seconds,WebCore::DOMTimer::Type)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, WebCore::WorkerGlobalScope *a2)
{
  uint64_t v2;
  uint64_t result;
  WebCore::ScheduledAction *v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (!*((_BYTE *)a2 + 274))
    return WebCore::ScheduledAction::execute(v2, (WebCore::WorkerGlobalScope *)((char *)a2 - 192));
  v5 = (WebCore::ScheduledAction *)v2;
  if (((*(uint64_t (**)(WebCore::WorkerGlobalScope *))(*(_QWORD *)a2 + 64))(a2) & 1) != 0)
    return (uint64_t)WebCore::ScheduledAction::execute(v5, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DOMTimer::fired(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33FE568;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMTimer::fired(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33FE568;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::DOMTimer::fired(void)::$_0,void>::call(unsigned int *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::DOMTimer *v3;
  void *v4;
  WTF *v5;
  void *v6;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(WebCore::DOMTimer **)(v2 + 8);
    if (v3)
    {
      ++*((_DWORD *)v3 + 6);
      result = WebCore::DOMTimer::fired(v3, a2);
      if (*((_DWORD *)v3 + 6) == 1)
      {
        WebCore::DOMTimer::~DOMTimer(v3, v4);
        return (unsigned int *)WTF::fastFree(v5, v6);
      }
      else
      {
        --*((_DWORD *)v3 + 6);
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Page,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  unsigned int v28;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_33;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 24 * --v4);
      result = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
      {
        *v6 = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          WTF::fastFree((WTF *)result, a2);
        }
        *v6 = -1;
        v9 = v3 + 24 * v4;
        v10 = (uint64_t *)(v9 + 8);
        v11 = *(unsigned int *)(v9 + 20);
        if ((_DWORD)v11)
        {
          v12 = (_DWORD **)*v10;
          v13 = 8 * v11;
          do
          {
            v14 = *v12;
            *v12 = 0;
            if (v14)
            {
              if (v14[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
              else
                --v14[2];
            }
            ++v12;
            v13 -= 8;
          }
          while (v13);
        }
        result = *v10;
        if (*v10)
        {
          *v10 = 0;
          *(_DWORD *)(v3 + 24 * v4 + 16) = 0;
          result = WTF::fastFree((WTF *)result, a2);
        }
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v15 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v16 = *(_DWORD *)(v15 - 12);
      else
        v16 = 0;
      *(_DWORD *)(v15 - 12) = v16 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v17 = *(_DWORD *)(v3 - 4);
      v18 = *(unsigned int *)(v3 - 12);
      if (v17 >= 9 && 6 * (int)v18 < v17)
      {
        v22 = (v18 - 1) | ((v18 - 1) >> 1) | ((((_DWORD)v18 - 1) | ((v18 - 1) >> 1)) >> 2);
        v23 = v22 | (v22 >> 4) | ((v22 | (v22 >> 4)) >> 8);
        v24 = (v23 | HIWORD(v23)) + 1;
        if (v24 > 0x400)
        {
          if (v24 > 2 * v18)
            goto LABEL_44;
        }
        else if (3 * v24 > 4 * v18)
        {
LABEL_42:
          v25 = (double)v18;
          v26 = (double)v24;
          v27 = 0.604166667;
          goto LABEL_45;
        }
        LODWORD(v24) = 2 * v24;
        if (v24 <= 0x400)
          goto LABEL_42;
LABEL_44:
        v25 = (double)v18;
        v26 = (double)v24;
        v27 = 0.416666667;
LABEL_45:
        if (v26 * v27 <= v25)
          LODWORD(v24) = 2 * v24;
        if (v24 <= 8)
          v28 = 8;
        else
          v28 = v24;
        result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v2, v28, 0);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v20 = 0;
          goto LABEL_37;
        }
LABEL_34:
        v20 = *(_DWORD *)(v3 - 12);
        v21 = 0x7FFFFFFF;
        if (v20 >= 0x7FFFFFFF)
          goto LABEL_38;
        goto LABEL_37;
      }
LABEL_33:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_34;
    }
  }
  v20 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_37:
  v21 = v20;
LABEL_38:
  *(_DWORD *)(v2 + 12) = 2 * v21;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::RegionOverlay,WTF::RawPtrTraits<WebCore::RegionOverlay>,WTF::DefaultRefDerefTraits<WebCore::RegionOverlay>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  WTF **v37;
  WTF *v38;
  uint64_t v39;
  _DWORD *v40;
  WTF *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  _DWORD **v50;
  uint64_t v51;
  _DWORD *v52;
  WTF *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int **v61;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v57 = v5;
    v58 = v4;
    do
    {
      v12 = (unsigned int **)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != (unsigned int *)-1)
      {
        if (v13)
        {
          v20 = *a1;
          v61 = v10;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v26 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
          v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          v29 = v21 & ((v28 >> 31) ^ v28);
          v30 = 1;
          do
          {
            v31 = v29;
            v10 = (unsigned int **)(v20 + 24 * v29);
            v29 = (v29 + v30++) & v21;
          }
          while (*v10);
          v32 = v31;
          v33 = v20 + 24 * v31;
          v36 = *(_DWORD *)(v33 + 20);
          v35 = (_DWORD *)(v33 + 20);
          v34 = v36;
          v37 = (WTF **)(v35 - 3);
          if (v36)
          {
            v38 = *v37;
            v39 = 8 * v34;
            do
            {
              v40 = *(_DWORD **)v38;
              *(_QWORD *)v38 = 0;
              if (v40)
              {
                if (v40[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
                else
                  --v40[2];
              }
              v38 = (WTF *)((char *)v38 + 8);
              v39 -= 8;
            }
            while (v39);
          }
          v41 = *v37;
          if (*v37)
          {
            *v37 = 0;
            *(_DWORD *)(v20 + 24 * v32 + 16) = 0;
            WTF::fastFree(v41, v8);
          }
          v42 = *v10;
          *v10 = 0;
          v4 = v58;
          if (v42)
          {
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              atomic_store(1u, v42);
              WTF::fastFree((WTF *)v42, v8);
            }
          }
          v45 = *v12;
          *v12 = 0;
          *v10 = v45;
          v46 = v58 + 24 * v9;
          *v37 = 0;
          *(_QWORD *)(v35 - 1) = 0;
          v48 = *(WTF **)(v46 + 8);
          v47 = v46 + 8;
          *(_QWORD *)v47 = 0;
          *v37 = v48;
          LODWORD(v45) = *(_DWORD *)(v47 + 8);
          *(_DWORD *)(v47 + 8) = 0;
          *(_DWORD *)(v20 + 24 * v32 + 16) = (_DWORD)v45;
          LODWORD(v45) = *(_DWORD *)(v47 + 12);
          *(_DWORD *)(v47 + 12) = 0;
          *v35 = (_DWORD)v45;
          v49 = *(unsigned int *)(v47 + 12);
          v11 = v57;
          if ((_DWORD)v49)
          {
            v50 = *(_DWORD ***)v47;
            v51 = 8 * v49;
            do
            {
              v52 = *v50;
              *v50 = 0;
              if (v52)
              {
                if (v52[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
                else
                  --v52[2];
              }
              ++v50;
              v51 -= 8;
            }
            while (v51);
          }
          v53 = *(WTF **)v47;
          if (*(_QWORD *)v47)
          {
            *(_QWORD *)v47 = 0;
            *(_DWORD *)(v47 + 8) = 0;
            WTF::fastFree(v53, v8);
          }
          v54 = *v12;
          *v12 = 0;
          if (v54)
          {
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              atomic_store(1u, v54);
              WTF::fastFree((WTF *)v54, v8);
            }
          }
          if (v12 != a3)
            v10 = v61;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v15 = (WTF **)(v14 + 8);
          v16 = *(unsigned int *)(v14 + 20);
          if ((_DWORD)v16)
          {
            v17 = *v15;
            v18 = 8 * v16;
            do
            {
              v19 = *(_DWORD **)v17;
              *(_QWORD *)v17 = 0;
              if (v19)
              {
                if (v19[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
                else
                  --v19[2];
              }
              v17 = (WTF *)((char *)v17 + 8);
              v18 -= 8;
            }
            while (v18);
          }
          v22 = *v15;
          if (*v15)
          {
            *v15 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v22, v8);
          }
          v23 = *v12;
          *v12 = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v23);
              WTF::fastFree((WTF *)v23, v8);
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WebCore::DeprecatedGlobalSettings::setUsesOverlayScrollbars(uint64_t this)
{
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  BYTE2(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = this;
  return this;
}

uint64_t WebCore::DeprecatedGlobalSettings::setAudioSessionCategoryOverride(WebCore::DeprecatedGlobalSettings *this)
{
  unsigned __int8 v1;
  WebCore::AudioSessionIOS *v2;

  v1 = this;
  v2 = WebCore::AudioSession::sharedSession(this);
  return (*(uint64_t (**)(WebCore::AudioSessionIOS *, _QWORD))(*(_QWORD *)v2 + 40))(v2, v1);
}

uint64_t WebCore::DeprecatedGlobalSettings::setNetworkDataUsageTrackingEnabled(uint64_t this)
{
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  BYTE3(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = this;
  return this;
}

WTF::StringImpl *WebCore::DeprecatedGlobalSettings::setNetworkInterfaceName(WebCore::DeprecatedGlobalSettings *this, const WTF::String *a2)
{
  _DWORD *v2;
  WTF::StringImpl *result;

  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v2 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v2 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1);
  *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = v2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DeprecatedGlobalSettings::shouldManageAudioSessionCategory(WebCore::DeprecatedGlobalSettings *this)
{
  return WebCore::AudioSession::s_shouldManageAudioSessionCategory;
}

uint64_t WebCore::DeprecatedGlobalSettings::setAllowsAnySSLCertificate(uint64_t this)
{
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  byte_1ECE90A54 = this;
  return this;
}

double WebCore::DeprecatedGlobalSettings::allowsAnySSLCertificate(WebCore::DeprecatedGlobalSettings *this)
{
  double result;

  {
    result = 0.0;
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  return result;
}

uint64_t WebCore::DeviceController::fireDeviceEvent(uint64_t this, WebCore::Event *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::EventTarget **v20;
  uint64_t v21;
  _BYTE *v22;
  WebCore::Event *v23;
  uint64_t *v24;
  WebCore::Event *v25;

  v2 = (_QWORD *)this;
  if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0)
    this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 40));
  v3 = v2[3];
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (uint64_t *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = (uint64_t *)v2[3];
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = (uint64_t *)v2[3];
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    v6 = (uint64_t *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (uint64_t *)(v3 + 16 * v4);
  if (!v3)
  {
    v8 = 0;
    goto LABEL_17;
  }
LABEL_10:
  v8 = (uint64_t *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  v9 = *(unsigned int *)(v3 - 12);
  if (!(_DWORD)v9)
  {
LABEL_17:
    v10 = 0;
    goto LABEL_18;
  }
  if (v9 >> 29)
  {
    __break(0xC471u);
LABEL_66:
    JUMPOUT(0x195F84088);
  }
  this = WTF::fastMalloc((WTF *)(8 * v9));
  v10 = (WTF *)this;
LABEL_18:
  if (v8 == v6)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = *v6;
      if (*v6)
        ++*(_DWORD *)(v12 + 24);
      *((_QWORD *)v10 + v11) = v12;
      v13 = v6 + 2;
      v6 = v5;
      if (v13 != v5)
      {
        v6 = v13;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
      ++v11;
    }
    while (v6 != v8);
  }
  v14 = (_DWORD **)v2[3];
  if (v14)
  {
    v2[3] = 0;
    v15 = *((unsigned int *)v14 - 1);
    if ((_DWORD)v15)
    {
      v16 = v14;
      do
      {
        v17 = *v16;
        if (*v16 != (_DWORD *)-1)
        {
          *v16 = 0;
          if (v17)
          {
            if (v17[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 72))(v17);
            else
              --v17[6];
          }
        }
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    this = WTF::fastFree((WTF *)(v14 - 2), a2);
  }
  if (v11)
  {
    v18 = 8 * v11;
    v19 = v18;
    v20 = (WebCore::EventTarget **)v10;
    while (1)
    {
      v21 = *((_QWORD *)*v20 + 9);
      if (v21)
      {
        v22 = *(_BYTE **)(v21 + 8);
        if (v22)
        {
          if (v22[178])
          {
            __break(0xC471u);
            goto LABEL_66;
          }
          if (!v22[179] && !v22[180])
          {
            (*(void (**)(WebCore::Event **__return_ptr, _QWORD *))(*v2 + 24))(&v25, v2);
            a2 = v25;
            if (v25)
            {
              WebCore::EventTarget::dispatchEvent(*v20, v25);
              v23 = v25;
              v25 = 0;
              if (v23)
              {
                if (*((_DWORD *)v23 + 4) == 1)
                  (*(void (**)(WebCore::Event *))(*(_QWORD *)v23 + 8))(v23);
                else
                  --*((_DWORD *)v23 + 4);
              }
            }
          }
        }
      }
      ++v20;
      v19 -= 8;
      if (!v19)
      {
        v24 = (uint64_t *)v10;
        do
        {
          this = *v24;
          *v24 = 0;
          if (this)
          {
            if (*(_DWORD *)(this + 24) == 1)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 72))(this);
            else
              --*(_DWORD *)(this + 24);
          }
          ++v24;
          v18 -= 8;
        }
        while (v18);
        break;
      }
    }
  }
  if (v10)
    return WTF::fastFree(v10, a2);
  return this;
}

WTF::MonotonicTime *WebCore::DeviceController::addDeviceEventListener(WebCore::DeviceController *this, WebCore::LocalDOMWindow *a2)
{
  uint64_t v4;
  _BOOL4 v5;
  WTF::MonotonicTime *result;
  double v7;
  _QWORD v8[3];
  WTF::MonotonicTime *v9;
  int v10;

  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = *(_DWORD *)(v4 - 12) == 0;
  else
    v5 = 1;
  ++*((_DWORD *)a2 + 6);
  v9 = a2;
  v10 = 0;
  WTF::HashMap<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(v8, (uint64_t *)this + 2, (uint64_t *)&v9, &v10);
  ++*(_DWORD *)(v8[0] + 8);
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 1)
      (*(void (**)(void))(*(_QWORD *)v9 + 72))();
    else
      --*((_DWORD *)v9 + 6);
  }
  result = (WTF::MonotonicTime *)(*(uint64_t (**)(WebCore::DeviceController *))(*(_QWORD *)this + 16))(this);
  if ((_DWORD)result)
  {
    ++*((_DWORD *)a2 + 6);
    v9 = a2;
    v10 = 0;
    WTF::HashMap<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(v8, (uint64_t *)this + 3, (uint64_t *)&v9, &v10);
    ++*(_DWORD *)(v8[0] + 8);
    result = v9;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 1)
        result = (WTF::MonotonicTime *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 72))();
      else
        --*((_DWORD *)v9 + 6);
    }
    if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)this + 8) = 0;
      WTF::MonotonicTime::now(result);
      result = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)this + 40, v7 + 0.0);
    }
  }
  if (v5)
    return (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 8));
  return result;
}

uint64_t WebCore::DeviceController::dispatchDeviceEvent(uint64_t this, WebCore::Event *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  WebCore::EventTarget **v17;
  WebCore::EventTarget *v18;
  uint64_t v19;
  _BYTE *v20;
  int *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;

  v3 = *(_QWORD *)(this + 16);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (uint64_t *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *(uint64_t **)(this + 16);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = *(uint64_t **)(this + 16);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = (uint64_t *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (uint64_t *)(v3 + 16 * v4);
  if (!v3)
  {
    v8 = 0;
    goto LABEL_15;
  }
LABEL_8:
  v8 = (uint64_t *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  v9 = *(unsigned int *)(v3 - 12);
  if (!(_DWORD)v9)
  {
LABEL_15:
    v10 = 0;
    goto LABEL_16;
  }
  if (v9 >> 29)
  {
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x195F8448CLL);
  }
  this = WTF::fastMalloc((WTF *)(8 * v9));
  v10 = (WTF *)this;
LABEL_16:
  if (v8 != v6)
  {
    v11 = 0;
    v12 = 1;
    do
    {
      v13 = v12;
      v14 = *v6;
      if (*v6)
        ++*(_DWORD *)(v14 + 24);
      *((_QWORD *)v10 + v11) = v14;
      v15 = v6 + 2;
      v6 = v5;
      if (v15 != v5)
      {
        v6 = v15;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
      ++v11;
      v12 = v13 + 1;
    }
    while (v6 != v8);
    if (v11)
    {
      v16 = 8 * v13;
      v17 = (WebCore::EventTarget **)v10;
      do
      {
        v18 = *v17;
        v19 = *((_QWORD *)*v17 + 9);
        if (v19)
        {
          v20 = *(_BYTE **)(v19 + 8);
          if (v20)
          {
            if (v20[178])
              goto LABEL_49;
            v21 = (int *)(v20 - 264);
            v22 = *((_DWORD *)v20 - 66) + 2;
            *((_DWORD *)v20 - 66) = v22;
            if (!v20[179] && !v20[180])
            {
              WebCore::EventTarget::dispatchEvent(v18, a2);
              v22 = *v21;
            }
            v23 = v22 - 2;
            if (v23)
            {
              *v21 = v23;
            }
            else if ((*((_WORD *)v20 - 129) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)(v20 - 288), a2);
            }
          }
        }
        ++v17;
        v16 -= 8;
      }
      while (v16);
      v24 = 8 * v13;
      v25 = (uint64_t *)v10;
      do
      {
        this = *v25;
        *v25 = 0;
        if (this)
        {
          if (*(_DWORD *)(this + 24) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 72))(this);
          else
            --*(_DWORD *)(this + 24);
        }
        ++v25;
        v24 -= 8;
      }
      while (v24);
    }
  }
  if (v10)
    return WTF::fastFree(v10, a2);
  return this;
}

uint64_t WebCore::DiagnosticLoggingKeys::missingValidatorFieldsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::postPageLoadCPUUsageKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::pageLoadedKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::entryRightlyNotWarmedUpKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::entryWronglyNotWarmedUpKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::needsRevalidationKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::networkCacheKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::networkCacheFailureReasonKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::networkCacheUnusedReasonKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::networkCacheReuseFailureKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::networkProcessCrashedKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::neverSeenBeforeKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::nonVisibleStateKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::backForwardCacheKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::noLongerInCacheKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::otherKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::isReloadIgnoringCacheDataKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::internalErrorKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::invalidSessionIDKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::isAttachmentKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::isConditionalRequestKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::domainCausingCrashKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::domainCausingEnergyDrainKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::domainCausingJetsamKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::simulatedPageCrashKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::exceededActiveMemoryLimitKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::exceededInactiveMemoryLimitKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::exceededBackgroundCPULimitKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::cpuUsageKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::createSharedBufferFailedKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::backNavigationDeltaKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::cacheControlNoStoreKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::memoryCacheKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::retrievalRequestKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::retrievalKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::serviceWorkerKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::streamingMedia(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::successfulSpeculativeWarmupWithRevalidationKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::successfulSpeculativeWarmupWithoutRevalidationKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::synchronousMessageFailedKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::telemetryPageLoadKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::occurredKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::uncacheableStatusCodeKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::unknownEntryRequestKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::unlikelyToReuseKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::unsupportedHTTPMethodKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::unusedKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::userZoomActionKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::varyingHeaderMismatchKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::visibleNonActiveStateKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::visibleAndActiveStateKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithRevalidationKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithoutRevalidationKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::webViewKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::DiagnosticLoggingKeys::notHTTPFamilyKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

_QWORD *WebCore::DiagnosticLoggingKeys::memoryUsageToDiagnosticLoggingKey@<X0>(unint64_t this@<X0>, _QWORD *a2@<X8>)
{
  const char *v2;
  uint64_t v3;

  if (!(this >> 25))
  {
    v2 = "below32";
    goto LABEL_10;
  }
  if (!(this >> 26))
  {
    v2 = "32to64";
    v3 = 7;
    return WTF::String::String(a2, (uint64_t)v2, v3);
  }
  if (!(this >> 27))
  {
    v2 = "64to128";
LABEL_10:
    v3 = 8;
    return WTF::String::String(a2, (uint64_t)v2, v3);
  }
  if (!(this >> 28))
  {
    v2 = "128to256";
    goto LABEL_7;
  }
  if (!(this >> 29))
  {
    v2 = "256to512";
LABEL_7:
    v3 = 9;
    return WTF::String::String(a2, (uint64_t)v2, v3);
  }
  if (!(this >> 30))
  {
    v2 = "512to1024";
    v3 = 10;
    return WTF::String::String(a2, (uint64_t)v2, v3);
  }
  if (!(this >> 31))
  {
    v2 = "1024to2048";
LABEL_18:
    v3 = 11;
    return WTF::String::String(a2, (uint64_t)v2, v3);
  }
  if (!HIDWORD(this))
  {
    v2 = "2048to4096";
    goto LABEL_18;
  }
  if (!(this >> 33))
  {
    v2 = "4096to8192";
    goto LABEL_18;
  }
  if (this >> 34)
  {
    if (this >> 35)
      v3 = 10;
    else
      v3 = 13;
    if (this >> 35)
      v2 = "over32768";
    else
      v2 = "16384to32768";
  }
  else
  {
    v2 = "8192to16384";
    v3 = 12;
  }
  return WTF::String::String(a2, (uint64_t)v2, v3);
}

_QWORD *WebCore::DiagnosticLoggingKeys::foregroundCPUUsageToDiagnosticLoggingKey@<X0>(double a1@<D0>, _QWORD *a2@<X8>)
{
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;

  if (a1 < 10.0)
  {
    v6 = "below10";
    v7 = 8;
  }
  else
  {
    v3 = "20to40";
    v4 = "40to60";
    v5 = "over80";
    if (a1 < 80.0)
      v5 = "60to80";
    if (a1 >= 60.0)
      v4 = v5;
    if (a1 >= 40.0)
      v3 = v4;
    if (a1 >= 20.0)
      v6 = v3;
    else
      v6 = "10to20";
    v7 = 7;
  }
  return WTF::String::String(a2, (uint64_t)v6, v7);
}

uint64_t WebCore::DiagnosticLoggingKeys::backgroundCPUUsageToDiagnosticLoggingKey(WebCore::DiagnosticLoggingKeys *this, double a2)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::watchAdaptationName(WebCore *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::isDraggableLink(WebCore *this, const WebCore::Element *a2)
{
  __int16 v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  v3 = *((_WORD *)this + 14);
  if ((v3 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
  {
    *((_DWORD *)this + 6) += 2;
    if (WebCore::HTMLAnchorElement::isLiveLink(this))
    {
      WebCore::HTMLAnchorElement::href(this, (WTF::URL *)&v8);
      {
        WebCore::DataDetection::dataDetectorURLProtocol(void)::$_0::operator() const(void)::impl += 2;
        WebCore::DataDetection::dataDetectorURLProtocol(void)::protocol = (uint64_t)&WebCore::DataDetection::dataDetectorURLProtocol(void)::$_0::operator() const(void)::impl;
      }
      v5 = WTF::URL::protocolIs() ^ 1;
      v6 = v8;
      v8 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
    else
    {
      v5 = 0;
    }
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(this, v4);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  else if ((v3 & 0x20) != 0 && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::aTag + 24))
  {
    return *((_WORD *)this + 15) & 1;
  }
  else
  {
    return 0;
  }
  return v5;
}

void WebCore::DragController::~DragController(WebCore::DragController *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  if (*((_BYTE *)this + 160))
  {
    v3 = *((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    v4 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  v5 = *((unsigned int *)this + 31);
  if ((_DWORD)v5)
  {
    v15 = (_QWORD *)*((_QWORD *)this + 14);
    v16 = 8 * v5;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)(v17 + 24) == 2)
        {
          if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
          {
            v18 = v16;
            v19 = v15;
            WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
            v16 = v18;
            v15 = v19;
          }
        }
        else
        {
          *(_DWORD *)(v17 + 24) -= 2;
        }
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v6 = (WTF *)*((_QWORD *)this + 14);
  if (v6)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 80))(v11);
  v12 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
}

uint64_t WebCore::DragController::dragEnded(WebCore::DragController *this)
{
  WebCore::DragCaretController *v2;
  _QWORD *v3;
  Node *var0;
  VisiblePosition v6;

  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 3);
  *((_BYTE *)this + 47) = 0;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 2);
  v2 = *(WebCore::DragCaretController **)(*(_QWORD *)(*(_QWORD *)this + 8) + 56);
  *(_QWORD *)&v6.var0.var1 = 0;
  v6.var0.var0.var0 = 0;
  *(_QWORD *)&v6.var1 = 1;
  WebCore::DragCaretController::setCaretPosition(v2, &v6);
  var0 = v6.var0.var0.var0;
  v6.var0.var0.var0 = 0;
  if (var0)
  {
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)var0, v3);
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
  }
  WebCore::DragController::removeAllDroppedImagePlaceholders((unsigned int *)this, v3);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
}

unsigned int *WebCore::DragController::removeAllDroppedImagePlaceholders(unsigned int *this, _QWORD *a2)
{
  unsigned int *v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int16 v11;
  __int16 v12;
  unsigned int **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;

  v2 = this;
  if (*((_BYTE *)this + 160))
  {
    v3 = *((_QWORD *)this + 18);
    *((_QWORD *)v2 + 18) = 0;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    this = (unsigned int *)*((_QWORD *)v2 + 16);
    *((_QWORD *)v2 + 16) = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
      else
      {
        this[6] -= 2;
      }
    }
    *((_BYTE *)v2 + 160) = 0;
  }
  v4 = (WTF *)*((_QWORD *)v2 + 14);
  v5 = v2[31];
  *((_QWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 15) = 0;
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = 8 * v5;
    v8 = v4;
    do
    {
      a2 = *(_QWORD **)v8;
      if ((*(_BYTE *)(*(_QWORD *)v8 + 22) & 8) != 0)
      {
        v9 = a2[4];
        if (v9)
        {
          *(_DWORD *)(v9 + 24) += 2;
          WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v9, (WebCore::Node *)a2, &v14);
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            v11 = *(_WORD *)(v9 + 30);
            if ((v11 & 0x400) == 0)
            {
              v12 = *(_WORD *)(v9 + 28);
              if ((v12 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v9, a2);
              }
              else
              {
                if ((v12 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
                  v11 = *(_WORD *)(v9 + 30);
                }
                *(_WORD *)(v9 + 30) = v11 | 0x400;
                (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
              }
            }
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
        }
        else
        {
          v14 = 0;
          v15 = 0;
          v16 = 0;
        }
        if ((_BYTE)v16)
        {
          v10 = v15;
          v15 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
      }
      v8 = (WTF *)((char *)v8 + 8);
      v7 -= 8;
    }
    while (v7);
    v13 = (unsigned int **)v4;
    do
    {
      this = *v13;
      *v13 = 0;
      if (this)
      {
        if (this[6] == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
        }
        else
        {
          this[6] -= 2;
        }
      }
      ++v13;
      v6 -= 8;
    }
    while (v6);
  }
  if (v4)
    return (unsigned int *)WTF::fastFree(v4, a2);
  return this;
}

unsigned int *WebCore::DragController::dragExited(uint64_t canDropCurrentlyDraggedImageAsFile, WTF::StringImpl *a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl ***v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  WTF::WallTime *v17;
  char v18;
  WebCore::Node *v19;
  WTF::StringImpl *v20;
  int v21;
  _BOOL8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  void *v30;
  unsigned int *result;
  uint64_t v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WebCore::Node *v36;
  uint64_t v37;
  __int128 v38;
  WebCore::Node *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  __int16 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;

  v5 = canDropCurrentlyDraggedImageAsFile;
  v53 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(canDropCurrentlyDraggedImageAsFile + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        canDropCurrentlyDraggedImageAsFile = WebCore::EventHandler::canDropCurrentlyDraggedImageAsFile(*(WebCore::EventHandler **)(v8 + 640), a2);
        if ((canDropCurrentlyDraggedImageAsFile & 1) == 0)
        {
          v12 = (WTF::StringImpl ***)(a3 + 2);
          v13 = *((unsigned int *)a3 + 11);
          if ((_DWORD)v13)
          {
            v33 = *v12;
            v34 = 8 * v13;
            do
            {
              v35 = *v33;
              *v33 = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, v11);
                else
                  *(_DWORD *)v35 -= 2;
              }
              ++v33;
              v34 -= 8;
            }
            while (v34);
          }
          canDropCurrentlyDraggedImageAsFile = (uint64_t)*v12;
          if (*v12)
          {
            *((_QWORD *)a3 + 4) = 0;
            *((_DWORD *)a3 + 10) = 0;
            canDropCurrentlyDraggedImageAsFile = WTF::fastFree((WTF *)canDropCurrentlyDraggedImageAsFile, v11);
          }
          *v12 = 0;
          *((_QWORD *)a3 + 5) = 0;
          *((_BYTE *)a3 + 80) = 1;
        }
        do
        {
          v14 = __ldaxr(v9);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v9));
        if (!v15)
        {
          atomic_store(1u, v9);
          v36 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v36 = off_1E31FE290;
          *((_QWORD *)v36 + 1) = v9;
          v39 = v36;
          WTF::ensureOnMainThread();
          canDropCurrentlyDraggedImageAsFile = (uint64_t)v39;
          v39 = 0;
          if (canDropCurrentlyDraggedImageAsFile)
            canDropCurrentlyDraggedImageAsFile = (*(uint64_t (**)(uint64_t))(*(_QWORD *)canDropCurrentlyDraggedImageAsFile
                                                                                    + 8))(canDropCurrentlyDraggedImageAsFile);
        }
      }
    }
  }
  if (*((_QWORD *)a2 + 36))
  {
    v16 = (unsigned int *)*((_QWORD *)a2 + 80);
    ++*v16;
    v17 = (WTF::WallTime *)WebCore::PlatformKeyboardEvent::currentStateOfModifierKeys((WebCore::PlatformKeyboardEvent *)canDropCurrentlyDraggedImageAsFile);
    v18 = (char)v17;
    WTF::WallTime::now(v17);
    v39 = v19;
    v40 = 5;
    v41 = v18;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = *a3;
    v47 = 0;
    v46 = 0;
    v48 = 0x3FF0000000000000;
    v49 = 1;
    {
      v20 = (WTF::StringImpl *)WebCore::mousePointerEventType(void)::mouseType;
      if (!WebCore::mousePointerEventType(void)::mouseType)
      {
LABEL_18:
        v50 = v20;
        v51 = 0;
        v52 = 0;
        WebCore::Pasteboard::create((WebCore::Pasteboard *)a3, &v37);
        v22 = 0;
        v23 = *((_BYTE *)a3 + 24);
        if (!*((_BYTE *)a3 + 80))
        {
          *(_QWORD *)&v38 = *((_QWORD *)a3 + 7);
          BYTE8(v38) = *((_BYTE *)a3 + 64);
          v24 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v24 = off_1E327FAB0;
          *(_OWORD *)(v24 + 8) = v38;
          v25 = WebCore::s_platformStrategies;
          v26 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
          if (!v26)
          {
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
            *(_QWORD *)(v25 + 16) = v26;
          }
          v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 104))(v26, (uint64_t)a3 + 72, v24);
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v22 = v27 != 0;
        }
        WebCore::EventHandler::cancelDragAndDrop(v16, &v39, &v37, v23, v22);
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        v29 = v50;
        v50 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v28);
          else
            *(_DWORD *)v29 -= 2;
        }
        if (!*v16)
        {
          __break(0xC471u);
          JUMPOUT(0x195F853B4);
        }
        --*v16;
        goto LABEL_29;
      }
      v21 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
    }
    else
    {
      v20 = (WTF::StringImpl *)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
      v21 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
      WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
      WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    }
    *(_DWORD *)v20 = v21 + 2;
    goto LABEL_18;
  }
LABEL_29:
  v39 = 0;
  WebCore::DragController::mouseMovedIntoDocument((unsigned int *)v5, (uint64_t *)&v39);
  result = (unsigned int *)v39;
  if (v39)
  {
    if (*((_DWORD *)v39 + 6) == 2)
    {
      if ((*((_WORD *)v39 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v39, v30);
    }
    else
    {
      *((_DWORD *)v39 + 6) -= 2;
    }
  }
  v32 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = 0;
  if (v32)
  {
    if ((*(_WORD *)(v32 + 232) & 0x200) != 0)
    {
      *(_WORD *)(v32 + 232) &= ~0x200u;
      result = (unsigned int *)(*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL);
      if (result)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F85418);
        }
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 312))(result);
      }
    }
    if (*(_DWORD *)(v32 + 24) == 2)
    {
      if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v32, v30);
    }
    else
    {
      *(_DWORD *)(v32 + 24) -= 2;
    }
  }
  return result;
}

void sub_195F85440(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebCore::EventHandler::cancelDragAndDrop(unsigned int *Ref, void *a2, uint64_t *a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  unint64_t StatusReg;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t *v31;
  int v32;
  void *v33;
  uint64_t v34;
  WebCore *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::DataTransfer *v40;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *result;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned __int8 v50;
  WTF *v53;
  void *v54;
  uint64_t v55;
  uint64_t *v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  WebCore::DataTransfer *v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  WebCore::DataTransfer *v64;

  v5 = a5;
  v6 = a3;
  v8 = Ref;
  v9 = *(_QWORD *)(*((_QWORD *)Ref + 1) + 8);
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *((_QWORD *)Ref + 87);
  if (!v12)
    goto LABEL_47;
  v13 = *(_DWORD *)(v12 + 24);
  v14 = v13 + 2;
  *(_DWORD *)(v12 + 24) = v13 + 2;
  if ((*(_WORD *)(v12 + 28) & 0x10) == 0
    || (v15 = *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24), v15 != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24))
    && v15 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
  {
    v18 = 0;
    v19 = 1;
    goto LABEL_14;
  }
  v16 = v13 + 4;
  *(_DWORD *)(v12 + 24) = v16;
  v17 = *(_QWORD *)(v12 + 112);
  if (!v17)
    goto LABEL_10;
  v18 = *(_QWORD *)(v17 + 8);
  if (!v18)
    goto LABEL_11;
  if (*(_BYTE *)(v18 + 144))
  {
LABEL_10:
    v18 = 0;
LABEL_11:
    if (v14)
    {
LABEL_12:
      v19 = 0;
      *(_DWORD *)(v12 + 24) = v14;
      goto LABEL_14;
    }
    goto LABEL_54;
  }
  v48 = (unsigned int *)(v18 + 8);
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 + 1, v48));
  v16 = *(_DWORD *)(v12 + 24);
  v14 = v16 - 2;
  if (v16 != 2)
    goto LABEL_12;
LABEL_54:
  v50 = a4;
  if ((*(_WORD *)(v12 + 30) & 0x400) != 0)
  {
    v19 = 0;
    v14 = v16;
  }
  else
  {
    Ref = WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    v19 = 0;
    v14 = *(_DWORD *)(v12 + 24);
  }
  v5 = a5;
  v6 = a3;
  a4 = v50;
LABEL_14:
  v20 = v14 - 2;
  if (v20)
  {
    *(_DWORD *)(v12 + 24) = v20;
  }
  else if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
  {
    v55 = v5;
    v56 = v6;
    v57 = a4;
    Ref = WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    a4 = v57;
    v6 = v56;
    v5 = v55;
  }
  if ((v19 & 1) == 0)
  {
    if (!v18)
      goto LABEL_47;
    WebCore::EventHandler::cancelDragAndDrop(*(_QWORD *)(v18 + 640), a2, v6, a4, v5);
    goto LABEL_44;
  }
  v63 = (uint64_t)a2;
  v21 = *((_QWORD *)v8 + 87);
  if (v21)
  {
    *(_DWORD *)(v21 + 24) += 2;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v23 = *(_QWORD *)(StatusReg + 736);
    if (!v23 || (v24 = *(_QWORD *)(v23 + 96)) == 0)
    {
      v25 = v5;
      v26 = v6;
      v27 = WebCore::threadGlobalDataSlow((WebCore *)Ref);
      v6 = v26;
      LODWORD(v5) = v25;
      v24 = v27;
    }
    v28 = *(_QWORD *)(v24 + 40);
    if (!v28)
    {
      v61 = v5;
      v62 = v6;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
      v6 = v62;
      LODWORD(v5) = v61;
      v28 = *(_QWORD *)(v24 + 40);
    }
    {
      v29 = WebCore::EventHandler::dragState(void)::state;
      if ((_QWORD)WebCore::EventHandler::dragState(void)::state)
      {
        v30 = (_DWORD *)qword_1EE2F7E10;
        if (qword_1EE2F7E10)
        {
          if (BYTE8(WebCore::EventHandler::dragState(void)::state))
          {
            v31 = v6;
            v32 = v5;
            *(_DWORD *)(WebCore::EventHandler::dragState(void)::state + 24) += 2;
            WebCore::EventHandler::dispatchDragEvent(*(_QWORD **)(*((_QWORD *)v8 + 1) + 8), (uint64_t *)(v28 + 656), (WebCore::Node *)v29, v63, v30);
            if (*(_DWORD *)(v29 + 24) == 2)
            {
              LODWORD(v5) = v32;
              v6 = v31;
              if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v29, v33);
                v6 = v31;
                LODWORD(v5) = v32;
              }
            }
            else
            {
              *(_DWORD *)(v29 + 24) -= 2;
              LODWORD(v5) = v32;
              v6 = v31;
            }
          }
        }
      }
    }
    else
    {
      WebCore::EventHandler::dragState(void)::state = 0u;
      *(_OWORD *)&qword_1EE2F7E10 = 0u;
    }
    v34 = *(_QWORD *)(*(_QWORD *)(v21 + 40) + 8);
    *(_DWORD *)(v34 + 24) += 2;
    v35 = WebCore::DataTransfer::createForUpdatingDropTarget((WebCore::Document *)v34, v6, v5, (uint64_t *)&v64);
    if (*(_DWORD *)(v34 + 24) == 2)
    {
      if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
        v35 = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v34, v36);
    }
    else
    {
      *(_DWORD *)(v34 + 24) -= 2;
    }
    v37 = *(_QWORD *)(StatusReg + 736);
    if (!v37 || (v38 = *(_QWORD *)(v37 + 96)) == 0)
      v38 = WebCore::threadGlobalDataSlow(v35);
    v39 = *(_QWORD *)(v38 + 40);
    if (!v39)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v38);
      v39 = *(_QWORD *)(v38 + 40);
    }
    v40 = v64;
    WebCore::EventHandler::dispatchDragEvent(*(_QWORD **)(*((_QWORD *)v8 + 1) + 8), (uint64_t *)(v39 + 680), (WebCore::Node *)v21, v63, v64);
    *((_DWORD *)v40 + 6) = 0;
    if (*(_DWORD *)v40 == 1)
    {
      WebCore::DataTransfer::~DataTransfer(v40, v41);
      WTF::fastFree(v53, v54);
    }
    else
    {
      --*(_DWORD *)v40;
    }
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v21, v41);
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
  }
  if (v18)
  {
LABEL_44:
    v42 = (unsigned int *)(v18 + 8);
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v42);
      v59 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v59 = off_1E31FE290;
      *(_QWORD *)(v59 + 8) = v42;
      v64 = (WebCore::DataTransfer *)v59;
      WTF::ensureOnMainThread();
      v60 = v64;
      v64 = 0;
      if (v60)
        (*(void (**)(WebCore::DataTransfer *))(*(_QWORD *)v60 + 8))(v60);
    }
  }
LABEL_47:
  result = WebCore::EventHandler::clearDragState((WebCore::AutoscrollController **)v8);
  if (v9)
  {
    do
    {
      v46 = __ldaxr(v10);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v10));
    if (!v47)
    {
      atomic_store(1u, v10);
      v58 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v58 = off_1E31FE290;
      *(_QWORD *)(v58 + 8) = v10;
      v64 = (WebCore::DataTransfer *)v58;
      WTF::ensureOnMainThread();
      result = (unsigned int *)v64;
      v64 = 0;
      if (result)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WebCore::DragController::mouseMovedIntoDocument(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  WebCore::DragCaretController *v6;
  Node *var0;
  VisiblePosition v8;

  v2 = *((_QWORD *)result + 2);
  v3 = *a2;
  if (v2 != *a2)
  {
    v5 = result;
    if (v2)
    {
      v6 = *(WebCore::DragCaretController **)(*(_QWORD *)(*(_QWORD *)result + 8) + 56);
      *(_QWORD *)&v8.var0.var1 = 0;
      v8.var0.var0.var0 = 0;
      *(_QWORD *)&v8.var1 = 1;
      WebCore::DragCaretController::setCaretPosition(v6, &v8);
      var0 = v8.var0.var0.var0;
      v8.var0.var0.var0 = 0;
      if (var0)
      {
        if (*((_DWORD *)var0 + 6) == 2)
        {
          if ((*((_WORD *)var0 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)var0, a2);
        }
        else
        {
          *((_DWORD *)var0 + 6) -= 2;
        }
      }
      v3 = *a2;
    }
    *a2 = 0;
    result = (unsigned int *)*((_QWORD *)v5 + 2);
    *((_QWORD *)v5 + 2) = v3;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

BOOL WebCore::DragController::performDragOperation(WebCore::DragController *this, WebCore::Pasteboard *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  WebCore::Pasteboard *v6;
  WebCore::DragController *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  char *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WebCore::Node *v29;
  uint64_t v30;
  __int16 v31;
  BOOL v32;
  BOOL v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  WebCore::DragCaretController *v64;
  void *v65;
  Node *v66;
  _BOOL8 v67;
  void *v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  char v73;
  int *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  void *v81;
  const WebCore::IntPoint *v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  void *v86;
  const WebCore::IntPoint *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  char v95;
  WTF::StringImpl ***v96;
  uint64_t v97;
  WTF *v98;
  unsigned int v99;
  unsigned int v100;
  WebCore::PlatformKeyboardEvent *v101;
  uint64_t v102;
  char v103;
  _DWORD *v104;
  WTF::WallTime *v105;
  Node *v106;
  WTF::StringImpl *v107;
  int v108;
  _BOOL8 v109;
  unsigned __int8 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  WTF::StringImpl *v115;
  WebCore::DragCaretController *v116;
  void *v117;
  Node *v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  const WebCore::IntPoint *v124;
  _QWORD *v125;
  WebCore::Node *v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  WebCore::DragCaretController *v130;
  uint64_t (*v131)();
  WTF::StringImpl *v132;
  int v133;
  WTF::StringImpl **v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WebCore::Pasteboard *v137;
  WebCore::Document *v138;
  unsigned int *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  const WebCore::IntPoint *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  WebCore::Document *v156;
  uint64_t v157;
  unsigned int v158;
  WebCore::Document *v159;
  _DWORD *v160;
  uint64_t v161;
  unsigned int v162;
  BOOL v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  WebCore::Node *v168;
  uint64_t *v169;
  unsigned int *v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t *v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int v176;
  WebCore::Document *v177;
  int shouldApplyStyle;
  WebCore::Document *v179;
  unsigned int *v180;
  uint64_t v181;
  Node *v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int v185;
  void *v186;
  uint64_t v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  _DWORD **v193;
  _DWORD *v194;
  WTF *v195;
  uint64_t v197;
  uint64_t v198;
  WTF *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  Node *v203;
  uint64_t v204;
  Node *var0;
  int v206;
  uint64_t v207;
  uint64_t v208;
  WebCore::Editor *v209;
  void *v210;
  WebCore::Editor *v211;
  uint64_t v212;
  void *v213;
  WebCore::Editor *v214;
  void *v215;
  WebCore::Editor *v216;
  uint64_t v217;
  void *v218;
  WebCore::Editor *v219;
  void *v220;
  WebCore::Editor *v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  unsigned int v225;
  WebCore::Document *v226;
  WebCore::DragData *v227;
  WTF::StringImpl *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  WTF::StringImpl *v235;
  uint64_t v236;
  uint64_t v237;
  WTF::StringImpl *v238;
  uint64_t v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  int v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  uint64_t v248;
  uint64_t v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  uint64_t v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  char v264;
  const WebCore::IntPoint *v265;
  unsigned int *v266;
  unint64_t v267;
  int v268;
  int v269;
  BOOL v270;
  char v271;
  unsigned int *v272;
  uint64_t v273;
  char v274;
  WTF::StringImpl *v275;
  unint64_t v276;
  _DWORD *v277;
  uint64_t v278;
  WTF::StringImpl *v279;
  char v280;
  WebCore::Pasteboard *v281;
  unint64_t v282;
  uint64_t v283;
  WTF::StringImpl *v284;
  _QWORD *v285;
  void *v286;
  WTF::StringImpl *v287;
  uint64_t v288;
  WebCore::Pasteboard *v289;
  WebCore::Pasteboard *v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t *v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  WebCore::Editor *v297;
  void *v298;
  WebCore::Editor *v299;
  uint64_t v300;
  void *v301;
  WTF::StringImpl *v302;
  WebCore::Node *v303;
  int shouldInsertText;
  WebCore::Node *v305;
  WTF::StringImpl *v306;
  const WebCore::IntPoint *v307;
  uint64_t v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  _DWORD *v311;
  uint64_t v312;
  WTF::StringImpl *v313;
  WTF::StringImpl *v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int *v317;
  unsigned int v318;
  int *v319;
  int v320;
  uint64_t v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  WebCore::Node *v325;
  WTF::StringImpl *v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int v329;
  WebCore::DragCaretController *v330;
  Node *v331;
  WebCore::DragCaretController *v332;
  void *v333;
  const WebCore::IntPoint *v334;
  Node *v335;
  WTF::StringImpl *v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  WebCore::LocalFrame *v342;
  int v343;
  char v344;
  WTF::StringImpl *v345;
  _DWORD *v346;
  WTF::StringImpl *v347;
  void *v348;
  uint64_t v349;
  Node *v350;
  uint64_t v351;
  Node *v352;
  WebCore::Node *v353;
  WTF::StringImpl *v354;
  WTF::StringImpl *v355;
  WTF::StringImpl *v356;
  WTF::StringImpl *v357;
  uint64_t v358;
  unsigned int v359;
  char v360;
  WebCore::Node *v361;
  uint64_t v362;
  char v363;
  WebCore::Node *v364;
  uint64_t v365;
  uint64_t v366;
  char canSmartReplace;
  WebCore::Pasteboard *v368;
  WebCore::DragData *v369;
  WebCore::DragData *v370;
  char v371;
  char shouldOpenExternalURLsPolicyToPropagate;
  uint64_t *v373;
  WTF::StringImpl *v374[2];
  WebCore::Node *v375[2];
  __int128 v376;
  _OWORD v377[8];
  __int128 v378;
  int64x2_t v379;
  int64x2_t v380;
  __int128 v381;
  _OWORD v382[2];
  __int128 v383;
  __int128 v384;
  uint64_t v385;
  WTF::StringImpl *v386;
  WTF::StringImpl *v387;
  WebCore::Node *v388;
  int v389;
  char v390;
  char v391;
  char v392;
  WebCore::Node *v393[16];
  unint64_t v394;
  BOOL v395;
  unint64_t v396;
  WTF::StringImpl *v397;
  WTF::StringImpl *v398;
  char v399;
  WTF::StringImpl *v400;
  WTF::StringImpl *v401;
  WTF::StringImpl *v402[2];
  VisiblePosition v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  _BYTE v408[24];
  uint64_t v409;
  uint64_t v410;
  int v411;
  WTF::StringImpl *v412;
  uint64_t v413;
  __int16 v414;
  char v415;
  char v416;
  uint64_t v417;

  v6 = a2;
  v7 = this;
  v417 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 31) || !*((_BYTE *)this + 160))
    goto LABEL_148;
  v8 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)this + 14) + 40) + 8);
  v9 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v9 + 2;
  v10 = *(_QWORD *)(v8 + 528);
  if (v10)
  {
    v11 = *(unsigned int ***)(v10 + 8);
    if (v11)
    {
      v12 = v11 + 1;
      do
        v13 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v13 + 1, (unsigned int *)v12));
      if (!*((_BYTE *)this + 160))
        goto LABEL_781;
      *(_QWORD *)&v403.var0.var1 = 0;
      v403.var0.var0.var0 = (Node *)off_1E327FAD8;
      if (!v11[2])
      {
        v69 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v69 = 1;
        *(_QWORD *)(v69 + 8) = v11;
        v70 = v11[2];
        v11[2] = (unsigned int *)v69;
        if (v70)
        {
          do
          {
            v71 = __ldaxr(v70);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, v70));
          if (!v72)
          {
            atomic_store(1u, v70);
            WTF::fastFree((WTF *)v70, v68);
          }
        }
      }
      v14 = v11[2];
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      *(_QWORD *)&v403.var1 = v14;
      v403.var0.var0.var0 = (Node *)&off_1E3283CC0;
      v16 = *((_QWORD *)v7 + 16);
      *(_DWORD *)(v16 + 24) += 2;
      v404 = v16;
      LODWORD(v405) = *((_DWORD *)v7 + 34);
      v17 = *((_QWORD *)v7 + 18);
      *(_DWORD *)(v17 + 24) += 2;
      v406 = v17;
      v407 = *((_DWORD *)v7 + 38);
      v408[4] = 1;
      *(_QWORD *)&v408[12] = 0;
      v408[20] = 0;
      WebCore::Pasteboard::create(v6, &v386);
      (*(void (**)(WTF::StringImpl *, VisiblePosition *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v386 + 112))(v386, &v403, 0, 0, 0);
      v19 = *(_QWORD *)&v408[12];
      if (*(_QWORD *)&v408[12])
      {
        *(_DWORD *)(*(_QWORD *)&v408[12] + 24) += 2;
        v374[0] = 0;
        v374[1] = 0;
        v20 = *(_QWORD *)(v19 + 80);
        if (v20)
        {
          while (1)
          {
            v21 = v20;
            v22 = *(_WORD *)(v20 + 28);
            if ((v22 & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v21 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
            {
              break;
            }
            if ((v22 & 4) != 0)
            {
              v20 = *(_QWORD *)(v21 + 80);
              if (v20)
                continue;
            }
            if (v21 == v19)
              goto LABEL_56;
            while (1)
            {
              v20 = *(_QWORD *)(v21 + 56);
              if (v20)
                break;
              v21 = *(_QWORD *)(v21 + 32);
              if (v21)
                v23 = v21 == v19;
              else
                v23 = 1;
              if (v23)
                goto LABEL_56;
            }
          }
          v24 = 0;
          for (LODWORD(v25) = 0; ; LODWORD(v25) = HIDWORD(v374[1]))
          {
            *(_DWORD *)(v21 + 24) += 2;
            v393[0] = (WebCore::Node *)v21;
            if ((_DWORD)v25 == v24)
            {
              v26 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v374, v25 + 1, (unint64_t)v393);
              v25 = HIDWORD(v374[1]);
              v27 = v374[0];
              v28 = *(_QWORD *)v26;
              *(_QWORD *)v26 = 0;
              *((_QWORD *)v27 + v25) = v28;
            }
            else
            {
              v393[0] = 0;
              *((_QWORD *)v374[0] + v25) = v21;
            }
            HIDWORD(v374[1]) = v25 + 1;
            v29 = v393[0];
            v393[0] = 0;
            if (v29)
            {
              if (*((_DWORD *)v29 + 6) == 2)
              {
                if ((*((_WORD *)v29 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v29, v18);
              }
              else
              {
                *((_DWORD *)v29 + 6) -= 2;
              }
            }
            v30 = *(_QWORD *)(v21 + 80);
            if (!v30)
              break;
LABEL_33:
            while (1)
            {
              v21 = v30;
              v31 = *(_WORD *)(v30 + 28);
              if ((v31 & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(v21 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
              {
                break;
              }
              if ((v31 & 4) != 0)
              {
                v30 = *(_QWORD *)(v21 + 80);
                if (v30)
                  continue;
              }
              if (v21 == v19)
                goto LABEL_56;
              while (1)
              {
                v30 = *(_QWORD *)(v21 + 56);
                if (v30)
                  break;
                v21 = *(_QWORD *)(v21 + 32);
                if (v21)
                  v32 = v21 == v19;
                else
                  v32 = 1;
                if (v32)
                  goto LABEL_56;
              }
            }
            v24 = (int)v374[1];
          }
          if (v21 != v19)
          {
            do
            {
              v30 = *(_QWORD *)(v21 + 56);
              if (v30)
                goto LABEL_33;
              v21 = *(_QWORD *)(v21 + 32);
              if (v21)
                v33 = v21 == v19;
              else
                v33 = 1;
            }
            while (!v33);
          }
        }
LABEL_56:
        v34 = HIDWORD(v374[1]);
        v35 = *((_DWORD *)v7 + 31);
        LODWORD(v11) = HIDWORD(v374[1]) == v35;
        if (HIDWORD(v374[1]) == v35)
        {
          if (HIDWORD(v374[1]))
          {
            v370 = v6;
            v36 = 0;
            v37 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            while (1)
            {
              if (v36 >= *((unsigned int *)v7 + 31))
              {
                __break(0xC471u);
                JUMPOUT(0x195F889C4);
              }
              v38 = v374[0];
              v39 = *(_QWORD *)(*((_QWORD *)v374[0] + v36) + 104);
              if (!v39)
                break;
              v40 = *(unsigned int *)(v39 + 4);
              if ((v40 & 1) != 0)
              {
                v41 = *(_QWORD *)(v39 + 40);
                v42 = *(unsigned int *)(v39 + 52);
                if (!v42)
                  break;
              }
              else
              {
                v41 = v39 + 32;
                v42 = v40 >> 5;
                if (!(v40 >> 5))
                  break;
              }
              v43 = (WTF::StringImpl **)(v41 + 8);
              while (1)
              {
                v44 = (uint64_t)*(v43 - 1);
                if (v44 == WebCore::HTMLNames::srcAttr
                  || *(_QWORD *)(v44 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
                  && *(_QWORD *)(v44 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
                {
                  break;
                }
                v43 += 2;
                if (!--v42)
                  goto LABEL_72;
              }
LABEL_73:
              v45 = *((_QWORD *)v7 + 14);
              v46 = *(WTF::StringImpl **)(v45 + 8 * v36);
              v47 = *((_QWORD *)v46 + 13);
              if (!v47)
                goto LABEL_85;
              v48 = *(unsigned int *)(v47 + 4);
              if ((v48 & 1) != 0)
              {
                v49 = *(uint64_t **)(v47 + 40);
                v50 = *(unsigned int *)(v47 + 52);
                if (!v50)
                {
LABEL_85:
                  v51 = 0xFFFFFFFFLL;
                  goto LABEL_86;
                }
              }
              else
              {
                v49 = (uint64_t *)(v47 + 32);
                v50 = v48 >> 5;
                if (!(v48 >> 5))
                  goto LABEL_85;
              }
              v51 = 0;
              while (1)
              {
                v52 = *v49;
                if (*v49 == WebCore::HTMLNames::srcAttr
                  || *(_QWORD *)(v52 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
                  && *(_QWORD *)(v52 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
                {
                  break;
                }
                ++v51;
                v49 += 2;
                if (v50 == v51)
                  goto LABEL_85;
              }
LABEL_86:
              WebCore::Element::setAttributeInternal(v46, v51, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, v43, 0);
              v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)v38 + v36) + 112) + 24))(*((_QWORD *)v38 + v36) + 112);
              if ((*(_QWORD *)(v53 + 72) & 0xFFFFFFFFFFFFLL) != 0)
              {
                v54 = *(_QWORD *)((*(_QWORD *)(v53 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                if (v54)
                {
                  v55 = *(_DWORD *)(v54 + 24);
                  *(_DWORD *)(v54 + 24) = v55 + 2;
                  v56 = *(_QWORD *)(v54 + 80);
                  if (v56)
                  {
                    while (1)
                    {
                      v57 = *(_WORD *)(v56 + 28);
                      if ((v57 & 0x10) != 0
                        && (v57 & 0x110) != 0x110
                        && *(_QWORD *)(*(_QWORD *)(v56 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag
                                                                                  + 24))
                      {
                        break;
                      }
                      v56 = *(_QWORD *)(v56 + 56);
                      if (!v56)
                        goto LABEL_95;
                    }
                    *(_DWORD *)(v56 + 24) += 2;
                    v55 = *(_DWORD *)(v54 + 24) - 2;
                    if (*(_DWORD *)(v54 + 24) == 2)
                    {
LABEL_101:
                      if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v54, v18);
                      goto LABEL_97;
                    }
                  }
                  else
                  {
LABEL_95:
                    if (!v55)
                      goto LABEL_101;
                  }
                  *(_DWORD *)(v54 + 24) = v55;
LABEL_97:
                  if (v56)
                  {
                    v58 = *(_QWORD *)(v45 + 8 * v36);
                    v393[0] = (WebCore::Node *)v56;
                    WebCore::AttachmentAssociatedElement::setAttachmentElement(v58 + 112, v393);
                    v393[0] = 0;
                    if (*(_DWORD *)(v56 + 24) == 2)
                    {
                      if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v56, v18);
                    }
                    else
                    {
                      *(_DWORD *)(v56 + 24) -= 2;
                    }
                  }
                }
              }
              ++v36;
              v34 = HIDWORD(v374[1]);
              if (v36 >= HIDWORD(v374[1]))
              {
                v6 = v370;
                goto LABEL_105;
              }
            }
LABEL_72:
            v43 = v37;
            goto LABEL_73;
          }
          v59 = v374[0];
        }
        else
        {
LABEL_105:
          v59 = v374[0];
          if (v34)
          {
            v206 = (int)v11;
            v207 = 8 * v34;
            do
            {
              v208 = *(_QWORD *)v59;
              *(_QWORD *)v59 = 0;
              if (v208)
              {
                if (*(_DWORD *)(v208 + 24) == 2)
                {
                  if ((*(_WORD *)(v208 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v208, v18);
                }
                else
                {
                  *(_DWORD *)(v208 + 24) -= 2;
                }
              }
              v59 = (WTF::StringImpl *)((char *)v59 + 8);
              v207 -= 8;
            }
            while (v207);
            v59 = v374[0];
            LODWORD(v11) = v206;
          }
        }
        if (v59)
        {
          v374[0] = 0;
          LODWORD(v374[1]) = 0;
          WTF::fastFree(v59, v18);
        }
        if (*(_DWORD *)(v19 + 24) == 2)
        {
          if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v19, v18);
        }
        else
        {
          *(_DWORD *)(v19 + 24) -= 2;
        }
      }
      else
      {
        LODWORD(v11) = 0;
      }
      if (v386)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v386 + 8))(v386);
      WebCore::WebContentReader::~WebContentReader((WebCore::WebContentReader *)&v403, v18);
      do
      {
        v60 = __ldaxr((unsigned int *)v12);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, (unsigned int *)v12));
      if (!v61)
      {
        atomic_store(1u, (unsigned int *)v12);
        v204 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v204 = off_1E31FE290;
        *(_QWORD *)(v204 + 8) = v12;
        v403.var0.var0.var0 = (Node *)v204;
        WTF::ensureOnMainThread();
        var0 = v403.var0.var0.var0;
        v403.var0.var0.var0 = 0;
        if (var0)
          (*(void (**)(Node *))(*(_QWORD *)var0 + 8))(var0);
      }
      if (!v8)
        goto LABEL_402;
      v9 = *(_DWORD *)(v8 + 24) - 2;
    }
    if (v9)
      goto LABEL_118;
LABEL_146:
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
      if ((v11 & 1) != 0)
        goto LABEL_119;
LABEL_148:
      WebCore::DragController::removeAllDroppedImagePlaceholders((unsigned int *)v7, a2);
      v73 = *((_BYTE *)v7 + 104);
      *((_BYTE *)v7 + 104) = 1;
      v74 = *(int **)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 72);
      v75 = *v74;
      v76 = *v74 + 1;
      *v74 = v76;
      v77 = *((_QWORD *)v74 + 2);
      if ((!v77 || (v78 = *(_QWORD *)(v77 + 8)) == 0 || *(_BYTE *)(v78 + 144))
        && (v78 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v74 + 1) + 8) + 160), *(_BYTE *)(v78 + 144)))
      {
        if (v76)
        {
          v67 = 0;
          *v74 = v75;
LABEL_749:
          *((_BYTE *)v7 + 104) = v73;
          return v67;
        }
      }
      else
      {
        v8 = v78 + 8;
        do
          v79 = __ldaxr((unsigned int *)v8);
        while (__stlxr(v79 + 1, (unsigned int *)v8));
        if (*v74)
        {
          --*v74;
          v80 = *(_QWORD *)(v78 + 296);
          LOBYTE(v403.var0.var0.var0) = 0;
          LOBYTE(v412) = 0;
          WebCore::TemporarySelectionChange::TemporarySelectionChange((uint64_t)v393, v80, (uint64_t)&v403, 4);
          if ((_BYTE)v412)
            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v403);
          v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 160);
          if (v2)
            v83 = *(_BYTE *)(v2 + 144) == 0;
          else
            v83 = 0;
          if (!v83)
          {
            v67 = 0;
LABEL_746:
            WebCore::TemporarySelectionChange::~TemporarySelectionChange((WebCore::TemporarySelectionChange *)v393, v81);
            do
            {
              v339 = __ldaxr((unsigned int *)v8);
              v340 = v339 - 1;
            }
            while (__stlxr(v340, (unsigned int *)v8));
            if (!v340)
            {
              atomic_store(1u, (unsigned int *)v8);
              v349 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v349 = off_1E31FE290;
              *(_QWORD *)(v349 + 8) = v8;
              v403.var0.var0.var0 = (Node *)v349;
              WTF::ensureOnMainThread();
              v350 = v403.var0.var0.var0;
              v403.var0.var0.var0 = 0;
              if (v350)
                (*(void (**)(Node *))(*(_QWORD *)v350 + 8))(v350);
            }
            goto LABEL_749;
          }
          v4 = (unsigned int *)(v2 + 8);
          do
            v84 = __ldaxr(v4);
          while (__stlxr(v84 + 1, v4));
          v85 = WebCore::LocalFrame::documentAtPoint((WebCore::LocalFrame *)v2, v6, v82);
          v88 = (uint64_t *)((char *)v7 + 16);
          if (v85)
            *(_DWORD *)(v85 + 24) += 2;
          v89 = *v88;
          *v88 = v85;
          if (v89)
          {
            if (*(_DWORD *)(v89 + 24) == 2)
            {
              if ((*(_WORD *)(v89 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v89, v86);
                v85 = *v88;
              }
            }
            else
            {
              *(_DWORD *)(v89 + 24) -= 2;
            }
          }
          v373 = (uint64_t *)((char *)v7 + 16);
          if (v85)
          {
            v90 = *(_QWORD *)(v85 + 528);
            if (v90)
            {
              v91 = *(_QWORD *)(v90 + 8);
              if (v91)
              {
                v92 = (unsigned int *)(v91 + 8);
                do
                  v93 = __ldaxr(v92);
                while (__stlxr(v93 + 1, v92));
                if ((WebCore::EventHandler::canDropCurrentlyDraggedImageAsFile(*(WebCore::EventHandler **)(v91 + 640), (WTF::StringImpl *)v86) & 1) == 0)
                {
                  v94 = v2;
                  v95 = v73;
                  v96 = (WTF::StringImpl ***)((char *)v6 + 32);
                  v97 = *((unsigned int *)v6 + 11);
                  if ((_DWORD)v97)
                  {
                    v134 = *v96;
                    v135 = 8 * v97;
                    do
                    {
                      v136 = *v134;
                      *v134 = 0;
                      if (v136)
                      {
                        if (*(_DWORD *)v136 == 2)
                          WTF::StringImpl::destroy(v136, (WTF::StringImpl *)v86);
                        else
                          *(_DWORD *)v136 -= 2;
                      }
                      ++v134;
                      v135 -= 8;
                    }
                    while (v135);
                  }
                  v98 = (WTF *)*v96;
                  if (*v96)
                  {
                    *((_QWORD *)v6 + 4) = 0;
                    *((_DWORD *)v6 + 10) = 0;
                    WTF::fastFree(v98, v86);
                  }
                  *v96 = 0;
                  *((_QWORD *)v6 + 5) = 0;
                  *((_BYTE *)v6 + 80) = 1;
                  v73 = v95;
                  v2 = v94;
                  v88 = (uint64_t *)((char *)v7 + 16);
                }
                do
                {
                  v99 = __ldaxr(v92);
                  v100 = v99 - 1;
                }
                while (__stlxr(v100, v92));
                if (!v100)
                {
                  atomic_store(1u, v92);
                  v202 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v202 = off_1E31FE290;
                  *(_QWORD *)(v202 + 8) = v92;
                  v403.var0.var0.var0 = (Node *)v202;
                  WTF::ensureOnMainThread();
                  v203 = v403.var0.var0.var0;
                  v403.var0.var0.var0 = 0;
                  if (v203)
                    (*(void (**)(Node *))(*(_QWORD *)v203 + 8))(v203);
                }
              }
            }
          }
          v3 = *v88;
          if (v3)
          {
            *(_DWORD *)(v3 + 24) += 2;
            shouldOpenExternalURLsPolicyToPropagate = WebCore::Document::shouldOpenExternalURLsPolicyToPropagate((WebCore::Document *)v3, (WTF::StringImpl *)v86);
            if (*(_DWORD *)(v3 + 24) == 2)
            {
              if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v3, v86);
            }
            else
            {
              *(_DWORD *)(v3 + 24) -= 2;
            }
          }
          else
          {
            shouldOpenExternalURLsPolicyToPropagate = 0;
          }
          if ((*((_BYTE *)v7 + 45) & 1) == 0)
            goto LABEL_206;
          if ((*((_BYTE *)v7 + 44) & 0xFB) == 0)
            goto LABEL_206;
          v101 = (WebCore::PlatformKeyboardEvent *)(*(uint64_t (**)(_QWORD, uint64_t, WebCore::Pasteboard *))(**((_QWORD **)v7 + 1) + 8))(*((_QWORD *)v7 + 1), 1, v6);
          if (!*(_QWORD *)(v2 + 288))
            goto LABEL_206;
          v102 = v2;
          v103 = v73;
          v365 = v102;
          v104 = *(_DWORD **)(v102 + 640);
          ++*v104;
          v105 = (WTF::WallTime *)WebCore::PlatformKeyboardEvent::currentStateOfModifierKeys(v101);
          LODWORD(v3) = (_DWORD)v105;
          WTF::WallTime::now(v105);
          v403.var0.var0.var0 = v106;
          LOBYTE(v403.var0.var1) = 5;
          BYTE1(v403.var0.var1) = v3;
          v403.var1 = 0;
          LOBYTE(v405) = 0;
          LOWORD(v407) = 0;
          *(_OWORD *)v408 = *(_OWORD *)v6;
          v409 = 0;
          *(_QWORD *)&v408[16] = 0;
          v410 = 0x3FF0000000000000;
          v411 = 1;
          {
            v107 = (WTF::StringImpl *)WebCore::mousePointerEventType(void)::mouseType;
            if (!WebCore::mousePointerEventType(void)::mouseType)
              goto LABEL_191;
            v108 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
          }
          else
          {
            v107 = (WTF::StringImpl *)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
            v108 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
            WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
            WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
          }
          *(_DWORD *)v107 = v108 + 2;
LABEL_191:
          v412 = v107;
          v413 = 0;
          v414 = 0;
          WebCore::Pasteboard::create(v6, &v386);
          v109 = 0;
          v110 = *((_BYTE *)v6 + 24);
          if (!*((_BYTE *)v6 + 80))
          {
            v374[0] = *((WTF::StringImpl **)v6 + 7);
            LOBYTE(v374[1]) = *((_BYTE *)v6 + 64);
            v111 = WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v111 = off_1E327FAB0;
            *(_OWORD *)(v111 + 8) = *(_OWORD *)v374;
            v112 = WebCore::s_platformStrategies;
            v113 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
            if (!v113)
            {
              v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
              *(_QWORD *)(v112 + 16) = v113;
            }
            LODWORD(v3) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v113 + 104))(v113, (uint64_t)v6 + 72, v111);
            (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
            v109 = (_DWORD)v3 != 0;
          }
          v114 = WebCore::EventHandler::performDragAndDrop((uint64_t)v104, &v403, (uint64_t *)&v386, v110, v109);
          if (v386)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v386 + 8))(v386);
          v115 = v412;
          v412 = 0;
          if (v115)
          {
            if (*(_DWORD *)v115 == 2)
              WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v86);
            else
              *(_DWORD *)v115 -= 2;
          }
          if (!*v104)
          {
            __break(0xC471u);
            JUMPOUT(0x195F8710CLL);
          }
          --*v104;
          v73 = v103;
          v2 = v365;
          if (v114)
          {
            v116 = *(WebCore::DragCaretController **)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 56);
            *(_QWORD *)&v403.var0.var1 = 0;
            v403.var0.var0.var0 = 0;
            *(_QWORD *)&v403.var1 = 1;
            WebCore::DragCaretController::setCaretPosition(v116, &v403);
            v118 = v403.var0.var0.var0;
            v403.var0.var0.var0 = 0;
            if (v118)
            {
              if (*((_DWORD *)v118 + 6) == 2)
              {
                if ((*((_WORD *)v118 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v118, v117);
              }
              else
              {
                *((_DWORD *)v118 + 6) -= 2;
              }
            }
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v373);
LABEL_737:
            v67 = 1;
            goto LABEL_744;
          }
LABEL_206:
          if ((*((_BYTE *)v7 + 45) & 2) == 0)
            goto LABEL_738;
          v12 = (unsigned int **)*((_QWORD *)v7 + 4);
          if (v12)
          {
            v119 = *((_DWORD *)v12 + 6) + 2;
            *((_DWORD *)v12 + 6) = v119;
            *((_QWORD *)v7 + 4) = 0;
            if (((_WORD)v12[29] & 0x200) != 0)
            {
              *((_WORD *)v12 + 116) &= ~0x200u;
              v120 = (unint64_t)v12[8] & 0xFFFFFFFFFFFFLL;
              v11 = (unsigned int **)((char *)v7 + 16);
              if (v120)
              {
                if ((*(_BYTE *)(((unint64_t)v12[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195F8712CLL);
                }
                (*(void (**)(uint64_t))(*(_QWORD *)v120 + 312))(v120);
                v119 = *((_DWORD *)v12 + 6);
              }
            }
            else
            {
              v11 = (unsigned int **)((char *)v7 + 16);
            }
            v121 = v119 - 2;
            if (v121)
            {
              *((_DWORD *)v12 + 6) = v121;
            }
            else if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v12, v86);
            }
          }
          else
          {
            *((_QWORD *)v7 + 4) = 0;
            v11 = (unsigned int **)((char *)v7 + 16);
          }
          if (!*v11)
          {
            v133 = 0;
            goto LABEL_730;
          }
          v122 = *((_QWORD *)*v11 + 66);
          v371 = v73;
          if (v122 && (v123 = *(_QWORD *)(v122 + 8)) != 0 && (v3 = *(_QWORD *)(v123 + 288)) != 0)
          {
            ++*(_DWORD *)(v3 + 8);
            v396 = WebCore::ScrollView::windowToContents((WebCore::ScrollView *)v3, v6, v87);
            if (*(_DWORD *)(v3 + 8) == 1)
              (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
            else
              --*(_DWORD *)(v3 + 8);
          }
          else
          {
            v396 = WebCore::ScrollView::windowToContents(0, v6, v87);
          }
          v125 = *v11;
          if (*v11)
            *((_DWORD *)v125 + 6) += 2;
          v126 = WebCore::elementUnderMouse((WebCore *)v125, (WebCore::Document *)&v396, v124);
          if (v126)
            *((_DWORD *)v126 + 6) += 2;
          if (*((_DWORD *)v125 + 6) == 2)
          {
            if ((*((_WORD *)v125 + 15) & 0x400) == 0)
            {
              v11 = (unsigned int **)v126;
              WebCore::Node::removedLastRef((WebCore::Node *)v125, v86);
              v126 = (WebCore::Node *)v11;
            }
          }
          else
          {
            *((_DWORD *)v125 + 6) -= 2;
          }
          if (!v126)
          {
            v133 = 0;
            goto LABEL_729;
          }
          v127 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v126 + 5) + 8) + 528);
          v364 = v126;
          if (v127)
          {
            v5 = *(unsigned int **)(v127 + 8);
            if (v5)
            {
              v128 = v5 + 2;
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 + 1, v128));
              v363 = 0;
              goto LABEL_233;
            }
          }
          else
          {
            v5 = 0;
          }
          v363 = 1;
LABEL_233:
          v130 = *(WebCore::DragCaretController **)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 56);
          if (*((_QWORD *)v130 + 3))
            v131 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          else
            v131 = 0;
          if (!v131)
            goto LABEL_266;
          if (WebCore::DragCaretController::isContentRichlyEditable(v130, (const WebCore::Position *)v86))
          {
            v132 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
              *(_DWORD *)v132 += 2;
            v374[0] = v132;
          }
          else
          {
            WebCore::DragData::asPlainText((WTF::StringImpl **)v6, (uint64_t)v374);
          }
          v137 = v6;
          v138 = (WebCore::Document *)*((_QWORD *)v5 + 37);
          v139 = (unsigned int *)*((_QWORD *)v138 + 382);
          if (!v139)
          {
            v209 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v209, v138);
            v211 = (WebCore::Editor *)*((_QWORD *)v138 + 382);
            *((_QWORD *)v138 + 382) = v209;
            if (v211)
            {
              WebCore::Editor::~Editor(v211, v210);
              if (*(_DWORD *)v212)
              {
                *(_QWORD *)(v212 + 496) = 0;
                *(_OWORD *)(v212 + 464) = 0u;
                *(_OWORD *)(v212 + 480) = 0u;
                *(_OWORD *)(v212 + 432) = 0u;
                *(_OWORD *)(v212 + 448) = 0u;
                *(_OWORD *)(v212 + 400) = 0u;
                *(_OWORD *)(v212 + 416) = 0u;
                *(_OWORD *)(v212 + 368) = 0u;
                *(_OWORD *)(v212 + 384) = 0u;
                *(_OWORD *)(v212 + 336) = 0u;
                *(_OWORD *)(v212 + 352) = 0u;
                *(_OWORD *)(v212 + 304) = 0u;
                *(_OWORD *)(v212 + 320) = 0u;
                *(_OWORD *)(v212 + 272) = 0u;
                *(_OWORD *)(v212 + 288) = 0u;
                *(_OWORD *)(v212 + 240) = 0u;
                *(_OWORD *)(v212 + 256) = 0u;
                *(_OWORD *)(v212 + 208) = 0u;
                *(_OWORD *)(v212 + 224) = 0u;
                *(_OWORD *)(v212 + 176) = 0u;
                *(_OWORD *)(v212 + 192) = 0u;
                *(_OWORD *)(v212 + 144) = 0u;
                *(_OWORD *)(v212 + 160) = 0u;
                *(_OWORD *)(v212 + 112) = 0u;
                *(_OWORD *)(v212 + 128) = 0u;
                *(_OWORD *)(v212 + 80) = 0u;
                *(_OWORD *)(v212 + 96) = 0u;
                *(_OWORD *)(v212 + 48) = 0u;
                *(_OWORD *)(v212 + 64) = 0u;
                *(_OWORD *)(v212 + 16) = 0u;
                *(_OWORD *)(v212 + 32) = 0u;
                *(_OWORD *)v212 = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v212, v213);
              }
            }
            v139 = (unsigned int *)*((_QWORD *)v138 + 382);
          }
          WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v403, (const WebCore::VisiblePosition *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 56) + 24), 0);
          WebCore::Editor::findEventTargetFrom(v139, (const WebCore::VisibleSelection *)&v403, (unsigned int **)&v386);
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v403);
          v140 = (WTF::StringImpl *)*((_QWORD *)v5 + 14);
          *(_DWORD *)v140 += 2;
          v397 = v140;
          WebCore::TextEvent::createForDrop((uint64_t *)&v397, (_DWORD **)v374, (WebCore **)&v403);
          v142 = v397;
          v397 = 0;
          if (v142)
          {
            if (*(_DWORD *)v142 == 1)
            {
              v173 = (uint64_t *)*((_QWORD *)v142 + 2);
              *((_QWORD *)v142 + 2) = 0;
              if (v173)
              {
                if (*v173)
                  WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v173, v141);
                WTF::fastFree((WTF *)v173, v141);
              }
              v174 = (unsigned int *)*((_QWORD *)v142 + 1);
              *((_QWORD *)v142 + 1) = 0;
              if (v174)
              {
                do
                {
                  v175 = __ldaxr(v174);
                  v176 = v175 - 1;
                }
                while (__stlxr(v176, v174));
                if (!v176)
                {
                  atomic_store(1u, v174);
                  WTF::fastFree((WTF *)v174, v141);
                }
              }
              WTF::fastFree(v142, v141);
            }
            else
            {
              --*(_DWORD *)v142;
            }
          }
          if (*(_DWORD *)v140 == 1)
          {
            v169 = (uint64_t *)*((_QWORD *)v140 + 2);
            *((_QWORD *)v140 + 2) = 0;
            if (v169)
            {
              if (*v169)
                WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v169, v141);
              WTF::fastFree((WTF *)v169, v141);
            }
            v170 = (unsigned int *)*((_QWORD *)v140 + 1);
            *((_QWORD *)v140 + 1) = 0;
            v6 = v137;
            if (v170)
            {
              do
              {
                v171 = __ldaxr(v170);
                v172 = v171 - 1;
              }
              while (__stlxr(v172, v170));
              if (!v172)
              {
                atomic_store(1u, v170);
                WTF::fastFree((WTF *)v170, v141);
              }
            }
            WTF::fastFree(v140, v141);
          }
          else
          {
            --*(_DWORD *)v140;
            v6 = v137;
          }
          v3 = (unint64_t)v403.var0.var0.var0;
          (*(void (**)(WTF::StringImpl *, Node *))(*(_QWORD *)v386 + 48))(v386, v403.var0.var0.var0);
          LODWORD(v11) = *(_DWORD *)(v3 + 20);
          if (*(_DWORD *)(v3 + 16) == 1)
            (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
          else
            --*(_DWORD *)(v3 + 16);
          v143 = v386;
          v386 = 0;
          if (v143)
          {
            if (*((_DWORD *)v143 + 6) == 2)
            {
              if ((*((_WORD *)v143 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v143, v86);
            }
            else
            {
              *((_DWORD *)v143 + 6) -= 2;
            }
          }
          v144 = v374[0];
          v374[0] = 0;
          if (v144)
          {
            if (*(_DWORD *)v144 == 2)
            {
              WTF::StringImpl::destroy(v144, (WTF::StringImpl *)v86);
              if ((v11 & 0x40) == 0)
                goto LABEL_266;
              goto LABEL_347;
            }
            *(_DWORD *)v144 -= 2;
          }
          if ((v11 & 0x40) == 0)
          {
LABEL_266:
            if (WebCore::DragData::containsColor((WTF::StringImpl **)v6))
            {
              v403.var0.var0.var0 = (Node *)*((_QWORD *)v6 + 7);
              LOBYTE(v403.var0.var1) = *((_BYTE *)v6 + 64);
              v146 = WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v146 = off_1E327FAB0;
              *(Position *)(v146 + 8) = v403.var0;
              v147 = WebCore::s_platformStrategies;
              v148 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
              if (!v148)
              {
                v148 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
                *(_QWORD *)(v147 + 16) = v148;
              }
              (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v148 + 88))(v374, v148, (uint64_t)v6 + 72, v146);
              (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
              if ((BYTE6(v374[0]) & 4) == 0)
                goto LABEL_370;
              if ((*((_WORD *)v364 + 14) & 0x10) != 0)
              {
                v149 = *(_QWORD *)(*((_QWORD *)v364 + 12) + 24);
                v150 = *(_QWORD *)(WebCore::HTMLNames::inputTag + 24);
                if (v149 == v150)
                {
                  v151 = *((_DWORD *)v364 + 6);
                  *((_DWORD *)v364 + 6) = v151 + 2;
                  if (*(_DWORD *)(*((_QWORD *)v364 + 30) + 12) != 4)
                  {
                    if (v151)
                    {
                      *((_DWORD *)v364 + 6) = v151;
                    }
                    else if ((*((_WORD *)v364 + 15) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef(v364, v86);
                    }
                    goto LABEL_350;
                  }
                  v152 = *((_BYTE *)v364 + 160) & 0x18;
                  if (v151)
                  {
                    *((_DWORD *)v364 + 6) = v151;
                    goto LABEL_275;
                  }
                  if ((*((_WORD *)v364 + 15) & 0x400) != 0)
                  {
LABEL_275:
                    if (!v152)
                      goto LABEL_276;
                    goto LABEL_350;
                  }
                  WebCore::Node::removedLastRef(v364, v86);
                  if (!v152)
                  {
                    if ((*((_WORD *)v364 + 14) & 0x10) == 0)
                      goto LABEL_427;
                    v149 = *(_QWORD *)(*((_QWORD *)v364 + 12) + 24);
                    v150 = *(_QWORD *)(WebCore::HTMLNames::inputTag + 24);
LABEL_276:
                    if (v149 == v150)
                    {
                      WebCore::serializationForHTML((WebCore *)v374, &v386);
                      WebCore::HTMLInputElement::setValue((uint64_t)v364, (uint64_t)&v386, (const WTF::StringImpl *)2, 0, (uint64_t)&v403);
                      if (v403.var1)
                      {
                        v153 = *(WTF::StringImpl **)&v403.var0.var1;
                        *(_QWORD *)&v403.var0.var1 = 0;
                        if (v153)
                        {
                          if (*(_DWORD *)v153 == 2)
                            WTF::StringImpl::destroy(v153, (WTF::StringImpl *)v86);
                          else
                            *(_DWORD *)v153 -= 2;
                        }
                      }
                      v154 = v386;
                      v386 = 0;
                      if (v154)
                      {
                        if (*(_DWORD *)v154 == 2)
                          WTF::StringImpl::destroy(v154, (WTF::StringImpl *)v86);
                        else
                          *(_DWORD *)v154 -= 2;
                      }
                      v133 = 1;
                      goto LABEL_371;
                    }
LABEL_427:
                    __break(0xC471u);
                    JUMPOUT(0x195F87058);
                  }
                }
              }
LABEL_350:
              WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*((_QWORD *)v5 + 37) + 3064) + 56), &v403);
              if ((_BYTE)v405)
              {
                v369 = v6;
                v6 = (WebCore::Pasteboard *)WTF::fastMalloc((WTF *)0x60);
                *(_QWORD *)v6 = 0x900000001;
                LODWORD(v11) = (_DWORD)v6 + 32;
                *((_QWORD *)v6 + 1) = 0;
                *((_QWORD *)v6 + 2) = (char *)v6 + 32;
                *((_QWORD *)v6 + 3) = 4;
                WebCore::serializationForHTML((WebCore *)v374, &v386);
                WebCore::MutableStyleProperties::setProperty((uint64_t)v6, 5, (uint64_t)&v386, 0, 0);
                this = v386;
                v386 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                    this = (WebCore::DragController *)WTF::StringImpl::destroy(this, a2);
                  else
                    *(_DWORD *)this -= 2;
                }
                v177 = (WebCore::Document *)*((_QWORD *)v5 + 37);
                v3 = *((_QWORD *)v177 + 382);
                if (!v3)
                {
                  v214 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                  WebCore::Editor::Editor(v214, v177);
                  this = (WebCore::DragController *)*((_QWORD *)v177 + 382);
                  *((_QWORD *)v177 + 382) = v214;
                  if (this)
                  {
                    WebCore::Editor::~Editor(this, a2);
                    if (*(_DWORD *)this)
                    {
                      *((_QWORD *)this + 62) = 0;
                      *((_OWORD *)this + 29) = 0u;
                      *((_OWORD *)this + 30) = 0u;
                      *((_OWORD *)this + 27) = 0u;
                      *((_OWORD *)this + 28) = 0u;
                      *((_OWORD *)this + 25) = 0u;
                      *((_OWORD *)this + 26) = 0u;
                      *((_OWORD *)this + 23) = 0u;
                      *((_OWORD *)this + 24) = 0u;
                      *((_OWORD *)this + 21) = 0u;
                      *((_OWORD *)this + 22) = 0u;
                      *((_OWORD *)this + 19) = 0u;
                      *((_OWORD *)this + 20) = 0u;
                      *((_OWORD *)this + 17) = 0u;
                      *((_OWORD *)this + 18) = 0u;
                      *((_OWORD *)this + 15) = 0u;
                      *((_OWORD *)this + 16) = 0u;
                      *((_OWORD *)this + 13) = 0u;
                      *((_OWORD *)this + 14) = 0u;
                      *((_OWORD *)this + 11) = 0u;
                      *((_OWORD *)this + 12) = 0u;
                      *((_OWORD *)this + 9) = 0u;
                      *((_OWORD *)this + 10) = 0u;
                      *((_OWORD *)this + 7) = 0u;
                      *((_OWORD *)this + 8) = 0u;
                      *((_OWORD *)this + 5) = 0u;
                      *((_OWORD *)this + 6) = 0u;
                      *((_OWORD *)this + 3) = 0u;
                      *((_OWORD *)this + 4) = 0u;
                      *((_OWORD *)this + 1) = 0u;
                      *((_OWORD *)this + 2) = 0u;
                      *(_OWORD *)this = 0u;
                    }
                    else
                    {
                      this = (WebCore::DragController *)WTF::fastFree(this, a2);
                    }
                  }
                  v3 = *((_QWORD *)v177 + 382);
                }
                ++*(_DWORD *)v3;
                if ((_BYTE)v405)
                {
                  shouldApplyStyle = WebCore::Editor::shouldApplyStyle((WebCore::Editor *)v3, v6, (WebCore::Node **)&v403);
                  if (!*(_DWORD *)v3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195F871F4);
                  }
                  v133 = shouldApplyStyle;
                  --*(_DWORD *)v3;
                  if (shouldApplyStyle)
                  {
                    (*(void (**)(_QWORD, uint64_t, WebCore::DragData *))(**((_QWORD **)v7 + 1) + 8))(*((_QWORD *)v7 + 1), 2, v369);
                    v179 = (WebCore::Document *)*((_QWORD *)v5 + 37);
                    v180 = (unsigned int *)*((_QWORD *)v179 + 382);
                    if (!v180)
                    {
                      v219 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                      WebCore::Editor::Editor(v219, v179);
                      v221 = (WebCore::Editor *)*((_QWORD *)v179 + 382);
                      *((_QWORD *)v179 + 382) = v219;
                      if (v221)
                      {
                        WebCore::Editor::~Editor(v221, v220);
                        if (*(_DWORD *)v222)
                        {
                          *(_QWORD *)(v222 + 496) = 0;
                          *(_OWORD *)(v222 + 464) = 0u;
                          *(_OWORD *)(v222 + 480) = 0u;
                          *(_OWORD *)(v222 + 432) = 0u;
                          *(_OWORD *)(v222 + 448) = 0u;
                          *(_OWORD *)(v222 + 400) = 0u;
                          *(_OWORD *)(v222 + 416) = 0u;
                          *(_OWORD *)(v222 + 368) = 0u;
                          *(_OWORD *)(v222 + 384) = 0u;
                          *(_OWORD *)(v222 + 336) = 0u;
                          *(_OWORD *)(v222 + 352) = 0u;
                          *(_OWORD *)(v222 + 304) = 0u;
                          *(_OWORD *)(v222 + 320) = 0u;
                          *(_OWORD *)(v222 + 272) = 0u;
                          *(_OWORD *)(v222 + 288) = 0u;
                          *(_OWORD *)(v222 + 240) = 0u;
                          *(_OWORD *)(v222 + 256) = 0u;
                          *(_OWORD *)(v222 + 208) = 0u;
                          *(_OWORD *)(v222 + 224) = 0u;
                          *(_OWORD *)(v222 + 176) = 0u;
                          *(_OWORD *)(v222 + 192) = 0u;
                          *(_OWORD *)(v222 + 144) = 0u;
                          *(_OWORD *)(v222 + 160) = 0u;
                          *(_OWORD *)(v222 + 112) = 0u;
                          *(_OWORD *)(v222 + 128) = 0u;
                          *(_OWORD *)(v222 + 80) = 0u;
                          *(_OWORD *)(v222 + 96) = 0u;
                          *(_OWORD *)(v222 + 48) = 0u;
                          *(_OWORD *)(v222 + 64) = 0u;
                          *(_OWORD *)(v222 + 16) = 0u;
                          *(_OWORD *)(v222 + 32) = 0u;
                          *(_OWORD *)v222 = 0u;
                        }
                        else
                        {
                          WTF::fastFree((WTF *)v222, v223);
                        }
                      }
                      v180 = (unsigned int *)*((_QWORD *)v179 + 382);
                    }
                    ++*v180;
                    WebCore::Editor::applyStyle(v180, v6, 0x20u);
                    if (!*v180)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195F87234);
                    }
                    --*v180;
                  }
                  if (*(_DWORD *)v6 == 1)
                  {
                    v191 = *((unsigned int *)v6 + 7);
                    if ((_DWORD)v191)
                    {
                      v192 = 16 * v191;
                      v193 = (_DWORD **)(*((_QWORD *)v6 + 2) + 8);
                      do
                      {
                        v194 = *v193;
                        *v193 = 0;
                        if (v194)
                        {
                          if (*v194 == 2)
                            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v194, (WTF::StringImpl *)v86);
                          else
                            *v194 -= 2;
                        }
                        v193 += 2;
                        v192 -= 16;
                      }
                      while (v192);
                    }
                    v195 = (WTF *)*((_QWORD *)v6 + 2);
                    if ((WebCore::Pasteboard *)((char *)v6 + 32) != v195 && v195 != 0)
                    {
                      *((_QWORD *)v6 + 2) = 0;
                      *((_DWORD *)v6 + 6) = 0;
                      WTF::fastFree(v195, v86);
                    }
                    v197 = *((_QWORD *)v6 + 1);
                    *((_QWORD *)v6 + 1) = 0;
                    if (v197)
                      (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
                    WTF::fastFree(v6, v86);
                  }
                  else
                  {
                    --*(_DWORD *)v6;
                  }
                  v6 = v369;
                  if ((_BYTE)v405)
                  {
                    v181 = *(_QWORD *)&v403.var1;
                    *(_QWORD *)&v403.var1 = 0;
                    if (v181)
                    {
                      if (*(_DWORD *)(v181 + 24) == 2)
                      {
                        if ((*(_WORD *)(v181 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v181, v86);
                      }
                      else
                      {
                        *(_DWORD *)(v181 + 24) -= 2;
                      }
                    }
                    v182 = v403.var0.var0.var0;
                    v403.var0.var0.var0 = 0;
                    if (v182)
                    {
                      if (*((_DWORD *)v182 + 6) == 2)
                      {
                        if ((*((_WORD *)v182 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v182, v86);
                      }
                      else
                      {
                        *((_DWORD *)v182 + 6) -= 2;
                      }
                    }
                  }
                  goto LABEL_371;
                }
                goto LABEL_781;
              }
LABEL_370:
              v133 = 0;
LABEL_371:
              if (((unint64_t)v374[0] & 0x8000000000000) != 0)
              {
                v183 = (unsigned int *)((unint64_t)v374[0] & 0xFFFFFFFFFFFFLL);
                do
                {
                  v184 = __ldaxr(v183);
                  v185 = v184 - 1;
                }
                while (__stlxr(v185, v183));
                if (!v185)
                {
                  atomic_store(1u, v183);
                  WTF::fastFree((WTF *)v183, v86);
                }
              }
              goto LABEL_722;
            }
            if (!*((_BYTE *)v6 + 80))
            {
              v403.var0.var0.var0 = (Node *)*((_QWORD *)v6 + 7);
              LOBYTE(v403.var0.var1) = *((_BYTE *)v6 + 64);
              v165 = WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v165 = off_1E327FAB0;
              *(Position *)(v165 + 8) = v403.var0;
              v166 = WebCore::s_platformStrategies;
              v167 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
              if (!v167)
              {
                v167 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
                *(_QWORD *)(v166 + 16) = v167;
              }
              LODWORD(v3) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v167 + 104))(v167, (uint64_t)v6 + 72, v165);
              (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
              if (v12)
              {
                if ((_DWORD)v3)
                {
                  v168 = v364;
                  if (((_BYTE)v12[20] & 0x18) != 0)
                  {
                    v133 = 0;
                  }
                  else
                  {
                    v133 = (*(uint64_t (**)(unsigned int *, WebCore::Pasteboard *))(*(_QWORD *)v12[30] + 904))(v12[30], v6);
                    v168 = v364;
                  }
                  goto LABEL_723;
                }
              }
            }
            if (WebCore::DragController::canProcessDrag(*(WebCore::DragController **)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 64), v6, v145))
            {
              WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v403, (const WebCore::VisiblePosition *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 56) + 24), 0);
              WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v403, v374);
              v155 = WebCore::editableRootForPosition(*(_QWORD *)(*((_QWORD *)v5 + 37) + 3064) + 120, 0);
              if (v155)
                *(_DWORD *)(v155 + 24) += 2;
              if (!(_BYTE)v376)
              {
                v133 = 0;
LABEL_711:
                if (v155)
                {
                  if (*(_DWORD *)(v155 + 24) == 2)
                  {
                    if ((*(_WORD *)(v155 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v155, a2);
                  }
                  else
                  {
                    *(_DWORD *)(v155 + 24) -= 2;
                  }
                }
                if ((_BYTE)v376)
                {
                  v325 = v375[0];
                  v375[0] = 0;
                  if (v325)
                  {
                    if (*((_DWORD *)v325 + 6) == 2)
                    {
                      if ((*((_WORD *)v325 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v325, a2);
                    }
                    else
                    {
                      *((_DWORD *)v325 + 6) -= 2;
                    }
                  }
                  v326 = v374[0];
                  v374[0] = 0;
                  if (v326)
                  {
                    if (*((_DWORD *)v326 + 6) == 2)
                    {
                      if ((*((_WORD *)v326 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v326, a2);
                    }
                    else
                    {
                      *((_DWORD *)v326 + 6) -= 2;
                    }
                  }
                }
                WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v403);
                goto LABEL_722;
              }
              v361 = (WebCore::Node *)v155;
              v156 = *(WebCore::Document **)(*((_QWORD *)v374[0] + 5) + 8);
              v157 = *((_QWORD *)v156 + 90);
              if (!v157)
                v157 = WebCore::Document::ensureCachedResourceLoader(v156, a2);
              if (!*(_QWORD *)(v157 + 8))
              {
                v187 = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v187 = 1;
                *(_QWORD *)(v187 + 8) = v157;
                v188 = *(unsigned int **)(v157 + 8);
                *(_QWORD *)(v157 + 8) = v187;
                if (v188)
                {
                  do
                  {
                    v189 = __ldaxr(v188);
                    v190 = v189 - 1;
                  }
                  while (__stlxr(v190, v188));
                  if (!v190)
                  {
                    atomic_store(1u, v188);
                    WTF::fastFree((WTF *)v188, v186);
                  }
                }
              }
              v369 = v6;
              v6 = *(WebCore::Pasteboard **)(v157 + 8);
              do
                v158 = __ldaxr((unsigned int *)v6);
              while (__stlxr(v158 + 1, (unsigned int *)v6));
              v360 = *(_BYTE *)(v157 + 274);
              *(_BYTE *)(*((_QWORD *)v6 + 1) + 274) = 1;
              v159 = (WebCore::Document *)*((_QWORD *)v5 + 37);
              v160 = (_DWORD *)*((_QWORD *)v159 + 382);
              if (!v160)
              {
                v3 = WTF::fastMalloc((WTF *)0x1F8);
                WebCore::Editor::Editor((WebCore::Editor *)v3, v159);
                v216 = (WebCore::Editor *)*((_QWORD *)v159 + 382);
                *((_QWORD *)v159 + 382) = v3;
                if (v216)
                {
                  WebCore::Editor::~Editor(v216, v215);
                  if (*(_DWORD *)v217)
                  {
                    *(_QWORD *)(v217 + 496) = 0;
                    *(_OWORD *)(v217 + 464) = 0u;
                    *(_OWORD *)(v217 + 480) = 0u;
                    *(_OWORD *)(v217 + 432) = 0u;
                    *(_OWORD *)(v217 + 448) = 0u;
                    *(_OWORD *)(v217 + 400) = 0u;
                    *(_OWORD *)(v217 + 416) = 0u;
                    *(_OWORD *)(v217 + 368) = 0u;
                    *(_OWORD *)(v217 + 384) = 0u;
                    *(_OWORD *)(v217 + 336) = 0u;
                    *(_OWORD *)(v217 + 352) = 0u;
                    *(_OWORD *)(v217 + 304) = 0u;
                    *(_OWORD *)(v217 + 320) = 0u;
                    *(_OWORD *)(v217 + 272) = 0u;
                    *(_OWORD *)(v217 + 288) = 0u;
                    *(_OWORD *)(v217 + 240) = 0u;
                    *(_OWORD *)(v217 + 256) = 0u;
                    *(_OWORD *)(v217 + 208) = 0u;
                    *(_OWORD *)(v217 + 224) = 0u;
                    *(_OWORD *)(v217 + 176) = 0u;
                    *(_OWORD *)(v217 + 192) = 0u;
                    *(_OWORD *)(v217 + 144) = 0u;
                    *(_OWORD *)(v217 + 160) = 0u;
                    *(_OWORD *)(v217 + 112) = 0u;
                    *(_OWORD *)(v217 + 128) = 0u;
                    *(_OWORD *)(v217 + 80) = 0u;
                    *(_OWORD *)(v217 + 96) = 0u;
                    *(_OWORD *)(v217 + 48) = 0u;
                    *(_OWORD *)(v217 + 64) = 0u;
                    *(_OWORD *)(v217 + 16) = 0u;
                    *(_OWORD *)(v217 + 32) = 0u;
                    *(_OWORD *)v217 = 0u;
                  }
                  else
                  {
                    WTF::fastFree((WTF *)v217, v218);
                  }
                }
                v160 = (_DWORD *)*((_QWORD *)v159 + 382);
              }
              v362 = (uint64_t)v160;
              ++*v160;
              if (*((_QWORD *)v7 + 2) != *((_QWORD *)v7 + 3))
                goto LABEL_471;
              v11 = *(unsigned int ***)(*((_QWORD *)v5 + 37) + 3064);
              v161 = (uint64_t)v11[15];
              if (!v161)
                goto LABEL_471;
              v162 = *((_BYTE *)v11 + 132) & 7;
              if (v162 > 4)
                goto LABEL_471;
              if (((1 << v162) & 0x19) == 0)
              {
                v161 = *(_QWORD *)(v161 + 32);
                if (!v161)
                  goto LABEL_471;
              }
              *(_DWORD *)(v161 + 24) += 2;
              this = (WebCore::DragController *)WebCore::Node::computeEditability(v161, 0, 0);
              LODWORD(v3) = (_DWORD)this;
              if (*(_DWORD *)(v161 + 24) == 2)
              {
                if ((*(_WORD *)(v161 + 30) & 0x400) == 0)
                  this = (WebCore::DragController *)WebCore::Node::removedLastRef((WebCore::Node *)v161, a2);
              }
              else
              {
                *(_DWORD *)(v161 + 24) -= 2;
              }
              v163 = (_DWORD)v3 && *((_BYTE *)v11 + 153) == 2;
              if (v163 && (*((_BYTE *)v369 + 25) & 8) == 0)
              {
                v164 = 1;
              }
              else
              {
LABEL_471:
                v224 = *(_QWORD *)&v408[12];
                if (!*(_QWORD *)&v408[12])
                  goto LABEL_650;
                v225 = v409 & 7;
                if (v225 > 4)
                  goto LABEL_650;
                if (((1 << v225) & 0x19) == 0)
                {
                  v224 = *(_QWORD *)(*(_QWORD *)&v408[12] + 32);
                  if (!v224)
                    goto LABEL_650;
                }
                *(_DWORD *)(v224 + 24) += 2;
                this = (WebCore::DragController *)WebCore::Node::computeEditability(v224, 0, 1);
                LODWORD(v3) = (_DWORD)this;
                if (*(_DWORD *)(v224 + 24) == 2)
                {
                  if ((*(_WORD *)(v224 + 30) & 0x400) == 0)
                    this = (WebCore::DragController *)WebCore::Node::removedLastRef((WebCore::Node *)v224, a2);
                }
                else
                {
                  *(_DWORD *)(v224 + 24) -= 2;
                }
                if ((_DWORD)v3 != 2)
                {
LABEL_650:
                  this = (WebCore::DragController *)WebCore::DragData::asPlainText((WTF::StringImpl **)v369, (uint64_t)&v397);
                  if (v397)
                  {
                    if (!*((_DWORD *)v397 + 1))
                      goto LABEL_669;
                    if (!(_BYTE)v376)
                      goto LABEL_781;
                    v302 = v374[0];
                    *((_DWORD *)v374[0] + 6) += 2;
                    v386 = v302;
                    LODWORD(v387) = v374[1];
                    v303 = v375[0];
                    *((_DWORD *)v375[0] + 6) += 2;
                    v388 = v303;
                    v389 = (int)v375[1];
                    v390 = 1;
                    LODWORD(v11) = v362;
                    shouldInsertText = WebCore::Editor::shouldInsertText(v362, (uint64_t)&v397, (uint64_t)&v386, 2);
                    if (v390)
                    {
                      v305 = v388;
                      v388 = 0;
                      if (v305)
                      {
                        if (*((_DWORD *)v305 + 6) == 2)
                        {
                          if ((*((_WORD *)v305 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v305, a2);
                        }
                        else
                        {
                          *((_DWORD *)v305 + 6) -= 2;
                        }
                      }
                      v306 = v386;
                      v386 = 0;
                      if (v306)
                      {
                        if (*((_DWORD *)v306 + 6) == 2)
                        {
                          if ((*((_WORD *)v306 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v306, a2);
                        }
                        else
                        {
                          *((_DWORD *)v306 + 6) -= 2;
                        }
                      }
                    }
                    if (shouldInsertText)
                    {
                      this = (WebCore::DragController *)(*(uint64_t (**)(_QWORD, uint64_t, WebCore::DragData *))(**((_QWORD **)v7 + 1) + 8))(*((_QWORD *)v7 + 1), 2, v369);
                      if (!(_BYTE)v376)
                        goto LABEL_781;
                      WebCore::createFragmentFromText(v374, (const WebCore::SimpleRange *)&v397, (uint64_t *)&v386);
                      v308 = *(_QWORD *)(v362 + 8);
                      LODWORD(v11) = (_DWORD)v7 + 16;
                      if (!v308)
                        goto LABEL_823;
                      this = *(WebCore::DragController **)(v308 + 8);
                      if (!this)
                        goto LABEL_823;
                      if (!(_BYTE)v376)
                        goto LABEL_781;
                      if (((*(uint64_t (**)(WebCore::DragController *, WTF::StringImpl *, WTF::StringImpl **, _QWORD))(*(_QWORD *)this + 648))(this, v386, v374, 0) & 1) != 0)
                      {
                        LODWORD(v11) = 1;
                      }
                      else
                      {
LABEL_823:
                        if (WebCore::setSelectionToDragCaret((WebCore *)v5, (WebCore::LocalFrame *)&v403, (int32x2_t *)&v396, v307))
                        {
                          v309 = (WTF::StringImpl *)*v373;
                          if (*v373)
                            *((_DWORD *)v309 + 6) += 2;
                          v402[0] = v309;
                          v310 = v386;
                          v386 = 0;
                          v311 = (_DWORD *)WTF::fastMalloc((WTF *)0x1D8);
                          v312 = WebCore::EditCommand::EditCommand((uint64_t)v311, (uint64_t *)v402, 15);
                          *(_OWORD *)(v312 + 248) = 0u;
                          *(_OWORD *)(v312 + 264) = 0u;
                          *(_QWORD *)v312 = off_1E33ADA18;
                          *(_QWORD *)(v312 + 280) = 0;
                          *(_DWORD *)(v312 + 288) = 0;
                          *(_BYTE *)(v312 + 292) &= 0xF0u;
                          *(_QWORD *)(v312 + 296) = 0;
                          *(_DWORD *)(v312 + 304) = 0;
                          *(_BYTE *)(v312 + 308) &= 0xF0u;
                          *(_QWORD *)(v312 + 312) = 0;
                          *(_DWORD *)(v312 + 320) = 0;
                          *(_BYTE *)(v312 + 324) &= 0xF0u;
                          *(_QWORD *)(v312 + 328) = 0;
                          *(_DWORD *)(v312 + 336) = 0;
                          *(_BYTE *)(v312 + 340) &= 0xF0u;
                          *(_QWORD *)(v312 + 344) = 0;
                          *(_DWORD *)(v312 + 352) = 0;
                          *(_BYTE *)(v312 + 356) &= 0xF0u;
                          *(_QWORD *)(v312 + 360) = 0;
                          *(_DWORD *)(v312 + 368) = 0;
                          *(_BYTE *)(v312 + 372) &= 0xF0u;
                          *(_WORD *)(v312 + 376) = 1;
                          *(_BYTE *)(v312 + 378) = *(_BYTE *)(v312 + 378) & 0xFC | 1;
                          *(_QWORD *)(v312 + 384) = 0;
                          *(_DWORD *)(v312 + 392) = 0;
                          *(_BYTE *)(v312 + 396) &= 0xF0u;
                          *(_QWORD *)(v312 + 400) = 0;
                          *(_DWORD *)(v312 + 408) = 0;
                          *(_BYTE *)(v312 + 412) &= 0xF0u;
                          *(_QWORD *)(v312 + 416) = 0;
                          *(_WORD *)(v312 + 424) = 1;
                          *(_BYTE *)(v312 + 426) = 1;
                          *(_QWORD *)(v312 + 432) = v310;
                          *(_QWORD *)(v312 + 440) = 0;
                          *(_QWORD *)(v312 + 448) = 0;
                          *(_QWORD *)(v312 + 456) = 0;
                          *(_BYTE *)(v312 + 464) = 1;
                          *(_DWORD *)(v312 + 465) = 0;
                          WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v312);
                          if (v311[2] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v311 + 8))(v311);
                          else
                            --v311[2];
                          v313 = v402[0];
                          v402[0] = 0;
                          if (v313)
                          {
                            if (*((_DWORD *)v313 + 6) == 2)
                            {
                              if ((*((_WORD *)v313 + 15) & 0x400) == 0)
                                WebCore::Node::removedLastRef(v313, a2);
                            }
                            else
                            {
                              *((_DWORD *)v313 + 6) -= 2;
                            }
                          }
                        }
                        LODWORD(v11) = 0;
                      }
                      v314 = v386;
                      v386 = 0;
                      if (v314)
                      {
                        if (*((_DWORD *)v314 + 6) == 2)
                        {
                          if ((*((_WORD *)v314 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v314, a2);
                        }
                        else
                        {
                          *((_DWORD *)v314 + 6) -= 2;
                        }
                      }
                      LODWORD(v3) = 1;
                    }
                    else
                    {
LABEL_669:
                      LODWORD(v3) = 0;
                      LODWORD(v11) = 1;
                    }
                    this = v397;
                    v397 = 0;
                    if (!this)
                      goto LABEL_686;
                    if (*(_DWORD *)this != 2)
                    {
                      *(_DWORD *)this -= 2;
                      goto LABEL_686;
                    }
LABEL_782:
                    WTF::StringImpl::destroy(this, a2);
LABEL_686:
                    if ((_DWORD)v11)
                      v133 = v3;
                    else
                      v133 = 1;
                    v155 = (uint64_t)v361;
                    if (!v361 || (_DWORD)v11)
                      goto LABEL_705;
                    goto LABEL_691;
                  }
                  goto LABEL_651;
                }
                v164 = 0;
              }
              v359 = v164;
              if (!(_BYTE)v376)
                goto LABEL_781;
              v395 = 0;
              if (!WebCore::DragData::containsCompatibleContent((WTF::StringImpl **)v369, 0))
                goto LABEL_542;
              v226 = (WebCore::Document *)*((_QWORD *)v5 + 37);
              v3 = *((_QWORD *)v226 + 382);
              if (!v3)
              {
                v297 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                WebCore::Editor::Editor(v297, v226);
                v299 = (WebCore::Editor *)*((_QWORD *)v226 + 382);
                *((_QWORD *)v226 + 382) = v297;
                if (v299)
                {
                  WebCore::Editor::~Editor(v299, v298);
                  if (*(_DWORD *)v300)
                  {
                    *(_QWORD *)(v300 + 496) = 0;
                    *(_OWORD *)(v300 + 464) = 0u;
                    *(_OWORD *)(v300 + 480) = 0u;
                    *(_OWORD *)(v300 + 432) = 0u;
                    *(_OWORD *)(v300 + 448) = 0u;
                    *(_OWORD *)(v300 + 400) = 0u;
                    *(_OWORD *)(v300 + 416) = 0u;
                    *(_OWORD *)(v300 + 368) = 0u;
                    *(_OWORD *)(v300 + 384) = 0u;
                    *(_OWORD *)(v300 + 336) = 0u;
                    *(_OWORD *)(v300 + 352) = 0u;
                    *(_OWORD *)(v300 + 304) = 0u;
                    *(_OWORD *)(v300 + 320) = 0u;
                    *(_OWORD *)(v300 + 272) = 0u;
                    *(_OWORD *)(v300 + 288) = 0u;
                    *(_OWORD *)(v300 + 240) = 0u;
                    *(_OWORD *)(v300 + 256) = 0u;
                    *(_OWORD *)(v300 + 208) = 0u;
                    *(_OWORD *)(v300 + 224) = 0u;
                    *(_OWORD *)(v300 + 176) = 0u;
                    *(_OWORD *)(v300 + 192) = 0u;
                    *(_OWORD *)(v300 + 144) = 0u;
                    *(_OWORD *)(v300 + 160) = 0u;
                    *(_OWORD *)(v300 + 112) = 0u;
                    *(_OWORD *)(v300 + 128) = 0u;
                    *(_OWORD *)(v300 + 80) = 0u;
                    *(_OWORD *)(v300 + 96) = 0u;
                    *(_OWORD *)(v300 + 48) = 0u;
                    *(_OWORD *)(v300 + 64) = 0u;
                    *(_OWORD *)(v300 + 16) = 0u;
                    *(_OWORD *)(v300 + 32) = 0u;
                    *(_OWORD *)v300 = 0u;
                  }
                  else
                  {
                    WTF::fastFree((WTF *)v300, v301);
                  }
                }
                v3 = *((_QWORD *)v226 + 382);
              }
              v227 = v369;
              WebCore::Pasteboard::create(v369, v402);
              v228 = v402[0];
              WebCore::Editor::webContentFromPasteboard((WebCore::Editor *)v3, v402[0], (const WebCore::SimpleRange *)v374, &v395, 1, &v394);
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v228 + 8))(v228);
              a2 = (WebCore::Pasteboard *)v394;
              if (v394)
              {
LABEL_547:
                v11 = (unsigned int **)v362;
                v259 = *(_QWORD *)(v362 + 8);
                if (!v259)
                  goto LABEL_564;
                v260 = *(_QWORD *)(v259 + 8);
                if (!v260)
                  goto LABEL_564;
                v261 = *((_QWORD *)a2 + 10);
                if (v261)
                {
                  if ((*(_WORD *)(v261 + 28) & 1) != 0)
                  {
                    v262 = *(_DWORD *)(v261 + 24);
                    *(_DWORD *)(v261 + 24) = v262 + 2;
                    v263 = *((_QWORD *)a2 + 11);
                    if (v263 == v261)
                    {
                      v3 = (unint64_t)a2;
                      v264 = (*(uint64_t (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v260 + 104))(v260, v261 + 80, v374, 2);
                      a2 = (WebCore::Pasteboard *)v3;
                      LOBYTE(v3) = v264;
                      v262 = *(_DWORD *)(v261 + 24) - 2;
                    }
                    if (v262)
                    {
                      *(_DWORD *)(v261 + 24) = v262;
                    }
                    else if ((*(_WORD *)(v261 + 30) & 0x400) == 0)
                    {
                      v368 = a2;
                      WebCore::Node::removedLastRef((WebCore::Node *)v261, a2);
                      a2 = v368;
                    }
                    if (v263 == v261)
                    {
                      v11 = (unsigned int **)v362;
                      if ((v3 & 1) != 0)
                      {
LABEL_558:
                        (*(void (**)(_QWORD, uint64_t, WebCore::DragData *))(**((_QWORD **)v7 + 1) + 8))(*((_QWORD *)v7 + 1), 2, v369);
                        v266 = v11[1];
                        LODWORD(v3) = v359;
                        if (!v266 || (this = (WebCore::DragController *)*((_QWORD *)v266 + 1)) == 0)
                        {
LABEL_574:
                          if (v359)
                          {
                            v272 = v11[1];
                            if (v272
                              && (v273 = *((_QWORD *)v272 + 1)) != 0
                              && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v273 + 24))(v273))
                            {
                              if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v5 + 37) + 3064) + 184) == 1)
                                canSmartReplace = WebCore::DragData::canSmartReplace(v369);
                              else
                                canSmartReplace = 0;
                              v280 = 1;
                            }
                            else
                            {
                              v280 = 0;
                              canSmartReplace = 0;
                            }
                            v282 = v394;
                            v394 = 0;
                            v283 = WTF::fastMalloc((WTF *)0x138);
                            v284 = *(WTF::StringImpl **)(*(_QWORD *)(v405 + 40) + 8);
                            *((_DWORD *)v284 + 6) += 2;
                            v386 = v284;
                            v285 = (_QWORD *)WebCore::EditCommand::EditCommand(v283, (uint64_t *)&v386, 59);
                            v285[31] = 0;
                            v285[32] = 0;
                            *v285 = off_1E33A9870;
                            v285[33] = 0;
                            v285[34] = 0;
                            v287 = v386;
                            v386 = 0;
                            if (v287)
                            {
                              if (*((_DWORD *)v287 + 6) == 2)
                              {
                                if ((*((_WORD *)v287 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v287, v286);
                              }
                              else
                              {
                                *((_DWORD *)v287 + 6) -= 2;
                              }
                            }
                            *(_QWORD *)v283 = off_1E33AD4D0;
                            *(_QWORD *)(v283 + 280) = v282;
                            v288 = v405;
                            if (v405)
                              *(_DWORD *)(v405 + 24) += 2;
                            *(_QWORD *)(v283 + 288) = v288;
                            *(_DWORD *)(v283 + 296) = v406;
                            *(_BYTE *)(v283 + 300) = BYTE4(v406);
                            *(_BYTE *)(v283 + 304) = canSmartReplace;
                            *(_BYTE *)(v283 + 305) = v280;
                            WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v283);
                            if (*(_DWORD *)(v283 + 8) != 1)
                            {
                              v268 = 0;
                              --*(_DWORD *)(v283 + 8);
                              goto LABEL_565;
                            }
                            (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
                          }
                          else if (WebCore::setSelectionToDragCaret((WebCore *)v5, (WebCore::LocalFrame *)&v403, (int32x2_t *)&v396, v265))
                          {
                            if (WebCore::DragData::canSmartReplace(v369))
                              v274 = 11;
                            else
                              v274 = 9;
                            if (v395 || WebCore::DragData::shouldMatchStyleOnDrop(v369))
                              v274 |= 4u;
                            v275 = (WTF::StringImpl *)*v373;
                            if (*v373)
                              *((_DWORD *)v275 + 6) += 2;
                            v386 = v275;
                            v276 = v394;
                            v394 = 0;
                            v277 = (_DWORD *)WTF::fastMalloc((WTF *)0x1D8);
                            v278 = WebCore::EditCommand::EditCommand((uint64_t)v277, (uint64_t *)&v386, 15);
                            *(_OWORD *)(v278 + 248) = 0u;
                            *(_OWORD *)(v278 + 264) = 0u;
                            *(_QWORD *)v278 = off_1E33ADA18;
                            *(_QWORD *)(v278 + 280) = 0;
                            *(_DWORD *)(v278 + 288) = 0;
                            *(_BYTE *)(v278 + 292) &= 0xF0u;
                            *(_QWORD *)(v278 + 296) = 0;
                            *(_DWORD *)(v278 + 304) = 0;
                            *(_BYTE *)(v278 + 308) &= 0xF0u;
                            *(_QWORD *)(v278 + 312) = 0;
                            *(_DWORD *)(v278 + 320) = 0;
                            *(_BYTE *)(v278 + 324) &= 0xF0u;
                            *(_QWORD *)(v278 + 328) = 0;
                            *(_DWORD *)(v278 + 336) = 0;
                            *(_BYTE *)(v278 + 340) &= 0xF0u;
                            *(_QWORD *)(v278 + 344) = 0;
                            *(_DWORD *)(v278 + 352) = 0;
                            *(_BYTE *)(v278 + 356) &= 0xF0u;
                            *(_QWORD *)(v278 + 360) = 0;
                            *(_DWORD *)(v278 + 368) = 0;
                            *(_BYTE *)(v278 + 372) &= 0xF0u;
                            *(_WORD *)(v278 + 376) = 1;
                            *(_BYTE *)(v278 + 378) = *(_BYTE *)(v278 + 378) & 0xFC | 1;
                            *(_QWORD *)(v278 + 384) = 0;
                            *(_DWORD *)(v278 + 392) = 0;
                            *(_BYTE *)(v278 + 396) &= 0xF0u;
                            *(_QWORD *)(v278 + 400) = 0;
                            *(_DWORD *)(v278 + 408) = 0;
                            *(_BYTE *)(v278 + 412) &= 0xF0u;
                            *(_QWORD *)(v278 + 416) = 0;
                            *(_BYTE *)(v278 + 424) = v274 & 1;
                            *(_BYTE *)(v278 + 425) = (v274 & 2) != 0;
                            *(_BYTE *)(v278 + 426) = (v274 & 4) != 0;
                            *(_QWORD *)(v278 + 432) = v276;
                            *(_QWORD *)(v278 + 440) = 0;
                            *(_QWORD *)(v278 + 448) = 0;
                            *(_QWORD *)(v278 + 456) = 0;
                            *(_BYTE *)(v278 + 464) = 1;
                            *(_DWORD *)(v278 + 465) = 0;
                            WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v278);
                            if (v277[2] == 1)
                              (*(void (**)(_DWORD *))(*(_QWORD *)v277 + 8))(v277);
                            else
                              --v277[2];
                            v279 = v386;
                            v386 = 0;
                            if (v279)
                            {
                              if (*((_DWORD *)v279 + 6) == 2)
                              {
                                if ((*((_WORD *)v279 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v279, a2);
                              }
                              else
                              {
                                *((_DWORD *)v279 + 6) -= 2;
                              }
                            }
                          }
                          v268 = 0;
LABEL_565:
                          v269 = 0;
                          v267 = v394;
LABEL_566:
                          if (v267)
                          {
                            if (*(_DWORD *)(v267 + 24) != 2)
                            {
                              v155 = (uint64_t)v361;
                              v270 = v361 == 0;
                              *(_DWORD *)(v267 + 24) -= 2;
                              goto LABEL_569;
                            }
                            if ((*(_WORD *)(v267 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v267, a2);
                          }
                          v155 = (uint64_t)v361;
                          v270 = v361 == 0;
LABEL_569:
                          if (v270)
                            v271 = 1;
                          else
                            v271 = v268;
                          if ((v271 & 1) != 0)
                          {
                            v133 = v269 | v268 ^ 1;
LABEL_705:
                            if (!*(_DWORD *)v362)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x195F888ACLL);
                            }
                            --*(_DWORD *)v362;
                            *(_BYTE *)(*((_QWORD *)v6 + 1) + 274) = v360;
                            do
                            {
                              v323 = __ldaxr((unsigned int *)v6);
                              v324 = v323 - 1;
                            }
                            while (__stlxr(v324, (unsigned int *)v6));
                            if (!v324)
                            {
                              atomic_store(1u, (unsigned int *)v6);
                              WTF::fastFree(v6, a2);
                              v155 = (uint64_t)v361;
                            }
                            v6 = v369;
                            goto LABEL_711;
                          }
LABEL_691:
                          v315 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v155 + 40) + 8) + 528);
                          if (!v315 || (v316 = *(_QWORD *)(v315 + 8)) == 0)
                          {
                            v133 = 1;
                            goto LABEL_705;
                          }
                          v317 = (unsigned int *)(v316 + 8);
                          do
                            v318 = __ldaxr(v317);
                          while (__stlxr(v318 + 1, v317));
                          v319 = *(int **)(v316 + 640);
                          v320 = *v319 + 1;
                          *v319 = v320;
                          {
                            v321 = WebCore::EventHandler::dragState(void)::state;
                            if (!(_QWORD)WebCore::EventHandler::dragState(void)::state)
                            {
LABEL_701:
                              v155 = (uint64_t)v361;
                              if (!v320)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x195F888FCLL);
                              }
                              *v319 = v320 - 1;
                              do
                                v322 = __ldaxr(v317);
                              while (__stlxr(v322 - 1, v317));
                              v133 = 1;
                              if (v322 != 1)
                                goto LABEL_705;
                              atomic_store(1u, v317);
                              v356 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                              *(_QWORD *)v356 = off_1E31FE290;
                              *((_QWORD *)v356 + 1) = v317;
                              v386 = v356;
                              WTF::ensureOnMainThread();
                              v357 = v386;
                              v386 = 0;
                              if (v357)
                                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v357 + 8))(v357);
                              goto LABEL_652;
                            }
                            if ((*(_BYTE *)(WebCore::EventHandler::dragState(void)::state + 22) & 8) == 0)
                            {
                              *((_DWORD *)v361 + 6) += 2;
                              *(_QWORD *)&WebCore::EventHandler::dragState(void)::state = v361;
                              if (*(_DWORD *)(v321 + 24) == 2)
                              {
                                if ((*(_WORD *)(v321 + 30) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v321, a2);
                              }
                              else
                              {
                                *(_DWORD *)(v321 + 24) -= 2;
                              }
                            }
                          }
                          else
                          {
                            WebCore::EventHandler::dragState(void)::state = 0u;
                            *(_OWORD *)&qword_1EE2F7E10 = 0u;
                          }
                          v320 = *v319;
                          goto LABEL_701;
                        }
                        if ((_BYTE)v376)
                        {
                          v267 = v394;
                          if (((*(uint64_t (**)(WebCore::DragController *, unint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)this + 648))(this, v394, v374, v359) & 1) != 0)
                          {
                            v268 = 1;
                            v269 = 1;
                            goto LABEL_566;
                          }
                          goto LABEL_574;
                        }
LABEL_781:
                        __break(1u);
                        goto LABEL_782;
                      }
LABEL_564:
                      v268 = 1;
                      goto LABEL_565;
                    }
                    v11 = (unsigned int **)v362;
                    v260 = *(_QWORD *)(*(_QWORD *)(v362 + 8) + 8);
                  }
                  else
                  {
                    v11 = (unsigned int **)v362;
                  }
                }
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v260 + 96))(v260) & 1) != 0)
                  goto LABEL_558;
                goto LABEL_564;
              }
              v394 = 0;
              v402[0] = *((WTF::StringImpl **)v369 + 7);
              LOBYTE(v402[1]) = *((_BYTE *)v369 + 64);
              v229 = WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v229 = off_1E327FAB0;
              *(_OWORD *)(v229 + 8) = *(_OWORD *)v402;
              v230 = WebCore::s_platformStrategies;
              v231 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
              if (!v231)
              {
                v231 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
                *(_QWORD *)(v230 + 16) = v231;
                v227 = v369;
              }
              LODWORD(v3) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v231 + 160))(v231, (uint64_t)v227 + 72, v229);
              (*(void (**)(uint64_t))(*(_QWORD *)v229 + 8))(v229);
              if (!(_DWORD)v3)
                goto LABEL_542;
              v401 = 0;
              WebCore::DragData::asURL((uint64_t)v369, &v401, &v400);
              if (!v400)
              {
                a2 = 0;
                LODWORD(v3) = 1;
                goto LABEL_538;
              }
              v232 = *((_DWORD *)v400 + 1);
              LODWORD(v3) = v232 == 0;
              if (!v232)
              {
                a2 = 0;
LABEL_535:
                v256 = v400;
                v400 = 0;
                if (v256)
                {
                  if (*(_DWORD *)v256 == 2)
                  {
                    v290 = a2;
                    WTF::StringImpl::destroy(v256, a2);
                    a2 = v290;
                  }
                  else
                  {
                    *(_DWORD *)v256 -= 2;
                  }
                }
LABEL_538:
                v257 = v401;
                v401 = 0;
                if (v257)
                {
                  if (*(_DWORD *)v257 == 2)
                  {
                    v289 = a2;
                    WTF::StringImpl::destroy(v257, a2);
                    a2 = v289;
                    if ((_DWORD)v3)
                      goto LABEL_542;
                    goto LABEL_546;
                  }
                  *(_DWORD *)v257 -= 2;
                }
                if ((_DWORD)v3)
                {
LABEL_542:
                  if (!WebCore::DragData::containsPlainText((WTF **)v369))
                    goto LABEL_651;
                  v395 = 1;
                  WebCore::DragData::asPlainText((WTF::StringImpl **)v369, (uint64_t)&v401);
                  WebCore::createFragmentFromText(v374, (const WebCore::SimpleRange *)&v401, (uint64_t *)v402);
                  a2 = v402[0];
                  v394 = (unint64_t)v402[0];
                  v402[0] = 0;
                  v258 = v401;
                  v401 = 0;
                  if (v258)
                  {
                    if (*(_DWORD *)v258 == 2)
                    {
                      v281 = a2;
                      WTF::StringImpl::destroy(v258, a2);
                      a2 = v281;
                    }
                    else
                    {
                      *(_DWORD *)v258 -= 2;
                    }
                  }
                }
LABEL_546:
                if (a2)
                  goto LABEL_547;
LABEL_651:
                v133 = 0;
LABEL_652:
                v155 = (uint64_t)v361;
                goto LABEL_705;
              }
              v366 = v2;
              v233 = *(_QWORD *)(*((_QWORD *)v374[0] + 5) + 8);
              *(_DWORD *)(v233 + 24) += 2;
              v234 = bmalloc::api::isoAllocate();
              *(_OWORD *)(v234 + 8) = xmmword_1968BC9D0;
              *(_QWORD *)(v234 + 24) = 0x101C00000002;
              *(_QWORD *)(v234 + 32) = 0;
              v358 = v233 + 96;
              *(_QWORD *)(v234 + 40) = v233 + 96;
              *(_OWORD *)(v234 + 48) = 0u;
              *(_OWORD *)(v234 + 64) = 0u;
              ++*(_DWORD *)(v233 + 3324);
              *(_QWORD *)(v234 + 80) = 0;
              *(_QWORD *)(v234 + 88) = 0;
              v236 = WebCore::HTMLNames::aTag;
              if (WebCore::HTMLNames::aTag)
                ++*(_DWORD *)WebCore::HTMLNames::aTag;
              *(_QWORD *)(v234 + 96) = v236;
              *(_QWORD *)(v234 + 104) = 0;
              *(_QWORD *)v234 = off_1E33B3458;
              *(_QWORD *)(v234 + 112) = &unk_1E33B3958;
              *(_WORD *)(v234 + 120) = 0;
              *(_BYTE *)(v234 + 122) = 0;
              *(_DWORD *)(v234 + 124) = -1;
              v237 = v234;
              *(_QWORD *)(v234 + 128) = 0;
              v238 = v400;
              if (v400)
              {
                if ((*((_BYTE *)v400 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v400 += 2;
                  v402[0] = v238;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase(v400, v235);
                  v291 = *(_QWORD *)(v237 + 104);
                  if (v291)
                  {
                    v292 = *(_DWORD *)(v291 + 4);
                    if ((v292 & 1) != 0)
                    {
                      v293 = *(uint64_t **)(v291 + 40);
                      v294 = *(_DWORD *)(v291 + 52);
                    }
                    else
                    {
                      v293 = (uint64_t *)(v291 + 32);
                      v294 = v292 >> 5;
                    }
                    if (v294)
                    {
                      v295 = 0;
                      v239 = 0xFFFFFFFFLL;
                      while (1)
                      {
                        v296 = *v293;
                        if (*v293 == WebCore::HTMLNames::hrefAttr
                          || *(_QWORD *)(v296 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
                          && *(_QWORD *)(v296 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
                        {
                          break;
                        }
                        ++v295;
                        v293 += 2;
                        if (v294 == v295)
                          goto LABEL_496;
                      }
                      v239 = v295;
LABEL_496:
                      WebCore::Element::setAttributeInternal((WTF::StringImpl *)v237, v239, (WebCore::TreeScope *)&WebCore::HTMLNames::hrefAttr, v402, 0);
                      v241 = v402[0];
                      v402[0] = 0;
                      if (v241)
                      {
                        if (*(_DWORD *)v241 == 2)
                          WTF::StringImpl::destroy(v241, v240);
                        else
                          *(_DWORD *)v241 -= 2;
                      }
                      if (v401 && *((_DWORD *)v401 + 1))
                        goto LABEL_517;
                      if (WebCore::DragData::containsPlainText((WTF **)v369))
                      {
                        WebCore::DragData::asPlainText((WTF::StringImpl **)v369, (uint64_t)v402);
                        v243 = v402[0];
                        v402[0] = 0;
                        v244 = v401;
                        v401 = v243;
                        if (v244)
                        {
                          v245 = *(_DWORD *)v244 - 2;
                          if (*(_DWORD *)v244 == 2)
                          {
                            WTF::StringImpl::destroy(v244, v242);
                            v244 = v402[0];
                            v402[0] = 0;
                            if (!v244)
                              goto LABEL_504;
                            v245 = *(_DWORD *)v244 - 2;
                            if (*(_DWORD *)v244 == 2)
                            {
                              WTF::StringImpl::destroy(v244, v242);
                              goto LABEL_504;
                            }
                          }
                          *(_DWORD *)v244 = v245;
                        }
                      }
LABEL_504:
                      v246 = v401;
                      if (!v401 || !*((_DWORD *)v401 + 1))
                      {
                        v247 = v400;
                        if (v400)
                          *(_DWORD *)v400 += 2;
                        v401 = v247;
                        if (v246)
                        {
                          if (*(_DWORD *)v246 == 2)
                            WTF::StringImpl::destroy(v246, v242);
                          else
                            *(_DWORD *)v246 -= 2;
                        }
                      }
LABEL_517:
                      v248 = bmalloc::api::isoAllocate();
                      v249 = v248;
                      *(_OWORD *)(v248 + 8) = xmmword_1968BC9D0;
                      *(_QWORD *)(v248 + 24) = 0x300300000002;
                      *(_QWORD *)(v248 + 32) = 0;
                      *(_QWORD *)(v248 + 40) = v358;
                      *(_OWORD *)(v248 + 48) = 0u;
                      *(_OWORD *)(v248 + 64) = 0u;
                      ++*(_DWORD *)(v233 + 3324);
                      v250 = v401;
                      if (v401 || (v250 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
                        *(_DWORD *)v250 += 2;
                      *(_QWORD *)(v248 + 80) = v250;
                      *(_QWORD *)v248 = off_1E33A8078;
                      WebCore::ContainerNode::appendChild(v237, (WebCore::Node *)v248, (uint64_t)&v386);
                      if ((_BYTE)v388)
                      {
                        v252 = v387;
                        v387 = 0;
                        if (v252)
                        {
                          if (*(_DWORD *)v252 == 2)
                            WTF::StringImpl::destroy(v252, v251);
                          else
                            *(_DWORD *)v252 -= 2;
                        }
                      }
                      if (*(_DWORD *)(v249 + 24) == 2)
                      {
                        if ((*(_WORD *)(v249 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v249, v251);
                      }
                      else
                      {
                        *(_DWORD *)(v249 + 24) -= 2;
                      }
                      v253 = bmalloc::api::isoAllocate();
                      *(_OWORD *)(v253 + 8) = xmmword_1968BC9D0;
                      *(_QWORD *)(v253 + 24) = 0xB00400000002;
                      *(_QWORD *)(v253 + 32) = 0;
                      *(_QWORD *)(v253 + 40) = v358;
                      *(_OWORD *)(v253 + 48) = 0u;
                      *(_OWORD *)(v253 + 64) = 0u;
                      ++*(_DWORD *)(v233 + 3324);
                      *(_QWORD *)(v253 + 80) = 0;
                      *(_QWORD *)(v253 + 88) = 0;
                      *(_QWORD *)v253 = off_1E33A31A0;
                      v3 = v253;
                      WebCore::ContainerNode::appendChild(v253, (WebCore::Node *)v237, (uint64_t)&v397);
                      if (v399)
                      {
                        v255 = v398;
                        v398 = 0;
                        if (v255)
                        {
                          if (*(_DWORD *)v255 == 2)
                            WTF::StringImpl::destroy(v255, v254);
                          else
                            *(_DWORD *)v255 -= 2;
                        }
                      }
                      v394 = v3;
                      if (*(_DWORD *)(v237 + 24) == 2)
                      {
                        if ((*(_WORD *)(v237 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v237, v254);
                      }
                      else
                      {
                        *(_DWORD *)(v237 + 24) -= 2;
                      }
                      if (*(_DWORD *)(v233 + 24) == 2)
                      {
                        if ((*(_WORD *)(v233 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v233, v254);
                      }
                      else
                      {
                        *(_DWORD *)(v233 + 24) -= 2;
                      }
                      v2 = v366;
                      a2 = (WebCore::Pasteboard *)v3;
                      LODWORD(v3) = 0;
                      goto LABEL_535;
                    }
                  }
                }
              }
              else
              {
                v402[0] = 0;
              }
              v239 = 0xFFFFFFFFLL;
              goto LABEL_496;
            }
            v133 = 0;
LABEL_722:
            v168 = v364;
LABEL_723:
            if ((v363 & 1) == 0)
            {
              v327 = v5 + 2;
              do
              {
                v328 = __ldaxr(v327);
                v329 = v328 - 1;
              }
              while (__stlxr(v329, v327));
              if (!v329)
              {
                v353 = v168;
                atomic_store(1u, v327);
                v354 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v354 = off_1E31FE290;
                *((_QWORD *)v354 + 1) = v327;
                v374[0] = v354;
                WTF::ensureOnMainThread();
                v355 = v374[0];
                v374[0] = 0;
                if (v355)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v355 + 8))(v355);
                v168 = v353;
              }
            }
            if (*((_DWORD *)v168 + 6) == 2)
            {
              v73 = v371;
              if ((*((_WORD *)v168 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v168, v86);
LABEL_730:
              if (v12)
              {
                if (*((_DWORD *)v12 + 6) == 2)
                {
                  if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v12, v86);
                }
                else
                {
                  *((_DWORD *)v12 + 6) -= 2;
                }
              }
              if (v133)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v7 + 1) + 24))(*((_QWORD *)v7 + 1));
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v373);
                v330 = *(WebCore::DragCaretController **)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 56);
                *(_QWORD *)&v403.var0.var1 = 0;
                v403.var0.var0.var0 = 0;
                *(_QWORD *)&v403.var1 = 1;
                WebCore::DragCaretController::setCaretPosition(v330, &v403);
                v331 = v403.var0.var0.var0;
                v403.var0.var0.var0 = 0;
                if (v331)
                {
                  if (*((_DWORD *)v331 + 6) == 2)
                  {
                    if ((*((_WORD *)v331 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v331, v81);
                  }
                  else
                  {
                    *((_DWORD *)v331 + 6) -= 2;
                  }
                }
                goto LABEL_737;
              }
LABEL_738:
              WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v373);
              v332 = *(WebCore::DragCaretController **)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 56);
              *(_QWORD *)&v403.var0.var1 = 0;
              v403.var0.var0.var0 = 0;
              *(_QWORD *)&v403.var1 = 1;
              WebCore::DragCaretController::setCaretPosition(v332, &v403);
              v335 = v403.var0.var0.var0;
              v403.var0.var0.var0 = 0;
              if (v335)
              {
                if (*((_DWORD *)v335 + 6) == 2)
                {
                  if ((*((_WORD *)v335 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v335, v333);
                }
                else
                {
                  *((_DWORD *)v335 + 6) -= 2;
                }
              }
              if ((unsigned __int16)WebCore::DragController::operationForLoad(v7, v6, v334) < 0x100u
                || (WebCore::DragData::asURL((uint64_t)v6, 0, &v397), (v336 = v397) == 0))
              {
                v67 = 0;
                do
                {
LABEL_744:
                  v337 = __ldaxr(v4);
                  v338 = v337 - 1;
                }
                while (__stlxr(v338, v4));
                if (!v338)
                {
                  atomic_store(1u, v4);
                  v351 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v351 = off_1E31FE290;
                  *(_QWORD *)(v351 + 8) = v4;
                  v403.var0.var0.var0 = (Node *)v351;
                  WTF::ensureOnMainThread();
                  v352 = v403.var0.var0.var0;
                  v403.var0.var0.var0 = 0;
                  if (v352)
                    (*(void (**)(Node *))(*(_QWORD *)v352 + 8))(v352);
                }
                goto LABEL_746;
              }
              v342 = (WebCore::LocalFrame *)v2;
              v343 = *((_DWORD *)v397 + 1);
              v67 = v343 != 0;
              if (v343)
              {
                (*(void (**)(_QWORD, uint64_t, WebCore::Pasteboard *))(**((_QWORD **)v7 + 1) + 8))(*((_QWORD *)v7 + 1), 4, v6);
                WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v386, (const WTF::String *)&v397);
                v344 = v392;
                if ((v392 & 1) == 0)
                {
                  WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v386);
                  v344 = v392 | 1;
                  v392 |= 1u;
                }
                if ((v391 & 4) != 0)
                {
                  v391 &= ~4u;
                  v392 = v344 & 0xFD;
                }
                v385 = 0;
                v383 = 0u;
                v384 = 0u;
                memset(v382, 0, sizeof(v382));
                v380 = 0u;
                v381 = 0u;
                v378 = 0u;
                v379 = 0u;
                memset(v377, 0, sizeof(v377));
                *(_OWORD *)v375 = 0u;
                v376 = 0u;
                *(_OWORD *)v374 = 0u;
                WTF::URL::invalidate((WTF::URL *)&v374[1]);
                *(_QWORD *)&v377[0] = 0;
                WTF::URL::invalidate((WTF::URL *)v377);
                LOBYTE(v378) = 0;
                WORD4(v378) = 0;
                memset((char *)&v377[2] + 8, 0, 81);
                v379 = vdupq_n_s64(0x7FF8000000000000uLL);
                v380 = v379;
                v381 = 0uLL;
                *(int64x2_t *)((char *)v382 + 8) = v379;
                *(_QWORD *)&v382[0] = 0x8000000000000000;
                *((_QWORD *)&v382[1] + 1) = 0x7FF8000000000000;
                LOBYTE(v383) = v383 & 0xF0;
                WORD4(v383) &= 0xC000u;
                BYTE10(v383) = BYTE10(v383) & 0xF8 | 2;
                *(_QWORD *)&v384 = 0;
                BYTE8(v384) = 0;
                BYTE10(v378) = BYTE10(v378) & 0xC0 | 5;
                LOBYTE(v385) = 1;
                WebCore::FrameLoadRequest::FrameLoadRequest((WebCore::FrameLoadRequest *)&v403, v342, (const WebCore::ResourceRequest *)&v386, (unsigned int **)v374);
                WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)v374, v345);
                v415 = shouldOpenExternalURLsPolicyToPropagate;
                v416 = 1;
                v346 = (_DWORD *)*((_QWORD *)v342 + 35);
                ++*v346;
                WebCore::FrameLoader::load((uint64_t)v346, (uint64_t)&v403);
                if (!*v346)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195F88830);
                }
                --*v346;
                WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)&v403, v347);
                WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v386, v348);
                v336 = v397;
                v397 = 0;
                if (!v336)
                  goto LABEL_737;
              }
              else
              {
                v397 = 0;
              }
              if (*(_DWORD *)v336 == 2)
                WTF::StringImpl::destroy(v336, (WTF::StringImpl *)v81);
              else
                *(_DWORD *)v336 -= 2;
              goto LABEL_744;
            }
            *((_DWORD *)v168 + 6) -= 2;
LABEL_729:
            v73 = v371;
            goto LABEL_730;
          }
LABEL_347:
          v133 = 1;
          goto LABEL_722;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x195F8730CLL);
    }
LABEL_402:
    if ((_DWORD)v11)
      goto LABEL_119;
    goto LABEL_148;
  }
  LODWORD(v11) = 0;
  if (!v9)
    goto LABEL_146;
LABEL_118:
  *(_DWORD *)(v8 + 24) = v9;
  if ((v11 & 1) == 0)
    goto LABEL_148;
LABEL_119:
  if (*((_DWORD *)v7 + 30))
  {
    v198 = *((unsigned int *)v7 + 31);
    v199 = (WTF *)*((_QWORD *)v7 + 14);
    if ((_DWORD)v198)
    {
      v200 = 8 * v198;
      do
      {
        v201 = *(_QWORD *)v199;
        *(_QWORD *)v199 = 0;
        if (v201)
        {
          if (*(_DWORD *)(v201 + 24) == 2)
          {
            if ((*(_WORD *)(v201 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v201, a2);
          }
          else
          {
            *(_DWORD *)(v201 + 24) -= 2;
          }
        }
        v199 = (WTF *)((char *)v199 + 8);
        v200 -= 8;
      }
      while (v200);
      *((_DWORD *)v7 + 31) = 0;
      v199 = (WTF *)*((_QWORD *)v7 + 14);
    }
    if (v199)
    {
      *((_QWORD *)v7 + 14) = 0;
      *((_DWORD *)v7 + 30) = 0;
      WTF::fastFree(v199, a2);
    }
  }
  if (*((_BYTE *)v7 + 160))
  {
    v62 = *((_QWORD *)v7 + 18);
    *((_QWORD *)v7 + 18) = 0;
    if (v62)
    {
      if (*(_DWORD *)(v62 + 24) == 2)
      {
        if ((*(_WORD *)(v62 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v62, a2);
      }
      else
      {
        *(_DWORD *)(v62 + 24) -= 2;
      }
    }
    v63 = *((_QWORD *)v7 + 16);
    *((_QWORD *)v7 + 16) = 0;
    if (v63)
    {
      if (*(_DWORD *)(v63 + 24) == 2)
      {
        if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v63, a2);
      }
      else
      {
        *(_DWORD *)(v63 + 24) -= 2;
      }
    }
    *((_BYTE *)v7 + 160) = 0;
  }
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v7 + 2);
  v64 = *(WebCore::DragCaretController **)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 56);
  *(_QWORD *)&v403.var0.var1 = 0;
  v403.var0.var0.var0 = 0;
  *(_QWORD *)&v403.var1 = 1;
  WebCore::DragCaretController::setCaretPosition(v64, &v403);
  v66 = v403.var0.var0.var0;
  v403.var0.var0.var0 = 0;
  if (v66)
  {
    if (*((_DWORD *)v66 + 6) == 2)
    {
      if ((*((_WORD *)v66 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v66, v65);
    }
    else
    {
      *((_DWORD *)v66 + 6) -= 2;
    }
  }
  return 1;
}

