WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Span>(unint64_t a1, WebCore::ContainerNode *a2)
{
  WTF::StringImpl **v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  uint8x16_t v14;
  __int8 *v15;
  int64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::TreeScope *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  _BOOL4 v28;
  WTF::StringImpl *result;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  const WebCore::Style::RuleSet *v38;
  WTF::String *v39;
  WebCore::Node *v40;
  WTF::StringImpl *v41;

  v4 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  do
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 0x8000000000000000) != 0)
    {
LABEL_63:
      __break(1u);
LABEL_64:
      WTF::String::String();
      goto LABEL_16;
    }
    v6 = *(WTF::StringImpl **)(a1 + 16);
    v7 = (int8x16_t *)((char *)v6 + v5);
    v8 = (int8x16_t *)v6;
    if (v5 < 0x10)
    {
      v15 = *(__int8 **)(a1 + 16);
      if (!v5)
        goto LABEL_49;
      while (1)
      {
        v30 = *v15;
        v31 = v30 > 0x3C;
        v32 = (1 << v30) & 0x1000004000002001;
        v33 = v31 || v32 == 0;
        if (!v33)
          break;
        ++v15;
        if (!--v5)
          goto LABEL_49;
      }
    }
    else
    {
      do
      {
        v9.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v9.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v10 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(*v8, v9));
        v11 = vceqq_s8(v10, *v8);
        v10.i8[0] = vmaxvq_u8((uint8x16_t)v11);
        if (v10.i32[0])
          goto LABEL_7;
        v12 = v8 + 1;
        v13 = (int8x16_t *)((char *)v8++ + 31);
      }
      while (v13 < v7);
      if (v12 >= v7)
      {
LABEL_49:
        v15 = (__int8 *)v7;
        goto LABEL_8;
      }
      v8 = v7 - 1;
      v35 = v7[-1];
      v36.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v36.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v37 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v35, v36));
      v11 = vceqq_s8(v37, v35);
      v37.i8[0] = vmaxvq_u8((uint8x16_t)v11);
      v15 = (__int8 *)v7;
      if (v37.i32[0])
      {
LABEL_7:
        v14 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v11);
        v14.i8[0] = vminvq_u8(v14);
        v15 = &v8->i8[v14.u32[0]];
      }
    }
LABEL_8:
    v16 = (char *)v7 - v15;
    if ((char *)v7 - v15 < 0)
      goto LABEL_63;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v16;
    if (v15 == (__int8 *)v7)
    {
LABEL_13:
      if (((_DWORD)v15 - (_DWORD)v6) < 0x10000)
      {
        if ((_DWORD)v15 != (_DWORD)v6)
          goto LABEL_64;
        goto LABEL_15;
      }
      if (!*(_BYTE *)(a1 + 32))
      {
        v34 = 25;
LABEL_54:
        *(_BYTE *)(a1 + 32) = v34;
      }
LABEL_15:
      v41 = 0;
      goto LABEL_16;
    }
    v17 = *v15;
    if (!*v15)
    {
      if (!*(_BYTE *)(a1 + 32))
      {
        v34 = 7;
        goto LABEL_54;
      }
      goto LABEL_15;
    }
    if (v17 != 13 && v17 != 38)
      goto LABEL_13;
    if (&v15[v16] - (__int8 *)v6 < 0)
      goto LABEL_63;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = &v15[v16] - (__int8 *)v6;
    WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v41, a1);
LABEL_16:
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_31;
    if (v41)
    {
      if ((*((_BYTE *)a2 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v41, (uint64_t *)&v40);
        WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v40, v38, v39);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v40);
      }
      else
      {
        v18 = *(_QWORD *)a1;
        v19 = bmalloc::api::isoAllocate();
        v22 = v19;
        *(_OWORD *)(v19 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v19 + 24) = 0x300300000002;
        *(_QWORD *)(v19 + 32) = 0;
        *(_QWORD *)(v19 + 40) = v18 + 96;
        *(_OWORD *)(v19 + 48) = 0u;
        *(_OWORD *)(v19 + 64) = 0u;
        ++*(_DWORD *)(v18 + 3324);
        v23 = v41;
        if (v41 || (v23 = *v4) != 0)
          *(_DWORD *)v23 += 2;
        *(_QWORD *)(v19 + 80) = v23;
        *(_QWORD *)v19 = off_1E33A8078;
        WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, (WebCore::Node *)v19, v20, v21);
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
      }
    }
    v24 = *(_QWORD *)(a1 + 24);
    if (!v24)
      goto LABEL_31;
    v25 = v24 - 1;
    v33 = v24 == 1;
    v26 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 1);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v25;
    if (!v33 && *v26 == 47)
      goto LABEL_31;
    v27 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v27;
    if (v27 == 512)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 24;
LABEL_31:
      v28 = 1;
      goto LABEL_32;
    }
    WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(&v40, a1, a2);
    --*(_DWORD *)(a1 + 36);
    v28 = *(_BYTE *)(a1 + 32) != 0;
    if (v40)
    {
      if (*((_DWORD *)v40 + 6) == 2)
      {
        if ((*((_WORD *)v40 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v40);
      }
      else
      {
        *((_DWORD *)v40 + 6) -= 2;
      }
    }
LABEL_32:
    result = v41;
    v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  while (!v28);
  return result;
}

void WebCore::HTMLDocumentParser::executeScriptsWaitingForStylesheets(WebCore::HTMLDocumentParser *this)
{
  WebCore::HTMLScriptRunner *v2;
  void *v3;
  _QWORD *v4;
  _BOOL4 v5;
  uint64_t v6;

  v2 = (WebCore::HTMLScriptRunner *)*((_QWORD *)this + 409);
  if (*((_BYTE *)v2 + 60))
  {
    ++*((_DWORD *)this + 2);
    WebCore::HTMLScriptRunner::executeParsingBlockingScripts(v2);
    v4 = (_QWORD *)*((_QWORD *)this + 410);
    if (v4[2])
      goto LABEL_8;
    v5 = v4[37] || v4[39] != 0;
    v6 = *((_QWORD *)this + 409);
    if (v6)
      LODWORD(v6) = *(_QWORD *)(v6 + 16) != 0;
    if (((v5 | v6) & 1) == 0)
LABEL_8:
      WebCore::HTMLDocumentParser::resumeParsingAfterScriptExecution(this, v3);
    if (*((_DWORD *)this + 2) == 1)
      (*(void (**)(WebCore::HTMLDocumentParser *))(*(_QWORD *)this + 8))(this);
    else
      --*((_DWORD *)this + 2);
  }
}

void WebCore::HTMLDocumentParser::resumeParsingAfterScriptExecution(WebCore::HTMLDocumentParser *this, void *a2)
{
  WebCore::HTMLPreloadScanner *v3;
  WTF *v4;
  void *v5;
  unsigned int v6;
  _QWORD *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  ++*((_DWORD *)this + 2);
  v3 = (WebCore::HTMLPreloadScanner *)*((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = 0;
  if (v3)
  {
    WebCore::HTMLPreloadScanner::~HTMLPreloadScanner(v3, a2);
    WTF::fastFree(v4, v5);
  }
  v6 = *((unsigned __int8 *)this + 12);
  if (v6 > 1)
  {
LABEL_12:
    if (v6 == 3)
      goto LABEL_14;
    goto LABEL_13;
  }
  v7 = (_QWORD *)*((_QWORD *)this + 410);
  if (v7[2])
    goto LABEL_45;
  if (v7[37])
    v8 = 1;
  else
    v8 = v7[39] != 0;
  v9 = *((_QWORD *)this + 409);
  if (v9)
    LODWORD(v9) = *(_QWORD *)(v9 + 16) != 0;
  if (((v8 | v9) & 1) == 0)
  {
LABEL_45:
    v10 = *((_QWORD *)this + 413);
    if (!v10
      || !*(_BYTE *)(v10 + 72)
      && ((*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      && !*(_BYTE *)(v10 + 73))
    {
      WebCore::HTMLDocumentParser::pumpTokenizer((uint64_t)this, 0);
      v6 = *((unsigned __int8 *)this + 12);
      goto LABEL_12;
    }
  }
LABEL_13:
  if (*((_BYTE *)this + 3328) && !*((_DWORD *)this + 833))
  {
    v11 = (_QWORD *)*((_QWORD *)this + 410);
    if (v11[2])
      goto LABEL_27;
    if (v11[37])
      v12 = 1;
    else
      v12 = v11[39] != 0;
    v13 = *((_QWORD *)this + 409);
    if (v13)
      LODWORD(v13) = *(_QWORD *)(v13 + 16) != 0;
    if (((v12 | v13) & 1) == 0)
    {
LABEL_27:
      v14 = *((_QWORD *)this + 413);
      if (!v14
        || !*(_BYTE *)(v14 + 72)
        && ((*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        && !*(_BYTE *)(v14 + 73))
      {
        v15 = *((_QWORD *)this + 409);
        if (!v15 || !*(_DWORD *)(v15 + 56))
        {
          *((_BYTE *)this + 3328) = 0;
          WebCore::HTMLDocumentParser::prepareToStopParsing(this, (WTF::StringImpl *)a2);
        }
      }
    }
  }
LABEL_14:
  if (*((_DWORD *)this + 2) == 1)
    (*(void (**)(WebCore::HTMLDocumentParser *))(*(_QWORD *)this + 8))(this);
  else
    --*((_DWORD *)this + 2);
}

uint64_t WebCore::EventLoopTaskGroup::performMicrotaskCheckpoint(uint64_t this)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _BYTE *v6;
  unsigned int v7;
  _QWORD *v8;
  WTF **v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  unsigned int v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  _QWORD *v57;
  WTF *v58;
  uint64_t v59;
  char v60[8];

  v1 = *(_QWORD *)(this + 16);
  if (!v1)
    return this;
  v2 = *(_DWORD **)(v1 + 8);
  if (!v2)
    return this;
  ++v2[2];
  this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
  if (*(_BYTE *)this)
    goto LABEL_4;
  v3 = this;
  *(_BYTE *)this = 1;
  v4 = *(_QWORD *)(this + 24);
  v5 = (_QWORD *)(v4 + 93432);
  v6 = (_BYTE *)(v4 + 41452);
  do
    v7 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v7 + 1, (unsigned int *)v4));
  MEMORY[0x19AEA3294](v60, v4);
  v58 = 0;
  v59 = 0;
  v9 = (WTF **)(v3 + 8);
LABEL_10:
  v10 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v10)
  {
    if (!*(_BYTE *)(v4 + 93442))
    {
      v11 = 0;
      v12 = *v9;
      v13 = 8 * v10;
      *v9 = 0;
      *(_QWORD *)(v3 + 16) = 0;
      while (1)
      {
        v8 = (_QWORD *)((char *)v12 + v11);
        v14 = *(_QWORD **)((char *)v12 + v11);
        v15 = v14[2];
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 8);
          if (v16)
          {
            v17 = *(unsigned __int8 *)(v16 + 40);
            if (v17 != 3)
            {
              if (v17 == 1)
              {
                v54 = HIDWORD(v59);
                if (HIDWORD(v59) == (_DWORD)v59)
                {
                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v58, (unint64_t)v8);
                }
                else
                {
                  v55 = v58;
                  *v8 = 0;
                  *((_QWORD *)v55 + v54) = v14;
                  HIDWORD(v59) = v54 + 1;
                }
              }
              else
              {
                (*(void (**)(_QWORD *))(*v14 + 16))(v14);
                v18 = *(_QWORD *)(v4 + 16);
                if (v18 && *(_QWORD *)(v4 + 24) == v18)
                {
LABEL_20:
                  v19 = 0;
                  do
                  {
                    v20 = *(_QWORD *)((char *)v12 + v19);
                    *(_QWORD *)((char *)v12 + v19) = 0;
                    if (v20)
                      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
                    v19 += 8;
                  }
                  while (v13 != v19);
                  if (v12)
                    WTF::fastFree(v12, v8);
                  goto LABEL_10;
                }
                JSC::VM::clearException((JSC::VM *)v4);
              }
            }
          }
        }
        v11 += 8;
        if (v13 == v11)
          goto LABEL_20;
      }
    }
    ++*v5;
    *v6 = 0;
    v37 = *v9;
    v38 = 8 * v10;
    do
    {
      v39 = *(_QWORD *)v37;
      *(_QWORD *)v37 = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      v37 = (WTF *)((char *)v37 + 8);
      v38 -= 8;
    }
    while (v38);
  }
  else
  {
    ++*v5;
    *v6 = 0;
  }
  v21 = *v9;
  if (*v9)
  {
    *(_QWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 16) = 0;
    WTF::fastFree(v21, v8);
  }
  *(_QWORD *)(v3 + 8) = v58;
  v22 = v59;
  v58 = 0;
  v59 = 0;
  *(_QWORD *)(v3 + 16) = v22;
  if (*(_BYTE *)(v4 + 93442))
    goto LABEL_34;
  v23 = *(WTF **)(v3 + 40);
  v24 = *(unsigned int *)(v3 + 52);
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  if (!(_DWORD)v24)
    goto LABEL_32;
  v42 = 8 * v24;
  v43 = 8 * v24;
  v44 = v23;
  v45 = (unint64_t)v23;
  do
  {
    v46 = *(_QWORD *)v45;
    v47 = *(_QWORD *)(*(_QWORD *)v45 + 16);
    if (!v47)
      goto LABEL_69;
    v48 = *(_QWORD *)(v47 + 8);
    if (!v48)
      goto LABEL_69;
    v49 = *(unsigned __int8 *)(v48 + 40);
    if (v49 == 3)
      goto LABEL_69;
    if (v49 == 1)
    {
      v50 = *(unsigned int *)(v3 + 52);
      if ((_DWORD)v50 == *(_DWORD *)(v3 + 48))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(v3 + 40, v45);
      }
      else
      {
        v56 = *(_QWORD *)(v3 + 40);
        *(_QWORD *)v45 = 0;
        *(_QWORD *)(v56 + 8 * v50) = v46;
        *(_DWORD *)(v3 + 52) = v50 + 1;
      }
      goto LABEL_69;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
    v51 = *(_QWORD *)(v4 + 16);
    if (v51)
    {
      if (*(_QWORD *)(v4 + 24) == v51)
        break;
    }
    JSC::VM::clearException((JSC::VM *)v4);
LABEL_69:
    v45 += 8;
    v43 -= 8;
  }
  while (v43);
  v52 = v44;
  do
  {
    v53 = *(_QWORD *)v52;
    *(_QWORD *)v52 = 0;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    v52 = (WTF *)((char *)v52 + 8);
    v42 -= 8;
    v23 = v44;
  }
  while (v42);
LABEL_32:
  if (v23)
    WTF::fastFree(v23, v8);
LABEL_34:
  v25 = *(_QWORD *)(v3 + 32);
  if (v25)
    v26 = *(_QWORD *)(v25 + 8);
  else
    v26 = 0;
  ++*(_DWORD *)(v26 + 8);
  do
    v27 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v27 + 1, (unsigned int *)v4));
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v28 = &off_1E33A5A30;
  v28[1] = v4;
  v57 = v28;
  WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((_QWORD *)(v26 + 104), &v57);
  v30 = v57;
  v57 = 0;
  if (v30)
    (*(void (**)(_QWORD *))(*v30 + 8))(v30);
  if (*(_DWORD *)(v26 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  else
    --*(_DWORD *)(v26 + 8);
  if (HIDWORD(v59))
  {
    v31 = v58;
    v32 = 8 * HIDWORD(v59);
    do
    {
      v33 = *(_QWORD *)v31;
      *(_QWORD *)v31 = 0;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      v31 = (WTF *)((char *)v31 + 8);
      v32 -= 8;
    }
    while (v32);
  }
  v34 = v58;
  if (v58)
  {
    v58 = 0;
    LODWORD(v59) = 0;
    WTF::fastFree(v34, v29);
  }
  this = MEMORY[0x19AEA32A0](v60);
  do
  {
    v35 = __ldaxr((unsigned int *)v4);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, (unsigned int *)v4));
  if (!v36)
  {
    atomic_store(1u, (unsigned int *)v4);
    v40 = (WTF *)MEMORY[0x19AEA3AF8](v4);
    this = WTF::fastFree(v40, v41);
  }
  *(_BYTE *)v3 = 0;
LABEL_4:
  if (v2[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  --v2[2];
  return this;
}

uint64_t WebCore::EventLoopTaskGroup::scheduleTask@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>, double a7@<D0>)
{
  uint64_t *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  if (*(_BYTE *)(result + 40) != 3
    && (v8 = (uint64_t *)result, (v9 = *(_QWORD *)(result + 16)) != 0)
    && (v10 = *(_DWORD **)(v9 + 8)) != 0)
  {
    ++v10[2];
    v16 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v16 = off_1E33A0990;
    *(_BYTE *)(v16 + 8) = a4;
    v17 = *v8;
    if (*v8)
      goto LABEL_20;
    v17 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = v8;
    v21 = (unsigned int *)*v8;
    *v8 = v17;
    if (!v21)
      goto LABEL_20;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v20);
    }
    v17 = *v8;
    if (*v8)
    {
LABEL_20:
      do
        v18 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v18 + 1, (unsigned int *)v17));
    }
    *(_QWORD *)(v16 + 16) = v17;
    *(_QWORD *)v16 = off_1E33A4C70;
    v19 = *a5;
    *a5 = 0;
    *(_QWORD *)(v16 + 24) = v19;
    v24 = v16;
    WebCore::EventLoop::scheduleTask((uint64_t)v10, a2, a3, &v24, a6, a7);
    result = v24;
    if (v24)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (v10[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  else
  {
    *a6 = 0;
  }
  return result;
}

uint64_t WebCore::jsEventTargetCast(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _BOOL4 v4;
  char **v5;
  BOOL v6;
  uint64_t result;
  uint64_t Object;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  BOOL v17;
  char **v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char **v23;
  BOOL v24;
  uint64_t v26;
  _BOOL4 v27;
  char **v28;
  BOOL v29;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSEventTarget::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSEventTarget::s_info && v5 != 0);
  }
  if (v4)
    return *(_QWORD *)(a2 + 24);
  Object = JSC::JSCell::getObject((JSC::JSCell *)a2);
  if (Object)
  {
    v10 = Object;
    if (*(_BYTE *)(Object + 5) == 32)
    {
      v10 = *(_QWORD *)(Object + 16);
      v16 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
      v17 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
      v18 = (char **)(16 * v16);
      if ((_DWORD)v16)
        v19 = v18 == &WebCore::JSDOMWindow::s_info;
      else
        v19 = 1;
      if (!v19)
      {
        do
        {
          v18 = (char **)v18[2];
          v17 = v18 != 0;
        }
        while (v18 != &WebCore::JSDOMWindow::s_info && v18 != 0);
      }
      if (v17)
        return *(_QWORD *)(v10 + 3408);
    }
    else
    {
      v11 = *(unsigned int *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C);
      v12 = *(_DWORD *)(16 * (*(_DWORD *)Object & 0xFFFFFFFE) + 0x4C) != 0;
      v13 = (char **)(16 * v11);
      if ((_DWORD)v11)
        v14 = v13 == &WebCore::JSDOMWindow::s_info;
      else
        v14 = 1;
      if (!v14)
      {
        do
        {
          v13 = (char **)v13[2];
          v12 = v13 != 0;
        }
        while (v13 != &WebCore::JSDOMWindow::s_info && v13 != 0);
      }
      if (v12)
        return *(_QWORD *)(v10 + 3408);
    }
  }
  result = JSC::JSCell::getObject((JSC::JSCell *)a2);
  v20 = result;
  if (result)
  {
    if (*(_BYTE *)(result + 5) == 32)
    {
      v20 = *(_QWORD *)(result + 16);
      v21 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
      v22 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
      v23 = (char **)(16 * v21);
      if ((_DWORD)v21)
        v24 = v23 == &WebCore::JSWorkerGlobalScope::s_info;
      else
        v24 = 1;
      if (!v24)
      {
        do
        {
          v23 = (char **)v23[2];
          v22 = v23 != 0;
        }
        while (v23 != &WebCore::JSWorkerGlobalScope::s_info && v23 != 0);
      }
      if (v22)
        return *(_QWORD *)(v20 + 3400) + 320;
    }
    else
    {
      v26 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
      v27 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
      v28 = (char **)(16 * v26);
      if ((_DWORD)v26)
        v29 = v28 == &WebCore::JSWorkerGlobalScope::s_info;
      else
        v29 = 1;
      if (!v29)
      {
        do
        {
          v28 = (char **)v28[2];
          v27 = v28 != 0;
        }
        while (v28 != &WebCore::JSWorkerGlobalScope::s_info && v28 != 0);
      }
      if (v27)
        return *(_QWORD *)(v20 + 3400) + 320;
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::addImpureProperty(WebCore *this, const WTF::AtomString *a2)
{
  uint64_t v4;

  if (WebCore::g_commonVMOrNull)
    return JSC::VM::addImpureProperty();
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  WebCore::g_commonVMOrNull = v4;
  if (__ldaxr((unsigned int *)(v4 + 1096)))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v4 + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)(v4 + 1096)))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v4 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v4 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v4, 0);
  return JSC::VM::addImpureProperty();
}

void WebCore::SubresourceLoader::didSendData(WebCore::SubresourceLoader *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WebCore::CachedResource *v7;
  void *v8;
  unsigned int *v9;

  ++*((_DWORD *)this + 4);
  v6 = *((_QWORD *)this + 166);
  if (v6)
    v7 = *(WebCore::CachedResource **)(v6 + 8);
  else
    v7 = 0;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v9, v7);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v9 + 1) + 168))(*((_QWORD *)v9 + 1), a2, a3);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v9, v8);
  if (*((_DWORD *)this + 4) == 1)
    (*(void (**)(WebCore::SubresourceLoader *))(*(_QWORD *)this + 8))(this);
  else
    --*((_DWORD *)this + 4);
}

void WebCore::RenderTreeBuilder::Table::collapseAndDestroyAnonymousSiblingRows(WebCore::RenderTreeBuilder::Table *this, const WebCore::RenderTableRow *a2)
{
  WebCore::RenderObject *v4;
  uint64_t v5;
  uint64_t Row;
  uint64_t v7;
  uint64_t v8;

  v4 = (WebCore::RenderObject *)WebCore::RenderTableRow::section(a2);
  v5 = WebCore::RenderTableRow::previousRow(a2);
  Row = WebCore::RenderTableRow::nextRow(a2);
  WebCore::RenderTreeBuilder::Table::collapseAndDetachAnonymousNextSibling<WebCore::RenderTableSection,WebCore::RenderTableRow>((uint64_t *)this, v4, v5, Row, &v8);
  v7 = v8;
  v8 = 0;
  if (v7)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v8, v7);
}

void WebCore::RenderTreeBuilder::Table::collapseAndDetachAnonymousNextSibling<WebCore::RenderTableSection,WebCore::RenderTableRow>(uint64_t *a1@<X0>, WebCore::RenderObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v10;
  WebCore::RenderTextFragment *v11;
  WebCore::SVGTextLayoutAttributes **v12;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  int v16;
  int v17;
  int v18;

  if (!a2
    || !a3
    || !a4
    || (v10 = *(unsigned int *)(a4 + 64) | ((unint64_t)*(unsigned __int8 *)(a4 + 68) << 32),
        (WebCore::canCollapseNextSibling((WebCore *)*(unsigned __int8 *)(a3 + 45), *(unsigned int *)(a3 + 64) | ((unint64_t)*(unsigned __int8 *)(a3 + 68) << 32), (const WebCore::RenderBox *)*(unsigned __int8 *)(a4 + 45), v10) & 1) == 0))
  {
    *a5 = 0;
    return;
  }
  if ((v10 & 0xFFFFFFFFFFLL) != 0)
    v11 = *(WebCore::RenderTextFragment **)((v10 & 0xFFFFFFFFFFLL) + 8);
  else
    v11 = 0;
  WebCore::RenderTreeBuilder::moveChildren(*a1, a4, (WebCore::RenderTable *)a3, v11, 0, 0, 0);
  if (!WebCore::RenderElement::firstInFlowChild((WebCore::RenderElement *)a3))
  {
    v18 = *(_DWORD *)(a3 + 20);
    v15 = (unsigned int *)(a3 + 20);
    v14 = v18;
    goto LABEL_13;
  }
  v13 = WebCore::RenderElement::firstInFlowChild((WebCore::RenderElement *)a3);
  v16 = *(_DWORD *)(a3 + 20);
  v15 = (unsigned int *)(a3 + 20);
  v14 = v16;
  if ((*(_DWORD *)(v13 + 20) & 1) == 0)
  {
LABEL_13:
    v17 = 0x40000;
    goto LABEL_14;
  }
  v17 = 0;
LABEL_14:
  *v15 = v17 | v14 & 0xFFFBFFFF;
  WebCore::RenderTreeBuilder::detach(a5, a2, (uint64_t **)a4, (uint64_t *)*a1, 1, 1, v12);
}

unint64_t WebCore::JSWorkerPrototype::create(WebCore::JSWorkerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSWorkerPrototype::finishCreation((WebCore::JSWorkerPrototype *)v6, this);
  return v6;
}

WTF::StringImpl *WebCore::JSWorkerPrototype::finishCreation(WebCore::JSWorkerPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(a2, (uint64_t)&WebCore::JSWorker::s_info, &WebCore::JSWorkerPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSWebKitNamespace::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF::StringImpl *WebCore::HistoryController::updateForRedirectWithLockedBackForwardList(WTF::StringImpl *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  const WTF::String *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int v19;
  _DWORD *v20;
  WebCore::HistoryItem *v21;
  unsigned int v22;
  unsigned int v23;
  WebCore::HistoryItem *v24;
  char v25;
  uint64_t v26;
  WebCore::Page *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40[5];
  WebCore::HistoryItem *v41;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (!v1 || *(_BYTE *)(v1 + 144))
    return this;
  v2 = (uint64_t)this;
  v3 = (unsigned int *)(v1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 280) + 88);
  if (v5)
    ++*(_DWORD *)(v5 + 24);
  v6 = *(_QWORD *)(v1 + 24);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = *(_QWORD *)(v7 + 1008);
    v9 = v8 < 0 && v8 != -1;
  }
  else
  {
    v9 = 1;
  }
  if (!v5)
  {
    v40[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v40);
    goto LABEL_15;
  }
  WebCore::DocumentLoader::urlForHistory((WebCore::DocumentLoader *)v5, (uint64_t)v40);
  if (!*(_BYTE *)(v5 + 3540))
  {
LABEL_15:
    v10 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
    v11 = *(_QWORD *)(v10 + 24);
    if (v11)
    {
      v12 = *(uint64_t **)(v11 + 8);
      if (v12)
      {
        v13 = 0;
        ++*(_DWORD *)v12;
        goto LABEL_18;
      }
    }
    else
    {
      v12 = 0;
    }
    v13 = 1;
LABEL_18:
    this = (WTF::StringImpl *)WebCore::FrameTree::parent((WebCore::FrameTree *)(v10 + 48));
    if (this && !*((_BYTE *)this + 144))
    {
      v18 = (unsigned int *)((char *)this + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      if (v12)
      {
        v20 = *(_DWORD **)(*((_QWORD *)this + 23) + 16);
        if (v20)
        {
          ++*v20;
          WebCore::HistoryController::createItem((uint64_t *)&v41, v2, v12[228]);
          WebCore::HistoryItem::setChildItem((uint64_t)v20, (unint64_t)&v41);
          v21 = v41;
          v41 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
            {
              WebCore::HistoryItem::~HistoryItem(v21);
              WTF::fastFree(v36, v37);
            }
            else
            {
              --*(_DWORD *)v21;
            }
          }
          this = (WTF::StringImpl *)WTF::RefCounted<WebCore::HistoryItem>::deref(v20);
        }
      }
      do
      {
        v22 = __ldaxr(v18);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v18));
      if (!v23)
      {
        atomic_store(1u, v18);
        v24 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v24 = off_1E31FE290;
        *((_QWORD *)v24 + 1) = v18;
        v41 = v24;
        WTF::ensureOnMainThread();
        this = v41;
        v41 = 0;
        if (this)
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
      }
    }
    if ((v13 & 1) == 0)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::Page::~Page((WebCore::Page *)v12);
        this = (WTF::StringImpl *)WTF::fastFree(v32, v33);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
    goto LABEL_23;
  }
  if (!*(_QWORD *)(v2 + 16) && !WebCore::FrameTree::parent((WebCore::FrameTree *)(v1 + 48)))
  {
    if (v40[0])
    {
      if (*((_DWORD *)v40[0] + 1))
      {
        WebCore::HistoryController::updateBackForwardListClippedAtTarget((int *)v2, (WTF::StringImpl *)1);
        if (!v9)
        {
          v38 = *(_QWORD *)(v1 + 280);
          ++*(_DWORD *)v38;
          (*(void (**)(_QWORD))(**(_QWORD **)(v38 + 16) + 528))(*(_QWORD *)(v38 + 16));
          *(_BYTE *)(v5 + 3547) = 1;
          v39 = *(_QWORD *)(v5 + 368);
          if (!v39 || !*(_DWORD *)(v39 + 4))
            (*(void (**)(_QWORD))(**(_QWORD **)(v38 + 16) + 536))(*(_QWORD *)(v38 + 16));
          if (!*(_DWORD *)v38)
            goto LABEL_82;
          --*(_DWORD *)v38;
        }
      }
    }
  }
  this = (WTF::StringImpl *)WebCore::HistoryController::updateCurrentItem(v2);
LABEL_23:
  if (v40[0])
  {
    if (*((_DWORD *)v40[0] + 1))
      v25 = v9;
    else
      v25 = 1;
    if ((v25 & 1) != 0)
      goto LABEL_56;
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8) + 24);
    if (v26)
    {
      v27 = *(WebCore::Page **)(v26 + 8);
      if (v27)
      {
        ++*(_DWORD *)v27;
        v28 = *((_QWORD *)v27 + 119);
        v29 = WebCore::computeSharedStringHash((WebCore *)v40, v14);
        (*(void (**)(uint64_t, WebCore::Page *, uint64_t))(*(_QWORD *)v28 + 24))(v28, v27, v29);
        if (*(_DWORD *)v27 == 1)
        {
          WebCore::Page::~Page(v27);
          WTF::fastFree(v34, v35);
        }
        else
        {
          --*(_DWORD *)v27;
        }
      }
    }
    if (*(_BYTE *)(v5 + 3547))
      goto LABEL_56;
    v30 = *(_QWORD *)(v5 + 368);
    if (v30)
    {
      if (*(_DWORD *)(v30 + 4))
        goto LABEL_56;
    }
    v31 = *(_QWORD *)(v1 + 280);
    ++*(_DWORD *)v31;
    (*(void (**)(_QWORD))(**(_QWORD **)(v31 + 16) + 536))(*(_QWORD *)(v31 + 16));
    if (*(_DWORD *)v31)
    {
      --*(_DWORD *)v31;
LABEL_56:
      this = v40[0];
      v40[0] = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v14);
        else
          *(_DWORD *)this -= 2;
      }
      goto LABEL_24;
    }
LABEL_82:
    __break(0xC471u);
    JUMPOUT(0x19459699CLL);
  }
LABEL_24:
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 1)
      this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    else
      --*(_DWORD *)(v5 + 24);
  }
  do
  {
    v15 = __ldaxr(v3);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v3));
  if (!v16)
  {
    atomic_store(1u, v3);
    v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v17 = off_1E31FE290;
    *((_QWORD *)v17 + 1) = v3;
    v40[0] = v17;
    WTF::ensureOnMainThread();
    this = v40[0];
    v40[0] = 0;
    if (this)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::HTMLSelectElement::updateListItemSelectedStates(uint64_t result)
{
  if (*(_BYTE *)(result + 300))
    return WebCore::HTMLSelectElement::recalcListItems();
  return result;
}

uint64_t WebCore::HTMLOptionElement::setSelectedState(uint64_t result, void *a2, int a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE v7[2];
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  char v12;
  unsigned __int8 *v13[2];

  if (*(unsigned __int8 *)(result + 113) != (_DWORD)a2)
  {
    v3 = (char)a2;
    v4 = result;
    v8[0] = 0;
    v12 = 0;
    if (a3)
    {
      v7[0] = 16;
      v7[1] = (_BYTE)a2;
      v13[0] = v7;
      v13[1] = (unsigned __int8 *)1;
      result = std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)v8, (void *)result, v13);
    }
    *(_BYTE *)(v4 + 113) = v3;
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      result = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(v4 + 40) + 8));
      if (result)
      {
        v5 = result;
        ++*(_DWORD *)(result + 8);
        result = (uint64_t)WebCore::AXObjectCache::onSelectedChanged((WebCore::AXObjectCache *)result, (WebCore::Node *)v4);
        v6 = *(_DWORD *)(v5 + 8);
        if (!v6)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        *(_DWORD *)(v5 + 8) = v6 - 1;
      }
    }
    if (v12)
    {
      if (v8[0])
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v9, &v11);
      if (v11)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v11, a2);
      result = v10;
      if (v10)
        return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v10, a2);
    }
  }
  return result;
}

uint64_t WebCore::HTMLIFrameElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x141C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = v7;
  *(_DWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_QWORD *)result = off_1E33C09B8;
  *(_QWORD *)(result + 144) = 0;
  *(_BYTE *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *a3 = result;
  return result;
}

BOOL WebCore::HTMLIFrameElement::shouldLoadFrameLazily(WebCore::HTMLIFrameElement *this)
{
  WebCore::Document *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Document *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v29;
  int v30;
  WebCore::LazyLoadFrameObserver *FrameObserver;
  WTF::StringImpl *v32;
  WebCore::IOSApplication *v33;
  WTF::StringImpl *v34;
  __int16 isUNIQLOApp;
  char v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  char v39;

  if (*((_QWORD *)this + 20))
    return 0;
  v2 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  if ((*(_QWORD *)(*((_QWORD *)v2 + 85) + 680) & 0x1000000000000) == 0)
    return 0;
  v3 = (_BYTE *)*((_QWORD *)v2 + 86);
  if (!v3)
    v3 = (_BYTE *)WebCore::Document::ensureQuirks(v2);
  if (*(_QWORD *)v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 680);
      if (*(_BYTE *)(v5 + 243))
      {
        if (!*(_BYTE *)(v5 + 242))
          goto LABEL_9;
      }
      else if ((*(_QWORD *)(v5 + 688) & 0x80000) == 0)
      {
        goto LABEL_9;
      }
      if (v3[64])
      {
        if (v3[63])
          return 0;
      }
      else
      {
        v33 = (WebCore::IOSApplication *)WTF::linkedOnOrAfterSDKWithBehavior();
        if ((_DWORD)v33)
        {
          *(_WORD *)(v3 + 63) = 256;
        }
        else
        {
          isUNIQLOApp = WebCore::IOSApplication::isUNIQLOApp(v33, v34);
          *(_WORD *)(v3 + 63) = isUNIQLOApp | 0x100;
          if ((isUNIQLOApp & 1) != 0)
            return 0;
        }
      }
    }
  }
LABEL_9:
  v6 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  if (v7)
    *(_DWORD *)v7 += 2;
  v37 = v7;
  WebCore::Document::completeURL(v6, &v37, (uint64_t)v6 + 848, 0, (WTF::URL *)&v38);
  v9 = v37;
  v37 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v11 = *((_QWORD *)this + 13);
  if (v11
    && ((v12 = *(_DWORD *)(v11 + 4), (v12 & 1) != 0)
      ? (v13 = *(_QWORD *)(v11 + 40), LODWORD(v14) = *(_DWORD *)(v11 + 52))
      : (v13 = v11 + 32, LODWORD(v14) = v12 >> 5),
        (_DWORD)v14))
  {
    v14 = v14;
    v15 = (uint64_t *)(v13 + 8);
    while (1)
    {
      v16 = *(v15 - 1);
      if (v16 == WebCore::HTMLNames::loadingAttr
        || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::loadingAttr + 24)
        && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::loadingAttr + 32))
      {
        break;
      }
      v15 += 2;
      if (!--v14)
      {
        v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  if ((v39 & 1) == 0)
    goto LABEL_35;
  if ((WTF::URL::isAboutBlank((WTF::URL *)&v38) & 1) != 0)
    goto LABEL_35;
  v17 = *(_QWORD *)(v10 + 528);
  if (!v17)
    goto LABEL_35;
  v18 = *(_QWORD *)(v17 + 8);
  if (!v18)
    goto LABEL_35;
  v19 = *(_QWORD **)(*(_QWORD *)(v18 + 304) + 16);
  v20 = v19[37];
  if (v20)
  {
    if ((*(_BYTE *)(v20 + 268) & 0x10) != 0)
      goto LABEL_35;
  }
  v21 = v19[3];
  if (!v21 || !*(_QWORD *)(v21 + 8))
    goto LABEL_35;
  v22 = *(_QWORD *)(v19[35] + 16);
  v23 = v19[17];
  v24 = *(_BYTE *)(v23 + 245) ? *(_BYTE *)(v23 + 244) != 0 : (*(_QWORD *)(v23 + 688) >> 52) & 1;
  if (!(*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)v22 + 968))(v22, v24))
    goto LABEL_35;
  v25 = *v15;
  if (!*v15 || *(_DWORD *)(v25 + 4) != 4)
    goto LABEL_35;
  v29 = *(_QWORD *)(v25 + 8);
  if ((*(_BYTE *)(v25 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v29 & 0xDF) != 0x4C || (*(_BYTE *)(v29 + 1) & 0xDF) != 0x41 || (*(_BYTE *)(v29 + 2) & 0xDF) != 0x5A)
      goto LABEL_35;
    v30 = *(unsigned __int8 *)(v29 + 3);
  }
  else
  {
    if ((*(_WORD *)v29 & 0xFFDF) != 0x4C
      || (*(_WORD *)(v29 + 2) & 0xFFDF) != 0x41
      || (*(_WORD *)(v29 + 4) & 0xFFDF) != 0x5A)
    {
      goto LABEL_35;
    }
    v30 = *(unsigned __int16 *)(v29 + 6);
  }
  if ((v30 & 0xFFFFFFDF) != 0x59)
  {
LABEL_35:
    v26 = 1;
    goto LABEL_36;
  }
  v36 = WebCore::HTMLIFrameElement::referrerPolicy(this);
  FrameObserver = (WebCore::LazyLoadFrameObserver *)WebCore::HTMLIFrameElement::lazyLoadFrameObserver(this);
  WTF::AtomString::AtomString((WTF::AtomString *)&v37, &v38);
  WebCore::LazyLoadFrameObserver::observe(FrameObserver, (WTF::StringImpl *)&v37, &v36);
  v32 = v37;
  v37 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v8);
    else
      *(_DWORD *)v32 -= 2;
  }
  v26 = 0;
LABEL_36:
  v27 = v38;
  v38 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v8);
    else
      *(_DWORD *)v27 -= 2;
  }
  return !v26;
}

double WebCore::HTMLIFrameElement::createElementRenderer@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double result;
  int v9;

  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 14, a1, a2, 12, 1027);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)&result = 0x258000004B00;
  *(_QWORD *)(v7 + 200) = 0x258000004B00;
  v9 = *(_DWORD *)(v7 + 20);
  *(_DWORD *)(v7 + 224) = 1;
  *(_QWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 248) = 0;
  *(_QWORD *)(v7 + 232) = 0;
  *(_DWORD *)(v7 + 20) = v9 | 3;
  *(_QWORD *)v7 = off_1E3427A00;
  *(_QWORD *)(v7 + 208) = 0;
  *(_QWORD *)(v7 + 216) = &unk_1E34280C0;
  *a3 = v7;
  return result;
}

uint64_t WebCore::HTMLIFrameElement::rendererIsNeeded(WebCore::HTMLIFrameElement *this, const WebCore::RenderStyle *a2)
{
  uint64_t v3;
  uint64_t canLoadURL;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8[5];

  if ((*((_QWORD *)a2 + 2) & 0x1FLL) == 0x1A)
    return 0;
  v3 = *((_QWORD *)this + 16);
  if (!v3 || !*(_DWORD *)(v3 + 4))
    return 1;
  WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), (_QWORD *)this + 16, *(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848, 0, (WTF::URL *)v8);
  canLoadURL = WebCore::HTMLFrameElementBase::canLoadURL(this, (const WTF::URL *)v8);
  v7 = v8[0];
  v8[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  return canLoadURL;
}

void WebCore::CachedRawResource::didSendData(WebCore::CachedRawResource *this, uint64_t a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;

  WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient>::CachedResourceClientWalker(&v16, (uint64_t)this);
LABEL_2:
  if (v17)
  {
    v7 = *v17;
    v8 = v18;
    if (v18 < v7)
    {
      do
      {
        v9 = v8 + 1;
        v18 = v8 + 1;
        if (*v17 <= v8)
          goto LABEL_18;
        v10 = v17 + 2;
        v11 = *(_QWORD *)&v17[2 * v8 + 2];
        if (v11)
        {
          v6 = *(void **)(v11 + 8);
          if (v6)
          {
            v12 = v16;
            if (v16)
              v12 = *(_QWORD *)(v16 + 8);
            if ((WTF::WeakHashCountedSet<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::contains((uint64_t *)(v12 + 360), (uint64_t)v6) & 1) != 0)
            {
              v13 = *(_QWORD *)(*(_QWORD *)&v10[2 * v8] + 8);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13) != 5)
              {
LABEL_18:
                __break(0xC471u);
                JUMPOUT(0x1945971DCLL);
              }
              v14 = *(_QWORD *)&v10[2 * v8];
              if (v14)
              {
                v15 = *(_QWORD *)(v14 + 8);
                if (v15)
                {
                  (*(void (**)(uint64_t, WebCore::CachedRawResource *, uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, this, a2, a3);
                  goto LABEL_2;
                }
              }
              break;
            }
            v9 = v18;
          }
        }
        v8 = v9;
      }
      while (v9 < v7);
    }
  }
  WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::~CachedResourceClientWalker((WebCore::CachedResourceHandleBase *)&v16, v6);
}

uint64_t WebCore::CachedImageClient::imageFrameAvailable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, a4);
  return 2;
}

BOOL WebCore::CSSPropertyParser::consumePrefixedPerspective(WebCore::CSSParserTokenRange **this, int a2)
{
  WTF::StringImpl *v4;
  int *v5;
  void *v6;
  double v7;
  _BOOL8 result;
  uint64_t v10;
  char v11;
  int *v12;
  int v13;
  void *v14;
  char v15;
  int *v16;
  int *v17;

  WebCore::CSSPropertyParsing::consumePerspective((WebCore::CSSPropertyParsing *)this, this[2], &v17);
  if (v17)
  {
    v16 = v17;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 198, 550, &v16, a2, 0);
    v5 = v16;
    if (!v16)
      return *this == this[1];
LABEL_17:
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v4);
    else
      *v5 -= 2;
    return *this == this[1];
  }
  v16 = 0;
  v17 = 0;
  v7 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve((__int128 **)this, (uint64_t *)&v17, (uint64_t)&v16, 0x10100000000));
  if (v16)
  {
    v14 = v6;
    WTF::fastFree((WTF *)(v16 - 4), v6);
    v6 = v14;
  }
  if (v17)
  {
    v15 = (char)v6;
    WTF::fastFree((WTF *)(v17 - 4), v6);
    LOBYTE(v6) = v15;
  }
  result = 0;
  if ((_BYTE)v6 && v7 >= 0.0)
  {
    if ((int)v7 <= 0xFF && *(_QWORD *)&v7 == COERCE__INT64((double)(int)v7))
    {
      v12 = &WebCore::staticCSSValuePool[4 * (int)v7];
      v13 = v12[16];
      v10 = (uint64_t)(v12 + 16);
      *(_DWORD *)v10 = v13 + 2;
    }
    else
    {
      v10 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v10 = 2;
      v11 = *(_BYTE *)(v10 + 6);
      *(_WORD *)(v10 + 4) = 6;
      *(_BYTE *)(v10 + 6) = v11 & 0xFC;
      *(double *)(v10 + 8) = v7;
    }
    v17 = (int *)v10;
    WebCore::CSSPropertyParser::addProperty((uint64_t)this, 198, 550, &v17, a2, 0);
    v5 = v17;
    if (!v17)
      return *this == this[1];
    goto LABEL_17;
  }
  return result;
}

void WebCore::CSSAnimationEvent::~CSSAnimationEvent(WebCore::CSSAnimationEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::StyleOriginatedAnimationEvent::~StyleOriginatedAnimationEvent(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::StyleOriginatedAnimationEvent::~StyleOriginatedAnimationEvent(this, a2);
}

float32_t WebCore::BackgroundPainter::clipRoundedInnerRect(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  float v18;
  BOOL v19;
  float32_t result;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float v25;
  unsigned int v26;
  unsigned int v27;
  float32x2_t v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  float32x2_t v32;
  float32x2_t v33;
  unint64_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;

  v7 = a3[2].f32[0];
  v6 = a3[2].f32[1];
  if (v7 < 0.0)
    goto LABEL_26;
  if (v6 < 0.0)
    goto LABEL_26;
  v8 = a3[4].f32[0];
  if (v8 < 0.0)
    goto LABEL_26;
  v9 = a3[4].f32[1];
  if (v9 < 0.0)
    goto LABEL_26;
  v10 = a3[3].f32[0];
  if (v10 < 0.0)
    goto LABEL_26;
  v11 = a3[3].f32[1];
  if (v11 < 0.0)
    goto LABEL_26;
  v12 = a3[5].f32[0];
  if (v12 < 0.0)
    goto LABEL_26;
  v13 = a3[5].f32[1];
  if (v13 < 0.0)
    goto LABEL_26;
  v14 = a3[1].f32[0];
  v15 = v8 + v12;
  v16 = (float)(v7 + v10) > v14 || v15 > v14;
  if (v16 || ((v17 = a3[1].f32[1], v18 = v11 + v13, (float)(v6 + v9) <= v17) ? (v19 = v18 > v17) : (v19 = 1), v19))
  {
LABEL_26:
    if (v7 > 0.0 && v6 > 0.0 || a3[5].f32[0] > 0.0 && a3[5].f32[1] > 0.0)
    {
      v21 = a3[2];
      v22 = vsub_f32(vadd_f32(*a2, a2[1]), *a3);
      v33 = *a3;
      v34 = (unint64_t)v22;
      v35 = v21;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a1 + 464))(a1, &v33);
      v23 = a3[5];
      v24 = vsub_f32(vadd_f32(*a3, a3[1]), *a2);
      v33 = *a2;
      v34 = (unint64_t)v24;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = v23;
      (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a1 + 464))(a1, &v33);
    }
    if (a3[3].f32[0] > 0.0 && a3[3].f32[1] > 0.0
      || (result = a3[4].f32[0], result > 0.0) && (result = a3[4].f32[1], result > 0.0))
    {
      v25 = a3->f32[1];
      *(float *)&v26 = (float)(a3->f32[0] + a3[1].f32[0]) - a2->f32[0];
      *(float *)&v27 = (float)(a2->f32[1] + a2[1].f32[1]) - v25;
      v28 = a3[3];
      v33.i32[0] = a2->i32[0];
      v33.f32[1] = v25;
      v34 = __PAIR64__(v27, v26);
      v35 = 0;
      v36 = v28;
      v37 = 0;
      v38 = 0;
      (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a1 + 464))(a1, &v33);
      v29 = a2->f32[1];
      *(float *)&v30 = (float)(a2->f32[0] + a2[1].f32[0]) - a3->f32[0];
      *(float *)&v31 = (float)(a3->f32[1] + a3[1].f32[1]) - v29;
      v32 = a3[4];
      v33.i32[0] = a3->i32[0];
      v33.f32[1] = v29;
      v34 = __PAIR64__(v31, v30);
      v35 = 0;
      v36 = 0;
      v37 = v32;
      v38 = 0;
      (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a1 + 464))(a1, &v33);
    }
  }
  else
  {
    (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a1 + 464))(a1, a3);
  }
  return result;
}

uint64_t *WebCore::VisitedLinkStore::invalidateStylesForAllLinks(WebCore::VisitedLinkStore *this)
{
  uint64_t *v1;
  uint64_t *result;
  uint64_t *v3[5];
  uint64_t *v4;
  uint64_t *v5;

  v1 = (uint64_t *)((char *)this + 16);
  WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)this + 2, &v4);
  result = WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v1, v3);
  while (v5 != v3[1])
  {
    WebCore::Page::invalidateStylesForAllLinks(*(WebCore::Page **)(*v5 + 8));
    result = WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v4);
  }
  return result;
}

WebCore::CachedResourceRequestInitiatorTypes **WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes(WebCore::CachedResourceRequestInitiatorTypes **this)
{
  WebCore::CachedResourceRequestInitiatorTypes *v2;
  WTF::StringImpl *v3;
  WebCore::CachedResourceRequestInitiatorTypes *v5;

  v2 = (WebCore::CachedResourceRequestInitiatorTypes *)WTF::fastMalloc((WTF *)0x30);
  v5 = (WebCore::CachedResourceRequestInitiatorTypes *)WebCore::CachedResourceRequestInitiatorTypes::CachedResourceRequestInitiatorTypes(v2);
  std::unique_ptr<WebCore::CachedResourceRequestInitiatorTypes>::operator=[abi:sn180100](this + 4, (WTF::StringImpl *)&v5);
  return std::unique_ptr<WebCore::CachedResourceRequestInitiatorTypes>::~unique_ptr[abi:sn180100](&v5, v3);
}

void WebCore::StyleCachedImage::~StyleCachedImage(unsigned int **this, void *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this + 6, a2);
  v4 = this[4];
  this[4] = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, v3);
    else
      *v4 -= 2;
  }
  v5 = this[2];
  if (v5)
  {
    *((_QWORD *)v5 + 1) = 0;
    v6 = this[2];
    this[2] = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v3);
      }
    }
  }
  else
  {
    this[2] = 0;
  }
  WTF::fastFree((WTF *)this, v3);
}

{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this + 6, a2);
  v4 = this[4];
  this[4] = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, v3);
    else
      *v4 -= 2;
  }
  v5 = this[2];
  if (v5)
  {
    *((_QWORD *)v5 + 1) = 0;
    v6 = this[2];
    this[2] = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v3);
      }
    }
  }
  else
  {
    this[2] = 0;
  }
}

void WebCore::SelectorCompiler::SelectorCodeGenerator::generateStoreLastVisitedElement(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_DWORD *)(a1 + 6880);
  v2 = *(_DWORD *)(a1 + 608);
  v3 = v2 >= v1;
  v4 = v2 - v1;
  if (v3)
    JSC::MacroAssemblerARM64::store64(a1 + 160, 0, (v4 << 32) | 0x1F);
  else
    __break(0xC471u);
}

void *WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNoNextAdjacentElement(WebCore::SelectorCompiler::SelectorCodeGenerator *this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE *v16;
  unsigned __int8 v17;

  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 2;
  v2 = *(_QWORD *)(a2 + 496);
  v3 = *(_QWORD *)(a2 + 504);
  v4 = *(unsigned int *)(a2 + 520);
  if (v2 <= v3)
    v5 = 0;
  else
    v5 = *(unsigned int *)(a2 + 520);
  if (v5 + v3 == v2)
  {
    __break(0xC471u);
    JUMPOUT(0x194597908);
  }
  if (v2 == v3)
  {
    __break(0xC471u);
    JUMPOUT(0x194597928);
  }
  v8 = (uint64_t *)(a2 + 496);
  v9 = *(_QWORD *)(a2 + 512);
  v10 = *(unsigned __int8 *)(v9 + v2);
  v17 = *(_BYTE *)(v9 + v2);
  if (v2 == v4 - 1)
    v11 = 0;
  else
    v11 = v2 + 1;
  *(_QWORD *)(a2 + 496) = v11;
  v12 = (_QWORD *)(a2 + 544);
  v13 = *(unsigned int *)(a2 + 556);
  if ((_DWORD)v13 == *(_DWORD *)(a2 + 552))
  {
    v16 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, (WTF *)(v13 + 1), (unint64_t)&v17);
    v13 = *(unsigned int *)(a2 + 556);
    *(_BYTE *)(*(_QWORD *)(a2 + 544) + v13) = *v16;
    v10 = v17;
  }
  else
  {
    *(_BYTE *)(*v12 + v13) = v10;
  }
  *(_DWORD *)(a2 + 556) = v13 + 1;
  if (v10)
  {
    if (v10 == 31)
    {
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 216), -1862270945);
    }
    else
    {
      v14 = *(_DWORD *)(a2 + 360);
      if (v14 + 4 > *(_DWORD *)(a2 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 216));
        v14 = *(_DWORD *)(a2 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 216) + v14) = v10 | 0xAA0003E0;
      *(_DWORD *)(a2 + 360) += 4;
    }
  }
  WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToNextAdjacentElement(a2, (uint64_t)this, v10);
  return WebCore::RegisterAllocator::deallocateRegister(v8, v10);
}

void WebCore::ScriptSourceCode::~ScriptSourceCode(unsigned int **this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;

  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this + 4, a2);
  v3 = this[1];
  this[1] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *this;
  *this = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
}

uint64_t WebCore::MutationObserver::deliver(WebCore::MutationObserver *this)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  void *v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::InspectorInstrumentation *v24;
  const WTF::String *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t *v30;
  unsigned int *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v39 = &v41;
  v40 = 1;
  v36 = &v38;
  v37 = 1;
  v2 = (uint64_t *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  v3 = (uint64_t *)((char *)this + 40);
  WTF::WeakHashSet<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v34, (uint64_t *)this + 5);
  WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end((uint64_t **)&v32, v3);
  v5 = v35;
  v6 = v33;
  while (v5 != v6)
  {
    v7 = *(unsigned int **)(*(_QWORD *)v5 + 8);
    v8 = *((_QWORD *)v7 + 4);
    if (v8 && *(_DWORD *)(v8 - 12))
    {
      v13 = HIDWORD(v40);
      if (HIDWORD(v40) == (_DWORD)v40)
      {
        WTF::Vector<WTF::WeakPtr<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MutationObserverRegistration&>((unsigned int *)&v39, v7);
      }
      else
      {
        v30 = v39;
        WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7, (uint64_t)v7);
        v31 = *(unsigned int **)v7;
        if (*(_QWORD *)v7)
        {
          do
            v9 = __ldaxr(v31);
          while (__stlxr(v9 + 1, v31));
          v6 = v33;
        }
        v30[v13] = (uint64_t)v31;
        ++HIDWORD(v40);
      }
    }
    WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v34);
    v5 = v35;
  }
  if (HIDWORD(v40))
  {
    v14 = v39;
    v15 = 8 * HIDWORD(v40);
    do
    {
      if (*v14)
        v16 = *(_QWORD **)(*v14 + 8);
      else
        v16 = 0;
      WebCore::MutationObserverRegistration::takeTransientRegistrations((uint64_t *)&v34, v16);
      v17 = HIDWORD(v37);
      if (HIDWORD(v37) == (_DWORD)v37)
      {
        WTF::Vector<WTF::HashSet<WebCore::GCReachableRef<WebCore::Node,void>,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::HashSet<WebCore::GCReachableRef<WebCore::Node,void>,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTableTraits>>((uint64_t)&v36, (unint64_t)&v34);
      }
      else
      {
        v18 = v36;
        v36[HIDWORD(v37)] = 0;
        v19 = v34;
        v34 = 0;
        v18[v17] = (uint64_t)v19;
        ++HIDWORD(v37);
      }
      if (v34)
        WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::deallocateTable(v34, v4);
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v10 = *((_DWORD *)this + 7);
  if (v10)
  {
    v20 = *((_QWORD *)this + 1);
    v34 = (uint64_t *)*((_QWORD *)this + 2);
    LODWORD(v35) = *((_DWORD *)this + 6);
    HIDWORD(v35) = v10;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20))
    {
      v22 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
        {
          v24 = (WebCore::InspectorInstrumentation *)(v23 - 96);
          WebCore::ScriptExecutionContext::ref(v23 - 96);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WebCore::InspectorInstrumentation::willFireObserverCallback(v24, (WebCore::ScriptExecutionContext *)&v32, v25);
          v27 = v32;
          v32 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v26);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = (_DWORD *)*((_QWORD *)this + 1);
          ++v28[4];
          (*(void (**)(_DWORD *, WebCore::MutationObserver *, uint64_t **, WebCore::MutationObserver *))(*(_QWORD *)v28 + 48))(v28, this, &v34, this);
          if (v28[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
          else
            --v28[4];
          WebCore::InspectorInstrumentation::didFireObserverCallback(v24, v29);
          WebCore::ScriptExecutionContext::deref(v24);
        }
      }
    }
    WTF::Vector<WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v21);
  }
  if (v2)
    WTF::HashTable<WebCore::GCReachableRef<WebCore::Node,void>,WebCore::GCReachableRef<WebCore::Node,void>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>>::deallocateTable(v2, v4);
  WTF::Vector<WTF::HashSet<WebCore::GCReachableRef<WebCore::Node,void>,WTF::DefaultHash<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTraits<WebCore::GCReachableRef<WebCore::Node,void>>,WTF::HashTableTraits>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v4);
  return WTF::Vector<WTF::WeakPtr<WebCore::MutationObserverRegistration,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v11);
}

uint64_t WebCore::JSXMLHttpRequest::subspaceForImpl(WebCore::JSXMLHttpRequest *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7448);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v16 = *(_QWORD *)(v9 + 7448);
  if (!v16)
  {
    v14 = 40;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v14, JSC::JSCell::numberOfLowerTierCells, &v15);
    v11 = v15;
    v16 = v15;
    v12 = *(_QWORD *)(v9 + 7448);
    *(_QWORD *)(v9 + 7448) = v15;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v13 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v16);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v13) = v11;
      *(_DWORD *)(v7 + 2844) = v13 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v15 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSXMLHttpRequest::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v15);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v15);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

unint64_t WebCore::JSDOMPluginArray::createPrototype(WebCore::JSDOMPluginArray *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSDOMPluginArrayPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSWorker>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSWorker>::initializeProperties(v5, a1, a3);
  return v5;
}

BOOL WebCore::JSDOMConstructor<WebCore::JSWorker>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000001, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v12 = WebCore::getDOMStructure<WebCore::JSWorker>((WebCore::JSWorker *)a2, a3, v11);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v12 + 48), 14);
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSWorker>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v2;
  JSC::VM *v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  JSC::JSCell *v9;
  uint64_t Object;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  _BOOL4 v14;
  _BOOL4 v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  JSCell *v24;
  JSC::JSCell *v25;
  JSC::JSGlobalObject *v26;
  JSC::JSObject *v27;
  JSC::JSGlobalObject *v28;
  WTF::StringImpl *v29;
  JSC::VM *v31;
  double v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  JSC::VM *v36;
  double v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  JSC::VM *v40;
  double v41;
  uint64_t v42;
  JSC::Structure *v43;
  uint64_t FunctionRealm;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  JSC::JSObject *v52;
  unint64_t Structure;
  JSC::Structure *v54;
  JSC::JSCell *v55;
  uint64_t v56;
  unint64_t SubclassStructure;
  int v58;
  JSValue v59;
  BOOL v60;
  int v61;
  uint64_t v62;
  int *v63;
  int v64;
  BOOL v65;
  int v66;
  uint64_t v67;
  int *v68;
  int v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  int *v73;
  int v74;
  WTF::StringImpl *v75;
  int v76;
  JSC::VM *v77;
  WTF::StringImpl *v78;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v59.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, a1, v59);
  }
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, v7, (uint64_t)&v75);
  v8 = v76;
  if (!v76)
  {
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v14 = 0;
      v15 = 0;
      LODWORD(v13) = 0;
      goto LABEL_14;
    }
    v9 = *(JSC::JSCell **)(a2 + 56);
    v2 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v77 = v2;
    if (((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v14 = 0;
      v15 = 0;
      goto LABEL_61;
    }
    if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v9)) == 0)
    {
      JSC::throwTypeError();
      goto LABEL_86;
    }
    v7 = Object;
    WTF::AtomStringImpl::addLiteral();
    v11 = v78;
    v13 = JSC::JSObject::get((JSC::Structure *)v7, a1, (unint64_t)v78);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
    {
LABEL_86:
      v24 = 0;
LABEL_36:
      v8 = v76;
      goto LABEL_37;
    }
    if (v13 != 10)
    {
      v31 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v13 >= 0xFFFE000000000000)
        goto LABEL_106;
      *(_QWORD *)&v32 = v13 - 0x2000000000000;
      if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v14 = v32 > 0.0 || v32 < 0.0;
        goto LABEL_44;
      }
      if ((v13 & 0xFFFE000000000002) != 0)
      {
        v14 = v13 == 7;
        goto LABEL_44;
      }
      v61 = *(unsigned __int8 *)(v13 + 5);
      if (v61 == 3)
      {
        v64 = *(_DWORD *)(v13 + 8);
      }
      else
      {
        if (v61 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v60 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_107;
          }
          v14 = 1;
          goto LABEL_44;
        }
        v62 = *(_QWORD *)(v13 + 8);
        if ((v62 & 1) != 0)
          v63 = (int *)(v13 + 16);
        else
          v63 = (int *)(v62 + 4);
        v64 = *v63;
      }
      v60 = v64 == 0;
      goto LABEL_107;
    }
    v14 = 0;
    while (1)
    {
      WTF::AtomStringImpl::addLiteral();
      v33 = v78;
      v35 = JSC::JSObject::get((JSC::Structure *)v7, a1, (unint64_t)v78);
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v34);
        else
          *(_DWORD *)v33 -= 2;
      }
      if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
        goto LABEL_86;
      if (v35 == 10)
      {
        v15 = 0;
        goto LABEL_56;
      }
      v36 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v35 >= 0xFFFE000000000000)
      {
        v65 = (_DWORD)v35 == 0;
      }
      else
      {
        *(_QWORD *)&v37 = v35 - 0x2000000000000;
        if (v35 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v37 <= 0.0)
          {
            v15 = v37 < 0.0;
            goto LABEL_55;
          }
LABEL_124:
          v15 = 1;
          goto LABEL_55;
        }
        if ((v35 & 0xFFFE000000000002) != 0)
        {
          v15 = v35 == 7;
          goto LABEL_55;
        }
        v66 = *(unsigned __int8 *)(v35 + 5);
        if (v66 == 3)
        {
          v69 = *(_DWORD *)(v35 + 8);
        }
        else
        {
          if (v66 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              goto LABEL_124;
            v65 = *(_QWORD *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_120;
          }
          v67 = *(_QWORD *)(v35 + 8);
          if ((v67 & 1) != 0)
            v68 = (int *)(v35 + 16);
          else
            v68 = (int *)(v67 + 4);
          v69 = *v68;
        }
        v65 = v69 == 0;
      }
LABEL_120:
      v15 = !v65;
LABEL_55:
      if (*((_DWORD *)v36 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v36) & 1) != 0)
        goto LABEL_86;
LABEL_56:
      WTF::AtomStringImpl::addLiteral();
      v38 = v78;
      v7 = JSC::JSObject::get((JSC::Structure *)v7, a1, (unint64_t)v78);
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v39);
        else
          *(_DWORD *)v38 -= 2;
      }
      if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
        goto LABEL_86;
      if (v7 == 10)
      {
LABEL_61:
        LODWORD(v13) = 0;
        goto LABEL_14;
      }
      v40 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v7 >= 0xFFFE000000000000)
      {
        v70 = (_DWORD)v7 == 0;
      }
      else
      {
        *(_QWORD *)&v41 = v7 - 0x2000000000000;
        if (v7 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v41 <= 0.0)
          {
            LODWORD(v13) = v41 < 0.0;
            goto LABEL_66;
          }
LABEL_136:
          LODWORD(v13) = 1;
          goto LABEL_66;
        }
        if ((v7 & 0xFFFE000000000002) != 0)
        {
          LODWORD(v13) = v7 == 7;
          goto LABEL_66;
        }
        v71 = *(unsigned __int8 *)(v7 + 5);
        if (v71 == 3)
        {
          v74 = *(_DWORD *)(v7 + 8);
        }
        else
        {
          if (v71 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              goto LABEL_136;
            v70 = *(_QWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_132;
          }
          v72 = *(_QWORD *)(v7 + 8);
          if ((v72 & 1) != 0)
            v73 = (int *)(v7 + 16);
          else
            v73 = (int *)(v72 + 4);
          v74 = *v73;
        }
        v70 = v74 == 0;
      }
LABEL_132:
      LODWORD(v13) = !v70;
LABEL_66:
      if (*((_DWORD *)v40 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v40))
        goto LABEL_86;
LABEL_14:
      if (!v76)
      {
        v16 = v75;
        v75 = 0;
        v17 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v17);
        *(_QWORD *)v17 = off_1E33A4B48;
        *(_QWORD *)(v17 + 8) = 0;
        if (v15)
          v20 = 4;
        else
          v20 = 0;
        if ((_DWORD)v13)
          v21 = 8;
        else
          v21 = 0;
        if (v14)
          v22 = 1998850;
        else
          v22 = 1998848;
        v23 = v20 | v21 | v22 | (v16 != 0) | *(_DWORD *)(v17 + 20) & 0xFFC00000;
        *(_DWORD *)(v17 + 16) = 1;
        *(_DWORD *)(v17 + 20) = v23;
        if (v16)
        {
          *(_DWORD *)v16 += 2;
          v23 = *(_DWORD *)(v17 + 20);
        }
        *(_QWORD *)(v17 + 24) = v16;
        *(_QWORD *)(v17 + 32) = 0;
        *(_QWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = v19;
        *(_QWORD *)(v17 + 64) = 0;
        *(_DWORD *)(v17 + 20) = v23 | 0x4000;
        v78 = (WTF::StringImpl *)v17;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v18);
          else
            *(_DWORD *)v16 -= 2;
        }
        v24 = (JSCell *)WebCore::toJSNewlyCreated((int)a1, *(JSC::VM **)(v6 + 40), (WebCore::JSDOMGlobalObject *)&v78);
        v25 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v25 & 0xFFFE000000000002) == 0)
        {
          v26 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v25);
          if (v26)
          {
            v28 = v26;
            if (v26 != *(JSC::JSGlobalObject **)(a2 + 24))
            {
              v42 = *((_QWORD *)a1 + 7);
              FunctionRealm = JSC::getFunctionRealm(a1, v26, v27);
              if (!*(_DWORD *)(v42 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v42) & 1) == 0)
              {
                v45 = *(_QWORD *)(FunctionRealm + 3296);
                if (!v45)
                  goto LABEL_73;
                v46 = *(_DWORD *)(v45 - 8);
                v47 = ((unint64_t)&WebCore::JSEvent::s_info + ~((_QWORD)&WebCore::JSEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSEvent::s_info + ~((_QWORD)&WebCore::JSEvent::s_info << 32)) >> 22);
                v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
                v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
                v50 = v46 & ((v49 >> 31) ^ v49);
                v51 = *(char ***)(v45 + 16 * v50);
                if (v51 == &WebCore::JSEvent::s_info)
                {
LABEL_72:
                  v52 = *(JSC::JSObject **)(v45 + 16 * v50 + 8);
                  if (!v52)
                    goto LABEL_73;
                }
                else
                {
                  v58 = 1;
                  while (v51)
                  {
                    v50 = ((_DWORD)v50 + v58) & v46;
                    v51 = *(char ***)(v45 + 16 * v50);
                    ++v58;
                    if (v51 == &WebCore::JSEvent::s_info)
                      goto LABEL_72;
                  }
LABEL_73:
                  Structure = WebCore::JSEventPrototype::createStructure((uint64_t *)v42, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
                  *(_DWORD *)(Structure + 16) |= 0x80000u;
                  v55 = (JSC::JSCell *)WebCore::JSEventPrototype::create((WebCore::JSEventPrototype *)v42, (JSC::VM *)FunctionRealm, Structure, v54);
                  v56 = WebCore::JSEvent::createStructure((uint64_t *)v42, FunctionRealm, v55);
                  v52 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v56, (uint64_t)&WebCore::JSEvent::s_info);
                }
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v28, v52, v43);
                if (!*(_DWORD *)(v42 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v42) & 1) == 0)
                  JSC::JSObject::setStructure(v24, (JSC::VM *)v42, SubclassStructure);
              }
            }
          }
        }
        if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
          v24 = 0;
        v29 = v78;
        v78 = 0;
        if (v29)
        {
          if (*((_DWORD *)v29 + 4) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v29 + 8))(v29);
          else
            --*((_DWORD *)v29 + 4);
        }
        goto LABEL_36;
      }
      v31 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_106:
      v60 = (_DWORD)v13 == 0;
LABEL_107:
      v14 = !v60;
LABEL_44:
      if (*((_DWORD *)v31 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v31) & 1) != 0)
        goto LABEL_86;
    }
  }
  v24 = 0;
LABEL_37:
  if (v8 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32712B8[v8])(&v78, &v75);
  return v24;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMutationObserver>::construct(JSC *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v11;
  uint64_t v12;
  WebCore::JSDOMGlobalObject *v13;
  unsigned int v14;
  uint64_t v15;
  WebCore::ScriptExecutionContext *v16;
  _QWORD *v17;
  _QWORD *Allocator;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  void *v24;
  JSCell *v25;
  JSC::JSCell *v26;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v28;
  JSC::JSGlobalObject *v29;
  uint64_t v30;
  bmalloc::api *v32;
  void *v33;
  uint64_t v34;
  uint64_t FunctionRealm;
  JSC::JSObject *v36;
  JSC::Structure *v37;
  unint64_t SubclassStructure;
  JSValue v39;
  unint64_t v40;
  uint64_t v41;
  WebCore::MutationObserver *v42;
  uint64_t v43;
  int v44;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v9, this, v39);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 48);
    v13 = *(WebCore::JSDOMGlobalObject **)(v11 + 40);
    v42 = (WebCore::MutationObserver *)*((_QWORD *)this + 7);
    if ((v12 & 0xFFFE000000000002) == 0
      && (v14 = *(unsigned __int8 *)(v12 + 5), v14 >= 0x17)
      && ((v14 & 0xFE) == 0x1A
       || (*(_BYTE *)(v12 + 6) & 4) != 0
       && ((*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                    + 0x4C)
                                                                  + 0x38))(&v43, v12), (_BYTE)v43)))
    {
      v15 = WTF::fastMalloc((WTF *)0x20);
      v16 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v13);
      *(_DWORD *)(v15 + 16) = 1;
      *(_QWORD *)v15 = &off_1E33A18C0;
      *(_QWORD *)(v15 + 8) = 0;
      WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v15, v16);
      *(_QWORD *)v15 = &off_1E32B8EA0;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      Allocator = 0;
      if (v13)
      {
        if ((v13 & 8) != 0)
          v40 = ((unint64_t)v13 - 112) | 1;
        else
          v40 = (unint64_t)v13 & 0xFFFFFFFFFFFFC000;
        if ((v40 & 1) != 0)
          v41 = v40 + 47;
        else
          v41 = *(_QWORD *)v40 + 32;
        Allocator = *(_QWORD **)(v41 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v41 + 16) = *Allocator;
        *Allocator = v13;
        Allocator[1] = 0;
        Allocator[2] = 0;
      }
      v17[1] = &off_1E32268A0;
      *v17 = Allocator;
      if ((v12 & 8) != 0)
        v19 = (v12 - 112) | 1;
      else
        v19 = v12 & 0xFFFFFFFFFFFFC000;
      if ((v19 & 1) != 0)
        v20 = v19 + 47;
      else
        v20 = *(_QWORD *)v19 + 32;
      v21 = *(_QWORD **)(v20 + 16);
      if (!v21)
        v21 = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v20 + 16) = *v21;
      *v21 = v12;
      v21[1] = v17 + 1;
      v21[2] = v15;
      v17[2] = v21;
      *(_QWORD *)(v15 + 24) = v17;
      v44 = 0;
      v43 = 0;
      v22 = bmalloc::api::isoAllocate();
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = v15;
      *(_OWORD *)(v22 + 16) = 0u;
      *(_OWORD *)(v22 + 32) = 0u;
      *(_QWORD *)(v22 + 48) = 0;
      v23 = WebCore::s_observerPriority++;
      *(_DWORD *)(v22 + 56) = v23;
      v42 = (WebCore::MutationObserver *)v22;
      v25 = (JSCell *)WebCore::createWrapper<WebCore::MutationObserver,WebCore::MutationObserver>(*(_QWORD *)(v11 + 40), (uint64_t *)&v42);
      v26 = *(JSC::JSCell **)(a2 + 40);
      if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
      {
        Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v26);
        if (Object)
        {
          v29 = Object;
          if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
          {
            v34 = *((_QWORD *)this + 7);
            FunctionRealm = JSC::getFunctionRealm(this, Object, v28);
            if (!*(_DWORD *)(v34 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v34) & 1) == 0)
            {
              v36 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSMutationObserver>((uint64_t *)v34, FunctionRealm);
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v29, v36, v37);
              if (!*(_DWORD *)(v34 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v34) & 1) == 0)
                JSC::JSObject::setStructure(v25, (JSC::VM *)v34, SubclassStructure);
            }
          }
        }
      }
      if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
        v25 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 1)
        {
          WebCore::MutationObserver::~MutationObserver(v42, v24);
          bmalloc::api::isoDeallocate(v32, v33);
        }
        else
        {
          --*(_DWORD *)v42;
        }
      }
      v30 = 0;
    }
    else
    {
      WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v42, 0, "callback", 9, "MutationObserver", 17, a8, 0, 0);
      v25 = 0;
      v30 = 1;
      v44 = 1;
    }
    ((void (*)(WebCore::MutationObserver **, uint64_t *))off_1E32BF4E8[v30])(&v42, &v43);
  }
  return v25;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSXMLHttpRequest>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  WebCore::XMLHttpRequest *v8;
  WebCore::JSDOMGlobalObject *v9;
  JSCell *v10;
  JSC::JSCell *v11;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v13;
  JSC::JSGlobalObject *v14;
  WebCore::JSXMLHttpRequestEventTarget *v16;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v18;
  JSC::Structure *v19;
  unint64_t SubclassStructure;
  JSC::VM *v21;
  char hasExceptionsAfterHandlingTraps;
  WebCore::XMLHttpRequest *v23;
  JSC::VM *v24;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v24 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v24, (uint64_t)"XMLHttpRequest", 15);
  v7 = (WebCore::ScriptExecutionContext *)v6;
  v8 = (WebCore::XMLHttpRequest *)bmalloc::api::isoAllocate();
  v23 = WebCore::XMLHttpRequest::XMLHttpRequest(v8, v7);
  WebCore::ActiveDOMObject::suspendIfNeeded(v23);
  if (*(uint64_t (***)(WebCore::XMLHttpRequest *__hidden))v8 != &off_1E3483B78)
  {
    __break(0xC471u);
    JUMPOUT(0x194598D30);
  }
  v10 = (JSCell *)WebCore::createWrapper<WebCore::XMLHttpRequest,WebCore::XMLHttpRequest>(*(JSC::VM **)(v5 + 40), (JSC::VM *)&v23, v9);
  v11 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v11 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v11);
    if (Object)
    {
      v14 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v16 = (WebCore::JSXMLHttpRequestEventTarget *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v13);
        if (!*((_DWORD *)v16 + 20)
          || (v21 = FunctionRealm,
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16),
              FunctionRealm = v21,
              (hasExceptionsAfterHandlingTraps & 1) == 0))
        {
          v18 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSXMLHttpRequest>(v16, FunctionRealm);
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v14, v18, v19);
          if (!*((_DWORD *)v16 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
            JSC::JSObject::setStructure(v10, v16, SubclassStructure);
        }
      }
    }
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v10 = 0;
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 1)
      (*(void (**)(void))(*(_QWORD *)v23 + 16))();
    else
      --*((_DWORD *)v23 + 6);
  }
  return v10;
}

uint64_t WebCore::HTMLOListElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33C7068;
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 116) = 0;
  *(_BYTE *)(result + 120) = 0;
  *(_BYTE *)(result + 124) = 0;
  *(_BYTE *)(result + 128) = 0;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLInputElement::create@<X0>(WebCore::HTMLInputElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, WebCore::Document *a3@<X2>, WebCore::HTMLFormElement *a4@<X3>, uint64_t *a5@<X8>)
{
  int v5;
  uint64_t v10;
  _DWORD *v11;
  uint64_t result;
  uint64_t v13;
  int *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  unsigned int v27;

  v5 = (int)a4;
  v10 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v10 + 24) = 0x1C1C00000002;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v11 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    ++*v11;
  result = 0;
  *(_QWORD *)(v10 + 96) = v11;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)v10 = off_1E33BC680;
  *(_QWORD *)(v10 + 112) = off_1E33B3CE0;
  *(_QWORD *)(v10 + 120) = 0;
  if (a3)
  {
    result = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
    if (result)
    {
      do
        v27 = __ldaxr((unsigned int *)result);
      while (__stlxr(v27 + 1, (unsigned int *)result));
    }
  }
  *(_QWORD *)(v10 + 128) = result;
  *(_QWORD *)(v10 + 136) = 0;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)(v10 + 152) = 0;
  *(_WORD *)(v10 + 160) = 3;
  *(_BYTE *)(v10 + 162) = *(_BYTE *)(v10 + 162) & 0xFC | 2;
  *(_DWORD *)(v10 + 164) = 0;
  *(_BYTE *)(v10 + 168) &= 0xF8u;
  *(_QWORD *)v10 = off_1E33D0270;
  *(_QWORD *)(v10 + 112) = &unk_1E33D0858;
  v13 = *((_QWORD *)a2 + 66);
  if (v13)
  {
    v13 = *(_QWORD *)(v13 + 8);
    if (v13)
    {
      result = WebCore::Document::editor(*(WebCore::Document **)(v13 + 296));
      LODWORD(v13) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 8) + 680) + 370);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 8) + 680) + 370))
        LOBYTE(v13) = (_DWORD)v13 != 3;
    }
  }
  *(_BYTE *)(v10 + 169) = *(_BYTE *)(v10 + 169) & 0xE0 | v13 | 0x10;
  *(_QWORD *)(v10 + 172) = -1;
  *(_QWORD *)(v10 + 180) = 0;
  *(_WORD *)(v10 + 188) = 0;
  {
    v14 = (int *)WebCore::mousePointerEventType(void)::mouseType;
    if (!WebCore::mousePointerEventType(void)::mouseType)
      goto LABEL_10;
    v15 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
  }
  else
  {
    v14 = &WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
    v15 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
    WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
  }
  *v14 = v15 + 2;
LABEL_10:
  *(_QWORD *)(v10 + 192) = v14;
  *(_QWORD *)(v10 + 200) = 0;
  *(_QWORD *)v10 = off_1E33BFC70;
  *(_QWORD *)(v10 + 112) = &unk_1E33C0318;
  *(_QWORD *)(v10 + 208) = 0;
  *(_QWORD *)(v10 + 216) = 0;
  *(_DWORD *)(v10 + 224) = 20;
  *(_WORD *)(v10 + 228) = -1;
  *(_WORD *)(v10 + 230) &= 0xC000u;
  if (v5)
    v16 = 64;
  else
    v16 = 0;
  *(_WORD *)(v10 + 232) = *(_WORD *)(v10 + 232) & 0x8000 | v16;
  if ((v5 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0xB0);
    v17 = result;
    *(_QWORD *)result = off_1E33D5AC0;
    *(_QWORD *)(result + 8) = 0x20000000000001;
    *(_BYTE *)(result + 16) = 0;
    if ((*(_QWORD *)(v10 + 16) & 0xFFFFFFFFFFFFLL) == 0)
    {
      result = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 8) = v10;
      *(_BYTE *)(result + 32) = 0;
      v21 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 16) = v21 & 0xFFFF000000000000 | result;
      v22 = v21 & 0xFFFFFFFFFFFFLL;
      if ((v21 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v23 = __ldaxr((unsigned int *)v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, (unsigned int *)v22));
        if (!v24)
        {
          atomic_store(1u, (unsigned int *)v22);
          v25 = *(unsigned int *)(v22 + 28);
          if ((_DWORD)v25)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v22 + 16), (WTF::StringImpl *)(*(_QWORD *)(v22 + 16) + 32 * v25));
          v26 = *(WTF **)(v22 + 16);
          if (v26)
          {
            *(_QWORD *)(v22 + 16) = 0;
            *(_DWORD *)(v22 + 24) = 0;
            WTF::fastFree(v26, v20);
          }
          result = WTF::fastFree((WTF *)v22, v20);
        }
      }
    }
    v18 = (unsigned int *)(*(_QWORD *)(v10 + 16) & 0xFFFFFFFFFFFFLL);
    if (v18)
    {
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    *(_BYTE *)(v17 + 72) = 0;
    *(_OWORD *)(v17 + 80) = 0u;
    *(_OWORD *)(v17 + 96) = 0u;
    *(_OWORD *)(v17 + 112) = 0u;
    *(_OWORD *)(v17 + 128) = 0u;
    *(_OWORD *)(v17 + 144) = 0u;
    *(_OWORD *)(v17 + 160) = 0u;
    *(_QWORD *)v17 = off_1E33DB6B8;
    *(_QWORD *)(v17 + 24) = v18;
    *(_QWORD *)(v17 + 32) = &unk_1E33DBAE0;
    *(_QWORD *)(v17 + 40) = 0;
    *(_QWORD *)(v17 + 48) = &unk_1E33DBB28;
    *(_QWORD *)(v17 + 56) = &unk_1E33DBB50;
    *(_QWORD *)(v17 + 64) = &unk_1E33DBB90;
  }
  *(_QWORD *)(v10 + 248) = 0;
  *(_QWORD *)(v10 + 256) = 0;
  *(_QWORD *)(v10 + 240) = v17;
  *a5 = v10;
  return result;
}

uint64_t WebCore::HTMLInputElement::innerTextElementCreatingShadowSubtreeIfNeeded(WebCore::HTMLInputElement *this)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  WebCore::Element *v5;
  _DWORD *v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 30);
  if (!*(_BYTE *)(v1 + 16))
  {
    v3 = *(_DWORD *)(v1 + 12);
    if ((v3 & 0x15183) != 0)
    {
      if (v3 != 2)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 544))(v1);
      v4 = *(_QWORD *)(v1 + 24);
      if (!v4)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 544))(v1);
      v5 = *(WebCore::Element **)(v4 + 8);
      if (!v5 || (*((_WORD *)v5 + 116) & 0x2000) == 0)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 544))(v1);
      v6 = (_DWORD *)(v1 + 8);
      ++*(_DWORD *)(v1 + 8);
    }
    else
    {
      v6 = (_DWORD *)(v1 + 8);
      v7 = *(_QWORD *)(v1 + 24);
      ++*(_DWORD *)(v1 + 8);
      if (v7)
        v5 = *(WebCore::Element **)(v7 + 8);
      else
        v5 = 0;
    }
    WebCore::Element::ensureUserAgentShadowRoot(v5);
    *(_BYTE *)(v1 + 16) = 1;
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 512))(v1);
    if (*(_DWORD *)(v1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    else
      *v6 = *(_DWORD *)(v1 + 8) - 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 544))(v1);
}

_BYTE *WebCore::HTMLInputElement::copyNonAttributePropertiesFromElement(WebCore::HTMLInputElement *this, const WebCore::Element *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  int v6;
  unsigned int v7;
  _BYTE *result;

  if ((*((_WORD *)a2 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194599364);
  }
  v4 = (_DWORD *)*((_QWORD *)a2 + 27);
  if (v4)
    *v4 += 2;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *((_WORD *)this + 116) &= ~0x100u;
  WebCore::HTMLInputElement::setChecked((unsigned __int8 *)this, *((_WORD *)a2 + 115) & 1);
  v6 = *((_WORD *)this + 115) & 0xFFFB | (4 * ((*((unsigned __int16 *)a2 + 115) >> 2) & 1));
  *((_WORD *)this + 115) = v6;
  v7 = v6 & 0xFFFFFFFD | (2 * ((*((unsigned __int16 *)a2 + 115) >> 1) & 1));
  *((_WORD *)this + 115) = v7;
  *((_WORD *)this + 115) = v7 & 0xFFF7 | *((_WORD *)a2 + 115) & 8;
  WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
  *((_BYTE *)this + 168) &= ~2u;
  result = (_BYTE *)*((_QWORD *)this + 30);
  if (result[16])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 736))(result);
  return result;
}

uint64_t *WebCore::HTMLInputElement::didFinishInsertingNode(WebCore::HTMLInputElement *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *result;
  const WTF::AtomString *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node *v14;
  __int16 v15;
  WebCore::Node *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  void *v28;
  WebCore::RadioButtonGroups *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Node *v34;
  WebCore::Node *v35;

  v2 = (char *)this + 112;
  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = 0;
      *(_DWORD *)(v4 + 24) += 2;
      goto LABEL_4;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = 1;
LABEL_4:
  result = (uint64_t *)(*(uint64_t (**)(char *))(*(_QWORD *)v2 + 16))((char *)this + 112);
  v8 = (uint64_t)result;
  if ((*((_BYTE *)result + 22) & 8) == 0)
    goto LABEL_15;
  v9 = result[13];
  if (v9
    && ((v10 = *(_DWORD *)(v9 + 4), (v10 & 1) != 0)
      ? (v11 = *(_QWORD *)(v9 + 40), LODWORD(v12) = *(_DWORD *)(v9 + 52))
      : (v11 = v9 + 32, LODWORD(v12) = v10 >> 5),
        (_DWORD)v12))
  {
    v12 = v12;
    v7 = (const WTF::AtomString *)(v11 + 8);
    while (1)
    {
      v13 = *((_QWORD *)v7 - 1);
      if (v13 == WebCore::HTMLNames::formAttr
        || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
        && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
      {
        break;
      }
      v7 = (const WTF::AtomString *)((char *)v7 + 16);
      if (!--v12)
      {
        v7 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v7 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
  }
  if (!*(_QWORD *)v7)
    goto LABEL_15;
  result = (uint64_t *)WebCore::TreeScope::getElementById((unsigned int *)result[5], v7, (uint64_t *)&v35);
  v14 = v35;
  if (v35)
  {
    if ((*((_WORD *)v35 + 14) & 0x10) == 0
      || *(_QWORD *)(*((_QWORD *)v35 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          result = (uint64_t *)WebCore::Node::removedLastRef(v35, v7);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
LABEL_18:
      v14 = 0;
      goto LABEL_19;
    }
    v32 = v8;
    do
    {
      v33 = v32;
      v32 = *(_QWORD *)(v32 + 32);
    }
    while (v32);
    if (v33 != **(_QWORD **)(v8 + 40))
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          result = (uint64_t *)WebCore::Node::removedLastRef(v35, v7);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
LABEL_15:
      v14 = (WebCore::Node *)v4;
      if (v5)
      {
        v14 = *(WebCore::Node **)(v8 + 32);
        if (!v14)
          goto LABEL_19;
        v15 = *((_WORD *)v14 + 14);
        if ((v15 & 8) == 0)
          goto LABEL_18;
        while ((v15 & 0x10) == 0
             || *(_QWORD *)(*((_QWORD *)v14 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
        {
          v14 = (WebCore::Node *)*((_QWORD *)v14 + 4);
          if (!v14)
            goto LABEL_19;
          v15 = *((_WORD *)v14 + 14);
          if ((v15 & 8) == 0)
            goto LABEL_18;
        }
      }
      *((_DWORD *)v14 + 6) += 2;
    }
  }
LABEL_19:
  v34 = v14;
  v16 = (WebCore::Node *)*((_QWORD *)this + 15);
  if (v16)
    v16 = (WebCore::Node *)*((_QWORD *)v16 + 1);
  if (v14 != v16)
  {
    result = (uint64_t *)(*(uint64_t (**)(char *, WebCore::Node **))(*(_QWORD *)v2 + 80))(v2, &v34);
    v14 = v34;
  }
  v34 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      v19 = *((_WORD *)v14 + 15);
      if ((v19 & 0x400) == 0)
      {
        v20 = *((_WORD *)v14 + 14);
        if ((v20 & 0xF000) == 0x9000)
        {
          result = (uint64_t *)WebCore::Document::removedLastRef(v14, v7);
        }
        else
        {
          if ((v20 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v14 + 20) + 16))(*((_QWORD *)v14 + 20));
            v19 = *((_WORD *)v14 + 15);
          }
          *((_WORD *)v14 + 15) = v19 | 0x400;
          result = (uint64_t *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v14 + 72))(v14);
        }
      }
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  v17 = *((_QWORD *)this + 15);
  if (v17)
  {
    v23 = *(_QWORD *)(v17 + 8);
    v24 = !v23 || v4 == v23;
    if (!v24 && (*(_BYTE *)(v23 + 22) & 8) != 0)
      result = (uint64_t *)WebCore::Document::didAssociateFormControl(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8), (WebCore::Element *)v8);
  }
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      v21 = *(_WORD *)(v4 + 30);
      if ((v21 & 0x400) == 0)
      {
        v22 = *(_WORD *)(v4 + 28);
        if ((v22 & 0xF000) == 0x9000)
        {
          result = (uint64_t *)WebCore::Document::removedLastRef((WebCore::Document *)v4, v7);
        }
        else
        {
          if ((v22 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
            v21 = *(_WORD *)(v4 + 30);
          }
          *(_WORD *)(v4 + 30) = v21 | 0x400;
          result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  if ((*((_BYTE *)this + 22) & 0x18) != 0)
  {
    v18 = *((_QWORD *)this + 15);
    if ((!v18 || !*(_QWORD *)(v18 + 8)) && *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 4096)
    {
      v25 = *((_QWORD *)this + 5);
      v26 = *(uint64_t **)(v25 + 72);
      if (!v26)
      {
        v27 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        v26 = WebCore::RadioButtonGroups::RadioButtonGroups(v27);
        v29 = *(WebCore::RadioButtonGroups **)(v25 + 72);
        *(_QWORD *)(v25 + 72) = v26;
        if (v29)
        {
          WebCore::RadioButtonGroups::~RadioButtonGroups(v29, v28);
          WTF::fastFree(v30, v31);
          v26 = *(uint64_t **)(v25 + 72);
        }
      }
      return WebCore::RadioButtonGroups::addButton(v26, this);
    }
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::removedFromAncestor(WebCore::Element *this, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int i;
  uint64_t v31;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL8 *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  __int16 v52;
  _QWORD *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60[3];

  v8 = a2;
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xE8))
  {
    WebCore::HTMLElement::hidePopoverInternal((uint64_t)this, 0, 0, (uint64_t)v60);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v60, v38);
  }
  WebCore::Element::removedFromAncestor(this, (void *)v8, a3, a4, a5);
  v9 = *((_QWORD *)this + 9);
  if ((v9 & 0x4000000000000000) == 0)
    goto LABEL_3;
  v44 = *((_QWORD *)this + 13);
  if (v44
    && ((v45 = *(_DWORD *)(v44 + 4), (v45 & 1) != 0)
      ? (v46 = *(_QWORD *)(v44 + 40), LODWORD(v47) = *(_DWORD *)(v44 + 52))
      : (v46 = v44 + 32, LODWORD(v47) = v45 >> 5),
        (_DWORD)v47))
  {
    v47 = v47;
    v48 = (_BOOL8 *)(v46 + 8);
    while (1)
    {
      v49 = *(v48 - 1);
      if (v49 == WebCore::HTMLNames::dirAttr
        || *(_QWORD *)(v49 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
        && *(_QWORD *)(v49 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
      {
        break;
      }
      v48 += 2;
      if (!--v47)
      {
        v48 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v48 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
  }
  if (WebCore::isValidDirValue(*v48))
    goto LABEL_3;
  if (this && (*((_WORD *)this + 14) & 0x80) != 0)
  {
    v56 = *((_QWORD *)this + 25);
    if (!v56)
      goto LABEL_84;
    v50 = (uint64_t *)(v56 + 8);
  }
  else
  {
    v50 = (uint64_t *)((char *)this + 32);
  }
  v51 = *v50;
  if (!v51)
    goto LABEL_84;
  v52 = *(_WORD *)(v51 + 28);
  if ((v52 & 0x80) == 0)
  {
    if ((v52 & 8) != 0)
      goto LABEL_83;
LABEL_84:
    *((_QWORD *)this + 9) = v9 & 0xBFFFFFFFFFFFFFFFLL;
    goto LABEL_3;
  }
  v57 = *(_QWORD *)(v51 + 200);
  if (!v57)
    goto LABEL_84;
  v51 = *(_QWORD *)(v57 + 8);
  if (!v51)
    goto LABEL_84;
LABEL_83:
  if ((*(_BYTE *)(v51 + 79) & 0x40) == 0)
    goto LABEL_84;
LABEL_3:
  WebCore::ValidatedFormListedElement::removedFromAncestor((uint64_t)this + 112, v8, a3);
  if ((a2 & 0x100) != 0 && *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 4096)
  {
    v58 = WebCore::TreeScope::radioButtonGroups(*(WebCore::TreeScope **)(a3 + 40));
    WebCore::RadioButtonGroups::removeButton((uint64_t)v58, this);
  }
  if ((a2 & 1) != 0)
  {
    v11 = *((_QWORD *)this + 15);
    if ((!v11 || !*(_QWORD *)(v11 + 8))
      && *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 4096
      && (*((_BYTE *)this + 22) & 0x18) != 0)
    {
      v53 = WebCore::TreeScope::radioButtonGroups(*((WebCore::TreeScope **)this + 5));
      WebCore::RadioButtonGroups::removeButton((uint64_t)v53, this);
    }
    if ((*((_WORD *)this + 116) & 0x1000) != 0)
    {
      v20 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      v21 = (uint64_t *)(v20 + 3168);
      v22 = *(_DWORD *)(v20 + 3176) + 1;
      *(_DWORD *)(v20 + 3176) = v22;
      if (v22 > *(_DWORD *)(v20 + 3180))
      {
        _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(v20 + 3168), v60);
        v42 = 0;
        *(_DWORD *)(v20 + 3176) = 0;
        v43 = *(_QWORD *)(v20 + 3168);
        if (v43)
        {
          v42 = *(_DWORD *)(v43 - 12);
          if (v42 > 0x7FFFFFFE)
            v42 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v20 + 3180) = 2 * v42;
      }
      v23 = *((_QWORD *)this + 2);
      v24 = v23 & 0xFFFFFFFFFFFFLL;
      if ((v23 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 8))
        {
          v25 = *v21;
          if (*v21)
          {
            v26 = *(_DWORD *)(v25 - 8);
            v27 = (v24 + ~(v23 << 32)) ^ ((unint64_t)(v24 + ~(v23 << 32)) >> 22);
            v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
            v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
            LODWORD(v29) = v26 & ((v29 >> 31) ^ v29);
            for (i = 1; ; ++i)
            {
              v31 = *(_QWORD *)(v25 + 8 * v29);
              if (!v31)
                break;
              v29 = v29;
              if (v31 != -1 && v31 == v24)
              {
                if ((_DWORD)v29 != *(_DWORD *)(v25 - 4))
                {
                  *(_QWORD *)(v25 + 8 * v29) = 0;
                  do
                  {
                    v33 = __ldaxr((unsigned int *)v24);
                    v34 = v33 - 1;
                  }
                  while (__stlxr(v34, (unsigned int *)v24));
                  if (!v34)
                  {
                    v59 = v29;
                    atomic_store(1u, (unsigned int *)v24);
                    v54 = *(unsigned int *)(v24 + 28);
                    if ((_DWORD)v54)
                      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v54));
                    v55 = *(WTF **)(v24 + 16);
                    if (v55)
                    {
                      *(_QWORD *)(v24 + 16) = 0;
                      *(_DWORD *)(v24 + 24) = 0;
                      WTF::fastFree(v55, v10);
                    }
                    WTF::fastFree((WTF *)v24, v10);
                    v29 = v59;
                  }
                  *(_QWORD *)(v25 + 8 * v29) = -1;
                  ++*(_DWORD *)(*v21 - 16);
                  v35 = *v21;
                  if (*v21)
                    v36 = *(_DWORD *)(v35 - 12) - 1;
                  else
                    v36 = -1;
                  *(_DWORD *)(v35 - 12) = v36;
                  v37 = *v21;
                  if (*v21)
                  {
                    v39 = 6 * *(_DWORD *)(v37 - 12);
                    v40 = *(_DWORD *)(v37 - 4);
                    if (v39 < v40 && v40 >= 9)
                      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v21, v40 >> 1, 0);
                  }
                }
                break;
              }
              LODWORD(v29) = (v29 + i) & v26;
            }
          }
        }
      }
      *((_WORD *)this + 116) &= ~0x1000u;
    }
    v12 = *((_QWORD *)this + 15);
    if ((!v12 || !*(_QWORD *)(v12 + 8)) && *(_DWORD *)(*((_QWORD *)this + 30) + 12) == 4096)
      WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this + 112);
  }
  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_14;
  v14 = *((_QWORD *)this + 13);
  if (v14
    && ((v15 = *(_DWORD *)(v14 + 4), (v15 & 1) != 0)
      ? (v16 = *(_QWORD *)(v14 + 40), LODWORD(v17) = *(_DWORD *)(v14 + 52))
      : (v16 = v14 + 32, LODWORD(v17) = v15 >> 5),
        (_DWORD)v17))
  {
    v17 = v17;
    v18 = (_DWORD **)(v16 + 8);
    while (1)
    {
      v19 = (uint64_t)*(v18 - 1);
      if (v19 == WebCore::HTMLNames::listAttr
        || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::listAttr + 24)
        && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::listAttr + 32))
      {
        break;
      }
      v18 += 2;
      if (!--v17)
      {
        v18 = (_DWORD **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v18 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  if (*v18)
  {
    std::make_unique[abi:sn180100]<WebCore::ListAttributeTargetObserver,WTF::AtomString const&,WebCore::HTMLInputElement &>(v60, v18, (uint64_t)this);
    result = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = v60[0];
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
LABEL_14:
    result = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::HTMLInputElement::rendererIsNeeded(WebCore::HTMLInputElement *this, const WebCore::RenderStyle *a2)
{
  uint64_t result;

  LODWORD(result) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 616))(*((_QWORD *)this + 30));
  if ((*((_QWORD *)a2 + 2) & 0x17) == 0x12)
    return 0;
  else
    return result;
}

_QWORD *WebCore::HTMLImageElement::createForLegacyFactoryFunction@<X0>(const WebCore::QualifiedName *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  WebCore::HTMLImageElement *v8;
  WebCore::Document *v9;
  WebCore::HTMLFormElement *v10;

  v8 = (WebCore::HTMLImageElement *)bmalloc::api::isoAllocate();
  *a4 = WebCore::HTMLImageElement::HTMLImageElement(v8, a1, v9, v10);
  if ((a2 & 0xFF00000000) != 0)
    WebCore::Element::setUnsignedIntegralAttribute(v8, (const WebCore::QualifiedName *)&WebCore::HTMLNames::widthAttr, a2);
  if ((a3 & 0xFF00000000) != 0)
    WebCore::Element::setUnsignedIntegralAttribute(v8, (const WebCore::QualifiedName *)&WebCore::HTMLNames::heightAttr, a3);
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v8 + 19);
}

uint64_t WebCore::HTMLElementStack::popUntilNumberedHeaderElementPopped(WebCore::HTMLElementStack *this)
{
  unsigned __int16 *v2;
  _WORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t result;
  WTF *v7;
  void *v8;

  v2 = *(unsigned __int16 **)this;
  if (**(unsigned __int16 **)this - 49 >= 6)
  {
    do
    {
      WebCore::HTMLElementStack::pop(this);
      v2 = *(unsigned __int16 **)this;
    }
    while (**(unsigned __int16 **)this - 49 > 5);
  }
  v3 = (_WORD *)*((_QWORD *)v2 + 1);
  if ((v3[14] & 8) != 0)
  {
    (*(void (**)(_WORD *))(*(_QWORD *)v3 + 760))(v3);
    v5 = *(_QWORD *)(*(_QWORD *)this + 32);
    *(_QWORD *)(*(_QWORD *)this + 32) = 0;
    result = *(_QWORD *)this;
    *(_QWORD *)this = v5;
    if (result)
    {
      WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)result, v4);
      result = WTF::fastFree(v7, v8);
    }
    --*((_DWORD *)this + 8);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

WebCore::WebAnimation *WebCore::DocumentTimeline::animationAcceleratedRunningStateDidChange(WebCore::DocumentTimeline *this, WebCore::WebAnimation *a2)
{
  _QWORD *v3;
  WebCore::WebAnimation *result;
  uint64_t v5;
  uint64_t v6;
  WebCore::WebAnimation *v7;

  v3 = (_QWORD *)((char *)this + 112);
  ++*((_DWORD *)a2 + 6);
  v7 = a2;
  WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::add((uint64_t)&v6, (uint64_t *)this + 14, (uint64_t *)&v7);
  result = v7;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 1)
      result = (WebCore::WebAnimation *)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 72))();
    else
      --*((_DWORD *)v7 + 6);
  }
  v5 = *((_QWORD *)this + 3);
  if (v5 && *(_DWORD *)(v5 - 12) || *((_DWORD *)this + 33) || *v3 && *(_DWORD *)(*v3 - 12))
    return (WebCore::WebAnimation *)WebCore::DocumentTimeline::scheduleAnimationResolution((uint64_t)this);
  if ((*((_QWORD *)this + 11) & 0xFFFFFFFFFFFFLL) != 0)
    return (WebCore::WebAnimation *)WebCore::TimerBase::stopSlowCase((WebCore::DocumentTimeline *)((char *)this + 56));
  return result;
}

void WebCore::DocumentTimeline::applyPendingAcceleratedAnimations(WebCore::DocumentTimeline *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD **v8;
  _DWORD **v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  _DWORD *v16;
  _DWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::KeyframeEffectStack **v21;
  WebCore::KeyframeEffectStack **v22;
  WebCore::KeyframeEffectStack *v23;
  _DWORD **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  char v31;
  char v32;
  WebCore::KeyframeEffectStack **v33;

  v3 = *((_QWORD *)this + 17);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if ((*(_QWORD *)(*(_QWORD *)(v4 + 680) + 712) & 0x800000000000) != 0)
      {
        v24 = (_DWORD **)*((_QWORD *)this + 14);
        if (v24)
        {
          *((_QWORD *)this + 14) = 0;
          WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::deallocateTable(v24, a2);
          v4 = *(_QWORD *)(*((_QWORD *)this + 17) + 8);
        }
        v25 = *(WTF::StringImpl **)(v4 + 3424);
        if (v25)
          WebCore::AcceleratedTimeline::updateEffectStacks(v25, (WTF::StringImpl *)a2);
        return;
      }
    }
  }
  v5 = 0;
  v6 = 0;
  v7 = (_DWORD **)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  v33 = 0;
  if (v7)
  {
    v6 = *((unsigned int *)v7 - 1);
    v8 = &v7[v6];
    if (*((_DWORD *)v7 - 3))
    {
      v5 = v7;
      if ((_DWORD)v6)
      {
        v10 = 8 * v6;
        v5 = v7;
        while ((unint64_t)*v5 + 1 <= 1)
        {
          ++v5;
          v10 -= 8;
          if (!v10)
          {
            v5 = v8;
            goto LABEL_6;
          }
        }
      }
      goto LABEL_6;
    }
    v5 = &v7[v6];
  }
  v8 = &v7[v6];
LABEL_6:
  if (v7)
    v9 = &v7[*((unsigned int *)v7 - 1)];
  else
    v9 = 0;
  if (v9 != v5)
  {
    v11 = 0;
    do
    {
      v12 = *((_QWORD *)*v5 + 7);
      if (v12 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v12 + 24))(*((_QWORD *)*v5 + 7)))
      {
        if ((v11 & 1) != 0)
          v11 = 1;
        else
          v11 = WebCore::KeyframeEffect::forceLayoutIfNeeded((WebCore::KeyframeEffect *)v12);
        if (*((_BYTE *)*v5 + 158))
        {
          v13 = *(_QWORD *)(v12 + 264);
          if (v13)
          {
            v14 = *(_BYTE *)(v12 + 288);
            if (v14)
            {
              v15 = *(_DWORD *)(v12 + 272);
              v16 = *(_DWORD **)(v12 + 280);
              if (v16)
                *v16 += 2;
              v28 = v13;
              v29 = v15;
              v14 = 1;
              v30 = v16;
            }
            else
            {
              v28 = *(_QWORD *)(v12 + 264);
              LOBYTE(v29) = 0;
            }
            v31 = v14;
            v32 = 1;
            v27 = WebCore::Element::keyframeEffectStack(v13, (uint64_t)&v29);
            if (v27)
              WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::add((uint64_t)&v26, (uint64_t *)&v33, &v27);
          }
          else
          {
            LOBYTE(v28) = 0;
            v32 = 0;
          }
          std::optional<WebCore::Styleable const>::~optional((uint64_t)&v28, (WTF::StringImpl *)a2);
        }
        else
        {
          WebCore::KeyframeEffect::applyPendingAcceleratedActions((WebCore::KeyframeEffect *)v12);
        }
      }
      v17 = v5 + 1;
      v5 = v8;
      if (v17 != v8)
      {
        v5 = v17;
        while ((unint64_t)*v5 + 1 <= 1)
        {
          if (++v5 == v8)
          {
            v5 = v8;
            break;
          }
        }
      }
    }
    while (v5 != v9);
    v18 = (uint64_t)v33;
    if (v33)
    {
      if (*((_DWORD *)v33 - 3))
      {
        v19 = *((unsigned int *)v33 - 1);
        if ((_DWORD)v19)
        {
          v20 = 8 * v19;
          v21 = v33;
          while ((unint64_t)*v21 + 1 <= 1)
          {
            ++v21;
            v20 -= 8;
            if (!v20)
              goto LABEL_44;
          }
        }
        else
        {
          v21 = v33;
        }
        v22 = &v33[v19];
        if (v22 != v21)
        {
          v23 = *v21;
LABEL_50:
          WebCore::KeyframeEffectStack::applyPendingAcceleratedActions(v23);
          while (++v21 != v22)
          {
            v23 = *v21;
            if ((unint64_t)*v21 + 1 > 1)
            {
              if (v21 == v22)
                break;
              goto LABEL_50;
            }
          }
        }
      }
LABEL_44:
      WTF::fastFree((WTF *)(v18 - 16), a2);
    }
  }
  if (v7)
    WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::deallocateTable(v7, a2);
}

uint64_t WebCore::getDOMStructure<WebCore::JSWorker>(WebCore::JSWorker *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSWorker::s_info + ~((_QWORD)&WebCore::JSWorker::s_info << 32)) ^ (((unint64_t)&WebCore::JSWorker::s_info + ~((_QWORD)&WebCore::JSWorker::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSWorker::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSWorker::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSWorker::createPrototype(this, a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSWorker::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSWorker::s_info);
}

uint64_t WebCore::getDOMStructure<WebCore::JSAttr>(WebCore::JSAttr *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSAttr::s_info + ~((_QWORD)&WebCore::JSAttr::s_info << 32)) ^ (((unint64_t)&WebCore::JSAttr::s_info + ~((_QWORD)&WebCore::JSAttr::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSAttr::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSAttr::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSAttr::createPrototype(this, a2, a3);
  v16 = Prototype;
  v20 = 242;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSAttr::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSAttr::s_info);
}

uint64_t WebCore::getDOMStructure<WebCore::JSHTMLTableCellElement>(uint64_t a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSHTMLTableCellElement::s_info
        + ~((_QWORD)&WebCore::JSHTMLTableCellElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLTableCellElement::s_info
                                                                       + ~((_QWORD)&WebCore::JSHTMLTableCellElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSHTMLTableCellElement::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSHTMLTableCellElement::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)(a1 + 40136);
  Prototype = WebCore::JSHTMLTableCellElement::createPrototype((WebCore::JSHTMLTableCellElement *)a1, a2, a3);
  v16 = Prototype;
  v20 = 241;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *(_QWORD *)(a1 + 40144))
  {
    SlowCase = *(_QWORD *)(a1 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(a1 + 40160);
    *(_QWORD *)(a1 + 40144) = SlowCase + HIDWORD(v19);
    *(_QWORD *)(a1 + 40152) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v16, &v20, &WebCore::JSHTMLTableCellElement::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSHTMLTableCellElement::s_info);
}

uint64_t WebCore::getDOMStructure<WebCore::JSHTMLTableElement>(WebCore::JSHTMLTableElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSHTMLTableElement::s_info + ~((_QWORD)&WebCore::JSHTMLTableElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSHTMLTableElement::s_info + ~((_QWORD)&WebCore::JSHTMLTableElement::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSHTMLTableElement::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSHTMLTableElement::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSHTMLTableElement::createPrototype(this, a2, a3);
  v16 = Prototype;
  v20 = 241;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSHTMLTableElement::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSHTMLTableElement::s_info);
}

uint64_t WebCore::getDOMStructure<WebCore::JSHTMLMediaElement>(WebCore::JSHTMLMediaElement *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSHTMLMediaElement::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSHTMLMediaElement::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSHTMLMediaElement::s_info);
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMPluginArray>(WebCore::JSDOMPluginArray *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSDOMPluginArray::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSDOMPluginArray::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSDOMPluginArray::s_info);
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSGeolocation>(WebCore::JSGeolocation *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSGeolocation::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSGeolocation::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSGeolocation::s_info);
  }
  return result;
}

int8x16_t *WebCore::SecurityContext::parseSandboxPolicy(int8x16_t *result, uint64_t a2, WTF::StringImpl **a3)
{
  int8x16_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int8x16_t *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v42;
  int8x16_t *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl **v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unsigned int v56;
  char v57;
  char v58;
  int8x16_t *v59[2];

  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 1;
  if ((_DWORD)a2)
  {
    v4 = result;
    LODWORD(v5) = 0;
    v6 = 0;
    v7 = a2 & 0xFF00000000;
    v8 = a2;
    v9 = 0xFFFFFFFFLL;
    v10 = ", '";
    while (1)
    {
      v5 = v5;
      if (v7)
      {
        while (1)
        {
          v15 = v4->u8[v5];
          v12 = v15 > 0x20;
          v16 = (1 << v15) & 0x100003600;
          if (v12 || v16 == 0)
            break;
          if (++v5 >= v8)
            goto LABEL_304;
        }
      }
      else
      {
        while (1)
        {
          v11 = v4->u16[v5];
          v12 = v11 > 0x20;
          v13 = (1 << v11) & 0x100003600;
          if (v12 || v13 == 0)
            break;
          if (++v5 >= v8)
            goto LABEL_304;
        }
      }
      v18 = (v5 + 1);
      if (v18 > a2)
        v19 = v5 + 1;
      else
        v19 = a2;
      v20 = v19 - 1;
      if (v7)
      {
        v26 = &v4->u8[v18];
        v22 = v5;
        while (++v22 < a2)
        {
          v27 = *v26++;
          v28 = (1 << v27) & 0x100003600;
          if (v27 <= 0x20 && v28 != 0)
          {
LABEL_33:
            v20 = v22 - 1;
            goto LABEL_34;
          }
        }
      }
      else
      {
        v21 = (unsigned __int16 *)v4 + v18;
        v22 = v5;
        while (++v22 < a2)
        {
          v23 = *v21++;
          v24 = (1 << v23) & 0x100003600;
          if (v23 <= 0x20 && v24 != 0)
            goto LABEL_33;
        }
      }
      v22 = v19;
LABEL_34:
      v30 = v22 - v5;
      if ((int)a2 - (int)v5 <= v30)
      {
        v34 = v4;
        v32 = a2;
        if (!(_DWORD)v5)
          goto LABEL_41;
        v30 = a2 - v5;
      }
      v31 = v5;
      v32 = v30;
      v33 = v8 - v5;
      if (v7)
      {
        if (v33 < v30)
          goto LABEL_322;
        v34 = (int8x16_t *)((char *)v4 + v31);
        v32 = v30 | 0x100000000;
      }
      else
      {
        if (v33 < v30)
        {
LABEL_322:
          __break(1u);
          return result;
        }
        v34 = (int8x16_t *)((char *)v4 + 2 * v31);
      }
LABEL_41:
      v35 = (v32 - 11);
      if (v35 <= 0x13)
        __asm { BR              X9 }
      if ((_DWORD)v32 == 39)
      {
        if ((v32 & 0xFF00000000) != 0)
        {
          if ((v34->i8[0] & 0xDF) == 0x41
            && (v34->i8[1] & 0xDF) == 0x4C
            && (v34->i8[2] & 0xDF) == 0x4C
            && (v34->i8[3] & 0xDF) == 0x4F
            && (v34->i8[4] & 0xDF) == 0x57
            && (v34->i8[5] & 0xDF) == 0xD
            && (v34->i8[6] & 0xDF) == 0x54
            && (v34->i8[7] & 0xDF) == 0x4F
            && (v34->i8[8] & 0xDF) == 0x50
            && (v34->i8[9] & 0xDF) == 0xD
            && (v34->i8[10] & 0xDF) == 0x4E
            && (v34->i8[11] & 0xDF) == 0x41
            && (v34->i8[12] & 0xDF) == 0x56
            && (v34->i8[13] & 0xDF) == 0x49
            && (v34->i8[14] & 0xDF) == 0x47
            && (v34->i8[15] & 0xDF) == 0x41
            && (v34[1].i8[0] & 0xDF) == 0x54
            && (v34[1].i8[1] & 0xDF) == 0x49
            && (v34[1].i8[2] & 0xDF) == 0x4F
            && (v34[1].i8[3] & 0xDF) == 0x4E
            && (v34[1].i8[4] & 0xDF) == 0xD
            && (v34[1].i8[5] & 0xDF) == 0x42
            && (v34[1].i8[6] & 0xDF) == 0x59
            && (v34[1].i8[7] & 0xDF) == 0xD
            && (v34[1].i8[8] & 0xDF) == 0x55
            && (v34[1].i8[9] & 0xDF) == 0x53
            && (v34[1].i8[10] & 0xDF) == 0x45
            && (v34[1].i8[11] & 0xDF) == 0x52
            && (v34[1].i8[12] & 0xDF) == 0xD
            && (v34[1].i8[13] & 0xDF) == 0x41
            && (v34[1].i8[14] & 0xDF) == 0x43
            && (v34[1].i8[15] & 0xDF) == 0x54
            && (v34[2].i8[0] & 0xDF) == 0x49
            && (v34[2].i8[1] & 0xDF) == 0x56
            && (v34[2].i8[2] & 0xDF) == 0x41
            && (v34[2].i8[3] & 0xDF) == 0x54
            && (v34[2].i8[4] & 0xDF) == 0x49
            && (v34[2].i8[5] & 0xDF) == 0x4F
            && (v34[2].i8[6] & 0xDF) == 0x4E)
          {
            goto LABEL_102;
          }
          if ((v34->i8[0] & 0xDF) == 0x41
            && (v34->i8[1] & 0xDF) == 0x4C
            && (v34->i8[2] & 0xDF) == 0x4C
            && (v34->i8[3] & 0xDF) == 0x4F
            && (v34->i8[4] & 0xDF) == 0x57
            && (v34->i8[5] & 0xDF) == 0xD
            && (v34->i8[6] & 0xDF) == 0x53
            && (v34->i8[7] & 0xDF) == 0x54
            && (v34->i8[8] & 0xDF) == 0x4F
            && (v34->i8[9] & 0xDF) == 0x52
            && (v34->i8[10] & 0xDF) == 0x41
            && (v34->i8[11] & 0xDF) == 0x47
            && (v34->i8[12] & 0xDF) == 0x45
            && (v34->i8[13] & 0xDF) == 0xD
            && (v34->i8[14] & 0xDF) == 0x41
            && (v34->i8[15] & 0xDF) == 0x43
            && (v34[1].i8[0] & 0xDF) == 0x43
            && (v34[1].i8[1] & 0xDF) == 0x45
            && (v34[1].i8[2] & 0xDF) == 0x53
            && (v34[1].i8[3] & 0xDF) == 0x53
            && (v34[1].i8[4] & 0xDF) == 0xD
            && (v34[1].i8[5] & 0xDF) == 0x42
            && (v34[1].i8[6] & 0xDF) == 0x59
            && (v34[1].i8[7] & 0xDF) == 0xD
            && (v34[1].i8[8] & 0xDF) == 0x55
            && (v34[1].i8[9] & 0xDF) == 0x53
            && (v34[1].i8[10] & 0xDF) == 0x45
            && (v34[1].i8[11] & 0xDF) == 0x52
            && (v34[1].i8[12] & 0xDF) == 0xD
            && (v34[1].i8[13] & 0xDF) == 0x41
            && (v34[1].i8[14] & 0xDF) == 0x43
            && (v34[1].i8[15] & 0xDF) == 0x54
            && (v34[2].i8[0] & 0xDF) == 0x49
            && (v34[2].i8[1] & 0xDF) == 0x56
            && (v34[2].i8[2] & 0xDF) == 0x41
            && (v34[2].i8[3] & 0xDF) == 0x54
            && (v34[2].i8[4] & 0xDF) == 0x49
            && (v34[2].i8[5] & 0xDF) == 0x4F)
          {
            v47 = v34[2].u8[6];
            goto LABEL_185;
          }
        }
        else if ((v34->i16[0] & 0xFFDF) == 0x41)
        {
          if ((v34->i16[1] & 0xFFDF) == 0x4C
            && (v34->i16[2] & 0xFFDF) == 0x4C
            && (v34->i16[3] & 0xFFDF) == 0x4F
            && (v34->i16[4] & 0xFFDF) == 0x57
            && (v34->i16[5] & 0xFFDF) == 0xD
            && (v34->i16[6] & 0xFFDF) == 0x54
            && (v34->i16[7] & 0xFFDF) == 0x4F
            && (v34[1].i16[0] & 0xFFDF) == 0x50
            && (v34[1].i16[1] & 0xFFDF) == 0xD
            && (v34[1].i16[2] & 0xFFDF) == 0x4E
            && (v34[1].i16[3] & 0xFFDF) == 0x41
            && (v34[1].i16[4] & 0xFFDF) == 0x56
            && (v34[1].i16[5] & 0xFFDF) == 0x49
            && (v34[1].i16[6] & 0xFFDF) == 0x47
            && (v34[1].i16[7] & 0xFFDF) == 0x41
            && (v34[2].i16[0] & 0xFFDF) == 0x54
            && (v34[2].i16[1] & 0xFFDF) == 0x49
            && (v34[2].i16[2] & 0xFFDF) == 0x4F
            && (v34[2].i16[3] & 0xFFDF) == 0x4E
            && (v34[2].i16[4] & 0xFFDF) == 0xD
            && (v34[2].i16[5] & 0xFFDF) == 0x42
            && (v34[2].i16[6] & 0xFFDF) == 0x59
            && (v34[2].i16[7] & 0xFFDF) == 0xD
            && (v34[3].i16[0] & 0xFFDF) == 0x55
            && (v34[3].i16[1] & 0xFFDF) == 0x53
            && (v34[3].i16[2] & 0xFFDF) == 0x45
            && (v34[3].i16[3] & 0xFFDF) == 0x52
            && (v34[3].i16[4] & 0xFFDF) == 0xD
            && (v34[3].i16[5] & 0xFFDF) == 0x41
            && (v34[3].i16[6] & 0xFFDF) == 0x43
            && (v34[3].i16[7] & 0xFFDF) == 0x54
            && (v34[4].i16[0] & 0xFFDF) == 0x49
            && (v34[4].i16[1] & 0xFFDF) == 0x56
            && (v34[4].i16[2] & 0xFFDF) == 0x41
            && (v34[4].i16[3] & 0xFFDF) == 0x54
            && (v34[4].i16[4] & 0xFFDF) == 0x49
            && (v34[4].i16[5] & 0xFFDF) == 0x4F
            && (v34[4].i16[6] & 0xFFDF) == 0x4E)
          {
LABEL_102:
            v9 = v9 & 0xFFFFFBFF;
            goto LABEL_55;
          }
          if ((v34->i16[1] & 0xFFDF) == 0x4C
            && (v34->i16[2] & 0xFFDF) == 0x4C
            && (v34->i16[3] & 0xFFDF) == 0x4F
            && (v34->i16[4] & 0xFFDF) == 0x57
            && (v34->i16[5] & 0xFFDF) == 0xD
            && (v34->i16[6] & 0xFFDF) == 0x53
            && (v34->i16[7] & 0xFFDF) == 0x54
            && (v34[1].i16[0] & 0xFFDF) == 0x4F
            && (v34[1].i16[1] & 0xFFDF) == 0x52
            && (v34[1].i16[2] & 0xFFDF) == 0x41
            && (v34[1].i16[3] & 0xFFDF) == 0x47
            && (v34[1].i16[4] & 0xFFDF) == 0x45
            && (v34[1].i16[5] & 0xFFDF) == 0xD
            && (v34[1].i16[6] & 0xFFDF) == 0x41
            && (v34[1].i16[7] & 0xFFDF) == 0x43
            && (v34[2].i16[0] & 0xFFDF) == 0x43
            && (v34[2].i16[1] & 0xFFDF) == 0x45
            && (v34[2].i16[2] & 0xFFDF) == 0x53
            && (v34[2].i16[3] & 0xFFDF) == 0x53
            && (v34[2].i16[4] & 0xFFDF) == 0xD
            && (v34[2].i16[5] & 0xFFDF) == 0x42
            && (v34[2].i16[6] & 0xFFDF) == 0x59
            && (v34[2].i16[7] & 0xFFDF) == 0xD
            && (v34[3].i16[0] & 0xFFDF) == 0x55
            && (v34[3].i16[1] & 0xFFDF) == 0x53
            && (v34[3].i16[2] & 0xFFDF) == 0x45
            && (v34[3].i16[3] & 0xFFDF) == 0x52
            && (v34[3].i16[4] & 0xFFDF) == 0xD
            && (v34[3].i16[5] & 0xFFDF) == 0x41
            && (v34[3].i16[6] & 0xFFDF) == 0x43
            && (v34[3].i16[7] & 0xFFDF) == 0x54
            && (v34[4].i16[0] & 0xFFDF) == 0x49
            && (v34[4].i16[1] & 0xFFDF) == 0x56
            && (v34[4].i16[2] & 0xFFDF) == 0x41
            && (v34[4].i16[3] & 0xFFDF) == 0x54
            && (v34[4].i16[4] & 0xFFDF) == 0x49
            && (v34[4].i16[5] & 0xFFDF) == 0x4F)
          {
            v47 = v34[4].u16[6];
LABEL_185:
            if ((v47 & 0xFFFFFFDF) == 0x4E)
            {
              v9 = v9 & 0xFFFFDFFF;
              goto LABEL_55;
            }
          }
        }
      }
      else
      {
        if ((_DWORD)v32 != 40)
          goto LABEL_45;
        if ((v32 & 0xFF00000000) != 0)
        {
          if ((v34->i8[0] & 0xDF) != 0x41
            || (v34->i8[1] & 0xDF) != 0x4C
            || (v34->i8[2] & 0xDF) != 0x4C
            || (v34->i8[3] & 0xDF) != 0x4F
            || (v34->i8[4] & 0xDF) != 0x57
            || (v34->i8[5] & 0xDF) != 0xD
            || (v34->i8[6] & 0xDF) != 0x54
            || (v34->i8[7] & 0xDF) != 0x4F
            || (v34->i8[8] & 0xDF) != 0x50
            || (v34->i8[9] & 0xDF) != 0xD
            || (v34->i8[10] & 0xDF) != 0x4E
            || (v34->i8[11] & 0xDF) != 0x41
            || (v34->i8[12] & 0xDF) != 0x56
            || (v34->i8[13] & 0xDF) != 0x49
            || (v34->i8[14] & 0xDF) != 0x47
            || (v34->i8[15] & 0xDF) != 0x41
            || (v34[1].i8[0] & 0xDF) != 0x54
            || (v34[1].i8[1] & 0xDF) != 0x49
            || (v34[1].i8[2] & 0xDF) != 0x4F
            || (v34[1].i8[3] & 0xDF) != 0x4E
            || (v34[1].i8[4] & 0xDF) != 0xD
            || (v34[1].i8[5] & 0xDF) != 0x54
            || (v34[1].i8[6] & 0xDF) != 0x4F
            || (v34[1].i8[7] & 0xDF) != 0xD
            || (v34[1].i8[8] & 0xDF) != 0x43
            || (v34[1].i8[9] & 0xDF) != 0x55
            || (v34[1].i8[10] & 0xDF) != 0x53
            || (v34[1].i8[11] & 0xDF) != 0x54
            || (v34[1].i8[12] & 0xDF) != 0x4F
            || (v34[1].i8[13] & 0xDF) != 0x4D
            || (v34[1].i8[14] & 0xDF) != 0xD
            || (v34[1].i8[15] & 0xDF) != 0x50
            || (v34[2].i8[0] & 0xDF) != 0x52
            || (v34[2].i8[1] & 0xDF) != 0x4F
            || (v34[2].i8[2] & 0xDF) != 0x54
            || (v34[2].i8[3] & 0xDF) != 0x4F
            || (v34[2].i8[4] & 0xDF) != 0x43
            || (v34[2].i8[5] & 0xDF) != 0x4F
            || (v34[2].i8[6] & 0xDF) != 0x4C)
          {
            goto LABEL_45;
          }
          v46 = v34[2].u8[7];
        }
        else
        {
          if ((v34->i16[0] & 0xFFDF) != 0x41
            || (v34->i16[1] & 0xFFDF) != 0x4C
            || (v34->i16[2] & 0xFFDF) != 0x4C
            || (v34->i16[3] & 0xFFDF) != 0x4F
            || (v34->i16[4] & 0xFFDF) != 0x57
            || (v34->i16[5] & 0xFFDF) != 0xD
            || (v34->i16[6] & 0xFFDF) != 0x54
            || (v34->i16[7] & 0xFFDF) != 0x4F
            || (v34[1].i16[0] & 0xFFDF) != 0x50
            || (v34[1].i16[1] & 0xFFDF) != 0xD
            || (v34[1].i16[2] & 0xFFDF) != 0x4E
            || (v34[1].i16[3] & 0xFFDF) != 0x41
            || (v34[1].i16[4] & 0xFFDF) != 0x56
            || (v34[1].i16[5] & 0xFFDF) != 0x49
            || (v34[1].i16[6] & 0xFFDF) != 0x47
            || (v34[1].i16[7] & 0xFFDF) != 0x41
            || (v34[2].i16[0] & 0xFFDF) != 0x54
            || (v34[2].i16[1] & 0xFFDF) != 0x49
            || (v34[2].i16[2] & 0xFFDF) != 0x4F
            || (v34[2].i16[3] & 0xFFDF) != 0x4E
            || (v34[2].i16[4] & 0xFFDF) != 0xD
            || (v34[2].i16[5] & 0xFFDF) != 0x54
            || (v34[2].i16[6] & 0xFFDF) != 0x4F
            || (v34[2].i16[7] & 0xFFDF) != 0xD
            || (v34[3].i16[0] & 0xFFDF) != 0x43
            || (v34[3].i16[1] & 0xFFDF) != 0x55
            || (v34[3].i16[2] & 0xFFDF) != 0x53
            || (v34[3].i16[3] & 0xFFDF) != 0x54
            || (v34[3].i16[4] & 0xFFDF) != 0x4F
            || (v34[3].i16[5] & 0xFFDF) != 0x4D
            || (v34[3].i16[6] & 0xFFDF) != 0xD
            || (v34[3].i16[7] & 0xFFDF) != 0x50
            || (v34[4].i16[0] & 0xFFDF) != 0x52
            || (v34[4].i16[1] & 0xFFDF) != 0x4F
            || (v34[4].i16[2] & 0xFFDF) != 0x54
            || (v34[4].i16[3] & 0xFFDF) != 0x4F
            || (v34[4].i16[4] & 0xFFDF) != 0x43
            || (v34[4].i16[5] & 0xFFDF) != 0x4F
            || (v34[4].i16[6] & 0xFFDF) != 0x4C)
          {
            goto LABEL_45;
          }
          v46 = v34[4].u16[7];
        }
        if ((v46 & 0xFFFFFFDF) == 0x53)
        {
          v9 = v9 & 0xFFFFBFFF;
          goto LABEL_55;
        }
      }
LABEL_45:
      v53 = v9;
      v52 = a3;
      if (v6)
      {
        v36 = (WTF::StringImpl *)a2;
        v37 = v6;
        v38 = v7;
        v39 = v10;
      }
      else
      {
        LOBYTE(v59[0]) = 39;
        if (v55)
        {
          v40 = v56;
          if (v56 < *((_DWORD *)v55 + 1) && v54 == 0)
          {
            v36 = (WTF::StringImpl *)a2;
            v37 = 0;
            v38 = v7;
            v39 = v10;
            v44 = *((_DWORD *)v55 + 4);
            v45 = *((_QWORD *)v55 + 1);
            ++v56;
            if ((v44 & 4) != 0)
              *(_BYTE *)(v45 + v40) = 39;
            else
              *(_WORD *)(v45 + 2 * v40) = 39;
            goto LABEL_54;
          }
        }
        v36 = (WTF::StringImpl *)a2;
        v37 = 0;
        v38 = v7;
        v39 = v10;
      }
      v42 = v32;
      v43 = v34;
      WTF::StringBuilder::append();
      v34 = v43;
      v32 = v42;
LABEL_54:
      v59[0] = v34;
      v59[1] = (int8x16_t *)v32;
      v58 = 39;
      result = (int8x16_t *)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v54, v59, &v58);
      v6 = v37 + 1;
      v10 = v39;
      v7 = v38;
      a3 = v52;
      v9 = v53;
      a2 = (uint64_t)v36;
LABEL_55:
      LODWORD(v5) = v20 + 2;
      if (v20 + 2 >= a2)
      {
LABEL_304:
        if (v6)
        {
          WTF::StringBuilder::append();
          v48 = v54;
          if (v54
            || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v54),
                WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v54),
                (v48 = v54) != 0))
          {
            *(_DWORD *)v48 += 2;
          }
          v49 = *a3;
          *a3 = v48;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v49 -= 2;
          }
        }
        goto LABEL_312;
      }
    }
  }
  v9 = 0xFFFFFFFFLL;
LABEL_312:
  v50 = v55;
  v55 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v50 -= 2;
  }
  v51 = v54;
  v54 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v51 -= 2;
  }
  return (int8x16_t *)v9;
}

void WebCore::ScheduledAction::~ScheduledAction(WebCore::ScheduledAction *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WebCore::DOMWrapperWorld *v18;
  WTF *v19;
  void *v20;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = (uint64_t *)((char *)v4 + 8);
    v6 = *(unsigned int *)v4;
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      do
      {
        v8 = *v5;
        if (*v5)
        {
          v9 = (uint64_t *)(v8 - 16);
          v10 = *(_QWORD *)(((v8 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v11 = *(uint64_t **)(v8 - 8);
          if (v11)
          {
            v12 = *v9;
            *v11 = *v9;
            *(_QWORD *)(v12 + 8) = v11;
            *v9 = 0;
            v9[1] = 0;
          }
          *v9 = *(_QWORD *)(v10 + 40);
          *(_QWORD *)(v10 + 40) = v9;
          *v5 = 0;
        }
        ++v5;
        v7 -= 8;
      }
      while (v7);
    }
    WTF::fastFree(v4, a2);
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    v14 = (uint64_t *)(v13 - 16);
    v15 = *(_QWORD *)(((v13 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v16 = *(uint64_t **)(v13 - 8);
    if (v16)
    {
      v17 = *v14;
      *v16 = *v14;
      *(_QWORD *)(v17 + 8) = v16;
      *v14 = 0;
      v14[1] = 0;
    }
    *v14 = *(_QWORD *)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;
    *((_QWORD *)this + 1) = 0;
  }
  v18 = *(WebCore::DOMWrapperWorld **)this;
  *(_QWORD *)this = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v18, a2);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*(_DWORD *)v18;
    }
  }
}

uint64_t WebCore::SQLiteStatement::bindDouble(sqlite3_stmt **this, int a2, double a3)
{
  return sqlite3_bind_double(this[1], a2, a3);
}

void WebCore::ProgressTracker::progressCompleted(WebCore::ProgressTracker *this, WebCore::LocalFrame *a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  void *v12;
  _BOOL4 v13;
  double v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  WebCore::Page *v18;
  WTF::MonotonicTime *v19;
  uint64_t v20;
  WebCore::Page *v21;
  uint64_t v22;
  WebCore::FrameLoader *v23;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _BYTE buf[12];
  __int16 v41;
  WebCore::LocalFrame *v42;
  __int16 v43;
  _BYTE v44[14];
  __int16 v45;
  _BYTE v46[10];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 16);
    v6 = *((_DWORD *)this + 38);
    v7 = *((_QWORD *)this + 3);
    v8 = *((unsigned __int8 *)this + 161);
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)&buf[4] = this;
    v41 = 2048;
    v42 = a2;
    v43 = 2048;
    *(_QWORD *)v44 = v5;
    *(_WORD *)&v44[8] = 1024;
    *(_DWORD *)&v44[10] = v6;
    v45 = 2048;
    *(_QWORD *)v46 = v7;
    *(_WORD *)&v46[8] = 1024;
    v47 = v8;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - ProgressTracker::progressCompleted: frame %p, value %f, tracked frames %d, originating frame %p, isMainLoad %d", buf, 0x36u);
  }
  if (*((int *)this + 38) >= 1)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
    v9 = *((_DWORD *)this + 38);
    v10 = v9 - 1;
    *((_DWORD *)this + 38) = v9 - 1;
    if (v9 != 1 && *((WebCore::LocalFrame **)this + 3) != a2)
    {
LABEL_26:
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
      return;
    }
    v11 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 0;
      v14 = *((double *)this + 16);
      v15 = *((_QWORD *)this + 3);
      v16 = *((unsigned __int8 *)this + 161);
      if (v15)
      {
        if (*((_BYTE *)this + 161))
        {
          v13 = 0;
          if (v14 != 0.0 && v14 < 0.9)
            v13 = *((_DWORD *)this + 39) < 4u;
        }
      }
      *(_DWORD *)buf = 134219264;
      *(_QWORD *)&buf[4] = this;
      v41 = 2048;
      v42 = *(WebCore::LocalFrame **)&v14;
      v43 = 1024;
      *(_DWORD *)v44 = v10;
      *(_WORD *)&v44[4] = 2048;
      *(_QWORD *)&v44[6] = v15;
      v45 = 1024;
      *(_DWORD *)v46 = v16;
      *(_WORD *)&v46[4] = 1024;
      *(_DWORD *)&v46[6] = v13;
      _os_log_impl(&dword_1940B8000, v11, OS_LOG_TYPE_DEFAULT, "%p - ProgressTracker::finalProgressComplete: value %f, tracked frames %d, originating frame %p, isMainLoad %d, isMainLoadProgressing %d", buf, 0x32u);
    }
    v17 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (!*((_BYTE *)this + 160))
    {
      *((_QWORD *)this + 16) = 0x3FF0000000000000;
      (*(void (**)(_QWORD, unsigned int *))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), v17);
      v18 = *(WebCore::Page **)(*((_QWORD *)this + 1) + 8);
      ++*(_DWORD *)v18;
      WebCore::Page::progressEstimateChanged(v18, (WebCore::LocalFrame *)v17);
      if (*(_DWORD *)v18 == 1)
      {
        WebCore::Page::~Page(v18);
        WTF::fastFree(v30, v31);
      }
      else
      {
        --*(_DWORD *)v18;
      }
    }
    v19 = (WTF::MonotonicTime *)WebCore::ProgressTracker::reset((uint64_t)this, v12);
    if (*((_BYTE *)this + 161))
    {
      WTF::MonotonicTime::now(v19);
      *((_QWORD *)this + 17) = v32;
    }
    v20 = *((_QWORD *)v17 + 35);
    ++*(_DWORD *)v20;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 16) + 464))(*(_QWORD *)(v20 + 16), 1);
    if (*(_DWORD *)v20)
    {
      --*(_DWORD *)v20;
      (*(void (**)(_QWORD, unsigned int *))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2), v17);
      v21 = *(WebCore::Page **)(*((_QWORD *)this + 1) + 8);
      ++*(_DWORD *)v21;
      v22 = *((_QWORD *)v17 + 37);
      if (!v22)
      {
LABEL_19:
        if (*(_DWORD *)v21 == 1)
        {
          WebCore::Page::~Page(v21);
          WTF::fastFree(v28, v29);
        }
        else
        {
          --*(_DWORD *)v21;
        }
        v23 = (WebCore::FrameLoader *)*((_QWORD *)v17 + 35);
        ++*(_DWORD *)v23;
        WebCore::FrameLoader::loadProgressingStatusChanged(v23);
        if (!*(_DWORD *)v23)
        {
          __break(0xC471u);
          JUMPOUT(0x19459D4C8);
        }
        --*(_DWORD *)v23;
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v33 = *((_QWORD *)v17 + 3);
          if (v33)
          {
            v34 = *(_QWORD *)(v33 + 8);
            if (v34)
              WebCore::InspectorInstrumentation::frameStoppedLoadingImpl(*(_QWORD *)(*(_QWORD *)(v34 + 80) + 8), (WebCore::Frame *)v17);
          }
        }
        v25 = v17 + 2;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v35 = off_1E31FE290;
          v35[1] = v25;
          *(_QWORD *)buf = v35;
          WTF::ensureOnMainThread();
          v36 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        }
        goto LABEL_26;
      }
      *(_DWORD *)(v22 + 24) += 2;
      if (!WebCore::Document::hasEverCreatedAnAXObjectCache
        || (v39 = v22, v37 = WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)v22), v22 = v39, !v37))
      {
LABEL_17:
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
        goto LABEL_19;
      }
      ++*(_DWORD *)(v37 + 8);
      JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(v37);
      v38 = *(_DWORD *)(v37 + 8);
      if (v38)
      {
        *(_DWORD *)(v37 + 8) = v38 - 1;
        v22 = v39;
        goto LABEL_17;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x19459D4A8);
  }
}

WTF::StringImpl *WebCore::ProgressTracker::progressStarted(WebCore::ProgressTracker *this, WebCore::LocalFrame *a2)
{
  void *v4;
  WTF::MonotonicTime *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  double v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  WebCore::FrameLoader *v16;
  WTF::MonotonicTime *v17;
  uint64_t v18;
  BOOL v19;
  double v20;
  char v21;
  WebCore::Page *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *result;
  WTF *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE v40[12];
  __int16 v41;
  WebCore::LocalFrame *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  if (!*((_DWORD *)this + 38) || *((WebCore::LocalFrame **)this + 3) == a2)
  {
    v5 = (WTF::MonotonicTime *)WebCore::ProgressTracker::reset((uint64_t)this, v4);
    *((_QWORD *)this + 16) = 0x3FB999999999999ALL;
    v6 = (unsigned int *)((char *)a2 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = a2;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v37 = off_1E31FE290;
        v37[1] = v9;
        *(_QWORD *)v40 = v37;
        WTF::ensureOnMainThread();
        v5 = *(WTF::MonotonicTime **)v40;
        *(_QWORD *)v40 = 0;
        if (v5)
          v5 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
    *((_QWORD *)this + 8) = 0x3FB999999999999ALL;
    WTF::MonotonicTime::now(v5);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 40, v12 + 0.1);
    v13 = (unsigned int *)*((_QWORD *)this + 3);
    if (v13)
    {
      v14 = v13 + 2;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
    v16 = (WebCore::FrameLoader *)*((_QWORD *)v13 + 35);
    ++*(_DWORD *)v16;
    WebCore::FrameLoader::loadProgressingStatusChanged(v16);
    if (!*(_DWORD *)v16)
    {
      __break(0xC471u);
      JUMPOUT(0x19459D878);
    }
    --*(_DWORD *)v16;
    v18 = *((_QWORD *)v13 + 7);
    if (v18)
      v19 = *(_QWORD *)(v18 + 8) == 0;
    else
      v19 = 1;
    WTF::MonotonicTime::now(v17);
    v21 = v20 - *((double *)this + 17) < 1.0 || v19;
    *((_BYTE *)this + 161) = v21;
    (*(void (**)(_QWORD, unsigned int *))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2), v13);
    v22 = *(WebCore::Page **)(*((_QWORD *)this + 1) + 8);
    ++*(_DWORD *)v22;
    WebCore::Page::progressEstimateChanged(v22, (WebCore::LocalFrame *)v13);
    if (*(_DWORD *)v22 == 1)
    {
      WebCore::Page::~Page(v22);
      WTF::fastFree(v33, v34);
    }
    else
    {
      --*(_DWORD *)v22;
    }
    v23 = v13 + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v38 = off_1E31FE290;
      v38[1] = v23;
      *(_QWORD *)v40 = v38;
      WTF::ensureOnMainThread();
      v39 = *(_QWORD *)v40;
      *(_QWORD *)v40 = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    }
  }
  v26 = *((_DWORD *)this + 38) + 1;
  *((_DWORD *)this + 38) = v26;
  v27 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v28 = *((_QWORD *)this + 16);
    v29 = *((_QWORD *)this + 3);
    v30 = *((unsigned __int8 *)this + 161);
    *(_DWORD *)v40 = 134219264;
    *(_QWORD *)&v40[4] = this;
    v41 = 2048;
    v42 = a2;
    v43 = 2048;
    v44 = v28;
    v45 = 1024;
    v46 = v26;
    v47 = 2048;
    v48 = v29;
    v49 = 1024;
    v50 = v30;
    _os_log_impl(&dword_1940B8000, v27, OS_LOG_TYPE_DEFAULT, "%p - ProgressTracker::progressStarted: frame %p, value %f, tracked frames %d, originating frame %p, isMainLoad %d", v40, 0x36u);
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v35 = *((_QWORD *)a2 + 3);
    if (v35)
    {
      v36 = *(_QWORD *)(v35 + 8);
      if (v36)
        return WebCore::InspectorInstrumentation::frameStartedLoadingImpl(*(_QWORD *)(*(_QWORD *)(v36 + 80) + 8), a2);
    }
  }
  return result;
}

unint64_t WebCore::JSTextPrototype::create(WebCore::JSTextPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSText::s_info, &WebCore::JSTextPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSSVGSVGElement::subspaceForImpl(WebCore::JSSVGSVGElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6952);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v20 = *(_QWORD *)(v9 + 6952);
  if (!v20)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v14, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v20 = v14;
    v18 = *(_QWORD *)(v9 + 6952);
    *(_QWORD *)(v9 + 6952) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
      *(_DWORD *)(v7 + 2844) = v19 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 6952);
  *(_QWORD *)(v3 + 6952) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSSVGSVGElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSCharacterData::prototype(WebCore::JSCharacterData *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSCell *v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  int v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSCharacterData::s_info + ~((_QWORD)&WebCore::JSCharacterData::s_info << 32)) ^ (((unint64_t)&WebCore::JSCharacterData::s_info + ~((_QWORD)&WebCore::JSCharacterData::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSCharacterData::s_info)
  {
    v19 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v19) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v19;
      if (v11 == &WebCore::JSCharacterData::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    v13 = (JSC::JSCell *)WebCore::JSNode::prototype(this, a2, a3);
    Structure = WebCore::JSCharacterDataPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v13);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSCharacterDataPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSCharacterData::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSCharacterData::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

uint64_t WebCore::JSCharacterData::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::HiddenInputType::rendererIsNeeded(WebCore::HiddenInputType *this)
{
  return 0;
}

void WebCore::HTMLTreeBuilder::processStartTagForInTable(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned __int16 **v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t *Attribute;
  char v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;
  char v15;
  __int16 v16;
  __int16 v17;

  v4 = *(unsigned __int16 *)(a2 + 58);
  if (v4 > 0x3E)
  {
    switch(*(_WORD *)(a2 + 58))
    {
      case 't':
        if (WebCore::HTMLTreeBuilder::processTableEndTagForInTable((unsigned __int16 **)a1))
          WebCore::HTMLTreeBuilder::processStartTag(a1, a2);
        return;
      case 'u':
      case 'y':
      case '{':
        v5 = (unsigned __int16 **)(a1 + 112);
        while (2)
        {
          v6 = **v5;
          if (v6 == 116 || v6 == 119)
            break;
          v12 = *((_QWORD *)*v5 + 1);
          if (v12)
          {
            if (v6 != 59 && (*(_WORD *)(v12 + 28) & 0xF000) != 0xB000)
              goto LABEL_35;
          }
          else if (v6 != 59)
          {
LABEL_35:
            WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)(a1 + 112));
            continue;
          }
          break;
        }
        WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
        v7 = 13;
        break;
      case 'v':
      case 'z':
      case '}':
        v14 = 0;
        memset(v13, 0, sizeof(v13));
        v15 = 2;
        v16 = 117;
        v17 = 0;
        WebCore::HTMLTreeBuilder::processStartTag(a1, v13);
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v13, v8);
        goto LABEL_9;
      case 'w':
        WebCore::HTMLTreeBuilder::processTemplateStartTag(a1, a2);
        return;
      case 'x':
      case '|':
        goto LABEL_25;
      default:
        if (v4 - 255 < 2)
        {
          WebCore::HTMLTreeBuilder::processStartTagForInHead(a1, a2);
          return;
        }
        if (v4 != 63)
          goto LABEL_25;
        Attribute = WebCore::findAttribute(a2 + 24, &WebCore::HTMLNames::typeAttr);
        if (!Attribute || !WTF::equalLettersIgnoringASCIICase(Attribute + 1, "hidden", 7uLL))
          goto LABEL_25;
        WebCore::HTMLConstructionSite::insertSelfClosingHTMLElement((WebCore::HTMLConstructionSite *)(a1 + 56), (WTF::StringImpl **)a2);
        return;
    }
    goto LABEL_6;
  }
  if (*(unsigned __int16 *)(a2 + 58) <= 0x19u)
  {
    if (v4 == 22)
    {
      WebCore::HTMLElementStack::popUntilTableScopeMarker((WebCore::HTMLElementStack *)(a1 + 112));
      WebCore::HTMLFormattingElementList::appendMarker(a1 + 152);
      WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
      v7 = 11;
LABEL_6:
      *(_DWORD *)(a1 + 240) = v7;
      return;
    }
    goto LABEL_25;
  }
  switch(v4)
  {
    case 0x1Au:
      v13[0] = 0uLL;
      WebCore::HTMLTreeBuilder::processFakeStartTag(a1, 27, v13);
      WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v13, v11);
LABEL_9:
      WebCore::HTMLTreeBuilder::processStartTag(a1, a2);
      break;
    case 0x1Bu:
      WebCore::HTMLElementStack::popUntilTableScopeMarker((WebCore::HTMLElementStack *)(a1 + 112));
      WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
      v7 = 12;
      goto LABEL_6;
    case 0x2Eu:
      if (!*(_QWORD *)(a1 + 104)
        || WebCore::HTMLElementStack::hasTemplateInHTMLScope((unsigned __int16 **)(a1 + 112)))
      {
        WebCore::HTMLConstructionSite::insertHTMLFormElement(a1 + 56, a2);
        WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)(a1 + 112));
      }
      break;
    default:
LABEL_25:
      v10 = *(_BYTE *)(a1 + 226);
      *(_BYTE *)(a1 + 226) = 1;
      WebCore::HTMLTreeBuilder::processStartTagForInBody(a1, a2);
      *(_BYTE *)(a1 + 226) = v10;
      return;
  }
}

void WebCore::HTMLLinkElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  char v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int isLoading;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  _BOOL8 v18;
  double v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v5 = a2;
  WebCore::HTMLElement::removedFromAncestor(a1, a2, a3, a4, a5);
  if ((v5 & 1) != 0)
  {
    v8 = *(_QWORD *)(a1 + 176);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    if ((*(_BYTE *)(a1 + 291) & 1) != 0)
    {
      isLoading = 1;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 200);
      if (v9 && (v10 = *(_QWORD *)(v9 + 24), *(_DWORD *)(v10 + 68)))
      {
        v23 = 0;
        do
        {
          isLoading = WebCore::StyleRuleImport::isLoading(*(WebCore::StyleRuleImport **)(*(_QWORD *)(v10 + 56) + 8 * v23));
          if (isLoading)
            break;
          ++v23;
        }
        while (v23 < *(unsigned int *)(v10 + 68));
      }
      else
      {
        isLoading = 0;
      }
    }
    v12 = *(_QWORD *)(a1 + 200);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 96);
      *(_QWORD *)(v12 + 96) = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr((unsigned int *)v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, (unsigned int *)v13));
        if (!v15)
        {
          atomic_store(1u, (unsigned int *)v13);
          v20 = *(unsigned int *)(v13 + 28);
          if ((_DWORD)v20)
          {
            v24 = v13;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v20));
            v13 = v24;
          }
          v21 = *(WTF **)(v13 + 16);
          if (v21)
          {
            *(_QWORD *)(v13 + 16) = 0;
            *(_DWORD *)(v13 + 24) = 0;
            v22 = v13;
            WTF::fastFree(v21, v7);
            v13 = v22;
          }
          WTF::fastFree((WTF *)v13, v7);
        }
      }
      v16 = *(_DWORD **)(a1 + 200);
      *(_QWORD *)(a1 + 200) = 0;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
      }
    }
    if (isLoading)
      WebCore::HTMLLinkElement::removePendingSheet((WebCore::HTMLLinkElement *)a1);
    v17 = *(_QWORD *)(a1 + 184);
    if (v17)
    {
      v18 = WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Node>(v17 + 192, a1);
      if (v18)
      {
        if (!*(_BYTE *)(v17 + 233))
        {
          *(_WORD *)(v17 + 232) = 256;
          if (*(_QWORD *)(v17 + 24))
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 16) + 1328) + 234) = 1;
        }
        if ((*(_QWORD *)(v17 + 112) & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)((*(_QWORD *)(v17 + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          *(_QWORD *)(v17 + 104) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v18);
          WebCore::TimerBase::setNextFireTime(v17 + 80, v19 + 0.0);
        }
      }
      *(_QWORD *)(a1 + 184) = 0;
    }
  }
}

uint64_t WebCore::GraphicsLayerCA::removeAnimation(uint64_t result, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  v3 = *(unsigned int *)(result + 820);
  if ((_DWORD)v3)
  {
    v5 = result;
    v6 = a3;
    v7 = (unsigned __int16)a3 & 0xFF00;
    v8 = 56 * v3;
    v9 = (_BYTE *)(*(_QWORD *)(result + 808) + 52);
    do
    {
      result = WTF::equal(*(WTF **)(v9 - 44), *a2, a3);
      if ((_DWORD)result && !*v9 && (!v7 || *(v9 - 36) == v6))
      {
        *v9 = 1;
        result = WebCore::GraphicsLayerCA::noteLayerPropertyChanged(v5, 67117056, 0);
      }
      v9 += 56;
      v8 -= 56;
    }
    while (v8);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::addAnimation(unsigned int *a1, unint64_t a2, float *a3, uint64_t a4, WTF::StringImpl **a5, double a6)
{
  uint64_t result;
  int IsCubicTimingFunctionWithYValueOutOfRange;
  int v14;

  result = WebCore::animationCanBeAccelerated(a2, a4);
  if ((_DWORD)result)
  {
    IsCubicTimingFunctionWithYValueOutOfRange = WebCore::timingFunctionIsCubicTimingFunctionWithYValueOutOfRange(*(_QWORD *)(a4 + 96));
    if (!IsCubicTimingFunctionWithYValueOutOfRange
      || (result = WebCore::keyframeValueListHasSingleIntervalWithLinearOrEquivalentTimingFunction(*(_QWORD *)a2, *(_DWORD *)(a2 + 12)), (_DWORD)result))
    {
      v14 = *(unsigned __int8 *)(a2 + 16);
      if ((v14 - 1) <= 3)
      {
        if ((WebCore::GraphicsLayerCA::createTransformAnimationsFromKeyframes(a1, a2, a4, (_DWORD **)a5, a3, IsCubicTimingFunctionWithYValueOutOfRange, a6) & 1) == 0)return 0;
      }
      else
      {
        if (v14 != 7)
        {
          if (v14 == 8)
          {
            result = WebCore::GraphicsLayerCA::createFilterAnimationsFromKeyframes(a1, (uint64_t *)a2, a4, a5, IsCubicTimingFunctionWithYValueOutOfRange, a6);
            if (!(_DWORD)result)
              return result;
          }
          else
          {
            WebCore::GraphicsLayerCA::createAnimationFromKeyframes(a1, a2, a4, (_DWORD **)a5, IsCubicTimingFunctionWithYValueOutOfRange, a6);
          }
          goto LABEL_7;
        }
        if ((WebCore::GraphicsLayerCA::createFilterAnimationsFromKeyframes(a1, (uint64_t *)a2, a4, a5, IsCubicTimingFunctionWithYValueOutOfRange, a6) & 1) == 0)return 0;
      }
LABEL_7:
      WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)a1, 67117056, 0);
      return 1;
    }
  }
  return result;
}

void WebCore::AutoTableLayout::~AutoTableLayout(WebCore::AutoTableLayout *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  unsigned int *v6;
  uint64_t v7;

  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 7);
  v5 = (WTF *)*((_QWORD *)this + 2);
  if ((_DWORD)v4)
  {
    v6 = (unsigned int *)((char *)v5 + 8);
    v7 = 40 * v4;
    do
    {
      if (*((_BYTE *)v6 + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v6);
      }
      if (*((_BYTE *)v6 - 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v6 - 2));
      }
      v6 += 10;
      v7 -= 40;
    }
    while (v7);
    v5 = (WTF *)*((_QWORD *)this + 2);
  }
  if (v5)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v5, a2);
  }
  WTF::fastFree(this, a2);
}

{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  unsigned int *v6;
  uint64_t v7;

  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 7);
  v5 = (WTF *)*((_QWORD *)this + 2);
  if ((_DWORD)v4)
  {
    v6 = (unsigned int *)((char *)v5 + 8);
    v7 = 40 * v4;
    do
    {
      if (*((_BYTE *)v6 + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v6);
      }
      if (*((_BYTE *)v6 - 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v6 - 2));
      }
      v6 += 10;
      v7 -= 40;
    }
    while (v7);
    v5 = (WTF *)*((_QWORD *)this + 2);
  }
  if (v5)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v5, a2);
  }
}

unint64_t WebCore::snappedIntRect(WebCore *this, const WebCore::LayoutRect *a2)
{
  int v2;

  v2 = *(_QWORD *)this + 63;
  if ((int)*(_QWORD *)this >= 0)
    v2 = *(_QWORD *)this;
  return (((int)(*(_QWORD *)this - (v2 & 0xFFFFFFC0) + 32) >> 6) + (v2 >> 6)) | ((unint64_t)(((int)(HIDWORD(*(_QWORD *)this) - (v2 & 0xFFFFFFC0) + 32) >> 6) + (int)HIDWORD(*(_QWORD *)this) / 64) << 32);
}

WTF *WebCore::XMLHttpRequest::didSendData(WTF *this, uint64_t a2, uint64_t a3)
{
  WebCore::XMLHttpRequestUpload *v3;
  WTF *v6;
  uint64_t v7;
  __int16 v8;
  WebCore::XMLHttpRequestUpload *v9;
  uint64_t v10;
  WebCore *v11;
  WebCore::XMLHttpRequestUpload *v12;
  const WTF::AtomString *v13;

  v3 = (WebCore::XMLHttpRequestUpload *)*((_QWORD *)this + 11);
  if (v3)
  {
    v6 = this;
    if ((*((_WORD *)this + 40) & 0x20) != 0)
    {
      v7 = WebCore::eventNames(this);
      this = WebCore::XMLHttpRequestUpload::dispatchProgressEvent(v3, (const WTF::AtomString *)(v7 + 1584), a2, a3);
    }
    if (a2 == a3)
    {
      v8 = *((_WORD *)v6 + 40);
      if ((v8 & 0x40) == 0)
      {
        *((_BYTE *)v6 + 736) = 1;
        *((_WORD *)v6 + 40) = v8 | 0x40;
        if ((v8 & 0x20) != 0)
        {
          v9 = (WebCore::XMLHttpRequestUpload *)*((_QWORD *)v6 + 11);
          v10 = WebCore::eventNames(this);
          v11 = WebCore::XMLHttpRequestUpload::dispatchProgressEvent(v9, (const WTF::AtomString *)(v10 + 1104), a2, a2);
          v12 = (WebCore::XMLHttpRequestUpload *)*((_QWORD *)v6 + 11);
          v13 = (const WTF::AtomString *)(WebCore::eventNames(v11) + 1128);
          return WebCore::XMLHttpRequestUpload::dispatchProgressEvent(v12, v13, a2, a2);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::TimingFunction::createFromCSSValue@<X0>(uint64_t this@<X0>, const WebCore::CSSValue *a2@<X1>, uint64_t *a3@<X8>)
{
  int v4;
  int v5;
  char v6;
  int v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v4 = *(unsigned __int16 *)(this + 4) | (*(unsigned __int8 *)(this + 6) << 16);
  v5 = v4 & 0x3F800;
  if ((v4 & 0x3F800) == 0)
  {
    if ((v4 & 0x3F87F) != 0x50)
    {
LABEL_3:
      *a3 = 0;
      return this;
    }
    if (*(_WORD *)(this + 8) != 634)
    {
      switch(*(_WORD *)(this + 8))
      {
        case 0x276:
          this = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(this + 8) = 1;
          *(_QWORD *)this = &off_1E3347E18;
          *(_OWORD *)(this + 16) = xmmword_1968C1FC0;
          *(_OWORD *)(this + 32) = xmmword_1968C1FD0;
          *(_BYTE *)(this + 48) = 0;
          goto LABEL_7;
        case 0x277:
          this = WTF::fastMalloc((WTF *)0x20);
          *(_DWORD *)(this + 8) = 1;
          *(_QWORD *)this = &off_1E338CAA8;
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          goto LABEL_7;
        case 0x278:
          this = WTF::fastMalloc((WTF *)0x38);
          v6 = 1;
          *(_DWORD *)(this + 8) = 1;
          *(_QWORD *)this = &off_1E3347E18;
          __asm { FMOV            V1.2D, #1.0 }
          *(_OWORD *)(this + 16) = xmmword_1969F6E70;
          *(_OWORD *)(this + 32) = _Q1;
          goto LABEL_6;
        case 0x279:
          this = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(this + 8) = 1;
          *(_QWORD *)this = &off_1E3347E18;
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_OWORD *)(this + 32) = xmmword_1969F6BA0;
          v6 = 2;
          goto LABEL_6;
        case 0x27B:
          this = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)this = &off_1E3407620;
          *(_QWORD *)(this + 8) = 0x100000001;
          v14 = 260;
          break;
        case 0x27C:
          this = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)this = &off_1E3407620;
          *(_QWORD *)(this + 8) = 0x100000001;
          v14 = 261;
          break;
        default:
          goto LABEL_3;
      }
      *(_WORD *)(this + 16) = v14;
      goto LABEL_7;
    }
    this = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(this + 8) = 1;
    *(_QWORD *)this = &off_1E3347E18;
    *(_OWORD *)(this + 16) = xmmword_1969F6E70;
    *(_OWORD *)(this + 32) = xmmword_1969F6BA0;
    v6 = 3;
LABEL_6:
    *(_BYTE *)(this + 48) = v6;
LABEL_7:
    *a3 = this;
    return this;
  }
  if ((v4 & 0x3F800u) > 0x87FF)
  {
    if (v5 != 34816)
    {
      if (v5 == 36864)
      {
        v20 = *(_OWORD *)(this + 8);
        v17 = *(_QWORD *)(this + 24);
        v18 = *(_QWORD *)(this + 32);
        this = WTF::fastMalloc((WTF *)0x30);
        *(_DWORD *)(this + 8) = 1;
        *(_QWORD *)this = &off_1E3407658;
        *(_OWORD *)(this + 16) = v20;
        *(_QWORD *)(this + 32) = v17;
        *(_QWORD *)(this + 40) = v18;
      }
      else
      {
        if (v5 != 38912)
          goto LABEL_3;
        v12 = *(_DWORD *)(this + 8);
        v13 = *(_WORD *)(this + 12);
        this = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)this = &off_1E3407620;
        *(_DWORD *)(this + 8) = 1;
        *(_DWORD *)(this + 12) = v12;
        *(_WORD *)(this + 16) = v13;
      }
      goto LABEL_7;
    }
    v19 = *(_OWORD *)(this + 8);
    v15 = *(_QWORD *)(this + 24);
    v16 = *(_QWORD *)(this + 32);
    this = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(this + 8) = 1;
    *(_QWORD *)this = &off_1E3347E18;
    *(_OWORD *)(this + 16) = v19;
    *(_QWORD *)(this + 32) = v15;
    *(_QWORD *)(this + 40) = v16;
    v6 = 4;
    goto LABEL_6;
  }
  if (v5 != 0x8000)
    goto LABEL_3;
  return WebCore::LinearTimingFunction::create(a3, this + 8);
}

unint64_t WebCore::TileController::prepopulateRect(WebCore::TileController *this, const WebCore::FloatRect *a2)
{
  uint64_t v3;
  unint64_t result;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  WTF *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  WTF *v20;
  __int128 v21;
  float *v22;

  v3 = *((_QWORD *)this + 6);
  result = WebCore::enclosingIntRectPreservingEmptyRects(a2, a2);
  v6 = result;
  v7 = v5;
  v8 = *(_DWORD *)(v3 + 40);
  v9 = HIDWORD(result);
  v10 = HIDWORD(v5);
  if (v8 > (int)result
    || *(_DWORD *)(v3 + 48) + v8 < (int)v5 + (int)result
    || (v11 = *(_DWORD *)(v3 + 44), v11 > SHIDWORD(result))
    || *(_DWORD *)(v3 + 52) + v11 < HIDWORD(v5) + HIDWORD(result))
  {
    v12 = *(unsigned int *)(v3 + 68);
    if ((_DWORD)v12 != *(_DWORD *)(v3 + 64))
    {
      v22 = (float *)(*(_QWORD *)(v3 + 56) + 16 * v12);
LABEL_19:
      *v22 = (float)v6;
      v22[1] = (float)(int)v9;
      v22[2] = (float)v7;
      v22[3] = (float)(int)v10;
      *(_DWORD *)(v3 + 68) = v12 + 1;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 48) + 144))(*(_QWORD *)(*((_QWORD *)this + 2) + 48));
    }
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= v12 + 1)
      v15 = v12 + 1;
    else
      v15 = v14;
    if (!(v15 >> 28))
    {
      v16 = *(WTF **)(v3 + 56);
      v17 = (WTF *)WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(v3 + 64) = v15;
      *(_QWORD *)(v3 + 56) = v17;
      if ((_DWORD)v12)
      {
        v19 = 16 * v12;
        v20 = v16;
        do
        {
          v21 = *(_OWORD *)v20;
          v20 = (WTF *)((char *)v20 + 16);
          *(_OWORD *)v17 = v21;
          v17 = (WTF *)((char *)v17 + 16);
          v19 -= 16;
        }
        while (v19);
        v17 = *(WTF **)(v3 + 56);
      }
      if (v16)
      {
        if (v17 == v16)
        {
          *(_QWORD *)(v3 + 56) = 0;
          *(_DWORD *)(v3 + 64) = 0;
        }
        WTF::fastFree(v16, v18);
        v17 = *(WTF **)(v3 + 56);
      }
      v12 = *(unsigned int *)(v3 + 68);
      v22 = (float *)((char *)v17 + 16 * v12);
      goto LABEL_19;
    }
    __break(0xC471u);
  }
  return result;
}

void WebCore::StackAllocator::allocateUninitialized(WebCore::StackAllocator *this, uint64_t a2, int a3)
{
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  WebCore::StackAllocator *v26;
  WebCore::StackAllocator *v27;
  int v28;
  int v29;
  int v30;

  if (*(_BYTE *)(a2 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x19459EE08);
  }
  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 16;
  v3 = *(_DWORD *)(a2 + 8);
  v4 = a3 - 1;
  if (a3 == 1)
  {
    v5 = v3 + 16;
    *(_DWORD *)(a2 + 8) = v3 + 16;
    goto LABEL_4;
  }
  v7 = 0;
  do
  {
    v8 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v8 + 16;
    v9 = v8 + 8;
    v30 = v9;
    v10 = *((unsigned int *)this + 3);
    if ((_DWORD)v10 == *((_DWORD *)this + 2))
    {
      v20 = a2;
      v26 = this;
      v16 = a3;
      v23 = v3;
      v14 = v4;
      v18 = v7;
      WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StackAllocator::StackReference>((uint64_t)this, (unint64_t)&v30);
      a3 = v16;
      v7 = v18;
      v4 = v14;
      v3 = v23;
      this = v26;
      a2 = v20;
      v11 = *((_DWORD *)v26 + 3);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)this + 4 * v10) = v9;
      v11 = *((_DWORD *)this + 3) + 1;
      *((_DWORD *)this + 3) = v11;
    }
    v12 = *(_DWORD *)(a2 + 8);
    v29 = v12;
    if (v11 == *((_DWORD *)this + 2))
    {
      v21 = a2;
      v27 = this;
      v17 = a3;
      v24 = v3;
      v15 = v4;
      v19 = v7;
      WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StackAllocator::StackReference>((uint64_t)this, (unint64_t)&v29);
      a3 = v17;
      v7 = v19;
      v4 = v15;
      v3 = v24;
      this = v27;
      a2 = v21;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)this + 4 * v11) = v12;
      ++*((_DWORD *)this + 3);
    }
    v7 += 2;
  }
  while (v7 < v4);
  v6 = *(_DWORD *)(a2 + 8);
  if ((a3 & 1) != 0)
  {
    v25 = v3;
    v13 = *((_DWORD *)this + 2);
    v4 = *((_DWORD *)this + 3);
    v5 = v6 + 16;
    v22 = a2;
    *(_DWORD *)(a2 + 8) = v5;
    v28 = v5;
    if (v4 == v13)
    {
      WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StackAllocator::StackReference>((uint64_t)this, (unint64_t)&v28);
      a2 = v22;
      v3 = v25;
      goto LABEL_5;
    }
LABEL_4:
    *(_DWORD *)(*(_QWORD *)this + 4 * v4) = v5;
    ++*((_DWORD *)this + 3);
LABEL_5:
    v6 = *(_DWORD *)(a2 + 8);
  }
  JSC::MacroAssemblerARM64::add64(*(_QWORD *)a2, v3 - v6, 31, 31);
}

uint64_t WebCore::SecurityOrigin::SecurityOrigin(uint64_t a1, uint64_t a2)
{
  WebCore::SecurityOriginData *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10[5];
  WTF::StringImpl *v11;

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 0;
  v3 = (WebCore::SecurityOriginData *)(a1 + 8);
  *(_DWORD *)(a1 + 32) = -1;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(WTF::StringImpl **, WebCore::SecurityOriginData *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v4])(v10, v3, a2);
    *(_DWORD *)(a1 + 32) = v4;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  WebCore::SecurityOriginData::toString(v3, &v11);
  MEMORY[0x19AEA52D4](v10, &v11, 0);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::SecurityOrigin::initializeShared((WebCore::SecurityOrigin *)a1, (const WTF::URL *)v10);
  v8 = v10[0];
  v10[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

uint64_t WebCore::SecurityOrigin::isLocalHostOrLoopbackIPAddress(uint64_t a1, uint64_t a2)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  if ((char *)a1 != "[::1]" && a2 == 5)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)a1 == 91 && *(_WORD *)(a1 + 1) == 14906 && *(_WORD *)(a1 + 3) == 23857)
        return 1;
    }
    else if (*(_WORD *)a1 == 91 && *(_QWORD *)(a1 + 2) == 0x5D0031003A003ALL)
    {
      return 1;
    }
  }
  else if ((char *)a1 == "[::1]" && a2 == 5)
  {
    return 1;
  }
  if ((WTF::StringView::startsWith() & 1) != 0 && (_DWORD)a2)
  {
    v5 = 0;
    v6 = 0;
    if (BYTE4(a2))
    {
      v7 = 0;
      do
      {
        v10 = *(unsigned __int8 *)(a1 + v6);
        if (v10 == 46)
        {
          ++v7;
        }
        else if ((v10 - 48) > 9)
        {
          break;
        }
        v5 = ++v6 >= (unint64_t)a2;
      }
      while (a2 != v6);
    }
    else
    {
      v7 = 0;
      do
      {
        v8 = *(unsigned __int16 *)(a1 + 2 * v6);
        if (v8 == 46)
        {
          ++v7;
        }
        else if ((v8 - 48) >= 0xA)
        {
          break;
        }
        v5 = ++v6 >= (unint64_t)a2;
      }
      while (a2 != v6);
    }
    if (v5 && v7 == 3)
      return 1;
  }
  return WebCore::SecurityOrigin::isLocalhostAddress(a1, a2);
}

uint64_t *WebCore::ScrollbarTheme::theme(WebCore::ScrollbarTheme *this)
{
  uint64_t *result;
  char *v2;

  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    goto LABEL_3;
  }
  if (!BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
  {
LABEL_3:
    result = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
      return result;
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_9:
    *v2 = 1;
    return result;
  }
  result = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
  {
    WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
    goto LABEL_9;
  }
  return result;
}

uint64_t WebCore::ScrollbarTheme::maxOverlapBetweenPages(WebCore::ScrollbarTheme *this)
{
  return 0x7FFFFFFFLL;
}

uint64_t WebCore::ScrollableArea::scrollToPositionWithoutAnimation(WebCore::ScrollableArea *a1, float *a2, int a3)
{
  float32x2_t *v5;

  v5 = (float32x2_t *)WebCore::ScrollableArea::scrollAnimator(a1);
  return WebCore::ScrollAnimator::scrollToPositionWithoutAnimation(v5, a2, a3);
}

uint64_t WebCore::ScrollAnimator::scrollToPositionWithoutAnimation(float32x2_t *this, float *a2, int a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float32x2_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  v5 = this[15].f32[0];
  v6 = this[15].f32[1];
  if (a3)
  {
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&this[1] + 424))(*(_QWORD *)&this[1]);
    v7 = (float)(int)v13;
    v8 = (float)SHIDWORD(v13);
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&this[1] + 432))(*(_QWORD *)&this[1]);
    v15 = (float)(int)v14;
    if (*a2 < (float)(int)v14)
      v15 = *a2;
    if (v15 > v7)
      v7 = v15;
    if (a2[1] >= (float)SHIDWORD(v14))
      v16 = (float)SHIDWORD(v14);
    else
      v16 = a2[1];
    if (v16 > v8)
      v8 = v16;
    v19 = __PAIR64__(LODWORD(v8), LODWORD(v7));
  }
  else
  {
    v19 = *(_QWORD *)a2;
    v8 = *((float *)&v19 + 1);
    LODWORD(v7) = v19;
  }
  if (v7 == v5 && v8 == v6)
  {
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&this[1] + 416))(*(_QWORD *)&this[1]);
    v18 = v7 == (float)(int)v17 && v8 == (float)SHIDWORD(v17);
    if (v18 && !*(_BYTE *)(*(_QWORD *)&this[1] + 47))
      return 0;
  }
  v10 = this[12];
  if (v10)
    (*(void (**)(float32x2_t))(**(_QWORD **)&v10 + 32))(v10);
  v11 = 1;
  WebCore::ScrollAnimator::setCurrentPosition(this, (float32x2_t *)&v19, 1);
  return v11;
}

void WebCore::SQLiteDatabase::tableSQL(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v7;
  unsigned __int8 *v8;
  sqlite3_stmt *v10;
  WebCore::SQLiteDatabaseTracker *v11;
  int v12;
  int v13;
  WebCore::SQLiteDatabaseTracker *v14;
  WebCore::ResourceTiming *v15;
  const WebCore::SecurityOrigin *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  int v19;
  char v20;

  if (!*(_QWORD *)(a1 + 8))
  {
    *a4 = 0;
    return;
  }
  WebCore::SQLiteDatabase::prepareStatement(a1, "SELECT sql FROM sqlite_master WHERE type = 'table' AND name = ?;",
    65,
    (uint64_t)&v17);
  v7 = v19;
  if (v19)
    goto LABEL_3;
  if (WebCore::SQLiteStatement::bindText((uint64_t)&v17, 1, a2, a3))
  {
    v7 = 0;
    *a4 = 0;
    goto LABEL_23;
  }
  v8 = (unsigned __int8 *)v17 + 32;
  if (__ldaxr((unsigned __int8 *)v17 + 32))
  {
    __clrex();
LABEL_11:
    MEMORY[0x19AEA534C](v8);
    goto LABEL_12;
  }
  if (__stxr(1u, v8))
    goto LABEL_11;
LABEL_12:
  v10 = v18;
  if (*((_BYTE *)v17 + 20) || (v11 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v18), (_DWORD)v11))
  {
    v12 = sqlite3_step(v10);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v11);
    v14 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v10);
    v12 = (int)v14;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v14);
  }
  v13 = __ldxr(v8);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, v8))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v7 = v19;
  if (v12 == 100)
  {
    if (v19)
    {
      v15 = (WebCore::ResourceTiming *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::ResourceTiming::updateExposure(v15, v16);
      return;
    }
    WebCore::SQLiteStatement::columnText(&v17, 0, a4);
    v7 = 0;
LABEL_23:
    ((void (*)(char *, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v7])(&v20, &v17);
    return;
  }
LABEL_3:
  *a4 = 0;
  if (v7 != -1)
    goto LABEL_23;
}

uint64_t WebCore::ResourceTiming::updateExposure(WebCore::ResourceTiming *this, const WebCore::SecurityOrigin *a2)
{
  uint64_t result;

  if (*((_BYTE *)this + 209))
  {
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    result = WebCore::SecurityOrigin::canRequest((uint64_t)a2, this, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
  }
  else
  {
    result = 0;
  }
  *((_BYTE *)this + 209) = result;
  return result;
}

void WebCore::RenderTableRow::~RenderTableRow(WebCore::RenderTableRow *this, void *a2)
{
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

void WebCore::MutationRecord::oldValue(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::MutationRecord::createAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x40);
  *a4 = result;
  return result;
}

WebCore::Page *WebCore::LocalFrameView::requestScrollToPosition(WebCore::ScrollView *a1, int32x2_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  WebCore::Page *result;
  float32x2_t v16;
  int v17;
  int v18;

  v6 = *(_QWORD *)(*((_QWORD *)a1 + 41) + 296);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 1944);
    if (v7)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 256);
      if (v8)
      {
        v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 72) + 832))(*(_QWORD *)(v8 + 72));
        if (v9 && *(_BYTE *)(a3 + 2) == 0)
        {
          v11 = v9;
          WebCore::ScrollView::exposedContentRect(a1);
          v16 = vcvt_f32_s32(*a2);
          v17 = v12;
          v18 = v13;
          (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v11 + 136))(v11, &v16);
        }
      }
    }
  }
  v14 = *(_QWORD *)(*((_QWORD *)a1 + 41) + 24);
  if (!v14)
    return 0;
  result = *(WebCore::Page **)(v14 + 8);
  if (result)
  {
    result = (WebCore::Page *)WebCore::Page::scrollingCoordinator(result);
    if (result)
      return (WebCore::Page *)(*(uint64_t (**)(WebCore::Page *, _QWORD *, int32x2_t *, uint64_t))(*(_QWORD *)result + 200))(result, (_QWORD *)a1 + 8, a2, a3);
  }
  return result;
}

BOOL WebCore::LocalFrameView::addScrollableArea(WebCore::LocalFrameView *this, WebCore::ScrollableArea *a2)
{
  _QWORD *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WebCore::Page *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t i;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];
  unsigned __int8 v22;

  v4 = (_QWORD *)*((_QWORD *)this + 161);
  if (!v4)
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = 0;
    v4[1] = 0;
    v6 = (WTF *)*((_QWORD *)this + 161);
    *((_QWORD *)this + 161) = v4;
    if (v6)
    {
      v7 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
      {
        v13 = *(unsigned int *)(v7 - 4);
        if ((_DWORD)v13)
        {
          for (i = 0; i != v13; ++i)
          {
            v15 = *(unsigned int **)(v7 + 8 * i);
            if (v15 != (unsigned int *)-1)
            {
              *(_QWORD *)(v7 + 8 * i) = 0;
              if (v15)
              {
                do
                {
                  v16 = __ldaxr(v15);
                  v17 = v16 - 1;
                }
                while (__stlxr(v17, v15));
                if (!v17)
                {
                  atomic_store(1u, v15);
                  v19 = i;
                  v20 = v7;
                  v18 = v13;
                  WTF::fastFree((WTF *)v15, v5);
                  v13 = v18;
                  i = v19;
                  v7 = v20;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v7 - 16), v5);
      }
      WTF::fastFree(v6, v5);
      v4 = (_QWORD *)*((_QWORD *)this + 161);
    }
  }
  WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScrollableArea>((uint64_t)v4, a2, (uint64_t)v21);
  v8 = v22;
  if (v22)
  {
    v9 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
    if (v9)
    {
      v10 = *(WebCore::Page **)(v9 + 8);
      if (v10)
      {
        v11 = WebCore::Page::scrollingCoordinator(v10);
        if (v11)
          (*(void (**)(uint64_t, WebCore::LocalFrameView *))(*(_QWORD *)v11 + 88))(v11, this);
      }
    }
  }
  return v8 != 0;
}

uint64_t WebCore::LocalFrameView::removeChild(WebCore::LocalFrameView *this, WebCore::Widget *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  WebCore::Page *v7;
  uint64_t v8;

  if ((*(unsigned int (**)(WebCore::Widget *))(*(_QWORD *)a2 + 72))(a2))
  {
    v4 = *((_QWORD *)this + 161);
    if (v4)
    {
      if (WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ScrollableArea>(v4, (_QWORD *)a2 + 8))
      {
        v6 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
        if (v6)
        {
          v7 = *(WebCore::Page **)(v6 + 8);
          if (v7)
          {
            v8 = WebCore::Page::scrollingCoordinator(v7);
            if (v8)
              (*(void (**)(uint64_t, WebCore::LocalFrameView *))(*(_QWORD *)v8 + 88))(v8, this);
          }
        }
      }
    }
  }
  (*(void (**)(WebCore::Widget *, _QWORD))(*(_QWORD *)a2 + 112))(a2, 0);
  result = WTF::HashSet<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::DefaultHash<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>((uint64_t *)this + 18, a2);
  if (*((_QWORD *)a2 + 5))
    return WebCore::ScrollView::platformRemoveChild(this, a2);
  return result;
}

unsigned int *WebCore::LocalDOMWindow::processPostMessage(uint64_t a1, WebCore::ScriptExecutionContext *a2, _DWORD **a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  WebCore::Document *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  uint64_t v33;
  _DWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  void *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  _QWORD *v72;
  _QWORD *v73;
  WebCore::Node *v74;
  char v75;
  _QWORD *v76;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;

  v10 = *(_QWORD *)(a1 + 72);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
  {
    if (*(_BYTE *)(v11 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x19459FDF4);
    }
    v75 = 0;
    v12 = (WebCore::Document *)(v11 - 288);
    *(_DWORD *)(v11 - 264) += 2;
    v13 = v11 - 96;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v75 = 1;
  }
  v14 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
  if (v14
    && v13
    && (v13 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v13, a2)) != 0
    && (v53 = *(_QWORD *)(v13 + 16)) != 0
    && *(_BYTE *)(v53 + 96))
  {
    v54 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v54 || (v13 = *(_QWORD *)(v54 + 96)) == 0)
      v13 = WebCore::threadGlobalDataSlow((WebCore *)v13);
    v13 = Inspector::createScriptCallStack(*(Inspector **)(v13 + 64), (JSC::JSGlobalObject *)0xC8);
    v76 = v79;
  }
  else
  {
    v76 = 0;
  }
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v15 = *(_QWORD *)(v15 + 8);
    if (v15)
    {
      if (*(_BYTE *)(v15 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x19459FE14);
      }
      v15 = *(_QWORD *)(v15 + 240);
      if (v15)
        v15 = *(_QWORD *)(v15 + 8);
    }
  }
  v16 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
  if (v16
    && (v55 = *(_QWORD *)(v15 + 24)) != 0
    && (v56 = *(_QWORD *)(v55 + 8)) != 0
    && (v57 = *(_QWORD *)(*(_QWORD *)(v56 + 80) + 8), (v58 = *(_QWORD *)(v57 + 136)) != 0)
    && (v13 = Inspector::InspectorDebuggerAgent::breakpointsActive(*(Inspector::InspectorDebuggerAgent **)(v57 + 136)),
        (_DWORD)v13))
  {
    v59 = *(_DWORD *)(v58 + 292);
    *(_DWORD *)(v58 + 292) = v59 + 1;
    LODWORD(v90) = v59;
    v13 = (uint64_t)WTF::HashTable<int,int,WTF::IdentityExtractor,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<int>>::add((uint64_t *)(v58 + 280), (int *)&v90, (uint64_t)&v79);
    v78 = v90;
  }
  else
  {
    v78 = 0;
  }
  if (WTF::isMainThread((WTF *)v13))
  {
    {
      v18 = WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
        ++*(_DWORD *)WebCore::currentToken(void)::token;
    }
    else
    {
      v18 = 0;
      WebCore::currentToken(void)::token = 0;
    }
  }
  else
  {
    v18 = 0;
  }
  v74 = v12;
  v19 = WebCore::Document::eventLoop(v12, v17);
  ++*(_DWORD *)(v19 + 8);
  ++*(_DWORD *)(a1 + 24);
  v79 = (_QWORD *)a1;
  v80 = a1;
  v20 = *(unsigned int **)a4;
  if (*(_QWORD *)a4)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v22 = a5;
  v23 = *(unsigned int *)(a4 + 20);
  if ((_DWORD)v23)
  {
    if (v23 >> 27)
      goto LABEL_87;
    v24 = a3;
    v25 = WTF::fastMalloc((WTF *)(32 * v23));
    v26 = v25;
    v27 = *(unsigned int *)(a4 + 20);
    if ((_DWORD)v27)
    {
      v28 = 0;
      v29 = *(_QWORD *)(a4 + 8);
      v30 = 32 * v27;
      do
      {
        v31 = (_OWORD *)(v25 + v28);
        v32 = *(_OWORD *)(v29 + v28 + 16);
        *v31 = *(_OWORD *)(v29 + v28);
        v31[1] = v32;
        v28 += 32;
      }
      while (v30 != v28);
    }
  }
  else
  {
    v24 = a3;
    v26 = 0;
  }
  v33 = *v22;
  *v22 = 0;
  v34 = *v24;
  if (v34)
    *v34 += 2;
  v85 = v34;
  v86 = v18;
  v87 = v78;
  v88 = v76;
  v35 = a6;
  v36 = *a6;
  *v35 = 0;
  v37 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v37 = off_1E33FF8A0;
  *(_QWORD *)(v37 + 8) = v79;
  *(_QWORD *)(v37 + 16) = v80;
  *(_QWORD *)(v37 + 24) = v20;
  v80 = 0;
  v81 = 0;
  *(_QWORD *)(v37 + 32) = v26;
  v82 = 0;
  v83 = 0;
  *(_DWORD *)(v37 + 40) = v23;
  *(_DWORD *)(v37 + 44) = v23;
  v84 = 0;
  *(_QWORD *)(v37 + 48) = v33;
  if (v34)
    *v34 += 2;
  *(_QWORD *)(v37 + 56) = v34;
  *(_QWORD *)(v37 + 64) = v18;
  *(_DWORD *)(v37 + 72) = v78;
  *(_QWORD *)(v37 + 80) = v76;
  *(_QWORD *)(v37 + 88) = v36;
  v88 = 0;
  v89 = 0;
  v86 = 0;
  v90 = v37;
  WebCore::EventLoopTaskGroup::queueTask(v19, 15, &v90);
  v39 = v90;
  v90 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  WebCore::LocalDOMWindow::processPostMessage(JSC::JSGlobalObject &,WTF::String const&,WebCore::MessageWithMessagePorts const&,WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&,WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>> &&>> &&)::$_0::~$_0((uint64_t)&v79, v38);
  v41 = *(_DWORD *)(v19 + 8);
  if (!v41)
  {
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x19459FCD8);
  }
  *(_DWORD *)(v19 + 8) = v41 - 1;
  v42 = *(_QWORD *)(a1 + 72);
  if (!v42)
    goto LABEL_43;
  v43 = *(_QWORD *)(v42 + 8);
  if (!v43)
    goto LABEL_43;
  if (*(_BYTE *)(v43 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19459FE34);
  }
  v44 = *(_QWORD *)(v43 + 240);
  if (v44)
  {
    v45 = *(_QWORD *)(v44 + 8);
    if (v45)
    {
      v46 = (unsigned int *)(v45 + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 + 1, v46));
    }
  }
  else
  {
LABEL_43:
    v45 = 0;
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v60 = *(_QWORD *)(v45 + 24);
    if (v60)
    {
      v61 = *(_QWORD *)(v60 + 8);
      if (v61)
      {
        v62 = *(_QWORD *)(*(_QWORD *)(v61 + 80) + 8);
        v63 = *(_QWORD *)(v62 + 136);
        if (v63)
        {
          v64 = Inspector::InspectorDebuggerAgent::breakpointsActive(*(Inspector::InspectorDebuggerAgent **)(v62 + 136));
          if (v78)
          {
            if (v64)
            {
              v65 = *(_QWORD *)(v63 + 280);
              if (v65)
              {
                v66 = *(_DWORD *)(v65 - 8);
                v67 = 9 * ((v78 + ~(v78 << 15)) ^ ((v78 + ~(v78 << 15)) >> 10));
                v68 = (v67 ^ (v67 >> 6)) + ~((v67 ^ (v67 >> 6)) << 11);
                v69 = v66 & (v68 ^ HIWORD(v68));
                v70 = *(_DWORD *)(v65 + 4 * v69);
                if (v70 == v78)
                {
LABEL_79:
                  Inspector::InspectorDebuggerAgent::didScheduleAsyncCall();
                }
                else
                {
                  v71 = 1;
                  while (v70)
                  {
                    v69 = (v69 + v71) & v66;
                    v70 = *(_DWORD *)(v65 + 4 * v69);
                    ++v71;
                    if (v70 == v78)
                      goto LABEL_79;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else if (!v45)
  {
    goto LABEL_49;
  }
  v49 = (unsigned int *)(v45 + 8);
  do
  {
    v50 = __ldaxr(v49);
    v51 = v50 - 1;
  }
  while (__stlxr(v51, v49));
  if (!v51)
  {
    atomic_store(1u, v49);
    v72 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v72 = off_1E31FE290;
    v72[1] = v49;
    v79 = v72;
    WTF::ensureOnMainThread();
    v73 = v79;
    v79 = 0;
    if (v73)
      (*(void (**)(_QWORD *))(*v73 + 8))(v73);
  }
LABEL_49:
  result = (unsigned int *)v74;
  if ((v75 & 1) == 0)
  {
    if (*((_DWORD *)v74 + 6) == 2)
    {
      if ((*((_WORD *)v74 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v74, v40);
    }
    else
    {
      *((_DWORD *)v74 + 6) -= 2;
    }
  }
  return result;
}

void WebCore::LocalDOMWindow::dispatchLoadEvent(WebCore::LocalDOMWindow *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  os_signpost_id_t is_enabled;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::Node *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  NSObject *v67;
  NSObject *v68;
  int v69;
  NSObject *v70;
  NSObject *v71;
  uint64_t v72;
  int v73;
  NSObject *v74;
  NSObject *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  os_signpost_id_t v79;
  os_signpost_id_t v80;
  os_signpost_id_t v81;
  os_signpost_id_t v82;
  uint64_t v83;
  __int16 v84;
  int v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  ++*((_DWORD *)this + 6);
  v2 = *((_QWORD *)this + 9);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
  {
    v7 = 0;
    v4 = 0;
    v25 = 1;
    v26 = 1;
    goto LABEL_75;
  }
  if (*(_BYTE *)(v3 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1945A04ACLL);
  }
  v4 = v3 - 288;
  *(_DWORD *)(v3 - 264) += 2;
  v5 = *(_QWORD *)(v3 + 240);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
  {
    v7 = 0;
    goto LABEL_96;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 280) + 88);
  if (!v7)
  {
LABEL_96:
    v26 = 0;
    v25 = 1;
    goto LABEL_75;
  }
  ++*(_DWORD *)(v7 + 24);
  if (*(double *)(v7 + 2760) == 0.0)
  {
    WTF::MonotonicTime::now(this);
    v9 = v8;
    *(_QWORD *)(v7 + 2760) = v8;
    v10 = *(_QWORD *)(WebCore::LocalDOMWindow::performance(this) + 176);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = v11 + 1;
      *(_QWORD *)(v10 + 352) = v9;
      if (v11)
        *(_DWORD *)(v10 + 8) = v11;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    is_enabled = kdebug_is_enabled();
    if ((_DWORD)is_enabled)
    {
      v66 = *MEMORY[0x1E0CBE150];
      v67 = WTFSignpostLogHandle();
      v68 = v67;
      if (v66)
      {
        is_enabled = os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)is_enabled)
        {
          v83 = 67109888;
          v84 = 1024;
          v85 = 1;
          v86 = 2048;
          v87 = v4;
          v88 = 2048;
          v89 = WTFCurrentContinuousTime();
          _os_log_impl(&dword_1940B8000, v68, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu loadEventBegin", (uint8_t *)&v83, 0x22u);
        }
      }
      else
      {
        is_enabled = os_signpost_id_make_with_pointer(v67, (const void *)v4);
        if (is_enabled - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v79 = is_enabled;
          is_enabled = os_signpost_enabled(v68);
          if ((_DWORD)is_enabled)
          {
            LOWORD(v83) = 0;
            _os_signpost_emit_with_name_impl(&dword_1940B8000, v68, OS_SIGNPOST_EVENT, v79, "NavigationAndPaintTiming", "loadEventBegin", (uint8_t *)&v83, 2u);
          }
        }
      }
    }
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
      v14 = WebCore::threadGlobalDataSlow((WebCore *)is_enabled);
    v15 = *(_QWORD *)(v14 + 40);
    if (!v15)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
      v15 = *(_QWORD *)(v14 + 40);
    }
    v16 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
    *(_DWORD *)(v16 + 16) = 1;
    *(_QWORD *)v16 = off_1E33A4B48;
    *(_QWORD *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 20) = *(_DWORD *)(v16 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v15 + 1104) != 0);
    v18 = *(_DWORD **)(v15 + 1104);
    if (v18)
      *v18 += 2;
    *(_QWORD *)(v16 + 24) = v18;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 48) = 0;
    *(_QWORD *)(v16 + 56) = v17;
    *(_QWORD *)(v16 + 64) = 0;
    v19 = WebCore::LocalDOMWindow::dispatchEvent(this, (WebCore::Event *)v16, (WebCore::EventTarget *)v4);
    if (*(_DWORD *)(v16 + 16) == 1)
      v19 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    else
      --*(_DWORD *)(v16 + 16);
    WTF::MonotonicTime::now(v19);
    v21 = v20;
    *(_QWORD *)(v7 + 2768) = v20;
    v22 = *(_QWORD *)(WebCore::LocalDOMWindow::performance(this) + 176);
    if (v22)
    {
      v23 = *(_DWORD *)(v22 + 8);
      *(_DWORD *)(v22 + 8) = v23 + 1;
      *(_QWORD *)(v22 + 360) = v21;
      if (v23)
        *(_DWORD *)(v22 + 8) = v23;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    if (kdebug_is_enabled())
    {
      v69 = *MEMORY[0x1E0CBE150];
      v70 = WTFSignpostLogHandle();
      v71 = v70;
      if (v69)
      {
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          v72 = WTFCurrentContinuousTime();
          v83 = 67109888;
          v84 = 1024;
          v85 = 1;
          v86 = 2048;
          v87 = v4;
          v88 = 2048;
          v89 = v72;
          _os_log_impl(&dword_1940B8000, v71, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu loadEventEnd", (uint8_t *)&v83, 0x22u);
        }
      }
      else
      {
        v80 = os_signpost_id_make_with_pointer(v70, (const void *)v4);
        if (v80 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v81 = v80;
          if (os_signpost_enabled(v71))
          {
            LOWORD(v83) = 0;
            _os_signpost_emit_with_name_impl(&dword_1940B8000, v71, OS_SIGNPOST_EVENT, v81, "NavigationAndPaintTiming", "loadEventEnd", (uint8_t *)&v83, 2u);
          }
        }
      }
    }
    v24 = kdebug_is_enabled();
    if ((_DWORD)v24)
    {
      v73 = *MEMORY[0x1E0CBE150];
      v74 = WTFSignpostLogHandle();
      v75 = v74;
      if (v73)
      {
        v24 = os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v24)
        {
          v76 = WTFCurrentContinuousTime();
          v83 = 0x204000400;
          v84 = 1024;
          v85 = 1;
          v86 = 2048;
          v87 = v4;
          v88 = 2048;
          v89 = v76;
          _os_log_impl(&dword_1940B8000, v75, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu ", (uint8_t *)&v83, 0x22u);
        }
      }
      else
      {
        v24 = os_signpost_id_make_with_pointer(v74, (const void *)v4);
        if ((unint64_t)(v24 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v82 = v24;
          v24 = os_signpost_enabled(v75);
          if ((_DWORD)v24)
          {
            LOWORD(v83) = 0;
            _os_signpost_emit_with_name_impl(&dword_1940B8000, v75, OS_SIGNPOST_INTERVAL_END, v82, "NavigationAndPaintTiming", (const char *)&unk_196B7A1D3, (uint8_t *)&v83, 2u);
          }
        }
      }
    }
    v25 = 0;
    v26 = 0;
    goto LABEL_27;
  }
  v25 = 0;
  v26 = 0;
LABEL_75:
  v55 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v55 || (v56 = *(_QWORD *)(v55 + 96)) == 0)
    v56 = WebCore::threadGlobalDataSlow(this);
  v57 = *(_QWORD *)(v56 + 40);
  if (!v57)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v56);
    v57 = *(_QWORD *)(v56 + 40);
  }
  v58 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v58);
  *(_DWORD *)(v58 + 16) = 1;
  *(_QWORD *)v58 = off_1E33A4B48;
  *(_QWORD *)(v58 + 8) = 0;
  *(_DWORD *)(v58 + 20) = *(_DWORD *)(v58 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v57 + 1104) != 0);
  v60 = *(_DWORD **)(v57 + 1104);
  if (v60)
    *v60 += 2;
  *(_QWORD *)(v58 + 24) = v60;
  *(_QWORD *)(v58 + 32) = 0;
  *(_QWORD *)(v58 + 40) = 0;
  *(_QWORD *)(v58 + 48) = 0;
  *(_QWORD *)(v58 + 56) = v59;
  *(_QWORD *)(v58 + 64) = 0;
  v24 = (uint64_t)WebCore::LocalDOMWindow::dispatchEvent(this, (WebCore::Event *)v58, (WebCore::EventTarget *)v4);
  if (*(_DWORD *)(v58 + 16) == 1)
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  else
    --*(_DWORD *)(v58 + 16);
LABEL_27:
  v27 = *((_QWORD *)this + 9);
  if (!v27)
    goto LABEL_60;
  v28 = *(_QWORD *)(v27 + 8);
  if (v28)
  {
    if (*(_BYTE *)(v28 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x1945A04CCLL);
    }
    v29 = *(_QWORD *)(v28 + 240);
    if (v29)
    {
      v30 = *(_QWORD **)(v29 + 8);
      if (v30)
      {
        v31 = (unsigned int *)(v30 + 1);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 + 1, v31));
        v33 = v30[7];
        if (v33 && (v34 = *(_QWORD *)(v33 + 8)) != 0 && *(_BYTE *)(v34 + 144))
        {
          v65 = v30[35];
          ++*(_DWORD *)v65;
          (*(void (**)(_QWORD))(**(_QWORD **)(v65 + 16) + 1216))(*(_QWORD *)(v65 + 16));
          if (!*(_DWORD *)v65)
          {
            __break(0xC471u);
            JUMPOUT(0x1945A0828);
          }
          --*(_DWORD *)v65;
        }
        else
        {
          v35 = v30[15];
          if (v35)
          {
            v36 = *(WebCore::Node **)(v35 + 8);
            if (v36)
            {
              *((_DWORD *)v36 + 6) += 2;
              v37 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v37 || (v38 = *(_QWORD *)(v37 + 96)) == 0)
                v38 = WebCore::threadGlobalDataSlow((WebCore *)v24);
              v39 = *(_QWORD *)(v38 + 40);
              if (!v39)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v38);
                v39 = *(_QWORD *)(v38 + 40);
              }
              v40 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v40);
              *(_DWORD *)(v40 + 16) = 1;
              *(_QWORD *)v40 = off_1E33A4B48;
              *(_QWORD *)(v40 + 8) = 0;
              *(_DWORD *)(v40 + 20) = *(_DWORD *)(v40 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v39 + 1104) != 0);
              v42 = *(_DWORD **)(v39 + 1104);
              if (v42)
                *v42 += 2;
              *(_QWORD *)(v40 + 24) = v42;
              *(_QWORD *)(v40 + 32) = 0;
              *(_QWORD *)(v40 + 40) = 0;
              *(_QWORD *)(v40 + 48) = 0;
              *(_QWORD *)(v40 + 56) = v41;
              *(_QWORD *)(v40 + 64) = 0;
              (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v36 + 48))(v36, v40);
              if (*(_DWORD *)(v40 + 16) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
              else
                --*(_DWORD *)(v40 + 16);
              if (*((_DWORD *)v36 + 6) == 2)
              {
                if ((*((_WORD *)v36 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v36);
              }
              else
              {
                *((_DWORD *)v36 + 6) -= 2;
              }
            }
          }
        }
        do
        {
          v43 = __ldaxr(v31);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v31));
        if (!v44)
        {
          atomic_store(1u, v31);
          v77 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v77 = off_1E31FE290;
          v77[1] = v31;
          v83 = (uint64_t)v77;
          WTF::ensureOnMainThread();
          v78 = v83;
          v83 = 0;
          if (v78)
            (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
        }
      }
    }
  }
  v45 = *((_QWORD *)this + 9);
  if (!v45)
    goto LABEL_60;
  v46 = *(_QWORD *)(v45 + 8);
  if (!v46)
    goto LABEL_60;
  if (*(_BYTE *)(v46 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1945A04ECLL);
  }
  v47 = *(_QWORD *)(v46 + 240);
  if (v47)
  {
    v48 = *(_QWORD *)(v47 + 8);
    if (v48)
    {
      v49 = (unsigned int *)(v48 + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 + 1, v49));
    }
  }
  else
  {
LABEL_60:
    v48 = 0;
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    if (!v48)
      goto LABEL_66;
    v61 = *(_QWORD *)(v48 + 24);
    if (v61)
    {
      v62 = *(_QWORD *)(v61 + 8);
      if (v62)
        WebCore::InspectorInstrumentation::loadEventFiredImpl(*(_QWORD *)(*(_QWORD *)(v62 + 80) + 8), v48);
    }
  }
  else if (!v48)
  {
    goto LABEL_66;
  }
  v52 = (unsigned int *)(v48 + 8);
  do
  {
    v53 = __ldaxr(v52);
    v54 = v53 - 1;
  }
  while (__stlxr(v54, v52));
  if (!v54)
  {
    atomic_store(1u, v52);
    v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v63 = off_1E31FE290;
    v63[1] = v52;
    v83 = (uint64_t)v63;
    WTF::ensureOnMainThread();
    v64 = v83;
    v83 = 0;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  }
LABEL_66:
  if ((v25 & 1) == 0)
  {
    if (*(_DWORD *)(v7 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    else
      --*(_DWORD *)(v7 + 24);
  }
  if ((v26 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  if (*((_DWORD *)this + 6) == 1)
    (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)this + 72))(this);
  else
    --*((_DWORD *)this + 6);
}

void WebCore::LocalDOMWindow::postMessage(uint64_t a1@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  WebCore::Node *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  WebCore::SecurityOriginData *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t **v35;
  WTF *v36;
  WTF *v37;
  void *v38;
  WTF *v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WTF *v46;
  WTF::StringImpl *v47;
  int v48;
  WTF *v49;
  uint64_t *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  WTF *v63;
  WebCore::KeyframeEffect *v64;
  WTF *v65;
  uint64_t **v66;
  WTF *v67;
  int v68;
  int v69;
  WTF *v70;
  uint64_t **v71;
  uint64_t v72;
  int v73;
  WTF *v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  int v78;
  char v79;
  uint64_t **v80;
  WTF *v81;
  int v82;
  uint64_t *v83[2];

  v7 = *(_QWORD *)(a1 + 72);
  if (!v7)
    goto LABEL_7;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_7;
  if (*(_BYTE *)(v8 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1945A0C4CLL);
  }
  v9 = *(_QWORD *)(v8 + 240);
  if (!v9
    || (v10 = *(_QWORD *)(v9 + 8)) == 0
    || *(_QWORD *)(*(_QWORD *)(v10 + 296) + 696) != a1
    || (v13 = *(_QWORD *)(a3 + 72)) == 0
    || (v14 = *(_QWORD *)(v13 + 8)) == 0)
  {
LABEL_7:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  if (*(_BYTE *)(v14 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1945A0C84);
  }
  v18 = (WebCore::Node *)(v14 - 288);
  v19 = (_DWORD *)(v14 - 264);
  *(_DWORD *)(v14 - 264) += 2;
  WebCore::DOMWindow::createTargetOriginForPostMessage((WTF::StringImpl **)(a5 + 16), (WebCore::Document *)(v14 - 288), (uint64_t)&v76);
  if (!v78)
  {
    v74 = 0;
    v75 = 0;
    WebCore::SerializedScriptValue::create(a2, a4, a5, (uint64_t)&v74, 0, 0, 2, (uint64_t)&v71);
    if (v73)
    {
      if (v73 != 1)
        goto LABEL_96;
      v23 = v72;
      v72 = 0;
      *(_BYTE *)a6 = (_BYTE)v71;
      a6[1] = v23;
      v24 = 1;
      *((_BYTE *)a6 + 16) = 1;
LABEL_50:
      ((void (*)(uint64_t ***, uint64_t ***))off_1E33FF6F0[v24])(&v80, &v71);
LABEL_51:
      if (HIDWORD(v75))
      {
        v61 = (uint64_t *)v74;
        v62 = 8 * HIDWORD(v75);
        do
        {
          v61 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v61, v38)+ 1;
          v62 -= 8;
        }
        while (v62);
      }
      v49 = v74;
      if (v74)
      {
        v74 = 0;
        LODWORD(v75) = 0;
        WTF::fastFree(v49, v38);
      }
      v21 = v78;
      if (v78 == -1)
        goto LABEL_56;
      goto LABEL_55;
    }
    if (HIDWORD(v75))
    {
      v83[0] = 0;
      v58 = (uint64_t *)v74;
      v59 = 8 * HIDWORD(v75);
      while (*(_BYTE *)(*v58 + 58))
      {
        WTF::HashTable<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>>::add((uint64_t *)v83, v58, (uint64_t)&v80);
        if (!(_BYTE)v82)
          break;
        ++v58;
        v59 -= 8;
        if (!v59)
        {
          WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::MessagePort::disentanglePorts(WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v66, (uint64_t *)&v74);
          v80 = v66;
          v25 = (int)v67;
          v26 = HIDWORD(v67);
          v81 = v67;
          v82 = 0;
          WTF::HashSet<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTableTraits>::~HashSet(v83, v60);
          goto LABEL_20;
        }
      }
      LOBYTE(v80) = 21;
      v81 = 0;
      v48 = 1;
      v82 = 1;
      WTF::HashSet<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTableTraits>::~HashSet(v83, v22);
      v63 = v81;
      v81 = 0;
      *(_BYTE *)a6 = 21;
      a6[1] = v63;
      *((_BYTE *)a6 + 16) = 1;
    }
    else
    {
      v25 = 0;
      v26 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
LABEL_20:
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v14 - 96), (WTF::StringImpl *)v22);
      v28 = *(unsigned int *)(v27 + 32);
      if ((_DWORD)v28 == 1)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      else
      {
        if ((_DWORD)v28 == -1)
          goto LABEL_96;
        v29 = v27;
        v30 = v26;
        v31 = v25;
        v32 = (WebCore::SecurityOriginData *)(v27 + 8);
        v66 = v83;
        v33 = (_QWORD *)((uint64_t (*)(uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v28])(&v66, v27 + 8);
        if (MEMORY[0x19AEA53F4](*v33, "file", 4) && *(_BYTE *)(v29 + 59))
          WTF::StringImpl::createWithoutCopyingNonEmpty();
        else
          WebCore::SecurityOriginData::toString(v32, v83);
        v25 = v31;
        v26 = v30;
        v18 = (WebCore::Node *)(v14 - 288);
      }
      v34 = *(_QWORD *)(a3 + 72);
      if (v34)
      {
        v34 = *(_QWORD *)(v34 + 8);
        if (v34)
        {
          if (*(_BYTE *)(v34 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x1945A0DA0);
          }
          v34 = *(_QWORD *)(v34 + 240);
          if (v34)
          {
            v34 = *(_QWORD *)(v34 + 8);
            if (v34)
            {
              v34 = *(_QWORD *)(v34 + 112);
              if (v34)
                ++*(_DWORD *)v34;
            }
          }
        }
      }
      v70 = (WTF *)v34;
      v35 = v71;
      v71 = 0;
      v36 = (WTF *)v80;
      v80 = 0;
      v81 = 0;
      v66 = v35;
      v67 = v36;
      v68 = v25;
      v69 = v26;
      v37 = v76;
      v76 = 0;
      v65 = v37;
      WebCore::LocalDOMWindow::processPostMessage(a1, a2, (_DWORD **)v83, (uint64_t)&v66, (uint64_t *)&v70, &v65);
      v39 = v65;
      v65 = 0;
      if (v39)
      {
        do
        {
          v40 = __ldaxr((unsigned int *)v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, (unsigned int *)v39));
        if (!v41)
        {
          atomic_store(1u, (unsigned int *)v39);
          v54 = (WTF::StringImpl *)*((_QWORD *)v39 + 6);
          *((_QWORD *)v39 + 6) = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v38);
            else
              *(_DWORD *)v54 -= 2;
          }
          v55 = (WTF::StringImpl *)*((_QWORD *)v39 + 5);
          *((_QWORD *)v39 + 5) = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v38);
            else
              *(_DWORD *)v55 -= 2;
          }
          v56 = *((unsigned int *)v39 + 8);
          if ((_DWORD)v56 != -1)
            ((void (*)(char *, char *))off_1E33FF730[v56])(&v79, (char *)v39 + 8);
          *((_DWORD *)v39 + 8) = -1;
          WTF::fastFree(v39, v38);
        }
      }
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      v42 = v67;
      if (v67)
      {
        v67 = 0;
        v68 = 0;
        WTF::fastFree(v42, v38);
      }
      v43 = (unsigned int *)v66;
      v66 = 0;
      if (v43)
      {
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          atomic_store(1u, v43);
          WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v43 + 2), v38);
          WTF::fastFree((WTF *)v43, v57);
        }
      }
      v46 = v70;
      if (v70)
      {
        if (*(_DWORD *)v70 == 1)
        {
          v50 = (uint64_t *)*((_QWORD *)v70 + 2);
          *((_QWORD *)v70 + 2) = 0;
          if (v50)
          {
            if (*v50)
              WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v50, (WTF::StringImpl *)v38);
            WTF::fastFree((WTF *)v50, v38);
          }
          v51 = (unsigned int *)*((_QWORD *)v46 + 1);
          *((_QWORD *)v46 + 1) = 0;
          if (v51)
          {
            do
            {
              v52 = __ldaxr(v51);
              v53 = v52 - 1;
            }
            while (__stlxr(v53, v51));
            if (!v53)
            {
              atomic_store(1u, v51);
              WTF::fastFree((WTF *)v51, v38);
            }
          }
          WTF::fastFree(v46, v38);
        }
        else
        {
          --*(_DWORD *)v70;
        }
      }
      v47 = (WTF::StringImpl *)v83[0];
      v83[0] = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v38);
        else
          *(_DWORD *)v47 -= 2;
      }
      v48 = v82;
      if (v82 == -1)
      {
LABEL_49:
        v24 = v73;
        if (v73 == -1)
          goto LABEL_51;
        goto LABEL_50;
      }
    }
    ((void (*)(uint64_t ***, uint64_t ***))off_1E33FF6E0[v48])(&v66, &v80);
    goto LABEL_49;
  }
  if (v78 != 1)
  {
LABEL_96:
    v64 = (WebCore::KeyframeEffect *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::KeyframeEffect::applyPendingAcceleratedActionsOrUpdateTimingProperties(v64);
    return;
  }
  v20 = v77;
  v77 = 0;
  *(_BYTE *)a6 = (_BYTE)v76;
  a6[1] = v20;
  v21 = 1;
  *((_BYTE *)a6 + 16) = 1;
LABEL_55:
  ((void (*)(uint64_t ***, WTF **))off_1E33FF700[v21])(&v80, &v76);
LABEL_56:
  if (*v19 == 2)
  {
    if ((*(_WORD *)(v14 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef(v18, v38);
  }
  else
  {
    *v19 -= 2;
  }
}

void WebCore::KeyframeEffect::applyPendingAcceleratedActionsOrUpdateTimingProperties(WebCore::KeyframeEffect *this)
{
  int v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  _BYTE v5[112];

  if ((WebCore::KeyframeEffect::threadedAnimationResolutionEnabled(this) & 1) == 0)
  {
    if (*((_DWORD *)this + 65))
    {
      WebCore::KeyframeEffect::applyPendingAcceleratedActions(this);
    }
    else
    {
      WebCore::AnimationEffect::getComputedTiming((uint64_t)this, (uint64_t)v5);
      v2 = v5[58];
      WebCore::ComputedEffectTiming::~ComputedEffectTiming((WebCore::ComputedEffectTiming *)v5, v3);
      if (v2 == 1)
      {
        v5[0] = 2;
        v4 = *((unsigned int *)this + 65);
        if ((_DWORD)v4 == *((_DWORD *)this + 64))
        {
          WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeEffect::AcceleratedAction>((uint64_t)this + 248, (unint64_t)v5);
        }
        else
        {
          *(_BYTE *)(*((_QWORD *)this + 31) + v4) = 2;
          *((_DWORD *)this + 65) = v4 + 1;
        }
        *((_BYTE *)this + 304) = 0;
        WebCore::KeyframeEffect::applyPendingAcceleratedActions(this);
        WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 62, 0);
      }
    }
  }
}

uint64_t WebCore::KeyframeEffect::addPendingAcceleratedAction(uint64_t a1, int a2)
{
  int v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  WebCore::WebAnimation *v7;
  unsigned __int8 v8;

  v2 = a2;
  v8 = a2;
  result = WebCore::KeyframeEffect::threadedAnimationResolutionEnabled((WebCore::KeyframeEffect *)a1);
  if ((result & 1) == 0 && (*(_BYTE *)(a1 + 310) & 0xFE) != 2 && *(unsigned __int8 *)(a1 + 304) != v2)
  {
    if (v2 == 4)
      WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(a1 + 248), 0);
    v5 = *(unsigned int *)(a1 + 260);
    if ((_DWORD)v5 == *(_DWORD *)(a1 + 256))
    {
      WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeEffect::AcceleratedAction&>(a1 + 248, (unint64_t)&v8);
      v2 = v8;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 248) + v5) = v2;
      *(_DWORD *)(a1 + 260) = v5 + 1;
    }
    if ((v2 - 4) <= 0xFFFFFFFD)
      *(_BYTE *)(a1 + 304) = v2;
    v6 = *(_QWORD *)(a1 + 96);
    if (v6)
      v7 = *(WebCore::WebAnimation **)(v6 + 8);
    else
      v7 = 0;
    return WebCore::WebAnimation::acceleratedStateDidChange(v7);
  }
  return result;
}

uint64_t WebCore::KeyframeEffect::forceLayoutIfNeeded(WebCore::KeyframeEffect *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!*((_BYTE *)this + 311) || !*((_QWORD *)this + 33))
    return 0;
  result = WebCore::KeyframeEffect::renderer(this);
  if (!result)
    return result;
  v3 = *(_QWORD *)(result + 32);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return 0;
  v4 = *((_QWORD *)this + 15);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 33) + 40) + 8);
  v6 = *(_QWORD *)(v5 + 528);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return 0;
  result = *(_QWORD *)(v7 + 288);
  if (result)
  {
    WebCore::LocalFrameView::forceLayout((WebCore::LocalFrameView *)result, 0);
    return 1;
  }
  return result;
}

uint64_t WebCore::JSHTMLDocument::defineOwnProperty(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl *this, uint64_t a4, int a5)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v11;
  unsigned int i;
  unsigned int v13;
  WTF::StringImpl *v14;

  if (this)
  {
    v6 = *((_DWORD *)this + 4);
    if ((v6 & 0x20) == 0)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(_DWORD *)this;
      *(_DWORD *)this += 2;
      v9 = *(_QWORD *)(v7 + 3512);
      if (v9)
      {
        v11 = 0;
        for (i = v6 >> 8; ; i = v11 + v13)
        {
          v13 = i & *(_DWORD *)(v9 - 8);
          v14 = *(WTF::StringImpl **)(v9 + 40 * v13);
          if (!v14)
            break;
          if (v14 != (WTF::StringImpl *)-1 && v14 == this)
          {
            if (v8)
              *(_DWORD *)this = v8;
            else
              WTF::StringImpl::destroy(this, a2);
            if (a5)
              JSC::throwTypeError();
            return 0;
          }
          ++v11;
        }
      }
      if (v8)
        *(_DWORD *)this = v8;
      else
        WTF::StringImpl::destroy(this, a2);
    }
  }
  return JSC::JSObject::defineOwnProperty();
}

_QWORD *WebCore::JSErrorHandler::create@<X0>(WebCore::JSErrorHandler *this@<X0>, JSC::JSObject *a2@<X1>, JSC::JSObject *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char v7;
  uint64_t v11;
  _QWORD *result;

  v7 = (char)a3;
  v11 = WTF::fastMalloc((WTF *)0x48);
  result = (_QWORD *)WebCore::JSEventListener::JSEventListener(v11, (uint64_t)this, (uint64_t)a2, v7, 0, a4);
  *result = off_1E3392348;
  result[3] = &unk_1E33923C8;
  *a5 = result;
  return result;
}

uint64_t WebCore::JSDOMStringMap::getOwnPropertyNames(uint64_t a1, unsigned __int8 *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WTF::StringImpl *v6;
  WTF *v7;
  WTF *v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  int v49;
  unsigned int v50;
  WTF::StringImpl *v51[2];
  char v52;
  WTF::StringImpl *v53;

  WebCore::DatasetDOMStringMap::supportedPropertyNames(*(unsigned int **)(a1 + 24), a2, a3, a4, (uint64_t)&v48, a5);
  v7 = v48;
  if (!v50)
  {
LABEL_75:
    if (v7)
      goto LABEL_85;
    return JSC::JSObject::getOwnPropertyNames();
  }
  v8 = (WTF *)((char *)v48 + 8 * v50);
  v9 = (uint64_t *)(a3 + 8);
  do
  {
    v10 = *(WTF::StringImpl **)v7;
    if (*(_QWORD *)v7)
    {
      if ((*((_BYTE *)v10 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v10 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase();
        v10 = v51[0];
      }
    }
    v11 = *(_DWORD *)v10;
    *(_DWORD *)v10 += 2;
    if (v11)
      *(_DWORD *)v10 = v11;
    else
      WTF::StringImpl::destroy(v10, v6);
    v53 = v10;
    v12 = *((_DWORD *)v10 + 4);
    if ((v12 & 0x20) != 0)
    {
      if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v10 + 36) & 4) != 0)
        goto LABEL_67;
    }
    else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
    {
      goto LABEL_67;
    }
    v13 = *(_QWORD *)a3;
    v14 = *(unsigned int *)(*(_QWORD *)a3 + 20);
    if (v14 > 0x13)
    {
      if (*v9 && *(_DWORD *)(*v9 - 12))
      {
LABEL_25:
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), (uint64_t *)&v53, (uint64_t)v51);
        if (!v52)
          goto LABEL_67;
        v16 = v53;
        v13 = *(_QWORD *)a3;
        v12 = *((_DWORD *)v53 + 4);
        if ((v12 & 0x20) == 0)
        {
LABEL_21:
          if ((v12 & 0x10) != 0)
          {
            *(_DWORD *)v16 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v16 = v51[0];
          }
          v17 = *(_DWORD *)v16;
          *(_DWORD *)v16 += 2;
          if (!v17)
          {
            WTF::StringImpl::destroy(v16, v6);
LABEL_61:
            v38 = (uint64_t *)(v13 + 8);
            v51[0] = v16;
            v39 = *(unsigned int *)(v13 + 20);
            if ((_DWORD)v39 == *(_DWORD *)(v13 + 16))
            {
              v40 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)v51);
              v39 = *(unsigned int *)(v13 + 20);
              v41 = *(_QWORD *)(v13 + 8);
              v42 = *v40;
              *v40 = 0;
              *(_QWORD *)(v41 + 8 * v39) = v42;
            }
            else
            {
              v43 = *v38;
              v51[0] = 0;
              *(_QWORD *)(v43 + 8 * v39) = v16;
            }
            *(_DWORD *)(v13 + 20) = v39 + 1;
            v44 = v51[0];
            v51[0] = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, v6);
              else
                *(_DWORD *)v44 -= 2;
            }
            goto LABEL_67;
          }
LABEL_60:
          *(_DWORD *)v16 = v17;
          goto LABEL_61;
        }
LABEL_27:
        v17 = *(_DWORD *)v16 + 2;
        goto LABEL_60;
      }
      v18 = *(uint64_t **)(v13 + 8);
      v19 = &v18[v14];
      while (1)
      {
        v20 = *v18;
        v21 = *v9;
        if (*v9
          || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), 8u, 0), (v21 = *v9) != 0))
        {
          v22 = *(_DWORD *)(v21 - 8);
        }
        else
        {
          v22 = 0;
        }
        v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
        v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        v26 = v22 & ((v25 >> 31) ^ v25);
        v27 = (uint64_t *)(v21 + 8 * v26);
        v28 = *v27;
        if (*v27)
        {
          v29 = 0;
          v30 = 1;
          while (v28 != v20)
          {
            if (v28 == -1)
              v29 = v27;
            v26 = (v26 + v30) & v22;
            v27 = (uint64_t *)(v21 + 8 * v26);
            v28 = *v27;
            ++v30;
            if (!*v27)
            {
              if (v29)
              {
                *v29 = 0;
                --*(_DWORD *)(*v9 - 16);
                v27 = v29;
              }
              goto LABEL_40;
            }
          }
          goto LABEL_53;
        }
LABEL_40:
        *v27 = v20;
        v31 = *v9;
        v32 = *v9 ? *(_DWORD *)(v31 - 12) + 1 : 1;
        *(_DWORD *)(v31 - 12) = v32;
        v33 = *v9;
        v34 = *v9 ? *(_DWORD *)(v33 - 12) : 0;
        v35 = (*(_DWORD *)(v33 - 16) + v34);
        v36 = *(unsigned int *)(v33 - 4);
        if (v36 > 0x400)
          break;
        if (3 * v36 <= 4 * v35)
        {
          if ((_DWORD)v36)
            goto LABEL_49;
          v37 = 8;
          goto LABEL_52;
        }
LABEL_53:
        if (++v18 == v19)
          goto LABEL_25;
      }
      if (v36 > 2 * v35)
        goto LABEL_53;
LABEL_49:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
LABEL_52:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(a3 + 8), v37, v27);
      goto LABEL_53;
    }
    if (!(_DWORD)v14)
    {
LABEL_20:
      v16 = v10;
      if ((v12 & 0x20) == 0)
        goto LABEL_21;
      goto LABEL_27;
    }
    v15 = *(WTF::StringImpl ***)(v13 + 8);
    while (*v15 != v10)
    {
      ++v15;
      if (!--v14)
        goto LABEL_20;
    }
LABEL_67:
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
    v7 = (WTF *)((char *)v7 + 8);
  }
  while (v7 != v8);
  v7 = v48;
  if (!v50)
    goto LABEL_75;
  v46 = 8 * v50;
  do
  {
    v47 = *(WTF::StringImpl **)v7;
    *(_QWORD *)v7 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v6);
      else
        *(_DWORD *)v47 -= 2;
    }
    v7 = (WTF *)((char *)v7 + 8);
    v46 -= 8;
  }
  while (v46);
  v7 = v48;
  if (v48)
  {
LABEL_85:
    v48 = 0;
    v49 = 0;
    WTF::fastFree(v7, v6);
  }
  return JSC::JSObject::getOwnPropertyNames();
}

BOOL WebCore::IOSApplication::isUNIQLOApp(WebCore::IOSApplication *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (byte_1ECE8177C != 1)
  {
    if ((byte_1ECE81781 & 1) != 0)
    {
      v4 = (WTF::StringImpl *)qword_1ECE81790;
      if (qword_1ECE81790)
        goto LABEL_6;
    }
    else
    {
      qword_1ECE81790 = 0;
      byte_1ECE81781 = 1;
    }
    if ((byte_1ECE81782 & 1) != 0)
    {
      v4 = (WTF::StringImpl *)qword_1ECE81798;
      if (qword_1ECE81798)
      {
LABEL_6:
        v5 = *(_DWORD *)v4 + 2;
        *(_DWORD *)v4 = v5;
        *(_DWORD *)v4 = v5 + 2;
        v8 = v4;
        if (v5)
          *(_DWORD *)v4 = v5;
        else
          WTF::StringImpl::destroy(v4, a2);
        goto LABEL_8;
      }
    }
    else
    {
      qword_1ECE81798 = 0;
      byte_1ECE81782 = 1;
    }
    MEMORY[0x19AEA5508](&v8, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"));
    v2 = (uint64_t)v8;
    if (!v8)
    {
LABEL_11:
      byte_1ECE8177B = v2;
      byte_1ECE8177C = 1;
      return v2;
    }
LABEL_8:
    v2 = WTF::StringImpl::startsWith();
    v7 = v8;
    v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    goto LABEL_11;
  }
  return byte_1ECE8177B != 0;
}

void sub_1945A179C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::FormController::takeStateForFormElement@<X0>(WTF::StringImpl *this@<X0>, const WebCore::ValidatedFormListedElement *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  uint64_t *v19;
  WTF::StringImpl *v20[2];

  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this - 12))
    goto LABEL_2;
  v18 = a3;
  v19 = (uint64_t *)this;
  v5 = (uint64_t **)((char *)this + 8);
  v4 = (uint64_t *)*((_QWORD *)this + 1);
  if (!v4)
  {
    v6 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *(_QWORD *)v6 = 0;
    v20[0] = v6;
    std::unique_ptr<WebCore::FormController::FormKeyGenerator>::operator=[abi:sn180100](v5, (WTF::StringImpl *)v20);
    std::unique_ptr<WebCore::FormController::FormKeyGenerator>::~unique_ptr[abi:sn180100]((uint64_t **)v20, v7);
    v4 = *v5;
  }
  WebCore::FormController::FormKeyGenerator::formKey((WebCore::FormController::FormKeyGenerator *)v4, a2, (int **)v20);
  v10 = (WTF::StringImpl **)WTF::HashMap<WTF::String,WebCore::FormController::SavedFormState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FormController::SavedFormState>,WTF::HashTableTraits>::find(v19, v20, v8);
  this = v20[0];
  v20[0] = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v9);
    else
      *(_DWORD *)this -= 2;
  }
  v11 = *v19;
  if (*v19)
    v11 += 16 * *(unsigned int *)(v11 - 4);
  if ((WTF::StringImpl **)v11 == v10)
  {
    a3 = v18;
LABEL_2:
    *a3 = 0;
    a3[1] = 0;
    return this;
  }
  v12 = (WTF::StringImpl **)(*(uint64_t (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)a2 + 128))(a2);
  v13 = (WTF::StringImpl **)(*(uint64_t (**)(const WebCore::ValidatedFormListedElement *))(*(_QWORD *)a2 + 328))(a2);
  v14 = *v12;
  if (*v12)
    *(_DWORD *)v14 += 2;
  v15 = v10 + 1;
  v20[0] = v14;
  v16 = *v13;
  if (*v13)
    *(_DWORD *)v16 += 2;
  v20[1] = v16;
  WebCore::FormController::SavedFormState::takeControlState((uint64_t)(v10 + 1), (WTF::StringImpl *)v20, v18);
  this = (WTF::StringImpl *)WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v20, v17);
  if (!*v15 || !*(_DWORD *)(*v15 - 12))
    return (WTF::StringImpl *)WTF::HashMap<WTF::String,WebCore::FormController::SavedFormState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FormController::SavedFormState>,WTF::HashTableTraits>::remove(v19, v10);
  return this;
}

uint64_t *WebCore::DocumentLoader::setTitle(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t *result;
  uint64_t v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;

  result = (uint64_t *)WTF::equal(*(WTF **)(a1 + 1608), *(const WTF::StringImpl **)a2, a3);
  if (!(_DWORD)result || (*(_BYTE *)(a1 + 1616) == 0) == (*(_BYTE *)(a2 + 8) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 280) + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 480))(v6, a1);
    v8 = *(const WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v8 += 2;
    result = *(uint64_t **)(a1 + 1608);
    *(_QWORD *)(a1 + 1608) = v8;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(a1 + 1616) = *(_BYTE *)(a2 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        result = *(uint64_t **)(v10 + 280);
        if (result)
          return WebCore::FrameLoader::didChangeTitle((WebCore::FrameLoader *)result, (WebCore::DocumentLoader *)a1);
      }
    }
  }
  return result;
}

uint64_t WebCore::DocumentLoader::startIconLoading(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  WebCore::Document *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  int v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Document *v23;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 8);
    if (v2)
    {
      v3 = this;
      if (*(_QWORD *)(v2[35] + 88) == this)
      {
        v4 = (WebCore::Document *)v2[37];
        if (v4)
        {
          if (*(_QWORD **)(v2[16] + 8) == v2)
          {
            v5 = *((_QWORD *)v4 + 92);
            if (v5)
            {
              if (*(_DWORD *)(v5 + 4))
              {
                this = WTF::URL::protocolIs();
                if ((this & 1) == 0)
                {
                  v23 = v4;
                  WebCore::LinkIconCollector::iconsOfTypes(&v23, 7, (uint64_t)&v15);
                  WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 2816, (WTF::StringImpl *)&v15);
                  WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
                  v7 = *(unsigned int *)(v3 + 2828);
                  if ((_DWORD)v7)
                  {
                    v8 = (unsigned __int8 *)(*(_QWORD *)(v3 + 2816) + 40);
                    do
                    {
                      v9 = *v8;
                      v8 += 80;
                      if (v9 == 1)
                        goto LABEL_20;
                    }
                    while (--v7);
                  }
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  WebCore::Document::completeURL(v4, &v23, 0, (WTF::URL *)&v15);
                  v17 = 1;
                  v20 = 0;
                  v21 = 0;
                  v22 = 0;
                  v18 = 0;
                  v19 = 0;
                  v10 = *(_DWORD *)(v3 + 2828);
                  if (v10 == *(_DWORD *)(v3 + 2824))
                  {
                    WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkIcon>(v3 + 2816, (unint64_t)&v15);
                  }
                  else
                  {
                    WebCore::LinkIcon::LinkIcon(*(_QWORD *)(v3 + 2816) + 80 * v10, (uint64_t *)&v15);
                    ++*(_DWORD *)(v3 + 2828);
                  }
                  WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v15, v11);
                  this = (uint64_t)v23;
                  v23 = 0;
                  if (this)
                  {
                    if (*(_DWORD *)this == 2)
                      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
                    else
                      *(_DWORD *)this -= 2;
                  }
                  if (*(_DWORD *)(v3 + 2828))
                  {
LABEL_20:
                    v23 = (WebCore::Document *)v3;
                    WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::DocumentLoader::startIconLoading(void)::$_1,WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v15, v3 + 2816, &v23);
                    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 280) + 16);
                    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v13 + 1128))(v13, &v15);
                    this = (uint64_t)v15;
                    if (v15)
                    {
                      v15 = 0;
                      v16 = 0;
                      return WTF::fastFree((WTF *)this, v14);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::CachedResource::addClient(WebCore::CachedResource *this, WebCore::CachedResourceClient *a2)
{
  uint64_t result;

  result = WebCore::CachedResource::addClientToSet(this, a2);
  if ((_DWORD)result)
    return (*(uint64_t (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)this + 88))(this, a2);
  return result;
}

uint64_t WebCore::CachedResource::setBodyDataFrom(WebCore::CachedResource *this, const WebCore::CachedResource *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  void *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  WebCore::CachedResource::ResponseData *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v29;
  WebCore::CachedResource::ResponseData *v30;
  WTF *v31;
  void *v32;
  WebCore::CachedResource::ResponseData *v33;
  WTF::StringImpl *v34;
  WebCore::CachedResource::ResponseData *v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  char v52;
  char **v53;
  char *v54;

  v4 = (unsigned int *)*((_QWORD *)a2 + 49);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = v4;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v38 = *(unsigned int *)(v6 + 20);
      if ((_DWORD)v38)
      {
        v39 = *(_QWORD *)(v6 + 8);
        v40 = v39 + 16 * v38;
        do
        {
          v41 = *(unsigned int **)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          if (v41)
          {
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              v49 = v39;
              v50 = v40;
              v48 = v6;
              atomic_store(1u, v41);
              v44 = v41[6];
              if ((_DWORD)v44 != -1)
                ((void (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v44])(&v54, v41 + 2);
              v41[6] = -1;
              WTF::fastFree((WTF *)v41, a2);
              v6 = v48;
              v39 = v49;
              v40 = v50;
            }
          }
          v39 += 16;
        }
        while (v39 != v40);
      }
      v45 = *(WTF **)(v6 + 8);
      if ((WTF *)(v6 + 24) != v45 && v45 != 0)
      {
        *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
        v47 = v6;
        WTF::fastFree(v45, a2);
        v6 = v47;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  if (*((unsigned __int8 *)this + 584) == *((unsigned __int8 *)a2 + 584))
  {
    if (*((_BYTE *)this + 584))
    {
      *((_BYTE *)this + 560) = *((_BYTE *)a2 + 560);
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 568, (const void **)a2 + 71);
    }
  }
  else if (*((_BYTE *)this + 584))
  {
    v9 = (WTF *)*((_QWORD *)this + 71);
    if (v9)
    {
      *((_QWORD *)this + 71) = 0;
      *((_DWORD *)this + 144) = 0;
      WTF::fastFree(v9, a2);
    }
    *((_BYTE *)this + 584) = 0;
  }
  else
  {
    *((_BYTE *)this + 560) = *((_BYTE *)a2 + 560);
    v10 = (WTF *)*((unsigned int *)a2 + 145);
    *((_QWORD *)this + 72) = 0;
    *((_QWORD *)this + 71) = 0;
    *((_DWORD *)this + 145) = (_DWORD)v10;
    if ((_DWORD)v10)
    {
      v11 = (void *)WTF::fastMalloc(v10);
      *((_DWORD *)this + 144) = (_DWORD)v10;
      *((_QWORD *)this + 71) = v11;
      memcpy(v11, *((const void **)a2 + 71), *((unsigned int *)a2 + 145));
    }
    *((_BYTE *)this + 584) = 1;
  }
  if (*((unsigned __int8 *)this + 616) == *((unsigned __int8 *)a2 + 616))
  {
    if (*((_BYTE *)this + 616))
    {
      *((_BYTE *)this + 592) = *((_BYTE *)a2 + 592);
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 600, (const void **)a2 + 75);
    }
  }
  else if (*((_BYTE *)this + 616))
  {
    v12 = (WTF *)*((_QWORD *)this + 75);
    if (v12)
    {
      *((_QWORD *)this + 75) = 0;
      *((_DWORD *)this + 152) = 0;
      WTF::fastFree(v12, a2);
    }
    *((_BYTE *)this + 616) = 0;
  }
  else
  {
    *((_BYTE *)this + 592) = *((_BYTE *)a2 + 592);
    v13 = (WTF *)*((unsigned int *)a2 + 153);
    *((_QWORD *)this + 76) = 0;
    *((_QWORD *)this + 75) = 0;
    *((_DWORD *)this + 153) = (_DWORD)v13;
    if ((_DWORD)v13)
    {
      v14 = (void *)WTF::fastMalloc(v13);
      *((_DWORD *)this + 152) = (_DWORD)v13;
      *((_QWORD *)this + 75) = v14;
      memcpy(v14, *((const void **)a2 + 75), *((unsigned int *)a2 + 153));
    }
    *((_BYTE *)this + 616) = 1;
  }
  if (*((unsigned __int8 *)this + 648) == *((unsigned __int8 *)a2 + 648))
  {
    if (*((_BYTE *)this + 648))
    {
      *((_BYTE *)this + 624) = *((_BYTE *)a2 + 624);
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 632, (const void **)a2 + 79);
    }
  }
  else if (*((_BYTE *)this + 648))
  {
    v15 = (WTF *)*((_QWORD *)this + 79);
    if (v15)
    {
      *((_QWORD *)this + 79) = 0;
      *((_DWORD *)this + 160) = 0;
      WTF::fastFree(v15, a2);
    }
    *((_BYTE *)this + 648) = 0;
  }
  else
  {
    *((_BYTE *)this + 624) = *((_BYTE *)a2 + 624);
    v16 = (WTF *)*((unsigned int *)a2 + 161);
    *((_QWORD *)this + 80) = 0;
    *((_QWORD *)this + 79) = 0;
    *((_DWORD *)this + 161) = (_DWORD)v16;
    if ((_DWORD)v16)
    {
      v17 = (void *)WTF::fastMalloc(v16);
      *((_DWORD *)this + 160) = (_DWORD)v16;
      *((_QWORD *)this + 79) = v17;
      memcpy(v17, *((const void **)a2 + 79), *((unsigned int *)a2 + 161));
    }
    *((_BYTE *)this + 648) = 1;
  }
  v18 = (uint64_t *)*((_QWORD *)a2 + 50);
  if (!v18)
  {
    v19 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v19 != -1)
    {
      v54 = &v52;
      v53 = &v54;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v53, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v18 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  v20 = *((_QWORD *)this + 50);
  if (!v20)
  {
    v20 = WTF::fastMalloc((WTF *)0x198);
    WebCore::CachedResource::ResponseData::ResponseData((WebCore::CachedResource::ResponseData *)v20, this);
    v30 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = v20;
    if (v30)
    {
      WebCore::CachedResource::ResponseData::~ResponseData(v30, v29);
      WTF::fastFree(v31, v32);
      v20 = *((_QWORD *)this + 50);
    }
  }
  WebCore::ResourceResponseBase::operator=(v20, (uint64_t)v18);
  v21 = (const void *)v18[30];
  if (v21)
  {
    v51 = (const void *)v18[30];
    CFRetain(v21);
    v21 = v51;
  }
  v22 = *(const void **)(v20 + 240);
  *(_QWORD *)(v20 + 240) = v21;
  if (v22)
    CFRelease(v22);
  *(_BYTE *)(v20 + 248) = *((_BYTE *)v18 + 248);
  v23 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
  if (!v23)
  {
    v33 = (WebCore::CachedResource::ResponseData *)WTF::fastMalloc((WTF *)0x198);
    v23 = WebCore::CachedResource::ResponseData::ResponseData(v33, this);
    v35 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = v23;
    if (v35)
    {
      WebCore::CachedResource::ResponseData::~ResponseData(v35, v34);
      WTF::fastFree(v36, v37);
      v23 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
    }
  }
  *((_WORD *)v23 + 116) = *((_WORD *)v23 + 116) & 0xFCFF | ((*(_WORD *)((_BYTE *)this + 557) & 3) << 8);
  v24 = *((_QWORD *)a2 + 50);
  if (v24)
    v25 = *(_DWORD *)(v24 + 404);
  else
    v25 = 0;
  WebCore::CachedResource::setDecodedSize(this, v25);
  v26 = *((_QWORD *)a2 + 50);
  if (v26)
    v27 = *(_DWORD *)(v26 + 400);
  else
    v27 = 0;
  return WebCore::CachedResource::setEncodedSize(this, v27);
}

_DWORD *WebCore::RenderElement::removeLayers(WebCore::RenderLayer **this, void *a2)
{
  _DWORD *result;
  _DWORD *v4;
  WebCore::RenderLayer *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  result = (_DWORD *)WebCore::RenderElement::layerParent((WebCore::RenderElement *)this, a2);
  if (result)
  {
    v4 = result;
    ++result[2];
    if ((*((_BYTE *)this + 21) & 0x80) != 0)
    {
      if ((*((_BYTE *)this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1945A21A0);
      }
      v5 = this[18];
      if (v5)
        ++*((_DWORD *)v5 + 2);
      result = (_DWORD *)WebCore::RenderLayer::removeChild((WebCore::RenderLayer *)result, v5);
      v6 = *((_DWORD *)v5 + 2);
      if (!v6)
      {
        __break(0xC471u);
        JUMPOUT(0x1945A21C0);
      }
      *((_DWORD *)v5 + 2) = v6 - 1;
    }
    else
    {
      v8 = *((unsigned __int8 *)this + 68);
      for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v11 + 47))
      {
        v10 = i | (v8 << 32);
        if (!v10)
          break;
        v11 = *(_QWORD *)(v10 + 8);
        if (!v11)
          break;
        if ((*(_BYTE *)(v11 + 45) & 2) == 0)
        {
LABEL_15:
          ++*(_DWORD *)(v11 + 16);
          result = (_DWORD *)WebCore::RenderElement::removeLayers((WebCore::RenderElement *)v11);
          v12 = *(_DWORD *)(v11 + 16);
          if (!v12)
          {
            __break(0xC471u);
            JUMPOUT(0x1945A21E0);
          }
          *(_DWORD *)(v11 + 16) = v12 - 1;
          while (1)
          {
            v13 = *(unsigned int *)(v11 + 47);
            if (!(v13 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)))
              goto LABEL_8;
            v11 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
            if (!v11)
              goto LABEL_8;
            if ((*(_BYTE *)(v11 + 45) & 2) == 0)
              goto LABEL_15;
          }
        }
        v8 = *(unsigned __int8 *)(v11 + 51);
      }
    }
LABEL_8:
    v7 = v4[2];
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1945A2180);
    }
    v4[2] = v7 - 1;
  }
  return result;
}

uint64_t WebCore::MutationEvent::operator new(uint64_t this)
{
  if (this == 112)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

void WebCore::MutationEvent::~MutationEvent(WebCore::MutationEvent *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::MutationEvent::~MutationEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::Event::~Event(this, a2);
}

uint64_t WebCore::MutationEvent::MutationEvent(uint64_t a1, _QWORD *a2, int a3, int a4, uint64_t a5, _DWORD **a6, _DWORD **a7)
{
  uint64_t v14;
  _BOOL4 v15;
  unsigned int v16;
  int v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *a2 != 0;
  v16 = *(_DWORD *)(a1 + 20) & 0xFFC00000;
  if (a4)
    v17 = 4;
  else
    v17 = 0;
  if (a3)
    v18 = 2523650;
  else
    v18 = 2523648;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v18 | v17 | v16 | v15;
  v19 = (_DWORD *)*a2;
  if (*a2)
    *v19 += 2;
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)a1 = off_1E33A5E28;
  if (a5)
    *(_DWORD *)(a5 + 24) += 2;
  *(_QWORD *)(a1 + 72) = a5;
  v20 = *a6;
  if (*a6)
    *v20 += 2;
  *(_QWORD *)(a1 + 80) = v20;
  v21 = *a7;
  if (*a7)
    *v21 += 2;
  *(_QWORD *)(a1 + 88) = v21;
  *(_QWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 104) = 0;
  return a1;
}

uint64_t WebCore::JSPerformance::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSHTMLElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGeolocation::subspaceForImpl(WebCore::JSGeolocation *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 824);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 824))
  {
    v12 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v12, JSC::JSCell::numberOfLowerTierCells, &v13);
    v11 = *(_QWORD *)(v9 + 824);
    *(_QWORD *)(v9 + 824) = v13;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v13 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSGeolocation::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v13);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v13);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

unint64_t WebCore::JSGeolocation::createPrototype(WebCore::JSGeolocation *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSGeolocationPrototype::create(this, v4, v5, v6);
}

void WebCore::ContentFilter::~ContentFilter(WebCore::ContentFilter *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;

  v3 = (const void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 10, a2);
  v11 = *((unsigned int *)this + 19);
  if ((_DWORD)v11)
    WTF::VectorDestructor<true,WebCore::ContentFilter::ResourceDataItem>::destruct(*((_QWORD *)this + 8), (uint64_t *)(*((_QWORD *)this + 8) + 16 * v11));
  v12 = (WTF *)*((_QWORD *)this + 8);
  if (v12)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v12, v10);
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    do
    {
      v20 = __ldaxr(v14);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v14));
    if (!v21)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v10);
    }
  }
  v15 = *((unsigned int *)this + 3);
  if ((_DWORD)v15)
  {
    v16 = *(uint64_t **)this;
    v17 = 8 * v15;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  v19 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v19, v10);
  }
}

uint64_t WebCore::ContentFilter::create@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  int v4;
  void *v5;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD v21[2];

  v2 = result;
  {
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = off_1E33F3340;
    v17[1] = WebCore::ParentalControlsContentFilter::create;
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E33F3368;
    v18[1] = WebCore::NetworkExtensionContentFilter::create;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = v17;
    v19[1] = v18;
    v21[0] = 0;
    v21[1] = 0;
    WebCore::ContentFilter::types(void)::types = (uint64_t)v19;
    unk_1EE2F7C28 = 0x200000002;
    result = WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v20);
  }
  v4 = dword_1EE2F7C2C;
  if (dword_1EE2F7C2C)
  {
    if (dword_1EE2F7C2C >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * dword_1EE2F7C2C));
      if (!dword_1EE2F7C2C)
        goto LABEL_14;
      v7 = 0;
      do
      {
        v8 = v7;
        (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(WebCore::ContentFilter::types(void)::types
                                                                   + 8 * v7++)
                                                     + 16))(v21);
        *((_QWORD *)v6 + v8) = v21[0];
      }
      while (v7 < dword_1EE2F7C2C);
      if ((_DWORD)v7)
      {
        v9 = WTF::fastMalloc((WTF *)0xC0);
        *(_QWORD *)v9 = v6;
        *(_DWORD *)(v9 + 8) = v4;
        *(_DWORD *)(v9 + 12) = v7;
        if (!*(_QWORD *)(v2 + 8))
        {
          v13 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v13 = 1;
          *(_QWORD *)(v13 + 8) = v2;
          v14 = *(unsigned int **)(v2 + 8);
          *(_QWORD *)(v2 + 8) = v13;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, v12);
            }
          }
        }
        v10 = *(unsigned int **)(v2 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        *(_QWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v9 + 24) = 0;
        WTF::URL::invalidate((WTF::URL *)(v9 + 24));
        *(_QWORD *)(v9 + 104) = 0;
        *(_QWORD *)(v9 + 112) = 0;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_DWORD *)(v9 + 96) = 0;
        result = WTF::URL::invalidate((WTF::URL *)(v9 + 112));
        *(_QWORD *)(v9 + 168) = 0;
        *(_QWORD *)(v9 + 152) = 0;
        *(_QWORD *)(v9 + 158) = 0;
        *(_BYTE *)(v9 + 176) = 1;
        *(_WORD *)(v9 + 184) = 0;
        *a2 = v9;
      }
      else
      {
LABEL_14:
        *a2 = 0;
        return WTF::fastFree(v6, v5);
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

BOOL WebCore::ContentFilter::continueAfterWillSendRequest(WebCore::ContentFilter *this, WebCore::ResourceRequest *a2, const WebCore::ResourceResponse *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  int v13;
  char v14;
  _BOOL8 v15;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  _BYTE v26[200];

  v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v7 = *((unsigned int *)this + 3);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD **)this;
    v9 = 8 * v7;
    v10 = 1;
    do
    {
      if (*(_DWORD *)(*v8 + 16) == 1)
      {
        (*(void (**)(_QWORD, WebCore::ResourceRequest *, const WebCore::ResourceResponse *))(*(_QWORD *)*v8 + 16))(*v8, a2, a3);
        v12 = *v8;
        v13 = *(_DWORD *)(*v8 + 16);
        if (v13 == 3)
        {
          v17 = *(_QWORD *)(v12 + 8);
          if (v17)
            goto LABEL_30;
          v17 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v17 = 1;
          *(_QWORD *)(v17 + 8) = v12;
          v18 = *(unsigned int **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = v17;
          if (!v18)
            goto LABEL_30;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            atomic_store(1u, v18);
            WTF::fastFree((WTF *)v18, v11);
          }
          v17 = *(_QWORD *)(v12 + 8);
          if (v17)
          {
LABEL_30:
            do
              v21 = __ldaxr((unsigned int *)v17);
            while (__stlxr(v21 + 1, (unsigned int *)v17));
          }
          v22 = (unsigned int *)*((_QWORD *)this + 11);
          *((_QWORD *)this + 11) = v17;
          if (v22)
          {
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v22);
              WTF::fastFree((WTF *)v22, v11);
            }
          }
          WebCore::ContentFilter::didDecide((uint64_t)this);
          goto LABEL_9;
        }
        v10 &= v13 != 1;
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
    if ((v10 & 1) == 0)
      goto LABEL_9;
  }
  *((_DWORD *)this + 24) = 2;
LABEL_9:
  if (*((_DWORD *)this + 24) == 3)
  {
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v26);
    WebCore::ResourceRequest::operator=((uint64_t)a2, (uint64_t)v26);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v26, v25);
  }
  v14 = *((_BYTE *)a2 + 184);
  if ((v14 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    v14 = *((_BYTE *)a2 + 184) | 1;
    *((_BYTE *)a2 + 184) = v14;
  }
  if ((v14 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  v15 = *(_QWORD *)a2 != 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v15;
}

BOOL WebCore::ContentFilter::continueAfterNotifyFinished(WebCore::ContentFilter *this, const WTF::URL *a2)
{
  uint64_t v3;
  int v4;
  _BOOL8 v5;
  void *v7;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  (*(void (**)(uint64_t, const WTF::URL *))(*(_QWORD *)v3 + 16))(v3, a2);
  v4 = *((_DWORD *)this + 24);
  v5 = (v4 != 1
     || (WebCore::ContentFilter::forEachContentFilterUntilBlocked<WebCore::ContentFilter::continueAfterNotifyFinished(WTF::URL const&)::$_0>((unsigned int *)this),
         v4 = *((_DWORD *)this + 24),
         v4 == 3)
     || (*((_DWORD *)this + 24) = 2,
         WebCore::ContentFilter::deliverStoredResourceData((uint64_t)this, v7),
         (v4 = *((_DWORD *)this + 24)) != 0))
    && v4 != 3;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return v5;
}

__n128 WebCore::ContentFilter::startFilteringMainResource(__n128 *this, const WTF::URL *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  __n128 result;
  __n128 v7;

  if (!this[6].n128_u32[0])
  {
    this[6].n128_u32[0] = 1;
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v4 += 2;
    v5 = (WTF::StringImpl *)this[1].n128_u64[1];
    this[1].n128_u64[1] = (unint64_t)v4;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = *(__n128 *)((char *)a2 + 8);
    v7 = *(__n128 *)((char *)a2 + 24);
    this[2] = result;
    this[3] = v7;
  }
  return result;
}

WTF::StringImpl *WebCore::ContentFilter::stopFilteringMainResource(WebCore::ContentFilter *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  __int128 v6;
  __int128 v7;
  WTF::StringImpl *v8;
  __int128 v9;
  __int128 v10;

  if (*((_DWORD *)this + 24) != 3)
    *((_DWORD *)this + 24) = 0;
  v8 = 0;
  WTF::URL::invalidate((WTF::URL *)&v8);
  v3 = v8;
  v8 = 0;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v2);
      result = v8;
    }
    else
    {
      result = 0;
      *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    result = 0;
  }
  v6 = v9;
  v7 = v10;
  LODWORD(v9) = v9 & 0xFFFFFFFE;
  *((_OWORD *)this + 2) = v6;
  *((_OWORD *)this + 3) = v7;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::ContainerNode::cloneChildNodes(WebCore::ContainerNode *this, WebCore::ContainerNode *a2)
{
  uint64_t v3;
  WebCore::ContainerNode *v4;
  int v5;
  WebCore::ContainerNode *v6;
  WebCore::TreeScope *v7;
  int v8;
  WebCore::Node *v9;
  WebCore::TreeScope *v10;
  WebCore::Node *v11;
  uint64_t v12;
  int v13;
  WebCore::Node *v14;
  void *v15;
  int v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  char v19;
  unsigned int *result;
  void *v21;
  WTF *v22;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  WebCore::Node *v27[2];
  __int128 v28;
  uint64_t v29;
  char v30;
  WTF *v31;
  uint64_t v32;
  _BYTE v33[88];

  v3 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v31 = (WTF *)v33;
  v32 = 11;
  v4 = (WebCore::ContainerNode *)*((_QWORD *)this + 10);
  if (!v4)
  {
    *(_OWORD *)v27 = 0u;
    v28 = 0u;
    LOBYTE(v27[0]) = 8;
    v29 = 2;
    v19 = 1;
    goto LABEL_33;
  }
  LOBYTE(v5) = 0;
  *((_DWORD *)v4 + 6) += 2;
  do
  {
    v6 = v4;
    (*(void (**)(WebCore::Node **__return_ptr, WebCore::ContainerNode *, uint64_t, uint64_t))(*(_QWORD *)v4 + 136))(v27, v4, v3, 1);
    ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
    v8 = ++WebCore::ScriptDisallowedScope::s_count;
    v9 = v27[0];
    v10 = (WebCore::TreeScope *)*((_QWORD *)a2 + 5);
    v11 = (WebCore::Node *)*((_QWORD *)v27[0] + 5);
    if (v11 != v10)
    {
      WebCore::Node::moveTreeToNewScope((uint64_t)v27[0], v11, v10, v7);
      v9 = v27[0];
      v8 = WebCore::ScriptDisallowedScope::s_count;
    }
    WebCore::ScriptDisallowedScope::s_count = v8 + 1;
    *((_QWORD *)v9 + 4) = a2;
    *((_DWORD *)v9 + 6) |= 1u;
    v12 = *((_QWORD *)a2 + 11);
    if (!v12)
    {
      *((_QWORD *)a2 + 10) = v9;
      goto LABEL_8;
    }
    v13 = *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v12 + 24) = v13 + 2;
    *((_QWORD *)v9 + 6) = v12 | ((unint64_t)*((unsigned __int16 *)v9 + 27) << 48);
    *(_QWORD *)(v12 + 56) = v9;
    if (v13)
    {
      *(_DWORD *)(v12 + 24) = v13;
LABEL_8:
      v14 = v9;
      goto LABEL_9;
    }
    v14 = v9;
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v9);
      v8 = WebCore::ScriptDisallowedScope::s_count - 1;
      v14 = v27[0];
    }
LABEL_9:
    *((_QWORD *)a2 + 11) = v9;
    WebCore::ScriptDisallowedScope::s_count = v8;
    WebCore::notifyChildNodeInserted((uint64_t)a2, (uint64_t)v14, (uint64_t)&v31);
    if ((v5 & 1) != 0)
      v5 = 1;
    else
      v5 = (*((unsigned __int16 *)v27[0] + 14) >> 3) & 1;
    --WebCore::ScriptDisallowedScope::s_count;
    v16 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
    if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
      && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
    {
      WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v30, v15);
      v16 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
    }
    WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v16 - 1;
    if ((*((_WORD *)v6 + 14) & 4) != 0)
    {
      *((_DWORD *)v6 + 6) += 2;
      v17 = v27[0];
      *((_DWORD *)v27[0] + 6) += 2;
      if ((*((_BYTE *)v17 + 28) & 4) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1945A31A0);
      }
      WebCore::ContainerNode::cloneChildNodes(v6, v17);
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v15);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v6, v15);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
    }
    v18 = v27[0];
    v27[0] = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, v15);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
    v4 = (WebCore::ContainerNode *)*((_QWORD *)v6 + 7);
    if (v4)
      *((_DWORD *)v4 + 6) += 2;
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v15);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  while (v4);
  *(_OWORD *)v27 = 0u;
  v28 = 0u;
  LOBYTE(v27[0]) = 8;
  v29 = 2;
  if (v5)
    v19 = 2;
  else
    v19 = 1;
LABEL_33:
  BYTE1(v29) = v19;
  result = (unsigned int *)(*(uint64_t (**)(WebCore::ContainerNode *, WebCore::Node **))(*(_QWORD *)a2 + 376))(a2, v27);
  v22 = v31;
  if (HIDWORD(v32))
  {
    v24 = 8 * HIDWORD(v32);
    do
    {
      v25 = *(unsigned int **)v22;
      v22 = (WTF *)((char *)v22 + 8);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v25 + 280))(v25);
      v24 -= 8;
    }
    while (v24);
    v22 = v31;
    if (HIDWORD(v32))
    {
      v26 = 8 * HIDWORD(v32);
      do
      {
        result = *(unsigned int **)v22;
        *(_QWORD *)v22 = 0;
        if (result)
        {
          if (result[6] == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result, v21);
          }
          else
          {
            result[6] -= 2;
          }
        }
        v22 = (WTF *)((char *)v22 + 8);
        v26 -= 8;
      }
      while (v26);
      v22 = v31;
    }
  }
  if (v33 != (_BYTE *)v22 && v22 != 0)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    result = (unsigned int *)WTF::fastFree(v22, v21);
  }
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, v21);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ContainerNode::replaceChild@<X0>(WebCore::ContainerNode *this@<X0>, WebCore::Node *a2@<X1>, WebCore::Node *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  WebCore::Node *v9;
  void *v10;
  WebCore::ChildListMutationAccumulator *v11;
  WebCore::Node **v12;
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  const WebCore::Style::RuleSet *v18;
  WebCore::TreeScope *v19;
  WebCore::Node **v20;
  uint64_t v21;
  _BOOL4 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WebCore::Node **v27;
  WebCore::Node *v28;
  __int16 v29;
  char v30;
  char v31;
  uint64_t v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  char v35;
  __int16 v36;
  WebCore::Style::Invalidator *v37;
  int v38;
  _BOOL4 v39;
  WebCore::Node *v40;
  WebCore::TreeScope *v41;
  WebCore::Node *v42;
  WebCore::Node *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  void *v49;
  WebCore::ChildListMutationAccumulator *v50;
  void *v51;
  const WebCore::Style::RuleSet *v52;
  int v53;
  WebCore::Node *v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v60;
  int v61;
  WebCore::Node *v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  WebCore::ChildListMutationAccumulator *v66;
  WTF *v67;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  void *v72;
  WTF *v73;
  void *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  void *v77;
  WTF::StringImpl *v78;
  char v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  Inspector::InspectorDebuggerAgent **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  void *v94;
  _BOOL4 v95;
  _QWORD *v96;
  BOOL v97;
  uint64_t v98;
  WebCore::Node **v99;
  _QWORD *v100;
  WebCore::ChildListMutationAccumulator *v101;
  WTF *v102;
  uint64_t v103;
  _BYTE v104[88];
  WebCore::Node *v105;
  char v106[8];
  WTF::StringImpl *v107;
  char v108;
  WebCore::ChildListMutationAccumulator *v109;
  WebCore::Style::Invalidator *v110;
  WTF::StringImpl *v111;
  BOOL v112;
  BOOL v113;
  BOOL v114;
  WTF *v115;
  WTF::StringImpl *v116;
  _BYTE v117[88];
  __int128 v118;
  __int128 v119;
  uint64_t v120;

  *((_DWORD *)this + 6) += 2;
  result = WebCore::checkAcceptChild((uint64_t)v106, this, a2, (uint64_t)a3, 0, 1);
  if (v108)
  {
    v75 = v107;
    *(_BYTE *)a4 = v106[0];
    *(_QWORD *)(a4 + 8) = v75;
    *(_BYTE *)(a4 + 16) = 1;
    goto LABEL_147;
  }
  v9 = (WebCore::Node *)*((_QWORD *)a3 + 7);
  if (v9)
    *((_DWORD *)v9 + 6) += 2;
  v105 = v9;
  if (v9 == a2)
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v105, *((_QWORD *)a2 + 7));
  v102 = (WTF *)v104;
  v103 = 11;
  WebCore::ChildListMutationScope::ChildListMutationScope((WebCore::ChildListMutationAccumulator **)&v118, this);
  WebCore::ContainerNode::removeSelfOrChildNodesForInsertion((WebCore::NodeTraversal *)&v115, (uint64_t)a2, &v102);
  if (!v117[0])
  {
    v11 = (WebCore::ChildListMutationAccumulator *)v118;
    *(_QWORD *)&v118 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v11, v10);
        WTF::fastFree(v71, v72);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
    if (HIDWORD(v103))
    {
      v12 = (WebCore::Node **)v102;
      v13 = 8 * HIDWORD(v103);
      while (1)
      {
        WebCore::checkAcceptChild((uint64_t)&v118, this, *v12, (uint64_t)a3, 0, 0);
        LOBYTE(v115) = 0;
        v117[0] = 0;
        v14 = v119;
        if ((_BYTE)v119)
        {
          LOBYTE(v115) = v118;
          v15 = (WTF::StringImpl *)*((_QWORD *)&v118 + 1);
          *((_QWORD *)&v118 + 1) = 0;
          v116 = v15;
          v117[0] = 1;
        }
        std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v115, (uint64_t)v106);
        if (v117[0])
        {
          v17 = v116;
          v116 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v16);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        if (v14 && *((_QWORD *)&v118 + 1))
        {
          if (**((_DWORD **)&v118 + 1) == 2)
            WTF::StringImpl::destroy(*((WTF::StringImpl **)&v118 + 1), v16);
          else
            **((_DWORD **)&v118 + 1) -= 2;
        }
        if (v108)
          break;
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_24;
      }
      v78 = v107;
      v107 = 0;
      *(_BYTE *)a4 = v106[0];
      *(_QWORD *)(a4 + 8) = v78;
      *(_BYTE *)(a4 + 16) = 1;
      goto LABEL_134;
    }
LABEL_24:
    *((_DWORD *)a3 + 6) += 2;
    WebCore::ChildListMutationScope::ChildListMutationScope(&v101, this);
    if (*((_QWORD *)a3 + 4))
    {
      WebCore::ContainerNode::removeChild(this, a3, &v118);
      if ((_BYTE)v119)
      {
        v79 = v118;
        v80 = (WTF::StringImpl *)*((_QWORD *)&v118 + 1);
LABEL_189:
        *(_BYTE *)a4 = v79;
        *(_QWORD *)(a4 + 8) = v80;
        *(_BYTE *)(a4 + 16) = 1;
        goto LABEL_129;
      }
      if (HIDWORD(v103))
      {
        v20 = (WebCore::Node **)v102;
        v21 = 8 * HIDWORD(v103);
        while (1)
        {
          WebCore::checkAcceptChild((uint64_t)&v110, this, *v20, (uint64_t)a3, 0, 0);
          LOBYTE(v115) = 0;
          v117[0] = 0;
          v22 = v112;
          if (v112)
          {
            LOBYTE(v115) = (_BYTE)v110;
            v23 = v111;
            v111 = 0;
            v116 = v23;
            v117[0] = 1;
          }
          std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v115, (uint64_t)v106);
          if (v117[0])
          {
            v24 = v116;
            v116 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v16);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
          if (v22 && v111)
          {
            if (*(_DWORD *)v111 == 2)
              WTF::StringImpl::destroy(v111, v16);
            else
              *(_DWORD *)v111 -= 2;
          }
          if (v108)
            break;
          ++v20;
          v21 -= 8;
          if (!v21)
            goto LABEL_40;
        }
        v79 = v106[0];
        v80 = v107;
        v107 = 0;
        goto LABEL_189;
      }
    }
LABEL_40:
    v25 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v25 + 24) += 2;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v83 = *(_QWORD *)(v25 + 528);
      if (v83)
      {
        v84 = *(_QWORD *)(v83 + 8);
        if (v84)
        {
          v85 = *(_QWORD *)(v84 + 24);
          if (v85)
          {
            v86 = *(_QWORD *)(v85 + 8);
            if (v86)
              goto LABEL_198;
          }
        }
      }
      v88 = *(_QWORD *)(v25 + 2632);
      if (v88)
      {
        v89 = *(_QWORD *)(v88 + 8);
        if (v89)
        {
          v90 = *(_QWORD *)(v89 + 528);
          if (v90)
          {
            v91 = *(_QWORD *)(v90 + 8);
            if (v91)
            {
              v92 = *(_QWORD *)(v91 + 24);
              if (v92)
              {
                v86 = *(_QWORD *)(v92 + 8);
                if (v86)
                {
LABEL_198:
                  v87 = *(Inspector::InspectorDebuggerAgent ***)(*(_QWORD *)(*(_QWORD *)(v86 + 80) + 8) + 152);
                  if (v87)
                    WebCore::PageDOMDebuggerAgent::willInsertDOMNode(v87, this);
                }
              }
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v25 + 24) == 2)
    {
      if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v25);
    }
    else
    {
      *(_DWORD *)(v25 + 24) -= 2;
    }
    if (!HIDWORD(v103))
    {
LABEL_128:
      WebCore::Node::dispatchSubtreeModifiedEvent((uint64_t)this);
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
LABEL_129:
      v66 = v101;
      v101 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 1)
        {
          WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v66, v16);
          WTF::fastFree(v73, v74);
        }
        else
        {
          --*(_DWORD *)v66;
        }
      }
      if (*((_DWORD *)a3 + 6) == 2)
      {
        if ((*((_WORD *)a3 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a3);
      }
      else
      {
        *((_DWORD *)a3 + 6) -= 2;
      }
      goto LABEL_134;
    }
    v27 = (WebCore::Node **)v102;
    v99 = (WebCore::Node **)((char *)v102 + 8 * HIDWORD(v103));
    v100 = (_QWORD *)((char *)this + 80);
    while (1)
    {
      if (v105 && *((WebCore::ContainerNode **)v105 + 4) != this)
        goto LABEL_128;
      v28 = *v27;
      if (*((_QWORD *)*v27 + 4))
        goto LABEL_128;
      v120 = 0;
      v118 = 0u;
      v119 = 0u;
      v29 = *((_WORD *)v28 + 14);
      if ((v29 & 2) != 0)
        v30 = 2;
      else
        v30 = 7;
      if ((v29 & 8) != 0)
        v31 = 0;
      else
        v31 = v30;
      if (v105)
      {
        if ((*((_WORD *)v105 + 14) & 8) != 0)
          v34 = v105;
        else
          v34 = 0;
        LOBYTE(v118) = v31;
        if ((v29 & 8) != 0)
          v62 = v28;
        else
          v62 = 0;
        *((_QWORD *)&v118 + 1) = v62;
        v32 = (uint64_t)v105;
        do
          v32 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFLL;
        while (v32 && (*(_WORD *)(v32 + 28) & 8) == 0);
      }
      else
      {
        v32 = *((_QWORD *)this + 11);
        LOBYTE(v118) = v31;
        if ((v29 & 8) != 0)
          v33 = v28;
        else
          v33 = 0;
        *((_QWORD *)&v118 + 1) = v33;
        if (!v32)
        {
          v34 = 0;
          goto LABEL_64;
        }
        do
        {
          if ((*(_WORD *)(v32 + 28) & 8) != 0)
            break;
          v32 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFLL;
        }
        while (v32);
        v34 = 0;
      }
      *(_QWORD *)&v119 = v32;
      if (v105 && !v34)
      {
        v34 = v105;
        do
          v34 = (WebCore::Node *)*((_QWORD *)v34 + 7);
        while (v34 && (*((_WORD *)v34 + 14) & 8) == 0);
      }
LABEL_64:
      *((_QWORD *)&v119 + 1) = v34;
      LOBYTE(v120) = 1;
      if ((v29 & 8) != 0)
        v35 = 2;
      else
        v35 = 1;
      BYTE1(v120) = v35;
      v115 = (WTF *)v117;
      v116 = (WTF::StringImpl *)11;
      ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      ++WebCore::ScriptDisallowedScope::s_count;
      v36 = *((_WORD *)this + 14);
      if ((v36 & 8) != 0)
        v37 = this;
      else
        v37 = 0;
      v110 = v37;
      v111 = (WTF::StringImpl *)&v118;
      if ((v36 & 8) != 0)
      {
        v95 = WebCore::Element::needsStyleInvalidation(this);
        v112 = v95;
        if (v95)
        {
          v96 = (_QWORD *)*((_QWORD *)v110 + 5);
          if (*v96)
            v97 = (*(_WORD *)(*v96 + 28) & 0x80) == 0;
          else
            v97 = 1;
          if (v97)
            v98 = v96[1] + 1328;
          else
            v98 = *v96 + 216;
          v39 = *(unsigned __int8 *)(*(_QWORD *)v98 + 236) != 0;
          v38 = 1;
        }
        else
        {
          v38 = 0;
          v39 = 0;
        }
      }
      else
      {
        v38 = 0;
        v39 = 0;
        v112 = 0;
      }
      v113 = v39;
      v114 = *v100 == 0;
      if (v38 && v39)
        WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(&v110, (uint64_t)v16, v18);
      if ((*((_WORD *)this + 14) & 0x80) != 0 || (*((_BYTE *)this + 22) & 0x10) != 0)
      {
        v81 = **((_QWORD **)this + 5);
        if ((*(_WORD *)(v81 + 28) & 0x80) == 0)
          v81 = 0;
        v82 = *(_QWORD *)(v81 + 224);
        if (v82)
        {
          ++*(_DWORD *)(v82 + 12);
          *(_BYTE *)(v82 + 9) = 0;
        }
      }
      v40 = *v27;
      v41 = (WebCore::TreeScope *)*((_QWORD *)this + 5);
      v42 = (WebCore::Node *)*((_QWORD *)*v27 + 5);
      if (v42 != v41)
      {
        WebCore::Node::moveTreeToNewScope(*v27, v42, v41, v19);
        v40 = *v27;
      }
      v43 = v105;
      v44 = WebCore::ScriptDisallowedScope::s_count++;
      if (v105)
      {
        v45 = *((_QWORD *)v105 + 6);
        v46 = v45 & 0xFFFFFFFFFFFFLL;
        if ((v45 & 0xFFFFFFFFFFFFLL) != 0)
        {
          *(_DWORD *)((v45 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
          v47 = v45 & 0xFFFF000000000000 | (unint64_t)v40;
          v48 = (_QWORD *)(v46 + 56);
        }
        else
        {
          v47 = v45 & 0xFFFF000000000000 | (unint64_t)v40;
          v48 = (_QWORD *)((char *)this + 80);
        }
        *v48 = v40;
        *((_QWORD *)v43 + 6) = v47;
        *((_QWORD *)v40 + 4) = this;
        *((_DWORD *)v40 + 6) |= 1u;
        *((_QWORD *)v40 + 6) = v46 | ((unint64_t)*((unsigned __int16 *)v40 + 27) << 48);
        *((_QWORD *)v40 + 7) = v43;
        if (v46)
        {
          if (*(_DWORD *)(v46 + 24) == 2)
          {
            if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v46);
              v44 = WebCore::ScriptDisallowedScope::s_count - 1;
            }
          }
          else
          {
            *(_DWORD *)(v46 + 24) -= 2;
          }
        }
      }
      else
      {
        *((_QWORD *)v40 + 4) = this;
        *((_DWORD *)v40 + 6) |= 1u;
        v60 = *((_QWORD *)this + 11);
        if (v60)
        {
          v61 = *(_DWORD *)(v60 + 24);
          *(_DWORD *)(v60 + 24) = v61 + 2;
          *((_QWORD *)v40 + 6) = v60 | ((unint64_t)*((unsigned __int16 *)v40 + 27) << 48);
          *(_QWORD *)(v60 + 56) = v40;
          if (v61)
          {
            *(_DWORD *)(v60 + 24) = v61;
          }
          else if ((*(_WORD *)(v60 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v60);
            v44 = WebCore::ScriptDisallowedScope::s_count - 1;
          }
        }
        else
        {
          *v100 = v40;
        }
        *((_QWORD *)this + 11) = v40;
      }
      WebCore::ScriptDisallowedScope::s_count = v44;
      WebCore::ChildListMutationScope::ChildListMutationScope(&v109, this);
      v50 = v109;
      if (!v109)
        goto LABEL_86;
      if (!*((_QWORD *)v109 + 10))
      {
        v109 = 0;
LABEL_182:
        if (*(_DWORD *)v50 == 1)
        {
          WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v50, v49);
          WTF::fastFree(v93, v94);
        }
        else
        {
          --*(_DWORD *)v50;
        }
        goto LABEL_86;
      }
      WebCore::ChildListMutationAccumulator::childAdded(v109, v28);
      v50 = v109;
      v109 = 0;
      if (v50)
        goto LABEL_182;
LABEL_86:
      WebCore::notifyChildNodeInserted((uint64_t)this, (uint64_t)v28, (uint64_t)&v115);
      if (v112)
      {
        if (v113)
          WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(&v110, (uint64_t)v51, v52);
        WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)&v110);
      }
      --WebCore::ScriptDisallowedScope::s_count;
      v53 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
        && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
      {
        WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v110, v51);
        v53 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      }
      WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v53 - 1;
      (*(void (**)(WebCore::ContainerNode *, __int128 *))(*(_QWORD *)this + 376))(this, &v118);
      if (HIDWORD(v116))
      {
        v55 = v115;
        v56 = 8 * HIDWORD(v116);
        do
        {
          v57 = *(_QWORD *)v55;
          v55 = (WTF *)((char *)v55 + 8);
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 280))(v57);
          v56 -= 8;
        }
        while (v56);
      }
      WebCore::dispatchChildInsertionEvents(v28, v54);
      if (HIDWORD(v116))
      {
        v63 = v115;
        v64 = 8 * HIDWORD(v116);
        do
        {
          v65 = *(_QWORD *)v63;
          *(_QWORD *)v63 = 0;
          if (v65)
          {
            if (*(_DWORD *)(v65 + 24) == 2)
            {
              if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v65);
            }
            else
            {
              *(_DWORD *)(v65 + 24) -= 2;
            }
          }
          v63 = (WTF *)((char *)v63 + 8);
          v64 -= 8;
        }
        while (v64);
      }
      v58 = v115;
      if (v117 != (_BYTE *)v115 && v115 != 0)
      {
        v115 = 0;
        LODWORD(v116) = 0;
        WTF::fastFree(v58, v16);
      }
      if (++v27 == v99)
        goto LABEL_128;
    }
  }
  v76 = v116;
  v116 = 0;
  *(_BYTE *)a4 = (_BYTE)v115;
  *(_QWORD *)(a4 + 8) = v76;
  *(_BYTE *)(a4 + 16) = 1;
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v115, (WTF::StringImpl *)v10);
  WebCore::ChildListMutationScope::~ChildListMutationScope((WebCore::ChildListMutationAccumulator **)&v118, v77);
LABEL_134:
  v67 = v102;
  if (HIDWORD(v103))
  {
    v69 = 8 * HIDWORD(v103);
    do
    {
      v70 = *(_QWORD *)v67;
      *(_QWORD *)v67 = 0;
      if (v70)
      {
        if (*(_DWORD *)(v70 + 24) == 2)
        {
          if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v70);
        }
        else
        {
          *(_DWORD *)(v70 + 24) -= 2;
        }
      }
      v67 = (WTF *)((char *)v67 + 8);
      v69 -= 8;
    }
    while (v69);
    v67 = v102;
  }
  if (v104 != (_BYTE *)v67 && v67 != 0)
  {
    v102 = 0;
    LODWORD(v103) = 0;
    WTF::fastFree(v67, v16);
  }
  result = (uint64_t)v105;
  v105 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  if (v108)
  {
    result = (uint64_t)v107;
    v107 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_147:
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return result;
}

WebCore::ContainerNode *WebCore::ContainerNode::removeChild@<X0>(WebCore::ContainerNode *this@<X0>, WebCore::Node *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v6;
  void *v7;
  WebCore::ChildListMutationAccumulator *v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  __int16 v11;
  char v12;
  WebCore::ChildListMutationAccumulator *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  char v16;
  __int16 v17;
  WebCore::Style::Invalidator *v18;
  int v19;
  _BOOL4 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  void *v28;
  const WebCore::Style::RuleSet *v29;
  _BOOL4 v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  _BOOL4 v38;
  _QWORD *v39;
  BOOL v40;
  uint64_t v41;
  WebCore::Style::Invalidator *v42[2];
  BOOL v43;
  BOOL v44;
  BOOL v45;
  WebCore::ChildListMutationAccumulator *v46[2];
  __int128 v47;
  uint64_t v48;
  Inspector::InspectorDebuggerAgent *v49;

  v4 = (uint64_t)this;
  *((_DWORD *)this + 6) += 2;
  v6 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6 + 2;
  if (*((WebCore::ContainerNode **)a2 + 4) != this)
    goto LABEL_96;
  *((_DWORD *)a2 + 6) = v6 + 4;
  v49 = a2;
  ++WebCore::ScriptDisallowedScope::s_count;
  WebCore::ChildListMutationScope::ChildListMutationScope(v46, this);
  v8 = v46[0];
  if (v46[0])
  {
    if (*((_QWORD *)v46[0] + 10))
    {
      WebCore::ChildListMutationAccumulator::willRemoveChild(v46[0], a2);
      v8 = v46[0];
      v46[0] = 0;
      if (!v8)
        goto LABEL_3;
    }
    else
    {
      v46[0] = 0;
    }
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v8, v7);
      WTF::fastFree(v36, v37);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
LABEL_3:
  --WebCore::ScriptDisallowedScope::s_count;
  WebCore::Node::notifyMutationObserversNodeWillDetach(a2);
  this = (WebCore::ContainerNode *)WebCore::dispatchChildRemovalEvents(&v49);
  if (*((_QWORD *)a2 + 4) != v4)
    goto LABEL_97;
  v11 = *((_WORD *)a2 + 14);
  if ((v11 & 4) != 0 && (*((_WORD *)a2 + 39) & 0x3FF) != 0)
  {
    this = (WebCore::ContainerNode *)WebCore::disconnectSubframes(a2, 0);
    if (*((_QWORD *)a2 + 4) == v4)
    {
      v11 = *((_WORD *)a2 + 14);
      goto LABEL_6;
    }
LABEL_97:
    v32 = 0;
    goto LABEL_54;
  }
LABEL_6:
  *(_OWORD *)v46 = 0u;
  v47 = 0u;
  if ((v11 & 2) != 0)
    v12 = 3;
  else
    v12 = 6;
  if ((v11 & 8) != 0)
    v12 = 1;
  LOBYTE(v46[0]) = v12;
  if ((v11 & 8) != 0)
    v13 = a2;
  else
    v13 = 0;
  v48 = 0;
  v46[1] = v13;
  v14 = a2;
  do
    v14 = (WebCore::Node *)(*((_QWORD *)v14 + 6) & 0xFFFFFFFFFFFFLL);
  while (v14 && (*((_WORD *)v14 + 14) & 8) == 0);
  *(_QWORD *)&v47 = v14;
  v15 = a2;
  do
    v15 = (WebCore::Node *)*((_QWORD *)v15 + 7);
  while (v15 && (*((_WORD *)v15 + 14) & 8) == 0);
  *((_QWORD *)&v47 + 1) = v15;
  LOBYTE(v48) = 1;
  if ((v11 & 8) != 0)
    v16 = 2;
  else
    v16 = 1;
  BYTE1(v48) = v16;
  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  ++WebCore::ScriptDisallowedScope::s_count;
  v17 = *(_WORD *)(v4 + 28);
  if ((v17 & 8) != 0)
    v18 = (WebCore::Style::Invalidator *)v4;
  else
    v18 = 0;
  v42[0] = v18;
  v42[1] = (WebCore::Style::Invalidator *)v46;
  if ((v17 & 8) != 0)
  {
    v38 = WebCore::Element::needsStyleInvalidation((WebCore::Element *)v4);
    v43 = v38;
    if (v38)
    {
      v39 = (_QWORD *)*((_QWORD *)v42[0] + 5);
      if (*v39)
        v40 = (*(_WORD *)(*v39 + 28) & 0x80) == 0;
      else
        v40 = 1;
      if (v40)
        v41 = v39[1] + 1328;
      else
        v41 = *v39 + 216;
      v20 = *(unsigned __int8 *)(*(_QWORD *)v41 + 236) != 0;
      v19 = 1;
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v43 = 0;
  }
  v44 = v20;
  v45 = *(_QWORD *)(v4 + 80) == 0;
  if (v19 && v20)
    WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v42, v9, v10);
  if ((*(_WORD *)(v4 + 28) & 0x80) != 0 || (*(_BYTE *)(v4 + 22) & 0x10) != 0)
  {
    v21 = *(_QWORD **)(v4 + 40);
    v34 = *v21;
    if ((*(_WORD *)(*v21 + 28) & 0x80) == 0)
      v34 = 0;
    v35 = *(_QWORD *)(v34 + 224);
    if (v35)
    {
      ++*(_DWORD *)(v35 + 12);
      *(_BYTE *)(v35 + 9) = 0;
    }
  }
  else
  {
    v21 = *(_QWORD **)(v4 + 40);
  }
  v22 = v21[1];
  *(_DWORD *)(v22 + 24) += 2;
  WebCore::Document::nodeWillBeRemoved((WebCore::Document *)v22, a2);
  if (*(_DWORD *)(v22 + 24) == 2)
  {
    if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v22);
  }
  else
  {
    *(_DWORD *)(v22 + 24) -= 2;
  }
  v23 = *((_QWORD *)a2 + 6);
  v24 = v23 & 0xFFFFFFFFFFFFLL;
  if ((v23 & 0xFFFFFFFFFFFFLL) != 0)
    *(_DWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
  v25 = *((_QWORD *)a2 + 7);
  if (v25)
    *(_DWORD *)(v25 + 24) += 2;
  WebCore::ContainerNode::removeBetween((WebCore::ContainerNode *)v4, (WebCore::Node *)v24, (WebCore::Node *)v25, a2);
  v26 = (*(_BYTE *)(v4 + 22) & 0x18) == 0;
  if ((*((_BYTE *)a2 + 22) & 8) != 0)
    v27 = WebCore::notifyNodeRemovedFromDocument(v4, v26, (uint64_t)a2);
  else
    v27 = WebCore::notifyNodeRemovedFromTree(v4, v26, (uint64_t)a2);
  v30 = v27;
  if (v25)
  {
    if (*(_DWORD *)(v25 + 24) == 2)
    {
      if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v25);
    }
    else
    {
      *(_DWORD *)(v25 + 24) -= 2;
    }
  }
  if (v24)
  {
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v24);
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
  }
  if (v43)
  {
    if (v44)
      WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v42, (uint64_t)v28, v29);
    WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v42);
  }
  --WebCore::ScriptDisallowedScope::s_count;
  v31 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v42, v28);
    v31 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v31 - 1;
  if (v30)
  {
    v33 = *((_QWORD *)a2 + 1);
    if ((!v33 || (*(_BYTE *)(v33 + 8) & 3) != 0 || !*(_QWORD *)v33)
      && (*((_WORD *)a2 + 14) & 4) != 0
      && *((_QWORD *)a2 + 10))
    {
      WebCore::willCreatePossiblyOrphanedTreeByRemovalSlowCase(a2, (WebCore::Node *)v28);
    }
  }
  this = (WebCore::ContainerNode *)(*(uint64_t (**)(uint64_t, WebCore::ChildListMutationAccumulator **))(*(_QWORD *)v4 + 376))(v4, v46);
  v32 = 1;
LABEL_54:
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      this = (WebCore::ContainerNode *)WebCore::Node::removedLastRef(a2);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  if ((v32 & 1) != 0)
  {
    WebCore::ContainerNode::rebuildSVGExtensionsElementsIfNecessary((_QWORD *)v4);
    this = (WebCore::ContainerNode *)WebCore::Node::dispatchSubtreeModifiedEvent(v4);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_58;
  }
LABEL_96:
  *(_BYTE *)a3 = 5;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
LABEL_58:
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      this = (WebCore::ContainerNode *)WebCore::Node::removedLastRef(a2);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return (WebCore::ContainerNode *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return this;
}

_DWORD *WebCore::CSSToStyleMap::mapAnimationTimingFunction(WebCore::CSSToStyleMap *this, WebCore::Animation *a2, const WebCore::CSSValue *a3)
{
  _DWORD *result;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;

  if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F87F) == 0x50
    && (*((_WORD *)a2 + 4) & 0xFFFE) == 2)
  {
    v7 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = &off_1E3347E18;
    *(_OWORD *)(v7 + 16) = xmmword_1968C1FC0;
    *(_OWORD *)(v7 + 32) = xmmword_1968C1FD0;
    *(_BYTE *)(v7 + 48) = 0;
    result = (_DWORD *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v7;
    if (!result)
      goto LABEL_6;
    v6 = result[2] - 1;
    if (result[2] == 1)
    {
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      goto LABEL_6;
    }
LABEL_5:
    result[2] = v6;
LABEL_6:
    *((_DWORD *)this + 28) |= 0x40000u;
    return result;
  }
  result = (_DWORD *)WebCore::TimingFunction::createFromCSSValue((uint64_t)a2, a2, (uint64_t *)&v8);
  v5 = v8;
  if (!v8)
    return result;
  v8 = 0;
  result = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v5;
  if (!result)
    goto LABEL_6;
  v6 = result[2] - 1;
  if (result[2] != 1)
    goto LABEL_5;
  (*(void (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
  result = v8;
  *((_DWORD *)this + 28) |= 0x40000u;
  v8 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::CSSToStyleMap::mapAnimationProperty(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  uint64_t v5;
  _WORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  char v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _WORD *v20;
  uint64_t *v21;
  char v22[8];
  uint64_t v23;
  int v24;
  char v25[8];
  __int16 v26;
  int v27;
  uint64_t v28;

  v2 = result;
  v3 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
  if ((v3 & 0x3F87F) == 0x50 && (*(_WORD *)(a2 + 8) & 0xFFFE) == 2)
  {
    v25[0] = 0;
    v26 = 0;
    v27 = 0;
    result = WebCore::Animation::setProperty(result, (uint64_t)v25);
    if (v27 != -1)
      return ((uint64_t (*)(uint64_t *, __int16 *))off_1E3398C70[v27])(&v28, &v26);
    return result;
  }
  if ((v3 & 0x3F800) != 0)
    return result;
  if ((*(_WORD *)(a2 + 4) & 0x7F) != 0x4F)
  {
    if ((*(_WORD *)(a2 + 4) & 0x7F) != 0x50)
      goto LABEL_14;
    v7 = *(unsigned __int16 *)(a2 + 8);
    if (v7 == 49)
    {
      *(_BYTE *)(result + 8) = 0;
    }
    else
    {
      if (v7 != 6)
        goto LABEL_14;
      *(_BYTE *)(result + 8) = 1;
    }
    v19 = *(unsigned int *)(result + 24);
    if ((_DWORD)v19 != -1)
    {
      v20 = (_WORD *)(result + 16);
      if (!(_DWORD)v19)
      {
        *v20 = 0;
        goto LABEL_35;
      }
      result = ((uint64_t (*)(uint64_t *, _WORD *))off_1E3398C70[v19])(&v28, v20);
    }
    *(_WORD *)(v2 + 16) = 0;
    goto LABEL_34;
  }
  v4 = *(_WORD *)(a2 + 8);
  if (v4)
  {
    *(_BYTE *)(result + 8) = 2;
    v5 = *(unsigned int *)(result + 24);
    if ((_DWORD)v5 != -1)
    {
      v6 = (_WORD *)(result + 16);
      if (!(_DWORD)v5)
      {
        *v6 = v4;
LABEL_35:
        *(_DWORD *)(v2 + 112) |= 0x10000u;
        return result;
      }
      result = ((uint64_t (*)(uint64_t *, _WORD *))off_1E3398C70[v5])(&v28, v6);
    }
    *(_WORD *)(v2 + 16) = v4;
LABEL_34:
    *(_DWORD *)(v2 + 24) = 0;
    goto LABEL_35;
  }
LABEL_14:
  v8 = (*(unsigned __int16 *)(a2 + 4) & 0x7Fu) - 20;
  if (v8 <= 0x3C)
  {
    if (((1 << ((*(_WORD *)(a2 + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
    {
      v9 = *(_QWORD *)(a2 + 8);
      if (v9)
        goto LABEL_17;
    }
    else
    {
      if (v8 == 60)
      {
        v21 = WebCore::nameString(*(unsigned __int16 *)(a2 + 8));
      }
      else
      {
        if (v8 != 59)
          goto LABEL_55;
        v21 = WebCore::nameString(*(unsigned __int16 *)(a2 + 8));
      }
      v9 = *v21;
      if (*v21)
      {
LABEL_17:
        v10 = *(_DWORD *)v9;
        v11 = *(_DWORD *)(v9 + 4);
        *(_DWORD *)v9 += 2;
        v12 = *(_DWORD *)(v9 + 16);
        if (v11 >= 3)
        {
          v13 = *(_QWORD *)(v9 + 8);
          if ((v12 & 4) != 0)
          {
            if (*(_BYTE *)v13 == 45)
            {
              v14 = *(unsigned __int8 *)(v13 + 1);
LABEL_21:
              if (v14 == 45)
                v15 = 2;
              else
                v15 = 3;
LABEL_24:
              v22[0] = v15;
              if ((v12 & 0x10) != 0)
              {
                *(_DWORD *)v9 = v10 + 4;
                v16 = v9;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)v9, (WTF::StringImpl *)a2);
                v16 = v28;
              }
              v17 = 0;
              goto LABEL_27;
            }
          }
          else if (*(_WORD *)v13 == 45)
          {
            v14 = *(unsigned __int16 *)(v13 + 2);
            goto LABEL_21;
          }
        }
        v15 = 3;
        goto LABEL_24;
      }
    }
  }
LABEL_55:
  v9 = 0;
  v16 = 0;
  v22[0] = 3;
  v17 = 1;
LABEL_27:
  v23 = v16;
  v24 = 1;
  result = WebCore::Animation::setProperty(v2, (uint64_t)v22);
  if (v24 != -1)
    result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E3398C70[v24])(&v28, &v23);
  v24 = -1;
  if ((v17 & 1) == 0)
  {
    if (*(_DWORD *)v9 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v9, v18);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

void WebCore::CSSToStyleMap::mapAnimationDuration(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  double v7;
  double v9;
  double v10;
  double v11;
  int *v12;
  int v13;
  double v14;
  double v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  double v24;
  double v25;
  uint64_t v26;

  v4 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
  if ((v4 & 0x3F87F) == 0x50)
  {
    v11 = 0.0;
    if ((*(_WORD *)(a2 + 8) & 0xFFFE) == 2)
      goto LABEL_27;
  }
  if ((v4 & 0x3F800) != 0)
    return;
  v5 = *(_WORD *)(a2 + 4) & 0x7F;
  if ((v5 - 63) > 0x11 || ((1 << ((*(_WORD *)(a2 + 4) & 0x7F) - 63)) & 0x34001) == 0)
  {
    if (v5 == 73)
    {
      v16 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 8);
      v17 = v16[12];
      if (v17 != 1 && (v17 - 5) > 3)
        goto LABEL_11;
      v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v16 + 72))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      LOWORD(v4) = *(_WORD *)(a2 + 4);
    }
    if (v5 == 16)
    {
      if ((v4 & 0x7F) == 0x49)
      {
        v22 = *(_QWORD *)(a2 + 8);
        v26 = 0;
        v25 = WebCore::CSSCalcValue::doubleValue(v22, (uint64_t)&v26);
        if (v26)
          WTF::fastFree((WTF *)(v26 - 16), v23);
        v14 = v25;
      }
      else
      {
        v14 = *(double *)(a2 + 8);
      }
      v15 = -1.79769313e308;
      if (v14 > -1.79769313e308)
        v15 = v14;
      if (v14 >= 1.79769313e308)
        v7 = 1.79769313e308;
      else
        v7 = v15;
      goto LABEL_25;
    }
    v5 = v4 & 0x7F;
  }
LABEL_11:
  v7 = 0.0;
  if ((v5 - 63) <= 0x11 && ((1 << (v5 - 63)) & 0x34001) != 0)
    goto LABEL_25;
  if ((v4 & 0x7F) != 0x49)
  {
LABEL_17:
    if (v5 == 15)
    {
      if ((*(_WORD *)(a2 + 4) & 0x7F) == 0x49)
      {
        v20 = *(_QWORD *)(a2 + 8);
        v26 = 0;
        v24 = WebCore::CSSCalcValue::doubleValue(v20, (uint64_t)&v26);
        if (v26)
          WTF::fastFree((WTF *)(v26 - 16), v21);
        v9 = v24;
      }
      else
      {
        v9 = *(double *)(a2 + 8);
      }
      v10 = v9 / 1000.0;
      if (v9 <= -1.79769313e308)
        v10 = -1.79769313e305;
      if (v9 >= 1.79769313e308)
        v7 = 1.79769313e305;
      else
        v7 = v10;
    }
    goto LABEL_25;
  }
  v18 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 8);
  v19 = v18[12];
  if (v19 == 1 || (v19 - 5) <= 3)
  {
    v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v18 + 72))(v18);
    goto LABEL_17;
  }
LABEL_25:
  v11 = 0.0;
  if (v7 >= 0.0)
    v11 = v7;
LABEL_27:
  v13 = *(_DWORD *)(a1 + 112);
  v12 = (int *)(a1 + 112);
  *((double *)v12 - 6) = v11;
  *v12 = v13 | 0x800;
}

void WebCore::CSSToStyleMap::mapAnimationDelay(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  double v7;
  double v9;
  double v10;
  int *v11;
  int v12;
  double v13;
  double v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  double v23;
  double v24;
  uint64_t v25;

  v4 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
  if ((v4 & 0x3F87F) == 0x50)
  {
    v7 = 0.0;
    if ((*(_WORD *)(a2 + 8) & 0xFFFE) == 2)
      goto LABEL_25;
  }
  if ((v4 & 0x3F800) != 0)
    return;
  v5 = *(_WORD *)(a2 + 4) & 0x7F;
  if ((v5 - 63) > 0x11 || ((1 << ((*(_WORD *)(a2 + 4) & 0x7F) - 63)) & 0x34001) == 0)
  {
    if (v5 == 73)
    {
      v15 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 8);
      v16 = v15[12];
      if (v16 != 1 && (v16 - 5) > 3)
        goto LABEL_11;
      v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v15 + 72))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      LOWORD(v4) = *(_WORD *)(a2 + 4);
    }
    if (v5 == 16)
    {
      if ((v4 & 0x7F) == 0x49)
      {
        v21 = *(_QWORD *)(a2 + 8);
        v25 = 0;
        v24 = WebCore::CSSCalcValue::doubleValue(v21, (uint64_t)&v25);
        if (v25)
          WTF::fastFree((WTF *)(v25 - 16), v22);
        v13 = v24;
      }
      else
      {
        v13 = *(double *)(a2 + 8);
      }
      v14 = -1.79769313e308;
      if (v13 > -1.79769313e308)
        v14 = v13;
      if (v13 >= 1.79769313e308)
        v7 = 1.79769313e308;
      else
        v7 = v14;
      goto LABEL_25;
    }
    v5 = v4 & 0x7F;
  }
LABEL_11:
  v7 = 0.0;
  if ((v5 - 63) <= 0x11 && ((1 << (v5 - 63)) & 0x34001) != 0)
    goto LABEL_25;
  if ((v4 & 0x7F) != 0x49)
  {
LABEL_17:
    if (v5 == 15)
    {
      if ((*(_WORD *)(a2 + 4) & 0x7F) == 0x49)
      {
        v19 = *(_QWORD *)(a2 + 8);
        v25 = 0;
        v23 = WebCore::CSSCalcValue::doubleValue(v19, (uint64_t)&v25);
        if (v25)
          WTF::fastFree((WTF *)(v25 - 16), v20);
        v9 = v23;
      }
      else
      {
        v9 = *(double *)(a2 + 8);
      }
      v10 = v9 / 1000.0;
      if (v9 <= -1.79769313e308)
        v10 = -1.79769313e305;
      if (v9 >= 1.79769313e308)
        v7 = 1.79769313e305;
      else
        v7 = v10;
    }
    goto LABEL_25;
  }
  v17 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 8);
  v18 = v17[12];
  if (v18 == 1 || (v18 - 5) <= 3)
  {
    v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v17 + 72))(v17);
    goto LABEL_17;
  }
LABEL_25:
  v12 = *(_DWORD *)(a1 + 112);
  v11 = (int *)(a1 + 112);
  *((double *)v11 - 7) = v7;
  *v11 = v12 | 0x200;
}

_QWORD *WebCore::cacheWrapper<WebCore::HTMLAudioElement,WebCore::JSHTMLAudioElement>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::HTMLAudioElement *)::owner = (uint64_t)&off_1E328DBD0;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::HTMLAudioElement *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::HTMLAudioElement *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::DOMRectReadOnly,WebCore::JSDOMRectReadOnly>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v7;
  _QWORD *v8;

  if ((byte_1EE335168 & 1) == 0)
  {
    qword_1EE335160 = (uint64_t)&off_1E3259E38;
    byte_1EE335168 = 1;
  }
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, a2, a3, (uint64_t)&qword_1EE335160);
  if ((result & 1) == 0)
  {
    v8 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v7, a3, (uint64_t)&qword_1EE335160, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), (uint64_t *)&v8, &v7);
    if (v7)
      *(_QWORD *)(v7 + 8) = 3;
  }
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::Geolocation,WebCore::JSGeolocation>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;

  if ((byte_1EE3359B8 & 1) == 0)
  {
    qword_1EE3359B0 = (uint64_t)&off_1E328A1C0;
    byte_1EE3359B8 = 1;
  }
  if (a2)
    v6 = (_QWORD *)(a2 + 24);
  else
    v6 = 0;
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, v6, a3, (uint64_t)&qword_1EE3359B0);
  if ((result & 1) == 0)
  {
    v9 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v8, a3, (uint64_t)&qword_1EE3359B0, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), &v9, &v8);
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::`anonymous namespace'::MutationRecordWithNullOldValue::target(WebCore::_anonymous_namespace_::MutationRecordWithNullOldValue *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
}

uint64_t WebCore::`anonymous namespace'::MutationRecordWithNullOldValue::type(WebCore::_anonymous_namespace_::MutationRecordWithNullOldValue *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
}

uint64_t WebCore::`anonymous namespace'::RecordWithEmptyNodeLists::oldValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 24);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::`anonymous namespace'::AttributesRecord::AttributesRecord(uint64_t result, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  *(_DWORD *)(result + 8) = 1;
  *(_DWORD *)(a2 + 24) += 2;
  *(_QWORD *)(result + 16) = a2;
  v4 = *a4;
  if (*a4)
    *v4 += 2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)result = off_1E33A5FC8;
  v5 = *(_DWORD **)(*(_QWORD *)a3 + 24);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(result + 48) = v5;
  v6 = *(_DWORD **)(*(_QWORD *)a3 + 32);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(result + 56) = v6;
  return result;
}

_QWORD *WebCore::`anonymous namespace'::AttributesRecord::type(WebCore::_anonymous_namespace_::AttributesRecord *this)
{
  uint64_t v2;

  if ((byte_1ECE83201 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83210 = v2;
    byte_1ECE83201 = 1;
  }
  return &qword_1ECE83210;
}

uint64_t WebCore::WebAnimation::acceleratedStateDidChange(uint64_t this)
{
  WebCore::DocumentTimeline *v1;
  WebCore::WebAnimation *v2;

  v1 = *(WebCore::DocumentTimeline **)(this + 64);
  if (v1)
  {
    v2 = (WebCore::WebAnimation *)this;
    ++*((_DWORD *)v1 + 2);
    this = (*(uint64_t (**)(WebCore::DocumentTimeline *))(*(_QWORD *)v1 + 16))(v1);
    if ((this & 1) != 0)
      this = (uint64_t)WebCore::DocumentTimeline::animationAcceleratedRunningStateDidChange(v1, v2);
    if (*((_DWORD *)v1 + 2) == 1)
      return (*(uint64_t (**)(WebCore::DocumentTimeline *))(*(_QWORD *)v1 + 8))(v1);
    else
      --*((_DWORD *)v1 + 2);
  }
  return this;
}

void *WebCore::WebAnimation::finishNotificationSteps(void *this)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore *v21;
  char v22;
  char v23;
  _QWORD *v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;

  v1 = (uint64_t)this;
  v2 = *((double *)this + 13);
  if (!*((_BYTE *)this + 162))
  {
    v3 = *((double *)this + 14);
    if (v3 > 0.0)
    {
      v4 = *((_QWORD *)this + 7);
      v5 = 0.0;
      if (v4)
        v5 = *(double *)(v4 + 88);
      if (v2 + 0.000001 >= v5)
        goto LABEL_10;
    }
    if (v3 < 0.0 && v2 + -0.000001 <= 0.0)
    {
LABEL_10:
      this = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::resolve(*((WTF::StringImpl **)this + 10), (WTF::StringImpl *)this);
      v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v6 || (this = *(void **)(v6 + 96)) == 0)
        this = (void *)WebCore::threadGlobalDataSlow((WebCore *)this);
      v7 = *((_QWORD *)this + 5);
      if (!v7)
      {
        v27 = this;
        this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
        v7 = v27[5];
      }
      v8 = *(_QWORD *)(v1 + 16);
      if ((v8 & 0x1000000000000) != 0)
      {
        v16 = v8 & 0xFFFFFFFFFFFFLL;
        v17 = *(unsigned int *)(v16 + 28);
        if ((_DWORD)v17)
        {
          v18 = *(_QWORD **)(v16 + 16);
          v19 = *(_QWORD *)(v7 + 808);
          v20 = 32 * v17;
          while (*v18 != v19)
          {
            v18 += 4;
            v20 -= 32;
            if (!v20)
              goto LABEL_16;
          }
          v21 = (WebCore *)WebCore::WebAnimation::finishNotificationSteps(void)::$_0::operator()(v1);
          v23 = v22;
          v24 = (_QWORD *)(WebCore::eventNames(v21) + 808);
          v25 = WebCore::WebAnimation::currentTime(v1);
          this = WebCore::WebAnimation::enqueueAnimationPlaybackEvent(v1, v24, v25, v26, (uint64_t)v21, v23);
        }
      }
LABEL_16:
      v9 = *(_QWORD **)(v1 + 56);
      if (v9)
      {
        this = (void *)(*(uint64_t (**)(_QWORD *))(*v9 + 24))(v9);
        if ((_DWORD)this)
        {
          v10 = v9[33];
          if (v10)
          {
            v11 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v10 + 24) = v11 + 2;
            v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 528);
            if (v12)
            {
              v13 = *(_QWORD *)(v12 + 8);
              if (v13)
              {
                v14 = *(_QWORD *)(v13 + 24);
                if (v14)
                {
                  v15 = *(_QWORD *)(v14 + 8);
                  if (v15)
                  {
                    this = (void *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v15 + 48)
                                                                                            + 16)
                                                                              + 1680))(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 16), v10);
                    v11 = *(_DWORD *)(v10 + 24) - 2;
                  }
                }
              }
            }
            if (v11)
            {
              *(_DWORD *)(v10 + 24) = v11;
            }
            else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            {
              return (void *)WebCore::Node::removedLastRef((WebCore::Node *)v10);
            }
          }
        }
      }
    }
  }
  return this;
}

void WebCore::RenderInline::~RenderInline(WebCore::RenderInline *this, void *a2)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

void WebCore::RenderInline::willBeDestroyed(WebCore::RenderInline *this, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
  {
    if (*((_QWORD *)this + 19))
    {
      if (WebCore::RenderObject::isSelectionBorder(this))
        WebCore::FrameSelection::setNeedsSelectionUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)+ 40)+ 8)+ 528)+ 8)+ 296)+ 3064), 0);
      v7 = (_QWORD *)*((_QWORD *)this + 19);
      if (v7 && v7[3])
      {
        do
        {
          WebCore::LegacyInlineBox::removeFromParent(v7);
          v7 = (_QWORD *)v7[12];
        }
        while (v7);
      }
    }
    else
    {
      v5 = *((_QWORD *)this + 4);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          if (WebCore::RenderObject::isSVGRenderer(*(WebCore::RenderObject **)(v5 + 8)))
            (*(void (**)(uint64_t, WebCore::RenderInline *))(*(_QWORD *)v6 + 672))(v6, this);
        }
      }
    }
  }
  v3 = (_QWORD *)*((_QWORD *)this + 19);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)v3[12];
      (*(void (**)(_QWORD *))(*v3 + 8))(v3);
      v3 = v4;
    }
    while (v4);
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 20) = 0;
  }
  WebCore::RenderBoxModelObject::willBeDestroyed(this, a2);
}

uint64_t WebCore::JSSVGElement::prototype(WebCore::JSSVGElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSCell *v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  int v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGElement::s_info + ~((_QWORD)&WebCore::JSSVGElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGElement::s_info + ~((_QWORD)&WebCore::JSSVGElement::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGElement::s_info)
  {
    v19 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v19) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v19;
      if (v11 == &WebCore::JSSVGElement::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    v13 = (JSC::JSCell *)WebCore::JSElement::prototype(this, a2, a3);
    Structure = WebCore::JSSVGElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v13);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGElementPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGElement::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGElement::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

uint64_t WebCore::JSSVGElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::HTMLDocument::addDocumentNamedItem(WebCore::HTMLDocument *this, WTF::StringImpl **a2, const WebCore::TreeScope **a3)
{
  const WTF::AtomString *v4;

  WebCore::TreeScopeOrderedMap::add((WebCore::HTMLDocument *)((char *)this + 3512), a2, a3, (WebCore::HTMLDocument *)((char *)this + 96));
  return WebCore::addImpureProperty((WebCore *)a2, v4);
}

WTF::StringImpl *WebCore::CachedScript::setBodyDataFrom(WTF::StringImpl **this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WebCore::HTMLMetaCharsetParser *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;

  WebCore::CachedResource::setBodyDataFrom((WebCore::CachedResource *)this, (const WebCore::CachedResource *)a2);
  v5 = a2[82];
  if (v5)
    *(_DWORD *)v5 += 2;
  result = this[82];
  this[82] = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  *((_DWORD *)this + 166) = *((_DWORD *)a2 + 166);
  *((_BYTE *)this + 668) = *((_BYTE *)a2 + 668);
  *((_DWORD *)this + 168) = *((_DWORD *)a2 + 168);
  v7 = a2[85];
  if (v7)
    ++*(_DWORD *)v7;
  v8 = this[85];
  this[85] = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v9 = (WTF *)*((_QWORD *)v8 + 9);
      if (v9)
      {
        *((_QWORD *)v8 + 9) = 0;
        *((_DWORD *)v8 + 20) = 0;
        WTF::fastFree(v9, v4);
      }
      v10 = (WebCore::HTMLMetaCharsetParser *)*((_QWORD *)v8 + 6);
      *((_QWORD *)v8 + 6) = 0;
      if (v10)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v10, v4);
        WTF::fastFree(v11, v12);
      }
      v13 = *((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      return (WTF::StringImpl *)WTF::fastFree(v8, v4);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  return result;
}

void WebCore::setHTTPBody(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  CFDataRef v5;
  const void *v6;

  v2 = *a2;
  if (*a2)
  {
    if (*(_DWORD *)(v2 + 20) == 1 && !*(_BYTE *)(v2 + 32) && (v3 = *(_QWORD *)(v2 + 8)) != 0 && !*(_DWORD *)(v3 + 40))
    {
      v5 = CFDataCreate(0, *(const UInt8 **)v3, *(unsigned int *)(v3 + 12));
      CFURLRequestSetHTTPRequestBody();
      if (v5)
        CFRelease(v5);
    }
    else
    {
      WebCore::createHTTPBodyCFReadStream(v2, (uint64_t *)&v6);
      v4 = v6;
      CFURLRequestSetHTTPRequestBodyStream();
      if (v4)
        CFRelease(v4);
    }
  }
}

void WebCore::RenderTable::~RenderTable(WebCore::RenderTable *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  WTF **v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF **v21;
  WTF *v22;
  WTF **v23;
  uint64_t v24;
  WTF *v25;
  WTF **v26;
  uint64_t v27;

  *(_QWORD *)this = off_1E3432148;
  v3 = *((_DWORD *)this + 79);
  if (v3)
    WTF::VectorDestructor<true,WebCore::CollapsedBorderValue>::destruct(*((_QWORD **)this + 38), (_QWORD *)(*((_QWORD *)this + 38) + 24 * v3));
  v4 = (WTF *)*((_QWORD *)this + 38);
  if (v4)
  {
    *((_QWORD *)this + 38) = 0;
    *((_DWORD *)this + 78) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (WTF *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  v7 = (WTF *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  v8 = (WTF *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, a2);
    else
      --*(_DWORD *)v8;
  }
  v9 = *((_QWORD *)this + 33);
  if (v9)
  {
    v20 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v20)
    {
      v21 = (WTF **)*((_QWORD *)this + 33);
      do
      {
        v22 = *v21;
        if (*v21 != (WTF *)-1)
        {
          *v21 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 1)
            {
              v27 = v9;
              v26 = v21;
              WTF::fastFree(v22, a2);
              v21 = v26;
              v9 = v27;
            }
            else
            {
              --*(_DWORD *)v22;
            }
          }
        }
        v21 += 2;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  v10 = *((unsigned int *)this + 65);
  if ((_DWORD)v10)
  {
    v23 = (WTF **)*((_QWORD *)this + 31);
    v24 = 8 * v10;
    do
    {
      v25 = *v23;
      *v23 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
          WTF::fastFree(v25, a2);
        else
          --*(_DWORD *)v25;
      }
      ++v23;
      v24 -= 8;
    }
    while (v24);
  }
  v11 = (WTF *)*((_QWORD *)this + 31);
  if (v11)
  {
    *((_QWORD *)this + 31) = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = *((unsigned int *)this + 61);
  if ((_DWORD)v12)
  {
    v17 = (WTF **)*((_QWORD *)this + 29);
    v18 = 8 * v12;
    do
    {
      v19 = *v17;
      *v17 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          WTF::fastFree(v19, a2);
        else
          --*(_DWORD *)v19;
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  v13 = (WTF *)*((_QWORD *)this + 29);
  if (v13)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = (WTF *)*((_QWORD *)this + 27);
  if (v14)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = (WTF *)*((_QWORD *)this + 25);
  if (v15)
  {
    *((_QWORD *)this + 25) = 0;
    *((_DWORD *)this + 52) = 0;
    WTF::fastFree(v15, a2);
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v16 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree(v16, a2);
    else
      --*(_DWORD *)v16;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  uint64_t v2;
  void *v3;

  WebCore::RenderTable::~RenderTable(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 352) = 0;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_OWORD *)(v2 + 336) = 0u;
    *(_OWORD *)(v2 + 288) = 0u;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

uint64_t WebCore::RenderTable::convertStyleLogicalWidthToComputedWidth(WebCore::RenderTable *a1, unsigned __int8 *a2, int a3)
{
  int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  int v10;
  float v11;
  double v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  float v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  char v31;

  v6 = a2[4];
  if ((v6 - 7) > 3)
  {
    if ((*((_BYTE *)a1 + 45) & 1) == 0)
    {
      v7 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
      if (v7)
      {
        v8 = *(_WORD *)(v7 + 28);
        if ((v8 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1945A5CC0);
        }
        if ((v8 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
        {
          goto LABEL_7;
        }
      }
    }
    if ((v6 - 3) >= 2)
    {
      if (v6 != 11)
        goto LABEL_7;
    }
    else if (a2[6])
    {
      if (*(float *)a2 <= 0.0)
        goto LABEL_7;
    }
    else if (*(int *)a2 < 1)
    {
      goto LABEL_7;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 8) + 68) & 4) == 0)
    {
      v20 = *((_DWORD *)a1 + 85);
      v21 = *((_DWORD *)a1 + 86);
      v14 = __OFADD__(v20, v21);
      v22 = v20 + v21;
      v23 = (v20 >> 31) + 0x7FFFFFFF;
      if (v14)
        v24 = v23;
      else
        v24 = v22;
      if ((*((_BYTE *)a1 + 124) & 4) != 0)
      {
        v27 = 0;
      }
      else
      {
        v25 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)a1 + 976))(a1);
        v26 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)a1 + 984))(a1);
        v27 = v25 + v26;
        if (__OFADD__(v25, v26))
          v27 = (v25 >> 31) + 0x7FFFFFFF;
      }
      v14 = __OFADD__(v24, v27);
      v28 = v24 + v27;
      if (v14)
        v9 = (v24 >> 31) + 0x7FFFFFFF;
      else
        v9 = v28;
LABEL_8:
      v10 = a2[4];
      switch(v10)
      {
        case 4:
          v11 = *(float *)a2;
          if (!a2[6])
            v11 = (float)*(int *)a2;
          break;
        case 3:
          v19 = *(float *)a2;
          if (!a2[6])
            v19 = (float)*(int *)a2;
          v11 = (float)((float)((float)a3 * 0.015625) * v19) / 100.0;
          break;
        case 11:
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a2, (float)a3 * 0.015625);
          break;
        default:
          v13 = 0;
LABEL_14:
          v14 = __OFADD__(v13, v9);
          v15 = v13 + v9;
          v16 = (v13 >> 31) + 0x7FFFFFFF;
          if (v14)
            return v16;
          else
            return v15;
      }
      v12 = v11 * 64.0;
      if (v12 >= 2147483650.0)
      {
        v13 = 0x7FFFFFFF;
      }
      else if (v12 <= -2147483650.0)
      {
        v13 = 0x80000000;
      }
      else
      {
        v13 = (int)v12;
      }
      goto LABEL_14;
    }
LABEL_7:
    v9 = 0;
    goto LABEL_8;
  }
  WebCore::Length::Length((WebCore::Length *)&v30, (const WebCore::Length *)a2);
  v29 = WebCore::RenderTable::bordersPaddingAndSpacingInRowDirection(a1);
  v17 = WebCore::RenderBox::computeIntrinsicLogicalWidthUsing((uint64_t)a1, (uint64_t)&v30, a3, v29);
  if (v31 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v30);
  }
  return v17;
}

uint64_t WebCore::RenderStyle::setVisitedLinkBackgroundColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WebCore::StyleMiscNonInheritedData *v15;
  _DWORD *v16;
  WebCore::StyleVisitedLinkColorData *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;
  int v24;
  WebCore::Length *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29[4];
  uint64_t *v30;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 32) + 56);
  v5 = *(unsigned int *)(v4 + 16);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    if ((_DWORD)v5 == -1)
      v10 = v6 == -1;
    else
      v10 = v8;
    if (!v10)
    {
LABEL_18:
      v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
      v12 = *((_QWORD *)v11 + 4);
      if (*(_DWORD *)v12 != 1)
      {
        v13 = v11;
        WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v11 + 4), v29);
        v12 = v29[0];
        v15 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v13 + 4);
        *((_QWORD *)v13 + 4) = v29[0];
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
          {
            WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v15, v14);
            WTF::fastFree(v22, v23);
            v12 = *((_QWORD *)v13 + 4);
          }
          else
          {
            --*(_DWORD *)v15;
          }
        }
      }
      v16 = *(_DWORD **)(v12 + 56);
      if (*v16 != 1)
      {
        WebCore::StyleVisitedLinkColorData::copy(*(WebCore::StyleVisitedLinkColorData **)(v12 + 56), v29);
        v16 = (_DWORD *)v29[0];
        v17 = *(WebCore::StyleVisitedLinkColorData **)(v12 + 56);
        *(_QWORD *)(v12 + 56) = v29[0];
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
          {
            WebCore::StyleVisitedLinkColorData::~StyleVisitedLinkColorData(v17);
            WTF::fastFree(v20, v21);
            v16 = *(_DWORD **)(v12 + 56);
          }
          else
          {
            --*(_DWORD *)v17;
          }
        }
      }
      v29[0] = (uint64_t)&v28;
      v29[1] = (uint64_t)&v28;
      v29[2] = (uint64_t)&v28;
      v29[3] = (uint64_t)&v28;
      v18 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v18 == -1)
      {
        v24 = std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::RenderStyle::setBorderBottomRightRadius(v24, v25);
      }
      v30 = v29;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, uint64_t **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v18])(&v26, &v30, a2);
      v19 = v16[4];
      if ((_DWORD)v19 == -1)
      {
        if (v27 == -1)
          return this;
      }
      else if (v27 == -1)
      {
        this = ((uint64_t (*)(uint64_t *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(v29, v16 + 2);
        v16[4] = -1;
LABEL_30:
        if (v27 != -1)
          return ((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v27])(v29, &v26);
        return this;
      }
      v29[0] = (uint64_t)(v16 + 2);
      this = ((uint64_t (*)(uint64_t *, _DWORD *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                      + v27))(v29, v16 + 2, &v26);
      goto LABEL_30;
    }
  }
  else
  {
    v29[0] = (uint64_t)&v26;
    this = ((uint64_t (*)(uint64_t *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v29, v4 + 8, a2);
    if ((this & 1) == 0)
      goto LABEL_18;
  }
  return this;
}

_DWORD *WebCore::RenderStyle::setBorderBottomRightRadius(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  WTF *v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  char isCalculatedEqual;
  char v21;
  _DWORD *v22;
  _DWORD *v23;
  unsigned __int8 *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[260];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[261] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_19;
  if (v6 != 13)
  {
    if (v6 == 11)
    {
      v24 = v5;
      v25 = result;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 256), a2);
      v5 = v24;
      result = v25;
      if ((isCalculatedEqual & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      v7 = *((float *)v5 + 64);
      if (!v5[262])
        v7 = (float)SLODWORD(v7);
      v8 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v8 = (float)*(int *)a2;
      if (v7 != v8)
      {
LABEL_19:
        v12 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
        result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v12 + 3);
        v13 = result + 64;
        if (result + 64 == (_DWORD *)a2)
          return result;
        if (*((_BYTE *)result + 260) == 11)
        {
          v27 = result;
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          v22 = result + 64;
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v13);
          v13 = v22;
          result = v27;
        }
        v14 = *((unsigned __int8 *)a2 + 4);
        *((_BYTE *)result + 260) = v14;
        *((_BYTE *)result + 261) = *((_BYTE *)a2 + 5);
        if (v14 - 2 < 9)
        {
          v15 = *((unsigned __int8 *)a2 + 6);
          *((_BYTE *)result + 262) = v15;
          if (v15)
          {
            *v13 = *(_DWORD *)a2;
            goto LABEL_24;
          }
          v18 = *(_DWORD *)a2;
          goto LABEL_31;
        }
        if (v14 <= 0xD)
        {
          if (((1 << v14) & 0x3003) != 0)
          {
            *v13 = 0;
          }
          else if (v14 == 11)
          {
            v18 = *(_DWORD *)a2;
            *(_DWORD *)a2 = 0;
LABEL_31:
            *v13 = v18;
          }
        }
LABEL_24:
        *((_BYTE *)a2 + 4) = 0;
        if (*((_BYTE *)result + 268) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          v23 = result;
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)result[66]);
          result = v23;
        }
        v16 = *((unsigned __int8 *)a2 + 12);
        *((_BYTE *)result + 268) = v16;
        *((_BYTE *)result + 269) = *((_BYTE *)a2 + 13);
        if (v16 - 2 >= 9)
        {
          if (v16 > 0xD)
            goto LABEL_28;
          if (((1 << v16) & 0x3003) != 0)
          {
            result[66] = 0;
            goto LABEL_28;
          }
          if (v16 != 11)
            goto LABEL_28;
          v19 = *((_DWORD *)a2 + 2);
          *((_DWORD *)a2 + 2) = 0;
        }
        else
        {
          v17 = *((unsigned __int8 *)a2 + 14);
          *((_BYTE *)result + 270) = v17;
          if (v17)
          {
            result[66] = *((_DWORD *)a2 + 2);
LABEL_28:
            *((_BYTE *)a2 + 12) = 0;
            return result;
          }
          v19 = *((_DWORD *)a2 + 2);
        }
        result[66] = v19;
        goto LABEL_28;
      }
    }
  }
  v9 = v5[268];
  if (v9 != *((unsigned __int8 *)a2 + 12) || (v5[269] != 0) != (*((_BYTE *)a2 + 13) != 0))
    goto LABEL_19;
  if (v9 == 13)
    return result;
  if (v9 == 11)
  {
    v26 = result;
    v21 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 264), (WebCore::Length *)((char *)a2 + 8));
    result = v26;
    if ((v21 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v10 = *((float *)v5 + 66);
    if (!v5[270])
      v10 = (float)SLODWORD(v10);
    v11 = *((float *)a2 + 2);
    if (!*((_BYTE *)a2 + 14))
      v11 = (float)SLODWORD(v11);
    if (v10 != v11)
      goto LABEL_19;
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setBorderBottomLeftRadius(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  WTF *v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  char isCalculatedEqual;
  char v21;
  _DWORD *v22;
  _DWORD *v23;
  unsigned __int8 *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[244];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[245] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_19;
  if (v6 != 13)
  {
    if (v6 == 11)
    {
      v24 = v5;
      v25 = result;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 240), a2);
      v5 = v24;
      result = v25;
      if ((isCalculatedEqual & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      v7 = *((float *)v5 + 60);
      if (!v5[246])
        v7 = (float)SLODWORD(v7);
      v8 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v8 = (float)*(int *)a2;
      if (v7 != v8)
      {
LABEL_19:
        v12 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
        result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v12 + 3);
        v13 = result + 60;
        if (result + 60 == (_DWORD *)a2)
          return result;
        if (*((_BYTE *)result + 244) == 11)
        {
          v27 = result;
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          v22 = result + 60;
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v13);
          v13 = v22;
          result = v27;
        }
        v14 = *((unsigned __int8 *)a2 + 4);
        *((_BYTE *)result + 244) = v14;
        *((_BYTE *)result + 245) = *((_BYTE *)a2 + 5);
        if (v14 - 2 < 9)
        {
          v15 = *((unsigned __int8 *)a2 + 6);
          *((_BYTE *)result + 246) = v15;
          if (v15)
          {
            *v13 = *(_DWORD *)a2;
            goto LABEL_24;
          }
          v18 = *(_DWORD *)a2;
          goto LABEL_31;
        }
        if (v14 <= 0xD)
        {
          if (((1 << v14) & 0x3003) != 0)
          {
            *v13 = 0;
          }
          else if (v14 == 11)
          {
            v18 = *(_DWORD *)a2;
            *(_DWORD *)a2 = 0;
LABEL_31:
            *v13 = v18;
          }
        }
LABEL_24:
        *((_BYTE *)a2 + 4) = 0;
        if (*((_BYTE *)result + 252) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          v23 = result;
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)result[62]);
          result = v23;
        }
        v16 = *((unsigned __int8 *)a2 + 12);
        *((_BYTE *)result + 252) = v16;
        *((_BYTE *)result + 253) = *((_BYTE *)a2 + 13);
        if (v16 - 2 >= 9)
        {
          if (v16 > 0xD)
            goto LABEL_28;
          if (((1 << v16) & 0x3003) != 0)
          {
            result[62] = 0;
            goto LABEL_28;
          }
          if (v16 != 11)
            goto LABEL_28;
          v19 = *((_DWORD *)a2 + 2);
          *((_DWORD *)a2 + 2) = 0;
        }
        else
        {
          v17 = *((unsigned __int8 *)a2 + 14);
          *((_BYTE *)result + 254) = v17;
          if (v17)
          {
            result[62] = *((_DWORD *)a2 + 2);
LABEL_28:
            *((_BYTE *)a2 + 12) = 0;
            return result;
          }
          v19 = *((_DWORD *)a2 + 2);
        }
        result[62] = v19;
        goto LABEL_28;
      }
    }
  }
  v9 = v5[252];
  if (v9 != *((unsigned __int8 *)a2 + 12) || (v5[253] != 0) != (*((_BYTE *)a2 + 13) != 0))
    goto LABEL_19;
  if (v9 == 13)
    return result;
  if (v9 == 11)
  {
    v26 = result;
    v21 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 248), (WebCore::Length *)((char *)a2 + 8));
    result = v26;
    if ((v21 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v10 = *((float *)v5 + 62);
    if (!v5[254])
      v10 = (float)SLODWORD(v10);
    v11 = *((float *)a2 + 2);
    if (!*((_BYTE *)a2 + 14))
      v11 = (float)SLODWORD(v11);
    if (v10 != v11)
      goto LABEL_19;
  }
  return result;
}

void WebCore::RenderStyle::setFontVariationSettings(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WebCore::FontCascadeFonts *v5;
  int v6;
  WebCore *v7;
  void *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  WebCore *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore *v19;
  unsigned int *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WebCore *v27;
  _BYTE v28[16];
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  __int16 v33;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(WebCore::FontCascadeFonts **)(v4 + 248);
  if (v5)
  {
    v6 = (*(_DWORD *)v5)++;
    v7 = (WebCore *)*((_QWORD *)v5 + 14);
    if (v6)
    {
      *(_DWORD *)v5 = v6;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v5, a2);
      WTF::fastFree(v21, v22);
      v4 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v7 = 0;
  }
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v28, (const WebCore::FontDescription *)(v4 + 48));
  v9 = *(WTF **)(v4 + 216);
  ++*(_DWORD *)v9;
  v31 = v9;
  v32 = *(_DWORD *)(v4 + 224);
  v33 = *(_WORD *)(v4 + 228);
  v10 = v29;
  if (v29)
  {
    v29 = 0;
    LODWORD(v30) = 0;
    WTF::fastFree(v10, v8);
  }
  v29 = (WTF *)*a2;
  v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v30 = v11;
  v12 = (WebCore *)WebCore::RenderStyle::setFontDescription(a1, (uint64_t)v28);
  v13 = *(_QWORD *)(a1 + 32);
  if (v7)
    ++*((_DWORD *)v7 + 2);
  v14 = v13 + 32;
  v27 = v7;
  v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
    v16 = WebCore::threadGlobalDataSlow(v12);
  v17 = *(_QWORD *)(v16 + 80);
  if (!v17)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v16);
    v17 = *(_QWORD *)(v16 + 80);
  }
  WebCore::FontCache::updateFontCascade(v17, v14, &v27);
  v19 = v27;
  v27 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v19 + 8))(v19);
    else
      --*((_DWORD *)v19 + 2);
  }
  v20 = (unsigned int *)v31;
  v31 = 0;
  if (v20)
  {
    if (*v20 == 1)
    {
      v23 = v20[1];
      if ((_DWORD)v23)
      {
        v24 = (WTF::StringImpl **)(v20 + 2);
        v25 = 8 * v23;
        do
        {
          v26 = *v24;
          *v24 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v18);
            else
              *(_DWORD *)v26 -= 2;
          }
          ++v24;
          v25 -= 8;
        }
        while (v25);
      }
      WTF::fastFree((WTF *)v20, v18);
    }
    else
    {
      --*v20;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v28, v18);
}

_DWORD *WebCore::RenderStyle::setBorderTopRightRadius(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  WTF *v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  char isCalculatedEqual;
  char v21;
  _DWORD *v22;
  _DWORD *v23;
  unsigned __int8 *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[228];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[229] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_19;
  if (v6 != 13)
  {
    if (v6 == 11)
    {
      v24 = v5;
      v25 = result;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 224), a2);
      v5 = v24;
      result = v25;
      if ((isCalculatedEqual & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      v7 = *((float *)v5 + 56);
      if (!v5[230])
        v7 = (float)SLODWORD(v7);
      v8 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v8 = (float)*(int *)a2;
      if (v7 != v8)
      {
LABEL_19:
        v12 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
        result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v12 + 3);
        v13 = result + 56;
        if (result + 56 == (_DWORD *)a2)
          return result;
        if (*((_BYTE *)result + 228) == 11)
        {
          v27 = result;
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          v22 = result + 56;
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v13);
          v13 = v22;
          result = v27;
        }
        v14 = *((unsigned __int8 *)a2 + 4);
        *((_BYTE *)result + 228) = v14;
        *((_BYTE *)result + 229) = *((_BYTE *)a2 + 5);
        if (v14 - 2 < 9)
        {
          v15 = *((unsigned __int8 *)a2 + 6);
          *((_BYTE *)result + 230) = v15;
          if (v15)
          {
            *v13 = *(_DWORD *)a2;
            goto LABEL_24;
          }
          v18 = *(_DWORD *)a2;
          goto LABEL_31;
        }
        if (v14 <= 0xD)
        {
          if (((1 << v14) & 0x3003) != 0)
          {
            *v13 = 0;
          }
          else if (v14 == 11)
          {
            v18 = *(_DWORD *)a2;
            *(_DWORD *)a2 = 0;
LABEL_31:
            *v13 = v18;
          }
        }
LABEL_24:
        *((_BYTE *)a2 + 4) = 0;
        if (*((_BYTE *)result + 236) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          v23 = result;
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)result[58]);
          result = v23;
        }
        v16 = *((unsigned __int8 *)a2 + 12);
        *((_BYTE *)result + 236) = v16;
        *((_BYTE *)result + 237) = *((_BYTE *)a2 + 13);
        if (v16 - 2 >= 9)
        {
          if (v16 > 0xD)
            goto LABEL_28;
          if (((1 << v16) & 0x3003) != 0)
          {
            result[58] = 0;
            goto LABEL_28;
          }
          if (v16 != 11)
            goto LABEL_28;
          v19 = *((_DWORD *)a2 + 2);
          *((_DWORD *)a2 + 2) = 0;
        }
        else
        {
          v17 = *((unsigned __int8 *)a2 + 14);
          *((_BYTE *)result + 238) = v17;
          if (v17)
          {
            result[58] = *((_DWORD *)a2 + 2);
LABEL_28:
            *((_BYTE *)a2 + 12) = 0;
            return result;
          }
          v19 = *((_DWORD *)a2 + 2);
        }
        result[58] = v19;
        goto LABEL_28;
      }
    }
  }
  v9 = v5[236];
  if (v9 != *((unsigned __int8 *)a2 + 12) || (v5[237] != 0) != (*((_BYTE *)a2 + 13) != 0))
    goto LABEL_19;
  if (v9 == 13)
    return result;
  if (v9 == 11)
  {
    v26 = result;
    v21 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 232), (WebCore::Length *)((char *)a2 + 8));
    result = v26;
    if ((v21 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v10 = *((float *)v5 + 58);
    if (!v5[238])
      v10 = (float)SLODWORD(v10);
    v11 = *((float *)a2 + 2);
    if (!*((_BYTE *)a2 + 14))
      v11 = (float)SLODWORD(v11);
    if (v10 != v11)
      goto LABEL_19;
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setBorderTopLeftRadius(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  WTF *v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  char isCalculatedEqual;
  char v21;
  _DWORD *v22;
  _DWORD *v23;
  unsigned __int8 *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[212];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[213] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_19;
  if (v6 != 13)
  {
    if (v6 == 11)
    {
      v24 = v5;
      v25 = result;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 208), a2);
      v5 = v24;
      result = v25;
      if ((isCalculatedEqual & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      v7 = *((float *)v5 + 52);
      if (!v5[214])
        v7 = (float)SLODWORD(v7);
      v8 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v8 = (float)*(int *)a2;
      if (v7 != v8)
      {
LABEL_19:
        v12 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
        result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v12 + 3);
        v13 = result + 52;
        if (result + 52 == (_DWORD *)a2)
          return result;
        if (*((_BYTE *)result + 212) == 11)
        {
          v27 = result;
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          v22 = result + 52;
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v13);
          v13 = v22;
          result = v27;
        }
        v14 = *((unsigned __int8 *)a2 + 4);
        *((_BYTE *)result + 212) = v14;
        *((_BYTE *)result + 213) = *((_BYTE *)a2 + 5);
        if (v14 - 2 < 9)
        {
          v15 = *((unsigned __int8 *)a2 + 6);
          *((_BYTE *)result + 214) = v15;
          if (v15)
          {
            *v13 = *(_DWORD *)a2;
            goto LABEL_24;
          }
          v18 = *(_DWORD *)a2;
          goto LABEL_31;
        }
        if (v14 <= 0xD)
        {
          if (((1 << v14) & 0x3003) != 0)
          {
            *v13 = 0;
          }
          else if (v14 == 11)
          {
            v18 = *(_DWORD *)a2;
            *(_DWORD *)a2 = 0;
LABEL_31:
            *v13 = v18;
          }
        }
LABEL_24:
        *((_BYTE *)a2 + 4) = 0;
        if (*((_BYTE *)result + 220) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          v23 = result;
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)result[54]);
          result = v23;
        }
        v16 = *((unsigned __int8 *)a2 + 12);
        *((_BYTE *)result + 220) = v16;
        *((_BYTE *)result + 221) = *((_BYTE *)a2 + 13);
        if (v16 - 2 >= 9)
        {
          if (v16 > 0xD)
            goto LABEL_28;
          if (((1 << v16) & 0x3003) != 0)
          {
            result[54] = 0;
            goto LABEL_28;
          }
          if (v16 != 11)
            goto LABEL_28;
          v19 = *((_DWORD *)a2 + 2);
          *((_DWORD *)a2 + 2) = 0;
        }
        else
        {
          v17 = *((unsigned __int8 *)a2 + 14);
          *((_BYTE *)result + 222) = v17;
          if (v17)
          {
            result[54] = *((_DWORD *)a2 + 2);
LABEL_28:
            *((_BYTE *)a2 + 12) = 0;
            return result;
          }
          v19 = *((_DWORD *)a2 + 2);
        }
        result[54] = v19;
        goto LABEL_28;
      }
    }
  }
  v9 = v5[220];
  if (v9 != *((unsigned __int8 *)a2 + 12) || (v5[221] != 0) != (*((_BYTE *)a2 + 13) != 0))
    goto LABEL_19;
  if (v9 == 13)
    return result;
  if (v9 == 11)
  {
    v26 = result;
    v21 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 216), (WebCore::Length *)((char *)a2 + 8));
    result = v26;
    if ((v21 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v10 = *((float *)v5 + 54);
    if (!v5[222])
      v10 = (float)SLODWORD(v10);
    v11 = *((float *)a2 + 2);
    if (!*((_BYTE *)a2 + 14))
      v11 = (float)SLODWORD(v11);
    if (v10 != v11)
      goto LABEL_19;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBackgroundColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::FillLayer *v26;
  WTF *v27;
  void *v28;
  int v29;
  WebCore::Length *v30;
  char **v31;
  unsigned int v32;
  char v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char **v38;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(this + 8) + 16);
  v5 = *(unsigned int *)(v4 + 24);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    if ((_DWORD)v5 == -1)
      v10 = v6 == -1;
    else
      v10 = v8;
    if (!v10)
    {
LABEL_18:
      v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
      v12 = *((_QWORD *)v11 + 2);
      if (*(_DWORD *)v12 == 1)
      {
        v17 = *((_QWORD *)v11 + 2);
      }
      else
      {
        v13 = v11;
        v14 = WTF::fastMalloc((WTF *)0x40);
        *(_DWORD *)v14 = 1;
        v15 = *(_DWORD **)(v12 + 8);
        ++*v15;
        *(_QWORD *)(v14 + 8) = v15;
        v34 = (char *)&v38;
        v35 = (char *)&v38;
        v36 = (char *)&v38;
        v37 = (char *)&v38;
        v16 = *(unsigned int *)(v12 + 24);
        if ((_DWORD)v16 == -1)
          goto LABEL_44;
        v17 = v14;
        v31 = &v34;
        ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v16])(&v31, v12 + 16);
        v34 = (char *)&v38;
        v35 = (char *)&v38;
        v36 = (char *)&v38;
        v37 = (char *)&v38;
        v18 = *(unsigned int *)(v12 + 40);
        if ((_DWORD)v18 == -1)
          goto LABEL_44;
        v31 = &v34;
        ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v18])(&v31, v12 + 32);
        v20 = *(_DWORD *)(v12 + 48);
        *(_BYTE *)(v17 + 52) = *(_BYTE *)(v12 + 52);
        *(_DWORD *)(v17 + 48) = v20;
        *(_DWORD *)(v17 + 56) = *(_DWORD *)(v12 + 56);
        v21 = *((_QWORD *)v13 + 2);
        *((_QWORD *)v13 + 2) = v17;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
          {
            v24 = *(unsigned int *)(v21 + 40);
            if ((_DWORD)v24 != -1)
              ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v24])(&v34, v21 + 32);
            *(_DWORD *)(v21 + 40) = -1;
            v25 = *(unsigned int *)(v21 + 24);
            if ((_DWORD)v25 != -1)
              ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v25])(&v34, v21 + 16);
            *(_DWORD *)(v21 + 24) = -1;
            v26 = *(WebCore::FillLayer **)(v21 + 8);
            *(_QWORD *)(v21 + 8) = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 1)
              {
                WebCore::FillLayer::~FillLayer(v26);
                WTF::fastFree(v27, v28);
              }
              else
              {
                --*(_DWORD *)v26;
              }
            }
            WTF::fastFree((WTF *)v21, v19);
            v17 = *((_QWORD *)v13 + 2);
          }
          else
          {
            --*(_DWORD *)v21;
          }
        }
      }
      v34 = &v33;
      v35 = &v33;
      v36 = &v33;
      v37 = &v33;
      v22 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v22 != -1)
      {
        v38 = &v34;
        this = (uint64_t)((uint64_t (*)(char ***__return_ptr, char ***, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v22])(&v31, &v38, a2);
        v23 = *(unsigned int *)(v17 + 24);
        if ((_DWORD)v23 == -1)
        {
          if (v32 == -1)
            return this;
        }
        else if (v32 == -1)
        {
          this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v23])(&v34, v17 + 16);
          *(_DWORD *)(v17 + 24) = -1;
LABEL_28:
          if (v32 != -1)
            return ((uint64_t (*)(char **, char ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v32])(&v34, &v31);
          return this;
        }
        v34 = (char *)(v17 + 16);
        this = ((uint64_t (*)(char **, uint64_t, char ***))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v32))(&v34, v17 + 16, &v31);
        goto LABEL_28;
      }
LABEL_44:
      v29 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderStyle::setLetterSpacing(v29, v30);
    }
  }
  else
  {
    v34 = (char *)&v31;
    this = ((uint64_t (*)(char **, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(&v34, v4 + 16, a2);
    if ((this & 1) == 0)
      goto LABEL_18;
  }
  return this;
}

void WebCore::RenderStyle::setLetterSpacing(uint64_t a1, WebCore::Length *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  WebCore::Length *v7;
  float v8;
  float v9;
  int v10;
  int v11;
  void *v12;
  _BYTE *v13;
  int *v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  WebCore::Length *v19;
  int v20;
  float v21;
  WebCore::FontCascadeFonts *v22;
  int v23;
  WebCore *v24;
  WTF *v25;
  uint64_t v26;
  WebCore::Length *v27;
  int v28;
  float v29;
  WebCore *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WebCore *v37;
  unsigned int *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int *v45;
  float v46;
  float v47;
  _BYTE *v48;
  WebCore *v49;
  _BYTE v50[164];
  unsigned __int16 v51;
  unsigned __int8 v52;
  WTF *v53;
  int v54;
  __int16 v55;

  v5 = (uint64_t *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(v4 + 236);
  if (v6 != *((unsigned __int8 *)a2 + 4) || (*(_BYTE *)(v4 + 237) != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_14;
  if (v6 == 13)
    return;
  v7 = (WebCore::Length *)(v4 + 232);
  if (v6 == 11)
  {
    if ((WebCore::Length::isCalculatedEqual(v7, a2) & 1) != 0)
      return;
    v4 = *v5;
LABEL_14:
    v10 = *(unsigned __int8 *)(v4 + 214);
    v11 = *(unsigned __int16 *)(v4 + 212);
    v13 = WTF::DataRef<WebCore::StyleInheritedData>::access(v5);
    v14 = (int *)(v13 + 232);
    if (v13 + 232 != (_BYTE *)a2)
    {
      if (v13[236] == 11)
      {
        v48 = v13;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v45 = (int *)(v13 + 232);
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v14);
        v14 = v45;
        v13 = v48;
      }
      v15 = *((unsigned __int8 *)a2 + 4);
      v13[236] = v15;
      v13[237] = *((_BYTE *)a2 + 5);
      if (v15 <= 0xD)
      {
        v16 = 1 << v15;
        if ((v16 & 0x7FC) != 0)
        {
          v13[238] = *((_BYTE *)a2 + 6);
          *v14 = *(_DWORD *)a2;
        }
        else if ((v16 & 0x3003) != 0)
        {
          *v14 = 0;
        }
        else
        {
          *v14 = *(_DWORD *)a2;
          WebCore::Length::ref(v14);
        }
      }
    }
    v17 = v11 | (v10 << 16);
    v18 = *v5;
    v19 = (WebCore::Length *)(*v5 + 232);
    v20 = *(unsigned __int8 *)(*v5 + 236);
    switch(v20)
    {
      case 4:
        if (*(_BYTE *)(v18 + 238))
          v21 = *(float *)v19;
        else
          v21 = (float)*(int *)v19;
        break;
      case 3:
        if (*(_BYTE *)(v18 + 238))
          v46 = *(float *)v19;
        else
          v46 = (float)*(int *)v19;
        v21 = (float)(v46 / 100.0) * *(float *)(v18 + 204);
        break;
      case 11:
        WebCore::Length::nonNanCalculatedValue(v19, *(float *)(v18 + 204));
        break;
      default:
        if ((v17 & 0x20000) == 0)
          return;
        goto LABEL_26;
    }
    if ((((v21 == 0.0) ^ ((v17 & 0x20000u) >> 17)) & 1) != 0)
      return;
    v18 = *v5;
LABEL_26:
    v22 = *(WebCore::FontCascadeFonts **)(v18 + 248);
    if (v22)
    {
      v23 = (*(_DWORD *)v22)++;
      v24 = (WebCore *)*((_QWORD *)v22 + 14);
      if (v23)
      {
        *(_DWORD *)v22 = v23;
      }
      else
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v22, v12);
        WTF::fastFree(v39, v40);
        v18 = *v5;
      }
    }
    else
    {
      v24 = 0;
    }
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v50, (const WebCore::FontDescription *)(v18 + 48));
    v25 = *(WTF **)(v18 + 216);
    ++*(_DWORD *)v25;
    v53 = v25;
    v54 = *(_DWORD *)(v18 + 224);
    v55 = *(_WORD *)(v18 + 228);
    v26 = *v5;
    v27 = (WebCore::Length *)(*v5 + 232);
    v28 = *(unsigned __int8 *)(*v5 + 236);
    if (v28 == 4)
    {
      if (*(_BYTE *)(v26 + 238))
        v29 = *(float *)v27;
      else
        v29 = (float)*(int *)v27;
    }
    else if (v28 == 3)
    {
      if (*(_BYTE *)(v26 + 238))
        v47 = *(float *)v27;
      else
        v47 = (float)*(int *)v27;
      v29 = (float)(v47 / 100.0) * *(float *)(v26 + 204);
    }
    else
    {
      v29 = 0.0;
      if (v28 == 11)
        WebCore::Length::nonNanCalculatedValue(v27, *(float *)(v26 + 204));
    }
    v52 = ((v51 | (v52 << 16)) & 0xFFFDFFFF | ((v29 != 0.0) << 17)) >> 16;
    v30 = (WebCore *)WebCore::RenderStyle::setFontDescription(a1, (uint64_t)v50);
    v31 = *(_QWORD *)(a1 + 32);
    if (v24)
      ++*((_DWORD *)v24 + 2);
    v32 = v31 + 32;
    v49 = v24;
    v33 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v33 || (v34 = *(_QWORD *)(v33 + 96)) == 0)
      v34 = WebCore::threadGlobalDataSlow(v30);
    v35 = *(_QWORD *)(v34 + 80);
    if (!v35)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v34);
      v35 = *(_QWORD *)(v34 + 80);
    }
    WebCore::FontCache::updateFontCascade(v35, v32, &v49);
    v37 = v49;
    v49 = 0;
    if (v37)
    {
      if (*((_DWORD *)v37 + 2) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v37 + 8))(v37);
      else
        --*((_DWORD *)v37 + 2);
    }
    v38 = (unsigned int *)v53;
    v53 = 0;
    if (v38)
    {
      if (*v38 == 1)
      {
        v41 = v38[1];
        if ((_DWORD)v41)
        {
          v42 = (WTF::StringImpl **)(v38 + 2);
          v43 = 8 * v41;
          do
          {
            v44 = *v42;
            *v42 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, v36);
              else
                *(_DWORD *)v44 -= 2;
            }
            ++v42;
            v43 -= 8;
          }
          while (v43);
        }
        WTF::fastFree((WTF *)v38, v36);
      }
      else
      {
        --*v38;
      }
    }
    WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v50, v36);
    return;
  }
  if (*(_BYTE *)(v4 + 238))
    v8 = *(float *)v7;
  else
    v8 = (float)*(int *)v7;
  v9 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v9 = (float)*(int *)a2;
  if (v8 != v9)
    goto LABEL_14;
}

_DWORD *WebCore::RenderStyle::setMinHeight(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 8);
  v6 = v5[40];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[41] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 36), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 9);
    if (!v5[42])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v9 + 1);
      v10 = result + 9;
      if (result + 9 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 40) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 9;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 40) = v11;
      *((_BYTE *)result + 41) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 42) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

WebCore::RenderObject *WebCore::RenderLayer::updatePagination(WebCore::RenderLayer *this, void *a2)
{
  WebCore::RenderObject *result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  WebCore::RenderObject **v8;
  WebCore::RenderObject *v9;
  uint64_t v10;
  _QWORD *v11;
  WTF *v12;
  int v13;
  WTF **v14;

  result = (WebCore::RenderObject *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WebCore::RenderObject *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  v4 = *((_QWORD *)this + 5);
  if (!v4)
    return result;
  result = (WebCore::RenderObject *)*((_QWORD *)this + 4);
  if ((*((_BYTE *)result + 52) & 7) == 1 && (*((_BYTE *)result + 53) & 2) != 0)
  {
    result = *(WebCore::RenderObject **)this;
    if (*(_QWORD *)this)
      goto LABEL_17;
    result = (WebCore::RenderObject *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *((_QWORD *)result + 1) = this;
    v12 = *(WTF **)this;
    *(_QWORD *)this = result;
    if (!v12)
      goto LABEL_17;
    v13 = *(_DWORD *)v12 - 1;
    if (*(_DWORD *)v12 == 1)
    {
      WTF::fastFree(v12, a2);
      result = *(WebCore::RenderObject **)this;
      if (!*(_QWORD *)this)
        goto LABEL_18;
      goto LABEL_17;
    }
    goto LABEL_32;
  }
  if ((*((_BYTE *)this + 24) & 4) != 0)
  {
LABEL_12:
    v5 = *(_QWORD *)(v4 + 32);
    v6 = *(_DWORD *)(v5 + 20);
    if ((v6 & 0x20000) != 0)
    {
      if ((*(_BYTE *)(v5 + 45) & 2) != 0)
        v5 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8);
      v10 = *(_QWORD *)(v5 + 88);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 40) + 20)
        || (v11 = *(_QWORD **)(v10 + 40), v11[41])
        || v11[38]
        || v11[39]
        || v11[40]
        || (v6 & 0x100000) != 0)
      {
        result = (WebCore::RenderObject *)*((_QWORD *)this + 27);
        *((_QWORD *)this + 27) = 0;
        if (!result)
          return result;
        if (*(_DWORD *)result != 1)
        {
          --*(_DWORD *)result;
          return result;
        }
        return (WebCore::RenderObject *)WTF::fastFree(result, a2);
      }
    }
    v7 = *(_QWORD *)(v4 + 216);
    if (!v7 || (v8 = *(WebCore::RenderObject ***)(v7 + 8)) == 0)
    {
      result = 0;
LABEL_18:
      v9 = (WebCore::RenderObject *)*((_QWORD *)this + 27);
      *((_QWORD *)this + 27) = result;
      if (!v9)
        return result;
      if (*(_DWORD *)v9 != 1)
      {
        --*(_DWORD *)v9;
        return result;
      }
      result = v9;
      return (WebCore::RenderObject *)WTF::fastFree(result, a2);
    }
    v14 = v8;
    result = *v8;
    if (*v8
      || (result = (WebCore::RenderObject *)WTF::fastCompactMalloc((WTF *)0x10),
          *(_DWORD *)result = 1,
          *((_QWORD *)result + 1) = v14,
          v12 = *v14,
          *v14 = result,
          !v12))
    {
LABEL_17:
      ++*(_DWORD *)result;
      goto LABEL_18;
    }
    v13 = *(_DWORD *)v12 - 1;
    if (*(_DWORD *)v12 == 1)
    {
      WTF::fastFree(v12, a2);
      result = *v14;
      if (!*v14)
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_32:
    *(_DWORD *)v12 = v13;
    goto LABEL_17;
  }
  while (1)
  {
    result = WebCore::RenderObject::containingBlock(result);
    if (!result || *((_BYTE *)result + 46) == 49)
      return result;
    if ((*((_BYTE *)result + 21) & 0x80) != 0)
    {
      v4 = *((_QWORD *)result + 18);
      goto LABEL_12;
    }
  }
}

WTF::StringImpl *WebCore::RenderBlock::createAnonymousBlockWithStyleAndDisplay@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, const WTF::StringImpl *a3@<X2>, WebCore::RenderElement **a4@<X8>)
{
  WebCore::RenderElement *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::Element *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  if ((a3 & 0xFE) == 0x10)
  {
    WebCore::RenderStyle::createAnonymousStyleWithDisplay(a2, (WTF::StringImpl *)0x10, a3, (uint64_t)&v17);
    v6 = (WebCore::RenderElement *)WebCore::RenderFlexibleBox::operator new(408);
    WebCore::RenderFlexibleBox::RenderFlexibleBox((uint64_t)v6, 9, a1, &v17);
  }
  else
  {
    WebCore::RenderStyle::createAnonymousStyleWithDisplay(a2, (WTF::StringImpl *)1, a3, (uint64_t)&v17);
    v6 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
    v7 = WebCore::RenderObject::RenderObject((uint64_t)v6, 1, a1, 92, 1);
    *(_QWORD *)v7 = off_1E3422BC8;
    *(_QWORD *)(v7 + 64) = 0;
    *(_QWORD *)(v7 + 70) = 0;
    *(_DWORD *)(v7 + 80) = 0;
    v9 = v18;
    v10 = v19;
    v18 = 0;
    *(_QWORD *)(v7 + 88) = v9;
    *(_QWORD *)(v7 + 96) = v10;
    v11 = v20;
    v20 = 0u;
    *(_OWORD *)(v7 + 104) = v11;
    *(_QWORD *)(v7 + 120) = v21;
    v12 = v22;
    v22 = 0u;
    *(_OWORD *)(v7 + 128) = v12;
    *(_OWORD *)(v7 + 144) = 0u;
    *(_OWORD *)(v7 + 160) = 0u;
    *(_OWORD *)(v7 + 176) = 0u;
    *(_QWORD *)(v7 + 192) = 0;
    *(_QWORD *)v7 = off_1E341F9F8;
    *(_DWORD *)(v7 + 200) = -1;
    *(_BYTE *)(v7 + 204) &= 0xFCu;
    *(_BYTE *)(v7 + 208) = 0;
    *(_BYTE *)(v7 + 212) = 0;
    *(_DWORD *)(v7 + 240) = 0;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_DWORD *)(v7 + 20) |= 0x40000u;
  }
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v17, v8);
  *a4 = v6;
  return WebCore::RenderElement::initializeStyle(v6, v13, v14, v15);
}

uint64_t WebCore::Performance::timing(WebCore::Performance *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  unsigned int *v9;
  WTF *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || *(_BYTE *)(v2 + 178))
    return 0;
  if (!*((_QWORD *)this + 7))
  {
    v5 = *(_QWORD *)(v2 + 408);
    v6 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
    v8 = v6;
    *(_DWORD *)v6 = 1;
    if (v5)
    {
      v18 = v6;
      v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v5);
      if (v9)
      {
        do
          v14 = __ldaxr(v9);
        while (__stlxr(v14 + 1, v9));
      }
      v8 = v18;
    }
    else
    {
      v9 = 0;
    }
    *((_QWORD *)v8 + 1) = v9;
    *((_OWORD *)v8 + 1) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 5) = 0u;
    *((_OWORD *)v8 + 6) = 0u;
    *((_OWORD *)v8 + 7) = 0u;
    *((_OWORD *)v8 + 8) = 0u;
    *((_OWORD *)v8 + 9) = 0u;
    *((_OWORD *)v8 + 10) = 0u;
    *((_QWORD *)v8 + 22) = 0;
    v10 = (WTF *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v8;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        v11 = (unsigned int *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v11)
        {
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            v15 = v10;
            atomic_store(1u, v11);
            v19 = (WTF *)v11;
            v16 = v11[7];
            if ((_DWORD)v16)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v19 + 2), (WTF::StringImpl *)(*((_QWORD *)v19 + 2) + 32 * v16));
            v17 = (WTF *)*((_QWORD *)v19 + 2);
            if (v17)
            {
              *((_QWORD *)v19 + 2) = 0;
              *((_DWORD *)v19 + 6) = 0;
              WTF::fastFree(v17, v7);
            }
            WTF::fastFree(v19, v7);
            v10 = v15;
          }
        }
        WTF::fastFree(v10, v7);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  return *((_QWORD *)this + 7);
}

_QWORD *WebCore::Performance::scheduleNavigationObservationTaskIfNeeded(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  if (this[22])
  {
    v1 = (uint64_t)this;
    if (!*((_BYTE *)this + 162))
    {
      v2 = this[1];
      if (v2)
      {
        this = *(_QWORD **)(v2 + 8);
        if (this)
        {
          *(_BYTE *)(v1 + 162) = 1;
          v3 = (*(uint64_t (**)(_QWORD *))(*(this - 12) + 104))(this - 12);
          ++*(_DWORD *)(v1 + 16);
          v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v4 = &off_1E3401938;
          v4[1] = v1;
          v4[2] = v1;
          v5 = v4;
          WebCore::EventLoopTaskGroup::queueTask(v3, 13, (uint64_t *)&v5);
          this = v5;
          v5 = 0;
          if (this)
            return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        }
      }
    }
  }
  return this;
}

_QWORD *WebCore::Performance::reportFirstContentfulPaint(WebCore::Performance *this)
{
  double v2;
  double v3;
  WebCore::PerformanceEntry *v4;
  WTF::StringImpl *v5;
  int v6;
  _QWORD *result;
  uint64_t *v8;
  char v9;
  int v10;
  WTF::StringImpl *v11;

  WTF::MonotonicTime::now(this);
  v3 = *(double *)&WebCore::timePrecision
     * floor((v2 - *((double *)this + 21)) / *(double *)&WebCore::timePrecision)
     * 1000.0;
  v4 = (WebCore::PerformanceEntry *)WTF::fastMalloc((WTF *)0x28);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_DWORD *)v4 + 2) = 1;
  if (v11)
  {
    v6 = *(_DWORD *)v11;
    *(_DWORD *)v11 += 2;
    *((_QWORD *)v4 + 2) = v11;
    *((double *)v4 + 3) = v3;
    *((double *)v4 + 4) = v3 - v3;
    *(_QWORD *)v4 = off_1E3401828;
    if (v6)
      *(_DWORD *)v11 = v6;
    else
      WTF::StringImpl::destroy(v11, v5);
  }
  else
  {
    *((_QWORD *)v4 + 2) = 0;
    *((double *)v4 + 3) = v3;
    *((double *)v4 + 4) = v3 - v3;
    *(_QWORD *)v4 = off_1E3401828;
  }
  result = (_QWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v4;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      v4 = (WebCore::PerformanceEntry *)*((_QWORD *)this + 23);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 26);
  if (v8)
  {
    v9 = 0;
    do
    {
      while (1)
      {
        v10 = *(unsigned __int8 *)(*v8 + 40);
        result = (_QWORD *)(*(uint64_t (**)(WebCore::PerformanceEntry *))(*(_QWORD *)v4 + 32))(v4);
        if ((result & v10) == 0)
          break;
        WebCore::PerformanceObserver::queueEntry(*v8, v4);
        v8 = (uint64_t *)v8[2];
        v9 = 1;
        if (!v8)
          return WebCore::Performance::scheduleTaskIfNeeded(this);
      }
      v8 = (uint64_t *)v8[2];
    }
    while (v8);
    if ((v9 & 1) != 0)
      return WebCore::Performance::scheduleTaskIfNeeded(this);
  }
  return result;
}

uint64_t WebCore::Performance::navigation(WebCore::Performance *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  unsigned int *v9;
  WTF *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || *(_BYTE *)(v2 + 178))
    return 0;
  if (!*((_QWORD *)this + 6))
  {
    v5 = *(_QWORD *)(v2 + 408);
    v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    v8 = v6;
    *(_DWORD *)v6 = 1;
    if (v5)
    {
      v18 = v6;
      v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v5);
      if (v9)
      {
        do
          v14 = __ldaxr(v9);
        while (__stlxr(v14 + 1, v9));
      }
      v8 = v18;
    }
    else
    {
      v9 = 0;
    }
    *((_QWORD *)v8 + 1) = v9;
    v10 = (WTF *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v8;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        v11 = (unsigned int *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v11)
        {
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            v15 = v10;
            atomic_store(1u, v11);
            v19 = (WTF *)v11;
            v16 = v11[7];
            if ((_DWORD)v16)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v19 + 2), (WTF::StringImpl *)(*((_QWORD *)v19 + 2) + 32 * v16));
            v17 = (WTF *)*((_QWORD *)v19 + 2);
            if (v17)
            {
              *((_QWORD *)v19 + 2) = 0;
              *((_DWORD *)v19 + 6) = 0;
              WTF::fastFree(v17, v7);
            }
            WTF::fastFree(v19, v7);
            v10 = v15;
          }
        }
        WTF::fastFree(v10, v7);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  return *((_QWORD *)this + 6);
}

_DWORD *WebCore::MessagePort::disentangle@<X0>(WebCore::MessagePort *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _DWORD *result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  WebCore::MessagePort *v20;

  *((_BYTE *)this + 58) = 0;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v7 = v6 - 96;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(unsigned __int8 *)(v7 + 274);
  if (*(_BYTE *)(v7 + 274))
  {
    if (v8 == 1 || v8 == 2)
      ++*(_DWORD *)(v7 + 312);
  }
  else
  {
    *(_DWORD *)(v7 - 168) += 2;
  }
  v9 = WebCore::MessagePortChannelProvider::fromContext((WebCore::MessagePortChannelProvider *)v7, a2);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v9 + 32))(v9, (char *)this + 64);
  WebCore::ScriptExecutionContext::destroyedMessagePort((WebCore::ScriptExecutionContext *)v7, this);
  WebCore::ScriptExecutionContext::willDestroyActiveDOMObject((WebCore::ScriptExecutionContext *)v7, this);
  WebCore::ScriptExecutionContext::willDestroyDestructionObserver((WebCore::ScriptExecutionContext *)v7, this);
  result = (_DWORD *)*((_QWORD *)this + 1);
  if (!result)
  {
    *((_QWORD *)this + 1) = 0;
    goto LABEL_19;
  }
  v12 = *((_QWORD *)result + 1);
  if (v12)
  {
    WebCore::ScriptExecutionContext::willDestroyDestructionObserver((WebCore::ScriptExecutionContext *)(v12 - 96), this);
    result = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!result)
      goto LABEL_19;
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  do
  {
    v13 = __ldaxr(result);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, result));
  if (!v14)
  {
    atomic_store(1u, result);
    result = (_DWORD *)WTF::fastFree((WTF *)result, v10);
  }
  v15 = *((_QWORD *)this + 1);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v20 = this;
      result = WTF::HashTable<WebCore::ContextDestructionObserver *,WebCore::ContextDestructionObserver *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>>::add((uint64_t *)(v16 + 24), (uint64_t *)&v20, (uint64_t)&v19);
    }
  }
LABEL_19:
  v17 = *((_OWORD *)this + 5);
  *a3 = *((_OWORD *)this + 4);
  a3[1] = v17;
  v18 = *(unsigned __int8 *)(v7 + 274);
  if (*(_BYTE *)(v7 + 274))
  {
    if (v18 == 1)
    {
      if (*(_DWORD *)(v7 + 312) == 1)
        return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      else
        --*(_DWORD *)(v7 + 312);
    }
    else if (v18 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v7 + 312));
    }
  }
  else if (*(_DWORD *)(v7 - 168) == 2)
  {
    if ((*(_WORD *)(v7 - 162) & 0x400) == 0)
      return (_DWORD *)WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 192));
  }
  else
  {
    *(_DWORD *)(v7 - 168) -= 2;
  }
  return result;
}

uint64_t WebCore::JSNavigator::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::JSExecState::~JSExecState(WebCore::JSDOMGlobalObject **this, JSC::JSGlobalObject *a2)
{
  WebCore::JSExecState *v2;
  unint64_t StatusReg;
  uint64_t v4;
  JSC::VM *v5;
  WebCore::JSDOMGlobalObject *v6;
  WebCore::JSDOMGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (WebCore::JSExecState *)this;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_QWORD *)(StatusReg + 736);
  if (v4 && (this = *(WebCore::JSDOMGlobalObject ***)(v4 + 96)) != 0)
  {
    v5 = (JSC::VM *)*((_QWORD *)this[8] + 7);
  }
  else
  {
    this = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v10 = *(_QWORD *)(StatusReg + 736);
    v5 = (JSC::VM *)*((_QWORD *)this[8] + 7);
    if (!v10 || (this = *(WebCore::JSDOMGlobalObject ***)(v10 + 96)) == 0)
      this = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)this);
  }
  v6 = this[8];
  v7 = *(WebCore::JSDOMGlobalObject **)v2;
  if (v6)
  {
    v8 = *(_QWORD *)(StatusReg + 736);
    if (!v8 || (this = *(WebCore::JSDOMGlobalObject ***)(v8 + 96)) == 0)
      this = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)this);
    this[8] = v7;
    if (!v7)
    {
      WebCore::JSExecState::didLeaveScriptContext(v6, a2);
      v9 = *((_QWORD *)v5 + 2);
      if (!v9 || *((_QWORD *)v5 + 3) != v9)
        JSC::VM::clearException(v5);
    }
  }
  else
  {
    v11 = *(_QWORD *)(StatusReg + 736);
    if (!v11 || (this = *(WebCore::JSDOMGlobalObject ***)(v11 + 96)) == 0)
      this = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)this);
    this[8] = v7;
  }
  MEMORY[0x19AEA32A0]((char *)v2 + 8);
}

WebCore::JSDOMGlobalObject *WebCore::JSExecState::didLeaveScriptContext(WebCore::JSDOMGlobalObject *this, JSC::JSGlobalObject *a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;
  uint64_t v6;

  if (this)
  {
    v2 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
    v3 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
    v4 = (char **)(16 * v2);
    if ((_DWORD)v2)
      v5 = v4 == &WebCore::JSDOMGlobalObject::s_info;
    else
      v5 = 1;
    if (!v5)
    {
      do
      {
        v4 = (char **)v4[2];
        v3 = v4 != 0;
      }
      while (v4 != &WebCore::JSDOMGlobalObject::s_info && v4 != 0);
    }
    if (v3)
    {
      this = (WebCore::JSDOMGlobalObject *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
      if (this)
      {
        v6 = (*(uint64_t (**)(WebCore::JSDOMGlobalObject *))(*(_QWORD *)this + 104))(this);
        return (WebCore::JSDOMGlobalObject *)WebCore::EventLoopTaskGroup::performMicrotaskCheckpoint(v6);
      }
    }
  }
  return this;
}

uint64_t WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert<WTF::String,0ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int v12;
  objc_class *v13;
  int v14;
  JSC::VM *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  JSValue v23;
  _QWORD *v24;
  WTF *v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  WTF *v29;
  _OWORD v30[4];
  uint64_t v31;
  JSC::VM *v32;

  v6 = *(JSC::VM **)(a1 + 56);
  v32 = v6;
  v27 = 0;
  v28 = 0x800000000;
  v29 = (WTF *)((char *)v30 + 8);
  memset(v30, 0, sizeof(v30));
  v31 = 0;
  v7 = *(_DWORD *)(a3 + 12);
  if (v7 >= 9)
  {
    v27 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v28) == 1;
    v7 = *(_DWORD *)(a3 + 12);
  }
  if (v7)
  {
    v8 = *(uint64_t **)a3;
    for (i = 8 * v7; i; i -= 8)
    {
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *v8;
      if (*v8 && (v12 = *(_DWORD *)(v11 + 4)) != 0)
      {
        if (v12 != 1)
          goto LABEL_8;
        v20 = *(unsigned __int8 **)(v11 + 8);
        if ((*(_BYTE *)(v11 + 16) & 4) != 0)
        {
          v21 = *v20;
        }
        else
        {
          v22 = *(unsigned __int16 *)v20;
          if (v22 > 0xFF)
          {
LABEL_8:
            v13 = *(objc_class **)(v10 + 64760);
            if (!v13 || v11 != *((_QWORD *)v13 + 1))
              v13 = (objc_class *)JSC::jsStringWithCacheSlowCase();
            goto LABEL_11;
          }
          v21 = v22;
        }
        v13 = *(objc_class **)(v10 + 8 * v21 + 42216);
      }
      else
      {
        v13 = *(objc_class **)(v10 + 41968);
      }
LABEL_11:
      if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
        goto LABEL_38;
      v14 = v28;
      if ((_DWORD)v28 == HIDWORD(v28) || v29 != (WTF *)((char *)v30 + 8) && v29)
      {
        v23.super.isa = v13;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v28, v23) == 1)
          v27 = 1;
      }
      else
      {
        *((_QWORD *)v29 + v28) = v13;
        LODWORD(v28) = v14 + 1;
      }
      ++v8;
    }
  }
  if (v27)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v25 = v29;
    v26 = v28;
    v15 = *(JSC::VM **)(a2 + 56);
    if (!*((_DWORD *)v15 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
    {
      v17 = JSC::constructArray();
      goto LABEL_21;
    }
  }
LABEL_38:
  v17 = 0;
LABEL_21:
  v18 = *(uint64_t **)&v30[0];
  if (*(_QWORD *)&v30[0])
  {
    v25 = (WTF *)&v28;
    v24 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v30[0], (uint64_t *)&v25);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v18, v24);
  }
  if (v29 != (WTF *)((char *)v30 + 8) && v29)
    WTF::fastFree(v29, v16);
  return v17;
}

WebCore::Geolocation *WebCore::Geolocation::Geolocation(WebCore::Geolocation *this, WebCore::Navigator *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  unsigned int *v7;
  unsigned int v8;

  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 1;
  *((_QWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = (WebCore::ScriptExecutionContext *)(v5 - 96);
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  WebCore::ActiveDOMObject::ActiveDOMObject(this, v6);
  *(_QWORD *)this = &off_1E3357010;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2);
  v7 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *((_QWORD *)this + 6) = v7;
  *((_QWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *((_QWORD *)this + 13) = 0;
  *(_DWORD *)((char *)this + 111) = 0;
  WebCore::Timer::Timer<WebCore::Geolocation,WebCore::Geolocation>((uint64_t)this + 128, (uint64_t)this);
  *((_QWORD *)this + 23) = 0;
  return this;
}

_QWORD *WebCore::Geolocation::create(WebCore::Geolocation *this, WebCore::Navigator *a2)
{
  WebCore::Geolocation *v4;
  WebCore::Geolocation *v5;

  v4 = (WebCore::Geolocation *)bmalloc::api::isoAllocate();
  v5 = WebCore::Geolocation::Geolocation(v4, a2);
  *(_QWORD *)this = v5;
  return WebCore::ActiveDOMObject::suspendIfNeeded(v5);
}

void WebCore::FrameLoader::loadURL(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, const WebCore::MouseEvent *a5, uint64_t *a6, const WebCore::Document *a7, uint64_t *a8)
{
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  uint64_t (*v25)();
  WebCore *FrameForNavigation;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  _DWORD *v32;
  __int128 v33;
  char v34;
  _DWORD *v35;
  int v36;
  WTF::StringImpl *v37;
  void *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  BOOL v43;
  _BOOL4 v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  int v48;
  const WebCore::Document *v49;
  unint64_t v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  char shouldTreatURLAsSameAsCurrent;
  unsigned int v56;
  unsigned int v57;
  WebCore::SecurityOrigin *v58;
  const WebCore::SecurityOrigin *v59;
  WTF::StringImpl *v60;
  char v61;
  int v62;
  unsigned int v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  __int8 v79;
  _DWORD *v80;
  WTF::StringImpl *v81;
  void *v82;
  WebCore::NavigationAction *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  char v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  CFTypeRef v91;
  unsigned int v92;
  _QWORD *v93;
  uint64_t v94;
  WebCore::ResourceRequest *v95;
  _BOOL4 v96;
  char v97;
  int v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  const WebCore::NavigationAction *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  const char *v106;
  unint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  _DWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  unsigned int *v121;
  WTF::StringImpl *v122;
  WebCore::SecurityOrigin *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  BOOL isSameOriginAs;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  unsigned int v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  const WebCore::MouseEvent *v136;
  int v138;
  _QWORD *v139;
  uint64_t v140;
  _DWORD *v142;
  __int128 v143;
  __int128 v144;
  _QWORD v145[6];
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  int v150;
  char v151;
  uint64_t v152;
  _DWORD *v153;
  uint64_t v154;
  char v155;
  char v156;
  char v157;
  uint64_t v158;
  int v159[2];
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  __int128 v166;
  __int128 v167;
  _QWORD v168[4];
  __int128 v169;
  _BYTE v170[40];
  __int128 v171;
  int64x2_t v172;
  int64x2_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  int64x2_t v177;
  uint64_t v178;
  char v179;
  __int16 v180;
  char v181;
  CFTypeRef cf;
  char v183;
  _BYTE buf[12];
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  uint64_t v188;
  __int16 v189;
  _BOOL4 v190;
  uint64_t v191;
  int v192;
  __int16 v193;
  char v194;
  __int16 v195;
  char v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  v14 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v16 = v15[3];
    if (v16)
    {
      v16 = *(_QWORD *)(v16 + 8);
      if (v16)
      {
        if (*(_BYTE *)(v16 + 40))
          v16 = *(_QWORD *)(v16 + 32);
        else
          v16 = 0;
      }
    }
    v17 = v15[4];
    v18 = *(_QWORD *)(v15[16] + 8) == (_QWORD)v15;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v185 = 2048;
    v186 = v16;
    v187 = 2048;
    v188 = v17;
    v189 = 1024;
    v190 = v18;
    _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadURL: frame load started", buf, 0x26u);
  }
  *(_BYTE *)(a1 + 404) = 0;
  v19 = *a8;
  *a8 = 0;
  if (!*(_BYTE *)(a1 + 154) && !*(_BYTE *)(a1 + 155))
  {
    v20 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v21 = (unsigned int *)(v20 + 1);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    if (a2[70])
      v23 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    else
      v23 = a2 + 27;
    v24 = *v23;
    if (v24)
      *(_DWORD *)v24 += 2;
    v160 = v24;
    if (*a6)
      v25 = WTF::RefPtr<WebCore::FormState,WTF::RawPtrTraits<WebCore::FormState>,WTF::DefaultRefDerefTraits<WebCore::FormState>>::unspecifiedBoolTypeInstance;
    else
      v25 = 0;
    FrameForNavigation = WebCore::FrameLoader::findFrameForNavigation((WTF::StringImpl *)a1, (const WTF::AtomString *)&v160, 0, (WebCore::Frame **)v159);
    v27 = *(_QWORD *)v159;
    v136 = a5;
    if (*(_QWORD *)v159)
    {
      if (*(_BYTE *)(*(_QWORD *)v159 + 144))
      {
        v95 = *a2;
        *((_DWORD *)v95 + 6) = *((_DWORD *)*a2 + 6) + 2;
        *(_QWORD *)buf = v95;
        WebCore::FrameLoader::updateRequestAndAddExtraFields(a1, v27, (WebCore::FrameLoader *)(a2 + 2), (const WebCore::Page *)1, a4, 1, 0, 0, v95);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)buf);
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v27 + 40))(v27, a2);
        goto LABEL_88;
      }
      if (!v25)
      {
        v28 = (unsigned int *)(*(_QWORD *)v159 + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 + 1, v28));
        if (!*(_BYTE *)(v27 + 144))
        {
          v30 = (uint64_t)v20;
          if ((_QWORD *)v27 != v20)
          {
            v106 = WebCore::selfTargetFrameName(FrameForNavigation);
            WTF::AtomString::AtomString(buf, (uint64_t)v106, v107);
            WebCore::FrameLoadRequest::setFrameName((WebCore::FrameLoadRequest *)a2, *(const WTF::AtomString **)buf);
            v109 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v109)
            {
              if (*(_DWORD *)v109 == 2)
                WTF::StringImpl::destroy(v109, v108);
              else
                *(_DWORD *)v109 -= 2;
            }
            v110 = *(_DWORD **)(v27 + 280);
            ++*v110;
            *(_QWORD *)buf = v19;
            WebCore::FrameLoader::loadURL(v110, a2, a3, a4, v136, a6, a7, buf);
            if (*(_QWORD *)buf)
              (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
            if (!*v110)
            {
              __break(0xC471u);
              JUMPOUT(0x1945A9620);
            }
            v19 = 0;
            --*v110;
            v30 = v27;
            goto LABEL_85;
          }
LABEL_24:
          v31 = a2 + 2;
          if (((_BYTE)a2[25] & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 2));
            *((_BYTE *)a2 + 200) |= 1u;
          }
          v135 = v19;
          v32 = (_DWORD *)*v31;
          if (*v31)
            *v32 += 2;
          v142 = v32;
          v33 = *(_OWORD *)(a2 + 5);
          v143 = *(_OWORD *)(a2 + 3);
          v144 = v33;
          v145[0] = 0;
          WTF::URL::invalidate((WTF::URL *)v145);
          v145[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v146 = *(_QWORD *)buf;
          v147 = 0u;
          v148 = 0u;
          v149 = 0u;
          v150 = 0x10000;
          v34 = v151 & 0x80 | 4;
          v151 = v34;
          v152 = 0;
          v35 = (_DWORD *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
          {
            *v35 += 2;
            v34 = v151;
          }
          v153 = v35;
          v154 = 0;
          v155 = 0;
          v156 = 0;
          v157 = v157 & 0xE0 | 5;
          v151 = v34 | 2;
          v158 = 0;
          if (*a3 && *((_DWORD *)*a3 + 1))
            WebCore::ResourceRequestBase::setHTTPReferrer((WebCore::ResourceRequestBase *)&v142, a3);
          if (v30)
          {
            v36 = 0;
          }
          else
          {
            if (v160)
              v96 = *((_DWORD *)v160 + 1) == 0;
            else
              v96 = 1;
            v36 = !v96;
          }
          v37 = *a2;
          *((_DWORD *)v37 + 6) = *((_DWORD *)*a2 + 6) + 2;
          WebCore::FrameLoader::updateRequestAndAddExtraFields(a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), (WebCore::FrameLoader *)&v142, (const WebCore::Page *)1, a4, 1, 0, v36, v37);
          if (*((_DWORD *)v37 + 6) == 2)
          {
            if ((*((_WORD *)v37 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v37);
          }
          else
          {
            *((_DWORD *)v37 + 6) -= 2;
          }
          if (*(_DWORD *)(a1 + 212))
            goto LABEL_136;
          v39 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
          if (*(_BYTE *)(*(_QWORD *)(v39 + 304) + 33))
            goto LABEL_136;
          v140 = v30;
          v40 = (unsigned int *)(v39 + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 + 1, v40));
          v42 = *(_QWORD *)(*(_QWORD *)(v39 + 128) + 8);
          if (v42)
            v43 = *(_BYTE *)(v42 + 144) == 0;
          else
            v43 = 0;
          v139 = v20;
          if (v43)
          {
            v44 = (*(_DWORD *)(v42 + 608) | WebCore::NavigationDisabler::s_globalNavigationDisableCount) == 0;
            do
            {
              v45 = __ldaxr(v40);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v40));
            if (v46)
            {
              if (!v44)
              {
LABEL_135:
                v20 = v139;
LABEL_136:
                v19 = v135;
LABEL_84:
                WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v142, v38);
                if (v30)
                {
LABEL_85:
                  v66 = (unsigned int *)(v30 + 8);
                  do
                  {
                    v67 = __ldaxr(v66);
                    v68 = v67 - 1;
                  }
                  while (__stlxr(v68, v66));
                  if (!v68)
                  {
                    atomic_store(1u, v66);
                    v113 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                    *v113 = off_1E31FE290;
                    v113[1] = v66;
                    *(_QWORD *)buf = v113;
                    WTF::ensureOnMainThread();
                    v114 = *(_QWORD *)buf;
                    *(_QWORD *)buf = 0;
                    if (v114)
                      (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
                  }
                }
LABEL_88:
                v69 = *(_QWORD *)v159;
                *(_QWORD *)v159 = 0;
                if (v69)
                {
                  v70 = (unsigned int *)(v69 + 8);
                  do
                  {
                    v71 = __ldaxr(v70);
                    v72 = v71 - 1;
                  }
                  while (__stlxr(v72, v70));
                  if (!v72)
                  {
                    atomic_store(1u, v70);
                    v111 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                    *v111 = off_1E31FE290;
                    v111[1] = v70;
                    *(_QWORD *)buf = v111;
                    WTF::ensureOnMainThread();
                    v112 = *(_QWORD *)buf;
                    *(_QWORD *)buf = 0;
                    if (v112)
                      (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
                  }
                }
                v73 = v160;
                v160 = 0;
                if (v73)
                {
                  if (*(_DWORD *)v73 == 2)
                    WTF::StringImpl::destroy(v73, v65);
                  else
                    *(_DWORD *)v73 -= 2;
                }
                if (v20)
                {
                  do
                  {
                    v74 = __ldaxr(v21);
                    v75 = v74 - 1;
                  }
                  while (__stlxr(v75, v21));
                  if (!v75)
                  {
                    atomic_store(1u, v21);
                    v118 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                    *v118 = off_1E31FE290;
                    v118[1] = v21;
                    *(_QWORD *)buf = v118;
                    WTF::ensureOnMainThread();
                    v119 = *(_QWORD *)buf;
                    *(_QWORD *)buf = 0;
                    if (v119)
                      (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
                  }
                }
                goto LABEL_98;
              }
LABEL_48:
              WebCore::NavigationAction::NavigationAction((uint64_t)buf, (uint64_t)*a2, (uint64_t)&v142, *((_BYTE *)a2 + 568), *((_BYTE *)a2 + 569), a4, v25 != 0, v136, *((_BYTE *)a2 + 556), (_DWORD **)a2 + 70);
              v195 = *((_WORD *)a2 + 273);
              v192 = *((_DWORD *)a2 + 138);
              v194 = *((_BYTE *)a2 + 570);
              v47 = *((_BYTE *)a2 + 550);
              v196 = v47;
              v48 = *((unsigned __int8 *)a2 + 576);
              if (v48 == 2)
              {
                LOBYTE(v50) = 1;
                v49 = a7;
              }
              else
              {
                v49 = a7;
                if (v48 == 1)
                  goto LABEL_53;
                if ((a4 - 1) < 3)
                {
                  LOBYTE(v50) = 3;
                  goto LABEL_54;
                }
                if ((a4 - 4) > 5)
LABEL_53:
                  LOBYTE(v50) = 0;
                else
                  v50 = 0x20200000002uLL >> (8 * (a4 - 4));
              }
LABEL_54:
              v193 = v50 | 0x100;
              if (*((_BYTE *)v49 + 312) && *(_QWORD **)(v139[16] + 8) == v139)
              {
                WebCore::NavigationAction::setPrivateClickMeasurement((uint64_t)buf, (uint64_t)v49);
                v47 = *((_BYTE *)a2 + 550);
              }
              v138 = *((unsigned __int8 *)a2 + 549);
              if (!v30 && v160 && *((_DWORD *)v160 + 1))
              {
                v97 = *((_BYTE *)a2 + 556);
                v98 = *((unsigned __int8 *)a2 + 568);
                if ((WebCore::UserGestureIndicator::processingUserGesture(0, v49) & 1) != 0)
                {
                  v97 = 2;
                }
                else if (v98 && *(_QWORD **)(v139[16] + 8) != v139)
                {
                  v97 = 0;
                }
                WebCore::NavigationAction::copyWithShouldOpenExternalURLsPolicy((WebCore::NavigationAction *)buf, v97, (WebCore::NavigationAction *)&v165);
                WebCore::NavigationAction::operator=((uint64_t)buf, (uint64_t *)&v165);
                WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)&v165, v99);
                if (WebCore::Document::shouldForceNoOpenerBasedOnCOOP(*a2))
                {
                  WTF::AtomStringImpl::add();
                  v101 = v160;
                  v160 = v165;
                  if (v101)
                  {
                    if (*(_DWORD *)v101 != 2)
                    {
                      v47 = 0;
                      *(_DWORD *)v101 -= 2;
                      goto LABEL_153;
                    }
                    WTF::StringImpl::destroy(v101, v100);
                  }
                  v47 = 0;
                }
LABEL_153:
                if ((*(_QWORD *)(*(_QWORD *)(v139[37] + 680) + 664) & 0x20000000000) == 0)
                {
                  v102 = v135;
LABEL_155:
                  v103 = *(const WebCore::NavigationAction **)(a1 + 24);
                  v104 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
                  *(_QWORD *)v104 = &off_1E33F5F10;
                  *((_QWORD *)v104 + 1) = a1;
                  *((_BYTE *)v104 + 16) = v138;
                  *((_BYTE *)v104 + 17) = v47;
                  *((_QWORD *)v104 + 3) = v102;
                  v165 = v104;
                  WebCore::PolicyChecker::checkNewWindowPolicy(v103, (const WebCore::NavigationAction *)buf, (uint64_t)&v142, a6, (_DWORD **)&v160, (uint64_t *)&v165);
                  v105 = v165;
                  v165 = 0;
                  if (v105)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v105 + 8))(v105);
                  v19 = 0;
                  v20 = v139;
LABEL_83:
                  WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v60);
                  goto LABEL_84;
                }
                if (((_BYTE)a2[25] & 1) == 0)
                {
                  WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 2));
                  *((_BYTE *)a2 + 200) |= 1u;
                }
                if (WTF::URL::protocolIs())
                {
                  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296) + 192), v120);
                  v123 = (WebCore::SecurityOrigin *)v121;
                  if (v121)
                  {
                    do
                      v124 = __ldaxr(v121);
                    while (__stlxr(v124 + 1, v121));
                  }
                  v165 = (WTF::StringImpl *)v121;
                  WebCore::Document::topOrigin(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296), v122);
                  do
                    v126 = __ldaxr(v125);
                  while (__stlxr(v126 + 1, v125));
                  v161 = (WTF::StringImpl *)v125;
                  isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v123, (const WebCore::SecurityOrigin *)v125);
                  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v161, v128);
                  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v165, v129);
                  v102 = v135;
                  if (isSameOriginAs)
                    goto LABEL_155;
                  WTF::AtomStringImpl::add();
                  v131 = v160;
                  v160 = v165;
                  if (v131)
                  {
                    if (*(_DWORD *)v131 != 2)
                    {
                      v47 = 0;
                      *(_DWORD *)v131 -= 2;
                      goto LABEL_197;
                    }
                    WTF::StringImpl::destroy(v131, v130);
                  }
                  v47 = 0;
                }
LABEL_197:
                v102 = v135;
                goto LABEL_155;
              }
              v51 = *(_DWORD **)(a1 + 88);
              if (v51)
                ++v51[6];
              v52 = a2[1];
              do
                v53 = __ldaxr((unsigned int *)v52);
              while (__stlxr(v53 + 1, (unsigned int *)v52));
              shouldTreatURLAsSameAsCurrent = WebCore::FrameLoader::shouldTreatURLAsSameAsCurrent((WebCore::FrameLoader *)a1, v52, a2 + 2);
              if (v52)
              {
                do
                {
                  v56 = __ldaxr((unsigned int *)v52);
                  v57 = v56 - 1;
                }
                while (__stlxr(v57, (unsigned int *)v52));
                if (!v57)
                {
                  atomic_store(1u, (unsigned int *)v52);
                  v115 = (WTF::StringImpl *)*((_QWORD *)v52 + 6);
                  *((_QWORD *)v52 + 6) = 0;
                  if (v115)
                  {
                    if (*(_DWORD *)v115 == 2)
                      WTF::StringImpl::destroy(v115, v54);
                    else
                      *(_DWORD *)v115 -= 2;
                  }
                  v116 = (WTF::StringImpl *)*((_QWORD *)v52 + 5);
                  *((_QWORD *)v52 + 5) = 0;
                  if (v116)
                  {
                    if (*(_DWORD *)v116 == 2)
                      WTF::StringImpl::destroy(v116, v54);
                    else
                      *(_DWORD *)v116 -= 2;
                  }
                  v117 = *((unsigned int *)v52 + 8);
                  if ((_DWORD)v117 != -1)
                    ((void (*)(WTF::StringImpl **, char *))off_1E33F5B50[v117])(&v165, (char *)v52 + 8);
                  *((_DWORD *)v52 + 8) = -1;
                  WTF::fastFree(v52, v54);
                }
              }
              if ((v157 & 1) == 0)
              {
                WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v142);
                v157 |= 1u;
              }
              v19 = v135;
              if (v25 && !WTF::equalLettersIgnoringASCIICase(&v146, "get", 4uLL)
                || a4 <= 9 && ((1 << a4) & 0x330) != 0
                || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296) + 3362) == 2
                || ((_BYTE)a2[3] & 1) == 0
                || !*v31
                || *(_DWORD *)(*v31 + 4) <= *((_DWORD *)a2 + 13)
                || !WTF::equalIgnoringFragmentIdentifier()
                || (v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296),
                    ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 392))(v76) & 1) != 0)
                || (*(_DWORD *)(a1 + 64) - 3) > 0xFFFFFFFD)
              {
                v58 = a2[1];
                WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v139[37] + 192), v54);
                if (!WebCore::SecurityOrigin::isSameOriginDomain(v58, v59)
                  || WebCore::FrameLoader::dispatchNavigateEvent(*(WebCore::Node **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296), (WTF::URL *)(a2 + 2), a4, v191, *((unsigned __int8 *)a2 + 576), 0, 0))
                {
                  v61 = *(_BYTE *)(a1 + 152);
                  v62 = *((unsigned __int8 *)a2 + 545);
                  do
                    v63 = __ldaxr(v21);
                  while (__stlxr(v63 + 1, v21));
                  v64 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
                  *(_QWORD *)v64 = &off_1E33F5F60;
                  *((_QWORD *)v64 + 1) = a1;
                  *((_BYTE *)v64 + 16) = v61;
                  *((_BYTE *)v64 + 17) = shouldTreatURLAsSameAsCurrent;
                  *((_BYTE *)v64 + 18) = a4;
                  v20 = v139;
                  *((_QWORD *)v64 + 3) = v139;
                  *((_QWORD *)v64 + 4) = v135;
                  v165 = v64;
                  WebCore::FrameLoader::loadWithNavigationAction(a1, (WebCore::ResourceRequest *)&v142, (const WebCore::NavigationAction *)buf, a4, a6, v138 != 0, v62, (uint64_t *)&v165);
                  if (v165)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v165 + 8))(v165);
                  v19 = 0;
                  goto LABEL_79;
                }
              }
              else if (WebCore::FrameLoader::dispatchNavigateEvent(*(WebCore::Node **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296), (WTF::URL *)(a2 + 2), a4, v191, *((unsigned __int8 *)a2 + 576), 1, 0))
              {
                WebCore::DocumentLoader::setTriggeringAction((uint64_t)v51, (uint64_t *)buf);
                v161 = 0;
                WTF::URL::invalidate((WTF::URL *)&v161);
                v77 = v161;
                v20 = v139;
                if (v161)
                  *(_DWORD *)v161 += 2;
                v166 = v162;
                v167 = v163;
                v165 = v77;
                v168[0] = 0;
                WTF::URL::invalidate((WTF::URL *)v168);
                *((_QWORD *)&v169 + 1) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                *(_QWORD *)v170 = v164;
                memset(&v170[8], 0, 32);
                v171 = 0u;
                v172.i32[0] = 0x10000;
                v79 = v172.i8[4] & 0x80 | 4;
                v172.i8[4] = v79;
                v172.i64[1] = 0;
                v80 = (_DWORD *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                {
                  *v80 += 2;
                  v79 = v172.i8[4];
                }
                v173 = (int64x2_t)(unint64_t)v80;
                LOBYTE(v174) = 0;
                BYTE4(v174) = 0;
                LOBYTE(v175) = v175 & 0xE0 | 5;
                v172.i8[4] = v79 | 2;
                v81 = v161;
                v161 = 0;
                if (v81)
                {
                  if (*(_DWORD *)v81 == 2)
                    WTF::StringImpl::destroy(v81, v78);
                  else
                    *(_DWORD *)v81 -= 2;
                }
                v176 = 0;
                WebCore::ResourceRequest::operator=((uint64_t)(v51 + 268), (uint64_t)&v165);
                WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v165, v82);
                WebCore::PolicyChecker::stopCheck(*(WebCore::PolicyChecker **)(a1 + 24));
                v83 = *(WebCore::NavigationAction **)(a1 + 24);
                *((_BYTE *)v83 + 26) = a4;
                if ((a4 - 1) <= 2 && !*(_QWORD *)(v139[23] + 32))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1945A9328);
                }
                v165 = 0;
                WTF::URL::invalidate((WTF::URL *)&v165);
                LOBYTE(v171) = 0;
                WORD4(v171) = 0;
                memset(v168, 0, sizeof(v168));
                v169 = 0u;
                memset(v170, 0, 33);
                v172 = vdupq_n_s64(0x7FF8000000000000uLL);
                v173 = v172;
                v175 = 0;
                v174 = 0;
                v177 = v172;
                v176 = 0x8000000000000000;
                v178 = 0x7FF8000000000000;
                v179 &= 0xF0u;
                v180 &= 0xC000u;
                v181 = v181 & 0xF8 | 2;
                cf = 0;
                v183 = 0;
                BYTE10(v171) = BYTE10(v171) & 0xC0 | 5;
                do
                  v84 = __ldaxr(v21);
                while (__stlxr(v84 + 1, v21));
                v85 = (unsigned int *)a2[1];
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(v86 + 1, v85));
                v87 = *((_BYTE *)a2 + 576);
                v88 = WTF::fastMalloc((WTF *)0x28);
                *(_QWORD *)v88 = &off_1E33F5F38;
                *(_QWORD *)(v88 + 8) = a1;
                *(_QWORD *)(v88 + 16) = v139;
                *(_QWORD *)(v88 + 24) = v85;
                *(_BYTE *)(v88 + 32) = v87;
                v161 = (WTF::StringImpl *)v88;
                WebCore::PolicyChecker::checkNavigationPolicy(v83, (uint64_t)&v142, (uint64_t)&v165, (uint64_t)v51, a6, &v161, 0);
                v90 = v161;
                v161 = 0;
                if (v90)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v90 + 8))(v90);
                v91 = cf;
                cf = 0;
                if (v91)
                  CFRelease(v91);
                WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v165, v89);
                goto LABEL_79;
              }
              v20 = v139;
LABEL_79:
              if (v51)
              {
                if (v51[6] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 24))(v51);
                else
                  --v51[6];
              }
              v30 = v140;
              goto LABEL_83;
            }
          }
          else
          {
            do
              v92 = __ldaxr(v40);
            while (__stlxr(v92 - 1, v40));
            if (v92 != 1)
              goto LABEL_48;
            LOBYTE(v44) = 1;
          }
          atomic_store(1u, v40);
          v93 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v93 = off_1E31FE290;
          v93[1] = v40;
          *(_QWORD *)buf = v93;
          WTF::ensureOnMainThread();
          v94 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v94)
            (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
          if (!v44)
            goto LABEL_135;
          goto LABEL_48;
        }
        do
          v132 = __ldaxr(v28);
        while (__stlxr(v132 - 1, v28));
        if (v132 == 1)
        {
          atomic_store(1u, v28);
          v133 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v133 = off_1E31FE290;
          v133[1] = v28;
          *(_QWORD *)buf = v133;
          WTF::ensureOnMainThread();
          v134 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v134)
            (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
        }
      }
    }
    v30 = 0;
    goto LABEL_24;
  }
LABEL_98:
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
}

uint64_t WebCore::FrameLoader::scrollToFragmentWithParentBoundary(uint64_t this, const WTF::URL *a2, int a3)
{
  _QWORD *v3;
  WebCore::LocalFrameView *v4;
  int v5;
  uint64_t v6;
  unsigned int v8;
  WebCore::HistoryItem *v10;
  int v11;
  WTF *v12;
  void *v13;
  char v14;
  WTF *v15;
  void *v16;

  v3 = *(_QWORD **)(*(_QWORD *)(this + 8) + 8);
  v4 = (WebCore::LocalFrameView *)v3[36];
  if (v4)
  {
    v5 = *((_DWORD *)v4 + 2);
    *((_DWORD *)v4 + 2) = v5 + 1;
    v6 = v3[37];
    if (!v6)
      goto LABEL_17;
    *(_DWORD *)(v6 + 24) += 2;
    v8 = *(unsigned __int8 *)(this + 81) - 1;
    if (v8 >= 3 && a3 == 0)
      goto LABEL_11;
    v10 = *(WebCore::HistoryItem **)(v3[23] + 16);
    if (!v10)
      goto LABEL_11;
    v11 = (*(_DWORD *)v10)++;
    if (v8 > 2)
    {
      if (v11)
      {
        *(_DWORD *)v10 = v11;
      }
      else
      {
        WebCore::HistoryItem::~HistoryItem(v10);
        WTF::fastFree(v12, v13);
      }
LABEL_11:
      this = WebCore::Style::Scope::hasPendingSheets(*(WebCore::Style::Scope **)(v6 + 1328));
      if (!(_DWORD)this || *(_BYTE *)(v6 + 3379))
        this = WebCore::LocalFrameView::scrollToFragment(v4, a2);
      else
        *(_BYTE *)(v6 + 3396) = 1;
      goto LABEL_13;
    }
    this = WebCore::HistoryItem::shouldRestoreScrollPosition(v10);
    v14 = this;
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v10);
      this = WTF::fastFree(v15, v16);
      if ((v14 & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      --*(_DWORD *)v10;
      if ((this & 1) != 0)
        goto LABEL_11;
    }
  }
  else
  {
    v6 = v3[37];
    if (!v6)
      return this;
    *(_DWORD *)(v6 + 24) += 2;
  }
LABEL_13:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (v4)
  {
    v5 = *((_DWORD *)v4 + 2) - 1;
LABEL_17:
    if (v5)
      *((_DWORD *)v4 + 2) = v5;
    else
      return (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v4 + 8))(v4);
  }
  return this;
}

uint64_t WebCore::FrameLoader::didReachVisuallyNonEmptyState(WebCore::FrameLoader *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 376))(*((_QWORD *)this + 2));
}

WTF::StringImpl *WebCore::FrameLoader::loadWithNavigationAction(uint64_t a1, WebCore::ResourceRequest *a2, const WebCore::NavigationAction *a3, unsigned int a4, uint64_t *a5, int a6, int a7, uint64_t *a8)
{
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  int v31;
  char v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  _DWORD *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *result;
  uint64_t v50;
  WebCore::SecurityOrigin *v51;
  WebCore::SecurityOrigin *v52;
  WTF::StringImpl *v53;
  const WebCore::SecurityOrigin *v54;
  uint64_t (*v55)(void);
  char v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  const WTF::String *v60;
  WTF::StringImpl *v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  WTF::StringImpl *v66;
  _BYTE buf[12];
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  _BOOL4 v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v16 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v18 = v17[3];
    if (v18)
    {
      v18 = *(_QWORD *)(v18 + 8);
      if (v18)
      {
        if (*(_BYTE *)(v18 + 40))
          v18 = *(_QWORD *)(v18 + 32);
        else
          v18 = 0;
      }
    }
    v19 = v17[4];
    v20 = *(_QWORD *)(v17[16] + 8) == (_QWORD)v17;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v68 = 2048;
    v69 = v18;
    v70 = 2048;
    v71 = v19;
    v72 = 1024;
    v73 = v20;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadWithNavigationAction: frame load started", buf, 0x26u);
  }
  *(_BYTE *)(a1 + 404) = 0;
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  if (WTF::URL::protocolIsJavaScript(a2) && !*((_BYTE *)a3 + 877))
  {
    if ((*((_BYTE *)a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(a2);
      *((_BYTE *)a2 + 184) |= 1u;
    }
    WebCore::FrameLoader::executeJavaScriptURL((WebCore::FrameLoader *)a1, a2, a3);
    v57 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
    v55 = *(uint64_t (**)(void))(*(_QWORD *)v57 + 8);
    return (WTF::StringImpl *)v55();
  }
  v64 = a7;
  v65 = a4;
  v21 = a5;
  v22 = *(_QWORD *)(a1 + 16);
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  v23 = a6;
  v24 = a8;
  WebCore::FrameLoader::defaultSubstituteDataForURL((WebCore::FrameLoader *)buf, (const WTF::URL *)a1, a2);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WebCore::ResourceRequest *, _BYTE *))(*(_QWORD *)v22 + 760))(&v66, v22, a2, buf);
  WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)buf, v25);
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v28 = (unsigned int *)(v27 + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  v30 = v66;
  v31 = *((unsigned __int8 *)a3 + 872);
  v32 = *((_BYTE *)a3 + 871);
  if (WTF::isMainThread(v26))
  {
    {
      if (WebCore::currentToken(void)::token
        && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
        && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
      {
        v32 = 2;
LABEL_16:
        *((_BYTE *)v30 + 3530) = v32;
        v33 = v24;
        v34 = v23;
        v35 = v21;
        v37 = v64;
        v36 = v65;
        if (!v27)
          goto LABEL_19;
        goto LABEL_17;
      }
    }
    else
    {
      WebCore::currentToken(void)::token = 0;
    }
  }
  if (!v31)
    goto LABEL_16;
  if (*(_QWORD *)(*(_QWORD *)(v27 + 128) + 8) == v27)
    v56 = v32;
  else
    v56 = 0;
  *((_BYTE *)v30 + 3530) = v56;
  v33 = v24;
  v34 = v23;
  v35 = v21;
  v37 = v64;
  v36 = v65;
  do
  {
LABEL_17:
    v38 = __ldaxr(v28);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, v28));
  if (!v39)
  {
    atomic_store(1u, v28);
    v62 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v62 = off_1E31FE290;
    v62[1] = v28;
    *(_QWORD *)buf = v62;
    WTF::ensureOnMainThread();
    v63 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v63)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  }
LABEL_19:
  v40 = v66;
  *((_BYTE *)v66 + 3542) = v37 == 2;
  *((_BYTE *)v40 + 3532) = *((_BYTE *)a3 + 876);
  if (!*((_BYTE *)a3 + 878))
    goto LABEL_20;
  v58 = *(_QWORD *)(a1 + 88);
  if (!v58)
    goto LABEL_20;
  v59 = *(unsigned __int8 *)(v58 + 3547);
  if (*(_BYTE *)(v58 + 3547))
  {
    WebCore::DocumentLoader::urlForHistory((WebCore::DocumentLoader *)v58, (uint64_t)buf);
    v60 = *(const WTF::String **)buf;
    if (*(_QWORD *)buf)
      goto LABEL_52;
  }
  else
  {
    v60 = *(const WTF::String **)(v58 + 2720);
    if (v60)
    {
LABEL_52:
      *(_DWORD *)v60 += 2;
      WebCore::DocumentLoader::setClientRedirectSourceForHistory(v40, v60);
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v61);
      else
        *(_DWORD *)v60 -= 2;
      goto LABEL_54;
    }
  }
  WebCore::DocumentLoader::setClientRedirectSourceForHistory(v40, 0);
LABEL_54:
  if (v59 && *(_QWORD *)buf)
  {
    if (**(_DWORD **)buf == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)buf, v61);
    else
      **(_DWORD **)buf -= 2;
  }
  v40 = v66;
LABEL_20:
  WebCore::NavigationAction::operator=((uint64_t)v40 + 1632, (uint64_t *)a3);
  v42 = *((_QWORD *)v40 + 2);
  if (!v42
    || (v43 = *(_QWORD **)(v42 + 8)) == 0
    || *(_QWORD **)(v43[16] + 8) == v43
    || *(WTF::StringImpl **)(v43[35] + 88) == v40
    && (v50 = v43[37]) != 0
    && (WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v50 + 192), v41),
        v52 = v51,
        WebCore::Document::topOrigin((WebCore::Document *)v50, v53),
        WebCore::SecurityOrigin::isSameOriginAs(v52, v54)))
  {
    v44 = *((_BYTE *)v40 + 3530);
  }
  else
  {
    v44 = 0;
  }
  *((_BYTE *)v40 + 2503) = v44;
  v45 = *(_QWORD *)(a1 + 88);
  v46 = v66;
  if (v45)
  {
    v47 = *(_DWORD **)(v45 + 1624);
    if (v47)
      *v47 += 2;
    v48 = (WTF::StringImpl *)*((_QWORD *)v46 + 203);
    *((_QWORD *)v46 + 203) = v47;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::destroy(v48, v46);
        v46 = v66;
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
  }
  WebCore::FrameLoader::loadWithDocumentLoader(a1, (uint64_t)v46, v36, v35, v34, v33);
  result = v66;
  v66 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      v55 = *(uint64_t (**)(void))(*(_QWORD *)result + 24);
      return (WTF::StringImpl *)v55();
    }
    --*((_DWORD *)result + 6);
  }
  return result;
}

uint64_t WebCore::FrameLoader::provisionalLoadStarted(WebCore::FrameLoader *this)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WebCore::Page *v10;
  _QWORD *v11;
  uint64_t v12;

  if (*((_DWORD *)this + 16) == 4)
    *((_DWORD *)this + 16) = 3;
  v2 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
  v3 = (unsigned int *)(v2 + 1);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (_QWORD *)v2[19];
  ++*(_DWORD *)v5;
  WebCore::NavigationScheduler::cancel(v5, (WebCore::Frame *)1);
  if (!*(_DWORD *)v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1945A9E70);
  }
  --*(_DWORD *)v5;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 736))(*((_QWORD *)this + 2));
  if (*(_QWORD **)(v2[16] + 8) == v2)
  {
    result = kdebug_trace();
    v9 = v2[3];
    if (v9)
    {
      v10 = *(WebCore::Page **)(v9 + 8);
      if (v10)
      {
        ++*(_DWORD *)v10;
        WebCore::Page::didStartProvisionalLoad(v10);
        result = (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v10);
      }
    }
  }
  do
  {
    v7 = __ldaxr(v3);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v3));
  if (!v8)
  {
    atomic_store(1u, v3);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v3;
    v12 = (uint64_t)v11;
    WTF::ensureOnMainThread();
    result = v12;
    if (v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  return result;
}

WTF::StringImpl *WebCore::FrameLoader::findFrameForNavigation@<X0>(WTF::StringImpl *this@<X0>, const WTF::AtomString *a2@<X1>, WebCore::Document *a3@<X2>, WebCore::Frame **a4@<X8>)
{
  WebCore::Document *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::Frame *v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  WebCore::Frame *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  _BOOL4 canNavigate;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35[5];

  if (a3)
  {
    v5 = a3;
    *((_DWORD *)a3 + 6) += 2;
    v6 = *((_QWORD *)this + 1);
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    v5 = *(WebCore::Document **)(*(_QWORD *)(v6 + 8) + 296);
    if (!v5)
    {
      *a4 = 0;
      return this;
    }
    *((_DWORD *)v5 + 6) += 2;
  }
  v7 = *(_QWORD *)(v6 + 8);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *((_QWORD *)v5 + 66);
  if (v10 && (v11 = *(WebCore::Frame **)(v10 + 8)) != 0)
  {
    v12 = 0;
  }
  else
  {
    v11 = *(WebCore::Frame **)(*((_QWORD *)this + 1) + 8);
    v12 = 1;
  }
  v13 = (unsigned int *)((char *)v11 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = (unsigned int *)WebCore::FrameTree::findBySpecifiedName((WebCore::FrameTree *)(v7 + 48), a2, v11);
  v16 = (WebCore::Frame *)v15;
  if (v15)
  {
    v17 = v15 + 2;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  if (v12)
  {
    if (v11)
    {
      v19 = (unsigned int *)((char *)v11 + 8);
      do
      {
        v20 = __ldaxr(v19);
        v21 = --v20 == 0;
      }
      while (__stlxr(v20, v19));
      goto LABEL_21;
    }
  }
  else if (v11)
  {
    v19 = (unsigned int *)((char *)v11 + 8);
    do
    {
      v22 = __ldaxr(v19);
      v21 = --v22 == 0;
    }
    while (__stlxr(v22, v19));
LABEL_21:
    if (v21)
    {
      atomic_store(1u, v19);
      v31 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v31 = off_1E31FE290;
      *((_QWORD *)v31 + 1) = v19;
      v35[0] = v31;
      WTF::ensureOnMainThread();
      v32 = v35[0];
      v35[0] = 0;
      if (v32)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 8))(v32);
    }
  }
  if (v7)
  {
    do
    {
      v23 = __ldaxr(v8);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v8));
    if (!v24)
    {
      atomic_store(1u, v8);
      v33 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v33 = off_1E31FE290;
      *((_QWORD *)v33 + 1) = v8;
      v35[0] = v33;
      WTF::ensureOnMainThread();
      v34 = v35[0];
      v35[0] = 0;
      if (v34)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v34 + 8))(v34);
    }
  }
  v35[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v35);
  canNavigate = WebCore::Document::canNavigate(v5, v16, (const WTF::URL *)v35);
  this = v35[0];
  v35[0] = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v25);
    else
      *(_DWORD *)this -= 2;
  }
  if (canNavigate)
  {
    *a4 = v16;
  }
  else
  {
    *a4 = 0;
    if (v16)
    {
      v27 = (unsigned int *)((char *)v16 + 8);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v30 = off_1E31FE290;
        *((_QWORD *)v30 + 1) = v27;
        v35[0] = v30;
        WTF::ensureOnMainThread();
        this = v35[0];
        v35[0] = 0;
        if (this)
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  if (*((_DWORD *)v5 + 6) == 2)
  {
    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef(v5);
  }
  else
  {
    *((_DWORD *)v5 + 6) -= 2;
  }
  return this;
}

void WebCore::FrameLoader::loadURLIntoChildFrame(WebCore::FrameLoader *this, WTF::StringImpl **a2, WTF::StringImpl **a3, WebCore::LocalFrame *a4)
{
  NSObject *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WebCore::ArchiveResourceCollection *v18;
  WTF::StringImpl *v19;
  WebCore::HistoryItem *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  WebCore *v31;
  const char *v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  WebCore::HistoryItem *v42;
  WTF::StringImpl *v43;
  WebCore::HistoryItem *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47[39];
  char v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  _DWORD *v51;
  _BYTE buf[12];
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  _BOOL4 v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE7C860;
  v9 = os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v9)
  {
    v11 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
    v12 = v11[3];
    if (v12)
    {
      v12 = *(_QWORD *)(v12 + 8);
      if (v12)
      {
        if (*(_BYTE *)(v12 + 40))
          v12 = *(_QWORD *)(v12 + 32);
        else
          v12 = 0;
      }
    }
    v13 = v11[4];
    v14 = *(_QWORD *)(v11[16] + 8) == (_QWORD)v11;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = this;
    v53 = 2048;
    v54 = v12;
    v55 = 2048;
    v56 = v13;
    v57 = 1024;
    v58 = v14;
    _os_log_impl(&dword_1940B8000, v8, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::loadURLIntoChildFrame: frame load started", buf, 0x26u);
  }
  v15 = 88;
  if (!*((_BYTE *)this + 80))
    v15 = 96;
  v16 = *(_QWORD *)((char *)this + v15);
  if (!v16)
    goto LABEL_18;
  ++*(_DWORD *)(v16 + 24);
  WebCore::FrameTree::uniqueName((uint64_t)a4 + 48, v10, (WTF::AtomString *)v47);
  v18 = *(WebCore::ArchiveResourceCollection **)(v16 + 2656);
  if (v18)
    WebCore::ArchiveResourceCollection::popSubframeArchive(v18, v47, a2, buf);
  else
    *(_QWORD *)buf = 0;
  v9 = (uint64_t)v47[0];
  v47[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      v9 = WTF::StringImpl::destroy((WTF::StringImpl *)v9, v17);
    else
      *(_DWORD *)v9 -= 2;
  }
  v19 = *(WTF::StringImpl **)buf;
  if (*(_QWORD *)buf)
  {
    v41 = (_DWORD *)*((_QWORD *)a4 + 35);
    ++*v41;
    v47[0] = v19;
    *(_QWORD *)buf = 0;
    WebCore::FrameLoader::loadArchive((uint64_t)v41, v47);
    if (v47[0])
    {
      if (*((_DWORD *)v47[0] + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v47[0] + 8))();
      else
        --*((_DWORD *)v47[0] + 2);
    }
    if (!*v41)
    {
      __break(0xC471u);
      JUMPOUT(0x1945AA6DCLL);
    }
    --*v41;
    v9 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 8) == 1)
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      else
        --*(_DWORD *)(v9 + 8);
    }
  }
  if (*(_DWORD *)(v16 + 24) == 1)
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  else
    --*(_DWORD *)(v16 + 24);
  if (!v19)
  {
LABEL_18:
    v20 = *(WebCore::HistoryItem **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 184) + 16);
    if (!v20)
      goto LABEL_21;
    ++*(_DWORD *)v20;
    v9 = WebCore::HistoryItem::children(v20);
    if (!*(_DWORD *)(v9 + 12)
      || *((unsigned __int8 *)this + 81) - 1 > 2
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296) + 3387))
    {
      goto LABEL_21;
    }
    WebCore::FrameTree::uniqueName((uint64_t)a4 + 48, v21, (WTF::AtomString *)buf);
    v42 = (WebCore::HistoryItem *)WebCore::HistoryItem::childItemWithTarget((uint64_t)v20, buf);
    v44 = v42;
    if (v42)
      ++*(_DWORD *)v42;
    v9 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        v9 = WTF::StringImpl::destroy((WTF::StringImpl *)v9, v43);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (v44)
    {
      v45 = *((_QWORD *)a4 + 35);
      ++*(_DWORD *)v45;
      WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>::operator=((WebCore::HistoryItem **)(v45 + 392), v44);
      WebCore::FrameLoader::loadDifferentDocumentItem(v45, (uint64_t)v44, 0, *((unsigned __int8 *)this + 81), 0, 0);
      if (*(_DWORD *)v45)
      {
        --*(_DWORD *)v45;
        WTF::RefCounted<WebCore::HistoryItem>::deref(v44, v46);
        goto LABEL_41;
      }
    }
    else
    {
LABEL_21:
      v22 = WebCore::lexicalFrameFromCommonVM((WebCore *)v9);
      v24 = v22;
      if (v22)
      {
        v25 = (unsigned int *)(v22 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
        v27 = *(_QWORD *)(*(_QWORD *)(v22 + 128) + 8) != v22;
      }
      else
      {
        v27 = 1;
      }
      v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
      if (v28)
        *(_DWORD *)(v28 + 24) += 2;
      v51 = (_DWORD *)v28;
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v28 + 192), v23);
      v30 = v29;
      v31 = (WebCore *)WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v47, (uint64_t)a2, 0);
      v47[24] = 0;
      v32 = WebCore::selfTargetFrameName(v31);
      WTF::AtomString::AtomString(&v50, (uint64_t)v32, v33);
      v49 = 0;
      WebCore::FrameLoadRequest::FrameLoadRequest((uint64_t)buf, (uint64_t *)&v51, v30, (uint64_t)v47, (_DWORD **)&v50, v27, &v49);
      v35 = v50;
      v50 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v34);
        else
          *(_DWORD *)v35 -= 2;
      }
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v47, v34);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v51);
      v60 = 0;
      v59 = 1;
      v61 = 1;
      v36 = (_DWORD *)*((_QWORD *)a4 + 35);
      ++*v36;
      v51 = 0;
      LOBYTE(v47[0]) = 0;
      v48 = 0;
      v37 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v37 = off_1E33F5EC0;
      v50 = v37;
      WebCore::FrameLoader::loadURL((uint64_t)v36, (WTF::StringImpl **)buf, a3, 6, 0, (uint64_t *)&v51, (const WebCore::Document *)v47, (uint64_t *)&v50);
      if (v50)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v50 + 8))(v50);
      if (v48)
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v47, v38);
      v39 = v51;
      v51 = 0;
      if (v39)
      {
        if (v39[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 24))(v39);
        else
          --v39[6];
      }
      if (*v36)
      {
        --*v36;
        WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)buf, v38);
        if (v24)
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v24 + 8));
        if (!v20)
          return;
LABEL_41:
        WTF::RefCounted<WebCore::HistoryItem>::deref(v20, v40);
        return;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1945AA69CLL);
  }
}

uint64_t WebCore::FrameLoader::FrameProgressTracker::progressCompleted(WebCore::FrameLoader::FrameProgressTracker *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  WebCore::Page *v5;
  char v6;
  WebCore::ProgressTracker *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;

  *((_BYTE *)this + 16) = 0;
  v1 = *(unsigned int **)(*((_QWORD *)this + 1) + 8);
  v2 = v1 + 2;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = *((_QWORD *)v1 + 3);
  if (v4)
  {
    v5 = *(WebCore::Page **)(v4 + 8);
    if (v5)
    {
      v6 = 0;
      ++*(_DWORD *)v5;
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 1;
LABEL_6:
  v7 = (WebCore::ProgressTracker *)*((_QWORD *)v5 + 16);
  ++*(_DWORD *)v7;
  WebCore::ProgressTracker::progressCompleted(v7, (WebCore::LocalFrame *)v1);
  if (!*(_DWORD *)v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1945AA814);
  }
  --*(_DWORD *)v7;
  v8 = WebCore::s_platformStrategies;
  v9 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v9)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
    *(_QWORD *)(v8 + 8) = v9;
  }
  result = (*(uint64_t (**)(uint64_t, WebCore::Page *))(*(_QWORD *)v9 + 16))(v9, v5);
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Page::~Page(v5);
      result = WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  do
  {
    v11 = __ldaxr(v2);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v2));
  if (!v12)
  {
    atomic_store(1u, v2);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E31FE290;
    v15[1] = v2;
    v16 = (uint64_t)v15;
    WTF::ensureOnMainThread();
    result = v16;
    if (v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return result;
}

uint64_t *WebCore::FrameLoader::prepareForLoadStart(WebCore::FrameLoader *this)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WebCore::Page *v12;
  WebCore::ProgressTracker *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *result;
  unsigned __int8 v17;
  WTF *v18;
  void *v19;
  uint64_t *v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE v28[12];
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  _BOOL4 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
    v4 = v3[3];
    if (v4)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 40))
          v4 = *(_QWORD *)(v4 + 32);
        else
          v4 = 0;
      }
    }
    v5 = v3[4];
    v6 = *(_QWORD *)(v3[16] + 8) == (_QWORD)v3;
    *(_DWORD *)v28 = 134218752;
    *(_QWORD *)&v28[4] = this;
    v29 = 2048;
    v30 = v4;
    v31 = 2048;
    v32 = v5;
    v33 = 1024;
    v34 = v6;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::prepareForLoadStart: Starting frame load", v28, 0x26u);
  }
  v7 = *((_QWORD *)this + 9);
  if (!*(_BYTE *)(v7 + 16))
  {
    v8 = *(unsigned int **)(*(_QWORD *)(v7 + 8) + 8);
    v9 = v8 + 2;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *((_QWORD *)v8 + 3);
    if (v11)
    {
      v12 = *(WebCore::Page **)(v11 + 8);
      if (v12)
        ++*(_DWORD *)v12;
    }
    else
    {
      v12 = 0;
    }
    v13 = (WebCore::ProgressTracker *)*((_QWORD *)v12 + 16);
    ++*(_DWORD *)v13;
    WebCore::ProgressTracker::progressStarted(v13, (WebCore::LocalFrame *)v8);
    if (!*(_DWORD *)v13)
      goto LABEL_32;
    --*(_DWORD *)v13;
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::Page::~Page(v12);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v12;
    }
    do
    {
      v14 = __ldaxr(v9);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v9));
    if (!v15)
    {
      atomic_store(1u, v9);
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v26 = off_1E31FE290;
      v26[1] = v9;
      *(_QWORD *)v28 = v26;
      WTF::ensureOnMainThread();
      v27 = *(_QWORD *)v28;
      *(_QWORD *)v28 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
  }
  *(_BYTE *)(v7 + 16) = 1;
  result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 288))(*((_QWORD *)this + 2));
  v17 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v17 & 1) != 0)
  {
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      result = (uint64_t *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8)
                                                                                             + 296));
      if (result)
      {
        v20 = result;
        ++*((_DWORD *)result + 2);
        v21 = *((unsigned __int8 *)this + 81) == 4;
        v22 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
        v23 = (unsigned int *)(v22 + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 + 1, v23));
        *(_QWORD *)v28 = v22;
        WebCore::AXObjectCache::frameLoadingEventNotification((WebCore::AXObjectCache *)result, v22, v21);
        result = WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)v28);
        v25 = *((_DWORD *)v20 + 2);
        if (v25)
        {
          *((_DWORD *)v20 + 2) = v25 - 1;
          return result;
        }
LABEL_32:
        __break(0xC471u);
        JUMPOUT(0x1945AAAD8);
      }
    }
  }
  return result;
}

uint64_t WebCore::FrameLoader::stopAllLoaders(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::DocumentLoader *v32;
  WebCore::DocumentLoader *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  WebCore::HistoryItem *v48;
  WTF *v49;
  void *v50;
  _DWORD *v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  _BYTE v59[12];
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  _BOOL4 v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;

  v4 = result;
  v70 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)(*(_QWORD *)(result + 8) + 8);
  v6 = v5[37];
  if ((!v6 || *(_BYTE *)(v6 + 3362) != 2) && (a3 || !*(_DWORD *)(result + 212)) && !*(_BYTE *)(result + 154))
  {
    if (WebCore::ScriptDisallowedScope::s_count)
    {
      v7 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 0;
      if (v7 && !webThreadDelegateMessageScopeCount)
      {
        __break(0xC471u);
        JUMPOUT(0x1945AB054);
      }
    }
    v8 = (unsigned int *)(v5 + 1);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    *(_BYTE *)(result + 154) = 1;
    WebCore::PolicyChecker::stopCheck(*(WebCore::PolicyChecker **)(result + 24));
    if ((_DWORD)a2)
    {
      v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 184);
      v47 = *(_DWORD *)v46 + 1;
      *(_DWORD *)v46 = v47;
      v48 = *(WebCore::HistoryItem **)(v46 + 32);
      *(_QWORD *)(v46 + 32) = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 1)
        {
          WebCore::HistoryItem::~HistoryItem(v48);
          WTF::fastFree(v49, v50);
        }
        else
        {
          --*(_DWORD *)v48;
        }
        v47 = *(_DWORD *)v46;
      }
      if (!v47)
      {
        __break(0xC471u);
        JUMPOUT(0x1945AB148);
      }
      *(_DWORD *)v46 = v47 - 1;
    }
    v10 = v5[11];
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      do
      {
        if (!*(_BYTE *)(v10 + 144))
        {
          v13 = (unsigned int *)(v10 + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
          v15 = *(_DWORD **)(v10 + 280);
          ++*v15;
          WebCore::FrameLoader::stopAllLoaders(v15, a2, 0);
          if (!*v15)
          {
            __break(0xC471u);
            JUMPOUT(0x1945AB074);
          }
          --*v15;
          do
          {
            v16 = __ldaxr(v13);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v13));
          if (!v17)
          {
            atomic_store(1u, v13);
            v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v55 = off_1E31FE290;
            v55[1] = v13;
            *(_QWORD *)v59 = v55;
            WTF::ensureOnMainThread();
            v56 = *(_QWORD *)v59;
            *(_QWORD *)v59 = 0;
            if (v56)
              (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
          }
        }
        v18 = *(_QWORD *)(v10 + 72);
        if (v18)
        {
          v19 = (unsigned int *)(v18 + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 + 1, v19));
        }
        v21 = (unsigned int *)(v10 + 8);
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v53 = off_1E31FE290;
          v53[1] = v21;
          *(_QWORD *)v59 = v53;
          WTF::ensureOnMainThread();
          v54 = *(_QWORD *)v59;
          *(_QWORD *)v59 = 0;
          if (v54)
            (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
        }
        v10 = v18;
      }
      while (v18);
    }
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 296);
    if ((*(_QWORD *)(*(_QWORD *)(v24 + 680) + 688) & 0x4000) != 0)
    {
      v51 = *(_DWORD **)(v24 + 696);
      if (v51)
      {
        ++v51[6];
        WebCore::LocalDOMWindow::protectedNavigation((uint64_t)v51, (uint64_t *)v59);
        WebCore::Navigation::abortOngoingNavigationIfNeeded(*(uint64_t *)v59);
        WTF::Ref<WebCore::Navigation,WTF::RawPtrTraits<WebCore::Navigation>,WTF::DefaultRefDerefTraits<WebCore::Navigation>>::~Ref((WebCore::Navigation **)v59, v52);
        if (v51[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 72))(v51);
        else
          --v51[6];
      }
      else
      {
        WebCore::LocalDOMWindow::protectedNavigation(0, (uint64_t *)v59);
        WebCore::Navigation::abortOngoingNavigationIfNeeded(*(uint64_t *)v59);
        WTF::Ref<WebCore::Navigation,WTF::RawPtrTraits<WebCore::Navigation>,WTF::DefaultRefDerefTraits<WebCore::Navigation>>::~Ref((WebCore::Navigation **)v59, v58);
      }
    }
    v25 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *(_QWORD **)(*(_QWORD *)(v4 + 8) + 8);
      v27 = v26[3];
      if (v27)
      {
        v27 = *(_QWORD *)(v27 + 8);
        if (v27)
        {
          if (*(_BYTE *)(v27 + 40))
            v27 = *(_QWORD *)(v27 + 32);
          else
            v27 = 0;
        }
      }
      v28 = v26[4];
      v29 = *(_QWORD *)(v26[16] + 8) == (_QWORD)v26;
      v31 = *(_QWORD *)(v4 + 88);
      v30 = *(_QWORD *)(v4 + 96);
      *(_DWORD *)v59 = 134219264;
      *(_QWORD *)&v59[4] = v4;
      v60 = 2048;
      v61 = v27;
      v62 = 2048;
      v63 = v28;
      v64 = 1024;
      v65 = v29;
      v66 = 2048;
      v67 = v30;
      v68 = 2048;
      v69 = v31;
      _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::stopAllLoaders: m_provisionalDocumentLoader=%p, m_documentLoader=%p", v59, 0x3Au);
    }
    v32 = *(WebCore::DocumentLoader **)(v4 + 96);
    if (v32)
    {
      ++*((_DWORD *)v32 + 6);
      WebCore::DocumentLoader::stopLoading(v32);
      if (*((_DWORD *)v32 + 6) == 1)
        (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v32 + 24))(v32);
      else
        --*((_DWORD *)v32 + 6);
    }
    v33 = *(WebCore::DocumentLoader **)(v4 + 88);
    if (v33)
    {
      ++*((_DWORD *)v33 + 6);
      WebCore::DocumentLoader::stopLoading(v33);
      if (*((_DWORD *)v33 + 6) == 1)
        (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v33 + 24))(v33);
      else
        --*((_DWORD *)v33 + 6);
    }
    v34 = v5[3];
    if (v34)
    {
      v35 = *(_QWORD *)(v34 + 8);
      if (v35)
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v35 + 48) + 16) + 1352))(*(_QWORD *)(*(_QWORD *)(v35 + 48) + 16)) & 1) == 0)
        {
          v36 = WebCore::s_platformStrategies;
          v37 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
          if (!v37)
          {
            v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
            *(_QWORD *)(v36 + 8) = v37;
          }
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v37 + 24))(v37, v5);
        }
      }
    }
    v38 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v39 = *(_QWORD **)(*(_QWORD *)(v4 + 8) + 8);
      v40 = v39[3];
      if (v40)
      {
        v40 = *(_QWORD *)(v40 + 8);
        if (v40)
        {
          if (*(_BYTE *)(v40 + 40))
            v40 = *(_QWORD *)(v40 + 32);
          else
            v40 = 0;
        }
      }
      v41 = v39[4];
      v42 = *(_QWORD *)(v39[16] + 8) == (_QWORD)v39;
      v43 = *(_QWORD *)(v4 + 96);
      *(_DWORD *)v59 = 134219008;
      *(_QWORD *)&v59[4] = v4;
      v60 = 2048;
      v61 = v40;
      v62 = 2048;
      v63 = v41;
      v64 = 1024;
      v65 = v42;
      v66 = 2048;
      v67 = v43;
      _os_log_impl(&dword_1940B8000, v38, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::stopAllLoaders: Clearing provisional document loader (m_provisionalDocumentLoader=%p)", v59, 0x30u);
    }
    *(_QWORD *)v59 = 0;
    WebCore::FrameLoader::setProvisionalDocumentLoader(v4, (uint64_t *)v59);
    result = *(_QWORD *)v59;
    if (*(_QWORD *)v59)
    {
      if (*(_DWORD *)(*(_QWORD *)v59 + 24) == 1)
        result = (*(uint64_t (**)(void))(**(_QWORD **)v59 + 24))();
      else
        --*(_DWORD *)(*(_QWORD *)v59 + 24);
    }
    *(_BYTE *)(v4 + 154) = 0;
    do
    {
      v44 = __ldaxr(v8);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v8));
    if (!v45)
    {
      atomic_store(1u, v8);
      v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v57 = off_1E31FE290;
      v57[1] = v8;
      *(_QWORD *)v59 = v57;
      WTF::ensureOnMainThread();
      result = *(_QWORD *)v59;
      *(_QWORD *)v59 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *WebCore::FrameLoader::didChangeTitle(WebCore::FrameLoader *this, WebCore::DocumentLoader *a2)
{
  uint64_t *result;
  WTF::StringImpl *v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t (*v12)();
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  WTF *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  Inspector::RemoteControllableTarget **v24;
  WTF::StringImpl *v25;
  __int128 v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 488))(*((_QWORD *)this + 2));
  if (*((WebCore::DocumentLoader **)this + 11) == a2)
  {
    v6 = (_DWORD **)((char *)a2 + 1608);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 184) + 16);
    if (v7)
    {
      ++*(_DWORD *)v7;
      v8 = *v6;
      if (*v6)
        *v8 += 2;
      v9 = *(WTF::StringImpl **)(v7 + 72);
      *(_QWORD *)(v7 + 72) = v8;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v5);
        else
          *(_DWORD *)v9 -= 2;
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 472) + 16))(*(_QWORD *)(v7 + 472), v7);
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::HistoryItem::~HistoryItem((WebCore::HistoryItem *)v7, v10);
        WTF::fastFree(v19, v20);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
    v11 = *((_QWORD *)this + 2);
    v12 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
    if (!*((_QWORD *)a2 + 45))
      v12 = 0;
    if (v12 && *((_BYTE *)a2 + 664))
    {
      v25 = (WTF::StringImpl *)*((_QWORD *)a2 + 46);
      if (v25)
        *(_DWORD *)v25 += 2;
      v27 = v25;
      v26 = *(_OWORD *)((char *)a2 + 392);
      v28 = *(_OWORD *)((char *)a2 + 376);
      v29 = v26;
    }
    else
    {
      v13 = (WTF::StringImpl **)((char *)a2 + 672);
      if ((*((_BYTE *)a2 + 856) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)a2 + 672));
        *((_BYTE *)a2 + 856) |= 1u;
      }
      v14 = *v13;
      if (*v13)
        *(_DWORD *)v14 += 2;
      v27 = v14;
      v15 = *(_OWORD *)((char *)a2 + 696);
      v28 = *(_OWORD *)((char *)a2 + 680);
      v29 = v15;
    }
    (*(void (**)(uint64_t, char *, WTF::StringImpl **))(*(_QWORD *)v11 + 776))(v11, (char *)a2 + 1608, &v27);
    v17 = v27;
    v27 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 464))(*((_QWORD *)this + 2), 1);
    result = (uint64_t *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 2) + 296))(*((_QWORD *)this + 2), (char *)a2 + 1608);
  }
  v18 = *(unsigned int **)(*((_QWORD *)this + 1) + 8);
  if (*(unsigned int **)(*((_QWORD *)v18 + 16) + 8) == v18)
  {
    v21 = v18 + 2;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    v27 = (WTF::StringImpl *)v18;
    v23 = *((_QWORD *)v18 + 3);
    if (v23 && (v24 = *(Inspector::RemoteControllableTarget ***)(v23 + 8)) != 0)
    {
      ++*(_DWORD *)v24;
      WebCore::Page::remoteInspectorInformationDidChange(v24);
      WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v24);
    }
    else
    {
      WebCore::Page::remoteInspectorInformationDidChange(0);
    }
    return WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)&v27);
  }
  return result;
}

uint64_t WebCore::FrameLoader::SubframeLoader::loadOrRedirectSubframe(uint64_t a1, WebCore::SubframeLoadingDisabler *a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  const WTF::String *v25;
  const WTF::URL *v26;
  const WTF::URL *v27;
  WebCore::HTMLFrameOwnerElement *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WebCore::Page *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::FrameLoader *v35;
  WTF::MonotonicTime *v36;
  void *v37;
  int v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  WebCore::FrameLoader *v42;
  WebCore::LocalFrame *v43;
  WTF::StringImpl *v44;
  WebCore::LocalFrame *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  unsigned int *v51;
  unsigned int v52;
  WebCore::LocalFrame *v53;
  WTF::StringImpl *v54;
  int v55;
  WebCore::LocalFrame *v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  WebCore::Page *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD *v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  WTF::StringImpl **v68;
  WTF::StringImpl *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  unsigned int v75;
  WebCore::LocalFrame *v76;
  _DWORD *v77;
  void *v78;
  uint64_t v79;
  int v80;
  char v81;
  WTF::StringImpl *v82;
  int v83;
  int v84;
  WebCore::FrameLoader *v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  void *v89;
  unsigned int v90;
  unsigned int v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  WTF::StringImpl *v98;
  uint64_t v100;
  WebCore::FrameLoader *v101;
  WTF::StringImpl **v102;
  uint64_t v103;
  WebCore::LocalFrame *v104;
  WTF::StringImpl **v105;
  WebCore::LocalFrame *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  WTF::StringImpl **v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119[5];
  WTF::StringImpl *v120;
  __int128 v121;
  __int128 v122;
  WTF::StringImpl *v123;
  WebCore::LocalFrame *v124;
  WTF::StringImpl **v125;

  v11 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v12 += 2;
  v120 = v12;
  v121 = *(_OWORD *)(a3 + 8);
  v122 = *(_OWORD *)(a3 + 24);
  v13 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v11 + 192));
  if (v13)
  {
    v14 = v13;
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 + 1, v13));
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v13, (WebCore::SecurityOriginData *)&v120, 0, 0);
    if (!atomic_load(v14))
    {
      __break(0xC471u);
      JUMPOUT(0x1945ABD14);
    }
    do
      v17 = __ldaxr(v14);
    while (__stlxr(v17 - 1, v14));
  }
  else
  {
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded(0, (WebCore::SecurityOriginData *)&v120, 0, 0);
  }
  v18 = *((_QWORD *)a2 + 14);
  if (v18)
  {
    v43 = *(WebCore::LocalFrame **)(v18 + 8);
    if (v43)
    {
      v51 = (unsigned int *)((char *)v43 + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 + 1, v51));
      v53 = (WebCore::LocalFrame *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v53 = off_1E33F77F8;
      v124 = v53;
      if (WTF::URL::protocolIsJavaScript((WTF::URL *)&v120))
      {
        v103 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
        *(_DWORD *)(v103 + 24) += 2;
        ++*(_DWORD *)(v103 + 3328);
        v119[0] = 0;
        v125 = (WTF::StringImpl **)v103;
        v104 = (WebCore::LocalFrame *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v104 = &off_1E33F7820;
        v105 = v125;
        v125 = 0;
        *((_QWORD *)v104 + 1) = v105;
        v106 = v124;
        v124 = v104;
        if (v106)
          (*(void (**)(WebCore::LocalFrame *))(*(_QWORD *)v106 + 8))(v106);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v125);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v119);
      }
      v55 = *((unsigned __int8 *)v43 + 144);
      if (*((_BYTE *)v43 + 144))
        v56 = 0;
      else
        v56 = v43;
      if (v56)
      {
        v57 = (unsigned int *)((char *)v56 + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 + 1, v57));
        if (v55)
        {
LABEL_63:
          v61 = (unsigned int *)((char *)v56 + 8);
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
          {
            atomic_store(1u, v61);
            v112 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v112 = off_1E31FE290;
            *((_QWORD *)v112 + 1) = v61;
            v119[0] = v112;
            WTF::ensureOnMainThread();
            v113 = v119[0];
            v119[0] = 0;
            if (v113)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v113 + 8))(v113);
          }
          goto LABEL_66;
        }
      }
      else if (*((_BYTE *)v43 + 144))
      {
LABEL_66:
        v64 = (_QWORD *)*((_QWORD *)v43 + 19);
        ++*(_DWORD *)v64;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v11 + 192), v54);
        v66 = v65;
        if (v65)
        {
          do
            v67 = __ldaxr(v65);
          while (__stlxr(v67 + 1, v65));
        }
        WebCore::FrameLoader::nonSrcdocFrame(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 280), (uint64_t *)&v125);
        v68 = v125;
        if (v125)
        {
          v69 = (WTF::StringImpl *)*((_QWORD *)v125[35] + 20);
          if (v69)
            *(_DWORD *)v69 += 2;
          v123 = v69;
          v125 = 0;
          v70 = (unsigned int *)(v68 + 1);
          do
          {
            v71 = __ldaxr(v70);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, v70));
          if (!v72)
          {
            atomic_store(1u, v70);
            v117 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v117 = off_1E31FE290;
            *((_QWORD *)v117 + 1) = v70;
            v119[0] = v117;
            WTF::ensureOnMainThread();
            v118 = v119[0];
            v119[0] = 0;
            if (v118)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v118 + 8))(v118);
          }
        }
        else
        {
          v107 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *(_DWORD *)v107 += 2;
          v123 = v107;
        }
        WebCore::NavigationScheduler::scheduleLocationChange(v64, (WebCore::Document *)v11, v66, (WTF::URL *)&v120, &v123, a5, a6, 0, (uint64_t *)&v124);
        v73 = v123;
        v123 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2)
            WTF::StringImpl::destroy(v73, v29);
          else
            *(_DWORD *)v73 -= 2;
        }
        do
        {
          v74 = __ldaxr(v66);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, v66));
        if (!v75)
        {
          atomic_store(1u, v66);
          v114 = (WTF::StringImpl *)*((_QWORD *)v66 + 6);
          *((_QWORD *)v66 + 6) = 0;
          if (v114)
          {
            if (*(_DWORD *)v114 == 2)
              WTF::StringImpl::destroy(v114, v29);
            else
              *(_DWORD *)v114 -= 2;
          }
          v115 = (WTF::StringImpl *)*((_QWORD *)v66 + 5);
          *((_QWORD *)v66 + 5) = 0;
          if (v115)
          {
            if (*(_DWORD *)v115 == 2)
              WTF::StringImpl::destroy(v115, v29);
            else
              *(_DWORD *)v115 -= 2;
          }
          v116 = v66[8];
          if ((_DWORD)v116 != -1)
            ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33F7728[v116])(v119, v66 + 2);
          v66[8] = -1;
          WTF::fastFree((WTF *)v66, v29);
        }
        if (!*(_DWORD *)v64)
        {
          __break(0xC471u);
          JUMPOUT(0x1945ABEA4);
        }
        --*(_DWORD *)v64;
        v76 = v124;
        v124 = 0;
        if (v76)
          (*(void (**)(WebCore::LocalFrame *))(*(_QWORD *)v76 + 8))(v76);
        goto LABEL_122;
      }
      if (*(_BYTE *)(*((_QWORD *)v43 + 35) + 216))
      {
        v59 = *((_QWORD *)v43 + 3);
        if (v59)
        {
          v60 = *(WebCore::Page **)(v59 + 8);
          if (v60)
          {
            ++*(_DWORD *)v60;
            WebCore::Page::willChangeLocationInCompletelyLoadedSubframe(v60);
            if (*(_DWORD *)v60 == 1)
            {
              WebCore::Page::~Page((uint64_t)v60);
              WTF::fastFree(v88, v89);
            }
            else
            {
              --*(_DWORD *)v60;
            }
          }
        }
      }
      goto LABEL_63;
    }
  }
  WebCore::FrameLoader::outgoingReferrerURL(*(WebCore::FrameLoader **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 280), (uint64_t)v119);
  v20 = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 8);
  v21 = v20 + 2;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  v23 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_DWORD *)(v23 + 24) += 2;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v23 + 192), v19);
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  if ((WebCore::SecurityOrigin::canDisplay(v24, (WTF::URL *)&v120, (uint64_t (***)(_QWORD, WebCore::SecurityOrigin *))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance) & 1) == 0)
  {
    WebCore::FrameLoader::reportLocalLoadFailed((uint64_t)v20, (WebCore::LocalFrame *)&v120, v25);
    goto LABEL_112;
  }
  if (!WTF::portAllowed() || WebCore::isIPAddressDisallowed((WebCore *)&v120, v26))
  {
    WebCore::FrameLoader::reportBlockedLoadFailed((WebCore::FrameLoader *)v20, (WebCore::LocalFrame *)&v120, v27);
LABEL_112:
    v43 = 0;
    goto LABEL_113;
  }
  if (!WebCore::SubframeLoadingDisabler::canLoadFrame(a2, v28))
    goto LABEL_112;
  v30 = *((_QWORD *)v20 + 3);
  if (!v30)
    goto LABEL_112;
  v31 = *(WebCore::Page **)(v30 + 8);
  if (!v31
    || WebCore::Page::subframeCount(v31) > 0x3E7
    || WebCore::FrameTree::depth((WebCore::FrameTree *)(v20 + 12)) > 0x1F)
  {
    goto LABEL_112;
  }
  ++*(_DWORD *)(v23 + 3328);
  (*(void (**)(WebCore::LocalFrame **__return_ptr, _QWORD, uint64_t, WebCore::SubframeLoadingDisabler *))(**(_QWORD **)(*((_QWORD *)v20 + 35) + 16) + 864))(&v124, *(_QWORD *)(*((_QWORD *)v20 + 35) + 16), a4, a2);
  if (!v124)
  {
    v101 = (WebCore::FrameLoader *)*((_QWORD *)v20 + 35);
    ++*(_DWORD *)v101;
    WebCore::FrameLoader::checkCallImplicitClose(v101, v32);
    if (!*(_DWORD *)v101)
    {
      __break(0xC471u);
      JUMPOUT(0x1945ABFF8);
    }
    --*(_DWORD *)v101;
    WebCore::Document::decrementLoadEventDelayCount((WebCore::Document *)v23);
    v43 = 0;
    goto LABEL_41;
  }
  v33 = (*(uint64_t (**)(WebCore::SubframeLoadingDisabler *))(*(_QWORD *)a2 + 1264))(a2);
  if (!(_DWORD)v33)
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v23 + 192) + 8))(v23 + 192);
  v34 = v33;
  if (WTF::URL::isAboutBlank((WTF::URL *)&v120))
  {
    v102 = (WTF::StringImpl **)v119[0];
    if (v119[0])
      *(_DWORD *)v119[0] += 2;
    v125 = v102;
  }
  else
  {
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    WebCore::SecurityPolicy::generateReferrerHeader((WebCore::SecurityPolicy *)&v120, (WTF::StringImpl ***)v119, v34, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, &v125);
  }
  v35 = (WebCore::FrameLoader *)*((_QWORD *)v20 + 35);
  ++*(_DWORD *)v35;
  WebCore::FrameLoader::loadURLIntoChildFrame(v35, &v120, (WTF::StringImpl **)&v125, v124);
  if (!*(_DWORD *)v35)
  {
    __break(0xC471u);
    JUMPOUT(0x1945ABF08);
  }
  --*(_DWORD *)v35;
  v38 = *(_DWORD *)(v23 + 3328) - 1;
  *(_DWORD *)(v23 + 3328) = v38;
  v39 = *(_QWORD *)(v23 + 528);
  if (v39
    && *(_QWORD *)(v39 + 8)
    && !v38
    && ((*(_QWORD *)(v23 + 2152) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*(_QWORD *)(v23 + 2152) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
  {
    *(_QWORD *)(v23 + 2144) = 0;
    WTF::MonotonicTime::now(v36);
    WebCore::TimerBase::setNextFireTime(v23 + 2120, v40 + 0.0);
  }
  if (!v124 || (v41 = *((_QWORD *)v124 + 7)) == 0 || !*(_QWORD *)(v41 + 8))
  {
    v42 = (WebCore::FrameLoader *)*((_QWORD *)v20 + 35);
    ++*(_DWORD *)v42;
    WebCore::FrameLoader::checkCallImplicitClose(v42, v37);
    if (!*(_DWORD *)v42)
    {
      __break(0xC471u);
      JUMPOUT(0x1945ABF28);
    }
    v43 = 0;
    --*(_DWORD *)v42;
    goto LABEL_38;
  }
  v77 = (_DWORD *)*((_QWORD *)v124 + 35);
  ++*v77;
  WebCore::FrameLoader::started((uint64_t)v77);
  if (!*v77)
  {
    __break(0xC471u);
    JUMPOUT(0x1945ABF48);
  }
  --*v77;
  v79 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (v79)
  {
    if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1945ABFC8);
    }
    v80 = (*(unsigned __int8 *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      v80 = 0;
    if (v80 == 1)
    {
      v81 = 0;
      ++*(_DWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
      goto LABEL_92;
    }
    v79 = 0;
  }
  v81 = 1;
LABEL_92:
  v82 = (WTF::StringImpl *)*((_QWORD *)v124 + 36);
  if (v82)
  {
    v83 = *((_DWORD *)v82 + 2);
    *((_DWORD *)v82 + 2) = v83 + 1;
    if (v79)
    {
      v123 = v82;
      WebCore::RenderWidget::setWidget(v79, (uint64_t *)&v123);
      v82 = v123;
      v123 = 0;
      if (!v82)
        goto LABEL_96;
      v83 = *((_DWORD *)v82 + 2) - 1;
      if (*((_DWORD *)v82 + 2) != 1)
        goto LABEL_95;
    }
    else if (v83)
    {
LABEL_95:
      *((_DWORD *)v82 + 2) = v83;
      goto LABEL_96;
    }
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v82 + 8))(v82);
  }
LABEL_96:
  if ((v81 & 1) == 0)
  {
    v84 = *(_DWORD *)(v79 + 16);
    if (!v84)
    {
      __break(0xC471u);
      JUMPOUT(0x1945ABF68);
    }
    *(_DWORD *)(v79 + 16) = v84 - 1;
  }
  v85 = (WebCore::FrameLoader *)*((_QWORD *)v20 + 35);
  ++*(_DWORD *)v85;
  WebCore::FrameLoader::checkCallImplicitClose(v85, v78);
  if (!*(_DWORD *)v85)
  {
    __break(0xC471u);
    JUMPOUT(0x1945ABF88);
  }
  --*(_DWORD *)v85;
  v43 = v124;
  v86 = *((_QWORD *)v124 + 35);
  if (*(_BYTE *)(v86 + 80) == 2 && !*(_QWORD *)(v86 + 104))
  {
    ++*(_DWORD *)v86;
    WebCore::FrameLoader::checkCompleted((WebCore::FrameLoader *)v86, v29);
    if (!*(_DWORD *)v86)
    {
      __break(0xC471u);
      JUMPOUT(0x1945ABFA8);
    }
    --*(_DWORD *)v86;
    v43 = v124;
  }
  v87 = *((_QWORD *)v43 + 7);
  if (v87 && *(_QWORD *)(v87 + 8))
    v124 = 0;
  else
    v43 = 0;
LABEL_38:
  v44 = (WTF::StringImpl *)v125;
  v125 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v29);
    else
      *(_DWORD *)v44 -= 2;
  }
LABEL_41:
  v45 = v124;
  v124 = 0;
  if (v45)
  {
    v46 = (unsigned int *)((char *)v45 + 8);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v46);
      v49 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v49 = off_1E31FE290;
      *(_QWORD *)(v49 + 8) = v46;
      v125 = (WTF::StringImpl **)v49;
      WTF::ensureOnMainThread();
      v50 = v125;
      v125 = 0;
      if (v50)
        (*((void (**)(WTF::StringImpl **))*v50 + 1))(v50);
    }
  }
LABEL_113:
  if (*(_DWORD *)(v23 + 24) == 2)
  {
    if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v23, v29);
  }
  else
  {
    *(_DWORD *)(v23 + 24) -= 2;
  }
  if (v20)
  {
    do
    {
      v90 = __ldaxr(v21);
      v91 = v90 - 1;
    }
    while (__stlxr(v91, v21));
    if (!v91)
    {
      atomic_store(1u, v21);
      v110 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v110 = off_1E31FE290;
      *(_QWORD *)(v110 + 8) = v21;
      v125 = (WTF::StringImpl **)v110;
      WTF::ensureOnMainThread();
      v111 = v125;
      v125 = 0;
      if (v111)
        (*((void (**)(WTF::StringImpl **))*v111 + 1))(v111);
    }
  }
  v92 = v119[0];
  v119[0] = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
      WTF::StringImpl::destroy(v92, v29);
    else
      *(_DWORD *)v92 -= 2;
  }
  if (!v43)
  {
    v94 = 0;
    goto LABEL_127;
  }
LABEL_122:
  v93 = *((_QWORD *)a2 + 14);
  if (v93 && (v100 = *(_QWORD *)(v93 + 8)) != 0)
  {
    if (*(_BYTE *)(v100 + 144))
      v94 = 0;
    else
      v94 = v100;
  }
  else
  {
    v94 = 0;
  }
  v95 = (unsigned int *)((char *)v43 + 8);
  do
  {
    v96 = __ldaxr(v95);
    v97 = v96 - 1;
  }
  while (__stlxr(v97, v95));
  if (!v97)
  {
    atomic_store(1u, v95);
    v108 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v108 = off_1E31FE290;
    *((_QWORD *)v108 + 1) = v95;
    v119[0] = v108;
    WTF::ensureOnMainThread();
    v109 = v119[0];
    v119[0] = 0;
    if (v109)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v109 + 8))(v109);
  }
LABEL_127:
  v98 = v120;
  v120 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
      WTF::StringImpl::destroy(v98, v29);
    else
      *(_DWORD *)v98 -= 2;
  }
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v29);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  return v94;
}

BOOL WebCore::FrameLoader::SubframeLoader::requestFrame(uint64_t a1, WebCore *a2, _QWORD *a3, uint64_t a4, char a5, char a6)
{
  uint64_t v11;
  WTF *Ref;
  void *v13;
  const WTF::URL *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v19;
  uint64_t canLoadJavaScriptURL;
  uint64_t v21;
  WTF::StringImpl *v22;
  char v23;

  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296);
  if (v11)
  {
    *(_DWORD *)(v11 + 24) += 2;
    Ref = WebCore::Document::completeURL((WebCore::Document *)v11, a3, v11 + 848, 0, (WTF::URL *)&v22);
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        Ref = (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v11, v13);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  else
  {
    Ref = WebCore::Document::completeURL(0, a3, 848, 0, (WTF::URL *)&v22);
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 136) + 696) & 0x1000) != 0
    && (v23 & 1) == 0)
  {
    v19 = WTF::aboutBlankURL(Ref);
    WTF::URL::operator=((uint64_t)&v22, v19);
  }
  if (WTF::URL::protocolIsJavaScript((WTF::URL *)&v22))
  {
    canLoadJavaScriptURL = WebCore::canLoadJavaScriptURL(a2, (uint64_t (**)())&v22, v14);
    if ((canLoadJavaScriptURL & 1) == 0)
    {
      v21 = WTF::aboutBlankURL((WTF *)canLoadJavaScriptURL);
      WTF::URL::operator=((uint64_t)&v22, v21);
    }
  }
  v16 = WebCore::FrameLoader::SubframeLoader::loadOrRedirectSubframe(a1, a2, (uint64_t)&v22, a4, a5, a6);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  return v16 != 0;
}

BOOL WebCore::FrameLoader::shouldClose(WebCore::FrameLoader *this)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  WebCore::Page *v6;
  void *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  BOOL v49;
  unsigned int v50;
  unsigned int v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v59;
  unsigned int v60;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  WebCore::FrameLoader *v66;
  int v67;
  int v68;
  WebCore::Document *v69;
  WebCore::LocalDOMWindow *v70;
  WebCore::Chrome *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  WebCore *v77;
  WebCore *v78;
  uint64_t v79;
  WebCore *v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  int v84;
  uint64_t v85;
  WebCore::Page *v86;
  uint64_t v87;
  void *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  WebCore::Page *v93;
  int v94;
  uint64_t v95;
  WebCore::Page *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  WebCore::LocalDOMWindow *v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int *v117;
  WebCore::Page *v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  WebCore::Page *v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  WebCore::Document *i;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  WebCore::Document *v131;
  WTF *v132;
  void *v133;
  uint64_t v134;
  WebCore::LocalDOMWindow *v136;
  WTF *v137;
  void *v138;
  WTF *v139;
  void *v140;
  WTF *v141;
  void *v142;
  WTF *v143;
  void *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  int v149;
  int v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  WTF *v161;
  WTF *v162;
  WTF *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _DWORD *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WebCore::LocalFrame *v175;
  unsigned int *v176;
  unsigned int v177;
  WTF::StringImpl *v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  WebCore::SecurityOrigin *v184;
  WebCore::SecurityOrigin *v185;
  WTF::StringImpl *v186;
  unsigned int *v187;
  unsigned int v188;
  char isSameOriginDomain;
  WTF::StringImpl *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  WebCore::Chrome *v198;
  unint64_t v199;
  int v200;
  WebCore::Document *v201;
  int v202;
  _QWORD *v203;
  unint64_t v204;
  WebCore::Page *v205;
  unint64_t StatusReg;
  WebCore::LocalDOMWindow *v207;
  WebCore::FrameLoader *v208;
  WebCore::FrameLoader *v209;
  WTF::StringImpl *v210[5];
  WTF *v211;
  uint64_t v212;
  _BYTE v213[128];
  WTF::StringImpl *v214;
  uint64_t v215[2];

  v2 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
  v3 = (unsigned int *)(v2 + 1);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = v2[3];
  if (!v5 || (v6 = *(WebCore::Page **)(v5 + 8)) == 0)
  {
    v44 = 1;
    do
    {
LABEL_88:
      v59 = __ldaxr(v3);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v3));
    if (!v60)
    {
      atomic_store(1u, v3);
      v162 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v162 = off_1E31FE290;
      *((_QWORD *)v162 + 1) = v3;
      v211 = v162;
      WTF::ensureOnMainThread();
      v163 = v211;
      v211 = 0;
      if (v163)
        (*(void (**)(WTF *))(*(_QWORD *)v163 + 8))(v163);
    }
    return v44;
  }
  ++*(_DWORD *)v6;
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v6 + 6) + 16) + 200))(*(_QWORD *)(*((_QWORD *)v6 + 6) + 16)))
  {
    v44 = 1;
    goto LABEL_85;
  }
  v211 = (WTF *)v213;
  v212 = 16;
  do
    v8 = __ldaxr(v3);
  while (__stlxr(v8 + 1, v3));
  v9 = HIDWORD(v212);
  v215[0] = 0;
  *((_QWORD *)v211 + HIDWORD(v212)) = v2;
  HIDWORD(v212) = v9 + 1;
  v10 = v215[0];
  v215[0] = 0;
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v158 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v158 = off_1E31FE290;
      *((_QWORD *)v158 + 1) = v11;
      v210[0] = v158;
      WTF::ensureOnMainThread();
      v159 = v210[0];
      v210[0] = 0;
      if (v159)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v159 + 8))(v159);
    }
  }
  v209 = this;
  v14 = v2[11];
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    while (1)
    {
      if (!*(_BYTE *)(v14 + 144))
      {
        v17 = (unsigned int *)(v14 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        v215[0] = v14;
        v19 = HIDWORD(v212);
        if (HIDWORD(v212) == (_DWORD)v212)
        {
          WTF::Vector<std::unique_ptr<WebCore::MutableCSSSelector>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::MutableCSSSelector>>((uint64_t)&v211, (unint64_t)v215);
        }
        else
        {
          v215[0] = 0;
          *((_QWORD *)v211 + HIDWORD(v212)) = v14;
          HIDWORD(v212) = v19 + 1;
        }
        v20 = v215[0];
        v215[0] = 0;
        if (v20)
        {
          v21 = (unsigned int *)(v20 + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, v21);
            v156 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v156 = off_1E31FE290;
            *((_QWORD *)v156 + 1) = v21;
            v210[0] = v156;
            WTF::ensureOnMainThread();
            v157 = v210[0];
            v210[0] = 0;
            if (v157)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v157 + 8))(v157);
          }
        }
      }
      v24 = *(_QWORD *)(v14 + 88);
      if (v24)
        goto LABEL_33;
      v25 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 8);
      if (v25 == v2)
      {
        v24 = 0;
        v30 = 1;
LABEL_38:
        v31 = (unsigned int *)(v14 + 8);
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          v152 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v152 = off_1E31FE290;
          *((_QWORD *)v152 + 1) = v31;
          v210[0] = v152;
          WTF::ensureOnMainThread();
          v153 = v210[0];
          v210[0] = 0;
          if (v153)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v153 + 8))(v153);
        }
        goto LABEL_41;
      }
      v24 = *(_QWORD *)(v14 + 72);
      if (v24)
      {
LABEL_33:
        v28 = (unsigned int *)(v24 + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 + 1, v28));
        v30 = 0;
      }
      else
      {
        while (1)
        {
          v26 = v25[7];
          if (!v26)
            break;
          v25 = *(_QWORD **)(v26 + 8);
          if (v25 == v2 || v25 == 0)
            break;
          v24 = v25[9];
          if (v24)
            goto LABEL_33;
        }
        v24 = 0;
        v30 = 1;
      }
      if (v14)
        goto LABEL_38;
LABEL_41:
      v14 = v24;
      if ((v30 & 1) != 0)
        goto LABEL_42;
    }
  }
  do
LABEL_42:
    v34 = __ldaxr(v3);
  while (__stlxr(v34 + 1, v3));
  v35 = *(_QWORD *)(v2[16] + 8);
  if (v35)
    v36 = *(_BYTE *)(v35 + 144) == 0;
  else
    v36 = 0;
  if (v36)
    ++*(_DWORD *)(v35 + 608);
  v37 = v2[37];
  if (v37)
  {
    *(_DWORD *)(v37 + 24) += 2;
    v38 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v37);
    v39 = v38;
    if (v38)
    {
      do
        v40 = __ldaxr((unsigned int *)v38);
      while (__stlxr(v40 + 1, (unsigned int *)v38));
      v41 = *(_QWORD *)(v38 + 8);
      if (v41)
        ++*(_DWORD *)(v41 + 3340);
    }
    if (*(_DWORD *)(v37 + 24) == 2)
    {
      if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v37);
    }
    else
    {
      *(_DWORD *)(v37 + 24) -= 2;
    }
  }
  else
  {
    v39 = 0;
  }
  v42 = HIDWORD(v212);
  if (HIDWORD(v212))
  {
    v43 = 0;
    v205 = v6;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v62 = *((_QWORD *)v211 + v43);
      v63 = *(_QWORD **)(*(_QWORD *)(v62 + 48) + 8);
      v64 = v63[3];
      if (v64)
        v64 = *(_QWORD *)(v64 + 8);
      v65 = v2[3];
      if (v65)
        v65 = *(_QWORD *)(v65 + 8);
      if (v64 != v65)
        goto LABEL_113;
      if (v63 != v2)
      {
        do
        {
          v134 = v63[7];
          if (!v134)
            goto LABEL_113;
          v63 = *(_QWORD **)(v134 + 8);
        }
        while (v63 != v2 && v63 != 0);
        if (!v63)
          goto LABEL_113;
      }
      if (v43 >= v42)
      {
        __break(0xC471u);
        JUMPOUT(0x1945AD334);
      }
      v66 = *(WebCore::FrameLoader **)(v62 + 280);
      v67 = *(_DWORD *)v66;
      v68 = *(_DWORD *)v66 + 1;
      *(_DWORD *)v66 = v68;
      v69 = *(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)v66 + 1) + 8) + 296);
      v70 = (WebCore::LocalDOMWindow *)*((_QWORD *)v69 + 87);
      if (!v70)
      {
        if (!v68)
          goto LABEL_248;
        *(_DWORD *)v66 = v67;
        goto LABEL_113;
      }
      v71 = (WebCore::Chrome *)*((_QWORD *)v6 + 6);
      ++*((_DWORD *)v70 + 6);
      *((_DWORD *)v69 + 6) += 2;
      v72 = *((_QWORD *)v69 + 159);
      if (v72)
      {
        if ((*(_WORD *)(v72 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v72 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
        {
          v73 = *(_QWORD *)(v72 + 80);
          if (v73)
          {
            while ((*(_WORD *)(v73 + 28) & 0x10) == 0)
            {
              v73 = *(_QWORD *)(v73 + 56);
              if (!v73)
                goto LABEL_106;
            }
            v75 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
            v76 = *(_QWORD *)(*(_QWORD *)(v73 + 96) + 24);
            if (v76 == v75)
            {
LABEL_120:
              v198 = v71;
              v207 = v70;
              v208 = v66;
              v204 = v43;
              v77 = (WebCore *)bmalloc::api::isoAllocate();
              v78 = v77;
              v79 = *(_QWORD *)(StatusReg + 736);
              if (!v79 || (v80 = *(WebCore **)(v79 + 96)) == 0)
              {
                v77 = (WebCore *)WebCore::threadGlobalDataSlow(v77);
                v80 = v77;
              }
              v81 = *((_QWORD *)v80 + 5);
              if (!v81)
              {
                v77 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v80);
                v81 = *((_QWORD *)v80 + 5);
              }
              WTF::MonotonicTime::now(v77);
              *((_QWORD *)v78 + 1) = 0;
              *((_DWORD *)v78 + 4) = 1;
              *((_DWORD *)v78 + 5) = *((_DWORD *)v78 + 5) & 0xFFC00000 | 0x190204 | (*(_QWORD *)(v81 + 280) != 0);
              v83 = *(_DWORD **)(v81 + 280);
              if (v83)
                *v83 += 2;
              *((_QWORD *)v78 + 3) = v83;
              *((_QWORD *)v78 + 4) = 0;
              *((_QWORD *)v78 + 5) = 0;
              *((_QWORD *)v78 + 6) = 0;
              *((_QWORD *)v78 + 7) = v82;
              *(_QWORD *)v78 = off_1E33A0A20;
              *((_QWORD *)v78 + 8) = 0;
              *((_QWORD *)v78 + 9) = 0;
              v84 = *((_DWORD *)v208 + 53);
              *((_DWORD *)v208 + 53) = 1;
              v85 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v208 + 1) + 8) + 24);
              v203 = v2;
              if (v85 && (v86 = *(WebCore::Page **)(v85 + 8)) != 0)
              {
                ++*(_DWORD *)v86;
                v87 = *((_QWORD *)v86 + 2);
                if (v87)
                  goto LABEL_335;
                v87 = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v87 = 1;
                *(_QWORD *)(v87 + 8) = v86;
                v89 = (unsigned int *)*((_QWORD *)v86 + 2);
                *((_QWORD *)v86 + 2) = v87;
                if (!v89)
                  goto LABEL_335;
                do
                {
                  v90 = __ldaxr(v89);
                  v91 = v90 - 1;
                }
                while (__stlxr(v91, v89));
                if (!v91)
                {
                  atomic_store(1u, v89);
                  WTF::fastFree((WTF *)v89, v88);
                }
                v87 = *((_QWORD *)v86 + 2);
                if (v87)
                {
LABEL_335:
                  do
                    v92 = __ldaxr((unsigned int *)v87);
                  while (__stlxr(v92 + 1, (unsigned int *)v87));
                  v93 = *(WebCore::Page **)(v87 + 8);
                  if (v93)
                  {
                    v94 = (*(_DWORD *)v93)++;
                    ++*((_DWORD *)v93 + 217);
                    if (v94)
                    {
                      *(_DWORD *)v93 = v94;
                    }
                    else
                    {
                      WebCore::Page::~Page(v93);
                      WTF::fastFree(v139, v140);
                    }
                  }
                }
                if (*(_DWORD *)v86 == 1)
                {
                  WebCore::Page::~Page(v86);
                  WTF::fastFree(v137, v138);
                }
                else
                {
                  --*(_DWORD *)v86;
                }
              }
              else
              {
                v87 = 0;
              }
              v95 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v208 + 1) + 8) + 24);
              if (v95)
                v96 = *(WebCore::Page **)(v95 + 8);
              else
                v96 = 0;
              WebCore::ForbidSynchronousLoadsScope::ForbidSynchronousLoadsScope((WebCore::ForbidSynchronousLoadsScope *)v210, v96);
              v97 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v208 + 1) + 8) + 24) + 8);
              v98 = *(_QWORD *)(v97 + 16);
              v202 = v84;
              if (v98)
                goto LABEL_149;
              v98 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v98 = 1;
              *(_QWORD *)(v98 + 8) = v97;
              v100 = *(unsigned int **)(v97 + 16);
              *(_QWORD *)(v97 + 16) = v98;
              if (!v100)
                goto LABEL_149;
              do
              {
                v101 = __ldaxr(v100);
                v102 = v101 - 1;
              }
              while (__stlxr(v102, v100));
              if (!v102)
              {
                atomic_store(1u, v100);
                WTF::fastFree((WTF *)v100, v99);
              }
              v98 = *(_QWORD *)(v97 + 16);
              if (v98)
              {
LABEL_149:
                v103 = v207;
                do
                  v104 = __ldaxr((unsigned int *)v98);
                while (__stlxr(v104 + 1, (unsigned int *)v98));
                v105 = *(_QWORD *)(v97 + 112);
                v106 = *(_QWORD *)(v105 + 680);
                v107 = *(_QWORD *)(v105 + 672);
                v108 = *(_DWORD *)(v105 + 320);
                v109 = *(_QWORD *)(v98 + 8);
                v110 = 0;
                if (v109)
                {
                  *(_QWORD *)(*(_QWORD *)(v109 + 112) + 672) &= ~0x40000000000000uLL;
                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 8) + 112) + 680) &= ~0x80000000000uLL;
                  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 8) + 112) + 320) = 1;
                }
              }
              else
              {
                v197 = *(_QWORD *)(v97 + 112);
                v106 = *(_QWORD *)(v197 + 680);
                v107 = *(_QWORD *)(v197 + 672);
                v108 = *(_DWORD *)(v197 + 320);
                v110 = 1;
                v103 = v207;
              }
              v111 = *((_QWORD *)v103 + 9);
              v201 = v69;
              v200 = v108;
              v199 = v106;
              if (v111 && (v112 = *(_QWORD *)(v111 + 8)) != 0)
              {
                if (*(_BYTE *)(v112 + 178))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1945AD07CLL);
                }
                v113 = v107;
                *(_DWORD *)(v112 - 264) += 2;
                WebCore::LocalDOMWindow::dispatchEvent(v103, v78, (WebCore::EventTarget *)(v112 - 288));
                if (*(_DWORD *)(v112 - 264) == 2)
                {
                  if ((*(_WORD *)(v112 - 258) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)(v112 - 288));
                }
                else
                {
                  *(_DWORD *)(v112 - 264) -= 2;
                }
              }
              else
              {
                v113 = v107;
                WebCore::LocalDOMWindow::dispatchEvent(v103, v78, 0);
              }
              v66 = v208;
              if ((v110 & 1) == 0)
              {
                v114 = *(_QWORD *)(v98 + 8);
                if (v114)
                {
                  *(_QWORD *)(*(_QWORD *)(v114 + 112) + 672) = *(_QWORD *)(*(_QWORD *)(v114 + 112) + 672) & 0xFFBFFFFFFFFFFFFFLL | (((v113 >> 54) & 1) << 54);
                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 8) + 112) + 680) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 8) + 112)
                                                                                             + 680) & 0xFFFFF7FFFFFFFFFFLL | (((v199 >> 43) & 1) << 43);
                  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 8) + 112) + 320) = v200;
                }
                do
                {
                  v115 = __ldaxr((unsigned int *)v98);
                  v116 = v115 - 1;
                }
                while (__stlxr(v116, (unsigned int *)v98));
                if (!v116)
                {
                  atomic_store(1u, (unsigned int *)v98);
                  WTF::fastFree((WTF *)v98, v7);
                }
              }
              v117 = (unsigned int *)v210[0];
              v43 = v204;
              v6 = v205;
              v69 = v201;
              if (v210[0])
              {
                v118 = (WebCore::Page *)*((_QWORD *)v210[0] + 1);
                if (!v118)
                  goto LABEL_168;
                v119 = (*(_DWORD *)v118)++;
                --*((_DWORD *)v118 + 218);
                if (v119)
                {
                  *(_DWORD *)v118 = v119;
LABEL_168:
                  v210[0] = 0;
                  v66 = v208;
                  do
                  {
LABEL_169:
                    v120 = __ldaxr(v117);
                    v121 = v120 - 1;
                  }
                  while (__stlxr(v121, v117));
                  if (!v121)
                  {
                    atomic_store(1u, v117);
                    WTF::fastFree((WTF *)v117, v7);
                  }
                }
                else
                {
                  WebCore::Page::~Page(v118);
                  WTF::fastFree(v141, v142);
                  v117 = (unsigned int *)v210[0];
                  v210[0] = 0;
                  v66 = v208;
                  if (v117)
                    goto LABEL_169;
                }
              }
              if (v87)
              {
                v122 = *(WebCore::Page **)(v87 + 8);
                if (v122)
                {
                  v123 = (*(_DWORD *)v122)++;
                  --*((_DWORD *)v122 + 217);
                  if (v123)
                  {
                    *(_DWORD *)v122 = v123;
                  }
                  else
                  {
                    WebCore::Page::~Page(v122);
                    WTF::fastFree(v143, v144);
                  }
                }
                do
                {
                  v124 = __ldaxr((unsigned int *)v87);
                  v125 = v124 - 1;
                }
                while (__stlxr(v125, (unsigned int *)v87));
                if (!v125)
                {
                  atomic_store(1u, (unsigned int *)v87);
                  WTF::fastFree((WTF *)v87, v7);
                }
              }
              *((_DWORD *)v66 + 53) = v202;
              if ((*((_BYTE *)v78 + 20) & 0x40) == 0)
                (*(void (**)(WebCore::Document *, WebCore *))(*(_QWORD *)v201 + 344))(v201, v78);
              v2 = v203;
              if ((*((_BYTE *)v201 + 269) & 0x10) == 0)
              {
                v70 = v207;
                if (*((_BYTE *)v201 + 3362) || *((_BYTE *)v201 + 3405))
                {
                  v164 = *((_QWORD *)v201 + 66);
                  i = v201;
                  if (v164)
                  {
                    v165 = *(_QWORD *)(v164 + 8);
                    i = v201;
                    if (v165)
                    {
                      v166 = *(_QWORD *)(v165 + 120);
                      i = v201;
                      if (v166)
                      {
                        v167 = *(_QWORD *)(v166 + 8);
                        for (i = v201; v167; v167 = *(_QWORD *)(v170 + 8))
                        {
                          i = *(WebCore::Document **)(*(_QWORD *)(v167 + 40) + 8);
                          v168 = *((_QWORD *)i + 66);
                          if (!v168)
                            break;
                          v169 = *(_QWORD *)(v168 + 8);
                          if (!v169)
                            break;
                          v170 = *(_QWORD *)(v169 + 120);
                          if (!v170)
                            break;
                        }
                      }
                    }
                  }
                }
                else
                {
                  v126 = *((_QWORD *)v201 + 66);
                  i = v201;
                  if (v126)
                  {
                    v128 = *(_QWORD *)(v126 + 8);
                    i = v201;
                    if (v128)
                    {
                      v129 = *(_QWORD *)(*(_QWORD *)(v128 + 128) + 8);
                      v130 = v129 && *(_BYTE *)(v129 + 144) == 0;
                      i = v201;
                      if (v130)
                      {
                        v131 = *(WebCore::Document **)(v129 + 296);
                        i = v201;
                        if (v131)
                          i = v131;
                      }
                    }
                  }
                }
                if (!*((_BYTE *)i + 3416))
                {
                  v74 = 1;
                  goto LABEL_195;
                }
                if ((*((_BYTE *)v78 + 20) & 0x40) == 0)
                {
                  v148 = (WTF::StringImpl *)*((_QWORD *)v78 + 9);
                  if (!v148)
                    goto LABEL_315;
                  v149 = *(_DWORD *)v148;
                  v150 = *((_DWORD *)v148 + 1);
                  *(_DWORD *)v148 += 2;
                  if (v149)
                  {
                    *(_DWORD *)v148 = v149;
                    if (v150)
                      goto LABEL_235;
LABEL_315:
                    v74 = 1;
LABEL_240:
                    v70 = v207;
LABEL_195:
                    if (*((_DWORD *)v78 + 4) == 1)
                    {
                      (*(void (**)(WebCore *))(*(_QWORD *)v78 + 8))(v78);
                      v70 = v207;
                    }
                    else
                    {
                      --*((_DWORD *)v78 + 4);
                    }
                    goto LABEL_107;
                  }
                  WTF::StringImpl::destroy(v148, (WTF::StringImpl *)v7);
                  if (!v150)
                    goto LABEL_315;
                }
LABEL_235:
                if (!*((_BYTE *)v209 + 323))
                {
                  if (v66 == v209)
                    goto LABEL_271;
                  v171 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v208 + 1) + 8) + 56);
                  if (!v171)
                    goto LABEL_271;
                  v179 = *(_QWORD *)(v171 + 8);
                  if (!v179 || *(_BYTE *)(v179 + 144))
                    goto LABEL_271;
                  v180 = (unsigned int *)(v179 + 8);
                  do
                    v181 = __ldaxr(v180);
                  while (__stlxr(v181 + 1, v180));
                  v215[0] = v179;
                  while (1)
                  {
                    v182 = *(_QWORD *)(v179 + 296);
                    if (!v182)
                    {
                      v193 = 1;
                      goto LABEL_322;
                    }
                    *(_DWORD *)(v182 + 24) += 2;
                    v183 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v208 + 1) + 8) + 296);
                    if (!v183)
                      goto LABEL_297;
                    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v183 + 192), (WTF::StringImpl *)v7);
                    v185 = v184;
                    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v182 + 192), v186);
                    if (v187)
                    {
                      do
                        v188 = __ldaxr(v187);
                      while (__stlxr(v188 + 1, v187));
                    }
                    v210[0] = (WTF::StringImpl *)v187;
                    isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain(v185, (const WebCore::SecurityOrigin *)v187);
                    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v210, v190);
                    if ((isSameOriginDomain & 1) != 0)
                    {
                      if (*(WebCore::FrameLoader **)(v215[0] + 280) == v209)
                      {
                        v193 = 3;
                      }
                      else
                      {
                        v191 = *(_QWORD *)(v215[0] + 56);
                        if (v191 && (v195 = *(_QWORD *)(v191 + 8)) != 0)
                          v192 = *(_BYTE *)(v195 + 144) ? 0 : v195;
                        else
                          v192 = 0;
                        WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::operator=(v215, v192);
                        v193 = 0;
                        v69 = v201;
                      }
                    }
                    else
                    {
LABEL_297:
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v214 = v210[0];
                      WebCore::Document::addConsoleMessage(v69, 1, 2, &v214, 0);
                      v194 = v214;
                      v214 = 0;
                      if (v194)
                      {
                        if (*(_DWORD *)v194 == 2)
                          WTF::StringImpl::destroy(v194, (WTF::StringImpl *)v7);
                        else
                          *(_DWORD *)v194 -= 2;
                      }
                      v193 = 1;
                    }
                    if (*(_DWORD *)(v182 + 24) == 2)
                    {
                      if ((*(_WORD *)(v182 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v182);
                    }
                    else
                    {
                      *(_DWORD *)(v182 + 24) -= 2;
                    }
                    if (v193)
                      break;
                    v179 = v215[0];
                    if (!v215[0])
                    {
                      v2 = v203;
                      v43 = v204;
                      v6 = v205;
                      goto LABEL_271;
                    }
                  }
                  if (v193 == 3)
                    v193 = 0;
LABEL_322:
                  v196 = v215[0];
                  v215[0] = 0;
                  if (v196)
                    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v196 + 8));
                  v2 = v203;
                  v43 = v204;
                  v6 = v205;
                  v69 = v201;
                  if (v193)
                  {
                    v74 = 1;
                    v66 = v208;
                  }
                  else
                  {
LABEL_271:
                    *((_BYTE *)v209 + 323) = 1;
                    v172 = (_DWORD *)*((_QWORD *)v78 + 9);
                    if (v172)
                      *v172 += 2;
                    v215[0] = (uint64_t)v172;
                    WebCore::Document::displayStringModifiedByEncoding(v69, (const WTF::String *)v215, v210);
                    v174 = (WTF::StringImpl *)v215[0];
                    v215[0] = 0;
                    v66 = v208;
                    if (v174)
                    {
                      if (*(_DWORD *)v174 == 2)
                        WTF::StringImpl::destroy(v174, v173);
                      else
                        *(_DWORD *)v174 -= 2;
                    }
                    v175 = *(WebCore::LocalFrame **)(*((_QWORD *)v208 + 1) + 8);
                    v176 = (unsigned int *)((char *)v175 + 8);
                    do
                      v177 = __ldaxr(v176);
                    while (__stlxr(v177 + 1, v176));
                    v215[0] = (uint64_t)v175;
                    v74 = WebCore::Chrome::runBeforeUnloadConfirmPanel(v198, (const WTF::String *)v210, v175);
                    WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(v215);
                    v178 = v210[0];
                    v210[0] = 0;
                    if (v178)
                    {
                      if (*(_DWORD *)v178 == 2)
                        WTF::StringImpl::destroy(v178, (WTF::StringImpl *)v7);
                      else
                        *(_DWORD *)v178 -= 2;
                    }
                  }
                  goto LABEL_240;
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WebCore::Document::addConsoleMessage(v201, 1, 2, v210, 0);
                v151 = v210[0];
                v210[0] = 0;
                if (v151)
                {
                  if (*(_DWORD *)v151 == 2)
                    WTF::StringImpl::destroy(v151, (WTF::StringImpl *)v7);
                  else
                    *(_DWORD *)v151 -= 2;
                }
              }
              v74 = 1;
              goto LABEL_240;
            }
LABEL_116:
            if (v76 == *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
              goto LABEL_120;
            while (1)
            {
              v73 = *(_QWORD *)(v73 + 56);
              if (!v73)
                break;
              if ((*(_WORD *)(v73 + 28) & 0x10) != 0)
              {
                v76 = *(_QWORD *)(*(_QWORD *)(v73 + 96) + 24);
                if (v76 != v75)
                  goto LABEL_116;
                goto LABEL_120;
              }
            }
          }
        }
      }
LABEL_106:
      v74 = 1;
LABEL_107:
      if (*((_DWORD *)v69 + 6) == 2)
      {
        if ((*((_WORD *)v69 + 15) & 0x400) == 0)
        {
          v136 = v70;
          WebCore::Node::removedLastRef(v69);
          v70 = v136;
        }
      }
      else
      {
        *((_DWORD *)v69 + 6) -= 2;
      }
      if (*((_DWORD *)v70 + 6) == 1)
        (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v70 + 72))(v70);
      else
        --*((_DWORD *)v70 + 6);
      if (!*(_DWORD *)v66)
      {
LABEL_248:
        __break(0xC471u);
        JUMPOUT(0x1945ACE24);
      }
      --*(_DWORD *)v66;
      v42 = HIDWORD(v212);
      if (!v74)
        goto LABEL_58;
LABEL_113:
      if (++v43 >= v42)
        goto LABEL_58;
    }
  }
  v42 = 0;
  v43 = 0;
LABEL_58:
  v44 = v43 == v42;
  if (v39)
  {
    v45 = *(_QWORD *)(v39 + 8);
    if (v45)
      --*(_DWORD *)(v45 + 3340);
    do
    {
      v46 = __ldaxr((unsigned int *)v39);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, (unsigned int *)v39));
    if (!v47)
    {
      atomic_store(1u, (unsigned int *)v39);
      v160 = *(unsigned int *)(v39 + 28);
      if ((_DWORD)v160)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v39 + 16), (WTF::StringImpl *)(*(_QWORD *)(v39 + 16) + 32 * v160));
      v161 = *(WTF **)(v39 + 16);
      if (v161)
      {
        *(_QWORD *)(v39 + 16) = 0;
        *(_DWORD *)(v39 + 24) = 0;
        WTF::fastFree(v161, v7);
      }
      WTF::fastFree((WTF *)v39, v7);
    }
  }
  v48 = *(_QWORD *)(v2[16] + 8);
  if (v48)
    v49 = *(_BYTE *)(v48 + 144) == 0;
  else
    v49 = 0;
  if (v49)
    --*(_DWORD *)(v48 + 608);
  do
  {
    v50 = __ldaxr(v3);
    v51 = v50 - 1;
  }
  while (__stlxr(v51, v3));
  if (!v51)
  {
    atomic_store(1u, v3);
    v154 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v154 = off_1E31FE290;
    *((_QWORD *)v154 + 1) = v3;
    v210[0] = v154;
    WTF::ensureOnMainThread();
    v155 = v210[0];
    v210[0] = 0;
    if (v155)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v155 + 8))(v155);
  }
  if (v43 != v42)
  {
    v210[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v210);
    WTF::URL::operator=((uint64_t)v209 + 224, (uint64_t *)v210);
    v145 = v210[0];
    v210[0] = 0;
    if (v145)
    {
      if (*(_DWORD *)v145 == 2)
        WTF::StringImpl::destroy(v145, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v145 -= 2;
    }
  }
  *((_BYTE *)v209 + 323) = 0;
  v52 = v211;
  if (HIDWORD(v212))
  {
    v53 = (WTF *)((char *)v211 + 8 * HIDWORD(v212));
    do
    {
      v54 = *(_QWORD *)v52;
      *(_QWORD *)v52 = 0;
      if (v54)
      {
        v55 = (unsigned int *)(v54 + 8);
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          atomic_store(1u, v55);
          v146 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v146 = off_1E31FE290;
          *((_QWORD *)v146 + 1) = v55;
          v210[0] = v146;
          WTF::ensureOnMainThread();
          v147 = v210[0];
          v210[0] = 0;
          if (v147)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v147 + 8))(v147);
        }
      }
      v52 = (WTF *)((char *)v52 + 8);
    }
    while (v52 != v53);
    v52 = v211;
  }
  if (v213 != (_BYTE *)v52 && v52 != 0)
  {
    v211 = 0;
    LODWORD(v212) = 0;
    WTF::fastFree(v52, v7);
  }
LABEL_85:
  if (*(_DWORD *)v6 == 1)
  {
    WebCore::Page::~Page(v6);
    WTF::fastFree(v132, v133);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  if (v2)
    goto LABEL_88;
  return v44;
}

void WebCore::DisplayList::Recorder::~Recorder(WebCore::DisplayList::Recorder *this, void *a2)
{
  const void *v3;
  WebCore::DrawGlyphsRecorder *v4;
  WTF *v5;
  void *v6;
  unsigned int v7;
  WTF *v8;
  unsigned int v10;
  WTF *v11;

  *(_QWORD *)this = off_1E3413140;
  v3 = (const void *)*((_QWORD *)this + 474);
  *((_QWORD *)this + 474) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WebCore::DrawGlyphsRecorder *)*((_QWORD *)this + 472);
  *((_QWORD *)this + 472) = 0;
  if (v4)
  {
    WebCore::DrawGlyphsRecorder::~DrawGlyphsRecorder(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_DWORD *)this + 183);
  if (v7)
    WTF::VectorTypeOperations<WebCore::DisplayList::Recorder::ContextState>::destruct(*((unsigned int **)this + 90), (unsigned int *)(*((_QWORD *)this + 90) + 760 * v7));
  v8 = (WTF *)*((_QWORD *)this + 90);
  if ((WebCore::DisplayList::Recorder *)((char *)this + 736) != v8 && v8 != 0)
  {
    *((_QWORD *)this + 90) = 0;
    *((_DWORD *)this + 182) = 0;
    WTF::fastFree(v8, a2);
  }
  *(_QWORD *)this = off_1E340BA10;
  v10 = *((_DWORD *)this + 91);
  if (v10)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 44), (unsigned int *)(*((_QWORD *)this + 44) + 344 * v10));
  v11 = (WTF *)*((_QWORD *)this + 44);
  if ((WebCore::DisplayList::Recorder *)((char *)this + 368) != v11 && v11)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v11, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::DisplayList::Recorder *)((char *)this + 8), a2);
}

BOOL WebCore::CachedImage::canRender(WebCore::CachedImage *this, const WebCore::RenderElement *a2, float a3)
{
  uint64_t v3;

  if ((*(_WORD *)((char *)this + 557) >> 5) - 3 < 2)
    return 0;
  v3 = WebCore::CachedImage::imageSizeForRenderer((uint64_t)this, (uint64_t)a2, 0, a3);
  return (int)v3 > 0 && SHIDWORD(v3) > 0;
}

void WebCore::CachedImage::addClientWaitingForAsyncDecoding(WebCore::CachedImage *this, WebCore::CachedImageClient *a2)
{
  char *v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8[3];

  v4 = (char *)this + 664;
  if ((WTF::WeakHashSet<WebCore::CachedImageClient,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::CachedImageClient>((uint64_t *)this + 83, (uint64_t)a2) & 1) == 0)
  {
    if ((WTF::WeakHashCountedSet<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::contains((uint64_t *)this + 45, (uint64_t)a2) & 1) != 0)
    {
      WTF::WeakHashSet<WebCore::CachedImageClient,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedImageClient>((uint64_t)v4, a2, (uint64_t)v8);
    }
    else
    {
      WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::CachedResourceClientWalker(v8, (uint64_t)this);
      v5 = WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::next(v8);
      if (v5)
      {
        v6 = v5;
        do
        {
          WTF::WeakHashSet<WebCore::CachedImageClient,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::CachedImageClient>((uint64_t)v4, v6, (uint64_t)&v7);
          v6 = WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::next(v8);
        }
        while (v6);
      }
      WebCore::CachedResourceClientWalker<WebCore::CachedImageClient>::~CachedResourceClientWalker((WebCore::CachedResourceHandleBase *)v8, v6);
    }
  }
}

uint64_t WebCore::BitmapImage::stopAnimation(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8));
}

WTF::MonotonicTime *WebCore::ShadowRoot::childrenChanged(uint64_t a1, _BYTE *a2)
{
  WTF::MonotonicTime *result;
  uint64_t v5;

  result = (WTF::MonotonicTime *)WebCore::ContainerNode::childrenChanged(a1, a2);
  v5 = *(_QWORD *)(a1 + 200);
  if (v5)
  {
    result = *(WTF::MonotonicTime **)(v5 + 8);
    if (result)
    {
      if (*(_BYTE *)(a1 + 193))
      {
        if (*a2 <= 1u)
          return WebCore::Element::invalidateStyleForSubtreeInternal(result);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::PluginData::initPlugins(WebCore::PluginData *this)
{
  void *v2;
  WTF::StringImpl *result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD v7[2];

  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, char *))(**(_QWORD **)(*((_QWORD *)this + 1) + 920)
                                                                       + 16))(v7, *(_QWORD *)(*((_QWORD *)this + 1) + 920), *((_QWORD *)this + 1), (char *)this + 32);
  WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 16, v7);
  result = (WTF::StringImpl *)WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v2);
  v4 = *((unsigned int *)this + 7);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 2);
    v6 = 56 * v4;
    while (1)
    {
      result = (WTF::StringImpl *)WTF::equalLettersIgnoringASCIICase(v5 + 6, "com.apple.webkit.builtinpdfplugin", 0x22uLL);
      if ((_DWORD)result)
        break;
      v5 += 7;
      v6 -= 56;
      if (!v6)
        return result;
    }
    return std::optional<WebCore::PluginInfo>::operator=[abi:sn180100]<WebCore::PluginInfo&,void>((uint64_t)this + 120, (WTF::StringImpl *)v5);
  }
  return result;
}

uint64_t WebCore::PathStream::add(uint64_t result, float a2, float a3, float a4, float a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;

  v9 = result;
  v10 = *(unsigned int *)(result + 28);
  if ((_DWORD)v10 != *(_DWORD *)(result + 24))
  {
    v11 = *(_QWORD *)(result + 16) + 56 * v10;
    *(float *)v11 = a2;
    *(float *)(v11 + 4) = a3;
    *(float *)(v11 + 8) = a4;
    *(float *)(v11 + 12) = a5;
    *(_DWORD *)(v11 + 52) = 9;
LABEL_3:
    ++*(_DWORD *)(v9 + 28);
    return result;
  }
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v10 + 1)
    v14 = v10 + 1;
  else
    v14 = v13;
  if (v14 < 0x4924925)
  {
    v15 = *(WTF **)(result + 16);
    v16 = 56 * v14;
    result = WTF::fastMalloc((WTF *)(56 * v14));
    *(_DWORD *)(v9 + 24) = v16 / 0x38;
    *(_QWORD *)(v9 + 16) = result;
    if ((_DWORD)v10)
    {
      v18 = 56 * v10;
      v19 = v15;
      do
      {
        v20 = *(_OWORD *)v19;
        v21 = *((_OWORD *)v19 + 1);
        v22 = *((_OWORD *)v19 + 2);
        *(_QWORD *)(result + 48) = *((_QWORD *)v19 + 6);
        *(_OWORD *)(result + 16) = v21;
        *(_OWORD *)(result + 32) = v22;
        *(_OWORD *)result = v20;
        result += 56;
        v19 = (WTF *)((char *)v19 + 56);
        v18 -= 56;
      }
      while (v18);
      result = *(_QWORD *)(v9 + 16);
    }
    if (v15)
    {
      if ((WTF *)result == v15)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
      }
      WTF::fastFree(v15, v17);
      result = *(_QWORD *)(v9 + 16);
    }
    v23 = result + 56 * *(unsigned int *)(v9 + 28);
    *(float *)v23 = a2;
    *(float *)(v23 + 4) = a3;
    *(float *)(v23 + 8) = a4;
    *(float *)(v23 + 12) = a5;
    *(_OWORD *)(v23 + 16) = v24;
    *(_OWORD *)(v23 + 32) = v25;
    *(_DWORD *)(v23 + 48) = v26;
    *(_DWORD *)(v23 + 52) = 9;
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF *v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;

  v9 = result;
  v10 = *(unsigned int *)(result + 28);
  if ((_DWORD)v10 != *(_DWORD *)(result + 24))
  {
    v23 = *(_QWORD *)(result + 16) + 56 * v10;
    *(float *)v23 = a2;
    *(float *)(v23 + 4) = a3;
    *(float *)(v23 + 8) = a4;
    *(float *)(v23 + 12) = a5;
    *(_DWORD *)(v23 + 52) = 8;
LABEL_19:
    ++*(_DWORD *)(v9 + 28);
    return result;
  }
  v11 = v10 + (v10 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v10 + 1)
    v13 = v10 + 1;
  else
    v13 = v12;
  if (v13 < 0x4924925)
  {
    v14 = *(WTF **)(result + 16);
    v15 = 56 * v13;
    result = WTF::fastMalloc((WTF *)(56 * v13));
    *(_DWORD *)(v9 + 24) = v15 / 0x38;
    *(_QWORD *)(v9 + 16) = result;
    if ((_DWORD)v10)
    {
      v17 = 56 * v10;
      v18 = v14;
      do
      {
        v19 = *(_OWORD *)v18;
        v20 = *((_OWORD *)v18 + 1);
        v21 = *((_OWORD *)v18 + 2);
        *(_QWORD *)(result + 48) = *((_QWORD *)v18 + 6);
        *(_OWORD *)(result + 16) = v20;
        *(_OWORD *)(result + 32) = v21;
        *(_OWORD *)result = v19;
        result += 56;
        v18 = (WTF *)((char *)v18 + 56);
        v17 -= 56;
      }
      while (v17);
      result = *(_QWORD *)(v9 + 16);
    }
    if (v14)
    {
      if ((WTF *)result == v14)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
      }
      WTF::fastFree(v14, v16);
      result = *(_QWORD *)(v9 + 16);
    }
    v22 = result + 56 * *(unsigned int *)(v9 + 28);
    *(float *)v22 = a2;
    *(float *)(v22 + 4) = a3;
    *(float *)(v22 + 8) = a4;
    *(float *)(v22 + 12) = a5;
    *(_OWORD *)(v22 + 16) = v24;
    *(_OWORD *)(v22 + 32) = v25;
    *(_DWORD *)(v22 + 48) = v26;
    *(_DWORD *)(v22 + 52) = 8;
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

int *WebCore::LayoutSize::scale(int *this, float a2, float a3)
{
  int v3;
  double v4;
  int v5;
  int v6;
  double v7;
  int v8;

  v3 = this[1];
  v4 = (float)((float)((float)*this * 0.015625) * a2) * 64.0;
  if (v4 > -2147483650.0)
    v5 = (int)v4;
  else
    v5 = 0x80000000;
  if (v4 < 2147483650.0)
    v6 = v5;
  else
    v6 = 0x7FFFFFFF;
  *this = v6;
  v7 = (float)((float)((float)v3 * 0.015625) * a3) * 64.0;
  if (v7 >= 2147483650.0)
  {
    v8 = 0x7FFFFFFF;
  }
  else if (v7 <= -2147483650.0)
  {
    v8 = 0x80000000;
  }
  else
  {
    v8 = (int)v7;
  }
  this[1] = v8;
  return this;
}

uint64_t WebCore::JSNodeList::getOwnPropertySlotByIndex(WebCore::JSNodeList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  JSC::VM *v8;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  WebCore::Document *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t JSHTMLWrapper;
  void *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  unint64_t v30;
  WebCore::Node *v31;
  unint64_t v32;
  WebCore::Node *v33;
  WebCore::Node *v34;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v9 = (*(uint64_t (**)(_QWORD, JSC::JSGlobalObject *, JSC::JSGlobalObject *, uint64_t, JSC::PropertySlot *))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), a3, a3, a4, a5);
  if (!v9)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v12 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v12 + 3328))
  {
    v13 = *(_QWORD *)(v9 + 8);
    if (!v13)
      goto LABEL_17;
  }
  else
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v12 + 3320) + 32);
    if (!v16)
      goto LABEL_17;
    v17 = *(_DWORD *)(v16 - 8);
    v18 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(_QWORD *)(v16 + 16 * v21);
    if (v22 != v9)
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(_QWORD *)(v16 + 16 * v21);
        ++v23;
        if (v22 == v9)
          goto LABEL_16;
      }
LABEL_17:
      v24 = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = v24 + 2;
      v33 = (WebCore::Node *)v9;
      v25 = *(unsigned __int16 *)(v9 + 28);
      if (v25 >> 12 == 1)
      {
        if ((v25 & 0x10) != 0)
        {
          *(_DWORD *)(v9 + 24) = v24 + 4;
          v34 = (WebCore::Node *)v9;
          JSHTMLWrapper = WebCore::createJSHTMLWrapper((JSC::VM *)v12, (uint64_t *)&v34, v10);
          goto LABEL_20;
        }
        if ((v25 & 0x20) != 0)
        {
          *(_DWORD *)(v9 + 24) = v24 + 4;
          v34 = (WebCore::Node *)v9;
          JSHTMLWrapper = WebCore::createJSSVGWrapper((WebCore::JSSVGCircleElement **)v12, &v34, v10);
LABEL_20:
          v14 = JSHTMLWrapper;
          v28 = v34;
          v34 = 0;
          if (v28)
          {
            if (*((_DWORD *)v28 + 6) == 2)
            {
              if ((*((_WORD *)v28 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v28, v27);
            }
            else
            {
              *((_DWORD *)v28 + 6) -= 2;
            }
          }
LABEL_21:
          v29 = v33;
          v33 = 0;
          if (v29)
          {
LABEL_22:
            if (*((_DWORD *)v29 + 6) == 2)
            {
              if ((*((_WORD *)v29 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v29, v27);
            }
            else
            {
              *((_DWORD *)v29 + 6) -= 2;
            }
          }
          goto LABEL_7;
        }
        if ((v25 & 0x40) != 0)
        {
          *(_DWORD *)(v9 + 24) = v24 + 4;
          v34 = (WebCore::Node *)v9;
          v14 = WebCore::createJSMathMLWrapper((JSC::VM *)v12, &v34, v10);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v34);
          goto LABEL_21;
        }
        v30 = WebCore::createWrapper<WebCore::Element,WebCore::Node>((JSC::VM *)v12, (JSC::VM *)&v33, v10);
      }
      else
      {
        switch(v25 >> 12)
        {
          case 2u:
            v30 = WebCore::createWrapper<WebCore::Attr,WebCore::Node>((WebCore::JSAttr **)v12, &v33, v10);
            break;
          case 3u:
            v30 = WebCore::createWrapper<WebCore::Text,WebCore::Node>((JSC::VM *)v12, &v33, v10);
            break;
          case 4u:
            v30 = WebCore::createWrapper<WebCore::CDATASection,WebCore::Node>((JSC::VM *)v12, &v33, v10);
            break;
          case 7u:
            v30 = WebCore::createWrapper<WebCore::ProcessingInstruction,WebCore::Node>((JSC::VM *)v12, &v33, v10);
            break;
          case 8u:
            v30 = WebCore::createWrapper<WebCore::Comment,WebCore::Node>((JSC::VM *)v12, &v33, v10);
            break;
          case 9u:
            v31 = (WebCore::Node *)v9;
            v32 = WebCore::toJS((WebCore::DOMWrapperWorld **)a2, (JSC::JSGlobalObject *)v12, (WebCore::JSDOMGlobalObject *)v9, v11);
            v29 = v31;
            v14 = v32;
            v33 = 0;
            goto LABEL_22;
          case 0xAu:
            v30 = WebCore::createWrapper<WebCore::DocumentType,WebCore::Node>((JSC::VM *)v12, (uint64_t *)&v33, v10);
            break;
          case 0xBu:
            if ((v25 & 0x80) == 0)
            {
              v33 = 0;
              v34 = (WebCore::Node *)v9;
              JSHTMLWrapper = WebCore::createWrapper<WebCore::DocumentFragment,WebCore::DocumentFragment>((JSC::VM *)v12, (uint64_t *)&v34, v10);
              goto LABEL_20;
            }
            v30 = WebCore::createWrapper<WebCore::ShadowRoot,WebCore::Node>((JSC::VM *)v12, (uint64_t *)&v33, v10);
            break;
          default:
            v30 = WebCore::createWrapper<WebCore::Node,WebCore::Node>((JSC::VM *)v12, (JSC::VM *)&v33, v10);
            break;
        }
      }
      v14 = v30;
      goto LABEL_21;
    }
LABEL_16:
    v13 = *(_QWORD *)(v16 + 16 * v21 + 8);
    if (!v13)
      goto LABEL_17;
  }
  if ((*(_BYTE *)(v13 + 8) & 3) != 0)
    goto LABEL_17;
  v14 = *(_QWORD *)v13;
  if (!*(_QWORD *)v13)
    goto LABEL_17;
LABEL_7:
  if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v14;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

unint64_t WebCore::JSNodeList::createPrototype(WebCore::JSNodeList *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t Structure;
  JSC::Structure *v6;

  Structure = WebCore::JSNodeListPrototype::createStructure((uint64_t *)this, (uint64_t)a2, a2[82]);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSNodeListPrototype::create(this, (JSC::VM *)a2, Structure, v6);
}

uint64_t WebCore::JSLocation::subspaceForImpl(WebCore::JSLocation *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 5824);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 5824))
  {
    v15 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v15, &v21, (char *)this + 192, (char *)this + 1872, 40, 8, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v16);
      else
        --*(_DWORD *)v18;
    }
    v19 = *(_QWORD *)(v9 + 5824);
    *(_QWORD *)(v9 + 5824) = v15;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v11 = *(_QWORD *)(v3 + 5824);
  *(_QWORD *)(v3 + 5824) = v4;
  if (v11)
  {
    v12 = (WTF *)MEMORY[0x19AEA3528](v11, v10);
    WTF::fastFree(v12, v13);
  }
  v14 = __ldxr((unsigned __int8 *)v7);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSLocation::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  uint64_t i;
  int *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;

  v2 = *a1;
  if (!*a1)
  {
    v3 = 0;
    v4 = 0;
    goto LABEL_3;
  }
  v3 = *(_DWORD *)(v2 - 4);
  v4 = *(_DWORD *)(v2 - 12);
  if (!v3)
  {
LABEL_3:
    v5 = 8;
    goto LABEL_4;
  }
  v5 = v3 << (6 * v4 >= (2 * v3));
LABEL_4:
  result = WTF::fastZeroedMalloc((WTF *)(4 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (int *)(v2 + 4 * i);
      if ((*v9 + 1) >= 2)
      {
        v10 = *a1;
        if (*a1)
          v11 = *(_DWORD *)(v10 - 8);
        else
          v11 = 0;
        v12 = 0;
        v13 = *v9;
        do
        {
          v14 = v13 & v11;
          result = *(unsigned int *)(v10 + 4 * v14);
          v13 = ++v12 + v14;
        }
        while ((_DWORD)result);
        *(_DWORD *)(v10 + 4 * v14) = *v9;
      }
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

_QWORD *WTF::HashTable<WebCore::IOSurface *,WTF::KeyValuePair<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails>>,WTF::DefaultHash<WebCore::IOSurface *>,WTF::HashMap<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails,WTF::DefaultHash<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurfacePool::CachedSurfaceDetails>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IOSurface *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  _QWORD *v23;
  __int128 v24;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_QWORD *)(v6 + 24 * v13);
      if ((unint64_t)(*v15 + 1) >= 2)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (~(*v15 << 32) + *v15) ^ ((~(*v15 << 32) + *v15) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = (_QWORD *)(v16 + 24 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (*v23);
        v24 = *(_OWORD *)v15;
        v23[2] = v15[2];
        *(_OWORD *)v23 = v24;
        if (v15 == a3)
          v14 = v23;
      }
      ++v13;
    }
    while (v13 != v7);
    goto LABEL_15;
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::IOSurface *,WTF::KeyValuePair<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails>>,WTF::DefaultHash<WebCore::IOSurface *>,WTF::HashMap<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails,WTF::DefaultHash<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurfacePool::CachedSurfaceDetails>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IOSurface *>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::IOSurface *,WTF::KeyValuePair<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails>>,WTF::DefaultHash<WebCore::IOSurface *>,WTF::HashMap<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails,WTF::DefaultHash<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurfacePool::CachedSurfaceDetails>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IOSurface *>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::rehash(uint64_t *a1, unsigned int a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  void **v13;
  _QWORD *v14;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v13 = (void **)v6;
    do
    {
      v10 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v14 = WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::reinsert(*a1, (uint64_t)v10);
        if (v13 == a3)
          v11 = v14;
      }
      ++v13;
      --v7;
    }
    while (v7);
    goto LABEL_11;
  }
  result = 0;
  if (v6)
  {
LABEL_11:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::expand(uint64_t *a1, void **a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v9 = result & v7;
  v10 = (void **)(v6 + 8 * (result & v7));
  v11 = *v10;
  v12 = *a3;
  if (*v10)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v11 == (void *)v12)
      {
        v23 = *a2;
        if (*a2)
          v24 = *(unsigned int *)(v23 - 4);
        else
          v24 = 0;
        v20 = 0;
        v19 = v23 + 8 * v24;
        goto LABEL_12;
      }
      if (v11 == (void *)-1)
        v21 = v10;
      v9 = (v9 + v22) & v7;
      v10 = (void **)(v6 + 8 * v9);
      v11 = *v10;
      ++v22;
    }
    while (*v10);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v10 = v21;
    }
  }
  *v10 = (void *)v12;
  v13 = *a2;
  if (*a2)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_11;
LABEL_24:
    result = (uint64_t)WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::expand(a2, v10);
    v10 = (void **)result;
    v15 = *a2;
    if (*a2)
      v18 = *(unsigned int *)(v15 - 4);
    else
      v18 = 0;
    goto LABEL_11;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_24;
LABEL_11:
  v19 = v15 + 8 * v18;
  v20 = 1;
LABEL_12:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = v20;
  return result;
}

_DWORD *WTF::HashTable<WebCore::CSSPrimitiveValue const*,WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashMap<WebCore::CSSPrimitiveValue const*,WTF::String,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  WTF::StringImpl *v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v2 = qword_1ECE82940;
  if (qword_1ECE82940)
  {
    v3 = *(_DWORD *)(qword_1ECE82940 - 4);
    v4 = *(_DWORD *)(qword_1ECE82940 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE82940 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE82940 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = (uint64_t *)(v2 + 16 * i);
      v9 = *v8;
      if (*v8)
      {
        if (v9 != -1)
        {
          if (qword_1ECE82940)
            v10 = *(_DWORD *)(qword_1ECE82940 - 8);
          else
            v10 = 0;
          v11 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
          v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
          v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
          v14 = v10 & ((v13 >> 31) ^ v13);
          v15 = 1;
          do
          {
            v16 = v14;
            v17 = *(_QWORD *)(qword_1ECE82940 + 16 * v14);
            v14 = (v14 + v15++) & v10;
          }
          while (v17);
          v18 = (uint64_t *)(qword_1ECE82940 + 16 * v16);
          v19 = (WTF::StringImpl *)v18[1];
          v18[1] = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v6);
            else
              *(_DWORD *)v19 -= 2;
          }
          *v18 = *v8;
          v20 = v2 + 16 * i;
          v21 = *(_QWORD *)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          v18[1] = v21;
          v22 = *(WTF::StringImpl **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v6);
            else
              *(_DWORD *)v22 -= 2;
          }
        }
      }
      else
      {
        WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>::~KeyValuePair(v2 + 16 * i, v6);
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

_DWORD *WTF::HashTable<WebCore::CSSPrimitiveValue const*,WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashMap<WebCore::CSSPrimitiveValue const*,WTF::String,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>>::expand()
{
  int v0;

  if (qword_1ECE82940 && (v0 = *(_DWORD *)(qword_1ECE82940 - 4)) != 0)
    return WTF::HashTable<WebCore::CSSPrimitiveValue const*,WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashMap<WebCore::CSSPrimitiveValue const*,WTF::String,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>>::rehash(v0 << (6 * *(_DWORD *)(qword_1ECE82940 - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WebCore::CSSPrimitiveValue const*,WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashMap<WebCore::CSSPrimitiveValue const*,WTF::String,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>>::rehash(8u);
}

WTF::StringImpl *WTF::HashTable<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>>,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashMap<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<WebCore::FontRanges>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>>::rehash(uint64_t *a1, unsigned int a2, __int128 *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int i;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v38;
  WTF **v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  WTF::StringImpl *result;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  uint64_t v68;
  WTF *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v80;
  WTF *v81;
  WTF *v82;
  uint64_t v83;
  WTF *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  _DWORD **v89;
  _DWORD *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD **v98;
  _DWORD *v99;
  uint64_t v100;
  _DWORD **v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v106;
  uint64_t v107;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(112 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 104);
    do
    {
      *(v10 - 4) = 0;
      *(v10 - 3) = 0;
      *(_OWORD *)(v10 - 11) = 0uLL;
      *(_OWORD *)(v10 - 9) = 0uLL;
      *(_OWORD *)(v10 - 7) = 0uLL;
      *((_DWORD *)v10 - 10) = 0;
      v10[1] = 0;
      v10[2] = 0;
      *v10 = 0;
      *(v10 - 2) = v10;
      *(v10 - 1) = 1;
      v10 += 14;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v106 = v4;
    v103 = v5;
    while (1)
    {
      v14 = (__int128 *)(v4 + 112 * v11);
      if (!*(_BYTE *)v14)
      {
        if (*((float *)v14 + 1) == 0.0
          && (float)((float)*((__int16 *)v14 + 4) * 0.25) == 0.0
          && ((float)((float)*((__int16 *)v14 + 5) * 0.25) == 0.0 ? (v15 = *((_BYTE *)v14 + 14) == 0) : (v15 = 0),
              v15 ? (v16 = *((_QWORD *)v14 + 2) == 0) : (v16 = 0),
              v16 ? (v17 = *((_QWORD *)v14 + 3) == 0) : (v17 = 0),
              v17 ? (v18 = *((_QWORD *)v14 + 4) == 0) : (v18 = 0),
              v18 ? (v19 = *((_BYTE *)v14 + 48) == 0) : (v19 = 0),
              v19 ? (v20 = *((_DWORD *)v14 + 17) == 0) : (v20 = 0),
              v20))
        {
          v75 = v4 + 112 * v11;
          v76 = v75 + 72;
          v77 = *(unsigned int *)(v75 + 84);
          if ((_DWORD)v77)
          {
            v100 = 16 * v77;
            v101 = (_DWORD **)(*(_QWORD *)v76 + 8);
            do
            {
              v102 = *v101;
              *v101 = 0;
              if (v102)
              {
                if (v102[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v102 + 8))(v102);
                else
                  --v102[2];
              }
              v101 += 2;
              v100 -= 16;
            }
            while (v100);
          }
          v78 = *(WTF **)v76;
          if (v76 + 16 != *(_QWORD *)v76 && v78 != 0)
          {
            *(_QWORD *)v76 = 0;
            *(_DWORD *)(v76 + 8) = 0;
            WTF::fastFree(v78, v8);
          }
          v80 = *((unsigned int *)v14 + 17);
          v81 = (WTF *)*((_QWORD *)v14 + 7);
          if ((_DWORD)v80)
          {
            v82 = (WTF *)((char *)v81 + 16 * v80);
            do
            {
              v83 = *((_QWORD *)v81 + 1);
              if ((v83 & 0x8000000000000) != 0)
              {
                v84 = v81;
                v85 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v86 = __ldaxr(v85);
                  v87 = v86 - 1;
                }
                while (__stlxr(v87, v85));
                v4 = v106;
                v13 = v103;
                if (!v87)
                {
                  atomic_store(1u, v85);
                  WTF::fastFree((WTF *)v85, v8);
                  v81 = v84;
                }
              }
              v81 = (WTF *)((char *)v81 + 16);
            }
            while (v81 != v82);
            v81 = (WTF *)*((_QWORD *)v14 + 7);
          }
          if (v81)
          {
            *((_QWORD *)v14 + 7) = 0;
            *((_DWORD *)v14 + 16) = 0;
            WTF::fastFree(v81, v8);
          }
          v91 = *((_QWORD *)v14 + 4);
          *((_QWORD *)v14 + 4) = 0;
          if (v91)
            WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v91, (WTF::StringImpl *)v8);
          v92 = (WTF::StringImpl *)*((_QWORD *)v14 + 3);
          *((_QWORD *)v14 + 3) = 0;
          if (v92)
          {
            if (*(_DWORD *)v92 == 2)
              WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v92 -= 2;
          }
        }
        else
        {
          v21 = *a1;
          v107 = v12;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = WTF::TupleHash<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>::hash<0ul>(v4 + 112 * v11);
          for (i = 0; ; v23 = i + v25)
          {
            v25 = v23 & v22;
            v26 = v21 + 112 * (v23 & v22);
            if (!*(_BYTE *)v26 && *(float *)(v26 + 4) == 0.0 && (float)((float)*(__int16 *)(v26 + 8) * 0.25) == 0.0)
            {
              v27 = (float)((float)*(__int16 *)(v26 + 10) * 0.25) == 0.0 && *(_BYTE *)(v26 + 14) == 0;
              v28 = v27 && *(_QWORD *)(v26 + 16) == 0;
              v29 = v28 && *(_QWORD *)(v26 + 24) == 0;
              v30 = v29 && *(_QWORD *)(v26 + 32) == 0;
              v31 = v30 && *(_BYTE *)(v26 + 48) == 0;
              if (v31 && *(_DWORD *)(v26 + 68) == 0)
                break;
            }
            ++i;
          }
          v33 = v21 + 112 * v25;
          v34 = v33 + 72;
          v35 = *(unsigned int *)(v33 + 84);
          if ((_DWORD)v35)
          {
            v88 = 16 * v35;
            v89 = (_DWORD **)(*(_QWORD *)v34 + 8);
            do
            {
              v90 = *v89;
              *v89 = 0;
              if (v90)
              {
                if (v90[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v90 + 8))(v90);
                else
                  --v90[2];
              }
              v89 += 2;
              v88 -= 16;
            }
            while (v88);
          }
          v36 = *(WTF **)v34;
          if (v34 + 16 != *(_QWORD *)v34 && v36 != 0)
          {
            *(_QWORD *)v34 = 0;
            *(_DWORD *)(v34 + 8) = 0;
            WTF::fastFree(v36, v8);
          }
          v39 = (WTF **)(v26 + 56);
          v38 = *(WTF **)(v26 + 56);
          v40 = *(unsigned int *)(v26 + 68);
          if ((_DWORD)v40)
          {
            v41 = (WTF *)((char *)v38 + 16 * v40);
            do
            {
              v42 = *((_QWORD *)v38 + 1);
              if ((v42 & 0x8000000000000) != 0)
              {
                v43 = v38;
                v44 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v45 = __ldaxr(v44);
                  v46 = v45 - 1;
                }
                while (__stlxr(v46, v44));
                if (!v46)
                {
                  atomic_store(1u, v44);
                  WTF::fastFree((WTF *)v44, v8);
                  v38 = v43;
                }
              }
              v38 = (WTF *)((char *)v38 + 16);
            }
            while (v38 != v41);
            v38 = *v39;
            v4 = v106;
          }
          if (v38)
          {
            *(_QWORD *)(v26 + 56) = 0;
            *(_DWORD *)(v26 + 64) = 0;
            WTF::fastFree(v38, v8);
          }
          v47 = *(_QWORD *)(v26 + 32);
          *(_QWORD *)(v26 + 32) = 0;
          if (v47)
            WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v47, (WTF::StringImpl *)v8);
          result = *(WTF::StringImpl **)(v26 + 24);
          *(_QWORD *)(v26 + 24) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)result -= 2;
          }
          v49 = *v14;
          *(_QWORD *)(v26 + 16) = *((_QWORD *)v14 + 2);
          *(_OWORD *)v26 = v49;
          v50 = *((_QWORD *)v14 + 3);
          *((_QWORD *)v14 + 3) = 0;
          *(_QWORD *)(v26 + 24) = v50;
          v51 = *((_QWORD *)v14 + 4);
          *((_QWORD *)v14 + 4) = 0;
          *(_QWORD *)(v26 + 32) = v51;
          v52 = *((_QWORD *)v14 + 5);
          *(_DWORD *)(v26 + 48) = *((_DWORD *)v14 + 12);
          *(_QWORD *)(v26 + 40) = v52;
          *v39 = 0;
          *(_QWORD *)(v26 + 64) = 0;
          v53 = *((_QWORD *)v14 + 7);
          *((_QWORD *)v14 + 7) = 0;
          *(_QWORD *)(v26 + 56) = v53;
          LODWORD(v53) = *((_DWORD *)v14 + 16);
          *((_DWORD *)v14 + 16) = 0;
          *(_DWORD *)(v26 + 64) = v53;
          LODWORD(v53) = *((_DWORD *)v14 + 17);
          *((_DWORD *)v14 + 17) = 0;
          *(_DWORD *)(v26 + 68) = v53;
          v54 = v4 + 112 * v11;
          v57 = *(_DWORD *)(v54 + 84);
          v55 = (unsigned int *)(v54 + 84);
          v56 = v57;
          v58 = v21 + 112 * v25;
          *(_DWORD *)(v58 + 80) = 1;
          v59 = (_DWORD *)(v58 + 80);
          v60 = (uint64_t)(v59 + 2);
          *(_QWORD *)v34 = v59 + 2;
          v59[1] = v57;
          if (v57 >= 2)
          {
            if (v56 >> 28)
            {
              __break(0xC471u);
              return result;
            }
            v60 = WTF::fastMalloc((WTF *)(16 * v56));
            *v59 = v56;
            *(_QWORD *)v34 = v60;
          }
          v61 = v55 - 3;
          v62 = *v55;
          v63 = *(WTF **)(v55 - 3);
          if ((_DWORD)v62)
          {
            v93 = 0;
            v4 = v106;
            do
            {
              v94 = (_QWORD *)(v60 + v93);
              v95 = (char *)v63 + v93;
              *v94 = *(_QWORD *)((char *)v63 + v93);
              v96 = *(_QWORD *)((char *)v63 + v93 + 8);
              ++*(_DWORD *)(v96 + 8);
              v94[1] = v96;
              v93 += 16;
            }
            while (v95 + 16 != (char *)v63 + 16 * v62);
            *(_BYTE *)(v21 + 112 * v25 + 104) = *(_BYTE *)(v106 + 112 * v11 + 104);
            v97 = 16 * v62;
            v98 = (_DWORD **)((char *)v63 + 8);
            do
            {
              v99 = *v98;
              *v98 = 0;
              if (v99)
              {
                if (v99[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v99 + 8))(v99);
                else
                  --v99[2];
              }
              v98 += 2;
              v97 -= 16;
            }
            while (v97);
            v63 = *(WTF **)v61;
          }
          else
          {
            v4 = v106;
            *(_BYTE *)(v21 + 112 * v25 + 104) = *(_BYTE *)(v106 + 112 * v11 + 104);
          }
          if (v61 + 4 != (unsigned int *)v63 && v63 != 0)
          {
            *(_QWORD *)v61 = 0;
            v61[2] = 0;
            WTF::fastFree(v63, v8);
          }
          v65 = *((unsigned int *)v14 + 17);
          v66 = (WTF *)*((_QWORD *)v14 + 7);
          if ((_DWORD)v65)
          {
            v67 = (WTF *)((char *)v66 + 16 * v65);
            do
            {
              v68 = *((_QWORD *)v66 + 1);
              if ((v68 & 0x8000000000000) != 0)
              {
                v69 = v66;
                v70 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v71 = __ldaxr(v70);
                  v72 = v71 - 1;
                }
                while (__stlxr(v72, v70));
                v4 = v106;
                if (!v72)
                {
                  atomic_store(1u, v70);
                  WTF::fastFree((WTF *)v70, v8);
                  v66 = v69;
                }
              }
              v66 = (WTF *)((char *)v66 + 16);
            }
            while (v66 != v67);
            v66 = (WTF *)*((_QWORD *)v14 + 7);
          }
          if (v66)
          {
            *((_QWORD *)v14 + 7) = 0;
            *((_DWORD *)v14 + 16) = 0;
            WTF::fastFree(v66, v8);
          }
          v73 = *((_QWORD *)v14 + 4);
          *((_QWORD *)v14 + 4) = 0;
          if (v73)
            WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v73, (WTF::StringImpl *)v8);
          v74 = (WTF::StringImpl *)*((_QWORD *)v14 + 3);
          *((_QWORD *)v14 + 3) = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v74 -= 2;
          }
          v13 = v103;
          v12 = v107;
          if (v14 == a3)
            v12 = v26;
        }
      }
      if (++v11 == v13)
        goto LABEL_159;
    }
  }
  v12 = 0;
  result = 0;
  if (v4)
  {
LABEL_159:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return (WTF::StringImpl *)v12;
  }
  return result;
}

_QWORD *WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,int>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  unsigned int *v13;
  _QWORD *v14;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
    goto LABEL_3;
  v7 = v5 << (6 * v6 >= 2 * v5);
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v10 = 0;
  if (v5)
  {
    v12 = v5;
    v13 = (unsigned int *)v4;
    do
    {
      if (*v13 + 1 >= 2)
      {
        v14 = (_QWORD *)WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,int>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHash>,std::array<char,4ul>>(a1, v13);
        *v14 = *(_QWORD *)v13;
        if (v13 == a2)
          v10 = v14;
      }
      v13 += 2;
      --v12;
    }
    while (v12);
    goto LABEL_12;
  }
  result = 0;
  if (v4)
  {
LABEL_12:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  void *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (uint64_t *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::reinsert(*a1, v14);
          WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::~WeakRef((WTF **)v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::~WeakRef((WTF **)v14, v10);
        }
      }
      ++v14;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MessagePortChannel,WTF::RawPtrTraits<WebCore::MessagePortChannel>,WTF::DefaultRefDerefTraits<WebCore::MessagePortChannel>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  WebCore::MessagePortChannel **v10;
  WebCore::MessagePortChannel *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::MessagePortChannel **v21;
  WebCore::MessagePortChannel *v22;
  WebCore::MessagePortChannel *v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WebCore::MessagePortChannel **)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != (WebCore::MessagePortChannel *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (WebCore::MessagePortChannel **)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
            WTF::RefCounted<WebCore::MessagePortChannel>::deref(v23);
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  WebCore::MutationObserver *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (uint64_t *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::reinsert(*a1, v14);
          v16 = (WebCore::MutationObserver *)*v14;
          *v14 = 0;
          if (v16)
            WTF::RefCounted<WebCore::MutationObserver>::deref(v16, v10);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          *v14 = 0;
        }
      }
      ++v14;
      --v13;
    }
    while (v13);
    goto LABEL_16;
  }
  result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _DWORD *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (uint64_t *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::reinsert(*a1, v14);
          v16 = (_DWORD *)*v14;
          *v14 = 0;
          if (v16)
          {
            if (v16[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 72))(v16);
            else
              --v16[6];
          }
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          *v14 = 0;
        }
      }
      ++v14;
      --v13;
    }
    while (v13);
    goto LABEL_16;
  }
  result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v9 = result & v7;
  v10 = (uint64_t *)(v6 + 8 * (result & v7));
  v11 = *v10;
  v12 = *a3;
  if (*v10)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v11 == v12)
      {
        v23 = *a2;
        if (*a2)
          v24 = *(unsigned int *)(v23 - 4);
        else
          v24 = 0;
        v20 = 0;
        v19 = v23 + 8 * v24;
        goto LABEL_15;
      }
      if (v11 == -1)
        v21 = v10;
      v9 = (v9 + v22) & v7;
      v10 = (uint64_t *)(v6 + 8 * v9);
      v11 = *v10;
      ++v22;
    }
    while (*v10);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v10 = v21;
    }
  }
  *a3 = 0;
  result = *v10;
  *v10 = v12;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
    else
      --*(_DWORD *)(result + 24);
  }
  v13 = *a2;
  if (*a2)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_14;
LABEL_17:
    result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::expand(a2, v10);
    v10 = (uint64_t *)result;
    v15 = *a2;
    if (*a2)
      v18 = *(unsigned int *)(v15 - 4);
    else
      v18 = 0;
    goto LABEL_14;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_17;
LABEL_14:
  v19 = v15 + 8 * v18;
  v20 = 1;
LABEL_15:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = v20;
  return result;
}

uint64_t *WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t *result;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v13 = (uint64_t *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          v16 = v6;
          v14 = WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::reinsert(*a1, v13);
          WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(v13, v15);
          if (v13 == a3)
            v11 = v14;
          v6 = v16;
        }
        else
        {
          WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(v13, v10);
        }
      }
      v13 += 3;
      --v7;
    }
    while (v7);
    goto LABEL_15;
  }
  result = 0;
  if (v6)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (WTF::StringImpl *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = 0;
          v18 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v19 = v18 & v16;
            v18 = ++v17 + v19;
          }
          while (*(_QWORD *)(v15 + 16 * v19));
          v20 = v15 + 16 * v19;
          *(_QWORD *)v20 = 0;
          v21 = *v13;
          *v13 = 0;
          *(_QWORD *)v20 = v21;
          *(_WORD *)(v20 + 8) = *(_WORD *)(v6 + 16 * v11 + 8);
          v22 = *v13;
          *v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v10);
            else
              *(_DWORD *)v22 -= 2;
          }
          if (v13 == a3)
            v12 = v20;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(uint64_t *a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_OWORD *)(v6 + 24 * v13);
      if (*(_QWORD *)v15 != -1)
      {
        if (*v15 == 0)
        {
          v16 = v6 + 24 * v13;
          v17 = *(unsigned int **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v10);
            }
          }
        }
        else
        {
          WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::reinsert(*a1, (unint64_t *)(v6 + 24 * v13));
          v21 = v6 + 24 * v13;
          v22 = *(unsigned int **)(v21 + 16);
          *(_QWORD *)(v21 + 16) = 0;
          if (v22)
          {
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v22);
              v25 = v20;
              WTF::fastFree((WTF *)v22, v10);
              v20 = v25;
            }
          }
          if (v15 == a3)
            v14 = v20;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::WeakRef<WebCore::MessagePortChannel,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _DWORD *v34;
  _QWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *result;
  uint64_t *v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v52;
  unsigned int v53;
  unsigned __int16 v54;
  char v55;
  unsigned int *v56;
  unsigned int **v57;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v48 = v5;
    v49 = v4;
    while (1)
    {
      v14 = v4 + 40 * v11;
      v15 = *(unsigned int *)(v14 + 24);
      if ((_DWORD)v15 == -1)
        break;
      v57 = &v56;
      if ((((uint64_t (*)(unsigned int ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v15])(&v57, v4 + 40 * v11) & 1) == 0)
      {
        if (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v4 + 40 * v11)))
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v54 = 0;
          v55 = 0;
          v21 = *(unsigned int *)(v14 + 24);
          v56 = &v53;
          if ((_DWORD)v21 == -1)
            v22 = -1;
          else
            v22 = v21;
          v23 = (v22 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v22 - 1640531527) << 16) ^ ((unsigned __int16)v22 - 1640531527);
          v24 = (v22 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v22) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v22) + (v23 >> 11));
          v53 = v24 + (v24 >> 11);
          if ((_DWORD)v21 != -1)
          {
            v52 = v12;
            v57 = &v56;
            ((void (*)(unsigned int ***, uint64_t))off_1E344FC58[v21])(&v57, v4 + 40 * v11);
            v25 = v53;
            if (v55)
            {
              v43 = (v53 + v54) ^ ((v53 + v54) << 11);
              v25 = v43 + (v43 >> 17);
            }
            v26 = 0;
            v27 = (v25 ^ (8 * v25)) + ((v25 ^ (8 * v25)) >> 5);
            v28 = (v27 ^ (4 * v27)) + ((v27 ^ (4 * v27)) >> 15);
            v29 = v28 ^ (v28 << 10);
            if (!v29)
              v29 = 0x800000;
            while (1)
            {
              v30 = v29 & v20;
              v12 = v19 + 40 * (v29 & v20);
              v31 = *(unsigned int *)(v12 + 24);
              if ((_DWORD)v31 == -1)
                break;
              v57 = &v56;
              v32 = ((uint64_t (*)(unsigned int ***, uint64_t))off_1E344FC78[v31])(&v57, v19 + 40 * v30);
              v29 = ++v26 + v30;
              if (v32)
              {
                v33 = v19 + 40 * v30;
                v36 = *(_DWORD **)(v33 + 32);
                v35 = (_QWORD *)(v33 + 32);
                v34 = v36;
                *v35 = 0;
                v13 = v48;
                v4 = v49;
                if (v36)
                {
                  if (v34[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
                  else
                    --v34[2];
                }
                v37 = *(unsigned int *)(v12 + 24);
                if ((_DWORD)v37 != -1)
                  ((void (*)(unsigned int ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_17[v37])(&v57, v12);
                *(_BYTE *)v12 = 0;
                *(_DWORD *)(v12 + 24) = -1;
                v38 = *(unsigned int *)(v14 + 24);
                if ((_DWORD)v38 != -1)
                {
                  ((void (*)(unsigned int ***, uint64_t, uint64_t))off_1E344FC68[v38])(&v57, v12, v14);
                  *(_DWORD *)(v12 + 24) = v38;
                }
                v39 = v49 + 40 * v11;
                v40 = *(_QWORD *)(v39 + 32);
                *(_QWORD *)(v39 + 32) = 0;
                *v35 = v40;
                v41 = *(_DWORD **)(v39 + 32);
                *(_QWORD *)(v39 + 32) = 0;
                if (v41)
                {
                  if (v41[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
                  else
                    --v41[2];
                }
                v42 = *(unsigned int *)(v14 + 24);
                if ((_DWORD)v42 != -1)
                  ((void (*)(unsigned int ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_17[v42])(&v57, v14);
                *(_DWORD *)(v14 + 24) = -1;
                if (v14 != a3)
                  v12 = v52;
                goto LABEL_44;
              }
            }
          }
          break;
        }
        v16 = v4 + 40 * v11;
        v17 = *(_DWORD **)(v16 + 32);
        *(_QWORD *)(v16 + 32) = 0;
        if (v17)
        {
          if (v17[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
          else
            --v17[2];
        }
        v18 = *(unsigned int *)(v14 + 24);
        if ((_DWORD)v18 != -1)
          ((void (*)(unsigned int ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_17[v18])(&v57, v4 + 40 * v11);
        *(_DWORD *)(v14 + 24) = -1;
      }
LABEL_44:
      if (++v11 == v13)
        goto LABEL_50;
    }
    v45 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(v45, v46, v47);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (v4)
    {
LABEL_50:
      WTF::fastFree((WTF *)(v4 - 16), v8);
      return (uint64_t *)v12;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  void *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (uint64_t *)v6;
    do
    {
      if (*v16 != -1)
      {
        if (*v16)
        {
          v17 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(*a1, v16);
          WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>::~KeyValuePair((uint64_t)v16, v18);
          if (v16 == a3)
            v13 = v17;
        }
        else
        {
          WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>::~KeyValuePair((uint64_t)v16, v10);
        }
      }
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_15;
  }
  result = 0;
  if (v6)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<std::pair<WTF::URL,WTF::String>,WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<std::pair<WTF::URL,WTF::String>>,WTF::HashTraits<WTF::WeakPtr<WebCore::CachedResource,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v5, a2);
}

uint64_t WTF::Condition::waitUntilUnchecked<WTF::Lock>(uint64_t a1, unsigned __int8 *a2, WTF::TimeWithDynamicClockType *this)
{
  uint64_t *v5;
  uint64_t v6;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;

  v13 = WTF::TimeWithDynamicClockType::nowWithSameClock(this);
  v14 = v5;
  if (!WTF::TimeWithDynamicClockType::operator<())
  {
    v10 = a2;
    v11 = a1;
    v13 = (uint64_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
    v14 = &v13;
    v15 = &v11;
    v12[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
    v12[1] = v12;
    v12[2] = &v10;
    v6 = WTF::ParkingLot::parkConditionallyImpl() & 1;
    goto LABEL_3;
  }
  v9 = __ldxr(a2);
  if (v9 == 1)
  {
    if (!__stlxr(0, a2))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)a2);
LABEL_14:
  v6 = 0;
LABEL_3:
  if (__ldaxr(a2))
  {
    __clrex();
  }
  else if (!__stxr(1u, a2))
  {
    return v6;
  }
  MEMORY[0x19AEA534C](a2);
  return v6;
}

uint64_t WTF::HashSet<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, void *a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; v8 = (v8 + i++) & v4)
  {
    v10 = v8;
    result = *(_QWORD *)(v2 + 8 * v8);
    if (result != -1)
    {
      if (!result)
        return result;
      if (*(void **)(result + 8) == a2)
        break;
    }
  }
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  *(_QWORD *)(v2 + 8 * v8) = 0;
  if (*(_DWORD *)result == 1)
    WTF::fastFree((WTF *)result, a2);
  else
    --*(_DWORD *)result;
  *(_QWORD *)(v2 + 8 * v10) = -1;
  ++*(_DWORD *)(*a1 - 16);
  v12 = *a1;
  if (*a1)
    v13 = *(_DWORD *)(v12 - 12) - 1;
  else
    v13 = -1;
  *(_DWORD *)(v12 - 12) = v13;
  v14 = *a1;
  if (*a1)
  {
    v15 = 6 * *(_DWORD *)(v14 - 12);
    v16 = *(_DWORD *)(v14 - 4);
    if (v15 < v16 && v16 >= 9)
      WTF::HashTable<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v16 >> 1, 0);
  }
  return 1;
}

char *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, WTF *a2, unint64_t a3)
{
  char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  void *v20;

  v5 = *a1;
  if ((unint64_t)*a1 > a3 || (v6 = *((unsigned int *)a1 + 3), (unint64_t)&v5[v6] <= a3))
  {
    v14 = *((unsigned int *)a1 + 2);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= (unint64_t)a2)
      v17 = (unint64_t)a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (HIDWORD(v17))
        goto LABEL_30;
      v18 = *((unsigned int *)a1 + 3);
      v19 = (char *)WTF::fastMalloc((WTF *)v17);
      *((_DWORD *)a1 + 2) = v17;
      *a1 = v19;
      memcpy(v19, v5, v18);
      if (v5)
      {
        if (*a1 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return (char *)a3;
  }
  v7 = *((unsigned int *)a1 + 2);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= (unint64_t)a2)
    v10 = (unint64_t)a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!HIDWORD(v10))
    {
      v11 = (char *)WTF::fastMalloc((WTF *)v10);
      *((_DWORD *)a1 + 2) = v10;
      *a1 = v11;
      memcpy(v11, v5, v6);
      v13 = *a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *a1;
      }
      return &v13[a3 - (_QWORD)v5];
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1945B01CCLL);
  }
  v13 = *a1;
  return &v13[a3 - (_QWORD)v5];
}

unint64_t WTF::Vector<WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - (_QWORD)v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  return v3;
}

_QWORD *WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayerCA::LayerPropertyAnimation *>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t *WTF::Vector<WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t *WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2;
      if (*a2)
        ++*(_DWORD *)(v9 + 8);
      *(_QWORD *)(v7 + 8 * v8) = v9;
      ++a2;
      ++v8;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

void **WTF::Vector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  int v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *result;
      v5 = *((unsigned int *)result + 3);
      v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *v3 = v6;
      result = (void **)memcpy(v6, v4, 8 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - (_QWORD)v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  return v3;
}

uint64_t *WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>&>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  if (*result)
    ++*(_DWORD *)(v6 + 8);
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  __int128 v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = 16 * v8;
      v12 = v7;
      do
      {
        v13 = *(_OWORD *)v12;
        v12 = (WTF *)((char *)v12 + 16);
        *v9++ = v13;
        v11 -= 16;
      }
      while (v11);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

int **WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(int **result, _DWORD *a2)
{
  WTF *v2;
  _DWORD *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  int **v12;

  v3 = result + 2;
  v2 = (WTF *)*result;
  if (*result != (int *)(result + 2))
  {
    v10 = result + 2;
    v11 = a2;
    v12 = result;
    if (v2)
    {
      *result = 0;
      *((_DWORD *)result + 2) = 0;
      WTF::fastFree(v2, a2);
    }
    result = v12;
    v3 = v10;
    a2 = v11;
    *v12 = v10;
  }
  v4 = *(int **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v5 = a2[3];
    if ((_DWORD)v5)
    {
      v6 = 4 * v5;
      do
      {
        v7 = *v4++;
        *v3++ = v7;
        v6 -= 4;
      }
      while (v6);
    }
    v8 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *result = v4;
    v8 = a2[2];
    a2[2] = 16;
  }
  *((_DWORD *)result + 2) = v8;
  v9 = a2[3];
  a2[3] = 0;
  *((_DWORD *)result + 3) = v9;
  return result;
}

void **WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, WTF *this)
{
  int v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < (unint64_t)this)
  {
    v2 = (int)this;
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = (uint64_t)result;
      v4 = *result;
      v5 = *((unsigned int *)result + 3);
      v6 = (void *)WTF::fastMalloc(this);
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = v6;
      result = (void **)memcpy(v6, v4, v5);
      if (v4)
      {
        if (*(void **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, void *a2)
{
  unsigned int *v2;

  if (result[2] > (unint64_t)a2)
  {
    v2 = result;
    if (result[3] > (unint64_t)a2)
      result[3] = a2;
    result = *(unsigned int **)result;
    if (a2)
    {
      v2[2] = a2;
      result = (unsigned int *)WTF::fastRealloc((WTF *)result, a2);
      *(_QWORD *)v2 = result;
    }
    else if (result)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3 && (unint64_t)v5 + *(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - (_QWORD)v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > (unint64_t)a2)
      a2 = (WTF *)v11;
    WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > (unint64_t)a2)
      a2 = (WTF *)v7;
    WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeEffect::AcceleratedAction&>(uint64_t a1, unint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;

  v3 = (_BYTE *)WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_BYTE *)(*(_QWORD *)a1 + v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (_QWORD *)v6;
      v9 = 8 * v5;
      v10 = v4;
      do
      {
        v11 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        *v8 = v11;
        v12 = *(_QWORD *)v10;
        if (*(_QWORD *)v10)
        {
          {
            WebCore::GCReachableRefMap::map(void)::map = 0;
          }
          v14 = v12;
          if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v14))*(_QWORD *)(v12 + 16) &= ~0x4000000000000uLL;
          v13 = *(_QWORD *)v10;
          *(_QWORD *)v10 = 0;
          if (v13)
          {
            if (*(_DWORD *)(v13 + 24) == 2)
            {
              if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v13);
            }
            else
            {
              *(_DWORD *)(v13 + 24) -= 2;
            }
          }
        }
        else
        {
          *(_QWORD *)v10 = 0;
        }
        ++v8;
        v10 = (WTF *)((char *)v10 + 8);
        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_BYTE *WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::KeyframeEffect::AcceleratedAction>(uint64_t a1, unint64_t a2)
{
  _BYTE *result;
  uint64_t v4;

  result = (_BYTE *)WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_BYTE *)(*(_QWORD *)a1 + v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

WTF::StringImpl *WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  int v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF::StringImpl **)result;
      v5 = (WTF::StringImpl *)(*(_QWORD *)result + 32 * *((unsigned int *)result + 3));
      v6 = WTF::fastMalloc((WTF *)(32 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *(_QWORD *)v3 = v6;
      result = WTF::VectorMover<false,WebCore::MimeClassInfo>::move(v4, v5, v6);
      if (v4)
      {
        if (*(WTF::StringImpl **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (WTF::StringImpl *)WTF::fastFree(v4, v7);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 32 * (unint64_t)a1[3] > a3)
  {
    v9 = a3 - v5;
    v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MimeClassInfo&>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;

  v3 = WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  return WebCore::MimeClassInfo::MimeClassInfo(*(_QWORD *)a1 + 32 * a1[3]++, v3);
}

WTF *WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(WTF *result, void *a2)
{
  WTF *v2;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    if (*((_DWORD *)result + 3))
      WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, 0);
    result = *(WTF **)v2;
    if ((WTF *)((char *)v2 + 16) != *(WTF **)v2 && result != 0)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      WTF::fastFree(result, a2);
      result = *(WTF **)v2;
    }
    if (!result)
    {
      *(_QWORD *)v2 = (char *)v2 + 16;
      *((_DWORD *)v2 + 2) = 4;
    }
  }
  return result;
}

void **WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  int v2;
  void **v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (void **)*result;
    v5 = *((unsigned int *)result + 3);
    if (a2 < 5)
    {
      v6 = result + 2;
      *v3 = v3 + 2;
      *((_DWORD *)v3 + 2) = 4;
    }
    else
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *v3 = v6;
    }
    result = (void **)memcpy(v6, v4, 16 * v5);
    if (v3 + 2 != v4 && v4 != 0)
    {
      if (*v3 == v4)
      {
        *v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 5)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
    goto LABEL_13;
  }
  if (!(v9 >> 28))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 16 * v10);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;

  v4 = *(_DWORD *)(a1 + 12);
  if (v4)
    WTF::VectorDestructor<true,WebCore::PluginInfo>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 56 * v4));
  WTF::VectorBuffer<WTF::Function<void ()(void)>,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

uint64_t WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::PluginInfo>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 56 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DOMTimer::DOMTimer(WebCore::ScriptExecutionContext &,WTF::Function<void ()(WebCore::ScriptExecutionContext &)> &&,WTF::Seconds,WebCore::DOMTimer::Type)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33FE4F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::UniqueRef<WebCore::ParentalControlsContentFilter> (*)(void),WTF::UniqueRef<WebCore::PlatformContentFilter>>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t WTF::Detail::CallableWrapper<WTF::UniqueRef<WebCore::NetworkExtensionContentFilter> (*)(void),WTF::UniqueRef<WebCore::PlatformContentFilter>>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ScriptableDocumentParser::*&)(void),WebCore::ScriptableDocumentParser*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unsigned __int8 *WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction(uint64_t a1)
{
  unsigned __int8 *result;
  int v2;

  result = **(unsigned __int8 ***)(a1 + 16);
  v2 = __ldxr(result);
  if (v2 == 1)
  {
    if (!__stlxr(0, result))
      return result;
  }
  else
  {
    __clrex();
  }
  return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
}

uint64_t WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction(uint64_t a1)
{
  atomic_store(1u, **(unsigned __int8 ***)(a1 + 16));
  return 1;
}

uint64_t WTF::VectorTypeOperations<WebCore::RenderTableSection::CellStruct>::destruct(uint64_t result, void *a2)
{
  WTF *v2;
  void *v4;
  uint64_t v5;

  for (; (void *)result != a2; result += 32)
  {
    v2 = *(WTF **)result;
    if (result + 16 != *(_QWORD *)result && v2 != 0)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      v4 = a2;
      v5 = result;
      WTF::fastFree(v2, a2);
      a2 = v4;
      result = v5;
    }
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::FontDatabase::InstalledFont>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::FontDatabase::InstalledFont>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::FontDatabase::InstalledFont,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FontDatabase::InstalledFont>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t Table;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF *v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  Table = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::FontDatabase::InstalledFont>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::FontDatabase::InstalledFont>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::FontDatabase::InstalledFont,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FontDatabase::InstalledFont>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::allocateTable(a2);
  *(_QWORD *)a1 = Table;
  *(_DWORD *)(a1 + 8) = a2;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(Table);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v9 = v5;
    do
    {
      if (*(_QWORD *)v9)
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::FontDatabase::InstalledFont>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::FontDatabase::InstalledFont>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::FontDatabase::InstalledFont,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FontDatabase::InstalledFont>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert(a1, (uint64_t)v9);
      WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>::~KeyValuePair((uint64_t)v9, v8);
      v9 = (WTF *)((char *)v9 + 32);
      --v4;
    }
    while (v4);
    return WTF::fastFree(v5, v8);
  }
  if (v5)
    return WTF::fastFree(v5, v8);
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::FontDatabase::InstalledFont>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::FontDatabase::InstalledFont>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::FontDatabase::InstalledFont,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::FontDatabase::InstalledFont>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::allocateTable(unsigned int a1)
{
  uint64_t result;
  uint64_t v3;
  _OWORD *v4;

  result = WTF::fastMalloc((WTF *)(32 * a1));
  if (a1)
  {
    v3 = a1;
    v4 = (_OWORD *)(result + 16);
    do
    {
      *(v4 - 1) = 0uLL;
      *v4 = 0uLL;
      *(_QWORD *)v4 = 112591708776040000;
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reserveInitialCapacity(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t result;

  v3 = WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::EventTypeInfo,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::EventTypeInfo>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::computeBestTableSize(a2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  v5 = WTF::fastZeroedMalloc((WTF *)(8 * v4));
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = 0;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v5);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::EventTypeInfo>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::EventTypeInfo,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::EventTypeInfo>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = ((v2 | HIWORD(v2)) + 1) << (20 * (unint64_t)a1 >= 19 * (unint64_t)((v2 | HIWORD(v2)) + 1));
  v4 = v3 << ((double)v3 * 0.754166667 <= (double)a1);
  if (v4 <= 8)
    return 8;
  else
    return v4;
}

uint64_t WTF::NeverDestroyed<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::AnyThreadsAccessTraits>::NeverDestroyed<std::initializer_list<WTF::String>>(uint64_t result, unint64_t a2)
{
  int v2;
  _DWORD **v3;
  uint64_t v4;
  unsigned int v5;
  _DWORD *v6;

  WebCore::dummyPDFPluginNames(void)::dummyPluginNames = 0;
  *(_QWORD *)&dword_1EE337DF0 = 0;
  if (a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = (_DWORD **)result;
      v4 = 8 * a2;
      result = WTF::fastMalloc((WTF *)(8 * a2));
      dword_1EE337DF0 = v2;
      WebCore::dummyPDFPluginNames(void)::dummyPluginNames = result;
      v5 = dword_1EE337DF4;
      do
      {
        v6 = *v3;
        if (*v3)
          *v6 += 2;
        *(_QWORD *)(result + 8 * v5) = v6;
        ++v3;
        ++v5;
        v4 -= 8;
      }
      while (v4);
      dword_1EE337DF4 = v5;
    }
  }
  return result;
}

WebCore::QualifiedName *WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>(WebCore::QualifiedName *a1, WTF::StringImpl **a2, uint64_t a3, WTF::StringImpl **a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  WTF::AtomString::AtomString(&v10, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  WebCore::QualifiedName::QualifiedName(a1, a2, &v10, a4);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

unsigned int *WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::EventLoopTimer>(unsigned int *result, _QWORD *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = result[3];
  v5 = result[2] + 1;
  result[2] = v5;
  if (v5 > v4)
  {
    v7 = *(_QWORD *)result;
    if (!*(_QWORD *)result)
    {
LABEL_6:
      LODWORD(v7) = 0;
      v3[2] = 0;
LABEL_7:
      v8 = v7;
LABEL_8:
      v3[3] = 2 * v8;
      goto LABEL_2;
    }
    v9 = *(unsigned int *)(v7 - 4);
    if (!(_DWORD)v9)
      goto LABEL_26;
    v10 = 0;
    do
    {
      v11 = --v9;
      result = *(unsigned int **)(v7 + 8 * v9);
      if ((unint64_t)result + 1 >= 2 && !*((_QWORD *)result + 1))
      {
        *(_QWORD *)(v7 + 8 * v9) = 0;
        do
        {
          v12 = __ldaxr(result);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, result));
        if (!v13)
        {
          atomic_store(1u, result);
          v19 = v9;
          v20 = v7;
          v18 = v10;
          v21 = v9;
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          v7 = v20;
          v11 = v21;
          v9 = v19;
          v10 = v18;
        }
        *(_QWORD *)(v7 + 8 * v11) = -1;
        ++v10;
      }
    }
    while (v11);
    v7 = *(_QWORD *)v3;
    if (v10)
    {
      *(_DWORD *)(v7 - 16) += v10;
      v16 = *(_QWORD *)v3;
      if (*(_QWORD *)v3)
        v17 = *(_DWORD *)(v16 - 12);
      else
        v17 = 0;
      *(_DWORD *)(v16 - 12) = v17 - v10;
      v7 = *(_QWORD *)v3;
    }
    if (!v7)
      goto LABEL_6;
    v14 = *(_DWORD *)(v7 - 4);
    if (v14 < 9 || 6 * *(_DWORD *)(v7 - 12) >= v14)
    {
LABEL_26:
      v3[2] = 0;
    }
    else
    {
      result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)v3);
      v7 = *(_QWORD *)v3;
      v3[2] = 0;
      if (!v7)
        goto LABEL_7;
    }
    LODWORD(v7) = *(_DWORD *)(v7 - 12);
    v8 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_2:
  v6 = (WTF *)a2[7];
  if (v6)
  {
    if (*((_QWORD *)v6 + 1))
      return (unsigned int *)WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)v3, v6);
  }
  return result;
}

WTF **WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  WTF **result;
  WTF *v4;

  result = _ZN3WTF9HashTableINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_12KeyValuePairIS7_jEENS_24KeyValuePairKeyExtractorIS9_EENS_11DefaultHashIS7_EENS_7HashMapIS7_jSD_NS_10HashTraitsIS7_EENSF_IjEENS_15HashTableTraitsEE18KeyValuePairTraitsESG_E8removeIfIZNS_11WeakHashMapIN7WebCore13RenderElementEjS2_E20removeNullReferencesEvEUlRT_E_EEbRKSR_((WTF **)a1, a2);
  *(_DWORD *)(a1 + 8) = 0;
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    LODWORD(v4) = *((_DWORD *)v4 - 3);
    if (v4 > 0x7FFFFFFE)
      LODWORD(v4) = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 12) = 2 * (_DWORD)v4;
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  WTF **v7;
  WTF *v8;
  uint64_t v9;
  unsigned int ***v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  unsigned int v29;
  unsigned int **v30;
  uint64_t v31;

  if (*(_QWORD *)result)
  {
    v31 = result;
    v4 = *(_QWORD *)result;
    v5 = *(_DWORD *)(*(_QWORD *)result - 4);
    if (!v5)
      goto LABEL_34;
    v6 = 0;
    do
    {
      v7 = (WTF **)(v4 + 24 * --v5);
      v8 = *v7;
      if ((unint64_t)*v7 + 1 >= 2 && !*((_QWORD *)v8 + 1))
      {
        *v7 = 0;
        if (*(_DWORD *)v8 == 1)
          WTF::fastFree(v8, a2);
        else
          --*(_DWORD *)v8;
        *v7 = (WTF *)-1;
        v9 = v4 + 24 * v5;
        v10 = (unsigned int ***)(v9 + 8);
        v11 = *(unsigned int *)(v9 + 20);
        if ((_DWORD)v11)
        {
          v12 = *v10;
          v13 = (uint64_t)&(*v10)[v11];
          do
          {
            v14 = *v12;
            *v12 = 0;
            if (v14)
            {
              do
              {
                v15 = __ldaxr(v14);
                v16 = v15 - 1;
              }
              while (__stlxr(v16, v14));
              if (!v16)
              {
                atomic_store(1u, v14);
                v30 = v12;
                WTF::fastFree((WTF *)v14, a2);
                v12 = v30;
              }
            }
            ++v12;
          }
          while (v12 != (unsigned int **)v13);
        }
        v17 = (WTF *)*v10;
        if (*v10)
        {
          *v10 = 0;
          *(_DWORD *)(v4 + 24 * v5 + 16) = 0;
          WTF::fastFree(v17, a2);
        }
        ++v6;
      }
    }
    while (v5);
    v4 = *(_QWORD *)v31;
    if (v6)
    {
      *(_DWORD *)(v4 - 16) += v6;
      v18 = *(_QWORD *)v31;
      if (*(_QWORD *)v31)
        v19 = *(_DWORD *)(v18 - 12);
      else
        v19 = 0;
      *(_DWORD *)(v18 - 12) = v19 - v6;
      v4 = *(_QWORD *)v31;
    }
    result = v31;
    if (!v4)
      goto LABEL_2;
    v20 = *(_DWORD *)(v4 - 4);
    v21 = *(unsigned int *)(v4 - 12);
    if (v20 < 9 || 6 * (int)v21 >= v20)
    {
LABEL_34:
      *(_DWORD *)(v31 + 8) = 0;
      goto LABEL_47;
    }
    v23 = (v21 - 1) | ((v21 - 1) >> 1) | ((((_DWORD)v21 - 1) | ((v21 - 1) >> 1)) >> 2);
    v24 = v23 | (v23 >> 4) | ((v23 | (v23 >> 4)) >> 8);
    v25 = (v24 | HIWORD(v24)) + 1;
    if (v25 > 0x400)
    {
      if (v25 > 2 * v21)
        goto LABEL_40;
    }
    else if (3 * v25 > 4 * v21)
    {
LABEL_38:
      v26 = (double)v21;
      v27 = (double)v25;
      v28 = 0.604166667;
      goto LABEL_41;
    }
    LODWORD(v25) = 2 * v25;
    if (v25 <= 0x400)
      goto LABEL_38;
LABEL_40:
    v26 = (double)v21;
    v27 = (double)v25;
    v28 = 0.416666667;
LABEL_41:
    if (v27 * v28 <= v26)
      LODWORD(v25) = 2 * v25;
    if (v25 <= 8)
      v29 = 8;
    else
      v29 = v25;
    WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)v31, v29, 0);
    v2 = *(_QWORD *)v31;
    *(_DWORD *)(v31 + 8) = 0;
    v4 = v2;
    if (!v2)
    {
      result = v31;
      goto LABEL_3;
    }
LABEL_47:
    LODWORD(v2) = *(_DWORD *)(v4 - 12);
    v3 = 0x7FFFFFFF;
    result = v31;
    if (v2 >= 0x7FFFFFFF)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_2:
  LODWORD(v2) = 0;
  *(_DWORD *)(result + 8) = 0;
LABEL_3:
  v3 = v2;
LABEL_4:
  *(_DWORD *)(result + 12) = 2 * v3;
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::MimeClassInfo>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  for (; result != a2; a3 += 32)
  {
    v5 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)a3 = v5;
    v6 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = v6;
    v7 = *((_QWORD *)result + 2);
    *((_QWORD *)result + 2) = 0;
    *(_QWORD *)(a3 + 16) = v7;
    LODWORD(v7) = *((_DWORD *)result + 6);
    *((_DWORD *)result + 6) = 0;
    *(_DWORD *)(a3 + 24) = v7;
    LODWORD(v7) = *((_DWORD *)result + 7);
    *((_DWORD *)result + 7) = 0;
    *(_DWORD *)(a3 + 28) = v7;
    WebCore::MimeClassInfo::~MimeClassInfo(result, a2);
    result = (WTF::StringImpl *)(v8 + 32);
  }
  return result;
}

CFIndex WTF::Persistence::encodeCFData(WTF::Persistence *this, CFDataRef theData, const __CFData *a3)
{
  CFIndex result;

  CFDataGetBytePtr(theData);
  result = CFDataGetLength(theData);
  if (result < 0)
  {
    __break(0xC471u);
  }
  else
  {
    WTF::Persistence::Encoder::operator<<();
    return WTF::Persistence::Encoder::encodeFixedLengthData();
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<9u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 360; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<8u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 320; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<38u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 1520; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<24u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 960; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<23u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 920; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<20u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 800; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<17u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 680; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<16u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 640; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<14u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 560; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<12u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 480; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

void JSC::MacroAssemblerARM64::move(_DWORD *a1, int a2, int a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  if (a2 == a3)
    return;
  if (a2 == 63)
  {
    if (a3 != 31)
    {
      v6 = a3 & 0x1F | 0xD2800000;
      goto LABEL_11;
    }
LABEL_10:
    v6 = a3 | (32 * a2) | 0x91000000;
LABEL_11:
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 14), v6);
    return;
  }
  if (a2 == 31 || a3 == 31)
    goto LABEL_10;
  v4 = a3 & 0x1F | ((a2 & 0x1F) << 16) | 0xAA0003E0;
  v5 = a1[50];
  if (v5 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
    v5 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v5) = v4;
  a1[50] += 4;
}

uint64_t JSC::constructArray(uint64_t a1)
{
  JSC::VM *v1;

  v1 = *(JSC::VM **)(a1 + 56);
  if (*((_DWORD *)v1 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v1) & 1) != 0)
    return 0;
  else
    return JSC::constructArray();
}

unint64_t JSC::allocateCell<WebCore::JSDOMRectReadOnly>(WebCore::JSDOMRectReadOnly *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSDOMRectReadOnly::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSGeolocation>(WebCore::JSGeolocation *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSGeolocation::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::~MarkedVector(uint64_t a1, void *a2)
{
  uint64_t *v3;
  WTF *v4;
  _QWORD *v7;
  uint64_t v8;

  v3 = *(uint64_t **)(a1 + 24);
  if (v3)
  {
    v8 = a1 + 8;
    v7 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v3, &v8);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v3, v7);
  }
  v4 = *(WTF **)(a1 + 16);
  if (v4 != (WTF *)(a1 + 32) && v4 != 0)
    WTF::fastFree(v4, a2);
  return a1;
}

uint64_t WebFilterEvaluatorFunction(void)
{
  return qword_1ECE80DC8;
}

{
  return qword_1ECE81730;
}

uint64_t PAL::AccessibilityLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20AccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7D508 != -1)
    dispatch_once(&qword_1ECE7D508, block);
  return _MergedGlobals_53;
}

uint64_t ___ZN3PAL20AccessibilityLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/Accessibility.framework/Accessibility", 2);
  _MergedGlobals_53 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initAXCustomContent(PAL *this)
{
  if (qword_1ECE7D510 != -1)
    dispatch_once(&qword_1ECE7D510, &__block_literal_global);
  return qword_1ECE7D518;
}

uint64_t ___ZN3PALL19initAXCustomContentEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20AccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D508 == -1)
  {
    result = (uint64_t)objc_getClass("AXCustomContent");
    qword_1ECE7D518 = result;
    if (result)
    {
LABEL_3:
      PAL::getAXCustomContentClass[0] = PAL::AXCustomContentFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D508, block);
    result = (uint64_t)objc_getClass("AXCustomContent");
    qword_1ECE7D518 = result;
    if (result)
      goto LABEL_3;
  }
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AXCustomContentFunction(PAL *this)
{
  return qword_1ECE7D518;
}

uint64_t PAL::AppSSOLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13AppSSOLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7D528 != -1)
    dispatch_once(&qword_1ECE7D528, block);
  return _MergedGlobals_54;
}

uint64_t PAL::initSOAuthorizationHints(PAL *this)
{
  if (qword_1ECE7D590 != -1)
    dispatch_once(&qword_1ECE7D590, &__block_literal_global_13);
  return qword_1ECE7D598;
}

uint64_t PAL::get_AppSSO_SOAuthorizationOptionUserActionInitiated(PAL *this)
{
  if (qword_1ECE7D538 != -1)
    dispatch_once(&qword_1ECE7D538, &__block_literal_global_0);
  return qword_1ECE7D530;
}

uint64_t ___ZN3PAL51get_AppSSO_SOAuthorizationOptionUserActionInitiatedEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13AppSSOLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D528 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_54, "SOAuthorizationOptionUserActionInitiated");
    if (result)
    {
LABEL_3:
      qword_1ECE7D530 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D528, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_54, "SOAuthorizationOptionUserActionInitiated");
    if (result)
      goto LABEL_3;
  }
  result = 42;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AppSSO_SOAuthorizationOptionInitiatorOrigin(PAL *this)
{
  if (qword_1ECE7D548 != -1)
    dispatch_once(&qword_1ECE7D548, &__block_literal_global_4);
  return qword_1ECE7D540;
}

uint64_t ___ZN3PAL47get_AppSSO_SOAuthorizationOptionInitiatorOriginEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13AppSSOLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D528 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_54, "SOAuthorizationOptionInitiatorOrigin");
    if (result)
    {
LABEL_3:
      qword_1ECE7D540 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D528, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_54, "SOAuthorizationOptionInitiatorOrigin");
    if (result)
      goto LABEL_3;
  }
  result = 44;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AppSSO_SOAuthorizationOptionInitiatingAction(PAL *this)
{
  if (qword_1ECE7D558 != -1)
    dispatch_once(&qword_1ECE7D558, &__block_literal_global_6);
  return qword_1ECE7D550;
}

uint64_t ___ZN3PAL48get_AppSSO_SOAuthorizationOptionInitiatingActionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13AppSSOLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D528 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_54, "SOAuthorizationOptionInitiatingAction");
    if (result)
    {
LABEL_3:
      qword_1ECE7D550 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D528, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_54, "SOAuthorizationOptionInitiatingAction");
    if (result)
      goto LABEL_3;
  }
  result = 46;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AppSSO_SOErrorDomain(PAL *this)
{
  if (qword_1ECE7D568 != -1)
    dispatch_once(&qword_1ECE7D568, &__block_literal_global_8);
  return qword_1ECE7D560;
}

uint64_t ___ZN3PAL24get_AppSSO_SOErrorDomainEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13AppSSOLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D528 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_54, "SOErrorDomain");
    if (result)
    {
LABEL_3:
      qword_1ECE7D560 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D528, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_54, "SOErrorDomain");
    if (result)
      goto LABEL_3;
  }
  result = 48;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AppSSOCoreLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17AppSSOCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7D578 != -1)
    dispatch_once(&qword_1ECE7D578, block);
  return qword_1ECE7D570;
}

uint64_t ___ZN3PAL17AppSSOCoreLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppSSOCore.framework/AppSSOCore", 2);
  qword_1ECE7D570 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 50;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initSOAuthorizationHintsCore(PAL *this)
{
  if (qword_1ECE7D5A0 != -1)
    dispatch_once(&qword_1ECE7D5A0, &__block_literal_global_15);
  return qword_1ECE7D5A8;
}

uint64_t ___ZN3PALL24initSOAuthorizationHintsEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13AppSSOLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D528 == -1)
  {
    result = (uint64_t)objc_getClass("SOAuthorizationHints");
    qword_1ECE7D598 = result;
    if (result)
    {
LABEL_3:
      PAL::getSOAuthorizationHintsClass = (uint64_t)PAL::SOAuthorizationHintsFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D528, block);
    result = (uint64_t)objc_getClass("SOAuthorizationHints");
    qword_1ECE7D598 = result;
    if (result)
      goto LABEL_3;
  }
  result = 40;
  __break(0xC471u);
  return result;
}

uint64_t PAL::SOAuthorizationHintsFunction(PAL *this)
{
  return qword_1ECE7D598;
}

uint64_t ___ZN3PALL28initSOAuthorizationHintsCoreEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17AppSSOCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D578 == -1)
  {
    result = (uint64_t)objc_getClass("SOAuthorizationHintsCore");
    qword_1ECE7D5A8 = result;
    if (result)
    {
LABEL_3:
      PAL::getSOAuthorizationHintsCoreClass = (uint64_t)PAL::SOAuthorizationHintsCoreFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D578, block);
    result = (uint64_t)objc_getClass("SOAuthorizationHintsCore");
    qword_1ECE7D5A8 = result;
    if (result)
      goto LABEL_3;
  }
  result = 52;
  __break(0xC471u);
  return result;
}

uint64_t PAL::SOAuthorizationHintsCoreFunction(PAL *this)
{
  return qword_1ECE7D5A8;
}

uint64_t ___ZN3PAL19AudioToolboxLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 2);
  qword_1ECE7D5B8 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::AudioToolboxCoreLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL23AudioToolboxCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v3 = (char)this;
  if (qword_1ECE7D5D0 != -1)
    dispatch_once(&qword_1ECE7D5D0, block);
  return qword_1ECE7D5C8;
}

uint64_t ___ZN3PAL23AudioToolboxCoreLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AudioToolboxCore.framework/AudioToolboxCore", 2);
  qword_1ECE7D5C8 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initAudioToolboxAudioConverterGetPropertyInfo(PAL *this, OpaqueAudioConverter *a2, unsigned int a3, unsigned int *a4, unsigned __int8 *a5)
{
  if (PAL::initAudioToolboxAudioConverterGetPropertyInfo(OpaqueAudioConverter *,unsigned int,unsigned int *,unsigned char *)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioConverterGetPropertyInfo(OpaqueAudioConverter *,unsigned int,unsigned int *,unsigned char *)::once, &__block_literal_global_1);
  return PAL::softLinkAudioToolboxAudioConverterGetPropertyInfo(this, a2, a3, a4, (unsigned __int8 *)PAL::softLinkAudioToolboxAudioConverterGetPropertyInfo);
}

uint64_t PAL::initAudioToolboxAudioFormatGetPropertyInfo(PAL *this, unsigned int a2, unsigned int a3, const void *a4, unsigned int *a5)
{
  if (PAL::initAudioToolboxAudioFormatGetPropertyInfo(unsigned int,unsigned int,void const*,unsigned int *)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioFormatGetPropertyInfo(unsigned int,unsigned int,void const*,unsigned int *)::once, &__block_literal_global_11_0);
  return PAL::softLinkAudioToolboxAudioFormatGetPropertyInfo(this, a2, a3, a4, (unsigned int *)PAL::softLinkAudioToolboxAudioFormatGetPropertyInfo);
}

uint64_t PAL::initAudioToolboxAudioFormatGetProperty(PAL *this, unsigned int a2, unsigned int a3, const void *a4, unsigned int *a5, void *a6)
{
  if (PAL::initAudioToolboxAudioFormatGetProperty(unsigned int,unsigned int,void const*,unsigned int *,void *)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioFormatGetProperty(unsigned int,unsigned int,void const*,unsigned int *,void *)::once, &__block_literal_global_14);
  return PAL::softLinkAudioToolboxAudioFormatGetProperty(this, a2, a3, a4, a5, PAL::softLinkAudioToolboxAudioFormatGetProperty);
}

uint64_t PAL::initAudioToolboxAudioConverterNew(PAL *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, OpaqueAudioConverter **a4)
{
  if (PAL::initAudioToolboxAudioConverterNew(AudioStreamBasicDescription const*,AudioStreamBasicDescription const*,OpaqueAudioConverter **)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioConverterNew(AudioStreamBasicDescription const*,AudioStreamBasicDescription const*,OpaqueAudioConverter **)::once, &__block_literal_global_17);
  return PAL::softLinkAudioToolboxAudioConverterNew(this, a2, a3, (OpaqueAudioConverter **)PAL::softLinkAudioToolboxAudioConverterNew);
}

uint64_t PAL::initAudioToolboxAudioConverterDispose(PAL *this, OpaqueAudioConverter *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initAudioToolboxAudioConverterDispose(OpaqueAudioConverter *)::once != -1)
  {
    dispatch_once(&PAL::initAudioToolboxAudioConverterDispose(OpaqueAudioConverter *)::once, &__block_literal_global_20);
    this = v2;
  }
  return PAL::softLinkAudioToolboxAudioConverterDispose(this, (OpaqueAudioConverter *)PAL::softLinkAudioToolboxAudioConverterDispose);
}

uint64_t PAL::initAudioToolboxAudioConverterSetProperty(PAL *this, OpaqueAudioConverter *a2, unsigned int a3, unsigned int a4, const void *a5)
{
  if (PAL::initAudioToolboxAudioConverterSetProperty(OpaqueAudioConverter *,unsigned int,unsigned int,void const*)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioConverterSetProperty(OpaqueAudioConverter *,unsigned int,unsigned int,void const*)::once, &__block_literal_global_23);
  return PAL::softLinkAudioToolboxAudioConverterSetProperty(this, a2, a3, a4, PAL::softLinkAudioToolboxAudioConverterSetProperty);
}

uint64_t PAL::initAudioToolboxAudioConverterGetProperty(PAL *this, OpaqueAudioConverter *a2, unsigned int a3, unsigned int *a4, void *a5)
{
  if (PAL::initAudioToolboxAudioConverterGetProperty(OpaqueAudioConverter *,unsigned int,unsigned int *,void *)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioConverterGetProperty(OpaqueAudioConverter *,unsigned int,unsigned int *,void *)::once, &__block_literal_global_26);
  return PAL::softLinkAudioToolboxAudioConverterGetProperty(this, a2, a3, a4, PAL::softLinkAudioToolboxAudioConverterGetProperty);
}

uint64_t PAL::initAudioToolboxAudioConverterConvertComplexBuffer(PAL *this, OpaqueAudioConverter *a2, unsigned int a3, const AudioBufferList *a4, AudioBufferList *a5)
{
  if (PAL::initAudioToolboxAudioConverterConvertComplexBuffer(OpaqueAudioConverter *,unsigned int,AudioBufferList const*,AudioBufferList*)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioConverterConvertComplexBuffer(OpaqueAudioConverter *,unsigned int,AudioBufferList const*,AudioBufferList*)::once, &__block_literal_global_29);
  return PAL::softLinkAudioToolboxAudioConverterConvertComplexBuffer(this, a2, a3, a4, (AudioBufferList *)PAL::softLinkAudioToolboxAudioConverterConvertComplexBuffer);
}

uint64_t PAL::initAudioToolboxAudioConverterFillComplexBuffer(PAL *this, OpaqueAudioConverter *a2, int (*a3)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *), void *a4, unsigned int *a5, AudioBufferList *a6, AudioStreamPacketDescription *a7)
{
  if (PAL::initAudioToolboxAudioConverterFillComplexBuffer(OpaqueAudioConverter *,int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioConverterFillComplexBuffer(OpaqueAudioConverter *,int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *)::once, &__block_literal_global_32);
  return PAL::softLinkAudioToolboxAudioConverterFillComplexBuffer(this, a2, a3, a4, a5, a6, (AudioStreamPacketDescription *)PAL::softLinkAudioToolboxAudioConverterFillComplexBuffer);
}

uint64_t PAL::initAudioToolboxAudioOutputUnitStart(PAL *this, OpaqueAudioComponentInstance *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initAudioToolboxAudioOutputUnitStart(OpaqueAudioComponentInstance *)::once != -1)
  {
    dispatch_once(&PAL::initAudioToolboxAudioOutputUnitStart(OpaqueAudioComponentInstance *)::once, &__block_literal_global_35);
    this = v2;
  }
  return PAL::softLinkAudioToolboxAudioOutputUnitStart(this, (OpaqueAudioComponentInstance *)PAL::softLinkAudioToolboxAudioOutputUnitStart);
}

uint64_t PAL::initAudioToolboxAudioOutputUnitStop(PAL *this, OpaqueAudioComponentInstance *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initAudioToolboxAudioOutputUnitStop(OpaqueAudioComponentInstance *)::once != -1)
  {
    dispatch_once(&PAL::initAudioToolboxAudioOutputUnitStop(OpaqueAudioComponentInstance *)::once, &__block_literal_global_38);
    this = v2;
  }
  return PAL::softLinkAudioToolboxAudioOutputUnitStop(this, (OpaqueAudioComponentInstance *)PAL::softLinkAudioToolboxAudioOutputUnitStop);
}

uint64_t PAL::initAudioToolboxAudioComponentInstanceDispose(PAL *this, OpaqueAudioComponentInstance *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initAudioToolboxAudioComponentInstanceDispose(OpaqueAudioComponentInstance *)::once != -1)
  {
    dispatch_once(&PAL::initAudioToolboxAudioComponentInstanceDispose(OpaqueAudioComponentInstance *)::once, &__block_literal_global_41);
    this = v2;
  }
  return PAL::softLinkAudioToolboxAudioComponentInstanceDispose(this, (OpaqueAudioComponentInstance *)PAL::softLinkAudioToolboxAudioComponentInstanceDispose);
}

BOOL PAL::init_AudioToolboxCore_AudioComponentFetchServerRegistrations(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL23AudioToolboxCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v3 = 0;
  if (qword_1ECE7D5D0 != -1)
    dispatch_once(&qword_1ECE7D5D0, block);
  PAL::softLinkAudioToolboxCoreAudioComponentFetchServerRegistrations = (uint64_t)dlsym((void *)qword_1ECE7D5C8, "AudioComponentFetchServerRegistrations");
  return PAL::softLinkAudioToolboxCoreAudioComponentFetchServerRegistrations != 0;
}

BOOL PAL::canLoad_AudioToolboxCore_AudioComponentFetchServerRegistrations(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7D5B1 == 1)
    return _MergedGlobals_55 != 0;
  result = PAL::init_AudioToolboxCore_AudioComponentFetchServerRegistrations(this);
  _MergedGlobals_55 = result;
  byte_1ECE7D5B1 = 1;
  return result;
}

BOOL PAL::init_AudioToolboxCore_AudioComponentApplyServerRegistrations(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL23AudioToolboxCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v3 = 0;
  if (qword_1ECE7D5D0 != -1)
    dispatch_once(&qword_1ECE7D5D0, block);
  PAL::softLinkAudioToolboxCoreAudioComponentApplyServerRegistrations = (uint64_t)dlsym((void *)qword_1ECE7D5C8, "AudioComponentApplyServerRegistrations");
  return PAL::softLinkAudioToolboxCoreAudioComponentApplyServerRegistrations != 0;
}

BOOL PAL::canLoad_AudioToolboxCore_AudioComponentApplyServerRegistrations(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7D5B3 == 1)
    return byte_1ECE7D5B2 != 0;
  result = PAL::init_AudioToolboxCore_AudioComponentApplyServerRegistrations(this);
  byte_1ECE7D5B2 = result;
  byte_1ECE7D5B3 = 1;
  return result;
}

BOOL PAL::init_AudioToolbox_AudioGetDeviceSpatialPreferencesForContentType(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v3 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  PAL::softLinkAudioToolboxAudioGetDeviceSpatialPreferencesForContentType = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioGetDeviceSpatialPreferencesForContentType");
  return PAL::softLinkAudioToolboxAudioGetDeviceSpatialPreferencesForContentType != 0;
}

BOOL PAL::canLoad_AudioToolbox_AudioGetDeviceSpatialPreferencesForContentType(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7D5B5 == 1)
    return byte_1ECE7D5B4 != 0;
  result = PAL::init_AudioToolbox_AudioGetDeviceSpatialPreferencesForContentType(this);
  byte_1ECE7D5B4 = result;
  byte_1ECE7D5B5 = 1;
  return result;
}

uint64_t PAL::initAudioToolboxAudioFileClose(PAL *this, OpaqueAudioFileID *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initAudioToolboxAudioFileClose(OpaqueAudioFileID *)::once != -1)
  {
    dispatch_once(&PAL::initAudioToolboxAudioFileClose(OpaqueAudioFileID *)::once, &__block_literal_global_47);
    this = v2;
  }
  return PAL::softLinkAudioToolboxAudioFileClose(this, (OpaqueAudioFileID *)PAL::softLinkAudioToolboxAudioFileClose);
}

uint64_t PAL::initAudioToolboxAudioFileOpenWithCallbacks(PAL *this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t), unsigned int a7, OpaqueAudioFileID **a8)
{
  if (PAL::initAudioToolboxAudioFileOpenWithCallbacks(void *,int (*)(void *,long long,unsigned int,void *,unsigned int *),int (*)(void *,long long,unsigned int,void const*,unsigned int *),long long (*)(void *),int (*)(void *,long long),unsigned int,OpaqueAudioFileID **)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioFileOpenWithCallbacks(void *,int (*)(void *,long long,unsigned int,void *,unsigned int *),int (*)(void *,long long,unsigned int,void const*,unsigned int *),long long (*)(void *),int (*)(void *,long long),unsigned int,OpaqueAudioFileID **)::once, &__block_literal_global_50);
  return PAL::softLinkAudioToolboxAudioFileOpenWithCallbacks(this, a2, a3, a4, a5, a6, a7, (OpaqueAudioFileID **)PAL::softLinkAudioToolboxAudioFileOpenWithCallbacks);
}

uint64_t PAL::initAudioToolboxExtAudioFileDispose(PAL *this, OpaqueExtAudioFile *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initAudioToolboxExtAudioFileDispose(OpaqueExtAudioFile *)::once != -1)
  {
    dispatch_once(&PAL::initAudioToolboxExtAudioFileDispose(OpaqueExtAudioFile *)::once, &__block_literal_global_53);
    this = v2;
  }
  return PAL::softLinkAudioToolboxExtAudioFileDispose(this, (OpaqueExtAudioFile *)PAL::softLinkAudioToolboxExtAudioFileDispose);
}

uint64_t PAL::initAudioToolboxExtAudioFileGetProperty(PAL *this, OpaqueExtAudioFile *a2, unsigned int a3, unsigned int *a4, void *a5)
{
  if (PAL::initAudioToolboxExtAudioFileGetProperty(OpaqueExtAudioFile *,unsigned int,unsigned int *,void *)::once != -1)
    dispatch_once(&PAL::initAudioToolboxExtAudioFileGetProperty(OpaqueExtAudioFile *,unsigned int,unsigned int *,void *)::once, &__block_literal_global_56);
  return PAL::softLinkAudioToolboxExtAudioFileGetProperty(this, a2, a3, a4, PAL::softLinkAudioToolboxExtAudioFileGetProperty);
}

uint64_t PAL::initAudioToolboxExtAudioFileRead(PAL *this, OpaqueExtAudioFile *a2, unsigned int *a3, AudioBufferList *a4)
{
  if (PAL::initAudioToolboxExtAudioFileRead(OpaqueExtAudioFile *,unsigned int *,AudioBufferList *)::once != -1)
    dispatch_once(&PAL::initAudioToolboxExtAudioFileRead(OpaqueExtAudioFile *,unsigned int *,AudioBufferList *)::once, &__block_literal_global_59);
  return PAL::softLinkAudioToolboxExtAudioFileRead(this, a2, a3, (AudioBufferList *)PAL::softLinkAudioToolboxExtAudioFileRead);
}

uint64_t PAL::initAudioToolboxExtAudioFileSetProperty(PAL *this, OpaqueExtAudioFile *a2, unsigned int a3, unsigned int a4, const void *a5)
{
  if (PAL::initAudioToolboxExtAudioFileSetProperty(OpaqueExtAudioFile *,unsigned int,unsigned int,void const*)::once != -1)
    dispatch_once(&PAL::initAudioToolboxExtAudioFileSetProperty(OpaqueExtAudioFile *,unsigned int,unsigned int,void const*)::once, &__block_literal_global_62);
  return PAL::softLinkAudioToolboxExtAudioFileSetProperty(this, a2, a3, a4, PAL::softLinkAudioToolboxExtAudioFileSetProperty);
}

uint64_t PAL::initAudioToolboxExtAudioFileWrapAudioFileID(PAL *this, OpaqueAudioFileID *a2, unsigned __int8 a3, OpaqueExtAudioFile **a4)
{
  if (PAL::initAudioToolboxExtAudioFileWrapAudioFileID(OpaqueAudioFileID *,unsigned char,OpaqueExtAudioFile **)::once != -1)
    dispatch_once(&PAL::initAudioToolboxExtAudioFileWrapAudioFileID(OpaqueAudioFileID *,unsigned char,OpaqueExtAudioFile **)::once, &__block_literal_global_65);
  return PAL::softLinkAudioToolboxExtAudioFileWrapAudioFileID(this, a2, a3, (OpaqueExtAudioFile **)PAL::softLinkAudioToolboxExtAudioFileWrapAudioFileID);
}

uint64_t PAL::initAudioToolboxAudioComponentFindNext(PAL *this, OpaqueAudioComponent *a2, const AudioComponentDescription *a3)
{
  if (PAL::initAudioToolboxAudioComponentFindNext(OpaqueAudioComponent *,AudioComponentDescription const*)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioComponentFindNext(OpaqueAudioComponent *,AudioComponentDescription const*)::once, &__block_literal_global_71);
  return PAL::softLinkAudioToolboxAudioComponentFindNext(this, a2, (const AudioComponentDescription *)PAL::softLinkAudioToolboxAudioComponentFindNext);
}

uint64_t PAL::initAudioToolboxAudioComponentInstanceNew(PAL *this, OpaqueAudioComponent *a2, OpaqueAudioComponentInstance **a3)
{
  if (PAL::initAudioToolboxAudioComponentInstanceNew(OpaqueAudioComponent *,OpaqueAudioComponentInstance **)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioComponentInstanceNew(OpaqueAudioComponent *,OpaqueAudioComponentInstance **)::once, &__block_literal_global_74);
  return PAL::softLinkAudioToolboxAudioComponentInstanceNew(this, a2, (OpaqueAudioComponentInstance **)PAL::softLinkAudioToolboxAudioComponentInstanceNew);
}

uint64_t PAL::initAudioToolboxAudioUnitGetProperty(PAL *this, OpaqueAudioComponentInstance *a2, unsigned int a3, unsigned int a4, unsigned int a5, void *a6, unsigned int *a7)
{
  if (PAL::initAudioToolboxAudioUnitGetProperty(OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int,void *,unsigned int *)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioUnitGetProperty(OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int,void *,unsigned int *)::once, &__block_literal_global_77);
  return PAL::softLinkAudioToolboxAudioUnitGetProperty(this, a2, a3, a4, a5, a6, (unsigned int *)PAL::softLinkAudioToolboxAudioUnitGetProperty);
}

uint64_t PAL::initAudioToolboxAudioUnitInitialize(PAL *this, OpaqueAudioComponentInstance *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initAudioToolboxAudioUnitInitialize(OpaqueAudioComponentInstance *)::once != -1)
  {
    dispatch_once(&PAL::initAudioToolboxAudioUnitInitialize(OpaqueAudioComponentInstance *)::once, &__block_literal_global_80);
    this = v2;
  }
  return PAL::softLinkAudioToolboxAudioUnitInitialize(this, (OpaqueAudioComponentInstance *)PAL::softLinkAudioToolboxAudioUnitInitialize);
}

uint64_t PAL::initAudioToolboxAudioUnitSetProperty(PAL *this, OpaqueAudioComponentInstance *a2, unsigned int a3, unsigned int a4, unsigned int a5, const void *a6)
{
  if (PAL::initAudioToolboxAudioUnitSetProperty(OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioUnitSetProperty(OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int,void const*,unsigned int)::once, &__block_literal_global_83);
  return PAL::softLinkAudioToolboxAudioUnitSetProperty(this, a2, a3, a4, a5, a6, PAL::softLinkAudioToolboxAudioUnitSetProperty);
}

uint64_t PAL::initAudioToolboxAudioUnitRender(PAL *this, OpaqueAudioComponentInstance *a2, unsigned int *a3, const AudioTimeStamp *a4, unsigned int a5, unsigned int a6, AudioBufferList *a7)
{
  if (PAL::initAudioToolboxAudioUnitRender(OpaqueAudioComponentInstance *,unsigned int *,AudioTimeStamp const*,unsigned int,unsigned int,AudioBufferList *)::once != -1)
    dispatch_once(&PAL::initAudioToolboxAudioUnitRender(OpaqueAudioComponentInstance *,unsigned int *,AudioTimeStamp const*,unsigned int,unsigned int,AudioBufferList *)::once, &__block_literal_global_86);
  return PAL::softLinkAudioToolboxAudioUnitRender(this, a2, a3, a4, a5, a6, (AudioBufferList *)PAL::softLinkAudioToolboxAudioUnitRender);
}

uint64_t PAL::initAudioToolboxAudioUnitUninitialize(PAL *this, OpaqueAudioComponentInstance *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initAudioToolboxAudioUnitUninitialize(OpaqueAudioComponentInstance *)::once != -1)
  {
    dispatch_once(&PAL::initAudioToolboxAudioUnitUninitialize(OpaqueAudioComponentInstance *)::once, &__block_literal_global_89);
    this = v2;
  }
  return PAL::softLinkAudioToolboxAudioUnitUninitialize(this, (OpaqueAudioComponentInstance *)PAL::softLinkAudioToolboxAudioUnitUninitialize);
}

uint64_t ___ZN3PALL45initAudioToolboxAudioConverterGetPropertyInfoEP20OpaqueAudioConverterjPjPh_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioConverterGetPropertyInfo");
  PAL::softLinkAudioToolboxAudioConverterGetPropertyInfo = (uint64_t (*)(PAL *__hidden, OpaqueAudioConverter *, unsigned int, unsigned int *, unsigned __int8 *))result;
  if (!result)
  {
    result = 43;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL42initAudioToolboxAudioFormatGetPropertyInfoEjjPKvPj_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioFormatGetPropertyInfo");
  PAL::softLinkAudioToolboxAudioFormatGetPropertyInfo = (uint64_t (*)(PAL *__hidden, unsigned int, unsigned int, const void *, unsigned int *))result;
  if (!result)
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL38initAudioToolboxAudioFormatGetPropertyEjjPKvPjPv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioFormatGetProperty");
  PAL::softLinkAudioToolboxAudioFormatGetProperty = (uint64_t (*)(PAL *__hidden, unsigned int, unsigned int, const void *, unsigned int *, void *))result;
  if (!result)
  {
    result = 45;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL33initAudioToolboxAudioConverterNewEPK27AudioStreamBasicDescriptionS2_PP20OpaqueAudioConverter_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioConverterNew");
  PAL::softLinkAudioToolboxAudioConverterNew = (uint64_t (*)(PAL *__hidden, const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, OpaqueAudioConverter **))result;
  if (!result)
  {
    result = 46;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL37initAudioToolboxAudioConverterDisposeEP20OpaqueAudioConverter_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioConverterDispose");
  PAL::softLinkAudioToolboxAudioConverterDispose = (uint64_t (*)(PAL *__hidden, OpaqueAudioConverter *))result;
  if (!result)
  {
    result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL41initAudioToolboxAudioConverterSetPropertyEP20OpaqueAudioConverterjjPKv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioConverterSetProperty");
  PAL::softLinkAudioToolboxAudioConverterSetProperty = (uint64_t (*)(PAL *__hidden, OpaqueAudioConverter *, unsigned int, unsigned int, const void *))result;
  if (!result)
  {
    result = 48;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL41initAudioToolboxAudioConverterGetPropertyEP20OpaqueAudioConverterjPjPv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioConverterGetProperty");
  PAL::softLinkAudioToolboxAudioConverterGetProperty = (uint64_t (*)(PAL *__hidden, OpaqueAudioConverter *, unsigned int, unsigned int *, void *))result;
  if (!result)
  {
    result = 49;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL50initAudioToolboxAudioConverterConvertComplexBufferEP20OpaqueAudioConverterjPK15AudioBufferListPS2__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioConverterConvertComplexBuffer");
  PAL::softLinkAudioToolboxAudioConverterConvertComplexBuffer = (uint64_t (*)(PAL *__hidden, OpaqueAudioConverter *, unsigned int, const AudioBufferList *, AudioBufferList *))result;
  if (!result)
  {
    result = 50;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL47initAudioToolboxAudioConverterFillComplexBufferEP20OpaqueAudioConverterPFiS1_PjP15AudioBufferListPP28AudioStreamPacketDescriptionPvES8_S2_S4_S6__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioConverterFillComplexBuffer");
  PAL::softLinkAudioToolboxAudioConverterFillComplexBuffer = (uint64_t (*)(PAL *__hidden, OpaqueAudioConverter *, int (*)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *), void *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription *))result;
  if (!result)
  {
    result = 51;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL36initAudioToolboxAudioOutputUnitStartEP28OpaqueAudioComponentInstance_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioOutputUnitStart");
  PAL::softLinkAudioToolboxAudioOutputUnitStart = (uint64_t (*)(PAL *__hidden, OpaqueAudioComponentInstance *))result;
  if (!result)
  {
    result = 52;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL35initAudioToolboxAudioOutputUnitStopEP28OpaqueAudioComponentInstance_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioOutputUnitStop");
  PAL::softLinkAudioToolboxAudioOutputUnitStop = (uint64_t (*)(PAL *__hidden, OpaqueAudioComponentInstance *))result;
  if (!result)
  {
    result = 53;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL45initAudioToolboxAudioComponentInstanceDisposeEP28OpaqueAudioComponentInstance_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioComponentInstanceDispose");
  PAL::softLinkAudioToolboxAudioComponentInstanceDispose = (uint64_t (*)(PAL *__hidden, OpaqueAudioComponentInstance *))result;
  if (!result)
  {
    result = 54;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL30initAudioToolboxAudioFileCloseEP17OpaqueAudioFileID_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioFileClose");
  PAL::softLinkAudioToolboxAudioFileClose = (uint64_t (*)(PAL *__hidden, OpaqueAudioFileID *))result;
  if (!result)
  {
    result = 62;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL42initAudioToolboxAudioFileOpenWithCallbacksEPvPFiS0_xjS0_PjEPFiS0_xjPKvS1_EPFxS0_EPFiS0_xEjPP17OpaqueAudioFileID_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioFileOpenWithCallbacks");
  PAL::softLinkAudioToolboxAudioFileOpenWithCallbacks = (uint64_t (*)(PAL *__hidden, void *, int (*)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*)(void *), int (*)(void *, uint64_t), unsigned int, OpaqueAudioFileID **))result;
  if (!result)
  {
    result = 63;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL35initAudioToolboxExtAudioFileDisposeEP18OpaqueExtAudioFile_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "ExtAudioFileDispose");
  PAL::softLinkAudioToolboxExtAudioFileDispose = (uint64_t (*)(PAL *__hidden, OpaqueExtAudioFile *))result;
  if (!result)
  {
    result = 64;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL39initAudioToolboxExtAudioFileGetPropertyEP18OpaqueExtAudioFilejPjPv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "ExtAudioFileGetProperty");
  PAL::softLinkAudioToolboxExtAudioFileGetProperty = (uint64_t (*)(PAL *__hidden, OpaqueExtAudioFile *, unsigned int, unsigned int *, void *))result;
  if (!result)
  {
    result = 65;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL32initAudioToolboxExtAudioFileReadEP18OpaqueExtAudioFilePjP15AudioBufferList_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "ExtAudioFileRead");
  PAL::softLinkAudioToolboxExtAudioFileRead = (uint64_t (*)(PAL *__hidden, OpaqueExtAudioFile *, unsigned int *, AudioBufferList *))result;
  if (!result)
  {
    result = 66;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL39initAudioToolboxExtAudioFileSetPropertyEP18OpaqueExtAudioFilejjPKv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "ExtAudioFileSetProperty");
  PAL::softLinkAudioToolboxExtAudioFileSetProperty = (uint64_t (*)(PAL *__hidden, OpaqueExtAudioFile *, unsigned int, unsigned int, const void *))result;
  if (!result)
  {
    result = 67;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL43initAudioToolboxExtAudioFileWrapAudioFileIDEP17OpaqueAudioFileIDhPP18OpaqueExtAudioFile_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "ExtAudioFileWrapAudioFileID");
  PAL::softLinkAudioToolboxExtAudioFileWrapAudioFileID = (uint64_t (*)(PAL *__hidden, OpaqueAudioFileID *, unsigned __int8, OpaqueExtAudioFile **))result;
  if (!result)
  {
    result = 68;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL38initAudioToolboxAudioComponentFindNextEP20OpaqueAudioComponentPK25AudioComponentDescription_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioComponentFindNext");
  PAL::softLinkAudioToolboxAudioComponentFindNext = (uint64_t (*)(PAL *__hidden, OpaqueAudioComponent *, const AudioComponentDescription *))result;
  if (!result)
  {
    result = 71;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL41initAudioToolboxAudioComponentInstanceNewEP20OpaqueAudioComponentPP28OpaqueAudioComponentInstance_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioComponentInstanceNew");
  PAL::softLinkAudioToolboxAudioComponentInstanceNew = (uint64_t (*)(PAL *__hidden, OpaqueAudioComponent *, OpaqueAudioComponentInstance **))result;
  if (!result)
  {
    result = 72;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL36initAudioToolboxAudioUnitGetPropertyEP28OpaqueAudioComponentInstancejjjPvPj_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioUnitGetProperty");
  PAL::softLinkAudioToolboxAudioUnitGetProperty = (uint64_t (*)(PAL *__hidden, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int, void *, unsigned int *))result;
  if (!result)
  {
    result = 73;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL35initAudioToolboxAudioUnitInitializeEP28OpaqueAudioComponentInstance_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioUnitInitialize");
  PAL::softLinkAudioToolboxAudioUnitInitialize = (uint64_t (*)(PAL *__hidden, OpaqueAudioComponentInstance *))result;
  if (!result)
  {
    result = 74;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL36initAudioToolboxAudioUnitSetPropertyEP28OpaqueAudioComponentInstancejjjPKvj_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioUnitSetProperty");
  PAL::softLinkAudioToolboxAudioUnitSetProperty = (uint64_t (*)(PAL *__hidden, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int, const void *, unsigned int))result;
  if (!result)
  {
    result = 75;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL31initAudioToolboxAudioUnitRenderEP28OpaqueAudioComponentInstancePjPK14AudioTimeStampjjP15AudioBufferList_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioUnitRender");
  PAL::softLinkAudioToolboxAudioUnitRender = (uint64_t (*)(PAL *__hidden, OpaqueAudioComponentInstance *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *))result;
  if (!result)
  {
    result = 76;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL37initAudioToolboxAudioUnitUninitializeEP28OpaqueAudioComponentInstance_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19AudioToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp;
  v2 = 0;
  if (qword_1ECE7D5C0 != -1)
    dispatch_once(&qword_1ECE7D5C0, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5B8, "AudioUnitUninitialize");
  PAL::softLinkAudioToolboxAudioUnitUninitialize = (uint64_t (*)(PAL *__hidden, OpaqueAudioComponentInstance *))result;
  if (!result)
  {
    result = 77;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initAVAsset(PAL *this)
{
  if (qword_1ECE7DC68 != -1)
    dispatch_once(&qword_1ECE7DC68, &__block_literal_global_232);
  return qword_1ECE7DC70;
}

uint64_t PAL::initAVAssetCache(PAL *this)
{
  if (qword_1ECE7DC78 != -1)
    dispatch_once(&qword_1ECE7DC78, &__block_literal_global_234);
  return qword_1ECE7DC80;
}

uint64_t PAL::initAVAssetExportSession(PAL *this)
{
  if (qword_1ECE7DC88 != -1)
    dispatch_once(&qword_1ECE7DC88, &__block_literal_global_236);
  return qword_1ECE7DC90;
}

uint64_t PAL::initAVAssetImageGenerator(PAL *this)
{
  if (qword_1ECE7DC98 != -1)
    dispatch_once(&qword_1ECE7DC98, &__block_literal_global_238);
  return qword_1ECE7DCA0;
}

uint64_t PAL::initAVAssetReader(PAL *this)
{
  if (qword_1ECE7DCA8 != -1)
    dispatch_once(&qword_1ECE7DCA8, &__block_literal_global_240);
  return qword_1ECE7DCB0;
}

uint64_t PAL::initAVAssetWriter(PAL *this)
{
  if (qword_1ECE7DCB8 != -1)
    dispatch_once(&qword_1ECE7DCB8, &__block_literal_global_242);
  return qword_1ECE7DCC0;
}

uint64_t PAL::initAVAssetWriterInput(PAL *this)
{
  if (qword_1ECE7DCC8 != -1)
    dispatch_once(&qword_1ECE7DCC8, &__block_literal_global_244);
  return qword_1ECE7DCD0;
}

uint64_t PAL::initAVAudioConverter(PAL *this)
{
  if (qword_1ECE7DCD8 != -1)
    dispatch_once(&qword_1ECE7DCD8, &__block_literal_global_246);
  return qword_1ECE7DCE0;
}

uint64_t PAL::initAVAudioFormat(PAL *this)
{
  if (qword_1ECE7DCE8 != -1)
    dispatch_once(&qword_1ECE7DCE8, &__block_literal_global_248);
  return qword_1ECE7DCF0;
}

uint64_t PAL::initAVAudioCompressedBuffer(PAL *this)
{
  if (qword_1ECE7DCF8 != -1)
    dispatch_once(&qword_1ECE7DCF8, &__block_literal_global_250);
  return qword_1ECE7DD00;
}

uint64_t PAL::initAVAudioPCMBuffer(PAL *this)
{
  if (qword_1ECE7DD08 != -1)
    dispatch_once(&qword_1ECE7DD08, &__block_literal_global_252);
  return qword_1ECE7DD10;
}

uint64_t PAL::initAVMediaSelectionGroup(PAL *this)
{
  if (qword_1ECE7DD18 != -1)
    dispatch_once(&qword_1ECE7DD18, &__block_literal_global_254);
  return qword_1ECE7DD20;
}

uint64_t PAL::initAVMediaSelectionOption(PAL *this)
{
  if (qword_1ECE7DD28 != -1)
    dispatch_once(&qword_1ECE7DD28, &__block_literal_global_256);
  return qword_1ECE7DD30;
}

uint64_t PAL::initAVMetadataItem(PAL *this)
{
  if (qword_1ECE7DD38 != -1)
    dispatch_once(&qword_1ECE7DD38, &__block_literal_global_258);
  return qword_1ECE7DD40;
}

uint64_t PAL::initAVMutableAudioMix(PAL *this)
{
  if (qword_1ECE7DD48 != -1)
    dispatch_once(&qword_1ECE7DD48, &__block_literal_global_260);
  return qword_1ECE7DD50;
}

uint64_t PAL::initAVMutableAudioMixInputParameters(PAL *this)
{
  if (qword_1ECE7DD58 != -1)
    dispatch_once(&qword_1ECE7DD58, &__block_literal_global_262);
  return qword_1ECE7DD60;
}

uint64_t PAL::initAVPlayer(PAL *this)
{
  if (qword_1ECE7DD78 != -1)
    dispatch_once(&qword_1ECE7DD78, &__block_literal_global_266);
  return qword_1ECE7DD80;
}

uint64_t PAL::initAVPlayerItem(PAL *this)
{
  if (qword_1ECE7DD88 != -1)
    dispatch_once(&qword_1ECE7DD88, &__block_literal_global_268);
  return qword_1ECE7DD90;
}

uint64_t PAL::initAVPlayerItemLegibleOutput(PAL *this)
{
  if (qword_1ECE7DD98 != -1)
    dispatch_once(&qword_1ECE7DD98, &__block_literal_global_270);
  return qword_1ECE7DDA0;
}

uint64_t PAL::initAVPlayerItemMetadataCollector(PAL *this)
{
  if (qword_1ECE7DDA8 != -1)
    dispatch_once(&qword_1ECE7DDA8, &__block_literal_global_272);
  return qword_1ECE7DDB0;
}

uint64_t PAL::initAVPlayerItemMetadataOutput(PAL *this)
{
  if (qword_1ECE7DDB8 != -1)
    dispatch_once(&qword_1ECE7DDB8, &__block_literal_global_274);
  return qword_1ECE7DDC0;
}

uint64_t PAL::initAVPlayerItemVideoOutput(PAL *this)
{
  if (qword_1ECE7DDC8 != -1)
    dispatch_once(&qword_1ECE7DDC8, &__block_literal_global_276);
  return qword_1ECE7DDD0;
}

uint64_t PAL::initAVPlayerLayer(PAL *this)
{
  if (qword_1ECE7DDD8 != -1)
    dispatch_once(&qword_1ECE7DDD8, &__block_literal_global_278);
  return qword_1ECE7DDE0;
}

uint64_t PAL::initAVSpeechSynthesisVoice(PAL *this)
{
  if (qword_1ECE7DDE8 != -1)
    dispatch_once(&qword_1ECE7DDE8, &__block_literal_global_280);
  return qword_1ECE7DDF0;
}

uint64_t PAL::initAVSpeechSynthesizer(PAL *this)
{
  if (qword_1ECE7DDF8 != -1)
    dispatch_once(&qword_1ECE7DDF8, &__block_literal_global_282);
  return qword_1ECE7DE00;
}

uint64_t PAL::initAVSpeechUtterance(PAL *this)
{
  if (qword_1ECE7DE08 != -1)
    dispatch_once(&qword_1ECE7DE08, &__block_literal_global_284);
  return qword_1ECE7DE10;
}

uint64_t PAL::initAVURLAsset(PAL *this)
{
  if (qword_1ECE7DE18 != -1)
    dispatch_once(&qword_1ECE7DE18, &__block_literal_global_286);
  return qword_1ECE7DE20;
}

uint64_t PAL::initAVAssetCollection(PAL *this)
{
  if (qword_1ECE7DE28 != -1)
    dispatch_once(&qword_1ECE7DE28, &__block_literal_global_288);
  return qword_1ECE7DE30;
}

uint64_t PAL::initAVAssetReaderSampleReferenceOutput(PAL *this)
{
  if (qword_1ECE7DE38 != -1)
    dispatch_once(&qword_1ECE7DE38, &__block_literal_global_290);
  return qword_1ECE7DE40;
}

uint64_t PAL::initAVAssetResourceLoadingRequest(PAL *this)
{
  if (qword_1ECE7DE48 != -1)
    dispatch_once(&qword_1ECE7DE48, &__block_literal_global_292);
  return qword_1ECE7DE50;
}

uint64_t PAL::initAVContentKey(PAL *this)
{
  if (qword_1ECE7DE58 != -1)
    dispatch_once(&qword_1ECE7DE58, &__block_literal_global_294);
  return qword_1ECE7DE60;
}

uint64_t PAL::initAVContentKeyReportGroup(PAL *this)
{
  if (qword_1ECE7DE68 != -1)
    dispatch_once(&qword_1ECE7DE68, &__block_literal_global_296);
  return qword_1ECE7DE70;
}

uint64_t PAL::initAVContentKeyResponse(PAL *this)
{
  if (qword_1ECE7DE78 != -1)
    dispatch_once(&qword_1ECE7DE78, &__block_literal_global_298);
  return qword_1ECE7DE80;
}

uint64_t PAL::initAVContentKeySession(PAL *this)
{
  if (qword_1ECE7DE88 != -1)
    dispatch_once(&qword_1ECE7DE88, &__block_literal_global_300);
  return qword_1ECE7DE90;
}

uint64_t PAL::initAVDelegatingPlaybackCoordinator(PAL *this)
{
  if (qword_1ECE7DE98 != -1)
    dispatch_once(&qword_1ECE7DE98, &__block_literal_global_302);
  return qword_1ECE7DEA0;
}

uint64_t PAL::initAVSampleBufferAudioRenderer(PAL *this)
{
  if (qword_1ECE7DEA8 != -1)
    dispatch_once(&qword_1ECE7DEA8, &__block_literal_global_304);
  return qword_1ECE7DEB0;
}

uint64_t PAL::initAVSampleBufferDisplayLayer(PAL *this)
{
  if (qword_1ECE7DEB8 != -1)
    dispatch_once(&qword_1ECE7DEB8, &__block_literal_global_306);
  return qword_1ECE7DEC0;
}

uint64_t PAL::initAVSampleBufferVideoRenderer(PAL *this)
{
  if (qword_1ECE7DEC8 != -1)
    dispatch_once(&qword_1ECE7DEC8, &__block_literal_global_308);
  return qword_1ECE7DED0;
}

uint64_t PAL::initAVSampleBufferRenderSynchronizer(PAL *this)
{
  if (qword_1ECE7DED8 != -1)
    dispatch_once(&qword_1ECE7DED8, &__block_literal_global_310);
  return qword_1ECE7DEE0;
}

uint64_t PAL::initAVStreamDataParser(PAL *this)
{
  if (qword_1ECE7DEE8 != -1)
    dispatch_once(&qword_1ECE7DEE8, &__block_literal_global_312);
  return qword_1ECE7DEF0;
}

uint64_t PAL::initAVPersistableContentKeyRequest(PAL *this)
{
  if (qword_1ECE7DF08 != -1)
    dispatch_once(&qword_1ECE7DF08, &__block_literal_global_316);
  return qword_1ECE7DF10;
}

uint64_t PAL::initAVRouteDetector(PAL *this)
{
  if (qword_1ECE7DF18 != -1)
    dispatch_once(&qword_1ECE7DF18, &__block_literal_global_318);
  return qword_1ECE7DF20;
}

uint64_t PAL::initAVVideoPerformanceMetrics(PAL *this)
{
  if (qword_1ECE7DF28 != -1)
    dispatch_once(&qword_1ECE7DF28, &__block_literal_global_320);
  return qword_1ECE7DF30;
}

uint64_t PAL::initAVCaptureConnection(PAL *this)
{
  if (qword_1ECE7DF38 != -1)
    dispatch_once(&qword_1ECE7DF38, &__block_literal_global_322);
  return qword_1ECE7DF40;
}

uint64_t PAL::initAVCaptureDevice(PAL *this)
{
  if (qword_1ECE7DF48 != -1)
    dispatch_once(&qword_1ECE7DF48, &__block_literal_global_324);
  return qword_1ECE7DF50;
}

uint64_t PAL::initAVCaptureDeviceFormat(PAL *this)
{
  if (qword_1ECE7DF58 != -1)
    dispatch_once(&qword_1ECE7DF58, &__block_literal_global_326);
  return qword_1ECE7DF60;
}

uint64_t PAL::initAVCaptureDeviceInput(PAL *this)
{
  if (qword_1ECE7DF68 != -1)
    dispatch_once(&qword_1ECE7DF68, &__block_literal_global_328);
  return qword_1ECE7DF70;
}

uint64_t PAL::initAVCaptureOutput(PAL *this)
{
  if (qword_1ECE7DF78 != -1)
    dispatch_once(&qword_1ECE7DF78, &__block_literal_global_330);
  return qword_1ECE7DF80;
}

uint64_t PAL::initAVCapturePhotoSettings(PAL *this)
{
  if (qword_1ECE7DF88 != -1)
    dispatch_once(&qword_1ECE7DF88, &__block_literal_global_332);
  return qword_1ECE7DF90;
}

uint64_t PAL::initAVCaptureSession(PAL *this)
{
  if (qword_1ECE7DF98 != -1)
    dispatch_once(&qword_1ECE7DF98, &__block_literal_global_334);
  return qword_1ECE7DFA0;
}

uint64_t PAL::initAVCaptureVideoDataOutput(PAL *this)
{
  if (qword_1ECE7DFA8 != -1)
    dispatch_once(&qword_1ECE7DFA8, &__block_literal_global_336);
  return qword_1ECE7DFB0;
}

uint64_t PAL::initAVFrameRateRange(PAL *this)
{
  if (qword_1ECE7DFB8 != -1)
    dispatch_once(&qword_1ECE7DFB8, &__block_literal_global_338);
  return qword_1ECE7DFC0;
}

uint64_t PAL::initAVCaptureDeviceDiscoverySession(PAL *this)
{
  if (qword_1ECE7DFC8 != -1)
    dispatch_once(&qword_1ECE7DFC8, &__block_literal_global_340);
  return qword_1ECE7DFD0;
}

uint64_t PAL::initAVCapturePhotoOutput(PAL *this)
{
  if (qword_1ECE7DFD8 != -1)
    dispatch_once(&qword_1ECE7DFD8, &__block_literal_global_342);
  return qword_1ECE7DFE0;
}

uint64_t PAL::get_AVFoundation_AVAssetExportPresetHighestQuality(PAL *this)
{
  if (qword_1ECE7D608 != -1)
    dispatch_once(&qword_1ECE7D608, &__block_literal_global_2);
  return qword_1ECE7D600;
}

uint64_t ___ZN3PAL50get_AVFoundation_AVAssetExportPresetHighestQualityEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAssetExportPresetHighestQuality");
    if (result)
    {
LABEL_3:
      qword_1ECE7D600 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAssetExportPresetHighestQuality");
    if (result)
      goto LABEL_3;
  }
  result = 138;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAssetImageGeneratorApertureModeCleanAperture(PAL *this)
{
  if (qword_1ECE7D618 != -1)
    dispatch_once(&qword_1ECE7D618, &__block_literal_global_4_0);
  return qword_1ECE7D610;
}

uint64_t ___ZN3PAL63get_AVFoundation_AVAssetImageGeneratorApertureModeCleanApertureEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAssetImageGeneratorApertureModeCleanAperture");
    if (result)
    {
LABEL_3:
      qword_1ECE7D610 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAssetImageGeneratorApertureModeCleanAperture");
    if (result)
      goto LABEL_3;
  }
  result = 139;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioTimePitchAlgorithmSpectral(PAL *this)
{
  if (qword_1ECE7D628 != -1)
    dispatch_once(&qword_1ECE7D628, &__block_literal_global_6_0);
  return qword_1ECE7D620;
}

uint64_t ___ZN3PAL50get_AVFoundation_AVAudioTimePitchAlgorithmSpectralEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioTimePitchAlgorithmSpectral");
    if (result)
    {
LABEL_3:
      qword_1ECE7D620 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioTimePitchAlgorithmSpectral");
    if (result)
      goto LABEL_3;
  }
  result = 140;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioTimePitchAlgorithmTimeDomain(PAL *this)
{
  if (qword_1ECE7D638 != -1)
    dispatch_once(&qword_1ECE7D638, &__block_literal_global_8_0);
  return qword_1ECE7D630;
}

uint64_t ___ZN3PAL52get_AVFoundation_AVAudioTimePitchAlgorithmTimeDomainEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioTimePitchAlgorithmTimeDomain");
    if (result)
    {
LABEL_3:
      qword_1ECE7D630 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioTimePitchAlgorithmTimeDomain");
    if (result)
      goto LABEL_3;
  }
  result = 141;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioTimePitchAlgorithmVarispeed(PAL *this)
{
  if (qword_1ECE7D648 != -1)
    dispatch_once(&qword_1ECE7D648, &__block_literal_global_10);
  return qword_1ECE7D640;
}

uint64_t ___ZN3PAL51get_AVFoundation_AVAudioTimePitchAlgorithmVarispeedEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioTimePitchAlgorithmVarispeed");
    if (result)
    {
LABEL_3:
      qword_1ECE7D640 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioTimePitchAlgorithmVarispeed");
    if (result)
      goto LABEL_3;
  }
  result = 142;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureDeviceWasConnectedNotification(PAL *this)
{
  if (qword_1ECE7D658 != -1)
    dispatch_once(&qword_1ECE7D658, &__block_literal_global_12);
  return qword_1ECE7D650;
}

uint64_t ___ZN3PAL56get_AVFoundation_AVCaptureDeviceWasConnectedNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceWasConnectedNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7D650 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceWasConnectedNotification");
    if (result)
      goto LABEL_3;
  }
  result = 143;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureDeviceWasDisconnectedNotification(PAL *this)
{
  if (qword_1ECE7D668 != -1)
    dispatch_once(&qword_1ECE7D668, &__block_literal_global_14_0);
  return qword_1ECE7D660;
}

uint64_t ___ZN3PAL59get_AVFoundation_AVCaptureDeviceWasDisconnectedNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceWasDisconnectedNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7D660 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceWasDisconnectedNotification");
    if (result)
      goto LABEL_3;
  }
  result = 144;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVFileTypeMPEG4(PAL *this)
{
  if (qword_1ECE7D678 != -1)
    dispatch_once(&qword_1ECE7D678, &__block_literal_global_16);
  return qword_1ECE7D670;
}

uint64_t ___ZN3PAL32get_AVFoundation_AVFileTypeMPEG4Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVFileTypeMPEG4");
    if (result)
    {
LABEL_3:
      qword_1ECE7D670 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVFileTypeMPEG4");
    if (result)
      goto LABEL_3;
  }
  result = 145;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVFileTypeQuickTimeMovie(PAL *this)
{
  if (qword_1ECE7D688 != -1)
    dispatch_once(&qword_1ECE7D688, &__block_literal_global_18);
  return qword_1ECE7D680;
}

uint64_t ___ZN3PAL41get_AVFoundation_AVFileTypeQuickTimeMovieEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVFileTypeQuickTimeMovie");
    if (result)
    {
LABEL_3:
      qword_1ECE7D680 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVFileTypeQuickTimeMovie");
    if (result)
      goto LABEL_3;
  }
  result = 146;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoCodecTypeJPEG(PAL *this)
{
  if (qword_1ECE7D698 != -1)
    dispatch_once(&qword_1ECE7D698, &__block_literal_global_20_0);
  return qword_1ECE7D690;
}

uint64_t ___ZN3PAL37get_AVFoundation_AVVideoCodecTypeJPEGEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoCodecTypeJPEG");
    if (result)
    {
LABEL_3:
      qword_1ECE7D690 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoCodecTypeJPEG");
    if (result)
      goto LABEL_3;
  }
  result = 147;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVLayerVideoGravityResize(PAL *this)
{
  if (qword_1ECE7D6A8 != -1)
    dispatch_once(&qword_1ECE7D6A8, &__block_literal_global_22);
  return qword_1ECE7D6A0;
}

uint64_t ___ZN3PAL42get_AVFoundation_AVLayerVideoGravityResizeEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVLayerVideoGravityResize");
    if (result)
    {
LABEL_3:
      qword_1ECE7D6A0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVLayerVideoGravityResize");
    if (result)
      goto LABEL_3;
  }
  result = 148;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect(PAL *this)
{
  if (qword_1ECE7D6B8 != -1)
    dispatch_once(&qword_1ECE7D6B8, &__block_literal_global_24);
  return qword_1ECE7D6B0;
}

uint64_t ___ZN3PAL48get_AVFoundation_AVLayerVideoGravityResizeAspectEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVLayerVideoGravityResizeAspect");
    if (result)
    {
LABEL_3:
      qword_1ECE7D6B0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVLayerVideoGravityResizeAspect");
    if (result)
      goto LABEL_3;
  }
  result = 149;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVLayerVideoGravityResizeAspectFill(PAL *this)
{
  if (qword_1ECE7D6C8 != -1)
    dispatch_once(&qword_1ECE7D6C8, &__block_literal_global_26_0);
  return qword_1ECE7D6C0;
}

uint64_t ___ZN3PAL52get_AVFoundation_AVLayerVideoGravityResizeAspectFillEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVLayerVideoGravityResizeAspectFill");
    if (result)
    {
LABEL_3:
      qword_1ECE7D6C0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVLayerVideoGravityResizeAspectFill");
    if (result)
      goto LABEL_3;
  }
  result = 150;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaCharacteristicAudible(PAL *this)
{
  if (qword_1ECE7D6D8 != -1)
    dispatch_once(&qword_1ECE7D6D8, &__block_literal_global_28);
  return qword_1ECE7D6D0;
}

uint64_t ___ZN3PAL45get_AVFoundation_AVMediaCharacteristicAudibleEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicAudible");
    if (result)
    {
LABEL_3:
      qword_1ECE7D6D0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicAudible");
    if (result)
      goto LABEL_3;
  }
  result = 151;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaCharacteristicContainsOnlyForcedSubtitles(PAL *this)
{
  if (qword_1ECE7D6E8 != -1)
    dispatch_once(&qword_1ECE7D6E8, &__block_literal_global_30);
  return qword_1ECE7D6E0;
}

uint64_t ___ZN3PAL65get_AVFoundation_AVMediaCharacteristicContainsOnlyForcedSubtitlesEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicContainsOnlyForcedSubtitles");
    if (result)
    {
LABEL_3:
      qword_1ECE7D6E0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicContainsOnlyForcedSubtitles");
    if (result)
      goto LABEL_3;
  }
  result = 152;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaCharacteristicDescribesMusicAndSoundForAccessibility(PAL *this)
{
  if (qword_1ECE7D6F8 != -1)
    dispatch_once(&qword_1ECE7D6F8, &__block_literal_global_32_0);
  return qword_1ECE7D6F0;
}

uint64_t ___ZN3PAL76get_AVFoundation_AVMediaCharacteristicDescribesMusicAndSoundForAccessibilityEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicDescribesMusicAndSoundForAccessibility");
    if (result)
    {
LABEL_3:
      qword_1ECE7D6F0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicDescribesMusicAndSoundForAccessibility");
    if (result)
      goto LABEL_3;
  }
  result = 153;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaCharacteristicDescribesVideoForAccessibility(PAL *this)
{
  if (qword_1ECE7D708 != -1)
    dispatch_once(&qword_1ECE7D708, &__block_literal_global_34);
  return qword_1ECE7D700;
}

uint64_t ___ZN3PAL68get_AVFoundation_AVMediaCharacteristicDescribesVideoForAccessibilityEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicDescribesVideoForAccessibility");
    if (result)
    {
LABEL_3:
      qword_1ECE7D700 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicDescribesVideoForAccessibility");
    if (result)
      goto LABEL_3;
  }
  result = 154;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaCharacteristicEasyToRead(PAL *this)
{
  if (qword_1ECE7D718 != -1)
    dispatch_once(&qword_1ECE7D718, &__block_literal_global_36);
  return qword_1ECE7D710;
}

uint64_t ___ZN3PAL48get_AVFoundation_AVMediaCharacteristicEasyToReadEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicEasyToRead");
    if (result)
    {
LABEL_3:
      qword_1ECE7D710 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicEasyToRead");
    if (result)
      goto LABEL_3;
  }
  result = 155;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaCharacteristicIsAuxiliaryContent(PAL *this)
{
  if (qword_1ECE7D728 != -1)
    dispatch_once(&qword_1ECE7D728, &__block_literal_global_38_0);
  return qword_1ECE7D720;
}

uint64_t ___ZN3PAL56get_AVFoundation_AVMediaCharacteristicIsAuxiliaryContentEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicIsAuxiliaryContent");
    if (result)
    {
LABEL_3:
      qword_1ECE7D720 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicIsAuxiliaryContent");
    if (result)
      goto LABEL_3;
  }
  result = 156;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaCharacteristicIsMainProgramContent(PAL *this)
{
  if (qword_1ECE7D738 != -1)
    dispatch_once(&qword_1ECE7D738, &__block_literal_global_40);
  return qword_1ECE7D730;
}

uint64_t ___ZN3PAL58get_AVFoundation_AVMediaCharacteristicIsMainProgramContentEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicIsMainProgramContent");
    if (result)
    {
LABEL_3:
      qword_1ECE7D730 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicIsMainProgramContent");
    if (result)
      goto LABEL_3;
  }
  result = 157;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaCharacteristicLegible(PAL *this)
{
  if (qword_1ECE7D748 != -1)
    dispatch_once(&qword_1ECE7D748, &__block_literal_global_42);
  return qword_1ECE7D740;
}

uint64_t ___ZN3PAL45get_AVFoundation_AVMediaCharacteristicLegibleEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicLegible");
    if (result)
    {
LABEL_3:
      qword_1ECE7D740 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicLegible");
    if (result)
      goto LABEL_3;
  }
  result = 158;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaCharacteristicTranscribesSpokenDialogForAccessibility(PAL *this)
{
  if (qword_1ECE7D758 != -1)
    dispatch_once(&qword_1ECE7D758, &__block_literal_global_44);
  return qword_1ECE7D750;
}

uint64_t ___ZN3PAL77get_AVFoundation_AVMediaCharacteristicTranscribesSpokenDialogForAccessibilityEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicTranscribesSpokenDialogForAccessibility");
    if (result)
    {
LABEL_3:
      qword_1ECE7D750 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicTranscribesSpokenDialogForAccessibility");
    if (result)
      goto LABEL_3;
  }
  result = 159;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaCharacteristicVisual(PAL *this)
{
  if (qword_1ECE7D768 != -1)
    dispatch_once(&qword_1ECE7D768, &__block_literal_global_46);
  return qword_1ECE7D760;
}

uint64_t ___ZN3PAL44get_AVFoundation_AVMediaCharacteristicVisualEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicVisual");
    if (result)
    {
LABEL_3:
      qword_1ECE7D760 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaCharacteristicVisual");
    if (result)
      goto LABEL_3;
  }
  result = 160;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaTypeAudio(PAL *this)
{
  if (qword_1ECE7D778 != -1)
    dispatch_once(&qword_1ECE7D778, &__block_literal_global_48);
  return qword_1ECE7D770;
}

uint64_t ___ZN3PAL33get_AVFoundation_AVMediaTypeAudioEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaTypeAudio");
    if (result)
    {
LABEL_3:
      qword_1ECE7D770 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaTypeAudio");
    if (result)
      goto LABEL_3;
  }
  result = 161;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaTypeClosedCaption(PAL *this)
{
  if (qword_1ECE7D788 != -1)
    dispatch_once(&qword_1ECE7D788, &__block_literal_global_50_0);
  return qword_1ECE7D780;
}

uint64_t ___ZN3PAL41get_AVFoundation_AVMediaTypeClosedCaptionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaTypeClosedCaption");
    if (result)
    {
LABEL_3:
      qword_1ECE7D780 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaTypeClosedCaption");
    if (result)
      goto LABEL_3;
  }
  result = 162;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaTypeMetadata(PAL *this)
{
  if (qword_1ECE7D798 != -1)
    dispatch_once(&qword_1ECE7D798, &__block_literal_global_52);
  return qword_1ECE7D790;
}

uint64_t ___ZN3PAL36get_AVFoundation_AVMediaTypeMetadataEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaTypeMetadata");
    if (result)
    {
LABEL_3:
      qword_1ECE7D790 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaTypeMetadata");
    if (result)
      goto LABEL_3;
  }
  result = 163;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaTypeMuxed(PAL *this)
{
  if (qword_1ECE7D7A8 != -1)
    dispatch_once(&qword_1ECE7D7A8, &__block_literal_global_54);
  return qword_1ECE7D7A0;
}

uint64_t ___ZN3PAL33get_AVFoundation_AVMediaTypeMuxedEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaTypeMuxed");
    if (result)
    {
LABEL_3:
      qword_1ECE7D7A0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaTypeMuxed");
    if (result)
      goto LABEL_3;
  }
  result = 164;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaTypeSubtitle(PAL *this)
{
  if (qword_1ECE7D7B8 != -1)
    dispatch_once(&qword_1ECE7D7B8, &__block_literal_global_56_0);
  return qword_1ECE7D7B0;
}

uint64_t ___ZN3PAL36get_AVFoundation_AVMediaTypeSubtitleEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaTypeSubtitle");
    if (result)
    {
LABEL_3:
      qword_1ECE7D7B0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaTypeSubtitle");
    if (result)
      goto LABEL_3;
  }
  result = 165;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMediaTypeVideo(PAL *this)
{
  if (qword_1ECE7D7C8 != -1)
    dispatch_once(&qword_1ECE7D7C8, &__block_literal_global_58);
  return qword_1ECE7D7C0;
}

uint64_t ___ZN3PAL33get_AVFoundation_AVMediaTypeVideoEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaTypeVideo");
    if (result)
    {
LABEL_3:
      qword_1ECE7D7C0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMediaTypeVideo");
    if (result)
      goto LABEL_3;
  }
  result = 166;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAssetChapterMetadataGroupsDidChangeNotification(PAL *this)
{
  if (qword_1ECE7D7D8 != -1)
    dispatch_once(&qword_1ECE7D7D8, &__block_literal_global_60);
  return qword_1ECE7D7D0;
}

uint64_t ___ZN3PAL66get_AVFoundation_AVAssetChapterMetadataGroupsDidChangeNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAssetChapterMetadataGroupsDidChangeNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7D7D0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAssetChapterMetadataGroupsDidChangeNotification");
    if (result)
      goto LABEL_3;
  }
  result = 167;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMetadataCommonKeyTitle(PAL *this)
{
  if (qword_1ECE7D7E8 != -1)
    dispatch_once(&qword_1ECE7D7E8, &__block_literal_global_62_0);
  return qword_1ECE7D7E0;
}

uint64_t ___ZN3PAL41get_AVFoundation_AVMetadataCommonKeyTitleEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataCommonKeyTitle");
    if (result)
    {
LABEL_3:
      qword_1ECE7D7E0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataCommonKeyTitle");
    if (result)
      goto LABEL_3;
  }
  result = 168;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMetadataCommonKeyArtwork(PAL *this)
{
  if (qword_1ECE7D7F8 != -1)
    dispatch_once(&qword_1ECE7D7F8, &__block_literal_global_64);
  return qword_1ECE7D7F0;
}

uint64_t ___ZN3PAL43get_AVFoundation_AVMetadataCommonKeyArtworkEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataCommonKeyArtwork");
    if (result)
    {
LABEL_3:
      qword_1ECE7D7F0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataCommonKeyArtwork");
    if (result)
      goto LABEL_3;
  }
  result = 169;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMetadataKeySpaceCommon(PAL *this)
{
  if (qword_1ECE7D808 != -1)
    dispatch_once(&qword_1ECE7D808, &__block_literal_global_66);
  return qword_1ECE7D800;
}

uint64_t ___ZN3PAL41get_AVFoundation_AVMetadataKeySpaceCommonEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceCommon");
    if (result)
    {
LABEL_3:
      qword_1ECE7D800 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceCommon");
    if (result)
      goto LABEL_3;
  }
  result = 170;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMetadataKeySpaceHLSDateRange(PAL *this)
{
  if (qword_1ECE7D818 != -1)
    dispatch_once(&qword_1ECE7D818, &__block_literal_global_68);
  return qword_1ECE7D810;
}

uint64_t ___ZN3PAL47get_AVFoundation_AVMetadataKeySpaceHLSDateRangeEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceHLSDateRange");
    if (result)
    {
LABEL_3:
      qword_1ECE7D810 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceHLSDateRange");
    if (result)
      goto LABEL_3;
  }
  result = 171;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMetadataKeySpaceID3(PAL *this)
{
  if (qword_1ECE7D828 != -1)
    dispatch_once(&qword_1ECE7D828, &__block_literal_global_70);
  return qword_1ECE7D820;
}

uint64_t ___ZN3PAL38get_AVFoundation_AVMetadataKeySpaceID3Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceID3");
    if (result)
    {
LABEL_3:
      qword_1ECE7D820 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceID3");
    if (result)
      goto LABEL_3;
  }
  result = 172;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMetadataKeySpaceISOUserData(PAL *this)
{
  if (qword_1ECE7D838 != -1)
    dispatch_once(&qword_1ECE7D838, &__block_literal_global_72);
  return qword_1ECE7D830;
}

uint64_t ___ZN3PAL46get_AVFoundation_AVMetadataKeySpaceISOUserDataEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceISOUserData");
    if (result)
    {
LABEL_3:
      qword_1ECE7D830 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceISOUserData");
    if (result)
      goto LABEL_3;
  }
  result = 173;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMetadataKeySpaceQuickTimeMetadata(PAL *this)
{
  if (qword_1ECE7D848 != -1)
    dispatch_once(&qword_1ECE7D848, &__block_literal_global_74_0);
  return qword_1ECE7D840;
}

uint64_t ___ZN3PAL52get_AVFoundation_AVMetadataKeySpaceQuickTimeMetadataEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceQuickTimeMetadata");
    if (result)
    {
LABEL_3:
      qword_1ECE7D840 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceQuickTimeMetadata");
    if (result)
      goto LABEL_3;
  }
  result = 174;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMetadataKeySpaceQuickTimeUserData(PAL *this)
{
  if (qword_1ECE7D858 != -1)
    dispatch_once(&qword_1ECE7D858, &__block_literal_global_76);
  return qword_1ECE7D850;
}

uint64_t ___ZN3PAL52get_AVFoundation_AVMetadataKeySpaceQuickTimeUserDataEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceQuickTimeUserData");
    if (result)
    {
LABEL_3:
      qword_1ECE7D850 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceQuickTimeUserData");
    if (result)
      goto LABEL_3;
  }
  result = 175;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVMetadataKeySpaceiTunes(PAL *this)
{
  if (qword_1ECE7D868 != -1)
    dispatch_once(&qword_1ECE7D868, &__block_literal_global_78);
  return qword_1ECE7D860;
}

uint64_t ___ZN3PAL41get_AVFoundation_AVMetadataKeySpaceiTunesEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceiTunes");
    if (result)
    {
LABEL_3:
      qword_1ECE7D860 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVMetadataKeySpaceiTunes");
    if (result)
      goto LABEL_3;
  }
  result = 176;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey(PAL *this)
{
  if (qword_1ECE7D878 != -1)
    dispatch_once(&qword_1ECE7D878, &__block_literal_global_80_0);
  return qword_1ECE7D870;
}

uint64_t ___ZN3PAL56get_AVFoundation_AVOutOfBandAlternateTrackDisplayNameKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVOutOfBandAlternateTrackDisplayNameKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D870 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVOutOfBandAlternateTrackDisplayNameKey");
    if (result)
      goto LABEL_3;
  }
  result = 177;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVOutOfBandAlternateTrackExtendedLanguageTagKey(PAL *this)
{
  if (qword_1ECE7D888 != -1)
    dispatch_once(&qword_1ECE7D888, &__block_literal_global_82);
  return qword_1ECE7D880;
}

uint64_t ___ZN3PAL64get_AVFoundation_AVOutOfBandAlternateTrackExtendedLanguageTagKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVOutOfBandAlternateTrackExtendedLanguageTagKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D880 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVOutOfBandAlternateTrackExtendedLanguageTagKey");
    if (result)
      goto LABEL_3;
  }
  result = 178;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVOutOfBandAlternateTrackIdentifierKey(PAL *this)
{
  if (qword_1ECE7D898 != -1)
    dispatch_once(&qword_1ECE7D898, &__block_literal_global_84);
  return qword_1ECE7D890;
}

uint64_t ___ZN3PAL55get_AVFoundation_AVOutOfBandAlternateTrackIdentifierKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVOutOfBandAlternateTrackIdentifierKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D890 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVOutOfBandAlternateTrackIdentifierKey");
    if (result)
      goto LABEL_3;
  }
  result = 179;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVOutOfBandAlternateTrackIsDefaultKey(PAL *this)
{
  if (qword_1ECE7D8A8 != -1)
    dispatch_once(&qword_1ECE7D8A8, &__block_literal_global_86_0);
  return qword_1ECE7D8A0;
}

uint64_t ___ZN3PAL54get_AVFoundation_AVOutOfBandAlternateTrackIsDefaultKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVOutOfBandAlternateTrackIsDefaultKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D8A0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVOutOfBandAlternateTrackIsDefaultKey");
    if (result)
      goto LABEL_3;
  }
  result = 180;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey(PAL *this)
{
  if (qword_1ECE7D8B8 != -1)
    dispatch_once(&qword_1ECE7D8B8, &__block_literal_global_88);
  return qword_1ECE7D8B0;
}

uint64_t ___ZN3PAL64get_AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVOutOfBandAlternateTrackMediaCharactersticsKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D8B0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVOutOfBandAlternateTrackMediaCharactersticsKey");
    if (result)
      goto LABEL_3;
  }
  result = 181;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVOutOfBandAlternateTrackSourceKey(PAL *this)
{
  if (qword_1ECE7D8C8 != -1)
    dispatch_once(&qword_1ECE7D8C8, &__block_literal_global_90);
  return qword_1ECE7D8C0;
}

uint64_t ___ZN3PAL51get_AVFoundation_AVOutOfBandAlternateTrackSourceKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVOutOfBandAlternateTrackSourceKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D8C0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVOutOfBandAlternateTrackSourceKey");
    if (result)
      goto LABEL_3;
  }
  result = 182;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVPlayerItemDidPlayToEndTimeNotification(PAL *this)
{
  if (qword_1ECE7D8D8 != -1)
    dispatch_once(&qword_1ECE7D8D8, &__block_literal_global_92);
  return qword_1ECE7D8D0;
}

uint64_t ___ZN3PAL57get_AVFoundation_AVPlayerItemDidPlayToEndTimeNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVPlayerItemDidPlayToEndTimeNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7D8D0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVPlayerItemDidPlayToEndTimeNotification");
    if (result)
      goto LABEL_3;
  }
  result = 183;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVPlayerItemLegibleOutputTextStylingResolutionSourceAndRulesOnly(PAL *this)
{
  if (qword_1ECE7D8E8 != -1)
    dispatch_once(&qword_1ECE7D8E8, &__block_literal_global_94);
  return qword_1ECE7D8E0;
}

uint64_t ___ZN3PAL81get_AVFoundation_AVPlayerItemLegibleOutputTextStylingResolutionSourceAndRulesOnlyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVPlayerItemLegibleOutputTextStylingResolutionSourceAndRulesOnly");
    if (result)
    {
LABEL_3:
      qword_1ECE7D8E0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVPlayerItemLegibleOutputTextStylingResolutionSourceAndRulesOnly");
    if (result)
      goto LABEL_3;
  }
  result = 184;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVSampleBufferDisplayLayerFailedToDecodeNotification(PAL *this)
{
  if (qword_1ECE7D8F8 != -1)
    dispatch_once(&qword_1ECE7D8F8, &__block_literal_global_96);
  return qword_1ECE7D8F0;
}

uint64_t ___ZN3PAL69get_AVFoundation_AVSampleBufferDisplayLayerFailedToDecodeNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferDisplayLayerFailedToDecodeNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7D8F0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferDisplayLayerFailedToDecodeNotification");
    if (result)
      goto LABEL_3;
  }
  result = 185;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVSampleBufferDisplayLayerRequiresFlushToResumeDecodingDidChangeNotification(PAL *this)
{
  if (qword_1ECE7D908 != -1)
    dispatch_once(&qword_1ECE7D908, &__block_literal_global_98);
  return qword_1ECE7D900;
}

uint64_t ___ZN3PAL93get_AVFoundation_AVSampleBufferDisplayLayerRequiresFlushToResumeDecodingDidChangeNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferDisplayLayerRequiresFlushToResumeDecodingDidChangeNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7D900 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferDisplayLayerRequiresFlushToResumeDecodingDidChangeNotification");
    if (result)
      goto LABEL_3;
  }
  result = 186;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey(PAL *this)
{
  if (qword_1ECE7D918 != -1)
    dispatch_once(&qword_1ECE7D918, &__block_literal_global_100);
  return qword_1ECE7D910;
}

uint64_t ___ZN3PAL77get_AVFoundation_AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D910 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey");
    if (result)
      goto LABEL_3;
  }
  result = 187;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVSampleBufferAudioRendererWasFlushedAutomaticallyNotification(PAL *this)
{
  if (qword_1ECE7D928 != -1)
    dispatch_once(&qword_1ECE7D928, &__block_literal_global_102);
  return qword_1ECE7D920;
}

uint64_t ___ZN3PAL79get_AVFoundation_AVSampleBufferAudioRendererWasFlushedAutomaticallyNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferAudioRendererWasFlushedAutomaticallyNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7D920 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferAudioRendererWasFlushedAutomaticallyNotification");
    if (result)
      goto LABEL_3;
  }
  result = 188;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVSampleBufferAudioRendererFlushTimeKey(PAL *this)
{
  if (qword_1ECE7D938 != -1)
    dispatch_once(&qword_1ECE7D938, &__block_literal_global_104);
  return qword_1ECE7D930;
}

uint64_t ___ZN3PAL56get_AVFoundation_AVSampleBufferAudioRendererFlushTimeKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferAudioRendererFlushTimeKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D930 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferAudioRendererFlushTimeKey");
    if (result)
      goto LABEL_3;
  }
  result = 189;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVSampleBufferVideoRendererDidFailToDecodeNotification(PAL *this)
{
  if (qword_1ECE7D948 != -1)
    dispatch_once(&qword_1ECE7D948, &__block_literal_global_106);
  return qword_1ECE7D940;
}

uint64_t ___ZN3PAL71get_AVFoundation_AVSampleBufferVideoRendererDidFailToDecodeNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferVideoRendererDidFailToDecodeNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7D940 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferVideoRendererDidFailToDecodeNotification");
    if (result)
      goto LABEL_3;
  }
  result = 190;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVSampleBufferVideoRendererRequiresFlushToResumeDecodingDidChangeNotification(PAL *this)
{
  if (qword_1ECE7D958 != -1)
    dispatch_once(&qword_1ECE7D958, &__block_literal_global_108);
  return qword_1ECE7D950;
}

uint64_t ___ZN3PAL94get_AVFoundation_AVSampleBufferVideoRendererRequiresFlushToResumeDecodingDidChangeNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferVideoRendererRequiresFlushToResumeDecodingDidChangeNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7D950 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferVideoRendererRequiresFlushToResumeDecodingDidChangeNotification");
    if (result)
      goto LABEL_3;
  }
  result = 191;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVSpeechSynthesisAvailableVoicesDidChangeNotification(PAL *this)
{
  if (qword_1ECE7D968 != -1)
    dispatch_once(&qword_1ECE7D968, &__block_literal_global_110);
  return qword_1ECE7D960;
}

uint64_t ___ZN3PAL70get_AVFoundation_AVSpeechSynthesisAvailableVoicesDidChangeNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSpeechSynthesisAvailableVoicesDidChangeNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7D960 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSpeechSynthesisAvailableVoicesDidChangeNotification");
    if (result)
      goto LABEL_3;
  }
  result = 192;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVStreamDataParserContentKeyRequestProtocolVersionsKey(PAL *this)
{
  if (qword_1ECE7D978 != -1)
    dispatch_once(&qword_1ECE7D978, &__block_literal_global_112);
  return qword_1ECE7D970;
}

uint64_t ___ZN3PAL71get_AVFoundation_AVStreamDataParserContentKeyRequestProtocolVersionsKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVStreamDataParserContentKeyRequestProtocolVersionsKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D970 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVStreamDataParserContentKeyRequestProtocolVersionsKey");
    if (result)
      goto LABEL_3;
  }
  result = 193;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVStreamingKeyDeliveryContentKeyType(PAL *this)
{
  if (qword_1ECE7D988 != -1)
    dispatch_once(&qword_1ECE7D988, &__block_literal_global_114);
  return qword_1ECE7D980;
}

uint64_t ___ZN3PAL53get_AVFoundation_AVStreamingKeyDeliveryContentKeyTypeEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVStreamingKeyDeliveryContentKeyType");
    if (result)
    {
LABEL_3:
      qword_1ECE7D980 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVStreamingKeyDeliveryContentKeyType");
    if (result)
      goto LABEL_3;
  }
  result = 194;
  __break(0xC471u);
  return result;
}

BOOL PAL::init_AVFoundation_AVURLAssetAllowableTypeCategoriesKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetAllowableTypeCategoriesKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetAllowableTypeCategoriesKey");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVURLAssetAllowableTypeCategoriesKey = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVURLAssetAllowableTypeCategoriesKey(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVURLAssetAllowableTypeCategoriesKey(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVURLAssetAllowableTypeCategoriesKey(this);
  PAL::canLoad_AVFoundation_AVURLAssetAllowableTypeCategoriesKey(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetAllowableTypeCategoriesKey(PAL *this)
{
  return PAL::constantAVFoundationAVURLAssetAllowableTypeCategoriesKey;
}

BOOL PAL::init_AVFoundation_AVURLAssetAllowableAudioCodecTypesKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetAllowableAudioCodecTypesKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetAllowableAudioCodecTypesKey");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVURLAssetAllowableAudioCodecTypesKey = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVURLAssetAllowableAudioCodecTypesKey(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVURLAssetAllowableAudioCodecTypesKey(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVURLAssetAllowableAudioCodecTypesKey(this);
  PAL::canLoad_AVFoundation_AVURLAssetAllowableAudioCodecTypesKey(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetAllowableAudioCodecTypesKey(PAL *this)
{
  return PAL::constantAVFoundationAVURLAssetAllowableAudioCodecTypesKey;
}

BOOL PAL::init_AVFoundation_AVURLAssetAllowableVideoCodecTypesKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetAllowableVideoCodecTypesKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetAllowableVideoCodecTypesKey");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVURLAssetAllowableVideoCodecTypesKey = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVURLAssetAllowableVideoCodecTypesKey(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVURLAssetAllowableVideoCodecTypesKey(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVURLAssetAllowableVideoCodecTypesKey(this);
  PAL::canLoad_AVFoundation_AVURLAssetAllowableVideoCodecTypesKey(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetAllowableVideoCodecTypesKey(PAL *this)
{
  return PAL::constantAVFoundationAVURLAssetAllowableVideoCodecTypesKey;
}

BOOL PAL::init_AVFoundation_AVURLAssetAllowableCaptionFormatsKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetAllowableCaptionFormatsKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetAllowableCaptionFormatsKey");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVURLAssetAllowableCaptionFormatsKey = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVURLAssetAllowableCaptionFormatsKey(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVURLAssetAllowableCaptionFormatsKey(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVURLAssetAllowableCaptionFormatsKey(this);
  PAL::canLoad_AVFoundation_AVURLAssetAllowableCaptionFormatsKey(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetAllowableCaptionFormatsKey(PAL *this)
{
  return PAL::constantAVFoundationAVURLAssetAllowableCaptionFormatsKey;
}

BOOL PAL::init_AVFoundation_AVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests(this);
  PAL::canLoad_AVFoundation_AVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests(PAL *this)
{
  return PAL::constantAVFoundationAVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests;
}

uint64_t PAL::get_AVFoundation_AVURLAssetCacheKey(PAL *this)
{
  if (qword_1ECE7D998 != -1)
    dispatch_once(&qword_1ECE7D998, &__block_literal_global_121);
  return qword_1ECE7D990;
}

uint64_t ___ZN3PAL35get_AVFoundation_AVURLAssetCacheKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetCacheKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D990 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetCacheKey");
    if (result)
      goto LABEL_3;
  }
  result = 200;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetInheritURIQueryComponentFromReferencingURIKey(PAL *this)
{
  if (qword_1ECE7D9A8 != -1)
    dispatch_once(&qword_1ECE7D9A8, &__block_literal_global_123);
  return qword_1ECE7D9A0;
}

uint64_t ___ZN3PAL72get_AVFoundation_AVURLAssetInheritURIQueryComponentFromReferencingURIKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetInheritURIQueryComponentFromReferencingURIKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D9A0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetInheritURIQueryComponentFromReferencingURIKey");
    if (result)
      goto LABEL_3;
  }
  result = 201;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetOutOfBandAlternateTracksKey(PAL *this)
{
  if (qword_1ECE7D9B8 != -1)
    dispatch_once(&qword_1ECE7D9B8, &__block_literal_global_125);
  return qword_1ECE7D9B0;
}

uint64_t ___ZN3PAL54get_AVFoundation_AVURLAssetOutOfBandAlternateTracksKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetOutOfBandAlternateTracksKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D9B0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetOutOfBandAlternateTracksKey");
    if (result)
      goto LABEL_3;
  }
  result = 202;
  __break(0xC471u);
  return result;
}

BOOL PAL::init_AVFoundation_AVAssetPrefersSandboxedParsingOptionKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVAssetPrefersSandboxedParsingOptionKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVAssetPrefersSandboxedParsingOptionKey");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVAssetPrefersSandboxedParsingOptionKey = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVAssetPrefersSandboxedParsingOptionKey(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVAssetPrefersSandboxedParsingOptionKey(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVAssetPrefersSandboxedParsingOptionKey(this);
  PAL::canLoad_AVFoundation_AVAssetPrefersSandboxedParsingOptionKey(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVAssetPrefersSandboxedParsingOptionKey(PAL *this)
{
  return PAL::constantAVFoundationAVAssetPrefersSandboxedParsingOptionKey;
}

uint64_t PAL::get_AVFoundation_AVURLAssetReferenceRestrictionsKey(PAL *this)
{
  if (qword_1ECE7D9C8 != -1)
    dispatch_once(&qword_1ECE7D9C8, &__block_literal_global_128);
  return qword_1ECE7D9C0;
}

uint64_t ___ZN3PAL51get_AVFoundation_AVURLAssetReferenceRestrictionsKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetReferenceRestrictionsKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D9C0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetReferenceRestrictionsKey");
    if (result)
      goto LABEL_3;
  }
  result = 204;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetUsesNoPersistentCacheKey(PAL *this)
{
  if (qword_1ECE7D9D8 != -1)
    dispatch_once(&qword_1ECE7D9D8, &__block_literal_global_130);
  return qword_1ECE7D9D0;
}

uint64_t ___ZN3PAL51get_AVFoundation_AVURLAssetUsesNoPersistentCacheKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetUsesNoPersistentCacheKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D9D0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetUsesNoPersistentCacheKey");
    if (result)
      goto LABEL_3;
  }
  result = 205;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoAverageBitRateKey(PAL *this)
{
  if (qword_1ECE7D9E8 != -1)
    dispatch_once(&qword_1ECE7D9E8, &__block_literal_global_132);
  return qword_1ECE7D9E0;
}

uint64_t ___ZN3PAL41get_AVFoundation_AVVideoAverageBitRateKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoAverageBitRateKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7D9E0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoAverageBitRateKey");
    if (result)
      goto LABEL_3;
  }
  result = 206;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoCodecH264(PAL *this)
{
  if (qword_1ECE7D9F8 != -1)
    dispatch_once(&qword_1ECE7D9F8, &__block_literal_global_134);
  return qword_1ECE7D9F0;
}

uint64_t ___ZN3PAL33get_AVFoundation_AVVideoCodecH264Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoCodecH264");
    if (result)
    {
LABEL_3:
      qword_1ECE7D9F0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoCodecH264");
    if (result)
      goto LABEL_3;
  }
  result = 207;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoCodecKey(PAL *this)
{
  if (qword_1ECE7DA08 != -1)
    dispatch_once(&qword_1ECE7DA08, &__block_literal_global_136);
  return qword_1ECE7DA00;
}

uint64_t ___ZN3PAL32get_AVFoundation_AVVideoCodecKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoCodecKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DA00 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoCodecKey");
    if (result)
      goto LABEL_3;
  }
  result = 208;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoQualityKey(PAL *this)
{
  if (qword_1ECE7DA18 != -1)
    dispatch_once(&qword_1ECE7DA18, &__block_literal_global_138);
  return qword_1ECE7DA10;
}

uint64_t ___ZN3PAL34get_AVFoundation_AVVideoQualityKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoQualityKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DA10 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoQualityKey");
    if (result)
      goto LABEL_3;
  }
  result = 209;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoCompressionPropertiesKey(PAL *this)
{
  if (qword_1ECE7DA28 != -1)
    dispatch_once(&qword_1ECE7DA28, &__block_literal_global_140);
  return qword_1ECE7DA20;
}

uint64_t ___ZN3PAL48get_AVFoundation_AVVideoCompressionPropertiesKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoCompressionPropertiesKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DA20 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoCompressionPropertiesKey");
    if (result)
      goto LABEL_3;
  }
  result = 210;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoExpectedSourceFrameRateKey(PAL *this)
{
  if (qword_1ECE7DA38 != -1)
    dispatch_once(&qword_1ECE7DA38, &__block_literal_global_142);
  return qword_1ECE7DA30;
}

uint64_t ___ZN3PAL50get_AVFoundation_AVVideoExpectedSourceFrameRateKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoExpectedSourceFrameRateKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DA30 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoExpectedSourceFrameRateKey");
    if (result)
      goto LABEL_3;
  }
  result = 211;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoHeightKey(PAL *this)
{
  if (qword_1ECE7DA48 != -1)
    dispatch_once(&qword_1ECE7DA48, &__block_literal_global_144);
  return qword_1ECE7DA40;
}

uint64_t ___ZN3PAL33get_AVFoundation_AVVideoHeightKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoHeightKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DA40 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoHeightKey");
    if (result)
      goto LABEL_3;
  }
  result = 212;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoMaxKeyFrameIntervalKey(PAL *this)
{
  if (qword_1ECE7DA58 != -1)
    dispatch_once(&qword_1ECE7DA58, &__block_literal_global_146);
  return qword_1ECE7DA50;
}

uint64_t ___ZN3PAL46get_AVFoundation_AVVideoMaxKeyFrameIntervalKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoMaxKeyFrameIntervalKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DA50 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoMaxKeyFrameIntervalKey");
    if (result)
      goto LABEL_3;
  }
  result = 213;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoProfileLevelH264MainAutoLevel(PAL *this)
{
  if (qword_1ECE7DA68 != -1)
    dispatch_once(&qword_1ECE7DA68, &__block_literal_global_148);
  return qword_1ECE7DA60;
}

uint64_t ___ZN3PAL53get_AVFoundation_AVVideoProfileLevelH264MainAutoLevelEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoProfileLevelH264MainAutoLevel");
    if (result)
    {
LABEL_3:
      qword_1ECE7DA60 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoProfileLevelH264MainAutoLevel");
    if (result)
      goto LABEL_3;
  }
  result = 214;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoProfileLevelKey(PAL *this)
{
  if (qword_1ECE7DA78 != -1)
    dispatch_once(&qword_1ECE7DA78, &__block_literal_global_150);
  return qword_1ECE7DA70;
}

uint64_t ___ZN3PAL39get_AVFoundation_AVVideoProfileLevelKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoProfileLevelKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DA70 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoProfileLevelKey");
    if (result)
      goto LABEL_3;
  }
  result = 215;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoWidthKey(PAL *this)
{
  if (qword_1ECE7DA88 != -1)
    dispatch_once(&qword_1ECE7DA88, &__block_literal_global_152);
  return qword_1ECE7DA80;
}

uint64_t ___ZN3PAL32get_AVFoundation_AVVideoWidthKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoWidthKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DA80 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVVideoWidthKey");
    if (result)
      goto LABEL_3;
  }
  result = 216;
  __break(0xC471u);
  return result;
}

BOOL PAL::init_AVFoundation_AVContentKeyRequestProtocolVersionsKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVContentKeyRequestProtocolVersionsKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVContentKeyRequestProtocolVersionsKey");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVContentKeyRequestProtocolVersionsKey = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVContentKeyRequestProtocolVersionsKey(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVContentKeyRequestProtocolVersionsKey(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVContentKeyRequestProtocolVersionsKey(this);
  PAL::canLoad_AVFoundation_AVContentKeyRequestProtocolVersionsKey(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVContentKeyRequestProtocolVersionsKey(PAL *this)
{
  return PAL::constantAVFoundationAVContentKeyRequestProtocolVersionsKey;
}

BOOL PAL::init_AVFoundation_AVContentKeySystemFairPlayStreaming(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVContentKeySystemFairPlayStreaming");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVContentKeySystemFairPlayStreaming");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVContentKeySystemFairPlayStreaming = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVContentKeySystemFairPlayStreaming(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVContentKeySystemFairPlayStreaming(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVContentKeySystemFairPlayStreaming(this);
  PAL::canLoad_AVFoundation_AVContentKeySystemFairPlayStreaming(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVContentKeySystemFairPlayStreaming(PAL *this)
{
  return PAL::constantAVFoundationAVContentKeySystemFairPlayStreaming;
}

BOOL PAL::init_AVFoundation_AVEncoderBitRateKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVEncoderBitRateKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVEncoderBitRateKey");
  if (v1)
LABEL_3:
    qword_1ECE7DA90 = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVEncoderBitRateKey(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7D5D9 == 1)
    return _MergedGlobals_56 != 0;
  result = PAL::init_AVFoundation_AVEncoderBitRateKey(this);
  _MergedGlobals_56 = result;
  byte_1ECE7D5D9 = 1;
  return result;
}

uint64_t PAL::get_AVFoundation_AVEncoderBitRateKey(PAL *this)
{
  return qword_1ECE7DA90;
}

BOOL PAL::init_AVFoundation_AVFormatIDKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVFormatIDKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVFormatIDKey");
  if (v1)
LABEL_3:
    qword_1ECE7DA98 = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVFormatIDKey(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7D5DB == 1)
    return byte_1ECE7D5DA != 0;
  result = PAL::init_AVFoundation_AVFormatIDKey(this);
  byte_1ECE7D5DA = result;
  byte_1ECE7D5DB = 1;
  return result;
}

uint64_t PAL::get_AVFoundation_AVFormatIDKey(PAL *this)
{
  return qword_1ECE7DA98;
}

BOOL PAL::init_AVFoundation_AVNumberOfChannelsKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVNumberOfChannelsKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVNumberOfChannelsKey");
  if (v1)
LABEL_3:
    qword_1ECE7DAA0 = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVNumberOfChannelsKey(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7D5DD == 1)
    return byte_1ECE7D5DC != 0;
  result = PAL::init_AVFoundation_AVNumberOfChannelsKey(this);
  byte_1ECE7D5DC = result;
  byte_1ECE7D5DD = 1;
  return result;
}

uint64_t PAL::get_AVFoundation_AVNumberOfChannelsKey(PAL *this)
{
  return qword_1ECE7DAA0;
}

BOOL PAL::init_AVFoundation_AVSampleRateKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVSampleRateKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVSampleRateKey");
  if (v1)
LABEL_3:
    qword_1ECE7DAA8 = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVSampleRateKey(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7D5DF == 1)
    return byte_1ECE7D5DE != 0;
  result = PAL::init_AVFoundation_AVSampleRateKey(this);
  byte_1ECE7D5DE = result;
  byte_1ECE7D5DF = 1;
  return result;
}

uint64_t PAL::get_AVFoundation_AVSampleRateKey(PAL *this)
{
  return qword_1ECE7DAA8;
}

BOOL PAL::init_AVFoundation_AVURLAssetOutOfBandMIMETypeKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetOutOfBandMIMETypeKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetOutOfBandMIMETypeKey");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVURLAssetOutOfBandMIMETypeKey = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVURLAssetOutOfBandMIMETypeKey(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVURLAssetOutOfBandMIMETypeKey(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVURLAssetOutOfBandMIMETypeKey(this);
  PAL::canLoad_AVFoundation_AVURLAssetOutOfBandMIMETypeKey(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetOutOfBandMIMETypeKey(PAL *this)
{
  return PAL::constantAVFoundationAVURLAssetOutOfBandMIMETypeKey;
}

BOOL PAL::init_AVFoundation_AVURLAssetUseClientURLLoadingExclusively(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetUseClientURLLoadingExclusively");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetUseClientURLLoadingExclusively");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVURLAssetUseClientURLLoadingExclusively = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVURLAssetUseClientURLLoadingExclusively(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVURLAssetUseClientURLLoadingExclusively(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVURLAssetUseClientURLLoadingExclusively(this);
  PAL::canLoad_AVFoundation_AVURLAssetUseClientURLLoadingExclusively(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetUseClientURLLoadingExclusively(PAL *this)
{
  return PAL::constantAVFoundationAVURLAssetUseClientURLLoadingExclusively;
}

BOOL PAL::init_AVFoundation_AVVideoCodecTypeHEVCWithAlpha(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVVideoCodecTypeHEVCWithAlpha");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVVideoCodecTypeHEVCWithAlpha");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVVideoCodecTypeHEVCWithAlpha = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVVideoCodecTypeHEVCWithAlpha(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVVideoCodecTypeHEVCWithAlpha(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVVideoCodecTypeHEVCWithAlpha(this);
  PAL::canLoad_AVFoundation_AVVideoCodecTypeHEVCWithAlpha(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoCodecTypeHEVCWithAlpha(PAL *this)
{
  return PAL::constantAVFoundationAVVideoCodecTypeHEVCWithAlpha;
}

BOOL PAL::init_AVFoundation_AVVideoRangeSDR(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVVideoRangeSDR");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVVideoRangeSDR");
  if (v1)
LABEL_3:
    qword_1ECE7DAB0 = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVVideoRangeSDR(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7D5E1 == 1)
    return byte_1ECE7D5E0 != 0;
  result = PAL::init_AVFoundation_AVVideoRangeSDR(this);
  byte_1ECE7D5E0 = result;
  byte_1ECE7D5E1 = 1;
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoRangeSDR(PAL *this)
{
  return qword_1ECE7DAB0;
}

BOOL PAL::init_AVFoundation_AVVideoRangeHLG(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVVideoRangeHLG");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVVideoRangeHLG");
  if (v1)
LABEL_3:
    qword_1ECE7DAB8 = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVVideoRangeHLG(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7D5E3 == 1)
    return byte_1ECE7D5E2 != 0;
  result = PAL::init_AVFoundation_AVVideoRangeHLG(this);
  byte_1ECE7D5E2 = result;
  byte_1ECE7D5E3 = 1;
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoRangeHLG(PAL *this)
{
  return qword_1ECE7DAB8;
}

BOOL PAL::init_AVFoundation_AVVideoRangeHDR10(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVVideoRangeHDR10");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVVideoRangeHDR10");
  if (v1)
LABEL_3:
    qword_1ECE7DAC0 = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVVideoRangeHDR10(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7D5E5 == 1)
    return byte_1ECE7D5E4 != 0;
  result = PAL::init_AVFoundation_AVVideoRangeHDR10(this);
  byte_1ECE7D5E4 = result;
  byte_1ECE7D5E5 = 1;
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoRangeHDR10(PAL *this)
{
  return qword_1ECE7DAC0;
}

BOOL PAL::init_AVFoundation_AVVideoRangeDolbyVisionPQ(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVVideoRangeDolbyVisionPQ");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVVideoRangeDolbyVisionPQ");
  if (v1)
LABEL_3:
    qword_1ECE7DAC8 = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVVideoRangeDolbyVisionPQ(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7D5E7 == 1)
    return byte_1ECE7D5E6 != 0;
  result = PAL::init_AVFoundation_AVVideoRangeDolbyVisionPQ(this);
  byte_1ECE7D5E6 = result;
  byte_1ECE7D5E7 = 1;
  return result;
}

uint64_t PAL::get_AVFoundation_AVVideoRangeDolbyVisionPQ(PAL *this)
{
  return qword_1ECE7DAC8;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionCategoryAudioProcessing(PAL *this)
{
  if (qword_1ECE7DAE8 != -1)
    dispatch_once(&qword_1ECE7DAE8, &__block_literal_global_169);
  return qword_1ECE7DAE0;
}

uint64_t ___ZN3PAL54get_AVFoundation_AVAudioSessionCategoryAudioProcessingEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionCategoryAudioProcessing");
    if (result)
    {
LABEL_3:
      qword_1ECE7DAE0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionCategoryAudioProcessing");
    if (result)
      goto LABEL_3;
  }
  result = 234;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionCategoryPlayback(PAL *this)
{
  if (qword_1ECE7DB08 != -1)
    dispatch_once(&qword_1ECE7DB08, &__block_literal_global_173);
  return qword_1ECE7DB00;
}

uint64_t ___ZN3PAL47get_AVFoundation_AVAudioSessionCategoryPlaybackEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionCategoryPlayback");
    if (result)
    {
LABEL_3:
      qword_1ECE7DB00 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionCategoryPlayback");
    if (result)
      goto LABEL_3;
  }
  result = 236;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionCategoryRecord(PAL *this)
{
  if (qword_1ECE7DB18 != -1)
    dispatch_once(&qword_1ECE7DB18, &__block_literal_global_175);
  return qword_1ECE7DB10;
}

uint64_t ___ZN3PAL45get_AVFoundation_AVAudioSessionCategoryRecordEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionCategoryRecord");
    if (result)
    {
LABEL_3:
      qword_1ECE7DB10 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionCategoryRecord");
    if (result)
      goto LABEL_3;
  }
  result = 237;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionCategorySoloAmbient(PAL *this)
{
  if (qword_1ECE7DB28 != -1)
    dispatch_once(&qword_1ECE7DB28, &__block_literal_global_177);
  return qword_1ECE7DB20;
}

uint64_t ___ZN3PAL50get_AVFoundation_AVAudioSessionCategorySoloAmbientEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionCategorySoloAmbient");
    if (result)
    {
LABEL_3:
      qword_1ECE7DB20 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionCategorySoloAmbient");
    if (result)
      goto LABEL_3;
  }
  result = 238;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionInterruptionOptionKey(PAL *this)
{
  if (qword_1ECE7DB48 != -1)
    dispatch_once(&qword_1ECE7DB48, &__block_literal_global_181);
  return qword_1ECE7DB40;
}

uint64_t ___ZN3PAL52get_AVFoundation_AVAudioSessionInterruptionOptionKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionInterruptionOptionKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DB40 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionInterruptionOptionKey");
    if (result)
      goto LABEL_3;
  }
  result = 240;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionInterruptionTypeKey(PAL *this)
{
  if (qword_1ECE7DB58 != -1)
    dispatch_once(&qword_1ECE7DB58, &__block_literal_global_183);
  return qword_1ECE7DB50;
}

uint64_t ___ZN3PAL50get_AVFoundation_AVAudioSessionInterruptionTypeKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionInterruptionTypeKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DB50 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionInterruptionTypeKey");
    if (result)
      goto LABEL_3;
  }
  result = 241;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionMediaServicesWereResetNotification(PAL *this)
{
  if (qword_1ECE7DB68 != -1)
    dispatch_once(&qword_1ECE7DB68, &__block_literal_global_185);
  return qword_1ECE7DB60;
}

uint64_t ___ZN3PAL65get_AVFoundation_AVAudioSessionMediaServicesWereResetNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionMediaServicesWereResetNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7DB60 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionMediaServicesWereResetNotification");
    if (result)
      goto LABEL_3;
  }
  result = 242;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionModeMoviePlayback(PAL *this)
{
  if (qword_1ECE7DB88 != -1)
    dispatch_once(&qword_1ECE7DB88, &__block_literal_global_189);
  return qword_1ECE7DB80;
}

uint64_t ___ZN3PAL48get_AVFoundation_AVAudioSessionModeMoviePlaybackEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionModeMoviePlayback");
    if (result)
    {
LABEL_3:
      qword_1ECE7DB80 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionModeMoviePlayback");
    if (result)
      goto LABEL_3;
  }
  result = 244;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionModeVideoChat(PAL *this)
{
  if (qword_1ECE7DB98 != -1)
    dispatch_once(&qword_1ECE7DB98, &__block_literal_global_191);
  return qword_1ECE7DB90;
}

uint64_t ___ZN3PAL44get_AVFoundation_AVAudioSessionModeVideoChatEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionModeVideoChat");
    if (result)
    {
LABEL_3:
      qword_1ECE7DB90 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionModeVideoChat");
    if (result)
      goto LABEL_3;
  }
  result = 245;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureSessionErrorKey(PAL *this)
{
  if (qword_1ECE7DBA8 != -1)
    dispatch_once(&qword_1ECE7DBA8, &__block_literal_global_193);
  return qword_1ECE7DBA0;
}

uint64_t ___ZN3PAL41get_AVFoundation_AVCaptureSessionErrorKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureSessionErrorKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DBA0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureSessionErrorKey");
    if (result)
      goto LABEL_3;
  }
  result = 246;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureSessionInterruptionEndedNotification(PAL *this)
{
  if (qword_1ECE7DBB8 != -1)
    dispatch_once(&qword_1ECE7DBB8, &__block_literal_global_195);
  return qword_1ECE7DBB0;
}

uint64_t ___ZN3PAL62get_AVFoundation_AVCaptureSessionInterruptionEndedNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureSessionInterruptionEndedNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7DBB0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureSessionInterruptionEndedNotification");
    if (result)
      goto LABEL_3;
  }
  result = 247;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureSessionInterruptionReasonKey(PAL *this)
{
  if (qword_1ECE7DBC8 != -1)
    dispatch_once(&qword_1ECE7DBC8, &__block_literal_global_197);
  return qword_1ECE7DBC0;
}

uint64_t ___ZN3PAL54get_AVFoundation_AVCaptureSessionInterruptionReasonKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureSessionInterruptionReasonKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DBC0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureSessionInterruptionReasonKey");
    if (result)
      goto LABEL_3;
  }
  result = 248;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureSessionRuntimeErrorNotification(PAL *this)
{
  if (qword_1ECE7DBD8 != -1)
    dispatch_once(&qword_1ECE7DBD8, &__block_literal_global_199);
  return qword_1ECE7DBD0;
}

uint64_t ___ZN3PAL57get_AVFoundation_AVCaptureSessionRuntimeErrorNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureSessionRuntimeErrorNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7DBD0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureSessionRuntimeErrorNotification");
    if (result)
      goto LABEL_3;
  }
  result = 249;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureSessionWasInterruptedNotification(PAL *this)
{
  if (qword_1ECE7DBE8 != -1)
    dispatch_once(&qword_1ECE7DBE8, &__block_literal_global_201);
  return qword_1ECE7DBE0;
}

uint64_t ___ZN3PAL59get_AVFoundation_AVCaptureSessionWasInterruptedNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureSessionWasInterruptedNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7DBE0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureSessionWasInterruptedNotification");
    if (result)
      goto LABEL_3;
  }
  result = 250;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetBoundNetworkInterfaceName(PAL *this)
{
  if (qword_1ECE7DBF8 != -1)
    dispatch_once(&qword_1ECE7DBF8, &__block_literal_global_203);
  return qword_1ECE7DBF0;
}

uint64_t ___ZN3PAL52get_AVFoundation_AVURLAssetBoundNetworkInterfaceNameEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetBoundNetworkInterfaceName");
    if (result)
    {
LABEL_3:
      qword_1ECE7DBF0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetBoundNetworkInterfaceName");
    if (result)
      goto LABEL_3;
  }
  result = 251;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetClientBundleIdentifierKey(PAL *this)
{
  if (qword_1ECE7DC08 != -1)
    dispatch_once(&qword_1ECE7DC08, &__block_literal_global_205);
  return qword_1ECE7DC00;
}

uint64_t ___ZN3PAL52get_AVFoundation_AVURLAssetClientBundleIdentifierKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetClientBundleIdentifierKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DC00 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetClientBundleIdentifierKey");
    if (result)
      goto LABEL_3;
  }
  result = 252;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionRouteChangeReasonKey(PAL *this)
{
  if (qword_1ECE7DC28 != -1)
    dispatch_once(&qword_1ECE7DC28, &__block_literal_global_209);
  return qword_1ECE7DC20;
}

uint64_t ___ZN3PAL51get_AVFoundation_AVAudioSessionRouteChangeReasonKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionRouteChangeReasonKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DC20 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionRouteChangeReasonKey");
    if (result)
      goto LABEL_3;
  }
  result = 254;
  __break(0xC471u);
  return result;
}

BOOL PAL::init_AVFoundation_AVURLAssetHTTPCookiesKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetHTTPCookiesKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetHTTPCookiesKey");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVURLAssetHTTPCookiesKey = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVURLAssetHTTPCookiesKey(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVURLAssetHTTPCookiesKey(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVURLAssetHTTPCookiesKey(this);
  PAL::canLoad_AVFoundation_AVURLAssetHTTPCookiesKey(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetHTTPCookiesKey(PAL *this)
{
  return PAL::constantAVFoundationAVURLAssetHTTPCookiesKey;
}

BOOL PAL::init_AVFoundation_AVURLAssetRequiresCustomURLLoadingKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetRequiresCustomURLLoadingKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetRequiresCustomURLLoadingKey");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVURLAssetRequiresCustomURLLoadingKey = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVURLAssetRequiresCustomURLLoadingKey(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVURLAssetRequiresCustomURLLoadingKey(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVURLAssetRequiresCustomURLLoadingKey(this);
  PAL::canLoad_AVFoundation_AVURLAssetRequiresCustomURLLoadingKey(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetRequiresCustomURLLoadingKey(PAL *this)
{
  return PAL::constantAVFoundationAVURLAssetRequiresCustomURLLoadingKey;
}

BOOL PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInWideAngleCamera(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeBuiltInWideAngleCamera");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeBuiltInWideAngleCamera");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInWideAngleCamera = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInWideAngleCamera(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInWideAngleCamera(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInWideAngleCamera(this);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInWideAngleCamera(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureDeviceTypeBuiltInWideAngleCamera(PAL *this)
{
  return PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInWideAngleCamera;
}

BOOL PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInTelephotoCamera(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeBuiltInTelephotoCamera");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeBuiltInTelephotoCamera");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInTelephotoCamera = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInTelephotoCamera(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInTelephotoCamera(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInTelephotoCamera(this);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInTelephotoCamera(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureDeviceTypeBuiltInTelephotoCamera(PAL *this)
{
  return PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInTelephotoCamera;
}

BOOL PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInUltraWideCamera(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeBuiltInUltraWideCamera");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeBuiltInUltraWideCamera");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInUltraWideCamera = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInUltraWideCamera(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInUltraWideCamera(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInUltraWideCamera(this);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInUltraWideCamera(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureDeviceTypeBuiltInUltraWideCamera(PAL *this)
{
  return PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInUltraWideCamera;
}

BOOL PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInDualCamera(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeBuiltInDualCamera");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeBuiltInDualCamera");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInDualCamera = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInDualCamera(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInDualCamera(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInDualCamera(this);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInDualCamera(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureDeviceTypeBuiltInDualCamera(PAL *this)
{
  return PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInDualCamera;
}

BOOL PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInDualWideCamera(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeBuiltInDualWideCamera");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeBuiltInDualWideCamera");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInDualWideCamera = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInDualWideCamera(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInDualWideCamera(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInDualWideCamera(this);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInDualWideCamera(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureDeviceTypeBuiltInDualWideCamera(PAL *this)
{
  return PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInDualWideCamera;
}

BOOL PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInTripleCamera(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeBuiltInTripleCamera");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeBuiltInTripleCamera");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInTripleCamera = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInTripleCamera(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInTripleCamera(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInTripleCamera(this);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInTripleCamera(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureDeviceTypeBuiltInTripleCamera(PAL *this)
{
  return PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInTripleCamera;
}

BOOL PAL::init_AVFoundation_AVCaptureDeviceTypeDeskViewCamera(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeDeskViewCamera");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeDeskViewCamera");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVCaptureDeviceTypeDeskViewCamera = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVCaptureDeviceTypeDeskViewCamera(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVCaptureDeviceTypeDeskViewCamera(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVCaptureDeviceTypeDeskViewCamera(this);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeDeskViewCamera(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureDeviceTypeDeskViewCamera(PAL *this)
{
  return PAL::constantAVFoundationAVCaptureDeviceTypeDeskViewCamera;
}

BOOL PAL::init_AVFoundation_AVCaptureDeviceTypeExternalUnknown(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeExternalUnknown");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVCaptureDeviceTypeExternalUnknown");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVCaptureDeviceTypeExternalUnknown = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVCaptureDeviceTypeExternalUnknown(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVCaptureDeviceTypeExternalUnknown(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVCaptureDeviceTypeExternalUnknown(this);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeExternalUnknown(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVCaptureDeviceTypeExternalUnknown(PAL *this)
{
  return PAL::constantAVFoundationAVCaptureDeviceTypeExternalUnknown;
}

uint64_t PAL::initAVFoundationAVCaptureSessionSetAuthorizedToUseCameraInMultipleForegroundAppLayout(PAL *this, AVCaptureSession *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initAVFoundationAVCaptureSessionSetAuthorizedToUseCameraInMultipleForegroundAppLayout(AVCaptureSession *)::once != -1)
  {
    dispatch_once(&PAL::initAVFoundationAVCaptureSessionSetAuthorizedToUseCameraInMultipleForegroundAppLayout(AVCaptureSession *)::once, &__block_literal_global_344);
    this = v2;
  }
  return PAL::softLinkAVFoundationAVCaptureSessionSetAuthorizedToUseCameraInMultipleForegroundAppLayout(this, (AVCaptureSession *)PAL::softLinkAVFoundationAVCaptureSessionSetAuthorizedToUseCameraInMultipleForegroundAppLayout);
}

uint64_t PAL::get_AVFoundation_AVRouteDetectorMultipleRoutesDetectedDidChangeNotification(PAL *this)
{
  if (qword_1ECE7DC38 != -1)
    dispatch_once(&qword_1ECE7DC38, &__block_literal_global_221);
  return qword_1ECE7DC30;
}

uint64_t ___ZN3PAL75get_AVFoundation_AVRouteDetectorMultipleRoutesDetectedDidChangeNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVRouteDetectorMultipleRoutesDetectedDidChangeNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7DC30 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVRouteDetectorMultipleRoutesDetectedDidChangeNotification");
    if (result)
      goto LABEL_3;
  }
  result = 276;
  __break(0xC471u);
  return result;
}

BOOL PAL::init_AVFoundation_AVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey(this);
  PAL::canLoad_AVFoundation_AVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey(PAL *this)
{
  return PAL::constantAVFoundationAVURLAssetExtendedMIMETypePlayabilityTreatPlaylistMIMETypesAsISOBMFFMediaDataContainersKey;
}

BOOL PAL::init_AVFoundation_AVURLAssetDoNotLogURLsKey(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetDoNotLogURLsKey");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVURLAssetDoNotLogURLsKey");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVURLAssetDoNotLogURLsKey = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVURLAssetDoNotLogURLsKey(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVURLAssetDoNotLogURLsKey(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVURLAssetDoNotLogURLsKey(this);
  PAL::canLoad_AVFoundation_AVURLAssetDoNotLogURLsKey(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVURLAssetDoNotLogURLsKey(PAL *this)
{
  return PAL::constantAVFoundationAVURLAssetDoNotLogURLsKey;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionPortCarAudio(PAL *this)
{
  if (qword_1ECE7DC48 != -1)
    dispatch_once(&qword_1ECE7DC48, &__block_literal_global_225);
  return qword_1ECE7DC40;
}

uint64_t ___ZN3PAL43get_AVFoundation_AVAudioSessionPortCarAudioEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionPortCarAudio");
    if (result)
    {
LABEL_3:
      qword_1ECE7DC40 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionPortCarAudio");
    if (result)
      goto LABEL_3;
  }
  result = 288;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_AVFoundation_AVAudioSessionSpatialPlaybackCapabilitiesChangedNotification(PAL *this)
{
  if (qword_1ECE7DC58 != -1)
    dispatch_once(&qword_1ECE7DC58, &__block_literal_global_227);
  return qword_1ECE7DC50;
}

uint64_t ___ZN3PAL77get_AVFoundation_AVAudioSessionSpatialPlaybackCapabilitiesChangedNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionSpatialPlaybackCapabilitiesChangedNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7DC50 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVAudioSessionSpatialPlaybackCapabilitiesChangedNotification");
    if (result)
      goto LABEL_3;
  }
  result = 289;
  __break(0xC471u);
  return result;
}

float PAL::get_AVFoundation_AVCaptureMaxAvailableTorchLevel(PAL *this)
{
  if (qword_1ECE7DC60 != -1)
    dispatch_once(&qword_1ECE7DC60, &__block_literal_global_229);
  return *(float *)&dword_1ECE7D5E8;
}

uint64_t ___ZN3PAL48get_AVFoundation_AVCaptureMaxAvailableTorchLevelEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureMaxAvailableTorchLevel");
    if (result)
    {
LABEL_3:
      dword_1ECE7D5E8 = *(_DWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureMaxAvailableTorchLevel");
    if (result)
      goto LABEL_3;
  }
  result = 292;
  __break(0xC471u);
  return result;
}

BOOL PAL::init_AVFoundation_AVSampleBufferDisplayLayerReadyForDisplayDidChangeNotification(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE7D5F8 != -1)
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferDisplayLayerReadyForDisplayDidChangeNotification");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferDisplayLayerReadyForDisplayDidChangeNotification");
  if (v1)
LABEL_3:
    PAL::constantAVFoundationAVSampleBufferDisplayLayerReadyForDisplayDidChangeNotification = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_AVFoundation_AVSampleBufferDisplayLayerReadyForDisplayDidChangeNotification(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_AVFoundation_AVSampleBufferDisplayLayerReadyForDisplayDidChangeNotification(void)::loaded != 0;
  result = PAL::init_AVFoundation_AVSampleBufferDisplayLayerReadyForDisplayDidChangeNotification(this);
  PAL::canLoad_AVFoundation_AVSampleBufferDisplayLayerReadyForDisplayDidChangeNotification(void)::loaded = result;
  return result;
}

uint64_t PAL::get_AVFoundation_AVSampleBufferDisplayLayerReadyForDisplayDidChangeNotification(PAL *this)
{
  return PAL::constantAVFoundationAVSampleBufferDisplayLayerReadyForDisplayDidChangeNotification;
}

uint64_t PAL::initAVFoundationAVSampleBufferAttachContentKey(PAL *this, opaqueCMSampleBuffer *a2, AVContentKey *a3, NSError **a4)
{
  if (PAL::initAVFoundationAVSampleBufferAttachContentKey(opaqueCMSampleBuffer *,AVContentKey *,NSError **)::once != -1)
    dispatch_once(&PAL::initAVFoundationAVSampleBufferAttachContentKey(opaqueCMSampleBuffer *,AVContentKey *,NSError **)::once, &__block_literal_global_346);
  return PAL::softLinkAVFoundationAVSampleBufferAttachContentKey(this, a2, a3, (NSError **)PAL::softLinkAVFoundationAVSampleBufferAttachContentKey);
}

uint64_t ___ZN3PALL11initAVAssetEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVAsset");
    qword_1ECE7DC70 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVAssetClass = (uint64_t)PAL::AVAssetFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVAsset");
    qword_1ECE7DC70 = result;
    if (result)
      goto LABEL_3;
  }
  result = 65;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVAssetFunction(PAL *this)
{
  return qword_1ECE7DC70;
}

uint64_t ___ZN3PALL16initAVAssetCacheEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVAssetCache");
    qword_1ECE7DC80 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVAssetCacheClass[0] = PAL::AVAssetCacheFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVAssetCache");
    qword_1ECE7DC80 = result;
    if (result)
      goto LABEL_3;
  }
  result = 66;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVAssetCacheFunction(PAL *this)
{
  return qword_1ECE7DC80;
}

uint64_t ___ZN3PALL24initAVAssetExportSessionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVAssetExportSession");
    qword_1ECE7DC90 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVAssetExportSessionClass = (uint64_t)PAL::AVAssetExportSessionFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVAssetExportSession");
    qword_1ECE7DC90 = result;
    if (result)
      goto LABEL_3;
  }
  result = 67;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVAssetExportSessionFunction(PAL *this)
{
  return qword_1ECE7DC90;
}

uint64_t ___ZN3PALL25initAVAssetImageGeneratorEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVAssetImageGenerator");
    qword_1ECE7DCA0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVAssetImageGeneratorClass = (uint64_t)PAL::AVAssetImageGeneratorFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVAssetImageGenerator");
    qword_1ECE7DCA0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 68;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVAssetImageGeneratorFunction(PAL *this)
{
  return qword_1ECE7DCA0;
}

uint64_t ___ZN3PALL17initAVAssetReaderEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVAssetReader");
    qword_1ECE7DCB0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVAssetReaderClass[0] = PAL::AVAssetReaderFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVAssetReader");
    qword_1ECE7DCB0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 69;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVAssetReaderFunction(PAL *this)
{
  return qword_1ECE7DCB0;
}

uint64_t ___ZN3PALL17initAVAssetWriterEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVAssetWriter");
    qword_1ECE7DCC0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVAssetWriterClass[0] = PAL::AVAssetWriterFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVAssetWriter");
    qword_1ECE7DCC0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 70;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVAssetWriterFunction(PAL *this)
{
  return qword_1ECE7DCC0;
}

uint64_t ___ZN3PALL22initAVAssetWriterInputEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVAssetWriterInput");
    qword_1ECE7DCD0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVAssetWriterInputClass[0] = PAL::AVAssetWriterInputFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVAssetWriterInput");
    qword_1ECE7DCD0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 71;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVAssetWriterInputFunction(PAL *this)
{
  return qword_1ECE7DCD0;
}

uint64_t ___ZN3PALL20initAVAudioConverterEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVAudioConverter");
    qword_1ECE7DCE0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVAudioConverterClass = (uint64_t)PAL::AVAudioConverterFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVAudioConverter");
    qword_1ECE7DCE0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 72;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVAudioConverterFunction(PAL *this)
{
  return qword_1ECE7DCE0;
}

uint64_t ___ZN3PALL17initAVAudioFormatEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVAudioFormat");
    qword_1ECE7DCF0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVAudioFormatClass = (uint64_t)PAL::AVAudioFormatFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVAudioFormat");
    qword_1ECE7DCF0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 73;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVAudioFormatFunction(PAL *this)
{
  return qword_1ECE7DCF0;
}

uint64_t ___ZN3PALL27initAVAudioCompressedBufferEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVAudioCompressedBuffer");
    qword_1ECE7DD00 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVAudioCompressedBufferClass = (uint64_t)PAL::AVAudioCompressedBufferFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVAudioCompressedBuffer");
    qword_1ECE7DD00 = result;
    if (result)
      goto LABEL_3;
  }
  result = 74;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVAudioCompressedBufferFunction(PAL *this)
{
  return qword_1ECE7DD00;
}

uint64_t ___ZN3PALL20initAVAudioPCMBufferEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVAudioPCMBuffer");
    qword_1ECE7DD10 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVAudioPCMBufferClass = (uint64_t)PAL::AVAudioPCMBufferFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVAudioPCMBuffer");
    qword_1ECE7DD10 = result;
    if (result)
      goto LABEL_3;
  }
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVAudioPCMBufferFunction(PAL *this)
{
  return qword_1ECE7DD10;
}

uint64_t ___ZN3PALL25initAVMediaSelectionGroupEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVMediaSelectionGroup");
    qword_1ECE7DD20 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVMediaSelectionGroupClass[0] = PAL::AVMediaSelectionGroupFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVMediaSelectionGroup");
    qword_1ECE7DD20 = result;
    if (result)
      goto LABEL_3;
  }
  result = 76;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVMediaSelectionGroupFunction(PAL *this)
{
  return qword_1ECE7DD20;
}

uint64_t ___ZN3PALL26initAVMediaSelectionOptionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVMediaSelectionOption");
    qword_1ECE7DD30 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVMediaSelectionOptionClass = (uint64_t)PAL::AVMediaSelectionOptionFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVMediaSelectionOption");
    qword_1ECE7DD30 = result;
    if (result)
      goto LABEL_3;
  }
  result = 77;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVMediaSelectionOptionFunction(PAL *this)
{
  return qword_1ECE7DD30;
}

uint64_t ___ZN3PALL18initAVMetadataItemEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVMetadataItem");
    qword_1ECE7DD40 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVMetadataItemClass[0] = PAL::AVMetadataItemFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVMetadataItem");
    qword_1ECE7DD40 = result;
    if (result)
      goto LABEL_3;
  }
  result = 78;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVMetadataItemFunction(PAL *this)
{
  return qword_1ECE7DD40;
}

uint64_t ___ZN3PALL21initAVMutableAudioMixEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVMutableAudioMix");
    qword_1ECE7DD50 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVMutableAudioMixClass[0] = PAL::AVMutableAudioMixFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVMutableAudioMix");
    qword_1ECE7DD50 = result;
    if (result)
      goto LABEL_3;
  }
  result = 79;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVMutableAudioMixFunction(PAL *this)
{
  return qword_1ECE7DD50;
}

uint64_t ___ZN3PALL36initAVMutableAudioMixInputParametersEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVMutableAudioMixInputParameters");
    qword_1ECE7DD60 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVMutableAudioMixInputParametersClass[0] = PAL::AVMutableAudioMixInputParametersFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVMutableAudioMixInputParameters");
    qword_1ECE7DD60 = result;
    if (result)
      goto LABEL_3;
  }
  result = 80;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVMutableAudioMixInputParametersFunction(PAL *this)
{
  return qword_1ECE7DD60;
}

uint64_t ___ZN3PALL12initAVPlayerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVPlayer");
    qword_1ECE7DD80 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVPlayerClass[0] = PAL::AVPlayerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVPlayer");
    qword_1ECE7DD80 = result;
    if (result)
      goto LABEL_3;
  }
  result = 82;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVPlayerFunction(PAL *this)
{
  return qword_1ECE7DD80;
}

uint64_t ___ZN3PALL16initAVPlayerItemEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVPlayerItem");
    qword_1ECE7DD90 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVPlayerItemClass[0] = PAL::AVPlayerItemFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVPlayerItem");
    qword_1ECE7DD90 = result;
    if (result)
      goto LABEL_3;
  }
  result = 83;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVPlayerItemFunction(PAL *this)
{
  return qword_1ECE7DD90;
}

uint64_t ___ZN3PALL29initAVPlayerItemLegibleOutputEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVPlayerItemLegibleOutput");
    qword_1ECE7DDA0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVPlayerItemLegibleOutputClass[0] = PAL::AVPlayerItemLegibleOutputFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVPlayerItemLegibleOutput");
    qword_1ECE7DDA0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 84;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVPlayerItemLegibleOutputFunction(PAL *this)
{
  return qword_1ECE7DDA0;
}

uint64_t ___ZN3PALL33initAVPlayerItemMetadataCollectorEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVPlayerItemMetadataCollector");
    qword_1ECE7DDB0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVPlayerItemMetadataCollectorClass[0] = PAL::AVPlayerItemMetadataCollectorFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVPlayerItemMetadataCollector");
    qword_1ECE7DDB0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 85;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVPlayerItemMetadataCollectorFunction(PAL *this)
{
  return qword_1ECE7DDB0;
}

uint64_t ___ZN3PALL30initAVPlayerItemMetadataOutputEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVPlayerItemMetadataOutput");
    qword_1ECE7DDC0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVPlayerItemMetadataOutputClass[0] = PAL::AVPlayerItemMetadataOutputFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVPlayerItemMetadataOutput");
    qword_1ECE7DDC0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 86;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVPlayerItemMetadataOutputFunction(PAL *this)
{
  return qword_1ECE7DDC0;
}

uint64_t ___ZN3PALL27initAVPlayerItemVideoOutputEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVPlayerItemVideoOutput");
    qword_1ECE7DDD0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVPlayerItemVideoOutputClass[0] = PAL::AVPlayerItemVideoOutputFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVPlayerItemVideoOutput");
    qword_1ECE7DDD0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 87;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVPlayerItemVideoOutputFunction(PAL *this)
{
  return qword_1ECE7DDD0;
}

uint64_t ___ZN3PALL17initAVPlayerLayerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVPlayerLayer");
    qword_1ECE7DDE0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVPlayerLayerClass[0] = PAL::AVPlayerLayerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVPlayerLayer");
    qword_1ECE7DDE0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 88;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVPlayerLayerFunction(PAL *this)
{
  return qword_1ECE7DDE0;
}

uint64_t ___ZN3PALL26initAVSpeechSynthesisVoiceEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVSpeechSynthesisVoice");
    qword_1ECE7DDF0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVSpeechSynthesisVoiceClass[0] = PAL::AVSpeechSynthesisVoiceFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVSpeechSynthesisVoice");
    qword_1ECE7DDF0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 89;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVSpeechSynthesisVoiceFunction(PAL *this)
{
  return qword_1ECE7DDF0;
}

uint64_t ___ZN3PALL23initAVSpeechSynthesizerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVSpeechSynthesizer");
    qword_1ECE7DE00 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVSpeechSynthesizerClass[0] = PAL::AVSpeechSynthesizerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVSpeechSynthesizer");
    qword_1ECE7DE00 = result;
    if (result)
      goto LABEL_3;
  }
  result = 90;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVSpeechSynthesizerFunction(PAL *this)
{
  return qword_1ECE7DE00;
}

uint64_t ___ZN3PALL21initAVSpeechUtteranceEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVSpeechUtterance");
    qword_1ECE7DE10 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVSpeechUtteranceClass[0] = PAL::AVSpeechUtteranceFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVSpeechUtterance");
    qword_1ECE7DE10 = result;
    if (result)
      goto LABEL_3;
  }
  result = 91;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVSpeechUtteranceFunction(PAL *this)
{
  return qword_1ECE7DE10;
}

uint64_t ___ZN3PALL14initAVURLAssetEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVURLAsset");
    qword_1ECE7DE20 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVURLAssetClass[0] = PAL::AVURLAssetFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVURLAsset");
    qword_1ECE7DE20 = result;
    if (result)
      goto LABEL_3;
  }
  result = 92;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVURLAssetFunction(PAL *this)
{
  return qword_1ECE7DE20;
}

Class ___ZN3PALL21initAVAssetCollectionEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVAssetCollection");
  qword_1ECE7DE30 = (uint64_t)result;
  PAL::getAVAssetCollectionClass = (uint64_t)PAL::AVAssetCollectionFunction;
  return result;
}

uint64_t PAL::AVAssetCollectionFunction(PAL *this)
{
  return qword_1ECE7DE30;
}

Class ___ZN3PALL38initAVAssetReaderSampleReferenceOutputEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVAssetReaderSampleReferenceOutput");
  qword_1ECE7DE40 = (uint64_t)result;
  PAL::getAVAssetReaderSampleReferenceOutputClass[0] = PAL::AVAssetReaderSampleReferenceOutputFunction;
  return result;
}

uint64_t PAL::AVAssetReaderSampleReferenceOutputFunction(PAL *this)
{
  return qword_1ECE7DE40;
}

Class ___ZN3PALL33initAVAssetResourceLoadingRequestEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVAssetResourceLoadingRequest");
  qword_1ECE7DE50 = (uint64_t)result;
  PAL::getAVAssetResourceLoadingRequestClass = (uint64_t)PAL::AVAssetResourceLoadingRequestFunction;
  return result;
}

uint64_t PAL::AVAssetResourceLoadingRequestFunction(PAL *this)
{
  return qword_1ECE7DE50;
}

Class ___ZN3PALL16initAVContentKeyEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVContentKey");
  qword_1ECE7DE60 = (uint64_t)result;
  PAL::getAVContentKeyClass[0] = PAL::AVContentKeyFunction;
  return result;
}

uint64_t PAL::AVContentKeyFunction(PAL *this)
{
  return qword_1ECE7DE60;
}

Class ___ZN3PALL27initAVContentKeyReportGroupEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVContentKeyReportGroup");
  qword_1ECE7DE70 = (uint64_t)result;
  PAL::getAVContentKeyReportGroupClass = (uint64_t)PAL::AVContentKeyReportGroupFunction;
  return result;
}

uint64_t PAL::AVContentKeyReportGroupFunction(PAL *this)
{
  return qword_1ECE7DE70;
}

Class ___ZN3PALL24initAVContentKeyResponseEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVContentKeyResponse");
  qword_1ECE7DE80 = (uint64_t)result;
  PAL::getAVContentKeyResponseClass[0] = PAL::AVContentKeyResponseFunction;
  return result;
}

uint64_t PAL::AVContentKeyResponseFunction(PAL *this)
{
  return qword_1ECE7DE80;
}

Class ___ZN3PALL23initAVContentKeySessionEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVContentKeySession");
  qword_1ECE7DE90 = (uint64_t)result;
  PAL::getAVContentKeySessionClass[0] = PAL::AVContentKeySessionFunction;
  return result;
}

uint64_t PAL::AVContentKeySessionFunction(PAL *this)
{
  return qword_1ECE7DE90;
}

Class ___ZN3PALL35initAVDelegatingPlaybackCoordinatorEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVDelegatingPlaybackCoordinator");
  qword_1ECE7DEA0 = (uint64_t)result;
  PAL::getAVDelegatingPlaybackCoordinatorClass = (uint64_t)PAL::AVDelegatingPlaybackCoordinatorFunction;
  return result;
}

uint64_t PAL::AVDelegatingPlaybackCoordinatorFunction(PAL *this)
{
  return qword_1ECE7DEA0;
}

Class ___ZN3PALL31initAVSampleBufferAudioRendererEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVSampleBufferAudioRenderer");
  qword_1ECE7DEB0 = (uint64_t)result;
  PAL::getAVSampleBufferAudioRendererClass = PAL::AVSampleBufferAudioRendererFunction;
  return result;
}

uint64_t PAL::AVSampleBufferAudioRendererFunction(PAL *this)
{
  return qword_1ECE7DEB0;
}

Class ___ZN3PALL30initAVSampleBufferDisplayLayerEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVSampleBufferDisplayLayer");
  qword_1ECE7DEC0 = (uint64_t)result;
  PAL::getAVSampleBufferDisplayLayerClass = PAL::AVSampleBufferDisplayLayerFunction;
  return result;
}

uint64_t PAL::AVSampleBufferDisplayLayerFunction(PAL *this)
{
  return qword_1ECE7DEC0;
}

Class ___ZN3PALL31initAVSampleBufferVideoRendererEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVSampleBufferVideoRenderer");
  qword_1ECE7DED0 = (uint64_t)result;
  PAL::getAVSampleBufferVideoRendererClass[0] = PAL::AVSampleBufferVideoRendererFunction;
  return result;
}

uint64_t PAL::AVSampleBufferVideoRendererFunction(PAL *this)
{
  return qword_1ECE7DED0;
}

Class ___ZN3PALL36initAVSampleBufferRenderSynchronizerEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVSampleBufferRenderSynchronizer");
  qword_1ECE7DEE0 = (uint64_t)result;
  PAL::getAVSampleBufferRenderSynchronizerClass = PAL::AVSampleBufferRenderSynchronizerFunction;
  return result;
}

uint64_t PAL::AVSampleBufferRenderSynchronizerFunction(PAL *this)
{
  return qword_1ECE7DEE0;
}

Class ___ZN3PALL22initAVStreamDataParserEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVStreamDataParser");
  qword_1ECE7DEF0 = (uint64_t)result;
  PAL::getAVStreamDataParserClass = PAL::AVStreamDataParserFunction;
  return result;
}

uint64_t PAL::AVStreamDataParserFunction(PAL *this)
{
  return qword_1ECE7DEF0;
}

uint64_t ___ZN3PALL34initAVPersistableContentKeyRequestEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVPersistableContentKeyRequest");
    qword_1ECE7DF10 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVPersistableContentKeyRequestClass[0] = PAL::AVPersistableContentKeyRequestFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVPersistableContentKeyRequest");
    qword_1ECE7DF10 = result;
    if (result)
      goto LABEL_3;
  }
  result = 112;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVPersistableContentKeyRequestFunction(PAL *this)
{
  return qword_1ECE7DF10;
}

uint64_t ___ZN3PALL19initAVRouteDetectorEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVRouteDetector");
    qword_1ECE7DF20 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVRouteDetectorClass[0] = PAL::AVRouteDetectorFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVRouteDetector");
    qword_1ECE7DF20 = result;
    if (result)
      goto LABEL_3;
  }
  result = 120;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVRouteDetectorFunction(PAL *this)
{
  return qword_1ECE7DF20;
}

Class ___ZN3PALL29initAVVideoPerformanceMetricsEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = objc_getClass("AVVideoPerformanceMetrics");
  qword_1ECE7DF30 = (uint64_t)result;
  PAL::getAVVideoPerformanceMetricsClass = (uint64_t)PAL::AVVideoPerformanceMetricsFunction;
  return result;
}

uint64_t PAL::AVVideoPerformanceMetricsFunction(PAL *this)
{
  return qword_1ECE7DF30;
}

uint64_t ___ZN3PALL23initAVCaptureConnectionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVCaptureConnection");
    qword_1ECE7DF40 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVCaptureConnectionClass = (uint64_t)PAL::AVCaptureConnectionFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVCaptureConnection");
    qword_1ECE7DF40 = result;
    if (result)
      goto LABEL_3;
  }
  result = 125;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVCaptureConnectionFunction(PAL *this)
{
  return qword_1ECE7DF40;
}

uint64_t ___ZN3PALL19initAVCaptureDeviceEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVCaptureDevice");
    qword_1ECE7DF50 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVCaptureDeviceClass[0] = PAL::AVCaptureDeviceFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVCaptureDevice");
    qword_1ECE7DF50 = result;
    if (result)
      goto LABEL_3;
  }
  result = 126;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVCaptureDeviceFunction(PAL *this)
{
  return qword_1ECE7DF50;
}

uint64_t ___ZN3PALL25initAVCaptureDeviceFormatEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVCaptureDeviceFormat");
    qword_1ECE7DF60 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVCaptureDeviceFormatClass = (uint64_t)PAL::AVCaptureDeviceFormatFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVCaptureDeviceFormat");
    qword_1ECE7DF60 = result;
    if (result)
      goto LABEL_3;
  }
  result = 127;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVCaptureDeviceFormatFunction(PAL *this)
{
  return qword_1ECE7DF60;
}

uint64_t ___ZN3PALL24initAVCaptureDeviceInputEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVCaptureDeviceInput");
    qword_1ECE7DF70 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVCaptureDeviceInputClass[0] = PAL::AVCaptureDeviceInputFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVCaptureDeviceInput");
    qword_1ECE7DF70 = result;
    if (result)
      goto LABEL_3;
  }
  result = 128;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVCaptureDeviceInputFunction(PAL *this)
{
  return qword_1ECE7DF70;
}

uint64_t ___ZN3PALL19initAVCaptureOutputEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVCaptureOutput");
    qword_1ECE7DF80 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVCaptureOutputClass = (uint64_t)PAL::AVCaptureOutputFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVCaptureOutput");
    qword_1ECE7DF80 = result;
    if (result)
      goto LABEL_3;
  }
  result = 129;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVCaptureOutputFunction(PAL *this)
{
  return qword_1ECE7DF80;
}

uint64_t ___ZN3PALL26initAVCapturePhotoSettingsEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVCapturePhotoSettings");
    qword_1ECE7DF90 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVCapturePhotoSettingsClass[0] = PAL::AVCapturePhotoSettingsFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVCapturePhotoSettings");
    qword_1ECE7DF90 = result;
    if (result)
      goto LABEL_3;
  }
  result = 130;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVCapturePhotoSettingsFunction(PAL *this)
{
  return qword_1ECE7DF90;
}

uint64_t ___ZN3PALL20initAVCaptureSessionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVCaptureSession");
    qword_1ECE7DFA0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVCaptureSessionClass[0] = PAL::AVCaptureSessionFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVCaptureSession");
    qword_1ECE7DFA0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 131;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVCaptureSessionFunction(PAL *this)
{
  return qword_1ECE7DFA0;
}

uint64_t ___ZN3PALL28initAVCaptureVideoDataOutputEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVCaptureVideoDataOutput");
    qword_1ECE7DFB0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVCaptureVideoDataOutputClass[0] = PAL::AVCaptureVideoDataOutputFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVCaptureVideoDataOutput");
    qword_1ECE7DFB0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 132;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVCaptureVideoDataOutputFunction(PAL *this)
{
  return qword_1ECE7DFB0;
}

uint64_t ___ZN3PALL20initAVFrameRateRangeEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVFrameRateRange");
    qword_1ECE7DFC0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVFrameRateRangeClass = (uint64_t)PAL::AVFrameRateRangeFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVFrameRateRange");
    qword_1ECE7DFC0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 133;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVFrameRateRangeFunction(PAL *this)
{
  return qword_1ECE7DFC0;
}

uint64_t ___ZN3PALL35initAVCaptureDeviceDiscoverySessionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVCaptureDeviceDiscoverySession");
    qword_1ECE7DFD0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVCaptureDeviceDiscoverySessionClass[0] = PAL::AVCaptureDeviceDiscoverySessionFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVCaptureDeviceDiscoverySession");
    qword_1ECE7DFD0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 134;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVCaptureDeviceDiscoverySessionFunction(PAL *this)
{
  return qword_1ECE7DFD0;
}

uint64_t ___ZN3PALL24initAVCapturePhotoOutputEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVCapturePhotoOutput");
    qword_1ECE7DFE0 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVCapturePhotoOutputClass = PAL::AVCapturePhotoOutputFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVCapturePhotoOutput");
    qword_1ECE7DFE0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 135;
  __break(0xC471u);
  return result;
}

uint64_t PAL::AVCapturePhotoOutputFunction(PAL *this)
{
  return qword_1ECE7DFE0;
}

uint64_t ___ZN3PALL85initAVFoundationAVCaptureSessionSetAuthorizedToUseCameraInMultipleForegroundAppLayoutEP16AVCaptureSession_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVCaptureSessionSetAuthorizedToUseCameraInMultipleForegroundAppLayout");
  PAL::softLinkAVFoundationAVCaptureSessionSetAuthorizedToUseCameraInMultipleForegroundAppLayout = (uint64_t (*)(PAL *__hidden, AVCaptureSession *))result;
  if (!result)
  {
    result = 272;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL46initAVFoundationAVSampleBufferAttachContentKeyEP20opaqueCMSampleBufferP12AVContentKeyPP7NSError_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7D5F0, "AVSampleBufferAttachContentKey");
  PAL::softLinkAVFoundationAVSampleBufferAttachContentKey = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *, AVContentKey *, NSError **))result;
  if (!result)
  {
    result = 298;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::ClockGeneric::setCurrentTime(PAL::ClockGeneric *this, double a2)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::MonotonicTime::now(this);
  *((_QWORD *)this + 4) = v5;
  *((_QWORD *)this + 5) = v5;
  *((double *)this + 3) = a2;
  return result;
}

double PAL::ClockGeneric::currentTime(PAL::ClockGeneric *this)
{
  double v2;

  if (*((_BYTE *)this + 8))
  {
    WTF::MonotonicTime::now(this);
    *((double *)this + 5) = v2;
  }
  else
  {
    v2 = *((double *)this + 5);
  }
  return (v2 - *((double *)this + 4)) * *((double *)this + 2) + *((double *)this + 3);
}

uint64_t PAL::ClockGeneric::setPlayRate(PAL::ClockGeneric *this, double a2)
{
  double *v3;
  double v4;
  uint64_t result;
  uint64_t v6;

  v3 = (double *)this;
  if (*((_BYTE *)this + 8))
  {
    this = (PAL::ClockGeneric *)WTF::MonotonicTime::now(this);
    v3[5] = v4;
  }
  else
  {
    v4 = *((double *)this + 5);
  }
  v3[3] = v3[3] + (v4 - v3[4]) * v3[2];
  result = WTF::MonotonicTime::now(this);
  *((_QWORD *)v3 + 4) = v6;
  *((_QWORD *)v3 + 5) = v6;
  v3[2] = a2;
  return result;
}

_BYTE *PAL::ClockGeneric::start(_BYTE *this)
{
  _BYTE *v1;
  uint64_t v2;

  if (!this[8])
  {
    v1 = this;
    this = (_BYTE *)WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    *((_QWORD *)v1 + 4) = v2;
    *((_QWORD *)v1 + 5) = v2;
    v1[8] = 1;
  }
  return this;
}

double *PAL::ClockGeneric::stop(double *this)
{
  double *v1;
  WTF::MonotonicTime *v2;
  double v3;
  uint64_t v4;

  if (*((_BYTE *)this + 8))
  {
    v1 = this;
    v2 = (WTF::MonotonicTime *)WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    v1[5] = v3;
    v1[3] = v1[3] + (v3 - v1[4]) * v1[2];
    this = (double *)WTF::MonotonicTime::now(v2);
    *((_QWORD *)v1 + 4) = v4;
    *((_QWORD *)v1 + 5) = v4;
    *((_BYTE *)v1 + 8) = 0;
  }
  return this;
}

double PAL::ClockGeneric::playRate(PAL::ClockGeneric *this)
{
  return *((double *)this + 2);
}

uint64_t PAL::ClockGeneric::isRunning(PAL::ClockGeneric *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t PAL::initCNContact(PAL *this)
{
  if (qword_1ECE7E158 != -1)
    dispatch_once(&qword_1ECE7E158, &__block_literal_global_46_0);
  return qword_1ECE7E160;
}

uint64_t PAL::initCNLabeledValue(PAL *this)
{
  if (qword_1ECE7E168 != -1)
    dispatch_once(&qword_1ECE7E168, &__block_literal_global_48_0);
  return qword_1ECE7E170;
}

uint64_t PAL::initCNMutableContact(PAL *this)
{
  if (qword_1ECE7E198 != -1)
    dispatch_once(&qword_1ECE7E198, &__block_literal_global_54_0);
  return qword_1ECE7E1A0;
}

uint64_t PAL::initCNMutablePostalAddress(PAL *this)
{
  if (qword_1ECE7E1A8 != -1)
    dispatch_once(&qword_1ECE7E1A8, &__block_literal_global_56_1);
  return qword_1ECE7E1B0;
}

uint64_t PAL::get_Contacts_CNContactDepartmentNameKey(PAL *this)
{
  if (qword_1ECE7E000 != -1)
    dispatch_once(&qword_1ECE7E000, &__block_literal_global_3);
  return qword_1ECE7DFF8;
}

uint64_t ___ZN3PAL39get_Contacts_CNContactDepartmentNameKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactDepartmentNameKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7DFF8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactDepartmentNameKey");
    if (result)
      goto LABEL_3;
  }
  result = 40;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactFamilyNameKey(PAL *this)
{
  if (qword_1ECE7E010 != -1)
    dispatch_once(&qword_1ECE7E010, &__block_literal_global_4_1);
  return qword_1ECE7E008;
}

uint64_t ___ZN3PAL35get_Contacts_CNContactFamilyNameKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactFamilyNameKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E008 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactFamilyNameKey");
    if (result)
      goto LABEL_3;
  }
  result = 41;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactGivenNameKey(PAL *this)
{
  if (qword_1ECE7E020 != -1)
    dispatch_once(&qword_1ECE7E020, &__block_literal_global_6_1);
  return qword_1ECE7E018;
}

uint64_t ___ZN3PAL34get_Contacts_CNContactGivenNameKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactGivenNameKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E018 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactGivenNameKey");
    if (result)
      goto LABEL_3;
  }
  result = 42;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactJobTitleKey(PAL *this)
{
  if (qword_1ECE7E030 != -1)
    dispatch_once(&qword_1ECE7E030, &__block_literal_global_8_1);
  return qword_1ECE7E028;
}

uint64_t ___ZN3PAL33get_Contacts_CNContactJobTitleKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactJobTitleKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E028 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactJobTitleKey");
    if (result)
      goto LABEL_3;
  }
  result = 43;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactMiddleNameKey(PAL *this)
{
  if (qword_1ECE7E040 != -1)
    dispatch_once(&qword_1ECE7E040, &__block_literal_global_10_0);
  return qword_1ECE7E038;
}

uint64_t ___ZN3PAL35get_Contacts_CNContactMiddleNameKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactMiddleNameKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E038 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactMiddleNameKey");
    if (result)
      goto LABEL_3;
  }
  result = 44;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactNamePrefixKey(PAL *this)
{
  if (qword_1ECE7E050 != -1)
    dispatch_once(&qword_1ECE7E050, &__block_literal_global_12_0);
  return qword_1ECE7E048;
}

uint64_t ___ZN3PAL35get_Contacts_CNContactNamePrefixKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactNamePrefixKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E048 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactNamePrefixKey");
    if (result)
      goto LABEL_3;
  }
  result = 45;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactNameSuffixKey(PAL *this)
{
  if (qword_1ECE7E060 != -1)
    dispatch_once(&qword_1ECE7E060, &__block_literal_global_14_1);
  return qword_1ECE7E058;
}

uint64_t ___ZN3PAL35get_Contacts_CNContactNameSuffixKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactNameSuffixKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E058 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactNameSuffixKey");
    if (result)
      goto LABEL_3;
  }
  result = 46;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactNicknameKey(PAL *this)
{
  if (qword_1ECE7E070 != -1)
    dispatch_once(&qword_1ECE7E070, &__block_literal_global_16_0);
  return qword_1ECE7E068;
}

uint64_t ___ZN3PAL33get_Contacts_CNContactNicknameKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactNicknameKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E068 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactNicknameKey");
    if (result)
      goto LABEL_3;
  }
  result = 47;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactNoteKey(PAL *this)
{
  if (qword_1ECE7E080 != -1)
    dispatch_once(&qword_1ECE7E080, &__block_literal_global_18_0);
  return qword_1ECE7E078;
}

uint64_t ___ZN3PAL29get_Contacts_CNContactNoteKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactNoteKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E078 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactNoteKey");
    if (result)
      goto LABEL_3;
  }
  result = 48;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactOrganizationNameKey(PAL *this)
{
  if (qword_1ECE7E090 != -1)
    dispatch_once(&qword_1ECE7E090, &__block_literal_global_20_1);
  return qword_1ECE7E088;
}

uint64_t ___ZN3PAL41get_Contacts_CNContactOrganizationNameKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactOrganizationNameKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E088 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactOrganizationNameKey");
    if (result)
      goto LABEL_3;
  }
  result = 49;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactPhoneticFamilyNameKey(PAL *this)
{
  if (qword_1ECE7E0A0 != -1)
    dispatch_once(&qword_1ECE7E0A0, &__block_literal_global_22_0);
  return qword_1ECE7E098;
}

uint64_t ___ZN3PAL43get_Contacts_CNContactPhoneticFamilyNameKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPhoneticFamilyNameKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E098 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPhoneticFamilyNameKey");
    if (result)
      goto LABEL_3;
  }
  result = 50;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactPhoneticGivenNameKey(PAL *this)
{
  if (qword_1ECE7E0B0 != -1)
    dispatch_once(&qword_1ECE7E0B0, &__block_literal_global_24_0);
  return qword_1ECE7E0A8;
}

uint64_t ___ZN3PAL42get_Contacts_CNContactPhoneticGivenNameKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPhoneticGivenNameKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E0A8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPhoneticGivenNameKey");
    if (result)
      goto LABEL_3;
  }
  result = 51;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactPhoneticMiddleNameKey(PAL *this)
{
  if (qword_1ECE7E0C0 != -1)
    dispatch_once(&qword_1ECE7E0C0, &__block_literal_global_26_1);
  return qword_1ECE7E0B8;
}

uint64_t ___ZN3PAL43get_Contacts_CNContactPhoneticMiddleNameKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPhoneticMiddleNameKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E0B8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPhoneticMiddleNameKey");
    if (result)
      goto LABEL_3;
  }
  result = 52;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactPhoneticOrganizationNameKey(PAL *this)
{
  if (qword_1ECE7E0D0 != -1)
    dispatch_once(&qword_1ECE7E0D0, &__block_literal_global_28_0);
  return qword_1ECE7E0C8;
}

uint64_t ___ZN3PAL49get_Contacts_CNContactPhoneticOrganizationNameKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPhoneticOrganizationNameKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E0C8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPhoneticOrganizationNameKey");
    if (result)
      goto LABEL_3;
  }
  result = 53;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactPreviousFamilyNameKey(PAL *this)
{
  if (qword_1ECE7E0E0 != -1)
    dispatch_once(&qword_1ECE7E0E0, &__block_literal_global_30_0);
  return qword_1ECE7E0D8;
}

uint64_t ___ZN3PAL43get_Contacts_CNContactPreviousFamilyNameKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPreviousFamilyNameKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E0D8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPreviousFamilyNameKey");
    if (result)
      goto LABEL_3;
  }
  result = 54;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactBirthdayKey(PAL *this)
{
  if (qword_1ECE7E0F0 != -1)
    dispatch_once(&qword_1ECE7E0F0, &__block_literal_global_32_1);
  return qword_1ECE7E0E8;
}

uint64_t ___ZN3PAL33get_Contacts_CNContactBirthdayKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactBirthdayKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E0E8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactBirthdayKey");
    if (result)
      goto LABEL_3;
  }
  result = 55;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactNonGregorianBirthdayKey(PAL *this)
{
  if (qword_1ECE7E100 != -1)
    dispatch_once(&qword_1ECE7E100, &__block_literal_global_34_0);
  return qword_1ECE7E0F8;
}

uint64_t ___ZN3PAL45get_Contacts_CNContactNonGregorianBirthdayKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactNonGregorianBirthdayKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E0F8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactNonGregorianBirthdayKey");
    if (result)
      goto LABEL_3;
  }
  result = 56;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactPhoneNumbersKey(PAL *this)
{
  if (qword_1ECE7E110 != -1)
    dispatch_once(&qword_1ECE7E110, &__block_literal_global_36_0);
  return qword_1ECE7E108;
}

uint64_t ___ZN3PAL37get_Contacts_CNContactPhoneNumbersKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPhoneNumbersKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E108 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPhoneNumbersKey");
    if (result)
      goto LABEL_3;
  }
  result = 57;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactEmailAddressesKey(PAL *this)
{
  if (qword_1ECE7E120 != -1)
    dispatch_once(&qword_1ECE7E120, &__block_literal_global_38_1);
  return qword_1ECE7E118;
}

uint64_t ___ZN3PAL39get_Contacts_CNContactEmailAddressesKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactEmailAddressesKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E118 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactEmailAddressesKey");
    if (result)
      goto LABEL_3;
  }
  result = 58;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactPostalAddressesKey(PAL *this)
{
  if (qword_1ECE7E130 != -1)
    dispatch_once(&qword_1ECE7E130, &__block_literal_global_40_0);
  return qword_1ECE7E128;
}

uint64_t ___ZN3PAL40get_Contacts_CNContactPostalAddressesKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPostalAddressesKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E128 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactPostalAddressesKey");
    if (result)
      goto LABEL_3;
  }
  result = 59;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactDatesKey(PAL *this)
{
  if (qword_1ECE7E140 != -1)
    dispatch_once(&qword_1ECE7E140, &__block_literal_global_42_0);
  return qword_1ECE7E138;
}

uint64_t ___ZN3PAL30get_Contacts_CNContactDatesKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactDatesKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E138 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactDatesKey");
    if (result)
      goto LABEL_3;
  }
  result = 60;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Contacts_CNContactUrlAddressesKey(PAL *this)
{
  if (qword_1ECE7E150 != -1)
    dispatch_once(&qword_1ECE7E150, &__block_literal_global_44_0);
  return qword_1ECE7E148;
}

uint64_t ___ZN3PAL37get_Contacts_CNContactUrlAddressesKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactUrlAddressesKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E148 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_57, "CNContactUrlAddressesKey");
    if (result)
      goto LABEL_3;
  }
  result = 61;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PALL13initCNContactEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)objc_getClass("CNContact");
    qword_1ECE7E160 = result;
    if (result)
    {
LABEL_3:
      PAL::getCNContactClass = (uint64_t)PAL::CNContactFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)objc_getClass("CNContact");
    qword_1ECE7E160 = result;
    if (result)
      goto LABEL_3;
  }
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t PAL::CNContactFunction(PAL *this)
{
  return qword_1ECE7E160;
}

uint64_t ___ZN3PALL18initCNLabeledValueEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)objc_getClass("CNLabeledValue");
    qword_1ECE7E170 = result;
    if (result)
    {
LABEL_3:
      PAL::getCNLabeledValueClass = (uint64_t)PAL::CNLabeledValueFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)objc_getClass("CNLabeledValue");
    qword_1ECE7E170 = result;
    if (result)
      goto LABEL_3;
  }
  result = 35;
  __break(0xC471u);
  return result;
}

uint64_t PAL::CNLabeledValueFunction(PAL *this)
{
  return qword_1ECE7E170;
}

uint64_t ___ZN3PALL20initCNMutableContactEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)objc_getClass("CNMutableContact");
    qword_1ECE7E1A0 = result;
    if (result)
    {
LABEL_3:
      PAL::getCNMutableContactClass = (uint64_t)PAL::CNMutableContactFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)objc_getClass("CNMutableContact");
    qword_1ECE7E1A0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 38;
  __break(0xC471u);
  return result;
}

uint64_t PAL::CNMutableContactFunction(PAL *this)
{
  return qword_1ECE7E1A0;
}

uint64_t ___ZN3PALL26initCNMutablePostalAddressEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)objc_getClass("CNMutablePostalAddress");
    qword_1ECE7E1B0 = result;
    if (result)
    {
LABEL_3:
      PAL::getCNMutablePostalAddressClass = (uint64_t)PAL::CNMutablePostalAddressFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)objc_getClass("CNMutablePostalAddress");
    qword_1ECE7E1B0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 39;
  __break(0xC471u);
  return result;
}

uint64_t PAL::CNMutablePostalAddressFunction(PAL *this)
{
  return qword_1ECE7E1B0;
}

uint64_t PAL::CoreGraphicsLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19CoreGraphicsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_0;
  v3 = (char)this;
  if (qword_1ECE7E1C0 != -1)
    dispatch_once(&qword_1ECE7E1C0, block);
  return _MergedGlobals_58;
}

uint64_t PAL::CoreMediaLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v3 = (char)this;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  return PAL::CoreMediaLibrary(BOOL)::frameworkLibrary;
}

uint64_t ___ZN3PAL16CoreMediaLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/CoreMedia.framework/CoreMedia", 2);
  PAL::CoreMediaLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initCoreMediaCMBlockBufferCopyDataBytes(PAL *this, OpaqueCMBlockBuffer *a2, unint64_t a3, unint64_t a4, void *a5)
{
  if (PAL::initCoreMediaCMBlockBufferCopyDataBytes(OpaqueCMBlockBuffer *,unsigned long,unsigned long,void *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBlockBufferCopyDataBytes(OpaqueCMBlockBuffer *,unsigned long,unsigned long,void *)::once, &__block_literal_global_191_0);
  return PAL::softLinkCoreMediaCMBlockBufferCopyDataBytes(this, a2, a3, a4, PAL::softLinkCoreMediaCMBlockBufferCopyDataBytes);
}

uint64_t PAL::initCoreMediaCMBlockBufferGetDataLength(PAL *this, OpaqueCMBlockBuffer *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMBlockBufferGetDataLength(OpaqueCMBlockBuffer *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMBlockBufferGetDataLength(OpaqueCMBlockBuffer *)::once, &__block_literal_global_194);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMBlockBufferGetDataLength(this, (OpaqueCMBlockBuffer *)PAL::softLinkCoreMediaCMBlockBufferGetDataLength);
}

uint64_t PAL::initCoreMediaCMBlockBufferIsRangeContiguous(PAL *this, OpaqueCMBlockBuffer *a2, unint64_t a3)
{
  if (PAL::initCoreMediaCMBlockBufferIsRangeContiguous(OpaqueCMBlockBuffer *,unsigned long,unsigned long)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBlockBufferIsRangeContiguous(OpaqueCMBlockBuffer *,unsigned long,unsigned long)::once, &__block_literal_global_197_0);
  return PAL::softLinkCoreMediaCMBlockBufferIsRangeContiguous(this, a2, a3, (unint64_t)PAL::softLinkCoreMediaCMBlockBufferIsRangeContiguous);
}

uint64_t PAL::initCoreMediaCMBlockBufferReplaceDataBytes(PAL *this, const void *a2, OpaqueCMBlockBuffer *a3, unint64_t a4)
{
  if (PAL::initCoreMediaCMBlockBufferReplaceDataBytes(void const*,OpaqueCMBlockBuffer *,unsigned long,unsigned long)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBlockBufferReplaceDataBytes(void const*,OpaqueCMBlockBuffer *,unsigned long,unsigned long)::once, &__block_literal_global_200);
  return PAL::softLinkCoreMediaCMBlockBufferReplaceDataBytes(this, a2, a3, a4, (unint64_t)PAL::softLinkCoreMediaCMBlockBufferReplaceDataBytes);
}

uint64_t PAL::initCoreMediaCMFormatDescriptionGetExtension(PAL *this, const opaqueCMFormatDescription *a2, const __CFString *a3)
{
  if (PAL::initCoreMediaCMFormatDescriptionGetExtension(opaqueCMFormatDescription const*,__CFString const*)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMFormatDescriptionGetExtension(opaqueCMFormatDescription const*,__CFString const*)::once, &__block_literal_global_203_0);
  return PAL::softLinkCoreMediaCMFormatDescriptionGetExtension(this, a2, (const __CFString *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtension);
}

uint64_t PAL::initCoreMediaCMFormatDescriptionEqual(PAL *this, const opaqueCMFormatDescription *a2, const opaqueCMFormatDescription *a3)
{
  if (PAL::initCoreMediaCMFormatDescriptionEqual(opaqueCMFormatDescription const*,opaqueCMFormatDescription const*)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMFormatDescriptionEqual(opaqueCMFormatDescription const*,opaqueCMFormatDescription const*)::once, &__block_literal_global_206);
  return PAL::softLinkCoreMediaCMFormatDescriptionEqual(this, a2, (const opaqueCMFormatDescription *)PAL::softLinkCoreMediaCMFormatDescriptionEqual);
}

uint64_t PAL::initCoreMediaCMFormatDescriptionGetExtensions(PAL *this, const opaqueCMFormatDescription *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMFormatDescriptionGetExtensions(opaqueCMFormatDescription const*)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMFormatDescriptionGetExtensions(opaqueCMFormatDescription const*)::once, &__block_literal_global_209_0);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMFormatDescriptionGetExtensions(this, (const opaqueCMFormatDescription *)PAL::softLinkCoreMediaCMFormatDescriptionGetExtensions);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetTypeID(PAL *this)
{
  if (PAL::initCoreMediaCMSampleBufferGetTypeID(void)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetTypeID(void)::once, &__block_literal_global_212);
  return PAL::softLinkCoreMediaCMSampleBufferGetTypeID((PAL *)PAL::softLinkCoreMediaCMSampleBufferGetTypeID);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetDataBuffer(PAL *this, opaqueCMSampleBuffer *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMSampleBufferGetDataBuffer(opaqueCMSampleBuffer *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetDataBuffer(opaqueCMSampleBuffer *)::once, &__block_literal_global_215);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMSampleBufferGetDataBuffer[0](this, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetDataBuffer[0]);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetFormatDescription(PAL *this, opaqueCMSampleBuffer *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMSampleBufferGetFormatDescription(opaqueCMSampleBuffer *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetFormatDescription(opaqueCMSampleBuffer *)::once, &__block_literal_global_218);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(this, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetAudioStreamPacketDescriptions(PAL *this, opaqueCMSampleBuffer *a2, unint64_t a3, AudioStreamPacketDescription *a4, unint64_t *a5)
{
  if (PAL::initCoreMediaCMSampleBufferGetAudioStreamPacketDescriptions(opaqueCMSampleBuffer *,unsigned long,AudioStreamPacketDescription *,unsigned long *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetAudioStreamPacketDescriptions(opaqueCMSampleBuffer *,unsigned long,AudioStreamPacketDescription *,unsigned long *)::once, &__block_literal_global_221_0);
  return PAL::softLinkCoreMediaCMSampleBufferGetAudioStreamPacketDescriptions(this, a2, a3, a4, (unint64_t *)PAL::softLinkCoreMediaCMSampleBufferGetAudioStreamPacketDescriptions);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetSampleTimingInfo(PAL *this, opaqueCMSampleBuffer *a2, uint64_t a3, CMSampleTimingInfo *a4)
{
  if (PAL::initCoreMediaCMSampleBufferGetSampleTimingInfo(opaqueCMSampleBuffer *,long,CMSampleTimingInfo *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetSampleTimingInfo(opaqueCMSampleBuffer *,long,CMSampleTimingInfo *)::once, &__block_literal_global_224);
  return PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfo(this, a2, a3, (CMSampleTimingInfo *)PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfo);
}

uint64_t PAL::initCoreMediaCMSampleBufferDataIsReady(PAL *this, opaqueCMSampleBuffer *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMSampleBufferDataIsReady(opaqueCMSampleBuffer *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMSampleBufferDataIsReady(opaqueCMSampleBuffer *)::once, &__block_literal_global_227_0);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMSampleBufferDataIsReady(this, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferDataIsReady);
}

uint64_t PAL::initCoreMediaCMTimeAdd(PAL *this, CMTime *a2, CMTime *a3)
{
  CMTime v6;
  __int128 v7;
  uint64_t v8;

  if (PAL::initCoreMediaCMTimeAdd(CMTime,CMTime)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeAdd(CMTime,CMTime)::once, &__block_literal_global_230);
  v7 = *(_OWORD *)this;
  v8 = *((_QWORD *)this + 2);
  v6 = *a2;
  return PAL::softLinkCoreMediaCMTimeAdd[0]((PAL *)&v7, &v6, a3);
}

uint64_t PAL::initCoreMediaCMTimeCompare(PAL *this, CMTime *a2, CMTime *a3)
{
  CMTime v6;
  __int128 v7;
  uint64_t v8;

  if (PAL::initCoreMediaCMTimeCompare(CMTime,CMTime)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeCompare(CMTime,CMTime)::once, &__block_literal_global_233);
  v7 = *(_OWORD *)this;
  v8 = *((_QWORD *)this + 2);
  v6 = *a2;
  return PAL::softLinkCoreMediaCMTimeCompare((PAL *)&v7, &v6, a3);
}

uint64_t PAL::initCoreMediaCMTimeConvertScale(PAL *this, CMTime *a2, int a3, CMTimeRoundingMethod a4)
{
  __int128 v8;
  uint64_t v9;

  if (PAL::initCoreMediaCMTimeConvertScale(CMTime,int,CMTimeRoundingMethod)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeConvertScale(CMTime,int,CMTimeRoundingMethod)::once, &__block_literal_global_236_0);
  v8 = *(_OWORD *)this;
  v9 = *((_QWORD *)this + 2);
  return PAL::softLinkCoreMediaCMTimeConvertScale((PAL *)&v8, a2, a3, a4);
}

uint64_t PAL::initCoreMediaCMTimeGetSeconds(PAL *this, CMTime *a2)
{
  __int128 v4;
  uint64_t v5;

  if (PAL::initCoreMediaCMTimeGetSeconds(CMTime)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeGetSeconds(CMTime)::once, &__block_literal_global_239);
  v4 = *(_OWORD *)this;
  v5 = *((_QWORD *)this + 2);
  return PAL::softLinkCoreMediaCMTimeGetSeconds((PAL *)&v4, a2);
}

uint64_t PAL::initCoreMediaCMTimeMake(PAL *this, uint64_t a2)
{
  if (PAL::initCoreMediaCMTimeMake(long long,int)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeMake(long long,int)::once, &__block_literal_global_242_0);
  return PAL::softLinkCoreMediaCMTimeMake(this, a2, (int)PAL::softLinkCoreMediaCMTimeMake);
}

uint64_t PAL::initCoreMediaCMTimeMakeWithSeconds(PAL *this, double a2)
{
  if (PAL::initCoreMediaCMTimeMakeWithSeconds(double,int)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeMakeWithSeconds(double,int)::once, &__block_literal_global_245);
  return PAL::softLinkCoreMediaCMTimeMakeWithSeconds(this, a2, (int)PAL::softLinkCoreMediaCMTimeMakeWithSeconds);
}

uint64_t PAL::initCoreMediaCMTimeSubtract(PAL *this, CMTime *a2, CMTime *a3)
{
  CMTime v6;
  __int128 v7;
  uint64_t v8;

  if (PAL::initCoreMediaCMTimeSubtract(CMTime,CMTime)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeSubtract(CMTime,CMTime)::once, &__block_literal_global_248_0);
  v7 = *(_OWORD *)this;
  v8 = *((_QWORD *)this + 2);
  v6 = *a2;
  return PAL::softLinkCoreMediaCMTimeSubtract((PAL *)&v7, &v6, a3);
}

uint64_t PAL::initCoreMediaCMTimeRangeGetEnd(PAL *this, CMTimeRange *a2)
{
  __int128 v3;
  _OWORD v5[3];

  if (PAL::initCoreMediaCMTimeRangeGetEnd(CMTimeRange)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeRangeGetEnd(CMTimeRange)::once, &__block_literal_global_251);
  v3 = *((_OWORD *)this + 1);
  v5[0] = *(_OWORD *)this;
  v5[1] = v3;
  v5[2] = *((_OWORD *)this + 2);
  return PAL::softLinkCoreMediaCMTimeRangeGetEnd((PAL *)v5, a2);
}

uint64_t PAL::initCoreMediaCMTimeRangeMake(PAL *this, CMTime *a2, CMTime *a3)
{
  CMTime v6;
  __int128 v7;
  uint64_t v8;

  if (PAL::initCoreMediaCMTimeRangeMake(CMTime,CMTime)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeRangeMake(CMTime,CMTime)::once, &__block_literal_global_254_0);
  v7 = *(_OWORD *)this;
  v8 = *((_QWORD *)this + 2);
  v6 = *a2;
  return PAL::softLinkCoreMediaCMTimeRangeMake((PAL *)&v7, &v6, a3);
}

uint64_t PAL::initCoreMediaCMTimeRangeEqual(PAL *this, CMTimeRange *a2, CMTimeRange *a3)
{
  __int128 v5;
  __int128 v6;
  CMTimeRange v8;
  _OWORD v9[3];

  if (PAL::initCoreMediaCMTimeRangeEqual(CMTimeRange,CMTimeRange)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeRangeEqual(CMTimeRange,CMTimeRange)::once, &__block_literal_global_257);
  v5 = *((_OWORD *)this + 1);
  v9[0] = *(_OWORD *)this;
  v9[1] = v5;
  v9[2] = *((_OWORD *)this + 2);
  v6 = *(_OWORD *)&a2->start.epoch;
  *(_OWORD *)&v8.start.value = *(_OWORD *)&a2->start.value;
  *(_OWORD *)&v8.start.epoch = v6;
  *(_OWORD *)&v8.duration.timescale = *(_OWORD *)&a2->duration.timescale;
  return PAL::softLinkCoreMediaCMTimeRangeEqual((PAL *)v9, &v8, a3);
}

uint64_t PAL::initCoreMediaCMTimeMaximum(PAL *this, CMTime *a2, CMTime *a3)
{
  CMTime v6;
  __int128 v7;
  uint64_t v8;

  if (PAL::initCoreMediaCMTimeMaximum(CMTime,CMTime)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeMaximum(CMTime,CMTime)::once, &__block_literal_global_260_0);
  v7 = *(_OWORD *)this;
  v8 = *((_QWORD *)this + 2);
  v6 = *a2;
  return PAL::softLinkCoreMediaCMTimeMaximum[0]((PAL *)&v7, &v6, a3);
}

uint64_t PAL::initCoreMediaCMTimeMinimum(PAL *this, CMTime *a2, CMTime *a3)
{
  CMTime v6;
  __int128 v7;
  uint64_t v8;

  if (PAL::initCoreMediaCMTimeMinimum(CMTime,CMTime)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeMinimum(CMTime,CMTime)::once, &__block_literal_global_263);
  v7 = *(_OWORD *)this;
  v8 = *((_QWORD *)this + 2);
  v6 = *a2;
  return PAL::softLinkCoreMediaCMTimeMinimum((PAL *)&v7, &v6, a3);
}

uint64_t PAL::initCoreMediaCMTimeRangeContainsTime(PAL *this, CMTimeRange *a2, CMTime *a3)
{
  __int128 v5;
  CMTimeRange v7;
  __int128 v8;
  __int128 v9;

  if (PAL::initCoreMediaCMTimeRangeContainsTime(CMTimeRange,CMTime)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeRangeContainsTime(CMTimeRange,CMTime)::once, &__block_literal_global_266_0);
  v5 = *((_OWORD *)this + 1);
  *(_OWORD *)&v7.duration.timescale = *(_OWORD *)this;
  v8 = v5;
  v9 = *((_OWORD *)this + 2);
  *(_OWORD *)&v7.start.value = *(_OWORD *)&a2->start.value;
  v7.start.epoch = a2->start.epoch;
  return PAL::softLinkCoreMediaCMTimeRangeContainsTime((PAL *)&v7.duration.timescale, &v7, a3);
}

double PAL::get_CoreMedia_kCMTimeInvalid@<D0>(uint64_t a1@<X8>)
{
  double result;

  if (PAL::get_CoreMedia_kCMTimeInvalid(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeInvalid(void)::once, &__block_literal_global_5);
  result = *(double *)&PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
  *(_OWORD *)a1 = PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
  *(_QWORD *)(a1 + 16) = qword_1EE2E68A0;
  return result;
}

uint64_t ___ZN3PAL28get_CoreMedia_kCMTimeInvalidEv_block_invoke()
{
  uint64_t result;
  __int128 v1;
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v3 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimeInvalid");
    if (result)
    {
LABEL_3:
      v1 = *(_OWORD *)result;
      qword_1EE2E68A0 = *(_QWORD *)(result + 16);
      PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid = v1;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimeInvalid");
    if (result)
      goto LABEL_3;
  }
  result = 69;
  __break(0xC471u);
  return result;
}

double PAL::get_CoreMedia_kCMTimeZero@<D0>(uint64_t a1@<X8>)
{
  double result;

  if (PAL::get_CoreMedia_kCMTimeZero(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeZero(void)::once, &__block_literal_global_6_2);
  result = *(double *)&PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
  *(_OWORD *)a1 = PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
  *(_QWORD *)(a1 + 16) = qword_1EE2E68C0;
  return result;
}

uint64_t ___ZN3PAL25get_CoreMedia_kCMTimeZeroEv_block_invoke()
{
  uint64_t result;
  __int128 v1;
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v3 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimeZero");
    if (result)
    {
LABEL_3:
      v1 = *(_OWORD *)result;
      qword_1EE2E68C0 = *(_QWORD *)(result + 16);
      PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero = v1;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimeZero");
    if (result)
      goto LABEL_3;
  }
  result = 70;
  __break(0xC471u);
  return result;
}

double PAL::get_CoreMedia_kCMTimePositiveInfinity@<D0>(uint64_t a1@<X8>)
{
  double result;

  if (PAL::get_CoreMedia_kCMTimePositiveInfinity(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimePositiveInfinity(void)::once, &__block_literal_global_9);
  result = *(double *)&PAL::get_CoreMedia_kCMTimePositiveInfinity(void)::constantCoreMediakCMTimePositiveInfinity;
  *(_OWORD *)a1 = PAL::get_CoreMedia_kCMTimePositiveInfinity(void)::constantCoreMediakCMTimePositiveInfinity;
  *(_QWORD *)(a1 + 16) = qword_1EE2E68E0;
  return result;
}

uint64_t ___ZN3PAL37get_CoreMedia_kCMTimePositiveInfinityEv_block_invoke()
{
  uint64_t result;
  __int128 v1;
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v3 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimePositiveInfinity");
    if (result)
    {
LABEL_3:
      v1 = *(_OWORD *)result;
      qword_1EE2E68E0 = *(_QWORD *)(result + 16);
      PAL::get_CoreMedia_kCMTimePositiveInfinity(void)::constantCoreMediakCMTimePositiveInfinity = v1;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimePositiveInfinity");
    if (result)
      goto LABEL_3;
  }
  result = 71;
  __break(0xC471u);
  return result;
}

double PAL::get_CoreMedia_kCMTimeRangeInvalid@<D0>(_OWORD *a1@<X8>)
{
  __int128 v3;
  double result;

  if (PAL::get_CoreMedia_kCMTimeRangeInvalid(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeRangeInvalid(void)::once, &__block_literal_global_12_1);
  v3 = xmmword_1EE2E6900;
  *a1 = PAL::get_CoreMedia_kCMTimeRangeInvalid(void)::constantCoreMediakCMTimeRangeInvalid;
  a1[1] = v3;
  result = *(double *)&xmmword_1EE2E6910;
  a1[2] = xmmword_1EE2E6910;
  return result;
}

uint64_t ___ZN3PAL33get_CoreMedia_kCMTimeRangeInvalidEv_block_invoke()
{
  uint64_t result;
  __int128 v1;
  __int128 v2;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v4 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimeRangeInvalid");
    if (result)
    {
LABEL_3:
      v1 = *(_OWORD *)result;
      v2 = *(_OWORD *)(result + 32);
      xmmword_1EE2E6900 = *(_OWORD *)(result + 16);
      xmmword_1EE2E6910 = v2;
      PAL::get_CoreMedia_kCMTimeRangeInvalid(void)::constantCoreMediakCMTimeRangeInvalid = v1;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimeRangeInvalid");
    if (result)
      goto LABEL_3;
  }
  result = 72;
  __break(0xC471u);
  return result;
}

double PAL::get_CoreMedia_kCMTimeIndefinite@<D0>(uint64_t a1@<X8>)
{
  double result;

  if (PAL::get_CoreMedia_kCMTimeIndefinite(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeIndefinite(void)::once, &__block_literal_global_15_0);
  result = *(double *)&PAL::get_CoreMedia_kCMTimeIndefinite(void)::constantCoreMediakCMTimeIndefinite;
  *(_OWORD *)a1 = PAL::get_CoreMedia_kCMTimeIndefinite(void)::constantCoreMediakCMTimeIndefinite;
  *(_QWORD *)(a1 + 16) = qword_1EE2E6938;
  return result;
}

uint64_t ___ZN3PAL31get_CoreMedia_kCMTimeIndefiniteEv_block_invoke()
{
  uint64_t result;
  __int128 v1;
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v3 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimeIndefinite");
    if (result)
    {
LABEL_3:
      v1 = *(_OWORD *)result;
      qword_1EE2E6938 = *(_QWORD *)(result + 16);
      PAL::get_CoreMedia_kCMTimeIndefinite(void)::constantCoreMediakCMTimeIndefinite = v1;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimeIndefinite");
    if (result)
      goto LABEL_3;
  }
  result = 73;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once, &__block_literal_global_18_1);
  return PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::constantCoreMediakCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms;
}

uint64_t ___ZN3PAL75get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtomsEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::constantCoreMediakCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms");
    if (result)
      goto LABEL_3;
  }
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionExtension_ColorPrimaries(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_ColorPrimaries(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_ColorPrimaries(void)::once, &__block_literal_global_21);
  return PAL::get_CoreMedia_kCMFormatDescriptionExtension_ColorPrimaries(void)::constantCoreMediakCMFormatDescriptionExtension_ColorPrimaries;
}

uint64_t ___ZN3PAL58get_CoreMedia_kCMFormatDescriptionExtension_ColorPrimariesEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_ColorPrimaries");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionExtension_ColorPrimaries(void)::constantCoreMediakCMFormatDescriptionExtension_ColorPrimaries = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_ColorPrimaries");
    if (result)
      goto LABEL_3;
  }
  result = 76;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::once, &__block_literal_global_24_1);
  return PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_DCI_P3;
}

uint64_t ___ZN3PAL55get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionColorPrimaries_DCI_P3");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_DCI_P3 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionColorPrimaries_DCI_P3");
    if (result)
      goto LABEL_3;
  }
  result = 77;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::once, &__block_literal_global_27);
  return PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_ITU_R_2020;
}

uint64_t ___ZN3PAL59get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionColorPrimaries_ITU_R_2020");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_ITU_R_2020 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionColorPrimaries_ITU_R_2020");
    if (result)
      goto LABEL_3;
  }
  result = 78;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::once, &__block_literal_global_30_1);
  return PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_P3_D65;
}

uint64_t ___ZN3PAL55get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionColorPrimaries_P3_D65");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_P3_D65 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionColorPrimaries_P3_D65");
    if (result)
      goto LABEL_3;
  }
  result = 79;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionExtension_FullRangeVideo(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_FullRangeVideo(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_FullRangeVideo(void)::once, &__block_literal_global_33);
  return PAL::get_CoreMedia_kCMFormatDescriptionExtension_FullRangeVideo(void)::constantCoreMediakCMFormatDescriptionExtension_FullRangeVideo;
}

uint64_t ___ZN3PAL58get_CoreMedia_kCMFormatDescriptionExtension_FullRangeVideoEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_FullRangeVideo");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionExtension_FullRangeVideo(void)::constantCoreMediakCMFormatDescriptionExtension_FullRangeVideo = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_FullRangeVideo");
    if (result)
      goto LABEL_3;
  }
  result = 80;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2020(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2020(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2020(void)::once, &__block_literal_global_36_1);
  return PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_2020;
}

uint64_t ___ZN3PAL61get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2020Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_ITU_R_2020");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_2020 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_ITU_R_2020");
    if (result)
      goto LABEL_3;
  }
  result = 81;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::once, &__block_literal_global_39);
  return PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_2100_HLG;
}

uint64_t ___ZN3PAL65get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLGEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_2100_HLG = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG");
    if (result)
      goto LABEL_3;
  }
  result = 82;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::once, &__block_literal_global_42_1);
  return PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::constantCoreMediakCMFormatDescriptionTransferFunction_Linear;
}

uint64_t ___ZN3PAL57get_CoreMedia_kCMFormatDescriptionTransferFunction_LinearEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_Linear");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::constantCoreMediakCMFormatDescriptionTransferFunction_Linear = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_Linear");
    if (result)
      goto LABEL_3;
  }
  result = 83;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::once, &__block_literal_global_45);
  return PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ;
}

uint64_t ___ZN3PAL67get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ");
    if (result)
      goto LABEL_3;
  }
  result = 84;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::once, &__block_literal_global_48_1);
  return PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_428_1;
}

uint64_t ___ZN3PAL65get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_428_1 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1");
    if (result)
      goto LABEL_3;
  }
  result = 85;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::once, &__block_literal_global_51);
  return PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionYCbCrMatrix_ITU_R_2020;
}

uint64_t ___ZN3PAL56get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionYCbCrMatrix_ITU_R_2020");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionYCbCrMatrix_ITU_R_2020 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionYCbCrMatrix_ITU_R_2020");
    if (result)
      goto LABEL_3;
  }
  result = 86;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_709_2(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_709_2(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_709_2(void)::once, &__block_literal_global_54_1);
  return PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_709_2(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_ITU_R_709_2;
}

uint64_t ___ZN3PAL60get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_709_2Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionColorPrimaries_ITU_R_709_2");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_709_2(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_ITU_R_709_2 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionColorPrimaries_ITU_R_709_2");
    if (result)
      goto LABEL_3;
  }
  result = 87;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_EBU_3213(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_EBU_3213(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_EBU_3213(void)::once, &__block_literal_global_57);
  return PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_EBU_3213(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_EBU_3213;
}

uint64_t ___ZN3PAL57get_CoreMedia_kCMFormatDescriptionColorPrimaries_EBU_3213Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionColorPrimaries_EBU_3213");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_EBU_3213(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_EBU_3213 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionColorPrimaries_EBU_3213");
    if (result)
      goto LABEL_3;
  }
  result = 88;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_SMPTE_C(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_SMPTE_C(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_SMPTE_C(void)::once, &__block_literal_global_60_0);
  return PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_SMPTE_C(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_SMPTE_C;
}

uint64_t ___ZN3PAL56get_CoreMedia_kCMFormatDescriptionColorPrimaries_SMPTE_CEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionColorPrimaries_SMPTE_C");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_SMPTE_C(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_SMPTE_C = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionColorPrimaries_SMPTE_C");
    if (result)
      goto LABEL_3;
  }
  result = 89;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionExtension_TransferFunction(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_TransferFunction(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_TransferFunction(void)::once, &__block_literal_global_63);
  return PAL::get_CoreMedia_kCMFormatDescriptionExtension_TransferFunction(void)::constantCoreMediakCMFormatDescriptionExtension_TransferFunction;
}

uint64_t ___ZN3PAL60get_CoreMedia_kCMFormatDescriptionExtension_TransferFunctionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_TransferFunction");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionExtension_TransferFunction(void)::constantCoreMediakCMFormatDescriptionExtension_TransferFunction = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_TransferFunction");
    if (result)
      goto LABEL_3;
  }
  result = 90;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_709_2(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_709_2(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_709_2(void)::once, &__block_literal_global_66_0);
  return PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_709_2(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_709_2;
}

uint64_t ___ZN3PAL62get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_709_2Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_ITU_R_709_2");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_709_2(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_709_2 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_ITU_R_709_2");
    if (result)
      goto LABEL_3;
  }
  result = 91;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionExtension_YCbCrMatrix(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_YCbCrMatrix(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_YCbCrMatrix(void)::once, &__block_literal_global_69);
  return PAL::get_CoreMedia_kCMFormatDescriptionExtension_YCbCrMatrix(void)::constantCoreMediakCMFormatDescriptionExtension_YCbCrMatrix;
}

uint64_t ___ZN3PAL55get_CoreMedia_kCMFormatDescriptionExtension_YCbCrMatrixEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_YCbCrMatrix");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionExtension_YCbCrMatrix(void)::constantCoreMediakCMFormatDescriptionExtension_YCbCrMatrix = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_YCbCrMatrix");
    if (result)
      goto LABEL_3;
  }
  result = 92;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_709_2(PAL *this)
{
  if (PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::once, &__block_literal_global_72_0);
  return PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::constantCoreMediakCVImageBufferYCbCrMatrix_ITU_R_709_2;
}

uint64_t ___ZN3PAL51get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_709_2Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCVImageBufferYCbCrMatrix_ITU_R_709_2");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::constantCoreMediakCVImageBufferYCbCrMatrix_ITU_R_709_2 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCVImageBufferYCbCrMatrix_ITU_R_709_2");
    if (result)
      goto LABEL_3;
  }
  result = 93;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_601_4(PAL *this)
{
  if (PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::once, &__block_literal_global_75);
  return PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::constantCoreMediakCVImageBufferYCbCrMatrix_ITU_R_601_4;
}

uint64_t ___ZN3PAL51get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_601_4Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCVImageBufferYCbCrMatrix_ITU_R_601_4");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::constantCoreMediakCVImageBufferYCbCrMatrix_ITU_R_601_4 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCVImageBufferYCbCrMatrix_ITU_R_601_4");
    if (result)
      goto LABEL_3;
  }
  result = 94;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995(PAL *this)
{
  if (PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995(void)::once, &__block_literal_global_78_0);
  return PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995(void)::constantCoreMediakCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995;
}

uint64_t ___ZN3PAL61get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995(void)::constantCoreMediakCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995");
    if (result)
      goto LABEL_3;
  }
  result = 95;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAlignmentType_End(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAlignmentType_End(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAlignmentType_End(void)::once, &__block_literal_global_81);
  return PAL::get_CoreMedia_kCMTextMarkupAlignmentType_End(void)::constantCoreMediakCMTextMarkupAlignmentType_End;
}

uint64_t ___ZN3PAL44get_CoreMedia_kCMTextMarkupAlignmentType_EndEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAlignmentType_End");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAlignmentType_End(void)::constantCoreMediakCMTextMarkupAlignmentType_End = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAlignmentType_End");
    if (result)
      goto LABEL_3;
  }
  result = 97;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Middle(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Middle(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Middle(void)::once, &__block_literal_global_84_0);
  return PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Middle(void)::constantCoreMediakCMTextMarkupAlignmentType_Middle;
}

uint64_t ___ZN3PAL47get_CoreMedia_kCMTextMarkupAlignmentType_MiddleEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAlignmentType_Middle");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Middle(void)::constantCoreMediakCMTextMarkupAlignmentType_Middle = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAlignmentType_Middle");
    if (result)
      goto LABEL_3;
  }
  result = 98;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Start(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Start(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Start(void)::once, &__block_literal_global_87);
  return PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Start(void)::constantCoreMediakCMTextMarkupAlignmentType_Start;
}

uint64_t ___ZN3PAL46get_CoreMedia_kCMTextMarkupAlignmentType_StartEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAlignmentType_Start");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAlignmentType_Start(void)::constantCoreMediakCMTextMarkupAlignmentType_Start = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAlignmentType_Start");
    if (result)
      goto LABEL_3;
  }
  result = 99;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_Alignment(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_Alignment(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_Alignment(void)::once, &__block_literal_global_90_0);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_Alignment(void)::constantCoreMediakCMTextMarkupAttribute_Alignment;
}

uint64_t ___ZN3PAL46get_CoreMedia_kCMTextMarkupAttribute_AlignmentEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_Alignment");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_Alignment(void)::constantCoreMediakCMTextMarkupAttribute_Alignment = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_Alignment");
    if (result)
      goto LABEL_3;
  }
  result = 100;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_BackgroundColorARGB(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_BackgroundColorARGB(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_BackgroundColorARGB(void)::once, &__block_literal_global_93);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_BackgroundColorARGB(void)::constantCoreMediakCMTextMarkupAttribute_BackgroundColorARGB;
}

uint64_t ___ZN3PAL56get_CoreMedia_kCMTextMarkupAttribute_BackgroundColorARGBEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_BackgroundColorARGB");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_BackgroundColorARGB(void)::constantCoreMediakCMTextMarkupAttribute_BackgroundColorARGB = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_BackgroundColorARGB");
    if (result)
      goto LABEL_3;
  }
  result = 101;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight(void)::once, &__block_literal_global_96_0);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight(void)::constantCoreMediakCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight;
}

uint64_t ___ZN3PAL80get_CoreMedia_kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeightEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight(void)::constantCoreMediakCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight");
    if (result)
      goto LABEL_3;
  }
  result = 102;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_BoldStyle(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_BoldStyle(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_BoldStyle(void)::once, &__block_literal_global_99);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_BoldStyle(void)::constantCoreMediakCMTextMarkupAttribute_BoldStyle;
}

uint64_t ___ZN3PAL46get_CoreMedia_kCMTextMarkupAttribute_BoldStyleEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_BoldStyle");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_BoldStyle(void)::constantCoreMediakCMTextMarkupAttribute_BoldStyle = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_BoldStyle");
    if (result)
      goto LABEL_3;
  }
  result = 103;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_CharacterBackgroundColorARGB(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_CharacterBackgroundColorARGB(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_CharacterBackgroundColorARGB(void)::once, &__block_literal_global_102_0);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_CharacterBackgroundColorARGB(void)::constantCoreMediakCMTextMarkupAttribute_CharacterBackgroundColorARGB;
}

uint64_t ___ZN3PAL65get_CoreMedia_kCMTextMarkupAttribute_CharacterBackgroundColorARGBEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_CharacterBackgroundColorARGB");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_CharacterBackgroundColorARGB(void)::constantCoreMediakCMTextMarkupAttribute_CharacterBackgroundColorARGB = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_CharacterBackgroundColorARGB");
    if (result)
      goto LABEL_3;
  }
  result = 104;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_FontFamilyName(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_FontFamilyName(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_FontFamilyName(void)::once, &__block_literal_global_105);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_FontFamilyName(void)::constantCoreMediakCMTextMarkupAttribute_FontFamilyName;
}

uint64_t ___ZN3PAL51get_CoreMedia_kCMTextMarkupAttribute_FontFamilyNameEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_FontFamilyName");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_FontFamilyName(void)::constantCoreMediakCMTextMarkupAttribute_FontFamilyName = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_FontFamilyName");
    if (result)
      goto LABEL_3;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_ForegroundColorARGB(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_ForegroundColorARGB(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_ForegroundColorARGB(void)::once, &__block_literal_global_108_0);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_ForegroundColorARGB(void)::constantCoreMediakCMTextMarkupAttribute_ForegroundColorARGB;
}

uint64_t ___ZN3PAL56get_CoreMedia_kCMTextMarkupAttribute_ForegroundColorARGBEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_ForegroundColorARGB");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_ForegroundColorARGB(void)::constantCoreMediakCMTextMarkupAttribute_ForegroundColorARGB = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_ForegroundColorARGB");
    if (result)
      goto LABEL_3;
  }
  result = 106;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_ItalicStyle(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_ItalicStyle(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_ItalicStyle(void)::once, &__block_literal_global_111);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_ItalicStyle(void)::constantCoreMediakCMTextMarkupAttribute_ItalicStyle;
}

uint64_t ___ZN3PAL48get_CoreMedia_kCMTextMarkupAttribute_ItalicStyleEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_ItalicStyle");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_ItalicStyle(void)::constantCoreMediakCMTextMarkupAttribute_ItalicStyle = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_ItalicStyle");
    if (result)
      goto LABEL_3;
  }
  result = 107;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection(void)::once, &__block_literal_global_114_0);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection(void)::constantCoreMediakCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection;
}

uint64_t ___ZN3PAL95get_CoreMedia_kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirectionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection(void)::constantCoreMediakCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection");
    if (result)
      goto LABEL_3;
  }
  result = 108;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_RelativeFontSize(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_RelativeFontSize(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_RelativeFontSize(void)::once, &__block_literal_global_117);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_RelativeFontSize(void)::constantCoreMediakCMTextMarkupAttribute_RelativeFontSize;
}

uint64_t ___ZN3PAL53get_CoreMedia_kCMTextMarkupAttribute_RelativeFontSizeEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_RelativeFontSize");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_RelativeFontSize(void)::constantCoreMediakCMTextMarkupAttribute_RelativeFontSize = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_RelativeFontSize");
    if (result)
      goto LABEL_3;
  }
  result = 109;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection(void)::once, &__block_literal_global_120);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection(void)::constantCoreMediakCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection;
}

uint64_t ___ZN3PAL85get_CoreMedia_kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirectionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection(void)::constantCoreMediakCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection");
    if (result)
      goto LABEL_3;
  }
  result = 110;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_UnderlineStyle(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_UnderlineStyle(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_UnderlineStyle(void)::once, &__block_literal_global_123_0);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_UnderlineStyle(void)::constantCoreMediakCMTextMarkupAttribute_UnderlineStyle;
}

uint64_t ___ZN3PAL51get_CoreMedia_kCMTextMarkupAttribute_UnderlineStyleEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_UnderlineStyle");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_UnderlineStyle(void)::constantCoreMediakCMTextMarkupAttribute_UnderlineStyle = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_UnderlineStyle");
    if (result)
      goto LABEL_3;
  }
  result = 111;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_VerticalLayout(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_VerticalLayout(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_VerticalLayout(void)::once, &__block_literal_global_126);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_VerticalLayout(void)::constantCoreMediakCMTextMarkupAttribute_VerticalLayout;
}

uint64_t ___ZN3PAL51get_CoreMedia_kCMTextMarkupAttribute_VerticalLayoutEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_VerticalLayout");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_VerticalLayout(void)::constantCoreMediakCMTextMarkupAttribute_VerticalLayout = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_VerticalLayout");
    if (result)
      goto LABEL_3;
  }
  result = 112;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextMarkupAttribute_WritingDirectionSizePercentage(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextMarkupAttribute_WritingDirectionSizePercentage(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextMarkupAttribute_WritingDirectionSizePercentage(void)::once, &__block_literal_global_129);
  return PAL::get_CoreMedia_kCMTextMarkupAttribute_WritingDirectionSizePercentage(void)::constantCoreMediakCMTextMarkupAttribute_WritingDirectionSizePercentage;
}

uint64_t ___ZN3PAL67get_CoreMedia_kCMTextMarkupAttribute_WritingDirectionSizePercentageEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_WritingDirectionSizePercentage");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextMarkupAttribute_WritingDirectionSizePercentage(void)::constantCoreMediakCMTextMarkupAttribute_WritingDirectionSizePercentage = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextMarkupAttribute_WritingDirectionSizePercentage");
    if (result)
      goto LABEL_3;
  }
  result = 113;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextVerticalLayout_LeftToRight(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextVerticalLayout_LeftToRight(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextVerticalLayout_LeftToRight(void)::once, &__block_literal_global_132_0);
  return PAL::get_CoreMedia_kCMTextVerticalLayout_LeftToRight(void)::constantCoreMediakCMTextVerticalLayout_LeftToRight;
}

uint64_t ___ZN3PAL47get_CoreMedia_kCMTextVerticalLayout_LeftToRightEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextVerticalLayout_LeftToRight");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextVerticalLayout_LeftToRight(void)::constantCoreMediakCMTextVerticalLayout_LeftToRight = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextVerticalLayout_LeftToRight");
    if (result)
      goto LABEL_3;
  }
  result = 114;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTextVerticalLayout_RightToLeft(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTextVerticalLayout_RightToLeft(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTextVerticalLayout_RightToLeft(void)::once, &__block_literal_global_135);
  return PAL::get_CoreMedia_kCMTextVerticalLayout_RightToLeft(void)::constantCoreMediakCMTextVerticalLayout_RightToLeft;
}

uint64_t ___ZN3PAL47get_CoreMedia_kCMTextVerticalLayout_RightToLeftEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextVerticalLayout_RightToLeft");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTextVerticalLayout_RightToLeft(void)::constantCoreMediakCMTextVerticalLayout_RightToLeft = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTextVerticalLayout_RightToLeft");
    if (result)
      goto LABEL_3;
  }
  result = 115;
  __break(0xC471u);
  return result;
}

uint64_t PAL::initCoreMediaCMBlockBufferCreateContiguous(PAL *this, const __CFAllocator *a2, OpaqueCMBlockBuffer *a3, const __CFAllocator *a4, const CMBlockBufferCustomBlockSource *a5, unint64_t a6, unint64_t a7, unsigned int a8, OpaqueCMBlockBuffer **a9)
{
  if (PAL::initCoreMediaCMBlockBufferCreateContiguous(__CFAllocator const*,OpaqueCMBlockBuffer *,__CFAllocator const*,CMBlockBufferCustomBlockSource const*,unsigned long,unsigned long,unsigned int,OpaqueCMBlockBuffer **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBlockBufferCreateContiguous(__CFAllocator const*,OpaqueCMBlockBuffer *,__CFAllocator const*,CMBlockBufferCustomBlockSource const*,unsigned long,unsigned long,unsigned int,OpaqueCMBlockBuffer **)::once, &__block_literal_global_269);
  return PAL::softLinkCoreMediaCMBlockBufferCreateContiguous(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t PAL::initCoreMediaCMBlockBufferAppendBufferReference(PAL *this, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, unint64_t a4, unint64_t a5)
{
  if (PAL::initCoreMediaCMBlockBufferAppendBufferReference(OpaqueCMBlockBuffer *,OpaqueCMBlockBuffer *,unsigned long,unsigned long,unsigned int)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBlockBufferAppendBufferReference(OpaqueCMBlockBuffer *,OpaqueCMBlockBuffer *,unsigned long,unsigned long,unsigned int)::once, &__block_literal_global_272_0);
  return PAL::softLinkCoreMediaCMBlockBufferAppendBufferReference(this, a2, a3, a4, a5, PAL::softLinkCoreMediaCMBlockBufferAppendBufferReference);
}

uint64_t PAL::initCoreMediaCMBlockBufferCreateEmpty(PAL *this, const __CFAllocator *a2, unsigned int a3, unsigned int a4, OpaqueCMBlockBuffer **a5)
{
  if (PAL::initCoreMediaCMBlockBufferCreateEmpty(__CFAllocator const*,unsigned int,unsigned int,OpaqueCMBlockBuffer **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBlockBufferCreateEmpty(__CFAllocator const*,unsigned int,unsigned int,OpaqueCMBlockBuffer **)::once, &__block_literal_global_275);
  return PAL::softLinkCoreMediaCMBlockBufferCreateEmpty(this, a2, a3, a4, (OpaqueCMBlockBuffer **)PAL::softLinkCoreMediaCMBlockBufferCreateEmpty);
}

uint64_t PAL::initCoreMediaCMFormatDescriptionGetMediaSubType(PAL *this, const opaqueCMFormatDescription *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMFormatDescriptionGetMediaSubType(opaqueCMFormatDescription const*)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMFormatDescriptionGetMediaSubType(opaqueCMFormatDescription const*)::once, &__block_literal_global_278_0);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMFormatDescriptionGetMediaSubType[0](this, (const opaqueCMFormatDescription *)PAL::softLinkCoreMediaCMFormatDescriptionGetMediaSubType[0]);
}

uint64_t PAL::initCoreMediaCMFormatDescriptionGetMediaType(PAL *this, const opaqueCMFormatDescription *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMFormatDescriptionGetMediaType(opaqueCMFormatDescription const*)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMFormatDescriptionGetMediaType(opaqueCMFormatDescription const*)::once, &__block_literal_global_281);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMFormatDescriptionGetMediaType[0](this, (const opaqueCMFormatDescription *)PAL::softLinkCoreMediaCMFormatDescriptionGetMediaType[0]);
}

uint64_t PAL::initCoreMediaCMBlockBufferAssureBlockMemory(PAL *this, OpaqueCMBlockBuffer *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMBlockBufferAssureBlockMemory(OpaqueCMBlockBuffer *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMBlockBufferAssureBlockMemory(OpaqueCMBlockBuffer *)::once, &__block_literal_global_284_0);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMBlockBufferAssureBlockMemory(this, (OpaqueCMBlockBuffer *)PAL::softLinkCoreMediaCMBlockBufferAssureBlockMemory);
}

uint64_t PAL::initCoreMediaCMBlockBufferGetDataPointer(PAL *this, OpaqueCMBlockBuffer *a2, unint64_t a3, unint64_t *a4, unint64_t *a5, char **a6)
{
  if (PAL::initCoreMediaCMBlockBufferGetDataPointer(OpaqueCMBlockBuffer *,unsigned long,unsigned long *,unsigned long *,char **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBlockBufferGetDataPointer(OpaqueCMBlockBuffer *,unsigned long,unsigned long *,unsigned long *,char **)::once, &__block_literal_global_287);
  return PAL::softLinkCoreMediaCMBlockBufferGetDataPointer(this, a2, a3, a4, a5, (char **)PAL::softLinkCoreMediaCMBlockBufferGetDataPointer);
}

uint64_t PAL::initCoreMediaCMSampleBufferCreateReady(PAL *this, const __CFAllocator *a2, OpaqueCMBlockBuffer *a3, const opaqueCMFormatDescription *a4, uint64_t a5, uint64_t a6, const CMSampleTimingInfo *a7, uint64_t a8, const unint64_t *a9, opaqueCMSampleBuffer **a10)
{
  if (PAL::initCoreMediaCMSampleBufferCreateReady(__CFAllocator const*,OpaqueCMBlockBuffer *,opaqueCMFormatDescription const*,long,long,CMSampleTimingInfo const*,long,unsigned long const*,opaqueCMSampleBuffer **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferCreateReady(__CFAllocator const*,OpaqueCMBlockBuffer *,opaqueCMFormatDescription const*,long,long,CMSampleTimingInfo const*,long,unsigned long const*,opaqueCMSampleBuffer **)::once, &__block_literal_global_290_0);
  return PAL::softLinkCoreMediaCMSampleBufferCreateReady(this, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t PAL::initCoreMediaCMSampleBufferCreate(PAL *this, const __CFAllocator *a2, OpaqueCMBlockBuffer *a3, unsigned __int8 a4, int (*a5)(opaqueCMSampleBuffer *, void *), void *a6, const opaqueCMFormatDescription *a7, uint64_t a8, uint64_t a9, const CMSampleTimingInfo *a10, uint64_t a11, const unint64_t *a12, opaqueCMSampleBuffer **a13)
{
  const opaqueCMFormatDescription *v20;
  uint64_t v21;

  if (PAL::initCoreMediaCMSampleBufferCreate(__CFAllocator const*,OpaqueCMBlockBuffer *,unsigned char,int (*)(opaqueCMSampleBuffer *,void *),void *,opaqueCMFormatDescription const*,long,long,CMSampleTimingInfo const*,long,unsigned long const*,opaqueCMSampleBuffer **)::once != -1)
  {
    v20 = a7;
    v21 = a8;
    dispatch_once(&PAL::initCoreMediaCMSampleBufferCreate(__CFAllocator const*,OpaqueCMBlockBuffer *,unsigned char,int (*)(opaqueCMSampleBuffer *,void *),void *,opaqueCMFormatDescription const*,long,long,CMSampleTimingInfo const*,long,unsigned long const*,opaqueCMSampleBuffer **)::once, &__block_literal_global_293);
    a7 = v20;
    a8 = v21;
  }
  return PAL::softLinkCoreMediaCMSampleBufferCreate(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t PAL::initCoreMediaCMSampleBufferCreateCopy(PAL *this, const __CFAllocator *a2, opaqueCMSampleBuffer *a3, opaqueCMSampleBuffer **a4)
{
  if (PAL::initCoreMediaCMSampleBufferCreateCopy(__CFAllocator const*,opaqueCMSampleBuffer *,opaqueCMSampleBuffer **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferCreateCopy(__CFAllocator const*,opaqueCMSampleBuffer *,opaqueCMSampleBuffer **)::once, &__block_literal_global_296_0);
  return PAL::softLinkCoreMediaCMSampleBufferCreateCopy(this, a2, a3, (opaqueCMSampleBuffer **)PAL::softLinkCoreMediaCMSampleBufferCreateCopy);
}

uint64_t PAL::initCoreMediaCMSampleBufferCreateCopyWithNewTiming(PAL *this, const __CFAllocator *a2, opaqueCMSampleBuffer *a3, uint64_t a4, const CMSampleTimingInfo *a5, opaqueCMSampleBuffer **a6)
{
  if (PAL::initCoreMediaCMSampleBufferCreateCopyWithNewTiming(__CFAllocator const*,opaqueCMSampleBuffer *,long,CMSampleTimingInfo const*,opaqueCMSampleBuffer **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferCreateCopyWithNewTiming(__CFAllocator const*,opaqueCMSampleBuffer *,long,CMSampleTimingInfo const*,opaqueCMSampleBuffer **)::once, &__block_literal_global_299);
  return PAL::softLinkCoreMediaCMSampleBufferCreateCopyWithNewTiming(this, a2, a3, a4, a5, (opaqueCMSampleBuffer **)PAL::softLinkCoreMediaCMSampleBufferCreateCopyWithNewTiming);
}

uint64_t PAL::initCoreMediaCMSampleBufferCreateReadyWithImageBuffer(PAL *this, const __CFAllocator *a2, __CVBuffer *a3, const opaqueCMFormatDescription *a4, const CMSampleTimingInfo *a5, opaqueCMSampleBuffer **a6)
{
  if (PAL::initCoreMediaCMSampleBufferCreateReadyWithImageBuffer(__CFAllocator const*,__CVBuffer *,opaqueCMFormatDescription const*,CMSampleTimingInfo const*,opaqueCMSampleBuffer **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferCreateReadyWithImageBuffer(__CFAllocator const*,__CVBuffer *,opaqueCMFormatDescription const*,CMSampleTimingInfo const*,opaqueCMSampleBuffer **)::once, &__block_literal_global_302_0);
  return PAL::softLinkCoreMediaCMSampleBufferCreateReadyWithImageBuffer(this, a2, a3, a4, a5, (opaqueCMSampleBuffer **)PAL::softLinkCoreMediaCMSampleBufferCreateReadyWithImageBuffer);
}

uint64_t PAL::initCoreMediaCMSampleBufferCreateForImageBuffer(PAL *this, const __CFAllocator *a2, __CVBuffer *a3, unsigned __int8 a4, int (*a5)(opaqueCMSampleBuffer *, void *), void *a6, const opaqueCMFormatDescription *a7, const CMSampleTimingInfo *a8, opaqueCMSampleBuffer **a9)
{
  if (PAL::initCoreMediaCMSampleBufferCreateForImageBuffer(__CFAllocator const*,__CVBuffer *,unsigned char,int (*)(opaqueCMSampleBuffer *,void *),void *,opaqueCMFormatDescription const*,CMSampleTimingInfo const*,opaqueCMSampleBuffer **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferCreateForImageBuffer(__CFAllocator const*,__CVBuffer *,unsigned char,int (*)(opaqueCMSampleBuffer *,void *),void *,opaqueCMFormatDescription const*,CMSampleTimingInfo const*,opaqueCMSampleBuffer **)::once, &__block_literal_global_305);
  return PAL::softLinkCoreMediaCMSampleBufferCreateForImageBuffer(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetDecodeTimeStamp(PAL *this, opaqueCMSampleBuffer *a2)
{
  if (PAL::initCoreMediaCMSampleBufferGetDecodeTimeStamp(opaqueCMSampleBuffer *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetDecodeTimeStamp(opaqueCMSampleBuffer *)::once, &__block_literal_global_308_0);
  return PAL::softLinkCoreMediaCMSampleBufferGetDecodeTimeStamp[0](this, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetDecodeTimeStamp[0]);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetDuration(PAL *this, opaqueCMSampleBuffer *a2)
{
  if (PAL::initCoreMediaCMSampleBufferGetDuration(opaqueCMSampleBuffer *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetDuration(opaqueCMSampleBuffer *)::once, &__block_literal_global_311);
  return PAL::softLinkCoreMediaCMSampleBufferGetDuration[0](this, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetDuration[0]);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetImageBuffer(PAL *this, opaqueCMSampleBuffer *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMSampleBufferGetImageBuffer(opaqueCMSampleBuffer *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetImageBuffer(opaqueCMSampleBuffer *)::once, &__block_literal_global_314_0);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0](this, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0]);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetPresentationTimeStamp(PAL *this, opaqueCMSampleBuffer *a2)
{
  if (PAL::initCoreMediaCMSampleBufferGetPresentationTimeStamp(opaqueCMSampleBuffer *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetPresentationTimeStamp(opaqueCMSampleBuffer *)::once, &__block_literal_global_317);
  return PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0](this, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0]);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetOutputDuration(PAL *this, opaqueCMSampleBuffer *a2)
{
  if (PAL::initCoreMediaCMSampleBufferGetOutputDuration(opaqueCMSampleBuffer *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetOutputDuration(opaqueCMSampleBuffer *)::once, &__block_literal_global_320_0);
  return PAL::softLinkCoreMediaCMSampleBufferGetOutputDuration[0](this, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetOutputDuration[0]);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetOutputPresentationTimeStamp(PAL *this, opaqueCMSampleBuffer *a2)
{
  if (PAL::initCoreMediaCMSampleBufferGetOutputPresentationTimeStamp(opaqueCMSampleBuffer *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetOutputPresentationTimeStamp(opaqueCMSampleBuffer *)::once, &__block_literal_global_323);
  return PAL::softLinkCoreMediaCMSampleBufferGetOutputPresentationTimeStamp(this, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetOutputPresentationTimeStamp);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetSampleAttachmentsArray(PAL *this, opaqueCMSampleBuffer *a2)
{
  if (PAL::initCoreMediaCMSampleBufferGetSampleAttachmentsArray(opaqueCMSampleBuffer *,unsigned char)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetSampleAttachmentsArray(opaqueCMSampleBuffer *,unsigned char)::once, &__block_literal_global_326_0);
  return PAL::softLinkCoreMediaCMSampleBufferGetSampleAttachmentsArray(this, a2, PAL::softLinkCoreMediaCMSampleBufferGetSampleAttachmentsArray);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetSampleTimingInfoArray(PAL *this, opaqueCMSampleBuffer *a2, uint64_t a3, CMSampleTimingInfo *a4, uint64_t *a5)
{
  if (PAL::initCoreMediaCMSampleBufferGetSampleTimingInfoArray(opaqueCMSampleBuffer *,long,CMSampleTimingInfo *,long *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetSampleTimingInfoArray(opaqueCMSampleBuffer *,long,CMSampleTimingInfo *,long *)::once, &__block_literal_global_329);
  return PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfoArray(this, a2, a3, a4, (uint64_t *)PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfoArray);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetTotalSampleSize(PAL *this, opaqueCMSampleBuffer *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMSampleBufferGetTotalSampleSize(opaqueCMSampleBuffer *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetTotalSampleSize(opaqueCMSampleBuffer *)::once, &__block_literal_global_332_0);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMSampleBufferGetTotalSampleSize(this, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetTotalSampleSize);
}

uint64_t PAL::initCoreMediaCMSampleBufferSetDataBuffer(PAL *this, opaqueCMSampleBuffer *a2, OpaqueCMBlockBuffer *a3)
{
  if (PAL::initCoreMediaCMSampleBufferSetDataBuffer(opaqueCMSampleBuffer *,OpaqueCMBlockBuffer *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferSetDataBuffer(opaqueCMSampleBuffer *,OpaqueCMBlockBuffer *)::once, &__block_literal_global_335);
  return PAL::softLinkCoreMediaCMSampleBufferSetDataBuffer(this, a2, (OpaqueCMBlockBuffer *)PAL::softLinkCoreMediaCMSampleBufferSetDataBuffer);
}

uint64_t PAL::initCoreMediaCMGetAttachment(PAL *this, const void *a2, const __CFString *a3, unsigned int *a4)
{
  if (PAL::initCoreMediaCMGetAttachment(void const*,__CFString const*,unsigned int *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMGetAttachment(void const*,__CFString const*,unsigned int *)::once, &__block_literal_global_338_0);
  return PAL::softLinkCoreMediaCMGetAttachment(this, a2, a3, (unsigned int *)PAL::softLinkCoreMediaCMGetAttachment);
}

uint64_t PAL::initCoreMediaCMSetAttachment(PAL *this, const void *a2, const __CFString *a3, const void *a4)
{
  if (PAL::initCoreMediaCMSetAttachment(void const*,__CFString const*,void const*,unsigned int)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSetAttachment(void const*,__CFString const*,void const*,unsigned int)::once, &__block_literal_global_341);
  return PAL::softLinkCoreMediaCMSetAttachment(this, a2, a3, a4, PAL::softLinkCoreMediaCMSetAttachment);
}

uint64_t PAL::initCoreMediaCMRemoveAttachment(PAL *this, const void *a2, const __CFString *a3)
{
  if (PAL::initCoreMediaCMRemoveAttachment(void const*,__CFString const*)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMRemoveAttachment(void const*,__CFString const*)::once, &__block_literal_global_344_0);
  return PAL::softLinkCoreMediaCMRemoveAttachment(this, a2, (const __CFString *)PAL::softLinkCoreMediaCMRemoveAttachment);
}

uint64_t PAL::initCoreMediaCMTimebaseCreateWithMasterClock(PAL *this, const __CFAllocator *a2, OpaqueCMClock *a3, OpaqueCMTimebase **a4)
{
  if (PAL::initCoreMediaCMTimebaseCreateWithMasterClock(__CFAllocator const*,OpaqueCMClock *,OpaqueCMTimebase **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimebaseCreateWithMasterClock(__CFAllocator const*,OpaqueCMClock *,OpaqueCMTimebase **)::once, &__block_literal_global_347);
  return PAL::softLinkCoreMediaCMTimebaseCreateWithMasterClock(this, a2, a3, (OpaqueCMTimebase **)PAL::softLinkCoreMediaCMTimebaseCreateWithMasterClock);
}

uint64_t PAL::initCoreMediaCMTimebaseGetTime(PAL *this, OpaqueCMTimebase *a2)
{
  if (PAL::initCoreMediaCMTimebaseGetTime(OpaqueCMTimebase *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimebaseGetTime(OpaqueCMTimebase *)::once, &__block_literal_global_350);
  return PAL::softLinkCoreMediaCMTimebaseGetTime[0](this, (OpaqueCMTimebase *)PAL::softLinkCoreMediaCMTimebaseGetTime[0]);
}

uint64_t PAL::initCoreMediaCMTimebaseGetRate(PAL *this, OpaqueCMTimebase *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMTimebaseGetRate(OpaqueCMTimebase *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMTimebaseGetRate(OpaqueCMTimebase *)::once, &__block_literal_global_353);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMTimebaseGetRate(this, (OpaqueCMTimebase *)PAL::softLinkCoreMediaCMTimebaseGetRate);
}

uint64_t PAL::initCoreMediaCMTimebaseSetRate(PAL *this, OpaqueCMTimebase *a2, double a3)
{
  if (PAL::initCoreMediaCMTimebaseSetRate(OpaqueCMTimebase *,double)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimebaseSetRate(OpaqueCMTimebase *,double)::once, &__block_literal_global_356);
  return PAL::softLinkCoreMediaCMTimebaseSetRate(this, (OpaqueCMTimebase *)PAL::softLinkCoreMediaCMTimebaseSetRate, a3);
}

uint64_t PAL::initCoreMediaCMTimebaseSetTime(PAL *this, OpaqueCMTimebase *a2, CMTime *a3)
{
  __int128 v6;
  uint64_t v7;

  if (PAL::initCoreMediaCMTimebaseSetTime(OpaqueCMTimebase *,CMTime)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimebaseSetTime(OpaqueCMTimebase *,CMTime)::once, &__block_literal_global_359);
  v6 = *(_OWORD *)a2;
  v7 = *((_QWORD *)a2 + 2);
  return PAL::softLinkCoreMediaCMTimebaseSetTime(this, (OpaqueCMTimebase *)&v6, a3);
}

uint64_t PAL::initCoreMediaCMTimebaseGetEffectiveRate(PAL *this, OpaqueCMTimebase *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMTimebaseGetEffectiveRate(OpaqueCMTimebase *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMTimebaseGetEffectiveRate(OpaqueCMTimebase *)::once, &__block_literal_global_362);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMTimebaseGetEffectiveRate(this, (OpaqueCMTimebase *)PAL::softLinkCoreMediaCMTimebaseGetEffectiveRate);
}

uint64_t PAL::initCoreMediaCMTimebaseAddTimerDispatchSource(PAL *this, OpaqueCMTimebase *a2, dispatch_source_s *a3)
{
  if (PAL::initCoreMediaCMTimebaseAddTimerDispatchSource(OpaqueCMTimebase *,dispatch_source_s *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimebaseAddTimerDispatchSource(OpaqueCMTimebase *,dispatch_source_s *)::once, &__block_literal_global_365);
  return PAL::softLinkCoreMediaCMTimebaseAddTimerDispatchSource[0](this, a2, (dispatch_source_s *)PAL::softLinkCoreMediaCMTimebaseAddTimerDispatchSource[0]);
}

uint64_t PAL::initCoreMediaCMTimebaseRemoveTimerDispatchSource(PAL *this, OpaqueCMTimebase *a2, dispatch_source_s *a3)
{
  if (PAL::initCoreMediaCMTimebaseRemoveTimerDispatchSource(OpaqueCMTimebase *,dispatch_source_s *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimebaseRemoveTimerDispatchSource(OpaqueCMTimebase *,dispatch_source_s *)::once, &__block_literal_global_368);
  return PAL::softLinkCoreMediaCMTimebaseRemoveTimerDispatchSource(this, a2, (dispatch_source_s *)PAL::softLinkCoreMediaCMTimebaseRemoveTimerDispatchSource);
}

uint64_t PAL::initCoreMediaCMTimebaseSetTimerDispatchSourceNextFireTime(PAL *this, OpaqueCMTimebase *a2, dispatch_source_s *a3, CMTime *a4, unsigned int a5)
{
  __int128 v10;
  uint64_t v11;

  if (PAL::initCoreMediaCMTimebaseSetTimerDispatchSourceNextFireTime(OpaqueCMTimebase *,dispatch_source_s *,CMTime,unsigned int)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimebaseSetTimerDispatchSourceNextFireTime(OpaqueCMTimebase *,dispatch_source_s *,CMTime,unsigned int)::once, &__block_literal_global_371);
  v10 = *(_OWORD *)a3;
  v11 = *((_QWORD *)a3 + 2);
  return PAL::softLinkCoreMediaCMTimebaseSetTimerDispatchSourceNextFireTime(this, a2, (dispatch_source_s *)&v10, a4, a5);
}

uint64_t PAL::initCoreMediaCMTimebaseSetTimerDispatchSourceToFireImmediately(PAL *this, OpaqueCMTimebase *a2, dispatch_source_s *a3)
{
  if (PAL::initCoreMediaCMTimebaseSetTimerDispatchSourceToFireImmediately(OpaqueCMTimebase *,dispatch_source_s *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimebaseSetTimerDispatchSourceToFireImmediately(OpaqueCMTimebase *,dispatch_source_s *)::once, &__block_literal_global_374);
  return PAL::softLinkCoreMediaCMTimebaseSetTimerDispatchSourceToFireImmediately(this, a2, (dispatch_source_s *)PAL::softLinkCoreMediaCMTimebaseSetTimerDispatchSourceToFireImmediately);
}

uint64_t PAL::initCoreMediaCMTimeCopyAsDictionary(PAL *this, CMTime *a2, const __CFAllocator *a3)
{
  __int128 v6;
  uint64_t v7;

  if (PAL::initCoreMediaCMTimeCopyAsDictionary(CMTime,__CFAllocator const*)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMTimeCopyAsDictionary(CMTime,__CFAllocator const*)::once, &__block_literal_global_377);
  v6 = *(_OWORD *)this;
  v7 = *((_QWORD *)this + 2);
  return PAL::softLinkCoreMediaCMTimeCopyAsDictionary((PAL *)&v6, a2, a3);
}

uint64_t PAL::initCoreMediaCMVideoFormatDescriptionCreate(PAL *this, const __CFAllocator *a2, unsigned int a3, int a4, int a5, const __CFDictionary *a6, const opaqueCMFormatDescription **a7)
{
  if (PAL::initCoreMediaCMVideoFormatDescriptionCreate(__CFAllocator const*,unsigned int,int,int,__CFDictionary const*,opaqueCMFormatDescription const**)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMVideoFormatDescriptionCreate(__CFAllocator const*,unsigned int,int,int,__CFDictionary const*,opaqueCMFormatDescription const**)::once, &__block_literal_global_380);
  return PAL::softLinkCoreMediaCMVideoFormatDescriptionCreate(this, a2, a3, a4, a5, a6, (const opaqueCMFormatDescription **)PAL::softLinkCoreMediaCMVideoFormatDescriptionCreate);
}

uint64_t PAL::initCoreMediaCMVideoFormatDescriptionCreateForImageBuffer(PAL *this, const __CFAllocator *a2, __CVBuffer *a3, const opaqueCMFormatDescription **a4)
{
  if (PAL::initCoreMediaCMVideoFormatDescriptionCreateForImageBuffer(__CFAllocator const*,__CVBuffer *,opaqueCMFormatDescription const**)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMVideoFormatDescriptionCreateForImageBuffer(__CFAllocator const*,__CVBuffer *,opaqueCMFormatDescription const**)::once, &__block_literal_global_383);
  return PAL::softLinkCoreMediaCMVideoFormatDescriptionCreateForImageBuffer(this, a2, a3, (const opaqueCMFormatDescription **)PAL::softLinkCoreMediaCMVideoFormatDescriptionCreateForImageBuffer);
}

uint64_t PAL::initCoreMediaCMVideoFormatDescriptionGetDimensions(PAL *this, const opaqueCMFormatDescription *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMVideoFormatDescriptionGetDimensions(opaqueCMFormatDescription const*)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMVideoFormatDescriptionGetDimensions(opaqueCMFormatDescription const*)::once, &__block_literal_global_386);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMVideoFormatDescriptionGetDimensions(this, (const opaqueCMFormatDescription *)PAL::softLinkCoreMediaCMVideoFormatDescriptionGetDimensions);
}

uint64_t PAL::initCoreMediaCMVideoFormatDescriptionGetPresentationDimensions(PAL *this, const opaqueCMFormatDescription *a2, unsigned __int8 a3)
{
  if (PAL::initCoreMediaCMVideoFormatDescriptionGetPresentationDimensions(opaqueCMFormatDescription const*,unsigned char,unsigned char)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMVideoFormatDescriptionGetPresentationDimensions(opaqueCMFormatDescription const*,unsigned char,unsigned char)::once, &__block_literal_global_389);
  return PAL::softLinkCoreMediaCMVideoFormatDescriptionGetPresentationDimensions(this, a2, a3, PAL::softLinkCoreMediaCMVideoFormatDescriptionGetPresentationDimensions);
}

uint64_t PAL::initCoreMediaCMBufferQueueReset(PAL *this, opaqueCMBufferQueue *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMBufferQueueReset(opaqueCMBufferQueue *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMBufferQueueReset(opaqueCMBufferQueue *)::once, &__block_literal_global_392);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMBufferQueueReset(this, (opaqueCMBufferQueue *)PAL::softLinkCoreMediaCMBufferQueueReset);
}

uint64_t PAL::initCoreMediaCMBufferQueueCreate(PAL *this, const __CFAllocator *a2, uint64_t a3, const CMBufferCallbacks *a4, opaqueCMBufferQueue **a5)
{
  if (PAL::initCoreMediaCMBufferQueueCreate(__CFAllocator const*,long,CMBufferCallbacks const*,opaqueCMBufferQueue **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBufferQueueCreate(__CFAllocator const*,long,CMBufferCallbacks const*,opaqueCMBufferQueue **)::once, &__block_literal_global_395);
  return PAL::softLinkCoreMediaCMBufferQueueCreate(this, a2, a3, a4, (opaqueCMBufferQueue **)PAL::softLinkCoreMediaCMBufferQueueCreate);
}

uint64_t PAL::initCoreMediaCMBufferQueueGetHead(PAL *this, opaqueCMBufferQueue *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMBufferQueueGetHead(opaqueCMBufferQueue *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMBufferQueueGetHead(opaqueCMBufferQueue *)::once, &__block_literal_global_398);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMBufferQueueGetHead[0](this, (opaqueCMBufferQueue *)PAL::softLinkCoreMediaCMBufferQueueGetHead[0]);
}

uint64_t PAL::initCoreMediaCMBufferQueueDequeueAndRetain(PAL *this, opaqueCMBufferQueue *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMBufferQueueDequeueAndRetain(opaqueCMBufferQueue *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMBufferQueueDequeueAndRetain(opaqueCMBufferQueue *)::once, &__block_literal_global_401);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMBufferQueueDequeueAndRetain(this, (opaqueCMBufferQueue *)PAL::softLinkCoreMediaCMBufferQueueDequeueAndRetain);
}

uint64_t PAL::initCoreMediaCMBufferQueueEnqueue(PAL *this, opaqueCMBufferQueue *a2, const void *a3)
{
  if (PAL::initCoreMediaCMBufferQueueEnqueue(opaqueCMBufferQueue *,void const*)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBufferQueueEnqueue(opaqueCMBufferQueue *,void const*)::once, &__block_literal_global_404);
  return PAL::softLinkCoreMediaCMBufferQueueEnqueue(this, a2, PAL::softLinkCoreMediaCMBufferQueueEnqueue);
}

uint64_t PAL::initCoreMediaCMBufferQueueIsEmpty(PAL *this, opaqueCMBufferQueue *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMBufferQueueIsEmpty(opaqueCMBufferQueue *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMBufferQueueIsEmpty(opaqueCMBufferQueue *)::once, &__block_literal_global_407);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMBufferQueueIsEmpty[0](this, (opaqueCMBufferQueue *)PAL::softLinkCoreMediaCMBufferQueueIsEmpty[0]);
}

uint64_t PAL::initCoreMediaCMBufferQueueGetBufferCount(PAL *this, opaqueCMBufferQueue *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMBufferQueueGetBufferCount(opaqueCMBufferQueue *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMBufferQueueGetBufferCount(opaqueCMBufferQueue *)::once, &__block_literal_global_410);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMBufferQueueGetBufferCount(this, (opaqueCMBufferQueue *)PAL::softLinkCoreMediaCMBufferQueueGetBufferCount);
}

uint64_t PAL::initCoreMediaCMBufferQueueGetCallbacksForUnsortedSampleBuffers(PAL *this)
{
  if (PAL::initCoreMediaCMBufferQueueGetCallbacksForUnsortedSampleBuffers(void)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBufferQueueGetCallbacksForUnsortedSampleBuffers(void)::once, &__block_literal_global_413);
  return PAL::softLinkCoreMediaCMBufferQueueGetCallbacksForUnsortedSampleBuffers((PAL *)PAL::softLinkCoreMediaCMBufferQueueGetCallbacksForUnsortedSampleBuffers);
}

uint64_t PAL::initCoreMediaCMBufferQueueGetFirstPresentationTimeStamp(PAL *this, opaqueCMBufferQueue *a2)
{
  if (PAL::initCoreMediaCMBufferQueueGetFirstPresentationTimeStamp(opaqueCMBufferQueue *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBufferQueueGetFirstPresentationTimeStamp(opaqueCMBufferQueue *)::once, &__block_literal_global_416);
  return PAL::softLinkCoreMediaCMBufferQueueGetFirstPresentationTimeStamp[0](this, (opaqueCMBufferQueue *)PAL::softLinkCoreMediaCMBufferQueueGetFirstPresentationTimeStamp[0]);
}

uint64_t PAL::initCoreMediaCMBufferQueueGetEndPresentationTimeStamp(PAL *this, opaqueCMBufferQueue *a2)
{
  if (PAL::initCoreMediaCMBufferQueueGetEndPresentationTimeStamp(opaqueCMBufferQueue *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBufferQueueGetEndPresentationTimeStamp(opaqueCMBufferQueue *)::once, &__block_literal_global_419);
  return PAL::softLinkCoreMediaCMBufferQueueGetEndPresentationTimeStamp(this, (opaqueCMBufferQueue *)PAL::softLinkCoreMediaCMBufferQueueGetEndPresentationTimeStamp);
}

uint64_t PAL::initCoreMediaCMBufferQueueInstallTrigger(PAL *this, opaqueCMBufferQueue *a2, void (*a3)(void *, opaqueCMBufferQueueTriggerToken *), void *a4, __int128 *a5, CMTime *a6, opaqueCMBufferQueueTriggerToken **a7)
{
  __int128 v14;
  uint64_t v15;

  if (PAL::initCoreMediaCMBufferQueueInstallTrigger(opaqueCMBufferQueue *,void (*)(void *,opaqueCMBufferQueueTriggerToken *),void *,int,CMTime,opaqueCMBufferQueueTriggerToken **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBufferQueueInstallTrigger(opaqueCMBufferQueue *,void (*)(void *,opaqueCMBufferQueueTriggerToken *),void *,int,CMTime,opaqueCMBufferQueueTriggerToken **)::once, &__block_literal_global_422);
  v14 = *a5;
  v15 = *((_QWORD *)a5 + 2);
  return PAL::softLinkCoreMediaCMBufferQueueInstallTrigger(this, a2, a3, a4, (int)&v14, a6, a7);
}

uint64_t PAL::initCoreMediaCMBufferQueueRemoveTrigger(PAL *this, opaqueCMBufferQueue *a2, opaqueCMBufferQueueTriggerToken *a3)
{
  if (PAL::initCoreMediaCMBufferQueueRemoveTrigger(opaqueCMBufferQueue *,opaqueCMBufferQueueTriggerToken *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBufferQueueRemoveTrigger(opaqueCMBufferQueue *,opaqueCMBufferQueueTriggerToken *)::once, &__block_literal_global_425);
  return PAL::softLinkCoreMediaCMBufferQueueRemoveTrigger(this, a2, (opaqueCMBufferQueueTriggerToken *)PAL::softLinkCoreMediaCMBufferQueueRemoveTrigger);
}

uint64_t PAL::initCoreMediaCMBufferQueueInstallTriggerWithIntegerThreshold(PAL *this, opaqueCMBufferQueue *a2, void (*a3)(void *, opaqueCMBufferQueueTriggerToken *), void *a4, int a5, uint64_t a6, opaqueCMBufferQueueTriggerToken **a7)
{
  if (PAL::initCoreMediaCMBufferQueueInstallTriggerWithIntegerThreshold(opaqueCMBufferQueue *,void (*)(void *,opaqueCMBufferQueueTriggerToken *),void *,int,long,opaqueCMBufferQueueTriggerToken **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBufferQueueInstallTriggerWithIntegerThreshold(opaqueCMBufferQueue *,void (*)(void *,opaqueCMBufferQueueTriggerToken *),void *,int,long,opaqueCMBufferQueueTriggerToken **)::once, &__block_literal_global_428);
  return PAL::softLinkCoreMediaCMBufferQueueInstallTriggerWithIntegerThreshold(this, a2, a3, a4, a5, a6, (opaqueCMBufferQueueTriggerToken **)PAL::softLinkCoreMediaCMBufferQueueInstallTriggerWithIntegerThreshold);
}

uint64_t PAL::initCoreMediaCMBufferQueueMarkEndOfData(PAL *this, opaqueCMBufferQueue *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMBufferQueueMarkEndOfData(opaqueCMBufferQueue *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMBufferQueueMarkEndOfData(opaqueCMBufferQueue *)::once, &__block_literal_global_431);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMBufferQueueMarkEndOfData[0](this, (opaqueCMBufferQueue *)PAL::softLinkCoreMediaCMBufferQueueMarkEndOfData[0]);
}

uint64_t PAL::initCoreMediaCMBufferQueueGetDuration(PAL *this, opaqueCMBufferQueue *a2)
{
  if (PAL::initCoreMediaCMBufferQueueGetDuration(opaqueCMBufferQueue *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBufferQueueGetDuration(opaqueCMBufferQueue *)::once, &__block_literal_global_434);
  return PAL::softLinkCoreMediaCMBufferQueueGetDuration(this, (opaqueCMBufferQueue *)PAL::softLinkCoreMediaCMBufferQueueGetDuration);
}

uint64_t PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(PAL *this)
{
  if (PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::once, &__block_literal_global_138_0);
  return PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::constantCoreMediakCMSampleAttachmentKey_DoNotDisplay;
}

uint64_t ___ZN3PAL49get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplayEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleAttachmentKey_DoNotDisplay");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMSampleAttachmentKey_DoNotDisplay(void)::constantCoreMediakCMSampleAttachmentKey_DoNotDisplay = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleAttachmentKey_DoNotDisplay");
    if (result)
      goto LABEL_3;
  }
  result = 179;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(PAL *this)
{
  if (PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once, &__block_literal_global_141);
  return PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::constantCoreMediakCMSampleAttachmentKey_NotSync;
}

uint64_t ___ZN3PAL44get_CoreMedia_kCMSampleAttachmentKey_NotSyncEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleAttachmentKey_NotSync");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::constantCoreMediakCMSampleAttachmentKey_NotSync = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleAttachmentKey_NotSync");
    if (result)
      goto LABEL_3;
  }
  result = 180;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately(PAL *this)
{
  if (qword_1ECE7E1D0 != -1)
    dispatch_once(&qword_1ECE7E1D0, &__block_literal_global_144_0);
  return _MergedGlobals_59;
}

uint64_t ___ZN3PAL71get_CoreMedia_kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediatelyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately");
    if (result)
    {
LABEL_3:
      _MergedGlobals_59 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately");
    if (result)
      goto LABEL_3;
  }
  result = 181;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_DrainAfterDecoding(PAL *this)
{
  if (qword_1ECE7E1E0 != -1)
    dispatch_once(&qword_1ECE7E1E0, &__block_literal_global_147);
  return qword_1ECE7E1D8;
}

uint64_t ___ZN3PAL61get_CoreMedia_kCMSampleBufferAttachmentKey_DrainAfterDecodingEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_DrainAfterDecoding");
    if (result)
    {
LABEL_3:
      qword_1ECE7E1D8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_DrainAfterDecoding");
    if (result)
      goto LABEL_3;
  }
  result = 182;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_EmptyMedia(PAL *this)
{
  if (qword_1ECE7E1F0 != -1)
    dispatch_once(&qword_1ECE7E1F0, &__block_literal_global_150_0);
  return qword_1ECE7E1E8;
}

uint64_t ___ZN3PAL53get_CoreMedia_kCMSampleBufferAttachmentKey_EmptyMediaEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_EmptyMedia");
    if (result)
    {
LABEL_3:
      qword_1ECE7E1E8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_EmptyMedia");
    if (result)
      goto LABEL_3;
  }
  result = 183;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed(PAL *this)
{
  if (qword_1ECE7E200 != -1)
    dispatch_once(&qword_1ECE7E200, &__block_literal_global_153);
  return qword_1ECE7E1F8;
}

uint64_t ___ZN3PAL71get_CoreMedia_kCMSampleBufferAttachmentKey_PostNotificationWhenConsumedEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed");
    if (result)
    {
LABEL_3:
      qword_1ECE7E1F8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed");
    if (result)
      goto LABEL_3;
  }
  result = 184;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding(PAL *this)
{
  if (qword_1ECE7E210 != -1)
    dispatch_once(&qword_1ECE7E210, &__block_literal_global_156);
  return qword_1ECE7E208;
}

uint64_t ___ZN3PAL69get_CoreMedia_kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecodingEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding");
    if (result)
    {
LABEL_3:
      qword_1ECE7E208 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding");
    if (result)
      goto LABEL_3;
  }
  result = 185;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(PAL *this)
{
  if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::once, &__block_literal_global_159);
  return PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::constantCoreMediakCMSampleBufferAttachmentKey_SampleReferenceByteOffset;
}

uint64_t ___ZN3PAL68get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffsetEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_SampleReferenceByteOffset");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceByteOffset(void)::constantCoreMediakCMSampleBufferAttachmentKey_SampleReferenceByteOffset = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_SampleReferenceByteOffset");
    if (result)
      goto LABEL_3;
  }
  result = 186;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceURL(PAL *this)
{
  if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceURL(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceURL(void)::once, &__block_literal_global_162);
  return PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceURL(void)::constantCoreMediakCMSampleBufferAttachmentKey_SampleReferenceURL;
}

uint64_t ___ZN3PAL61get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceURLEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_SampleReferenceURL");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_SampleReferenceURL(void)::constantCoreMediakCMSampleBufferAttachmentKey_SampleReferenceURL = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_SampleReferenceURL");
    if (result)
      goto LABEL_3;
  }
  result = 187;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleAttachmentKey_DisplayImmediately(PAL *this)
{
  if (PAL::get_CoreMedia_kCMSampleAttachmentKey_DisplayImmediately(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_DisplayImmediately(void)::once, &__block_literal_global_165);
  return PAL::get_CoreMedia_kCMSampleAttachmentKey_DisplayImmediately(void)::constantCoreMediakCMSampleAttachmentKey_DisplayImmediately;
}

uint64_t ___ZN3PAL55get_CoreMedia_kCMSampleAttachmentKey_DisplayImmediatelyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleAttachmentKey_DisplayImmediately");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMSampleAttachmentKey_DisplayImmediately(void)::constantCoreMediakCMSampleAttachmentKey_DisplayImmediately = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleAttachmentKey_DisplayImmediately");
    if (result)
      goto LABEL_3;
  }
  result = 188;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleAttachmentKey_IsDependedOnByOthers(PAL *this)
{
  if (PAL::get_CoreMedia_kCMSampleAttachmentKey_IsDependedOnByOthers(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_IsDependedOnByOthers(void)::once, &__block_literal_global_168);
  return PAL::get_CoreMedia_kCMSampleAttachmentKey_IsDependedOnByOthers(void)::constantCoreMediakCMSampleAttachmentKey_IsDependedOnByOthers;
}

uint64_t ___ZN3PAL57get_CoreMedia_kCMSampleAttachmentKey_IsDependedOnByOthersEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleAttachmentKey_IsDependedOnByOthers");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMSampleAttachmentKey_IsDependedOnByOthers(void)::constantCoreMediakCMSampleAttachmentKey_IsDependedOnByOthers = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleAttachmentKey_IsDependedOnByOthers");
    if (result)
      goto LABEL_3;
  }
  result = 189;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration(PAL *this)
{
  if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration(void)::once, &__block_literal_global_171_0);
  return PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration(void)::constantCoreMediakCMSampleBufferAttachmentKey_EndsPreviousSampleDuration;
}

uint64_t ___ZN3PAL69get_CoreMedia_kCMSampleBufferAttachmentKey_EndsPreviousSampleDurationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration(void)::constantCoreMediakCMSampleBufferAttachmentKey_EndsPreviousSampleDuration = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration");
    if (result)
      goto LABEL_3;
  }
  result = 190;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_GradualDecoderRefresh(PAL *this)
{
  if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_GradualDecoderRefresh(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_GradualDecoderRefresh(void)::once, &__block_literal_global_174);
  return PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_GradualDecoderRefresh(void)::constantCoreMediakCMSampleBufferAttachmentKey_GradualDecoderRefresh;
}

uint64_t ___ZN3PAL64get_CoreMedia_kCMSampleBufferAttachmentKey_GradualDecoderRefreshEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_GradualDecoderRefresh");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_GradualDecoderRefresh(void)::constantCoreMediakCMSampleBufferAttachmentKey_GradualDecoderRefresh = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_GradualDecoderRefresh");
    if (result)
      goto LABEL_3;
  }
  result = 191;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(PAL *this)
{
  if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::once, &__block_literal_global_177_0);
  return PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::constantCoreMediakCMSampleBufferAttachmentKey_TrimDurationAtStart;
}

uint64_t ___ZN3PAL62get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStartEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_TrimDurationAtStart");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::constantCoreMediakCMSampleBufferAttachmentKey_TrimDurationAtStart = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_TrimDurationAtStart");
    if (result)
      goto LABEL_3;
  }
  result = 192;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence(PAL *this)
{
  if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence(void)::once, &__block_literal_global_180);
  return PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence(void)::constantCoreMediakCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence;
}

uint64_t ___ZN3PAL73get_CoreMedia_kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilenceEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence(void)::constantCoreMediakCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence");
    if (result)
      goto LABEL_3;
  }
  result = 193;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTimebaseNotification_EffectiveRateChanged(PAL *this)
{
  if (PAL::get_CoreMedia_kCMTimebaseNotification_EffectiveRateChanged(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimebaseNotification_EffectiveRateChanged(void)::once, &__block_literal_global_183_0);
  return PAL::get_CoreMedia_kCMTimebaseNotification_EffectiveRateChanged(void)::constantCoreMediakCMTimebaseNotification_EffectiveRateChanged;
}

uint64_t ___ZN3PAL58get_CoreMedia_kCMTimebaseNotification_EffectiveRateChangedEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimebaseNotification_EffectiveRateChanged");
    if (result)
    {
LABEL_3:
      PAL::get_CoreMedia_kCMTimebaseNotification_EffectiveRateChanged(void)::constantCoreMediakCMTimebaseNotification_EffectiveRateChanged = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimebaseNotification_EffectiveRateChanged");
    if (result)
      goto LABEL_3;
  }
  result = 195;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_CoreMedia_kCMTimebaseNotification_TimeJumped(PAL *this)
{
  if (qword_1ECE7E220 != -1)
    dispatch_once(&qword_1ECE7E220, &__block_literal_global_186);
  return qword_1ECE7E218;
}

uint64_t ___ZN3PAL48get_CoreMedia_kCMTimebaseNotification_TimeJumpedEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once == -1)
  {
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimebaseNotification_TimeJumped");
    if (result)
    {
LABEL_3:
      qword_1ECE7E218 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMTimebaseNotification_TimeJumped");
    if (result)
      goto LABEL_3;
  }
  result = 196;
  __break(0xC471u);
  return result;
}

uint64_t PAL::initCoreMediaCMAudioFormatDescriptionCreate(PAL *this, const __CFAllocator *a2, const AudioStreamBasicDescription *a3, unint64_t a4, const AudioChannelLayout *a5, unint64_t a6, const void *a7, const __CFDictionary *a8, const opaqueCMFormatDescription **a9)
{
  if (PAL::initCoreMediaCMAudioFormatDescriptionCreate(__CFAllocator const*,AudioStreamBasicDescription const*,unsigned long,AudioChannelLayout const*,unsigned long,void const*,__CFDictionary const*,opaqueCMFormatDescription const**)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMAudioFormatDescriptionCreate(__CFAllocator const*,AudioStreamBasicDescription const*,unsigned long,AudioChannelLayout const*,unsigned long,void const*,__CFDictionary const*,opaqueCMFormatDescription const**)::once, &__block_literal_global_437);
  return PAL::softLinkCoreMediaCMAudioFormatDescriptionCreate(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t PAL::initCoreMediaCMAudioFormatDescriptionGetMagicCookie(PAL *this, const opaqueCMFormatDescription *a2, unint64_t *a3)
{
  if (PAL::initCoreMediaCMAudioFormatDescriptionGetMagicCookie(opaqueCMFormatDescription const*,unsigned long *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMAudioFormatDescriptionGetMagicCookie(opaqueCMFormatDescription const*,unsigned long *)::once, &__block_literal_global_440);
  return PAL::softLinkCoreMediaCMAudioFormatDescriptionGetMagicCookie(this, a2, (unint64_t *)PAL::softLinkCoreMediaCMAudioFormatDescriptionGetMagicCookie);
}

uint64_t PAL::initCoreMediaCMAudioFormatDescriptionGetStreamBasicDescription(PAL *this, const opaqueCMFormatDescription *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMAudioFormatDescriptionGetStreamBasicDescription(opaqueCMFormatDescription const*)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMAudioFormatDescriptionGetStreamBasicDescription(opaqueCMFormatDescription const*)::once, &__block_literal_global_443);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMAudioFormatDescriptionGetStreamBasicDescription[0](this, (const opaqueCMFormatDescription *)PAL::softLinkCoreMediaCMAudioFormatDescriptionGetStreamBasicDescription[0]);
}

uint64_t PAL::initCoreMediaCMAudioFormatDescriptionGetRichestDecodableFormat(PAL *this, const opaqueCMFormatDescription *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMAudioFormatDescriptionGetRichestDecodableFormat(opaqueCMFormatDescription const*)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMAudioFormatDescriptionGetRichestDecodableFormat(opaqueCMFormatDescription const*)::once, &__block_literal_global_446);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMAudioFormatDescriptionGetRichestDecodableFormat(this, (const opaqueCMFormatDescription *)PAL::softLinkCoreMediaCMAudioFormatDescriptionGetRichestDecodableFormat);
}

uint64_t PAL::initCoreMediaCMBlockBufferCreateWithMemoryBlock(PAL *this, const __CFAllocator *a2, void *a3, unint64_t a4, const __CFAllocator *a5, const CMBlockBufferCustomBlockSource *a6, unint64_t a7, unint64_t a8, unsigned int a9, OpaqueCMBlockBuffer **a10)
{
  if (PAL::initCoreMediaCMBlockBufferCreateWithMemoryBlock(__CFAllocator const*,void *,unsigned long,__CFAllocator const*,CMBlockBufferCustomBlockSource const*,unsigned long,unsigned long,unsigned int,OpaqueCMBlockBuffer **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMBlockBufferCreateWithMemoryBlock(__CFAllocator const*,void *,unsigned long,__CFAllocator const*,CMBlockBufferCustomBlockSource const*,unsigned long,unsigned long,unsigned int,OpaqueCMBlockBuffer **)::once, &__block_literal_global_449);
  return PAL::softLinkCoreMediaCMBlockBufferCreateWithMemoryBlock(this, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(PAL *this, opaqueCMSampleBuffer *a2, unint64_t *a3, AudioBufferList *a4, unint64_t a5, const __CFAllocator *a6, const __CFAllocator *a7, unsigned int a8, OpaqueCMBlockBuffer **a9)
{
  if (PAL::initCoreMediaCMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(opaqueCMSampleBuffer *,unsigned long *,AudioBufferList *,unsigned long,__CFAllocator const*,__CFAllocator const*,unsigned int,OpaqueCMBlockBuffer **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(opaqueCMSampleBuffer *,unsigned long *,AudioBufferList *,unsigned long,__CFAllocator const*,__CFAllocator const*,unsigned int,OpaqueCMBlockBuffer **)::once, &__block_literal_global_452);
  return PAL::softLinkCoreMediaCMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetNumSamples(PAL *this, opaqueCMSampleBuffer *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMSampleBufferGetNumSamples(opaqueCMSampleBuffer *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetNumSamples(opaqueCMSampleBuffer *)::once, &__block_literal_global_455);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMSampleBufferGetNumSamples(this, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferGetNumSamples);
}

uint64_t PAL::initCoreMediaCMSampleBufferCopySampleBufferForRange(PAL *this, const __CFAllocator *a2, opaqueCMSampleBuffer *a3, CFRange a4, opaqueCMSampleBuffer **a5)
{
  CFIndex length;
  CFIndex location;
  CFRange v11;

  length = a4.length;
  location = a4.location;
  if (PAL::initCoreMediaCMSampleBufferCopySampleBufferForRange(__CFAllocator const*,opaqueCMSampleBuffer *,CFRange,opaqueCMSampleBuffer **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferCopySampleBufferForRange(__CFAllocator const*,opaqueCMSampleBuffer *,CFRange,opaqueCMSampleBuffer **)::once, &__block_literal_global_458);
  v11.location = location;
  v11.length = length;
  return PAL::softLinkCoreMediaCMSampleBufferCopySampleBufferForRange(this, a2, a3, v11, (opaqueCMSampleBuffer **)PAL::softLinkCoreMediaCMSampleBufferCopySampleBufferForRange);
}

uint64_t PAL::initCoreMediaCMSampleBufferGetSampleSizeArray(PAL *this, opaqueCMSampleBuffer *a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  if (PAL::initCoreMediaCMSampleBufferGetSampleSizeArray(opaqueCMSampleBuffer *,long,unsigned long *,long *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferGetSampleSizeArray(opaqueCMSampleBuffer *,long,unsigned long *,long *)::once, &__block_literal_global_461);
  return PAL::softLinkCoreMediaCMSampleBufferGetSampleSizeArray(this, a2, a3, a4, (uint64_t *)PAL::softLinkCoreMediaCMSampleBufferGetSampleSizeArray);
}

uint64_t PAL::initCoreMediaCMAudioSampleBufferCreateWithPacketDescriptions(PAL *this, const __CFAllocator *a2, OpaqueCMBlockBuffer *a3, unsigned __int8 a4, int (*a5)(opaqueCMSampleBuffer *, void *), void *a6, const opaqueCMFormatDescription *a7, uint64_t a8, CMTime *a9, const AudioStreamPacketDescription *a10, opaqueCMSampleBuffer **a11)
{
  opaqueCMSampleBuffer **v20[2];
  uint64_t v21;

  if (PAL::initCoreMediaCMAudioSampleBufferCreateWithPacketDescriptions(__CFAllocator const*,OpaqueCMBlockBuffer *,unsigned char,int (*)(opaqueCMSampleBuffer *,void *),void *,opaqueCMFormatDescription const*,long,CMTime,AudioStreamPacketDescription const*,opaqueCMSampleBuffer **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMAudioSampleBufferCreateWithPacketDescriptions(__CFAllocator const*,OpaqueCMBlockBuffer *,unsigned char,int (*)(opaqueCMSampleBuffer *,void *),void *,opaqueCMFormatDescription const*,long,CMTime,AudioStreamPacketDescription const*,opaqueCMSampleBuffer **)::once, &__block_literal_global_464);
  *(_OWORD *)v20 = *(_OWORD *)a8;
  v21 = *(_QWORD *)(a8 + 16);
  return ((uint64_t (*)(PAL *__hidden, const __CFAllocator *, OpaqueCMBlockBuffer *, unsigned __int8, int (*)(opaqueCMSampleBuffer *, void *), void *, const opaqueCMFormatDescription *, uint64_t, CMTime *, const AudioStreamPacketDescription *))PAL::softLinkCoreMediaCMAudioSampleBufferCreateWithPacketDescriptions)(this, a2, a3, a4, a5, a6, a7, (uint64_t)v20, a9, a10);
}

uint64_t PAL::initCoreMediaCMAudioSampleBufferCreateReadyWithPacketDescriptions(PAL *this, const __CFAllocator *a2, OpaqueCMBlockBuffer *a3, const opaqueCMFormatDescription *a4, __int128 *a5, CMTime *a6, const AudioStreamPacketDescription *a7, opaqueCMSampleBuffer **a8)
{
  __int128 v16;
  uint64_t v17;

  if (PAL::initCoreMediaCMAudioSampleBufferCreateReadyWithPacketDescriptions(__CFAllocator const*,OpaqueCMBlockBuffer *,opaqueCMFormatDescription const*,long,CMTime,AudioStreamPacketDescription const*,opaqueCMSampleBuffer **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMAudioSampleBufferCreateReadyWithPacketDescriptions(__CFAllocator const*,OpaqueCMBlockBuffer *,opaqueCMFormatDescription const*,long,CMTime,AudioStreamPacketDescription const*,opaqueCMSampleBuffer **)::once, &__block_literal_global_467);
  v16 = *a5;
  v17 = *((_QWORD *)a5 + 2);
  return PAL::softLinkCoreMediaCMAudioSampleBufferCreateReadyWithPacketDescriptions(this, a2, a3, a4, (uint64_t)&v16, a6, a7, a8);
}

uint64_t PAL::initCoreMediaCMSampleBufferSetDataBufferFromAudioBufferList(PAL *this, opaqueCMSampleBuffer *a2, const __CFAllocator *a3, const __CFAllocator *a4, unsigned int a5, const AudioBufferList *a6)
{
  if (PAL::initCoreMediaCMSampleBufferSetDataBufferFromAudioBufferList(opaqueCMSampleBuffer *,__CFAllocator const*,__CFAllocator const*,unsigned int,AudioBufferList const*)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferSetDataBufferFromAudioBufferList(opaqueCMSampleBuffer *,__CFAllocator const*,__CFAllocator const*,unsigned int,AudioBufferList const*)::once, &__block_literal_global_470);
  return PAL::softLinkCoreMediaCMSampleBufferSetDataBufferFromAudioBufferList(this, a2, a3, a4, a5, (const AudioBufferList *)PAL::softLinkCoreMediaCMSampleBufferSetDataBufferFromAudioBufferList);
}

uint64_t PAL::initCoreMediaCMSampleBufferSetDataReady(PAL *this, opaqueCMSampleBuffer *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initCoreMediaCMSampleBufferSetDataReady(opaqueCMSampleBuffer *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaCMSampleBufferSetDataReady(opaqueCMSampleBuffer *)::once, &__block_literal_global_473);
    this = v2;
  }
  return PAL::softLinkCoreMediaCMSampleBufferSetDataReady(this, (opaqueCMSampleBuffer *)PAL::softLinkCoreMediaCMSampleBufferSetDataReady);
}

uint64_t PAL::initCoreMediaCMSampleBufferSetOutputPresentationTimeStamp(PAL *this, opaqueCMSampleBuffer *a2, CMTime *a3)
{
  __int128 v6;
  uint64_t v7;

  if (PAL::initCoreMediaCMSampleBufferSetOutputPresentationTimeStamp(opaqueCMSampleBuffer *,CMTime)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferSetOutputPresentationTimeStamp(opaqueCMSampleBuffer *,CMTime)::once, &__block_literal_global_476);
  v6 = *(_OWORD *)a2;
  v7 = *((_QWORD *)a2 + 2);
  return PAL::softLinkCoreMediaCMSampleBufferSetOutputPresentationTimeStamp(this, (opaqueCMSampleBuffer *)&v6, a3);
}

uint64_t PAL::initCoreMediaCMClockGetHostTimeClock(PAL *this)
{
  if (PAL::initCoreMediaCMClockGetHostTimeClock(void)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMClockGetHostTimeClock(void)::once, &__block_literal_global_479);
  return PAL::softLinkCoreMediaCMClockGetHostTimeClock((PAL *)PAL::softLinkCoreMediaCMClockGetHostTimeClock);
}

uint64_t PAL::initCoreMediaCMClockGetTime(PAL *this, OpaqueCMClock *a2)
{
  if (PAL::initCoreMediaCMClockGetTime(OpaqueCMClock *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMClockGetTime(OpaqueCMClock *)::once, &__block_literal_global_482);
  return PAL::softLinkCoreMediaCMClockGetTime(this, (OpaqueCMClock *)PAL::softLinkCoreMediaCMClockGetTime);
}

uint64_t PAL::initCoreMediaCMClockConvertHostTimeToSystemUnits(PAL *this, CMTime *a2)
{
  __int128 v4;
  uint64_t v5;

  if (PAL::initCoreMediaCMClockConvertHostTimeToSystemUnits(CMTime)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMClockConvertHostTimeToSystemUnits(CMTime)::once, &__block_literal_global_485);
  v4 = *(_OWORD *)this;
  v5 = *((_QWORD *)this + 2);
  return PAL::softLinkCoreMediaCMClockConvertHostTimeToSystemUnits((PAL *)&v4, a2);
}

uint64_t PAL::initCoreMediaCMClockMakeHostTimeFromSystemUnits(PAL *this)
{
  if (PAL::initCoreMediaCMClockMakeHostTimeFromSystemUnits(unsigned long long)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMClockMakeHostTimeFromSystemUnits(unsigned long long)::once, &__block_literal_global_488);
  return PAL::softLinkCoreMediaCMClockMakeHostTimeFromSystemUnits(this, (unint64_t)PAL::softLinkCoreMediaCMClockMakeHostTimeFromSystemUnits);
}

uint64_t PAL::initCoreMediaCMSampleBufferCallForEachSample(PAL *this, opaqueCMSampleBuffer *a2, int (*a3)(opaqueCMSampleBuffer *, uint64_t, void *), void *a4)
{
  if (PAL::initCoreMediaCMSampleBufferCallForEachSample(opaqueCMSampleBuffer *,int (*)(opaqueCMSampleBuffer *,long,void *),void *)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferCallForEachSample(opaqueCMSampleBuffer *,int (*)(opaqueCMSampleBuffer *,long,void *),void *)::once, &__block_literal_global_491);
  return PAL::softLinkCoreMediaCMSampleBufferCallForEachSample(this, a2, a3, PAL::softLinkCoreMediaCMSampleBufferCallForEachSample);
}

uint64_t PAL::initCoreMediaCMSampleBufferCallBlockForEachSample(uint64_t a1, uint64_t a2)
{
  if (PAL::initCoreMediaCMSampleBufferCallBlockForEachSample(opaqueCMSampleBuffer *,int({block_pointer})(opaqueCMSampleBuffer *,long))::once != -1)
    dispatch_once(&PAL::initCoreMediaCMSampleBufferCallBlockForEachSample(opaqueCMSampleBuffer *,int({block_pointer})(opaqueCMSampleBuffer *,long))::once, &__block_literal_global_494);
  return PAL::softLinkCoreMediaCMSampleBufferCallBlockForEachSample(a1, a2);
}

uint64_t PAL::initCoreMediaCMAudioClockCreate(PAL *this, const __CFAllocator *a2, OpaqueCMClock **a3)
{
  if (PAL::initCoreMediaCMAudioClockCreate(__CFAllocator const*,OpaqueCMClock **)::once != -1)
    dispatch_once(&PAL::initCoreMediaCMAudioClockCreate(__CFAllocator const*,OpaqueCMClock **)::once, &__block_literal_global_497);
  return PAL::softLinkCoreMediaCMAudioClockCreate(this, a2, (OpaqueCMClock **)PAL::softLinkCoreMediaCMAudioClockCreate);
}

uint64_t PAL::initCoreMediaFigThreadRegisterAbortAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (PAL::initCoreMediaFigThreadRegisterAbortAction(void (*)(void *),void *,OpaqueFigThreadAbortActionToken **)::once != -1)
    dispatch_once(&PAL::initCoreMediaFigThreadRegisterAbortAction(void (*)(void *),void *,OpaqueFigThreadAbortActionToken **)::once, &__block_literal_global_500);
  return PAL::softLinkCoreMediaFigThreadRegisterAbortAction(a1, a2, a3);
}

uint64_t PAL::initCoreMediaFigThreadUnregisterAbortAction(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (PAL::initCoreMediaFigThreadUnregisterAbortAction(OpaqueFigThreadAbortActionToken *)::once != -1)
  {
    dispatch_once(&PAL::initCoreMediaFigThreadUnregisterAbortAction(OpaqueFigThreadAbortActionToken *)::once, &__block_literal_global_503);
    a1 = v1;
  }
  return PAL::softLinkCoreMediaFigThreadUnregisterAbortAction(a1);
}

BOOL PAL::init_CoreMedia_kCMFormatDescriptionExtension_ProtectedContentOriginalFormat(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v4 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    v1 = (uint64_t *)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_ProtectedContentOriginalFormat");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionExtension_ProtectedContentOriginalFormat");
  if (v1)
LABEL_3:
    PAL::constantCoreMediakCMFormatDescriptionExtension_ProtectedContentOriginalFormat = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_CoreMedia_kCMFormatDescriptionExtension_ProtectedContentOriginalFormat(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_CoreMedia_kCMFormatDescriptionExtension_ProtectedContentOriginalFormat(void)::loaded != 0;
  result = PAL::init_CoreMedia_kCMFormatDescriptionExtension_ProtectedContentOriginalFormat(this);
  PAL::canLoad_CoreMedia_kCMFormatDescriptionExtension_ProtectedContentOriginalFormat(void)::loaded = result;
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionExtension_ProtectedContentOriginalFormat(PAL *this)
{
  return PAL::constantCoreMediakCMFormatDescriptionExtension_ProtectedContentOriginalFormat;
}

BOOL PAL::init_CoreMedia_kCMFormatDescriptionTransferFunction_sRGB(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v4 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
  {
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    v1 = (uint64_t *)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_sRGB");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_sRGB");
  if (v1)
LABEL_3:
    PAL::constantCoreMediakCMFormatDescriptionTransferFunction_sRGB = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_CoreMedia_kCMFormatDescriptionTransferFunction_sRGB(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_CoreMedia_kCMFormatDescriptionTransferFunction_sRGB(void)::loaded != 0;
  result = PAL::init_CoreMedia_kCMFormatDescriptionTransferFunction_sRGB(this);
  PAL::canLoad_CoreMedia_kCMFormatDescriptionTransferFunction_sRGB(void)::loaded = result;
  return result;
}

uint64_t PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_sRGB(PAL *this)
{
  return PAL::constantCoreMediakCMFormatDescriptionTransferFunction_sRGB;
}

uint64_t ___ZN3PALL39initCoreMediaCMBlockBufferCopyDataBytesEP19OpaqueCMBlockBuffermmPv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBlockBufferCopyDataBytes");
  PAL::softLinkCoreMediaCMBlockBufferCopyDataBytes = (uint64_t (*)(PAL *__hidden, OpaqueCMBlockBuffer *, unint64_t, unint64_t, void *))result;
  if (!result)
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL39initCoreMediaCMBlockBufferGetDataLengthEP19OpaqueCMBlockBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBlockBufferGetDataLength");
  PAL::softLinkCoreMediaCMBlockBufferGetDataLength = (uint64_t (*)(PAL *__hidden, OpaqueCMBlockBuffer *))result;
  if (!result)
  {
    result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL43initCoreMediaCMBlockBufferIsRangeContiguousEP19OpaqueCMBlockBuffermm_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBlockBufferIsRangeContiguous");
  PAL::softLinkCoreMediaCMBlockBufferIsRangeContiguous = (uint64_t (*)(PAL *__hidden, OpaqueCMBlockBuffer *, unint64_t, unint64_t))result;
  if (!result)
  {
    result = 43;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL42initCoreMediaCMBlockBufferReplaceDataBytesEPKvP19OpaqueCMBlockBuffermm_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBlockBufferReplaceDataBytes");
  PAL::softLinkCoreMediaCMBlockBufferReplaceDataBytes = (uint64_t (*)(PAL *__hidden, const void *, OpaqueCMBlockBuffer *, unint64_t, unint64_t))result;
  if (!result)
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL44initCoreMediaCMFormatDescriptionGetExtensionEPK25opaqueCMFormatDescriptionPK10__CFString_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMFormatDescriptionGetExtension");
  PAL::softLinkCoreMediaCMFormatDescriptionGetExtension = (uint64_t (*)(PAL *__hidden, const opaqueCMFormatDescription *, const __CFString *))result;
  if (!result)
  {
    result = 45;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL37initCoreMediaCMFormatDescriptionEqualEPK25opaqueCMFormatDescriptionS2__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMFormatDescriptionEqual");
  PAL::softLinkCoreMediaCMFormatDescriptionEqual = (uint64_t (*)(PAL *__hidden, const opaqueCMFormatDescription *, const opaqueCMFormatDescription *))result;
  if (!result)
  {
    result = 46;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL45initCoreMediaCMFormatDescriptionGetExtensionsEPK25opaqueCMFormatDescription_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMFormatDescriptionGetExtensions");
  PAL::softLinkCoreMediaCMFormatDescriptionGetExtensions = (uint64_t (*)(PAL *__hidden, const opaqueCMFormatDescription *))result;
  if (!result)
  {
    result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL36initCoreMediaCMSampleBufferGetTypeIDEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetTypeID");
  PAL::softLinkCoreMediaCMSampleBufferGetTypeID = (uint64_t (*)(PAL *__hidden))result;
  if (!result)
  {
    result = 48;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL40initCoreMediaCMSampleBufferGetDataBufferEP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetDataBuffer");
  PAL::softLinkCoreMediaCMSampleBufferGetDataBuffer[0] = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *))result;
  if (!result)
  {
    result = 49;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL47initCoreMediaCMSampleBufferGetFormatDescriptionEP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetFormatDescription");
  PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *))result;
  if (!result)
  {
    result = 50;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL59initCoreMediaCMSampleBufferGetAudioStreamPacketDescriptionsEP20opaqueCMSampleBuffermP28AudioStreamPacketDescriptionPm_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetAudioStreamPacketDescriptions");
  PAL::softLinkCoreMediaCMSampleBufferGetAudioStreamPacketDescriptions = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *, unint64_t, AudioStreamPacketDescription *, unint64_t *))result;
  if (!result)
  {
    result = 51;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL46initCoreMediaCMSampleBufferGetSampleTimingInfoEP20opaqueCMSampleBufferlP18CMSampleTimingInfo_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetSampleTimingInfo");
  PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfo = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *, uint64_t, CMSampleTimingInfo *))result;
  if (!result)
  {
    result = 52;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL38initCoreMediaCMSampleBufferDataIsReadyEP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferDataIsReady");
  PAL::softLinkCoreMediaCMSampleBufferDataIsReady = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *))result;
  if (!result)
  {
    result = 53;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL22initCoreMediaCMTimeAddE6CMTimeS0__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeAdd");
  PAL::softLinkCoreMediaCMTimeAdd[0] = (uint64_t (*)(PAL *__hidden, CMTime *__struct_ptr, CMTime *__struct_ptr))result;
  if (!result)
  {
    result = 55;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL26initCoreMediaCMTimeCompareE6CMTimeS0__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeCompare");
  PAL::softLinkCoreMediaCMTimeCompare = (uint64_t (*)(PAL *__hidden, CMTime *__struct_ptr, CMTime *__struct_ptr))result;
  if (!result)
  {
    result = 56;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL31initCoreMediaCMTimeConvertScaleE6CMTimei20CMTimeRoundingMethod_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeConvertScale");
  PAL::softLinkCoreMediaCMTimeConvertScale = (uint64_t (*)(PAL *__hidden, CMTime *__struct_ptr, int, CMTimeRoundingMethod))result;
  if (!result)
  {
    result = 57;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL29initCoreMediaCMTimeGetSecondsE6CMTime_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeGetSeconds");
  PAL::softLinkCoreMediaCMTimeGetSeconds = (uint64_t (*)(PAL *__hidden, CMTime *__struct_ptr))result;
  if (!result)
  {
    result = 58;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL23initCoreMediaCMTimeMakeExi_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeMake");
  PAL::softLinkCoreMediaCMTimeMake = (uint64_t (*)(PAL *__hidden, uint64_t, int))result;
  if (!result)
  {
    result = 59;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL34initCoreMediaCMTimeMakeWithSecondsEdi_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeMakeWithSeconds");
  PAL::softLinkCoreMediaCMTimeMakeWithSeconds = (uint64_t (*)(PAL *__hidden, double, int))result;
  if (!result)
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL27initCoreMediaCMTimeSubtractE6CMTimeS0__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeSubtract");
  PAL::softLinkCoreMediaCMTimeSubtract = (uint64_t (*)(PAL *__hidden, CMTime *__struct_ptr, CMTime *__struct_ptr))result;
  if (!result)
  {
    result = 61;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL30initCoreMediaCMTimeRangeGetEndE11CMTimeRange_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeRangeGetEnd");
  PAL::softLinkCoreMediaCMTimeRangeGetEnd = (uint64_t (*)(PAL *__hidden, CMTimeRange *__struct_ptr))result;
  if (!result)
  {
    result = 62;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL28initCoreMediaCMTimeRangeMakeE6CMTimeS0__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeRangeMake");
  PAL::softLinkCoreMediaCMTimeRangeMake = (uint64_t (*)(PAL *__hidden, CMTime *__struct_ptr, CMTime *__struct_ptr))result;
  if (!result)
  {
    result = 63;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL29initCoreMediaCMTimeRangeEqualE11CMTimeRangeS0__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeRangeEqual");
  PAL::softLinkCoreMediaCMTimeRangeEqual = (uint64_t (*)(PAL *__hidden, CMTimeRange *__struct_ptr, CMTimeRange *__struct_ptr))result;
  if (!result)
  {
    result = 64;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL26initCoreMediaCMTimeMaximumE6CMTimeS0__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeMaximum");
  PAL::softLinkCoreMediaCMTimeMaximum[0] = (uint64_t (*)(PAL *__hidden, CMTime *__struct_ptr, CMTime *__struct_ptr))result;
  if (!result)
  {
    result = 65;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL26initCoreMediaCMTimeMinimumE6CMTimeS0__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeMinimum");
  PAL::softLinkCoreMediaCMTimeMinimum = (uint64_t (*)(PAL *__hidden, CMTime *__struct_ptr, CMTime *__struct_ptr))result;
  if (!result)
  {
    result = 66;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL36initCoreMediaCMTimeRangeContainsTimeE11CMTimeRange6CMTime_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeRangeContainsTime");
  PAL::softLinkCoreMediaCMTimeRangeContainsTime = (uint64_t (*)(PAL *__hidden, CMTimeRange *__struct_ptr, CMTime *__struct_ptr))result;
  if (!result)
  {
    result = 67;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL42initCoreMediaCMBlockBufferCreateContiguousEPK13__CFAllocatorP19OpaqueCMBlockBufferS2_PK30CMBlockBufferCustomBlockSourcemmjPS4__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBlockBufferCreateContiguous");
  PAL::softLinkCoreMediaCMBlockBufferCreateContiguous = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, OpaqueCMBlockBuffer *, const __CFAllocator *, const CMBlockBufferCustomBlockSource *, unint64_t, unint64_t, unsigned int, OpaqueCMBlockBuffer **))result;
  if (!result)
  {
    result = 117;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL47initCoreMediaCMBlockBufferAppendBufferReferenceEP19OpaqueCMBlockBufferS1_mmj_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBlockBufferAppendBufferReference");
  PAL::softLinkCoreMediaCMBlockBufferAppendBufferReference = (uint64_t (*)(PAL *__hidden, OpaqueCMBlockBuffer *, OpaqueCMBlockBuffer *, unint64_t, unint64_t, unsigned int))result;
  if (!result)
  {
    result = 118;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL37initCoreMediaCMBlockBufferCreateEmptyEPK13__CFAllocatorjjPP19OpaqueCMBlockBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBlockBufferCreateEmpty");
  PAL::softLinkCoreMediaCMBlockBufferCreateEmpty = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, unsigned int, unsigned int, OpaqueCMBlockBuffer **))result;
  if (!result)
  {
    result = 119;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL47initCoreMediaCMFormatDescriptionGetMediaSubTypeEPK25opaqueCMFormatDescription_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMFormatDescriptionGetMediaSubType");
  PAL::softLinkCoreMediaCMFormatDescriptionGetMediaSubType[0] = (uint64_t (*)(PAL *__hidden, const opaqueCMFormatDescription *))result;
  if (!result)
  {
    result = 120;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL44initCoreMediaCMFormatDescriptionGetMediaTypeEPK25opaqueCMFormatDescription_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMFormatDescriptionGetMediaType");
  PAL::softLinkCoreMediaCMFormatDescriptionGetMediaType[0] = (uint64_t (*)(PAL *__hidden, const opaqueCMFormatDescription *))result;
  if (!result)
  {
    result = 121;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL43initCoreMediaCMBlockBufferAssureBlockMemoryEP19OpaqueCMBlockBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBlockBufferAssureBlockMemory");
  PAL::softLinkCoreMediaCMBlockBufferAssureBlockMemory = (uint64_t (*)(PAL *__hidden, OpaqueCMBlockBuffer *))result;
  if (!result)
  {
    result = 123;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL40initCoreMediaCMBlockBufferGetDataPointerEP19OpaqueCMBlockBuffermPmS2_PPc_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBlockBufferGetDataPointer");
  PAL::softLinkCoreMediaCMBlockBufferGetDataPointer = (uint64_t (*)(PAL *__hidden, OpaqueCMBlockBuffer *, unint64_t, unint64_t *, unint64_t *, char **))result;
  if (!result)
  {
    result = 124;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL38initCoreMediaCMSampleBufferCreateReadyEPK13__CFAllocatorP19OpaqueCMBlockBufferPK25opaqueCMFormatDescriptionllPK18CMSampleTimingInfolPKmPP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferCreateReady");
  PAL::softLinkCoreMediaCMSampleBufferCreateReady = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, OpaqueCMBlockBuffer *, const opaqueCMFormatDescription *, uint64_t, uint64_t, const CMSampleTimingInfo *, uint64_t, const unint64_t *, opaqueCMSampleBuffer **))result;
  if (!result)
  {
    result = 126;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL33initCoreMediaCMSampleBufferCreateEPK13__CFAllocatorP19OpaqueCMBlockBufferhPFiP20opaqueCMSampleBufferPvES7_PK25opaqueCMFormatDescriptionllPK18CMSampleTimingInfolPKmPS6__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferCreate");
  PAL::softLinkCoreMediaCMSampleBufferCreate = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, OpaqueCMBlockBuffer *, unsigned __int8, int (*)(opaqueCMSampleBuffer *, void *), void *, const opaqueCMFormatDescription *, uint64_t, uint64_t, const CMSampleTimingInfo *, uint64_t, const unint64_t *, opaqueCMSampleBuffer **))result;
  if (!result)
  {
    result = 128;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL37initCoreMediaCMSampleBufferCreateCopyEPK13__CFAllocatorP20opaqueCMSampleBufferPS4__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferCreateCopy");
  PAL::softLinkCoreMediaCMSampleBufferCreateCopy = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, opaqueCMSampleBuffer *, opaqueCMSampleBuffer **))result;
  if (!result)
  {
    result = 129;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL50initCoreMediaCMSampleBufferCreateCopyWithNewTimingEPK13__CFAllocatorP20opaqueCMSampleBufferlPK18CMSampleTimingInfoPS4__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferCreateCopyWithNewTiming");
  PAL::softLinkCoreMediaCMSampleBufferCreateCopyWithNewTiming = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, opaqueCMSampleBuffer *, uint64_t, const CMSampleTimingInfo *, opaqueCMSampleBuffer **))result;
  if (!result)
  {
    result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL53initCoreMediaCMSampleBufferCreateReadyWithImageBufferEPK13__CFAllocatorP10__CVBufferPK25opaqueCMFormatDescriptionPK18CMSampleTimingInfoPP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferCreateReadyWithImageBuffer");
  PAL::softLinkCoreMediaCMSampleBufferCreateReadyWithImageBuffer = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, __CVBuffer *, const opaqueCMFormatDescription *, const CMSampleTimingInfo *, opaqueCMSampleBuffer **))result;
  if (!result)
  {
    result = 131;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL47initCoreMediaCMSampleBufferCreateForImageBufferEPK13__CFAllocatorP10__CVBufferhPFiP20opaqueCMSampleBufferPvES7_PK25opaqueCMFormatDescriptionPK18CMSampleTimingInfoPS6__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferCreateForImageBuffer");
  PAL::softLinkCoreMediaCMSampleBufferCreateForImageBuffer = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, __CVBuffer *, unsigned __int8, int (*)(opaqueCMSampleBuffer *, void *), void *, const opaqueCMFormatDescription *, const CMSampleTimingInfo *, opaqueCMSampleBuffer **))result;
  if (!result)
  {
    result = 132;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL45initCoreMediaCMSampleBufferGetDecodeTimeStampEP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetDecodeTimeStamp");
  PAL::softLinkCoreMediaCMSampleBufferGetDecodeTimeStamp[0] = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *))result;
  if (!result)
  {
    result = 133;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL38initCoreMediaCMSampleBufferGetDurationEP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetDuration");
  PAL::softLinkCoreMediaCMSampleBufferGetDuration[0] = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *))result;
  if (!result)
  {
    result = 134;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL41initCoreMediaCMSampleBufferGetImageBufferEP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetImageBuffer");
  PAL::softLinkCoreMediaCMSampleBufferGetImageBuffer[0] = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *))result;
  if (!result)
  {
    result = 135;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL51initCoreMediaCMSampleBufferGetPresentationTimeStampEP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetPresentationTimeStamp");
  PAL::softLinkCoreMediaCMSampleBufferGetPresentationTimeStamp[0] = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *))result;
  if (!result)
  {
    result = 136;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL44initCoreMediaCMSampleBufferGetOutputDurationEP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetOutputDuration");
  PAL::softLinkCoreMediaCMSampleBufferGetOutputDuration[0] = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *))result;
  if (!result)
  {
    result = 137;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL57initCoreMediaCMSampleBufferGetOutputPresentationTimeStampEP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetOutputPresentationTimeStamp");
  PAL::softLinkCoreMediaCMSampleBufferGetOutputPresentationTimeStamp = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *))result;
  if (!result)
  {
    result = 138;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL52initCoreMediaCMSampleBufferGetSampleAttachmentsArrayEP20opaqueCMSampleBufferh_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetSampleAttachmentsArray");
  PAL::softLinkCoreMediaCMSampleBufferGetSampleAttachmentsArray = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *, unsigned __int8))result;
  if (!result)
  {
    result = 139;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL51initCoreMediaCMSampleBufferGetSampleTimingInfoArrayEP20opaqueCMSampleBufferlP18CMSampleTimingInfoPl_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetSampleTimingInfoArray");
  PAL::softLinkCoreMediaCMSampleBufferGetSampleTimingInfoArray = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *, uint64_t, CMSampleTimingInfo *, uint64_t *))result;
  if (!result)
  {
    result = 140;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL45initCoreMediaCMSampleBufferGetTotalSampleSizeEP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetTotalSampleSize");
  PAL::softLinkCoreMediaCMSampleBufferGetTotalSampleSize = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *))result;
  if (!result)
  {
    result = 141;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL40initCoreMediaCMSampleBufferSetDataBufferEP20opaqueCMSampleBufferP19OpaqueCMBlockBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferSetDataBuffer");
  PAL::softLinkCoreMediaCMSampleBufferSetDataBuffer = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *, OpaqueCMBlockBuffer *))result;
  if (!result)
  {
    result = 142;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL28initCoreMediaCMGetAttachmentEPKvPK10__CFStringPj_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMGetAttachment");
  PAL::softLinkCoreMediaCMGetAttachment = (uint64_t (*)(PAL *__hidden, const void *, const __CFString *, unsigned int *))result;
  if (!result)
  {
    result = 144;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL28initCoreMediaCMSetAttachmentEPKvPK10__CFStringS1_j_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSetAttachment");
  PAL::softLinkCoreMediaCMSetAttachment = (uint64_t (*)(PAL *__hidden, const void *, const __CFString *, const void *, unsigned int))result;
  if (!result)
  {
    result = 145;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL31initCoreMediaCMRemoveAttachmentEPKvPK10__CFString_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMRemoveAttachment");
  PAL::softLinkCoreMediaCMRemoveAttachment = (uint64_t (*)(PAL *__hidden, const void *, const __CFString *))result;
  if (!result)
  {
    result = 146;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL44initCoreMediaCMTimebaseCreateWithMasterClockEPK13__CFAllocatorP13OpaqueCMClockPP16OpaqueCMTimebase_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimebaseCreateWithMasterClock");
  PAL::softLinkCoreMediaCMTimebaseCreateWithMasterClock = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, OpaqueCMClock *, OpaqueCMTimebase **))result;
  if (!result)
  {
    result = 148;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL30initCoreMediaCMTimebaseGetTimeEP16OpaqueCMTimebase_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimebaseGetTime");
  PAL::softLinkCoreMediaCMTimebaseGetTime[0] = (uint64_t (*)(PAL *__hidden, OpaqueCMTimebase *))result;
  if (!result)
  {
    result = 149;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL30initCoreMediaCMTimebaseGetRateEP16OpaqueCMTimebase_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimebaseGetRate");
  PAL::softLinkCoreMediaCMTimebaseGetRate = (uint64_t (*)(PAL *__hidden, OpaqueCMTimebase *))result;
  if (!result)
  {
    result = 150;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL30initCoreMediaCMTimebaseSetRateEP16OpaqueCMTimebased_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimebaseSetRate");
  PAL::softLinkCoreMediaCMTimebaseSetRate = (uint64_t (*)(PAL *__hidden, OpaqueCMTimebase *, double))result;
  if (!result)
  {
    result = 151;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL30initCoreMediaCMTimebaseSetTimeEP16OpaqueCMTimebase6CMTime_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimebaseSetTime");
  PAL::softLinkCoreMediaCMTimebaseSetTime = (uint64_t (*)(PAL *__hidden, OpaqueCMTimebase *, CMTime *__struct_ptr))result;
  if (!result)
  {
    result = 152;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL39initCoreMediaCMTimebaseGetEffectiveRateEP16OpaqueCMTimebase_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimebaseGetEffectiveRate");
  PAL::softLinkCoreMediaCMTimebaseGetEffectiveRate = (uint64_t (*)(PAL *__hidden, OpaqueCMTimebase *))result;
  if (!result)
  {
    result = 153;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL45initCoreMediaCMTimebaseAddTimerDispatchSourceEP16OpaqueCMTimebaseP17dispatch_source_s_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimebaseAddTimerDispatchSource");
  PAL::softLinkCoreMediaCMTimebaseAddTimerDispatchSource[0] = (uint64_t (*)(PAL *__hidden, OpaqueCMTimebase *, dispatch_source_s *))result;
  if (!result)
  {
    result = 154;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL48initCoreMediaCMTimebaseRemoveTimerDispatchSourceEP16OpaqueCMTimebaseP17dispatch_source_s_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimebaseRemoveTimerDispatchSource");
  PAL::softLinkCoreMediaCMTimebaseRemoveTimerDispatchSource = (uint64_t (*)(PAL *__hidden, OpaqueCMTimebase *, dispatch_source_s *))result;
  if (!result)
  {
    result = 155;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL57initCoreMediaCMTimebaseSetTimerDispatchSourceNextFireTimeEP16OpaqueCMTimebaseP17dispatch_source_s6CMTimej_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimebaseSetTimerDispatchSourceNextFireTime");
  PAL::softLinkCoreMediaCMTimebaseSetTimerDispatchSourceNextFireTime = (uint64_t (*)(PAL *__hidden, OpaqueCMTimebase *, dispatch_source_s *, CMTime *__struct_ptr, unsigned int))result;
  if (!result)
  {
    result = 156;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL62initCoreMediaCMTimebaseSetTimerDispatchSourceToFireImmediatelyEP16OpaqueCMTimebaseP17dispatch_source_s_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimebaseSetTimerDispatchSourceToFireImmediately");
  PAL::softLinkCoreMediaCMTimebaseSetTimerDispatchSourceToFireImmediately = (uint64_t (*)(PAL *__hidden, OpaqueCMTimebase *, dispatch_source_s *))result;
  if (!result)
  {
    result = 157;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL35initCoreMediaCMTimeCopyAsDictionaryE6CMTimePK13__CFAllocator_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMTimeCopyAsDictionary");
  PAL::softLinkCoreMediaCMTimeCopyAsDictionary = (uint64_t (*)(PAL *__hidden, CMTime *__struct_ptr, const __CFAllocator *))result;
  if (!result)
  {
    result = 158;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL43initCoreMediaCMVideoFormatDescriptionCreateEPK13__CFAllocatorjiiPK14__CFDictionaryPPK25opaqueCMFormatDescription_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMVideoFormatDescriptionCreate");
  PAL::softLinkCoreMediaCMVideoFormatDescriptionCreate = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, unsigned int, int, int, const __CFDictionary *, const opaqueCMFormatDescription **))result;
  if (!result)
  {
    result = 159;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL57initCoreMediaCMVideoFormatDescriptionCreateForImageBufferEPK13__CFAllocatorP10__CVBufferPPK25opaqueCMFormatDescription_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMVideoFormatDescriptionCreateForImageBuffer");
  PAL::softLinkCoreMediaCMVideoFormatDescriptionCreateForImageBuffer = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, __CVBuffer *, const opaqueCMFormatDescription **))result;
  if (!result)
  {
    result = 160;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL50initCoreMediaCMVideoFormatDescriptionGetDimensionsEPK25opaqueCMFormatDescription_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMVideoFormatDescriptionGetDimensions");
  PAL::softLinkCoreMediaCMVideoFormatDescriptionGetDimensions = (uint64_t (*)(PAL *__hidden, const opaqueCMFormatDescription *))result;
  if (!result)
  {
    result = 161;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL62initCoreMediaCMVideoFormatDescriptionGetPresentationDimensionsEPK25opaqueCMFormatDescriptionhh_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMVideoFormatDescriptionGetPresentationDimensions");
  PAL::softLinkCoreMediaCMVideoFormatDescriptionGetPresentationDimensions = (uint64_t (*)(PAL *__hidden, const opaqueCMFormatDescription *, unsigned __int8, unsigned __int8))result;
  if (!result)
  {
    result = 162;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL31initCoreMediaCMBufferQueueResetEP19opaqueCMBufferQueue_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueReset");
  PAL::softLinkCoreMediaCMBufferQueueReset = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *))result;
  if (!result)
  {
    result = 163;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL32initCoreMediaCMBufferQueueCreateEPK13__CFAllocatorlPK17CMBufferCallbacksPP19opaqueCMBufferQueue_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueCreate");
  PAL::softLinkCoreMediaCMBufferQueueCreate = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, uint64_t, const CMBufferCallbacks *, opaqueCMBufferQueue **))result;
  if (!result)
  {
    result = 164;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL33initCoreMediaCMBufferQueueGetHeadEP19opaqueCMBufferQueue_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueGetHead");
  PAL::softLinkCoreMediaCMBufferQueueGetHead[0] = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *))result;
  if (!result)
  {
    result = 165;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL42initCoreMediaCMBufferQueueDequeueAndRetainEP19opaqueCMBufferQueue_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueDequeueAndRetain");
  PAL::softLinkCoreMediaCMBufferQueueDequeueAndRetain = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *))result;
  if (!result)
  {
    result = 166;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL33initCoreMediaCMBufferQueueEnqueueEP19opaqueCMBufferQueuePKv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueEnqueue");
  PAL::softLinkCoreMediaCMBufferQueueEnqueue = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *, const void *))result;
  if (!result)
  {
    result = 167;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL33initCoreMediaCMBufferQueueIsEmptyEP19opaqueCMBufferQueue_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueIsEmpty");
  PAL::softLinkCoreMediaCMBufferQueueIsEmpty[0] = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *))result;
  if (!result)
  {
    result = 168;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL40initCoreMediaCMBufferQueueGetBufferCountEP19opaqueCMBufferQueue_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueGetBufferCount");
  PAL::softLinkCoreMediaCMBufferQueueGetBufferCount = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *))result;
  if (!result)
  {
    result = 169;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL62initCoreMediaCMBufferQueueGetCallbacksForUnsortedSampleBuffersEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueGetCallbacksForUnsortedSampleBuffers");
  PAL::softLinkCoreMediaCMBufferQueueGetCallbacksForUnsortedSampleBuffers = (uint64_t (*)(PAL *__hidden))result;
  if (!result)
  {
    result = 170;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL55initCoreMediaCMBufferQueueGetFirstPresentationTimeStampEP19opaqueCMBufferQueue_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueGetFirstPresentationTimeStamp");
  PAL::softLinkCoreMediaCMBufferQueueGetFirstPresentationTimeStamp[0] = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *))result;
  if (!result)
  {
    result = 171;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL53initCoreMediaCMBufferQueueGetEndPresentationTimeStampEP19opaqueCMBufferQueue_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueGetEndPresentationTimeStamp");
  PAL::softLinkCoreMediaCMBufferQueueGetEndPresentationTimeStamp = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *))result;
  if (!result)
  {
    result = 172;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL40initCoreMediaCMBufferQueueInstallTriggerEP19opaqueCMBufferQueuePFvPvP31opaqueCMBufferQueueTriggerTokenES2_i6CMTimePS4__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueInstallTrigger");
  PAL::softLinkCoreMediaCMBufferQueueInstallTrigger = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *, void (*)(void *, opaqueCMBufferQueueTriggerToken *), void *, int, CMTime *__struct_ptr, opaqueCMBufferQueueTriggerToken **))result;
  if (!result)
  {
    result = 173;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL39initCoreMediaCMBufferQueueRemoveTriggerEP19opaqueCMBufferQueueP31opaqueCMBufferQueueTriggerToken_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueRemoveTrigger");
  PAL::softLinkCoreMediaCMBufferQueueRemoveTrigger = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *, opaqueCMBufferQueueTriggerToken *))result;
  if (!result)
  {
    result = 174;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL60initCoreMediaCMBufferQueueInstallTriggerWithIntegerThresholdEP19opaqueCMBufferQueuePFvPvP31opaqueCMBufferQueueTriggerTokenES2_ilPS4__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueInstallTriggerWithIntegerThreshold");
  PAL::softLinkCoreMediaCMBufferQueueInstallTriggerWithIntegerThreshold = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *, void (*)(void *, opaqueCMBufferQueueTriggerToken *), void *, int, uint64_t, opaqueCMBufferQueueTriggerToken **))result;
  if (!result)
  {
    result = 175;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL39initCoreMediaCMBufferQueueMarkEndOfDataEP19opaqueCMBufferQueue_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueMarkEndOfData");
  PAL::softLinkCoreMediaCMBufferQueueMarkEndOfData[0] = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *))result;
  if (!result)
  {
    result = 176;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL37initCoreMediaCMBufferQueueGetDurationEP19opaqueCMBufferQueue_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBufferQueueGetDuration");
  PAL::softLinkCoreMediaCMBufferQueueGetDuration = (uint64_t (*)(PAL *__hidden, opaqueCMBufferQueue *))result;
  if (!result)
  {
    result = 177;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL43initCoreMediaCMAudioFormatDescriptionCreateEPK13__CFAllocatorPK27AudioStreamBasicDescriptionmPK18AudioChannelLayoutmPKvPK14__CFDictionaryPPK25opaqueCMFormatDescription_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMAudioFormatDescriptionCreate");
  PAL::softLinkCoreMediaCMAudioFormatDescriptionCreate = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, const AudioStreamBasicDescription *, unint64_t, const AudioChannelLayout *, unint64_t, const void *, const __CFDictionary *, const opaqueCMFormatDescription **))result;
  if (!result)
  {
    result = 198;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL51initCoreMediaCMAudioFormatDescriptionGetMagicCookieEPK25opaqueCMFormatDescriptionPm_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMAudioFormatDescriptionGetMagicCookie");
  PAL::softLinkCoreMediaCMAudioFormatDescriptionGetMagicCookie = (uint64_t (*)(PAL *__hidden, const opaqueCMFormatDescription *, unint64_t *))result;
  if (!result)
  {
    result = 199;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL62initCoreMediaCMAudioFormatDescriptionGetStreamBasicDescriptionEPK25opaqueCMFormatDescription_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMAudioFormatDescriptionGetStreamBasicDescription");
  PAL::softLinkCoreMediaCMAudioFormatDescriptionGetStreamBasicDescription[0] = (uint64_t (*)(PAL *__hidden, const opaqueCMFormatDescription *))result;
  if (!result)
  {
    result = 200;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL62initCoreMediaCMAudioFormatDescriptionGetRichestDecodableFormatEPK25opaqueCMFormatDescription_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMAudioFormatDescriptionGetRichestDecodableFormat");
  PAL::softLinkCoreMediaCMAudioFormatDescriptionGetRichestDecodableFormat = (uint64_t (*)(PAL *__hidden, const opaqueCMFormatDescription *))result;
  if (!result)
  {
    result = 201;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL47initCoreMediaCMBlockBufferCreateWithMemoryBlockEPK13__CFAllocatorPvmS2_PK30CMBlockBufferCustomBlockSourcemmjPP19OpaqueCMBlockBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMBlockBufferCreateWithMemoryBlock");
  PAL::softLinkCoreMediaCMBlockBufferCreateWithMemoryBlock = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, void *, unint64_t, const __CFAllocator *, const CMBlockBufferCustomBlockSource *, unint64_t, unint64_t, unsigned int, OpaqueCMBlockBuffer **))result;
  if (!result)
  {
    result = 203;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL68initCoreMediaCMSampleBufferGetAudioBufferListWithRetainedBlockBufferEP20opaqueCMSampleBufferPmP15AudioBufferListmPK13__CFAllocatorS7_jPP19OpaqueCMBlockBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer");
  PAL::softLinkCoreMediaCMSampleBufferGetAudioBufferListWithRetainedBlockBuffer = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *, unint64_t *, AudioBufferList *, unint64_t, const __CFAllocator *, const __CFAllocator *, unsigned int, OpaqueCMBlockBuffer **))result;
  if (!result)
  {
    result = 204;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL40initCoreMediaCMSampleBufferGetNumSamplesEP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetNumSamples");
  PAL::softLinkCoreMediaCMSampleBufferGetNumSamples = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *))result;
  if (!result)
  {
    result = 205;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL51initCoreMediaCMSampleBufferCopySampleBufferForRangeEPK13__CFAllocatorP20opaqueCMSampleBuffer7CFRangePS4__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferCopySampleBufferForRange");
  PAL::softLinkCoreMediaCMSampleBufferCopySampleBufferForRange = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, opaqueCMSampleBuffer *, CFRange, opaqueCMSampleBuffer **))result;
  if (!result)
  {
    result = 206;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL45initCoreMediaCMSampleBufferGetSampleSizeArrayEP20opaqueCMSampleBufferlPmPl_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferGetSampleSizeArray");
  PAL::softLinkCoreMediaCMSampleBufferGetSampleSizeArray = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *, uint64_t, unint64_t *, uint64_t *))result;
  if (!result)
  {
    result = 207;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL60initCoreMediaCMAudioSampleBufferCreateWithPacketDescriptionsEPK13__CFAllocatorP19OpaqueCMBlockBufferhPFiP20opaqueCMSampleBufferPvES7_PK25opaqueCMFormatDescriptionl6CMTimePK28AudioStreamPacketDescriptionPS6__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMAudioSampleBufferCreateWithPacketDescriptions");
  PAL::softLinkCoreMediaCMAudioSampleBufferCreateWithPacketDescriptions = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, OpaqueCMBlockBuffer *, unsigned __int8, int (*)(opaqueCMSampleBuffer *, void *), void *, const opaqueCMFormatDescription *, uint64_t, CMTime *, const AudioStreamPacketDescription *, opaqueCMSampleBuffer **))result;
  if (!result)
  {
    result = 209;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL65initCoreMediaCMAudioSampleBufferCreateReadyWithPacketDescriptionsEPK13__CFAllocatorP19OpaqueCMBlockBufferPK25opaqueCMFormatDescriptionl6CMTimePK28AudioStreamPacketDescriptionPP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMAudioSampleBufferCreateReadyWithPacketDescriptions");
  PAL::softLinkCoreMediaCMAudioSampleBufferCreateReadyWithPacketDescriptions = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, OpaqueCMBlockBuffer *, const opaqueCMFormatDescription *, uint64_t, CMTime *__struct_ptr, const AudioStreamPacketDescription *, opaqueCMSampleBuffer **))result;
  if (!result)
  {
    result = 210;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL59initCoreMediaCMSampleBufferSetDataBufferFromAudioBufferListEP20opaqueCMSampleBufferPK13__CFAllocatorS4_jPK15AudioBufferList_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferSetDataBufferFromAudioBufferList");
  PAL::softLinkCoreMediaCMSampleBufferSetDataBufferFromAudioBufferList = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *, const __CFAllocator *, const __CFAllocator *, unsigned int, const AudioBufferList *))result;
  if (!result)
  {
    result = 211;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL39initCoreMediaCMSampleBufferSetDataReadyEP20opaqueCMSampleBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferSetDataReady");
  PAL::softLinkCoreMediaCMSampleBufferSetDataReady = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *))result;
  if (!result)
  {
    result = 212;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL57initCoreMediaCMSampleBufferSetOutputPresentationTimeStampEP20opaqueCMSampleBuffer6CMTime_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferSetOutputPresentationTimeStamp");
  PAL::softLinkCoreMediaCMSampleBufferSetOutputPresentationTimeStamp = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *, CMTime *__struct_ptr))result;
  if (!result)
  {
    result = 213;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL36initCoreMediaCMClockGetHostTimeClockEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMClockGetHostTimeClock");
  PAL::softLinkCoreMediaCMClockGetHostTimeClock = (uint64_t (*)(PAL *__hidden))result;
  if (!result)
  {
    result = 215;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL27initCoreMediaCMClockGetTimeEP13OpaqueCMClock_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMClockGetTime");
  PAL::softLinkCoreMediaCMClockGetTime = (uint64_t (*)(PAL *__hidden, OpaqueCMClock *))result;
  if (!result)
  {
    result = 216;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL48initCoreMediaCMClockConvertHostTimeToSystemUnitsE6CMTime_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMClockConvertHostTimeToSystemUnits");
  PAL::softLinkCoreMediaCMClockConvertHostTimeToSystemUnits = (uint64_t (*)(PAL *__hidden, CMTime *__struct_ptr))result;
  if (!result)
  {
    result = 217;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL47initCoreMediaCMClockMakeHostTimeFromSystemUnitsEy_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMClockMakeHostTimeFromSystemUnits");
  PAL::softLinkCoreMediaCMClockMakeHostTimeFromSystemUnits = (uint64_t (*)(PAL *__hidden, unint64_t))result;
  if (!result)
  {
    result = 218;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL44initCoreMediaCMSampleBufferCallForEachSampleEP20opaqueCMSampleBufferPFiS1_lPvES2__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferCallForEachSample");
  PAL::softLinkCoreMediaCMSampleBufferCallForEachSample = (uint64_t (*)(PAL *__hidden, opaqueCMSampleBuffer *, int (*)(opaqueCMSampleBuffer *, uint64_t, void *), void *))result;
  if (!result)
  {
    result = 220;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL49initCoreMediaCMSampleBufferCallBlockForEachSampleEP20opaqueCMSampleBufferU13block_pointerFiS1_lE_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMSampleBufferCallBlockForEachSample");
  PAL::softLinkCoreMediaCMSampleBufferCallBlockForEachSample = (uint64_t (*)())result;
  if (!result)
  {
    result = 221;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL31initCoreMediaCMAudioClockCreateEPK13__CFAllocatorPP13OpaqueCMClock_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "CMAudioClockCreate");
  PAL::softLinkCoreMediaCMAudioClockCreate = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, OpaqueCMClock **))result;
  if (!result)
  {
    result = 223;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL41initCoreMediaFigThreadRegisterAbortActionEPFvPvES0_PP31OpaqueFigThreadAbortActionToken_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "FigThreadRegisterAbortAction");
  PAL::softLinkCoreMediaFigThreadRegisterAbortAction = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 224;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL43initCoreMediaFigThreadUnregisterAbortActionEP31OpaqueFigThreadAbortActionToken_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  v2 = 0;
  if (PAL::CoreMediaLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "FigThreadUnregisterAbortAction");
  PAL::softLinkCoreMediaFigThreadUnregisterAbortAction = (uint64_t (*)(_QWORD))result;
  if (!result)
  {
    result = 225;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::CoreMLLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13CoreMLLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7E230 != -1)
    dispatch_once(&qword_1ECE7E230, block);
  return _MergedGlobals_60;
}

uint64_t ___ZN3PAL13CoreMLLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/CoreML.framework/CoreML", 2);
  _MergedGlobals_60 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 31;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initMLGPUComputeDevice(PAL *this)
{
  if (qword_1ECE7E238 != -1)
    dispatch_once(&qword_1ECE7E238, &__block_literal_global_4_2);
  return qword_1ECE7E240;
}

Class ___ZN3PALL22initMLGPUComputeDeviceEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13CoreMLLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7E230 != -1)
    dispatch_once(&qword_1ECE7E230, block);
  result = objc_getClass("MLGPUComputeDevice");
  qword_1ECE7E240 = (uint64_t)result;
  PAL::getMLGPUComputeDeviceClass = PAL::MLGPUComputeDeviceFunction;
  return result;
}

uint64_t PAL::MLGPUComputeDeviceFunction(PAL *this)
{
  return qword_1ECE7E240;
}

uint64_t PAL::CoreTextLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL15CoreTextLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_2;
  v3 = (char)this;
  if (PAL::CoreTextLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreTextLibrary(BOOL)::once, block);
  return PAL::CoreTextLibrary(BOOL)::frameworkLibrary;
}

uint64_t ___ZN3PAL15CoreTextLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/CoreText.framework/CoreText", 2);
  PAL::CoreTextLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 30;
    __break(0xC471u);
  }
  return result;
}

BOOL PAL::init_CoreText_CTFontManagerCreateMemorySafeFontDescriptorFromData(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL15CoreTextLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_2;
  v3 = 0;
  if (PAL::CoreTextLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::CoreTextLibrary(BOOL)::once, block);
  PAL::softLinkCoreTextCTFontManagerCreateMemorySafeFontDescriptorFromData = (uint64_t (*)(_QWORD))dlsym((void *)PAL::CoreTextLibrary(BOOL)::frameworkLibrary, "CTFontManagerCreateMemorySafeFontDescriptorFromData");
  return PAL::softLinkCoreTextCTFontManagerCreateMemorySafeFontDescriptorFromData != 0;
}

BOOL PAL::canLoad_CoreText_CTFontManagerCreateMemorySafeFontDescriptorFromData(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_CoreText_CTFontManagerCreateMemorySafeFontDescriptorFromData(void)::loaded != 0;
  result = PAL::init_CoreText_CTFontManagerCreateMemorySafeFontDescriptorFromData(this);
  PAL::canLoad_CoreText_CTFontManagerCreateMemorySafeFontDescriptorFromData(void)::loaded = result;
  return result;
}

uint64_t PAL::initOTSVGOTSVGTableCreateFromData(PAL *this, const __CFData *a2, double a3)
{
  if (PAL::initOTSVGOTSVGTableCreateFromData(__CFData const*,unsigned int,double)::once != -1)
    dispatch_once(&PAL::initOTSVGOTSVGTableCreateFromData(__CFData const*,unsigned int,double)::once, &__block_literal_global_6);
  return PAL::softLinkOTSVGOTSVGTableCreateFromData(this, a2, PAL::softLinkOTSVGOTSVGTableCreateFromData, a3);
}

uint64_t PAL::initOTSVGOTSVGTableGetDocumentIndexForGlyph(uint64_t a1, uint64_t a2)
{
  if (PAL::initOTSVGOTSVGTableGetDocumentIndexForGlyph(__OTSVGTable const*,unsigned short)::once != -1)
    dispatch_once(&PAL::initOTSVGOTSVGTableGetDocumentIndexForGlyph(__OTSVGTable const*,unsigned short)::once, &__block_literal_global_10_1);
  return PAL::softLinkOTSVGOTSVGTableGetDocumentIndexForGlyph(a1, a2);
}

uint64_t PAL::initOTSVGOTSVGTableRelease(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (PAL::initOTSVGOTSVGTableRelease(__OTSVGTable const*)::once != -1)
  {
    dispatch_once(&PAL::initOTSVGOTSVGTableRelease(__OTSVGTable const*)::once, &__block_literal_global_13_0);
    a1 = v1;
  }
  return PAL::softLinkOTSVGOTSVGTableRelease(a1);
}

uint64_t ___ZN3PALL33initOTSVGOTSVGTableCreateFromDataEPK8__CFDatajd_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL12OTSVGLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  v2 = 0;
  if (PAL::OTSVGLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::OTSVGLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::OTSVGLibrary(BOOL)::frameworkLibrary, "OTSVGTableCreateFromData");
  PAL::softLinkOTSVGOTSVGTableCreateFromData = (uint64_t (*)(PAL *__hidden, const __CFData *, unsigned int, double))result;
  if (!result)
  {
    result = 38;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL43initOTSVGOTSVGTableGetDocumentIndexForGlyphEPK12__OTSVGTablet_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL12OTSVGLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  v2 = 0;
  if (PAL::OTSVGLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::OTSVGLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::OTSVGLibrary(BOOL)::frameworkLibrary, "OTSVGTableGetDocumentIndexForGlyph");
  PAL::softLinkOTSVGOTSVGTableGetDocumentIndexForGlyph = (uint64_t (*)(_QWORD, _QWORD))result;
  if (!result)
  {
    result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL26initOTSVGOTSVGTableReleaseEPK12__OTSVGTable_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL12OTSVGLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  v2 = 0;
  if (PAL::OTSVGLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::OTSVGLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::OTSVGLibrary(BOOL)::frameworkLibrary, "OTSVGTableRelease");
  PAL::softLinkOTSVGOTSVGTableRelease = (uint64_t (*)(_QWORD))result;
  if (!result)
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

PAL::CryptoDigest *PAL::CryptoDigest::CryptoDigest(PAL::CryptoDigest *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  _QWORD *v2;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  *(_QWORD *)this = v2;
  return this;
}

void PAL::createCryptoDigest(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1945CF100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = operator new();
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  result = CC_SHA1_Init((CC_SHA1_CTX *)v1);
  *(_QWORD *)v0 = v1;
  *(_DWORD *)(v0 + 8) = 0;
  return result;
}

uint64_t sub_1945CF148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = operator new();
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_QWORD *)(v1 + 96) = 0;
  result = CC_SHA224_Init((CC_SHA256_CTX *)v1);
  *(_QWORD *)v0 = v1;
  *(_DWORD *)(v0 + 8) = 1;
  return result;
}

uint64_t sub_1945CF194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = operator new();
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_QWORD *)(v1 + 96) = 0;
  result = CC_SHA256_Init((CC_SHA256_CTX *)v1);
  *(_QWORD *)v0 = v1;
  *(_DWORD *)(v0 + 8) = 1;
  return result;
}

uint64_t sub_1945CF1E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = operator new();
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  result = CC_SHA384_Init((CC_SHA512_CTX *)v1);
  *(_QWORD *)v0 = v1;
  *(_DWORD *)(v0 + 8) = 2;
  return result;
}

uint64_t sub_1945CF238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = operator new();
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  result = CC_SHA512_Init((CC_SHA512_CTX *)v1);
  *(_QWORD *)v0 = v1;
  *(_DWORD *)(v0 + 8) = 2;
  return result;
}

uint64_t PAL::CryptoDigest::addBytes(uint64_t result, const void *a2, CC_LONG a3)
{
  CC_SHA1_CTX **v3;
  PAL::CryptoDigest *v4;

  v3 = *(CC_SHA1_CTX ***)result;
  switch(**(_DWORD **)result)
  {
    case 0:
      if (*((_DWORD *)v3 + 4))
        goto LABEL_12;
      result = CC_SHA1_Update(v3[1], a2, a3);
      break;
    case 1:
      if (*((_DWORD *)v3 + 4) != 1)
        goto LABEL_12;
      result = CC_SHA224_Update((CC_SHA256_CTX *)v3[1], a2, a3);
      break;
    case 2:
      if (*((_DWORD *)v3 + 4) != 1)
        goto LABEL_12;
      result = CC_SHA256_Update((CC_SHA256_CTX *)v3[1], a2, a3);
      break;
    case 3:
      if (*((_DWORD *)v3 + 4) != 2)
        goto LABEL_12;
      result = CC_SHA384_Update((CC_SHA512_CTX *)v3[1], a2, a3);
      break;
    case 4:
      if (*((_DWORD *)v3 + 4) == 2)
      {
        result = CC_SHA512_Update((CC_SHA512_CTX *)v3[1], a2, a3);
      }
      else
      {
LABEL_12:
        v4 = (PAL::CryptoDigest *)std::__throw_bad_variant_access[abi:sn180100]();
        result = PAL::CryptoDigest::toHexString(v4);
      }
      break;
    default:
      return result;
  }
  return result;
}

WTF *PAL::CryptoDigest::toHexString(PAL::CryptoDigest *this)
{
  uint64_t v1;
  char **v2;
  char *v3;
  WTF *v4;
  int v5;
  void *v6;
  WTF *result;
  WTF *v8;
  char *v9;
  WTF *v10;
  unsigned int v11;

  PAL::CryptoDigest::computeHash((uint64_t)this, (unsigned __int8 **)&v10);
  v9 = 0;
  v1 = v11;
  WTF::CString::newUninitialized((WTF::CString *)(2 * v11), (uint64_t)&v9, v2);
  if ((_DWORD)v1)
  {
    v3 = v9;
    v4 = v10;
    do
    {
      v5 = *(unsigned __int8 *)v4;
      v4 = (WTF *)((char *)v4 + 1);
      snprintf(v3, 3uLL, "%02X", v5);
      v3 += 2;
      --v1;
    }
    while (v1);
  }
  if (!v8)
  {
    WTF::String::fromUTF8();
    goto LABEL_9;
  }
  WTF::String::fromUTF8();
  if (*(_DWORD *)v8 != 1)
  {
    --*(_DWORD *)v8;
LABEL_9:
    result = v10;
    if (!v10)
      return result;
    return (WTF *)WTF::fastFree(result, v6);
  }
  WTF::fastFree(v8, v6);
  result = v10;
  if (!v10)
    return result;
  return (WTF *)WTF::fastFree(result, v6);
}

uint64_t PAL::CryptoDigest::computeHash@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WTF *)WTF::fastMalloc((WTF *)8);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  *(_QWORD *)v6 = v7;
  *(_DWORD *)v7 = a1;
  PAL::createCryptoDigest((uint64_t)&v15, a1);
  v8 = *(_QWORD *)v6;
  v9 = *(unsigned int *)(*(_QWORD *)v6 + 16);
  if ((_DWORD)v9 == -1)
  {
    if ((_DWORD)v16 == -1)
      goto LABEL_8;
LABEL_6:
    v17 = *(_QWORD *)v6 + 8;
    ((void (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRSI_SM_EEEDcmSO_DpOT0____fdiagonal[v16])(&v17);
    v10 = v16;
    if ((_DWORD)v16 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  if ((_DWORD)v16 != -1)
    goto LABEL_6;
  ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v9])(&v17, *(_QWORD *)v6 + 8);
  *(_DWORD *)(v8 + 16) = -1;
  v10 = v16;
  if ((_DWORD)v16 != -1)
LABEL_7:
    ((void (*)(uint64_t *, unsigned __int8 **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v10])(&v17, &v15);
LABEL_8:
  PAL::CryptoDigest::addBytes((uint64_t)v6, *(const void **)a2, *(_DWORD *)(a2 + 12));
  PAL::CryptoDigest::computeHash((uint64_t)v6, &v15);
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = 1;
  v12 = *(unsigned int **)v6;
  *(_QWORD *)v6 = 0;
  if (v12)
  {
    v13 = v12[4];
    if ((_DWORD)v13 != -1)
      ((void (*)(unsigned __int8 **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v13])(&v15, v12 + 2);
    v12[4] = -1;
    WTF::fastFree((WTF *)v12, v11);
  }
  return WTF::fastFree(v6, v11);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS9_EEEENS8_I17CC_SHA256state_stNSA_ISD_EEEENS8_I17CC_SHA512state_stNSA_ISG_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSC_SF_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    JUMPOUT(0x19AEA7644);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS9_EEEENS8_I17CC_SHA256state_stNSA_ISD_EEEENS8_I17CC_SHA512state_stNSA_ISG_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSC_SF_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    JUMPOUT(0x19AEA7644);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS9_EEEENS8_I17CC_SHA256state_stNSA_ISD_EEEENS8_I17CC_SHA512state_stNSA_ISG_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSC_SF_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    JUMPOUT(0x19AEA7644);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS9_EEEENS8_I17CC_SHA256state_stNSA_ISD_EEEENS8_I17CC_SHA512state_stNSA_ISG_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSC_SF_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    JUMPOUT(0x19AEA7644);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS9_EEEENS8_I17CC_SHA256state_stNSA_ISD_EEEENS8_I17CC_SHA512state_stNSA_ISG_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSC_SF_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    JUMPOUT(0x19AEA7644);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS9_EEEENS8_I17CC_SHA256state_stNSA_ISD_EEEENS8_I17CC_SHA512state_stNSA_ISG_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSC_SF_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    JUMPOUT(0x19AEA7644);
  return result;
}

uint64_t std::__throw_bad_variant_access[abi:sn180100]()
{
  PAL *v0;
  BOOL v1;

  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
  return PAL::CryptoKitPrivateLibrary(v0, v1);
}

uint64_t PAL::CryptoKitPrivateLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL23CryptoKitPrivateLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7E250 != -1)
    dispatch_once(&qword_1ECE7E250, block);
  return _MergedGlobals_61;
}

uint64_t ___ZN3PAL23CryptoKitPrivateLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CryptoKitPrivate.framework/CryptoKitPrivate", 2);
  _MergedGlobals_61 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initRSABSSATokenBlinder(PAL *this)
{
  if (qword_1ECE7E258 != -1)
    dispatch_once(&qword_1ECE7E258, &__block_literal_global_7);
  return qword_1ECE7E260;
}

uint64_t ___ZN3PALL23initRSABSSATokenBlinderEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL23CryptoKitPrivateLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E250 == -1)
  {
    result = (uint64_t)objc_getClass("RSABSSATokenBlinder");
    qword_1ECE7E260 = result;
    if (result)
    {
LABEL_3:
      PAL::getRSABSSATokenBlinderClass = PAL::RSABSSATokenBlinderFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E250, block);
    result = (uint64_t)objc_getClass("RSABSSATokenBlinder");
    qword_1ECE7E260 = result;
    if (result)
      goto LABEL_3;
  }
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t PAL::RSABSSATokenBlinderFunction(PAL *this)
{
  return qword_1ECE7E260;
}

uint64_t PAL::initDataDetectorsCoreDDResultGetType(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (PAL::initDataDetectorsCoreDDResultGetType(__DDResult *)::once != -1)
  {
    dispatch_once(&PAL::initDataDetectorsCoreDDResultGetType(__DDResult *)::once, &__block_literal_global_9_0);
    a1 = v1;
  }
  return PAL::softLinkDataDetectorsCoreDDResultGetType(a1);
}

uint64_t PAL::initDataDetectorsCoreDDResultGetCategory(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (PAL::initDataDetectorsCoreDDResultGetCategory(__DDResult *)::once != -1)
  {
    dispatch_once(&PAL::initDataDetectorsCoreDDResultGetCategory(__DDResult *)::once, &__block_literal_global_11_1);
    a1 = v1;
  }
  return PAL::softLinkDataDetectorsCoreDDResultGetCategory(a1);
}

uint64_t PAL::initDataDetectorsCoreDDScanQueryAddTextFragment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (PAL::initDataDetectorsCoreDDScanQueryAddTextFragment(__DDScanQuery *,__CFString const*,CFRange,void *,__DDTextFragmentType,__DDTextCoalescingType)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDScanQueryAddTextFragment(__DDScanQuery *,__CFString const*,CFRange,void *,__DDTextFragmentType,__DDTextCoalescingType)::once, &__block_literal_global_13_1);
  return PAL::softLinkDataDetectorsCoreDDScanQueryAddTextFragment(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t PAL::initDataDetectorsCoreDDScanQueryAddSeparator(uint64_t a1, uint64_t a2)
{
  if (PAL::initDataDetectorsCoreDDScanQueryAddSeparator(__DDScanQuery *,__DDTextCoalescingType)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDScanQueryAddSeparator(__DDScanQuery *,__DDTextCoalescingType)::once, &__block_literal_global_15_1);
  return PAL::softLinkDataDetectorsCoreDDScanQueryAddSeparator(a1, a2);
}

uint64_t PAL::initDataDetectorsCoreDDScanQueryAddLineBreak(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (PAL::initDataDetectorsCoreDDScanQueryAddLineBreak(__DDScanQuery *)::once != -1)
  {
    dispatch_once(&PAL::initDataDetectorsCoreDDScanQueryAddLineBreak(__DDScanQuery *)::once, &__block_literal_global_17_0);
    a1 = v1;
  }
  return PAL::softLinkDataDetectorsCoreDDScanQueryAddLineBreak(a1);
}

uint64_t PAL::initDataDetectorsCoreDDScanQueryGetFragmentMetaData(uint64_t a1, uint64_t a2)
{
  if (PAL::initDataDetectorsCoreDDScanQueryGetFragmentMetaData(__DDScanQuery *,long)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDScanQueryGetFragmentMetaData(__DDScanQuery *,long)::once, &__block_literal_global_19);
  return PAL::softLinkDataDetectorsCoreDDScanQueryGetFragmentMetaData(a1, a2);
}

uint64_t PAL::initDataDetectorsCoreDDResultHasProperties(uint64_t a1, uint64_t a2)
{
  if (PAL::initDataDetectorsCoreDDResultHasProperties(__DDResult *,long)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDResultHasProperties(__DDResult *,long)::once, &__block_literal_global_21_0);
  return PAL::softLinkDataDetectorsCoreDDResultHasProperties(a1, a2);
}

uint64_t PAL::initDataDetectorsCoreDDResultGetSubResults(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (PAL::initDataDetectorsCoreDDResultGetSubResults(__DDResult *)::once != -1)
  {
    dispatch_once(&PAL::initDataDetectorsCoreDDResultGetSubResults(__DDResult *)::once, &__block_literal_global_23_0);
    a1 = v1;
  }
  return PAL::softLinkDataDetectorsCoreDDResultGetSubResults(a1);
}

uint64_t PAL::initDataDetectorsCoreDDResultGetQueryRangeForURLification(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (PAL::initDataDetectorsCoreDDResultGetQueryRangeForURLification(__DDResult *)::once != -1)
  {
    dispatch_once(&PAL::initDataDetectorsCoreDDResultGetQueryRangeForURLification(__DDResult *)::once, &__block_literal_global_25);
    a1 = v1;
  }
  return PAL::softLinkDataDetectorsCoreDDResultGetQueryRangeForURLification(a1);
}

uint64_t PAL::initDataDetectorsCoreDDURLStringForResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (PAL::initDataDetectorsCoreDDURLStringForResult(__DDResult *,NSString *,DDURLifierPhoneNumberDetectionTypes,NSDate *,NSTimeZone *)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDURLStringForResult(__DDResult *,NSString *,DDURLifierPhoneNumberDetectionTypes,NSDate *,NSTimeZone *)::once, &__block_literal_global_27_0);
  return PAL::softLinkDataDetectorsCoreDDURLStringForResult(a1, a2, a3, a4, a5);
}

uint64_t PAL::initDataDetectorsCoreDDURLTapAndHoldSchemes(PAL *this)
{
  if (PAL::initDataDetectorsCoreDDURLTapAndHoldSchemes(void)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDURLTapAndHoldSchemes(void)::once, &__block_literal_global_29_0);
  return PAL::softLinkDataDetectorsCoreDDURLTapAndHoldSchemes((PAL *)PAL::softLinkDataDetectorsCoreDDURLTapAndHoldSchemes);
}

uint64_t PAL::initDataDetectorsCoreDDShouldImmediatelyShowActionSheetForURL(PAL *this, NSURL *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initDataDetectorsCoreDDShouldImmediatelyShowActionSheetForURL(NSURL *)::once != -1)
  {
    dispatch_once(&PAL::initDataDetectorsCoreDDShouldImmediatelyShowActionSheetForURL(NSURL *)::once, &__block_literal_global_31);
    this = v2;
  }
  return PAL::softLinkDataDetectorsCoreDDShouldImmediatelyShowActionSheetForURL(this, (NSURL *)PAL::softLinkDataDetectorsCoreDDShouldImmediatelyShowActionSheetForURL);
}

uint64_t PAL::initDataDetectorsCoreDDShouldImmediatelyShowActionSheetForResult(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (PAL::initDataDetectorsCoreDDShouldImmediatelyShowActionSheetForResult(__DDResult *)::once != -1)
  {
    dispatch_once(&PAL::initDataDetectorsCoreDDShouldImmediatelyShowActionSheetForResult(__DDResult *)::once, &__block_literal_global_33_0);
    a1 = v1;
  }
  return PAL::softLinkDataDetectorsCoreDDShouldImmediatelyShowActionSheetForResult(a1);
}

uint64_t PAL::initDataDetectorsCoreDDShouldUseLightLinksForResult(uint64_t a1, uint64_t a2)
{
  if (PAL::initDataDetectorsCoreDDShouldUseLightLinksForResult(__DDResult *,BOOL)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDShouldUseLightLinksForResult(__DDResult *,BOOL)::once, &__block_literal_global_35_0);
  return PAL::softLinkDataDetectorsCoreDDShouldUseLightLinksForResult(a1, a2);
}

uint64_t PAL::initDataDetectorsCoreDDBinderParsecSourceKey(PAL *this)
{
  if (qword_1ECE7E2A8 != -1)
    dispatch_once(&qword_1ECE7E2A8, &__block_literal_global_37);
  return qword_1ECE7E2B0;
}

uint64_t PAL::initDataDetectorsCoreDDBinderHttpURLKey(PAL *this)
{
  if (qword_1ECE7E2B8 != -1)
    dispatch_once(&qword_1ECE7E2B8, &__block_literal_global_39_0);
  return qword_1ECE7E2C0;
}

uint64_t PAL::initDataDetectorsCoreDDBinderWebURLKey(PAL *this)
{
  if (qword_1ECE7E2C8 != -1)
    dispatch_once(&qword_1ECE7E2C8, &__block_literal_global_41_0);
  return qword_1ECE7E2D0;
}

uint64_t PAL::initDataDetectorsCoreDDBinderMailURLKey(PAL *this)
{
  if (qword_1ECE7E2D8 != -1)
    dispatch_once(&qword_1ECE7E2D8, &__block_literal_global_43);
  return qword_1ECE7E2E0;
}

uint64_t PAL::initDataDetectorsCoreDDBinderGenericURLKey(PAL *this)
{
  if (qword_1ECE7E2E8 != -1)
    dispatch_once(&qword_1ECE7E2E8, &__block_literal_global_45_0);
  return qword_1ECE7E2F0;
}

uint64_t PAL::initDataDetectorsCoreDDBinderEmailKey(PAL *this)
{
  if (qword_1ECE7E2F8 != -1)
    dispatch_once(&qword_1ECE7E2F8, &__block_literal_global_47_0);
  return qword_1ECE7E300;
}

uint64_t PAL::initDataDetectorsCoreDDBinderTrackingNumberKey(PAL *this)
{
  if (qword_1ECE7E308 != -1)
    dispatch_once(&qword_1ECE7E308, &__block_literal_global_49);
  return qword_1ECE7E310;
}

uint64_t PAL::initDataDetectorsCoreDDBinderFlightInformationKey(PAL *this)
{
  if (qword_1ECE7E318 != -1)
    dispatch_once(&qword_1ECE7E318, &__block_literal_global_51_0);
  return qword_1ECE7E320;
}

uint64_t PAL::initDataDetectorsCoreDDBinderSignatureBlockKey(PAL *this)
{
  if (qword_1ECE7E328 != -1)
    dispatch_once(&qword_1ECE7E328, &__block_literal_global_53_0);
  return qword_1ECE7E330;
}

uint64_t PAL::get_DataDetectorsCore_DDScannerCopyResultsOptionsForPassiveUse(PAL *this)
{
  if (qword_1ECE7E290 != -1)
    dispatch_once(&qword_1ECE7E290, &__block_literal_global_8);
  return qword_1ECE7E288;
}

uint64_t ___ZN3PAL62get_DataDetectorsCore_DDScannerCopyResultsOptionsForPassiveUseEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScannerCopyResultsOptionsForPassiveUse");
    if (result)
    {
LABEL_3:
      qword_1ECE7E288 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E280, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScannerCopyResultsOptionsForPassiveUse");
    if (result)
      goto LABEL_3;
  }
  result = 63;
  __break(0xC471u);
  return result;
}

uint64_t PAL::initDataDetectorsCoreDDScannerEnableOptionalSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (PAL::initDataDetectorsCoreDDScannerEnableOptionalSource(__DDScanner *,long,unsigned char)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDScannerEnableOptionalSource(__DDScanner *,long,unsigned char)::once, &__block_literal_global_55);
  return PAL::softLinkDataDetectorsCoreDDScannerEnableOptionalSource(a1, a2, a3);
}

uint64_t PAL::initDataDetectorsCoreDDResultIsPastDate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (PAL::initDataDetectorsCoreDDResultIsPastDate(__DDResult *,__CFDate const*,__CFTimeZone const*)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDResultIsPastDate(__DDResult *,__CFDate const*,__CFTimeZone const*)::once, &__block_literal_global_57_0);
  return PAL::softLinkDataDetectorsCoreDDResultIsPastDate(a1, a2, a3);
}

uint64_t PAL::initDataDetectorsCoreDDScannerCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (PAL::initDataDetectorsCoreDDScannerCreate(DDScannerType,long,__CFError **)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDScannerCreate(DDScannerType,long,__CFError **)::once, &__block_literal_global_59_0);
  return PAL::softLinkDataDetectorsCoreDDScannerCreate(a1, a2, a3);
}

uint64_t PAL::initDataDetectorsCoreDDScannerScanQuery(uint64_t a1, uint64_t a2)
{
  if (PAL::initDataDetectorsCoreDDScannerScanQuery(__DDScanner *,__DDScanQuery *)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDScannerScanQuery(__DDScanner *,__DDScanQuery *)::once, &__block_literal_global_61);
  return PAL::softLinkDataDetectorsCoreDDScannerScanQuery(a1, a2);
}

uint64_t PAL::initDataDetectorsCoreDDScanQueryCreate(PAL *this, const __CFAllocator *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initDataDetectorsCoreDDScanQueryCreate(__CFAllocator const*)::once != -1)
  {
    dispatch_once(&PAL::initDataDetectorsCoreDDScanQueryCreate(__CFAllocator const*)::once, &__block_literal_global_63_0);
    this = v2;
  }
  return PAL::softLinkDataDetectorsCoreDDScanQueryCreate(this, (const __CFAllocator *)PAL::softLinkDataDetectorsCoreDDScanQueryCreate);
}

uint64_t PAL::initDataDetectorsCoreDDScanQueryCreateFromString(PAL *this, const __CFAllocator *a2, const __CFString *a3, CFRange a4)
{
  CFIndex location;
  CFRange v9;

  location = a4.location;
  if (PAL::initDataDetectorsCoreDDScanQueryCreateFromString(__CFAllocator const*,__CFString const*,CFRange)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDScanQueryCreateFromString(__CFAllocator const*,__CFString const*,CFRange)::once, &__block_literal_global_65_0);
  v9.length = (CFIndex)PAL::softLinkDataDetectorsCoreDDScanQueryCreateFromString;
  v9.location = location;
  return PAL::softLinkDataDetectorsCoreDDScanQueryCreateFromString(this, a2, a3, v9);
}

uint64_t PAL::initDataDetectorsCoreDDScannerCopyResultsWithOptions(uint64_t a1, uint64_t a2)
{
  if (PAL::initDataDetectorsCoreDDScannerCopyResultsWithOptions(__DDScanner *,long)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDScannerCopyResultsWithOptions(__DDScanner *,long)::once, &__block_literal_global_67);
  return PAL::softLinkDataDetectorsCoreDDScannerCopyResultsWithOptions(a1, a2);
}

uint64_t PAL::initDataDetectorsCoreDDScannerSetQOS(uint64_t a1, uint64_t a2)
{
  if (PAL::initDataDetectorsCoreDDScannerSetQOS(__DDScanner *,__DDQOS)::once != -1)
    dispatch_once(&PAL::initDataDetectorsCoreDDScannerSetQOS(__DDScanner *,__DDQOS)::once, &__block_literal_global_69_0);
  return PAL::softLinkDataDetectorsCoreDDScannerSetQOS(a1, a2);
}

uint64_t ___ZN3PALL36initDataDetectorsCoreDDResultGetTypeEP10__DDResult_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDResultGetType");
  PAL::softLinkDataDetectorsCoreDDResultGetType = (uint64_t (*)(_QWORD))result;
  if (!result)
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL40initDataDetectorsCoreDDResultGetCategoryEP10__DDResult_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDResultGetCategory");
  PAL::softLinkDataDetectorsCoreDDResultGetCategory = (uint64_t (*)(_QWORD))result;
  if (!result)
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL47initDataDetectorsCoreDDScanQueryAddTextFragmentEP13__DDScanQueryPK10__CFString7CFRangePv20__DDTextFragmentType22__DDTextCoalescingType_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScanQueryAddTextFragment");
  PAL::softLinkDataDetectorsCoreDDScanQueryAddTextFragment = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL44initDataDetectorsCoreDDScanQueryAddSeparatorEP13__DDScanQuery22__DDTextCoalescingType_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScanQueryAddSeparator");
  PAL::softLinkDataDetectorsCoreDDScanQueryAddSeparator = (uint64_t (*)(_QWORD, _QWORD))result;
  if (!result)
  {
    result = 43;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL44initDataDetectorsCoreDDScanQueryAddLineBreakEP13__DDScanQuery_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScanQueryAddLineBreak");
  PAL::softLinkDataDetectorsCoreDDScanQueryAddLineBreak = (uint64_t (*)(_QWORD))result;
  if (!result)
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL51initDataDetectorsCoreDDScanQueryGetFragmentMetaDataEP13__DDScanQueryl_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScanQueryGetFragmentMetaData");
  PAL::softLinkDataDetectorsCoreDDScanQueryGetFragmentMetaData = (uint64_t (*)(_QWORD, _QWORD))result;
  if (!result)
  {
    result = 45;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL42initDataDetectorsCoreDDResultHasPropertiesEP10__DDResultl_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDResultHasProperties");
  PAL::softLinkDataDetectorsCoreDDResultHasProperties = (uint64_t (*)(_QWORD, _QWORD))result;
  if (!result)
  {
    result = 46;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL42initDataDetectorsCoreDDResultGetSubResultsEP10__DDResult_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDResultGetSubResults");
  PAL::softLinkDataDetectorsCoreDDResultGetSubResults = (uint64_t (*)(_QWORD))result;
  if (!result)
  {
    result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL57initDataDetectorsCoreDDResultGetQueryRangeForURLificationEP10__DDResult_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDResultGetQueryRangeForURLification");
  PAL::softLinkDataDetectorsCoreDDResultGetQueryRangeForURLification = (uint64_t (*)(_QWORD))result;
  if (!result)
  {
    result = 48;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL41initDataDetectorsCoreDDURLStringForResultEP10__DDResultP8NSString35DDURLifierPhoneNumberDetectionTypesP6NSDateP10NSTimeZone_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDURLStringForResult");
  PAL::softLinkDataDetectorsCoreDDURLStringForResult = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 49;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL43initDataDetectorsCoreDDURLTapAndHoldSchemesEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDURLTapAndHoldSchemes");
  PAL::softLinkDataDetectorsCoreDDURLTapAndHoldSchemes = (uint64_t (*)(PAL *__hidden))result;
  if (!result)
  {
    result = 50;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL61initDataDetectorsCoreDDShouldImmediatelyShowActionSheetForURLEP5NSURL_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDShouldImmediatelyShowActionSheetForURL");
  PAL::softLinkDataDetectorsCoreDDShouldImmediatelyShowActionSheetForURL = (uint64_t (*)(PAL *__hidden, NSURL *))result;
  if (!result)
  {
    result = 51;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL64initDataDetectorsCoreDDShouldImmediatelyShowActionSheetForResultEP10__DDResult_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDShouldImmediatelyShowActionSheetForResult");
  PAL::softLinkDataDetectorsCoreDDShouldImmediatelyShowActionSheetForResult = (uint64_t (*)(_QWORD))result;
  if (!result)
  {
    result = 52;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL51initDataDetectorsCoreDDShouldUseLightLinksForResultEP10__DDResultb_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDShouldUseLightLinksForResult");
  PAL::softLinkDataDetectorsCoreDDShouldUseLightLinksForResult = (uint64_t (*)(_QWORD, _QWORD))result;
  if (!result)
  {
    result = 53;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL44initDataDetectorsCoreDDBinderParsecSourceKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderParsecSourceKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E2B0 = *(_QWORD *)result;
      PAL::get_DataDetectorsCore_DDBinderParsecSourceKey[0] = PAL::pointerDataDetectorsCoreDDBinderParsecSourceKeyFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E280, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderParsecSourceKey");
    if (result)
      goto LABEL_3;
  }
  result = 54;
  __break(0xC471u);
  return result;
}

uint64_t PAL::pointerDataDetectorsCoreDDBinderParsecSourceKeyFunction(PAL *this)
{
  return qword_1ECE7E2B0;
}

uint64_t ___ZN3PALL39initDataDetectorsCoreDDBinderHttpURLKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderHttpURLKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E2C0 = *(_QWORD *)result;
      PAL::get_DataDetectorsCore_DDBinderHttpURLKey[0] = PAL::pointerDataDetectorsCoreDDBinderHttpURLKeyFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E280, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderHttpURLKey");
    if (result)
      goto LABEL_3;
  }
  result = 55;
  __break(0xC471u);
  return result;
}

uint64_t PAL::pointerDataDetectorsCoreDDBinderHttpURLKeyFunction(PAL *this)
{
  return qword_1ECE7E2C0;
}

uint64_t ___ZN3PALL38initDataDetectorsCoreDDBinderWebURLKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderWebURLKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E2D0 = *(_QWORD *)result;
      PAL::get_DataDetectorsCore_DDBinderWebURLKey[0] = PAL::pointerDataDetectorsCoreDDBinderWebURLKeyFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E280, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderWebURLKey");
    if (result)
      goto LABEL_3;
  }
  result = 56;
  __break(0xC471u);
  return result;
}

uint64_t PAL::pointerDataDetectorsCoreDDBinderWebURLKeyFunction(PAL *this)
{
  return qword_1ECE7E2D0;
}

uint64_t ___ZN3PALL39initDataDetectorsCoreDDBinderMailURLKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderMailURLKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E2E0 = *(_QWORD *)result;
      PAL::get_DataDetectorsCore_DDBinderMailURLKey[0] = PAL::pointerDataDetectorsCoreDDBinderMailURLKeyFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E280, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderMailURLKey");
    if (result)
      goto LABEL_3;
  }
  result = 57;
  __break(0xC471u);
  return result;
}

uint64_t PAL::pointerDataDetectorsCoreDDBinderMailURLKeyFunction(PAL *this)
{
  return qword_1ECE7E2E0;
}

uint64_t ___ZN3PALL42initDataDetectorsCoreDDBinderGenericURLKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderGenericURLKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E2F0 = *(_QWORD *)result;
      PAL::get_DataDetectorsCore_DDBinderGenericURLKey[0] = PAL::pointerDataDetectorsCoreDDBinderGenericURLKeyFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E280, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderGenericURLKey");
    if (result)
      goto LABEL_3;
  }
  result = 58;
  __break(0xC471u);
  return result;
}

uint64_t PAL::pointerDataDetectorsCoreDDBinderGenericURLKeyFunction(PAL *this)
{
  return qword_1ECE7E2F0;
}

uint64_t ___ZN3PALL37initDataDetectorsCoreDDBinderEmailKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderEmailKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E300 = *(_QWORD *)result;
      PAL::get_DataDetectorsCore_DDBinderEmailKey[0] = PAL::pointerDataDetectorsCoreDDBinderEmailKeyFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E280, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderEmailKey");
    if (result)
      goto LABEL_3;
  }
  result = 59;
  __break(0xC471u);
  return result;
}

uint64_t PAL::pointerDataDetectorsCoreDDBinderEmailKeyFunction(PAL *this)
{
  return qword_1ECE7E300;
}

uint64_t ___ZN3PALL46initDataDetectorsCoreDDBinderTrackingNumberKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderTrackingNumberKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E310 = *(_QWORD *)result;
      PAL::get_DataDetectorsCore_DDBinderTrackingNumberKey[0] = PAL::pointerDataDetectorsCoreDDBinderTrackingNumberKeyFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E280, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderTrackingNumberKey");
    if (result)
      goto LABEL_3;
  }
  result = 60;
  __break(0xC471u);
  return result;
}

uint64_t PAL::pointerDataDetectorsCoreDDBinderTrackingNumberKeyFunction(PAL *this)
{
  return qword_1ECE7E310;
}

uint64_t ___ZN3PALL49initDataDetectorsCoreDDBinderFlightInformationKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderFlightInformationKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E320 = *(_QWORD *)result;
      PAL::get_DataDetectorsCore_DDBinderFlightInformationKey[0] = PAL::pointerDataDetectorsCoreDDBinderFlightInformationKeyFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E280, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderFlightInformationKey");
    if (result)
      goto LABEL_3;
  }
  result = 61;
  __break(0xC471u);
  return result;
}

uint64_t PAL::pointerDataDetectorsCoreDDBinderFlightInformationKeyFunction(PAL *this)
{
  return qword_1ECE7E320;
}

uint64_t ___ZN3PALL46initDataDetectorsCoreDDBinderSignatureBlockKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderSignatureBlockKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E330 = *(_QWORD *)result;
      PAL::get_DataDetectorsCore_DDBinderSignatureBlockKey = PAL::pointerDataDetectorsCoreDDBinderSignatureBlockKeyFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E280, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDBinderSignatureBlockKey");
    if (result)
      goto LABEL_3;
  }
  result = 62;
  __break(0xC471u);
  return result;
}

uint64_t PAL::pointerDataDetectorsCoreDDBinderSignatureBlockKeyFunction(PAL *this)
{
  return qword_1ECE7E330;
}

uint64_t ___ZN3PALL50initDataDetectorsCoreDDScannerEnableOptionalSourceEP11__DDScannerlh_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScannerEnableOptionalSource");
  PAL::softLinkDataDetectorsCoreDDScannerEnableOptionalSource = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 64;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL39initDataDetectorsCoreDDResultIsPastDateEP10__DDResultPK8__CFDatePK12__CFTimeZone_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDResultIsPastDate");
  PAL::softLinkDataDetectorsCoreDDResultIsPastDate[0] = (uint64_t (*)())result;
  if (!result)
  {
    result = 66;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL36initDataDetectorsCoreDDScannerCreateE13DDScannerTypelPP9__CFError_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScannerCreate");
  PAL::softLinkDataDetectorsCoreDDScannerCreate = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 67;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL39initDataDetectorsCoreDDScannerScanQueryEP11__DDScannerP13__DDScanQuery_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScannerScanQuery");
  PAL::softLinkDataDetectorsCoreDDScannerScanQuery = (uint64_t (*)())result;
  if (!result)
  {
    result = 68;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL38initDataDetectorsCoreDDScanQueryCreateEPK13__CFAllocator_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScanQueryCreate");
  PAL::softLinkDataDetectorsCoreDDScanQueryCreate = (uint64_t (*)(PAL *__hidden, const __CFAllocator *))result;
  if (!result)
  {
    result = 69;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL48initDataDetectorsCoreDDScanQueryCreateFromStringEPK13__CFAllocatorPK10__CFString7CFRange_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScanQueryCreateFromString");
  PAL::softLinkDataDetectorsCoreDDScanQueryCreateFromString = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, const __CFString *, CFRange))result;
  if (!result)
  {
    result = 70;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL52initDataDetectorsCoreDDScannerCopyResultsWithOptionsEP11__DDScannerl_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScannerCopyResultsWithOptions");
  PAL::softLinkDataDetectorsCoreDDScannerCopyResultsWithOptions[0] = (uint64_t (*)())result;
  if (!result)
  {
    result = 71;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL36initDataDetectorsCoreDDScannerSetQOSEP11__DDScanner7__DDQOS_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 != -1)
    dispatch_once(&qword_1ECE7E280, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E278, "DDScannerSetQOS");
  PAL::softLinkDataDetectorsCoreDDScannerSetQOS = (uint64_t (*)(_QWORD, _QWORD))result;
  if (!result)
  {
    result = 74;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::DataDetectorsUILibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL22DataDetectorsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7E340 != -1)
    dispatch_once(&qword_1ECE7E340, block);
  return _MergedGlobals_63;
}

uint64_t ___ZN3PAL22DataDetectorsUILibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/DataDetectorsUI.framework/DataDetectorsUI", 2);
  _MergedGlobals_63 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initDDContextMenuAction(PAL *this)
{
  if (qword_1ECE7E388 != -1)
    dispatch_once(&qword_1ECE7E388, &__block_literal_global_10_2);
  return qword_1ECE7E390;
}

uint64_t PAL::initDDContextMenuConfiguration(PAL *this)
{
  if (qword_1ECE7E398 != -1)
    dispatch_once(&qword_1ECE7E398, &__block_literal_global_12_2);
  return qword_1ECE7E3A0;
}

uint64_t PAL::initDDDetectionController(PAL *this)
{
  if (qword_1ECE7E3A8 != -1)
    dispatch_once(&qword_1ECE7E3A8, &__block_literal_global_14_2);
  return qword_1ECE7E3B0;
}

uint64_t PAL::get_DataDetectorsUI_kDataDetectorsLeadingText(PAL *this)
{
  if (qword_1ECE7E350 != -1)
    dispatch_once(&qword_1ECE7E350, &__block_literal_global_9);
  return qword_1ECE7E348;
}

uint64_t ___ZN3PAL45get_DataDetectorsUI_kDataDetectorsLeadingTextEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL22DataDetectorsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E340 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_63, "kDataDetectorsLeadingText");
    if (result)
    {
LABEL_3:
      qword_1ECE7E348 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E340, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_63, "kDataDetectorsLeadingText");
    if (result)
      goto LABEL_3;
  }
  result = 41;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_DataDetectorsUI_kDataDetectorsReferenceDateKey(PAL *this)
{
  if (qword_1ECE7E360 != -1)
    dispatch_once(&qword_1ECE7E360, &__block_literal_global_4_3);
  return qword_1ECE7E358;
}

uint64_t ___ZN3PAL50get_DataDetectorsUI_kDataDetectorsReferenceDateKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL22DataDetectorsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E340 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_63, "kDataDetectorsReferenceDateKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E358 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E340, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_63, "kDataDetectorsReferenceDateKey");
    if (result)
      goto LABEL_3;
  }
  result = 42;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_DataDetectorsUI_kDataDetectorsTrailingText(PAL *this)
{
  if (qword_1ECE7E370 != -1)
    dispatch_once(&qword_1ECE7E370, &__block_literal_global_6_3);
  return qword_1ECE7E368;
}

uint64_t ___ZN3PAL46get_DataDetectorsUI_kDataDetectorsTrailingTextEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL22DataDetectorsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E340 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_63, "kDataDetectorsTrailingText");
    if (result)
    {
LABEL_3:
      qword_1ECE7E368 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E340, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_63, "kDataDetectorsTrailingText");
    if (result)
      goto LABEL_3;
  }
  result = 43;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_DataDetectorsUI_kDDContextMenuWantsPreviewKey(PAL *this)
{
  if (qword_1ECE7E380 != -1)
    dispatch_once(&qword_1ECE7E380, &__block_literal_global_8_2);
  return qword_1ECE7E378;
}

uint64_t ___ZN3PAL49get_DataDetectorsUI_kDDContextMenuWantsPreviewKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL22DataDetectorsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E340 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_63, "kDDContextMenuWantsPreviewKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E378 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E340, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_63, "kDDContextMenuWantsPreviewKey");
    if (result)
      goto LABEL_3;
  }
  result = 44;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PALL23initDDContextMenuActionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL22DataDetectorsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E340 == -1)
  {
    result = (uint64_t)objc_getClass("DDContextMenuAction");
    qword_1ECE7E390 = result;
    if (result)
    {
LABEL_3:
      PAL::getDDContextMenuActionClass = (uint64_t)PAL::DDContextMenuActionFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E340, block);
    result = (uint64_t)objc_getClass("DDContextMenuAction");
    qword_1ECE7E390 = result;
    if (result)
      goto LABEL_3;
  }
  result = 36;
  __break(0xC471u);
  return result;
}

uint64_t PAL::DDContextMenuActionFunction(PAL *this)
{
  return qword_1ECE7E390;
}

uint64_t ___ZN3PALL30initDDContextMenuConfigurationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL22DataDetectorsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E340 == -1)
  {
    result = (uint64_t)objc_getClass("DDContextMenuConfiguration");
    qword_1ECE7E3A0 = result;
    if (result)
    {
LABEL_3:
      PAL::getDDContextMenuConfigurationClass = (uint64_t)PAL::DDContextMenuConfigurationFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E340, block);
    result = (uint64_t)objc_getClass("DDContextMenuConfiguration");
    qword_1ECE7E3A0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 37;
  __break(0xC471u);
  return result;
}

uint64_t PAL::DDContextMenuConfigurationFunction(PAL *this)
{
  return qword_1ECE7E3A0;
}

uint64_t ___ZN3PALL25initDDDetectionControllerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL22DataDetectorsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E340 == -1)
  {
    result = (uint64_t)objc_getClass("DDDetectionController");
    qword_1ECE7E3B0 = result;
    if (result)
    {
LABEL_3:
      PAL::getDDDetectionControllerClass = (uint64_t)PAL::DDDetectionControllerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E340, block);
    result = (uint64_t)objc_getClass("DDDetectionController");
    qword_1ECE7E3B0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 40;
  __break(0xC471u);
  return result;
}

uint64_t PAL::DDDetectionControllerFunction(PAL *this)
{
  return qword_1ECE7E3B0;
}

uint64_t PAL::deviceClassIsVision(PAL *this)
{
  return 0;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::deviceName(void)::$_0 &&>>()
{
  uint64_t v0;
  const void *v1;

  v0 = MGCopyAnswer();
  v1 = (const void *)PAL::deviceName(void)::deviceName;
  PAL::deviceName(void)::deviceName = v0;
  if (v1)
    CFRelease(v1);
}

uint64_t PAL::gb18030(PAL *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&PAL::gb18030(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PAL::gb18030(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::gb18030(void)::$_0 &&>>);
  }
  return PAL::gb18030(void)::array;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::jis0208(void)::$_0 &&>>()
{
  void *v0;
  uint64_t v1;
  __int16 v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  BOOL v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 *v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;

  v0 = (void *)operator new();
  bzero(v0, 0x78B0uLL);
  PAL::jis0208(void)::array = (uint64_t)v0;
  v1 = ucnv_open();
  v2 = 0;
  v3 = 0;
  v4 = 0;
LABEL_3:
  v5 = 0;
  v33 = v4;
  while (1)
  {
    result = ucnv_toUnicode();
    if (v3 >> 2 >= 0x78B)
      break;
    v7 = (_WORD *)(PAL::jis0208(void)::array + 4 * v3++);
    *v7 = v2 + v5;
    v7[1] = 0;
    if (++v5 == 94)
    {
      v4 = v33 + 1;
      v2 += 94;
      if (v33 != 93)
        goto LABEL_3;
      v8 = PAL::jis0208(void)::array;
      if (v3 <= 0x1E2C)
        v9 = 7724;
      else
        v9 = v3;
      v10 = v9 - v3;
      if (v9 - v3 >= 0x183)
        v11 = 387;
      else
        v11 = v9 - v3;
      v12 = &PAL::jis0208Extras;
      if (v11 > 0xF)
      {
        v13 = 4 * v3;
        v14 = PAL::jis0208(void)::array + 2;
        if (v10 >= 0x183)
          v10 = 387;
        v15 = 4 * v10;
        v16 = v14 + v13 + v15;
        result = (uint64_t)&PAL::jis0208Extras + 2;
        v17 = (char *)&PAL::jis0208Extras + v15 + 2;
        v19 = v14 + v13 < (unint64_t)&PAL::jis0208Extras + v15 + 4
           && PAL::jis0208(void)::array + v13 + v15 + 4 > (unint64_t)&PAL::jis0208Extras + 2;
        v20 = v16 <= (unint64_t)&PAL::jis0208Extras
           || PAL::jis0208(void)::array + 4 * v3 >= (unint64_t)v17;
        if (v20 && !v19)
        {
          v21 = v11 + 1;
          v22 = v21 & 7;
          if ((v21 & 7) == 0)
            v22 = 8;
          v23 = v21 - v22;
          v24 = v3 + v23;
          v25 = (__int128 *)((char *)&PAL::jis0208Extras + 4 * v23);
          v26 = (__int128 *)(PAL::jis0208(void)::array + 4 * v3);
          do
          {
            v27 = *v12;
            v28 = v12[1];
            v12 += 2;
            *v26 = v27;
            v26[1] = v28;
            v26 += 2;
            v23 -= 8;
          }
          while (v23);
          v3 = v24;
          v12 = v25;
        }
      }
      v29 = v3 - 7724;
      v30 = v8 + 4 * v3 + 2;
      v31 = v9 - v3;
      while (v31)
      {
        v32 = *(_DWORD *)v12;
        v12 = (__int128 *)((char *)v12 + 4);
        *(_DWORD *)(v30 - 2) = v32;
        ++v29;
        v30 += 4;
        --v31;
        if (v12 == (__int128 *)&word_196876830)
        {
          if (v29)
            goto LABEL_42;
          if (v1)
            return ucnv_close();
          return result;
        }
      }
      break;
    }
  }
  __break(1u);
LABEL_42:
  result = 1094;
  __break(0xC471u);
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::jis0212(void)::$_0 &&>>()
{
  void *v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t result;
  uint64_t v8;

  v0 = (void *)operator new();
  bzero(v0, 0x5ECCuLL);
  PAL::jis0212(void)::array = (uint64_t)v0;
  v1 = ucnv_open();
  v2 = 0;
  v3 = 0;
  v4 = 0;
LABEL_3:
  v5 = 0;
  v8 = v3;
  while (1)
  {
    result = ucnv_toUnicode();
    if ((unsigned __int16)((unsigned __int16)(v2 + v5) >> 2) > 0x786uLL)
      goto LABEL_5;
    if (v4 >= 0x17B3)
      break;
    v6 = (_WORD *)(PAL::jis0212(void)::array + 4 * v4++);
    *v6 = v2 + v5;
    v6[1] = 0;
LABEL_5:
    if (++v5 == 94)
    {
      v3 = v8 + 1;
      v2 += 94;
      if (v8 == 93)
        goto LABEL_10;
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_10:
  if (v4 == 6067)
  {
    if (v1)
      return ucnv_close();
  }
  else
  {
    result = 1900;
    __break(0xC471u);
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::big5(void)::$_0 &&>>()
{
  char *v0;
  uint64_t i;
  char *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned __int16 *v18;
  unint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unsigned int v25;
  uint64_t v26;

  v0 = (char *)operator new();
  bzero(v0, 0x244F0uLL);
  for (i = 0; i != 148720; i += 16)
  {
    v2 = &v0[i];
    *(_WORD *)v2 = 0;
    *((_WORD *)v2 + 4) = 0;
    *((_DWORD *)v2 + 1) = 0;
    *((_DWORD *)v2 + 3) = 0;
  }
  PAL::big5(void)::array = (uint64_t)v0;
  result = ucnv_open();
  v4 = result;
  v5 = 0;
  v6 = 0;
  do
  {
    v26 = v6;
    v7 = &word_196876830[2 * v6];
    v8 = (unsigned __int16)*v7;
    v9 = (unsigned __int16)v7[1];
    if (v8 < v9)
    {
      if (v5 <= 0x489E)
        v10 = 18590;
      else
        v10 = v5;
      v11 = v5 - v8 + v9;
      v12 = 8 * v5;
      while (1)
      {
        result = ucnv_toUnicode();
        if (v10 == v5)
          break;
        ++v5;
        v13 = PAL::big5(void)::array + v12;
        *(_WORD *)v13 = v8;
        *(_DWORD *)(v13 + 4) = 0;
        LOWORD(v8) = v8 + 1;
        v12 += 8;
        if (v11 == (unsigned __int16)v5)
          goto LABEL_4;
      }
LABEL_32:
      __break(1u);
      return result;
    }
LABEL_4:
    v6 = v26 + 1;
  }
  while (v26 != 59);
  v14 = PAL::big5(void)::array;
  v15 = &PAL::big5Extras;
  while (2)
  {
    v16 = (unsigned __int16)*v15;
    v17 = 18590;
    v18 = (unsigned __int16 *)v14;
    while (1)
    {
      v19 = v17 >> 1;
      v20 = &v18[4 * (v17 >> 1)];
      v21 = *v20;
      if (v21 >= v16)
        break;
      v18 = v20 + 4;
      v19 = v17 + ~v19;
LABEL_17:
      v17 = v19;
      v20 = v18;
      if (!v19)
        goto LABEL_14;
    }
    if (v16 < v21)
      goto LABEL_17;
    if (v17 >= 2)
    {
      v20 = v18;
      do
      {
        v22 = v19 >> 1;
        v23 = &v20[4 * (v19 >> 1)];
        v25 = *v23;
        v24 = v23 + 4;
        v19 += ~(v19 >> 1);
        if (v25 < v16)
          v20 = v24;
        else
          v19 = v22;
      }
      while (v19);
    }
LABEL_14:
    *((_DWORD *)v20 + 1) = *((_DWORD *)v15 + 1);
    v15 += 4;
    if (v15 != (__int16 *)&qword_196880820)
      continue;
    break;
  }
  if (v5 != 18590)
  {
    result = 4925;
    __break(0xC471u);
    goto LABEL_32;
  }
  if (v4)
    return ucnv_close();
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::eucKR(void)::$_0 &&>>()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  unsigned __int16 v3;
  _WORD *v4;
  BOOL v5;
  uint64_t result;
  int v7;
  __int16 v8;
  unsigned __int16 v9;
  _WORD *v10;
  int v11;
  __int16 v12;
  unsigned __int16 v13;

  v0 = (void *)operator new();
  bzero(v0, 0x10A60uLL);
  PAL::eucKR(void)::array = (uint64_t)v0;
  v1 = ucnv_open();
  v2 = 0;
  v3 = 0;
  while (1)
  {
    result = ucnv_toUnicode();
    if (v13 == 65533)
      v7 = 0;
    else
      v7 = v3 & 0x7F00 | (v13 << 16);
    if (v13 == 65533)
      v8 = 0;
    else
      v8 = v3;
    if (v13 == 65533)
      goto LABEL_3;
    if (v2 >> 3 >= 0x853)
      break;
    v4 = (_WORD *)(PAL::eucKR(void)::array + 4 * v2++);
    *v4 = v8 | v7;
    v4[1] = HIWORD(v7);
LABEL_3:
    v5 = v3++ < 0x35CFu;
    if (!v5)
    {
      v9 = 13870;
      while (1)
      {
        result = ucnv_toUnicode();
        if (v13 == 65533)
          v11 = 0;
        else
          v11 = v9 & 0x7F00 | (v13 << 16);
        if (v13 == 65533)
          v12 = 0;
        else
          v12 = v9;
        if (v13 != 65533)
        {
          if (v2 >> 3 >= 0x853)
            goto LABEL_25;
          v10 = (_WORD *)(PAL::eucKR(void)::array + 4 * v2++);
          *v10 = v12 | v11;
          v10[1] = HIWORD(v11);
        }
        v5 = v9++ < 0x5CC5u;
        if (!v5)
          goto LABEL_26;
      }
    }
  }
LABEL_25:
  __break(1u);
LABEL_26:
  if (v2 == 17048)
  {
    if (v1)
      return ucnv_close();
  }
  else
  {
    result = 7098;
    __break(0xC471u);
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::gb18030(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t i;
  WTF::ICU *v2;
  uint64_t result;

  PAL::gb18030(void)::array = operator new();
  v0 = ucnv_open();
  for (i = 0; i != 23940; ++i)
  {
    v2 = (WTF::ICU *)ucnv_toUnicode();
    *(_WORD *)(PAL::gb18030(void)::array + 2 * i) = 0;
  }
  result = WTF::ICU::majorVersion(v2);
  if (result < 0x4A)
    *(_WORD *)(PAL::gb18030(void)::array + 13110) = 12288;
  if (v0)
    return ucnv_close();
  return result;
}

uint64_t PAL::fileSizeDescription@<X0>(_QWORD *a1@<X8>)
{
  WTF::AtomStringImpl *v3;
  const __CFString *v4;
  uint64_t result;
  uint64_t v6;

  v3 = (WTF::AtomStringImpl *)NSLocalizedFileSizeDescription();
  result = WTF::AtomStringImpl::add(v3, v4);
  *a1 = v6;
  return result;
}

uint64_t PAL::gunzip@<X0>(uint64_t this@<X0>, const unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  const unsigned __int8 *v4;
  uint64_t v5;
  uint8_t *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  int v19;
  compression_stream stream;

  v4 = a2 - 10;
  if ((unint64_t)a2 >= 0xA
    && (v5 = this, *(_BYTE *)this == 31)
    && *(unsigned __int8 *)(this + 1) == 139
    && *(_BYTE *)(this + 2) == 8
    && !*(_BYTE *)(this + 3)
    && (this = compression_stream_init(&stream, COMPRESSION_STREAM_DECODE, COMPRESSION_ZLIB), !(_DWORD)this))
  {
    v6 = 0;
    LODWORD(v7) = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    stream.dst_ptr = 0;
    stream.dst_size = 0;
    stream.src_ptr = (const uint8_t *)(v5 + 10);
    stream.src_size = (size_t)v4;
    while (1)
    {
      this = compression_stream_process(&stream, 1);
      if ((_DWORD)this)
        break;
      v10 += stream.dst_ptr - v6;
      v13 = (double)v10 * 1.5 + 1.0;
      v12 = v7;
      if (v13 > (double)v7)
      {
        v7 = (unint64_t)v13;
        if (v8 < (unint64_t)v13)
        {
          v14 = v8 + (v8 >> 2);
          if (v14 >= 0x10)
            v15 = v14 + 1;
          else
            v15 = 16;
          if (v15 <= v7)
            v8 = (unint64_t)v13;
          else
            v8 = v15;
          if (HIDWORD(v8))
          {
            __break(0xC471u);
            return this;
          }
          v16 = (char *)WTF::fastMalloc((WTF *)v8);
          v8 = v8;
          memcpy(v16, v9, v12);
          if (v9)
          {
            if (v16 == v9)
            {
              v8 = 0;
              v11 = 0;
            }
            else
            {
              v11 = v16;
            }
            WTF::fastFree((WTF *)v9, v17);
            v9 = v11;
          }
          else
          {
            v9 = v16;
          }
        }
        v12 = v7;
      }
      v6 = (uint8_t *)&v9[v10];
      stream.dst_ptr = (uint8_t *)&v9[v10];
      stream.dst_size = v12 - v10;
    }
    if ((_DWORD)this == 1)
    {
      this = compression_stream_destroy(&stream);
      if (!(_DWORD)this)
      {
        v19 = LODWORD(stream.dst_ptr) - (_DWORD)v9;
        *(_QWORD *)a3 = v9;
        *(_DWORD *)(a3 + 8) = v8;
        *(_DWORD *)(a3 + 12) = v19;
        return this;
      }
    }
    else
    {
      this = compression_stream_destroy(&stream);
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if (v9)
      return WTF::fastFree((WTF *)v9, v18);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return this;
}

void PAL::KillRing::yank(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ___ZN3PAL23LinkPresentationLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/LinkPresentation.framework/LinkPresentation", 2);
  PAL::LinkPresentationLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 31;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initLPLinkMetadata(PAL *this)
{
  if (qword_1ECE7E3C8 != -1)
    dispatch_once(&qword_1ECE7E3C8, &__block_literal_global_10);
  return qword_1ECE7E3D0;
}

uint64_t PAL::initLPFileMetadata(PAL *this)
{
  if (qword_1ECE7E3D8 != -1)
    dispatch_once(&qword_1ECE7E3D8, &__block_literal_global_4_4);
  return qword_1ECE7E3E0;
}

uint64_t PAL::initLPMetadataProvider(PAL *this)
{
  if (qword_1ECE7E3E8 != -1)
    dispatch_once(&qword_1ECE7E3E8, &__block_literal_global_6_4);
  return qword_1ECE7E3F0;
}

uint64_t ___ZN3PALL18initLPLinkMetadataEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL23LinkPresentationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_65 == -1)
  {
    result = (uint64_t)objc_getClass("LPLinkMetadata");
    qword_1ECE7E3D0 = result;
    if (result)
    {
LABEL_3:
      PAL::getLPLinkMetadataClass[0] = PAL::LPLinkMetadataFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_65, block);
    result = (uint64_t)objc_getClass("LPLinkMetadata");
    qword_1ECE7E3D0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 33;
  __break(0xC471u);
  return result;
}

uint64_t PAL::LPLinkMetadataFunction(PAL *this)
{
  return qword_1ECE7E3D0;
}

uint64_t ___ZN3PALL18initLPFileMetadataEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL23LinkPresentationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_65 == -1)
  {
    result = (uint64_t)objc_getClass("LPFileMetadata");
    qword_1ECE7E3E0 = result;
    if (result)
    {
LABEL_3:
      PAL::getLPFileMetadataClass = (uint64_t)PAL::LPFileMetadataFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_65, block);
    result = (uint64_t)objc_getClass("LPFileMetadata");
    qword_1ECE7E3E0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t PAL::LPFileMetadataFunction(PAL *this)
{
  return qword_1ECE7E3E0;
}

uint64_t ___ZN3PALL22initLPMetadataProviderEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL23LinkPresentationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_65 == -1)
  {
    result = (uint64_t)objc_getClass("LPMetadataProvider");
    qword_1ECE7E3F0 = result;
    if (result)
    {
LABEL_3:
      PAL::getLPMetadataProviderClass = (uint64_t)PAL::LPMetadataProviderFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_65, block);
    result = (uint64_t)objc_getClass("LPMetadataProvider");
    qword_1ECE7E3F0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 37;
  __break(0xC471u);
  return result;
}

uint64_t PAL::LPMetadataProviderFunction(PAL *this)
{
  return qword_1ECE7E3F0;
}

uint64_t LockdownModeManagerFunction(void)
{
  return qword_1ECE7E408;
}

uint64_t WTF::BlockPtr<void ()(int)>::fromCallable<PAL::registerNotifyCallback(WTF::ASCIILiteral,WTF::Function<void ()(void)> &&)::$_0>(PAL::registerNotifyCallback(WTF::ASCIILiteral,WTF::Function<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(int)>::fromCallable<PAL::registerNotifyCallback(WTF::ASCIILiteral,WTF::Function<void ()(void)> &&)::$_0>(PAL::registerNotifyCallback(WTF::ASCIILiteral,WTF::Function<void ()(void)> &&)::$_0)::{lambda(void *,int)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

uint64_t PAL::get_ManagedConfiguration_MCFeatureDefinitionLookupAllowed(PAL *this)
{
  if (qword_1ECE7E428 != -1)
    dispatch_once(&qword_1ECE7E428, &__block_literal_global_11);
  return qword_1ECE7E420;
}

uint64_t ___ZN3PAL57get_ManagedConfiguration_MCFeatureDefinitionLookupAllowedEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL27ManagedConfigurationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E418 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_67, "MCFeatureDefinitionLookupAllowed");
    if (result)
    {
LABEL_3:
      qword_1ECE7E420 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E418, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_67, "MCFeatureDefinitionLookupAllowed");
    if (result)
      goto LABEL_3;
  }
  result = 36;
  __break(0xC471u);
  return result;
}

uint64_t PAL::toMediaTime(PAL *this, const CMTime *a2)
{
  int v2;
  char v3;
  char v4;

  v2 = *((_DWORD *)this + 3);
  v3 = v2 & 1;
  if ((~v2 & 3) == 0)
    v3 = v2 & 1 | 2;
  if ((~v2 & 5) == 0)
    v3 |= 4u;
  if ((~v2 & 9) == 0)
    v3 |= 8u;
  if ((~v2 & 0x11) != 0)
    v4 = v3;
  else
    v4 = v3 | 0x10;
  if ((v4 & 1) == 0 || *((_DWORD *)this + 2) != 0)
    return *(_QWORD *)this;
  else
    return *(uint64_t *)this >> 63;
}

uint64_t PAL::toCMTime@<X0>(PAL *this@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  double v8;

  if ((*((_BYTE *)this + 12) & 0x20) != 0)
  {
    WTF::MediaTime::toDouble(this);
    result = PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*((unsigned int *)this + 2), v8, v7);
  }
  else
  {
    result = PAL::softLinkCoreMediaCMTimeMake(*(PAL **)this, *((unsigned int *)this + 2), a2);
  }
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a3 + 12) & 0xFFFFFFFE | *((_BYTE *)this + 12) & 1 | *((_BYTE *)this + 12) & 0xE;
  return result;
}

uint64_t PAL::MediaToolboxLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  v3 = (char)this;
  if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
  return PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary;
}

BOOL PAL::init_MediaToolbox_FigPhotoDecompressionSetHardwareCutoff(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  v3 = 0;
  if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
  PAL::softLinkMediaToolboxFigPhotoDecompressionSetHardwareCutoff = (uint64_t)dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "FigPhotoDecompressionSetHardwareCutoff");
  return PAL::softLinkMediaToolboxFigPhotoDecompressionSetHardwareCutoff != 0;
}

BOOL PAL::canLoad_MediaToolbox_FigPhotoDecompressionSetHardwareCutoff(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7E441 == 1)
    return _MergedGlobals_68 != 0;
  result = PAL::init_MediaToolbox_FigPhotoDecompressionSetHardwareCutoff(this);
  _MergedGlobals_68 = result;
  byte_1ECE7E441 = 1;
  return result;
}

uint64_t PAL::initMediaToolboxFigVideoTargetCreateWithVideoReceiverEndpointID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (PAL::initMediaToolboxFigVideoTargetCreateWithVideoReceiverEndpointID(__CFAllocator const*,void *,__CFDictionary const*,OpaqueFigVideoTarget **)::once != -1)
    dispatch_once(&PAL::initMediaToolboxFigVideoTargetCreateWithVideoReceiverEndpointID(__CFAllocator const*,void *,__CFDictionary const*,OpaqueFigVideoTarget **)::once, &__block_literal_global_12);
  return PAL::softLinkMediaToolboxFigVideoTargetCreateWithVideoReceiverEndpointID(a1, a2, a3, a4);
}

BOOL PAL::init_MediaToolbox_MTShouldPlayHDRVideo(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  v3 = 0;
  if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
  PAL::softLinkMediaToolboxMTShouldPlayHDRVideo = dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "MTShouldPlayHDRVideo");
  return PAL::softLinkMediaToolboxMTShouldPlayHDRVideo != 0;
}

BOOL PAL::canLoad_MediaToolbox_MTShouldPlayHDRVideo(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_MediaToolbox_MTShouldPlayHDRVideo(void)::loaded != 0;
  result = PAL::init_MediaToolbox_MTShouldPlayHDRVideo(this);
  PAL::canLoad_MediaToolbox_MTShouldPlayHDRVideo(void)::loaded = result;
  return result;
}

BOOL PAL::init_MediaToolbox_MTOverrideShouldPlayHDRVideo(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  v3 = 0;
  if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
  PAL::softLinkMediaToolboxMTOverrideShouldPlayHDRVideo = (uint64_t)dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "MTOverrideShouldPlayHDRVideo");
  return PAL::softLinkMediaToolboxMTOverrideShouldPlayHDRVideo != 0;
}

BOOL PAL::canLoad_MediaToolbox_MTOverrideShouldPlayHDRVideo(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7E443 == 1)
    return byte_1ECE7E442 != 0;
  result = PAL::init_MediaToolbox_MTOverrideShouldPlayHDRVideo(this);
  byte_1ECE7E442 = result;
  byte_1ECE7E443 = 1;
  return result;
}

BOOL PAL::init_MediaToolbox_MT_GetShouldPlayHDRVideoNotificationSingleton(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  v3 = 0;
  if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
  PAL::softLinkMediaToolboxMT_GetShouldPlayHDRVideoNotificationSingleton = (uint64_t)dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "MT_GetShouldPlayHDRVideoNotificationSingleton");
  return PAL::softLinkMediaToolboxMT_GetShouldPlayHDRVideoNotificationSingleton != 0;
}

BOOL PAL::canLoad_MediaToolbox_MT_GetShouldPlayHDRVideoNotificationSingleton(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7E445 == 1)
    return byte_1ECE7E444 != 0;
  result = PAL::init_MediaToolbox_MT_GetShouldPlayHDRVideoNotificationSingleton(this);
  byte_1ECE7E444 = result;
  byte_1ECE7E445 = 1;
  return result;
}

BOOL PAL::init_MediaToolbox_kMTSupportNotification_ShouldPlayHDRVideoChanged(PAL *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  v4 = 0;
  if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
  {
    dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
    v1 = (uint64_t *)dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "kMTSupportNotification_ShouldPlayHDRVideoChanged");
    if (!v1)
      return v1 != 0;
    goto LABEL_3;
  }
  v1 = (uint64_t *)dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "kMTSupportNotification_ShouldPlayHDRVideoChanged");
  if (v1)
LABEL_3:
    PAL::constantMediaToolboxkMTSupportNotification_ShouldPlayHDRVideoChanged = *v1;
  return v1 != 0;
}

BOOL PAL::canLoad_MediaToolbox_kMTSupportNotification_ShouldPlayHDRVideoChanged(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7E447 == 1)
    return byte_1ECE7E446 != 0;
  result = PAL::init_MediaToolbox_kMTSupportNotification_ShouldPlayHDRVideoChanged(this);
  byte_1ECE7E446 = result;
  byte_1ECE7E447 = 1;
  return result;
}

uint64_t PAL::get_MediaToolbox_kMTSupportNotification_ShouldPlayHDRVideoChanged(PAL *this)
{
  return PAL::constantMediaToolboxkMTSupportNotification_ShouldPlayHDRVideoChanged;
}

uint64_t PAL::initMediaToolboxMTAudioProcessingTapGetStorage(PAL *this, const opaqueMTAudioProcessingTap *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initMediaToolboxMTAudioProcessingTapGetStorage(opaqueMTAudioProcessingTap const*)::once != -1)
  {
    dispatch_once(&PAL::initMediaToolboxMTAudioProcessingTapGetStorage(opaqueMTAudioProcessingTap const*)::once, &__block_literal_global_12_3);
    this = v2;
  }
  return PAL::softLinkMediaToolboxMTAudioProcessingTapGetStorage(this, (const opaqueMTAudioProcessingTap *)PAL::softLinkMediaToolboxMTAudioProcessingTapGetStorage);
}

uint64_t PAL::initMediaToolboxMTAudioProcessingTapGetSourceAudio(PAL *this, const opaqueMTAudioProcessingTap *a2, uint64_t a3, AudioBufferList *a4, unsigned int *a5, CMTimeRange *a6, uint64_t *a7)
{
  if (PAL::initMediaToolboxMTAudioProcessingTapGetSourceAudio(opaqueMTAudioProcessingTap const*,long,AudioBufferList *,unsigned int *,CMTimeRange *,long *)::once != -1)
    dispatch_once(&PAL::initMediaToolboxMTAudioProcessingTapGetSourceAudio(opaqueMTAudioProcessingTap const*,long,AudioBufferList *,unsigned int *,CMTimeRange *,long *)::once, &__block_literal_global_15_2);
  return PAL::softLinkMediaToolboxMTAudioProcessingTapGetSourceAudio(this, a2, a3, a4, a5, a6, (uint64_t *)PAL::softLinkMediaToolboxMTAudioProcessingTapGetSourceAudio);
}

BOOL PAL::init_MediaToolbox_MTAudioProcessingTapCreate(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  v3 = 0;
  if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
  PAL::softLinkMediaToolboxMTAudioProcessingTapCreate = dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "MTAudioProcessingTapCreate");
  return PAL::softLinkMediaToolboxMTAudioProcessingTapCreate != 0;
}

BOOL PAL::canLoad_MediaToolbox_MTAudioProcessingTapCreate(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_MediaToolbox_MTAudioProcessingTapCreate(void)::loaded != 0;
  result = PAL::init_MediaToolbox_MTAudioProcessingTapCreate(this);
  PAL::canLoad_MediaToolbox_MTAudioProcessingTapCreate(void)::loaded = result;
  return result;
}

uint64_t ___ZN3PALL63initMediaToolboxFigVideoTargetCreateWithVideoReceiverEndpointIDEPK13__CFAllocatorPvPK14__CFDictionaryPP20OpaqueFigVideoTarget_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  v2 = 0;
  if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "FigVideoTargetCreateWithVideoReceiverEndpointID");
  PAL::softLinkMediaToolboxFigVideoTargetCreateWithVideoReceiverEndpointID = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 37;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL46initMediaToolboxMTAudioProcessingTapGetStorageEPK26opaqueMTAudioProcessingTap_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  v2 = 0;
  if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "MTAudioProcessingTapGetStorage");
  PAL::softLinkMediaToolboxMTAudioProcessingTapGetStorage = (uint64_t (*)(PAL *__hidden, const opaqueMTAudioProcessingTap *))result;
  if (!result)
  {
    result = 45;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL50initMediaToolboxMTAudioProcessingTapGetSourceAudioEPK26opaqueMTAudioProcessingTaplP15AudioBufferListPjP11CMTimeRangePl_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  v2 = 0;
  if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
    dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "MTAudioProcessingTapGetSourceAudio");
  PAL::softLinkMediaToolboxMTAudioProcessingTapGetSourceAudio = (uint64_t (*)(PAL *__hidden, const opaqueMTAudioProcessingTap *, uint64_t, AudioBufferList *, unsigned int *, CMTimeRange *, uint64_t *))result;
  if (!result)
  {
    result = 46;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::NaturalLanguageLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL22NaturalLanguageLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7E450 != -1)
    dispatch_once(&qword_1ECE7E450, block);
  return _MergedGlobals_69;
}

uint64_t ___ZN3PAL22NaturalLanguageLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/NaturalLanguage.framework/NaturalLanguage", 2);
  _MergedGlobals_69 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 31;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initNLTokenizer(PAL *this)
{
  if (qword_1ECE7E458 != -1)
    dispatch_once(&qword_1ECE7E458, &__block_literal_global_13);
  return qword_1ECE7E460;
}

uint64_t ___ZN3PALL15initNLTokenizerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL22NaturalLanguageLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E450 == -1)
  {
    result = (uint64_t)objc_getClass("NLTokenizer");
    qword_1ECE7E460 = result;
    if (result)
    {
LABEL_3:
      PAL::getNLTokenizerClass = (uint64_t)PAL::NLTokenizerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E450, block);
    result = (uint64_t)objc_getClass("NLTokenizer");
    qword_1ECE7E460 = result;
    if (result)
      goto LABEL_3;
  }
  result = 32;
  __break(0xC471u);
  return result;
}

uint64_t PAL::NLTokenizerFunction(PAL *this)
{
  return qword_1ECE7E460;
}

PAL::OTSVGTable *PAL::OTSVGTable::OTSVGTable(PAL::OTSVGTable *this, const __CFData *a2, const __CFData *a3, double a4)
{
  uint64_t v8;
  _QWORD block[4];
  char v11;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL12OTSVGLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  v11 = 1;
  if (PAL::OTSVGLibrary(BOOL)::once != -1)
  {
    dispatch_once(&PAL::OTSVGLibrary(BOOL)::once, block);
    if (PAL::OTSVGLibrary(BOOL)::frameworkLibrary)
      goto LABEL_3;
LABEL_5:
    v8 = 0;
    goto LABEL_6;
  }
  if (!PAL::OTSVGLibrary(BOOL)::frameworkLibrary)
    goto LABEL_5;
LABEL_3:
  v8 = PAL::softLinkOTSVGOTSVGTableCreateFromData(a2, a3, a3, a4);
LABEL_6:
  *(_QWORD *)this = v8;
  return this;
}

void PAL::OTSVGTable::~OTSVGTable(PAL::OTSVGTable *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL12OTSVGLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  v3 = 1;
  if (PAL::OTSVGLibrary(BOOL)::once == -1)
  {
    if (!PAL::OTSVGLibrary(BOOL)::frameworkLibrary)
      return;
  }
  else
  {
    dispatch_once(&PAL::OTSVGLibrary(BOOL)::once, block);
    if (!PAL::OTSVGLibrary(BOOL)::frameworkLibrary)
      return;
  }
  if (*(_QWORD *)this)
    PAL::softLinkOTSVGOTSVGTableRelease();
}

uint64_t *PAL::OutputContext::sharedAudioPresentationOutputContext(PAL::OutputContext *this)
{
  uint64_t v2;
  char v3;

    return &PAL::OutputContext::sharedAudioPresentationOutputContext(void)::sharedAudioPresentationOutputContext;
  PAL::OutputContext::sharedAudioPresentationOutputContext(void)::$_0::operator()((PAL *)&v2);
  LOBYTE(PAL::OutputContext::sharedAudioPresentationOutputContext(void)::sharedAudioPresentationOutputContext) = 0;
  byte_1EE2E6D78 = 0;
  if (v3)
  {
    PAL::OutputContext::sharedAudioPresentationOutputContext(void)::sharedAudioPresentationOutputContext = v2;
    byte_1EE2E6D78 = 1;
  }
  return &PAL::OutputContext::sharedAudioPresentationOutputContext(void)::sharedAudioPresentationOutputContext;
}

uint64_t PAL::OutputContext::sharedAudioPresentationOutputContext(void)::$_0::operator()(PAL *a1)
{
  uint64_t result;
  uint64_t v3;

  PAL::getAVOutputContextClass[0](a1);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0
    && (result = objc_msgSend((id)PAL::getAVOutputContextClass[0]((PAL *)result), "sharedAudioPresentationOutputContext")) != 0)
  {
    v3 = result;
    result = (uint64_t)CFRetain((CFTypeRef)result);
    *(_QWORD *)a1 = v3;
    *((_BYTE *)a1 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *((_BYTE *)a1 + 8) = 0;
  }
  return result;
}

WTF::StringImpl *PAL::OutputContext::deviceName@<X0>(id *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  char v4;
  id v5;
  void *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  WTF *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  BOOL v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  uint64_t v26;
  const void **v27;
  const void *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  char v35;

  if ((objc_opt_respondsToSelector() & 1) == 0
    || (objc_opt_respondsToSelector() & 1) == 0
    || (objc_msgSend(*this, "supportsMultipleOutputDevices") & 1) == 0)
  {
    objc_msgSend(*this, "deviceName");
    goto LABEL_66;
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  v4 = objc_opt_respondsToSelector();
  v5 = *this;
  if ((v4 & 1) != 0)
  {
    v6 = (void *)objc_msgSend(v5, "outputDevices");
    v7 = objc_msgSend(v6, "count");
    v9 = v7;
    v30 = 0;
    v31 = 0;
    if (!v7)
    {
      v10 = 0;
      goto LABEL_45;
    }
    if (!(v7 >> 29))
    {
      v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
      v11 = 0;
      LODWORD(v31) = v9;
      v30 = v10;
      do
      {
        v12 = (const void *)objc_msgSend(v6, "objectAtIndexedSubscript:", v11);
        v13 = v12;
        if (v12)
          CFRetain(v12);
        *((_QWORD *)v10 + v11++) = v13;
      }
      while (v9 != v11);
      HIDWORD(v31) = v9;
      if ((_DWORD)v9)
        goto LABEL_15;
LABEL_45:
      v22 = 1;
      v23 = v32;
      if (!v32)
        goto LABEL_46;
      goto LABEL_47;
    }
    __break(0xC471u);
LABEL_66:
    JUMPOUT(0x19AEA5508);
  }
  v14 = (const void *)objc_msgSend(v5, "outputDevice");
  v15 = v14;
  if (!v14)
  {
    LODWORD(v9) = 0;
    v10 = 0;
    v30 = 0;
    v31 = 0;
    goto LABEL_45;
  }
  CFRetain(v14);
  v10 = (WTF *)WTF::fastMalloc((WTF *)8);
  LODWORD(v9) = 1;
  LODWORD(v31) = 1;
  v30 = v10;
  *(_QWORD *)v10 = v15;
  CFRetain(v15);
  HIDWORD(v31) = 1;
  CFRelease(v15);
LABEL_15:
  v16 = 0;
  v17 = 8 * v9;
  while (1)
  {
    MEMORY[0x19AEA5508](&v29, objc_msgSend(*(id *)((char *)v10 + v16), "name", v29, v30, v31));
    v18 = v29;
    if (v34)
      v19 = 0;
    else
      v19 = v33 == 0;
    if (v19)
    {
      if (v29)
        *(_DWORD *)v29 += 2;
      v20 = v32;
      v32 = v18;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::destroy(v20, v8);
          v18 = v29;
          if (!v29)
            goto LABEL_30;
          goto LABEL_29;
        }
        *(_DWORD *)v20 -= 2;
      }
      if (!v18)
      {
LABEL_30:
        v34 = (int)v18;
        goto LABEL_32;
      }
LABEL_29:
      LODWORD(v18) = *((_DWORD *)v18 + 1);
      goto LABEL_30;
    }
    if (!v29 || (*((_BYTE *)v29 + 16) & 4) != 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
LABEL_32:
    v21 = v29;
    v29 = 0;
    if (!v21)
      goto LABEL_35;
    if (*(_DWORD *)v21 == 2)
      break;
    *(_DWORD *)v21 -= 2;
LABEL_35:
    v16 += 8;
    if (v17 == v16)
      goto LABEL_41;
LABEL_38:
    WTF::StringBuilder::append();
  }
  WTF::StringImpl::destroy(v21, v8);
  v16 += 8;
  if (v17 != v16)
    goto LABEL_38;
LABEL_41:
  v22 = 0;
  v23 = v32;
  if (v32)
    goto LABEL_47;
LABEL_46:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v32);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v32);
  v23 = v32;
  if (v32)
LABEL_47:
    *(_DWORD *)v23 += 2;
  *a2 = v23;
  if ((v22 & 1) == 0)
  {
    v26 = 8 * v9;
    v27 = (const void **)v10;
    do
    {
      v28 = *v27;
      *v27 = 0;
      if (v28)
        CFRelease(v28);
      ++v27;
      v26 -= 8;
    }
    while (v26);
  }
  if (v10)
    WTF::fastFree(v10, v8);
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 != 2)
    {
      *(_DWORD *)v24 -= 2;
      goto LABEL_54;
    }
    WTF::StringImpl::destroy(v24, v8);
    result = v32;
    v32 = 0;
    if (result)
    {
LABEL_61:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
LABEL_54:
    result = v32;
    v32 = 0;
    if (result)
      goto LABEL_61;
  }
  return result;
}

void sub_1945D4A34(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  WTF *v12;
  const void *v13;
  WTF::StringImpl *v15;

  WTF::fastFree(v12, a2);
  CFRelease(v13);
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)&a12, v15);
  _Unwind_Resume(a1);
}

void sub_1945D4A64(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, int a13, char a14)
{
  WTF::StringImpl *v15;

  WTF::Vector<PAL::OutputDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)&a14, v15);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<PAL::OutputDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  const void *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(const void ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        CFRelease(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t PAL::initPKPaymentSetupConfiguration(PAL *this)
{
  if (qword_1ECE7E708 != -1)
    dispatch_once(&qword_1ECE7E708, &__block_literal_global_83_0);
  return qword_1ECE7E710;
}

uint64_t PAL::initPKPaymentSetupFeature(PAL *this)
{
  if (qword_1ECE7E718 != -1)
    dispatch_once(&qword_1ECE7E718, &__block_literal_global_85);
  return qword_1ECE7E720;
}

uint64_t PAL::initPKPaymentSetupRequest(PAL *this)
{
  if (qword_1ECE7E728 != -1)
    dispatch_once(&qword_1ECE7E728, &__block_literal_global_87_0);
  return qword_1ECE7E730;
}

uint64_t PAL::initPKPaymentInstallmentConfiguration(PAL *this)
{
  if (qword_1ECE7E738 != -1)
    dispatch_once(&qword_1ECE7E738, &__block_literal_global_89_0);
  return qword_1ECE7E740;
}

uint64_t PAL::initPKPaymentInstallmentItem(PAL *this)
{
  if (qword_1ECE7E748 != -1)
    dispatch_once(&qword_1ECE7E748, &__block_literal_global_91);
  return qword_1ECE7E750;
}

uint64_t PAL::initPKRecurringPaymentSummaryItem(PAL *this)
{
  if (qword_1ECE7E758 != -1)
    dispatch_once(&qword_1ECE7E758, &__block_literal_global_93_0);
  return qword_1ECE7E760;
}

uint64_t PAL::initPKRecurringPaymentRequest(PAL *this)
{
  if (qword_1ECE7E768 != -1)
    dispatch_once(&qword_1ECE7E768, &__block_literal_global_95);
  return qword_1ECE7E770;
}

uint64_t PAL::initPKDeferredPaymentSummaryItem(PAL *this)
{
  if (qword_1ECE7E778 != -1)
    dispatch_once(&qword_1ECE7E778, &__block_literal_global_97);
  return qword_1ECE7E780;
}

uint64_t PAL::initPKDeferredPaymentRequest(PAL *this)
{
  if (qword_1ECE7E788 != -1)
    dispatch_once(&qword_1ECE7E788, &__block_literal_global_99_0);
  return qword_1ECE7E790;
}

uint64_t PAL::initPKDisbursementPaymentRequest(PAL *this)
{
  if (qword_1ECE7E798 != -1)
    dispatch_once(&qword_1ECE7E798, &__block_literal_global_101);
  return qword_1ECE7E7A0;
}

uint64_t PAL::initPKDisbursementRequest(PAL *this)
{
  if (qword_1ECE7E7A8 != -1)
    dispatch_once(&qword_1ECE7E7A8, &__block_literal_global_103);
  return qword_1ECE7E7B0;
}

uint64_t PAL::initPKDisbursementSummaryItem(PAL *this)
{
  if (qword_1ECE7E7B8 != -1)
    dispatch_once(&qword_1ECE7E7B8, &__block_literal_global_105_0);
  return qword_1ECE7E7C0;
}

uint64_t PAL::initPKInstantFundsOutFeeSummaryItem(PAL *this)
{
  if (qword_1ECE7E7C8 != -1)
    dispatch_once(&qword_1ECE7E7C8, &__block_literal_global_107);
  return qword_1ECE7E7D0;
}

uint64_t PAL::initPKAutomaticReloadPaymentSummaryItem(PAL *this)
{
  if (qword_1ECE7E7D8 != -1)
    dispatch_once(&qword_1ECE7E7D8, &__block_literal_global_109);
  return qword_1ECE7E7E0;
}

uint64_t PAL::initPKAutomaticReloadPaymentRequest(PAL *this)
{
  if (qword_1ECE7E7E8 != -1)
    dispatch_once(&qword_1ECE7E7E8, &__block_literal_global_111_0);
  return qword_1ECE7E7F0;
}

uint64_t PAL::initPKPaymentTokenContext(PAL *this)
{
  if (qword_1ECE7E7F8 != -1)
    dispatch_once(&qword_1ECE7E7F8, &__block_literal_global_113);
  return qword_1ECE7E800;
}

uint64_t PAL::initPKShippingMethods(PAL *this)
{
  if (qword_1ECE7E808 != -1)
    dispatch_once(&qword_1ECE7E808, &__block_literal_global_115);
  return qword_1ECE7E810;
}

uint64_t PAL::initPKDateComponentsRange(PAL *this)
{
  if (qword_1ECE7E818 != -1)
    dispatch_once(&qword_1ECE7E818, &__block_literal_global_117_0);
  return qword_1ECE7E820;
}

uint64_t PAL::initPKPaymentRequestCouponCodeUpdate(PAL *this)
{
  if (qword_1ECE7E828 != -1)
    dispatch_once(&qword_1ECE7E828, &__block_literal_global_119);
  return qword_1ECE7E830;
}

uint64_t PAL::initPKPaymentOrderDetails(PAL *this)
{
  if (qword_1ECE7E838 != -1)
    dispatch_once(&qword_1ECE7E838, &__block_literal_global_121_0);
  return qword_1ECE7E840;
}

uint64_t PAL::initPKPassLibrary(PAL *this)
{
  if (qword_1ECE7E858 != -1)
    dispatch_once(&qword_1ECE7E858, &__block_literal_global_125_0);
  return qword_1ECE7E860;
}

uint64_t PAL::initPKPayment(PAL *this)
{
  if (qword_1ECE7E868 != -1)
    dispatch_once(&qword_1ECE7E868, &__block_literal_global_127);
  return qword_1ECE7E870;
}

uint64_t PAL::initPKPaymentMerchantSession(PAL *this)
{
  if (qword_1ECE7E878 != -1)
    dispatch_once(&qword_1ECE7E878, &__block_literal_global_129_0);
  return qword_1ECE7E880;
}

uint64_t PAL::initPKPaymentMethod(PAL *this)
{
  if (qword_1ECE7E888 != -1)
    dispatch_once(&qword_1ECE7E888, &__block_literal_global_131);
  return qword_1ECE7E890;
}

uint64_t PAL::initPKPaymentPass(PAL *this)
{
  if (qword_1ECE7E898 != -1)
    dispatch_once(&qword_1ECE7E898, &__block_literal_global_133);
  return qword_1ECE7E8A0;
}

uint64_t PAL::initPKPaymentRequest(PAL *this)
{
  if (qword_1ECE7E8A8 != -1)
    dispatch_once(&qword_1ECE7E8A8, &__block_literal_global_135_0);
  return qword_1ECE7E8B0;
}

uint64_t PAL::initPKPaymentSummaryItem(PAL *this)
{
  if (qword_1ECE7E8B8 != -1)
    dispatch_once(&qword_1ECE7E8B8, &__block_literal_global_137);
  return qword_1ECE7E8C0;
}

uint64_t PAL::initPKPaymentToken(PAL *this)
{
  if (qword_1ECE7E8C8 != -1)
    dispatch_once(&qword_1ECE7E8C8, &__block_literal_global_139);
  return qword_1ECE7E8D0;
}

uint64_t PAL::initPKSecureElementPass(PAL *this)
{
  if (qword_1ECE7E8D8 != -1)
    dispatch_once(&qword_1ECE7E8D8, &__block_literal_global_141_0);
  return qword_1ECE7E8E0;
}

uint64_t PAL::initPKShippingMethod(PAL *this)
{
  if (qword_1ECE7E8E8 != -1)
    dispatch_once(&qword_1ECE7E8E8, &__block_literal_global_143);
  return qword_1ECE7E8F0;
}

uint64_t PAL::initPassKitCorePKCanMakePaymentsWithMerchantIdentifierAndDomain(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (PAL::initPassKitCorePKCanMakePaymentsWithMerchantIdentifierAndDomain(NSString *,NSString *,void({block_pointer})(BOOL,NSError *))::once != -1)
    dispatch_once(&PAL::initPassKitCorePKCanMakePaymentsWithMerchantIdentifierAndDomain(NSString *,NSString *,void({block_pointer})(BOOL,NSError *))::once, &__block_literal_global_145);
  return PAL::softLinkPassKitCorePKCanMakePaymentsWithMerchantIdentifierAndDomain(a1, a2, a3);
}

uint64_t PAL::initPassKitCorePKDrawApplePayButtonWithCornerRadius(PAL *this, CGContext *a2, CGRect a3, double a4, double a5, PKPaymentButtonType a6, PKPaymentButtonStyle a7, NSString *a8)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGRect v19;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  if (PAL::initPassKitCorePKDrawApplePayButtonWithCornerRadius(CGContext *,CGRect,double,double,PKPaymentButtonType,PKPaymentButtonStyle,NSString *)::once != -1)
    dispatch_once(&PAL::initPassKitCorePKDrawApplePayButtonWithCornerRadius(CGContext *,CGRect,double,double,PKPaymentButtonType,PKPaymentButtonStyle,NSString *)::once, &__block_literal_global_147_0);
  v19.origin.x = x;
  v19.origin.y = y;
  v19.size.width = width;
  v19.size.height = height;
  return PAL::softLinkPassKitCorePKDrawApplePayButtonWithCornerRadius(this, a2, v19, a4, a5, a6, a7, (NSString *)PAL::softLinkPassKitCorePKDrawApplePayButtonWithCornerRadius);
}

uint64_t PAL::initPKPaymentAuthorizationResult(PAL *this)
{
  if (qword_1ECE7E8F8 != -1)
    dispatch_once(&qword_1ECE7E8F8, &__block_literal_global_149);
  return qword_1ECE7E900;
}

uint64_t PAL::initPKPaymentRequestPaymentMethodUpdate(PAL *this)
{
  if (qword_1ECE7E908 != -1)
    dispatch_once(&qword_1ECE7E908, &__block_literal_global_151);
  return qword_1ECE7E910;
}

uint64_t PAL::initPKPaymentRequestShippingContactUpdate(PAL *this)
{
  if (qword_1ECE7E918 != -1)
    dispatch_once(&qword_1ECE7E918, &__block_literal_global_153_0);
  return qword_1ECE7E920;
}

uint64_t PAL::initPKPaymentRequestShippingMethodUpdate(PAL *this)
{
  if (qword_1ECE7E928 != -1)
    dispatch_once(&qword_1ECE7E928, &__block_literal_global_155);
  return qword_1ECE7E930;
}

double PAL::get_PassKitCore_PKApplePayButtonDefaultCornerRadius(PAL *this)
{
  if (qword_1ECE7E488 != -1)
    dispatch_once(&qword_1ECE7E488, &__block_literal_global_14);
  return *(double *)&qword_1ECE7E480;
}

uint64_t ___ZN3PAL51get_PassKitCore_PKApplePayButtonDefaultCornerRadiusEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKApplePayButtonDefaultCornerRadius");
    if (result)
    {
LABEL_3:
      qword_1ECE7E480 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKApplePayButtonDefaultCornerRadius");
    if (result)
      goto LABEL_3;
  }
  result = 125;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKContactFieldEmailAddress(PAL *this)
{
  if (qword_1ECE7E498 != -1)
    dispatch_once(&qword_1ECE7E498, &__block_literal_global_4_6);
  return qword_1ECE7E490;
}

uint64_t ___ZN3PAL42get_PassKitCore_PKContactFieldEmailAddressEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKContactFieldEmailAddress");
    if (result)
    {
LABEL_3:
      qword_1ECE7E490 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKContactFieldEmailAddress");
    if (result)
      goto LABEL_3;
  }
  result = 126;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKContactFieldName(PAL *this)
{
  if (qword_1ECE7E4A8 != -1)
    dispatch_once(&qword_1ECE7E4A8, &__block_literal_global_6_5);
  return qword_1ECE7E4A0;
}

uint64_t ___ZN3PAL34get_PassKitCore_PKContactFieldNameEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKContactFieldName");
    if (result)
    {
LABEL_3:
      qword_1ECE7E4A0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKContactFieldName");
    if (result)
      goto LABEL_3;
  }
  result = 127;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKContactFieldPhoneNumber(PAL *this)
{
  if (qword_1ECE7E4B8 != -1)
    dispatch_once(&qword_1ECE7E4B8, &__block_literal_global_8_3);
  return qword_1ECE7E4B0;
}

uint64_t ___ZN3PAL41get_PassKitCore_PKContactFieldPhoneNumberEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKContactFieldPhoneNumber");
    if (result)
    {
LABEL_3:
      qword_1ECE7E4B0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKContactFieldPhoneNumber");
    if (result)
      goto LABEL_3;
  }
  result = 128;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKContactFieldPhoneticName(PAL *this)
{
  if (qword_1ECE7E4C8 != -1)
    dispatch_once(&qword_1ECE7E4C8, &__block_literal_global_10_3);
  return qword_1ECE7E4C0;
}

uint64_t ___ZN3PAL42get_PassKitCore_PKContactFieldPhoneticNameEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKContactFieldPhoneticName");
    if (result)
    {
LABEL_3:
      qword_1ECE7E4C0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKContactFieldPhoneticName");
    if (result)
      goto LABEL_3;
  }
  result = 129;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKContactFieldPostalAddress(PAL *this)
{
  if (qword_1ECE7E4D8 != -1)
    dispatch_once(&qword_1ECE7E4D8, &__block_literal_global_12_4);
  return qword_1ECE7E4D0;
}

uint64_t ___ZN3PAL43get_PassKitCore_PKContactFieldPostalAddressEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKContactFieldPostalAddress");
    if (result)
    {
LABEL_3:
      qword_1ECE7E4D0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKContactFieldPostalAddress");
    if (result)
      goto LABEL_3;
  }
  result = 130;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentErrorContactFieldUserInfoKey(PAL *this)
{
  if (qword_1ECE7E4E8 != -1)
    dispatch_once(&qword_1ECE7E4E8, &__block_literal_global_14_3);
  return qword_1ECE7E4E0;
}

uint64_t ___ZN3PAL53get_PassKitCore_PKPaymentErrorContactFieldUserInfoKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentErrorContactFieldUserInfoKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E4E0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentErrorContactFieldUserInfoKey");
    if (result)
      goto LABEL_3;
  }
  result = 131;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPassKitErrorDomain(PAL *this)
{
  if (qword_1ECE7E4F8 != -1)
    dispatch_once(&qword_1ECE7E4F8, &__block_literal_global_16_1);
  return qword_1ECE7E4F0;
}

uint64_t ___ZN3PAL36get_PassKitCore_PKPassKitErrorDomainEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPassKitErrorDomain");
    if (result)
    {
LABEL_3:
      qword_1ECE7E4F0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPassKitErrorDomain");
    if (result)
      goto LABEL_3;
  }
  result = 132;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentErrorDomain(PAL *this)
{
  if (qword_1ECE7E508 != -1)
    dispatch_once(&qword_1ECE7E508, &__block_literal_global_18_2);
  return qword_1ECE7E500;
}

uint64_t ___ZN3PAL36get_PassKitCore_PKPaymentErrorDomainEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentErrorDomain");
    if (result)
    {
LABEL_3:
      qword_1ECE7E500 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentErrorDomain");
    if (result)
      goto LABEL_3;
  }
  result = 133;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentErrorPostalAddressUserInfoKey(PAL *this)
{
  if (qword_1ECE7E518 != -1)
    dispatch_once(&qword_1ECE7E518, &__block_literal_global_20_2);
  return qword_1ECE7E510;
}

uint64_t ___ZN3PAL54get_PassKitCore_PKPaymentErrorPostalAddressUserInfoKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentErrorPostalAddressUserInfoKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E510 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentErrorPostalAddressUserInfoKey");
    if (result)
      goto LABEL_3;
  }
  result = 134;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKDisbursementErrorDomain(PAL *this)
{
  if (qword_1ECE7E528 != -1)
    dispatch_once(&qword_1ECE7E528, &__block_literal_global_22_1);
  return qword_1ECE7E520;
}

uint64_t ___ZN3PAL41get_PassKitCore_PKDisbursementErrorDomainEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKDisbursementErrorDomain");
    if (result)
    {
LABEL_3:
      qword_1ECE7E520 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKDisbursementErrorDomain");
    if (result)
      goto LABEL_3;
  }
  result = 136;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkAmex(PAL *this)
{
  if (qword_1ECE7E538 != -1)
    dispatch_once(&qword_1ECE7E538, &__block_literal_global_24_2);
  return qword_1ECE7E530;
}

uint64_t ___ZN3PAL36get_PassKitCore_PKPaymentNetworkAmexEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkAmex");
    if (result)
    {
LABEL_3:
      qword_1ECE7E530 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkAmex");
    if (result)
      goto LABEL_3;
  }
  result = 138;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkPagoBancomat(PAL *this)
{
  if (qword_1ECE7E548 != -1)
    dispatch_once(&qword_1ECE7E548, &__block_literal_global_26_2);
  return qword_1ECE7E540;
}

uint64_t ___ZN3PAL44get_PassKitCore_PKPaymentNetworkPagoBancomatEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkPagoBancomat");
    if (result)
    {
LABEL_3:
      qword_1ECE7E540 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkPagoBancomat");
    if (result)
      goto LABEL_3;
  }
  result = 139;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkBancontact(PAL *this)
{
  if (qword_1ECE7E558 != -1)
    dispatch_once(&qword_1ECE7E558, &__block_literal_global_28_1);
  return qword_1ECE7E550;
}

uint64_t ___ZN3PAL42get_PassKitCore_PKPaymentNetworkBancontactEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkBancontact");
    if (result)
    {
LABEL_3:
      qword_1ECE7E550 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkBancontact");
    if (result)
      goto LABEL_3;
  }
  result = 140;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkCartesBancaires(PAL *this)
{
  if (qword_1ECE7E568 != -1)
    dispatch_once(&qword_1ECE7E568, &__block_literal_global_30_2);
  return qword_1ECE7E560;
}

uint64_t ___ZN3PAL47get_PassKitCore_PKPaymentNetworkCartesBancairesEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkCartesBancaires");
    if (result)
    {
LABEL_3:
      qword_1ECE7E560 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkCartesBancaires");
    if (result)
      goto LABEL_3;
  }
  result = 141;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkChinaUnionPay(PAL *this)
{
  if (qword_1ECE7E578 != -1)
    dispatch_once(&qword_1ECE7E578, &__block_literal_global_32_2);
  return qword_1ECE7E570;
}

uint64_t ___ZN3PAL45get_PassKitCore_PKPaymentNetworkChinaUnionPayEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkChinaUnionPay");
    if (result)
    {
LABEL_3:
      qword_1ECE7E570 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkChinaUnionPay");
    if (result)
      goto LABEL_3;
  }
  result = 142;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkDankort(PAL *this)
{
  if (qword_1ECE7E588 != -1)
    dispatch_once(&qword_1ECE7E588, &__block_literal_global_34_1);
  return qword_1ECE7E580;
}

uint64_t ___ZN3PAL39get_PassKitCore_PKPaymentNetworkDankortEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkDankort");
    if (result)
    {
LABEL_3:
      qword_1ECE7E580 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkDankort");
    if (result)
      goto LABEL_3;
  }
  result = 143;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkDiscover(PAL *this)
{
  if (qword_1ECE7E598 != -1)
    dispatch_once(&qword_1ECE7E598, &__block_literal_global_36_2);
  return qword_1ECE7E590;
}

uint64_t ___ZN3PAL40get_PassKitCore_PKPaymentNetworkDiscoverEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkDiscover");
    if (result)
    {
LABEL_3:
      qword_1ECE7E590 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkDiscover");
    if (result)
      goto LABEL_3;
  }
  result = 144;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkEftpos(PAL *this)
{
  if (qword_1ECE7E5A8 != -1)
    dispatch_once(&qword_1ECE7E5A8, &__block_literal_global_38_2);
  return qword_1ECE7E5A0;
}

uint64_t ___ZN3PAL38get_PassKitCore_PKPaymentNetworkEftposEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkEftpos");
    if (result)
    {
LABEL_3:
      qword_1ECE7E5A0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkEftpos");
    if (result)
      goto LABEL_3;
  }
  result = 145;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkElectron(PAL *this)
{
  if (qword_1ECE7E5B8 != -1)
    dispatch_once(&qword_1ECE7E5B8, &__block_literal_global_40_1);
  return qword_1ECE7E5B0;
}

uint64_t ___ZN3PAL40get_PassKitCore_PKPaymentNetworkElectronEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkElectron");
    if (result)
    {
LABEL_3:
      qword_1ECE7E5B0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkElectron");
    if (result)
      goto LABEL_3;
  }
  result = 146;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkElo(PAL *this)
{
  if (qword_1ECE7E5C8 != -1)
    dispatch_once(&qword_1ECE7E5C8, &__block_literal_global_42_2);
  return qword_1ECE7E5C0;
}

uint64_t ___ZN3PAL35get_PassKitCore_PKPaymentNetworkEloEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkElo");
    if (result)
    {
LABEL_3:
      qword_1ECE7E5C0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkElo");
    if (result)
      goto LABEL_3;
  }
  result = 147;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkIDCredit(PAL *this)
{
  if (qword_1ECE7E5D8 != -1)
    dispatch_once(&qword_1ECE7E5D8, &__block_literal_global_44_1);
  return qword_1ECE7E5D0;
}

uint64_t ___ZN3PAL40get_PassKitCore_PKPaymentNetworkIDCreditEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkIDCredit");
    if (result)
    {
LABEL_3:
      qword_1ECE7E5D0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkIDCredit");
    if (result)
      goto LABEL_3;
  }
  result = 148;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkInterac(PAL *this)
{
  if (qword_1ECE7E5E8 != -1)
    dispatch_once(&qword_1ECE7E5E8, &__block_literal_global_46_1);
  return qword_1ECE7E5E0;
}

uint64_t ___ZN3PAL39get_PassKitCore_PKPaymentNetworkInteracEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkInterac");
    if (result)
    {
LABEL_3:
      qword_1ECE7E5E0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkInterac");
    if (result)
      goto LABEL_3;
  }
  result = 149;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkJCB(PAL *this)
{
  if (qword_1ECE7E5F8 != -1)
    dispatch_once(&qword_1ECE7E5F8, &__block_literal_global_48_2);
  return qword_1ECE7E5F0;
}

uint64_t ___ZN3PAL35get_PassKitCore_PKPaymentNetworkJCBEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkJCB");
    if (result)
    {
LABEL_3:
      qword_1ECE7E5F0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkJCB");
    if (result)
      goto LABEL_3;
  }
  result = 150;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkMada(PAL *this)
{
  if (qword_1ECE7E608 != -1)
    dispatch_once(&qword_1ECE7E608, &__block_literal_global_50_2);
  return qword_1ECE7E600;
}

uint64_t ___ZN3PAL36get_PassKitCore_PKPaymentNetworkMadaEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkMada");
    if (result)
    {
LABEL_3:
      qword_1ECE7E600 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkMada");
    if (result)
      goto LABEL_3;
  }
  result = 151;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkMaestro(PAL *this)
{
  if (qword_1ECE7E618 != -1)
    dispatch_once(&qword_1ECE7E618, &__block_literal_global_52_1);
  return qword_1ECE7E610;
}

uint64_t ___ZN3PAL39get_PassKitCore_PKPaymentNetworkMaestroEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkMaestro");
    if (result)
    {
LABEL_3:
      qword_1ECE7E610 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkMaestro");
    if (result)
      goto LABEL_3;
  }
  result = 152;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkMasterCard(PAL *this)
{
  if (qword_1ECE7E628 != -1)
    dispatch_once(&qword_1ECE7E628, &__block_literal_global_54_2);
  return qword_1ECE7E620;
}

uint64_t ___ZN3PAL42get_PassKitCore_PKPaymentNetworkMasterCardEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkMasterCard");
    if (result)
    {
LABEL_3:
      qword_1ECE7E620 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkMasterCard");
    if (result)
      goto LABEL_3;
  }
  result = 153;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkMir(PAL *this)
{
  if (qword_1ECE7E638 != -1)
    dispatch_once(&qword_1ECE7E638, &__block_literal_global_56_2);
  return qword_1ECE7E630;
}

uint64_t ___ZN3PAL35get_PassKitCore_PKPaymentNetworkMirEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkMir");
    if (result)
    {
LABEL_3:
      qword_1ECE7E630 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkMir");
    if (result)
      goto LABEL_3;
  }
  result = 154;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkPrivateLabel(PAL *this)
{
  if (qword_1ECE7E648 != -1)
    dispatch_once(&qword_1ECE7E648, &__block_literal_global_58_0);
  return qword_1ECE7E640;
}

uint64_t ___ZN3PAL44get_PassKitCore_PKPaymentNetworkPrivateLabelEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkPrivateLabel");
    if (result)
    {
LABEL_3:
      qword_1ECE7E640 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkPrivateLabel");
    if (result)
      goto LABEL_3;
  }
  result = 155;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkQuicPay(PAL *this)
{
  if (qword_1ECE7E658 != -1)
    dispatch_once(&qword_1ECE7E658, &__block_literal_global_60_1);
  return qword_1ECE7E650;
}

uint64_t ___ZN3PAL39get_PassKitCore_PKPaymentNetworkQuicPayEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkQuicPay");
    if (result)
    {
LABEL_3:
      qword_1ECE7E650 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkQuicPay");
    if (result)
      goto LABEL_3;
  }
  result = 156;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkSuica(PAL *this)
{
  if (qword_1ECE7E668 != -1)
    dispatch_once(&qword_1ECE7E668, &__block_literal_global_62_1);
  return qword_1ECE7E660;
}

uint64_t ___ZN3PAL37get_PassKitCore_PKPaymentNetworkSuicaEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkSuica");
    if (result)
    {
LABEL_3:
      qword_1ECE7E660 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkSuica");
    if (result)
      goto LABEL_3;
  }
  result = 157;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkVisa(PAL *this)
{
  if (qword_1ECE7E678 != -1)
    dispatch_once(&qword_1ECE7E678, &__block_literal_global_64_0);
  return qword_1ECE7E670;
}

uint64_t ___ZN3PAL36get_PassKitCore_PKPaymentNetworkVisaEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkVisa");
    if (result)
    {
LABEL_3:
      qword_1ECE7E670 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkVisa");
    if (result)
      goto LABEL_3;
  }
  result = 158;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkVPay(PAL *this)
{
  if (qword_1ECE7E688 != -1)
    dispatch_once(&qword_1ECE7E688, &__block_literal_global_66_1);
  return qword_1ECE7E680;
}

uint64_t ___ZN3PAL36get_PassKitCore_PKPaymentNetworkVPayEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkVPay");
    if (result)
    {
LABEL_3:
      qword_1ECE7E680 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkVPay");
    if (result)
      goto LABEL_3;
  }
  result = 159;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkBarcode(PAL *this)
{
  if (qword_1ECE7E698 != -1)
    dispatch_once(&qword_1ECE7E698, &__block_literal_global_68_0);
  return qword_1ECE7E690;
}

uint64_t ___ZN3PAL39get_PassKitCore_PKPaymentNetworkBarcodeEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkBarcode");
    if (result)
    {
LABEL_3:
      qword_1ECE7E690 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkBarcode");
    if (result)
      goto LABEL_3;
  }
  result = 160;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkGirocard(PAL *this)
{
  if (qword_1ECE7E6A8 != -1)
    dispatch_once(&qword_1ECE7E6A8, &__block_literal_global_70_0);
  return qword_1ECE7E6A0;
}

uint64_t ___ZN3PAL40get_PassKitCore_PKPaymentNetworkGirocardEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkGirocard");
    if (result)
    {
LABEL_3:
      qword_1ECE7E6A0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkGirocard");
    if (result)
      goto LABEL_3;
  }
  result = 161;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkWaon(PAL *this)
{
  if (qword_1ECE7E6B8 != -1)
    dispatch_once(&qword_1ECE7E6B8, &__block_literal_global_72_1);
  return qword_1ECE7E6B0;
}

uint64_t ___ZN3PAL36get_PassKitCore_PKPaymentNetworkWaonEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkWaon");
    if (result)
    {
LABEL_3:
      qword_1ECE7E6B0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkWaon");
    if (result)
      goto LABEL_3;
  }
  result = 162;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkNanaco(PAL *this)
{
  if (qword_1ECE7E6C8 != -1)
    dispatch_once(&qword_1ECE7E6C8, &__block_literal_global_74_1);
  return qword_1ECE7E6C0;
}

uint64_t ___ZN3PAL38get_PassKitCore_PKPaymentNetworkNanacoEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkNanaco");
    if (result)
    {
LABEL_3:
      qword_1ECE7E6C0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkNanaco");
    if (result)
      goto LABEL_3;
  }
  result = 163;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkPostFinance(PAL *this)
{
  if (qword_1ECE7E6D8 != -1)
    dispatch_once(&qword_1ECE7E6D8, &__block_literal_global_76_0);
  return qword_1ECE7E6D0;
}

uint64_t ___ZN3PAL43get_PassKitCore_PKPaymentNetworkPostFinanceEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkPostFinance");
    if (result)
    {
LABEL_3:
      qword_1ECE7E6D0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkPostFinance");
    if (result)
      goto LABEL_3;
  }
  result = 164;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKPaymentNetworkTmoney(PAL *this)
{
  if (qword_1ECE7E6E8 != -1)
    dispatch_once(&qword_1ECE7E6E8, &__block_literal_global_78_1);
  return qword_1ECE7E6E0;
}

uint64_t ___ZN3PAL38get_PassKitCore_PKPaymentNetworkTmoneyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkTmoney");
    if (result)
    {
LABEL_3:
      qword_1ECE7E6E0 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKPaymentNetworkTmoney");
    if (result)
      goto LABEL_3;
  }
  result = 165;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_PassKitCore_PKMerchantCategoryCodeNone(PAL *this)
{
  if (qword_1ECE7E6F0 != -1)
    dispatch_once(&qword_1ECE7E6F0, &__block_literal_global_80_1);
  return _MergedGlobals_70;
}

uint64_t ___ZN3PAL42get_PassKitCore_PKMerchantCategoryCodeNoneEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKMerchantCategoryCodeNone");
    if (result)
    {
LABEL_3:
      _MergedGlobals_70 = *(_WORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKMerchantCategoryCodeNone");
    if (result)
      goto LABEL_3;
  }
  result = 168;
  __break(0xC471u);
  return result;
}

uint64_t PAL::initPassKitCorePKCanMakePaymentsWithMerchantIdentifierDomainAndSourceApplication(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (PAL::initPassKitCorePKCanMakePaymentsWithMerchantIdentifierDomainAndSourceApplication(NSString *,NSString *,NSString *,void({block_pointer})(BOOL,NSError *))::once != -1)
    dispatch_once(&PAL::initPassKitCorePKCanMakePaymentsWithMerchantIdentifierDomainAndSourceApplication(NSString *,NSString *,NSString *,void({block_pointer})(BOOL,NSError *))::once, &__block_literal_global_157);
  return PAL::softLinkPassKitCorePKCanMakePaymentsWithMerchantIdentifierDomainAndSourceApplication(a1, a2, a3, a4);
}

uint64_t PAL::PassKitUILibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16PassKitUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7E700 != -1)
    dispatch_once(&qword_1ECE7E700, block);
  return qword_1ECE7E6F8;
}

uint64_t ___ZN3PAL16PassKitUILibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI", 2);
  qword_1ECE7E6F8 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 174;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initPKPaymentAuthorizationController(PAL *this)
{
  if (qword_1ECE7E938 != -1)
    dispatch_once(&qword_1ECE7E938, &__block_literal_global_159_0);
  return qword_1ECE7E940;
}

uint64_t PAL::initPKPaymentAuthorizationViewController(PAL *this)
{
  if (qword_1ECE7E948 != -1)
    dispatch_once(&qword_1ECE7E948, &__block_literal_global_161);
  return qword_1ECE7E950;
}

uint64_t PAL::initPKPaymentSetupController(PAL *this)
{
  if (qword_1ECE7E958 != -1)
    dispatch_once(&qword_1ECE7E958, &__block_literal_global_163);
  return qword_1ECE7E960;
}

uint64_t PAL::initPKPaymentSetupViewController(PAL *this)
{
  if (qword_1ECE7E968 != -1)
    dispatch_once(&qword_1ECE7E968, &__block_literal_global_165_0);
  return qword_1ECE7E970;
}

uint64_t ___ZN3PALL31initPKPaymentSetupConfigurationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentSetupConfiguration");
    qword_1ECE7E710 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentSetupConfigurationClass = (uint64_t)PAL::PKPaymentSetupConfigurationFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentSetupConfiguration");
    qword_1ECE7E710 = result;
    if (result)
      goto LABEL_3;
  }
  result = 43;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentSetupConfigurationFunction(PAL *this)
{
  return qword_1ECE7E710;
}

uint64_t ___ZN3PALL25initPKPaymentSetupFeatureEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentSetupFeature");
    qword_1ECE7E720 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentSetupFeatureClass = (uint64_t)PAL::PKPaymentSetupFeatureFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentSetupFeature");
    qword_1ECE7E720 = result;
    if (result)
      goto LABEL_3;
  }
  result = 44;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentSetupFeatureFunction(PAL *this)
{
  return qword_1ECE7E720;
}

uint64_t ___ZN3PALL25initPKPaymentSetupRequestEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentSetupRequest");
    qword_1ECE7E730 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentSetupRequestClass = (uint64_t)PAL::PKPaymentSetupRequestFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentSetupRequest");
    qword_1ECE7E730 = result;
    if (result)
      goto LABEL_3;
  }
  result = 45;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentSetupRequestFunction(PAL *this)
{
  return qword_1ECE7E730;
}

Class ___ZN3PALL37initPKPaymentInstallmentConfigurationEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7E478 != -1)
    dispatch_once(&qword_1ECE7E478, block);
  result = objc_getClass("PKPaymentInstallmentConfiguration");
  qword_1ECE7E740 = (uint64_t)result;
  PAL::getPKPaymentInstallmentConfigurationClass[0] = PAL::PKPaymentInstallmentConfigurationFunction;
  return result;
}

uint64_t PAL::PKPaymentInstallmentConfigurationFunction(PAL *this)
{
  return qword_1ECE7E740;
}

Class ___ZN3PALL28initPKPaymentInstallmentItemEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7E478 != -1)
    dispatch_once(&qword_1ECE7E478, block);
  result = objc_getClass("PKPaymentInstallmentItem");
  qword_1ECE7E750 = (uint64_t)result;
  PAL::getPKPaymentInstallmentItemClass[0] = PAL::PKPaymentInstallmentItemFunction;
  return result;
}

uint64_t PAL::PKPaymentInstallmentItemFunction(PAL *this)
{
  return qword_1ECE7E750;
}

uint64_t ___ZN3PALL33initPKRecurringPaymentSummaryItemEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKRecurringPaymentSummaryItem");
    qword_1ECE7E760 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKRecurringPaymentSummaryItemClass[0] = PAL::PKRecurringPaymentSummaryItemFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKRecurringPaymentSummaryItem");
    qword_1ECE7E760 = result;
    if (result)
      goto LABEL_3;
  }
  result = 55;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKRecurringPaymentSummaryItemFunction(PAL *this)
{
  return qword_1ECE7E760;
}

uint64_t ___ZN3PALL29initPKRecurringPaymentRequestEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKRecurringPaymentRequest");
    qword_1ECE7E770 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKRecurringPaymentRequestClass = (uint64_t)PAL::PKRecurringPaymentRequestFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKRecurringPaymentRequest");
    qword_1ECE7E770 = result;
    if (result)
      goto LABEL_3;
  }
  result = 59;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKRecurringPaymentRequestFunction(PAL *this)
{
  return qword_1ECE7E770;
}

uint64_t ___ZN3PALL32initPKDeferredPaymentSummaryItemEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKDeferredPaymentSummaryItem");
    qword_1ECE7E780 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKDeferredPaymentSummaryItemClass[0] = PAL::PKDeferredPaymentSummaryItemFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKDeferredPaymentSummaryItem");
    qword_1ECE7E780 = result;
    if (result)
      goto LABEL_3;
  }
  result = 63;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKDeferredPaymentSummaryItemFunction(PAL *this)
{
  return qword_1ECE7E780;
}

uint64_t ___ZN3PALL28initPKDeferredPaymentRequestEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKDeferredPaymentRequest");
    qword_1ECE7E790 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKDeferredPaymentRequestClass = (uint64_t)PAL::PKDeferredPaymentRequestFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKDeferredPaymentRequest");
    qword_1ECE7E790 = result;
    if (result)
      goto LABEL_3;
  }
  result = 67;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKDeferredPaymentRequestFunction(PAL *this)
{
  return qword_1ECE7E790;
}

uint64_t ___ZN3PALL32initPKDisbursementPaymentRequestEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKDisbursementPaymentRequest");
    qword_1ECE7E7A0 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKDisbursementPaymentRequestClass = (uint64_t)PAL::PKDisbursementPaymentRequestFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKDisbursementPaymentRequest");
    qword_1ECE7E7A0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 71;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKDisbursementPaymentRequestFunction(PAL *this)
{
  return qword_1ECE7E7A0;
}

uint64_t ___ZN3PALL25initPKDisbursementRequestEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKDisbursementRequest");
    qword_1ECE7E7B0 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKDisbursementRequestClass = (uint64_t)PAL::PKDisbursementRequestFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKDisbursementRequest");
    qword_1ECE7E7B0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 72;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKDisbursementRequestFunction(PAL *this)
{
  return qword_1ECE7E7B0;
}

uint64_t ___ZN3PALL29initPKDisbursementSummaryItemEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKDisbursementSummaryItem");
    qword_1ECE7E7C0 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKDisbursementSummaryItemClass[0] = PAL::PKDisbursementSummaryItemFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKDisbursementSummaryItem");
    qword_1ECE7E7C0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 73;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKDisbursementSummaryItemFunction(PAL *this)
{
  return qword_1ECE7E7C0;
}

uint64_t ___ZN3PALL35initPKInstantFundsOutFeeSummaryItemEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKInstantFundsOutFeeSummaryItem");
    qword_1ECE7E7D0 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKInstantFundsOutFeeSummaryItemClass[0] = PAL::PKInstantFundsOutFeeSummaryItemFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKInstantFundsOutFeeSummaryItem");
    qword_1ECE7E7D0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 74;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKInstantFundsOutFeeSummaryItemFunction(PAL *this)
{
  return qword_1ECE7E7D0;
}

uint64_t ___ZN3PALL39initPKAutomaticReloadPaymentSummaryItemEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKAutomaticReloadPaymentSummaryItem");
    qword_1ECE7E7E0 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKAutomaticReloadPaymentSummaryItemClass[0] = PAL::PKAutomaticReloadPaymentSummaryItemFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKAutomaticReloadPaymentSummaryItem");
    qword_1ECE7E7E0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 78;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKAutomaticReloadPaymentSummaryItemFunction(PAL *this)
{
  return qword_1ECE7E7E0;
}

uint64_t ___ZN3PALL35initPKAutomaticReloadPaymentRequestEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKAutomaticReloadPaymentRequest");
    qword_1ECE7E7F0 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKAutomaticReloadPaymentRequestClass = (uint64_t)PAL::PKAutomaticReloadPaymentRequestFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKAutomaticReloadPaymentRequest");
    qword_1ECE7E7F0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 82;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKAutomaticReloadPaymentRequestFunction(PAL *this)
{
  return qword_1ECE7E7F0;
}

uint64_t ___ZN3PALL25initPKPaymentTokenContextEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentTokenContext");
    qword_1ECE7E800 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentTokenContextClass = (uint64_t)PAL::PKPaymentTokenContextFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentTokenContext");
    qword_1ECE7E800 = result;
    if (result)
      goto LABEL_3;
  }
  result = 86;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentTokenContextFunction(PAL *this)
{
  return qword_1ECE7E800;
}

uint64_t ___ZN3PALL21initPKShippingMethodsEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKShippingMethods");
    qword_1ECE7E810 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKShippingMethodsClass = (uint64_t)PAL::PKShippingMethodsFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKShippingMethods");
    qword_1ECE7E810 = result;
    if (result)
      goto LABEL_3;
  }
  result = 90;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKShippingMethodsFunction(PAL *this)
{
  return qword_1ECE7E810;
}

uint64_t ___ZN3PALL25initPKDateComponentsRangeEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKDateComponentsRange");
    qword_1ECE7E820 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKDateComponentsRangeClass = (uint64_t)PAL::PKDateComponentsRangeFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKDateComponentsRange");
    qword_1ECE7E820 = result;
    if (result)
      goto LABEL_3;
  }
  result = 94;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKDateComponentsRangeFunction(PAL *this)
{
  return qword_1ECE7E820;
}

uint64_t ___ZN3PALL36initPKPaymentRequestCouponCodeUpdateEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentRequestCouponCodeUpdate");
    qword_1ECE7E830 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentRequestCouponCodeUpdateClass = (uint64_t)PAL::PKPaymentRequestCouponCodeUpdateFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentRequestCouponCodeUpdate");
    qword_1ECE7E830 = result;
    if (result)
      goto LABEL_3;
  }
  result = 98;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentRequestCouponCodeUpdateFunction(PAL *this)
{
  return qword_1ECE7E830;
}

uint64_t ___ZN3PALL25initPKPaymentOrderDetailsEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentOrderDetails");
    qword_1ECE7E840 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentOrderDetailsClass = (uint64_t)PAL::PKPaymentOrderDetailsFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentOrderDetails");
    qword_1ECE7E840 = result;
    if (result)
      goto LABEL_3;
  }
  result = 102;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentOrderDetailsFunction(PAL *this)
{
  return qword_1ECE7E840;
}

uint64_t ___ZN3PALL17initPKPassLibraryEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPassLibrary");
    qword_1ECE7E860 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPassLibraryClass = (uint64_t)PAL::PKPassLibraryFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPassLibrary");
    qword_1ECE7E860 = result;
    if (result)
      goto LABEL_3;
  }
  result = 106;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPassLibraryFunction(PAL *this)
{
  return qword_1ECE7E860;
}

uint64_t ___ZN3PALL13initPKPaymentEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPayment");
    qword_1ECE7E870 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentClass = (uint64_t)PAL::PKPaymentFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPayment");
    qword_1ECE7E870 = result;
    if (result)
      goto LABEL_3;
  }
  result = 107;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentFunction(PAL *this)
{
  return qword_1ECE7E870;
}

uint64_t ___ZN3PALL28initPKPaymentMerchantSessionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentMerchantSession");
    qword_1ECE7E880 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentMerchantSessionClass[0] = PAL::PKPaymentMerchantSessionFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentMerchantSession");
    qword_1ECE7E880 = result;
    if (result)
      goto LABEL_3;
  }
  result = 108;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentMerchantSessionFunction(PAL *this)
{
  return qword_1ECE7E880;
}

uint64_t ___ZN3PALL19initPKPaymentMethodEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentMethod");
    qword_1ECE7E890 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentMethodClass = (uint64_t)PAL::PKPaymentMethodFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentMethod");
    qword_1ECE7E890 = result;
    if (result)
      goto LABEL_3;
  }
  result = 109;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentMethodFunction(PAL *this)
{
  return qword_1ECE7E890;
}

uint64_t ___ZN3PALL17initPKPaymentPassEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentPass");
    qword_1ECE7E8A0 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentPassClass = (uint64_t)PAL::PKPaymentPassFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentPass");
    qword_1ECE7E8A0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 110;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentPassFunction(PAL *this)
{
  return qword_1ECE7E8A0;
}

uint64_t ___ZN3PALL20initPKPaymentRequestEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentRequest");
    qword_1ECE7E8B0 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentRequestClass = (uint64_t)PAL::PKPaymentRequestFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentRequest");
    qword_1ECE7E8B0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 111;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentRequestFunction(PAL *this)
{
  return qword_1ECE7E8B0;
}

uint64_t ___ZN3PALL24initPKPaymentSummaryItemEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentSummaryItem");
    qword_1ECE7E8C0 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentSummaryItemClass[0] = PAL::PKPaymentSummaryItemFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentSummaryItem");
    qword_1ECE7E8C0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 112;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentSummaryItemFunction(PAL *this)
{
  return qword_1ECE7E8C0;
}

uint64_t ___ZN3PALL18initPKPaymentTokenEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentToken");
    qword_1ECE7E8D0 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentTokenClass = (uint64_t)PAL::PKPaymentTokenFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentToken");
    qword_1ECE7E8D0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 113;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentTokenFunction(PAL *this)
{
  return qword_1ECE7E8D0;
}

uint64_t ___ZN3PALL23initPKSecureElementPassEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKSecureElementPass");
    qword_1ECE7E8E0 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKSecureElementPassClass = (uint64_t)PAL::PKSecureElementPassFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKSecureElementPass");
    qword_1ECE7E8E0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 114;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKSecureElementPassFunction(PAL *this)
{
  return qword_1ECE7E8E0;
}

uint64_t ___ZN3PALL20initPKShippingMethodEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKShippingMethod");
    qword_1ECE7E8F0 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKShippingMethodClass = (uint64_t)PAL::PKShippingMethodFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKShippingMethod");
    qword_1ECE7E8F0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 115;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKShippingMethodFunction(PAL *this)
{
  return qword_1ECE7E8F0;
}

uint64_t ___ZN3PALL63initPassKitCorePKCanMakePaymentsWithMerchantIdentifierAndDomainEP8NSStringS1_U13block_pointerFvbP7NSErrorE_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 != -1)
    dispatch_once(&qword_1ECE7E478, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKCanMakePaymentsWithMerchantIdentifierAndDomain");
  PAL::softLinkPassKitCorePKCanMakePaymentsWithMerchantIdentifierAndDomain = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 117;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL51initPassKitCorePKDrawApplePayButtonWithCornerRadiusEP9CGContext6CGRectdd19PKPaymentButtonType20PKPaymentButtonStyleP8NSString_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 != -1)
    dispatch_once(&qword_1ECE7E478, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKDrawApplePayButtonWithCornerRadius");
  PAL::softLinkPassKitCorePKDrawApplePayButtonWithCornerRadius = (uint64_t (*)(PAL *__hidden, CGContext *, CGRect, double, double, PKPaymentButtonType, PKPaymentButtonStyle, NSString *))result;
  if (!result)
  {
    result = 118;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL32initPKPaymentAuthorizationResultEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentAuthorizationResult");
    qword_1ECE7E900 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentAuthorizationResultClass = (uint64_t)PAL::PKPaymentAuthorizationResultFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentAuthorizationResult");
    qword_1ECE7E900 = result;
    if (result)
      goto LABEL_3;
  }
  result = 120;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentAuthorizationResultFunction(PAL *this)
{
  return qword_1ECE7E900;
}

uint64_t ___ZN3PALL39initPKPaymentRequestPaymentMethodUpdateEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentRequestPaymentMethodUpdate");
    qword_1ECE7E910 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentRequestPaymentMethodUpdateClass = (uint64_t)PAL::PKPaymentRequestPaymentMethodUpdateFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentRequestPaymentMethodUpdate");
    qword_1ECE7E910 = result;
    if (result)
      goto LABEL_3;
  }
  result = 121;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentRequestPaymentMethodUpdateFunction(PAL *this)
{
  return qword_1ECE7E910;
}

uint64_t ___ZN3PALL41initPKPaymentRequestShippingContactUpdateEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentRequestShippingContactUpdate");
    qword_1ECE7E920 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentRequestShippingContactUpdateClass = (uint64_t)PAL::PKPaymentRequestShippingContactUpdateFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentRequestShippingContactUpdate");
    qword_1ECE7E920 = result;
    if (result)
      goto LABEL_3;
  }
  result = 122;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentRequestShippingContactUpdateFunction(PAL *this)
{
  return qword_1ECE7E920;
}

uint64_t ___ZN3PALL40initPKPaymentRequestShippingMethodUpdateEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentRequestShippingMethodUpdate");
    qword_1ECE7E930 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentRequestShippingMethodUpdateClass = (uint64_t)PAL::PKPaymentRequestShippingMethodUpdateFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKPaymentRequestShippingMethodUpdate");
    qword_1ECE7E930 = result;
    if (result)
      goto LABEL_3;
  }
  result = 123;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentRequestShippingMethodUpdateFunction(PAL *this)
{
  return qword_1ECE7E930;
}

uint64_t ___ZN3PALL80initPassKitCorePKCanMakePaymentsWithMerchantIdentifierDomainAndSourceApplicationEP8NSStringS1_S1_U13block_pointerFvbP7NSErrorE_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 != -1)
    dispatch_once(&qword_1ECE7E478, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7E470, "PKCanMakePaymentsWithMerchantIdentifierDomainAndSourceApplication");
  PAL::softLinkPassKitCorePKCanMakePaymentsWithMerchantIdentifierDomainAndSourceApplication = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 171;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL36initPKPaymentAuthorizationControllerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16PassKitUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E700 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentAuthorizationController");
    qword_1ECE7E940 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentAuthorizationControllerClass = (uint64_t)PAL::PKPaymentAuthorizationControllerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E700, block);
    result = (uint64_t)objc_getClass("PKPaymentAuthorizationController");
    qword_1ECE7E940 = result;
    if (result)
      goto LABEL_3;
  }
  result = 186;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentAuthorizationControllerFunction(PAL *this)
{
  return qword_1ECE7E940;
}

uint64_t ___ZN3PALL40initPKPaymentAuthorizationViewControllerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16PassKitUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E700 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentAuthorizationViewController");
    qword_1ECE7E950 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentAuthorizationViewControllerClass = (uint64_t)PAL::PKPaymentAuthorizationViewControllerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E700, block);
    result = (uint64_t)objc_getClass("PKPaymentAuthorizationViewController");
    qword_1ECE7E950 = result;
    if (result)
      goto LABEL_3;
  }
  result = 187;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentAuthorizationViewControllerFunction(PAL *this)
{
  return qword_1ECE7E950;
}

uint64_t ___ZN3PALL28initPKPaymentSetupControllerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16PassKitUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E700 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentSetupController");
    qword_1ECE7E960 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentSetupControllerClass = (uint64_t)PAL::PKPaymentSetupControllerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E700, block);
    result = (uint64_t)objc_getClass("PKPaymentSetupController");
    qword_1ECE7E960 = result;
    if (result)
      goto LABEL_3;
  }
  result = 188;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentSetupControllerFunction(PAL *this)
{
  return qword_1ECE7E960;
}

uint64_t ___ZN3PALL32initPKPaymentSetupViewControllerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16PassKitUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E700 == -1)
  {
    result = (uint64_t)objc_getClass("PKPaymentSetupViewController");
    qword_1ECE7E970 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKPaymentSetupViewControllerClass = (uint64_t)PAL::PKPaymentSetupViewControllerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E700, block);
    result = (uint64_t)objc_getClass("PKPaymentSetupViewController");
    qword_1ECE7E970 = result;
    if (result)
      goto LABEL_3;
  }
  result = 189;
  __break(0xC471u);
  return result;
}

uint64_t PAL::PKPaymentSetupViewControllerFunction(PAL *this)
{
  return qword_1ECE7E970;
}

uint64_t PAL::QuartzCoreLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17QuartzCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7E980 != -1)
    dispatch_once(&qword_1ECE7E980, block);
  return _MergedGlobals_71;
}

uint64_t ___ZN3PAL16QuickLookLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/QuickLook.framework/QuickLook", 2);
  _MergedGlobals_72 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initQLItem(PAL *this)
{
  if (qword_1ECE7E9A8 != -1)
    dispatch_once(&qword_1ECE7E9A8, &__block_literal_global_4_7);
  return qword_1ECE7E9B0;
}

uint64_t PAL::initQLPreviewController(PAL *this)
{
  if (qword_1ECE7E9B8 != -1)
    dispatch_once(&qword_1ECE7E9B8, &__block_literal_global_6_6);
  return qword_1ECE7E9C0;
}

uint64_t PAL::initQLPreviewConverter(PAL *this)
{
  if (qword_1ECE7E9C8 != -1)
    dispatch_once(&qword_1ECE7E9C8, &__block_literal_global_8_4);
  return qword_1ECE7E9D0;
}

uint64_t PAL::get_QuickLook_kQLPreviewOptionPasswordKey(PAL *this)
{
  if (qword_1ECE7E9A0 != -1)
    dispatch_once(&qword_1ECE7E9A0, &__block_literal_global_15);
  return qword_1ECE7E998;
}

uint64_t ___ZN3PAL41get_QuickLook_kQLPreviewOptionPasswordKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16QuickLookLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E990 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_72, "kQLPreviewOptionPasswordKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7E998 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E990, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_72, "kQLPreviewOptionPasswordKey");
    if (result)
      goto LABEL_3;
  }
  result = 37;
  __break(0xC471u);
  return result;
}

uint64_t PAL::initQuickLookQLPreviewGetSupportedMIMETypes(PAL *this)
{
  if (PAL::initQuickLookQLPreviewGetSupportedMIMETypes(void)::once != -1)
    dispatch_once(&PAL::initQuickLookQLPreviewGetSupportedMIMETypes(void)::once, &__block_literal_global_10_4);
  return PAL::softLinkQuickLookQLPreviewGetSupportedMIMETypes((PAL *)PAL::softLinkQuickLookQLPreviewGetSupportedMIMETypes);
}

uint64_t PAL::initQuickLookQLTypeCopyBestMimeTypeForFileNameAndMimeType(PAL *this, NSString *a2, NSString *a3)
{
  if (PAL::initQuickLookQLTypeCopyBestMimeTypeForFileNameAndMimeType(NSString *,NSString *)::once != -1)
    dispatch_once(&PAL::initQuickLookQLTypeCopyBestMimeTypeForFileNameAndMimeType(NSString *,NSString *)::once, &__block_literal_global_12_5);
  return PAL::softLinkQuickLookQLTypeCopyBestMimeTypeForFileNameAndMimeType(this, a2, (NSString *)PAL::softLinkQuickLookQLTypeCopyBestMimeTypeForFileNameAndMimeType);
}

uint64_t PAL::initQuickLookQLTypeCopyBestMimeTypeForURLAndMimeType(PAL *this, NSURL *a2, NSString *a3)
{
  if (PAL::initQuickLookQLTypeCopyBestMimeTypeForURLAndMimeType(NSURL *,NSString *)::once != -1)
    dispatch_once(&PAL::initQuickLookQLTypeCopyBestMimeTypeForURLAndMimeType(NSURL *,NSString *)::once, &__block_literal_global_14_4);
  return PAL::softLinkQuickLookQLTypeCopyBestMimeTypeForURLAndMimeType(this, a2, (NSString *)PAL::softLinkQuickLookQLTypeCopyBestMimeTypeForURLAndMimeType);
}

uint64_t PAL::initQuickLookQLTypeCopyUTIForURLAndMimeType(PAL *this, NSURL *a2, NSString *a3)
{
  if (PAL::initQuickLookQLTypeCopyUTIForURLAndMimeType(NSURL *,NSString *)::once != -1)
    dispatch_once(&PAL::initQuickLookQLTypeCopyUTIForURLAndMimeType(NSURL *,NSString *)::once, &__block_literal_global_16_2);
  return PAL::softLinkQuickLookQLTypeCopyUTIForURLAndMimeType(this, a2, (NSString *)PAL::softLinkQuickLookQLTypeCopyUTIForURLAndMimeType);
}

uint64_t ___ZN3PALL10initQLItemEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16QuickLookLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E990 == -1)
  {
    result = (uint64_t)objc_getClass("QLItem");
    qword_1ECE7E9B0 = result;
    if (result)
    {
LABEL_3:
      PAL::getQLItemClass = (uint64_t)PAL::QLItemFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E990, block);
    result = (uint64_t)objc_getClass("QLItem");
    qword_1ECE7E9B0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t PAL::QLItemFunction(PAL *this)
{
  return qword_1ECE7E9B0;
}

uint64_t ___ZN3PALL23initQLPreviewControllerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16QuickLookLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E990 == -1)
  {
    result = (uint64_t)objc_getClass("QLPreviewController");
    qword_1ECE7E9C0 = result;
    if (result)
    {
LABEL_3:
      PAL::getQLPreviewControllerClass = (uint64_t)PAL::QLPreviewControllerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E990, block);
    result = (uint64_t)objc_getClass("QLPreviewController");
    qword_1ECE7E9C0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 35;
  __break(0xC471u);
  return result;
}

uint64_t PAL::QLPreviewControllerFunction(PAL *this)
{
  return qword_1ECE7E9C0;
}

uint64_t ___ZN3PALL22initQLPreviewConverterEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16QuickLookLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E990 == -1)
  {
    result = (uint64_t)objc_getClass("QLPreviewConverter");
    qword_1ECE7E9D0 = result;
    if (result)
    {
LABEL_3:
      PAL::getQLPreviewConverterClass = PAL::QLPreviewConverterFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E990, block);
    result = (uint64_t)objc_getClass("QLPreviewConverter");
    qword_1ECE7E9D0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 36;
  __break(0xC471u);
  return result;
}

uint64_t PAL::QLPreviewConverterFunction(PAL *this)
{
  return qword_1ECE7E9D0;
}

uint64_t ___ZN3PALL43initQuickLookQLPreviewGetSupportedMIMETypesEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16QuickLookLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E990 != -1)
    dispatch_once(&qword_1ECE7E990, block);
  result = (uint64_t)dlsym((void *)_MergedGlobals_72, "QLPreviewGetSupportedMIMETypes");
  PAL::softLinkQuickLookQLPreviewGetSupportedMIMETypes = (uint64_t (*)(PAL *__hidden))result;
  if (!result)
  {
    result = 38;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL57initQuickLookQLTypeCopyBestMimeTypeForFileNameAndMimeTypeEP8NSStringS1__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16QuickLookLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E990 != -1)
    dispatch_once(&qword_1ECE7E990, block);
  result = (uint64_t)dlsym((void *)_MergedGlobals_72, "QLTypeCopyBestMimeTypeForFileNameAndMimeType");
  PAL::softLinkQuickLookQLTypeCopyBestMimeTypeForFileNameAndMimeType = (uint64_t (*)(PAL *__hidden, NSString *, NSString *))result;
  if (!result)
  {
    result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL52initQuickLookQLTypeCopyBestMimeTypeForURLAndMimeTypeEP5NSURLP8NSString_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16QuickLookLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E990 != -1)
    dispatch_once(&qword_1ECE7E990, block);
  result = (uint64_t)dlsym((void *)_MergedGlobals_72, "QLTypeCopyBestMimeTypeForURLAndMimeType");
  PAL::softLinkQuickLookQLTypeCopyBestMimeTypeForURLAndMimeType = (uint64_t (*)(PAL *__hidden, NSURL *, NSString *))result;
  if (!result)
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL43initQuickLookQLTypeCopyUTIForURLAndMimeTypeEP5NSURLP8NSString_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16QuickLookLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E990 != -1)
    dispatch_once(&qword_1ECE7E990, block);
  result = (uint64_t)dlsym((void *)_MergedGlobals_72, "QLTypeCopyUTIForURLAndMimeType");
  PAL::softLinkQuickLookQLTypeCopyUTIForURLAndMimeType = (uint64_t (*)(PAL *__hidden, NSURL *, NSString *))result;
  if (!result)
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PAL16ReplayKitLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/ReplayKit.framework/ReplayKit", 2);
  PAL::ReplayKitLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initRPScreenRecorder(PAL *this)
{
  if (qword_1ECE7E9E0 != -1)
    dispatch_once(&qword_1ECE7E9E0, &__block_literal_global_16);
  return qword_1ECE7E9E8;
}

uint64_t ___ZN3PALL20initRPScreenRecorderEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL16ReplayKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_73 == -1)
  {
    result = (uint64_t)objc_getClass("RPScreenRecorder");
    qword_1ECE7E9E8 = result;
    if (result)
    {
LABEL_3:
      PAL::getRPScreenRecorderClass[0] = PAL::RPScreenRecorderFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_73, block);
    result = (uint64_t)objc_getClass("RPScreenRecorder");
    qword_1ECE7E9E8 = result;
    if (result)
      goto LABEL_3;
  }
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t PAL::RPScreenRecorderFunction(PAL *this)
{
  return qword_1ECE7E9E8;
}

uint64_t PAL::RevealLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13RevealLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7E9F8 != -1)
    dispatch_once(&qword_1ECE7E9F8, block);
  return _MergedGlobals_74;
}

uint64_t ___ZN3PAL13RevealLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Reveal.framework/Reveal", 2);
  _MergedGlobals_74 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initRVPresenter(PAL *this)
{
  if (qword_1ECE7EA10 != -1)
    dispatch_once(&qword_1ECE7EA10, &__block_literal_global_17);
  return qword_1ECE7EA18;
}

uint64_t PAL::initRVPresentingContext(PAL *this)
{
  if (qword_1ECE7EA20 != -1)
    dispatch_once(&qword_1ECE7EA20, &__block_literal_global_5_0);
  return qword_1ECE7EA28;
}

uint64_t PAL::initRVSelection(PAL *this)
{
  if (qword_1ECE7EA40 != -1)
    dispatch_once(&qword_1ECE7EA40, &__block_literal_global_9_1);
  return qword_1ECE7EA48;
}

Class ___ZN3PALL15initRVPresenterEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13RevealLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7E9F8 != -1)
    dispatch_once(&qword_1ECE7E9F8, block);
  result = objc_getClass("RVPresenter");
  qword_1ECE7EA18 = (uint64_t)result;
  PAL::getRVPresenterClass = (uint64_t)PAL::RVPresenterFunction;
  return result;
}

uint64_t PAL::RVPresenterFunction(PAL *this)
{
  return qword_1ECE7EA18;
}

Class ___ZN3PALL23initRVPresentingContextEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13RevealLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7E9F8 != -1)
    dispatch_once(&qword_1ECE7E9F8, block);
  result = objc_getClass("RVPresentingContext");
  qword_1ECE7EA28 = (uint64_t)result;
  PAL::getRVPresentingContextClass = (uint64_t)PAL::RVPresentingContextFunction;
  return result;
}

uint64_t PAL::RVPresentingContextFunction(PAL *this)
{
  return qword_1ECE7EA28;
}

Class ___ZN3PALL15initRVSelectionEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17RevealCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EA08 != -1)
    dispatch_once(&qword_1ECE7EA08, block);
  result = objc_getClass("RVSelection");
  qword_1ECE7EA48 = (uint64_t)result;
  PAL::getRVSelectionClass = PAL::RVSelectionFunction;
  return result;
}

uint64_t PAL::RVSelectionFunction(PAL *this)
{
  return qword_1ECE7EA48;
}

uint64_t PAL::SessionID::generateEphemeralSessionID(PAL::SessionID *this)
{
  uint64_t result;

  if (PAL::generationProtectionEnabled == 1)
  {
    result = 48;
    __break(0xC471u);
  }
  else
  {
    return ++PAL::currentEphemeralID;
  }
  return result;
}

uint64_t PAL::SleepDisabler::SleepDisabler(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)result = &off_1E31F3898;
  *(_DWORD *)(result + 8) = a3;
  return result;
}

{
  *(_QWORD *)result = &off_1E31F3898;
  *(_DWORD *)(result + 8) = a3;
  return result;
}

void PAL::SleepDisabler::~SleepDisabler(PAL::SleepDisabler *this)
{
  JUMPOUT(0x19AEA7644);
}

PAL::SleepDisablerCocoa *PAL::SleepDisablerCocoa::SleepDisablerCocoa(PAL::SleepDisablerCocoa *this, WTF::String *a2, int a3)
{
  IOPMAssertionID *v4;
  const __CFString *Name;

  *((_DWORD *)this + 2) = a3;
  *(_QWORD *)this = &off_1E31F38B8;
  *((_DWORD *)this + 3) = 0;
  v4 = (IOPMAssertionID *)((char *)this + 12);
  *((_QWORD *)this + 2) = 0;
  if (a3)
  {
    if (a3 == 1)
      PAL::SleepDisablerCocoa::takeScreenSleepDisablingAssertion(this, a2);
    return this;
  }
  WTF::String::createCFString(a2);
  IOPMAssertionCreateWithDescription(CFSTR("PreventUserIdleSystemSleep"), Name, 0, 0, 0, 0.0, 0, v4);
  if (!Name)
    return this;
  CFRelease(Name);
  return this;
}

void PAL::SleepDisablerCocoa::~SleepDisablerCocoa(PAL::SleepDisablerCocoa *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  IOPMAssertionID v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(_QWORD *)this = &off_1E31F38B8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = *(uint64_t **)v2;
    v4 = *(_QWORD *)(v2 + 8) - 1;
    *(_QWORD *)(v2 + 8) = v4;
    if (v3)
    {
      v5 = *v3;
      if (!*v3)
        goto LABEL_8;
      v6 = *(_BYTE *)(v2 + 16);
      *(_BYTE *)(v2 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
      *(_BYTE *)(v2 + 16) = v6;
      if (*(_QWORD *)v2)
        goto LABEL_8;
      v4 = *(_QWORD *)(v2 + 8);
    }
    if (!v4)
      MEMORY[0x19AEA7644](v2, 0x1020C40545B2139);
  }
LABEL_8:
  v7 = *((_DWORD *)this + 3);
  if (v7)
    IOPMAssertionRelease(v7);
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    v9 = *(uint64_t **)v8;
    v10 = *(_QWORD *)(v8 + 8) - 1;
    *(_QWORD *)(v8 + 8) = v10;
    if (v9)
    {
      v11 = *v9;
      if (!*v9)
        return;
      v12 = *(_BYTE *)(v8 + 16);
      *(_BYTE *)(v8 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
      *(_BYTE *)(v8 + 16) = v12;
      if (*(_QWORD *)v8)
        return;
      v10 = *(_QWORD *)(v8 + 8);
    }
    if (!v10)
      MEMORY[0x19AEA7644](v8, 0x1020C40545B2139);
  }
}

{
  PAL::SleepDisablerCocoa::~SleepDisablerCocoa(this);
  JUMPOUT(0x19AEA7644);
}

_QWORD *PAL::SleepDisablerCocoa::takeScreenSleepDisablingAssertion(_QWORD *this, const WTF::String *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  char v8;

  v2 = this;
  {
    v3 = off_1ECE76888;
    if (!off_1ECE76888)
      goto LABEL_6;
  }
  else
  {
    this = WTF::NeverDestroyed<PAL::ScreenSleepDisabler,WTF::MainThreadAccessTraits>::NeverDestroyed<>(&PAL::ScreenSleepDisabler::shared(void)::screenSleepDisabler);
    v3 = off_1ECE76888;
    if (!off_1ECE76888)
      goto LABEL_6;
  }
  v4 = (_QWORD **)*v3;
  ++v3[1];
  if (v4)
  {
    this = *v4;
    if (*v4)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*this + 16))(this, 1);
  }
LABEL_6:
  v5 = v2[2];
  v2[2] = v3;
  if (!v5)
    return this;
  v6 = *(_QWORD ***)v5;
  v7 = *(_QWORD *)(v5 + 8) - 1;
  *(_QWORD *)(v5 + 8) = v7;
  if (!v6)
    goto LABEL_11;
  this = *v6;
  if (*v6)
  {
    v8 = *(_BYTE *)(v5 + 16);
    *(_BYTE *)(v5 + 16) = 1;
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*this + 16))(this, 0);
    *(_BYTE *)(v5 + 16) = v8;
    if (!*(_QWORD *)v5)
    {
      v7 = *(_QWORD *)(v5 + 8);
LABEL_11:
      if (!v7)
        JUMPOUT(0x19AEA7644);
    }
  }
  return this;
}

void sub_1945DB6EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  char v2;

  *(_BYTE *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

_QWORD *WTF::NeverDestroyed<PAL::ScreenSleepDisabler,WTF::MainThreadAccessTraits>::NeverDestroyed<>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E31F38D8;
  v2[1] = a1;
  *a1 = v2;
  v3 = operator new();
  *(_QWORD *)v3 = a1;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  a1[1] = v3;
  a1[2] = 0;
  return a1;
}

void sub_1945DB750(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<PAL::ScreenSleepDisabler::ScreenSleepDisabler(void)::{lambda(WTF::RefCounterEvent)#1},void,WTF::RefCounterEvent>::call(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v1 = result[1];
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8);
  if (v2 <= 1)
  {
    v3 = qword_1EE2D4358;
    if (os_log_type_enabled((os_log_t)qword_1EE2D4358, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v5[0]) = 67109120;
      HIDWORD(v5[0]) = v2 != 0;
      _os_log_impl(&dword_1940B8000, v3, OS_LOG_TYPE_DEFAULT, "ScreenSleepDisabler::updateState() shouldKeepScreenAwake=%d", (uint8_t *)v5, 8u);
    }
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v4 = off_1E31F3900;
    *(_QWORD *)(v4 + 8) = v1;
    *(_BYTE *)(v4 + 16) = v2 != 0;
    v5[0] = v4;
    WTF::ensureOnMainRunLoop();
    result = (_QWORD *)v5[0];
    v5[0] = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1945DB880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<PAL::ScreenSleepDisabler::updateState(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (!result)
    return objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass((PAL *)result), "sharedApplication"), "_setIdleTimerDisabled:forReason:", *(unsigned __int8 *)(a1 + 16), CFSTR("WebKit SleepDisabler"));
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, *(unsigned __int8 *)(a1 + 16));
  if ((result & 1) == 0)
    return objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass((PAL *)result), "sharedApplication"), "_setIdleTimerDisabled:forReason:", *(unsigned __int8 *)(a1 + 16), CFSTR("WebKit SleepDisabler"));
  return result;
}

uint64_t ___ZN3PAL13SpeechLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/Speech.framework/Speech", 2);
  PAL::SpeechLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initSFSpeechRecognitionResult(PAL *this)
{
  if (qword_1ECE7EA60 != -1)
    dispatch_once(&qword_1ECE7EA60, &__block_literal_global_18);
  return qword_1ECE7EA68;
}

uint64_t PAL::initSFSpeechRecognitionRequest(PAL *this)
{
  if (qword_1ECE7EA70 != -1)
    dispatch_once(&qword_1ECE7EA70, &__block_literal_global_4_8);
  return qword_1ECE7EA78;
}

uint64_t PAL::initSFSpeechAudioBufferRecognitionRequest(PAL *this)
{
  if (qword_1ECE7EA80 != -1)
    dispatch_once(&qword_1ECE7EA80, &__block_literal_global_6_7);
  return qword_1ECE7EA88;
}

uint64_t PAL::initSFSpeechRecognitionTask(PAL *this)
{
  if (qword_1ECE7EA90 != -1)
    dispatch_once(&qword_1ECE7EA90, &__block_literal_global_8_5);
  return qword_1ECE7EA98;
}

uint64_t PAL::initSFSpeechRecognizer(PAL *this)
{
  if (qword_1ECE7EAA0 != -1)
    dispatch_once(&qword_1ECE7EAA0, &__block_literal_global_10_5);
  return qword_1ECE7EAA8;
}

uint64_t PAL::initSFTranscriptionSegment(PAL *this)
{
  if (qword_1ECE7EAB0 != -1)
    dispatch_once(&qword_1ECE7EAB0, &__block_literal_global_12_6);
  return qword_1ECE7EAB8;
}

uint64_t PAL::initSFTranscription(PAL *this)
{
  if (qword_1ECE7EAC0 != -1)
    dispatch_once(&qword_1ECE7EAC0, &__block_literal_global_14_5);
  return qword_1ECE7EAC8;
}

uint64_t ___ZN3PALL29initSFSpeechRecognitionResultEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13SpeechLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_75 == -1)
  {
    result = (uint64_t)objc_getClass("SFSpeechRecognitionResult");
    qword_1ECE7EA68 = result;
    if (result)
    {
LABEL_3:
      PAL::getSFSpeechRecognitionResultClass = (uint64_t)PAL::SFSpeechRecognitionResultFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_75, block);
    result = (uint64_t)objc_getClass("SFSpeechRecognitionResult");
    qword_1ECE7EA68 = result;
    if (result)
      goto LABEL_3;
  }
  result = 35;
  __break(0xC471u);
  return result;
}

uint64_t PAL::SFSpeechRecognitionResultFunction(PAL *this)
{
  return qword_1ECE7EA68;
}

uint64_t ___ZN3PALL30initSFSpeechRecognitionRequestEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13SpeechLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_75 == -1)
  {
    result = (uint64_t)objc_getClass("SFSpeechRecognitionRequest");
    qword_1ECE7EA78 = result;
    if (result)
    {
LABEL_3:
      PAL::getSFSpeechRecognitionRequestClass = (uint64_t)PAL::SFSpeechRecognitionRequestFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_75, block);
    result = (uint64_t)objc_getClass("SFSpeechRecognitionRequest");
    qword_1ECE7EA78 = result;
    if (result)
      goto LABEL_3;
  }
  result = 36;
  __break(0xC471u);
  return result;
}

uint64_t PAL::SFSpeechRecognitionRequestFunction(PAL *this)
{
  return qword_1ECE7EA78;
}

uint64_t ___ZN3PALL41initSFSpeechAudioBufferRecognitionRequestEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13SpeechLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_75 == -1)
  {
    result = (uint64_t)objc_getClass("SFSpeechAudioBufferRecognitionRequest");
    qword_1ECE7EA88 = result;
    if (result)
    {
LABEL_3:
      PAL::getSFSpeechAudioBufferRecognitionRequestClass[0] = PAL::SFSpeechAudioBufferRecognitionRequestFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_75, block);
    result = (uint64_t)objc_getClass("SFSpeechAudioBufferRecognitionRequest");
    qword_1ECE7EA88 = result;
    if (result)
      goto LABEL_3;
  }
  result = 37;
  __break(0xC471u);
  return result;
}

uint64_t PAL::SFSpeechAudioBufferRecognitionRequestFunction(PAL *this)
{
  return qword_1ECE7EA88;
}

uint64_t ___ZN3PALL27initSFSpeechRecognitionTaskEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13SpeechLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_75 == -1)
  {
    result = (uint64_t)objc_getClass("SFSpeechRecognitionTask");
    qword_1ECE7EA98 = result;
    if (result)
    {
LABEL_3:
      PAL::getSFSpeechRecognitionTaskClass = (uint64_t)PAL::SFSpeechRecognitionTaskFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_75, block);
    result = (uint64_t)objc_getClass("SFSpeechRecognitionTask");
    qword_1ECE7EA98 = result;
    if (result)
      goto LABEL_3;
  }
  result = 38;
  __break(0xC471u);
  return result;
}

uint64_t PAL::SFSpeechRecognitionTaskFunction(PAL *this)
{
  return qword_1ECE7EA98;
}

uint64_t ___ZN3PALL22initSFSpeechRecognizerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13SpeechLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_75 == -1)
  {
    result = (uint64_t)objc_getClass("SFSpeechRecognizer");
    qword_1ECE7EAA8 = result;
    if (result)
    {
LABEL_3:
      PAL::getSFSpeechRecognizerClass[0] = PAL::SFSpeechRecognizerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_75, block);
    result = (uint64_t)objc_getClass("SFSpeechRecognizer");
    qword_1ECE7EAA8 = result;
    if (result)
      goto LABEL_3;
  }
  result = 39;
  __break(0xC471u);
  return result;
}

uint64_t PAL::SFSpeechRecognizerFunction(PAL *this)
{
  return qword_1ECE7EAA8;
}

uint64_t ___ZN3PALL26initSFTranscriptionSegmentEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13SpeechLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_75 == -1)
  {
    result = (uint64_t)objc_getClass("SFTranscriptionSegment");
    qword_1ECE7EAB8 = result;
    if (result)
    {
LABEL_3:
      PAL::getSFTranscriptionSegmentClass = (uint64_t)PAL::SFTranscriptionSegmentFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_75, block);
    result = (uint64_t)objc_getClass("SFTranscriptionSegment");
    qword_1ECE7EAB8 = result;
    if (result)
      goto LABEL_3;
  }
  result = 40;
  __break(0xC471u);
  return result;
}

uint64_t PAL::SFTranscriptionSegmentFunction(PAL *this)
{
  return qword_1ECE7EAB8;
}

uint64_t ___ZN3PALL19initSFTranscriptionEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13SpeechLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_75 == -1)
  {
    result = (uint64_t)objc_getClass("SFTranscription");
    qword_1ECE7EAC8 = result;
    if (result)
    {
LABEL_3:
      PAL::getSFTranscriptionClass = (uint64_t)PAL::SFTranscriptionFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_75, block);
    result = (uint64_t)objc_getClass("SFTranscription");
    qword_1ECE7EAC8 = result;
    if (result)
      goto LABEL_3;
  }
  result = 41;
  __break(0xC471u);
  return result;
}

uint64_t PAL::SFTranscriptionFunction(PAL *this)
{
  return qword_1ECE7EAC8;
}

_QWORD *PAL::SystemSleepListener::create@<X0>(PAL::SystemSleepListener *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E31F3A08;
  result[1] = this;
  *a2 = result;
  return result;
}

void PAL::SystemSleepListener::~SystemSleepListener(PAL::SystemSleepListener *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t ___ZN3PAL19SystemStatusLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus", 2);
  PAL::SystemStatusLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initSTDynamicActivityAttributionPublisher(PAL *this)
{
  if (qword_1ECE7EAD8 != -1)
    dispatch_once(&qword_1ECE7EAD8, &__block_literal_global_19);
  return qword_1ECE7EAE0;
}

uint64_t ___ZN3PALL41initSTDynamicActivityAttributionPublisherEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19SystemStatusLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_76 == -1)
  {
    result = (uint64_t)objc_getClass("STDynamicActivityAttributionPublisher");
    qword_1ECE7EAE0 = result;
    if (result)
    {
LABEL_3:
      PAL::getSTDynamicActivityAttributionPublisherClass = (uint64_t)PAL::STDynamicActivityAttributionPublisherFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_76, block);
    result = (uint64_t)objc_getClass("STDynamicActivityAttributionPublisher");
    qword_1ECE7EAE0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t PAL::STDynamicActivityAttributionPublisherFunction(PAL *this)
{
  return qword_1ECE7EAE0;
}

uint64_t PAL::TextCodecCJK::registerEncodingNames(void (*a1)(const char *, uint64_t, const char *, uint64_t))
{
  a1("Big5", 5, "Big5", 5);
  a1("big5-hkscs", 11, "Big5", 5);
  a1("cn-big5", 8, "Big5", 5);
  a1("csbig5", 7, "Big5", 5);
  a1("x-x-big5", 9, "Big5", 5);
  a1("EUC-JP", 7, "EUC-JP", 7);
  a1("cseucpkdfmtjapanese", 20, "EUC-JP", 7);
  a1("x-euc-jp", 9, "EUC-JP", 7);
  a1("Shift_JIS", 10, "Shift_JIS", 10);
  a1("csshiftjis", 11, "Shift_JIS", 10);
  a1("ms932", 6, "Shift_JIS", 10);
  a1("ms_kanji", 9, "Shift_JIS", 10);
  a1("shift-jis", 10, "Shift_JIS", 10);
  a1("sjis", 5, "Shift_JIS", 10);
  a1("windows-31j", 12, "Shift_JIS", 10);
  a1("x-sjis", 7, "Shift_JIS", 10);
  a1("EUC-KR", 7, "EUC-KR", 7);
  a1("cseuckr", 8, "EUC-KR", 7);
  a1("csksc56011987", 14, "EUC-KR", 7);
  a1("iso-ir-149", 11, "EUC-KR", 7);
  a1("korean", 7, "EUC-KR", 7);
  a1("ks_c_5601-1987", 15, "EUC-KR", 7);
  a1("ks_c_5601-1989", 15, "EUC-KR", 7);
  a1("ksc5601", 8, "EUC-KR", 7);
  a1("ksc_5601", 9, "EUC-KR", 7);
  a1("windows-949", 12, "EUC-KR", 7);
  a1("x-windows-949", 14, "EUC-KR", 7);
  a1("x-uhc", 6, "EUC-KR", 7);
  a1("ISO-2022-JP", 12, "ISO-2022-JP", 12);
  a1("csiso2022jp", 12, "ISO-2022-JP", 12);
  a1("GBK", 4, "GBK", 4);
  a1("chinese", 8, "GBK", 4);
  a1("csgb2312", 9, "GBK", 4);
  a1("csiso58gb231280", 16, "GBK", 4);
  a1("gb2312", 7, "GBK", 4);
  a1("gb_2312", 8, "GBK", 4);
  a1("gb_2312-80", 11, "GBK", 4);
  a1("iso-ir-58", 10, "GBK", 4);
  a1("x-gbk", 6, "GBK", 4);
  a1("cn-gb", 6, "GBK", 4);
  a1("csgb231280", 11, "GBK", 4);
  a1("x-euc-cn", 9, "GBK", 4);
  a1("euc-cn", 7, "GBK", 4);
  a1("cp936", 6, "GBK", 4);
  a1("ms936", 6, "GBK", 4);
  a1("gb2312-1980", 12, "GBK", 4);
  a1("windows-936", 12, "GBK", 4);
  a1("windows-936-2000", 17, "GBK", 4);
  a1("gb18030", 8, "gb18030", 8);
  a1("ibm-1392", 9, "gb18030", 8);
  return ((uint64_t (*)(const char *, uint64_t, const char *, uint64_t))a1)("windows-54936", 14, "gb18030", 8);
}

uint64_t PAL::TextCodecCJK::registerCodecs(void (*a1)(const char *, uint64_t, _QWORD **))
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t result;
  _QWORD *v16;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E31F3AA8;
  v16 = v2;
  a1("EUC-JP", 7, &v16);
  v3 = v16;
  v16 = 0;
  if (v3)
    (*(void (**)(_QWORD *))(*v3 + 8))(v3);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E31F3AD0;
  v16 = v4;
  a1("Big5", 5, &v16);
  v5 = v16;
  v16 = 0;
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E31F3AF8;
  v16 = v6;
  a1("Shift_JIS", 10, &v16);
  v7 = v16;
  v16 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E31F3B20;
  v16 = v8;
  a1("EUC-KR", 7, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E31F3B48;
  v16 = v10;
  a1("ISO-2022-JP", 12, &v16);
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = off_1E31F3B70;
  v16 = v12;
  a1("GBK", 4, &v16);
  v13 = v16;
  v16 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = off_1E31F3B98;
  v16 = v14;
  a1("gb18030", 8, &v16);
  result = (uint64_t)v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *PAL::TextCodecCJK::decodeCommon(WTF::StringImpl **a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6, _BYTE *a7, _QWORD *a8)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  char v37;
  __int16 v38;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 1;
  result = (WTF::StringImpl *)WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v34);
  if (!*(_BYTE *)(a2 + 20))
    goto LABEL_15;
  v18 = *(unsigned __int16 *)(a2 + 19);
  if (v18 <= 0xFF)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  *(_BYTE *)(a2 + 20) = 0;
  if (!(*(unsigned int (**)(_QWORD, _QWORD, WTF::StringImpl **))(*(_QWORD *)*a8 + 16))(*a8, v18, &v34))goto LABEL_15;
  *a7 = 1;
  v38 = -3;
  if (v35)
  {
    v19 = v36;
    v20 = v36 < *((_DWORD *)v35 + 1) && v34 == 0;
    if (v20 && (*((_BYTE *)v35 + 16) & 4) == 0)
    {
      v21 = *((_QWORD *)v35 + 1);
      ++v36;
      *(_WORD *)(v21 + 2 * v19) = -3;
      if (!a6)
        goto LABEL_15;
LABEL_14:
      *(_BYTE *)(a2 + 18) = 0;
      goto LABEL_53;
    }
  }
  WTF::StringBuilder::append();
  if (a6)
    goto LABEL_14;
LABEL_15:
  while (a4)
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, _QWORD, WTF::StringImpl **))(*(_QWORD *)*a8 + 16))(*a8, *a3, &v34);
    if ((_DWORD)result)
    {
      *a7 = 1;
      v38 = -3;
      if (v35
        && ((v22 = v36, v36 < *((_DWORD *)v35 + 1)) ? (v23 = v34 == 0) : (v23 = 0),
            v23 && (*((_BYTE *)v35 + 16) & 4) == 0))
      {
        v24 = *((_QWORD *)v35 + 1);
        ++v36;
        *(_WORD *)(v24 + 2 * v22) = -3;
        if (a6)
          goto LABEL_14;
      }
      else
      {
        result = (WTF::StringImpl *)WTF::StringBuilder::append();
        if (a6)
          goto LABEL_14;
      }
    }
    if (*(_BYTE *)(a2 + 20))
    {
      v25 = *(unsigned __int16 *)(a2 + 19);
      if (v25 <= 0xFF)
        goto LABEL_66;
      *(_BYTE *)(a2 + 20) = 0;
      if ((*(unsigned int (**)(_QWORD, _QWORD, WTF::StringImpl **))(*(_QWORD *)*a8 + 16))(*a8, v25, &v34))
      {
        *a7 = 1;
        v38 = -3;
        if (v35
          && ((v26 = v36, v36 < *((_DWORD *)v35 + 1)) ? (v27 = v34 == 0) : (v27 = 0),
              v27 && (*((_BYTE *)v35 + 16) & 4) == 0))
        {
          v28 = *((_QWORD *)v35 + 1);
          ++v36;
          *(_WORD *)(v28 + 2 * v26) = -3;
          if (a6)
            goto LABEL_14;
        }
        else
        {
          WTF::StringBuilder::append();
          if (a6)
            goto LABEL_14;
        }
      }
    }
    ++a3;
    --a4;
  }
  if (a5 && *(_BYTE *)(a2 + 18))
  {
    *(_BYTE *)(a2 + 18) = 0;
    *a7 = 1;
    v38 = -3;
    if (v35
      && ((v29 = v36, v36 < *((_DWORD *)v35 + 1)) ? (v30 = v34 == 0) : (v30 = 0),
          v30 && (*((_BYTE *)v35 + 16) & 4) == 0))
    {
      v31 = *((_QWORD *)v35 + 1);
      ++v36;
      *(_WORD *)(v31 + 2 * v29) = -3;
    }
    else
    {
      WTF::StringBuilder::append();
    }
  }
LABEL_53:
  v32 = v34;
  if (v34
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v34),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v34),
        (v32 = v34) != 0))
  {
    *(_DWORD *)v32 += 2;
  }
  *a1 = v32;
  v33 = v35;
  v35 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::destroy(v33, v17);
      result = v34;
      v34 = 0;
      if (!result)
        return result;
      goto LABEL_62;
    }
    *(_DWORD *)v33 -= 2;
  }
  result = v34;
  v34 = 0;
  if (!result)
    return result;
LABEL_62:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t WTF::StringBuilder::append(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 8);
  if (!v2)
    return WTF::StringBuilder::append();
  v3 = *(unsigned int *)(result + 16);
  if (v3 >= *(_DWORD *)(v2 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if (a2 > 0xFF)
      return WTF::StringBuilder::append();
    v5 = *(_QWORD *)(v2 + 8);
    *(_DWORD *)(result + 16) = v3 + 1;
    *(_BYTE *)(v5 + v3) = a2;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 8);
    *(_DWORD *)(result + 16) = v3 + 1;
    *(_WORD *)(v4 + 2 * v3) = a2;
  }
  return result;
}

BOOL PAL::TextCodecCJK::iso2022JPDecode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()(uint64_t a1, unsigned int a2, WTF::StringBuilder *this)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  char v13;
  int v14;
  char v15;
  __int16 v16;
  unint64_t v17;
  unsigned __int16 v18;
  unint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  char **v38;
  char *v39;

  switch(*(_BYTE *)(a1 + 10))
  {
    case 0:
      if (a2 == 27)
        goto LABEL_30;
      *(_BYTE *)(a1 + 12) = 0;
      if ((a2 & 0x80) != 0 || (a2 - 16) > 0xFDu)
        return 1;
      LOBYTE(v39) = a2;
      v4 = *((_QWORD *)this + 1);
      if (v4
        && ((v5 = *((unsigned int *)this + 4), v5 < *(_DWORD *)(v4 + 4))
          ? (v6 = *(_QWORD *)this == 0)
          : (v6 = 0),
            v6))
      {
        v33 = *(_DWORD *)(v4 + 16);
        v34 = *(_QWORD *)(v4 + 8);
        *((_DWORD *)this + 4) = v5 + 1;
        if ((v33 & 4) != 0)
          *(_BYTE *)(v34 + v5) = a2;
        else
          *(_WORD *)(v34 + 2 * v5) = a2;
        return 0;
      }
      else
      {
        WTF::StringBuilder::append();
        return 0;
      }
    case 1:
      switch(a2)
      {
        case 0x7Eu:
          *(_BYTE *)(a1 + 12) = 0;
          LOWORD(v39) = 8254;
          v25 = *((_QWORD *)this + 1);
          if (!v25)
            goto LABEL_76;
          v26 = *((unsigned int *)this + 4);
          v27 = v26 < *(_DWORD *)(v25 + 4) && *(_QWORD *)this == 0;
          if (!v27 || (*(_BYTE *)(v25 + 16) & 4) != 0)
            goto LABEL_76;
          v28 = *(_QWORD *)(v25 + 8);
          *((_DWORD *)this + 4) = v26 + 1;
          *(_WORD *)(v28 + 2 * v26) = 8254;
          return 0;
        case 0x5Cu:
          *(_BYTE *)(a1 + 12) = 0;
          LOWORD(v39) = 165;
          v29 = *((_QWORD *)this + 1);
          if (!v29)
            goto LABEL_76;
          v30 = *((unsigned int *)this + 4);
          if (v30 >= *(_DWORD *)(v29 + 4) || *(_QWORD *)this != 0)
            goto LABEL_76;
          v35 = *(_DWORD *)(v29 + 16);
          v36 = *(_QWORD *)(v29 + 8);
          *((_DWORD *)this + 4) = v30 + 1;
          if ((v35 & 4) != 0)
            *(_BYTE *)(v36 + v30) = -91;
          else
            *(_WORD *)(v36 + 2 * v30) = 165;
          return 0;
        case 0x1Bu:
          goto LABEL_30;
        default:
          if ((a2 & 0x80) != 0 || a2 <= 0x1B && ((1 << a2) & 0x800C000) != 0)
          {
            *(_BYTE *)(a1 + 12) = 0;
            return 1;
          }
          else
          {
            *(_BYTE *)(a1 + 12) = 0;
            WTF::StringBuilder::append((uint64_t)this, a2);
            return 0;
          }
      }
    case 2:
      if (a2 == 27)
        goto LABEL_30;
      *(_BYTE *)(a1 + 12) = 0;
      if (a2 - 33 > 0x3E)
        return 1;
      LOWORD(v39) = a2 - 192;
      v8 = *((_QWORD *)this + 1);
      if (v8
        && ((v9 = *((unsigned int *)this + 4), v9 < *(_DWORD *)(v8 + 4))
          ? (v10 = *(_QWORD *)this == 0)
          : (v10 = 0),
            v10 && (*(_BYTE *)(v8 + 16) & 4) == 0))
      {
        v11 = *(_QWORD *)(v8 + 8);
        *((_DWORD *)this + 4) = v9 + 1;
        *(_WORD *)(v11 + 2 * v9) = a2 - 192;
        return 0;
      }
      else
      {
LABEL_76:
        WTF::StringBuilder::append();
        return 0;
      }
    case 3:
      if (a2 == 27)
      {
LABEL_30:
        *(_BYTE *)(a1 + 10) = 5;
        return 0;
      }
      *(_BYTE *)(a1 + 12) = 0;
      if (a2 - 33 > 0x5D)
        return 1;
      *(_BYTE *)(a1 + 18) = a2;
      v13 = 4;
      goto LABEL_45;
    case 4:
      if (a2 == 27)
      {
        v12 = 5;
        goto LABEL_62;
      }
      *(_BYTE *)(a1 + 10) = 3;
      if (a2 - 33 > 0x5D)
        return 1;
      v16 = a2 + 94 * *(unsigned __int8 *)(a1 + 18);
      v17 = atomic_load(&PAL::jis0208(void)::flag);
      if (v17 != -1)
      {
        v39 = &v37;
        v38 = &v39;
        std::__call_once(&PAL::jis0208(void)::flag, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::jis0208(void)::$_0 &&>>);
      }
      v18 = v16 - 3135;
      v19 = 7724;
      v20 = (unsigned __int16 *)PAL::jis0208(void)::array;
      do
      {
        v21 = v19 >> 1;
        v22 = &v20[2 * (v19 >> 1)];
        v24 = *v22;
        v23 = v22 + 2;
        v19 += ~(v19 >> 1);
        if (v24 < v18)
          v20 = v23;
        else
          v19 = v21;
      }
      while (v19);
      if (v20 == (unsigned __int16 *)(PAL::jis0208(void)::array + 30896) || *v20 > v18)
        return 1;
      WTF::StringBuilder::append((uint64_t)this, v20[1]);
      return 0;
    case 5:
      if (a2 != 40 && a2 != 36)
      {
        *(_WORD *)(a1 + 19) = a2 | 0x100;
        goto LABEL_61;
      }
      *(_BYTE *)(a1 + 18) = a2;
      v13 = 6;
LABEL_45:
      *(_BYTE *)(a1 + 10) = v13;
      return 0;
    case 6:
      v14 = *(unsigned __int8 *)(a1 + 18);
      *(_BYTE *)(a1 + 18) = 0;
      if (v14 == 36)
      {
        if ((a2 & 0xFFFFFFFD) != 0x40)
          goto LABEL_60;
        v15 = 3;
LABEL_79:
        *(_BYTE *)(a1 + 10) = v15;
        *(_BYTE *)(a1 + 11) = v15;
        v32 = *(unsigned __int8 *)(a1 + 12);
        *(_BYTE *)(a1 + 12) = 1;
        return v32 != 0;
      }
      if (v14 != 40)
        goto LABEL_60;
      switch(a2)
      {
        case 'B':
          v15 = 0;
          goto LABEL_79;
        case 'I':
          v15 = 2;
          goto LABEL_79;
        case 'J':
          v15 = 1;
          goto LABEL_79;
      }
LABEL_60:
      *(_WORD *)(a1 + 19) = v14 | 0x100;
      *(_WORD *)(a1 + 13) = a2 | 0x100;
LABEL_61:
      *(_BYTE *)(a1 + 12) = 0;
      v12 = *(_BYTE *)(a1 + 11);
LABEL_62:
      *(_BYTE *)(a1 + 10) = v12;
      return 1;
    default:
      return 0;
  }
}

uint64_t WTF::StringBuilder::append(uint64_t this, __int16 a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(this + 8);
  if (!v2)
    return WTF::StringBuilder::append();
  v3 = *(unsigned int *)(this + 16);
  if (v3 >= *(_DWORD *)(v2 + 4) || *(_QWORD *)this)
    return WTF::StringBuilder::append();
  v4 = *(_DWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 8);
  *(_DWORD *)(this + 16) = v3 + 1;
  if ((v4 & 4) != 0)
    *(_BYTE *)(v5 + v3) = a2;
  else
    *(_WORD *)(v5 + 2 * v3) = a2;
  return this;
}

uint64_t PAL::TextCodecCJK::gb18030Decode(WTF::StringImpl **a1, _BYTE *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6, _BYTE *a7)
{
  _QWORD *v14;
  uint64_t result;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _QWORD *v23;

  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v14 = off_1E31F3C38;
  v14[1] = a2;
  v14[2] = a7;
  v14[3] = &v23;
  v23 = v14;
  PAL::TextCodecCJK::decodeCommon(a1, (uint64_t)a2, a3, a4, a5, a6, a7, &v23);
  if (!a5 || !a2[15] && !a2[16] && !a2[17])
  {
LABEL_18:
    result = (uint64_t)v23;
    v23 = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  *(_WORD *)(a2 + 15) = 0;
  a2[17] = 0;
  result = 1;
  *a7 = 1;
  v16 = *a1;
  if (*a1)
  {
    v17 = *((_DWORD *)v16 + 1);
    *(_DWORD *)v16 += 2;
    if (v17 < 0 || (result = (v17 + 1), __OFADD__(v17, 1)))
    {
      v22 = 0;
      goto LABEL_25;
    }
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char16_t,void>>(result, 0, (uint64_t)v16, 65533, &v22);
  v19 = v22;
  if (!v22)
  {
LABEL_25:
    __break(0xC471u);
    return result;
  }
  v22 = 0;
  *a1 = v19;
  if (!v16)
    goto LABEL_18;
  if (*(_DWORD *)v16 == 2)
  {
    WTF::StringImpl::destroy(v16, v18);
    v21 = v22;
    v22 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v18);
        v20 = *(_DWORD *)v16 - 2;
        if (*(_DWORD *)v16 == 2)
          goto LABEL_22;
        goto LABEL_17;
      }
      *(_DWORD *)v21 -= 2;
    }
    v20 = *(_DWORD *)v16 - 2;
    if (*(_DWORD *)v16 == 2)
      goto LABEL_22;
LABEL_17:
    *(_DWORD *)v16 = v20;
    goto LABEL_18;
  }
  *(_DWORD *)v16 -= 2;
  v22 = 0;
  v20 = *(_DWORD *)v16 - 2;
  if (*(_DWORD *)v16 != 2)
    goto LABEL_17;
LABEL_22:
  WTF::StringImpl::destroy(v16, v18);
  result = (uint64_t)v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t PAL::entityUnencodableHandler(void *a1, uint64_t a2)
{
  size_t v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t result;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  void *v24;
  void *v25;
  _BYTE *v26;

  v4 = *(unsigned int *)(a2 + 12);
  if (v4 + 13 > *(unsigned int *)(a2 + 8))
  {
    if (v4 >= 0xFFFFFFF3)
    {
      __break(0xC471u);
      JUMPOUT(0x1945DD800);
    }
    v5 = *(void **)a2;
    v6 = (void *)WTF::fastMalloc((WTF *)(v4 + 13));
    *(_DWORD *)(a2 + 8) = v4 + 13;
    *(_QWORD *)a2 = v6;
    memcpy(v6, v5, v4);
    if (v5)
    {
      if (*(void **)a2 == v5)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v7);
    }
  }
  v8 = *(unsigned int *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 12);
  v10 = v9 + 2;
  if (v9 + 2 > v8)
  {
    v11 = v8 + (v8 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= v10)
      v13 = v9 + 2;
    else
      v13 = v12;
    if (HIDWORD(v13))
    {
      __break(0xC471u);
      JUMPOUT(0x1945DD808);
    }
    v14 = *(void **)a2;
    v15 = (void *)WTF::fastMalloc((WTF *)v13);
    *(_DWORD *)(a2 + 8) = v13;
    *(_QWORD *)a2 = v15;
    memcpy(v15, v14, v9);
    if (v14)
    {
      if (*(void **)a2 == v14)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v14, v16);
    }
  }
  v17 = *(unsigned int *)(a2 + 12);
  if (v10 < v17)
    goto LABEL_38;
  *(_WORD *)(*(_QWORD *)a2 + v17) = 8998;
  *(_DWORD *)(a2 + 12) = v10;
  result = (uint64_t)PAL::appendDecimal(a1, a2);
  v19 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v19 != *(_DWORD *)(a2 + 8))
  {
    v26 = (_BYTE *)(*(_QWORD *)a2 + v19);
    goto LABEL_34;
  }
  v20 = v19 + (v19 >> 2);
  v21 = v20 >= 0x10 ? v20 + 1 : 16;
  v22 = v21 <= v19 + 1 ? v19 + 1 : v21;
  if (HIDWORD(v22))
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x1945DD7F8);
  }
  v23 = *(void **)a2;
  v24 = (void *)WTF::fastMalloc((WTF *)v22);
  *(_DWORD *)(a2 + 8) = v22;
  *(_QWORD *)a2 = v24;
  result = (uint64_t)memcpy(v24, v23, v19);
  if (v23)
  {
    if (*(void **)a2 == v23)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
    }
    result = WTF::fastFree((WTF *)v23, v25);
  }
  v26 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned int *)(a2 + 12));
LABEL_34:
  *v26 = 59;
  ++*(_DWORD *)(a2 + 12);
  return result;
}

uint64_t PAL::urlEncodedEntityUnencodableHandler(void *a1, uint64_t a2)
{
  size_t v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  void *v26;
  void *v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;

  v4 = *(unsigned int *)(a2 + 12);
  if (v4 + 19 > *(unsigned int *)(a2 + 8))
  {
    if (v4 >= 0xFFFFFFED)
    {
      __break(0xC471u);
      JUMPOUT(0x1945DD9F0);
    }
    v5 = *(void **)a2;
    v6 = (void *)WTF::fastMalloc((WTF *)(v4 + 19));
    *(_DWORD *)(a2 + 8) = v4 + 19;
    *(_QWORD *)a2 = v6;
    memcpy(v6, v5, v4);
    if (v5)
    {
      if (*(void **)a2 == v5)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v7);
    }
  }
  v8 = *(unsigned int *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 12);
  v10 = v9 + 6;
  if (v9 + 6 > v8)
  {
    v11 = v8 + (v8 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= v10)
      v13 = v9 + 6;
    else
      v13 = v12;
    if (HIDWORD(v13))
    {
      __break(0xC471u);
      JUMPOUT(0x1945DD9F8);
    }
    v14 = *(void **)a2;
    v15 = (void *)WTF::fastMalloc((WTF *)v13);
    *(_DWORD *)(a2 + 8) = v13;
    *(_QWORD *)a2 = v15;
    memcpy(v15, v14, v9);
    if (v14)
    {
      if (*(void **)a2 == v14)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v14, v16);
    }
  }
  v17 = *(unsigned int *)(a2 + 12);
  if (v10 < v17)
    goto LABEL_38;
  v18 = *(_QWORD *)a2 + v17;
  *(_DWORD *)v18 = 624308773;
  *(_WORD *)(v18 + 4) = 13106;
  *(_DWORD *)(a2 + 12) = v10;
  result = (uint64_t)PAL::appendDecimal(a1, a2);
  v20 = *(unsigned int *)(a2 + 8);
  v21 = *(unsigned int *)(a2 + 12);
  v22 = v21 + 3;
  if (v21 + 3 <= v20)
    goto LABEL_32;
  v23 = v20 + (v20 >> 2);
  v24 = v23 >= 0x10 ? v23 + 1 : 16;
  v25 = v24 <= v22 ? v21 + 3 : v24;
  if (HIDWORD(v25))
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x1945DD9E0);
  }
  v26 = *(void **)a2;
  v27 = (void *)WTF::fastMalloc((WTF *)v25);
  *(_DWORD *)(a2 + 8) = v25;
  *(_QWORD *)a2 = v27;
  result = (uint64_t)memcpy(v27, v26, v21);
  if (v26)
  {
    if (*(void **)a2 == v26)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
    }
    result = WTF::fastFree((WTF *)v26, v28);
  }
LABEL_32:
  v29 = *(unsigned int *)(a2 + 12);
  if (v22 < v29)
  {
    __break(0xC471u);
    JUMPOUT(0x1945DD9E8);
  }
  v30 = *(_QWORD *)a2 + v29;
  *(_WORD *)v30 = 13093;
  *(_BYTE *)(v30 + 2) = 66;
  *(_DWORD *)(a2 + 12) = v22;
  return result;
}

uint64_t PAL::TextCodecCJK::decode@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, _BYTE *a6@<X5>, WTF::StringImpl **a7@<X8>)
{
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t (**v16)();
  WTF::StringImpl *v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  char v47;
  __int16 v48;

  v11 = a3;
  v12 = a2;
  v13 = result;
  switch(*(_BYTE *)(result + 8))
  {
    case 0:
      v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      v15 = v14;
      v16 = off_1E31F3BC0;
      goto LABEL_19;
    case 1:
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 1;
      result = WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v44);
      if (!*(_BYTE *)(v13 + 20))
        goto LABEL_25;
      v18 = *(unsigned __int16 *)(v13 + 19);
      if (v18 <= 0xFF)
        goto LABEL_109;
      *(_BYTE *)(v13 + 20) = 0;
      result = PAL::TextCodecCJK::iso2022JPDecode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()(v13, v18, (WTF::StringBuilder *)&v44);
      if ((_DWORD)result)
      {
        *a6 = 1;
        v48 = -3;
        if (v45
          && ((v19 = v46, v46 < *((_DWORD *)v45 + 1)) ? (v20 = v44 == 0) : (v20 = 0),
              v20 && (*((_BYTE *)v45 + 16) & 4) == 0))
        {
          v21 = *((_QWORD *)v45 + 1);
          ++v46;
          *(_WORD *)(v21 + 2 * v19) = -3;
        }
        else
        {
          result = WTF::StringBuilder::append();
        }
        if (a5)
          goto LABEL_23;
      }
LABEL_25:
      if (!*(_BYTE *)(v13 + 14))
        goto LABEL_29;
      v23 = *(unsigned __int16 *)(v13 + 13);
      if (v23 <= 0xFF)
        goto LABEL_109;
      *(_BYTE *)(v13 + 14) = 0;
      if (PAL::TextCodecCJK::iso2022JPDecode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()(v13, v23, (WTF::StringBuilder *)&v44)&& a5)
      {
        goto LABEL_60;
      }
LABEL_29:
      if (!v11)
        goto LABEL_66;
      break;
    case 2:
      v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      v15 = v14;
      v16 = off_1E31F3BE8;
      goto LABEL_19;
    case 3:
      v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      v15 = v14;
      v16 = off_1E31F3C10;
      goto LABEL_19;
    case 4:
      v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      v15 = v14;
      v16 = off_1E31F3C88;
LABEL_19:
      *(_QWORD *)v14 = v16;
      *((_QWORD *)v14 + 1) = v13;
      v44 = v14;
      PAL::TextCodecCJK::decodeCommon(a7, v13, v12, v11, a4, a5, a6, &v44);
      return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v15 + 8))(v15);
    case 5:
    case 6:
      return PAL::TextCodecCJK::gb18030Decode(a7, (_BYTE *)result, a2, a3, a4, a5, a6);
    default:
      *a7 = 0;
      return result;
  }
  do
  {
    result = PAL::TextCodecCJK::iso2022JPDecode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()(v13, *v12, (WTF::StringBuilder *)&v44);
    if ((_DWORD)result)
    {
      *a6 = 1;
      v48 = -3;
      if (v45
        && ((v24 = v46, v46 < *((_DWORD *)v45 + 1)) ? (v25 = v44 == 0) : (v25 = 0),
            v25 && (*((_BYTE *)v45 + 16) & 4) == 0))
      {
        v26 = *((_QWORD *)v45 + 1);
        ++v46;
        *(_WORD *)(v26 + 2 * v24) = -3;
      }
      else
      {
        result = WTF::StringBuilder::append();
      }
      if (a5)
        goto LABEL_23;
    }
    if (*(_BYTE *)(v13 + 20))
    {
      v27 = *(unsigned __int16 *)(v13 + 19);
      if (v27 <= 0xFF)
        goto LABEL_109;
      *(_BYTE *)(v13 + 20) = 0;
      result = PAL::TextCodecCJK::iso2022JPDecode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()(v13, v27, (WTF::StringBuilder *)&v44);
      if ((_DWORD)result)
      {
        *a6 = 1;
        v48 = -3;
        if (v45
          && ((v28 = v46, v46 < *((_DWORD *)v45 + 1)) ? (v29 = v44 == 0) : (v29 = 0),
              v29 && (*((_BYTE *)v45 + 16) & 4) == 0))
        {
          v30 = *((_QWORD *)v45 + 1);
          ++v46;
          *(_WORD *)(v30 + 2 * v28) = -3;
        }
        else
        {
          result = WTF::StringBuilder::append();
        }
        if (a5)
        {
LABEL_23:
          *(_BYTE *)(v13 + 18) = 0;
          v22 = v44;
          if (v44)
            goto LABEL_97;
          goto LABEL_96;
        }
      }
    }
    if (*(_BYTE *)(v13 + 14))
    {
      v31 = *(unsigned __int16 *)(v13 + 13);
      if (v31 <= 0xFF)
      {
LABEL_109:
        __break(1u);
        return result;
      }
      *(_BYTE *)(v13 + 14) = 0;
      if (PAL::TextCodecCJK::iso2022JPDecode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()(v13, v31, (WTF::StringBuilder *)&v44))
      {
        if (a5)
        {
LABEL_60:
          *a6 = 1;
          v48 = -3;
          if (!v45 || (v32 = v46, v46 >= *((_DWORD *)v45 + 1)) || v44 || (*((_BYTE *)v45 + 16) & 4) != 0)
          {
            WTF::StringBuilder::append();
            *(_BYTE *)(v13 + 18) = 0;
            v22 = v44;
            if (v44)
              goto LABEL_97;
          }
          else
          {
            v33 = *((_QWORD *)v45 + 1);
            ++v46;
            *(_WORD *)(v33 + 2 * v32) = -3;
            *(_BYTE *)(v13 + 18) = 0;
            v22 = v44;
            if (v44)
              goto LABEL_97;
          }
          goto LABEL_96;
        }
      }
    }
    ++v12;
    --v11;
  }
  while (v11);
LABEL_66:
  if (!a4)
    goto LABEL_95;
  v34 = *(unsigned __int8 *)(v13 + 10);
  if (v34 != 6)
  {
    if (v34 == 5)
    {
LABEL_71:
      *a6 = 1;
      v48 = -3;
      if (!v45 || (v35 = v46, v46 >= *((_DWORD *)v45 + 1)) || v44 || (*((_BYTE *)v45 + 16) & 4) != 0)
      {
        WTF::StringBuilder::append();
        v22 = v44;
        if (v44)
          goto LABEL_97;
      }
      else
      {
        v36 = *((_QWORD *)v45 + 1);
        ++v46;
        *(_WORD *)(v36 + 2 * v35) = -3;
        v22 = v44;
        if (v44)
          goto LABEL_97;
      }
      goto LABEL_96;
    }
    if (v34 == 4)
    {
      *(_BYTE *)(v13 + 10) = 3;
      goto LABEL_71;
    }
LABEL_95:
    v22 = v44;
    if (v44)
      goto LABEL_97;
    goto LABEL_96;
  }
  *a6 = 1;
  v48 = -3;
  if (!v45 || (v37 = v46, v46 >= *((_DWORD *)v45 + 1)) || v44 || (*((_BYTE *)v45 + 16) & 4) != 0)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v38 = *((_QWORD *)v45 + 1);
    ++v46;
    *(_WORD *)(v38 + 2 * v37) = -3;
  }
  v39 = *(unsigned __int8 *)(v13 + 18);
  if (!*(_BYTE *)(v13 + 18))
    goto LABEL_95;
  *(_BYTE *)(v13 + 18) = 0;
  LOBYTE(v48) = v39;
  if (!v45 || (v40 = v46, v46 >= *((_DWORD *)v45 + 1)) || v44)
  {
    WTF::StringBuilder::append();
    goto LABEL_95;
  }
  v41 = *((_DWORD *)v45 + 4);
  v42 = *((_QWORD *)v45 + 1);
  ++v46;
  if ((v41 & 4) != 0)
  {
    *(_BYTE *)(v42 + v40) = v39;
    v22 = v44;
    if (v44)
      goto LABEL_97;
  }
  else
  {
    *(_WORD *)(v42 + 2 * v40) = v39;
    v22 = v44;
    if (v44)
      goto LABEL_97;
  }
LABEL_96:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v44);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v44);
  v22 = v44;
  if (!v44)
    goto LABEL_98;
LABEL_97:
  *(_DWORD *)v22 += 2;
LABEL_98:
  *a7 = v22;
  v43 = v45;
  v45 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::destroy(v43, v17);
      result = (uint64_t)v44;
      v44 = 0;
      if (!result)
        return result;
      goto LABEL_104;
    }
    *(_DWORD *)v43 -= 2;
  }
  result = (uint64_t)v44;
  v44 = 0;
  if (!result)
    return result;
LABEL_104:
  if (*(_DWORD *)result == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
  *(_DWORD *)result -= 2;
  return result;
}

_BYTE *PAL::TextCodecCJK::encode@<X0>(_BYTE *result@<X0>, WTF *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, WTF *a5@<X8>)
{
  WTF *v5;
  _QWORD *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t);
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF *v15;
  WTF *v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  WTF *v25;
  WTF *v26;
  uint64_t (*v27)(void *, uint64_t);
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  WTF *v31;
  WTF *v32;
  __int128 v33;
  char *v34;
  int8x16_t v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  uint64_t (*v42)(void *, uint64_t);
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  WTF *v46;
  WTF *v47;
  __int128 v48;
  char *v49;
  int8x16_t v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  char *v54;
  char *v55;
  WTF *v56;
  uint64_t (*v57)(void *, uint64_t);
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  WTF *v61;
  WTF *v62;
  __int128 v63;
  char *v64;
  int8x16_t v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  char *v69;
  char *v70;
  _QWORD *v71;
  uint64_t (*v72)(void *, uint64_t);
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  WTF *v78;
  WTF *v79;
  __int128 v80;
  char *v81;
  int8x16_t v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  char *v86;
  char *v87;
  WTF *v88;
  uint64_t (*v89)(void *, uint64_t);
  WTF *v90;
  uint64_t (*v91)(void *, uint64_t);
  WTF *v92;
  WTF *v93;
  WTF *v94;
  unint64_t v95;
  unint64_t v96;
  WTF *v97;
  WTF *v98;
  __int16 v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  size_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  void *v109;
  unint64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  unint64_t v117;
  unsigned int *v118;
  char *v119;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  char *v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t v127;
  BOOL v128;
  BOOL v129;
  unsigned int v130;
  uint64_t v131;
  char v132;
  int v133;
  size_t v134;
  char v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  _BYTE *v139;
  void *v140;
  _BYTE *v141;
  WTF *v142;
  unint64_t v143;
  unint64_t v144;
  WTF *v145;
  WTF *v146;
  __int16 v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  size_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  size_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  _BYTE *v159;
  void *v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _BYTE *v164;
  void *v165;
  unint64_t v166;
  unint64_t v167;
  _BYTE *v168;
  void *v169;
  _BYTE *v170;
  char v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unsigned __int16 *v178;
  unsigned int v179;
  unint64_t v180;
  unint64_t v181;
  unsigned __int16 *v182;
  unsigned __int16 *v183;
  unsigned int v184;
  unint64_t v185;
  unint64_t v186;
  unsigned __int16 *v187;
  unsigned __int16 *v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  char v192;
  size_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  _BYTE *v197;
  void *v198;
  _BYTE *v199;
  unsigned int v200;
  unsigned int v201;
  int v202;
  char v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  BOOL v207;
  WTF *v209;
  unint64_t v210;
  unint64_t v211;
  WTF *v212;
  WTF *v213;
  __int16 v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  size_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  _BYTE *v222;
  void *v223;
  unint64_t v224;
  unsigned __int16 *v225;
  unint64_t v226;
  unint64_t v227;
  unsigned __int16 *v228;
  unsigned __int16 *v229;
  unsigned int v230;
  unint64_t v231;
  BOOL v232;
  unsigned __int16 v233;
  size_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  _BYTE *v238;
  void *v239;
  _BYTE *v240;
  int v241;
  size_t v242;
  char v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  void *v248;
  WTF *v250;
  unint64_t v251;
  unint64_t v252;
  WTF *v253;
  WTF *v254;
  __int16 v255;
  unsigned int v256;
  int v257;
  unsigned int v258;
  size_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  size_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  _BYTE *v267;
  void *v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  _BYTE *v272;
  void *v273;
  size_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  _BYTE *v278;
  void *v279;
  _BYTE *v280;
  _BYTE *v281;
  char v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  unsigned __int16 *v286;
  unint64_t v287;
  unint64_t v288;
  unsigned __int16 *v289;
  unsigned __int16 *v290;
  unsigned int v291;
  int v292;
  unint64_t v293;
  unint64_t v294;
  _BYTE *v295;
  void *v296;
  size_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  _BYTE *v301;
  void *v302;
  _BYTE *v303;
  int v304;
  unint64_t v305;
  unint64_t v306;
  WTF *v307;
  unint64_t v308;
  unint64_t v309;
  WTF *v310;
  WTF *v311;
  __int16 v312;
  uint64_t v313;
  int v314;
  unsigned int v315;
  unint64_t v316;
  BOOL v317;
  WTF *v318;
  _QWORD *v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint8x8_t *v331;
  uint16x8_t *v332;
  unint64_t v333;
  uint8x16_t v334;
  uint16x8_t v335;
  uint16x8_t v336;
  uint8x8_t *v337;
  uint16x8_t *v338;
  unint64_t v339;
  uint8x8_t v340;
  uint8x8_t *v341;
  uint16x8_t *v342;
  unint64_t v343;
  uint8x16_t v344;
  uint16x8_t v345;
  uint16x8_t v346;
  uint8x8_t *v347;
  uint16x8_t *v348;
  unint64_t v349;
  uint8x8_t v350;
  uint8x8_t *v351;
  uint16x8_t *v352;
  unint64_t v353;
  uint8x16_t v354;
  uint16x8_t v355;
  uint16x8_t v356;
  uint8x8_t *v357;
  uint16x8_t *v358;
  unint64_t v359;
  uint8x8_t v360;
  uint8x8_t *v361;
  uint16x8_t *v362;
  unint64_t v363;
  uint8x16_t v364;
  uint16x8_t v365;
  uint16x8_t v366;
  uint8x8_t *v367;
  uint16x8_t *v368;
  unint64_t v369;
  uint8x8_t v370;
  uint8x8_t *v371;
  uint16x8_t *v372;
  unint64_t v373;
  uint8x16_t v374;
  uint16x8_t v375;
  uint16x8_t v376;
  uint8x8_t *v377;
  uint16x8_t *v378;
  unint64_t v379;
  uint8x8_t v380;
  char v381;
  _QWORD *v382;
  _BYTE *v383;
  _QWORD *v384;
  _QWORD v385[3];
  _QWORD v386[2];
  char v387;
  WTF *v388;
  unint64_t v389;
  _BYTE v390[64];
  WTF *v391;
  unint64_t v392;
  int8x16x2_t v393;
  int8x16x2_t v394;
  int8x16x2_t v395;
  int8x16x2_t v396;
  int8x16x2_t v397;
  int8x16x2_t v398;
  int8x16x2_t v399;
  int8x16x2_t v400;
  int8x16x2_t v401;
  int8x16x2_t v402;
  int8x16x2_t v403;
  int8x16x2_t v404;
  int8x16x2_t v405;
  int8x16x2_t v406;
  int8x16x2_t v407;

  v5 = a5;
  switch(result[8])
  {
    case 0:
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v11 = PAL::entityUnencodableHandler;
      if (a4)
        v11 = PAL::urlEncodedEntityUnencodableHandler;
      *v9 = off_1E31F3C60;
      v9[1] = v11;
      v382 = v9;
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      v12 = a3;
      if ((_DWORD)a3)
      {
        v13 = WTF::fastMalloc((WTF *)a3);
        *((_DWORD *)v5 + 2) = a3;
        *(_QWORD *)v5 = v13;
      }
      v388 = (WTF *)v390;
      v389 = 32;
      v391 = 0;
      v392 = 0;
      if ((a3 & 0xFF00000000) == 0)
      {
        v93 = (WTF *)v390;
        v391 = a2;
        v392 = a3;
        if (!(_DWORD)a3)
          goto LABEL_319;
        goto LABEL_419;
      }
      if (a3 <= 0x20uLL)
      {
        HIDWORD(v389) = a3;
        v15 = (WTF *)v390;
        v16 = (WTF *)v390;
      }
      else
      {
        if (a3 <= 0x29uLL)
          v14 = 41;
        else
          v14 = a3;
        if (v14 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x1945E00CCLL);
        }
        v15 = (WTF *)WTF::fastMalloc((WTF *)(2 * v14));
        v388 = v15;
        v389 = __PAIR64__(a3, v14);
        if (a3 < 0x40uLL)
        {
          v16 = v15;
          v250 = (WTF *)((char *)v15 + 2 * a3);
          if (v15 == v250)
            goto LABEL_418;
LABEL_413:
          v251 = v250 - v16 - 2;
          if (v251 < 0xE
            || (v252 = (WTF *)((char *)v15 + 2 * a3) - v16 - 2, v16 < (WTF *)((char *)a2 + (v252 >> 1) + 1))
            && a2 < (WTF *)((char *)v16 + (v252 & 0xFFFFFFFFFFFFFFFELL) + 2))
          {
            v253 = v16;
            v254 = a2;
            goto LABEL_417;
          }
          v327 = (v251 >> 1) + 1;
          if (v251 >= 0x3E)
          {
            v328 = v327 & 0xFFFFFFFFFFFFFFE0;
            v361 = (uint8x8_t *)((char *)a2 + 16);
            v362 = (uint16x8_t *)((char *)v16 + 32);
            v363 = v327 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v364 = *(uint8x16_t *)v361[-2].i8;
              v365 = vmovl_u8(*v361);
              v366 = vmovl_high_u8(*(uint8x16_t *)v361->i8);
              v362[-2] = vmovl_u8(*(uint8x8_t *)v364.i8);
              v362[-1] = vmovl_high_u8(v364);
              *v362 = v365;
              v362[1] = v366;
              v362 += 4;
              v361 += 4;
              v363 -= 32;
            }
            while (v363);
            if (v327 == v328)
              goto LABEL_418;
            if ((v327 & 0x18) == 0)
            {
              v254 = (WTF *)((char *)a2 + v328);
              v253 = (WTF *)((char *)v16 + 2 * v328);
              do
              {
LABEL_417:
                v255 = *(unsigned __int8 *)v254;
                v254 = (WTF *)((char *)v254 + 1);
                *(_WORD *)v253 = v255;
                v253 = (WTF *)((char *)v253 + 2);
              }
              while (v253 != v250);
              goto LABEL_418;
            }
          }
          else
          {
            v328 = 0;
          }
          v253 = (WTF *)((char *)v16 + 2 * (v327 & 0xFFFFFFFFFFFFFFF8));
          v254 = (WTF *)((char *)a2 + (v327 & 0xFFFFFFFFFFFFFFF8));
          v367 = (uint8x8_t *)((char *)a2 + v328);
          v368 = (uint16x8_t *)((char *)v16 + 2 * v328);
          v369 = v328 - (v327 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v370 = *v367++;
            *v368++ = vmovl_u8(v370);
            v369 += 8;
          }
          while (v369);
          if (v327 != (v327 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_417;
LABEL_418:
          v93 = v388;
          v12 = HIDWORD(v389);
          a2 = v388;
          v391 = v388;
          v392 = HIDWORD(v389);
          if (!HIDWORD(v389))
            goto LABEL_319;
LABEL_419:
          while (1)
          {
            v256 = *(unsigned __int16 *)a2;
            if ((v256 & 0xFC00) == 0xD800)
              break;
            if (v256 > 0x7F)
              goto LABEL_434;
            v259 = *((unsigned int *)v5 + 3);
            if ((_DWORD)v259 == *((_DWORD *)v5 + 2))
            {
              v260 = v259 + (v259 >> 2);
              if (v260 >= 0x10)
                v261 = v260 + 1;
              else
                v261 = 16;
              if (v261 <= v259 + 1)
                v262 = v259 + 1;
              else
                v262 = v261;
              if (HIDWORD(v262))
              {
                __break(0xC471u);
                JUMPOUT(0x1945E004CLL);
              }
LABEL_504:
              v295 = *(_BYTE **)v5;
              v296 = (void *)WTF::fastMalloc((WTF *)v262);
              *((_DWORD *)v5 + 2) = v262;
              *(_QWORD *)v5 = v296;
              memcpy(v296, v295, v259);
              if (v295)
              {
                if (*(_BYTE **)v5 == v295)
                {
                  *(_QWORD *)v5 = 0;
                  *((_DWORD *)v5 + 2) = 0;
                }
                WTF::fastFree((WTF *)v295, v10);
              }
              *(_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3)) = v256;
LABEL_509:
              ++*((_DWORD *)v5 + 3);
              if (v12 != 1)
                goto LABEL_510;
              goto LABEL_479;
            }
LABEL_541:
            *(_BYTE *)(*(_QWORD *)v5 + v259) = v256;
            ++*((_DWORD *)v5 + 3);
            if (v12 != 1)
            {
LABEL_510:
              v283 = 1;
              if ((*(_WORD *)a2 & 0xFC00) == 0xD800)
              {
                if (v12 <= 1)
                  goto LABEL_568;
                v283 = 1;
                if ((*((_WORD *)a2 + 1) & 0xFC00) == 0xDC00)
                  v283 = 2;
              }
              goto LABEL_514;
            }
LABEL_479:
            v283 = 1;
LABEL_514:
            v128 = v12 >= v283;
            v12 -= v283;
            if (!v128)
              goto LABEL_568;
            a2 = (WTF *)((char *)a2 + 2 * v283);
            if (!v12)
              goto LABEL_318;
          }
          if (v12 != 1)
          {
            v257 = *((unsigned __int16 *)a2 + 1);
            v129 = (v257 & 0xFC00) == 56320;
            v258 = (v256 << 10) - 56613888 + v257;
            if (v129)
              v256 = v258;
          }
LABEL_434:
          if (v256 == 8254)
          {
            v263 = *((unsigned int *)v5 + 3);
            if ((_DWORD)v263 != *((_DWORD *)v5 + 2))
            {
              v281 = *(_BYTE **)v5;
              v282 = 126;
LABEL_478:
              v281[v263] = v282;
              ++*((_DWORD *)v5 + 3);
              if (v12 != 1)
                goto LABEL_510;
              goto LABEL_479;
            }
            v269 = v263 + (v263 >> 2);
            if (v269 >= 0x10)
              v270 = v269 + 1;
            else
              v270 = 16;
            if (v270 <= v263 + 1)
              v271 = v263 + 1;
            else
              v271 = v270;
            if (HIDWORD(v271))
            {
              __break(0xC471u);
              JUMPOUT(0x1945E0074);
            }
            v272 = *(_BYTE **)v5;
            v273 = (void *)WTF::fastMalloc((WTF *)v271);
            *((_DWORD *)v5 + 2) = v271;
            *(_QWORD *)v5 = v273;
            memcpy(v273, v272, v263);
            if (v272)
            {
              if (*(_BYTE **)v5 == v272)
              {
                *(_QWORD *)v5 = 0;
                *((_DWORD *)v5 + 2) = 0;
              }
              WTF::fastFree((WTF *)v272, v10);
            }
            *(_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3)) = 126;
            goto LABEL_509;
          }
          if (v256 == 165)
          {
            v263 = *((unsigned int *)v5 + 3);
            if ((_DWORD)v263 != *((_DWORD *)v5 + 2))
            {
              v281 = *(_BYTE **)v5;
              v282 = 92;
              goto LABEL_478;
            }
            v264 = v263 + (v263 >> 2);
            if (v264 >= 0x10)
              v265 = v264 + 1;
            else
              v265 = 16;
            if (v265 <= v263 + 1)
              v266 = v263 + 1;
            else
              v266 = v265;
            if (HIDWORD(v266))
            {
              __break(0xC471u);
              JUMPOUT(0x1945E006CLL);
            }
            v267 = *(_BYTE **)v5;
            v268 = (void *)WTF::fastMalloc((WTF *)v266);
            *((_DWORD *)v5 + 2) = v266;
            *(_QWORD *)v5 = v268;
            memcpy(v268, v267, v263);
            if (v267)
            {
              if (*(_BYTE **)v5 == v267)
              {
                *(_QWORD *)v5 = 0;
                *((_DWORD *)v5 + 2) = 0;
              }
              WTF::fastFree((WTF *)v267, v10);
            }
            *(_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3)) = 92;
            goto LABEL_509;
          }
          if (v256 - 65377 > 0x3E)
          {
            if (v256 == 8722)
              v284 = 65293;
            else
              v284 = v256;
            v285 = atomic_load(&qword_1ECE7EAF0);
            if (v285 != -1)
            {
              v385[0] = &v384;
              v386[0] = v385;
              std::__call_once(&qword_1ECE7EAF0, v386, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::jis0208EncodeIndex(void)::$_0 &&>>);
            }
            if (WORD1(v284))
              goto LABEL_493;
            v286 = (unsigned __int16 *)_MergedGlobals_77;
            v287 = 7724;
            do
            {
              v288 = v287 >> 1;
              v289 = &v286[2 * (v287 >> 1)];
              v291 = *v289;
              v290 = v289 + 2;
              v287 += ~(v287 >> 1);
              if (v284 > v291)
                v286 = v290;
              else
                v287 = v288;
            }
            while (v287);
            if (v286 == (unsigned __int16 *)(_MergedGlobals_77 + 30896) || v284 < *v286)
            {
LABEL_493:
              (*(void (**)(_QWORD *, uint64_t, WTF *))(*v382 + 16))(v382, v284, v5);
              if (v12 != 1)
                goto LABEL_510;
              goto LABEL_479;
            }
            LOWORD(v256) = v286[1];
            v297 = *((unsigned int *)v5 + 3);
            if ((_DWORD)v297 == *((_DWORD *)v5 + 2))
            {
              v298 = v297 + (v297 >> 2);
              if (v298 >= 0x10)
                v299 = v298 + 1;
              else
                v299 = 16;
              if (v299 <= v297 + 1)
                v300 = v297 + 1;
              else
                v300 = v299;
              if (HIDWORD(v300))
              {
                __break(0xC471u);
                JUMPOUT(0x1945E00BCLL);
              }
              v301 = *(_BYTE **)v5;
              v302 = (void *)WTF::fastMalloc((WTF *)v300);
              *((_DWORD *)v5 + 2) = v300;
              *(_QWORD *)v5 = v302;
              memcpy(v302, v301, v297);
              if (v301)
              {
                if (*(_BYTE **)v5 == v301)
                {
                  *(_QWORD *)v5 = 0;
                  *((_DWORD *)v5 + 2) = 0;
                }
                WTF::fastFree((WTF *)v301, v10);
              }
              v303 = (_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3));
            }
            else
            {
              v303 = (_BYTE *)(*(_QWORD *)v5 + v297);
            }
            *v303 = (unsigned __int16)v256 / 0x5Eu - 95;
            v304 = *((_DWORD *)v5 + 2);
            v259 = (*((_DWORD *)v5 + 3) + 1);
            *((_DWORD *)v5 + 3) = v259;
            LOBYTE(v256) = (unsigned __int16)v256 % 0x5Eu - 95;
            if ((_DWORD)v259 == v304)
            {
              v305 = v259 + (v259 >> 2);
              if (v305 >= 0x10)
                v306 = v305 + 1;
              else
                v306 = 16;
              if (v306 <= v259 + 1)
                v262 = v259 + 1;
              else
                v262 = v306;
              if (HIDWORD(v262))
              {
                __break(0xC471u);
                JUMPOUT(0x1945E00C4);
              }
              goto LABEL_504;
            }
          }
          else
          {
            v274 = *((unsigned int *)v5 + 3);
            if ((_DWORD)v274 == *((_DWORD *)v5 + 2))
            {
              v275 = v274 + (v274 >> 2);
              if (v275 >= 0x10)
                v276 = v275 + 1;
              else
                v276 = 16;
              if (v276 <= v274 + 1)
                v277 = v274 + 1;
              else
                v277 = v276;
              if (HIDWORD(v277))
              {
                __break(0xC471u);
                JUMPOUT(0x1945E00ACLL);
              }
              v278 = *(_BYTE **)v5;
              v279 = (void *)WTF::fastMalloc((WTF *)v277);
              *((_DWORD *)v5 + 2) = v277;
              *(_QWORD *)v5 = v279;
              memcpy(v279, v278, v274);
              if (v278)
              {
                if (*(_BYTE **)v5 == v278)
                {
                  *(_QWORD *)v5 = 0;
                  *((_DWORD *)v5 + 2) = 0;
                }
                WTF::fastFree((WTF *)v278, v10);
              }
              v280 = (_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3));
            }
            else
            {
              v280 = (_BYTE *)(*(_QWORD *)v5 + v274);
            }
            *v280 = -114;
            v292 = *((_DWORD *)v5 + 2);
            v259 = (*((_DWORD *)v5 + 3) + 1);
            *((_DWORD *)v5 + 3) = v259;
            LOBYTE(v256) = v256 + 64;
            if ((_DWORD)v259 == v292)
            {
              v293 = v259 + (v259 >> 2);
              if (v293 >= 0x10)
                v294 = v293 + 1;
              else
                v294 = 16;
              if (v294 <= v259 + 1)
                v262 = v259 + 1;
              else
                v262 = v294;
              if (HIDWORD(v262))
              {
                __break(0xC471u);
                JUMPOUT(0x1945E00B4);
              }
              goto LABEL_504;
            }
          }
          goto LABEL_541;
        }
        v16 = (WTF *)((char *)v15 + 2 * (a3 & 0xFFFFFFC0));
        v17 = 0uLL;
        v18 = (char *)v15;
        do
        {
          v393.val[0] = *(int8x16_t *)a2;
          v19 = *((int8x16_t *)a2 + 1);
          v398.val[0] = (int8x16_t)*((_OWORD *)a2 + 2);
          v20 = *((_OWORD *)a2 + 3);
          a2 = (WTF *)((char *)a2 + 64);
          v21 = v20;
          v398.val[1] = 0uLL;
          v403.val[0] = v19;
          v393.val[1] = 0uLL;
          v22 = v18;
          vst2q_s8(v22, v393);
          v22 += 32;
          v403.val[1] = 0uLL;
          vst2q_s8(v22, v403);
          v23 = v18 + 64;
          vst2q_s8(v23, v398);
          v24 = v18 + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
          v18 += 128;
        }
        while (v18 != (char *)v16);
      }
      v250 = (WTF *)((char *)v15 + 2 * a3);
      if (v16 == v250)
        goto LABEL_418;
      goto LABEL_413;
    case 1:
      v71 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v72 = PAL::entityUnencodableHandler;
      if (a4)
        v72 = PAL::urlEncodedEntityUnencodableHandler;
      *v71 = off_1E31F3C60;
      v71[1] = v72;
      v383 = v71;
      v387 = 0;
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      v73 = a3;
      if ((_DWORD)a3)
      {
        v74 = WTF::fastMalloc((WTF *)a3);
        *((_DWORD *)v5 + 2) = a3;
        *(_QWORD *)v5 = v74;
      }
      v386[0] = &v387;
      v386[1] = v5;
      v385[0] = &v387;
      v385[1] = v386;
      v385[2] = &v383;
      v384 = 0;
      v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
      *v75 = off_1E31F3A80;
      v75[1] = &v387;
      v75[2] = v385;
      v75[3] = v5;
      v75[4] = v386;
      v75[5] = &v384;
      v76 = v384;
      v384 = v75;
      if (v76)
        (*(void (**)(_QWORD *))(*v76 + 8))(v76);
      v5 = (WTF *)v390;
      v388 = (WTF *)v390;
      v389 = 32;
      v391 = 0;
      v392 = 0;
      if ((a3 & 0xFF00000000) == 0)
        goto LABEL_551;
      if (a3 <= 0x20uLL)
      {
        HIDWORD(v389) = a3;
        v78 = (WTF *)v390;
        v79 = (WTF *)v390;
        goto LABEL_544;
      }
      if (a3 <= 0x29uLL)
        v77 = 41;
      else
        v77 = a3;
      if (v77 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x1945E00ECLL);
      }
      v78 = (WTF *)WTF::fastMalloc((WTF *)(2 * v77));
      v388 = v78;
      v389 = __PAIR64__(a3, v77);
      if (a3 >= 0x40uLL)
      {
        v79 = (WTF *)((char *)v78 + 2 * (a3 & 0xFFFFFFC0));
        v80 = 0uLL;
        v81 = (char *)v78;
        do
        {
          v397.val[0] = *(int8x16_t *)a2;
          v82 = *((int8x16_t *)a2 + 1);
          v402.val[0] = (int8x16_t)*((_OWORD *)a2 + 2);
          v83 = *((_OWORD *)a2 + 3);
          a2 = (WTF *)((char *)a2 + 64);
          v84 = v83;
          v402.val[1] = 0uLL;
          v407.val[0] = v82;
          v397.val[1] = 0uLL;
          v85 = v81;
          vst2q_s8(v85, v397);
          v85 += 32;
          v407.val[1] = 0uLL;
          vst2q_s8(v85, v407);
          v86 = v81 + 64;
          vst2q_s8(v86, v402);
          v87 = v81 + 96;
          vst2q_s8(v87, *(int8x16x2_t *)(&v80 - 1));
          v81 += 128;
        }
        while (v81 != (char *)v79);
LABEL_544:
        v307 = (WTF *)((char *)v78 + 2 * a3);
        if (v79 == v307)
          goto LABEL_550;
        goto LABEL_545;
      }
      v79 = v78;
      v307 = (WTF *)((char *)v78 + 2 * a3);
      if (v78 == v307)
        goto LABEL_550;
LABEL_545:
      v308 = v307 - v79 - 2;
      if (v308 < 0xE
        || (v309 = (WTF *)((char *)v78 + 2 * a3) - v79 - 2, v79 < (WTF *)((char *)a2 + (v309 >> 1) + 1))
        && a2 < (WTF *)((char *)v79 + (v309 & 0xFFFFFFFFFFFFFFFELL) + 2))
      {
        v310 = v79;
        v311 = a2;
        goto LABEL_549;
      }
      v329 = (v308 >> 1) + 1;
      if (v308 >= 0x3E)
      {
        v330 = v329 & 0xFFFFFFFFFFFFFFE0;
        v371 = (uint8x8_t *)((char *)a2 + 16);
        v372 = (uint16x8_t *)((char *)v79 + 32);
        v373 = v329 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v374 = *(uint8x16_t *)v371[-2].i8;
          v375 = vmovl_u8(*v371);
          v376 = vmovl_high_u8(*(uint8x16_t *)v371->i8);
          v372[-2] = vmovl_u8(*(uint8x8_t *)v374.i8);
          v372[-1] = vmovl_high_u8(v374);
          *v372 = v375;
          v372[1] = v376;
          v372 += 4;
          v371 += 4;
          v373 -= 32;
        }
        while (v373);
        if (v329 == v330)
          goto LABEL_550;
        if ((v329 & 0x18) == 0)
        {
          v311 = (WTF *)((char *)a2 + v330);
          v310 = (WTF *)((char *)v79 + 2 * v330);
          do
          {
LABEL_549:
            v312 = *(unsigned __int8 *)v311;
            v311 = (WTF *)((char *)v311 + 1);
            *(_WORD *)v310 = v312;
            v310 = (WTF *)((char *)v310 + 2);
          }
          while (v310 != v307);
          goto LABEL_550;
        }
      }
      else
      {
        v330 = 0;
      }
      v310 = (WTF *)((char *)v79 + 2 * (v329 & 0xFFFFFFFFFFFFFFF8));
      v311 = (WTF *)((char *)a2 + (v329 & 0xFFFFFFFFFFFFFFF8));
      v377 = (uint8x8_t *)((char *)a2 + v330);
      v378 = (uint16x8_t *)((char *)v79 + 2 * v330);
      v379 = v330 - (v329 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v380 = *v377++;
        *v378++ = vmovl_u8(v380);
        v379 += 8;
      }
      while (v379);
      if (v329 != (v329 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_549;
LABEL_550:
      a2 = v388;
      v73 = HIDWORD(v389);
LABEL_551:
      v391 = a2;
      v392 = v73;
      if (v73)
      {
        do
        {
          v313 = *(unsigned __int16 *)a2;
          if (v73 != 1 && (v313 & 0xFC00) == 0xD800)
          {
            v314 = *((unsigned __int16 *)a2 + 1);
            v129 = (v314 & 0xFC00) == 56320;
            v315 = ((_DWORD)v313 << 10) - 56613888 + v314;
            if (v129)
              v313 = v315;
            else
              v313 = *(unsigned __int16 *)a2;
          }
          (*(void (**)(_QWORD *, uint64_t))(*v384 + 16))(v384, v313);
          if (v73 == 1)
          {
            v316 = 1;
            v73 = 0;
            v317 = 1;
          }
          else
          {
            v316 = 1;
            if ((*(_WORD *)a2 & 0xFC00) == 0xD800)
            {
              if ((*((_WORD *)a2 + 1) & 0xFC00) == 0xDC00)
                v316 = 2;
              else
                v316 = 1;
            }
            v128 = v73 >= v316;
            v73 -= v316;
            v317 = v73 == 0;
            if (!v128)
              goto LABEL_568;
          }
          a2 = (WTF *)((char *)a2 + 2 * v316);
        }
        while (!v317);
      }
LABEL_569:
      if (v387)
        PAL::iso2022JPEncode(WTF::StringView,WTF::Function<void ()(char32_t,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_1::operator()((uint64_t)v386);
      v318 = v388;
      if (v5 != v388 && v388 != 0)
      {
        v388 = 0;
        LODWORD(v389) = 0;
        WTF::fastFree(v318, v10);
      }
      v320 = v384;
      v384 = 0;
      if (v320)
        (*(void (**)(_QWORD *))(*v320 + 8))(v320);
      result = v383;
      v383 = 0;
      if (result)
        return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
      return result;
    case 2:
      v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v42 = PAL::entityUnencodableHandler;
      if (a4)
        v42 = PAL::urlEncodedEntityUnencodableHandler;
      *v41 = off_1E31F3C60;
      v41[1] = v42;
      v382 = v41;
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      v43 = a3;
      if ((_DWORD)a3)
      {
        v44 = WTF::fastMalloc((WTF *)a3);
        *((_DWORD *)v5 + 2) = a3;
        *(_QWORD *)v5 = v44;
      }
      v388 = (WTF *)v390;
      v389 = 32;
      v391 = 0;
      v392 = 0;
      if ((a3 & 0xFF00000000) != 0)
      {
        if (a3 <= 0x20uLL)
        {
          HIDWORD(v389) = a3;
          v46 = (WTF *)v390;
          v47 = (WTF *)v390;
        }
        else
        {
          if (a3 <= 0x29uLL)
            v45 = 41;
          else
            v45 = a3;
          if (v45 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x1945E00DCLL);
          }
          v46 = (WTF *)WTF::fastMalloc((WTF *)(2 * v45));
          v388 = v46;
          v389 = __PAIR64__(a3, v45);
          if (a3 < 0x40uLL)
          {
            v47 = v46;
            v142 = (WTF *)((char *)v46 + 2 * a3);
            if (v46 == v142)
              goto LABEL_185;
LABEL_180:
            v143 = v142 - v47 - 2;
            if (v143 < 0xE
              || (v144 = (WTF *)((char *)v46 + 2 * a3) - v47 - 2,
                  v47 < (WTF *)((char *)a2 + (v144 >> 1) + 1))
              && a2 < (WTF *)((char *)v47 + (v144 & 0xFFFFFFFFFFFFFFFELL) + 2))
            {
              v145 = v47;
              v146 = a2;
              goto LABEL_184;
            }
            v323 = (v143 >> 1) + 1;
            if (v143 >= 0x3E)
            {
              v324 = v323 & 0xFFFFFFFFFFFFFFE0;
              v341 = (uint8x8_t *)((char *)a2 + 16);
              v342 = (uint16x8_t *)((char *)v47 + 32);
              v343 = v323 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v344 = *(uint8x16_t *)v341[-2].i8;
                v345 = vmovl_u8(*v341);
                v346 = vmovl_high_u8(*(uint8x16_t *)v341->i8);
                v342[-2] = vmovl_u8(*(uint8x8_t *)v344.i8);
                v342[-1] = vmovl_high_u8(v344);
                *v342 = v345;
                v342[1] = v346;
                v342 += 4;
                v341 += 4;
                v343 -= 32;
              }
              while (v343);
              if (v323 == v324)
                goto LABEL_185;
              if ((v323 & 0x18) == 0)
              {
                v146 = (WTF *)((char *)a2 + v324);
                v145 = (WTF *)((char *)v47 + 2 * v324);
                do
                {
LABEL_184:
                  v147 = *(unsigned __int8 *)v146;
                  v146 = (WTF *)((char *)v146 + 1);
                  *(_WORD *)v145 = v147;
                  v145 = (WTF *)((char *)v145 + 2);
                }
                while (v145 != v142);
                goto LABEL_185;
              }
            }
            else
            {
              v324 = 0;
            }
            v145 = (WTF *)((char *)v47 + 2 * (v323 & 0xFFFFFFFFFFFFFFF8));
            v146 = (WTF *)((char *)a2 + (v323 & 0xFFFFFFFFFFFFFFF8));
            v347 = (uint8x8_t *)((char *)a2 + v324);
            v348 = (uint16x8_t *)((char *)v47 + 2 * v324);
            v349 = v324 - (v323 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v350 = *v347++;
              *v348++ = vmovl_u8(v350);
              v349 += 8;
            }
            while (v349);
            if (v323 != (v323 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_184;
LABEL_185:
            v93 = v388;
            v43 = HIDWORD(v389);
            a2 = v388;
            v391 = v388;
            v392 = HIDWORD(v389);
            if (HIDWORD(v389))
              goto LABEL_186;
LABEL_319:
            if (v390 != (_BYTE *)v93 && v93 != 0)
            {
              v388 = 0;
              LODWORD(v389) = 0;
              WTF::fastFree(v93, v10);
            }
            result = v382;
            return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
          }
          v47 = (WTF *)((char *)v46 + 2 * (a3 & 0xFFFFFFC0));
          v48 = 0uLL;
          v49 = (char *)v46;
          do
          {
            v395.val[0] = *(int8x16_t *)a2;
            v50 = *((int8x16_t *)a2 + 1);
            v400.val[0] = (int8x16_t)*((_OWORD *)a2 + 2);
            v51 = *((_OWORD *)a2 + 3);
            a2 = (WTF *)((char *)a2 + 64);
            v52 = v51;
            v400.val[1] = 0uLL;
            v405.val[0] = v50;
            v395.val[1] = 0uLL;
            v53 = v49;
            vst2q_s8(v53, v395);
            v53 += 32;
            v405.val[1] = 0uLL;
            vst2q_s8(v53, v405);
            v54 = v49 + 64;
            vst2q_s8(v54, v400);
            v55 = v49 + 96;
            vst2q_s8(v55, *(int8x16x2_t *)(&v48 - 1));
            v49 += 128;
          }
          while (v49 != (char *)v47);
        }
        v142 = (WTF *)((char *)v46 + 2 * a3);
        if (v47 == v142)
          goto LABEL_185;
        goto LABEL_180;
      }
      v93 = (WTF *)v390;
      v391 = a2;
      v392 = a3;
      if (!(_DWORD)a3)
        goto LABEL_319;
      while (1)
      {
LABEL_186:
        v148 = *(unsigned __int16 *)a2;
        if (v43 == 1 || (v148 & 0xFC00) != 0xD800)
        {
          if (v148 <= 0x80)
          {
            v151 = *((unsigned int *)v5 + 3);
            if ((_DWORD)v151 != *((_DWORD *)v5 + 2))
              goto LABEL_306;
            v152 = v151 + (v151 >> 2);
            if (v152 >= 0x10)
              v153 = v152 + 1;
            else
              v153 = 16;
            if (v153 <= v151 + 1)
              v154 = v151 + 1;
            else
              v154 = v153;
            if (HIDWORD(v154))
            {
              __break(0xC471u);
              JUMPOUT(0x1945E0054);
            }
            goto LABEL_238;
          }
        }
        else
        {
          v149 = *((unsigned __int16 *)a2 + 1);
          v129 = (v149 & 0xFC00) == 56320;
          v150 = (v148 << 10) - 56613888 + v149;
          if (v129)
            v148 = v150;
        }
        if (v148 == 8254)
        {
          v155 = *((unsigned int *)v5 + 3);
          if ((_DWORD)v155 != *((_DWORD *)v5 + 2))
          {
            v170 = *(_BYTE **)v5;
            v171 = 126;
            goto LABEL_246;
          }
          v161 = v155 + (v155 >> 2);
          if (v161 >= 0x10)
            v162 = v161 + 1;
          else
            v162 = 16;
          if (v162 <= v155 + 1)
            v163 = v155 + 1;
          else
            v163 = v162;
          if (HIDWORD(v163))
          {
            __break(0xC471u);
            JUMPOUT(0x1945E0064);
          }
          v164 = *(_BYTE **)v5;
          v165 = (void *)WTF::fastMalloc((WTF *)v163);
          *((_DWORD *)v5 + 2) = v163;
          *(_QWORD *)v5 = v165;
          memcpy(v165, v164, v155);
          if (v164)
          {
            if (*(_BYTE **)v5 == v164)
            {
              *(_QWORD *)v5 = 0;
              *((_DWORD *)v5 + 2) = 0;
            }
            WTF::fastFree((WTF *)v164, v10);
          }
          *(_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3)) = 126;
          goto LABEL_243;
        }
        if (v148 == 165)
          break;
        if (v148 - 65377 <= 0x3E)
        {
          LOBYTE(v148) = v148 + 64;
          v151 = *((unsigned int *)v5 + 3);
          if ((_DWORD)v151 != *((_DWORD *)v5 + 2))
            goto LABEL_306;
          v166 = v151 + (v151 >> 2);
          if (v166 >= 0x10)
            v167 = v166 + 1;
          else
            v167 = 16;
          if (v167 <= v151 + 1)
            v154 = v151 + 1;
          else
            v154 = v167;
          if (HIDWORD(v154))
          {
            __break(0xC471u);
            JUMPOUT(0x1945E0094);
          }
          goto LABEL_238;
        }
        if (v148 == 8722)
          v172 = 65293;
        else
          v172 = v148;
        v173 = atomic_load(&qword_1ECE7EAF0);
        if (v173 != -1)
        {
          v385[0] = &v384;
          v386[0] = v385;
          std::__call_once(&qword_1ECE7EAF0, v386, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::jis0208EncodeIndex(void)::$_0 &&>>);
        }
        if (WORD1(v172))
          goto LABEL_276;
        v174 = _MergedGlobals_77;
        v175 = _MergedGlobals_77 + 30896;
        v176 = 7724;
        while (1)
        {
          while (1)
          {
            v177 = v176 >> 1;
            v178 = (unsigned __int16 *)(v174 + 4 * (v176 >> 1));
            v179 = *v178;
            if (v172 <= v179)
              break;
            v174 = (uint64_t)(v178 + 2);
            v176 += ~v177;
            if (!v176)
              goto LABEL_276;
          }
          if (v172 >= v179)
            break;
          v175 = v174 + 4 * (v176 >> 1);
          v176 >>= 1;
          if (!v177)
            goto LABEL_276;
        }
        v180 = v174 + 4 * (v176 >> 1);
        if (v176 >= 2)
        {
          v180 = v174;
          do
          {
            v181 = v177 >> 1;
            v182 = (unsigned __int16 *)(v180 + 4 * (v177 >> 1));
            v184 = *v182;
            v183 = v182 + 2;
            v177 += ~(v177 >> 1);
            if (v172 > v184)
              v180 = (unint64_t)v183;
            else
              v177 = v181;
          }
          while (v177);
        }
        if ((unsigned __int16 *)v175 != v178 + 2)
        {
          v185 = (uint64_t)(v175 - (_QWORD)(v178 + 2)) >> 2;
          v175 = (unint64_t)(v178 + 2);
          do
          {
            v186 = v185 >> 1;
            v187 = (unsigned __int16 *)(v175 + 4 * (v185 >> 1));
            v189 = *v187;
            v188 = v187 + 2;
            v185 += ~(v185 >> 1);
            if (v172 < v189)
              v185 = v186;
            else
              v175 = (unint64_t)v188;
          }
          while (v185);
        }
        if (v180 == v175)
        {
LABEL_276:
          (*(void (**)(_QWORD *, uint64_t, WTF *))(*v382 + 16))(v382, v172, v5);
          goto LABEL_308;
        }
        if (v180 < v175)
        {
          while (1)
          {
            v190 = *(unsigned __int16 *)(v180 + 2);
            if (v190 - 8272 >= 0x234)
              break;
            v180 += 4;
            if (v180 >= v175)
              goto LABEL_308;
          }
          v191 = 22311 * (v190 >> 2);
          if ((v191 >> 20) >= 0x1Fu)
            v192 = -63;
          else
            v192 = -127;
          v193 = *((unsigned int *)v5 + 3);
          if ((_DWORD)v193 == *((_DWORD *)v5 + 2))
          {
            v381 = v192;
            v194 = v193 + (v193 >> 2);
            if (v194 >= 0x10)
              v195 = v194 + 1;
            else
              v195 = 16;
            if (v195 <= v193 + 1)
              v196 = v193 + 1;
            else
              v196 = v195;
            if (HIDWORD(v196))
            {
              __break(0xC471u);
              JUMPOUT(0x1945E0084);
            }
            v197 = *(_BYTE **)v5;
            v198 = (void *)WTF::fastMalloc((WTF *)v196);
            *((_DWORD *)v5 + 2) = v196;
            *(_QWORD *)v5 = v198;
            memcpy(v198, v197, v193);
            if (v197)
            {
              if (*(_BYTE **)v5 == v197)
              {
                *(_QWORD *)v5 = 0;
                *((_DWORD *)v5 + 2) = 0;
              }
              WTF::fastFree((WTF *)v197, v10);
            }
            v199 = (_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3));
            v192 = v381;
            v191 = 22311 * (v190 >> 2);
          }
          else
          {
            v199 = (_BYTE *)(*(_QWORD *)v5 + v193);
          }
          v200 = v191 >> 20;
          v201 = (unsigned __int16)(v190 - 188 * (v191 >> 20));
          *v199 = v192 + v200;
          v202 = *((_DWORD *)v5 + 2);
          v151 = (*((_DWORD *)v5 + 3) + 1);
          *((_DWORD *)v5 + 3) = v151;
          if (v201 < 0x3F)
            v203 = 64;
          else
            v203 = 65;
          LOBYTE(v148) = v203 + v201;
          if ((_DWORD)v151 != v202)
          {
LABEL_306:
            *(_BYTE *)(*(_QWORD *)v5 + v151) = v148;
            goto LABEL_307;
          }
          v204 = v151 + (v151 >> 2);
          if (v204 >= 0x10)
            v205 = v204 + 1;
          else
            v205 = 16;
          if (v205 <= v151 + 1)
            v154 = v151 + 1;
          else
            v154 = v205;
          if (HIDWORD(v154))
          {
            __break(0xC471u);
            JUMPOUT(0x1945E008CLL);
          }
LABEL_238:
          v168 = *(_BYTE **)v5;
          v169 = (void *)WTF::fastMalloc((WTF *)v154);
          *((_DWORD *)v5 + 2) = v154;
          *(_QWORD *)v5 = v169;
          memcpy(v169, v168, v151);
          if (v168)
          {
            if (*(_BYTE **)v5 == v168)
            {
              *(_QWORD *)v5 = 0;
              *((_DWORD *)v5 + 2) = 0;
            }
            WTF::fastFree((WTF *)v168, v10);
          }
          *(_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3)) = v148;
LABEL_243:
          ++*((_DWORD *)v5 + 3);
        }
LABEL_308:
        if (v43 == 1)
        {
          v206 = 1;
          v43 = 0;
          v207 = 1;
        }
        else
        {
          v206 = 1;
          if ((*(_WORD *)a2 & 0xFC00) == 0xD800)
          {
            if (v43 <= 1)
              goto LABEL_568;
            v206 = 1;
            if ((*((_WORD *)a2 + 1) & 0xFC00) == 0xDC00)
              v206 = 2;
          }
          v128 = v43 >= v206;
          v43 -= v206;
          v207 = v43 == 0;
          if (!v128)
            goto LABEL_568;
        }
        a2 = (WTF *)((char *)a2 + 2 * v206);
        if (v207)
        {
LABEL_318:
          v93 = v388;
          goto LABEL_319;
        }
      }
      v155 = *((unsigned int *)v5 + 3);
      if ((_DWORD)v155 != *((_DWORD *)v5 + 2))
      {
        v170 = *(_BYTE **)v5;
        v171 = 92;
LABEL_246:
        v170[v155] = v171;
LABEL_307:
        ++*((_DWORD *)v5 + 3);
        goto LABEL_308;
      }
      v156 = v155 + (v155 >> 2);
      if (v156 >= 0x10)
        v157 = v156 + 1;
      else
        v157 = 16;
      if (v157 <= v155 + 1)
        v158 = v155 + 1;
      else
        v158 = v157;
      if (HIDWORD(v158))
      {
        __break(0xC471u);
        JUMPOUT(0x1945E005CLL);
      }
      v159 = *(_BYTE **)v5;
      v160 = (void *)WTF::fastMalloc((WTF *)v158);
      *((_DWORD *)v5 + 2) = v158;
      *(_QWORD *)v5 = v160;
      memcpy(v160, v159, v155);
      if (v159)
      {
        if (*(_BYTE **)v5 == v159)
        {
          *(_QWORD *)v5 = 0;
          *((_DWORD *)v5 + 2) = 0;
        }
        WTF::fastFree((WTF *)v159, v10);
      }
      *(_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3)) = 92;
      goto LABEL_243;
    case 3:
      v56 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      v26 = v56;
      v57 = PAL::entityUnencodableHandler;
      if (a4)
        v57 = PAL::urlEncodedEntityUnencodableHandler;
      *(_QWORD *)v56 = off_1E31F3C60;
      *((_QWORD *)v56 + 1) = v57;
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      v58 = a3;
      if ((_DWORD)a3)
      {
        v59 = WTF::fastMalloc((WTF *)a3);
        *((_DWORD *)v5 + 2) = a3;
        *(_QWORD *)v5 = v59;
      }
      v388 = (WTF *)v390;
      v389 = 32;
      v391 = 0;
      v392 = 0;
      if ((a3 & 0xFF00000000) == 0)
      {
        v92 = (WTF *)v390;
        v391 = a2;
        v392 = a3;
        if (!(_DWORD)a3)
          goto LABEL_405;
        goto LABEL_333;
      }
      if (a3 <= 0x20uLL)
      {
        HIDWORD(v389) = a3;
        v61 = (WTF *)v390;
        v62 = (WTF *)v390;
        goto LABEL_326;
      }
      if (a3 <= 0x29uLL)
        v60 = 41;
      else
        v60 = a3;
      if (v60 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x1945E00E4);
      }
      v61 = (WTF *)WTF::fastMalloc((WTF *)(2 * v60));
      v388 = v61;
      v389 = __PAIR64__(a3, v60);
      if (a3 >= 0x40uLL)
      {
        v62 = (WTF *)((char *)v61 + 2 * (a3 & 0xFFFFFFC0));
        v63 = 0uLL;
        v64 = (char *)v61;
        do
        {
          v396.val[0] = *(int8x16_t *)a2;
          v65 = *((int8x16_t *)a2 + 1);
          v401.val[0] = (int8x16_t)*((_OWORD *)a2 + 2);
          v66 = *((_OWORD *)a2 + 3);
          a2 = (WTF *)((char *)a2 + 64);
          v67 = v66;
          v401.val[1] = 0uLL;
          v406.val[0] = v65;
          v396.val[1] = 0uLL;
          v68 = v64;
          vst2q_s8(v68, v396);
          v68 += 32;
          v406.val[1] = 0uLL;
          vst2q_s8(v68, v406);
          v69 = v64 + 64;
          vst2q_s8(v69, v401);
          v70 = v64 + 96;
          vst2q_s8(v70, *(int8x16x2_t *)(&v63 - 1));
          v64 += 128;
        }
        while (v64 != (char *)v62);
LABEL_326:
        v209 = (WTF *)((char *)v61 + 2 * a3);
        if (v62 == v209)
          goto LABEL_332;
        goto LABEL_327;
      }
      v62 = v61;
      v209 = (WTF *)((char *)v61 + 2 * a3);
      if (v61 == v209)
        goto LABEL_332;
LABEL_327:
      v210 = v209 - v62 - 2;
      if (v210 < 0xE
        || (v211 = (WTF *)((char *)v61 + 2 * a3) - v62 - 2, v62 < (WTF *)((char *)a2 + (v211 >> 1) + 1))
        && a2 < (WTF *)((char *)v62 + (v211 & 0xFFFFFFFFFFFFFFFELL) + 2))
      {
        v212 = v62;
        v213 = a2;
        goto LABEL_331;
      }
      v325 = (v210 >> 1) + 1;
      if (v210 >= 0x3E)
      {
        v326 = v325 & 0xFFFFFFFFFFFFFFE0;
        v351 = (uint8x8_t *)((char *)a2 + 16);
        v352 = (uint16x8_t *)((char *)v62 + 32);
        v353 = v325 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v354 = *(uint8x16_t *)v351[-2].i8;
          v355 = vmovl_u8(*v351);
          v356 = vmovl_high_u8(*(uint8x16_t *)v351->i8);
          v352[-2] = vmovl_u8(*(uint8x8_t *)v354.i8);
          v352[-1] = vmovl_high_u8(v354);
          *v352 = v355;
          v352[1] = v356;
          v352 += 4;
          v351 += 4;
          v353 -= 32;
        }
        while (v353);
        if (v325 == v326)
          goto LABEL_332;
        if ((v325 & 0x18) == 0)
        {
          v213 = (WTF *)((char *)a2 + v326);
          v212 = (WTF *)((char *)v62 + 2 * v326);
          do
          {
LABEL_331:
            v214 = *(unsigned __int8 *)v213;
            v213 = (WTF *)((char *)v213 + 1);
            *(_WORD *)v212 = v214;
            v212 = (WTF *)((char *)v212 + 2);
          }
          while (v212 != v209);
          goto LABEL_332;
        }
      }
      else
      {
        v326 = 0;
      }
      v212 = (WTF *)((char *)v62 + 2 * (v325 & 0xFFFFFFFFFFFFFFF8));
      v213 = (WTF *)((char *)a2 + (v325 & 0xFFFFFFFFFFFFFFF8));
      v357 = (uint8x8_t *)((char *)a2 + v326);
      v358 = (uint16x8_t *)((char *)v62 + 2 * v326);
      v359 = v326 - (v325 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v360 = *v357++;
        *v358++ = vmovl_u8(v360);
        v359 += 8;
      }
      while (v359);
      if (v325 != (v325 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_331;
LABEL_332:
      v92 = v388;
      v58 = HIDWORD(v389);
      a2 = v388;
      v391 = v388;
      v392 = HIDWORD(v389);
      if (!HIDWORD(v389))
        goto LABEL_405;
LABEL_333:
      while (1)
      {
        v215 = *(unsigned __int16 *)a2;
        if ((v215 & 0xFC00) == 0xD800)
          break;
        if (v215 > 0x7F)
          goto LABEL_352;
        v218 = *((unsigned int *)v5 + 3);
        if ((_DWORD)v218 == *((_DWORD *)v5 + 2))
        {
          v219 = v218 + (v218 >> 2);
          if (v219 >= 0x10)
            v220 = v219 + 1;
          else
            v220 = 16;
          if (v220 <= v218 + 1)
            v221 = v218 + 1;
          else
            v221 = v220;
          if (HIDWORD(v221))
          {
            __break(0xC471u);
            JUMPOUT(0x1945E0044);
          }
          v222 = *(_BYTE **)v5;
          v223 = (void *)WTF::fastMalloc((WTF *)v221);
          *((_DWORD *)v5 + 2) = v221;
          *(_QWORD *)v5 = v223;
          memcpy(v223, v222, v218);
          if (v222)
          {
            if (*(_BYTE **)v5 == v222)
            {
              *(_QWORD *)v5 = 0;
              *((_DWORD *)v5 + 2) = 0;
            }
            WTF::fastFree((WTF *)v222, v10);
          }
          *(_BYTE *)(*(_QWORD *)v5 + (*((_DWORD *)v5 + 3))++) = v215;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v5 + v218) = v215;
          ++*((_DWORD *)v5 + 3);
        }
LABEL_363:
        if (v58 == 1)
        {
          v231 = 1;
          v58 = 0;
          v232 = 1;
        }
        else
        {
          v231 = 1;
          if ((*(_WORD *)a2 & 0xFC00) == 0xD800)
          {
            if (v58 <= 1)
              goto LABEL_568;
            v231 = 1;
            if ((*((_WORD *)a2 + 1) & 0xFC00) == 0xDC00)
              v231 = 2;
          }
          v128 = v58 >= v231;
          v58 -= v231;
          v232 = v58 == 0;
          if (!v128)
            goto LABEL_568;
        }
        a2 = (WTF *)((char *)a2 + 2 * v231);
        if (v232)
          goto LABEL_404;
      }
      if (v58 != 1)
      {
        v216 = *((unsigned __int16 *)a2 + 1);
        v129 = (v216 & 0xFC00) == 56320;
        v217 = ((_DWORD)v215 << 10) - 56613888 + v216;
        if (v129)
          v215 = v217;
        else
          v215 = *(unsigned __int16 *)a2;
      }
LABEL_352:
      v224 = atomic_load(&qword_1ECE7EB00);
      if (v224 != -1)
      {
        v385[0] = &v384;
        v386[0] = v385;
        std::__call_once(&qword_1ECE7EB00, v386, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::eucKREncodingIndex(void)::$_0 &&>>);
      }
      if (WORD1(v215))
        goto LABEL_362;
      v225 = (unsigned __int16 *)qword_1ECE7EAF8;
      v226 = 17048;
      do
      {
        v227 = v226 >> 1;
        v228 = &v225[2 * (v226 >> 1)];
        v230 = *v228;
        v229 = v228 + 2;
        v226 += ~(v226 >> 1);
        if (v215 > v230)
          v225 = v229;
        else
          v226 = v227;
      }
      while (v226);
      if (v225 == (unsigned __int16 *)(qword_1ECE7EAF8 + 68192) || v215 < *v225)
      {
LABEL_362:
        (*(void (**)(WTF *, uint64_t, WTF *))(*(_QWORD *)v26 + 16))(v26, v215, v5);
      }
      else
      {
        v233 = v225[1];
        v234 = *((unsigned int *)v5 + 3);
        if ((_DWORD)v234 == *((_DWORD *)v5 + 2))
        {
          v235 = v234 + (v234 >> 2);
          if (v235 >= 0x10)
            v236 = v235 + 1;
          else
            v236 = 16;
          if (v236 <= v234 + 1)
            v237 = v234 + 1;
          else
            v237 = v236;
          if (HIDWORD(v237))
          {
            __break(0xC471u);
            JUMPOUT(0x1945E009CLL);
          }
          v238 = *(_BYTE **)v5;
          v239 = (void *)WTF::fastMalloc((WTF *)v237);
          *((_DWORD *)v5 + 2) = v237;
          *(_QWORD *)v5 = v239;
          memcpy(v239, v238, v234);
          if (v238)
          {
            if (*(_BYTE **)v5 == v238)
            {
              *(_QWORD *)v5 = 0;
              *((_DWORD *)v5 + 2) = 0;
            }
            WTF::fastFree((WTF *)v238, v10);
          }
          v240 = (_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3));
        }
        else
        {
          v240 = (_BYTE *)(*(_QWORD *)v5 + v234);
        }
        *v240 = v233 / 0xBEu - 127;
        v241 = *((_DWORD *)v5 + 2);
        v242 = (*((_DWORD *)v5 + 3) + 1);
        *((_DWORD *)v5 + 3) = v242;
        v243 = v233 % 0xBEu + 65;
        if ((_DWORD)v242 == v241)
        {
          v244 = v242 + (v242 >> 2);
          if (v244 >= 0x10)
            v245 = v244 + 1;
          else
            v245 = 16;
          if (v245 <= v242 + 1)
            v246 = v242 + 1;
          else
            v246 = v245;
          if (HIDWORD(v246))
          {
            __break(0xC471u);
            JUMPOUT(0x1945E00A4);
          }
          v247 = *(_BYTE **)v5;
          v248 = (void *)WTF::fastMalloc((WTF *)v246);
          *((_DWORD *)v5 + 2) = v246;
          *(_QWORD *)v5 = v248;
          memcpy(v248, v247, v242);
          if (v247)
          {
            if (*(_BYTE **)v5 == v247)
            {
              *(_QWORD *)v5 = 0;
              *((_DWORD *)v5 + 2) = 0;
            }
            WTF::fastFree((WTF *)v247, v10);
          }
          *(_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3)) = v243;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v5 + v242) = v243;
        }
        ++*((_DWORD *)v5 + 3);
      }
      goto LABEL_363;
    case 4:
      v25 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      v26 = v25;
      v27 = PAL::entityUnencodableHandler;
      if (a4)
        v27 = PAL::urlEncodedEntityUnencodableHandler;
      *(_QWORD *)v25 = off_1E31F3C60;
      *((_QWORD *)v25 + 1) = v27;
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      v28 = a3;
      if ((_DWORD)a3)
      {
        v29 = WTF::fastMalloc((WTF *)a3);
        *((_DWORD *)v5 + 2) = a3;
        *(_QWORD *)v5 = v29;
      }
      v388 = (WTF *)v390;
      v389 = 32;
      v391 = 0;
      v392 = 0;
      if ((a3 & 0xFF00000000) == 0)
      {
        v92 = (WTF *)v390;
        v391 = a2;
        v392 = a3;
        if (!(_DWORD)a3)
          goto LABEL_405;
        goto LABEL_97;
      }
      if (a3 <= 0x20uLL)
      {
        HIDWORD(v389) = a3;
        v31 = (WTF *)v390;
        v32 = (WTF *)v390;
        goto LABEL_90;
      }
      if (a3 <= 0x29uLL)
        v30 = 41;
      else
        v30 = a3;
      if (v30 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x1945E00D4);
      }
      v31 = (WTF *)WTF::fastMalloc((WTF *)(2 * v30));
      v388 = v31;
      v389 = __PAIR64__(a3, v30);
      if (a3 >= 0x40uLL)
      {
        v32 = (WTF *)((char *)v31 + 2 * (a3 & 0xFFFFFFC0));
        v33 = 0uLL;
        v34 = (char *)v31;
        do
        {
          v394.val[0] = *(int8x16_t *)a2;
          v35 = *((int8x16_t *)a2 + 1);
          v399.val[0] = (int8x16_t)*((_OWORD *)a2 + 2);
          v36 = *((_OWORD *)a2 + 3);
          a2 = (WTF *)((char *)a2 + 64);
          v37 = v36;
          v399.val[1] = 0uLL;
          v404.val[0] = v35;
          v394.val[1] = 0uLL;
          v38 = v34;
          vst2q_s8(v38, v394);
          v38 += 32;
          v404.val[1] = 0uLL;
          vst2q_s8(v38, v404);
          v39 = v34 + 64;
          vst2q_s8(v39, v399);
          v40 = v34 + 96;
          vst2q_s8(v40, *(int8x16x2_t *)(&v33 - 1));
          v34 += 128;
        }
        while (v34 != (char *)v32);
LABEL_90:
        v94 = (WTF *)((char *)v31 + 2 * a3);
        if (v32 == v94)
          goto LABEL_96;
        goto LABEL_91;
      }
      v32 = v31;
      v94 = (WTF *)((char *)v31 + 2 * a3);
      if (v31 == v94)
        goto LABEL_96;
LABEL_91:
      v95 = v94 - v32 - 2;
      if (v95 < 0xE
        || (v96 = (WTF *)((char *)v31 + 2 * a3) - v32 - 2, v32 < (WTF *)((char *)a2 + (v96 >> 1) + 1))
        && a2 < (WTF *)((char *)v32 + (v96 & 0xFFFFFFFFFFFFFFFELL) + 2))
      {
        v97 = v32;
        v98 = a2;
        goto LABEL_95;
      }
      v321 = (v95 >> 1) + 1;
      if (v95 >= 0x3E)
      {
        v322 = v321 & 0xFFFFFFFFFFFFFFE0;
        v331 = (uint8x8_t *)((char *)a2 + 16);
        v332 = (uint16x8_t *)((char *)v32 + 32);
        v333 = v321 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v334 = *(uint8x16_t *)v331[-2].i8;
          v335 = vmovl_u8(*v331);
          v336 = vmovl_high_u8(*(uint8x16_t *)v331->i8);
          v332[-2] = vmovl_u8(*(uint8x8_t *)v334.i8);
          v332[-1] = vmovl_high_u8(v334);
          *v332 = v335;
          v332[1] = v336;
          v332 += 4;
          v331 += 4;
          v333 -= 32;
        }
        while (v333);
        if (v321 == v322)
          goto LABEL_96;
        if ((v321 & 0x18) == 0)
        {
          v98 = (WTF *)((char *)a2 + v322);
          v97 = (WTF *)((char *)v32 + 2 * v322);
          do
          {
LABEL_95:
            v99 = *(unsigned __int8 *)v98;
            v98 = (WTF *)((char *)v98 + 1);
            *(_WORD *)v97 = v99;
            v97 = (WTF *)((char *)v97 + 2);
          }
          while (v97 != v94);
LABEL_96:
          v92 = v388;
          v28 = HIDWORD(v389);
          a2 = v388;
          v391 = v388;
          v392 = HIDWORD(v389);
          if (!HIDWORD(v389))
            goto LABEL_405;
LABEL_97:
          v100 = &qword_1ECE7E000;
          while (1)
          {
            v101 = *(unsigned __int16 *)a2;
            if ((v101 & 0xFC00) == 0xD800)
              break;
            if (v101 > 0x7F)
              goto LABEL_117;
            v104 = *((unsigned int *)v5 + 3);
            if ((_DWORD)v104 == *((_DWORD *)v5 + 2))
            {
              v105 = v104 + (v104 >> 2);
              if (v105 >= 0x10)
                v106 = v105 + 1;
              else
                v106 = 16;
              if (v106 <= v104 + 1)
                v107 = v104 + 1;
              else
                v107 = v106;
              if (HIDWORD(v107))
              {
                __break(0xC471u);
                JUMPOUT(0x1945E003CLL);
              }
              v108 = *(_BYTE **)v5;
              v109 = (void *)WTF::fastMalloc((WTF *)v107);
              *((_DWORD *)v5 + 2) = v107;
              *(_QWORD *)v5 = v109;
              memcpy(v109, v108, v104);
              v100 = &qword_1ECE7E000;
              if (v108)
              {
                if (*(_BYTE **)v5 == v108)
                {
                  *(_QWORD *)v5 = 0;
                  *((_DWORD *)v5 + 2) = 0;
                }
                WTF::fastFree((WTF *)v108, v10);
              }
              *(_BYTE *)(*(_QWORD *)v5 + (*((_DWORD *)v5 + 3))++) = v101;
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)v5 + v104) = v101;
              ++*((_DWORD *)v5 + 3);
            }
LABEL_142:
            if (v28 == 1)
            {
              v127 = 1;
              v28 = 0;
              v129 = 1;
            }
            else
            {
              v127 = 1;
              if ((*(_WORD *)a2 & 0xFC00) == 0xD800)
              {
                if (v28 <= 1)
                  goto LABEL_568;
                v127 = 1;
                if ((*((_WORD *)a2 + 1) & 0xFC00) == 0xDC00)
                  v127 = 2;
              }
              v128 = v28 >= v127;
              v28 -= v127;
              v129 = v28 == 0;
              if (!v128)
              {
LABEL_568:
                __break(1u);
                goto LABEL_569;
              }
            }
            a2 = (WTF *)((char *)a2 + 2 * v127);
            if (v129)
            {
LABEL_404:
              v92 = v388;
LABEL_405:
              if (v390 != (_BYTE *)v92 && v92 != 0)
              {
                v388 = 0;
                LODWORD(v389) = 0;
                WTF::fastFree(v92, v10);
              }
              return (_BYTE *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v26 + 8))(v26);
            }
          }
          if (v28 != 1)
          {
            v102 = *((unsigned __int16 *)a2 + 1);
            v129 = (v102 & 0xFC00) == 56320;
            v103 = ((_DWORD)v101 << 10) - 56613888 + v102;
            if (v129)
              v101 = v103;
            else
              v101 = *(unsigned __int16 *)a2;
          }
LABEL_117:
          v110 = atomic_load(&qword_1ECE7EB10);
          if (v110 != -1)
          {
            v385[0] = &v384;
            v386[0] = v385;
            std::__call_once(&qword_1ECE7EB10, v386, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::big5EncodeIndex(void)::$_0 &&>>);
          }
          v111 = (char *)v100[353];
          v112 = v111 + 117488;
          v113 = 14686;
          while (1)
          {
            while (1)
            {
              v114 = v113 >> 1;
              v115 = &v111[8 * (v113 >> 1)];
              if (*(_DWORD *)v115 >= v101)
                break;
              v111 = v115 + 8;
              v113 += ~v114;
              if (!v113)
                goto LABEL_141;
            }
            if (v101 >= *(_DWORD *)v115)
              break;
            v112 = &v111[8 * (v113 >> 1)];
            v113 >>= 1;
            if (!v114)
              goto LABEL_141;
          }
          v116 = &v111[8 * (v113 >> 1)];
          if (v113 >= 2)
          {
            v116 = v111;
            do
            {
              v117 = v114 >> 1;
              v118 = (unsigned int *)&v116[8 * (v114 >> 1)];
              v120 = *v118;
              v119 = (char *)(v118 + 2);
              v114 += ~(v114 >> 1);
              if (v120 < v101)
                v116 = v119;
              else
                v114 = v117;
            }
            while (v114);
          }
          if (v112 != v115 + 8)
          {
            v121 = (v112 - (v115 + 8)) >> 3;
            v112 = v115 + 8;
            do
            {
              v122 = v121 >> 1;
              v123 = (unsigned int *)&v112[8 * (v121 >> 1)];
              v125 = *v123;
              v124 = (char *)(v123 + 2);
              v121 += ~(v121 >> 1);
              if (v101 < v125)
                v121 = v122;
              else
                v112 = v124;
            }
            while (v121);
          }
          if (v116 == v112)
          {
LABEL_141:
            (*(void (**)(WTF *, uint64_t, WTF *))(*(_QWORD *)v26 + 16))(v26, v101, v5);
            goto LABEL_142;
          }
          if ((v101 - 9552) <= 0x1A && ((1 << (v101 - 80)) & 0x4024001) != 0
            || (_DWORD)v101 == 21317
            || (_DWORD)v101 == 21313)
          {
            v126 = *((unsigned __int16 *)v112 - 2);
            if (v126 >> 5 <= 0x9C)
              goto LABEL_141;
          }
          else
          {
            v126 = *((unsigned __int16 *)v116 + 2);
            if (v126 >> 5 <= 0x9C)
              goto LABEL_141;
          }
          v130 = (53431 * v126) >> 23;
          LOBYTE(v385[0]) = v130 - 127;
          v131 = *((unsigned int *)v5 + 3);
          if ((_DWORD)v131 == *((_DWORD *)v5 + 2))
            *(_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v5, (WTF *)(v131 + 1), (unint64_t)v385);
          else
            *(_BYTE *)(*(_QWORD *)v5 + v131) = v130 - 127;
          v132 = v126 - -99 * v130;
          v133 = *((_DWORD *)v5 + 2);
          v134 = (*((_DWORD *)v5 + 3) + 1);
          *((_DWORD *)v5 + 3) = v134;
          if ((unsigned __int16)v126 % 0x9Du >= 0x3F)
            v135 = 98;
          else
            v135 = 64;
          if ((_DWORD)v134 == v133)
          {
            v136 = v134 + (v134 >> 2);
            if (v136 >= 0x10)
              v137 = v136 + 1;
            else
              v137 = 16;
            if (v137 <= v134 + 1)
              v138 = v134 + 1;
            else
              v138 = v137;
            if (HIDWORD(v138))
            {
              __break(0xC471u);
              JUMPOUT(0x1945E007CLL);
            }
            v139 = *(_BYTE **)v5;
            v140 = (void *)WTF::fastMalloc((WTF *)v138);
            *((_DWORD *)v5 + 2) = v138;
            *(_QWORD *)v5 = v140;
            memcpy(v140, v139, v134);
            if (v139)
            {
              if (*(_BYTE **)v5 == v139)
              {
                *(_QWORD *)v5 = 0;
                *((_DWORD *)v5 + 2) = 0;
              }
              WTF::fastFree((WTF *)v139, v10);
            }
            v141 = (_BYTE *)(*(_QWORD *)v5 + *((unsigned int *)v5 + 3));
          }
          else
          {
            v141 = (_BYTE *)(*(_QWORD *)v5 + v134);
          }
          *v141 = v135 + v132;
          ++*((_DWORD *)v5 + 3);
          v100 = &qword_1ECE7E000;
          goto LABEL_142;
        }
      }
      else
      {
        v322 = 0;
      }
      v97 = (WTF *)((char *)v32 + 2 * (v321 & 0xFFFFFFFFFFFFFFF8));
      v98 = (WTF *)((char *)a2 + (v321 & 0xFFFFFFFFFFFFFFF8));
      v337 = (uint8x8_t *)((char *)a2 + v322);
      v338 = (uint16x8_t *)((char *)v32 + 2 * v322);
      v339 = v322 - (v321 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v340 = *v337++;
        *v338++ = vmovl_u8(v340);
        v339 += 8;
      }
      while (v339);
      if (v321 == (v321 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_96;
      goto LABEL_95;
    case 5:
      v88 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      v26 = v88;
      v89 = PAL::entityUnencodableHandler;
      if (a4)
        v89 = PAL::urlEncodedEntityUnencodableHandler;
      *(_QWORD *)v88 = off_1E31F3C60;
      *((_QWORD *)v88 + 1) = v89;
      v388 = v88;
      PAL::gbEncodeShared((uint64_t)v5, a2, a3, (uint64_t)&v388, 1);
      return (_BYTE *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v26 + 8))(v26);
    case 6:
      v90 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      v26 = v90;
      v91 = PAL::entityUnencodableHandler;
      if (a4)
        v91 = PAL::urlEncodedEntityUnencodableHandler;
      *(_QWORD *)v90 = off_1E31F3C60;
      *((_QWORD *)v90 + 1) = v91;
      v388 = v90;
      PAL::gbEncodeShared((uint64_t)v5, a2, a3, (uint64_t)&v388, 0);
      return (_BYTE *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v26 + 8))(v26);
    default:
      *(_QWORD *)a5 = 0;
      *((_QWORD *)a5 + 1) = 0;
      return result;
  }
}

void *PAL::appendDecimal(void *result, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  unint64_t v19;
  _BYTE __dst[23];
  uint64_t v21;

  v3 = result;
  v4 = 0;
  v21 = *MEMORY[0x1E0C80C00];
  v5 = result;
  do
  {
    __dst[v4-- + 22] = (v5 % 0xA) | 0x30;
    v6 = v5 >= 9;
    v7 = v5 == 9;
    v5 /= 0xAu;
  }
  while (!v7 && v6);
  if (v4 + 14 <= 13)
    result = memcpy(__dst, &__dst[v4 + 23], -v4);
  v8 = 0;
  do
  {
    --v8;
    v6 = v3 >= 9;
    v7 = v3 == 9;
    v3 /= 0xAu;
  }
  while (!v7 && v6);
  if (v8)
  {
    v9 = -v8;
    v10 = *(unsigned int *)(a2 + 8);
    v11 = *(unsigned int *)(a2 + 12);
    v12 = v11 + v9;
    if (v11 + v9 > v10)
    {
      v13 = v10 + (v10 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= v12)
        v15 = v11 + v9;
      else
        v15 = v14;
      if (HIDWORD(v15))
        goto LABEL_23;
      v16 = *(void **)a2;
      v17 = (void *)WTF::fastMalloc((WTF *)v15);
      *(_DWORD *)(a2 + 8) = v15;
      *(_QWORD *)a2 = v17;
      memcpy(v17, v16, v11);
      if (v16)
      {
        if (*(void **)a2 == v16)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree((WTF *)v16, v18);
      }
    }
    v19 = *(unsigned int *)(a2 + 12);
    if (v12 >= v19)
    {
      result = memcpy((void *)(*(_QWORD *)a2 + v19), __dst, v9);
      *(_DWORD *)(a2 + 12) = v12;
      return result;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x1945E02A4);
  }
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::jis0208EncodeIndex(void)::$_0 &&>>()
{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  const __int16 *v9;
  const __int16 *v10;
  int16x8_t v11;
  int16x8_t v12;
  __int16 *v13;
  __int16 *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char v32;
  char **v33;
  char *v34;
  int16x8x2_t v35;
  int16x8x2_t v36;

  v0 = (void *)operator new();
  bzero(v0, 0x78B0uLL);
  _MergedGlobals_77 = (uint64_t)v0;
  v1 = atomic_load(&PAL::jis0208(void)::flag);
  if (v1 != -1)
  {
    v34 = &v32;
    v33 = &v34;
    std::__call_once(&PAL::jis0208(void)::flag, &v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::jis0208(void)::$_0 &&>>);
  }
  v2 = 0;
  v3 = PAL::jis0208(void)::array;
  v4 = (unsigned __int16 *)_MergedGlobals_77;
  v6 = _MergedGlobals_77 + 2 < (unint64_t)(PAL::jis0208(void)::array + 30894)
    && PAL::jis0208(void)::array < (unint64_t)(_MergedGlobals_77 + 30896);
  v7 = PAL::jis0208(void)::array + 2 >= (unint64_t)(_MergedGlobals_77 + 30894)
    || _MergedGlobals_77 >= (unint64_t)(PAL::jis0208(void)::array + 30896);
  if (v7 && !v6)
  {
    v8 = 0x7FFFFFFFFFFFC3C0;
    v2 = 7712;
    do
    {
      v9 = (const __int16 *)(v3 + v8 * 2 + 30848);
      v10 = (const __int16 *)(v3 + v8 * 2 + 30880);
      v35 = vld2q_s16(v9);
      v11 = v35.val[0];
      v36 = vld2q_s16(v10);
      v12 = v36.val[0];
      v13 = (__int16 *)&v4[v8 + 15424];
      vst2q_s16(v13, *(int16x8x2_t *)((char *)&v35 + 16));
      v14 = (__int16 *)&v4[v8 + 15440];
      vst2q_s16(v14, *(int16x8x2_t *)((char *)&v36 + 16));
      v8 += 32;
    }
    while (v8 * 2);
  }
  v15 = 2 * v2;
  do
  {
    HIDWORD(v16) = *(_DWORD *)(v3 + v15 * 2);
    LODWORD(v16) = HIDWORD(v16);
    *(_DWORD *)&v4[v15] = v16 >> 16;
    v15 += 2;
  }
  while (v15 != 15448);
  v17 = (char *)operator new(0x78B0uLL, MEMORY[0x1E0DE4E10]);
  if (v17)
  {
    v18 = v17;
    v19 = 7724;
LABEL_45:
    std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(v4, v4 + 15448, 0x1E2CuLL, v18, v19);
    operator delete(v18);
    return;
  }
  v20 = (char *)operator new(0x3C58uLL, MEMORY[0x1E0DE4E10]);
  if (v20)
  {
    v18 = v20;
    v19 = 3862;
    goto LABEL_45;
  }
  v21 = (char *)operator new(0x1E2CuLL, MEMORY[0x1E0DE4E10]);
  if (v21)
  {
    v18 = v21;
    v19 = 1931;
    goto LABEL_45;
  }
  v22 = (char *)operator new(0xF14uLL, MEMORY[0x1E0DE4E10]);
  if (v22)
  {
    v18 = v22;
    v19 = 965;
    goto LABEL_45;
  }
  v23 = (char *)operator new(0x788uLL, MEMORY[0x1E0DE4E10]);
  if (v23)
  {
    v18 = v23;
    v19 = 482;
    goto LABEL_45;
  }
  v24 = (char *)operator new(0x3C4uLL, MEMORY[0x1E0DE4E10]);
  if (v24)
  {
    v18 = v24;
    v19 = 241;
    goto LABEL_45;
  }
  v25 = (char *)operator new(0x1E0uLL, MEMORY[0x1E0DE4E10]);
  if (v25)
  {
    v18 = v25;
    v19 = 120;
    goto LABEL_45;
  }
  v26 = (char *)operator new(0xF0uLL, MEMORY[0x1E0DE4E10]);
  if (v26)
  {
    v18 = v26;
    v19 = 60;
    goto LABEL_45;
  }
  v27 = (char *)operator new(0x78uLL, MEMORY[0x1E0DE4E10]);
  if (v27)
  {
    v18 = v27;
    v19 = 30;
    goto LABEL_45;
  }
  v28 = (char *)operator new(0x3CuLL, MEMORY[0x1E0DE4E10]);
  if (v28)
  {
    v18 = v28;
    v19 = 15;
    goto LABEL_45;
  }
  v29 = (char *)operator new(0x1CuLL, MEMORY[0x1E0DE4E10]);
  if (v29)
  {
    v18 = v29;
    v19 = 7;
    goto LABEL_45;
  }
  v30 = (char *)operator new(0xCuLL, MEMORY[0x1E0DE4E10]);
  if (v30)
  {
    v18 = v30;
    v19 = 3;
    goto LABEL_45;
  }
  v31 = (char *)operator new(4uLL, MEMORY[0x1E0DE4E10]);
  if (v31)
  {
    v18 = v31;
    v19 = 1;
    goto LABEL_45;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(v4, v4 + 15448, 0x1E2CuLL, 0, 0);
}

void std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(unsigned __int16 *a1, unsigned __int16 *a2, unint64_t a3, char *a4, uint64_t a5)
{
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int16 v9;
  unint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unsigned __int16 *v27;
  char *v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  char *v33;
  unsigned __int16 v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  char v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  char v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 *v62;
  char *v63;
  uint64_t v64;
  unsigned __int16 *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  int v70;

  if (a3 >= 2)
  {
    v6 = a1;
    if (a3 == 2)
    {
      v7 = *(a2 - 2);
      v8 = *a1;
      if (v7 < v8)
      {
        *a1 = v7;
        *(a2 - 2) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return;
    }
    if ((uint64_t)a3 > 0)
    {
      v13 = a3 >> 1;
      v14 = &a1[2 * (a3 >> 1)];
      v15 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(a1, v14, v15, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), a4, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(v6, &v6[2 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), (uint64_t)a4, a5);
        return;
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(a1, v14, v15, a4);
      v26 = &a4[4 * v13];
      std::__stable_sort_move<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v26);
      v27 = (unsigned __int16 *)&a4[4 * a3];
      v28 = v26;
      v29 = a4;
      while (v28 != (char *)v27)
      {
        v30 = *(unsigned __int16 *)v28;
        v31 = *(unsigned __int16 *)v29;
        v32 = v30 >= v31;
        if (v30 < v31)
        {
          v33 = v28;
        }
        else
        {
          LOWORD(v30) = *(_WORD *)v29;
          v33 = v29;
        }
        v34 = *((_WORD *)v33 + 1);
        if (v32)
          v29 += 4;
        else
          v28 += 4;
        *v6 = v30;
        v6[1] = v34;
        v6 += 2;
        if (v29 == v26)
        {
          if (v28 == (char *)v27)
            return;
          v35 = &a4[4 * a3] - v28 - 4;
          if (v35 < 0x5C
            || ((v36 = (char *)v6 + (v35 & 0xFFFFFFFFFFFFFFFCLL),
                 v37 = (unint64_t)(v36 + 2),
                 v38 = (unint64_t)(v36 + 4),
                 v6 + 1 < (unsigned __int16 *)&v28[(v35 & 0xFFFFFFFFFFFFFFFCLL) + 4])
              ? (v39 = (unint64_t)(v28 + 2) >= v38)
              : (v39 = 1),
                v39 ? (v40 = 0) : (v40 = 1),
                (unint64_t)v28 < v37
              ? (v41 = v6 >= (unsigned __int16 *)&v28[(v35 & 0xFFFFFFFFFFFFFFFCLL) + 2])
              : (v41 = 1),
                !v41 || (v40 & 1) != 0))
          {
            v45 = v6;
            v46 = (unsigned __int16 *)v28;
          }
          else
          {
            v42 = 0;
            v43 = (v35 >> 2) + 1;
            v44 = 2 * (v43 & 0x7FFFFFFFFFFFFFF0);
            v45 = &v6[v44];
            v46 = (unsigned __int16 *)&v28[v44 * 2];
            v47 = v43 & 0x7FFFFFFFFFFFFFF0;
            do
            {
              v48 = &v6[v42 / 2];
              v49 = *(_OWORD *)&v28[v42 + 16];
              v51 = *(_OWORD *)&v28[v42 + 32];
              v50 = *(_OWORD *)&v28[v42 + 48];
              *(_OWORD *)v48 = *(_OWORD *)&v28[v42];
              *((_OWORD *)v48 + 1) = v49;
              *((_OWORD *)v48 + 2) = v51;
              *((_OWORD *)v48 + 3) = v50;
              v42 += 64;
              v47 -= 16;
            }
            while (v47);
            if (v43 == (v43 & 0x7FFFFFFFFFFFFFF0))
              return;
          }
          do
          {
            v69 = *(_DWORD *)v46;
            v46 += 2;
            *(_DWORD *)v45 = v69;
            v45 += 2;
          }
          while (v46 != v27);
          return;
        }
      }
      if (v29 == v26)
        return;
      v52 = &a4[4 * v13] - v29 - 4;
      if (v52 < 0x5C
        || ((v53 = (char *)v6 + (v52 & 0xFFFFFFFFFFFFFFFCLL),
             v54 = (unint64_t)(v53 + 2),
             v55 = (unint64_t)(v53 + 4),
             v6 + 1 < (unsigned __int16 *)&v29[(v52 & 0xFFFFFFFFFFFFFFFCLL) + 4])
          ? (v56 = (unint64_t)(v29 + 2) >= v55)
          : (v56 = 1),
            v56 ? (v57 = 0) : (v57 = 1),
            (unint64_t)v29 < v54
          ? (v58 = v6 >= (unsigned __int16 *)&v29[(v52 & 0xFFFFFFFFFFFFFFFCLL) + 2])
          : (v58 = 1),
            !v58 || (v57 & 1) != 0))
      {
        v62 = v6;
        v63 = v29;
      }
      else
      {
        v59 = 0;
        v60 = (v52 >> 2) + 1;
        v61 = 2 * (v60 & 0x7FFFFFFFFFFFFFF0);
        v62 = &v6[v61];
        v63 = &v29[v61 * 2];
        v64 = v60 & 0x7FFFFFFFFFFFFFF0;
        do
        {
          v65 = &v6[v59 / 2];
          v66 = *(_OWORD *)&v29[v59 + 16];
          v68 = *(_OWORD *)&v29[v59 + 32];
          v67 = *(_OWORD *)&v29[v59 + 48];
          *(_OWORD *)v65 = *(_OWORD *)&v29[v59];
          *((_OWORD *)v65 + 1) = v66;
          *((_OWORD *)v65 + 2) = v68;
          *((_OWORD *)v65 + 3) = v67;
          v59 += 64;
          v64 -= 16;
        }
        while (v64);
        if (v60 == (v60 & 0x7FFFFFFFFFFFFFF0))
          return;
      }
      do
      {
        v70 = *(_DWORD *)v63;
        v63 += 4;
        *(_DWORD *)v62 = v70;
        v62 += 2;
      }
      while (v63 != v26);
      return;
    }
    if (a1 != a2)
    {
      v16 = a1 + 2;
      if (a1 + 2 != a2)
      {
        v17 = 0;
        v18 = a1;
        do
        {
          v20 = v18[2];
          v21 = *v18;
          v18 = v16;
          if (v20 < v21)
          {
            v22 = *(_DWORD *)v16;
            v23 = (unsigned __int16)*(_DWORD *)v18;
            v24 = v17;
            do
            {
              v25 = (char *)a1 + v24;
              *((_WORD *)v25 + 2) = v21;
              *((_WORD *)v25 + 3) = *(unsigned __int16 *)((char *)a1 + v24 + 2);
              if (!v24)
              {
                v19 = a1;
                goto LABEL_13;
              }
              v21 = *((unsigned __int16 *)v25 - 2);
              v24 -= 4;
            }
            while (v21 > v23);
            v19 = (unsigned __int16 *)((char *)a1 + v24 + 4);
LABEL_13:
            *v19 = v23;
            v19[1] = HIWORD(v22);
          }
          v16 = v18 + 2;
          v17 += 4;
        }
        while (v18 + 2 != a2);
      }
    }
  }
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(unsigned __int16 *a1, unsigned __int16 *a2, unint64_t a3, char *a4)
{
  char *v4;
  unsigned __int16 *v6;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned __int16 *v11;
  _DWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _WORD *v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  __n128 result;
  char *v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  char *v38;
  unsigned __int16 *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  int v43;
  unint64_t v44;
  char *v45;
  unsigned __int16 *v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  __int128 v53;

  if (a3)
  {
    v4 = a4;
    v6 = a1;
    if (a3 == 1)
    {
LABEL_10:
      *(_DWORD *)v4 = *(_DWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 2);
      v9 = *a1;
      v10 = v8 >= v9;
      if (v8 >= v9)
        v11 = a1;
      else
        v11 = a2 - 2;
      *(_DWORD *)a4 = *(_DWORD *)v11;
      v4 = a4 + 4;
      if (v10)
        v6 = a2 - 2;
      goto LABEL_10;
    }
    if ((uint64_t)a3 > 8)
    {
      v21 = a3 >> 1;
      v22 = 2 * (a3 >> 1);
      v23 = &a1[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(a1, &a1[v22], a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(&v6[v22], a2, a3 - v21, &v4[v22 * 2], a3 - v21);
      v25 = v4;
      v26 = v6;
      v27 = &v6[v22];
      do
      {
        if (v27 == a2)
        {
          if (v26 == v23)
            return result;
          v44 = (char *)&v6[2 * v21] - (char *)v26 - 4;
          if (v44 >= 0x1C && (unint64_t)(v25 - (char *)v26) >= 0x20)
          {
            v48 = 0;
            v49 = (v44 >> 2) + 1;
            v50 = 2 * (v49 & 0x7FFFFFFFFFFFFFF8);
            v45 = &v4[v50 * 2];
            v46 = &v26[v50];
            v51 = v49 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v52 = &v4[v48 * 2];
              result = *(__n128 *)&v26[v48];
              v53 = *(_OWORD *)&v26[v48 + 8];
              *(__n128 *)v52 = result;
              *((_OWORD *)v52 + 1) = v53;
              v48 += 16;
              v51 -= 8;
            }
            while (v51);
            if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
              return result;
          }
          else
          {
            v45 = v4;
            v46 = v26;
          }
          do
          {
            v47 = *(_DWORD *)v46;
            v46 += 2;
            *(_DWORD *)v45 = v47;
            v45 += 4;
          }
          while (v46 != v23);
          return result;
        }
        v28 = v27;
        v29 = *v27;
        v30 = *v26;
        if (v29 >= v30)
          v31 = v26;
        else
          v31 = v27;
        v27 += 2 * (v29 < v30);
        v26 += 2 * (v29 >= v30);
        *(_DWORD *)v4 = *(_DWORD *)v31;
        v4 += 4;
        v25 += 4;
      }
      while (v26 != v23);
      if (v27 != a2)
      {
        v32 = -4;
        if (v29 >= v30)
          v32 = 0;
        v33 = (char *)a2 - (char *)v28 + v32 - 4;
        if (v33 < 0x3C)
          goto LABEL_52;
        if ((unint64_t)(v25 - (char *)&v28[2 * (v29 < v30)]) < 0x20)
          goto LABEL_52;
        v34 = 0;
        v35 = (v33 >> 2) + 1;
        v36 = v29 < v30;
        v37 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
        v38 = &v4[v37];
        v27 = (unsigned __int16 *)((char *)v27 + v37);
        v39 = &v28[2 * v36];
        v40 = v35 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v41 = &v4[v34 * 2];
          result = *(__n128 *)&v39[v34];
          v42 = *(_OWORD *)&v39[v34 + 8];
          *(__n128 *)v41 = result;
          *((_OWORD *)v41 + 1) = v42;
          v34 += 16;
          v40 -= 8;
        }
        while (v40);
        v4 = v38;
        if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_52:
          do
          {
            v43 = *(_DWORD *)v27;
            v27 += 2;
            *(_DWORD *)v4 = v43;
            v4 += 4;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v12 = a1 + 2;
      *(_DWORD *)a4 = *(_DWORD *)a1;
      if (a1 + 2 != a2)
      {
        v13 = 0;
        v14 = a4;
        v15 = a4;
        do
        {
          v16 = v12;
          v17 = *(unsigned __int16 *)v15;
          v15 += 4;
          if (v6[2] >= v17)
          {
            *(_DWORD *)v15 = *v12;
          }
          else
          {
            *((_DWORD *)v14 + 1) = *(_DWORD *)v14;
            v18 = a4;
            if (v14 != a4)
            {
              v19 = v13;
              while (1)
              {
                v18 = &a4[v19];
                v20 = *(unsigned __int16 *)&a4[v19 - 4];
                if ((unsigned __int16)*v16 >= v20)
                  break;
                *(_WORD *)v18 = v20;
                *((_WORD *)v18 + 1) = *((_WORD *)v18 - 1);
                v19 -= 4;
                if (!v19)
                {
                  v18 = a4;
                  break;
                }
              }
            }
            *(_WORD *)v18 = *v16;
            *((_WORD *)v18 + 1) = v6[3];
          }
          v12 = v16 + 2;
          v13 += 4;
          v14 = v15;
          v6 = v16;
        }
        while (v16 + 2 != a2);
      }
    }
  }
  return result;
}

unsigned __int16 *std::__inplace_merge<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int16 *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  unsigned __int16 *i;
  unsigned __int16 v34;
  unsigned __int16 v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  unsigned __int16 v38;
  unsigned __int16 v39;
  _BOOL4 v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _DWORD *v49;
  unsigned __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  _OWORD *v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  unsigned __int16 *v63;
  __int16 v64;
  unint64_t v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  _OWORD *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  unsigned __int16 *v77;
  unsigned int v78;
  unsigned int v79;
  BOOL v80;
  unsigned __int16 *v81;
  unsigned __int16 v82;
  unsigned __int16 *v83;
  unsigned __int16 v84;
  unint64_t v85;
  unsigned __int16 *v86;
  unint64_t v87;
  unint64_t v88;
  BOOL v89;
  char v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  const __int16 *v98;
  __int16 *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  BOOL v104;
  char v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int16 *v110;
  unsigned __int16 *v111;
  uint64_t v112;
  unsigned __int16 *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  unint64_t v117;
  int v118;
  BOOL v119;
  int v120;
  int16x8x2_t v121;

  if (!a5)
    return result;
  while (a4 > a7 && a5 > a7)
  {
    if (!a4)
      return result;
    v9 = 0;
    v10 = *a2;
    v11 = -a4;
    while (1)
    {
      v12 = result[v9];
      if (v10 < v12)
        break;
      v9 += 2;
      v62 = __CFADD__(v11++, 1);
      if (v62)
        return result;
    }
    v13 = &result[v9];
    if (-v11 >= a5)
    {
      if (v11 == -1)
      {
        v83 = &result[v9];
        *v83 = v10;
        *a2 = v12;
        v84 = result[v9 + 1];
        v83[1] = a2[1];
        a2[1] = v84;
        return result;
      }
      if (v11 <= 0)
        v25 = -v11;
      else
        v25 = 1 - v11;
      v23 = v25 >> 1;
      v17 = &result[2 * (v25 >> 1) + v9];
      v16 = (char *)a3;
      if (a3 != a2)
      {
        v26 = ((char *)a3 - (char *)a2) >> 2;
        v16 = (char *)a2;
        do
        {
          v27 = v26 >> 1;
          v28 = (unsigned __int16 *)&v16[4 * (v26 >> 1)];
          v30 = *v28;
          v29 = v28 + 2;
          v26 += ~(v26 >> 1);
          if (v30 < *v17)
            v16 = (char *)v29;
          else
            v26 = v27;
        }
        while (v26);
      }
      v15 = (v16 - (char *)a2) >> 2;
      v24 = (unsigned __int16 *)v16;
      if (v17 != a2)
      {
LABEL_33:
        v24 = v17;
        if (a2 != (unsigned __int16 *)v16)
        {
          v31 = *v17;
          *v17 = v10;
          *a2 = v31;
          v32 = v17[1];
          v17[1] = a2[1];
          a2[1] = v32;
          v24 = v17 + 2;
          for (i = a2 + 2; i != (unsigned __int16 *)v16; i += 2)
          {
            if (v24 == a2)
              a2 = i;
            v34 = *v24;
            *v24 = *i;
            *i = v34;
            v35 = v24[1];
            v24[1] = i[1];
            i[1] = v35;
            v24 += 2;
          }
          if (v24 != a2)
          {
            v36 = v24;
            v37 = a2;
            while (1)
            {
              v38 = *v36;
              *v36 = *a2;
              *a2 = v38;
              v39 = v36[1];
              v36[1] = a2[1];
              a2[1] = v39;
              v36 += 2;
              a2 += 2;
              v40 = v36 == v37;
              if (a2 == (unsigned __int16 *)v16)
              {
                if (v36 == v37)
                  goto LABEL_49;
                a2 = v37 + 2;
                while (1)
                {
                  v41 = *v36;
                  *v36 = *v37;
                  *v37 = v41;
                  v42 = v36[1];
                  v36[1] = v37[1];
                  v37[1] = v42;
                  v36 += 2;
                  v40 = v36 == v37;
                  if (a2 != (unsigned __int16 *)v16)
                    break;
                  if (v36 == v37)
                    goto LABEL_49;
                }
              }
              if (v40)
                v37 = a2;
            }
          }
          v24 = a2;
        }
      }
    }
    else
    {
      if (a5 >= 0)
        v14 = a5;
      else
        v14 = a5 + 1;
      v15 = v14 >> 1;
      v16 = (char *)&a2[2 * (v14 >> 1)];
      v17 = a2;
      if (v13 != a2)
      {
        v18 = ((char *)a2 - (char *)result - v9 * 2) >> 2;
        v17 = &result[v9];
        do
        {
          v19 = v18 >> 1;
          v20 = &v17[2 * (v18 >> 1)];
          v22 = *v20;
          v21 = v20 + 2;
          v18 += ~(v18 >> 1);
          if (*(unsigned __int16 *)v16 < v22)
            v18 = v19;
          else
            v17 = v21;
        }
        while (v18);
      }
      v23 = ((char *)v17 - (char *)result - v9 * 2) >> 2;
      v24 = &a2[2 * (v14 >> 1)];
      if (v17 != a2)
        goto LABEL_33;
    }
LABEL_49:
    a4 = -(v23 + v11);
    v43 = a5 - v15;
    if (v23 + v15 >= a5 - (v23 + v15) - v11)
    {
      v47 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(v24, v16, a3, a4, a5 - v15, a6, a7);
      a4 = v23;
      a3 = v24;
      a5 = v15;
      result = v13;
      a2 = v17;
      a6 = v47;
      if (!v15)
        return result;
    }
    else
    {
      v44 = v13;
      v45 = a3;
      v46 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(v44, v17, v24, v23, v15, a6, a7);
      a3 = v45;
      a5 = v43;
      result = v24;
      a2 = (unsigned __int16 *)v16;
      a6 = v46;
      if (!v43)
        return result;
    }
  }
  if (a4 <= a5)
  {
    if (result != a2)
    {
      v65 = (char *)a2 - (char *)result - 4;
      v66 = (unsigned __int16 *)a6;
      v67 = result;
      if (v65 < 0x1C)
        goto LABEL_137;
      v66 = (unsigned __int16 *)a6;
      v67 = result;
      if ((unint64_t)(a6 - (_QWORD)result) < 0x20)
        goto LABEL_137;
      v68 = (v65 >> 2) + 1;
      v69 = v68 & 0x7FFFFFFFFFFFFFF8;
      v70 = 2 * (v68 & 0x7FFFFFFFFFFFFFF8);
      v66 = (unsigned __int16 *)(a6 + v70 * 2);
      v67 = &result[v70];
      v71 = (__int128 *)(result + 8);
      v72 = (_OWORD *)(a6 + 16);
      v73 = v68 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v74 = *v71;
        *(v72 - 1) = *(v71 - 1);
        *v72 = v74;
        v71 += 2;
        v72 += 2;
        v73 -= 8;
      }
      while (v73);
      if (v68 == v69)
      {
        v75 = a6 + 4 * v69 - 4;
      }
      else
      {
LABEL_137:
        do
        {
          v76 = *(_DWORD *)v67;
          v67 += 2;
          *(_DWORD *)v66 = v76;
          v66 += 2;
        }
        while (v67 != a2);
        v75 = (uint64_t)(v66 - 2);
      }
      if (v66 != (unsigned __int16 *)a6)
      {
        v77 = (unsigned __int16 *)a6;
        while (a2 != a3)
        {
          v78 = *a2;
          v79 = *v77;
          v80 = v78 >= v79;
          if (v78 < v79)
          {
            v81 = a2;
          }
          else
          {
            LOWORD(v78) = *v77;
            v81 = v77;
          }
          v82 = v81[1];
          if (v80)
            v77 += 2;
          else
            a2 += 2;
          *result = v78;
          result[1] = v82;
          result += 2;
          if (v77 == v66)
            return result;
        }
        v100 = (v65 & 0xFFFFFFFFFFFFFFFCLL) + a6 - (_QWORD)v77;
        if (v100 < 0x5C
          || ((v101 = (char *)result + (v100 & 0xFFFFFFFFFFFFFFFCLL),
               v102 = (unint64_t)(v101 + 2),
               v103 = (unint64_t)(v101 + 4),
               result + 1 < (unsigned __int16 *)((char *)v77 + (v100 & 0xFFFFFFFFFFFFFFFCLL) + 4))
            ? (v104 = (unint64_t)(v77 + 1) >= v103)
            : (v104 = 1),
              v104 ? (v105 = 0) : (v105 = 1),
              (unint64_t)v77 < v102
            ? (v106 = result >= (unsigned __int16 *)((char *)v77 + (v100 & 0xFFFFFFFFFFFFFFFCLL) + 2))
            : (v106 = 1),
              !v106 || (v105 & 1) != 0))
        {
          v110 = result;
          v111 = v77;
        }
        else
        {
          v107 = 0;
          v108 = (v100 >> 2) + 1;
          v109 = 2 * (v108 & 0x7FFFFFFFFFFFFFF0);
          v110 = &result[v109];
          v111 = &v77[v109];
          v112 = v108 & 0x7FFFFFFFFFFFFFF0;
          do
          {
            v113 = &result[v107];
            v114 = *(_OWORD *)&v77[v107 + 8];
            v116 = *(_OWORD *)&v77[v107 + 16];
            v115 = *(_OWORD *)&v77[v107 + 24];
            *(_OWORD *)v113 = *(_OWORD *)&v77[v107];
            *((_OWORD *)v113 + 1) = v114;
            *((_OWORD *)v113 + 2) = v116;
            *((_OWORD *)v113 + 3) = v115;
            v107 += 32;
            v112 -= 16;
          }
          while (v112);
          if (v108 == (v108 & 0x7FFFFFFFFFFFFFF0))
            return result;
        }
        do
        {
          v119 = v111 == (unsigned __int16 *)v75;
          v120 = *(_DWORD *)v111;
          v111 += 2;
          *(_DWORD *)v110 = v120;
          v110 += 2;
        }
        while (!v119);
      }
    }
  }
  else if (a2 != a3)
  {
    v48 = (char *)a3 - (char *)a2 - 4;
    v49 = (_DWORD *)a6;
    v50 = a2;
    if (v48 < 0x1C)
      goto LABEL_138;
    v49 = (_DWORD *)a6;
    v50 = a2;
    if ((unint64_t)(a6 - (_QWORD)a2) < 0x20)
      goto LABEL_138;
    v51 = (v48 >> 2) + 1;
    v52 = 2 * (v51 & 0x7FFFFFFFFFFFFFF8);
    v49 = (_DWORD *)(a6 + v52 * 2);
    v50 = &a2[v52];
    v53 = (__int128 *)(a2 + 8);
    v54 = (_OWORD *)(a6 + 16);
    v55 = v51 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v56 = *v53;
      *(v54 - 1) = *(v53 - 1);
      *v54 = v56;
      v53 += 2;
      v54 += 2;
      v55 -= 8;
    }
    while (v55);
    if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_138:
      do
      {
        v57 = *(_DWORD *)v50;
        v50 += 2;
        *v49++ = v57;
      }
      while (v50 != a3);
    }
    if (v49 != (_DWORD *)a6)
    {
      v58 = 0;
      v59 = (unint64_t)a3;
      while (a2 != result)
      {
        v60 = *(a2 - 2);
        v61 = *((unsigned __int16 *)v49 - 2);
        v62 = v61 >= v60;
        if (v61 < v60)
        {
          v63 = a2;
        }
        else
        {
          LOWORD(v60) = *((_WORD *)v49 - 2);
          v63 = (unsigned __int16 *)v49;
        }
        if (v62)
          --v49;
        else
          a2 -= 2;
        v64 = *(v63 - 1);
        *(_WORD *)(v59 - 4) = v60;
        v59 -= 4;
        *(_WORD *)(v59 + 2) = v64;
        ++v58;
        if (v49 == (_DWORD *)a6)
          return result;
      }
      v85 = (unint64_t)v49 - a6 - 4;
      if (v85 < 0x3C
        || ((v86 = &a3[-2 * v58],
             v87 = (unint64_t)v86 - (v85 & 0xFFFFFFFFFFFFFFFCLL) - 4,
             v88 = (unint64_t)(v86 - 1),
             (char *)v86 - (v85 & 0xFFFFFFFFFFFFFFFCLL) - 2 < (char *)v49)
          ? (v89 = (unint64_t)v49 - (v85 & 0xFFFFFFFFFFFFFFFCLL) - 2 >= v59)
          : (v89 = 1),
            v89 ? (v90 = 0) : (v90 = 1),
            (unint64_t)v49 - (v85 & 0xFFFFFFFFFFFFFFFCLL) - 4 < v88
          ? (v91 = v87 >= (unint64_t)v49 - 2)
          : (v91 = 1),
            !v91 || (v90 & 1) != 0))
      {
        v94 = v59;
        v95 = v49;
      }
      else
      {
        v92 = (v85 >> 2) + 1;
        v93 = 4 * (v92 & 0x7FFFFFFFFFFFFFF8);
        v94 = v59 - v93;
        v95 = &v49[v93 / 0xFFFFFFFFFFFFFFFCLL];
        v96 = 0x3FFFFFFFFFFFFFF8;
        v97 = v92 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v98 = (const __int16 *)&v49[v96];
          v121 = vld2q_s16(v98);
          v99 = (__int16 *)(v59 + v96 * 4);
          vst2q_s16(v99, v121);
          v96 -= 8;
          v97 -= 8;
        }
        while (v97);
        if (v92 == (v92 & 0x7FFFFFFFFFFFFFF8))
          return result;
      }
      v117 = v94 - 2;
      do
      {
        v118 = *--v95;
        *(_DWORD *)(v117 - 2) = v118;
        v117 -= 4;
      }
      while (v95 != (_DWORD *)a6);
    }
  }
  return result;
}

uint64_t PAL::iso2022JPEncode(WTF::StringView,WTF::Function<void ()(char32_t,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_1::operator()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  _BYTE *v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  _BYTE *v28;

  v1 = result;
  **(_BYTE **)result = 0;
  v2 = *(_QWORD *)(result + 8);
  v3 = *(unsigned int *)(v2 + 12);
  if ((_DWORD)v3 == *(_DWORD *)(v2 + 8))
  {
    v4 = v3 + (v3 >> 2);
    if (v4 >= 0x10)
      v5 = v4 + 1;
    else
      v5 = 16;
    if (v5 <= v3 + 1)
      v6 = v3 + 1;
    else
      v6 = v5;
    if (HIDWORD(v6))
      goto LABEL_46;
    v7 = *(void **)v2;
    v8 = (void *)WTF::fastMalloc((WTF *)v6);
    *(_DWORD *)(v2 + 8) = v6;
    *(_QWORD *)v2 = v8;
    result = (uint64_t)memcpy(v8, v7, v3);
    if (v7)
    {
      if (*(void **)v2 == v7)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v7, v9);
    }
    v10 = (_BYTE *)(*(_QWORD *)v2 + *(unsigned int *)(v2 + 12));
  }
  else
  {
    v10 = (_BYTE *)(*(_QWORD *)v2 + v3);
  }
  *v10 = 27;
  ++*(_DWORD *)(v2 + 12);
  v11 = *(_QWORD *)(v1 + 8);
  v12 = *(unsigned int *)(v11 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(v11 + 8))
  {
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= v12 + 1)
      v15 = v12 + 1;
    else
      v15 = v14;
    if (HIDWORD(v15))
    {
      __break(0xC471u);
      JUMPOUT(0x1945E1524);
    }
    v16 = *(void **)v11;
    v17 = (void *)WTF::fastMalloc((WTF *)v15);
    *(_DWORD *)(v11 + 8) = v15;
    *(_QWORD *)v11 = v17;
    result = (uint64_t)memcpy(v17, v16, v12);
    if (v16)
    {
      if (*(void **)v11 == v16)
      {
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v16, v18);
    }
    v19 = (_BYTE *)(*(_QWORD *)v11 + *(unsigned int *)(v11 + 12));
  }
  else
  {
    v19 = (_BYTE *)(*(_QWORD *)v11 + v12);
  }
  *v19 = 40;
  ++*(_DWORD *)(v11 + 12);
  v20 = *(_QWORD *)(v1 + 8);
  v21 = *(unsigned int *)(v20 + 12);
  if ((_DWORD)v21 != *(_DWORD *)(v20 + 8))
  {
    v28 = (_BYTE *)(*(_QWORD *)v20 + v21);
    goto LABEL_43;
  }
  v22 = v21 + (v21 >> 2);
  if (v22 >= 0x10)
    v23 = v22 + 1;
  else
    v23 = 16;
  if (v23 <= v21 + 1)
    v24 = v21 + 1;
  else
    v24 = v23;
  if (HIDWORD(v24))
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x1945E151CLL);
  }
  v25 = *(void **)v20;
  v26 = (void *)WTF::fastMalloc((WTF *)v24);
  *(_DWORD *)(v20 + 8) = v24;
  *(_QWORD *)v20 = v26;
  result = (uint64_t)memcpy(v26, v25, v21);
  if (v25)
  {
    if (*(void **)v20 == v25)
    {
      *(_QWORD *)v20 = 0;
      *(_DWORD *)(v20 + 8) = 0;
    }
    result = WTF::fastFree((WTF *)v25, v27);
  }
  v28 = (_BYTE *)(*(_QWORD *)v20 + *(unsigned int *)(v20 + 12));
LABEL_43:
  *v28 = 66;
  ++*(_DWORD *)(v20 + 12);
  return result;
}

void WTF::Detail::CallableWrapper<PAL::iso2022JPEncode(WTF::StringView,WTF::Function<void ()(char32_t,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,char32_t>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  _BYTE *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  size_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  _BYTE *v52;
  uint64_t v53;
  size_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  _BYTE *v61;
  _BYTE *v62;
  unsigned int v63;
  uint64_t v64;
  size_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  _BYTE *v72;
  uint64_t v73;
  size_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  _BYTE *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  void *v86;
  void *v87;
  unsigned int v88;
  char v89;
  size_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  size_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  void *v102;
  void *v103;
  void *v104;
  _BYTE *v105;
  uint64_t v106;
  size_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  void *v111;
  void *v112;
  void *v113;
  _BYTE *v114;
  _BYTE *v115;
  char v116;
  char v117;
  char **v118;
  char *v119;

  v2 = a2;
  v4 = *(_BYTE **)(a1 + 8);
  if (*v4 > 1u)
  {
    if (a2 <= 0x7F)
    {
LABEL_8:
      PAL::iso2022JPEncode(WTF::StringView,WTF::Function<void ()(char32_t,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_1::operator()(*(_QWORD *)(a1 + 32));
LABEL_114:
      (*(void (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 16))(**(_QWORD **)(a1 + 40), v2);
      return;
    }
LABEL_36:
    v17 = 0;
    if ((_DWORD)a2 == 165)
      goto LABEL_39;
    goto LABEL_37;
  }
  if (a2 <= 0x1B && ((1 << a2) & 0x800C000) != 0)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    if (**(_BYTE **)v6 == 2)
      PAL::iso2022JPEncode(WTF::StringView,WTF::Function<void ()(char32_t,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_1::operator()(*(_QWORD *)(v6 + 8));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(v6 + 16) + 16))(**(_QWORD **)(v6 + 16), 65533, v5);
    return;
  }
  if (!*v4)
  {
    if (a2 <= 0x7F)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(unsigned int *)(v7 + 12);
      if ((_DWORD)v8 == *(_DWORD *)(v7 + 8))
      {
        v12 = v8 + (v8 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= v8 + 1)
          v11 = v8 + 1;
        else
          v11 = v13;
        if (HIDWORD(v11))
        {
          __break(0xC471u);
          JUMPOUT(0x1945E1F3CLL);
        }
LABEL_31:
        v14 = *(void **)v7;
        v15 = (void *)WTF::fastMalloc((WTF *)v11);
        *(_DWORD *)(v7 + 8) = v11;
        *(_QWORD *)v7 = v15;
        memcpy(v15, v14, v8);
        if (v14)
        {
          if (*(void **)v7 == v14)
          {
            *(_QWORD *)v7 = 0;
            *(_DWORD *)(v7 + 8) = 0;
          }
          WTF::fastFree((WTF *)v14, v16);
        }
        *(_BYTE *)(*(_QWORD *)v7 + *(unsigned int *)(v7 + 12)) = v2;
        goto LABEL_130;
      }
LABEL_129:
      *(_BYTE *)(*(_QWORD *)v7 + v8) = a2;
LABEL_130:
      ++*(_DWORD *)(v7 + 12);
      return;
    }
    goto LABEL_36;
  }
  if (a2 <= 0x7F)
  {
    if ((_DWORD)a2 != 92 && (_DWORD)a2 != 126)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(unsigned int *)(v7 + 12);
      if ((_DWORD)v8 == *(_DWORD *)(v7 + 8))
      {
        v9 = v8 + (v8 >> 2);
        if (v9 >= 0x10)
          v10 = v9 + 1;
        else
          v10 = 16;
        if (v10 <= v8 + 1)
          v11 = v8 + 1;
        else
          v11 = v10;
        if (HIDWORD(v11))
          goto LABEL_217;
        goto LABEL_31;
      }
      goto LABEL_129;
    }
    goto LABEL_8;
  }
  if ((_DWORD)a2 == 8254)
  {
    v36 = *(_QWORD *)(a1 + 24);
    v37 = *(unsigned int *)(v36 + 12);
    if ((_DWORD)v37 == *(_DWORD *)(v36 + 8))
    {
      v82 = v37 + (v37 >> 2);
      if (v82 >= 0x10)
        v83 = v82 + 1;
      else
        v83 = 16;
      if (v83 <= v37 + 1)
        v84 = v37 + 1;
      else
        v84 = v83;
      if (HIDWORD(v84))
      {
LABEL_217:
        __break(0xC471u);
        JUMPOUT(0x1945E163CLL);
      }
      v85 = *(_BYTE **)v36;
      v86 = (void *)WTF::fastMalloc((WTF *)v84);
      *(_DWORD *)(v36 + 8) = v84;
      *(_QWORD *)v36 = v86;
      memcpy(v86, v85, v37);
      if (v85)
      {
        if (*(_BYTE **)v36 == v85)
        {
          *(_QWORD *)v36 = 0;
          *(_DWORD *)(v36 + 8) = 0;
        }
        WTF::fastFree((WTF *)v85, v87);
      }
      *(_BYTE *)(*(_QWORD *)v36 + *(unsigned int *)(v36 + 12)) = 126;
LABEL_206:
      ++*(_DWORD *)(v36 + 12);
      return;
    }
    v115 = *(_BYTE **)v36;
    v116 = 126;
LABEL_205:
    v115[v37] = v116;
    goto LABEL_206;
  }
  if ((_DWORD)a2 == 165)
  {
    v36 = *(_QWORD *)(a1 + 24);
    v37 = *(unsigned int *)(v36 + 12);
    if ((_DWORD)v37 == *(_DWORD *)(v36 + 8))
    {
      v38 = v37 + (v37 >> 2);
      if (v38 >= 0x10)
        v39 = v38 + 1;
      else
        v39 = 16;
      if (v39 <= v37 + 1)
        v40 = v37 + 1;
      else
        v40 = v39;
      if (HIDWORD(v40))
      {
        __break(0xC471u);
        JUMPOUT(0x1945E1F6CLL);
      }
      v41 = *(_BYTE **)v36;
      v42 = (void *)WTF::fastMalloc((WTF *)v40);
      *(_DWORD *)(v36 + 8) = v40;
      *(_QWORD *)v36 = v42;
      memcpy(v42, v41, v37);
      if (v41)
      {
        if (*(_BYTE **)v36 == v41)
        {
          *(_QWORD *)v36 = 0;
          *(_DWORD *)(v36 + 8) = 0;
        }
        WTF::fastFree((WTF *)v41, v43);
      }
      *(_BYTE *)(*(_QWORD *)v36 + *(unsigned int *)(v36 + 12)) = 92;
      goto LABEL_206;
    }
    v115 = *(_BYTE **)v36;
    v116 = 92;
    goto LABEL_205;
  }
  v17 = 1;
LABEL_37:
  if ((_DWORD)a2 == 8722)
  {
    v2 = 65293;
    goto LABEL_56;
  }
  if ((_DWORD)a2 != 8254)
  {
    if ((a2 - 65377) <= 0x3E)
      v2 = PAL::iso2022JPEncode(WTF::StringView,WTF::Function<void ()(char32_t,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator() const(char32_t)::iso2022JPKatakana[(a2 - 65377)];
    goto LABEL_56;
  }
LABEL_39:
  if ((v17 & 1) == 0)
  {
    *v4 = 1;
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(unsigned int *)(v18 + 12);
    if ((_DWORD)v19 == *(_DWORD *)(v18 + 8))
    {
      v20 = v19 + (v19 >> 2);
      if (v20 >= 0x10)
        v21 = v20 + 1;
      else
        v21 = 16;
      if (v21 <= v19 + 1)
        v22 = v19 + 1;
      else
        v22 = v21;
      if (HIDWORD(v22))
      {
        __break(0xC471u);
        JUMPOUT(0x1945E1F24);
      }
      v23 = *(void **)v18;
      v24 = (void *)WTF::fastMalloc((WTF *)v22);
      *(_DWORD *)(v18 + 8) = v22;
      *(_QWORD *)v18 = v24;
      memcpy(v24, v23, v19);
      if (v23)
      {
        if (*(void **)v18 == v23)
        {
          *(_QWORD *)v18 = 0;
          *(_DWORD *)(v18 + 8) = 0;
        }
        WTF::fastFree((WTF *)v23, v25);
      }
      v26 = (_BYTE *)(*(_QWORD *)v18 + *(unsigned int *)(v18 + 12));
    }
    else
    {
      v26 = (_BYTE *)(*(_QWORD *)v18 + v19);
    }
    *v26 = 27;
    ++*(_DWORD *)(v18 + 12);
    v44 = *(_QWORD *)(a1 + 24);
    v45 = *(unsigned int *)(v44 + 12);
    if ((_DWORD)v45 == *(_DWORD *)(v44 + 8))
    {
      v46 = v45 + (v45 >> 2);
      if (v46 >= 0x10)
        v47 = v46 + 1;
      else
        v47 = 16;
      if (v47 <= v45 + 1)
        v48 = v45 + 1;
      else
        v48 = v47;
      if (HIDWORD(v48))
      {
        __break(0xC471u);
        JUMPOUT(0x1945E1F2CLL);
      }
      v49 = *(void **)v44;
      v50 = (void *)WTF::fastMalloc((WTF *)v48);
      *(_DWORD *)(v44 + 8) = v48;
      *(_QWORD *)v44 = v50;
      memcpy(v50, v49, v45);
      if (v49)
      {
        if (*(void **)v44 == v49)
        {
          *(_QWORD *)v44 = 0;
          *(_DWORD *)(v44 + 8) = 0;
        }
        WTF::fastFree((WTF *)v49, v51);
      }
      v52 = (_BYTE *)(*(_QWORD *)v44 + *(unsigned int *)(v44 + 12));
    }
    else
    {
      v52 = (_BYTE *)(*(_QWORD *)v44 + v45);
    }
    *v52 = 40;
    ++*(_DWORD *)(v44 + 12);
    v53 = *(_QWORD *)(a1 + 24);
    v54 = *(unsigned int *)(v53 + 12);
    if ((_DWORD)v54 == *(_DWORD *)(v53 + 8))
    {
      v55 = v54 + (v54 >> 2);
      if (v55 >= 0x10)
        v56 = v55 + 1;
      else
        v56 = 16;
      if (v56 <= v54 + 1)
        v57 = v54 + 1;
      else
        v57 = v56;
      if (HIDWORD(v57))
      {
        __break(0xC471u);
        JUMPOUT(0x1945E1F34);
      }
      v58 = *(void **)v53;
      v59 = (void *)WTF::fastMalloc((WTF *)v57);
      *(_DWORD *)(v53 + 8) = v57;
      *(_QWORD *)v53 = v59;
      memcpy(v59, v58, v54);
      if (v58)
      {
        if (*(void **)v53 == v58)
        {
          *(_QWORD *)v53 = 0;
          *(_DWORD *)(v53 + 8) = 0;
        }
        WTF::fastFree((WTF *)v58, v60);
      }
      v61 = (_BYTE *)(*(_QWORD *)v53 + *(unsigned int *)(v53 + 12));
    }
    else
    {
      v61 = (_BYTE *)(*(_QWORD *)v53 + v54);
    }
    *v61 = 74;
    ++*(_DWORD *)(v53 + 12);
    goto LABEL_114;
  }
LABEL_56:
  v27 = atomic_load(&qword_1ECE7EAF0);
  if (v27 != -1)
  {
    v119 = &v117;
    v118 = &v119;
    std::__call_once(&qword_1ECE7EAF0, &v118, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::jis0208EncodeIndex(void)::$_0 &&>>);
  }
  if (WORD1(v2))
    goto LABEL_66;
  v28 = 7724;
  v29 = (unsigned __int16 *)_MergedGlobals_77;
  do
  {
    v30 = v28 >> 1;
    v31 = &v29[2 * (v28 >> 1)];
    v33 = *v31;
    v32 = v31 + 2;
    v28 += ~(v28 >> 1);
    if (v2 > v33)
      v29 = v32;
    else
      v28 = v30;
  }
  while (v28);
  if (v29 == (unsigned __int16 *)(_MergedGlobals_77 + 30896) || v2 < *v29)
  {
LABEL_66:
    v35 = *(_QWORD *)(a1 + 16);
    v34 = *(_QWORD *)(a1 + 24);
    if (**(_BYTE **)v35 == 2)
      PAL::iso2022JPEncode(WTF::StringView,WTF::Function<void ()(char32_t,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_1::operator()(*(_QWORD *)(v35 + 8));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(v35 + 16) + 16))(**(_QWORD **)(v35 + 16), v2, v34);
  }
  else
  {
    v62 = *(_BYTE **)(a1 + 8);
    if (*v62 == 2)
    {
      v63 = v29[1];
      v64 = *(_QWORD *)(a1 + 24);
      v65 = *(unsigned int *)(v64 + 12);
      if ((_DWORD)v65 == *(_DWORD *)(v64 + 8))
      {
        v66 = v65 + (v65 >> 2);
        if (v66 >= 0x10)
          v67 = v66 + 1;
        else
          v67 = 16;
        if (v67 <= v65 + 1)
          v68 = v65 + 1;
        else
          v68 = v67;
        if (HIDWORD(v68))
        {
          __break(0xC471u);
          JUMPOUT(0x1945E1F44);
        }
        v69 = *(void **)v64;
        v70 = (void *)WTF::fastMalloc((WTF *)v68);
        *(_DWORD *)(v64 + 8) = v68;
        *(_QWORD *)v64 = v70;
        memcpy(v70, v69, v65);
        if (v69)
        {
          if (*(void **)v64 == v69)
          {
            *(_QWORD *)v64 = 0;
            *(_DWORD *)(v64 + 8) = 0;
          }
          WTF::fastFree((WTF *)v69, v71);
        }
        v72 = (_BYTE *)(*(_QWORD *)v64 + *(unsigned int *)(v64 + 12));
      }
      else
      {
        v72 = (_BYTE *)(*(_QWORD *)v64 + v65);
      }
      v88 = (44621 * (v63 >> 1)) >> 21;
      *v72 = v88 + 33;
      ++*(_DWORD *)(v64 + 12);
      v36 = *(_QWORD *)(a1 + 24);
      v89 = v63 - 94 * v88 + 33;
      v90 = *(unsigned int *)(v36 + 12);
      if ((_DWORD)v90 == *(_DWORD *)(v36 + 8))
      {
        v91 = v90 + (v90 >> 2);
        if (v91 >= 0x10)
          v92 = v91 + 1;
        else
          v92 = 16;
        if (v92 <= v90 + 1)
          v93 = v90 + 1;
        else
          v93 = v92;
        if (HIDWORD(v93))
        {
          __break(0xC471u);
          JUMPOUT(0x1945E1F54);
        }
        v94 = *(_BYTE **)v36;
        v95 = (void *)WTF::fastMalloc((WTF *)v93);
        *(_DWORD *)(v36 + 8) = v93;
        *(_QWORD *)v36 = v95;
        memcpy(v95, v94, v90);
        if (v94)
        {
          if (*(_BYTE **)v36 == v94)
          {
            *(_QWORD *)v36 = 0;
            *(_DWORD *)(v36 + 8) = 0;
          }
          WTF::fastFree((WTF *)v94, v96);
        }
        *(_BYTE *)(*(_QWORD *)v36 + *(unsigned int *)(v36 + 12)) = v89;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)v36 + v90) = v89;
      }
      goto LABEL_206;
    }
    *v62 = 2;
    v73 = *(_QWORD *)(a1 + 24);
    v74 = *(unsigned int *)(v73 + 12);
    if ((_DWORD)v74 == *(_DWORD *)(v73 + 8))
    {
      v75 = v74 + (v74 >> 2);
      if (v75 >= 0x10)
        v76 = v75 + 1;
      else
        v76 = 16;
      if (v76 <= v74 + 1)
        v77 = v74 + 1;
      else
        v77 = v76;
      if (HIDWORD(v77))
      {
        __break(0xC471u);
        JUMPOUT(0x1945E1F4CLL);
      }
      v78 = *(void **)v73;
      v79 = (void *)WTF::fastMalloc((WTF *)v77);
      *(_DWORD *)(v73 + 8) = v77;
      *(_QWORD *)v73 = v79;
      memcpy(v79, v78, v74);
      if (v78)
      {
        if (*(void **)v73 == v78)
        {
          *(_QWORD *)v73 = 0;
          *(_DWORD *)(v73 + 8) = 0;
        }
        WTF::fastFree((WTF *)v78, v80);
      }
      v81 = (_BYTE *)(*(_QWORD *)v73 + *(unsigned int *)(v73 + 12));
    }
    else
    {
      v81 = (_BYTE *)(*(_QWORD *)v73 + v74);
    }
    *v81 = 27;
    ++*(_DWORD *)(v73 + 12);
    v97 = *(_QWORD *)(a1 + 24);
    v98 = *(unsigned int *)(v97 + 12);
    if ((_DWORD)v98 == *(_DWORD *)(v97 + 8))
    {
      v99 = v98 + (v98 >> 2);
      if (v99 >= 0x10)
        v100 = v99 + 1;
      else
        v100 = 16;
      if (v100 <= v98 + 1)
        v101 = v98 + 1;
      else
        v101 = v100;
      if (HIDWORD(v101))
      {
        __break(0xC471u);
        JUMPOUT(0x1945E1F5CLL);
      }
      v102 = *(void **)v97;
      v103 = (void *)WTF::fastMalloc((WTF *)v101);
      *(_DWORD *)(v97 + 8) = v101;
      *(_QWORD *)v97 = v103;
      memcpy(v103, v102, v98);
      if (v102)
      {
        if (*(void **)v97 == v102)
        {
          *(_QWORD *)v97 = 0;
          *(_DWORD *)(v97 + 8) = 0;
        }
        WTF::fastFree((WTF *)v102, v104);
      }
      v105 = (_BYTE *)(*(_QWORD *)v97 + *(unsigned int *)(v97 + 12));
    }
    else
    {
      v105 = (_BYTE *)(*(_QWORD *)v97 + v98);
    }
    *v105 = 36;
    ++*(_DWORD *)(v97 + 12);
    v106 = *(_QWORD *)(a1 + 24);
    v107 = *(unsigned int *)(v106 + 12);
    if ((_DWORD)v107 == *(_DWORD *)(v106 + 8))
    {
      v108 = v107 + (v107 >> 2);
      if (v108 >= 0x10)
        v109 = v108 + 1;
      else
        v109 = 16;
      if (v109 <= v107 + 1)
        v110 = v107 + 1;
      else
        v110 = v109;
      if (HIDWORD(v110))
      {
        __break(0xC471u);
        JUMPOUT(0x1945E1F64);
      }
      v111 = *(void **)v106;
      v112 = (void *)WTF::fastMalloc((WTF *)v110);
      *(_DWORD *)(v106 + 8) = v110;
      *(_QWORD *)v106 = v112;
      memcpy(v112, v111, v107);
      if (v111)
      {
        if (*(void **)v106 == v111)
        {
          *(_QWORD *)v106 = 0;
          *(_DWORD *)(v106 + 8) = 0;
        }
        WTF::fastFree((WTF *)v111, v113);
      }
      v114 = (_BYTE *)(*(_QWORD *)v106 + *(unsigned int *)(v106 + 12));
    }
    else
    {
      v114 = (_BYTE *)(*(_QWORD *)v106 + v107);
    }
    *v114 = 66;
    ++*(_DWORD *)(v106 + 12);
    (*(void (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 16))(**(_QWORD **)(a1 + 40), v2);
  }
}

unsigned __int16 *std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::eucKREncodingIndex(void)::$_0 &&>>()
{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  const __int16 *v9;
  const __int16 *v10;
  int16x8_t v11;
  int16x8_t v12;
  __int16 *v13;
  __int16 *v14;
  uint64_t v15;
  unint64_t v16;
  char v18;
  char **v19;
  char *v20;
  int16x8x2_t v21;
  int16x8x2_t v22;

  v0 = (void *)operator new();
  bzero(v0, 0x10A60uLL);
  qword_1ECE7EAF8 = (uint64_t)v0;
  v1 = atomic_load(&PAL::eucKR(void)::flag);
  if (v1 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&PAL::eucKR(void)::flag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::eucKR(void)::$_0 &&>>);
  }
  v2 = 0;
  v3 = PAL::eucKR(void)::array;
  v4 = (unsigned __int16 *)qword_1ECE7EAF8;
  v6 = qword_1ECE7EAF8 + 2 < (unint64_t)(PAL::eucKR(void)::array + 68190)
    && PAL::eucKR(void)::array < (unint64_t)(qword_1ECE7EAF8 + 68192);
  v7 = PAL::eucKR(void)::array + 2 >= (unint64_t)(qword_1ECE7EAF8 + 68190)
    || qword_1ECE7EAF8 >= (unint64_t)(PAL::eucKR(void)::array + 68192);
  if (v7 && !v6)
  {
    v8 = 0x7FFFFFFFFFFF7AE0;
    v2 = 17040;
    do
    {
      v9 = (const __int16 *)(v3 + v8 * 2 + 68160);
      v10 = (const __int16 *)(v3 + v8 * 2 + 68192);
      v21 = vld2q_s16(v9);
      v11 = v21.val[0];
      v22 = vld2q_s16(v10);
      v12 = v22.val[0];
      v13 = (__int16 *)&v4[v8 + 34080];
      vst2q_s16(v13, *(int16x8x2_t *)((char *)&v21 + 16));
      v14 = (__int16 *)&v4[v8 + 34096];
      vst2q_s16(v14, *(int16x8x2_t *)((char *)&v22 + 16));
      v8 += 32;
    }
    while (v8 * 2);
  }
  v15 = 2 * v2;
  do
  {
    HIDWORD(v16) = *(_DWORD *)(v3 + v15 * 2);
    LODWORD(v16) = HIDWORD(v16);
    *(_DWORD *)&v4[v15] = v16 >> 16;
    v15 += 2;
  }
  while (v15 != 34096);
  return std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *,false>(v4, v4 + 34096, 28, 1);
}

unsigned __int16 *std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *,false>(unsigned __int16 *result, unsigned __int16 *a2, uint64_t a3, char a4)
{
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 *v19;
  unsigned __int16 v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned __int16 v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int16 *v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  unsigned __int16 *v33;
  unsigned int v34;
  unint64_t v35;
  unsigned __int16 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int16 v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unsigned __int16 v43;
  unsigned int v44;
  unsigned int v45;
  unsigned __int16 v46;
  unsigned int v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  unsigned int v52;
  unint64_t v53;
  unsigned __int16 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned __int16 v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  unsigned __int16 v61;
  unsigned int v62;
  unsigned int v63;
  unsigned __int16 v64;
  unsigned __int16 *v65;
  unsigned __int16 *v66;
  unsigned __int16 v67;
  unsigned __int16 v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  unsigned __int16 v75;
  unsigned __int16 *v76;
  unsigned __int16 *v77;
  unsigned int v78;
  unsigned __int16 *v79;
  unsigned __int16 v80;
  unsigned __int16 *v81;
  unsigned __int16 v82;
  unsigned __int16 *v83;
  unsigned __int16 *v84;
  unsigned __int16 v85;
  unsigned __int16 v86;
  unsigned __int16 *v87;
  unsigned __int16 v88;
  unsigned __int16 *v89;
  unsigned __int16 v90;
  uint64_t v91;
  unsigned int v92;
  unsigned __int16 *v93;
  unsigned __int16 *v94;
  unsigned int v95;
  unsigned __int16 *v96;
  unsigned __int16 *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned __int16 v100;
  unsigned __int16 *v101;
  unsigned __int16 v102;
  unsigned __int16 *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned __int16 *v106;
  BOOL v107;
  unsigned __int16 *v108;
  unsigned int v109;
  unsigned __int16 *v110;
  unsigned __int16 *v111;
  unsigned int v112;
  unsigned __int16 v113;
  unsigned __int16 v114;
  unsigned __int16 v115;
  unsigned __int16 *v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned __int16 v122;
  unsigned int v123;
  unsigned int v124;
  unsigned __int16 v125;
  unsigned int v126;
  unsigned int v127;
  unsigned __int16 v128;
  unsigned __int16 v129;
  unsigned int v130;
  unsigned __int16 v131;
  unsigned int v132;
  unsigned __int16 v133;
  unsigned __int16 *v134;
  BOOL v136;
  uint64_t v137;
  unsigned __int16 *v138;
  unsigned __int16 *v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  char *v145;
  int64_t v146;
  int64_t v147;
  BOOL v148;
  uint64_t v149;
  unsigned __int16 *v150;
  unsigned int v151;
  unsigned int v152;
  BOOL v153;
  unsigned __int16 *v154;
  int v155;
  unsigned int v156;
  BOOL v157;
  unsigned __int16 *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  int64_t v163;
  unsigned __int16 *v164;
  unsigned int v165;
  unsigned int v166;
  BOOL v167;
  unsigned __int16 *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unsigned __int16 *v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  unsigned __int16 *v176;
  unsigned __int16 v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  int v185;
  unsigned __int16 *v186;
  uint64_t v187;
  unsigned __int16 *v188;
  unsigned __int16 v189;
  unsigned __int16 v190;
  unsigned int v191;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 2;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v119 = *(a2 - 2);
        v120 = *v8;
        if (v119 < v120)
        {
          *v8 = v119;
          *(a2 - 2) = v120;
          goto LABEL_114;
        }
        return result;
      case 3:
        LODWORD(v93) = v8[2];
        v92 = *v8;
        v121 = *(a2 - 2);
        if (v93 >= v92)
        {
          if (v121 < v93)
          {
            v8[2] = v121;
            *(a2 - 2) = (unsigned __int16)v93;
            v177 = v8[3];
            v8[3] = *(a2 - 1);
            *(a2 - 1) = v177;
            v178 = v8[2];
            v179 = *v8;
            if (v178 < v179)
            {
              *v8 = v178;
              v8[2] = v179;
              v133 = v8[1];
              v129 = v8[3];
              goto LABEL_184;
            }
          }
        }
        else
        {
          if (v121 >= v93)
            goto LABEL_194;
          *v8 = v121;
          *(a2 - 2) = v92;
LABEL_114:
          v122 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v122;
        }
        return result;
      case 4:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(v8, v8 + 2, v8 + 4, v8 + 6);
        v123 = *(a2 - 2);
        v124 = v8[6];
        if (v123 < v124)
        {
          v8[6] = v123;
          *(a2 - 2) = v124;
          v125 = v8[7];
          v8[7] = *(a2 - 1);
          *(a2 - 1) = v125;
          v126 = v8[6];
          v127 = v8[4];
          if (v126 < v127)
          {
            v8[4] = v126;
            v8[6] = v127;
            v128 = v8[5];
            v129 = v8[7];
            v8[5] = v129;
            v8[7] = v128;
            v130 = v8[2];
            if (v126 < v130)
            {
              v8[2] = v126;
              v8[4] = v130;
              v131 = v8[3];
              v8[3] = v129;
              v8[5] = v131;
              v132 = *v8;
              if (v126 < v132)
              {
                *v8 = v126;
                v8[2] = v132;
                v133 = v8[1];
LABEL_184:
                v8[1] = v129;
                v8[3] = v133;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 95)
        {
          v134 = v8 + 2;
          v136 = v8 == a2 || v134 == a2;
          if ((a4 & 1) != 0)
          {
            if (v136)
              return result;
            v137 = 0;
            v138 = v8;
            while (1)
            {
              v140 = v138[2];
              v141 = *v138;
              v138 = v134;
              if (v140 < v141)
              {
                v142 = *(_DWORD *)v134;
                v143 = (unsigned __int16)*(_DWORD *)v138;
                v144 = v137;
                do
                {
                  v145 = (char *)v8 + v144;
                  *((_WORD *)v145 + 2) = v141;
                  *((_WORD *)v145 + 3) = *(unsigned __int16 *)((char *)v8 + v144 + 2);
                  if (!v144)
                  {
                    v139 = v8;
                    goto LABEL_131;
                  }
                  v141 = *((unsigned __int16 *)v145 - 2);
                  v144 -= 4;
                }
                while (v141 > v143);
                v139 = (unsigned __int16 *)((char *)v8 + v144 + 4);
LABEL_131:
                *v139 = v143;
                v139[1] = HIWORD(v142);
              }
              v134 = v138 + 2;
              v137 += 4;
              if (v138 + 2 == a2)
                return result;
            }
          }
          if (v136)
            return result;
          v180 = 0;
          v93 = v8 + 3;
          v181 = -2;
          v182 = 1;
          while (1)
          {
            v183 = 2 * v180;
            v180 = v182;
            v184 = v8[v183];
            if (*v134 < v184)
            {
              v185 = *(_DWORD *)v134;
              v92 = (unsigned __int16)*(_DWORD *)v134;
              v186 = v93;
              v187 = v181;
              v188 = v93;
              do
              {
                *(v186 - 1) = v184;
                v189 = *(v188 - 2);
                v188 -= 2;
                *v186 = v189;
                v153 = __CFADD__(v187++, 1);
                if (v153)
                  goto LABEL_193;
                v184 = *(v186 - 5);
                v186 = v188;
              }
              while (v184 > v92);
              *(v188 - 1) = v92;
              *v188 = HIWORD(v185);
            }
            v182 = v180 + 1;
            v134 = &v8[2 * v180 + 2];
            --v181;
            v93 += 2;
            if (v134 == a2)
              return result;
          }
        }
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[2 * ((unint64_t)v10 >> 1)];
          v13 = *(a2 - 2);
          if ((unint64_t)v9 < 0x201)
          {
            v17 = *v8;
            v18 = *v12;
            if (v17 >= v18)
            {
              if (v13 < v17)
              {
                *v8 = v13;
                *(a2 - 2) = v17;
                v27 = v8[1];
                v8[1] = *(a2 - 1);
                *(a2 - 1) = v27;
                v28 = *v8;
                v29 = *v12;
                if (v28 < v29)
                {
                  *v12 = v28;
                  *v8 = v29;
                  v30 = &v8[2 * v11];
                  v31 = v30[1];
                  v30[1] = v8[1];
                  v8[1] = v31;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_31;
            }
            v19 = &v8[2 * v11 + 1];
            if (v13 >= v17)
            {
              *v12 = v17;
              *v8 = v18;
              v20 = *v19;
              *v19 = v8[1];
              v8[1] = v20;
              v47 = *(a2 - 2);
              if (v47 >= v18)
                goto LABEL_31;
              *v8 = v47;
              *(a2 - 2) = v18;
              v8[1] = *(a2 - 1);
            }
            else
            {
              *v12 = v13;
              *(a2 - 2) = v18;
              v20 = *v19;
              *v19 = *(a2 - 1);
            }
            *(a2 - 1) = v20;
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v14 = *v12;
          v15 = *v8;
          if (v14 >= v15)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 2) = v14;
              v21 = &v8[2 * v11];
              v23 = v21[1];
              v22 = v21 + 1;
              *v22 = *(a2 - 1);
              *(a2 - 1) = v23;
              v24 = *v12;
              v25 = *v8;
              if (v24 < v25)
              {
                *v8 = v24;
                *v12 = v25;
                v26 = v8[1];
                v8[1] = *v22;
                *v22 = v26;
              }
            }
          }
          else if (v13 >= v14)
          {
            *v8 = v14;
            *v12 = v15;
            v32 = v8[1];
            v33 = &v8[2 * v11 + 1];
            v8[1] = *v33;
            *v33 = v32;
            v34 = *(a2 - 2);
            if (v34 < v15)
            {
              *v12 = v34;
              *(a2 - 2) = v15;
              *v33 = *(a2 - 1);
              *(a2 - 1) = v32;
            }
          }
          else
          {
            *v8 = v13;
            *(a2 - 2) = v15;
            v16 = v8[1];
            v8[1] = *(a2 - 1);
            *(a2 - 1) = v16;
          }
          v35 = v11 - 1;
          v36 = &v8[2 * v11 - 2];
          v37 = *v36;
          v38 = v8[2];
          v39 = *(a2 - 4);
          if (v37 >= v38)
          {
            if (v39 < v37)
            {
              *v36 = v39;
              *(a2 - 4) = v37;
              v41 = &v8[2 * v35];
              v43 = v41[1];
              v42 = v41 + 1;
              *v42 = *(a2 - 3);
              *(a2 - 3) = v43;
              v44 = *v36;
              v45 = v8[2];
              if (v44 < v45)
              {
                v8[2] = v44;
                *v36 = v45;
                v46 = v8[3];
                v8[3] = *v42;
                *v42 = v46;
              }
            }
          }
          else if (v39 >= v37)
          {
            v8[2] = v37;
            v48 = &v8[2 * v35];
            v50 = v48[1];
            v49 = v48 + 1;
            *v36 = v38;
            v51 = v8[3];
            v8[3] = v50;
            *v49 = v51;
            v52 = *(a2 - 4);
            if (v52 < v38)
            {
              *v36 = v52;
              *(a2 - 4) = v38;
              *v49 = *(a2 - 3);
              *(a2 - 3) = v51;
            }
          }
          else
          {
            v8[2] = v39;
            *(a2 - 4) = v38;
            v40 = v8[3];
            v8[3] = *(a2 - 3);
            *(a2 - 3) = v40;
          }
          v53 = v11 + 1;
          v54 = &v8[2 * v11 + 2];
          v55 = *v54;
          v56 = v8[4];
          v57 = *(a2 - 6);
          if (v55 >= v56)
          {
            if (v57 < v55)
            {
              *v54 = v57;
              *(a2 - 6) = v55;
              v59 = &v8[2 * v53];
              v61 = v59[1];
              v60 = v59 + 1;
              *v60 = *(a2 - 5);
              *(a2 - 5) = v61;
              v62 = *v54;
              v63 = v8[4];
              if (v62 < v63)
              {
                v8[4] = v62;
                *v54 = v63;
                v64 = v8[5];
                v8[5] = *v60;
                *v60 = v64;
              }
            }
          }
          else if (v57 >= v55)
          {
            v8[4] = v55;
            v65 = &v8[2 * v53];
            v67 = v65[1];
            v66 = v65 + 1;
            *v54 = v56;
            v68 = v8[5];
            v8[5] = v67;
            *v66 = v68;
            v69 = *(a2 - 6);
            if (v69 < v56)
            {
              *v54 = v69;
              *(a2 - 6) = v56;
              *v66 = *(a2 - 5);
              *(a2 - 5) = v68;
            }
          }
          else
          {
            v8[4] = v57;
            *(a2 - 6) = v56;
            v58 = v8[5];
            v8[5] = *(a2 - 5);
            *(a2 - 5) = v58;
          }
          v70 = *v12;
          v71 = *v36;
          v72 = *v54;
          if (v70 >= v71)
          {
            if (v72 >= v70)
              goto LABEL_49;
            *v12 = v72;
            v76 = &v8[2 * v11];
            v78 = v76[1];
            v77 = v76 + 1;
            result = (unsigned __int16 *)v78;
            *v54 = v70;
            v79 = &v8[2 * v53];
            v80 = v79[1];
            *v77 = v80;
            v79[1] = v78;
            if (v72 < v71)
            {
              *v36 = v72;
              *v12 = v71;
              v81 = &v8[2 * v35];
              v82 = v81[1];
              v81[1] = v80;
              *v77 = v82;
              goto LABEL_53;
            }
            goto LABEL_52;
          }
          v73 = &v8[2 * v35 + 1];
          if (v72 < v70)
          {
            *v36 = v72;
            *v54 = v71;
            v74 = &v8[2 * v53];
            v75 = *v73;
            *v73 = v74[1];
            v74[1] = v75;
LABEL_49:
            LOWORD(v71) = v70;
            goto LABEL_53;
          }
          *v36 = v70;
          *v12 = v71;
          v83 = &v8[2 * v11];
          v85 = v83[1];
          v84 = v83 + 1;
          v86 = *v73;
          *v73 = v85;
          *v84 = v86;
          if (v72 < v71)
          {
            *v12 = v72;
            *v54 = v71;
            v87 = &v8[2 * v53];
            *v84 = v87[1];
            v87[1] = v86;
LABEL_52:
            LOWORD(v71) = v72;
          }
LABEL_53:
          v88 = *v8;
          *v8 = v71;
          *v12 = v88;
          v89 = &v8[2 * v11];
          v90 = v8[1];
          v8[1] = v89[1];
          v89[1] = v90;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (*(v8 - 2) >= *v8)
          {
            v92 = *(_DWORD *)v8;
            LODWORD(v93) = (unsigned __int16)*(_DWORD *)v8;
            if (*(a2 - 2) <= v93)
            {
              v110 = v8 + 2;
              do
              {
                v8 = v110;
                if (v110 >= a2)
                  break;
                v110 += 2;
              }
              while (*v8 <= v93);
            }
            else
            {
              v108 = v8 + 2;
              do
              {
                if (v108 == a2)
                  goto LABEL_193;
                v109 = *v108;
                v108 += 2;
              }
              while (v109 <= v93);
              v8 = v108 - 2;
            }
            v111 = a2;
            if (v8 < a2)
            {
              v111 = a2;
              while (v111 != v7)
              {
                v112 = *(v111 - 2);
                v111 -= 2;
                if (v112 <= v93)
                  goto LABEL_94;
              }
              goto LABEL_193;
            }
LABEL_94:
            if (v8 < v111)
            {
              v113 = *v8;
              v114 = *v111;
              do
              {
                *v8 = v114;
                *v111 = v113;
                v115 = v8[1];
                v8[1] = v111[1];
                v111[1] = v115;
                v116 = v8 + 2;
                do
                {
                  if (v116 == a2)
                    goto LABEL_193;
                  v117 = *v116;
                  v116 += 2;
                  v113 = v117;
                }
                while (v117 <= v93);
                v8 = v116 - 2;
                do
                {
                  if (v111 == v7)
                    goto LABEL_193;
                  v118 = *(v111 - 2);
                  v111 -= 2;
                  v114 = v118;
                }
                while (v118 > v93);
              }
              while (v8 < v111);
            }
            if (v8 - 2 != v7)
              *(_DWORD *)v7 = *((_DWORD *)v8 - 1);
            a4 = 0;
            *(v8 - 2) = (unsigned __int16)v93;
            *(v8 - 1) = HIWORD(v92);
            continue;
          }
LABEL_55:
          v91 = 0;
          v92 = *(_DWORD *)v8;
          LODWORD(v93) = (unsigned __int16)*(_DWORD *)v8;
          do
          {
            v94 = &v8[v91 + 2];
            if (v94 == a2)
              goto LABEL_193;
            v95 = *v94;
            v91 += 2;
          }
          while (v95 < v93);
          v96 = &v8[v91];
          v97 = a2;
          if (v91 != 2)
          {
            while (v97 != v8)
            {
              v98 = *(v97 - 2);
              v97 -= 2;
              if (v98 < v93)
                goto LABEL_65;
            }
LABEL_193:
            __break(1u);
LABEL_194:
            *v7 = (unsigned __int16)v93;
            v7[2] = v92;
            v190 = v7[1];
            v7[1] = v7[3];
            v7[3] = v190;
            v191 = *(a2 - 2);
            if (v191 < v92)
            {
              v7[2] = v191;
              *(a2 - 2) = v92;
              v7[3] = *(a2 - 1);
              *(a2 - 1) = v190;
            }
            return result;
          }
          v97 = a2;
          do
          {
            if (v96 >= v97)
              break;
            v99 = *(v97 - 2);
            v97 -= 2;
          }
          while (v99 >= v93);
LABEL_65:
          if (v96 >= v97)
          {
            v8 = (unsigned __int16 *)((char *)v8 + v91 * 2);
            v106 = v96 - 2;
            if (v96 - 2 != v7)
              goto LABEL_75;
          }
          else
          {
            v100 = *v97;
            v8 = (unsigned __int16 *)((char *)v8 + v91 * 2);
            v101 = v97;
            do
            {
              *v8 = v100;
              *v101 = v95;
              v102 = v8[1];
              v8[1] = v101[1];
              v101[1] = v102;
              v103 = v8 + 2;
              do
              {
                if (v103 == a2)
                  goto LABEL_193;
                v104 = *v103;
                v103 += 2;
                LOWORD(v95) = v104;
              }
              while (v104 < v93);
              v8 = v103 - 2;
              do
              {
                if (v101 == v7)
                  goto LABEL_193;
                v105 = *(v101 - 2);
                v101 -= 2;
                v100 = v105;
              }
              while (v105 >= v93);
            }
            while (v8 < v101);
            v106 = v8 - 2;
            if (v8 - 2 != v7)
LABEL_75:
              *(_DWORD *)v7 = *((_DWORD *)v8 - 1);
          }
          *(v8 - 2) = (unsigned __int16)v93;
          *(v8 - 1) = HIWORD(v92);
          if (v96 < v97)
            goto LABEL_79;
          v107 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(v7, v106);
          result = (unsigned __int16 *)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(v8, a2);
          if (!(_DWORD)result)
          {
            if (v107)
              continue;
LABEL_79:
            result = (unsigned __int16 *)std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *,false>(v7, v106, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v106;
          if (v107)
            return result;
          goto LABEL_2;
        }
        if (v8 == a2)
          return result;
        v146 = (unint64_t)(v10 - 2) >> 1;
        v147 = v146;
        while (2)
        {
          if (v146 >= v147)
          {
            v149 = (2 * v147) | 1;
            v150 = &v8[2 * v149];
            if (2 * v147 + 2 >= v10)
            {
              v151 = *v150;
              v154 = &v8[2 * v147];
              if (v151 >= *v154)
              {
LABEL_151:
                v155 = *(_DWORD *)v154;
                while (1)
                {
                  v158 = v154;
                  v154 = v150;
                  *v158 = v151;
                  v158[1] = v150[1];
                  if (v146 < v149)
                    break;
                  v159 = (2 * v149) | 1;
                  v150 = &v8[2 * v159];
                  v149 = 2 * v149 + 2;
                  if (v149 < v10)
                  {
                    v151 = *v150;
                    result = v150 + 2;
                    v156 = v150[2];
                    v157 = v151 >= v156;
                    if (v151 <= v156)
                      v151 = v150[2];
                    if (v157)
                      v149 = v159;
                    else
                      v150 += 2;
                    if (v151 < (unsigned __int16)v155)
                      break;
                  }
                  else
                  {
                    v151 = *v150;
                    v149 = v159;
                    if (v151 < (unsigned __int16)v155)
                      break;
                  }
                }
                *(_DWORD *)v154 = v155;
              }
            }
            else
            {
              v151 = *v150;
              v152 = v150[2];
              v153 = v151 >= v152;
              if (v151 <= v152)
                v151 = v150[2];
              if (!v153)
              {
                v150 += 2;
                v149 = 2 * v147 + 2;
              }
              v154 = &v8[2 * v147];
              if (v151 >= *v154)
                goto LABEL_151;
            }
          }
          v148 = v147-- <= 0;
          if (!v148)
            continue;
          break;
        }
        v160 = (unint64_t)v9 >> 2;
        do
        {
          v161 = 0;
          v162 = *(_DWORD *)v8;
          v163 = (unint64_t)(v160 - 2) >> 1;
          v164 = v8;
          do
          {
            while (1)
            {
              v168 = &v164[2 * v161 + 2];
              v169 = (2 * v161) | 1;
              v161 = 2 * v161 + 2;
              if (v161 < v160)
                break;
              v161 = v169;
              *v164 = *v168;
              v164[1] = v168[1];
              v164 = v168;
              if (v169 > v163)
                goto LABEL_174;
            }
            v165 = *v168;
            v166 = v168[2];
            v167 = v165 >= v166;
            if (v165 <= v166)
              LOWORD(v165) = v168[2];
            if (v167)
              v161 = v169;
            else
              v168 += 2;
            *v164 = v165;
            v164[1] = v168[1];
            v164 = v168;
          }
          while (v161 <= v163);
LABEL_174:
          if (v168 == a2 - 2)
          {
            *(_DWORD *)v168 = v162;
          }
          else
          {
            *(_DWORD *)v168 = *((_DWORD *)a2 - 1);
            *((_DWORD *)a2 - 1) = v162;
            v170 = (char *)v168 - (char *)v8 + 4;
            if (v170 >= 5)
            {
              v171 = (((unint64_t)v170 >> 2) - 2) >> 1;
              v172 = &v8[2 * v171];
              v173 = *v172;
              if (v173 < *v168)
              {
                v174 = *(_DWORD *)v168;
                v175 = (unsigned __int16)*(_DWORD *)v168;
                do
                {
                  v176 = v168;
                  v168 = v172;
                  *v176 = v173;
                  v176[1] = v172[1];
                  if (!v171)
                    break;
                  v171 = (v171 - 1) >> 1;
                  v172 = &v8[2 * v171];
                  v173 = *v172;
                }
                while (v173 < v175);
                *v168 = v175;
                v168[1] = HIWORD(v174);
              }
            }
          }
          a2 -= 2;
          v148 = v160-- <= 2;
        }
        while (!v148);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int16 v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  unsigned int v24;
  unsigned __int16 v25;
  unsigned int v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  unsigned int v36;
  unsigned __int16 v37;
  unsigned __int16 *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int16 *v45;

  v4 = ((char *)a2 - (char *)a1) >> 2;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        goto LABEL_8;
      }
      return result;
    case 3:
      v8 = a1[2];
      v9 = *a1;
      v10 = *(a2 - 2);
      if (v8 >= v9)
      {
        if (v10 < v8)
        {
          a1[2] = v10;
          *(a2 - 2) = v8;
          v28 = a1[3];
          a1[3] = *(a2 - 1);
          *(a2 - 1) = v28;
          v29 = a1[2];
          v30 = *a1;
          if (v29 < v30)
          {
            *a1 = v29;
            a1[2] = v30;
            v31 = a1[1];
            a1[1] = a1[3];
            a1[3] = v31;
          }
        }
      }
      else if (v10 >= v8)
      {
        *a1 = v8;
        a1[2] = v9;
        v35 = a1[1];
        a1[1] = a1[3];
        a1[3] = v35;
        v36 = *(a2 - 2);
        if (v36 < v9)
        {
          a1[2] = v36;
          *(a2 - 2) = v9;
          a1[3] = *(a2 - 1);
          *(a2 - 1) = v35;
        }
      }
      else
      {
        *a1 = v10;
        *(a2 - 2) = v9;
LABEL_8:
        v11 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      v17 = *(a2 - 2);
      v18 = a1[6];
      if (v17 >= v18)
        return 1;
      a1[6] = v17;
      *(a2 - 2) = v18;
      v19 = a1[7];
      a1[7] = *(a2 - 1);
      *(a2 - 1) = v19;
      v20 = a1[6];
      v21 = a1[4];
      if (v20 >= v21)
        return 1;
      a1[4] = v20;
      a1[6] = v21;
      v22 = a1[5];
      v23 = a1[7];
      a1[5] = v23;
      a1[7] = v22;
      v24 = a1[2];
      if (v20 >= v24)
        return 1;
      a1[2] = v20;
      a1[4] = v24;
      v25 = a1[3];
      a1[3] = v23;
      a1[5] = v25;
      v26 = *a1;
      if (v20 >= v26)
        return 1;
      *a1 = v20;
      a1[2] = v26;
      v27 = a1[1];
      a1[1] = v23;
      a1[3] = v27;
      return 1;
    default:
      v12 = a1 + 4;
      v13 = a1[4];
      v14 = a1[2];
      v15 = *a1;
      if (v14 >= v15)
      {
        if (v13 < v14)
        {
          a1[2] = v13;
          a1[4] = v14;
          v32 = a1[3];
          v33 = a1[5];
          a1[3] = v33;
          a1[5] = v32;
          if (v13 < v15)
          {
            *a1 = v13;
            a1[2] = v15;
            v34 = a1[1];
            a1[1] = v33;
            a1[3] = v34;
          }
        }
      }
      else if (v13 >= v14)
      {
        *a1 = v14;
        a1[2] = v15;
        v37 = a1[1];
        a1[1] = a1[3];
        a1[3] = v37;
        if (v13 < v15)
        {
          a1[2] = v13;
          a1[4] = v15;
          a1[3] = a1[5];
          a1[5] = v37;
        }
      }
      else
      {
        *a1 = v13;
        a1[4] = v15;
        v16 = a1[1];
        a1[1] = a1[5];
        a1[5] = v16;
      }
      v38 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      break;
  }
  while (1)
  {
    v41 = *v12;
    if (*v38 < v41)
      break;
LABEL_38:
    v12 = v38;
    v39 += 4;
    v38 += 2;
    if (v38 == a2)
      return 1;
  }
  v42 = *(_DWORD *)v38;
  v43 = (unsigned __int16)*(_DWORD *)v38;
  v44 = v39;
  do
  {
    v45 = (unsigned __int16 *)((char *)a1 + v44);
    v45[6] = v41;
    v45[7] = *(unsigned __int16 *)((char *)a1 + v44 + 10);
    if (v44 == -8)
    {
      *a1 = v43;
      a1[1] = HIWORD(v42);
      if (++v40 != 8)
        goto LABEL_38;
      return v38 + 2 == a2;
    }
    v41 = v45[2];
    v44 -= 4;
  }
  while (v41 > v43);
  *(unsigned __int16 *)((char *)a1 + v44 + 12) = v43;
  *(unsigned __int16 *)((char *)a1 + v44 + 14) = HIWORD(v42);
  if (++v40 != 8)
    goto LABEL_38;
  return v38 + 2 == a2;
}

unsigned __int16 *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int16 v11;
  unsigned int v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int16 v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 v20;

  v4 = *a2;
  v5 = *result;
  v6 = *a3;
  if (v4 < v5)
  {
    if (v6 >= v4)
    {
      *result = v4;
      *a2 = v5;
      v13 = result[1];
      result[1] = a2[1];
      a2[1] = v13;
      v4 = *a3;
      if (v4 >= v5)
        goto LABEL_11;
      *a2 = v4;
      *a3 = v5;
      a2[1] = a3[1];
      a3[1] = v13;
    }
    else
    {
      *result = v6;
      *a3 = v5;
      v7 = result[1];
      result[1] = a3[1];
      a3[1] = v7;
    }
    v4 = v5;
LABEL_11:
    v12 = *a4;
    if (v12 >= v4)
      return result;
    goto LABEL_14;
  }
  if (v6 >= v4)
  {
    LOWORD(v4) = *a3;
    v12 = *a4;
    if (v12 >= v6)
      return result;
    goto LABEL_14;
  }
  *a2 = v6;
  *a3 = v4;
  v8 = a2[1];
  a2[1] = a3[1];
  a3[1] = v8;
  v9 = *a2;
  v10 = *result;
  if (v9 >= v10)
    goto LABEL_11;
  *result = v9;
  *a2 = v10;
  v11 = result[1];
  result[1] = a2[1];
  a2[1] = v11;
  v4 = *a3;
  v12 = *a4;
  if (v12 >= v4)
    return result;
LABEL_14:
  *a3 = v12;
  *a4 = v4;
  v14 = a3[1];
  a3[1] = a4[1];
  a4[1] = v14;
  v15 = *a3;
  v16 = *a2;
  if (v15 < v16)
  {
    *a2 = v15;
    *a3 = v16;
    v17 = a2[1];
    a2[1] = a3[1];
    a3[1] = v17;
    v18 = *a2;
    v19 = *result;
    if (v18 < v19)
    {
      *result = v18;
      *a2 = v19;
      v20 = result[1];
      result[1] = a2[1];
      a2[1] = v20;
    }
  }
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::big5EncodeIndex(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t i;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _WORD *v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  char **v27;
  char *v28;

  v0 = operator new();
  for (i = 0; i != 117488; i += 16)
  {
    v2 = v0 + i;
    *(_DWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    *(_WORD *)(v2 + 4) = 0;
    *(_WORD *)(v2 + 12) = 0;
  }
  qword_1ECE7EB08 = v0;
  v3 = atomic_load(&PAL::big5(void)::flag);
  if (v3 != -1)
  {
    v28 = &v26;
    v27 = &v28;
    std::__call_once(&PAL::big5(void)::flag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::big5(void)::$_0 &&>>);
  }
  v4 = qword_1ECE7EB08;
  v5 = (_DWORD *)(PAL::big5(void)::array + 31236);
  v6 = (_WORD *)(qword_1ECE7EB08 + 4);
  v7 = 14686;
  do
  {
    v8 = *((_WORD *)v5 - 2);
    v9 = *v5;
    v5 += 2;
    *((_DWORD *)v6 - 1) = v9;
    *v6 = v8;
    v6 += 4;
    --v7;
  }
  while (v7);
  v10 = (char *)operator new(0x1CAF0uLL, MEMORY[0x1E0DE4E10]);
  if (v10)
  {
    v11 = v10;
    v12 = 14686;
LABEL_35:
    std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>(v4, (char *)(v4 + 117488), 0x395EuLL, v11, v12);
    operator delete(v11);
    return;
  }
  v13 = (char *)operator new(0xE578uLL, MEMORY[0x1E0DE4E10]);
  if (v13)
  {
    v11 = v13;
    v12 = 7343;
    goto LABEL_35;
  }
  v14 = (char *)operator new(0x72B8uLL, MEMORY[0x1E0DE4E10]);
  if (v14)
  {
    v11 = v14;
    v12 = 3671;
    goto LABEL_35;
  }
  v15 = (char *)operator new(0x3958uLL, MEMORY[0x1E0DE4E10]);
  if (v15)
  {
    v11 = v15;
    v12 = 1835;
    goto LABEL_35;
  }
  v16 = (char *)operator new(0x1CA8uLL, MEMORY[0x1E0DE4E10]);
  if (v16)
  {
    v11 = v16;
    v12 = 917;
    goto LABEL_35;
  }
  v17 = (char *)operator new(0xE50uLL, MEMORY[0x1E0DE4E10]);
  if (v17)
  {
    v11 = v17;
    v12 = 458;
    goto LABEL_35;
  }
  v18 = (char *)operator new(0x728uLL, MEMORY[0x1E0DE4E10]);
  if (v18)
  {
    v11 = v18;
    v12 = 229;
    goto LABEL_35;
  }
  v19 = (char *)operator new(0x390uLL, MEMORY[0x1E0DE4E10]);
  if (v19)
  {
    v11 = v19;
    v12 = 114;
    goto LABEL_35;
  }
  v20 = (char *)operator new(0x1C8uLL, MEMORY[0x1E0DE4E10]);
  if (v20)
  {
    v11 = v20;
    v12 = 57;
    goto LABEL_35;
  }
  v21 = (char *)operator new(0xE0uLL, MEMORY[0x1E0DE4E10]);
  if (v21)
  {
    v11 = v21;
    v12 = 28;
    goto LABEL_35;
  }
  v22 = (char *)operator new(0x70uLL, MEMORY[0x1E0DE4E10]);
  if (v22)
  {
    v11 = v22;
    v12 = 14;
    goto LABEL_35;
  }
  v23 = (char *)operator new(0x38uLL, MEMORY[0x1E0DE4E10]);
  if (v23)
  {
    v11 = v23;
    v12 = 7;
    goto LABEL_35;
  }
  v24 = (char *)operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
  if (v24)
  {
    v11 = v24;
    v12 = 3;
    goto LABEL_35;
  }
  v25 = (char *)operator new(8uLL, MEMORY[0x1E0DE4E10]);
  if (v25)
  {
    v11 = v25;
    v12 = 1;
    goto LABEL_35;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>(v4, (char *)(v4 + 117488), 0x395EuLL, 0, 0);
}

void std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>(uint64_t a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  __int16 v9;
  char *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  __int16 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;

  if (a3 >= 2)
  {
    v6 = a1;
    if (a3 == 2)
    {
      v7 = *((_DWORD *)a2 - 2);
      v8 = *(_DWORD *)a1;
      if (v7 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v7;
        *((_DWORD *)a2 - 2) = v8;
        v9 = *(_WORD *)(a1 + 4);
        *(_WORD *)(a1 + 4) = *((_WORD *)a2 - 2);
        *((_WORD *)a2 - 2) = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((char *)a1 != a2)
      {
        v16 = (_QWORD *)(a1 + 8);
        if ((char *)(a1 + 8) != a2)
        {
          v17 = 0;
          v18 = (_DWORD *)a1;
          do
          {
            v20 = v18[2];
            v21 = *v18;
            v18 = v16;
            if (v20 < v21)
            {
              v22 = *v16;
              v23 = v17;
              do
              {
                v24 = a1 + v23;
                *(_DWORD *)(v24 + 8) = v21;
                *(_WORD *)(v24 + 12) = *(_WORD *)(a1 + v23 + 4);
                if (!v23)
                {
                  v19 = a1;
                  goto LABEL_13;
                }
                v21 = *(_DWORD *)(v24 - 8);
                v23 -= 8;
              }
              while (v21 > v22);
              v19 = a1 + v23 + 8;
LABEL_13:
              *(_DWORD *)v19 = v22;
              *(_WORD *)(v19 + 4) = WORD2(v22);
            }
            v16 = v18 + 2;
            v17 += 8;
          }
          while (v18 + 2 != (_DWORD *)a2);
        }
      }
    }
    else
    {
      v12 = a4;
      v13 = a3 >> 1;
      v14 = (char *)(a1 + 8 * (a3 >> 1));
      v15 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>((char *)a1, v14, v15, a4);
        v25 = &v12[8 * v13];
        std::__stable_sort_move<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>((char *)(v6 + 8 * (a3 >> 1)), a2, a3 - (a3 >> 1), v25);
        v26 = &v12[8 * a3];
        v27 = v25;
        while (v27 != v26)
        {
          v28 = *(_DWORD *)v27;
          if (*(_DWORD *)v27 < *(_DWORD *)v12)
          {
            v29 = v27;
          }
          else
          {
            v28 = *(_DWORD *)v12;
            v29 = v12;
          }
          v30 = *((_WORD *)v29 + 2);
          if (*(_DWORD *)v27 < *(_DWORD *)v12)
            v27 += 8;
          else
            v12 += 8;
          *(_DWORD *)v6 = v28;
          *(_WORD *)(v6 + 4) = v30;
          v6 += 8;
          if (v12 == v25)
          {
            if (v27 != v26)
            {
              v31 = 0;
              do
              {
                v32 = &v27[v31];
                v33 = v6 + v31;
                *(_DWORD *)v33 = *(_DWORD *)&v27[v31];
                *(_WORD *)(v33 + 4) = *(_WORD *)&v27[v31 + 4];
                v31 += 8;
              }
              while (v32 + 8 != v26);
            }
            return;
          }
        }
        if (v12 != v25)
        {
          v34 = 0;
          do
          {
            v35 = v6 + v34;
            v36 = &v12[v34];
            *(_DWORD *)v35 = *(_DWORD *)&v12[v34];
            *(_WORD *)(v35 + 4) = *(_WORD *)&v12[v34 + 4];
            v34 += 8;
          }
          while (v36 + 8 != v25);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>(a1, v14, v15, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), v12, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>((char *)v6, (char *)(v6 + 8 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v12, a5);
      }
    }
  }
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  unsigned int v8;
  BOOL v9;
  char *v10;
  unsigned int *v11;
  uint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  __n128 result;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54;

  if (a3)
  {
    v4 = a4;
    v6 = a1;
    if (a3 == 1)
    {
LABEL_10:
      *(_QWORD *)v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *((_DWORD *)a2 - 2);
      v9 = v8 >= *(_DWORD *)a1;
      if (v8 >= *(_DWORD *)a1)
        v10 = a1;
      else
        v10 = a2 - 8;
      *(_QWORD *)a4 = *(_QWORD *)v10;
      v4 = a4 + 8;
      if (v9)
        v6 = a2 - 8;
      goto LABEL_10;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = a3 >> 1;
      v21 = 8 * (a3 >> 1);
      v22 = &a1[v21];
      std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>(a1, &a1[v21], a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>(&v6[v21], a2, a3 - v20, &v4[v21], a3 - v20);
      v24 = v4;
      v25 = v6;
      v26 = &v6[v21];
      do
      {
        if (v26 == a2)
        {
          if (v25 == v22)
            return result;
          v45 = &v6[8 * v20] - v25 - 8;
          if (v45 >= 0x38 && (unint64_t)(v24 - v25) >= 0x20)
          {
            v49 = 0;
            v50 = (v45 >> 3) + 1;
            v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
            v46 = &v4[v51];
            v47 = &v25[v51];
            v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v53 = &v4[v49];
              result = *(__n128 *)&v25[v49];
              v54 = *(_OWORD *)&v25[v49 + 16];
              *(__n128 *)v53 = result;
              *((_OWORD *)v53 + 1) = v54;
              v49 += 32;
              v52 -= 4;
            }
            while (v52);
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v46 = v4;
            v47 = v25;
          }
          do
          {
            v48 = *(_QWORD *)v47;
            v47 += 8;
            *(_QWORD *)v46 = v48;
            v46 += 8;
          }
          while (v47 != v22);
          return result;
        }
        v27 = v26;
        v28 = *(_DWORD *)v26;
        v29 = *(_DWORD *)v25;
        v30 = *(_DWORD *)v26 >= *(_DWORD *)v25;
        v31 = *(_DWORD *)v26 < *(_DWORD *)v25;
        if (v28 >= *(_DWORD *)v25)
          v32 = v25;
        else
          v32 = v27;
        v26 = &v27[8 * v31];
        v25 += 8 * v30;
        *(_QWORD *)v4 = *(_QWORD *)v32;
        v4 += 8;
        v24 += 8;
      }
      while (v25 != v22);
      if (v26 != a2)
      {
        v33 = -8;
        if (v28 >= v29)
          v33 = 0;
        v34 = a2 - v27 + v33 - 8;
        if (v34 < 0x68)
          goto LABEL_52;
        if ((unint64_t)(v24 - &v27[8 * (v28 < v29)]) < 0x20)
          goto LABEL_52;
        v35 = 0;
        v36 = (v34 >> 3) + 1;
        v37 = v28 < v29;
        v38 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = &v4[v38];
        v26 += v38;
        v40 = &v27[8 * v37];
        v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = &v4[v35];
          result = *(__n128 *)&v40[v35];
          v43 = *(_OWORD *)&v40[v35 + 16];
          *(__n128 *)v42 = result;
          *((_OWORD *)v42 + 1) = v43;
          v35 += 32;
          v41 -= 4;
        }
        while (v41);
        v4 = v39;
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_52:
          do
          {
            v44 = *(_QWORD *)v26;
            v26 += 8;
            *(_QWORD *)v4 = v44;
            v4 += 8;
          }
          while (v26 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v11 = (unsigned int *)(a1 + 8);
      *(_QWORD *)a4 = *(_QWORD *)a1;
      if (a1 + 8 != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = (unsigned int *)a4;
        do
        {
          v15 = v11;
          v16 = *v14;
          v14 += 2;
          if (*((_DWORD *)v6 + 2) >= v16)
          {
            *(_QWORD *)v14 = *(_QWORD *)v11;
          }
          else
          {
            *((_QWORD *)v13 + 1) = *(_QWORD *)v13;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = &a4[v18];
                v19 = *(_DWORD *)&a4[v18 - 8];
                if (*v15 >= v19)
                  break;
                *(_DWORD *)v17 = v19;
                *((_WORD *)v17 + 2) = *((_WORD *)v17 - 2);
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *(_DWORD *)v17 = *v15;
            *((_WORD *)v17 + 2) = *((_WORD *)v6 + 6);
          }
          v11 = v15 + 2;
          v12 += 8;
          v13 = (char *)v14;
          v6 = (char *)v15;
        }
        while (v15 + 2 != (unsigned int *)a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unsigned int v31;
  int v32;
  __int16 v33;
  char *i;
  int v35;
  char *v36;
  char *v37;
  int v38;
  _BOOL4 v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  char *v58;
  __int16 v59;
  unint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  _OWORD *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  char *v73;
  __int16 v74;
  unsigned int *v75;
  __int16 v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  _DWORD *v81;

  if (!a5)
    return result;
  while (a4 > a7 && a5 > a7)
  {
    if (!a4)
      return result;
    v10 = 0;
    v11 = *(_DWORD *)a2;
    v12 = -a4;
    while (1)
    {
      v13 = *(_DWORD *)&result[v10];
      if (v11 < v13)
        break;
      v10 += 8;
      v57 = __CFADD__(v12++, 1);
      if (v57)
        return result;
    }
    v14 = &result[v10];
    if (-v12 >= a5)
    {
      if (v12 == -1)
      {
        v75 = (unsigned int *)&result[v10];
        *v75 = v11;
        *(_DWORD *)a2 = v13;
        v76 = *(_WORD *)&result[v10 + 4];
        *((_WORD *)v75 + 2) = *((_WORD *)a2 + 2);
        *((_WORD *)a2 + 2) = v76;
        return result;
      }
      if (v12 <= 0)
        v26 = -v12;
      else
        v26 = 1 - v12;
      v24 = v26 >> 1;
      v18 = &result[8 * (v26 >> 1) + v10];
      v17 = a3;
      if (a3 != a2)
      {
        v27 = (a3 - a2) >> 3;
        v17 = a2;
        do
        {
          v28 = v27 >> 1;
          v29 = &v17[8 * (v27 >> 1)];
          v31 = *(_DWORD *)v29;
          v30 = v29 + 8;
          v27 += ~(v27 >> 1);
          if (v31 < *(_DWORD *)v18)
            v17 = v30;
          else
            v27 = v28;
        }
        while (v27);
      }
      v16 = (v17 - a2) >> 3;
      v25 = v17;
      if (v18 != a2)
      {
LABEL_33:
        v25 = v18;
        if (a2 != v17)
        {
          v32 = *(_DWORD *)v18;
          *(_DWORD *)v18 = v11;
          *(_DWORD *)a2 = v32;
          v33 = *((_WORD *)v18 + 2);
          *((_WORD *)v18 + 2) = *((_WORD *)a2 + 2);
          *((_WORD *)a2 + 2) = v33;
          v25 = v18 + 8;
          for (i = a2 + 8; i != v17; i += 8)
          {
            if (v25 == a2)
              a2 = i;
            v35 = *(_DWORD *)v25;
            *(_DWORD *)v25 = *(_DWORD *)i;
            *(_DWORD *)i = v35;
            LOWORD(v35) = *((_WORD *)v25 + 2);
            *((_WORD *)v25 + 2) = *((_WORD *)i + 2);
            *((_WORD *)i + 2) = v35;
            v25 += 8;
          }
          if (v25 != a2)
          {
            v36 = v25;
            v37 = a2;
            while (1)
            {
              v38 = *(_DWORD *)v36;
              *(_DWORD *)v36 = *(_DWORD *)a2;
              *(_DWORD *)a2 = v38;
              LOWORD(v38) = *((_WORD *)v36 + 2);
              *((_WORD *)v36 + 2) = *((_WORD *)a2 + 2);
              *((_WORD *)a2 + 2) = v38;
              v36 += 8;
              a2 += 8;
              v39 = v36 == v37;
              if (a2 == v17)
              {
                if (v36 == v37)
                  goto LABEL_49;
                a2 = v37 + 8;
                while (1)
                {
                  v40 = *(_DWORD *)v36;
                  *(_DWORD *)v36 = *(_DWORD *)v37;
                  *(_DWORD *)v37 = v40;
                  LOWORD(v40) = *((_WORD *)v36 + 2);
                  *((_WORD *)v36 + 2) = *((_WORD *)v37 + 2);
                  *((_WORD *)v37 + 2) = v40;
                  v36 += 8;
                  v39 = v36 == v37;
                  if (a2 != v17)
                    break;
                  if (v36 == v37)
                    goto LABEL_49;
                }
              }
              if (v39)
                v37 = a2;
            }
          }
          v25 = a2;
        }
      }
    }
    else
    {
      if (a5 >= 0)
        v15 = a5;
      else
        v15 = a5 + 1;
      v16 = v15 >> 1;
      v17 = &a2[8 * (v15 >> 1)];
      v18 = a2;
      if (v14 != a2)
      {
        v19 = (a2 - result - v10) >> 3;
        v18 = &result[v10];
        do
        {
          v20 = v19 >> 1;
          v21 = (unsigned int *)&v18[8 * (v19 >> 1)];
          v23 = *v21;
          v22 = (char *)(v21 + 2);
          v19 += ~(v19 >> 1);
          if (*(_DWORD *)v17 < v23)
            v19 = v20;
          else
            v18 = v22;
        }
        while (v19);
      }
      v24 = (v18 - result - v10) >> 3;
      v25 = &a2[8 * (v15 >> 1)];
      if (v18 != a2)
        goto LABEL_33;
    }
LABEL_49:
    a4 = -(v24 + v12);
    v41 = a5 - v16;
    if (v24 + v16 >= a5 - (v24 + v16) - v12)
    {
      std::__inplace_merge<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>(v25, v17, a3, a4, a5 - v16, a6, a7);
      a4 = v24;
      a3 = v25;
      a5 = v16;
      result = v14;
      a2 = v18;
      if (!v16)
        return result;
    }
    else
    {
      v42 = v14;
      v43 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char32_t,unsigned short> *>(v42, v18, v25, v24, v16, a6, a7);
      a3 = v43;
      a5 = v41;
      result = v25;
      a2 = v17;
      if (!v41)
        return result;
    }
  }
  if (a4 <= a5)
  {
    if (result != a2)
    {
      v60 = a2 - result - 8;
      v61 = a6;
      v62 = result;
      if (v60 < 0x18)
        goto LABEL_102;
      v61 = a6;
      v62 = result;
      if ((unint64_t)((char *)a6 - result) < 0x20)
        goto LABEL_102;
      v63 = (v60 >> 3) + 1;
      v64 = v63 & 0x3FFFFFFFFFFFFFFCLL;
      v65 = 2 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
      v61 = &a6[v65];
      v62 = &result[v65 * 4];
      v66 = (__int128 *)(result + 16);
      v67 = a6 + 4;
      v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v69 = *v66;
        *(v67 - 1) = *(v66 - 1);
        *v67 = v69;
        v66 += 2;
        v67 += 2;
        v68 -= 4;
      }
      while (v68);
      if (v63 == v64)
      {
        v70 = (uint64_t)&a6[2 * v64 - 2];
      }
      else
      {
LABEL_102:
        do
        {
          v71 = *(_QWORD *)v62;
          v62 += 8;
          *v61++ = v71;
        }
        while (v62 != a2);
        v70 = (uint64_t)(v61 - 1);
      }
      if (v61 != (_QWORD *)a6)
      {
        while (a2 != a3)
        {
          v72 = *(_DWORD *)a2;
          if (*(_DWORD *)a2 < *a6)
          {
            v73 = a2;
          }
          else
          {
            v72 = *a6;
            v73 = (char *)a6;
          }
          v74 = *((_WORD *)v73 + 2);
          if (*(_DWORD *)a2 < *a6)
            a2 += 8;
          else
            a6 += 2;
          *(_DWORD *)result = v72;
          *((_WORD *)result + 2) = v74;
          result += 8;
          if (a6 == (_DWORD *)v61)
            return result;
        }
        v79 = 0;
        do
        {
          v80 = &result[v79 * 4];
          v81 = &a6[v79];
          *(_DWORD *)v80 = a6[v79];
          *((_WORD *)v80 + 2) = a6[v79 + 1];
          v79 += 2;
        }
        while (v81 != (_DWORD *)v70);
      }
    }
  }
  else if (a2 != a3)
  {
    v44 = a3 - a2 - 8;
    v45 = a6;
    v46 = a2;
    if (v44 < 0x18)
      goto LABEL_103;
    v45 = a6;
    v46 = a2;
    if ((unint64_t)((char *)a6 - a2) < 0x20)
      goto LABEL_103;
    v47 = (v44 >> 3) + 1;
    v48 = 2 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v45 = &a6[v48];
    v46 = &a2[v48 * 4];
    v49 = (__int128 *)(a2 + 16);
    v50 = a6 + 4;
    v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 4;
    }
    while (v51);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_103:
      do
      {
        v53 = *(_QWORD *)v46;
        v46 += 8;
        *v45++ = v53;
      }
      while (v46 != a3);
    }
    if (v45 != (_QWORD *)a6)
    {
      v54 = a3 - 4;
      while (a2 != result)
      {
        v55 = *((_DWORD *)a2 - 2);
        v56 = *((_DWORD *)v45 - 2);
        v57 = v56 >= v55;
        if (v56 < v55)
        {
          v58 = a2;
        }
        else
        {
          v55 = *((_DWORD *)v45 - 2);
          v58 = (char *)v45;
        }
        if (!v57)
          a2 -= 8;
        v59 = *((_WORD *)v58 - 2);
        if (v57)
          --v45;
        *((_DWORD *)v54 - 1) = v55;
        *(_WORD *)v54 = v59;
        v54 -= 8;
        if (v45 == (_QWORD *)a6)
          return result;
      }
      v77 = 0;
      do
      {
        v78 = &v54[v77 * 8];
        *((_DWORD *)v78 - 1) = v45[v77 - 1];
        *(_WORD *)v78 = WORD2(v45[--v77]);
      }
      while (&v45[v77] != (_QWORD *)a6);
    }
  }
  return result;
}

WTF *PAL::gbEncodeShared(uint64_t a1, WTF *a2, uint64_t a3, uint64_t a4, int a5)
{
  WTF *v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  WTF *v11;
  uint16x8_t *v12;
  __int128 v13;
  char *v14;
  int8x16_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  WTF *result;
  WTF *v22;
  unint64_t v23;
  unint64_t v24;
  WTF *v25;
  WTF *v26;
  __int16 v27;
  unint64_t *v28;
  unsigned int v29;
  int v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  void *v36;
  void (*v37)(void);
  unint64_t *v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  void *v44;
  int v45;
  char v46;
  size_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int16 *v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  unsigned int v64;
  unsigned __int16 v65;
  uint64_t v66;
  unsigned int v67;
  size_t v68;
  _BYTE *v69;
  unint64_t v70;
  _DWORD *v71;
  unint64_t v72;
  char *v73;
  unsigned int v74;
  _DWORD *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  void *v80;
  int v81;
  size_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  void *v87;
  _BYTE *v88;
  unsigned __int16 v89;
  int v90;
  size_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  void *v96;
  _BYTE *v97;
  int v98;
  size_t v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  void *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  void *v109;
  void *v110;
  _BYTE *v111;
  int v112;
  size_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  void *v117;
  void *v118;
  _BYTE *v119;
  int v120;
  size_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  void *v126;
  _BYTE *v127;
  int v128;
  size_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  void *v133;
  void *v134;
  unint64_t v135;
  BOOL v136;
  unsigned __int16 v137;
  int v138;
  size_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  void *v145;
  _BYTE *v146;
  uint64_t v147;
  unint64_t v148;
  uint8x8_t *v149;
  uint16x8_t *v150;
  unint64_t v151;
  uint8x16_t v152;
  uint16x8_t v153;
  uint16x8_t v154;
  uint8x8_t *v155;
  uint16x8_t *v156;
  unint64_t v157;
  uint8x8_t v158;
  WTF *v161;
  unsigned int v162;
  _BYTE v163[64];
  WTF *v164;
  unint64_t v165;
  char v166;
  char **v167;
  char *v168;
  int8x16x2_t v169;
  int8x16x2_t v170;
  int8x16x2_t v171;

  v6 = a2;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = a3;
  if ((_DWORD)a3)
  {
    v9 = WTF::fastMalloc((WTF *)a3);
    *(_DWORD *)(a1 + 8) = a3;
    *(_QWORD *)a1 = v9;
  }
  v161 = (WTF *)v163;
  v164 = 0;
  v165 = 0;
  if ((a3 & 0xFF00000000) == 0)
  {
    result = (WTF *)v163;
    v164 = v6;
    v165 = v8;
    if (!v8)
      goto LABEL_274;
    goto LABEL_23;
  }
  if (v8 <= 0x20)
  {
    v162 = a3;
    v11 = (WTF *)v163;
    v12 = (uint16x8_t *)v163;
    goto LABEL_16;
  }
  if (v8 <= 0x29)
    v10 = 41;
  else
    v10 = v8;
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1945E4F20);
  }
  v11 = (WTF *)WTF::fastMalloc((WTF *)(2 * v10));
  v161 = v11;
  v162 = a3;
  if (v8 >= 0x40)
  {
    v12 = (uint16x8_t *)((char *)v11 + 2 * (a3 & 0xFFFFFFC0));
    v13 = 0uLL;
    v14 = (char *)v11;
    do
    {
      v169.val[0] = *(int8x16_t *)v6;
      v15 = *((int8x16_t *)v6 + 1);
      v170.val[0] = (int8x16_t)*((_OWORD *)v6 + 2);
      v16 = *((_OWORD *)v6 + 3);
      v6 = (WTF *)((char *)v6 + 64);
      v17 = v16;
      v170.val[1] = 0uLL;
      v171.val[0] = v15;
      v169.val[1] = 0uLL;
      v18 = v14;
      vst2q_s8(v18, v169);
      v18 += 32;
      v171.val[1] = 0uLL;
      vst2q_s8(v18, v171);
      v19 = v14 + 64;
      vst2q_s8(v19, v170);
      v20 = v14 + 96;
      vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
      v14 += 128;
    }
    while (v14 != (char *)v12);
LABEL_16:
    v22 = (WTF *)((char *)v11 + 2 * v8);
    if (v12 == (uint16x8_t *)v22)
      goto LABEL_22;
    goto LABEL_17;
  }
  v12 = (uint16x8_t *)v11;
  v22 = (WTF *)((char *)v11 + 2 * v8);
  if (v11 == v22)
    goto LABEL_22;
LABEL_17:
  v23 = v22 - (WTF *)v12 - 2;
  if (v23 < 0xE
    || (v24 = (WTF *)((char *)v11 + 2 * v8) - (WTF *)v12 - 2, v12 < (uint16x8_t *)((char *)v6 + (v24 >> 1) + 1))
    && v6 < (WTF *)((char *)&v12->i16[1] + (v24 & 0xFFFFFFFFFFFFFFFELL)))
  {
    v25 = (WTF *)v12;
    v26 = v6;
    goto LABEL_21;
  }
  v147 = (v23 >> 1) + 1;
  if (v23 >= 0x3E)
  {
    v148 = v147 & 0xFFFFFFFFFFFFFFE0;
    v149 = (uint8x8_t *)((char *)v6 + 16);
    v150 = v12 + 2;
    v151 = v147 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v152 = *(uint8x16_t *)v149[-2].i8;
      v153 = vmovl_u8(*v149);
      v154 = vmovl_high_u8(*(uint8x16_t *)v149->i8);
      v150[-2] = vmovl_u8(*(uint8x8_t *)v152.i8);
      v150[-1] = vmovl_high_u8(v152);
      *v150 = v153;
      v150[1] = v154;
      v150 += 4;
      v149 += 4;
      v151 -= 32;
    }
    while (v151);
    if (v147 == v148)
      goto LABEL_22;
    if ((v147 & 0x18) == 0)
    {
      v26 = (WTF *)((char *)v6 + v148);
      v25 = (WTF *)((char *)v12 + 2 * v148);
      do
      {
LABEL_21:
        v27 = *(unsigned __int8 *)v26;
        v26 = (WTF *)((char *)v26 + 1);
        *(_WORD *)v25 = v27;
        v25 = (WTF *)((char *)v25 + 2);
      }
      while (v25 != v22);
      goto LABEL_22;
    }
  }
  else
  {
    v148 = 0;
  }
  v25 = (WTF *)((char *)v12 + 2 * (v147 & 0xFFFFFFFFFFFFFFF8));
  v26 = (WTF *)((char *)v6 + (v147 & 0xFFFFFFFFFFFFFFF8));
  v155 = (uint8x8_t *)((char *)v6 + v148);
  v156 = (uint16x8_t *)((char *)v12 + 2 * v148);
  v157 = v148 - (v147 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v158 = *v155++;
    *v156++ = vmovl_u8(v158);
    v157 += 8;
  }
  while (v157);
  if (v147 != (v147 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_21;
LABEL_22:
  result = v161;
  v8 = v162;
  v6 = v161;
  v164 = v161;
  v165 = v162;
  if (v162)
  {
LABEL_23:
    v28 = (unint64_t *)&unk_1ECE7EB20;
    while (1)
    {
      v29 = *(unsigned __int16 *)v6;
      if ((v29 & 0xFC00) != 0xD800)
        break;
      if (v8 == 1)
        goto LABEL_43;
      v30 = *((unsigned __int16 *)v6 + 1);
      if ((v30 & 0xFC00) != 0xDC00)
        goto LABEL_43;
      v29 = v30 + (v29 << 10) - 56613888;
LABEL_47:
      v38 = v28;
      if (!a5)
      {
        switch(v29)
        {
          case 0xE78Du:
            v45 = -2077130240;
            v46 = 54;
            v47 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
              goto LABEL_202;
            goto LABEL_185;
          case 0xE78Eu:
            v45 = -2077130240;
            v46 = 56;
LABEL_184:
            v47 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v47 == *(_DWORD *)(a1 + 8))
              goto LABEL_185;
            goto LABEL_202;
          case 0xE78Fu:
            v45 = -2077130240;
            v46 = 55;
            v47 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
              goto LABEL_202;
            goto LABEL_185;
          case 0xE790u:
            v45 = -2077130240;
            v46 = 57;
            v47 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
              goto LABEL_202;
            goto LABEL_185;
          case 0xE791u:
            v46 = 48;
            v45 = -2077129984;
            v47 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
              goto LABEL_202;
            goto LABEL_185;
          case 0xE792u:
            v46 = 49;
            v45 = -2077129984;
            v47 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
              goto LABEL_202;
            goto LABEL_185;
          case 0xE793u:
            v46 = 50;
            v45 = -2077129984;
            v47 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
              goto LABEL_202;
            goto LABEL_185;
          case 0xE794u:
            v46 = 51;
            v45 = -2077129984;
            v47 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
              goto LABEL_202;
            goto LABEL_185;
          case 0xE795u:
            v46 = 52;
            v45 = -2077129984;
            v47 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
              goto LABEL_202;
            goto LABEL_185;
          case 0xE796u:
            v46 = 53;
            v45 = -2077129984;
            v47 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v47 == *(_DWORD *)(a1 + 8))
            {
LABEL_185:
              v106 = v47 + (v47 >> 2);
              if (v106 >= 0x10)
                v107 = v106 + 1;
              else
                v107 = 16;
              if (v107 <= v47 + 1)
                v108 = v47 + 1;
              else
                v108 = v107;
              if (HIDWORD(v108))
              {
                __break(0xC471u);
                JUMPOUT(0x1945E4ED0);
              }
              v109 = *(void **)a1;
              v110 = (void *)WTF::fastMalloc((WTF *)v108);
              *(_DWORD *)(a1 + 8) = v108;
              *(_QWORD *)a1 = v110;
              memcpy(v110, v109, v47);
              if (v109)
              {
                if (*(void **)a1 == v109)
                {
                  *(_QWORD *)a1 = 0;
                  *(_DWORD *)(a1 + 8) = 0;
                }
                WTF::fastFree((WTF *)v109, a2);
              }
              v111 = (_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12));
            }
            else
            {
LABEL_202:
              v111 = (_BYTE *)(*(_QWORD *)a1 + v47);
            }
            *v111 = HIBYTE(v45);
            v112 = *(_DWORD *)(a1 + 8);
            v113 = (*(_DWORD *)(a1 + 12) + 1);
            *(_DWORD *)(a1 + 12) = v113;
            if ((_DWORD)v113 == v112)
            {
              v114 = v113 + (v113 >> 2);
              if (v114 >= 0x10)
                v115 = v114 + 1;
              else
                v115 = 16;
              if (v115 <= v113 + 1)
                v116 = v113 + 1;
              else
                v116 = v115;
              if (HIDWORD(v116))
              {
                __break(0xC471u);
                JUMPOUT(0x1945E4ED8);
              }
              v117 = *(void **)a1;
              v118 = (void *)WTF::fastMalloc((WTF *)v116);
              *(_DWORD *)(a1 + 8) = v116;
              *(_QWORD *)a1 = v118;
              memcpy(v118, v117, v113);
              if (v117)
              {
                if (*(void **)a1 == v117)
                {
                  *(_QWORD *)a1 = 0;
                  *(_DWORD *)(a1 + 8) = 0;
                }
                WTF::fastFree((WTF *)v117, a2);
              }
              v119 = (_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12));
            }
            else
            {
              v119 = (_BYTE *)(*(_QWORD *)a1 + v113);
            }
            *v119 = BYTE2(v45);
            v120 = *(_DWORD *)(a1 + 8);
            v121 = (*(_DWORD *)(a1 + 12) + 1);
            *(_DWORD *)(a1 + 12) = v121;
            if ((_DWORD)v121 == v120)
            {
              v122 = v121 + (v121 >> 2);
              if (v122 >= 0x10)
                v123 = v122 + 1;
              else
                v123 = 16;
              if (v123 <= v121 + 1)
                v124 = v121 + 1;
              else
                v124 = v123;
              if (HIDWORD(v124))
              {
                __break(0xC471u);
                JUMPOUT(0x1945E4EE0);
              }
              v125 = *(void **)a1;
              v126 = (void *)WTF::fastMalloc((WTF *)v124);
              *(_DWORD *)(a1 + 8) = v124;
              *(_QWORD *)a1 = v126;
              memcpy(v126, v125, v121);
              if (v125)
              {
                if (*(void **)a1 == v125)
                {
                  *(_QWORD *)a1 = 0;
                  *(_DWORD *)(a1 + 8) = 0;
                }
                WTF::fastFree((WTF *)v125, a2);
              }
              v127 = (_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12));
            }
            else
            {
              v127 = (_BYTE *)(*(_QWORD *)a1 + v121);
            }
            *v127 = BYTE1(v45);
            v128 = *(_DWORD *)(a1 + 8);
            v129 = (*(_DWORD *)(a1 + 12) + 1);
            *(_DWORD *)(a1 + 12) = v129;
            if ((_DWORD)v129 != v128)
            {
              *(_BYTE *)(*(_QWORD *)a1 + v129) = v46;
              goto LABEL_246;
            }
            v130 = v129 + (v129 >> 2);
            if (v130 >= 0x10)
              v131 = v130 + 1;
            else
              v131 = 16;
            if (v131 <= v129 + 1)
              v132 = v129 + 1;
            else
              v132 = v131;
            if (HIDWORD(v132))
            {
              __break(0xC471u);
              JUMPOUT(0x1945E4EE8);
            }
            v133 = *(void **)a1;
            v134 = (void *)WTF::fastMalloc((WTF *)v132);
            *(_DWORD *)(a1 + 8) = v132;
            *(_QWORD *)a1 = v134;
            memcpy(v134, v133, v129);
            v28 = v38;
            if (v133)
            {
              if (*(void **)a1 == v133)
              {
                *(_QWORD *)a1 = 0;
                *(_DWORD *)(a1 + 8) = 0;
              }
              WTF::fastFree((WTF *)v133, a2);
            }
            *(_BYTE *)(*(_QWORD *)a1 + (*(_DWORD *)(a1 + 12))++) = v46;
            if (v8 == 1)
              goto LABEL_244;
            goto LABEL_247;
          default:
            v45 = -2110418944;
            v46 = 55;
            switch(v29)
            {
              case 0xE81Eu:
                goto LABEL_184;
              case 0xE826u:
                v46 = 56;
                v47 = *(unsigned int *)(a1 + 12);
                if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
                  goto LABEL_202;
                goto LABEL_185;
              case 0xE82Bu:
                v46 = 57;
                v47 = *(unsigned int *)(a1 + 12);
                if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
                  goto LABEL_202;
                goto LABEL_185;
              case 0xE82Cu:
                v46 = 48;
                v45 = -2110418688;
                v47 = *(unsigned int *)(a1 + 12);
                if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
                  goto LABEL_202;
                goto LABEL_185;
              case 0xE832u:
                v46 = 49;
                v45 = -2110418688;
                v47 = *(unsigned int *)(a1 + 12);
                if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
                  goto LABEL_202;
                goto LABEL_185;
              case 0xE843u:
                v46 = 50;
                v45 = -2110418688;
                v47 = *(unsigned int *)(a1 + 12);
                if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
                  goto LABEL_202;
                goto LABEL_185;
              case 0xE854u:
                v46 = 51;
                v45 = -2110418688;
                v47 = *(unsigned int *)(a1 + 12);
                if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
                  goto LABEL_202;
                goto LABEL_185;
              case 0xE864u:
                v46 = 52;
                v45 = -2110418688;
                v47 = *(unsigned int *)(a1 + 12);
                if ((_DWORD)v47 != *(_DWORD *)(a1 + 8))
                  goto LABEL_202;
                goto LABEL_185;
              default:
                goto LABEL_71;
            }
        }
      }
      if (v29 != 8364)
      {
LABEL_71:
        v28 = v38;
        v48 = atomic_load(v38);
        if (v48 != -1)
        {
          v168 = &v166;
          v167 = &v168;
          std::__call_once(v38, &v167, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::gb18030EncodeIndex(void)::$_0 &&>>);
        }
        if (!HIWORD(v29))
        {
          v49 = qword_1ECE7EB18;
          v50 = qword_1ECE7EB18 + 95760;
          v51 = 23940;
          while (1)
          {
            while (1)
            {
              v52 = v51 >> 1;
              v53 = (unsigned __int16 *)(v49 + 4 * (v51 >> 1));
              v54 = *v53;
              if (v29 <= v54)
                break;
              v49 = (uint64_t)(v53 + 2);
              v51 += ~v52;
              if (!v51)
                goto LABEL_96;
            }
            if (v29 >= v54)
              break;
            v50 = v49 + 4 * (v51 >> 1);
            v51 >>= 1;
            if (!v52)
              goto LABEL_96;
          }
          v55 = v49 + 4 * (v51 >> 1);
          if (v51 >= 2)
          {
            v55 = v49;
            do
            {
              v56 = v52 >> 1;
              v57 = (unsigned __int16 *)(v55 + 4 * (v52 >> 1));
              v59 = *v57;
              v58 = v57 + 2;
              v52 += ~(v52 >> 1);
              if (v29 > v59)
                v55 = (uint64_t)v58;
              else
                v52 = v56;
            }
            while (v52);
          }
          if ((unsigned __int16 *)v50 != v53 + 2)
          {
            v60 = (v50 - (uint64_t)(v53 + 2)) >> 2;
            v50 = (uint64_t)(v53 + 2);
            do
            {
              v61 = v60 >> 1;
              v62 = (unsigned __int16 *)(v50 + 4 * (v60 >> 1));
              v64 = *v62;
              v63 = v62 + 2;
              v60 += ~(v60 >> 1);
              if (v29 < v64)
                v60 = v61;
              else
                v50 = (uint64_t)v63;
            }
            while (v60);
          }
          if (v55 != v50)
          {
            v65 = *(_WORD *)(v55 + 2);
            LOBYTE(v168) = v65 / 0xBEu - 127;
            v66 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v66 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, (WTF *)(v66 + 1), (unint64_t)&v168);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v66) = v65 / 0xBEu - 127;
            v137 = v65 % 0xBEu;
            v138 = *(_DWORD *)(a1 + 8);
            v139 = (*(_DWORD *)(a1 + 12) + 1);
            *(_DWORD *)(a1 + 12) = v139;
            if (v137 < 0x3Fu)
              v140 = 64;
            else
              v140 = 65;
            if ((_DWORD)v139 == v138)
            {
              v141 = v139 + (v139 >> 2);
              if (v141 >= 0x10)
                v142 = v141 + 1;
              else
                v142 = 16;
              if (v142 <= v139 + 1)
                v143 = v139 + 1;
              else
                v143 = v142;
              if (HIDWORD(v143))
                goto LABEL_302;
              v144 = *(char **)a1;
              v145 = (void *)WTF::fastMalloc((WTF *)v143);
              *(_DWORD *)(a1 + 8) = v143;
              *(_QWORD *)a1 = v145;
              memcpy(v145, v144, v139);
              if (v144)
              {
                if (*(char **)a1 == v144)
                {
                  *(_QWORD *)a1 = 0;
                  *(_DWORD *)(a1 + 8) = 0;
                }
                WTF::fastFree((WTF *)v144, a2);
              }
              v146 = (_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12));
            }
            else
            {
              v146 = (_BYTE *)(*(_QWORD *)a1 + v139);
            }
            *v146 = v140 + v137;
            goto LABEL_246;
          }
        }
LABEL_96:
        if (a5)
        {
          v37 = *(void (**)(void))(**(_QWORD **)a4 + 16);
LABEL_45:
          v37();
          if (v8 != 1)
            goto LABEL_247;
          goto LABEL_244;
        }
        if (v29 == 59335)
        {
          v67 = 7457;
          v68 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v68 != *(_DWORD *)(a1 + 8))
            goto LABEL_100;
LABEL_107:
          v76 = v68 + (v68 >> 2);
          if (v76 >= 0x10)
            v77 = v76 + 1;
          else
            v77 = 16;
          if (v77 <= v68 + 1)
            v78 = v68 + 1;
          else
            v78 = v77;
          if (HIDWORD(v78))
          {
            __break(0xC471u);
            JUMPOUT(0x1945E4EF8);
          }
          v79 = *(char **)a1;
          v80 = (void *)WTF::fastMalloc((WTF *)v78);
          *(_DWORD *)(a1 + 8) = v78;
          *(_QWORD *)a1 = v80;
          memcpy(v80, v79, v68);
          if (v79)
          {
            if (*(char **)a1 == v79)
            {
              *(_QWORD *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree((WTF *)v79, a2);
          }
          v69 = (_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12));
        }
        else
        {
          v70 = 207;
          v71 = &PAL::gb18030Ranges(void)::ranges;
          do
          {
            v72 = v70 >> 1;
            v73 = (char *)&v71[2 * (v70 >> 1)];
            v74 = *((_DWORD *)v73 + 1);
            v75 = v73 + 8;
            v70 += ~(v70 >> 1);
            if (v74 > v29)
              v70 = v72;
            else
              v71 = v75;
          }
          while (v70);
          v67 = *(v71 - 2) + v29 - *(v71 - 1);
          v68 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v68 == *(_DWORD *)(a1 + 8))
            goto LABEL_107;
LABEL_100:
          v69 = (_BYTE *)(*(_QWORD *)a1 + v68);
        }
        *v69 = v67 / 0x3138 - 127;
        v81 = *(_DWORD *)(a1 + 8);
        v82 = (*(_DWORD *)(a1 + 12) + 1);
        *(_DWORD *)(a1 + 12) = v82;
        if ((_DWORD)v82 == v81)
        {
          v83 = v82 + (v82 >> 2);
          if (v83 >= 0x10)
            v84 = v83 + 1;
          else
            v84 = 16;
          if (v84 <= v82 + 1)
            v85 = v82 + 1;
          else
            v85 = v84;
          if (HIDWORD(v85))
          {
            __break(0xC471u);
            JUMPOUT(0x1945E4F00);
          }
          v86 = *(char **)a1;
          v87 = (void *)WTF::fastMalloc((WTF *)v85);
          *(_DWORD *)(a1 + 8) = v85;
          *(_QWORD *)a1 = v87;
          memcpy(v87, v86, v82);
          if (v86)
          {
            if (*(char **)a1 == v86)
            {
              *(_QWORD *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree((WTF *)v86, a2);
          }
          v88 = (_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12));
        }
        else
        {
          v88 = (_BYTE *)(*(_QWORD *)a1 + v82);
        }
        v89 = v67 % 0x3138;
        *v88 = (v89 / 0x4ECu) | 0x30;
        v90 = *(_DWORD *)(a1 + 8);
        v91 = (*(_DWORD *)(a1 + 12) + 1);
        *(_DWORD *)(a1 + 12) = v91;
        if ((_DWORD)v91 == v90)
        {
          v92 = v91 + (v91 >> 2);
          if (v92 >= 0x10)
            v93 = v92 + 1;
          else
            v93 = 16;
          if (v93 <= v91 + 1)
            v94 = v91 + 1;
          else
            v94 = v93;
          if (HIDWORD(v94))
          {
            __break(0xC471u);
            JUMPOUT(0x1945E4F08);
          }
          v95 = *(char **)a1;
          v96 = (void *)WTF::fastMalloc((WTF *)v94);
          *(_DWORD *)(a1 + 8) = v94;
          *(_QWORD *)a1 = v96;
          memcpy(v96, v95, v91);
          if (v95)
          {
            if (*(char **)a1 == v95)
            {
              *(_QWORD *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree((WTF *)v95, a2);
          }
          v97 = (_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12));
        }
        else
        {
          v97 = (_BYTE *)(*(_QWORD *)a1 + v91);
        }
        *v97 = v89 % 0x4ECu / 0xA - 127;
        v98 = *(_DWORD *)(a1 + 8);
        v99 = (*(_DWORD *)(a1 + 12) + 1);
        *(_DWORD *)(a1 + 12) = v99;
        v100 = (v89 % 0x4ECu % 0xA) | 0x30;
        if ((_DWORD)v99 == v98)
        {
          v101 = v99 + (v99 >> 2);
          if (v101 >= 0x10)
            v102 = v101 + 1;
          else
            v102 = 16;
          if (v102 <= v99 + 1)
            v103 = v99 + 1;
          else
            v103 = v102;
          if (HIDWORD(v103))
          {
            __break(0xC471u);
LABEL_301:
            __break(1u);
LABEL_302:
            __break(0xC471u);
            JUMPOUT(0x1945E4F18);
          }
          v104 = *(char **)a1;
          v105 = (void *)WTF::fastMalloc((WTF *)v103);
          *(_DWORD *)(a1 + 8) = v103;
          *(_QWORD *)a1 = v105;
          memcpy(v105, v104, v99);
          if (v104)
          {
            if (*(char **)a1 == v104)
            {
              *(_QWORD *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree((WTF *)v104, a2);
          }
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = v100;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)a1 + v99) = v100;
        }
LABEL_246:
        ++*(_DWORD *)(a1 + 12);
        v28 = v38;
        if (v8 != 1)
          goto LABEL_247;
        goto LABEL_244;
      }
      v39 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v39 != *(_DWORD *)(a1 + 8))
      {
        *(_BYTE *)(*(_QWORD *)a1 + v39) = 0x80;
        goto LABEL_246;
      }
      v40 = v39 + (v39 >> 2);
      if (v40 >= 0x10)
        v41 = v40 + 1;
      else
        v41 = 16;
      if (v41 <= v39 + 1)
        v42 = v39 + 1;
      else
        v42 = v41;
      if (HIDWORD(v42))
      {
        __break(0xC471u);
        JUMPOUT(0x1945E4EF0);
      }
      v43 = *(char **)a1;
      v44 = (void *)WTF::fastMalloc((WTF *)v42);
      *(_DWORD *)(a1 + 8) = v42;
      *(_QWORD *)a1 = v44;
      memcpy(v44, v43, v39);
      if (v43)
      {
        if (*(char **)a1 == v43)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v43, a2);
      }
      *(_BYTE *)(*(_QWORD *)a1 + (*(_DWORD *)(a1 + 12))++) = 0x80;
      if (v8 != 1)
        goto LABEL_247;
LABEL_244:
      v135 = 1;
LABEL_251:
      v136 = v8 >= v135;
      v8 -= v135;
      if (!v136)
        goto LABEL_301;
      v6 = (WTF *)((char *)v6 + 2 * v135);
      if (!v8)
      {
        result = v161;
        goto LABEL_274;
      }
    }
    if (v29 <= 0x7F)
    {
      v31 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v31 == *(_DWORD *)(a1 + 8))
      {
        v32 = v31 + (v31 >> 2);
        if (v32 >= 0x10)
          v33 = v32 + 1;
        else
          v33 = 16;
        if (v33 <= v31 + 1)
          v34 = v31 + 1;
        else
          v34 = v33;
        if (HIDWORD(v34))
        {
          __break(0xC471u);
          JUMPOUT(0x1945E4EC8);
        }
        v35 = *(char **)a1;
        v36 = (void *)WTF::fastMalloc((WTF *)v34);
        *(_DWORD *)(a1 + 8) = v34;
        *(_QWORD *)a1 = v36;
        memcpy(v36, v35, v31);
        if (v35)
        {
          if (*(char **)a1 == v35)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v35, a2);
        }
        *(_BYTE *)(*(_QWORD *)a1 + (*(_DWORD *)(a1 + 12))++) = v29;
        if (v8 != 1)
        {
LABEL_247:
          v135 = 1;
          if ((*(_WORD *)v6 & 0xFC00) == 0xD800)
          {
            if (v8 <= 1)
              goto LABEL_301;
            v135 = 1;
            if ((*((_WORD *)v6 + 1) & 0xFC00) == 0xDC00)
              v135 = 2;
          }
          goto LABEL_251;
        }
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v29;
        ++*(_DWORD *)(a1 + 12);
        if (v8 != 1)
          goto LABEL_247;
      }
      goto LABEL_244;
    }
LABEL_43:
    if (v29 == 58853)
    {
      v37 = *(void (**)(void))(**(_QWORD **)a4 + 16);
      goto LABEL_45;
    }
    goto LABEL_47;
  }
LABEL_274:
  if (v163 != (_BYTE *)result && result)
    return (WTF *)WTF::fastFree(result, a2);
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::gb18030EncodeIndex(void)::$_0 &&>>()
{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  unsigned __int16 *v3;
  int16x8_t v5;
  __int16 *v6;
  uint64_t v7;
  int16x8_t v8;
  int16x8_t v9;
  __int128 v10;
  __int16 *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  char **v32;
  char *v33;
  int16x8x2_t v34;

  v0 = (void *)operator new();
  bzero(v0, 0x17610uLL);
  qword_1ECE7EB18 = (uint64_t)v0;
  v1 = atomic_load(&PAL::gb18030(void)::flag);
  if (v1 != -1)
  {
    v33 = &v31;
    v32 = &v33;
    std::__call_once(&PAL::gb18030(void)::flag, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::gb18030(void)::$_0 &&>>);
  }
  v2 = PAL::gb18030(void)::array;
  v3 = (unsigned __int16 *)qword_1ECE7EB18;
  if (qword_1ECE7EB18 >= (unint64_t)(PAL::gb18030(void)::array + 47880)
    || PAL::gb18030(void)::array >= (unint64_t)(qword_1ECE7EB18 + 95758))
  {
    v5 = (int16x8_t)xmmword_196881010;
    v6 = (__int16 *)(qword_1ECE7EB18 + 32);
    v7 = -47872;
    v8.i64[0] = 0x8000800080008;
    v8.i64[1] = 0x8000800080008;
    v9.i64[0] = 0x10001000100010;
    v9.i64[1] = 0x10001000100010;
    v12 = 23936;
    do
    {
      v34.val[1] = vaddq_s16(v5, v8);
      v10 = *(_OWORD *)(v2 + v7 + 47872);
      v34.val[0] = *(int16x8_t *)(v2 + v7 + 47888);
      v11 = v6 - 16;
      vst2q_s16(v11, *(int16x8x2_t *)(&v5 - 1));
      vst2q_s16(v6, v34);
      v5 = vaddq_s16(v5, v9);
      v6 += 32;
      v7 += 32;
    }
    while (v7);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v3[2 * v12 + 1];
  do
  {
    *(v13 - 1) = *(_WORD *)(v2 + 2 * v12);
    *v13 = v12;
    v13 += 2;
    ++v12;
  }
  while (v12 != 23940);
  v14 = (char *)operator new(0x17610uLL, MEMORY[0x1E0DE4E10]);
  if (v14)
  {
    v15 = v14;
    v16 = 23940;
LABEL_42:
    std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(v3, v3 + 47880, 0x5D84uLL, v15, v16);
    operator delete(v15);
    return;
  }
  v17 = (char *)operator new(0xBB08uLL, MEMORY[0x1E0DE4E10]);
  if (v17)
  {
    v15 = v17;
    v16 = 11970;
    goto LABEL_42;
  }
  v18 = (char *)operator new(0x5D84uLL, MEMORY[0x1E0DE4E10]);
  if (v18)
  {
    v15 = v18;
    v16 = 5985;
    goto LABEL_42;
  }
  v19 = (char *)operator new(0x2EC0uLL, MEMORY[0x1E0DE4E10]);
  if (v19)
  {
    v15 = v19;
    v16 = 2992;
    goto LABEL_42;
  }
  v20 = (char *)operator new(0x1760uLL, MEMORY[0x1E0DE4E10]);
  if (v20)
  {
    v15 = v20;
    v16 = 1496;
    goto LABEL_42;
  }
  v21 = (char *)operator new(0xBB0uLL, MEMORY[0x1E0DE4E10]);
  if (v21)
  {
    v15 = v21;
    v16 = 748;
    goto LABEL_42;
  }
  v22 = (char *)operator new(0x5D8uLL, MEMORY[0x1E0DE4E10]);
  if (v22)
  {
    v15 = v22;
    v16 = 374;
    goto LABEL_42;
  }
  v23 = (char *)operator new(0x2ECuLL, MEMORY[0x1E0DE4E10]);
  if (v23)
  {
    v15 = v23;
    v16 = 187;
    goto LABEL_42;
  }
  v24 = (char *)operator new(0x174uLL, MEMORY[0x1E0DE4E10]);
  if (v24)
  {
    v15 = v24;
    v16 = 93;
    goto LABEL_42;
  }
  v25 = (char *)operator new(0xB8uLL, MEMORY[0x1E0DE4E10]);
  if (v25)
  {
    v15 = v25;
    v16 = 46;
    goto LABEL_42;
  }
  v26 = (char *)operator new(0x5CuLL, MEMORY[0x1E0DE4E10]);
  if (v26)
  {
    v15 = v26;
    v16 = 23;
    goto LABEL_42;
  }
  v27 = (char *)operator new(0x2CuLL, MEMORY[0x1E0DE4E10]);
  if (v27)
  {
    v15 = v27;
    v16 = 11;
    goto LABEL_42;
  }
  v28 = (char *)operator new(0x14uLL, MEMORY[0x1E0DE4E10]);
  if (v28)
  {
    v15 = v28;
    v16 = 5;
    goto LABEL_42;
  }
  v29 = (char *)operator new(8uLL, MEMORY[0x1E0DE4E10]);
  if (v29)
  {
    v15 = v29;
    v16 = 2;
    goto LABEL_42;
  }
  v30 = (char *)operator new(4uLL, MEMORY[0x1E0DE4E10]);
  if (v30)
  {
    v15 = v30;
    v16 = 1;
    goto LABEL_42;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned short> *>(v3, v3 + 47880, 0x5D84uLL, 0, 0);
}

_QWORD *WTF::Detail::CallableWrapper<PAL::TextCodecCJK::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_0,std::unique_ptr<PAL::TextCodec>>::call@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *result = off_1E31F3A48;
  result[1] = 0;
  *(_QWORD *)((char *)result + 13) = 0;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecCJK::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_1,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = off_1E31F3A48;
  *(_BYTE *)(result + 8) = 4;
  *(_QWORD *)(result + 9) = 0;
  *(_DWORD *)(result + 17) = 0;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecCJK::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_2,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = off_1E31F3A48;
  *(_BYTE *)(result + 8) = 2;
  *(_QWORD *)(result + 9) = 0;
  *(_DWORD *)(result + 17) = 0;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecCJK::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_3,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = off_1E31F3A48;
  *(_BYTE *)(result + 8) = 3;
  *(_QWORD *)(result + 9) = 0;
  *(_DWORD *)(result + 17) = 0;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecCJK::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_4,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = off_1E31F3A48;
  *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 9) = 0;
  *(_DWORD *)(result + 17) = 0;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecCJK::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_5,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = off_1E31F3A48;
  *(_BYTE *)(result + 8) = 5;
  *(_QWORD *)(result + 9) = 0;
  *(_DWORD *)(result + 17) = 0;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecCJK::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_6,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = off_1E31F3A48;
  *(_BYTE *)(result + 8) = 6;
  *(_QWORD *)(result + 9) = 0;
  *(_DWORD *)(result + 17) = 0;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecCJK::eucJPDecode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0,PAL::TextCodecCJK::SawError,unsigned char,WTF::StringBuilder &>::call(uint64_t a1, __int16 a2, WTF::StringBuilder *this)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t result;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned __int16 v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unint64_t v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char **v37;
  char *v38;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned __int8 *)(v5 + 18);
  *(_BYTE *)(v5 + 18) = 0;
  if (v6)
  {
    v7 = (a2 + 95);
    if (v7 <= 0x3E && v6 == 142)
    {
      result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
      if (result)
      {
        v9 = (_WORD *)result;
        result = 0;
        *v9 = a2 - 320;
      }
      return result;
    }
    if (v7 <= 0x5D && v6 == 143)
    {
      result = 0;
      *(_BYTE *)(v5 + 9) = 1;
      *(_BYTE *)(v5 + 18) = a2;
      return result;
    }
    if ((a2 + 95) > 0x5Du || (v6 + 95) > 0x5Du)
      goto LABEL_54;
    v13 = a2 + 94 * v6 - 15295;
    v14 = *(unsigned __int8 *)(v5 + 9);
    *(_BYTE *)(v5 + 9) = 0;
    if (v14)
    {
      v15 = atomic_load(&PAL::jis0212(void)::flag);
      if (v15 != -1)
      {
        v38 = &v36;
        v37 = &v38;
        std::__call_once(&PAL::jis0212(void)::flag, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::jis0212(void)::$_0 &&>>);
      }
      v16 = 6067;
      v17 = (unsigned __int16 *)PAL::jis0212(void)::array;
      do
      {
        v18 = v16 >> 1;
        v19 = &v17[2 * (v16 >> 1)];
        v21 = *v19;
        v20 = v19 + 2;
        v16 += ~(v16 >> 1);
        if (v21 < v13)
          v17 = v20;
        else
          v16 = v18;
      }
      while (v16);
      if (v17 == (unsigned __int16 *)(PAL::jis0212(void)::array + 24268))
        goto LABEL_54;
    }
    else
    {
      v24 = atomic_load(&PAL::jis0208(void)::flag);
      if (v24 != -1)
      {
        v38 = &v36;
        v37 = &v38;
        std::__call_once(&PAL::jis0208(void)::flag, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::jis0208(void)::$_0 &&>>);
      }
      v25 = 7724;
      v17 = (unsigned __int16 *)PAL::jis0208(void)::array;
      do
      {
        v26 = v25 >> 1;
        v27 = &v17[2 * (v25 >> 1)];
        v29 = *v27;
        v28 = v27 + 2;
        v25 += ~(v25 >> 1);
        if (v29 < v13)
          v17 = v28;
        else
          v25 = v26;
      }
      while (v25);
      if (v17 == (unsigned __int16 *)(PAL::jis0208(void)::array + 30896))
      {
LABEL_54:
        if ((a2 & 0x80) == 0)
        {
          *(_WORD *)(v5 + 19) = a2 | 0x100;
          return 1;
        }
        return 1;
      }
    }
    if (*v17 > v13)
      goto LABEL_54;
    v33 = v17[1] | 0x10000 | v17[1] & 0xFF00;
    if ((v33 & 0x10000) == 0)
      goto LABEL_54;
    LOWORD(v38) = v33;
    v30 = *((_QWORD *)this + 1);
    if (!v30)
      goto LABEL_52;
    v31 = *((unsigned int *)this + 4);
    if (v31 >= *(_DWORD *)(v30 + 4) || *(_QWORD *)this != 0)
      goto LABEL_52;
    if ((*(_BYTE *)(v30 + 16) & 4) == 0)
    {
      v34 = *(_QWORD *)(v30 + 8);
      *((_DWORD *)this + 4) = v31 + 1;
      *(_WORD *)(v34 + 2 * v31) = v33;
      return 0;
    }
    if ((unsigned __int16)v33 > 0xFFu)
    {
LABEL_52:
      WTF::StringBuilder::append();
      return 0;
    }
    v35 = *(_QWORD *)(v30 + 8);
    *((_DWORD *)this + 4) = v31 + 1;
    *(_BYTE *)(v35 + v31) = v33;
    return 0;
  }
  else
  {
    if ((a2 & 0x80) != 0)
    {
      if ((a2 & 0xFE) == 0x8E || (a2 + 95) <= 0x5Du)
      {
        result = 0;
        *(_BYTE *)(v5 + 18) = a2;
        return result;
      }
      return 1;
    }
    LOBYTE(v38) = a2;
    v10 = *((_QWORD *)this + 1);
    if (v10
      && ((v11 = *((unsigned int *)this + 4), v11 < *(_DWORD *)(v10 + 4))
        ? (v12 = *(_QWORD *)this == 0)
        : (v12 = 0),
          v12))
    {
      v22 = *(_DWORD *)(v10 + 16);
      v23 = *(_QWORD *)(v10 + 8);
      *((_DWORD *)this + 4) = v11 + 1;
      if ((v22 & 4) != 0)
        *(_BYTE *)(v23 + v11) = a2;
      else
        *(_WORD *)(v23 + 2 * v11) = a2;
      return 0;
    }
    else
    {
      WTF::StringBuilder::append();
      return 0;
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecCJK::shiftJISDecode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0,PAL::TextCodecCJK::SawError,unsigned char,WTF::StringBuilder &>::call(uint64_t a1, unsigned int a2, uint64_t a3)
{
  __int16 v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  __int16 v11;
  __int16 v12;
  unsigned __int16 v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char **v35;
  char *v36;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned __int8 *)(v5 + 18);
  *(_BYTE *)(v5 + 18) = 0;
  if (v6)
  {
    if ((char)a2 >= -3 && (a2 - 64) > 0x3Eu)
      goto LABEL_4;
    if (v6 >= 0xA0)
      v11 = -193;
    else
      v11 = -129;
    if (a2 >= 0x7F)
      v12 = -65;
    else
      v12 = -64;
    v13 = v12 + a2 + 188 * (v11 + v6);
    if ((unsigned __int16)(v13 - 8836) <= 0x757u)
    {
      v14 = v13 - 17028;
      LOWORD(v36) = v13 - 17028;
      v15 = *(_QWORD *)(a3 + 8);
      if (!v15)
        goto LABEL_45;
LABEL_24:
      v16 = *(unsigned int *)(a3 + 16);
      v17 = v16 < *(_DWORD *)(v15 + 4) && *(_QWORD *)a3 == 0;
      if (v17 && (*(_BYTE *)(v15 + 16) & 4) == 0)
      {
        v18 = *(_QWORD *)(v15 + 8);
        *(_DWORD *)(a3 + 16) = v16 + 1;
        *(_WORD *)(v18 + 2 * v16) = v14;
        return 0;
      }
      goto LABEL_45;
    }
    v19 = atomic_load(&PAL::jis0208(void)::flag);
    if (v19 != -1)
    {
      v36 = &v34;
      v35 = &v36;
      std::__call_once(&PAL::jis0208(void)::flag, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::jis0208(void)::$_0 &&>>);
    }
    v20 = 7724;
    v21 = (unsigned __int16 *)PAL::jis0208(void)::array;
    do
    {
      v22 = v20 >> 1;
      v23 = &v21[2 * (v20 >> 1)];
      v25 = *v23;
      v24 = v23 + 2;
      v20 += ~(v20 >> 1);
      if (v25 < v13)
        v21 = v24;
      else
        v20 = v22;
    }
    while (v20);
    if (v21 == (unsigned __int16 *)(PAL::jis0208(void)::array + 30896) || *v21 > v13)
    {
LABEL_4:
      if ((v4 & 0x80) == 0)
      {
        *(_WORD *)(v5 + 19) = v4 | 0x100;
        return 1;
      }
      return 1;
    }
    v26 = v21[1];
    LOWORD(v36) = v26;
    v27 = *(_QWORD *)(a3 + 8);
    if (!v27
      || ((v28 = *(unsigned int *)(a3 + 16), v28 < *(_DWORD *)(v27 + 4))
        ? (v29 = *(_QWORD *)a3 == 0)
        : (v29 = 0),
          !v29))
    {
LABEL_45:
      WTF::StringBuilder::append();
      return 0;
    }
    if ((*(_BYTE *)(v27 + 16) & 4) != 0)
    {
      if (v26 > 0xFF)
        goto LABEL_45;
      v33 = *(_QWORD *)(v27 + 8);
      *(_DWORD *)(a3 + 16) = v28 + 1;
      *(_BYTE *)(v33 + v28) = v26;
      return 0;
    }
    else
    {
      v32 = *(_QWORD *)(v27 + 8);
      *(_DWORD *)(a3 + 16) = v28 + 1;
      *(_WORD *)(v32 + 2 * v28) = v26;
      return 0;
    }
  }
  else if (a2 > 0x80)
  {
    if ((a2 + 95) <= 0x3Eu)
    {
      v14 = a2 - 320;
      LOWORD(v36) = a2 - 320;
      v15 = *(_QWORD *)(a3 + 8);
      if (v15)
        goto LABEL_24;
      goto LABEL_45;
    }
    if ((a2 + 127) >= 0x1Fu && (a2 + 32) > 0x1Cu)
      return 1;
    result = 0;
    *(_BYTE *)(v5 + 18) = a2;
  }
  else
  {
    LOBYTE(v36) = a2;
    v8 = *(_QWORD *)(a3 + 8);
    if (v8
      && ((v9 = *(unsigned int *)(a3 + 16), v9 < *(_DWORD *)(v8 + 4))
        ? (v10 = *(_QWORD *)a3 == 0)
        : (v10 = 0),
          v10))
    {
      v30 = *(_DWORD *)(v8 + 16);
      v31 = *(_QWORD *)(v8 + 8);
      *(_DWORD *)(a3 + 16) = v9 + 1;
      if ((v30 & 4) != 0)
        *(_BYTE *)(v31 + v9) = a2;
      else
        *(_WORD *)(v31 + 2 * v9) = a2;
      return 0;
    }
    else
    {
      WTF::StringBuilder::append();
      return 0;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecCJK::eucKRDecode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0,PAL::TextCodecCJK::SawError,unsigned char,WTF::StringBuilder &>::call(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char **v28;
  char *v29;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned __int8 *)(v5 + 18);
  *(_BYTE *)(v5 + 18) = 0;
  if (v6)
  {
    if ((a2 - 65) > 0xBDu)
      goto LABEL_13;
    v7 = atomic_load(&PAL::eucKR(void)::flag);
    if (v7 != -1)
    {
      v29 = &v27;
      v28 = &v29;
      std::__call_once(&PAL::eucKR(void)::flag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::eucKR(void)::$_0 &&>>);
    }
    v8 = a2 + 190 * v6 - 24575;
    if (HIWORD(v8))
      goto LABEL_13;
    v9 = 17048;
    v10 = (unsigned __int16 *)PAL::eucKR(void)::array;
    do
    {
      v11 = v9 >> 1;
      v12 = &v10[2 * (v9 >> 1)];
      v14 = *v12;
      v13 = v12 + 2;
      v9 += ~(v9 >> 1);
      if (v8 > v14)
        v10 = v13;
      else
        v9 = v11;
    }
    while (v9);
    if (v10 == (unsigned __int16 *)(PAL::eucKR(void)::array + 68192) || v8 < *v10)
    {
LABEL_13:
      if ((a2 & 0x80) == 0)
      {
        *(_WORD *)(v5 + 19) = a2 | 0x100;
        return 1;
      }
      return 1;
    }
    v21 = v10[1];
    LOWORD(v29) = v10[1];
    v22 = *(_QWORD *)(a3 + 8);
    if (!v22)
      goto LABEL_33;
    v23 = *(unsigned int *)(a3 + 16);
    if (v23 >= *(_DWORD *)(v22 + 4) || *(_QWORD *)a3 != 0)
      goto LABEL_33;
    if ((*(_BYTE *)(v22 + 16) & 4) != 0)
    {
      if (v21 > 0xFF)
      {
LABEL_33:
        WTF::StringBuilder::append();
        return 0;
      }
      v26 = *(_QWORD *)(v22 + 8);
      *(_DWORD *)(a3 + 16) = v23 + 1;
      *(_BYTE *)(v26 + v23) = v21;
      return 0;
    }
    else
    {
      v25 = *(_QWORD *)(v22 + 8);
      *(_DWORD *)(a3 + 16) = v23 + 1;
      *(_WORD *)(v25 + 2 * v23) = v21;
      return 0;
    }
  }
  else
  {
    if ((a2 & 0x80) != 0)
    {
      if ((a2 + 127) <= 0x7Du)
      {
        result = 0;
        *(_BYTE *)(v5 + 18) = a2;
        return result;
      }
      return 1;
    }
    LOBYTE(v29) = a2;
    v16 = *(_QWORD *)(a3 + 8);
    if (v16
      && ((v17 = *(unsigned int *)(a3 + 16), v17 < *(_DWORD *)(v16 + 4))
        ? (v18 = *(_QWORD *)a3 == 0)
        : (v18 = 0),
          v18))
    {
      v19 = *(_DWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 8);
      *(_DWORD *)(a3 + 16) = v17 + 1;
      if ((v19 & 4) != 0)
        *(_BYTE *)(v20 + v17) = a2;
      else
        *(_WORD *)(v20 + 2 * v17) = a2;
      return 0;
    }
    else
    {
      WTF::StringBuilder::append();
      return 0;
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecCJK::gb18030Decode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0,PAL::TextCodecCJK::SawError,unsigned char,WTF::StringBuilder &>::call(uint64_t a1, uint64_t a2, WTF::StringBuilder *this)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  _WORD *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  char v53;
  int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  _DWORD *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  _DWORD *v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _WORD *v71;
  char v72;
  char **v73;
  char *v74;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned __int8 *)(v6 + 17);
  if (!*(_BYTE *)(v6 + 17))
  {
    if (*(_BYTE *)(v6 + 16))
    {
      if ((a2 + 127) <= 0x7Du)
      {
        result = 0;
        *(_BYTE *)(v6 + 17) = a2;
        return result;
      }
      **(_BYTE **)(a1 + 16) = 1;
      LOWORD(v74) = -3;
      v24 = *((_QWORD *)this + 1);
      if (v24
        && ((v25 = *((unsigned int *)this + 4), v25 < *(_DWORD *)(v24 + 4))
          ? (v26 = *(_QWORD *)this == 0)
          : (v26 = 0),
            v26 && (*(_BYTE *)(v24 + 16) & 4) == 0))
      {
        v27 = *(_QWORD *)(v24 + 8);
        *((_DWORD *)this + 4) = v25 + 1;
        *(_WORD *)(v27 + 2 * v25) = -3;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      *(_BYTE *)(v6 + 15) = 0;
      v28 = *(_QWORD **)(a1 + 24);
      v29 = *(unsigned __int8 *)(v6 + 16);
      *(_BYTE *)(v6 + 16) = 0;
      if (!(*(unsigned int (**)(_QWORD, uint64_t, WTF::StringBuilder *))(*(_QWORD *)*v28 + 16))(*v28, v29, this))return (*(uint64_t (**)(_QWORD, uint64_t, WTF::StringBuilder *))(***(_QWORD ***)(a1 + 24) + 16))(**(_QWORD **)(a1 + 24), a2, this);
LABEL_43:
      **(_BYTE **)(a1 + 16) = 1;
      LOWORD(v74) = -3;
      v30 = *((_QWORD *)this + 1);
      if (!v30
        || (v31 = *((unsigned int *)this + 4), v31 >= *(_DWORD *)(v30 + 4))
        || *(_QWORD *)this
        || (*(_BYTE *)(v30 + 16) & 4) != 0)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v32 = *(_QWORD *)(v30 + 8);
        *((_DWORD *)this + 4) = v31 + 1;
        *(_WORD *)(v32 + 2 * v31) = -3;
      }
      return (*(uint64_t (**)(_QWORD, uint64_t, WTF::StringBuilder *))(***(_QWORD ***)(a1 + 24) + 16))(**(_QWORD **)(a1 + 24), a2, this);
    }
    v23 = *(unsigned __int8 *)(v6 + 15);
    if (*(_BYTE *)(v6 + 15))
    {
      if ((a2 - 48) <= 9)
      {
        result = 0;
        *(_BYTE *)(v6 + 16) = a2;
        return result;
      }
      *(_BYTE *)(v6 + 15) = 0;
      if ((char)a2 >= -1 && (a2 - 64) > 0x3Eu)
        goto LABEL_75;
      v36 = -65;
      if (a2 < 0x7F)
        v36 = -64;
      v37 = v36 + a2 + 190 * v23 - 24510;
      v38 = atomic_load(&PAL::gb18030(void)::flag);
      if (v38 != -1)
      {
        v74 = &v72;
        v73 = &v74;
        std::__call_once(&PAL::gb18030(void)::flag, &v73, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::gb18030(void)::$_0 &&>>);
      }
      if (v37 > 0x5D83)
      {
LABEL_75:
        if ((a2 & 0x80) == 0)
          *(_WORD *)(v6 + 19) = a2 | 0x100;
        return 1;
      }
      v39 = PAL::gb18030((PAL *)a1);
      v40 = *(unsigned __int16 *)(v39 + 2 * v37);
      LOWORD(v74) = *(_WORD *)(v39 + 2 * v37);
      v41 = *((_QWORD *)this + 1);
      if (v41)
      {
        v42 = *((unsigned int *)this + 4);
        if (v42 < *(_DWORD *)(v41 + 4) && !*(_QWORD *)this)
        {
          if ((*(_BYTE *)(v41 + 16) & 4) == 0)
          {
            v43 = *(_QWORD *)(v41 + 8);
            *((_DWORD *)this + 4) = v42 + 1;
            *(_WORD *)(v43 + 2 * v42) = v40;
            return 0;
          }
          if (v40 <= 0xFF)
          {
            v70 = *(_QWORD *)(v41 + 8);
            *((_DWORD *)this + 4) = v42 + 1;
            *(_BYTE *)(v70 + v42) = v40;
            return 0;
          }
        }
      }
    }
    else
    {
      if ((a2 & 0x80) == 0)
      {
        LOBYTE(v74) = a2;
        v33 = *((_QWORD *)this + 1);
        if (v33
          && ((v34 = *((unsigned int *)this + 4), v34 < *(_DWORD *)(v33 + 4))
            ? (v35 = *(_QWORD *)this == 0)
            : (v35 = 0),
              v35))
        {
          v56 = *(_DWORD *)(v33 + 16);
          v57 = *(_QWORD *)(v33 + 8);
          *((_DWORD *)this + 4) = v34 + 1;
          if ((v56 & 4) != 0)
            *(_BYTE *)(v57 + v34) = a2;
          else
            *(_WORD *)(v57 + 2 * v34) = a2;
        }
        else
        {
          WTF::StringBuilder::append();
        }
        return 0;
      }
      if ((_DWORD)a2 != 128)
      {
        if ((a2 + 127) <= 0x7Du)
        {
          result = 0;
          *(_BYTE *)(v6 + 15) = a2;
          return result;
        }
        return 1;
      }
      LOWORD(v74) = 8364;
      v44 = *((_QWORD *)this + 1);
      if (v44)
      {
        v45 = *((unsigned int *)this + 4);
        v46 = v45 < *(_DWORD *)(v44 + 4) && *(_QWORD *)this == 0;
        if (v46 && (*(_BYTE *)(v44 + 16) & 4) == 0)
        {
          v47 = *(_QWORD *)(v44 + 8);
          *((_DWORD *)this + 4) = v45 + 1;
          *(_WORD *)(v47 + 2 * v45) = 8364;
          return 0;
        }
      }
    }
    WTF::StringBuilder::append();
    return 0;
  }
  if ((a2 - 58) <= 0xF5u)
  {
    **(_BYTE **)(a1 + 16) = 1;
    LOWORD(v74) = -3;
    v8 = *((_QWORD *)this + 1);
    if (v8
      && ((v9 = *((unsigned int *)this + 4), v9 < *(_DWORD *)(v8 + 4))
        ? (v10 = *(_QWORD *)this == 0)
        : (v10 = 0),
          v10 && (*(_BYTE *)(v8 + 16) & 4) == 0))
    {
      v11 = *(_QWORD *)(v8 + 8);
      *((_DWORD *)this + 4) = v9 + 1;
      *(_WORD *)(v11 + 2 * v9) = -3;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v18 = *(unsigned __int8 *)(v6 + 16);
    *(_WORD *)(v6 + 15) = 0;
    v19 = *(unsigned __int8 *)(v6 + 17);
    *(_BYTE *)(v6 + 17) = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t, WTF::StringBuilder *))(***(_QWORD ***)(a1 + 24) + 16))(**(_QWORD **)(a1 + 24), v18, this))
    {
      **(_BYTE **)(a1 + 16) = 1;
      LOWORD(v74) = -3;
      v20 = *((_QWORD *)this + 1);
      if (!v20
        || (v21 = *((unsigned int *)this + 4), v21 >= *(_DWORD *)(v20 + 4))
        || *(_QWORD *)this
        || (*(_BYTE *)(v20 + 16) & 4) != 0)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v22 = *(_QWORD *)(v20 + 8);
        *((_DWORD *)this + 4) = v21 + 1;
        *(_WORD *)(v22 + 2 * v21) = -3;
      }
    }
    if (!(*(unsigned int (**)(_QWORD, uint64_t, WTF::StringBuilder *))(***(_QWORD ***)(a1 + 24) + 16))(**(_QWORD **)(a1 + 24), v19, this))return (*(uint64_t (**)(_QWORD, uint64_t, WTF::StringBuilder *))(***(_QWORD ***)(a1 + 24) + 16))(**(_QWORD **)(a1 + 24), a2, this);
    goto LABEL_43;
  }
  v13 = *(unsigned __int8 *)(v6 + 15);
  v14 = *(unsigned __int8 *)(v6 + 16);
  *(_WORD *)(v6 + 15) = 0;
  *(_BYTE *)(v6 + 17) = 0;
  v15 = (v13 << 24) | (v7 << 8) | (v14 << 16) | a2;
  if (v15 > -2077130187)
  {
    switch(v15)
    {
      case -2077129936:
        v16 = -6400;
        v17 = 145;
        break;
      case -2077129935:
        v16 = -6400;
        v17 = 146;
        break;
      case -2077129934:
        v16 = -6400;
        v17 = 147;
        break;
      case -2077129933:
        v16 = -6400;
        v17 = 148;
        break;
      case -2077129932:
        v16 = -6400;
        v17 = 149;
        break;
      case -2077129931:
        v16 = -6400;
        v17 = 150;
        break;
      default:
        switch(v15)
        {
          case -2077130186:
            v16 = -6400;
            v17 = 141;
            goto LABEL_100;
          case -2077130185:
            v16 = -6400;
            v17 = 143;
            goto LABEL_100;
          case -2077130184:
            v16 = -6400;
            v17 = 142;
            goto LABEL_100;
          case -2077130183:
            v16 = -6400;
            v17 = 144;
            goto LABEL_100;
          default:
            goto LABEL_102;
        }
    }
    goto LABEL_100;
  }
  if (v15 > -2110418641)
  {
    switch(v15)
    {
      case -2110418640:
        v16 = -6144;
        v17 = 44;
        goto LABEL_100;
      case -2110418639:
        v16 = -6144;
        v17 = 50;
        goto LABEL_100;
      case -2110418638:
        v16 = -6144;
        v17 = 67;
        goto LABEL_100;
      case -2110418637:
        v16 = -6144;
        v17 = 84;
        goto LABEL_100;
      case -2110418636:
        v16 = -6144;
        v17 = 100;
        goto LABEL_100;
      default:
        goto LABEL_102;
    }
  }
  switch(v15)
  {
    case -2110418889:
      v16 = -6144;
      v17 = 30;
      goto LABEL_100;
    case -2110418888:
      v16 = -6144;
      v17 = 38;
LABEL_100:
      result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
      if (result)
      {
        v48 = (_WORD *)result;
        result = 0;
        *v48 = v16 | v17;
      }
      return result;
    case -2110418887:
      v16 = -6144;
      v17 = 43;
      goto LABEL_100;
  }
LABEL_102:
  v49 = a2 + 10 * v7 + 12600 * v13 + 1260 * v14;
  v50 = v49 - 1687218;
  v51 = v49 - 1726638;
  v52 = v50 <= 0x12E247 && v51 >= 0x2484C;
  if (!v52)
    return 1;
  if (v50 == 7457)
  {
    v53 = -57;
    LOWORD(v54) = -10247;
    v55 = 59335;
  }
  else
  {
    v58 = &PAL::gb18030Ranges(void)::ranges;
    v59 = 207;
    do
    {
      v60 = v59 >> 1;
      v61 = &v58[2 * (v59 >> 1)];
      v63 = *v61;
      v62 = v61 + 2;
      v59 += ~(v59 >> 1);
      if (v63 > v50)
        v59 = v60;
      else
        v58 = v62;
    }
    while (v59);
    v55 = v50 - *(v58 - 2) + *(v58 - 1);
    v54 = (v55 >> 10) - 10304;
    v53 = v50 - *((_BYTE *)v58 - 8) + *((_BYTE *)v58 - 4);
  }
  v64 = *((_DWORD *)this + 4);
  if (v55 < 0x10000)
    v65 = 1;
  else
    v65 = 2;
  v52 = __CFADD__(v64, v65);
  v66 = v64 + v65;
  if (v52)
    v67 = 0xFFFFFFFFLL;
  else
    v67 = v66;
  v68 = *((_QWORD *)this + 1);
  if (v68 || (v68 = *(_QWORD *)this) != 0)
  {
    if ((*(_BYTE *)(v68 + 16) & 4) != 0 && v55 < 0x100)
    {
LABEL_131:
      result = MEMORY[0x19AEA4824](this, v67);
      if (result)
      {
        v69 = (char *)result;
        result = 0;
        *v69 = v53;
      }
      return result;
    }
  }
  else if (v55 <= 0xFF)
  {
    goto LABEL_131;
  }
  result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
  if (result)
  {
    v71 = (_WORD *)result;
    if (v55 >= 0x10000)
    {
      *(_WORD *)(result + 2) = v55 & 0x3FF | 0xDC00;
      LOWORD(v55) = v54;
    }
    result = 0;
    *v71 = v55;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char16_t,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, __int16 a4@<W3>, _QWORD *a5@<X8>)
{
  int v7;
  uint64_t v9;
  _BYTE *v10;
  int8x16_t *v11;
  size_t v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned __int128 *v15;
  unsigned __int128 v16;
  _WORD *v17;
  int8x16_t *v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  size_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  _BYTE *v35;
  int8x16_t *v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  _WORD *v42;
  int8x16_t *v43;
  __int16 v44;
  int8x16_t *v45;
  int8x16_t *v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int16x8_t *v52;
  int8x8_t *v53;
  unint64_t v54;
  int16x8_t v55;
  uint8x8_t *v56;
  uint16x8_t *v57;
  unint64_t v58;
  uint8x16_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint8x8_t *v62;
  uint16x8_t *v63;
  unint64_t v64;
  uint8x8_t v65;
  uint64_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;

  v7 = result;
  if (!a2)
  {
    if (!(_DWORD)result)
      goto LABEL_14;
    if (result > 0x7FFFFFEF)
      goto LABEL_13;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
    v9 = v66;
    if (!v66)
      goto LABEL_61;
    v17 = (_WORD *)(v66 + 20);
    *(_DWORD *)v66 = 2;
    *(_DWORD *)(v66 + 4) = v7;
    *(_QWORD *)(v66 + 8) = v66 + 20;
    *(_DWORD *)(v66 + 16) = 0;
    if (!a3)
    {
      v20 = 0;
LABEL_60:
      v17[v20] = a4;
      goto LABEL_61;
    }
    v18 = *(int8x16_t **)(a3 + 8);
    v19 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) == 0)
    {
      if ((_DWORD)v19)
      {
        if ((_DWORD)v19 == 1)
          *v17 = v18->i16[0];
        else
          result = (uint64_t)memcpy((void *)(v66 + 20), v18, 2 * v19);
      }
      goto LABEL_59;
    }
    v21 = &v17[v19];
    if (v19 < 0x40)
    {
      v22 = v66 + 20;
    }
    else
    {
      v22 = (unint64_t)&v17[v19 & 0xFFFFFFC0];
      v23 = 0uLL;
      v24 = (char *)(v66 + 20);
      do
      {
        v67.val[0] = *v18;
        v25 = v18[1];
        v68.val[0] = v18[2];
        v26 = v18[3];
        v18 += 4;
        v27 = v26;
        v68.val[1] = 0uLL;
        v69.val[0] = v25;
        v67.val[1] = 0uLL;
        v28 = v24;
        vst2q_s8(v28, v67);
        v28 += 32;
        v69.val[1] = 0uLL;
        vst2q_s8(v28, v69);
        v29 = v24 + 64;
        vst2q_s8(v29, v68);
        v30 = v24 + 96;
        vst2q_s8(v30, *(int8x16x2_t *)(&v23 - 1));
        v24 += 128;
      }
      while (v24 != (char *)v22);
    }
    if ((_WORD *)v22 == v21)
    {
LABEL_59:
      v20 = *(unsigned int *)(a3 + 4);
      goto LABEL_60;
    }
    v38 = v66 + 2 * v19 - v22 + 18;
    if (v38 < 0xE
      || (v22 < (unint64_t)v18->u64 + (v38 >> 1) + 1
        ? (v39 = (unint64_t)v18 >= (v38 & 0xFFFFFFFFFFFFFFFELL) + v22 + 2)
        : (v39 = 1),
          !v39))
    {
      v42 = (_WORD *)v22;
      v43 = v18;
      goto LABEL_54;
    }
    v40 = (v38 >> 1) + 1;
    if (v38 >= 0x3E)
    {
      v41 = v40 & 0xFFFFFFFFFFFFFFE0;
      v56 = (uint8x8_t *)&v18[1];
      v57 = (uint16x8_t *)(v22 + 32);
      v58 = v40 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v59 = *(uint8x16_t *)v56[-2].i8;
        v60 = vmovl_u8(*v56);
        v61 = vmovl_high_u8(*(uint8x16_t *)v56->i8);
        v57[-2] = vmovl_u8(*(uint8x8_t *)v59.i8);
        v57[-1] = vmovl_high_u8(v59);
        *v57 = v60;
        v57[1] = v61;
        v57 += 4;
        v56 += 4;
        v58 -= 32;
      }
      while (v58);
      if (v40 == v41)
        goto LABEL_59;
      if ((v40 & 0x18) == 0)
      {
        v43 = (int8x16_t *)((char *)v18 + v41);
        v42 = (_WORD *)(v22 + 2 * v41);
        do
        {
LABEL_54:
          v44 = v43->u8[0];
          v43 = (int8x16_t *)((char *)v43 + 1);
          *v42++ = v44;
        }
        while (v42 != v21);
        goto LABEL_59;
      }
    }
    else
    {
      v41 = 0;
    }
    v42 = (_WORD *)(v22 + 2 * (v40 & 0xFFFFFFFFFFFFFFF8));
    v43 = (int8x16_t *)((char *)v18 + (v40 & 0xFFFFFFFFFFFFFFF8));
    v62 = (uint8x8_t *)&v18->i8[v41];
    v63 = (uint16x8_t *)(v22 + 2 * v41);
    v64 = v41 - (v40 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v65 = *v62++;
      *v63++ = vmovl_u8(v65);
      v64 += 8;
    }
    while (v64);
    if (v40 == (v40 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_59;
    goto LABEL_54;
  }
  if (!(_DWORD)result)
  {
LABEL_14:
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_61;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_13:
    v9 = 0;
    goto LABEL_61;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  v9 = v66;
  if (v66)
  {
    v10 = (_BYTE *)(v66 + 20);
    *(_DWORD *)v66 = 2;
    *(_DWORD *)(v66 + 4) = v7;
    *(_QWORD *)(v66 + 8) = v66 + 20;
    *(_DWORD *)(v66 + 16) = 4;
    if (a3)
    {
      v11 = *(int8x16_t **)(a3 + 8);
      v12 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        if ((_DWORD)v12)
        {
          if ((_DWORD)v12 == 1)
            *v10 = v11->i8[0];
          else
            result = (uint64_t)memcpy((void *)(v66 + 20), v11, v12);
        }
        goto LABEL_57;
      }
      v13 = &v10[v12];
      if (v12 < 0x10)
      {
        v14 = v66 + 20;
      }
      else
      {
        v14 = (unint64_t)&v10[v12 & 0xFFFFFFF0];
        v15 = (unsigned __int128 *)(v66 + 20);
        do
        {
          v16 = (unsigned __int128)vld2q_s8(v11->i8);
          v11 += 2;
          *v15++ = v16;
        }
        while (v15 != (unsigned __int128 *)v14);
      }
      if ((_BYTE *)v14 == v13)
      {
LABEL_57:
        v10[*(unsigned int *)(a3 + 4)] = a4;
        goto LABEL_61;
      }
      v31 = v66 + v12;
      v32 = v66 + v12 - v14 + 20;
      if (v32 < 8
        || (v14 < (unint64_t)&v11[2].u64[1] + 2 * v31 + -2 * v14
          ? (v33 = (unint64_t)v11 >= v31 + 20)
          : (v33 = 1),
            !v33))
      {
        v35 = (_BYTE *)v14;
        v36 = v11;
        goto LABEL_41;
      }
      if (v32 >= 0x20)
      {
        v34 = v32 & 0xFFFFFFFFFFFFFFE0;
        v45 = v11 + 2;
        v46 = (int8x16_t *)(v14 + 16);
        v47 = v32 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = v45[-2];
          v48 = v45[-1];
          v51 = *v45;
          v50 = v45[1];
          v45 += 4;
          v46[-1] = vuzp1q_s8(v49, v48);
          *v46 = vuzp1q_s8(v51, v50);
          v46 += 2;
          v47 -= 32;
        }
        while (v47);
        if (v32 == v34)
          goto LABEL_57;
        if ((v32 & 0x18) == 0)
        {
          v36 = (int8x16_t *)((char *)v11 + 2 * v34);
          v35 = (_BYTE *)(v14 + v34);
          do
          {
LABEL_41:
            v37 = v36->i8[0];
            v36 = (int8x16_t *)((char *)v36 + 2);
            *v35++ = v37;
          }
          while (v35 != v13);
          goto LABEL_57;
        }
      }
      else
      {
        v34 = 0;
      }
      v35 = (_BYTE *)(v14 + (v32 & 0xFFFFFFFFFFFFFFF8));
      v36 = (int8x16_t *)((char *)v11 + 2 * (v32 & 0xFFFFFFFFFFFFFFF8));
      v52 = (int16x8_t *)((char *)v11 + 2 * v34);
      v53 = (int8x8_t *)(v14 + v34);
      v54 = v34 - (v32 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v55 = *v52++;
        *v53++ = vmovn_s16(v55);
        v54 += 8;
      }
      while (v54);
      if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_57;
      goto LABEL_41;
    }
    *v10 = a4;
  }
LABEL_61:
  *a5 = v9;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void (*)(char32_t,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &),void,char32_t,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecCJK::big5Decode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0,PAL::TextCodecCJK::SawError,unsigned char,WTF::StringBuilder &>::call(uint64_t a1, unsigned int a2, WTF::StringBuilder *this)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  __int16 v10;
  unsigned __int16 v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unint64_t v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _WORD *v33;
  __int16 v34;
  char v35;
  char **v36;
  char *v37;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(v4 + 18);
  *(_BYTE *)(v4 + 18) = 0;
  if (v5)
  {
    if (a2 - 64 >= 0x3F && (a2 + 95) > 0x5Du)
    {
      if ((a2 & 0x80) == 0)
      {
        *(_WORD *)(v4 + 19) = a2 | 0x100;
        return 1;
      }
      return 1;
    }
    if (a2 >= 0x7F)
      v10 = -98;
    else
      v10 = -64;
    v11 = a2 + v10 + 157 * v5 - 20253;
    switch((_WORD)a2 + v10 + 157 * (_WORD)v5)
    {
      case 21386:
        result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
        if (result)
        {
          v12 = (_DWORD *)result;
          result = 0;
          *v12 = 50593994;
        }
        return result;
      case 21388:
        result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
        if (result)
        {
          v30 = (_DWORD *)result;
          result = 0;
          *v30 = 51118282;
        }
        return result;
      case 21417:
        result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
        if (result)
        {
          v31 = (_DWORD *)result;
          result = 0;
          *v31 = 50594026;
        }
        return result;
      case 21419:
        result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
        if (result)
        {
          v32 = (_DWORD *)result;
          result = 0;
          *v32 = 51118314;
        }
        return result;
      default:
        v15 = atomic_load(&PAL::big5(void)::flag);
        if (v15 != -1)
        {
          v37 = &v35;
          v36 = &v37;
          std::__call_once(&PAL::big5(void)::flag, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::big5(void)::$_0 &&>>);
        }
        v16 = 18590;
        v17 = (unsigned __int16 *)PAL::big5(void)::array;
        do
        {
          v18 = v16 >> 1;
          v19 = &v17[4 * (v16 >> 1)];
          v21 = *v19;
          v20 = v19 + 4;
          v16 += ~(v16 >> 1);
          if (v21 < v11)
            v17 = v20;
          else
            v16 = v18;
        }
        while (v16);
        if (v17 == (unsigned __int16 *)(PAL::big5(void)::array + 148720))
          return 1;
        result = 1;
        if (*v17 > v11)
          return result;
        v22 = *((_DWORD *)v17 + 1);
        v23 = *((_DWORD *)this + 4);
        if (v22 < 0x10000)
          v24 = 1;
        else
          v24 = 2;
        v25 = __CFADD__(v23, v24);
        v26 = v23 + v24;
        if (v25)
          v27 = 0xFFFFFFFFLL;
        else
          v27 = v26;
        v28 = *((_QWORD *)this + 1);
        if (v28 || (v28 = *(_QWORD *)this) != 0)
        {
          if ((*(_BYTE *)(v28 + 16) & 4) != 0 && v22 < 0x100)
          {
LABEL_44:
            result = MEMORY[0x19AEA4824](this, v27);
            if (result)
            {
              v29 = (_BYTE *)result;
              result = 0;
              *v29 = v22;
            }
            return result;
          }
        }
        else if (v22 <= 0xFF)
        {
          goto LABEL_44;
        }
        result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
        if (result)
        {
          v33 = (_WORD *)result;
          if (HIWORD(v22))
          {
            v34 = v22 & 0x3FF | 0xDC00;
            v22 = (v22 >> 10) - 10304;
            *(_WORD *)(result + 2) = v34;
          }
          result = 0;
          *v33 = v22;
        }
        break;
    }
  }
  else
  {
    if ((a2 & 0x80) != 0)
    {
      if ((a2 + 127) <= 0x7Du)
      {
        result = 0;
        *(_BYTE *)(v4 + 18) = a2;
        return result;
      }
      return 1;
    }
    LOBYTE(v37) = a2;
    v7 = *((_QWORD *)this + 1);
    if (v7
      && ((v8 = *((unsigned int *)this + 4), v8 < *(_DWORD *)(v7 + 4))
        ? (v9 = *(_QWORD *)this == 0)
        : (v9 = 0),
          v9))
    {
      v13 = *(_DWORD *)(v7 + 16);
      v14 = *(_QWORD *)(v7 + 8);
      *((_DWORD *)this + 4) = v8 + 1;
      if ((v13 & 4) != 0)
        *(_BYTE *)(v14 + v8) = a2;
      else
        *(_WORD *)(v14 + 2 * v8) = a2;
      return 0;
    }
    else
    {
      WTF::StringBuilder::append();
      return 0;
    }
  }
  return result;
}

uint64_t PAL::TextCodecICU::registerCodecs(void (*a1)(char *, char *, _QWORD **))
{
  char **v2;
  char *v3;
  char *v4;
  uint64_t CanonicalName;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  int v10;

  v2 = &PAL::encodingNames;
  do
  {
    v3 = *v2;
    v4 = v2[1];
    v10 = 0;
    CanonicalName = ucnv_getCanonicalName();
    if (CanonicalName)
      goto LABEL_6;
    v6 = ucnv_open();
    result = ucnv_getName();
    CanonicalName = result;
    if (v6)
      result = ucnv_close();
    if (CanonicalName)
    {
LABEL_6:
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v8 = off_1E31F45A8;
      v8[1] = v3;
      v8[2] = v4;
      v8[3] = CanonicalName;
      v9 = v8;
      a1(v3, v4, &v9);
      result = (uint64_t)v9;
      v9 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v2 += 4;
  }
  return result;
}

void PAL::TextCodecICU::~TextCodecICU(PAL::TextCodecICU *this)
{
  WebCore *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_QWORD *)this + 5))
  {
    v2 = (WebCore *)ucnv_reset();
    v3 = *(uint64_t **)(WebCore::threadGlobalData(v2) + 16);
    v4 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    v5 = *v3;
    *v3 = v4;
    if (v5)
      ucnv_close();
    v6 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v6)
      ucnv_close();
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
}

void PAL::TextCodecICU::~TextCodecICU(PAL::TextCodecICU *this, void *a2)
{
  WebCore *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_QWORD *)this + 5))
  {
    v3 = (WebCore *)ucnv_reset();
    v4 = *(uint64_t **)(WebCore::threadGlobalData(v3) + 16);
    v5 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    v6 = *v4;
    *v4 = v5;
    if (v6)
      ucnv_close();
    v7 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v7)
      ucnv_close();
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  WTF::fastFree(this, a2);
}

const char *PAL::TextCodecICU::createICUConverter(const char **this)
{
  const char **v2;
  const char *Name;
  const char *result;
  const char *v5;
  const char *v6;

  v2 = *(const char ***)(WebCore::threadGlobalData((WebCore *)this) + 16);
  if (*v2 && (Name = (const char *)ucnv_getName(), !strcmp(this[3], Name)))
  {
    v6 = *v2;
    *v2 = 0;
    result = this[5];
    this[5] = v6;
    if (result)
      return (const char *)ucnv_close();
  }
  else
  {
    result = (const char *)ucnv_open();
    v5 = this[5];
    this[5] = result;
    if (v5)
    {
      ucnv_close();
      result = this[5];
    }
    if (result)
      return (const char *)ucnv_setFallback();
  }
  return result;
}

WTF::StringImpl *PAL::TextCodecICU::decode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;
  WTF::StringImpl *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD __src[4097];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v7 = v2;
  v9 = v8;
  __src[4096] = *MEMORY[0x1E0C80C00];
  result = *(WTF::StringImpl **)(v2 + 40);
  if (result
    || (PAL::TextCodecICU::createICUConverter((const char **)v7), (result = *(WTF::StringImpl **)(v7 + 40)) != 0))
  {
    v18 = result;
    v19 = v6;
    v20 = 0;
    v21 = 0;
    if (v6)
    {
      LODWORD(__src[0]) = 0;
      ucnv_setToUCallBack();
    }
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
    v22 = __src;
    ucnv_toUnicode();
    WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v14);
    v12 = v14;
    if (v14
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v14),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v14),
          (v12 = v14) != 0))
    {
      *(_DWORD *)v12 += 2;
    }
    *v9 = v12;
    v13 = v15;
    v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
    if (v19)
    {
      LODWORD(v22) = 0;
      __src[0] = 0;
      v14 = 0;
      return (WTF::StringImpl *)ucnv_setToUCallBack();
    }
  }
  else
  {
    *v4 = 1;
    *v9 = 0;
  }
  return result;
}

uint64_t PAL::TextCodecICU::encode(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int8x16_t *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int8x16_t *v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  BOOL v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF *v15;
  char *v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int16 v26;
  void *v27;
  WTF *v29;
  unsigned int v30;
  _BYTE v31[64];
  int8x16_t *v32;
  uint64_t v33;
  int v34;
  const char *__src[2050];
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v7 = v6;
  __src[2048] = *(const char **)MEMORY[0x1E0C80C00];
  if ((_DWORD)v4
    && ((v8 = v3, v9 = result, *(_QWORD *)(result + 40))
     || (result = (uint64_t)PAL::TextCodecICU::createICUConverter((const char **)result), *(_QWORD *)(v9 + 40))))
  {
    v10 = HIDWORD(v5);
    v11 = *(const char **)(v9 + 16);
    __src[0] = *(const char **)(v9 + 8);
    __src[1] = v11;
    if (v11)
      v12 = PAL::nonBackslashEncodings == 0;
    else
      v12 = 1;
    if (!v12
      && *(_QWORD *)PAL::nonBackslashEncodings
      && WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, __src))
    {
      WTF::makeStringByReplacingAll();
      v13 = (WTF::StringImpl *)__src[0];
      if (__src[0])
      {
        v8 = (int8x16_t *)*((_QWORD *)__src[0] + 1);
        LODWORD(v5) = *((_DWORD *)__src[0] + 1);
        v10 = ((unint64_t)*((unsigned int *)__src[0] + 4) >> 2) & 1;
      }
      else
      {
        v8 = 0;
        LODWORD(v5) = 0;
        LOBYTE(v10) = 1;
      }
    }
    else
    {
      v13 = 0;
    }
    v34 = 0;
    ucnv_setFromUCallBack();
    v29 = (WTF *)v31;
    v32 = 0;
    v33 = 0;
    if ((_BYTE)v10)
    {
      if (v5 <= 0x20)
      {
        v30 = v5;
        v15 = (WTF *)v31;
        v16 = v31;
      }
      else
      {
        if (v5 <= 0x29uLL)
          v14 = 41;
        else
          v14 = v5;
        if (v14 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x1945E78E8);
        }
        v15 = (WTF *)WTF::fastMalloc((WTF *)(2 * v14));
        v29 = v15;
        v30 = v5;
        if (v5 < 0x40)
        {
          v16 = (char *)v15;
        }
        else
        {
          v16 = (char *)v15 + 2 * (v5 & 0xFFFFFFC0);
          v17 = 0uLL;
          v18 = (char *)v15;
          do
          {
            v36.val[0] = *v8;
            v19 = v8[1];
            v37.val[0] = v8[2];
            v20 = v8[3];
            v8 += 4;
            v21 = v20;
            v37.val[1] = 0uLL;
            v38.val[0] = v19;
            v36.val[1] = 0uLL;
            v22 = v18;
            vst2q_s8(v22, v36);
            v22 += 32;
            v38.val[1] = 0uLL;
            vst2q_s8(v22, v38);
            v23 = v18 + 64;
            vst2q_s8(v23, v37);
            v24 = v18 + 96;
            vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
            v18 += 128;
          }
          while (v18 != v16);
        }
      }
      while (v16 != (char *)v15 + 2 * v5)
      {
        v26 = v8->u8[0];
        v8 = (int8x16_t *)((char *)v8 + 1);
        *(_WORD *)v16 = v26;
        v16 += 2;
      }
      v8 = (int8x16_t *)v29;
      v25 = v30;
    }
    else
    {
      v25 = v5;
    }
    v32 = v8;
    v33 = v25;
    *v7 = 0;
    v7[1] = 0;
    do
    {
      v34 = 0;
      ucnv_fromUnicode();
    }
    while (v34 == 15);
    result = (uint64_t)v29;
    if (v31 != (_BYTE *)v29 && v29 != 0)
      result = WTF::fastFree(v29, v27);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        return WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v27);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
  }
  return result;
}

uint64_t PAL::urlEscapedEntityCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, _DWORD *a7)
{
  int v8;
  char __str[32];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a6)
    return UCNV_FROM_U_CALLBACK_ESCAPE();
  *a7 = 0;
  if (a5 >> 11 == 27)
    v8 = 65533;
  else
    v8 = a5;
  snprintf(__str, 0x20uLL, "%%26%%23%u%%3B", v8);
  return ucnv_cbFromUWriteBytes();
}

__n128 WTF::Detail::CallableWrapper<PAL::TextCodecICU::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_0,std::unique_ptr<PAL::TextCodec>>::call@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  const char *v4;
  size_t v5;
  uint64_t v6;
  __n128 result;

  v4 = *(const char **)(a1 + 24);
  v5 = strlen(v4) + 1;
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v6 = off_1E31F3F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v6 + 8) = result;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = v5;
  *(_QWORD *)(v6 + 40) = 0;
  *a2 = v6;
  return result;
}

uint64_t PAL::TextCodecLatin1::decode@<X0>(WTF::StringImpl *this@<X2>, unsigned __int8 *a2@<X1>, _BYTE *a3@<X5>, WTF::StringImpl **a4@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned __int8 *v16;
  uint16x8_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint16x8_t *v20;
  uint16x8_t *v21;
  uint8x8_t *v22;
  unint64_t v23;
  uint8x16_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  __int16 v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  uint16x8_t *v31;
  __int16 *v32;
  unint64_t v33;
  uint16x8_t *v34;

  v33 = 0;
  if (!this)
  {
    v14 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
    {
LABEL_19:
      *a4 = v14;
      return result;
    }
LABEL_18:
    *(_DWORD *)v14 += 2;
    goto LABEL_19;
  }
  if ((unint64_t)this >> 32)
  {
    *a3 = 1;
    v14 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
      goto LABEL_19;
    goto LABEL_18;
  }
  result = WTF::StringImpl::createUninitialized(this, (uint64_t)&v33, (unsigned __int8 **)this);
  v9 = v33;
  v8 = (WTF::StringImpl *)v34;
  v10 = (unsigned __int8 *)this + (_QWORD)a2;
  v11 = ((unint64_t)this + (_QWORD)a2) & 0xFFFFFFFFFFFFFFF8;
  while (1)
  {
    while (1)
    {
      v12 = *a2;
      if ((char)*a2 < 0)
        break;
      if ((a2 & 7) == 0)
      {
        while ((unint64_t)a2 < v11)
        {
          if ((*(_QWORD *)a2 & 0x8080808080808080) != 0)
          {
            v12 = *(_QWORD *)a2;
            goto LABEL_14;
          }
          *(_QWORD *)v9 = *(_QWORD *)a2;
          v9 += 8;
          a2 += 8;
        }
        if (a2 == v10)
        {
LABEL_16:
          *a4 = v8;
          return result;
        }
        v12 = *a2;
        if ((char)*a2 < 0)
          break;
      }
      *(_BYTE *)v9++ = v12;
      if (++a2 >= v10)
        goto LABEL_16;
    }
LABEL_14:
    v13 = PAL::latin1ConversionTable[v12];
    if (v13 > 0xFF)
      break;
    *(_BYTE *)v9++ = v13;
    if (++a2 >= v10)
      goto LABEL_16;
  }
  v34 = 0;
  result = WTF::StringImpl::createUninitialized();
  v16 = (unsigned __int8 *)v33;
  v17 = v34;
  if (v33 >= v9)
  {
    v20 = v34;
  }
  else
  {
    v18 = v9 - v33;
    if (v9 - v33 < 0x20 || (unint64_t)v34 < v9 && v33 < (unint64_t)v34 + 2 * v9 + -2 * v33)
      goto LABEL_27;
    v19 = (unsigned __int8 *)(v33 + (v18 & 0xFFFFFFFFFFFFFFE0));
    v20 = (uint16x8_t *)((char *)v34 + 2 * (v18 & 0xFFFFFFFFFFFFFFE0));
    v21 = v34 + 2;
    v22 = (uint8x8_t *)(v33 + 16);
    v23 = v18 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v24 = *(uint8x16_t *)v22[-2].i8;
      v25 = vmovl_u8(*v22);
      v26 = vmovl_high_u8(*(uint8x16_t *)v22->i8);
      v21[-2] = vmovl_u8(*(uint8x8_t *)v24.i8);
      v21[-1] = vmovl_high_u8(v24);
      *v21 = v25;
      v21[1] = v26;
      v21 += 4;
      v22 += 4;
      v23 -= 32;
    }
    while (v23);
    v16 = v19;
    v17 = v20;
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_27:
      v20 = v17;
      do
      {
        v27 = *v16++;
        v20->i16[0] = v27;
        v20 = (uint16x8_t *)((char *)v20 + 2);
      }
      while (v16 != (unsigned __int8 *)v9);
    }
  }
  v29 = *a2;
  v28 = (char *)(a2 + 1);
  v20->i16[0] = PAL::latin1ConversionTable[v29];
  while (v28 < (char *)v10)
  {
    v31 = (uint16x8_t *)&v20->i16[1];
    v30 = *v28;
    if (*v28 < 0)
      goto LABEL_33;
    if ((v28 & 7) != 0)
      goto LABEL_45;
    if ((unint64_t)v28 < v11)
    {
      v32 = &v20->i16[4];
      do
      {
        if ((*(_QWORD *)v28 & 0x8080808080808080) != 0)
        {
          v30 = *(_QWORD *)v28;
          v31 = (uint16x8_t *)(v32 - 3);
          goto LABEL_33;
        }
        *(v32 - 3) = *(_QWORD *)v28;
        *(v32 - 2) = v28[1];
        *(v32 - 1) = v28[2];
        *v32 = v28[3];
        v32[1] = v28[4];
        v32[2] = v28[5];
        v32[3] = v28[6];
        v32[4] = v28[7];
        v28 += 8;
        v32 += 8;
      }
      while ((unint64_t)v28 < v11);
      v31 = (uint16x8_t *)(v32 - 3);
    }
    if (v28 == (char *)v10)
      break;
    v30 = *v28;
    if (*v28 < 0)
LABEL_33:
      v31->i16[0] = PAL::latin1ConversionTable[v30];
    else
LABEL_45:
      v31->i16[0] = v30;
    ++v28;
    v20 = v31;
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return WTF::StringImpl::destroy(v8, v15);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

uint64_t PAL::TextCodecReplacement::decode@<X0>(uint64_t result@<X0>, _BYTE *a2@<X5>, _QWORD *a3@<X8>)
{
  _DWORD *v3;

  *a2 = 1;
  if (*(_BYTE *)(result + 8))
  {
    v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v3 += 2;
    *a3 = v3;
  }
  else
  {
    *(_BYTE *)(result + 8) = 1;
    return WTF::String::String();
  }
  return result;
}

uint64_t PAL::TextCodecReplacement::encode@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return PAL::TextCodecUTF8::encodeUTF8(a1, a2, a3);
}

_QWORD *WTF::Detail::CallableWrapper<PAL::TextCodecReplacement::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_0,std::unique_ptr<PAL::TextCodec>>::call@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E31F4630;
  result[1] = 0;
  *a1 = result;
  return result;
}

uint64_t PAL::TextCodecSingleByte::encode@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t (*v23)(void *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  void *v40;
  unsigned __int16 *v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  unsigned int v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  char *v51;
  uint64_t v52;
  char v53;
  char **v54;
  char *v55;

  switch(*(_BYTE *)(a1 + 8))
  {
    case 0:
      v9 = atomic_load(&qword_1ECE7EB30);
      if (v9 != -1)
      {
        v55 = &v53;
        v54 = &v55;
        std::__call_once(&qword_1ECE7EB30, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::iso88593>(void)::{lambda(void)#1} &&>>);
      }
      v10 = _MergedGlobals_78;
      v11 = _MergedGlobals_78 + 484;
      goto LABEL_33;
    case 1:
      v15 = atomic_load(&qword_1ECE7EB40);
      if (v15 != -1)
      {
        v55 = &v53;
        v54 = &v55;
        std::__call_once(&qword_1ECE7EB40, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::iso88596>(void)::{lambda(void)#1} &&>>);
      }
      v10 = qword_1ECE7EB38;
      v11 = qword_1ECE7EB38 + 332;
      goto LABEL_33;
    case 2:
      v12 = atomic_load(&qword_1ECE7EB50);
      if (v12 != -1)
      {
        v55 = &v53;
        v54 = &v55;
        std::__call_once(&qword_1ECE7EB50, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::iso88597>(void)::{lambda(void)#1} &&>>);
      }
      v10 = qword_1ECE7EB48;
      v11 = qword_1ECE7EB48 + 500;
      goto LABEL_33;
    case 3:
      v16 = atomic_load(&qword_1ECE7EB60);
      if (v16 != -1)
      {
        v55 = &v53;
        v54 = &v55;
        std::__call_once(&qword_1ECE7EB60, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::iso88598>(void)::{lambda(void)#1} &&>>);
      }
      v10 = qword_1ECE7EB58;
      v11 = qword_1ECE7EB58 + 368;
      goto LABEL_33;
    case 4:
      v13 = atomic_load(&qword_1ECE7EB70);
      if (v13 != -1)
      {
        v55 = &v53;
        v54 = &v55;
        std::__call_once(&qword_1ECE7EB70, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::windows874>(void)::{lambda(void)#1} &&>>);
      }
      v10 = qword_1ECE7EB68;
      v11 = qword_1ECE7EB68 + 480;
      goto LABEL_33;
    case 5:
      v17 = atomic_load(&qword_1ECE7EB80);
      if (v17 != -1)
      {
        v55 = &v53;
        v54 = &v55;
        std::__call_once(&qword_1ECE7EB80, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::windows1253>(void)::{lambda(void)#1} &&>>);
      }
      v10 = qword_1ECE7EB78;
      v11 = qword_1ECE7EB78 + 500;
      goto LABEL_33;
    case 6:
      v18 = atomic_load(&qword_1ECE7EB90);
      if (v18 != -1)
      {
        v55 = &v53;
        v54 = &v55;
        std::__call_once(&qword_1ECE7EB90, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::windows1255>(void)::{lambda(void)#1} &&>>);
      }
      v10 = qword_1ECE7EB88;
      v11 = qword_1ECE7EB88 + 472;
      goto LABEL_33;
    case 7:
      v19 = atomic_load(&qword_1ECE7EBA0);
      if (v19 != -1)
      {
        v55 = &v53;
        v54 = &v55;
        std::__call_once(&qword_1ECE7EBA0, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::windows1257>(void)::{lambda(void)#1} &&>>);
      }
      v10 = qword_1ECE7EB98;
      v11 = qword_1ECE7EB98 + 504;
      goto LABEL_33;
    case 8:
      v20 = atomic_load(&qword_1ECE7EBB0);
      if (v20 != -1)
      {
        v55 = &v53;
        v54 = &v55;
        std::__call_once(&qword_1ECE7EBB0, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::ibm866>(void)::{lambda(void)#1} &&>>);
      }
      v10 = qword_1ECE7EBA8;
      goto LABEL_32;
    case 9:
      v14 = atomic_load(&qword_1ECE7EBC0);
      if (v14 != -1)
      {
        v55 = &v53;
        v54 = &v55;
        std::__call_once(&qword_1ECE7EBC0, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::koi8u>(void)::{lambda(void)#1} &&>>);
      }
      v10 = qword_1ECE7EBB8;
LABEL_32:
      v11 = v10 + 512;
LABEL_33:
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v22 = v21;
      v23 = PAL::entityUnencodableHandler;
      if (a4)
        v23 = PAL::urlEncodedEntityUnencodableHandler;
      *v21 = off_1E31F3C60;
      v21[1] = v23;
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      if ((_DWORD)a3)
      {
        v24 = WTF::fastMalloc((WTF *)a3);
        *(_DWORD *)(a5 + 8) = a3;
        *(_QWORD *)a5 = v24;
      }
      v25 = a3 & 0xFF00000000;
      if ((a3 & 0xFF00000000) != 0)
        v26 = &a2[a3];
      else
        v26 = &a2[2 * a3];
      if (v26 == a2)
        return (*(uint64_t (**)(_QWORD *))(*v22 + 8))(v22);
      v51 = v26;
      v52 = (v11 - v10) >> 2;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1945E880CLL);
  }
  do
  {
    while (1)
    {
      while (1)
      {
        if (v25)
        {
          v27 = *a2;
        }
        else
        {
          v27 = *(unsigned __int16 *)a2;
          if ((v27 & 0xF800) == 0xD800)
          {
            if (v26 - a2 != 2 && (v27 & 0x400) == 0)
            {
              v28 = *((unsigned __int16 *)a2 + 1);
              if ((v28 & 0xFC00) == 0xDC00)
              {
                v27 = (v28 + ((_DWORD)v27 << 10) - 56613888);
LABEL_73:
                LOWORD(v55) = 0;
                (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v22 + 16))(v22, v27, a5);
                if (!v25)
                  goto LABEL_81;
                goto LABEL_42;
              }
            }
            goto LABEL_65;
          }
        }
        if (v27 <= 0x7F)
          break;
LABEL_65:
        if (v11 == v10)
          goto LABEL_73;
        v41 = (unsigned __int16 *)v10;
        v42 = v52;
        do
        {
          v43 = v42 >> 1;
          v44 = &v41[2 * (v42 >> 1)];
          v46 = *v44;
          v45 = v44 + 2;
          v42 += ~(v42 >> 1);
          if (v27 > v46)
            v41 = v45;
          else
            v42 = v43;
        }
        while (v42);
        if (v41 == (unsigned __int16 *)v11 || v27 < *v41)
          goto LABEL_73;
        v47 = *((unsigned __int8 *)v41 + 2);
        LOWORD(v55) = v47 | 0x100;
        v48 = *(unsigned int *)(a5 + 12);
        if ((_DWORD)v48 == *(_DWORD *)(a5 + 8))
        {
          *(_BYTE *)(*(_QWORD *)a5 + (*(_DWORD *)(a5 + 12))++) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a5, (WTF *)(v48 + 1), (unint64_t)&v55);
          if (!v25)
            goto LABEL_81;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)a5 + v48) = v47;
          ++*(_DWORD *)(a5 + 12);
          if (!v25)
            goto LABEL_81;
        }
LABEL_42:
        if (++a2 == v26)
          return (*(uint64_t (**)(_QWORD *))(*v22 + 8))(v22);
      }
      v29 = *(unsigned int *)(a5 + 12);
      if ((_DWORD)v29 != *(_DWORD *)(a5 + 8))
      {
        *(_BYTE *)(*(_QWORD *)a5 + v29) = v27;
        ++*(_DWORD *)(a5 + 12);
        if (!v25)
          goto LABEL_81;
        goto LABEL_42;
      }
      v30 = a2;
      v31 = v25;
      v32 = v22;
      v33 = v10;
      v34 = v29 + (v29 >> 2);
      if (v34 >= 0x10)
        v35 = v34 + 1;
      else
        v35 = 16;
      if (v35 <= v29 + 1)
        v36 = v29 + 1;
      else
        v36 = v35;
      if (HIDWORD(v36))
      {
        __break(0xC471u);
        JUMPOUT(0x1945E8814);
      }
      v37 = v11;
      v38 = *(char **)a5;
      v39 = (void *)WTF::fastMalloc((WTF *)v36);
      *(_DWORD *)(a5 + 8) = v36;
      *(_QWORD *)a5 = v39;
      memcpy(v39, v38, v29);
      v10 = v33;
      v22 = v32;
      v25 = v31;
      a2 = v30;
      if (v38)
      {
        if (*(char **)a5 == v38)
        {
          *(_QWORD *)a5 = 0;
          *(_DWORD *)(a5 + 8) = 0;
        }
        WTF::fastFree((WTF *)v38, v40);
      }
      *(_BYTE *)(*(_QWORD *)a5 + (*(_DWORD *)(a5 + 12))++) = v27;
      v11 = v37;
      v26 = v51;
      if (v25)
        goto LABEL_42;
LABEL_81:
      if (v26 - a2 != 2)
        break;
      a2 += 2;
      if (a2 == v26)
        return (*(uint64_t (**)(_QWORD *))(*v22 + 8))(v22);
    }
    v49 = 1;
    if ((*(_WORD *)a2 & 0xFC00) == 0xD800)
    {
      v49 = 1;
      if ((*((_WORD *)a2 + 1) & 0xFC00) == 0xDC00)
        v49 = 2;
    }
    a2 += 2 * v49;
  }
  while (a2 != v26);
  return (*(uint64_t (**)(_QWORD *))(*v22 + 8))(v22);
}

uint64_t PAL::TextCodecSingleByte::decode@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W4>, _BYTE *a5@<X5>, WTF::StringImpl **a6@<X8>)
{
  unint64_t v7;
  __int16 (*v12)[128];
  WTF::StringImpl *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t result;
  _QWORD v18[3];
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  char v22;

  v7 = *(char *)(a1 + 8);
  if (v7 >= 0xA)
  {
    result = 248;
    __break(0xC471u);
    return result;
  }
  v12 = off_1E31F4870[v7];
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v19);
  v18[0] = &v19;
  v18[1] = v12;
  v18[2] = a5;
  if (a4)
  {
    for (; a3; --a3)
    {
      PAL::decode(std::array<char16_t,128ul> const&,std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()((uint64_t)v18, *a2);
      if (*a5)
        break;
      ++a2;
    }
  }
  else
  {
    for (; a3; --a3)
    {
      v14 = *a2++;
      PAL::decode(std::array<char16_t,128ul> const&,std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()((uint64_t)v18, v14);
    }
  }
  v15 = v19;
  if (v19
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v19),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v19),
        (v15 = v19) != 0))
  {
    *(_DWORD *)v15 += 2;
  }
  *a6 = v15;
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v13);
      result = (uint64_t)v19;
      v19 = 0;
      if (!result)
        return result;
      goto LABEL_18;
    }
    *(_DWORD *)v16 -= 2;
  }
  result = (uint64_t)v19;
  v19 = 0;
  if (!result)
    return result;
LABEL_18:
  if (*(_DWORD *)result == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t PAL::TextCodecSingleByte::registerEncodingNames(void (*a1)(const char *, uint64_t, const char *, uint64_t))
{
  a1("ISO-8859-3", 11, "ISO-8859-3", 11);
  a1("csisolatin3", 12, "ISO-8859-3", 11);
  a1("iso-ir-109", 11, "ISO-8859-3", 11);
  a1("iso8859-3", 10, "ISO-8859-3", 11);
  a1("iso88593", 9, "ISO-8859-3", 11);
  a1("iso_8859-3", 11, "ISO-8859-3", 11);
  a1("iso_8859-3:1988", 16, "ISO-8859-3", 11);
  a1("l3", 3, "ISO-8859-3", 11);
  a1("latin3", 7, "ISO-8859-3", 11);
  a1("ISO-8859-6", 11, "ISO-8859-6", 11);
  a1("arabic", 7, "ISO-8859-6", 11);
  a1("asmo-708", 9, "ISO-8859-6", 11);
  a1("csiso88596e", 12, "ISO-8859-6", 11);
  a1("csiso88596i", 12, "ISO-8859-6", 11);
  a1("csisolatinarabic", 17, "ISO-8859-6", 11);
  a1("ecma-114", 9, "ISO-8859-6", 11);
  a1("iso-8859-6-e", 13, "ISO-8859-6", 11);
  a1("iso-8859-6-i", 13, "ISO-8859-6", 11);
  a1("iso-ir-127", 11, "ISO-8859-6", 11);
  a1("iso8859-6", 10, "ISO-8859-6", 11);
  a1("iso88596", 9, "ISO-8859-6", 11);
  a1("iso_8859-6", 11, "ISO-8859-6", 11);
  a1("iso_8859-6:1987", 16, "ISO-8859-6", 11);
  a1("ISO-8859-7", 11, "ISO-8859-7", 11);
  a1("csisolatingreek", 16, "ISO-8859-7", 11);
  a1("ecma-118", 9, "ISO-8859-7", 11);
  a1("elot_928", 9, "ISO-8859-7", 11);
  a1("greek", 6, "ISO-8859-7", 11);
  a1("greek8", 7, "ISO-8859-7", 11);
  a1("iso-ir-126", 11, "ISO-8859-7", 11);
  a1("iso8859-7", 10, "ISO-8859-7", 11);
  a1("iso88597", 9, "ISO-8859-7", 11);
  a1("iso_8859-7", 11, "ISO-8859-7", 11);
  a1("iso_8859-7:1987", 16, "ISO-8859-7", 11);
  a1("sun_eu_greek", 13, "ISO-8859-7", 11);
  a1("ISO-8859-8", 11, "ISO-8859-8", 11);
  a1("csiso88598e", 12, "ISO-8859-8", 11);
  a1("csisolatinhebrew", 17, "ISO-8859-8", 11);
  a1("hebrew", 7, "ISO-8859-8", 11);
  a1("iso-8859-8-e", 13, "ISO-8859-8", 11);
  a1("iso-ir-138", 11, "ISO-8859-8", 11);
  a1("iso8859-8", 10, "ISO-8859-8", 11);
  a1("iso88598", 9, "ISO-8859-8", 11);
  a1("iso_8859-8", 11, "ISO-8859-8", 11);
  a1("iso_8859-8:1988", 16, "ISO-8859-8", 11);
  a1("visual", 7, "ISO-8859-8", 11);
  a1("ISO-8859-8-I", 13, "ISO-8859-8-I", 13);
  a1("csiso88598i", 12, "ISO-8859-8-I", 13);
  a1("logical", 8, "ISO-8859-8-I", 13);
  a1("windows-874", 12, "windows-874", 12);
  a1("dos-874", 8, "windows-874", 12);
  a1("iso-8859-11", 12, "windows-874", 12);
  a1("iso8859-11", 11, "windows-874", 12);
  a1("iso885911", 10, "windows-874", 12);
  a1("tis-620", 8, "windows-874", 12);
  a1("windows-1253", 13, "windows-1253", 13);
  a1("cp1253", 7, "windows-1253", 13);
  a1("x-cp1253", 9, "windows-1253", 13);
  a1("windows-1255", 13, "windows-1255", 13);
  a1("cp1255", 7, "windows-1255", 13);
  a1("x-cp1255", 9, "windows-1255", 13);
  a1("windows-1257", 13, "windows-1257", 13);
  a1("cp1257", 7, "windows-1257", 13);
  a1("x-cp1257", 9, "windows-1257", 13);
  a1("KOI8-U", 7, "KOI8-U", 7);
  a1("koi8-ru", 8, "KOI8-U", 7);
  a1("IBM866", 7, "IBM866", 7);
  a1("866", 4, "IBM866", 7);
  a1("cp866", 6, "IBM866", 7);
  return ((uint64_t (*)(const char *, uint64_t, const char *, uint64_t))a1)("csibm866", 9, "IBM866", 7);
}

uint64_t PAL::TextCodecSingleByte::registerCodecs(void (*a1)(const char *, uint64_t, _QWORD **))
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t result;
  _QWORD *v24;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E31F46C8;
  v24 = v2;
  a1("ISO-8859-3", 11, &v24);
  v3 = v24;
  v24 = 0;
  if (v3)
    (*(void (**)(_QWORD *))(*v3 + 8))(v3);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E31F46F0;
  v24 = v4;
  a1("ISO-8859-6", 11, &v24);
  v5 = v24;
  v24 = 0;
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E31F4718;
  v24 = v6;
  a1("ISO-8859-7", 11, &v24);
  v7 = v24;
  v24 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E31F4740;
  v24 = v8;
  a1("ISO-8859-8", 11, &v24);
  v9 = v24;
  v24 = 0;
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E31F4768;
  v24 = v10;
  a1("ISO-8859-8-I", 13, &v24);
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = off_1E31F4790;
  v24 = v12;
  a1("windows-874", 12, &v24);
  v13 = v24;
  v24 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = off_1E31F47B8;
  v24 = v14;
  a1("windows-1253", 13, &v24);
  v15 = v24;
  v24 = 0;
  if (v15)
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = off_1E31F47E0;
  v24 = v16;
  a1("windows-1255", 13, &v24);
  v17 = v24;
  v24 = 0;
  if (v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v18 = off_1E31F4808;
  v24 = v18;
  a1("windows-1257", 13, &v24);
  v19 = v24;
  v24 = 0;
  if (v19)
    (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v20 = off_1E31F4830;
  v24 = v20;
  a1("KOI8-U", 7, &v24);
  v21 = v24;
  v24 = 0;
  if (v21)
    (*(void (**)(_QWORD *))(*v21 + 8))(v21);
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v22 = off_1E31F4858;
  v24 = v22;
  a1("IBM866", 7, &v24);
  result = (uint64_t)v24;
  v24 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int16 *std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::iso88593>(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int16 *result;

  v0 = operator new[]();
  v1 = v0;
  for (i = 0; i != 480; i += 8)
  {
    v3 = v0 + i;
    *(_WORD *)v3 = 0;
    *(_WORD *)(v3 + 4) = 0;
    *(_BYTE *)(v3 + 2) = 0;
    *(_BYTE *)(v3 + 6) = 0;
  }
  v4 = 0;
  v5 = 0;
  *(_WORD *)(v0 + 480) = 0;
  *(_BYTE *)(v0 + 482) = 0;
  do
  {
    v6 = PAL::iso88593[v4];
    if (v6 != 65533)
    {
      v7 = v0 + 4 * v5++;
      *(_WORD *)v7 = v6;
      *(_BYTE *)(v7 + 2) = v4 ^ 0x80;
    }
    ++v4;
  }
  while (v4 != 128);
  result = std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *,false>((unsigned __int16 *)v0, (unsigned __int16 *)(v0 + 484), 12, 1);
  _MergedGlobals_78 = v1;
  return result;
}

unsigned __int16 *std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *,false>(unsigned __int16 *result, unsigned __int16 *a2, uint64_t a3, char a4)
{
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int16 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  unsigned __int16 *v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unsigned int v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  char v45;
  unsigned int v46;
  unsigned __int16 *v47;
  char v48;
  char v49;
  unsigned int v50;
  char v51;
  unint64_t v52;
  unsigned __int16 *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  char *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  char v60;
  unsigned int v61;
  unsigned __int16 *v62;
  char v63;
  char v64;
  unsigned int v65;
  char v66;
  unsigned int v67;
  unsigned int v68;
  unsigned __int16 *v69;
  unsigned __int16 *v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  char v73;
  char v74;
  unsigned __int16 *v75;
  unsigned int v76;
  unsigned __int16 *v77;
  char v78;
  unsigned __int16 v79;
  char v80;
  uint64_t v81;
  unsigned int v82;
  unsigned __int16 *v83;
  unsigned __int16 *v84;
  unsigned int v85;
  unsigned __int16 *v86;
  unsigned __int16 *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned __int16 v90;
  unsigned __int16 *v91;
  char v92;
  unsigned __int16 *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned __int16 *v96;
  BOOL v97;
  unsigned __int16 *v98;
  unsigned int v99;
  unsigned __int16 *v100;
  unsigned __int16 *v101;
  unsigned int v102;
  unsigned __int16 v103;
  unsigned __int16 v104;
  char v105;
  unsigned __int16 *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  char v111;
  unsigned int v112;
  char *v113;
  unsigned int v114;
  unsigned int v115;
  char v116;
  unsigned int v117;
  unsigned int v118;
  char v119;
  char v120;
  unsigned int v121;
  char v122;
  unsigned int v123;
  char v124;
  unsigned __int16 *v125;
  BOOL v127;
  uint64_t v128;
  unsigned __int16 *v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  char *v136;
  int64_t v137;
  int64_t v138;
  BOOL v139;
  uint64_t v140;
  unsigned __int16 *v141;
  unsigned int v142;
  unsigned int v143;
  BOOL v144;
  unsigned __int16 *v145;
  int v146;
  unsigned int v147;
  BOOL v148;
  unsigned __int16 *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  int64_t v154;
  unsigned __int16 *v155;
  unsigned int v156;
  unsigned int v157;
  BOOL v158;
  unsigned __int16 *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unsigned __int16 *v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  unsigned __int16 *v167;
  char v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  int v176;
  _BYTE *v177;
  uint64_t v178;
  unsigned __int16 *v179;
  char v180;
  char v181;
  char v182;
  unsigned int v183;
  char v184;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 2;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v109 = *(a2 - 2);
        v110 = *v9;
        if (v109 < v110)
        {
          *v9 = v109;
          *(a2 - 2) = v110;
          v111 = *((_BYTE *)v9 + 2);
          *((_BYTE *)v9 + 2) = *((_BYTE *)a2 - 2);
          *((_BYTE *)a2 - 2) = v111;
        }
        return result;
      case 3:
        v82 = v9[2];
        LODWORD(v83) = *v9;
        v112 = *(a2 - 2);
        if (v82 < v83)
        {
          if (v112 >= v82)
            goto LABEL_199;
          v113 = (char *)(v9 + 1);
          *v9 = v112;
          goto LABEL_201;
        }
        if (v112 < v82)
        {
          v9[2] = v112;
          *(a2 - 2) = v82;
          v8 = v9 + 3;
          v168 = *((_BYTE *)v9 + 6);
          *((_BYTE *)v9 + 6) = *((_BYTE *)a2 - 2);
          *((_BYTE *)a2 - 2) = v168;
          v169 = v9[2];
          v170 = *v9;
          if (v169 < v170)
          {
            *v9 = v169;
            v9[2] = v170;
            v113 = (char *)(v9 + 1);
            goto LABEL_202;
          }
        }
        return result;
      case 4:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5:
        result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *>(v9, v9 + 2, v9 + 4, v9 + 6);
        v114 = *(a2 - 2);
        v115 = v9[6];
        if (v114 < v115)
        {
          v9[6] = v114;
          *(a2 - 2) = v115;
          v116 = *((_BYTE *)v9 + 14);
          *((_BYTE *)v9 + 14) = *((_BYTE *)a2 - 2);
          *((_BYTE *)a2 - 2) = v116;
          v117 = v9[6];
          v118 = v9[4];
          if (v117 < v118)
          {
            v9[4] = v117;
            v9[6] = v118;
            v119 = *((_BYTE *)v9 + 10);
            v120 = *((_BYTE *)v9 + 14);
            *((_BYTE *)v9 + 10) = v120;
            *((_BYTE *)v9 + 14) = v119;
            v121 = v9[2];
            if (v117 < v121)
            {
              v9[2] = v117;
              v9[4] = v121;
              v122 = *((_BYTE *)v9 + 6);
              *((_BYTE *)v9 + 6) = v120;
              *((_BYTE *)v9 + 10) = v122;
              v123 = *v9;
              if (v117 < v123)
              {
                *v9 = v117;
                v9[2] = v123;
                v124 = *((_BYTE *)v9 + 2);
                *((_BYTE *)v9 + 2) = v120;
                *((_BYTE *)v9 + 6) = v124;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 95)
        {
          v125 = v9 + 2;
          v127 = v9 == a2 || v125 == a2;
          if ((a4 & 1) != 0)
          {
            if (v127)
              return result;
            v128 = 0;
            v129 = v9;
            while (1)
            {
              v131 = v129[2];
              v132 = *v129;
              v129 = v125;
              if (v131 < v132)
              {
                v133 = *(_DWORD *)v125;
                v134 = (unsigned __int16)*(_DWORD *)v129;
                v135 = v128;
                do
                {
                  v136 = (char *)v9 + v135;
                  *((_WORD *)v136 + 2) = v132;
                  v136[6] = *((_BYTE *)v9 + v135 + 2);
                  if (!v135)
                  {
                    v130 = (uint64_t)v9;
                    goto LABEL_137;
                  }
                  v132 = *((unsigned __int16 *)v136 - 2);
                  v135 -= 4;
                }
                while (v132 > v134);
                v130 = (uint64_t)v9 + v135 + 4;
LABEL_137:
                *(_WORD *)v130 = v134;
                *(_BYTE *)(v130 + 2) = BYTE2(v133);
              }
              v125 = v129 + 2;
              v128 += 4;
              if (v129 + 2 == a2)
                return result;
            }
          }
          if (v127)
            return result;
          v171 = 0;
          v83 = v9 + 3;
          v172 = -2;
          v173 = 1;
          while (1)
          {
            v174 = 2 * v171;
            v171 = v173;
            v175 = v9[v174];
            if (*v125 < v175)
            {
              v176 = *(_DWORD *)v125;
              v82 = (unsigned __int16)*(_DWORD *)v125;
              v177 = v83;
              v178 = v172;
              v179 = v83;
              do
              {
                *((_WORD *)v177 - 1) = v175;
                v180 = *((_BYTE *)v179 - 4);
                v179 -= 2;
                *v177 = v180;
                v144 = __CFADD__(v178++, 1);
                if (v144)
                  goto LABEL_198;
                v175 = *((unsigned __int16 *)v177 - 5);
                v177 = v179;
              }
              while (v175 > v82);
              *(v179 - 1) = v82;
              *(_BYTE *)v179 = BYTE2(v176);
            }
            v173 = v171 + 1;
            v125 = &v9[2 * v171 + 2];
            --v172;
            v83 += 2;
            if (v125 == a2)
              return result;
          }
        }
        if (a3)
        {
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[2 * ((unint64_t)v11 >> 1)];
          v14 = *(a2 - 2);
          if ((unint64_t)v10 >= 0x201)
          {
            v15 = *v13;
            v16 = *v9;
            if (v15 >= v16)
            {
              if (v14 >= v15)
                goto LABEL_23;
              *v13 = v14;
              *(a2 - 2) = v15;
              v21 = &v9[2 * v12];
              v23 = *((_BYTE *)v21 + 2);
              v22 = v21 + 1;
              *(_BYTE *)v22 = *((_BYTE *)a2 - 2);
              *((_BYTE *)a2 - 2) = v23;
              v24 = *v13;
              v25 = *v9;
              if (v24 >= v25)
              {
LABEL_23:
                v33 = v12 - 1;
                v34 = &v9[2 * v12 - 2];
                v35 = *v34;
                v36 = v9[2];
                v37 = *(a2 - 4);
                if (v35 >= v36)
                {
                  if (v37 >= v35)
                    goto LABEL_36;
                  *v34 = v37;
                  *(a2 - 4) = v35;
                  v39 = &v9[2 * v33];
                  v41 = *((_BYTE *)v39 + 2);
                  v40 = v39 + 1;
                  *(_BYTE *)v40 = *((_BYTE *)a2 - 6);
                  *((_BYTE *)a2 - 6) = v41;
                  v42 = *v34;
                  v43 = v9[2];
                  if (v42 >= v43)
                  {
LABEL_36:
                    v52 = v12 + 1;
                    v53 = &v9[2 * v12 + 2];
                    v54 = *v53;
                    v55 = v9[4];
                    v56 = *(a2 - 6);
                    if (v54 >= v55)
                    {
                      if (v56 >= v54)
                        goto LABEL_46;
                      *v53 = v56;
                      *(a2 - 6) = v54;
                      v58 = &v9[2 * v52];
                      v60 = *((_BYTE *)v58 + 2);
                      v59 = v58 + 1;
                      *(_BYTE *)v59 = *((_BYTE *)a2 - 10);
                      *((_BYTE *)a2 - 10) = v60;
                      v54 = *v53;
                      v61 = v9[4];
                      if (v54 >= v61)
                      {
LABEL_46:
                        v67 = *v13;
                        v68 = *v34;
                        if (v67 < v68)
                          goto LABEL_47;
                        goto LABEL_52;
                      }
                      v9[4] = v54;
                      *v53 = v61;
                      v57 = (char *)(v9 + 5);
                    }
                    else
                    {
                      if (v56 >= v54)
                      {
                        v9[4] = v54;
                        v62 = &v9[2 * v52];
                        v63 = *((_BYTE *)v62 + 2);
                        v57 = (char *)(v62 + 1);
                        *v53 = v55;
                        v64 = *((_BYTE *)v9 + 10);
                        *((_BYTE *)v9 + 10) = v63;
                        *v57 = v64;
                        v65 = *(a2 - 6);
                        if (v65 >= v55)
                        {
                          v54 = v55;
                          v67 = *v13;
                          v68 = *v34;
                          if (v67 < v68)
                          {
LABEL_47:
                            v69 = &v9[2 * v33 + 1];
                            if (v54 >= v67)
                            {
                              *v34 = v67;
                              *v13 = v68;
                              v71 = &v9[2 * v12];
                              v73 = *((_BYTE *)v71 + 2);
                              v72 = v71 + 1;
                              v74 = *(_BYTE *)v69;
                              *(_BYTE *)v69 = v73;
                              *(_BYTE *)v72 = v74;
                              if (v54 >= v68)
                              {
                                LOWORD(v67) = v68;
                                goto LABEL_56;
                              }
                              *v13 = v54;
                              *v53 = v68;
                              v70 = &v9[2 * v52 + 1];
                              v69 = v72;
                            }
                            else
                            {
                              *v34 = v54;
                              *v53 = v68;
                              v70 = &v9[2 * v52 + 1];
                            }
                            goto LABEL_55;
                          }
LABEL_52:
                          if (v54 >= v67)
                          {
LABEL_56:
                            v79 = *v9;
                            *v9 = v67;
                            v20 = v9 + 1;
                            *v13 = v79;
                            v27 = &v9[2 * v12 + 1];
                            goto LABEL_57;
                          }
                          *v13 = v54;
                          v75 = &v9[2 * v12];
                          v76 = *((unsigned __int8 *)v75 + 2);
                          v70 = v75 + 1;
                          result = (unsigned __int16 *)v76;
                          *v53 = v67;
                          v77 = &v9[2 * v52];
                          *(_BYTE *)v70 = *((_BYTE *)v77 + 2);
                          *((_BYTE *)v77 + 2) = v76;
                          if (v54 >= v68)
                          {
                            LOWORD(v67) = v54;
                            goto LABEL_56;
                          }
                          *v34 = v54;
                          *v13 = v68;
                          v69 = &v9[2 * v33 + 1];
LABEL_55:
                          v78 = *(_BYTE *)v69;
                          *(_BYTE *)v69 = *(_BYTE *)v70;
                          *(_BYTE *)v70 = v78;
                          LOWORD(v67) = *v13;
                          goto LABEL_56;
                        }
                        *v53 = v65;
                      }
                      else
                      {
                        v57 = (char *)(v9 + 5);
                        v9[4] = v56;
                      }
                      *(a2 - 6) = v55;
                      v59 = a2 - 5;
                    }
                    v66 = *v57;
                    *v57 = *(_BYTE *)v59;
                    *(_BYTE *)v59 = v66;
                    v54 = *v53;
                    goto LABEL_46;
                  }
                  v9[2] = v42;
                  *v34 = v43;
                  v38 = (char *)(v9 + 3);
                }
                else
                {
                  if (v37 >= v35)
                  {
                    v9[2] = v35;
                    v47 = &v9[2 * v33];
                    v48 = *((_BYTE *)v47 + 2);
                    v38 = (char *)(v47 + 1);
                    *v34 = v36;
                    v49 = *((_BYTE *)v9 + 6);
                    *((_BYTE *)v9 + 6) = v48;
                    *v38 = v49;
                    v50 = *(a2 - 4);
                    if (v50 >= v36)
                      goto LABEL_36;
                    *v34 = v50;
                  }
                  else
                  {
                    v38 = (char *)(v9 + 3);
                    v9[2] = v37;
                  }
                  *(a2 - 4) = v36;
                  v40 = a2 - 3;
                }
                v51 = *v38;
                *v38 = *(_BYTE *)v40;
                *(_BYTE *)v40 = v51;
                goto LABEL_36;
              }
              *v9 = v24;
              v17 = v9 + 1;
              *v13 = v25;
            }
            else
            {
              if (v14 >= v15)
              {
                *v9 = v15;
                *v13 = v16;
                v30 = *((_BYTE *)v9 + 2);
                v17 = &v9[2 * v12 + 1];
                *((_BYTE *)v9 + 2) = *(_BYTE *)v17;
                *(_BYTE *)v17 = v30;
                v31 = *(a2 - 2);
                if (v31 >= v16)
                  goto LABEL_23;
                *v13 = v31;
              }
              else
              {
                v17 = v9 + 1;
                *v9 = v14;
              }
              *(a2 - 2) = v16;
              v22 = a2 - 1;
            }
            v32 = *(_BYTE *)v17;
            *(_BYTE *)v17 = *(_BYTE *)v22;
            *(_BYTE *)v22 = v32;
            goto LABEL_23;
          }
          v18 = *v9;
          v19 = *v13;
          if (v18 >= v19)
          {
            if (v14 < v18)
            {
              *v9 = v14;
              *(a2 - 2) = v18;
              v27 = v9 + 1;
              v26 = *((_BYTE *)v9 + 2);
              *((_BYTE *)v9 + 2) = *((_BYTE *)a2 - 2);
              *((_BYTE *)a2 - 2) = v26;
              v28 = *v9;
              v29 = *v13;
              if (v28 < v29)
              {
                *v13 = v28;
                *v9 = v29;
                v20 = &v9[2 * v12 + 1];
LABEL_57:
                v80 = *(_BYTE *)v20;
                *(_BYTE *)v20 = *(_BYTE *)v27;
                *(_BYTE *)v27 = v80;
              }
            }
          }
          else
          {
            v20 = &v9[2 * v12 + 1];
            if (v14 < v18)
            {
              *v13 = v14;
              *(a2 - 2) = v19;
LABEL_31:
              v27 = a2 - 1;
              goto LABEL_57;
            }
            *v13 = v18;
            v44 = *((_BYTE *)v9 + 2);
            *v9 = v19;
            v45 = *(_BYTE *)v20;
            *(_BYTE *)v20 = v44;
            *((_BYTE *)v9 + 2) = v45;
            v46 = *(a2 - 2);
            if (v46 < v19)
            {
              *v9 = v46;
              *(a2 - 2) = v19;
              v20 = v9 + 1;
              goto LABEL_31;
            }
          }
          --a3;
          if ((a4 & 1) == 0 && *(v9 - 2) >= *v9)
          {
            v82 = *(_DWORD *)v9;
            LODWORD(v83) = (unsigned __int16)*(_DWORD *)v9;
            if (*(a2 - 2) <= v83)
            {
              v100 = v9 + 2;
              do
              {
                v9 = v100;
                if (v100 >= a2)
                  break;
                v100 += 2;
              }
              while (*v9 <= v83);
            }
            else
            {
              v98 = v9 + 2;
              do
              {
                if (v98 == a2)
                  goto LABEL_198;
                v99 = *v98;
                v98 += 2;
              }
              while (v99 <= v83);
              v9 = v98 - 2;
            }
            v101 = a2;
            if (v9 < a2)
            {
              v101 = a2;
              while (v101 != v7)
              {
                v102 = *(v101 - 2);
                v101 -= 2;
                if (v102 <= v83)
                  goto LABEL_101;
              }
              goto LABEL_198;
            }
LABEL_101:
            if (v9 < v101)
            {
              v103 = *v9;
              v104 = *v101;
              do
              {
                *v9 = v104;
                *v101 = v103;
                v105 = *((_BYTE *)v9 + 2);
                *((_BYTE *)v9 + 2) = *((_BYTE *)v101 + 2);
                *((_BYTE *)v101 + 2) = v105;
                v106 = v9 + 2;
                do
                {
                  if (v106 == a2)
                    goto LABEL_198;
                  v107 = *v106;
                  v106 += 2;
                  v103 = v107;
                }
                while (v107 <= v83);
                v9 = v106 - 2;
                do
                {
                  if (v101 == v7)
                    goto LABEL_198;
                  v108 = *(v101 - 2);
                  v101 -= 2;
                  v104 = v108;
                }
                while (v108 > v83);
              }
              while (v9 < v101);
            }
            if (v9 - 2 != v7)
            {
              *v7 = *(v9 - 2);
              *((_BYTE *)v7 + 2) = *((_BYTE *)v9 - 2);
            }
            a4 = 0;
            *(v9 - 2) = (unsigned __int16)v83;
            *((_BYTE *)v9 - 2) = BYTE2(v82);
            continue;
          }
          v81 = 0;
          v82 = *(_DWORD *)v9;
          LODWORD(v83) = (unsigned __int16)*(_DWORD *)v9;
          do
          {
            v84 = &v9[v81 + 2];
            if (v84 == a2)
              goto LABEL_198;
            v85 = *v84;
            v81 += 2;
          }
          while (v85 < v83);
          v86 = &v9[v81];
          v87 = a2;
          if (v81 != 2)
          {
            while (v87 != v9)
            {
              v88 = *(v87 - 2);
              v87 -= 2;
              if (v88 < v83)
                goto LABEL_70;
            }
LABEL_198:
            __break(1u);
LABEL_199:
            *v7 = v82;
            v113 = (char *)(v7 + 3);
            v181 = *((_BYTE *)v7 + 6);
            v7[2] = (unsigned __int16)v83;
            v182 = *((_BYTE *)v7 + 2);
            *((_BYTE *)v7 + 2) = v181;
            *((_BYTE *)v7 + 6) = v182;
            v183 = *(a2 - 2);
            if (v183 < v83)
            {
              v7[2] = v183;
LABEL_201:
              *(a2 - 2) = (unsigned __int16)v83;
LABEL_202:
              v184 = *v113;
              *v113 = *(_BYTE *)v8;
              *(_BYTE *)v8 = v184;
            }
            return result;
          }
          v87 = a2;
          do
          {
            if (v86 >= v87)
              break;
            v89 = *(v87 - 2);
            v87 -= 2;
          }
          while (v89 >= v83);
LABEL_70:
          if (v86 >= v87)
          {
            v9 = (unsigned __int16 *)((char *)v9 + v81 * 2);
            v96 = v86 - 2;
            if (v86 - 2 != v7)
              goto LABEL_80;
          }
          else
          {
            v90 = *v87;
            v9 = (unsigned __int16 *)((char *)v9 + v81 * 2);
            v91 = v87;
            do
            {
              *v9 = v90;
              *v91 = v85;
              v92 = *((_BYTE *)v9 + 2);
              *((_BYTE *)v9 + 2) = *((_BYTE *)v91 + 2);
              *((_BYTE *)v91 + 2) = v92;
              v93 = v9 + 2;
              do
              {
                if (v93 == a2)
                  goto LABEL_198;
                v94 = *v93;
                v93 += 2;
                LOWORD(v85) = v94;
              }
              while (v94 < v83);
              v9 = v93 - 2;
              do
              {
                if (v91 == v7)
                  goto LABEL_198;
                v95 = *(v91 - 2);
                v91 -= 2;
                v90 = v95;
              }
              while (v95 >= v83);
            }
            while (v9 < v91);
            v96 = v9 - 2;
            if (v9 - 2 != v7)
            {
LABEL_80:
              *v7 = *(v9 - 2);
              *((_BYTE *)v7 + 2) = *((_BYTE *)v9 - 2);
            }
          }
          *(v9 - 2) = (unsigned __int16)v83;
          *((_BYTE *)v9 - 2) = BYTE2(v82);
          if (v86 < v87)
            goto LABEL_84;
          v97 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *>(v7, v96);
          result = (unsigned __int16 *)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *>(v9, a2);
          if (!(_DWORD)result)
          {
            if (v97)
              continue;
LABEL_84:
            result = (unsigned __int16 *)std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *,false>(v7, v96, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v96;
          if (v97)
            return result;
          goto LABEL_2;
        }
        if (v9 == a2)
          return result;
        v137 = (unint64_t)(v11 - 2) >> 1;
        v138 = v137;
        while (2)
        {
          if (v137 >= v138)
          {
            v140 = (2 * v138) | 1;
            v141 = &v9[2 * v140];
            if (2 * v138 + 2 >= v11)
            {
              v143 = *v141;
              v145 = &v9[2 * v138];
              if (v143 >= *v145)
              {
LABEL_157:
                v146 = *(_DWORD *)v145;
                while (1)
                {
                  v149 = v145;
                  v145 = v141;
                  *v149 = v143;
                  *((_BYTE *)v149 + 2) = *((_BYTE *)v141 + 2);
                  if (v137 < v140)
                    break;
                  v150 = (2 * v140) | 1;
                  v141 = &v9[2 * v150];
                  v140 = 2 * v140 + 2;
                  if (v140 < v11)
                  {
                    v143 = *v141;
                    result = v141 + 2;
                    v147 = v141[2];
                    v148 = v143 >= v147;
                    if (v143 <= v147)
                      v143 = v141[2];
                    if (v148)
                      v140 = v150;
                    else
                      v141 += 2;
                    if (v143 < (unsigned __int16)v146)
                      break;
                  }
                  else
                  {
                    v143 = *v141;
                    v140 = v150;
                    if (v143 < (unsigned __int16)v146)
                      break;
                  }
                }
                *v145 = v146;
                *((_BYTE *)v145 + 2) = BYTE2(v146);
              }
            }
            else
            {
              v142 = *v141;
              v143 = v141[2];
              v144 = v142 >= v143;
              if (v142 > v143)
                v143 = *v141;
              if (!v144)
              {
                v141 += 2;
                v140 = 2 * v138 + 2;
              }
              v145 = &v9[2 * v138];
              if (v143 >= *v145)
                goto LABEL_157;
            }
          }
          v139 = v138-- <= 0;
          if (!v139)
            continue;
          break;
        }
        v151 = (unint64_t)v10 >> 2;
        do
        {
          v152 = 0;
          v153 = *(_DWORD *)v9;
          v154 = (unint64_t)(v151 - 2) >> 1;
          v155 = v9;
          do
          {
            while (1)
            {
              v159 = &v155[2 * v152 + 2];
              v160 = (2 * v152) | 1;
              v152 = 2 * v152 + 2;
              if (v152 < v151)
                break;
              v152 = v160;
              *v155 = *v159;
              *((_BYTE *)v155 + 2) = *((_BYTE *)v159 + 2);
              v155 = v159;
              if (v160 > v154)
                goto LABEL_180;
            }
            v156 = *v159;
            v157 = v159[2];
            v158 = v156 >= v157;
            if (v156 <= v157)
              LOWORD(v156) = v159[2];
            if (v158)
              v152 = v160;
            else
              v159 += 2;
            *v155 = v156;
            *((_BYTE *)v155 + 2) = *((_BYTE *)v159 + 2);
            v155 = v159;
          }
          while (v152 <= v154);
LABEL_180:
          if (v159 == a2 - 2)
          {
            *v159 = v153;
            *((_BYTE *)v159 + 2) = BYTE2(v153);
          }
          else
          {
            *v159 = *(a2 - 2);
            *((_BYTE *)v159 + 2) = *((_BYTE *)a2 - 2);
            *(a2 - 2) = v153;
            *((_BYTE *)a2 - 2) = BYTE2(v153);
            v161 = (char *)v159 - (char *)v9 + 4;
            if (v161 >= 5)
            {
              v162 = (((unint64_t)v161 >> 2) - 2) >> 1;
              v163 = &v9[2 * v162];
              v164 = *v163;
              if (v164 < *v159)
              {
                v165 = *(_DWORD *)v159;
                v166 = (unsigned __int16)*(_DWORD *)v159;
                do
                {
                  v167 = v159;
                  v159 = v163;
                  *v167 = v164;
                  *((_BYTE *)v167 + 2) = *((_BYTE *)v163 + 2);
                  if (!v162)
                    break;
                  v162 = (v162 - 1) >> 1;
                  v163 = &v9[2 * v162];
                  v164 = *v163;
                }
                while (v164 < v166);
                *v159 = v166;
                *((_BYTE *)v159 + 2) = BYTE2(v165);
              }
            }
          }
          a2 -= 2;
          v139 = v151-- <= 2;
        }
        while (!v139);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  char v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  char v28;
  char v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  char v34;
  char v35;
  char v36;
  unsigned int v37;
  char v38;
  char v39;
  char v40;
  unsigned __int16 *v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  char *v48;

  v4 = ((char *)a2 - (char *)a1) >> 2;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = *((_BYTE *)a1 + 2);
        *((_BYTE *)a1 + 2) = *((_BYTE *)a2 - 2);
        *((_BYTE *)a2 - 2) = v8;
      }
      return result;
    case 3:
      v9 = a1[2];
      v10 = *a1;
      v11 = *(a2 - 2);
      if (v9 < v10)
      {
        if (v11 >= v9)
        {
          *a1 = v9;
          v12 = (char *)(a1 + 3);
          v35 = *((_BYTE *)a1 + 6);
          a1[2] = v10;
          v36 = *((_BYTE *)a1 + 2);
          *((_BYTE *)a1 + 2) = v35;
          *((_BYTE *)a1 + 6) = v36;
          v37 = *(a2 - 2);
          if (v37 >= v10)
            return result;
          a1[2] = v37;
        }
        else
        {
          v12 = (char *)(a1 + 1);
          *a1 = v11;
        }
        *(a2 - 2) = v10;
        v30 = a2 - 1;
        goto LABEL_27;
      }
      if (v11 < v9)
      {
        a1[2] = v11;
        *(a2 - 2) = v9;
        v30 = a1 + 3;
        v29 = *((_BYTE *)a1 + 6);
        *((_BYTE *)a1 + 6) = *((_BYTE *)a2 - 2);
        *((_BYTE *)a2 - 2) = v29;
        v31 = a1[2];
        v32 = *a1;
        if (v31 < v32)
        {
          *a1 = v31;
          a1[2] = v32;
          v12 = (char *)(a1 + 1);
LABEL_27:
          v38 = *v12;
          *v12 = *(_BYTE *)v30;
          *(_BYTE *)v30 = v38;
          return result;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      v18 = *(a2 - 2);
      v19 = a1[6];
      if (v18 >= v19)
        return 1;
      a1[6] = v18;
      *(a2 - 2) = v19;
      v20 = *((_BYTE *)a1 + 14);
      *((_BYTE *)a1 + 14) = *((_BYTE *)a2 - 2);
      *((_BYTE *)a2 - 2) = v20;
      v21 = a1[6];
      v22 = a1[4];
      if (v21 >= v22)
        return 1;
      a1[4] = v21;
      a1[6] = v22;
      v23 = *((_BYTE *)a1 + 10);
      v24 = *((_BYTE *)a1 + 14);
      *((_BYTE *)a1 + 10) = v24;
      *((_BYTE *)a1 + 14) = v23;
      v25 = a1[2];
      if (v21 >= v25)
        return 1;
      a1[2] = v21;
      a1[4] = v25;
      v26 = *((_BYTE *)a1 + 6);
      *((_BYTE *)a1 + 6) = v24;
      *((_BYTE *)a1 + 10) = v26;
      v27 = *a1;
      if (v21 >= v27)
        return 1;
      *a1 = v21;
      a1[2] = v27;
      v28 = *((_BYTE *)a1 + 2);
      *((_BYTE *)a1 + 2) = v24;
      *((_BYTE *)a1 + 6) = v28;
      return 1;
    default:
      v13 = a1 + 4;
      v14 = a1[4];
      v15 = a1[2];
      v16 = *a1;
      if (v15 < v16)
      {
        if (v14 >= v15)
        {
          *a1 = v15;
          a1[2] = v16;
          v17 = (char *)(a1 + 3);
          v39 = *((_BYTE *)a1 + 2);
          *((_BYTE *)a1 + 2) = *((_BYTE *)a1 + 6);
          *((_BYTE *)a1 + 6) = v39;
          if (v14 >= v16)
            goto LABEL_32;
          a1[2] = v14;
        }
        else
        {
          v17 = (char *)(a1 + 1);
          *a1 = v14;
        }
        a1[4] = v16;
        v33 = (char *)(a1 + 5);
        goto LABEL_31;
      }
      if (v14 < v15)
      {
        v33 = (char *)(a1 + 3);
        v34 = *((_BYTE *)a1 + 6);
        a1[2] = v14;
        a1[4] = v15;
        *((_BYTE *)a1 + 6) = *((_BYTE *)a1 + 10);
        *((_BYTE *)a1 + 10) = v34;
        if (v14 < v16)
        {
          *a1 = v14;
          a1[2] = v16;
          v17 = (char *)(a1 + 1);
LABEL_31:
          v40 = *v17;
          *v17 = *v33;
          *v33 = v40;
        }
      }
LABEL_32:
      v41 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v42 = 0;
      v43 = 0;
      while (1)
      {
        v44 = *v13;
        if (*v41 < v44)
          break;
LABEL_41:
        v13 = v41;
        v42 += 4;
        v41 += 2;
        if (v41 == a2)
          return 1;
      }
      v45 = *(_DWORD *)v41;
      v46 = (unsigned __int16)*(_DWORD *)v41;
      v47 = v42;
      do
      {
        v48 = (char *)a1 + v47;
        *((_WORD *)v48 + 6) = v44;
        v48[14] = *((_BYTE *)a1 + v47 + 10);
        if (v47 == -8)
        {
          *a1 = v46;
          *((_BYTE *)a1 + 2) = BYTE2(v45);
          if (++v43 != 8)
            goto LABEL_41;
          return v41 + 2 == a2;
        }
        v44 = *((unsigned __int16 *)v48 + 2);
        v47 -= 4;
      }
      while (v44 > v46);
      *(unsigned __int16 *)((char *)a1 + v47 + 12) = v46;
      *((_BYTE *)a1 + v47 + 14) = BYTE2(v45);
      if (++v43 != 8)
        goto LABEL_41;
      return v41 + 2 == a2;
  }
}

unsigned __int16 *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *>(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char *v7;
  char v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;

  v4 = *a2;
  v5 = *result;
  v6 = *a3;
  if (v4 >= v5)
  {
    if (v6 < v4)
    {
      *a2 = v6;
      *a3 = v4;
      v9 = (char *)(a2 + 1);
      v8 = *((_BYTE *)a2 + 2);
      *((_BYTE *)a2 + 2) = *((_BYTE *)a3 + 2);
      *((_BYTE *)a3 + 2) = v8;
      v10 = *a2;
      v11 = *result;
      if (v10 < v11)
      {
        *result = v10;
        v7 = (char *)(result + 1);
        *a2 = v11;
LABEL_10:
        v14 = *v7;
        *v7 = *v9;
        *v9 = v14;
      }
    }
  }
  else
  {
    if (v6 < v4)
    {
      v7 = (char *)(result + 1);
      *result = v6;
LABEL_9:
      *a3 = v5;
      v9 = (char *)(a3 + 1);
      goto LABEL_10;
    }
    *result = v4;
    *a2 = v5;
    v7 = (char *)(a2 + 1);
    v12 = *((_BYTE *)result + 2);
    *((_BYTE *)result + 2) = *((_BYTE *)a2 + 2);
    *((_BYTE *)a2 + 2) = v12;
    v13 = *a3;
    v5 = *a2;
    if (v13 < v5)
    {
      *a2 = v13;
      goto LABEL_9;
    }
  }
  v15 = *a4;
  v16 = *a3;
  if (v15 < v16)
  {
    *a3 = v15;
    *a4 = v16;
    v17 = *((_BYTE *)a3 + 2);
    *((_BYTE *)a3 + 2) = *((_BYTE *)a4 + 2);
    *((_BYTE *)a4 + 2) = v17;
    v18 = *a3;
    v19 = *a2;
    if (v18 < v19)
    {
      *a2 = v18;
      *a3 = v19;
      v20 = *((_BYTE *)a2 + 2);
      *((_BYTE *)a2 + 2) = *((_BYTE *)a3 + 2);
      *((_BYTE *)a3 + 2) = v20;
      v21 = *a2;
      v22 = *result;
      if (v21 < v22)
      {
        *result = v21;
        *a2 = v22;
        v23 = *((_BYTE *)result + 2);
        *((_BYTE *)result + 2) = *((_BYTE *)a2 + 2);
        *((_BYTE *)a2 + 2) = v23;
      }
    }
  }
  return result;
}

unsigned __int16 *std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::iso88596>(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int16 *result;

  v0 = operator new[]();
  v1 = v0;
  for (i = 0; i != 328; i += 8)
  {
    v3 = v0 + i;
    *(_WORD *)v3 = 0;
    *(_WORD *)(v3 + 4) = 0;
    *(_BYTE *)(v3 + 2) = 0;
    *(_BYTE *)(v3 + 6) = 0;
  }
  v4 = 0;
  v5 = 0;
  *(_WORD *)(v0 + 328) = 0;
  *(_BYTE *)(v0 + 330) = 0;
  do
  {
    v6 = PAL::iso88596[v4];
    if (v6 != 65533)
    {
      v7 = v0 + 4 * v5++;
      *(_WORD *)v7 = v6;
      *(_BYTE *)(v7 + 2) = v4 ^ 0x80;
    }
    ++v4;
  }
  while (v4 != 128);
  result = std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *,false>((unsigned __int16 *)v0, (unsigned __int16 *)(v0 + 332), 12, 1);
  qword_1ECE7EB38 = v1;
  return result;
}

unsigned __int16 *std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::iso88597>(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int16 *result;

  v0 = operator new[]();
  v1 = v0;
  for (i = 0; i != 496; i += 8)
  {
    v3 = v0 + i;
    *(_WORD *)v3 = 0;
    *(_WORD *)(v3 + 4) = 0;
    *(_BYTE *)(v3 + 2) = 0;
    *(_BYTE *)(v3 + 6) = 0;
  }
  v4 = 0;
  v5 = 0;
  *(_WORD *)(v0 + 496) = 0;
  *(_BYTE *)(v0 + 498) = 0;
  do
  {
    v6 = PAL::iso88597[v4];
    if (v6 != 65533)
    {
      v7 = v0 + 4 * v5++;
      *(_WORD *)v7 = v6;
      *(_BYTE *)(v7 + 2) = v4 ^ 0x80;
    }
    ++v4;
  }
  while (v4 != 128);
  result = std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *,false>((unsigned __int16 *)v0, (unsigned __int16 *)(v0 + 500), 12, 1);
  qword_1ECE7EB48 = v1;
  return result;
}

unsigned __int16 *std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::iso88598>(void)::{lambda(void)#1} &&>>()
{
  unsigned __int16 *v0;
  uint64_t v1;
  uint64_t i;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 *result;

  v0 = (unsigned __int16 *)operator new[]();
  v1 = (uint64_t)v0;
  for (i = 0; i != 184; i += 4)
  {
    v3 = &v0[i];
    *v3 = 0;
    v3[2] = 0;
    *((_BYTE *)v3 + 2) = 0;
    *((_BYTE *)v3 + 6) = 0;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = PAL::iso88598[v4];
    if (v6 != 65533)
    {
      v7 = &v0[2 * v5++];
      *v7 = v6;
      *((_BYTE *)v7 + 2) = v4 ^ 0x80;
    }
    ++v4;
  }
  while (v4 != 128);
  result = std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *,false>(v0, v0 + 184, 12, 1);
  qword_1ECE7EB58 = v1;
  return result;
}

unsigned __int16 *std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::windows874>(void)::{lambda(void)#1} &&>>()
{
  unsigned __int16 *v0;
  uint64_t v1;
  uint64_t i;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 *result;

  v0 = (unsigned __int16 *)operator new[]();
  v1 = (uint64_t)v0;
  for (i = 0; i != 240; i += 4)
  {
    v3 = &v0[i];
    *v3 = 0;
    v3[2] = 0;
    *((_BYTE *)v3 + 2) = 0;
    *((_BYTE *)v3 + 6) = 0;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = PAL::windows874[v4];
    if (v6 != 65533)
    {
      v7 = &v0[2 * v5++];
      *v7 = v6;
      *((_BYTE *)v7 + 2) = v4 ^ 0x80;
    }
    ++v4;
  }
  while (v4 != 128);
  result = std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *,false>(v0, v0 + 240, 12, 1);
  qword_1ECE7EB68 = v1;
  return result;
}

unsigned __int16 *std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::windows1253>(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int16 *result;

  v0 = operator new[]();
  v1 = v0;
  for (i = 0; i != 496; i += 8)
  {
    v3 = v0 + i;
    *(_WORD *)v3 = 0;
    *(_WORD *)(v3 + 4) = 0;
    *(_BYTE *)(v3 + 2) = 0;
    *(_BYTE *)(v3 + 6) = 0;
  }
  v4 = 0;
  v5 = 0;
  *(_WORD *)(v0 + 496) = 0;
  *(_BYTE *)(v0 + 498) = 0;
  do
  {
    v6 = PAL::windows1253[v4];
    if (v6 != 65533)
    {
      v7 = v0 + 4 * v5++;
      *(_WORD *)v7 = v6;
      *(_BYTE *)(v7 + 2) = v4 ^ 0x80;
    }
    ++v4;
  }
  while (v4 != 128);
  result = std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *,false>((unsigned __int16 *)v0, (unsigned __int16 *)(v0 + 500), 12, 1);
  qword_1ECE7EB78 = v1;
  return result;
}

unsigned __int16 *std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::windows1255>(void)::{lambda(void)#1} &&>>()
{
  unsigned __int16 *v0;
  uint64_t v1;
  uint64_t i;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 *result;

  v0 = (unsigned __int16 *)operator new[]();
  v1 = (uint64_t)v0;
  for (i = 0; i != 236; i += 4)
  {
    v3 = &v0[i];
    *v3 = 0;
    v3[2] = 0;
    *((_BYTE *)v3 + 2) = 0;
    *((_BYTE *)v3 + 6) = 0;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = PAL::windows1255[v4];
    if (v6 != 65533)
    {
      v7 = &v0[2 * v5++];
      *v7 = v6;
      *((_BYTE *)v7 + 2) = v4 ^ 0x80;
    }
    ++v4;
  }
  while (v4 != 128);
  result = std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *,false>(v0, v0 + 236, 12, 1);
  qword_1ECE7EB88 = v1;
  return result;
}

unsigned __int16 *std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::windows1257>(void)::{lambda(void)#1} &&>>()
{
  unsigned __int16 *v0;
  uint64_t v1;
  uint64_t i;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 *result;

  v0 = (unsigned __int16 *)operator new[]();
  v1 = (uint64_t)v0;
  for (i = 0; i != 252; i += 4)
  {
    v3 = &v0[i];
    *v3 = 0;
    v3[2] = 0;
    *((_BYTE *)v3 + 2) = 0;
    *((_BYTE *)v3 + 6) = 0;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = PAL::windows1257[v4];
    if (v6 != 65533)
    {
      v7 = &v0[2 * v5++];
      *v7 = v6;
      *((_BYTE *)v7 + 2) = v4 ^ 0x80;
    }
    ++v4;
  }
  while (v4 != 128);
  result = std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *,false>(v0, v0 + 252, 12, 1);
  qword_1ECE7EB98 = v1;
  return result;
}

unsigned __int16 *std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::ibm866>(void)::{lambda(void)#1} &&>>()
{
  unsigned __int16 *v0;
  uint64_t v1;
  uint64_t i;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 *result;

  v0 = (unsigned __int16 *)operator new[]();
  v1 = (uint64_t)v0;
  for (i = 0; i != 256; i += 4)
  {
    v3 = &v0[i];
    *v3 = 0;
    v3[2] = 0;
    *((_BYTE *)v3 + 2) = 0;
    *((_BYTE *)v3 + 6) = 0;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = PAL::ibm866[v4];
    if (v6 != 65533)
    {
      v7 = &v0[2 * v5++];
      *v7 = v6;
      *((_BYTE *)v7 + 2) = v4 ^ 0x80;
    }
    ++v4;
  }
  while (v4 != 128);
  result = std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *,false>(v0, v0 + 256, 14, 1);
  qword_1ECE7EBA8 = v1;
  return result;
}

unsigned __int16 *std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::IteratorRange<std::pair<char16_t,unsigned char> const*> PAL::tableForEncoding<PAL::koi8u>(void)::{lambda(void)#1} &&>>()
{
  unsigned __int16 *v0;
  uint64_t v1;
  uint64_t i;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 *result;

  v0 = (unsigned __int16 *)operator new[]();
  v1 = (uint64_t)v0;
  for (i = 0; i != 256; i += 4)
  {
    v3 = &v0[i];
    *v3 = 0;
    v3[2] = 0;
    *((_BYTE *)v3 + 2) = 0;
    *((_BYTE *)v3 + 6) = 0;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = PAL::koi8u[v4];
    if (v6 != 65533)
    {
      v7 = &v0[2 * v5++];
      *v7 = v6;
      *((_BYTE *)v7 + 2) = v4 ^ 0x80;
    }
    ++v4;
  }
  while (v4 != 128);
  result = std::__introsort<std::_ClassicAlgPolicy,PAL::CompareFirst &,std::pair<char16_t,unsigned char> *,false>(v0, v0 + 256, 14, 1);
  qword_1ECE7EBB8 = v1;
  return result;
}

uint64_t PAL::decode(std::array<char16_t,128ul> const&,std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a2 & 0x80) != 0)
  {
    v5 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2 * a2 - 256);
    if (v5 == 65533)
      **(_BYTE **)(a1 + 16) = 1;
    result = *(_QWORD *)a1;
    v6 = *(_QWORD *)(result + 8);
    if (!v6)
      return WTF::StringBuilder::append();
    v7 = *(unsigned int *)(result + 16);
    if (v7 >= *(_DWORD *)(v6 + 4) || *(_QWORD *)result)
      return WTF::StringBuilder::append();
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      v10 = *(_QWORD *)(v6 + 8);
      *(_DWORD *)(result + 16) = v7 + 1;
      *(_WORD *)(v10 + 2 * v7) = v5;
      return result;
    }
    if (v5 > 0xFF)
      return WTF::StringBuilder::append();
    v11 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)(result + 16) = v7 + 1;
    *(_BYTE *)(v11 + v7) = v5;
  }
  else
  {
    result = *(_QWORD *)a1;
    v3 = *(_QWORD *)(result + 8);
    if (v3 && (v4 = *(unsigned int *)(result + 16), v4 < *(_DWORD *)(v3 + 4)) && !*(_QWORD *)result)
    {
      v8 = *(_DWORD *)(v3 + 16);
      v9 = *(_QWORD *)(v3 + 8);
      *(_DWORD *)(result + 16) = v4 + 1;
      if ((v8 & 4) != 0)
        *(_BYTE *)(v9 + v4) = a2;
      else
        *(_WORD *)(v9 + 2 * v4) = a2;
    }
    else
    {
      return WTF::StringBuilder::append();
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecSingleByte::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_0,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E31F4690;
  *(_BYTE *)(result + 8) = 0;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecSingleByte::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_1,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E31F4690;
  *(_BYTE *)(result + 8) = 1;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecSingleByte::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_2,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E31F4690;
  *(_BYTE *)(result + 8) = 2;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecSingleByte::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_3,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E31F4690;
  *(_BYTE *)(result + 8) = 3;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecSingleByte::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_4,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E31F4690;
  *(_BYTE *)(result + 8) = 3;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecSingleByte::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_5,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E31F4690;
  *(_BYTE *)(result + 8) = 4;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecSingleByte::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_6,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E31F4690;
  *(_BYTE *)(result + 8) = 5;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecSingleByte::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_7,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E31F4690;
  *(_BYTE *)(result + 8) = 6;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecSingleByte::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_8,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E31F4690;
  *(_BYTE *)(result + 8) = 7;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecSingleByte::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_9,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E31F4690;
  *(_BYTE *)(result + 8) = 9;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecSingleByte::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_10,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = off_1E31F4690;
  *(_BYTE *)(result + 8) = 8;
  *a1 = result;
  return result;
}

WTF::StringImpl *PAL::TextCodecUserDefined::decode@<X0>(char *a1@<X1>, uint64_t a2@<X2>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  char v19;
  __int16 v20;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v16);
  for (; a2; --a2)
  {
    v10 = *a1;
    v11 = v10 & 0xFFFFF7FF;
    v20 = *a1 & 0xF7FF;
    if (v17)
    {
      v12 = v18;
      if (v18 < *((_DWORD *)v17 + 1) && v16 == 0)
      {
        if ((*((_BYTE *)v17 + 16) & 4) == 0)
        {
          v14 = *((_QWORD *)v17 + 1);
          ++v18;
          *(_WORD *)(v14 + 2 * v12) = v11;
          goto LABEL_11;
        }
        if (v11 <= 0xFF)
        {
          v15 = *((_QWORD *)v17 + 1);
          ++v18;
          *(_BYTE *)(v15 + v12) = v10;
          goto LABEL_11;
        }
      }
    }
    WTF::StringBuilder::append();
LABEL_11:
    ++a1;
  }
  v7 = v16;
  if (v16
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16),
        (v7 = v16) != 0))
  {
    *(_DWORD *)v7 += 2;
  }
  *a3 = v7;
  v8 = v17;
  v17 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v6);
      result = v16;
      v16 = 0;
      if (!result)
        return result;
      goto LABEL_23;
    }
    *(_DWORD *)v8 -= 2;
  }
  result = v16;
  v16 = 0;
  if (!result)
    return result;
LABEL_23:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  *(_DWORD *)result -= 2;
  return result;
}

unint64_t PAL::TextCodecUserDefined::encode@<X0>(char *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  unint64_t v8;
  unint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  __int16 v19;
  uint8x8_t *v20;
  _OWORD *v21;
  int8x16_t v22;
  unint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint8x16_t v27;
  __int128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint8x8_t *v32;
  uint8x8_t *v33;
  unint64_t v34;
  int8x16_t v35;
  unint64_t v36;
  uint8x8_t v37;
  int8x8_t v38;
  unint64_t v39;
  char *v40;
  __int16 v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unsigned int v50;
  int v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  __int128 *v69;
  __int128 v70;
  char *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  int8x16_t *v77;
  int8x16_t *v78;
  int8x16_t v79;
  unint64_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int16x8_t *v89;
  int8x8_t *v90;
  unint64_t v91;
  int8x16_t v92;
  unint64_t v93;
  int16x8_t v94;
  int8x8_t v95;
  char *__format;
  uint64_t v97;
  char __str[16];
  _QWORD v99[3];

  v99[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 12) = a2;
  v8 = a2;
  if (!(_DWORD)a2)
    return 0;
  result = WTF::fastMalloc((WTF *)a2);
  *(_DWORD *)(a4 + 8) = a2;
  *(_QWORD *)a4 = result;
  v11 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (v8 < 8 || result < (unint64_t)&a1[2 * v8] && result + v8 > (unint64_t)a1)
    {
      v15 = 0;
      LOWORD(v12) = 0;
      v16 = (_BYTE *)result;
      goto LABEL_13;
    }
    if (v8 >= 0x20)
    {
      v15 = v8 - (a2 & 0x1F);
      v77 = (int8x16_t *)(a1 + 32);
      v78 = (int8x16_t *)(result + 16);
      v79 = 0uLL;
      v80 = v15;
      v81 = 0uLL;
      v82 = 0uLL;
      v83 = 0uLL;
      do
      {
        v85 = v77[-2];
        v84 = v77[-1];
        v87 = *v77;
        v86 = v77[1];
        v77 += 4;
        v78[-1] = vuzp1q_s8(v85, v84);
        *v78 = vuzp1q_s8(v87, v86);
        v81 = vorrq_s8(v84, v81);
        v79 = vorrq_s8(v85, v79);
        v83 = vorrq_s8(v86, v83);
        v82 = vorrq_s8(v87, v82);
        v78 += 2;
        v80 -= 32;
      }
      while (v80);
      v88 = vorrq_s8(vorrq_s8(v82, v79), vorrq_s8(v83, v81));
      *(int8x8_t *)v88.i8 = vorr_s8(*(int8x8_t *)v88.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL));
      LOWORD(v12) = v88.i16[0] | v88.i16[2] | ((v88.i32[0] | v88.i32[1]) >> 16);
      if ((a2 & 0x1F) == 0)
        goto LABEL_27;
      if ((a2 & 0x1Fu) < 8uLL)
      {
        v16 = (_BYTE *)(result + v15);
LABEL_13:
        v17 = v8 - v15;
        v18 = &a1[2 * v15];
        do
        {
          v19 = *(_WORD *)v18;
          v18 += 2;
          *v16++ = v19;
          LOWORD(v12) = v19 | v12;
          --v17;
        }
        while (v17);
        goto LABEL_27;
      }
    }
    else
    {
      LOWORD(v12) = 0;
      v15 = 0;
    }
    v89 = (int16x8_t *)&a1[2 * v15];
    v90 = (int8x8_t *)(result + v15);
    v91 = v15 + (a2 & 7);
    v15 = v8 - (a2 & 7);
    v16 = (_BYTE *)(result + v15);
    v92 = (int8x16_t)(unsigned __int16)v12;
    v93 = v91 - v8;
    do
    {
      v94 = *v89++;
      *v90++ = vmovn_s16(v94);
      v92 = vorrq_s8((int8x16_t)v94, v92);
      v93 += 8;
    }
    while (v93);
    v95 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL));
    v12 = v95.i16[0] | v95.i16[2] | ((v95.i32[0] | v95.i32[1]) >> 16);
    if ((a2 & 7) == 0)
      goto LABEL_27;
    goto LABEL_13;
  }
  LOWORD(v12) = 0;
  v13 = 0;
  if (v8 < 8)
  {
    v14 = (_BYTE *)result;
  }
  else
  {
    v14 = (_BYTE *)result;
    if (result - (unint64_t)a1 >= 0x20)
    {
      if (v8 < 0x20)
      {
        LOWORD(v12) = 0;
        v13 = 0;
        goto LABEL_22;
      }
      v13 = v8 - (a2 & 0x1F);
      v20 = (uint8x8_t *)(a1 + 16);
      v21 = (_OWORD *)(result + 16);
      v22 = 0uLL;
      v23 = v13;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      do
      {
        v27 = *(uint8x16_t *)v20[-2].i8;
        v28 = *(_OWORD *)v20->i8;
        v29 = (int8x16_t)vmovl_u8(*v20);
        v30 = (int8x16_t)vmovl_high_u8(*(uint8x16_t *)v20->i8);
        *(v21 - 1) = v27;
        *v21 = v28;
        v24 = vorrq_s8(v24, (int8x16_t)vmovl_high_u8(v27));
        v22 = vorrq_s8(v22, (int8x16_t)vmovl_u8(*(uint8x8_t *)v27.i8));
        v26 = vorrq_s8(v26, v30);
        v25 = vorrq_s8(v25, v29);
        v20 += 4;
        v21 += 2;
        v23 -= 32;
      }
      while (v23);
      v31 = vorrq_s8(vorrq_s8(v25, v22), vorrq_s8(v26, v24));
      *(int8x8_t *)v31.i8 = vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
      LOWORD(v12) = v31.i16[0] | v31.i16[2] | ((v31.i32[0] | v31.i32[1]) >> 16);
      if ((a2 & 0x1F) == 0)
        goto LABEL_27;
      if ((a2 & 0x1Fu) >= 8uLL)
      {
LABEL_22:
        v32 = (uint8x8_t *)&a1[v13];
        v33 = (uint8x8_t *)(result + v13);
        v34 = v13 + (a2 & 7);
        v13 = v8 - (a2 & 7);
        v14 = (_BYTE *)(result + v13);
        v35 = (int8x16_t)(unsigned __int16)v12;
        v36 = v34 - v8;
        do
        {
          v37 = *v32++;
          *v33++ = v37;
          v35 = vorrq_s8(v35, (int8x16_t)vmovl_u8(v37));
          v36 += 8;
        }
        while (v36);
        v38 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
        v12 = v38.i16[0] | v38.i16[2] | ((v38.i32[0] | v38.i32[1]) >> 16);
        if ((a2 & 7) == 0)
          goto LABEL_27;
        goto LABEL_25;
      }
      v14 = (_BYTE *)(result + v13);
    }
  }
LABEL_25:
  v39 = v8 - v13;
  v40 = &a1[v13];
  do
  {
    v41 = *v40++;
    *v14++ = v41;
    LOWORD(v12) = v12 | v41;
    --v39;
  }
  while (v39);
LABEL_27:
  if ((unsigned __int16)v12 >= 0x80u)
  {
    v97 = a2 & 0xFF00000000;
    if (result)
    {
      result = WTF::fastFree((WTF *)result, v10);
      v11 = a2 & 0xFF00000000;
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v42 = v11 ? &a1[v8] : &a1[2 * v8];
    if (v42 != a1)
    {
      v43 = 0;
      v44 = 0;
      LODWORD(v45) = 0;
      v46 = 0;
      LODWORD(v47) = 0;
      LODWORD(v48) = 0;
      if (a3)
        v49 = "%%26%%23%u%%3B";
      else
        v49 = "&#%u;";
      __format = (char *)v49;
      do
      {
        while (1)
        {
          if (v11)
          {
            v50 = *a1;
          }
          else
          {
            v50 = *(unsigned __int16 *)a1;
            if ((v50 & 0xF800) == 0xD800 && v42 - a1 != 2 && (v50 & 0x400) == 0)
            {
              v51 = *((unsigned __int16 *)a1 + 1);
              v52 = (v51 & 0xFC00) == 56320;
              v53 = v51 + (v50 << 10) - 56613888;
              if (v52)
                v50 = v53;
            }
          }
          if (((char)v50 & 0xF7FF) == v50)
            break;
          if (v50 >> 11 == 27)
            v58 = 65533;
          else
            v58 = v50;
          result = snprintf(__str, 0x20uLL, __format, v58);
          if ((_DWORD)result)
          {
            v59 = (int)result;
            v60 = v48;
            v48 = (int)result + (unint64_t)v48;
            if (v48 > v47)
            {
              v61 = v47 + ((unint64_t)v47 >> 2);
              if (v61 >= 0x10)
                v62 = v61 + 1;
              else
                v62 = 16;
              if (v62 <= v48)
                v45 = v48;
              else
                v45 = v62;
              if (HIDWORD(v45))
              {
LABEL_121:
                __break(0xC471u);
                JUMPOUT(0x1945EB990);
              }
              v43 = (char *)WTF::fastMalloc((WTF *)v45);
              *(_DWORD *)(a4 + 8) = v45;
              *(_QWORD *)a4 = v43;
              result = (unint64_t)memcpy(v43, v46, v60);
              if (v46)
              {
                if (v43 == v46)
                {
                  v43 = 0;
                  LODWORD(v45) = 0;
                  *(_QWORD *)a4 = 0;
                  *(_DWORD *)(a4 + 8) = 0;
                }
                result = WTF::fastFree((WTF *)v46, v63);
              }
              LODWORD(v47) = v45;
            }
            if (v48 < v60)
              goto LABEL_121;
            v64 = &v43[v60];
            v11 = v97;
            if (v59 < 8)
            {
              v65 = __str;
              goto LABEL_98;
            }
            v65 = __str;
            if ((unint64_t)(v64 - __str) < 0x20)
              goto LABEL_98;
            if (v59 >= 0x20)
            {
              v66 = v59 & 0xFFFFFFFFFFFFFFE0;
              v67 = &v43[v60 + 16];
              v68 = v59 & 0xFFFFFFFFFFFFFFE0;
              v69 = (__int128 *)v99;
              do
              {
                v70 = *v69;
                *((_OWORD *)v67 - 1) = *(v69 - 1);
                *(_OWORD *)v67 = v70;
                v69 += 2;
                v67 += 32;
                v68 -= 32;
              }
              while (v68);
              if (v66 != v59)
              {
                if ((v59 & 0x18) == 0)
                {
                  v65 = &__str[v66];
                  v64 += v66;
                  goto LABEL_98;
                }
                goto LABEL_93;
              }
            }
            else
            {
              v66 = 0;
LABEL_93:
              v64 += v59 & 0xFFFFFFFFFFFFFFF8;
              v65 = &__str[v59 & 0xFFFFFFFFFFFFFFF8];
              v71 = &__str[v66];
              v72 = &v43[v66 + v60];
              v73 = v66 - (v59 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v74 = *(_QWORD *)v71;
                v71 += 8;
                *(_QWORD *)v72 = v74;
                v72 += 8;
                v73 += 8;
              }
              while (v73);
              if ((v59 & 0xFFFFFFFFFFFFFFF8) != v59)
              {
                do
                {
LABEL_98:
                  v75 = *v65++;
                  *v64++ = v75;
                }
                while (v65 != &__str[v59]);
              }
            }
            *(_DWORD *)(a4 + 12) = v48;
            v44 = v43;
            v46 = v43;
            if (v97)
              goto LABEL_38;
            goto LABEL_100;
          }
          v11 = v97;
          if (v97)
            goto LABEL_38;
LABEL_100:
          if (v42 - a1 == 2)
          {
            a1 += 2;
            if (a1 == v42)
              return result;
          }
          else
          {
            v76 = 1;
            if ((*(_WORD *)a1 & 0xFC00) == 0xD800)
            {
              v76 = 1;
              if ((*((_WORD *)a1 + 1) & 0xFC00) == 0xDC00)
                v76 = 2;
            }
            a1 += 2 * v76;
            if (a1 == v42)
              return result;
          }
        }
        v54 = v48;
        if ((_DWORD)v48 != (_DWORD)v45)
        {
          LODWORD(v48) = v48 + 1;
          v44[v54] = v50;
          *(_DWORD *)(a4 + 12) = v48;
          v46 = v44;
          LODWORD(v47) = v45;
          if (v11)
            goto LABEL_38;
          goto LABEL_100;
        }
        v55 = v48 + ((unint64_t)v48 >> 2);
        if (v55 >= 0x10)
          v56 = v55 + 1;
        else
          v56 = 16;
        if (v56 <= (unint64_t)v48 + 1)
          v47 = v48 + 1;
        else
          v47 = v56;
        if (HIDWORD(v47))
        {
          __break(0xC471u);
          JUMPOUT(0x1945EB998);
        }
        v43 = (char *)WTF::fastMalloc((WTF *)v47);
        *(_DWORD *)(a4 + 8) = v47;
        *(_QWORD *)a4 = v43;
        result = (unint64_t)memcpy(v43, v44, v48);
        if (v44)
        {
          if (v43 == v44)
          {
            v43 = 0;
            LODWORD(v47) = 0;
            *(_QWORD *)a4 = 0;
            *(_DWORD *)(a4 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v44, v57);
        }
        v43[v48] = v50;
        LODWORD(v48) = v45 + 1;
        *(_DWORD *)(a4 + 12) = v45 + 1;
        v44 = v43;
        LODWORD(v45) = v47;
        v46 = v43;
        v11 = v97;
        if (!v97)
          goto LABEL_100;
LABEL_38:
        ++a1;
      }
      while (a1 != v42);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<PAL::TextCodecUserDefined::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_0,std::unique_ptr<PAL::TextCodec>>::call@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *result = off_1E31F48D0;
  *a1 = result;
  return result;
}

WTF::StringImpl *PAL::TextCodecUTF16::decode@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _BYTE *a5@<X5>, WTF::StringImpl **a6@<X8>)
{
  unsigned __int16 *v9;
  unsigned __int16 *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  unsigned int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _QWORD v28[3];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  char v32;
  __int16 v33;

  v9 = a2;
  if (a2)
    v12 = (unsigned __int16 *)((char *)a2 + a3 - 1);
  else
    v12 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 1;
  result = (WTF::StringImpl *)WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v29);
  v28[0] = a1;
  v28[1] = &v29;
  v28[2] = a5;
  if (a3 >= 1 && *(_BYTE *)(a1 + 10))
  {
    v15 = *(unsigned __int16 *)(a1 + 9);
    if (v15 <= 0xFF)
    {
      __break(1u);
      return result;
    }
    *(_BYTE *)(a1 + 10) = 0;
    v17 = *(unsigned __int8 *)v9;
    v9 = (unsigned __int16 *)((char *)v9 + 1);
    v16 = v17;
    v18 = v15;
    if (*(_BYTE *)(a1 + 8))
    {
      LOWORD(v15) = v16;
      v19 = v18;
    }
    else
    {
      v19 = v16;
    }
    PAL::TextCodecUTF16::decode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()((uint64_t)v28, v19 | (unsigned __int16)((_WORD)v15 << 8));
  }
  if (*(_BYTE *)(a1 + 8))
  {
    while (v9 < v12)
    {
      v20 = *v9++;
      PAL::TextCodecUTF16::decode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()((uint64_t)v28, v20);
    }
  }
  else
  {
    while (v9 < v12)
    {
      v21 = *v9++;
      PAL::TextCodecUTF16::decode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()((uint64_t)v28, bswap32(v21) >> 16);
    }
  }
  if (v9 && v9 == v12)
    *(_WORD *)(a1 + 9) = *(unsigned __int8 *)v12 | 0x100;
  if (!a4)
    goto LABEL_35;
  *(_BYTE *)(a1 + 16) = 0;
  if (!*(_BYTE *)(a1 + 10))
  {
    if (!*(_BYTE *)(a1 + 14))
      goto LABEL_35;
    goto LABEL_26;
  }
  *(_BYTE *)(a1 + 10) = 0;
  if (*(_BYTE *)(a1 + 14))
  {
LABEL_26:
    *(_BYTE *)(a1 + 14) = 0;
    *a5 = 1;
    v33 = -3;
    v22 = v30;
    if (!v30)
    {
LABEL_34:
      WTF::StringBuilder::append();
      goto LABEL_35;
    }
    goto LABEL_27;
  }
  *a5 = 1;
  v33 = -3;
  v22 = v30;
  if (!v30)
    goto LABEL_34;
LABEL_27:
  v23 = v31;
  v24 = v31 < *((_DWORD *)v22 + 1) && v29 == 0;
  if (!v24 || (*((_BYTE *)v22 + 16) & 4) != 0)
    goto LABEL_34;
  v25 = *((_QWORD *)v22 + 1);
  ++v31;
  *(_WORD *)(v25 + 2 * v23) = -3;
LABEL_35:
  v26 = v29;
  if (v29
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v29),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v29),
        (v26 = v29) != 0))
  {
    *(_DWORD *)v26 += 2;
  }
  *a6 = v26;
  v27 = v30;
  v30 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::destroy(v27, v14);
      result = v29;
      v29 = 0;
      if (!result)
        return result;
      goto LABEL_44;
    }
    *(_DWORD *)v27 -= 2;
  }
  result = v29;
  v29 = 0;
  if (!result)
    return result;
LABEL_44:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
  *(_DWORD *)result -= 2;
  return result;
}

_BYTE *PAL::TextCodecUTF16::encode@<X0>(_BYTE *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char v18;
  unint64_t v19;
  _WORD *v20;
  unint64_t v21;
  __int16 *v22;
  __int16 v23;
  unint64_t v24;
  _WORD *v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unsigned int v28;
  int8x16_t *v29;
  char *v30;
  __int128 v31;
  unint64_t v32;
  char *v33;
  int8x16_t v34;
  uint64_t *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  char *v43;
  __int128 v44;
  unint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  uint64_t v63;
  unint64_t v64;
  int16x8_t *v65;
  char *v66;
  unint64_t v67;
  int16x8_t v68;
  int8x16_t *v69;
  char *v70;
  unint64_t v71;
  char *v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  uint64_t v77;
  unint64_t v78;
  int16x8_t *v79;
  char *v80;
  unint64_t v81;
  int16x8_t v82;
  int8x8x2_t v83;
  int8x8x2_t v84;
  int8x16x2_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v4 = a3;
  v5 = 2 * a3;
  *(_DWORD *)(a4 + 12) = 2 * a3;
  if (!(_DWORD)a3)
    return result;
  if ((unint64_t)a3 >> 31)
  {
    __break(0xC471u);
    return result;
  }
  v9 = result;
  result = (_BYTE *)WTF::fastMalloc((WTF *)(2 * a3));
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)a4 = result;
  v10 = a3 & 0xFF00000000;
  if (!v9[8])
  {
    if (v10)
    {
      if (v4 < 8 || (unint64_t)result < a2 + v4 && (unint64_t)&result[2 * v4] > a2)
      {
        v15 = 0;
        goto LABEL_17;
      }
      if (v4 >= 0x20)
      {
        v15 = v4 - (a3 & 0x1F);
        v42 = (__int128 *)(a2 + 16);
        v43 = result + 32;
        v44 = 0uLL;
        v45 = v15;
        do
        {
          v46 = v43 - 32;
          v88.val[1] = (int8x16_t)*(v42 - 1);
          v47 = *v42;
          v88.val[0] = 0uLL;
          vst2q_s8(v46, v88);
          vst2q_s8(v43, *(int8x16x2_t *)&v44);
          v42 += 2;
          v43 += 64;
          v45 -= 32;
        }
        while (v45);
        if ((a3 & 0x1F) == 0)
          return result;
        if ((a3 & 0x1Fu) < 8uLL)
        {
          result += 2 * v15;
          goto LABEL_17;
        }
      }
      else
      {
        v15 = 0;
      }
      v48 = (uint64_t *)(a2 + v15);
      v49 = &result[2 * v15];
      v50 = v15 + (a3 & 7);
      v15 = v4 - (a3 & 7);
      result += 2 * v15;
      v51 = v50 - v4;
      v52 = 0;
      do
      {
        v53 = *v48++;
        v54 = v53;
        vst2_s8(v49, *(int8x8x2_t *)&v52);
        v49 += 16;
        v51 += 8;
      }
      while (v51);
      if ((a3 & 7) == 0)
        return result;
LABEL_17:
      v16 = v4 - v15;
      v17 = (char *)(a2 + v15);
      do
      {
        v18 = *v17++;
        *result = 0;
        result[1] = v18;
        result += 2;
        --v16;
      }
      while (v16);
      return result;
    }
    if (v4 < 8 || (unint64_t)result < a2 + v5 && (unint64_t)&result[v5] > a2)
    {
      v24 = 0;
      v25 = result;
      goto LABEL_31;
    }
    if (v4 >= 0x20)
    {
      v24 = v4 - (a3 & 0x1F);
      v69 = (int8x16_t *)(a2 + 32);
      v70 = result + 32;
      v71 = v24;
      do
      {
        v72 = v70 - 32;
        v74 = v69[-2];
        v73 = v69[-1];
        v76 = *v69;
        v75 = v69[1];
        v69 += 4;
        v90.val[1] = vuzp1q_s8(v74, v73);
        v90.val[0] = vuzp2q_s8(v74, v73);
        vst2q_s8(v72, v90);
        v86.val[1] = vuzp1q_s8(v76, v75);
        v86.val[0] = vuzp2q_s8(v76, v75);
        vst2q_s8(v70, v86);
        v70 += 64;
        v71 -= 32;
      }
      while (v71);
      if ((a3 & 0x1F) == 0)
        return result;
      if ((a3 & 0x1Fu) < 8uLL)
      {
        v25 = &result[2 * v24];
        goto LABEL_31;
      }
    }
    else
    {
      v24 = 0;
    }
    v77 = 2 * v24;
    v78 = v24 + (a3 & 7);
    v24 = v4 - (a3 & 7);
    v25 = &result[2 * v24];
    v79 = (int16x8_t *)(a2 + v77);
    v80 = &result[v77];
    v81 = v78 - v4;
    do
    {
      v82 = *v79++;
      v84.val[1] = vmovn_s16(v82);
      v84.val[0] = vshrn_n_s16(v82, 8uLL);
      vst2_s8(v80, v84);
      v80 += 16;
      v81 += 8;
    }
    while (v81);
    if ((a3 & 7) == 0)
      return result;
LABEL_31:
    v26 = v4 - v24;
    v27 = (unsigned __int16 *)(a2 + 2 * v24);
    do
    {
      v28 = *v27++;
      *v25++ = bswap32(v28) >> 16;
      --v26;
    }
    while (v26);
    return result;
  }
  if (!v10)
  {
    if (v4 < 8 || (unint64_t)result < a2 + v5 && (unint64_t)&result[v5] > a2)
    {
      v19 = 0;
      v20 = result;
      goto LABEL_24;
    }
    if (v4 >= 0x20)
    {
      v19 = v4 - (a3 & 0x1F);
      v55 = (int8x16_t *)(a2 + 32);
      v56 = result + 32;
      v57 = v19;
      do
      {
        v58 = v56 - 32;
        v60 = v55[-2];
        v59 = v55[-1];
        v62 = *v55;
        v61 = v55[1];
        v55 += 4;
        v89.val[0] = vuzp1q_s8(v60, v59);
        v89.val[1] = vuzp2q_s8(v60, v59);
        vst2q_s8(v58, v89);
        v85.val[0] = vuzp1q_s8(v62, v61);
        v85.val[1] = vuzp2q_s8(v62, v61);
        vst2q_s8(v56, v85);
        v56 += 64;
        v57 -= 32;
      }
      while (v57);
      if ((a3 & 0x1F) == 0)
        return result;
      if ((a3 & 0x1Fu) < 8uLL)
      {
        v20 = &result[2 * v19];
        goto LABEL_24;
      }
    }
    else
    {
      v19 = 0;
    }
    v63 = 2 * v19;
    v64 = v19 + (a3 & 7);
    v19 = v4 - (a3 & 7);
    v20 = &result[2 * v19];
    v65 = (int16x8_t *)(a2 + v63);
    v66 = &result[v63];
    v67 = v64 - v4;
    do
    {
      v68 = *v65++;
      v83.val[0] = vmovn_s16(v68);
      v83.val[1] = vshrn_n_s16(v68, 8uLL);
      vst2_s8(v66, v83);
      v66 += 16;
      v67 += 8;
    }
    while (v67);
    if ((a3 & 7) == 0)
      return result;
LABEL_24:
    v21 = v4 - v19;
    v22 = (__int16 *)(a2 + 2 * v19);
    do
    {
      v23 = *v22++;
      *v20++ = v23;
      --v21;
    }
    while (v21);
    return result;
  }
  if (v4 < 8 || (unint64_t)result < a2 + v4 && (unint64_t)&result[2 * v4] > a2)
  {
    v11 = 0;
    goto LABEL_9;
  }
  if (v4 >= 0x20)
  {
    v11 = v4 - (a3 & 0x1F);
    v29 = (int8x16_t *)(a2 + 16);
    v30 = result + 32;
    v31 = 0uLL;
    v32 = v11;
    do
    {
      v33 = v30 - 32;
      v34 = v29[-1];
      v87.val[0] = *v29;
      vst2q_s8(v33, *(int8x16x2_t *)(&v31 - 1));
      v87.val[1] = 0uLL;
      vst2q_s8(v30, v87);
      v29 += 2;
      v30 += 64;
      v32 -= 32;
    }
    while (v32);
    if ((a3 & 0x1F) == 0)
      return result;
    if ((a3 & 0x1Fu) < 8uLL)
    {
      result += 2 * v11;
LABEL_9:
      v12 = v4 - v11;
      v13 = (char *)(a2 + v11);
      do
      {
        v14 = *v13++;
        *result = v14;
        result[1] = 0;
        result += 2;
        --v12;
      }
      while (v12);
      return result;
    }
  }
  else
  {
    v11 = 0;
  }
  v35 = (uint64_t *)(a2 + v11);
  v36 = &result[2 * v11];
  v37 = v11 + (a3 & 7);
  v11 = v4 - (a3 & 7);
  result += 2 * v11;
  v38 = v37 - v4;
  v39 = 0;
  do
  {
    v40 = *v35++;
    v41 = v40;
    vst2_s8(v36, *(int8x8x2_t *)(&v39 - 1));
    v36 += 16;
    v38 += 8;
  }
  while (v38);
  if ((a3 & 7) != 0)
    goto LABEL_9;
  return result;
}

uint64_t PAL::TextCodecUTF16::stripByteOrderMark(uint64_t this)
{
  *(_BYTE *)(this + 16) = 1;
  return this;
}

uint64_t PAL::TextCodecUTF16::decode(std::span<unsigned char const,18446744073709551615ul>,BOOL,BOOL,BOOL &)::$_0::operator()(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  WTF::StringBuilder *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned __int8 *)(*(_QWORD *)result + 16);
  *(_BYTE *)(*(_QWORD *)result + 16) = 0;
  if (a2 == 65279 && v3 != 0)
    return result;
  v6 = result;
  if (!*(_BYTE *)(v2 + 14))
  {
    v8 = a2 & 0xFC00;
    goto LABEL_23;
  }
  v7 = *(_DWORD *)(v2 + 12);
  if ((v7 & 0xFF0000) == 0)
  {
    __break(1u);
    return result;
  }
  *(_BYTE *)(v2 + 14) = 0;
  v8 = a2 & 0xFC00;
  if (v8 != 56320)
  {
    result = *(_QWORD *)(result + 8);
    **(_BYTE **)(v6 + 16) = 1;
    v12 = *(_QWORD *)(result + 8);
    if (!v12
      || (v13 = *(unsigned int *)(result + 16), v13 >= *(_DWORD *)(v12 + 4))
      || *(_QWORD *)result
      || (*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      result = WTF::StringBuilder::append();
    }
    else
    {
      v14 = *(_QWORD *)(v12 + 8);
      *(_DWORD *)(result + 16) = v13 + 1;
      *(_WORD *)(v14 + 2 * v13) = -3;
    }
LABEL_23:
    if (v8 == 56320)
    {
      result = *(_QWORD *)(v6 + 8);
      **(_BYTE **)(v6 + 16) = 1;
      v15 = *(_QWORD *)(result + 8);
      if (v15)
      {
        v16 = *(unsigned int *)(result + 16);
        if (v16 < *(_DWORD *)(v15 + 4) && !*(_QWORD *)result && (*(_BYTE *)(v15 + 16) & 4) == 0)
        {
          v17 = *(_QWORD *)(v15 + 8);
          *(_DWORD *)(result + 16) = v16 + 1;
          *(_WORD *)(v17 + 2 * v16) = -3;
          return result;
        }
      }
    }
    else
    {
      if (v8 == 55296)
      {
        *(_WORD *)(v2 + 12) = a2;
        *(_BYTE *)(v2 + 14) = 1;
        return result;
      }
      result = *(_QWORD *)(v6 + 8);
      v18 = *(_QWORD *)(result + 8);
      if (v18)
      {
        v19 = *(unsigned int *)(result + 16);
        if (v19 < *(_DWORD *)(v18 + 4) && !*(_QWORD *)result)
        {
          if ((*(_BYTE *)(v18 + 16) & 4) == 0)
          {
            v20 = *(_QWORD *)(v18 + 8);
            *(_DWORD *)(result + 16) = v19 + 1;
            *(_WORD *)(v20 + 2 * v19) = a2;
            return result;
          }
          if (a2 <= 0xFF)
          {
            v21 = *(_QWORD *)(v18 + 8);
            *(_DWORD *)(result + 16) = v19 + 1;
            *(_BYTE *)(v21 + v19) = a2;
            return result;
          }
        }
      }
    }
    return WTF::StringBuilder::append();
  }
  v9 = a2 - 56613888 + ((unsigned __int16)v7 << 10);
  v10 = *(WTF::StringBuilder **)(result + 8);
  v11 = *((_QWORD *)v10 + 1);
  if (v11 || (v11 = *(_QWORD *)v10) != 0)
  {
    if ((*(_BYTE *)(v11 + 16) & 4) != 0 && v9 < 0x100)
      goto LABEL_13;
  }
  else if (v9 <= 0xFF)
  {
LABEL_13:
    result = MEMORY[0x19AEA4824]();
    if (result)
      *(_BYTE *)result = a2;
    return result;
  }
  result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v10);
  if (result)
  {
    if (HIWORD(v9))
    {
      *(_WORD *)(result + 2) = a2 & 0x3FF | 0xDC00;
      *(_WORD *)result = (v9 >> 10) - 10304;
    }
    else
    {
      *(_WORD *)result = v9;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecUTF16::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_0,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = off_1E31F4930;
  *(_WORD *)(result + 8) = 1;
  *(_BYTE *)(result + 10) = 0;
  *(_BYTE *)(result + 12) = 0;
  *(_BYTE *)(result + 14) = 0;
  *(_BYTE *)(result + 16) = 0;
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<PAL::TextCodecUTF16::registerCodecs(void (*)(WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)> &&))::$_1,std::unique_ptr<PAL::TextCodec>>::call@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = off_1E31F4930;
  *(_WORD *)(result + 8) = 0;
  *(_BYTE *)(result + 10) = 0;
  *(_BYTE *)(result + 12) = 0;
  *(_BYTE *)(result + 14) = 0;
  *(_BYTE *)(result + 16) = 0;
  *a1 = result;
  return result;
}

WTF *PAL::TextCodecUTF8::decode@<X0>(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, char a5@<W4>, _BYTE *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  WTF *result;
  size_t v10;
  uint64_t v12;
  unint64_t v13;
  WTF *v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  size_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  unint64_t v37;
  size_t v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  WTF *v47;
  __int16 v48;
  signed int v49;
  _BYTE *v50;
  signed int v51;
  size_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  BOOL v59;
  int v60;
  int v61;
  int v62;
  size_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  int v78;
  char *v79;
  __int16 v80;
  void *v81;
  void *v82;
  uint8x8_t *v83;
  uint16x8_t *v84;
  unint64_t v85;
  uint8x16_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  unsigned int v89;
  WTF *v90;
  WTF *v94;
  WTF *v95;

  v8 = *(int *)(a1 + 8);
  result = (WTF *)(a3 + v8);
  if ((a3 + v8) >> 32)
  {
    *a6 = 1;
    *a7 = 0;
    return result;
  }
  v10 = a3;
  v89 = a3 + v8;
  if ((_DWORD)result)
  {
    v12 = WTF::fastMalloc(result);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v12 = 0;
  }
  v95 = (WTF *)v12;
  v13 = (unint64_t)&a2[v10] & 0xFFFFFFFFFFFFFFF8;
  v14 = (WTF *)v12;
  v15 = (unsigned __int8 *)(a1 + 12);
  v16 = (_BYTE *)(a1 + 13);
LABEL_9:
  while ((_DWORD)v8)
  {
    v90 = v14;
    v17 = v14;
    do
    {
      while (1)
      {
        v19 = (char)*v15;
        if (v19 < 0)
          break;
        *(_BYTE *)v17 = v19;
        v17 = (WTF *)((char *)v17 + 1);
        v18 = *(int *)(a1 + 8);
        LODWORD(v8) = v18 - 1;
        *(_DWORD *)(a1 + 8) = v18 - 1;
        memmove((void *)(a1 + 12), (const void *)(a1 + 13), v18 - 1);
        if (!(_DWORD)v8)
          goto LABEL_55;
      }
      v20 = *v15;
      v21 = PAL::nonASCIISequenceLength(unsigned char)::lengths[v20];
      if (!PAL::nonASCIISequenceLength(unsigned char)::lengths[v20])
      {
LABEL_106:
        v17 = v90;
        goto LABEL_107;
      }
      if (v21 > (int)v8 && v10)
      {
        if (v10 >= v21 - (int)v8)
          v22 = v21 - (int)v8;
        else
          v22 = v10;
        memcpy(&v15[(int)v8], a2, v22);
        v10 -= v22;
        a2 += v22;
        LODWORD(v8) = *(_DWORD *)(a1 + 8) + v22;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (v21 > (int)v8)
        bzero(&v15[(int)v8], v21 - (int)v8);
      if (v21 == 3)
      {
        v25 = *v15;
        if (v25 == 237)
        {
          v26 = (char)*v16;
          if (v26 > -97)
            goto LABEL_41;
        }
        else if (v25 == 224)
        {
          LOBYTE(v26) = *v16;
          if ((*v16 + 64) < 0xE0u)
            goto LABEL_41;
        }
        else
        {
          v26 = (char)*v16;
          if (v26 > -65)
            goto LABEL_41;
        }
        v29 = *(char *)(a1 + 14) <= -65;
        v23 = (v25 << 12) - 925824 + *(unsigned __int8 *)(a1 + 14) + (v26 << 6);
        if (*(char *)(a1 + 14) <= -65)
          v24 = 3;
        else
          v24 = 2;
LABEL_48:
        if (!v29)
          v23 = -1;
        goto LABEL_50;
      }
      if (v21 != 2)
      {
        v27 = *v15;
        if (v27 == 244)
        {
          v28 = (char)*v16;
          if (v28 > -113)
            goto LABEL_41;
        }
        else if (v27 == 240)
        {
          LOBYTE(v28) = *v16;
          if ((*v16 + 64) < 0xD0u)
            goto LABEL_41;
        }
        else
        {
          v28 = (char)*v16;
          if (v28 > -65)
          {
LABEL_41:
            v23 = -1;
            v24 = 1;
            goto LABEL_50;
          }
        }
        if (*(char *)(a1 + 14) > -65)
        {
          v23 = -1;
          v24 = 2;
          goto LABEL_50;
        }
        v29 = *(char *)(a1 + 15) <= -65;
        v23 = (v27 << 18)
            - 63447168
            + (v28 << 12)
            + (*(unsigned __int8 *)(a1 + 14) << 6)
            + *(unsigned __int8 *)(a1 + 15);
        if (*(char *)(a1 + 15) <= -65)
          v24 = v21;
        else
          v24 = 3;
        goto LABEL_48;
      }
      if ((char)*v16 > -65)
        goto LABEL_41;
      v23 = *v16 + (*v15 << 6) - 12416;
      v24 = 2;
LABEL_50:
      if (v21 > (int)v8 && (a4 & 1) == 0 && *(_DWORD *)(a1 + 8) == v24)
        goto LABEL_104;
      if (v23 > 0xFF)
        goto LABEL_106;
      *(_DWORD *)(a1 + 8) -= v24;
      *(_BYTE *)v17 = v23;
      v17 = (WTF *)((char *)v17 + 1);
      LODWORD(v8) = *(_DWORD *)(a1 + 8);
    }
    while ((_DWORD)v8);
LABEL_55:
    if (v10)
      goto LABEL_58;
LABEL_8:
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
    v14 = v17;
    if (!(_DWORD)v8)
      goto LABEL_104;
  }
  v17 = v14;
  if (!v10)
    goto LABEL_8;
  while (1)
  {
LABEL_58:
    while (1)
    {
      v30 = *a2;
      if (v30 < 0)
        break;
      if ((a2 & 7) != 0 || (unint64_t)a2 >= v13)
        goto LABEL_68;
      v31 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x8080808080808080) == 0)
      {
        v32 = 0;
        v33 = a2 + 8;
        v34 = v10;
        do
        {
          *(_QWORD *)((char *)v17 + v32) = v31;
          if (v34 <= 7)
            goto LABEL_257;
          v35 = v32;
          if ((unint64_t)&v33[v32] >= v13)
            break;
          v31 = *(_QWORD *)&v33[v32];
          v32 += 8;
          v34 -= 8;
        }
        while ((v31 & 0x8080808080808080) == 0);
        v36 = v10 - 8;
        v17 = (WTF *)((char *)v17 + v35 + 8);
        v10 = v10 - v35 - 8;
        a2 += v35 + 8;
        if (v36 == v35)
          goto LABEL_8;
      }
      v30 = *a2;
      if ((v30 & 0x80000000) == 0)
      {
LABEL_68:
        *(_BYTE *)v17 = v30;
        if (v10)
        {
          v17 = (WTF *)((char *)v17 + 1);
          --v10;
          ++a2;
          goto LABEL_70;
        }
LABEL_257:
        __break(1u);
LABEL_258:
        __break(0xC471u);
        JUMPOUT(0x1945ED104);
      }
LABEL_70:
      if (!v10)
        goto LABEL_8;
    }
    v37 = PAL::nonASCIISequenceLength(unsigned char)::lengths[*a2];
    if (!PAL::nonASCIISequenceLength(unsigned char)::lengths[*a2])
      goto LABEL_7;
    v38 = v10 - v37;
    if (v10 < v37)
    {
      if (v10 >= 4)
        goto LABEL_258;
      *(_DWORD *)(a1 + 8) = v10;
      memcpy((void *)(a1 + 12), a2, v10);
      a2 = 0;
      LODWORD(v8) = v10;
      v10 = 0;
      v14 = v17;
      if ((_DWORD)v8)
        goto LABEL_9;
LABEL_104:
      if (a4)
      {
        *(_DWORD *)(a1 + 8) = 0;
      }
      else if ((_DWORD)v17 == (_DWORD)v95)
      {
LABEL_251:
        WTF::StringImpl::adopt();
        return (WTF *)WTF::fastFree(v95, v82);
      }
      *(_BYTE *)(a1 + 16) = 0;
      goto LABEL_251;
    }
    v39 = *a2;
    if ((_DWORD)v37 != 3)
      break;
    if (v39 == 237)
    {
      v41 = a2[1];
      if (v41 > -97)
        goto LABEL_7;
    }
    else if (v39 == 224)
    {
      LOBYTE(v41) = a2[1];
      if ((v41 + 64) < 0xE0u)
        goto LABEL_7;
    }
    else
    {
      v41 = a2[1];
      if (v41 > -65)
        goto LABEL_7;
    }
    if (a2[2] > -65)
      goto LABEL_7;
    v40 = (v39 << 12) - 925824 + a2[2] + (v41 << 6);
    if (v40 == -1)
      goto LABEL_7;
LABEL_99:
    if (v40 > 0xFF)
      goto LABEL_107;
    a2 += v37;
    *(_BYTE *)v17 = v40;
    v17 = (WTF *)((char *)v17 + 1);
    v10 -= v37;
    if (!v38)
      goto LABEL_8;
  }
  if ((_DWORD)v37 == 2)
  {
    if (a2[1] > -65)
      goto LABEL_7;
    v40 = a2[1] + (v39 << 6) - 12416;
    if (v40 == -1)
      goto LABEL_7;
    goto LABEL_99;
  }
  if (v39 == 244)
  {
    v42 = a2[1];
    if (v42 > -113)
      goto LABEL_7;
  }
  else if (v39 == 240)
  {
    LOBYTE(v42) = a2[1];
    if ((v42 + 64) < 0xD0u)
      goto LABEL_7;
  }
  else
  {
    v42 = a2[1];
    if (v42 > -65)
      goto LABEL_7;
  }
  if (a2[2] <= -65 && a2[3] <= -65)
  {
    v40 = (v39 << 18) - 63447168 + (v42 << 12) + (a2[2] << 6) + a2[3];
    if (v40 != -1)
      goto LABEL_99;
  }
LABEL_7:
  *a6 = 1;
  if ((a5 & 1) != 0)
    goto LABEL_8;
LABEL_107:
  if (!v89)
  {
    v43 = 0;
    v94 = 0;
    v44 = (unint64_t)v95;
    if (v95 < v17)
      goto LABEL_109;
    goto LABEL_116;
  }
  v43 = WTF::fastMalloc((WTF *)(2 * v89));
  v94 = (WTF *)v43;
  v44 = (unint64_t)v95;
  if (v95 >= v17)
  {
LABEL_116:
    v46 = (char *)v43;
    goto LABEL_117;
  }
LABEL_109:
  v45 = (unint64_t)v17 - v44;
  if ((unint64_t)v17 - v44 < 0x20 || v43 < (unint64_t)v17 && v44 < v43 + 2 * v45)
  {
    v46 = (char *)v43;
    v47 = (WTF *)v44;
    goto LABEL_113;
  }
  v46 = (char *)(v43 + 2 * (v45 & 0xFFFFFFFFFFFFFFE0));
  v47 = (WTF *)(v44 + (v45 & 0xFFFFFFFFFFFFFFE0));
  v83 = (uint8x8_t *)(v44 + 16);
  v84 = (uint16x8_t *)(v43 + 32);
  v85 = v45 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v86 = *(uint8x16_t *)v83[-2].i8;
    v87 = vmovl_u8(*v83);
    v88 = vmovl_high_u8(*(uint8x16_t *)v83->i8);
    v84[-2] = vmovl_u8(*(uint8x8_t *)v86.i8);
    v84[-1] = vmovl_high_u8(v86);
    *v84 = v87;
    v84[1] = v88;
    v84 += 4;
    v83 += 4;
    v85 -= 32;
  }
  while (v85);
  if (v45 != (v45 & 0xFFFFFFFFFFFFFFE0))
  {
    do
    {
LABEL_113:
      v48 = *(unsigned __int8 *)v47;
      v47 = (WTF *)((char *)v47 + 1);
      *(_WORD *)v46 = v48;
      v46 += 2;
    }
    while (v47 != v17);
  }
LABEL_117:
  v49 = *(_DWORD *)(a1 + 8);
  v50 = a6;
  while (2)
  {
    while (2)
    {
      if (!v49)
        goto LABEL_121;
      while (1)
      {
LABEL_124:
        while (((char)*v15 & 0x80000000) == 0)
        {
          *(_WORD *)v46 = *v15;
          v46 += 2;
          *(_DWORD *)(a1 + 8) = --v49;
          memmove((void *)(a1 + 12), (const void *)(a1 + 13), v49);
          if (!v49)
            goto LABEL_121;
        }
        v51 = PAL::nonASCIISequenceLength(unsigned char)::lengths[*v15];
        if (PAL::nonASCIISequenceLength(unsigned char)::lengths[*v15])
          break;
        *v50 = 1;
        if ((a5 & 1) != 0)
          goto LABEL_244;
        *(_WORD *)v46 = -3;
        v46 += 2;
        *(_DWORD *)(a1 + 8) = --v49;
        memmove((void *)(a1 + 12), (const void *)(a1 + 13), v49);
        if (!v49)
          goto LABEL_121;
      }
      if (v51 > v49 && v10)
      {
        if (v10 >= v51 - v49)
          v52 = v51 - v49;
        else
          v52 = v10;
        memcpy(&v15[v49], a2, v52);
        v10 -= v52;
        a2 += v52;
        v49 = *(_DWORD *)(a1 + 8) + v52;
        v50 = a6;
        *(_DWORD *)(a1 + 8) = v49;
      }
      if (v51 > v49)
        bzero(&v15[v49], v51 - v49);
      if (v51 == 3)
      {
        v55 = *v15;
        if (v55 == 237)
        {
          v56 = (char)*v16;
          if (v56 > -97)
            goto LABEL_156;
        }
        else if (v55 == 224)
        {
          LOBYTE(v56) = *v16;
          if ((*v16 + 64) < 0xE0u)
            goto LABEL_156;
        }
        else
        {
          v56 = (char)*v16;
          if (v56 > -65)
            goto LABEL_156;
        }
        v59 = *(char *)(a1 + 14) <= -65;
        v53 = (v55 << 12) - 925824 + *(unsigned __int8 *)(a1 + 14) + (v56 << 6);
        if (*(char *)(a1 + 14) <= -65)
          v54 = 3;
        else
          v54 = 2;
      }
      else
      {
        if (v51 == 2)
        {
          if ((char)*v16 <= -65)
          {
            v53 = *v16 + (*v15 << 6) - 12416;
            v54 = 2;
            goto LABEL_165;
          }
LABEL_156:
          v53 = -1;
          v54 = 1;
          goto LABEL_165;
        }
        v57 = *v15;
        if (v57 == 244)
        {
          v58 = (char)*v16;
          if (v58 > -113)
            goto LABEL_156;
        }
        else if (v57 == 240)
        {
          LOBYTE(v58) = *v16;
          if ((*v16 + 64) < 0xD0u)
            goto LABEL_156;
        }
        else
        {
          v58 = (char)*v16;
          if (v58 > -65)
            goto LABEL_156;
        }
        if (*(char *)(a1 + 14) > -65)
        {
          v53 = -1;
          v54 = 2;
          goto LABEL_165;
        }
        v59 = *(char *)(a1 + 15) <= -65;
        v53 = (v57 << 18)
            - 63447168
            + (v58 << 12)
            + (*(unsigned __int8 *)(a1 + 14) << 6)
            + *(unsigned __int8 *)(a1 + 15);
        if (*(char *)(a1 + 15) <= -65)
          v54 = v51;
        else
          v54 = 3;
      }
      if (!v59)
        v53 = -1;
LABEL_165:
      if (v51 > v49 && (a4 & 1) == 0 && *(_DWORD *)(a1 + 8) == v54)
        goto LABEL_244;
      if (v53 != -1)
      {
        v49 = *(_DWORD *)(a1 + 8) - v54;
        *(_DWORD *)(a1 + 8) = v49;
        v60 = *(unsigned __int8 *)(a1 + 16);
        *(_BYTE *)(a1 + 16) = 0;
        if (v60 && v53 == 65279)
        {
          if (!v49)
            goto LABEL_121;
        }
        else if (HIWORD(v53))
        {
          *((_WORD *)v46 + 1) = v53 & 0x3FF | 0xDC00;
          *(_WORD *)v46 = (v53 >> 10) - 10304;
          v49 = *(_DWORD *)(a1 + 8);
          v46 += 4;
          if (!v49)
            goto LABEL_121;
        }
        else
        {
          *(_WORD *)v46 = v53;
          v49 = *(_DWORD *)(a1 + 8);
          v46 += 2;
          if (!v49)
            goto LABEL_121;
        }
        goto LABEL_124;
      }
      *v50 = 1;
      v61 = *(_DWORD *)(a1 + 8);
      if ((a5 & 1) == 0)
      {
        *(_WORD *)v46 = -3;
        v46 += 2;
        v49 = v61 - v54;
        *(_DWORD *)(a1 + 8) = v61 - v54;
        memmove((void *)(a1 + 12), &v15[v54], (int)(v61 - v54));
        if (!v49)
          goto LABEL_121;
        goto LABEL_124;
      }
      if (v61)
        goto LABEL_244;
LABEL_121:
      if (!v10)
        goto LABEL_244;
LABEL_184:
      v62 = *a2;
      if (*a2 < 0)
      {
        v66 = *a2;
        v67 = PAL::nonASCIISequenceLength(unsigned char)::lengths[v66];
        if (!PAL::nonASCIISequenceLength(unsigned char)::lengths[v66])
          goto LABEL_223;
        v63 = v10 - v67;
        if (v10 < v67)
        {
          if (v10 < 4)
          {
            v49 = v10;
            *(_DWORD *)(a1 + 8) = v10;
            memcpy((void *)(a1 + 12), a2, v10);
            a2 = 0;
            v10 = 0;
            if (!v49)
              goto LABEL_244;
            continue;
          }
          goto LABEL_258;
        }
        if ((_DWORD)v67 != 3)
        {
          if ((_DWORD)v67 == 2)
          {
            if (a2[1] <= -65)
            {
              v68 = a2[1] + (v62 << 6) - 12416;
              if (v68 == -1)
                goto LABEL_223;
LABEL_232:
              a2 += v67;
              if (v68 == 65279)
              {
                if (v46 == (char *)v94)
                {
                  v78 = *(unsigned __int8 *)(a1 + 16);
                  *(_BYTE *)(a1 + 16) = 0;
                  if (v78)
                    goto LABEL_183;
                  v79 = v46 + 2;
                  LOWORD(v68) = -257;
LABEL_239:
                  *(_WORD *)v46 = v68;
                  v46 = v79;
LABEL_183:
                  v10 = v63;
                  if (!v63)
                    goto LABEL_119;
                  goto LABEL_184;
                }
              }
              else if (HIWORD(v68))
              {
                v80 = v68 & 0x3FF | 0xDC00;
                v68 = (v68 >> 10) - 10304;
                v79 = v46 + 4;
                *((_WORD *)v46 + 1) = v80;
                goto LABEL_239;
              }
              v79 = v46 + 2;
              goto LABEL_239;
            }
            goto LABEL_219;
          }
          if (v62 == 244)
          {
            v77 = a2[1];
            if (v77 > -113)
              goto LABEL_219;
          }
          else
          {
            if (v62 == 240)
            {
              LOBYTE(v77) = a2[1];
              if ((v77 + 64) >= 0xD0u)
                goto LABEL_221;
LABEL_219:
              LODWORD(v67) = 1;
              goto LABEL_223;
            }
            v77 = a2[1];
            if (v77 > -65)
              goto LABEL_219;
          }
LABEL_221:
          if (a2[2] > -65)
          {
LABEL_222:
            LODWORD(v67) = 2;
            goto LABEL_223;
          }
          if (a2[3] <= -65)
          {
            v68 = (v62 << 18)
                - 63447168
                + (v77 << 12)
                + (a2[2] << 6)
                + a2[3];
            if (v68 != -1)
              goto LABEL_232;
          }
          else
          {
            LODWORD(v67) = 3;
          }
LABEL_223:
          *v50 = 1;
          if ((a5 & 1) != 0)
            goto LABEL_119;
          *(_WORD *)v46 = -3;
          if (v67 <= 1)
            v67 = 1;
          else
            v67 = v67;
          v63 = v10 - v67;
          if (v10 < v67)
            goto LABEL_257;
          v46 += 2;
          a2 += v67;
          goto LABEL_183;
        }
        if (v62 == 237)
        {
          v76 = a2[1];
          if (v76 > -97)
            goto LABEL_219;
        }
        else if (v62 == 224)
        {
          LOBYTE(v76) = a2[1];
          if ((v76 + 64) < 0xE0u)
            goto LABEL_219;
        }
        else
        {
          v76 = a2[1];
          if (v76 > -65)
            goto LABEL_219;
        }
        if (a2[2] <= -65)
        {
          v68 = (v62 << 12) - 925824 + a2[2] + (v76 << 6);
          if (v68 == -1)
            goto LABEL_223;
          goto LABEL_232;
        }
        goto LABEL_222;
      }
      break;
    }
    if ((a2 & 7) != 0 || (unint64_t)a2 >= v13)
      goto LABEL_182;
    v64 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 0x8080808080808080) != 0)
    {
      v65 = *a2;
      if (v65 < 0)
      {
LABEL_203:
        v63 = v10;
        goto LABEL_183;
      }
LABEL_181:
      LOWORD(v62) = v65;
LABEL_182:
      *(_WORD *)v46 = v62;
      v46 += 2;
      v63 = v10 - 1;
      ++a2;
      goto LABEL_183;
    }
    v69 = 0;
    v70 = -16;
    v71 = v10;
    do
    {
      v72 = v69;
      v73 = v70;
      v74 = &v46[2 * v69];
      *(_WORD *)v74 = v64;
      *((_WORD *)v74 + 1) = a2[v72 + 1];
      *((_WORD *)v74 + 2) = a2[v72 + 2];
      *((_WORD *)v74 + 3) = a2[v72 + 3];
      *((_WORD *)v74 + 4) = a2[v72 + 4];
      *((_WORD *)v74 + 5) = a2[v72 + 5];
      *((_WORD *)v74 + 6) = a2[v72 + 6];
      *((_WORD *)v74 + 7) = a2[v72 + 7];
      if (v71 <= 7)
        goto LABEL_257;
      v75 = &a2[v72 + 8];
      if ((unint64_t)v75 >= v13)
        break;
      v64 = *(_QWORD *)v75;
      v69 = v72 + 8;
      v70 -= 16;
      v71 -= 8;
    }
    while ((v64 & 0x8080808080808080) == 0);
    v46 -= v73;
    a2 += v72 + 8;
    if (v10 - 8 != v72)
    {
      v10 = v10 - v72 - 8;
      v65 = *a2;
      if (v65 < 0)
        goto LABEL_203;
      goto LABEL_181;
    }
    v10 = 0;
LABEL_119:
    v49 = *(_DWORD *)(a1 + 8);
    if (v49)
      continue;
    break;
  }
LABEL_244:
  if (a4)
  {
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_247;
  }
  if (((unint64_t)(v46 - (char *)v94) >> 1))
LABEL_247:
    *(_BYTE *)(a1 + 16) = 0;
  WTF::StringImpl::adopt();
  WTF::fastFree(v94, v81);
  return (WTF *)WTF::fastFree(v95, v82);
}

uint64_t PAL::TextCodecUTF8::stripByteOrderMark(uint64_t this)
{
  *(_BYTE *)(this + 16) = 1;
  return this;
}

PAL::TextEncoding *PAL::TextEncoding::TextEncoding(PAL::TextEncoding *this, PAL *a2)
{
  const char *v3;
  const char *v4;
  __int16 v5;
  const char *v7[2];

  *(_QWORD *)this = &off_1E31F4A18;
  v3 = (const char *)PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, a2, (const char *)a2);
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v4;
  v7[0] = v3;
  v7[1] = v4;
  if (v4 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v7))
    {
      v5 = 165;
    }
    else
    {
      v5 = 92;
    }
    *((_WORD *)this + 12) = v5;
    return this;
  }
  else
  {
    *((_WORD *)this + 12) = 92;
    return this;
  }
}

{
  const char *v3;
  const char *v4;
  __int16 v5;
  const char *v7[2];

  *(_QWORD *)this = &off_1E31F4A18;
  v3 = (const char *)PAL::atomCanonicalTextEncodingName(a2, (const char *)a2);
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v4;
  v7[0] = v3;
  v7[1] = v4;
  if (v4 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v7))
    {
      v5 = 165;
    }
    else
    {
      v5 = 92;
    }
    *((_WORD *)this + 12) = v5;
    return this;
  }
  else
  {
    *((_WORD *)this + 12) = 92;
    return this;
  }
}

uint64_t PAL::TextEncoding::backslashAsCurrencySymbol(PAL::TextEncoding *this)
{
  const char *v1;
  BOOL v2;
  const char *v4[2];

  v1 = (const char *)*((_QWORD *)this + 2);
  v4[0] = *((const char **)this + 1);
  v4[1] = v1;
  if (v1)
    v2 = PAL::nonBackslashEncodings == 0;
  else
    v2 = 1;
  if (v2 || !*(_QWORD *)PAL::nonBackslashEncodings)
    return 92;
  if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v4))
  {
    return 165;
  }
  return 92;
}

uint64_t PAL::TextEncoding::TextEncoding(uint64_t a1, unint64_t a2, const char *a3)
{
  const char *v4;
  const char *v5;
  __int16 v6;
  const char *v8[2];

  *(_QWORD *)a1 = &off_1E31F4A18;
  v4 = (const char *)PAL::atomCanonicalTextEncodingName(a2, a3);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v8[0] = v4;
  v8[1] = v5;
  if (v5 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v8))
    {
      v6 = 165;
    }
    else
    {
      v6 = 92;
    }
    *(_WORD *)(a1 + 24) = v6;
    return a1;
  }
  else
  {
    *(_WORD *)(a1 + 24) = 92;
    return a1;
  }
}

{
  const char *v4;
  const char *v5;
  __int16 v6;
  const char *v8[2];

  *(_QWORD *)a1 = &off_1E31F4A18;
  v4 = (const char *)PAL::atomCanonicalTextEncodingName(a2, a3);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v8[0] = v4;
  v8[1] = v5;
  if (v5 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v8))
    {
      v6 = 165;
    }
    else
    {
      v6 = 92;
    }
    *(_WORD *)(a1 + 24) = v6;
    return a1;
  }
  else
  {
    *(_WORD *)(a1 + 24) = 92;
    return a1;
  }
}

PAL::TextEncoding *PAL::TextEncoding::TextEncoding(PAL::TextEncoding *this, const WTF::String *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  const char *v7;
  __int16 v8;
  const char *v10[2];

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  *(_QWORD *)this = &off_1E31F4A18;
  v6 = (const char *)PAL::atomCanonicalTextEncodingName(v4, (const char *)v5);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v7;
  v10[0] = v6;
  v10[1] = v7;
  if (v7 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v10))
    {
      v8 = 165;
    }
    else
    {
      v8 = 92;
    }
    *((_WORD *)this + 12) = v8;
    return this;
  }
  else
  {
    *((_WORD *)this + 12) = 92;
    return this;
  }
}

{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  const char *v7;
  __int16 v8;
  const char *v10[2];

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  *(_QWORD *)this = &off_1E31F4A18;
  v6 = (const char *)PAL::atomCanonicalTextEncodingName(v4, (const char *)v5);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v7;
  v10[0] = v6;
  v10[1] = v7;
  if (v7 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v10))
    {
      v8 = 165;
    }
    else
    {
      v8 = 92;
    }
    *((_WORD *)this + 12) = v8;
    return this;
  }
  else
  {
    *((_WORD *)this + 12) = 92;
    return this;
  }
}

PAL *PAL::TextEncoding::decode@<X0>(PAL *result@<X0>, const PAL::TextEncoding *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  PAL *v10;

  if (*((_QWORD *)result + 2))
  {
    PAL::newTextCodec(result, a2, &v10);
    (*(void (**)(PAL *, const PAL::TextEncoding *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, a2, a3, 1, a4, a5);
    result = v10;
    v10 = 0;
    if (result)
      return (PAL *)(*(uint64_t (**)(PAL *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *a6 = 0;
  }
  return result;
}

PAL *PAL::TextEncoding::encode@<X0>(PAL *result@<X0>, const PAL::TextEncoding *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  BOOL v6;
  PAL *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[3];
  PAL *v14;

  if (*((_QWORD *)result + 2))
    v6 = a3 == 0;
  else
    v6 = 1;
  if (v6)
  {
    *a6 = 0;
    a6[1] = 0;
    return result;
  }
  if (a5)
  {
    PAL::newTextCodec(result, a2, &v14);
    v10 = v14;
    WTF::normalizedNFC();
    (*(void (**)(PAL *, WTF::StringImpl *, WTF::StringImpl *, uint64_t))(*(_QWORD *)v10 + 32))(v10, v13[1], v13[2], a4);
    v12 = v13[0];
    v13[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v11);
        result = v14;
        v14 = 0;
        if (!result)
          return result;
        return (PAL *)(*(uint64_t (**)(PAL *))(*(_QWORD *)result + 8))(result);
      }
      *(_DWORD *)v12 -= 2;
    }
    result = v14;
    v14 = 0;
    if (!result)
      return result;
    return (PAL *)(*(uint64_t (**)(PAL *))(*(_QWORD *)result + 8))(result);
  }
  PAL::newTextCodec(result, a2, v13);
  (*(void (**)(WTF::StringImpl *, const PAL::TextEncoding *, uint64_t, uint64_t))(*(_QWORD *)v13[0] + 32))(v13[0], a2, a3, a4);
  result = v13[0];
  v13[0] = 0;
  if (result)
    return (PAL *)(*(uint64_t (**)(PAL *))(*(_QWORD *)result + 8))(result);
  return result;
}

const char *PAL::TextEncoding::domName(PAL::TextEncoding *this, const char *a2)
{
  const char *v2;
  const char *v3;
  uint64_t v6;

  if ((PAL::didExtendTextCodecMaps & 1) == 0)
    return (const char *)*((_QWORD *)this + 1);
  {
    v2 = (const char *)PAL::TextEncoding::domName(void)const::windows949;
    v3 = (const char *)*((_QWORD *)this + 1);
    if (!v3)
      goto LABEL_9;
  }
  else
  {
    v2 = (const char *)PAL::atomCanonicalTextEncodingName((uint64_t *)"windows-949", (PAL *)"windows-949", a2);
    PAL::TextEncoding::domName(void)const::windows949 = (uint64_t)v2;
    unk_1EE2E6D90 = v6;
    v3 = (const char *)*((_QWORD *)this + 1);
    if (!v3)
      goto LABEL_9;
  }
  if (v2)
  {
    if (strcmp(v3, v2))
      return v3;
    return "EUC-KR";
  }
LABEL_9:
  if (v3 != v2)
    return v3;
  return "EUC-KR";
}

BOOL PAL::TextEncoding::isJapanese(PAL::TextEncoding *this)
{
  const char *v1;
  BOOL v2;
  const char *v4[2];

  v1 = (const char *)*((_QWORD *)this + 2);
  v4[0] = *((const char **)this + 1);
  v4[1] = v1;
  if (v1)
    v2 = PAL::japaneseEncodings == 0;
  else
    v2 = 1;
  return !v2
      && *(_QWORD *)PAL::japaneseEncodings
      && WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::japaneseEncodings, v4) != 0;
}

uint64_t *PAL::UTF16LittleEndianEncoding(PAL *this)
{
  {
    WTF::NeverDestroyed<PAL::TextEncoding,WTF::AnyThreadsAccessTraits>::NeverDestroyed<char const(&)[6]>((uint64_t)&PAL::UTF16LittleEndianEncoding(void)::globalUTF16LittleEndianEncoding, (PAL *)"UTF-16LE");
  }
  return &PAL::UTF16LittleEndianEncoding(void)::globalUTF16LittleEndianEncoding;
}

uint64_t *PAL::UTF16BigEndianEncoding(PAL *this)
{
  {
    WTF::NeverDestroyed<PAL::TextEncoding,WTF::AnyThreadsAccessTraits>::NeverDestroyed<char const(&)[6]>((uint64_t)&PAL::UTF16BigEndianEncoding(void)::globalUTF16BigEndianEncoding, (PAL *)"UTF-16BE");
  }
  return &PAL::UTF16BigEndianEncoding(void)::globalUTF16BigEndianEncoding;
}

uint64_t WTF::NeverDestroyed<PAL::TextEncoding,WTF::AnyThreadsAccessTraits>::NeverDestroyed<char const(&)[6]>(uint64_t a1, PAL *this)
{
  const char *v3;
  const char *v4;
  __int16 v5;
  const char *v7[2];

  *(_QWORD *)a1 = &off_1E31F4A18;
  v3 = (const char *)PAL::atomCanonicalTextEncodingName(this, (const char *)this);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v7[0] = v3;
  v7[1] = v4;
  if (v4 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v7))
    {
      v5 = 165;
    }
    else
    {
      v5 = 92;
    }
    *(_WORD *)(a1 + 24) = v5;
    return a1;
  }
  else
  {
    *(_WORD *)(a1 + 24) = 92;
    return a1;
  }
}

uint64_t *PAL::Latin1Encoding(PAL *this)
{
  {
    WTF::NeverDestroyed<PAL::TextEncoding,WTF::AnyThreadsAccessTraits>::NeverDestroyed<char const(&)[6]>((uint64_t)&PAL::Latin1Encoding(void)::globalLatin1Encoding, (PAL *)"latin1");
  }
  return &PAL::Latin1Encoding(void)::globalLatin1Encoding;
}

uint64_t *PAL::WindowsLatin1Encoding(PAL *this)
{
  {
    WTF::NeverDestroyed<PAL::TextEncoding,WTF::AnyThreadsAccessTraits>::NeverDestroyed<char const(&)[6]>((uint64_t)&PAL::WindowsLatin1Encoding(void)::globalWindowsLatin1Encoding, (PAL *)"WinLatin-1");
  }
  return &PAL::WindowsLatin1Encoding(void)::globalWindowsLatin1Encoding;
}

void PAL::TextEncoding::~TextEncoding(PAL::TextEncoding *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t PAL::detectTextEncoding(uint64_t a1, uint64_t a2, PAL *a3, uint64_t a4)
{
  const char *v6;
  const char *v8;
  const char *v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  const char *v13;

  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_WORD *)(a4 + 24) = 0;
  ucsdet_open();
  ucsdet_enableInputFilter();
  ucsdet_setText();
  ucsdet_detectAll();
  if (a3)
  {
    v12 = (const char *)PAL::atomCanonicalTextEncodingName(a3, v6);
    v13 = v6;
    if (v6)
    {
      if (PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
        WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v12);
    }
  }
  v8 = (const char *)PAL::atomCanonicalTextEncodingName(0, v6);
  v10 = v9;
  v12 = v8;
  v13 = v9;
  if (v9 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v12))
    {
      v11 = 165;
    }
    else
    {
      v11 = 92;
    }
  }
  else
  {
    v11 = 92;
  }
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = v10;
  *(_WORD *)(a4 + 24) = v11;
  ucsdet_close();
  return 1;
}

unint64_t WTF::Vector<WTF::ASCIILiteral,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 16 * v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 28)
        goto LABEL_30;
      v18 = *(unsigned int *)(a1 + 12);
      v19 = (void *)WTF::fastMalloc((WTF *)(16 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      memcpy(v19, v5, 16 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v10 > v7)
  {
    if (!(v10 >> 28))
    {
      v11 = (void *)WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      memcpy(v11, v5, 16 * v6);
      v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 16 * ((uint64_t)(a3 - (_QWORD)v5) >> 4);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1945EDEC8);
  }
  v13 = *(void **)a1;
  return (unint64_t)v13 + 16 * ((uint64_t)(a3 - (_QWORD)v5) >> 4);
}

uint64_t PAL::addEncodingName(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  const char *v24;
  unsigned int v25;
  const char *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;

  v2 = *(_QWORD *)qword_1ECE7EBD8;
  if (*(_QWORD *)qword_1ECE7EBD8)
  {
    v3 = (uint64_t *)result;
    v4 = *(_DWORD *)(v2 - 8);
    v5 = *a2;
    if (*a2)
    {
      v6 = -1640531527;
      v7 = a2 + 1;
      do
      {
        v8 = 1025 * (v6 + *(char *)(MEMORY[0x1E0CBF868] + v5));
        v6 = v8 ^ (v8 >> 6);
        v9 = *v7++;
        v5 = v9;
      }
      while (v9);
      v10 = (32769 * ((9 * v6) ^ ((9 * v6) >> 11))) & v4;
      v11 = *(unsigned __int8 **)(v2 + 32 * v10);
      if (!v11)
        return result;
    }
    else
    {
      v10 = v4 & 0xECD739E9;
      v11 = *(unsigned __int8 **)(v2 + 32 * v10);
      if (!v11)
        return result;
    }
    v12 = 0;
    while (v11 == (unsigned __int8 *)-1)
    {
LABEL_9:
      v10 = (++v12 + (_DWORD)v10) & v4;
      v11 = *(unsigned __int8 **)(v2 + 32 * v10);
      if (!v11)
        return result;
    }
    v13 = a2;
    do
    {
      v14 = *v11;
      v15 = *v13;
      result = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v13);
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v11) != (_DWORD)result)
        goto LABEL_9;
      ++v13;
      ++v11;
      if (v14)
        v16 = v15 == 0;
      else
        v16 = 1;
    }
    while (!v16);
    if (v15 | v14)
      goto LABEL_9;
    v17 = v2 + 32 * v10;
    v18 = *(_QWORD *)(v17 + 24);
    if (v18)
    {
      v19 = *(const char **)(v17 + 16);
      v20 = *v3;
      if (*v3
        || (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(v3, 8u), (v20 = *v3) != 0))
      {
        v21 = *(_DWORD *)(v20 - 8);
        v22 = -1640531527;
        v23 = v18 - 1;
        if ((_DWORD)v18 == 1)
          goto LABEL_30;
      }
      else
      {
        v21 = 0;
        v22 = -1640531527;
        v23 = v18 - 1;
        if ((_DWORD)v18 == 1)
          goto LABEL_30;
      }
      if (v23 == 1)
      {
        v24 = v19;
LABEL_29:
        v22 = ((v22 + *(unsigned __int8 *)v24) ^ ((v22 + *(unsigned __int8 *)v24) << 11))
            + (((v22 + *(unsigned __int8 *)v24) ^ ((v22 + *(unsigned __int8 *)v24) << 11)) >> 17);
        goto LABEL_30;
      }
      v25 = v23 >> 1;
      v26 = v19;
      do
      {
        v27 = v22 + *(unsigned __int8 *)v26;
        v28 = (v27 << 16) ^ (*((unsigned __int8 *)v26 + 1) << 11);
        v22 = (v28 ^ v27) + ((v28 ^ v27) >> 11);
        v26 += 2;
        --v25;
      }
      while (v25);
      if ((v23 & 1) != 0)
      {
        v24 = &v19[2 * (v23 >> 1)];
        goto LABEL_29;
      }
LABEL_30:
      v29 = (v22 ^ (8 * v22)) + ((v22 ^ (8 * v22)) >> 5);
      v30 = (v29 ^ (4 * v29)) + ((v29 ^ (4 * v29)) >> 15);
      v31 = v30 ^ (v30 << 10);
      if (!v31)
        v31 = 0x800000;
      v32 = v31 & v21;
      v33 = (uint64_t *)(v20 + 16 * (v31 & v21));
      result = *v33;
      if (*v33)
      {
        v34 = 0;
        if (v19)
        {
          v35 = 1;
          while (1)
          {
            if (result != -1)
            {
              result = strcmp((const char *)result, v19);
              v33 = v34;
              if (!(_DWORD)result)
                break;
            }
            v34 = v33;
            v32 = (v32 + v35) & v21;
            v33 = (uint64_t *)(v20 + 16 * v32);
            result = *v33;
            ++v35;
            if (!*v33)
              goto LABEL_44;
          }
        }
        else
        {
          v36 = 1;
          while (1)
          {
            if (result != -1)
            {
              v33 = v34;
              if (!result)
                break;
            }
            v34 = v33;
            v32 = (v32 + v36) & v21;
            v33 = (uint64_t *)(v20 + 16 * v32);
            result = *v33;
            ++v36;
            if (!*v33)
            {
LABEL_44:
              if (v34)
              {
                *v34 = 0;
                v34[1] = 0;
                --*(_DWORD *)(*v3 - 16);
                v33 = v34;
              }
              goto LABEL_46;
            }
          }
        }
        return result;
      }
LABEL_46:
      *v33 = (uint64_t)v19;
      v33[1] = v18;
      if (*v3)
      {
        ++*(_DWORD *)(*v3 - 12);
        v37 = *v3;
        if (*v3)
          goto LABEL_48;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v37 = *v3;
        if (*v3)
        {
LABEL_48:
          v38 = (*(_DWORD *)(v37 - 16) + *(_DWORD *)(v37 - 12));
          v39 = *(unsigned int *)(v37 - 4);
          if (v39 <= 0x400)
            goto LABEL_49;
          goto LABEL_54;
        }
      }
      v38 = *(unsigned int *)(v37 - 16);
      v39 = *(unsigned int *)(v37 - 4);
      if (v39 <= 0x400)
      {
LABEL_49:
        if (3 * v39 > 4 * v38)
          return result;
        if (!(_DWORD)v39)
        {
          v40 = 8;
          return WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(v3, v40);
        }
LABEL_56:
        v40 = (_DWORD)v39 << (6 * *(_DWORD *)(v37 - 12) >= (2 * v39));
        return WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(v3, v40);
      }
LABEL_54:
      if (v39 > 2 * v38)
        return result;
      goto LABEL_56;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (unsigned __int8 **)(v4 + 16 * v9);
      v11 = *v10;
      if ((unint64_t)(*v10 + 1) >= 2)
        break;
LABEL_6:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), (void *)v8);
    }
    v12 = *a1;
    if (*a1)
    {
      v13 = *(_DWORD *)(v12 - 8);
      v14 = v10[1];
      if (v14)
        goto LABEL_10;
    }
    else
    {
      v13 = 0;
      v14 = v10[1];
      if (v14)
      {
LABEL_10:
        v15 = -1640531527;
        v16 = (_DWORD)v14 - 1;
        if (!v16)
          goto LABEL_17;
        if (v16 != 1)
        {
          LODWORD(v8) = v16 >> 1;
          v17 = *v10;
          do
          {
            v18 = v15 + *v17;
            v19 = (v18 << 16) ^ (v17[1] << 11);
            v15 = (v19 ^ v18) + ((v19 ^ v18) >> 11);
            v17 += 2;
            v8 = (v8 - 1);
          }
          while ((_DWORD)v8);
          if ((v16 & 1) == 0)
          {
LABEL_17:
            v21 = (v15 ^ (8 * v15)) + ((v15 ^ (8 * v15)) >> 5);
            v22 = (v21 ^ (4 * v21)) + ((v21 ^ (4 * v21)) >> 15);
            v23 = v22 ^ (v22 << 10);
            if (!v23)
              v23 = 0x800000;
            goto LABEL_22;
          }
          v11 += 2 * (v16 >> 1);
        }
        v20 = (v15 + *v11) ^ ((v15 + *v11) << 11);
        v15 = v20 + (v20 >> 17);
        goto LABEL_17;
      }
    }
    v23 = 0;
LABEL_22:
    v24 = 0;
    do
    {
      v25 = v23 & v13;
      v23 = ++v24 + v25;
    }
    while (*(_QWORD *)(v12 + 16 * v25));
    *(_OWORD *)(v12 + 16 * v25) = *(_OWORD *)v10;
    goto LABEL_6;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), (void *)v8);
  return result;
}

const char **WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(const char ***a1, const char **a2)
{
  const char **v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  const char *v7;
  unsigned int v8;
  const char *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  const char **v16;
  const char *v17;
  const char *v18;
  int v19;
  int i;
  const char *v22;

  v2 = *a1;
  if (*a1)
  {
    v3 = *((_DWORD *)v2 - 2);
    v4 = (unsigned __int8 *)a2[1];
    if (v4)
    {
      v5 = -1640531527;
      v6 = (_DWORD)v4 - 1;
      if ((_DWORD)v4 == 1)
        goto LABEL_10;
      v7 = *a2;
      if (v6 != 1)
      {
        v8 = v6 >> 1;
        v9 = *a2;
        do
        {
          v10 = v5 + *(unsigned __int8 *)v9;
          v11 = (*((unsigned __int8 *)v9 + 1) << 11) ^ (v10 << 16);
          v5 = (v11 ^ v10) + ((v11 ^ v10) >> 11);
          v9 += 2;
          --v8;
        }
        while (v8);
        if ((v6 & 1) == 0)
        {
LABEL_10:
          v12 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
          v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
          v14 = v13 ^ (v13 << 10);
          if (!v14)
            v14 = 0x800000;
          LODWORD(v15) = v14 & v3;
          v16 = &v2[2 * (v14 & v3)];
          v17 = *v16;
          if (!*v16)
            return 0;
LABEL_15:
          v18 = *a2;
          if (*a2)
          {
            v19 = 1;
            while (v17 == (const char *)-1 || strcmp(v17, v18))
            {
              LODWORD(v15) = (v15 + v19) & v3;
              v16 = &v2[2 * v15];
              v17 = *v16;
              ++v19;
              if (!*v16)
                return 0;
            }
          }
          else if (v17 == (const char *)-1 || v17 != 0)
          {
            for (i = 1; ; ++i)
            {
              v15 = ((_DWORD)v15 + i) & v3;
              v22 = v2[2 * v15];
              if (!v22)
                break;
              if (v22 != (const char *)-1 && v22 == 0)
                return &v2[2 * v15];
            }
            return 0;
          }
          return v16;
        }
        v7 += 2 * (v6 >> 1);
      }
      v5 = ((v5 + *(unsigned __int8 *)v7) ^ ((v5 + *(unsigned __int8 *)v7) << 11))
         + (((v5 + *(unsigned __int8 *)v7) ^ ((v5 + *(unsigned __int8 *)v7) << 11)) >> 17);
      goto LABEL_10;
    }
    LODWORD(v15) = 0;
    v16 = *a1;
    v17 = *v2;
    if (*v2)
      goto LABEL_15;
  }
  return 0;
}

const char **WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::Function<std::unique_ptr<PAL::TextCodec> ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(const char **a1, const char **a2)
{
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  const char *v7;
  unsigned int v8;
  const char *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  const char **v16;
  const char *v17;
  const char *v18;
  int v19;
  int i;
  const char *v22;

  if (!a1)
    return 0;
  v3 = *((_DWORD *)a1 - 2);
  v4 = (unsigned __int8 *)a2[1];
  if (!v4)
  {
    v15 = 0;
    v16 = a1;
    v17 = *a1;
    if (*a1)
      goto LABEL_15;
    return 0;
  }
  v5 = -1640531527;
  v6 = (_DWORD)v4 - 1;
  if ((_DWORD)v4 == 1)
    goto LABEL_10;
  v7 = *a2;
  if (v6 == 1)
    goto LABEL_9;
  v8 = v6 >> 1;
  v9 = *a2;
  do
  {
    v10 = v5 + *(unsigned __int8 *)v9;
    v11 = (*((unsigned __int8 *)v9 + 1) << 11) ^ (v10 << 16);
    v5 = (v11 ^ v10) + ((v11 ^ v10) >> 11);
    v9 += 2;
    --v8;
  }
  while (v8);
  if ((v6 & 1) != 0)
  {
    v7 += 2 * (v6 >> 1);
LABEL_9:
    v5 = ((v5 + *(unsigned __int8 *)v7) ^ ((v5 + *(unsigned __int8 *)v7) << 11))
       + (((v5 + *(unsigned __int8 *)v7) ^ ((v5 + *(unsigned __int8 *)v7) << 11)) >> 17);
  }
LABEL_10:
  v12 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
  v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  v14 = v13 ^ (v13 << 10);
  if (!v14)
    v14 = 0x800000;
  v15 = v14 & v3;
  v16 = &a1[3 * (v14 & v3)];
  v17 = *v16;
  if (!*v16)
    return 0;
LABEL_15:
  v18 = *a2;
  if (*a2)
  {
    v19 = 1;
    while (v17 == (const char *)-1 || strcmp(v17, v18))
    {
      v15 = (v15 + v19) & v3;
      v16 = &a1[3 * v15];
      v17 = *v16;
      ++v19;
      if (!*v16)
        return 0;
    }
  }
  else if (v17 == (const char *)-1 || v17 != 0)
  {
    for (i = 1; ; ++i)
    {
      v15 = (v15 + i) & v3;
      v16 = &a1[3 * v15];
      v22 = *v16;
      if (!*v16)
        break;
      if (v22 != (const char *)-1 && v22 == 0)
        return v16;
    }
    return 0;
  }
  return v16;
}

PAL::ThreadGlobalData *PAL::ThreadGlobalData::ThreadGlobalData(PAL::ThreadGlobalData *this)
{
  _QWORD *v2;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E31F4A70;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v2 = 0;
  *((_QWORD *)this + 2) = v2;
  return this;
}

{
  _QWORD *v2;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E31F4A70;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v2 = 0;
  *((_QWORD *)this + 2) = v2;
  return this;
}

void PAL::ThreadGlobalData::~ThreadGlobalData(PAL::ThreadGlobalData *this, void *a2)
{
  WTF *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E31F4A70;
  v2 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    if (v3)
      ucnv_close();
    WTF::fastFree(v2, a2);
  }
}

{
  WTF *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E31F4A70;
  v2 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    if (v3)
      ucnv_close();
    WTF::fastFree(v2, a2);
  }
}

{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E31F4A70;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
      ucnv_close();
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t PAL::TranslationUIServicesLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL28TranslationUIServicesLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7EBE8 != -1)
    dispatch_once(&qword_1ECE7EBE8, block);
  return _MergedGlobals_80;
}

uint64_t ___ZN3PAL28TranslationUIServicesLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/TranslationUIServices.framework/TranslationUIServices", 2);
  _MergedGlobals_80 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initLTUISourceMeta(PAL *this)
{
  if (qword_1ECE7EBF0 != -1)
    dispatch_once(&qword_1ECE7EBF0, &__block_literal_global_20);
  return qword_1ECE7EBF8;
}

uint64_t PAL::initLTUITranslationViewController(PAL *this)
{
  if (qword_1ECE7EC00 != -1)
    dispatch_once(&qword_1ECE7EC00, &__block_literal_global_4_9);
  return qword_1ECE7EC08;
}

Class ___ZN3PALL18initLTUISourceMetaEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL28TranslationUIServicesLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EBE8 != -1)
    dispatch_once(&qword_1ECE7EBE8, block);
  result = objc_getClass("LTUISourceMeta");
  qword_1ECE7EBF8 = (uint64_t)result;
  PAL::getLTUISourceMetaClass = (uint64_t)PAL::LTUISourceMetaFunction;
  return result;
}

uint64_t PAL::LTUISourceMetaFunction(PAL *this)
{
  return qword_1ECE7EBF8;
}

Class ___ZN3PALL33initLTUITranslationViewControllerEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL28TranslationUIServicesLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EBE8 != -1)
    dispatch_once(&qword_1ECE7EBE8, block);
  result = objc_getClass("LTUITranslationViewController");
  qword_1ECE7EC08 = (uint64_t)result;
  PAL::getLTUITranslationViewControllerClass = (uint64_t)PAL::LTUITranslationViewControllerFunction;
  return result;
}

uint64_t PAL::LTUITranslationViewControllerFunction(PAL *this)
{
  return qword_1ECE7EC08;
}

uint64_t PAL::get_UIKit_UIAccessibilityAnnouncementNotification(PAL *this)
{
  if (qword_1ECE7EC50 != -1)
    dispatch_once(&qword_1ECE7EC50, &__block_literal_global_21);
  return _MergedGlobals_81;
}

uint64_t ___ZN3PAL49get_UIKit_UIAccessibilityAnnouncementNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIAccessibilityAnnouncementNotification");
    if (result)
    {
LABEL_3:
      _MergedGlobals_81 = *(_DWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIAccessibilityAnnouncementNotification");
    if (result)
      goto LABEL_3;
  }
  result = 37;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_UIKit_UIApplicationWillResignActiveNotification(PAL *this)
{
  if (qword_1ECE7EC60 != -1)
    dispatch_once(&qword_1ECE7EC60, &__block_literal_global_4_10);
  return qword_1ECE7EC58;
}

uint64_t ___ZN3PAL51get_UIKit_UIApplicationWillResignActiveNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIApplicationWillResignActiveNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7EC58 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIApplicationWillResignActiveNotification");
    if (result)
      goto LABEL_3;
  }
  result = 38;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_UIKit_UIApplicationWillEnterForegroundNotification(PAL *this)
{
  if (qword_1ECE7EC70 != -1)
    dispatch_once(&qword_1ECE7EC70, &__block_literal_global_6_8);
  return qword_1ECE7EC68;
}

uint64_t ___ZN3PAL54get_UIKit_UIApplicationWillEnterForegroundNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIApplicationWillEnterForegroundNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7EC68 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIApplicationWillEnterForegroundNotification");
    if (result)
      goto LABEL_3;
  }
  result = 39;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_UIKit_UIApplicationDidBecomeActiveNotification(PAL *this)
{
  if (qword_1ECE7EC80 != -1)
    dispatch_once(&qword_1ECE7EC80, &__block_literal_global_8_6);
  return qword_1ECE7EC78;
}

uint64_t ___ZN3PAL50get_UIKit_UIApplicationDidBecomeActiveNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIApplicationDidBecomeActiveNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7EC78 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIApplicationDidBecomeActiveNotification");
    if (result)
      goto LABEL_3;
  }
  result = 40;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_UIKit_UIApplicationDidEnterBackgroundNotification(PAL *this)
{
  if (qword_1ECE7EC90 != -1)
    dispatch_once(&qword_1ECE7EC90, &__block_literal_global_10_6);
  return qword_1ECE7EC88;
}

uint64_t ___ZN3PAL53get_UIKit_UIApplicationDidEnterBackgroundNotificationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIApplicationDidEnterBackgroundNotification");
    if (result)
    {
LABEL_3:
      qword_1ECE7EC88 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIApplicationDidEnterBackgroundNotification");
    if (result)
      goto LABEL_3;
  }
  result = 41;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_UIKit_UIFontTextStyleCallout(PAL *this)
{
  if (qword_1ECE7ECB0 != -1)
    dispatch_once(&qword_1ECE7ECB0, &__block_literal_global_16_3);
  return qword_1ECE7ECA8;
}

uint64_t ___ZN3PAL32get_UIKit_UIFontTextStyleCalloutEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIFontTextStyleCallout");
    if (result)
    {
LABEL_3:
      qword_1ECE7ECA8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIFontTextStyleCallout");
    if (result)
      goto LABEL_3;
  }
  result = 44;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_UIKit_UIPasteboardNameGeneral(PAL *this)
{
  if (qword_1ECE7ECC0 != -1)
    dispatch_once(&qword_1ECE7ECC0, &__block_literal_global_18_3);
  return qword_1ECE7ECB8;
}

uint64_t ___ZN3PAL33get_UIKit_UIPasteboardNameGeneralEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIPasteboardNameGeneral");
    if (result)
    {
LABEL_3:
      qword_1ECE7ECB8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIPasteboardNameGeneral");
    if (result)
      goto LABEL_3;
  }
  result = 45;
  __break(0xC471u);
  return result;
}

double PAL::get_UIKit_UITextEffectsBeneathStatusBarWindowLevel(PAL *this)
{
  if (qword_1ECE7ECD0 != -1)
    dispatch_once(&qword_1ECE7ECD0, &__block_literal_global_20_3);
  return *(double *)&qword_1ECE7ECC8;
}

uint64_t ___ZN3PAL50get_UIKit_UITextEffectsBeneathStatusBarWindowLevelEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UITextEffectsBeneathStatusBarWindowLevel");
    if (result)
    {
LABEL_3:
      qword_1ECE7ECC8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UITextEffectsBeneathStatusBarWindowLevel");
    if (result)
      goto LABEL_3;
  }
  result = 46;
  __break(0xC471u);
  return result;
}

uint64_t PAL::initNSParagraphStyle(PAL *this)
{
  if (qword_1ECE7ECD8 != -1)
    dispatch_once(&qword_1ECE7ECD8, &__block_literal_global_22_2);
  return qword_1ECE7ECE0;
}

uint64_t PAL::initNSPresentationIntent(PAL *this)
{
  if (qword_1ECE7ECE8 != -1)
    dispatch_once(&qword_1ECE7ECE8, &__block_literal_global_24_3);
  return qword_1ECE7ECF0;
}

uint64_t PAL::initNSShadow(PAL *this)
{
  if (qword_1ECE7ECF8 != -1)
    dispatch_once(&qword_1ECE7ECF8, &__block_literal_global_26_3);
  return qword_1ECE7ED00;
}

uint64_t PAL::initNSTextList(PAL *this)
{
  if (qword_1ECE7ED08 != -1)
    dispatch_once(&qword_1ECE7ED08, &__block_literal_global_28_2);
  return qword_1ECE7ED10;
}

uint64_t PAL::initUIDocumentInteractionController(PAL *this)
{
  if (qword_1ECE7ED48 != -1)
    dispatch_once(&qword_1ECE7ED48, &__block_literal_global_36_3);
  return qword_1ECE7ED50;
}

uint64_t PAL::initUIFont(PAL *this)
{
  if (qword_1ECE7ED58 != -1)
    dispatch_once(&qword_1ECE7ED58, &__block_literal_global_38_3);
  return qword_1ECE7ED60;
}

uint64_t PAL::initUIGraphicsImageRenderer(PAL *this)
{
  if (qword_1ECE7ED68 != -1)
    dispatch_once(&qword_1ECE7ED68, &__block_literal_global_40_2);
  return qword_1ECE7ED70;
}

uint64_t PAL::initUIImage(PAL *this)
{
  if (qword_1ECE7ED78 != -1)
    dispatch_once(&qword_1ECE7ED78, &__block_literal_global_42_3);
  return qword_1ECE7ED80;
}

uint64_t PAL::initUIFocusRingStyle(PAL *this)
{
  if (qword_1ECE7ED88 != -1)
    dispatch_once(&qword_1ECE7ED88, &__block_literal_global_44_2);
  return qword_1ECE7ED90;
}

uint64_t PAL::initUILabel(PAL *this)
{
  if (qword_1ECE7ED98 != -1)
    dispatch_once(&qword_1ECE7ED98, &__block_literal_global_46_2);
  return qword_1ECE7EDA0;
}

uint64_t PAL::initUIPasteboard(PAL *this)
{
  if (qword_1ECE7EDA8 != -1)
    dispatch_once(&qword_1ECE7EDA8, &__block_literal_global_48_3);
  return qword_1ECE7EDB0;
}

uint64_t PAL::initUITapGestureRecognizer(PAL *this)
{
  if (qword_1ECE7EDC8 != -1)
    dispatch_once(&qword_1ECE7EDC8, &__block_literal_global_52_2);
  return qword_1ECE7EDD0;
}

uint64_t PAL::initUITextEffectsWindow(PAL *this)
{
  if (qword_1ECE7EDD8 != -1)
    dispatch_once(&qword_1ECE7EDD8, &__block_literal_global_54_3);
  return qword_1ECE7EDE0;
}

uint64_t PAL::initUIView(PAL *this)
{
  if (qword_1ECE7EDF8 != -1)
    dispatch_once(&qword_1ECE7EDF8, &__block_literal_global_58_1);
  return qword_1ECE7EE00;
}

uint64_t PAL::initUIViewController(PAL *this)
{
  if (qword_1ECE7EE08 != -1)
    dispatch_once(&qword_1ECE7EE08, &__block_literal_global_60_2);
  return qword_1ECE7EE10;
}

uint64_t PAL::initUIWindow(PAL *this)
{
  if (qword_1ECE7EE18 != -1)
    dispatch_once(&qword_1ECE7EE18, &__block_literal_global_62_2);
  return qword_1ECE7EE20;
}

uint64_t PAL::initUIKitUIAccessibilityIsGrayscaleEnabled(PAL *this)
{
  if (PAL::initUIKitUIAccessibilityIsGrayscaleEnabled(void)::once != -1)
    dispatch_once(&PAL::initUIKitUIAccessibilityIsGrayscaleEnabled(void)::once, &__block_literal_global_66_2);
  return PAL::softLinkUIKitUIAccessibilityIsGrayscaleEnabled((PAL *)PAL::softLinkUIKitUIAccessibilityIsGrayscaleEnabled);
}

uint64_t PAL::initUIKitUIAccessibilityIsReduceMotionEnabled(PAL *this)
{
  if (PAL::initUIKitUIAccessibilityIsReduceMotionEnabled(void)::once != -1)
    dispatch_once(&PAL::initUIKitUIAccessibilityIsReduceMotionEnabled(void)::once, &__block_literal_global_70_1);
  return PAL::softLinkUIKitUIAccessibilityIsReduceMotionEnabled((PAL *)PAL::softLinkUIKitUIAccessibilityIsReduceMotionEnabled);
}

uint64_t PAL::initUIKitUIAccessibilityDarkerSystemColorsEnabled(PAL *this)
{
  if (PAL::initUIKitUIAccessibilityDarkerSystemColorsEnabled(void)::once != -1)
    dispatch_once(&PAL::initUIKitUIAccessibilityDarkerSystemColorsEnabled(void)::once, &__block_literal_global_72_2);
  return PAL::softLinkUIKitUIAccessibilityDarkerSystemColorsEnabled((PAL *)PAL::softLinkUIKitUIAccessibilityDarkerSystemColorsEnabled);
}

uint64_t PAL::initUIKitUIAccessibilityIsOnOffSwitchLabelsEnabled(PAL *this)
{
  if (PAL::initUIKitUIAccessibilityIsOnOffSwitchLabelsEnabled(void)::once != -1)
    dispatch_once(&PAL::initUIKitUIAccessibilityIsOnOffSwitchLabelsEnabled(void)::once, &__block_literal_global_74_2);
  return PAL::softLinkUIKitUIAccessibilityIsOnOffSwitchLabelsEnabled((PAL *)PAL::softLinkUIKitUIAccessibilityIsOnOffSwitchLabelsEnabled);
}

uint64_t PAL::initUIKitUIAccessibilityPostNotification(PAL *this, unsigned int a2, objc_object *a3)
{
  if (PAL::initUIKitUIAccessibilityPostNotification(unsigned int,objc_object *)::once != -1)
    dispatch_once(&PAL::initUIKitUIAccessibilityPostNotification(unsigned int,objc_object *)::once, &__block_literal_global_76_1);
  return PAL::softLinkUIKitUIAccessibilityPostNotification(this, a2, (objc_object *)PAL::softLinkUIKitUIAccessibilityPostNotification);
}

uint64_t PAL::initUIKitUIGraphicsGetCurrentContext(PAL *this)
{
  if (PAL::initUIKitUIGraphicsGetCurrentContext(void)::once != -1)
    dispatch_once(&PAL::initUIKitUIGraphicsGetCurrentContext(void)::once, &__block_literal_global_78_2);
  return PAL::softLinkUIKitUIGraphicsGetCurrentContext((PAL *)PAL::softLinkUIKitUIGraphicsGetCurrentContext);
}

uint64_t PAL::initUIKitUIGraphicsPopContext(PAL *this)
{
  if (PAL::initUIKitUIGraphicsPopContext(void)::once != -1)
    dispatch_once(&PAL::initUIKitUIGraphicsPopContext(void)::once, &__block_literal_global_80_2);
  return PAL::softLinkUIKitUIGraphicsPopContext((PAL *)PAL::softLinkUIKitUIGraphicsPopContext);
}

uint64_t PAL::initUIKitUIGraphicsPushContext(PAL *this, CGContext *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initUIKitUIGraphicsPushContext(CGContext *)::once != -1)
  {
    dispatch_once(&PAL::initUIKitUIGraphicsPushContext(CGContext *)::once, &__block_literal_global_82_0);
    this = v2;
  }
  return PAL::softLinkUIKitUIGraphicsPushContext(this, (CGContext *)PAL::softLinkUIKitUIGraphicsPushContext);
}

uint64_t PAL::initUIKitUIImagePNGRepresentation(PAL *this, UIImage *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initUIKitUIImagePNGRepresentation(UIImage *)::once != -1)
  {
    dispatch_once(&PAL::initUIKitUIImagePNGRepresentation(UIImage *)::once, &__block_literal_global_84_1);
    this = v2;
  }
  return PAL::softLinkUIKitUIImagePNGRepresentation(this, (UIImage *)PAL::softLinkUIKitUIImagePNGRepresentation);
}

uint64_t ___ZN3PALL20initNSParagraphStyleEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("NSParagraphStyle");
    qword_1ECE7ECE0 = result;
    if (result)
    {
LABEL_3:
      PAL::getNSParagraphStyleClass[0] = PAL::NSParagraphStyleFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("NSParagraphStyle");
    qword_1ECE7ECE0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 47;
  __break(0xC471u);
  return result;
}

uint64_t PAL::NSParagraphStyleFunction(PAL *this)
{
  return qword_1ECE7ECE0;
}

uint64_t ___ZN3PALL24initNSPresentationIntentEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("NSPresentationIntent");
    qword_1ECE7ECF0 = result;
    if (result)
    {
LABEL_3:
      PAL::getNSPresentationIntentClass[0] = PAL::NSPresentationIntentFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("NSPresentationIntent");
    qword_1ECE7ECF0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 48;
  __break(0xC471u);
  return result;
}

uint64_t PAL::NSPresentationIntentFunction(PAL *this)
{
  return qword_1ECE7ECF0;
}

uint64_t ___ZN3PALL12initNSShadowEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("NSShadow");
    qword_1ECE7ED00 = result;
    if (result)
    {
LABEL_3:
      PAL::getNSShadowClass[0] = PAL::NSShadowFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("NSShadow");
    qword_1ECE7ED00 = result;
    if (result)
      goto LABEL_3;
  }
  result = 49;
  __break(0xC471u);
  return result;
}

uint64_t PAL::NSShadowFunction(PAL *this)
{
  return qword_1ECE7ED00;
}

uint64_t ___ZN3PALL14initNSTextListEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("NSTextList");
    qword_1ECE7ED10 = result;
    if (result)
    {
LABEL_3:
      PAL::getNSTextListClass[0] = PAL::NSTextListFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("NSTextList");
    qword_1ECE7ED10 = result;
    if (result)
      goto LABEL_3;
  }
  result = 50;
  __break(0xC471u);
  return result;
}

uint64_t PAL::NSTextListFunction(PAL *this)
{
  return qword_1ECE7ED10;
}

uint64_t ___ZN3PALL35initUIDocumentInteractionControllerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIDocumentInteractionController");
    qword_1ECE7ED50 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIDocumentInteractionControllerClass[0] = PAL::UIDocumentInteractionControllerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIDocumentInteractionController");
    qword_1ECE7ED50 = result;
    if (result)
      goto LABEL_3;
  }
  result = 54;
  __break(0xC471u);
  return result;
}

uint64_t PAL::UIDocumentInteractionControllerFunction(PAL *this)
{
  return qword_1ECE7ED50;
}

uint64_t ___ZN3PALL10initUIFontEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIFont");
    qword_1ECE7ED60 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIFontClass = PAL::UIFontFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIFont");
    qword_1ECE7ED60 = result;
    if (result)
      goto LABEL_3;
  }
  result = 55;
  __break(0xC471u);
  return result;
}

uint64_t PAL::UIFontFunction(PAL *this)
{
  return qword_1ECE7ED60;
}

uint64_t ___ZN3PALL27initUIGraphicsImageRendererEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIGraphicsImageRenderer");
    qword_1ECE7ED70 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIGraphicsImageRendererClass[0] = PAL::UIGraphicsImageRendererFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIGraphicsImageRenderer");
    qword_1ECE7ED70 = result;
    if (result)
      goto LABEL_3;
  }
  result = 56;
  __break(0xC471u);
  return result;
}

uint64_t PAL::UIGraphicsImageRendererFunction(PAL *this)
{
  return qword_1ECE7ED70;
}

uint64_t ___ZN3PALL11initUIImageEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIImage");
    qword_1ECE7ED80 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIImageClass[0] = PAL::UIImageFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIImage");
    qword_1ECE7ED80 = result;
    if (result)
      goto LABEL_3;
  }
  result = 57;
  __break(0xC471u);
  return result;
}

uint64_t PAL::UIImageFunction(PAL *this)
{
  return qword_1ECE7ED80;
}

uint64_t ___ZN3PALL20initUIFocusRingStyleEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIFocusRingStyle");
    qword_1ECE7ED90 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIFocusRingStyleClass[0] = PAL::UIFocusRingStyleFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIFocusRingStyle");
    qword_1ECE7ED90 = result;
    if (result)
      goto LABEL_3;
  }
  result = 58;
  __break(0xC471u);
  return result;
}

uint64_t PAL::UIFocusRingStyleFunction(PAL *this)
{
  return qword_1ECE7ED90;
}

uint64_t ___ZN3PALL11initUILabelEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UILabel");
    qword_1ECE7EDA0 = result;
    if (result)
    {
LABEL_3:
      PAL::getUILabelClass[0] = PAL::UILabelFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UILabel");
    qword_1ECE7EDA0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 59;
  __break(0xC471u);
  return result;
}

uint64_t PAL::UILabelFunction(PAL *this)
{
  return qword_1ECE7EDA0;
}

uint64_t ___ZN3PALL16initUIPasteboardEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIPasteboard");
    qword_1ECE7EDB0 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIPasteboardClass[0] = PAL::UIPasteboardFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIPasteboard");
    qword_1ECE7EDB0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 60;
  __break(0xC471u);
  return result;
}

uint64_t PAL::UIPasteboardFunction(PAL *this)
{
  return qword_1ECE7EDB0;
}

uint64_t ___ZN3PALL26initUITapGestureRecognizerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UITapGestureRecognizer");
    qword_1ECE7EDD0 = result;
    if (result)
    {
LABEL_3:
      PAL::getUITapGestureRecognizerClass[0] = PAL::UITapGestureRecognizerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UITapGestureRecognizer");
    qword_1ECE7EDD0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 62;
  __break(0xC471u);
  return result;
}

uint64_t PAL::UITapGestureRecognizerFunction(PAL *this)
{
  return qword_1ECE7EDD0;
}

uint64_t ___ZN3PALL23initUITextEffectsWindowEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UITextEffectsWindow");
    qword_1ECE7EDE0 = result;
    if (result)
    {
LABEL_3:
      PAL::getUITextEffectsWindowClass[0] = PAL::UITextEffectsWindowFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UITextEffectsWindow");
    qword_1ECE7EDE0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 63;
  __break(0xC471u);
  return result;
}

uint64_t PAL::UITextEffectsWindowFunction(PAL *this)
{
  return qword_1ECE7EDE0;
}

uint64_t ___ZN3PALL10initUIViewEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIView");
    qword_1ECE7EE00 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIViewClass[0] = PAL::UIViewFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIView");
    qword_1ECE7EE00 = result;
    if (result)
      goto LABEL_3;
  }
  result = 65;
  __break(0xC471u);
  return result;
}

uint64_t PAL::UIViewFunction(PAL *this)
{
  return qword_1ECE7EE00;
}

uint64_t ___ZN3PALL20initUIViewControllerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIViewController");
    qword_1ECE7EE10 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIViewControllerClass[0] = PAL::UIViewControllerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIViewController");
    qword_1ECE7EE10 = result;
    if (result)
      goto LABEL_3;
  }
  result = 66;
  __break(0xC471u);
  return result;
}

uint64_t PAL::UIViewControllerFunction(PAL *this)
{
  return qword_1ECE7EE10;
}

uint64_t ___ZN3PALL12initUIWindowEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 == -1)
  {
    result = (uint64_t)objc_getClass("UIWindow");
    qword_1ECE7EE20 = result;
    if (result)
    {
LABEL_3:
      PAL::getUIWindowClass[0] = PAL::UIWindowFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EC48, block);
    result = (uint64_t)objc_getClass("UIWindow");
    qword_1ECE7EE20 = result;
    if (result)
      goto LABEL_3;
  }
  result = 67;
  __break(0xC471u);
  return result;
}

uint64_t PAL::UIWindowFunction(PAL *this)
{
  return qword_1ECE7EE20;
}

uint64_t ___ZN3PALL42initUIKitUIAccessibilityIsGrayscaleEnabledEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 != -1)
    dispatch_once(&qword_1ECE7EC48, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIAccessibilityIsGrayscaleEnabled");
  PAL::softLinkUIKitUIAccessibilityIsGrayscaleEnabled = (uint64_t (*)(PAL *__hidden))result;
  if (!result)
  {
    result = 69;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL45initUIKitUIAccessibilityIsReduceMotionEnabledEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 != -1)
    dispatch_once(&qword_1ECE7EC48, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIAccessibilityIsReduceMotionEnabled");
  PAL::softLinkUIKitUIAccessibilityIsReduceMotionEnabled = (uint64_t (*)(PAL *__hidden))result;
  if (!result)
  {
    result = 71;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL49initUIKitUIAccessibilityDarkerSystemColorsEnabledEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 != -1)
    dispatch_once(&qword_1ECE7EC48, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIAccessibilityDarkerSystemColorsEnabled");
  PAL::softLinkUIKitUIAccessibilityDarkerSystemColorsEnabled = (uint64_t (*)(PAL *__hidden))result;
  if (!result)
  {
    result = 72;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL50initUIKitUIAccessibilityIsOnOffSwitchLabelsEnabledEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 != -1)
    dispatch_once(&qword_1ECE7EC48, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIAccessibilityIsOnOffSwitchLabelsEnabled");
  PAL::softLinkUIKitUIAccessibilityIsOnOffSwitchLabelsEnabled = (uint64_t (*)(PAL *__hidden))result;
  if (!result)
  {
    result = 73;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL40initUIKitUIAccessibilityPostNotificationEjP11objc_object_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 != -1)
    dispatch_once(&qword_1ECE7EC48, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIAccessibilityPostNotification");
  PAL::softLinkUIKitUIAccessibilityPostNotification = (uint64_t (*)(PAL *__hidden, unsigned int, objc_object *))result;
  if (!result)
  {
    result = 74;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL36initUIKitUIGraphicsGetCurrentContextEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 != -1)
    dispatch_once(&qword_1ECE7EC48, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIGraphicsGetCurrentContext");
  PAL::softLinkUIKitUIGraphicsGetCurrentContext = (uint64_t (*)(PAL *__hidden))result;
  if (!result)
  {
    result = 75;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL29initUIKitUIGraphicsPopContextEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 != -1)
    dispatch_once(&qword_1ECE7EC48, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIGraphicsPopContext");
  PAL::softLinkUIKitUIGraphicsPopContext = (uint64_t (*)(PAL *__hidden))result;
  if (!result)
  {
    result = 76;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL30initUIKitUIGraphicsPushContextEP9CGContext_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 != -1)
    dispatch_once(&qword_1ECE7EC48, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIGraphicsPushContext");
  PAL::softLinkUIKitUIGraphicsPushContext = (uint64_t (*)(PAL *__hidden, CGContext *))result;
  if (!result)
  {
    result = 77;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL33initUIKitUIImagePNGRepresentationEP7UIImage_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL12UIKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EC48 != -1)
    dispatch_once(&qword_1ECE7EC48, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EC40, "UIImagePNGRepresentation");
  PAL::softLinkUIKitUIImagePNGRepresentation = (uint64_t (*)(PAL *__hidden, UIImage *))result;
  if (!result)
  {
    result = 78;
    __break(0xC471u);
  }
  return result;
}

BOOL PAL::updateCurrentUserInterfaceIdiom(PAL *this)
{
  unsigned int v1;
  int v2;
  PAL *v3;
  uint64_t v4;
  __int16 v5;
  unsigned int v6;
  BOOL v7;
  _BOOL8 result;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  BOOL v12;

  v1 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  if (v1 <= 0x100)
    LOBYTE(v1) = 0;
  v2 = v1;
  v3 = (PAL *)objc_msgSend((id)PAL::getUIApplicationClass(this), "sharedApplication");
  if (!v3)
  {
    if (!PAL::deviceClassIsSmallScreen(0))
    {
LABEL_25:
      v5 = 0;
      v11 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
      v12 = v11 >= 0x100 && v2 == 0;
      result = !v12;
      if (!v12)
        goto LABEL_23;
      return result;
    }
LABEL_16:
    v5 = 1;
    v9 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
    v10 = v9 >= 0x100 && v2 == 1;
    result = !v10;
    if (!v10)
      goto LABEL_23;
    return result;
  }
  v4 = objc_msgSend((id)objc_msgSend((id)PAL::getUIDeviceClass(v3), "currentDevice"), "userInterfaceIdiom");
  if ((v4 & 0xFFFFFFFFFFFFFFFBLL) == 0)
    goto LABEL_16;
  if (v4 != 6)
    goto LABEL_25;
  v5 = 2;
  v6 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  v7 = v6 >= 0x100 && v2 == 2;
  result = !v7;
  if (!v7)
LABEL_23:
    atomic_store(v5 | 0x100, &PAL::s_currentUserInterfaceIdiom);
  return result;
}

uint64_t PAL::currentUserInterfaceIdiomIsVision(uint64_t this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned __int8 v3;
  PAL *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v1 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  if (v1 > 0xFF)
    goto LABEL_16;
  v2 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  if (v2 <= 0x100)
    v3 = 0;
  else
    v3 = v2;
  v4 = (PAL *)objc_msgSend((id)PAL::getUIApplicationClass((PAL *)this), "sharedApplication");
  if (!v4)
  {
    this = PAL::deviceClassIsSmallScreen(0);
    if ((this & 1) == 0)
      goto LABEL_13;
LABEL_11:
    v5 = 1;
    v7 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
    if (v7 < 0x100)
      goto LABEL_15;
    goto LABEL_14;
  }
  this = objc_msgSend((id)objc_msgSend((id)PAL::getUIDeviceClass(v4), "currentDevice"), "userInterfaceIdiom");
  if ((this & 0xFFFFFFFFFFFFFFFBLL) == 0)
    goto LABEL_11;
  if (this == 6)
  {
    v5 = 2;
    v6 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
    if (v6 < 0x100)
      goto LABEL_15;
LABEL_14:
    if (v5 == v3)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_13:
  v5 = 0;
  v8 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  if (v8 >= 0x100)
    goto LABEL_14;
LABEL_15:
  atomic_store(v5 | 0x100, &PAL::s_currentUserInterfaceIdiom);
LABEL_16:
  v9 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  if (v9 > 0xFF)
    return v9 == 2;
  __break(1u);
  return this;
}

uint64_t ___ZN3PAL60get_VideoToolbox_kVTCompressionPropertyKey_ExpectedFrameRateEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTCompressionPropertyKey_ExpectedFrameRate");
    if (result)
    {
LABEL_3:
      PAL::get_VideoToolbox_kVTCompressionPropertyKey_ExpectedFrameRate(void)::constantVideoToolboxkVTCompressionPropertyKey_ExpectedFrameRate = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EE38, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTCompressionPropertyKey_ExpectedFrameRate");
    if (result)
      goto LABEL_3;
  }
  result = 36;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PAL62get_VideoToolbox_kVTCompressionPropertyKey_MaxKeyFrameIntervalEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTCompressionPropertyKey_MaxKeyFrameInterval");
    if (result)
    {
LABEL_3:
      PAL::get_VideoToolbox_kVTCompressionPropertyKey_MaxKeyFrameInterval(void)::constantVideoToolboxkVTCompressionPropertyKey_MaxKeyFrameInterval = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EE38, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTCompressionPropertyKey_MaxKeyFrameInterval");
    if (result)
      goto LABEL_3;
  }
  result = 37;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PAL70get_VideoToolbox_kVTCompressionPropertyKey_MaxKeyFrameIntervalDurationEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration");
    if (result)
    {
LABEL_3:
      PAL::get_VideoToolbox_kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration(void)::constantVideoToolboxkVTCompressionPropertyKey_MaxKeyFrameIntervalDuration = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EE38, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTCompressionPropertyKey_MaxKeyFrameIntervalDuration");
    if (result)
      goto LABEL_3;
  }
  result = 38;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PAL51get_VideoToolbox_kVTCompressionPropertyKey_RealTimeEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTCompressionPropertyKey_RealTime");
    if (result)
    {
LABEL_3:
      PAL::get_VideoToolbox_kVTCompressionPropertyKey_RealTime(void)::constantVideoToolboxkVTCompressionPropertyKey_RealTime = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EE38, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTCompressionPropertyKey_RealTime");
    if (result)
      goto LABEL_3;
  }
  result = 39;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PAL57get_VideoToolbox_kVTCompressionPropertyKey_AverageBitRateEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTCompressionPropertyKey_AverageBitRate");
    if (result)
    {
LABEL_3:
      PAL::get_VideoToolbox_kVTCompressionPropertyKey_AverageBitRate(void)::constantVideoToolboxkVTCompressionPropertyKey_AverageBitRate = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EE38, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTCompressionPropertyKey_AverageBitRate");
    if (result)
      goto LABEL_3;
  }
  result = 40;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PAL55get_VideoToolbox_kVTCompressionPropertyKey_ProfileLevelEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTCompressionPropertyKey_ProfileLevel");
    if (result)
    {
LABEL_3:
      PAL::get_VideoToolbox_kVTCompressionPropertyKey_ProfileLevel(void)::constantVideoToolboxkVTCompressionPropertyKey_ProfileLevel = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EE38, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTCompressionPropertyKey_ProfileLevel");
    if (result)
      goto LABEL_3;
  }
  result = 41;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PAL56get_VideoToolbox_kVTProfileLevel_H264_Baseline_AutoLevelEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTProfileLevel_H264_Baseline_AutoLevel");
    if (result)
    {
LABEL_3:
      PAL::get_VideoToolbox_kVTProfileLevel_H264_Baseline_AutoLevel(void)::constantVideoToolboxkVTProfileLevel_H264_Baseline_AutoLevel = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EE38, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTProfileLevel_H264_Baseline_AutoLevel");
    if (result)
      goto LABEL_3;
  }
  result = 44;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PAL52get_VideoToolbox_kVTProfileLevel_H264_High_AutoLevelEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTProfileLevel_H264_High_AutoLevel");
    if (result)
    {
LABEL_3:
      PAL::get_VideoToolbox_kVTProfileLevel_H264_High_AutoLevel(void)::constantVideoToolboxkVTProfileLevel_H264_High_AutoLevel = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EE38, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTProfileLevel_H264_High_AutoLevel");
    if (result)
      goto LABEL_3;
  }
  result = 45;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PAL52get_VideoToolbox_kVTProfileLevel_H264_Main_AutoLevelEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 == -1)
  {
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTProfileLevel_H264_Main_AutoLevel");
    if (result)
    {
LABEL_3:
      PAL::get_VideoToolbox_kVTProfileLevel_H264_Main_AutoLevel(void)::constantVideoToolboxkVTProfileLevel_H264_Main_AutoLevel = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EE38, block);
    result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "kVTProfileLevel_H264_Main_AutoLevel");
    if (result)
      goto LABEL_3;
  }
  result = 46;
  __break(0xC471u);
  return result;
}

uint64_t PAL::initVideoToolboxVTCompressionSessionCreate(PAL *this, const __CFAllocator *a2, int a3, int a4, unsigned int a5, const __CFDictionary *a6, const __CFDictionary *a7, const __CFAllocator *a8, void (*a9)(void *, void *, int, unsigned int, opaqueCMSampleBuffer *), void *a10, OpaqueVTCompressionSession **a11)
{
  if (PAL::initVideoToolboxVTCompressionSessionCreate(__CFAllocator const*,int,int,unsigned int,__CFDictionary const*,__CFDictionary const*,__CFAllocator const*,void (*)(void *,void *,int,unsigned int,opaqueCMSampleBuffer *),void *,OpaqueVTCompressionSession **)::once != -1)
    dispatch_once(&PAL::initVideoToolboxVTCompressionSessionCreate(__CFAllocator const*,int,int,unsigned int,__CFDictionary const*,__CFDictionary const*,__CFAllocator const*,void (*)(void *,void *,int,unsigned int,opaqueCMSampleBuffer *),void *,OpaqueVTCompressionSession **)::once, &__block_literal_global_34_3);
  return PAL::softLinkVideoToolboxVTCompressionSessionCreate(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t PAL::initVideoToolboxVTCompressionSessionCompleteFrames(PAL *this, OpaqueVTCompressionSession *a2, CMTime *a3)
{
  __int128 v6;
  uint64_t v7;

  if (PAL::initVideoToolboxVTCompressionSessionCompleteFrames(OpaqueVTCompressionSession *,CMTime)::once != -1)
    dispatch_once(&PAL::initVideoToolboxVTCompressionSessionCompleteFrames(OpaqueVTCompressionSession *,CMTime)::once, &__block_literal_global_37_0);
  v6 = *(_OWORD *)a2;
  v7 = *((_QWORD *)a2 + 2);
  return PAL::softLinkVideoToolboxVTCompressionSessionCompleteFrames(this, (OpaqueVTCompressionSession *)&v6, a3);
}

uint64_t PAL::initVideoToolboxVTCompressionSessionEncodeFrame(PAL *this, OpaqueVTCompressionSession *a2, __CVBuffer *a3, CMTime *a4, CMTime *a5, const __CFDictionary *a6, void *a7, unsigned int *a8)
{
  CMTime v16;
  __int128 v17;
  uint64_t v18;

  if (PAL::initVideoToolboxVTCompressionSessionEncodeFrame(OpaqueVTCompressionSession *,__CVBuffer *,CMTime,CMTime,__CFDictionary const*,void *,unsigned int *)::once != -1)
    dispatch_once(&PAL::initVideoToolboxVTCompressionSessionEncodeFrame(OpaqueVTCompressionSession *,__CVBuffer *,CMTime,CMTime,__CFDictionary const*,void *,unsigned int *)::once, &__block_literal_global_40_3);
  v17 = *(_OWORD *)a3;
  v18 = *((_QWORD *)a3 + 2);
  v16 = *a4;
  return PAL::softLinkVideoToolboxVTCompressionSessionEncodeFrame(this, a2, (__CVBuffer *)&v17, &v16, a5, a6, a7, a8);
}

uint64_t PAL::initVideoToolboxVTCompressionSessionPrepareToEncodeFrames(PAL *this, OpaqueVTCompressionSession *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initVideoToolboxVTCompressionSessionPrepareToEncodeFrames(OpaqueVTCompressionSession *)::once != -1)
  {
    dispatch_once(&PAL::initVideoToolboxVTCompressionSessionPrepareToEncodeFrames(OpaqueVTCompressionSession *)::once, &__block_literal_global_43_0);
    this = v2;
  }
  return PAL::softLinkVideoToolboxVTCompressionSessionPrepareToEncodeFrames(this, (OpaqueVTCompressionSession *)PAL::softLinkVideoToolboxVTCompressionSessionPrepareToEncodeFrames);
}

uint64_t PAL::initVideoToolboxVTCompressionSessionInvalidate(PAL *this, OpaqueVTCompressionSession *a2)
{
  PAL *v2;

  v2 = this;
  if (PAL::initVideoToolboxVTCompressionSessionInvalidate(OpaqueVTCompressionSession *)::once != -1)
  {
    dispatch_once(&PAL::initVideoToolboxVTCompressionSessionInvalidate(OpaqueVTCompressionSession *)::once, &__block_literal_global_46_3);
    this = v2;
  }
  return PAL::softLinkVideoToolboxVTCompressionSessionInvalidate(this, (OpaqueVTCompressionSession *)PAL::softLinkVideoToolboxVTCompressionSessionInvalidate);
}

uint64_t PAL::initVideoToolboxVTGetDefaultColorAttributesWithHints(PAL *this, unsigned int a2, const __CFString *a3, unint64_t a4, unint64_t a5, const __CFString **a6, const __CFString **a7, const __CFString **a8)
{
  if (PAL::initVideoToolboxVTGetDefaultColorAttributesWithHints(unsigned int,__CFString const*,unsigned long,unsigned long,__CFString const**,__CFString const**,__CFString const**)::once != -1)
    dispatch_once(&PAL::initVideoToolboxVTGetDefaultColorAttributesWithHints(unsigned int,__CFString const*,unsigned long,unsigned long,__CFString const**,__CFString const**,__CFString const**)::once, &__block_literal_global_49_0);
  return PAL::softLinkVideoToolboxVTGetDefaultColorAttributesWithHints(this, a2, a3, a4, a5, a6, a7, (const __CFString **)PAL::softLinkVideoToolboxVTGetDefaultColorAttributesWithHints);
}

uint64_t ___ZN3PALL42initVideoToolboxVTCompressionSessionCreateEPK13__CFAllocatoriijPK14__CFDictionaryS5_S2_PFvPvS6_ijP20opaqueCMSampleBufferES6_PP26OpaqueVTCompressionSession_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 != -1)
    dispatch_once(&qword_1ECE7EE38, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "VTCompressionSessionCreate");
  PAL::softLinkVideoToolboxVTCompressionSessionCreate = (uint64_t (*)(PAL *__hidden, const __CFAllocator *, int, int, unsigned int, const __CFDictionary *, const __CFDictionary *, const __CFAllocator *, void (*)(void *, void *, int, unsigned int, opaqueCMSampleBuffer *), void *, OpaqueVTCompressionSession **))result;
  if (!result)
  {
    result = 48;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL50initVideoToolboxVTCompressionSessionCompleteFramesEP26OpaqueVTCompressionSession6CMTime_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 != -1)
    dispatch_once(&qword_1ECE7EE38, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "VTCompressionSessionCompleteFrames");
  PAL::softLinkVideoToolboxVTCompressionSessionCompleteFrames = (uint64_t (*)(PAL *__hidden, OpaqueVTCompressionSession *, CMTime *__struct_ptr))result;
  if (!result)
  {
    result = 49;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL47initVideoToolboxVTCompressionSessionEncodeFrameEP26OpaqueVTCompressionSessionP10__CVBuffer6CMTimeS4_PK14__CFDictionaryPvPj_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 != -1)
    dispatch_once(&qword_1ECE7EE38, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "VTCompressionSessionEncodeFrame");
  PAL::softLinkVideoToolboxVTCompressionSessionEncodeFrame = (uint64_t (*)(PAL *__hidden, OpaqueVTCompressionSession *, __CVBuffer *, CMTime *__struct_ptr, CMTime *__struct_ptr, const __CFDictionary *, void *, unsigned int *))result;
  if (!result)
  {
    result = 50;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL57initVideoToolboxVTCompressionSessionPrepareToEncodeFramesEP26OpaqueVTCompressionSession_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 != -1)
    dispatch_once(&qword_1ECE7EE38, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "VTCompressionSessionPrepareToEncodeFrames");
  PAL::softLinkVideoToolboxVTCompressionSessionPrepareToEncodeFrames = (uint64_t (*)(PAL *__hidden, OpaqueVTCompressionSession *))result;
  if (!result)
  {
    result = 51;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL46initVideoToolboxVTCompressionSessionInvalidateEP26OpaqueVTCompressionSession_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 != -1)
    dispatch_once(&qword_1ECE7EE38, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "VTCompressionSessionInvalidate");
  PAL::softLinkVideoToolboxVTCompressionSessionInvalidate = (uint64_t (*)(PAL *__hidden, OpaqueVTCompressionSession *))result;
  if (!result)
  {
    result = 52;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN3PALL52initVideoToolboxVTGetDefaultColorAttributesWithHintsEjPK10__CFStringmmPS2_S3_S3__block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v2 = 0;
  if (qword_1ECE7EE38 != -1)
    dispatch_once(&qword_1ECE7EE38, block);
  result = (uint64_t)dlsym((void *)qword_1ECE7EE30, "VTGetDefaultColorAttributesWithHints");
  PAL::softLinkVideoToolboxVTGetDefaultColorAttributesWithHints = (uint64_t (*)(PAL *__hidden, unsigned int, const __CFString *, unint64_t, unint64_t, const __CFString **, const __CFString **, const __CFString **))result;
  if (!result)
  {
    result = 53;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initVKImageAnalyzer(PAL *this)
{
  if (qword_1ECE7EE58 != -1)
    dispatch_once(&qword_1ECE7EE58, &__block_literal_global_23);
  return qword_1ECE7EE60;
}

uint64_t PAL::initVKImageAnalyzerRequest(PAL *this)
{
  if (qword_1ECE7EE68 != -1)
    dispatch_once(&qword_1ECE7EE68, &__block_literal_global_6_10);
  return qword_1ECE7EE70;
}

uint64_t PAL::initVKCImageAnalyzer(PAL *this)
{
  if (qword_1ECE7EE78 != -1)
    dispatch_once(&qword_1ECE7EE78, &__block_literal_global_8_7);
  return qword_1ECE7EE80;
}

uint64_t PAL::initVKCImageAnalyzerRequest(PAL *this)
{
  if (qword_1ECE7EE88 != -1)
    dispatch_once(&qword_1ECE7EE88, &__block_literal_global_10_7);
  return qword_1ECE7EE90;
}

uint64_t PAL::initVKCImageAnalysisInteraction(PAL *this)
{
  if (qword_1ECE7EEA8 != -1)
    dispatch_once(&qword_1ECE7EEA8, &__block_literal_global_14_6);
  return qword_1ECE7EEB0;
}

uint64_t PAL::initVKCImageAnalysisOverlayView(PAL *this)
{
  if (qword_1ECE7EEB8 != -1)
    dispatch_once(&qword_1ECE7EEB8, &__block_literal_global_16_4);
  return qword_1ECE7EEC0;
}

BOOL PAL::init_VisionKitCore_vk_cgImageRemoveBackground(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = 0;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  PAL::softLinkVisionKitCorevk_cgImageRemoveBackground = (uint64_t)dlsym((void *)qword_1ECE7EE48, "vk_cgImageRemoveBackground");
  return PAL::softLinkVisionKitCorevk_cgImageRemoveBackground != 0;
}

BOOL PAL::canLoad_VisionKitCore_vk_cgImageRemoveBackground(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7EE41 == 1)
    return _MergedGlobals_83 != 0;
  result = PAL::init_VisionKitCore_vk_cgImageRemoveBackground(this);
  _MergedGlobals_83 = result;
  byte_1ECE7EE41 = 1;
  return result;
}

BOOL PAL::init_VisionKitCore_vk_cgImageRemoveBackgroundWithDownsizing(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = 0;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  PAL::softLinkVisionKitCorevk_cgImageRemoveBackgroundWithDownsizing = (uint64_t)dlsym((void *)qword_1ECE7EE48, "vk_cgImageRemoveBackgroundWithDownsizing");
  return PAL::softLinkVisionKitCorevk_cgImageRemoveBackgroundWithDownsizing != 0;
}

BOOL PAL::canLoad_VisionKitCore_vk_cgImageRemoveBackgroundWithDownsizing(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7EE43 == 1)
    return byte_1ECE7EE42 != 0;
  result = PAL::init_VisionKitCore_vk_cgImageRemoveBackgroundWithDownsizing(this);
  byte_1ECE7EE42 = result;
  byte_1ECE7EE43 = 1;
  return result;
}

uint64_t PAL::initVKCRemoveBackgroundRequestHandler(PAL *this)
{
  if (qword_1ECE7EEC8 != -1)
    dispatch_once(&qword_1ECE7EEC8, &__block_literal_global_18_5);
  return qword_1ECE7EED0;
}

uint64_t PAL::initVKCRemoveBackgroundRequest(PAL *this)
{
  if (qword_1ECE7EED8 != -1)
    dispatch_once(&qword_1ECE7EED8, &__block_literal_global_20_4);
  return qword_1ECE7EEE0;
}

uint64_t PAL::initVKCRemoveBackgroundResult(PAL *this)
{
  if (qword_1ECE7EEE8 != -1)
    dispatch_once(&qword_1ECE7EEE8, &__block_literal_global_22_3);
  return qword_1ECE7EEF0;
}

Class ___ZN3PALL19initVKImageAnalyzerEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  result = objc_getClass("VKImageAnalyzer");
  qword_1ECE7EE60 = (uint64_t)result;
  PAL::getVKImageAnalyzerClass = (uint64_t)PAL::VKImageAnalyzerFunction;
  return result;
}

uint64_t PAL::VKImageAnalyzerFunction(PAL *this)
{
  return qword_1ECE7EE60;
}

Class ___ZN3PALL26initVKImageAnalyzerRequestEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  result = objc_getClass("VKImageAnalyzerRequest");
  qword_1ECE7EE70 = (uint64_t)result;
  PAL::getVKImageAnalyzerRequestClass = (uint64_t)PAL::VKImageAnalyzerRequestFunction;
  return result;
}

uint64_t PAL::VKImageAnalyzerRequestFunction(PAL *this)
{
  return qword_1ECE7EE70;
}

Class ___ZN3PALL20initVKCImageAnalyzerEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  result = objc_getClass("VKCImageAnalyzer");
  qword_1ECE7EE80 = (uint64_t)result;
  PAL::getVKCImageAnalyzerClass = (uint64_t)PAL::VKCImageAnalyzerFunction;
  return result;
}

uint64_t PAL::VKCImageAnalyzerFunction(PAL *this)
{
  return qword_1ECE7EE80;
}

Class ___ZN3PALL27initVKCImageAnalyzerRequestEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  result = objc_getClass("VKCImageAnalyzerRequest");
  qword_1ECE7EE90 = (uint64_t)result;
  PAL::getVKCImageAnalyzerRequestClass = (uint64_t)PAL::VKCImageAnalyzerRequestFunction;
  return result;
}

uint64_t PAL::VKCImageAnalyzerRequestFunction(PAL *this)
{
  return qword_1ECE7EE90;
}

Class ___ZN3PALL31initVKCImageAnalysisInteractionEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  result = objc_getClass("VKCImageAnalysisInteraction");
  qword_1ECE7EEB0 = (uint64_t)result;
  PAL::getVKCImageAnalysisInteractionClass = (uint64_t)PAL::VKCImageAnalysisInteractionFunction;
  return result;
}

uint64_t PAL::VKCImageAnalysisInteractionFunction(PAL *this)
{
  return qword_1ECE7EEB0;
}

Class ___ZN3PALL31initVKCImageAnalysisOverlayViewEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  result = objc_getClass("VKCImageAnalysisOverlayView");
  qword_1ECE7EEC0 = (uint64_t)result;
  PAL::getVKCImageAnalysisOverlayViewClass = (uint64_t)PAL::VKCImageAnalysisOverlayViewFunction;
  return result;
}

uint64_t PAL::VKCImageAnalysisOverlayViewFunction(PAL *this)
{
  return qword_1ECE7EEC0;
}

Class ___ZN3PALL37initVKCRemoveBackgroundRequestHandlerEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  result = objc_getClass("VKCRemoveBackgroundRequestHandler");
  qword_1ECE7EED0 = (uint64_t)result;
  PAL::getVKCRemoveBackgroundRequestHandlerClass = (uint64_t)PAL::VKCRemoveBackgroundRequestHandlerFunction;
  return result;
}

uint64_t PAL::VKCRemoveBackgroundRequestHandlerFunction(PAL *this)
{
  return qword_1ECE7EED0;
}

Class ___ZN3PALL30initVKCRemoveBackgroundRequestEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  result = objc_getClass("VKCRemoveBackgroundRequest");
  qword_1ECE7EEE0 = (uint64_t)result;
  PAL::getVKCRemoveBackgroundRequestClass = (uint64_t)PAL::VKCRemoveBackgroundRequestFunction;
  return result;
}

uint64_t PAL::VKCRemoveBackgroundRequestFunction(PAL *this)
{
  return qword_1ECE7EEE0;
}

Class ___ZN3PALL29initVKCRemoveBackgroundResultEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  result = objc_getClass("VKCRemoveBackgroundResult");
  qword_1ECE7EEF0 = (uint64_t)result;
  PAL::getVKCRemoveBackgroundResultClass = (uint64_t)PAL::VKCRemoveBackgroundResultFunction;
  return result;
}

uint64_t PAL::VKCRemoveBackgroundResultFunction(PAL *this)
{
  return qword_1ECE7EEF0;
}

uint64_t PAL::VisionLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7EF00 != -1)
    dispatch_once(&qword_1ECE7EF00, block);
  return _MergedGlobals_84;
}

uint64_t ___ZN3PAL13VisionLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/Vision.framework/Vision", 2);
  _MergedGlobals_84 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initVNDetectBarcodesRequest(PAL *this)
{
  if (qword_1ECE7F078 != -1)
    dispatch_once(&qword_1ECE7F078, &__block_literal_global_48_4);
  return qword_1ECE7F080;
}

uint64_t PAL::initVNDetectFaceLandmarksRequest(PAL *this)
{
  if (qword_1ECE7F088 != -1)
    dispatch_once(&qword_1ECE7F088, &__block_literal_global_50_4);
  return qword_1ECE7F090;
}

uint64_t PAL::initVNImageRequestHandler(PAL *this)
{
  if (qword_1ECE7F098 != -1)
    dispatch_once(&qword_1ECE7F098, &__block_literal_global_52_3);
  return qword_1ECE7F0A0;
}

uint64_t PAL::initVNRecognizeTextRequest(PAL *this)
{
  if (qword_1ECE7F0A8 != -1)
    dispatch_once(&qword_1ECE7F0A8, &__block_literal_global_54_4);
  return qword_1ECE7F0B0;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyAztec(PAL *this)
{
  if (qword_1ECE7EF10 != -1)
    dispatch_once(&qword_1ECE7EF10, &__block_literal_global_24);
  return qword_1ECE7EF08;
}

uint64_t ___ZN3PAL34get_Vision_VNBarcodeSymbologyAztecEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyAztec");
    if (result)
    {
LABEL_3:
      qword_1ECE7EF08 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyAztec");
    if (result)
      goto LABEL_3;
  }
  result = 39;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyCodabar(PAL *this)
{
  if (qword_1ECE7EF20 != -1)
    dispatch_once(&qword_1ECE7EF20, &__block_literal_global_4_11);
  return qword_1ECE7EF18;
}

uint64_t ___ZN3PAL36get_Vision_VNBarcodeSymbologyCodabarEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCodabar");
    if (result)
    {
LABEL_3:
      qword_1ECE7EF18 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCodabar");
    if (result)
      goto LABEL_3;
  }
  result = 40;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyCode39(PAL *this)
{
  if (qword_1ECE7EF30 != -1)
    dispatch_once(&qword_1ECE7EF30, &__block_literal_global_6_11);
  return qword_1ECE7EF28;
}

uint64_t ___ZN3PAL35get_Vision_VNBarcodeSymbologyCode39Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode39");
    if (result)
    {
LABEL_3:
      qword_1ECE7EF28 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode39");
    if (result)
      goto LABEL_3;
  }
  result = 41;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyCode39Checksum(PAL *this)
{
  if (qword_1ECE7EF40 != -1)
    dispatch_once(&qword_1ECE7EF40, &__block_literal_global_8_8);
  return qword_1ECE7EF38;
}

uint64_t ___ZN3PAL43get_Vision_VNBarcodeSymbologyCode39ChecksumEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode39Checksum");
    if (result)
    {
LABEL_3:
      qword_1ECE7EF38 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode39Checksum");
    if (result)
      goto LABEL_3;
  }
  result = 42;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyCode39FullASCII(PAL *this)
{
  if (qword_1ECE7EF50 != -1)
    dispatch_once(&qword_1ECE7EF50, &__block_literal_global_10_8);
  return qword_1ECE7EF48;
}

uint64_t ___ZN3PAL44get_Vision_VNBarcodeSymbologyCode39FullASCIIEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode39FullASCII");
    if (result)
    {
LABEL_3:
      qword_1ECE7EF48 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode39FullASCII");
    if (result)
      goto LABEL_3;
  }
  result = 43;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyCode39FullASCIIChecksum(PAL *this)
{
  if (qword_1ECE7EF60 != -1)
    dispatch_once(&qword_1ECE7EF60, &__block_literal_global_12_10);
  return qword_1ECE7EF58;
}

uint64_t ___ZN3PAL52get_Vision_VNBarcodeSymbologyCode39FullASCIIChecksumEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode39FullASCIIChecksum");
    if (result)
    {
LABEL_3:
      qword_1ECE7EF58 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode39FullASCIIChecksum");
    if (result)
      goto LABEL_3;
  }
  result = 44;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyCode93(PAL *this)
{
  if (qword_1ECE7EF70 != -1)
    dispatch_once(&qword_1ECE7EF70, &__block_literal_global_14_7);
  return qword_1ECE7EF68;
}

uint64_t ___ZN3PAL35get_Vision_VNBarcodeSymbologyCode93Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode93");
    if (result)
    {
LABEL_3:
      qword_1ECE7EF68 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode93");
    if (result)
      goto LABEL_3;
  }
  result = 45;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyCode93i(PAL *this)
{
  if (qword_1ECE7EF80 != -1)
    dispatch_once(&qword_1ECE7EF80, &__block_literal_global_16_5);
  return qword_1ECE7EF78;
}

uint64_t ___ZN3PAL36get_Vision_VNBarcodeSymbologyCode93iEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode93i");
    if (result)
    {
LABEL_3:
      qword_1ECE7EF78 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode93i");
    if (result)
      goto LABEL_3;
  }
  result = 46;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyCode128(PAL *this)
{
  if (qword_1ECE7EF90 != -1)
    dispatch_once(&qword_1ECE7EF90, &__block_literal_global_18_6);
  return qword_1ECE7EF88;
}

uint64_t ___ZN3PAL36get_Vision_VNBarcodeSymbologyCode128Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode128");
    if (result)
    {
LABEL_3:
      qword_1ECE7EF88 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyCode128");
    if (result)
      goto LABEL_3;
  }
  result = 47;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyDataMatrix(PAL *this)
{
  if (qword_1ECE7EFA0 != -1)
    dispatch_once(&qword_1ECE7EFA0, &__block_literal_global_20_5);
  return qword_1ECE7EF98;
}

uint64_t ___ZN3PAL39get_Vision_VNBarcodeSymbologyDataMatrixEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyDataMatrix");
    if (result)
    {
LABEL_3:
      qword_1ECE7EF98 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyDataMatrix");
    if (result)
      goto LABEL_3;
  }
  result = 48;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyEAN8(PAL *this)
{
  if (qword_1ECE7EFB0 != -1)
    dispatch_once(&qword_1ECE7EFB0, &__block_literal_global_22_4);
  return qword_1ECE7EFA8;
}

uint64_t ___ZN3PAL33get_Vision_VNBarcodeSymbologyEAN8Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyEAN8");
    if (result)
    {
LABEL_3:
      qword_1ECE7EFA8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyEAN8");
    if (result)
      goto LABEL_3;
  }
  result = 49;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyEAN13(PAL *this)
{
  if (qword_1ECE7EFC0 != -1)
    dispatch_once(&qword_1ECE7EFC0, &__block_literal_global_24_5);
  return qword_1ECE7EFB8;
}

uint64_t ___ZN3PAL34get_Vision_VNBarcodeSymbologyEAN13Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyEAN13");
    if (result)
    {
LABEL_3:
      qword_1ECE7EFB8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyEAN13");
    if (result)
      goto LABEL_3;
  }
  result = 50;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyGS1DataBar(PAL *this)
{
  if (qword_1ECE7EFD0 != -1)
    dispatch_once(&qword_1ECE7EFD0, &__block_literal_global_26_4);
  return qword_1ECE7EFC8;
}

uint64_t ___ZN3PAL39get_Vision_VNBarcodeSymbologyGS1DataBarEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyGS1DataBar");
    if (result)
    {
LABEL_3:
      qword_1ECE7EFC8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyGS1DataBar");
    if (result)
      goto LABEL_3;
  }
  result = 51;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyGS1DataBarExpanded(PAL *this)
{
  if (qword_1ECE7EFE0 != -1)
    dispatch_once(&qword_1ECE7EFE0, &__block_literal_global_28_3);
  return qword_1ECE7EFD8;
}

uint64_t ___ZN3PAL47get_Vision_VNBarcodeSymbologyGS1DataBarExpandedEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyGS1DataBarExpanded");
    if (result)
    {
LABEL_3:
      qword_1ECE7EFD8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyGS1DataBarExpanded");
    if (result)
      goto LABEL_3;
  }
  result = 52;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyGS1DataBarLimited(PAL *this)
{
  if (qword_1ECE7EFF0 != -1)
    dispatch_once(&qword_1ECE7EFF0, &__block_literal_global_30_5);
  return qword_1ECE7EFE8;
}

uint64_t ___ZN3PAL46get_Vision_VNBarcodeSymbologyGS1DataBarLimitedEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyGS1DataBarLimited");
    if (result)
    {
LABEL_3:
      qword_1ECE7EFE8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyGS1DataBarLimited");
    if (result)
      goto LABEL_3;
  }
  result = 53;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyI2of5(PAL *this)
{
  if (qword_1ECE7F000 != -1)
    dispatch_once(&qword_1ECE7F000, &__block_literal_global_32_4);
  return qword_1ECE7EFF8;
}

uint64_t ___ZN3PAL34get_Vision_VNBarcodeSymbologyI2of5Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyI2of5");
    if (result)
    {
LABEL_3:
      qword_1ECE7EFF8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyI2of5");
    if (result)
      goto LABEL_3;
  }
  result = 54;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyI2of5Checksum(PAL *this)
{
  if (qword_1ECE7F010 != -1)
    dispatch_once(&qword_1ECE7F010, &__block_literal_global_34_4);
  return qword_1ECE7F008;
}

uint64_t ___ZN3PAL42get_Vision_VNBarcodeSymbologyI2of5ChecksumEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyI2of5Checksum");
    if (result)
    {
LABEL_3:
      qword_1ECE7F008 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyI2of5Checksum");
    if (result)
      goto LABEL_3;
  }
  result = 55;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyITF14(PAL *this)
{
  if (qword_1ECE7F020 != -1)
    dispatch_once(&qword_1ECE7F020, &__block_literal_global_36_4);
  return qword_1ECE7F018;
}

uint64_t ___ZN3PAL34get_Vision_VNBarcodeSymbologyITF14Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyITF14");
    if (result)
    {
LABEL_3:
      qword_1ECE7F018 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyITF14");
    if (result)
      goto LABEL_3;
  }
  result = 56;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyMicroPDF417(PAL *this)
{
  if (qword_1ECE7F030 != -1)
    dispatch_once(&qword_1ECE7F030, &__block_literal_global_38_4);
  return qword_1ECE7F028;
}

uint64_t ___ZN3PAL40get_Vision_VNBarcodeSymbologyMicroPDF417Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyMicroPDF417");
    if (result)
    {
LABEL_3:
      qword_1ECE7F028 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyMicroPDF417");
    if (result)
      goto LABEL_3;
  }
  result = 57;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyMicroQR(PAL *this)
{
  if (qword_1ECE7F040 != -1)
    dispatch_once(&qword_1ECE7F040, &__block_literal_global_40_4);
  return qword_1ECE7F038;
}

uint64_t ___ZN3PAL36get_Vision_VNBarcodeSymbologyMicroQREv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyMicroQR");
    if (result)
    {
LABEL_3:
      qword_1ECE7F038 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyMicroQR");
    if (result)
      goto LABEL_3;
  }
  result = 58;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyPDF417(PAL *this)
{
  if (qword_1ECE7F050 != -1)
    dispatch_once(&qword_1ECE7F050, &__block_literal_global_42_4);
  return qword_1ECE7F048;
}

uint64_t ___ZN3PAL35get_Vision_VNBarcodeSymbologyPDF417Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyPDF417");
    if (result)
    {
LABEL_3:
      qword_1ECE7F048 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyPDF417");
    if (result)
      goto LABEL_3;
  }
  result = 59;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyQR(PAL *this)
{
  if (qword_1ECE7F060 != -1)
    dispatch_once(&qword_1ECE7F060, &__block_literal_global_44_3);
  return qword_1ECE7F058;
}

uint64_t ___ZN3PAL31get_Vision_VNBarcodeSymbologyQREv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyQR");
    if (result)
    {
LABEL_3:
      qword_1ECE7F058 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyQR");
    if (result)
      goto LABEL_3;
  }
  result = 60;
  __break(0xC471u);
  return result;
}

uint64_t PAL::get_Vision_VNBarcodeSymbologyUPCE(PAL *this)
{
  if (qword_1ECE7F070 != -1)
    dispatch_once(&qword_1ECE7F070, &__block_literal_global_46_4);
  return qword_1ECE7F068;
}

uint64_t ___ZN3PAL33get_Vision_VNBarcodeSymbologyUPCEEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7EF00 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyUPCE");
    if (result)
    {
LABEL_3:
      qword_1ECE7F068 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7EF00, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_84, "VNBarcodeSymbologyUPCE");
    if (result)
      goto LABEL_3;
  }
  result = 61;
  __break(0xC471u);
  return result;
}

Class ___ZN3PALL27initVNDetectBarcodesRequestEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EF00 != -1)
    dispatch_once(&qword_1ECE7EF00, block);
  result = objc_getClass("VNDetectBarcodesRequest");
  qword_1ECE7F080 = (uint64_t)result;
  PAL::getVNDetectBarcodesRequestClass[0] = PAL::VNDetectBarcodesRequestFunction;
  return result;
}

uint64_t PAL::VNDetectBarcodesRequestFunction(PAL *this)
{
  return qword_1ECE7F080;
}

Class ___ZN3PALL32initVNDetectFaceLandmarksRequestEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EF00 != -1)
    dispatch_once(&qword_1ECE7EF00, block);
  result = objc_getClass("VNDetectFaceLandmarksRequest");
  qword_1ECE7F090 = (uint64_t)result;
  PAL::getVNDetectFaceLandmarksRequestClass[0] = PAL::VNDetectFaceLandmarksRequestFunction;
  return result;
}

uint64_t PAL::VNDetectFaceLandmarksRequestFunction(PAL *this)
{
  return qword_1ECE7F090;
}

Class ___ZN3PALL25initVNImageRequestHandlerEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EF00 != -1)
    dispatch_once(&qword_1ECE7EF00, block);
  result = objc_getClass("VNImageRequestHandler");
  qword_1ECE7F0A0 = (uint64_t)result;
  PAL::getVNImageRequestHandlerClass[0] = PAL::VNImageRequestHandlerFunction;
  return result;
}

uint64_t PAL::VNImageRequestHandlerFunction(PAL *this)
{
  return qword_1ECE7F0A0;
}

Class ___ZN3PALL26initVNRecognizeTextRequestEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL13VisionLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EF00 != -1)
    dispatch_once(&qword_1ECE7EF00, block);
  result = objc_getClass("VNRecognizeTextRequest");
  qword_1ECE7F0B0 = (uint64_t)result;
  PAL::getVNRecognizeTextRequestClass[0] = PAL::VNRecognizeTextRequestFunction;
  return result;
}

uint64_t PAL::VNRecognizeTextRequestFunction(PAL *this)
{
  return qword_1ECE7F0B0;
}

uint64_t PAL::initWPLinkFilteringData(PAL *this)
{
  if (qword_1ECE7F108 != -1)
    dispatch_once(&qword_1ECE7F108, &__block_literal_global_10_9);
  return qword_1ECE7F110;
}

uint64_t PAL::initWPStorageAccessPromptQuirk(PAL *this)
{
  if (qword_1ECE7F118 != -1)
    dispatch_once(&qword_1ECE7F118, &__block_literal_global_12_11);
  return qword_1ECE7F120;
}

uint64_t PAL::initWPStorageAccessPromptQuirksData(PAL *this)
{
  if (qword_1ECE7F128 != -1)
    dispatch_once(&qword_1ECE7F128, &__block_literal_global_14_8);
  return qword_1ECE7F130;
}

uint64_t PAL::initWPStorageAccessUserAgentStringQuirkData(PAL *this)
{
  if (qword_1ECE7F138 != -1)
    dispatch_once(&qword_1ECE7F138, &__block_literal_global_16_6);
  return qword_1ECE7F140;
}

uint64_t PAL::get_WebPrivacy_WPNotificationUserInfoResourceTypeKey(PAL *this)
{
  if (qword_1ECE7F0D0 != -1)
    dispatch_once(&qword_1ECE7F0D0, &__block_literal_global_25);
  return qword_1ECE7F0C8;
}

uint64_t ___ZN3PAL52get_WebPrivacy_WPNotificationUserInfoResourceTypeKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17WebPrivacyLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7F0C0 == -1)
  {
    result = (uint64_t)dlsym((void *)_MergedGlobals_85, "WPNotificationUserInfoResourceTypeKey");
    if (result)
    {
LABEL_3:
      qword_1ECE7F0C8 = *(_QWORD *)result;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7F0C0, block);
    result = (uint64_t)dlsym((void *)_MergedGlobals_85, "WPNotificationUserInfoResourceTypeKey");
    if (result)
      goto LABEL_3;
  }
  result = 40;
  __break(0xC471u);
  return result;
}

uint64_t PAL::WPResourceRequestOptionsFunction(PAL *this)
{
  return qword_1ECE7F0F0;
}

uint64_t PAL::WPResourcesFunction(PAL *this)
{
  return qword_1ECE7F100;
}

Class ___ZN3PALL23initWPLinkFilteringDataEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17WebPrivacyLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7F0C0 != -1)
    dispatch_once(&qword_1ECE7F0C0, block);
  result = objc_getClass("WPLinkFilteringData");
  qword_1ECE7F110 = (uint64_t)result;
  PAL::getWPLinkFilteringDataClass = (uint64_t)PAL::WPLinkFilteringDataFunction;
  return result;
}

uint64_t PAL::WPLinkFilteringDataFunction(PAL *this)
{
  return qword_1ECE7F110;
}

Class ___ZN3PALL30initWPStorageAccessPromptQuirkEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17WebPrivacyLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7F0C0 != -1)
    dispatch_once(&qword_1ECE7F0C0, block);
  result = objc_getClass("WPStorageAccessPromptQuirk");
  qword_1ECE7F120 = (uint64_t)result;
  PAL::getWPStorageAccessPromptQuirkClass = (uint64_t)PAL::WPStorageAccessPromptQuirkFunction;
  return result;
}

uint64_t PAL::WPStorageAccessPromptQuirkFunction(PAL *this)
{
  return qword_1ECE7F120;
}

Class ___ZN3PALL35initWPStorageAccessPromptQuirksDataEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17WebPrivacyLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7F0C0 != -1)
    dispatch_once(&qword_1ECE7F0C0, block);
  result = objc_getClass("WPStorageAccessPromptQuirksData");
  qword_1ECE7F130 = (uint64_t)result;
  PAL::getWPStorageAccessPromptQuirksDataClass = (uint64_t)PAL::WPStorageAccessPromptQuirksDataFunction;
  return result;
}

uint64_t PAL::WPStorageAccessPromptQuirksDataFunction(PAL *this)
{
  return qword_1ECE7F130;
}

Class ___ZN3PALL43initWPStorageAccessUserAgentStringQuirkDataEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17WebPrivacyLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7F0C0 != -1)
    dispatch_once(&qword_1ECE7F0C0, block);
  result = objc_getClass("WPStorageAccessUserAgentStringQuirkData");
  qword_1ECE7F140 = (uint64_t)result;
  PAL::getWPStorageAccessUserAgentStringQuirkDataClass = (uint64_t)PAL::WPStorageAccessUserAgentStringQuirkDataFunction;
  return result;
}

uint64_t PAL::WPStorageAccessUserAgentStringQuirkDataFunction(PAL *this)
{
  return qword_1ECE7F140;
}

uint64_t PAL::WritingToolsUILibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL21WritingToolsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7F150 != -1)
    dispatch_once(&qword_1ECE7F150, block);
  return _MergedGlobals_86;
}

uint64_t ___ZN3PAL21WritingToolsUILibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/WritingToolsUI.framework/WritingToolsUI", 2);
  _MergedGlobals_86 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t PAL::initWTWritingTools(PAL *this)
{
  if (qword_1ECE7F158 != -1)
    dispatch_once(&qword_1ECE7F158, &__block_literal_global_26);
  return qword_1ECE7F160;
}

uint64_t PAL::initWTWritingToolsViewController(PAL *this)
{
  if (qword_1ECE7F168 != -1)
    dispatch_once(&qword_1ECE7F168, &__block_literal_global_4_13);
  return qword_1ECE7F170;
}

uint64_t PAL::init_WTTextEffectView(PAL *this)
{
  if (qword_1ECE7F178 != -1)
    dispatch_once(&qword_1ECE7F178, &__block_literal_global_6_13);
  return qword_1ECE7F180;
}

uint64_t PAL::init_WTSweepTextEffect(PAL *this)
{
  if (qword_1ECE7F188 != -1)
    dispatch_once(&qword_1ECE7F188, &__block_literal_global_8_10);
  return qword_1ECE7F190;
}

uint64_t PAL::init_WTReplaceTextEffect(PAL *this)
{
  if (qword_1ECE7F198 != -1)
    dispatch_once(&qword_1ECE7F198, &__block_literal_global_10_10);
  return qword_1ECE7F1A0;
}

uint64_t PAL::init_WTReplaceSourceTextEffect(PAL *this)
{
  if (qword_1ECE7F1A8 != -1)
    dispatch_once(&qword_1ECE7F1A8, &__block_literal_global_12_12);
  return qword_1ECE7F1B0;
}

uint64_t PAL::init_WTReplaceDestinationTextEffect(PAL *this)
{
  if (qword_1ECE7F1B8 != -1)
    dispatch_once(&qword_1ECE7F1B8, &__block_literal_global_14_9);
  return qword_1ECE7F1C0;
}

uint64_t PAL::init_WTTextChunk(PAL *this)
{
  if (qword_1ECE7F1C8 != -1)
    dispatch_once(&qword_1ECE7F1C8, &__block_literal_global_16_7);
  return qword_1ECE7F1D0;
}

uint64_t PAL::init_WTTextPreview(PAL *this)
{
  if (qword_1ECE7F1D8 != -1)
    dispatch_once(&qword_1ECE7F1D8, &__block_literal_global_18_7);
  return qword_1ECE7F1E0;
}

uint64_t ___ZN3PALL18initWTWritingToolsEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL21WritingToolsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7F150 == -1)
  {
    result = (uint64_t)objc_getClass("WTWritingTools");
    qword_1ECE7F160 = result;
    if (result)
    {
LABEL_3:
      PAL::getWTWritingToolsClass = (uint64_t)PAL::WTWritingToolsFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7F150, block);
    result = (uint64_t)objc_getClass("WTWritingTools");
    qword_1ECE7F160 = result;
    if (result)
      goto LABEL_3;
  }
  result = 35;
  __break(0xC471u);
  return result;
}

uint64_t PAL::WTWritingToolsFunction(PAL *this)
{
  return qword_1ECE7F160;
}

uint64_t ___ZN3PALL32initWTWritingToolsViewControllerEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL21WritingToolsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7F150 == -1)
  {
    result = (uint64_t)objc_getClass("WTWritingToolsViewController");
    qword_1ECE7F170 = result;
    if (result)
    {
LABEL_3:
      PAL::getWTWritingToolsViewControllerClass = (uint64_t)PAL::WTWritingToolsViewControllerFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7F150, block);
    result = (uint64_t)objc_getClass("WTWritingToolsViewController");
    qword_1ECE7F170 = result;
    if (result)
      goto LABEL_3;
  }
  result = 36;
  __break(0xC471u);
  return result;
}

uint64_t PAL::WTWritingToolsViewControllerFunction(PAL *this)
{
  return qword_1ECE7F170;
}

uint64_t ___ZN3PALL21init_WTTextEffectViewEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL21WritingToolsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7F150 == -1)
  {
    result = (uint64_t)objc_getClass("_WTTextEffectView");
    qword_1ECE7F180 = result;
    if (result)
    {
LABEL_3:
      PAL::get_WTTextEffectViewClass = (uint64_t)PAL::_WTTextEffectViewFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7F150, block);
    result = (uint64_t)objc_getClass("_WTTextEffectView");
    qword_1ECE7F180 = result;
    if (result)
      goto LABEL_3;
  }
  result = 38;
  __break(0xC471u);
  return result;
}

uint64_t PAL::_WTTextEffectViewFunction(PAL *this)
{
  return qword_1ECE7F180;
}

uint64_t ___ZN3PALL22init_WTSweepTextEffectEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL21WritingToolsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7F150 == -1)
  {
    result = (uint64_t)objc_getClass("_WTSweepTextEffect");
    qword_1ECE7F190 = result;
    if (result)
    {
LABEL_3:
      PAL::get_WTSweepTextEffectClass = (uint64_t)PAL::_WTSweepTextEffectFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7F150, block);
    result = (uint64_t)objc_getClass("_WTSweepTextEffect");
    qword_1ECE7F190 = result;
    if (result)
      goto LABEL_3;
  }
  result = 39;
  __break(0xC471u);
  return result;
}

uint64_t PAL::_WTSweepTextEffectFunction(PAL *this)
{
  return qword_1ECE7F190;
}

uint64_t ___ZN3PALL24init_WTReplaceTextEffectEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL21WritingToolsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7F150 == -1)
  {
    result = (uint64_t)objc_getClass("_WTReplaceTextEffect");
    qword_1ECE7F1A0 = result;
    if (result)
    {
LABEL_3:
      PAL::get_WTReplaceTextEffectClass = (uint64_t)PAL::_WTReplaceTextEffectFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7F150, block);
    result = (uint64_t)objc_getClass("_WTReplaceTextEffect");
    qword_1ECE7F1A0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 40;
  __break(0xC471u);
  return result;
}

uint64_t PAL::_WTReplaceTextEffectFunction(PAL *this)
{
  return qword_1ECE7F1A0;
}

uint64_t ___ZN3PALL30init_WTReplaceSourceTextEffectEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL21WritingToolsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7F150 == -1)
  {
    result = (uint64_t)objc_getClass("_WTReplaceSourceTextEffect");
    qword_1ECE7F1B0 = result;
    if (result)
    {
LABEL_3:
      PAL::get_WTReplaceSourceTextEffectClass = (uint64_t)PAL::_WTReplaceSourceTextEffectFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7F150, block);
    result = (uint64_t)objc_getClass("_WTReplaceSourceTextEffect");
    qword_1ECE7F1B0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 41;
  __break(0xC471u);
  return result;
}

uint64_t PAL::_WTReplaceSourceTextEffectFunction(PAL *this)
{
  return qword_1ECE7F1B0;
}

uint64_t ___ZN3PALL35init_WTReplaceDestinationTextEffectEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL21WritingToolsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7F150 == -1)
  {
    result = (uint64_t)objc_getClass("_WTReplaceDestinationTextEffect");
    qword_1ECE7F1C0 = result;
    if (result)
    {
LABEL_3:
      PAL::get_WTReplaceDestinationTextEffectClass = (uint64_t)PAL::_WTReplaceDestinationTextEffectFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7F150, block);
    result = (uint64_t)objc_getClass("_WTReplaceDestinationTextEffect");
    qword_1ECE7F1C0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 42;
  __break(0xC471u);
  return result;
}

uint64_t PAL::_WTReplaceDestinationTextEffectFunction(PAL *this)
{
  return qword_1ECE7F1C0;
}

uint64_t ___ZN3PALL16init_WTTextChunkEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL21WritingToolsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7F150 == -1)
  {
    result = (uint64_t)objc_getClass("_WTTextChunk");
    qword_1ECE7F1D0 = result;
    if (result)
    {
LABEL_3:
      PAL::get_WTTextChunkClass = (uint64_t)PAL::_WTTextChunkFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7F150, block);
    result = (uint64_t)objc_getClass("_WTTextChunk");
    qword_1ECE7F1D0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 43;
  __break(0xC471u);
  return result;
}

uint64_t PAL::_WTTextChunkFunction(PAL *this)
{
  return qword_1ECE7F1D0;
}

uint64_t ___ZN3PALL18init_WTTextPreviewEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL21WritingToolsUILibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7F150 == -1)
  {
    result = (uint64_t)objc_getClass("_WTTextPreview");
    qword_1ECE7F1E0 = result;
    if (result)
    {
LABEL_3:
      PAL::get_WTTextPreviewClass = (uint64_t)PAL::_WTTextPreviewFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7F150, block);
    result = (uint64_t)objc_getClass("_WTTextPreview");
    qword_1ECE7F1E0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 44;
  __break(0xC471u);
  return result;
}

uint64_t PAL::_WTTextPreviewFunction(PAL *this)
{
  return qword_1ECE7F1E0;
}

__n128 dav1d_cdf_thread_update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _WORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __n128 result;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;

  v3 = 0;
  *(_WORD *)(a2 + 5464) = *(_WORD *)(a3 + 5464);
  *(_WORD *)(a2 + 5466) = 0;
  *(_WORD *)(a2 + 5468) = *(_WORD *)(a3 + 5468);
  *(_WORD *)(a2 + 5470) = 0;
  *(_WORD *)(a2 + 5472) = *(_WORD *)(a3 + 5472);
  *(_WORD *)(a2 + 5474) = 0;
  *(_WORD *)(a2 + 5476) = *(_WORD *)(a3 + 5476);
  *(_WORD *)(a2 + 5478) = 0;
  *(_WORD *)(a2 + 5480) = *(_WORD *)(a3 + 5480);
  *(_WORD *)(a2 + 5482) = 0;
  *(_WORD *)(a2 + 5484) = *(_WORD *)(a3 + 5484);
  *(_WORD *)(a2 + 5486) = 0;
  *(_WORD *)(a2 + 5488) = *(_WORD *)(a3 + 5488);
  *(_WORD *)(a2 + 5490) = 0;
  *(_WORD *)(a2 + 5492) = *(_WORD *)(a3 + 5492);
  *(_WORD *)(a2 + 5494) = 0;
  *(_WORD *)(a2 + 5496) = *(_WORD *)(a3 + 5496);
  *(_WORD *)(a2 + 5498) = 0;
  *(_WORD *)(a2 + 5500) = *(_WORD *)(a3 + 5500);
  *(_WORD *)(a2 + 5502) = 0;
  *(_WORD *)(a2 + 5504) = *(_WORD *)(a3 + 5504);
  *(_WORD *)(a2 + 5506) = 0;
  *(_WORD *)(a2 + 5508) = *(_WORD *)(a3 + 5508);
  *(_WORD *)(a2 + 5510) = 0;
  *(_WORD *)(a2 + 5512) = *(_WORD *)(a3 + 5512);
  *(_WORD *)(a2 + 5514) = 0;
  *(_WORD *)(a2 + 5516) = *(_WORD *)(a3 + 5516);
  *(_WORD *)(a2 + 5518) = 0;
  *(_WORD *)(a2 + 5520) = *(_WORD *)(a3 + 5520);
  *(_WORD *)(a2 + 5522) = 0;
  *(_WORD *)(a2 + 5524) = *(_WORD *)(a3 + 5524);
  *(_WORD *)(a2 + 5526) = 0;
  *(_WORD *)(a2 + 5528) = *(_WORD *)(a3 + 5528);
  *(_WORD *)(a2 + 5530) = 0;
  *(_WORD *)(a2 + 5532) = *(_WORD *)(a3 + 5532);
  *(_WORD *)(a2 + 5534) = 0;
  *(_WORD *)(a2 + 5536) = *(_WORD *)(a3 + 5536);
  *(_WORD *)(a2 + 5538) = 0;
  *(_WORD *)(a2 + 5540) = *(_WORD *)(a3 + 5540);
  *(_WORD *)(a2 + 5542) = 0;
  *(_WORD *)(a2 + 5544) = *(_WORD *)(a3 + 5544);
  *(_WORD *)(a2 + 5546) = 0;
  *(_WORD *)(a2 + 5548) = *(_WORD *)(a3 + 5548);
  *(_WORD *)(a2 + 5550) = 0;
  *(_OWORD *)(a2 + 3360) = *(_OWORD *)(a3 + 3360);
  *(_WORD *)(a2 + 3368) = 0;
  v4 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 144) = v4;
  *(_WORD *)(a2 + 152) = 0;
  v5 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 176) = v5;
  *(_WORD *)(a2 + 184) = 0;
  v6 = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
  *(_OWORD *)(a2 + 208) = v6;
  *(_WORD *)(a2 + 216) = 0;
  v7 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(a2 + 224) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(a2 + 240) = v7;
  *(_WORD *)(a2 + 248) = 0;
  v8 = *(_OWORD *)(a3 + 272);
  *(_OWORD *)(a2 + 256) = *(_OWORD *)(a3 + 256);
  *(_OWORD *)(a2 + 272) = v8;
  *(_WORD *)(a2 + 280) = 0;
  v9 = *(_OWORD *)(a3 + 304);
  *(_OWORD *)(a2 + 288) = *(_OWORD *)(a3 + 288);
  *(_OWORD *)(a2 + 304) = v9;
  *(_WORD *)(a2 + 312) = 0;
  v10 = *(_OWORD *)(a3 + 336);
  *(_OWORD *)(a2 + 320) = *(_OWORD *)(a3 + 320);
  *(_OWORD *)(a2 + 336) = v10;
  *(_WORD *)(a2 + 344) = 0;
  v11 = *(_OWORD *)(a3 + 368);
  *(_OWORD *)(a2 + 352) = *(_OWORD *)(a3 + 352);
  *(_OWORD *)(a2 + 368) = v11;
  *(_WORD *)(a2 + 376) = 0;
  v12 = *(_OWORD *)(a3 + 400);
  *(_OWORD *)(a2 + 384) = *(_OWORD *)(a3 + 384);
  *(_OWORD *)(a2 + 400) = v12;
  *(_WORD *)(a2 + 408) = 0;
  v13 = *(_OWORD *)(a3 + 432);
  *(_OWORD *)(a2 + 416) = *(_OWORD *)(a3 + 416);
  *(_OWORD *)(a2 + 432) = v13;
  *(_WORD *)(a2 + 440) = 0;
  v14 = *(_OWORD *)(a3 + 464);
  *(_OWORD *)(a2 + 448) = *(_OWORD *)(a3 + 448);
  *(_OWORD *)(a2 + 464) = v14;
  *(_WORD *)(a2 + 472) = 0;
  v15 = *(_OWORD *)(a3 + 496);
  *(_OWORD *)(a2 + 480) = *(_OWORD *)(a3 + 480);
  *(_OWORD *)(a2 + 496) = v15;
  *(_WORD *)(a2 + 504) = 0;
  v16 = *(_OWORD *)(a3 + 528);
  *(_OWORD *)(a2 + 512) = *(_OWORD *)(a3 + 512);
  *(_OWORD *)(a2 + 528) = v16;
  *(_WORD *)(a2 + 536) = 0;
  v17 = *(_OWORD *)(a3 + 560);
  *(_OWORD *)(a2 + 544) = *(_OWORD *)(a3 + 544);
  *(_OWORD *)(a2 + 560) = v17;
  *(_WORD *)(a2 + 570) = 0;
  v18 = *(_OWORD *)(a3 + 592);
  *(_OWORD *)(a2 + 576) = *(_OWORD *)(a3 + 576);
  *(_OWORD *)(a2 + 592) = v18;
  *(_WORD *)(a2 + 602) = 0;
  v19 = *(_OWORD *)(a3 + 624);
  *(_OWORD *)(a2 + 608) = *(_OWORD *)(a3 + 608);
  *(_OWORD *)(a2 + 624) = v19;
  *(_WORD *)(a2 + 634) = 0;
  v20 = *(_OWORD *)(a3 + 656);
  *(_OWORD *)(a2 + 640) = *(_OWORD *)(a3 + 640);
  *(_OWORD *)(a2 + 656) = v20;
  *(_WORD *)(a2 + 666) = 0;
  v21 = *(_OWORD *)(a3 + 688);
  *(_OWORD *)(a2 + 672) = *(_OWORD *)(a3 + 672);
  *(_OWORD *)(a2 + 688) = v21;
  *(_WORD *)(a2 + 698) = 0;
  v22 = *(_OWORD *)(a3 + 720);
  *(_OWORD *)(a2 + 704) = *(_OWORD *)(a3 + 704);
  *(_OWORD *)(a2 + 720) = v22;
  *(_WORD *)(a2 + 730) = 0;
  v23 = *(_OWORD *)(a3 + 752);
  *(_OWORD *)(a2 + 736) = *(_OWORD *)(a3 + 736);
  *(_OWORD *)(a2 + 752) = v23;
  *(_WORD *)(a2 + 762) = 0;
  v24 = *(_OWORD *)(a3 + 784);
  *(_OWORD *)(a2 + 768) = *(_OWORD *)(a3 + 768);
  *(_OWORD *)(a2 + 784) = v24;
  *(_WORD *)(a2 + 794) = 0;
  v25 = *(_OWORD *)(a3 + 816);
  *(_OWORD *)(a2 + 800) = *(_OWORD *)(a3 + 800);
  *(_OWORD *)(a2 + 816) = v25;
  *(_WORD *)(a2 + 826) = 0;
  v26 = *(_OWORD *)(a3 + 848);
  *(_OWORD *)(a2 + 832) = *(_OWORD *)(a3 + 832);
  *(_OWORD *)(a2 + 848) = v26;
  *(_WORD *)(a2 + 858) = 0;
  v27 = *(_OWORD *)(a3 + 880);
  *(_OWORD *)(a2 + 864) = *(_OWORD *)(a3 + 864);
  *(_OWORD *)(a2 + 880) = v27;
  *(_WORD *)(a2 + 890) = 0;
  v28 = *(_OWORD *)(a3 + 912);
  *(_OWORD *)(a2 + 896) = *(_OWORD *)(a3 + 896);
  *(_OWORD *)(a2 + 912) = v28;
  *(_WORD *)(a2 + 922) = 0;
  v29 = *(_OWORD *)(a3 + 944);
  *(_OWORD *)(a2 + 928) = *(_OWORD *)(a3 + 928);
  *(_OWORD *)(a2 + 944) = v29;
  *(_WORD *)(a2 + 954) = 0;
  *(_OWORD *)(a2 + 3232) = *(_OWORD *)(a3 + 3232);
  *(_WORD *)(a2 + 3244) = 0;
  *(_OWORD *)(a2 + 3248) = *(_OWORD *)(a3 + 3248);
  *(_WORD *)(a2 + 3260) = 0;
  *(_OWORD *)(a2 + 3264) = *(_OWORD *)(a3 + 3264);
  *(_WORD *)(a2 + 3276) = 0;
  *(_OWORD *)(a2 + 3280) = *(_OWORD *)(a3 + 3280);
  *(_WORD *)(a2 + 3292) = 0;
  *(_OWORD *)(a2 + 3296) = *(_OWORD *)(a3 + 3296);
  *(_WORD *)(a2 + 3308) = 0;
  *(_OWORD *)(a2 + 3312) = *(_OWORD *)(a3 + 3312);
  *(_WORD *)(a2 + 3324) = 0;
  *(_OWORD *)(a2 + 3328) = *(_OWORD *)(a3 + 3328);
  *(_WORD *)(a2 + 3340) = 0;
  *(_OWORD *)(a2 + 3344) = *(_OWORD *)(a3 + 3344);
  *(_WORD *)(a2 + 3356) = 0;
  *(_QWORD *)(a2 + 5024) = *(_QWORD *)(a3 + 5024);
  *(_WORD *)(a2 + 5026) = 0;
  *(_QWORD *)(a2 + 5032) = *(_QWORD *)(a3 + 5032);
  *(_WORD *)(a2 + 5034) = 0;
  *(_QWORD *)(a2 + 5040) = *(_QWORD *)(a3 + 5040);
  *(_WORD *)(a2 + 5042) = 0;
  *(_QWORD *)(a2 + 5048) = *(_QWORD *)(a3 + 5048);
  *(_WORD *)(a2 + 5052) = 0;
  *(_QWORD *)(a2 + 5056) = *(_QWORD *)(a3 + 5056);
  *(_WORD *)(a2 + 5060) = 0;
  *(_QWORD *)(a2 + 5064) = *(_QWORD *)(a3 + 5064);
  *(_WORD *)(a2 + 5068) = 0;
  *(_QWORD *)(a2 + 5072) = *(_QWORD *)(a3 + 5072);
  *(_WORD *)(a2 + 5076) = 0;
  *(_QWORD *)(a2 + 5080) = *(_QWORD *)(a3 + 5080);
  *(_WORD *)(a2 + 5084) = 0;
  *(_QWORD *)(a2 + 5088) = *(_QWORD *)(a3 + 5088);
  *(_WORD *)(a2 + 5092) = 0;
  *(_QWORD *)(a2 + 5096) = *(_QWORD *)(a3 + 5096);
  *(_WORD *)(a2 + 5100) = 0;
  *(_QWORD *)(a2 + 5104) = *(_QWORD *)(a3 + 5104);
  *(_WORD *)(a2 + 5108) = 0;
  *(_QWORD *)(a2 + 5112) = *(_QWORD *)(a3 + 5112);
  *(_WORD *)(a2 + 5116) = 0;
  *(_OWORD *)(a2 + 2176) = *(_OWORD *)(a3 + 2176);
  *(_WORD *)(a2 + 2188) = 0;
  *(_OWORD *)(a2 + 2192) = *(_OWORD *)(a3 + 2192);
  *(_WORD *)(a2 + 2204) = 0;
  *(_OWORD *)(a2 + 2208) = *(_OWORD *)(a3 + 2208);
  *(_WORD *)(a2 + 2220) = 0;
  *(_OWORD *)(a2 + 2224) = *(_OWORD *)(a3 + 2224);
  *(_WORD *)(a2 + 2236) = 0;
  *(_OWORD *)(a2 + 2240) = *(_OWORD *)(a3 + 2240);
  *(_WORD *)(a2 + 2252) = 0;
  *(_OWORD *)(a2 + 2256) = *(_OWORD *)(a3 + 2256);
  *(_WORD *)(a2 + 2268) = 0;
  *(_OWORD *)(a2 + 2272) = *(_OWORD *)(a3 + 2272);
  *(_WORD *)(a2 + 2284) = 0;
  *(_OWORD *)(a2 + 2288) = *(_OWORD *)(a3 + 2288);
  *(_WORD *)(a2 + 2300) = 0;
  *(_OWORD *)(a2 + 2304) = *(_OWORD *)(a3 + 2304);
  *(_WORD *)(a2 + 2316) = 0;
  *(_OWORD *)(a2 + 2320) = *(_OWORD *)(a3 + 2320);
  *(_WORD *)(a2 + 2332) = 0;
  *(_OWORD *)(a2 + 2336) = *(_OWORD *)(a3 + 2336);
  *(_WORD *)(a2 + 2348) = 0;
  *(_OWORD *)(a2 + 2352) = *(_OWORD *)(a3 + 2352);
  *(_WORD *)(a2 + 2364) = 0;
  *(_OWORD *)(a2 + 2368) = *(_OWORD *)(a3 + 2368);
  *(_WORD *)(a2 + 2380) = 0;
  *(_OWORD *)(a2 + 2384) = *(_OWORD *)(a3 + 2384);
  *(_WORD *)(a2 + 2396) = 0;
  *(_OWORD *)(a2 + 2400) = *(_OWORD *)(a3 + 2400);
  *(_WORD *)(a2 + 2412) = 0;
  *(_OWORD *)(a2 + 2416) = *(_OWORD *)(a3 + 2416);
  *(_WORD *)(a2 + 2428) = 0;
  *(_OWORD *)(a2 + 2432) = *(_OWORD *)(a3 + 2432);
  *(_WORD *)(a2 + 2444) = 0;
  *(_OWORD *)(a2 + 2448) = *(_OWORD *)(a3 + 2448);
  *(_WORD *)(a2 + 2460) = 0;
  *(_OWORD *)(a2 + 2464) = *(_OWORD *)(a3 + 2464);
  *(_WORD *)(a2 + 2476) = 0;
  *(_OWORD *)(a2 + 2480) = *(_OWORD *)(a3 + 2480);
  *(_WORD *)(a2 + 2492) = 0;
  *(_OWORD *)(a2 + 2496) = *(_OWORD *)(a3 + 2496);
  *(_WORD *)(a2 + 2508) = 0;
  *(_OWORD *)(a2 + 2512) = *(_OWORD *)(a3 + 2512);
  *(_WORD *)(a2 + 2524) = 0;
  *(_OWORD *)(a2 + 2528) = *(_OWORD *)(a3 + 2528);
  *(_WORD *)(a2 + 2540) = 0;
  *(_OWORD *)(a2 + 2544) = *(_OWORD *)(a3 + 2544);
  *(_WORD *)(a2 + 2556) = 0;
  *(_OWORD *)(a2 + 2560) = *(_OWORD *)(a3 + 2560);
  *(_WORD *)(a2 + 2572) = 0;
  *(_OWORD *)(a2 + 2576) = *(_OWORD *)(a3 + 2576);
  *(_WORD *)(a2 + 2588) = 0;
  do
  {
    v30 = a2 + v3;
    *(_OWORD *)(v30 + 2592) = *(_OWORD *)(a3 + v3 + 2592);
    *(_WORD *)(v30 + 2600) = 0;
    *(_OWORD *)(v30 + 2608) = *(_OWORD *)(a3 + v3 + 2608);
    *(_WORD *)(v30 + 2616) = 0;
    *(_OWORD *)(v30 + 2624) = *(_OWORD *)(a3 + v3 + 2624);
    *(_WORD *)(v30 + 2632) = 0;
    *(_OWORD *)(v30 + 2640) = *(_OWORD *)(a3 + v3 + 2640);
    *(_WORD *)(v30 + 2648) = 0;
    *(_OWORD *)(v30 + 2656) = *(_OWORD *)(a3 + v3 + 2656);
    *(_WORD *)(v30 + 2664) = 0;
    *(_OWORD *)(v30 + 2672) = *(_OWORD *)(a3 + v3 + 2672);
    *(_WORD *)(v30 + 2680) = 0;
    *(_OWORD *)(v30 + 2688) = *(_OWORD *)(a3 + v3 + 2688);
    *(_WORD *)(v30 + 2696) = 0;
    *(_OWORD *)(v30 + 2704) = *(_OWORD *)(a3 + v3 + 2704);
    *(_WORD *)(v30 + 2712) = 0;
    *(_OWORD *)(v30 + 2720) = *(_OWORD *)(a3 + v3 + 2720);
    *(_WORD *)(v30 + 2728) = 0;
    *(_OWORD *)(v30 + 2736) = *(_OWORD *)(a3 + v3 + 2736);
    *(_WORD *)(v30 + 2744) = 0;
    *(_OWORD *)(v30 + 2752) = *(_OWORD *)(a3 + v3 + 2752);
    *(_WORD *)(v30 + 2760) = 0;
    *(_OWORD *)(v30 + 2768) = *(_OWORD *)(a3 + v3 + 2768);
    *(_WORD *)(v30 + 2776) = 0;
    *(_OWORD *)(v30 + 2784) = *(_OWORD *)(a3 + v3 + 2784);
    *(_WORD *)(v30 + 2792) = 0;
    v3 += 208;
  }
  while (v3 != 624);
  v31 = 0;
  *(_WORD *)(a2 + 6012) = *(_WORD *)(a3 + 6012);
  *(_WORD *)(a2 + 6014) = 0;
  *(_WORD *)(a2 + 6016) = *(_WORD *)(a3 + 6016);
  *(_WORD *)(a2 + 6018) = 0;
  *(_WORD *)(a2 + 6020) = *(_WORD *)(a3 + 6020);
  *(_WORD *)(a2 + 6022) = 0;
  v32 = *(_OWORD *)(a3 + 1264);
  *(_OWORD *)(a2 + 1248) = *(_OWORD *)(a3 + 1248);
  *(_OWORD *)(a2 + 1264) = v32;
  *(_WORD *)(a2 + 1262) = 0;
  v33 = *(_OWORD *)(a3 + 1296);
  *(_OWORD *)(a2 + 1280) = *(_OWORD *)(a3 + 1280);
  *(_OWORD *)(a2 + 1296) = v33;
  *(_WORD *)(a2 + 1294) = 0;
  v34 = *(_OWORD *)(a3 + 1328);
  *(_OWORD *)(a2 + 1312) = *(_OWORD *)(a3 + 1312);
  *(_OWORD *)(a2 + 1328) = v34;
  *(_WORD *)(a2 + 1326) = 0;
  v35 = *(_OWORD *)(a3 + 1360);
  *(_OWORD *)(a2 + 1344) = *(_OWORD *)(a3 + 1344);
  *(_OWORD *)(a2 + 1360) = v35;
  *(_WORD *)(a2 + 1358) = 0;
  v36 = *(_OWORD *)(a3 + 1376);
  *(_OWORD *)(a2 + 1392) = *(_OWORD *)(a3 + 1392);
  *(_OWORD *)(a2 + 1376) = v36;
  *(_WORD *)(a2 + 1394) = 0;
  v37 = *(_OWORD *)(a3 + 1408);
  *(_OWORD *)(a2 + 1424) = *(_OWORD *)(a3 + 1424);
  *(_OWORD *)(a2 + 1408) = v37;
  *(_WORD *)(a2 + 1426) = 0;
  v38 = *(_OWORD *)(a3 + 1440);
  *(_OWORD *)(a2 + 1456) = *(_OWORD *)(a3 + 1456);
  *(_OWORD *)(a2 + 1440) = v38;
  *(_WORD *)(a2 + 1458) = 0;
  v39 = *(_OWORD *)(a3 + 1472);
  *(_OWORD *)(a2 + 1488) = *(_OWORD *)(a3 + 1488);
  *(_OWORD *)(a2 + 1472) = v39;
  *(_WORD *)(a2 + 1490) = 0;
  v40 = *(_OWORD *)(a3 + 1504);
  *(_OWORD *)(a2 + 1520) = *(_OWORD *)(a3 + 1520);
  *(_OWORD *)(a2 + 1504) = v40;
  *(_WORD *)(a2 + 1522) = 0;
  v41 = *(_OWORD *)(a3 + 1536);
  *(_OWORD *)(a2 + 1552) = *(_OWORD *)(a3 + 1552);
  *(_OWORD *)(a2 + 1536) = v41;
  *(_WORD *)(a2 + 1554) = 0;
  v42 = *(_OWORD *)(a3 + 1568);
  *(_OWORD *)(a2 + 1584) = *(_OWORD *)(a3 + 1584);
  *(_OWORD *)(a2 + 1568) = v42;
  *(_WORD *)(a2 + 1586) = 0;
  v43 = *(_OWORD *)(a3 + 1600);
  *(_OWORD *)(a2 + 1616) = *(_OWORD *)(a3 + 1616);
  *(_OWORD *)(a2 + 1600) = v43;
  *(_WORD *)(a2 + 1618) = 0;
  v44 = *(_OWORD *)(a3 + 1632);
  *(_OWORD *)(a2 + 1648) = *(_OWORD *)(a3 + 1648);
  *(_OWORD *)(a2 + 1632) = v44;
  *(_WORD *)(a2 + 1650) = 0;
  v45 = *(_OWORD *)(a3 + 1664);
  *(_OWORD *)(a2 + 1680) = *(_OWORD *)(a3 + 1680);
  *(_OWORD *)(a2 + 1664) = v45;
  *(_WORD *)(a2 + 1682) = 0;
  v46 = *(_OWORD *)(a3 + 1696);
  *(_OWORD *)(a2 + 1712) = *(_OWORD *)(a3 + 1712);
  *(_OWORD *)(a2 + 1696) = v46;
  *(_WORD *)(a2 + 1714) = 0;
  v47 = *(_OWORD *)(a3 + 1728);
  *(_OWORD *)(a2 + 1744) = *(_OWORD *)(a3 + 1744);
  *(_OWORD *)(a2 + 1728) = v47;
  *(_WORD *)(a2 + 1746) = 0;
  v48 = *(_OWORD *)(a3 + 1776);
  *(_OWORD *)(a2 + 1760) = *(_OWORD *)(a3 + 1760);
  *(_OWORD *)(a2 + 1776) = v48;
  *(_WORD *)(a2 + 1766) = 0;
  v49 = *(_OWORD *)(a3 + 1808);
  *(_OWORD *)(a2 + 1792) = *(_OWORD *)(a3 + 1792);
  *(_OWORD *)(a2 + 1808) = v49;
  *(_WORD *)(a2 + 1798) = 0;
  v50 = *(_OWORD *)(a3 + 1840);
  *(_OWORD *)(a2 + 1824) = *(_OWORD *)(a3 + 1824);
  *(_OWORD *)(a2 + 1840) = v50;
  *(_WORD *)(a2 + 1830) = 0;
  v51 = *(_OWORD *)(a3 + 1872);
  *(_OWORD *)(a2 + 1856) = *(_OWORD *)(a3 + 1856);
  *(_OWORD *)(a2 + 1872) = v51;
  *(_WORD *)(a2 + 1862) = 0;
  v52 = a3 + 12962;
  v53 = a2 + 12962;
  do
  {
    v54 = v53 + v31;
    *(_WORD *)(v54 - 26) = *(_WORD *)(v52 + v31 - 26);
    *(_WORD *)(v54 - 24) = 0;
    *(_WORD *)(v54 - 22) = *(_WORD *)(v52 + v31 - 22);
    *(_WORD *)(v54 - 20) = 0;
    *(_WORD *)(v54 - 18) = *(_WORD *)(v52 + v31 - 18);
    *(_WORD *)(v54 - 16) = 0;
    *(_WORD *)(v54 - 14) = *(_WORD *)(v52 + v31 - 14);
    *(_WORD *)(v54 - 12) = 0;
    *(_WORD *)(v54 - 10) = *(_WORD *)(v52 + v31 - 10);
    *(_WORD *)(v54 - 8) = 0;
    *(_WORD *)(v54 - 6) = *(_WORD *)(v52 + v31 - 6);
    *(_WORD *)(v54 - 4) = 0;
    *(_WORD *)(v54 - 2) = *(_WORD *)(v52 + v31 - 2);
    *(_WORD *)(v53 + v31) = 0;
    *(_WORD *)(v54 + 2) = *(_WORD *)(v52 + v31 + 2);
    *(_WORD *)(v54 + 4) = 0;
    *(_WORD *)(v54 + 6) = *(_WORD *)(v52 + v31 + 6);
    *(_WORD *)(v54 + 8) = 0;
    *(_WORD *)(v54 + 10) = *(_WORD *)(v52 + v31 + 10);
    *(_WORD *)(v54 + 12) = 0;
    *(_WORD *)(v54 + 14) = *(_WORD *)(v52 + v31 + 14);
    *(_WORD *)(v54 + 16) = 0;
    *(_DWORD *)(v54 + 18) = *(unsigned __int16 *)(v52 + v31 + 18);
    *(_DWORD *)(v54 + 22) = *(unsigned __int16 *)(v52 + v31 + 22);
    v31 += 52;
  }
  while (v31 != 260);
  v55 = 0;
  *(_OWORD *)(a2 + 7040) = *(_OWORD *)(a3 + 7040);
  *(_WORD *)(a2 + 7048) = 0;
  *(_OWORD *)(a2 + 7056) = *(_OWORD *)(a3 + 7056);
  *(_WORD *)(a2 + 7064) = 0;
  *(_OWORD *)(a2 + 7072) = *(_OWORD *)(a3 + 7072);
  *(_WORD *)(a2 + 7080) = 0;
  *(_OWORD *)(a2 + 7088) = *(_OWORD *)(a3 + 7088);
  *(_WORD *)(a2 + 7096) = 0;
  *(_OWORD *)(a2 + 7104) = *(_OWORD *)(a3 + 7104);
  *(_WORD *)(a2 + 7114) = 0;
  *(_OWORD *)(a2 + 7120) = *(_OWORD *)(a3 + 7120);
  *(_WORD *)(a2 + 7130) = 0;
  *(_OWORD *)(a2 + 7136) = *(_OWORD *)(a3 + 7136);
  *(_WORD *)(a2 + 7146) = 0;
  *(_OWORD *)(a2 + 7152) = *(_OWORD *)(a3 + 7152);
  *(_WORD *)(a2 + 7162) = 0;
  *(_OWORD *)(a2 + 7168) = *(_OWORD *)(a3 + 7168);
  *(_WORD *)(a2 + 7180) = 0;
  *(_OWORD *)(a2 + 7184) = *(_OWORD *)(a3 + 7184);
  *(_WORD *)(a2 + 7196) = 0;
  *(_OWORD *)(a2 + 7200) = *(_OWORD *)(a3 + 7200);
  *(_WORD *)(a2 + 7212) = 0;
  *(_OWORD *)(a2 + 7216) = *(_OWORD *)(a3 + 7216);
  *(_WORD *)(a2 + 7228) = 0;
  *(_OWORD *)(a2 + 7232) = *(_OWORD *)(a3 + 7232);
  *(_WORD *)(a2 + 7246) = 0;
  *(_OWORD *)(a2 + 7248) = *(_OWORD *)(a3 + 7248);
  *(_WORD *)(a2 + 7262) = 0;
  *(_OWORD *)(a2 + 7264) = *(_OWORD *)(a3 + 7264);
  *(_WORD *)(a2 + 7278) = 0;
  *(_OWORD *)(a2 + 7280) = *(_OWORD *)(a3 + 7280);
  *(_WORD *)(a2 + 7294) = 0;
  v56 = *(_OWORD *)(a3 + 7296);
  *(_OWORD *)(a2 + 7312) = *(_OWORD *)(a3 + 7312);
  *(_OWORD *)(a2 + 7296) = v56;
  *(_WORD *)(a2 + 7312) = 0;
  v57 = *(_OWORD *)(a3 + 7328);
  *(_OWORD *)(a2 + 7344) = *(_OWORD *)(a3 + 7344);
  *(_OWORD *)(a2 + 7328) = v57;
  *(_WORD *)(a2 + 7344) = 0;
  v58 = *(_OWORD *)(a3 + 7360);
  *(_OWORD *)(a2 + 7376) = *(_OWORD *)(a3 + 7376);
  *(_OWORD *)(a2 + 7360) = v58;
  *(_WORD *)(a2 + 7376) = 0;
  v59 = *(_OWORD *)(a3 + 7392);
  *(_OWORD *)(a2 + 7408) = *(_OWORD *)(a3 + 7408);
  *(_OWORD *)(a2 + 7392) = v59;
  *(_WORD *)(a2 + 7408) = 0;
  v60 = *(_OWORD *)(a3 + 7424);
  *(_OWORD *)(a2 + 7440) = *(_OWORD *)(a3 + 7440);
  *(_OWORD *)(a2 + 7424) = v60;
  *(_WORD *)(a2 + 7442) = 0;
  v61 = *(_OWORD *)(a3 + 7456);
  *(_OWORD *)(a2 + 7472) = *(_OWORD *)(a3 + 7472);
  *(_OWORD *)(a2 + 7456) = v61;
  *(_WORD *)(a2 + 7474) = 0;
  v62 = *(_OWORD *)(a3 + 7488);
  *(_OWORD *)(a2 + 7504) = *(_OWORD *)(a3 + 7504);
  *(_OWORD *)(a2 + 7488) = v62;
  *(_WORD *)(a2 + 7508) = 0;
  v63 = *(_OWORD *)(a3 + 7520);
  *(_OWORD *)(a2 + 7536) = *(_OWORD *)(a3 + 7536);
  *(_OWORD *)(a2 + 7520) = v63;
  *(_WORD *)(a2 + 7540) = 0;
  v64 = a3 + 12540;
  v65 = a2 + 12540;
  do
  {
    v66 = v65 + v55;
    *(_WORD *)(v66 - 44) = *(_WORD *)(v64 + v55 - 44);
    *(_WORD *)(v66 - 42) = 0;
    *(_WORD *)(v66 - 40) = *(_WORD *)(v64 + v55 - 40);
    *(_WORD *)(v66 - 38) = 0;
    *(_WORD *)(v66 - 36) = *(_WORD *)(v64 + v55 - 36);
    *(_WORD *)(v66 - 34) = 0;
    *(_WORD *)(v66 - 32) = *(_WORD *)(v64 + v55 - 32);
    *(_WORD *)(v66 - 30) = 0;
    *(_WORD *)(v66 - 28) = *(_WORD *)(v64 + v55 - 28);
    *(_WORD *)(v66 - 26) = 0;
    *(_WORD *)(v66 - 24) = *(_WORD *)(v64 + v55 - 24);
    *(_WORD *)(v66 - 22) = 0;
    *(_WORD *)(v66 - 20) = *(_WORD *)(v64 + v55 - 20);
    *(_WORD *)(v66 - 18) = 0;
    *(_WORD *)(v66 - 16) = *(_WORD *)(v64 + v55 - 16);
    *(_WORD *)(v66 - 14) = 0;
    *(_WORD *)(v66 - 12) = *(_WORD *)(v64 + v55 - 12);
    *(_WORD *)(v66 - 10) = 0;
    *(_WORD *)(v66 - 8) = *(_WORD *)(v64 + v55 - 8);
    *(_WORD *)(v66 - 6) = 0;
    *(_WORD *)(v66 - 4) = *(_WORD *)(v64 + v55 - 4);
    *(_WORD *)(v66 - 2) = 0;
    *(_WORD *)(v65 + v55) = *(_WORD *)(v64 + v55);
    *(_WORD *)(v66 + 2) = 0;
    *(_WORD *)(v66 + 4) = *(_WORD *)(v64 + v55 + 4);
    *(_WORD *)(v66 + 6) = 0;
    *(_WORD *)(v66 + 8) = *(_WORD *)(v64 + v55 + 8);
    *(_WORD *)(v66 + 10) = 0;
    *(_WORD *)(v66 + 12) = *(_WORD *)(v64 + v55 + 12);
    *(_WORD *)(v66 + 14) = 0;
    *(_WORD *)(v66 + 16) = *(_WORD *)(v64 + v55 + 16);
    *(_WORD *)(v66 + 18) = 0;
    *(_WORD *)(v66 + 20) = *(_WORD *)(v64 + v55 + 20);
    *(_WORD *)(v66 + 22) = 0;
    *(_WORD *)(v66 + 24) = *(_WORD *)(v64 + v55 + 24);
    *(_WORD *)(v66 + 26) = 0;
    *(_WORD *)(v66 + 28) = *(_WORD *)(v64 + v55 + 28);
    *(_WORD *)(v66 + 30) = 0;
    *(_WORD *)(v66 + 32) = *(_WORD *)(v64 + v55 + 32);
    *(_WORD *)(v66 + 34) = 0;
    *(_DWORD *)(v66 + 36) = *(unsigned __int16 *)(v64 + v55 + 36);
    *(_DWORD *)(v66 + 40) = *(unsigned __int16 *)(v64 + v55 + 40);
    v55 += 88;
  }
  while (v55 != 440);
  *(_QWORD *)(a2 + 7552) = *(_QWORD *)(a3 + 7552);
  *(_WORD *)(a2 + 7556) = 0;
  *(_QWORD *)(a2 + 7560) = *(_QWORD *)(a3 + 7560);
  *(_WORD *)(a2 + 7564) = 0;
  *(_QWORD *)(a2 + 7568) = *(_QWORD *)(a3 + 7568);
  *(_WORD *)(a2 + 7572) = 0;
  *(_QWORD *)(a2 + 7576) = *(_QWORD *)(a3 + 7576);
  *(_WORD *)(a2 + 7580) = 0;
  *(_QWORD *)(a2 + 7584) = *(_QWORD *)(a3 + 7584);
  *(_WORD *)(a2 + 7588) = 0;
  *(_QWORD *)(a2 + 7592) = *(_QWORD *)(a3 + 7592);
  *(_WORD *)(a2 + 7596) = 0;
  *(_QWORD *)(a2 + 7600) = *(_QWORD *)(a3 + 7600);
  *(_WORD *)(a2 + 7604) = 0;
  *(_QWORD *)(a2 + 7608) = *(_QWORD *)(a3 + 7608);
  *(_WORD *)(a2 + 7612) = 0;
  *(_QWORD *)(a2 + 7616) = *(_QWORD *)(a3 + 7616);
  *(_WORD *)(a2 + 7620) = 0;
  *(_QWORD *)(a2 + 7624) = *(_QWORD *)(a3 + 7624);
  *(_WORD *)(a2 + 7628) = 0;
  *(_QWORD *)(a2 + 7632) = *(_QWORD *)(a3 + 7632);
  *(_WORD *)(a2 + 7636) = 0;
  *(_QWORD *)(a2 + 7640) = *(_QWORD *)(a3 + 7640);
  *(_WORD *)(a2 + 7644) = 0;
  *(_QWORD *)(a2 + 7648) = *(_QWORD *)(a3 + 7648);
  *(_WORD *)(a2 + 7652) = 0;
  *(_QWORD *)(a2 + 7656) = *(_QWORD *)(a3 + 7656);
  *(_WORD *)(a2 + 7660) = 0;
  *(_QWORD *)(a2 + 7664) = *(_QWORD *)(a3 + 7664);
  *(_WORD *)(a2 + 7668) = 0;
  *(_QWORD *)(a2 + 7672) = *(_QWORD *)(a3 + 7672);
  *(_WORD *)(a2 + 7676) = 0;
  *(_QWORD *)(a2 + 7680) = *(_QWORD *)(a3 + 7680);
  *(_WORD *)(a2 + 7684) = 0;
  *(_QWORD *)(a2 + 7688) = *(_QWORD *)(a3 + 7688);
  *(_WORD *)(a2 + 7692) = 0;
  *(_QWORD *)(a2 + 7696) = *(_QWORD *)(a3 + 7696);
  *(_WORD *)(a2 + 7700) = 0;
  *(_QWORD *)(a2 + 7704) = *(_QWORD *)(a3 + 7704);
  *(_WORD *)(a2 + 7708) = 0;
  *(_QWORD *)(a2 + 7712) = *(_QWORD *)(a3 + 7712);
  *(_WORD *)(a2 + 7716) = 0;
  *(_QWORD *)(a2 + 7720) = *(_QWORD *)(a3 + 7720);
  *(_WORD *)(a2 + 7724) = 0;
  *(_QWORD *)(a2 + 7728) = *(_QWORD *)(a3 + 7728);
  *(_WORD *)(a2 + 7732) = 0;
  *(_QWORD *)(a2 + 7736) = *(_QWORD *)(a3 + 7736);
  *(_WORD *)(a2 + 7740) = 0;
  *(_QWORD *)(a2 + 7744) = *(_QWORD *)(a3 + 7744);
  *(_WORD *)(a2 + 7748) = 0;
  *(_QWORD *)(a2 + 7752) = *(_QWORD *)(a3 + 7752);
  *(_WORD *)(a2 + 7756) = 0;
  *(_QWORD *)(a2 + 7760) = *(_QWORD *)(a3 + 7760);
  *(_WORD *)(a2 + 7764) = 0;
  *(_QWORD *)(a2 + 7768) = *(_QWORD *)(a3 + 7768);
  *(_WORD *)(a2 + 7772) = 0;
  *(_QWORD *)(a2 + 7776) = *(_QWORD *)(a3 + 7776);
  *(_WORD *)(a2 + 7780) = 0;
  *(_QWORD *)(a2 + 7784) = *(_QWORD *)(a3 + 7784);
  *(_WORD *)(a2 + 7788) = 0;
  *(_QWORD *)(a2 + 7792) = *(_QWORD *)(a3 + 7792);
  *(_WORD *)(a2 + 7796) = 0;
  *(_QWORD *)(a2 + 7800) = *(_QWORD *)(a3 + 7800);
  *(_WORD *)(a2 + 7804) = 0;
  *(_QWORD *)(a2 + 7808) = *(_QWORD *)(a3 + 7808);
  *(_WORD *)(a2 + 7812) = 0;
  *(_QWORD *)(a2 + 7816) = *(_QWORD *)(a3 + 7816);
  *(_WORD *)(a2 + 7820) = 0;
  *(_QWORD *)(a2 + 7824) = *(_QWORD *)(a3 + 7824);
  *(_WORD *)(a2 + 7828) = 0;
  *(_QWORD *)(a2 + 7832) = *(_QWORD *)(a3 + 7832);
  *(_WORD *)(a2 + 7836) = 0;
  *(_QWORD *)(a2 + 7840) = *(_QWORD *)(a3 + 7840);
  *(_WORD *)(a2 + 7844) = 0;
  *(_QWORD *)(a2 + 7848) = *(_QWORD *)(a3 + 7848);
  *(_WORD *)(a2 + 7852) = 0;
  *(_QWORD *)(a2 + 7856) = *(_QWORD *)(a3 + 7856);
  *(_WORD *)(a2 + 7860) = 0;
  *(_QWORD *)(a2 + 7864) = *(_QWORD *)(a3 + 7864);
  *(_WORD *)(a2 + 7868) = 0;
  *(_QWORD *)(a2 + 7872) = *(_QWORD *)(a3 + 7872);
  *(_WORD *)(a2 + 7878) = 0;
  *(_QWORD *)(a2 + 7880) = *(_QWORD *)(a3 + 7880);
  *(_WORD *)(a2 + 7886) = 0;
  *(_QWORD *)(a2 + 7888) = *(_QWORD *)(a3 + 7888);
  *(_WORD *)(a2 + 7894) = 0;
  *(_QWORD *)(a2 + 7896) = *(_QWORD *)(a3 + 7896);
  *(_WORD *)(a2 + 7902) = 0;
  *(_QWORD *)(a2 + 7904) = *(_QWORD *)(a3 + 7904);
  *(_WORD *)(a2 + 7910) = 0;
  *(_QWORD *)(a2 + 7912) = *(_QWORD *)(a3 + 7912);
  *(_WORD *)(a2 + 7918) = 0;
  *(_QWORD *)(a2 + 7920) = *(_QWORD *)(a3 + 7920);
  *(_WORD *)(a2 + 7926) = 0;
  *(_QWORD *)(a2 + 7928) = *(_QWORD *)(a3 + 7928);
  *(_WORD *)(a2 + 7934) = 0;
  *(_QWORD *)(a2 + 7936) = *(_QWORD *)(a3 + 7936);
  *(_WORD *)(a2 + 7942) = 0;
  *(_QWORD *)(a2 + 7944) = *(_QWORD *)(a3 + 7944);
  *(_WORD *)(a2 + 7950) = 0;
  *(_QWORD *)(a2 + 7952) = *(_QWORD *)(a3 + 7952);
  *(_WORD *)(a2 + 7958) = 0;
  *(_QWORD *)(a2 + 7960) = *(_QWORD *)(a3 + 7960);
  *(_WORD *)(a2 + 7966) = 0;
  *(_QWORD *)(a2 + 7968) = *(_QWORD *)(a3 + 7968);
  *(_WORD *)(a2 + 7974) = 0;
  *(_QWORD *)(a2 + 7976) = *(_QWORD *)(a3 + 7976);
  *(_WORD *)(a2 + 7982) = 0;
  *(_QWORD *)(a2 + 7984) = *(_QWORD *)(a3 + 7984);
  *(_WORD *)(a2 + 7990) = 0;
  *(_QWORD *)(a2 + 7992) = *(_QWORD *)(a3 + 7992);
  *(_WORD *)(a2 + 7998) = 0;
  *(_QWORD *)(a2 + 8000) = *(_QWORD *)(a3 + 8000);
  *(_WORD *)(a2 + 8006) = 0;
  *(_QWORD *)(a2 + 8008) = *(_QWORD *)(a3 + 8008);
  *(_WORD *)(a2 + 8014) = 0;
  *(_QWORD *)(a2 + 8016) = *(_QWORD *)(a3 + 8016);
  *(_WORD *)(a2 + 8022) = 0;
  *(_QWORD *)(a2 + 8024) = *(_QWORD *)(a3 + 8024);
  *(_WORD *)(a2 + 8030) = 0;
  *(_QWORD *)(a2 + 8032) = *(_QWORD *)(a3 + 8032);
  *(_WORD *)(a2 + 8038) = 0;
  *(_QWORD *)(a2 + 8040) = *(_QWORD *)(a3 + 8040);
  *(_WORD *)(a2 + 8046) = 0;
  *(_QWORD *)(a2 + 8048) = *(_QWORD *)(a3 + 8048);
  *(_WORD *)(a2 + 8054) = 0;
  *(_QWORD *)(a2 + 8056) = *(_QWORD *)(a3 + 8056);
  *(_WORD *)(a2 + 8062) = 0;
  *(_QWORD *)(a2 + 8064) = *(_QWORD *)(a3 + 8064);
  *(_WORD *)(a2 + 8070) = 0;
  *(_QWORD *)(a2 + 8072) = *(_QWORD *)(a3 + 8072);
  *(_WORD *)(a2 + 8078) = 0;
  *(_QWORD *)(a2 + 8080) = *(_QWORD *)(a3 + 8080);
  *(_WORD *)(a2 + 8086) = 0;
  *(_QWORD *)(a2 + 8088) = *(_QWORD *)(a3 + 8088);
  *(_WORD *)(a2 + 8094) = 0;
  *(_QWORD *)(a2 + 8096) = *(_QWORD *)(a3 + 8096);
  *(_WORD *)(a2 + 8102) = 0;
  *(_QWORD *)(a2 + 8104) = *(_QWORD *)(a3 + 8104);
  *(_WORD *)(a2 + 8110) = 0;
  *(_QWORD *)(a2 + 8112) = *(_QWORD *)(a3 + 8112);
  *(_WORD *)(a2 + 8118) = 0;
  *(_QWORD *)(a2 + 8120) = *(_QWORD *)(a3 + 8120);
  *(_WORD *)(a2 + 8126) = 0;
  *(_QWORD *)(a2 + 8128) = *(_QWORD *)(a3 + 8128);
  *(_WORD *)(a2 + 8134) = 0;
  *(_QWORD *)(a2 + 8136) = *(_QWORD *)(a3 + 8136);
  *(_WORD *)(a2 + 8142) = 0;
  *(_QWORD *)(a2 + 8144) = *(_QWORD *)(a3 + 8144);
  *(_WORD *)(a2 + 8150) = 0;
  *(_QWORD *)(a2 + 8152) = *(_QWORD *)(a3 + 8152);
  *(_WORD *)(a2 + 8158) = 0;
  *(_QWORD *)(a2 + 8160) = *(_QWORD *)(a3 + 8160);
  *(_WORD *)(a2 + 8166) = 0;
  *(_QWORD *)(a2 + 8168) = *(_QWORD *)(a3 + 8168);
  *(_WORD *)(a2 + 8174) = 0;
  *(_QWORD *)(a2 + 8176) = *(_QWORD *)(a3 + 8176);
  *(_WORD *)(a2 + 8182) = 0;
  *(_QWORD *)(a2 + 8184) = *(_QWORD *)(a3 + 8184);
  *(_WORD *)(a2 + 8190) = 0;
  *(_QWORD *)(a2 + 0x2000) = *(_QWORD *)(a3 + 0x2000);
  *(_WORD *)(a2 + 8198) = 0;
  *(_QWORD *)(a2 + 8200) = *(_QWORD *)(a3 + 8200);
  *(_WORD *)(a2 + 8206) = 0;
  *(_QWORD *)(a2 + 8208) = *(_QWORD *)(a3 + 8208);
  *(_WORD *)(a2 + 8214) = 0;
  *(_QWORD *)(a2 + 8216) = *(_QWORD *)(a3 + 8216);
  *(_WORD *)(a2 + 8222) = 0;
  *(_QWORD *)(a2 + 8224) = *(_QWORD *)(a3 + 8224);
  *(_WORD *)(a2 + 8230) = 0;
  *(_QWORD *)(a2 + 8232) = *(_QWORD *)(a3 + 8232);
  *(_WORD *)(a2 + 8238) = 0;
  *(_QWORD *)(a2 + 8240) = *(_QWORD *)(a3 + 8240);
  *(_WORD *)(a2 + 8246) = 0;
  *(_QWORD *)(a2 + 8248) = *(_QWORD *)(a3 + 8248);
  *(_WORD *)(a2 + 8254) = 0;
  *(_QWORD *)(a2 + 8256) = *(_QWORD *)(a3 + 8256);
  *(_WORD *)(a2 + 8262) = 0;
  *(_QWORD *)(a2 + 8264) = *(_QWORD *)(a3 + 8264);
  *(_WORD *)(a2 + 8270) = 0;
  *(_QWORD *)(a2 + 8272) = *(_QWORD *)(a3 + 8272);
  *(_WORD *)(a2 + 8278) = 0;
  *(_QWORD *)(a2 + 8280) = *(_QWORD *)(a3 + 8280);
  *(_WORD *)(a2 + 8286) = 0;
  *(_QWORD *)(a2 + 8288) = *(_QWORD *)(a3 + 8288);
  *(_WORD *)(a2 + 8294) = 0;
  *(_QWORD *)(a2 + 8296) = *(_QWORD *)(a3 + 8296);
  *(_WORD *)(a2 + 8302) = 0;
  *(_QWORD *)(a2 + 8304) = *(_QWORD *)(a3 + 8304);
  *(_WORD *)(a2 + 8310) = 0;
  *(_QWORD *)(a2 + 8312) = *(_QWORD *)(a3 + 8312);
  *(_WORD *)(a2 + 8318) = 0;
  *(_QWORD *)(a2 + 8320) = *(_QWORD *)(a3 + 8320);
  *(_WORD *)(a2 + 8326) = 0;
  *(_QWORD *)(a2 + 8328) = *(_QWORD *)(a3 + 8328);
  *(_WORD *)(a2 + 8334) = 0;
  *(_QWORD *)(a2 + 8336) = *(_QWORD *)(a3 + 8336);
  *(_WORD *)(a2 + 8342) = 0;
  *(_QWORD *)(a2 + 8344) = *(_QWORD *)(a3 + 8344);
  *(_WORD *)(a2 + 8350) = 0;
  *(_QWORD *)(a2 + 8352) = *(_QWORD *)(a3 + 8352);
  *(_WORD *)(a2 + 8358) = 0;
  *(_QWORD *)(a2 + 8360) = *(_QWORD *)(a3 + 8360);
  *(_WORD *)(a2 + 8366) = 0;
  *(_QWORD *)(a2 + 8368) = *(_QWORD *)(a3 + 8368);
  *(_WORD *)(a2 + 8374) = 0;
  *(_QWORD *)(a2 + 8376) = *(_QWORD *)(a3 + 8376);
  *(_WORD *)(a2 + 8382) = 0;
  *(_QWORD *)(a2 + 8384) = *(_QWORD *)(a3 + 8384);
  *(_WORD *)(a2 + 8390) = 0;
  *(_QWORD *)(a2 + 8392) = *(_QWORD *)(a3 + 8392);
  *(_WORD *)(a2 + 8398) = 0;
  *(_QWORD *)(a2 + 8400) = *(_QWORD *)(a3 + 8400);
  *(_WORD *)(a2 + 8406) = 0;
  *(_QWORD *)(a2 + 8408) = *(_QWORD *)(a3 + 8408);
  *(_WORD *)(a2 + 8414) = 0;
  *(_QWORD *)(a2 + 8416) = *(_QWORD *)(a3 + 8416);
  *(_WORD *)(a2 + 8422) = 0;
  *(_QWORD *)(a2 + 8424) = *(_QWORD *)(a3 + 8424);
  *(_WORD *)(a2 + 8430) = 0;
  *(_QWORD *)(a2 + 8432) = *(_QWORD *)(a3 + 8432);
  *(_WORD *)(a2 + 8438) = 0;
  *(_QWORD *)(a2 + 8440) = *(_QWORD *)(a3 + 8440);
  *(_WORD *)(a2 + 8446) = 0;
  *(_QWORD *)(a2 + 8448) = *(_QWORD *)(a3 + 8448);
  *(_WORD *)(a2 + 8454) = 0;
  *(_QWORD *)(a2 + 8456) = *(_QWORD *)(a3 + 8456);
  *(_WORD *)(a2 + 8462) = 0;
  *(_QWORD *)(a2 + 8464) = *(_QWORD *)(a3 + 8464);
  *(_WORD *)(a2 + 8470) = 0;
  *(_QWORD *)(a2 + 8472) = *(_QWORD *)(a3 + 8472);
  *(_WORD *)(a2 + 8478) = 0;
  *(_QWORD *)(a2 + 8480) = *(_QWORD *)(a3 + 8480);
  *(_WORD *)(a2 + 8486) = 0;
  *(_QWORD *)(a2 + 8488) = *(_QWORD *)(a3 + 8488);
  *(_WORD *)(a2 + 8494) = 0;
  *(_QWORD *)(a2 + 8496) = *(_QWORD *)(a3 + 8496);
  *(_WORD *)(a2 + 8502) = 0;
  *(_QWORD *)(a2 + 8504) = *(_QWORD *)(a3 + 8504);
  *(_WORD *)(a2 + 8510) = 0;
  *(_QWORD *)(a2 + 8512) = *(_QWORD *)(a3 + 8512);
  *(_WORD *)(a2 + 8518) = 0;
  *(_QWORD *)(a2 + 8520) = *(_QWORD *)(a3 + 8520);
  *(_WORD *)(a2 + 8526) = 0;
  *(_QWORD *)(a2 + 8528) = *(_QWORD *)(a3 + 8528);
  *(_WORD *)(a2 + 8534) = 0;
  *(_QWORD *)(a2 + 8536) = *(_QWORD *)(a3 + 8536);
  *(_WORD *)(a2 + 8542) = 0;
  *(_QWORD *)(a2 + 8544) = *(_QWORD *)(a3 + 8544);
  *(_WORD *)(a2 + 8550) = 0;
  *(_QWORD *)(a2 + 8552) = *(_QWORD *)(a3 + 8552);
  *(_WORD *)(a2 + 8558) = 0;
  *(_QWORD *)(a2 + 8560) = *(_QWORD *)(a3 + 8560);
  *(_WORD *)(a2 + 8566) = 0;
  *(_QWORD *)(a2 + 8568) = *(_QWORD *)(a3 + 8568);
  *(_WORD *)(a2 + 8574) = 0;
  *(_QWORD *)(a2 + 8576) = *(_QWORD *)(a3 + 8576);
  *(_WORD *)(a2 + 8582) = 0;
  *(_QWORD *)(a2 + 8584) = *(_QWORD *)(a3 + 8584);
  *(_WORD *)(a2 + 8590) = 0;
  *(_QWORD *)(a2 + 8592) = *(_QWORD *)(a3 + 8592);
  *(_WORD *)(a2 + 8598) = 0;
  *(_QWORD *)(a2 + 8600) = *(_QWORD *)(a3 + 8600);
  *(_WORD *)(a2 + 8606) = 0;
  *(_QWORD *)(a2 + 8608) = *(_QWORD *)(a3 + 8608);
  *(_WORD *)(a2 + 8614) = 0;
  *(_QWORD *)(a2 + 8616) = *(_QWORD *)(a3 + 8616);
  *(_WORD *)(a2 + 8622) = 0;
  *(_QWORD *)(a2 + 8624) = *(_QWORD *)(a3 + 8624);
  *(_WORD *)(a2 + 8630) = 0;
  *(_QWORD *)(a2 + 8632) = *(_QWORD *)(a3 + 8632);
  *(_WORD *)(a2 + 8638) = 0;
  *(_QWORD *)(a2 + 8640) = *(_QWORD *)(a3 + 8640);
  *(_WORD *)(a2 + 8646) = 0;
  *(_QWORD *)(a2 + 8648) = *(_QWORD *)(a3 + 8648);
  *(_WORD *)(a2 + 8654) = 0;
  *(_QWORD *)(a2 + 8656) = *(_QWORD *)(a3 + 8656);
  *(_WORD *)(a2 + 8662) = 0;
  *(_QWORD *)(a2 + 8664) = *(_QWORD *)(a3 + 8664);
  *(_WORD *)(a2 + 8670) = 0;
  *(_QWORD *)(a2 + 8672) = *(_QWORD *)(a3 + 8672);
  *(_WORD *)(a2 + 8678) = 0;
  *(_QWORD *)(a2 + 8680) = *(_QWORD *)(a3 + 8680);
  *(_WORD *)(a2 + 8686) = 0;
  *(_QWORD *)(a2 + 8688) = *(_QWORD *)(a3 + 8688);
  *(_WORD *)(a2 + 8694) = 0;
  *(_QWORD *)(a2 + 8696) = *(_QWORD *)(a3 + 8696);
  *(_WORD *)(a2 + 8702) = 0;
  *(_QWORD *)(a2 + 8704) = *(_QWORD *)(a3 + 8704);
  *(_WORD *)(a2 + 8710) = 0;
  *(_QWORD *)(a2 + 8712) = *(_QWORD *)(a3 + 8712);
  *(_WORD *)(a2 + 8718) = 0;
  *(_QWORD *)(a2 + 8720) = *(_QWORD *)(a3 + 8720);
  *(_WORD *)(a2 + 8726) = 0;
  *(_QWORD *)(a2 + 8728) = *(_QWORD *)(a3 + 8728);
  *(_WORD *)(a2 + 8734) = 0;
  *(_QWORD *)(a2 + 8736) = *(_QWORD *)(a3 + 8736);
  *(_WORD *)(a2 + 8742) = 0;
  *(_QWORD *)(a2 + 8744) = *(_QWORD *)(a3 + 8744);
  *(_WORD *)(a2 + 8750) = 0;
  *(_QWORD *)(a2 + 8752) = *(_QWORD *)(a3 + 8752);
  *(_WORD *)(a2 + 8758) = 0;
  *(_QWORD *)(a2 + 8760) = *(_QWORD *)(a3 + 8760);
  *(_WORD *)(a2 + 8766) = 0;
  *(_QWORD *)(a2 + 8768) = *(_QWORD *)(a3 + 8768);
  *(_WORD *)(a2 + 8774) = 0;
  *(_QWORD *)(a2 + 8776) = *(_QWORD *)(a3 + 8776);
  *(_WORD *)(a2 + 8782) = 0;
  *(_QWORD *)(a2 + 8784) = *(_QWORD *)(a3 + 8784);
  *(_WORD *)(a2 + 8790) = 0;
  *(_QWORD *)(a2 + 8792) = *(_QWORD *)(a3 + 8792);
  *(_WORD *)(a2 + 8798) = 0;
  *(_QWORD *)(a2 + 8800) = *(_QWORD *)(a3 + 8800);
  *(_WORD *)(a2 + 8806) = 0;
  *(_QWORD *)(a2 + 8808) = *(_QWORD *)(a3 + 8808);
  *(_WORD *)(a2 + 8814) = 0;
  *(_QWORD *)(a2 + 8816) = *(_QWORD *)(a3 + 8816);
  *(_WORD *)(a2 + 8822) = 0;
  *(_QWORD *)(a2 + 8824) = *(_QWORD *)(a3 + 8824);
  *(_WORD *)(a2 + 8830) = 0;
  *(_QWORD *)(a2 + 8832) = *(_QWORD *)(a3 + 8832);
  *(_WORD *)(a2 + 8838) = 0;
  *(_QWORD *)(a2 + 8840) = *(_QWORD *)(a3 + 8840);
  *(_WORD *)(a2 + 8846) = 0;
  *(_QWORD *)(a2 + 8848) = *(_QWORD *)(a3 + 8848);
  *(_WORD *)(a2 + 8854) = 0;
  *(_QWORD *)(a2 + 8856) = *(_QWORD *)(a3 + 8856);
  *(_WORD *)(a2 + 8862) = 0;
  *(_QWORD *)(a2 + 8864) = *(_QWORD *)(a3 + 8864);
  *(_WORD *)(a2 + 8870) = 0;
  *(_QWORD *)(a2 + 8872) = *(_QWORD *)(a3 + 8872);
  *(_WORD *)(a2 + 8878) = 0;
  *(_QWORD *)(a2 + 8880) = *(_QWORD *)(a3 + 8880);
  *(_WORD *)(a2 + 8886) = 0;
  *(_QWORD *)(a2 + 8888) = *(_QWORD *)(a3 + 8888);
  *(_WORD *)(a2 + 8894) = 0;
  *(_QWORD *)(a2 + 8896) = *(_QWORD *)(a3 + 8896);
  *(_WORD *)(a2 + 8902) = 0;
  *(_QWORD *)(a2 + 8904) = *(_QWORD *)(a3 + 8904);
  *(_WORD *)(a2 + 8910) = 0;
  *(_QWORD *)(a2 + 8912) = *(_QWORD *)(a3 + 8912);
  *(_WORD *)(a2 + 8918) = 0;
  *(_QWORD *)(a2 + 8920) = *(_QWORD *)(a3 + 8920);
  *(_WORD *)(a2 + 8926) = 0;
  *(_QWORD *)(a2 + 8928) = *(_QWORD *)(a3 + 8928);
  *(_WORD *)(a2 + 8934) = 0;
  *(_QWORD *)(a2 + 8936) = *(_QWORD *)(a3 + 8936);
  *(_WORD *)(a2 + 8942) = 0;
  *(_QWORD *)(a2 + 8944) = *(_QWORD *)(a3 + 8944);
  *(_WORD *)(a2 + 8950) = 0;
  *(_QWORD *)(a2 + 8952) = *(_QWORD *)(a3 + 8952);
  *(_WORD *)(a2 + 8958) = 0;
  *(_QWORD *)(a2 + 8960) = *(_QWORD *)(a3 + 8960);
  *(_WORD *)(a2 + 8966) = 0;
  *(_QWORD *)(a2 + 8968) = *(_QWORD *)(a3 + 8968);
  *(_WORD *)(a2 + 8974) = 0;
  *(_QWORD *)(a2 + 8976) = *(_QWORD *)(a3 + 8976);
  *(_WORD *)(a2 + 8982) = 0;
  *(_QWORD *)(a2 + 8984) = *(_QWORD *)(a3 + 8984);
  *(_WORD *)(a2 + 8990) = 0;
  *(_QWORD *)(a2 + 8992) = *(_QWORD *)(a3 + 8992);
  *(_WORD *)(a2 + 8998) = 0;
  *(_QWORD *)(a2 + 9000) = *(_QWORD *)(a3 + 9000);
  *(_WORD *)(a2 + 9006) = 0;
  *(_QWORD *)(a2 + 9008) = *(_QWORD *)(a3 + 9008);
  *(_WORD *)(a2 + 9014) = 0;
  *(_QWORD *)(a2 + 9016) = *(_QWORD *)(a3 + 9016);
  *(_WORD *)(a2 + 9022) = 0;
  *(_QWORD *)(a2 + 9024) = *(_QWORD *)(a3 + 9024);
  *(_WORD *)(a2 + 9030) = 0;
  *(_QWORD *)(a2 + 9032) = *(_QWORD *)(a3 + 9032);
  *(_WORD *)(a2 + 9038) = 0;
  *(_QWORD *)(a2 + 9040) = *(_QWORD *)(a3 + 9040);
  *(_WORD *)(a2 + 9046) = 0;
  *(_QWORD *)(a2 + 9048) = *(_QWORD *)(a3 + 9048);
  *(_WORD *)(a2 + 9054) = 0;
  *(_QWORD *)(a2 + 9056) = *(_QWORD *)(a3 + 9056);
  *(_WORD *)(a2 + 9062) = 0;
  *(_QWORD *)(a2 + 9064) = *(_QWORD *)(a3 + 9064);
  *(_WORD *)(a2 + 9070) = 0;
  *(_QWORD *)(a2 + 9072) = *(_QWORD *)(a3 + 9072);
  *(_WORD *)(a2 + 9078) = 0;
  *(_QWORD *)(a2 + 9080) = *(_QWORD *)(a3 + 9080);
  *(_WORD *)(a2 + 9086) = 0;
  *(_QWORD *)(a2 + 9088) = *(_QWORD *)(a3 + 9088);
  *(_WORD *)(a2 + 9094) = 0;
  *(_QWORD *)(a2 + 9096) = *(_QWORD *)(a3 + 9096);
  *(_WORD *)(a2 + 9102) = 0;
  *(_QWORD *)(a2 + 9104) = *(_QWORD *)(a3 + 9104);
  *(_WORD *)(a2 + 9110) = 0;
  *(_QWORD *)(a2 + 9112) = *(_QWORD *)(a3 + 9112);
  *(_WORD *)(a2 + 9118) = 0;
  *(_QWORD *)(a2 + 9120) = *(_QWORD *)(a3 + 9120);
  *(_WORD *)(a2 + 9126) = 0;
  *(_QWORD *)(a2 + 9128) = *(_QWORD *)(a3 + 9128);
  *(_WORD *)(a2 + 9134) = 0;
  *(_QWORD *)(a2 + 9136) = *(_QWORD *)(a3 + 9136);
  *(_WORD *)(a2 + 9142) = 0;
  *(_QWORD *)(a2 + 9144) = *(_QWORD *)(a3 + 9144);
  *(_WORD *)(a2 + 9150) = 0;
  *(_QWORD *)(a2 + 9152) = *(_QWORD *)(a3 + 9152);
  *(_WORD *)(a2 + 9158) = 0;
  *(_QWORD *)(a2 + 9160) = *(_QWORD *)(a3 + 9160);
  *(_WORD *)(a2 + 9166) = 0;
  *(_QWORD *)(a2 + 9168) = *(_QWORD *)(a3 + 9168);
  *(_WORD *)(a2 + 9174) = 0;
  *(_QWORD *)(a2 + 9176) = *(_QWORD *)(a3 + 9176);
  *(_WORD *)(a2 + 9182) = 0;
  *(_QWORD *)(a2 + 9184) = *(_QWORD *)(a3 + 9184);
  *(_WORD *)(a2 + 9190) = 0;
  *(_QWORD *)(a2 + 9192) = *(_QWORD *)(a3 + 9192);
  *(_WORD *)(a2 + 9198) = 0;
  *(_QWORD *)(a2 + 9200) = *(_QWORD *)(a3 + 9200);
  *(_WORD *)(a2 + 9206) = 0;
  *(_QWORD *)(a2 + 9208) = *(_QWORD *)(a3 + 9208);
  *(_WORD *)(a2 + 9214) = 0;
  *(_QWORD *)(a2 + 9216) = *(_QWORD *)(a3 + 9216);
  *(_WORD *)(a2 + 9222) = 0;
  *(_QWORD *)(a2 + 9224) = *(_QWORD *)(a3 + 9224);
  *(_WORD *)(a2 + 9230) = 0;
  *(_QWORD *)(a2 + 9232) = *(_QWORD *)(a3 + 9232);
  *(_WORD *)(a2 + 9238) = 0;
  *(_QWORD *)(a2 + 9240) = *(_QWORD *)(a3 + 9240);
  *(_WORD *)(a2 + 9246) = 0;
  *(_QWORD *)(a2 + 9248) = *(_QWORD *)(a3 + 9248);
  *(_WORD *)(a2 + 9254) = 0;
  *(_QWORD *)(a2 + 9256) = *(_QWORD *)(a3 + 9256);
  *(_WORD *)(a2 + 9262) = 0;
  *(_QWORD *)(a2 + 9264) = *(_QWORD *)(a3 + 9264);
  *(_WORD *)(a2 + 9270) = 0;
  *(_QWORD *)(a2 + 9272) = *(_QWORD *)(a3 + 9272);
  *(_WORD *)(a2 + 9278) = 0;
  *(_QWORD *)(a2 + 9280) = *(_QWORD *)(a3 + 9280);
  *(_WORD *)(a2 + 9286) = 0;
  *(_QWORD *)(a2 + 9288) = *(_QWORD *)(a3 + 9288);
  *(_WORD *)(a2 + 9294) = 0;
  *(_QWORD *)(a2 + 9296) = *(_QWORD *)(a3 + 9296);
  *(_WORD *)(a2 + 9302) = 0;
  *(_QWORD *)(a2 + 9304) = *(_QWORD *)(a3 + 9304);
  *(_WORD *)(a2 + 9310) = 0;
  *(_QWORD *)(a2 + 9312) = *(_QWORD *)(a3 + 9312);
  *(_WORD *)(a2 + 9318) = 0;
  *(_QWORD *)(a2 + 9320) = *(_QWORD *)(a3 + 9320);
  *(_WORD *)(a2 + 9326) = 0;
  *(_QWORD *)(a2 + 9328) = *(_QWORD *)(a3 + 9328);
  *(_WORD *)(a2 + 9334) = 0;
  *(_QWORD *)(a2 + 9336) = *(_QWORD *)(a3 + 9336);
  *(_WORD *)(a2 + 9342) = 0;
  *(_QWORD *)(a2 + 9344) = *(_QWORD *)(a3 + 9344);
  *(_WORD *)(a2 + 9350) = 0;
  *(_QWORD *)(a2 + 9352) = *(_QWORD *)(a3 + 9352);
  *(_WORD *)(a2 + 9358) = 0;
  *(_QWORD *)(a2 + 9360) = *(_QWORD *)(a3 + 9360);
  *(_WORD *)(a2 + 9366) = 0;
  *(_QWORD *)(a2 + 9368) = *(_QWORD *)(a3 + 9368);
  *(_WORD *)(a2 + 9374) = 0;
  *(_QWORD *)(a2 + 9376) = *(_QWORD *)(a3 + 9376);
  *(_WORD *)(a2 + 9382) = 0;
  *(_QWORD *)(a2 + 9384) = *(_QWORD *)(a3 + 9384);
  *(_WORD *)(a2 + 9390) = 0;
  *(_QWORD *)(a2 + 9392) = *(_QWORD *)(a3 + 9392);
  *(_WORD *)(a2 + 9398) = 0;
  *(_QWORD *)(a2 + 9400) = *(_QWORD *)(a3 + 9400);
  *(_WORD *)(a2 + 9406) = 0;
  *(_QWORD *)(a2 + 9408) = *(_QWORD *)(a3 + 9408);
  *(_WORD *)(a2 + 9414) = 0;
  *(_QWORD *)(a2 + 9416) = *(_QWORD *)(a3 + 9416);
  *(_WORD *)(a2 + 9422) = 0;
  *(_QWORD *)(a2 + 9424) = *(_QWORD *)(a3 + 9424);
  *(_WORD *)(a2 + 9430) = 0;
  *(_QWORD *)(a2 + 9432) = *(_QWORD *)(a3 + 9432);
  *(_WORD *)(a2 + 9438) = 0;
  *(_QWORD *)(a2 + 9440) = *(_QWORD *)(a3 + 9440);
  *(_WORD *)(a2 + 9446) = 0;
  *(_QWORD *)(a2 + 9448) = *(_QWORD *)(a3 + 9448);
  *(_WORD *)(a2 + 9454) = 0;
  *(_QWORD *)(a2 + 9456) = *(_QWORD *)(a3 + 9456);
  *(_WORD *)(a2 + 9462) = 0;
  *(_QWORD *)(a2 + 9464) = *(_QWORD *)(a3 + 9464);
  *(_WORD *)(a2 + 9470) = 0;
  *(_QWORD *)(a2 + 9472) = *(_QWORD *)(a3 + 9472);
  *(_WORD *)(a2 + 9478) = 0;
  *(_QWORD *)(a2 + 9480) = *(_QWORD *)(a3 + 9480);
  *(_WORD *)(a2 + 9486) = 0;
  *(_QWORD *)(a2 + 9488) = *(_QWORD *)(a3 + 9488);
  *(_WORD *)(a2 + 9494) = 0;
  *(_QWORD *)(a2 + 9496) = *(_QWORD *)(a3 + 9496);
  *(_WORD *)(a2 + 9502) = 0;
  *(_QWORD *)(a2 + 9504) = *(_QWORD *)(a3 + 9504);
  *(_WORD *)(a2 + 9510) = 0;
  *(_QWORD *)(a2 + 9512) = *(_QWORD *)(a3 + 9512);
  *(_WORD *)(a2 + 9518) = 0;
  *(_QWORD *)(a2 + 9520) = *(_QWORD *)(a3 + 9520);
  *(_WORD *)(a2 + 9526) = 0;
  *(_QWORD *)(a2 + 9528) = *(_QWORD *)(a3 + 9528);
  *(_WORD *)(a2 + 9534) = 0;
  *(_QWORD *)(a2 + 9536) = *(_QWORD *)(a3 + 9536);
  *(_WORD *)(a2 + 9542) = 0;
  *(_QWORD *)(a2 + 9544) = *(_QWORD *)(a3 + 9544);
  *(_WORD *)(a2 + 9550) = 0;
  *(_QWORD *)(a2 + 9552) = *(_QWORD *)(a3 + 9552);
  *(_WORD *)(a2 + 9558) = 0;
  *(_QWORD *)(a2 + 9560) = *(_QWORD *)(a3 + 9560);
  *(_WORD *)(a2 + 9566) = 0;
  *(_QWORD *)(a2 + 9568) = *(_QWORD *)(a3 + 9568);
  *(_WORD *)(a2 + 9574) = 0;
  *(_QWORD *)(a2 + 9576) = *(_QWORD *)(a3 + 9576);
  *(_WORD *)(a2 + 9582) = 0;
  *(_QWORD *)(a2 + 9584) = *(_QWORD *)(a3 + 9584);
  *(_WORD *)(a2 + 9590) = 0;
  *(_QWORD *)(a2 + 9592) = *(_QWORD *)(a3 + 9592);
  *(_WORD *)(a2 + 9598) = 0;
  *(_QWORD *)(a2 + 9600) = *(_QWORD *)(a3 + 9600);
  *(_WORD *)(a2 + 9606) = 0;
  *(_QWORD *)(a2 + 9608) = *(_QWORD *)(a3 + 9608);
  *(_WORD *)(a2 + 9614) = 0;
  *(_QWORD *)(a2 + 9616) = *(_QWORD *)(a3 + 9616);
  *(_WORD *)(a2 + 9622) = 0;
  *(_QWORD *)(a2 + 9624) = *(_QWORD *)(a3 + 9624);
  *(_WORD *)(a2 + 9630) = 0;
  *(_QWORD *)(a2 + 9632) = *(_QWORD *)(a3 + 9632);
  *(_WORD *)(a2 + 9638) = 0;
  *(_QWORD *)(a2 + 9640) = *(_QWORD *)(a3 + 9640);
  *(_WORD *)(a2 + 9646) = 0;
  *(_QWORD *)(a2 + 9648) = *(_QWORD *)(a3 + 9648);
  *(_WORD *)(a2 + 9654) = 0;
  *(_QWORD *)(a2 + 9656) = *(_QWORD *)(a3 + 9656);
  *(_WORD *)(a2 + 9662) = 0;
  *(_QWORD *)(a2 + 9664) = *(_QWORD *)(a3 + 9664);
  *(_WORD *)(a2 + 9670) = 0;
  *(_QWORD *)(a2 + 9672) = *(_QWORD *)(a3 + 9672);
  *(_WORD *)(a2 + 9678) = 0;
  *(_QWORD *)(a2 + 9680) = *(_QWORD *)(a3 + 9680);
  *(_WORD *)(a2 + 9686) = 0;
  *(_QWORD *)(a2 + 9688) = *(_QWORD *)(a3 + 9688);
  *(_WORD *)(a2 + 9694) = 0;
  *(_QWORD *)(a2 + 9696) = *(_QWORD *)(a3 + 9696);
  *(_WORD *)(a2 + 9702) = 0;
  *(_QWORD *)(a2 + 9704) = *(_QWORD *)(a3 + 9704);
  *(_WORD *)(a2 + 9710) = 0;
  *(_QWORD *)(a2 + 9712) = *(_QWORD *)(a3 + 9712);
  *(_WORD *)(a2 + 9718) = 0;
  *(_QWORD *)(a2 + 9720) = *(_QWORD *)(a3 + 9720);
  *(_WORD *)(a2 + 9726) = 0;
  *(_QWORD *)(a2 + 9728) = *(_QWORD *)(a3 + 9728);
  *(_WORD *)(a2 + 9734) = 0;
  *(_QWORD *)(a2 + 9736) = *(_QWORD *)(a3 + 9736);
  *(_WORD *)(a2 + 9742) = 0;
  *(_QWORD *)(a2 + 9744) = *(_QWORD *)(a3 + 9744);
  *(_WORD *)(a2 + 9750) = 0;
  *(_QWORD *)(a2 + 9752) = *(_QWORD *)(a3 + 9752);
  *(_WORD *)(a2 + 9758) = 0;
  *(_QWORD *)(a2 + 9760) = *(_QWORD *)(a3 + 9760);
  *(_WORD *)(a2 + 9766) = 0;
  *(_QWORD *)(a2 + 9768) = *(_QWORD *)(a3 + 9768);
  *(_WORD *)(a2 + 9774) = 0;
  *(_QWORD *)(a2 + 9776) = *(_QWORD *)(a3 + 9776);
  *(_WORD *)(a2 + 9782) = 0;
  *(_QWORD *)(a2 + 9784) = *(_QWORD *)(a3 + 9784);
  *(_WORD *)(a2 + 9790) = 0;
  *(_QWORD *)(a2 + 9792) = *(_QWORD *)(a3 + 9792);
  *(_WORD *)(a2 + 9798) = 0;
  *(_QWORD *)(a2 + 9800) = *(_QWORD *)(a3 + 9800);
  *(_WORD *)(a2 + 9806) = 0;
  *(_QWORD *)(a2 + 9808) = *(_QWORD *)(a3 + 9808);
  *(_WORD *)(a2 + 9814) = 0;
  *(_QWORD *)(a2 + 9816) = *(_QWORD *)(a3 + 9816);
  *(_WORD *)(a2 + 9822) = 0;
  *(_QWORD *)(a2 + 9824) = *(_QWORD *)(a3 + 9824);
  *(_WORD *)(a2 + 9830) = 0;
  *(_QWORD *)(a2 + 9832) = *(_QWORD *)(a3 + 9832);
  *(_WORD *)(a2 + 9838) = 0;
  *(_QWORD *)(a2 + 9840) = *(_QWORD *)(a3 + 9840);
  *(_WORD *)(a2 + 9846) = 0;
  *(_QWORD *)(a2 + 9848) = *(_QWORD *)(a3 + 9848);
  *(_WORD *)(a2 + 9854) = 0;
  *(_QWORD *)(a2 + 9856) = *(_QWORD *)(a3 + 9856);
  *(_WORD *)(a2 + 9862) = 0;
  *(_QWORD *)(a2 + 9864) = *(_QWORD *)(a3 + 9864);
  *(_WORD *)(a2 + 9870) = 0;
  *(_QWORD *)(a2 + 9872) = *(_QWORD *)(a3 + 9872);
  *(_WORD *)(a2 + 9878) = 0;
  *(_QWORD *)(a2 + 9880) = *(_QWORD *)(a3 + 9880);
  *(_WORD *)(a2 + 9886) = 0;
  *(_QWORD *)(a2 + 9888) = *(_QWORD *)(a3 + 9888);
  *(_WORD *)(a2 + 9894) = 0;
  *(_QWORD *)(a2 + 9896) = *(_QWORD *)(a3 + 9896);
  *(_WORD *)(a2 + 9902) = 0;
  *(_QWORD *)(a2 + 9904) = *(_QWORD *)(a3 + 9904);
  *(_WORD *)(a2 + 9910) = 0;
  *(_QWORD *)(a2 + 9912) = *(_QWORD *)(a3 + 9912);
  *(_WORD *)(a2 + 9918) = 0;
  *(_QWORD *)(a2 + 9920) = *(_QWORD *)(a3 + 9920);
  *(_WORD *)(a2 + 9926) = 0;
  *(_QWORD *)(a2 + 9928) = *(_QWORD *)(a3 + 9928);
  *(_WORD *)(a2 + 9934) = 0;
  *(_QWORD *)(a2 + 9936) = *(_QWORD *)(a3 + 9936);
  *(_WORD *)(a2 + 9942) = 0;
  *(_QWORD *)(a2 + 9944) = *(_QWORD *)(a3 + 9944);
  *(_WORD *)(a2 + 9950) = 0;
  *(_QWORD *)(a2 + 9952) = *(_QWORD *)(a3 + 9952);
  *(_WORD *)(a2 + 9958) = 0;
  *(_QWORD *)(a2 + 9960) = *(_QWORD *)(a3 + 9960);
  *(_WORD *)(a2 + 9966) = 0;
  *(_QWORD *)(a2 + 9968) = *(_QWORD *)(a3 + 9968);
  *(_WORD *)(a2 + 9974) = 0;
  *(_QWORD *)(a2 + 9976) = *(_QWORD *)(a3 + 9976);
  *(_WORD *)(a2 + 9982) = 0;
  *(_QWORD *)(a2 + 9984) = *(_QWORD *)(a3 + 9984);
  *(_WORD *)(a2 + 9990) = 0;
  *(_QWORD *)(a2 + 9992) = *(_QWORD *)(a3 + 9992);
  *(_WORD *)(a2 + 9998) = 0;
  *(_QWORD *)(a2 + 10000) = *(_QWORD *)(a3 + 10000);
  *(_WORD *)(a2 + 10006) = 0;
  *(_QWORD *)(a2 + 10008) = *(_QWORD *)(a3 + 10008);
  *(_WORD *)(a2 + 10014) = 0;
  *(_QWORD *)(a2 + 10016) = *(_QWORD *)(a3 + 10016);
  *(_WORD *)(a2 + 10022) = 0;
  *(_QWORD *)(a2 + 10024) = *(_QWORD *)(a3 + 10024);
  *(_WORD *)(a2 + 10030) = 0;
  *(_QWORD *)(a2 + 10032) = *(_QWORD *)(a3 + 10032);
  *(_WORD *)(a2 + 10038) = 0;
  *(_QWORD *)(a2 + 10040) = *(_QWORD *)(a3 + 10040);
  *(_WORD *)(a2 + 10046) = 0;
  *(_QWORD *)(a2 + 10048) = *(_QWORD *)(a3 + 10048);
  *(_WORD *)(a2 + 10054) = 0;
  *(_QWORD *)(a2 + 10056) = *(_QWORD *)(a3 + 10056);
  *(_WORD *)(a2 + 10062) = 0;
  *(_QWORD *)(a2 + 10064) = *(_QWORD *)(a3 + 10064);
  *(_WORD *)(a2 + 10070) = 0;
  *(_QWORD *)(a2 + 10072) = *(_QWORD *)(a3 + 10072);
  *(_WORD *)(a2 + 10078) = 0;
  *(_QWORD *)(a2 + 10080) = *(_QWORD *)(a3 + 10080);
  *(_WORD *)(a2 + 10086) = 0;
  *(_QWORD *)(a2 + 10088) = *(_QWORD *)(a3 + 10088);
  *(_WORD *)(a2 + 10094) = 0;
  *(_QWORD *)(a2 + 10096) = *(_QWORD *)(a3 + 10096);
  *(_WORD *)(a2 + 10102) = 0;
  *(_QWORD *)(a2 + 10104) = *(_QWORD *)(a3 + 10104);
  *(_WORD *)(a2 + 10110) = 0;
  *(_QWORD *)(a2 + 10112) = *(_QWORD *)(a3 + 10112);
  *(_WORD *)(a2 + 10118) = 0;
  *(_QWORD *)(a2 + 10120) = *(_QWORD *)(a3 + 10120);
  *(_WORD *)(a2 + 10126) = 0;
  *(_QWORD *)(a2 + 10128) = *(_QWORD *)(a3 + 10128);
  *(_WORD *)(a2 + 10134) = 0;
  *(_QWORD *)(a2 + 10136) = *(_QWORD *)(a3 + 10136);
  *(_WORD *)(a2 + 10142) = 0;
  *(_QWORD *)(a2 + 10144) = *(_QWORD *)(a3 + 10144);
  *(_WORD *)(a2 + 10150) = 0;
  *(_QWORD *)(a2 + 10152) = *(_QWORD *)(a3 + 10152);
  *(_WORD *)(a2 + 10158) = 0;
  *(_QWORD *)(a2 + 10160) = *(_QWORD *)(a3 + 10160);
  *(_WORD *)(a2 + 10166) = 0;
  *(_QWORD *)(a2 + 10168) = *(_QWORD *)(a3 + 10168);
  *(_WORD *)(a2 + 10174) = 0;
  *(_QWORD *)(a2 + 10176) = *(_QWORD *)(a3 + 10176);
  *(_WORD *)(a2 + 10182) = 0;
  *(_QWORD *)(a2 + 10184) = *(_QWORD *)(a3 + 10184);
  *(_WORD *)(a2 + 10190) = 0;
  *(_QWORD *)(a2 + 10192) = *(_QWORD *)(a3 + 10192);
  *(_WORD *)(a2 + 10198) = 0;
  *(_QWORD *)(a2 + 10200) = *(_QWORD *)(a3 + 10200);
  *(_WORD *)(a2 + 10206) = 0;
  *(_QWORD *)(a2 + 10208) = *(_QWORD *)(a3 + 10208);
  *(_WORD *)(a2 + 10214) = 0;
  *(_QWORD *)(a2 + 10216) = *(_QWORD *)(a3 + 10216);
  *(_WORD *)(a2 + 10222) = 0;
  *(_QWORD *)(a2 + 10224) = *(_QWORD *)(a3 + 10224);
  *(_WORD *)(a2 + 10230) = 0;
  *(_QWORD *)(a2 + 10232) = *(_QWORD *)(a3 + 10232);
  *(_WORD *)(a2 + 10238) = 0;
  *(_QWORD *)(a2 + 10240) = *(_QWORD *)(a3 + 10240);
  *(_WORD *)(a2 + 10246) = 0;
  *(_QWORD *)(a2 + 10248) = *(_QWORD *)(a3 + 10248);
  *(_WORD *)(a2 + 10254) = 0;
  *(_QWORD *)(a2 + 10256) = *(_QWORD *)(a3 + 10256);
  *(_WORD *)(a2 + 10262) = 0;
  *(_QWORD *)(a2 + 10264) = *(_QWORD *)(a3 + 10264);
  *(_WORD *)(a2 + 10270) = 0;
  *(_QWORD *)(a2 + 10272) = *(_QWORD *)(a3 + 10272);
  *(_WORD *)(a2 + 10278) = 0;
  *(_QWORD *)(a2 + 10280) = *(_QWORD *)(a3 + 10280);
  *(_WORD *)(a2 + 10286) = 0;
  *(_QWORD *)(a2 + 10288) = *(_QWORD *)(a3 + 10288);
  *(_WORD *)(a2 + 10294) = 0;
  *(_QWORD *)(a2 + 10296) = *(_QWORD *)(a3 + 10296);
  *(_WORD *)(a2 + 10302) = 0;
  *(_QWORD *)(a2 + 10304) = *(_QWORD *)(a3 + 10304);
  *(_WORD *)(a2 + 10310) = 0;
  *(_QWORD *)(a2 + 10312) = *(_QWORD *)(a3 + 10312);
  *(_WORD *)(a2 + 10318) = 0;
  *(_QWORD *)(a2 + 10320) = *(_QWORD *)(a3 + 10320);
  *(_WORD *)(a2 + 10326) = 0;
  *(_QWORD *)(a2 + 10328) = *(_QWORD *)(a3 + 10328);
  *(_WORD *)(a2 + 10334) = 0;
  *(_QWORD *)(a2 + 10336) = *(_QWORD *)(a3 + 10336);
  *(_WORD *)(a2 + 10342) = 0;
  *(_QWORD *)(a2 + 10344) = *(_QWORD *)(a3 + 10344);
  *(_WORD *)(a2 + 10350) = 0;
  *(_QWORD *)(a2 + 10352) = *(_QWORD *)(a3 + 10352);
  *(_WORD *)(a2 + 10358) = 0;
  *(_QWORD *)(a2 + 10360) = *(_QWORD *)(a3 + 10360);
  *(_WORD *)(a2 + 10366) = 0;
  *(_QWORD *)(a2 + 10368) = *(_QWORD *)(a3 + 10368);
  *(_WORD *)(a2 + 10374) = 0;
  *(_QWORD *)(a2 + 10376) = *(_QWORD *)(a3 + 10376);
  *(_WORD *)(a2 + 10382) = 0;
  *(_QWORD *)(a2 + 10384) = *(_QWORD *)(a3 + 10384);
  *(_WORD *)(a2 + 10390) = 0;
  *(_QWORD *)(a2 + 10392) = *(_QWORD *)(a3 + 10392);
  *(_WORD *)(a2 + 10398) = 0;
  *(_QWORD *)(a2 + 10400) = *(_QWORD *)(a3 + 10400);
  *(_WORD *)(a2 + 10406) = 0;
  *(_QWORD *)(a2 + 10408) = *(_QWORD *)(a3 + 10408);
  *(_WORD *)(a2 + 10414) = 0;
  *(_QWORD *)(a2 + 10416) = *(_QWORD *)(a3 + 10416);
  *(_WORD *)(a2 + 10422) = 0;
  *(_QWORD *)(a2 + 10424) = *(_QWORD *)(a3 + 10424);
  *(_WORD *)(a2 + 10430) = 0;
  *(_QWORD *)(a2 + 10432) = *(_QWORD *)(a3 + 10432);
  *(_WORD *)(a2 + 10438) = 0;
  *(_QWORD *)(a2 + 10440) = *(_QWORD *)(a3 + 10440);
  *(_WORD *)(a2 + 10446) = 0;
  *(_QWORD *)(a2 + 10448) = *(_QWORD *)(a3 + 10448);
  *(_WORD *)(a2 + 10454) = 0;
  *(_QWORD *)(a2 + 10456) = *(_QWORD *)(a3 + 10456);
  *(_WORD *)(a2 + 10462) = 0;
  *(_QWORD *)(a2 + 10464) = *(_QWORD *)(a3 + 10464);
  *(_WORD *)(a2 + 10470) = 0;
  *(_QWORD *)(a2 + 10472) = *(_QWORD *)(a3 + 10472);
  *(_WORD *)(a2 + 10478) = 0;
  *(_QWORD *)(a2 + 10480) = *(_QWORD *)(a3 + 10480);
  *(_WORD *)(a2 + 10486) = 0;
  *(_QWORD *)(a2 + 10488) = *(_QWORD *)(a3 + 10488);
  *(_WORD *)(a2 + 10494) = 0;
  *(_QWORD *)(a2 + 10496) = *(_QWORD *)(a3 + 10496);
  *(_WORD *)(a2 + 10502) = 0;
  *(_QWORD *)(a2 + 10504) = *(_QWORD *)(a3 + 10504);
  *(_WORD *)(a2 + 10510) = 0;
  *(_QWORD *)(a2 + 10512) = *(_QWORD *)(a3 + 10512);
  *(_WORD *)(a2 + 10518) = 0;
  *(_QWORD *)(a2 + 10520) = *(_QWORD *)(a3 + 10520);
  *(_WORD *)(a2 + 10526) = 0;
  *(_QWORD *)(a2 + 10528) = *(_QWORD *)(a3 + 10528);
  *(_WORD *)(a2 + 10534) = 0;
  *(_QWORD *)(a2 + 10536) = *(_QWORD *)(a3 + 10536);
  *(_WORD *)(a2 + 10542) = 0;
  *(_QWORD *)(a2 + 10544) = *(_QWORD *)(a3 + 10544);
  *(_WORD *)(a2 + 10550) = 0;
  *(_QWORD *)(a2 + 10552) = *(_QWORD *)(a3 + 10552);
  *(_WORD *)(a2 + 10558) = 0;
  *(_QWORD *)(a2 + 10560) = *(_QWORD *)(a3 + 10560);
  *(_WORD *)(a2 + 10566) = 0;
  *(_QWORD *)(a2 + 10568) = *(_QWORD *)(a3 + 10568);
  *(_WORD *)(a2 + 10574) = 0;
  *(_QWORD *)(a2 + 10576) = *(_QWORD *)(a3 + 10576);
  *(_WORD *)(a2 + 10582) = 0;
  *(_QWORD *)(a2 + 10584) = *(_QWORD *)(a3 + 10584);
  *(_WORD *)(a2 + 10590) = 0;
  *(_QWORD *)(a2 + 10592) = *(_QWORD *)(a3 + 10592);
  *(_WORD *)(a2 + 10598) = 0;
  *(_QWORD *)(a2 + 10600) = *(_QWORD *)(a3 + 10600);
  *(_WORD *)(a2 + 10606) = 0;
  *(_QWORD *)(a2 + 10608) = *(_QWORD *)(a3 + 10608);
  *(_WORD *)(a2 + 10614) = 0;
  *(_QWORD *)(a2 + 10616) = *(_QWORD *)(a3 + 10616);
  *(_WORD *)(a2 + 10622) = 0;
  *(_QWORD *)(a2 + 10624) = *(_QWORD *)(a3 + 10624);
  *(_WORD *)(a2 + 10630) = 0;
  *(_QWORD *)(a2 + 10632) = *(_QWORD *)(a3 + 10632);
  *(_WORD *)(a2 + 10638) = 0;
  *(_QWORD *)(a2 + 10640) = *(_QWORD *)(a3 + 10640);
  *(_WORD *)(a2 + 10646) = 0;
  *(_QWORD *)(a2 + 10648) = *(_QWORD *)(a3 + 10648);
  *(_WORD *)(a2 + 10654) = 0;
  *(_QWORD *)(a2 + 10656) = *(_QWORD *)(a3 + 10656);
  *(_WORD *)(a2 + 10662) = 0;
  *(_QWORD *)(a2 + 10664) = *(_QWORD *)(a3 + 10664);
  *(_WORD *)(a2 + 10670) = 0;
  *(_QWORD *)(a2 + 10672) = *(_QWORD *)(a3 + 10672);
  *(_WORD *)(a2 + 10678) = 0;
  *(_QWORD *)(a2 + 10680) = *(_QWORD *)(a3 + 10680);
  *(_WORD *)(a2 + 10686) = 0;
  *(_QWORD *)(a2 + 10688) = *(_QWORD *)(a3 + 10688);
  *(_WORD *)(a2 + 10694) = 0;
  *(_QWORD *)(a2 + 10696) = *(_QWORD *)(a3 + 10696);
  *(_WORD *)(a2 + 10702) = 0;
  *(_QWORD *)(a2 + 10704) = *(_QWORD *)(a3 + 10704);
  *(_WORD *)(a2 + 10710) = 0;
  *(_QWORD *)(a2 + 10712) = *(_QWORD *)(a3 + 10712);
  *(_WORD *)(a2 + 10718) = 0;
  *(_QWORD *)(a2 + 10720) = *(_QWORD *)(a3 + 10720);
  *(_WORD *)(a2 + 10726) = 0;
  *(_QWORD *)(a2 + 10728) = *(_QWORD *)(a3 + 10728);
  *(_WORD *)(a2 + 10734) = 0;
  *(_QWORD *)(a2 + 10736) = *(_QWORD *)(a3 + 10736);
  *(_WORD *)(a2 + 10742) = 0;
  *(_QWORD *)(a2 + 10744) = *(_QWORD *)(a3 + 10744);
  *(_WORD *)(a2 + 10750) = 0;
  *(_QWORD *)(a2 + 10752) = *(_QWORD *)(a3 + 10752);
  *(_WORD *)(a2 + 10758) = 0;
  *(_QWORD *)(a2 + 10760) = *(_QWORD *)(a3 + 10760);
  *(_WORD *)(a2 + 10766) = 0;
  *(_QWORD *)(a2 + 10768) = *(_QWORD *)(a3 + 10768);
  *(_WORD *)(a2 + 10774) = 0;
  *(_QWORD *)(a2 + 10776) = *(_QWORD *)(a3 + 10776);
  *(_WORD *)(a2 + 10782) = 0;
  *(_QWORD *)(a2 + 10784) = *(_QWORD *)(a3 + 10784);
  *(_WORD *)(a2 + 10790) = 0;
  *(_QWORD *)(a2 + 10792) = *(_QWORD *)(a3 + 10792);
  *(_WORD *)(a2 + 10798) = 0;
  *(_QWORD *)(a2 + 10800) = *(_QWORD *)(a3 + 10800);
  *(_WORD *)(a2 + 10806) = 0;
  *(_QWORD *)(a2 + 10808) = *(_QWORD *)(a3 + 10808);
  *(_WORD *)(a2 + 10814) = 0;
  *(_QWORD *)(a2 + 10816) = *(_QWORD *)(a3 + 10816);
  *(_WORD *)(a2 + 10822) = 0;
  *(_QWORD *)(a2 + 10824) = *(_QWORD *)(a3 + 10824);
  *(_WORD *)(a2 + 10830) = 0;
  *(_QWORD *)(a2 + 10832) = *(_QWORD *)(a3 + 10832);
  *(_WORD *)(a2 + 10838) = 0;
  *(_QWORD *)(a2 + 10840) = *(_QWORD *)(a3 + 10840);
  *(_WORD *)(a2 + 10846) = 0;
  *(_QWORD *)(a2 + 10848) = *(_QWORD *)(a3 + 10848);
  *(_WORD *)(a2 + 10854) = 0;
  *(_QWORD *)(a2 + 10856) = *(_QWORD *)(a3 + 10856);
  *(_WORD *)(a2 + 10862) = 0;
  *(_QWORD *)(a2 + 10864) = *(_QWORD *)(a3 + 10864);
  *(_WORD *)(a2 + 10870) = 0;
  *(_QWORD *)(a2 + 10872) = *(_QWORD *)(a3 + 10872);
  *(_WORD *)(a2 + 10878) = 0;
  *(_QWORD *)(a2 + 10880) = *(_QWORD *)(a3 + 10880);
  *(_WORD *)(a2 + 10886) = 0;
  *(_QWORD *)(a2 + 10888) = *(_QWORD *)(a3 + 10888);
  *(_WORD *)(a2 + 10894) = 0;
  *(_QWORD *)(a2 + 10896) = *(_QWORD *)(a3 + 10896);
  *(_WORD *)(a2 + 10902) = 0;
  *(_QWORD *)(a2 + 10904) = *(_QWORD *)(a3 + 10904);
  *(_WORD *)(a2 + 10910) = 0;
  *(_QWORD *)(a2 + 10912) = *(_QWORD *)(a3 + 10912);
  *(_WORD *)(a2 + 10918) = 0;
  *(_QWORD *)(a2 + 10920) = *(_QWORD *)(a3 + 10920);
  *(_WORD *)(a2 + 10926) = 0;
  *(_QWORD *)(a2 + 10928) = *(_QWORD *)(a3 + 10928);
  *(_WORD *)(a2 + 10934) = 0;
  *(_QWORD *)(a2 + 10936) = *(_QWORD *)(a3 + 10936);
  *(_WORD *)(a2 + 10942) = 0;
  *(_QWORD *)(a2 + 10944) = *(_QWORD *)(a3 + 10944);
  *(_WORD *)(a2 + 10950) = 0;
  *(_QWORD *)(a2 + 10952) = *(_QWORD *)(a3 + 10952);
  *(_WORD *)(a2 + 10958) = 0;
  *(_QWORD *)(a2 + 10960) = *(_QWORD *)(a3 + 10960);
  *(_WORD *)(a2 + 10966) = 0;
  *(_QWORD *)(a2 + 10968) = *(_QWORD *)(a3 + 10968);
  *(_WORD *)(a2 + 10974) = 0;
  *(_QWORD *)(a2 + 10976) = *(_QWORD *)(a3 + 10976);
  *(_WORD *)(a2 + 10982) = 0;
  *(_QWORD *)(a2 + 10984) = *(_QWORD *)(a3 + 10984);
  *(_WORD *)(a2 + 10990) = 0;
  *(_QWORD *)(a2 + 10992) = *(_QWORD *)(a3 + 10992);
  *(_WORD *)(a2 + 10998) = 0;
  *(_QWORD *)(a2 + 11000) = *(_QWORD *)(a3 + 11000);
  *(_WORD *)(a2 + 11006) = 0;
  *(_QWORD *)(a2 + 11008) = *(_QWORD *)(a3 + 11008);
  *(_WORD *)(a2 + 11014) = 0;
  *(_QWORD *)(a2 + 11016) = *(_QWORD *)(a3 + 11016);
  *(_WORD *)(a2 + 11022) = 0;
  *(_QWORD *)(a2 + 11024) = *(_QWORD *)(a3 + 11024);
  *(_WORD *)(a2 + 11030) = 0;
  *(_QWORD *)(a2 + 11032) = *(_QWORD *)(a3 + 11032);
  *(_WORD *)(a2 + 11038) = 0;
  *(_QWORD *)(a2 + 11040) = *(_QWORD *)(a3 + 11040);
  *(_WORD *)(a2 + 11046) = 0;
  *(_QWORD *)(a2 + 11048) = *(_QWORD *)(a3 + 11048);
  *(_WORD *)(a2 + 11054) = 0;
  *(_QWORD *)(a2 + 11056) = *(_QWORD *)(a3 + 11056);
  *(_WORD *)(a2 + 11062) = 0;
  *(_QWORD *)(a2 + 11064) = *(_QWORD *)(a3 + 11064);
  *(_WORD *)(a2 + 11070) = 0;
  *(_QWORD *)(a2 + 11072) = *(_QWORD *)(a3 + 11072);
  *(_WORD *)(a2 + 11078) = 0;
  *(_QWORD *)(a2 + 11080) = *(_QWORD *)(a3 + 11080);
  *(_WORD *)(a2 + 11086) = 0;
  *(_QWORD *)(a2 + 11088) = *(_QWORD *)(a3 + 11088);
  *(_WORD *)(a2 + 11094) = 0;
  *(_QWORD *)(a2 + 11096) = *(_QWORD *)(a3 + 11096);
  *(_WORD *)(a2 + 11102) = 0;
  *(_QWORD *)(a2 + 11104) = *(_QWORD *)(a3 + 11104);
  *(_WORD *)(a2 + 11110) = 0;
  *(_QWORD *)(a2 + 11112) = *(_QWORD *)(a3 + 11112);
  *(_WORD *)(a2 + 11118) = 0;
  *(_QWORD *)(a2 + 11120) = *(_QWORD *)(a3 + 11120);
  *(_WORD *)(a2 + 11126) = 0;
  *(_QWORD *)(a2 + 11128) = *(_QWORD *)(a3 + 11128);
  *(_WORD *)(a2 + 11134) = 0;
  *(_QWORD *)(a2 + 11136) = *(_QWORD *)(a3 + 11136);
  *(_WORD *)(a2 + 11142) = 0;
  *(_QWORD *)(a2 + 11144) = *(_QWORD *)(a3 + 11144);
  *(_WORD *)(a2 + 11150) = 0;
  *(_WORD *)(a2 + 13196) = *(_WORD *)(a3 + 13196);
  *(_WORD *)(a2 + 13198) = 0;
  *(_WORD *)(a2 + 13200) = *(_WORD *)(a3 + 13200);
  *(_WORD *)(a2 + 13202) = 0;
  *(_WORD *)(a2 + 13204) = *(_WORD *)(a3 + 13204);
  *(_WORD *)(a2 + 13206) = 0;
  *(_WORD *)(a2 + 13208) = *(_WORD *)(a3 + 13208);
  *(_WORD *)(a2 + 13210) = 0;
  *(_WORD *)(a2 + 13212) = *(_WORD *)(a3 + 13212);
  *(_WORD *)(a2 + 13214) = 0;
  *(_WORD *)(a2 + 13216) = *(_WORD *)(a3 + 13216);
  *(_WORD *)(a2 + 13218) = 0;
  v67 = -1344;
  do
  {
    v68 = (_QWORD *)(a2 + v67);
    v68[1562] = *(_QWORD *)(a3 + v67 + 12496);
    v69 = (_WORD *)(a2 + 11320 + v67);
    v69[591] = 0;
    v68[1563] = *(_QWORD *)(a3 + v67 + 12504);
    v69[595] = 0;
    v68[1564] = *(_QWORD *)(a3 + v67 + 12512);
    v69[599] = 0;
    v68[1565] = *(_QWORD *)(a3 + v67 + 12520);
    v69[603] = 0;
    v68[1566] = *(_QWORD *)(a3 + v67 + 12528);
    v69[607] = 0;
    v68[1567] = *(_QWORD *)(a3 + v67 + 12536);
    v69[611] = 0;
    v68[1568] = *(_QWORD *)(a3 + v67 + 12544);
    v69[615] = 0;
    v68[1569] = *(_QWORD *)(a3 + v67 + 12552);
    v69[619] = 0;
    v68[1570] = *(_QWORD *)(a3 + v67 + 12560);
    v69[623] = 0;
    v68[1571] = *(_QWORD *)(a3 + v67 + 12568);
    v69[627] = 0;
    v68[1572] = *(_QWORD *)(a3 + v67 + 12576);
    v69[631] = 0;
    v68[1573] = *(_QWORD *)(a3 + v67 + 12584);
    v69[635] = 0;
    v68[1574] = *(_QWORD *)(a3 + v67 + 12592);
    v69[639] = 0;
    v68[1575] = *(_QWORD *)(a3 + v67 + 12600);
    v69[643] = 0;
    v68[1576] = *(_QWORD *)(a3 + v67 + 12608);
    v69[647] = 0;
    v68[1577] = *(_QWORD *)(a3 + v67 + 12616);
    v69[651] = 0;
    v68[1578] = *(_QWORD *)(a3 + v67 + 12624);
    v69[655] = 0;
    v68[1579] = *(_QWORD *)(a3 + v67 + 12632);
    v69[659] = 0;
    v68[1580] = *(_QWORD *)(a3 + v67 + 12640);
    v69[663] = 0;
    v68[1581] = *(_QWORD *)(a3 + v67 + 12648);
    v69[667] = 0;
    v68[1582] = *(_QWORD *)(a3 + v67 + 12656);
    v69[671] = 0;
    v68[1583] = *(_QWORD *)(a3 + v67 + 12664);
    v69[675] = 0;
    v68[1584] = *(_QWORD *)(a3 + v67 + 12672);
    v69[679] = 0;
    v68[1585] = *(_QWORD *)(a3 + v67 + 12680);
    v69[683] = 0;
    v68[1586] = *(_QWORD *)(a3 + v67 + 12688);
    v69[687] = 0;
    v68[1587] = *(_QWORD *)(a3 + v67 + 12696);
    v69[691] = 0;
    v68[1588] = *(_QWORD *)(a3 + v67 + 12704);
    v69[695] = 0;
    v68[1589] = *(_QWORD *)(a3 + v67 + 12712);
    v69[699] = 0;
    v68[1590] = *(_QWORD *)(a3 + v67 + 12720);
    v69[703] = 0;
    v68[1591] = *(_QWORD *)(a3 + v67 + 12728);
    v69[707] = 0;
    v68[1592] = *(_QWORD *)(a3 + v67 + 12736);
    v69[711] = 0;
    v68[1593] = *(_QWORD *)(a3 + v67 + 12744);
    v69[715] = 0;
    v68[1594] = *(_QWORD *)(a3 + v67 + 12752);
    v69[719] = 0;
    v68[1595] = *(_QWORD *)(a3 + v67 + 12760);
    v69[723] = 0;
    v68[1596] = *(_QWORD *)(a3 + v67 + 12768);
    v69[727] = 0;
    v68[1597] = *(_QWORD *)(a3 + v67 + 12776);
    v69[731] = 0;
    v68[1598] = *(_QWORD *)(a3 + v67 + 12784);
    v69[735] = 0;
    v68[1599] = *(_QWORD *)(a3 + v67 + 12792);
    v69[739] = 0;
    v68[1600] = *(_QWORD *)(a3 + v67 + 12800);
    v69[743] = 0;
    v68[1601] = *(_QWORD *)(a3 + v67 + 12808);
    v69[747] = 0;
    v68[1602] = *(_QWORD *)(a3 + v67 + 12816);
    v69[751] = 0;
    v68[1603] = *(_QWORD *)(a3 + v67 + 12824);
    v69[755] = 0;
    v67 += 336;
  }
  while (v67);
  *(_OWORD *)(a2 + 3504) = *(_OWORD *)(a3 + 3504);
  *(_WORD *)(a2 + 3518) = 0;
  *(_OWORD *)(a2 + 3520) = *(_OWORD *)(a3 + 3520);
  *(_WORD *)(a2 + 3534) = 0;
  *(_OWORD *)(a2 + 3536) = *(_OWORD *)(a3 + 3536);
  *(_WORD *)(a2 + 3550) = 0;
  *(_OWORD *)(a2 + 3216) = *(_OWORD *)(a3 + 3216);
  *(_WORD *)(a2 + 3230) = 0;
  v70 = *(_OWORD *)(a3 + 1888);
  *(_OWORD *)(a2 + 1904) = *(_OWORD *)(a3 + 1904);
  *(_OWORD *)(a2 + 1888) = v70;
  *(_WORD *)(a2 + 1918) = 0;
  v71 = *(_OWORD *)(a3 + 1920);
  *(_OWORD *)(a2 + 1936) = *(_OWORD *)(a3 + 1936);
  *(_OWORD *)(a2 + 1920) = v71;
  *(_WORD *)(a2 + 1950) = 0;
  v72 = *(_OWORD *)(a3 + 1952);
  *(_OWORD *)(a2 + 1968) = *(_OWORD *)(a3 + 1968);
  *(_OWORD *)(a2 + 1952) = v72;
  *(_WORD *)(a2 + 1982) = 0;
  v73 = *(_OWORD *)(a3 + 1984);
  *(_OWORD *)(a2 + 2000) = *(_OWORD *)(a3 + 2000);
  *(_OWORD *)(a2 + 1984) = v73;
  *(_WORD *)(a2 + 2014) = 0;
  v74 = *(_OWORD *)(a3 + 2016);
  *(_OWORD *)(a2 + 2032) = *(_OWORD *)(a3 + 2032);
  *(_OWORD *)(a2 + 2016) = v74;
  *(_WORD *)(a2 + 2046) = 0;
  v75 = *(_OWORD *)(a3 + 2048);
  *(_OWORD *)(a2 + 2064) = *(_OWORD *)(a3 + 2064);
  *(_OWORD *)(a2 + 2048) = v75;
  *(_WORD *)(a2 + 2078) = 0;
  *(_WORD *)(a2 + 5384) = *(_WORD *)(a3 + 5384);
  *(_WORD *)(a2 + 5386) = 0;
  *(_WORD *)(a2 + 5388) = *(_WORD *)(a3 + 5388);
  *(_WORD *)(a2 + 5390) = 0;
  *(_QWORD *)(a2 + 5376) = *(_QWORD *)(a3 + 5376);
  *(_WORD *)(a2 + 5380) = 0;
  *(_QWORD *)(a2 + 5296) = *(_QWORD *)(a3 + 5296);
  *(_WORD *)(a2 + 5302) = 0;
  *(_QWORD *)(a2 + 5304) = *(_QWORD *)(a3 + 5304);
  *(_WORD *)(a2 + 5310) = 0;
  *(_QWORD *)(a2 + 5312) = *(_QWORD *)(a3 + 5312);
  *(_WORD *)(a2 + 5318) = 0;
  *(_QWORD *)(a2 + 5320) = *(_QWORD *)(a3 + 5320);
  *(_WORD *)(a2 + 5326) = 0;
  *(_QWORD *)(a2 + 5328) = *(_QWORD *)(a3 + 5328);
  *(_WORD *)(a2 + 5334) = 0;
  *(_QWORD *)(a2 + 5336) = *(_QWORD *)(a3 + 5336);
  *(_WORD *)(a2 + 5342) = 0;
  *(_WORD *)(a2 + 6136) = *(_WORD *)(a3 + 6136);
  *(_WORD *)(a2 + 6138) = 0;
  *(_WORD *)(a2 + 6140) = *(_WORD *)(a3 + 6140);
  *(_WORD *)(a2 + 6142) = 0;
  *(_WORD *)(a2 + 6144) = *(_WORD *)(a3 + 6144);
  *(_WORD *)(a2 + 6146) = 0;
  *(_WORD *)(a2 + 6148) = *(_WORD *)(a3 + 6148);
  *(_WORD *)(a2 + 6150) = 0;
  *(_WORD *)(a2 + 6152) = *(_WORD *)(a3 + 6152);
  *(_WORD *)(a2 + 6154) = 0;
  *(_WORD *)(a2 + 6156) = *(_WORD *)(a3 + 6156);
  *(_WORD *)(a2 + 6158) = 0;
  *(_WORD *)(a2 + 6160) = *(_WORD *)(a3 + 6160);
  *(_WORD *)(a2 + 6162) = 0;
  *(_WORD *)(a2 + 6164) = *(_WORD *)(a3 + 6164);
  *(_WORD *)(a2 + 6166) = 0;
  *(_WORD *)(a2 + 6168) = *(_WORD *)(a3 + 6168);
  *(_WORD *)(a2 + 6170) = 0;
  *(_WORD *)(a2 + 6172) = *(_WORD *)(a3 + 6172);
  *(_WORD *)(a2 + 6174) = 0;
  *(_WORD *)(a2 + 6176) = *(_WORD *)(a3 + 6176);
  *(_WORD *)(a2 + 6178) = 0;
  *(_WORD *)(a2 + 6180) = *(_WORD *)(a3 + 6180);
  *(_WORD *)(a2 + 6182) = 0;
  *(_WORD *)(a2 + 6184) = *(_WORD *)(a3 + 6184);
  *(_WORD *)(a2 + 6186) = 0;
  *(_WORD *)(a2 + 6188) = *(_WORD *)(a3 + 6188);
  *(_WORD *)(a2 + 6190) = 0;
  *(_WORD *)(a2 + 6192) = *(_WORD *)(a3 + 6192);
  *(_WORD *)(a2 + 6194) = 0;
  *(_WORD *)(a2 + 6196) = *(_WORD *)(a3 + 6196);
  *(_WORD *)(a2 + 6198) = 0;
  *(_WORD *)(a2 + 6200) = *(_WORD *)(a3 + 6200);
  *(_WORD *)(a2 + 6202) = 0;
  *(_WORD *)(a2 + 6204) = *(_WORD *)(a3 + 6204);
  *(_WORD *)(a2 + 6206) = 0;
  *(_WORD *)(a2 + 6208) = *(_WORD *)(a3 + 6208);
  *(_WORD *)(a2 + 6210) = 0;
  *(_WORD *)(a2 + 6212) = *(_WORD *)(a3 + 6212);
  *(_WORD *)(a2 + 6214) = 0;
  *(_WORD *)(a2 + 6216) = *(_WORD *)(a3 + 6216);
  *(_WORD *)(a2 + 6218) = 0;
  *(_WORD *)(a2 + 6220) = *(_WORD *)(a3 + 6220);
  *(_WORD *)(a2 + 6222) = 0;
  *(_WORD *)(a2 + 6224) = *(_WORD *)(a3 + 6224);
  *(_WORD *)(a2 + 6226) = 0;
  *(_OWORD *)(a2 + 3552) = *(_OWORD *)(a3 + 3552);
  *(_WORD *)(a2 + 3564) = 0;
  *(_OWORD *)(a2 + 3568) = *(_OWORD *)(a3 + 3568);
  *(_WORD *)(a2 + 3580) = 0;
  *(_OWORD *)(a2 + 3584) = *(_OWORD *)(a3 + 3584);
  *(_WORD *)(a2 + 3596) = 0;
  *(_OWORD *)(a2 + 3600) = *(_OWORD *)(a3 + 3600);
  *(_WORD *)(a2 + 3612) = 0;
  *(_OWORD *)(a2 + 3616) = *(_OWORD *)(a3 + 3616);
  *(_WORD *)(a2 + 3628) = 0;
  *(_OWORD *)(a2 + 3632) = *(_OWORD *)(a3 + 3632);
  *(_WORD *)(a2 + 3644) = 0;
  *(_OWORD *)(a2 + 3648) = *(_OWORD *)(a3 + 3648);
  *(_WORD *)(a2 + 3660) = 0;
  *(_OWORD *)(a2 + 3664) = *(_OWORD *)(a3 + 3664);
  *(_WORD *)(a2 + 3676) = 0;
  *(_OWORD *)(a2 + 3680) = *(_OWORD *)(a3 + 3680);
  *(_WORD *)(a2 + 3692) = 0;
  *(_OWORD *)(a2 + 3696) = *(_OWORD *)(a3 + 3696);
  *(_WORD *)(a2 + 3708) = 0;
  *(_OWORD *)(a2 + 3712) = *(_OWORD *)(a3 + 3712);
  *(_WORD *)(a2 + 3724) = 0;
  *(_OWORD *)(a2 + 3728) = *(_OWORD *)(a3 + 3728);
  *(_WORD *)(a2 + 3740) = 0;
  *(_OWORD *)(a2 + 3744) = *(_OWORD *)(a3 + 3744);
  *(_WORD *)(a2 + 3756) = 0;
  *(_OWORD *)(a2 + 3760) = *(_OWORD *)(a3 + 3760);
  *(_WORD *)(a2 + 3772) = 0;
  *(_OWORD *)(a2 + 3776) = *(_OWORD *)(a3 + 3776);
  *(_WORD *)(a2 + 3778) = 0;
  *(_OWORD *)(a2 + 3792) = *(_OWORD *)(a3 + 3792);
  *(_WORD *)(a2 + 3794) = 0;
  *(_OWORD *)(a2 + 3808) = *(_OWORD *)(a3 + 3808);
  *(_WORD *)(a2 + 3810) = 0;
  *(_OWORD *)(a2 + 3824) = *(_OWORD *)(a3 + 3824);
  *(_WORD *)(a2 + 3826) = 0;
  *(_OWORD *)(a2 + 3840) = *(_OWORD *)(a3 + 3840);
  *(_WORD *)(a2 + 3842) = 0;
  *(_OWORD *)(a2 + 3856) = *(_OWORD *)(a3 + 3856);
  *(_WORD *)(a2 + 3860) = 0;
  *(_OWORD *)(a2 + 3872) = *(_OWORD *)(a3 + 3872);
  *(_WORD *)(a2 + 3876) = 0;
  *(_OWORD *)(a2 + 3888) = *(_OWORD *)(a3 + 3888);
  *(_WORD *)(a2 + 3892) = 0;
  *(_OWORD *)(a2 + 3904) = *(_OWORD *)(a3 + 3904);
  *(_WORD *)(a2 + 3908) = 0;
  *(_OWORD *)(a2 + 3920) = *(_OWORD *)(a3 + 3920);
  *(_WORD *)(a2 + 3924) = 0;
  *(_OWORD *)(a2 + 3936) = *(_OWORD *)(a3 + 3936);
  *(_WORD *)(a2 + 3942) = 0;
  *(_OWORD *)(a2 + 3952) = *(_OWORD *)(a3 + 3952);
  *(_WORD *)(a2 + 3958) = 0;
  *(_OWORD *)(a2 + 3968) = *(_OWORD *)(a3 + 3968);
  *(_WORD *)(a2 + 3974) = 0;
  *(_OWORD *)(a2 + 3984) = *(_OWORD *)(a3 + 3984);
  *(_WORD *)(a2 + 3990) = 0;
  *(_OWORD *)(a2 + 4000) = *(_OWORD *)(a3 + 4000);
  *(_WORD *)(a2 + 4006) = 0;
  *(_OWORD *)(a2 + 4016) = *(_OWORD *)(a3 + 4016);
  *(_WORD *)(a2 + 4024) = 0;
  *(_OWORD *)(a2 + 4032) = *(_OWORD *)(a3 + 4032);
  *(_WORD *)(a2 + 4040) = 0;
  *(_OWORD *)(a2 + 4048) = *(_OWORD *)(a3 + 4048);
  *(_WORD *)(a2 + 4056) = 0;
  *(_OWORD *)(a2 + 4064) = *(_OWORD *)(a3 + 4064);
  *(_WORD *)(a2 + 4072) = 0;
  *(_OWORD *)(a2 + 4080) = *(_OWORD *)(a3 + 4080);
  *(_WORD *)(a2 + 4088) = 0;
  *(_OWORD *)(a2 + 4096) = *(_OWORD *)(a3 + 4096);
  *(_WORD *)(a2 + 4106) = 0;
  *(_OWORD *)(a2 + 4112) = *(_OWORD *)(a3 + 4112);
  *(_WORD *)(a2 + 4122) = 0;
  *(_OWORD *)(a2 + 4128) = *(_OWORD *)(a3 + 4128);
  *(_WORD *)(a2 + 4138) = 0;
  *(_OWORD *)(a2 + 4144) = *(_OWORD *)(a3 + 4144);
  *(_WORD *)(a2 + 4154) = 0;
  *(_OWORD *)(a2 + 4160) = *(_OWORD *)(a3 + 4160);
  *(_WORD *)(a2 + 4170) = 0;
  *(_OWORD *)(a2 + 4176) = *(_OWORD *)(a3 + 4176);
  *(_WORD *)(a2 + 4188) = 0;
  *(_OWORD *)(a2 + 4192) = *(_OWORD *)(a3 + 4192);
  *(_WORD *)(a2 + 4204) = 0;
  *(_OWORD *)(a2 + 4208) = *(_OWORD *)(a3 + 4208);
  *(_WORD *)(a2 + 4220) = 0;
  *(_OWORD *)(a2 + 4224) = *(_OWORD *)(a3 + 4224);
  *(_WORD *)(a2 + 4236) = 0;
  *(_OWORD *)(a2 + 4240) = *(_OWORD *)(a3 + 4240);
  *(_WORD *)(a2 + 4252) = 0;
  *(_OWORD *)(a2 + 4256) = *(_OWORD *)(a3 + 4256);
  *(_WORD *)(a2 + 4270) = 0;
  *(_OWORD *)(a2 + 4272) = *(_OWORD *)(a3 + 4272);
  *(_WORD *)(a2 + 4286) = 0;
  *(_OWORD *)(a2 + 4288) = *(_OWORD *)(a3 + 4288);
  *(_WORD *)(a2 + 4302) = 0;
  *(_OWORD *)(a2 + 4304) = *(_OWORD *)(a3 + 4304);
  *(_WORD *)(a2 + 4318) = 0;
  *(_OWORD *)(a2 + 4320) = *(_OWORD *)(a3 + 4320);
  *(_WORD *)(a2 + 4334) = 0;
  *(_OWORD *)(a2 + 4336) = *(_OWORD *)(a3 + 4336);
  *(_WORD *)(a2 + 4338) = 0;
  *(_OWORD *)(a2 + 4352) = *(_OWORD *)(a3 + 4352);
  *(_WORD *)(a2 + 4354) = 0;
  *(_OWORD *)(a2 + 4368) = *(_OWORD *)(a3 + 4368);
  *(_WORD *)(a2 + 4370) = 0;
  *(_OWORD *)(a2 + 4384) = *(_OWORD *)(a3 + 4384);
  *(_WORD *)(a2 + 4386) = 0;
  *(_OWORD *)(a2 + 4400) = *(_OWORD *)(a3 + 4400);
  *(_WORD *)(a2 + 4402) = 0;
  *(_OWORD *)(a2 + 4416) = *(_OWORD *)(a3 + 4416);
  *(_WORD *)(a2 + 4420) = 0;
  *(_OWORD *)(a2 + 4432) = *(_OWORD *)(a3 + 4432);
  *(_WORD *)(a2 + 4436) = 0;
  *(_OWORD *)(a2 + 4448) = *(_OWORD *)(a3 + 4448);
  *(_WORD *)(a2 + 4452) = 0;
  *(_OWORD *)(a2 + 4464) = *(_OWORD *)(a3 + 4464);
  *(_WORD *)(a2 + 4468) = 0;
  *(_OWORD *)(a2 + 4480) = *(_OWORD *)(a3 + 4480);
  *(_WORD *)(a2 + 4484) = 0;
  *(_OWORD *)(a2 + 4496) = *(_OWORD *)(a3 + 4496);
  *(_WORD *)(a2 + 4502) = 0;
  *(_OWORD *)(a2 + 4512) = *(_OWORD *)(a3 + 4512);
  *(_WORD *)(a2 + 4518) = 0;
  *(_OWORD *)(a2 + 4528) = *(_OWORD *)(a3 + 4528);
  *(_WORD *)(a2 + 4534) = 0;
  *(_OWORD *)(a2 + 4544) = *(_OWORD *)(a3 + 4544);
  *(_WORD *)(a2 + 4550) = 0;
  *(_OWORD *)(a2 + 4560) = *(_OWORD *)(a3 + 4560);
  *(_WORD *)(a2 + 4566) = 0;
  *(_OWORD *)(a2 + 4576) = *(_OWORD *)(a3 + 4576);
  *(_WORD *)(a2 + 4584) = 0;
  *(_OWORD *)(a2 + 4592) = *(_OWORD *)(a3 + 4592);
  *(_WORD *)(a2 + 4600) = 0;
  *(_OWORD *)(a2 + 4608) = *(_OWORD *)(a3 + 4608);
  *(_WORD *)(a2 + 4616) = 0;
  *(_OWORD *)(a2 + 4624) = *(_OWORD *)(a3 + 4624);
  *(_WORD *)(a2 + 4632) = 0;
  *(_OWORD *)(a2 + 4640) = *(_OWORD *)(a3 + 4640);
  *(_WORD *)(a2 + 4648) = 0;
  *(_OWORD *)(a2 + 4656) = *(_OWORD *)(a3 + 4656);
  *(_WORD *)(a2 + 4666) = 0;
  *(_OWORD *)(a2 + 4672) = *(_OWORD *)(a3 + 4672);
  *(_WORD *)(a2 + 4682) = 0;
  *(_OWORD *)(a2 + 4688) = *(_OWORD *)(a3 + 4688);
  *(_WORD *)(a2 + 4698) = 0;
  *(_OWORD *)(a2 + 4704) = *(_OWORD *)(a3 + 4704);
  *(_WORD *)(a2 + 4714) = 0;
  *(_OWORD *)(a2 + 4720) = *(_OWORD *)(a3 + 4720);
  *(_WORD *)(a2 + 4730) = 0;
  *(_OWORD *)(a2 + 4736) = *(_OWORD *)(a3 + 4736);
  *(_WORD *)(a2 + 4748) = 0;
  *(_OWORD *)(a2 + 4752) = *(_OWORD *)(a3 + 4752);
  *(_WORD *)(a2 + 4764) = 0;
  *(_OWORD *)(a2 + 4768) = *(_OWORD *)(a3 + 4768);
  *(_WORD *)(a2 + 4780) = 0;
  *(_OWORD *)(a2 + 4784) = *(_OWORD *)(a3 + 4784);
  *(_WORD *)(a2 + 4796) = 0;
  *(_OWORD *)(a2 + 4800) = *(_OWORD *)(a3 + 4800);
  *(_WORD *)(a2 + 4812) = 0;
  *(_OWORD *)(a2 + 4816) = *(_OWORD *)(a3 + 4816);
  *(_WORD *)(a2 + 4830) = 0;
  *(_OWORD *)(a2 + 4832) = *(_OWORD *)(a3 + 4832);
  *(_WORD *)(a2 + 4846) = 0;
  *(_OWORD *)(a2 + 4848) = *(_OWORD *)(a3 + 4848);
  *(_WORD *)(a2 + 4862) = 0;
  *(_OWORD *)(a2 + 4864) = *(_OWORD *)(a3 + 4864);
  *(_WORD *)(a2 + 4878) = 0;
  *(_OWORD *)(a2 + 4880) = *(_OWORD *)(a3 + 4880);
  *(_WORD *)(a2 + 4894) = 0;
  *(_WORD *)(a2 + 5928) = *(_WORD *)(a3 + 5928);
  *(_WORD *)(a2 + 5930) = 0;
  *(_WORD *)(a2 + 5932) = *(_WORD *)(a3 + 5932);
  *(_WORD *)(a2 + 5934) = 0;
  *(_WORD *)(a2 + 5936) = *(_WORD *)(a3 + 5936);
  *(_WORD *)(a2 + 5938) = 0;
  *(_WORD *)(a2 + 5940) = *(_WORD *)(a3 + 5940);
  *(_WORD *)(a2 + 5942) = 0;
  *(_WORD *)(a2 + 5944) = *(_WORD *)(a3 + 5944);
  *(_WORD *)(a2 + 5946) = 0;
  *(_WORD *)(a2 + 5948) = *(_WORD *)(a3 + 5948);
  *(_WORD *)(a2 + 5950) = 0;
  *(_WORD *)(a2 + 5952) = *(_WORD *)(a3 + 5952);
  *(_WORD *)(a2 + 5954) = 0;
  *(_WORD *)(a2 + 5956) = *(_WORD *)(a3 + 5956);
  *(_WORD *)(a2 + 5958) = 0;
  *(_WORD *)(a2 + 5960) = *(_WORD *)(a3 + 5960);
  *(_WORD *)(a2 + 5962) = 0;
  *(_WORD *)(a2 + 5964) = *(_WORD *)(a3 + 5964);
  *(_WORD *)(a2 + 5966) = 0;
  *(_WORD *)(a2 + 5968) = *(_WORD *)(a3 + 5968);
  *(_WORD *)(a2 + 5970) = 0;
  *(_WORD *)(a2 + 5972) = *(_WORD *)(a3 + 5972);
  *(_WORD *)(a2 + 5974) = 0;
  *(_WORD *)(a2 + 5976) = *(_WORD *)(a3 + 5976);
  *(_WORD *)(a2 + 5978) = 0;
  *(_WORD *)(a2 + 5980) = *(_WORD *)(a3 + 5980);
  *(_WORD *)(a2 + 5982) = 0;
  *(_WORD *)(a2 + 5984) = *(_WORD *)(a3 + 5984);
  *(_WORD *)(a2 + 5986) = 0;
  *(_WORD *)(a2 + 5988) = *(_WORD *)(a3 + 5988);
  *(_WORD *)(a2 + 5990) = 0;
  *(_WORD *)(a2 + 5992) = *(_WORD *)(a3 + 5992);
  *(_WORD *)(a2 + 5994) = 0;
  *(_WORD *)(a2 + 5996) = *(_WORD *)(a3 + 5996);
  *(_WORD *)(a2 + 5998) = 0;
  *(_WORD *)(a2 + 6000) = *(_WORD *)(a3 + 6000);
  *(_WORD *)(a2 + 6002) = 0;
  *(_WORD *)(a2 + 6004) = *(_WORD *)(a3 + 6004);
  *(_WORD *)(a2 + 6006) = 0;
  *(_WORD *)(a2 + 6008) = *(_WORD *)(a3 + 6008);
  *(_WORD *)(a2 + 6010) = 0;
  v76 = *(_OWORD *)(a3 + 2080);
  *(_OWORD *)(a2 + 2096) = *(_OWORD *)(a3 + 2096);
  *(_OWORD *)(a2 + 2080) = v76;
  *(_WORD *)(a2 + 2110) = 0;
  v77 = *(_OWORD *)(a3 + 2112);
  *(_OWORD *)(a2 + 2128) = *(_OWORD *)(a3 + 2128);
  *(_OWORD *)(a2 + 2112) = v77;
  *(_WORD *)(a2 + 2142) = 0;
  v78 = *(_OWORD *)(a3 + 2144);
  *(_OWORD *)(a2 + 2160) = *(_OWORD *)(a3 + 2160);
  *(_OWORD *)(a2 + 2144) = v78;
  *(_WORD *)(a2 + 2166) = 0;
  *(_WORD *)(a2 + 5448) = *(_WORD *)(a3 + 5448);
  *(_WORD *)(a2 + 5450) = 0;
  *(_WORD *)(a2 + 5452) = *(_WORD *)(a3 + 5452);
  *(_WORD *)(a2 + 5454) = 0;
  *(_WORD *)(a2 + 5456) = *(_WORD *)(a3 + 5456);
  *(_WORD *)(a2 + 5458) = 0;
  *(_WORD *)(a2 + 5460) = *(_WORD *)(a3 + 5460);
  *(_WORD *)(a2 + 5462) = 0;
  if ((*(_BYTE *)(a1 + 232) & 1) != 0)
  {
    *(_WORD *)(a2 + 6024) = *(_WORD *)(a3 + 6024);
    *(_WORD *)(a2 + 6026) = 0;
    *(_WORD *)(a2 + 6028) = *(_WORD *)(a3 + 6028);
    *(_WORD *)(a2 + 6030) = 0;
    *(_WORD *)(a2 + 6032) = *(_WORD *)(a3 + 6032);
    *(_WORD *)(a2 + 6034) = 0;
    v81 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v81;
    *(_WORD *)(a2 + 24) = 0;
    v82 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 48) = v82;
    *(_WORD *)(a2 + 56) = 0;
    v83 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 80) = v83;
    *(_WORD *)(a2 + 88) = 0;
    v84 = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
    *(_OWORD *)(a2 + 112) = v84;
    *(_WORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 4896) = *(_QWORD *)(a3 + 4896);
    *(_WORD *)(a2 + 4900) = 0;
    *(_QWORD *)(a2 + 4904) = *(_QWORD *)(a3 + 4904);
    *(_WORD *)(a2 + 4908) = 0;
    *(_QWORD *)(a2 + 4912) = *(_QWORD *)(a3 + 4912);
    *(_WORD *)(a2 + 4916) = 0;
    *(_QWORD *)(a2 + 4920) = *(_QWORD *)(a3 + 4920);
    *(_WORD *)(a2 + 4924) = 0;
    *(_QWORD *)(a2 + 4928) = *(_QWORD *)(a3 + 4928);
    *(_WORD *)(a2 + 4932) = 0;
    *(_QWORD *)(a2 + 4936) = *(_QWORD *)(a3 + 4936);
    *(_WORD *)(a2 + 4940) = 0;
    *(_QWORD *)(a2 + 4944) = *(_QWORD *)(a3 + 4944);
    *(_WORD *)(a2 + 4948) = 0;
    *(_QWORD *)(a2 + 4952) = *(_QWORD *)(a3 + 4952);
    *(_WORD *)(a2 + 4956) = 0;
    *(_QWORD *)(a2 + 4960) = *(_QWORD *)(a3 + 4960);
    *(_WORD *)(a2 + 4964) = 0;
    *(_QWORD *)(a2 + 4968) = *(_QWORD *)(a3 + 4968);
    *(_WORD *)(a2 + 4972) = 0;
    *(_QWORD *)(a2 + 4976) = *(_QWORD *)(a3 + 4976);
    *(_WORD *)(a2 + 4980) = 0;
    *(_QWORD *)(a2 + 4984) = *(_QWORD *)(a3 + 4984);
    *(_WORD *)(a2 + 4988) = 0;
    *(_QWORD *)(a2 + 4992) = *(_QWORD *)(a3 + 4992);
    *(_WORD *)(a2 + 4996) = 0;
    *(_QWORD *)(a2 + 5000) = *(_QWORD *)(a3 + 5000);
    *(_WORD *)(a2 + 5004) = 0;
    *(_QWORD *)(a2 + 5008) = *(_QWORD *)(a3 + 5008);
    *(_WORD *)(a2 + 5012) = 0;
    *(_QWORD *)(a2 + 5016) = *(_QWORD *)(a3 + 5016);
    *(_WORD *)(a2 + 5020) = 0;
    *(_WORD *)(a2 + 5552) = *(_WORD *)(a3 + 5552);
    *(_WORD *)(a2 + 5554) = 0;
    *(_WORD *)(a2 + 5556) = *(_WORD *)(a3 + 5556);
    *(_WORD *)(a2 + 5558) = 0;
    *(_WORD *)(a2 + 5560) = *(_WORD *)(a3 + 5560);
    *(_WORD *)(a2 + 5562) = 0;
    *(_WORD *)(a2 + 5564) = *(_WORD *)(a3 + 5564);
    *(_WORD *)(a2 + 5566) = 0;
    *(_WORD *)(a2 + 5568) = *(_WORD *)(a3 + 5568);
    *(_WORD *)(a2 + 5570) = 0;
    *(_WORD *)(a2 + 5572) = *(_WORD *)(a3 + 5572);
    *(_WORD *)(a2 + 5574) = 0;
    *(_WORD *)(a2 + 5576) = *(_WORD *)(a3 + 5576);
    *(_WORD *)(a2 + 5578) = 0;
    *(_WORD *)(a2 + 5580) = *(_WORD *)(a3 + 5580);
    *(_WORD *)(a2 + 5582) = 0;
    *(_WORD *)(a2 + 5584) = *(_WORD *)(a3 + 5584);
    *(_WORD *)(a2 + 5586) = 0;
    *(_WORD *)(a2 + 5588) = *(_WORD *)(a3 + 5588);
    *(_WORD *)(a2 + 5590) = 0;
    *(_WORD *)(a2 + 5592) = *(_WORD *)(a3 + 5592);
    *(_WORD *)(a2 + 5594) = 0;
    *(_WORD *)(a2 + 5596) = *(_WORD *)(a3 + 5596);
    *(_WORD *)(a2 + 5598) = 0;
    *(_WORD *)(a2 + 5600) = *(_WORD *)(a3 + 5600);
    *(_WORD *)(a2 + 5602) = 0;
    *(_WORD *)(a2 + 5604) = *(_WORD *)(a3 + 5604);
    *(_WORD *)(a2 + 5606) = 0;
    *(_WORD *)(a2 + 5608) = *(_WORD *)(a3 + 5608);
    *(_WORD *)(a2 + 5610) = 0;
    *(_WORD *)(a2 + 5612) = *(_WORD *)(a3 + 5612);
    *(_WORD *)(a2 + 5614) = 0;
    *(_WORD *)(a2 + 5616) = *(_WORD *)(a3 + 5616);
    *(_WORD *)(a2 + 5618) = 0;
    *(_OWORD *)(a2 + 3376) = *(_OWORD *)(a3 + 3376);
    *(_WORD *)(a2 + 3390) = 0;
    *(_OWORD *)(a2 + 3392) = *(_OWORD *)(a3 + 3392);
    *(_WORD *)(a2 + 3406) = 0;
    *(_OWORD *)(a2 + 3408) = *(_OWORD *)(a3 + 3408);
    *(_WORD *)(a2 + 3422) = 0;
    *(_OWORD *)(a2 + 3424) = *(_OWORD *)(a3 + 3424);
    *(_WORD *)(a2 + 3438) = 0;
    *(_OWORD *)(a2 + 3440) = *(_OWORD *)(a3 + 3440);
    *(_WORD *)(a2 + 3454) = 0;
    *(_OWORD *)(a2 + 3456) = *(_OWORD *)(a3 + 3456);
    *(_WORD *)(a2 + 3470) = 0;
    *(_OWORD *)(a2 + 3472) = *(_OWORD *)(a3 + 3472);
    *(_WORD *)(a2 + 3486) = 0;
    *(_OWORD *)(a2 + 3488) = *(_OWORD *)(a3 + 3488);
    *(_WORD *)(a2 + 3502) = 0;
    *(_WORD *)(a2 + 5620) = *(_WORD *)(a3 + 5620);
    *(_WORD *)(a2 + 5622) = 0;
    *(_WORD *)(a2 + 5624) = *(_WORD *)(a3 + 5624);
    *(_WORD *)(a2 + 5626) = 0;
    *(_WORD *)(a2 + 5628) = *(_WORD *)(a3 + 5628);
    *(_WORD *)(a2 + 5630) = 0;
    *(_WORD *)(a2 + 5632) = *(_WORD *)(a3 + 5632);
    *(_WORD *)(a2 + 5634) = 0;
    *(_WORD *)(a2 + 5636) = *(_WORD *)(a3 + 5636);
    *(_WORD *)(a2 + 5638) = 0;
    *(_WORD *)(a2 + 5640) = *(_WORD *)(a3 + 5640);
    *(_WORD *)(a2 + 5642) = 0;
    *(_WORD *)(a2 + 5644) = *(_WORD *)(a3 + 5644);
    *(_WORD *)(a2 + 5646) = 0;
    *(_WORD *)(a2 + 5648) = *(_WORD *)(a3 + 5648);
    *(_WORD *)(a2 + 5650) = 0;
    *(_WORD *)(a2 + 5652) = *(_WORD *)(a3 + 5652);
    *(_WORD *)(a2 + 5654) = 0;
    *(_WORD *)(a2 + 5656) = *(_WORD *)(a3 + 5656);
    *(_WORD *)(a2 + 5658) = 0;
    *(_WORD *)(a2 + 5660) = *(_WORD *)(a3 + 5660);
    *(_WORD *)(a2 + 5662) = 0;
    *(_WORD *)(a2 + 5664) = *(_WORD *)(a3 + 5664);
    *(_WORD *)(a2 + 5666) = 0;
    *(_WORD *)(a2 + 5668) = *(_WORD *)(a3 + 5668);
    *(_WORD *)(a2 + 5670) = 0;
    *(_WORD *)(a2 + 5672) = *(_WORD *)(a3 + 5672);
    *(_WORD *)(a2 + 5674) = 0;
    *(_WORD *)(a2 + 5676) = *(_WORD *)(a3 + 5676);
    *(_WORD *)(a2 + 5678) = 0;
    *(_WORD *)(a2 + 5680) = *(_WORD *)(a3 + 5680);
    *(_WORD *)(a2 + 5682) = 0;
    *(_WORD *)(a2 + 5684) = *(_WORD *)(a3 + 5684);
    *(_WORD *)(a2 + 5686) = 0;
    *(_WORD *)(a2 + 5688) = *(_WORD *)(a3 + 5688);
    *(_WORD *)(a2 + 5690) = 0;
    *(_WORD *)(a2 + 5692) = *(_WORD *)(a3 + 5692);
    *(_WORD *)(a2 + 5694) = 0;
    *(_WORD *)(a2 + 5696) = *(_WORD *)(a3 + 5696);
    *(_WORD *)(a2 + 5698) = 0;
    *(_WORD *)(a2 + 5700) = *(_WORD *)(a3 + 5700);
    *(_WORD *)(a2 + 5702) = 0;
    *(_WORD *)(a2 + 5704) = *(_WORD *)(a3 + 5704);
    *(_WORD *)(a2 + 5706) = 0;
    *(_WORD *)(a2 + 5708) = *(_WORD *)(a3 + 5708);
    *(_WORD *)(a2 + 5710) = 0;
    *(_WORD *)(a2 + 5712) = *(_WORD *)(a3 + 5712);
    *(_WORD *)(a2 + 5714) = 0;
    *(_WORD *)(a2 + 5716) = *(_WORD *)(a3 + 5716);
    *(_WORD *)(a2 + 5718) = 0;
    *(_WORD *)(a2 + 5720) = *(_WORD *)(a3 + 5720);
    *(_WORD *)(a2 + 5722) = 0;
    *(_WORD *)(a2 + 5724) = *(_WORD *)(a3 + 5724);
    *(_WORD *)(a2 + 5726) = 0;
    *(_WORD *)(a2 + 5728) = *(_WORD *)(a3 + 5728);
    *(_WORD *)(a2 + 5730) = 0;
    *(_WORD *)(a2 + 5732) = *(_WORD *)(a3 + 5732);
    *(_WORD *)(a2 + 5734) = 0;
    *(_WORD *)(a2 + 5736) = *(_WORD *)(a3 + 5736);
    *(_WORD *)(a2 + 5738) = 0;
    *(_WORD *)(a2 + 5740) = *(_WORD *)(a3 + 5740);
    *(_WORD *)(a2 + 5742) = 0;
    *(_WORD *)(a2 + 5744) = *(_WORD *)(a3 + 5744);
    *(_WORD *)(a2 + 5746) = 0;
    *(_WORD *)(a2 + 5748) = *(_WORD *)(a3 + 5748);
    *(_WORD *)(a2 + 5750) = 0;
    *(_WORD *)(a2 + 5752) = *(_WORD *)(a3 + 5752);
    *(_WORD *)(a2 + 5754) = 0;
    *(_WORD *)(a2 + 5756) = *(_WORD *)(a3 + 5756);
    *(_WORD *)(a2 + 5758) = 0;
    v85 = *(_OWORD *)(a3 + 976);
    *(_OWORD *)(a2 + 960) = *(_OWORD *)(a3 + 960);
    *(_OWORD *)(a2 + 976) = v85;
    *(_WORD *)(a2 + 990) = 0;
    v86 = *(_OWORD *)(a3 + 1008);
    *(_OWORD *)(a2 + 992) = *(_OWORD *)(a3 + 992);
    *(_OWORD *)(a2 + 1008) = v86;
    *(_WORD *)(a2 + 1022) = 0;
    v87 = *(_OWORD *)(a3 + 1024);
    *(_OWORD *)(a2 + 1040) = *(_OWORD *)(a3 + 1040);
    *(_OWORD *)(a2 + 1024) = v87;
    *(_WORD *)(a2 + 1054) = 0;
    v88 = *(_OWORD *)(a3 + 1056);
    *(_OWORD *)(a2 + 1072) = *(_OWORD *)(a3 + 1072);
    *(_OWORD *)(a2 + 1056) = v88;
    *(_WORD *)(a2 + 1086) = 0;
    v89 = *(_OWORD *)(a3 + 1088);
    *(_OWORD *)(a2 + 1104) = *(_OWORD *)(a3 + 1104);
    *(_OWORD *)(a2 + 1088) = v89;
    *(_WORD *)(a2 + 1118) = 0;
    v90 = *(_OWORD *)(a3 + 1120);
    *(_OWORD *)(a2 + 1136) = *(_OWORD *)(a3 + 1136);
    *(_OWORD *)(a2 + 1120) = v90;
    *(_WORD *)(a2 + 1150) = 0;
    v91 = *(_OWORD *)(a3 + 1152);
    *(_OWORD *)(a2 + 1168) = *(_OWORD *)(a3 + 1168);
    *(_OWORD *)(a2 + 1152) = v91;
    *(_WORD *)(a2 + 1182) = 0;
    v92 = *(_OWORD *)(a3 + 1184);
    *(_OWORD *)(a2 + 1200) = *(_OWORD *)(a3 + 1200);
    *(_OWORD *)(a2 + 1184) = v92;
    *(_WORD *)(a2 + 1214) = 0;
    v93 = *(_OWORD *)(a3 + 1216);
    *(_OWORD *)(a2 + 1232) = *(_OWORD *)(a3 + 1232);
    *(_OWORD *)(a2 + 1216) = v93;
    *(_WORD *)(a2 + 1246) = 0;
    *(_WORD *)(a2 + 5760) = *(_WORD *)(a3 + 5760);
    *(_WORD *)(a2 + 5762) = 0;
    *(_WORD *)(a2 + 5764) = *(_WORD *)(a3 + 5764);
    *(_WORD *)(a2 + 5766) = 0;
    *(_WORD *)(a2 + 5768) = *(_WORD *)(a3 + 5768);
    *(_WORD *)(a2 + 5770) = 0;
    *(_WORD *)(a2 + 5772) = *(_WORD *)(a3 + 5772);
    *(_WORD *)(a2 + 5774) = 0;
    *(_WORD *)(a2 + 5776) = *(_WORD *)(a3 + 5776);
    *(_WORD *)(a2 + 5778) = 0;
    *(_WORD *)(a2 + 5780) = *(_WORD *)(a3 + 5780);
    *(_WORD *)(a2 + 5782) = 0;
    *(_WORD *)(a2 + 5784) = *(_WORD *)(a3 + 5784);
    *(_WORD *)(a2 + 5786) = 0;
    *(_WORD *)(a2 + 5788) = *(_WORD *)(a3 + 5788);
    *(_WORD *)(a2 + 5790) = 0;
    *(_WORD *)(a2 + 5792) = *(_WORD *)(a3 + 5792);
    *(_WORD *)(a2 + 5794) = 0;
    *(_WORD *)(a2 + 5796) = *(_WORD *)(a3 + 5796);
    *(_WORD *)(a2 + 5798) = 0;
    *(_WORD *)(a2 + 5800) = *(_WORD *)(a3 + 5800);
    *(_WORD *)(a2 + 5802) = 0;
    *(_WORD *)(a2 + 5804) = *(_WORD *)(a3 + 5804);
    *(_WORD *)(a2 + 5806) = 0;
    *(_WORD *)(a2 + 5808) = *(_WORD *)(a3 + 5808);
    *(_WORD *)(a2 + 5810) = 0;
    *(_WORD *)(a2 + 5812) = *(_WORD *)(a3 + 5812);
    *(_WORD *)(a2 + 5814) = 0;
    *(_WORD *)(a2 + 5816) = *(_WORD *)(a3 + 5816);
    *(_WORD *)(a2 + 5818) = 0;
    *(_WORD *)(a2 + 5820) = *(_WORD *)(a3 + 5820);
    *(_WORD *)(a2 + 5822) = 0;
    *(_WORD *)(a2 + 5824) = *(_WORD *)(a3 + 5824);
    *(_WORD *)(a2 + 5826) = 0;
    *(_WORD *)(a2 + 5828) = *(_WORD *)(a3 + 5828);
    *(_WORD *)(a2 + 5830) = 0;
    *(_WORD *)(a2 + 5832) = *(_WORD *)(a3 + 5832);
    *(_WORD *)(a2 + 5834) = 0;
    *(_WORD *)(a2 + 5836) = *(_WORD *)(a3 + 5836);
    *(_WORD *)(a2 + 5838) = 0;
    *(_WORD *)(a2 + 5840) = *(_WORD *)(a3 + 5840);
    *(_WORD *)(a2 + 5842) = 0;
    *(_WORD *)(a2 + 5844) = *(_WORD *)(a3 + 5844);
    *(_WORD *)(a2 + 5846) = 0;
    *(_WORD *)(a2 + 5848) = *(_WORD *)(a3 + 5848);
    *(_WORD *)(a2 + 5850) = 0;
    *(_WORD *)(a2 + 5852) = *(_WORD *)(a3 + 5852);
    *(_WORD *)(a2 + 5854) = 0;
    *(_WORD *)(a2 + 5856) = *(_WORD *)(a3 + 5856);
    *(_WORD *)(a2 + 5858) = 0;
    *(_WORD *)(a2 + 5860) = *(_WORD *)(a3 + 5860);
    *(_WORD *)(a2 + 5862) = 0;
    *(_WORD *)(a2 + 5864) = *(_WORD *)(a3 + 5864);
    *(_WORD *)(a2 + 5866) = 0;
    *(_WORD *)(a2 + 5868) = *(_WORD *)(a3 + 5868);
    *(_WORD *)(a2 + 5870) = 0;
    *(_WORD *)(a2 + 5872) = *(_WORD *)(a3 + 5872);
    *(_WORD *)(a2 + 5874) = 0;
    *(_WORD *)(a2 + 5876) = *(_WORD *)(a3 + 5876);
    *(_WORD *)(a2 + 5878) = 0;
    *(_WORD *)(a2 + 5880) = *(_WORD *)(a3 + 5880);
    *(_WORD *)(a2 + 5882) = 0;
    *(_WORD *)(a2 + 5884) = *(_WORD *)(a3 + 5884);
    *(_WORD *)(a2 + 5886) = 0;
    *(_WORD *)(a2 + 5888) = *(_WORD *)(a3 + 5888);
    *(_WORD *)(a2 + 5890) = 0;
    *(_WORD *)(a2 + 5892) = *(_WORD *)(a3 + 5892);
    *(_WORD *)(a2 + 5894) = 0;
    *(_WORD *)(a2 + 5896) = *(_WORD *)(a3 + 5896);
    *(_WORD *)(a2 + 5898) = 0;
    *(_WORD *)(a2 + 5900) = *(_WORD *)(a3 + 5900);
    *(_WORD *)(a2 + 5902) = 0;
    *(_WORD *)(a2 + 5904) = *(_WORD *)(a3 + 5904);
    *(_WORD *)(a2 + 5906) = 0;
    *(_WORD *)(a2 + 5908) = *(_WORD *)(a3 + 5908);
    *(_WORD *)(a2 + 5910) = 0;
    *(_WORD *)(a2 + 5912) = *(_WORD *)(a3 + 5912);
    *(_WORD *)(a2 + 5914) = 0;
    *(_WORD *)(a2 + 5916) = *(_WORD *)(a3 + 5916);
    *(_WORD *)(a2 + 5918) = 0;
    *(_WORD *)(a2 + 5920) = *(_WORD *)(a3 + 5920);
    *(_WORD *)(a2 + 5922) = 0;
    *(_WORD *)(a2 + 5924) = *(_WORD *)(a3 + 5924);
    *(_WORD *)(a2 + 5926) = 0;
    *(_WORD *)(a2 + 6036) = *(_WORD *)(a3 + 6036);
    *(_WORD *)(a2 + 6038) = 0;
    *(_WORD *)(a2 + 6040) = *(_WORD *)(a3 + 6040);
    *(_WORD *)(a2 + 6042) = 0;
    *(_WORD *)(a2 + 6044) = *(_WORD *)(a3 + 6044);
    *(_WORD *)(a2 + 6046) = 0;
    *(_WORD *)(a2 + 5392) = *(_WORD *)(a3 + 5392);
    *(_WORD *)(a2 + 5394) = 0;
    *(_WORD *)(a2 + 5396) = *(_WORD *)(a3 + 5396);
    *(_WORD *)(a2 + 5398) = 0;
    *(_WORD *)(a2 + 5400) = *(_WORD *)(a3 + 5400);
    *(_WORD *)(a2 + 5402) = 0;
    *(_WORD *)(a2 + 5404) = *(_WORD *)(a3 + 5404);
    *(_WORD *)(a2 + 5406) = 0;
    *(_WORD *)(a2 + 5420) = *(_WORD *)(a3 + 5420);
    *(_WORD *)(a2 + 5422) = 0;
    *(_WORD *)(a2 + 5424) = *(_WORD *)(a3 + 5424);
    *(_WORD *)(a2 + 5426) = 0;
    *(_WORD *)(a2 + 5428) = *(_WORD *)(a3 + 5428);
    *(_WORD *)(a2 + 5430) = 0;
    *(_WORD *)(a2 + 5432) = *(_WORD *)(a3 + 5432);
    *(_WORD *)(a2 + 5434) = 0;
    *(_WORD *)(a2 + 5436) = *(_WORD *)(a3 + 5436);
    *(_WORD *)(a2 + 5438) = 0;
    *(_WORD *)(a2 + 5440) = *(_WORD *)(a3 + 5440);
    *(_WORD *)(a2 + 5442) = 0;
    *(_WORD *)(a2 + 5444) = *(_WORD *)(a3 + 5444);
    *(_WORD *)(a2 + 5446) = 0;
    *(_QWORD *)(a2 + 5344) = *(_QWORD *)(a3 + 5344);
    *(_WORD *)(a2 + 5350) = 0;
    *(_QWORD *)(a2 + 5352) = *(_QWORD *)(a3 + 5352);
    *(_WORD *)(a2 + 5358) = 0;
    *(_QWORD *)(a2 + 5360) = *(_QWORD *)(a3 + 5360);
    *(_WORD *)(a2 + 5366) = 0;
    *(_QWORD *)(a2 + 5368) = *(_QWORD *)(a3 + 5368);
    *(_WORD *)(a2 + 5374) = 0;
    *(_QWORD *)(a2 + 5120) = *(_QWORD *)(a3 + 5120);
    *(_WORD *)(a2 + 5124) = 0;
    *(_QWORD *)(a2 + 5128) = *(_QWORD *)(a3 + 5128);
    *(_WORD *)(a2 + 5132) = 0;
    *(_QWORD *)(a2 + 5136) = *(_QWORD *)(a3 + 5136);
    *(_WORD *)(a2 + 5140) = 0;
    *(_QWORD *)(a2 + 5144) = *(_QWORD *)(a3 + 5144);
    *(_WORD *)(a2 + 5148) = 0;
    *(_QWORD *)(a2 + 5152) = *(_QWORD *)(a3 + 5152);
    *(_WORD *)(a2 + 5156) = 0;
    *(_QWORD *)(a2 + 5160) = *(_QWORD *)(a3 + 5160);
    *(_WORD *)(a2 + 5164) = 0;
    *(_QWORD *)(a2 + 5168) = *(_QWORD *)(a3 + 5168);
    *(_WORD *)(a2 + 5172) = 0;
    *(_QWORD *)(a2 + 5176) = *(_QWORD *)(a3 + 5176);
    *(_WORD *)(a2 + 5180) = 0;
    *(_QWORD *)(a2 + 5184) = *(_QWORD *)(a3 + 5184);
    *(_WORD *)(a2 + 5188) = 0;
    *(_QWORD *)(a2 + 5192) = *(_QWORD *)(a3 + 5192);
    *(_WORD *)(a2 + 5196) = 0;
    *(_QWORD *)(a2 + 5200) = *(_QWORD *)(a3 + 5200);
    *(_WORD *)(a2 + 5204) = 0;
    *(_QWORD *)(a2 + 5208) = *(_QWORD *)(a3 + 5208);
    *(_WORD *)(a2 + 5212) = 0;
    *(_QWORD *)(a2 + 5216) = *(_QWORD *)(a3 + 5216);
    *(_WORD *)(a2 + 5220) = 0;
    *(_QWORD *)(a2 + 5224) = *(_QWORD *)(a3 + 5224);
    *(_WORD *)(a2 + 5228) = 0;
    *(_QWORD *)(a2 + 5232) = *(_QWORD *)(a3 + 5232);
    *(_WORD *)(a2 + 5236) = 0;
    *(_QWORD *)(a2 + 5240) = *(_QWORD *)(a3 + 5240);
    *(_WORD *)(a2 + 5244) = 0;
    *(_QWORD *)(a2 + 5248) = *(_QWORD *)(a3 + 5248);
    *(_WORD *)(a2 + 5252) = 0;
    *(_QWORD *)(a2 + 5256) = *(_QWORD *)(a3 + 5256);
    *(_WORD *)(a2 + 5260) = 0;
    *(_QWORD *)(a2 + 5264) = *(_QWORD *)(a3 + 5264);
    *(_WORD *)(a2 + 5268) = 0;
    *(_QWORD *)(a2 + 5272) = *(_QWORD *)(a3 + 5272);
    *(_WORD *)(a2 + 5276) = 0;
    *(_QWORD *)(a2 + 5280) = *(_QWORD *)(a3 + 5280);
    *(_WORD *)(a2 + 5284) = 0;
    *(_QWORD *)(a2 + 5288) = *(_QWORD *)(a3 + 5288);
    *(_WORD *)(a2 + 5292) = 0;
    *(_WORD *)(a2 + 6048) = *(_WORD *)(a3 + 6048);
    *(_WORD *)(a2 + 6050) = 0;
    *(_WORD *)(a2 + 6052) = *(_WORD *)(a3 + 6052);
    *(_WORD *)(a2 + 6054) = 0;
    *(_WORD *)(a2 + 6056) = *(_WORD *)(a3 + 6056);
    *(_WORD *)(a2 + 6058) = 0;
    *(_WORD *)(a2 + 6060) = *(_WORD *)(a3 + 6060);
    *(_WORD *)(a2 + 6062) = 0;
    *(_WORD *)(a2 + 6064) = *(_WORD *)(a3 + 6064);
    *(_WORD *)(a2 + 6066) = 0;
    *(_WORD *)(a2 + 6068) = *(_WORD *)(a3 + 6068);
    *(_WORD *)(a2 + 6070) = 0;
    *(_WORD *)(a2 + 6072) = *(_WORD *)(a3 + 6072);
    *(_WORD *)(a2 + 6074) = 0;
    *(_WORD *)(a2 + 6076) = *(_WORD *)(a3 + 6076);
    *(_WORD *)(a2 + 6078) = 0;
    *(_WORD *)(a2 + 6080) = *(_WORD *)(a3 + 6080);
    *(_WORD *)(a2 + 6082) = 0;
    *(_WORD *)(a2 + 6084) = *(_WORD *)(a3 + 6084);
    *(_WORD *)(a2 + 6086) = 0;
    *(_WORD *)(a2 + 6088) = *(_WORD *)(a3 + 6088);
    *(_WORD *)(a2 + 6090) = 0;
    *(_WORD *)(a2 + 6092) = *(_WORD *)(a3 + 6092);
    *(_WORD *)(a2 + 6094) = 0;
    *(_WORD *)(a2 + 6096) = *(_WORD *)(a3 + 6096);
    *(_WORD *)(a2 + 6098) = 0;
    *(_WORD *)(a2 + 6100) = *(_WORD *)(a3 + 6100);
    *(_WORD *)(a2 + 6102) = 0;
    *(_WORD *)(a2 + 6104) = *(_WORD *)(a3 + 6104);
    *(_WORD *)(a2 + 6106) = 0;
    *(_WORD *)(a2 + 6108) = *(_WORD *)(a3 + 6108);
    *(_WORD *)(a2 + 6110) = 0;
    *(_WORD *)(a2 + 6112) = *(_WORD *)(a3 + 6112);
    *(_WORD *)(a2 + 6114) = 0;
    *(_WORD *)(a2 + 6116) = *(_WORD *)(a3 + 6116);
    *(_WORD *)(a2 + 6118) = 0;
    *(_WORD *)(a2 + 6120) = *(_WORD *)(a3 + 6120);
    *(_WORD *)(a2 + 6122) = 0;
    *(_WORD *)(a2 + 6124) = *(_WORD *)(a3 + 6124);
    *(_WORD *)(a2 + 6126) = 0;
    *(_WORD *)(a2 + 6128) = *(_WORD *)(a3 + 6128);
    *(_WORD *)(a2 + 6130) = 0;
    *(_WORD *)(a2 + 6132) = *(_WORD *)(a3 + 6132);
    *(_WORD *)(a2 + 6134) = 0;
    *(_QWORD *)(a2 + 13504) = *(_QWORD *)(a3 + 13504);
    *(_WORD *)(a2 + 13510) = 0;
    v94 = *(_OWORD *)(a3 + 13248);
    *(_OWORD *)(a2 + 13264) = *(_OWORD *)(a3 + 13264);
    *(_OWORD *)(a2 + 13248) = v94;
    *(_WORD *)(a2 + 13268) = 0;
    *(_WORD *)(a2 + 13312) = *(_WORD *)(a3 + 13312);
    *(_WORD *)(a2 + 13314) = 0;
    *(_WORD *)(a2 + 13316) = *(_WORD *)(a3 + 13316);
    *(_WORD *)(a2 + 13318) = 0;
    *(_WORD *)(a2 + 13320) = *(_WORD *)(a3 + 13320);
    *(_WORD *)(a2 + 13322) = 0;
    *(_WORD *)(a2 + 13324) = *(_WORD *)(a3 + 13324);
    *(_WORD *)(a2 + 13326) = 0;
    *(_WORD *)(a2 + 13328) = *(_WORD *)(a3 + 13328);
    *(_WORD *)(a2 + 13330) = 0;
    *(_WORD *)(a2 + 13332) = *(_WORD *)(a3 + 13332);
    *(_WORD *)(a2 + 13334) = 0;
    *(_WORD *)(a2 + 13336) = *(_WORD *)(a3 + 13336);
    *(_WORD *)(a2 + 13338) = 0;
    *(_WORD *)(a2 + 13340) = *(_WORD *)(a3 + 13340);
    *(_WORD *)(a2 + 13342) = 0;
    *(_WORD *)(a2 + 13344) = *(_WORD *)(a3 + 13344);
    *(_WORD *)(a2 + 13346) = 0;
    *(_WORD *)(a2 + 13348) = *(_WORD *)(a3 + 13348);
    *(_WORD *)(a2 + 13350) = 0;
    *(_WORD *)(a2 + 13352) = *(_WORD *)(a3 + 13352);
    *(_WORD *)(a2 + 13354) = 0;
    *(_QWORD *)(a2 + 13280) = *(_QWORD *)(a3 + 13280);
    *(_WORD *)(a2 + 13286) = 0;
    *(_QWORD *)(a2 + 13288) = *(_QWORD *)(a3 + 13288);
    *(_WORD *)(a2 + 13294) = 0;
    *(_QWORD *)(a2 + 13296) = *(_QWORD *)(a3 + 13296);
    *(_WORD *)(a2 + 13302) = 0;
    *(_WORD *)(a2 + 13304) = *(_WORD *)(a3 + 13304);
    *(_WORD *)(a2 + 13306) = 0;
    *(_WORD *)(a2 + 13308) = *(_WORD *)(a3 + 13308);
    *(_WORD *)(a2 + 13310) = 0;
    *(_WORD *)(a2 + 13356) = *(_WORD *)(a3 + 13356);
    *(_WORD *)(a2 + 13358) = 0;
    result = *(__n128 *)(a3 + 13376);
    *(_OWORD *)(a2 + 13392) = *(_OWORD *)(a3 + 13392);
    *(__n128 *)(a2 + 13376) = result;
    *(_WORD *)(a2 + 13396) = 0;
    *(_WORD *)(a2 + 13440) = *(_WORD *)(a3 + 13440);
    *(_WORD *)(a2 + 13442) = 0;
    *(_WORD *)(a2 + 13444) = *(_WORD *)(a3 + 13444);
    *(_WORD *)(a2 + 13446) = 0;
    *(_WORD *)(a2 + 13448) = *(_WORD *)(a3 + 13448);
    *(_WORD *)(a2 + 13450) = 0;
    *(_WORD *)(a2 + 13452) = *(_WORD *)(a3 + 13452);
    *(_WORD *)(a2 + 13454) = 0;
    *(_WORD *)(a2 + 13456) = *(_WORD *)(a3 + 13456);
    *(_WORD *)(a2 + 13458) = 0;
    *(_WORD *)(a2 + 13460) = *(_WORD *)(a3 + 13460);
    *(_WORD *)(a2 + 13462) = 0;
    *(_WORD *)(a2 + 13464) = *(_WORD *)(a3 + 13464);
    *(_WORD *)(a2 + 13466) = 0;
    *(_WORD *)(a2 + 13468) = *(_WORD *)(a3 + 13468);
    *(_WORD *)(a2 + 13470) = 0;
    *(_WORD *)(a2 + 13472) = *(_WORD *)(a3 + 13472);
    *(_WORD *)(a2 + 13474) = 0;
    *(_WORD *)(a2 + 13476) = *(_WORD *)(a3 + 13476);
    *(_WORD *)(a2 + 13478) = 0;
    *(_WORD *)(a2 + 13480) = *(_WORD *)(a3 + 13480);
    *(_WORD *)(a2 + 13482) = 0;
    *(_QWORD *)(a2 + 13408) = *(_QWORD *)(a3 + 13408);
    *(_WORD *)(a2 + 13414) = 0;
    *(_QWORD *)(a2 + 13416) = *(_QWORD *)(a3 + 13416);
    *(_WORD *)(a2 + 13422) = 0;
    *(_QWORD *)(a2 + 13424) = *(_QWORD *)(a3 + 13424);
    *(_WORD *)(a2 + 13430) = 0;
    *(_WORD *)(a2 + 13432) = *(_WORD *)(a3 + 13432);
    *(_WORD *)(a2 + 13434) = 0;
    *(_DWORD *)(a2 + 13436) = *(unsigned __int16 *)(a3 + 13436);
    *(_WORD *)(a2 + 13484) = *(_WORD *)(a3 + 13484);
    *(_WORD *)(a2 + 13486) = 0;
  }
  else
  {
    *(_WORD *)(a2 + 6228) = *(_WORD *)(a3 + 6228);
    *(_WORD *)(a2 + 6230) = 0;
    *(_QWORD *)(a2 + 13792) = *(_QWORD *)(a3 + 13792);
    *(_WORD *)(a2 + 13798) = 0;
    v79 = *(_OWORD *)(a3 + 13536);
    *(_OWORD *)(a2 + 13552) = *(_OWORD *)(a3 + 13552);
    *(_OWORD *)(a2 + 13536) = v79;
    *(_WORD *)(a2 + 13556) = 0;
    *(_WORD *)(a2 + 13600) = *(_WORD *)(a3 + 13600);
    *(_WORD *)(a2 + 13602) = 0;
    *(_WORD *)(a2 + 13604) = *(_WORD *)(a3 + 13604);
    *(_WORD *)(a2 + 13606) = 0;
    *(_WORD *)(a2 + 13608) = *(_WORD *)(a3 + 13608);
    *(_WORD *)(a2 + 13610) = 0;
    *(_WORD *)(a2 + 13612) = *(_WORD *)(a3 + 13612);
    *(_WORD *)(a2 + 13614) = 0;
    *(_WORD *)(a2 + 13616) = *(_WORD *)(a3 + 13616);
    *(_WORD *)(a2 + 13618) = 0;
    *(_WORD *)(a2 + 13620) = *(_WORD *)(a3 + 13620);
    *(_WORD *)(a2 + 13622) = 0;
    *(_WORD *)(a2 + 13624) = *(_WORD *)(a3 + 13624);
    *(_WORD *)(a2 + 13626) = 0;
    *(_WORD *)(a2 + 13628) = *(_WORD *)(a3 + 13628);
    *(_WORD *)(a2 + 13630) = 0;
    *(_WORD *)(a2 + 13632) = *(_WORD *)(a3 + 13632);
    *(_WORD *)(a2 + 13634) = 0;
    *(_WORD *)(a2 + 13636) = *(_WORD *)(a3 + 13636);
    *(_WORD *)(a2 + 13638) = 0;
    *(_WORD *)(a2 + 13640) = *(_WORD *)(a3 + 13640);
    *(_WORD *)(a2 + 13642) = 0;
    *(_WORD *)(a2 + 13644) = *(_WORD *)(a3 + 13644);
    *(_WORD *)(a2 + 13646) = 0;
    result = *(__n128 *)(a3 + 13664);
    *(_OWORD *)(a2 + 13680) = *(_OWORD *)(a3 + 13680);
    *(__n128 *)(a2 + 13664) = result;
    *(_WORD *)(a2 + 13684) = 0;
    *(_WORD *)(a2 + 13728) = *(_WORD *)(a3 + 13728);
    *(_WORD *)(a2 + 13730) = 0;
    *(_WORD *)(a2 + 13732) = *(_WORD *)(a3 + 13732);
    *(_WORD *)(a2 + 13734) = 0;
    *(_WORD *)(a2 + 13736) = *(_WORD *)(a3 + 13736);
    *(_WORD *)(a2 + 13738) = 0;
    *(_WORD *)(a2 + 13740) = *(_WORD *)(a3 + 13740);
    *(_WORD *)(a2 + 13742) = 0;
    *(_WORD *)(a2 + 13744) = *(_WORD *)(a3 + 13744);
    *(_WORD *)(a2 + 13746) = 0;
    *(_WORD *)(a2 + 13748) = *(_WORD *)(a3 + 13748);
    *(_WORD *)(a2 + 13750) = 0;
    *(_WORD *)(a2 + 13752) = *(_WORD *)(a3 + 13752);
    *(_WORD *)(a2 + 13754) = 0;
    *(_WORD *)(a2 + 13756) = *(_WORD *)(a3 + 13756);
    *(_WORD *)(a2 + 13758) = 0;
    *(_WORD *)(a2 + 13760) = *(_WORD *)(a3 + 13760);
    *(_WORD *)(a2 + 13762) = 0;
    *(_WORD *)(a2 + 13764) = *(_WORD *)(a3 + 13764);
    *(_WORD *)(a2 + 13766) = 0;
    *(_WORD *)(a2 + 13768) = *(_WORD *)(a3 + 13768);
    *(_WORD *)(a2 + 13770) = 0;
    *(_WORD *)(a2 + 13772) = *(_WORD *)(a3 + 13772);
    *(_WORD *)(a2 + 13774) = 0;
  }
  return result;
}

void dav1d_cdf_thread_unref(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = *(_DWORD *)(v2 + 20);
      (*(void (**)(_QWORD, _QWORD))(v2 + 24))(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 32));
      if (v6)
        free((void *)v2);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void *dav1d_data_create_internal(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  void **v6;
  void *result;
  void *memptr;

  if (!a1)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Input validation check '%s' failed in %s!\n", "buf != NULL", "dav1d_data_create_internal");
    return 0;
  }
  if (a2 < 0)
    return 0;
  v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x40uLL, v4 + 40, 0xCA3F0CE3uLL) || (v5 = (char *)memptr) == 0)
  {
    result = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    v6 = (void **)((char *)memptr + v4);
    *v6 = memptr;
    v6[1] = v5;
    v6[2] = (void *)1;
    v6[3] = default_free_callback;
    v6[4] = v5;
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = &v5[v4];
    *(_QWORD *)a1 = v5;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)(a1 + 24) = 0x8000000000000000;
    *(_QWORD *)(a1 + 40) = -1;
    return *v6;
  }
  return result;
}

uint64_t dav1d_data_wrap_internal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t result;
  FILE *v13;
  const char *v14;

  if (!a1)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = "buf != NULL";
LABEL_9:
    fprintf(v13, "Input validation check '%s' failed in %s!\n", v14, "dav1d_data_wrap_internal");
    return 4294967274;
  }
  if (!a2)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = "ptr != NULL";
    goto LABEL_9;
  }
  if (!a4)
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = "free_callback != NULL";
    goto LABEL_9;
  }
  v10 = malloc_type_malloc(0x28uLL, 0x10C0040DB5B76A7uLL);
  if (v10)
  {
    v11 = v10;
    result = 0;
    *v11 = 0;
    v11[1] = a2;
    v11[2] = 0x100000001;
    v11[3] = a4;
    v11[4] = a5;
    *(_QWORD *)(a1 + 8) = a3;
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)a1 = a2;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)(a1 + 24) = 0x8000000000000000;
    *(_QWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
    return 4294967284;
  }
  return result;
}

__n128 dav1d_data_ref(uint64_t a1, uint64_t a2)
{
  FILE *v2;
  const char *v3;
  __n128 result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;

  if (!a1)
  {
    v2 = (FILE *)*MEMORY[0x1E0C80C10];
    v3 = "dst != ((void *)0)";
    goto LABEL_5;
  }
  if (*(_QWORD *)a1)
  {
    v2 = (FILE *)*MEMORY[0x1E0C80C10];
    v3 = "dst->data == ((void *)0)";
LABEL_5:
    fprintf(v2, "Input validation check '%s' failed in %s!\n", v3, "dav1d_data_ref");
    return result;
  }
  if (!a2)
  {
    v2 = (FILE *)*MEMORY[0x1E0C80C10];
    v3 = "src != ((void *)0)";
    goto LABEL_5;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    if (!*(_QWORD *)a2)
    {
      v2 = (FILE *)*MEMORY[0x1E0C80C10];
      v3 = "src->data != ((void *)0)";
      goto LABEL_5;
    }
    v6 = (unsigned int *)(v5 + 16);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a2 + 64);
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 48) = v12;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void dav1d_data_props_copy(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 16);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      v8 = *(_DWORD *)(v4 + 20);
      (*(void (**)(_QWORD, _QWORD))(v4 + 24))(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 32));
      if (v8)
        free((void *)v4);
    }
    *(_QWORD *)(a1 + 40) = 0;
  }
  v9 = *a2;
  v10 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)a1 = v9;
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 16);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
}

void dav1d_data_unref_internal(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  FILE *v12;
  const char *v13;

  if (!a1)
  {
    v12 = (FILE *)*MEMORY[0x1E0C80C10];
    v13 = "buf != ((void *)0)";
    goto LABEL_17;
  }
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    if (*(_QWORD *)a1)
    {
      v4 = (unsigned int *)(v3 + 16);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(_DWORD *)(v3 + 20);
        (*(void (**)(_QWORD, _QWORD))(v3 + 24))(*(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 32));
        if (v7)
          free((void *)v3);
      }
      goto LABEL_9;
    }
    v12 = (FILE *)*MEMORY[0x1E0C80C10];
    v13 = "buf->data != ((void *)0)";
LABEL_17:
    fprintf(v12, "Input validation check '%s' failed in %s!\n", v13, "dav1d_data_unref_internal");
    return;
  }
LABEL_9:
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 24) = 0x8000000000000000;
  *(_QWORD *)(a1 + 40) = -1;
  if (v2)
  {
    v8 = (unsigned int *)(v2 + 16);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      v11 = *(_DWORD *)(v2 + 20);
      (*(void (**)(_QWORD, _QWORD))(v2 + 24))(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 32));
      if (v11)
        free((void *)v2);
    }
  }
}

uint64_t dav1d_decode_tile_sbrow(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  size_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  double v16;
  int8x8_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int v21;
  uint64_t v22;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  double v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  _DWORD *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  char v57;
  int v58;
  signed int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  size_t v66;

  v2 = (_QWORD *)(a1 + 259560);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v65 = *(_DWORD *)(*(_QWORD *)(v3 + 8) + 1012);
  v5 = v65 == 0;
  v6 = *(_QWORD *)(v3 + 3120);
  v7 = *(int *)(v3 + 3304);
  v8 = *(_DWORD *)(v4 + 13884);
  v9 = *(int *)(v4 + 13880);
  v10 = *(_QWORD *)(v3 + 24);
  v11 = *(unsigned __int16 *)(v10 + 2 * v9 + 560);
  v64 = v6;
  if (((*(_BYTE *)(v10 + 232) & 1) != 0 || *(_DWORD *)(v10 + 464))
    && (dav1d_refmvs_tile_sbrow_init(a1 + 664, v3 + 3880, *(_DWORD *)(v4 + 13864), *(_DWORD *)(v4 + 13868), *(_DWORD *)(v4 + 13872), *(_DWORD *)(v4 + 13876), *(int *)(a1 + 28) >> *(_DWORD *)(v3 + 3300), v8, *(_DWORD *)(a1 + 259588)), (*(_BYTE *)(*(_QWORD *)(v3 + 24) + 232) & 1) != 0))
  {
    if (*(_DWORD *)(v6 + 8) >= 2u)
    {
      v13 = *(_QWORD *)(v4 + 13928)
          + 56 * ((*(_DWORD *)(a1 + 28) - *(_DWORD *)(v4 + 13872)) >> *(_DWORD *)(v3 + 3300));
      memset_pattern16((void *)v13, &unk_196889CE0, 8uLL);
      memset_pattern16((void *)(v13 + 8), &unk_196889CE0, 8uLL);
      memset_pattern16((void *)(v13 + 16), &unk_196889CE0, 8uLL);
      memset_pattern16((void *)(v13 + 24), &unk_196889CE0, 8uLL);
      memset_pattern16((void *)(v13 + 32), &unk_196889CE0, 8uLL);
      memset_pattern16((void *)(v13 + 40), &unk_196889CE0, 8uLL);
      v14 = (void *)(v13 + 48);
      v6 = v64;
      memset_pattern16(v14, &unk_196889CE0, 8uLL);
    }
    v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  v15 = v11 >> v5;
  reset_context((_OWORD *)(a1 + 32), v12, *((_DWORD *)v2 + 7));
  if (*((_DWORD *)v2 + 7) == 2)
  {
    v21 = *(_DWORD *)(v3 + 3288);
    if (*(_DWORD *)(v6 + 24) < 2u)
      v22 = 0;
    else
      v22 = *(int *)(*(_QWORD *)(v3 + 24) + 556) * (uint64_t)v21;
    v24 = *(_DWORD *)(v4 + 13864);
    *(_DWORD *)(a1 + 24) = v24;
    *(_QWORD *)(a1 + 656) = *(_QWORD *)(v3 + 3864) + 624 * v22 + 624 * v15 + 624 * v21 * v8;
    if (v24 < *(_DWORD *)(v4 + 13868))
    {
      do
      {
        v26 = atomic_load(*(unsigned int **)(v6 + 792));
        if (v26
          || decode_sb((int32x2_t *)a1, v5, *(_QWORD *)(v6 + 62808 + 8 * (v65 == 0)), v16, v17, v18, v19, v20))
        {
          return 1;
        }
        v27 = *(_DWORD *)(a1 + 24);
        if ((v27 & 0x10) != 0 || *(_DWORD *)(*(_QWORD *)(v3 + 8) + 1012))
          *(_QWORD *)(a1 + 656) += 624;
        v25 = v27 + v7;
        *(_DWORD *)(a1 + 24) = v25;
      }
      while (v25 < *(_DWORD *)(v4 + 13868));
    }
    (*(void (**)(uint64_t))(v3 + 3216))(a1);
  }
  else
  {
    if (*(int *)(v4 + 13852) < -15)
      return 1;
    if (*(_DWORD *)(*(_QWORD *)(v3 + 3120) + 24) >= 2u && *(_DWORD *)(*(_QWORD *)(v3 + 24) + 512))
      dav1d_refmvs_load_tmvs(v3 + 3880, *(_DWORD *)(v4 + 13884), *(int *)(v4 + 13864) >> 1, *(int *)(v4 + 13868) >> 1, *(int *)(a1 + 28) >> 1, (*(_DWORD *)(a1 + 28) + (int)v7) >> 1);
    v28 = 0.0;
    *(_OWORD *)(a1 + 8240) = 0u;
    *(_OWORD *)(a1 + 8224) = 0u;
    v29 = *(int *)(a1 + 28) >> 5;
    v30 = *(_DWORD *)(v4 + 13864);
    *(_DWORD *)(a1 + 24) = v30;
    v31 = *(_DWORD *)(v3 + 3288);
    *(_QWORD *)(a1 + 656) = *(_QWORD *)(v3 + 3864) + 624 * v15 + 624 * v31 * v8;
    *v2 = *(_QWORD *)(v3 + 4264) + 1348 * v31 * v29 + 1348 * v15;
    v32 = *(_DWORD *)(v4 + 13868);
    if (v30 < v32)
    {
      v61 = v4;
      v62 = v6 + 62808;
      v66 = v7;
      v63 = v2;
      while (!atomic_load(*(unsigned int **)(v6 + 792)))
      {
        v35 = *v2;
        if (v65)
        {
          v2[2] = v35 + 1280;
          *(_BYTE *)(v35 + 1280) = -1;
          *(_BYTE *)(v2[2] + 1) = -1;
          *(_BYTE *)(v2[2] + 2) = -1;
          v36 = (_BYTE *)(v2[2] + 3);
        }
        else
        {
          v36 = (_BYTE *)(v35 + ((*(_DWORD *)(a1 + 28) >> 3) & 2 | (*(_DWORD *)(a1 + 24) >> 4) & 1u) + 1280);
          v2[2] = v36;
        }
        v37 = 0;
        *v36 = -1;
        do
        {
          if (((*(_DWORD *)(v3 + 5192) >> v37) & 1) != 0)
          {
            if (v37)
            {
              v38 = *(_DWORD *)(v3 + 2056);
              v39 = v38 == 1;
              v40 = v38 != 3;
            }
            else
            {
              v39 = 0;
              v40 = 0;
            }
            v41 = *(_DWORD **)(v3 + 24);
            v42 = v41[(v37 != 0) + 346];
            v43 = *(_DWORD *)(a1 + 28);
            v44 = (4 * v43) >> v39;
            v45 = (1 << v42) - 1;
            if ((v44 & v45) == 0)
            {
              v46 = 1 << v42 >> 1;
              if (!v44 || v44 + v46 <= (*(_DWORD *)(v3 + 2052) + v39) >> v39)
              {
                v47 = v41[v37 + 343];
                if (v41[59] == v41[60])
                {
                  v48 = *(_DWORD *)(a1 + 24);
                  v49 = (4 * v48) >> v40;
                  if ((v49 & v45) == 0 && (!v49 || v49 + v46 <= (*(_DWORD *)(v3 + 2048) + v40) >> v40))
                    read_restoration_info(*(_QWORD *)(a1 + 16), *(_QWORD *)(v3 + 4272)+ 120 * (*(_DWORD *)(v3 + 3308) * (v43 >> 5) + (v48 >> 5))+ 40 * v37+ 10 * ((v43 >> 3) & 2 | (v48 >> 4) & 1), v37, v47);
                }
                else
                {
                  v50 = (((*(_DWORD *)(v3 + 2312) + v40) >> v40) + v46) >> v42;
                  if (v50 <= 1)
                    v50 = 1;
                  v51 = (8 << v42) - 1;
                  v52 = *(_DWORD *)(a1 + 24);
                  v53 = 4 * v41[113];
                  v54 = (((v53 * v52) >> v40) + v51) >> (v42 + 3);
                  v55 = ((((v52 + (int)v66) * v53) >> v40) + v51) >> (v42 + 3);
                  if (v55 >= v50)
                    v56 = v50;
                  else
                    v56 = v55;
                  if (v54 < v56)
                  {
                    v57 = v42 + v40;
                    do
                    {
                      read_restoration_info(*(_QWORD *)(a1 + 16), *(_QWORD *)(v3 + 4272)+ 120 * ((*(int *)(a1 + 28) >> 5) * *(_DWORD *)(v3 + 3308) + (v54 << v57 >> 7))+ 40 * v37+ 10 * ((*(_DWORD *)(a1 + 28) >> 3) & 2 | ((v54 << v57) >> 6) & 1), v37, v47);
                      ++v54;
                    }
                    while (v56 != v54);
                  }
                }
              }
            }
          }
          ++v37;
        }
        while (v37 != 3);
        if (decode_sb((int32x2_t *)a1, v5, *(_QWORD *)(v62 + 8 * (v65 == 0)), v28, v17, v18, v19, v20))
          break;
        v58 = *(_DWORD *)(a1 + 24);
        v2 = v63;
        if ((v58 & 0x10) != 0 || *(_DWORD *)(*(_QWORD *)(v3 + 8) + 1012))
        {
          *(_QWORD *)(a1 + 656) += 624;
          *v63 += 1348;
        }
        v7 = v66;
        v33 = v58 + v66;
        *(_DWORD *)(a1 + 24) = v58 + v66;
        v4 = v61;
        v32 = *(_DWORD *)(v61 + 13868);
        v6 = v64;
        if (v33 >= v32)
          goto LABEL_63;
      }
      return 1;
    }
LABEL_63:
    if (*(_DWORD *)(*(_QWORD *)(v3 + 8) + 1048)
      && *(_DWORD *)(*(_QWORD *)(v3 + 3120) + 24) >= 2u
      && (*(_BYTE *)(*(_QWORD *)(v3 + 24) + 232) & 1) != 0)
    {
      dav1d_refmvs_save_tmvs((uint64_t *)(a1 + 664), *(int *)(v4 + 13864) >> 1, v32 >> 1, *(int *)(a1 + 28) >> 1, (*(_DWORD *)(a1 + 28) + (int)v7) >> 1);
    }
    if (*((_DWORD *)v2 + 7) != 1)
      (*(void (**)(uint64_t))(v3 + 3216))(a1);
    v59 = (*(_DWORD *)(v3 + 3284) + 31) & 0xFFFFFFE0;
    memcpy((void *)(*(_QWORD *)(v3 + 4984) + *(_DWORD *)(a1 + 28) + v59 * (int)v9), (const void *)(a1 + 32 + (*(_DWORD *)(a1 + 28) & 0x10) + 480), v7);
    v60 = *(_DWORD *)(v3 + 2056) == 1;
    memcpy((void *)(*(_QWORD *)(v3 + 4992) + (*(int *)(a1 + 28) >> v60) + (v59 >> v60) * (int)v9), (const void *)(a1 + 32 + ((*(_DWORD *)(a1 + 28) & 0x10u) >> v60) + 512), (int)v7 >> v60);
  }
  return 0;
}

_OWORD *reset_context(_OWORD *result, unsigned int a2, int a3)
{
  int8x16_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = vdupq_n_s8(a2);
  result[14] = v3;
  result[15] = v3;
  result[35] = 0u;
  result[36] = 0u;
  if (a2)
  {
    *result = 0uLL;
    result[1] = 0uLL;
  }
  if (a3 != 2)
  {
    result[10] = 0uLL;
    result[11] = 0uLL;
    result[12] = 0uLL;
    result[13] = 0uLL;
    *(_QWORD *)&v4 = 0x202020202020202;
    *((_QWORD *)&v4 + 1) = 0x202020202020202;
    result[30] = v4;
    result[31] = v4;
    *(_QWORD *)&v4 = 0x101010101010101;
    *((_QWORD *)&v4 + 1) = 0x101010101010101;
    result[32] = v4;
    result[33] = v4;
    result[34] = 0uLL;
    *(_QWORD *)&v5 = -1;
    *((_QWORD *)&v5 + 1) = -1;
    result[26] = v5;
    result[27] = v5;
    *(_QWORD *)&v6 = 0x404040404040404;
    *((_QWORD *)&v6 + 1) = 0x404040404040404;
    result[28] = v6;
    result[29] = v6;
    if (!a2)
    {
      result[20] = v5;
      result[21] = v5;
      result[18] = v5;
      result[19] = v5;
      result[16] = 0uLL;
      result[17] = 0uLL;
      *result = 0uLL;
      result[1] = 0uLL;
    }
    *(_QWORD *)&v7 = 0x4040404040404040;
    *((_QWORD *)&v7 + 1) = 0x4040404040404040;
    result[2] = v7;
    result[3] = v7;
    result[4] = v7;
    result[5] = v7;
    result[6] = v7;
    result[7] = v7;
    *(_QWORD *)&v7 = 0x303030303030303;
    *((_QWORD *)&v7 + 1) = 0x303030303030303;
    result[22] = v7;
    result[23] = v7;
    result[24] = v7;
    result[25] = v7;
    result[8] = 0uLL;
    result[9] = 0uLL;
    result[37] = 0uLL;
    result[38] = 0uLL;
  }
  return result;
}

uint64_t decode_sb(int32x2_t *a1, unsigned int a2, uint64_t a3, double a4, int8x8_t a5, int8x16_t a6, int32x4_t a7, int32x4_t a8)
{
  unsigned int v9;
  int32x2_t *v11;
  int32x2_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  _BOOL4 v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int16x8_t *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint8x16_t *v46;
  unsigned int v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  uint8x16_t *v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int8x16_t v57;
  __int32 v58;
  double v59;
  double v60;
  int8x16_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  int8x16_t v67;
  int32x2_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t result;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint8x16_t *v84;
  unsigned int v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  uint8x16_t *v90;
  unsigned __int32 v91;
  unint64_t v92;
  int8x16_t v93;
  int32x4_t v94;
  int8x16_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  uint64_t v99;
  uint64_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  uint8x16_t v107;
  uint16x8_t v108;
  uint32x4_t v109;
  uint64x2_t v110;
  uint64x2_t v111;
  uint32x4_t v112;
  uint64x2_t v113;
  uint16x8_t v114;
  uint32x4_t v115;
  uint64x2_t v116;
  uint64x2_t v117;
  uint64x2_t v118;
  uint64x2_t v119;
  uint32x4_t v120;
  uint64x2_t v121;
  uint64x2_t v122;
  uint64x2_t v123;
  uint64x2_t v124;
  uint64x2_t v125;
  uint64x2_t v126;
  uint64x2_t v127;
  uint64x2_t v128;
  uint64x2_t v129;
  int8x16_t v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  int8x16_t v137;
  int32x4_t v138;
  int8x16_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  uint64_t v143;
  uint64_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  uint8x16_t v151;
  uint16x8_t v152;
  uint32x4_t v153;
  uint64x2_t v154;
  uint64x2_t v155;
  uint32x4_t v156;
  uint64x2_t v157;
  uint16x8_t v158;
  uint32x4_t v159;
  uint64x2_t v160;
  uint64x2_t v161;
  uint64x2_t v162;
  uint64x2_t v163;
  uint32x4_t v164;
  uint64x2_t v165;
  uint64x2_t v166;
  uint64x2_t v167;
  uint64x2_t v168;
  uint64x2_t v169;
  uint64x2_t v170;
  uint64x2_t v171;
  uint64x2_t v172;
  uint64x2_t v173;
  int8x16_t v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  char *v179;
  unsigned __int8 *v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  uint64_t v184;

  v9 = a2;
  v11 = a1 + 32448;
  v12 = a1[1];
  v13 = *(_DWORD *)(*(_QWORD *)&v12 + 3280);
  v14 = a1[3].u32[0];
  v15 = a1[3].u32[1];
  v16 = (int)v14;
  v17 = *(_DWORD *)(*(_QWORD *)&v12 + 3284);
  v18 = 0x10u >> a2;
  v19 = v14 + (0x10u >> a2);
  v20 = v15 + (0x10u >> a2);
  v21 = v17 > v20;
  v23 = v13 <= v19;
  v22 = v13 > v19;
  v23 = v23 && v17 <= v20;
  if (v23)
  {
    do
    {
      v18 = 8u >> v9++;
      a3 = *(_QWORD *)(a3 + 104);
      v21 = v17 > (int)(v18 + v15);
      v22 = v13 > (int)(v18 + v14);
    }
    while (v13 <= (int)(v18 + v14) && v17 <= (int)(v18 + v15));
  }
  if (a1[32448].i32[1] != 2)
  {
    v28 = a1[2];
    v29 = (v14 >> 1) & 0xF;
    v30 = (v15 >> 1) & 0xF;
    v31 = a1[72].u8[v30];
    v32 = *(_QWORD *)&v28 + ((unint64_t)v9 << 7);
    v33 = (int16x8_t *)(v32
                      + 32
                      * ((*(unsigned __int8 *)(*(_QWORD *)&a1[82] + v29 + 544) >> (4 - v9)) & 1 | (2
                                                                                                 * ((v31 >> (4 - v9)) & 1)))
                      + 1248);
    if (v22 && v21)
    {
      v27 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(*(_QWORD *)&v28 + 13824), v33, dav1d_partition_type_count[v9]);
      if (*(_DWORD *)(*(_QWORD *)&v12 + 2056) != 2 || v27 - 2 >= 8 || ((0xB1u >> (v27 - 2)) & 1) == 0)
LABEL_18:
        __asm { BR              X10 }
      return 1;
    }
    if (v22)
    {
      v34 = *(unsigned __int16 *)(v32
                                + 32
                                * ((*(unsigned __int8 *)(*(_QWORD *)&a1[82] + v29 + 544) >> (4 - v9)) & 1 | (2 * ((v31 >> (4 - v9)) & 1)))
                                + 1258)
          - *(unsigned __int16 *)(v32
                                + 32
                                * ((*(unsigned __int8 *)(*(_QWORD *)&a1[82] + v29 + 544) >> (4 - v9)) & 1 | (2 * ((v31 >> (4 - v9)) & 1)))
                                + 1256)
          + *(unsigned __int16 *)(v32
                                + 32
                                * ((*(unsigned __int8 *)(*(_QWORD *)&a1[82] + v29 + 544) >> (4 - v9)) & 1 | (2 * ((v31 >> (4 - v9)) & 1)))
                                + 1250);
      if (v9)
        v34 = v34 + v33[1].u16[0] - v33->u16[7];
      v35 = *(_DWORD *)(*(_QWORD *)&v28 + 13848);
      v36 = *(_QWORD *)(*(_QWORD *)&v28 + 13840);
      v37 = (((v35 >> 8) * (v34 >> 6)) >> 1) + 4;
      v38 = v37 << 48;
      v39 = v35 - 2 * v37;
      if (v36 >= v37 << 48)
        v40 = v37 << 48;
      else
        v40 = 0;
      if (v36 < v37 << 48)
        v39 = 0;
      v41 = v39 + v37;
      v42 = __clz(v41) ^ 0x10;
      v43 = *(_DWORD *)(*(_QWORD *)&v28 + 13852);
      v44 = v43 - v42;
      *(_DWORD *)(*(_QWORD *)&v28 + 13852) = v43 - v42;
      v45 = ((v36 - v40 + 1) << v42) - 1;
      *(_QWORD *)(*(_QWORD *)&v28 + 13840) = v45;
      *(_DWORD *)(*(_QWORD *)&v28 + 13848) = v41 << v42;
      if (((v43 - v42) & 0x80000000) == 0)
      {
LABEL_84:
        if (v36 < v38)
          goto LABEL_21;
LABEL_85:
        v135 = *(_DWORD *)(a3 + 4);
        v70 = 1;
        if (decode_b((uint64_t)a1, v9, dav1d_block_sizes[20 * v9 + 2], 1, v135, a4, *(double *)&a5, *(double *)a6.i64, *(double *)a7.i64, (int8x16_t)a8))return 0xFFFFFFFFLL;
        result = 0;
        goto LABEL_107;
      }
      v46 = *(uint8x16_t **)(*(_QWORD *)&v28 + 13824);
      v47 = 40 - v44;
      if ((int)(40 - v44) < 0 || (v48 = *(_QWORD *)(*(_QWORD *)&v28 + 13832), (unint64_t)v46 >= v48))
      {
LABEL_83:
        *(_QWORD *)(*(_QWORD *)&v28 + 13840) = v45;
        *(_DWORD *)(*(_QWORD *)&v28 + 13852) = v44;
        *(_QWORD *)(*(_QWORD *)&v28 + 13824) = v46;
        goto LABEL_84;
      }
      if (v47 >= 7)
        v49 = 7;
      else
        v49 = 40 - v44;
      v50 = (v42 - v43 - v49 + 47) >> 3;
      if (~(unint64_t)v46 + v48 < v50)
        v50 = ~(unint64_t)v46 + v48;
      if (v50 >= 0xF)
      {
        v92 = v50 + 1;
        v93 = (int8x16_t)(unint64_t)v45;
        v94 = vdupq_n_s32(v47);
        v95 = 0uLL;
        v96 = vaddq_s32(v94, (int32x4_t)xmmword_196889AA0);
        a7 = vaddq_s32(v94, (int32x4_t)xmmword_196889AB0);
        a8 = vaddq_s32(v94, (int32x4_t)xmmword_196889AC0);
        v97 = vaddq_s32(v94, (int32x4_t)xmmword_196889AD0);
        v98.i64[0] = 0x7F0000007FLL;
        v98.i64[1] = 0x7F0000007FLL;
        v99 = (v50 + 1) & 0x3FFFFFF0;
        v51 = v47 - 8 * v99;
        v52 = (uint8x16_t *)((char *)v46 + v99);
        v100 = v99;
        v101 = 0uLL;
        v102 = 0uLL;
        v103 = 0uLL;
        v104 = 0uLL;
        v105 = 0uLL;
        v106 = 0uLL;
        do
        {
          v107 = *v46++;
          v108 = vmovl_high_u8(v107);
          v109 = vmovl_high_u16(v108);
          v110.i64[0] = v109.u32[0];
          v110.i64[1] = v109.u32[1];
          v111 = v110;
          v112 = vmovl_u16(*(uint16x4_t *)v108.i8);
          v110.i64[0] = v112.u32[2];
          v110.i64[1] = v112.u32[3];
          v113 = v110;
          v114 = vmovl_u8(*(uint8x8_t *)v107.i8);
          v115 = vmovl_high_u16(v114);
          v110.i64[0] = v115.u32[2];
          v110.i64[1] = v115.u32[3];
          v116 = v110;
          v110.i64[0] = v109.u32[2];
          v110.i64[1] = v109.u32[3];
          v117 = v110;
          v110.i64[0] = v112.u32[0];
          v110.i64[1] = v112.u32[1];
          v118 = v110;
          v110.i64[0] = v115.u32[0];
          v110.i64[1] = v115.u32[1];
          v119 = v110;
          v120 = vmovl_u16(*(uint16x4_t *)v114.i8);
          v110.i64[0] = v120.u32[2];
          v110.i64[1] = v120.u32[3];
          v121 = v110;
          v110.i64[0] = v120.u32[0];
          v110.i64[1] = v120.u32[1];
          v122 = v110;
          v110.i64[0] = v96.u32[0];
          v110.i64[1] = v96.u32[1];
          v123 = v110;
          v110.i64[0] = a7.u32[2];
          v110.i64[1] = a7.u32[3];
          v124 = v110;
          v110.i64[0] = a8.u32[2];
          v110.i64[1] = a8.u32[3];
          v125 = v110;
          v110.i64[0] = v96.u32[2];
          v110.i64[1] = v96.u32[3];
          v126 = v110;
          v110.i64[0] = a7.u32[0];
          v110.i64[1] = a7.u32[1];
          v127 = v110;
          v110.i64[0] = a8.u32[0];
          v110.i64[1] = a8.u32[1];
          v128 = v110;
          v110.i64[0] = v97.u32[2];
          v110.i64[1] = v97.u32[3];
          v129 = v110;
          v110.i64[0] = v97.u32[0];
          v110.i64[1] = v97.u32[1];
          v105 = veorq_s8((int8x16_t)vshlq_u64(v111, v123), v105);
          v104 = veorq_s8((int8x16_t)vshlq_u64(v113, v124), v104);
          v102 = veorq_s8((int8x16_t)vshlq_u64(v116, v125), v102);
          v106 = veorq_s8((int8x16_t)vshlq_u64(v117, v126), v106);
          v103 = veorq_s8((int8x16_t)vshlq_u64(v118, v127), v103);
          v101 = veorq_s8((int8x16_t)vshlq_u64(v119, v128), v101);
          v95 = veorq_s8((int8x16_t)vshlq_u64(v121, v129), v95);
          v93 = veorq_s8((int8x16_t)vshlq_u64(v122, v110), v93);
          v97 = vaddq_s32(v97, v98);
          a8 = vaddq_s32(a8, v98);
          a7 = vaddq_s32(a7, v98);
          v96 = vaddq_s32(v96, v98);
          v100 -= 16;
        }
        while (v100);
        a6 = veorq_s8(v102, v106);
        v130 = veorq_s8(veorq_s8(veorq_s8(v93, v103), veorq_s8(v101, v105)), veorq_s8(veorq_s8(v95, v104), a6));
        a5 = (int8x8_t)vextq_s8(v130, v130, 8uLL).u64[0];
        a4 = COERCE_DOUBLE(veor_s8(*(int8x8_t *)v130.i8, a5));
        v45 = *(_QWORD *)&a4;
        if (v92 == v99)
        {
          v131 = v47 - 8 * v99 + 8;
LABEL_82:
          v44 = 48 - v131;
          v46 = v52;
          goto LABEL_83;
        }
      }
      else
      {
        v51 = 40 - v44;
        v52 = *(uint8x16_t **)(*(_QWORD *)&v28 + 13824);
      }
      v132 = v51;
      do
      {
        v133 = v52->u8[0];
        v52 = (uint8x16_t *)((char *)v52 + 1);
        v45 ^= (unint64_t)v133 << v132;
        v134 = v132 - 8;
        if (v132 < 8)
          break;
        v132 -= 8;
      }
      while ((unint64_t)v52 < v48);
      v131 = v134 + 8;
      goto LABEL_82;
    }
    v72 = v33->u16[0]
        - v33->u16[1]
        - *(unsigned __int16 *)(v32
                              + 32
                              * ((*(unsigned __int8 *)(*(_QWORD *)&a1[82] + v29 + 544) >> (4 - v9)) & 1 | (2 * ((v31 >> (4 - v9)) & 1)))
                              + 1260)
        + v33->u16[2];
    if (v9)
      v72 = v72 + v33->u16[7] - v33[1].u16[0];
    v73 = *(_DWORD *)(*(_QWORD *)&v28 + 13848);
    v74 = *(_QWORD *)(*(_QWORD *)&v28 + 13840);
    v75 = (((v73 >> 8) * (v72 >> 6)) >> 1) + 4;
    v76 = v75 << 48;
    v77 = v73 - 2 * v75;
    if (v74 >= v75 << 48)
      v78 = v75 << 48;
    else
      v78 = 0;
    if (v74 < v75 << 48)
      v77 = 0;
    v79 = v77 + v75;
    v80 = __clz(v79) ^ 0x10;
    v81 = *(_DWORD *)(*(_QWORD *)&v28 + 13852);
    v82 = v81 - v80;
    *(_DWORD *)(*(_QWORD *)&v28 + 13852) = v81 - v80;
    v83 = ((v74 - v78 + 1) << v80) - 1;
    *(_QWORD *)(*(_QWORD *)&v28 + 13840) = v83;
    *(_DWORD *)(*(_QWORD *)&v28 + 13848) = v79 << v80;
    if (((v81 - v80) & 0x80000000) == 0)
    {
LABEL_98:
      if (v74 >= v76 && *(_DWORD *)(*(_QWORD *)&v12 + 2056) == 2)
        return 1;
      if (v74 >= v76)
        goto LABEL_49;
LABEL_101:
      if (!decode_sb(a1, v9 + 1, *(_QWORD *)(a3 + 104)))
      {
        a1[3].i32[1] += v18;
        if (!decode_sb(a1, v9 + 1, *(_QWORD *)(a3 + 120)))
        {
          a1[3].i32[1] -= v18;
LABEL_106:
          v70 = 3;
          result = 0;
          if (v9 != 4)
            return result;
          goto LABEL_107;
        }
      }
      return 1;
    }
    v84 = *(uint8x16_t **)(*(_QWORD *)&v28 + 13824);
    v85 = 40 - v82;
    if ((int)(40 - v82) < 0 || (v86 = *(_QWORD *)(*(_QWORD *)&v28 + 13832), (unint64_t)v84 >= v86))
    {
LABEL_97:
      *(_QWORD *)(*(_QWORD *)&v28 + 13840) = v83;
      *(_DWORD *)(*(_QWORD *)&v28 + 13852) = v82;
      *(_QWORD *)(*(_QWORD *)&v28 + 13824) = v84;
      goto LABEL_98;
    }
    if (v85 >= 7)
      v87 = 7;
    else
      v87 = 40 - v82;
    v88 = (v80 - v81 - v87 + 47) >> 3;
    if (~(unint64_t)v84 + v86 < v88)
      v88 = ~(unint64_t)v84 + v86;
    if (v88 >= 0xF)
    {
      v136 = v88 + 1;
      v137 = (int8x16_t)(unint64_t)v83;
      v138 = vdupq_n_s32(v85);
      v139 = 0uLL;
      v140 = vaddq_s32(v138, (int32x4_t)xmmword_196889AA0);
      a7 = vaddq_s32(v138, (int32x4_t)xmmword_196889AB0);
      a8 = vaddq_s32(v138, (int32x4_t)xmmword_196889AC0);
      v141 = vaddq_s32(v138, (int32x4_t)xmmword_196889AD0);
      v142.i64[0] = 0x7F0000007FLL;
      v142.i64[1] = 0x7F0000007FLL;
      v143 = (v88 + 1) & 0x3FFFFFF0;
      v89 = v85 - 8 * v143;
      v90 = (uint8x16_t *)((char *)v84 + v143);
      v144 = v143;
      v145 = 0uLL;
      v146 = 0uLL;
      v147 = 0uLL;
      v148 = 0uLL;
      v149 = 0uLL;
      v150 = 0uLL;
      do
      {
        v151 = *v84++;
        v152 = vmovl_high_u8(v151);
        v153 = vmovl_high_u16(v152);
        v154.i64[0] = v153.u32[0];
        v154.i64[1] = v153.u32[1];
        v155 = v154;
        v156 = vmovl_u16(*(uint16x4_t *)v152.i8);
        v154.i64[0] = v156.u32[2];
        v154.i64[1] = v156.u32[3];
        v157 = v154;
        v158 = vmovl_u8(*(uint8x8_t *)v151.i8);
        v159 = vmovl_high_u16(v158);
        v154.i64[0] = v159.u32[2];
        v154.i64[1] = v159.u32[3];
        v160 = v154;
        v154.i64[0] = v153.u32[2];
        v154.i64[1] = v153.u32[3];
        v161 = v154;
        v154.i64[0] = v156.u32[0];
        v154.i64[1] = v156.u32[1];
        v162 = v154;
        v154.i64[0] = v159.u32[0];
        v154.i64[1] = v159.u32[1];
        v163 = v154;
        v164 = vmovl_u16(*(uint16x4_t *)v158.i8);
        v154.i64[0] = v164.u32[2];
        v154.i64[1] = v164.u32[3];
        v165 = v154;
        v154.i64[0] = v164.u32[0];
        v154.i64[1] = v164.u32[1];
        v166 = v154;
        v154.i64[0] = v140.u32[0];
        v154.i64[1] = v140.u32[1];
        v167 = v154;
        v154.i64[0] = a7.u32[2];
        v154.i64[1] = a7.u32[3];
        v168 = v154;
        v154.i64[0] = a8.u32[2];
        v154.i64[1] = a8.u32[3];
        v169 = v154;
        v154.i64[0] = v140.u32[2];
        v154.i64[1] = v140.u32[3];
        v170 = v154;
        v154.i64[0] = a7.u32[0];
        v154.i64[1] = a7.u32[1];
        v171 = v154;
        v154.i64[0] = a8.u32[0];
        v154.i64[1] = a8.u32[1];
        v172 = v154;
        v154.i64[0] = v141.u32[2];
        v154.i64[1] = v141.u32[3];
        v173 = v154;
        v154.i64[0] = v141.u32[0];
        v154.i64[1] = v141.u32[1];
        v149 = veorq_s8((int8x16_t)vshlq_u64(v155, v167), v149);
        v148 = veorq_s8((int8x16_t)vshlq_u64(v157, v168), v148);
        v146 = veorq_s8((int8x16_t)vshlq_u64(v160, v169), v146);
        v150 = veorq_s8((int8x16_t)vshlq_u64(v161, v170), v150);
        v147 = veorq_s8((int8x16_t)vshlq_u64(v162, v171), v147);
        v145 = veorq_s8((int8x16_t)vshlq_u64(v163, v172), v145);
        v139 = veorq_s8((int8x16_t)vshlq_u64(v165, v173), v139);
        v137 = veorq_s8((int8x16_t)vshlq_u64(v166, v154), v137);
        v141 = vaddq_s32(v141, v142);
        a8 = vaddq_s32(a8, v142);
        a7 = vaddq_s32(a7, v142);
        v140 = vaddq_s32(v140, v142);
        v144 -= 16;
      }
      while (v144);
      a6 = veorq_s8(v146, v150);
      v174 = veorq_s8(veorq_s8(veorq_s8(v137, v147), veorq_s8(v145, v149)), veorq_s8(veorq_s8(v139, v148), a6));
      a5 = (int8x8_t)vextq_s8(v174, v174, 8uLL).u64[0];
      a4 = COERCE_DOUBLE(veor_s8(*(int8x8_t *)v174.i8, a5));
      v83 = *(_QWORD *)&a4;
      if (v136 == v143)
      {
        v175 = v85 - 8 * v143 + 8;
LABEL_96:
        v82 = 48 - v175;
        v84 = v90;
        goto LABEL_97;
      }
    }
    else
    {
      v89 = 40 - v82;
      v90 = *(uint8x16_t **)(*(_QWORD *)&v28 + 13824);
    }
    v176 = v89;
    do
    {
      v177 = v90->u8[0];
      v90 = (uint8x16_t *)((char *)v90 + 1);
      v83 ^= (unint64_t)v177 << v176;
      v178 = v176 - 8;
      if (v176 < 8)
        break;
      v176 -= 8;
    }
    while ((unint64_t)v90 < v86);
    v175 = v178 + 8;
    goto LABEL_96;
  }
  if (v22 && v21)
  {
    v25 = *(_QWORD *)(*(_QWORD *)&v12 + 4192);
    v26 = v16 + *(_QWORD *)(*(_QWORD *)&v12 + 3264) * (int)v15;
    if (v9 == *(unsigned __int8 *)(v25 + 32 * v26))
    {
      v27 = *(unsigned __int8 *)(v25 + 32 * v26 + 2);
      goto LABEL_18;
    }
    LODWORD(v30) = 0;
    LODWORD(v29) = 0;
    if (v9 == 4)
    {
      if (!decode_b((uint64_t)a1, 4, 21, 3, *(_DWORD *)(a3 + 20), a4, *(double *)&a5, *(double *)a6.i64, *(double *)a7.i64, (int8x16_t)a8))
      {
        v58 = v11->i32[0];
        ++a1[3].i32[0];
        if (!decode_b((uint64_t)a1, 4, 21, 3, *(_DWORD *)(a3 + 24), v53, v54, v55, v56, v57))
        {
          v62 = COERCE_DOUBLE(vadd_s32(a1[3], (int32x2_t)0x1FFFFFFFFLL));
          *(double *)&a1[3] = v62;
          if (!decode_b((uint64_t)a1, 4, 21, 3, *(_DWORD *)(a3 + 28), v62, COERCE_DOUBLE(0x1FFFFFFFFLL), v59, v60, v61))
          {
            ++a1[3].i32[0];
            v11->i32[0] = v58;
            if (!decode_b((uint64_t)a1, 4, 21, 3, *(_DWORD *)(a3 + 32), v63, v64, v65, v66, v67))
            {
              v68 = vadd_s32(a1[3], (int32x2_t)-1);
LABEL_73:
              a1[3] = v68;
              goto LABEL_106;
            }
          }
        }
      }
      return 0xFFFFFFFFLL;
    }
    if (!decode_sb(a1, v9 + 1, *(_QWORD *)(a3 + 104)))
    {
      a1[3].i32[0] += v18;
      if (!decode_sb(a1, v9 + 1, *(_QWORD *)(a3 + 112)))
      {
        v91 = a1[3].i32[1] + v18;
        a1[3].i32[0] -= v18;
        a1[3].i32[1] = v91;
        if (!decode_sb(a1, v9 + 1, *(_QWORD *)(a3 + 120)))
        {
          a1[3].i32[0] += v18;
          if (!decode_sb(a1, v9 + 1, *(_QWORD *)(a3 + 128)))
          {
            v68 = vsub_s32(a1[3], vdup_n_s32(v18));
            goto LABEL_73;
          }
        }
      }
    }
    return 1;
  }
  LODWORD(v29) = 0;
  LODWORD(v30) = 0;
  if (v22)
  {
    if (v9 != *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v12 + 4192)
                                  + 32 * ((int)v14 + *(_QWORD *)(*(_QWORD *)&v12 + 3264) * (int)v15)))
    {
LABEL_21:
      if (!decode_sb(a1, v9 + 1, *(_QWORD *)(a3 + 104)))
      {
        a1[3].i32[0] += v18;
        if (!decode_sb(a1, v9 + 1, *(_QWORD *)(a3 + 112)))
        {
          a1[3].i32[0] -= v18;
          goto LABEL_106;
        }
      }
      return 1;
    }
    goto LABEL_85;
  }
  if (v9 != *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v12 + 4192)
                                + 32 * (*(_QWORD *)(*(_QWORD *)&v12 + 3264) * (int)v15 + (int)v14)))
    goto LABEL_101;
LABEL_49:
  v69 = *(_DWORD *)(a3 + 12);
  v70 = 2;
  if (decode_b((uint64_t)a1, v9, dav1d_block_sizes[20 * v9 + 4], 2, v69, a4, *(double *)&a5, *(double *)a6.i64, *(double *)a7.i64, (int8x16_t)a8))return 0xFFFFFFFFLL;
  result = 0;
LABEL_107:
  if (v11->i32[1] != 2)
  {
    result = 0;
    switch(v18)
    {
      case 1u:
        result = 0;
        v179 = (char *)&dav1d_al_part_ctx + 10 * v9 + v70;
        *(_BYTE *)(*(_QWORD *)&a1[82] + v29 + 544) = *v179;
        a1[72].i8[v30] = v179[50];
        break;
      case 2u:
        result = 0;
        v180 = (unsigned __int8 *)&dav1d_al_part_ctx + 10 * v9 + v70;
        *(_WORD *)(*(_QWORD *)&a1[82] + v29 + 544) = *v180 | (*v180 << 8);
        *(__int16 *)((char *)a1[72].i16 + v30) = v180[50] | (v180[50] << 8);
        break;
      case 4u:
        result = 0;
        v181 = (unsigned __int8 *)&dav1d_al_part_ctx + 10 * v9 + v70;
        *(_DWORD *)(*(_QWORD *)&a1[82] + v29 + 544) = 16843009 * *v181;
        *(__int32 *)((char *)a1[72].i32 + v30) = 16843009 * v181[50];
        break;
      case 8u:
        result = 0;
        v182 = (unsigned __int8 *)&dav1d_al_part_ctx + 10 * v9 + v70;
        *(_QWORD *)(*(_QWORD *)&a1[82] + v29 + 544) = 0x101010101010101 * *v182;
        *(int32x2_t *)((char *)&a1[72] + v30) = (int32x2_t)(0x101010101010101 * v182[50]);
        break;
      case 0x10u:
        result = 0;
        v183 = (unsigned __int8 *)&dav1d_al_part_ctx + 10 * v9 + v70;
        v184 = 0x101010101010101 * *v183;
        *(_QWORD *)(*(_QWORD *)&a1[82] + v29 + 544) = v184;
        *(_QWORD *)(*(_QWORD *)&a1[82] + (v29 + 8) + 544) = v184;
        *(int64x2_t *)&a1[72].i8[v30] = vdupq_n_s64(0x101010101010101 * (unint64_t)v183[50]);
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t read_restoration_info(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned __int8 **v7;
  uint64_t result;
  char v9;
  char v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  uint8x16_t *v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  uint8x16_t *v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  int8x16_t v35;
  int32x4_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint32x4_t v53;
  uint64x2_t v54;
  uint64x2_t v55;
  uint32x4_t v56;
  uint64x2_t v57;
  uint16x8_t v58;
  uint32x4_t v59;
  uint64x2_t v60;
  uint64x2_t v61;
  uint64x2_t v62;
  uint64x2_t v63;
  uint32x4_t v64;
  uint64x2_t v65;
  uint64x2_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  uint64x2_t v69;
  uint64x2_t v70;
  uint64x2_t v71;
  uint64x2_t v72;
  uint64x2_t v73;
  int8x16_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unint64_t v86;
  unsigned int v87;
  uint8x16_t *v88;
  unsigned int v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  unsigned int v93;
  uint8x16_t *v94;
  unint64_t v95;
  int8x16_t v96;
  int32x4_t v97;
  int8x16_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint8x16_t v112;
  uint16x8_t v113;
  uint32x4_t v114;
  uint64x2_t v115;
  uint64x2_t v116;
  uint32x4_t v117;
  uint64x2_t v118;
  uint16x8_t v119;
  uint32x4_t v120;
  uint64x2_t v121;
  uint64x2_t v122;
  uint64x2_t v123;
  uint64x2_t v124;
  uint32x4_t v125;
  uint64x2_t v126;
  uint64x2_t v127;
  uint64x2_t v128;
  uint64x2_t v129;
  uint64x2_t v130;
  uint64x2_t v131;
  uint64x2_t v132;
  uint64x2_t v133;
  uint64x2_t v134;
  int8x16_t v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  unint64_t v149;
  unsigned int v150;
  uint8x16_t *v151;
  unsigned int v152;
  unint64_t v153;
  int v154;
  unint64_t v155;
  uint8x16_t *v156;
  unint64_t v157;
  int8x16_t v158;
  int32x4_t v159;
  int8x16_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  uint64_t v166;
  uint64_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  uint8x16_t v174;
  uint16x8_t v175;
  uint32x4_t v176;
  uint64x2_t v177;
  uint64x2_t v178;
  uint32x4_t v179;
  uint64x2_t v180;
  uint16x8_t v181;
  uint32x4_t v182;
  uint64x2_t v183;
  uint64x2_t v184;
  uint64x2_t v185;
  uint64x2_t v186;
  uint32x4_t v187;
  uint64x2_t v188;
  uint64x2_t v189;
  uint64x2_t v190;
  uint64x2_t v191;
  uint64x2_t v192;
  uint64x2_t v193;
  uint64x2_t v194;
  uint64x2_t v195;
  uint64x2_t v196;
  int8x16_t v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  int v202;
  uint64_t v203;
  unint64_t v204;
  int v205;
  uint64_t v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  uint8x16_t *v211;
  unsigned int v212;
  unint64_t v213;
  unint64_t v214;
  unsigned int v215;
  uint8x16_t *v216;
  unint64_t v217;
  int8x16_t v218;
  int32x4_t v219;
  int8x16_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  uint64_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  uint8x16_t v233;
  uint16x8_t v234;
  uint32x4_t v235;
  uint64x2_t v236;
  uint64x2_t v237;
  uint32x4_t v238;
  uint64x2_t v239;
  uint16x8_t v240;
  uint32x4_t v241;
  uint64x2_t v242;
  uint64x2_t v243;
  uint64x2_t v244;
  uint64x2_t v245;
  uint32x4_t v246;
  uint64x2_t v247;
  uint64x2_t v248;
  uint64x2_t v249;
  uint64x2_t v250;
  uint64x2_t v251;
  uint64x2_t v252;
  uint64x2_t v253;
  uint64x2_t v254;
  uint64x2_t v255;
  int8x16_t v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  __int16 *v262;
  __int16 v263;
  char v264;
  uint64_t v265;
  uint64_t v266;
  __int16 v267;
  uint64_t v268;
  __int16 v269;

  v7 = (unsigned __int8 **)(a1 + 13824);
  if (a4 == 1)
  {
    result = (uint64_t)dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(a1 + 13824), (int16x8_t *)(a1 + 5376), 2uLL);
    if ((_DWORD)result == 2)
      v9 = 3;
    else
      v9 = 2;
    if ((_DWORD)result)
      goto LABEL_6;
LABEL_14:
    *(_BYTE *)a2 = 0;
    return result;
  }
  v9 = a4;
  if (a4 == 2)
    v11 = (unsigned __int16 *)(a1 + 5384);
  else
    v11 = (unsigned __int16 *)(a1 + 5388);
  result = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(a1 + 13824), v11);
  if (!(_DWORD)result)
    goto LABEL_14;
LABEL_6:
  *(_BYTE *)a2 = v9;
  if (v9 != 3)
  {
    if (v9 == 2)
    {
      if (a3)
        v10 = 0;
      else
        v10 = dav1d_msac_decode_subexp(v7, *(char *)(*(_QWORD *)(a1 + 14568) + 4) + 5, 16, 1) - 5;
      *(_BYTE *)(a2 + 4) = v10;
      v32 = a1 + 8 * a3 + 14568;
      *(_BYTE *)(a2 + 5) = dav1d_msac_decode_subexp(v7, *(char *)(*(_QWORD *)v32 + 5) + 23, 32, 2) - 23;
      *(_BYTE *)(a2 + 6) = dav1d_msac_decode_subexp(v7, *(char *)(*(_QWORD *)v32 + 6) + 17, 64, 3) - 17;
      if (a3)
        v33 = 0;
      else
        v33 = dav1d_msac_decode_subexp(v7, *(char *)(*(_QWORD *)v32 + 1) + 5, 16, 1) - 5;
      *(_BYTE *)(a2 + 1) = v33;
      *(_BYTE *)(a2 + 2) = dav1d_msac_decode_subexp(v7, *(char *)(*(_QWORD *)v32 + 2) + 23, 32, 2) - 23;
      result = dav1d_msac_decode_subexp(v7, *(char *)(*(_QWORD *)v32 + 3) + 17, 64, 3);
      *(_BYTE *)(a2 + 3) = result - 17;
      *(_WORD *)(a2 + 8) = *(_WORD *)(*(_QWORD *)v32 + 8);
      *(_QWORD *)v32 = a2;
    }
    return result;
  }
  v12 = *(unsigned int *)(a1 + 13848);
  v13 = *(_QWORD *)(a1 + 13840);
  v14 = (v12 >> 1) & 0x7FFFFF80 | 4;
  v15 = v14 << 48;
  v16 = v12 - 2 * v14;
  if (v13 >= v14 << 48)
    v17 = v14 << 48;
  else
    v17 = 0;
  if (v13 < v14 << 48)
    v16 = 0;
  v18 = v16 + v14;
  v19 = __clz(v18);
  v20 = v19 ^ 0x10;
  v21 = *(_DWORD *)(a1 + 13852);
  v22 = v21 - (v19 ^ 0x10);
  *(_DWORD *)(a1 + 13852) = v22;
  v23 = ((v13 - v17 + 1) << (v19 ^ 0x10)) - 1;
  *(_QWORD *)(a1 + 13840) = v23;
  v24 = v18 << v20;
  *(_DWORD *)(a1 + 13848) = v24;
  if ((v22 & 0x80000000) != 0)
  {
    v25 = *(uint8x16_t **)(a1 + 13824);
    v26 = 40 - v22;
    if ((int)(40 - v22) < 0)
      goto LABEL_44;
    v27 = *(_QWORD *)(a1 + 13832);
    if ((unint64_t)v25 >= v27)
      goto LABEL_44;
    if (v26 >= 7)
      v28 = 7;
    else
      v28 = 40 - v22;
    v29 = (v20 - v21 - v28 + 47) >> 3;
    if (~(unint64_t)v25 + v27 < v29)
      v29 = ~(unint64_t)v25 + v27;
    if (v29 >= 0xF)
    {
      v34 = v29 + 1;
      v35 = (int8x16_t)v23;
      v36 = vdupq_n_s32(v26);
      v37 = 0uLL;
      v38 = vaddq_s32(v36, (int32x4_t)xmmword_196889AA0);
      v39 = vaddq_s32(v36, (int32x4_t)xmmword_196889AB0);
      v40 = vaddq_s32(v36, (int32x4_t)xmmword_196889AC0);
      v41 = vaddq_s32(v36, (int32x4_t)xmmword_196889AD0);
      v42.i64[0] = 0x7F0000007FLL;
      v42.i64[1] = 0x7F0000007FLL;
      v43 = (v29 + 1) & 0x3FFFFFF0;
      v30 = v26 - 8 * v43;
      v31 = (uint8x16_t *)((char *)v25 + v43);
      v44 = v43;
      v45 = 0uLL;
      v46 = 0uLL;
      v47 = 0uLL;
      v48 = 0uLL;
      v49 = 0uLL;
      v50 = 0uLL;
      do
      {
        v51 = *v25++;
        v52 = vmovl_high_u8(v51);
        v53 = vmovl_high_u16(v52);
        v54.i64[0] = v53.u32[0];
        v54.i64[1] = v53.u32[1];
        v55 = v54;
        v56 = vmovl_u16(*(uint16x4_t *)v52.i8);
        v54.i64[0] = v56.u32[2];
        v54.i64[1] = v56.u32[3];
        v57 = v54;
        v58 = vmovl_u8(*(uint8x8_t *)v51.i8);
        v59 = vmovl_high_u16(v58);
        v54.i64[0] = v59.u32[2];
        v54.i64[1] = v59.u32[3];
        v60 = v54;
        v54.i64[0] = v53.u32[2];
        v54.i64[1] = v53.u32[3];
        v61 = v54;
        v54.i64[0] = v56.u32[0];
        v54.i64[1] = v56.u32[1];
        v62 = v54;
        v54.i64[0] = v59.u32[0];
        v54.i64[1] = v59.u32[1];
        v63 = v54;
        v64 = vmovl_u16(*(uint16x4_t *)v58.i8);
        v54.i64[0] = v64.u32[2];
        v54.i64[1] = v64.u32[3];
        v65 = v54;
        v54.i64[0] = v64.u32[0];
        v54.i64[1] = v64.u32[1];
        v66 = v54;
        v54.i64[0] = v38.u32[0];
        v54.i64[1] = v38.u32[1];
        v67 = v54;
        v54.i64[0] = v39.u32[2];
        v54.i64[1] = v39.u32[3];
        v68 = v54;
        v54.i64[0] = v40.u32[2];
        v54.i64[1] = v40.u32[3];
        v69 = v54;
        v54.i64[0] = v38.u32[2];
        v54.i64[1] = v38.u32[3];
        v70 = v54;
        v54.i64[0] = v39.u32[0];
        v54.i64[1] = v39.u32[1];
        v71 = v54;
        v54.i64[0] = v40.u32[0];
        v54.i64[1] = v40.u32[1];
        v72 = v54;
        v54.i64[0] = v41.u32[2];
        v54.i64[1] = v41.u32[3];
        v73 = v54;
        v54.i64[0] = v41.u32[0];
        v54.i64[1] = v41.u32[1];
        v49 = veorq_s8((int8x16_t)vshlq_u64(v55, v67), v49);
        v48 = veorq_s8((int8x16_t)vshlq_u64(v57, v68), v48);
        v46 = veorq_s8((int8x16_t)vshlq_u64(v60, v69), v46);
        v50 = veorq_s8((int8x16_t)vshlq_u64(v61, v70), v50);
        v47 = veorq_s8((int8x16_t)vshlq_u64(v62, v71), v47);
        v45 = veorq_s8((int8x16_t)vshlq_u64(v63, v72), v45);
        v37 = veorq_s8((int8x16_t)vshlq_u64(v65, v73), v37);
        v35 = veorq_s8((int8x16_t)vshlq_u64(v66, v54), v35);
        v41 = vaddq_s32(v41, v42);
        v40 = vaddq_s32(v40, v42);
        v39 = vaddq_s32(v39, v42);
        v38 = vaddq_s32(v38, v42);
        v44 -= 16;
      }
      while (v44);
      v74 = veorq_s8(veorq_s8(veorq_s8(v35, v47), veorq_s8(v45, v49)), veorq_s8(veorq_s8(v37, v48), veorq_s8(v46, v50)));
      v23 = (unint64_t)veor_s8(*(int8x8_t *)v74.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
      if (v34 == v43)
      {
        v75 = v26 - 8 * v43 + 8;
LABEL_43:
        v22 = 48 - v75;
        v25 = v31;
LABEL_44:
        *v7 = (unsigned __int8 *)v25;
        goto LABEL_45;
      }
    }
    else
    {
      v30 = 40 - v22;
      v31 = *(uint8x16_t **)(a1 + 13824);
    }
    v76 = v30;
    do
    {
      v77 = v31->u8[0];
      v31 = (uint8x16_t *)((char *)v31 + 1);
      v23 ^= (unint64_t)v77 << v76;
      v78 = v76 - 8;
      if (v76 < 8)
        break;
      v76 -= 8;
    }
    while ((unint64_t)v31 < v27);
    v75 = v78 + 8;
    goto LABEL_43;
  }
LABEL_45:
  v79 = (v24 >> 1) & 0x7FFFFF80 | 4;
  v80 = v79 << 48;
  v81 = v24 - 2 * v79;
  if (v23 >= v79 << 48)
    v82 = v79 << 48;
  else
    v82 = 0;
  if (v23 < v79 << 48)
    v81 = 0;
  v83 = v81 + v79;
  v84 = __clz(v83);
  v85 = v84 ^ 0x10;
  result = v22 - (v84 ^ 0x10);
  *(_DWORD *)(a1 + 13852) = result;
  v86 = ((v23 - v82 + 1) << (v84 ^ 0x10)) - 1;
  *(_QWORD *)(a1 + 13840) = v86;
  v87 = v83 << v85;
  *(_DWORD *)(a1 + 13848) = v87;
  if ((result & 0x80000000) != 0)
  {
    v88 = *(uint8x16_t **)(a1 + 13824);
    v89 = 40 - result;
    if (40 - (int)result < 0)
      goto LABEL_69;
    v90 = *(_QWORD *)(a1 + 13832);
    if ((unint64_t)v88 >= v90)
      goto LABEL_69;
    if (v89 >= 7)
      v91 = 7;
    else
      v91 = 40 - result;
    v92 = (v85 - v22 - v91 + 47) >> 3;
    if (~(unint64_t)v88 + v90 < v92)
      v92 = ~(unint64_t)v88 + v90;
    if (v92 >= 0xF)
    {
      v95 = v92 + 1;
      v96 = (int8x16_t)v86;
      v97 = vdupq_n_s32(v89);
      v98 = 0uLL;
      v99 = vaddq_s32(v97, (int32x4_t)xmmword_196889AA0);
      v100 = vaddq_s32(v97, (int32x4_t)xmmword_196889AB0);
      v101 = vaddq_s32(v97, (int32x4_t)xmmword_196889AC0);
      v102 = vaddq_s32(v97, (int32x4_t)xmmword_196889AD0);
      v103.i64[0] = 0x7F0000007FLL;
      v103.i64[1] = 0x7F0000007FLL;
      v104 = (v92 + 1) & 0x3FFFFFF0;
      v93 = v89 - 8 * v104;
      v94 = (uint8x16_t *)((char *)v88 + v104);
      v105 = v104;
      v106 = 0uLL;
      v107 = 0uLL;
      v108 = 0uLL;
      v109 = 0uLL;
      v110 = 0uLL;
      v111 = 0uLL;
      do
      {
        v112 = *v88++;
        v113 = vmovl_high_u8(v112);
        v114 = vmovl_high_u16(v113);
        v115.i64[0] = v114.u32[0];
        v115.i64[1] = v114.u32[1];
        v116 = v115;
        v117 = vmovl_u16(*(uint16x4_t *)v113.i8);
        v115.i64[0] = v117.u32[2];
        v115.i64[1] = v117.u32[3];
        v118 = v115;
        v119 = vmovl_u8(*(uint8x8_t *)v112.i8);
        v120 = vmovl_high_u16(v119);
        v115.i64[0] = v120.u32[2];
        v115.i64[1] = v120.u32[3];
        v121 = v115;
        v115.i64[0] = v114.u32[2];
        v115.i64[1] = v114.u32[3];
        v122 = v115;
        v115.i64[0] = v117.u32[0];
        v115.i64[1] = v117.u32[1];
        v123 = v115;
        v115.i64[0] = v120.u32[0];
        v115.i64[1] = v120.u32[1];
        v124 = v115;
        v125 = vmovl_u16(*(uint16x4_t *)v119.i8);
        v115.i64[0] = v125.u32[2];
        v115.i64[1] = v125.u32[3];
        v126 = v115;
        v115.i64[0] = v125.u32[0];
        v115.i64[1] = v125.u32[1];
        v127 = v115;
        v115.i64[0] = v99.u32[0];
        v115.i64[1] = v99.u32[1];
        v128 = v115;
        v115.i64[0] = v100.u32[2];
        v115.i64[1] = v100.u32[3];
        v129 = v115;
        v115.i64[0] = v101.u32[2];
        v115.i64[1] = v101.u32[3];
        v130 = v115;
        v115.i64[0] = v99.u32[2];
        v115.i64[1] = v99.u32[3];
        v131 = v115;
        v115.i64[0] = v100.u32[0];
        v115.i64[1] = v100.u32[1];
        v132 = v115;
        v115.i64[0] = v101.u32[0];
        v115.i64[1] = v101.u32[1];
        v133 = v115;
        v115.i64[0] = v102.u32[2];
        v115.i64[1] = v102.u32[3];
        v134 = v115;
        v115.i64[0] = v102.u32[0];
        v115.i64[1] = v102.u32[1];
        v110 = veorq_s8((int8x16_t)vshlq_u64(v116, v128), v110);
        v109 = veorq_s8((int8x16_t)vshlq_u64(v118, v129), v109);
        v107 = veorq_s8((int8x16_t)vshlq_u64(v121, v130), v107);
        v111 = veorq_s8((int8x16_t)vshlq_u64(v122, v131), v111);
        v108 = veorq_s8((int8x16_t)vshlq_u64(v123, v132), v108);
        v106 = veorq_s8((int8x16_t)vshlq_u64(v124, v133), v106);
        v98 = veorq_s8((int8x16_t)vshlq_u64(v126, v134), v98);
        v96 = veorq_s8((int8x16_t)vshlq_u64(v127, v115), v96);
        v102 = vaddq_s32(v102, v103);
        v101 = vaddq_s32(v101, v103);
        v100 = vaddq_s32(v100, v103);
        v99 = vaddq_s32(v99, v103);
        v105 -= 16;
      }
      while (v105);
      v135 = veorq_s8(veorq_s8(veorq_s8(v96, v108), veorq_s8(v106, v110)), veorq_s8(veorq_s8(v98, v109), veorq_s8(v107, v111)));
      v86 = (unint64_t)veor_s8(*(int8x8_t *)v135.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL));
      if (v95 == v104)
      {
        v136 = v89 - 8 * v104 + 8;
LABEL_68:
        result = 48 - v136;
        v88 = v94;
LABEL_69:
        *v7 = (unsigned __int8 *)v88;
        goto LABEL_70;
      }
    }
    else
    {
      v93 = 40 - result;
      v94 = *(uint8x16_t **)(a1 + 13824);
    }
    v137 = v93;
    do
    {
      v138 = v94->u8[0];
      v94 = (uint8x16_t *)((char *)v94 + 1);
      v86 ^= (unint64_t)v138 << v137;
      v139 = v137 - 8;
      if (v137 < 8)
        break;
      v137 -= 8;
    }
    while ((unint64_t)v94 < v90);
    v136 = v139 + 8;
    goto LABEL_68;
  }
LABEL_70:
  v140 = (2 * (v23 < v80)) | (4 * (v13 < v15));
  v141 = (v87 >> 1) & 0x7FFFFF80 | 4;
  v142 = v141 << 48;
  v143 = v87 - 2 * v141;
  if (v86 >= v141 << 48)
    v144 = v141 << 48;
  else
    v144 = 0;
  if (v86 < v141 << 48)
    v143 = 0;
  v145 = v143 + v141;
  v146 = __clz(v145);
  v147 = v146 ^ 0x10;
  v148 = result - (v146 ^ 0x10);
  *(_DWORD *)(a1 + 13852) = v148;
  v149 = ((v86 - v144 + 1) << (v146 ^ 0x10)) - 1;
  *(_QWORD *)(a1 + 13840) = v149;
  v150 = v145 << v147;
  *(_DWORD *)(a1 + 13848) = v150;
  if ((v148 & 0x80000000) != 0)
  {
    v151 = *(uint8x16_t **)(a1 + 13824);
    v152 = 40 - v148;
    if ((int)(40 - v148) < 0)
      goto LABEL_94;
    v153 = *(_QWORD *)(a1 + 13832);
    if ((unint64_t)v151 >= v153)
      goto LABEL_94;
    if (v152 >= 7)
      v154 = 7;
    else
      v154 = 40 - v148;
    v155 = (v147 - result - v154 + 47) >> 3;
    if (~(unint64_t)v151 + v153 < v155)
      v155 = ~(unint64_t)v151 + v153;
    if (v155 >= 0xF)
    {
      v157 = v155 + 1;
      v158 = (int8x16_t)v149;
      v159 = vdupq_n_s32(v152);
      v160 = 0uLL;
      v161 = vaddq_s32(v159, (int32x4_t)xmmword_196889AA0);
      v162 = vaddq_s32(v159, (int32x4_t)xmmword_196889AB0);
      v163 = vaddq_s32(v159, (int32x4_t)xmmword_196889AC0);
      v164 = vaddq_s32(v159, (int32x4_t)xmmword_196889AD0);
      v165.i64[0] = 0x7F0000007FLL;
      v165.i64[1] = 0x7F0000007FLL;
      v166 = (v155 + 1) & 0x3FFFFFF0;
      result = v152 - 8 * (_DWORD)v166;
      v156 = (uint8x16_t *)((char *)v151 + v166);
      v167 = v166;
      v168 = 0uLL;
      v169 = 0uLL;
      v170 = 0uLL;
      v171 = 0uLL;
      v172 = 0uLL;
      v173 = 0uLL;
      do
      {
        v174 = *v151++;
        v175 = vmovl_high_u8(v174);
        v176 = vmovl_high_u16(v175);
        v177.i64[0] = v176.u32[0];
        v177.i64[1] = v176.u32[1];
        v178 = v177;
        v179 = vmovl_u16(*(uint16x4_t *)v175.i8);
        v177.i64[0] = v179.u32[2];
        v177.i64[1] = v179.u32[3];
        v180 = v177;
        v181 = vmovl_u8(*(uint8x8_t *)v174.i8);
        v182 = vmovl_high_u16(v181);
        v177.i64[0] = v182.u32[2];
        v177.i64[1] = v182.u32[3];
        v183 = v177;
        v177.i64[0] = v176.u32[2];
        v177.i64[1] = v176.u32[3];
        v184 = v177;
        v177.i64[0] = v179.u32[0];
        v177.i64[1] = v179.u32[1];
        v185 = v177;
        v177.i64[0] = v182.u32[0];
        v177.i64[1] = v182.u32[1];
        v186 = v177;
        v187 = vmovl_u16(*(uint16x4_t *)v181.i8);
        v177.i64[0] = v187.u32[2];
        v177.i64[1] = v187.u32[3];
        v188 = v177;
        v177.i64[0] = v187.u32[0];
        v177.i64[1] = v187.u32[1];
        v189 = v177;
        v177.i64[0] = v161.u32[0];
        v177.i64[1] = v161.u32[1];
        v190 = v177;
        v177.i64[0] = v162.u32[2];
        v177.i64[1] = v162.u32[3];
        v191 = v177;
        v177.i64[0] = v163.u32[2];
        v177.i64[1] = v163.u32[3];
        v192 = v177;
        v177.i64[0] = v161.u32[2];
        v177.i64[1] = v161.u32[3];
        v193 = v177;
        v177.i64[0] = v162.u32[0];
        v177.i64[1] = v162.u32[1];
        v194 = v177;
        v177.i64[0] = v163.u32[0];
        v177.i64[1] = v163.u32[1];
        v195 = v177;
        v177.i64[0] = v164.u32[2];
        v177.i64[1] = v164.u32[3];
        v196 = v177;
        v177.i64[0] = v164.u32[0];
        v177.i64[1] = v164.u32[1];
        v172 = veorq_s8((int8x16_t)vshlq_u64(v178, v190), v172);
        v171 = veorq_s8((int8x16_t)vshlq_u64(v180, v191), v171);
        v169 = veorq_s8((int8x16_t)vshlq_u64(v183, v192), v169);
        v173 = veorq_s8((int8x16_t)vshlq_u64(v184, v193), v173);
        v170 = veorq_s8((int8x16_t)vshlq_u64(v185, v194), v170);
        v168 = veorq_s8((int8x16_t)vshlq_u64(v186, v195), v168);
        v160 = veorq_s8((int8x16_t)vshlq_u64(v188, v196), v160);
        v158 = veorq_s8((int8x16_t)vshlq_u64(v189, v177), v158);
        v164 = vaddq_s32(v164, v165);
        v163 = vaddq_s32(v163, v165);
        v162 = vaddq_s32(v162, v165);
        v161 = vaddq_s32(v161, v165);
        v167 -= 16;
      }
      while (v167);
      v197 = veorq_s8(veorq_s8(veorq_s8(v158, v170), veorq_s8(v168, v172)), veorq_s8(veorq_s8(v160, v171), veorq_s8(v169, v173)));
      v149 = (unint64_t)veor_s8(*(int8x8_t *)v197.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v197, v197, 8uLL));
      if (v157 == v166)
      {
        v198 = v152 - 8 * v166 + 8;
LABEL_93:
        v148 = 48 - v198;
        v151 = v156;
LABEL_94:
        *v7 = (unsigned __int8 *)v151;
        goto LABEL_95;
      }
    }
    else
    {
      result = 40 - v148;
      v156 = *(uint8x16_t **)(a1 + 13824);
    }
    v199 = result;
    do
    {
      v200 = v156->u8[0];
      v156 = (uint8x16_t *)((char *)v156 + 1);
      v149 ^= (unint64_t)v200 << v199;
      v201 = v199 - 8;
      if (v199 < 8)
        break;
      v199 -= 8;
    }
    while ((unint64_t)v156 < v153);
    v198 = v201 + 8;
    goto LABEL_93;
  }
LABEL_95:
  v202 = 2 * (v140 | (v86 < v142));
  v203 = (v150 >> 1) & 0x7FFFFF80 | 4;
  v204 = v203 << 48;
  v205 = v150 - 2 * v203;
  if (v149 >= v203 << 48)
    v206 = v203 << 48;
  else
    v206 = 0;
  if (v149 < v203 << 48)
    v205 = 0;
  v207 = v205 + v203;
  v208 = __clz(v207) ^ 0x10;
  v209 = v148 - v208;
  *(_DWORD *)(a1 + 13852) = v148 - v208;
  v210 = ((v149 - v206 + 1) << v208) - 1;
  *(_QWORD *)(a1 + 13840) = v210;
  *(_DWORD *)(a1 + 13848) = v207 << v208;
  if (((v148 - v208) & 0x80000000) == 0)
    goto LABEL_120;
  v211 = *(uint8x16_t **)(a1 + 13824);
  v212 = 40 - v209;
  if ((int)(40 - v209) >= 0)
  {
    v213 = *(_QWORD *)(a1 + 13832);
    if ((unint64_t)v211 < v213)
    {
      if (v212 >= 7)
        result = 7;
      else
        result = v212;
      v214 = (v208 - v148 - result + 47) >> 3;
      if (~(unint64_t)v211 + v213 < v214)
        v214 = ~(unint64_t)v211 + v213;
      if (v214 >= 0xF)
      {
        v217 = v214 + 1;
        v218 = (int8x16_t)(unint64_t)v210;
        v219 = vdupq_n_s32(v212);
        v220 = 0uLL;
        v221 = vaddq_s32(v219, (int32x4_t)xmmword_196889AA0);
        v222 = vaddq_s32(v219, (int32x4_t)xmmword_196889AB0);
        v223 = vaddq_s32(v219, (int32x4_t)xmmword_196889AC0);
        v224 = vaddq_s32(v219, (int32x4_t)xmmword_196889AD0);
        v225.i64[0] = 0x7F0000007FLL;
        v225.i64[1] = 0x7F0000007FLL;
        result = (v214 + 1) & 0x3FFFFFF0;
        v215 = v212 - 8 * result;
        v216 = (uint8x16_t *)((char *)v211 + result);
        v226 = result;
        v227 = 0uLL;
        v228 = 0uLL;
        v229 = 0uLL;
        v230 = 0uLL;
        v231 = 0uLL;
        v232 = 0uLL;
        do
        {
          v233 = *v211++;
          v234 = vmovl_high_u8(v233);
          v235 = vmovl_high_u16(v234);
          v236.i64[0] = v235.u32[0];
          v236.i64[1] = v235.u32[1];
          v237 = v236;
          v238 = vmovl_u16(*(uint16x4_t *)v234.i8);
          v236.i64[0] = v238.u32[2];
          v236.i64[1] = v238.u32[3];
          v239 = v236;
          v240 = vmovl_u8(*(uint8x8_t *)v233.i8);
          v241 = vmovl_high_u16(v240);
          v236.i64[0] = v241.u32[2];
          v236.i64[1] = v241.u32[3];
          v242 = v236;
          v236.i64[0] = v235.u32[2];
          v236.i64[1] = v235.u32[3];
          v243 = v236;
          v236.i64[0] = v238.u32[0];
          v236.i64[1] = v238.u32[1];
          v244 = v236;
          v236.i64[0] = v241.u32[0];
          v236.i64[1] = v241.u32[1];
          v245 = v236;
          v246 = vmovl_u16(*(uint16x4_t *)v240.i8);
          v236.i64[0] = v246.u32[2];
          v236.i64[1] = v246.u32[3];
          v247 = v236;
          v236.i64[0] = v246.u32[0];
          v236.i64[1] = v246.u32[1];
          v248 = v236;
          v236.i64[0] = v221.u32[0];
          v236.i64[1] = v221.u32[1];
          v249 = v236;
          v236.i64[0] = v222.u32[2];
          v236.i64[1] = v222.u32[3];
          v250 = v236;
          v236.i64[0] = v223.u32[2];
          v236.i64[1] = v223.u32[3];
          v251 = v236;
          v236.i64[0] = v221.u32[2];
          v236.i64[1] = v221.u32[3];
          v252 = v236;
          v236.i64[0] = v222.u32[0];
          v236.i64[1] = v222.u32[1];
          v253 = v236;
          v236.i64[0] = v223.u32[0];
          v236.i64[1] = v223.u32[1];
          v254 = v236;
          v236.i64[0] = v224.u32[2];
          v236.i64[1] = v224.u32[3];
          v255 = v236;
          v236.i64[0] = v224.u32[0];
          v236.i64[1] = v224.u32[1];
          v231 = veorq_s8((int8x16_t)vshlq_u64(v237, v249), v231);
          v230 = veorq_s8((int8x16_t)vshlq_u64(v239, v250), v230);
          v228 = veorq_s8((int8x16_t)vshlq_u64(v242, v251), v228);
          v232 = veorq_s8((int8x16_t)vshlq_u64(v243, v252), v232);
          v229 = veorq_s8((int8x16_t)vshlq_u64(v244, v253), v229);
          v227 = veorq_s8((int8x16_t)vshlq_u64(v245, v254), v227);
          v220 = veorq_s8((int8x16_t)vshlq_u64(v247, v255), v220);
          v218 = veorq_s8((int8x16_t)vshlq_u64(v248, v236), v218);
          v224 = vaddq_s32(v224, v225);
          v223 = vaddq_s32(v223, v225);
          v222 = vaddq_s32(v222, v225);
          v221 = vaddq_s32(v221, v225);
          v226 -= 16;
        }
        while (v226);
        v256 = veorq_s8(veorq_s8(veorq_s8(v218, v229), veorq_s8(v227, v231)), veorq_s8(veorq_s8(v220, v230), veorq_s8(v228, v232)));
        v210 = (uint64_t)veor_s8(*(int8x8_t *)v256.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v256, v256, 8uLL));
        if (v217 == result)
        {
          v257 = v212 - 8 * result + 8;
LABEL_118:
          v209 = 48 - v257;
          v211 = v216;
          goto LABEL_119;
        }
      }
      else
      {
        v215 = 40 - v209;
        v216 = *(uint8x16_t **)(a1 + 13824);
      }
      v258 = v215;
      do
      {
        v259 = v216->u8[0];
        v216 = (uint8x16_t *)((char *)v216 + 1);
        v210 ^= (unint64_t)v259 << v258;
        v260 = v258 - 8;
        if (v258 < 8)
          break;
        v258 -= 8;
      }
      while ((unint64_t)v216 < v213);
      v257 = v260 + 8;
      goto LABEL_118;
    }
  }
LABEL_119:
  *(_QWORD *)(a1 + 13840) = v210;
  *(_DWORD *)(a1 + 13852) = v209;
  *(_QWORD *)(a1 + 13824) = v211;
LABEL_120:
  v261 = v202 | (v149 < v204);
  v262 = (__int16 *)((char *)&dav1d_sgr_params + 4 * v261);
  *(_BYTE *)(a2 + 7) = v261;
  v263 = *v262;
  if (*v262)
  {
    result = dav1d_msac_decode_subexp(v7, *(char *)(*(_QWORD *)(a1 + 8 * a3 + 14568) + 8) + 96, 128, 4);
    LOBYTE(v263) = result - 96;
  }
  *(_BYTE *)(a2 + 8) = v263;
  if (v262[1])
  {
    result = dav1d_msac_decode_subexp(v7, *(char *)(*(_QWORD *)(a1 + 8 * a3 + 14568) + 9) + 32, 128, 4);
    v264 = result - 32;
  }
  else
  {
    v264 = 95;
  }
  *(_BYTE *)(a2 + 9) = v264;
  v265 = a1 + 8 * a3;
  v266 = *(_QWORD *)(v265 + 14568);
  v267 = *(_WORD *)(v266 + 4);
  *(_BYTE *)(a2 + 6) = *(_BYTE *)(v266 + 6);
  *(_WORD *)(a2 + 4) = v267;
  v268 = *(_QWORD *)(v265 + 14568);
  v269 = *(_WORD *)(v268 + 1);
  *(_BYTE *)(a2 + 3) = *(_BYTE *)(v268 + 3);
  *(_WORD *)(a2 + 1) = v269;
  *(_QWORD *)(v265 + 14568) = a2;
  return result;
}

uint64_t dav1d_decode_frame_init(int8x16_t *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int32 v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int32 v15;
  int v16;
  unsigned int v17;
  int v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  void *v48;
  void *v49;
  void *v50;
  int v51;
  void *v52;
  __int32 v53;
  void *v54;
  int v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  __int32 v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  int v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  char *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  int v113;
  uint64_t v114;
  void *v115;
  void *v116;
  _DWORD *v117;
  int v118;
  int v119;
  int32x4_t v120;
  uint32x4_t v121;
  int32x4_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int v128;
  int v129;
  void *v130;
  int v131;
  char *v132;
  uint64_t v133;
  int v134;
  void *v135;
  char *v136;
  unint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  _DWORD *v145;
  __int16 *v146;
  char *v147;
  int v148;
  int v149;
  int v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  int v158;
  uint64_t *v159;
  int v160;
  int v161;
  _QWORD *v162;
  _QWORD *v163;
  unint64_t v164;
  __int8 *v165;
  int8x16_t *v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int8x16_t *v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  uint64_t v175;
  unsigned int v176;
  _BOOL8 v177;
  _BOOL8 v178;
  unsigned __int8 *v179;
  int v180;
  unsigned __int8 *v181;
  unsigned int v182;
  unsigned int v183;
  BOOL v184;
  BOOL v185;
  BOOL v186;
  unsigned int v187;
  unsigned int v188;
  BOOL v189;
  BOOL v190;
  BOOL v191;
  _BOOL4 v192;
  _BOOL4 v193;
  unsigned int v194;
  unsigned int v195;
  BOOL v196;
  _BOOL4 v197;
  _BOOL4 v198;
  uint64_t result;
  _BOOL4 v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  void *memptr;

  v2 = a1[195].i64[0];
  if (a1[206].i32[0] > a1[320].i32[0])
  {
    free((void *)a1[319].i64[1]);
    v3 = malloc_type_malloc(a1[206].i32[0], 0x100004077774924uLL);
    a1[319].i64[1] = (uint64_t)v3;
    if (!v3)
    {
      a1[320].i32[0] = 0;
      return 4294967284;
    }
    a1[320].i32[0] = a1[206].i32[0];
  }
  v4 = a1[1].i64[1];
  LODWORD(v5) = *(_DWORD *)(v4 + 556);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    do
    {
      v8 = (int)v7;
      *(_BYTE *)(a1[319].i64[1] + (int)v7) = v6++;
      LODWORD(v7) = v7 + 1;
      v4 = a1[1].i64[1];
      if ((int)v7 < *(unsigned __int16 *)(v4 + 2 * v6 + 690))
      {
        v7 = v8 + 1;
        do
        {
          *(_BYTE *)(a1[319].i64[1] + v7++) = 0;
          v4 = a1[1].i64[1];
        }
        while (v7 < *(unsigned __int16 *)(v4 + 2 * v6 + 690));
      }
      v5 = *(int *)(v4 + 556);
    }
    while (v6 < v5);
  }
  v9 = *(_DWORD *)(v4 + 540) * v5;
  if (v9 != a1[196].i32[0])
  {
    v10 = *(int *)(v4 + 540) * (uint64_t)(int)v5;
    if (*(_DWORD *)(v2 + 8) > 1u)
    {
      v11 = (void *)a1[265].i64[1];
      if (v11)
      {
        free(v11);
        a1[265].i64[1] = 0;
      }
      v12 = malloc_type_malloc(4 * v9, 0x100004052888210uLL);
      a1[265].i64[1] = (uint64_t)v12;
      if (!v12)
      {
        a1[196].i32[0] = 0;
        return 4294967284;
      }
      v10 = v9;
    }
    free((void *)a1[195].i64[1]);
    memptr = 0;
    v13 = malloc_type_posix_memalign(&memptr, 0x20uLL, 14592 * v10, 0xCA3F0CE3uLL);
    v14 = memptr;
    if (v13)
      v14 = 0;
    a1[195].i64[1] = (uint64_t)v14;
    if (!v14)
      return 4294967284;
    a1[196].i32[0] = v9;
    v4 = a1[1].i64[1];
  }
  v15 = a1[205].i32[2];
  v16 = *(_DWORD *)(v4 + 556) * v15;
  v17 = *(_DWORD *)(v2 + 8);
  if (v17 < 2)
  {
    v18 = v16;
    if (v16 == a1[242].i32[0])
      goto LABEL_29;
  }
  else
  {
    v18 = v16 << (*(_DWORD *)(v2 + 24) > 1u);
    if (v18 == a1[242].i32[0])
      goto LABEL_29;
  }
  v19 = (void *)a1[241].i64[1];
  if (v19)
  {
    free(v19);
    a1[241].i64[1] = 0;
  }
  v20 = malloc_type_malloc(624 * v18, 0x1000040EE3B7ECDuLL);
  a1[241].i64[1] = (uint64_t)v20;
  if (!v20)
  {
    a1[242].i32[0] = 0;
    return 4294967284;
  }
  a1[242].i32[0] = v18;
  v15 = a1[205].i32[2];
  v17 = *(_DWORD *)(v2 + 8);
LABEL_29:
  v21 = a1[205].i32[3] * (uint64_t)v15;
  v22 = *(_DWORD *)(a1->i64[1] + 32) != 0;
  if (v17 >= 2)
  {
    v23 = a1[128].u32[2];
    v24 = a1[1].i64[1];
    v25 = *(_DWORD *)(v24 + 556);
    if (v25 <= 0)
    {
      LODWORD(v26) = *(_DWORD *)(v24 + 540);
    }
    else
    {
      LODWORD(v26) = *(_DWORD *)(v24 + 540);
      if ((int)v26 >= 1)
      {
        v27 = 0;
        v28 = 0;
        v29 = 4 * a1[206].i32[2];
        do
        {
          v30 = v27 + 1;
          if ((int)v26 >= 1)
          {
            v31 = 0;
            v32 = *(unsigned __int16 *)(v24 + 2 * v27 + 690);
            v33 = (v32 * a1[205].i32[2]) << 7;
            v34 = (*(unsigned __int16 *)(v24 + 2 * v30 + 690) - v32) * v29;
            v35 = a1[265].i64[1] + 4 * v28;
            do
            {
              *(_DWORD *)(v35 + 4 * v31) = (v33 + v34 * *(unsigned __int16 *)(v24 + 560 + 2 * v31)) * v29;
              ++v31;
              v26 = *(int *)(v24 + 540);
            }
            while (v31 < v26);
            v28 += v31;
            v25 = *(_DWORD *)(v24 + 556);
          }
          v27 = v30;
        }
        while (v30 < v25);
      }
    }
    v36 = a1[206].i32[0] * (uint64_t)(int)v26;
    v37 = (char *)a1[336].i64[0];
    if ((_DWORD)v36 != a1[336].i32[2])
    {
      free(v37);
      v37 = (char *)malloc_type_malloc(56 * v36, 0x100004021716A34uLL);
      a1[336].i64[0] = (uint64_t)v37;
      if (!v37)
      {
        a1[336].i32[2] = 0;
        return 4294967284;
      }
      a1[336].i32[2] = v36;
      v24 = a1[1].i64[1];
      v25 = *(_DWORD *)(v24 + 556);
    }
    v38 = (unsigned __int8 *)&ss_size_mul + 2 * v23;
    if (v25 >= 1)
    {
      v39 = *(unsigned int *)(v24 + 540);
      if ((int)v39 >= 1)
      {
        v40 = 0;
        v41 = *(unsigned __int16 *)(v24 + 690);
        v42 = a1[195].i64[1] + 13928;
        do
        {
          v43 = v41;
          ++v40;
          v41 = *(unsigned __int16 *)(v24 + 2 * v40 + 690);
          v44 = 56 * v41 - 56 * v43;
          v45 = (_QWORD *)v42;
          v46 = v39;
          do
          {
            *v45 = v37;
            v45 += 1824;
            v37 += v44;
            --v46;
          }
          while (v46);
          v42 += 14592 * v39;
        }
        while (v40 != v25);
      }
    }
    v47 = ((_DWORD)v21 * *v38) << v22;
    if (v47 != a1[265].i32[1])
    {
      v48 = (void *)a1[264].i64[0];
      if (v48)
      {
        free(v48);
        a1[264].i64[0] = 0;
      }
      memptr = 0;
      if (malloc_type_posix_memalign(&memptr, 0x40uLL, (v47 & 0x3FFFFFFFFFFFFLL) << 13, 0xCA3F0CE3uLL))
        v49 = 0;
      else
        v49 = memptr;
      a1[264].i64[0] = (uint64_t)v49;
      if (!v49)
      {
        a1[265].i32[1] = 0;
        return 4294967284;
      }
      bzero(v49, (v47 & 0x3FFFFFFFFFFFFLL) << 13);
      a1[265].i32[1] = v47;
      v24 = a1[1].i64[1];
    }
    if (*(_DWORD *)(v24 + 292))
    {
      if ((_DWORD)v21 != a1[264].i32[3])
      {
        v50 = (void *)a1[263].i64[0];
        if (v50)
        {
          free(v50);
          a1[263].i64[0] = 0;
        }
        memptr = 0;
        v51 = malloc_type_posix_memalign(&memptr, 0x40uLL, 12288 * v21, 0xCA3F0CE3uLL);
        v52 = memptr;
        if (v51)
          v52 = 0;
        a1[263].i64[0] = (uint64_t)v52;
        if (!v52)
        {
          a1[264].i32[3] = 0;
          return 4294967284;
        }
        a1[264].i32[3] = v21;
      }
      v53 = v21 * v38[1];
      if (v53 != a1[265].i32[0])
      {
        v54 = (void *)a1[263].i64[1];
        if (v54)
        {
          free(v54);
          a1[263].i64[1] = 0;
        }
        memptr = 0;
        v55 = malloc_type_posix_memalign(&memptr, 0x40uLL, (v53 & 0x3FFFFFFFFFFFFLL) << 12, 0xCA3F0CE3uLL);
        v56 = memptr;
        if (v55)
          v56 = 0;
        a1[263].i64[1] = (uint64_t)v56;
        if (!v56)
        {
          a1[265].i32[0] = 0;
          return 4294967284;
        }
        a1[265].i32[0] = v53;
      }
    }
    else
    {
      v57 = (void *)a1[263].i64[0];
      if (v57)
      {
        free(v57);
        a1[263].i64[0] = 0;
        v58 = (void *)a1[263].i64[1];
        if (v58)
        {
          free(v58);
          a1[263].i64[1] = 0;
        }
        *(uint64_t *)((char *)&a1[264].i64[1] + 4) = 0;
      }
    }
  }
  v59 = a1[127].i64[0];
  v60 = a1[127].i64[1];
  v61 = a1[1].i64[1];
  v63 = *(_DWORD *)(v61 + 236);
  v62 = *(_DWORD *)(v61 + 240);
  v64 = *(_DWORD *)(v2 + 24);
  v66 = v64 > 1 && v63 != v62;
  LODWORD(v67) = a1[206].i32[0];
  if (a1[268].i32[0] != 4 * v59 * (int)v67
    || a1[268].i32[1] != 8 * v60 * (int)v67
    || a1[320].i32[1] != v66
    || (_DWORD)v67 != a1[268].i32[2])
  {
    free((void *)a1[312].i64[1]);
    if (v59 >= 0)
      v69 = v59;
    else
      v69 = -v59;
    v70 = 4 * v69;
    if (v60 >= 0)
      v71 = v60;
    else
      v71 = -v60;
    v72 = 8 * v71;
    v73 = (((8 * v71 + v70) * a1[206].i32[0]) << v66) + 64;
    memptr = 0;
    v74 = malloc_type_posix_memalign(&memptr, 0x20uLL, v73, 0xCA3F0CE3uLL);
    v75 = (char *)memptr;
    if (v74)
      v75 = 0;
    a1[312].i64[1] = (uint64_t)v75;
    if (!v75)
    {
      a1[268].i64[0] = 0;
      return 4294967284;
    }
    v76 = v75 + 32;
    if (v59 < 0)
    {
      v67 = a1[206].i32[0];
      v78 = &v76[-(v59 * (4 * v67 - 1))];
      v77 = -(v59 * (4 * (int)v67 - 3));
    }
    else
    {
      v77 = 2 * v59;
      LODWORD(v67) = a1[206].i32[0];
      v78 = v76;
    }
    a1[313].i64[1] = (uint64_t)v78;
    a1[315].i64[0] = (uint64_t)&v76[v77];
    v79 = v70 * (int)v67;
    v80 = &v76[v79];
    v81 = 2 * v60;
    v82 = 4 * v60;
    v83 = 6 * v60;
    v84 = 8 * v67 - 1;
    v85 = (uint64_t)&v80[-(v60 * v84)];
    if (v60 < 0)
      v81 = -(v60 * (8 * (int)v67 - 3));
    else
      v85 = (uint64_t)v80;
    if (v60 < 0)
    {
      v82 = -(v60 * (8 * (int)v67 - 5));
      v83 = -(v60 * (8 * (int)v67 - 7));
    }
    a1[314].i64[0] = v85;
    a1[314].i64[1] = (uint64_t)&v80[v81];
    a1[315].i64[1] = (uint64_t)&v80[v82];
    a1[316].i64[0] = (uint64_t)&v80[v83];
    if (v66)
    {
      v86 = &v80[v72 * (int)v67];
      v87 = 4 * v67 - 1;
      v88 = (uint64_t)&v86[-(v59 * v87)];
      if (v59 >= 0)
        v88 = (uint64_t)v86;
      a1[316].i64[1] = v88;
      v89 = (uint64_t)&v86[v79];
      v90 = 4 * v60 * (int)v67;
      v91 = v89 - v60 * v87;
      v92 = -(v60 * v84);
      if (v60 < 0)
        v90 = v92;
      else
        v91 = v89;
      a1[317].i64[0] = v91;
      a1[317].i64[1] = v89 + v90;
    }
    a1[268].i32[0] = 4 * v59 * v67;
    a1[268].i32[1] = 8 * v60 * v67;
    a1[320].i32[1] = v66;
    a1[268].i32[2] = v67;
    if (*(_DWORD *)(v2 + 24) < 2u)
      goto LABEL_89;
LABEL_116:
    v68 = (4 * (_DWORD)v67) << *(_DWORD *)(a1->i64[1] + 1012);
    goto LABEL_117;
  }
  if (v64 >= 2)
    goto LABEL_116;
LABEL_89:
  v68 = 12;
LABEL_117:
  v93 = a1[143].i64[1];
  v94 = a1[144].i64[0];
  v95 = v68;
  if (v93 * v68 != a1[268].i32[3] || a1[269].i32[0] != 2 * v94 * v68)
  {
    free((void *)a1[313].i64[0]);
    if (v93 >= 0)
      v96 = v93;
    else
      v96 = -v93;
    v97 = v96 * v95;
    if (v94 >= 0)
      v98 = v94;
    else
      v98 = -v94;
    memptr = 0;
    v99 = malloc_type_posix_memalign(&memptr, 0x40uLL, v97 + 2 * v95 * v98 + 128, 0xCA3F0CE3uLL);
    v100 = (char *)memptr;
    if (v99)
      v100 = 0;
    a1[313].i64[0] = (uint64_t)v100;
    if (!v100)
    {
      *(uint64_t *)((char *)&a1[268].i64[1] + 4) = 0;
      return 4294967284;
    }
    v101 = v100 + 64;
    v102 = (int)v95 - 1;
    a1[318].i64[0] = (uint64_t)&v101[-(v93 * v102) & (v93 >> 63)];
    v103 = &v101[v97];
    v104 = v94 * v95;
    v105 = 2 * v95;
    v106 = (uint64_t)&v103[-(v94 * v102)];
    if (v94 >= 0)
    {
      v106 = (uint64_t)v103;
    }
    else
    {
      v105 = 2 * v95;
      v104 = -(v94 * (2 * (int)v95 - 1));
    }
    a1[318].i64[1] = v106;
    a1[319].i64[0] = (uint64_t)&v103[v104];
    a1[268].i32[3] = v95 * v93;
    a1[269].i32[0] = v105 * v94;
  }
  if ((_DWORD)v21 != a1[267].i32[2])
  {
    v107 = (void *)a1[266].i64[1];
    if (v107)
    {
      free(v107);
      a1[266].i64[1] = 0;
    }
    v108 = (void *)a1[266].i64[0];
    if (v108)
    {
      free(v108);
      a1[266].i64[0] = 0;
    }
    a1[266].i64[1] = (uint64_t)malloc_type_malloc(1348 * (int)v21, 0x1000040A6200EAAuLL);
    v109 = malloc_type_malloc(((uint64_t)(int)v21 << 12) | 3, 0xD6D53303uLL);
    a1[266].i64[0] = (uint64_t)v109;
    if (!a1[266].i64[1] || !v109)
      goto LABEL_156;
    if (*(_DWORD *)(v2 + 8) >= 2u)
    {
      v110 = (void *)a1[262].i64[0];
      if (v110)
      {
        free(v110);
        a1[262].i64[0] = 0;
      }
      v111 = (void *)a1[262].i64[1];
      if (v111)
      {
        free(v111);
        a1[262].i64[1] = 0;
      }
      a1[262].i64[0] = (uint64_t)malloc_type_malloc((uint64_t)(int)v21 << 15, 0x9D6AF289uLL);
      v112 = malloc_type_malloc(10240 * (int)v21, 0x495DD799uLL);
      a1[262].i64[1] = (uint64_t)v112;
      if (!a1[262].i64[0] || !v112)
      {
LABEL_156:
        a1[267].i32[2] = 0;
        return 4294967284;
      }
    }
    a1[267].i32[2] = v21;
  }
  v113 = (a1[144].i32[2] + 127) >> 7;
  a1[206].i32[3] = v113;
  v114 = a1[205].i32[3] * (uint64_t)v113;
  if ((_DWORD)v114 != a1[267].i32[3])
  {
    v115 = (void *)a1[267].i64[0];
    if (v115)
    {
      free(v115);
      a1[267].i64[0] = 0;
    }
    v116 = malloc_type_malloc(120 * v114, 0x1000040A9FC9F90uLL);
    a1[267].i64[0] = (uint64_t)v116;
    if (!v116)
    {
      a1[267].i32[3] = 0;
      return 4294967284;
    }
    a1[267].i32[3] = v114;
  }
  v117 = (_DWORD *)a1[1].i64[1];
  a1[324].i32[2] = (v117[343] != 0) | (2 * (v117[344] != 0)) | (4 * (v117[345] != 0));
  v118 = v117[324];
  if (v118 != a1[279].i32[0])
  {
    v119 = v118 + 3;
    if (v118 <= 0)
    {
      a1[274] = (int8x16_t)xmmword_196889AE0;
      a1[270] = (int8x16_t)xmmword_196889AF0;
      a1[275] = (int8x16_t)xmmword_196889B00;
      a1[271] = (int8x16_t)xmmword_196889B10;
      qmemcpy(&a1[276], " !\"#$%&'()*+,-./0123456789:;<=>?", 32);
      a1[272] = (int8x16_t)xmmword_196889B30;
      v127 = (int8x16_t)xmmword_196889B50;
    }
    else
    {
      v120 = vdupq_n_s32(9 - v118);
      v121 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v119 >> 2));
      v122.i64[0] = 0x100000001;
      v122.i64[1] = 0x100000001;
      v123 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889B70, v121), v120), v122), (int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889B60, v121), v120), v122)), (int8x16_t)vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889B90, v121), v120), v122), (int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889B80, v121), v120), v122)));
      a1[274] = v123;
      a1[270] = vaddq_s8(v123, (int8x16_t)xmmword_196889BA0);
      v124 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889BC0, v121), v120), v122), (int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889BB0, v121), v120), v122)), (int8x16_t)vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889BE0, v121), v120), v122), (int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889BD0, v121), v120), v122)));
      a1[275] = v124;
      a1[271] = vaddq_s8(v124, (int8x16_t)xmmword_196889BF0);
      v125 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889C10, v121), v120), v122), (int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889C00, v121), v120), v122)), (int8x16_t)vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889C30, v121), v120), v122), (int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889C20, v121), v120), v122)));
      a1[276] = v125;
      a1[272] = vaddq_s8(v125, (int8x16_t)xmmword_196889C40);
      v126 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889C60, v121), v120), v122), (int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889C50, v121), v120), v122)), (int8x16_t)vuzp1q_s16((int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889C80, v121), v120), v122), (int16x8_t)vmaxq_s32(vminq_s32((int32x4_t)vshlq_u32((uint32x4_t)xmmword_196889C70, v121), v120), v122)));
      a1[277] = v126;
      v127 = vaddq_s8(v126, (int8x16_t)xmmword_196889C90);
    }
    a1[273] = v127;
    a1[278].i64[0] = (uint64_t)v119 >> 2;
    if (v118)
      v128 = 9 - v118;
    else
      v128 = 255;
    a1[278].i64[1] = v128;
    a1[279].i32[0] = v117[324];
  }
  v203 = 0;
  dav1d_calc_lf_values(&a1[279].i8[4], v117, (char *)&v203);
  bzero((void *)a1[266].i64[1], 1348 * (int)v21);
  v129 = (a1[205].i32[2] * a1[206].i32[0]) << v22;
  if (v129 != a1[202].i32[0])
  {
    v130 = (void *)a1[202].i64[1];
    if (v130)
    {
      free(v130);
      a1[202].i64[1] = 0;
    }
    memptr = 0;
    v131 = malloc_type_posix_memalign(&memptr, 0x40uLL, 384 * v129, 0xCA3F0CE3uLL);
    v132 = (char *)memptr;
    if (v131)
      v132 = 0;
    a1[202].i64[1] = (uint64_t)v132;
    if (!v132)
    {
      a1[202].i32[0] = 0;
      return 4294967284;
    }
    a1[203].i64[0] = (uint64_t)&v132[128 * (uint64_t)v129];
    a1[203].i64[1] = (uint64_t)&v132[256 * (uint64_t)v129];
    a1[202].i32[0] = v129;
  }
  v133 = a1[1].i64[1];
  v134 = *(_DWORD *)(v133 + 540) * a1[205].i32[3];
  if (v134 != a1[269].i32[1])
  {
    v135 = (void *)a1[311].i64[1];
    if (v135)
    {
      free(v135);
      a1[311].i64[1] = 0;
    }
    v136 = (char *)malloc_type_malloc(v134 << 6, 0xF1A25B9uLL);
    a1[311].i64[1] = (uint64_t)v136;
    if (!v136)
    {
      a1[269].i32[1] = 0;
      return 4294967284;
    }
    a1[312].i64[0] = (uint64_t)&v136[32 * v134];
    a1[269].i32[1] = v134;
    v133 = a1[1].i64[1];
  }
  if ((*(_BYTE *)(v133 + 232) & 1) != 0 || *(_DWORD *)(v133 + 464))
  {
    if ((dav1d_refmvs_init_frame((uint64_t)&a1[242].i64[1], a1->i64[1], (_DWORD *)v133, &a1[168].i32[2], a1[159].i64[0], (uint64_t)a1[170].i64 + 4, &a1[159].i64[1], *(_DWORD *)(a1[195].i64[0] + 24), *(_DWORD *)(a1[195].i64[0] + 8)) & 0x80000000) == 0)
    {
      v133 = a1[1].i64[1];
      goto LABEL_182;
    }
    return 4294967284;
  }
LABEL_182:
  v137 = 0;
  v138 = *(_DWORD *)(v133 + 824);
  v139 = *(_DWORD *)(v133 + 864);
  v140 = *(_DWORD *)(v133 + 828);
  v141 = *(_DWORD *)(v133 + 836);
  v142 = *(_DWORD *)(v133 + 832);
  v143 = *(_DWORD *)(v133 + 844);
  v144 = *(_DWORD *)(v133 + 840);
  v145 = (_DWORD *)(v133 + 880);
  v146 = &a1[207].i16[5];
  v147 = (char *)&dav1d_dq_tbl + 1024 * (uint64_t)*(int *)(a1->i64[1] + 32);
  do
  {
    v148 = v138;
    if (v139)
    {
      v149 = *v145 + v138;
      if (v149 >= 255)
        v149 = 255;
      v148 = v149 & ~(v149 >> 31);
    }
    v150 = v148 + v140;
    if (v148 + v140 >= 255)
      v150 = 255;
    v151 = v150 & ~(v150 >> 31);
    v152 = v148 + v141;
    if (v148 + v141 >= 255)
      v152 = 255;
    v153 = v152 & ~(v152 >> 31);
    v154 = v148 + v142;
    if (v148 + v142 >= 255)
      v154 = 255;
    v155 = v154 & ~(v154 >> 31);
    v156 = v148 + v143;
    if (v148 + v143 >= 255)
      v156 = 255;
    v157 = v156 & ~(v156 >> 31);
    v158 = v148 + v144;
    if (v148 + v144 >= 255)
      v158 = 255;
    *(v146 - 5) = *(_WORD *)&v147[4 * v151];
    *(v146 - 4) = *(_WORD *)&v147[4 * v148 + 2];
    *(v146 - 3) = *(_WORD *)&v147[4 * v155];
    *(v146 - 2) = *(_WORD *)&v147[4 * v153 + 2];
    *(v146 - 1) = *(_WORD *)&v147[4 * (v158 & ~(v158 >> 31))];
    *v146 = *(_WORD *)&v147[4 * v157 + 2];
    if (!v139)
      break;
    v145 += 8;
    v146 += 6;
    v189 = v137++ >= 7;
  }
  while (!v189);
  if (*(_DWORD *)(v133 + 848))
  {
    v159 = (uint64_t *)((char *)&dav1d_qm_tbl + 304 * *(int *)(v133 + 852));
    v160 = *(_DWORD *)(v133 + 856);
    v161 = *(_DWORD *)(v133 + 860);
    a1[213].i64[0] = *v159;
    v162 = (_QWORD *)((char *)&dav1d_qm_tbl + 304 * v160);
    a1[213].i64[1] = v162[19];
    v163 = (_QWORD *)((char *)&dav1d_qm_tbl + 304 * v161);
    a1[214].i64[0] = v163[19];
    a1[214].i64[1] = v159[1];
    a1[215].i64[0] = v162[20];
    a1[215].i64[1] = v163[20];
    a1[216].i64[0] = v159[2];
    a1[216].i64[1] = v162[21];
    a1[217].i64[0] = v163[21];
    a1[217].i64[1] = v159[3];
    a1[218].i64[0] = v162[22];
    a1[218].i64[1] = v163[22];
    a1[219].i64[0] = v159[4];
    a1[219].i64[1] = v162[23];
    a1[220].i64[0] = v163[23];
    a1[220].i64[1] = v159[5];
    a1[221].i64[0] = v162[24];
    a1[221].i64[1] = v163[24];
    a1[222].i64[0] = v159[6];
    a1[222].i64[1] = v162[25];
    a1[223].i64[0] = v163[25];
    a1[223].i64[1] = v159[7];
    a1[224].i64[0] = v162[26];
    a1[224].i64[1] = v163[26];
    a1[225].i64[0] = v159[8];
    a1[225].i64[1] = v162[27];
    a1[226].i64[0] = v163[27];
    a1[226].i64[1] = v159[9];
    a1[227].i64[0] = v162[28];
    a1[227].i64[1] = v163[28];
    a1[228].i64[0] = v159[10];
    a1[228].i64[1] = v162[29];
    a1[229].i64[0] = v163[29];
    a1[229].i64[1] = v159[11];
    a1[230].i64[0] = v162[30];
    a1[230].i64[1] = v163[30];
    a1[231].i64[0] = v159[12];
    a1[231].i64[1] = v162[31];
    a1[232].i64[0] = v163[31];
    a1[232].i64[1] = v159[13];
    a1[233].i64[0] = v162[32];
    a1[233].i64[1] = v163[32];
    a1[234].i64[0] = v159[14];
    a1[234].i64[1] = v162[33];
    a1[235].i64[0] = v163[33];
    a1[235].i64[1] = v159[15];
    a1[236].i64[0] = v162[34];
    a1[236].i64[1] = v163[34];
    a1[237].i64[0] = v159[16];
    a1[237].i64[1] = v162[35];
    a1[238].i64[0] = v163[35];
    a1[238].i64[1] = v159[17];
    a1[239].i64[0] = v162[36];
    a1[239].i64[1] = v163[36];
    a1[240].i64[0] = v159[18];
    a1[240].i64[1] = v162[37];
    a1[241].i64[0] = v163[37];
  }
  else
  {
    a1[241].i64[0] = 0;
    a1[240] = 0u;
    a1[239] = 0u;
    a1[238] = 0u;
    a1[237] = 0u;
    a1[236] = 0u;
    a1[235] = 0u;
    a1[234] = 0u;
    a1[233] = 0u;
    a1[232] = 0u;
    a1[231] = 0u;
    a1[230] = 0u;
    a1[229] = 0u;
    a1[228] = 0u;
    a1[227] = 0u;
    a1[226] = 0u;
    a1[225] = 0u;
    a1[224] = 0u;
    a1[223] = 0u;
    a1[222] = 0u;
    a1[221] = 0u;
    a1[220] = 0u;
    a1[219] = 0u;
    a1[218] = 0u;
    a1[217] = 0u;
    a1[216] = 0u;
    a1[215] = 0u;
    a1[214] = 0u;
    a1[213] = 0u;
  }
  if (*(_DWORD *)(v133 + 1396))
  {
    v164 = 0;
    v165 = &a1[256].i8[9];
    v166 = a1 + 20;
    do
    {
      if (v164 <= 5)
      {
        v167 = 0;
        v168 = *(_DWORD *)(a1[2].i64[35 * v164 + 1] + 248);
        v169 = a1->i64[1];
        v170 = v166;
        do
        {
          v171 = *(_DWORD *)(v169 + 1060);
          if (v171)
          {
            v172 = *(_DWORD *)(a1[125].i64[0] + 248);
            v173 = 1 << (v171 - 1);
            v171 = ((v168 - v172) & (v173 - 1)) - ((v168 - v172) & v173);
            if ((v171 & 0x80000000) != 0)
              v171 = ((v168 - v172) & v173) - ((v168 - v172) & (v173 - 1));
            if ((int)v171 >= 31)
              v171 = 31;
            v174 = ((*(_DWORD *)(v170->i64[0] + 248) - v172) & (v173 - 1))
                 - ((*(_DWORD *)(v170->i64[0] + 248) - v172) & v173);
          }
          else
          {
            v174 = 0;
          }
          v175 = 0;
          if (v174 < 0)
            v174 = -v174;
          if (v174 >= 31)
            v176 = 31;
          else
            v176 = v174;
          v177 = v176 <= v171;
          v178 = v176 > v171;
          if (v176 > v171)
            v179 = (unsigned __int8 *)&dav1d_decode_frame_init_quant_dist_weight;
          else
            v179 = (unsigned __int8 *)&unk_19688A1D5;
          v180 = *v179;
          if (v176 <= v171)
            v181 = (unsigned __int8 *)&dav1d_decode_frame_init_quant_dist_weight;
          else
            v181 = (unsigned __int8 *)&unk_19688A1D5;
          v182 = v176 * v180;
          v183 = v171 * *v181;
          v184 = v182 > v183;
          v185 = v182 < v183 && v176 > v171;
          v186 = v184 && v176 <= v171;
          if (!v185 && !v186)
          {
            v187 = v176 * byte_19688A1D6[v177];
            v188 = v171 * byte_19688A1D6[v178];
            v189 = v187 >= v188;
            v190 = v187 > v188 && v176 <= v171;
            v175 = 1;
            v191 = !v189 && v176 > v171;
            if (!v191 && !v190)
            {
              v192 = v176 > v171;
              v193 = v176 <= v171;
              v194 = v176 * byte_19688A1D8[v177];
              v195 = v171 * byte_19688A1D8[v178];
              v196 = v194 > v195;
              v197 = v194 < v195 && v192;
              v198 = v196 && v193;
              if (v197 || v198)
                v175 = 2;
              else
                v175 = 3;
            }
          }
          v165[v167++] = dav1d_decode_frame_init_quant_dist_lookup_table[2 * v175 + v177];
          v170 = (int8x16_t *)((char *)v170 + 280);
        }
        while (v164 + v167 != 6);
      }
      ++v164;
      v165 += 8;
      v166 = (int8x16_t *)((char *)v166 + 280);
    }
    while (v164 != 7);
  }
  result = 0;
  v200 = a1[128].i32[2] != 0;
  a1[323].i64[1] = a1[266].i64[1];
  a1[320].i64[1] = a1[125].i64[1];
  v201 = v200;
  a1[321].i64[0] = a1[125].i64[v201 + 1];
  v202 = v200;
  a1[321].i64[1] = a1[v202 + 125].i64[1];
  a1[322].i64[0] = a1[142].i64[0];
  a1[322].i64[1] = a1[142].i64[v201];
  a1[323].i64[0] = a1[v202 + 142].i64[0];
  return result;
}

uint64_t init_quant_tables(int a1, _DWORD *a2, int a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _DWORD *v11;
  _WORD *v12;
  char *v13;
  uint64_t result;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;

  v4 = 0;
  v5 = a2[216];
  v6 = a2[207];
  v7 = a2[209];
  v8 = a2[208];
  v9 = a2[211];
  v10 = a2[210];
  v11 = a2 + 220;
  v12 = (_WORD *)(a4 + 6);
  v13 = (char *)&dav1d_dq_tbl + 1024 * (uint64_t)a1;
  result = 255;
  do
  {
    v15 = a3;
    if (v5)
    {
      v16 = *v11 + a3;
      if (v16 >= 255)
        v16 = 255;
      v15 = v16 & ~(v16 >> 31);
    }
    v17 = v15 + v6;
    if (v15 + v6 >= 255)
      v17 = 255;
    v18 = v17 & ~(v17 >> 31);
    v19 = v15 + v7;
    if (v15 + v7 >= 255)
      v19 = 255;
    v20 = v19 & ~(v19 >> 31);
    v21 = v15 + v8;
    if (v15 + v8 >= 255)
      v21 = 255;
    v22 = v21 & ~(v21 >> 31);
    v23 = v15 + v9;
    if (v15 + v9 >= 255)
      v23 = 255;
    v24 = v23 & ~(v23 >> 31);
    v25 = v15 + v10;
    if (v15 + v10 >= 255)
      v25 = 255;
    *(v12 - 3) = *(_WORD *)&v13[4 * v18];
    *(v12 - 2) = *(_WORD *)&v13[4 * v15 + 2];
    *(v12 - 1) = *(_WORD *)&v13[4 * v22];
    *v12 = *(_WORD *)&v13[4 * v20 + 2];
    v12[1] = *(_WORD *)&v13[4 * (v25 & ~(v25 >> 31))];
    v12[2] = *(_WORD *)&v13[4 * v24 + 2];
    if (!v5)
      break;
    v12 += 6;
    v11 += 8;
  }
  while (v4++ < 7);
  return result;
}

uint64_t dav1d_decode_frame_init_cdf(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, int32x4_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int32x4_t v18;
  int8x16_t *v19;
  int8x16_t *v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  int8x8_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  int8x16_t *v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  unint64_t *v68;
  uint64_t v69;
  int8x16_t v70;
  int8x16_t v71;
  unint64_t v72;
  uint32x4_t v73;
  uint32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unsigned __int8 **v102;
  _DWORD *v103;
  int v104;
  unsigned __int8 *v105;
  unint64_t *v106;
  unint64_t v107;
  int *v108;
  int v109;
  _QWORD *v110;
  uint64_t v111;
  _DWORD *v112;
  unsigned int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  unint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  _DWORD *v130;
  uint64_t v131;
  int v132;
  BOOL v133;
  int v134;
  int v135;
  int v136;
  char v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  char v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD *v151;
  unsigned int v153;
  char v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  unint64_t v165;
  int v166;
  int v167;
  unsigned int v168;

  v9 = *(_QWORD *)(a1 + 3120);
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 24) + 516))
  {
LABEL_4:
    *(_DWORD *)(a1 + 5336) = 0;
    v11 = *(_DWORD *)(a1 + 2988);
    if (v11 >= 1)
      goto LABEL_5;
    goto LABEL_101;
  }
  v10 = *(_QWORD *)(a1 + 2960);
  if (*(_QWORD *)(a1 + 2928))
  {
    memcpy(*(void **)(a1 + 2960), *(const void **)(a1 + 2936), 0x3600uLL);
    goto LABEL_4;
  }
  memcpy(*(void **)(a1 + 2960), &av1_default_cdf, 0x1860uLL);
  memcpy((void *)(v10 + 6240), &default_kf_y_mode_cdf, 0x320uLL);
  memcpy((void *)(v10 + 7040), (char *)&av1_default_coef_cdf + 6208 * *(unsigned int *)(a1 + 2936), 0x1840uLL);
  *(_QWORD *)(v10 + 13504) = 0x348054007000;
  *(_QWORD *)(v10 + 13792) = 0x348054007000;
  *(_OWORD *)(v10 + 13728) = xmmword_196882100;
  *(_OWORD *)(v10 + 13744) = unk_196882110;
  *(_OWORD *)(v10 + 13760) = xmmword_196882120;
  *(_OWORD *)(v10 + 13776) = unk_196882130;
  *(_OWORD *)(v10 + 13664) = default_mv_component_cdf;
  *(_OWORD *)(v10 + 13680) = unk_1968820D0;
  a8.i64[1] = 0x21C02D005000;
  *(_OWORD *)(v10 + 13696) = xmmword_1968820E0;
  *(_OWORD *)(v10 + 13712) = unk_1968820F0;
  *(_OWORD *)(v10 + 13648) = unk_196882130;
  *(_OWORD *)(v10 + 13632) = xmmword_196882120;
  *(_OWORD *)(v10 + 13616) = unk_196882110;
  *(_OWORD *)(v10 + 13600) = xmmword_196882100;
  *(_OWORD *)(v10 + 13584) = unk_1968820F0;
  *(_OWORD *)(v10 + 13568) = xmmword_1968820E0;
  *(_OWORD *)(v10 + 13552) = unk_1968820D0;
  *(_OWORD *)(v10 + 13536) = default_mv_component_cdf;
  *(_OWORD *)(v10 + 13376) = default_mv_component_cdf;
  *(_OWORD *)(v10 + 13392) = unk_1968820D0;
  *(_OWORD *)(v10 + 13408) = xmmword_1968820E0;
  *(_OWORD *)(v10 + 13424) = unk_1968820F0;
  *(_OWORD *)(v10 + 13440) = xmmword_196882100;
  *(_OWORD *)(v10 + 13456) = unk_196882110;
  *(_OWORD *)(v10 + 13472) = xmmword_196882120;
  *(_OWORD *)(v10 + 13488) = unk_196882130;
  *(_OWORD *)(v10 + 13296) = unk_1968820F0;
  *(_OWORD *)(v10 + 13280) = xmmword_1968820E0;
  *(_OWORD *)(v10 + 13264) = unk_1968820D0;
  *(_OWORD *)(v10 + 13248) = default_mv_component_cdf;
  *(_OWORD *)(v10 + 13360) = unk_196882130;
  *(_OWORD *)(v10 + 13344) = xmmword_196882120;
  *(_OWORD *)(v10 + 13328) = unk_196882110;
  *(_OWORD *)(v10 + 13312) = xmmword_196882100;
  *(_DWORD *)(a1 + 5336) = 0;
  v11 = *(_DWORD *)(a1 + 2988);
  if (v11 >= 1)
  {
LABEL_5:
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 2976);
    v16 = (int8x16_t)xmmword_196889CC0;
    v17 = (int8x16_t)xmmword_196889CD0;
    v18.i64[0] = 0x800000008;
    v18.i64[1] = 0x800000008;
    v19 = (int8x16_t *)&unk_196889000;
    v20 = (int8x16_t *)&unk_196889000;
    v21.i64[0] = 0x1000000010;
    v21.i64[1] = 0x1000000010;
    v162 = v9;
    while (1)
    {
      v22 = v15 + 80 * v12;
      LODWORD(v23) = *(_DWORD *)(v22 + 72);
      LODWORD(v22) = *(_DWORD *)(v22 + 76);
      v23 = (int)v23;
      if ((int)v23 <= (int)v22)
        break;
LABEL_6:
      if (++v12 >= v11)
        goto LABEL_101;
    }
    v24 = v15 + 80 * v12;
    v25 = *(unsigned __int8 **)v24;
    v26 = *(_QWORD *)(v24 + 8);
    v163 = v12;
    while (1)
    {
      if ((_DWORD)v22 == (_DWORD)v23)
      {
        v28 = v26;
        goto LABEL_34;
      }
      v29 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 524);
      v30 = v26 >= v29;
      v26 -= v29;
      if (!v30)
        return 4294967274;
      if (!(_DWORD)v29)
      {
        v28 = 1;
        if (!v26)
          return 4294967274;
        goto LABEL_34;
      }
      if (v29 < 8)
      {
        LODWORD(v31) = 0;
        v32 = 0;
        v33 = v25;
        goto LABEL_31;
      }
      if (v29 >= 0x10)
      {
        v34 = v29 & 0xFFFFFFF0;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = v34;
        v39 = (int8x16_t *)v25;
        a8 = (int32x4_t)xmmword_196889B70;
        v40 = (int32x4_t)xmmword_196889B60;
        v41 = (int32x4_t)xmmword_196889B90;
        v42 = (int32x4_t)xmmword_196889B80;
        v43 = 0uLL;
        v44 = 0uLL;
        v45 = 0uLL;
        v46 = 0uLL;
        v47 = 0uLL;
        v48 = 0uLL;
        do
        {
          v49 = *v39++;
          v50 = vshlq_u32((uint32x4_t)vqtbl1q_s8(v49, v17), (uint32x4_t)vshlq_n_s32(v40, 3uLL));
          v51 = vshlq_u32((uint32x4_t)vqtbl1q_s8(v49, v16), (uint32x4_t)vshlq_n_s32(a8, 3uLL));
          v52 = vshlq_u32((uint32x4_t)vqtbl1q_s8(v49, v20[203]), (uint32x4_t)vshlq_n_s32(v41, 3uLL));
          v53 = vshlq_u32((uint32x4_t)vqtbl1q_s8(v49, v19[202]), (uint32x4_t)vshlq_n_s32(v42, 3uLL));
          v54.i64[0] = v53.u32[0];
          v54.i64[1] = v53.u32[1];
          v55 = v54;
          v54.i64[0] = v53.u32[2];
          v54.i64[1] = v53.u32[3];
          v56 = v54;
          v54.i64[0] = v52.u32[0];
          v54.i64[1] = v52.u32[1];
          v57 = v54;
          v54.i64[0] = v51.u32[0];
          v54.i64[1] = v51.u32[1];
          v58 = v54;
          v54.i64[0] = v50.u32[0];
          v54.i64[1] = v50.u32[1];
          v59 = v54;
          v54.i64[0] = v52.u32[2];
          v54.i64[1] = v52.u32[3];
          v60 = v54;
          v54.i64[0] = v51.u32[2];
          v54.i64[1] = v51.u32[3];
          v61 = v54;
          v54.i64[0] = v50.u32[2];
          v54.i64[1] = v50.u32[3];
          v44 = vorrq_s8(v44, v54);
          v37 = vorrq_s8(v37, v61);
          v46 = vorrq_s8(v46, v60);
          v43 = vorrq_s8(v43, v59);
          v36 = vorrq_s8(v36, v58);
          v45 = vorrq_s8(v45, v57);
          v48 = vorrq_s8(v48, v56);
          v47 = vorrq_s8(v47, v55);
          a8 = vaddq_s32(a8, v21);
          v40 = vaddq_s32(v40, v21);
          v41 = vaddq_s32(v41, v21);
          v42 = vaddq_s32(v42, v21);
          v38 -= 16;
        }
        while (v38);
        v62 = vorrq_s8(vorrq_s8(vorrq_s8(v36, v45), vorrq_s8(v43, v47)), vorrq_s8(vorrq_s8(v37, v46), vorrq_s8(v44, v48)));
        v32 = vorr_s8(*(int8x8_t *)v62.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
        if (v34 == v29)
          goto LABEL_33;
        if ((v29 & 8) == 0)
        {
          v33 = &v25[v34];
          LODWORD(v31) = v29 & 0xFFFFFFF0;
LABEL_31:
          v80 = v29 - v31;
          v81 = 8 * v31;
          do
          {
            v82 = *v33++;
            *(_QWORD *)&v32 |= (v82 << v81);
            v81 += 8;
            --v80;
          }
          while (v80);
          goto LABEL_33;
        }
        v35 = v29 & 0xFFFFFFF0;
      }
      else
      {
        v32 = 0;
        LODWORD(v34) = 0;
        v35 = 0;
      }
      v31 = v29 & 0xFFFFFFF8;
      v33 = &v25[v31];
      v63 = vdupq_n_s32(v34);
      v64 = vaddq_s32(v63, (int32x4_t)xmmword_196889B60);
      v65 = vaddq_s32(v63, (int32x4_t)xmmword_196889B70);
      v66 = 0uLL;
      v67 = (int8x16_t)(unint64_t)v32;
      v68 = (unint64_t *)&v25[v35];
      v69 = v35 - v31;
      v70 = 0uLL;
      v71 = 0uLL;
      do
      {
        v72 = *v68++;
        a8.i64[0] = v72;
        v73 = (uint32x4_t)vqtbl1q_s8((int8x16_t)a8, v16);
        a8 = (int32x4_t)vshlq_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a8, v17), (uint32x4_t)vshlq_n_s32(v64, 3uLL));
        v74 = vshlq_u32(v73, (uint32x4_t)vshlq_n_s32(v65, 3uLL));
        v75.i64[0] = v74.u32[0];
        v75.i64[1] = v74.u32[1];
        v76 = v75;
        v75.i64[0] = a8.u32[0];
        v75.i64[1] = a8.u32[1];
        v77 = v75;
        v75.i64[0] = v74.u32[2];
        v75.i64[1] = v74.u32[3];
        v78 = v75;
        v75.i64[0] = a8.u32[2];
        a8.i64[1] = a8.u32[3];
        v75.i64[1] = a8.i64[1];
        v71 = vorrq_s8(v71, v75);
        v66 = vorrq_s8(v66, v78);
        v70 = vorrq_s8(v70, v77);
        v67 = vorrq_s8(v67, v76);
        v65 = vaddq_s32(v65, v18);
        v64 = vaddq_s32(v64, v18);
        v69 += 8;
      }
      while (v69);
      v79 = vorrq_s8(vorrq_s8(v67, v70), vorrq_s8(v66, v71));
      v32 = vorr_s8(*(int8x8_t *)v79.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL));
      if (v31 != v29)
        goto LABEL_31;
LABEL_33:
      v25 += (v29 - 1) + 1;
      v28 = *(_QWORD *)&v32 + 1;
      if (*(_QWORD *)&v32 + 1 > v26)
        return 4294967274;
LABEL_34:
      v165 = v26;
      if (*(_DWORD *)(v9 + 8) < 2u)
        v83 = 0;
      else
        v83 = *(_DWORD *)(*(_QWORD *)(a1 + 4248) + 4 * v23);
      v84 = *(_QWORD *)(a1 + 3128);
      v85 = v84 + 14592 * v23;
      v86 = *(_QWORD *)(a1 + 24);
      v87 = *(unsigned __int16 *)(v86 + 560 + 2 * v13);
      v88 = *(_QWORD *)(a1 + 8);
      v89 = *(unsigned __int16 *)(v86 + 560 + 2 * (v13 + 1));
      v86 += 690;
      v90 = *(unsigned __int16 *)(v86 + 2 * v14);
      v91 = *(unsigned __int16 *)(v86 + 2 * (v14 + 1));
      v92 = *(_DWORD *)(a1 + 3300);
      v93 = (unsigned __int8 *)&ss_size_mul + 2 * *(unsigned int *)(a1 + 2056);
      v94 = *(_QWORD *)(a1 + 4216);
      v95 = *(_QWORD *)(a1 + 4224);
      v168 = v90;
      v164 = *(_DWORD *)(v88 + 1012) == 0;
      v166 = v89;
      v167 = v91;
      if (v95)
      {
        v96 = v95 + ((*v93 * (unint64_t)v83) >> (*(_DWORD *)(v88 + 32) == 0));
        if (v94)
        {
          v97 = v94 + ((v93[1] * (unint64_t)v83) >> 2);
          v98 = (_QWORD *)(v84 + 14592 * v23);
          v98[1737] = v97;
          v98[1738] = v96;
          v98[1739] = v97;
          v98[1740] = v96;
          if (*(_QWORD *)(a1 + 2928))
            goto LABEL_40;
        }
        else
        {
          v110 = (_QWORD *)(v84 + 14592 * v23);
          v110[1737] = 0;
          v110[1738] = v96;
          v110[1739] = 0;
          v110[1740] = v96;
          if (*(_QWORD *)(a1 + 2928))
            goto LABEL_40;
        }
      }
      else if (v94)
      {
        v99 = v94 + ((v93[1] * (unint64_t)v83) >> 2);
        v100 = (_QWORD *)(v84 + 14592 * v23);
        v100[1737] = v99;
        v100[1738] = 0;
        v100[1739] = v99;
        v100[1740] = 0;
        if (*(_QWORD *)(a1 + 2928))
          goto LABEL_40;
      }
      else
      {
        *(_OWORD *)(v85 + 13896) = 0u;
        *(_OWORD *)(v85 + 13912) = 0u;
        if (*(_QWORD *)(a1 + 2928))
        {
LABEL_40:
          memcpy((void *)(v84 + 14592 * v23), *(const void **)(a1 + 2936), 0x3600uLL);
          goto LABEL_44;
        }
      }
      memcpy((void *)(v84 + 14592 * v23), &av1_default_cdf, 0x1860uLL);
      memcpy((void *)(v85 + 6240), &default_kf_y_mode_cdf, 0x320uLL);
      memcpy((void *)(v85 + 7040), (char *)&av1_default_coef_cdf + 6208 * *(unsigned int *)(a1 + 2936), 0x1840uLL);
      *(_QWORD *)(v85 + 13504) = 0x348054007000;
      *(_QWORD *)(v85 + 13792) = 0x348054007000;
      *(_OWORD *)(v85 + 13728) = xmmword_196882100;
      *(_OWORD *)(v85 + 13744) = unk_196882110;
      *(_OWORD *)(v85 + 13760) = xmmword_196882120;
      *(_OWORD *)(v85 + 13776) = unk_196882130;
      *(_OWORD *)(v85 + 13664) = default_mv_component_cdf;
      *(_OWORD *)(v85 + 13680) = unk_1968820D0;
      a8.i64[1] = 0x21C02D005000;
      *(_OWORD *)(v85 + 13696) = xmmword_1968820E0;
      *(_OWORD *)(v85 + 13712) = unk_1968820F0;
      *(_OWORD *)(v85 + 13648) = unk_196882130;
      *(_OWORD *)(v85 + 13632) = xmmword_196882120;
      *(_OWORD *)(v85 + 13616) = unk_196882110;
      *(_OWORD *)(v85 + 13600) = xmmword_196882100;
      *(_OWORD *)(v85 + 13584) = unk_1968820F0;
      *(_OWORD *)(v85 + 13568) = xmmword_1968820E0;
      *(_OWORD *)(v85 + 13552) = unk_1968820D0;
      *(_OWORD *)(v85 + 13536) = default_mv_component_cdf;
      *(_OWORD *)(v85 + 13376) = default_mv_component_cdf;
      *(_OWORD *)(v85 + 13392) = unk_1968820D0;
      *(_OWORD *)(v85 + 13408) = xmmword_1968820E0;
      *(_OWORD *)(v85 + 13424) = unk_1968820F0;
      *(_OWORD *)(v85 + 13440) = xmmword_196882100;
      *(_OWORD *)(v85 + 13456) = unk_196882110;
      *(_OWORD *)(v85 + 13472) = xmmword_196882120;
      *(_OWORD *)(v85 + 13488) = unk_196882130;
      *(_OWORD *)(v85 + 13296) = unk_1968820F0;
      *(_OWORD *)(v85 + 13280) = xmmword_1968820E0;
      *(_OWORD *)(v85 + 13264) = unk_1968820D0;
      *(_OWORD *)(v85 + 13248) = default_mv_component_cdf;
      *(_OWORD *)(v85 + 13360) = unk_196882130;
      *(_OWORD *)(v85 + 13344) = xmmword_196882120;
      *(_OWORD *)(v85 + 13328) = unk_196882110;
      *(_OWORD *)(v85 + 13312) = xmmword_196882100;
LABEL_44:
      v101 = v84 + 14592 * v23;
      *(_DWORD *)(v101 + 14040) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 824);
      *(_DWORD *)(v101 + 14044) = 0;
      v102 = (unsigned __int8 **)(v101 + 13824);
      v103 = *(_DWORD **)(a1 + 24);
      v104 = v103[72];
      *(_QWORD *)(v101 + 13824) = v25;
      v105 = &v25[v28];
      *(_QWORD *)(v101 + 13832) = &v25[v28];
      v106 = (unint64_t *)(v101 + 13840);
      v107 = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v101 + 13840) = 0x7FFFFFFFFFFFFFFFLL;
      v108 = (int *)(v101 + 13852);
      *(_QWORD *)(v101 + 13848) = 0xFFFFFFF100008000;
      *(_DWORD *)(v101 + 13856) = v104 == 0;
      v17 = (int8x16_t)xmmword_196889CD0;
      v16 = (int8x16_t)xmmword_196889CC0;
      v18.i64[0] = 0x800000008;
      v18.i64[1] = 0x800000008;
      v21.i64[0] = 0x1000000010;
      v21.i64[1] = 0x1000000010;
      if (v28 < 1)
      {
        v109 = -15;
      }
      else
      {
        v107 = ((unint64_t)*v25 << 55) ^ 0x7FFFFFFFFFFFFFFFLL;
        if (v28 < 2)
        {
          v109 = -7;
          ++v25;
        }
        else
        {
          v107 ^= (unint64_t)v25[1] << 47;
          if (v28 == 2)
          {
            v25 += 2;
            v109 = 1;
          }
          else
          {
            v107 ^= (unint64_t)v25[2] << 39;
            if (v28 < 4)
            {
              v25 += 3;
              v109 = 9;
            }
            else
            {
              v107 ^= (unint64_t)v25[3] << 31;
              if (v28 == 4)
              {
                v25 += 4;
                v109 = 17;
              }
              else
              {
                v107 ^= (unint64_t)v25[4] << 23;
                if (v28 < 6)
                {
                  v25 += 5;
                  v109 = 25;
                }
                else
                {
                  v107 ^= (unint64_t)v25[5] << 15;
                  if (v28 == 6)
                  {
                    v25 += 6;
                    v109 = 33;
                  }
                  else
                  {
                    v111 = v25[6];
                    v25 += 7;
                    v107 ^= v111 << 7;
                    v109 = 41;
                  }
                }
              }
            }
          }
        }
      }
      *v106 = v107;
      *v108 = v109;
      *v102 = v25;
      v112 = (_DWORD *)(v84 + 14592 * v23);
      v112[3471] = v14;
      v112[3470] = v13;
      v113 = v87 << v92;
      v112[3466] = v87 << v92;
      v114 = v166 << v92;
      if (v166 << v92 >= *(_DWORD *)(a1 + 3280))
        v114 = *(_DWORD *)(a1 + 3280);
      v112[3467] = v114;
      v115 = v168 << v92;
      v112[3468] = v168 << v92;
      v116 = v167 << v92;
      if (v167 << v92 >= *(_DWORD *)(a1 + 3284))
        v116 = *(_DWORD *)(a1 + 3284);
      v112[3469] = v116;
      v117 = v115 >> 5;
      if (v103[59] == v103[60])
      {
        v118 = (v87 >> v164) + *(_DWORD *)(a1 + 3288) * v117;
        v119 = v118;
        v120 = (v115 >> 3) & 2 | (v113 >> 4) & 1;
        v121 = *(_DWORD *)(a1 + 5192);
        if ((v121 & 1) != 0)
        {
          v122 = *(_QWORD *)(a1 + 4272) + 120 * v118 + 10 * v120;
          goto LABEL_73;
        }
      }
      else
      {
        v123 = *(_DWORD *)(a1 + 3308);
        v118 = v123 * v117;
        v120 = (v115 >> 3) & 2;
        v119 = v118;
        v121 = *(_DWORD *)(a1 + 5192);
        if ((v121 & 1) != 0)
        {
          v124 = (int)((8 << v103[346]) + 4 * v113 * v103[113] - 1) >> (v103[346] + 3) << v103[346];
          if (v124 >> 7 < v123)
          {
            v122 = *(_QWORD *)(a1 + 4272) + 120 * ((v124 >> 7) + v118) + 10 * ((v124 >> 6) & 1 | v120);
LABEL_73:
            v9 = v162;
            v12 = v163;
            v19 = (int8x16_t *)&unk_196889000;
            v20 = (int8x16_t *)&unk_196889000;
            v125 = v13 + 1;
            v127 = v165;
            v126 = v14 + 1;
            v128 = v84 + 14592 * v23;
            *(_QWORD *)(v128 + 14568) = v122;
            *(_BYTE *)(v122 + 4) = 3;
            *(_BYTE *)(*(_QWORD *)(v128 + 14568) + 5) = -7;
            *(_BYTE *)(*(_QWORD *)(v128 + 14568) + 6) = 15;
            *(_BYTE *)(*(_QWORD *)(v128 + 14568) + 1) = 3;
            *(_BYTE *)(*(_QWORD *)(v128 + 14568) + 2) = -7;
            *(_BYTE *)(*(_QWORD *)(v128 + 14568) + 3) = 15;
            *(_BYTE *)(*(_QWORD *)(v128 + 14568) + 8) = -32;
            *(_BYTE *)(*(_QWORD *)(v128 + 14568) + 9) = 31;
            v121 = *(_DWORD *)(a1 + 5192);
            v129 = v112 + 3466;
            if ((v121 & 2) == 0)
              goto LABEL_83;
            goto LABEL_76;
          }
        }
      }
      v9 = v162;
      v12 = v163;
      v19 = (int8x16_t *)&unk_196889000;
      v20 = (int8x16_t *)&unk_196889000;
      v125 = v13 + 1;
      v127 = v165;
      v126 = v14 + 1;
      v129 = v112 + 3466;
      if ((v121 & 2) == 0)
        goto LABEL_83;
LABEL_76:
      v130 = *(_DWORD **)(a1 + 24);
      if (v130[59] == v130[60])
      {
        v131 = *(_QWORD *)(a1 + 4272) + 120 * v119 + 10 * v120;
LABEL_82:
        v139 = v131 + 40;
        v140 = v84 + 14592 * v23;
        *(_QWORD *)(v140 + 14576) = v139;
        *(_BYTE *)(v139 + 4) = 3;
        *(_BYTE *)(*(_QWORD *)(v140 + 14576) + 5) = -7;
        *(_BYTE *)(*(_QWORD *)(v140 + 14576) + 6) = 15;
        *(_BYTE *)(*(_QWORD *)(v140 + 14576) + 1) = 3;
        *(_BYTE *)(*(_QWORD *)(v140 + 14576) + 2) = -7;
        *(_BYTE *)(*(_QWORD *)(v140 + 14576) + 3) = 15;
        *(_BYTE *)(*(_QWORD *)(v140 + 14576) + 8) = -32;
        *(_BYTE *)(*(_QWORD *)(v140 + 14576) + 9) = 31;
        v121 = *(_DWORD *)(a1 + 5192);
        goto LABEL_83;
      }
      v132 = *(_DWORD *)(a1 + 2056);
      v133 = v132 == 3;
      v134 = v130[113];
      v135 = v130[347];
      v136 = (8 << v135) + ((4 * v134 * *v129) >> (v132 != 3));
      v137 = v135 + 3;
      if (!v133)
        LOBYTE(v135) = v135 + 1;
      v138 = (v136 - 1) >> v137 << v135;
      if (v138 >> 7 < *(_DWORD *)(a1 + 3308))
      {
        v131 = *(_QWORD *)(a1 + 4272) + 120 * ((v138 >> 7) + v118) + 10 * (((v138 >> 6) & 1) + v120);
        goto LABEL_82;
      }
LABEL_83:
      if ((v121 & 4) != 0)
      {
        v141 = *(_DWORD **)(a1 + 24);
        if (v141[59] == v141[60])
        {
          v142 = *(_QWORD *)(a1 + 4272) + 120 * v119 + 10 * v120;
        }
        else
        {
          v143 = *(_DWORD *)(a1 + 2056);
          v133 = v143 == 3;
          v144 = v141[113];
          v145 = v141[347];
          v146 = (8 << v145) + ((4 * v144 * *v129) >> (v143 != 3));
          v147 = v145 + 3;
          if (!v133)
            LOBYTE(v145) = v145 + 1;
          v148 = (v146 - 1) >> v147 << v145;
          if (v148 >> 7 >= *(_DWORD *)(a1 + 3308))
            goto LABEL_91;
          v142 = *(_QWORD *)(a1 + 4272) + 120 * ((v148 >> 7) + v118) + 10 * (((v148 >> 6) & 1) + v120);
        }
        v149 = v142 + 80;
        v150 = v84 + 14592 * v23;
        *(_QWORD *)(v150 + 14584) = v149;
        *(_BYTE *)(v149 + 4) = 3;
        *(_BYTE *)(*(_QWORD *)(v150 + 14584) + 5) = -7;
        *(_BYTE *)(*(_QWORD *)(v150 + 14584) + 6) = 15;
        *(_BYTE *)(*(_QWORD *)(v150 + 14584) + 1) = 3;
        *(_BYTE *)(*(_QWORD *)(v150 + 14584) + 2) = -7;
        *(_BYTE *)(*(_QWORD *)(v150 + 14584) + 3) = 15;
        *(_BYTE *)(*(_QWORD *)(v150 + 14584) + 8) = -32;
        *(_BYTE *)(*(_QWORD *)(v150 + 14584) + 9) = 31;
      }
LABEL_91:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 3120) + 24) > 1u)
        *(int32x2_t *)(v84 + 14592 * v23 + 13888) = vdup_n_s32(v168);
      v151 = *(_DWORD **)(a1 + 24);
      if (v125 == v151[135])
      {
        v14 = v126;
        v13 = 0;
      }
      else
      {
        v13 = v125;
      }
      if (v151[205] == (_DWORD)v23 && v151[129])
        *(_DWORD *)(a1 + 5336) = 1;
      v26 = v127 - v28;
      v15 = *(_QWORD *)(a1 + 2976);
      v22 = *(int *)(v15 + 80 * v12 + 76);
      v25 = v105;
      if (v23++ >= v22)
      {
        v11 = *(_DWORD *)(a1 + 2988);
        goto LABEL_6;
      }
    }
  }
LABEL_101:
  if (*(_DWORD *)(v9 + 24) >= 2u)
  {
    v153 = *(_DWORD *)(v9 + 8);
    v154 = v153 > 1;
    v155 = *(_QWORD *)(a1 + 24);
    v156 = *(_DWORD *)(v155 + 556) * *(_DWORD *)(a1 + 3288);
    if (v156 << (v153 > 1) >= 1)
    {
      if (v153 <= 1)
      {
        v160 = 0;
        v161 = 0;
        do
        {
          reset_context((_OWORD *)(*(_QWORD *)(a1 + 3864) + v160), (*(_DWORD *)(v155 + 232) & 1) == 0, 0);
          ++v161;
          v155 = *(_QWORD *)(a1 + 24);
          v160 += 624;
        }
        while (v161 < (*(_DWORD *)(v155 + 556) * *(_DWORD *)(a1 + 3288)) << v154);
      }
      else
      {
        v157 = 0;
        v158 = 0;
        do
        {
          if (v158 < v156)
            v159 = 1;
          else
            v159 = 2;
          reset_context((_OWORD *)(*(_QWORD *)(a1 + 3864) + v157), (*(_DWORD *)(v155 + 232) & 1) == 0, v159);
          ++v158;
          v155 = *(_QWORD *)(a1 + 24);
          v156 = *(_DWORD *)(v155 + 556) * *(_DWORD *)(a1 + 3288);
          v157 += 624;
        }
        while (v158 < v156 << v154);
      }
    }
  }
  return 0;
}

void dav1d_decode_frame_exit(uint64_t *a1, int a2)
{
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;

  if (a1[284])
    *((_DWORD *)a1 + 1335) = 0;
  if (a2)
  {
    if (*(_DWORD *)(a1[390] + 8) >= 2u)
    {
      v4 = (void *)a1[528];
      if (v4)
        bzero(v4, (*((int *)a1 + 1061) & 0x3FFFFFFFFFFFFLL) << 13);
    }
  }
  if (a1[6])
  {
    dav1d_picture_unref_internal((uint64_t)(a1 + 4));
    a1[38] = 0;
  }
  v5 = a1[326];
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 16);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      v9 = *(_DWORD *)(v5 + 20);
      (*(void (**)(_QWORD, _QWORD))(v5 + 24))(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 32));
      if (v9)
        free((void *)v5);
    }
    a1[326] = 0;
  }
  if (a1[41])
  {
    dav1d_picture_unref_internal((uint64_t)(a1 + 39));
    a1[73] = 0;
  }
  v10 = a1[327];
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 16);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      v14 = *(_DWORD *)(v10 + 20);
      (*(void (**)(_QWORD, _QWORD))(v10 + 24))(*(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 32));
      if (v14)
        free((void *)v10);
    }
    a1[327] = 0;
  }
  if (a1[76])
  {
    dav1d_picture_unref_internal((uint64_t)(a1 + 74));
    a1[108] = 0;
  }
  v15 = a1[328];
  if (v15)
  {
    v16 = (unsigned int *)(v15 + 16);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      v19 = *(_DWORD *)(v15 + 20);
      (*(void (**)(_QWORD, _QWORD))(v15 + 24))(*(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 32));
      if (v19)
        free((void *)v15);
    }
    a1[328] = 0;
  }
  if (a1[111])
  {
    dav1d_picture_unref_internal((uint64_t)(a1 + 109));
    a1[143] = 0;
  }
  v20 = a1[329];
  if (v20)
  {
    v21 = (unsigned int *)(v20 + 16);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      v24 = *(_DWORD *)(v20 + 20);
      (*(void (**)(_QWORD, _QWORD))(v20 + 24))(*(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 32));
      if (v24)
        free((void *)v20);
    }
    a1[329] = 0;
  }
  if (a1[146])
  {
    dav1d_picture_unref_internal((uint64_t)(a1 + 144));
    a1[178] = 0;
  }
  v25 = a1[330];
  if (v25)
  {
    v26 = (unsigned int *)(v25 + 16);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      v29 = *(_DWORD *)(v25 + 20);
      (*(void (**)(_QWORD, _QWORD))(v25 + 24))(*(_QWORD *)(v25 + 8), *(_QWORD *)(v25 + 32));
      if (v29)
        free((void *)v25);
    }
    a1[330] = 0;
  }
  if (a1[181])
  {
    dav1d_picture_unref_internal((uint64_t)(a1 + 179));
    a1[213] = 0;
  }
  v30 = a1[331];
  if (v30)
  {
    v31 = (unsigned int *)(v30 + 16);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      v34 = *(_DWORD *)(v30 + 20);
      (*(void (**)(_QWORD, _QWORD))(v30 + 24))(*(_QWORD *)(v30 + 8), *(_QWORD *)(v30 + 32));
      if (v34)
        free((void *)v30);
    }
    a1[331] = 0;
  }
  if (a1[216])
  {
    dav1d_picture_unref_internal((uint64_t)(a1 + 214));
    a1[248] = 0;
  }
  v35 = a1[332];
  if (v35)
  {
    v36 = (unsigned int *)(v35 + 16);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      v39 = *(_DWORD *)(v35 + 20);
      (*(void (**)(_QWORD, _QWORD))(v35 + 24))(*(_QWORD *)(v35 + 8), *(_QWORD *)(v35 + 32));
      if (v39)
        free((void *)v35);
    }
    a1[332] = 0;
  }
  dav1d_picture_unref_internal((uint64_t)(a1 + 249));
  dav1d_picture_unref_internal((uint64_t)(a1 + 282));
  a1[316] = 0;
  v40 = a1[366];
  if (v40)
  {
    v41 = (unsigned int *)(v40 + 16);
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      v44 = *(_DWORD *)(v40 + 20);
      (*(void (**)(_QWORD, _QWORD))(v40 + 24))(*(_QWORD *)(v40 + 8), *(_QWORD *)(v40 + 32));
      if (v44)
        free((void *)v40);
    }
  }
  a1[366] = 0;
  a1[367] = 0;
  a1[368] = 0;
  v45 = a1[3];
  if (v45 && *(_DWORD *)(v45 + 516))
  {
    v46 = a1 + 369;
    v47 = (unsigned int *)a1[371];
    if (v47)
    {
      if (a2)
        v48 = 2147483646;
      else
        v48 = 1;
      atomic_store(v48, v47);
    }
    v49 = *v46;
    if (*v46)
    {
      v50 = (unsigned int *)(v49 + 16);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        v53 = *(_DWORD *)(v49 + 20);
        (*(void (**)(_QWORD, _QWORD))(v49 + 24))(*(_QWORD *)(v49 + 8), *(_QWORD *)(v49 + 32));
        if (v53)
          free((void *)v49);
      }
    }
    *v46 = 0;
    a1[370] = 0;
    a1[371] = 0;
  }
  v54 = a1[333];
  if (v54)
  {
    v55 = (unsigned int *)(v54 + 16);
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      v58 = *(_DWORD *)(v54 + 20);
      (*(void (**)(_QWORD, _QWORD))(v54 + 24))(*(_QWORD *)(v54 + 8), *(_QWORD *)(v54 + 32));
      if (v58)
        free((void *)v54);
    }
    a1[333] = 0;
  }
  v59 = a1[334];
  if (v59)
  {
    v60 = (unsigned int *)(v59 + 16);
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      v63 = *(_DWORD *)(v59 + 20);
      (*(void (**)(_QWORD, _QWORD))(v59 + 24))(*(_QWORD *)(v59 + 8), *(_QWORD *)(v59 + 32));
      if (v63)
        free((void *)v59);
    }
    a1[334] = 0;
  }
  v64 = a1[317];
  if (v64)
  {
    v65 = (unsigned int *)(v64 + 16);
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      v68 = *(_DWORD *)(v64 + 20);
      (*(void (**)(_QWORD, _QWORD))(v64 + 24))(*(_QWORD *)(v64 + 8), *(_QWORD *)(v64 + 32));
      if (v68)
        free((void *)v64);
    }
    a1[317] = 0;
  }
  v69 = *a1;
  if (*a1)
  {
    v70 = (unsigned int *)(v69 + 16);
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
    {
      v73 = *(_DWORD *)(v69 + 20);
      (*(void (**)(_QWORD, _QWORD))(v69 + 24))(*(_QWORD *)(v69 + 8), *(_QWORD *)(v69 + 32));
      if (v73)
        free((void *)v69);
    }
    *a1 = 0;
  }
  v74 = a1[2];
  if (v74)
  {
    v75 = (unsigned int *)(v74 + 16);
    do
    {
      v76 = __ldaxr(v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, v75));
    if (!v77)
    {
      v78 = *(_DWORD *)(v74 + 20);
      (*(void (**)(_QWORD, _QWORD))(v74 + 24))(*(_QWORD *)(v74 + 8), *(_QWORD *)(v74 + 32));
      if (v78)
        free((void *)v74);
    }
    a1[2] = 0;
  }
  if (*((int *)a1 + 747) >= 1)
  {
    v79 = 0;
    v80 = 0;
    do
    {
      dav1d_data_unref_internal(a1[372] + v79);
      ++v80;
      v79 += 80;
    }
    while (v80 < *((int *)a1 + 747));
  }
  *((_DWORD *)a1 + 1333) = a2;
}

uint64_t dav1d_submit_frame(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  _QWORD *v33;
  int v34;
  uint64_t (**v35)(uint64_t, uint64_t, uint64_t, int, int);
  uint64_t (*v36)(uint64_t, unsigned int, uint64_t);
  void *(*v37)(uint64_t);
  uint64_t (*v38)(uint64_t, int);
  uint64_t (*v39)(uint64_t, int);
  uint64_t (*v40)(uint64_t, int);
  void *v41;
  uint64_t (*v42)(uint64_t, int);
  uint64_t (*v43)(uint64_t, int);
  uint64_t (*v44)(uint64_t, int, int, _BYTE *);
  uint64_t (*v45)(uint64_t, unsigned int, uint64_t);
  uint64_t inited;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  BOOL v75;
  BOOL v76;
  uint64_t v77;
  _DWORD *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int *v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  int v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  int v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  void *v106;
  FILE *v107;
  const char *v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  _DWORD *v130;
  int v131;
  int v132;
  int v133;
  int v134;
  BOOL v135;
  char v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  signed int v144;
  unsigned int v145;
  int v146;
  int v147;
  char v148;
  int v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  int v155;
  _QWORD **v156;
  _QWORD *v157;
  unsigned int *v158;
  unsigned int v159;
  __int128 *v160;
  __int128 v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD **v165;
  unsigned int *v166;
  unsigned int v167;
  __int128 *v168;
  __int128 v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD **v173;
  unsigned int *v174;
  unsigned int v175;
  __int128 *v176;
  __int128 v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD **v181;
  unsigned int *v182;
  unsigned int v183;
  __int128 *v184;
  __int128 v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD **v189;
  unsigned int *v190;
  unsigned int v191;
  __int128 *v192;
  __int128 v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD **v197;
  unsigned int *v198;
  unsigned int v199;
  __int128 *v200;
  __int128 v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD **v205;
  unsigned int *v206;
  unsigned int v207;
  __int128 *v208;
  __int128 v209;
  uint64_t v210;
  _QWORD *v211;
  unsigned int *v212;
  unsigned int v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int v218;
  size_t v219;
  void **v220;
  void *v221;
  uint64_t v222;
  __int128 v223;
  _OWORD *v224;
  uint64_t *v225;
  uint64_t v226;
  unsigned int *v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  unsigned int *v235;
  unsigned int v236;
  uint64_t *v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  int v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  uint64_t *v246;
  uint64_t v247;
  unsigned int *v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  uint64_t v252;
  unsigned int *v253;
  unsigned int v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  int32x4_t v261;
  _QWORD *v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int v265;
  int v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  unsigned int v270;
  int v271;
  uint64_t v272;
  unsigned int *v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  uint64_t v277;
  unsigned int *v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  uint64_t v282;
  unsigned int *v283;
  unsigned int v284;
  unsigned int v285;
  int v286;
  uint64_t v287;
  unsigned int *v288;
  unsigned int v289;
  unsigned int v290;
  int v291;
  uint64_t v292;
  unsigned int *v293;
  unsigned int v294;
  unsigned int v295;
  int v296;
  uint64_t v297;
  unsigned int *v298;
  unsigned int v299;
  unsigned int v300;
  int v301;
  uint64_t v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int v305;
  int v306;
  _QWORD *v307;
  uint64_t v308;
  unsigned int *v309;
  unsigned int v310;
  unsigned int v311;
  int v312;
  uint64_t v313;
  unsigned int *v314;
  unsigned int v315;
  unsigned int v316;
  int v317;
  uint64_t v318;
  unsigned int *v319;
  unsigned int v320;
  unsigned int v321;
  int v322;
  uint64_t v323;
  unsigned int *v324;
  unsigned int v325;
  unsigned int v326;
  int v327;
  __int128 v328;
  uint64_t v329;
  unsigned int *v330;
  unsigned int v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _DWORD *v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  int v352;
  int v353;
  uint64_t v354;
  int v355;
  int v356;
  uint64_t *v357;
  uint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  _QWORD *v363;
  _QWORD *v364;
  _QWORD *v365;
  _QWORD *v366;
  _QWORD *v367;
  uint64_t *v368;
  _QWORD *v369;
  int *v370;
  int v371;
  int v372;
  unsigned int v373;
  _DWORD v374[7];
  uint64_t v375;

  v375 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 88812;
  v3 = a1 + 52184;
  v367 = (_QWORD *)(a1 + 51856);
  v366 = (_QWORD *)(a1 + 51528);
  v365 = (_QWORD *)(a1 + 51200);
  v364 = (_QWORD *)(a1 + 50872);
  v363 = (_QWORD *)(a1 + 50544);
  v362 = (_QWORD *)(a1 + 50216);
  v368 = (uint64_t *)(a1 + 49856);
  if (*(_DWORD *)(a1 + 8) < 2u)
  {
    v9 = 0;
    v7 = *(_QWORD *)a1;
    goto LABEL_35;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 832));
  v4 = *(_DWORD *)(a1 + 808);
  if (v4 + 1 == *(_DWORD *)(a1 + 8))
    v5 = 0;
  else
    v5 = v4 + 1;
  *(_DWORD *)(a1 + 808) = v5;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 5392 * v4;
  if (*(int *)(v7 + 2988) >= 1)
  {
    do
      pthread_cond_wait((pthread_cond_t *)(v6 + 5392 * v4 + 5200), (pthread_mutex_t *)(a1 + 832));
    while (*(int *)(v7 + 2988) > 0);
  }
  v8 = *(_QWORD *)(a1 + 800);
  v9 = v8 + 280 * v4;
  if (*(_QWORD *)(v9 + 16) || (v10 = atomic_load((unsigned int *)(v6 + 5392 * v4 + 5340))) != 0)
  {
    v11 = (unsigned int *)(a1 + 944);
    v12 = atomic_load((unsigned int *)(a1 + 944));
    if (v12 + 1 >= *(_DWORD *)(a1 + 8))
    {
      atomic_store(0, v11);
      v14 = *(_DWORD *)(a1 + 948);
      if (!v14)
        goto LABEL_17;
    }
    else
    {
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 + 1, v11));
      v14 = *(_DWORD *)(a1 + 948);
      if (!v14)
        goto LABEL_17;
    }
    if (v14 < *(_DWORD *)(a1 + 8))
      *(_DWORD *)(a1 + 948) = v14 - 1;
  }
LABEL_17:
  v15 = v6 + 5392 * v4;
  v16 = *(_DWORD *)(v15 + 5332);
  if (v16)
  {
    *(_DWORD *)(v15 + 5332) = 0;
    *(_DWORD *)(v2 + 68) = v16;
    v17 = *(_QWORD *)(v2 + 60);
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 16);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v371 = *(_DWORD *)(v17 + 20);
        (*(void (**)(_QWORD, _QWORD))(v17 + 24))(*(_QWORD *)(v17 + 8), *(_QWORD *)(v17 + 32));
        if (v371)
          free((void *)v17);
      }
      *(_QWORD *)(v2 + 60) = 0;
    }
    v21 = *(_OWORD *)(v9 + 72);
    v22 = *(_OWORD *)(v9 + 104);
    *(_OWORD *)(a1 + 88848) = *(_OWORD *)(v9 + 88);
    *(_OWORD *)(a1 + 88864) = v22;
    *(_OWORD *)(a1 + 88832) = v21;
    v23 = *(_QWORD *)(v2 + 60);
    if (v23)
    {
      v24 = (unsigned int *)(v23 + 16);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
    dav1d_picture_unref_internal(v8 + 280 * v4);
    *(_QWORD *)(v8 + 280 * v4 + 272) = 0;
  }
  else if (*(_QWORD *)(v9 + 16))
  {
    v26 = v8 + 280 * v4;
    v27 = (_QWORD *)(v26 + 272);
    if ((*(_DWORD *)(v26 + 264) || *(_DWORD *)v2) && *(_DWORD *)(*(_QWORD *)(v26 + 272) + 4) != -2)
    {
      v28 = (_QWORD *)(v26 + 264);
      dav1d_picture_ref((_QWORD *)(a1 + 224), (_QWORD *)(v8 + 280 * v4));
      *(_QWORD *)(a1 + 496) = *v27;
      *(_QWORD *)(a1 + 488) = *v28;
      *(_DWORD *)(v2 + 16) |= *(_DWORD *)(v8 + 280 * v4 + 268) & 3;
    }
    dav1d_picture_unref_internal(v8 + 280 * v4);
    *v27 = 0;
  }
LABEL_35:
  v29 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)v7 = v29;
  v30 = (unsigned int *)(v29 + 16);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v32 = *(_DWORD *)(*(_QWORD *)(v7 + 8) + 32);
  v33 = (_QWORD *)(a1 + 3368 * v32 + 52696);
  *(_QWORD *)(v7 + 3144) = v33;
  v34 = 2 * v32;
  v372 = 2 * v32 + 8;
  v35 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, int, int))(a1 + 3368 * v32 + 52760);
  if (!*v35)
  {
    if (v34 == 4 || v34 == 2)
    {
      v50 = a1 + 3368 * v32;
      *(_QWORD *)(v50 + 55992) = cdef_find_dir_c;
      *(_QWORD *)(v50 + 56000) = cdef_filter_block_8x8_c;
      *(_QWORD *)(v50 + 56008) = cdef_filter_block_4x8_c;
      *(_QWORD *)(v50 + 56016) = cdef_filter_block_4x4_c;
      dav1d_intra_pred_dsp_init_16bpc(v35);
      dav1d_itx_dsp_init_16bpc((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, signed int))(v50 + 53376));
      *(_QWORD *)(v50 + 55960) = loop_filter_h_sb128y_c;
      *(_QWORD *)(v50 + 55968) = loop_filter_v_sb128y_c;
      *(_QWORD *)(v50 + 55976) = loop_filter_h_sb128uv_c;
      *(_QWORD *)(v50 + 55984) = loop_filter_v_sb128uv_c;
      *(_QWORD *)(v50 + 56032) = wiener_c;
      *(_QWORD *)(v50 + 56024) = wiener_c;
      *(_QWORD *)(v50 + 56040) = sgr_5x5_c;
      *(_QWORD *)(v50 + 56048) = sgr_3x3_c;
      *(_QWORD *)(v50 + 56056) = sgr_mix_c;
      dav1d_mc_dsp_init_16bpc((unint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, signed int))(v50 + 52952));
      v51 = fguv_32x32xn_444_c;
      v52 = fguv_32x32xn_422_c;
      v53 = fguv_32x32xn_420_c;
      v54 = fgy_32x32xn_c;
      v55 = generate_grain_uv_444_c;
      v56 = generate_grain_uv_422_c;
      v57 = generate_grain_uv_420_c;
      v58 = generate_grain_y_c;
    }
    else
    {
      if (v34)
      {
        inited = 4294967254;
        *(_DWORD *)(v7 + 5340) = 1;
        v48 = (_QWORD *)(v7 + 2928);
        v49 = *(_QWORD *)(v7 + 2928);
        if (!v49)
          goto LABEL_305;
        goto LABEL_300;
      }
      v59 = a1 + 3368 * v32;
      *(_QWORD *)(v59 + 55992) = cdef_find_dir_c_0;
      *(_QWORD *)(v59 + 56000) = cdef_filter_block_8x8_c_0;
      *(_QWORD *)(v59 + 56008) = cdef_filter_block_4x8_c_0;
      *(_QWORD *)(v59 + 56016) = cdef_filter_block_4x4_c_0;
      dav1d_intra_pred_dsp_init_8bpc(v35);
      dav1d_itx_dsp_init_8bpc((uint64_t (**)(uint64_t, uint64_t))(v59 + 53376));
      *(_QWORD *)(v59 + 55960) = loop_filter_h_sb128y_c_0;
      *(_QWORD *)(v59 + 55968) = loop_filter_v_sb128y_c_0;
      *(_QWORD *)(v59 + 55976) = loop_filter_h_sb128uv_c_0;
      *(_QWORD *)(v59 + 55984) = loop_filter_v_sb128uv_c_0;
      *(_QWORD *)(v59 + 56032) = wiener_c_0;
      *(_QWORD *)(v59 + 56024) = wiener_c_0;
      *(_QWORD *)(v59 + 56040) = sgr_5x5_c_0;
      *(_QWORD *)(v59 + 56048) = sgr_3x3_c_0;
      *(_QWORD *)(v59 + 56056) = sgr_mix_c_0;
      dav1d_mc_dsp_init_8bpc((char *(**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 52952));
      v51 = fguv_32x32xn_444_c_0;
      v52 = fguv_32x32xn_422_c_0;
      v53 = fguv_32x32xn_420_c_0;
      v54 = fgy_32x32xn_c_0;
      v55 = generate_grain_uv_444_c_0;
      v56 = generate_grain_uv_422_c_0;
      v57 = generate_grain_uv_420_c_0;
      v58 = generate_grain_y_c_0;
    }
    *v33 = v58;
    v33[1] = v57;
    v33[2] = v56;
    v33[3] = v55;
    v33[4] = v54;
    v33[5] = v53;
    v33[6] = v52;
    v33[7] = v51;
    if (*(_DWORD *)(*(_QWORD *)(v7 + 8) + 32))
      goto LABEL_39;
LABEL_50:
    v36 = dav1d_read_coef_blocks_8bpc;
    v37 = dav1d_backup_ipred_edge_8bpc;
    v38 = dav1d_filter_sbrow_lr_8bpc;
    v39 = dav1d_filter_sbrow_resize_8bpc;
    v40 = dav1d_filter_sbrow_cdef_8bpc;
    v41 = dav1d_filter_sbrow_deblock_rows_8bpc;
    v42 = dav1d_filter_sbrow_deblock_cols_8bpc;
    v43 = dav1d_filter_sbrow_8bpc;
    v44 = dav1d_recon_b_intra_8bpc;
    v45 = dav1d_recon_b_inter_8bpc;
    goto LABEL_51;
  }
  if (!*(_DWORD *)(*(_QWORD *)(v7 + 8) + 32))
    goto LABEL_50;
LABEL_39:
  v36 = dav1d_read_coef_blocks_16bpc;
  v37 = dav1d_backup_ipred_edge_16bpc;
  v38 = dav1d_filter_sbrow_lr_16bpc;
  v39 = dav1d_filter_sbrow_resize_16bpc;
  v40 = dav1d_filter_sbrow_cdef_16bpc;
  v41 = dav1d_filter_sbrow_deblock_rows_16bpc;
  v42 = dav1d_filter_sbrow_deblock_cols_16bpc;
  v43 = dav1d_filter_sbrow_16bpc;
  v44 = dav1d_recon_b_intra_16bpc;
  v45 = dav1d_recon_b_inter_16bpc;
LABEL_51:
  *(_QWORD *)(v7 + 3160) = v45;
  *(_QWORD *)(v7 + 3152) = v44;
  *(_QWORD *)(v7 + 3168) = v43;
  *(_QWORD *)(v7 + 3176) = v42;
  *(_QWORD *)(v7 + 3184) = v41;
  *(_QWORD *)(v7 + 3192) = v40;
  *(_QWORD *)(v7 + 3200) = v39;
  *(_QWORD *)(v7 + 3208) = v38;
  *(_QWORD *)(v7 + 3216) = v37;
  *(_QWORD *)(v7 + 3224) = v36;
  v60 = *(_QWORD *)(v7 + 24);
  if ((*(_BYTE *)(v60 + 232) & 1) == 0)
  {
    v61 = *(int *)(v60 + 304);
    if ((_DWORD)v61 == 7)
    {
LABEL_53:
      v62 = *(_DWORD *)(v60 + 824);
      *(_QWORD *)(v7 + 2928) = 0;
      if (v62 >= 21)
      {
        if (v62 >= 0x3D)
        {
          if (v62 < 0x79)
            v90 = 2;
          else
            v90 = 3;
          *(_DWORD *)(v7 + 2936) = v90;
        }
        else
        {
          *(_DWORD *)(v7 + 2936) = 1;
        }
      }
      else
      {
        *(_DWORD *)(v7 + 2936) = 0;
      }
    }
    else
    {
LABEL_101:
      v91 = a1 + 24 * *(int *)(v60 + 4 * v61 + 472) + 52504;
      v92 = *(_OWORD *)v91;
      *(_QWORD *)(v7 + 2944) = *(_QWORD *)(v91 + 16);
      *(_OWORD *)(v7 + 2928) = v92;
      v93 = *(_QWORD *)v91;
      if (v93)
      {
        v94 = (unsigned int *)(v93 + 16);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 + 1, v94));
        v60 = *(_QWORD *)(v7 + 24);
      }
    }
    if (*(_DWORD *)(v60 + 516))
    {
      v96 = *(_DWORD *)(a1 + 8);
      v97 = *(_QWORD *)(v3 + 312);
      v98 = dav1d_mem_pool_pop(v97, (char *)0x3630);
      if (!v98)
      {
        *(_QWORD *)(v7 + 2952) = 0;
        inited = 4294967284;
        *(_DWORD *)(v7 + 5340) = 1;
        v48 = (_QWORD *)(v7 + 2928);
        v49 = *(_QWORD *)(v7 + 2928);
        if (!v49)
          goto LABEL_305;
        goto LABEL_300;
      }
      v99 = *(_QWORD *)v98;
      *((_QWORD *)v98 - 5) = *(_QWORD *)v98;
      *((_QWORD *)v98 - 4) = v97;
      *((_QWORD *)v98 - 3) = 1;
      *((_QWORD *)v98 - 2) = pool_free_callback;
      *((_QWORD *)v98 - 1) = v98;
      *(_QWORD *)(v7 + 2952) = v98 - 40;
      *(_QWORD *)(v7 + 2960) = v99;
      if (v96 >= 2)
      {
        *(_QWORD *)(v7 + 2968) = v99 + 13824;
        *(_DWORD *)(v99 + 13824) = 0;
      }
    }
    v100 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(v7 + 2984) >= v100)
    {
      v102 = *(void **)(v7 + 2976);
    }
    else
    {
      v101 = *(void **)(v7 + 2976);
      if (v101)
      {
        free(v101);
        *(_QWORD *)(v7 + 2976) = 0;
        v100 = *(_DWORD *)(a1 + 44);
      }
      v102 = malloc_type_malloc(80 * v100, 0x10700408B15705AuLL);
      *(_QWORD *)(v7 + 2976) = v102;
      if (!v102)
      {
        *(_QWORD *)(v7 + 2984) = 0;
        inited = 4294967284;
        *(_DWORD *)(v7 + 5340) = 1;
        v48 = (_QWORD *)(v7 + 2928);
        v49 = *(_QWORD *)(v7 + 2928);
        if (!v49)
          goto LABEL_305;
        goto LABEL_300;
      }
      v100 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)(v7 + 2984) = v100;
    }
    memcpy(v102, *(const void **)(a1 + 32), 80 * v100);
    bzero(*(void **)(a1 + 32), 80 * *(int *)(a1 + 44));
    *(_DWORD *)(v7 + 2988) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = 0;
    v103 = dav1d_thread_picture_alloc(a1, v7, v372);
    if ((v103 & 0x80000000) == 0)
    {
      v104 = *(_QWORD *)(v7 + 24);
      v105 = *(_DWORD *)(v104 + 236);
      v106 = (void *)(v7 + 1992);
      v369 = (_QWORD *)(v7 + 2256);
      if (v105 == *(_DWORD *)(v104 + 240))
      {
        if (*(_QWORD *)(v7 + 2008))
        {
          v107 = (FILE *)*MEMORY[0x1E0C80C10];
          v108 = "dst->data[0] == ((void *)0)";
LABEL_119:
          fprintf(v107, "Input validation check '%s' failed in %s!\n", v108, "dav1d_picture_ref");
          goto LABEL_150;
        }
        v109 = *(_QWORD *)(v7 + 2504);
        if (v109)
        {
          if (!*(_QWORD *)(v7 + 2272))
          {
            v107 = (FILE *)*MEMORY[0x1E0C80C10];
            v108 = "src->data[0] != ((void *)0)";
            goto LABEL_119;
          }
          v110 = (unsigned int *)(v109 + 16);
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 + 1, v110));
          v112 = *(_QWORD *)(v7 + 2432);
          if (v112)
          {
            v113 = (unsigned int *)(v112 + 16);
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 + 1, v113));
          }
          v115 = *(_QWORD *)(v7 + 2440);
          if (v115)
          {
            v116 = (unsigned int *)(v115 + 16);
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 + 1, v116));
          }
          v118 = *(_QWORD *)(v7 + 2368);
          if (v118)
          {
            v119 = (unsigned int *)(v118 + 16);
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 + 1, v119));
          }
          v121 = *(_QWORD *)(v7 + 2448);
          if (v121)
          {
            v122 = (unsigned int *)(v121 + 16);
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 + 1, v122));
          }
          v124 = *(_QWORD *)(v7 + 2456);
          if (v124)
          {
            v125 = (unsigned int *)(v124 + 16);
            do
              v126 = __ldaxr(v125);
            while (__stlxr(v126 + 1, v125));
          }
          v127 = *(_QWORD *)(v7 + 2464);
          if (v127)
          {
            v128 = (unsigned int *)(v127 + 16);
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 + 1, v128));
          }
        }
        memcpy(v106, v369, 0x108uLL);
LABEL_150:
        v130 = *(_DWORD **)(v7 + 24);
        if (v130[59] != v130[60])
        {
          v131 = *(_DWORD *)(v7 + 2048);
          v132 = *(_DWORD *)(v7 + 2312);
          v133 = ((v132 >> 1) + (v131 << 14)) / v132;
          *(_DWORD *)(v7 + 3104) = v133;
          v134 = *(_DWORD *)(v7 + 2056);
          v135 = v134 == 3;
          v136 = v134 != 3;
          if (v135)
            v137 = v131;
          else
            v137 = v131 + 1;
          v138 = v137 >> v136;
          if (v135)
            v139 = v132;
          else
            v139 = v132 + 1;
          v140 = v139 >> v136;
          v141 = ((v138 << 14) + (v140 >> 1)) / v140;
          *(_DWORD *)(v7 + 3108) = v141;
          *(_DWORD *)(v7 + 3112) = ((unsigned __int16)(((v132 >> 1) + ((v131 - v132) << 13)) / v132)
                                  - (unsigned __int16)((v133 * v132 - (v131 << 14)) >> 1)
                                  + 128) & 0x3FFF;
          *(_DWORD *)(v7 + 3116) = ((unsigned __int16)(((v140 >> 1) + ((v138 - v140) << 13)) / v140)
                                  - (unsigned __int16)((-16384 * v138 + v140 * v141) >> 1)
                                  + 128) & 0x3FFF;
        }
        if (*(_DWORD *)(a1 + 8) == 1)
        {
          if (v130[69] || *(_DWORD *)v2)
          {
            dav1d_picture_ref((_QWORD *)(a1 + 224), v369);
            *(_QWORD *)(a1 + 496) = *(_QWORD *)(v7 + 2528);
            *(_QWORD *)(a1 + 488) = *(_QWORD *)(v7 + 2520);
            *(_DWORD *)(v2 + 16) |= *(_DWORD *)(v7 + 2524) & 3;
          }
        }
        else
        {
          dav1d_picture_ref((_QWORD *)v9, v369);
          *(_QWORD *)(v9 + 272) = *(_QWORD *)(v7 + 2528);
          *(_QWORD *)(v9 + 264) = *(_QWORD *)(v7 + 2520);
        }
        v142 = *(_QWORD *)(v7 + 24);
        *(_DWORD *)(v7 + 3272) = (*(_DWORD *)(v142 + 236) + 3) >> 2;
        v143 = *(_DWORD *)(v142 + 244);
        *(_DWORD *)(v7 + 3276) = (v143 + 3) >> 2;
        v144 = ((*(_DWORD *)(v142 + 236) + 7) >> 2) & 0xFFFFFFFE;
        *(_DWORD *)(v7 + 3280) = v144;
        v145 = ((v143 + 7) >> 2) & 0xFFFFFFFE;
        *(_DWORD *)(v7 + 3284) = v145;
        v144 += 31;
        *(_DWORD *)(v7 + 3288) = v144 >> 5;
        v146 = (int)(v145 + 31) >> 5;
        *(_DWORD *)(v7 + 3292) = v146;
        v147 = *(_DWORD *)(*(_QWORD *)(v7 + 8) + 1012);
        v148 = v147 + 4;
        *(_DWORD *)(v7 + 3300) = v147 + 4;
        v149 = 16 << v147;
        *(_DWORD *)(v7 + 3304) = v149;
        v150 = (int)(v145 + v149 - 1) >> v148;
        *(_DWORD *)(v7 + 3296) = v150;
        v151 = (int)(v144 & 0xFFFFFFE0);
        *(_QWORD *)(v7 + 3264) = v151;
        *(_DWORD *)(v7 + 4156) = ~(-1 << *(_DWORD *)(v7 + 2060));
        *(_DWORD *)(v7 + 5340) = 0;
        *(_DWORD *)(v7 + 5344) = (v150 + *(_DWORD *)(v142 + 556) * *(_DWORD *)(v142 + 540)) << (*(_DWORD *)(a1 + 8) > 1u);
        if ((*(_BYTE *)(v142 + 232) & 1) == 0 && !*(_DWORD *)(v142 + 464))
        {
          *(_QWORD *)(v7 + 2536) = 0;
          *(_OWORD *)(v7 + 2608) = 0u;
          *(_OWORD *)(v7 + 2624) = 0u;
          *(_OWORD *)(v7 + 2640) = 0u;
          *(_QWORD *)(v7 + 2656) = 0;
          goto LABEL_223;
        }
        v152 = v368[1];
        v153 = dav1d_mem_pool_pop(v152, (char *)(((v146 * (v151 >> 1)) << 7) | 0x28));
        if (!v153)
        {
          *(_QWORD *)(v7 + 2536) = 0;
          inited = 4294967284;
          *(_DWORD *)(v7 + 5340) = 1;
          v48 = (_QWORD *)(v7 + 2928);
          v49 = *(_QWORD *)(v7 + 2928);
          if (!v49)
            goto LABEL_305;
          goto LABEL_300;
        }
        v154 = *(_QWORD *)v153;
        *((_QWORD *)v153 - 5) = *(_QWORD *)v153;
        *((_QWORD *)v153 - 4) = v152;
        *((_QWORD *)v153 - 3) = 1;
        *((_QWORD *)v153 - 2) = pool_free_callback;
        *((_QWORD *)v153 - 1) = v153;
        *(_QWORD *)(v7 + 2536) = v153 - 40;
        *(_QWORD *)(v7 + 2544) = v154;
        v142 = *(_QWORD *)(v7 + 24);
        if (*(_DWORD *)(v142 + 464))
        {
          *(_DWORD *)(v7 + 2720) = 0;
          *(_QWORD *)(v7 + 2712) = 0;
          *(_OWORD *)(v7 + 2696) = 0u;
          if (*(_DWORD *)(v142 + 512))
            goto LABEL_168;
        }
        else
        {
          *(_DWORD *)(v7 + 2696) = *(_DWORD *)(*(_QWORD *)(v7 + 40) + 248);
          *(_DWORD *)(v7 + 2700) = *(_DWORD *)(*(_QWORD *)(v7 + 320) + 248);
          *(_DWORD *)(v7 + 2704) = *(_DWORD *)(*(_QWORD *)(v7 + 600) + 248);
          *(_DWORD *)(v7 + 2708) = *(_DWORD *)(*(_QWORD *)(v7 + 880) + 248);
          *(_DWORD *)(v7 + 2712) = *(_DWORD *)(*(_QWORD *)(v7 + 1160) + 248);
          *(_DWORD *)(v7 + 2716) = *(_DWORD *)(*(_QWORD *)(v7 + 1440) + 248);
          *(_DWORD *)(v7 + 2720) = *(_DWORD *)(*(_QWORD *)(v7 + 1720) + 248);
          if (*(_DWORD *)(v142 + 512))
          {
LABEL_168:
            v155 = *(_DWORD *)(v142 + 472);
            v156 = (_QWORD **)(a1 + 328 * v155 + 50160);
            v157 = *v156;
            if (*v156 && v374[0] == *(_DWORD *)(v7 + 2048) && *(_DWORD *)(v7 + 92) == *(_DWORD *)(v7 + 2052))
            {
              *(_QWORD *)(v7 + 2608) = v157;
              v158 = (unsigned int *)(v157 + 2);
              do
                v159 = __ldaxr(v158);
              while (__stlxr(v159 + 1, v158));
              *(_QWORD *)(v7 + 2552) = **v156;
            }
            else
            {
              *(_QWORD *)(v7 + 2552) = 0;
              *(_QWORD *)(v7 + 2608) = 0;
            }
            v160 = (__int128 *)(a1 + 49872 + 328 * v155 + 296);
            v161 = *v160;
            *(_OWORD *)(v7 + 2736) = *(__int128 *)((char *)v160 + 12);
            *(_OWORD *)(v7 + 2724) = v161;
            v162 = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 476);
            v163 = a1 + 49872 + 328 * v162;
            v164 = *(_QWORD *)(v163 + 288);
            if (v164 && v374[1] == *(_DWORD *)(v7 + 2048) && *(_DWORD *)(v7 + 372) == *(_DWORD *)(v7 + 2052))
            {
              v165 = (_QWORD **)(v163 + 288);
              *(_QWORD *)(v7 + 2616) = v164;
              v166 = (unsigned int *)(v164 + 16);
              do
                v167 = __ldaxr(v166);
              while (__stlxr(v167 + 1, v166));
              *(_QWORD *)(v7 + 2560) = **v165;
            }
            else
            {
              *(_QWORD *)(v7 + 2560) = 0;
              *(_QWORD *)(v7 + 2616) = 0;
            }
            v168 = (__int128 *)(a1 + 49872 + 328 * v162 + 296);
            v169 = *v168;
            *(_OWORD *)(v7 + 2764) = *(__int128 *)((char *)v168 + 12);
            *(_OWORD *)(v7 + 2752) = v169;
            v170 = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 480);
            v171 = a1 + 49872 + 328 * v170;
            v172 = *(_QWORD *)(v171 + 288);
            if (v172 && v374[2] == *(_DWORD *)(v7 + 2048) && *(_DWORD *)(v7 + 652) == *(_DWORD *)(v7 + 2052))
            {
              v173 = (_QWORD **)(v171 + 288);
              *(_QWORD *)(v7 + 2624) = v172;
              v174 = (unsigned int *)(v172 + 16);
              do
                v175 = __ldaxr(v174);
              while (__stlxr(v175 + 1, v174));
              *(_QWORD *)(v7 + 2568) = **v173;
            }
            else
            {
              *(_QWORD *)(v7 + 2568) = 0;
              *(_QWORD *)(v7 + 2624) = 0;
            }
            v176 = (__int128 *)(a1 + 49872 + 328 * v170 + 296);
            v177 = *v176;
            *(_OWORD *)(v7 + 2792) = *(__int128 *)((char *)v176 + 12);
            *(_OWORD *)(v7 + 2780) = v177;
            v178 = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 484);
            v179 = a1 + 49872 + 328 * v178;
            v180 = *(_QWORD *)(v179 + 288);
            if (v180 && v374[3] == *(_DWORD *)(v7 + 2048) && *(_DWORD *)(v7 + 932) == *(_DWORD *)(v7 + 2052))
            {
              v181 = (_QWORD **)(v179 + 288);
              *(_QWORD *)(v7 + 2632) = v180;
              v182 = (unsigned int *)(v180 + 16);
              do
                v183 = __ldaxr(v182);
              while (__stlxr(v183 + 1, v182));
              *(_QWORD *)(v7 + 2576) = **v181;
            }
            else
            {
              *(_QWORD *)(v7 + 2576) = 0;
              *(_QWORD *)(v7 + 2632) = 0;
            }
            v184 = (__int128 *)(a1 + 49872 + 328 * v178 + 296);
            v185 = *v184;
            *(_OWORD *)(v7 + 2820) = *(__int128 *)((char *)v184 + 12);
            *(_OWORD *)(v7 + 2808) = v185;
            v186 = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 488);
            v187 = a1 + 49872 + 328 * v186;
            v188 = *(_QWORD *)(v187 + 288);
            if (v188 && v374[4] == *(_DWORD *)(v7 + 2048) && *(_DWORD *)(v7 + 1212) == *(_DWORD *)(v7 + 2052))
            {
              v189 = (_QWORD **)(v187 + 288);
              *(_QWORD *)(v7 + 2640) = v188;
              v190 = (unsigned int *)(v188 + 16);
              do
                v191 = __ldaxr(v190);
              while (__stlxr(v191 + 1, v190));
              *(_QWORD *)(v7 + 2584) = **v189;
            }
            else
            {
              *(_QWORD *)(v7 + 2584) = 0;
              *(_QWORD *)(v7 + 2640) = 0;
            }
            v192 = (__int128 *)(a1 + 49872 + 328 * v186 + 296);
            v193 = *v192;
            *(_OWORD *)(v7 + 2848) = *(__int128 *)((char *)v192 + 12);
            *(_OWORD *)(v7 + 2836) = v193;
            v194 = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 492);
            v195 = a1 + 49872 + 328 * v194;
            v196 = *(_QWORD *)(v195 + 288);
            if (v196 && v374[5] == *(_DWORD *)(v7 + 2048) && *(_DWORD *)(v7 + 1492) == *(_DWORD *)(v7 + 2052))
            {
              v197 = (_QWORD **)(v195 + 288);
              *(_QWORD *)(v7 + 2648) = v196;
              v198 = (unsigned int *)(v196 + 16);
              do
                v199 = __ldaxr(v198);
              while (__stlxr(v199 + 1, v198));
              *(_QWORD *)(v7 + 2592) = **v197;
            }
            else
            {
              *(_QWORD *)(v7 + 2592) = 0;
              *(_QWORD *)(v7 + 2648) = 0;
            }
            v200 = (__int128 *)(a1 + 49872 + 328 * v194 + 296);
            v201 = *v200;
            *(_OWORD *)(v7 + 2876) = *(__int128 *)((char *)v200 + 12);
            *(_OWORD *)(v7 + 2864) = v201;
            v202 = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 496);
            v203 = a1 + 49872 + 328 * v202;
            v204 = *(_QWORD *)(v203 + 288);
            if (v204 && v374[6] == *(_DWORD *)(v7 + 2048) && *(_DWORD *)(v7 + 1772) == *(_DWORD *)(v7 + 2052))
            {
              v205 = (_QWORD **)(v203 + 288);
              *(_QWORD *)(v7 + 2656) = v204;
              v206 = (unsigned int *)(v204 + 16);
              do
                v207 = __ldaxr(v206);
              while (__stlxr(v207 + 1, v206));
              *(_QWORD *)(v7 + 2600) = **v205;
            }
            else
            {
              *(_QWORD *)(v7 + 2600) = 0;
              *(_QWORD *)(v7 + 2656) = 0;
            }
            v208 = (__int128 *)(a1 + 328 * v202 + 50168);
            v209 = *v208;
            *(_OWORD *)(v7 + 2904) = *(__int128 *)((char *)v208 + 12);
            *(_OWORD *)(v7 + 2892) = v209;
            v142 = *(_QWORD *)(v7 + 24);
LABEL_223:
            if (*(_DWORD *)(v142 + 864))
            {
              *(_QWORD *)(v7 + 2672) = 0;
              *(_QWORD *)(v7 + 2688) = 0;
              if ((*(_DWORD *)(v142 + 872) || !*(_DWORD *)(v142 + 868))
                && (v210 = *(int *)(v142 + 304), (((v374[v210] + 7) >> 2) & 0xFFFFFFFE) == *(_DWORD *)(v7 + 3280))
                && (((*(_DWORD *)(v7 + 280 * (int)v210 + 92) + 7) >> 2) & 0xFFFFFFFE) == *(_DWORD *)(v7 + 3284))
              {
                v211 = *(_QWORD **)(a1 + 328 * *(int *)(v142 + 4 * v210 + 472) + 50152);
                *(_QWORD *)(v7 + 2672) = v211;
                if (v211)
                {
                  v212 = (unsigned int *)(v211 + 2);
                  do
                    v213 = __ldaxr(v212);
                  while (__stlxr(v213 + 1, v212));
                  v211 = *(_QWORD **)(v7 + 2672);
                  *(_QWORD *)(v7 + 2688) = *v211;
                  v142 = *(_QWORD *)(v7 + 24);
                }
              }
              else
              {
                v211 = 0;
              }
              if (*(_DWORD *)(v142 + 868))
              {
                v214 = *v368;
                v215 = dav1d_mem_pool_pop(*v368, (char *)(32 * *(_QWORD *)(v7 + 3264) * *(int *)(v7 + 3292) + 40));
                if (!v215)
                {
                  *(_QWORD *)(v7 + 2664) = 0;
                  dav1d_ref_dec((uint64_t *)(v7 + 2672));
                  inited = 4294967284;
                  *(_DWORD *)(v7 + 5340) = 1;
                  v48 = (_QWORD *)(v7 + 2928);
                  v49 = *(_QWORD *)(v7 + 2928);
                  if (!v49)
                    goto LABEL_305;
                  goto LABEL_300;
                }
                v359 = (_QWORD *)v3;
                v360 = v2;
                v361 = v9;
                v216 = *(_QWORD *)v215;
                *((_QWORD *)v215 - 5) = *(_QWORD *)v215;
                *((_QWORD *)v215 - 4) = v214;
                *((_QWORD *)v215 - 3) = 1;
                *((_QWORD *)v215 - 2) = pool_free_callback;
                *((_QWORD *)v215 - 1) = v215;
                *(_QWORD *)(v7 + 2664) = v215 - 40;
                *(_QWORD *)(v7 + 2680) = v216;
              }
              else if (v211)
              {
                v359 = (_QWORD *)v3;
                *(_QWORD *)(v7 + 2664) = v211;
                v217 = (unsigned int *)(v211 + 2);
                do
                  v218 = __ldaxr(v217);
                while (__stlxr(v218 + 1, v217));
                v360 = v2;
                v361 = v9;
                *(_QWORD *)(v7 + 2680) = **(_QWORD **)(v7 + 2672);
              }
              else
              {
                v219 = 32 * *(_QWORD *)(v7 + 3264) * *(int *)(v7 + 3292);
                dav1d_ref_create_using_pool(*v368, v219);
                *(_QWORD *)(v7 + 2664) = v220;
                if (!v220)
                {
                  inited = 4294967284;
                  *(_DWORD *)(v7 + 5340) = 1;
                  v48 = (_QWORD *)(v7 + 2928);
                  v49 = *(_QWORD *)(v7 + 2928);
                  if (!v49)
                    goto LABEL_305;
                  goto LABEL_300;
                }
                v359 = (_QWORD *)v3;
                v360 = v2;
                v361 = v9;
                v221 = *v220;
                *(_QWORD *)(v7 + 2680) = v221;
                bzero(v221, v219);
              }
            }
            else
            {
              v359 = (_QWORD *)v3;
              v360 = v2;
              v361 = v9;
              *(_QWORD *)(v7 + 2680) = 0;
              *(_OWORD *)(v7 + 2664) = 0u;
            }
            v222 = 0;
            v373 = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 440);
            do
            {
              if (((v373 >> v222) & 1) != 0)
              {
                if (*(_QWORD *)(a1 + 328 * v222 + 49888))
                {
                  dav1d_picture_unref_internal(a1 + 328 * v222 + 49872);
                  *(_QWORD *)(a1 + 328 * v222 + 50144) = 0;
                }
                dav1d_picture_ref((_QWORD *)(a1 + 328 * v222 + 49872), v369);
                *(_QWORD *)(a1 + 328 * v222 + 50144) = *(_QWORD *)(v7 + 2528);
                *(_QWORD *)(a1 + 328 * v222 + 50136) = *(_QWORD *)(v7 + 2520);
                v225 = (uint64_t *)(a1 + 24 * v222 + 52504);
                v226 = *v225;
                if (*v225)
                {
                  v227 = (unsigned int *)(v226 + 16);
                  do
                  {
                    v228 = __ldaxr(v227);
                    v229 = v228 - 1;
                  }
                  while (__stlxr(v229, v227));
                  if (!v229)
                  {
                    v230 = *(_DWORD *)(v226 + 20);
                    (*(void (**)(_QWORD, _QWORD))(v226 + 24))(*(_QWORD *)(v226 + 8), *(_QWORD *)(v226 + 32));
                    if (v230)
                      free((void *)v226);
                  }
                }
                *v225 = 0;
                *(_QWORD *)(a1 + 24 * v222 + 52512) = 0;
                *(_QWORD *)(a1 + 24 * v222 + 52520) = 0;
                v231 = 2952;
                if (*(_DWORD *)(*(_QWORD *)(v7 + 24) + 516))
                {
                  v232 = v7 + 2952;
                }
                else
                {
                  v231 = 2928;
                  v232 = v7 + 2928;
                }
                v233 = *(_OWORD *)v232;
                *(_QWORD *)(a1 + 24 * v222 + 52520) = *(_QWORD *)(v232 + 16);
                *(_OWORD *)v225 = v233;
                v234 = *(_QWORD *)(v7 + v231);
                if (v234)
                {
                  v235 = (unsigned int *)(v234 + 16);
                  do
                    v236 = __ldaxr(v235);
                  while (__stlxr(v236 + 1, v235));
                }
                v237 = (uint64_t *)(a1 + 328 * v222 + 50152);
                v238 = *v237;
                if (*v237)
                {
                  v239 = (unsigned int *)(v238 + 16);
                  do
                  {
                    v240 = __ldaxr(v239);
                    v241 = v240 - 1;
                  }
                  while (__stlxr(v241, v239));
                  if (!v241)
                  {
                    v242 = *(_DWORD *)(v238 + 20);
                    (*(void (**)(_QWORD, _QWORD))(v238 + 24))(*(_QWORD *)(v238 + 8), *(_QWORD *)(v238 + 32));
                    if (v242)
                      free((void *)v238);
                  }
                  *v237 = 0;
                }
                v243 = *(_QWORD *)(v7 + 2664);
                *v237 = v243;
                if (v243)
                {
                  v244 = (unsigned int *)(v243 + 16);
                  do
                    v245 = __ldaxr(v244);
                  while (__stlxr(v245 + 1, v244));
                }
                v246 = (uint64_t *)(a1 + 328 * v222 + 50160);
                v247 = *v246;
                if (*v246)
                {
                  v248 = (unsigned int *)(v247 + 16);
                  do
                  {
                    v249 = __ldaxr(v248);
                    v250 = v249 - 1;
                  }
                  while (__stlxr(v250, v248));
                  if (!v250)
                  {
                    v251 = *(_DWORD *)(v247 + 20);
                    (*(void (**)(_QWORD, _QWORD))(v247 + 24))(*(_QWORD *)(v247 + 8), *(_QWORD *)(v247 + 32));
                    if (v251)
                      free((void *)v247);
                  }
                  *v246 = 0;
                }
                if (!*(_DWORD *)(*(_QWORD *)(v7 + 24) + 464))
                {
                  v252 = *(_QWORD *)(v7 + 2536);
                  *v246 = v252;
                  if (v252)
                  {
                    v253 = (unsigned int *)(v252 + 16);
                    do
                      v254 = __ldaxr(v253);
                    while (__stlxr(v254 + 1, v253));
                  }
                }
                v223 = *(_OWORD *)(v7 + 2696);
                v224 = (_OWORD *)(a1 + 328 * v222 + 50168);
                *(_OWORD *)((char *)v224 + 12) = *(_OWORD *)(v7 + 2708);
                *v224 = v223;
              }
              ++v222;
            }
            while (v222 != 8);
            if (*(_DWORD *)(a1 + 8) != 1)
            {
              v335 = *(_QWORD **)(v7 + 3120);
              *(_DWORD *)(v7 + 5320) = 0;
              *(_QWORD *)(v7 + 5280) = -165681231 * ((unint64_t)(v7 - *v335) >> 4);
              *(_QWORD *)(v7 + 5288) = 0;
              *(_DWORD *)(v7 + 5296) = 0;
              insert_tasks((_QWORD *)v7, (unsigned int *)(v7 + 5280), v7 + 5280, 1);
              inited = 0;
              goto LABEL_413;
            }
            inited = dav1d_decode_frame_init((int8x16_t *)v7);
            if (!(_DWORD)inited)
            {
              inited = dav1d_decode_frame_init_cdf(v7, v255, v256, v257, v258, v259, v260, v261);
              if (!(_DWORD)inited)
              {
                v336 = *(_QWORD *)(v7 + 3120);
                v2 = v360;
                v9 = v361;
                v262 = v359;
                if (*(_DWORD *)(v336 + 24) >= 2u)
                {
                  pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 5248));
                  if (!dav1d_task_create_tile_sbrow(v7, 0, 1))
                  {
                    if (*(_DWORD *)(*(_QWORD *)(v7 + 3120) + 8) <= 1u)
                    {
                      while (!*(_DWORD *)(v7 + 5324) || *(int *)(v7 + 5344) >= 1)
                        pthread_cond_wait((pthread_cond_t *)(v7 + 5200), *(pthread_mutex_t **)(v7 + 5248));
                    }
                    else
                    {
                      while (!*(_DWORD *)(v7 + 5324) || !*(_DWORD *)(v7 + 5328) || *(int *)(v7 + 5344) >= 1)
                        pthread_cond_wait((pthread_cond_t *)(v7 + 5200), *(pthread_mutex_t **)(v7 + 5248));
                    }
                  }
                  pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 5248));
                  v337 = *(unsigned int *)(v7 + 5332);
                  dav1d_decode_frame_exit((uint64_t *)v7, *(_DWORD *)(v7 + 5332));
                  inited = 0;
                  *(_DWORD *)(v7 + 2988) = 0;
                  if ((v337 & 0x80000000) == 0)
                    return inited;
                  inited = v337;
                  dav1d_picture_unref_internal(a1 + 224);
                  *(_QWORD *)(a1 + 496) = 0;
                  if ((v373 & 1) == 0)
                  {
LABEL_292:
                    if ((v373 & 2) != 0)
                    {
                      if (*v362)
                      {
                        dav1d_picture_unref_internal(a1 + 50200);
                        v362[32] = 0;
                      }
                      dav1d_cdf_thread_unref((uint64_t *)(a1 + 52528));
                      dav1d_ref_dec((uint64_t *)(a1 + 50480));
                      dav1d_ref_dec((uint64_t *)(a1 + 50488));
                      if ((v373 & 4) == 0)
                      {
LABEL_294:
                        if ((v373 & 8) == 0)
                          goto LABEL_295;
                        goto LABEL_422;
                      }
                    }
                    else if ((v373 & 4) == 0)
                    {
                      goto LABEL_294;
                    }
                    if (*v363)
                    {
                      dav1d_picture_unref_internal(a1 + 50528);
                      v363[32] = 0;
                    }
                    dav1d_cdf_thread_unref((uint64_t *)(a1 + 52552));
                    dav1d_ref_dec((uint64_t *)(a1 + 50808));
                    dav1d_ref_dec((uint64_t *)(a1 + 50816));
                    if ((v373 & 8) == 0)
                    {
LABEL_295:
                      if ((v373 & 0x10) == 0)
                        goto LABEL_296;
                      goto LABEL_425;
                    }
LABEL_422:
                    if (*v364)
                    {
                      dav1d_picture_unref_internal(a1 + 50856);
                      v364[32] = 0;
                    }
                    dav1d_cdf_thread_unref((uint64_t *)(a1 + 52576));
                    dav1d_ref_dec((uint64_t *)(a1 + 51136));
                    dav1d_ref_dec((uint64_t *)(a1 + 51144));
                    if ((v373 & 0x10) == 0)
                    {
LABEL_296:
                      if ((v373 & 0x20) == 0)
                        goto LABEL_297;
                      goto LABEL_428;
                    }
LABEL_425:
                    if (*v365)
                    {
                      dav1d_picture_unref_internal(a1 + 51184);
                      v365[32] = 0;
                    }
                    dav1d_cdf_thread_unref((uint64_t *)(a1 + 52600));
                    dav1d_ref_dec((uint64_t *)(a1 + 51464));
                    dav1d_ref_dec((uint64_t *)(a1 + 51472));
                    if ((v373 & 0x20) == 0)
                    {
LABEL_297:
                      if ((v373 & 0x40) == 0)
                        goto LABEL_298;
                      goto LABEL_431;
                    }
LABEL_428:
                    if (*v366)
                    {
                      dav1d_picture_unref_internal(a1 + 51512);
                      v366[32] = 0;
                    }
                    dav1d_cdf_thread_unref((uint64_t *)(a1 + 52624));
                    dav1d_ref_dec((uint64_t *)(a1 + 51792));
                    dav1d_ref_dec((uint64_t *)(a1 + 51800));
                    if ((v373 & 0x40) == 0)
                    {
LABEL_298:
                      if ((v373 & 0x80) == 0)
                        goto LABEL_299;
                      goto LABEL_434;
                    }
LABEL_431:
                    if (*v367)
                    {
                      dav1d_picture_unref_internal(a1 + 51840);
                      v367[32] = 0;
                    }
                    dav1d_cdf_thread_unref((uint64_t *)(a1 + 52648));
                    dav1d_ref_dec((uint64_t *)(a1 + 52120));
                    dav1d_ref_dec((uint64_t *)(a1 + 52128));
                    if ((v373 & 0x80) == 0)
                    {
LABEL_299:
                      *(_DWORD *)(v7 + 5340) = 1;
                      v48 = (_QWORD *)(v7 + 2928);
                      v49 = *(_QWORD *)(v7 + 2928);
                      if (!v49)
                        goto LABEL_305;
                      goto LABEL_300;
                    }
LABEL_434:
                    if (*v262)
                    {
                      dav1d_picture_unref_internal(a1 + 52168);
                      v262[32] = 0;
                    }
                    dav1d_cdf_thread_unref((uint64_t *)(a1 + 52672));
                    dav1d_ref_dec((uint64_t *)(a1 + 52448));
                    dav1d_ref_dec((uint64_t *)(a1 + 52456));
                    *(_DWORD *)(v7 + 5340) = 1;
                    v48 = (_QWORD *)(v7 + 2928);
                    v49 = *(_QWORD *)(v7 + 2928);
                    if (!v49)
                      goto LABEL_305;
LABEL_300:
                    v263 = (unsigned int *)(v49 + 16);
                    do
                    {
                      v264 = __ldaxr(v263);
                      v265 = v264 - 1;
                    }
                    while (__stlxr(v265, v263));
                    if (!v265)
                    {
                      v266 = *(_DWORD *)(v49 + 20);
                      (*(void (**)(_QWORD, _QWORD))(v49 + 24))(*(_QWORD *)(v49 + 8), *(_QWORD *)(v49 + 32));
                      if (v266)
                        free((void *)v49);
                    }
                    goto LABEL_305;
                  }
LABEL_289:
                  if (v368[4])
                  {
                    dav1d_picture_unref_internal(a1 + 49872);
                    v368[36] = 0;
                  }
                  dav1d_cdf_thread_unref((uint64_t *)(a1 + 52504));
                  dav1d_ref_dec((uint64_t *)(a1 + 50152));
                  dav1d_ref_dec((uint64_t *)(a1 + 50160));
                  goto LABEL_292;
                }
                v338 = *(_QWORD *)(v336 + 16);
                v339 = (v7 - *(_QWORD *)v336) >> 4;
                v340 = v338 - 0x6CA10B65085B2540 * v339;
                *(_DWORD *)(v340 + 259588) = 0;
                v341 = v340;
                *(_QWORD *)(v340 + 8) = v7;
                v342 = *(_DWORD **)(v7 + 24);
                v343 = v342[139];
                if (v343 * *(_DWORD *)(v7 + 3288) >= 1)
                {
                  v344 = 0;
                  v345 = 0;
                  do
                  {
                    reset_context((_OWORD *)(*(_QWORD *)(v7 + 3864) + v344), (v342[58] & 1) == 0, 0);
                    ++v345;
                    v342 = *(_DWORD **)(v7 + 24);
                    v343 = v342[139];
                    v344 += 624;
                  }
                  while (v345 < v343 * (uint64_t)*(int *)(v7 + 3288));
                }
                if (v343 < 1)
                {
LABEL_478:
                  if (v342[129] && *(_DWORD *)(v7 + 5336))
                    dav1d_cdf_thread_update((uint64_t)v342, *(_QWORD *)(v7 + 2960), *(_QWORD *)(v7 + 3128) + 14592 * (int)v342[205]);
                  dav1d_decode_frame_exit((uint64_t *)v7, 0);
                  inited = 0;
                  *(_DWORD *)(v7 + 2988) = 0;
                  return inited;
                }
                v346 = 0;
                v347 = v338 - 0x6CA10B65085B2540 * v339;
                v370 = (int *)(v347 + 28);
                v348 = (_QWORD *)(v347 + 16);
                v357 = (uint64_t *)(v347 + 664);
                while (1)
                {
                  v349 = v346 + 1;
                  v350 = *((unsigned __int16 *)v342 + v346 + 346) >= *(int *)(v7 + 3296)
                       ? *(_DWORD *)(v7 + 3296)
                       : *((unsigned __int16 *)v342 + v346 + 346);
                  v351 = *((unsigned __int16 *)v342 + v346 + 345);
                  if (v350 > (int)v351)
                    break;
LABEL_462:
                  v346 = v349;
                  if (v349 >= (int)v342[139])
                    goto LABEL_478;
                }
                while (1)
                {
                  v352 = (_DWORD)v351 << (*(_DWORD *)(*(_QWORD *)(v7 + 8) + 1012) + 4);
                  *v370 = v352;
                  v353 = (v352 + *(_DWORD *)(v7 + 3304)) >> 1;
                  v354 = *(_QWORD *)(v7 + 24);
                  if (*(_DWORD *)(v354 + 512))
                  {
                    dav1d_refmvs_load_tmvs(v7 + 3880, v346, 0, *(int *)(v7 + 3280) >> 1, v352 >> 1, (v352 + *(_DWORD *)(v7 + 3304)) >> 1);
                    v354 = *(_QWORD *)(v7 + 24);
                  }
                  v355 = *(_DWORD *)(v354 + 540);
                  if (v355 >= 1)
                    break;
LABEL_475:
                  if ((*(_BYTE *)(v354 + 232) & 1) != 0)
                    dav1d_refmvs_save_tmvs(v357, 0, *(int *)(v7 + 3280) >> 1, *v370 >> 1, v353);
                  (*(void (**)(uint64_t, uint64_t))(v7 + 3168))(v7, v351);
                  v351 = (v351 + 1);
                  if ((_DWORD)v351 == v350)
                  {
                    v342 = *(_DWORD **)(v7 + 24);
                    v349 = v346 + 1;
                    goto LABEL_462;
                  }
                }
                v356 = 0;
                while (1)
                {
                  *v348 = *(_QWORD *)(v7 + 3128) + 14592 * (v356 + (int)v346 * v355);
                  if (dav1d_decode_tile_sbrow(v341))
                    break;
                  ++v356;
                  v354 = *(_QWORD *)(v7 + 24);
                  v355 = *(_DWORD *)(v354 + 540);
                  if (v356 >= v355)
                    goto LABEL_475;
                }
                inited = 4294967274;
              }
            }
            dav1d_decode_frame_exit((uint64_t *)v7, inited);
            *(_DWORD *)(v7 + 2988) = 0;
            v2 = v360;
            v9 = v361;
            v262 = v359;
            dav1d_picture_unref_internal(a1 + 224);
            *(_QWORD *)(a1 + 496) = 0;
            if ((v373 & 1) == 0)
              goto LABEL_292;
            goto LABEL_289;
          }
        }
        *(_QWORD *)(v7 + 2656) = 0;
        *(_OWORD *)(v7 + 2640) = 0u;
        *(_OWORD *)(v7 + 2624) = 0u;
        *(_OWORD *)(v7 + 2608) = 0u;
        goto LABEL_223;
      }
      v103 = picture_alloc_with_edges((uint64_t)v106, v105, *(_DWORD *)(v7 + 2316), *(_QWORD *)(v7 + 2256), *(_QWORD *)(v7 + 2440), *(_QWORD *)(v7 + 2264), *(_QWORD *)(v7 + 2432), *(_QWORD *)(v7 + 2376), *(_QWORD *)(v7 + 2448), *(_QWORD *)(v7 + 2384), *(_QWORD *)(v7 + 2456), *(_QWORD *)(v7 + 2392), *(_QWORD *)(v7 + 2464), *(_DWORD *)(v7 + 2324), (__int128 *)(v7 + 2328), *(_QWORD **)(*(_QWORD *)(v7 + 2504) + 32), 0, 0);
      if ((v103 & 0x80000000) == 0)
        goto LABEL_150;
    }
    inited = v103;
    *(_DWORD *)(v7 + 5340) = 1;
    v48 = (_QWORD *)(v7 + 2928);
    v49 = *(_QWORD *)(v7 + 2928);
    if (!v49)
      goto LABEL_305;
    goto LABEL_300;
  }
  v63 = *(int *)(v60 + 304);
  if ((_DWORD)v63 != 7 && !*(_QWORD *)(a1 + 328 * *(int *)(v60 + 4 * v63 + 472) + 49888))
  {
LABEL_90:
    inited = 4294967274;
    *(_DWORD *)(v7 + 5340) = 1;
    v48 = (_QWORD *)(v7 + 2928);
    v49 = *(_QWORD *)(v7 + 2928);
    if (!v49)
      goto LABEL_305;
    goto LABEL_300;
  }
  v358 = v3;
  v64 = 0;
  v65 = 0;
  v66 = 356;
  v67 = 3004;
  while (1)
  {
    v68 = *(_QWORD *)(v7 + 24);
    v69 = a1 + 328 * *(int *)(v68 + 4 * v65 + 472) + 49872;
    if (!*(_QWORD *)(a1 + 328 * *(int *)(v68 + 4 * v65 + 472) + 49888))
      break;
    v70 = *(_DWORD *)(v68 + 236);
    v71 = *(_DWORD *)(a1 + 328 * *(int *)(v68 + 4 * v65 + 472) + 49928);
    if (v71 > 2 * v70)
      break;
    v72 = *(_DWORD *)(v68 + 244);
    v73 = *(_DWORD *)(v69 + 60);
    v74 = 16 * v71;
    v75 = v73 <= 2 * v72 && v70 <= v74;
    v76 = v75 && v72 <= 16 * v73;
    if (!v76 || *(_DWORD *)(*(_QWORD *)(v7 + 8) + 12) != *(_DWORD *)(v69 + 64) || v372 != *(_DWORD *)(v69 + 68))
      break;
    v77 = v7 + v64;
    dav1d_picture_ref((_QWORD *)(v7 + v64 + 32), (_QWORD *)v69);
    *(_QWORD *)(v77 + 304) = *(_QWORD *)(v69 + 272);
    *(_QWORD *)(v77 + 296) = *(_QWORD *)(v69 + 264);
    v374[v65] = *(_DWORD *)(*(_QWORD *)(v69 + 8) + 236);
    v78 = *(_DWORD **)(v7 + 24);
    v79 = v78[59];
    v81 = *(_DWORD *)(v69 + 56);
    v80 = *(_DWORD *)(v69 + 60);
    v82 = v78[61];
    if (v79 == v81 && v82 == v80)
    {
      v88 = v7 + v67;
      *(_DWORD *)(v88 - 4) = 0;
      *(_DWORD *)(v88 - 12) = 0;
      v87 = (uint64_t)&v78[v66];
      if (v78[v66] < 2u)
        goto LABEL_79;
    }
    else
    {
      v84 = (int *)(v7 + v67);
      v85 = ((v82 >> 1) + (v80 << 14)) / v82;
      v86 = ((v81 << 14) + (v79 >> 1)) / v79;
      *(v84 - 3) = v86;
      *(v84 - 2) = (v86 + 8) >> 4;
      *(v84 - 1) = v85;
      *v84 = (v85 + 8) >> 4;
      v87 = (uint64_t)&v78[v66];
      if (v78[v66] < 2u)
        goto LABEL_79;
    }
    if (!v78[74] && !dav1d_get_shear_params(v87))
    {
      v89 = *(_DWORD *)(v7 + v67 - 12) == 0;
      goto LABEL_80;
    }
LABEL_79:
    v89 = 0;
LABEL_80:
    *(_BYTE *)(v7 + v65++ + 2920) = v89;
    v64 += 280;
    v66 += 9;
    v67 += 16;
    if (v64 == 1960)
    {
      v60 = *(_QWORD *)(v7 + 24);
      v3 = v358;
      v61 = *(int *)(v60 + 304);
      if ((_DWORD)v61 == 7)
        goto LABEL_53;
      goto LABEL_101;
    }
  }
  if (v64)
  {
    dav1d_picture_unref_internal(v7 + 32);
    *(_QWORD *)(v7 + 304) = 0;
    if (v64 != 280)
    {
      dav1d_picture_unref_internal(v7 + 312);
      *(_QWORD *)(v7 + 584) = 0;
      if (v64 != 560)
      {
        dav1d_picture_unref_internal(v7 + 592);
        *(_QWORD *)(v7 + 864) = 0;
        if (v64 != 840)
        {
          dav1d_picture_unref_internal(v7 + 872);
          *(_QWORD *)(v7 + 1144) = 0;
          if (v64 != 1120)
          {
            dav1d_picture_unref_internal(v7 + 1152);
            *(_QWORD *)(v7 + 1424) = 0;
            if (v64 != 1400)
            {
              dav1d_picture_unref_internal(v7 + 1432);
              *(_QWORD *)(v7 + 1704) = 0;
            }
          }
        }
      }
    }
    goto LABEL_90;
  }
  inited = 4294967274;
  *(_DWORD *)(v7 + 5340) = 1;
  v48 = (_QWORD *)(v7 + 2928);
  v49 = *(_QWORD *)(v7 + 2928);
  if (v49)
    goto LABEL_300;
LABEL_305:
  *v48 = 0;
  v48[1] = 0;
  v48[2] = 0;
  if (*(_DWORD *)(*(_QWORD *)(v7 + 24) + 516))
  {
    v267 = *(_QWORD *)(v7 + 2952);
    if (v267)
    {
      v268 = (unsigned int *)(v267 + 16);
      do
      {
        v269 = __ldaxr(v268);
        v270 = v269 - 1;
      }
      while (__stlxr(v270, v268));
      if (!v270)
      {
        v271 = *(_DWORD *)(v267 + 20);
        (*(void (**)(_QWORD, _QWORD))(v267 + 24))(*(_QWORD *)(v267 + 8), *(_QWORD *)(v267 + 32));
        if (v271)
          free((void *)v267);
      }
    }
    *(_QWORD *)(v7 + 2952) = 0;
    *(_QWORD *)(v7 + 2960) = 0;
    *(_QWORD *)(v7 + 2968) = 0;
  }
  if (*(_QWORD *)(v7 + 48))
  {
    dav1d_picture_unref_internal(v7 + 32);
    *(_QWORD *)(v7 + 304) = 0;
  }
  v272 = *(_QWORD *)(v7 + 2608);
  if (v272)
  {
    v273 = (unsigned int *)(v272 + 16);
    do
    {
      v274 = __ldaxr(v273);
      v275 = v274 - 1;
    }
    while (__stlxr(v275, v273));
    if (!v275)
    {
      v276 = *(_DWORD *)(v272 + 20);
      (*(void (**)(_QWORD, _QWORD))(v272 + 24))(*(_QWORD *)(v272 + 8), *(_QWORD *)(v272 + 32));
      if (v276)
        free((void *)v272);
    }
    *(_QWORD *)(v7 + 2608) = 0;
  }
  if (*(_QWORD *)(v7 + 328))
  {
    dav1d_picture_unref_internal(v7 + 312);
    *(_QWORD *)(v7 + 584) = 0;
  }
  v277 = *(_QWORD *)(v7 + 2616);
  if (v277)
  {
    v278 = (unsigned int *)(v277 + 16);
    do
    {
      v279 = __ldaxr(v278);
      v280 = v279 - 1;
    }
    while (__stlxr(v280, v278));
    if (!v280)
    {
      v281 = *(_DWORD *)(v277 + 20);
      (*(void (**)(_QWORD, _QWORD))(v277 + 24))(*(_QWORD *)(v277 + 8), *(_QWORD *)(v277 + 32));
      if (v281)
        free((void *)v277);
    }
    *(_QWORD *)(v7 + 2616) = 0;
  }
  if (*(_QWORD *)(v7 + 608))
  {
    dav1d_picture_unref_internal(v7 + 592);
    *(_QWORD *)(v7 + 864) = 0;
  }
  v282 = *(_QWORD *)(v7 + 2624);
  if (v282)
  {
    v283 = (unsigned int *)(v282 + 16);
    do
    {
      v284 = __ldaxr(v283);
      v285 = v284 - 1;
    }
    while (__stlxr(v285, v283));
    if (!v285)
    {
      v286 = *(_DWORD *)(v282 + 20);
      (*(void (**)(_QWORD, _QWORD))(v282 + 24))(*(_QWORD *)(v282 + 8), *(_QWORD *)(v282 + 32));
      if (v286)
        free((void *)v282);
    }
    *(_QWORD *)(v7 + 2624) = 0;
  }
  if (*(_QWORD *)(v7 + 888))
  {
    dav1d_picture_unref_internal(v7 + 872);
    *(_QWORD *)(v7 + 1144) = 0;
  }
  v287 = *(_QWORD *)(v7 + 2632);
  if (v287)
  {
    v288 = (unsigned int *)(v287 + 16);
    do
    {
      v289 = __ldaxr(v288);
      v290 = v289 - 1;
    }
    while (__stlxr(v290, v288));
    if (!v290)
    {
      v291 = *(_DWORD *)(v287 + 20);
      (*(void (**)(_QWORD, _QWORD))(v287 + 24))(*(_QWORD *)(v287 + 8), *(_QWORD *)(v287 + 32));
      if (v291)
        free((void *)v287);
    }
    *(_QWORD *)(v7 + 2632) = 0;
  }
  if (*(_QWORD *)(v7 + 1168))
  {
    dav1d_picture_unref_internal(v7 + 1152);
    *(_QWORD *)(v7 + 1424) = 0;
  }
  v292 = *(_QWORD *)(v7 + 2640);
  if (v292)
  {
    v293 = (unsigned int *)(v292 + 16);
    do
    {
      v294 = __ldaxr(v293);
      v295 = v294 - 1;
    }
    while (__stlxr(v295, v293));
    if (!v295)
    {
      v296 = *(_DWORD *)(v292 + 20);
      (*(void (**)(_QWORD, _QWORD))(v292 + 24))(*(_QWORD *)(v292 + 8), *(_QWORD *)(v292 + 32));
      if (v296)
        free((void *)v292);
    }
    *(_QWORD *)(v7 + 2640) = 0;
  }
  if (*(_QWORD *)(v7 + 1448))
  {
    dav1d_picture_unref_internal(v7 + 1432);
    *(_QWORD *)(v7 + 1704) = 0;
  }
  v297 = *(_QWORD *)(v7 + 2648);
  if (v297)
  {
    v298 = (unsigned int *)(v297 + 16);
    do
    {
      v299 = __ldaxr(v298);
      v300 = v299 - 1;
    }
    while (__stlxr(v300, v298));
    if (!v300)
    {
      v301 = *(_DWORD *)(v297 + 20);
      (*(void (**)(_QWORD, _QWORD))(v297 + 24))(*(_QWORD *)(v297 + 8), *(_QWORD *)(v297 + 32));
      if (v301)
        free((void *)v297);
    }
    *(_QWORD *)(v7 + 2648) = 0;
  }
  if (*(_QWORD *)(v7 + 1728))
  {
    dav1d_picture_unref_internal(v7 + 1712);
    *(_QWORD *)(v7 + 1984) = 0;
  }
  v302 = *(_QWORD *)(v7 + 2656);
  if (v302)
  {
    v303 = (unsigned int *)(v302 + 16);
    do
    {
      v304 = __ldaxr(v303);
      v305 = v304 - 1;
    }
    while (__stlxr(v305, v303));
    if (!v305)
    {
      v306 = *(_DWORD *)(v302 + 20);
      (*(void (**)(_QWORD, _QWORD))(v302 + 24))(*(_QWORD *)(v302 + 8), *(_QWORD *)(v302 + 32));
      if (v306)
        free((void *)v302);
    }
    *(_QWORD *)(v7 + 2656) = 0;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
  {
    dav1d_picture_unref_internal(a1 + 224);
    v307 = (_QWORD *)(a1 + 496);
  }
  else
  {
    dav1d_picture_unref_internal(v9);
    v307 = (_QWORD *)(v9 + 272);
  }
  *v307 = 0;
  dav1d_picture_unref_internal(v7 + 1992);
  dav1d_picture_unref_internal(v7 + 2256);
  *(_QWORD *)(v7 + 2528) = 0;
  v308 = *(_QWORD *)(v7 + 2536);
  if (v308)
  {
    v309 = (unsigned int *)(v308 + 16);
    do
    {
      v310 = __ldaxr(v309);
      v311 = v310 - 1;
    }
    while (__stlxr(v311, v309));
    if (!v311)
    {
      v312 = *(_DWORD *)(v308 + 20);
      (*(void (**)(_QWORD, _QWORD))(v308 + 24))(*(_QWORD *)(v308 + 8), *(_QWORD *)(v308 + 32));
      if (v312)
        free((void *)v308);
    }
    *(_QWORD *)(v7 + 2536) = 0;
  }
  v313 = *(_QWORD *)v7;
  if (*(_QWORD *)v7)
  {
    v314 = (unsigned int *)(v313 + 16);
    do
    {
      v315 = __ldaxr(v314);
      v316 = v315 - 1;
    }
    while (__stlxr(v316, v314));
    if (!v316)
    {
      v317 = *(_DWORD *)(v313 + 20);
      (*(void (**)(_QWORD, _QWORD))(v313 + 24))(*(_QWORD *)(v313 + 8), *(_QWORD *)(v313 + 32));
      if (v317)
        free((void *)v313);
    }
    *(_QWORD *)v7 = 0;
  }
  v318 = *(_QWORD *)(v7 + 16);
  if (v318)
  {
    v319 = (unsigned int *)(v318 + 16);
    do
    {
      v320 = __ldaxr(v319);
      v321 = v320 - 1;
    }
    while (__stlxr(v321, v319));
    if (!v321)
    {
      v322 = *(_DWORD *)(v318 + 20);
      (*(void (**)(_QWORD, _QWORD))(v318 + 24))(*(_QWORD *)(v318 + 8), *(_QWORD *)(v318 + 32));
      if (v322)
        free((void *)v318);
    }
    *(_QWORD *)(v7 + 16) = 0;
  }
  v323 = *(_QWORD *)(v2 + 60);
  if (v323)
  {
    v324 = (unsigned int *)(v323 + 16);
    do
    {
      v325 = __ldaxr(v324);
      v326 = v325 - 1;
    }
    while (__stlxr(v326, v324));
    if (!v326)
    {
      v327 = *(_DWORD *)(v323 + 20);
      (*(void (**)(_QWORD, _QWORD))(v323 + 24))(*(_QWORD *)(v323 + 8), *(_QWORD *)(v323 + 32));
      if (v327)
        free((void *)v323);
    }
  }
  v328 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 88848) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a1 + 88864) = v328;
  *(_OWORD *)(a1 + 88832) = *(_OWORD *)(a1 + 176);
  v329 = *(_QWORD *)(v2 + 60);
  if (v329)
  {
    v330 = (unsigned int *)(v329 + 16);
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 + 1, v330));
  }
  if (*(int *)(v7 + 2988) >= 1)
  {
    v332 = 0;
    v333 = 0;
    do
    {
      dav1d_data_unref_internal(*(_QWORD *)(v7 + 2976) + v332);
      ++v333;
      v332 += 80;
    }
    while (v333 < *(int *)(v7 + 2988));
  }
  *(_DWORD *)(v7 + 2988) = 0;
  if (*(_DWORD *)(a1 + 8) > 1u)
LABEL_413:
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 832));
  return inited;
}

uint64_t decode_b(uint64_t a1, char a2, uint64_t a3, char a4, unsigned int a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v12;
  int v13;
  int v14;
  _OWORD *v15;
  int v16;
  unsigned __int8 *v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  signed int v36;
  signed int v37;
  int8x16_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  signed int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int32x4_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  uint16x8_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint8x16_t v72;
  uint8x16_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint8x16_t v78;
  uint8x16_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint8x16_t v84;
  uint8x16_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  uint8x16_t v90;
  uint8x16_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint8x16_t v96;
  uint8x16_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  _DWORD *v105;
  char v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t i;
  uint64_t v116;
  int32x4_t v117;
  uint8x16_t v118;
  uint16x8_t v119;
  uint16x8_t v120;
  uint16x8_t v121;
  int32x4_t v122;
  int32x4_t v123;
  uint16x8_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  uint8x16_t v135;
  uint8x16_t v136;
  uint16x8_t v137;
  uint16x8_t v138;
  uint16x8_t v139;
  uint16x8_t v140;
  uint8x16_t v141;
  uint8x16_t v142;
  uint16x8_t v143;
  uint16x8_t v144;
  uint16x8_t v145;
  uint16x8_t v146;
  uint8x16_t v147;
  uint8x16_t v148;
  uint16x8_t v149;
  uint16x8_t v150;
  uint16x8_t v151;
  uint16x8_t v152;
  uint8x16_t v153;
  uint8x16_t v154;
  uint16x8_t v155;
  uint16x8_t v156;
  uint16x8_t v157;
  uint16x8_t v158;
  uint8x16_t v159;
  uint8x16_t v160;
  uint16x8_t v161;
  uint16x8_t v162;
  uint16x8_t v163;
  uint16x8_t v164;
  uint8x16_t v165;
  uint8x16_t v166;
  uint16x8_t v167;
  uint16x8_t v168;
  uint16x8_t v169;
  uint16x8_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int v174;
  _DWORD *v175;
  BOOL v176;
  _BYTE *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  int64x2_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE *v203;
  uint64_t *v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  signed int v209;
  unsigned __int8 *v210;
  int v211;
  signed int v212;
  _BOOL4 v213;
  _BOOL4 v214;
  _BOOL4 v215;
  BOOL v216;
  uint64_t v217;
  signed int v218;
  uint64_t v219;
  int64x2_t v220;
  uint64_t result;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  unsigned int v226;
  char v227;
  int v228;
  _BYTE *v229;
  unsigned int *v230;
  _DWORD *v231;
  BOOL v232;
  _DWORD *v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  signed int v238;
  unsigned __int8 *v239;
  int v240;
  signed int v241;
  _BOOL4 v242;
  _BOOL4 v243;
  _BOOL4 v244;
  BOOL v245;
  uint64_t v246;
  signed int v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  int v251;
  _BYTE *v252;
  char v253;
  unsigned int v254;
  unint64_t v255;
  int32x4_t v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  uint8x16_t *v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  int v267;
  uint64_t v268;
  unsigned int v269;
  unint64_t v270;
  int v271;
  unint64_t v272;
  unsigned int v273;
  uint8x16_t *v274;
  unint64_t v275;
  int8x16_t v276;
  int8x16_t v277;
  int32x4_t v278;
  uint64_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  uint64_t v284;
  int8x16_t v285;
  int8x16_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  uint8x16_t v291;
  uint16x8_t v292;
  uint32x4_t v293;
  uint64x2_t v294;
  uint64x2_t v295;
  uint32x4_t v296;
  uint64x2_t v297;
  uint16x8_t v298;
  uint32x4_t v299;
  uint64x2_t v300;
  uint64x2_t v301;
  uint64x2_t v302;
  uint64x2_t v303;
  uint32x4_t v304;
  uint64x2_t v305;
  uint64x2_t v306;
  uint64x2_t v307;
  uint64x2_t v308;
  uint64x2_t v309;
  uint64x2_t v310;
  uint64x2_t v311;
  uint64x2_t v312;
  uint64x2_t v313;
  int8x16_t v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  _BYTE *v318;
  int8x16_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t j;
  uint64_t v327;
  int32x4_t v328;
  uint8x16_t v329;
  uint16x8_t v330;
  uint16x8_t v331;
  uint16x8_t v332;
  int32x4_t v333;
  int32x4_t v334;
  uint16x8_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int32x4_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  uint8x16_t v346;
  uint8x16_t v347;
  uint16x8_t v348;
  uint16x8_t v349;
  uint16x8_t v350;
  uint16x8_t v351;
  uint8x16_t v352;
  uint8x16_t v353;
  uint16x8_t v354;
  uint16x8_t v355;
  uint16x8_t v356;
  uint16x8_t v357;
  uint8x16_t v358;
  uint8x16_t v359;
  uint16x8_t v360;
  uint16x8_t v361;
  uint16x8_t v362;
  uint16x8_t v363;
  uint8x16_t v364;
  uint8x16_t v365;
  uint16x8_t v366;
  uint16x8_t v367;
  uint16x8_t v368;
  uint16x8_t v369;
  uint8x16_t v370;
  uint8x16_t v371;
  uint16x8_t v372;
  uint16x8_t v373;
  uint16x8_t v374;
  uint16x8_t v375;
  uint8x16_t v376;
  uint8x16_t v377;
  uint16x8_t v378;
  uint16x8_t v379;
  uint16x8_t v380;
  uint16x8_t v381;
  int32x4_t v382;
  int32x4_t v383;
  int32x4_t v384;
  _BYTE *v385;
  uint64_t v386;
  _BYTE *v387;
  _WORD *v388;
  _DWORD *v389;
  _QWORD *v390;
  int64x2_t *v391;
  uint64_t v392;
  int64x2_t v393;
  uint64_t v394;
  uint64_t v395;
  int64x2_t v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  _BYTE *v409;
  uint64_t *v410;
  unsigned int v411;
  uint64_t v412;
  unsigned int *v413;
  _BYTE *v414;
  int v415;
  unsigned int v416;
  int v417;
  unsigned int v418;
  int v419;
  _DWORD *v420;
  int v421;
  int v422;
  int v423;
  _QWORD *v424;
  int v425;
  _BOOL4 v426;
  int v427;
  _BOOL4 v428;
  int v429;
  char v430;
  int v431;
  int v432;
  int v433;
  uint64_t v434;
  unsigned int v435;
  unint64_t v436;
  int32x4_t v437;
  int v438;
  int v439;
  unsigned int v440;
  unsigned int v441;
  uint8x16_t *v442;
  uint64_t v443;
  unint64_t v444;
  int v445;
  uint64_t v446;
  unsigned int v447;
  unsigned int v448;
  int v449;
  uint64_t v450;
  unsigned int v451;
  unint64_t v452;
  int v453;
  unint64_t v454;
  unsigned int v455;
  uint8x16_t *v456;
  unint64_t v457;
  int8x16_t v458;
  int8x16_t v459;
  int32x4_t v460;
  uint64_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int32x4_t v465;
  uint64_t v466;
  int8x16_t v467;
  int8x16_t v468;
  int8x16_t v469;
  int8x16_t v470;
  int8x16_t v471;
  int8x16_t v472;
  uint8x16_t v473;
  uint16x8_t v474;
  uint32x4_t v475;
  uint64x2_t v476;
  uint64x2_t v477;
  uint32x4_t v478;
  uint64x2_t v479;
  uint16x8_t v480;
  uint32x4_t v481;
  uint64x2_t v482;
  uint64x2_t v483;
  uint64x2_t v484;
  uint64x2_t v485;
  uint32x4_t v486;
  uint64x2_t v487;
  uint64x2_t v488;
  uint64x2_t v489;
  uint64x2_t v490;
  uint64x2_t v491;
  uint64x2_t v492;
  uint64x2_t v493;
  uint64x2_t v494;
  uint64x2_t v495;
  int8x16_t v496;
  unsigned int v497;
  unsigned int v498;
  unsigned int v499;
  uint64_t v500;
  unsigned int v501;
  unsigned int v502;
  uint8x16_t *v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int32x4_t v508;
  unint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  int v513;
  uint64_t v514;
  unsigned int v515;
  unsigned int v516;
  int v517;
  int v518;
  unsigned int v519;
  unint64_t v520;
  unsigned int v521;
  uint8x16_t *v522;
  unsigned int v523;
  unint64_t v524;
  int v525;
  unint64_t v526;
  unsigned int v527;
  uint8x16_t *v528;
  unint64_t v529;
  int8x16_t v530;
  int8x16_t v531;
  int32x4_t v532;
  uint64_t v533;
  int32x4_t v534;
  int32x4_t v535;
  int32x4_t v536;
  int32x4_t v537;
  uint64_t v538;
  int8x16_t v539;
  int8x16_t v540;
  int8x16_t v541;
  int8x16_t v542;
  int8x16_t v543;
  int8x16_t v544;
  uint8x16_t v545;
  uint16x8_t v546;
  uint32x4_t v547;
  uint64x2_t v548;
  uint64x2_t v549;
  uint32x4_t v550;
  uint64x2_t v551;
  uint16x8_t v552;
  uint32x4_t v553;
  uint64x2_t v554;
  uint64x2_t v555;
  uint64x2_t v556;
  uint64x2_t v557;
  uint32x4_t v558;
  uint64x2_t v559;
  uint64x2_t v560;
  uint64x2_t v561;
  uint64x2_t v562;
  uint64x2_t v563;
  uint64x2_t v564;
  uint64x2_t v565;
  uint64x2_t v566;
  uint64x2_t v567;
  int8x16_t v568;
  unsigned int v569;
  unsigned int v570;
  unsigned int v571;
  unsigned int v572;
  uint64_t v573;
  unint64_t v574;
  int v575;
  uint64_t v576;
  unsigned int v577;
  unsigned int v578;
  int v579;
  unsigned int v580;
  unint64_t v581;
  unsigned int v582;
  uint8x16_t *v583;
  unsigned int v584;
  unint64_t v585;
  int v586;
  unint64_t v587;
  unsigned int v588;
  uint8x16_t *v589;
  unint64_t v590;
  int8x16_t v591;
  int8x16_t v592;
  int32x4_t v593;
  uint64_t v594;
  int32x4_t v595;
  int32x4_t v596;
  int32x4_t v597;
  int32x4_t v598;
  uint64_t v599;
  int8x16_t v600;
  int8x16_t v601;
  int8x16_t v602;
  int8x16_t v603;
  int8x16_t v604;
  int8x16_t v605;
  uint8x16_t v606;
  uint16x8_t v607;
  uint32x4_t v608;
  uint64x2_t v609;
  uint64x2_t v610;
  uint32x4_t v611;
  uint64x2_t v612;
  uint16x8_t v613;
  uint32x4_t v614;
  uint64x2_t v615;
  uint64x2_t v616;
  uint64x2_t v617;
  uint64x2_t v618;
  uint32x4_t v619;
  uint64x2_t v620;
  uint64x2_t v621;
  uint64x2_t v622;
  uint64x2_t v623;
  uint64x2_t v624;
  uint64x2_t v625;
  uint64x2_t v626;
  uint64x2_t v627;
  uint64x2_t v628;
  int8x16_t v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  unsigned int v633;
  _BOOL4 v634;
  _BOOL4 v635;
  uint64_t v636;
  unint64_t v637;
  int v638;
  uint64_t v639;
  unsigned int v640;
  unsigned int v641;
  int v642;
  unsigned int v643;
  unint64_t v644;
  unsigned int v645;
  uint8x16_t *v646;
  unsigned int v647;
  unint64_t v648;
  int v649;
  unint64_t v650;
  unsigned int v651;
  uint8x16_t *v652;
  unint64_t v653;
  int8x16_t v654;
  int8x16_t v655;
  int32x4_t v656;
  uint64_t v657;
  int32x4_t v658;
  int32x4_t v659;
  int32x4_t v660;
  int32x4_t v661;
  uint64_t v662;
  int8x16_t v663;
  int8x16_t v664;
  int8x16_t v665;
  int8x16_t v666;
  int8x16_t v667;
  int8x16_t v668;
  uint8x16_t v669;
  uint16x8_t v670;
  uint32x4_t v671;
  uint64x2_t v672;
  uint64x2_t v673;
  uint32x4_t v674;
  uint64x2_t v675;
  uint16x8_t v676;
  uint32x4_t v677;
  uint64x2_t v678;
  uint64x2_t v679;
  uint64x2_t v680;
  uint64x2_t v681;
  uint32x4_t v682;
  uint64x2_t v683;
  uint64x2_t v684;
  uint64x2_t v685;
  uint64x2_t v686;
  uint64x2_t v687;
  uint64x2_t v688;
  uint64x2_t v689;
  uint64x2_t v690;
  uint64x2_t v691;
  int8x16_t v692;
  unsigned int v693;
  unsigned int v694;
  unsigned int v695;
  unsigned int v696;
  int v697;
  int v698;
  int v699;
  unsigned int v700;
  unsigned int v701;
  uint8x16_t *v702;
  uint64_t v703;
  unint64_t v704;
  int v705;
  uint64_t v706;
  unsigned int v707;
  unsigned int v708;
  int v709;
  uint64_t v710;
  unsigned int v711;
  unint64_t v712;
  int v713;
  unint64_t v714;
  unsigned int v715;
  uint8x16_t *v716;
  unint64_t v717;
  int8x16_t v718;
  int8x16_t v719;
  int32x4_t v720;
  uint64_t v721;
  int32x4_t v722;
  int32x4_t v723;
  int32x4_t v724;
  int32x4_t v725;
  uint64_t v726;
  int8x16_t v727;
  int8x16_t v728;
  int8x16_t v729;
  int8x16_t v730;
  int8x16_t v731;
  int8x16_t v732;
  uint8x16_t v733;
  uint16x8_t v734;
  uint32x4_t v735;
  uint64x2_t v736;
  uint64x2_t v737;
  uint32x4_t v738;
  uint64x2_t v739;
  uint16x8_t v740;
  uint32x4_t v741;
  uint64x2_t v742;
  uint64x2_t v743;
  uint64x2_t v744;
  uint64x2_t v745;
  uint32x4_t v746;
  uint64x2_t v747;
  uint64x2_t v748;
  uint64x2_t v749;
  uint64x2_t v750;
  uint64x2_t v751;
  uint64x2_t v752;
  uint64x2_t v753;
  uint64x2_t v754;
  uint64x2_t v755;
  int8x16_t v756;
  unsigned int v757;
  unsigned int v758;
  unsigned int v759;
  unint64_t v760;
  unint64_t v761;
  uint64_t v762;
  unint64_t v763;
  int v764;
  uint64_t v765;
  unsigned int v766;
  unsigned int v767;
  int v768;
  uint64_t v769;
  unsigned int v770;
  unint64_t v771;
  int v772;
  unint64_t v773;
  unsigned int v774;
  uint8x16_t *v775;
  unint64_t v776;
  int8x16_t v777;
  int8x16_t v778;
  int32x4_t v779;
  uint64_t v780;
  int32x4_t v781;
  int32x4_t v782;
  int32x4_t v783;
  int32x4_t v784;
  uint64_t v785;
  int8x16_t v786;
  int8x16_t v787;
  int8x16_t v788;
  int8x16_t v789;
  int8x16_t v790;
  int8x16_t v791;
  uint8x16_t v792;
  uint16x8_t v793;
  uint32x4_t v794;
  uint64x2_t v795;
  uint64x2_t v796;
  uint32x4_t v797;
  uint64x2_t v798;
  uint16x8_t v799;
  uint32x4_t v800;
  uint64x2_t v801;
  uint64x2_t v802;
  uint64x2_t v803;
  uint64x2_t v804;
  uint32x4_t v805;
  uint64x2_t v806;
  uint64x2_t v807;
  uint64x2_t v808;
  uint64x2_t v809;
  uint64x2_t v810;
  uint64x2_t v811;
  uint64x2_t v812;
  uint64x2_t v813;
  uint64x2_t v814;
  int8x16_t v815;
  unsigned int v816;
  unsigned int v817;
  unsigned int v818;
  uint64_t v819;
  unsigned int *v820;
  _DWORD *v821;
  uint64_t v822;
  unsigned int *v823;
  _DWORD *v824;
  uint64_t v825;
  int v826;
  unsigned int *v827;
  _BYTE *v828;
  _DWORD *v829;
  int v830;
  uint64_t v831;
  _BYTE *v832;
  int v833;
  unsigned int v834;
  int v835;
  uint64_t v836;
  int16x8_t *v837;
  int v838;
  int v839;
  char v840;
  char v841;
  unsigned __int32 v842;
  unsigned __int32 v843;
  _DWORD *v844;
  unsigned int v845;
  unsigned __int16 *v846;
  int v847;
  char v848;
  _DWORD *v849;
  unsigned int v850;
  unsigned int v851;
  uint64_t v852;
  int v853;
  uint64_t v854;
  uint64_t v855;
  unsigned int v856;
  unsigned __int8 v857;
  unsigned int v858;
  unsigned int v859;
  unsigned int v861;
  uint64_t v862;
  unsigned __int8 *__dst;
  uint64_t *v864;
  unsigned __int8 *v865;
  uint64_t v866;
  void (*v867)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  int v873;
  char v874;
  unsigned int v875;
  BOOL v877;
  unsigned int v878;
  _BYTE *v879;
  int v880;
  unsigned int v881;
  _BYTE *v882;
  unsigned int comp_ctx;
  _BOOL4 v884;
  int v885;
  unsigned int v886;
  uint64_t v887;
  int v888;
  uint64_t v889;
  unsigned __int8 v890;
  uint64_t v891;
  int v892;
  _BOOL4 v893;
  _WORD *v894;
  _DWORD *v895;
  _QWORD *v896;
  uint64_t v897;
  uint64_t v898;
  int64x2_t v899;
  uint64_t v900;
  int64x2_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  int64x2_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  int64x2_t v913;
  uint64_t v914;
  uint64_t v915;
  int64x2_t v916;
  uint64_t v917;
  uint64_t v918;
  int64x2_t v919;
  uint64_t v920;
  int64x2_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  unsigned __int8 v945;
  unsigned int v946;
  int v947;
  int v948;
  int v949;
  char v950;
  unsigned int v951;
  int v952;
  int v953;
  int v955;
  int v957;
  int v958;
  int v959;
  int v960;
  int v961;
  int v962;
  unsigned int v963;
  int v964;
  int v965;
  int v966;
  int v967;
  char v968;
  char v969;
  int v970;
  int v971;
  int v972;
  int v973;
  int v974;
  __int16 v975;
  int v976;
  int v977;
  __int16 v978;
  uint64_t v979;
  _BYTE *v980;
  int v981;
  int v982;
  uint64_t v983;
  unsigned __int8 v984;
  unsigned __int16 *v985;
  uint64_t v986;
  int v987;
  unsigned __int8 v988;
  int v989;
  unsigned __int8 v990;
  char v991;
  uint64_t v992;
  _WORD *v993;
  int v994;
  _DWORD *v995;
  uint64_t v996;
  _QWORD *v997;
  int64x2_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  int64x2_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  int64x2_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  int64x2_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  unsigned int v1024;
  int v1025;
  uint64_t v1026;
  int v1027;
  uint64_t v1028;
  _BYTE *v1029;
  int v1030;
  uint64_t v1031;
  _BYTE *v1032;
  int v1033;
  int v1034;
  unsigned int v1035;
  char *v1036;
  uint64_t v1037;
  uint64_t v1038;
  _QWORD *__b;
  uint64_t *v1040;
  unsigned __int8 *v1041;
  uint64_t v1042;
  char v1043;
  char v1044;
  _BYTE *v1045;
  _BYTE *v1046;
  unsigned __int8 *v1047;
  uint64_t v1048;
  uint64_t v1049;
  unint64_t v1050;
  unsigned int v1051;
  __int16 v1052;
  __int16 v1053;
  _WORD *v1054;
  _WORD *v1055;
  int v1056;
  int v1057;
  _DWORD *v1058;
  _DWORD *v1059;
  uint64_t v1060;
  uint64_t v1061;
  _QWORD *v1062;
  _QWORD *v1063;
  uint64_t v1064;
  int64x2_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  __int128 v1068;
  uint64_t v1069;
  uint64_t v1070;
  int64x2_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  int64x2_t v1074;
  uint64_t v1075;
  int64x2_t v1076;
  uint64_t v1077;
  int64x2_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  int64x2_t v1082;
  uint64_t v1083;
  unint64_t v1084;
  uint64_t v1085;
  int64x2_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  __int128 v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  char v1093;
  char v1094;
  __int16 v1095;
  __int16 v1096;
  int v1097;
  int v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  unint64_t v1117;
  uint64_t v1118;
  int64x2_t v1119;
  _OWORD *v1120;
  _OWORD *v1121;
  uint64_t v1122;
  _OWORD *v1123;
  uint64_t v1124;
  int64x2_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  _OWORD *v1131;
  uint64_t v1132;
  _OWORD *v1133;
  uint64_t v1134;
  _OWORD *v1135;
  uint64_t v1136;
  _OWORD *v1137;
  _OWORD *v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  int v1143;
  unsigned __int8 **v1144;
  uint64_t v1145;
  BOOL v1146;
  uint64_t v1147;
  uint64_t v1148;
  _BYTE *v1149;
  int v1150;
  int v1151;
  unsigned int ref_ctx;
  _BOOL4 v1153;
  uint64_t v1154;
  unsigned int bwd_ref_ctx;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  int v1162;
  int v1163;
  int v1164;
  int v1165;
  int v1166;
  uint64_t v1167;
  int v1168;
  uint64_t v1169;
  BOOL v1170;
  uint64_t v1171;
  int v1172;
  int v1173;
  uint64_t v1174;
  uint64_t v1175;
  int v1176;
  unsigned int v1177;
  int v1178;
  unsigned int v1179;
  int v1180;
  uint64_t v1181;
  signed int *v1182;
  uint64_t v1183;
  unint64_t v1184;
  const float *v1185;
  signed int v1186;
  unsigned int v1187;
  unsigned int v1188;
  signed int v1189;
  uint64_t v1190;
  unsigned int v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  int *v1196;
  int v1197;
  uint64_t v1198;
  int v1199;
  uint64_t v1200;
  BOOL v1201;
  unint64_t v1202;
  int v1203;
  unsigned int v1204;
  uint64_t v1205;
  signed int *v1206;
  int *v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  unsigned int v1212;
  signed int *v1213;
  uint64_t v1214;
  unint64_t v1215;
  const float *v1216;
  signed int v1217;
  unsigned int v1218;
  unsigned int v1219;
  signed int v1220;
  int *v1221;
  int v1222;
  uint64_t v1223;
  int v1224;
  uint64_t v1225;
  BOOL v1226;
  unint64_t v1227;
  int v1228;
  unsigned int v1229;
  unsigned int v1230;
  int v1231;
  char v1232;
  unsigned int v1233;
  char v1234;
  unsigned int v1235;
  uint64_t v1236;
  unsigned int v1237;
  int v1238;
  unsigned int v1239;
  const float *v1240;
  uint64_t v1241;
  int v1242;
  unint64_t v1243;
  unint64_t v1244;
  const float *v1245;
  int *v1246;
  signed int v1247;
  signed int v1248;
  int v1249;
  unsigned int v1250;
  unsigned int v1251;
  unsigned int v1252;
  unsigned int v1253;
  int *v1254;
  int v1255;
  uint64_t v1256;
  int v1257;
  uint64_t v1258;
  BOOL v1259;
  unint64_t v1260;
  int v1261;
  int v1262;
  unsigned int fwd_ref_ctx;
  _BOOL4 v1264;
  uint64_t v1265;
  unsigned int fwd_ref_2_ctx;
  int v1267;
  _QWORD *v1268;
  _BOOL4 v1269;
  unsigned int bwd_ref_1_ctx;
  uint64_t v1271;
  unsigned int v1272;
  int v1273;
  unsigned int v1274;
  signed int *v1275;
  int v1276;
  unint64_t v1277;
  unint64_t v1278;
  const float *v1279;
  signed int v1280;
  int v1281;
  unsigned int v1282;
  int v1283;
  unsigned int v1284;
  unsigned int v1285;
  int *v1286;
  int v1287;
  uint64_t v1288;
  int v1289;
  uint64_t v1290;
  BOOL v1291;
  unint64_t v1292;
  int v1293;
  uint64_t v1294;
  uint64_t v1295;
  BOOL v1296;
  _DWORD *v1297;
  unsigned int v1298;
  int v1299;
  unint64_t v1300;
  unint64_t v1301;
  unsigned __int8 *v1302;
  int v1303;
  uint64_t v1304;
  unint64_t v1305;
  unint64_t v1306;
  unsigned __int8 *v1307;
  int v1308;
  char v1309;
  int *v1310;
  int v1311;
  int v1312;
  unsigned __int8 *v1313;
  int v1314;
  uint64_t v1315;
  int v1316;
  int v1317;
  int v1318;
  int v1319;
  unsigned int v1320;
  unsigned int v1321;
  unsigned int filter_ctx;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  unint64_t v1326;
  BOOL v1328;
  int32x4_t v1330;
  int32x4_t v1331;
  int64x2_t v1332;
  int32x4_t v1333;
  int32x4_t v1334;
  int32x4_t v1335;
  float32x2_t v1336;
  int32x4_t v1337;
  unsigned int v1338;
  int32x4_t v1339;
  int32x4_t v1340;
  int64x2_t v1341;
  int64x2_t v1342;
  __int32 v1343;
  int64x2_t v1344;
  int64x2_t v1345;
  int v1346;
  unint64_t v1347;
  BOOL v1349;
  int32x4_t v1351;
  int32x4_t v1352;
  int64x2_t v1353;
  int32x4_t v1354;
  int32x4_t v1355;
  int32x4_t v1356;
  float32x2_t v1357;
  int32x4_t v1358;
  unsigned int v1359;
  int32x4_t v1360;
  int32x4_t v1361;
  int64x2_t v1362;
  int64x2_t v1363;
  __int32 v1364;
  int64x2_t v1365;
  int64x2_t v1366;
  int v1367;
  unsigned __int8 v1368;
  unsigned int fwd_ref_1_ctx;
  uint64_t v1370;
  uint64_t v1371;
  int v1372;
  int v1373;
  unsigned int v1374;
  uint64_t v1375;
  signed int *v1376;
  int *v1377;
  unint64_t v1378;
  BOOL v1380;
  int32x4_t v1382;
  int32x4_t v1383;
  int32x4_t v1384;
  uint32x4_t v1385;
  int64x2_t v1386;
  int32x4_t v1387;
  int32x4_t v1388;
  float32x2_t v1389;
  int64x2_t v1390;
  int32x4_t v1391;
  unsigned int v1392;
  int32x4_t v1393;
  int32x4_t v1394;
  int32x4_t v1395;
  int64x2_t v1396;
  int64x2_t v1397;
  int64x2_t v1398;
  __int32 v1399;
  __int32 v1400;
  int64x2_t v1401;
  int v1402;
  unint64_t v1403;
  BOOL v1405;
  int32x4_t v1407;
  int32x4_t v1408;
  int32x4_t v1409;
  uint32x4_t v1410;
  int64x2_t v1411;
  int32x4_t v1412;
  int32x4_t v1413;
  float32x2_t v1414;
  int64x2_t v1415;
  int32x4_t v1416;
  unsigned int v1417;
  int32x4_t v1418;
  int32x4_t v1419;
  int32x4_t v1420;
  int64x2_t v1421;
  int64x2_t v1422;
  int64x2_t v1423;
  __int32 v1424;
  __int32 v1425;
  int64x2_t v1426;
  int v1427;
  uint64_t v1428;
  __int16 *v1429;
  int v1430;
  int v1431;
  int v1432;
  int v1433;
  _BOOL4 v1434;
  uint64_t v1435;
  unsigned int v1436;
  _BOOL4 v1437;
  uint64_t v1438;
  unsigned int v1439;
  char v1440;
  unsigned int v1441;
  char v1442;
  unsigned int v1443;
  unsigned int v1444;
  unsigned int v1445;
  unsigned int uni_p1_ctx;
  unsigned int v1447;
  unsigned __int8 v1448;
  _BYTE *v1449;
  unsigned int *v1450;
  int v1451;
  uint64_t v1452;
  unsigned __int8 v1453;
  int *v1454;
  uint64_t v1455;
  int v1456;
  uint64_t v1457;
  _BOOL8 v1458;
  uint64_t v1459;
  unsigned __int16 *v1460;
  int v1461;
  unsigned int v1462;
  unsigned __int8 **v1463;
  uint64_t v1464;
  int *v1465;
  _BOOL4 v1467;
  unsigned int v1468;
  uint64_t v1469;
  int *v1470;
  int v1471;
  _DWORD *v1472;
  uint64_t v1473;
  int v1474;
  int v1475;
  int v1476;
  uint64_t v1477;
  BOOL v1478;
  unsigned int jnt_comp_ctx;
  uint64_t v1480;
  int v1481;
  int v1482;
  _BYTE *v1483;
  char *v1484;
  _DWORD *v1485;
  _DWORD *v1486;
  _DWORD *v1487;
  _DWORD *v1488;
  unsigned int v1489;
  unsigned int *v1490;
  unsigned int *v1491;
  unsigned int *v1492;
  unsigned int *v1493;
  const float *v1494;
  int v1495;
  uint64_t v1496;
  uint64_t v1497;
  unsigned __int8 *v1498;
  unsigned __int8 **v1499;
  unsigned __int8 **v1500;
  unsigned __int16 *v1501;
  uint64_t v1502;
  uint64_t v1503;
  _BOOL4 v1504;
  _BYTE *v1505;
  _BOOL4 v1506;
  int v1507;
  int v1508;
  int v1509;
  signed int v1510;
  int v1511;
  signed int v1512;
  signed int v1513;
  signed int v1514;
  unsigned int v1515;
  unsigned int v1516;
  int v1517;
  _BOOL4 v1519;
  unsigned int *v1520;
  int v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  unsigned int v1527;
  int v1528[2];
  _OWORD v1529[2];
  __int128 v1530;
  uint64_t v1531;
  int v1532;
  int v1533;
  int v1534;
  int v1535;
  int v1536;
  uint64_t v1537;

  v1537 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 16);
  v1526 = *(_QWORD *)(a1 + 8);
  v13 = *(_DWORD *)(a1 + 28);
  v1520 = (unsigned int *)(a1 + 28);
  v1523 = a1 + 259520;
  v14 = *(_DWORD *)(a1 + 259588);
  if (v14)
  {
    v15 = (_OWORD *)(*(_QWORD *)(v1526 + 4192) + 32 * (*(int *)(a1 + 24) + *(_QWORD *)(v1526 + 3264) * v13));
    v16 = *(_DWORD *)(a1 + 24);
  }
  else
  {
    v16 = *(_DWORD *)(a1 + 24);
    v15 = v1529;
  }
  v17 = &dav1d_block_dimensions[4 * a3];
  v18 = (unsigned int *)(a1 + 24);
  v19 = v16 & 0x1F;
  v20 = *(_DWORD *)(v1526 + 2056);
  v21 = *v17;
  v22 = v17[1];
  v23 = *(_DWORD *)(v1526 + 3280) - v16;
  if ((int)v21 >= v23)
    v24 = v23;
  else
    v24 = *v17;
  v25 = *(_DWORD *)(v1526 + 3284) - v13;
  if ((int)v22 < v25)
    v25 = v17[1];
  v1507 = *(_DWORD *)(v1526 + 2056);
  v1508 = v25;
  v26 = v20 != 3;
  if (v20 == 3)
    v27 = *v17;
  else
    v27 = v21 + 1;
  v28 = v20 == 1;
  v1525 = v13 & 0x1F;
  v1515 = (v13 & 0x1F) >> v28;
  if (v20 == 1)
    v29 = v22 + 1;
  else
    v29 = v17[1];
  v1511 = *(_DWORD *)(v12 + 13864);
  v1509 = *(_DWORD *)(v12 + 13872);
  if (v20 && (v21 > v26 || (v16 & 1) != 0))
  {
    if (v22 <= v28)
      v30 = v13 & 1;
    else
      v30 = 1;
    v1521 = v30;
  }
  else
  {
    v1521 = 0;
  }
  v1514 = v27 >> v26;
  v1513 = v29 >> v28;
  v1516 = v19 >> v26;
  memset(v1529, 0, sizeof(v1529));
  v1524 = v16 & 0x1F;
  if (v14 == 2)
  {
    if (*((_BYTE *)v15 + 3))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(v1526 + 3152))(a1, a3, a5, v15);
      if (*((_BYTE *)v15 + 8) == 13)
        v31 = 0;
      else
        v31 = *((unsigned __int8 *)v15 + 8);
      v32 = (v22 - 1);
      switch((int)v22)
      {
        case 1:
          v33 = a1 + v1525;
          *(_BYTE *)(v33 + 32) = v31;
          *(_BYTE *)(v33 + 256) = 1;
          break;
        case 2:
          v179 = a1 + v1525;
          *(_WORD *)(v179 + 32) = v31 | ((_WORD)v31 << 8);
          *(_WORD *)(v179 + 256) = 257;
          break;
        case 4:
          v180 = a1 + v1525;
          *(_DWORD *)(v180 + 32) = 16843009 * v31;
          *(_DWORD *)(v180 + 256) = 16843009;
          break;
        case 8:
          v181 = a1 + v1525;
          *(_QWORD *)(v181 + 32) = 0x101010101010101 * v31;
          *(_QWORD *)(v181 + 256) = 0x101010101010101;
          break;
        case 16:
          v182 = a1 + v1525;
          *(int64x2_t *)(v182 + 32) = vdupq_n_s64(0x101010101010101 * v31);
          *(_QWORD *)&v183 = 0x101010101010101;
          *((_QWORD *)&v183 + 1) = 0x101010101010101;
          *(_OWORD *)(v182 + 256) = v183;
          break;
        case 32:
          v184 = a1 + 32;
          v185 = vdupq_n_s64(0x101010101010101 * v31);
          *(int64x2_t *)(v184 + v1525) = v185;
          v186 = (v13 & 0x1F) + 16;
          *(int64x2_t *)(v184 + v186) = v185;
          v187 = a1 + 256;
          v185.i64[0] = 0x101010101010101;
          v185.i64[1] = 0x101010101010101;
          *(int64x2_t *)(v187 + v1525) = v185;
          *(int64x2_t *)(v187 + v186) = v185;
          break;
        default:
          break;
      }
      v188 = v21 - 1;
      switch((int)v21)
      {
        case 1:
          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524) = v31;
          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 1;
          break;
        case 2:
          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524) = v31 | ((_WORD)v31 << 8);
          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 257;
          break;
        case 4:
          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524) = 16843009 * v31;
          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 16843009;
          break;
        case 8:
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524) = 0x101010101010101 * v31;
          v189 = *(_QWORD *)(a1 + 656) + v1524;
          goto LABEL_117;
        case 16:
          v190 = 0x101010101010101 * v31;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524) = v190;
          v191 = v1524 + 8;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v191) = v190;
          v192 = *(_QWORD *)(a1 + 656) + v1524;
          goto LABEL_116;
        case 32:
          v193 = 0x101010101010101 * v31;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524) = v193;
          v194 = v1524 + 8;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v194) = v193;
          v195 = v1524 + 16;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v195) = v193;
          v191 = v1524 + 24;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v191) = v193;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0x101010101010101;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v194 + 224) = 0x101010101010101;
          v192 = *(_QWORD *)(a1 + 656) + v195;
LABEL_116:
          *(_QWORD *)(v192 + 224) = 0x101010101010101;
          v189 = *(_QWORD *)(a1 + 656) + v191;
LABEL_117:
          *(_QWORD *)(v189 + 224) = 0x101010101010101;
          break;
        default:
          break;
      }
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) == 0)
      {
LABEL_131:
        if (v1521)
        {
          switch(v1513)
          {
            case 1:
              *(_BYTE *)(a1 + v1515 + 592) = *((_BYTE *)v15 + 9);
              break;
            case 2:
              *(_WORD *)(a1 + v1515 + 592) = *((unsigned __int8 *)v15 + 9) | (*((unsigned __int8 *)v15 + 9) << 8);
              break;
            case 4:
              *(_DWORD *)(a1 + v1515 + 592) = 16843009 * *((unsigned __int8 *)v15 + 9);
              break;
            case 8:
              *(_QWORD *)(a1 + v1515 + 592) = 0x101010101010101 * *((unsigned __int8 *)v15 + 9);
              break;
            case 16:
              *(int64x2_t *)(a1 + v1515 + 592) = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 9));
              break;
            case 32:
              v220 = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 9));
              *(int64x2_t *)(a1 + 592 + v1515) = v220;
              *(int64x2_t *)(a1 + 592 + v1515 + 16) = v220;
              break;
            default:
              break;
          }
          result = 0;
          switch(v1514)
          {
            case 1:
              result = 0;
              *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = *((_BYTE *)v15 + 9);
              break;
            case 2:
              result = 0;
              *(_WORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = *((unsigned __int8 *)v15 + 9) | (*((unsigned __int8 *)v15 + 9) << 8);
              break;
            case 4:
              result = 0;
              *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 16843009 * *((unsigned __int8 *)v15 + 9);
              break;
            case 8:
              result = 0;
              *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 0x101010101010101 * *((unsigned __int8 *)v15 + 9);
              break;
            case 16:
              result = 0;
              v222 = 0x101010101010101 * *((unsigned __int8 *)v15 + 9);
              *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = v222;
              v223 = *(_QWORD *)(a1 + 656);
              v224 = v1516 + 8;
              goto LABEL_166;
            case 32:
              result = 0;
              v222 = 0x101010101010101 * *((unsigned __int8 *)v15 + 9);
              *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = v222;
              *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 8 + 560) = v222;
              *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 16 + 560) = v222;
              v223 = *(_QWORD *)(a1 + 656);
              v224 = v1516 + 24;
LABEL_166:
              *(_QWORD *)(v223 + v224 + 560) = v222;
              break;
            default:
              return result;
          }
          return result;
        }
        return 0;
      }
      v196 = *(_DWORD *)(a1 + 28) & 0x1F;
      if (!(_DWORD)v21)
      {
LABEL_128:
        if (v22 >= 2)
        {
          v204 = (uint64_t *)(a1 + 8 * (v196 + 5) + 672);
          v205 = *v18;
          do
          {
            *(_BYTE *)(*v204 + 12 * (int)(v205 + v188) + 8) = 0;
            v206 = *v204++;
            v205 = *v18;
            *(_BYTE *)(v206 + 12 * (int)(*v18 + v188) + 10) = a3;
            --v32;
          }
          while (v32);
        }
        goto LABEL_131;
      }
      v197 = *(_QWORD *)(a1 + 8 * (v22 + v196 + 4) + 672);
      v198 = *(_DWORD *)(a1 + 24);
      if ((_DWORD)v21 == 1)
      {
        v199 = 0;
      }
      else
      {
        v199 = v21 & 0xFE;
        v200 = (_BYTE *)(v197 + 12 * v198 + 22);
        v201 = v199;
        do
        {
          *(v200 - 14) = 0;
          *(v200 - 2) = 0;
          *(v200 - 12) = a3;
          *v200 = a3;
          v200 += 24;
          v201 -= 2;
        }
        while (v201);
        if (v199 == v21)
          goto LABEL_127;
      }
      v202 = v21 - v199;
      v203 = (_BYTE *)(12 * v198 + 12 * v199 + v197 + 10);
      do
      {
        *(v203 - 2) = 0;
        *v203 = a3;
        v203 += 12;
        --v202;
      }
      while (v202);
LABEL_127:
      v196 = *v1520 & 0x1F;
      goto LABEL_128;
    }
    if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0 && !*((_BYTE *)v15 + 20) && *((_BYTE *)v15 + 22) == 2)
    {
      if (*((__int16 *)v15 + 6) == -32768)
      {
        *(_DWORD *)v1523 = 0;
      }
      else
      {
        *(_DWORD *)v1523 = 3;
        *(_DWORD *)(v1523 + 12) = *((__int16 *)v15 + 6) + 0x10000;
        *(_DWORD *)(v1523 + 16) = *((__int16 *)v15 + 7);
        *(_DWORD *)(v1523 + 20) = *((__int16 *)v15 + 8);
        *(_DWORD *)(v1523 + 24) = *((__int16 *)v15 + 9) + 0x10000;
        dav1d_set_affine_mv2d(v21, v22, *((_DWORD *)v15 + 2), (_DWORD *)v1523, v16, v13);
        dav1d_get_shear_params(v1523);
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(v1526 + 3160))(a1, a3, v15))
    {
      v385 = (char *)&dav1d_filter_dir + 2 * *((unsigned __int8 *)v15 + 27);
      v386 = (v22 - 1);
      switch((int)v22)
      {
        case 1:
          v387 = (_BYTE *)(a1 + v1525);
          v387[384] = *v385;
          v387[416] = v385[1];
          v387[256] = 0;
          break;
        case 2:
          v388 = (_WORD *)(a1 + v1525);
          v388[192] = *v385 | (*v385 << 8);
          v388[208] = v385[1] | (v385[1] << 8);
          v388[128] = 0;
          break;
        case 4:
          v389 = (_DWORD *)(a1 + v1525);
          v389[96] = 16843009 * *v385;
          v389[104] = 16843009 * v385[1];
          v389[64] = 0;
          break;
        case 8:
          v390 = (_QWORD *)(a1 + v1525);
          v390[48] = 0x101010101010101 * *v385;
          v390[52] = 0x101010101010101 * v385[1];
          v390[32] = 0;
          break;
        case 16:
          v391 = (int64x2_t *)(a1 + v1525);
          v391[24] = vdupq_n_s64(0x101010101010101 * (unint64_t)*v385);
          v391[26] = vdupq_n_s64(0x101010101010101 * (unint64_t)v385[1]);
          v391[16].i64[0] = 0;
          v391[16].i64[1] = 0;
          break;
        case 32:
          v392 = a1 + 384;
          v393 = vdupq_n_s64(0x101010101010101 * (unint64_t)*v385);
          *(int64x2_t *)(v392 + v1525) = v393;
          v394 = (v13 & 0x1F) + 16;
          *(int64x2_t *)(v392 + v394) = v393;
          v395 = a1 + 416;
          v396 = vdupq_n_s64(0x101010101010101 * (unint64_t)v385[1]);
          *(int64x2_t *)(v395 + v1525) = v396;
          *(int64x2_t *)(v395 + v394) = v396;
          v397 = a1 + 256;
          *(_OWORD *)(v397 + v1525) = 0u;
          *(_OWORD *)(v397 + v394) = 0u;
          break;
        default:
          break;
      }
      v398 = v21 - 1;
      switch((int)v21)
      {
        case 1:
          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = *v385;
          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = v385[1];
          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
          break;
        case 2:
          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = *v385 | (*v385 << 8);
          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = v385[1] | (v385[1] << 8);
          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
          break;
        case 4:
          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 16843009 * *v385;
          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 16843009 * v385[1];
          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
          break;
        case 8:
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 0x101010101010101 * *v385;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 0x101010101010101 * v385[1];
          v399 = *(_QWORD *)(a1 + 656) + v1524;
          goto LABEL_307;
        case 16:
          v400 = 0x101010101010101 * *v385;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = v400;
          v401 = v1524 + 8;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v401 + 352) = v400;
          v402 = 0x101010101010101 * v385[1];
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = v402;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v401 + 384) = v402;
          v403 = *(_QWORD *)(a1 + 656) + v1524;
          goto LABEL_306;
        case 32:
          v404 = 0x101010101010101 * *v385;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = v404;
          v405 = v1524 + 8;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v405 + 352) = v404;
          v406 = v1524 + 16;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v406 + 352) = v404;
          v401 = v1524 + 24;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v401 + 352) = v404;
          v407 = 0x101010101010101 * v385[1];
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = v407;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v405 + 384) = v407;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v406 + 384) = v407;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v401 + 384) = v407;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v405 + 224) = 0;
          v403 = *(_QWORD *)(a1 + 656) + v406;
LABEL_306:
          *(_QWORD *)(v403 + 224) = 0;
          v399 = *(_QWORD *)(a1 + 656) + v401;
LABEL_307:
          *(_QWORD *)(v399 + 224) = 0;
          break;
        default:
          break;
      }
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        v408 = *(_DWORD *)(a1 + 28) & 0x1F;
        if ((_DWORD)v21)
        {
          v409 = (_BYTE *)(*(_QWORD *)(a1 + 8 * (v22 + v408 + 4) + 672) + 12 * *(int *)(a1 + 24) + 10);
          do
          {
            *(v409 - 2) = *((_BYTE *)v15 + 24) + 1;
            *(_DWORD *)(v409 - 10) = *((_DWORD *)v15 + 2);
            *v409 = a3;
            v409 += 12;
            --v21;
          }
          while (v21);
          v408 = *v1520 & 0x1F;
        }
        if (v22 >= 2)
        {
          v410 = (uint64_t *)(a1 + 8 * (v408 + 5) + 672);
          v411 = *v18;
          do
          {
            *(_BYTE *)(*v410 + 12 * (int)(v411 + v398) + 8) = *((_BYTE *)v15 + 24) + 1;
            *(_DWORD *)(*v410 + 12 * (int)(*v18 + v398)) = *((_DWORD *)v15 + 2);
            v412 = *v410++;
            v411 = *v18;
            *(_BYTE *)(v412 + 12 * (int)(*v18 + v398) + 10) = a3;
            --v386;
          }
          while (v386);
        }
      }
      if (!v1521)
        return 0;
      switch(v1513)
      {
        case 1:
          *(_BYTE *)(a1 + v1515 + 592) = 0;
          break;
        case 2:
          *(_WORD *)(a1 + v1515 + 592) = 0;
          break;
        case 4:
          *(_DWORD *)(a1 + v1515 + 592) = 0;
          break;
        case 8:
          *(_QWORD *)(a1 + v1515 + 592) = 0;
          break;
        case 16:
          v1208 = a1 + v1515;
          *(_QWORD *)(v1208 + 600) = 0;
          *(_QWORD *)(v1208 + 592) = 0;
          break;
        case 32:
          *(_OWORD *)(a1 + 592 + v1515) = 0u;
          *(_OWORD *)(a1 + 592 + v1515 + 16) = 0u;
          break;
        default:
          break;
      }
      result = 0;
      switch(v1514)
      {
        case 1:
          result = 0;
          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 0;
          break;
        case 2:
          result = 0;
          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 0;
          break;
        case 4:
          result = 0;
          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 0;
          break;
        case 8:
          result = 0;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 0;
          break;
        case 16:
          result = 0;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 0;
          v1209 = *(_QWORD *)(a1 + 656);
          v1210 = v1516 + 8;
          goto LABEL_1084;
        case 32:
          result = 0;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 0;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 8 + 560) = 0;
          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 16 + 560) = 0;
          v1209 = *(_QWORD *)(a1 + 656);
          v1210 = v1516 + 24;
LABEL_1084:
          *(_QWORD *)(v1209 + v1210 + 560) = 0;
          break;
        default:
          return result;
      }
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  *(_BYTE *)v15 = a2;
  *((_BYTE *)v15 + 2) = a4;
  *((_BYTE *)v15 + 1) = a3;
  v34 = *(_DWORD **)(v1526 + 24);
  v1522 = v22;
  v1495 = v28;
  LODWORD(v1496) = v16 > v1511;
  v1498 = &dav1d_block_dimensions[4 * a3];
  v1489 = v26;
  v1517 = v16;
  HIDWORD(v1496) = v13 > v1509;
  if (!v34[216])
  {
    v105 = 0;
    v1506 = 0;
    *((_BYTE *)v15 + 4) = 0;
    v106 = 1;
    v107 = v34[351];
    if ((int)v21 >= (int)v1522)
      v108 = v1522;
    else
      v108 = v21;
    if (!v107)
      goto LABEL_195;
    goto LABEL_99;
  }
  if (!v34[217])
  {
    v109 = *(_QWORD *)(v1526 + 2688);
    if (v109)
    {
      if ((int)v24 >= 1)
      {
        v110 = *(_QWORD *)(v1526 + 3264);
        v111 = v109 + v110 * v13 + v16;
        v112 = v24 & 0xFFFFFFE0;
        v113 = v24 & 0xFFFFFFF8;
        v44 = 8;
        v114 = v1508;
        while (v24 >= 8)
        {
          if (v24 >= 0x20)
          {
            v117 = vdupq_n_s32(v44);
            v118 = *(uint8x16_t *)(v111 + 16);
            v119 = vmovl_u8(*(uint8x8_t *)v111);
            v120 = vmovl_high_u8(*(uint8x16_t *)v111);
            v121 = vmovl_u8(*(uint8x8_t *)v118.i8);
            v122 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v121.i8);
            v123 = (int32x4_t)vmovl_high_u16(v121);
            v124 = vmovl_high_u8(v118);
            v125 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v124.i8);
            v126 = (int32x4_t)vmovl_high_u16(v124);
            v127 = vminq_s32(v117, (int32x4_t)vmovl_high_u16(v120));
            v128 = vminq_s32(v117, (int32x4_t)vmovl_u16(*(uint16x4_t *)v120.i8));
            v129 = vminq_s32(v117, (int32x4_t)vmovl_high_u16(v119));
            v130 = vminq_s32(v117, (int32x4_t)vmovl_u16(*(uint16x4_t *)v119.i8));
            v131 = vminq_s32(v117, v126);
            v132 = vminq_s32(v117, v125);
            v133 = vminq_s32(v117, v123);
            v134 = vminq_s32(v117, v122);
            if (v112 != 32)
            {
              v135 = *(uint8x16_t *)(v111 + 32);
              v136 = *(uint8x16_t *)(v111 + 48);
              v137 = vmovl_u8(*(uint8x8_t *)v135.i8);
              v138 = vmovl_high_u8(v135);
              v139 = vmovl_u8(*(uint8x8_t *)v136.i8);
              v140 = vmovl_high_u8(v136);
              v127 = vminq_s32(v127, (int32x4_t)vmovl_high_u16(v138));
              v128 = vminq_s32(v128, (int32x4_t)vmovl_u16(*(uint16x4_t *)v138.i8));
              v129 = vminq_s32(v129, (int32x4_t)vmovl_high_u16(v137));
              v130 = vminq_s32(v130, (int32x4_t)vmovl_u16(*(uint16x4_t *)v137.i8));
              v131 = vminq_s32(v131, (int32x4_t)vmovl_high_u16(v140));
              v132 = vminq_s32(v132, (int32x4_t)vmovl_u16(*(uint16x4_t *)v140.i8));
              v133 = vminq_s32(v133, (int32x4_t)vmovl_high_u16(v139));
              v134 = vminq_s32(v134, (int32x4_t)vmovl_u16(*(uint16x4_t *)v139.i8));
              if (v112 != 64)
              {
                v141 = *(uint8x16_t *)(v111 + 64);
                v142 = *(uint8x16_t *)(v111 + 80);
                v143 = vmovl_u8(*(uint8x8_t *)v141.i8);
                v144 = vmovl_high_u8(v141);
                v145 = vmovl_u8(*(uint8x8_t *)v142.i8);
                v146 = vmovl_high_u8(v142);
                v127 = vminq_s32(v127, (int32x4_t)vmovl_high_u16(v144));
                v128 = vminq_s32(v128, (int32x4_t)vmovl_u16(*(uint16x4_t *)v144.i8));
                v129 = vminq_s32(v129, (int32x4_t)vmovl_high_u16(v143));
                v130 = vminq_s32(v130, (int32x4_t)vmovl_u16(*(uint16x4_t *)v143.i8));
                v131 = vminq_s32(v131, (int32x4_t)vmovl_high_u16(v146));
                v132 = vminq_s32(v132, (int32x4_t)vmovl_u16(*(uint16x4_t *)v146.i8));
                v133 = vminq_s32(v133, (int32x4_t)vmovl_high_u16(v145));
                v134 = vminq_s32(v134, (int32x4_t)vmovl_u16(*(uint16x4_t *)v145.i8));
                if (v112 != 96)
                {
                  v147 = *(uint8x16_t *)(v111 + 96);
                  v148 = *(uint8x16_t *)(v111 + 112);
                  v149 = vmovl_u8(*(uint8x8_t *)v147.i8);
                  v150 = vmovl_high_u8(v147);
                  v151 = vmovl_u8(*(uint8x8_t *)v148.i8);
                  v152 = vmovl_high_u8(v148);
                  v127 = vminq_s32(v127, (int32x4_t)vmovl_high_u16(v150));
                  v128 = vminq_s32(v128, (int32x4_t)vmovl_u16(*(uint16x4_t *)v150.i8));
                  v129 = vminq_s32(v129, (int32x4_t)vmovl_high_u16(v149));
                  v130 = vminq_s32(v130, (int32x4_t)vmovl_u16(*(uint16x4_t *)v149.i8));
                  v131 = vminq_s32(v131, (int32x4_t)vmovl_high_u16(v152));
                  v132 = vminq_s32(v132, (int32x4_t)vmovl_u16(*(uint16x4_t *)v152.i8));
                  v133 = vminq_s32(v133, (int32x4_t)vmovl_high_u16(v151));
                  v134 = vminq_s32(v134, (int32x4_t)vmovl_u16(*(uint16x4_t *)v151.i8));
                  if (v112 != 128)
                  {
                    v153 = *(uint8x16_t *)(v111 + 128);
                    v154 = *(uint8x16_t *)(v111 + 144);
                    v155 = vmovl_u8(*(uint8x8_t *)v153.i8);
                    v156 = vmovl_high_u8(v153);
                    v157 = vmovl_u8(*(uint8x8_t *)v154.i8);
                    v158 = vmovl_high_u8(v154);
                    v127 = vminq_s32(v127, (int32x4_t)vmovl_high_u16(v156));
                    v128 = vminq_s32(v128, (int32x4_t)vmovl_u16(*(uint16x4_t *)v156.i8));
                    v129 = vminq_s32(v129, (int32x4_t)vmovl_high_u16(v155));
                    v130 = vminq_s32(v130, (int32x4_t)vmovl_u16(*(uint16x4_t *)v155.i8));
                    v131 = vminq_s32(v131, (int32x4_t)vmovl_high_u16(v158));
                    v132 = vminq_s32(v132, (int32x4_t)vmovl_u16(*(uint16x4_t *)v158.i8));
                    v133 = vminq_s32(v133, (int32x4_t)vmovl_high_u16(v157));
                    v134 = vminq_s32(v134, (int32x4_t)vmovl_u16(*(uint16x4_t *)v157.i8));
                    if (v112 != 160)
                    {
                      v159 = *(uint8x16_t *)(v111 + 160);
                      v160 = *(uint8x16_t *)(v111 + 176);
                      v161 = vmovl_u8(*(uint8x8_t *)v159.i8);
                      v162 = vmovl_high_u8(v159);
                      v163 = vmovl_u8(*(uint8x8_t *)v160.i8);
                      v164 = vmovl_high_u8(v160);
                      v127 = vminq_s32(v127, (int32x4_t)vmovl_high_u16(v162));
                      v128 = vminq_s32(v128, (int32x4_t)vmovl_u16(*(uint16x4_t *)v162.i8));
                      v129 = vminq_s32(v129, (int32x4_t)vmovl_high_u16(v161));
                      v130 = vminq_s32(v130, (int32x4_t)vmovl_u16(*(uint16x4_t *)v161.i8));
                      v131 = vminq_s32(v131, (int32x4_t)vmovl_high_u16(v164));
                      v132 = vminq_s32(v132, (int32x4_t)vmovl_u16(*(uint16x4_t *)v164.i8));
                      v133 = vminq_s32(v133, (int32x4_t)vmovl_high_u16(v163));
                      v134 = vminq_s32(v134, (int32x4_t)vmovl_u16(*(uint16x4_t *)v163.i8));
                      if (v112 != 192)
                      {
                        v165 = *(uint8x16_t *)(v111 + 192);
                        v166 = *(uint8x16_t *)(v111 + 208);
                        v167 = vmovl_u8(*(uint8x8_t *)v165.i8);
                        v168 = vmovl_high_u8(v165);
                        v169 = vmovl_u8(*(uint8x8_t *)v166.i8);
                        v170 = vmovl_high_u8(v166);
                        v127 = vminq_s32(v127, (int32x4_t)vmovl_high_u16(v168));
                        v128 = vminq_s32(v128, (int32x4_t)vmovl_u16(*(uint16x4_t *)v168.i8));
                        v129 = vminq_s32(v129, (int32x4_t)vmovl_high_u16(v167));
                        v130 = vminq_s32(v130, (int32x4_t)vmovl_u16(*(uint16x4_t *)v167.i8));
                        v131 = vminq_s32(v131, (int32x4_t)vmovl_high_u16(v170));
                        v132 = vminq_s32(v132, (int32x4_t)vmovl_u16(*(uint16x4_t *)v170.i8));
                        v133 = vminq_s32(v133, (int32x4_t)vmovl_high_u16(v169));
                        v134 = vminq_s32(v134, (int32x4_t)vmovl_u16(*(uint16x4_t *)v169.i8));
                      }
                    }
                  }
                }
              }
            }
            a10 = (int8x16_t)vminq_s32(v130, v134);
            v44 = vminvq_s32(vminq_s32(vminq_s32((int32x4_t)a10, vminq_s32(v128, v132)), vminq_s32(vminq_s32(v129, v133), vminq_s32(v127, v131))));
            if (v112 == v24)
              goto LABEL_92;
            v116 = v24 & 0x7FFFFFE0;
            i = v24 & 0xFFFFFFE0;
            if ((v24 & 0x18) == 0)
              goto LABEL_89;
          }
          else
          {
            v116 = 0;
          }
          v171 = vdupq_n_s32(v44);
          v172 = v171;
          do
          {
            a10.i64[0] = *(_QWORD *)(v111 + v116);
            v173 = (int32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_196889CC0);
            a10 = vqtbl1q_s8(a10, (int8x16_t)xmmword_196889CD0);
            v172 = vminq_s32(v172, (int32x4_t)a10);
            v171 = vminq_s32(v171, v173);
            v116 += 8;
          }
          while (v113 != v116);
          v44 = vminvq_s32(vminq_s32(v171, v172));
          i = v24 & 0xFFFFFFF8;
          if (v113 != v24)
            goto LABEL_89;
LABEL_92:
          if (v114 >= 2)
          {
            v111 += v110;
            --v114;
            if (v44)
              continue;
          }
          goto LABEL_153;
        }
        for (i = 0; i != v24; ++i)
        {
LABEL_89:
          if (v44 >= *(unsigned __int8 *)(v111 + i))
            v44 = *(unsigned __int8 *)(v111 + i);
        }
        goto LABEL_92;
      }
      LOBYTE(v44) = 8;
    }
    else
    {
      LOBYTE(v44) = 0;
    }
LABEL_153:
    v1506 = 0;
    *((_BYTE *)v15 + 4) = v44;
    goto LABEL_187;
  }
  if (!v34[284])
  {
    v105 = 0;
    v1506 = 0;
    v106 = 1;
    v174 = v34[351];
    if ((int)v21 >= (int)v1522)
      v108 = v1522;
    else
      v108 = v21;
    if (!v174)
      goto LABEL_195;
    goto LABEL_99;
  }
  v35 = v34[218];
  v36 = v13;
  v37 = v16;
  if (!v35)
  {
LABEL_136:
    v207 = *(_QWORD *)(v1526 + 3264);
    v208 = *(_QWORD *)(v1526 + 2680) + v207 * v36 + v37;
    if (v16 <= v1511 || v13 <= v1509)
    {
      if (v16 <= v1511)
      {
        v219 = 0;
        if (v13 <= v1509)
          v218 = 0;
        else
          v218 = *(unsigned __int8 *)(v208 - v207);
      }
      else
      {
        v219 = 0;
        v218 = *(unsigned __int8 *)(v208 - 1);
      }
    }
    else
    {
      v209 = *(unsigned __int8 *)(v208 - 1);
      v210 = (unsigned __int8 *)(v208 - v207);
      v211 = *(unsigned __int8 *)(v208 + ~v207);
      v212 = *v210;
      v213 = v209 == v212;
      v214 = v211 == v209;
      v215 = v211 == v209 || v209 == v212;
      v216 = v212 == v211;
      v217 = v212 == v211 || v215;
      if (v216)
        v218 = v212;
      else
        v218 = v209;
      v219 = 2;
      if (!v213 || !v214)
        v219 = v217;
    }
    v225 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 16 * v219 + 3504), 7uLL);
    v34 = *(_DWORD **)(v1526 + 24);
    v226 = v34[285];
    if (!v218)
      goto LABEL_179;
    if ((int)v226 > v218)
    {
      if (2 * v218 < (int)(v226 + 1))
      {
        if (2 * v218 < v225)
          goto LABEL_179;
        goto LABEL_288;
      }
      if (v225 <= (int)(2 * (v226 - v218)))
      {
LABEL_288:
        if ((v225 & 1) != 0)
          v225 = v218 + ((v225 + 1) >> 1);
        else
          v225 = v218 - (v225 >> 1);
LABEL_179:
        v1506 = 0;
        if (v226 >= v225)
          v227 = v225;
        else
          v227 = 0;
        if ((v227 & 0xF8) != 0)
          LOBYTE(v44) = 0;
        else
          LOBYTE(v44) = v227;
        *((_BYTE *)v15 + 4) = v44;
        goto LABEL_186;
      }
    }
    LOBYTE(v225) = v226 - v225;
    goto LABEL_179;
  }
  v1506 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12+ 4* (*(unsigned __int8 *)(a1 + (v13 & 0x1F) + 160)+ (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 656) + (v16 & 0x1F) + 128))+ 6036));
  if (!v1506)
  {
    v37 = *v18;
    v36 = *v1520;
    v16 = v1517;
    goto LABEL_136;
  }
  v39 = *(_QWORD *)(v1526 + 2688);
  if (!v39)
  {
    LOBYTE(v44) = 0;
    *((_BYTE *)v15 + 4) = 0;
    v34 = *(_DWORD **)(v1526 + 24);
LABEL_186:
    v19 = v1524;
    goto LABEL_187;
  }
  v34 = *(_DWORD **)(v1526 + 24);
  v19 = v1524;
  if ((int)v24 < 1)
  {
    LOBYTE(v44) = 8;
    *((_BYTE *)v15 + 4) = 8;
    goto LABEL_187;
  }
  v40 = *(_QWORD *)(v1526 + 3264);
  v41 = v39 + (int)*v18 + v40 * (int)*v1520;
  v42 = v24 & 0xFFFFFFE0;
  v43 = v24 & 0xFFFFFFF8;
  v44 = 8;
  v45 = v1508;
  do
  {
    if (v24 < 8)
    {
      v46 = 0;
      goto LABEL_54;
    }
    if (v24 < 0x20)
    {
      v47 = 0;
      goto LABEL_51;
    }
    v48 = vdupq_n_s32(v44);
    v49 = *(uint8x16_t *)(v41 + 16);
    v50 = vmovl_u8(*(uint8x8_t *)v41);
    v51 = vmovl_high_u8(*(uint8x16_t *)v41);
    v52 = vmovl_u8(*(uint8x8_t *)v49.i8);
    v53 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8);
    v54 = (int32x4_t)vmovl_high_u16(v52);
    v55 = vmovl_high_u8(v49);
    v56 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v55.i8);
    v57 = (int32x4_t)vmovl_high_u16(v55);
    v58 = vminq_s32(v48, (int32x4_t)vmovl_high_u16(v51));
    v59 = vminq_s32(v48, (int32x4_t)vmovl_u16(*(uint16x4_t *)v51.i8));
    v60 = vminq_s32(v48, (int32x4_t)vmovl_high_u16(v50));
    v61 = vminq_s32(v48, (int32x4_t)vmovl_u16(*(uint16x4_t *)v50.i8));
    v62 = vminq_s32(v48, v57);
    v63 = vminq_s32(v48, v56);
    v64 = vminq_s32(v48, v54);
    v65 = vminq_s32(v48, v53);
    if (v42 != 32)
    {
      v66 = *(uint8x16_t *)(v41 + 32);
      v67 = *(uint8x16_t *)(v41 + 48);
      v68 = vmovl_u8(*(uint8x8_t *)v66.i8);
      v69 = vmovl_high_u8(v66);
      v70 = vmovl_u8(*(uint8x8_t *)v67.i8);
      v71 = vmovl_high_u8(v67);
      v58 = vminq_s32(v58, (int32x4_t)vmovl_high_u16(v69));
      v59 = vminq_s32(v59, (int32x4_t)vmovl_u16(*(uint16x4_t *)v69.i8));
      v60 = vminq_s32(v60, (int32x4_t)vmovl_high_u16(v68));
      v61 = vminq_s32(v61, (int32x4_t)vmovl_u16(*(uint16x4_t *)v68.i8));
      v62 = vminq_s32(v62, (int32x4_t)vmovl_high_u16(v71));
      v63 = vminq_s32(v63, (int32x4_t)vmovl_u16(*(uint16x4_t *)v71.i8));
      v64 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v70));
      v65 = vminq_s32(v65, (int32x4_t)vmovl_u16(*(uint16x4_t *)v70.i8));
      if (v42 != 64)
      {
        v72 = *(uint8x16_t *)(v41 + 64);
        v73 = *(uint8x16_t *)(v41 + 80);
        v74 = vmovl_u8(*(uint8x8_t *)v72.i8);
        v75 = vmovl_high_u8(v72);
        v76 = vmovl_u8(*(uint8x8_t *)v73.i8);
        v77 = vmovl_high_u8(v73);
        v58 = vminq_s32(v58, (int32x4_t)vmovl_high_u16(v75));
        v59 = vminq_s32(v59, (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8));
        v60 = vminq_s32(v60, (int32x4_t)vmovl_high_u16(v74));
        v61 = vminq_s32(v61, (int32x4_t)vmovl_u16(*(uint16x4_t *)v74.i8));
        v62 = vminq_s32(v62, (int32x4_t)vmovl_high_u16(v77));
        v63 = vminq_s32(v63, (int32x4_t)vmovl_u16(*(uint16x4_t *)v77.i8));
        v64 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v76));
        v65 = vminq_s32(v65, (int32x4_t)vmovl_u16(*(uint16x4_t *)v76.i8));
        if (v42 != 96)
        {
          v78 = *(uint8x16_t *)(v41 + 96);
          v79 = *(uint8x16_t *)(v41 + 112);
          v80 = vmovl_u8(*(uint8x8_t *)v78.i8);
          v81 = vmovl_high_u8(v78);
          v82 = vmovl_u8(*(uint8x8_t *)v79.i8);
          v83 = vmovl_high_u8(v79);
          v58 = vminq_s32(v58, (int32x4_t)vmovl_high_u16(v81));
          v59 = vminq_s32(v59, (int32x4_t)vmovl_u16(*(uint16x4_t *)v81.i8));
          v60 = vminq_s32(v60, (int32x4_t)vmovl_high_u16(v80));
          v61 = vminq_s32(v61, (int32x4_t)vmovl_u16(*(uint16x4_t *)v80.i8));
          v62 = vminq_s32(v62, (int32x4_t)vmovl_high_u16(v83));
          v63 = vminq_s32(v63, (int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8));
          v64 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v82));
          v65 = vminq_s32(v65, (int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8));
          if (v42 != 128)
          {
            v84 = *(uint8x16_t *)(v41 + 128);
            v85 = *(uint8x16_t *)(v41 + 144);
            v86 = vmovl_u8(*(uint8x8_t *)v84.i8);
            v87 = vmovl_high_u8(v84);
            v88 = vmovl_u8(*(uint8x8_t *)v85.i8);
            v89 = vmovl_high_u8(v85);
            v58 = vminq_s32(v58, (int32x4_t)vmovl_high_u16(v87));
            v59 = vminq_s32(v59, (int32x4_t)vmovl_u16(*(uint16x4_t *)v87.i8));
            v60 = vminq_s32(v60, (int32x4_t)vmovl_high_u16(v86));
            v61 = vminq_s32(v61, (int32x4_t)vmovl_u16(*(uint16x4_t *)v86.i8));
            v62 = vminq_s32(v62, (int32x4_t)vmovl_high_u16(v89));
            v63 = vminq_s32(v63, (int32x4_t)vmovl_u16(*(uint16x4_t *)v89.i8));
            v64 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v88));
            v65 = vminq_s32(v65, (int32x4_t)vmovl_u16(*(uint16x4_t *)v88.i8));
            if (v42 != 160)
            {
              v90 = *(uint8x16_t *)(v41 + 160);
              v91 = *(uint8x16_t *)(v41 + 176);
              v92 = vmovl_u8(*(uint8x8_t *)v90.i8);
              v93 = vmovl_high_u8(v90);
              v94 = vmovl_u8(*(uint8x8_t *)v91.i8);
              v95 = vmovl_high_u8(v91);
              v58 = vminq_s32(v58, (int32x4_t)vmovl_high_u16(v93));
              v59 = vminq_s32(v59, (int32x4_t)vmovl_u16(*(uint16x4_t *)v93.i8));
              v60 = vminq_s32(v60, (int32x4_t)vmovl_high_u16(v92));
              v61 = vminq_s32(v61, (int32x4_t)vmovl_u16(*(uint16x4_t *)v92.i8));
              v62 = vminq_s32(v62, (int32x4_t)vmovl_high_u16(v95));
              v63 = vminq_s32(v63, (int32x4_t)vmovl_u16(*(uint16x4_t *)v95.i8));
              v64 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v94));
              v65 = vminq_s32(v65, (int32x4_t)vmovl_u16(*(uint16x4_t *)v94.i8));
              if (v42 != 192)
              {
                v96 = *(uint8x16_t *)(v41 + 192);
                v97 = *(uint8x16_t *)(v41 + 208);
                v98 = vmovl_u8(*(uint8x8_t *)v96.i8);
                v99 = vmovl_high_u8(v96);
                v100 = vmovl_u8(*(uint8x8_t *)v97.i8);
                v101 = vmovl_high_u8(v97);
                v58 = vminq_s32(v58, (int32x4_t)vmovl_high_u16(v99));
                v59 = vminq_s32(v59, (int32x4_t)vmovl_u16(*(uint16x4_t *)v99.i8));
                v60 = vminq_s32(v60, (int32x4_t)vmovl_high_u16(v98));
                v61 = vminq_s32(v61, (int32x4_t)vmovl_u16(*(uint16x4_t *)v98.i8));
                v62 = vminq_s32(v62, (int32x4_t)vmovl_high_u16(v101));
                v63 = vminq_s32(v63, (int32x4_t)vmovl_u16(*(uint16x4_t *)v101.i8));
                v64 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v100));
                v65 = vminq_s32(v65, (int32x4_t)vmovl_u16(*(uint16x4_t *)v100.i8));
              }
            }
          }
        }
      }
    }
    v38 = (int8x16_t)vminq_s32(v61, v65);
    v44 = vminvq_s32(vminq_s32(vminq_s32((int32x4_t)v38, vminq_s32(v59, v63)), vminq_s32(vminq_s32(v60, v64), vminq_s32(v58, v62))));
    if (v42 != v24)
    {
      v47 = v24 & 0x7FFFFFE0;
      v46 = v24 & 0xFFFFFFE0;
      if ((v24 & 0x18) != 0)
      {
LABEL_51:
        v102 = vdupq_n_s32(v44);
        v103 = v102;
        do
        {
          v38.i64[0] = *(_QWORD *)(v41 + v47);
          v104 = (int32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_196889CC0);
          v38 = vqtbl1q_s8(v38, (int8x16_t)xmmword_196889CD0);
          v103 = vminq_s32(v103, (int32x4_t)v38);
          v102 = vminq_s32(v102, v104);
          v47 += 8;
        }
        while (v43 != v47);
        v44 = vminvq_s32(vminq_s32(v102, v103));
        v46 = v24 & 0xFFFFFFF8;
        if (v43 == v24)
          goto LABEL_57;
      }
      do
      {
LABEL_54:
        if (v44 >= *(unsigned __int8 *)(v41 + v46))
          v44 = *(unsigned __int8 *)(v41 + v46);
        ++v46;
      }
      while (v24 != v46);
    }
LABEL_57:
    if (v45 < 2)
      break;
    v41 += v40;
    --v45;
  }
  while (v44);
  *((_BYTE *)v15 + 4) = v44;
LABEL_187:
  v105 = &v34[8 * v44 + 220];
  if (v105[7] || v105[5] != -1 || v34[8 * v44 + 226])
  {
    *((_BYTE *)v15 + 5) = 0;
    v177 = (char *)v15 + 5;
    goto LABEL_196;
  }
  v106 = 0;
  v228 = v34[351];
  if ((int)v21 >= (int)v1522)
    v108 = v1522;
  else
    v108 = v21;
  if (v228)
  {
LABEL_99:
    if (v108 <= 1)
      goto LABEL_195;
    v175 = v105;
    v176 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12+ 4* (*(unsigned __int8 *)(a1 + (v13 & 0x1F) + 224)+ (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 656) + v19 + 192))+ 6024));
    *((_BYTE *)v15 + 5) = v176;
    v177 = (char *)v15 + 5;
    if (v176)
    {
      v178 = 1;
      v105 = v175;
      v18 = (unsigned int *)(a1 + 24);
      goto LABEL_199;
    }
    v19 = v1524;
    v105 = v175;
    v18 = (unsigned int *)(a1 + 24);
    if ((v106 & 1) == 0)
      goto LABEL_196;
    goto LABEL_198;
  }
LABEL_195:
  *((_BYTE *)v15 + 5) = 0;
  v177 = (char *)v15 + 5;
  if ((v106 & 1) == 0)
  {
LABEL_196:
    if (v105[6])
    {
      v178 = 1;
      goto LABEL_199;
    }
  }
LABEL_198:
  v229 = v177;
  v230 = v18;
  v231 = v105;
  v232 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12+ 4* (*(unsigned __int8 *)(a1 + (v13 & 0x1F) + 192)+ (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 656) + v19 + 160))+ 6012));
  v105 = v231;
  v18 = v230;
  v177 = v229;
  v178 = v232;
LABEL_199:
  *((_BYTE *)v15 + 6) = v178;
  v233 = *(_DWORD **)(v1526 + 24);
  v234 = v1522;
  if (!v233[216])
  {
    v235 = v1517;
    goto LABEL_218;
  }
  v235 = v1517;
  if (!v233[217] || v233[284])
  {
LABEL_218:
    if (v178)
      goto LABEL_336;
    goto LABEL_219;
  }
  if (!v178 && v233[218])
  {
    v318 = v177;
    v1506 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12+ 4* (*(unsigned __int8 *)(a1 + (v13 & 0x1F) + 160)+ (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 656)+ v1524+ 128))+ 6036));
    if (v1506)
    {
      v320 = *(_QWORD *)(v1526 + 2688);
      v177 = v318;
      if (v320)
      {
        if ((int)v24 >= 1)
        {
          v321 = *(_QWORD *)(v1526 + 3264);
          v322 = v320 + (int)*v18 + v321 * (int)*v1520;
          v323 = v24 & 0xFFFFFFE0;
          v324 = v24 & 0xFFFFFFF8;
          v247 = 8;
          v325 = v1508;
          v235 = v1517;
          while (v24 >= 8)
          {
            if (v24 >= 0x20)
            {
              v328 = vdupq_n_s32(v247);
              v329 = *(uint8x16_t *)(v322 + 16);
              v330 = vmovl_u8(*(uint8x8_t *)v322);
              v331 = vmovl_high_u8(*(uint8x16_t *)v322);
              v332 = vmovl_u8(*(uint8x8_t *)v329.i8);
              v333 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v332.i8);
              v334 = (int32x4_t)vmovl_high_u16(v332);
              v335 = vmovl_high_u8(v329);
              v336 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v335.i8);
              v337 = (int32x4_t)vmovl_high_u16(v335);
              v338 = vminq_s32(v328, (int32x4_t)vmovl_high_u16(v331));
              v339 = vminq_s32(v328, (int32x4_t)vmovl_u16(*(uint16x4_t *)v331.i8));
              v340 = vminq_s32(v328, (int32x4_t)vmovl_high_u16(v330));
              v341 = vminq_s32(v328, (int32x4_t)vmovl_u16(*(uint16x4_t *)v330.i8));
              v342 = vminq_s32(v328, v337);
              v343 = vminq_s32(v328, v336);
              v344 = vminq_s32(v328, v334);
              v345 = vminq_s32(v328, v333);
              if (v323 != 32)
              {
                v346 = *(uint8x16_t *)(v322 + 32);
                v347 = *(uint8x16_t *)(v322 + 48);
                v348 = vmovl_u8(*(uint8x8_t *)v346.i8);
                v349 = vmovl_high_u8(v346);
                v350 = vmovl_u8(*(uint8x8_t *)v347.i8);
                v351 = vmovl_high_u8(v347);
                v338 = vminq_s32(v338, (int32x4_t)vmovl_high_u16(v349));
                v339 = vminq_s32(v339, (int32x4_t)vmovl_u16(*(uint16x4_t *)v349.i8));
                v340 = vminq_s32(v340, (int32x4_t)vmovl_high_u16(v348));
                v341 = vminq_s32(v341, (int32x4_t)vmovl_u16(*(uint16x4_t *)v348.i8));
                v342 = vminq_s32(v342, (int32x4_t)vmovl_high_u16(v351));
                v343 = vminq_s32(v343, (int32x4_t)vmovl_u16(*(uint16x4_t *)v351.i8));
                v344 = vminq_s32(v344, (int32x4_t)vmovl_high_u16(v350));
                v345 = vminq_s32(v345, (int32x4_t)vmovl_u16(*(uint16x4_t *)v350.i8));
                if (v323 != 64)
                {
                  v352 = *(uint8x16_t *)(v322 + 64);
                  v353 = *(uint8x16_t *)(v322 + 80);
                  v354 = vmovl_u8(*(uint8x8_t *)v352.i8);
                  v355 = vmovl_high_u8(v352);
                  v356 = vmovl_u8(*(uint8x8_t *)v353.i8);
                  v357 = vmovl_high_u8(v353);
                  v338 = vminq_s32(v338, (int32x4_t)vmovl_high_u16(v355));
                  v339 = vminq_s32(v339, (int32x4_t)vmovl_u16(*(uint16x4_t *)v355.i8));
                  v340 = vminq_s32(v340, (int32x4_t)vmovl_high_u16(v354));
                  v341 = vminq_s32(v341, (int32x4_t)vmovl_u16(*(uint16x4_t *)v354.i8));
                  v342 = vminq_s32(v342, (int32x4_t)vmovl_high_u16(v357));
                  v343 = vminq_s32(v343, (int32x4_t)vmovl_u16(*(uint16x4_t *)v357.i8));
                  v344 = vminq_s32(v344, (int32x4_t)vmovl_high_u16(v356));
                  v345 = vminq_s32(v345, (int32x4_t)vmovl_u16(*(uint16x4_t *)v356.i8));
                  if (v323 != 96)
                  {
                    v358 = *(uint8x16_t *)(v322 + 96);
                    v359 = *(uint8x16_t *)(v322 + 112);
                    v360 = vmovl_u8(*(uint8x8_t *)v358.i8);
                    v361 = vmovl_high_u8(v358);
                    v362 = vmovl_u8(*(uint8x8_t *)v359.i8);
                    v363 = vmovl_high_u8(v359);
                    v338 = vminq_s32(v338, (int32x4_t)vmovl_high_u16(v361));
                    v339 = vminq_s32(v339, (int32x4_t)vmovl_u16(*(uint16x4_t *)v361.i8));
                    v340 = vminq_s32(v340, (int32x4_t)vmovl_high_u16(v360));
                    v341 = vminq_s32(v341, (int32x4_t)vmovl_u16(*(uint16x4_t *)v360.i8));
                    v342 = vminq_s32(v342, (int32x4_t)vmovl_high_u16(v363));
                    v343 = vminq_s32(v343, (int32x4_t)vmovl_u16(*(uint16x4_t *)v363.i8));
                    v344 = vminq_s32(v344, (int32x4_t)vmovl_high_u16(v362));
                    v345 = vminq_s32(v345, (int32x4_t)vmovl_u16(*(uint16x4_t *)v362.i8));
                    if (v323 != 128)
                    {
                      v364 = *(uint8x16_t *)(v322 + 128);
                      v365 = *(uint8x16_t *)(v322 + 144);
                      v366 = vmovl_u8(*(uint8x8_t *)v364.i8);
                      v367 = vmovl_high_u8(v364);
                      v368 = vmovl_u8(*(uint8x8_t *)v365.i8);
                      v369 = vmovl_high_u8(v365);
                      v338 = vminq_s32(v338, (int32x4_t)vmovl_high_u16(v367));
                      v339 = vminq_s32(v339, (int32x4_t)vmovl_u16(*(uint16x4_t *)v367.i8));
                      v340 = vminq_s32(v340, (int32x4_t)vmovl_high_u16(v366));
                      v341 = vminq_s32(v341, (int32x4_t)vmovl_u16(*(uint16x4_t *)v366.i8));
                      v342 = vminq_s32(v342, (int32x4_t)vmovl_high_u16(v369));
                      v343 = vminq_s32(v343, (int32x4_t)vmovl_u16(*(uint16x4_t *)v369.i8));
                      v344 = vminq_s32(v344, (int32x4_t)vmovl_high_u16(v368));
                      v345 = vminq_s32(v345, (int32x4_t)vmovl_u16(*(uint16x4_t *)v368.i8));
                      if (v323 != 160)
                      {
                        v370 = *(uint8x16_t *)(v322 + 160);
                        v371 = *(uint8x16_t *)(v322 + 176);
                        v372 = vmovl_u8(*(uint8x8_t *)v370.i8);
                        v373 = vmovl_high_u8(v370);
                        v374 = vmovl_u8(*(uint8x8_t *)v371.i8);
                        v375 = vmovl_high_u8(v371);
                        v338 = vminq_s32(v338, (int32x4_t)vmovl_high_u16(v373));
                        v339 = vminq_s32(v339, (int32x4_t)vmovl_u16(*(uint16x4_t *)v373.i8));
                        v340 = vminq_s32(v340, (int32x4_t)vmovl_high_u16(v372));
                        v341 = vminq_s32(v341, (int32x4_t)vmovl_u16(*(uint16x4_t *)v372.i8));
                        v342 = vminq_s32(v342, (int32x4_t)vmovl_high_u16(v375));
                        v343 = vminq_s32(v343, (int32x4_t)vmovl_u16(*(uint16x4_t *)v375.i8));
                        v344 = vminq_s32(v344, (int32x4_t)vmovl_high_u16(v374));
                        v345 = vminq_s32(v345, (int32x4_t)vmovl_u16(*(uint16x4_t *)v374.i8));
                        if (v323 != 192)
                        {
                          v376 = *(uint8x16_t *)(v322 + 192);
                          v377 = *(uint8x16_t *)(v322 + 208);
                          v378 = vmovl_u8(*(uint8x8_t *)v376.i8);
                          v379 = vmovl_high_u8(v376);
                          v380 = vmovl_u8(*(uint8x8_t *)v377.i8);
                          v381 = vmovl_high_u8(v377);
                          v338 = vminq_s32(v338, (int32x4_t)vmovl_high_u16(v379));
                          v339 = vminq_s32(v339, (int32x4_t)vmovl_u16(*(uint16x4_t *)v379.i8));
                          v340 = vminq_s32(v340, (int32x4_t)vmovl_high_u16(v378));
                          v341 = vminq_s32(v341, (int32x4_t)vmovl_u16(*(uint16x4_t *)v378.i8));
                          v342 = vminq_s32(v342, (int32x4_t)vmovl_high_u16(v381));
                          v343 = vminq_s32(v343, (int32x4_t)vmovl_u16(*(uint16x4_t *)v381.i8));
                          v344 = vminq_s32(v344, (int32x4_t)vmovl_high_u16(v380));
                          v345 = vminq_s32(v345, (int32x4_t)vmovl_u16(*(uint16x4_t *)v380.i8));
                        }
                      }
                    }
                  }
                }
              }
              v319 = (int8x16_t)vminq_s32(v341, v345);
              v247 = vminvq_s32(vminq_s32(vminq_s32((int32x4_t)v319, vminq_s32(v339, v343)), vminq_s32(vminq_s32(v340, v344), vminq_s32(v338, v342))));
              if (v323 == v24)
                goto LABEL_283;
              v327 = v24 & 0x7FFFFFE0;
              j = v24 & 0xFFFFFFE0;
              if ((v24 & 0x18) == 0)
                goto LABEL_280;
            }
            else
            {
              v327 = 0;
            }
            v382 = vdupq_n_s32(v247);
            v383 = v382;
            do
            {
              v319.i64[0] = *(_QWORD *)(v322 + v327);
              v384 = (int32x4_t)vqtbl1q_s8(v319, (int8x16_t)xmmword_196889CC0);
              v319 = vqtbl1q_s8(v319, (int8x16_t)xmmword_196889CD0);
              v383 = vminq_s32(v383, (int32x4_t)v319);
              v382 = vminq_s32(v382, v384);
              v327 += 8;
            }
            while (v324 != v327);
            v247 = vminvq_s32(vminq_s32(v382, v383));
            j = v24 & 0xFFFFFFF8;
            if (v324 != v24)
              goto LABEL_280;
LABEL_283:
            if (v325 >= 2)
            {
              v322 += v321;
              --v325;
              if (v247)
                continue;
            }
            goto LABEL_334;
          }
          for (j = 0; j != v24; ++j)
          {
LABEL_280:
            if (v247 >= *(unsigned __int8 *)(v322 + j))
              v247 = *(unsigned __int8 *)(v322 + j);
          }
          goto LABEL_283;
        }
        LOBYTE(v247) = 8;
        v235 = v1517;
      }
      else
      {
        LOBYTE(v247) = 0;
        v235 = v1517;
      }
LABEL_334:
      *((_BYTE *)v15 + 4) = v247;
      goto LABEL_335;
    }
    v1506 = 0;
    v235 = v1517;
    v177 = v318;
  }
  v236 = *(_QWORD *)(v1526 + 3264);
  v237 = *(_QWORD *)(v1526 + 2680) + (int)*v18 + v236 * (int)*v1520;
  if (v235 <= v1511 || v13 <= v1509)
  {
    if (v235 <= v1511)
    {
      v248 = 0;
      if (v13 <= v1509)
        v247 = 0;
      else
        v247 = *(unsigned __int8 *)(v237 - v236);
    }
    else
    {
      v248 = 0;
      v247 = *(unsigned __int8 *)(v237 - 1);
    }
  }
  else
  {
    v238 = *(unsigned __int8 *)(v237 - 1);
    v239 = (unsigned __int8 *)(v237 - v236);
    v240 = *(unsigned __int8 *)(v237 + ~v236);
    v241 = *v239;
    v242 = v238 == v241;
    v243 = v240 == v238;
    v244 = v240 == v238 || v238 == v241;
    v245 = v241 == v240;
    v246 = v241 == v240 || v244;
    if (v245)
      v247 = v241;
    else
      v247 = v238;
    v248 = 2;
    if (!v242 || !v243)
      v248 = v246;
  }
  if (*((_BYTE *)v15 + 6))
    goto LABEL_332;
  v413 = v18;
  v414 = v177;
  v415 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 16 * v248 + 3504), 7uLL);
  v416 = *(_DWORD *)(*(_QWORD *)(v1526 + 24) + 1140);
  if (!v247)
  {
LABEL_327:
    v235 = v1517;
    v177 = v414;
    goto LABEL_328;
  }
  if ((int)v416 <= v247)
  {
    LOBYTE(v415) = v416 - v415;
    goto LABEL_327;
  }
  if (2 * v247 >= (int)(v416 + 1))
  {
    v235 = v1517;
    v177 = v414;
    if (v415 > (int)(2 * (v416 - v247)))
    {
      LOBYTE(v415) = v416 - v415;
      goto LABEL_328;
    }
LABEL_1146:
    v18 = v413;
    if ((v415 & 1) != 0)
      v415 = v247 + ((v415 + 1) >> 1);
    else
      v415 = v247 - (v415 >> 1);
  }
  else
  {
    v235 = v1517;
    v177 = v414;
    if (2 * v247 >= v415)
      goto LABEL_1146;
LABEL_328:
    v18 = v413;
  }
  if (v416 >= v415)
    LOBYTE(v247) = v415;
  else
    LOBYTE(v247) = 0;
LABEL_332:
  *((_BYTE *)v15 + 4) = v247;
  if (v247 >= 8u)
  {
    LOBYTE(v247) = 0;
    goto LABEL_334;
  }
LABEL_335:
  v233 = *(_DWORD **)(v1526 + 24);
  v105 = &v233[8 * v247 + 220];
  v234 = v1522;
  if (!*((_BYTE *)v15 + 6))
  {
LABEL_219:
    v249 = *(_DWORD *)(*(_QWORD *)(v1526 + 8) + 1012);
    if (v249)
      v249 = (*v1520 >> 3) & 2 | (*v18 >> 4) & 1;
    v250 = *(_QWORD *)(v1523 + 56);
    if (*(unsigned __int8 *)(v250 + v249) != 255)
      goto LABEL_336;
    v251 = v233[326];
    v1485 = v105;
    v252 = v177;
    v253 = 0;
    if (!v251)
    {
LABEL_251:
      *(_BYTE *)(v250 + v249) = v253;
      v177 = v252;
      v105 = v1485;
      if (v21 >= 0x11)
        *(_BYTE *)(v249 + *(_QWORD *)(v1523 + 56) + 1) = v253;
      v235 = v1517;
      if (v234 >= 0x11)
      {
        *(_BYTE *)(v249 + *(_QWORD *)(v1523 + 56) + 2) = v253;
        if ((_DWORD)v21 == 32 && (_DWORD)v234 == 32)
          *(_BYTE *)(v249 + *(_QWORD *)(v1523 + 56) + 3) = v253;
      }
      goto LABEL_336;
    }
    v254 = *(_DWORD *)(v12 + 13848);
    v255 = *(_QWORD *)(v12 + 13840);
    v256.i64[0] = 0x7F0000007FLL;
    v256.i64[1] = 0x7F0000007FLL;
    v257 = *(_DWORD *)(v12 + 13852);
    while (1)
    {
      v261 = (v254 >> 1) & 0x7FFFFF80 | 4;
      v262 = v261 << 48;
      v263 = v254 - 2 * v261;
      if (v255 >= v261 << 48)
        v264 = v261 << 48;
      else
        v264 = 0;
      if (v255 < v261 << 48)
        v263 = 0;
      v265 = v263 + v261;
      v266 = __clz(v265);
      v267 = v266 ^ 0x10;
      v259 = v257 - (v266 ^ 0x10);
      *(_DWORD *)(v12 + 13852) = v259;
      v268 = ((v255 - v264 + 1) << (v266 ^ 0x10)) - 1;
      *(_QWORD *)(v12 + 13840) = v268;
      v254 = v265 << (v266 ^ 0x10);
      *(_DWORD *)(v12 + 13848) = v254;
      if ((v259 & 0x80000000) == 0)
        goto LABEL_227;
      v260 = *(uint8x16_t **)(v12 + 13824);
      v269 = 40 - v259;
      if ((int)(40 - v259) >= 0)
      {
        v270 = *(_QWORD *)(v12 + 13832);
        if ((unint64_t)v260 < v270)
          break;
      }
LABEL_226:
      *(_QWORD *)(v12 + 13840) = v268;
      *(_DWORD *)(v12 + 13852) = v259;
      *(_QWORD *)(v12 + 13824) = v260;
LABEL_227:
      v253 = (2 * v253) | (v255 < v262);
      v257 = v259;
      v255 = v268;
      if (!--v251)
        goto LABEL_251;
    }
    if (v269 >= 7)
      v271 = 7;
    else
      v271 = 40 - v259;
    v272 = (v267 - v257 - v271 + 47) >> 3;
    if (~(unint64_t)v260 + v270 < v272)
      v272 = ~(unint64_t)v260 + v270;
    if (v272 >= 0xF)
    {
      v275 = v272 + 1;
      v276 = 0uLL;
      v277 = (int8x16_t)(unint64_t)v268;
      v278 = vdupq_n_s32(v269);
      v279 = (v272 + 1) & 0x3FFFFFF0;
      v280 = vaddq_s32(v278, (int32x4_t)xmmword_196889AA0);
      v273 = v269 - 8 * v279;
      v281 = vaddq_s32(v278, (int32x4_t)xmmword_196889AB0);
      v274 = (uint8x16_t *)((char *)v260 + v279);
      v282 = vaddq_s32(v278, (int32x4_t)xmmword_196889AC0);
      v283 = vaddq_s32(v278, (int32x4_t)xmmword_196889AD0);
      v284 = v279;
      v285 = 0uLL;
      v286 = 0uLL;
      v287 = 0uLL;
      v288 = 0uLL;
      v289 = 0uLL;
      v290 = 0uLL;
      do
      {
        v291 = *v260++;
        v292 = vmovl_high_u8(v291);
        v293 = vmovl_high_u16(v292);
        v294.i64[0] = v293.u32[0];
        v294.i64[1] = v293.u32[1];
        v295 = v294;
        v296 = vmovl_u16(*(uint16x4_t *)v292.i8);
        v294.i64[0] = v296.u32[2];
        v294.i64[1] = v296.u32[3];
        v297 = v294;
        v298 = vmovl_u8(*(uint8x8_t *)v291.i8);
        v299 = vmovl_high_u16(v298);
        v294.i64[0] = v299.u32[2];
        v294.i64[1] = v299.u32[3];
        v300 = v294;
        v294.i64[0] = v293.u32[2];
        v294.i64[1] = v293.u32[3];
        v301 = v294;
        v294.i64[0] = v296.u32[0];
        v294.i64[1] = v296.u32[1];
        v302 = v294;
        v294.i64[0] = v299.u32[0];
        v294.i64[1] = v299.u32[1];
        v303 = v294;
        v304 = vmovl_u16(*(uint16x4_t *)v298.i8);
        v294.i64[0] = v304.u32[2];
        v294.i64[1] = v304.u32[3];
        v305 = v294;
        v294.i64[0] = v304.u32[0];
        v294.i64[1] = v304.u32[1];
        v306 = v294;
        v294.i64[0] = v280.u32[0];
        v294.i64[1] = v280.u32[1];
        v307 = v294;
        v294.i64[0] = v281.u32[2];
        v294.i64[1] = v281.u32[3];
        v308 = v294;
        v294.i64[0] = v282.u32[2];
        v294.i64[1] = v282.u32[3];
        v309 = v294;
        v294.i64[0] = v280.u32[2];
        v294.i64[1] = v280.u32[3];
        v310 = v294;
        v294.i64[0] = v281.u32[0];
        v294.i64[1] = v281.u32[1];
        v311 = v294;
        v294.i64[0] = v282.u32[0];
        v294.i64[1] = v282.u32[1];
        v312 = v294;
        v294.i64[0] = v283.u32[2];
        v294.i64[1] = v283.u32[3];
        v313 = v294;
        v294.i64[0] = v283.u32[0];
        v294.i64[1] = v283.u32[1];
        v289 = veorq_s8((int8x16_t)vshlq_u64(v295, v307), v289);
        v288 = veorq_s8((int8x16_t)vshlq_u64(v297, v308), v288);
        v286 = veorq_s8((int8x16_t)vshlq_u64(v300, v309), v286);
        v290 = veorq_s8((int8x16_t)vshlq_u64(v301, v310), v290);
        v287 = veorq_s8((int8x16_t)vshlq_u64(v302, v311), v287);
        v285 = veorq_s8((int8x16_t)vshlq_u64(v303, v312), v285);
        v276 = veorq_s8((int8x16_t)vshlq_u64(v305, v313), v276);
        v277 = veorq_s8((int8x16_t)vshlq_u64(v306, v294), v277);
        v283 = vaddq_s32(v283, v256);
        v282 = vaddq_s32(v282, v256);
        v281 = vaddq_s32(v281, v256);
        v280 = vaddq_s32(v280, v256);
        v284 -= 16;
      }
      while (v284);
      v314 = veorq_s8(veorq_s8(veorq_s8(v277, v287), veorq_s8(v285, v289)), veorq_s8(veorq_s8(v276, v288), veorq_s8(v286, v290)));
      v268 = (uint64_t)veor_s8(*(int8x8_t *)v314.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v314, v314, 8uLL));
      if (v275 == v279)
      {
        v258 = v269 - 8 * v279 + 8;
LABEL_225:
        v259 = 48 - v258;
        v260 = v274;
        goto LABEL_226;
      }
    }
    else
    {
      v273 = 40 - v259;
      v274 = *(uint8x16_t **)(v12 + 13824);
    }
    v315 = v273;
    do
    {
      v316 = v274->u8[0];
      v274 = (uint8x16_t *)((char *)v274 + 1);
      v268 ^= (unint64_t)v316 << v315;
      v317 = v315 - 8;
      if (v315 < 8)
        break;
      v315 -= 8;
    }
    while ((unint64_t)v274 < v270);
    v258 = v317 + 8;
    goto LABEL_225;
  }
LABEL_336:
  v417 = *(_DWORD *)(*(_QWORD *)(v1526 + 8) + 1012);
  v418 = 0x1Fu >> (v417 == 0);
  if ((v418 & *v18) != 0 || (*v1520 & v418) != 0)
    goto LABEL_550;
  v1483 = v177;
  v419 = *(_DWORD *)(v12 + 14040);
  v420 = *(_DWORD **)(v1526 + 24);
  if (!v420[302])
  {
    v1484 = (char *)(v12 + 14044);
    LODWORD(v1531) = *(_DWORD *)(v12 + 14044);
    v423 = v419;
    goto LABEL_540;
  }
  if (v417)
    v421 = 0;
  else
    v421 = 3;
  if (v421 == (_DWORD)a3)
  {
    v422 = *((unsigned __int8 *)v15 + 6);
    v1484 = (char *)(v12 + 14044);
    LODWORD(v1531) = *(_DWORD *)(v12 + 14044);
    v423 = v419;
    if (v422)
      goto LABEL_540;
  }
  else
  {
    v1484 = (char *)(v12 + 14044);
    LODWORD(v1531) = *(_DWORD *)(v12 + 14044);
  }
  v1482 = v419;
  v1486 = v105;
  v1490 = v18;
  v424 = (_QWORD *)(v12 + 13824);
  v425 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 5296), 3uLL);
  if (v425 != 3)
    goto LABEL_351;
  v426 = dav1d_msac_decode_BOOL_equi_c((unsigned __int8 **)(v12 + 13824));
  v427 = (2 * dav1d_msac_decode_BOOL_equi_c((unsigned __int8 **)(v12 + 13824))) | (4 * v426);
  v428 = dav1d_msac_decode_BOOL_equi_c((unsigned __int8 **)(v12 + 13824));
  v429 = 0;
  v430 = (v427 | v428) + 1;
  if ((v427 | v428) != 0xFFFFFFFF)
  {
    v435 = *(_DWORD *)(v12 + 13848);
    v436 = *(_QWORD *)(v12 + 13840);
    v437.i64[0] = 0x7F0000007FLL;
    v437.i64[1] = 0x7F0000007FLL;
    v438 = (v427 | v428) + 1;
    v439 = *(_DWORD *)(v12 + 13852);
    v234 = v1522;
    while (1)
    {
      v443 = (v435 >> 1) & 0x7FFFFF80 | 4;
      v444 = v443 << 48;
      v445 = v435 - 2 * v443;
      if (v436 >= v443 << 48)
        v446 = v443 << 48;
      else
        v446 = 0;
      if (v436 < v443 << 48)
        v445 = 0;
      v447 = v445 + v443;
      v448 = __clz(v447);
      v449 = v448 ^ 0x10;
      v441 = v439 - (v448 ^ 0x10);
      *(_DWORD *)(v12 + 13852) = v441;
      v450 = ((v436 - v446 + 1) << (v448 ^ 0x10)) - 1;
      *(_QWORD *)(v12 + 13840) = v450;
      v435 = v447 << (v448 ^ 0x10);
      *(_DWORD *)(v12 + 13848) = v435;
      if ((v441 & 0x80000000) == 0)
        goto LABEL_371;
      v442 = *(uint8x16_t **)(v12 + 13824);
      v451 = 40 - v441;
      if ((int)(40 - v441) >= 0)
      {
        v452 = *(_QWORD *)(v12 + 13832);
        if ((unint64_t)v442 < v452)
          break;
      }
LABEL_370:
      *(_QWORD *)(v12 + 13840) = v450;
      *(_DWORD *)(v12 + 13852) = v441;
      *(_QWORD *)(v12 + 13824) = v442;
LABEL_371:
      v429 = (2 * v429) | (v436 < v444);
      v439 = v441;
      v436 = v450;
      if (!--v438)
        goto LABEL_350;
    }
    if (v451 >= 7)
      v453 = 7;
    else
      v453 = 40 - v441;
    v454 = (v449 - v439 - v453 + 47) >> 3;
    if (~(unint64_t)v442 + v452 < v454)
      v454 = ~(unint64_t)v442 + v452;
    if (v454 >= 0xF)
    {
      v457 = v454 + 1;
      v458 = 0uLL;
      v459 = (int8x16_t)(unint64_t)v450;
      v460 = vdupq_n_s32(v451);
      v461 = (v454 + 1) & 0x3FFFFFF0;
      v462 = vaddq_s32(v460, (int32x4_t)xmmword_196889AA0);
      v455 = v451 - 8 * v461;
      v463 = vaddq_s32(v460, (int32x4_t)xmmword_196889AB0);
      v456 = (uint8x16_t *)((char *)v442 + v461);
      v464 = vaddq_s32(v460, (int32x4_t)xmmword_196889AC0);
      v465 = vaddq_s32(v460, (int32x4_t)xmmword_196889AD0);
      v466 = v461;
      v467 = 0uLL;
      v468 = 0uLL;
      v469 = 0uLL;
      v470 = 0uLL;
      v471 = 0uLL;
      v472 = 0uLL;
      do
      {
        v473 = *v442++;
        v474 = vmovl_high_u8(v473);
        v475 = vmovl_high_u16(v474);
        v476.i64[0] = v475.u32[0];
        v476.i64[1] = v475.u32[1];
        v477 = v476;
        v478 = vmovl_u16(*(uint16x4_t *)v474.i8);
        v476.i64[0] = v478.u32[2];
        v476.i64[1] = v478.u32[3];
        v479 = v476;
        v480 = vmovl_u8(*(uint8x8_t *)v473.i8);
        v481 = vmovl_high_u16(v480);
        v476.i64[0] = v481.u32[2];
        v476.i64[1] = v481.u32[3];
        v482 = v476;
        v476.i64[0] = v475.u32[2];
        v476.i64[1] = v475.u32[3];
        v483 = v476;
        v476.i64[0] = v478.u32[0];
        v476.i64[1] = v478.u32[1];
        v484 = v476;
        v476.i64[0] = v481.u32[0];
        v476.i64[1] = v481.u32[1];
        v485 = v476;
        v486 = vmovl_u16(*(uint16x4_t *)v480.i8);
        v476.i64[0] = v486.u32[2];
        v476.i64[1] = v486.u32[3];
        v487 = v476;
        v476.i64[0] = v486.u32[0];
        v476.i64[1] = v486.u32[1];
        v488 = v476;
        v476.i64[0] = v462.u32[0];
        v476.i64[1] = v462.u32[1];
        v489 = v476;
        v476.i64[0] = v463.u32[2];
        v476.i64[1] = v463.u32[3];
        v490 = v476;
        v476.i64[0] = v464.u32[2];
        v476.i64[1] = v464.u32[3];
        v491 = v476;
        v476.i64[0] = v462.u32[2];
        v476.i64[1] = v462.u32[3];
        v492 = v476;
        v476.i64[0] = v463.u32[0];
        v476.i64[1] = v463.u32[1];
        v493 = v476;
        v476.i64[0] = v464.u32[0];
        v476.i64[1] = v464.u32[1];
        v494 = v476;
        v476.i64[0] = v465.u32[2];
        v476.i64[1] = v465.u32[3];
        v495 = v476;
        v476.i64[0] = v465.u32[0];
        v476.i64[1] = v465.u32[1];
        v471 = veorq_s8((int8x16_t)vshlq_u64(v477, v489), v471);
        v470 = veorq_s8((int8x16_t)vshlq_u64(v479, v490), v470);
        v468 = veorq_s8((int8x16_t)vshlq_u64(v482, v491), v468);
        v472 = veorq_s8((int8x16_t)vshlq_u64(v483, v492), v472);
        v469 = veorq_s8((int8x16_t)vshlq_u64(v484, v493), v469);
        v467 = veorq_s8((int8x16_t)vshlq_u64(v485, v494), v467);
        v458 = veorq_s8((int8x16_t)vshlq_u64(v487, v495), v458);
        v459 = veorq_s8((int8x16_t)vshlq_u64(v488, v476), v459);
        v465 = vaddq_s32(v465, v437);
        v464 = vaddq_s32(v464, v437);
        v463 = vaddq_s32(v463, v437);
        v462 = vaddq_s32(v462, v437);
        v466 -= 16;
      }
      while (v466);
      v496 = veorq_s8(veorq_s8(veorq_s8(v459, v469), veorq_s8(v467, v471)), veorq_s8(veorq_s8(v458, v470), veorq_s8(v468, v472)));
      v450 = (uint64_t)veor_s8(*(int8x8_t *)v496.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v496, v496, 8uLL));
      if (v457 == v461)
      {
        v440 = v451 - 8 * v461 + 8;
LABEL_369:
        v441 = 48 - v440;
        v442 = v456;
        goto LABEL_370;
      }
    }
    else
    {
      v455 = 40 - v441;
      v456 = *(uint8x16_t **)(v12 + 13824);
    }
    v497 = v455;
    do
    {
      v498 = v456->u8[0];
      v456 = (uint8x16_t *)((char *)v456 + 1);
      v450 ^= (unint64_t)v498 << v497;
      v499 = v497 - 8;
      if (v497 < 8)
        break;
      v497 -= 8;
    }
    while ((unint64_t)v456 < v452);
    v440 = v499 + 8;
    goto LABEL_369;
  }
  v234 = v1522;
LABEL_350:
  v425 = (1 << v430) + v429 + 1;
LABEL_351:
  if (v425)
  {
    if (dav1d_msac_decode_BOOL_equi_c((unsigned __int8 **)(v12 + 13824)))
      v431 = -v425;
    else
      v431 = v425;
    v420 = *(_DWORD **)(v1526 + 24);
    v432 = v431 << v420[303];
  }
  else
  {
    v432 = 0;
    v420 = *(_DWORD **)(v1526 + 24);
  }
  v18 = v1490;
  v105 = v1486;
  v419 = v1482;
  v433 = *(_DWORD *)(v12 + 14040) + v432;
  if (v433 >= 255)
    v433 = 255;
  if (v433 <= 1)
    v423 = 1;
  else
    v423 = v433;
  *(_DWORD *)(v12 + 14040) = v423;
  if (v420[304])
  {
    if (v420[306])
    {
      v434 = 4;
      if (!*(_DWORD *)(v1526 + 2056))
        v434 = 2;
    }
    else
    {
      v434 = 1;
    }
    v1497 = v434;
    v500 = 0;
    while (1)
    {
      v507 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 8 * (*(_DWORD *)(*(_QWORD *)(v1526 + 24) + 1224) + (int)v500) + 5304), 3uLL);
      v508.i64[0] = 0x7F0000007FLL;
      v508.i64[1] = 0x7F0000007FLL;
      if (v507 != 3)
        goto LABEL_514;
      v509 = *(unsigned int *)(v12 + 13848);
      v510 = *(_QWORD *)(v12 + 13840);
      v511 = (v509 >> 1) & 0x7FFFFF80 | 4;
      v512 = v511 << 48;
      v513 = v509 - 2 * v511;
      if (v510 >= v511 << 48)
        v514 = v511 << 48;
      else
        v514 = 0;
      if (v510 < v511 << 48)
        v513 = 0;
      v515 = v513 + v511;
      v516 = __clz(v515);
      v517 = v516 ^ 0x10;
      v518 = *(_DWORD *)(v12 + 13852);
      v519 = v518 - (v516 ^ 0x10);
      *(_DWORD *)(v12 + 13852) = v519;
      v520 = ((v510 - v514 + 1) << (v516 ^ 0x10)) - 1;
      *(_QWORD *)(v12 + 13840) = v520;
      v521 = v515 << v517;
      *(_DWORD *)(v12 + 13848) = v521;
      if ((v519 & 0x80000000) != 0)
        break;
LABEL_435:
      v573 = (v521 >> 1) & 0x7FFFFF80 | 4;
      v574 = v573 << 48;
      v575 = v521 - 2 * v573;
      if (v520 >= v573 << 48)
        v576 = v573 << 48;
      else
        v576 = 0;
      if (v520 < v573 << 48)
        v575 = 0;
      v577 = v575 + v573;
      v578 = __clz(v577);
      v579 = v578 ^ 0x10;
      v580 = v519 - (v578 ^ 0x10);
      *(_DWORD *)(v12 + 13852) = v580;
      v581 = ((v520 - v576 + 1) << (v578 ^ 0x10)) - 1;
      *(_QWORD *)(v12 + 13840) = v581;
      v582 = v577 << v579;
      *(_DWORD *)(v12 + 13848) = v577 << v579;
      if ((v580 & 0x80000000) != 0)
      {
        v583 = *(uint8x16_t **)(v12 + 13824);
        v584 = 40 - v580;
        if ((int)(40 - v580) >= 0)
        {
          v585 = *(_QWORD *)(v12 + 13832);
          if ((unint64_t)v583 < v585)
          {
            if (v584 >= 7)
              v586 = 7;
            else
              v586 = 40 - v580;
            v587 = (v579 - v519 - v586 + 47) >> 3;
            if (~(unint64_t)v583 + v585 < v587)
              v587 = ~(unint64_t)v583 + v585;
            if (v587 >= 0xF)
            {
              v590 = v587 + 1;
              v591 = 0uLL;
              v592 = (int8x16_t)v581;
              v593 = vdupq_n_s32(v584);
              v594 = (v587 + 1) & 0x3FFFFFF0;
              v595 = vaddq_s32(v593, (int32x4_t)xmmword_196889AA0);
              v588 = v584 - 8 * v594;
              v596 = vaddq_s32(v593, (int32x4_t)xmmword_196889AB0);
              v589 = (uint8x16_t *)((char *)v583 + v594);
              v597 = vaddq_s32(v593, (int32x4_t)xmmword_196889AC0);
              v598 = vaddq_s32(v593, (int32x4_t)xmmword_196889AD0);
              v599 = v594;
              v600 = 0uLL;
              v601 = 0uLL;
              v602 = 0uLL;
              v603 = 0uLL;
              v604 = 0uLL;
              v605 = 0uLL;
              do
              {
                v606 = *v583++;
                v607 = vmovl_high_u8(v606);
                v608 = vmovl_high_u16(v607);
                v609.i64[0] = v608.u32[0];
                v609.i64[1] = v608.u32[1];
                v610 = v609;
                v611 = vmovl_u16(*(uint16x4_t *)v607.i8);
                v609.i64[0] = v611.u32[2];
                v609.i64[1] = v611.u32[3];
                v612 = v609;
                v613 = vmovl_u8(*(uint8x8_t *)v606.i8);
                v614 = vmovl_high_u16(v613);
                v609.i64[0] = v614.u32[2];
                v609.i64[1] = v614.u32[3];
                v615 = v609;
                v609.i64[0] = v608.u32[2];
                v609.i64[1] = v608.u32[3];
                v616 = v609;
                v609.i64[0] = v611.u32[0];
                v609.i64[1] = v611.u32[1];
                v617 = v609;
                v609.i64[0] = v614.u32[0];
                v609.i64[1] = v614.u32[1];
                v618 = v609;
                v619 = vmovl_u16(*(uint16x4_t *)v613.i8);
                v609.i64[0] = v619.u32[2];
                v609.i64[1] = v619.u32[3];
                v620 = v609;
                v609.i64[0] = v619.u32[0];
                v609.i64[1] = v619.u32[1];
                v621 = v609;
                v609.i64[0] = v595.u32[0];
                v609.i64[1] = v595.u32[1];
                v622 = v609;
                v609.i64[0] = v596.u32[2];
                v609.i64[1] = v596.u32[3];
                v623 = v609;
                v609.i64[0] = v597.u32[2];
                v609.i64[1] = v597.u32[3];
                v624 = v609;
                v609.i64[0] = v595.u32[2];
                v609.i64[1] = v595.u32[3];
                v625 = v609;
                v609.i64[0] = v596.u32[0];
                v609.i64[1] = v596.u32[1];
                v626 = v609;
                v609.i64[0] = v597.u32[0];
                v609.i64[1] = v597.u32[1];
                v627 = v609;
                v609.i64[0] = v598.u32[2];
                v609.i64[1] = v598.u32[3];
                v628 = v609;
                v609.i64[0] = v598.u32[0];
                v609.i64[1] = v598.u32[1];
                v604 = veorq_s8((int8x16_t)vshlq_u64(v610, v622), v604);
                v603 = veorq_s8((int8x16_t)vshlq_u64(v612, v623), v603);
                v601 = veorq_s8((int8x16_t)vshlq_u64(v615, v624), v601);
                v605 = veorq_s8((int8x16_t)vshlq_u64(v616, v625), v605);
                v602 = veorq_s8((int8x16_t)vshlq_u64(v617, v626), v602);
                v600 = veorq_s8((int8x16_t)vshlq_u64(v618, v627), v600);
                v591 = veorq_s8((int8x16_t)vshlq_u64(v620, v628), v591);
                v592 = veorq_s8((int8x16_t)vshlq_u64(v621, v609), v592);
                v598 = vaddq_s32(v598, v508);
                v597 = vaddq_s32(v597, v508);
                v596 = vaddq_s32(v596, v508);
                v595 = vaddq_s32(v595, v508);
                v599 -= 16;
              }
              while (v599);
              v629 = veorq_s8(veorq_s8(veorq_s8(v592, v602), veorq_s8(v600, v604)), veorq_s8(veorq_s8(v591, v603), veorq_s8(v601, v605)));
              v581 = (unint64_t)veor_s8(*(int8x8_t *)v629.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v629, v629, 8uLL));
              if (v590 != v594)
                goto LABEL_454;
              v630 = v584 - 8 * v594 + 8;
            }
            else
            {
              v588 = 40 - v580;
              v589 = *(uint8x16_t **)(v12 + 13824);
LABEL_454:
              v631 = v588;
              do
              {
                v632 = v589->u8[0];
                v589 = (uint8x16_t *)((char *)v589 + 1);
                v581 ^= (unint64_t)v632 << v631;
                v633 = v631 - 8;
                if (v631 < 8)
                  break;
                v631 -= 8;
              }
              while ((unint64_t)v589 < v585);
              v630 = v633 + 8;
            }
            v580 = 48 - v630;
            v583 = v589;
          }
        }
        *v424 = v583;
      }
      v634 = v520 < v574;
      v635 = v510 < v512;
      v636 = (v582 >> 1) & 0x7FFFFF80 | 4;
      v637 = v636 << 48;
      v638 = v582 - 2 * v636;
      if (v581 >= v636 << 48)
        v639 = v636 << 48;
      else
        v639 = 0;
      if (v581 < v636 << 48)
        v638 = 0;
      v640 = v638 + v636;
      v641 = __clz(v640);
      v642 = v641 ^ 0x10;
      v643 = v580 - (v641 ^ 0x10);
      *(_DWORD *)(v12 + 13852) = v643;
      v644 = ((v581 - v639 + 1) << (v641 ^ 0x10)) - 1;
      *(_QWORD *)(v12 + 13840) = v644;
      v645 = v640 << v642;
      *(_DWORD *)(v12 + 13848) = v645;
      if ((v643 & 0x80000000) == 0)
        goto LABEL_485;
      v646 = *(uint8x16_t **)(v12 + 13824);
      v647 = 40 - v643;
      if ((int)(40 - v643) >= 0)
      {
        v648 = *(_QWORD *)(v12 + 13832);
        if ((unint64_t)v646 < v648)
        {
          if (v647 >= 7)
            v649 = 7;
          else
            v649 = 40 - v643;
          v650 = (v642 - v580 - v649 + 47) >> 3;
          if (~(unint64_t)v646 + v648 < v650)
            v650 = ~(unint64_t)v646 + v648;
          if (v650 >= 0xF)
          {
            v653 = v650 + 1;
            v654 = 0uLL;
            v655 = (int8x16_t)v644;
            v656 = vdupq_n_s32(v647);
            v657 = (v650 + 1) & 0x3FFFFFF0;
            v658 = vaddq_s32(v656, (int32x4_t)xmmword_196889AA0);
            v651 = v647 - 8 * v657;
            v659 = vaddq_s32(v656, (int32x4_t)xmmword_196889AB0);
            v652 = (uint8x16_t *)((char *)v646 + v657);
            v660 = vaddq_s32(v656, (int32x4_t)xmmword_196889AC0);
            v661 = vaddq_s32(v656, (int32x4_t)xmmword_196889AD0);
            v662 = v657;
            v663 = 0uLL;
            v664 = 0uLL;
            v665 = 0uLL;
            v666 = 0uLL;
            v667 = 0uLL;
            v668 = 0uLL;
            do
            {
              v669 = *v646++;
              v670 = vmovl_high_u8(v669);
              v671 = vmovl_high_u16(v670);
              v672.i64[0] = v671.u32[0];
              v672.i64[1] = v671.u32[1];
              v673 = v672;
              v674 = vmovl_u16(*(uint16x4_t *)v670.i8);
              v672.i64[0] = v674.u32[2];
              v672.i64[1] = v674.u32[3];
              v675 = v672;
              v676 = vmovl_u8(*(uint8x8_t *)v669.i8);
              v677 = vmovl_high_u16(v676);
              v672.i64[0] = v677.u32[2];
              v672.i64[1] = v677.u32[3];
              v678 = v672;
              v672.i64[0] = v671.u32[2];
              v672.i64[1] = v671.u32[3];
              v679 = v672;
              v672.i64[0] = v674.u32[0];
              v672.i64[1] = v674.u32[1];
              v680 = v672;
              v672.i64[0] = v677.u32[0];
              v672.i64[1] = v677.u32[1];
              v681 = v672;
              v682 = vmovl_u16(*(uint16x4_t *)v676.i8);
              v672.i64[0] = v682.u32[2];
              v672.i64[1] = v682.u32[3];
              v683 = v672;
              v672.i64[0] = v682.u32[0];
              v672.i64[1] = v682.u32[1];
              v684 = v672;
              v672.i64[0] = v658.u32[0];
              v672.i64[1] = v658.u32[1];
              v685 = v672;
              v672.i64[0] = v659.u32[2];
              v672.i64[1] = v659.u32[3];
              v686 = v672;
              v672.i64[0] = v660.u32[2];
              v672.i64[1] = v660.u32[3];
              v687 = v672;
              v672.i64[0] = v658.u32[2];
              v672.i64[1] = v658.u32[3];
              v688 = v672;
              v672.i64[0] = v659.u32[0];
              v672.i64[1] = v659.u32[1];
              v689 = v672;
              v672.i64[0] = v660.u32[0];
              v672.i64[1] = v660.u32[1];
              v690 = v672;
              v672.i64[0] = v661.u32[2];
              v672.i64[1] = v661.u32[3];
              v691 = v672;
              v672.i64[0] = v661.u32[0];
              v672.i64[1] = v661.u32[1];
              v667 = veorq_s8((int8x16_t)vshlq_u64(v673, v685), v667);
              v666 = veorq_s8((int8x16_t)vshlq_u64(v675, v686), v666);
              v664 = veorq_s8((int8x16_t)vshlq_u64(v678, v687), v664);
              v668 = veorq_s8((int8x16_t)vshlq_u64(v679, v688), v668);
              v665 = veorq_s8((int8x16_t)vshlq_u64(v680, v689), v665);
              v663 = veorq_s8((int8x16_t)vshlq_u64(v681, v690), v663);
              v654 = veorq_s8((int8x16_t)vshlq_u64(v683, v691), v654);
              v655 = veorq_s8((int8x16_t)vshlq_u64(v684, v672), v655);
              v661 = vaddq_s32(v661, v508);
              v660 = vaddq_s32(v660, v508);
              v659 = vaddq_s32(v659, v508);
              v658 = vaddq_s32(v658, v508);
              v662 -= 16;
            }
            while (v662);
            v692 = veorq_s8(veorq_s8(veorq_s8(v655, v665), veorq_s8(v663, v667)), veorq_s8(veorq_s8(v654, v666), veorq_s8(v664, v668)));
            v644 = (unint64_t)veor_s8(*(int8x8_t *)v692.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v692, v692, 8uLL));
            if (v653 != v657)
              goto LABEL_479;
            v693 = v647 - 8 * v657 + 8;
          }
          else
          {
            v651 = 40 - v643;
            v652 = *(uint8x16_t **)(v12 + 13824);
LABEL_479:
            v694 = v651;
            do
            {
              v695 = v652->u8[0];
              v652 = (uint8x16_t *)((char *)v652 + 1);
              v644 ^= (unint64_t)v695 << v694;
              v696 = v694 - 8;
              if (v694 < 8)
                break;
              v694 -= 8;
            }
            while ((unint64_t)v652 < v648);
            v693 = v696 + 8;
          }
          v643 = 48 - v693;
          v646 = v652;
        }
      }
      *v424 = v646;
LABEL_485:
      v697 = 0;
      v698 = (4 * v635) | (2 * v634) | (v581 < v637);
      v699 = v698 + 1;
      do
      {
        v703 = (v645 >> 1) & 0x7FFFFF80 | 4;
        v704 = v703 << 48;
        v705 = v645 - 2 * v703;
        if (v644 >= v703 << 48)
          v706 = v703 << 48;
        else
          v706 = 0;
        if (v644 < v703 << 48)
          v705 = 0;
        v707 = v705 + v703;
        v708 = __clz(v707);
        v709 = v708 ^ 0x10;
        v701 = v643 - (v708 ^ 0x10);
        *(_DWORD *)(v12 + 13852) = v701;
        v710 = ((v644 - v706 + 1) << (v708 ^ 0x10)) - 1;
        *(_QWORD *)(v12 + 13840) = v710;
        v645 = v707 << (v708 ^ 0x10);
        *(_DWORD *)(v12 + 13848) = v645;
        if ((v701 & 0x80000000) != 0)
        {
          v702 = *(uint8x16_t **)(v12 + 13824);
          v711 = 40 - v701;
          if ((int)(40 - v701) >= 0)
          {
            v712 = *(_QWORD *)(v12 + 13832);
            if ((unint64_t)v702 < v712)
            {
              if (v711 >= 7)
                v713 = 7;
              else
                v713 = 40 - v701;
              v714 = (v709 - v643 - v713 + 47) >> 3;
              if (~(unint64_t)v702 + v712 < v714)
                v714 = ~(unint64_t)v702 + v712;
              if (v714 >= 0xF)
              {
                v717 = v714 + 1;
                v718 = 0uLL;
                v719 = (int8x16_t)(unint64_t)v710;
                v720 = vdupq_n_s32(v711);
                v721 = (v714 + 1) & 0x3FFFFFF0;
                v722 = vaddq_s32(v720, (int32x4_t)xmmword_196889AA0);
                v715 = v711 - 8 * v721;
                v723 = vaddq_s32(v720, (int32x4_t)xmmword_196889AB0);
                v716 = (uint8x16_t *)((char *)v702 + v721);
                v724 = vaddq_s32(v720, (int32x4_t)xmmword_196889AC0);
                v725 = vaddq_s32(v720, (int32x4_t)xmmword_196889AD0);
                v726 = v721;
                v727 = 0uLL;
                v728 = 0uLL;
                v729 = 0uLL;
                v730 = 0uLL;
                v731 = 0uLL;
                v732 = 0uLL;
                do
                {
                  v733 = *v702++;
                  v734 = vmovl_high_u8(v733);
                  v735 = vmovl_high_u16(v734);
                  v736.i64[0] = v735.u32[0];
                  v736.i64[1] = v735.u32[1];
                  v737 = v736;
                  v738 = vmovl_u16(*(uint16x4_t *)v734.i8);
                  v736.i64[0] = v738.u32[2];
                  v736.i64[1] = v738.u32[3];
                  v739 = v736;
                  v740 = vmovl_u8(*(uint8x8_t *)v733.i8);
                  v741 = vmovl_high_u16(v740);
                  v736.i64[0] = v741.u32[2];
                  v736.i64[1] = v741.u32[3];
                  v742 = v736;
                  v736.i64[0] = v735.u32[2];
                  v736.i64[1] = v735.u32[3];
                  v743 = v736;
                  v736.i64[0] = v738.u32[0];
                  v736.i64[1] = v738.u32[1];
                  v744 = v736;
                  v736.i64[0] = v741.u32[0];
                  v736.i64[1] = v741.u32[1];
                  v745 = v736;
                  v746 = vmovl_u16(*(uint16x4_t *)v740.i8);
                  v736.i64[0] = v746.u32[2];
                  v736.i64[1] = v746.u32[3];
                  v747 = v736;
                  v736.i64[0] = v746.u32[0];
                  v736.i64[1] = v746.u32[1];
                  v748 = v736;
                  v736.i64[0] = v722.u32[0];
                  v736.i64[1] = v722.u32[1];
                  v749 = v736;
                  v736.i64[0] = v723.u32[2];
                  v736.i64[1] = v723.u32[3];
                  v750 = v736;
                  v736.i64[0] = v724.u32[2];
                  v736.i64[1] = v724.u32[3];
                  v751 = v736;
                  v736.i64[0] = v722.u32[2];
                  v736.i64[1] = v722.u32[3];
                  v752 = v736;
                  v736.i64[0] = v723.u32[0];
                  v736.i64[1] = v723.u32[1];
                  v753 = v736;
                  v736.i64[0] = v724.u32[0];
                  v736.i64[1] = v724.u32[1];
                  v754 = v736;
                  v736.i64[0] = v725.u32[2];
                  v736.i64[1] = v725.u32[3];
                  v755 = v736;
                  v736.i64[0] = v725.u32[0];
                  v736.i64[1] = v725.u32[1];
                  v731 = veorq_s8((int8x16_t)vshlq_u64(v737, v749), v731);
                  v730 = veorq_s8((int8x16_t)vshlq_u64(v739, v750), v730);
                  v728 = veorq_s8((int8x16_t)vshlq_u64(v742, v751), v728);
                  v732 = veorq_s8((int8x16_t)vshlq_u64(v743, v752), v732);
                  v729 = veorq_s8((int8x16_t)vshlq_u64(v744, v753), v729);
                  v727 = veorq_s8((int8x16_t)vshlq_u64(v745, v754), v727);
                  v718 = veorq_s8((int8x16_t)vshlq_u64(v747, v755), v718);
                  v719 = veorq_s8((int8x16_t)vshlq_u64(v748, v736), v719);
                  v725 = vaddq_s32(v725, v508);
                  v724 = vaddq_s32(v724, v508);
                  v723 = vaddq_s32(v723, v508);
                  v722 = vaddq_s32(v722, v508);
                  v726 -= 16;
                }
                while (v726);
                v756 = veorq_s8(veorq_s8(veorq_s8(v719, v729), veorq_s8(v727, v731)), veorq_s8(veorq_s8(v718, v730), veorq_s8(v728, v732)));
                v710 = (uint64_t)veor_s8(*(int8x8_t *)v756.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v756, v756, 8uLL));
                if (v717 != v721)
                  goto LABEL_509;
                v700 = v711 - 8 * v721 + 8;
              }
              else
              {
                v715 = 40 - v701;
                v716 = *(uint8x16_t **)(v12 + 13824);
LABEL_509:
                v757 = v715;
                do
                {
                  v758 = v716->u8[0];
                  v716 = (uint8x16_t *)((char *)v716 + 1);
                  v710 ^= (unint64_t)v758 << v757;
                  v759 = v757 - 8;
                  if (v757 < 8)
                    break;
                  v757 -= 8;
                }
                while ((unint64_t)v716 < v712);
                v700 = v759 + 8;
              }
              v701 = 48 - v700;
              v702 = v716;
            }
          }
          *(_QWORD *)(v12 + 13840) = v710;
          *(_DWORD *)(v12 + 13852) = v701;
          *(_QWORD *)(v12 + 13824) = v702;
        }
        v697 = (2 * v697) | (v644 < v704);
        v643 = v701;
        v644 = v710;
        --v699;
      }
      while (v699);
      v507 = v697 + (2 << v698) + 1;
LABEL_514:
      if (v507)
      {
        v760 = *(unsigned int *)(v12 + 13848);
        v761 = *(_QWORD *)(v12 + 13840);
        v762 = (v760 >> 1) & 0x7FFFFF80 | 4;
        v763 = v762 << 48;
        v764 = v760 - 2 * v762;
        if (v761 >= v762 << 48)
          v765 = v762 << 48;
        else
          v765 = 0;
        if (v761 < v762 << 48)
          v764 = 0;
        v766 = v764 + v762;
        v767 = __clz(v766) ^ 0x10;
        v768 = *(_DWORD *)(v12 + 13852);
        v502 = v768 - v767;
        *(_DWORD *)(v12 + 13852) = v768 - v767;
        v769 = ((v761 - v765 + 1) << v767) - 1;
        *(_QWORD *)(v12 + 13840) = v769;
        *(_DWORD *)(v12 + 13848) = v766 << v767;
        if (((v768 - v767) & 0x80000000) != 0)
        {
          v503 = *(uint8x16_t **)(v12 + 13824);
          v770 = 40 - v502;
          if ((int)(40 - v502) >= 0)
          {
            v771 = *(_QWORD *)(v12 + 13832);
            if ((unint64_t)v503 < v771)
            {
              if (v770 >= 7)
                v772 = 7;
              else
                v772 = 40 - v502;
              v773 = (v767 - v768 - v772 + 47) >> 3;
              if (~(unint64_t)v503 + v771 < v773)
                v773 = ~(unint64_t)v503 + v771;
              if (v773 >= 0xF)
              {
                v776 = v773 + 1;
                v777 = 0uLL;
                v778 = (int8x16_t)(unint64_t)v769;
                v779 = vdupq_n_s32(v770);
                v780 = (v773 + 1) & 0x3FFFFFF0;
                v781 = vaddq_s32(v779, (int32x4_t)xmmword_196889AA0);
                v774 = v770 - 8 * v780;
                v782 = vaddq_s32(v779, (int32x4_t)xmmword_196889AB0);
                v775 = (uint8x16_t *)((char *)v503 + v780);
                v783 = vaddq_s32(v779, (int32x4_t)xmmword_196889AC0);
                v784 = vaddq_s32(v779, (int32x4_t)xmmword_196889AD0);
                v785 = v780;
                v786 = 0uLL;
                v787 = 0uLL;
                v788 = 0uLL;
                v789 = 0uLL;
                v790 = 0uLL;
                v791 = 0uLL;
                do
                {
                  v792 = *v503++;
                  v793 = vmovl_high_u8(v792);
                  v794 = vmovl_high_u16(v793);
                  v795.i64[0] = v794.u32[0];
                  v795.i64[1] = v794.u32[1];
                  v796 = v795;
                  v797 = vmovl_u16(*(uint16x4_t *)v793.i8);
                  v795.i64[0] = v797.u32[2];
                  v795.i64[1] = v797.u32[3];
                  v798 = v795;
                  v799 = vmovl_u8(*(uint8x8_t *)v792.i8);
                  v800 = vmovl_high_u16(v799);
                  v795.i64[0] = v800.u32[2];
                  v795.i64[1] = v800.u32[3];
                  v801 = v795;
                  v795.i64[0] = v794.u32[2];
                  v795.i64[1] = v794.u32[3];
                  v802 = v795;
                  v795.i64[0] = v797.u32[0];
                  v795.i64[1] = v797.u32[1];
                  v803 = v795;
                  v795.i64[0] = v800.u32[0];
                  v795.i64[1] = v800.u32[1];
                  v804 = v795;
                  v805 = vmovl_u16(*(uint16x4_t *)v799.i8);
                  v795.i64[0] = v805.u32[2];
                  v795.i64[1] = v805.u32[3];
                  v806 = v795;
                  v795.i64[0] = v805.u32[0];
                  v795.i64[1] = v805.u32[1];
                  v807 = v795;
                  v795.i64[0] = v781.u32[0];
                  v795.i64[1] = v781.u32[1];
                  v808 = v795;
                  v795.i64[0] = v782.u32[2];
                  v795.i64[1] = v782.u32[3];
                  v809 = v795;
                  v795.i64[0] = v783.u32[2];
                  v795.i64[1] = v783.u32[3];
                  v810 = v795;
                  v795.i64[0] = v781.u32[2];
                  v795.i64[1] = v781.u32[3];
                  v811 = v795;
                  v795.i64[0] = v782.u32[0];
                  v795.i64[1] = v782.u32[1];
                  v812 = v795;
                  v795.i64[0] = v783.u32[0];
                  v795.i64[1] = v783.u32[1];
                  v813 = v795;
                  v795.i64[0] = v784.u32[2];
                  v795.i64[1] = v784.u32[3];
                  v814 = v795;
                  v795.i64[0] = v784.u32[0];
                  v795.i64[1] = v784.u32[1];
                  v790 = veorq_s8((int8x16_t)vshlq_u64(v796, v808), v790);
                  v789 = veorq_s8((int8x16_t)vshlq_u64(v798, v809), v789);
                  v787 = veorq_s8((int8x16_t)vshlq_u64(v801, v810), v787);
                  v791 = veorq_s8((int8x16_t)vshlq_u64(v802, v811), v791);
                  v788 = veorq_s8((int8x16_t)vshlq_u64(v803, v812), v788);
                  v786 = veorq_s8((int8x16_t)vshlq_u64(v804, v813), v786);
                  v777 = veorq_s8((int8x16_t)vshlq_u64(v806, v814), v777);
                  v778 = veorq_s8((int8x16_t)vshlq_u64(v807, v795), v778);
                  v784 = vaddq_s32(v784, v508);
                  v783 = vaddq_s32(v783, v508);
                  v782 = vaddq_s32(v782, v508);
                  v781 = vaddq_s32(v781, v508);
                  v785 -= 16;
                }
                while (v785);
                v815 = veorq_s8(veorq_s8(veorq_s8(v778, v788), veorq_s8(v786, v790)), veorq_s8(veorq_s8(v777, v789), veorq_s8(v787, v791)));
                v769 = (uint64_t)veor_s8(*(int8x8_t *)v815.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v815, v815, 8uLL));
                if (v776 != v780)
                  goto LABEL_535;
                v501 = v770 - 8 * v780 + 8;
              }
              else
              {
                v774 = 40 - v502;
                v775 = *(uint8x16_t **)(v12 + 13824);
LABEL_535:
                v816 = v774;
                do
                {
                  v817 = v775->u8[0];
                  v775 = (uint8x16_t *)((char *)v775 + 1);
                  v769 ^= (unint64_t)v817 << v816;
                  v818 = v816 - 8;
                  if (v816 < 8)
                    break;
                  v816 -= 8;
                }
                while ((unint64_t)v775 < v771);
                v501 = v818 + 8;
              }
              v502 = 48 - v501;
              v503 = v775;
            }
          }
          *(_QWORD *)(v12 + 13840) = v769;
          *(_DWORD *)(v12 + 13852) = v502;
          *(_QWORD *)(v12 + 13824) = v503;
        }
        if (v761 >= v763)
          v504 = v507;
        else
          v504 = -v507;
        v505 = v504 << *(_DWORD *)(*(_QWORD *)(v1526 + 24) + 1220);
      }
      else
      {
        v505 = 0;
      }
      v506 = v505 + *(char *)(v12 + v500 + 14044);
      if (v506 >= 63)
        v506 = 63;
      if (v506 <= -63)
        LOBYTE(v506) = -63;
      *(_BYTE *)(v12 + v500++ + 14044) = v506;
      if (v500 == v1497)
      {
        v423 = *(_DWORD *)(v12 + 14040);
        v420 = *(_DWORD **)(v1526 + 24);
        v18 = v1490;
        v234 = v1522;
        v105 = v1486;
        v419 = v1482;
        goto LABEL_540;
      }
    }
    v522 = *(uint8x16_t **)(v12 + 13824);
    v523 = 40 - v519;
    if ((int)(40 - v519) >= 0)
    {
      v524 = *(_QWORD *)(v12 + 13832);
      if ((unint64_t)v522 < v524)
      {
        if (v523 >= 7)
          v525 = 7;
        else
          v525 = 40 - v519;
        v526 = (v517 - v518 - v525 + 47) >> 3;
        if (~(unint64_t)v522 + v524 < v526)
          v526 = ~(unint64_t)v522 + v524;
        if (v526 >= 0xF)
        {
          v529 = v526 + 1;
          v530 = 0uLL;
          v531 = (int8x16_t)v520;
          v532 = vdupq_n_s32(v523);
          v533 = (v526 + 1) & 0x3FFFFFF0;
          v534 = vaddq_s32(v532, (int32x4_t)xmmword_196889AA0);
          v527 = v523 - 8 * v533;
          v535 = vaddq_s32(v532, (int32x4_t)xmmword_196889AB0);
          v528 = (uint8x16_t *)((char *)v522 + v533);
          v536 = vaddq_s32(v532, (int32x4_t)xmmword_196889AC0);
          v537 = vaddq_s32(v532, (int32x4_t)xmmword_196889AD0);
          v538 = v533;
          v539 = 0uLL;
          v540 = 0uLL;
          v541 = 0uLL;
          v542 = 0uLL;
          v543 = 0uLL;
          v544 = 0uLL;
          do
          {
            v545 = *v522++;
            v546 = vmovl_high_u8(v545);
            v547 = vmovl_high_u16(v546);
            v548.i64[0] = v547.u32[0];
            v548.i64[1] = v547.u32[1];
            v549 = v548;
            v550 = vmovl_u16(*(uint16x4_t *)v546.i8);
            v548.i64[0] = v550.u32[2];
            v548.i64[1] = v550.u32[3];
            v551 = v548;
            v552 = vmovl_u8(*(uint8x8_t *)v545.i8);
            v553 = vmovl_high_u16(v552);
            v548.i64[0] = v553.u32[2];
            v548.i64[1] = v553.u32[3];
            v554 = v548;
            v548.i64[0] = v547.u32[2];
            v548.i64[1] = v547.u32[3];
            v555 = v548;
            v548.i64[0] = v550.u32[0];
            v548.i64[1] = v550.u32[1];
            v556 = v548;
            v548.i64[0] = v553.u32[0];
            v548.i64[1] = v553.u32[1];
            v557 = v548;
            v558 = vmovl_u16(*(uint16x4_t *)v552.i8);
            v548.i64[0] = v558.u32[2];
            v548.i64[1] = v558.u32[3];
            v559 = v548;
            v548.i64[0] = v558.u32[0];
            v548.i64[1] = v558.u32[1];
            v560 = v548;
            v548.i64[0] = v534.u32[0];
            v548.i64[1] = v534.u32[1];
            v561 = v548;
            v548.i64[0] = v535.u32[2];
            v548.i64[1] = v535.u32[3];
            v562 = v548;
            v548.i64[0] = v536.u32[2];
            v548.i64[1] = v536.u32[3];
            v563 = v548;
            v548.i64[0] = v534.u32[2];
            v548.i64[1] = v534.u32[3];
            v564 = v548;
            v548.i64[0] = v535.u32[0];
            v548.i64[1] = v535.u32[1];
            v565 = v548;
            v548.i64[0] = v536.u32[0];
            v548.i64[1] = v536.u32[1];
            v566 = v548;
            v548.i64[0] = v537.u32[2];
            v548.i64[1] = v537.u32[3];
            v567 = v548;
            v548.i64[0] = v537.u32[0];
            v548.i64[1] = v537.u32[1];
            v543 = veorq_s8((int8x16_t)vshlq_u64(v549, v561), v543);
            v542 = veorq_s8((int8x16_t)vshlq_u64(v551, v562), v542);
            v540 = veorq_s8((int8x16_t)vshlq_u64(v554, v563), v540);
            v544 = veorq_s8((int8x16_t)vshlq_u64(v555, v564), v544);
            v541 = veorq_s8((int8x16_t)vshlq_u64(v556, v565), v541);
            v539 = veorq_s8((int8x16_t)vshlq_u64(v557, v566), v539);
            v530 = veorq_s8((int8x16_t)vshlq_u64(v559, v567), v530);
            v531 = veorq_s8((int8x16_t)vshlq_u64(v560, v548), v531);
            v537 = vaddq_s32(v537, v508);
            v536 = vaddq_s32(v536, v508);
            v535 = vaddq_s32(v535, v508);
            v534 = vaddq_s32(v534, v508);
            v538 -= 16;
          }
          while (v538);
          v568 = veorq_s8(veorq_s8(veorq_s8(v531, v541), veorq_s8(v539, v543)), veorq_s8(veorq_s8(v530, v542), veorq_s8(v540, v544)));
          v520 = (unint64_t)veor_s8(*(int8x8_t *)v568.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v568, v568, 8uLL));
          if (v529 != v533)
            goto LABEL_429;
          v569 = v523 - 8 * v533 + 8;
        }
        else
        {
          v527 = 40 - v519;
          v528 = *(uint8x16_t **)(v12 + 13824);
LABEL_429:
          v570 = v527;
          do
          {
            v571 = v528->u8[0];
            v528 = (uint8x16_t *)((char *)v528 + 1);
            v520 ^= (unint64_t)v571 << v570;
            v572 = v570 - 8;
            if (v570 < 8)
              break;
            v570 -= 8;
          }
          while ((unint64_t)v528 < v524);
          v569 = v572 + 8;
        }
        v519 = 48 - v569;
        v522 = v528;
      }
    }
    *v424 = v522;
    goto LABEL_435;
  }
LABEL_540:
  if (v423 == v420[206])
  {
    v819 = v1526 + 3312;
    goto LABEL_544;
  }
  if (v423 != v419)
  {
    v819 = v12 + 13936;
    v820 = v18;
    v821 = v105;
    init_quant_tables(*(_DWORD *)(*(_QWORD *)(v1526 + 8) + 32), v420, v423, v12 + 13936);
    v105 = v821;
    v18 = v820;
LABEL_544:
    *(_QWORD *)(v12 + 14032) = v819;
    v234 = v1522;
  }
  v1528[1] = 0;
  if (*(_DWORD *)v1484)
  {
    v177 = v1483;
    v235 = v1517;
    if (*(_DWORD *)v1484 != (_DWORD)v1531)
    {
      v822 = v12 + 14048;
      v823 = v18;
      v824 = v105;
      dav1d_calc_lf_values((_BYTE *)(v12 + 14048), *(_DWORD **)(v1526 + 24), v1484);
      v105 = v824;
      v18 = v823;
      v177 = v1483;
      v235 = v1517;
      goto LABEL_549;
    }
  }
  else
  {
    v822 = v1526 + 4468;
    v235 = v1517;
    v177 = v1483;
LABEL_549:
    *(_QWORD *)(v12 + 14560) = v822;
    v234 = v1522;
  }
LABEL_550:
  if (*v177)
  {
    *((_BYTE *)v15 + 3) = 0;
    v1505 = (char *)v15 + 3;
    v825 = *(_QWORD *)(v1526 + 24);
    goto LABEL_572;
  }
  v825 = *(_QWORD *)(v1526 + 24);
  v826 = *(_DWORD *)(v825 + 232);
  if ((v826 & 1) != 0)
  {
    if (v105)
    {
      v830 = v105[5];
      if ((v830 & 0x80000000) == 0)
        goto LABEL_571;
      v235 = v1517;
      if (v105[7])
      {
        *((_BYTE *)v15 + 3) = 0;
        v1505 = (char *)v15 + 3;
        goto LABEL_572;
      }
    }
    v1491 = v18;
    v831 = *(_QWORD *)(a1 + 656);
    v1487 = v105;
    v832 = v177;
    if (v235 <= v1511)
    {
      if (v13 <= v1509)
        v834 = 0;
      else
        v834 = 2 * *(unsigned __int8 *)(v831 + v1524 + 224);
    }
    else
    {
      v833 = *(unsigned __int8 *)(a1 + (v13 & 0x1F) + 256);
      if (v13 <= v1509)
      {
        v834 = 2 * v833;
      }
      else
      {
        v834 = *(unsigned __int8 *)(v831 + v1524 + 224) + v833;
        if (v834 == 2)
          v834 = 3;
      }
    }
    v830 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * v834 + 5620));
    v177 = v832;
    v18 = v1491;
    v105 = v1487;
LABEL_571:
    *((_BYTE *)v15 + 3) = v830 == 0;
    v1505 = (char *)v15 + 3;
    v825 = *(_QWORD *)(v1526 + 24);
    if (!v830)
    {
      v835 = v1521;
      v836 = v1524;
      v1492 = v18;
      if ((*(_DWORD *)(v825 + 232) & 1) != 0)
        goto LABEL_565;
      goto LABEL_610;
    }
LABEL_572:
    if ((*(_BYTE *)(v825 + 232) & 1) == 0)
    {
      v1528[0] = 0;
      v1527 = 0;
      dav1d_refmvs_find(a1 + 664, (int16x4_t *)&v1531, v1528, (int *)&v1527, 65280, a3, a5, *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 24));
      if ((_DWORD)v1531)
      {
        *((_DWORD *)v15 + 2) = v1531;
        v838 = v1521;
      }
      else
      {
        v838 = v1521;
        if (v1533)
        {
          *((_DWORD *)v15 + 2) = v1533;
        }
        else
        {
          v885 = *(_DWORD *)(*(_QWORD *)(v1526 + 8) + 1012);
          if ((signed int)((-16 << v885) + *v1520) >= *(_DWORD *)(v12 + 13872))
          {
            *((_DWORD *)v15 + 2) = (unsigned __int16)(-512 << v885);
          }
          else
          {
            *((_WORD *)v15 + 4) = 0;
            *((_WORD *)v15 + 5) = (-512 << *(_DWORD *)(*(_QWORD *)(v1526 + 8) + 1012)) - 2048;
          }
        }
      }
      read_mv_residual(a1, (_WORD *)v15 + 4, (int16x8_t *)(v12 + 13536), 0);
      v952 = 4 * *(_DWORD *)(v12 + 13864);
      v953 = 4 * *(_DWORD *)(v12 + 13872);
      if (v838)
      {
        if (v1507 != 3 && v21 < 2)
          v952 += 4;
        v955 = v1522;
        if (v1507 == 1 && v1522 < 2)
          v953 += 4;
      }
      else
      {
        v955 = v1522;
      }
      v957 = *v18;
      v958 = *((__int16 *)v15 + 5) >> 3;
      v959 = v958 + 4 * *v18;
      v960 = *((__int16 *)v15 + 4) >> 3;
      v961 = v960 + 4 * *v1520;
      v962 = v958 + 4 * (*v18 + v21);
      v963 = v960 + 4 * (*v1520 + v955);
      if (v952 <= v959)
      {
        v964 = 4 * ((v21 + *(_DWORD *)(v12 + 13868) - 1) & -(int)v21);
        if (v962 > v964)
        {
          v959 = v959 - v962 + v964;
          v962 = 4 * ((v21 + *(_DWORD *)(v12 + 13868) - 1) & -(int)v21);
        }
      }
      else
      {
        v962 += v952 - v959;
        v959 = v952;
      }
      v965 = v953 - v961;
      if (v953 <= v961)
        v965 = 0;
      v966 = v963 + v965;
      if (v961 <= v953)
        v961 = v953;
      v967 = *(_DWORD *)(*(_QWORD *)(v1526 + 8) + 1012);
      v968 = v967 + 4;
      v969 = v967 + 6;
      v970 = v957 >> (v967 + 4) << (v967 + 6);
      v971 = (int)*v1520 >> v968;
      v972 = v971 << v969;
      v973 = v966 - (v971 << v969);
      if (v966 > v971 << v969)
      {
        v974 = v962 - v970;
        if (v962 > v970)
        {
          if (v961 - v953 >= v973)
          {
            LOWORD(v961) = v961 - v973;
            v966 = v971 << v969;
            v976 = (v971 + 1) << v969;
            if (v972 >= v976)
              v981 = (v971 + 1) << v969;
            else
              v981 = v971 << v969;
            if (v981 > v972)
            {
LABEL_745:
              if (v962 > v970)
                return 0xFFFFFFFFLL;
            }
LABEL_746:
            v978 = v976 - v966;
            if (v976 >= v966)
              v978 = 0;
            *((_WORD *)v15 + 5) = 8 * v959 - 32 * v957;
            *((_WORD *)v15 + 4) = 8 * (v961 + v978) - 32 * *(_WORD *)(a1 + 28);
            read_vartx_tree(a1, (uint64_t)v15, a3, v1524, v1525);
            if (*(_DWORD *)(v1523 + 68) == 1)
            {
              (*(void (**)(uint64_t, uint64_t, _OWORD *))(v1526 + 3224))(a1, a3, v15);
              *((_BYTE *)v15 + 27) = 9;
            }
            else if ((*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(v1526 + 3160))(a1, a3, v15))
            {
              return 0xFFFFFFFFLL;
            }
            v979 = *(_QWORD *)(v1526 + 3120);
            *(_QWORD *)&v1530 = *((unsigned int *)v15 + 2);
            WORD4(v1530) = -256;
            WORD5(v1530) = a3;
            LODWORD(v234) = v1522;
            (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(v979 + 62800))(a1 + 8 * (*(_DWORD *)(a1 + 28) & 0x1FLL) + 712, &v1530, *(unsigned int *)(a1 + 24), v21, v1522);
            switch((int)v1522)
            {
              case 1:
                v980 = (_BYTE *)(a1 + v1525);
                v980[448] = v1498[3];
                v980[32] = 0;
                v980[8224] = 0;
                v980[624] = 0;
                v980[160] = v1506;
                v980[224] = 0;
                v980[256] = 0;
                v980[192] = *((_BYTE *)v15 + 6);
                break;
              case 2:
                v993 = (_WORD *)(a1 + v1525);
                v993[224] = v1498[3] | (v1498[3] << 8);
                v993[16] = 0;
                v993[312] = 0;
                v993[4112] = 0;
                v993[80] = 257 * v1506;
                v993[112] = 0;
                v993[128] = 0;
                v993[96] = *((unsigned __int8 *)v15 + 6) | (*((unsigned __int8 *)v15 + 6) << 8);
                break;
              case 4:
                v994 = 16843009 * v1498[3];
                *(_DWORD *)(a1 + v1525 + 32) = 0;
                v995 = (_DWORD *)(a1 + v1525 + 32);
                v995[104] = v994;
                v995[148] = 0;
                v995[2048] = 0;
                v995[32] = 16843009 * v1506;
                v995[48] = 0;
                v995[56] = 0;
                v995[40] = 16843009 * *((unsigned __int8 *)v15 + 6);
                break;
              case 8:
                v996 = 0x101010101010101 * v1498[3];
                *(_QWORD *)(a1 + v1525 + 32) = 0;
                v997 = (_QWORD *)(a1 + v1525 + 32);
                v997[52] = v996;
                v997[74] = 0;
                v997[1024] = 0;
                v997[16] = 0x101010101010101 * v1506;
                v997[24] = 0;
                v997[28] = 0;
                v997[20] = 0x101010101010101 * *((unsigned __int8 *)v15 + 6);
                break;
              case 16:
                v998 = vdupq_n_s64(0x101010101010101 * (unint64_t)v1498[3]);
                *(_OWORD *)(a1 + v1525 + 32) = 0u;
                v999 = a1 + v1525 + 32;
                *(int64x2_t *)(v999 + 416) = v998;
                *(_OWORD *)(v999 + 592) = 0u;
                *(_OWORD *)(v999 + 0x2000) = 0u;
                *(int64x2_t *)(v999 + 128) = vdupq_n_s64(0x101010101010101 * v1506);
                *(_OWORD *)(v999 + 192) = 0u;
                *(_OWORD *)(v999 + 224) = 0u;
                *(int64x2_t *)(v999 + 160) = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15
                                                                                                 + 6));
                break;
              case 32:
                v1000 = a1 + 32;
                v1001 = a1 + 448;
                v1002 = vdupq_n_s64(0x101010101010101 * (unint64_t)v1498[3]);
                *(int64x2_t *)(v1001 + v1525) = v1002;
                v1003 = (v13 & 0x1F) + 16;
                *(int64x2_t *)(v1001 + v1003) = v1002;
                *(_OWORD *)(v1000 + v1525) = 0u;
                *(_OWORD *)(v1000 + v1003) = 0u;
                v1004 = a1 + 624;
                *(_OWORD *)(v1004 + v1525) = 0u;
                *(_OWORD *)(v1004 + v1003) = 0u;
                v1005 = a1 + 8224;
                *(_OWORD *)(v1005 + v1525) = 0u;
                *(_OWORD *)(v1005 + v1003) = 0u;
                v1006 = a1 + 160;
                v1007 = vdupq_n_s64(0x101010101010101 * v1506);
                *(int64x2_t *)(v1006 + v1525) = v1007;
                *(int64x2_t *)(v1006 + v1003) = v1007;
                v1008 = a1 + 224;
                *(_OWORD *)(v1008 + v1525) = 0u;
                *(_OWORD *)(v1008 + v1003) = 0u;
                v1009 = a1 + 256;
                *(_OWORD *)(v1009 + v1525) = 0u;
                *(_OWORD *)(v1009 + v1003) = 0u;
                v1010 = a1 + 192;
                v1011 = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 6));
                *(int64x2_t *)(v1010 + v1525) = v1011;
                *(int64x2_t *)(v1010 + v1003) = v1011;
                break;
              default:
                break;
            }
            v922 = v1523;
            v878 = v1517;
            switch((int)v21)
            {
              case 1:
                *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v1498[2];
                *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524) = 0;
                *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0;
                *(_BYTE *)(a1 + v1524 + 0x2000) = 0;
                *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = v1506;
                *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0;
                *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
                *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = *((_BYTE *)v15 + 6);
                break;
              case 2:
                *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v1498[2] | (v1498[2] << 8);
                *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524) = 0;
                *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0;
                *(_WORD *)(a1 + v1524 + 0x2000) = 0;
                *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = 257 * v1506;
                *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0;
                *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
                *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = *((unsigned __int8 *)v15 + 6) | (*((unsigned __int8 *)v15 + 6) << 8);
                break;
              case 4:
                *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = 16843009 * v1498[2];
                *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524) = 0;
                *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0;
                *(_DWORD *)(a1 + v1524 + 0x2000) = 0;
                *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = 16843009 * v1506;
                *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0;
                *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
                *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = 16843009 * *((unsigned __int8 *)v15 + 6);
                break;
              case 8:
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = 0x101010101010101 * v1498[2];
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0;
                *(_QWORD *)(a1 + v1524 + 0x2000) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = 0x101010101010101 * v1506;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
                v1012 = 0x101010101010101 * *((unsigned __int8 *)v15 + 6);
                v1013 = *(_QWORD *)(a1 + 656) + v1524;
                goto LABEL_801;
              case 16:
                v1014 = 0x101010101010101 * v1498[2];
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v1014;
                v1015 = v1524 + 8;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1015 + 416) = v1014;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1015) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1015 + 592) = 0;
                v1016 = a1 + v1524;
                *(_QWORD *)(v1016 + 8200) = 0;
                *(_QWORD *)(v1016 + 0x2000) = 0;
                v1017 = 0x101010101010101 * v1506;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = v1017;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1015 + 128) = v1017;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1015 + 192) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1015 + 224) = 0;
                v1012 = 0x101010101010101 * *((unsigned __int8 *)v15 + 6);
                v1018 = *(_QWORD *)(a1 + 656) + v1524;
                goto LABEL_800;
              case 32:
                v1019 = 0x101010101010101 * v1498[2];
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v1019;
                v1020 = v1524 + 8;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1020 + 416) = v1019;
                v1021 = v1524 + 16;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1021 + 416) = v1019;
                v1015 = v1524 + 24;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1015 + 416) = v1019;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1020) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1021) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1015) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1020 + 592) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1021 + 592) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1015 + 592) = 0;
                v1022 = a1 + 0x2000;
                *(_OWORD *)(v1022 + v1524) = 0u;
                *(_OWORD *)(v1022 + v1021) = 0u;
                v1023 = 0x101010101010101 * v1506;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = v1023;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1020 + 128) = v1023;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1021 + 128) = v1023;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1015 + 128) = v1023;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1020 + 192) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1021 + 192) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1015 + 192) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1020 + 224) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1021 + 224) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1015 + 224) = 0;
                v1012 = 0x101010101010101 * *((unsigned __int8 *)v15 + 6);
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = v1012;
                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1020 + 160) = v1012;
                v1018 = *(_QWORD *)(a1 + 656) + v1021;
LABEL_800:
                *(_QWORD *)(v1018 + 160) = v1012;
                v1013 = *(_QWORD *)(a1 + 656) + v1015;
LABEL_801:
                *(_QWORD *)(v1013 + 160) = v1012;
                break;
              default:
                break;
            }
            if (v838)
            {
              switch(v1513)
              {
                case 1:
                  *(_BYTE *)(a1 + v1515 + 592) = 0;
                  break;
                case 2:
                  *(_WORD *)(a1 + v1515 + 592) = 0;
                  break;
                case 4:
                  *(_DWORD *)(a1 + v1515 + 592) = 0;
                  break;
                case 8:
                  *(_QWORD *)(a1 + v1515 + 592) = 0;
                  break;
                case 16:
                  v1156 = a1 + v1515;
                  *(_QWORD *)(v1156 + 600) = 0;
                  *(_QWORD *)(v1156 + 592) = 0;
                  break;
                case 32:
                  *(_OWORD *)(a1 + 592 + v1515) = 0u;
                  *(_OWORD *)(a1 + 592 + v1515 + 16) = 0u;
                  break;
                default:
                  break;
              }
              switch(v1514)
              {
                case 1:
                  goto LABEL_995;
                case 2:
                  goto LABEL_996;
                case 4:
                  goto LABEL_997;
                case 8:
                  goto LABEL_998;
                case 16:
                  goto LABEL_999;
                case 32:
                  goto LABEL_1000;
                default:
                  goto LABEL_1003;
              }
            }
            goto LABEL_1003;
          }
          if (v959 - v952 < v974)
          {
            v975 = 0;
          }
          else
          {
            v962 = v970;
            v975 = v974;
          }
          LOWORD(v959) = v959 - v975;
        }
      }
      v976 = (v971 + 1) << v969;
      if (v966 >= v976)
        v977 = (v971 + 1) << v969;
      else
        v977 = v966;
      if (v977 > v972)
        goto LABEL_745;
      goto LABEL_746;
    }
    if (*v177)
    {
      v839 = 1;
      goto LABEL_577;
    }
    v1493 = v18;
    if (v105 && (v105[5] != -1 || v105[7] || v105[6]))
    {
      v846 = (unsigned __int16 *)v15 + 4;
      *((_BYTE *)v15 + 20) = 0;
LABEL_588:
      v847 = v105[5];
      v848 = v847 - 1;
      v1501 = v846;
      if (v847 >= 1)
      {
        v849 = v105;
        goto LABEL_658;
      }
      if (v105[7] || v105[6])
      {
        v849 = v105;
        v848 = 0;
        goto LABEL_658;
      }
LABEL_983:
      v1501 = v846;
      v849 = v105;
      v1503 = a1 + 32;
      ref_ctx = av1_get_ref_ctx(*(_QWORD *)(a1 + 656), a1 + 32, v1525, v1524, SHIDWORD(v1496), v1496);
      v1500 = (unsigned __int8 **)(v12 + 13824);
      v1153 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * ref_ctx + 5760));
      v1154 = *(_QWORD *)(a1 + 656);
      if (v1153)
      {
        bwd_ref_ctx = av1_get_bwd_ref_ctx(v1154, v1503, v1525, v1524, SHIDWORD(v1496), v1496);
        if (dav1d_msac_decode_BOOL_adapt_c(v1500, (unsigned __int16 *)(v12 + 4 * bwd_ref_ctx + 5772)))
        {
          v848 = 6;
        }
        else
        {
          bwd_ref_1_ctx = av1_get_bwd_ref_1_ctx(*(_QWORD *)(a1 + 656), v1503, v1525, v1524, SHIDWORD(v1496), v1496);
          v848 = dav1d_msac_decode_BOOL_adapt_c(v1500, (unsigned __int16 *)(v12 + 4 * bwd_ref_1_ctx + 5820)) + 4;
        }
      }
      else
      {
        fwd_ref_ctx = av1_get_fwd_ref_ctx(v1154, v1503, v1525, v1524, SHIDWORD(v1496), v1496);
        v1264 = dav1d_msac_decode_BOOL_adapt_c(v1500, (unsigned __int16 *)(v12 + 4 * fwd_ref_ctx + 5784));
        v1265 = *(_QWORD *)(a1 + 656);
        if (v1264)
        {
          fwd_ref_2_ctx = av1_get_fwd_ref_2_ctx(v1265, v1503, v1525, v1524, SHIDWORD(v1496), v1496);
          v848 = dav1d_msac_decode_BOOL_adapt_c(v1500, (unsigned __int16 *)(v12 + 4 * fwd_ref_2_ctx + 5808)) + 2;
        }
        else
        {
          fwd_ref_1_ctx = av1_get_fwd_ref_1_ctx(v1265, v1503, v1525, v1524, SHIDWORD(v1496), v1496);
          v848 = dav1d_msac_decode_BOOL_adapt_c(v1500, (unsigned __int16 *)(v12 + 4 * fwd_ref_1_ctx + 5796));
        }
      }
LABEL_658:
      *((_BYTE *)v15 + 24) = v848;
      *((_BYTE *)v15 + 25) = -1;
      v1528[0] = 0;
      v1527 = 0;
      dav1d_refmvs_find(a1 + 664, (int16x4_t *)&v1531, v1528, (int *)&v1527, (v848 + 1) | 0xFF00, a3, a5, *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 24));
      if (v849 && (v849[6] || v849[7]))
        goto LABEL_680;
      v886 = v1527;
      if (!dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * (v1527 & 7) + 5552)))
      {
        *((_BYTE *)v15 + 21) = 3;
        *((_BYTE *)v15 + 23) = 0;
        v982 = v1528[0];
        if (v1528[0] < 2)
        {
          v985 = v1501;
          *(_DWORD *)v1501 = v1531;
          fix_mv_precision(*(_QWORD *)(v1526 + 24), v1501);
        }
        else
        {
          if (v1532 <= 639)
            v983 = 2 * (v1534 < 640);
          else
            v983 = v1534 < 640;
          v984 = *((_BYTE *)v15 + 23)
               + dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * v983 + 5608));
          *((_BYTE *)v15 + 23) = v984;
          v985 = v1501;
          if (v984 == 1 && v982 != 2)
          {
            if (v1534 <= 639)
              v986 = 2 * (v1535 < 640);
            else
              v986 = v1535 < 640;
            v984 = *((_BYTE *)v15 + 23)
                 + dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * v986 + 5608));
            *((_BYTE *)v15 + 23) = v984;
          }
          *(_DWORD *)v1501 = *((_DWORD *)&v1531 + 4 * v984);
        }
        read_mv_residual(a1, v985, (int16x8_t *)(v12 + 13248), *(_DWORD *)(*(_QWORD *)(v1526 + 24) + 296) == 0);
        goto LABEL_1199;
      }
      if (v849)
      {
        if (v849[6] || v849[7])
          goto LABEL_680;
        v886 = v1527;
      }
      if (dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * ((v886 >> 3) & 1) + 5576)))
      {
        if (dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * (v886 >> 4) + 5584)))
        {
          v887 = 1;
          *((_BYTE *)v15 + 21) = 1;
          *((_BYTE *)v15 + 23) = 1;
          v888 = v1528[0];
          if (v1528[0] >= 3)
          {
            if (v1534 <= 639)
              v889 = 2 * (v1535 < 640);
            else
              v889 = v1535 < 640;
            v890 = *((_BYTE *)v15 + 23)
                 + dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * v889 + 5608));
            *((_BYTE *)v15 + 23) = v890;
            if (v890 == 2 && v888 != 3)
            {
              if (v1535 <= 639)
                v891 = 2 * (v1536 < 640);
              else
                v891 = v1536 < 640;
              v890 = *((_BYTE *)v15 + 23)
                   + dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * v891 + 5608));
              *((_BYTE *)v15 + 23) = v890;
            }
            *(_DWORD *)v1501 = *((_DWORD *)&v1531 + 4 * v890);
            if (v890 > 1u)
              goto LABEL_1199;
            goto LABEL_1198;
          }
        }
        else
        {
          v887 = 0;
          *((_BYTE *)v15 + 21) = 0;
          *((_BYTE *)v15 + 23) = 0;
        }
        *(_DWORD *)v1501 = *((_DWORD *)&v1531 + 4 * v887);
LABEL_1198:
        fix_mv_precision(*(_QWORD *)(v1526 + 24), v1501);
LABEL_1199:
        v893 = 1;
        goto LABEL_1200;
      }
LABEL_680:
      *((_BYTE *)v15 + 21) = 2;
      v892 = *((char *)v15 + 24);
      *((_DWORD *)v15 + 2) = get_gmv_2d((int *)(*(_QWORD *)(v1526 + 24) + 36 * *((char *)v15 + 24) + 1424), *v1493, *v1520, v21, v1522, *(_QWORD *)(v1526 + 24));
      if ((int)v21 >= (int)v1522)
        v893 = v1522;
      else
        v893 = v21;
      if (!v893)
        v893 = *(_DWORD *)(*(_QWORD *)(v1526 + 24) + 36 * v892 + 1424) == 1;
LABEL_1200:
      v1504 = v893;
      if (*(_DWORD *)(*(_QWORD *)(v1526 + 8) + 1024)
        && ((1 << a3) & 0x33980) != 0
        && (v1294 = dav1d_ymode_size_context[a3],
            dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * v1294 + 5392))))
      {
        *((_BYTE *)v15 + 18) = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 8 * v1294 + 5344), 3uLL);
        v1295 = dav1d_wedge_ctx_lut[a3];
        v1296 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * v1295 + 5420));
        *((_BYTE *)v15 + 28) = v1296 + 1;
        if ((v1296 + 1) == 2)
          *((_BYTE *)v15 + 16) = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 32 * v1295 + 960), 0xFuLL);
      }
      else
      {
        *((_BYTE *)v15 + 28) = 0;
      }
      v1297 = *(_DWORD **)(v1526 + 24);
      if (v1297[127])
      {
        v1298 = (int)v21 >= (int)v1522 ? v1522 : v21;
        if (!*((_BYTE *)v15 + 28) && v1298 >= 2)
        {
          v1299 = v1297[74];
          if (v1299 || *((_BYTE *)v15 + 21) != 2 || v1297[9 * *((char *)v15 + 24) + 356] <= 1u)
          {
            if (v1517 > v1511 && v1508 >= 2)
            {
              if (!*(_BYTE *)(a1 + (v1525 + 1) + 256))
                goto LABEL_1229;
              v1300 = 0;
              v1301 = v1508 >> 1;
              v1302 = (unsigned __int8 *)((v13 & 0x1F) + a1 + 259);
              while (v1301 - 1 != v1300)
              {
                v1303 = *v1302;
                v1302 += 2;
                ++v1300;
                if (!v1303)
                {
                  if (v1300 < v1301)
                    goto LABEL_1229;
                  break;
                }
              }
            }
            if (v13 > v1509 && (int)v24 >= 2)
            {
              v1304 = *(_QWORD *)(a1 + 656);
              if (*(_BYTE *)(v1304 + (v1524 + 1) + 224))
              {
                v1305 = 0;
                v1306 = v24 >> 1;
                v1307 = (unsigned __int8 *)((v1517 & 0x1F) + v1304 + 227);
                while (v1306 - 1 != v1305)
                {
                  v1308 = *v1307;
                  v1307 += 2;
                  ++v1305;
                  if (!v1308)
                  {
                    if (v1305 >= v1306)
                      goto LABEL_1234;
                    goto LABEL_1229;
                  }
                }
                goto LABEL_1234;
              }
LABEL_1229:
              v1530 = 0uLL;
              find_matching_ref(a1, a5, v21, v1522, v24, v1508, v1496, SHIDWORD(v1496), *((char *)v15 + 24), &v1530);
              if (*(_DWORD *)(v1526 + 16 * *((char *)v15 + 24) + 2992) | v1299 || !v1297[354] || v1530 == 0)
              {
                v1309 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * a3 + 6048));
                *((_BYTE *)v15 + 22) = v1309;
                v18 = v1493;
                v1310 = (int *)v1501;
                if (v1309 != 2)
                {
LABEL_1235:
                  v839 = 0;
                  goto LABEL_1236;
                }
              }
              else
              {
                v1368 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 8 * a3 + 5120), 2uLL);
                *((_BYTE *)v15 + 22) = v1368;
                v18 = v1493;
                v1310 = (int *)v1501;
                if (v1368 != 2)
                  goto LABEL_1235;
              }
              derive_warpmv(a1, v21, v1522, v1530, *((unint64_t *)&v1530 + 1), *v1310, (int32x2_t *)v1523);
              if (*(_DWORD *)(v1523 + 68))
              {
                v1504 = 0;
                if (*(_DWORD *)v1523 == 3)
                {
                  *((_WORD *)v15 + 6) = *(_DWORD *)(v1523 + 12);
                  *((_WORD *)v15 + 7) = *(_DWORD *)(v1523 + 16);
                  *((_WORD *)v15 + 8) = *(_DWORD *)(v1523 + 20);
                  *((_WORD *)v15 + 9) = *(_DWORD *)(v1523 + 24);
                }
                else
                {
                  *((_WORD *)v15 + 6) = 0x8000;
                }
              }
              else
              {
                v1504 = 0;
              }
              goto LABEL_1235;
            }
          }
        }
      }
LABEL_1234:
      *((_BYTE *)v15 + 22) = 0;
      v18 = v1493;
      goto LABEL_1235;
    }
    v880 = *(_DWORD *)(v825 + 1396);
    if ((int)v21 >= (int)v234)
      v881 = v234;
    else
      v881 = v21;
    if (!v880 || v881 < 2)
      goto LABEL_982;
    v1488 = v105;
    v882 = v177;
    comp_ctx = get_comp_ctx(*(_QWORD *)(a1 + 656), a1 + 32, v1525, v1524, SHIDWORD(v1496), v1496);
    v884 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * comp_ctx + 5636));
    if (*v882)
    {
      v825 = *(_QWORD *)(v1526 + 24);
      v839 = v884;
LABEL_577:
      v840 = *(_BYTE *)(v825 + 1408);
      *((_BYTE *)v15 + 24) = v840;
      v841 = *(_BYTE *)(*(_QWORD *)(v1526 + 24) + 1412);
      *((_BYTE *)v15 + 25) = v841;
      *((_WORD *)v15 + 10) = 2;
      *((_BYTE *)v15 + 23) = 0;
      LODWORD(v1530) = 0;
      v1528[0] = 0;
      dav1d_refmvs_find(a1 + 664, (int16x4_t *)&v1531, (int *)&v1530, v1528, (v840 + 1) | ((v841 + 1) << 8), a3, a5, *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 24));
      v842 = v1531;
      v843 = HIDWORD(v1531);
      *((_DWORD *)v15 + 2) = v1531;
      *((_DWORD *)v15 + 3) = v843;
      v844 = *(_DWORD **)(v1526 + 24);
      if (v844[74])
      {
        *((_WORD *)v15 + 5) = (HIWORD(v842) + (v842 >> 31) + 3) & 0xFFF8;
        *((_WORD *)v15 + 4) = (v842 + ((unsigned __int16)(v842 & 0x8000) >> 15) + 3) & 0xFFF8;
        v844 = *(_DWORD **)(v1526 + 24);
        if (v844[74])
        {
LABEL_579:
          *((_WORD *)v15 + 7) = (HIWORD(v843) + (v843 >> 31) + 3) & 0xFFF8;
          v845 = (v843 + ((unsigned __int16)(v843 & 0x8000) >> 15) + 3) & 0xFFFFFFF8;
LABEL_580:
          *((_WORD *)v15 + 6) = v845;
          v844 = *(_DWORD **)(v1526 + 24);
          goto LABEL_593;
        }
      }
      else
      {
        if (v844[125])
          goto LABEL_593;
        *((_WORD *)v15 + 5) = ((v842 >> 31) + HIWORD(v842)) & 0xFFFE;
        *((_WORD *)v15 + 4) = (v842 + ((unsigned __int16)(v842 & 0x8000) >> 15)) & 0xFFFE;
        v844 = *(_DWORD **)(v1526 + 24);
        if (v844[74])
          goto LABEL_579;
      }
      if (!v844[125])
      {
        *((_WORD *)v15 + 7) = ((v843 >> 31) + HIWORD(v843)) & 0xFFFE;
        v845 = (v843 + ((unsigned __int16)(v843 & 0x8000) >> 15)) & 0xFFFFFFFE;
        goto LABEL_580;
      }
LABEL_593:
      if (v844[126] == 4)
        v850 = 0;
      else
        v850 = v844[126];
      goto LABEL_596;
    }
    v1502 = a1 + 32;
    v1499 = (unsigned __int8 **)(v12 + 13824);
    v105 = v1488;
    if (!v884)
    {
LABEL_982:
      v846 = (unsigned __int16 *)v15 + 4;
      *((_BYTE *)v15 + 20) = 0;
      if (!v105)
        goto LABEL_983;
      goto LABEL_588;
    }
    v1142 = *(_QWORD *)(a1 + 656);
    if (v1517 <= v1511 || v13 <= v1509)
    {
      v1144 = (unsigned __int8 **)(v12 + 13824);
      v1145 = a1 + 32;
      if (v1496)
      {
        if (v1517 <= v1511)
          v1323 = *(_QWORD *)(a1 + 656);
        else
          v1323 = a1 + 32;
        if (v1517 <= v1511)
          v1324 = v1524;
        else
          v1324 = v13 & 0x1F;
        v839 = v884;
        if (*(_BYTE *)(v1323 + v1324 + 224) || !*(_BYTE *)(v1323 + v1324 + 256))
          goto LABEL_1264;
        v216 = *(char *)(v1323 + v1324 + 288) > 3 == *(char *)(v1323 + v1324 + 320) < 4;
        v1325 = 4;
        if (v216)
          v1325 = 0;
        goto LABEL_1385;
      }
    }
    else
    {
      v1143 = *(unsigned __int8 *)(v1142 + v1524 + 224);
      v1144 = (unsigned __int8 **)(v12 + 13824);
      v1145 = a1 + 32;
      if (!*(_BYTE *)(v1142 + v1524 + 224) || !*(_BYTE *)(a1 + v1525 + 256))
      {
        v839 = v884;
        if (v1143 | *(unsigned __int8 *)(a1 + v1525 + 256))
        {
          v1146 = v1143 == 0;
          if (*(_BYTE *)(v1142 + v1524 + 224))
            v1147 = a1 + 32;
          else
            v1147 = *(_QWORD *)(a1 + 656);
          if (v1146)
            v1148 = v1524;
          else
            v1148 = v1525;
          v1149 = (_BYTE *)(v1147 + v1148);
          if (v1149[256])
          {
            v1150 = (char)v1149[288] > 3;
            v1151 = (char)v1149[320] < 4;
            goto LABEL_1382;
          }
LABEL_1264:
          v1325 = 2;
          goto LABEL_1385;
        }
        v1430 = *(char *)(v1142 + v1524 + 288);
        v1431 = *(char *)(a1 + v1525 + 320);
        if (!(*(unsigned __int8 *)(v1142 + v1524 + 256) | *(unsigned __int8 *)(a1 + v1525 + 288)))
        {
          v1150 = v1430 < 4;
          v1151 = v1431 > 3;
LABEL_1382:
          v216 = v1150 == v1151;
          v1325 = 3;
          if (v216)
            v1325 = 1;
          goto LABEL_1385;
        }
        if (*(_BYTE *)(v1142 + v1524 + 256) && *(_BYTE *)(a1 + v1525 + 288))
        {
          v1432 = (v1430 > 3) ^ (*(char *)(v1142 + v1524 + 320) < 4);
          v1433 = (v1431 > 3) ^ (*(char *)(a1 + v1525 + 352) < 4);
          if ((v1432 & 1) != 0 || v1433)
          {
            if ((v1432 & v1433) == 1)
            {
              v216 = (v1430 != 4) == (v1431 == 4);
              v1325 = 3;
              if (!v216)
                v1325 = 4;
            }
            else
            {
              v1325 = 2;
            }
            v839 = v884;
            v1144 = (unsigned __int8 **)(v12 + 13824);
            v1145 = a1 + 32;
          }
          else
          {
            v1325 = 0;
          }
        }
        else
        {
          if (*(_BYTE *)(v1142 + v1524 + 256))
          {
            v1480 = v1524;
          }
          else
          {
            v1142 = a1 + 32;
            v1480 = v1525;
          }
          v1481 = (*(char *)(v1142 + v1480 + 288) > 3) ^ (*(char *)(v1142 + v1480 + 320) < 4);
          v216 = v1430 < 4 == v1431 > 3;
          v1325 = 3;
          if (!v216)
            v1325 = 4;
          if (!v1481)
            v1325 = 1;
        }
LABEL_1385:
        v1434 = dav1d_msac_decode_BOOL_adapt_c(v1144, (unsigned __int16 *)(v12 + 4 * v1325 + 5656));
        v1435 = *(_QWORD *)(a1 + 656);
        if (v1434)
        {
          v1436 = av1_get_fwd_ref_ctx(v1435, v1145, v1525, v1524, SHIDWORD(v1496), v1496);
          v1437 = dav1d_msac_decode_BOOL_adapt_c(v1144, (unsigned __int16 *)(v12 + 4 * v1436 + 5832));
          v1438 = *(_QWORD *)(a1 + 656);
          if (v1437)
          {
            v1439 = av1_get_fwd_ref_2_ctx(v1438, v1502, v1525, v1524, SHIDWORD(v1496), v1496);
            v1440 = dav1d_msac_decode_BOOL_adapt_c(v1144, (unsigned __int16 *)(v12 + 4 * v1439 + 5856)) + 2;
          }
          else
          {
            v1443 = av1_get_fwd_ref_1_ctx(v1438, v1502, v1525, v1524, SHIDWORD(v1496), v1496);
            v1440 = dav1d_msac_decode_BOOL_adapt_c(v1144, (unsigned __int16 *)(v12 + 4 * v1443 + 5844));
          }
          *((_BYTE *)v15 + 24) = v1440;
          v1444 = av1_get_bwd_ref_ctx(*(_QWORD *)(a1 + 656), v1502, v1525, v1524, SHIDWORD(v1496), v1496);
          if (dav1d_msac_decode_BOOL_adapt_c(v1144, (unsigned __int16 *)(v12 + 4 * v1444 + 5868)))
          {
            v1442 = 6;
          }
          else
          {
            v1445 = av1_get_bwd_ref_1_ctx(*(_QWORD *)(a1 + 656), v1502, v1525, v1524, SHIDWORD(v1496), v1496);
            v1442 = dav1d_msac_decode_BOOL_adapt_c(v1144, (unsigned __int16 *)(v12 + 4 * v1445 + 5880)) + 4;
          }
        }
        else
        {
          v1441 = av1_get_ref_ctx(v1435, v1145, v1525, v1524, SHIDWORD(v1496), v1496);
          if (dav1d_msac_decode_BOOL_adapt_c(v1144, (unsigned __int16 *)(v12 + 4 * v1441 + 5892)))
          {
            *((_WORD *)v15 + 12) = 1540;
            v1442 = 6;
            goto LABEL_1397;
          }
          uni_p1_ctx = av1_get_uni_p1_ctx(*(_QWORD *)(a1 + 656), v1502, v1525, v1524, SHIDWORD(v1496), v1496);
          *((_BYTE *)v15 + 24) = 0;
          v1442 = dav1d_msac_decode_BOOL_adapt_c(v1144, (unsigned __int16 *)(v12 + 4 * uni_p1_ctx + 5904)) + 1;
          *((_BYTE *)v15 + 25) = v1442;
          if (v1442 != 2)
          {
LABEL_1397:
            LODWORD(v1530) = 0;
            v1528[0] = 0;
            dav1d_refmvs_find(a1 + 664, (int16x4_t *)&v1531, (int *)&v1530, v1528, (*((_BYTE *)v15 + 24) + 1) | ((v1442 + 1) << 8), a3, a5, *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 24));
            v1448 = dav1d_msac_decode_symbol_adapt_c(v1144, (int16x8_t *)(v12 + 16 * v1528[0] + 3376), 7uLL);
            *((_BYTE *)v15 + 21) = v1448;
            v1449 = (char *)&dav1d_comp_inter_pred_modes + 2 * v1448;
            *((_BYTE *)v15 + 23) = 0;
            v1450 = v18;
            if (v1448 == 7)
            {
              v1451 = v1530;
              if ((int)v1530 >= 2)
              {
                if (v1532 <= 639)
                  v1452 = 2 * (v1534 < 640);
                else
                  v1452 = v1534 < 640;
                v1453 = *((_BYTE *)v15 + 23)
                      + dav1d_msac_decode_BOOL_adapt_c(v1499, (unsigned __int16 *)(v12 + 4 * v1452 + 5608));
                *((_BYTE *)v15 + 23) = v1453;
                if (v1453 == 1 && v1451 != 2)
                {
                  v1454 = &v1534;
                  v1455 = 2;
LABEL_1414:
                  v1458 = *((_DWORD *)&v1531 + 4 * v1455 + 2) < 640;
                  if (*v1454 <= 639)
                    v1459 = 2 * v1458;
                  else
                    v1459 = v1458;
                  v1453 = *((_BYTE *)v15 + 23)
                        + dav1d_msac_decode_BOOL_adapt_c(v1499, (unsigned __int16 *)(v12 + 4 * v1459 + 5608));
                  *((_BYTE *)v15 + 23) = v1453;
                  goto LABEL_1419;
                }
                goto LABEL_1419;
              }
            }
            else if (*v1449 == 1 || v1449[1] == 1)
            {
              v1453 = 1;
              *((_BYTE *)v15 + 23) = 1;
              v1456 = v1530;
              if ((int)v1530 >= 3)
              {
                v1457 = v1534 <= 639 ? 2 * (v1535 < 640) : v1535 < 640;
                v1453 = *((_BYTE *)v15 + 23)
                      + dav1d_msac_decode_BOOL_adapt_c(v1499, (unsigned __int16 *)(v12 + 4 * v1457 + 5608));
                *((_BYTE *)v15 + 23) = v1453;
                if (v1453 == 2 && v1456 != 3)
                {
                  v1454 = &v1535;
                  v1455 = 3;
                  goto LABEL_1414;
                }
              }
LABEL_1419:
              v1460 = (unsigned __int16 *)v15 + 4;
              v1461 = *((unsigned __int8 *)v15 + 21);
              v1504 = v1461 != 6;
              v1462 = *v1449;
              if (v1462 < 2)
              {
                *(_DWORD *)v1460 = *((_DWORD *)&v1531 + 4 * v1453);
                fix_mv_precision(*(_QWORD *)(v1526 + 24), v1460);
                v18 = v1450;
              }
              else
              {
                v18 = v1450;
                if (v1462 != 2)
                {
                  v1463 = (unsigned __int8 **)(v12 + 13824);
                  if (v1462 == 3)
                  {
                    *(_DWORD *)v1460 = *((_DWORD *)&v1531 + 4 * v1453);
                    read_mv_residual(a1, v1460, (int16x8_t *)(v12 + 13248), *(_DWORD *)(*(_QWORD *)(v1526 + 24) + 296) == 0);
                  }
LABEL_1432:
                  v1468 = v1449[1];
                  if (v1468 < 2)
                  {
                    *((_DWORD *)v15 + 3) = *((_DWORD *)&v1531 + 4 * *((unsigned __int8 *)v15 + 23) + 1);
                    fix_mv_precision(*(_QWORD *)(v1526 + 24), (unsigned __int16 *)v15 + 6);
                  }
                  else if (v1468 == 2)
                  {
                    v1469 = *(_QWORD *)(v1526 + 24);
                    v1470 = (int *)(v1469 + 36 * *((char *)v15 + 25) + 1424);
                    v1471 = v1504;
                    if (*v1470 == 1)
                      v1471 = 1;
                    v1504 = v1471;
                    *((_DWORD *)v15 + 3) = get_gmv_2d(v1470, *v18, *v1520, v21, v1522, v1469);
                  }
                  else if (v1468 == 3)
                  {
                    *((_DWORD *)v15 + 3) = *((_DWORD *)&v1531 + 4 * *((unsigned __int8 *)v15 + 23) + 1);
                    read_mv_residual(a1, (_WORD *)v15 + 6, (int16x8_t *)(v12 + 13248), *(_DWORD *)(*(_QWORD *)(v1526 + 24) + 296) == 0);
                  }
                  v1472 = *(_DWORD **)(v1526 + 8);
                  if (v1472[257])
                  {
                    v1473 = *(_QWORD *)(a1 + 656) + v1524;
                    if (*(unsigned __int8 *)(v1473 + 256) <= 2u)
                    {
                      if (*(_BYTE *)(v1473 + 288) == 6)
                        v1474 = 3;
                      else
                        v1474 = 0;
                    }
                    else
                    {
                      v1474 = 1;
                    }
                    if (*(unsigned __int8 *)(a1 + v1525 + 288) <= 2u)
                    {
                      if (*(_BYTE *)(a1 + v1525 + 320) == 6)
                        v1475 = 3;
                      else
                        v1475 = 0;
                    }
                    else
                    {
                      v1475 = 1;
                    }
                    v1476 = v1475 + v1474;
                    if (v1476 >= 5)
                      v1476 = 5;
                    if (dav1d_msac_decode_BOOL_adapt_c(v1463, (unsigned __int16 *)(v12 + 4 * v1476 + 5700)))
                    {
                      if (((1 << a3) & 0x3BB80) != 0)
                      {
                        v1477 = dav1d_wedge_ctx_lut[a3];
                        v1478 = dav1d_msac_decode_BOOL_adapt_c(v1463, (unsigned __int16 *)(v12 + 4 * v1477 + 5724));
                        *((_BYTE *)v15 + 20) = 4 - v1478;
                        if (!v1478)
                          *((_BYTE *)v15 + 16) = dav1d_msac_decode_symbol_adapt_c(v1463, (int16x8_t *)(v12 + 32 * v1477 + 960), 0xFuLL);
                      }
                      else
                      {
                        *((_BYTE *)v15 + 20) = 3;
                      }
                      *((_BYTE *)v15 + 17) = dav1d_msac_decode_BOOL_equi_c(v1463);
LABEL_1236:
                      v850 = *(_DWORD *)(*(_QWORD *)(v1526 + 24) + 504);
                      if (v850 == 4)
                      {
                        if (v1504)
                        {
                          v1311 = *((unsigned __int8 *)v15 + 20);
                          v1519 = *((_BYTE *)v15 + 20) != 0;
                          v1312 = *((unsigned __int8 *)v15 + 24);
                          v1313 = (unsigned __int8 *)(*(_QWORD *)(a1 + 656) + v1524);
                          if (v1313[288] == v1312 || v1313[320] == v1312)
                            v1314 = v1313[352];
                          else
                            v1314 = 3;
                          v1315 = a1 + v1525;
                          if (*(unsigned __int8 *)(a1 + v1525 + 320) == v1312
                            || *(unsigned __int8 *)(v1315 + 352) == v1312)
                          {
                            v1316 = *(unsigned __int8 *)(v1315 + 384);
                          }
                          else
                          {
                            v1316 = 3;
                          }
                          v1317 = 4 * (v1311 != 0);
                          v1318 = v1317 | 3;
                          v1319 = v1314 + v1317;
                          if (v1316 != 3)
                            v1319 = v1318;
                          if (v1314 == 3)
                            v1319 = v1316 + 4 * (v1311 != 0);
                          v1320 = v1314 + 4 * (v1311 != 0);
                          if (v1314 != v1316)
                            v1320 = v1319;
                          v1321 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 8 * v1320 + 4896), 2uLL);
                          v851 = v1321;
                          if (*(_DWORD *)(*(_QWORD *)(v1526 + 8) + 1036))
                          {
                            filter_ctx = get_filter_ctx(*(_QWORD *)(a1 + 656), a1 + 32, v1519, *((char *)v15 + 24), v1525, v1524);
                            v850 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 8 * filter_ctx + 4960), 2uLL);
                          }
                          else
                          {
                            v850 = v1321;
                          }
                        }
                        else
                        {
                          v850 = 0;
                          v851 = 0;
                        }
                        goto LABEL_597;
                      }
LABEL_596:
                      v851 = v850;
LABEL_597:
                      *((_BYTE *)v15 + 27) = dav1d_filter_2d[4 * v850 + v851];
                      read_vartx_tree(a1, (uint64_t)v15, a3, v1524, v1525);
                      if (*(_DWORD *)(v1523 + 68) == 1)
                      {
                        (*(void (**)(uint64_t, uint64_t, _OWORD *))(v1526 + 3224))(a1, a3, v15);
                      }
                      else if ((*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(v1526 + 3160))(a1, a3, v15))
                      {
                        return 0xFFFFFFFFLL;
                      }
                      v852 = *(_QWORD *)(v1526 + 24);
                      if (*(_DWORD *)(v852 + 1232) || *(_DWORD *)(v852 + 1236))
                      {
                        if (v839)
                          v853 = 6;
                        else
                          v853 = 2;
                        v216 = *((unsigned __int8 *)v15 + 21) == v853;
                        v854 = *((unsigned __int8 *)v15 + 4);
                        v855 = *(_QWORD *)(v12 + 14560) + (v854 << 6) + 2 * *((char *)v15 + 24);
                        if (!v216)
                          LODWORD(v855) = v855 + 1;
                        LOWORD(v1531) = *((unsigned __int8 *)v15 + 29);
                        WORD1(v1531) = *((_WORD *)v15 + 15);
                        if (*(_DWORD *)(v852 + 4 * v854 + 1144))
                          v856 = 0;
                        else
                          v856 = *((unsigned __int8 *)v15 + 26);
                        v862 = *(_QWORD *)(a1 + 656);
                        __dst = (unsigned __int8 *)(v862 + v1524 + 480);
                        v864 = (uint64_t *)(v862 + v1516 + 512);
                        if (!v1521)
                          v864 = 0;
                        v865 = (unsigned __int8 *)(a1 + 32 + v1515 + 512);
                        if (!v1521)
                          v865 = 0;
                        dav1d_create_lf_mask_inter(*(_QWORD *)(v1523 + 40), *(_QWORD *)(v1526 + 4256), *(_QWORD *)(v1526 + 3264), v855 + 2, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(v1526 + 3272), *(_DWORD *)(v1526 + 3276), *((unsigned __int8 *)v15 + 6), a3, v856, (uint64_t)&v1531, *((unsigned __int8 *)v15 + 7), *(_DWORD *)(v1526 + 2056), __dst, (unsigned __int8 *)(a1 + 32 + v1525 + 480), v864, v865);
                      }
                      v866 = *(_QWORD *)(v1526 + 3120);
                      if (v839)
                      {
                        v867 = *(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(v866 + 62800);
                        v868 = *((unsigned __int8 *)v15 + 21);
                        v1531 = *((_QWORD *)v15 + 1);
                        LOBYTE(v1532) = *((_BYTE *)v15 + 24) + 1;
                        BYTE1(v1532) = *((_BYTE *)v15 + 25) + 1;
                        BYTE2(v1532) = a3;
                        HIBYTE(v1532) = (0x178u >> v868) & 2 | (v868 == 6);
                        v869 = *(unsigned int *)(a1 + 24);
                        v870 = a1 + 8 * (*(_DWORD *)(a1 + 28) & 0x1FLL) + 712;
                        v871 = v21;
                        v872 = v1522;
                      }
                      else
                      {
                        v873 = *((unsigned __int8 *)v15 + 21);
                        v1531 = *((unsigned int *)v15 + 2);
                        LOBYTE(v1532) = *((_BYTE *)v15 + 24) + 1;
                        if (*((_BYTE *)v15 + 28))
                          v874 = 0;
                        else
                          v874 = -1;
                        BYTE1(v1532) = v874;
                        BYTE2(v1532) = a3;
                        v872 = v1522;
                        if ((int)v21 >= (int)v1522)
                          v875 = v1522;
                        else
                          v875 = v21;
                        v877 = v875 > 1 && v873 == 2;
                        v867 = *(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(v866 + 62800);
                        HIBYTE(v1532) = v877 | (2 * (v873 == 3));
                        v869 = *(unsigned int *)(a1 + 24);
                        v870 = a1 + 8 * (*(_DWORD *)(a1 + 28) & 0x1FLL) + 712;
                        v871 = v21;
                      }
                      v867(v870, &v1531, v869, v871, v872);
                      v878 = v1517;
                      switch((int)v872)
                      {
                        case 1:
                          v879 = (_BYTE *)(a1 + v1525);
                          v879[160] = v1506;
                          v879[224] = *((_BYTE *)v15 + 5);
                          v879[256] = 0;
                          v879[192] = *((_BYTE *)v15 + 6);
                          v879[624] = 0;
                          v879[8224] = 0;
                          v879[448] = v1498[3];
                          v879[288] = *((_BYTE *)v15 + 20);
                          v879[384] = v851;
                          v879[416] = v850;
                          v879[32] = *((_BYTE *)v15 + 21);
                          v879[320] = *((_BYTE *)v15 + 24);
                          v879[352] = *((_BYTE *)v15 + 25);
                          break;
                        case 2:
                          v894 = (_WORD *)(a1 + v1525);
                          v894[80] = 257 * v1506;
                          v894[112] = *((unsigned __int8 *)v15 + 5) | (*((unsigned __int8 *)v15 + 5) << 8);
                          v894[128] = 0;
                          v894[96] = *((unsigned __int8 *)v15 + 6) | (*((unsigned __int8 *)v15 + 6) << 8);
                          v894[312] = 0;
                          v894[4112] = 0;
                          v894[224] = v1498[3] | (v1498[3] << 8);
                          v894[144] = *((unsigned __int8 *)v15 + 20) | (*((unsigned __int8 *)v15 + 20) << 8);
                          v894[192] = 257 * v851;
                          v894[208] = 257 * v850;
                          v894[16] = *((unsigned __int8 *)v15 + 21) | (*((unsigned __int8 *)v15 + 21) << 8);
                          v894[160] = 257 * *((char *)v15 + 24);
                          v894[176] = *((unsigned __int8 *)v15 + 25) | (*((unsigned __int8 *)v15 + 25) << 8);
                          break;
                        case 4:
                          v895 = (_DWORD *)(a1 + v1525);
                          v895[40] = 16843009 * v1506;
                          v895[56] = 16843009 * *((unsigned __int8 *)v15 + 5);
                          v895[64] = 0;
                          v895[48] = 16843009 * *((unsigned __int8 *)v15 + 6);
                          v895[156] = 0;
                          v895[2056] = 0;
                          v895[112] = 16843009 * v1498[3];
                          v895[72] = 16843009 * *((unsigned __int8 *)v15 + 20);
                          v895[96] = 16843009 * v851;
                          v895[104] = 16843009 * v850;
                          v895[8] = 16843009 * *((unsigned __int8 *)v15 + 21);
                          v895[80] = 16843009 * *((char *)v15 + 24);
                          v895[88] = 16843009 * *((unsigned __int8 *)v15 + 25);
                          break;
                        case 8:
                          v896 = (_QWORD *)(a1 + v1525);
                          v896[20] = 0x101010101010101 * v1506;
                          v896[28] = 0x101010101010101 * *((unsigned __int8 *)v15 + 5);
                          v896[32] = 0;
                          v896[24] = 0x101010101010101 * *((unsigned __int8 *)v15 + 6);
                          v896[78] = 0;
                          v896[1028] = 0;
                          v896[56] = 0x101010101010101 * v1498[3];
                          v896[36] = 0x101010101010101 * *((unsigned __int8 *)v15 + 20);
                          v896[48] = 0x101010101010101 * v851;
                          v896[52] = 0x101010101010101 * v850;
                          v896[4] = 0x101010101010101 * *((unsigned __int8 *)v15 + 21);
                          v896[40] = 0x101010101010101 * *((char *)v15 + 24);
                          v896[44] = 0x101010101010101 * *((unsigned __int8 *)v15 + 25);
                          break;
                        case 16:
                          v897 = a1 + v1525;
                          *(int64x2_t *)(v897 + 160) = vdupq_n_s64(0x101010101010101 * v1506);
                          *(int64x2_t *)(v897 + 224) = vdupq_n_s64(0x101010101010101* (unint64_t)*((unsigned __int8 *)v15 + 5));
                          *(_OWORD *)(v897 + 256) = 0u;
                          *(int64x2_t *)(v897 + 192) = vdupq_n_s64(0x101010101010101* (unint64_t)*((unsigned __int8 *)v15 + 6));
                          *(_OWORD *)(v897 + 624) = 0u;
                          *(_OWORD *)(v897 + 8224) = 0u;
                          *(int64x2_t *)(v897 + 448) = vdupq_n_s64(0x101010101010101 * (unint64_t)v1498[3]);
                          *(int64x2_t *)(v897 + 288) = vdupq_n_s64(0x101010101010101* (unint64_t)*((unsigned __int8 *)v15 + 20));
                          *(int64x2_t *)(v897 + 384) = vdupq_n_s64(0x101010101010101 * (unint64_t)v851);
                          *(int64x2_t *)(v897 + 416) = vdupq_n_s64(0x101010101010101 * (unint64_t)v850);
                          *(int64x2_t *)(v897 + 32) = vdupq_n_s64(0x101010101010101* (unint64_t)*((unsigned __int8 *)v15 + 21));
                          *(int64x2_t *)(v897 + 320) = vdupq_n_s64(0x101010101010101 * *((char *)v15 + 24));
                          *(int64x2_t *)(v897 + 352) = vdupq_n_s64(0x101010101010101* (unint64_t)*((unsigned __int8 *)v15 + 25));
                          break;
                        case 32:
                          v898 = a1 + 160;
                          v899 = vdupq_n_s64(0x101010101010101 * v1506);
                          *(int64x2_t *)(v898 + v1525) = v899;
                          v900 = v1525 + 16;
                          *(int64x2_t *)(v898 + v900) = v899;
                          v901 = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 5));
                          v902 = a1 + 224;
                          *(int64x2_t *)(v902 + v1525) = v901;
                          *(int64x2_t *)(v902 + v900) = v901;
                          v903 = a1 + 256;
                          *(_OWORD *)(v903 + v1525) = 0u;
                          *(_OWORD *)(v903 + v900) = 0u;
                          v904 = a1 + 192;
                          v905 = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 6));
                          *(int64x2_t *)(v904 + v1525) = v905;
                          *(int64x2_t *)(v904 + v900) = v905;
                          v906 = a1 + 624;
                          *(_OWORD *)(v906 + v1525) = 0u;
                          *(_OWORD *)(v906 + v900) = 0u;
                          v907 = a1 + 8224;
                          *(_OWORD *)(v907 + v1525) = 0u;
                          v908 = v1525 + 8;
                          *(_OWORD *)(v907 + v900) = 0u;
                          v909 = 0x101010101010101 * v1498[3];
                          v910 = a1 + 448;
                          *(_QWORD *)(v910 + v1525) = v909;
                          *(_QWORD *)(v910 + v908) = v909;
                          *(_QWORD *)(v910 + v900) = v909;
                          v911 = v1525 + 24;
                          *(_QWORD *)(v910 + v911) = v909;
                          v912 = a1 + 288;
                          v913 = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 20));
                          *(int64x2_t *)(v912 + v1525) = v913;
                          *(int64x2_t *)(v912 + v900) = v913;
                          v914 = a1 + 384;
                          *(_QWORD *)(v914 + v1525) = 0x101010101010101 * v851;
                          *(_QWORD *)(v914 + v908) = 0x101010101010101 * v851;
                          *(_QWORD *)(v914 + v900) = 0x101010101010101 * v851;
                          *(_QWORD *)(v914 + v911) = 0x101010101010101 * v851;
                          v915 = a1 + 416;
                          *(_QWORD *)(v915 + v1525) = 0x101010101010101 * v850;
                          *(_QWORD *)(v915 + v908) = 0x101010101010101 * v850;
                          *(_QWORD *)(v915 + v900) = 0x101010101010101 * v850;
                          *(_QWORD *)(v915 + v911) = 0x101010101010101 * v850;
                          v916 = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 21));
                          v917 = a1 + 32;
                          *(int64x2_t *)(v917 + v1525) = v916;
                          *(int64x2_t *)(v917 + v900) = v916;
                          v918 = a1 + 320;
                          v919 = vdupq_n_s64(0x101010101010101 * *((char *)v15 + 24));
                          *(int64x2_t *)(v918 + v1525) = v919;
                          *(int64x2_t *)(v918 + v900) = v919;
                          v920 = a1 + 352;
                          v921 = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 25));
                          *(int64x2_t *)(v920 + v1525) = v921;
                          *(int64x2_t *)(v920 + v900) = v921;
                          break;
                        default:
                          break;
                      }
                      v922 = v1523;
                      switch((int)v21)
                      {
                        case 1:
                          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = v1506;
                          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = *((_BYTE *)v15 + 5);
                          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
                          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = *((_BYTE *)v15 + 6);
                          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0;
                          *(_BYTE *)(a1 + v1524 + 0x2000) = 0;
                          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v1498[2];
                          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 256) = *((_BYTE *)v15 + 20);
                          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = v851;
                          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = v850;
                          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524) = *((_BYTE *)v15 + 21);
                          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 288) = *((_BYTE *)v15 + 24);
                          *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 320) = *((_BYTE *)v15 + 25);
                          v838 = v1521;
                          if (v1521)
                            goto LABEL_697;
                          goto LABEL_703;
                        case 2:
                          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = 257 * v1506;
                          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = *((unsigned __int8 *)v15 + 5) | (*((unsigned __int8 *)v15 + 5) << 8);
                          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
                          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = *((unsigned __int8 *)v15 + 6) | (*((unsigned __int8 *)v15 + 6) << 8);
                          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0;
                          *(_WORD *)(a1 + v1524 + 0x2000) = 0;
                          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v1498[2] | (v1498[2] << 8);
                          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 256) = *((unsigned __int8 *)v15 + 20) | (*((unsigned __int8 *)v15 + 20) << 8);
                          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 257 * v851;
                          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 257 * v850;
                          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524) = *((unsigned __int8 *)v15 + 21) | (*((unsigned __int8 *)v15 + 21) << 8);
                          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 288) = 257 * *((char *)v15 + 24);
                          *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 320) = *((unsigned __int8 *)v15 + 25) | (*((unsigned __int8 *)v15 + 25) << 8);
                          v838 = v1521;
                          if (!v1521)
                            goto LABEL_703;
                          goto LABEL_697;
                        case 4:
                          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = 16843009 * v1506;
                          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 16843009 * *((unsigned __int8 *)v15 + 5);
                          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
                          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = 16843009 * *((unsigned __int8 *)v15 + 6);
                          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0;
                          *(_DWORD *)(a1 + v1524 + 0x2000) = 0;
                          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = 16843009 * v1498[2];
                          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 256) = 16843009 * *((unsigned __int8 *)v15 + 20);
                          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 16843009 * v851;
                          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 16843009 * v850;
                          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524) = 16843009 * *((unsigned __int8 *)v15 + 21);
                          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 288) = 16843009 * *((char *)v15 + 24);
                          *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 320) = 16843009 * *((unsigned __int8 *)v15 + 25);
                          goto LABEL_696;
                        case 8:
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = 0x101010101010101 * v1506;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0x101010101010101
                                                                           * *((unsigned __int8 *)v15 + 5);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = 0x101010101010101
                                                                           * *((unsigned __int8 *)v15 + 6);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0;
                          *(_QWORD *)(a1 + v1524 + 0x2000) = 0;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = 0x101010101010101 * v1498[2];
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 256) = 0x101010101010101
                                                                           * *((unsigned __int8 *)v15 + 20);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 0x101010101010101 * v851;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 0x101010101010101 * v850;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524) = 0x101010101010101
                                                                     * *((unsigned __int8 *)v15 + 21);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 288) = 0x101010101010101 * *((char *)v15 + 24);
                          v923 = 0x101010101010101 * *((unsigned __int8 *)v15 + 25);
                          v924 = *(_QWORD *)(a1 + 656) + v1524;
                          goto LABEL_702;
                        case 16:
                          v925 = 0x101010101010101 * v1506;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = v925;
                          v926 = v1524 + 8;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v926 + 128) = v925;
                          v927 = 0x101010101010101 * *((unsigned __int8 *)v15 + 5);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = v927;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v926 + 192) = v927;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v926 + 224) = 0;
                          v928 = 0x101010101010101 * *((unsigned __int8 *)v15 + 6);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = v928;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v926 + 160) = v928;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v926 + 592) = 0;
                          v929 = a1 + v1524;
                          *(_QWORD *)(v929 + 8200) = 0;
                          *(_QWORD *)(v929 + 0x2000) = 0;
                          v930 = 0x101010101010101 * v1498[2];
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v930;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v926 + 416) = v930;
                          v931 = 0x101010101010101 * *((unsigned __int8 *)v15 + 20);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 256) = v931;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v926 + 256) = v931;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 0x101010101010101 * v851;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v926 + 352) = 0x101010101010101 * v851;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 0x101010101010101 * v850;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v926 + 384) = 0x101010101010101 * v850;
                          v932 = 0x101010101010101 * *((unsigned __int8 *)v15 + 21);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524) = v932;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v926) = v932;
                          v933 = 0x101010101010101 * *((char *)v15 + 24);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 288) = v933;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v926 + 288) = v933;
                          v923 = 0x101010101010101 * *((unsigned __int8 *)v15 + 25);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 320) = v923;
                          v924 = *(_QWORD *)(a1 + 656) + v926;
                          goto LABEL_702;
                        case 32:
                          v934 = 0x101010101010101 * v1506;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = v934;
                          v935 = v1524 + 8;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v935 + 128) = v934;
                          v936 = v1524 + 16;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v936 + 128) = v934;
                          v937 = v1524 + 24;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v937 + 128) = v934;
                          v938 = 0x101010101010101 * *((unsigned __int8 *)v15 + 5);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = v938;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v935 + 192) = v938;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v936 + 192) = v938;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v937 + 192) = v938;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v935 + 224) = 0;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v936 + 224) = 0;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v937 + 224) = 0;
                          v939 = 0x101010101010101 * *((unsigned __int8 *)v15 + 6);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = v939;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v935 + 160) = v939;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v936 + 160) = v939;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v937 + 160) = v939;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v935 + 592) = 0;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v936 + 592) = 0;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v937 + 592) = 0;
                          v940 = a1 + 0x2000;
                          *(_OWORD *)(v940 + v1524) = 0u;
                          *(_OWORD *)(v940 + v936) = 0u;
                          v941 = 0x101010101010101 * v1498[2];
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v941;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v935 + 416) = v941;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v936 + 416) = v941;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v937 + 416) = v941;
                          v942 = 0x101010101010101 * *((unsigned __int8 *)v15 + 20);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 256) = v942;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v935 + 256) = v942;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v936 + 256) = v942;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v937 + 256) = v942;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 0x101010101010101 * v851;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v935 + 352) = 0x101010101010101 * v851;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v936 + 352) = 0x101010101010101 * v851;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v937 + 352) = 0x101010101010101 * v851;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 0x101010101010101 * v850;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v935 + 384) = 0x101010101010101 * v850;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v936 + 384) = 0x101010101010101 * v850;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v937 + 384) = 0x101010101010101 * v850;
                          v943 = 0x101010101010101 * *((unsigned __int8 *)v15 + 21);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524) = v943;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v935) = v943;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v936) = v943;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v937) = v943;
                          v944 = 0x101010101010101 * *((char *)v15 + 24);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 288) = v944;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v935 + 288) = v944;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v936 + 288) = v944;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v937 + 288) = v944;
                          v923 = 0x101010101010101 * *((unsigned __int8 *)v15 + 25);
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 320) = v923;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v935 + 320) = v923;
                          *(_QWORD *)(*(_QWORD *)(a1 + 656) + v936 + 320) = v923;
                          v924 = *(_QWORD *)(a1 + 656) + v937;
LABEL_702:
                          *(_QWORD *)(v924 + 320) = v923;
                          v838 = v1521;
                          if (!v1521)
                            goto LABEL_703;
                          goto LABEL_697;
                        default:
LABEL_696:
                          v838 = v1521;
                          if (v1521)
                          {
LABEL_697:
                            LODWORD(v234) = v1522;
                            switch(v1513)
                            {
                              case 1:
                                *(_BYTE *)(a1 + v1515 + 592) = 0;
                                break;
                              case 2:
                                *(_WORD *)(a1 + v1515 + 592) = 0;
                                break;
                              case 4:
                                *(_DWORD *)(a1 + v1515 + 592) = 0;
                                break;
                              case 8:
                                *(_QWORD *)(a1 + v1515 + 592) = 0;
                                break;
                              case 16:
                                v992 = a1 + v1515;
                                *(_QWORD *)(v992 + 600) = 0;
                                *(_QWORD *)(v992 + 592) = 0;
                                break;
                              case 32:
                                *(_OWORD *)(a1 + 592 + v1515) = 0u;
                                *(_OWORD *)(a1 + 592 + v1515 + 16) = 0u;
                                break;
                              default:
                                break;
                            }
                            switch(v1514)
                            {
                              case 1:
LABEL_995:
                                *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 0;
                                goto LABEL_1003;
                              case 2:
LABEL_996:
                                *(_WORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 0;
                                goto LABEL_1003;
                              case 4:
LABEL_997:
                                *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 0;
                                goto LABEL_1003;
                              case 8:
LABEL_998:
                                v1157 = *(_QWORD *)(a1 + 656) + v1516;
                                goto LABEL_1002;
                              case 16:
LABEL_999:
                                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 0;
                                v1158 = *(_QWORD *)(a1 + 656);
                                v1159 = v1516 + 8;
                                goto LABEL_1001;
                              case 32:
LABEL_1000:
                                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 0;
                                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 8 + 560) = 0;
                                *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 16 + 560) = 0;
                                v1158 = *(_QWORD *)(a1 + 656);
                                v1159 = v1516 + 24;
LABEL_1001:
                                v1157 = v1158 + v1159;
LABEL_1002:
                                *(_QWORD *)(v1157 + 560) = 0;
                                break;
                              default:
                                goto LABEL_1003;
                            }
                          }
                          else
                          {
LABEL_703:
                            LODWORD(v234) = v1522;
                          }
                          break;
                      }
                      goto LABEL_1003;
                    }
                    v1472 = *(_DWORD **)(v1526 + 8);
                  }
                  if (v1472[261])
                  {
                    jnt_comp_ctx = get_jnt_comp_ctx(v1472[265], *(_DWORD *)(*(_QWORD *)(v1526 + 2000) + 248), *(_DWORD *)(*(_QWORD *)(v1526 + 32 + 280 * *((char *)v15 + 24) + 8) + 248), *(_DWORD *)(*(_QWORD *)(v1526 + 32 + 280 * *((char *)v15 + 25) + 8) + 248), *(_QWORD *)(a1 + 656), v1502, v1525, v1524);
                    *((_BYTE *)v15 + 20) = dav1d_msac_decode_BOOL_adapt_c(v1463, (unsigned __int16 *)(v12 + 4 * jnt_comp_ctx + 5676))+ 1;
                  }
                  else
                  {
                    *((_BYTE *)v15 + 20) = 2;
                  }
                  goto LABEL_1236;
                }
                v1464 = *(_QWORD *)(v1526 + 24);
                v1465 = (int *)(v1464 + 36 * *((char *)v15 + 24) + 1424);
                v1467 = v1461 != 6 || *v1465 == 1;
                v1504 = v1467;
                *((_DWORD *)v15 + 2) = get_gmv_2d(v1465, *v1450, *v1520, v21, v1522, v1464);
              }
              v1463 = (unsigned __int8 **)(v12 + 13824);
              goto LABEL_1432;
            }
            v1453 = 0;
            goto LABEL_1419;
          }
          v1447 = av1_get_fwd_ref_2_ctx(*(_QWORD *)(a1 + 656), v1502, v1525, v1524, SHIDWORD(v1496), v1496);
          v1442 = *((_BYTE *)v15 + 25)
                + dav1d_msac_decode_BOOL_adapt_c(v1144, (unsigned __int16 *)(v12 + 4 * v1447 + 5916));
        }
        *((_BYTE *)v15 + 25) = v1442;
        goto LABEL_1397;
      }
    }
    v1325 = 2;
    v839 = v884;
    goto LABEL_1385;
  }
  if (*(_DWORD *)(v825 + 464))
  {
    v827 = v18;
    v828 = v177;
    v829 = v105;
    v830 = dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 6228));
    v105 = v829;
    v177 = v828;
    v18 = v827;
    v234 = v1522;
    goto LABEL_571;
  }
  *((_BYTE *)v15 + 3) = 1;
  v1505 = (char *)v15 + 3;
  v835 = v1521;
  v836 = v1524;
  v1492 = v18;
  if ((v826 & 1) == 0)
  {
LABEL_610:
    v837 = (int16x8_t *)(v12
                       + 160 * dav1d_intra_mode_context[*(unsigned __int8 *)(*(_QWORD *)(a1 + 656) + v836)]
                       + 32 * dav1d_intra_mode_context[*(unsigned __int8 *)(a1 + v1525 + 32)]
                       + 6240);
    goto LABEL_611;
  }
LABEL_565:
  v837 = (int16x8_t *)(v12 + 32 * dav1d_ymode_size_context[a3]);
LABEL_611:
  v857 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), v837, 0xCuLL);
  *((_BYTE *)v15 + 8) = v857;
  v1510 = v1498[3];
  v1512 = v1498[2];
  v858 = v1510 + v1512;
  if ((v1510 + v1512) < 2 || (v859 = v857 - 1, v859 > 7))
  {
    *((_BYTE *)v15 + 13) = 0;
    if (v835)
      goto LABEL_616;
  }
  else
  {
    *((_BYTE *)v15 + 13) = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 16 * v859 + 3232), 6uLL)- 3;
    if (!v835)
      goto LABEL_807;
LABEL_616:
    if (*(_DWORD *)(*(_QWORD *)(v1526 + 24) + 4 * *((unsigned __int8 *)v15 + 4) + 1144))
      v861 = v1514 == 1 && v1513 == 1;
    else
      v861 = (0x3FFB80u >> a3) & 1;
    v945 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 416 * v861 + 32 * *((unsigned __int8 *)v15 + 8) + 128), v861 | 0xC);
    *((_BYTE *)v15 + 9) = v945;
    *((_BYTE *)v15 + 14) = 0;
    if (v945 == 13)
    {
      v946 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 3216), 7uLL);
      v947 = 86 * (v946 + 1);
      v948 = v947 >> 8;
      v949 = -3 * (v947 >> 8) + v946 + 1;
      if (v947 >= 0x100)
      {
        if (v948 == 2)
          v987 = 3;
        else
          v987 = 0;
        v988 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 32 * (v987 + v949) + 1888), 0xFuLL);
        v950 = ~v988;
        if (v948 != 1)
          v950 = v988 + 1;
      }
      else
      {
        v950 = 0;
      }
      *((_BYTE *)v15 + 15) = v950;
      if (v949)
      {
        if (v949 == 2)
          v989 = 3;
        else
          v989 = 0;
        v990 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 32 * (v989 + v948) + 1888), 0xFuLL);
        v991 = ~v990;
        if (v949 != 1)
          v991 = v990 + 1;
        *((_BYTE *)v15 + 16) = v991;
      }
      else
      {
        *((_BYTE *)v15 + 16) = 0;
      }
      v234 = v1522;
      v835 = v1521;
    }
    else if (v858 >= 2)
    {
      v951 = v945 - 1;
      if (v951 <= 7)
        *((_BYTE *)v15 + 14) = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 16 * v951 + 3232), 6uLL)- 3;
    }
  }
LABEL_807:
  *(_WORD *)((char *)v15 + 11) = 0;
  if (*(_DWORD *)(*(_QWORD *)(v1526 + 24) + 292))
  {
    v1024 = (int)v21 <= (int)v234 ? v234 : v21;
    if (v1024 <= 0x10 && (v234 + v21) >= 4)
    {
      v1025 = v858 - 2;
      if (!*((_BYTE *)v15 + 8))
      {
        v1026 = *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 592)
              ? (*(_BYTE *)(a1 + (v13 & 0x1F) + 624) != 0) + 1
              : *(_BYTE *)(a1 + (v13 & 0x1F) + 624) != 0;
        if (dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 12 * v1025 + 4 * v1026 + 6136)))
        {
          read_pal_plane(a1, (uint64_t)v15, 0, v1025, v1524, v1525);
        }
      }
      if (v835
        && !*((_BYTE *)v15 + 9)
        && dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * (*((_BYTE *)v15 + 11) != 0) + 6220)))
      {
        read_pal_uv(a1, (uint64_t)v15, v1025, v1524, v1525);
      }
    }
  }
  if (*((_BYTE *)v15 + 8))
  {
LABEL_824:
    if (!*((_BYTE *)v15 + 11))
      goto LABEL_831;
LABEL_827:
    v1027 = *(_DWORD *)(v1523 + 68);
    if (v1027)
    {
      v1028 = v12 + 16 * (v1027 & 1);
      v1029 = *(_BYTE **)(v1028 + 13896);
      *(_QWORD *)(v1028 + 13896) = &v1029[(16 * v234 * v21)];
    }
    else
    {
      v1029 = (_BYTE *)(a1 + 12416);
    }
    read_pal_indices(a1, v1029, (uint64_t)v15, 0, v24, v1508, v21, v234);
  }
  else
  {
    if (*((_BYTE *)v15 + 11))
      goto LABEL_827;
    if (v1512 <= v1510)
      v1035 = v1510;
    else
      v1035 = v1512;
    if (v1035 <= 3)
    {
      if (*(_DWORD *)(*(_QWORD *)(v1526 + 8) + 1016)
        && dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v12 + 13824), (unsigned __int16 *)(v12 + 4 * a3 + 5464)))
      {
        *((_BYTE *)v15 + 8) = 13;
        *((_BYTE *)v15 + 13) = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12 + 3360), 4uLL);
      }
      goto LABEL_824;
    }
  }
LABEL_831:
  if (v835 && *((_BYTE *)v15 + 12))
  {
    v1030 = *(_DWORD *)(v1523 + 68);
    if (v1030)
    {
      v1031 = v12 + 16 * (v1030 & 1);
      v1032 = *(_BYTE **)(v1031 + 13896);
      v1033 = v1514;
      v1034 = v1513;
      *(_QWORD *)(v1031 + 13896) = &v1032[16 * v1514 * v1513];
    }
    else
    {
      v1032 = (_BYTE *)(a1 + 12416 + (16 * v234 * v21));
      v1033 = v1514;
      v1034 = v1513;
    }
    read_pal_indices(a1, v1032, (uint64_t)v15, 1u, (int)(v24 + v1489) >> v1489, (v1508 + v1495) >> v1495, v1033, v1034);
  }
  if (*(_DWORD *)(*(_QWORD *)(v1526 + 24) + 4 * *((unsigned __int8 *)v15 + 4) + 1144))
  {
    *((_BYTE *)v15 + 7) = 0;
    *((_BYTE *)v15 + 10) = 0;
    v1036 = (char *)&dav1d_txfm_dimensions;
  }
  else
  {
    v1047 = &dav1d_max_txfm_size_for_bs[4 * a3];
    v1048 = *v1047;
    *((_BYTE *)v15 + 10) = v1048;
    *((_BYTE *)v15 + 7) = v1047[*(unsigned int *)(v1526 + 2056)];
    v1036 = (char *)&dav1d_txfm_dimensions + 8 * v1048;
    if (*(_DWORD *)(*(_QWORD *)(v1526 + 24) + 1392) == 2 && (_DWORD)v1048)
    {
      v1049 = *(char *)(*(_QWORD *)(a1 + 656) + v1524 + 416) >= (int)v1036[2];
      if (*(char *)(a1 + v1525 + 448) >= (int)v1036[3])
        ++v1049;
      if (*((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v1048 + 5) >= 2u)
        v1050 = 2;
      else
        v1050 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v1048 + 5);
      v1051 = dav1d_msac_decode_symbol_adapt_c((unsigned __int8 **)(v12 + 13824), (int16x8_t *)(v12+ 24* (*((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v1048 + 5)- 1)+ 8 * v1049+ 5024), v1050);
      if (v1051)
      {
        do
        {
          v1048 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v1048 + 6);
          *((_BYTE *)v15 + 10) = v1048;
          --v1051;
        }
        while (v1051);
        v1036 = (char *)&dav1d_txfm_dimensions + 8 * v1048;
      }
    }
  }
  if (*(_DWORD *)(v1523 + 68) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(v1526 + 3152))(a1, a3, a5, v15);
    v18 = v1492;
    v838 = v1521;
    v1037 = *(_QWORD *)(v1526 + 24);
    if (!*(_DWORD *)(v1037 + 1232))
      goto LABEL_850;
    goto LABEL_851;
  }
  (*(void (**)(uint64_t, uint64_t, _OWORD *))(v1526 + 3224))(a1, a3, v15);
  v18 = v1492;
  v838 = v1521;
  v1037 = *(_QWORD *)(v1526 + 24);
  if (*(_DWORD *)(v1037 + 1232))
    goto LABEL_851;
LABEL_850:
  if (*(_DWORD *)(v1037 + 1236))
  {
LABEL_851:
    v1038 = *(_QWORD *)(a1 + 656);
    __b = (_QWORD *)(v1038 + v1524 + 480);
    v1040 = (uint64_t *)(v1038 + v1516 + 512);
    if (!v838)
      v1040 = 0;
    v1041 = (unsigned __int8 *)(a1 + 32 + v1515 + 512);
    if (!v838)
      v1041 = 0;
    dav1d_create_lf_mask_intra(*(_WORD **)(v1523 + 40), *(_QWORD *)(v1526 + 4256), *(_QWORD *)(v1526 + 3264), (_BYTE *)(*(_QWORD *)(v12 + 14560) + ((unint64_t)*((unsigned __int8 *)v15 + 4) << 6)), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(v1526 + 3272), *(_DWORD *)(v1526 + 3276), __SPAIR64__(*((unsigned __int8 *)v15 + 10), a3), *((unsigned __int8 *)v15 + 7), *(_DWORD *)(v1526 + 2056), __b, (unsigned __int8 *)(a1 + 32 + v1525 + 480), v1040, v1041);
  }
  if (*((_BYTE *)v15 + 8) == 13)
    v1042 = 0;
  else
    v1042 = *((unsigned __int8 *)v15 + 8);
  switch((int)v234)
  {
    case 1:
      v1043 = 0;
      v1044 = v1036[3];
      v1045 = (_BYTE *)(a1 + v1525);
      v1045[448] = v1044;
      v1045[480] = v1044;
      v1045[32] = v1042;
      v1045[624] = *((_BYTE *)v15 + 11);
      v1045[160] = v1506;
      v1045[224] = 0;
      v1045[256] = 1;
      v1045[192] = *((_BYTE *)v15 + 6);
      if (v838)
        v1043 = *((_BYTE *)v15 + 12);
      v1045[8224] = v1043;
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        v1046 = (_BYTE *)(a1 + v1525);
        v1046[288] = 0;
        v1046[320] = -1;
        v1046[352] = -1;
        v1046[384] = 3;
        v1046[416] = 3;
      }
      break;
    case 2:
      v1052 = 0;
      v1053 = v1036[3] | (v1036[3] << 8);
      v1054 = (_WORD *)(a1 + v1525);
      v1054[224] = v1053;
      v1054[240] = v1053;
      v1054[16] = v1042 | ((_WORD)v1042 << 8);
      v1054[312] = *((unsigned __int8 *)v15 + 11) | (*((unsigned __int8 *)v15 + 11) << 8);
      v1054[80] = 257 * v1506;
      v1054[112] = 0;
      v1054[128] = 257;
      v1054[96] = *((unsigned __int8 *)v15 + 6) | (*((unsigned __int8 *)v15 + 6) << 8);
      if (v838)
        v1052 = *((unsigned __int8 *)v15 + 12);
      v1054[4112] = v1052 | (v1052 << 8);
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        v1055 = (_WORD *)(a1 + v1525);
        v1055[144] = 0;
        v1055[160] = -1;
        v1055[176] = -1;
        v1055[192] = 771;
        v1055[208] = 771;
      }
      break;
    case 4:
      v1056 = 0;
      v1057 = v1036[3];
      *(_DWORD *)(a1 + v1525 + 32) = 16843009 * v1042;
      v1058 = (_DWORD *)(a1 + v1525 + 32);
      v1057 *= 16843009;
      v1058[104] = v1057;
      v1058[112] = v1057;
      v1058[148] = 16843009 * *((unsigned __int8 *)v15 + 11);
      v1058[32] = 16843009 * v1506;
      v1058[48] = 0;
      v1058[56] = 16843009;
      v1058[40] = 16843009 * *((unsigned __int8 *)v15 + 6);
      if (v838)
        v1056 = *((unsigned __int8 *)v15 + 12);
      *(_DWORD *)(a1 + v1525 + 8224) = 16843009 * v1056;
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        v1059 = (_DWORD *)(a1 + v1525);
        v1059[72] = 0;
        v1059[80] = -1;
        v1059[88] = -1;
        v1059[96] = 50529027;
        v1059[104] = 50529027;
      }
      break;
    case 8:
      v1060 = 0;
      v1061 = v1036[3];
      *(_QWORD *)(a1 + v1525 + 32) = 0x101010101010101 * v1042;
      v1062 = (_QWORD *)(a1 + v1525 + 32);
      v1061 *= 0x101010101010101;
      v1062[52] = v1061;
      v1062[56] = v1061;
      v1062[74] = 0x101010101010101 * *((unsigned __int8 *)v15 + 11);
      v1062[16] = 0x101010101010101 * v1506;
      v1062[24] = 0;
      v1062[28] = 0x101010101010101;
      v1062[20] = 0x101010101010101 * *((unsigned __int8 *)v15 + 6);
      if (v838)
        v1060 = *((unsigned __int8 *)v15 + 12);
      *(_QWORD *)(a1 + v1525 + 8224) = 0x101010101010101 * v1060;
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        v1063 = (_QWORD *)(a1 + v1525);
        v1063[36] = 0;
        v1063[40] = -1;
        v1063[44] = -1;
        v1063[48] = 0x303030303030303;
        v1063[52] = 0x303030303030303;
      }
      break;
    case 16:
      v1064 = 0;
      v1065 = vdupq_n_s64(0x101010101010101 * (unint64_t)v1036[3]);
      *(int64x2_t *)(a1 + v1525 + 32) = vdupq_n_s64(0x101010101010101 * v1042);
      v1066 = a1 + v1525 + 32;
      *(int64x2_t *)(v1066 + 416) = v1065;
      *(int64x2_t *)(v1066 + 448) = v1065;
      *(int64x2_t *)(v1066 + 592) = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 11));
      *(int64x2_t *)(v1066 + 128) = vdupq_n_s64(0x101010101010101 * v1506);
      *(_QWORD *)(v1066 + 192) = 0;
      *(_QWORD *)(v1066 + 200) = 0;
      v1065.i64[0] = 0x101010101010101;
      v1065.i64[1] = 0x101010101010101;
      *(int64x2_t *)(v1066 + 224) = v1065;
      *(int64x2_t *)(v1066 + 160) = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 6));
      if (v838)
        v1064 = *((unsigned __int8 *)v15 + 12);
      *(int64x2_t *)(a1 + v1525 + 8224) = vdupq_n_s64(0x101010101010101 * v1064);
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        v1067 = a1 + v1525;
        *(_QWORD *)(v1067 + 288) = 0;
        *(_QWORD *)(v1067 + 296) = 0;
        *(_QWORD *)&v1068 = -1;
        *((_QWORD *)&v1068 + 1) = -1;
        *(_OWORD *)(v1067 + 320) = v1068;
        *(_OWORD *)(v1067 + 352) = v1068;
        *(_QWORD *)&v1068 = 0x303030303030303;
        *((_QWORD *)&v1068 + 1) = 0x303030303030303;
        *(_OWORD *)(v1067 + 384) = v1068;
        *(_OWORD *)(v1067 + 416) = v1068;
      }
      break;
    case 32:
      v1069 = a1 + 32;
      v1070 = a1 + 448;
      v1071 = vdupq_n_s64(0x101010101010101 * (unint64_t)v1036[3]);
      *(int64x2_t *)(v1070 + v1525) = v1071;
      v1072 = v1525 + 16;
      *(int64x2_t *)(v1070 + v1072) = v1071;
      v1073 = a1 + 480;
      *(int64x2_t *)(v1073 + v1525) = v1071;
      *(int64x2_t *)(v1073 + v1072) = v1071;
      v1074 = vdupq_n_s64(0x101010101010101 * v1042);
      *(int64x2_t *)(v1069 + v1525) = v1074;
      *(int64x2_t *)(v1069 + v1072) = v1074;
      v1075 = a1 + 624;
      v1076 = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 11));
      *(int64x2_t *)(v1075 + v1525) = v1076;
      *(int64x2_t *)(v1075 + v1072) = v1076;
      v1077 = a1 + 160;
      v1078 = vdupq_n_s64(0x101010101010101 * v1506);
      *(int64x2_t *)(v1077 + v1525) = v1078;
      *(int64x2_t *)(v1077 + v1072) = v1078;
      v1079 = a1 + 224;
      *(_OWORD *)(v1079 + v1525) = 0u;
      *(_OWORD *)(v1079 + v1072) = 0u;
      v1080 = a1 + 256;
      v1078.i64[0] = 0x101010101010101;
      v1078.i64[1] = 0x101010101010101;
      *(int64x2_t *)(v1080 + v1525) = v1078;
      *(int64x2_t *)(v1080 + v1072) = v1078;
      v1081 = a1 + 192;
      v1082 = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 6));
      *(int64x2_t *)(v1081 + v1525) = v1082;
      *(int64x2_t *)(v1081 + v1072) = v1082;
      if (v838)
        v1083 = *((unsigned __int8 *)v15 + 12);
      else
        v1083 = 0;
      v1084 = 0x101010101010101 * v1083;
      v1085 = a1 + 8224;
      v1086 = vdupq_n_s64(v1084);
      *(int64x2_t *)(v1085 + v1525) = v1086;
      *(int64x2_t *)(v1085 + v1072) = v1086;
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        v1087 = a1 + 288;
        *(_OWORD *)(v1087 + v1525) = 0u;
        *(_OWORD *)(v1087 + v1072) = 0u;
        v1088 = a1 + 320;
        *(_QWORD *)&v1089 = -1;
        *((_QWORD *)&v1089 + 1) = -1;
        *(_OWORD *)(v1088 + v1525) = v1089;
        *(_OWORD *)(v1088 + v1072) = v1089;
        v1090 = a1 + 352;
        *(_OWORD *)(v1090 + v1525) = v1089;
        *(_OWORD *)(v1090 + v1072) = v1089;
        v1091 = a1 + 384;
        *(_QWORD *)&v1089 = 0x303030303030303;
        *((_QWORD *)&v1089 + 1) = 0x303030303030303;
        *(_OWORD *)(v1091 + v1525) = v1089;
        *(_OWORD *)(v1091 + v1072) = v1089;
        v1092 = a1 + 416;
        *(_OWORD *)(v1092 + v1525) = v1089;
        *(_OWORD *)(v1092 + v1072) = v1089;
      }
      break;
    default:
      break;
  }
  switch((int)v21)
  {
    case 1:
      v1093 = 0;
      v1094 = v1036[2];
      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v1094;
      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 448) = v1094;
      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524) = v1042;
      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = *((_BYTE *)v15 + 11);
      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = v1506;
      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0;
      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 1;
      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = *((_BYTE *)v15 + 6);
      if (v838)
        v1093 = *((_BYTE *)v15 + 12);
      *(_BYTE *)(a1 + v1524 + 0x2000) = v1093;
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 256) = 0;
        *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 288) = -1;
        *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 320) = -1;
        *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 3;
        *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 3;
      }
      break;
    case 2:
      v1095 = 0;
      v1096 = v1036[2] | (v1036[2] << 8);
      *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v1096;
      *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 448) = v1096;
      *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524) = v1042 | ((_WORD)v1042 << 8);
      *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = *((unsigned __int8 *)v15 + 11) | (*((unsigned __int8 *)v15 + 11) << 8);
      *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = 257 * v1506;
      *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0;
      *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 257;
      *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = *((unsigned __int8 *)v15 + 6) | (*((unsigned __int8 *)v15 + 6) << 8);
      if (v838)
        v1095 = *((unsigned __int8 *)v15 + 12);
      *(_WORD *)(a1 + v1524 + 0x2000) = v1095 | (v1095 << 8);
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 256) = 0;
        *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 288) = -1;
        *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 320) = -1;
        *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 771;
        *(_WORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 771;
      }
      break;
    case 4:
      v1097 = 0;
      v1098 = 16843009 * v1036[2];
      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v1098;
      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 448) = v1098;
      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524) = 16843009 * v1042;
      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 16843009 * *((unsigned __int8 *)v15 + 11);
      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = 16843009 * v1506;
      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 16843009;
      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = 16843009 * *((unsigned __int8 *)v15 + 6);
      if (v838)
        v1097 = *((unsigned __int8 *)v15 + 12);
      *(_DWORD *)(a1 + v1524 + 0x2000) = 16843009 * v1097;
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 256) = 0;
        *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 288) = -1;
        *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 320) = -1;
        *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 50529027;
        *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 50529027;
      }
      break;
    case 8:
      v1099 = 0;
      v1100 = 0x101010101010101 * v1036[2];
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v1100;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 448) = v1100;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524) = 0x101010101010101 * v1042;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = 0x101010101010101 * *((unsigned __int8 *)v15 + 11);
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = 0x101010101010101 * v1506;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0x101010101010101;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = 0x101010101010101 * *((unsigned __int8 *)v15 + 6);
      if (v838)
        v1099 = *((unsigned __int8 *)v15 + 12);
      *(_QWORD *)(a1 + v1524 + 0x2000) = 0x101010101010101 * v1099;
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 256) = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 288) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 320) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 0x303030303030303;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 0x303030303030303;
      }
      break;
    case 16:
      v1101 = 0;
      v1102 = 0x101010101010101 * v1036[2];
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v1102;
      v1103 = v1524 + 8;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103 + 416) = v1102;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 448) = v1102;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103 + 448) = v1102;
      v1104 = 0x101010101010101 * v1042;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524) = v1104;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103) = v1104;
      v1105 = 0x101010101010101 * *((unsigned __int8 *)v15 + 11);
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = v1105;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103 + 592) = v1105;
      v1106 = 0x101010101010101 * v1506;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = v1106;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103 + 128) = v1106;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103 + 192) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0x101010101010101;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103 + 224) = 0x101010101010101;
      v1107 = 0x101010101010101 * *((unsigned __int8 *)v15 + 6);
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = v1107;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103 + 160) = v1107;
      if (v838)
        v1101 = *((unsigned __int8 *)v15 + 12);
      *(int64x2_t *)(a1 + v1524 + 0x2000) = vdupq_n_s64(0x101010101010101 * v1101);
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 256) = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103 + 256) = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 288) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103 + 288) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 320) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103 + 320) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 0x303030303030303;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103 + 352) = 0x303030303030303;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 0x303030303030303;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1103 + 384) = 0x303030303030303;
      }
      break;
    case 32:
      v1108 = 0;
      v1109 = 0x101010101010101 * v1036[2];
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 416) = v1109;
      v1110 = v1524 + 8;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110 + 416) = v1109;
      v1111 = v1524 + 16;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111 + 416) = v1109;
      v1112 = v1524 + 24;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112 + 416) = v1109;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 448) = v1109;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110 + 448) = v1109;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111 + 448) = v1109;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112 + 448) = v1109;
      v1113 = 0x101010101010101 * v1042;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524) = v1113;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110) = v1113;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111) = v1113;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112) = v1113;
      v1114 = 0x101010101010101 * *((unsigned __int8 *)v15 + 11);
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 592) = v1114;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110 + 592) = v1114;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111 + 592) = v1114;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112 + 592) = v1114;
      v1115 = 0x101010101010101 * v1506;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 128) = v1115;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110 + 128) = v1115;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111 + 128) = v1115;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112 + 128) = v1115;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 192) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110 + 192) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111 + 192) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112 + 192) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 224) = 0x101010101010101;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110 + 224) = 0x101010101010101;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111 + 224) = 0x101010101010101;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112 + 224) = 0x101010101010101;
      v1116 = 0x101010101010101 * *((unsigned __int8 *)v15 + 6);
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 160) = v1116;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110 + 160) = v1116;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111 + 160) = v1116;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112 + 160) = v1116;
      if (v838)
        v1108 = *((unsigned __int8 *)v15 + 12);
      v1117 = 0x101010101010101 * v1108;
      v1118 = a1 + 0x2000;
      v1119 = vdupq_n_s64(v1117);
      *(int64x2_t *)(v1118 + v1524) = v1119;
      *(int64x2_t *)(v1118 + v1111) = v1119;
      if ((*(_BYTE *)(*(_QWORD *)(v1526 + 24) + 232) & 1) != 0)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 256) = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110 + 256) = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111 + 256) = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112 + 256) = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 288) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110 + 288) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111 + 288) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112 + 288) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 320) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110 + 320) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111 + 320) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112 + 320) = -1;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 352) = 0x303030303030303;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110 + 352) = 0x303030303030303;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111 + 352) = 0x303030303030303;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112 + 352) = 0x303030303030303;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1524 + 384) = 0x303030303030303;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1110 + 384) = 0x303030303030303;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1111 + 384) = 0x303030303030303;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1112 + 384) = 0x303030303030303;
      }
      break;
    default:
      break;
  }
  if (*((_BYTE *)v15 + 11))
  {
    if (*(_DWORD *)(v1523 + 68))
    {
      v1120 = (_OWORD *)(*(_QWORD *)(v1526 + 4208)
                       + 48
                       * ((*(uint64_t *)(v1526 + 3264) >> 1) * (int)((*v18 & 1) + ((int)*v1520 >> 1))
                        + (int)((*v1520 & 1) + ((int)*v18 >> 1))));
      if (!(_DWORD)v21)
        goto LABEL_928;
LABEL_926:
      v1121 = (_OWORD *)(a1 + 48 * v1524 + 5120);
      v1122 = v21;
      do
      {
        *v1121 = *v1120;
        v1121 += 3;
        --v1122;
      }
      while (v1122);
      goto LABEL_928;
    }
    v1120 = (_OWORD *)(a1 + 20608);
    if ((_DWORD)v21)
      goto LABEL_926;
LABEL_928:
    if ((_DWORD)v234)
    {
      v1123 = (_OWORD *)(a1 + 48 * v1525 + 6656);
      v1124 = v234;
      do
      {
        *v1123 = *v1120;
        v1123 += 3;
        --v1124;
      }
      while (v1124);
    }
  }
  if (v838)
  {
    switch(v1513)
    {
      case 1:
        *(_BYTE *)(a1 + v1515 + 592) = *((_BYTE *)v15 + 9);
        break;
      case 2:
        *(_WORD *)(a1 + v1515 + 592) = *((unsigned __int8 *)v15 + 9) | (*((unsigned __int8 *)v15 + 9) << 8);
        break;
      case 4:
        *(_DWORD *)(a1 + v1515 + 592) = 16843009 * *((unsigned __int8 *)v15 + 9);
        break;
      case 8:
        *(_QWORD *)(a1 + v1515 + 592) = 0x101010101010101 * *((unsigned __int8 *)v15 + 9);
        break;
      case 16:
        *(int64x2_t *)(a1 + v1515 + 592) = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15
                                                                                               + 9));
        break;
      case 32:
        v1125 = vdupq_n_s64(0x101010101010101 * (unint64_t)*((unsigned __int8 *)v15 + 9));
        *(int64x2_t *)(a1 + 592 + v1515) = v1125;
        *(int64x2_t *)(a1 + 592 + v1515 + 16) = v1125;
        break;
      default:
        break;
    }
    switch(v1514)
    {
      case 1:
        *(_BYTE *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = *((_BYTE *)v15 + 9);
        break;
      case 2:
        *(_WORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = *((unsigned __int8 *)v15 + 9) | (*((unsigned __int8 *)v15 + 9) << 8);
        break;
      case 4:
        *(_DWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = 16843009 * *((unsigned __int8 *)v15 + 9);
        break;
      case 8:
        v1126 = 0x101010101010101 * *((unsigned __int8 *)v15 + 9);
        v1127 = *(_QWORD *)(a1 + 656) + v1516;
        goto LABEL_947;
      case 16:
        v1126 = 0x101010101010101 * *((unsigned __int8 *)v15 + 9);
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = v1126;
        v1128 = *(_QWORD *)(a1 + 656);
        v1129 = v1516 + 8;
        goto LABEL_946;
      case 32:
        v1126 = 0x101010101010101 * *((unsigned __int8 *)v15 + 9);
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 560) = v1126;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 8 + 560) = v1126;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v1516 + 16 + 560) = v1126;
        v1128 = *(_QWORD *)(a1 + 656);
        v1129 = v1516 + 24;
LABEL_946:
        v1127 = v1128 + v1129;
LABEL_947:
        *(_QWORD *)(v1127 + 560) = v1126;
        break;
      default:
        break;
    }
    if (*((_BYTE *)v15 + 12))
    {
      if (*(_DWORD *)(v1523 + 68))
        v1130 = *(_QWORD *)(v1526 + 4208)
              + 48
              * ((*(uint64_t *)(v1526 + 3264) >> 1) * (int)((*v18 & 1) + ((int)*v1520 >> 1))
               + (int)((*v1520 & 1) + ((int)*v18 >> 1)));
      else
        v1130 = a1 + 20608;
      if ((_DWORD)v21)
      {
        v1131 = (_OWORD *)(a1 + 48 * v1524 + 5136);
        v1132 = v21;
        do
        {
          *v1131 = *(_OWORD *)(v1130 + 16);
          v1131 += 3;
          --v1132;
        }
        while (v1132);
      }
      if ((_DWORD)v234)
      {
        v1133 = (_OWORD *)(a1 + 48 * v1525 + 6672);
        v1134 = v234;
        do
        {
          *v1133 = *(_OWORD *)(v1130 + 16);
          v1133 += 3;
          --v1134;
        }
        while (v1134);
      }
      if ((_DWORD)v21)
      {
        v1135 = (_OWORD *)(a1 + 48 * v1524 + 5152);
        v1136 = v21;
        do
        {
          *v1135 = *(_OWORD *)(v1130 + 32);
          v1135 += 3;
          --v1136;
        }
        while (v1136);
      }
      if ((_DWORD)v234)
      {
        v1137 = (_OWORD *)(v1130 + 32);
        v1138 = (_OWORD *)(a1 + 48 * v1525 + 6688);
        v1139 = v234;
        do
        {
          *v1138 = *v1137;
          v1138 += 3;
          --v1139;
        }
        while (v1139);
      }
    }
  }
  v1140 = *(_QWORD *)(v1526 + 24);
  if ((*(_BYTE *)(v1140 + 232) & 1) != 0 || *(_DWORD *)(v1140 + 464))
  {
    v1141 = *(_QWORD *)(v1526 + 3120);
    v1531 = 2147516416;
    LOWORD(v1532) = -256;
    HIWORD(v1532) = a3;
    (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t, uint64_t))(v1141 + 62800))(a1 + 8 * (*(_DWORD *)(a1 + 28) & 0x1FLL) + 712, &v1531, *(unsigned int *)(a1 + 24), v21, v234);
  }
  v922 = v1523;
  v878 = v1517;
LABEL_1003:
  v1160 = *(_QWORD *)(v1526 + 24);
  if (*(_DWORD *)(v1160 + 864) && *(_DWORD *)(v1160 + 868))
  {
    v1161 = *(_QWORD *)(v1526 + 2680) + (int)*v18 + *(_QWORD *)(v1526 + 3264) * (int)*v1520;
    switch((int)v21)
    {
      case 1:
        if (!(_DWORD)v234)
          goto LABEL_1034;
        v1162 = v234;
        do
        {
          *(_BYTE *)v1161 = *((_BYTE *)v15 + 4);
          v1161 += *(_QWORD *)(v1526 + 3264);
          --v1162;
        }
        while (v1162);
        break;
      case 2:
        if (!(_DWORD)v234)
          goto LABEL_1034;
        v1163 = v234;
        do
        {
          *(_WORD *)v1161 = *((unsigned __int8 *)v15 + 4) | (*((unsigned __int8 *)v15 + 4) << 8);
          v1161 += *(_QWORD *)(v1526 + 3264);
          --v1163;
        }
        while (v1163);
        break;
      case 4:
        if (!(_DWORD)v234)
          goto LABEL_1034;
        v1164 = v234;
        do
        {
          *(_DWORD *)v1161 = 16843009 * *((unsigned __int8 *)v15 + 4);
          v1161 += *(_QWORD *)(v1526 + 3264);
          --v1164;
        }
        while (v1164);
        break;
      case 8:
        if (!(_DWORD)v234)
          goto LABEL_1034;
        v1165 = v234;
        do
        {
          *(_QWORD *)v1161 = 0x101010101010101 * *((unsigned __int8 *)v15 + 4);
          v1161 += *(_QWORD *)(v1526 + 3264);
          --v1165;
        }
        while (v1165);
        break;
      case 16:
        if (!(_DWORD)v234)
          goto LABEL_1034;
        v1166 = v234;
        do
        {
          v1167 = 0x101010101010101 * *((unsigned __int8 *)v15 + 4);
          *(_QWORD *)v1161 = v1167;
          *(_QWORD *)(v1161 + 8) = v1167;
          v1161 += *(_QWORD *)(v1526 + 3264);
          --v1166;
        }
        while (v1166);
        break;
      case 32:
        if (!(_DWORD)v234)
          goto LABEL_1034;
        v1168 = v234;
        do
        {
          v1169 = 0x101010101010101 * *((unsigned __int8 *)v15 + 4);
          *(_QWORD *)v1161 = v1169;
          *(_QWORD *)(v1161 + 8) = v1169;
          *(_QWORD *)(v1161 + 16) = v1169;
          *(_QWORD *)(v1161 + 24) = v1169;
          v1161 += *(_QWORD *)(v1526 + 3264);
          --v1168;
        }
        while (v1168);
        break;
      default:
        break;
    }
  }
  if (*((_BYTE *)v15 + 6))
    v1170 = 1;
  else
    v1170 = (_DWORD)v234 == 0;
  if (!v1170)
  {
    v1190 = 0;
    v1191 = 0xFFFFFFFF >> -(char)v21 << (v878 & 0xF);
    v1192 = *(_QWORD *)(v922 + 40);
    v1193 = 4 * (v1525 >> 1);
    v1194 = v1193 + v1192 + 1286;
    v1195 = (v1193 | (2 * ((v878 >> 4) & 1))) + v1192 + 1284;
    do
    {
      *(_WORD *)(v1195 + 2 * v1190) |= v1191;
      if ((_DWORD)v21 == 32)
        *(_WORD *)(v1194 + 2 * v1190) |= v1191;
      v1190 += 2;
    }
    while (v1190 < v234);
  }
LABEL_1034:
  if (*(_DWORD *)(v922 + 68) != 1)
    return 0;
  if (*v1505)
    return 0;
  v1171 = *(_QWORD *)(v1526 + 24);
  if ((*(_BYTE *)(v1171 + 232) & 1) == 0)
    return 0;
  v1172 = *v1520;
  v1173 = (int)(*v1520 - *(_DWORD *)(v12 + 13872)) >> *(_DWORD *)(v1526 + 3300);
  v1174 = *(_QWORD *)(v12 + 13928);
  v1175 = v1174 + 56 * v1173;
  if (!*((_BYTE *)v15 + 20))
  {
    if ((int)v21 >= (int)v1522)
      v1204 = v1522;
    else
      v1204 = v21;
    if (v1204 >= 2)
    {
      if (*((_BYTE *)v15 + 21) == 2)
      {
        v1205 = *((char *)v15 + 24);
        if (*(_BYTE *)(v1526 + v1205 + 2920))
        {
          v1206 = (signed int *)(v1175 + 8 * v1205);
          if (*((_BYTE *)v15 + 22) != 2)
          {
            v1207 = (int *)(v1171 + 36 * *((char *)v15 + 24) + 1424);
LABEL_1154:
            affine_lowest_px(a1, v1206, 0, v1498, v1207);
            goto LABEL_1157;
          }
LABEL_1153:
          v1207 = (int *)(a1 + 259520);
          goto LABEL_1154;
        }
      }
      if (*((_BYTE *)v15 + 22) == 2 && *(_DWORD *)v922 >= 2u)
      {
        v1206 = (signed int *)(v1175 + 8 * *((char *)v15 + 24));
        goto LABEL_1153;
      }
    }
    mc_lowest_px((int *)(v1175 + 8 * *((char *)v15 + 24)), v1172, v1522, *((__int16 *)v15 + 4), 0, (int *)(v1526 + 16 * *((char *)v15 + 24) + 3000));
    if (*((_BYTE *)v15 + 22) == 1)
      obmc_lowest_px(a1, v1175, 0, v1498, v24, v1508);
LABEL_1157:
    if (!v838)
      return 0;
    if ((_DWORD)v21 == v1489 || (_DWORD)v1522 == v1495)
    {
      v1267 = *(_DWORD *)(a1 + 28);
      v1268 = (_QWORD *)(a1 + 8 * (v1267 & 0x1F) + 712);
      v1269 = (_DWORD)v21 != 1 || *(char *)(*v1268 + 12 * (int)*v18 - 4) > 0;
      if ((_DWORD)v1522 == v1495)
      {
        v1370 = *(_QWORD *)(a1 + 8 * (v1267 & 0x1F) + 704);
        if (*(char *)(v1370 + 12 * (int)*v18 + 8) <= 0)
          v1269 = 0;
        if ((_DWORD)v21 == 1 && *(char *)(v1370 + 12 * (int)*v18 - 4) <= 0)
          v1269 = 0;
      }
      if (v1269)
      {
        if ((_DWORD)v21 == 1 && (_DWORD)v1522 == v1495)
        {
          v1371 = *(_QWORD *)(a1 + 8 * (v1267 & 0x1F) + 704) + 12 * (int)*v18;
          v1372 = v1495;
          mc_lowest_px((int *)(v1175 + 8 * (*(char *)(v1371 - 4) - 1) + 4), v1267 - 1, v1495, *(__int16 *)(v1371 - 12), v1495, (int *)(v1526 + 16 * (*(char *)(v1371 - 4) - 1) + 3000));
          v1267 = *v1520;
          v1373 = v1522;
        }
        else
        {
          v216 = (_DWORD)v21 == 1;
          v1373 = v1522;
          v1372 = v1495;
          if (!v216)
            goto LABEL_1365;
        }
        v1428 = *v1268 + 12 * (int)*v18;
        mc_lowest_px((int *)(v1175 + 8 * (*(char *)(v1428 - 4) - 1) + 4), v1267, v1373, *(__int16 *)(v1428 - 12), v1372, (int *)(v1526 + 16 * (*(char *)(v1428 - 4) - 1) + 3000));
        v1267 = *v1520;
LABEL_1365:
        if (v1373 == v1372)
        {
          v1429 = (__int16 *)(*(v1268 - 1) + 12 * (int)*v18);
          mc_lowest_px((int *)(v1175 + 8 * (*((char *)v1429 + 8) - 1) + 4), v1267 - 1, v1372, *v1429, v1372, (int *)(v1526 + 16 * (*((char *)v1429 + 8) - 1) + 3000));
          v1267 = *v1520;
        }
        mc_lowest_px((int *)(v1175 + 8 * *((char *)v15 + 24) + 4), v1267, v1522, *((__int16 *)v15 + 4), v1372, (int *)(v1526 + 16 * *((char *)v15 + 24) + 3000));
        return 0;
      }
    }
    v1374 = v1514;
    if (v1514 >= v1513)
      v1374 = v1513;
    if (v1374 >= 2)
    {
      if (*((_BYTE *)v15 + 21) == 2)
      {
        v1375 = *((char *)v15 + 24);
        if (*(_BYTE *)(v1526 + v1375 + 2920))
        {
          v1376 = (signed int *)(v1175 + 8 * v1375 + 4);
          if (*((_BYTE *)v15 + 22) != 2)
          {
            v1377 = (int *)(*(_QWORD *)(v1526 + 24) + 36 * *((char *)v15 + 24) + 1424);
LABEL_1326:
            affine_lowest_px(a1, v1376, 1, v1498, v1377);
            return 0;
          }
LABEL_1325:
          v1377 = (int *)(a1 + 259520);
          goto LABEL_1326;
        }
      }
      if (*((_BYTE *)v15 + 22) == 2 && *(_DWORD *)v922 >= 2u)
      {
        v1376 = (signed int *)(v1175 + 8 * *((char *)v15 + 24) + 4);
        goto LABEL_1325;
      }
    }
    mc_lowest_px((int *)(v1175 + 8 * *((char *)v15 + 24) + 4), *v1520 & ~v1495, (_DWORD)v1522 << ((_DWORD)v1522 == v1495), *((__int16 *)v15 + 4), v1495, (int *)(v1526 + 16 * *((char *)v15 + 24) + 3000));
    if (*((_BYTE *)v15 + 22) == 1)
      obmc_lowest_px(a1, v1175, 1u, v1498, v24, v1508);
    return 0;
  }
  v1176 = (int)(*v1520 - *(_DWORD *)(v12 + 13872)) >> *(_DWORD *)(v1526 + 3300);
  v1177 = 4 * v21;
  if (4 * (int)v21 <= 16)
    v1178 = 16;
  else
    v1178 = 4 * v21;
  v1179 = v1178 - 8;
  v1180 = 4 * v1522 - 1;
  v1181 = *((char *)v15 + 24);
  if (*((_BYTE *)v15 + 21) == 6 && *(_BYTE *)(v1526 + v1181 + 2920))
  {
    if ((_DWORD)v21)
    {
      v1182 = (signed int *)(v1175 + 8 * v1181);
      v1183 = v1171 + 36 * *((char *)v15 + 24);
      v1184 = *(int *)(v1183 + 1432) + *(int *)(v1183 + 1448) * (uint64_t)(4 * (v1172 + (int)v1522) - 4);
      v1185 = (const float *)(v1183 + 1444);
      v1186 = *v1182;
      if (v1177 <= v1179)
        v1187 = v1179;
      else
        v1187 = 4 * v21;
      v1188 = (v1187 - 1) / v1179;
      if (v1188 >= 0xB)
      {
        v1189 = 0;
        v1326 = v1174 + 56 * v1173 + 8 * v1181 + 4;
        v1328 = (unint64_t)v1182 < v1171 + 36 * *((char *)v15 + 24) + 1448 && (unint64_t)v1185 < v1326;
        if ((unint64_t)v18 < v1326 && v1182 < (signed int *)v1520)
          goto LABEL_1049;
        if (v1328)
          goto LABEL_1049;
        v1189 = ((v1188 + 1) & 0xFFFFFFF8) * v1179;
        v1330 = vdupq_n_s32(v1186);
        v1331 = vdupq_n_s32(4 * v1179);
        v1332 = vdupq_n_s64(v1184);
        v1333 = vmulq_s32(vdupq_n_s32(v1179), (int32x4_t)xmmword_196889B70);
        v1334 = (int32x4_t)vld1q_dup_f32((const float *)v18);
        v1335 = vshlq_n_s32(v1334, 2uLL);
        v1336 = vld1_dup_f32(v1185);
        v1337.i64[0] = 0x800000008;
        v1337.i64[1] = 0x800000008;
        v1338 = (v1188 + 1) & 0xFFFFFFF8;
        v1339 = v1330;
        do
        {
          v1340 = vaddq_s32(v1333, v1331);
          v1341 = (int64x2_t)vaddq_s32(v1335, (int32x4_t)(*(_OWORD *)&v1333 | __PAIR128__(0x400000004, 0x400000004)));
          v1333 = vaddq_s32(v1340, v1331);
          v1342 = (int64x2_t)vaddq_s32(v1335, (int32x4_t)(*(_OWORD *)&v1340 | __PAIR128__(0x400000004, 0x400000004)));
          v1343 = v1341.i32[1];
          v1344.i64[0] = v1341.i32[0] * (uint64_t)v1336.i32[0];
          v1341.i64[0] = v1341.i32[2] * (uint64_t)v1336.i32[0];
          v1344.i64[1] = v1343 * (uint64_t)v1336.i32[1];
          v1341.i64[1] = v1341.i32[3] * (uint64_t)v1336.i32[1];
          v1345.i64[0] = v1342.i32[0] * (uint64_t)v1336.i32[0];
          v1345.i64[1] = v1342.i32[1] * (uint64_t)v1336.i32[1];
          v1342.i64[0] = v1342.i32[2] * (uint64_t)v1336.i32[0];
          v1342.i64[1] = v1342.i32[3] * (uint64_t)v1336.i32[1];
          v1330 = vmaxq_s32(v1330, vaddq_s32(vshrn_high_n_s64(vshrn_n_s64(vaddq_s64(v1332, v1344), 0x10uLL), vaddq_s64(v1332, v1341), 0x10uLL), v1337));
          v1339 = vmaxq_s32(v1339, vaddq_s32(vshrn_high_n_s64(vshrn_n_s64(vaddq_s64(v1332, v1345), 0x10uLL), vaddq_s64(v1332, v1342), 0x10uLL), v1337));
          v1338 -= 8;
        }
        while (v1338);
        v1346 = vmaxvq_s32(vmaxq_s32(v1330, v1339));
        *v1182 = v1346;
        v1186 = v1346;
        if (v1188 + 1 != ((v1188 + 1) & 0xFFFFFFF8))
          goto LABEL_1049;
      }
      else
      {
        v1189 = 0;
        do
        {
LABEL_1049:
          if (v1186 <= (int)(((v1184 + ((v1189 | 4) + 4 * (int)*v18) * *(int *)v1185) >> 16) + 8))
            v1186 = ((v1184 + ((v1189 | 4) + 4 * (int)*v18) * *(int *)v1185) >> 16) + 8;
          *v1182 = v1186;
          v1189 += v1179;
        }
        while (v1189 < v1177);
      }
    }
  }
  else
  {
    v1196 = (int *)(v1175 + 8 * v1181);
    v1197 = *((__int16 *)v15 + 4);
    v1198 = v1526 + 16 * v1181;
    v1199 = *(_DWORD *)(v1198 + 3000);
    if (v1199)
    {
      v1200 = 8 * v1199 - 0x20000 + v1199 * (uint64_t)((v1172 << 6) + 2 * v1197);
      v1201 = v1200 < 0;
      if (v1200 < 0)
        v1200 = -v1200;
      v1202 = (unint64_t)(v1200 + 128) >> 8;
      if (v1201)
        LODWORD(v1202) = -(int)v1202;
      v1203 = (((int)v1202 + *(_DWORD *)(v1198 + 3004) * v1180 + 32) >> 10) + 5;
      if (*v1196 > v1203)
        v1203 = *v1196;
    }
    else
    {
      v1203 = (v1197 >> 3) + 4 * (v1172 + v1522) + 4 * ((v1197 & 7) != 0);
      if (*v1196 > v1203)
        v1203 = *v1196;
    }
    *v1196 = v1203;
  }
  v1211 = *((char *)v15 + 25);
  if (*((_BYTE *)v15 + 21) != 6)
  {
    v1212 = *v1520;
    goto LABEL_1101;
  }
  v1212 = *v1520;
  if (!*(_BYTE *)(v1526 + v1211 + 2920))
  {
LABEL_1101:
    v1221 = (int *)(v1175 + 8 * v1211);
    v1222 = *((__int16 *)v15 + 6);
    v1223 = v1526 + 16 * v1211;
    v1224 = *(_DWORD *)(v1223 + 3000);
    if (v1224)
    {
      v1225 = 8 * v1224 - 0x20000 + v1224 * (uint64_t)(int)((v1212 << 6) + 2 * v1222);
      v1226 = v1225 < 0;
      if (v1225 < 0)
        v1225 = -v1225;
      v1227 = (unint64_t)(v1225 + 128) >> 8;
      if (v1226)
        LODWORD(v1227) = -(int)v1227;
      v1228 = (((int)v1227 + *(_DWORD *)(v1223 + 3004) * v1180 + 32) >> 10) + 5;
      if (*v1221 > v1228)
        v1228 = *v1221;
    }
    else
    {
      v1228 = (v1222 >> 3) + 4 * (v1212 + v1522) + 4 * ((v1222 & 7) != 0);
      if (*v1221 > v1228)
        v1228 = *v1221;
    }
    *v1221 = v1228;
    goto LABEL_1112;
  }
  if ((_DWORD)v21)
  {
    v1213 = (signed int *)(v1175 + 8 * v1211);
    v1214 = v1171 + 36 * *((char *)v15 + 25);
    v1215 = *(int *)(v1214 + 1432) + *(int *)(v1214 + 1448) * (uint64_t)(int)(4 * (v1212 + v1522) - 4);
    v1216 = (const float *)(v1214 + 1444);
    v1217 = *v1213;
    if (v1177 <= v1179)
      v1218 = v1179;
    else
      v1218 = 4 * v21;
    v1219 = (v1218 - 1) / v1179;
    if (v1219 >= 0xB)
    {
      v1220 = 0;
      v1347 = v1174 + 56 * v1173 + 8 * v1211 + 4;
      v1349 = (unint64_t)v1213 < v1171 + 36 * *((char *)v15 + 25) + 1448 && (unint64_t)v1216 < v1347;
      if ((unint64_t)v18 < v1347 && v1213 < (signed int *)v1520)
        goto LABEL_1096;
      if (v1349)
        goto LABEL_1096;
      v1220 = ((v1219 + 1) & 0xFFFFFFF8) * v1179;
      v1351 = vdupq_n_s32(v1217);
      v1352 = vdupq_n_s32(4 * v1179);
      v1353 = vdupq_n_s64(v1215);
      v1354 = vmulq_s32(vdupq_n_s32(v1179), (int32x4_t)xmmword_196889B70);
      v1355 = (int32x4_t)vld1q_dup_f32((const float *)v18);
      v1356 = vshlq_n_s32(v1355, 2uLL);
      v1357 = vld1_dup_f32(v1216);
      v1358.i64[0] = 0x800000008;
      v1358.i64[1] = 0x800000008;
      v1359 = (v1219 + 1) & 0xFFFFFFF8;
      v1360 = v1351;
      do
      {
        v1361 = vaddq_s32(v1354, v1352);
        v1362 = (int64x2_t)vaddq_s32(v1356, (int32x4_t)(*(_OWORD *)&v1354 | __PAIR128__(0x400000004, 0x400000004)));
        v1354 = vaddq_s32(v1361, v1352);
        v1363 = (int64x2_t)vaddq_s32(v1356, (int32x4_t)(*(_OWORD *)&v1361 | __PAIR128__(0x400000004, 0x400000004)));
        v1364 = v1362.i32[1];
        v1365.i64[0] = v1362.i32[0] * (uint64_t)v1357.i32[0];
        v1362.i64[0] = v1362.i32[2] * (uint64_t)v1357.i32[0];
        v1365.i64[1] = v1364 * (uint64_t)v1357.i32[1];
        v1362.i64[1] = v1362.i32[3] * (uint64_t)v1357.i32[1];
        v1366.i64[0] = v1363.i32[0] * (uint64_t)v1357.i32[0];
        v1366.i64[1] = v1363.i32[1] * (uint64_t)v1357.i32[1];
        v1363.i64[0] = v1363.i32[2] * (uint64_t)v1357.i32[0];
        v1363.i64[1] = v1363.i32[3] * (uint64_t)v1357.i32[1];
        v1351 = vmaxq_s32(v1351, vaddq_s32(vshrn_high_n_s64(vshrn_n_s64(vaddq_s64(v1353, v1365), 0x10uLL), vaddq_s64(v1353, v1362), 0x10uLL), v1358));
        v1360 = vmaxq_s32(v1360, vaddq_s32(vshrn_high_n_s64(vshrn_n_s64(vaddq_s64(v1353, v1366), 0x10uLL), vaddq_s64(v1353, v1363), 0x10uLL), v1358));
        v1359 -= 8;
      }
      while (v1359);
      v1367 = vmaxvq_s32(vmaxq_s32(v1351, v1360));
      *v1213 = v1367;
      v1217 = v1367;
      if (v1219 + 1 != ((v1219 + 1) & 0xFFFFFFF8))
        goto LABEL_1096;
    }
    else
    {
      v1220 = 0;
      do
      {
LABEL_1096:
        if (v1217 <= (int)(((v1215 + ((v1220 | 4) + 4 * (int)*v18) * *(int *)v1216) >> 16) + 8))
          v1217 = ((v1215 + ((v1220 | 4) + 4 * (int)*v18) * *(int *)v1216) >> 16) + 8;
        *v1213 = v1217;
        v1220 += v1179;
      }
      while (v1220 < v1177);
    }
  }
LABEL_1112:
  if ((v838 & 1) == 0)
    return 0;
  if (v1514 >= v1513)
    v1229 = v1513;
  else
    v1229 = v1514;
  v1230 = 4u >> v1495;
  v1231 = (4u >> v1495) * v1522 - 1;
  v1232 = v1507 != 1;
  v1233 = 16 * (4u >> v1495);
  if (v1507 == 1)
    v1234 = 4;
  else
    v1234 = 3;
  v1235 = 0xFu >> v1232;
  v1236 = *((char *)v15 + 24);
  if (*((_BYTE *)v15 + 21) != 6 || v1229 <= 1)
  {
    v1237 = *v1520;
    goto LABEL_1136;
  }
  v1237 = *v1520;
  if (!*(_BYTE *)(v1526 + v1236 + 2920))
  {
LABEL_1136:
    v1254 = (int *)(v1175 + 8 * v1236 + 4);
    v1255 = *((__int16 *)v15 + 4);
    v1256 = v1526 + 16 * v1236;
    v1257 = *(_DWORD *)(v1256 + 3000);
    if (v1257)
    {
      v1240 = (const float *)v18;
      v1258 = 8 * v1257 - 0x20000 + v1257 * (uint64_t)(int)((v1255 << v1232) + v1237 * v1233);
      v1259 = v1258 < 0;
      if (v1258 < 0)
        v1258 = -v1258;
      v1260 = (unint64_t)(v1258 + 128) >> 8;
      if (v1259)
        LODWORD(v1260) = -(int)v1260;
      v1261 = (((int)v1260 + *(_DWORD *)(v1256 + 3004) * v1231 + 32) >> 10) + 5;
      v1262 = *v1254;
      if (*v1254 <= v1261)
        v1262 = v1261;
    }
    else
    {
      v1240 = (const float *)v18;
      if (*v1254 <= (int)((v1255 >> v1234) + (v1237 + v1522) * v1230 + 4 * ((v1235 & v1255) != 0)))
        v1262 = (v1255 >> v1234) + (v1237 + v1522) * v1230 + 4 * ((v1235 & v1255) != 0);
      else
        v1262 = *v1254;
    }
    *v1254 = v1262;
    goto LABEL_1168;
  }
  v1238 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 2056);
  v1239 = v1238 != 3;
  v1240 = (const float *)v18;
  if ((_DWORD)v21)
  {
    v1494 = (const float *)v18;
    v1241 = v1175 + 8 * v1236;
    v1242 = (4u >> v1239) * v21;
    v1243 = *(int *)(v1171 + 36 * *((char *)v15 + 24) + 1432)
          + *(int *)(v1171 + 36 * *((char *)v15 + 24) + 1448)
          * (uint64_t)(int)((((4u >> (v1238 == 1)) * (_DWORD)v1522 - 4) << (v1238 == 1)) + 4 * v1237);
    v1244 = v1238 == 1;
    v1245 = (const float *)(v1171 + 36 * *((char *)v15 + 24) + 1444);
    v1248 = *(_DWORD *)(v1241 + 4);
    v1246 = (int *)(v1241 + 4);
    v1247 = v1248;
    if (v1242 <= 16)
      v1249 = 16;
    else
      v1249 = (4u >> v1239) * v21;
    v1250 = v1249 - 8;
    if (v1242 <= v1250)
      v1251 = v1250;
    else
      v1251 = (4u >> v1239) * v21;
    v1252 = (v1251 - 1) / v1250;
    if (v1252 >= 7)
    {
      v1253 = 0;
      v1378 = 56 * v1173 + 8 * v1236 + v1174 + 8;
      v1380 = (unint64_t)v1246 < v1171 + 36 * *((char *)v15 + 24) + 1448 && (unint64_t)v1245 < v1378;
      if ((unint64_t)v1494 < v1378 && v1246 < (int *)v1520)
      {
        v1240 = v1494;
        goto LABEL_1131;
      }
      v1240 = v1494;
      if (v1380)
        goto LABEL_1131;
      v1253 = ((v1252 + 1) & 0xFFFFFFF8) * v1250;
      v1382 = vdupq_n_s32(v1247);
      v1383 = vmulq_s32(vdupq_n_s32(v1250), (int32x4_t)xmmword_196889B70);
      v1384 = vdupq_n_s32(4 * v1250);
      v1385 = (uint32x4_t)vdupq_n_s32(v1239);
      v1386 = vdupq_n_s64(v1243);
      v1387 = (int32x4_t)vld1q_dup_f32(v1494);
      v1388 = vshlq_n_s32(v1387, 2uLL);
      v1389 = vld1_dup_f32(v1245);
      v1390 = vnegq_s64(vdupq_n_s64(v1244));
      v1391.i64[0] = 0x800000008;
      v1391.i64[1] = 0x800000008;
      v1392 = (v1252 + 1) & 0xFFFFFFF8;
      v1393 = v1382;
      do
      {
        v1394 = vaddq_s32(v1383, v1384);
        v1395 = vaddq_s32(v1388, (int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&v1383 | __PAIR128__(0x400000004, 0x400000004)), v1385));
        v1396 = (int64x2_t)vaddq_s32(v1388, (int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&v1394 | __PAIR128__(0x400000004, 0x400000004)), v1385));
        v1397.i64[0] = v1395.i32[2] * (uint64_t)v1389.i32[0];
        v1398.i64[0] = v1395.i32[0] * (uint64_t)v1389.i32[0];
        v1397.i64[1] = v1395.i32[3] * (uint64_t)v1389.i32[1];
        v1399 = v1396.i32[0];
        v1400 = v1396.i32[1];
        v1398.i64[1] = v1395.i32[1] * (uint64_t)v1389.i32[1];
        v1396.i64[0] = v1396.i32[2] * (uint64_t)v1389.i32[0];
        v1396.i64[1] = v1396.i32[3] * (uint64_t)v1389.i32[1];
        v1401.i64[0] = v1399 * (uint64_t)v1389.i32[0];
        v1401.i64[1] = v1400 * (uint64_t)v1389.i32[1];
        v1383 = vaddq_s32(v1394, v1384);
        v1382 = vmaxq_s32(v1382, vaddq_s32(vshrn_high_n_s64(vshrn_n_s64(vshlq_s64(vaddq_s64(v1386, v1398), v1390), 0x10uLL), vshlq_s64(vaddq_s64(v1386, v1397), v1390), 0x10uLL), v1391));
        v1393 = vmaxq_s32(v1393, vaddq_s32(vshrn_high_n_s64(vshrn_n_s64(vshlq_s64(vaddq_s64(v1386, v1401), v1390), 0x10uLL), vshlq_s64(vaddq_s64(v1386, v1396), v1390), 0x10uLL), v1391));
        v1392 -= 8;
      }
      while (v1392);
      v1402 = vmaxvq_s32(vmaxq_s32(v1382, v1393));
      *v1246 = v1402;
      v1247 = v1402;
      v1240 = v1494;
      if (v1252 + 1 != ((v1252 + 1) & 0xFFFFFFF8))
        goto LABEL_1131;
    }
    else
    {
      v1253 = 0;
      v1240 = v1494;
      do
      {
LABEL_1131:
        if (v1247 <= (int)(((unint64_t)((uint64_t)(v1243
                                                        + (4 * *(int *)v1240 + (int)((v1253 | 4) << v1239))
                                                        * *(int *)v1245) >> v1244) >> 16)
                          + 8))
          v1247 = ((unint64_t)((uint64_t)(v1243
                                              + (4 * *(int *)v1240 + (int)((v1253 | 4) << v1239)) * *(int *)v1245) >> v1244) >> 16)
                + 8;
        *v1246 = v1247;
        v1253 += v1250;
      }
      while (v1253 < v1242);
    }
  }
LABEL_1168:
  v1271 = *((char *)v15 + 25);
  if (*((_BYTE *)v15 + 21) != 6 || v1229 <= 1)
  {
    v1272 = *v1520;
    goto LABEL_1185;
  }
  v1272 = *v1520;
  if (!*(_BYTE *)(v1526 + v1271 + 2920))
  {
LABEL_1185:
    v1286 = (int *)(v1175 + 8 * v1271 + 4);
    v1287 = *((__int16 *)v15 + 6);
    v1288 = v1526 + 16 * v1271;
    v1289 = *(_DWORD *)(v1288 + 3000);
    if (v1289)
    {
      v1290 = 8 * v1289 - 0x20000 + v1289 * (uint64_t)(int)((v1287 << v1232) + v1272 * v1233);
      v1291 = v1290 < 0;
      if (v1290 < 0)
        v1290 = -v1290;
      v1292 = (unint64_t)(v1290 + 128) >> 8;
      if (v1291)
        LODWORD(v1292) = -(int)v1292;
      v1293 = (((int)v1292 + *(_DWORD *)(v1288 + 3004) * v1231 + 32) >> 10) + 5;
      if (*v1286 > v1293)
        v1293 = *v1286;
    }
    else
    {
      v1293 = (v1287 >> v1234) + (v1272 + v1522) * v1230 + 4 * ((v1235 & v1287) != 0);
      if (*v1286 > v1293)
        v1293 = *v1286;
    }
    result = 0;
    *v1286 = v1293;
    return result;
  }
  v1273 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 2056);
  v1274 = v1273 != 3;
  if (!(_DWORD)v21)
    return 0;
  v1275 = (signed int *)(v1175 + 8 * v1271 + 4);
  v1276 = (4u >> v1274) * v21;
  v1277 = *(int *)(v1171 + 36 * *((char *)v15 + 25) + 1432)
        + *(int *)(v1171 + 36 * *((char *)v15 + 25) + 1448)
        * (uint64_t)(int)((((4u >> (v1273 == 1)) * (_DWORD)v1522 - 4) << (v1273 == 1)) + 4 * v1272);
  v1278 = v1273 == 1;
  v1279 = (const float *)(v1171 + 36 * *((char *)v15 + 25) + 1444);
  v1280 = *v1275;
  if (v1276 <= 16)
    v1281 = 16;
  else
    v1281 = (4u >> v1274) * v21;
  v1282 = v1281 - 8;
  if (v1276 <= (v1281 - 8))
    v1283 = v1281 - 8;
  else
    v1283 = (4u >> v1274) * v21;
  v1284 = (v1283 - 1) / v1282;
  if (v1284 >= 7)
  {
    v1285 = 0;
    v1403 = 56 * v1176 + 8 * v1271 + v1174 + 8;
    v1405 = (unint64_t)v1275 < v1171 + 36 * *((char *)v15 + 25) + 1448 && (unint64_t)v1279 < v1403;
    if (((unint64_t)v1240 >= v1403 || v1275 >= (signed int *)v1520) && !v1405)
    {
      v1285 = ((v1284 + 1) & 0xFFFFFFF8) * v1282;
      v1407 = vdupq_n_s32(v1280);
      v1408 = vmulq_s32(vdupq_n_s32(v1282), (int32x4_t)xmmword_196889B70);
      v1409 = vdupq_n_s32(4 * v1282);
      v1410 = (uint32x4_t)vdupq_n_s32(v1274);
      v1411 = vdupq_n_s64(v1277);
      v1412 = (int32x4_t)vld1q_dup_f32(v1240);
      v1413 = vshlq_n_s32(v1412, 2uLL);
      v1414 = vld1_dup_f32(v1279);
      v1415 = vnegq_s64(vdupq_n_s64(v1278));
      v1416.i64[0] = 0x800000008;
      v1416.i64[1] = 0x800000008;
      v1417 = (v1284 + 1) & 0xFFFFFFF8;
      v1418 = v1407;
      do
      {
        v1419 = vaddq_s32(v1408, v1409);
        v1420 = vaddq_s32(v1413, (int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&v1408 | __PAIR128__(0x400000004, 0x400000004)), v1410));
        v1421 = (int64x2_t)vaddq_s32(v1413, (int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&v1419 | __PAIR128__(0x400000004, 0x400000004)), v1410));
        v1422.i64[0] = v1420.i32[2] * (uint64_t)v1414.i32[0];
        v1423.i64[0] = v1420.i32[0] * (uint64_t)v1414.i32[0];
        v1422.i64[1] = v1420.i32[3] * (uint64_t)v1414.i32[1];
        v1424 = v1421.i32[0];
        v1425 = v1421.i32[1];
        v1423.i64[1] = v1420.i32[1] * (uint64_t)v1414.i32[1];
        v1421.i64[0] = v1421.i32[2] * (uint64_t)v1414.i32[0];
        v1421.i64[1] = v1421.i32[3] * (uint64_t)v1414.i32[1];
        v1426.i64[0] = v1424 * (uint64_t)v1414.i32[0];
        v1426.i64[1] = v1425 * (uint64_t)v1414.i32[1];
        v1408 = vaddq_s32(v1419, v1409);
        v1407 = vmaxq_s32(v1407, vaddq_s32(vshrn_high_n_s64(vshrn_n_s64(vshlq_s64(vaddq_s64(v1411, v1423), v1415), 0x10uLL), vshlq_s64(vaddq_s64(v1411, v1422), v1415), 0x10uLL), v1416));
        v1418 = vmaxq_s32(v1418, vaddq_s32(vshrn_high_n_s64(vshrn_n_s64(vshlq_s64(vaddq_s64(v1411, v1426), v1415), 0x10uLL), vshlq_s64(vaddq_s64(v1411, v1421), v1415), 0x10uLL), v1416));
        v1417 -= 8;
      }
      while (v1417);
      v1427 = vmaxvq_s32(vmaxq_s32(v1407, v1418));
      *v1275 = v1427;
      v1280 = v1427;
      if (v1284 + 1 == ((v1284 + 1) & 0xFFFFFFF8))
        return 0;
    }
  }
  else
  {
    v1285 = 0;
  }
  do
  {
    result = 0;
    if (v1280 <= (int)(((unint64_t)((uint64_t)(v1277
                                                    + (4 * *(int *)v1240 + (int)((v1285 | 4) << v1274))
                                                    * *(int *)v1279) >> v1278) >> 16)
                      + 8))
      v1280 = ((unint64_t)((uint64_t)(v1277 + (4 * *(int *)v1240 + (int)((v1285 | 4) << v1274)) * *(int *)v1279) >> v1278) >> 16)
            + 8;
    *v1275 = v1280;
    v1285 += v1282;
  }
  while (v1285 < v1276);
  return result;
}

