_QWORD *WebCore::ResourceHandleClient::ResourceHandleClient(_QWORD *this)
{
  *this = off_1E341DBC8;
  return this;
}

uint64_t WebCore::ResourceHandleClient::didReceiveBuffer(WebCore::ResourceHandleClient *this, WebCore::ResourceHandle *a2, const WebCore::FragmentedSharedBuffer *a3, int a4)
{
  _QWORD *v6;
  _QWORD *v8;
  int v9;
  WebCore::ResourceHandle *v10;

  v10 = a2;
  v9 = a4;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E341DD78;
  v6[1] = this;
  v6[2] = &v10;
  v6[3] = &v9;
  v8 = v6;
  WebCore::FragmentedSharedBuffer::forEachSegmentAsSharedBuffer((uint64_t)a3, &v8);
  return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
}

void WebCore::ResourceRequestBase::isolatedCopy(WebCore::ResourceRequestBase *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v9 = 0;
  WTF::URL::invalidate((WTF::URL *)&v9);
  v4 = v9;
  if (v9)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)a2 = v4;
  *(_OWORD *)(a2 + 8) = v10;
  *(_OWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 40) = 0;
  WTF::URL::invalidate((WTF::URL *)(a2 + 40));
  *(_QWORD *)(a2 + 80) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a2 + 88) = v12;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_DWORD *)(a2 + 144) = 0x10000;
  v6 = *(_BYTE *)(a2 + 148) & 0x80 | 4;
  *(_BYTE *)(a2 + 148) = v6;
  *(_QWORD *)(a2 + 152) = 0;
  v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v7 += 2;
    v6 = *(_BYTE *)(a2 + 148);
  }
  *(_QWORD *)(a2 + 160) = v7;
  *(_QWORD *)(a2 + 168) = 0;
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 180) = 0;
  *(_BYTE *)(a2 + 184) = *(_BYTE *)(a2 + 184) & 0xE0 | 5;
  *(_BYTE *)(a2 + 148) = v6 | 2;
  v8 = v9;
  v9 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  *(_QWORD *)(a2 + 192) = 0;
  WebCore::ResourceRequestBase::setAsIsolatedCopy((WebCore::ResourceRequestBase *)a2, this);
}

void WebCore::ResourceRequestBase::setAsIsolatedCopy(WebCore::ResourceRequestBase *this, const WebCore::ResourceRequest *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  char v8;
  double v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  char v30;
  int v31;
  int v32;
  char v33;
  char v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  WebCore::FormData *v45;
  char v46;
  int v47;
  char v48;
  int v49;
  int v50;
  int v51;
  char v52;
  bmalloc::api *v53;
  void *v54;
  char v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  __int128 v60;
  __int128 v61;

  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  WTF::URL::isolatedCopy();
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v5 = v59;
  if (v59)
    *(_DWORD *)v59 += 2;
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v4);
      v5 = v59;
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
  *(_OWORD *)((char *)this + 8) = v60;
  *(_OWORD *)((char *)this + 24) = v61;
  *((_BYTE *)this + 148) &= ~0x20u;
  *((_BYTE *)this + 184) &= ~2u;
  v59 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  v7 = *((unsigned __int8 *)a2 + 144);
  v8 = *((_BYTE *)this + 184);
  if ((v8 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v8 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v8;
  }
  if (*((unsigned __int8 *)this + 144) != v7)
  {
    *((_BYTE *)this + 144) = v7;
    v8 &= ~2u;
    *((_BYTE *)this + 184) = v8;
  }
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
    v8 = *((_BYTE *)this + 184);
  }
  v9 = *((double *)a2 + 10);
  if ((v8 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v8 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v8;
  }
  if (*((double *)this + 10) != v9)
  {
    *((double *)this + 10) = v9;
    *((_BYTE *)this + 184) = v8 & 0xFD;
  }
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  WTF::URL::isolatedCopy();
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v12 = WTF::equal(*((WTF **)this + 5), v59, v10);
  v13 = v59;
  if ((v12 & 1) == 0)
  {
    if (v59)
      *(_DWORD *)v59 += 2;
    v14 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v11);
        v13 = v59;
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
    v15 = v61;
    *((_OWORD *)this + 3) = v60;
    *((_OWORD *)this + 4) = v15;
    *((_BYTE *)this + 184) &= ~2u;
  }
  v59 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  WTF::String::isolatedCopy();
  WebCore::ResourceRequestBase::setHTTPMethod((WTF **)this, &v59);
  v17 = v59;
  v59 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  v18 = *((unsigned __int8 *)a2 + 146);
  v19 = *((_BYTE *)this + 184);
  if ((v19 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v19 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v19;
  }
  if (*((unsigned __int8 *)this + 146) != v18)
  {
    *((_BYTE *)this + 146) = v18;
    *((_BYTE *)this + 184) = v19 & 0xFD;
  }
  *((_BYTE *)this + 147) = *((_BYTE *)a2 + 147);
  v20 = (WTF::StringImpl *)*((_QWORD *)a2 + 19);
  if (v20)
    *(_DWORD *)v20 += 2;
  v58 = v20;
  WTF::String::isolatedCopy();
  v22 = v59;
  if (v59)
    *(_DWORD *)v59 += 2;
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::destroy(v23, v21);
      v22 = v59;
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v59 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v24 = v58;
  v58 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  WTF::String::isolatedCopy();
  v26 = v59;
  if (v59)
    *(_DWORD *)v59 += 2;
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::destroy(v27, v25);
      v26 = v59;
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v59 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  v28 = *((_QWORD *)a2 + 22);
  if ((v28 & 0xFF00000000) != 0)
  {
    *((_DWORD *)this + 44) = v28;
    *((_BYTE *)this + 180) = 1;
  }
  v29 = *((unsigned __int8 *)a2 + 145);
  if (*((_BYTE *)a2 + 145))
  {
    if ((*((_BYTE *)a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(a2);
      *((_BYTE *)a2 + 184) |= 1u;
      v29 = *((unsigned __int8 *)a2 + 145);
    }
    v30 = *((_BYTE *)this + 184);
    if ((v30 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      v30 = *((_BYTE *)this + 184) | 1;
      *((_BYTE *)this + 184) = v30;
    }
    if (v29 == 1)
      v31 = 1;
    else
      v31 = 2;
    if (*((unsigned __int8 *)this + 145) != v31)
    {
      *((_BYTE *)this + 145) = v31;
      *((_BYTE *)this + 184) = v30 & 0xFD;
    }
  }
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  v32 = *((_BYTE *)a2 + 148) & 1;
  v33 = *((_BYTE *)this + 184);
  if ((v33 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v33 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v33;
  }
  v34 = *((_BYTE *)this + 148);
  if ((v32 != 0) != ((v34 & 1) == 0))
  {
    if ((v33 & 1) != 0)
      goto LABEL_89;
  }
  else
  {
    *((_BYTE *)this + 148) = v34 & 0xFE | v32;
    v55 = v33 & 0xFD;
    *((_BYTE *)this + 184) = v55;
    if ((v55 & 1) != 0)
      goto LABEL_89;
  }
  WebCore::ResourceRequest::doUpdateResourceRequest(this);
  *((_BYTE *)this + 184) |= 1u;
LABEL_89:
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::isolatedCopy((unsigned int *)a2 + 24, v25, (uint64_t)&v59);
  WebCore::HTTPHeaderMap::operator=((unsigned int *)this + 24, (WTF::StringImpl *)&v59);
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v59, v35);
  v36 = *((_DWORD *)a2 + 35);
  if (v36)
  {
    WTF::String::isolatedCopy();
    v57 = 0;
    v58 = 0;
    if (v36 != 1)
    {
      if (*((_DWORD *)a2 + 35) <= 1u)
        goto LABEL_149;
      WTF::String::isolatedCopy();
      v58 = v56;
      if (v36 >= 3)
      {
        if (*((_DWORD *)a2 + 35) > 2u)
        {
          WTF::String::isolatedCopy();
          v57 = 0;
          goto LABEL_97;
        }
LABEL_149:
        __break(0xC471u);
        JUMPOUT(0x196303640);
      }
    }
LABEL_97:
    WebCore::ResourceRequestBase::setResponseContentDispositionEncodingFallbackArray(this, (const WTF::String *)&v59, (const WTF::String *)&v58, (const WTF::String *)&v57);
    v38 = v57;
    v57 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v37);
      else
        *(_DWORD *)v38 -= 2;
    }
    v39 = v58;
    v58 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v37);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = v59;
    v59 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v37);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  v41 = *((_QWORD *)a2 + 21);
  if (v41)
  {
    v42 = bmalloc::api::isoAllocate();
    *(_DWORD *)v42 = 1;
    *(_BYTE *)(v42 + 64) = 0;
    *(_QWORD *)(v42 + 16) = 0;
    *(_QWORD *)(v42 + 24) = 0;
    *(_BYTE *)(v42 + 32) = 0;
    *(_QWORD *)(v42 + 8) = 0;
    *(_QWORD *)(v42 + 40) = 0;
    *(_QWORD *)(v42 + 48) = 0;
    *(_BYTE *)(v42 + 56) = 0;
    *(_BYTE *)(v42 + 32) = *(_BYTE *)(v41 + 32);
    v59 = 0;
    *(_QWORD *)&v60 = 0;
    _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore15FormDataElementELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_(&v59, (uint64_t *)(v41 + 8));
    WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v42 + 8, &v59);
    WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v43);
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    v45 = (WebCore::FormData *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v42;
    if (v45)
    {
      if (*(_DWORD *)v45 == 1)
      {
        WebCore::FormData::~FormData(v45, v44);
        bmalloc::api::isoDeallocate(v53, v54);
      }
      else
      {
        --*(_DWORD *)v45;
      }
    }
    v46 = *((_BYTE *)this + 184) & 0xF3 | 4;
    *((_BYTE *)this + 184) = v46;
  }
  else
  {
    v46 = *((_BYTE *)this + 184);
  }
  v47 = *((_BYTE *)a2 + 148) & 2;
  if ((v46 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v46 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v46;
  }
  v48 = *((_BYTE *)this + 148);
  if ((v47 != 0) == ((v48 & 2) == 0))
  {
    v48 = v48 & 0xFD | v47;
    *((_BYTE *)this + 148) = v48;
    v46 &= ~2u;
    *((_BYTE *)this + 184) = v46;
  }
  v49 = *((_BYTE *)a2 + 148) & 4;
  if ((v46 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v46 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v46;
    v48 = *((_BYTE *)this + 148);
  }
  if ((v49 != 0) == ((v48 & 4) == 0))
  {
    v48 = v48 & 0xFB | v49;
    *((_BYTE *)this + 148) = v48;
    v46 &= ~2u;
    *((_BYTE *)this + 184) = v46;
  }
  v50 = *((_BYTE *)a2 + 148) & 8;
  if ((v46 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v46 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v46;
    v48 = *((_BYTE *)this + 148);
  }
  if ((v50 != 0) == ((v48 & 8) == 0))
  {
    v48 = v48 & 0xF7 | v50;
    *((_BYTE *)this + 148) = v48;
    v46 &= ~2u;
    *((_BYTE *)this + 184) = v46;
  }
  v51 = *((_BYTE *)a2 + 148) & 0x10;
  if ((v46 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v46 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v46;
    v48 = *((_BYTE *)this + 148);
  }
  if ((v51 != 0) == ((v48 & 0x10) == 0))
  {
    v48 = v48 & 0xEF | v51;
    *((_BYTE *)this + 148) = v48;
    *((_BYTE *)this + 184) = v46 & 0xFD;
  }
  v52 = *((_BYTE *)a2 + 148);
  if (((((v48 & 0x20) == 0) ^ ((v52 & 0x20) >> 5)) & 1) == 0)
  {
    v48 = v52 & 0x20 | v48 & 0xDF;
    *((_BYTE *)this + 148) = v48;
    v52 = *((_BYTE *)a2 + 148);
  }
  *((_BYTE *)this + 148) = v52 & 0x40 | v48 & 0xBF;
}

_BYTE *WebCore::ResourceRequestBase::setCachePolicy(_BYTE *this, int a2)
{
  _BYTE *v3;
  char v4;

  v3 = this;
  v4 = this[184];
  if ((v4 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v4 = v3[184] | 1;
    v3[184] = v4;
  }
  if (v3[144] != a2)
  {
    v3[144] = a2;
    v3[184] = v4 & 0xFD;
  }
  return this;
}

WebCore::ResourceRequest *WebCore::ResourceRequestBase::setTimeoutInterval(WebCore::ResourceRequestBase *this, double a2)
{
  WebCore::ResourceRequest *result;

  result = WebCore::ResourceRequestBase::updateResourceRequest(this, 0);
  if (*((double *)this + 10) != a2)
  {
    *((double *)this + 10) = a2;
    *((_BYTE *)this + 184) &= ~2u;
  }
  return result;
}

uint64_t WebCore::ResourceRequestBase::setHTTPMethod(WTF **this, const WTF::StringImpl **a2)
{
  const WTF::StringImpl *v4;
  uint64_t result;

  WebCore::ResourceRequestBase::updateResourceRequest((WebCore::ResourceRequest *)this, 0);
  result = WTF::equal(this[11], *a2, v4);
  if ((result & 1) == 0)
  {
    result = (uint64_t)WTF::String::operator=((uint64_t *)this + 11, a2);
    *((_BYTE *)this + 184) &= ~2u;
  }
  return result;
}

_BYTE *WebCore::ResourceRequestBase::setIsTopSite(_BYTE *this, int a2)
{
  _BYTE *v3;
  char v4;
  char v5;

  v3 = this;
  v4 = this[184];
  if ((v4 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v4 = v3[184] | 1;
    v3[184] = v4;
  }
  v5 = v3[148];
  if (((((v5 & 1) == 0) ^ a2) & 1) == 0)
  {
    v3[148] = v5 & 0xFE | a2;
    v3[184] = v4 & 0xFD;
  }
  return this;
}

void WebCore::ResourceRequestBase::redirectAsGETIfNeeded(WTF **this, const WebCore::ResourceRequestBase *a2, const WebCore::ResourceResponse *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebCore::FormData *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned __int16 *v19;
  int v20;
  _WORD *v21;
  WTF::StringImpl *v22;
  _WORD *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unsigned __int16 *v27;
  int v28;
  _WORD *v29;
  WTF::StringImpl *v30;
  _WORD *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  _WORD *v37;
  WTF::StringImpl *v38;
  _WORD *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  bmalloc::api *v43;
  void *v44;
  unsigned __int16 *v45;
  int v46;
  _WORD *v47;
  WTF::StringImpl *v48;
  _WORD *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  unsigned __int16 *v55;
  int v56;
  _WORD *v57;
  WTF::StringImpl *v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  WTF::StringImpl *v63;

  v6 = *((_BYTE *)a2 + 184);
  if ((v6 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    v6 = *((_BYTE *)a2 + 184) | 1;
    *((_BYTE *)a2 + 184) = v6;
  }
  v7 = *((_QWORD *)a2 + 11);
  if (v7 && *(_DWORD *)(v7 + 4) == 3)
  {
    v15 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v15 & 0xDF) != 0x47 || (*(_BYTE *)(v15 + 1) & 0xDF) != 0x45)
        goto LABEL_4;
      v16 = *(unsigned __int8 *)(v15 + 2);
    }
    else
    {
      if ((*(_WORD *)v15 & 0xFFDF) != 0x47 || (*(_WORD *)(v15 + 2) & 0xFFDF) != 0x45)
        goto LABEL_4;
      v16 = *(unsigned __int16 *)(v15 + 4);
    }
    if ((v16 & 0xFFFFFFDF) == 0x54)
      return;
  }
LABEL_4:
  if ((v6 & 1) != 0)
  {
    if (!v7)
      goto LABEL_6;
  }
  else
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
    v7 = *((_QWORD *)a2 + 11);
    if (!v7)
      goto LABEL_6;
  }
  if (*(_DWORD *)(v7 + 4) != 4)
    goto LABEL_6;
  v61 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v61 & 0xDF) != 0x48 || (*(_BYTE *)(v61 + 1) & 0xDF) != 0x45 || (*(_BYTE *)(v61 + 2) & 0xDF) != 0x41)
      goto LABEL_6;
    v62 = *(unsigned __int8 *)(v61 + 3);
  }
  else
  {
    if ((*(_WORD *)v61 & 0xFFDF) != 0x48
      || (*(_WORD *)(v61 + 2) & 0xFFDF) != 0x45
      || (*(_WORD *)(v61 + 4) & 0xFFDF) != 0x41)
    {
      goto LABEL_6;
    }
    v62 = *(unsigned __int16 *)(v61 + 6);
  }
  if ((v62 & 0xFFFFFFDF) == 0x44)
    return;
LABEL_6:
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1);
  if (*((_WORD *)a3 + 68) == 301
    || (WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1), *((_WORD *)a3 + 68) == 302))
  {
    if ((*((_BYTE *)a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(a2);
      *((_BYTE *)a2 + 184) |= 1u;
    }
    v8 = *((_QWORD *)a2 + 11);
    if (v8 && *(_DWORD *)(v8 + 4) == 4)
    {
      v17 = *(_QWORD *)(v8 + 8);
      if ((*(_BYTE *)(v8 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v17 & 0xDF) != 0x50
          || (*(_BYTE *)(v17 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v17 + 2) & 0xDF) != 0x53)
        {
          return;
        }
        v18 = *(unsigned __int8 *)(v17 + 3);
      }
      else
      {
        if ((*(_WORD *)v17 & 0xFFDF) != 0x50
          || (*(_WORD *)(v17 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v17 + 4) & 0xFFDF) != 0x53)
        {
          return;
        }
        v18 = *(unsigned __int16 *)(v17 + 6);
      }
      if ((v18 & 0xFFFFFFDF) == 0x54)
      {
LABEL_13:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::ResourceRequestBase::setHTTPMethod(this, &v63);
        v10 = v63;
        v63 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v9);
          else
            *(_DWORD *)v10 -= 2;
        }
        if (((_BYTE)this[23] & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
          *((_BYTE *)this + 184) |= 1u;
        }
        v11 = this[21];
        this[21] = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 1)
          {
            WebCore::FormData::~FormData(v11, v9);
            bmalloc::api::isoDeallocate(v43, v44);
          }
          else
          {
            --*(_DWORD *)v11;
          }
        }
        *((_BYTE *)this + 184) = (_BYTE)this[23] & 0xF3 | 4;
        v12 = *((unsigned int *)this + 27);
        if ((_DWORD)v12)
        {
          v13 = this[12];
          if (*(_WORD *)v13 == 21)
          {
            v14 = 0;
LABEL_42:
            v21 = (_WORD *)((char *)v13 + 16 * v14);
            v22 = (WTF::StringImpl *)*((_QWORD *)v21 + 1);
            *((_QWORD *)v21 + 1) = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
              {
                WTF::StringImpl::destroy(v22, v9);
                v12 = *((unsigned int *)this + 27);
              }
              else
              {
                *(_DWORD *)v22 -= 2;
              }
            }
            v23 = v21 + 8;
            v24 = (uint64_t)this[12] + 16 * v12;
            while (v23 != (_WORD *)v24)
            {
              *(v23 - 8) = *v23;
              *((_QWORD *)v23 - 1) = *((_QWORD *)v23 + 1);
              *((_QWORD *)v23 + 1) = 0;
              v23 += 8;
            }
            v12 = (v12 - 1);
            *((_DWORD *)this + 27) = v12;
          }
          else
          {
            v14 = 0;
            v19 = (unsigned __int16 *)((char *)v13 + 16);
            while (v12 - 1 != v14)
            {
              v20 = *v19;
              v19 += 8;
              ++v14;
              if (v20 == 21)
                goto LABEL_42;
            }
          }
          if ((_DWORD)v12)
          {
            v25 = this[12];
            if (*(_WORD *)v25 == 20)
            {
              v26 = 0;
LABEL_55:
              v29 = (_WORD *)((char *)v25 + 16 * v26);
              v30 = (WTF::StringImpl *)*((_QWORD *)v29 + 1);
              *((_QWORD *)v29 + 1) = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                {
                  WTF::StringImpl::destroy(v30, v9);
                  v12 = *((unsigned int *)this + 27);
                }
                else
                {
                  *(_DWORD *)v30 -= 2;
                }
              }
              v31 = v29 + 8;
              v32 = (uint64_t)this[12] + 16 * v12;
              while (v31 != (_WORD *)v32)
              {
                *(v31 - 8) = *v31;
                *((_QWORD *)v31 - 1) = *((_QWORD *)v31 + 1);
                *((_QWORD *)v31 + 1) = 0;
                v31 += 8;
              }
              v12 = (v12 - 1);
              *((_DWORD *)this + 27) = v12;
            }
            else
            {
              v26 = 0;
              v27 = (unsigned __int16 *)((char *)v25 + 16);
              while (v12 - 1 != v26)
              {
                v28 = *v27;
                v27 += 8;
                ++v26;
                if (v28 == 20)
                  goto LABEL_55;
              }
            }
            if ((_DWORD)v12)
            {
              v33 = this[12];
              if (*(_WORD *)v33 == 19)
              {
                v34 = 0;
LABEL_68:
                v37 = (_WORD *)((char *)v33 + 16 * v34);
                v38 = (WTF::StringImpl *)*((_QWORD *)v37 + 1);
                *((_QWORD *)v37 + 1) = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                  {
                    WTF::StringImpl::destroy(v38, v9);
                    v12 = *((unsigned int *)this + 27);
                  }
                  else
                  {
                    *(_DWORD *)v38 -= 2;
                  }
                }
                v39 = v37 + 8;
                v40 = (uint64_t)this[12] + 16 * v12;
                while (v39 != (_WORD *)v40)
                {
                  *(v39 - 8) = *v39;
                  *((_QWORD *)v39 - 1) = *((_QWORD *)v39 + 1);
                  *((_QWORD *)v39 + 1) = 0;
                  v39 += 8;
                }
                v12 = (v12 - 1);
                *((_DWORD *)this + 27) = v12;
              }
              else
              {
                v34 = 0;
                v35 = (unsigned __int16 *)((char *)v33 + 16);
                while (v12 - 1 != v34)
                {
                  v36 = *v35;
                  v35 += 8;
                  ++v34;
                  if (v36 == 19)
                    goto LABEL_68;
                }
              }
              if ((_DWORD)v12)
              {
                v41 = this[12];
                if (*(_WORD *)v41 == 22)
                {
                  v42 = 0;
LABEL_82:
                  v47 = (_WORD *)((char *)v41 + 16 * v42);
                  v48 = (WTF::StringImpl *)*((_QWORD *)v47 + 1);
                  *((_QWORD *)v47 + 1) = 0;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 2)
                    {
                      WTF::StringImpl::destroy(v48, v9);
                      v12 = *((unsigned int *)this + 27);
                    }
                    else
                    {
                      *(_DWORD *)v48 -= 2;
                    }
                  }
                  v49 = v47 + 8;
                  v50 = (uint64_t)this[12] + 16 * v12;
                  while (v49 != (_WORD *)v50)
                  {
                    *(v49 - 8) = *v49;
                    *((_QWORD *)v49 - 1) = *((_QWORD *)v49 + 1);
                    *((_QWORD *)v49 + 1) = 0;
                    v49 += 8;
                  }
                  LODWORD(v12) = v12 - 1;
                  *((_DWORD *)this + 27) = v12;
                }
                else
                {
                  v42 = 0;
                  v45 = (unsigned __int16 *)((char *)v41 + 16);
                  while (v12 - 1 != v42)
                  {
                    v46 = *v45;
                    v45 += 8;
                    ++v42;
                    if (v46 == 22)
                      goto LABEL_82;
                  }
                }
              }
            }
          }
        }
        v51 = *((_BYTE *)this + 184);
        if ((v51 & 1) != 0)
        {
          if ((_DWORD)v12)
            goto LABEL_91;
        }
        else
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
          v51 = *((_BYTE *)this + 184) | 1;
          *((_BYTE *)this + 184) = v51;
          LODWORD(v12) = *((_DWORD *)this + 27);
          if ((_DWORD)v12)
          {
LABEL_91:
            v52 = v12;
            v53 = this[12];
            if (*(_WORD *)v53 == 26)
            {
              v54 = 0;
LABEL_96:
              v57 = (_WORD *)((char *)v53 + 16 * v54);
              v58 = (WTF::StringImpl *)*((_QWORD *)v57 + 1);
              *((_QWORD *)v57 + 1) = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                {
                  WTF::StringImpl::destroy(v58, v9);
                  v52 = *((unsigned int *)this + 27);
                  LODWORD(v12) = *((_DWORD *)this + 27);
                }
                else
                {
                  *(_DWORD *)v58 -= 2;
                }
              }
              v59 = v57 + 8;
              v60 = (uint64_t)this[12] + 16 * v52;
              while (v59 != (_WORD *)v60)
              {
                *(v59 - 8) = *v59;
                *((_QWORD *)v59 - 1) = *((_QWORD *)v59 + 1);
                *((_QWORD *)v59 + 1) = 0;
                v59 += 8;
              }
              *((_DWORD *)this + 27) = v12 - 1;
              v51 = *((_BYTE *)this + 184);
            }
            else
            {
              v54 = 0;
              v55 = (unsigned __int16 *)((char *)v53 + 16);
              while (v12 - 1 != v54)
              {
                v56 = *v55;
                v55 += 8;
                ++v54;
                if (v56 == 26)
                  goto LABEL_96;
              }
            }
          }
        }
        *((_BYTE *)this + 184) = v51 & 0xFD;
      }
    }
  }
  else
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1);
    if (*((_WORD *)a3 + 68) == 303)
      goto LABEL_13;
  }
}

_BYTE *WebCore::ResourceRequestBase::clearHTTPContentType(_BYTE *this, WTF::StringImpl *a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;

  v2 = this;
  v3 = this[184];
  if ((v3 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v3 = v2[184] | 1;
    v2[184] = v3;
  }
  v4 = *((unsigned int *)v2 + 27);
  if ((_DWORD)v4)
  {
    v5 = (_WORD *)*((_QWORD *)v2 + 12);
    if (*v5 == 26)
    {
      v6 = 0;
LABEL_9:
      v9 = &v5[8 * v6];
      this = (_BYTE *)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          v4 = *((unsigned int *)v2 + 27);
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      v10 = v9 + 8;
      v11 = *((_QWORD *)v2 + 12) + 16 * v4;
      while (v10 != (_WORD *)v11)
      {
        *(v10 - 8) = *v10;
        *((_QWORD *)v10 - 1) = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        v10 += 8;
      }
      *((_DWORD *)v2 + 27) = v4 - 1;
      v3 = v2[184];
    }
    else
    {
      v6 = 0;
      v7 = v5 + 8;
      while (v4 - 1 != v6)
      {
        v8 = *v7;
        v7 += 8;
        ++v6;
        if (v8 == 26)
          goto LABEL_9;
      }
    }
  }
  v2[184] = v3 & 0xFD;
  return this;
}

WTF::StringImpl *WebCore::ResourceRequestBase::redirectedRequest@<X0>(WebCore::ResourceRequestBase::RequestData *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  const void *v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD **v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl **v33;
  char v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  int v38;
  uint64_t v39;
  _WORD *v40;
  uint64_t v41;
  unsigned __int16 *v42;
  int v43;
  _WORD *v44;
  WTF::StringImpl *v45;
  _WORD *v46;
  uint64_t v47;
  char v48;
  WTF::StringImpl *v49;
  char v50;
  uint64_t v51;
  _WORD *v52;
  uint64_t v53;
  unsigned __int16 *v54;
  int v55;
  _WORD *v56;
  WTF::StringImpl *v57;
  _WORD *v58;
  uint64_t v59;
  unint64_t v60;
  _WORD *v61;
  unint64_t v62;
  _BOOL4 v63;
  unsigned __int16 *v64;
  int v65;
  _WORD *v66;
  WTF::StringImpl *v67;
  _WORD *v68;
  uint64_t v69;
  uint64_t v70;
  _WORD *v71;
  uint64_t v72;
  unsigned __int16 *v73;
  int v74;
  _WORD *v75;
  WTF::StringImpl *v76;
  _WORD *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *result;
  WTF::StringImpl *v81;
  __int128 v82;
  __int128 v83;
  WTF::StringImpl *v84;

  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)a5, a1);
  v10 = (_DWORD *)*((_QWORD *)a1 + 19);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(a5 + 152) = v10;
  v11 = (_DWORD *)*((_QWORD *)a1 + 20);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(a5 + 160) = v11;
  v12 = (_DWORD *)*((_QWORD *)a1 + 21);
  if (v12)
    ++*v12;
  v13 = *((_QWORD *)a1 + 22);
  *(_QWORD *)(a5 + 168) = v12;
  *(_QWORD *)(a5 + 176) = v13;
  *(_BYTE *)(a5 + 184) = *((_BYTE *)a1 + 184);
  v14 = (const void *)*((_QWORD *)a1 + 24);
  *(_QWORD *)(a5 + 192) = v14;
  if (v14)
    CFRetain(v14);
  v15 = 1;
  WebCore::ResourceResponse::platformLazyInit(a2, 1);
  v16 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = (_DWORD **)(*(_QWORD *)(a2 + 80) + 8);
    while (*((_WORD *)v18 - 4) != 52)
    {
      ++v17;
      v18 += 2;
      if (v16 == v17)
      {
        v19 = 0;
        goto LABEL_14;
      }
    }
    if (v17 >= v16)
    {
      __break(0xC471u);
      goto LABEL_148;
    }
    v19 = (WTF::StringImpl *)*v18;
    if (*v18)
    {
      v20 = *((_DWORD *)v19 + 1);
      *(_DWORD *)v19 += 2;
      if (v20)
      {
        v84 = v19;
        v25 = v19;
        goto LABEL_37;
      }
      v15 = 0;
    }
    else
    {
LABEL_14:
      v15 = 1;
    }
  }
  else
  {
    v19 = 0;
  }
  WebCore::ResourceResponse::platformLazyInit(a2, 2);
  v22 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v22)
  {
    v23 = 0;
    v24 = (_DWORD **)(*(_QWORD *)(a2 + 80) + 8);
    while (*((_WORD *)v24 - 4) != 52)
    {
      ++v23;
      v24 += 2;
      if (v22 == v23)
        goto LABEL_24;
    }
    if (v23 >= v22)
    {
      __break(0xC471u);
      JUMPOUT(0x196304710);
    }
    v25 = (WTF::StringImpl *)*v24;
    if (*v24)
      *(_DWORD *)v25 += 2;
  }
  else
  {
LABEL_24:
    v25 = 0;
  }
  v84 = v25;
  if ((v15 & 1) == 0)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v21);
      if (!v25)
        goto LABEL_32;
      goto LABEL_37;
    }
    *(_DWORD *)v19 -= 2;
  }
  if (!v25)
    goto LABEL_32;
LABEL_37:
  if (*((_DWORD *)v25 + 1))
  {
    WebCore::ResourceResponse::platformLazyInit(a2, 1);
    MEMORY[0x19AEA52F8](&v81, a2, &v84, 0);
    if (!a4)
      goto LABEL_39;
    goto LABEL_33;
  }
LABEL_32:
  v81 = 0;
  WTF::URL::invalidate((WTF::URL *)&v81);
  if (!a4)
    goto LABEL_39;
LABEL_33:
  WTF::URL::fragmentIdentifier((WTF::URL *)&v81);
  if (!(_DWORD)v26)
  {
    WebCore::ResourceResponse::platformLazyInit(a2, 1);
    WTF::URL::fragmentIdentifier((WTF::URL *)a2);
    if ((_DWORD)v26)
    {
      WebCore::ResourceResponse::platformLazyInit(a2, 1);
      WTF::URL::fragmentIdentifier((WTF::URL *)a2);
      WTF::URL::setFragmentIdentifier();
    }
  }
LABEL_39:
  if ((*(_BYTE *)(a5 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    *(_BYTE *)(a5 + 184) |= 1u;
  }
  v27 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v28 = *(WTF::StringImpl **)a5;
  *(_QWORD *)a5 = v27;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  *(_OWORD *)(a5 + 8) = v82;
  *(_OWORD *)(a5 + 24) = v83;
  *(_BYTE *)(a5 + 148) &= ~0x20u;
  *(_BYTE *)(a5 + 184) &= ~2u;
  WebCore::ResourceRequestBase::redirectAsGETIfNeeded((WTF **)a5, a1, (const WebCore::ResourceResponse *)a2);
  v29 = *(_BYTE *)(a5 + 184);
  if (!a3)
    goto LABEL_81;
  if ((*(_BYTE *)(a5 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    *(_BYTE *)(a5 + 184) |= 1u;
  }
  v30 = WTF::URL::protocolIs();
  v29 = *(_BYTE *)(a5 + 184);
  if ((v30 & 1) != 0)
    goto LABEL_81;
  if ((*(_BYTE *)(a5 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    *(_BYTE *)(a5 + 184) |= 1u;
  }
  v31 = *(unsigned int *)(a5 + 108);
  if (!(_DWORD)v31)
    goto LABEL_56;
  v32 = 0;
  v33 = (WTF::StringImpl **)(*(_QWORD *)(a5 + 96) + 8);
  while (*((_WORD *)v33 - 4) != 60)
  {
    ++v32;
    v33 += 2;
    if (v31 == v32)
      goto LABEL_56;
  }
  if (v32 >= v31)
  {
    __break(0xC471u);
LABEL_148:
    JUMPOUT(0x196304708);
  }
  v36 = *v33;
  if (*v33)
  {
    *(_DWORD *)v36 += 2;
    v37 = WTF::protocolIs();
    v38 = v37;
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::destroy(v36, v35);
      v29 = *(_BYTE *)(a5 + 184);
      if (!v38)
        goto LABEL_81;
    }
    else
    {
      *(_DWORD *)v36 -= 2;
      v29 = *(_BYTE *)(a5 + 184);
      if ((v37 & 1) == 0)
        goto LABEL_81;
    }
    goto LABEL_62;
  }
LABEL_56:
  v34 = WTF::protocolIs();
  v29 = *(_BYTE *)(a5 + 184);
  if ((v34 & 1) == 0)
    goto LABEL_81;
LABEL_62:
  if ((v29 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    v29 = *(_BYTE *)(a5 + 184) | 1;
    *(_BYTE *)(a5 + 184) = v29;
  }
  v39 = *(unsigned int *)(a5 + 108);
  if ((_DWORD)v39)
  {
    v40 = *(_WORD **)(a5 + 96);
    if (*v40 == 60)
    {
      v41 = 0;
LABEL_73:
      v44 = &v40[8 * v41];
      v45 = (WTF::StringImpl *)*((_QWORD *)v44 + 1);
      *((_QWORD *)v44 + 1) = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
        {
          WTF::StringImpl::destroy(v45, v35);
          v39 = *(unsigned int *)(a5 + 108);
        }
        else
        {
          *(_DWORD *)v45 -= 2;
        }
      }
      v46 = v44 + 8;
      v47 = *(_QWORD *)(a5 + 96) + 16 * v39;
      while (v46 != (_WORD *)v47)
      {
        *(v46 - 8) = *v46;
        *((_QWORD *)v46 - 1) = *((_QWORD *)v46 + 1);
        *((_QWORD *)v46 + 1) = 0;
        v46 += 8;
      }
      *(_DWORD *)(a5 + 108) = v39 - 1;
      v29 = *(_BYTE *)(a5 + 184);
    }
    else
    {
      v41 = 0;
      v42 = v40 + 8;
      while (v39 - 1 != v41)
      {
        v43 = *v42;
        v42 += 8;
        ++v41;
        if (v43 == 60)
          goto LABEL_73;
      }
    }
  }
  v29 &= ~2u;
  *(_BYTE *)(a5 + 184) = v29;
LABEL_81:
  if ((v29 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    *(_BYTE *)(a5 + 184) |= 1u;
  }
  WebCore::ResourceResponse::platformLazyInit(a2, 1);
  v48 = WTF::protocolHostAndPortAreEqual();
  v50 = *(_BYTE *)(a5 + 184);
  if ((v48 & 1) == 0)
  {
    if ((*(_BYTE *)(a5 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
      v50 = *(_BYTE *)(a5 + 184) | 1;
      *(_BYTE *)(a5 + 184) = v50;
    }
    v51 = *(unsigned int *)(a5 + 108);
    if ((_DWORD)v51)
    {
      v52 = *(_WORD **)(a5 + 96);
      if (*v52 == 53)
      {
        v53 = 0;
LABEL_92:
        v56 = &v52[8 * v53];
        v57 = (WTF::StringImpl *)*((_QWORD *)v56 + 1);
        *((_QWORD *)v56 + 1) = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
          {
            WTF::StringImpl::destroy(v57, v49);
            v51 = *(unsigned int *)(a5 + 108);
          }
          else
          {
            *(_DWORD *)v57 -= 2;
          }
        }
        v58 = v56 + 8;
        v59 = *(_QWORD *)(a5 + 96) + 16 * v51;
        while (v58 != (_WORD *)v59)
        {
          *(v58 - 8) = *v58;
          *((_QWORD *)v58 - 1) = *((_QWORD *)v58 + 1);
          *((_QWORD *)v58 + 1) = 0;
          v58 += 8;
        }
        *(_DWORD *)(a5 + 108) = v51 - 1;
        v50 = *(_BYTE *)(a5 + 184);
      }
      else
      {
        v53 = 0;
        v54 = v52 + 8;
        while (v51 - 1 != v53)
        {
          v55 = *v54;
          v54 += 8;
          ++v53;
          if (v55 == 53)
            goto LABEL_92;
        }
      }
    }
    v50 &= ~2u;
    *(_BYTE *)(a5 + 184) = v50;
  }
  if ((v50 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a5);
    *(_BYTE *)(a5 + 184) |= 1u;
  }
  v60 = *(unsigned int *)(a5 + 108);
  if ((_DWORD)v60)
  {
    v61 = *(_WORD **)(a5 + 96);
    if (*v61 == 14)
    {
      v62 = 0;
      v63 = 1;
LABEL_109:
      v66 = &v61[8 * v62];
      v67 = (WTF::StringImpl *)*((_QWORD *)v66 + 1);
      *((_QWORD *)v66 + 1) = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
        {
          WTF::StringImpl::destroy(v67, v49);
          v60 = *(unsigned int *)(a5 + 108);
        }
        else
        {
          *(_DWORD *)v67 -= 2;
        }
      }
      v68 = v66 + 8;
      v69 = *(_QWORD *)(a5 + 96) + 16 * v60;
      while (v68 != (_WORD *)v69)
      {
        *(v68 - 8) = *v68;
        *((_QWORD *)v68 - 1) = *((_QWORD *)v68 + 1);
        *((_QWORD *)v68 + 1) = 0;
        v68 += 8;
      }
      LODWORD(v60) = v60 - 1;
      *(_DWORD *)(a5 + 108) = v60;
      if (v63)
        *(_BYTE *)(a5 + 184) &= ~2u;
    }
    else
    {
      v62 = 0;
      v64 = v61 + 8;
      while (v60 - 1 != v62)
      {
        v65 = *v64;
        v64 += 8;
        ++v62;
        if (v65 == 14)
        {
          v63 = v62 < v60;
          goto LABEL_109;
        }
      }
    }
    if ((_DWORD)v60)
    {
      v70 = v60;
      v71 = *(_WORD **)(a5 + 96);
      if (*v71 == 57)
      {
        v72 = 0;
LABEL_123:
        v75 = &v71[8 * v72];
        v76 = (WTF::StringImpl *)*((_QWORD *)v75 + 1);
        *((_QWORD *)v75 + 1) = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
          {
            WTF::StringImpl::destroy(v76, v49);
            v70 = *(unsigned int *)(a5 + 108);
            LODWORD(v60) = *(_DWORD *)(a5 + 108);
          }
          else
          {
            *(_DWORD *)v76 -= 2;
          }
        }
        v77 = v75 + 8;
        v78 = *(_QWORD *)(a5 + 96) + 16 * v70;
        while (v77 != (_WORD *)v78)
        {
          *(v77 - 8) = *v77;
          *((_QWORD *)v77 - 1) = *((_QWORD *)v77 + 1);
          *((_QWORD *)v77 + 1) = 0;
          v77 += 8;
        }
        *(_DWORD *)(a5 + 108) = v60 - 1;
      }
      else
      {
        v72 = 0;
        v73 = v71 + 8;
        while (v60 - 1 != v72)
        {
          v74 = *v73;
          v73 += 8;
          ++v72;
          if (v74 == 57)
            goto LABEL_123;
        }
      }
    }
  }
  v79 = v81;
  v81 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v49);
    else
      *(_DWORD *)v79 -= 2;
  }
  result = v84;
  v84 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v49);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::ResourceRequestBase::clearHTTPAuthorization(_BYTE *this, WTF::StringImpl *a2)
{
  _BYTE *v2;
  unint64_t v3;
  _WORD *v4;
  unint64_t v5;
  _BOOL4 v6;
  unsigned __int16 *v7;
  int v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;

  v2 = this;
  if ((this[184] & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v2[184] |= 1u;
  }
  v3 = *((unsigned int *)v2 + 27);
  if ((_DWORD)v3)
  {
    v4 = (_WORD *)*((_QWORD *)v2 + 12);
    if (*v4 == 14)
    {
      v5 = 0;
      v6 = 1;
LABEL_10:
      v9 = &v4[8 * v5];
      this = (_BYTE *)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          v3 = *((unsigned int *)v2 + 27);
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      v10 = v9 + 8;
      v11 = *((_QWORD *)v2 + 12) + 16 * v3;
      while (v10 != (_WORD *)v11)
      {
        *(v10 - 8) = *v10;
        *((_QWORD *)v10 - 1) = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        v10 += 8;
      }
      *((_DWORD *)v2 + 27) = v3 - 1;
      if (v6)
        v2[184] &= ~2u;
    }
    else
    {
      v5 = 0;
      v7 = v4 + 8;
      while (v3 - 1 != v5)
      {
        v8 = *v7;
        v7 += 8;
        ++v5;
        if (v8 == 14)
        {
          v6 = v5 < v3;
          goto LABEL_10;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ResourceRequestBase::httpHeaderField@<X0>(WebCore::ResourceRequest *a1@<X0>, WebCore::HTTPHeaderNamesHash *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  if ((*((_BYTE *)a1 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a1);
    *((_BYTE *)a1 + 184) |= 1u;
  }
  return WebCore::HTTPHeaderMap::get((uint64_t)a1 + 96, a2, a3, a4);
}

uint64_t WebCore::ResourceRequestBase::setHTTPHeaderField(WebCore::ResourceRequestBase *this, const WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  const WTF::StringImpl *v6;
  WebCore::HTTPHeaderNamesHash *v7;
  unint64_t v8;
  uint64_t result;
  unsigned __int16 v10;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v6 = *a2;
  if (*a2)
  {
    v7 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v6 + 1);
    v8 = *((unsigned int *)v6 + 1) | ((unint64_t)((*((_DWORD *)v6 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v10 = 0;
  if (WebCore::findHTTPHeaderName(v7, (char *)v8, &v10))
    result = (uint64_t)WebCore::HTTPHeaderMap::set((WebCore::ResourceRequestBase *)((char *)this + 96), (WTF::StringImpl *)v10, a3);
  else
    result = WebCore::HTTPHeaderMap::setUncommonHeader((WebCore::ResourceRequestBase *)((char *)this + 96), a2, (const WTF::String *)a3);
  *((_BYTE *)this + 184) &= ~2u;
  return result;
}

_BYTE *WebCore::ResourceRequestBase::httpContentType@<X0>(_BYTE *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  _DWORD **v6;
  _DWORD *v7;

  v2 = this;
  if ((this[184] & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v2[184] |= 1u;
  }
  v4 = *((unsigned int *)v2 + 27);
  if (!(_DWORD)v4)
  {
LABEL_7:
    v7 = 0;
LABEL_11:
    *a2 = v7;
    return this;
  }
  v5 = 0;
  v6 = (_DWORD **)(*((_QWORD *)v2 + 12) + 8);
  while (*((_WORD *)v6 - 4) != 26)
  {
    ++v5;
    v6 += 2;
    if (v4 == v5)
      goto LABEL_7;
  }
  if (v5 < v4)
  {
    v7 = *v6;
    if (*v6)
      *v7 += 2;
    goto LABEL_11;
  }
  __break(0xC471u);
  return this;
}

WTF::StringImpl *WebCore::ResourceRequestBase::setHTTPContentType(WebCore::ResourceRequestBase *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  result = WebCore::HTTPHeaderMap::set((WebCore::ResourceRequestBase *)((char *)this + 96), (WTF::StringImpl *)0x1A, a2);
  *((_BYTE *)this + 184) &= ~2u;
  return result;
}

_BYTE *WebCore::ResourceRequestBase::clearPurpose(_BYTE *this, WTF::StringImpl *a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;

  v2 = this;
  v3 = this[184];
  if ((v3 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v3 = v2[184] | 1;
    v2[184] = v3;
  }
  v4 = *((unsigned int *)v2 + 27);
  if ((_DWORD)v4)
  {
    v5 = (_WORD *)*((_QWORD *)v2 + 12);
    if (*v5 == 58)
    {
      v6 = 0;
LABEL_9:
      v9 = &v5[8 * v6];
      this = (_BYTE *)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          v4 = *((unsigned int *)v2 + 27);
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      v10 = v9 + 8;
      v11 = *((_QWORD *)v2 + 12) + 16 * v4;
      while (v10 != (_WORD *)v11)
      {
        *(v10 - 8) = *v10;
        *((_QWORD *)v10 - 1) = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        v10 += 8;
      }
      *((_DWORD *)v2 + 27) = v4 - 1;
      v3 = v2[184];
    }
    else
    {
      v6 = 0;
      v7 = v5 + 8;
      while (v4 - 1 != v6)
      {
        v8 = *v7;
        v7 += 8;
        ++v6;
        if (v8 == 58)
          goto LABEL_9;
      }
    }
  }
  v2[184] = v3 & 0xFD;
  return this;
}

_BYTE *WebCore::ResourceRequestBase::httpOrigin@<X0>(_BYTE *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  _DWORD **v6;
  _DWORD *v7;

  v2 = this;
  if ((this[184] & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v2[184] |= 1u;
  }
  v4 = *((unsigned int *)v2 + 27);
  if (!(_DWORD)v4)
  {
LABEL_7:
    v7 = 0;
LABEL_8:
    *a2 = v7;
    return this;
  }
  v5 = 0;
  v6 = (_DWORD **)(*((_QWORD *)v2 + 12) + 8);
  while (*((_WORD *)v6 - 4) != 53)
  {
    ++v5;
    v6 += 2;
    if (v4 == v5)
      goto LABEL_7;
  }
  if (v5 < v4)
  {
    v7 = *v6;
    if (*v6)
      *v7 += 2;
    goto LABEL_8;
  }
  __break(0xC471u);
  return this;
}

_BYTE *WebCore::ResourceRequestBase::clearHTTPAcceptEncoding(_BYTE *this, WTF::StringImpl *a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;

  v2 = this;
  v3 = this[184];
  if ((v3 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v3 = v2[184] | 1;
    v2[184] = v3;
  }
  v4 = *((unsigned int *)v2 + 27);
  if ((_DWORD)v4)
  {
    v5 = (_WORD *)*((_QWORD *)v2 + 12);
    if (*v5 == 2)
    {
      v6 = 0;
LABEL_9:
      v9 = &v5[8 * v6];
      this = (_BYTE *)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          v4 = *((unsigned int *)v2 + 27);
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      v10 = v9 + 8;
      v11 = *((_QWORD *)v2 + 12) + 16 * v4;
      while (v10 != (_WORD *)v11)
      {
        *(v10 - 8) = *v10;
        *((_QWORD *)v10 - 1) = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        v10 += 8;
      }
      *((_DWORD *)v2 + 27) = v4 - 1;
      v3 = v2[184];
    }
    else
    {
      v6 = 0;
      v7 = v5 + 8;
      while (v4 - 1 != v6)
      {
        v8 = *v7;
        v7 += 8;
        ++v6;
        if (v8 == 2)
          goto LABEL_9;
      }
    }
  }
  v2[184] = v3 & 0xFD;
  return this;
}

uint64_t WebCore::ResourceRequestBase::addHTTPHeaderFieldIfNotPresent(WebCore::ResourceRequest *this, int a2, WTF::StringImpl **a3)
{
  uint64_t result;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  result = WebCore::HTTPHeaderMap::addIfNotPresent((unsigned int *)this + 24, a2, a3);
  if ((_DWORD)result)
    *((_BYTE *)this + 184) &= ~2u;
  return result;
}

WTF::StringImpl *WebCore::ResourceRequestBase::addHTTPHeaderField(WebCore::ResourceRequest *this, int a2, uint64_t *a3)
{
  WTF::StringImpl *result;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  result = WebCore::HTTPHeaderMap::add((WebCore::ResourceRequest *)((char *)this + 96), a2, a3);
  *((_BYTE *)this + 184) &= ~2u;
  return result;
}

WTF::StringImpl *WebCore::ResourceRequestBase::addHTTPHeaderField(WebCore::ResourceRequestBase *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  WTF::StringImpl *result;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  result = WebCore::HTTPHeaderMap::add((WebCore::ResourceRequestBase *)((char *)this + 96), a2, a3);
  *((_BYTE *)this + 184) &= ~2u;
  return result;
}

_BYTE *WebCore::ResourceRequestBase::removeHTTPHeaderField(_BYTE *this, WTF::StringImpl *a2)
{
  int v2;
  _BYTE *v3;
  char v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  int v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;

  v2 = (int)a2;
  v3 = this;
  v4 = this[184];
  if ((v4 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v4 = v3[184] | 1;
    v3[184] = v4;
  }
  v5 = *((unsigned int *)v3 + 27);
  if ((_DWORD)v5)
  {
    v6 = (unsigned __int16 *)*((_QWORD *)v3 + 12);
    if (*v6 == v2)
    {
      v7 = 0;
LABEL_9:
      v10 = &v6[8 * v7];
      this = (_BYTE *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          v5 = *((unsigned int *)v3 + 27);
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      v11 = v10 + 8;
      v12 = *((_QWORD *)v3 + 12) + 16 * v5;
      while (v11 != (unsigned __int16 *)v12)
      {
        *(v11 - 8) = *v11;
        *((_QWORD *)v11 - 1) = *((_QWORD *)v11 + 1);
        *((_QWORD *)v11 + 1) = 0;
        v11 += 8;
      }
      *((_DWORD *)v3 + 27) = v5 - 1;
      v4 = v3[184];
    }
    else
    {
      v7 = 0;
      v8 = v6 + 8;
      while (v5 - 1 != v7)
      {
        v9 = *v8;
        v8 += 8;
        ++v7;
        if (v9 == v2)
          goto LABEL_9;
      }
    }
  }
  v3[184] = v4 & 0xFD;
  return this;
}

uint64_t WTF::arePointingToEqualData<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  _BOOL4 v15;
  WebCore::ResourceRequestBase *v17;
  const WebCore::ResourceRequest *v18;
  const WebCore::ResourceRequest *v19;

  if (a1 == a2)
    return 1;
  v3 = 0;
  if (!a1 || !a2)
    return v3;
  v4 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 20))
    return 0;
  v3 = 1;
  if (!(_DWORD)v4)
    return v3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 == v5)
    return v3;
  v7 = *(unsigned int *)(v5 + 40);
  v8 = v7 == 0xFFFFFFFFLL;
  LODWORD(v9) = *(_DWORD *)(v5 + 40);
  if ((_DWORD)v7 == -1)
    v7 = -1;
  v10 = *(unsigned int *)(v6 + 40);
  v11 = v10 == 0xFFFFFFFFLL ? v8 : v7 == v10;
  if (v11 != 1)
    return 0;
  v12 = 0;
  v3 = 0;
  v13 = 1;
  while (v7 != 1)
  {
    if (v7)
    {
      if ((_DWORD)v9 != 2 || (_DWORD)v10 != 2)
        goto LABEL_46;
      if ((WTF::equal(*(WTF **)(v5 + v12), *(const WTF::StringImpl **)(v6 + v12), a3) & 1) == 0)
        return v3;
    }
    else
    {
      if ((_DWORD)v9 || (_DWORD)v10)
        goto LABEL_46;
      v14 = *(unsigned int *)(v5 + v12 + 12);
      if ((_DWORD)v14 != *(_DWORD *)(v6 + v12 + 12)
        || memcmp(*(const void **)(v5 + v12), *(const void **)(v6 + v12), v14))
      {
        return v3;
      }
    }
LABEL_35:
    v3 = v13 >= v4;
    if (48 * v4 - 48 != v12)
    {
      v9 = *(unsigned int *)(v5 + v12 + 88);
      v15 = v9 == 0xFFFFFFFFLL;
      v7 = (_DWORD)v9 == -1 ? -1 : *(unsigned int *)(v5 + v12 + 88);
      v10 = *(unsigned int *)(v6 + v12 + 88);
      if (v10 != 0xFFFFFFFFLL)
        v15 = v7 == v10;
      v12 += 48;
      ++v13;
      if (v15)
        continue;
    }
    return v3;
  }
  if ((_DWORD)v9 == 1 && (_DWORD)v10 == 1)
  {
    if (!WTF::equal(*(WTF **)(v5 + v12), *(const WTF::StringImpl **)(v6 + v12), a3)
      || *(_QWORD *)(v5 + v12 + 8) != *(_QWORD *)(v6 + v12 + 8)
      || *(_QWORD *)(v5 + v12 + 16) != *(_QWORD *)(v6 + v12 + 16))
    {
      return v3;
    }
    if (*(_BYTE *)(v5 + v12 + 32) && *(_BYTE *)(v6 + v12 + 32))
    {
      if (*(double *)(v5 + v12 + 24) != *(double *)(v6 + v12 + 24))
        return v3;
    }
    else if ((*(_BYTE *)(v5 + v12 + 32) != 0) != (*(_BYTE *)(v6 + v12 + 32) != 0))
    {
      return v3;
    }
    goto LABEL_35;
  }
LABEL_46:
  v17 = (WebCore::ResourceRequestBase *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::ResourceRequestBase::equal(v17, v18, v19);
}

uint64_t WebCore::ResourceRequestBase::equal(WTF **this, const WTF::StringImpl **a2, const WebCore::ResourceRequest *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  char *v7;

  result = WebCore::equalIgnoringHeaderFields(this, a2, a3);
  if ((_DWORD)result)
  {
    if (((_BYTE)this[23] & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
      *((_BYTE *)this + 184) |= 1u;
    }
    v7 = (char *)(this + 12);
    if (((_BYTE)a2[23] & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      *((_BYTE *)a2 + 184) |= 1u;
    }
    return WebCore::operator==((uint64_t)v7, (uint64_t)(a2 + 12), v6);
  }
  return result;
}

uint64_t WebCore::operator==(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  const WTF::StringImpl **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF **v11;
  WTF *v12;
  WTF::StringImpl *v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  WTF *v26;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    return 0;
  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if (v6 != *(_DWORD *)(a2 + 28))
    return 0;
  if (!(_DWORD)v3)
  {
LABEL_20:
    if (!v6)
      return 1;
    v16 = *(uint64_t **)(v5 + 16);
    v17 = &v16[2 * v6];
    do
    {
      v18 = *v16;
      if (*v16)
      {
        v19 = *(unsigned int *)(v18 + 16);
        v20 = *(unsigned __int8 **)(v18 + 8);
        v18 = *(unsigned int *)(v18 + 4);
        v21 = (v19 >> 2) & 1;
      }
      else
      {
        v20 = 0;
        v21 = 1;
      }
      WebCore::HTTPHeaderMap::getUncommonHeader(a2, v20, v18 | (v21 << 32), &v26);
      v22 = v26;
      v15 = WTF::equal(v26, (const WTF::StringImpl *)v16[1], v23);
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v24);
        else
          *(_DWORD *)v22 -= 2;
      }
      v16 += 2;
      if (v16 == v17)
        v25 = 0;
      else
        v25 = v15;
    }
    while ((v25 & 1) != 0);
    return v15;
  }
  v7 = *(const WTF::StringImpl ***)result;
  v8 = *(_QWORD *)result + 16 * v3;
  while (1)
  {
    v9 = *(unsigned int *)(a2 + 12);
    if (!(_DWORD)v9)
      goto LABEL_9;
    v10 = 0;
    v11 = (WTF **)(*(_QWORD *)a2 + 8);
    while (*((unsigned __int16 *)v11 - 4) != *(unsigned __int16 *)v7)
    {
      ++v10;
      v11 += 2;
      if (v9 == v10)
        goto LABEL_9;
    }
    if (v10 >= v9)
      break;
    v12 = *v11;
    if (*v11)
    {
      *(_DWORD *)v12 += 2;
      result = WTF::equal(v12, v7[1], a3);
      v14 = result;
      if (*(_DWORD *)v12 == 2)
      {
        result = WTF::StringImpl::destroy(v12, v13);
        if ((v14 & 1) == 0)
          return 0;
      }
      else
      {
        *(_DWORD *)v12 -= 2;
        if ((result & 1) == 0)
          return 0;
      }
      goto LABEL_15;
    }
LABEL_9:
    result = WTF::equal(0, v7[1], a3);
    if ((result & 1) == 0)
      return 0;
LABEL_15:
    v7 += 2;
    if (v7 == (const WTF::StringImpl **)v8)
    {
      v6 = *(_DWORD *)(v5 + 28);
      goto LABEL_20;
    }
  }
  __break(0xC471u);
  return result;
}

void WebCore::ResourceRequestBase::updatePlatformRequest(WebCore::ResourceRequest *this, int a2)
{
  char v4;

  v4 = *((_BYTE *)this + 184);
  if ((v4 & 2) == 0)
  {
    WebCore::ResourceRequest::doUpdatePlatformRequest(this);
    v4 = *((_BYTE *)this + 184) | 2;
    *((_BYTE *)this + 184) = v4;
  }
  if (a2 == 1 && (v4 & 8) == 0)
  {
    WebCore::ResourceRequest::doUpdatePlatformHTTPBody(this);
    *((_BYTE *)this + 184) |= 8u;
  }
}

WTF::StringImpl *WebCore::ResourceRequestBase::upgradeToHTTPS(WebCore::ResourceRequestBase *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WebCore::ResourceResponseBase *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v2 = *(WTF::StringImpl **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v2 += 2;
  v7 = v2;
  v8 = *(_OWORD *)((char *)this + 8);
  v9 = *(_OWORD *)((char *)this + 24);
  WTF::URL::setProtocol();
  if ((WTF::URL::port(this) & 0xFF0000) != 0)
  {
    if ((WTF::URL::port(this) & 0xFF0000) == 0)
    {
      v6 = (WebCore::ResourceResponseBase *)std::__throw_bad_optional_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::ResourceResponseBase::ResourceResponseBase(v6);
    }
    WTF::URL::protocol(this);
    if (WTF::isDefaultPortForProtocol())
      WTF::URL::setPort();
  }
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  result = v7;
  if (v7)
    *(_DWORD *)v7 += 2;
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = v7;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v7;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  *(_OWORD *)((char *)this + 8) = v8;
  *(_OWORD *)((char *)this + 24) = v9;
  *((_BYTE *)this + 148) &= ~0x20u;
  *((_BYTE *)this + 184) &= ~2u;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ResourceResponseData::isolatedCopy(WebCore::ResourceResponseData *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v29;
  WTF::StringImpl *v30;
  int v31;
  __int128 v32;
  __int128 v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  const void *v40;
  const void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  _BYTE v45[48];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  _BYTE v50[24];
  uint64_t v51;
  uint64_t v52;

  *(_QWORD *)a2 = 0;
  WTF::URL::invalidate((WTF::URL *)a2);
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_BYTE *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 264) = 0;
  *(_BYTE *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  WTF::URL::isolatedCopy();
  v5 = *(_QWORD *)v45;
  *(_QWORD *)v45 = 0;
  v6 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v4);
      v7 = *(WTF::StringImpl **)v45;
    }
    else
    {
      v7 = 0;
      *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_DWORD *)&v45[8];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)&v45[8];
  *(_DWORD *)&v45[8] = v8 & 0xFFFFFFFE;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)&v45[24];
  *(_QWORD *)v45 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::String::isolatedCopy();
  v10 = *(_QWORD *)v45;
  *(_QWORD *)v45 = 0;
  v11 = *(WTF::StringImpl **)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v10;
  if (v11)
  {
    v12 = *(_DWORD *)v11 - 2;
    if (*(_DWORD *)v11 != 2)
    {
LABEL_9:
      *(_DWORD *)v11 = v12;
      goto LABEL_10;
    }
    WTF::StringImpl::destroy(v11, v9);
    v11 = *(WTF::StringImpl **)v45;
    *(_QWORD *)v45 = 0;
    if (v11)
    {
      v12 = *(_DWORD *)v11 - 2;
      if (*(_DWORD *)v11 != 2)
        goto LABEL_9;
      WTF::StringImpl::destroy(v11, v42);
    }
  }
LABEL_10:
  *(_QWORD *)(a2 + 48) = *((_QWORD *)this + 6);
  WTF::String::isolatedCopy();
  v14 = *(_QWORD *)v45;
  *(_QWORD *)v45 = 0;
  v15 = *(WTF::StringImpl **)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v14;
  if (!v15)
    goto LABEL_13;
  v16 = *(_DWORD *)v15 - 2;
  if (*(_DWORD *)v15 != 2)
    goto LABEL_12;
  WTF::StringImpl::destroy(v15, v13);
  v15 = *(WTF::StringImpl **)v45;
  *(_QWORD *)v45 = 0;
  if (v15)
  {
    v16 = *(_DWORD *)v15 - 2;
    if (*(_DWORD *)v15 != 2)
    {
LABEL_12:
      *(_DWORD *)v15 = v16;
      goto LABEL_13;
    }
    WTF::StringImpl::destroy(v15, v43);
  }
LABEL_13:
  *(_WORD *)(a2 + 64) = *((_WORD *)this + 32);
  WTF::String::isolatedCopy();
  v18 = *(_QWORD *)v45;
  *(_QWORD *)v45 = 0;
  v19 = *(WTF::StringImpl **)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v18;
  if (!v19)
    goto LABEL_16;
  v20 = *(_DWORD *)v19 - 2;
  if (*(_DWORD *)v19 != 2)
    goto LABEL_15;
  WTF::StringImpl::destroy(v19, v17);
  v19 = *(WTF::StringImpl **)v45;
  *(_QWORD *)v45 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 != 2)
    {
LABEL_15:
      *(_DWORD *)v19 = v20;
      goto LABEL_16;
    }
    WTF::StringImpl::destroy(v19, v44);
  }
LABEL_16:
  WTF::String::isolatedCopy();
  v22 = *(_QWORD *)v45;
  *(_QWORD *)v45 = 0;
  v23 = *(WTF::StringImpl **)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v22;
  if (!v23)
    goto LABEL_19;
  v24 = *(_DWORD *)v23 - 2;
  if (*(_DWORD *)v23 != 2)
    goto LABEL_18;
  WTF::StringImpl::destroy(v23, v21);
  v23 = *(WTF::StringImpl **)v45;
  *(_QWORD *)v45 = 0;
  if (v23)
  {
    v24 = *(_DWORD *)v23 - 2;
    if (*(_DWORD *)v23 != 2)
    {
LABEL_18:
      *(_DWORD *)v23 = v24;
      goto LABEL_19;
    }
    WTF::StringImpl::destroy(v23, v21);
  }
LABEL_19:
  WebCore::HTTPHeaderMap::isolatedCopy((unsigned int *)this + 22, v21, (uint64_t)v45);
  WebCore::HTTPHeaderMap::operator=((unsigned int *)(a2 + 88), (WTF::StringImpl *)v45);
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)v45, v25);
  if (!*((_BYTE *)this + 248))
    goto LABEL_34;
  v51 = 0;
  v26 = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)v45 = *(_OWORD *)((char *)this + 120);
  *(_OWORD *)&v45[16] = v26;
  v27 = *(_OWORD *)((char *)this + 168);
  *(_OWORD *)&v45[32] = *(_OWORD *)((char *)this + 152);
  v46 = v27;
  v47 = *(_OWORD *)((char *)this + 184);
  v48 = *((_QWORD *)this + 25);
  WTF::String::isolatedCopy();
  *(_DWORD *)v50 = *((_DWORD *)this + 54);
  *(_OWORD *)&v50[8] = *((_OWORD *)this + 14);
  v29 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 30);
  if (v29)
  {
    WebCore::AdditionalNetworkLoadMetricsForWebInspector::isolatedCopy(v29, &v52);
    v51 = v52;
  }
  v30 = v49;
  *(_QWORD *)(a2 + 200) = v48;
  v31 = *(unsigned __int8 *)(a2 + 248);
  v32 = v46;
  *(_OWORD *)(a2 + 152) = *(_OWORD *)&v45[32];
  *(_OWORD *)(a2 + 168) = v32;
  *(_OWORD *)(a2 + 184) = v47;
  v33 = *(_OWORD *)&v45[16];
  *(_OWORD *)(a2 + 120) = *(_OWORD *)v45;
  *(_OWORD *)(a2 + 136) = v33;
  v49 = 0;
  if (v31)
  {
    v34 = *(WTF::StringImpl **)(a2 + 208);
    *(_QWORD *)(a2 + 208) = v30;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v28);
      else
        *(_DWORD *)v34 -= 2;
    }
    *(_OWORD *)(a2 + 216) = *(_OWORD *)v50;
    v35 = v51;
    v51 = 0;
    v36 = *(_DWORD **)(a2 + 240);
    *(_QWORD *)(a2 + 232) = *(_QWORD *)&v50[16];
    *(_QWORD *)(a2 + 240) = v35;
    if (v36)
    {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v36, v28);
      v37 = (_DWORD *)v51;
      v51 = 0;
      if (v37)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v37, v28);
      goto LABEL_31;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 208) = v30;
    *(_OWORD *)(a2 + 216) = *(_OWORD *)v50;
    v38 = v51;
    *(_QWORD *)(a2 + 232) = *(_QWORD *)&v50[16];
    *(_QWORD *)(a2 + 240) = v38;
    *(_BYTE *)(a2 + 248) = 1;
  }
  v51 = 0;
LABEL_31:
  v39 = v49;
  v49 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v28);
    else
      *(_DWORD *)v39 -= 2;
  }
LABEL_34:
  *(_DWORD *)(a2 + 256) = *((_DWORD *)this + 64);
  *(_BYTE *)(a2 + 260) = *((_BYTE *)this + 260);
  *(_WORD *)(a2 + 261) = *(_WORD *)((char *)this + 261);
  if (*((_BYTE *)this + 272))
  {
    v40 = (const void *)*((_QWORD *)this + 33);
    if (v40)
      CFRetain(v40);
    if (*(_BYTE *)(a2 + 272))
    {
      v41 = *(const void **)(a2 + 264);
      *(_QWORD *)(a2 + 264) = v40;
      if (v41)
        CFRelease(v41);
    }
    else
    {
      *(_QWORD *)(a2 + 264) = v40;
      *(_BYTE *)(a2 + 272) = 1;
    }
  }
}

void WebCore::ResourceResponseBase::crossThreadData(WebCore::ResourceResponseBase *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  WTF::StringImpl *v30;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v31;
  WTF::StringImpl *v32;
  int v33;
  __int128 v34;
  __int128 v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  char v43;
  const void *v44;
  const void *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  _BYTE v50[48];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  _BYTE v55[24];
  uint64_t v56;
  uint64_t v57;

  *(_QWORD *)a2 = 0;
  WTF::URL::invalidate((WTF::URL *)a2);
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_BYTE *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 264) = 0;
  *(_BYTE *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  WTF::URL::isolatedCopy();
  v5 = *(_QWORD *)v50;
  *(_QWORD *)v50 = 0;
  v6 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v4);
      v7 = *(WTF::StringImpl **)v50;
    }
    else
    {
      v7 = 0;
      *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_DWORD *)&v50[8];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)&v50[8];
  *(_DWORD *)&v50[8] = v8 & 0xFFFFFFFE;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)&v50[24];
  *(_QWORD *)v50 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  WTF::String::isolatedCopy();
  v10 = *(_QWORD *)v50;
  *(_QWORD *)v50 = 0;
  v11 = *(WTF::StringImpl **)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v10;
  if (v11)
  {
    v12 = *(_DWORD *)v11 - 2;
    if (*(_DWORD *)v11 != 2)
    {
LABEL_9:
      *(_DWORD *)v11 = v12;
      goto LABEL_10;
    }
    WTF::StringImpl::destroy(v11, v9);
    v11 = *(WTF::StringImpl **)v50;
    *(_QWORD *)v50 = 0;
    if (v11)
    {
      v12 = *(_DWORD *)v11 - 2;
      if (*(_DWORD *)v11 != 2)
        goto LABEL_9;
      WTF::StringImpl::destroy(v11, v46);
    }
  }
LABEL_10:
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  *(_QWORD *)(a2 + 48) = *((_QWORD *)this + 6);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  WTF::String::isolatedCopy();
  v14 = *(_QWORD *)v50;
  *(_QWORD *)v50 = 0;
  v15 = *(WTF::StringImpl **)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v14;
  if (!v15)
    goto LABEL_13;
  v16 = *(_DWORD *)v15 - 2;
  if (*(_DWORD *)v15 != 2)
    goto LABEL_12;
  WTF::StringImpl::destroy(v15, v13);
  v15 = *(WTF::StringImpl **)v50;
  *(_QWORD *)v50 = 0;
  if (v15)
  {
    v16 = *(_DWORD *)v15 - 2;
    if (*(_DWORD *)v15 != 2)
    {
LABEL_12:
      *(_DWORD *)v15 = v16;
      goto LABEL_13;
    }
    WTF::StringImpl::destroy(v15, v47);
  }
LABEL_13:
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  *(_WORD *)(a2 + 64) = *((_WORD *)this + 68);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  WTF::String::isolatedCopy();
  v18 = *(_QWORD *)v50;
  *(_QWORD *)v50 = 0;
  v19 = *(WTF::StringImpl **)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v18;
  if (!v19)
    goto LABEL_16;
  v20 = *(_DWORD *)v19 - 2;
  if (*(_DWORD *)v19 != 2)
    goto LABEL_15;
  WTF::StringImpl::destroy(v19, v17);
  v19 = *(WTF::StringImpl **)v50;
  *(_QWORD *)v50 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 != 2)
    {
LABEL_15:
      *(_DWORD *)v19 = v20;
      goto LABEL_16;
    }
    WTF::StringImpl::destroy(v19, v48);
  }
LABEL_16:
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  WTF::String::isolatedCopy();
  v22 = *(_QWORD *)v50;
  *(_QWORD *)v50 = 0;
  v23 = *(WTF::StringImpl **)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v22;
  if (!v23)
    goto LABEL_19;
  v24 = *(_DWORD *)v23 - 2;
  if (*(_DWORD *)v23 != 2)
    goto LABEL_18;
  WTF::StringImpl::destroy(v23, v21);
  v23 = *(WTF::StringImpl **)v50;
  *(_QWORD *)v50 = 0;
  if (v23)
  {
    v24 = *(_DWORD *)v23 - 2;
    if (*(_DWORD *)v23 != 2)
    {
LABEL_18:
      *(_DWORD *)v23 = v24;
      goto LABEL_19;
    }
    WTF::StringImpl::destroy(v23, v49);
  }
LABEL_19:
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  WebCore::HTTPHeaderMap::isolatedCopy((unsigned int *)this + 20, v25, (uint64_t)v50);
  WebCore::HTTPHeaderMap::operator=((unsigned int *)(a2 + 88), (WTF::StringImpl *)v50);
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)v50, v26);
  v27 = *((_QWORD *)this + 14);
  if (!v27)
    goto LABEL_34;
  v56 = 0;
  v28 = *(_OWORD *)(v27 + 24);
  *(_OWORD *)v50 = *(_OWORD *)(v27 + 8);
  *(_OWORD *)&v50[16] = v28;
  v29 = *(_OWORD *)(v27 + 56);
  *(_OWORD *)&v50[32] = *(_OWORD *)(v27 + 40);
  v51 = v29;
  v52 = *(_OWORD *)(v27 + 72);
  v53 = *(_QWORD *)(v27 + 88);
  WTF::String::isolatedCopy();
  *(_DWORD *)v55 = *(_DWORD *)(v27 + 104);
  *(_OWORD *)&v55[8] = *(_OWORD *)(v27 + 112);
  v31 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(v27 + 128);
  if (v31)
  {
    WebCore::AdditionalNetworkLoadMetricsForWebInspector::isolatedCopy(v31, &v57);
    v56 = v57;
  }
  v32 = v54;
  *(_QWORD *)(a2 + 200) = v53;
  v33 = *(unsigned __int8 *)(a2 + 248);
  v34 = v51;
  *(_OWORD *)(a2 + 152) = *(_OWORD *)&v50[32];
  *(_OWORD *)(a2 + 168) = v34;
  *(_OWORD *)(a2 + 184) = v52;
  v35 = *(_OWORD *)&v50[16];
  *(_OWORD *)(a2 + 120) = *(_OWORD *)v50;
  *(_OWORD *)(a2 + 136) = v35;
  v54 = 0;
  if (v33)
  {
    v36 = *(WTF::StringImpl **)(a2 + 208);
    *(_QWORD *)(a2 + 208) = v32;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v30);
      else
        *(_DWORD *)v36 -= 2;
    }
    *(_OWORD *)(a2 + 216) = *(_OWORD *)v55;
    v37 = v56;
    v56 = 0;
    v38 = *(_DWORD **)(a2 + 240);
    *(_QWORD *)(a2 + 232) = *(_QWORD *)&v55[16];
    *(_QWORD *)(a2 + 240) = v37;
    if (v38)
    {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v38, v30);
      v39 = (_DWORD *)v56;
      v56 = 0;
      if (v39)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v39, v30);
      goto LABEL_31;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 208) = v32;
    *(_OWORD *)(a2 + 216) = *(_OWORD *)v55;
    v40 = v56;
    *(_QWORD *)(a2 + 232) = *(_QWORD *)&v55[16];
    *(_QWORD *)(a2 + 240) = v40;
    *(_BYTE *)(a2 + 248) = 1;
  }
  v56 = 0;
LABEL_31:
  v41 = v54;
  v54 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v30);
    else
      *(_DWORD *)v41 -= 2;
  }
LABEL_34:
  v42 = *((unsigned __int16 *)this + 116);
  *(_BYTE *)(a2 + 256) = (v42 >> 10) & 0xF;
  *(_BYTE *)(a2 + 257) = *((_BYTE *)this + 234) & 7;
  *(_BYTE *)(a2 + 258) = BYTE1(v42) & 3;
  *(_BYTE *)(a2 + 259) = (v42 & 0x40) != 0;
  v43 = *((_BYTE *)this + 138);
  *(_BYTE *)(a2 + 260) = (v43 & 0x10) != 0;
  *(_BYTE *)(a2 + 261) = (v43 & 0x20) != 0;
  *(_BYTE *)(a2 + 262) = (v42 & 0x80) != 0;
  if (*((_BYTE *)this + 128))
  {
    v44 = (const void *)*((_QWORD *)this + 15);
    if (v44)
      CFRetain(v44);
    if (*(_BYTE *)(a2 + 272))
    {
      v45 = *(const void **)(a2 + 264);
      *(_QWORD *)(a2 + 264) = v44;
      if (v45)
        CFRelease(v45);
    }
    else
    {
      *(_QWORD *)(a2 + 264) = v44;
      *(_BYTE *)(a2 + 272) = 1;
    }
  }
}

uint64_t WebCore::ResourceResponseBase::textEncodingName(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  return (uint64_t)this + 56;
}

uint64_t WebCore::ResourceResponseBase::httpStatusText(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  return (uint64_t)this + 64;
}

uint64_t WebCore::ResourceResponseBase::httpVersion(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  return (uint64_t)this + 72;
}

uint64_t WebCore::ResourceResponseBase::httpHeaderFields(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  return (uint64_t)this + 80;
}

void WebCore::ResourceResponseBase::fromCrossThreadData(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  int64x2_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  __int16 v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  const void *v40;
  const void *v41;
  uint64_t v42;
  _DWORD *v43;
  WTF::StringImpl *v44;

  *(_QWORD *)a2 = 0;
  WTF::URL::invalidate((WTF::URL *)a2);
  *(_BYTE *)(a2 + 128) = 0;
  *(_WORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_BYTE *)(a2 + 120) = 0;
  v4 = *(_BYTE *)(a2 + 138);
  v5 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a2 + 144) = v5;
  *(int64x2_t *)(a2 + 160) = v5;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0x8000000000000000;
  *(int64x2_t *)(a2 + 200) = v5;
  *(_QWORD *)(a2 + 216) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 224) &= 0xF0u;
  *(_WORD *)(a2 + 232) &= 0xC000u;
  *(_BYTE *)(a2 + 234) = *(_BYTE *)(a2 + 234) & 0xF8 | 2;
  *(_QWORD *)(a2 + 240) = 0;
  *(_BYTE *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 138) = v4 & 0xC0 | 5;
  WebCore::ResourceResponse::platformLazyInit(a2, 1);
  *(_BYTE *)(a2 + 138) &= ~1u;
  v7 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v7 += 2;
  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  WebCore::ResourceResponse::platformLazyInit(a2, 1);
  *(_BYTE *)(a2 + 138) &= ~1u;
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v11 = *(WTF::StringImpl **)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(_QWORD *)(a1 + 48);
  WebCore::ResourceResponse::platformLazyInit(a2, 1);
  *(_BYTE *)(a2 + 138) &= ~1u;
  *(_QWORD *)(a2 + 48) = v12;
  WebCore::ResourceResponse::platformLazyInit(a2, 1);
  *(_BYTE *)(a2 + 138) &= ~1u;
  v14 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v15 = *(WTF::StringImpl **)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(_WORD *)(a1 + 64);
  WebCore::ResourceResponse::platformLazyInit(a2, 1);
  *(_WORD *)(a2 + 136) = v16;
  *(_BYTE *)(a2 + 138) &= ~1u;
  WebCore::ResourceResponse::platformLazyInit(a2, 2);
  v18 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  v19 = *(WTF::StringImpl **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  WebCore::ResourceResponse::platformLazyInit(a2, 2);
  v21 = *(_DWORD **)(a1 + 80);
  if (v21)
    *v21 += 2;
  v22 = *(WTF::StringImpl **)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v21;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  WebCore::HTTPHeaderMap::operator=((unsigned int *)(a2 + 80), (WTF::StringImpl *)(a1 + 88));
  if (*(_BYTE *)(a1 + 248))
  {
    v24 = WTF::fastMalloc((WTF *)0x88);
    *(_DWORD *)v24 = 1;
    v25 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(v24 + 8) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(v24 + 24) = v25;
    v26 = *(_OWORD *)(a1 + 168);
    v27 = *(_OWORD *)(a1 + 184);
    v28 = *(_QWORD *)(a1 + 200);
    *(_OWORD *)(v24 + 40) = *(_OWORD *)(a1 + 152);
    *(_QWORD *)(v24 + 88) = v28;
    *(_OWORD *)(v24 + 72) = v27;
    *(_OWORD *)(v24 + 56) = v26;
    v29 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(v24 + 96) = v29;
    v30 = *(_OWORD *)(a1 + 216);
    *(_QWORD *)(v24 + 120) = *(_QWORD *)(a1 + 232);
    *(_OWORD *)(v24 + 104) = v30;
    v31 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(v24 + 128) = v31;
    v32 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = v24;
    if (!v32)
      goto LABEL_27;
    do
    {
      v33 = __ldaxr((unsigned int *)v32);
      v34 = --v33 == 0;
    }
    while (__stlxr(v33, (unsigned int *)v32));
  }
  else
  {
    v32 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;
    if (!v32)
      goto LABEL_27;
    do
    {
      v35 = __ldaxr((unsigned int *)v32);
      v34 = --v35 == 0;
    }
    while (__stlxr(v35, (unsigned int *)v32));
  }
  if (v34)
  {
    atomic_store(1u, (unsigned int *)v32);
    v43 = *(_DWORD **)(v32 + 128);
    *(_QWORD *)(v32 + 128) = 0;
    if (v43)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v43, v23);
    v44 = *(WTF::StringImpl **)(v32 + 96);
    *(_QWORD *)(v32 + 96) = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v23);
      else
        *(_DWORD *)v44 -= 2;
    }
    WTF::fastFree((WTF *)v32, v23);
  }
LABEL_27:
  v36 = *(_WORD *)(a2 + 232) & 0xC03F | ((*(_BYTE *)(a1 + 256) & 0xF) << 10);
  *(_BYTE *)(a2 + 234) = *(_BYTE *)(a2 + 234) & 0xF8 | *(_BYTE *)(a1 + 257) & 7;
  v37 = v36 | ((*(_BYTE *)(a1 + 258) & 3) << 8);
  v38 = (*(_BYTE *)(a1 + 259) & 3) << 6;
  *(_BYTE *)(a2 + 138) = *(_BYTE *)(a2 + 138) & 0xCF | (16 * *(_BYTE *)(a1 + 260)) | (32 * *(_BYTE *)(a1 + 261));
  *(_WORD *)(a2 + 232) = v37 | v38 | ((*(_BYTE *)(a1 + 262) & 1) << 7);
  if (*(unsigned __int8 *)(a2 + 128) == *(unsigned __int8 *)(a1 + 272))
  {
    if (*(_BYTE *)(a2 + 128))
    {
      v39 = *(_QWORD *)(a1 + 264);
      *(_QWORD *)(a1 + 264) = 0;
      v40 = *(const void **)(a2 + 120);
      *(_QWORD *)(a2 + 120) = v39;
      if (v40)
        CFRelease(v40);
    }
  }
  else if (*(_BYTE *)(a2 + 128))
  {
    v41 = *(const void **)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    if (v41)
      CFRelease(v41);
    *(_BYTE *)(a2 + 128) = 0;
  }
  else
  {
    v42 = *(_QWORD *)(a1 + 264);
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a2 + 120) = v42;
    *(_BYTE *)(a2 + 128) = 1;
  }
}

WebCore::ResourceResponse *WebCore::ResourceResponse::ResourceResponse(WebCore::ResourceResponse *this)
{
  char v2;
  int64x2_t v3;

  *(_QWORD *)this = 0;
  WTF::URL::invalidate(this);
  *((_BYTE *)this + 128) = 0;
  *((_WORD *)this + 68) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 0;
  v2 = *((_BYTE *)this + 138);
  v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 9) = v3;
  *((int64x2_t *)this + 10) = v3;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0x8000000000000000;
  *(int64x2_t *)((char *)this + 200) = v3;
  *((_QWORD *)this + 27) = 0x7FF8000000000000;
  *((_BYTE *)this + 224) &= 0xF0u;
  *((_WORD *)this + 116) &= 0xC000u;
  *((_BYTE *)this + 234) = *((_BYTE *)this + 234) & 0xF8 | 2;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_BYTE *)this + 138) = v2 & 0xC0 | 5;
  return this;
}

__n128 WebCore::ResourceResponseBase::setURL(WebCore::ResourceResponseBase *this, const WTF::URL *a2)
{
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  __n128 result;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  *((_BYTE *)this + 138) &= ~1u;
  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = *(__n128 *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(__n128 *)((char *)this + 8) = result;
  return result;
}

WTF::StringImpl *WebCore::ResourceResponseBase::setMimeType(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *result;

  WebCore::ResourceResponse::platformLazyInit(a1, 1);
  *(_BYTE *)(a1 + 138) &= ~1u;
  v5 = *a2;
  *a2 = 0;
  result = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ResourceResponseBase::setExpectedContentLength(WebCore::ResourceResponseBase *this, uint64_t a2)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  *((_BYTE *)this + 138) &= ~1u;
  *((_QWORD *)this + 6) = a2;
}

WTF::StringImpl *WebCore::ResourceResponseBase::setTextEncodingName(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *result;

  WebCore::ResourceResponse::platformLazyInit(a1, 1);
  *(_BYTE *)(a1 + 138) &= ~1u;
  v5 = *a2;
  *a2 = 0;
  result = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ResourceResponseBase::setHTTPStatusCode(WebCore::ResourceResponseBase *this, __int16 a2)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  *((_WORD *)this + 68) = a2;
  *((_BYTE *)this + 138) &= ~1u;
}

WTF::StringImpl *WebCore::ResourceResponseBase::setHTTPStatusText(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *result;

  WebCore::ResourceResponse::platformLazyInit(a1, 2);
  v5 = *a2;
  *a2 = 0;
  result = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ResourceResponseBase::setHTTPVersion(uint64_t a1, _DWORD **a2)
{
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *result;

  WebCore::ResourceResponse::platformLazyInit(a1, 2);
  v5 = *a2;
  if (*a2)
    *v5 += 2;
  result = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ResourceResponseBase::syntheticRedirectResponse@<X0>(WebCore::ResourceResponseBase *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  char v7;
  int64x2_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;

  *(_QWORD *)a3 = 0;
  WTF::URL::invalidate((WTF::URL *)a3);
  *(_BYTE *)(a3 + 128) = 0;
  *(_WORD *)(a3 + 136) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_BYTE *)(a3 + 120) = 0;
  v7 = *(_BYTE *)(a3 + 138);
  v8 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a3 + 144) = v8;
  *(int64x2_t *)(a3 + 160) = v8;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = 0x8000000000000000;
  *(int64x2_t *)(a3 + 200) = v8;
  *(_QWORD *)(a3 + 216) = 0x7FF8000000000000;
  *(_BYTE *)(a3 + 224) &= 0xF0u;
  *(_WORD *)(a3 + 232) &= 0xC000u;
  *(_BYTE *)(a3 + 234) = *(_BYTE *)(a3 + 234) & 0xF8 | 2;
  *(_QWORD *)(a3 + 240) = 0;
  *(_BYTE *)(a3 + 248) = 0;
  *(_BYTE *)(a3 + 138) = v7 & 0xC0 | 5;
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  *(_BYTE *)(a3 + 138) &= ~1u;
  v10 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v10 += 2;
  v11 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  *(_OWORD *)(a3 + 8) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)((char *)this + 24);
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  *(_WORD *)(a3 + 136) = 302;
  *(_BYTE *)(a3 + 138) &= ~1u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = v17;
  WebCore::ResourceResponse::platformLazyInit(a3, 2);
  if (v17)
    *(_DWORD *)v17 += 2;
  v14 = *(WTF::StringImpl **)(a3 + 72);
  *(_QWORD *)(a3 + 72) = v12;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v13);
      if (!v12)
        goto LABEL_14;
      goto LABEL_12;
    }
    *(_DWORD *)v14 -= 2;
  }
  if (!v12)
    goto LABEL_14;
LABEL_12:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v13);
  else
    *(_DWORD *)v12 -= 2;
LABEL_14:
  WebCore::ResourceResponse::platformLazyInit(a3, 2);
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 80), (WTF::StringImpl *)0x34, a2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ResourceResponse::platformLazyInit(a3, 2);
  *(_WORD *)(a3 + 232) &= ~1u;
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 80), (WTF::StringImpl *)0xF, &v17);
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ResourceResponseBase::setHTTPHeaderField(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  __int16 v6;

  WebCore::ResourceResponse::platformLazyInit(a1, 2);
  if ((_DWORD)a2 == 35)
  {
    v6 = -5;
    goto LABEL_3;
  }
  if ((int)a2 > 38)
  {
    if ((_DWORD)a2 == 39)
    {
      v6 = -9;
      goto LABEL_3;
    }
    if ((_DWORD)a2 == 50)
    {
      v6 = -17;
      goto LABEL_3;
    }
    if ((_DWORD)a2 != 56)
      return WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a1 + 80), a2, a3);
LABEL_13:
    v6 = -2;
    goto LABEL_3;
  }
  if ((_DWORD)a2 == 13)
  {
    v6 = -3;
    goto LABEL_3;
  }
  if ((_DWORD)a2 == 15)
    goto LABEL_13;
  if ((_DWORD)a2 != 23)
    return WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a1 + 80), a2, a3);
  v6 = -33;
LABEL_3:
  *(_WORD *)(a1 + 232) &= v6;
  return WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a1 + 80), a2, a3);
}

int64x2_t WebCore::ResourceResponse::ResourceResponse(uint64_t a1, uint64_t a2, _DWORD **a3, uint64_t a4, _DWORD **a5)
{
  _DWORD *v5;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  char v9;
  int64x2_t result;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  *(_QWORD *)a1 = v5;
  v6 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v6;
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = a4;
  v8 = *a5;
  if (*a5)
    *v8 += 2;
  *(_QWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 128) = 1;
  *(_WORD *)(a1 + 136) = 0;
  v9 = *(_BYTE *)(a1 + 138);
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 144) = result;
  *(int64x2_t *)(a1 + 160) = result;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0x8000000000000000;
  *(int64x2_t *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 216) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 224) &= 0xF0u;
  *(_WORD *)(a1 + 232) &= 0xC000u;
  *(_BYTE *)(a1 + 234) = *(_BYTE *)(a1 + 234) & 0xF8 | 2;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 138) = v9 & 0xC0 | 4;
  return result;
}

double WebCore::ResourceResponseBase::filter@<D0>(WebCore::ResourceResponseBase *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v4;
  const void *v7;
  WTF::StringImpl *v8;
  double result;
  WTF::StringImpl *v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  _WORD *v14;
  WTF::StringImpl *v15;
  _WORD *v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  _WORD *v20;
  WTF::StringImpl *v21;
  _WORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  __int16 v26;
  char v27;
  unsigned __int16 *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  const char *v36;
  uint64_t v37;
  WTF::StringImpl **v38;

  v4 = *((_BYTE *)a1 + 233) & 3;
  if (v4 == 2)
  {
    WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)a3);
    *(_WORD *)(a3 + 232) = *(_WORD *)(a3 + 232) & 0xFCFF | 0x200;
    *(_BYTE *)(a3 + 138) &= ~1u;
    v27 = *(_BYTE *)(a3 + 234) & 0xF8 | 4;
LABEL_30:
    *(_BYTE *)(a3 + 234) = v27;
    return result;
  }
  if (v4 == 3)
  {
    WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)a3);
    *(_WORD *)(a3 + 232) |= 0x300u;
    *(_BYTE *)(a3 + 138) &= ~1u;
    *(_BYTE *)(a3 + 234) = *(_BYTE *)(a3 + 234) & 0xF8 | 5;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a1, 1);
    *(_QWORD *)&result = WebCore::ResourceResponseBase::setURL((WebCore::ResourceResponseBase *)a3, a1).n128_u64[0];
  }
  else
  {
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)a3, a1);
    v7 = (const void *)*((_QWORD *)a1 + 30);
    *(_QWORD *)(a3 + 240) = v7;
    if (v7)
      CFRetain(v7);
    *(_BYTE *)(a3 + 248) = *((_BYTE *)a1 + 248);
    WebCore::ResourceResponse::platformLazyInit(a3, 2);
    v10 = (WTF::StringImpl *)(a3 + 80);
    v11 = *(unsigned int *)(a3 + 92);
    if ((_DWORD)v11)
    {
      v12 = *(_WORD **)v10;
      if (**(_WORD **)v10 == 77)
      {
        v13 = 0;
LABEL_8:
        v14 = &v12[8 * v13];
        v15 = (WTF::StringImpl *)*((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
          {
            WTF::StringImpl::destroy(v15, v8);
            v11 = *(unsigned int *)(a3 + 92);
          }
          else
          {
            *(_DWORD *)v15 -= 2;
          }
        }
        v16 = v14 + 8;
        v17 = *(_QWORD *)v10 + 16 * v11;
        while (v16 != (_WORD *)v17)
        {
          *(v16 - 8) = *v16;
          *((_QWORD *)v16 - 1) = *((_QWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          v16 += 8;
        }
        v11 = (v11 - 1);
        *(_DWORD *)(a3 + 92) = v11;
      }
      else
      {
        v13 = 0;
        v24 = v12 + 8;
        while (v11 - 1 != v13)
        {
          v25 = *v24;
          v24 += 8;
          ++v13;
          if (v25 == 77)
            goto LABEL_8;
        }
      }
      if ((_DWORD)v11)
      {
        v18 = *(_WORD **)v10;
        if (**(_WORD **)v10 == 78)
        {
          v19 = 0;
LABEL_18:
          v20 = &v18[8 * v19];
          v21 = (WTF::StringImpl *)*((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::destroy(v21, v8);
              v11 = *(unsigned int *)(a3 + 92);
            }
            else
            {
              *(_DWORD *)v21 -= 2;
            }
          }
          v22 = v20 + 8;
          v23 = *(_QWORD *)v10 + 16 * v11;
          while (v22 != (_WORD *)v23)
          {
            *(v22 - 8) = *v22;
            *((_QWORD *)v22 - 1) = *((_QWORD *)v22 + 1);
            *((_QWORD *)v22 + 1) = 0;
            v22 += 8;
          }
          *(_DWORD *)(a3 + 92) = v11 - 1;
        }
        else
        {
          v19 = 0;
          v28 = v18 + 8;
          while (v11 - 1 != v19)
          {
            v29 = *v28;
            v28 += 8;
            ++v19;
            if (v29 == 78)
              goto LABEL_18;
          }
        }
      }
    }
    v26 = *((_WORD *)a1 + 116);
    *(_BYTE *)(a3 + 138) &= ~1u;
    v27 = *(_BYTE *)(a3 + 234) & 0xF8;
    if ((v26 & 0x300) == 0)
      goto LABEL_30;
    *(_BYTE *)(a3 + 234) = v27 | 1;
    WebCore::ResourceResponseBase::httpHeaderField((uint64_t)a1, 9, &v35);
    WebCore::parseAccessControlAllowList<WTF::ASCIICaseInsensitiveHash>((uint64_t *)&v35, (uint64_t)&v36);
    if ((_BYTE)v37)
    {
      v31 = (WTF::StringImpl **)v36;
      v36 = 0;
    }
    else
    {
      v31 = 0;
    }
    v38 = v31;
    std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~optional((uint64_t)&v36, v30);
    v33 = v35;
    v35 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    if (!a2
      || (v36 = "*",
          v37 = 2,
          (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral>((uint64_t *)&v38, (uint64_t *)&v36) & 1) == 0))
    {
      v36 = (const char *)&v38;
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::removeAllMatching<WebCore::ResourceResponseBase::filter(WebCore::ResourceResponse const&,WebCore::ResourceResponseBase::PerformExposeAllHeadersCheck)::$_0>((unsigned int *)(a3 + 96), (WTF::StringImpl *)&v36);
      v36 = (const char *)&v38;
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::removeAllMatching<WebCore::ResourceResponseBase::filter(WebCore::ResourceResponse const&,WebCore::ResourceResponseBase::PerformExposeAllHeadersCheck)::$_1>(v10, (WTF::StringImpl *)&v36);
    }
    WTF::HashSet<WebCore::PublicSuffix,WTF::DefaultHash<WebCore::PublicSuffix>,WTF::HashTraits<WebCore::PublicSuffix>,WTF::HashTableTraits>::~HashSet(&v38, v34);
  }
  return result;
}

uint64_t WebCore::ResourceResponseBase::setType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 138) &= ~1u;
  *(_BYTE *)(result + 234) = *(_BYTE *)(result + 234) & 0xF8 | a2 & 7;
  return result;
}

unsigned int *WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::removeAllMatching<WebCore::ResourceResponseBase::filter(WebCore::ResourceResponse const&,WebCore::ResourceResponseBase::PerformExposeAllHeadersCheck)::$_0>(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v2 = result;
  v3 = *(WTF::StringImpl **)result;
  v4 = result[3];
  v5 = (WTF::StringImpl *)(*(_QWORD *)result + 16 * v4);
  if ((_DWORD)v4)
  {
    v7 = 0;
    v8 = *(WTF::StringImpl **)result;
    v9 = (WTF::StringImpl *)(*(_QWORD *)result + 16 * v4);
    v10 = v9;
    do
    {
      if (**(_QWORD **)a2
        && (result = (unsigned int *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(*(uint64_t **)a2, v3)) != 0)
      {
        v11 = v10;
      }
      else
      {
        v11 = v3;
        if (v10 != (WTF::StringImpl *)(*(_QWORD *)v2 + 16 * v2[3]))
        {
          if (v3 == v9)
          {
            v11 = v10;
          }
          else
          {
            WTF::VectorMover<false,WebCore::HTTPHeaderMap::UncommonHeader>::moveOverlapping(v9, v3, v10);
            v11 = (WTF::StringImpl *)((char *)v10 + v8 - v9);
          }
        }
        v12 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        result = *(unsigned int **)v3;
        *(_QWORD *)v3 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *result -= 2;
        }
        v9 = (WTF::StringImpl *)((char *)v3 + 16);
        ++v7;
        v10 = v11;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 16);
      v8 = (WTF::StringImpl *)((char *)v8 + 16);
    }
    while (v3 < v5);
    v3 = *(WTF::StringImpl **)v2;
    LODWORD(v4) = v2[3];
    v5 = v11;
  }
  else
  {
    v7 = 0;
    v9 = (WTF::StringImpl *)(*(_QWORD *)result + 16 * v4);
  }
  v13 = (WTF::StringImpl *)((char *)v3 + 16 * v4);
  if (v9 != v13)
  {
    result = (unsigned int *)WTF::VectorMover<false,WebCore::HTTPHeaderMap::UncommonHeader>::moveOverlapping(v9, v13, v5);
    LODWORD(v4) = v2[3];
  }
  v2[3] = v4 - v7;
  return result;
}

WTF::StringImpl *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::removeAllMatching<WebCore::ResourceResponseBase::filter(WebCore::ResourceResponse const&,WebCore::ResourceResponseBase::PerformExposeAllHeadersCheck)::$_1>(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  unsigned __int16 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned __int16 *v20;
  char *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  _QWORD *v27;
  __int16 v28;
  uint64_t v29;
  __int128 v31;

  v2 = result;
  v3 = *(unsigned __int16 **)result;
  v4 = *((unsigned int *)result + 3);
  v5 = *(_QWORD *)result + 16 * v4;
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)result + 16 * v4;
    v8 = v7;
    while (1)
    {
      v9 = *v3;
      v10 = v9 - 15;
      if ((v9 - 15) <= 0x3F)
      {
        if (((1 << v10) & 0x20801000861) != 0)
          goto LABEL_25;
        if (((1 << v10) & 0xC000000000000000) != 0)
          goto LABEL_8;
      }
      if (*v3)
      {
        v11 = *(uint64_t **)a2;
        v31 = *(_OWORD *)&(&WebCore::headerNameStrings)[2 * v9];
        result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteralCaseInsensitive>,WTF::ASCIILiteral>(v11, (uint64_t)&v31);
        if ((result & 1) == 0)
        {
LABEL_8:
          v12 = v3;
          if (v8 != *(_QWORD *)v2 + 16 * *((unsigned int *)v2 + 3))
          {
            if ((unsigned __int16 *)v7 == v3)
            {
              v12 = (unsigned __int16 *)v8;
            }
            else
            {
              if (v7 <= v8)
              {
                v18 = 0;
                v17 = (uint64_t)((uint64_t)v3 - v7) >> 4;
                v19 = (char *)v3 + v8 - v7;
                do
                {
                  v20 = &v3[v18];
                  v21 = &v19[v18 * 2];
                  *((_WORD *)v21 - 8) = v3[v18 - 8];
                  v22 = *(_QWORD *)&v3[v18 - 4];
                  *((_QWORD *)v20 - 1) = 0;
                  *((_QWORD *)v21 - 1) = v22;
                  v23 = *(WTF::StringImpl **)&v3[v18 - 4];
                  *((_QWORD *)v20 - 1) = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                    {
                      WTF::StringImpl::destroy(v23, a2);
                      v19 = (char *)v3 + v8 - v7;
                    }
                    else
                    {
                      *(_DWORD *)v23 -= 2;
                    }
                  }
                  v18 -= 8;
                }
                while (&v3[v18] != (unsigned __int16 *)v7);
              }
              else
              {
                v13 = v8;
                v14 = v7;
                do
                {
                  *(_WORD *)v13 = *(_WORD *)v14;
                  v15 = *(_QWORD *)(v14 + 8);
                  *(_QWORD *)(v14 + 8) = 0;
                  *(_QWORD *)(v13 + 8) = v15;
                  v16 = *(WTF::StringImpl **)(v14 + 8);
                  *(_QWORD *)(v14 + 8) = 0;
                  if (v16)
                  {
                    if (*(_DWORD *)v16 == 2)
                      WTF::StringImpl::destroy(v16, a2);
                    else
                      *(_DWORD *)v16 -= 2;
                  }
                  v14 += 16;
                  v13 += 16;
                }
                while ((unsigned __int16 *)v14 != v3);
                v17 = (uint64_t)((uint64_t)v3 - v7) >> 4;
              }
              v12 = (unsigned __int16 *)(v8 + 16 * v17);
            }
          }
          result = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
          *((_QWORD *)v3 + 1) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
            else
              *(_DWORD *)result -= 2;
          }
          v7 = (unint64_t)(v3 + 8);
          ++v6;
          v8 = (unint64_t)v12;
        }
      }
LABEL_25:
      v3 += 8;
      if ((unint64_t)v3 >= v5)
      {
        v3 = *(unsigned __int16 **)v2;
        v24 = *((unsigned int *)v2 + 3);
        v5 = v8;
        goto LABEL_36;
      }
    }
  }
  v24 = 0;
  v6 = 0;
  v7 = v5;
LABEL_36:
  v25 = &v3[8 * v24];
  if ((unsigned __int16 *)v7 != v25)
  {
    if (v7 <= v5)
    {
      v27 = (_QWORD *)((((unint64_t)v25 - v7) & 0xFFFFFFFFFFFFFFF0) + v5 - 8);
      do
      {
        v28 = *(v25 - 8);
        v25 -= 8;
        *((_WORD *)v27 - 4) = v28;
        v29 = *((_QWORD *)v25 + 1);
        *((_QWORD *)v25 + 1) = 0;
        *v27 = v29;
        result = (WTF::StringImpl *)*((_QWORD *)v25 + 1);
        *((_QWORD *)v25 + 1) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v27 -= 2;
      }
      while (v25 != (unsigned __int16 *)v7);
    }
    else
    {
      do
      {
        *(_WORD *)v5 = *(_WORD *)v7;
        v26 = *(_QWORD *)(v7 + 8);
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v5 + 8) = v26;
        result = *(WTF::StringImpl **)(v7 + 8);
        *(_QWORD *)(v7 + 8) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v7 += 16;
        v5 += 16;
      }
      while ((unsigned __int16 *)v7 != v25);
    }
  }
  *((_DWORD *)v2 + 3) -= v6;
  return result;
}

void WebCore::ResourceResponseBase::suggestedFilename(WebCore::ResourceResponseBase *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 30);
  if (!v2)
  {
    if ((*((_BYTE *)this + 138) & 1) != 0)
    {
      v2 = 0;
    }
    else
    {
      WebCore::ResourceResponse::initNSURLResponse(this);
      v2 = (void *)*((_QWORD *)this + 30);
    }
  }
  objc_msgSend(v2, "suggestedFilename");
  JUMPOUT(0x19AEA5508);
}

void WebCore::ResourceResponseBase::sanitizeSuggestedFilename(WebCore::ResourceResponseBase *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  void *v17;
  WTF::StringImpl *v18;
  CFTypeRef v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22[5];
  WTF::StringImpl *v23;
  __int128 v24;
  __int128 v25;
  WTF::StringImpl *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _BYTE v32[48];
  uint64_t v33;
  char v34;
  __int16 v35;
  char v36;
  int64x2_t v37;
  int64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64x2_t v42;
  uint64_t v43;
  char v44;
  __int16 v45;
  char v46;
  CFTypeRef cf;
  char v48;

  v4 = *(_DWORD **)this;
  if (!*(_QWORD *)this)
    goto LABEL_2;
  if (!v4[1])
  {
    *v4 += 2;
LABEL_2:
    *a2 = v4;
    return;
  }
  v22[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = v26;
  MEMORY[0x19AEA52F8](&v23, v22, &v21, 0);
  v7 = v23;
  if (v23)
    *(_DWORD *)v23 += 2;
  v26 = v7;
  v27 = v24;
  v28 = v25;
  v29 = 0;
  v30 = -1;
  v31 = 0u;
  memset(v32, 0, sizeof(v32));
  v33 = 0;
  v34 = 1;
  v35 = 0;
  v37 = vdupq_n_s64(0x7FF8000000000000uLL);
  v38 = v37;
  v39 = 0;
  v40 = 0;
  v42 = v37;
  v41 = 0x8000000000000000;
  v43 = 0x7FF8000000000000;
  v44 = 0;
  v45 = 0;
  v46 = 2;
  cf = 0;
  v48 = 0;
  v36 = 4;
  v23 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v21;
  v21 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v22[0];
  v22[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)&v26, 1);
  v35 = 200;
  v36 &= ~1u;
  if (!*(_QWORD *)this || (WTF::StringImpl::replace(), (v10 = v23) == 0))
  {
    v12 = 0;
    goto LABEL_46;
  }
  WTF::StringImpl::replace();
  v12 = v23;
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, v11);
    if (v12)
      goto LABEL_19;
LABEL_46:
    v13 = 1;
    goto LABEL_20;
  }
  *(_DWORD *)v10 -= 2;
  if (!v12)
    goto LABEL_46;
LABEL_19:
  v13 = 0;
  *(_DWORD *)v12 += 2;
LABEL_20:
  v20 = v12;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"attachment; filename=\"",
    23,
    (uint64_t *)&v20,
    34,
    &v23);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)&v26, 2);
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)&v32[8], (WTF::StringImpl *)0x12, &v23);
  v15 = v23;
  v23 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (void *)cf;
  if (!cf)
  {
    if ((v36 & 1) != 0)
    {
      v17 = 0;
    }
    else
    {
      WebCore::ResourceResponse::initNSURLResponse((WebCore::ResourceResponse *)&v26);
      v17 = (void *)cf;
    }
  }
  MEMORY[0x19AEA5508](a2, objc_msgSend(v17, "suggestedFilename", v20, v21, v22[0]));
  if ((v13 & 1) == 0)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v18);
    else
      *(_DWORD *)v12 -= 2;
  }
  v19 = cf;
  cf = 0;
  if (v19)
    CFRelease(v19);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v26, v18);
}

BOOL WebCore::ResourceResponseBase::isSuccessful(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  return (*((__int16 *)this + 68) - 200) < 0x64;
}

WTF::StringImpl *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::removeAllMatching<WebCore::ResourceResponseBase::sanitizeHTTPHeaderFieldsAccordingToTainting(void)::$_0>(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  unint64_t v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned __int16 *v20;
  char *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  _QWORD *v27;
  __int16 v28;
  uint64_t v29;
  __int128 v30;

  v2 = result;
  v3 = *(unsigned __int16 **)result;
  v4 = *((unsigned int *)result + 3);
  v5 = *(_QWORD *)result + 16 * v4;
  if ((_DWORD)v4)
  {
    v7 = 0;
    v8 = *(_QWORD *)result + 16 * v4;
    v9 = v8;
    do
    {
      v10 = *(uint64_t **)a2;
      v11 = *v3;
      result = (WTF::StringImpl *)WebCore::isSafeCrossOriginResponseHeader(*v3);
      if (!(_DWORD)result)
      {
        v30 = *(_OWORD *)&(&WebCore::headerNameStrings)[2 * v11];
        result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteralCaseInsensitive>,WTF::ASCIILiteral>(v10, (uint64_t)&v30);
        if ((result & 1) == 0)
        {
          v12 = v3;
          if (v9 != *(_QWORD *)v2 + 16 * *((unsigned int *)v2 + 3))
          {
            if ((unsigned __int16 *)v8 == v3)
            {
              v12 = (unsigned __int16 *)v9;
            }
            else
            {
              if (v8 <= v9)
              {
                v18 = 0;
                v17 = (uint64_t)((uint64_t)v3 - v8) >> 4;
                v19 = (char *)v3 + v9 - v8;
                do
                {
                  v20 = &v3[v18];
                  v21 = &v19[v18 * 2];
                  *((_WORD *)v21 - 8) = v3[v18 - 8];
                  v22 = *(_QWORD *)&v3[v18 - 4];
                  *((_QWORD *)v20 - 1) = 0;
                  *((_QWORD *)v21 - 1) = v22;
                  v23 = *(WTF::StringImpl **)&v3[v18 - 4];
                  *((_QWORD *)v20 - 1) = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                    {
                      WTF::StringImpl::destroy(v23, a2);
                      v19 = (char *)v3 + v9 - v8;
                    }
                    else
                    {
                      *(_DWORD *)v23 -= 2;
                    }
                  }
                  v18 -= 8;
                }
                while (&v3[v18] != (unsigned __int16 *)v8);
              }
              else
              {
                v13 = v9;
                v14 = v8;
                do
                {
                  *(_WORD *)v13 = *(_WORD *)v14;
                  v15 = *(_QWORD *)(v14 + 8);
                  *(_QWORD *)(v14 + 8) = 0;
                  *(_QWORD *)(v13 + 8) = v15;
                  v16 = *(WTF::StringImpl **)(v14 + 8);
                  *(_QWORD *)(v14 + 8) = 0;
                  if (v16)
                  {
                    if (*(_DWORD *)v16 == 2)
                      WTF::StringImpl::destroy(v16, a2);
                    else
                      *(_DWORD *)v16 -= 2;
                  }
                  v14 += 16;
                  v13 += 16;
                }
                while ((unsigned __int16 *)v14 != v3);
                v17 = (uint64_t)((uint64_t)v3 - v8) >> 4;
              }
              v12 = (unsigned __int16 *)(v9 + 16 * v17);
            }
          }
          result = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
          *((_QWORD *)v3 + 1) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
            else
              *(_DWORD *)result -= 2;
          }
          v8 = (unint64_t)(v3 + 8);
          ++v7;
          v9 = (unint64_t)v12;
        }
      }
      v3 += 8;
    }
    while ((unint64_t)v3 < v5);
    v3 = *(unsigned __int16 **)v2;
    v24 = *((unsigned int *)v2 + 3);
    v5 = v9;
  }
  else
  {
    v24 = 0;
    v7 = 0;
    v8 = v5;
  }
  v25 = &v3[8 * v24];
  if ((unsigned __int16 *)v8 != v25)
  {
    if (v8 <= v5)
    {
      v27 = (_QWORD *)((((unint64_t)v25 - v8) & 0xFFFFFFFFFFFFFFF0) + v5 - 8);
      do
      {
        v28 = *(v25 - 8);
        v25 -= 8;
        *((_WORD *)v27 - 4) = v28;
        v29 = *((_QWORD *)v25 + 1);
        *((_QWORD *)v25 + 1) = 0;
        *v27 = v29;
        result = (WTF::StringImpl *)*((_QWORD *)v25 + 1);
        *((_QWORD *)v25 + 1) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v27 -= 2;
      }
      while (v25 != (unsigned __int16 *)v8);
    }
    else
    {
      do
      {
        *(_WORD *)v5 = *(_WORD *)v8;
        v26 = *(_QWORD *)(v8 + 8);
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v5 + 8) = v26;
        result = *(WTF::StringImpl **)(v8 + 8);
        *(_QWORD *)(v8 + 8) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v8 += 16;
        v5 += 16;
      }
      while ((unsigned __int16 *)v8 != v25);
    }
  }
  *((_DWORD *)v2 + 3) -= v7;
  return result;
}

WTF::StringImpl *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::removeAllMatching<WebCore::ResourceResponseBase::sanitizeHTTPHeaderFieldsAccordingToTainting(void)::$_2>(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  char *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  _QWORD *v23;
  __int16 v24;
  uint64_t v25;

  v2 = result;
  v3 = *(unsigned __int16 **)result;
  v4 = *((unsigned int *)result + 3);
  v5 = *(_QWORD *)result + 16 * v4;
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)result + 16 * v4;
    v8 = v7;
    do
    {
      result = (WTF::StringImpl *)WebCore::isSafeCrossOriginResponseHeader(*v3);
      if ((result & 1) != 0)
      {
        v9 = (unsigned __int16 *)v8;
      }
      else
      {
        v9 = v3;
        if (v8 != *(_QWORD *)v2 + 16 * *((unsigned int *)v2 + 3))
        {
          if ((unsigned __int16 *)v7 == v3)
          {
            v9 = (unsigned __int16 *)v8;
          }
          else
          {
            if (v7 <= v8)
            {
              v15 = 0;
              v14 = (uint64_t)((uint64_t)v3 - v7) >> 4;
              do
              {
                v16 = &v3[v15];
                v17 = (char *)v3 + v8 - v7 + v15 * 2;
                *((_WORD *)v17 - 8) = v3[v15 - 8];
                v18 = *(_QWORD *)&v3[v15 - 4];
                *((_QWORD *)v16 - 1) = 0;
                *((_QWORD *)v17 - 1) = v18;
                v19 = *(WTF::StringImpl **)&v3[v15 - 4];
                *((_QWORD *)v16 - 1) = 0;
                if (v19)
                {
                  if (*(_DWORD *)v19 == 2)
                    WTF::StringImpl::destroy(v19, a2);
                  else
                    *(_DWORD *)v19 -= 2;
                }
                v15 -= 8;
              }
              while (&v3[v15] != (unsigned __int16 *)v7);
            }
            else
            {
              v10 = v8;
              v11 = v7;
              do
              {
                *(_WORD *)v10 = *(_WORD *)v11;
                v12 = *(_QWORD *)(v11 + 8);
                *(_QWORD *)(v11 + 8) = 0;
                *(_QWORD *)(v10 + 8) = v12;
                v13 = *(WTF::StringImpl **)(v11 + 8);
                *(_QWORD *)(v11 + 8) = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 2)
                    WTF::StringImpl::destroy(v13, a2);
                  else
                    *(_DWORD *)v13 -= 2;
                }
                v11 += 16;
                v10 += 16;
              }
              while ((unsigned __int16 *)v11 != v3);
              v14 = (uint64_t)((uint64_t)v3 - v7) >> 4;
            }
            v9 = (unsigned __int16 *)(v8 + 16 * v14);
          }
        }
        result = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v7 = (unint64_t)(v3 + 8);
        ++v6;
        v8 = (unint64_t)v9;
      }
      v3 += 8;
    }
    while ((unint64_t)v3 < v5);
    v3 = *(unsigned __int16 **)v2;
    v20 = *((unsigned int *)v2 + 3);
    v5 = (unint64_t)v9;
  }
  else
  {
    v20 = 0;
    v6 = 0;
    v7 = v5;
  }
  v21 = &v3[8 * v20];
  if ((unsigned __int16 *)v7 != v21)
  {
    if (v7 <= v5)
    {
      v23 = (_QWORD *)((((unint64_t)v21 - v7) & 0xFFFFFFFFFFFFFFF0) + v5 - 8);
      do
      {
        v24 = *(v21 - 8);
        v21 -= 8;
        *((_WORD *)v23 - 4) = v24;
        v25 = *((_QWORD *)v21 + 1);
        *((_QWORD *)v21 + 1) = 0;
        *v23 = v25;
        result = (WTF::StringImpl *)*((_QWORD *)v21 + 1);
        *((_QWORD *)v21 + 1) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v23 -= 2;
      }
      while (v21 != (unsigned __int16 *)v7);
    }
    else
    {
      do
      {
        *(_WORD *)v5 = *(_WORD *)v7;
        v22 = *(_QWORD *)(v7 + 8);
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v5 + 8) = v22;
        result = *(WTF::StringImpl **)(v7 + 8);
        *(_QWORD *)(v7 + 8) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v7 += 16;
        v5 += 16;
      }
      while ((unsigned __int16 *)v7 != v21);
    }
  }
  *((_DWORD *)v2 + 3) -= v6;
  return result;
}

unsigned int *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::removeAllMatching<WebCore::ResourceResponseBase::sanitizeHTTPHeaderFields(WebCore::ResourceResponseBase::SanitizationType)::$_0>(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned __int16 *v19;
  char *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  _QWORD *v26;
  __int16 v27;
  uint64_t v28;

  v2 = result;
  v3 = *(unsigned __int16 **)result;
  v4 = result[3];
  v5 = *(_QWORD *)result + 16 * v4;
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)result + 16 * v4;
    v8 = v7;
    do
    {
      v9 = *v3;
      v10 = v9 > 0x3E || ((1 << v9) & 0x611400ABE000A7E0) == 0;
      if (v10 && v9 != 81 && v9 != 87)
      {
        v11 = v3;
        if (v8 != *(_QWORD *)v2 + 16 * v2[3])
        {
          if ((unsigned __int16 *)v7 == v3)
          {
            v11 = (unsigned __int16 *)v8;
          }
          else
          {
            if (v7 <= v8)
            {
              v17 = 0;
              v16 = (uint64_t)((uint64_t)v3 - v7) >> 4;
              v18 = (char *)v3 + v8 - v7;
              do
              {
                v19 = &v3[v17];
                v20 = &v18[v17 * 2];
                *((_WORD *)v20 - 8) = v3[v17 - 8];
                v21 = *(_QWORD *)&v3[v17 - 4];
                *((_QWORD *)v19 - 1) = 0;
                *((_QWORD *)v20 - 1) = v21;
                v22 = *(WTF::StringImpl **)&v3[v17 - 4];
                *((_QWORD *)v19 - 1) = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2)
                  {
                    WTF::StringImpl::destroy(v22, a2);
                    v18 = (char *)v3 + v8 - v7;
                  }
                  else
                  {
                    *(_DWORD *)v22 -= 2;
                  }
                }
                v17 -= 8;
              }
              while (&v3[v17] != (unsigned __int16 *)v7);
            }
            else
            {
              v12 = v8;
              v13 = v7;
              do
              {
                *(_WORD *)v12 = *(_WORD *)v13;
                v14 = *(_QWORD *)(v13 + 8);
                *(_QWORD *)(v13 + 8) = 0;
                *(_QWORD *)(v12 + 8) = v14;
                v15 = *(WTF::StringImpl **)(v13 + 8);
                *(_QWORD *)(v13 + 8) = 0;
                if (v15)
                {
                  if (*(_DWORD *)v15 == 2)
                    WTF::StringImpl::destroy(v15, a2);
                  else
                    *(_DWORD *)v15 -= 2;
                }
                v13 += 16;
                v12 += 16;
              }
              while ((unsigned __int16 *)v13 != v3);
              v16 = (uint64_t)((uint64_t)v3 - v7) >> 4;
            }
            v11 = (unsigned __int16 *)(v8 + 16 * v16);
          }
        }
        result = (unsigned int *)*((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *result -= 2;
        }
        v7 = (unint64_t)(v3 + 8);
        ++v6;
        v8 = (unint64_t)v11;
      }
      v3 += 8;
    }
    while ((unint64_t)v3 < v5);
    v3 = *(unsigned __int16 **)v2;
    v23 = v2[3];
    v5 = v8;
  }
  else
  {
    v23 = 0;
    v6 = 0;
    v7 = v5;
  }
  v24 = &v3[8 * v23];
  if ((unsigned __int16 *)v7 != v24)
  {
    if (v7 <= v5)
    {
      v26 = (_QWORD *)((((unint64_t)v24 - v7) & 0xFFFFFFFFFFFFFFF0) + v5 - 8);
      do
      {
        v27 = *(v24 - 8);
        v24 -= 8;
        *((_WORD *)v26 - 4) = v27;
        v28 = *((_QWORD *)v24 + 1);
        *((_QWORD *)v24 + 1) = 0;
        *v26 = v28;
        result = (unsigned int *)*((_QWORD *)v24 + 1);
        *((_QWORD *)v24 + 1) = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *result -= 2;
        }
        v26 -= 2;
      }
      while (v24 != (unsigned __int16 *)v7);
    }
    else
    {
      do
      {
        *(_WORD *)v5 = *(_WORD *)v7;
        v25 = *(_QWORD *)(v7 + 8);
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v5 + 8) = v25;
        result = *(unsigned int **)(v7 + 8);
        *(_QWORD *)(v7 + 8) = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *result -= 2;
        }
        v7 += 16;
        v5 += 16;
      }
      while ((unsigned __int16 *)v7 != v24);
    }
  }
  v2[3] -= v6;
  return result;
}

uint64_t WebCore::ResourceResponseBase::updateHeaderParsedState(uint64_t result, int a2)
{
  __int16 v2;

  if (a2 == 35)
  {
    v2 = -5;
LABEL_3:
    *(_WORD *)(result + 232) &= v2;
    return result;
  }
  if (a2 > 38)
  {
    if (a2 == 39)
    {
      v2 = -9;
      goto LABEL_3;
    }
    if (a2 == 50)
    {
      v2 = -17;
      goto LABEL_3;
    }
    if (a2 != 56)
      return result;
LABEL_13:
    v2 = -2;
    goto LABEL_3;
  }
  switch(a2)
  {
    case 13:
      v2 = -3;
      goto LABEL_3;
    case 15:
      goto LABEL_13;
    case 23:
      v2 = -33;
      goto LABEL_3;
  }
  return result;
}

WTF::StringImpl *WebCore::ResourceResponseBase::setHTTPHeaderField(WebCore::ResourceResponseBase *this, const WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  const WTF::StringImpl *v6;
  WebCore::HTTPHeaderNamesHash *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  __int16 v10;
  unsigned __int16 v12;

  v6 = *a2;
  if (*a2)
  {
    v7 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v6 + 1);
    v8 = *((unsigned int *)v6 + 1) | ((unint64_t)((*((_DWORD *)v6 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v12 = 0;
  if (WebCore::findHTTPHeaderName(v7, (char *)v8, &v12))
  {
    v9 = (WTF::StringImpl *)v12;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
    if ((_DWORD)v9 == 35)
    {
      v10 = -5;
      goto LABEL_6;
    }
    if ((int)v9 > 38)
    {
      if ((_DWORD)v9 == 39)
      {
        v10 = -9;
        goto LABEL_6;
      }
      if ((_DWORD)v9 == 50)
      {
        v10 = -17;
        goto LABEL_6;
      }
      if ((_DWORD)v9 != 56)
        return WebCore::HTTPHeaderMap::set((WebCore::ResourceResponseBase *)((char *)this + 80), v9, a3);
    }
    else
    {
      if ((_DWORD)v9 == 13)
      {
        v10 = -3;
        goto LABEL_6;
      }
      if ((_DWORD)v9 != 15)
      {
        if ((_DWORD)v9 != 23)
          return WebCore::HTTPHeaderMap::set((WebCore::ResourceResponseBase *)((char *)this + 80), v9, a3);
        v10 = -33;
LABEL_6:
        *((_WORD *)this + 116) &= v10;
        return WebCore::HTTPHeaderMap::set((WebCore::ResourceResponseBase *)((char *)this + 80), v9, a3);
      }
    }
    v10 = -2;
    goto LABEL_6;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  return (WTF::StringImpl *)WebCore::HTTPHeaderMap::setUncommonHeader((WebCore::ResourceResponseBase *)((char *)this + 80), a2, (const WTF::String *)a3);
}

uint64_t WebCore::ResourceResponseBase::setUncommonHTTPHeaderField(WebCore::ResourceResponseBase *this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  return WebCore::HTTPHeaderMap::setUncommonHeader((WebCore::ResourceResponseBase *)((char *)this + 80), a2, a3);
}

WTF::StringImpl *WebCore::ResourceResponseBase::addHTTPHeaderField(uint64_t a1, int a2, uint64_t *a3)
{
  WebCore::ResourceResponse::platformLazyInit(a1, 2);
  WebCore::ResourceResponseBase::updateHeaderParsedState(a1, a2);
  return WebCore::HTTPHeaderMap::add((WTF::StringImpl *)(a1 + 80), a2, a3);
}

WTF::StringImpl *WebCore::ResourceResponseBase::addHTTPHeaderField(WebCore::ResourceResponseBase *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  WTF::StringImpl *v6;
  WebCore::HTTPHeaderNamesHash *v7;
  unint64_t v8;
  int v9;
  unsigned __int16 v11;

  v6 = *a2;
  if (*a2)
  {
    v7 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v6 + 1);
    v8 = *((unsigned int *)v6 + 1) | ((unint64_t)((*((_DWORD *)v6 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v11 = 0;
  if (WebCore::findHTTPHeaderName(v7, (char *)v8, &v11))
  {
    v9 = v11;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
    WebCore::ResourceResponseBase::updateHeaderParsedState((uint64_t)this, v9);
    return WebCore::HTTPHeaderMap::add((WebCore::ResourceResponseBase *)((char *)this + 80), v9, (uint64_t *)a3);
  }
  else
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
    return WebCore::HTTPHeaderMap::addUncommonHeader((WebCore::ResourceResponseBase *)((char *)this + 80), a2, (WTF::StringImpl **)a3);
  }
}

WTF::StringImpl *WebCore::ResourceResponseBase::addUncommonHTTPHeaderField(WebCore::ResourceResponseBase *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  return WebCore::HTTPHeaderMap::addUncommonHeader((WebCore::ResourceResponseBase *)((char *)this + 80), a2, a3);
}

double WebCore::ResourceResponseBase::parseCacheControlDirectives(WebCore::ResourceResponseBase *this)
{
  const WebCore::HTTPHeaderMap *v2;
  double result;
  int64x2_t v4[2];

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  WebCore::parseCacheControlDirectives((unsigned int *)this + 20, v2, v4);
  *(int64x2_t *)((char *)this + 200) = v4[0];
  result = *(double *)((char *)&v4[0].i64[1] + 1);
  *(int64x2_t *)((char *)this + 209) = *(int64x2_t *)((char *)v4 + 9);
  *((_WORD *)this + 116) |= 1u;
  return result;
}

uint64_t WebCore::ResourceResponseBase::cacheControlContainsMustRevalidate(WebCore::ResourceResponseBase *this)
{
  if ((*((_WORD *)this + 116) & 1) == 0)
    WebCore::ResourceResponseBase::parseCacheControlDirectives(this);
  return (*((unsigned __int8 *)this + 224) >> 2) & 1;
}

uint64_t WebCore::ResourceResponseBase::cacheControlContainsImmutable(WebCore::ResourceResponseBase *this)
{
  if ((*((_WORD *)this + 116) & 1) == 0)
    WebCore::ResourceResponseBase::parseCacheControlDirectives(this);
  return (*((unsigned __int8 *)this + 224) >> 3) & 1;
}

double WebCore::ResourceResponseBase::cacheControlMaxAge(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponseBase *v2;

  if ((*((_WORD *)this + 116) & 1) == 0)
  {
    v2 = this;
    WebCore::ResourceResponseBase::parseCacheControlDirectives(this);
    this = v2;
  }
  return *((double *)this + 25);
}

uint64_t WebCore::ResourceResponseBase::expires(WebCore::ResourceResponseBase *this)
{
  uint64_t v1;
  void *v3;
  unint64_t v6;
  unint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  int *v10;
  int v11;
  double v12;
  double v13;
  double v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF *v18;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  if ((*((_WORD *)this + 116) & 8) == 0)
  {
    v6 = *((unsigned int *)this + 23);
    if (!(_DWORD)v6)
      goto LABEL_8;
    v7 = 0;
    v8 = (_DWORD **)(*((_QWORD *)this + 10) + 8);
    while (*((_WORD *)v8 - 4) != 39)
    {
      ++v7;
      v8 += 2;
      if (v6 == v7)
        goto LABEL_8;
    }
    if (v7 >= v6)
    {
      __break(0xC471u);
      JUMPOUT(0x196308448);
    }
    v10 = *v8;
    if (!*v8)
    {
LABEL_8:
      v9 = 0x7FF8000000000000;
LABEL_9:
      *((_QWORD *)this + 20) = v9;
      *((_WORD *)this + 116) |= 8u;
      return v9;
    }
    v11 = *v10;
    *v10 += 2;
    v17 = (WTF::StringImpl *)v10;
    if (v10[1])
    {
      WTF::String::utf8();
      WTF::parseDate();
      v13 = v12;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
          WTF::fastFree(v18, v3);
        else
          --*(_DWORD *)v18;
      }
      if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        v15 = 0;
        v14 = 0.0;
      }
      else
      {
        v14 = v13 / 1000.0;
        v15 = 1;
      }
      v1 = *(_QWORD *)&v14 >> 8;
      v10 = (int *)v17;
      if (!v17)
        goto LABEL_22;
      v11 = *(_DWORD *)v17 - 2;
    }
    else
    {
      LOBYTE(v14) = 0;
      v15 = 0;
    }
    if (v11)
      *v10 = v11;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v10, (WTF::StringImpl *)v3);
LABEL_22:
    v9 = 0x7FF8000000000000;
    v16 = LOBYTE(v14) | (unint64_t)(v1 << 8);
    if (v15)
      v9 = v16;
    goto LABEL_9;
  }
  return *((_QWORD *)this + 20);
}

uint64_t WebCore::ResourceResponseBase::lastModified(WebCore::ResourceResponseBase *this)
{
  uint64_t v1;
  void *v3;
  unint64_t v6;
  unint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  int *v10;
  int v11;
  double v12;
  double v13;
  double v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF *v19;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  if ((*((_WORD *)this + 116) & 0x10) == 0)
  {
    v6 = *((unsigned int *)this + 23);
    if (!(_DWORD)v6)
      goto LABEL_8;
    v7 = 0;
    v8 = (_DWORD **)(*((_QWORD *)this + 10) + 8);
    while (*((_WORD *)v8 - 4) != 50)
    {
      ++v7;
      v8 += 2;
      if (v6 == v7)
        goto LABEL_8;
    }
    if (v7 >= v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1963085FCLL);
    }
    v10 = *v8;
    if (!*v8)
    {
LABEL_8:
      v9 = 0x7FF8000000000000;
LABEL_9:
      *((_QWORD *)this + 21) = v9;
      *((_WORD *)this + 116) |= 0x10u;
      return v9;
    }
    v11 = *v10;
    *v10 += 2;
    v18 = (WTF::StringImpl *)v10;
    if (v10[1])
    {
      WTF::String::utf8();
      WTF::parseDate();
      v13 = v12;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          WTF::fastFree(v19, v3);
        else
          --*(_DWORD *)v19;
      }
      if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        v15 = 0;
        v14 = 0.0;
      }
      else
      {
        v14 = v13 / 1000.0;
        v15 = 1;
      }
      v1 = *(_QWORD *)&v14 >> 8;
      v10 = (int *)v18;
      if (!v18)
        goto LABEL_22;
      v11 = *(_DWORD *)v18 - 2;
    }
    else
    {
      LOBYTE(v14) = 0;
      v15 = 0;
    }
    if (v11)
      *v10 = v11;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v10, (WTF::StringImpl *)v3);
LABEL_22:
    v9 = 0x7FF8000000000000;
    v16 = LOBYTE(v14) | (unint64_t)(v1 << 8);
    if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v17 = v16;
    else
      v17 = 0x7FF8000000000000;
    if (v15)
      v9 = v17;
    goto LABEL_9;
  }
  return *((_QWORD *)this + 21);
}

void WebCore::ResourceResponseBase::contentRange(WebCore::ResourceResponseBase *this)
{
  WTF::StringImpl *v2;
  unint64_t v3;
  unint64_t v4;
  _DWORD **v5;
  int *v6;
  int v7;
  int v8;
  __int128 v9;
  unint64_t v10;
  int *v11;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  if ((*((_WORD *)this + 116) & 0x20) == 0)
  {
    v3 = *((unsigned int *)this + 23);
    if (!(_DWORD)v3)
      goto LABEL_6;
    v4 = 0;
    v5 = (_DWORD **)(*((_QWORD *)this + 10) + 8);
    while (*((_WORD *)v5 - 4) != 23)
    {
      ++v4;
      v5 += 2;
      if (v3 == v4)
        goto LABEL_6;
    }
    if (v4 >= v3)
    {
      __break(0xC471u);
      return;
    }
    v6 = *v5;
    if (!*v5)
    {
LABEL_6:
      v9 = 0uLL;
      v10 = 0x8000000000000000;
LABEL_12:
      *((_OWORD *)this + 11) = v9;
      *((_QWORD *)this + 24) = v10;
      *((_WORD *)this + 116) |= 0x20u;
      return;
    }
    v7 = *v6;
    v8 = v6[1];
    *v6 += 2;
    v11 = v6;
    if (v8)
    {
      WebCore::ParsedContentRange::ParsedContentRange((WebCore::ParsedContentRange *)&v9, (const WTF::String *)&v11);
      v7 = *v6 - 2;
      if (*v6 != 2)
      {
LABEL_11:
        *v6 = v7;
        goto LABEL_12;
      }
    }
    else
    {
      v9 = 0uLL;
      v10 = 0x8000000000000000;
      if (v7)
        goto LABEL_11;
    }
    WTF::StringImpl::destroy((WTF::StringImpl *)v6, v2);
    goto LABEL_12;
  }
}

BOOL WebCore::ResourceResponseBase::isAttachmentWithFilename(WebCore::ResourceResponseBase *this)
{
  WTF::StringImpl *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *i;
  _BOOL8 v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  int v28;
  unint64_t v29;
  int v30;
  int v32;
  int16x8_t *v33;
  int16x8_t v34;
  int16x8_t *v35;
  int8x16_t v36;
  int16x8_t *v37;
  char *v38;
  int16x8_t v39;
  __int16 *v40;
  uint64_t v41;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  v4 = *((unsigned int *)this + 23);
  if (!(_DWORD)v4)
    return 0;
  v5 = 0;
  for (i = (_QWORD *)(*((_QWORD *)this + 10) + 8); *((_WORD *)i - 4) != 18; i += 2)
  {
    if (v4 == ++v5)
      return 0;
  }
  if (v5 >= v4)
  {
    __break(0xC471u);
    JUMPOUT(0x196308BC4);
  }
  v8 = *i;
  if (!*i)
    return 0;
  v9 = *(_DWORD *)v8;
  v10 = *(unsigned int *)(v8 + 4);
  *(_DWORD *)v8 += 2;
  v11 = *(unsigned int *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 8);
  v13 = (v11 >> 2) & 1;
  if (!(_DWORD)v13)
    goto LABEL_88;
  if (!(_DWORD)v10)
    goto LABEL_55;
  v14 = 16;
  if (v10 < 0x10)
    v14 = v10;
  v15 = v14;
  v16 = *(_BYTE **)(v8 + 8);
  do
  {
    if (*v16 == 59)
      goto LABEL_17;
    ++v16;
    --v15;
  }
  while (v15);
  if (v10 < 0x11)
    goto LABEL_100;
  v16 = memchr((void *)(v12 + v14), 59, v10 - v14);
  if (v16)
  {
LABEL_17:
    LODWORD(v17) = (_DWORD)v16 - v12;
    goto LABEL_18;
  }
  LODWORD(v17) = -1;
  while (1)
  {
LABEL_18:
    v2 = (WTF::StringImpl *)(v10 & 0xFFFFFFFEFFFFFFFFLL | (((v11 >> 2) & 1) << 32));
    v18 = v17;
    if ((_DWORD)v13)
      v18 = v17 | 0x100000000;
    if (v10 <= v17)
      v18 = v10 & 0xFFFFFFFEFFFFFFFFLL | (((v11 >> 2) & 1) << 32);
    v19 = v18;
    if (!HIDWORD(v18))
    {
      if (!(_DWORD)v18)
      {
LABEL_24:
        v20 = (unsigned __int16 *)v12;
        goto LABEL_54;
      }
      v26 = 0;
      v27 = (unsigned __int16 *)v12;
      while (1)
      {
        v28 = *v27;
        if ((v28 - 9) >= 5 && v28 != 32)
          break;
        ++v26;
        ++v27;
        if (v18 == v26)
          goto LABEL_55;
      }
      if ((_DWORD)v18 == 1)
      {
        v20 = (unsigned __int16 *)v12;
        if (!(_DWORD)v26)
          goto LABEL_54;
        LODWORD(v29) = 0;
LABEL_86:
        v18 = (v29 - v26 + 1);
        v20 = v27;
        if (v19 - v26 >= v18)
          goto LABEL_54;
      }
      else
      {
        v29 = (v18 - 1);
        while (v29 < v18)
        {
          v30 = *(unsigned __int16 *)(v12 + 2 * v29);
          if ((v30 - 9) < 5 || v30 == 32)
          {
            if ((_DWORD)--v29)
              continue;
          }
          if ((_DWORD)v26)
            goto LABEL_86;
          v20 = (unsigned __int16 *)v12;
          if ((_DWORD)v29 != (_DWORD)v18 - 1)
            goto LABEL_86;
          goto LABEL_54;
        }
      }
      goto LABEL_87;
    }
    if (!(_DWORD)v18)
      goto LABEL_24;
    v21 = 0;
    while (1)
    {
      v22 = *(unsigned __int8 *)(v12 + v21);
      if ((v22 - 9) >= 5 && v22 != 32)
        break;
      if (v18 == ++v21)
        goto LABEL_55;
    }
    if ((_DWORD)v18 != 1)
    {
      v23 = (v18 - 1);
      while (v23 < v18)
      {
        v24 = *(unsigned __int8 *)(v12 + v23);
        if ((v24 - 9) < 5 || v24 == 32)
        {
          if ((_DWORD)--v23)
            continue;
        }
        if (!(_DWORD)v21)
        {
          v20 = (unsigned __int16 *)v12;
          if ((_DWORD)v23 == (_DWORD)v18 - 1)
            goto LABEL_54;
        }
        goto LABEL_38;
      }
      goto LABEL_87;
    }
    v20 = (unsigned __int16 *)v12;
    if (!(_DWORD)v21)
      goto LABEL_54;
    LODWORD(v23) = 0;
LABEL_38:
    v25 = (v23 - v21 + 1);
    if (v19 - v21 >= v25)
      break;
LABEL_87:
    __break(1u);
LABEL_88:
    if (!(_DWORD)v10)
      goto LABEL_55;
    v33 = (int16x8_t *)(v12 + 2 * v10);
    if (v10 <= 0x1F)
    {
      v41 = 2 * v10;
      v40 = (__int16 *)v12;
      while (*v40 != 59)
      {
        ++v40;
        LODWORD(v17) = -1;
        v41 -= 2;
        if (!v41)
          goto LABEL_18;
      }
LABEL_97:
      LODWORD(v17) = -1;
      if (v40 != (__int16 *)v33)
        v17 = ((uint64_t)v40 - v12) >> 1;
    }
    else
    {
      v34.i64[0] = 0x3B003B003B003BLL;
      v34.i64[1] = 0x3B003B003B003BLL;
      v35 = (int16x8_t *)v12;
      do
      {
        v36 = (int8x16_t)vceqq_s16(*v35, v34);
        LOWORD(v3) = vmaxvq_u16((uint16x8_t)v36);
        if (v3)
          goto LABEL_96;
        v37 = v35 + 1;
        v38 = &v35[1].i8[14];
        ++v35;
      }
      while (v38 < (char *)v33);
      if (v37 < v33)
      {
        v39.i64[0] = 0x3B003B003B003BLL;
        v39.i64[1] = 0x3B003B003B003BLL;
        v36 = (int8x16_t)vceqq_s16(v33[-1], v39);
        v39.i16[0] = vmaxvq_u16((uint16x8_t)v36);
        if (v39.i32[0])
        {
          v35 = v33 - 1;
LABEL_96:
          v40 = &v35->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v36))];
          goto LABEL_97;
        }
      }
LABEL_100:
      LODWORD(v17) = -1;
    }
  }
  v20 = (unsigned __int16 *)(v12 + v21);
  v18 = v25 | 0x100000000;
LABEL_54:
  if ((_DWORD)v18 == 10)
  {
    if ((v18 & 0x100000000) != 0)
    {
      if ((*(_BYTE *)v20 & 0xDF) != 0x41
        || (*((_BYTE *)v20 + 1) & 0xDF) != 0x54
        || (v20[1] & 0xDF) != 0x54
        || (*((_BYTE *)v20 + 3) & 0xDF) != 0x41
        || (v20[2] & 0xDF) != 0x43
        || (*((_BYTE *)v20 + 5) & 0xDF) != 0x48
        || (v20[3] & 0xDF) != 0x4D
        || (*((_BYTE *)v20 + 7) & 0xDF) != 0x45
        || (v20[4] & 0xDF) != 0x4E)
      {
        goto LABEL_55;
      }
      v32 = *((unsigned __int8 *)v20 + 9);
    }
    else
    {
      if ((*v20 & 0xFFDF) != 0x41
        || (v20[1] & 0xFFDF) != 0x54
        || (v20[2] & 0xFFDF) != 0x54
        || (v20[3] & 0xFFDF) != 0x41
        || (v20[4] & 0xFFDF) != 0x43
        || (v20[5] & 0xFFDF) != 0x48
        || (v20[6] & 0xFFDF) != 0x4D
        || (v20[7] & 0xFFDF) != 0x45
        || (v20[8] & 0xFFDF) != 0x4E)
      {
        goto LABEL_55;
      }
      v32 = v20[9];
    }
    if ((v32 & 0xFFFFFFDF) != 0x54)
      goto LABEL_55;
    v7 = WebCore::filenameFromHTTPContentDisposition(v12, (uint64_t)v2) != 0;
    v9 = *(_DWORD *)v8 - 2;
    if (*(_DWORD *)v8 == 2)
      goto LABEL_71;
LABEL_56:
    *(_DWORD *)v8 = v9;
  }
  else
  {
LABEL_55:
    v7 = 0;
    if (v9)
      goto LABEL_56;
LABEL_71:
    WTF::StringImpl::destroy((WTF::StringImpl *)v8, v2);
  }
  return v7;
}

uint64_t WebCore::ResourceResponseBase::equalForWebKitLegacyChallengeComparison(WTF **this, const WTF::StringImpl **a2, const WebCore::ResourceResponse *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF *v10;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  WTF *v20;
  const WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  if (((*((unsigned __int8 *)this + 138) ^ *((unsigned __int8 *)a2 + 138)) & 1) != 0)
    return 0;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  result = WTF::equal(*this, *a2, v6);
  if ((_DWORD)result)
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
    result = WTF::equal(this[5], a2[5], v7);
    if ((_DWORD)result)
    {
      WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
      v8 = this[6];
      WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
      if (v8 != a2[6])
        return 0;
      WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
      WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
      result = WTF::equal(this[7], a2[7], v9);
      if (!(_DWORD)result)
        return result;
      v10 = this[30];
      if (!v10)
      {
        if ((*((_BYTE *)this + 138) & 1) != 0)
        {
          v10 = 0;
        }
        else
        {
          WebCore::ResourceResponse::initNSURLResponse((WebCore::ResourceResponse *)this);
          v10 = this[30];
        }
      }
      MEMORY[0x19AEA5508](&v23, -[WTF suggestedFilename](v10, "suggestedFilename"));
      v11 = a2[30];
      if (!v11)
      {
        if ((*((_BYTE *)a2 + 138) & 1) != 0)
        {
          v11 = 0;
        }
        else
        {
          WebCore::ResourceResponse::initNSURLResponse((WebCore::ResourceResponse *)a2);
          v11 = a2[30];
        }
      }
      MEMORY[0x19AEA5508](&v22, -[WTF::StringImpl suggestedFilename](v11, "suggestedFilename"));
      v14 = WTF::equal(v23, v22, v12);
      v15 = v22;
      v22 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v23;
      v23 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy(v16, v13);
          if (!v14)
            return 0;
LABEL_20:
          WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
          v17 = *((unsigned __int16 *)this + 68);
          WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
          if (v17 == *((unsigned __int16 *)a2 + 68))
          {
            WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
            WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 2);
            result = WTF::equal(this[8], a2[8], v18);
            if ((_DWORD)result)
            {
              WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
              WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 2);
              result = WebCore::operator==((uint64_t)(this + 10), (uint64_t)(a2 + 10), v19);
              if ((_DWORD)result)
              {
                v20 = this[30];
                if (!v20)
                {
                  if ((*((_BYTE *)this + 138) & 1) != 0)
                  {
                    v20 = 0;
                  }
                  else
                  {
                    WebCore::ResourceResponse::initNSURLResponse((WebCore::ResourceResponse *)this);
                    v20 = this[30];
                  }
                }
                v21 = a2[30];
                if (!v21)
                {
                  if ((*((_BYTE *)a2 + 138) & 1) != 0)
                  {
                    v21 = 0;
                  }
                  else
                  {
                    WebCore::ResourceResponse::initNSURLResponse((WebCore::ResourceResponse *)a2);
                    v21 = a2[30];
                  }
                }
                return v20 == v21;
              }
            }
            return result;
          }
          return 0;
        }
        *(_DWORD *)v16 -= 2;
      }
      if (!v14)
        return 0;
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceResponseData>::encodeForPersistence(WTF::Persistence *a1, uint64_t a2)
{
  uint64_t v4;

  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::encodeForPersistence((uint64_t)a1, a2 + 88);
  WTF::Persistence::Encoder::operator<<();
  if (!*(_BYTE *)(a2 + 272))
  {
    MEMORY[0x19AEA46BC](a1, 0);
LABEL_3:
    WTF::Persistence::Encoder::operator<<();
    WTF::Persistence::Encoder::operator<<();
    WTF::Persistence::Encoder::operator<<();
    MEMORY[0x19AEA46BC](a1, *(unsigned __int8 *)(a2 + 259));
    WTF::Persistence::Encoder::operator<<();
    WTF::Persistence::Encoder::operator<<();
    JUMPOUT(0x19AEA46BCLL);
  }
  MEMORY[0x19AEA46BC](a1, 1);
  if (*(_BYTE *)(a2 + 272))
  {
    WTF::Persistence::Coder<WebCore::CertificateInfo>::encodeForPersistence(a1);
    goto LABEL_3;
  }
  v4 = std::__throw_bad_optional_access[abi:sn180100]();
  return WTF::Persistence::Coder<WebCore::ResourceResponseData>::decodeForPersistence(v4);
}

void WTF::Persistence::Coder<WebCore::ResourceResponseData>::decodeForPersistence(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  char v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  CFTypeRef v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  char v22;
  _BYTE v23[88];
  WTF::StringImpl *v24;
  _DWORD *v25;
  char v26;
  WTF::StringImpl *v27;
  char v28;
  char v29;
  __int16 v30;
  __int16 v31;
  CFTypeRef cf;
  char v33;
  char v34;
  __int16 v35;
  char v36;
  uint64_t v37[4];
  char v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  uint64_t v45;
  char v46;
  WTF::StringImpl *v47;
  char v48;
  uint64_t v49[5];
  char v50;

  LOBYTE(v49[0]) = 0;
  v50 = 0;
  WTF::Persistence::Coder<WTF::URL>::decodeForPersistence();
  std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>((uint64_t)v49, (uint64_t *)&v27);
  if (v29)
  {
    v5 = v27;
    v27 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  if (!v50)
  {
    *a2 = 0;
    a2[280] = 0;
    return;
  }
  LOBYTE(v47) = 0;
  v48 = 0;
  WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v47);
  if (v48)
  {
    LOBYTE(v45) = 0;
    v46 = 0;
    WTF::Persistence::Decoder::operator>>();
    if (v46
      && (LOBYTE(v43) = 0, v44 = 0, WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v43), v44))
    {
      LOBYTE(v41) = 0;
      v42 = 0;
      WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v41);
      if (v42)
      {
        LOBYTE(v39) = 0;
        v40 = 0;
        WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v39);
        if (v40)
        {
          LOBYTE(v37[0]) = 0;
          v38 = 0;
          WTF::Persistence::Decoder::operator>><WebCore::HTTPHeaderMap,(void *)0>(a1, (uint64_t)v37);
          if (v38)
          {
            LOBYTE(v35) = 0;
            v36 = 0;
            WTF::Persistence::Decoder::operator>>();
            if (v36)
            {
              LOBYTE(cf) = 0;
              v34 = 0;
              WTF::Persistence::Decoder::operator>><std::optional<WebCore::CertificateInfo>,(void *)0>(a1, (uint64_t)&cf);
              if (!v34)
                goto LABEL_44;
              LOBYTE(v27) = 0;
              v28 = 0;
              WTF::Persistence::Decoder::operator>>();
              if (!v28)
                goto LABEL_44;
              v7 = (char)v27;
              if (v27 >= 0xAu)
                goto LABEL_44;
              LOBYTE(v27) = 0;
              v28 = 0;
              WTF::Persistence::Decoder::operator>>();
              if (!v28)
                goto LABEL_44;
              v8 = (char)v27;
              if (v27 >= 6u)
                goto LABEL_44;
              LOBYTE(v27) = 0;
              v28 = 0;
              WTF::Persistence::Decoder::operator>>();
              if (!v28)
                goto LABEL_44;
              v9 = (char)v27;
              if ((v27 & 0xFC) != 0)
                goto LABEL_44;
              v31 = 0;
              WTF::Persistence::Decoder::operator>>();
              if (!HIBYTE(v31))
                goto LABEL_44;
              LOBYTE(v27) = 0;
              v28 = 0;
              WTF::Persistence::Decoder::operator>>();
              if (!v28)
                goto LABEL_44;
              v10 = v27;
              LOBYTE(v27) = 0;
              v28 = 0;
              WTF::Persistence::Decoder::operator>>();
              if (v28 && (v11 = v27, v30 = 0, WTF::Persistence::Decoder::operator>>(), HIBYTE(v30)))
              {
                if (!v50
                  || !v48
                  || !v46
                  || !v44
                  || !v36
                  || !v42
                  || !v40
                  || !v38
                  || (v23[0] = 0, v26 = 0, !HIBYTE(v31))
                  || !v34)
                {
                  __break(1u);
                  return;
                }
                LOBYTE(v21) = 0;
                v22 = 0;
                if (v33)
                {
                  v12 = cf;
                  cf = 0;
                  v22 = 1;
                  v21 = v12;
                  WebCore::ResourceResponseData::ResourceResponseData((uint64_t)&v27, v49, (uint64_t *)&v47, v45, (uint64_t *)&v43, v35, (uint64_t *)&v41, (uint64_t *)&v39, v37, (uint64_t)v23, v7, v8, v9, v31 != 0, v10 != 0, v11 != 0, v30 != 0, (uint64_t)&v21);
                  WebCore::ResourceResponseData::ResourceResponseData((uint64_t)a2, (uint64_t *)&v27);
                  a2[280] = 1;
                  WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v27, v13);
                  if (v12)
                    CFRelease(v12);
                }
                else
                {
                  WebCore::ResourceResponseData::ResourceResponseData((uint64_t)&v27, v49, (uint64_t *)&v47, v45, (uint64_t *)&v43, v35, (uint64_t *)&v41, (uint64_t *)&v39, v37, (uint64_t)v23, v7, v8, v9, v31 != 0, v10 != 0, v11 != 0, v30 != 0, (uint64_t)&v21);
                  WebCore::ResourceResponseData::ResourceResponseData((uint64_t)a2, (uint64_t *)&v27);
                  a2[280] = 1;
                  WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v27, v20);
                }
                if (v26)
                {
                  if (v25)
                    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v25, v6);
                  if (v24)
                  {
                    if (*(_DWORD *)v24 == 2)
                      WTF::StringImpl::destroy(v24, v6);
                    else
                      *(_DWORD *)v24 -= 2;
                  }
                }
              }
              else
              {
LABEL_44:
                *a2 = 0;
                a2[280] = 0;
              }
              if (v34)
              {
                if (v33)
                {
                  v14 = cf;
                  cf = 0;
                  if (v14)
                    CFRelease(v14);
                }
              }
            }
            else
            {
              *a2 = 0;
              a2[280] = 0;
            }
            if (v38)
              WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)v37, v6);
          }
          else
          {
            *a2 = 0;
            a2[280] = 0;
          }
          if (v40)
          {
            v15 = v39;
            v39 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v6);
              else
                *(_DWORD *)v15 -= 2;
            }
          }
        }
        else
        {
          *a2 = 0;
          a2[280] = 0;
        }
        if (v42)
        {
          v16 = v41;
          v41 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v6);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
      }
      else
      {
        *a2 = 0;
        a2[280] = 0;
      }
      if (v44)
      {
        v17 = v43;
        v43 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v6);
          else
            *(_DWORD *)v17 -= 2;
        }
      }
    }
    else
    {
      *a2 = 0;
      a2[280] = 0;
    }
    if (v48)
    {
      v18 = v47;
      v47 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v6);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[280] = 0;
  }
  if (v50)
  {
    v19 = (WTF::StringImpl *)v49[0];
    v49[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v6);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
}

void WebCore::SynchronousLoaderClient::~SynchronousLoaderClient(WebCore::SynchronousLoaderClient *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  const void *v11;
  void *v12;
  WTF *v13;

  v3 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::Deque<std::unique_ptr<WTF::Function<void ()(void)>>,0ul>::destroyAll((unint64_t *)(v3 + 16), a2);
      v13 = *(WTF **)(v3 + 32);
      if (v13)
      {
        *(_QWORD *)(v3 + 32) = 0;
        *(_DWORD *)(v3 + 40) = 0;
        WTF::fastFree(v13, v12);
      }
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  v6 = (const void *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF *)*((_QWORD *)this + 34);
  if (v10)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v11)
    CFRelease(v11);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::SynchronousLoaderClient *)((char *)this + 16), (WTF::StringImpl *)a2);
}

{
  WebCore::SynchronousLoaderClient::~SynchronousLoaderClient(this, a2);
  JUMPOUT(0x19AEA7644);
}

void WebCore::SynchronousLoaderClient::willSendRequestAsync(uint64_t a1, uint64_t a2, WebCore::ResourceRequest *this, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  const void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  void *v22;
  CFTypeRef v23;
  WebCore::FormData *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  CFTypeRef v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29[2];
  __int128 v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  CFTypeRef v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  char v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WebCore::FormData *v44;
  char v45;
  char v46;
  char v47;
  CFTypeRef cf;
  WTF::StringImpl *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v8 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(v8 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v8 + 16));
    *(_BYTE *)(v8 + 200) |= 1u;
  }
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if (WTF::protocolHostAndPortAreEqual())
  {
    v9 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v9 + 16))(v9, this);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    WebCore::SynchronousLoaderClient::platformBadResponseError((WebCore::ResourceError *)&v28);
    WebCore::ResourceErrorBase::operator=(a1 + 288, (uint64_t *)&v28);
    v11 = v33;
    v33 = 0;
    v12 = *(const void **)(a1 + 352);
    *(_QWORD *)(a1 + 352) = v11;
    if (v12)
    {
      CFRelease(v12);
      v27 = v33;
      *(_BYTE *)(a1 + 360) = v34;
      v33 = 0;
      if (v27)
        CFRelease(v27);
    }
    else
    {
      *(_BYTE *)(a1 + 360) = v34;
      v33 = 0;
    }
    v13 = v32;
    v32 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v29[0];
    v29[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v28;
    v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }
    v49 = 0;
    WTF::URL::invalidate((WTF::URL *)&v49);
    v16 = v49;
    if (v49)
      *(_DWORD *)v49 += 2;
    v28 = v16;
    *(_OWORD *)v29 = v50;
    v30 = v51;
    v31 = 0;
    WTF::URL::invalidate((WTF::URL *)&v31);
    v35 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v36 = v52;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0x10000;
    v18 = v41 & 0x80 | 4;
    v41 = v18;
    v42 = 0;
    v19 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *(_DWORD *)v19 += 2;
      v18 = v41;
    }
    v43 = v19;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = v47 & 0xE0 | 5;
    v41 = v18 | 2;
    v20 = v49;
    v49 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    cf = 0;
    v21 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, &v28);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v23 = cf;
    cf = 0;
    if (v23)
      CFRelease(v23);
    v24 = v44;
    v44 = 0;
    if (v24)
      WTF::RefCounted<WebCore::FormData>::deref(v24, v22);
    v25 = v43;
    v43 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v42;
    v42 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v26 -= 2;
    }
    WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::ResourceRequestBase::RequestData *)&v28, (WTF::StringImpl *)v22);
  }
}

uint64_t WebCore::SynchronousLoaderClient::shouldUseCredentialStorage(WebCore::SynchronousLoaderClient *this, WebCore::ResourceHandle *a2)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t WebCore::SynchronousLoaderClient::canAuthenticateAgainstProtectionSpaceAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebCore::SynchronousLoaderClient::didReceiveResponseAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  const void *v8;
  uint64_t v9;

  WebCore::ResourceResponseBase::operator=(a1 + 16, (uint64_t *)a3);
  v7 = *(_QWORD *)(a3 + 240);
  *(_QWORD *)(a3 + 240) = 0;
  v8 = *(const void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v7;
  if (v8)
    CFRelease(v8);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a3 + 248);
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void *WebCore::SynchronousLoaderClient::didReceiveData(void *this, WebCore::ResourceHandle *a2, const WebCore::SharedBuffer *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  char *v20;

  v4 = (uint64_t)this;
  if (*((_DWORD *)a3 + 5))
  {
    v5 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 8);
    v6 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v6 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_22;
    }
    v20 = &v19;
    this = (void *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v20, v5 + 8);
    v7 = this;
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_QWORD *)a3 + 6);
  if (!v8)
    return this;
  v9 = *(unsigned int *)(v4 + 284);
  v10 = v8 + v9;
  v11 = *(unsigned int *)(v4 + 280);
  if (v8 + v9 > v11)
  {
    v13 = v11 + (v11 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= v10)
      v15 = v8 + v9;
    else
      v15 = v14;
    if (HIDWORD(v15))
    {
LABEL_22:
      __break(0xC471u);
      JUMPOUT(0x196309B68);
    }
    v16 = *(void **)(v4 + 272);
    v17 = (void *)WTF::fastMalloc((WTF *)v15);
    *(_DWORD *)(v4 + 280) = v15;
    *(_QWORD *)(v4 + 272) = v17;
    memcpy(v17, v16, v9);
    if (v16)
    {
      if (*(void **)(v4 + 272) == v16)
      {
        *(_QWORD *)(v4 + 272) = 0;
        *(_DWORD *)(v4 + 280) = 0;
      }
      WTF::fastFree((WTF *)v16, v18);
    }
  }
  v12 = *(unsigned int *)(v4 + 284);
  if (v10 < v12)
    goto LABEL_22;
  this = memcpy((void *)(*(_QWORD *)(v4 + 272) + v12), v7, v8);
  *(_DWORD *)(v4 + 284) = v10;
  return this;
}

void WebCore::SynchronousLoaderClient::didFinishLoading(WebCore::SynchronousLoaderClient *this, WebCore::ResourceHandle *a2, const WebCore::NetworkLoadMetrics *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  int v9;
  void *v10;
  uint64_t v11;
  const void *v12;

  v4 = (unsigned __int8 *)*((_QWORD *)this + 46);
  v5 = v4 + 8;
  if (__ldaxr(v4 + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4 + 8, a2, a3);
LABEL_5:
  v4[48] = 1;
  v7 = v4 + 9;
  v8 = atomic_load(v4 + 9);
  if ((v8 & 1) != 0)
  {
    atomic_store(0, v7);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v7, a2);
  }
  v9 = __ldxr(v5);
  if (v9 != 1)
  {
    __clrex();
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 8));
    if (!a2)
      return;
    goto LABEL_13;
  }
  if (__stlxr(0, v5))
    goto LABEL_12;
  if (!a2)
    return;
LABEL_13:
  v10 = *(void **)(*((_QWORD *)a2 + 2) + 488);
  if (v10)
  {
    objc_msgSend(v10, "detachHandle", a3);
    v11 = *((_QWORD *)a2 + 2);
    v12 = *(const void **)(v11 + 488);
    *(_QWORD *)(v11 + 488) = 0;
    if (v12)
      CFRelease(v12);
  }
}

void WebCore::SynchronousLoaderClient::didFail(WebCore::SynchronousLoaderClient *this, WebCore::ResourceHandle *a2, const WebCore::ResourceError *a3)
{
  const void *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  int v11;
  void *v12;
  uint64_t v13;
  const void *v14;

  WebCore::ResourceError::operator=((uint64_t)this + 288, (uint64_t)a3);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 46);
  v7 = v6 + 8;
  if (__ldaxr(v6 + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v6 + 8);
LABEL_5:
  v6[48] = 1;
  v9 = v6 + 9;
  v10 = atomic_load(v6 + 9);
  if ((v10 & 1) != 0)
  {
    atomic_store(0, v9);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v9, v5);
  }
  v11 = __ldxr(v7);
  if (v11 != 1)
  {
    __clrex();
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 8));
    if (!a2)
      return;
    goto LABEL_13;
  }
  if (__stlxr(0, v7))
    goto LABEL_12;
  if (!a2)
    return;
LABEL_13:
  v12 = *(void **)(*((_QWORD *)a2 + 2) + 488);
  if (v12)
  {
    objc_msgSend(v12, "detachHandle");
    v13 = *((_QWORD *)a2 + 2);
    v14 = *(const void **)(v13 + 488);
    *(_QWORD *)(v13 + 488) = 0;
    if (v14)
      CFRelease(v14);
  }
}

BOOL WebCore::certificatesMatch(WebCore *this, __SecTrust *a2, __SecTrust *a3)
{
  BOOL v3;
  const __CFArray *v5;
  CFArrayRef v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v17;

  v3 = 0;
  if (!this || !a2)
    return v3;
  v5 = SecTrustCopyCertificateChain(this);
  v6 = SecTrustCopyCertificateChain(a2);
  v7 = v6;
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    if (v7)
    {
LABEL_5:
      v9 = CFArrayGetCount(v7);
      goto LABEL_8;
    }
  }
  else
  {
    Count = 0;
    if (v6)
      goto LABEL_5;
  }
  v9 = 0;
LABEL_8:
  if (Count != v9)
  {
    v3 = 0;
    goto LABEL_17;
  }
  if (Count >= 1)
  {
    v3 = 0;
    for (i = 0; i != Count; v3 = i >= Count)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
      if (!ValueAtIndex)
      {
        v17 = CFArrayGetValueAtIndex(v7, i);
        if (v17)
          CFRetain(v17);
LABEL_26:
        __break(0xC471u);
        JUMPOUT(0x196309E74);
      }
      v12 = ValueAtIndex;
      CFRetain(ValueAtIndex);
      v13 = CFArrayGetValueAtIndex(v7, i);
      if (!v13)
        goto LABEL_26;
      v14 = v13;
      CFRetain(v13);
      v15 = CFEqual(v12, v14);
      CFRelease(v14);
      CFRelease(v12);
      if (!v15)
        break;
      ++i;
    }
LABEL_17:
    if (!v7)
      goto LABEL_19;
    goto LABEL_18;
  }
  v3 = 1;
  if (v7)
LABEL_18:
    CFRelease(v7);
LABEL_19:
  if (v5)
    CFRelease(v5);
  return v3;
}

uint64_t WebCore::CertificateInfo::secTrustFromCertificateChain@<X0>(WebCore::CertificateInfo *this@<X0>, SecTrustRef *a2@<X8>)
{
  uint64_t result;
  SecTrustRef v5;
  SecTrustRef trust;

  trust = 0;
  result = SecTrustCreateWithCertificates(this, 0, &trust);
  v5 = trust;
  if ((_DWORD)result)
    v5 = 0;
  *a2 = v5;
  return result;
}

CFArrayRef WebCore::CertificateInfo::certificateChainFromSecTrust@<X0>(WebCore::CertificateInfo *this@<X0>, CFArrayRef *a2@<X8>)
{
  CFArrayRef result;

  result = SecTrustCopyCertificateChain(this);
  *a2 = result;
  return result;
}

void WebCore::CertificateInfo::summary(SecTrustRef *this@<X0>, uint64_t a2@<X8>)
{
  const __CFArray *v3;
  WTF::StringImpl *v4;
  const __CFArray *v5;
  __SecCertificate *ValueAtIndex;
  __SecCertificate *v7;
  CFTypeID v8;
  CFStringRef v9;
  _OWORD v10[2];
  __int128 v11;
  uint64_t v12;

  v12 = 0;
  v11 = 0u;
  memset(v10, 0, sizeof(v10));
  v3 = SecTrustCopyCertificateChain(*this);
  if (!v3)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
LABEL_10:
    WebCore::CertificateSummary::~CertificateSummary((WebCore::CertificateSummary *)v10, v4);
    return;
  }
  v5 = v3;
  if (!CFArrayGetCount(v3))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
LABEL_9:
    CFRelease(v5);
    goto LABEL_10;
  }
  ValueAtIndex = (__SecCertificate *)CFArrayGetValueAtIndex(v5, 0);
  v7 = ValueAtIndex;
  if (!ValueAtIndex || (v8 = CFGetTypeID(ValueAtIndex), v8 == SecCertificateGetTypeID()))
  {
    v9 = SecCertificateCopySubjectSummary(v7);
    MEMORY[0x19AEA5508](a2, v9);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)((char *)v10 + 8);
    *(_QWORD *)&v10[0] = 0;
    *((_QWORD *)&v10[1] + 1) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)&v11 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *((_QWORD *)&v11 + 1) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v12 = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 56) = 1;
    if (v9)
      CFRelease(v9);
    goto LABEL_9;
  }
  __break(0xC471u);
}

WebCore::DNSResolveQueueCFNet *WebCore::DNSResolveQueueCFNet::DNSResolveQueueCFNet(WebCore::DNSResolveQueueCFNet *this)
{
  *(_QWORD *)this = off_1E341DA30;
  *((_BYTE *)this + 8) = 1;
  WebCore::Timer::Timer<WebCore::DNSResolveQueue,WebCore::DNSResolveQueue>((WebCore::DNSResolveQueueCFNet *)((char *)this + 16), (uint64_t)this, (uint64_t)WebCore::DNSResolveQueue::timerFired, 0);
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_QWORD *)this = &off_1E341DD08;
  return this;
}

void WebCore::DNSResolveQueueCFNet::~DNSResolveQueueCFNet(WebCore::DNSResolveQueueCFNet *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 12);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WTF *)-1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
            {
              v7 = *((_QWORD *)v6 + 1);
              *((_QWORD *)v6 + 1) = 0;
              if (v7)
                (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
              WTF::fastFree(v6, a2);
            }
            else
            {
              --*(_DWORD *)v6;
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  *(_QWORD *)this = off_1E341DA30;
  v8 = (WTF::StringImpl **)*((_QWORD *)this + 9);
  if (v8)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v8, (WTF::StringImpl *)a2);
  *((_QWORD *)this + 2) = off_1E31F7378;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WebCore::TimerBase::~TimerBase((WebCore::DNSResolveQueueCFNet *)((char *)this + 16));
}

{
  WebCore::DNSResolveQueueCFNet::~DNSResolveQueueCFNet(this, a2);
  JUMPOUT(0x19AEA7644);
}

void WebCore::DNSResolveQueueCFNet::updateIsUsingProxy(WebCore::DNSResolveQueueCFNet *this)
{
  CFDictionaryRef v2;
  const __CFDictionary *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  const void **v16;
  CFTypeRef *v17;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const __CFDictionary *v20;
  const void *v21;
  CFURLRef v22;
  CFURLRef v23;
  WTF::StringImpl *v24;
  CFURLRef url;
  WTF::StringImpl *v26[5];
  WTF::StringImpl *v27[5];
  CFURLRef v28;

  v2 = CFNetworkCopySystemProxySettings();
  if (v2)
  {
    v3 = v2;
    v26[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v26);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    url = v27[0];
    MEMORY[0x19AEA52F8](v27, v26, &url, 0);
    WTF::URL::createCFURL((WTF::URL *)v27);
    v5 = v27[0];
    v27[0] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = url;
    url = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v26[0];
    v26[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    v26[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v26);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    MEMORY[0x19AEA52F8](v27, v26, &v24, 0);
    WTF::URL::createCFURL((WTF::URL *)v27);
    v9 = v27[0];
    v27[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v24;
    v24 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v26[0];
    v26[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = CFNetworkCopyProxiesForURL(v28, v3);
    v13 = CFNetworkCopyProxiesForURL(url, v3);
    Count = CFArrayGetCount(v12);
    v15 = CFArrayGetCount(v13);
    v16 = (const void **)MEMORY[0x1E0C93158];
    v17 = (CFTypeRef *)MEMORY[0x1E0C93160];
    if (Count == 1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v12, 0);
      Value = CFDictionaryGetValue(ValueAtIndex, *v16);
      Count = CFEqual(Value, *v17) == 0;
    }
    if (v15 == 1)
    {
      v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, 0);
      v21 = CFDictionaryGetValue(v20, *v16);
      v15 = CFEqual(v21, *v17) == 0;
    }
    *((_BYTE *)this + 8) = (Count | v15) != 0;
    if (v13)
      CFRelease(v13);
    if (v12)
      CFRelease(v12);
    v22 = url;
    url = 0;
    if (v22)
      CFRelease(v22);
    v23 = v28;
    v28 = 0;
    if (v23)
      CFRelease(v23);
    CFRelease(v3);
  }
  else
  {
    *((_BYTE *)this + 8) = 0;
  }
}

void WebCore::DNSResolveQueueCFNet::performDNSLookup(uint64_t a1, uint64_t *a2)
{
  const char *v3;
  void *v4;
  nw_endpoint_t host;
  const void *v6;
  nw_parameters_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  _QWORD *v11;
  WTF *v12;

  WTF::String::utf8();
  if (v12)
    v3 = (char *)v12 + 16;
  else
    v3 = 0;
  host = nw_endpoint_create_host(v3, "0");
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v4);
    else
      --*(_DWORD *)v12;
  }
  v6 = (const void *)nw_context_create();
  v7 = nw_parameters_create();
  nw_context_set_privacy_level();
  nw_parameters_set_context();
  v8 = (const void *)nw_resolver_create_with_endpoint();
  v9 = v8;
  if (v8)
    CFRetain(v8);
  v10 = *a2;
  *a2 = 0;
  v11 = malloc_type_malloc(0x30uLL, 0x10E00407C3E749EuLL);
  *v11 = MEMORY[0x1E0C809A0];
  v11[1] = 50331650;
  v11[2] = WTF::BlockPtr<void ()(nw_resolver_status_t,nw_array *)>::fromCallable<WebCore::DNSResolveQueueCFNet::performDNSLookup(WTF::String const&,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>> &&)::$_0>(WebCore::DNSResolveQueueCFNet::performDNSLookup(WTF::String const&,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>> &&)::$_0)::{lambda(void *,nw_resolver_status_t,nw_array *)#1}::__invoke;
  v11[3] = &WTF::BlockPtr<void ()(nw_resolver_status_t,nw_array *)>::fromCallable<WebCore::DNSResolveQueueCFNet::performDNSLookup(WTF::String const&,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>> &&)::$_0>(WebCore::DNSResolveQueueCFNet::performDNSLookup(WTF::String const&,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>> &&)::$_0)::descriptor;
  v11[4] = v9;
  v11[5] = v10;
  nw_resolver_set_update_handler();
  _Block_release(v11);
  if (v9)
    CFRelease(v9);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  if (host)
    CFRelease(host);
}

void WebCore::DNSResolveQueueCFNet::platformResolve(WebCore::DNSResolveQueueCFNet *this, const WTF::String *a2)
{
  _QWORD *v3;
  WTF *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E341DDB0;
  v4 = (WTF *)WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v4 = 1;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 1) = v3;
  v8 = v4;
  WebCore::DNSResolveQueueCFNet::performDNSLookup((uint64_t)a2, (uint64_t *)&v8);
  v6 = v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v7 = *((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      WTF::fastFree(v6, v5);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
}

void WebCore::DNSResolveQueueCFNet::resolve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WTF *v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;

  v8 = (WTF *)WTF::fastMalloc((WTF *)0x20);
  v9 = *a4;
  *a4 = 0;
  *((_QWORD *)v8 + 1) = v9;
  *((_QWORD *)v8 + 2) = a3;
  *((_QWORD *)v8 + 3) = 1;
  *(_DWORD *)v8 = 2;
  v35 = v8;
  WebCore::DNSResolveQueueCFNet::performDNSLookup(a2, (uint64_t *)&v35);
  v11 = v35;
  if (v35)
  {
    if (*(_DWORD *)v35 == 1)
    {
      v33 = *((_QWORD *)v35 + 1);
      *((_QWORD *)v35 + 1) = 0;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      WTF::fastFree(v11, v10);
    }
    else
    {
      --*(_DWORD *)v35;
    }
  }
  v14 = *(_QWORD *)(a1 + 96);
  v13 = (uint64_t *)(a1 + 96);
  v12 = v14;
  if (v14
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v13, 8u, 0), (v12 = *v13) != 0))
  {
    v15 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = (_QWORD *)(v12 + 16 * v19);
  v21 = *v20;
  if (!*v20)
  {
LABEL_13:
    v24 = (WTF *)v20[1];
    *v20 = a3;
    v20[1] = v8;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        v34 = *((_QWORD *)v24 + 1);
        *((_QWORD *)v24 + 1) = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        WTF::fastFree(v24, v10);
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
    v25 = *v13;
    if (*v13)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *v13;
    if (*v13)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        return;
    }
    else
    {
      if (3 * v30 > 4 * v29)
        return;
      if (!(_DWORD)v30)
      {
        v31 = 8;
        goto LABEL_33;
      }
    }
    v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
LABEL_33:
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v13, v31, (uint64_t)v20);
    return;
  }
  v22 = 0;
  v23 = 1;
  while (v21 != a3)
  {
    if (v21 == -1)
      v22 = v20;
    v19 = (v19 + v23) & v15;
    v20 = (_QWORD *)(v12 + 16 * v19);
    v21 = *v20;
    ++v23;
    if (!*v20)
    {
      if (v22)
      {
        *v22 = 0;
        v22[1] = 0;
        --*(_DWORD *)(*v13 - 16);
        v20 = v22;
      }
      goto LABEL_13;
    }
  }
  if (*(_DWORD *)v8 == 1)
  {
    v32 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    WTF::fastFree(v8, v10);
  }
  else
  {
    --*(_DWORD *)v8;
  }
}

uint64_t *WebCore::DNSResolveQueueCFNet::stopResolve(WebCore::DNSResolveQueueCFNet *this, void *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  void (**v24)(WebCore::DNSResolveQueueCFNet *__hidden);
  uint64_t v25;
  _DWORD v26[4];
  int v27;
  char v28;

  v4 = *((_QWORD *)this + 12);
  result = (uint64_t *)((char *)this + 96);
  v3 = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(void **)(v3 + 16 * v9);
    if (v10 != a2)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(void **)(v3 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_8;
      }
      v9 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    v12 = *(unsigned int *)(v3 - 4);
    if (v9 != v12)
    {
      v13 = (_QWORD *)(v3 + 16 * v9);
      v14 = v13 + 1;
      v15 = v13[1];
      if (v15)
      {
        *v14 = 0;
        v3 = *result;
        if (!*result)
          goto LABEL_13;
        v12 = *(unsigned int *)(v3 - 4);
      }
      v3 += 16 * v12;
      if ((_QWORD *)v3 == v13)
      {
LABEL_24:
        if (v15)
        {
          v26[0] = 2;
          v27 = 1;
          v22 = *(_QWORD *)(v15 + 8);
          if (v22)
          {
            *(_QWORD *)(v15 + 8) = 0;
            (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v22 + 16))(v22, v26);
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          }
          if (*(_BYTE *)(v15 + 24))
          {
            v23 = *(_QWORD *)(v15 + 16);
            {
              v24 = (void (**)(WebCore::DNSResolveQueueCFNet *__hidden))WebCore::DNSResolveQueue::singleton(void)::queue;
            }
            else
            {
              WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)off_1E341DA30;
              byte_1EE2F9148 = 1;
              v25 = v23;
              WebCore::Timer::Timer<WebCore::DNSResolveQueue,WebCore::DNSResolveQueue>((WebCore::TimerBase *)&unk_1EE2F9150, (uint64_t)&WebCore::DNSResolveQueue::singleton(void)::queue, (uint64_t)WebCore::DNSResolveQueue::timerFired, 0);
              v23 = v25;
              *((_QWORD *)&xmmword_1EE2F9180 + 1) = 0;
              dword_1EE2F9190 = 0;
              qword_1EE2F9198 = 0;
              qword_1EE2F91A0 = 0;
              v24 = &off_1E341DD08;
              WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)&off_1E341DD08;
            }
            ((void (*)(uint64_t *, uint64_t))v24[3])(&WebCore::DNSResolveQueue::singleton(void)::queue, v23);
          }
          if (v27 != -1)
            ((void (*)(char *, _DWORD *))off_1E341DD58[v27])(&v28, v26);
          return (uint64_t *)WTF::RefCounted<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>::deref((WTF *)v15, a2);
        }
        return result;
      }
LABEL_13:
      if ((_QWORD *)v3 != v13)
      {
        *v13 = -1;
        *v14 = 0;
        ++*(_DWORD *)(*result - 16);
        v16 = *result;
        v17 = *result ? *(_DWORD *)(v16 - 12) - 1 : -1;
        *(_DWORD *)(v16 - 12) = v17;
        v18 = *result;
        if (*result)
        {
          v19 = 6 * *(_DWORD *)(v18 - 12);
          v20 = *(_DWORD *)(v18 - 4);
          if (v19 < v20 && v20 >= 9)
            result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(result, v20 >> 1, 0);
        }
      }
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t WebCore::ResourceResponseData::ResourceResponseData(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, __int16 a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, uint64_t a18)
{
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;

  v18 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v18;
  v19 = *(_DWORD *)(result + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(result + 8) = v19;
  v20 = v19 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(result + 8) = v20;
  v21 = v20 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(result + 8) = v21;
  v22 = v21 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(result + 8) = v22;
  *(_DWORD *)(result + 8) = a2[1] & 0xFFFFFFC0 | v22 & 0x3F;
  *(_OWORD *)(result + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(result + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(result + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  v23 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 40) = v23;
  *(_QWORD *)(result + 48) = a4;
  v24 = *a5;
  *a5 = 0;
  *(_QWORD *)(result + 56) = v24;
  *(_WORD *)(result + 64) = a6;
  v25 = *a7;
  *a7 = 0;
  *(_QWORD *)(result + 72) = v25;
  v26 = *a8;
  *a8 = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 80) = v26;
  v27 = *a9;
  *a9 = 0;
  *(_QWORD *)(result + 88) = v27;
  LODWORD(v27) = *((_DWORD *)a9 + 2);
  *((_DWORD *)a9 + 2) = 0;
  *(_DWORD *)(result + 96) = v27;
  LODWORD(v27) = *((_DWORD *)a9 + 3);
  *((_DWORD *)a9 + 3) = 0;
  *(_DWORD *)(result + 100) = v27;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  v28 = a9[2];
  a9[2] = 0;
  *(_QWORD *)(result + 104) = v28;
  LODWORD(v28) = *((_DWORD *)a9 + 6);
  *((_DWORD *)a9 + 6) = 0;
  *(_DWORD *)(result + 112) = v28;
  LODWORD(v28) = *((_DWORD *)a9 + 7);
  *((_DWORD *)a9 + 7) = 0;
  *(_BYTE *)(result + 120) = 0;
  *(_DWORD *)(result + 116) = v28;
  *(_BYTE *)(result + 248) = 0;
  if (*(_BYTE *)(a10 + 128))
  {
    v29 = *(_OWORD *)(a10 + 16);
    *(_OWORD *)(result + 120) = *(_OWORD *)a10;
    *(_OWORD *)(result + 136) = v29;
    v30 = *(_OWORD *)(a10 + 32);
    v31 = *(_OWORD *)(a10 + 48);
    v32 = *(_OWORD *)(a10 + 64);
    *(_QWORD *)(result + 200) = *(_QWORD *)(a10 + 80);
    *(_OWORD *)(result + 168) = v31;
    *(_OWORD *)(result + 184) = v32;
    *(_OWORD *)(result + 152) = v30;
    v33 = *(_QWORD *)(a10 + 88);
    *(_QWORD *)(a10 + 88) = 0;
    *(_QWORD *)(result + 208) = v33;
    v34 = *(_OWORD *)(a10 + 96);
    *(_QWORD *)(result + 232) = *(_QWORD *)(a10 + 112);
    *(_OWORD *)(result + 216) = v34;
    v35 = *(_QWORD *)(a10 + 120);
    *(_QWORD *)(a10 + 120) = 0;
    *(_QWORD *)(result + 240) = v35;
    *(_BYTE *)(result + 248) = 1;
  }
  *(_BYTE *)(result + 256) = a11;
  *(_BYTE *)(result + 257) = a12;
  *(_BYTE *)(result + 258) = a13;
  *(_BYTE *)(result + 259) = a14;
  *(_BYTE *)(result + 260) = a15;
  *(_BYTE *)(result + 261) = a16;
  *(_BYTE *)(result + 262) = a17;
  *(_BYTE *)(result + 264) = 0;
  *(_BYTE *)(result + 272) = 0;
  if (*(_BYTE *)(a18 + 8))
  {
    v36 = *(const void **)a18;
    *(_QWORD *)(result + 264) = *(_QWORD *)a18;
    if (v36)
    {
      v37 = result;
      CFRetain(v36);
      result = v37;
    }
    *(_BYTE *)(result + 272) = 1;
  }
  return result;
}

void WTF::BlockPtr<void ()(nw_resolver_status_t,nw_array *)>::fromCallable<WebCore::DNSResolveQueueCFNet::performDNSLookup(WTF::String const&,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>> &&)::$_0>(WebCore::DNSResolveQueueCFNet::performDNSLookup(WTF::String const&,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  WTF *v3;
  const void *v4;
  uint64_t v5;

  v3 = *(WTF **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    CFRelease(v4);
}

void WTF::BlockPtr<void ()(nw_resolver_status_t,nw_array *)>::fromCallable<WebCore::DNSResolveQueueCFNet::performDNSLookup(WTF::String const&,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>> &&)::$_0>(WebCore::DNSResolveQueueCFNet::performDNSLookup(WTF::String const&,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>> &&)::$_0)::{lambda(void *,nw_resolver_status_t,nw_array *)#1}::__invoke(uint64_t a1, int a2, uint64_t a3)
{
  const void *v3;
  uint64_t v4;
  unint64_t count;
  unint64_t v6;
  int v7;
  WTF *v8;
  unsigned int v9;
  uint64_t v10;
  NSObject *object_at_index;
  const sockaddr *address;
  void *v13;
  int sa_family;
  int v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  void (**v32)(WebCore::DNSResolveQueueCFNet *__hidden);
  uint64_t v33;
  void (**v34)(WebCore::DNSResolveQueueCFNet *__hidden);
  uint64_t v35;
  void (**v36)(WebCore::DNSResolveQueueCFNet *__hidden);
  WTF *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  char v41;
  char v42;

  if (a2 == 1)
    return;
  v3 = *(const void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (!a3)
  {
    LODWORD(v39) = 1;
    v40 = 1;
    v23 = *(_QWORD *)(v4 + 8);
    if (v23)
    {
      *(_QWORD *)(v4 + 8) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v23 + 16))(v23, &v39);
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
    if (*(_BYTE *)(v4 + 24))
    {
      v33 = *(_QWORD *)(v4 + 16);
      {
        v34 = (void (**)(WebCore::DNSResolveQueueCFNet *__hidden))WebCore::DNSResolveQueue::singleton(void)::queue;
      }
      else
      {
        WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)off_1E341DA30;
        byte_1EE2F9148 = 1;
        WebCore::Timer::Timer<WebCore::DNSResolveQueue,WebCore::DNSResolveQueue>((WebCore::TimerBase *)&unk_1EE2F9150, (uint64_t)&WebCore::DNSResolveQueue::singleton(void)::queue, (uint64_t)WebCore::DNSResolveQueue::timerFired, 0);
        *((_QWORD *)&xmmword_1EE2F9180 + 1) = 0;
        dword_1EE2F9190 = 0;
        qword_1EE2F9198 = 0;
        qword_1EE2F91A0 = 0;
        v34 = &off_1E341DD08;
        WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)&off_1E341DD08;
      }
      ((void (*)(uint64_t *, uint64_t))v34[3])(&WebCore::DNSResolveQueue::singleton(void)::queue, v33);
    }
    nw_resolver_cancel();
    if (v40 != -1)
      ((void (*)(WTF **, __int128 *))off_1E341DD58[v40])(&v37, &v39);
    goto LABEL_37;
  }
  count = nw_array_get_count();
  v37 = 0;
  v38 = 0;
  if (!count)
    goto LABEL_30;
  v6 = count;
  if (count >= 0xCCCCCCD)
  {
    __break(0xC471u);
    goto LABEL_69;
  }
  v7 = 20 * count;
  v8 = (WTF *)WTF::fastMalloc((WTF *)(20 * count));
  v9 = 0;
  v10 = 0;
  LODWORD(v38) = (v7 & 0xFFFFFFFC) / 0x14;
  v37 = v8;
  do
  {
    object_at_index = nw_array_get_object_at_index();
    address = nw_endpoint_get_address(object_at_index);
    if (!address)
      goto LABEL_12;
    sa_family = address->sa_family;
    if (sa_family == 2)
    {
      LODWORD(v39) = *(_DWORD *)&address->sa_data[2];
      v15 = 1;
    }
    else
    {
      if (sa_family != 30)
        goto LABEL_12;
      v39 = *(_OWORD *)&address->sa_data[6];
      v15 = 2;
    }
    v40 = v15;
    v41 = 1;
    if (v9 == (_DWORD)v38)
    {
      v18 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, v9 + 1, (unint64_t)&v39);
      v9 = HIDWORD(v38);
      v8 = v37;
      v19 = (char *)v37 + 20 * HIDWORD(v38);
      v20 = *((_DWORD *)v18 + 4);
      *(_OWORD *)v19 = *(_OWORD *)v18;
      *((_DWORD *)v19 + 4) = v20;
    }
    else
    {
      v16 = v39;
      v17 = (char *)v8 + 20 * v9;
      *((_DWORD *)v17 + 4) = v40;
      *(_OWORD *)v17 = v16;
    }
    HIDWORD(v38) = ++v9;
LABEL_12:
    ++v10;
  }
  while (v6 != v10);
  if (v38 <= v9)
    goto LABEL_18;
  v26 = v8;
  if (v9)
  {
    if (v9 < 0xCCCCCCD)
    {
      v27 = (WTF *)WTF::fastMalloc((WTF *)(20 * v9));
      LODWORD(v38) = 20 * v9 / 0x14;
      v37 = v27;
      v26 = v8;
      if (v27 != v8)
      {
        v28 = 0;
        do
        {
          v29 = (char *)v27 + v28;
          v30 = *(_OWORD *)((char *)v8 + v28);
          *((_DWORD *)v29 + 4) = *(_DWORD *)((char *)v8 + v28 + 16);
          *(_OWORD *)v29 = v30;
          v28 += 20;
        }
        while (20 * v9 != v28);
        v26 = v27;
      }
      goto LABEL_51;
    }
    __break(0xC471u);
LABEL_69:
    JUMPOUT(0x19630B340);
  }
LABEL_51:
  if (v8)
  {
    if (v26 == v8)
    {
      v37 = 0;
      LODWORD(v38) = 0;
    }
    WTF::fastFree(v8, v13);
  }
LABEL_18:
  if (v9)
  {
    *(_QWORD *)&v39 = v37;
    *((_QWORD *)&v39 + 1) = __PAIR64__(v9, v38);
    v40 = 0;
    v21 = *(_QWORD *)(v4 + 8);
    if (v21)
    {
      *(_QWORD *)(v4 + 8) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v21 + 16))(v21, &v39);
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    if (*(_BYTE *)(v4 + 24))
    {
      v31 = *(_QWORD *)(v4 + 16);
      {
        v32 = (void (**)(WebCore::DNSResolveQueueCFNet *__hidden))WebCore::DNSResolveQueue::singleton(void)::queue;
      }
      else
      {
        WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)off_1E341DA30;
        byte_1EE2F9148 = 1;
        WebCore::Timer::Timer<WebCore::DNSResolveQueue,WebCore::DNSResolveQueue>((WebCore::TimerBase *)&unk_1EE2F9150, (uint64_t)&WebCore::DNSResolveQueue::singleton(void)::queue, (uint64_t)WebCore::DNSResolveQueue::timerFired, 0);
        *((_QWORD *)&xmmword_1EE2F9180 + 1) = 0;
        dword_1EE2F9190 = 0;
        qword_1EE2F9198 = 0;
        qword_1EE2F91A0 = 0;
        v32 = &off_1E341DD08;
        WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)&off_1E341DD08;
      }
      ((void (*)(uint64_t *, uint64_t))v32[3])(&WebCore::DNSResolveQueue::singleton(void)::queue, v31);
    }
    nw_resolver_cancel();
    if (v40 != -1)
      ((void (*)(char *, __int128 *))off_1E341DD58[v40])(&v42, &v39);
    goto LABEL_37;
  }
LABEL_30:
  LODWORD(v39) = 1;
  v40 = 1;
  v24 = *(_QWORD *)(v4 + 8);
  if (v24)
  {
    *(_QWORD *)(v4 + 8) = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v24 + 16))(v24, &v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  if (*(_BYTE *)(v4 + 24))
  {
    v35 = *(_QWORD *)(v4 + 16);
    {
      v36 = (void (**)(WebCore::DNSResolveQueueCFNet *__hidden))WebCore::DNSResolveQueue::singleton(void)::queue;
    }
    else
    {
      WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)off_1E341DA30;
      byte_1EE2F9148 = 1;
      WebCore::Timer::Timer<WebCore::DNSResolveQueue,WebCore::DNSResolveQueue>((WebCore::TimerBase *)&unk_1EE2F9150, (uint64_t)&WebCore::DNSResolveQueue::singleton(void)::queue, (uint64_t)WebCore::DNSResolveQueue::timerFired, 0);
      *((_QWORD *)&xmmword_1EE2F9180 + 1) = 0;
      dword_1EE2F9190 = 0;
      qword_1EE2F9198 = 0;
      qword_1EE2F91A0 = 0;
      v36 = &off_1E341DD08;
      WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)&off_1E341DD08;
    }
    ((void (*)(uint64_t *, uint64_t))v36[3])(&WebCore::DNSResolveQueue::singleton(void)::queue, v35);
  }
  nw_resolver_cancel();
  if (v40 != -1)
    ((void (*)(char *, __int128 *))off_1E341DD58[v40])(&v42, &v39);
  if (v37)
  {
    LODWORD(v38) = 0;
    WTF::fastFree(v37, v22);
  }
LABEL_37:
  if (*(_DWORD *)v4 == 1)
  {
    v25 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    WTF::fastFree((WTF *)v4, v22);
    if (v3)
LABEL_39:
      CFRelease(v3);
  }
  else
  {
    --*(_DWORD *)v4;
    if (v3)
      goto LABEL_39;
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ResourceHandleClient::didReceiveBuffer(WebCore::ResourceHandle *,WebCore::FragmentedSharedBuffer const&,int)::$_0,void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>::call(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), *a2, **(unsigned int **)(a1 + 24));
}

WTF *WTF::RefCounted<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>::deref(WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

WebCore::TimerBase *WTF::Detail::CallableWrapper<WebCore::DNSResolveQueueCFNet::platformResolve(WTF::String const&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DNSError> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::TimerBase *result;
  unsigned int v4;
  _BYTE v5[16];
  int v6;
  char v7;

  v5[0] = 0;
  v6 = -1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 != -1)
  {
    result = (WebCore::TimerBase *)((uint64_t (*)(char *, _BYTE *, uint64_t))*(&off_1E341DDC8 + v2))(&v7, v5, a2);
    v6 = v2;
  }
  {
    WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)off_1E341DA30;
    byte_1EE2F9148 = 1;
    result = WebCore::Timer::Timer<WebCore::DNSResolveQueue,WebCore::DNSResolveQueue>((WebCore::TimerBase *)&unk_1EE2F9150, (uint64_t)&WebCore::DNSResolveQueue::singleton(void)::queue, (uint64_t)WebCore::DNSResolveQueue::timerFired, 0);
    *((_QWORD *)&xmmword_1EE2F9180 + 1) = 0;
    dword_1EE2F9190 = 0;
    qword_1EE2F9198 = 0;
    qword_1EE2F91A0 = 0;
    WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)&off_1E341DD08;
  }
  do
    v4 = __ldaxr((unsigned int *)&dword_1EE2F9190);
  while (__stlxr(v4 - 1, (unsigned int *)&dword_1EE2F9190));
  if (v6 != -1)
    return (WebCore::TimerBase *)((uint64_t (*)(char *, _BYTE *))off_1E341DD58[v6])(&v7, v5);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore9IPAddressELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_8DNSErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore9IPAddressELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_8DNSErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Ref<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper,WTF::RawPtrTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>,WTF::DefaultRefDerefTraits<WebCore::DNSResolveQueueCFNet::CompletionHandlerWrapper>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v7;
  int v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v5 - 4);
    v8 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = v7;
    v13 = a3;
    do
    {
      v14 = (uint64_t *)(v5 + 16 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (uint64_t *)(v18 + 16 * v25);
          v28 = (WTF *)v27[1];
          v27[1] = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
            {
              v37 = v13;
              v34 = *((_QWORD *)v28 + 1);
              *((_QWORD *)v28 + 1) = 0;
              if (v34)
                (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
              WTF::fastFree(v28, v10);
              v13 = v37;
            }
            else
            {
              --*(_DWORD *)v28;
            }
          }
          *v27 = *v14;
          v29 = v5 + 16 * v11;
          v30 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          v27[1] = v30;
          v31 = *(WTF **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 1)
            {
              v35 = v13;
              v36 = *((_QWORD *)v31 + 1);
              *((_QWORD *)v31 + 1) = 0;
              if (v36)
                (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
              WTF::fastFree(v31, v10);
              v13 = v35;
            }
            else
            {
              --*(_DWORD *)v31;
            }
          }
        }
        else
        {
          v16 = v5 + 16 * v11;
          v17 = *(WTF **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1)
            {
              v32 = v13;
              v33 = *((_QWORD *)v17 + 1);
              *((_QWORD *)v17 + 1) = 0;
              if (v33)
                (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
              WTF::fastFree(v17, v10);
              v13 = v32;
            }
            else
            {
              --*(_DWORD *)v17;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v5 - 16), v10);
}

const __CFString *WebCore::formDataStreamLengthPropertyName(WebCore *this)
{
  return CFSTR("WebKitFormDataStreamLength");
}

uint64_t WebCore::createHTTPBodyCFReadStream@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  const WTF::String *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  const WTF::String *v19;
  void *v20;
  bmalloc::api *v21;
  void *v22;
  WebCore *v23;
  __CFReadStream *v24;
  void *v25;
  _OWORD v26[7];
  uint64_t (*v27)(WebCore *, CFRunLoopRef, CFRunLoopMode, const __CFString *, void *);
  _QWORD *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  if (WebCore::s_platformStrategies || (v4 = *(unsigned int *)(this + 20), !(_DWORD)v4))
  {
LABEL_6:
    WebCore::FormData::resolveBlobReferences(this, 0, &v31);
    WebCore::FormData::prepareForUpload(v31, v8, &v29);
    v9 = *(unsigned int *)(v29 + 20);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = *(_QWORD *)(v29 + 8);
      v12 = 48 * v9;
      while (1)
      {
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v13 = off_1E341DF78;
        v28 = v13;
        v32 = &v28;
        v14 = *(unsigned int *)(v11 + 40);
        if ((_DWORD)v14 == -1)
          break;
        *(_QWORD *)&v26[0] = &v32;
        v15 = ((uint64_t (*)(_OWORD *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore15FormDataElement13lengthInBytesERKNS6_8FunctionIFyRKNS6_3URLEEEEE3__0JZNKS9_13lengthInBytesESH_E3__1ZNKS9_13lengthInBytesESH_E3__2EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_15EncodedFileDataENS9_15EncodedBlobDataEEEEEEEDcOT_DpOT0____fmatrix
                                                          + v14))(v26, v11);
        v16 = v28;
        v28 = 0;
        if (v16)
          (*(void (**)(_QWORD *))(*v16 + 8))(v16);
        v10 += v15;
        v11 += 48;
        v12 -= 48;
        if (!v12)
          goto LABEL_14;
      }
      v23 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::formCreate(v23, v24, v25);
    }
    else
    {
      v10 = 0;
LABEL_14:
      v17 = operator new();
      v18 = v29;
      v29 = 0uLL;
      *(_OWORD *)v17 = v18;
      *(_QWORD *)&v18 = v30;
      v30 = 0;
      *(_QWORD *)(v17 + 16) = v18;
      *(_QWORD *)(v17 + 24) = v10;
      v26[4] = xmmword_1E341DE18;
      v26[5] = *(_OWORD *)&off_1E341DE28;
      v26[6] = xmmword_1E341DE38;
      v27 = WebCore::formUnschedule;
      v26[0] = __const__ZN7WebCore26createHTTPBodyCFReadStreamERNS_8FormDataE_callBacks;
      v26[1] = *(_OWORD *)&off_1E341DDE8;
      v26[2] = xmmword_1E341DDF8;
      v26[3] = *(_OWORD *)&off_1E341DE08;
      *a2 = CFReadStreamCreate();
      WebCore::FormDataForUpload::~FormDataForUpload((WebCore::FormDataForUpload *)&v29, v19);
      this = v31;
      v31 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 1)
        {
          WebCore::FormData::~FormData((WebCore::FormData *)this, v20);
          return bmalloc::api::isoDeallocate(v21, v22);
        }
        else
        {
          --*(_DWORD *)this;
        }
      }
    }
  }
  else
  {
    v5 = 48 * v4;
    v6 = (int *)(*(_QWORD *)(this + 8) + 40);
    while (1)
    {
      v7 = *v6;
      v6 += 12;
      if (v7 == 2)
        break;
      v5 -= 48;
      if (!v5)
        goto LABEL_6;
    }
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::formCreate(WebCore *this, __CFReadStream *a2, void *a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  int v24;
  char v25;

  v5 = operator new();
  v6 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v20 = v6;
  *(_OWORD *)v5 = v6;
  *(_QWORD *)&v6 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)(v5 + 16) = v6;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_QWORD *)(v5 + 56) = -1;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_BYTE *)(v5 + 96) = 0;
  v7 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(v5 + 72) = this;
  *(_QWORD *)(v5 + 80) = v7;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E341DE90;
  v8[1] = a2;
  v23[0] = v8;
  WTF::callOnMainThread();
  v9 = v23[0];
  v23[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(unsigned int *)(v20 + 20);
  v21 = 0;
  v22 = 0;
  if ((_DWORD)v10)
  {
    if (v10 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v11 = WTF::fastMalloc((WTF *)(48 * v10));
      v12 = 0;
      LODWORD(v22) = 48 * (int)v10 / 0x30u;
      v21 = v11;
      v13 = 48 * v10 - 8;
      v14 = v10 - 1;
      while (v14 < *(unsigned int *)(v20 + 20))
      {
        v15 = *(_QWORD *)(v20 + 8);
        v16 = *(unsigned int *)(v15 + v13);
        LOBYTE(v23[0]) = 0;
        v24 = -1;
        v17 = v11 + 48 * v12;
        if ((_DWORD)v16 == -1)
        {
          *(_BYTE *)v17 = 0;
          *(_DWORD *)(v17 + 40) = -1;
          HIDWORD(v22) = ++v12;
        }
        else
        {
          ((void (*)(char *, _QWORD *, uint64_t))off_1E341DED8[v16])(&v25, v23, v15 + v13 - 40);
          v24 = v16;
          *(_BYTE *)v17 = 0;
          *(_DWORD *)(v17 + 40) = -1;
          ((void (*)(char *, uint64_t, _QWORD *))off_1E341DEC0[v16])(&v25, v11 + 48 * v12, v23);
          *(_DWORD *)(v17 + 40) = v16;
          HIDWORD(v22) = ++v12;
          if (v24 != -1)
            ((void (*)(char *, _QWORD *))off_1E341DEA8[v24])(&v25, v23);
        }
        v13 -= 48;
        --v14;
        if (v13 == -8)
          goto LABEL_12;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x19630BBA0);
  }
LABEL_12:
  WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v5 + 32, &v21);
  WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v18);
  return v5;
}

uint64_t WebCore::formFinalize(WebCore *this, __CFReadStream *a2, void *a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E341DF00;
  v4[1] = a2;
  v6 = (uint64_t)v4;
  WTF::callOnMainThread();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t WebCore::formOpen(WebCore *this, __CFReadStream *a2, CFStreamError *a3, unsigned __int8 *a4, void *a5)
{
  unsigned __int8 *v8;
  __CFReadStream *v10;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;

  v8 = a4 + 96;
  if (__ldaxr(a4 + 96))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a4 + 96);
LABEL_5:
  if (WebCore::advanceCurrentStream((CFIndex)a4, a2))
  {
    while (1)
    {
      v10 = (__CFReadStream *)*((_QWORD *)a4 + 6);
      if (!v10 || CFReadStreamOpen(v10))
        break;
      if ((WebCore::advanceCurrentStream((CFIndex)a4, v11) & 1) == 0)
        goto LABEL_9;
    }
    v12 = 1;
  }
  else
  {
LABEL_9:
    v12 = 0;
  }
  v13 = __ldxr(v8);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v8))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  LOBYTE(a3->domain) = v12;
  if ((_DWORD)v12)
    v14 = 0;
  else
    v14 = -43;
  *((_DWORD *)a2 + 2) = v14;
  return v12;
}

CFIndex WebCore::formRead(WebCore *this, UInt8 *buffer, unsigned __int8 *a3, CFStreamError *a4, CFStreamError *a5, unsigned __int8 *a6, void *a7)
{
  __CFReadStream *v9;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v16;
  CFIndex result;
  void *v18;
  __CFReadStream *v20;
  void *v21;
  int v22;
  uint64_t v23;

  v9 = (__CFReadStream *)*((_QWORD *)a6 + 6);
  if (!v9)
  {
LABEL_25:
    result = 0;
    a4->error = 0;
    LOBYTE(a5->domain) = 1;
    return result;
  }
  v13 = a6 + 96;
  while (1)
  {
    v14 = *((_QWORD *)a6 + 7);
    if (v14 != -1 && v14 < (uint64_t)a3)
      v16 = (unsigned __int8 *)*((_QWORD *)a6 + 7);
    else
      v16 = a3;
    result = CFReadStreamRead(v9, buffer, (CFIndex)v16);
    if (result < 0)
    {
      *a4 = CFReadStreamGetError((CFReadStreamRef)*((_QWORD *)a6 + 6));
      return -1;
    }
    if (result)
      break;
    if (__ldaxr(v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_15:
    if (WebCore::advanceCurrentStream((CFIndex)a6, v18))
    {
      do
        v20 = (__CFReadStream *)*((_QWORD *)a6 + 6);
      while (v20 && !CFReadStreamOpen(v20) && (WebCore::advanceCurrentStream((CFIndex)a6, v21) & 1) != 0);
    }
    v22 = __ldxr(v13);
    if (v22 == 1)
    {
      if (!__stlxr(0, v13))
        goto LABEL_24;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_24:
    v9 = (__CFReadStream *)*((_QWORD *)a6 + 6);
    if (!v9)
      goto LABEL_25;
  }
  a4->error = 0;
  LOBYTE(a5->domain) = 0;
  *((_QWORD *)a6 + 11) += result;
  v23 = *((_QWORD *)a6 + 7);
  if (v23 != -1)
    *((_QWORD *)a6 + 7) = v23 - result;
  return result;
}

uint64_t WebCore::formCanRead(WebCore *this, __CFReadStream *a2, void *a3)
{
  __CFReadStream *v3;
  unsigned __int8 *v5;
  void *v6;
  __CFReadStream *v8;
  void *v9;
  int v10;
  __CFReadStream *v11;

  v3 = (__CFReadStream *)*((_QWORD *)a2 + 6);
  if (!v3)
    goto LABEL_21;
  v5 = (unsigned __int8 *)a2 + 96;
  while (CFReadStreamGetStatus(v3) == kCFStreamStatusAtEnd)
  {
    if (__ldaxr(v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_8:
    if (WebCore::advanceCurrentStream((CFIndex)a2, v6))
    {
      do
        v8 = (__CFReadStream *)*((_QWORD *)a2 + 6);
      while (v8 && !CFReadStreamOpen(v8) && (WebCore::advanceCurrentStream((CFIndex)a2, v9) & 1) != 0);
    }
    v10 = __ldxr(v5);
    if (v10 == 1)
    {
      if (!__stlxr(0, v5))
        goto LABEL_17;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_17:
    v3 = (__CFReadStream *)*((_QWORD *)a2 + 6);
    if (!v3)
      goto LABEL_21;
  }
  v11 = (__CFReadStream *)*((_QWORD *)a2 + 6);
  if (v11)
    return CFReadStreamHasBytesAvailable(v11);
LABEL_21:
  CFReadStreamSignalEvent();
  return 0;
}

uint64_t WebCore::formClose(WebCore *this, __CFReadStream *a2, void *a3)
{
  unsigned __int8 *v4;
  __CFReadStream *v6;
  const void *v7;
  WTF *v8;
  void *v9;
  uint64_t result;
  int v11;

  v4 = (unsigned __int8 *)a2 + 96;
  if (__ldaxr((unsigned __int8 *)a2 + 96))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)a2 + 96);
LABEL_5:
  v6 = (__CFReadStream *)*((_QWORD *)a2 + 6);
  if (v6)
  {
    CFReadStreamClose(v6);
    CFReadStreamSetClient(*((CFReadStreamRef *)a2 + 6), 0, 0, 0);
    v7 = (const void *)*((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = 0;
    if (v7)
      CFRelease(v7);
    *((_QWORD *)a2 + 7) = -1;
  }
  v8 = (WTF *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  WTF::fastFree(v8, a2);
  result = WTF::fastFree(0, v9);
  v11 = __ldxr(v4);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

CFNumberRef WebCore::formCopyProperty(WebCore *this, CFStringRef theString1, const __CFString *a3, void *a4)
{
  CFComparisonResult v6;
  CFNumberRef result;
  void *valuePtr;

  if (CFStringCompare(theString1, CFSTR("WebKitFormDataPointer"), 0))
  {
    v6 = CFStringCompare(theString1, CFSTR("WebKitFormDataStreamLength"), 0);
    result = 0;
    if (v6 == kCFCompareEqualTo)
      return (CFNumberRef)CFStringCreateWithFormat(0, 0, CFSTR("%llu"), a3[2].data);
  }
  else
  {
    valuePtr = a3->isa;
    return CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  }
  return result;
}

uint64_t WebCore::formSchedule(WebCore *this, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode, const __CFString *a4, void *a5)
{
  char *data;
  WTF::SchedulePair *v9;
  uint64_t result;
  void *v11;
  WTF *v12;
  unsigned int v13;
  unsigned int v14;
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  WTF *v19;

  data = a4[1].data;
  if (data)
    CFReadStreamScheduleWithRunLoop((CFReadStreamRef)data, runLoop, runLoopMode);
  v9 = (WTF::SchedulePair *)WTF::fastMalloc((WTF *)0x20);
  v19 = WTF::SchedulePair::SchedulePair(v9, runLoop, runLoopMode);
  result = WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::add(&a4->length, (uint64_t *)&v19, (uint64_t)&v18);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v15 = (const void *)*((_QWORD *)v12 + 3);
      *((_QWORD *)v12 + 3) = 0;
      if (v15)
        CFRelease(v15);
      v16 = (const void *)*((_QWORD *)v12 + 2);
      *((_QWORD *)v12 + 2) = 0;
      if (v16)
        CFRelease(v16);
      v17 = (const void *)*((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = 0;
      if (v17)
        CFRelease(v17);
      return WTF::fastFree(v12, v11);
    }
  }
  return result;
}

uint64_t WebCore::formUnschedule(WebCore *this, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode, const __CFString *a4, void *a5)
{
  char *data;
  WTF::SchedulePair *v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t *p_length;
  uint64_t v13;
  uint64_t length;
  unsigned int v15;
  uint64_t v16;
  WTF::SchedulePair *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  const void *v23;
  const void *v24;
  const void *v25;

  data = a4[1].data;
  if (data)
    CFReadStreamUnscheduleFromRunLoop((CFReadStreamRef)data, runLoop, runLoopMode);
  v9 = (WTF::SchedulePair *)WTF::fastMalloc((WTF *)0x20);
  result = (uint64_t)WTF::SchedulePair::SchedulePair(v9, runLoop, runLoopMode);
  length = a4->length;
  p_length = &a4->length;
  v13 = length;
  if (length)
  {
    v15 = *(_DWORD *)(v13 - 8);
    result = WTF::computeHash<WTF::SchedulePair>((uint64_t)v9);
    v16 = result & v15;
    v17 = *(WTF::SchedulePair **)(v13 + 8 * v16);
    if (v17 == v9)
    {
LABEL_8:
      v11 = (uint64_t *)(v13 + 8 * v16);
      v19 = *p_length;
      if (!*p_length)
      {
LABEL_13:
        if ((uint64_t *)v19 != v11)
          result = (uint64_t)WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::remove(p_length, v11);
        goto LABEL_15;
      }
      v20 = *(unsigned int *)(v19 - 4);
LABEL_12:
      v19 += 8 * v20;
      if ((uint64_t *)v19 == v11)
        goto LABEL_15;
      goto LABEL_13;
    }
    v18 = 1;
    while (v17)
    {
      v16 = ((_DWORD)v16 + v18) & v15;
      v17 = *(WTF::SchedulePair **)(v13 + 8 * v16);
      ++v18;
      if (v17 == v9)
        goto LABEL_8;
    }
    v19 = *p_length;
    if (*p_length)
    {
      v20 = *(unsigned int *)(v19 - 4);
      v11 = (uint64_t *)(v19 + 8 * v20);
      goto LABEL_12;
    }
  }
  do
  {
LABEL_15:
    v21 = __ldaxr((unsigned int *)v9);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v9));
  if (!v22)
  {
    atomic_store(1u, (unsigned int *)v9);
    v23 = (const void *)*((_QWORD *)v9 + 3);
    *((_QWORD *)v9 + 3) = 0;
    if (v23)
      CFRelease(v23);
    v24 = (const void *)*((_QWORD *)v9 + 2);
    *((_QWORD *)v9 + 2) = 0;
    if (v24)
      CFRelease(v24);
    v25 = (const void *)*((_QWORD *)v9 + 1);
    *((_QWORD *)v9 + 1) = 0;
    if (v25)
      CFRelease(v25);
    return WTF::fastFree(v9, v11);
  }
  return result;
}

uint64_t WebCore::httpBodyFromStream(WebCore *this, __CFReadStream *a2)
{
  const __CFNumber *v2;
  const __CFNumber *v3;
  uint64_t v4;
  uint64_t valuePtr;

  if (!this)
    return 0;
  v2 = (const __CFNumber *)CFReadStreamCopyProperty(this, CFSTR("WebKitFormDataPointer"));
  if (!v2)
    return 0;
  v3 = v2;
  valuePtr = 0;
  if (CFNumberGetValue(v2, kCFNumberLongType, &valuePtr))
    v4 = valuePtr;
  else
    v4 = 0;
  CFRelease(v3);
  return v4;
}

double WebCore::NetworkStorageSession::NetworkStorageSession(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 69) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 109) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 69) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 109) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  return result;
}

WTF::StringImpl *WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties(WebCore::ResourceRequest *this, const WebCore::ResourceRequest *a2)
{
  char v4;
  int v5;
  _DWORD *v6;
  char v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;
  void *v11;
  const void *v12;
  const void *v13;
  char v14;
  WebCore::FormData *v15;
  WTF::StringImpl *result;
  int v17;
  char v18;
  char v19;
  int v20;
  int v21;
  bmalloc::api *v22;
  void *v23;

  v4 = *((_BYTE *)this + 184);
  if ((v4 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v4 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v4;
  }
  v5 = *((unsigned __int8 *)this + 146);
  if ((v4 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v4 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v4;
  }
  if ((v4 & 4) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceHTTPBody(this);
    v4 = *((_BYTE *)this + 184) | 4;
    *((_BYTE *)this + 184) = v4;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 21);
  if (v6)
  {
    ++*v6;
    v4 = *((_BYTE *)this + 184);
  }
  v7 = *((_BYTE *)this + 147);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  if (v8)
    *(_DWORD *)v8 += 2;
  v9 = *((_QWORD *)this + 22);
  v10 = *((_BYTE *)this + 148);
  WebCore::ResourceRequestBase::operator=((uint64_t)this, (uint64_t)a2);
  v12 = (const void *)*((_QWORD *)a2 + 24);
  if (v12)
    CFRetain(v12);
  v13 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v12;
  if (v13)
    CFRelease(v13);
  v14 = *((_BYTE *)this + 184);
  if ((v14 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v14 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v14;
  }
  if (*((unsigned __int8 *)this + 146) != v5)
  {
    *((_BYTE *)this + 146) = v5;
    v14 &= ~2u;
    *((_BYTE *)this + 184) = v14;
  }
  if ((v14 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v15 = (WebCore::FormData *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v6;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      WebCore::FormData::~FormData(v15, v11);
      bmalloc::api::isoDeallocate(v22, v23);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  *((_BYTE *)this + 184) = *((_BYTE *)this + 184) & 0xE7 | v4 & 0x10 | 4;
  *((_BYTE *)this + 147) = v7;
  if (v8)
    *(_DWORD *)v8 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v8;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)result -= 2;
  }
  if ((v9 & 0xFF00000000) != 0)
  {
    *((_DWORD *)this + 44) = v9;
    *((_BYTE *)this + 180) = 1;
  }
  v17 = v10 & 4;
  v18 = *((_BYTE *)this + 184);
  if ((v18 & 1) == 0)
  {
    result = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v18 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v18;
  }
  v19 = *((_BYTE *)this + 148);
  if ((v17 != 0) == ((v19 & 4) == 0))
  {
    v19 = v19 & 0xFB | v17;
    *((_BYTE *)this + 148) = v19;
    v18 &= ~2u;
    *((_BYTE *)this + 184) = v18;
  }
  v20 = v10 & 8;
  if ((v18 & 1) == 0)
  {
    result = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v18 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v18;
    v19 = *((_BYTE *)this + 148);
  }
  if ((v20 != 0) == ((v19 & 8) == 0))
  {
    v19 = v19 & 0xF7 | v20;
    *((_BYTE *)this + 148) = v19;
    v18 &= ~2u;
    *((_BYTE *)this + 184) = v18;
  }
  v21 = v10 & 0x10;
  if ((v18 & 1) == 0)
  {
    result = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v18 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v18;
    v19 = *((_BYTE *)this + 148);
  }
  if ((v21 != 0) == ((v19 & 0x10) == 0))
  {
    *((_BYTE *)this + 148) = v19 & 0xEF | v21;
    *((_BYTE *)this + 184) = v18 & 0xFD;
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

uint64_t WebCore::ResourceRequest::httpPipeliningEnabled(WebCore::ResourceRequest *this)
{
  return WebCore::ResourceRequest::s_httpPipeliningEnabled;
}

uint64_t WebCore::ResourceRequest::setHTTPPipeliningEnabled(uint64_t this)
{
  WebCore::ResourceRequest::s_httpPipeliningEnabled = this;
  return this;
}

uint64_t WebCore::initializeMaximumHTTPConnectionCountPerHost(WebCore *this)
{
  int AppBooleanValue;
  Boolean keyExistsAndHasValidFormat;

  _CFNetworkHTTPConnectionCacheSetLimit();
  _CFNetworkHTTPConnectionCacheGetLimit();
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("WebKitEnableHTTPPipelining"), (CFStringRef)*MEMORY[0x1E0C9B248], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    WebCore::ResourceRequest::s_httpPipeliningEnabled = AppBooleanValue != 0;
  _CFNetworkHTTPConnectionCacheSetLimit();
  _CFNetworkHTTPConnectionCacheSetLimit();
  return 10000;
}

uint64_t WebCore::initializeHTTPConnectionSettingsOnStartup(WebCore *this)
{
  _CFNetworkHTTPConnectionCacheSetLimit();
  _CFNetworkHTTPConnectionCacheSetLimit();
  _CFNetworkHTTPConnectionCacheSetLimit();
  return _CFNetworkHTTPConnectionCacheSetLimit();
}

const __CFString *WebCore::ResourceRequest::isUserInitiatedKey(WebCore::ResourceRequest *this)
{
  return CFSTR("ResourceRequestIsUserInitiatedKey");
}

_BYTE *WTF::ScopeExit<WebCore::SQLiteDatabase::open(WTF::String const&,WebCore::SQLiteDatabase::OpenMode,WTF::OptionSet<WebCore::SQLiteDatabase::OpenOptions>)::$_0>::~ScopeExit(_BYTE *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  const char *v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  int v10;
  void *v12;
  WTF *v13;
  void *v14;
  WTF *v15;

  if (a1[8])
  {
    v2 = *(_QWORD *)a1;
    if (*(_QWORD *)(*(_QWORD *)a1 + 8))
    {
      v3 = *(unsigned int **)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
      {
        do
        {
          v4 = __ldaxr(v3);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, v3));
        if (!v5)
        {
          atomic_store(1u, v3);
          WTF::Thread::~Thread((WTF::Thread *)v3);
          WTF::fastFree(v13, v14);
        }
      }
      v6 = sqlite3_errmsg(*(sqlite3 **)(v2 + 8));
      WTF::CString::CString((WTF::CString *)&v15, v6);
      v8 = v15;
      v15 = 0;
      v9 = *(WTF **)(v2 + 56);
      *(_QWORD *)(v2 + 56) = v8;
      if (!v9)
        goto LABEL_10;
      v10 = *(_DWORD *)v9 - 1;
      if (*(_DWORD *)v9 == 1)
      {
        WTF::fastFree(v9, v7);
        v9 = v15;
        v15 = 0;
        if (!v9)
          goto LABEL_10;
        v10 = *(_DWORD *)v9 - 1;
        if (*(_DWORD *)v9 == 1)
        {
          WTF::fastFree(v9, v12);
          goto LABEL_10;
        }
      }
      *(_DWORD *)v9 = v10;
LABEL_10:
      *(_DWORD *)(v2 + 52) = sqlite3_errcode(*(sqlite3 **)(v2 + 8));
      WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)v2);
    }
  }
  return a1;
}

uint64_t WebCore::walAutomaticTruncationHook(WebCore *this, sqlite3 *db, sqlite3 *zDb, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if ((int)a4 >= 1000)
  {
    v8 = v4;
    v9 = v5;
    v7 = 0;
    sqlite3_wal_checkpoint_v2(db, (const char *)zDb, 3, &v7, 0);
  }
  return 0;
}

const char *WebCore::SQLiteDatabase::lastErrorMsg(WebCore::SQLiteDatabase *this)
{
  sqlite3 *v2;
  uint64_t v4;

  v2 = (sqlite3 *)*((_QWORD *)this + 1);
  if (v2)
    return sqlite3_errmsg(v2);
  v4 = *((_QWORD *)this + 7);
  if (v4)
    return (const char *)(v4 + 16);
  else
    return "database is not open";
}

WTF *WebCore::unauthorizedSQLFunction(WebCore *this, sqlite3_context *a2, int a3, sqlite3_value **a4)
{
  const char *v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  WTF *result;
  WTF *v12;

  v5 = (const char *)sqlite3_user_data(this);
  v6 = v5;
  if (v5)
  {
    v7 = strlen(v5);
    if (v7 >> 31)
      goto LABEL_19;
  }
  else
  {
    v7 = 0;
  }
  if (__OFADD__((_DWORD)v7, 16)
    || (v8 = (v7 + 25), __OFADD__(v7 + 16, 9))
    || (WTF::tryFastCompactMalloc((WTF *)(v8 + 20)), !v12))
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x19630CAA4);
  }
  *(_DWORD *)v12 = 2;
  *((_DWORD *)v12 + 1) = v8;
  *(_QWORD *)((char *)v12 + 20) = *(_QWORD *)"Function ";
  *((_QWORD *)v12 + 1) = (char *)v12 + 20;
  *((_DWORD *)v12 + 4) = 4;
  *((_BYTE *)v12 + 28) = 32;
  v9 = (char *)v12 + 29;
  if ((_DWORD)v7)
  {
    if ((_DWORD)v7 == 1)
      *v9 = *v6;
    else
      memcpy((char *)v12 + 29, v6, v7);
  }
  *(_OWORD *)&v9[v7] = *(_OWORD *)" is unauthorized";
  WTF::String::utf8();
  sqlite3_result_error(this, (const char *)v12 + 16, -1);
  if (*(_DWORD *)v12 == 1)
    WTF::fastFree(v12, v10);
  else
    --*(_DWORD *)v12;
  result = v12;
  if (*(_DWORD *)v12 == 2)
    return (WTF *)WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v10);
  *(_DWORD *)v12 -= 2;
  return result;
}

uint64_t WebCore::SQLiteDatabase::pageSize(WebCore::SQLiteDatabase *this)
{
  unsigned __int8 *v2;
  int v4;
  sqlite3_stmt *v5;
  void *v6;
  int (__cdecl *v7)(void *, int, const char *, const char *, const char *, const char *);
  int v8;
  unsigned __int8 *v10;
  sqlite3_stmt *v12;
  WebCore::SQLiteDatabaseTracker *v13;
  int v14;
  int v15;
  WebCore::SQLiteDatabaseTracker *v16;
  uint64_t v17;
  sqlite3_stmt *v18;
  int v19;
  char v20;

  if (*((_DWORD *)this + 4) != -1)
    return *((unsigned int *)this + 4);
  v2 = (unsigned __int8 *)this + 22;
  if (__ldaxr((unsigned __int8 *)this + 22))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C]((char *)this + 22);
LABEL_6:
  sqlite3_set_authorizer(*((sqlite3 **)this + 1), 0, 0);
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this, "PRAGMA page_size", 17, (uint64_t)&v17);
  if (v19)
    goto LABEL_7;
  v5 = v18;
  if (!sqlite3_stmt_busy(v18))
  {
    v10 = (unsigned __int8 *)(v17 + 32);
    if (__ldaxr((unsigned __int8 *)(v17 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
LABEL_26:
      v12 = v18;
      if (*(_BYTE *)(v17 + 20) || (v13 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v18), (_DWORD)v13))
      {
        v14 = sqlite3_step(v12);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v13);
        v16 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v12);
        v14 = (int)v16;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v16);
      }
      v15 = __ldxr(v10);
      if (v15 == 1)
      {
        if (!__stlxr(0, v10))
          goto LABEL_34;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_34:
      if (v14 != 100)
        goto LABEL_7;
      v5 = v18;
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v10);
    goto LABEL_26;
  }
LABEL_9:
  if (sqlite3_data_count(v5) >= 1)
  {
    v4 = sqlite3_column_int(v5, 0);
    goto LABEL_11;
  }
LABEL_7:
  v4 = 0;
LABEL_11:
  *((_DWORD *)this + 4) = v4;
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
    v7 = (int (__cdecl *)(void *, int, const char *, const char *, const char *, const char *))WebCore::SQLiteDatabase::authorizerFunction;
  else
    v7 = 0;
  sqlite3_set_authorizer(*((sqlite3 **)this + 1), v7, v6);
  if (v19 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v19])(&v20, &v17);
  v8 = __ldxr(v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, v2))
      return *((unsigned int *)this + 4);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::SQLiteDatabase *)((char *)this + 22));
  return *((unsigned int *)this + 4);
}

uint64_t WebCore::SQLiteDatabase::setMaximumSize(sqlite3 **this, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t result;
  int v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned __int8 *v22;
  sqlite3_stmt *v24;
  WebCore::SQLiteDatabaseTracker *v25;
  int v26;
  sqlite3 *v27;
  int (__cdecl *v28)(void *, int, const char *, const char *, const char *, const char *);
  int v29;
  WebCore::SQLiteDatabaseTracker *v30;
  char v31;
  uint64_t v32;
  sqlite3_stmt *v33;
  int v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  v4 = WebCore::SQLiteDatabase::pageSize((WebCore::SQLiteDatabase *)this);
  if (v4)
    v5 = (a2 & ~(a2 >> 63)) / v4;
  else
    v5 = 0;
  v6 = (unsigned __int8 *)this + 22;
  if (__ldaxr((unsigned __int8 *)this + 22))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C]((char *)this + 22);
LABEL_8:
  result = sqlite3_set_authorizer(this[1], 0, 0);
  if ((v5 & 0x8000000000000000) != 0)
  {
    v12 = -(uint64_t)v5;
    v9 = 1;
    do
    {
      ++v9;
      v13 = v12 >= 0xA;
      v12 /= 0xAuLL;
    }
    while (v13);
  }
  else
  {
    v9 = 0;
    v10 = v5;
    do
    {
      ++v9;
      v11 = v10 > 9;
      v10 /= 0xAuLL;
    }
    while (v11);
  }
  if (v9 < 0
    || (v14 = (v9 + 24), __OFADD__(v9, 24))
    || (result = WTF::tryFastCompactMalloc((WTF *)(v14 + 20)), (v15 = v32) == 0))
  {
    __break(0xC471u);
    return result;
  }
  *(_DWORD *)v32 = 2;
  *(_DWORD *)(v15 + 4) = v14;
  *(_QWORD *)(v15 + 8) = v15 + 20;
  *(_DWORD *)(v15 + 16) = 4;
  qmemcpy((void *)(v15 + 20), "PRAGMA max_page_count = ", 24);
  v16 = 0;
  if ((v5 & 0x8000000000000000) != 0)
  {
    v19 = -(uint64_t)v5;
    do
    {
      *((_BYTE *)v35 + v16--) = (v19 % 0xA) | 0x30;
      v11 = v19 > 9;
      v19 /= 0xAuLL;
    }
    while (v11);
    v20 = v16 + 24;
    v17 = (char *)&v32 + v16 + 24;
    *v17 = 45;
    if (v16 + 26 > 26)
      goto LABEL_28;
    if (v20 <= 24)
      v20 = 24;
    v18 = v20 - v16 - 23;
    goto LABEL_27;
  }
  do
  {
    *((_BYTE *)v35 + v16--) = (v5 % 0xA) | 0x30;
    v11 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v11);
  if (v16 + 26 <= 25)
  {
    v17 = (char *)v35 + v16 + 1;
    v18 = -v16;
LABEL_27:
    memcpy((void *)(v15 + 44), v17, v18);
  }
LABEL_28:
  WebCore::SQLiteDatabase::prepareStatementSlow((WTF *)this, (char *)(v15 + 20), v14 | 0x100000000, (uint64_t)&v32);
  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v15, v21);
  else
    *(_DWORD *)v15 -= 2;
  if (!v34)
  {
    v22 = (unsigned __int8 *)(v32 + 32);
    if (__ldaxr((unsigned __int8 *)(v32 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v22))
    {
LABEL_35:
      v24 = v33;
      if (*(_BYTE *)(v32 + 20) || (v25 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v33), (_DWORD)v25))
      {
        sqlite3_step(v24);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v25);
        v30 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v24);
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v30);
      }
      v26 = __ldxr(v22);
      if (v26 == 1)
      {
        if (!__stlxr(0, v22))
          goto LABEL_43;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
      goto LABEL_43;
    }
    MEMORY[0x19AEA534C](v22);
    goto LABEL_35;
  }
LABEL_43:
  v27 = this[3];
  if (v27)
    v28 = (int (__cdecl *)(void *, int, const char *, const char *, const char *, const char *))WebCore::SQLiteDatabase::authorizerFunction;
  else
    v28 = 0;
  result = sqlite3_set_authorizer(this[1], v28, v27);
  if (v34 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v34])(&v31, &v32);
  v29 = __ldxr(v6);
  if (v29 == 1)
  {
    if (!__stlxr(0, v6))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)((char *)this + 22));
}

sqlite3_int64 WebCore::SQLiteDatabase::freeSpaceSize(WebCore::SQLiteDatabase *this)
{
  unsigned __int8 *v2;
  sqlite3_int64 v4;
  sqlite3_stmt *v5;
  unsigned __int8 *v6;
  sqlite3_stmt *v8;
  WebCore::SQLiteDatabaseTracker *v9;
  int v10;
  int v11;
  void *v12;
  int (__cdecl *v13)(void *, int, const char *, const char *, const char *, const char *);
  int v14;
  WebCore::SQLiteDatabaseTracker *v16;
  uint64_t v17;
  sqlite3_stmt *v18;
  int v19;
  char v20;

  v2 = (unsigned __int8 *)this + 22;
  if (__ldaxr((unsigned __int8 *)this + 22))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 22);
LABEL_5:
  sqlite3_set_authorizer(*((sqlite3 **)this + 1), 0, 0);
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this, "PRAGMA freelist_count", 22, (uint64_t)&v17);
  v4 = 0;
  if (v19)
    goto LABEL_24;
  v5 = v18;
  if (sqlite3_stmt_busy(v18))
    goto LABEL_21;
  v6 = (unsigned __int8 *)(v17 + 32);
  if (__ldaxr((unsigned __int8 *)(v17 + 32)))
  {
    __clrex();
LABEL_10:
    MEMORY[0x19AEA534C](v6);
    goto LABEL_11;
  }
  if (__stxr(1u, v6))
    goto LABEL_10;
LABEL_11:
  v8 = v18;
  if (*(_BYTE *)(v17 + 20) || (v9 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v18), (_DWORD)v9))
  {
    v10 = sqlite3_step(v8);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v9);
    v16 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v8);
    v10 = (int)v16;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v16);
  }
  v11 = __ldxr(v6);
  if (v11 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_19;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_19:
  if (v10 != 100)
    goto LABEL_23;
  v5 = v18;
LABEL_21:
  if (sqlite3_data_count(v5) >= 1)
  {
    v4 = sqlite3_column_int64(v5, 0);
    goto LABEL_24;
  }
LABEL_23:
  v4 = 0;
LABEL_24:
  v12 = (void *)*((_QWORD *)this + 3);
  if (v12)
    v13 = (int (__cdecl *)(void *, int, const char *, const char *, const char *, const char *))WebCore::SQLiteDatabase::authorizerFunction;
  else
    v13 = 0;
  sqlite3_set_authorizer(*((sqlite3 **)this + 1), v13, v12);
  if (v19 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v19])(&v20, &v17);
  v14 = __ldxr(v2);
  if (v14 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 * (int)WebCore::SQLiteDatabase::pageSize(this);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 * (int)WebCore::SQLiteDatabase::pageSize(this);
}

sqlite3_int64 WebCore::SQLiteDatabase::totalSize(WebCore::SQLiteDatabase *this)
{
  unsigned __int8 *v2;
  sqlite3_int64 v4;
  sqlite3_stmt *v5;
  unsigned __int8 *v6;
  sqlite3_stmt *v8;
  WebCore::SQLiteDatabaseTracker *v9;
  int v10;
  int v11;
  void *v12;
  int (__cdecl *v13)(void *, int, const char *, const char *, const char *, const char *);
  int v14;
  WebCore::SQLiteDatabaseTracker *v16;
  uint64_t v17;
  sqlite3_stmt *v18;
  int v19;
  char v20;

  v2 = (unsigned __int8 *)this + 22;
  if (__ldaxr((unsigned __int8 *)this + 22))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 22);
LABEL_5:
  sqlite3_set_authorizer(*((sqlite3 **)this + 1), 0, 0);
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this, "PRAGMA page_count", 18, (uint64_t)&v17);
  v4 = 0;
  if (v19)
    goto LABEL_24;
  v5 = v18;
  if (sqlite3_stmt_busy(v18))
    goto LABEL_21;
  v6 = (unsigned __int8 *)(v17 + 32);
  if (__ldaxr((unsigned __int8 *)(v17 + 32)))
  {
    __clrex();
LABEL_10:
    MEMORY[0x19AEA534C](v6);
    goto LABEL_11;
  }
  if (__stxr(1u, v6))
    goto LABEL_10;
LABEL_11:
  v8 = v18;
  if (*(_BYTE *)(v17 + 20) || (v9 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v18), (_DWORD)v9))
  {
    v10 = sqlite3_step(v8);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v9);
    v16 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v8);
    v10 = (int)v16;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v16);
  }
  v11 = __ldxr(v6);
  if (v11 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_19;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_19:
  if (v10 != 100)
    goto LABEL_23;
  v5 = v18;
LABEL_21:
  if (sqlite3_data_count(v5) >= 1)
  {
    v4 = sqlite3_column_int64(v5, 0);
    goto LABEL_24;
  }
LABEL_23:
  v4 = 0;
LABEL_24:
  v12 = (void *)*((_QWORD *)this + 3);
  if (v12)
    v13 = (int (__cdecl *)(void *, int, const char *, const char *, const char *, const char *))WebCore::SQLiteDatabase::authorizerFunction;
  else
    v13 = 0;
  sqlite3_set_authorizer(*((sqlite3 **)this + 1), v13, v12);
  if (v19 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v19])(&v20, &v17);
  v14 = __ldxr(v2);
  if (v14 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 * (int)WebCore::SQLiteDatabase::pageSize(this);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 * (int)WebCore::SQLiteDatabase::pageSize(this);
}

uint64_t WebCore::SQLiteDatabase::executeCommandSlow(WTF *a1, char *a2, unint64_t a3)
{
  int v3;
  int v4;
  unsigned __int8 *v5;
  sqlite3_stmt *v7;
  WebCore::SQLiteDatabaseTracker *v8;
  int v9;
  WebCore::SQLiteDatabaseTracker *v11;
  uint64_t v12;
  uint64_t v13;
  sqlite3_stmt *v14;
  int v15;
  char v16;

  WebCore::SQLiteDatabase::prepareStatementSlow(a1, a2, a3, (uint64_t)&v13);
  v3 = v15;
  if (!v15)
  {
    v5 = (unsigned __int8 *)(v13 + 32);
    if (__ldaxr((unsigned __int8 *)(v13 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
LABEL_8:
      v7 = v14;
      if (*(_BYTE *)(v13 + 20) || (v8 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v14), (_DWORD)v8))
      {
        v4 = sqlite3_step(v7);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v8);
        v11 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v7);
        v4 = (int)v11;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v11);
      }
      v9 = __ldxr(v5);
      if (v9 == 1)
      {
        if (!__stlxr(0, v5))
        {
LABEL_16:
          v3 = v15;
          if (v15 == -1)
            return v4 == 101;
LABEL_17:
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v3])(&v16, &v13);
          return v4 == 101;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      goto LABEL_16;
    }
    MEMORY[0x19AEA534C](v5);
    goto LABEL_8;
  }
  if (v15 == 1)
  {
    v4 = v13;
    goto LABEL_17;
  }
  v12 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::SQLiteDatabase::executeSlow(v12);
}

uint64_t WebCore::SQLiteDatabase::executeSlow(WTF *a1, char *a2, unint64_t a3)
{
  int v3;
  WebCore::SQLiteDatabaseTracker *v4;
  unsigned __int8 *v5;
  sqlite3_stmt *v7;
  WebCore::SQLiteDatabaseTracker *v8;
  int v9;
  uint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;
  sqlite3_stmt *v15;
  int v16;
  char v17;

  WebCore::SQLiteDatabase::prepareStatementSlow(a1, a2, a3, (uint64_t)&v14);
  v3 = v16;
  if (!v16)
  {
    v5 = (unsigned __int8 *)(v14 + 32);
    if (__ldaxr((unsigned __int8 *)(v14 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
LABEL_8:
      v7 = v15;
      if (*(_BYTE *)(v14 + 20) || (v8 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v15), (_DWORD)v8))
      {
        v4 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v7);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v8);
        v4 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v7);
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
      }
      v9 = __ldxr(v5);
      if (v9 == 1)
      {
        if (!__stlxr(0, v5))
        {
LABEL_16:
          v3 = v16;
          if (v16 == -1)
            return (uint64_t)v4;
LABEL_17:
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v3])(&v17, &v14);
          return (uint64_t)v4;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      goto LABEL_16;
    }
    MEMORY[0x19AEA534C](v5);
    goto LABEL_8;
  }
  if (v16 == 1)
  {
    v4 = (WebCore::SQLiteDatabaseTracker *)v14;
    goto LABEL_17;
  }
  v11 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::SQLiteDatabase::execute(v11, v12, v13);
}

uint64_t WebCore::SQLiteDatabase::execute(uint64_t a1, const char *a2, int a3)
{
  uint64_t v3;
  WebCore::SQLiteDatabaseTracker *v4;
  uint64_t v6;
  sqlite3_stmt *v7[2];
  unsigned int v8;
  char v9;

  WebCore::SQLiteDatabase::prepareStatement(a1, a2, a3, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = WebCore::SQLiteStatement::step(v7);
LABEL_3:
    ((void (*)(char *, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v3])(&v9, v7);
    return (uint64_t)v4;
  }
  if (v8 == 1)
  {
    v4 = (WebCore::SQLiteDatabaseTracker *)LODWORD(v7[0]);
    goto LABEL_3;
  }
  v6 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::SQLiteDatabase::tableExists(v6);
}

BOOL WebCore::SQLiteDatabase::tableExists(uint64_t a1, char *a2, uint64_t a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _BOOL8 v5;
  int v6;
  WTF::StringImpl *v8;

  WebCore::SQLiteDatabase::tableSQL(a1, a2, a3, &v8);
  v4 = v8;
  if (!v8)
    return 0;
  v6 = *(_DWORD *)v8;
  v5 = *((_DWORD *)v8 + 1) != 0;
  v8 = 0;
  if (v6 == 2)
    WTF::StringImpl::destroy(v4, v3);
  else
    *(_DWORD *)v4 = v6 - 2;
  return v5;
}

void WebCore::SQLiteDatabase::indexSQL(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v7;
  unsigned __int8 *v8;
  sqlite3_stmt *v10;
  WebCore::SQLiteDatabaseTracker *v11;
  int v12;
  int v13;
  WebCore::SQLiteDatabaseTracker *v14;
  WebCore::SQLiteDatabase *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  int v18;
  char v19;

  if (!*(_QWORD *)(a1 + 8))
  {
    *a4 = 0;
    return;
  }
  WebCore::SQLiteDatabase::prepareStatement(a1, "SELECT sql FROM sqlite_master WHERE type = 'index' AND name = ?;",
    65,
    (uint64_t)&v16);
  v7 = v18;
  if (v18)
    goto LABEL_3;
  if (WebCore::SQLiteStatement::bindText((uint64_t)&v16, 1, a2, a3))
  {
    v7 = 0;
    *a4 = 0;
    goto LABEL_23;
  }
  v8 = (unsigned __int8 *)v16 + 32;
  if (__ldaxr((unsigned __int8 *)v16 + 32))
  {
    __clrex();
LABEL_11:
    MEMORY[0x19AEA534C](v8);
    goto LABEL_12;
  }
  if (__stxr(1u, v8))
    goto LABEL_11;
LABEL_12:
  v10 = v17;
  if (*((_BYTE *)v16 + 20) || (v11 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v17), (_DWORD)v11))
  {
    v12 = sqlite3_step(v10);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v11);
    v14 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v10);
    v12 = (int)v14;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v14);
  }
  v13 = __ldxr(v8);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, v8))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v7 = v18;
  if (v12 == 100)
  {
    if (v18)
    {
      v15 = (WebCore::SQLiteDatabase *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::SQLiteDatabase::clearAllTables(v15);
      return;
    }
    WebCore::SQLiteStatement::columnText(&v16, 0, a4);
    v7 = 0;
LABEL_23:
    ((void (*)(char *, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v7])(&v19, &v16);
    return;
  }
LABEL_3:
  *a4 = 0;
  if (v7 != -1)
    goto LABEL_23;
}

void WebCore::SQLiteDatabase::clearAllTables(WebCore::SQLiteDatabase *this)
{
  int v2;
  unsigned __int8 *v3;
  sqlite3_stmt *v5;
  WebCore::SQLiteDatabaseTracker *v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebCore::SQLiteDatabaseTracker *v14;
  uint64_t *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  WebCore::SQLiteDatabaseTracker *v27;
  int v28;
  WTF::StringImpl *v29;
  WebCore::SQLiteDatabaseTracker *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint64_t v35;
  sqlite3_stmt *v36;
  sqlite3_stmt *v37;
  int v38;
  WTF::StringImpl *v39;
  sqlite3_stmt *pStmt;
  unsigned int v41;
  char v42;

  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this, "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';",
    80,
    (uint64_t)&v36);
  v2 = v38;
  if (v38)
    goto LABEL_65;
  v34 = 0;
  v35 = 0;
  while (1)
  {
    v3 = (unsigned __int8 *)v36 + 32;
    if (__ldaxr((unsigned __int8 *)v36 + 32))
    {
      __clrex();
LABEL_6:
      MEMORY[0x19AEA534C](v3);
      goto LABEL_7;
    }
    if (__stxr(1u, v3))
      goto LABEL_6;
LABEL_7:
    v5 = v37;
    if (*((_BYTE *)v36 + 20) || (v6 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v37), (_DWORD)v6))
    {
      v8 = sqlite3_step(v5);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v6);
      v14 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v5);
      v8 = (int)v14;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v14);
    }
    v9 = __ldxr(v3);
    if (v9 != 1)
    {
      __clrex();
LABEL_14:
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      goto LABEL_15;
    }
    if (__stlxr(0, v3))
      goto LABEL_14;
LABEL_15:
    if (v8 != 100)
      break;
    if (v38)
    {
LABEL_77:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_78:
      v33 = 0;
LABEL_79:
      __break(0xC471u);
      return;
    }
    WebCore::SQLiteStatement::columnText(&v36, 0, &v39);
    LODWORD(v11) = HIDWORD(v35);
    if (HIDWORD(v35) == (_DWORD)v35)
    {
      v15 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v34, HIDWORD(v35) + 1, (unint64_t)&v39);
      v11 = HIDWORD(v35);
      v16 = v34;
      v17 = *v15;
      *v15 = 0;
      *((_QWORD *)v16 + v11) = v17;
    }
    else
    {
      v12 = v39;
      v39 = 0;
      *((_QWORD *)v34 + HIDWORD(v35)) = v12;
    }
    HIDWORD(v35) = v11 + 1;
    v13 = v39;
    v39 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v18 = v34;
  if (!HIDWORD(v35))
    goto LABEL_63;
  v19 = 8 * HIDWORD(v35);
  while (2)
  {
    v20 = *(_QWORD *)v18;
    if (*(_QWORD *)v18)
    {
      v21 = *(_DWORD *)(v20 + 4);
      *(_DWORD *)v20 += 2;
      if (v21 < 0)
        goto LABEL_78;
      v22 = (v21 + 11);
      if (__OFADD__(v21, 11))
        goto LABEL_78;
      v23 = (*(unsigned __int8 *)(v20 + 16) >> 2) & 1;
    }
    else
    {
      v23 = 1;
      v22 = 11;
    }
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v22, v23, (int8x16_t *)"DROP TABLE ", 0xBu, v20, &v33);
    if (!v33)
      goto LABEL_79;
    WebCore::SQLiteDatabase::prepareStatementSlow(this, *((char **)v33 + 1), *((unsigned int *)v33 + 1) | ((unint64_t)((*((_DWORD *)v33 + 4) >> 2) & 1) << 32), (uint64_t)&v39);
    v24 = v41;
    if (!v41)
    {
      v25 = (unsigned __int8 *)v39 + 32;
      if (__ldaxr((unsigned __int8 *)v39 + 32))
      {
        __clrex();
      }
      else if (!__stxr(1u, v25))
      {
LABEL_39:
        if (*((_BYTE *)v39 + 20) || (v27 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v27))
        {
          sqlite3_step(pStmt);
        }
        else
        {
          WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v27);
          v30 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
          WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v30);
        }
        v28 = __ldxr(v25);
        if (v28 == 1)
        {
          if (!__stlxr(0, v25))
          {
LABEL_47:
            v24 = v41;
            if (v41 != -1)
              goto LABEL_48;
            goto LABEL_49;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v25);
        goto LABEL_47;
      }
      MEMORY[0x19AEA534C](v25);
      goto LABEL_39;
    }
    if (v41 != 1)
      goto LABEL_77;
LABEL_48:
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v24])(&v42, &v39);
LABEL_49:
    v29 = v33;
    v33 = 0;
    if (!v29)
    {
LABEL_52:
      if (!v20)
        goto LABEL_55;
      goto LABEL_53;
    }
    if (*(_DWORD *)v29 != 2)
    {
      *(_DWORD *)v29 -= 2;
      goto LABEL_52;
    }
    WTF::StringImpl::destroy(v29, v7);
    if (v20)
    {
LABEL_53:
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v20, v7);
      else
        *(_DWORD *)v20 -= 2;
    }
LABEL_55:
    v18 = (WTF *)((char *)v18 + 8);
    v19 -= 8;
    if (v19)
      continue;
    break;
  }
  v18 = v34;
  if (HIDWORD(v35))
  {
    v31 = 8 * HIDWORD(v35);
    do
    {
      v32 = *(WTF::StringImpl **)v18;
      *(_QWORD *)v18 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v7);
        else
          *(_DWORD *)v32 -= 2;
      }
      v18 = (WTF *)((char *)v18 + 8);
      v31 -= 8;
    }
    while (v31);
    v18 = v34;
    if (v34)
      goto LABEL_76;
  }
  else
  {
LABEL_63:
    if (!v18)
      goto LABEL_64;
LABEL_76:
    v34 = 0;
    LODWORD(v35) = 0;
    WTF::fastFree(v18, v7);
  }
LABEL_64:
  v2 = v38;
LABEL_65:
  if (v2 != -1)
    ((void (*)(WTF::StringImpl **, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v2])(&v39, &v36);
}

uint64_t WebCore::SQLiteDatabase::runVacuumCommand(WebCore::SQLiteDatabase *this)
{
  int v2;
  unsigned __int8 *v3;
  sqlite3_stmt *v5;
  WebCore::SQLiteDatabaseTracker *v6;
  int v7;
  sqlite3 *v8;
  WebCore::SQLiteDatabaseTracker *v10;
  WebCore::SQLiteDatabase *v11;
  uint64_t v12;
  sqlite3_stmt *v13;
  int v14;
  char v15;

  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this, "VACUUM;", 8, (uint64_t)&v12);
  v2 = v14;
  if (!v14)
  {
    v3 = (unsigned __int8 *)(v12 + 32);
    if (__ldaxr((unsigned __int8 *)(v12 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
LABEL_6:
      v5 = v13;
      if (*(_BYTE *)(v12 + 20) || (v6 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v13), (_DWORD)v6))
      {
        sqlite3_step(v5);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v6);
        v10 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v5);
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v10);
      }
      v7 = __ldxr(v3);
      if (v7 == 1)
      {
        if (!__stlxr(0, v3))
        {
LABEL_14:
          v2 = v14;
          if (v14 == -1)
            goto LABEL_16;
          goto LABEL_15;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v3);
    goto LABEL_6;
  }
  if (v14 != 1)
  {
    v11 = (WebCore::SQLiteDatabase *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::SQLiteDatabase::lastError(v11);
  }
LABEL_15:
  ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v2])(&v15, &v12);
LABEL_16:
  v8 = (sqlite3 *)*((_QWORD *)this + 1);
  if (v8)
    return sqlite3_errcode(v8);
  else
    return *((unsigned int *)this + 13);
}

uint64_t WebCore::SQLiteDatabase::lastError(WebCore::SQLiteDatabase *this)
{
  sqlite3 *v2;

  v2 = (sqlite3 *)*((_QWORD *)this + 1);
  if (v2)
    return sqlite3_errcode(v2);
  else
    return *((unsigned int *)this + 13);
}

uint64_t WebCore::SQLiteDatabase::runIncrementalVacuumCommand(WebCore::SQLiteDatabase *this)
{
  unsigned __int8 *v2;
  int v4;
  unsigned __int8 *v5;
  sqlite3_stmt *v7;
  WebCore::SQLiteDatabaseTracker *v8;
  int v9;
  void *v10;
  int (__cdecl *v11)(void *, int, const char *, const char *, const char *, const char *);
  sqlite3 *v12;
  uint64_t v13;
  int v14;
  WebCore::SQLiteDatabaseTracker *v16;
  WebCore::SQLiteDatabase *v17;
  uint64_t v18;
  sqlite3_stmt *v19;
  int v20;
  char v21;

  v2 = (unsigned __int8 *)this + 22;
  if (__ldaxr((unsigned __int8 *)this + 22))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 22);
LABEL_5:
  sqlite3_set_authorizer(*((sqlite3 **)this + 1), 0, 0);
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this, "PRAGMA incremental_vacuum", 26, (uint64_t)&v18);
  v4 = v20;
  if (!v20)
  {
    v5 = (unsigned __int8 *)(v18 + 32);
    if (__ldaxr((unsigned __int8 *)(v18 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
LABEL_10:
      v7 = v19;
      if (*(_BYTE *)(v18 + 20) || (v8 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v19), (_DWORD)v8))
      {
        sqlite3_step(v7);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v8);
        v16 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v7);
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v16);
      }
      v9 = __ldxr(v5);
      if (v9 == 1)
      {
        if (!__stlxr(0, v5))
        {
LABEL_18:
          v4 = v20;
          if (v20 == -1)
            goto LABEL_20;
          goto LABEL_19;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      goto LABEL_18;
    }
    MEMORY[0x19AEA534C](v5);
    goto LABEL_10;
  }
  if (v20 == 1)
  {
LABEL_19:
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v4])(&v21, &v18);
LABEL_20:
    v10 = (void *)*((_QWORD *)this + 3);
    if (v10)
      v11 = (int (__cdecl *)(void *, int, const char *, const char *, const char *, const char *))WebCore::SQLiteDatabase::authorizerFunction;
    else
      v11 = 0;
    sqlite3_set_authorizer(*((sqlite3 **)this + 1), v11, v10);
    v12 = (sqlite3 *)*((_QWORD *)this + 1);
    if (v12)
      v13 = sqlite3_errcode(v12);
    else
      v13 = *((unsigned int *)this + 13);
    v14 = __ldxr(v2);
    if (v14 == 1)
    {
      if (!__stlxr(0, v2))
        return v13;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
    return v13;
  }
  v17 = (WebCore::SQLiteDatabase *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::SQLiteDatabase::lastChanges(v17);
}

sqlite3 *WebCore::SQLiteDatabase::lastChanges(WebCore::SQLiteDatabase *this)
{
  sqlite3 *result;

  result = (sqlite3 *)*((_QWORD *)this + 1);
  if (result)
    return (sqlite3 *)sqlite3_changes(result);
  return result;
}

uint64_t WebCore::SQLiteDatabase::authorizerFunction(WebCore::SQLiteDatabase *this, void *a2, char *a3, const char *a4, const char *a5, const char *a6, const char *a7)
{
  int v8;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  int *v13;
  WTF::StringImpl *v14;
  char v15;
  int *v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  char v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  int *v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v8 = (int)a2;
  WTF::String::String((WTF::String *)&v30, a3);
  WTF::String::String((WTF::String *)&v29, a4);
  v12 = 1;
  switch(v8)
  {
    case 1:
    case 7:
    case 26:
      v15 = *((_BYTE *)this + 8);
      if ((v15 & 1) == 0)
        goto LABEL_16;
      v16 = &WebCore::SQLAuthDeny;
      if ((*((_BYTE *)this + 4) & 6) != 0)
        goto LABEL_60;
      *((_BYTE *)this + 8) = v15 | 4;
      v17 = v29;
      goto LABEL_58;
    case 2:
    case 23:
      v15 = *((_BYTE *)this + 8);
      if ((v15 & 1) == 0)
      {
LABEL_16:
        v18 = v15 | 4;
        goto LABEL_17;
      }
      v16 = &WebCore::SQLAuthDeny;
      if ((*((_BYTE *)this + 4) & 6) != 0)
        goto LABEL_60;
      v25 = v15 | 4;
      goto LABEL_57;
    case 3:
    case 5:
      v16 = &WebCore::SQLAuthAllow;
      if ((*((_BYTE *)this + 8) & 1) == 0)
        goto LABEL_60;
      v16 = &WebCore::SQLAuthDeny;
      if ((*((_BYTE *)this + 4) & 6) != 0)
        goto LABEL_60;
      v19 = v29;
      goto LABEL_27;
    case 4:
      v16 = &WebCore::SQLAuthAllow;
      if ((*((_BYTE *)this + 8) & 1) == 0)
        goto LABEL_60;
      v16 = &WebCore::SQLAuthDeny;
      if ((*((_BYTE *)this + 4) & 6) != 0)
        goto LABEL_60;
      v19 = v30;
LABEL_27:
      if (!WTF::equalIgnoringASCIICase(v19, *((const WTF::StringImpl **)this + 2), v11))
        v16 = &WebCore::SQLAuthAllow;
      goto LABEL_60;
    case 6:
    case 8:
    case 27:
      if ((*((_BYTE *)this + 8) & 1) == 0 || (*((_DWORD *)this + 1) & 6) == 0)
        goto LABEL_45;
      goto LABEL_46;
    case 9:
    case 11:
    case 13:
      v13 = &WebCore::SQLAuthAllow;
      if ((*((_BYTE *)this + 8) & 1) == 0)
        goto LABEL_53;
      if ((*((_BYTE *)this + 4) & 6) != 0)
        goto LABEL_14;
      v14 = v30;
      goto LABEL_51;
    case 10:
    case 12:
    case 14:
    case 16:
      v13 = &WebCore::SQLAuthAllow;
      if ((*((_BYTE *)this + 8) & 1) == 0)
        goto LABEL_53;
      if ((*((_BYTE *)this + 4) & 6) != 0)
      {
LABEL_14:
        v12 = 1;
      }
      else
      {
        v14 = v29;
LABEL_51:
        if (WTF::equalIgnoringASCIICase(v14, *((const WTF::StringImpl **)this + 2), v11))
          v13 = &WebCore::SQLAuthDeny;
LABEL_53:
        v12 = *v13;
        if ((_DWORD)v12)
          *((_BYTE *)this + 8) |= 8u;
      }
      goto LABEL_61;
    case 15:
    case 17:
      if ((*((_BYTE *)this + 8) & 1) != 0 && (*((_BYTE *)this + 4) & 6) != 0)
        goto LABEL_46;
      *((_BYTE *)this + 8) |= 8u;
      goto LABEL_45;
    case 18:
      v20 = *((_BYTE *)this + 8);
      if ((v20 & 1) != 0)
      {
        v16 = &WebCore::SQLAuthDeny;
        if ((*((_BYTE *)this + 4) & 6) == 0)
        {
          v25 = v20 | 6;
LABEL_57:
          *((_BYTE *)this + 8) = v25;
          v17 = v30;
LABEL_58:
          if (!WTF::equalIgnoringASCIICase(v17, *((const WTF::StringImpl **)this + 2), v11))
            v16 = &WebCore::SQLAuthAllow;
        }
      }
      else
      {
        v18 = v20 | 6;
LABEL_17:
        *((_BYTE *)this + 8) = v18;
        v16 = &WebCore::SQLAuthAllow;
      }
LABEL_60:
      v12 = *v16;
LABEL_61:
      v26 = v29;
      v29 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v10);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = v30;
      v30 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v10);
        else
          *(_DWORD *)v27 -= 2;
      }
      return v12;
    case 19:
    case 22:
    case 24:
    case 25:
      v12 = *((_BYTE *)this + 8) & 1;
      goto LABEL_61;
    case 20:
      v21 = *((_BYTE *)this + 8);
      if ((*((_BYTE *)this + 4) & 4) == 0)
        goto LABEL_38;
      if ((*((_BYTE *)this + 8) & 1) != 0)
        v16 = &WebCore::SQLAuthDeny;
      else
        v16 = &WebCore::SQLAuthAllow;
      goto LABEL_60;
    case 21:
      v12 = 0;
      goto LABEL_61;
    case 28:
      v21 = *((_BYTE *)this + 8);
LABEL_38:
      v16 = &WebCore::SQLAuthAllow;
      if ((v21 & 1) != 0 && WTF::equalIgnoringASCIICase(v30, *((const WTF::StringImpl **)this + 2), v11))
        v16 = &WebCore::SQLAuthDeny;
      goto LABEL_60;
    case 31:
      if ((*((_BYTE *)this + 8) & 1) == 0
        || (v23 = *((_QWORD *)this + 3), v22 = (uint64_t *)((char *)this + 24), v23)
        && WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v22, (WTF::ASCIICaseInsensitiveHash *)&v29))
      {
LABEL_45:
        v24 = &WebCore::SQLAuthAllow;
      }
      else
      {
LABEL_46:
        v24 = &WebCore::SQLAuthDeny;
      }
      v12 = *v24;
      goto LABEL_61;
    default:
      goto LABEL_61;
  }
}

uint64_t WebCore::SQLiteDatabase::setCollationFunction(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  sqlite3 *v7;
  const char *v8;
  void *v9;
  uint64_t result;
  WTF *v11;

  v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v6 = *a3;
  *a3 = 0;
  *v5 = v6;
  v7 = *(sqlite3 **)(a1 + 8);
  WTF::String::utf8();
  if (v11)
    v8 = (char *)v11 + 16;
  else
    v8 = 0;
  sqlite3_create_collation_v2(v7, v8, 1, v5, (int (__cdecl *)(void *, int, const void *, int, const void *))WebCore::callCollationFunction, (void (__cdecl *)(void *))WebCore::destroyCollationFunction);
  result = (uint64_t)v11;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      return WTF::fastFree(v11, v9);
    else
      --*(_DWORD *)v11;
  }
  return result;
}

uint64_t WebCore::callCollationFunction(WebCore *this, void *a2, uint64_t a3, const void *a4, int a5, const void *a6)
{
  return (*(uint64_t (**)(_QWORD, void *, uint64_t, const void *))(**(_QWORD **)this + 16))(*(_QWORD *)this, a2, a3, a4);
}

WTF *WebCore::destroyCollationFunction(WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;

  if (this)
  {
    v2 = this;
    v3 = *(_QWORD *)this;
    *(_QWORD *)v2 = 0;
    if (v3)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v3 + 8))(v3, a2);
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

sqlite3 *WebCore::SQLiteDatabase::releaseMemory(WebCore::SQLiteDatabase *this)
{
  sqlite3 *result;

  result = (sqlite3 *)*((_QWORD *)this + 1);
  if (result)
    return (sqlite3 *)sqlite3_db_release_memory(result);
  return result;
}

uint64_t WebCore::constructAndPrepareStatement(int *a1, uint64_t a2, const char *a3, int a4)
{
  unsigned __int8 *v8;
  uint64_t result;
  int v11;
  int v12;
  const char *v13;
  sqlite3_stmt *ppStmt;

  v8 = (unsigned __int8 *)(a2 + 32);
  if (__ldaxr((unsigned __int8 *)(a2 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_4;
  }
  MEMORY[0x19AEA534C](a2 + 32);
LABEL_4:
  v13 = 0;
  ppStmt = 0;
  result = sqlite3_prepare_v2(*(sqlite3 **)(a2 + 8), a3, a4, &ppStmt, &v13);
  v11 = result;
  if (v13 && *v13)
  {
    v11 = 1;
    goto LABEL_18;
  }
  if ((_DWORD)result)
  {
LABEL_18:
    result = sqlite3_finalize(ppStmt);
    *a1 = v11;
    goto LABEL_20;
  }
  if (ppStmt)
  {
    *(_QWORD *)a1 = ppStmt;
    a1[2] = 0;
    goto LABEL_9;
  }
  *a1 = 1;
LABEL_20:
  a1[2] = 1;
LABEL_9:
  v12 = __ldxr(v8);
  if (v12 == 1)
  {
    if (!__stlxr(0, v8))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v8);
}

WTF *WebCore::SQLiteDatabase::prepareHeapStatementSlow@<X0>(unsigned int *a1@<X0>, const char *a2@<X1>, unint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  unint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  void *v21;
  int v22;
  _QWORD *v23;
  const char *v24;
  unsigned int v25;
  WTF *result;
  char *v27;
  WebCore::SQLiteDatabaseTracker *v28;
  const char *v29;
  unint64_t v30;
  WTF *v31;
  uint8_t buf[4];
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)a3)
      goto LABEL_32;
    v7 = 0;
    while (1)
    {
      v8 = a2[v7];
      if ((v8 - 9) >= 5 && v8 != 32)
        break;
      if (a3 == ++v7)
      {
        a3 = 0x100000000;
        a2 = "";
        goto LABEL_32;
      }
    }
    if ((_DWORD)a3 == 1)
    {
      if ((_DWORD)v7)
      {
        LODWORD(v9) = 0;
        goto LABEL_16;
      }
    }
    else
    {
      v9 = (a3 - 1);
      do
      {
        if (v9 >= a3)
          goto LABEL_56;
        v10 = a2[v9];
        if ((v10 - 9) >= 5 && v10 != 32)
          break;
        --v9;
      }
      while ((_DWORD)v9);
      if ((_DWORD)v7 || (_DWORD)v9 != (_DWORD)a3 - 1)
      {
LABEL_16:
        v11 = (v9 - v7 + 1);
        if ((unint64_t)a3 - v7 >= v11)
        {
          a2 += v7;
          a3 = v11 | 0x100000000;
          goto LABEL_32;
        }
LABEL_56:
        __break(1u);
      }
    }
  }
  else
  {
    if (!(_DWORD)a3)
      goto LABEL_32;
    v12 = 0;
    v13 = a2;
    while (1)
    {
      v14 = *(unsigned __int16 *)v13;
      if ((v14 - 9) >= 5 && v14 != 32)
        break;
      ++v12;
      v13 += 2;
      if (a3 == v12)
      {
        a3 = 0x100000000;
        a2 = "";
        goto LABEL_32;
      }
    }
    if ((_DWORD)a3 == 1)
    {
      if (!(_DWORD)v12)
        goto LABEL_32;
      LODWORD(v15) = 0;
    }
    else
    {
      v15 = (a3 - 1);
      do
      {
        if (v15 >= a3)
          goto LABEL_56;
        v16 = *(unsigned __int16 *)&a2[2 * v15];
        if ((v16 - 9) >= 5 && v16 != 32)
          break;
        --v15;
      }
      while ((_DWORD)v15);
      if (!(_DWORD)v12 && (_DWORD)v15 == (_DWORD)a3 - 1)
        goto LABEL_32;
    }
    a3 = (v15 - v12 + 1);
    a2 = v13;
    if (v6 - v12 < a3)
      goto LABEL_56;
  }
LABEL_32:
  v29 = a2;
  v30 = a3;
  WTF::StringView::utf8();
  if (v31)
  {
    v17 = (char *)v31 + 16;
    v18 = *((_QWORD *)v31 + 1) + 1;
  }
  else
  {
    v17 = 0;
    LODWORD(v18) = 0;
  }
  WebCore::constructAndPrepareStatement((int *)&v29, (uint64_t)a1, v17, v18);
  v19 = v30;
  if ((_DWORD)v30)
  {
    v20 = qword_1ECE7CA90;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_ERROR))
    {
      if (v31)
        v27 = (char *)v31 + 16;
      else
        v27 = 0;
      *(_DWORD *)buf = 136446210;
      v33 = v27;
      _os_log_error_impl(&dword_1940B8000, v20, OS_LOG_TYPE_ERROR, "SQLiteDatabase::prepareHeapStatement: Failed to prepare statement %{public}s", buf, 0xCu);
    }
    if (v19 != 1)
    {
      v28 = (WebCore::SQLiteDatabaseTracker *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF *)WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v28);
    }
    *a4 = (_DWORD)v29;
    v22 = 1;
  }
  else
  {
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v24 = v29;
    *v23 = a1;
    do
      v25 = __ldaxr(a1);
    while (__stlxr(v25 + 1, a1));
    v22 = 0;
    v23[1] = v24;
    *(_QWORD *)a4 = v23;
  }
  a4[2] = v22;
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v21);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(WebCore::SQLiteDatabaseTracker *this)
{
  uint64_t result;
  int v4;

  if (__ldaxr(WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
    goto LABEL_3;
LABEL_4:
  result = WebCore::SQLiteDatabaseTracker::s_staticSQLiteDatabaseTrackerClient;
  if (WebCore::SQLiteDatabaseTracker::s_staticSQLiteDatabaseTrackerClient)
  {
    if (!WebCore::SQLiteDatabaseTracker::s_transactionInProgressCounter++)
      result = (*(uint64_t (**)(void))(*(_QWORD *)WebCore::SQLiteDatabaseTracker::s_staticSQLiteDatabaseTrackerClient
                                    + 16))();
  }
  v4 = __ldxr(WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  if (v4 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  }
  if (__stlxr(0, WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  return result;
}

uint64_t WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(WebCore::SQLiteDatabaseTracker *this)
{
  uint64_t result;
  int v3;

  if (__ldaxr(WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
    goto LABEL_3;
LABEL_4:
  result = WebCore::SQLiteDatabaseTracker::s_staticSQLiteDatabaseTrackerClient;
  if (WebCore::SQLiteDatabaseTracker::s_staticSQLiteDatabaseTrackerClient)
  {
    if (!--WebCore::SQLiteDatabaseTracker::s_transactionInProgressCounter)
      result = (*(uint64_t (**)(void))(*(_QWORD *)WebCore::SQLiteDatabaseTracker::s_staticSQLiteDatabaseTrackerClient
                                    + 24))();
  }
  v3 = __ldxr(WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  }
  if (__stlxr(0, WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  return result;
}

BOOL WebCore::SQLiteDatabaseTracker::hasTransactionInProgress(WebCore::SQLiteDatabaseTracker *this)
{
  uint64_t v2;
  int v3;
  int v4;
  BOOL v5;

  if (__ldaxr(WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
LABEL_5:
  v2 = WebCore::SQLiteDatabaseTracker::s_staticSQLiteDatabaseTrackerClient;
  v3 = WebCore::SQLiteDatabaseTracker::s_transactionInProgressCounter;
  v4 = __ldxr(WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  if (v4 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 0;
  return !v5;
}

uint64_t WebCore::SQLiteFileSystem::ensureDatabaseDirectoryExists(WebCore::SQLiteFileSystem *this, const WTF::String *a2)
{
  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
    return WTF::FileSystemImpl::makeAllDirectories(this, a2);
  else
    return 0;
}

uint64_t WebCore::SQLiteFileSystem::moveDatabaseFile(WebCore::SQLiteFileSystem *this, const WTF::String *a2, const WTF::String *a3)
{
  int8x16_t **v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  const WTF::String *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v5 = (int8x16_t **)&WebCore::databaseFileSuffixes;
  LODWORD(v6) = 1;
  do
  {
    v7 = *v5;
    v8 = v5[1];
    v9 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      *(_DWORD *)v9 += 2;
    if (v8)
    {
      v10 = (uint64_t)&v8[-1].i64[1] + 7;
      if (((unint64_t)&v8[-1].u64[1] + 7) >> 31)
        goto LABEL_53;
    }
    else
    {
      v10 = 0;
    }
    if (!v9)
    {
      v12 = v10;
LABEL_10:
      v13 = 1;
      goto LABEL_11;
    }
    v11 = *(_DWORD *)(v9 + 4);
    if (v11 < 0 || (v12 = (v11 + v10), __OFADD__(v11, (_DWORD)v10)))
    {
      v26 = 0;
LABEL_53:
      __break(0xC471u);
      JUMPOUT(0x19630EA3CLL);
    }
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
      goto LABEL_10;
    v13 = 0;
LABEL_11:
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v12, v13, v9, v7, v10, &v26);
    if (!v26)
      goto LABEL_53;
    v14 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v14 += 2;
    if (v8)
      v15 = (uint64_t)&v8[-1].i64[1] + 7;
    else
      v15 = 0;
    if (!v14)
    {
      v17 = v15;
LABEL_21:
      v18 = 1;
      goto LABEL_22;
    }
    v16 = *(_DWORD *)(v14 + 4);
    if (v16 < 0 || (v17 = (v16 + v15), __OFADD__(v16, (_DWORD)v15)))
    {
      v25 = 0;
LABEL_52:
      __break(0xC471u);
      JUMPOUT(0x19630EA48);
    }
    if ((*(_BYTE *)(v14 + 16) & 4) != 0)
      goto LABEL_21;
    v18 = 0;
LABEL_22:
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v17, v18, v14, v7, v15, &v25);
    if (!v25)
      goto LABEL_52;
    v21 = WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v26, (const WTF::String *)&v25, v19);
    v22 = v25;
    v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v20);
        if (!v14)
          goto LABEL_29;
        goto LABEL_27;
      }
      *(_DWORD *)v22 -= 2;
    }
    if (!v14)
      goto LABEL_29;
LABEL_27:
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v14, v20);
    else
      *(_DWORD *)v14 -= 2;
LABEL_29:
    v23 = v26;
    v26 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::destroy(v23, v20);
        if (!v9)
          goto LABEL_35;
        goto LABEL_33;
      }
      *(_DWORD *)v23 -= 2;
    }
    if (!v9)
      goto LABEL_35;
LABEL_33:
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v9, v20);
    else
      *(_DWORD *)v9 -= 2;
LABEL_35:
    v6 = v6 & v21;
    v5 += 2;
  }
  return v6;
}

uint64_t WebCore::SQLiteFileSystem::databaseFileSize(WebCore::SQLiteFileSystem *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  const WTF::String *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  char v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  const WTF::String *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  char v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v34;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v4 = 0;
LABEL_4:
    v5 = 1;
    goto LABEL_5;
  }
  v4 = *(unsigned int *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if ((v4 & 0x80000000) != 0)
    goto LABEL_58;
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    goto LABEL_4;
  v5 = 0;
LABEL_5:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, v5, v3, (int8x16_t *)"", 0, &v34);
  if (!v34)
  {
LABEL_59:
    __break(0xC471u);
    JUMPOUT(0x19630ECCCLL);
  }
  v8 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)&v34, v6);
  v9 = (char)v7;
  v10 = v34;
  v34 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v7);
      if (!v3)
        goto LABEL_12;
      goto LABEL_10;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (!v3)
    goto LABEL_12;
LABEL_10:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, v7);
  else
    *(_DWORD *)v3 -= 2;
LABEL_12:
  v11 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v13 = 4;
LABEL_16:
    v14 = 1;
    goto LABEL_17;
  }
  v12 = *(_DWORD *)(v11 + 4);
  *(_DWORD *)v11 += 2;
  if (v12 < 0)
    goto LABEL_58;
  v13 = (v12 + 4);
  if (__OFADD__(v12, 4))
    goto LABEL_58;
  if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    goto LABEL_16;
  v14 = 0;
LABEL_17:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v13, v14, v11, (int8x16_t *)"-shm", 4u, &v34);
  if (!v34)
    goto LABEL_59;
  v17 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)&v34, v15);
  v18 = (char)v16;
  v19 = v34;
  v34 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v16);
      if (!v11)
        goto LABEL_24;
      goto LABEL_22;
    }
    *(_DWORD *)v19 -= 2;
  }
  if (!v11)
    goto LABEL_24;
LABEL_22:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v11, v16);
  else
    *(_DWORD *)v11 -= 2;
LABEL_24:
  v20 = *(_QWORD *)this;
  if (!v20)
  {
    v22 = 4;
    goto LABEL_28;
  }
  v21 = *(_DWORD *)(v20 + 4);
  *(_DWORD *)v20 += 2;
  if (v21 < 0 || (v22 = (v21 + 4), __OFADD__(v21, 4)))
  {
LABEL_58:
    v34 = 0;
    goto LABEL_59;
  }
  if ((*(_BYTE *)(v20 + 16) & 4) != 0)
  {
LABEL_28:
    v23 = 1;
    goto LABEL_29;
  }
  v23 = 0;
LABEL_29:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v22, v23, v20, (int8x16_t *)"-wal", 4u, &v34);
  if (!v34)
    goto LABEL_59;
  v26 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)&v34, v24);
  v27 = (char)v25;
  v28 = v34;
  v34 = 0;
  if (!v28)
    goto LABEL_33;
  if (*(_DWORD *)v28 != 2)
  {
    *(_DWORD *)v28 -= 2;
LABEL_33:
    if (v20)
      goto LABEL_34;
    goto LABEL_36;
  }
  WTF::StringImpl::destroy(v28, v25);
  if (v20)
  {
LABEL_34:
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v20, v25);
    else
      *(_DWORD *)v20 -= 2;
  }
LABEL_36:
  if (v18)
    v29 = v17;
  else
    v29 = 0;
  if (v9)
    v30 = v8;
  else
    v30 = 0;
  v31 = v29 + v30;
  if (v27)
    v32 = v26;
  else
    v32 = 0;
  return v31 + v32;
}

WTF *WebCore::SQLiteFileSystem::computeHashForFileName(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  char *v7;
  WTF *v8;
  int v9;
  void *v10;
  WTF *result;
  unsigned int *v12;
  uint64_t v13;
  WTF *v14;
  char *v15;
  WTF *v16;
  unsigned int v17;
  WTF *v18;
  uint64_t v19[3];

  v19[1] = a1;
  v19[2] = a2;
  PAL::CryptoDigest::create(2, v19);
  WTF::StringView::utf8();
  v2 = (WTF *)v19[0];
  if (v18)
  {
    v3 = (char *)v18 + 16;
    v4 = *((_QWORD *)v18 + 1);
  }
  else
  {
    LODWORD(v4) = 0;
    v3 = 0;
  }
  PAL::CryptoDigest::addBytes(v19[0], v3, v4);
  PAL::CryptoDigest::computeHash((uint64_t)v2, (unsigned __int8 **)&v16);
  v15 = 0;
  v5 = v17;
  WTF::CString::newUninitialized((WTF::CString *)(2 * v17), (uint64_t)&v15, v6);
  if ((_DWORD)v5)
  {
    v7 = v15;
    v8 = v16;
    do
    {
      v9 = *(unsigned __int8 *)v8;
      v8 = (WTF *)((char *)v8 + 1);
      snprintf(v7, 3uLL, "%02X", v9);
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  WTF::String::fromUTF8();
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
      WTF::fastFree(v14, v10);
    else
      --*(_DWORD *)v14;
  }
  if (v16)
    WTF::fastFree(v16, v10);
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      result = (WTF *)WTF::fastFree(result, v10);
      if (!v2)
        return result;
      goto LABEL_15;
    }
    --*(_DWORD *)result;
  }
  if (!v2)
    return result;
LABEL_15:
  v12 = *(unsigned int **)v2;
  *(_QWORD *)v2 = 0;
  if (v12)
  {
    v13 = v12[4];
    if ((_DWORD)v13 != -1)
      ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v13])(&v16, v12 + 2);
    v12[4] = -1;
    WTF::fastFree((WTF *)v12, v10);
  }
  return (WTF *)WTF::fastFree(v2, v10);
}

WebCore::FormDataForUpload *WTF::Detail::CallableWrapper<WebCore::formCreate(__CFReadStream *,void *)::$_1,void>::call(uint64_t a1, const WTF::String *a2)
{
  WebCore::FormDataForUpload *result;

  result = *(WebCore::FormDataForUpload **)(a1 + 8);
  if (result)
  {
    WebCore::FormDataForUpload::~FormDataForUpload(result, a2);
    JUMPOUT(0x19AEA7644);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::formFinalize(__CFReadStream *,void *)::$_0,void>::call(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v5;
  __CFReadStream *v6;
  const void *v7;
  WTF *v8;
  void *v9;
  uint64_t result;
  void *v11;
  int v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  void *v16;
  uint64_t v17;

  v3 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 96);
  if (__ldaxr(v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_5:
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(__CFReadStream **)(v5 + 48);
  if (v6)
  {
    CFReadStreamClose(v6);
    CFReadStreamSetClient(*(CFReadStreamRef *)(v5 + 48), 0, 0, 0);
    v7 = *(const void **)(v5 + 48);
    *(_QWORD *)(v5 + 48) = 0;
    if (v7)
      CFRelease(v7);
    *(_QWORD *)(v5 + 56) = -1;
  }
  v8 = *(WTF **)(v5 + 64);
  *(_QWORD *)(v5 + 64) = 0;
  WTF::fastFree(v8, a2);
  result = WTF::fastFree(0, v9);
  v12 = __ldxr(v3);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v3))
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    WTF::fastFree(*(WTF **)(v13 + 64), v11);
    v15 = *(const void **)(v13 + 48);
    *(_QWORD *)(v13 + 48) = 0;
    if (v15)
      CFRelease(v15);
    WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 32, v14);
    v17 = *(_QWORD *)(v13 + 24);
    if (v17)
      WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::deallocateTable(v17, v16);
    WebCore::FormDataForUpload::~FormDataForUpload((WebCore::FormDataForUpload *)v13, (const WTF::String *)v16);
    JUMPOUT(0x19AEA7644);
  }
  return result;
}

uint64_t WebCore::advanceCurrentStream(CFIndex a1, void *a2)
{
  __CFReadStream *v3;
  const void *v4;
  WTF *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  CFStreamClientContext *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  CFStreamClientContext v30;
  int v31;
  CFStreamClientContext *v32;
  char v33;

  v3 = *(__CFReadStream **)(a1 + 48);
  if (v3)
  {
    CFReadStreamClose(v3);
    CFReadStreamSetClient(*(CFReadStreamRef *)(a1 + 48), 0, 0, 0);
    v4 = *(const void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v4)
      CFRelease(v4);
    *(_QWORD *)(a1 + 56) = -1;
  }
  v5 = *(WTF **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  WTF::fastFree(v5, a2);
  WTF::fastFree(0, v6);
  v7 = *(_DWORD *)(a1 + 44);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 32) + 48 * v7;
    v30.version = a1;
    v30.info = (void *)a1;
    v9 = *(unsigned int *)(v8 - 8);
    if ((_DWORD)v9 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v32 = &v30;
      result = ((uint64_t (*)(CFStreamClientContext **, uint64_t))*(&off_1E341DF18 + v9))(&v32, v8 - 48);
      if (!(_DWORD)result)
        return result;
      v11 = *(unsigned int *)(a1 + 44);
      if ((_DWORD)v11)
      {
        v12 = v11 - 1;
        v13 = *(_QWORD *)(a1 + 32);
        LOBYTE(v30.version) = 0;
        v31 = -1;
        v14 = *(unsigned int *)(v13 + 48 * v12 + 40);
        if ((_DWORD)v14 == -1)
        {
          v18 = (_DWORD *)(v13 + 48 * v12 + 40);
          goto LABEL_14;
        }
        ((void (*)(CFStreamClientContext **, CFStreamClientContext *))off_1E341DEC0[v14])(&v32, &v30);
        v31 = v14;
        v15 = *(unsigned int *)(a1 + 44);
        if ((_DWORD)v15)
        {
          LODWORD(v12) = v15 - 1;
          v16 = *(_QWORD *)(a1 + 32) + 48 * (v15 - 1);
          v19 = *(_DWORD *)(v16 + 40);
          v18 = (_DWORD *)(v16 + 40);
          v17 = v19;
          if (v19 != -1)
            ((void (*)(CFStreamClientContext **))off_1E341DEA8[v17])(&v32);
LABEL_14:
          *v18 = -1;
          *(_DWORD *)(a1 + 44) = v12;
          v20 = WTF::fastMalloc((WTF *)0x38);
          *(_QWORD *)v20 = &off_1E341DF40;
          *(_BYTE *)(v20 + 8) = 0;
          *(_DWORD *)(v20 + 48) = -1;
          v21 = v31;
          if (v31 != -1)
          {
            ((void (*)(CFStreamClientContext **, uint64_t, CFStreamClientContext *))off_1E341DEC0[v31])(&v32, v20 + 8, &v30);
            *(_DWORD *)(v20 + 48) = v21;
          }
          v32 = (CFStreamClientContext *)v20;
          WTF::callOnMainThread();
          v22 = v32;
          v32 = 0;
          if (v22)
            (*(void (**)(CFStreamClientContext *))(v22->version + 8))(v22);
          if (v31 != -1)
            ((void (*)(char *, CFStreamClientContext *))off_1E341DEA8[v31])(&v33, &v30);
          v30.version = 0;
          memset(&v30.retain, 0, 24);
          v30.info = (void *)a1;
          CFReadStreamSetClient(*(CFReadStreamRef *)(a1 + 48), 0x1AuLL, (CFReadStreamClientCallBack)WebCore::formEventCallback, &v30);
          v23 = WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::begin((_QWORD **)(a1 + 24));
          v24 = v23;
          v26 = v25;
          v27 = *(_QWORD *)(a1 + 24);
          if (v27)
            v28 = (uint64_t *)(v27 + 8 * *(unsigned int *)(v27 - 4));
          else
            v28 = 0;
          if (v28 != v23)
          {
            do
            {
              v29 = *v24++;
              CFReadStreamScheduleWithRunLoop(*(CFReadStreamRef *)(a1 + 48), *(CFRunLoopRef *)(v29 + 16), *(CFRunLoopMode *)(v29 + 24));
              while (v24 != v26)
              {
                if ((unint64_t)(*v24 + 1) > 1)
                  goto LABEL_29;
                ++v24;
              }
              v24 = v26;
LABEL_29:
              ;
            }
            while (v24 != v28);
          }
          return 1;
        }
      }
    }
    __break(0xC471u);
    JUMPOUT(0x19630F27CLL);
  }
  return 1;
}

uint64_t WebCore::formEventCallback(uint64_t this, __CFReadStream *a2, uint64_t a3, void *a4)
{
  unsigned __int8 *v5;
  int v7;

  if (a2 != (__CFReadStream *)16)
  {
    if (a2 == (__CFReadStream *)8)
    {
      CFReadStreamGetError((CFReadStreamRef)this);
      return CFReadStreamSignalEvent();
    }
    if (a2 == (__CFReadStream *)2)
      return CFReadStreamSignalEvent();
    return this;
  }
  v5 = (unsigned __int8 *)(a3 + 96);
  if (__ldaxr((unsigned __int8 *)(a3 + 96)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](a3 + 96);
LABEL_10:
  this = WebCore::advanceCurrentStream(a3);
  if ((_DWORD)this)
  {
    do
    {
      this = *(_QWORD *)(a3 + 48);
      if (!this)
        break;
      this = CFReadStreamOpen((CFReadStreamRef)this);
      if ((_DWORD)this)
        break;
      this = WebCore::advanceCurrentStream(a3);
    }
    while ((this & 1) != 0);
  }
  v7 = __ldxr(v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v5))
LABEL_18:
    this = WTF::Lock::unlockSlow((WTF::Lock *)(a3 + 96));
  if (!*(_QWORD *)(a3 + 48))
    return CFReadStreamSignalEvent();
  return this;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::advanceCurrentStream(WebCore::FormStreamFields *)::$_0,WebCore::advanceCurrentStream(WebCore::FormStreamFields *)::$_1,WebCore::advanceCurrentStream(WebCore::FormStreamFields *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::EncodedBlobData> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  CFIndex v3;
  const UInt8 *v4;
  void *v5;
  CFReadStreamRef v6;
  const void *v7;
  WTF *v8;
  void *v9;

  v2 = *a1;
  v3 = *(unsigned int *)(a2 + 12);
  v4 = *(const UInt8 **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v6 = CFReadStreamCreateWithBytesNoCopy(0, v4, v3, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v7 = *(const void **)(*(_QWORD *)v2 + 48);
  *(_QWORD *)(*(_QWORD *)v2 + 48) = v6;
  if (v7)
    CFRelease(v7);
  v8 = *(WTF **)(*(_QWORD *)v2 + 64);
  *(_QWORD *)(*(_QWORD *)v2 + 64) = v4;
  WTF::fastFree(v8, v5);
  WTF::fastFree(0, v9);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::advanceCurrentStream(WebCore::FormStreamFields *)::$_0,WebCore::advanceCurrentStream(WebCore::FormStreamFields *)::$_1,WebCore::advanceCurrentStream(WebCore::FormStreamFields *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::EncodedBlobData> &>(uint64_t *a1, WTF::FileSystemImpl *this)
{
  uint64_t v3;
  uint64_t result;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  CFReadStreamRef v10;
  uint64_t v11;
  const void *v12;
  CFNumberRef v13;
  const __CFURL *fileURL;

  v3 = *a1;
  if (*((_BYTE *)this + 32))
  {
    *(double *)&result = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime(this, this));
    if (!(_BYTE)this)
      goto LABEL_23;
    if (!*((_BYTE *)this + 32))
    {
      __break(1u);
      return result;
    }
    v5 = -9.22337204e18;
    if (*(double *)&result > -9.22337204e18)
      v6 = *(double *)&result;
    else
      v6 = -9.22337204e18;
    v7 = (uint64_t)v6;
    v8 = 0x7FFFFFFFFFFFFFFFLL;
    if (*(double *)&result >= 9.22337204e18)
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    v9 = *((double *)this + 3);
    if (v9 > -9.22337204e18)
      v5 = *((double *)this + 3);
    if (v9 < 9.22337204e18)
      v8 = (uint64_t)v5;
    if (v7 != v8)
      goto LABEL_23;
  }
  WTF::FileSystemImpl::pathAsURL(this, this);
  v10 = CFReadStreamCreateWithFile(0, fileURL);
  v11 = *(_QWORD *)(v3 + 8);
  v12 = *(const void **)(v11 + 48);
  *(_QWORD *)(v11 + 48) = v10;
  if (v12)
    CFRelease(v12);
  if (fileURL)
    CFRelease(fileURL);
  if (*(_QWORD *)(*(_QWORD *)(v3 + 8) + 48))
  {
    if (*((uint64_t *)this + 1) >= 1)
    {
      v13 = CFNumberCreate(0, kCFNumberLongLongType, (char *)this + 8);
      CFReadStreamSetProperty(*(CFReadStreamRef *)(*(_QWORD *)(v3 + 8) + 48), (CFStreamPropertyKey)*MEMORY[0x1E0C9B2B0], v13);
      if (v13)
        CFRelease(v13);
    }
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 56) = *((_QWORD *)this + 2);
    return 1;
  }
  else
  {
LABEL_23:
    *(double *)&result = 0.0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::advanceCurrentStream(WebCore::FormStreamFields *)::$_0,WebCore::advanceCurrentStream(WebCore::FormStreamFields *)::$_1,WebCore::advanceCurrentStream(WebCore::FormStreamFields *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::EncodedBlobData> &>()
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::advanceCurrentStream(WebCore::FormStreamFields *)::$_3,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E341DF40;
  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E341DEA8[v2])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 48) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::advanceCurrentStream(WebCore::FormStreamFields *)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  char v5;

  *(_QWORD *)this = &off_1E341DF40;
  v3 = *((unsigned int *)this + 12);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E341DEA8[v3])(&v5, (char *)this + 8);
  *((_DWORD *)this + 12) = -1;
  return WTF::fastFree(this, a2);
}

WTF::SchedulePair *WTF::SchedulePair::SchedulePair(WTF::SchedulePair *this, CFTypeRef cf, CFStringRef theString)
{
  CFStringRef Copy;
  const void *v6;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = cf;
  if (cf)
    CFRetain(cf);
  *((_QWORD *)this + 3) = 0;
  if (theString)
  {
    Copy = CFStringCreateCopy(0, theString);
    v6 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = Copy;
    if (v6)
      CFRelease(v6);
  }
  return this;
}

void std::call_once[abi:sn180100]<WebCore::initializeSQLiteIfNecessary(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::initializeSQLiteIfNecessary(void)::flag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::initializeSQLiteIfNecessary(void)::flag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::initializeSQLiteIfNecessary(void)::$_0 &&>>);
  }
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::initializeSQLiteIfNecessary(void)::$_0 &&>>()
{
  uint64_t result;

  result = sqlite3_initialize();
  if ((_DWORD)result)
  {
    sqlite3_errstr(result);
    result = WTFLogAlways();
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::createHTTPBodyCFReadStream(WebCore::FormData &)::$_0,unsigned long long,WTF::URL const&>::call(uint64_t a1, WTF::URL *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *BlobDataFromURL;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  char v14;
  _BYTE v15[24];
  int v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = WebCore::s_platformStrategies;
  v4 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!v4)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v3 + 40) = v4;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  v15[0] = 0;
  v17 = 0;
  BlobDataFromURL = WebCore::BlobRegistryImpl::getBlobDataFromURL(v5, a2, (uint64_t)v15);
  if (v17 && v16 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v16])(&v14, v15);
  if (!BlobDataFromURL)
    return 0;
  v7 = *((unsigned int *)BlobDataFromURL + 27);
  if (!(_DWORD)v7)
    return 0;
  v8 = 0;
  v9 = *((_QWORD *)BlobDataFromURL + 12) + 16;
  v10 = 40 * v7;
  do
  {
    v11 = *(_QWORD *)(v9 + 16);
    if (v11 == -1)
    {
      if (*(_DWORD *)(v9 - 16) == 1)
      {
        v12 = *(WTF::StringImpl ***)v9;
        if (*(_BYTE *)(*(_QWORD *)v9 + 32))
          WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)v9);
        v11 = (uint64_t)v12[5];
      }
      else
      {
        v11 = -1;
      }
    }
    v8 += v11;
    v9 += 40;
    v10 -= 40;
  }
  while (v10);
  return v8;
}

unsigned int *WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    WTF::Thread::~Thread((WTF::Thread *)result);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

_QWORD *WebCore::SQLiteStatement::SQLiteStatement(_QWORD *result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;

  v2 = *(unsigned int **)a2;
  *result = *(_QWORD *)a2;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  result[1] = v4;
  return result;
}

{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;

  v2 = *(unsigned int **)a2;
  *result = *(_QWORD *)a2;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  result[1] = v4;
  return result;
}

uint64_t WebCore::SQLiteStatement::reset(sqlite3_stmt **this)
{
  uint64_t v2;

  v2 = sqlite3_reset(this[1]);
  sqlite3_clear_bindings(this[1]);
  return v2;
}

BOOL WebCore::SQLiteStatement::executeCommand(sqlite3_stmt **this)
{
  return WebCore::SQLiteStatement::step(this) == 101;
}

uint64_t WebCore::SQLiteStatement::bindBlob(uint64_t a1, int a2, const void *a3, int a4)
{
  return sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 8), a2, a3, a4, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t WebCore::SQLiteStatement::bindInt64(sqlite3_stmt **this, int a2, sqlite3_int64 a3)
{
  return sqlite3_bind_int64(this[1], a2, a3);
}

uint64_t WebCore::SQLiteStatement::bindNull(sqlite3_stmt **this, int a2)
{
  return sqlite3_bind_null(this[1], a2);
}

uint64_t WebCore::SQLiteStatement::bindValue(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::SQLiteStatement *v5;
  int v6;
  _QWORD v7[6];
  _QWORD *v8;

  v6 = a2;
  v7[0] = a1;
  v7[1] = &v6;
  v7[2] = a1;
  v7[3] = &v6;
  v7[4] = a1;
  v7[5] = &v6;
  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = (WebCore::SQLiteStatement *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::SQLiteStatement::bindParameterCount(v5);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15SQLiteStatement9bindValueEiRKNS_7variantIJDnNS6_6StringEdEEEE3__0JZNS9_9bindValueEiSE_E3__1ZNS9_9bindValueEiSE_E3__2EEEEEJRKNS0_6__implIJDnSB_dEEEEEEDcOT_DpOT0____fmatrix[v3])(&v8, a3);
  }
}

uint64_t WebCore::SQLiteStatement::bindParameterCount(sqlite3_stmt **this)
{
  return sqlite3_bind_parameter_count(this[1]);
}

const char *WebCore::SQLiteStatement::isColumnDeclaredAsBlob(sqlite3_stmt **this, int a2)
{
  const char *result;
  const char *v3;

  result = sqlite3_column_decltype(this[1], a2);
  if (result)
  {
    v3 = result;
    if (strlen(result) == 4 && (*v3 & 0xDF) == 0x42 && (v3[1] & 0xDF) == 0x4C && (v3[2] & 0xDF) == 0x4F)
      return (const char *)((v3[3] & 0xDF) == 66);
    else
      return 0;
  }
  return result;
}

WebCore::SQLiteDatabaseTracker *WebCore::SQLiteStatement::columnName@<X0>(sqlite3_stmt **this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  WebCore::SQLiteDatabaseTracker *result;
  const char *v7;

  if ((sqlite3_stmt_busy(this[1]) || (result = WebCore::SQLiteStatement::step(this), (_DWORD)result == 100))
    && (result = (WebCore::SQLiteDatabaseTracker *)sqlite3_data_count(this[1]), (int)result > a2))
  {
    v7 = sqlite3_column_name(this[1], a2);
    if (v7)
      strlen(v7);
    return (WebCore::SQLiteDatabaseTracker *)WTF::String::fromUTF8();
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WebCore::SQLiteStatement::columnValue(sqlite3_stmt **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sqlite3_value *v6;
  int v7;
  int v8;

  if (!sqlite3_stmt_busy(this[1]) && WebCore::SQLiteStatement::step(this) != 100
    || sqlite3_data_count(this[1]) <= a2)
  {
    goto LABEL_8;
  }
  v6 = sqlite3_column_value(this[1], a2);
  v7 = sqlite3_value_type(v6);
  if ((v7 - 1) < 2)
  {
    *(double *)a3 = sqlite3_value_double(v6);
    v8 = 2;
    goto LABEL_9;
  }
  if ((v7 - 3) >= 2)
  {
LABEL_8:
    v8 = 0;
    *(_QWORD *)a3 = 0;
    goto LABEL_9;
  }
  sqlite3_value_text(v6);
  sqlite3_value_bytes(v6);
  WTF::String::fromUTF8();
  v8 = 1;
LABEL_9:
  *(_DWORD *)(a3 + 8) = v8;
}

double WebCore::SQLiteStatement::columnDouble(sqlite3_stmt **this, int a2)
{
  if ((sqlite3_stmt_busy(this[1]) || WebCore::SQLiteStatement::step(this) == 100)
    && sqlite3_data_count(this[1]) > a2)
  {
    return sqlite3_column_double(this[1], a2);
  }
  else
  {
    return 0.0;
  }
}

sqlite3_int64 WebCore::SQLiteStatement::columnInt64(sqlite3_stmt **this, int a2)
{
  if ((sqlite3_stmt_busy(this[1]) || WebCore::SQLiteStatement::step(this) == 100)
    && sqlite3_data_count(this[1]) > a2)
  {
    return sqlite3_column_int64(this[1], a2);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::SQLiteStatement::columnBlob@<X0>(sqlite3_stmt **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char *v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;

  if ((sqlite3_stmt_busy(this[1]) || (result = (uint64_t)WebCore::SQLiteStatement::step(this), (_DWORD)result == 100))
    && (result = sqlite3_data_count(this[1]), (int)result > a2)
    && (result = (uint64_t)sqlite3_column_blob(this[1], a2)) != 0)
  {
    v7 = (char *)result;
    result = sqlite3_column_bytes(this[1], a2);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if ((int)result >= 1)
      v8 = result;
    else
      v8 = 0;
    *(_DWORD *)(a3 + 12) = v8;
    if ((int)result >= 1)
    {
      v9 = result;
      v10 = result;
      result = WTF::fastMalloc((WTF *)result);
      *(_DWORD *)(a3 + 8) = v9;
      *(_QWORD *)a3 = result;
      do
      {
        v11 = *v7++;
        *(_BYTE *)result++ = v11;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

const void *WebCore::SQLiteStatement::columnBlobAsSpan(sqlite3_stmt **this, int a2)
{
  const void *result;
  const void *v5;

  if (!sqlite3_stmt_busy(this[1]) && WebCore::SQLiteStatement::step(this) != 100
    || sqlite3_data_count(this[1]) <= a2)
  {
    return 0;
  }
  result = sqlite3_column_blob(this[1], a2);
  if (result)
  {
    v5 = result;
    if (sqlite3_column_bytes(this[1], a2) >= 1)
      return v5;
    else
      return 0;
  }
  return result;
}

_QWORD *WebCore::SQLiteStatementAutoResetScope::SQLiteStatementAutoResetScope(_QWORD *this, WebCore::SQLiteStatement *a2)
{
  *this = a2;
  return this;
}

_QWORD *WebCore::SQLiteStatementAutoResetScope::SQLiteStatementAutoResetScope(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

{
  *result = *a2;
  *a2 = 0;
  return result;
}

uint64_t *WebCore::SQLiteStatementAutoResetScope::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t WebCore::SQLiteTransaction::SQLiteTransaction(uint64_t this, WebCore::SQLiteDatabase *a2, char a3)
{
  unsigned int v3;

  *(_QWORD *)this = a2;
  do
    v3 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v3 + 1, (unsigned int *)a2));
  *(_BYTE *)(this + 8) = 0;
  *(_BYTE *)(this + 9) = a3;
  return this;
}

void WebCore::SQLiteTransaction::~SQLiteTransaction(WebCore::SQLiteTransaction *this)
{
  unsigned int *v2;
  unsigned int v4;

  if (*((_BYTE *)this + 8))
    WebCore::SQLiteTransaction::rollback(this);
  v2 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v2)
  {
    if (atomic_load(v2))
    {
      do
        v4 = __ldaxr(v2);
      while (__stlxr(v4 - 1, v2));
    }
    else
    {
      __break(0xC471u);
    }
  }
}

_BYTE *WebCore::SQLiteTransaction::rollback(_BYTE *this)
{
  _BYTE *v1;
  WebCore::SQLiteDatabaseTracker *v2;

  if (this[8])
  {
    v1 = this;
    v2 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::executeCommand(*(_QWORD *)this, "ROLLBACK", 9);
    v1[8] = 0;
    *(_BYTE *)(*(_QWORD *)v1 + 20) = 0;
    return (_BYTE *)WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v2);
  }
  return this;
}

uint64_t WebCore::BidiContext::createUncached@<X0>(char a1@<W0>, char a2@<W1>, int a3@<W2>, char a4@<W3>, unsigned int *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result;
  __int16 v13;
  unsigned int v14;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  if (a3)
    v13 = 2048;
  else
    v13 = 0;
  *(_WORD *)(result + 4) = v13 & 0xE800 | a1 & 0x3F | ((a2 & 0x1F) << 6) & 0xEFFF | ((a4 & 1) << 12) | *(_WORD *)(result + 4) & 0xE000;
  if (a5)
  {
    do
      v14 = __ldaxr(a5);
    while (__stlxr(v14 + 1, a5));
  }
  *(_QWORD *)(result + 8) = a5;
  *a6 = result;
  return result;
}

void std::call_once[abi:sn180100]<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_1>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::ltrOverrideContextOnceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::ltrOverrideContextOnceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_1 &&>>);
  }
}

void std::call_once[abi:sn180100]<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_2>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::rtlContextOnceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::rtlContextOnceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_2 &&>>);
  }
}

void std::call_once[abi:sn180100]<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_3>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::rtlOverrideContextOnceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::rtlOverrideContextOnceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_3 &&>>);
  }
}

WTF *WebCore::BidiContext::copyStackRemovingUnicodeEmbeddingContexts@<X0>(WebCore::BidiContext *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v3;
  char *v4;
  unsigned int v5;
  void *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  __int16 v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WTF *result;
  unsigned int *v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[512];
  WTF *v29;

  v26 = (WTF *)v28;
  v27 = 64;
  v29 = this;
  if (!this)
    goto LABEL_35;
  v3 = 0;
  do
  {
    if ((*((_WORD *)this + 2) & 0x1000) == 0)
    {
      if (v3 == (_DWORD)v27)
      {
        v4 = WTF::Vector<WebCore::BidiContext *,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v26, v3 + 1, (unint64_t)&v29);
        v3 = HIDWORD(v27);
        *((_QWORD *)v26 + HIDWORD(v27)) = *(_QWORD *)v4;
      }
      else
      {
        *((_QWORD *)v26 + v3) = this;
      }
      HIDWORD(v27) = ++v3;
      this = v29;
    }
    this = (WebCore::BidiContext *)*((_QWORD *)this + 1);
    v29 = this;
  }
  while (this);
  if (!v3)
  {
LABEL_35:
    __break(0xC471u);
LABEL_36:
    JUMPOUT(0x1963102F0);
  }
  v5 = *(unsigned __int16 *)(*((_QWORD *)v26 + v3 - 1) + 4);
  WebCore::BidiContext::create(((v5 >> 6) & 0x1F) == 1, (v5 >> 6) & 0x1F, (v5 & 0x800) != 0, (v5 & 0x1000) != 0, 0, a2);
  v7 = HIDWORD(v27);
  v8 = (HIDWORD(v27) - 1);
  if (HIDWORD(v27) != 1)
  {
    while (1)
    {
      v9 = v7 - 2;
      if (HIDWORD(v27) <= v9)
      {
        __break(0xC471u);
        goto LABEL_36;
      }
      v10 = *a2;
      v11 = *(unsigned __int16 *)(*((_QWORD *)v26 + v9) + 4);
      v12 = (v11 >> 6) & 0x1F;
      if (*a2)
        break;
      v14 = 0;
      v15 = 0;
      if (v12 == 1)
        goto LABEL_16;
LABEL_18:
      WebCore::BidiContext::create(v15, v12, (v11 & 0x800) != 0, (v11 & 0x1000) != 0, (unsigned int *)v10, (uint64_t *)&v25);
      v16 = (uint64_t)v25;
      v25 = 0;
      v17 = (unsigned int *)*a2;
      *a2 = v16;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v29 = (WTF *)v17;
          WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v29, v6);
        }
        v20 = v25;
        v25 = 0;
        if (v20)
        {
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
          {
            atomic_store(1u, v20);
            v29 = (WTF *)v20;
            WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v29, v6);
          }
        }
      }
      v7 = v8--;
      if (!(_DWORD)v8)
        goto LABEL_28;
    }
    v13 = *(_WORD *)(v10 + 4);
    if (v12 != 1)
    {
      v15 = (v13 & 0x3E) + 2;
      goto LABEL_18;
    }
    v14 = v13 & 0x3F;
LABEL_16:
    v15 = (v14 + 1) | 1;
    LOBYTE(v12) = 1;
    goto LABEL_18;
  }
LABEL_28:
  result = v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

uint64_t WebCore::DateTimeFormat::parse(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  char v40;

  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 1;
  v3 = *a1;
  if (!*a1)
    goto LABEL_88;
  v5 = 0;
  v6 = 0;
  v7 = 2;
  v8 = 1;
  while (v5 < *(unsigned int *)(v3 + 4))
  {
    v9 = *(_QWORD *)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      v10 = *(unsigned __int8 *)(v9 + v5);
    else
      v10 = *(unsigned __int16 *)(v9 + 2 * v5);
    switch(v7)
    {
      case 0:
        if (v10 == 39)
        {
          v7 = 1;
          goto LABEL_54;
        }
        WTF::StringBuilder::append((uint64_t)&v37, v10);
        goto LABEL_101;
      case 1:
        if (v10 == 39)
        {
          WTF::StringBuilder::append((uint64_t)&v37, 0x27u);
LABEL_101:
          v7 = 0;
          goto LABEL_54;
        }
        if (v10 - 65 < 0x1A)
        {
          v32 = (unsigned int *)&WebCore::upperCaseToFieldTypeMap;
          v33 = -65;
        }
        else
        {
          if (v10 - 97 > 0x19)
            goto LABEL_113;
          v32 = (unsigned int *)&WebCore::lowerCaseToFieldTypeMap;
          v33 = -97;
        }
        v8 = v32[v33 + v10];
        if ((_DWORD)v8 == 1)
        {
LABEL_113:
          WTF::StringBuilder::append((uint64_t)&v37, v10);
LABEL_60:
          v8 = 1;
LABEL_53:
          v7 = 2;
          goto LABEL_54;
        }
        if (!(_DWORD)v8)
          goto LABEL_85;
        if ((v39 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196310918);
        }
        if (v39)
        {
          WTF::StringBuilder::toString((WTF::StringBuilder *)&v37, &v36);
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)a2 + 24))(a2, &v36);
          v35 = v36;
          v36 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v34);
            else
              *(_DWORD *)v35 -= 2;
          }
          WTF::StringBuilder::clear(&v37, v34);
        }
LABEL_28:
        v6 = 1;
LABEL_29:
        v7 = 4;
LABEL_54:
        ++v5;
        v3 = *a1;
        if (!*a1)
          goto LABEL_61;
        break;
      case 2:
        if (v10 == 39)
          goto LABEL_86;
        if (v10 - 65 < 0x1A)
        {
          v11 = -65;
          v12 = (unsigned int *)&WebCore::upperCaseToFieldTypeMap;
        }
        else
        {
          if (v10 - 97 > 0x19)
            goto LABEL_44;
          v11 = -97;
          v12 = (unsigned int *)&WebCore::lowerCaseToFieldTypeMap;
        }
        v8 = v12[v11 + v10];
        if (!(_DWORD)v8)
          goto LABEL_85;
        if ((_DWORD)v8 != 1)
        {
          if ((v39 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1963106D0);
          }
          if (v39)
          {
            v13 = v37;
            if (v37
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v37),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v37),
                  (v13 = v37) != 0))
            {
              *(_DWORD *)v13 += 2;
            }
            v36 = v13;
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)a2 + 24))(a2, &v36);
            v14 = v36;
            v36 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, a2);
              else
                *(_DWORD *)v14 -= 2;
            }
            v15 = v37;
            v37 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, a2);
              else
                *(_DWORD *)v15 -= 2;
            }
            v16 = v38;
            v38 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, a2);
              else
                *(_DWORD *)v16 -= 2;
            }
            v39 = 0;
          }
          goto LABEL_28;
        }
LABEL_44:
        LOWORD(v36) = v10;
        if (!v38)
          goto LABEL_59;
        v22 = v39;
        if (v39 >= *((_DWORD *)v38 + 1) || v37)
          goto LABEL_59;
        if ((*((_BYTE *)v38 + 16) & 4) == 0)
        {
          v23 = *((_QWORD *)v38 + 1);
          ++v39;
          *(_WORD *)(v23 + 2 * v22) = v10;
          goto LABEL_60;
        }
        if (v10 <= 0xFF)
        {
          v29 = *((_QWORD *)v38 + 1);
          ++v39;
          *(_BYTE *)(v29 + v22) = v10;
        }
        else
        {
LABEL_59:
          WTF::StringBuilder::append();
        }
        goto LABEL_60;
      case 3:
        WTF::StringBuilder::append((uint64_t)&v37, v10);
        v7 = 2 * (v10 == 39);
        goto LABEL_54;
      case 4:
        if (v10 - 65 < 0x1A)
        {
          v17 = -65;
          v18 = (unsigned int *)&WebCore::upperCaseToFieldTypeMap;
        }
        else
        {
          if (v10 - 97 > 0x19)
          {
            v19 = 1;
            goto LABEL_34;
          }
          v17 = -97;
          v18 = (unsigned int *)&WebCore::lowerCaseToFieldTypeMap;
        }
        v19 = v18[v17 + v10];
        if (!(_DWORD)v19)
          goto LABEL_85;
LABEL_34:
        if ((_DWORD)v8 == (_DWORD)v19)
        {
          v6 = (v6 + 1);
          goto LABEL_29;
        }
        (*(void (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v8, v6);
        if ((_DWORD)v19 != 1)
        {
          v6 = 1;
          v7 = 4;
          v8 = v19;
          goto LABEL_54;
        }
        if (v10 == 39)
        {
LABEL_86:
          v7 = 3;
          goto LABEL_54;
        }
        LOWORD(v36) = v10;
        if (!v38)
          goto LABEL_52;
        v20 = v39;
        if (v39 >= *((_DWORD *)v38 + 1) || v37)
          goto LABEL_52;
        if ((*((_BYTE *)v38 + 16) & 4) == 0)
        {
          v21 = *((_QWORD *)v38 + 1);
          ++v39;
          *(_WORD *)(v21 + 2 * v20) = v10;
          goto LABEL_53;
        }
        if (v10 > 0xFF)
        {
LABEL_52:
          WTF::StringBuilder::append();
        }
        else
        {
          v24 = *((_QWORD *)v38 + 1);
          ++v39;
          *(_BYTE *)(v24 + v20) = v10;
        }
        goto LABEL_53;
      default:
        goto LABEL_54;
    }
  }
LABEL_61:
  if (v7 == 4)
  {
    (*(void (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v8, v6);
LABEL_63:
    v25 = 1;
    goto LABEL_64;
  }
  if (!v7 || v7 == 3)
  {
    if ((v39 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963108F8);
    }
    if (v39)
    {
      WTF::StringBuilder::toString((WTF::StringBuilder *)&v37, &v36);
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)a2 + 24))(a2, &v36);
      v30 = v36;
      v36 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, a2);
        else
          *(_DWORD *)v30 -= 2;
      }
    }
    goto LABEL_85;
  }
  if ((v7 - 1) <= 1)
  {
LABEL_88:
    if ((v39 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963108D0);
    }
    if (v39)
    {
      WTF::StringBuilder::toString((WTF::StringBuilder *)&v37, &v36);
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)a2 + 24))(a2, &v36);
      v31 = v36;
      v36 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, a2);
        else
          *(_DWORD *)v31 -= 2;
      }
    }
    goto LABEL_63;
  }
LABEL_85:
  v25 = 0;
LABEL_64:
  v26 = v38;
  v38 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v37;
  v37 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  return v25;
}

WTF::StringImpl *WebCore::DateTimeStringBuilder::zeroPadString(WTF::StringImpl *this, WTF::StringImpl **a2, unint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  char v22;
  char v23;

  v5 = this;
  v6 = *a2;
  if (*a2)
  {
    if (*((unsigned int *)v6 + 1) < a3)
      goto LABEL_3;
    *(_DWORD *)v6 += 2;
LABEL_19:
    *(_QWORD *)this = v6;
    return this;
  }
  if (!a3)
    goto LABEL_19;
LABEL_3:
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v19);
  v8 = *a2;
  if (*a2)
    v9 = *((unsigned int *)v8 + 1);
  else
    v9 = 0;
  v10 = a3 > v9;
  v11 = a3 - v9;
  if (v10)
  {
    do
    {
      v23 = 48;
      if (v20 && ((v12 = v21, v21 < *((_DWORD *)v20 + 1)) ? (v13 = v19 == 0) : (v13 = 0), v13))
      {
        v14 = *((_DWORD *)v20 + 4);
        v15 = *((_QWORD *)v20 + 1);
        ++v21;
        if ((v14 & 4) != 0)
          *(_BYTE *)(v15 + v12) = 48;
        else
          *(_WORD *)(v15 + 2 * v12) = 48;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      --v11;
    }
    while (v11);
    v8 = *a2;
  }
  if (v21 || v20)
  {
    if (v8 && (*((_BYTE *)v8 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    goto LABEL_30;
  }
  if (v8)
    *(_DWORD *)v8 += 2;
  v16 = v19;
  v19 = v8;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v7);
      v8 = *a2;
      if (!*a2)
        goto LABEL_29;
      goto LABEL_28;
    }
    *(_DWORD *)v16 -= 2;
  }
  if (v8)
LABEL_28:
    LODWORD(v8) = *((_DWORD *)v8 + 1);
LABEL_29:
  v21 = v8;
LABEL_30:
  v17 = v19;
  if (v19
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v19),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v19),
        (v17 = v19) != 0))
  {
    *(_DWORD *)v17 += 2;
  }
  *(_QWORD *)v5 = v17;
  v18 = v20;
  v20 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v7);
    else
      *(_DWORD *)v18 -= 2;
  }
  this = v19;
  v19 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::DateTimeStringBuilder::appendNumber(WebCore::Locale **this, WTF::String *a2, unint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  WTF::String::number(a2);
  WebCore::DateTimeStringBuilder::zeroPadString((WTF::StringImpl *)&v14, &v13, a3);
  v6 = v13;
  v13 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = this + 1;
  WebCore::Locale::convertToLocalizedNumber(this[4], &v14, &v13);
  if (!*((_DWORD *)this + 6) && !this[2])
  {
    v9 = v13;
    if (v13)
      *(_DWORD *)v13 += 2;
    v10 = *v7;
    *v7 = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        if (v9)
          goto LABEL_12;
        goto LABEL_28;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v9)
    {
LABEL_12:
      v11 = *((_DWORD *)v9 + 1);
LABEL_13:
      *((_DWORD *)this + 6) = v11;
      goto LABEL_14;
    }
LABEL_28:
    v11 = 0;
    goto LABEL_13;
  }
  v9 = v13;
  if (!v13 || (*((_BYTE *)v13 + 16) & 4) != 0)
  {
    WTF::StringBuilder::append();
LABEL_14:
    v13 = 0;
    if (!v9)
      goto LABEL_17;
    goto LABEL_15;
  }
  WTF::StringBuilder::append();
  v13 = 0;
LABEL_15:
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy(v9, v8);
  else
    *(_DWORD *)v9 -= 2;
LABEL_17:
  result = v14;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::Locale::convertToLocalizedNumber@<X0>(WebCore::Locale *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int16 *v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  char v34;

  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::Locale *))(*(_QWORD *)this + 120))(this);
  v7 = *a2;
  if (!*((_BYTE *)this + 136))
  {
    if (!v7)
      goto LABEL_3;
    goto LABEL_97;
  }
  if (!v7)
  {
LABEL_3:
    *a3 = v7;
    return result;
  }
  if (!*((_DWORD *)v7 + 1))
  {
LABEL_97:
    *(_DWORD *)v7 += 2;
    goto LABEL_3;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v31);
  v9 = *a2;
  if (*a2
    && *((_DWORD *)v9 + 1)
    && ((v10 = (unsigned __int16 *)*((_QWORD *)v9 + 1), (*((_BYTE *)v9 + 16) & 4) == 0)
      ? (v11 = *v10)
      : (v11 = *(unsigned __int8 *)v10),
        v11 == 45))
  {
    WTF::StringBuilder::append(&v31, (WTF::StringImpl **)this + 15);
    v14 = 1;
    v15 = 1;
  }
  else
  {
    v12 = *((_QWORD *)this + 13);
    if (v33 || v32)
    {
      if (v12 && (*(_BYTE *)(v12 + 16) & 4) == 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
      v14 = 0;
      v15 = 0;
    }
    else
    {
      if (v12)
        *(_DWORD *)v12 += 2;
      v13 = v31;
      v31 = (WTF::StringImpl *)v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, v8);
          v12 = *((_QWORD *)this + 13);
        }
        else
        {
          *(_DWORD *)v13 -= 2;
        }
      }
      if (v12)
        LODWORD(v12) = *(_DWORD *)(v12 + 4);
      v14 = 0;
      v15 = 0;
      v33 = v12;
    }
  }
  while (1)
  {
    v16 = *a2;
    if (!*a2 || v15 >= *((unsigned int *)v16 + 1))
      break;
    v17 = *((_DWORD *)v16 + 4);
    v18 = *((_QWORD *)v16 + 1);
    if ((v17 & 4) != 0)
      v19 = *(unsigned __int8 *)(v18 + v15);
    else
      v19 = *(unsigned __int16 *)(v18 + 2 * v15);
    if ((v19 - 48) >= 0xA)
    {
      if (v19 != 46)
        goto LABEL_38;
      v22 = *((_QWORD *)this + 11);
      if (!v33 && !v32)
      {
        if (v22)
          *(_DWORD *)v22 += 2;
        v23 = v31;
        v31 = (WTF::StringImpl *)v22;
        if (!v23)
          goto LABEL_35;
        v24 = *(_DWORD *)v23 - 2;
        if (*(_DWORD *)v23 == 2)
        {
          WTF::StringImpl::destroy(v23, v8);
          v22 = *((_QWORD *)this + 11);
          goto LABEL_35;
        }
LABEL_34:
        *(_DWORD *)v23 = v24;
LABEL_35:
        if (v22)
          LODWORD(v22) = *(_DWORD *)(v22 + 4);
        v33 = v22;
        goto LABEL_38;
      }
    }
    else
    {
      if ((v17 & 4) != 0)
        v20 = *(unsigned __int8 *)(v18 + v15);
      else
        v20 = *(unsigned __int16 *)(v18 + 2 * v15);
      v21 = (uint64_t *)((char *)this + 8 * v20 - 376);
      v22 = *v21;
      if (!v33 && !v32)
      {
        if (v22)
          *(_DWORD *)v22 += 2;
        v23 = v31;
        v31 = (WTF::StringImpl *)v22;
        if (!v23)
          goto LABEL_35;
        v24 = *(_DWORD *)v23 - 2;
        if (*(_DWORD *)v23 != 2)
          goto LABEL_34;
        WTF::StringImpl::destroy(v23, v8);
        v22 = *v21;
        goto LABEL_35;
      }
    }
    if (v22 && (*(_BYTE *)(v22 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
LABEL_38:
    ++v15;
  }
  if (v14)
    v25 = (char *)this + 128;
  else
    v25 = (char *)this + 112;
  v26 = *(_QWORD *)v25;
  if (v33)
    v27 = 0;
  else
    v27 = v32 == 0;
  if (v27)
  {
    if (v26)
      *(_DWORD *)v26 += 2;
    v28 = v31;
    v31 = (WTF::StringImpl *)v26;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::destroy(v28, v8);
        v26 = *(_QWORD *)v25;
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v26)
      LODWORD(v26) = *(_DWORD *)(v26 + 4);
    v33 = v26;
  }
  else if (v26 && (*(_BYTE *)(v26 + 16) & 4) == 0)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v29 = v31;
  if (v31
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v31),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v31),
        (v29 = v31) != 0))
  {
    *(_DWORD *)v29 += 2;
  }
  *a3 = v29;
  v30 = v32;
  v32 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v8);
    else
      *(_DWORD *)v30 -= 2;
  }
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DateTimeStringBuilder::visitField(WTF::StringImpl *this, int a2, unint64_t a3)
{
  int v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v3 = a3;
  v4 = this;
  if (a2 > 99)
  {
    if (a2 <= 114)
    {
      switch(a2)
      {
        case 'd':
          v5 = *(unsigned int *)(*((_QWORD *)this + 5) + 16);
          goto LABEL_53;
        case 'h':
          v12 = *(_DWORD *)(*((_QWORD *)this + 5) + 12) % 12;
          if (v12)
            v5 = v12;
          else
            v5 = 12;
          goto LABEL_50;
        case 'k':
          v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 12);
          if (v13)
            v5 = v13;
          else
            v5 = 24;
          goto LABEL_50;
        case 'm':
          v5 = *(unsigned int *)(*((_QWORD *)this + 5) + 8);
          goto LABEL_50;
        default:
          return this;
      }
      return this;
    }
    if (a2 != 115)
    {
      if (a2 == 119)
      {
        v5 = *(unsigned int *)(*((_QWORD *)this + 5) + 28);
LABEL_53:
        a3 = 2;
      }
      else
      {
        if (a2 != 121)
          return this;
        v5 = *(unsigned int *)(*((_QWORD *)this + 5) + 24);
        a3 = 4;
      }
      return WebCore::DateTimeStringBuilder::appendNumber((WebCore::Locale **)this, (WTF::String *)v5, a3);
    }
    v14 = (int *)*((_QWORD *)this + 5);
    v5 = v14[1];
    if (!*v14)
    {
LABEL_50:
      a3 = (int)a3;
      return WebCore::DateTimeStringBuilder::appendNumber((WebCore::Locale **)this, (WTF::String *)v5, a3);
    }
    WTF::String::numberToStringFixedWidth((WTF::String *)3, (double)*v14 / 1000.0 + (double)(int)v5);
    WebCore::DateTimeStringBuilder::zeroPadString((WTF::StringImpl *)&v28, &v27, v3 + 4);
    v16 = v27;
    v27 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = (WTF::StringImpl **)((char *)v4 + 8);
    WebCore::Locale::convertToLocalizedNumber(*((WebCore::Locale **)v4 + 4), &v28, &v27);
    if (*((_DWORD *)v4 + 6) || *((_QWORD *)v4 + 2))
    {
      v19 = v27;
      if (v27 && (*((_BYTE *)v27 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append();
        v27 = 0;
LABEL_45:
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
LABEL_47:
        this = v28;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(v28, v18);
          else
            *(_DWORD *)v28 -= 2;
        }
        return this;
      }
      WTF::StringBuilder::append();
LABEL_44:
      v27 = 0;
      if (!v19)
        goto LABEL_47;
      goto LABEL_45;
    }
    v19 = v27;
    if (v27)
      *(_DWORD *)v27 += 2;
    v20 = *v17;
    *v17 = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v18);
        if (v19)
          goto LABEL_42;
        goto LABEL_81;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (v19)
    {
LABEL_42:
      v21 = *((_DWORD *)v19 + 1);
LABEL_43:
      *((_DWORD *)v4 + 6) = v21;
      goto LABEL_44;
    }
LABEL_81:
    v21 = 0;
    goto LABEL_43;
  }
  switch(a2)
  {
    case 'H':
      v5 = *(unsigned int *)(*((_QWORD *)this + 5) + 12);
      goto LABEL_50;
    case 'I':
    case 'J':
      return this;
    case 'K':
      v5 = (*(_DWORD *)(*((_QWORD *)this + 5) + 12) % 12);
      goto LABEL_50;
    case 'L':
      if ((_DWORD)a3 == 4)
      {
        v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 64))(*((_QWORD *)this + 4));
        v10 = *(int *)(*((_QWORD *)v4 + 5) + 20);
        if (*(unsigned int *)(v11 + 12) <= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x196311534);
        }
      }
      else
      {
        if ((_DWORD)a3 != 3)
          goto LABEL_52;
        v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 72))(*((_QWORD *)this + 4));
        v10 = *(int *)(*((_QWORD *)v4 + 5) + 20);
        if (*(unsigned int *)(v11 + 12) <= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x196311214);
        }
      }
      goto LABEL_58;
    case 'M':
      if ((_DWORD)a3 == 4)
      {
        v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 88))(*((_QWORD *)this + 4));
        v10 = *(int *)(*((_QWORD *)v4 + 5) + 20);
        if (*(unsigned int *)(v11 + 12) <= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x1963113CCLL);
        }
      }
      else
      {
        if ((_DWORD)a3 != 3)
        {
LABEL_52:
          v5 = (*(_DWORD *)(*((_QWORD *)this + 5) + 20) + 1);
          goto LABEL_53;
        }
        v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4));
        v10 = *(int *)(*((_QWORD *)v4 + 5) + 20);
        if (*(unsigned int *)(v11 + 12) <= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x1963111ACLL);
        }
      }
LABEL_58:
      v9 = (uint64_t *)v11;
      this = (WTF::StringImpl *)((char *)v4 + 8);
LABEL_59:
      v22 = *v9;
      if (*((_DWORD *)v4 + 6) || *((_QWORD *)v4 + 2))
      {
        v26 = *(_QWORD *)(v22 + 8 * v10);
        if (v26 && (*(_BYTE *)(v26 + 16) & 4) == 0)
          this = (WTF::StringImpl *)WTF::StringBuilder::append();
        else
          this = (WTF::StringImpl *)WTF::StringBuilder::append();
      }
      else
      {
        v23 = *(_DWORD **)(v22 + 8 * v10);
        if (v23)
          *v23 += 2;
        v24 = *(WTF::StringImpl **)this;
        *(_QWORD *)this = v23;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(v24, v7);
          else
            *(_DWORD *)v24 -= 2;
        }
        v25 = *(_QWORD *)(v22 + 8 * v10);
        if (v25)
          LODWORD(v25) = *(_DWORD *)(v25 + 4);
        *((_DWORD *)v4 + 6) = v25;
      }
      break;
    default:
      if (a2 != 97)
        return this;
      v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 80))(*((_QWORD *)this + 4));
      v8 = *(_DWORD *)(*((_QWORD *)v4 + 5) + 12);
      if (*(_DWORD *)(v6 + 12) <= (v8 > 11))
      {
        __break(0xC471u);
        JUMPOUT(0x19631152CLL);
      }
      v9 = (uint64_t *)v6;
      this = (WTF::StringImpl *)((char *)v4 + 8);
      v10 = v8 > 11;
      goto LABEL_59;
  }
  return this;
}

WTF::StringImpl **WebCore::DateTimeStringBuilder::visitLiteral(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  result = (WTF::StringImpl **)(a1 + 8);
  if (*(_DWORD *)(a1 + 24) || *(_QWORD *)(a1 + 16))
  {
    if (*(_QWORD *)a2 && (*(_BYTE *)(*(_QWORD *)a2 + 16) & 4) == 0)
      return (WTF::StringImpl **)WTF::StringBuilder::append();
    else
      return (WTF::StringImpl **)WTF::StringBuilder::append();
  }
  else
  {
    v5 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v5 += 2;
    v6 = *result;
    *result = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        result = (WTF::StringImpl **)WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      LODWORD(v7) = *((_DWORD *)v7 + 1);
    *(_DWORD *)(a1 + 24) = (_DWORD)v7;
  }
  return result;
}

void WebCore::Locale::~Locale(WebCore::Locale *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  *(_QWORD *)this = &unk_1E341DFD0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
}

WTF::StringImpl *WebCore::Locale::setLocaleData(uint64_t a1, unsigned int *a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, _DWORD **a6)
{
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  WTF::StringImpl *result;

  v11 = a2[3];
  if ((_DWORD)v11)
  {
    v13 = 0;
    v14 = a1 + 8;
    do
    {
      v15 = *(_DWORD **)(*(_QWORD *)a2 + 8 * v13);
      if (v15)
        *v15 += 2;
      v16 = *(WTF::StringImpl **)(v14 + 8 * v13);
      *(_QWORD *)(v14 + 8 * v13) = v15;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
          v11 = a2[3];
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
      ++v13;
    }
    while (v13 < v11);
  }
  v17 = *a3;
  if (*a3)
    *v17 += 2;
  v18 = *(WTF::StringImpl **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *a4;
  if (*a4)
    *v19 += 2;
  v20 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v19;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *a5;
  if (*a5)
    *v21 += 2;
  v22 = *(WTF::StringImpl **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v21;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *a6;
  if (*a6)
    *v23 += 2;
  result = *(WTF::StringImpl **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v23;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_BYTE *)(a1 + 136) = 1;
  return result;
}

uint64_t WebCore::Locale::convertFromLocalizedNumber@<X0>(WebCore::Locale *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t result;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  _BYTE *v48;
  unint64_t v49;
  _BYTE *v50;
  _BYTE *v52;
  WTF::StringImpl *v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  char v75;
  WTF::StringImpl *v76;

  (*(void (**)(WebCore::Locale *))(*(_QWORD *)this + 120))(this);
  WTF::String::trim();
  result = (uint64_t)v76;
  if (*((_BYTE *)this + 136))
    v6 = v76 == 0;
  else
    v6 = 1;
  if (v6 || (v7 = *((_DWORD *)v76 + 1)) == 0)
  {
    *a2 = v76;
    return result;
  }
  v8 = *((_QWORD *)this + 15);
  if (v8 && *(_DWORD *)(v8 + 4) || (v9 = *((_QWORD *)this + 16)) != 0 && *(_DWORD *)(v9 + 4))
  {
    if (!WTF::StringImpl::startsWith())
      goto LABEL_22;
    v67 = *((_QWORD *)this + 16);
    if (v67)
      v68 = *(_DWORD *)(v67 + 4);
    else
      v68 = 0;
    if (v76)
    {
      if ((WTF::StringImpl::endsWith() & 1) != 0)
      {
LABEL_151:
        v69 = *((_QWORD *)this + 15);
        if (v69)
          v12 = *(_DWORD *)(v69 + 4);
        else
          v12 = 0;
        v70 = *((_QWORD *)this + 16);
        if (v70)
          LODWORD(v70) = *(_DWORD *)(v70 + 4);
        v7 -= v70;
        goto LABEL_17;
      }
    }
    else if (!v68)
    {
      goto LABEL_151;
    }
LABEL_22:
    v15 = *((_QWORD *)this + 13);
    if (v15)
      v16 = *(_DWORD *)(v15 + 4);
    else
      v16 = 0;
    result = (uint64_t)v76;
    if (v76)
    {
      result = WTF::StringImpl::startsWith();
      if ((result & 1) == 0)
        goto LABEL_141;
    }
    else if (v16)
    {
      goto LABEL_141;
    }
    v17 = *((_QWORD *)this + 14);
    if (v17)
      v18 = *(_DWORD *)(v17 + 4);
    else
      v18 = 0;
    result = (uint64_t)v76;
    if (v76)
    {
      result = WTF::StringImpl::endsWith();
      if ((result & 1) != 0)
        goto LABEL_30;
    }
    else if (!v18)
    {
      goto LABEL_30;
    }
LABEL_141:
    *a2 = v76;
    return result;
  }
  if (!WTF::StringImpl::startsWith())
    goto LABEL_16;
  v10 = *((_QWORD *)this + 14);
  if (v10)
    v11 = *(_DWORD *)(v10 + 4);
  else
    v11 = 0;
  if (!v76)
  {
    if (!v11)
      goto LABEL_30;
    goto LABEL_16;
  }
  if ((WTF::StringImpl::endsWith() & 1) == 0)
  {
LABEL_16:
    v12 = 0;
LABEL_17:
    v13 = 0;
    goto LABEL_18;
  }
LABEL_30:
  v19 = *((_QWORD *)this + 13);
  if (v19)
    v12 = *(_DWORD *)(v19 + 4);
  else
    v12 = 0;
  v20 = *((_QWORD *)this + 14);
  if (v20)
    LODWORD(v20) = *(_DWORD *)(v20 + 4);
  v7 -= v20;
  if (v7 - v12 >= 2)
  {
    if (v76)
    {
      if (*((_DWORD *)v76 + 1) > v12)
      {
        v21 = *((_QWORD *)v76 + 1);
        v22 = (*((_BYTE *)v76 + 16) & 4) != 0 ? *(unsigned __int8 *)(v21 + v12) : *(unsigned __int16 *)(v21 + 2 * v12);
        if (v22 == 43)
          ++v12;
      }
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = 1;
    }
    else
    {
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = 1;
    }
    WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v72);
    goto LABEL_43;
  }
  v13 = 1;
LABEL_18:
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v72);
  if ((v13 & 1) == 0)
    WTF::StringBuilder::append((uint64_t)&v72, 0x2Du);
LABEL_43:
  if (v12 >= v7)
    goto LABEL_110;
  do
  {
    v23 = v76;
    if (v76)
    {
      v24 = 0;
      while (1)
      {
        v25 = *((_QWORD *)this + v24 + 1);
        if (v25)
        {
          v26 = *(unsigned int *)(v25 + 4);
          if ((_DWORD)v26)
          {
            v27 = *((_DWORD *)v76 + 1);
            if (v26 + v12 <= v27)
            {
              v28 = *(_QWORD *)(v25 + 8);
              if ((*(_BYTE *)(v25 + 16) & 4) != 0)
              {
                v29 = 0;
                v30 = 0;
                do
                {
                  if (v27 <= v12 + v29)
                  {
                    v33 = 0;
                  }
                  else
                  {
                    v31 = *((_QWORD *)v76 + 1);
                    v32 = v12 + v29;
                    v14 = *((unsigned __int8 *)v76 + 16);
                    if ((v14 & 4) != 0)
                      v33 = *(unsigned __int8 *)(v31 + v32);
                    else
                      v33 = *(unsigned __int16 *)(v31 + 2 * v32);
                  }
                  if (v33 != *(unsigned __int8 *)(v28 + v29))
                    break;
                  v30 = ++v29 >= v26;
                }
                while (v26 != v29);
              }
              else
              {
                v34 = 0;
                v30 = 0;
                do
                {
                  if (v27 <= v12 + v34)
                  {
                    v37 = 0;
                  }
                  else
                  {
                    v35 = *((_QWORD *)v76 + 1);
                    v36 = v12 + v34;
                    v14 = *((unsigned __int8 *)v76 + 16);
                    if ((v14 & 4) != 0)
                      v37 = *(unsigned __int8 *)(v35 + v36);
                    else
                      v37 = *(unsigned __int16 *)(v35 + 2 * v36);
                  }
                  if (v37 != *(unsigned __int16 *)(v28 + 2 * v34))
                    break;
                  v30 = ++v34 >= v26;
                }
                while (v26 != v34);
              }
              if (v30)
                break;
            }
          }
        }
        if (++v24 == 12)
          goto LABEL_164;
      }
      v12 += v26;
      goto LABEL_70;
    }
    v24 = 0;
    v62 = -v12;
    v63 = v62 - 1;
    while (1)
    {
      v45 = *((_QWORD *)this + v24 + 1);
      if (!v45)
        goto LABEL_98;
      v46 = *(_DWORD *)(v45 + 4);
      if (!v46 || v46 != (_DWORD)v62)
        goto LABEL_98;
      v48 = *(_BYTE **)(v45 + 8);
      if ((*(_BYTE *)(v45 + 16) & 4) == 0)
        break;
      if (!*v48)
      {
        v49 = 0;
        v50 = v48 + 1;
        while (v63 != v49)
        {
          if (v50[v49++])
            goto LABEL_103;
        }
        goto LABEL_139;
      }
LABEL_98:
      if (++v24 == 12)
      {
        v23 = 0;
        goto LABEL_164;
      }
    }
    if (*(_WORD *)v48)
      goto LABEL_98;
    v49 = 0;
    v52 = v48 + 2;
    while (v63 != v49)
    {
      if (*(unsigned __int16 *)&v52[2 * v49++])
      {
LABEL_103:
        if (v49 < v62)
          goto LABEL_98;
        break;
      }
    }
LABEL_139:
    v12 = 0;
LABEL_70:
    if (v24 > 0xB)
      goto LABEL_164;
    if ((_DWORD)v24 != 10)
    {
      if ((_DWORD)v24 != 11)
      {
        v38 = v24 + 48;
        LOWORD(v71) = v24 + 48;
        if (v73 && ((v39 = v74, v74 < *((_DWORD *)v73 + 1)) ? (v40 = v72 == 0) : (v40 = 0), v40))
        {
          v41 = *((_DWORD *)v73 + 4);
          v42 = *((_QWORD *)v73 + 1);
          ++v74;
          if ((v41 & 4) != 0)
            *(_BYTE *)(v42 + v39) = v38;
          else
            *(_WORD *)(v42 + 2 * v39) = v38;
        }
        else
        {
          WTF::StringBuilder::append();
        }
        continue;
      }
LABEL_164:
      v76 = 0;
      *a2 = v23;
      goto LABEL_116;
    }
    LOBYTE(v71) = 46;
    if (v73 && ((v43 = v74, v74 < *((_DWORD *)v73 + 1)) ? (v44 = v72 == 0) : (v44 = 0), v44))
    {
      v60 = *((_DWORD *)v73 + 4);
      v61 = *((_QWORD *)v73 + 1);
      ++v74;
      if ((v60 & 4) != 0)
        *(_BYTE *)(v61 + v43) = 46;
      else
        *(_WORD *)(v61 + 2 * v43) = 46;
    }
    else
    {
      WTF::StringBuilder::append();
    }
  }
  while (v12 < v7);
LABEL_110:
  v54 = v72;
  if (v72
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v72),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v72),
        (v54 = v72) != 0))
  {
    *(_DWORD *)v54 += 2;
    *a2 = v54;
    v55 = *((_DWORD *)v54 + 1);
    if (v55 >= 2)
    {
      v14 = v55 - 1;
      v56 = *((_QWORD *)v54 + 1);
      v57 = (*((_BYTE *)v54 + 16) & 4) != 0 ? *(unsigned __int8 *)(v56 + v14) : *(unsigned __int16 *)(v56 + 2 * v14);
      if (v57 == 46)
      {
        WTF::String::left(a2, v14, &v71);
        v64 = v71;
        v71 = 0;
        v65 = *a2;
        *a2 = v64;
        if (v65)
        {
          v66 = *(_DWORD *)v65 - 2;
          if (*(_DWORD *)v65 != 2)
            goto LABEL_145;
          WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v14);
          v65 = v71;
          v71 = 0;
          if (!v65)
            goto LABEL_116;
          v66 = *(_DWORD *)v65 - 2;
          if (*(_DWORD *)v65 != 2)
          {
LABEL_145:
            *(_DWORD *)v65 = v66;
            goto LABEL_116;
          }
          WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v14);
        }
      }
    }
  }
  else
  {
    *a2 = 0;
  }
LABEL_116:
  v58 = v73;
  v73 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = v72;
  v72 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v59 -= 2;
  }
  result = (uint64_t)v76;
  v76 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::Locale::formatDateTime@<X0>(WTF::StringImpl *result@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, WTF::StringImpl **a4@<X8>)
{
  int v5;
  void (**v6)(_QWORD *__return_ptr);
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  void (**v14)(WebCore::DateTimeStringBuilder *__hidden);
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  char v18;
  WTF::StringImpl *v19;
  unsigned __int8 *v20;

  v5 = a2[32];
  if (a2[32])
  {
    v15 = 0;
    v16 = 0;
    v14 = &off_1E341DFA0;
    v17 = 0;
    v18 = 1;
    v19 = result;
    v20 = a2;
    switch(v5)
    {
      case 1:
        (**(void (***)(WTF::StringImpl **__return_ptr))result)(&v13);
        goto LABEL_11;
      case 2:
        v6 = *(void (***)(_QWORD *__return_ptr))result;
        v7 = a3 == 1;
        v8 = 40;
        v9 = 48;
        goto LABEL_8;
      case 3:
        v6 = *(void (***)(_QWORD *__return_ptr))result;
        v7 = a3 == 1;
        v8 = 8;
        v9 = 16;
        goto LABEL_8;
      case 4:
        v6 = *(void (***)(_QWORD *__return_ptr))result;
        v7 = a3 == 1;
        v8 = 24;
        v9 = 32;
LABEL_8:
        if (v7)
          v8 = v9;
        (*(void (**)(WTF::StringImpl **__return_ptr))((char *)v6 + v8))(&v13);
LABEL_11:
        WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v15);
        WebCore::DateTimeFormat::parse((uint64_t *)&v13, (WTF::StringImpl *)&v14);
        v10 = v13;
        v13 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        break;
      default:
        break;
    }
    v11 = v15;
    if (v15
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v15),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v15),
          (v11 = v15) != 0))
    {
      *(_DWORD *)v11 += 2;
    }
    *a4 = v11;
    v12 = v16;
    v14 = &off_1E341DFA0;
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

void WebCore::DateTimeStringBuilder::~DateTimeStringBuilder(WebCore::DateTimeStringBuilder *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E341DFA0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E341DFA0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::Locale::localizedDecimalSeparator@<X0>(WebCore::Locale *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v5;

  result = (*(uint64_t (**)(WebCore::Locale *))(*(_QWORD *)this + 120))(this);
  v5 = (_DWORD *)*((_QWORD *)this + 11);
  if (v5)
    *v5 += 2;
  *a2 = v5;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SQLiteStatement::bindValue(int,std::variant<decltype(nullptr),WTF::String,double> const&)::$_0,WebCore::SQLiteStatement::bindValue(int,std::variant<decltype(nullptr),WTF::String,double> const&)::$_1,WebCore::SQLiteStatement::bindValue(int,std::variant<decltype(nullptr),WTF::String,double> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::String,double> const&>(uint64_t a1)
{
  return sqlite3_bind_null(*(sqlite3_stmt **)(**(_QWORD **)a1 + 8), **(_DWORD **)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SQLiteStatement::bindValue(int,std::variant<decltype(nullptr),WTF::String,double> const&)::$_0,WebCore::SQLiteStatement::bindValue(int,std::variant<decltype(nullptr),WTF::String,double> const&)::$_1,WebCore::SQLiteStatement::bindValue(int,std::variant<decltype(nullptr),WTF::String,double> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::String,double> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 16);
  if (*a2)
  {
    v5 = *(char **)(v3 + 8);
    v6 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  return WebCore::SQLiteStatement::bindText(v4, **(_DWORD **)(v2 + 24), v5, v6);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SQLiteStatement::bindValue(int,std::variant<decltype(nullptr),WTF::String,double> const&)::$_0,WebCore::SQLiteStatement::bindValue(int,std::variant<decltype(nullptr),WTF::String,double> const&)::$_1,WebCore::SQLiteStatement::bindValue(int,std::variant<decltype(nullptr),WTF::String,double> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::String,double> const&>(uint64_t a1, double *a2)
{
  return sqlite3_bind_double(*(sqlite3_stmt **)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 8), **(_DWORD **)(*(_QWORD *)a1 + 40), *a2);
}

unsigned int **std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_0 &&>>()
{
  uint64_t v0;
  unsigned int **result;
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  WTF *v7;

  v0 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v0 = 1;
  *(_WORD *)(v0 + 4) &= 0xE000u;
  *(_QWORD *)(v0 + 8) = 0;
  v6 = (unsigned int *)v0;
  result = WTF::RefPtr<WebCore::BidiContext,WTF::RawPtrTraits<WebCore::BidiContext>,WTF::DefaultRefDerefTraits<WebCore::BidiContext>>::operator=<WebCore::BidiContext>((unsigned int **)&WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::ltrContext, &v6);
  v3 = v6;
  v6 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (WTF *)v3;
      return (unsigned int **)WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v7, v2);
    }
  }
  return result;
}

unsigned int **WTF::RefPtr<WebCore::BidiContext,WTF::RawPtrTraits<WebCore::BidiContext>,WTF::DefaultRefDerefTraits<WebCore::BidiContext>>::operator=<WebCore::BidiContext>(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (WTF *)v4;
      WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8, a2);
    }
  }
  return a1;
}

unsigned int **std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_1 &&>>()
{
  uint64_t v0;
  unsigned int **result;
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  WTF *v7;

  v0 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v0 = 1;
  *(_WORD *)(v0 + 4) = *(_WORD *)(v0 + 4) & 0xE000 | 0x800;
  *(_QWORD *)(v0 + 8) = 0;
  v6 = (unsigned int *)v0;
  result = WTF::RefPtr<WebCore::BidiContext,WTF::RawPtrTraits<WebCore::BidiContext>,WTF::DefaultRefDerefTraits<WebCore::BidiContext>>::operator=<WebCore::BidiContext>((unsigned int **)&WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::ltrOverrideContext, &v6);
  v3 = v6;
  v6 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (WTF *)v3;
      return (unsigned int **)WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v7, v2);
    }
  }
  return result;
}

unsigned int **std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_2 &&>>()
{
  uint64_t v0;
  unsigned int **result;
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  WTF *v7;

  v0 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v0 = 1;
  *(_WORD *)(v0 + 4) = *(_WORD *)(v0 + 4) & 0xE000 | 0x41;
  *(_QWORD *)(v0 + 8) = 0;
  v6 = (unsigned int *)v0;
  result = WTF::RefPtr<WebCore::BidiContext,WTF::RawPtrTraits<WebCore::BidiContext>,WTF::DefaultRefDerefTraits<WebCore::BidiContext>>::operator=<WebCore::BidiContext>((unsigned int **)&WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::rtlContext, &v6);
  v3 = v6;
  v6 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (WTF *)v3;
      return (unsigned int **)WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v7, v2);
    }
  }
  return result;
}

unsigned int **WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::$_3::operator()()
{
  uint64_t v0;
  unsigned int **result;
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  WTF *v7;

  v0 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v0 = 1;
  *(_WORD *)(v0 + 4) = *(_WORD *)(v0 + 4) & 0xE000 | 0x841;
  *(_QWORD *)(v0 + 8) = 0;
  v6 = (unsigned int *)v0;
  result = WTF::RefPtr<WebCore::BidiContext,WTF::RawPtrTraits<WebCore::BidiContext>,WTF::DefaultRefDerefTraits<WebCore::BidiContext>>::operator=<WebCore::BidiContext>((unsigned int **)&WebCore::BidiContext::create(unsigned char,UCharDirection,BOOL,WebCore::BidiEmbeddingSource,WebCore::BidiContext*)::rtlOverrideContext, &v6);
  v3 = v6;
  v6 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (WTF *)v3;
      return (unsigned int **)WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v7, v2);
    }
  }
  return result;
}

char *WTF::Vector<WebCore::BidiContext *,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 0x41)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 64;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x1963128ACLL);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x41)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 64;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Deque<WebCore::SegmentedString::Substring,0ul>::append(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    if (v4 + 1 == *(_QWORD *)result)
      goto LABEL_4;
  }
  else
  {
    v5 = *(unsigned int *)(result + 24);
    if (v4)
    {
      if (v4 == v5 - 1)
        goto LABEL_4;
    }
    else
    {
      if (!(_DWORD)v5)
      {
LABEL_4:
        result = WTF::Deque<WebCore::SegmentedString::Substring,0ul>::expandCapacity(result);
        v4 = *(_QWORD *)(v3 + 8);
        goto LABEL_5;
      }
      v4 = 0;
    }
  }
LABEL_5:
  v6 = *(_QWORD *)(v3 + 16) + 32 * v4;
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)v6 = v7;
  v8 = *(_OWORD *)(a2 + 1);
  *(_WORD *)(v6 + 24) = *((_WORD *)a2 + 12);
  *(_OWORD *)(v6 + 8) = v8;
  v9 = *(_QWORD *)(v3 + 8);
  if (v9 == *(unsigned int *)(v3 + 24) - 1)
    v10 = 0;
  else
    v10 = v9 + 1;
  *(_QWORD *)(v3 + 8) = v10;
  return result;
}

WTF::StringImpl *WebCore::SegmentedString::append(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;

  v2 = *a2;
  *a2 = 0;
  v5 = (WTF::StringImpl *)v2;
  if (v2)
  {
    LODWORD(v6) = *(_DWORD *)(v2 + 4);
    HIDWORD(v6) = v6;
    v7 = 0;
    v8 = 257;
    if ((_DWORD)v6)
    {
      LOBYTE(v8) = (*(_BYTE *)(v2 + 16) & 4) != 0;
      v7 = *(_QWORD *)(v2 + 8);
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 257;
  }
  WebCore::SegmentedString::appendSubstring(a1, (uint64_t *)&v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::SegmentedString::append(WebCore::SegmentedString *this, const WTF::String *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    *(_DWORD *)v2 += 2;
    v5 = (WTF::StringImpl *)v2;
    LODWORD(v6) = *(_DWORD *)(v2 + 4);
    HIDWORD(v6) = v6;
    v7 = 0;
    v8 = 257;
    if ((_DWORD)v6)
    {
      LOBYTE(v8) = (*(_BYTE *)(v2 + 16) & 4) != 0;
      v7 = *(_QWORD *)(v2 + 8);
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 257;
  }
  WebCore::SegmentedString::appendSubstring((uint64_t)this, (uint64_t *)&v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::SegmentedString::toString@<X0>(WebCore::SegmentedString *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  char v14;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  if (*((_BYTE *)this + 24))
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
  v5 = *((_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 5);
  while (v4 != v5)
  {
    if (*(_BYTE *)(*((_QWORD *)this + 6) + 32 * v5 + 24))
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    v6 = *((unsigned int *)this + 14);
    v5 += v6 + 1;
    do
      v5 -= v6;
    while (v5 >= v6);
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v11);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v11);
  v8 = v11;
  if (v11)
    *(_DWORD *)v11 += 2;
  *a2 = v8;
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16(uint64_t this)
{
  _WORD *v1;
  int v2;
  uint64_t (*v3)(WebCore::SegmentedString *);

  v1 = (_WORD *)(*(_QWORD *)(this + 16) + 2);
  *(_QWORD *)(this + 16) = v1;
  *(_WORD *)(this + 66) = *v1;
  v2 = *(_DWORD *)(this + 12) - 1;
  *(_DWORD *)(this + 12) = v2;
  if (v2 == 1)
  {
    *(_BYTE *)(this + 80) = 0;
    v3 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
    *(_QWORD *)(this + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
    *(_QWORD *)(this + 96) = 0;
    if (*(_BYTE *)(this + 25))
      v3 = WebCore::SegmentedString::advancePastSingleCharacterSubstring;
    *(_QWORD *)(this + 104) = v3;
    *(_QWORD *)(this + 112) = 0;
  }
  return this;
}

uint64_t WebCore::SegmentedString::advancePastSlowCase(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t (*v8)(uint64_t, WTF::StringImpl *);
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unsigned int v13;
  int v14;
  void (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  int v25;
  WTF::StringImpl *v26[5];

  v26[4] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (a3)
    v7 = a3 - 1;
  else
    v7 = 0;
  LODWORD(v8) = *(_DWORD *)(a1 + 12);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if (v9 != v10)
    goto LABEL_44;
  while (1)
  {
    if (v7 > v8)
      return 2;
    if (!v7)
      return 1;
    v12 = 0;
    v13 = 0;
    if ((a4 & 1) != 0)
    {
      while (a3 > v12)
      {
        v14 = *(unsigned __int16 *)(a1 + 66);
        if ((v14 | 0x20) != (unsigned __int16)*(char *)(a2 + v12))
          goto LABEL_35;
        if ((*(_BYTE *)(a1 + 80) & 2) != 0)
        {
          v9 = *(_QWORD *)(a1 + 16) + 1;
          *(_QWORD *)(a1 + 16) = v9;
          *(_WORD *)(a1 + 66) = *(unsigned __int8 *)v9;
          LODWORD(v8) = *(_DWORD *)(a1 + 12) - 1;
          *(_DWORD *)(a1 + 12) = (_DWORD)v8;
          if ((_DWORD)v8 == 1)
          {
            *(_BYTE *)(a1 + 80) = 0;
            *(_QWORD *)(a1 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *(_QWORD *)(a1 + 96) = 0;
            if (*(_BYTE *)(a1 + 25))
              v8 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
            else
              v8 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *(_QWORD *)(a1 + 104) = v8;
            *(_QWORD *)(a1 + 112) = 0;
          }
        }
        else
        {
          v15 = *(void (**)(_QWORD *))(a1 + 88);
          v16 = *(_QWORD *)(a1 + 96);
          v17 = (_QWORD *)(a1 + (v16 >> 1));
          if ((v16 & 1) != 0)
            v15 = *(void (**)(_QWORD *))(*v17 + v15);
          v15(v17);
        }
        *((_WORD *)&v26[1] + v12 + 2) = v14;
        v12 = ++v13;
        if (v7 <= v13)
          return 1;
      }
    }
    else
    {
      while (a3 > v12)
      {
        v21 = *(unsigned __int16 *)(a1 + 66);
        if (v21 != *(char *)(a2 + v12))
        {
LABEL_35:
          if (v13)
          {
            WTF::String::String();
            WebCore::SegmentedString::pushBack(a1, (WTF::StringImpl *)v26);
            v23 = v26[0];
            v26[0] = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v22);
              else
                *(_DWORD *)v23 -= 2;
            }
          }
          return 0;
        }
        if ((*(_BYTE *)(a1 + 80) & 2) != 0)
        {
          v9 = *(_QWORD *)(a1 + 16) + 1;
          *(_QWORD *)(a1 + 16) = v9;
          *(_WORD *)(a1 + 66) = *(unsigned __int8 *)v9;
          LODWORD(v8) = *(_DWORD *)(a1 + 12) - 1;
          *(_DWORD *)(a1 + 12) = (_DWORD)v8;
          if ((_DWORD)v8 == 1)
          {
            *(_BYTE *)(a1 + 80) = 0;
            *(_QWORD *)(a1 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *(_QWORD *)(a1 + 96) = 0;
            if (*(_BYTE *)(a1 + 25))
              v8 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
            else
              v8 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            *(_QWORD *)(a1 + 104) = v8;
            *(_QWORD *)(a1 + 112) = 0;
          }
        }
        else
        {
          v18 = *(void (**)(_QWORD *))(a1 + 88);
          v19 = *(_QWORD *)(a1 + 96);
          v20 = (_QWORD *)(a1 + (v19 >> 1));
          if ((v19 & 1) != 0)
            v18 = *(void (**)(_QWORD *))(*v20 + v18);
          v18(v20);
        }
        *((_WORD *)&v26[1] + v12 + 2) = v21;
        v12 = ++v13;
        if (v7 <= v13)
          return 1;
      }
    }
    __break(1u);
LABEL_44:
    v24 = *(unsigned int *)(a1 + 56);
    do
    {
      v25 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 32 * v9 + 12);
      v9 += v24 + 1;
      do
        v9 -= v24;
      while (v9 >= v24);
      LODWORD(v8) = v25 + (_DWORD)v8;
    }
    while (v10 != v9);
  }
}

uint64_t WebCore::operator<<(uint64_t a1, const WebCore::FontVariantAlternatesValues *a2)
{
  char *v3;
  int8x16_t *v4;
  uint64_t v5;
  int8x16_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  _BOOL4 v18;
  int8x16_t **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  char v23;
  uint64_t v24;
  _DWORD v25[4];
  _DWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  int8x16_t *v33;
  uint64_t v34;

  if (*((_BYTE *)a2 + 65))
  {
    WTF::TextStream::operator<<();
  }
  else
  {
    WebCore::FontVariantAlternatesValues::FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v24, a2);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 1;
    if (v24)
    {
      v17 = (WTF::StringImpl *)"";
      v18 = 0;
      v32 = v24;
      v33 = (int8x16_t *)"stylistic(";
      LODWORD(v34) = 10;
      v31 = 41;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v20, (int8x16_t **)&v17, &v33, &v32, &v31);
    }
    if (v30)
    {
      if (v22)
        v3 = " ";
      else
        v3 = "";
      v17 = (WTF::StringImpl *)v3;
      v18 = v22 != 0;
      v33 = (int8x16_t *)"historical-forms";
      LODWORD(v34) = 16;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v20, (int8x16_t **)&v17, &v33);
    }
    if (v25[3])
    {
      v33 = (int8x16_t *)", ";
      v34 = 3;
      v17 = (WTF::StringImpl *)v25;
      v19 = &v33;
      if (v22)
        v4 = (int8x16_t *)" ";
      else
        v4 = (int8x16_t *)"";
      if (v22)
        v5 = 2;
      else
        v5 = 1;
      _ZN3WTF13StringBuilder6appendIJNS_12ASCIILiteralES2_NS_10InterleaveINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEZNS_10interleaveIS8_S2_EEDcRKT_RKT0_EUlTyTyRSB_SG_E_S2_EEcEEEvDpRKT_((WTF::StringBuilder *)&v20, v4, v5, (int8x16_t *)"styleset(", 10, (WTF::StringImpl *)&v17, 41);
    }
    if (v26[3])
    {
      v33 = (int8x16_t *)", ";
      v34 = 3;
      v17 = (WTF::StringImpl *)v26;
      v19 = &v33;
      if (v22)
        v6 = (int8x16_t *)" ";
      else
        v6 = (int8x16_t *)"";
      if (v22)
        v7 = 2;
      else
        v7 = 1;
      _ZN3WTF13StringBuilder6appendIJNS_12ASCIILiteralES2_NS_10InterleaveINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEZNS_10interleaveIS8_S2_EEDcRKT_RKT0_EUlTyTyRSB_SG_E_S2_EEcEEEvDpRKT_((WTF::StringBuilder *)&v20, v6, v7, (int8x16_t *)"character-variant(", 19, (WTF::StringImpl *)&v17, 41);
    }
    if (v27)
    {
      if (v22)
        v8 = " ";
      else
        v8 = "";
      v17 = (WTF::StringImpl *)v8;
      v18 = v22 != 0;
      v32 = v27;
      v33 = (int8x16_t *)"swash(";
      LODWORD(v34) = 6;
      v31 = 41;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v20, (int8x16_t **)&v17, &v33, &v32, &v31);
    }
    if (v28)
    {
      if (v22)
        v9 = " ";
      else
        v9 = "";
      v17 = (WTF::StringImpl *)v9;
      v18 = v22 != 0;
      v32 = v28;
      v33 = (int8x16_t *)"ornaments(";
      LODWORD(v34) = 10;
      v31 = 41;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v20, (int8x16_t **)&v17, &v33, &v32, &v31);
    }
    if (v29)
    {
      if (v22)
        v10 = " ";
      else
        v10 = "";
      v17 = (WTF::StringImpl *)v10;
      v18 = v22 != 0;
      v32 = v29;
      v33 = (int8x16_t *)"annotation(";
      LODWORD(v34) = 11;
      v31 = 41;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v20, (int8x16_t **)&v17, &v33, &v32, &v31);
    }
    v11 = v20;
    if (v20
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v20),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v20),
          (v11 = v20) != 0))
    {
      *(_DWORD *)v11 += 2;
    }
    v17 = v11;
    WTF::TextStream::operator<<();
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v21;
    v21 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v24, v12);
  }
  return a1;
}

unsigned int *WTF::add<BOOL,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,WTF::String,WTF::String>(unsigned int *a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;

  v13 = (*a1 + *a2) ^ ((*a1 + *a2) << 16);
  v14 = v13 + (v13 >> 11);
  *a1 = v14;
  v15 = *a3;
  if (*a3)
  {
    v16 = *(_DWORD *)(v15 + 4);
    v17 = v16 & 0xFFFFFFFE;
    if ((v16 & 0xFFFFFFFE) != 0)
    {
      v18 = 0;
      do
      {
        v19 = *(unsigned int *)(v15 + 4);
        if (v18 >= v19)
        {
          v21 = 0;
        }
        else
        {
          v20 = *(_QWORD *)(v15 + 8);
          if ((*(_BYTE *)(v15 + 16) & 4) != 0)
            v21 = *(unsigned __int8 *)(v20 + v18);
          else
            v21 = *(unsigned __int16 *)(v20 + 2 * v18);
        }
        v22 = v18 + 1;
        if (v18 + 1 >= v19)
        {
          v24 = 0;
        }
        else
        {
          v23 = *(_QWORD *)(v15 + 8);
          if ((*(_BYTE *)(v15 + 16) & 4) != 0)
            v24 = *(unsigned __int8 *)(v23 + v18 + 1);
          else
            v24 = *(unsigned __int16 *)(v23 + 2 * v18 + 2);
        }
        v25 = (v21 << 11) ^ ((v14 + v24) << 16) ^ (v14 + v24);
        v14 = v25 + (v25 >> 11);
        *a1 = v14;
        v18 = v22 + 1;
      }
      while (v22 + 1 < v17);
    }
    if ((v16 & 1) != 0)
    {
      if (*(_DWORD *)(v15 + 4) <= v17)
      {
        v27 = 0;
      }
      else
      {
        v26 = *(_QWORD *)(v15 + 8);
        if ((*(_BYTE *)(v15 + 16) & 4) != 0)
          v27 = *(unsigned __int8 *)(v26 + v17);
        else
          v27 = *(unsigned __int16 *)(v26 + 2 * v17);
      }
      *a1 = ((v14 + v27) ^ ((v14 + v27) << 16)) + (((v14 + v27) ^ ((v14 + v27) << 16)) >> 11);
    }
  }
  WTF::add<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a4);
  WTF::add<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a5);
  v28 = *a6;
  if (*a6)
  {
    v29 = *(_DWORD *)(v28 + 4);
    v30 = v29 & 0xFFFFFFFE;
    if ((v29 & 0xFFFFFFFE) != 0)
    {
      v31 = 0;
      v32 = *a1;
      do
      {
        v33 = *(unsigned int *)(v28 + 4);
        if (v31 >= v33)
        {
          v35 = 0;
        }
        else
        {
          v34 = *(_QWORD *)(v28 + 8);
          if ((*(_BYTE *)(v28 + 16) & 4) != 0)
            v35 = *(unsigned __int8 *)(v34 + v31);
          else
            v35 = *(unsigned __int16 *)(v34 + 2 * v31);
        }
        v36 = v31 + 1;
        if (v31 + 1 >= v33)
        {
          v38 = 0;
        }
        else
        {
          v37 = *(_QWORD *)(v28 + 8);
          if ((*(_BYTE *)(v28 + 16) & 4) != 0)
            v38 = *(unsigned __int8 *)(v37 + v31 + 1);
          else
            v38 = *(unsigned __int16 *)(v37 + 2 * v31 + 2);
        }
        v39 = (v35 << 11) ^ ((v32 + v38) << 16) ^ (v32 + v38);
        v32 = v39 + (v39 >> 11);
        *a1 = v32;
        v31 = v36 + 1;
      }
      while (v36 + 1 < v30);
    }
    if ((v29 & 1) != 0)
    {
      if (*(_DWORD *)(v28 + 4) <= v30)
      {
        v41 = 0;
      }
      else
      {
        v40 = *(_QWORD *)(v28 + 8);
        if ((*(_BYTE *)(v28 + 16) & 4) != 0)
          v41 = *(unsigned __int8 *)(v40 + v30);
        else
          v41 = *(unsigned __int16 *)(v40 + 2 * v30);
      }
      *a1 = ((*a1 + v41) ^ ((*a1 + v41) << 16)) + (((*a1 + v41) ^ ((*a1 + v41) << 16)) >> 11);
    }
  }
  return WTF::addArgs<WTF::String,WTF::String>(a1, a7, a8);
}

uint64_t WebCore::computeFeatureSettingsFromVariants(WebCore::FontVariantSettings const&,WTF::RefPtr<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>)::$_0::operator()<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(uint64_t result, const WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t *a4, unsigned __int16 a5)
{
  uint64_t *v5;
  const WTF::StringImpl **v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int i;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int *v22;
  int *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int *v45;
  int v46;
  const WTF::StringImpl **v48;

  if (!(_DWORD)a3)
    return result;
  v5 = a4;
  v6 = a2;
  v7 = result;
  v48 = &a2[a3];
  v8 = (a5 - 1640531527) ^ ((a5 - 1640531527) << 16);
  v9 = (v8 + HIBYTE(a5) + (v8 >> 11)) ^ ((v8 + HIBYTE(a5) + (v8 >> 11)) << 16);
  v10 = a5;
  v11 = v9 + (v9 >> 11);
  do
  {
    result = (uint64_t)*v6;
    if (!*v6)
      goto LABEL_47;
    v12 = *v5;
    if (!*v5)
      goto LABEL_47;
    v13 = *(_DWORD *)(v12 - 8);
    v14 = *(_DWORD *)(result + 16);
    if (v14 < 0x100)
      v15 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
    else
      v15 = v14 >> 8;
    for (i = 0; ; v15 = i + v17)
    {
      v17 = v15 & v13;
      v18 = v12 + 24 * (v15 & v13);
      result = *(_QWORD *)v18;
      if (*(_QWORD *)v18 == -1)
        goto LABEL_12;
      if (!result)
        break;
      result = WTF::equal((WTF *)result, *v6, a3);
      if ((result & 1) != 0)
      {
        v5 = a4;
        v19 = *a4;
        if (!*a4)
          goto LABEL_16;
        v20 = *(_DWORD *)(v19 - 4);
LABEL_46:
        if (v18 == v19 + 24 * v20)
          goto LABEL_47;
LABEL_16:
        v21 = *(unsigned int *)(v18 + 20);
        if (!(_DWORD)v21)
          goto LABEL_47;
        v22 = *(int **)(v18 + 8);
        v23 = &v22[v21];
        while (2)
        {
          v24 = *v22;
          if ((*v22 - 100) >= 0xFFFFFF9D)
          {
            v25 = *(uint64_t **)(v7 + 8);
            v26 = *v25;
            if (*v25
              || (result = WTF::fastZeroedMalloc((WTF *)0x50),
                  *v25 = result + 16,
                  *(_DWORD *)(result + 12) = 8,
                  *(_DWORD *)(*v25 - 8) = 7,
                  *(_DWORD *)(*v25 - 16) = 0,
                  *(_DWORD *)(*v25 - 12) = 0,
                  (v26 = *v25) != 0))
            {
              v27 = *(_DWORD *)(v26 - 8);
            }
            else
            {
              v27 = 0;
            }
            v28 = v24 / 0xAu;
            v29 = (v28 << 16) + 3145728;
            v30 = v10 | ((v24 - 10 * v28) << 24) | v29 | 0x30000000;
            v31 = (v11 + HIWORD(v29)) ^ ((v11 + HIWORD(v29)) << 16);
            v32 = (v31 + HIBYTE(v30) + (v31 >> 11)) ^ ((v31 + HIBYTE(v30) + (v31 >> 11)) << 16);
            v33 = (v32 + (v32 >> 11)) ^ (8 * (v32 + (v32 >> 11)));
            v34 = (v33 + (v33 >> 5)) ^ (4 * (v33 + (v33 >> 5)));
            v35 = (v34 + (v34 >> 15)) ^ ((v34 + (v34 >> 15)) << 10);
            if (!v35)
              v35 = 0x800000;
            v36 = v27 & v35;
            v37 = (unsigned int *)(v26 + 8 * (v27 & v35));
            v38 = *v37;
            if (*v37)
            {
              v45 = 0;
              v46 = 1;
              do
              {
                if (v38 == v30)
                {
                  v37[1] = 1;
                  goto LABEL_32;
                }
                if (v38 == -1)
                  v45 = v37;
                v36 = (v36 + v46) & v27;
                v37 = (unsigned int *)(v26 + 8 * v36);
                v38 = *v37;
                ++v46;
              }
              while (*v37);
              if (v45)
              {
                *(_QWORD *)v45 = 0;
                --*(_DWORD *)(*v25 - 16);
                v37 = v45;
              }
            }
            v39 = 1;
            *v37 = v30;
            v37[1] = 1;
            v40 = *v25;
            if (*v25)
              v39 = *(_DWORD *)(v40 - 12) + 1;
            *(_DWORD *)(v40 - 12) = v39;
            v41 = *v25;
            if (*v25)
              v42 = *(_DWORD *)(v41 - 12);
            else
              v42 = 0;
            v43 = (*(_DWORD *)(v41 - 16) + v42);
            v44 = *(unsigned int *)(v41 - 4);
            if (v44 > 0x400)
            {
              if (v44 <= 2 * v43)
                goto LABEL_42;
            }
            else
            {
              if (3 * v44 > 4 * v43)
                goto LABEL_32;
LABEL_42:
              result = (uint64_t)WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,int>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::expand(v25, v37);
            }
          }
LABEL_32:
          if (++v22 == v23)
            goto LABEL_47;
          continue;
        }
      }
LABEL_12:
      ++i;
    }
    v5 = a4;
    v19 = *a4;
    if (*a4)
    {
      v20 = *(_DWORD *)(v19 - 4);
      v18 = v19 + 24 * v20;
      goto LABEL_46;
    }
LABEL_47:
    ++v6;
  }
  while (v6 != v48);
  return result;
}

uint64_t WebCore::computeFeatureSettingsFromVariants(WebCore::FontVariantSettings const&,WTF::RefPtr<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>)::$_2::operator()<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(uint64_t **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3, unsigned int *a4)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int i;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;

  result = (uint64_t)*a2;
  if (!*a2)
    return result;
  v7 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    return result;
  v10 = *(_DWORD *)(v7 - 8);
  v11 = *(_DWORD *)(result + 16);
  if (v11 < 0x100)
    v12 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
  else
    v12 = v11 >> 8;
  for (i = 0; ; v12 = i + v14)
  {
    v14 = v12 & v10;
    v15 = v7 + 24 * (v12 & v10);
    result = *(_QWORD *)v15;
    if (*(_QWORD *)v15 == -1)
      goto LABEL_10;
    if (!result)
      break;
    result = WTF::equal((WTF *)result, *a2, a3);
    if ((result & 1) != 0)
    {
      v16 = *(_QWORD *)a3;
      if (!*(_QWORD *)a3)
        goto LABEL_14;
      v17 = *(_DWORD *)(v16 - 4);
LABEL_46:
      if (v15 == v16 + 24 * v17)
        return result;
LABEL_14:
      v18 = *(unsigned int *)(v15 + 20);
      if (!(_DWORD)v18)
        return result;
      v19 = *(unsigned int **)(v15 + 8);
      v20 = &v19[v18];
      while (2)
      {
        v21 = *v19;
        if (*v19 - 100 >= 0xFFFFFF9D)
        {
          v22 = *a1;
          v23 = **a1;
          if (v23
            || (result = (uint64_t)WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,int>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::expand(*a1, 0), (v23 = *v22) != 0))
          {
            v24 = *(_DWORD *)(v23 - 8);
          }
          else
          {
            v24 = 0;
          }
          v25 = *a4;
          v26 = (v25 - 1640531527) ^ ((v25 - 1640531527) << 16);
          v27 = (v26 + BYTE1(v25) + (v26 >> 11)) ^ ((v26 + BYTE1(v25) + (v26 >> 11)) << 16);
          v28 = (v27 + BYTE2(v25) + (v27 >> 11)) ^ ((v27 + BYTE2(v25) + (v27 >> 11)) << 16);
          v29 = (v28 + HIBYTE(v25) + (v28 >> 11)) ^ ((v28 + HIBYTE(v25) + (v28 >> 11)) << 16);
          v30 = (v29 + (v29 >> 11)) ^ (8 * (v29 + (v29 >> 11)));
          v31 = (v30 + (v30 >> 5)) ^ (4 * (v30 + (v30 >> 5)));
          v32 = (v31 + (v31 >> 15)) ^ ((v31 + (v31 >> 15)) << 10);
          if (!v32)
            v32 = 0x800000;
          v33 = v32 & v24;
          v34 = (unsigned int *)(v23 + 8 * (v32 & v24));
          v35 = *v34;
          if (*v34)
          {
            v36 = 0;
            v37 = 1;
            do
            {
              if (v35 == v25)
              {
                v34[1] = v21;
                goto LABEL_40;
              }
              if (v35 == -1)
                v36 = v34;
              v33 = (v33 + v37) & v24;
              v34 = (unsigned int *)(v23 + 8 * v33);
              v35 = *v34;
              ++v37;
            }
            while (*v34);
            if (v36)
            {
              *(_QWORD *)v36 = 0;
              --*(_DWORD *)(*v22 - 16);
              v25 = *a4;
              v34 = v36;
            }
          }
          *v34 = v25;
          v34[1] = v21;
          v38 = *v22;
          if (*v22)
            v39 = *(_DWORD *)(v38 - 12) + 1;
          else
            v39 = 1;
          *(_DWORD *)(v38 - 12) = v39;
          v40 = *v22;
          if (*v22)
            v41 = *(_DWORD *)(v40 - 12);
          else
            v41 = 0;
          v42 = (*(_DWORD *)(v40 - 16) + v41);
          v43 = *(unsigned int *)(v40 - 4);
          if (v43 > 0x400)
          {
            if (v43 <= 2 * v42)
LABEL_39:
              result = (uint64_t)WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,int>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::expand(v22, v34);
          }
          else if (3 * v43 <= 4 * v42)
          {
            goto LABEL_39;
          }
        }
LABEL_40:
        if (++v19 == v20)
          return result;
        continue;
      }
    }
LABEL_10:
    ++i;
  }
  v16 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v17 = *(_DWORD *)(v16 - 4);
    v15 = v16 + 24 * v17;
    goto LABEL_46;
  }
  return result;
}

BOOL WebCore::canHyphenate(WebCore *this, const WTF::AtomString *a2)
{
  {
    qword_1EE2E4E30 = 0;
    xmmword_1EE2E4E10 = 0u;
    unk_1EE2E4E20 = 0u;
    WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::cache(void)::cache = 0u;
    unk_1EE2E4E00 = 0u;
  }
  return *(_QWORD *)WTF::TinyLRUCache<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>,4ul,WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>>::get((uint64_t)&WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::cache(void)::cache, this) != 0;
}

uint64_t WTF::TinyLRUCache<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>,4ul,WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>>::get(uint64_t a1, WTF::StringImpl *a2)
{
  const __CFLocale *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  const __CFLocale *v7;
  unint64_t v8;
  uint64_t *v9;
  WTF::StringImpl *v11;
  CFLocaleRef v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  const void *v16;
  const __CFLocale *v17;
  _QWORD *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  const __CFLocale **v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  const void *v27;
  CFLocaleRef v28[2];

  v2 = *(const __CFLocale **)a2;
  if (*(_QWORD *)a2)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 64);
    v6 = (_QWORD *)(a1 + 16 * v5);
    do
    {
      if (v5 == v4)
      {
        if (v5 == 4)
        {
          v21 = (const __CFLocale **)a2;
          v22 = 0;
          v23 = (uint64_t *)(a1 + 16);
          do
          {
            v24 = *v23;
            *v23 = 0;
            v25 = (WTF::StringImpl *)*(v23 - 2);
            *(v23 - 2) = v24;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, a2);
              else
                *(_DWORD *)v25 -= 2;
            }
            v26 = v23[1];
            v23[1] = 0;
            v27 = (const void *)*(v23 - 1);
            *(v23 - 1) = v26;
            if (v27)
              CFRelease(v27);
            ++v22;
            v23 += 2;
          }
          while (v22 < *(_QWORD *)(a1 + 64) - 1);
          a2 = (WTF::StringImpl *)v21;
          v2 = *v21;
        }
        else
        {
          *(_QWORD *)(a1 + 64) = v5 + 1;
        }
        if (v2)
          *(_DWORD *)v2 += 2;
        WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::createValueForKey(v28, a2);
        v12 = v28[0];
        v13 = *(_QWORD *)(a1 + 64) - 1;
        v14 = *(WTF::StringImpl **)(a1 + 16 * v13);
        *(_QWORD *)(a1 + 16 * v13) = v2;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v11);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = a1 + 16 * v13;
        v16 = *(const void **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = v12;
        if (v16)
          CFRelease(v16);
        return a1 + 16 * *(_QWORD *)(a1 + 64) - 8;
      }
      v7 = (const __CFLocale *)*(v6 - 2);
      v6 -= 2;
      ++v4;
    }
    while (v7 != v2);
    v8 = v5 - v4;
    if (v5 - v4 >= (unint64_t)(v5 - 1))
      return a1 + 16 * (v5 - 1) + 8;
    v17 = (const __CFLocale *)v6[1];
    *v6 = 0;
    v6[1] = 0;
    v28[0] = v2;
    v28[1] = v17;
    do
    {
      ++v8;
      v18 = v6 + 2;
      std::pair<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::operator=[abi:sn180100]((uint64_t)v6, (WTF::StringImpl *)(v6 + 2));
      v19 = *(_QWORD *)(a1 + 64) - 1;
      v6 = v18;
    }
    while (v8 < v19);
    std::pair<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::operator=[abi:sn180100](a1 + 16 * v19, (WTF::StringImpl *)v28);
    WTF::KeyValuePair<WTF::AtomString,WTF::RetainPtr<__CFString const*>>::~KeyValuePair((uint64_t)v28, v20);
    return a1 + 16 * *(_QWORD *)(a1 + 64) - 8;
  }
  else
  {
    v9 = &_MergedGlobals_247;
    if ((byte_1ECE841E8 & 1) == 0)
    {
      WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::createValueForNullKey(v28);
      _MergedGlobals_247 = (uint64_t)v28[0];
      byte_1ECE841E8 = 1;
    }
  }
  return (uint64_t)v9;
}

CFIndex WebCore::lastHyphenLocation(uint64_t a1, uint64_t a2, CFIndex a3, WTF::StringImpl *a4)
{
  CFTypeRef *v5;
  const __CFLocale *v6;
  CFIndex HyphenationLocationBeforeIndex;
  const __CFString *string;
  uint64_t v10;
  uint64_t limitRange;
  CFRange v12;

  v10 = a1;
  limitRange = a2;
  {
    qword_1EE2E4E30 = 0;
    xmmword_1EE2E4E10 = 0u;
    unk_1EE2E4E20 = 0u;
    WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::cache(void)::cache = 0u;
    unk_1EE2E4E00 = 0u;
  }
  v5 = (CFTypeRef *)WTF::TinyLRUCache<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>,4ul,WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>>::get((uint64_t)&WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::cache(void)::cache, a4);
  v6 = (const __CFLocale *)*v5;
  if (*v5)
    CFRetain(*v5);
  WTF::StringView::createCFStringWithoutCopying((WTF::StringView *)&v10);
  v12.length = limitRange;
  v12.location = 0;
  HyphenationLocationBeforeIndex = CFStringGetHyphenationLocationBeforeIndex(string, a3, v12, 1uLL, v6, 0);
  if (string)
    CFRelease(string);
  if (v6)
    CFRelease(v6);
  if (HyphenationLocationBeforeIndex == -1)
    return 0;
  else
    return HyphenationLocationBeforeIndex;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::SegmentedString::Substring>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 4;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, int8x16_t **a2, int8x16_t **a3, uint64_t *a4, char *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *result;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  int8x16_t *v40;
  uint64_t v41;
  char *v42;
  int8x16_t *v43;
  uint64_t v44;
  int8x16_t *v45;
  size_t v46;
  uint64_t v47;
  char v48;
  int8x16_t *v49;
  char *v50;
  char *v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  char *v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  char *v63;
  char *v64;
  char *v65;
  __int16 v66;
  unsigned __int128 *v67;
  unsigned __int128 *v68;
  unsigned __int128 v69;
  char v70;
  int8x16x2_t v71;
  int8x16x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;

  v9 = *a4;
  v10 = *((_QWORD *)a1 + 1);
  if ((v10 || (v10 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v10 + 16) & 4) == 0 || v9 && (*(_BYTE *)(v9 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v12 = *a2;
      v13 = a2[1];
      v14 = *a3;
      v15 = *((unsigned int *)a3 + 2);
      v16 = *a4;
      v17 = *a5;
      v18 = &result[2 * v13];
      v19 = v13 & 0xFFFFFFC0;
      if (v19)
      {
        v20 = &result[2 * v19];
        v21 = 0uLL;
        do
        {
          v71.val[0] = *v12;
          v22 = v12[1];
          v74.val[0] = v12[2];
          v23 = v12[3];
          v12 += 4;
          v24 = v23;
          v74.val[1] = 0uLL;
          v77.val[0] = v22;
          v71.val[1] = 0uLL;
          v25 = result;
          vst2q_s8(v25, v71);
          v25 += 32;
          v77.val[1] = 0uLL;
          vst2q_s8(v25, v77);
          v26 = result + 64;
          vst2q_s8(v26, v74);
          v27 = result + 96;
          vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
          result += 128;
        }
        while (result != v20);
        result = v20;
      }
      while (result != v18)
      {
        v28 = v12->u8[0];
        v12 = (int8x16_t *)((char *)v12 + 1);
        *(_WORD *)result = v28;
        result += 2;
      }
      v29 = &v18[2 * v15];
      v30 = v15 & 0xFFFFFFC0;
      if (v30)
      {
        v31 = &v18[2 * v30];
        v32 = 0uLL;
        do
        {
          v72.val[0] = *v14;
          v33 = v14[1];
          v75.val[0] = v14[2];
          v34 = v14[3];
          v14 += 4;
          v35 = v34;
          v75.val[1] = 0uLL;
          v78.val[0] = v33;
          v72.val[1] = 0uLL;
          v36 = v18;
          vst2q_s8(v36, v72);
          v36 += 32;
          v78.val[1] = 0uLL;
          vst2q_s8(v36, v78);
          v37 = v18 + 64;
          vst2q_s8(v37, v75);
          v38 = v18 + 96;
          vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
          v18 += 128;
        }
        while (v18 != v31);
        v18 = v31;
      }
      while (v18 != v29)
      {
        v39 = v14->u8[0];
        v14 = (int8x16_t *)((char *)v14 + 1);
        *(_WORD *)v18 = v39;
        v18 += 2;
      }
      if (v16)
      {
        v40 = *(int8x16_t **)(v16 + 8);
        v41 = *(unsigned int *)(v16 + 4);
        if ((*(_BYTE *)(v16 + 16) & 4) != 0)
        {
          v55 = &v29[2 * v41];
          if (v41 >= 0x40)
          {
            v56 = &v29[2 * (v41 & 0xFFFFFFC0)];
            v58 = 0uLL;
            v59 = v29;
            do
            {
              v73.val[0] = *v40;
              v60 = v40[1];
              v76.val[0] = v40[2];
              v61 = v40[3];
              v40 += 4;
              v62 = v61;
              v76.val[1] = 0uLL;
              v79.val[0] = v60;
              v73.val[1] = 0uLL;
              v63 = v59;
              vst2q_s8(v63, v73);
              v63 += 32;
              v79.val[1] = 0uLL;
              vst2q_s8(v63, v79);
              v64 = v59 + 64;
              vst2q_s8(v64, v76);
              v65 = v59 + 96;
              vst2q_s8(v65, *(int8x16x2_t *)(&v58 - 1));
              v59 += 128;
            }
            while (v59 != v56);
          }
          else
          {
            v56 = v29;
          }
          while (v56 != v55)
          {
            v66 = v40->u8[0];
            v40 = (int8x16_t *)((char *)v40 + 1);
            *(_WORD *)v56 = v66;
            v56 += 2;
          }
        }
        else if ((_DWORD)v41 == 1)
        {
          *(_WORD *)v29 = v40->i16[0];
        }
        else if ((_DWORD)v41)
        {
          result = (char *)memcpy(v29, v40, 2 * v41);
        }
        v57 = *(unsigned int *)(v16 + 4);
      }
      else
      {
        v57 = 0;
      }
      *(_WORD *)&v29[2 * v57] = v17;
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v42 = result;
      v43 = a2[1];
      v44 = v43;
      v45 = *a3;
      v46 = *((unsigned int *)a3 + 2);
      v47 = *a4;
      v48 = *a5;
      if ((_DWORD)v43)
      {
        v49 = *a2;
        if ((_DWORD)v43 == 1)
          *result = v49->i8[0];
        else
          result = (char *)memcpy(result, v49, a2[1]);
      }
      v50 = &v42[v44];
      if ((_DWORD)v46)
      {
        if ((_DWORD)v46 == 1)
          *v50 = v45->i8[0];
        else
          result = (char *)memcpy(&v42[v44], v45, v46);
      }
      v51 = &v50[v46];
      if (v47)
      {
        v52 = *(char **)(v47 + 8);
        v53 = *(unsigned int *)(v47 + 4);
        if ((*(_BYTE *)(v47 + 16) & 4) != 0)
        {
          if ((_DWORD)v53)
          {
            if ((_DWORD)v53 == 1)
              *v51 = *v52;
            else
              result = (char *)memcpy(v51, v52, v53);
          }
        }
        else
        {
          if (v53 < 0x10)
          {
            v67 = (unsigned __int128 *)v51;
          }
          else
          {
            v67 = (unsigned __int128 *)&v51[v53 & 0xFFFFFFF0];
            v68 = (unsigned __int128 *)v51;
            do
            {
              v69 = (unsigned __int128)vld2q_s8(v52);
              v52 += 32;
              *v68++ = v69;
            }
            while (v68 != v67);
          }
          while (v67 != (unsigned __int128 *)&v51[v53])
          {
            v70 = *v52;
            v52 += 2;
            *(_BYTE *)v67 = v70;
            v67 = (unsigned __int128 *)((char *)v67 + 1);
          }
        }
        v54 = *(unsigned int *)(v47 + 4);
      }
      else
      {
        v54 = 0;
      }
      v51[v54] = v48;
    }
  }
  return result;
}

_WORD *_ZN3WTF13StringBuilder6appendIJNS_12ASCIILiteralES2_NS_10InterleaveINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEZNS_10interleaveIS8_S2_EEDcRKT_RKT0_EUlTyTyRSB_SG_E_S2_EEcEEEvDpRKT_(WTF::StringBuilder *a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4, uint64_t a5, WTF::StringImpl *a6, char a7)
{
  int v10;
  int v11;
  uint64_t v12;
  _WORD *result;
  int8x16_t *v14;
  int v15;
  int8x16_t *v16;
  int v17;

  if (a3)
  {
    v10 = a3 - 1;
    v16 = a2;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_16;
  }
  else
  {
    v10 = 0;
    v16 = a2;
  }
  v17 = v10;
  if (!a5)
  {
    v11 = 0;
    v14 = a4;
    goto LABEL_5;
  }
  v11 = a5 - 1;
  v14 = a4;
  if ((unint64_t)(a5 - 1) >> 31)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x196314194);
  }
LABEL_5:
  v15 = v11;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, &v16);
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, &v14);
  _ZNK3WTF10InterleaveINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEZNS_10interleaveIS5_NS_12ASCIILiteralEEEDcRKT_RKT0_EUlTyTyRS9_SE_E_S7_E10writeUsingINS_13StringBuilderEEEvSF_(a6, (uint64_t)a1);
  v12 = *((_QWORD *)a1 + 1);
  if ((v12 || (v12 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v12 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
      *result = a7;
  }
  else
  {
    result = (_WORD *)MEMORY[0x19AEA4824](a1);
    if (result)
      *(_BYTE *)result = a7;
  }
  return result;
}

void WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::createValueForNullKey(CFLocaleRef *a1)
{
  const __CFAllocator *v2;
  WTF::StringImpl *v3;
  CFLocaleRef v4;
  CFLocaleIdentifier v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  CFLocaleIdentifier localeIdentifier;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  WTF::defaultLanguage();
  WTF::String::createCFString((WTF::String *)&v7);
  v4 = CFLocaleCreate(v2, localeIdentifier);
  v5 = localeIdentifier;
  localeIdentifier = 0;
  if (v5)
    CFRelease(v5);
  v6 = v7;
  v7 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (CFStringIsHyphenationAvailableForLocale(v4))
  {
    *a1 = v4;
    if (!v4)
      return;
    CFRetain(v4);
  }
  else
  {
    *a1 = 0;
    if (!v4)
      return;
  }
  CFRelease(v4);
}

uint64_t std::pair<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::operator=[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  const void *v7;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v7 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
    CFRelease(v7);
  return a1;
}

void WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::createValueForKey(CFLocaleRef *a1, WTF::String *this)
{
  const __CFAllocator *v3;
  CFLocaleRef v4;
  const __CFString *localeIdentifier;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  WTF::String::createCFString(this);
  v4 = CFLocaleCreate(v3, localeIdentifier);
  if (localeIdentifier)
    CFRelease(localeIdentifier);
  if (CFStringIsHyphenationAvailableForLocale(v4))
  {
    *a1 = v4;
    if (!v4)
      return;
    CFRetain(v4);
  }
  else
  {
    *a1 = 0;
    if (!v4)
      return;
  }
  CFRelease(v4);
}

void WebCore::DOMMimeType::~DOMMimeType(WebCore::DOMMimeType *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::MimeClassInfo::~MimeClassInfo((WebCore::DOMMimeType *)((char *)this + 16), (WTF::StringImpl *)a2);
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
  }
}

WTF::StringImpl *WebCore::DOMMimeType::suffixes@<X0>(WebCore::DOMMimeType *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  unsigned int v4;
  WTF::StringImpl **v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  char v21;
  char v22;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  v4 = *((_DWORD *)this + 11);
  if (!v4)
  {
LABEL_37:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v18);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v18);
    result = v18;
    if (!v18)
    {
LABEL_39:
      *a3 = result;
      v17 = v19;
      v19 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::destroy(v17, a2);
          result = v18;
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
      v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
LABEL_38:
    *(_DWORD *)result += 2;
    goto LABEL_39;
  }
  v6 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  result = *v6;
  if (*v6)
    *(_DWORD *)result += 2;
  v18 = result;
  v8 = *v6;
  if (v8)
    LODWORD(v8) = *((_DWORD *)v8 + 1);
  v20 = v8;
  if (v4 < 2)
  {
LABEL_36:
    if (result)
      goto LABEL_38;
    goto LABEL_37;
  }
  v9 = 1;
  while (1)
  {
    v22 = 44;
    if (v19 && ((v10 = v20, v20 < *((_DWORD *)v19 + 1)) ? (v11 = v18 == 0) : (v11 = 0), v11))
    {
      v15 = *((_DWORD *)v19 + 4);
      v16 = *((_QWORD *)v19 + 1);
      ++v20;
      if ((v15 & 4) != 0)
        *(_BYTE *)(v16 + v10) = 44;
      else
        *(_WORD *)(v16 + 2 * v10) = 44;
    }
    else
    {
      result = (WTF::StringImpl *)WTF::StringBuilder::append();
    }
    if (v9 >= *((unsigned int *)this + 11))
      break;
    v12 = *((_QWORD *)this + 4);
    v13 = *(WTF::StringImpl **)(v12 + 8 * v9);
    if (v20 || v19)
    {
      if (v13 && (*((_BYTE *)v13 + 16) & 4) == 0)
        result = (WTF::StringImpl *)WTF::StringBuilder::append();
      else
        result = (WTF::StringImpl *)WTF::StringBuilder::append();
    }
    else
    {
      if (v13)
        *(_DWORD *)v13 += 2;
      result = v18;
      v18 = v13;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v14 = *(_QWORD *)(v12 + 8 * v9);
      if (v14)
        LODWORD(v14) = *(_DWORD *)(v14 + 4);
      v20 = v14;
    }
    if (++v9 >= *((unsigned int *)this + 11))
    {
      result = v18;
      goto LABEL_36;
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::DOMMimeTypeArray::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = bmalloc::api::isoAllocate();
  result = WebCore::DOMMimeTypeArray::DOMMimeTypeArray(v6, a1, a2);
  *a3 = result;
  return result;
}

uint64_t WebCore::DOMMimeTypeArray::DOMMimeTypeArray(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2);
  v6 = *(unsigned int **)(a2 + 24);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a1 + 32) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a1 + 36) = v8;
  return a1;
}

void WebCore::DOMMimeTypeArray::~DOMMimeTypeArray(WebCore::DOMMimeTypeArray *this, void *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  WTF::Vector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 3;
    *(_QWORD *)this = 0;
  }
}

void WebCore::DOMPlugin::~DOMPlugin(WebCore::DOMPlugin *this, void *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  WTF::Vector<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, a2);
  WebCore::PluginInfo::~PluginInfo((WebCore::DOMPlugin *)((char *)this + 32), v3);
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  WTF::WeakPtrFactory<WebCore::DOMPlugin,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v4);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 3;
    *(_QWORD *)this = 0;
  }
}

uint64_t WebCore::DOMPluginArray::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = bmalloc::api::isoAllocate();
  result = WebCore::DOMPluginArray::DOMPluginArray(v8, a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t WebCore::DOMPluginArray::DOMPluginArray(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2);
  v8 = *(unsigned int **)(a2 + 24);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v8;
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = v10;
  LODWORD(v10) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a1 + 32) = v10;
  LODWORD(v10) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a1 + 36) = v10;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 40) = v11;
  LODWORD(v11) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(a1 + 48) = v11;
  LODWORD(v11) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(a1 + 52) = v11;
  return a1;
}

void WebCore::DOMPluginArray::~DOMPluginArray(WebCore::DOMPluginArray *this, void *a2)
{
  void *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  WTF::Vector<WTF::Ref<WebCore::DOMPlugin,WTF::RawPtrTraits<WebCore::DOMPlugin>,WTF::DefaultRefDerefTraits<WebCore::DOMPlugin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
  WTF::Vector<WTF::Ref<WebCore::DOMPlugin,WTF::RawPtrTraits<WebCore::DOMPlugin>,WTF::DefaultRefDerefTraits<WebCore::DOMPlugin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, v3);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 3;
    *(_QWORD *)this = 0;
  }
}

uint64_t WebCore::DOMPluginArray::namedItem@<X0>(uint64_t this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  WTF *v10;
  WTF::StringImpl *v11;
  char v12;
  uint64_t v13;
  uint64_t j;
  WTF *v15;
  WTF::StringImpl *v16;
  char v17;
  uint64_t v18;

  v5 = this;
  v7 = *(unsigned int *)(this + 36);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)(this + 24);
    for (i = 8 * v7; i; i -= 8)
    {
      v10 = *(WTF **)(*v8 + 32);
      if (v10)
      {
        *(_DWORD *)v10 += 2;
        this = WTF::equal(v10, *a2, a3);
        v12 = this;
        if (*(_DWORD *)v10 == 2)
        {
          this = WTF::StringImpl::destroy(v10, v11);
          if ((v12 & 1) != 0)
            goto LABEL_22;
        }
        else
        {
          *(_DWORD *)v10 -= 2;
          if ((this & 1) != 0)
            goto LABEL_22;
        }
      }
      else
      {
        this = WTF::equal(0, *a2, a3);
        if ((this & 1) != 0)
        {
LABEL_22:
          v18 = *v8;
          ++*(_DWORD *)(*v8 + 8);
          goto LABEL_24;
        }
      }
      ++v8;
    }
  }
  v13 = *(unsigned int *)(v5 + 52);
  if ((_DWORD)v13)
  {
    v8 = *(uint64_t **)(v5 + 40);
    for (j = 8 * v13; j; j -= 8)
    {
      v15 = *(WTF **)(*v8 + 32);
      if (v15)
      {
        *(_DWORD *)v15 += 2;
        this = WTF::equal(v15, *a2, a3);
        v17 = this;
        if (*(_DWORD *)v15 == 2)
        {
          this = WTF::StringImpl::destroy(v15, v16);
          if ((v17 & 1) != 0)
            goto LABEL_22;
        }
        else
        {
          *(_DWORD *)v15 -= 2;
          if ((this & 1) != 0)
            goto LABEL_22;
        }
      }
      else
      {
        this = WTF::equal(0, *a2, a3);
        if ((this & 1) != 0)
          goto LABEL_22;
      }
      ++v8;
    }
  }
  v18 = 0;
LABEL_24:
  *a4 = v18;
  return this;
}

uint64_t WebCore::DOMPluginArray::isSupportedPropertyName(WebCore::DOMPluginArray *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  unint64_t i;
  WTF *v6;
  char v7;
  WTF::StringImpl *v8;
  char v9;
  unint64_t j;
  WTF *v11;
  char v12;
  WTF::StringImpl *v13;
  char v14;

  if (*((_DWORD *)this + 9))
  {
    for (i = 0; i < *((unsigned int *)this + 9); ++i)
    {
      v6 = *(WTF **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * i) + 32);
      if (v6)
      {
        *(_DWORD *)v6 += 2;
        v7 = WTF::equal(v6, *a2, a3);
        v9 = v7;
        if (*(_DWORD *)v6 == 2)
        {
          WTF::StringImpl::destroy(v6, v8);
          if ((v9 & 1) != 0)
            return 1;
        }
        else
        {
          *(_DWORD *)v6 -= 2;
          if ((v7 & 1) != 0)
            return 1;
        }
      }
      else if ((WTF::equal(0, *a2, a3) & 1) != 0)
      {
        return 1;
      }
    }
  }
  if (*((_DWORD *)this + 13))
  {
    for (j = 0; j < *((unsigned int *)this + 13); ++j)
    {
      v11 = *(WTF **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * j) + 32);
      if (v11)
      {
        *(_DWORD *)v11 += 2;
        v12 = WTF::equal(v11, *a2, a3);
        v14 = v12;
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, v13);
          if ((v14 & 1) != 0)
            return 1;
        }
        else
        {
          *(_DWORD *)v11 -= 2;
          if ((v12 & 1) != 0)
            return 1;
        }
      }
      else if ((WTF::equal(0, *a2, a3) & 1) != 0)
      {
        return 1;
      }
    }
  }
  return 0;
}

unsigned int *WebCore::DOMPluginArray::supportedPropertyNames@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned int *v4;
  unint64_t v5;
  unsigned int *v6;
  unint64_t i;
  unsigned int *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = this[9];
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      this = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(_QWORD *)a2 = this;
      v5 = v4[9];
      if ((_DWORD)v5)
      {
        v6 = this;
        for (i = 0; i < v5; ++i)
        {
          v8 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)v4 + 3) + 8 * i) + 32);
          if (v8)
          {
            *v8 += 2;
            if ((v8[4] & 0x10) == 0)
            {
              WTF::AtomStringImpl::addSlowCase();
              this = v8;
              v8 = v10;
              v10 = 0;
              if (*this == 2)
                this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
              else
                *this -= 2;
            }
            v5 = v4[9];
          }
          *(_QWORD *)&v6[2 * i] = v8;
          *(_DWORD *)(a2 + 12) = i + 1;
        }
      }
    }
  }
  return this;
}

WebCore::PluginData *WebCore::PluginData::PluginData(WebCore::PluginData *this, WebCore::Page *a2)
{
  *(_DWORD *)this = 1;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = a2;
  *((_BYTE *)this + 32) = 0;
  WTF::URL::invalidate((WebCore::PluginData *)((char *)this + 56));
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 176) = 0;
  WebCore::PluginData::initPlugins(this);
  return this;
}

WTF::StringImpl *std::optional<WebCore::PluginInfo>::operator=[abi:sn180100]<WebCore::PluginInfo&,void>(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *result;
  WTF **v10;
  unsigned int v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD **v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  WTF::StringImpl *v37;

  v2 = a2;
  v4 = *(_DWORD **)a2;
  if (!*(_BYTE *)(a1 + 56))
  {
    if (v4)
      *v4 += 2;
    *(_QWORD *)a1 = v4;
    v12 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v12)
      *v12 += 2;
    *(_QWORD *)(a1 + 8) = v12;
    v13 = (_DWORD *)*((_QWORD *)a2 + 2);
    if (v13)
      *v13 += 2;
    *(_QWORD *)(a1 + 16) = v13;
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 24, (uint64_t)a2 + 24);
    *(_WORD *)(a1 + 40) = *((_WORD *)v2 + 20);
    v14 = (_DWORD *)*((_QWORD *)v2 + 6);
    if (v14)
      *v14 += 2;
    *(_QWORD *)(a1 + 48) = v14;
    *(_BYTE *)(a1 + 56) = 1;
    return (WTF::StringImpl *)a1;
  }
  if (v4)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (_DWORD *)*((_QWORD *)v2 + 1);
  if (v6)
    *v6 += 2;
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (_DWORD *)*((_QWORD *)v2 + 2);
  if (v8)
    *v8 += 2;
  result = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  if (v2 == (WTF::StringImpl *)a1)
  {
LABEL_69:
    *(_WORD *)(a1 + 40) = *((_WORD *)v2 + 20);
    v36 = (_DWORD *)*((_QWORD *)v2 + 6);
    if (v36)
      *v36 += 2;
    v37 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v36;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, a2);
      else
        *(_DWORD *)v37 -= 2;
    }
    return (WTF::StringImpl *)a1;
  }
  v10 = (WTF **)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 36);
  a2 = (WTF::StringImpl *)*((unsigned int *)v2 + 9);
  if (v11 <= a2)
  {
    v15 = *(_DWORD *)(a1 + 32);
    if (a2 > v15)
    {
      if (v15)
      {
        if (v11)
          WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)(a1 + 24), 0);
        v16 = *v10;
        if (*v10)
        {
          *(_QWORD *)(a1 + 24) = 0;
          *(_DWORD *)(a1 + 32) = 0;
          WTF::fastFree(v16, a2);
        }
      }
      result = WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)(a1 + 24), *((unsigned int *)v2 + 9));
    }
  }
  else
  {
    result = (WTF::StringImpl *)WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)(a1 + 24), a2);
  }
  v17 = *((_QWORD *)v2 + 3);
  v18 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v18)
  {
    v19 = v17 + 32 * v18;
    v20 = *v10;
    do
    {
      v21 = *(_DWORD **)v17;
      if (*(_QWORD *)v17)
        *v21 += 2;
      v22 = *(WTF::StringImpl **)v20;
      *(_QWORD *)v20 = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = *(_DWORD **)(v17 + 8);
      if (v23)
        *v23 += 2;
      v24 = (WTF::StringImpl *)*((_QWORD *)v20 + 1);
      *((_QWORD *)v20 + 1) = v23;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, a2);
        else
          *(_DWORD *)v24 -= 2;
      }
      result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v20 + 4, (unsigned int *)(v17 + 16));
      v17 += 32;
      v20 = (WTF *)((char *)v20 + 32);
    }
    while (v17 != v19);
    v17 = *((_QWORD *)v2 + 3);
    LODWORD(v18) = *(_DWORD *)(a1 + 36);
  }
  v25 = *((unsigned int *)v2 + 9);
  if ((_DWORD)v18 == (_DWORD)v25)
  {
LABEL_68:
    *(_DWORD *)(a1 + 36) = v18;
    goto LABEL_69;
  }
  v26 = v17 + 32 * v25;
  v27 = (uint64_t)*v10 + 32 * v18;
  v28 = v17 + 32 * v18;
  while (1)
  {
    v29 = *(_DWORD **)v28;
    if (*(_QWORD *)v28)
      *v29 += 2;
    *(_QWORD *)v27 = v29;
    v30 = *(_DWORD **)(v28 + 8);
    if (v30)
      *v30 += 2;
    v31 = *(unsigned int *)(v28 + 28);
    *(_QWORD *)(v27 + 16) = 0;
    *(_QWORD *)(v27 + 24) = 0;
    *(_QWORD *)(v27 + 8) = v30;
    *(_DWORD *)(v27 + 28) = v31;
    if (!(_DWORD)v31)
      goto LABEL_59;
    if (v31 >> 29)
      break;
    result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v31));
    *(_DWORD *)(v27 + 24) = v31;
    *(_QWORD *)(v27 + 16) = result;
    v32 = *(unsigned int *)(v28 + 28);
    if ((_DWORD)v32)
    {
      v33 = *(_DWORD ***)(v28 + 16);
      v34 = 8 * v32;
      do
      {
        v35 = *v33;
        if (*v33)
          *v35 += 2;
        *(_QWORD *)result = v35;
        result = (WTF::StringImpl *)((char *)result + 8);
        ++v33;
        v34 -= 8;
      }
      while (v34);
    }
LABEL_59:
    v27 += 32;
    v28 += 32;
    if (v28 == v26)
    {
      LODWORD(v18) = *((_DWORD *)v2 + 9);
      goto LABEL_68;
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::PluginData::webVisiblePlugins(WebCore::PluginData *this, void *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  void *v7;
  uint64_t result;
  WTF::StringImpl *v9;
  uint64_t v10;
  __int128 v11;
  WTF::StringImpl *v12[2];
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 160);
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  if (v4 && (v5 = *(_QWORD *)(v3 + 296)) != 0)
  {
    v6 = *(WTF::StringImpl **)(v5 + 736);
    if (v6)
      *(_DWORD *)v6 += 2;
    v13 = v6;
    v10 = v5 + 736;
    v11 = *(_OWORD *)(v10 + 24);
    v14 = *(_OWORD *)(v10 + 8);
    v15 = v11;
  }
  else
  {
    v13 = 0;
    WTF::URL::invalidate((WTF::URL *)&v13);
    v6 = v13;
  }
  if (v6)
  {
    if ((WTF::protocolHostAndPortAreEqual() & 1) == 0)
    {
      WTF::URL::operator=((uint64_t)this + 56, (uint64_t *)&v13);
      if (*((_BYTE *)this + 112))
      {
        WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, a2);
        *((_BYTE *)this + 112) = 0;
      }
    }
  }
  if (*((_BYTE *)this + 112)
    || ((*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD, char *))(**(_QWORD **)(*((_QWORD *)this + 1) + 920)
                                                                                       + 24))(v12, *(_QWORD *)(*((_QWORD *)this + 1) + 920), *((_QWORD *)this + 1), (char *)this + 56), std::optional<WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)this + 96, v12), result = WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v7), *((_BYTE *)this + 112)))
  {
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    return (uint64_t)this + 96;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::optional<WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(uint64_t result, _DWORD *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(result + 16))
    return WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(result, a2);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)result = v2;
  LODWORD(v2) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(result + 8) = v2;
  LODWORD(v2) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(result + 12) = v2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

unsigned int *WebCore::PluginData::webVisibleMimeTypes@<X0>(WebCore::PluginData *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = (unsigned int *)WebCore::PluginData::webVisiblePlugins(this, a2);
  v5 = result[3];
  if ((_DWORD)v5)
  {
    v6 = 56 * v5;
    v7 = (uint64_t *)(*(_QWORD *)result + 24);
    do
    {
      result = WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((unsigned int *)a3, v7);
      v7 += 7;
      v6 -= 56;
    }
    while (v6);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  uint64_t v18;
  _DWORD *v19;

  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *a2;
    v6 = result[2];
    v5 = result[3];
    v7 = v5 + v2;
    if (v5 + v2 > v6)
    {
      v8 = v6 + (v6 >> 2);
      v9 = v8 >= 0x10 ? v8 + 1 : 16;
      v10 = v9 <= v7 ? v7 : v9;
      result = (unsigned int *)WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)result, v10);
      v5 = v3[3];
      if (v7 < v5)
      {
LABEL_26:
        __break(0xC471u);
        JUMPOUT(0x1963153D4);
      }
    }
    v11 = *(_QWORD *)v3 + 32 * v5;
    v12 = v4 + 32 * v2;
    do
    {
      v13 = *(_DWORD **)v4;
      if (*(_QWORD *)v4)
        *v13 += 2;
      *(_QWORD *)v11 = v13;
      v14 = *(_DWORD **)(v4 + 8);
      if (v14)
        *v14 += 2;
      v15 = *(unsigned int *)(v4 + 28);
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 8) = v14;
      *(_DWORD *)(v11 + 28) = v15;
      if ((_DWORD)v15)
      {
        if (v15 >> 29)
          goto LABEL_26;
        result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v15));
        *(_DWORD *)(v11 + 24) = v15;
        *(_QWORD *)(v11 + 16) = result;
        v16 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v16)
        {
          v17 = *(_DWORD ***)(v4 + 16);
          v18 = 8 * v16;
          do
          {
            v19 = *v17;
            if (*v17)
              *v19 += 2;
            *(_QWORD *)result = v19;
            result += 2;
            ++v17;
            v18 -= 8;
          }
          while (v18);
        }
      }
      v11 += 32;
      v4 += 32;
    }
    while (v4 != v12);
    v3[3] = v7;
  }
  return result;
}

uint64_t WebCore::PluginData::supportsMimeType(uint64_t a1, const WTF::StringImpl **a2, int a3)
{
  return WebCore::supportsMimeTypeForPlugins(a2, a3, *(const WTF::StringImpl **)(a1 + 16), *(_DWORD *)(a1 + 28));
}

uint64_t WebCore::supportsMimeTypeForPlugins(const WTF::StringImpl **a1, int a2, const WTF::StringImpl *a3, unsigned int a4)
{
  uint64_t result;
  const WTF::StringImpl *v5;
  const WTF::StringImpl *v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;

  if (!a4)
    return 0;
  v5 = a3;
  v8 = (const WTF::StringImpl *)((char *)a3 + 56 * a4);
  while (1)
  {
    v9 = *((unsigned int *)v5 + 9);
    if ((_DWORD)v9)
      break;
LABEL_10:
    result = 0;
    v5 = (const WTF::StringImpl *)((char *)v5 + 56);
    if (v5 == v8)
      return result;
  }
  v10 = (WTF **)*((_QWORD *)v5 + 3);
  v11 = 32 * v9;
  while (!WTF::equal(*v10, *a1, a3) || a2 && !*((_BYTE *)v5 + 40))
  {
    v10 += 4;
    v11 -= 32;
    if (!v11)
      goto LABEL_10;
  }
  return 1;
}

uint64_t WebCore::PluginData::supportsWebVisibleMimeType(WebCore::PluginData *a1, void *a2, int a3)
{
  uint64_t v5;

  v5 = WebCore::PluginData::webVisiblePlugins(a1, a2);
  return WebCore::supportsMimeTypeForPlugins((const WTF::StringImpl **)a2, a3, *(const WTF::StringImpl **)v5, *(_DWORD *)(v5 + 12));
}

uint64_t WebCore::PluginData::supportsWebVisibleMimeTypeForURL(uint64_t a1, const WTF::StringImpl **a2, int a3, uint64_t a4)
{
  _DWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  WTF::StringImpl *v16;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  if ((WTF::protocolHostAndPortAreEqual() & 1) != 0)
    goto LABEL_16;
  v8 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v8 += 2;
  v21 = *(_OWORD *)(a4 + 8);
  v22 = *(_OWORD *)(a4 + 24);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 920)
                                                                         + 24))(&v18, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 920), *(_QWORD *)(a1 + 8), a4);
  v10 = v18;
  v11 = v19;
  v12 = HIDWORD(v19);
  v18 = 0;
  v19 = 0;
  v24 = __PAIR64__(v12, v11);
  v25 = 1;
  v23 = v10;
  v20 = 0;
  v13 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v21;
  LODWORD(v21) = v21 & 0xFFFFFFFE;
  v15 = v22;
  *(_OWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 80) = v15;
  if (*(_BYTE *)(a1 + 112))
  {
    WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 96, &v23);
    if (!v25)
      goto LABEL_12;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    *(_QWORD *)(a1 + 96) = v10;
    *(_DWORD *)(a1 + 104) = v11;
    *(_DWORD *)(a1 + 108) = v12;
    *(_BYTE *)(a1 + 112) = 1;
  }
  WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v9);
LABEL_12:
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v9);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v9);
LABEL_16:
  if (*(_BYTE *)(a1 + 112))
    return WebCore::supportsMimeTypeForPlugins(a2, a3, *(const WTF::StringImpl **)(a1 + 96), *(_DWORD *)(a1 + 108));
  else
    return 0;
}

void WebCore::PluginInfoProvider::~PluginInfoProvider(WebCore::PluginInfoProvider *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = off_1E341E098;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v8 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v10 = *(unsigned int **)(v3 + 8 * i);
        if (v10 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              v14 = i;
              v15 = v3;
              v13 = v8;
              WTF::fastFree((WTF *)v10, a2);
              v8 = v13;
              i = v14;
              v3 = v15;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

_QWORD *WebCore::PluginInfoProvider::clearPagesPluginData(_QWORD *this, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = this;
  v3 = this[3];
  if (!v3)
  {
    v4 = 0;
    v5 = 0;
LABEL_3:
    v6 = v4;
    v4 = v3 + 8 * v5;
    goto LABEL_4;
  }
  v5 = *(unsigned int *)(v3 - 4);
  v4 = v3 + 8 * v5;
  if (!*(_DWORD *)(v3 - 12))
    goto LABEL_3;
  if (!(_DWORD)v5)
  {
    v16 = 0;
    v6 = this[3];
    goto LABEL_49;
  }
  v15 = 8 * v5;
  v6 = this[3];
  while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
  {
    v6 += 8;
    v15 -= 8;
    if (!v15)
    {
      v6 = v4;
      break;
    }
  }
LABEL_4:
  if (!v3)
  {
    v7 = 0;
    goto LABEL_6;
  }
  v16 = *(unsigned int *)(v3 - 4);
LABEL_49:
  v7 = v3 + 8 * v16;
LABEL_6:
  if (v7 != v6)
  {
    while (!*(_QWORD *)(*(_QWORD *)v6 + 8))
    {
      v8 = v6 + 8;
      v6 = v4;
      if (v8 != v4)
      {
        v6 = v8;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 8;
          if (v6 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
      if (v6 == v7)
      {
        v6 = v7;
        break;
      }
    }
  }
  if (v3)
    v9 = v3 + 8 * *(unsigned int *)(v3 - 4);
  else
    v9 = 0;
  while (v6 != v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
    this = *(_QWORD **)(v10 + 224);
    *(_QWORD *)(v10 + 224) = 0;
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        WebCore::PluginData::~PluginData((WebCore::PluginData *)this, a2);
        this = (_QWORD *)WTF::fastFree(v13, v14);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
    v11 = v4;
    if (v6 + 8 != v4)
    {
      v11 = v6 + 8;
      while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
      {
        v11 += 8;
        if (v11 == v4)
        {
          v11 = v4;
          break;
        }
      }
    }
    v6 = v7;
    if (v11 != v7)
    {
      v6 = v11;
      if (!*(_QWORD *)(*(_QWORD *)v11 + 8))
      {
        while (1)
        {
          v12 = v6 + 8;
          v6 = v4;
          if (v12 != v4)
          {
            v6 = v12;
            while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
            {
              v6 += 8;
              if (v6 == v4)
              {
                v6 = v4;
                break;
              }
            }
          }
          if (v6 == v7)
            break;
          if (*(_QWORD *)(*(_QWORD *)v6 + 8))
            goto LABEL_37;
        }
        v6 = v7;
      }
    }
LABEL_37:
    ++*((_DWORD *)v2 + 8);
  }
  return this;
}

WebCore::PluginData *WebCore::PluginInfoProvider::refresh(WebCore::PluginInfoProvider *this, int a2)
{
  WebCore::PluginData *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  WebCore::PluginData *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unint64_t v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::PluginData *v37;
  WebCore::PluginData *v38;
  uint64_t v39;
  WebCore::PluginData *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::PluginData *v49;
  int v50;
  int v51;
  WebCore::PluginData *__src;
  _QWORD *v53;

  result = (WebCore::PluginData *)(*(uint64_t (**)(WebCore::PluginInfoProvider *))(*(_QWORD *)this + 32))(this);
  v6 = *((_QWORD *)this + 3);
  if (!v6)
  {
    v7 = 0;
    v8 = 0;
LABEL_3:
    v9 = v7;
    v7 = v6 + 8 * v8;
    goto LABEL_4;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v7 = v6 + 8 * v8;
  if (!*(_DWORD *)(v6 - 12))
    goto LABEL_3;
  if (!(_DWORD)v8)
  {
    v48 = 0;
    v9 = *((_QWORD *)this + 3);
    goto LABEL_100;
  }
  v47 = 8 * v8;
  v9 = *((_QWORD *)this + 3);
  while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
  {
    v9 += 8;
    v47 -= 8;
    if (!v47)
    {
      v9 = v7;
      break;
    }
  }
LABEL_4:
  if (v6)
  {
    v48 = *(unsigned int *)(v6 - 4);
LABEL_100:
    v10 = v6 + 8 * v48;
    goto LABEL_6;
  }
  v10 = 0;
LABEL_6:
  if (v10 != v9)
  {
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v11 = v9 + 8;
      v9 = v7;
      if (v11 != v7)
      {
        v9 = v11;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  if (v6)
    v12 = v6 + 8 * *(unsigned int *)(v6 - 4);
  else
    v12 = 0;
  if (v9 == v12)
    return result;
  __src = 0;
  v13 = 0;
  v14 = 0;
  do
  {
    v15 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    result = *(WebCore::PluginData **)(v15 + 224);
    *(_QWORD *)(v15 + 224) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        v31 = v13;
        WebCore::PluginData::~PluginData(result, v5);
        result = (WebCore::PluginData *)WTF::fastFree(v32, v33);
        v13 = v31;
        if (!a2)
          goto LABEL_60;
        goto LABEL_23;
      }
      --*(_DWORD *)result;
    }
    if (!a2)
      goto LABEL_60;
LABEL_23:
    v16 = *(_QWORD *)(v15 + 160);
    if (v16)
    {
      while (1)
      {
LABEL_24:
        v17 = (_QWORD *)v16;
        if (!*(_BYTE *)(v16 + 144) && **(_BYTE **)(*(_QWORD *)(v16 + 280) + 56))
        {
          v20 = *(_QWORD *)(v15 + 160);
          if (v20 && *(_BYTE *)(v20 + 144) == 0)
          {
            v22 = v14;
            if (v14 == (_DWORD)v13)
            {
              v50 = v13;
              v51 = a2;
              v23 = ((unint64_t)v13 >> 2) + v13;
              if (v23 >= 0x10)
                v24 = v23 + 1;
              else
                v24 = 16;
              if (v24 <= (unint64_t)v14 + 1)
                v25 = v14 + 1;
              else
                v25 = v24;
              if (v25 >> 29)
              {
                __break(0xC471u);
                return result;
              }
              v49 = (WebCore::PluginData *)WTF::fastMalloc((WTF *)(8 * v25));
              result = (WebCore::PluginData *)memcpy(v49, __src, 8 * v14);
              if (__src)
              {
                v26 = v49;
                if (v49 == __src)
                  v25 = 0;
                else
                  v25 = v25;
                if (v49 == __src)
                  v26 = 0;
                v49 = v26;
                result = (WebCore::PluginData *)WTF::fastFree(__src, v5);
              }
              v27 = (unsigned int *)(v20 + 8);
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 + 1, v27));
              __src = v49;
              *((_QWORD *)v49 + v14) = v20;
              v14 = v50 + 1;
              v13 = v25;
              a2 = v51;
            }
            else
            {
              ++v14;
              v29 = (unsigned int *)(v20 + 8);
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 + 1, v29));
              *((_QWORD *)__src + v22) = v20;
            }
          }
        }
        v16 = v17[11];
        if (!v16)
        {
          v18 = *(_QWORD *)(v17[6] + 8);
          if (!v18)
            goto LABEL_60;
          v16 = v17[9];
          if (!v16)
            break;
        }
      }
      while (1)
      {
        v19 = *(_QWORD *)(v18 + 56);
        if (!v19)
          break;
        v18 = *(_QWORD *)(v19 + 8);
        if (!v18)
          break;
        v16 = *(_QWORD *)(v18 + 72);
        if (v16)
          goto LABEL_24;
      }
    }
LABEL_60:
    v34 = v7;
    if (v9 + 8 != v7)
    {
      v34 = v9 + 8;
      while ((unint64_t)(*(_QWORD *)v34 + 1) <= 1)
      {
        v34 += 8;
        if (v34 == v7)
        {
          v34 = v7;
          break;
        }
      }
    }
    v9 = v10;
    if (v34 != v10)
    {
      v9 = v34;
      if (!*(_QWORD *)(*(_QWORD *)v34 + 8))
      {
        while (1)
        {
          v35 = v9 + 8;
          v9 = v7;
          if (v35 != v7)
          {
            v9 = v35;
            while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
            {
              v9 += 8;
              if (v9 == v7)
              {
                v9 = v7;
                break;
              }
            }
          }
          if (v9 == v10)
            break;
          if (*(_QWORD *)(*(_QWORD *)v9 + 8))
            goto LABEL_76;
        }
        v9 = v10;
      }
    }
LABEL_76:
    ++*((_DWORD *)this + 8);
  }
  while (v9 != v12);
  if (v14)
  {
    v36 = v14;
    v37 = (WebCore::PluginData *)((char *)__src + 8 * v14);
    v38 = __src;
    v39 = 8 * v36;
    v40 = __src;
    do
    {
      v41 = *(_QWORD *)v40;
      v40 = (WebCore::PluginData *)((char *)v40 + 8);
      WebCore::FrameLoader::reload(*(const WTF::URL **)(v41 + 280), 0);
      v39 -= 8;
    }
    while (v39);
    do
    {
      v42 = *(_QWORD *)v38;
      *(_QWORD *)v38 = 0;
      if (v42)
      {
        v43 = (unsigned int *)(v42 + 8);
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          atomic_store(1u, v43);
          v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v46 = off_1E31FE290;
          v46[1] = v43;
          v53 = v46;
          WTF::ensureOnMainThread();
          if (v53)
            (*(void (**)(_QWORD *))(*v53 + 8))(v53);
        }
      }
      v38 = (WebCore::PluginData *)((char *)v38 + 8);
    }
    while (v38 != v37);
  }
  result = __src;
  if (__src)
    return (WebCore::PluginData *)WTF::fastFree(__src, v5);
  return result;
}

uint64_t WebCore::PluginInfoProvider::removePage(WebCore::PluginInfoProvider *this, WebCore::Page *a2)
{
  return WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>((uint64_t)this + 24, a2);
}

_QWORD *WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_0>(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *result = 0;
  result[1] = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
      *((_DWORD *)v6 + 2) = v3;
      *v6 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        v7 = result;
        v8 = 0;
        v9 = 0;
        do
        {
          v10 = *(_QWORD *)a2 + v8;
          v11 = *a3;
          v12 = a3[1];
          v13 = WTF::fastMalloc((WTF *)0x38);
          result = (_QWORD *)WebCore::DOMMimeType::DOMMimeType(v13, v11, v10, v12);
          v7[v9] = result;
          *((_DWORD *)v6 + 3) = v9 + 1;
          v8 += 32;
          ++v9;
        }
        while (v9 < *(unsigned int *)(a2 + 12));
      }
    }
  }
  return result;
}

uint64_t std::sort[abi:sn180100]<WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1>(uint64_t a1, WTF::StringImpl *a2)
{
  unint64_t v2;
  const WTF::StringImpl *v3;

  v2 = 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3);
  if (a2 == (WTF::StringImpl *)a1)
    v3 = 0;
  else
    v3 = (const WTF::StringImpl *)v2;
  return std::__introsort<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *,false>(a1, a2, v3, 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *,false>(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3, char a4)
{
  unint64_t v4;
  unint64_t v5;
  WebCore::DOMMimeType **v6;
  WebCore::DOMMimeType **v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  WebCore::DOMMimeType **v11;
  WebCore::DOMMimeType *v12;
  WebCore::DOMMimeType *v13;
  WebCore::DOMMimeType *v14;
  WebCore::DOMMimeType *v15;
  WebCore::DOMMimeType *v16;
  WebCore::DOMMimeType *v17;
  WTF::StringImpl *v18;
  int *v19;
  int v20;
  const WTF::StringImpl *v21;
  int v22;
  int v23;
  WebCore::DOMMimeType **v24;
  WebCore::DOMMimeType **v25;
  uint64_t v26;
  int v27;
  int *v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned __int16 *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned __int16 *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  WebCore::DOMMimeType **v54;
  uint64_t v55;
  int *v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int *v61;
  int v62;
  int v63;
  int v64;
  WebCore::DOMMimeType **v65;
  WebCore::DOMMimeType *v66;
  WebCore::DOMMimeType *v67;
  WebCore::DOMMimeType *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  int v71;
  int *v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned __int16 *v83;
  unsigned __int16 *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned __int16 *v87;
  unsigned __int8 *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned __int8 *v91;
  unsigned __int16 *v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int *v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unsigned int v110;
  unsigned int v111;
  BOOL v112;
  unsigned __int16 *v113;
  unsigned __int16 *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned __int16 *v117;
  unsigned __int8 *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned __int8 *v121;
  unsigned __int16 *v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  WebCore::DOMMimeType *v127;
  WebCore::DOMMimeType *v128;
  WebCore::DOMMimeType *v129;
  const WTF::StringImpl *v130;
  uint64_t v131;
  int *v132;
  int v133;
  const WTF::StringImpl *v134;
  int v135;
  WebCore::DOMMimeType **v136;
  WebCore::DOMMimeType *v137;
  int *v138;
  int v139;
  const WTF::StringImpl *v140;
  int v141;
  int v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  int *v145;
  int v146;
  const WTF::StringImpl *v147;
  int v148;
  int v149;
  WebCore::DOMMimeType **v150;
  const WTF::StringImpl *v151;
  uint64_t v152;
  int *v153;
  int v154;
  const WTF::StringImpl *v155;
  int v156;
  int v157;
  WebCore::DOMMimeType *v158;
  WebCore::DOMMimeType *v159;
  WebCore::DOMMimeType *v160;
  WebCore::DOMMimeType **v161;
  WebCore::DOMMimeType *v162;
  uint64_t v163;
  int v164;
  int *v165;
  int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  unsigned __int8 *v171;
  unsigned __int8 *v172;
  unsigned int v173;
  unsigned int v174;
  BOOL v175;
  unsigned __int16 *v176;
  unsigned __int16 *v177;
  unsigned int v178;
  unsigned int v179;
  unsigned __int16 *v180;
  unsigned __int8 *v181;
  unsigned int v182;
  unsigned int v183;
  unsigned __int8 *v184;
  unsigned __int16 *v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  int v189;
  int v190;
  int *v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  unsigned __int8 *v202;
  unsigned __int8 *v203;
  unsigned int v204;
  unsigned int v205;
  BOOL v206;
  unsigned __int16 *v207;
  unsigned __int16 *v208;
  unsigned int v209;
  unsigned int v210;
  unsigned __int16 *v211;
  unsigned __int8 *v212;
  unsigned int v213;
  unsigned int v214;
  unsigned __int8 *v215;
  unsigned __int16 *v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  int v220;
  uint64_t *v221;
  WebCore::DOMMimeType *v222;
  WebCore::DOMMimeType *v223;
  WebCore::DOMMimeType *v224;
  int v225;
  WebCore::DOMMimeType *v226;
  WebCore::DOMMimeType *v227;
  WebCore::DOMMimeType *v228;
  WebCore::DOMMimeType **v229;
  BOOL v231;
  WebCore::DOMMimeType **v232;
  WebCore::DOMMimeType **v233;
  WebCore::DOMMimeType *v234;
  int *v235;
  int v236;
  const WTF::StringImpl *v237;
  _BOOL4 v238;
  int v239;
  WebCore::DOMMimeType *v240;
  WebCore::DOMMimeType *v241;
  WebCore::DOMMimeType **i;
  WebCore::DOMMimeType **v243;
  WebCore::DOMMimeType *v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  int *v248;
  int v249;
  unsigned int v250;
  int v251;
  unsigned int v252;
  uint64_t v253;
  unsigned __int8 *v254;
  unsigned __int8 *v255;
  unsigned int v256;
  unsigned int v257;
  BOOL v258;
  WTF *v259;
  void *v260;
  unsigned __int16 *v261;
  unsigned __int16 *v262;
  unsigned int v263;
  unsigned int v264;
  unsigned __int16 *v265;
  unsigned __int8 *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned __int8 *v269;
  unsigned __int16 *v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int64_t v277;
  int64_t v278;
  int64_t v279;
  uint64_t v280;
  WebCore::DOMMimeType **v281;
  uint64_t v282;
  WebCore::DOMMimeType *v283;
  int *v284;
  int v285;
  const WTF::StringImpl *v286;
  int v287;
  WebCore::DOMMimeType **v288;
  WebCore::DOMMimeType *v289;
  int *v290;
  int v291;
  const WTF::StringImpl *v292;
  int v293;
  WebCore::DOMMimeType **v294;
  WebCore::DOMMimeType *v295;
  WebCore::DOMMimeType *v296;
  uint64_t v297;
  WebCore::DOMMimeType *v298;
  int *v299;
  int v300;
  const WTF::StringImpl *v301;
  int v302;
  int v303;
  int *v304;
  int v305;
  const WTF::StringImpl *v306;
  int v307;
  int v308;
  WebCore::DOMMimeType *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  WebCore::DOMMimeType **v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  int *v319;
  int v320;
  unsigned int v321;
  int v322;
  unsigned int v323;
  uint64_t v324;
  unsigned __int8 *v325;
  unsigned __int8 *v326;
  unsigned int v327;
  unsigned int v328;
  BOOL v329;
  unsigned __int16 *v330;
  unsigned __int16 *v331;
  unsigned int v332;
  unsigned int v333;
  unsigned __int16 *v334;
  unsigned __int8 *v335;
  unsigned int v336;
  unsigned int v337;
  unsigned __int8 *v338;
  unsigned __int16 *v339;
  unsigned int v340;
  unsigned int v341;
  int v342;
  int v343;
  int v344;
  WebCore::DOMMimeType *v345;
  WebCore::DOMMimeType *v346;
  WTF *v347;
  void *v348;
  int v349;
  uint64_t *v350;
  uint64_t v351;
  WebCore::DOMMimeType *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t *v355;
  WebCore::DOMMimeType *v356;
  int *v357;
  int v358;
  const WTF::StringImpl *v359;
  _BOOL4 v360;
  uint64_t *v361;
  uint64_t v362;
  WebCore::DOMMimeType *v363;
  int *v364;
  int v365;
  const WTF::StringImpl *v366;
  int v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  WebCore::DOMMimeType *v372;
  int v373;
  _BOOL4 v374;
  int v375;
  WebCore::DOMMimeType *v376;
  WebCore::DOMMimeType **v377;
  WebCore::DOMMimeType *v378;
  WebCore::DOMMimeType *v379;
  int v380;
  int *v381;
  int v382;
  unsigned int v383;
  int v384;
  unsigned int v385;
  uint64_t v386;
  unsigned __int8 *v387;
  unsigned __int8 *v388;
  unsigned int v389;
  unsigned int v390;
  BOOL v391;
  WTF *v392;
  void *v393;
  unsigned __int16 *v394;
  unsigned __int16 *v395;
  unsigned int v396;
  unsigned int v397;
  unsigned __int16 *v398;
  unsigned __int8 *v399;
  unsigned int v400;
  unsigned int v401;
  unsigned __int8 *v402;
  unsigned __int16 *v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  int v407;
  int v408;
  const WTF::StringImpl *v409;
  const WTF::StringImpl *v410;
  unint64_t v411;
  int64_t v413;
  const WTF::StringImpl *v414;
  WebCore::DOMMimeType *v415;
  const WTF::StringImpl **v416;
  WebCore::DOMMimeType *v417;
  WTF::StringImpl *v418;
  uint64_t *v419;
  WebCore::DOMMimeType *v420;

  v5 = (unint64_t)a3;
  v6 = (WebCore::DOMMimeType **)result;
LABEL_2:
  v414 = (WTF::StringImpl *)((char *)a2 - 8);
  v418 = a2;
  v409 = (WTF::StringImpl *)((char *)a2 - 24);
  v410 = (WTF::StringImpl *)((char *)a2 - 16);
  v7 = v6;
  while (2)
  {
    v6 = v7;
    v8 = (uint64_t *)v418;
    v9 = v418 - (WTF::StringImpl *)v7;
    v10 = (v418 - (WTF::StringImpl *)v7) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v224 = *v7;
        v17 = *(WebCore::DOMMimeType **)(*((_QWORD *)v418 - 1) + 16);
        if (v17)
        {
          v225 = *(_DWORD *)v17;
          *(_DWORD *)v17 += 2;
          v4 = *((_QWORD *)v224 + 2);
          if (!v4)
          {
            LODWORD(v16) = *((_DWORD *)v17 + 1) != 0;
            if (v225)
              goto LABEL_441;
            goto LABEL_811;
          }
        }
        else
        {
          v4 = *((_QWORD *)v224 + 2);
          if (!v4)
            return result;
        }
        *(_DWORD *)v4 += 2;
        result = WTF::codePointCompare(v17, (const WTF::StringImpl *)v4, a3);
        LODWORD(v16) = result;
        if (*(_DWORD *)v4 == 2)
          goto LABEL_807;
        *(_DWORD *)v4 -= 2;
        goto LABEL_439;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>((WebCore::DOMMimeType *)v7, (WTF::StringImpl *)(v7 + 1), v414);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>((WebCore::DOMMimeType *)v7, (WTF::StringImpl *)(v7 + 1), (const WTF::StringImpl *)(v7 + 2), (WebCore::DOMMimeType **)v414);
      case 5uLL:
        return (uint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *,0>((WebCore::DOMMimeType *)v7, (WTF::StringImpl *)(v7 + 1), (const WTF::StringImpl *)(v7 + 2), v7 + 3, (WebCore::DOMMimeType **)v414);
      default:
        if (v9 <= 191)
        {
          v229 = v7 + 1;
          v231 = v7 == (WebCore::DOMMimeType **)v418 || v229 == (WebCore::DOMMimeType **)v418;
          if ((a4 & 1) != 0)
          {
            if (v231)
              return result;
            v232 = v7;
            while (1)
            {
              v233 = v232;
              v232 = v229;
              v234 = *v233;
              v235 = (int *)*((_QWORD *)v233[1] + 2);
              if (v235)
              {
                v236 = *v235 + 2;
                *v235 = v236;
                v237 = (const WTF::StringImpl *)*((_QWORD *)v234 + 2);
                if (!v237)
                {
                  v238 = v235[1] != 0;
                  goto LABEL_465;
                }
              }
              else
              {
                v237 = (const WTF::StringImpl *)*((_QWORD *)v234 + 2);
                if (!v237)
                  goto LABEL_531;
              }
              *(_DWORD *)v237 += 2;
              result = WTF::codePointCompare((WTF *)v235, v237, a3);
              v238 = result;
              if (*(_DWORD *)v237 == 2)
                result = WTF::StringImpl::destroy(v237, a2);
              else
                *(_DWORD *)v237 -= 2;
              v8 = (uint64_t *)v418;
              if (!v235)
                goto LABEL_467;
              v236 = *v235;
LABEL_465:
              v239 = v236 - 2;
              if (v239)
              {
                *v235 = v239;
LABEL_467:
                if ((v238 & 0x80000000) == 0)
                  goto LABEL_531;
                goto LABEL_468;
              }
              result = WTF::StringImpl::destroy((WTF::StringImpl *)v235, a2);
              v8 = (uint64_t *)v418;
              if ((v238 & 0x80000000) == 0)
                goto LABEL_531;
LABEL_468:
              v240 = 0;
              v241 = *v229;
              *v232 = 0;
              for (i = v232; ; v240 = *i)
              {
                v243 = i;
                i = v233;
                v244 = *v233;
                *v233 = 0;
                *v243 = v244;
                if (v240)
                {
                  if (*(_DWORD *)v240 == 1)
                  {
                    WebCore::DOMMimeType::~DOMMimeType(v240, a2);
                    WTF::fastFree(v259, v260);
                    v8 = (uint64_t *)v418;
                  }
                  else
                  {
                    --*(_DWORD *)v240;
                  }
                }
                if (v233 == v7)
                  break;
                --v233;
                v245 = (uint64_t)*(i - 1);
                v246 = *((_QWORD *)v241 + 2);
                if (!v246)
                {
                  v248 = *(int **)(v245 + 16);
                  if (!v248)
                    goto LABEL_529;
                  v249 = *v248;
                  v276 = v248[1];
                  *v248 += 2;
                  if (v276)
                    v274 = -1;
                  else
                    v274 = 0;
                  goto LABEL_510;
                }
                v247 = *(_DWORD *)v246 + 2;
                *(_DWORD *)v246 = v247;
                v248 = *(int **)(v245 + 16);
                if (!v248)
                {
                  v274 = *(_DWORD *)(v246 + 4) != 0;
                  goto LABEL_513;
                }
                v249 = *v248;
                v250 = v248[1];
                *v248 += 2;
                v251 = v248[4];
                v252 = *(_DWORD *)(v246 + 4);
                if (v250 >= v252)
                  v253 = v252;
                else
                  v253 = v250;
                if ((*(_BYTE *)(v246 + 16) & 4) != 0)
                {
                  if ((v251 & 4) == 0)
                  {
                    if ((_DWORD)v253)
                    {
                      v265 = (unsigned __int16 *)*((_QWORD *)v248 + 1);
                      v266 = *(unsigned __int8 **)(v246 + 8);
                      while (1)
                      {
                        v267 = *v266;
                        v268 = *v265;
                        if (v268 != v267)
                          break;
                        ++v266;
                        ++v265;
                        if (!--v253)
                          goto LABEL_501;
                      }
                      if (v268 < v267)
                        v274 = 1;
                      else
                        v274 = -1;
                      goto LABEL_510;
                    }
LABEL_501:
                    if (v250 < v252)
                      v273 = 1;
                    else
                      v273 = -1;
                    if (v252 == v250)
                      v274 = 0;
                    else
                      v274 = v273;
                    goto LABEL_510;
                  }
                  if (!(_DWORD)v253)
                    goto LABEL_501;
                  v254 = (unsigned __int8 *)*((_QWORD *)v248 + 1);
                  v255 = *(unsigned __int8 **)(v246 + 8);
                  while (1)
                  {
                    v256 = *v255;
                    v257 = *v254;
                    v258 = v256 > v257;
                    if (v256 != v257)
                      break;
                    ++v255;
                    ++v254;
                    if (!--v253)
                      goto LABEL_501;
                  }
                }
                else if ((v251 & 4) != 0)
                {
                  if (!(_DWORD)v253)
                    goto LABEL_501;
                  v269 = (unsigned __int8 *)*((_QWORD *)v248 + 1);
                  v270 = *(unsigned __int16 **)(v246 + 8);
                  while (1)
                  {
                    v271 = *v270;
                    v272 = *v269;
                    v258 = v271 > v272;
                    if (v271 != v272)
                      break;
                    ++v270;
                    ++v269;
                    if (!--v253)
                      goto LABEL_501;
                  }
                }
                else
                {
                  if (!(_DWORD)v253)
                    goto LABEL_501;
                  v261 = (unsigned __int16 *)*((_QWORD *)v248 + 1);
                  v262 = *(unsigned __int16 **)(v246 + 8);
                  while (1)
                  {
                    v263 = *v262;
                    v264 = *v261;
                    v258 = v263 > v264;
                    if (v263 != v264)
                      break;
                    ++v262;
                    ++v261;
                    if (!--v253)
                      goto LABEL_501;
                  }
                }
                if (v258)
                  v274 = 1;
                else
                  v274 = -1;
LABEL_510:
                if (v249)
                {
                  *v248 = v249;
                  if (!v246)
                    goto LABEL_515;
                }
                else
                {
                  WTF::StringImpl::destroy((WTF::StringImpl *)v248, a2);
                  v8 = (uint64_t *)v418;
                  if (!v246)
                    goto LABEL_515;
                }
                v247 = *(_DWORD *)v246;
LABEL_513:
                v275 = v247 - 2;
                if (v275)
                {
                  *(_DWORD *)v246 = v275;
                }
                else
                {
                  WTF::StringImpl::destroy((WTF::StringImpl *)v246, a2);
                  v8 = (uint64_t *)v418;
                }
LABEL_515:
                if ((v274 & 0x80000000) == 0)
                  goto LABEL_529;
              }
              i = v7;
LABEL_529:
              result = (uint64_t)*i;
              *i = v241;
              if (result)
              {
                result = (uint64_t)WTF::RefCounted<WebCore::DOMMimeType>::deref((WebCore::DOMMimeType *)result);
                v8 = (uint64_t *)v418;
              }
LABEL_531:
              v229 = v232 + 1;
              if (v232 + 1 == (WebCore::DOMMimeType **)v8)
                return result;
            }
          }
          if (v231)
            return result;
          v369 = 0;
          v370 = 1;
          while (1)
          {
            v371 = v369;
            v369 = v370;
            v372 = v7[v371];
            v17 = (WebCore::DOMMimeType *)*((_QWORD *)*v229 + 2);
            if (v17)
            {
              v373 = *(_DWORD *)v17 + 2;
              *(_DWORD *)v17 = v373;
              v4 = *((_QWORD *)v372 + 2);
              if (!v4)
              {
                v374 = *((_DWORD *)v17 + 1) != 0;
                goto LABEL_733;
              }
            }
            else
            {
              v4 = *((_QWORD *)v372 + 2);
              if (!v4)
                goto LABEL_798;
            }
            *(_DWORD *)v4 += 2;
            result = WTF::codePointCompare(v17, (const WTF::StringImpl *)v4, a3);
            v374 = result;
            if (*(_DWORD *)v4 == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
            else
              *(_DWORD *)v4 -= 2;
            v8 = (uint64_t *)v418;
            if (!v17)
              goto LABEL_735;
            v373 = *(_DWORD *)v17;
LABEL_733:
            v375 = v373 - 2;
            if (!v375)
            {
              result = WTF::StringImpl::destroy(v17, a2);
              v8 = (uint64_t *)v418;
              if ((v374 & 0x80000000) == 0)
                goto LABEL_798;
LABEL_736:
              v376 = 0;
              v16 = *v229;
              *v229 = 0;
              while (2)
              {
                v377 = v229;
                v229 = &v7[v371];
                v378 = *v229;
                *v229 = 0;
                *v377 = v378;
                if (v376)
                {
                  if (*(_DWORD *)v376 == 1)
                  {
                    WebCore::DOMMimeType::~DOMMimeType(v376, a2);
                    WTF::fastFree(v392, v393);
                    v8 = (uint64_t *)v418;
                  }
                  else
                  {
                    --*(_DWORD *)v376;
                  }
                }
                if (v371 == -1)
                  goto LABEL_806;
                v379 = v7[--v371];
                v17 = (WebCore::DOMMimeType *)*((_QWORD *)v16 + 2);
                if (!v17)
                {
                  v381 = (int *)*((_QWORD *)v379 + 2);
                  if (!v381)
                  {
LABEL_796:
                    result = (uint64_t)*v229;
                    *v229 = v16;
                    if (result)
                    {
                      result = (uint64_t)WTF::RefCounted<WebCore::DOMMimeType>::deref((WebCore::DOMMimeType *)result);
                      v8 = (uint64_t *)v418;
                    }
                    goto LABEL_798;
                  }
                  v382 = *v381;
                  v408 = v381[1];
                  *v381 += 2;
                  if (v408)
                    v4 = 0xFFFFFFFFLL;
                  else
                    v4 = 0;
                  goto LABEL_778;
                }
                v380 = *(_DWORD *)v17 + 2;
                *(_DWORD *)v17 = v380;
                v381 = (int *)*((_QWORD *)v379 + 2);
                if (v381)
                {
                  v382 = *v381;
                  v383 = v381[1];
                  *v381 += 2;
                  v384 = v381[4];
                  v385 = *((_DWORD *)v17 + 1);
                  if (v383 >= v385)
                    v386 = v385;
                  else
                    v386 = v383;
                  if ((*((_BYTE *)v17 + 16) & 4) != 0)
                  {
                    if ((v384 & 4) != 0)
                    {
                      if ((_DWORD)v386)
                      {
                        v387 = (unsigned __int8 *)*((_QWORD *)v381 + 1);
                        v388 = (unsigned __int8 *)*((_QWORD *)v17 + 1);
                        do
                        {
                          v389 = *v388;
                          v390 = *v387;
                          v391 = v389 > v390;
                          if (v389 != v390)
                            goto LABEL_775;
                          ++v388;
                          ++v387;
                        }
                        while (--v386);
                      }
LABEL_769:
                      if (v383 < v385)
                        v406 = 1;
                      else
                        v406 = -1;
                      if (v385 == v383)
                        v4 = 0;
                      else
                        v4 = v406;
                    }
                    else
                    {
                      if (!(_DWORD)v386)
                        goto LABEL_769;
                      v398 = (unsigned __int16 *)*((_QWORD *)v381 + 1);
                      v399 = (unsigned __int8 *)*((_QWORD *)v17 + 1);
                      while (1)
                      {
                        v400 = *v399;
                        v401 = *v398;
                        if (v401 != v400)
                          break;
                        ++v399;
                        ++v398;
                        if (!--v386)
                          goto LABEL_769;
                      }
                      if (v401 < v400)
                        v4 = 1;
                      else
                        v4 = 0xFFFFFFFFLL;
                    }
                  }
                  else
                  {
                    if ((v384 & 4) != 0)
                    {
                      if (!(_DWORD)v386)
                        goto LABEL_769;
                      v402 = (unsigned __int8 *)*((_QWORD *)v381 + 1);
                      v403 = (unsigned __int16 *)*((_QWORD *)v17 + 1);
                      while (1)
                      {
                        v404 = *v403;
                        v405 = *v402;
                        v391 = v404 > v405;
                        if (v404 != v405)
                          break;
                        ++v403;
                        ++v402;
                        if (!--v386)
                          goto LABEL_769;
                      }
                    }
                    else
                    {
                      if (!(_DWORD)v386)
                        goto LABEL_769;
                      v394 = (unsigned __int16 *)*((_QWORD *)v381 + 1);
                      v395 = (unsigned __int16 *)*((_QWORD *)v17 + 1);
                      while (1)
                      {
                        v396 = *v395;
                        v397 = *v394;
                        v391 = v396 > v397;
                        if (v396 != v397)
                          break;
                        ++v395;
                        ++v394;
                        if (!--v386)
                          goto LABEL_769;
                      }
                    }
LABEL_775:
                    if (v391)
                      v4 = 1;
                    else
                      v4 = 0xFFFFFFFFLL;
                  }
LABEL_778:
                  if (v382)
                  {
                    *v381 = v382;
                    if (v17)
                      goto LABEL_780;
LABEL_783:
                    if ((v4 & 0x80000000) == 0)
                      goto LABEL_796;
                    v376 = *v229;
                    continue;
                  }
                  WTF::StringImpl::destroy((WTF::StringImpl *)v381, a2);
                  v8 = (uint64_t *)v418;
                  if (!v17)
                    goto LABEL_783;
LABEL_780:
                  v380 = *(_DWORD *)v17;
                }
                else
                {
                  v4 = *((_DWORD *)v17 + 1) != 0;
                }
                break;
              }
              v407 = v380 - 2;
              if (v407)
              {
                *(_DWORD *)v17 = v407;
              }
              else
              {
                WTF::StringImpl::destroy(v17, a2);
                v8 = (uint64_t *)v418;
              }
              goto LABEL_783;
            }
            *(_DWORD *)v17 = v375;
LABEL_735:
            if (v374 < 0)
              goto LABEL_736;
LABEL_798:
            v370 = v369 + 1;
            v229 = &v7[v369 + 1];
            if (v229 == (WebCore::DOMMimeType **)v8)
              return result;
          }
        }
        if (!v5)
        {
          if (v7 == (WebCore::DOMMimeType **)v418)
            return result;
          v411 = v418 - (WTF::StringImpl *)v7;
          v277 = (v10 - 2) >> 1;
          v278 = v277;
          while (1)
          {
            v279 = v278;
            if (v277 < v278)
              goto LABEL_602;
            v413 = v278;
            v280 = (2 * v278) | 1;
            v281 = &v6[v280];
            v282 = 2 * v278 + 2;
            if (v282 < (uint64_t)v10)
              break;
LABEL_553:
            v279 = v413;
            v288 = &v6[v413];
            v289 = *v288;
            v290 = (int *)*((_QWORD *)*v281 + 2);
            if (v290)
            {
              v291 = *v290;
              *v290 += 2;
              v292 = (const WTF::StringImpl *)*((_QWORD *)v289 + 2);
              if (v292)
              {
LABEL_555:
                *(_DWORD *)v292 += 2;
                v293 = WTF::codePointCompare((WTF *)v290, v292, a3);
                if (*(_DWORD *)v292 == 2)
                  WTF::StringImpl::destroy(v292, a2);
                else
                  *(_DWORD *)v292 -= 2;
                v8 = (uint64_t *)v418;
                if (v290)
                {
                  v291 = *v290 - 2;
                  if (*v290 != 2)
                    goto LABEL_559;
LABEL_609:
                  WTF::StringImpl::destroy((WTF::StringImpl *)v290, a2);
                  v8 = (uint64_t *)v418;
                  if (v293 < 0)
                    goto LABEL_602;
LABEL_561:
                  v289 = *v288;
                  goto LABEL_562;
                }
              }
              else
              {
                v293 = v290[1] != 0;
                if (!v291)
                  goto LABEL_609;
LABEL_559:
                *v290 = v291;
              }
              if (v293 < 0)
                goto LABEL_602;
              goto LABEL_561;
            }
            v292 = (const WTF::StringImpl *)*((_QWORD *)v289 + 2);
            if (v292)
              goto LABEL_555;
LABEL_562:
            v416 = (const WTF::StringImpl **)v289;
            *v288 = 0;
            do
            {
              v294 = v281;
              v295 = *v281;
              *v281 = 0;
              v296 = *v288;
              *v288 = v295;
              if (v296)
              {
                WTF::RefCounted<WebCore::DOMMimeType>::deref(v296);
                v8 = (uint64_t *)v418;
              }
              if (v277 < v280)
                break;
              v297 = (2 * v280) | 1;
              v281 = &v6[v297];
              v280 = 2 * v280 + 2;
              if (v280 >= (uint64_t)v10)
              {
                v280 = v297;
                goto LABEL_580;
              }
              v298 = v281[1];
              v299 = (int *)*((_QWORD *)*v281 + 2);
              if (!v299)
              {
                v301 = (const WTF::StringImpl *)*((_QWORD *)v298 + 2);
                if (!v301)
                {
                  v302 = 0;
                  goto LABEL_575;
                }
LABEL_569:
                *(_DWORD *)v301 += 2;
                v302 = WTF::codePointCompare((WTF *)v299, v301, a3);
                if (*(_DWORD *)v301 == 2)
                  WTF::StringImpl::destroy(v301, a2);
                else
                  *(_DWORD *)v301 -= 2;
                v8 = (uint64_t *)v418;
                if (!v299)
                  goto LABEL_575;
                v300 = *v299;
                goto LABEL_573;
              }
              v300 = *v299 + 2;
              *v299 = v300;
              v301 = (const WTF::StringImpl *)*((_QWORD *)v298 + 2);
              if (v301)
                goto LABEL_569;
              v302 = v299[1] != 0;
LABEL_573:
              v303 = v300 - 2;
              if (v303)
              {
                *v299 = v303;
              }
              else
              {
                WTF::StringImpl::destroy((WTF::StringImpl *)v299, a2);
                v8 = (uint64_t *)v418;
              }
LABEL_575:
              if (v302 >= 0)
                v280 = v297;
              else
                ++v281;
              v277 = (v10 - 2) >> 1;
LABEL_580:
              v304 = (int *)*((_QWORD *)*v281 + 2);
              if (v304)
              {
                v305 = *v304 + 2;
                *v304 = v305;
                v306 = v416[2];
                if (v306)
                {
LABEL_582:
                  *(_DWORD *)v306 += 2;
                  v307 = WTF::codePointCompare((WTF *)v304, v306, a3);
                  if (*(_DWORD *)v306 == 2)
                    WTF::StringImpl::destroy(v306, a2);
                  else
                    *(_DWORD *)v306 -= 2;
                  v8 = (uint64_t *)v418;
                  if (!v304)
                    goto LABEL_588;
                  v305 = *v304;
                }
                else
                {
                  v307 = v304[1] != 0;
                }
                v308 = v305 - 2;
                if (v308)
                {
                  *v304 = v308;
                }
                else
                {
                  WTF::StringImpl::destroy((WTF::StringImpl *)v304, a2);
                  v8 = (uint64_t *)v418;
                }
                goto LABEL_588;
              }
              v306 = v416[2];
              if (v306)
                goto LABEL_582;
              v307 = 0;
LABEL_588:
              v288 = v294;
            }
            while ((v307 & 0x80000000) == 0);
            v309 = *v294;
            *v294 = (WebCore::DOMMimeType *)v416;
            v279 = v413;
            if (v309)
            {
              WTF::RefCounted<WebCore::DOMMimeType>::deref(v309);
              v8 = (uint64_t *)v418;
            }
LABEL_602:
            v278 = v279 - 1;
            if (!v279)
            {
              v310 = v411 >> 3;
              while (1)
              {
                v311 = 0;
                v417 = *v6;
                v419 = v8;
                *v6 = 0;
                v312 = (uint64_t *)v6;
                do
                {
                  v313 = (WebCore::DOMMimeType **)v312;
                  v312 += v311 + 1;
                  v314 = 2 * v311;
                  v311 = (2 * v311) | 1;
                  v315 = v314 + 2;
                  if (v314 + 2 >= v310)
                    goto LABEL_660;
                  v316 = v312[1];
                  v317 = *(_QWORD *)(*v312 + 16);
                  if (!v317)
                  {
                    v319 = *(int **)(v316 + 16);
                    if (!v319)
                    {
                      v343 = 0;
                      goto LABEL_658;
                    }
                    v320 = *v319;
                    v349 = v319[1];
                    *v319 += 2;
                    if (v349)
                      v343 = -1;
                    else
                      v343 = 0;
                    goto LABEL_653;
                  }
                  v318 = *(_DWORD *)v317 + 2;
                  *(_DWORD *)v317 = v318;
                  v319 = *(int **)(v316 + 16);
                  if (!v319)
                  {
                    v343 = *(_DWORD *)(v317 + 4) != 0;
                    goto LABEL_656;
                  }
                  v320 = *v319;
                  v321 = v319[1];
                  *v319 += 2;
                  v322 = v319[4];
                  v323 = *(_DWORD *)(v317 + 4);
                  if (v321 >= v323)
                    v324 = v323;
                  else
                    v324 = v321;
                  if ((*(_BYTE *)(v317 + 16) & 4) != 0)
                  {
                    if ((v322 & 4) == 0)
                    {
                      if ((_DWORD)v324)
                      {
                        v334 = (unsigned __int16 *)*((_QWORD *)v319 + 1);
                        v335 = *(unsigned __int8 **)(v317 + 8);
                        while (1)
                        {
                          v336 = *v335;
                          v337 = *v334;
                          if (v337 != v336)
                            break;
                          ++v335;
                          ++v334;
                          if (!--v324)
                            goto LABEL_644;
                        }
                        if (v337 < v336)
                          v343 = 1;
                        else
                          v343 = -1;
                        goto LABEL_653;
                      }
LABEL_644:
                      if (v321 < v323)
                        v342 = 1;
                      else
                        v342 = -1;
                      if (v323 == v321)
                        v343 = 0;
                      else
                        v343 = v342;
                      goto LABEL_653;
                    }
                    if (!(_DWORD)v324)
                      goto LABEL_644;
                    v325 = (unsigned __int8 *)*((_QWORD *)v319 + 1);
                    v326 = *(unsigned __int8 **)(v317 + 8);
                    while (1)
                    {
                      v327 = *v326;
                      v328 = *v325;
                      v329 = v327 > v328;
                      if (v327 != v328)
                        break;
                      ++v326;
                      ++v325;
                      if (!--v324)
                        goto LABEL_644;
                    }
                  }
                  else if ((v322 & 4) != 0)
                  {
                    if (!(_DWORD)v324)
                      goto LABEL_644;
                    v338 = (unsigned __int8 *)*((_QWORD *)v319 + 1);
                    v339 = *(unsigned __int16 **)(v317 + 8);
                    while (1)
                    {
                      v340 = *v339;
                      v341 = *v338;
                      v329 = v340 > v341;
                      if (v340 != v341)
                        break;
                      ++v339;
                      ++v338;
                      if (!--v324)
                        goto LABEL_644;
                    }
                  }
                  else
                  {
                    if (!(_DWORD)v324)
                      goto LABEL_644;
                    v330 = (unsigned __int16 *)*((_QWORD *)v319 + 1);
                    v331 = *(unsigned __int16 **)(v317 + 8);
                    while (1)
                    {
                      v332 = *v331;
                      v333 = *v330;
                      v329 = v332 > v333;
                      if (v332 != v333)
                        break;
                      ++v331;
                      ++v330;
                      if (!--v324)
                        goto LABEL_644;
                    }
                  }
                  if (v329)
                    v343 = 1;
                  else
                    v343 = -1;
LABEL_653:
                  if (v320)
                  {
                    *v319 = v320;
                    if (!v317)
                      goto LABEL_658;
                  }
                  else
                  {
                    WTF::StringImpl::destroy((WTF::StringImpl *)v319, a2);
                    v8 = v419;
                    if (!v317)
                      goto LABEL_658;
                  }
                  v318 = *(_DWORD *)v317;
LABEL_656:
                  v344 = v318 - 2;
                  if (v344)
                  {
                    *(_DWORD *)v317 = v344;
                  }
                  else
                  {
                    WTF::StringImpl::destroy((WTF::StringImpl *)v317, a2);
                    v8 = v419;
                  }
LABEL_658:
                  if (v343 < 0)
                  {
                    ++v312;
                    v311 = v315;
                  }
LABEL_660:
                  v345 = (WebCore::DOMMimeType *)*v312;
                  *v312 = 0;
                  v346 = *v313;
                  *v313 = v345;
                  if (v346)
                  {
                    if (*(_DWORD *)v346 == 1)
                    {
                      WebCore::DOMMimeType::~DOMMimeType(v346, a2);
                      WTF::fastFree(v347, v348);
                      v8 = v419;
                    }
                    else
                    {
                      --*(_DWORD *)v346;
                    }
                  }
                }
                while (v311 <= (uint64_t)((unint64_t)(v310 - 2) >> 1));
                v350 = --v8;
                if (v312 == v8)
                {
                  result = *v312;
                  *v312 = (uint64_t)v417;
                  if (result)
                    goto LABEL_714;
                  goto LABEL_715;
                }
                v351 = *v8;
                *v8 = 0;
                v352 = (WebCore::DOMMimeType *)*v312;
                *v312 = v351;
                if (v352)
                {
                  WTF::RefCounted<WebCore::DOMMimeType>::deref(v352);
                  v8 = v350;
                }
                result = *v8;
                *v8 = (uint64_t)v417;
                if (result)
                {
                  result = (uint64_t)WTF::RefCounted<WebCore::DOMMimeType>::deref((WebCore::DOMMimeType *)result);
                  v8 = v350;
                }
                v353 = (char *)(v312 + 1) - (char *)v6;
                if (v353 < 9)
                  goto LABEL_715;
                v354 = (((unint64_t)v353 >> 3) - 2) >> 1;
                v355 = (uint64_t *)&v6[v354];
                v356 = (WebCore::DOMMimeType *)*v312;
                v357 = *(int **)(*v355 + 16);
                if (v357)
                {
                  v358 = *v357;
                  *v357 += 2;
                  v359 = (const WTF::StringImpl *)*((_QWORD *)v356 + 2);
                  if (v359)
                    goto LABEL_686;
                  v360 = v357[1] != 0;
                  if (!v358)
                  {
LABEL_722:
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)v357, a2);
                    v8 = v350;
                    if ((v360 & 0x80000000) == 0)
                      goto LABEL_715;
                    goto LABEL_692;
                  }
LABEL_690:
                  *v357 = v358;
                }
                else
                {
                  v359 = (const WTF::StringImpl *)*((_QWORD *)v356 + 2);
                  if (!v359)
                    goto LABEL_715;
LABEL_686:
                  *(_DWORD *)v359 += 2;
                  result = WTF::codePointCompare((WTF *)v357, v359, a3);
                  v360 = result;
                  if (*(_DWORD *)v359 == 2)
                    result = WTF::StringImpl::destroy(v359, a2);
                  else
                    *(_DWORD *)v359 -= 2;
                  v8 = v350;
                  if (v357)
                  {
                    v358 = *v357 - 2;
                    if (*v357 == 2)
                      goto LABEL_722;
                    goto LABEL_690;
                  }
                }
                if ((v360 & 0x80000000) == 0)
                  goto LABEL_715;
LABEL_692:
                v420 = (WebCore::DOMMimeType *)*v312;
                *v312 = 0;
                while (2)
                {
                  v361 = v355;
                  v362 = *v355;
                  *v355 = 0;
                  v363 = (WebCore::DOMMimeType *)*v312;
                  *v312 = v362;
                  if (v363)
                  {
                    WTF::RefCounted<WebCore::DOMMimeType>::deref(v363);
                    v8 = v350;
                  }
                  if (v354)
                  {
                    v354 = (v354 - 1) >> 1;
                    v355 = (uint64_t *)&v6[v354];
                    v364 = *(int **)(*v355 + 16);
                    if (v364)
                    {
                      v365 = *v364 + 2;
                      *v364 = v365;
                      v366 = (const WTF::StringImpl *)*((_QWORD *)v420 + 2);
                      if (v366)
                        goto LABEL_698;
                      v367 = v364[1] != 0;
LABEL_702:
                      v368 = v365 - 2;
                      if (v368)
                      {
                        *v364 = v368;
                      }
                      else
                      {
                        WTF::StringImpl::destroy((WTF::StringImpl *)v364, a2);
                        v8 = v350;
                      }
                    }
                    else
                    {
                      v366 = (const WTF::StringImpl *)*((_QWORD *)v420 + 2);
                      if (!v366)
                        break;
LABEL_698:
                      *(_DWORD *)v366 += 2;
                      v367 = WTF::codePointCompare((WTF *)v364, v366, a3);
                      if (*(_DWORD *)v366 == 2)
                        WTF::StringImpl::destroy(v366, a2);
                      else
                        *(_DWORD *)v366 -= 2;
                      v8 = v350;
                      if (v364)
                      {
                        v365 = *v364;
                        goto LABEL_702;
                      }
                    }
                    v312 = v361;
                    if ((v367 & 0x80000000) == 0)
                      break;
                    continue;
                  }
                  break;
                }
                result = *v361;
                *v361 = (uint64_t)v420;
                if (result)
                {
LABEL_714:
                  result = (uint64_t)WTF::RefCounted<WebCore::DOMMimeType>::deref((WebCore::DOMMimeType *)result);
                  v8 = v350;
                }
LABEL_715:
                v38 = v310-- <= 2;
                if (v38)
                  return result;
              }
            }
          }
          v283 = v281[1];
          v284 = (int *)*((_QWORD *)*v281 + 2);
          if (v284)
          {
            v285 = *v284;
            *v284 += 2;
            v286 = (const WTF::StringImpl *)*((_QWORD *)v283 + 2);
            if (!v286)
            {
              v287 = v284[1] != 0;
              if (v285)
              {
LABEL_549:
                *v284 = v285;
LABEL_550:
                if (v287 < 0)
                {
                  ++v281;
                  v280 = v282;
                }
                v277 = (v10 - 2) >> 1;
                goto LABEL_553;
              }
LABEL_614:
              WTF::StringImpl::destroy((WTF::StringImpl *)v284, a2);
              v8 = (uint64_t *)v418;
              goto LABEL_550;
            }
          }
          else
          {
            v286 = (const WTF::StringImpl *)*((_QWORD *)v283 + 2);
            if (!v286)
            {
              v287 = 0;
              goto LABEL_550;
            }
          }
          *(_DWORD *)v286 += 2;
          v287 = WTF::codePointCompare((WTF *)v284, v286, a3);
          if (*(_DWORD *)v286 == 2)
            WTF::StringImpl::destroy(v286, a2);
          else
            *(_DWORD *)v286 -= 2;
          v8 = (uint64_t *)v418;
          if (!v284)
            goto LABEL_550;
          v285 = *v284 - 2;
          if (*v284 != 2)
            goto LABEL_549;
          goto LABEL_614;
        }
        v11 = &v7[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>((WebCore::DOMMimeType *)&v7[v10 >> 1], (WTF::StringImpl *)v7, v414);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>((WebCore::DOMMimeType *)v7, (WTF::StringImpl *)&v7[v10 >> 1], v414);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>((WebCore::DOMMimeType *)(v7 + 1), (WTF::StringImpl *)(v11 - 1), v410);
          v4 = (unint64_t)&v7[(v10 >> 1) + 1];
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>((WebCore::DOMMimeType *)(v7 + 2), (WTF::StringImpl *)v4, v409);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>((WebCore::DOMMimeType *)(v11 - 1), (WTF::StringImpl *)&v7[v10 >> 1], (const WTF::StringImpl *)v4);
          v12 = *v7;
          *v7 = 0;
          v13 = *v11;
          *v11 = 0;
          v14 = *v7;
          *v7 = v13;
          if (v14)
            WTF::RefCounted<WebCore::DOMMimeType>::deref(v14);
          v15 = *v11;
          *v11 = v12;
          if (v15)
            WTF::RefCounted<WebCore::DOMMimeType>::deref(v15);
        }
        v16 = (WebCore::DOMMimeType *)(v5 - 1);
        v17 = *v7;
        if ((a4 & 1) == 0)
        {
          v19 = (int *)*((_QWORD *)*(v7 - 1) + 2);
          v18 = v418;
          if (v19)
          {
            v20 = *v19 + 2;
            *v19 = v20;
            v21 = (const WTF::StringImpl *)*((_QWORD *)v17 + 2);
            if (!v21)
            {
              v22 = v19[1] != 0;
LABEL_20:
              v23 = v20 - 2;
              if (v23)
              {
                *v19 = v23;
              }
              else
              {
                WTF::StringImpl::destroy((WTF::StringImpl *)v19, a2);
                v18 = v418;
              }
              goto LABEL_22;
            }
          }
          else
          {
            v21 = (const WTF::StringImpl *)*((_QWORD *)v17 + 2);
            if (!v21)
              goto LABEL_243;
          }
          *(_DWORD *)v21 += 2;
          v22 = WTF::codePointCompare((WTF *)v19, v21, a3);
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, a2);
          else
            *(_DWORD *)v21 -= 2;
          v18 = v418;
          if (v19)
          {
            v20 = *v19;
            goto LABEL_20;
          }
LABEL_22:
          v17 = *v6;
          if (v22 < 0)
            goto LABEL_23;
LABEL_243:
          *v6 = 0;
          v131 = *(_QWORD *)v414;
          v132 = (int *)*((_QWORD *)v17 + 2);
          if (!v132)
          {
            v134 = *(const WTF::StringImpl **)(v131 + 16);
            if (!v134)
              goto LABEL_251;
LABEL_245:
            *(_DWORD *)v134 += 2;
            v135 = WTF::codePointCompare((WTF *)v132, v134, a3);
            if (*(_DWORD *)v134 == 2)
              WTF::StringImpl::destroy(v134, a2);
            else
              *(_DWORD *)v134 -= 2;
            v18 = v418;
            if (!v132)
              goto LABEL_250;
            v133 = *v132 - 2;
            if (*v132 != 2)
              goto LABEL_249;
            goto LABEL_273;
          }
          v133 = *v132;
          *v132 += 2;
          v134 = *(const WTF::StringImpl **)(v131 + 16);
          if (v134)
            goto LABEL_245;
          v135 = v132[1] != 0;
          if (v133)
          {
LABEL_249:
            *v132 = v133;
LABEL_250:
            if ((v135 & 0x80000000) == 0)
              goto LABEL_251;
            goto LABEL_274;
          }
LABEL_273:
          WTF::StringImpl::destroy((WTF::StringImpl *)v132, a2);
          v18 = v418;
          if ((v135 & 0x80000000) == 0)
          {
LABEL_251:
            v136 = v6 + 1;
            while (1)
            {
              v7 = v136;
              if (v136 >= (WebCore::DOMMimeType **)v18)
                goto LABEL_291;
              v137 = *v136;
              v138 = (int *)*((_QWORD *)v17 + 2);
              if (v138)
                break;
              v140 = (const WTF::StringImpl *)*((_QWORD *)v137 + 2);
              if (v140)
                goto LABEL_255;
              v141 = 0;
LABEL_261:
              v136 = v7 + 1;
              if (v141 < 0)
                goto LABEL_291;
            }
            v139 = *v138 + 2;
            *v138 = v139;
            v140 = (const WTF::StringImpl *)*((_QWORD *)v137 + 2);
            if (v140)
            {
LABEL_255:
              *(_DWORD *)v140 += 2;
              v141 = WTF::codePointCompare((WTF *)v138, v140, a3);
              if (*(_DWORD *)v140 == 2)
                WTF::StringImpl::destroy(v140, a2);
              else
                *(_DWORD *)v140 -= 2;
              v18 = v418;
              if (!v138)
                goto LABEL_261;
              v139 = *v138;
            }
            else
            {
              v141 = v138[1] != 0;
            }
            v142 = v139 - 2;
            if (v142)
            {
              *v138 = v142;
            }
            else
            {
              WTF::StringImpl::destroy((WTF::StringImpl *)v138, a2);
              v18 = v418;
            }
            goto LABEL_261;
          }
LABEL_274:
          v143 = (WTF::StringImpl *)(v6 + 1);
          do
          {
            if (v143 == v18)
              goto LABEL_806;
            v144 = *(_QWORD *)v143;
            v145 = (int *)*((_QWORD *)v17 + 2);
            if (v145)
            {
              v146 = *v145 + 2;
              *v145 = v146;
              v147 = *(const WTF::StringImpl **)(v144 + 16);
              if (!v147)
              {
                v148 = v145[1] != 0;
LABEL_282:
                v149 = v146 - 2;
                if (v149)
                {
                  *v145 = v149;
                }
                else
                {
                  WTF::StringImpl::destroy((WTF::StringImpl *)v145, a2);
                  v18 = v418;
                }
                goto LABEL_284;
              }
            }
            else
            {
              v147 = *(const WTF::StringImpl **)(v144 + 16);
              if (!v147)
              {
                v148 = 0;
                goto LABEL_284;
              }
            }
            *(_DWORD *)v147 += 2;
            v148 = WTF::codePointCompare((WTF *)v145, v147, a3);
            if (*(_DWORD *)v147 == 2)
              WTF::StringImpl::destroy(v147, a2);
            else
              *(_DWORD *)v147 -= 2;
            v18 = v418;
            if (v145)
            {
              v146 = *v145;
              goto LABEL_282;
            }
LABEL_284:
            v143 = (WTF::StringImpl *)((char *)v143 + 8);
          }
          while ((v148 & 0x80000000) == 0);
          v7 = (WebCore::DOMMimeType **)((char *)v143 - 8);
LABEL_291:
          v150 = (WebCore::DOMMimeType **)v18;
          if (v7 < (WebCore::DOMMimeType **)v18)
          {
            v151 = v414;
            do
            {
              v150 = (WebCore::DOMMimeType **)v151;
              if ((WebCore::DOMMimeType **)((char *)v151 + 8) == v6)
                goto LABEL_806;
              v152 = *(_QWORD *)v151;
              v153 = (int *)*((_QWORD *)v17 + 2);
              if (v153)
              {
                v154 = *v153 + 2;
                *v153 = v154;
                v155 = *(const WTF::StringImpl **)(v152 + 16);
                if (!v155)
                {
                  v156 = v153[1] != 0;
LABEL_299:
                  v157 = v154 - 2;
                  if (v157)
                    *v153 = v157;
                  else
                    WTF::StringImpl::destroy((WTF::StringImpl *)v153, a2);
                  goto LABEL_301;
                }
              }
              else
              {
                v155 = *(const WTF::StringImpl **)(v152 + 16);
                if (!v155)
                  break;
              }
              *(_DWORD *)v155 += 2;
              v156 = WTF::codePointCompare((WTF *)v153, v155, a3);
              if (*(_DWORD *)v155 == 2)
              {
                WTF::StringImpl::destroy(v155, a2);
                if (v153)
                {
LABEL_298:
                  v154 = *v153;
                  goto LABEL_299;
                }
              }
              else
              {
                *(_DWORD *)v155 -= 2;
                if (v153)
                  goto LABEL_298;
              }
LABEL_301:
              v151 = (const WTF::StringImpl *)(v150 - 1);
            }
            while (v156 < 0);
          }
          v4 = (unint64_t)v16;
LABEL_310:
          if (v7 < v150)
          {
            v16 = *v7;
            *v7 = 0;
            v158 = *v150;
            *v150 = 0;
            v159 = *v7;
            *v7 = v158;
            if (v159)
              WTF::RefCounted<WebCore::DOMMimeType>::deref(v159);
            v160 = *v150;
            *v150 = v16;
            if (v160)
              WTF::RefCounted<WebCore::DOMMimeType>::deref(v160);
            v161 = (WebCore::DOMMimeType **)v418;
            while (2)
            {
              if (++v7 == v161)
                goto LABEL_806;
              v162 = *v7;
              v163 = *((_QWORD *)v17 + 2);
              if (!v163)
              {
                v165 = (int *)*((_QWORD *)v162 + 2);
                if (v165)
                {
                  v166 = *v165;
                  v190 = v165[1];
                  *v165 += 2;
                  if (v190)
                    LODWORD(v16) = -1;
                  else
                    LODWORD(v16) = 0;
                  goto LABEL_353;
                }
                LODWORD(v16) = 0;
                goto LABEL_358;
              }
              v164 = *(_DWORD *)v163 + 2;
              *(_DWORD *)v163 = v164;
              v165 = (int *)*((_QWORD *)v162 + 2);
              if (v165)
              {
                v166 = *v165;
                v167 = v165[1];
                *v165 += 2;
                v168 = v165[4];
                v169 = *(_DWORD *)(v163 + 4);
                if (v167 >= v169)
                  v170 = v169;
                else
                  v170 = v167;
                if ((*(_BYTE *)(v163 + 16) & 4) != 0)
                {
                  if ((v168 & 4) != 0)
                  {
                    if ((_DWORD)v170)
                    {
                      v171 = (unsigned __int8 *)*((_QWORD *)v165 + 1);
                      v172 = *(unsigned __int8 **)(v163 + 8);
                      do
                      {
                        v173 = *v172;
                        v174 = *v171;
                        v175 = v173 > v174;
                        if (v173 != v174)
                          goto LABEL_350;
                        ++v172;
                        ++v171;
                      }
                      while (--v170);
                    }
LABEL_344:
                    if (v167 < v169)
                      v188 = 1;
                    else
                      v188 = -1;
                    if (v169 == v167)
                      LODWORD(v16) = 0;
                    else
                      LODWORD(v16) = v188;
                  }
                  else
                  {
                    if (!(_DWORD)v170)
                      goto LABEL_344;
                    v180 = (unsigned __int16 *)*((_QWORD *)v165 + 1);
                    v181 = *(unsigned __int8 **)(v163 + 8);
                    while (1)
                    {
                      v182 = *v181;
                      v183 = *v180;
                      if (v183 != v182)
                        break;
                      ++v181;
                      ++v180;
                      if (!--v170)
                        goto LABEL_344;
                    }
                    if (v183 < v182)
                      LODWORD(v16) = 1;
                    else
                      LODWORD(v16) = -1;
                  }
                }
                else
                {
                  if ((v168 & 4) != 0)
                  {
                    if (!(_DWORD)v170)
                      goto LABEL_344;
                    v184 = (unsigned __int8 *)*((_QWORD *)v165 + 1);
                    v185 = *(unsigned __int16 **)(v163 + 8);
                    while (1)
                    {
                      v186 = *v185;
                      v187 = *v184;
                      v175 = v186 > v187;
                      if (v186 != v187)
                        break;
                      ++v185;
                      ++v184;
                      if (!--v170)
                        goto LABEL_344;
                    }
                  }
                  else
                  {
                    if (!(_DWORD)v170)
                      goto LABEL_344;
                    v176 = (unsigned __int16 *)*((_QWORD *)v165 + 1);
                    v177 = *(unsigned __int16 **)(v163 + 8);
                    while (1)
                    {
                      v178 = *v177;
                      v179 = *v176;
                      v175 = v178 > v179;
                      if (v178 != v179)
                        break;
                      ++v177;
                      ++v176;
                      if (!--v170)
                        goto LABEL_344;
                    }
                  }
LABEL_350:
                  if (v175)
                    LODWORD(v16) = 1;
                  else
                    LODWORD(v16) = -1;
                }
LABEL_353:
                if (v166)
                {
                  *v165 = v166;
                  if (v163)
                    goto LABEL_355;
LABEL_358:
                  if ((v16 & 0x80000000) == 0)
                    continue;
                  while (2)
                  {
                    if (v150 == v6)
                      goto LABEL_806;
                    v195 = (uint64_t)*--v150;
                    v194 = v195;
                    v196 = *((_QWORD *)v17 + 2);
                    if (!v196)
                    {
                      v191 = *(int **)(v194 + 16);
                      if (!v191)
                        goto LABEL_310;
                      v192 = *v191;
                      v193 = v191[1];
                      *v191 += 2;
                      if (v193)
                        LODWORD(v16) = -1;
                      else
                        LODWORD(v16) = 0;
                      goto LABEL_420;
                    }
                    v197 = *(_DWORD *)v196 + 2;
                    *(_DWORD *)v196 = v197;
                    v191 = *(int **)(v194 + 16);
                    if (v191)
                    {
                      v192 = *v191;
                      v198 = v191[1];
                      *v191 += 2;
                      v199 = v191[4];
                      v200 = *(_DWORD *)(v196 + 4);
                      if (v198 >= v200)
                        v201 = v200;
                      else
                        v201 = v198;
                      if ((*(_BYTE *)(v196 + 16) & 4) != 0)
                      {
                        if ((v199 & 4) != 0)
                        {
                          if ((_DWORD)v201)
                          {
                            v202 = (unsigned __int8 *)*((_QWORD *)v191 + 1);
                            v203 = *(unsigned __int8 **)(v196 + 8);
                            do
                            {
                              v204 = *v203;
                              v205 = *v202;
                              v206 = v204 > v205;
                              if (v204 != v205)
                                goto LABEL_417;
                              ++v203;
                              ++v202;
                            }
                            while (--v201);
                          }
LABEL_411:
                          if (v198 < v200)
                            v219 = 1;
                          else
                            v219 = -1;
                          if (v200 == v198)
                            LODWORD(v16) = 0;
                          else
                            LODWORD(v16) = v219;
                        }
                        else
                        {
                          if (!(_DWORD)v201)
                            goto LABEL_411;
                          v211 = (unsigned __int16 *)*((_QWORD *)v191 + 1);
                          v212 = *(unsigned __int8 **)(v196 + 8);
                          while (1)
                          {
                            v213 = *v212;
                            v214 = *v211;
                            if (v214 != v213)
                              break;
                            ++v212;
                            ++v211;
                            if (!--v201)
                              goto LABEL_411;
                          }
                          if (v214 < v213)
                            LODWORD(v16) = 1;
                          else
                            LODWORD(v16) = -1;
                        }
                      }
                      else
                      {
                        if ((v199 & 4) != 0)
                        {
                          if (!(_DWORD)v201)
                            goto LABEL_411;
                          v215 = (unsigned __int8 *)*((_QWORD *)v191 + 1);
                          v216 = *(unsigned __int16 **)(v196 + 8);
                          while (1)
                          {
                            v217 = *v216;
                            v218 = *v215;
                            v206 = v217 > v218;
                            if (v217 != v218)
                              break;
                            ++v216;
                            ++v215;
                            if (!--v201)
                              goto LABEL_411;
                          }
                        }
                        else
                        {
                          if (!(_DWORD)v201)
                            goto LABEL_411;
                          v207 = (unsigned __int16 *)*((_QWORD *)v191 + 1);
                          v208 = *(unsigned __int16 **)(v196 + 8);
                          while (1)
                          {
                            v209 = *v208;
                            v210 = *v207;
                            v206 = v209 > v210;
                            if (v209 != v210)
                              break;
                            ++v208;
                            ++v207;
                            if (!--v201)
                              goto LABEL_411;
                          }
                        }
LABEL_417:
                        if (v206)
                          LODWORD(v16) = 1;
                        else
                          LODWORD(v16) = -1;
                      }
LABEL_420:
                      if (v192)
                      {
                        *v191 = v192;
                        if (v196)
                        {
LABEL_422:
                          v197 = *(_DWORD *)v196;
                          goto LABEL_423;
                        }
                      }
                      else
                      {
                        WTF::StringImpl::destroy((WTF::StringImpl *)v191, a2);
                        if (v196)
                          goto LABEL_422;
                      }
                    }
                    else
                    {
                      LODWORD(v16) = *(_DWORD *)(v196 + 4) != 0;
LABEL_423:
                      v220 = v197 - 2;
                      if (v220)
                        *(_DWORD *)v196 = v220;
                      else
                        WTF::StringImpl::destroy((WTF::StringImpl *)v196, a2);
                    }
                    if ((v16 & 0x80000000) == 0)
                      goto LABEL_310;
                    continue;
                  }
                }
                WTF::StringImpl::destroy((WTF::StringImpl *)v165, a2);
                v161 = (WebCore::DOMMimeType **)v418;
                if (!v163)
                  goto LABEL_358;
LABEL_355:
                v164 = *(_DWORD *)v163;
              }
              else
              {
                LODWORD(v16) = *(_DWORD *)(v163 + 4) != 0;
              }
              break;
            }
            v189 = v164 - 2;
            if (v189)
            {
              *(_DWORD *)v163 = v189;
            }
            else
            {
              WTF::StringImpl::destroy((WTF::StringImpl *)v163, a2);
              v161 = (WebCore::DOMMimeType **)v418;
            }
            goto LABEL_358;
          }
          v221 = (uint64_t *)(v7 - 1);
          if (v7 - 1 != v6)
          {
            v222 = (WebCore::DOMMimeType *)*v221;
            *v221 = 0;
            v223 = *v6;
            *v6 = v222;
            if (v223)
              WTF::RefCounted<WebCore::DOMMimeType>::deref(v223);
          }
          a4 = 0;
          result = *v221;
          *v221 = (uint64_t)v17;
          v5 = v4;
          if (result)
          {
            result = (uint64_t)WTF::RefCounted<WebCore::DOMMimeType>::deref((WebCore::DOMMimeType *)result);
            a4 = 0;
          }
          continue;
        }
        v18 = v418;
LABEL_23:
        v415 = v16;
        *v6 = 0;
        v24 = v6;
        while (1)
        {
          v25 = v24++;
          if (v24 == (WebCore::DOMMimeType **)v18)
            goto LABEL_806;
          v26 = *((_QWORD *)*v24 + 2);
          if (!v26)
            break;
          v27 = *(_DWORD *)v26 + 2;
          *(_DWORD *)v26 = v27;
          v28 = (int *)*((_QWORD *)v17 + 2);
          if (!v28)
          {
            LODWORD(v16) = *(_DWORD *)(v26 + 4) != 0;
            goto LABEL_64;
          }
          v29 = *v28;
          v30 = v28[1];
          *v28 += 2;
          v31 = v28[4];
          v32 = *(_DWORD *)(v26 + 4);
          if (v30 >= v32)
            v33 = v32;
          else
            v33 = v30;
          if ((*(_BYTE *)(v26 + 16) & 4) == 0)
          {
            if ((v31 & 4) != 0)
            {
              if ((_DWORD)v33)
              {
                v47 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
                v48 = *(unsigned __int16 **)(v26 + 8);
                while (1)
                {
                  v49 = *v48;
                  v50 = *v47;
                  v38 = v49 > v50;
                  if (v49 != v50)
                    goto LABEL_58;
                  ++v48;
                  ++v47;
                  if (!--v33)
                    goto LABEL_52;
                }
              }
            }
            else if ((_DWORD)v33)
            {
              v39 = (unsigned __int16 *)*((_QWORD *)v28 + 1);
              v40 = *(unsigned __int16 **)(v26 + 8);
              while (1)
              {
                v41 = *v40;
                v42 = *v39;
                v38 = v41 > v42;
                if (v41 != v42)
                  goto LABEL_58;
                ++v40;
                ++v39;
                if (!--v33)
                  goto LABEL_52;
              }
            }
            goto LABEL_52;
          }
          if ((v31 & 4) != 0)
          {
            if ((_DWORD)v33)
            {
              v34 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
              v35 = *(unsigned __int8 **)(v26 + 8);
              while (1)
              {
                v36 = *v35;
                v37 = *v34;
                v38 = v36 > v37;
                if (v36 != v37)
                  break;
                ++v35;
                ++v34;
                if (!--v33)
                  goto LABEL_52;
              }
LABEL_58:
              if (v38)
                LODWORD(v16) = 1;
              else
                LODWORD(v16) = -1;
              goto LABEL_61;
            }
LABEL_52:
            if (v30 < v32)
              v51 = 1;
            else
              v51 = -1;
            if (v32 == v30)
              LODWORD(v16) = 0;
            else
              LODWORD(v16) = v51;
            goto LABEL_61;
          }
          if (!(_DWORD)v33)
            goto LABEL_52;
          v43 = (unsigned __int16 *)*((_QWORD *)v28 + 1);
          v44 = *(unsigned __int8 **)(v26 + 8);
          while (1)
          {
            v45 = *v44;
            v46 = *v43;
            if (v46 != v45)
              break;
            ++v44;
            ++v43;
            if (!--v33)
              goto LABEL_52;
          }
          if (v46 < v45)
            LODWORD(v16) = 1;
          else
            LODWORD(v16) = -1;
LABEL_61:
          if (!v29)
          {
            WTF::StringImpl::destroy((WTF::StringImpl *)v28, a2);
            v18 = v418;
            if (!v26)
              goto LABEL_66;
LABEL_63:
            v27 = *(_DWORD *)v26;
LABEL_64:
            v52 = v27 - 2;
            if (v52)
            {
              *(_DWORD *)v26 = v52;
            }
            else
            {
              WTF::StringImpl::destroy((WTF::StringImpl *)v26, a2);
              v18 = v418;
            }
            goto LABEL_66;
          }
          *v28 = v29;
          if (v26)
            goto LABEL_63;
LABEL_66:
          if ((v16 & 0x80000000) == 0)
            goto LABEL_79;
        }
        v28 = (int *)*((_QWORD *)v17 + 2);
        if (v28)
        {
          v29 = *v28;
          v53 = v28[1];
          *v28 += 2;
          if (v53)
            LODWORD(v16) = -1;
          else
            LODWORD(v16) = 0;
          goto LABEL_61;
        }
LABEL_79:
        v54 = (WebCore::DOMMimeType **)v18;
        if (v25 != v6)
        {
          while (2)
          {
            if (v54 == v6)
              goto LABEL_806;
            v55 = (uint64_t)*--v54;
            v56 = *(int **)(v55 + 16);
            if (v56)
            {
              v57 = *v56 + 2;
              *v56 = v57;
              v4 = *((_QWORD *)v17 + 2);
              if (v4)
                goto LABEL_83;
              v58 = v56[1] != 0;
LABEL_86:
              v59 = v57 - 2;
              if (v59)
                *v56 = v59;
              else
                WTF::StringImpl::destroy((WTF::StringImpl *)v56, a2);
LABEL_88:
              if (v58 < 0)
                goto LABEL_113;
              continue;
            }
            break;
          }
          v4 = *((_QWORD *)v17 + 2);
          if (!v4)
          {
            v58 = 0;
            goto LABEL_88;
          }
LABEL_83:
          *(_DWORD *)v4 += 2;
          v58 = WTF::codePointCompare((WTF *)v56, (const WTF::StringImpl *)v4, a3);
          if (*(_DWORD *)v4 == 2)
          {
            WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
            if (!v56)
              goto LABEL_88;
          }
          else
          {
            *(_DWORD *)v4 -= 2;
            if (!v56)
              goto LABEL_88;
          }
          v57 = *v56;
          goto LABEL_86;
        }
        v54 = (WebCore::DOMMimeType **)v18;
        while (2)
        {
          if (v24 < v54)
          {
            v60 = (uint64_t)*--v54;
            v61 = *(int **)(v60 + 16);
            if (v61)
            {
              v62 = *v61 + 2;
              *v61 = v62;
              v4 = *((_QWORD *)v17 + 2);
              if (v4)
                goto LABEL_100;
              v63 = v61[1] != 0;
LABEL_103:
              v64 = v62 - 2;
              if (v64)
                *v61 = v64;
              else
                WTF::StringImpl::destroy((WTF::StringImpl *)v61, a2);
LABEL_105:
              if (v63 < 0)
                break;
              continue;
            }
            v4 = *((_QWORD *)v17 + 2);
            if (!v4)
            {
              v63 = 0;
              goto LABEL_105;
            }
LABEL_100:
            *(_DWORD *)v4 += 2;
            v63 = WTF::codePointCompare((WTF *)v61, (const WTF::StringImpl *)v4, a3);
            if (*(_DWORD *)v4 == 2)
            {
              WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
              if (!v61)
                goto LABEL_105;
            }
            else
            {
              *(_DWORD *)v4 -= 2;
              if (!v61)
                goto LABEL_105;
            }
            v62 = *v61;
            goto LABEL_103;
          }
          break;
        }
LABEL_113:
        if (v24 >= v54)
        {
LABEL_231:
          if (v25 != v6)
          {
            v127 = *v25;
            *v25 = 0;
            v128 = *v6;
            *v6 = v127;
            if (v128)
              WTF::RefCounted<WebCore::DOMMimeType>::deref(v128);
          }
          v129 = *v25;
          *v25 = v17;
          v5 = (unint64_t)v415;
          if (v129)
            WTF::RefCounted<WebCore::DOMMimeType>::deref(v129);
          if (v24 < v54)
          {
LABEL_239:
            result = std::__introsort<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *,false>(v6, v25, v415, a4 & 1);
            a4 = 0;
            v7 = v25 + 1;
            continue;
          }
          v4 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>(v6, (WTF::StringImpl *)v25, a3);
          v7 = v25 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>(v25 + 1, v418, v130);
          if (!(_DWORD)result)
          {
            if ((v4 & 1) == 0)
              goto LABEL_239;
            continue;
          }
          a2 = (WTF::StringImpl *)v25;
          if ((v4 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        v4 = (unint64_t)v24;
        v65 = v54;
LABEL_115:
        v16 = *(WebCore::DOMMimeType **)v4;
        *(_QWORD *)v4 = 0;
        v66 = *v65;
        *v65 = 0;
        v67 = *(WebCore::DOMMimeType **)v4;
        *(_QWORD *)v4 = v66;
        if (v67)
          WTF::RefCounted<WebCore::DOMMimeType>::deref(v67);
        v68 = *v65;
        *v65 = v16;
        if (v68)
          WTF::RefCounted<WebCore::DOMMimeType>::deref(v68);
        v69 = v418;
        while (2)
        {
          v25 = (WebCore::DOMMimeType **)v4;
          v4 += 8;
          if ((WTF::StringImpl *)v4 != v69)
          {
            v70 = *(_QWORD *)(*(_QWORD *)v4 + 16);
            if (!v70)
            {
              v72 = (int *)*((_QWORD *)v17 + 2);
              if (!v72)
                goto LABEL_187;
              v73 = *v72;
              v97 = v72[1];
              *v72 += 2;
              if (v97)
                LODWORD(v16) = -1;
              else
                LODWORD(v16) = 0;
              goto LABEL_157;
            }
            v71 = *(_DWORD *)v70 + 2;
            *(_DWORD *)v70 = v71;
            v72 = (int *)*((_QWORD *)v17 + 2);
            if (v72)
            {
              v73 = *v72;
              v74 = v72[1];
              *v72 += 2;
              v75 = v72[4];
              v76 = *(_DWORD *)(v70 + 4);
              if (v74 >= v76)
                v77 = v76;
              else
                v77 = v74;
              if ((*(_BYTE *)(v70 + 16) & 4) != 0)
              {
                if ((v75 & 4) != 0)
                {
                  if ((_DWORD)v77)
                  {
                    v78 = (unsigned __int8 *)*((_QWORD *)v72 + 1);
                    v79 = *(unsigned __int8 **)(v70 + 8);
                    do
                    {
                      v80 = *v79;
                      v81 = *v78;
                      v82 = v80 > v81;
                      if (v80 != v81)
                        goto LABEL_154;
                      ++v79;
                      ++v78;
                    }
                    while (--v77);
                  }
LABEL_148:
                  if (v74 < v76)
                    v95 = 1;
                  else
                    v95 = -1;
                  if (v76 == v74)
                    LODWORD(v16) = 0;
                  else
                    LODWORD(v16) = v95;
                }
                else
                {
                  if (!(_DWORD)v77)
                    goto LABEL_148;
                  v87 = (unsigned __int16 *)*((_QWORD *)v72 + 1);
                  v88 = *(unsigned __int8 **)(v70 + 8);
                  while (1)
                  {
                    v89 = *v88;
                    v90 = *v87;
                    if (v90 != v89)
                      break;
                    ++v88;
                    ++v87;
                    if (!--v77)
                      goto LABEL_148;
                  }
                  if (v90 < v89)
                    LODWORD(v16) = 1;
                  else
                    LODWORD(v16) = -1;
                }
              }
              else
              {
                if ((v75 & 4) != 0)
                {
                  if (!(_DWORD)v77)
                    goto LABEL_148;
                  v91 = (unsigned __int8 *)*((_QWORD *)v72 + 1);
                  v92 = *(unsigned __int16 **)(v70 + 8);
                  while (1)
                  {
                    v93 = *v92;
                    v94 = *v91;
                    v82 = v93 > v94;
                    if (v93 != v94)
                      break;
                    ++v92;
                    ++v91;
                    if (!--v77)
                      goto LABEL_148;
                  }
                }
                else
                {
                  if (!(_DWORD)v77)
                    goto LABEL_148;
                  v83 = (unsigned __int16 *)*((_QWORD *)v72 + 1);
                  v84 = *(unsigned __int16 **)(v70 + 8);
                  while (1)
                  {
                    v85 = *v84;
                    v86 = *v83;
                    v82 = v85 > v86;
                    if (v85 != v86)
                      break;
                    ++v84;
                    ++v83;
                    if (!--v77)
                      goto LABEL_148;
                  }
                }
LABEL_154:
                if (v82)
                  LODWORD(v16) = 1;
                else
                  LODWORD(v16) = -1;
              }
LABEL_157:
              if (v73)
              {
                *v72 = v73;
                if (v70)
                  goto LABEL_159;
LABEL_162:
                if ((v16 & 0x80000000) != 0)
                  continue;
LABEL_187:
                if (v65 == v6)
                  break;
                v101 = (uint64_t)*--v65;
                v102 = *(_QWORD *)(v101 + 16);
                if (v102)
                {
                  v103 = *(_DWORD *)v102 + 2;
                  *(_DWORD *)v102 = v103;
                  v98 = (int *)*((_QWORD *)v17 + 2);
                  if (v98)
                  {
                    v99 = *v98;
                    v104 = v98[1];
                    *v98 += 2;
                    v105 = v98[4];
                    v106 = *(_DWORD *)(v102 + 4);
                    if (v104 >= v106)
                      v107 = v106;
                    else
                      v107 = v104;
                    if ((*(_BYTE *)(v102 + 16) & 4) != 0)
                    {
                      if ((v105 & 4) != 0)
                      {
                        if ((_DWORD)v107)
                        {
                          v108 = (unsigned __int8 *)*((_QWORD *)v98 + 1);
                          v109 = *(unsigned __int8 **)(v102 + 8);
                          do
                          {
                            v110 = *v109;
                            v111 = *v108;
                            v112 = v110 > v111;
                            if (v110 != v111)
                              goto LABEL_221;
                            ++v109;
                            ++v108;
                          }
                          while (--v107);
                        }
LABEL_215:
                        if (v104 < v106)
                          v125 = 1;
                        else
                          v125 = -1;
                        if (v106 == v104)
                          LODWORD(v16) = 0;
                        else
                          LODWORD(v16) = v125;
                      }
                      else
                      {
                        if (!(_DWORD)v107)
                          goto LABEL_215;
                        v117 = (unsigned __int16 *)*((_QWORD *)v98 + 1);
                        v118 = *(unsigned __int8 **)(v102 + 8);
                        while (1)
                        {
                          v119 = *v118;
                          v120 = *v117;
                          if (v120 != v119)
                            break;
                          ++v118;
                          ++v117;
                          if (!--v107)
                            goto LABEL_215;
                        }
                        if (v120 < v119)
                          LODWORD(v16) = 1;
                        else
                          LODWORD(v16) = -1;
                      }
                    }
                    else
                    {
                      if ((v105 & 4) != 0)
                      {
                        if (!(_DWORD)v107)
                          goto LABEL_215;
                        v121 = (unsigned __int8 *)*((_QWORD *)v98 + 1);
                        v122 = *(unsigned __int16 **)(v102 + 8);
                        while (1)
                        {
                          v123 = *v122;
                          v124 = *v121;
                          v112 = v123 > v124;
                          if (v123 != v124)
                            break;
                          ++v122;
                          ++v121;
                          if (!--v107)
                            goto LABEL_215;
                        }
                      }
                      else
                      {
                        if (!(_DWORD)v107)
                          goto LABEL_215;
                        v113 = (unsigned __int16 *)*((_QWORD *)v98 + 1);
                        v114 = *(unsigned __int16 **)(v102 + 8);
                        while (1)
                        {
                          v115 = *v114;
                          v116 = *v113;
                          v112 = v115 > v116;
                          if (v115 != v116)
                            break;
                          ++v114;
                          ++v113;
                          if (!--v107)
                            goto LABEL_215;
                        }
                      }
LABEL_221:
                      if (v112)
                        LODWORD(v16) = 1;
                      else
                        LODWORD(v16) = -1;
                    }
LABEL_224:
                    if (v99)
                    {
                      *v98 = v99;
                      if (v102)
                      {
LABEL_226:
                        v103 = *(_DWORD *)v102;
                        goto LABEL_227;
                      }
                    }
                    else
                    {
                      WTF::StringImpl::destroy((WTF::StringImpl *)v98, a2);
                      if (v102)
                        goto LABEL_226;
                    }
                  }
                  else
                  {
                    LODWORD(v16) = *(_DWORD *)(v102 + 4) != 0;
LABEL_227:
                    v126 = v103 - 2;
                    if (v126)
                      *(_DWORD *)v102 = v126;
                    else
                      WTF::StringImpl::destroy((WTF::StringImpl *)v102, a2);
                  }
                }
                else
                {
                  v98 = (int *)*((_QWORD *)v17 + 2);
                  if (v98)
                  {
                    v99 = *v98;
                    v100 = v98[1];
                    *v98 += 2;
                    if (v100)
                      LODWORD(v16) = -1;
                    else
                      LODWORD(v16) = 0;
                    goto LABEL_224;
                  }
                  LODWORD(v16) = 0;
                }
                if ((v16 & 0x80000000) != 0)
                {
                  if (v4 >= (unint64_t)v65)
                    goto LABEL_231;
                  goto LABEL_115;
                }
                goto LABEL_187;
              }
              WTF::StringImpl::destroy((WTF::StringImpl *)v72, a2);
              v69 = v418;
              if (!v70)
                goto LABEL_162;
LABEL_159:
              v71 = *(_DWORD *)v70;
            }
            else
            {
              LODWORD(v16) = *(_DWORD *)(v70 + 4) != 0;
            }
            v96 = v71 - 2;
            if (v96)
            {
              *(_DWORD *)v70 = v96;
            }
            else
            {
              WTF::StringImpl::destroy((WTF::StringImpl *)v70, a2);
              v69 = v418;
            }
            goto LABEL_162;
          }
          break;
        }
LABEL_806:
        __break(1u);
LABEL_807:
        result = WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
LABEL_439:
        v8 = (uint64_t *)v418;
        if (v17)
        {
          v225 = *(_DWORD *)v17 - 2;
          if (*(_DWORD *)v17 != 2)
          {
LABEL_441:
            *(_DWORD *)v17 = v225;
            goto LABEL_442;
          }
LABEL_811:
          result = WTF::StringImpl::destroy(v17, a2);
          v8 = (uint64_t *)v418;
          if ((v16 & 0x80000000) != 0)
          {
LABEL_443:
            v226 = *v6;
            *v6 = 0;
            v227 = (WebCore::DOMMimeType *)*(v8 - 1);
            *(v8 - 1) = 0;
            v228 = *v6;
            *v6 = v227;
            if (v228)
            {
              WTF::RefCounted<WebCore::DOMMimeType>::deref(v228);
              v8 = (uint64_t *)v418;
            }
            result = *(v8 - 1);
            *(v8 - 1) = (uint64_t)v226;
            if (result)
              return (uint64_t)WTF::RefCounted<WebCore::DOMMimeType>::deref((WebCore::DOMMimeType *)result);
          }
        }
        else
        {
LABEL_442:
          if ((v16 & 0x80000000) != 0)
            goto LABEL_443;
        }
        return result;
    }
  }
}

WebCore::DOMMimeType *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *,0>(WebCore::DOMMimeType *a1, WTF::StringImpl *a2, const WTF::StringImpl *a3, WebCore::DOMMimeType **a4, WebCore::DOMMimeType **a5)
{
  WebCore::DOMMimeType *result;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WebCore::DOMMimeType *v13;
  int *v14;
  int v15;
  const WTF::StringImpl *v16;
  _BOOL4 v17;
  int v18;
  WebCore::DOMMimeType *v19;
  WebCore::DOMMimeType *v20;
  WebCore::DOMMimeType *v21;
  WebCore::DOMMimeType *v22;
  int *v23;
  int v24;
  const WTF::StringImpl *v25;
  _BOOL4 v26;
  int v27;
  WebCore::DOMMimeType *v28;
  WebCore::DOMMimeType *v29;
  WebCore::DOMMimeType *v30;
  WebCore::DOMMimeType *v31;
  int *v32;
  int v33;
  const WTF::StringImpl *v34;
  _BOOL4 v35;
  WebCore::DOMMimeType *v36;
  WebCore::DOMMimeType *v37;
  WebCore::DOMMimeType *v38;
  WebCore::DOMMimeType *v39;
  int *v40;
  int v41;
  const WTF::StringImpl *v42;
  _BOOL4 v43;
  WebCore::DOMMimeType *v44;
  WebCore::DOMMimeType *v45;
  WebCore::DOMMimeType *v46;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>(a1, a2, a3, a4);
  v13 = *a4;
  v14 = (int *)*((_QWORD *)*a5 + 2);
  if (v14)
  {
    v15 = *v14 + 2;
    *v14 = v15;
    v16 = (const WTF::StringImpl *)*((_QWORD *)v13 + 2);
    if (!v16)
    {
      v17 = v14[1] != 0;
      goto LABEL_6;
    }
  }
  else
  {
    v16 = (const WTF::StringImpl *)*((_QWORD *)v13 + 2);
    if (!v16)
      return result;
  }
  *(_DWORD *)v16 += 2;
  result = (WebCore::DOMMimeType *)WTF::codePointCompare((WTF *)v14, v16, v12);
  v17 = (int)result;
  if (*(_DWORD *)v16 == 2)
  {
    result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy(v16, v11);
    if (!v14)
      goto LABEL_8;
  }
  else
  {
    *(_DWORD *)v16 -= 2;
    if (!v14)
      goto LABEL_8;
  }
  v15 = *v14;
LABEL_6:
  v18 = v15 - 2;
  if (v18)
    *v14 = v18;
  else
    result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy((WTF::StringImpl *)v14, v11);
LABEL_8:
  if ((v17 & 0x80000000) == 0)
    return result;
  v19 = *a4;
  *a4 = 0;
  v20 = *a5;
  *a5 = 0;
  v21 = *a4;
  *a4 = v20;
  if (v21)
    WTF::RefCounted<WebCore::DOMMimeType>::deref(v21);
  result = *a5;
  *a5 = v19;
  if (result)
    result = WTF::RefCounted<WebCore::DOMMimeType>::deref(result);
  v22 = *(WebCore::DOMMimeType **)a3;
  v23 = (int *)*((_QWORD *)*a4 + 2);
  if (v23)
  {
    v24 = *v23 + 2;
    *v23 = v24;
    v25 = (const WTF::StringImpl *)*((_QWORD *)v22 + 2);
    if (!v25)
    {
      v26 = v23[1] != 0;
      goto LABEL_18;
    }
  }
  else
  {
    v25 = (const WTF::StringImpl *)*((_QWORD *)v22 + 2);
    if (!v25)
      return result;
  }
  *(_DWORD *)v25 += 2;
  result = (WebCore::DOMMimeType *)WTF::codePointCompare((WTF *)v23, v25, v12);
  v26 = (int)result;
  if (*(_DWORD *)v25 == 2)
  {
    result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy(v25, v11);
    if (!v23)
      goto LABEL_20;
  }
  else
  {
    *(_DWORD *)v25 -= 2;
    if (!v23)
      goto LABEL_20;
  }
  v24 = *v23;
LABEL_18:
  v27 = v24 - 2;
  if (v27)
    *v23 = v27;
  else
    result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy((WTF::StringImpl *)v23, v11);
LABEL_20:
  if ((v26 & 0x80000000) == 0)
    return result;
  v28 = *(WebCore::DOMMimeType **)a3;
  *(_QWORD *)a3 = 0;
  v29 = *a4;
  *a4 = 0;
  v30 = *(WebCore::DOMMimeType **)a3;
  *(_QWORD *)a3 = v29;
  if (v30)
    WTF::RefCounted<WebCore::DOMMimeType>::deref(v30);
  result = *a4;
  *a4 = v28;
  if (result)
    result = WTF::RefCounted<WebCore::DOMMimeType>::deref(result);
  v31 = *(WebCore::DOMMimeType **)a2;
  v32 = *(int **)(*(_QWORD *)a3 + 16);
  if (v32)
  {
    v33 = *v32;
    *v32 += 2;
    v34 = (const WTF::StringImpl *)*((_QWORD *)v31 + 2);
    if (!v34)
    {
      v35 = v32[1] != 0;
      if (v33)
        goto LABEL_30;
LABEL_66:
      result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy((WTF::StringImpl *)v32, v11);
      goto LABEL_31;
    }
  }
  else
  {
    v34 = (const WTF::StringImpl *)*((_QWORD *)v31 + 2);
    if (!v34)
      return result;
  }
  *(_DWORD *)v34 += 2;
  result = (WebCore::DOMMimeType *)WTF::codePointCompare((WTF *)v32, v34, v12);
  v35 = (int)result;
  if (*(_DWORD *)v34 != 2)
  {
    *(_DWORD *)v34 -= 2;
    if (!v32)
      goto LABEL_31;
LABEL_29:
    v33 = *v32 - 2;
    if (*v32 != 2)
    {
LABEL_30:
      *v32 = v33;
      goto LABEL_31;
    }
    goto LABEL_66;
  }
  result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy(v34, v11);
  if (v32)
    goto LABEL_29;
LABEL_31:
  if ((v35 & 0x80000000) == 0)
    return result;
  v36 = *(WebCore::DOMMimeType **)a2;
  *(_QWORD *)a2 = 0;
  v37 = *(WebCore::DOMMimeType **)a3;
  *(_QWORD *)a3 = 0;
  v38 = *(WebCore::DOMMimeType **)a2;
  *(_QWORD *)a2 = v37;
  if (v38)
    WTF::RefCounted<WebCore::DOMMimeType>::deref(v38);
  result = *(WebCore::DOMMimeType **)a3;
  *(_QWORD *)a3 = v36;
  if (result)
    result = WTF::RefCounted<WebCore::DOMMimeType>::deref(result);
  v39 = *(WebCore::DOMMimeType **)a1;
  v40 = *(int **)(*(_QWORD *)a2 + 16);
  if (v40)
  {
    v41 = *v40;
    *v40 += 2;
    v42 = (const WTF::StringImpl *)*((_QWORD *)v39 + 2);
    if (!v42)
    {
      v43 = v40[1] != 0;
      if (v41)
        goto LABEL_41;
LABEL_70:
      result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy((WTF::StringImpl *)v40, v11);
      goto LABEL_42;
    }
  }
  else
  {
    v42 = (const WTF::StringImpl *)*((_QWORD *)v39 + 2);
    if (!v42)
      return result;
  }
  *(_DWORD *)v42 += 2;
  result = (WebCore::DOMMimeType *)WTF::codePointCompare((WTF *)v40, v42, v12);
  v43 = (int)result;
  if (*(_DWORD *)v42 != 2)
  {
    *(_DWORD *)v42 -= 2;
    if (!v40)
      goto LABEL_42;
LABEL_40:
    v41 = *v40 - 2;
    if (*v40 != 2)
    {
LABEL_41:
      *v40 = v41;
      goto LABEL_42;
    }
    goto LABEL_70;
  }
  result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy(v42, v11);
  if (v40)
    goto LABEL_40;
LABEL_42:
  if (v43 < 0)
  {
    v44 = *(WebCore::DOMMimeType **)a1;
    *(_QWORD *)a1 = 0;
    v45 = *(WebCore::DOMMimeType **)a2;
    *(_QWORD *)a2 = 0;
    v46 = *(WebCore::DOMMimeType **)a1;
    *(_QWORD *)a1 = v45;
    if (v46)
      WTF::RefCounted<WebCore::DOMMimeType>::deref(v46);
    result = *(WebCore::DOMMimeType **)a2;
    *(_QWORD *)a2 = v44;
    if (result)
      return WTF::RefCounted<WebCore::DOMMimeType>::deref(result);
  }
  return result;
}

WebCore::DOMMimeType *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>(WebCore::DOMMimeType *result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  WebCore::DOMMimeType **v5;
  WebCore::DOMMimeType *v6;
  uint64_t v7;
  int *v8;
  int v9;
  const WTF::StringImpl *v10;
  _BOOL4 v11;
  int v12;
  int *v13;
  int v14;
  const WTF::StringImpl *v15;
  _BOOL4 v16;
  WebCore::DOMMimeType *v17;
  uint64_t v18;
  WebCore::DOMMimeType *v19;
  WebCore::DOMMimeType *v20;
  int *v21;
  int v22;
  const WTF::StringImpl *v23;
  _BOOL4 v24;
  WebCore::DOMMimeType *v25;
  WebCore::DOMMimeType *v26;
  WebCore::DOMMimeType *v27;
  int *v28;
  int v29;
  const WTF::StringImpl *v30;
  int v31;
  WebCore::DOMMimeType *v32;
  WebCore::DOMMimeType *v33;
  WebCore::DOMMimeType *v34;
  int *v35;
  int v36;
  const WTF::StringImpl *v37;
  _BOOL4 v38;
  WebCore::DOMMimeType *v39;
  WebCore::DOMMimeType *v40;
  WebCore::DOMMimeType *v41;
  WebCore::DOMMimeType *v42;
  WebCore::DOMMimeType *v43;

  v5 = (WebCore::DOMMimeType **)result;
  v6 = *(WebCore::DOMMimeType **)a2;
  v7 = *(_QWORD *)result;
  v8 = *(int **)(*(_QWORD *)a2 + 16);
  if (v8)
  {
    v9 = *v8 + 2;
    *v8 = v9;
    v10 = *(const WTF::StringImpl **)(v7 + 16);
    if (!v10)
    {
      v11 = v8[1] != 0;
      goto LABEL_6;
    }
  }
  else
  {
    v10 = *(const WTF::StringImpl **)(v7 + 16);
    if (!v10)
    {
LABEL_9:
      v13 = *(int **)(*(_QWORD *)a3 + 16);
      if (v13)
      {
        v14 = *v13;
        *v13 += 2;
        v15 = (const WTF::StringImpl *)*((_QWORD *)v6 + 2);
        if (!v15)
        {
          v16 = v13[1] != 0;
          if (v14)
            goto LABEL_14;
          goto LABEL_74;
        }
      }
      else
      {
        v15 = (const WTF::StringImpl *)*((_QWORD *)v6 + 2);
        if (!v15)
          return result;
      }
      *(_DWORD *)v15 += 2;
      result = (WebCore::DOMMimeType *)WTF::codePointCompare((WTF *)v13, v15, a3);
      v16 = (int)result;
      if (*(_DWORD *)v15 == 2)
      {
        result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy(v15, a2);
        if (!v13)
        {
LABEL_15:
          if ((v16 & 0x80000000) == 0)
            return result;
          v17 = *(WebCore::DOMMimeType **)a2;
          *(_QWORD *)a2 = 0;
          v18 = *(_QWORD *)a3;
          *(_QWORD *)a3 = 0;
          v19 = *(WebCore::DOMMimeType **)a2;
          *(_QWORD *)a2 = v18;
          if (v19)
            WTF::RefCounted<WebCore::DOMMimeType>::deref(v19);
          result = *(WebCore::DOMMimeType **)a3;
          *(_QWORD *)a3 = v17;
          if (result)
            result = WTF::RefCounted<WebCore::DOMMimeType>::deref(result);
          v20 = *v5;
          v21 = *(int **)(*(_QWORD *)a2 + 16);
          if (v21)
          {
            v22 = *v21;
            *v21 += 2;
            v23 = (const WTF::StringImpl *)*((_QWORD *)v20 + 2);
            if (!v23)
            {
              v24 = v21[1] != 0;
              if (v22)
                goto LABEL_25;
              goto LABEL_84;
            }
          }
          else
          {
            v23 = (const WTF::StringImpl *)*((_QWORD *)v20 + 2);
            if (!v23)
              return result;
          }
          *(_DWORD *)v23 += 2;
          result = (WebCore::DOMMimeType *)WTF::codePointCompare((WTF *)v21, v23, a3);
          v24 = (int)result;
          if (*(_DWORD *)v23 == 2)
          {
            result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy(v23, a2);
            if (!v21)
              goto LABEL_26;
          }
          else
          {
            *(_DWORD *)v23 -= 2;
            if (!v21)
            {
LABEL_26:
              if ((v24 & 0x80000000) == 0)
                return result;
              v25 = *v5;
              *v5 = 0;
              v26 = *(WebCore::DOMMimeType **)a2;
              *(_QWORD *)a2 = 0;
              v27 = *v5;
              *v5 = v26;
              if (v27)
                WTF::RefCounted<WebCore::DOMMimeType>::deref(v27);
              result = *(WebCore::DOMMimeType **)a2;
              *(_QWORD *)a2 = v25;
              if (!result)
                return result;
              return WTF::RefCounted<WebCore::DOMMimeType>::deref(result);
            }
          }
          v22 = *v21 - 2;
          if (*v21 != 2)
          {
LABEL_25:
            *v21 = v22;
            goto LABEL_26;
          }
LABEL_84:
          result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy((WTF::StringImpl *)v21, a2);
          goto LABEL_26;
        }
      }
      else
      {
        *(_DWORD *)v15 -= 2;
        if (!v13)
          goto LABEL_15;
      }
      v14 = *v13 - 2;
      if (*v13 != 2)
      {
LABEL_14:
        *v13 = v14;
        goto LABEL_15;
      }
LABEL_74:
      result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy((WTF::StringImpl *)v13, a2);
      goto LABEL_15;
    }
  }
  *(_DWORD *)v10 += 2;
  result = (WebCore::DOMMimeType *)WTF::codePointCompare((WTF *)v8, v10, a3);
  v11 = (int)result;
  if (*(_DWORD *)v10 == 2)
  {
    result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy(v10, a2);
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    *(_DWORD *)v10 -= 2;
    if (!v8)
      goto LABEL_8;
  }
  v9 = *v8;
LABEL_6:
  v12 = v9 - 2;
  if (v12)
    *v8 = v12;
  else
    result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy((WTF::StringImpl *)v8, a2);
LABEL_8:
  v6 = *(WebCore::DOMMimeType **)a2;
  if ((v11 & 0x80000000) == 0)
    goto LABEL_9;
  v28 = *(int **)(*(_QWORD *)a3 + 16);
  if (v28)
  {
    v29 = *v28;
    *v28 += 2;
    v30 = (const WTF::StringImpl *)*((_QWORD *)v6 + 2);
    if (!v30)
    {
      v31 = v28[1] != 0;
      if (v29)
        goto LABEL_36;
LABEL_78:
      WTF::StringImpl::destroy((WTF::StringImpl *)v28, a2);
      goto LABEL_37;
    }
  }
  else
  {
    v30 = (const WTF::StringImpl *)*((_QWORD *)v6 + 2);
    if (!v30)
    {
      v32 = *v5;
      goto LABEL_38;
    }
  }
  *(_DWORD *)v30 += 2;
  v31 = WTF::codePointCompare((WTF *)v28, v30, a3);
  if (*(_DWORD *)v30 != 2)
  {
    *(_DWORD *)v30 -= 2;
    if (!v28)
      goto LABEL_37;
LABEL_35:
    v29 = *v28 - 2;
    if (*v28 != 2)
    {
LABEL_36:
      *v28 = v29;
      goto LABEL_37;
    }
    goto LABEL_78;
  }
  WTF::StringImpl::destroy(v30, a2);
  if (v28)
    goto LABEL_35;
LABEL_37:
  v32 = *v5;
  if (v31 < 0)
  {
    *v5 = 0;
    v42 = *(WebCore::DOMMimeType **)a3;
    *(_QWORD *)a3 = 0;
    v43 = *v5;
    *v5 = v42;
    if (v43)
      WTF::RefCounted<WebCore::DOMMimeType>::deref(v43);
    result = *(WebCore::DOMMimeType **)a3;
    *(_QWORD *)a3 = v32;
    if (result)
      return WTF::RefCounted<WebCore::DOMMimeType>::deref(result);
    return result;
  }
LABEL_38:
  *v5 = 0;
  v33 = *(WebCore::DOMMimeType **)a2;
  *(_QWORD *)a2 = 0;
  v34 = *v5;
  *v5 = v33;
  if (v34)
    WTF::RefCounted<WebCore::DOMMimeType>::deref(v34);
  result = *(WebCore::DOMMimeType **)a2;
  *(_QWORD *)a2 = v32;
  if (result)
  {
    result = WTF::RefCounted<WebCore::DOMMimeType>::deref(result);
    v32 = *(WebCore::DOMMimeType **)a2;
  }
  v35 = *(int **)(*(_QWORD *)a3 + 16);
  if (v35)
  {
    v36 = *v35;
    *v35 += 2;
    v37 = (const WTF::StringImpl *)*((_QWORD *)v32 + 2);
    if (!v37)
    {
      v38 = v35[1] != 0;
      if (v36)
        goto LABEL_47;
      goto LABEL_86;
    }
  }
  else
  {
    v37 = (const WTF::StringImpl *)*((_QWORD *)v32 + 2);
    if (!v37)
      return result;
  }
  *(_DWORD *)v37 += 2;
  result = (WebCore::DOMMimeType *)WTF::codePointCompare((WTF *)v35, v37, a3);
  v38 = (int)result;
  if (*(_DWORD *)v37 == 2)
  {
    result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy(v37, a2);
    if (!v35)
      goto LABEL_48;
LABEL_46:
    v36 = *v35 - 2;
    if (*v35 != 2)
    {
LABEL_47:
      *v35 = v36;
      goto LABEL_48;
    }
LABEL_86:
    result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy((WTF::StringImpl *)v35, a2);
    goto LABEL_48;
  }
  *(_DWORD *)v37 -= 2;
  if (v35)
    goto LABEL_46;
LABEL_48:
  if (v38 < 0)
  {
    v39 = *(WebCore::DOMMimeType **)a2;
    *(_QWORD *)a2 = 0;
    v40 = *(WebCore::DOMMimeType **)a3;
    *(_QWORD *)a3 = 0;
    v41 = *(WebCore::DOMMimeType **)a2;
    *(_QWORD *)a2 = v40;
    if (v41)
      WTF::RefCounted<WebCore::DOMMimeType>::deref(v41);
    result = *(WebCore::DOMMimeType **)a3;
    *(_QWORD *)a3 = v39;
    if (result)
      return WTF::RefCounted<WebCore::DOMMimeType>::deref(result);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>(WebCore::DOMMimeType **a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  WebCore::DOMMimeType **v3;
  uint64_t v5;
  _BOOL8 result;
  WebCore::DOMMimeType *v7;
  int *v8;
  int v9;
  const WTF::StringImpl *v10;
  int v11;
  WebCore::DOMMimeType *v12;
  WebCore::DOMMimeType *v13;
  WebCore::DOMMimeType *v14;
  WebCore::DOMMimeType *v15;
  WebCore::DOMMimeType **v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  WebCore::DOMMimeType **v19;
  uint64_t v20;
  int v21;
  WebCore::DOMMimeType *v22;
  int *v23;
  int v24;
  const WTF::StringImpl *v25;
  int v26;
  int v27;
  WebCore::DOMMimeType *v28;
  WebCore::DOMMimeType *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  const WTF::StringImpl *v36;
  int v37;
  int v38;
  WebCore::DOMMimeType **v39;
  WebCore::DOMMimeType *v40;
  WebCore::DOMMimeType **v41;

  v3 = (WebCore::DOMMimeType **)a2;
  v5 = (a2 - (WTF::StringImpl *)a1) >> 3;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = *a1;
      v8 = *(int **)(*((_QWORD *)a2 - 1) + 16);
      if (v8)
      {
        v9 = *v8;
        *v8 += 2;
        v10 = (const WTF::StringImpl *)*((_QWORD *)v7 + 2);
        if (!v10)
        {
          v11 = v8[1] != 0;
          if (v9)
            goto LABEL_7;
          goto LABEL_65;
        }
LABEL_4:
        *(_DWORD *)v10 += 2;
        v11 = WTF::codePointCompare((WTF *)v8, v10, a3);
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::destroy(v10, a2);
          if (!v8)
          {
LABEL_8:
            if (v11 < 0)
            {
              v12 = *a1;
              *a1 = 0;
              v13 = *(v3 - 1);
              *(v3 - 1) = 0;
              v14 = *a1;
              *a1 = v13;
              if (v14)
                WTF::RefCounted<WebCore::DOMMimeType>::deref(v14);
              v15 = *(v3 - 1);
              *(v3 - 1) = v12;
              if (v15)
                WTF::RefCounted<WebCore::DOMMimeType>::deref(v15);
            }
            return 1;
          }
        }
        else
        {
          *(_DWORD *)v10 -= 2;
          if (!v8)
            goto LABEL_8;
        }
        v9 = *v8 - 2;
        if (*v8 != 2)
        {
LABEL_7:
          *v8 = v9;
          goto LABEL_8;
        }
LABEL_65:
        WTF::StringImpl::destroy((WTF::StringImpl *)v8, a2);
        goto LABEL_8;
      }
      v10 = (const WTF::StringImpl *)*((_QWORD *)v7 + 2);
      if (v10)
        goto LABEL_4;
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>((WebCore::DOMMimeType *)a1, (WTF::StringImpl *)(a1 + 1), (WTF::StringImpl *)((char *)a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>((WebCore::DOMMimeType *)a1, (WTF::StringImpl *)(a1 + 1), (const WTF::StringImpl *)(a1 + 2), (WebCore::DOMMimeType **)a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *,0>((WebCore::DOMMimeType *)a1, (WTF::StringImpl *)(a1 + 1), (const WTF::StringImpl *)(a1 + 2), a1 + 3, (WebCore::DOMMimeType **)a2 - 1);
      return 1;
    default:
      v16 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>((WebCore::DOMMimeType *)a1, (WTF::StringImpl *)(a1 + 1), (const WTF::StringImpl *)(a1 + 2));
      v19 = a1 + 3;
      if (a1 + 3 == v3)
        return 1;
      v20 = 0;
      v21 = 0;
      v41 = v3;
      while (2)
      {
        v22 = *v16;
        v23 = (int *)*((_QWORD *)*v19 + 2);
        if (v23)
        {
          v24 = *v23 + 2;
          *v23 = v24;
          v25 = (const WTF::StringImpl *)*((_QWORD *)v22 + 2);
          if (!v25)
          {
            v26 = v23[1] != 0;
            goto LABEL_20;
          }
        }
        else
        {
          v25 = (const WTF::StringImpl *)*((_QWORD *)v22 + 2);
          if (!v25)
            goto LABEL_47;
        }
        *(_DWORD *)v25 += 2;
        v26 = WTF::codePointCompare((WTF *)v23, v25, v18);
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::destroy(v25, v17);
          if (!v23)
            goto LABEL_22;
        }
        else
        {
          *(_DWORD *)v25 -= 2;
          if (!v23)
            goto LABEL_22;
        }
        v24 = *v23;
LABEL_20:
        v27 = v24 - 2;
        if (v27)
          *v23 = v27;
        else
          WTF::StringImpl::destroy((WTF::StringImpl *)v23, v17);
LABEL_22:
        if ((v26 & 0x80000000) == 0)
          goto LABEL_47;
        v28 = 0;
        v29 = *v19;
        *v19 = 0;
        v30 = v20;
        while (2)
        {
          v31 = (char *)a1 + v30;
          v32 = *(uint64_t *)((char *)a1 + v30 + 16);
          *((_QWORD *)v31 + 2) = 0;
          *((_QWORD *)v31 + 3) = v32;
          if (v28)
            WTF::RefCounted<WebCore::DOMMimeType>::deref(v28);
          if (v30 == -16)
          {
            v39 = a1;
            goto LABEL_44;
          }
          v33 = *(uint64_t *)((char *)a1 + v30 + 8);
          v34 = (int *)*((_QWORD *)v29 + 2);
          if (v34)
          {
            v35 = *v34 + 2;
            *v34 = v35;
            v36 = *(const WTF::StringImpl **)(v33 + 16);
            if (!v36)
            {
              v37 = v34[1] != 0;
LABEL_32:
              v38 = v35 - 2;
              if (v38)
                *v34 = v38;
              else
                WTF::StringImpl::destroy((WTF::StringImpl *)v34, v17);
              goto LABEL_34;
            }
LABEL_29:
            *(_DWORD *)v36 += 2;
            v37 = WTF::codePointCompare((WTF *)v34, v36, v18);
            if (*(_DWORD *)v36 == 2)
            {
              WTF::StringImpl::destroy(v36, v17);
              if (v34)
                goto LABEL_31;
            }
            else
            {
              *(_DWORD *)v36 -= 2;
              if (v34)
              {
LABEL_31:
                v35 = *v34;
                goto LABEL_32;
              }
            }
LABEL_34:
            if ((v37 & 0x80000000) == 0)
              goto LABEL_43;
            v28 = (WebCore::DOMMimeType *)*((_QWORD *)v31 + 2);
            v30 -= 8;
            continue;
          }
          break;
        }
        v36 = *(const WTF::StringImpl **)(v33 + 16);
        if (v36)
          goto LABEL_29;
LABEL_43:
        v39 = (WebCore::DOMMimeType **)((char *)a1 + v30 + 16);
LABEL_44:
        v40 = *v39;
        *v39 = v29;
        if (v40)
          WTF::RefCounted<WebCore::DOMMimeType>::deref(v40);
        ++v21;
        v3 = v41;
        if (v21 != 8)
        {
LABEL_47:
          v16 = v19;
          v20 += 8;
          if (++v19 == v3)
            return 1;
          continue;
        }
        return v19 + 1 == v41;
      }
  }
}

WebCore::DOMMimeType *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>(WebCore::DOMMimeType *a1, WTF::StringImpl *a2, const WTF::StringImpl *a3, WebCore::DOMMimeType **a4)
{
  WebCore::DOMMimeType *result;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WebCore::DOMMimeType *v11;
  int *v12;
  int v13;
  const WTF::StringImpl *v14;
  _BOOL4 v15;
  int v16;
  WebCore::DOMMimeType *v17;
  WebCore::DOMMimeType *v18;
  WebCore::DOMMimeType *v19;
  WebCore::DOMMimeType *v20;
  int *v21;
  int v22;
  const WTF::StringImpl *v23;
  _BOOL4 v24;
  WebCore::DOMMimeType *v25;
  WebCore::DOMMimeType *v26;
  WebCore::DOMMimeType *v27;
  WebCore::DOMMimeType *v28;
  int *v29;
  int v30;
  const WTF::StringImpl *v31;
  _BOOL4 v32;
  WebCore::DOMMimeType *v33;
  WebCore::DOMMimeType *v34;
  WebCore::DOMMimeType *v35;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::makeMimeTypes(WebCore::Navigator &,WebCore::PluginInfo const&,WebCore::DOMPlugin &)::$_1 &,WTF::Ref<WebCore::DOMMimeType,WTF::RawPtrTraits<WebCore::DOMMimeType>,WTF::DefaultRefDerefTraits<WebCore::DOMMimeType>> *>(a1, a2, a3);
  v11 = *(WebCore::DOMMimeType **)a3;
  v12 = (int *)*((_QWORD *)*a4 + 2);
  if (v12)
  {
    v13 = *v12 + 2;
    *v12 = v13;
    v14 = (const WTF::StringImpl *)*((_QWORD *)v11 + 2);
    if (!v14)
    {
      v15 = v12[1] != 0;
      goto LABEL_6;
    }
  }
  else
  {
    v14 = (const WTF::StringImpl *)*((_QWORD *)v11 + 2);
    if (!v14)
      return result;
  }
  *(_DWORD *)v14 += 2;
  result = (WebCore::DOMMimeType *)WTF::codePointCompare((WTF *)v12, v14, v10);
  v15 = (int)result;
  if (*(_DWORD *)v14 == 2)
  {
    result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy(v14, v9);
    if (!v12)
      goto LABEL_8;
  }
  else
  {
    *(_DWORD *)v14 -= 2;
    if (!v12)
      goto LABEL_8;
  }
  v13 = *v12;
LABEL_6:
  v16 = v13 - 2;
  if (v16)
    *v12 = v16;
  else
    result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy((WTF::StringImpl *)v12, v9);
LABEL_8:
  if ((v15 & 0x80000000) == 0)
    return result;
  v17 = *(WebCore::DOMMimeType **)a3;
  *(_QWORD *)a3 = 0;
  v18 = *a4;
  *a4 = 0;
  v19 = *(WebCore::DOMMimeType **)a3;
  *(_QWORD *)a3 = v18;
  if (v19)
    WTF::RefCounted<WebCore::DOMMimeType>::deref(v19);
  result = *a4;
  *a4 = v17;
  if (result)
    result = WTF::RefCounted<WebCore::DOMMimeType>::deref(result);
  v20 = *(WebCore::DOMMimeType **)a2;
  v21 = *(int **)(*(_QWORD *)a3 + 16);
  if (v21)
  {
    v22 = *v21;
    *v21 += 2;
    v23 = (const WTF::StringImpl *)*((_QWORD *)v20 + 2);
    if (!v23)
    {
      v24 = v21[1] != 0;
      if (v22)
        goto LABEL_18;
LABEL_48:
      result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy((WTF::StringImpl *)v21, v9);
      goto LABEL_19;
    }
  }
  else
  {
    v23 = (const WTF::StringImpl *)*((_QWORD *)v20 + 2);
    if (!v23)
      return result;
  }
  *(_DWORD *)v23 += 2;
  result = (WebCore::DOMMimeType *)WTF::codePointCompare((WTF *)v21, v23, v10);
  v24 = (int)result;
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
    if (!v21)
      goto LABEL_19;
LABEL_17:
    v22 = *v21 - 2;
    if (*v21 != 2)
    {
LABEL_18:
      *v21 = v22;
      goto LABEL_19;
    }
    goto LABEL_48;
  }
  result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy(v23, v9);
  if (v21)
    goto LABEL_17;
LABEL_19:
  if ((v24 & 0x80000000) == 0)
    return result;
  v25 = *(WebCore::DOMMimeType **)a2;
  *(_QWORD *)a2 = 0;
  v26 = *(WebCore::DOMMimeType **)a3;
  *(_QWORD *)a3 = 0;
  v27 = *(WebCore::DOMMimeType **)a2;
  *(_QWORD *)a2 = v26;
  if (v27)
    WTF::RefCounted<WebCore::DOMMimeType>::deref(v27);
  result = *(WebCore::DOMMimeType **)a3;
  *(_QWORD *)a3 = v25;
  if (result)
    result = WTF::RefCounted<WebCore::DOMMimeType>::deref(result);
  v28 = *(WebCore::DOMMimeType **)a1;
  v29 = *(int **)(*(_QWORD *)a2 + 16);
  if (v29)
  {
    v30 = *v29;
    *v29 += 2;
    v31 = (const WTF::StringImpl *)*((_QWORD *)v28 + 2);
    if (!v31)
    {
      v32 = v29[1] != 0;
      if (v30)
        goto LABEL_29;
LABEL_52:
      result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy((WTF::StringImpl *)v29, v9);
      goto LABEL_30;
    }
  }
  else
  {
    v31 = (const WTF::StringImpl *)*((_QWORD *)v28 + 2);
    if (!v31)
      return result;
  }
  *(_DWORD *)v31 += 2;
  result = (WebCore::DOMMimeType *)WTF::codePointCompare((WTF *)v29, v31, v10);
  v32 = (int)result;
  if (*(_DWORD *)v31 != 2)
  {
    *(_DWORD *)v31 -= 2;
    if (!v29)
      goto LABEL_30;
LABEL_28:
    v30 = *v29 - 2;
    if (*v29 != 2)
    {
LABEL_29:
      *v29 = v30;
      goto LABEL_30;
    }
    goto LABEL_52;
  }
  result = (WebCore::DOMMimeType *)WTF::StringImpl::destroy(v31, v9);
  if (v29)
    goto LABEL_28;
LABEL_30:
  if (v32 < 0)
  {
    v33 = *(WebCore::DOMMimeType **)a1;
    *(_QWORD *)a1 = 0;
    v34 = *(WebCore::DOMMimeType **)a2;
    *(_QWORD *)a2 = 0;
    v35 = *(WebCore::DOMMimeType **)a1;
    *(_QWORD *)a1 = v34;
    if (v35)
      WTF::RefCounted<WebCore::DOMMimeType>::deref(v35);
    result = *(WebCore::DOMMimeType **)a2;
    *(_QWORD *)a2 = v33;
    if (result)
      return WTF::RefCounted<WebCore::DOMMimeType>::deref(result);
  }
  return result;
}

unsigned int **WTF::WeakPtrFactory<WebCore::DOMPlugin,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    *((_QWORD *)*a1 + 1) = 0;
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int *WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((WTF::StringImpl *)v4 != a2)
  {
    v5 = *(_QWORD *)result + 32 * v4;
    v6 = *(_QWORD *)result + 32 * (_QWORD)a2;
    do
    {
      v7 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v7)
      {
        v10 = *(WTF::StringImpl ***)(v6 + 16);
        v11 = 8 * v7;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      v8 = *(WTF **)(v6 + 16);
      if (v8)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        WTF::fastFree(v8, a2);
      }
      v9 = *(WTF::StringImpl **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      result = *(unsigned int **)v6;
      *(_QWORD *)v6 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v6 += 32;
    }
    while (v6 != v5);
  }
  v3[3] = v2;
  return result;
}

uint64_t *WebCore::AccessibilityRegionContext::takeBounds(uint64_t a1, uint64_t a2, int32x4_t *a3)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *result;
  uint64_t v33;
  uint64_t v34;
  WebCore::ScrollView *v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  BOOL v39;
  WebCore::AXObjectCache **v40;
  WebCore::AXObjectCache *v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::AXObjectCache *v44;
  uint64_t v45;

  WebCore::AccessibilityRegionContext::mapRect<WebCore::LayoutRect>(a1, a3);
  v8 = floorf(v4);
  v9 = 2147500000.0;
  v10 = -2147500000.0;
  if (v8 > -2147500000.0)
    v10 = (float)(int)v8;
  if (v8 < 2147500000.0)
    v11 = v10;
  else
    v11 = 2147500000.0;
  v12 = floorf(v5);
  if (v12 < 2147500000.0)
  {
    v9 = -2147500000.0;
    v13 = v12 <= -2147500000.0;
    v14 = (float)(int)v12;
    if (!v13)
      v9 = v14;
  }
  v15 = v5 + v7;
  v16 = ceilf(v4 + v6);
  v17 = 2147500000.0;
  if (v16 < 2147500000.0)
  {
    v17 = -2147500000.0;
    v13 = v16 <= -2147500000.0;
    v18 = (float)(int)v16;
    if (!v13)
      v17 = v18;
  }
  v19 = ceilf(v15);
  v20 = 2147500000.0;
  if (v19 < 2147500000.0)
  {
    v20 = -2147500000.0;
    v13 = v19 <= -2147500000.0;
    v21 = (float)(int)v19;
    if (!v13)
      v20 = v21;
  }
  v22 = 0x7FFFFFFFLL;
  v23 = 0x80000000;
  if (v11 > -2147500000.0)
    v23 = (int)v11;
  if (v11 < 2147500000.0)
    v22 = v23;
  v24 = 0x7FFFFFFF00000000;
  v25 = 0x8000000000000000;
  if (v9 > -2147500000.0)
    v25 = (unint64_t)(int)v9 << 32;
  if (v9 < 2147500000.0)
    v24 = v25;
  v26 = v17 - v11;
  v27 = v20 - v9;
  v28 = 0x7FFFFFFFLL;
  v29 = 0x80000000;
  if (v26 > -2147500000.0)
    v29 = (int)v26;
  if (v26 < 2147500000.0)
    v28 = v29;
  v30 = 0x7FFFFFFF00000000;
  v31 = 0x8000000000000000;
  if (v27 > -2147500000.0)
    v31 = (unint64_t)(int)v27 << 32;
  if (v27 < 2147500000.0)
    v30 = v31;
  v42 = v24 | v22;
  v43 = v30 | v28;
  result = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
  v33 = result[66];
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 8);
    if (v34)
    {
      v35 = *(WebCore::ScrollView **)(v34 + 288);
      if (v35)
      {
        v42 = WebCore::ScrollView::contentsToRootView(v35, (const WebCore::IntRect *)&v42);
        v43 = v36;
        result = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
      }
    }
  }
  v37 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v37 & 1) != 0)
  {
    v38 = WebCore::Document::topDocument((uint64_t)result);
    *(_DWORD *)(v38 + 24) += 2;
    v45 = v38;
    if (*(_QWORD *)(v38 + 1944))
      v39 = *(_BYTE *)(v38 + 3405) == 0;
    else
      v39 = 0;
    if (v39)
    {
      v40 = (WebCore::AXObjectCache **)v38;
      if (!*(_QWORD *)(v38 + 1488))
      {
        v41 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
        v44 = WebCore::AXObjectCache::AXObjectCache(v41, (WebCore::Document *)v40);
        std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v40 + 186, &v44);
        std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v44);
        WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
      }
    }
    return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v45);
  }
  return result;
}

void WebCore::AccessibilityRegionContext::mapRect<WebCore::LayoutRect>(uint64_t a1, int32x4_t *a2)
{
  unsigned int v2;
  int v3;
  float32x4_t v4;
  unsigned int v6;
  unsigned int v7;
  __int32 v8;
  float32x4_t v9;

  v2 = *(_DWORD *)(a1 + 28);
  v3 = *(_DWORD *)(a1 + 44);
  v4 = vmulq_f32(vcvtq_f32_s32(*a2), (float32x4_t)vdupq_n_s32(0x3C800000u));
  if (v2 | v3)
  {
    v9 = v4;
    if (v2)
    {
      v9.i32[0] = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)(*(_QWORD *)(a1 + 16) + 48 * v2 - 48), (const WebCore::FloatRect *)&v9);
      *(uint64_t *)((char *)v9.i64 + 4) = __PAIR64__(v7, v6);
      v9.i32[3] = v8;
    }
    if (v3)
    {
      if (!*(_DWORD *)(a1 + 44))
        __break(0xC471u);
    }
  }
}

uint64_t *WebCore::AccessibilityRegionContext::takeBounds(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  WebCore::ScrollView *v13;
  uint64_t v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  BOOL v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::ScrollView *v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  BOOL v52;
  WebCore::AXObjectCache **v53;
  WebCore::AXObjectCache *v54;
  uint64_t v55;
  BOOL v56;
  WebCore::AXObjectCache **v57;
  WebCore::AXObjectCache *v58;
  int32x4_t v59;
  uint64_t v60;
  uint64_t v61;
  WebCore::AXObjectCache *v62;

  v3 = a3;
  if (*(_BYTE *)(a2 + 46) == 49)
  {
    v5 = HIDWORD(a3);
    ++*(_DWORD *)(a2 + 16);
    v6 = WebCore::RenderView::documentRect((WebCore::RenderLayer **)a2);
    v61 = v7;
    LODWORD(v60) = ((int)(v3 - (v8 & 0xFFFFFFC0) + 32) >> 6) + v3 / 64 + v6;
    HIDWORD(v60) = ((int)(v5 - (v9 & 0xFFFFFFC0) + 32) >> 6) + (int)v5 / 64 + HIDWORD(v6);
    result = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
    v11 = result[66];
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(WebCore::ScrollView **)(v12 + 288);
        if (v13)
        {
          v60 = WebCore::ScrollView::contentsToRootView(v13, (const WebCore::IntRect *)&v60);
          v61 = v14;
          result = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
        }
      }
    }
    v15 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
    if ((v15 & 1) != 0)
    {
      v55 = WebCore::Document::topDocument((uint64_t)result);
      *(_DWORD *)(v55 + 24) += 2;
      v59.i64[0] = v55;
      if (*(_QWORD *)(v55 + 1944))
        v56 = *(_BYTE *)(v55 + 3405) == 0;
      else
        v56 = 0;
      if (v56)
      {
        v57 = (WebCore::AXObjectCache **)v55;
        if (!*(_QWORD *)(v55 + 1488))
        {
          v58 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
          v62 = WebCore::AXObjectCache::AXObjectCache(v58, (WebCore::Document *)v57);
          std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v57 + 186, &v62);
          std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v62);
          WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
        }
      }
      result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v59.i64);
    }
    v16 = *(_DWORD *)(a2 + 16);
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x1963193E8);
    }
    *(_DWORD *)(a2 + 16) = v16 - 1;
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 160);
    v59.i64[0] = a3;
    v59.i64[1] = v17;
    WebCore::AccessibilityRegionContext::mapRect<WebCore::LayoutRect>(a1, &v59);
    v22 = floorf(v18);
    v23 = 2147500000.0;
    v24 = -2147500000.0;
    if (v22 > -2147500000.0)
      v24 = (float)(int)v22;
    if (v22 < 2147500000.0)
      v25 = v24;
    else
      v25 = 2147500000.0;
    v26 = floorf(v19);
    if (v26 < 2147500000.0)
    {
      v23 = -2147500000.0;
      v27 = v26 <= -2147500000.0;
      v28 = (float)(int)v26;
      if (!v27)
        v23 = v28;
    }
    v29 = v19 + v21;
    v30 = ceilf(v18 + v20);
    v31 = 2147500000.0;
    if (v30 < 2147500000.0)
    {
      v31 = -2147500000.0;
      v27 = v30 <= -2147500000.0;
      v32 = (float)(int)v30;
      if (!v27)
        v31 = v32;
    }
    v33 = ceilf(v29);
    v34 = 2147500000.0;
    if (v33 < 2147500000.0)
    {
      v34 = -2147500000.0;
      v27 = v33 <= -2147500000.0;
      v35 = (float)(int)v33;
      if (!v27)
        v34 = v35;
    }
    v36 = 0x7FFFFFFFLL;
    v37 = 0x80000000;
    if (v25 > -2147500000.0)
      v37 = (int)v25;
    if (v25 < 2147500000.0)
      v36 = v37;
    v38 = 0x7FFFFFFF00000000;
    v39 = 0x8000000000000000;
    if (v23 > -2147500000.0)
      v39 = (unint64_t)(int)v23 << 32;
    if (v23 < 2147500000.0)
      v38 = v39;
    v40 = v31 - v25;
    v41 = v34 - v23;
    v42 = 0x7FFFFFFFLL;
    v43 = 0x80000000;
    if (v40 > -2147500000.0)
      v43 = (int)v40;
    if (v40 < 2147500000.0)
      v42 = v43;
    v44 = 0x7FFFFFFF00000000;
    v45 = 0x8000000000000000;
    if (v41 > -2147500000.0)
      v45 = (unint64_t)(int)v41 << 32;
    if (v41 < 2147500000.0)
      v44 = v45;
    v60 = v38 | v36;
    v61 = v44 | v42;
    result = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
    v46 = result[66];
    if (v46)
    {
      v47 = *(_QWORD *)(v46 + 8);
      if (v47)
      {
        v48 = *(WebCore::ScrollView **)(v47 + 288);
        if (v48)
        {
          v60 = WebCore::ScrollView::contentsToRootView(v48, (const WebCore::IntRect *)&v60);
          v61 = v49;
          result = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
        }
      }
    }
    v50 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
    if ((v50 & 1) != 0)
    {
      v51 = WebCore::Document::topDocument((uint64_t)result);
      *(_DWORD *)(v51 + 24) += 2;
      v59.i64[0] = v51;
      if (*(_QWORD *)(v51 + 1944))
        v52 = *(_BYTE *)(v51 + 3405) == 0;
      else
        v52 = 0;
      if (v52)
      {
        v53 = (WebCore::AXObjectCache **)v51;
        if (!*(_QWORD *)(v51 + 1488))
        {
          v54 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
          v62 = WebCore::AXObjectCache::AXObjectCache(v54, (WebCore::Document *)v53);
          std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v53 + 186, &v62);
          std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v62);
          WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
        }
      }
      return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v59.i64);
    }
  }
  return result;
}

void WebCore::AccessibilityRegionContext::takeBounds(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  unsigned int v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::ScrollView *v47;
  unint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  BOOL v51;
  WebCore::AXObjectCache **v52;
  WebCore::AXObjectCache *v53;
  uint64_t v54;
  unint64_t v55;
  WebCore::AXObjectCache *v56;
  uint64_t v57;

  v7 = *(_DWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 44);
  v54 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  v55 = __PAIR64__(LODWORD(a6), LODWORD(a5));
  if (v7 | v8)
  {
    if (v7)
    {
      a3 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)(*(_QWORD *)(a1 + 16) + 48 * v7 - 48), (const WebCore::FloatRect *)&v54);
      v54 = __PAIR64__(LODWORD(a4), LODWORD(a3));
      v55 = __PAIR64__(LODWORD(a6), LODWORD(a5));
    }
    if (v8)
    {
      v10 = *(unsigned int *)(a1 + 44);
      if (!(_DWORD)v10)
      {
        __break(0xC471u);
        return;
      }
      v11 = *(_QWORD *)(a1 + 32) + 16 * v10;
      v12 = (float)*(int *)(v11 - 16);
      v13 = (float)*(int *)(v11 - 12);
      v14 = (float)*(int *)(v11 - 8);
      v15 = (float)*(int *)(v11 - 4);
      if (a3 >= v12)
        v16 = a3;
      else
        v16 = (float)*(int *)(v11 - 16);
      if (a4 >= v13)
        v17 = a4;
      else
        v17 = (float)*(int *)(v11 - 12);
      v18 = a3 + a5;
      if ((float)(v12 + v14) < v18)
        v18 = v12 + v14;
      v19 = a4 + a6;
      if ((float)(v13 + v15) < v19)
        v19 = v13 + v15;
      if (v16 >= v18 || v17 >= v19)
      {
        v16 = 0.0;
        v17 = 0.0;
        v18 = 0.0;
        v19 = 0.0;
      }
      a5 = v18 - v16;
      a6 = v19 - v17;
      a4 = v17;
      a3 = v16;
    }
  }
  v21 = floorf(a3);
  v22 = -2147500000.0;
  if (v21 > -2147500000.0)
    v22 = (float)(int)v21;
  if (v21 < 2147500000.0)
    v23 = v22;
  else
    v23 = 2147500000.0;
  v24 = floorf(a4);
  v25 = -2147500000.0;
  if (v24 > -2147500000.0)
    v25 = (float)(int)v24;
  if (v24 < 2147500000.0)
    v26 = v25;
  else
    v26 = 2147500000.0;
  v27 = a6 + a4;
  v28 = ceilf(a5 + a3);
  v29 = -2147500000.0;
  if (v28 > -2147500000.0)
    v29 = (float)(int)v28;
  if (v28 < 2147500000.0)
    v30 = v29;
  else
    v30 = 2147500000.0;
  v31 = ceilf(v27);
  v32 = -2147500000.0;
  if (v31 > -2147500000.0)
    v32 = (float)(int)v31;
  if (v31 < 2147500000.0)
    v33 = v32;
  else
    v33 = 2147500000.0;
  v34 = 0x7FFFFFFFLL;
  v35 = 0x80000000;
  if (v23 > -2147500000.0)
    v35 = (int)v23;
  if (v23 < 2147500000.0)
    v34 = v35;
  v36 = 0x7FFFFFFF00000000;
  v37 = 0x8000000000000000;
  if (v26 > -2147500000.0)
    v37 = (unint64_t)(int)v26 << 32;
  if (v26 < 2147500000.0)
    v36 = v37;
  v38 = v30 - v23;
  v39 = v33 - v26;
  v40 = 0x7FFFFFFFLL;
  v41 = 0x80000000;
  if (v38 > -2147500000.0)
    v41 = (int)v38;
  if (v38 < 2147500000.0)
    v40 = v41;
  v42 = 0x7FFFFFFF00000000;
  v43 = 0x8000000000000000;
  if (v39 > -2147500000.0)
    v43 = (unint64_t)(int)v39 << 32;
  if (v39 < 2147500000.0)
    v42 = v43;
  v54 = v36 | v34;
  v55 = v42 | v40;
  v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
  v45 = *(_QWORD *)(v44 + 528);
  if (v45)
  {
    v46 = *(_QWORD *)(v45 + 8);
    if (v46)
    {
      v47 = *(WebCore::ScrollView **)(v46 + 288);
      if (v47)
      {
        v54 = WebCore::ScrollView::contentsToRootView(v47, (const WebCore::IntRect *)&v54);
        v55 = v48;
        v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
      }
    }
  }
  v49 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v49 & 1) != 0)
  {
    v50 = WebCore::Document::topDocument(v44);
    *(_DWORD *)(v50 + 24) += 2;
    v57 = v50;
    if (*(_QWORD *)(v50 + 1944))
      v51 = *(_BYTE *)(v50 + 3405) == 0;
    else
      v51 = 0;
    if (v51)
    {
      v52 = (WebCore::AXObjectCache **)v50;
      if (!*(_QWORD *)(v50 + 1488))
      {
        v53 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
        v56 = WebCore::AXObjectCache::AXObjectCache(v53, (WebCore::Document *)v52);
        std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v52 + 186, &v56);
        std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v56);
        WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
      }
    }
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v57);
  }
}

void WebCore::AccessibilityRegionContext::takeBounds(uint64_t a1, _QWORD *a2, float a3, float a4, float a5, float a6)
{
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::ScrollView *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  int j;
  float *v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  int i;
  unsigned int v84;
  uint64_t *v85;
  uint64_t v86;
  float v87;
  float *v88;
  unsigned int v89;
  float *v90;
  float *v91;
  float *v92;
  float v93;
  float v94;
  float v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  unsigned int v102;
  WTF *v103;
  unint64_t v104;
  unint64_t v105;

  v8 = *(_DWORD *)(a1 + 28);
  v9 = *(_DWORD *)(a1 + 44);
  v104 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  v105 = __PAIR64__(LODWORD(a6), LODWORD(a5));
  if (v8 | v9)
  {
    if (v8)
    {
      a3 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)(*(_QWORD *)(a1 + 16) + 48 * v8 - 48), (const WebCore::FloatRect *)&v104);
      v104 = __PAIR64__(LODWORD(a4), LODWORD(a3));
      v105 = __PAIR64__(LODWORD(a6), LODWORD(a5));
    }
    if (v9)
    {
      v10 = *(unsigned int *)(a1 + 44);
      if (!(_DWORD)v10)
      {
        __break(0xC471u);
        return;
      }
      v11 = *(_QWORD *)(a1 + 32) + 16 * v10;
      v12 = (float)*(int *)(v11 - 16);
      v13 = (float)*(int *)(v11 - 12);
      v14 = (float)*(int *)(v11 - 8);
      v15 = (float)*(int *)(v11 - 4);
      if (a3 >= v12)
        v16 = a3;
      else
        v16 = (float)*(int *)(v11 - 16);
      if (a4 >= v13)
        v17 = a4;
      else
        v17 = (float)*(int *)(v11 - 12);
      v18 = a3 + a5;
      if ((float)(v12 + v14) < v18)
        v18 = v12 + v14;
      v19 = a4 + a6;
      if ((float)(v13 + v15) < v19)
        v19 = v13 + v15;
      if (v16 >= v18 || v17 >= v19)
      {
        v16 = 0.0;
        v17 = 0.0;
        v18 = 0.0;
        v19 = 0.0;
      }
      a5 = v18 - v16;
      a6 = v19 - v17;
      a4 = v17;
      a3 = v16;
    }
  }
  v21 = floorf(a3);
  v22 = -2147500000.0;
  if (v21 > -2147500000.0)
    v22 = (float)(int)v21;
  if (v21 < 2147500000.0)
    v23 = v22;
  else
    v23 = 2147500000.0;
  v24 = floorf(a4);
  v25 = -2147500000.0;
  if (v24 > -2147500000.0)
    v25 = (float)(int)v24;
  if (v24 < 2147500000.0)
    v26 = v25;
  else
    v26 = 2147500000.0;
  v27 = a6 + a4;
  v28 = ceilf(a5 + a3);
  v29 = -2147500000.0;
  if (v28 > -2147500000.0)
    v29 = (float)(int)v28;
  if (v28 < 2147500000.0)
    v30 = v29;
  else
    v30 = 2147500000.0;
  v31 = ceilf(v27);
  v32 = -2147500000.0;
  if (v31 > -2147500000.0)
    v32 = (float)(int)v31;
  if (v31 < 2147500000.0)
    v33 = v32;
  else
    v33 = 2147500000.0;
  if (v23 >= 2147500000.0)
  {
    v34 = 0x7FFFFFFFLL;
  }
  else if (v23 <= -2147500000.0)
  {
    v34 = 0x80000000;
  }
  else
  {
    v34 = (int)v23;
  }
  if (v26 >= 2147500000.0)
  {
    v35 = 0x7FFFFFFF00000000;
  }
  else if (v26 <= -2147500000.0)
  {
    v35 = 0x8000000000000000;
  }
  else
  {
    v35 = (unint64_t)(int)v26 << 32;
  }
  v36 = v30 - v23;
  v37 = v33 - v26;
  v38 = 0x7FFFFFFFLL;
  v39 = 0x80000000;
  if (v36 > -2147500000.0)
    v39 = (int)v36;
  if (v36 < 2147500000.0)
    v38 = v39;
  v40 = 0x7FFFFFFF00000000;
  v41 = 0x8000000000000000;
  if (v37 > -2147500000.0)
    v41 = (unint64_t)(int)v37 << 32;
  if (v37 < 2147500000.0)
    v40 = v41;
  v42 = (_QWORD *)(v40 | v38);
  v104 = v35 | v34;
  v105 = v40 | v38;
  if (((*(_DWORD *)(*(_QWORD *)(a2[4] + 8) + 124) >> 13) & 6u) - 2 <= 3)
  {
    v42 = (_QWORD *)__ROR8__(v42, 32);
    v105 = (unint64_t)v42;
    HIDWORD(v104) = (_DWORD)v42 + HIDWORD(v35);
  }
  v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[3] + 8) + 40) + 8) + 528);
  if (v43)
  {
    v44 = *(_QWORD *)(v43 + 8);
    if (v44)
    {
      v45 = *(WebCore::ScrollView **)(v44 + 288);
      if (v45)
      {
        v46 = WebCore::ScrollView::contentsToRootView(v45, (const WebCore::IntRect *)&v104);
        v42 = a2;
        v104 = v46;
        v105 = (unint64_t)a2;
      }
    }
  }
  v47 = (uint64_t *)(a1 + 48);
  v48 = a2[1];
  v49 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v49 + 1;
  if (!v48 || !*(_QWORD *)(v48 + 8))
  {
    v50 = *v47;
    if (*v47)
    {
      v57 = (float *)(v50 + 24 * *(unsigned int *)(v50 - 4));
      goto LABEL_72;
    }
LABEL_88:
    *(_DWORD *)(a1 + 56) = v49 + 2;
    if ((v49 + 1) > *(_DWORD *)(a1 + 60))
      WTF::WeakHashMap<WebCore::RenderText,WebCore::FloatRect,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a1 + 48, a2);
    v72 = a2[1];
    if (!v72)
    {
      v72 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v72 = 1;
      *(_QWORD *)(v72 + 8) = a2;
      v103 = (WTF *)a2[1];
      a2[1] = v72;
      if (v103)
      {
        if (*(_DWORD *)v103 == 1)
        {
          WTF::fastFree(v103, a2);
          v72 = a2[1];
        }
        else
        {
          --*(_DWORD *)v103;
        }
      }
    }
    v73 = *(_DWORD *)v72;
    *(_DWORD *)v72 += 2;
    v74 = __CFADD__(v73, 1);
    v75 = v73 + 1;
    if (v74)
      WTF::fastFree((WTF *)v72, a2);
    else
      *(_DWORD *)v72 = v75;
    v76 = *v47;
    if (*v47
      || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::FloatRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::FloatRect>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::FloatRect,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::FloatRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v47, 8u), (v76 = *v47) != 0))
    {
      v77 = *(_DWORD *)(v76 - 8);
    }
    else
    {
      v77 = 0;
    }
    v78 = 0;
    v79 = (~(v72 << 32) + v72) ^ ((unint64_t)(~(v72 << 32) + v72) >> 22);
    v80 = 9 * ((v79 + ~(v79 << 13)) ^ ((v79 + ~(v79 << 13)) >> 8));
    v81 = (v80 ^ (v80 >> 15)) + ~((v80 ^ (v80 >> 15)) << 27);
    v82 = (v81 >> 31) ^ v81;
    for (i = 1; ; ++i)
    {
      v84 = v82 & v77;
      v85 = (uint64_t *)(v76 + 24 * v84);
      v86 = *v85;
      if (*v85 == -1)
      {
        v78 = v76 + 24 * v84;
      }
      else
      {
        if (!v86)
        {
          if (v78)
          {
            *(_QWORD *)v78 = 0;
            *(_QWORD *)(v78 + 8) = 0;
            *(_QWORD *)(v78 + 16) = 0;
            --*(_DWORD *)(*v47 - 16);
            *(_QWORD *)v78 = v72;
          }
          else
          {
            *v85 = v72;
            v78 = v76 + 24 * v84;
          }
          v93 = (float)SHIDWORD(v104);
          v94 = (float)(int)v105;
          v95 = (float)SHIDWORD(v105);
          *(float *)(v78 + 8) = (float)(int)v104;
          *(float *)(v78 + 12) = v93;
          *(float *)(v78 + 16) = v94;
          *(float *)(v78 + 20) = v95;
          v96 = *v47;
          if (*v47)
            v97 = *(_DWORD *)(v96 - 12) + 1;
          else
            v97 = 1;
          *(_DWORD *)(v96 - 12) = v97;
          v98 = *v47;
          if (*v47)
            v99 = *(_DWORD *)(v98 - 12);
          else
            v99 = 0;
          v100 = (*(_DWORD *)(v98 - 16) + v99);
          v101 = *(unsigned int *)(v98 - 4);
          if (v101 > 0x400)
          {
            if (v101 > 2 * v100)
              return;
LABEL_128:
            v102 = (_DWORD)v101 << (6 * *(_DWORD *)(v98 - 12) >= (2 * v101));
          }
          else
          {
            if (3 * v101 > 4 * v100)
              return;
            if ((_DWORD)v101)
              goto LABEL_128;
            v102 = 8;
          }
          WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::FloatRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::FloatRect>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::FloatRect,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::FloatRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v47, v102);
          return;
        }
        if (v86 == v72)
        {
          v87 = (float)SHIDWORD(v104);
          v88 = (float *)(v76 + 24 * v84);
          v88[2] = (float)(int)v104;
          v88[3] = v87;
          v88[4] = (float)(int)v42;
          v88[5] = (float)SHIDWORD(v42);
          if (*(_DWORD *)v72 == 1)
            WTF::fastFree((WTF *)v72, a2);
          else
            --*(_DWORD *)v72;
          return;
        }
      }
      v82 = i + v84;
    }
  }
  v50 = *v47;
  if (!*v47)
    goto LABEL_88;
  v51 = *(_DWORD *)(v50 - 8);
  v52 = (~(v48 << 32) + v48) ^ ((unint64_t)(~(v48 << 32) + v48) >> 22);
  v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
  v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
  v55 = v51 & ((v54 >> 31) ^ v54);
  for (j = 1; ; ++j)
  {
    v57 = (float *)(v50 + 24 * v55);
    v58 = *(_QWORD *)v57;
    if (*(_QWORD *)v57 != -1)
    {
      if (!v58)
      {
        v89 = *(_DWORD *)(v50 - 4);
        v57 = (float *)(v50 + 24 * v89);
        v90 = v57;
        goto LABEL_109;
      }
      if (v58 == v48)
        break;
    }
    v55 = (v55 + j) & v51;
  }
  v89 = *(_DWORD *)(v50 - 4);
  v90 = (float *)(v50 + 24 * v89);
LABEL_109:
  v91 = (float *)(v50 + 24 * v89);
  if (v57 != v91)
  {
    while (!*(_QWORD *)(*(_QWORD *)v57 + 8))
    {
      v92 = v57 + 6;
      v57 = v90;
      if (v92 != v90)
      {
        v57 = v92;
        while ((unint64_t)(*(_QWORD *)v57 + 1) <= 1)
        {
          v57 += 6;
          if (v57 == v90)
          {
            v57 = v90;
            break;
          }
        }
      }
      if (v57 == v91)
      {
        v57 = v91;
        break;
      }
    }
  }
LABEL_72:
  if (v57 == (float *)(v50 + 24 * *(unsigned int *)(v50 - 4)))
    goto LABEL_88;
  if ((int)v42 >= 1 && SHIDWORD(v42) >= 1)
  {
    v59 = (float)(int)v104;
    v60 = (float)SHIDWORD(v104);
    v61 = (float)(int)v42;
    v62 = (float)SHIDWORD(v42);
    v63 = v57[4];
    if (v63 <= 0.0 || (v64 = v57[5], v64 <= 0.0))
    {
      v57[2] = v59;
      v57[3] = v60;
      v57[4] = v61;
      v57[5] = v62;
    }
    else
    {
      v65 = v57[2];
      v66 = v57[3];
      if (v65 <= v59)
        v67 = v57[2];
      else
        v67 = (float)(int)v104;
      if (v66 <= v60)
        v68 = v57[3];
      else
        v68 = (float)SHIDWORD(v104);
      v69 = v63 + v65;
      v70 = v59 + v61;
      if (v69 >= v70)
        v70 = v69;
      v71 = v60 + v62;
      if ((float)(v64 + v66) >= v71)
        v71 = v64 + v66;
      v57[2] = v67;
      v57[3] = v68;
      v57[4] = v70 - v67;
      v57[5] = v71 - v68;
    }
  }
}

uint64_t WebCore::AncestorSubgridIterator::operator++(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v13;
  WTF *v14;

  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          if (*(_BYTE *)(a1 + 17))
          {
            v6 = *(_QWORD *)(v5 + 32);
            if (!v6)
              goto LABEL_17;
            while (1)
            {
              v7 = *(_QWORD *)(v6 + 8);
              if (!v7)
                goto LABEL_17;
              if (*(_BYTE *)(v7 + 46) == 12)
                break;
              v6 = *(_QWORD *)(v7 + 32);
              if (!v6)
                goto LABEL_17;
            }
            v8 = ((*(_BYTE *)(v3 + 21) & 0x10) == 0) == ((*(_BYTE *)(v7 + 21) & 0x10) == 0)
               ? *(unsigned __int8 *)(a1 + 16)
               : (*(_BYTE *)(a1 + 16) == 0);
            if (WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v7))
              goto LABEL_17;
            v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 80);
            if (v8)
            {
              if (!*(_BYTE *)(v9 + 258))
                goto LABEL_17;
            }
            else if (!*(_BYTE *)(v9 + 259))
            {
              goto LABEL_17;
            }
            v13 = *(_QWORD *)(v7 + 32);
            if (!v13)
              goto LABEL_17;
            v10 = *(_QWORD *)(v13 + 8);
            if (!v10)
              goto LABEL_18;
            if (*(_BYTE *)(v10 + 46) == 12)
            {
              if (v8 == 1)
              {
                if ((WebCore::RenderGrid::areMasonryRows((WebCore::RenderGrid *)v10) & 1) != 0)
                  goto LABEL_17;
              }
              else if (WebCore::RenderGrid::areMasonryColumns((WebCore::RenderGrid *)v10))
              {
                goto LABEL_17;
              }
              v10 = *(_QWORD *)(v7 + 8);
              if (v10)
                goto LABEL_32;
              v10 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v10 = 1;
              *(_QWORD *)(v10 + 8) = v7;
              v14 = *(WTF **)(v7 + 8);
              *(_QWORD *)(v7 + 8) = v10;
              if (!v14)
                goto LABEL_32;
              if (*(_DWORD *)v14 != 1)
              {
                --*(_DWORD *)v14;
LABEL_32:
                ++*(_DWORD *)v10;
                goto LABEL_18;
              }
              WTF::fastFree(v14, a2);
              v10 = *(_QWORD *)(v7 + 8);
              if (v10)
                goto LABEL_32;
            }
            else
            {
LABEL_17:
              v10 = 0;
            }
LABEL_18:
            v11 = *(WTF **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v10;
            if (v11)
            {
              if (*(_DWORD *)v11 == 1)
                WTF::fastFree(v11, a2);
              else
                --*(_DWORD *)v11;
            }
          }
        }
      }
    }
  }
  return a1;
}

uint64_t WebCore::ancestorSubgridsOfGridItem@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  BOOL v11;
  int v12;
  WTF *v13;

  v4 = *(_QWORD *)(result + 32);
  if (!v4)
    goto LABEL_7;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_7;
  if (*(_BYTE *)(v5 + 46) != 12)
    goto LABEL_7;
  result = WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v5);
  if ((result & 1) != 0)
    goto LABEL_7;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 40) + 80);
  if (a2)
  {
    if (!*(_BYTE *)(v7 + 258))
    {
LABEL_7:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_WORD *)(a3 + 16) = 0;
      return result;
    }
  }
  else if (!*(_BYTE *)(v7 + 259))
  {
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(v5 + 32);
  if (!v8)
    goto LABEL_7;
  result = *(_QWORD *)(v8 + 8);
  if (!result || *(_BYTE *)(result + 46) != 12)
    goto LABEL_7;
  if (a2 == 1)
  {
    result = WebCore::RenderGrid::areMasonryRows((WebCore::RenderGrid *)result);
    if ((result & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    result = WebCore::RenderGrid::areMasonryColumns((WebCore::RenderGrid *)result);
    if ((result & 1) != 0)
      goto LABEL_7;
  }
  result = *(_QWORD *)(v5 + 8);
  if (!result)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v5;
    v13 = *(WTF **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = result;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WTF::fastFree(v13, v9);
        result = *(_QWORD *)(v5 + 8);
        if (!result)
        {
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_BYTE *)(a3 + 16) = a2;
          *(_BYTE *)(a3 + 17) = 1;
          return result;
        }
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
  }
  v10 = *(_DWORD *)result;
  *(_DWORD *)result += 2;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = a2;
  *(_BYTE *)(a3 + 17) = 1;
  v11 = __CFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    return WTF::fastFree((WTF *)result, v9);
  *(_DWORD *)result = v12;
  return result;
}

BOOL WebCore::RenderStyle::hasBackground(WebCore::RenderStyle *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  WebCore::FillLayer *v6;
  uint64_t (*v7)();
  _BOOL8 v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _BOOL8 hasImageInAnyLayer;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t **v34;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  v30 = &v29;
  v31 = &v29;
  v32 = &v29;
  v33 = &v29;
  v2 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v2 == -1)
    goto LABEL_39;
  v34 = &v30;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v2])(&v27, &v34, v1 + 16);
  if (v28 != 1)
  {
    v29 = *((_QWORD *)this + 4) + 328;
    v30 = &v29;
    v31 = &v29;
    v32 = &v29;
    v33 = &v29;
    if (v28 != -1)
    {
      v34 = &v30;
      ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v28])(&v26, &v34, &v27);
      goto LABEL_5;
    }
LABEL_39:
    v6 = (WebCore::FillLayer *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_40;
  }
  v10 = *(_QWORD *)(*((_QWORD *)this + 4) + 328);
  v26 = v10;
  if ((v10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
LABEL_5:
  if (v28 != -1)
    ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v28])(&v30, &v27);
  if ((*((_DWORD *)this + 11) & 0xC00) != 0x800 || (*(_BYTE *)(*((_QWORD *)this + 3) + 239) & 2) != 0)
  {
    v27 = v26;
  }
  else
  {
    WebCore::RenderStyle::colorResolvingCurrentColor(this, 61, 1, (WebCore::Color *)&v30);
    if (v30 == (uint64_t *)0x1104000000000000)
    {
      v27 = 0;
      v13 = v26;
      if (v26)
      {
        v26 = 0;
        v27 = v13;
      }
    }
    else
    {
      if ((v26 & 0x8000000000000) != 0)
        v17 = *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 0x10);
      else
        v17 = (float)v26 / 255.0;
      WebCore::Color::colorWithAlpha((uint64_t)&v30, v17, &v27);
      if (((unint64_t)v30 & 0x8000000000000) != 0)
      {
        v18 = (unsigned int *)((unint64_t)v30 & 0xFFFFFFFFFFFFLL);
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          WTF::fastFree((WTF *)v18, v4);
        }
      }
    }
    if ((v26 & 0x8000000000000) != 0)
    {
      v14 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v4);
      }
    }
  }
  v5 = v27;
  if ((v27 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
    if (*(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
      v8 = 1;
      goto LABEL_43;
    }
  }
  else if ((_BYTE)v27)
  {
    return 1;
  }
  v6 = *(WebCore::FillLayer **)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 8);
  if (!*((_QWORD *)v6 + 1))
  {
    if (*((_QWORD *)v6 + 2))
      v7 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v7 = 0;
    v8 = v7 != 0;
    goto LABEL_16;
  }
LABEL_40:
  v21 = v5;
  hasImageInAnyLayer = WebCore::FillLayer::hasImageInAnyLayer(v6);
  v5 = v21;
  v8 = hasImageInAnyLayer;
LABEL_16:
  if ((v5 & 0x8000000000000) == 0)
    return v8;
  v23 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
  do
  {
LABEL_43:
    v24 = __ldaxr(v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v23));
  if (!v25)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v4);
  }
  return v8;
}

uint64_t WebCore::RenderTableSection::primaryCellAt(WebCore::RenderTableSection *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  WebCore::RenderTableSection *v9;

  if (*((_BYTE *)this + 282))
  {
    v9 = this;
    v7 = a2;
    v8 = a3;
    WebCore::RenderTableSection::recalcCells(this);
    this = v9;
    a2 = v7;
    a3 = v8;
  }
  if (*((_DWORD *)this + 53) <= a2 || (v3 = *((_QWORD *)this + 25) + 40 * a2, *(_DWORD *)(v3 + 12) <= a3))
  {
    __break(0xC471u);
    JUMPOUT(0x19631A564);
  }
  v4 = *(_QWORD *)v3 + 32 * a3;
  v5 = *(unsigned int *)(v4 + 12);
  if ((_DWORD)v5)
    return *(_QWORD *)(*(_QWORD *)v4 + 8 * v5 - 8);
  else
    return 0;
}

void *WebCore::AutoTableLayout::insertSpanCell(void *this, WebCore::RenderTableCell *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  WebCore::RenderTableCell *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;

  if ((*((_BYTE *)a2 + 251) & 4) == 0)
    return this;
  v3 = (uint64_t)this;
  this = (void *)WebCore::RenderTableCell::parseColSpanFromDOM(a2);
  if ((_DWORD)this == 1)
    return this;
  v4 = (_QWORD *)(v3 + 32);
  v5 = *(unsigned int *)(v3 + 44);
  if (!(_DWORD)v5 || *(_QWORD *)(*v4 + 8 * (v5 - 1)))
  {
    WTF::Vector<WebCore::RenderTableCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((void **)(v3 + 32), (v5 + 10));
    v6 = *(_DWORD *)(v3 + 44);
    v7 = v6 >= v5;
    v9 = v6 - v5;
    v8 = v9 != 0 && v7;
    if (!v7)
      v9 = 0;
    if (!v8)
      goto LABEL_36;
    *(_QWORD *)(*v4 + 8 * v5) = 0;
    if (v9 == 1)
      goto LABEL_36;
    *(_QWORD *)(*v4 + 8 * v5 + 8) = 0;
    if (v9 == 2
      || (*(_QWORD *)(*v4 + 8 * v5 + 16) = 0, v9 == 3)
      || (*(_QWORD *)(*v4 + 8 * v5 + 24) = 0, v9 == 4)
      || (*(_QWORD *)(*v4 + 8 * v5 + 32) = 0, v9 == 5)
      || (*(_QWORD *)(*v4 + 8 * v5 + 40) = 0, v9 == 6)
      || (*(_QWORD *)(*v4 + 8 * v5 + 48) = 0, v9 == 7)
      || (*(_QWORD *)(*v4 + 8 * v5 + 56) = 0, v9 == 8)
      || (*(_QWORD *)(*v4 + 8 * v5 + 64) = 0, v9 == 9))
    {
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x19631A75CLL);
    }
    *(_QWORD *)(*v4 + 8 * v5 + 72) = 0;
    LODWORD(v5) = v5 + 10;
  }
  if ((*((_BYTE *)a2 + 251) & 4) == 0)
  {
    v10 = 1;
    goto LABEL_21;
  }
  v15 = WebCore::RenderTableCell::parseColSpanFromDOM(a2);
  if (*(_DWORD *)(v3 + 44))
  {
    v10 = v15;
LABEL_21:
    v11 = 0;
    do
    {
      v12 = *(WebCore::RenderTableCell **)(*v4 + 8 * v11);
      if (!v12)
        break;
      v14 = (*((_BYTE *)v12 + 251) & 4) != 0 ? WebCore::RenderTableCell::parseColSpanFromDOM(v12) : 1;
      if (v10 <= v14)
        break;
      ++v11;
    }
    while (v11 < *(unsigned int *)(v3 + 44));
    v13 = v11;
    goto LABEL_24;
  }
  LODWORD(v11) = 0;
  v13 = 0;
LABEL_24:
  this = memmove((void *)(*(_QWORD *)(v3 + 32) + 8 * v13 + 8), (const void *)(*(_QWORD *)(v3 + 32) + 8 * v13), 8 * (v5 + ~(_DWORD)v11));
  if (*(_DWORD *)(v3 + 44) <= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x19631A764);
  }
  *(_QWORD *)(*v4 + 8 * v13) = a2;
  return this;
}

_QWORD *WebCore::BackgroundPainter::BackgroundPainter(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

const WebCore::CachedImageClient *WebCore::BackgroundPainter::paintRootBoxFillLayers(const WebCore::CachedImageClient *this)
{
  uint64_t v1;
  const WebCore::CachedImageClient *v2;
  const WebCore::Color *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  WebCore::RenderObject *v16;
  uint64_t v17[2];
  unint64_t v18;

  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 20) & 0x20) == 0)
  {
    v1 = (uint64_t)this;
    this = WebCore::RenderView::rendererForRootBackground(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8) + 40)
                                                                                              + 8)
                                                                                  + 1944));
    if (this)
    {
      v2 = this;
      WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 61, 0, &v18);
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 24) + 8) + 40) + 8);
      if ((*(_QWORD *)(*(_QWORD *)(v4 + 680) + 688) & 0x2000000000) != 0
        && (v16 = *(WebCore::RenderObject **)v1, WebCore::Color::isWhiteColor((WebCore::Color *)&v18, v3))
        && WebCore::RenderObject::useDarkAppearance(v16)
        && (v10 = *(_QWORD *)(v4 + 528)) != 0
        && (v11 = *(_QWORD *)(v10 + 8)) != 0
        && (v12 = *(_QWORD *)(v11 + 288)) != 0)
      {
        v13 = *(_DWORD *)(v12 + 8);
        *(_DWORD *)(v12 + 8) = v13 + 1;
        if (*(_BYTE *)(v12 + 1369))
          v5 = 8;
        else
          v5 = 7;
        if (v13)
          *(_DWORD *)(v12 + 8) = v13;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      else
      {
        v5 = 2;
      }
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 11) + 16) + 8);
      WebCore::RenderView::backgroundRect(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 24) + 8)
                                                                                          + 40)
                                                                              + 8)
                                                                  + 1944));
      v17[0] = v7;
      v17[1] = v8;
      this = (const WebCore::CachedImageClient *)WebCore::BackgroundPainter::paintFillLayers(v1, (const WebCore::CachedImageClient *)&v18, v6, v17, 0, v5, v2);
      if ((v18 & 0x8000000000000) != 0)
      {
        this = (const WebCore::CachedImageClient *)(v18 & 0xFFFFFFFFFFFFLL);
        do
        {
          v14 = __ldaxr((unsigned int *)this);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, (unsigned int *)this));
        if (!v15)
        {
          atomic_store(1u, (unsigned int *)this);
          return (const WebCore::CachedImageClient *)WTF::fastFree(this, v9);
        }
      }
    }
  }
  return this;
}

BOOL WebCore::InlineIterator::InlineBoxIterator::operator->(uint64_t a1)
{
  uint64_t v1;
  WebCore::LengthSize *v4;
  char v5;
  char *v6;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1 == -1)
  {
    v4 = (WebCore::LengthSize *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::LengthSize::isEmpty(v4);
  }
  else
  {
    v6 = &v5;
    if ((((uint64_t (*)(char **, uint64_t))off_1E341E170[v1])(&v6, a1) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19631A97CLL);
    }
    return a1;
  }
}

BOOL WebCore::LengthSize::isEmpty(WebCore::LengthSize *this)
{
  BOOL v1;
  BOOL v3;

  if (*((_BYTE *)this + 4))
    v1 = *((_BYTE *)this + 4) == 11;
  else
    v1 = 1;
  if (!v1)
  {
    if (*((_BYTE *)this + 6))
    {
      if (*(float *)this == 0.0)
        return 1;
    }
    else if (!*(_DWORD *)this)
    {
      return 1;
    }
  }
  if (*((_BYTE *)this + 12))
    v3 = *((_BYTE *)this + 12) == 11;
  else
    v3 = 1;
  if (v3)
    return 0;
  if (*((_BYTE *)this + 14))
    return *((float *)this + 2) == 0.0;
  else
    return *((_DWORD *)this + 2) == 0;
}

uint64_t WebCore::InlineIterator::LineBox::isFirst(WebCore::InlineIterator::LineBox *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  _QWORD v7[2];
  unsigned int v8;
  _QWORD v9[2];
  unsigned int v10;
  char v11;

  LOBYTE(v9[0]) = 0;
  v10 = -1;
  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
    goto LABEL_8;
  ((void (*)(_QWORD *, _QWORD *, WebCore::InlineIterator::LineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v1])(v7, v9, this);
  v10 = v1;
  v7[0] = &v11;
  ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(v7, v9);
  LOBYTE(v7[0]) = 0;
  v8 = -1;
  v2 = v10;
  if (v10 == -1
    || (((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v10])(&v11, v7, v9), v8 = v2, v10 != -1)&& (((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v11, v9), v2 = v8, v8 == -1))
  {
LABEL_8:
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::getSpace(v5, v6);
  }
  else
  {
    v9[0] = &v11;
    v3 = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v2])(v9, v7);
    if (v8 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E341E180[v8])(v9, v7);
    return v3;
  }
}

uint64_t WebCore::getSpace(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  int v7;
  uint64_t v8;

  v2 = ((uint64_t)(int)a1 << 6) / a2;
  v3 = 0xFFFFFFFF80000000;
  if (v2 <= (uint64_t)0xFFFFFFFF80000000)
    v2 = 0xFFFFFFFF80000000;
  if (v2 >= 0x7FFFFFFF)
    LODWORD(v2) = 0x7FFFFFFF;
  if ((int)v2 < 128)
    return 0;
  v4 = ((unint64_t)(v2 & 0xFFFFFFC0) * a2) >> 6;
  if ((((unint64_t)(v2 & 0xFFFFFFC0) * a2) >> 32) >> 6 != (int)v4 >> 31)
    LODWORD(v4) = 0x7FFFFFFF;
  v5 = __OFSUB__(a1, (_DWORD)v4);
  v6 = a1 - v4;
  v7 = (a1 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v7 = v6;
  v8 = ((uint64_t)v7 << 6) / (((_DWORD)v2 - 64) & 0xFFFFFFC0);
  if (v8 > (uint64_t)0xFFFFFFFF80000000)
    v3 = v8;
  if (v3 >= 0x7FFFFFFF)
    LODWORD(v3) = 0x7FFFFFFF;
  return v3 | 0x100000000;
}

int *WebCore::LayoutRect::inflate<WebCore::LayoutUnit>(int *result, int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;

  v2 = result[1];
  v3 = (*result >> 31) + 0x7FFFFFFF;
  if (!__OFSUB__(*result, a2))
    v3 = *result - a2;
  v4 = result[2];
  v5 = result[3];
  v6 = __OFADD__(v4, a2);
  v7 = v4 + a2;
  v8 = (v4 >> 31) + 0x7FFFFFFF;
  if (!v6)
    v8 = v7;
  v6 = __OFADD__(v8, a2);
  v9 = v8 + a2;
  v10 = (v8 >> 31) + 0x7FFFFFFF;
  if (!v6)
    v10 = v9;
  v6 = __OFSUB__(v2, a2);
  v11 = v2 - a2;
  v12 = (v2 >> 31) + 0x7FFFFFFF;
  if (!v6)
    v12 = v11;
  *result = v3;
  result[1] = v12;
  v13 = v5 + a2;
  if (__OFADD__(v5, a2))
    v13 = (v5 >> 31) + 0x7FFFFFFF;
  v6 = __OFADD__(v13, a2);
  v14 = v13 + a2;
  v15 = (v13 >> 31) + 0x7FFFFFFF;
  if (!v6)
    v15 = v14;
  result[2] = v10;
  result[3] = v15;
  return result;
}

void WebCore::BackgroundPainter::paintBoxShadow(WebCore::LayoutRect const&,WebCore::RenderStyle const&,WebCore::ShadowStyle,BOOL,BOOL)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  float v6;
  double v7;
  int v8;
  int v9;
  uint64_t v10;
  float v11;
  double v12;
  int v13;
  uint64_t v14;
  float v15;
  double v16;
  int v17;
  uint64_t v18;
  float v19;
  double v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(_QWORD *)a2;
  v4 = ((*(_DWORD *)(*(_QWORD *)a2 + 44) >> 13) & 6) - 6;
  if (v4 > 0xFFFFFFFB || **(_BYTE **)(a2 + 8))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 24);
    v6 = 0.0;
    if ((*(_BYTE *)(v5 + 124) & 0xE) != 0)
    {
      v25 = *(_QWORD *)(v5 + 200);
      if (*(_BYTE *)(v25 + 5) && *(_BYTE *)(v25 + 76) == 4)
      {
        if (*(_BYTE *)(v25 + 78))
          v6 = *(float *)(v25 + 72);
        else
          v6 = (float)*(int *)(v25 + 72);
      }
      else
      {
        v6 = *(float *)(v5 + 120);
      }
    }
    v7 = (float)(v6 + (float)((float)**(int **)(a2 + 16) * 0.015625));
  }
  else
  {
    v7 = 0.0;
  }
  if (v7 * 64.0 > -2147483650.0)
    v8 = (int)(v7 * 64.0);
  else
    v8 = 0x80000000;
  if (v7 * 64.0 < 2147483650.0)
    v9 = v8;
  else
    v9 = 0x7FFFFFFF;
  if (v4 > 0xFFFFFFFB || **(_BYTE **)(a2 + 24))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 24);
    v11 = 0.0;
    if ((*(_BYTE *)(v10 + 148) & 0xE) != 0)
    {
      v23 = *(_QWORD *)(v10 + 200);
      if (*(_BYTE *)(v23 + 5) && *(_BYTE *)(v23 + 60) == 4)
      {
        if (*(_BYTE *)(v23 + 62))
          v11 = *(float *)(v23 + 56);
        else
          v11 = (float)*(int *)(v23 + 56);
      }
      else
      {
        v11 = *(float *)(v10 + 144);
      }
    }
    v12 = (float)(v11 + (float)((float)**(int **)(a2 + 16) * 0.015625)) * 64.0;
    if (v12 >= 2147483650.0)
    {
      v13 = 0x7FFFFFFF;
      goto LABEL_18;
    }
    if (v12 <= -2147483650.0)
    {
      v13 = 0x80000000;
      goto LABEL_18;
    }
  }
  else
  {
    v12 = 0.0;
  }
  v13 = (int)v12;
LABEL_18:
  if (v4 < 0xFFFFFFFC || **(_BYTE **)(a2 + 8))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 24);
    v15 = 0.0;
    if ((*(_BYTE *)(v14 + 172) & 0xE) != 0)
    {
      v24 = *(_QWORD *)(v14 + 200);
      if (*(_BYTE *)(v24 + 5) && *(_BYTE *)(v24 + 52) == 4)
      {
        if (*(_BYTE *)(v24 + 54))
          v15 = *(float *)(v24 + 48);
        else
          v15 = (float)*(int *)(v24 + 48);
      }
      else
      {
        v15 = *(float *)(v14 + 168);
      }
    }
    v16 = (float)(v15 + (float)((float)**(int **)(a2 + 16) * 0.015625)) * 64.0;
    if (v16 >= 2147483650.0)
    {
      v17 = 0x7FFFFFFF;
      goto LABEL_24;
    }
    if (v16 <= -2147483650.0)
    {
      v17 = 0x80000000;
      goto LABEL_24;
    }
  }
  else
  {
    v16 = 0.0;
  }
  v17 = (int)v16;
LABEL_24:
  if (v4 < 0xFFFFFFFC || **(_BYTE **)(a2 + 24))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 24);
    v19 = 0.0;
    if ((*(_BYTE *)(v18 + 196) & 0xE) != 0)
    {
      v22 = *(_QWORD *)(v18 + 200);
      if (*(_BYTE *)(v22 + 5) && *(_BYTE *)(v22 + 68) == 4)
      {
        if (*(_BYTE *)(v22 + 70))
          v19 = *(float *)(v22 + 64);
        else
          v19 = (float)*(int *)(v22 + 64);
      }
      else
      {
        v19 = *(float *)(v18 + 192);
      }
    }
    v20 = (float)(v19 + (float)((float)**(int **)(a2 + 16) * 0.015625)) * 64.0;
    if (v20 >= 2147483650.0)
    {
      v21 = 0x7FFFFFFF;
      goto LABEL_30;
    }
    if (v20 <= -2147483650.0)
    {
      v21 = 0x80000000;
      goto LABEL_30;
    }
  }
  else
  {
    v20 = 0.0;
  }
  v21 = (int)v20;
LABEL_30:
  WebCore::RenderStyle::getRoundedInnerBorderFor(v3, *(int **)(a2 + 32), v17, v21, v9, v13, **(unsigned __int8 **)(a2 + 8), **(_BYTE **)(a2 + 24), a1);
}

uint64_t WebCore::BackgroundPainter::boxShadowShouldBeAppliedToBackground(WebCore::RenderBoxModelObject const&,WebCore::LayoutPoint const&,WebCore::BackgroundBleedAvoidance,WebCore::InlineIterator::InlineBoxIterator const&)::$_0::operator()(uint64_t *a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  _QWORD v24[2];
  int v25;
  _QWORD v26[2];
  int v27;
  char v28;

  v1 = (unsigned int *)*a1;
  v2 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_39;
  v26[0] = v24;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E341E170[v2])(v26, v1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19631B2C4);
  }
  v4 = v1[4];
  if ((_DWORD)v4 == -1)
    goto LABEL_39;
  v26[0] = v24;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E341E190[v4])(v26, v1) & 1) != 0)
    return 1;
  v5 = *a1;
  v6 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v6 == -1)
    goto LABEL_39;
  v26[0] = v24;
  if ((((uint64_t (*)(_QWORD *, uint64_t))off_1E341E170[v6])(v26, v5) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19631B2E4);
  }
  LOBYTE(v26[0]) = 0;
  v27 = -1;
  v7 = *(unsigned int *)(v5 + 16);
  if ((_DWORD)v7 == -1)
    goto LABEL_39;
  ((void (*)(_QWORD *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v7])(v24, v26, v5);
  v27 = v7;
  v24[0] = v22;
  ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator25traversePreviousInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v7])(v24, v26);
  LOBYTE(v24[0]) = 0;
  v25 = -1;
  v8 = v27;
  if (v27 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v27])(v22, v24, v26);
    v25 = v8;
    if (v27 != -1)
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v27])(v22, v26);
  }
  if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24))
  {
    v9 = *a1;
    v10 = *(unsigned int *)(*a1 + 16);
    if ((_DWORD)v10 == -1)
      goto LABEL_39;
    v26[0] = v22;
    if ((((uint64_t (*)(_QWORD *, uint64_t))off_1E341E170[v10])(v26, v9) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19631B304);
    }
    LOBYTE(v26[0]) = 0;
    v27 = -1;
    v11 = *(unsigned int *)(v9 + 16);
    if ((_DWORD)v11 == -1)
      goto LABEL_39;
    ((void (*)(_QWORD *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v11])(v22, v26, v9);
    v27 = v11;
    v22[0] = &v28;
    ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v11])(v22, v26);
    LOBYTE(v22[0]) = 0;
    v23 = -1;
    v12 = v27;
    if (v27 != -1)
    {
      ((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v27])(&v28, v22, v26);
      v23 = v12;
      if (v27 != -1)
        ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v27])(&v28, v26);
    }
    v13 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v22);
    if (v23 != -1)
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v23])(v26, v22);
  }
  else
  {
    v13 = 0;
  }
  if (v25 != -1)
    ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v25])(v26, v24);
  if ((v13 & 1) != 0)
    return 1;
  v15 = *a1;
  v16 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v16 == -1)
    goto LABEL_39;
  v17 = *(_QWORD *)(*(_QWORD *)a1[1] + 16);
  v26[0] = v24;
  if ((((uint64_t (*)(_QWORD *, uint64_t))off_1E341E170[v16])(v26, v15) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19631B324);
  }
  v18 = *(unsigned int *)(v15 + 16);
  if ((_DWORD)v18 == -1)
  {
LABEL_39:
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>(v21);
  }
  v26[0] = v24;
  v19 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E341E1A0[v18])(v26, v15);
  if ((*(_BYTE *)(v19 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19631B344);
  }
  v20 = v19;
  if (v17
    && ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v17 + 208))(v17, v19, *(float *)(*(_QWORD *)(v19 + 104) + 184)) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v20 + 80)) ^ 1;
  }
}

WTF *WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  WTF *v11;
  void *v12;
  WTF *result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF **v17;
  unsigned int v19;
  void *v21;
  WTF *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  WTF *v28;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v14 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v14)
      goto LABEL_23;
    v15 = 0;
    v16 = v14 - 1;
    do
    {
      v17 = (WTF **)(v8 + 8 * v16);
      if ((unint64_t)*v17 + 1 >= 2 && !*((_QWORD *)*v17 + 1))
      {
        v27 = v15;
        v26 = v16;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v17, a2);
        v16 = v26;
        v15 = v27 + 1;
      }
    }
    while ((unint64_t)v16--);
    v8 = *(_QWORD *)a1;
    if (v15)
    {
      v23 = v15;
      *(_DWORD *)(v8 - 16) += v15;
      v24 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v25 = *(_DWORD *)(v24 - 12);
      else
        v25 = 0;
      *(_DWORD *)(v24 - 12) = v25 - v23;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v19 = *(_DWORD *)(v8 - 4);
    if (v19 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v19)
    {
LABEL_23:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = (WTF *)a2[1];
  if (!v11)
  {
    v11 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *((_QWORD *)v11 + 1) = a2;
    v22 = (WTF *)a2[1];
    a2[1] = v11;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WTF::fastFree(v22, v21);
        v11 = (WTF *)a2[1];
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
  }
  *(_DWORD *)v11 += 2;
  v28 = v11;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a1, &v28, a3);
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v12);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v11 == 1)
    return (WTF *)WTF::fastFree(v11, v12);
  --*(_DWORD *)v11;
  return result;
}

uint64_t WebCore::BidiRun::BidiRun(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unsigned int v6;
  unsigned int v7;
  char v8;
  int v9;

  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_BYTE *)(result + 17) = *(_BYTE *)(result + 17) & 0xFE | ((*(_WORD *)(a5 + 4) & 0x800) != 0);
  v6 = *(unsigned __int16 *)(a5 + 4);
  if (a6 == 10)
    v7 = (v6 >> 6) & 0x1F;
  else
    v7 = a6;
  v8 = v6 & 0x3F;
  *(_BYTE *)(result + 16) = v6 & 0x3F;
  if ((v6 & 1) != 0)
  {
    if (v7 <= 5)
    {
      v9 = 1 << v7;
      LOBYTE(v7) = 1;
      if ((v9 & 0x25) != 0)
        goto LABEL_10;
    }
  }
  else
  {
    if (v7 == 2 || v7 == 5)
    {
      LOBYTE(v7) = 2;
LABEL_10:
      *(_BYTE *)(result + 16) = v7 + v8;
      goto LABEL_11;
    }
    if (v7 == 1)
      goto LABEL_10;
  }
LABEL_11:
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

void WebCore::BidiRun::~BidiRun(WTF ***this)
{
  WTF **v2;
  WTF *v3;
  WTF *v4;
  void *v5;
  WebCore::BidiCharacterRun **v6;
  WTF *v7;
  void *v8;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    do
    {
      v3 = *v2;
      *v2 = 0;
      WebCore::BidiCharacterRun::~BidiCharacterRun(v2);
      WTF::fastFree(v4, v5);
      v2 = (WTF **)v3;
    }
    while (v3);
    v6 = *this;
    *this = 0;
    if (v6)
    {
      WebCore::BidiCharacterRun::~BidiCharacterRun(v6);
      WTF::fastFree(v7, v8);
    }
  }
}

uint64_t WebCore::borderEdgesForOutline(WebCore *this, const WebCore::RenderStyle *a2, float a3)
{
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  double v12;
  int v13;
  char v14;
  unint64_t v15;
  int v16;
  char v17;
  unint64_t v18;
  int v19;
  uint64_t result;
  unint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  double v38;
  float v39;
  double v40;
  float v41;
  double v42;
  float v43;
  double v44;
  float v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;

  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)a2, 186, 0, &v60);
  v6 = v60;
  if ((v60 & 0x4000000000000) != 0)
  {
    if ((v60 & 0x8000000000000) != 0)
      v8 = *(float *)((v60 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v8 = v60 != 0;
    v7 = !v8;
  }
  else
  {
    v7 = 0;
  }
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 16);
  v10 = 0.0;
  v11 = *(_BYTE *)(v9 + 52) & 0xF;
  if ((*(_BYTE *)(v9 + 52) & 0xF) == 0)
  {
    if ((v60 & 0x8000000000000) == 0)
      goto LABEL_8;
LABEL_40:
    v26 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    do
      v28 = __ldaxr(v26);
    while (__stlxr(v28 + 1, v26));
    goto LABEL_8;
  }
  v10 = *(float *)(v9 + 48);
  v25 = 3.0;
  if (v10 >= 3.0)
    v25 = *(float *)(v9 + 48);
  if ((*(_BYTE *)(v9 + 52) & 0x10) != 0)
    v10 = v25;
  if ((v60 & 0x8000000000000) != 0)
    goto LABEL_40;
LABEL_8:
  v12 = v10 * 64.0;
  if (v12 >= 2147483650.0)
  {
    v13 = 0x7FFFFFFF;
  }
  else if (v12 <= -2147483650.0)
  {
    v13 = 0x80000000;
  }
  else
  {
    v13 = (int)v12;
  }
  v14 = v11;
  if ((_DWORD)v11 == 9)
  {
    v38 = (float)(3.0 / a3) * 64.0;
    if (v38 >= 2147483650.0)
    {
      v39 = 33554000.0;
    }
    else if (v38 <= -2147483650.0)
    {
      v39 = -33554000.0;
    }
    else
    {
      v39 = (float)(int)v38 * 0.015625;
    }
    if (v39 <= v10)
      v14 = 9;
    else
      v14 = 8;
  }
  v15 = v60;
  if ((v60 & 0x8000000000000) != 0)
  {
    v29 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 + 1, v29));
  }
  if (v12 >= 2147483650.0)
  {
    v16 = 0x7FFFFFFF;
  }
  else if (v12 > -2147483650.0)
  {
    v16 = (int)v12;
  }
  else
  {
    v16 = 0x80000000;
  }
  v17 = v11;
  if ((_DWORD)v11 == 9)
  {
    v40 = (float)(3.0 / a3) * 64.0;
    if (v40 >= 2147483650.0)
    {
      v41 = 33554000.0;
    }
    else if (v40 <= -2147483650.0)
    {
      v41 = -33554000.0;
    }
    else
    {
      v41 = (float)(int)v40 * 0.015625;
    }
    if (v41 > v10)
      v17 = 8;
    else
      v17 = 9;
  }
  v18 = v60;
  if ((v60 & 0x8000000000000) != 0)
  {
    v32 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 + 1, v32));
  }
  if (v12 >= 2147483650.0)
  {
    v19 = 0x7FFFFFFF;
  }
  else if (v12 > -2147483650.0)
  {
    v19 = (int)v12;
  }
  else
  {
    v19 = 0x80000000;
  }
  result = v11;
  if ((_DWORD)v11 == 9)
  {
    v42 = (float)(3.0 / a3) * 64.0;
    if (v42 >= 2147483650.0)
    {
      v43 = 33554000.0;
    }
    else if (v42 <= -2147483650.0)
    {
      v43 = -33554000.0;
    }
    else
    {
      v43 = (float)(int)v42 * 0.015625;
    }
    if (v43 > v10)
      result = 8;
    else
      result = 9;
  }
  v21 = v60;
  if ((v60 & 0x8000000000000) != 0)
  {
    v35 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 + 1, v35));
    do
      v37 = __ldaxr(v35);
    while (__stlxr(v37 + 1, v35));
  }
  v22 = floorf(v10 * a3);
  if (v12 >= 2147483650.0)
  {
    v23 = 0x7FFFFFFFLL;
  }
  else if (v12 <= -2147483650.0)
  {
    v23 = 0x80000000;
  }
  else
  {
    v23 = (int)v12;
  }
  v24 = v22 / a3;
  if ((_DWORD)v11 == 9)
  {
    v44 = (float)(3.0 / a3) * 64.0;
    if (v44 >= 2147483650.0)
    {
      v45 = 33554000.0;
    }
    else if (v44 <= -2147483650.0)
    {
      v45 = -33554000.0;
    }
    else
    {
      v45 = (float)(int)v44 * 0.015625;
    }
    if (v45 <= v10)
      LOBYTE(v11) = 9;
    else
      LOBYTE(v11) = 8;
  }
  *(_QWORD *)this = v6;
  *((_DWORD *)this + 2) = v13;
  *((float *)this + 3) = v24;
  *((float *)this + 4) = a3;
  *((_BYTE *)this + 20) = v14;
  *((_BYTE *)this + 21) = v7;
  *((_BYTE *)this + 22) = 1;
  *((_QWORD *)this + 3) = v15;
  *((_DWORD *)this + 8) = v16;
  *((float *)this + 9) = v24;
  *((float *)this + 10) = a3;
  *((_BYTE *)this + 44) = v17;
  *((_BYTE *)this + 45) = v7;
  *((_BYTE *)this + 46) = 1;
  *((_QWORD *)this + 6) = v18;
  *((_DWORD *)this + 14) = v19;
  *((float *)this + 15) = v24;
  *((float *)this + 16) = a3;
  *((_BYTE *)this + 68) = result;
  *((_BYTE *)this + 69) = v7;
  *((_BYTE *)this + 70) = 1;
  *((_QWORD *)this + 9) = v21;
  *((_DWORD *)this + 20) = v23;
  *((float *)this + 21) = v24;
  *((float *)this + 22) = a3;
  *((_BYTE *)this + 92) = v11;
  *((_BYTE *)this + 93) = v7;
  *((_BYTE *)this + 94) = 1;
  if ((v21 & 0x8000000000000) != 0)
  {
    v59 = v18;
    v46 = v6;
    result = v21 & 0xFFFFFFFFFFFFLL;
    do
    {
      v47 = __ldaxr((unsigned int *)result);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, (unsigned int *)result));
    if (!v48)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, (void *)v23);
      v18 = v59;
      v6 = v46;
    }
  }
  if ((v18 & 0x8000000000000) != 0)
  {
    v49 = v6;
    result = v18 & 0xFFFFFFFFFFFFLL;
    do
    {
      v50 = __ldaxr((unsigned int *)result);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, (unsigned int *)result));
    if (!v51)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, (void *)v23);
      v6 = v49;
    }
  }
  if ((v15 & 0x8000000000000) != 0)
  {
    v52 = v6;
    result = v15 & 0xFFFFFFFFFFFFLL;
    do
    {
      v53 = __ldaxr((unsigned int *)result);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, (unsigned int *)result));
    if (!v54)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, (void *)v23);
      v6 = v52;
    }
  }
  if ((v6 & 0x8000000000000) != 0)
  {
    result = v6 & 0xFFFFFFFFFFFFLL;
    do
    {
      v55 = __ldaxr((unsigned int *)result);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, (unsigned int *)result));
    if (!v56)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, (void *)v23);
    }
  }
  if ((v60 & 0x8000000000000) != 0)
  {
    result = v60 & 0xFFFFFFFFFFFFLL;
    do
    {
      v57 = __ldaxr((unsigned int *)result);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, (unsigned int *)result));
    if (!v58)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, (void *)v23);
    }
  }
  return result;
}

uint64_t WebCore::BorderEdge::obscuresBackground(WebCore::BorderEdge *this)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  if (!*((_BYTE *)this + 22) || *((_BYTE *)this + 21))
    return 0;
  v2 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) == 0)
  {
    if ((_BYTE)v2 == 0xFF)
      goto LABEL_6;
    return 0;
  }
  if (*(float *)((v2 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
    return 0;
LABEL_6:
  v3 = *((unsigned __int8 *)this + 20);
  v4 = v3 > 9;
  v5 = (0x13Du >> v3) & 1;
  if (v4)
    return 1;
  else
    return v5;
}

uint64_t WebCore::BorderEdge::getDoubleBorderStripeWidths(uint64_t this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  double v3;
  int v4;
  int v5;
  float v6;
  double v7;
  int v8;
  double v9;
  int v10;

  if (!*(_BYTE *)(this + 22))
  {
    v3 = 0.0;
    goto LABEL_4;
  }
  v3 = *(float *)(this + 12) * 64.0;
  if (v3 >= 2147483650.0)
  {
    v4 = 0x7FFFFFFF;
  }
  else
  {
    if (v3 > -2147483650.0)
    {
LABEL_4:
      v4 = (int)v3;
      goto LABEL_5;
    }
    v4 = 0x80000000;
  }
LABEL_5:
  v5 = 2 * v4;
  if ((v4 ^ (2 * v4)) < 0)
    v5 = (v4 >> 31) + 0x7FFFFFFF;
  v6 = *(float *)(this + 16);
  v7 = (float)(ceilf((float)(v6 * (float)(v5 / 3)) * 0.015625) / v6) * 64.0;
  if (v7 > -2147483650.0)
    v8 = (int)v7;
  else
    v8 = 0x80000000;
  if (v7 >= 2147483650.0)
    v8 = 0x7FFFFFFF;
  *(_DWORD *)a3 = v8;
  v9 = (float)(floorf((float)(v6 * (float)(v4 / 3)) * 0.015625) / v6) * 64.0;
  if (v9 >= 2147483650.0)
  {
    v10 = 0x7FFFFFFF;
  }
  else if (v9 <= -2147483650.0)
  {
    v10 = 0x80000000;
  }
  else
  {
    v10 = (int)v9;
  }
  *(_DWORD *)a2 = v10;
  return this;
}

BOOL WebCore::decorationHasAllSolidEdges(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  BOOL v3;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  BOOL v13;
  unsigned int v14;

  if (*(_BYTE *)(a1 + 22))
  {
    v1 = *(unsigned __int8 *)(a1 + 20);
    v2 = *(float *)(a1 + 12) != 0.0 && v1 >= 2;
    v3 = v2 && *(_BYTE *)(a1 + 21) == 0;
    if (v3 && v1 != 8)
      return 0;
  }
  if (*(_BYTE *)(a1 + 46))
  {
    v5 = *(unsigned __int8 *)(a1 + 44);
    v6 = *(float *)(a1 + 36) != 0.0 && v5 >= 2;
    v7 = v6 && *(_BYTE *)(a1 + 45) == 0;
    if (v7 && v5 != 8)
      return 0;
  }
  if (*(_BYTE *)(a1 + 70))
  {
    v9 = *(unsigned __int8 *)(a1 + 68);
    v10 = *(float *)(a1 + 60) != 0.0 && v9 >= 2;
    v11 = v10 && *(_BYTE *)(a1 + 69) == 0;
    if (v11 && v9 != 8)
      return 0;
  }
  v13 = *(float *)(a1 + 84) == 0.0 || *(_BYTE *)(a1 + 94) == 0;
  v14 = *(unsigned __int8 *)(a1 + 92);
  return v13 || v14 < 2 || *(_BYTE *)(a1 + 93) != 0 || v14 == 8;
}

_QWORD *WebCore::RectEdges<WebCore::BorderEdge>::~RectEdges(_QWORD *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  v2 = result[9];
  if ((v2 & 0x8000000000000) != 0)
  {
    v17 = result;
    v5 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      result = v17;
    }
  }
  v3 = result[6];
  if ((v3 & 0x8000000000000) != 0)
  {
    v18 = result;
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
      result = v18;
    }
  }
  v4 = result[3];
  if ((v4 & 0x8000000000000) != 0)
  {
    v19 = result;
    v11 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
      result = v19;
    }
  }
  if ((*result & 0x8000000000000) != 0)
  {
    v20 = result;
    v14 = (unsigned int *)(*result & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
      return v20;
    }
  }
  return result;
}

uint64_t WebCore::BorderPainter::paintOutline(uint64_t this, const WebCore::LayoutRect *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  double v21;
  float v22;
  void (**v23)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v24;
  void (**v25)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  void (**v36)(WebCore::RenderThemeIOS *__hidden);
  WebCore::RenderObject *v37;
  const WebCore::PaintInfo *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  __int16 v43;
  double v44;
  int v45;
  double v46;
  int v47;
  float v48;
  BOOL HasAllSolidEdges;
  char v50;
  void *v51;
  float v52;
  float v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  WTF *v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[64];
  char v68;
  _OWORD *v69;
  BOOL v70;
  int v71;
  char v72;
  char v73;
  char v74;
  BOOL v75;
  _OWORD v76[6];
  _OWORD v77[3];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  int v81[6];
  uint64_t v82[6];
  char v83;
  char v84;
  char hasBorderRadius;
  BOOL v86;
  __int128 v87;

  v3 = (uint64_t *)this;
  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 88) + 16);
  v6 = 0.0;
  if ((*(_BYTE *)(v5 + 52) & 0xF) != 0)
  {
    v6 = *(float *)(v5 + 48);
    if ((*(_BYTE *)(v5 + 52) & 0x10) != 0 && v6 < 3.0)
      v6 = 3.0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40) + 8) + 528);
  v8 = 1.0;
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
      {
        this = *(_QWORD *)(v10 + 8);
        if (this)
        {
          v11 = (*(_DWORD *)this)++;
          v8 = *(float *)(this + 364);
          if (v11)
          {
            *(_DWORD *)this = v11;
          }
          else
          {
            WebCore::Page::~Page(this);
            this = WTF::fastFree(v31, v32);
          }
        }
      }
    }
  }
  v12 = v6 * 64.0;
  if (v12 >= 2147483650.0)
  {
    v13 = 2147500000.0;
  }
  else if (v12 <= -2147483650.0)
  {
    v13 = -2147500000.0;
  }
  else
  {
    v13 = (float)(int)v12;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 16);
  v15 = *(float *)(v14 + 56);
  if ((*(_BYTE *)(v14 + 52) & 0x10) != 0)
  {
    v39 = -3.0;
    if ((*(_BYTE *)(v14 + 52) & 0xF) != 0)
    {
      v52 = *(float *)(v14 + 48);
      v53 = v52 + -3.0;
      v54 = v52 < 3.0;
      v39 = 0.0;
      if (!v54)
        v39 = v53;
    }
    if (v39 < 0.0)
      v39 = 0.0;
    v15 = v15 + v39;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v3 + 24) + 8) + 40) + 8) + 528);
  v17 = 1.0;
  if (v16)
  {
    v18 = *(_QWORD *)(v16 + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
      {
        this = *(_QWORD *)(v19 + 8);
        if (this)
        {
          v20 = (*(_DWORD *)this)++;
          v17 = *(float *)(this + 364);
          if (v20)
          {
            *(_DWORD *)this = v20;
          }
          else
          {
            WebCore::Page::~Page(this);
            this = WTF::fastFree(v33, v34);
          }
        }
      }
    }
  }
  v21 = v15 * 64.0;
  if (v21 >= 2147483650.0)
  {
    v22 = 2147500000.0;
  }
  else if (v21 <= -2147483650.0)
  {
    v22 = -2147500000.0;
  }
  else
  {
    v22 = (float)(int)v21;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 16) + 52) & 0x10) != 0)
  {
    {
      v23 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      v55 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      *(_OWORD *)(v55 + 40) = 0u;
      *(_OWORD *)(v55 + 24) = 0u;
      v23 = &off_1E335BC30;
      *(_QWORD *)v55 = &off_1E335BC30;
    }
    this = ((uint64_t (*)(uint64_t *, uint64_t))v23[23])(&WebCore::RenderTheme::singleton(void)::theme, v4 + 80);
    if ((this & 1) == 0)
    {
      v58[0] = 0;
      v58[1] = 0;
      v76[0] = *(_OWORD *)a2;
      v24 = *v3;
      if (*v3 && (*(_BYTE *)(v24 + 45) & 4) != 0)
      {
        ++*(_DWORD *)(v24 + 16);
        {
          v25 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
        }
        else
        {
          WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
          unk_1ECE88AD0 = 0u;
          unk_1ECE88AC0 = 0u;
          v25 = &off_1E335BC30;
          WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
        }
        v26 = ((uint64_t (*)(uint64_t *, uint64_t, _OWORD *))v25[16])(&WebCore::RenderTheme::singleton(void)::theme, v24, v76);
        *(_QWORD *)&v76[0] = v26;
        *((_QWORD *)&v76[0] + 1) = v27;
        v28 = *(_DWORD *)(v24 + 16);
        if (!v28)
        {
          __break(0xC471u);
          JUMPOUT(0x19631C514);
        }
        *(_DWORD *)(v24 + 16) = v28 - 1;
        v24 = *v3;
      }
      else
      {
        v26 = *(_QWORD *)&v76[0];
      }
      v82[0] = v26;
      (*(void (**)(uint64_t, WTF **, uint64_t *, _QWORD))(*(_QWORD *)v24 + 600))(v24, v58, v82, *(_QWORD *)(v3[1] + 48));
      WebCore::RenderElement::paintFocusRing(*v3, v3[1], (WebCore::RenderStyle *)(v4 + 80), (uint64_t *)v58);
      this = (uint64_t)v58[0];
      if (v58[0])
      {
        v58[0] = 0;
        LODWORD(v58[1]) = 0;
        this = WTF::fastFree((WTF *)this, v29);
      }
    }
  }
  if ((*(_BYTE *)(*v3 + 45) & 1) == 0)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(*v3 + 24) + 8);
    if (v30)
    {
      if ((*(_WORD *)(v30 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19631C534);
      }
      if ((*(_WORD *)(v30 + 30) & 1) != 0)
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v30 + 40) + 8);
        if ((*(_BYTE *)(v35 + 3382) || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 1944) + 248) + 1149) & 0x20) != 0)
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 16) + 52) & 0x10) == 0)
        {
          {
            v36 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
          }
          else
          {
            v56 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
            *(_OWORD *)(v56 + 40) = 0u;
            *(_OWORD *)(v56 + 24) = 0u;
            v36 = &off_1E335BC30;
            *(_QWORD *)v56 = &off_1E335BC30;
          }
          this = ((uint64_t (*)(uint64_t *, uint64_t))v36[23])(&WebCore::RenderTheme::singleton(void)::theme, v4 + 80);
          if ((this & 1) == 0)
          {
            v37 = (WebCore::RenderObject *)*v3;
            v38 = (const WebCore::PaintInfo *)v3[1];
            v58[0] = *(WTF **)a2;
            this = (uint64_t)WebCore::RenderObject::addPDFURLRect(v37, v38, (const WebCore::LayoutPoint *)v58);
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 16) + 52) & 0x10) == 0
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 16) + 52) & 0xF) != 0)
  {
    v40 = floorf((float)(v8 * v13) * 0.015625);
    v41 = floorf((float)(v17 * v22) * 0.015625) / v17;
    v87 = *(_OWORD *)a2;
    v42 = (float)(v40 / v8) + v41;
    this = (uint64_t)WebCore::LayoutRect::inflate<float>(&v87, v42);
    if (SDWORD2(v87) >= 1 && SHIDWORD(v87) >= 1)
    {
      v43 = (unsigned __int16)*(_DWORD *)(v4 + 124) >> 13;
      v57 = 2;
      switch((unsigned __int16)*(_DWORD *)(v4 + 124) >> 13)
      {
        case 1:
        case 2:
          goto LABEL_61;
        case 3:
        case 5:
          LOBYTE(v43) = 3;
          goto LABEL_61;
        case 4:
          goto LABEL_62;
        default:
          LOBYTE(v43) = 0;
LABEL_61:
          v57 = v43;
LABEL_62:
          v86 = (v57 & 6) != 2;
          hasBorderRadius = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v4 + 80));
          v84 = 1;
          v83 = 1;
          v82[0] = (uint64_t)a2;
          v82[1] = (uint64_t)&hasBorderRadius;
          v82[2] = v4 + 80;
          v82[3] = (uint64_t)&v86;
          v82[4] = (uint64_t)&v84;
          v82[5] = (uint64_t)&v83;
          *(_OWORD *)v81 = *(_OWORD *)a2;
          WebCore::LayoutRect::inflate<float>(v81, v41);
          v44 = v41 * 64.0;
          if (v44 >= 2147483650.0)
          {
            v45 = 0x7FFFFFFF;
          }
          else if (v44 <= -2147483650.0)
          {
            v45 = 0x80000000;
          }
          else
          {
            v45 = (int)v44;
          }
          WebCore::BorderPainter::paintOutline(WebCore::LayoutRect const&)::$_0::operator()<WebCore::LayoutRect,WebCore::LayoutUnit>((uint64_t)&v78, v82, v81, v45);
          v46 = v42 * 64.0;
          if (v46 >= 2147483650.0)
          {
            v47 = 0x7FFFFFFF;
          }
          else if (v46 <= -2147483650.0)
          {
            v47 = 0x80000000;
          }
          else
          {
            v47 = (int)v46;
          }
          WebCore::BorderPainter::paintOutline(WebCore::LayoutRect const&)::$_0::operator()<WebCore::LayoutRect,WebCore::LayoutUnit>((uint64_t)v77, v82, (int *)&v87, v47);
          v48 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v3 + 24) + 8)
                                                                                       + 40)
                                                                           + 8));
          WebCore::borderEdgesForOutline((WebCore *)v76, (const WebCore::RenderStyle *)(v4 + 80), v48);
          HasAllSolidEdges = WebCore::decorationHasAllSolidEdges((uint64_t)v76);
          *(_OWORD *)v58 = v77[0];
          v59 = v77[1];
          v60 = v77[2];
          v61 = v78;
          v62 = v79;
          v63 = v80;
          v64 = v78;
          v65 = v79;
          v66 = v80;
          v50 = hasBorderRadius;
          if (hasBorderRadius)
          {
            WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v67, *(_QWORD *)(*(_QWORD *)(v4 + 88) + 24) + 208);
            v50 = 1;
          }
          else
          {
            v67[0] = 0;
          }
          v68 = v50;
          v69 = v76;
          v70 = HasAllSolidEdges;
          v71 = 1;
          v72 = v84;
          v73 = v83;
          v74 = 0;
          v75 = v86;
          WebCore::BorderPainter::paintSides((uint64_t)v3, (int32x4_t *)v58);
          if (v68)
            WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v67);
          this = (uint64_t)WebCore::RectEdges<WebCore::BorderEdge>::~RectEdges(v76, v51);
          break;
      }
    }
  }
  return this;
}

_DWORD *WebCore::LayoutRect::inflate<float>(_DWORD *result, float a2)
{
  double v2;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;

  v2 = a2 * 64.0;
  if (v2 >= 2147483650.0 || v2 <= -2147483650.0)
  {
    if (v2 > -2147483650.0)
      v22 = (int)v2;
    else
      v22 = 0x80000000;
    if (v2 < 2147483650.0)
      v4 = v22;
    else
      v4 = 0x7FFFFFFF;
  }
  else
  {
    v4 = (int)v2;
  }
  v5 = (*result >> 31) + 0x7FFFFFFF;
  if (!__OFSUB__(*result, v4))
    v5 = *result - v4;
  *result = v5;
  v6 = result[2];
  v7 = __OFADD__(v6, v4);
  v8 = v6 + v4;
  v9 = (v6 >> 31) + 0x7FFFFFFF;
  if (!v7)
    v9 = v8;
  v7 = __OFADD__(v9, v4);
  v10 = v9 + v4;
  v11 = (v9 >> 31) + 0x7FFFFFFF;
  if (v7)
    v10 = v11;
  result[2] = v10;
  if (v2 < 2147483650.0 && v2 > -2147483650.0)
    goto LABEL_17;
  if (v2 >= 2147483650.0)
  {
    v13 = 0x7FFFFFFF;
  }
  else
  {
    if (v2 > -2147483650.0)
    {
LABEL_17:
      v13 = (int)v2;
      goto LABEL_18;
    }
    v13 = 0x80000000;
  }
LABEL_18:
  v14 = result[1];
  v7 = __OFSUB__(v14, v13);
  v15 = v14 - v13;
  v16 = (v14 >> 31) + 0x7FFFFFFF;
  if (!v7)
    v16 = v15;
  result[1] = v16;
  v17 = result[3];
  v7 = __OFADD__(v17, v13);
  v18 = v17 + v13;
  v19 = (v17 >> 31) + 0x7FFFFFFF;
  if (!v7)
    v19 = v18;
  v7 = __OFADD__(v19, v13);
  v20 = v19 + v13;
  v21 = (v19 >> 31) + 0x7FFFFFFF;
  if (v7)
    v20 = v21;
  result[3] = v20;
  return result;
}

void WebCore::BorderPainter::paintOutline(WebCore::LayoutRect const&)::$_0::operator()<WebCore::LayoutRect,WebCore::LayoutUnit>(uint64_t a1, uint64_t *a2, int *a3, int a4)
{
  uint64_t v7;
  unsigned __int8 *v9;
  int v10;
  float v11;
  int v12;
  int v13;
  int v14;
  float v15;
  double v16;
  int v17;
  float v18;
  int v19;
  int v20;
  int v21;
  float v22;
  double v23;
  char v24;
  char v25;
  float v26;
  int v27;
  float v28;
  int v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  float v33;
  int v34;
  int v35;
  int v36;
  float v37;
  double v38;
  int v39;
  float v40;
  int v41;
  int v42;
  int v43;
  float v44;
  double v45;
  char v46;
  char v47;
  float v48;
  int v49;
  float v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  int v54;
  float v55;
  int v56;
  int v57;
  int v58;
  float v59;
  double v60;
  int v61;
  float v62;
  int v63;
  int v64;
  int v65;
  float v66;
  double v67;
  char v68;
  char v69;
  float v70;
  int v71;
  float v72;
  int v73;
  int v74;
  unsigned __int8 *v75;
  int v76;
  float v77;
  uint64_t v78;
  int *v79;
  int v80;
  int v81;
  int v82;
  float v83;
  double v84;
  int v85;
  float v86;
  int v87;
  int v88;
  int v89;
  float v90;
  double v91;
  char v92;
  char v93;
  float v94;
  float v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  float v100;
  double v101;
  uint64_t v102;
  float v103;
  double v104;
  char v105;
  uint64_t v106;
  float v107;
  double v108;
  char v109;
  uint64_t v110;
  float v111;
  double v112;
  char v113;
  char v114;
  uint64_t v115;
  float v116;
  double v117;
  char v118;
  char v119;
  float v120;
  double v121;
  float v122;
  double v123;
  float v124;
  char v125;
  char v126;
  char v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE v131[64];
  char v132;
  float v133;
  __int16 v134;
  char v135;
  float v136;
  __int16 v137;
  char v138;
  float v139;
  __int16 v140;
  char v141;
  float v142;
  __int16 v143;
  char v144;
  float v145;
  __int16 v146;
  char v147;
  float v148;
  __int16 v149;
  char v150;
  float v151;
  _WORD v152[2];
  float v153;
  char v154;
  char v155;
  char v156;
  float v157;
  __int16 v158;
  char v159;
  float v160;
  __int16 v161;
  char v162;
  float v163;
  __int16 v164;
  char v165;
  float v166;
  __int16 v167;
  char v168;
  float v169;
  __int16 v170;
  char v171;
  float v172;
  __int16 v173;
  char v174;
  float v175;
  __int16 v176;
  char v177;
  float v178;
  __int16 v179;
  char v180;
  char v181;

  LOBYTE(v157) = 0;
  v181 = 0;
  v7 = *a2;
  if (!*(_BYTE *)a2[1])
  {
    v131[0] = 0;
    v132 = 0;
    goto LABEL_173;
  }
  v9 = *(unsigned __int8 **)(*(_QWORD *)(a2[2] + 8) + 24);
  v10 = v9[212];
  if (!v9[212])
  {
    v12 = 0;
    goto LABEL_18;
  }
  if (v10 == 4)
  {
    v11 = *((float *)v9 + 52);
    if (!v9[214])
      v11 = (float)SLODWORD(v11);
LABEL_14:
    v16 = v11 * 64.0;
    if (v16 >= 2147483650.0)
    {
      v13 = 0x7FFFFFFF;
    }
    else if (v16 <= -2147483650.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v16;
    }
    goto LABEL_17;
  }
  v13 = 0;
  v14 = *(_DWORD *)(v7 + 8);
  if (v9[212] > 8u)
  {
    v99 = *a2;
    if (v10 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v9 + 208), (float)v14 * 0.015625);
      v101 = v100 * 64.0;
      if (v101 >= 2147483650.0)
      {
        v13 = 0x7FFFFFFF;
      }
      else if (v101 <= -2147483650.0)
      {
        v13 = 0x80000000;
      }
      else
      {
        v13 = (int)v101;
      }
      v7 = v99;
      goto LABEL_17;
    }
    if (v10 == 9)
LABEL_250:
      v13 = *(_DWORD *)(v7 + 8);
  }
  else
  {
    if (v10 == 3)
    {
      v15 = *((float *)v9 + 52);
      if (!v9[214])
        v15 = (float)SLODWORD(v15);
      v11 = (float)((float)((float)v14 * 0.015625) * v15) / 100.0;
      goto LABEL_14;
    }
    if (v10 == 1)
      goto LABEL_250;
  }
LABEL_17:
  v12 = v13 / 64;
LABEL_18:
  v17 = v9[220];
  if (!v9[220])
  {
    v19 = 0;
    goto LABEL_33;
  }
  if (v17 == 4)
  {
    v18 = *((float *)v9 + 54);
    if (!v9[222])
      v18 = (float)SLODWORD(v18);
LABEL_29:
    v23 = v18 * 64.0;
    if (v23 >= 2147483650.0)
    {
      v20 = 0x7FFFFFFF;
    }
    else if (v23 <= -2147483650.0)
    {
      v20 = 0x80000000;
    }
    else
    {
      v20 = (int)v23;
    }
    goto LABEL_32;
  }
  v20 = 0;
  v21 = *(_DWORD *)(v7 + 12);
  if (v9[220] > 8u)
  {
    v102 = v7;
    if (v17 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v9 + 216), (float)v21 * 0.015625);
      v104 = v103 * 64.0;
      if (v104 >= 2147483650.0)
      {
        v20 = 0x7FFFFFFF;
      }
      else if (v104 <= -2147483650.0)
      {
        v20 = 0x80000000;
      }
      else
      {
        v20 = (int)v104;
      }
      v7 = v102;
      goto LABEL_32;
    }
    if (v17 == 9)
LABEL_252:
      v20 = *(_DWORD *)(v7 + 12);
  }
  else
  {
    if (v17 == 3)
    {
      v22 = *((float *)v9 + 54);
      if (!v9[222])
        v22 = (float)SLODWORD(v22);
      v18 = (float)((float)((float)v21 * 0.015625) * v22) / 100.0;
      goto LABEL_29;
    }
    if (v17 == 1)
      goto LABEL_252;
  }
LABEL_32:
  v19 = v20 / 64;
LABEL_33:
  if (!(v12 | v19))
  {
    v24 = 0;
    v25 = 0;
    v133 = 0.0;
    v134 = 4;
    v135 = 0;
    v136 = 0.0;
    v26 = 0.0;
LABEL_44:
    v28 = 0.0;
    goto LABEL_45;
  }
  if (!v12)
  {
    v133 = 0.0;
    v134 = 4;
    v135 = 0;
    v30 = a4 + (v19 << 6);
    if (__OFADD__(a4, v19 << 6))
      v30 = ((v19 << 6) >> 31) + 0x7FFFFFFF;
    v24 = 0;
    v26 = (float)v30 * 0.015625;
    v136 = v26;
    v25 = 1;
    goto LABEL_44;
  }
  v27 = a4 + (v12 << 6);
  if (__OFADD__(a4, v12 << 6))
    v27 = ((v12 << 6) >> 31) + 0x7FFFFFFF;
  v28 = (float)v27 * 0.015625;
  v133 = v28;
  v134 = 4;
  v135 = 1;
  v29 = a4 + (v19 << 6);
  if (__OFADD__(a4, v19 << 6))
    v29 = ((v19 << 6) >> 31) + 0x7FFFFFFF;
  v26 = (float)v29 * 0.015625;
  v136 = v26;
  v24 = 1;
  v25 = 1;
LABEL_45:
  v137 = 4;
  v138 = v25;
  v31 = *(unsigned __int8 **)(*(_QWORD *)(a2[2] + 8) + 24);
  v32 = v31[228];
  if (!v31[228])
  {
    v34 = 0;
    goto LABEL_60;
  }
  if (v32 == 4)
  {
    v33 = *((float *)v31 + 56);
    if (!v31[230])
      v33 = (float)SLODWORD(v33);
LABEL_56:
    v38 = v33 * 64.0;
    if (v38 >= 2147483650.0)
    {
      v35 = 0x7FFFFFFF;
    }
    else if (v38 <= -2147483650.0)
    {
      v35 = 0x80000000;
    }
    else
    {
      v35 = (int)v38;
    }
    goto LABEL_59;
  }
  v35 = 0;
  v36 = *(_DWORD *)(v7 + 8);
  if (v31[228] > 8u)
  {
    v105 = v24;
    v106 = v7;
    if (v32 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v31 + 224), (float)v36 * 0.015625);
      v108 = v107 * 64.0;
      if (v108 >= 2147483650.0)
      {
        v35 = 0x7FFFFFFF;
        v7 = v106;
        v24 = v105;
      }
      else
      {
        v24 = v105;
        if (v108 <= -2147483650.0)
          v35 = 0x80000000;
        else
          v35 = (int)v108;
        v7 = v106;
      }
      goto LABEL_59;
    }
    if (v32 == 9)
LABEL_254:
      v35 = *(_DWORD *)(v7 + 8);
  }
  else
  {
    if (v32 == 3)
    {
      v37 = *((float *)v31 + 56);
      if (!v31[230])
        v37 = (float)SLODWORD(v37);
      v33 = (float)((float)((float)v36 * 0.015625) * v37) / 100.0;
      goto LABEL_56;
    }
    if (v32 == 1)
      goto LABEL_254;
  }
LABEL_59:
  v34 = v35 / 64;
LABEL_60:
  v39 = v31[236];
  if (!v31[236])
  {
    v41 = 0;
    goto LABEL_75;
  }
  if (v39 == 4)
  {
    v40 = *((float *)v31 + 58);
    if (!v31[238])
      v40 = (float)SLODWORD(v40);
LABEL_71:
    v45 = v40 * 64.0;
    if (v45 >= 2147483650.0)
    {
      v42 = 0x7FFFFFFF;
    }
    else if (v45 <= -2147483650.0)
    {
      v42 = 0x80000000;
    }
    else
    {
      v42 = (int)v45;
    }
    goto LABEL_74;
  }
  v42 = 0;
  v43 = *(_DWORD *)(v7 + 12);
  if (v31[236] > 8u)
  {
    v109 = v24;
    v110 = v7;
    if (v39 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v31 + 232), (float)v43 * 0.015625);
      v112 = v111 * 64.0;
      if (v112 >= 2147483650.0)
      {
        v42 = 0x7FFFFFFF;
        v7 = v110;
        v24 = v109;
      }
      else
      {
        v24 = v109;
        if (v112 <= -2147483650.0)
          v42 = 0x80000000;
        else
          v42 = (int)v112;
        v7 = v110;
      }
      goto LABEL_74;
    }
    if (v39 == 9)
LABEL_256:
      v42 = *(_DWORD *)(v7 + 12);
  }
  else
  {
    if (v39 == 3)
    {
      v44 = *((float *)v31 + 58);
      if (!v31[238])
        v44 = (float)SLODWORD(v44);
      v40 = (float)((float)((float)v43 * 0.015625) * v44) / 100.0;
      goto LABEL_71;
    }
    if (v39 == 1)
      goto LABEL_256;
  }
LABEL_74:
  v41 = v42 / 64;
LABEL_75:
  if (!(v34 | v41))
  {
    v46 = 0;
    v47 = 0;
    v139 = 0.0;
    v140 = 4;
    v141 = 0;
    v142 = 0.0;
    v48 = 0.0;
LABEL_86:
    v50 = 0.0;
    goto LABEL_87;
  }
  if (!v34)
  {
    v139 = 0.0;
    v140 = 4;
    v141 = 0;
    v52 = a4 + (v41 << 6);
    if (__OFADD__(a4, v41 << 6))
      v52 = ((v41 << 6) >> 31) + 0x7FFFFFFF;
    v46 = 0;
    v48 = (float)v52 * 0.015625;
    v142 = v48;
    v47 = 1;
    goto LABEL_86;
  }
  v49 = a4 + (v34 << 6);
  if (__OFADD__(a4, v34 << 6))
    v49 = ((v34 << 6) >> 31) + 0x7FFFFFFF;
  v50 = (float)v49 * 0.015625;
  v139 = v50;
  v140 = 4;
  v141 = 1;
  v51 = a4 + (v41 << 6);
  if (__OFADD__(a4, v41 << 6))
    v51 = ((v41 << 6) >> 31) + 0x7FFFFFFF;
  v48 = (float)v51 * 0.015625;
  v142 = v48;
  v46 = 1;
  v47 = 1;
LABEL_87:
  v143 = 4;
  v144 = v47;
  v53 = *(unsigned __int8 **)(*(_QWORD *)(a2[2] + 8) + 24);
  v54 = v53[244];
  if (!v53[244])
  {
    v56 = 0;
    goto LABEL_102;
  }
  if (v54 == 4)
  {
    v55 = *((float *)v53 + 60);
    if (!v53[246])
      v55 = (float)SLODWORD(v55);
LABEL_98:
    v60 = v55 * 64.0;
    if (v60 >= 2147483650.0)
    {
      v57 = 0x7FFFFFFF;
    }
    else if (v60 <= -2147483650.0)
    {
      v57 = 0x80000000;
    }
    else
    {
      v57 = (int)v60;
    }
    goto LABEL_101;
  }
  v57 = 0;
  v58 = *(_DWORD *)(v7 + 8);
  if (v53[244] > 8u)
  {
    v113 = v46;
    v114 = v24;
    v115 = v7;
    if (v54 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v53 + 240), (float)v58 * 0.015625);
      v117 = v116 * 64.0;
      if (v117 >= 2147483650.0)
      {
        v57 = 0x7FFFFFFF;
        v7 = v115;
        v24 = v114;
        v46 = v113;
      }
      else
      {
        v24 = v114;
        v46 = v113;
        if (v117 <= -2147483650.0)
          v57 = 0x80000000;
        else
          v57 = (int)v117;
        v7 = v115;
      }
      goto LABEL_101;
    }
    if (v54 == 9)
LABEL_258:
      v57 = *(_DWORD *)(v7 + 8);
  }
  else
  {
    if (v54 == 3)
    {
      v59 = *((float *)v53 + 60);
      if (!v53[246])
        v59 = (float)SLODWORD(v59);
      v55 = (float)((float)((float)v58 * 0.015625) * v59) / 100.0;
      goto LABEL_98;
    }
    if (v54 == 1)
      goto LABEL_258;
  }
LABEL_101:
  v56 = v57 / 64;
LABEL_102:
  v61 = v53[252];
  if (!v53[252])
  {
    v63 = 0;
    goto LABEL_117;
  }
  if (v61 == 4)
  {
    v62 = *((float *)v53 + 62);
    if (!v53[254])
      v62 = (float)SLODWORD(v62);
LABEL_113:
    v67 = v62 * 64.0;
    if (v67 >= 2147483650.0)
    {
      v64 = 0x7FFFFFFF;
    }
    else if (v67 <= -2147483650.0)
    {
      v64 = 0x80000000;
    }
    else
    {
      v64 = (int)v67;
    }
    goto LABEL_116;
  }
  v64 = 0;
  v65 = *(_DWORD *)(v7 + 12);
  if (v53[252] > 8u)
  {
    v118 = v46;
    v119 = v24;
    v129 = v7;
    if (v61 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v53 + 248), (float)v65 * 0.015625);
      v121 = v120 * 64.0;
      if (v121 >= 2147483650.0)
      {
        v64 = 0x7FFFFFFF;
        v7 = v129;
        v24 = v119;
        v46 = v118;
      }
      else
      {
        v24 = v119;
        v46 = v118;
        if (v121 <= -2147483650.0)
          v64 = 0x80000000;
        else
          v64 = (int)v121;
        v7 = v129;
      }
      goto LABEL_116;
    }
    if (v61 == 9)
LABEL_260:
      v64 = *(_DWORD *)(v7 + 12);
  }
  else
  {
    if (v61 == 3)
    {
      v66 = *((float *)v53 + 62);
      if (!v53[254])
        v66 = (float)SLODWORD(v66);
      v62 = (float)((float)((float)v65 * 0.015625) * v66) / 100.0;
      goto LABEL_113;
    }
    if (v61 == 1)
      goto LABEL_260;
  }
LABEL_116:
  v63 = v64 / 64;
LABEL_117:
  if (!(v56 | v63))
  {
    v68 = 0;
    v69 = 0;
    v145 = 0.0;
    v146 = 4;
    v147 = 0;
    v148 = 0.0;
    v70 = 0.0;
LABEL_128:
    v72 = 0.0;
    goto LABEL_129;
  }
  if (!v56)
  {
    v145 = 0.0;
    v146 = 4;
    v147 = 0;
    v74 = a4 + (v63 << 6);
    if (__OFADD__(a4, v63 << 6))
      v74 = ((v63 << 6) >> 31) + 0x7FFFFFFF;
    v68 = 0;
    v70 = (float)v74 * 0.015625;
    v148 = v70;
    v69 = 1;
    goto LABEL_128;
  }
  v71 = a4 + (v56 << 6);
  if (__OFADD__(a4, v56 << 6))
    v71 = ((v56 << 6) >> 31) + 0x7FFFFFFF;
  v72 = (float)v71 * 0.015625;
  v145 = v72;
  v146 = 4;
  v147 = 1;
  v73 = a4 + (v63 << 6);
  if (__OFADD__(a4, v63 << 6))
    v73 = ((v63 << 6) >> 31) + 0x7FFFFFFF;
  v70 = (float)v73 * 0.015625;
  v148 = v70;
  v68 = 1;
  v69 = 1;
LABEL_129:
  v149 = 4;
  v150 = v69;
  v75 = *(unsigned __int8 **)(*(_QWORD *)(a2[2] + 8) + 24);
  v76 = v75[260];
  if (!v75[260])
  {
    v78 = a1;
    v79 = a3;
    v80 = 0;
    goto LABEL_144;
  }
  if (v76 == 4)
  {
    v77 = *((float *)v75 + 64);
    if (!v75[262])
      v77 = (float)SLODWORD(v77);
LABEL_140:
    v84 = v77 * 64.0;
    v78 = a1;
    if (v84 >= 2147483650.0)
    {
      v79 = a3;
      v81 = 0x7FFFFFFF;
    }
    else
    {
      v79 = a3;
      if (v84 <= -2147483650.0)
        v81 = 0x80000000;
      else
        v81 = (int)v84;
    }
    goto LABEL_143;
  }
  v81 = 0;
  v82 = *(_DWORD *)(v7 + 8);
  if (v75[260] > 8u)
  {
    v125 = v46;
    v127 = v24;
    v130 = v7;
    if (v76 == 11)
    {
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v75 + 256), (float)v82 * 0.015625);
      v123 = v122 * 64.0;
      v78 = a1;
      if (v123 >= 2147483650.0)
      {
        v79 = a3;
        v81 = 0x7FFFFFFF;
        v7 = v130;
        v46 = v125;
        v24 = v127;
      }
      else
      {
        v46 = v125;
        v24 = v127;
        v79 = a3;
        if (v123 <= -2147483650.0)
          v81 = 0x80000000;
        else
          v81 = (int)v123;
        v7 = v130;
      }
      goto LABEL_143;
    }
    v78 = a1;
    v79 = a3;
    if (v76 == 9)
LABEL_262:
      v81 = *(_DWORD *)(v7 + 8);
  }
  else
  {
    if (v76 == 3)
    {
      v83 = *((float *)v75 + 64);
      if (!v75[262])
        v83 = (float)SLODWORD(v83);
      v77 = (float)((float)((float)v82 * 0.015625) * v83) / 100.0;
      goto LABEL_140;
    }
    v78 = a1;
    v79 = a3;
    if (v76 == 1)
      goto LABEL_262;
  }
LABEL_143:
  v80 = v81 / 64;
LABEL_144:
  v85 = v75[268];
  if (!v75[268])
  {
    v87 = 0;
    goto LABEL_159;
  }
  if (v85 == 4)
  {
    v86 = *((float *)v75 + 66);
    if (!v75[270])
      v86 = (float)SLODWORD(v86);
    goto LABEL_155;
  }
  v88 = 0;
  v89 = *(_DWORD *)(v7 + 12);
  if (v75[268] <= 8u)
  {
    if (v85 == 3)
    {
      v90 = *((float *)v75 + 66);
      if (!v75[270])
        v90 = (float)SLODWORD(v90);
      v86 = (float)((float)((float)v89 * 0.015625) * v90) / 100.0;
LABEL_155:
      v91 = v86 * 64.0;
      if (v91 >= 2147483650.0)
      {
        v88 = 0x7FFFFFFF;
        goto LABEL_158;
      }
      if (v91 > -2147483650.0)
        goto LABEL_157;
LABEL_216:
      v88 = 0x80000000;
      goto LABEL_158;
    }
    if (v85 != 1)
      goto LABEL_158;
LABEL_264:
    v88 = *(_DWORD *)(v7 + 12);
    goto LABEL_158;
  }
  v126 = v46;
  v128 = v24;
  if (v85 != 11)
  {
    if (v85 != 9)
      goto LABEL_158;
    goto LABEL_264;
  }
  WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v75 + 264), (float)v89 * 0.015625);
  v91 = v124 * 64.0;
  if (v91 >= 2147483650.0)
  {
    v88 = 0x7FFFFFFF;
    v46 = v126;
    v24 = v128;
    goto LABEL_158;
  }
  v46 = v126;
  v24 = v128;
  if (v91 <= -2147483650.0)
    goto LABEL_216;
LABEL_157:
  v88 = (int)v91;
LABEL_158:
  v87 = v88 / 64;
LABEL_159:
  v92 = v80 | v87;
  if (v80 | v87)
  {
    if (v80)
    {
      v96 = a4 + (v80 << 6);
      if (__OFADD__(a4, v80 << 6))
        v96 = ((v80 << 6) >> 31) + 0x7FFFFFFF;
      a3 = v79;
      v95 = (float)v96 * 0.015625;
      v151 = v95;
      v152[0] = 4;
      LOBYTE(v152[1]) = 1;
      v97 = a4 + (v87 << 6);
      a1 = v78;
      if (__OFADD__(a4, v87 << 6))
        v97 = ((v87 << 6) >> 31) + 0x7FFFFFFF;
      v94 = (float)v97 * 0.015625;
      v153 = v94;
      v93 = 1;
      v92 = 1;
      goto LABEL_171;
    }
    v151 = 0.0;
    *(_WORD *)((char *)v152 + 1) = 0;
    v98 = a4 + (v87 << 6);
    if (__OFADD__(a4, v87 << 6))
      v98 = ((v87 << 6) >> 31) + 0x7FFFFFFF;
    a3 = v79;
    v93 = 0;
    v94 = (float)v98 * 0.015625;
    v153 = v94;
    v92 = 1;
    v95 = 0.0;
  }
  else
  {
    v93 = 0;
    v151 = 0.0;
    *(_WORD *)((char *)v152 + 1) = 0;
    v94 = 0.0;
    v95 = 0.0;
    v153 = 0.0;
    a3 = v79;
  }
  a1 = v78;
LABEL_171:
  v155 = 0;
  v156 = v92;
  v158 = 4;
  v159 = v24;
  v157 = v28;
  LOBYTE(v134) = 0;
  v161 = 4;
  v162 = v25;
  v160 = v26;
  LOBYTE(v137) = 0;
  v164 = 4;
  v165 = v46;
  v163 = v50;
  LOBYTE(v140) = 0;
  v167 = 4;
  v168 = v47;
  v166 = v48;
  LOBYTE(v143) = 0;
  v170 = 4;
  v171 = v68;
  v169 = v72;
  LOBYTE(v146) = 0;
  v173 = 4;
  v174 = v69;
  v172 = v70;
  LOBYTE(v149) = 0;
  v176 = 4;
  v177 = v93;
  v175 = v95;
  LOBYTE(v152[0]) = 0;
  v179 = 4;
  v180 = v92;
  v178 = v94;
  v154 = 0;
  v181 = 1;
  WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)&v133);
  v131[0] = 0;
  v132 = 0;
  if (v181)
  {
    WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v131, (uint64_t)&v157);
    v132 = 1;
  }
LABEL_173:
  WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::BorderDataRadii *)v131, a3, 0, 0, 0, 0, *(unsigned __int8 *)a2[3], *(unsigned __int8 *)a2[4], a1, *(_BYTE *)a2[5]);
  if (v132)
    WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v131);
  if (v181)
    WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)&v157);
}

WTF *WebCore::BorderPainter::paintOutline(WebCore::BorderPainter *this, _DWORD *a2, __n128 **a3, __n128 a4)
{
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  WTF *result;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned __int32 v43;
  uint64_t v44;
  WTF *v45;
  __n128 *v46;
  void *v47;
  uint64_t v48;
  __n128 *v49;
  uint64_t v50;
  __n128 v51;
  int v52;
  unsigned __int32 v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  __n128 v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  void *v69;
  float v70;
  float v71;
  float v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  __n128 v82;
  WTF *v83;
  uint64_t v84;
  __n128 v85;
  int v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v7 = *((_DWORD *)a3 + 3);
  if (v7 == 1)
  {
    v85 = **a3;
    v8 = a2[1];
    v9 = v85.n128_u32[0] + *a2;
    if (__OFADD__(v85.n128_u32[0], *a2))
      v9 = (v85.n128_u32[0] >> 31) + 0x7FFFFFFF;
    v10 = __OFADD__(v85.n128_u32[1], v8);
    v11 = v85.n128_u32[1] + v8;
    if (v10)
      v11 = (v85.n128_u32[1] >> 31) + 0x7FFFFFFF;
    v85.n128_u64[0] = __PAIR64__(v11, v9);
    return (WTF *)WebCore::BorderPainter::paintOutline((uint64_t)this, (const WebCore::LayoutRect *)&v85);
  }
  v13 = *(_QWORD *)this;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 88) + 16);
  v15 = *(float *)(v14 + 56);
  if ((*(_BYTE *)(v14 + 52) & 0x10) != 0)
  {
    if ((*(_BYTE *)(v14 + 52) & 0xF) != 0)
    {
      v70 = *(float *)(v14 + 48);
      v71 = v70 + -3.0;
      if (v70 >= 3.0)
      {
        v16 = *(float *)(v14 + 48);
      }
      else
      {
        v71 = 0.0;
        v16 = 3.0;
      }
      if (v71 >= 0.0)
        v72 = v71;
      else
        v72 = 0.0;
      v15 = v15 + v72;
    }
    else
    {
      v16 = 0.0;
      v15 = v15 + 0.0;
    }
  }
  else
  {
    v16 = 0.0;
    if ((*(_BYTE *)(v14 + 52) & 0xF) != 0)
      v16 = *(float *)(v14 + 48);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40) + 8) + 528);
  v18 = 1.0;
  if (v17)
  {
    v19 = *(_QWORD *)(v17 + 8);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 24);
      if (v20)
      {
        v21 = *(float **)(v20 + 8);
        if (v21)
        {
          v22 = (*(_DWORD *)v21)++;
          v18 = v21[91];
          if (v22)
          {
            *(_DWORD *)v21 = v22;
          }
          else
          {
            WebCore::Page::~Page((uint64_t)v21);
            WTF::fastFree(v68, v69);
            v7 = *((_DWORD *)a3 + 3);
          }
        }
      }
    }
  }
  v83 = 0;
  v84 = 0;
  if (v7)
  {
    v23 = 0;
    v24 = 0;
    v25 = (float)(v15 + (float)(v16 * 0.5)) * 64.0;
    v26 = (int)fmax(v25, -2147483650.0);
    if (v25 < 2147483650.0)
      v27 = v26;
    else
      v27 = 0x7FFFFFFF;
    do
    {
      v85 = (*a3)[v23];
      v28 = a2[1];
      v29 = v85.n128_u32[0] + *a2;
      if (__OFADD__(v85.n128_u32[0], *a2))
        v29 = (v85.n128_u32[0] >> 31) + 0x7FFFFFFF;
      v10 = __OFADD__(v85.n128_u32[1], v28);
      v30 = v85.n128_u32[1] + v28;
      if (v10)
        v30 = (v85.n128_u32[1] >> 31) + 0x7FFFFFFF;
      v10 = __OFSUB__(v29, v27);
      v31 = v29 - v27;
      v32 = (v29 >> 31) + 0x7FFFFFFF;
      if (!v10)
        v32 = v31;
      v33 = (v85.n128_u32[2] >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(v85.n128_u32[2], v27))
        v33 = v85.n128_u32[2] + v27;
      v10 = __OFADD__(v33, v27);
      v34 = v33 + v27;
      v35 = (v33 >> 31) + 0x7FFFFFFF;
      if (!v10)
        v35 = v34;
      v10 = __OFSUB__(v30, v27);
      v36 = v30 - v27;
      v37 = (v30 >> 31) + 0x7FFFFFFF;
      if (!v10)
        v37 = v36;
      v85.n128_u64[0] = __PAIR64__(v37, v32);
      v38 = v85.n128_u32[3] + v27;
      if (__OFADD__(v85.n128_u32[3], v27))
        v38 = (v85.n128_u32[3] >> 31) + 0x7FFFFFFF;
      v10 = __OFADD__(v38, v27);
      v39 = v38 + v27;
      v40 = (v38 >> 31) + 0x7FFFFFFF;
      if (!v10)
        v40 = v39;
      v85.n128_u64[1] = __PAIR64__(v40, v35);
      v82.n128_u32[0] = WebCore::snapRectToDevicePixels((int *)&v85, v18);
      *(unint64_t *)((char *)v82.n128_u64 + 4) = __PAIR64__(v42, v41);
      v82.n128_u32[3] = v43;
      v44 = HIDWORD(v84);
      if (HIDWORD(v84) == (_DWORD)v84)
      {
        v46 = (__n128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v83, HIDWORD(v84) + 1, (unint64_t)&v82);
        v44 = HIDWORD(v84);
        v45 = v83;
        a4 = *v46;
      }
      else
      {
        v45 = v83;
        a4 = v82;
      }
      *((__n128 *)v45 + v44) = a4;
      ++HIDWORD(v84);
      ++v24;
      ++v23;
    }
    while (v24 < *((unsigned int *)a3 + 3));
  }
  a4.n128_f32[0] = v15;
  WebCore::PathUtilities::pathWithShrinkWrappedRectsForOutline((uint64_t)&v83, *(_QWORD *)(*(_QWORD *)(v13 + 88) + 24) + 104, (*(_DWORD *)(v13 + 120) & 0x4000000) != 0, (unsigned __int16)*(_DWORD *)(v13 + 124) >> 13, (uint64_t)&v85, a4, v18);
  if (v86 != 2)
  {
    if (!v86)
      goto LABEL_51;
LABEL_61:
    v57 = *(_QWORD *)(*((_QWORD *)this + 1) + 80);
    WebCore::RenderStyle::visitedDependentColorWithColorFilter(v13 + 80, 186, 0, v82.n128_u64);
    if ((v82.n128_u64[0] & 0x8000000000000) != 0)
    {
      v58.n128_u32[0] = *(_DWORD *)((v82.n128_u64[0] & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v58.n128_f32[0] == 1.0)
        goto LABEL_63;
    }
    else
    {
      if (v82.n128_u8[0] == 0xFF)
      {
LABEL_63:
        WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v57, (const WebCore::Color *)&v82);
        if (*(float *)(v57 + 188) != v16)
        {
          *(float *)(v57 + 188) = v16;
          *(_DWORD *)(v57 + 184) |= 8u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 88))(v57, v57 + 8);
        if (*(_BYTE *)(v57 + 193) != 1)
        {
          *(_BYTE *)(v57 + 193) = 1;
          *(_DWORD *)(v57 + 184) |= 0x10u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 88))(v57, v57 + 8);
        (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v57 + 184))(v57, &v85);
LABEL_86:
        if ((v82.n128_u64[0] & 0x8000000000000) != 0)
        {
          v73 = (unsigned int *)(v82.n128_u64[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (!v75)
          {
            atomic_store(1u, v73);
            WTF::fastFree((WTF *)v73, v47);
          }
        }
        goto LABEL_87;
      }
      v58.n128_f32[0] = (float)v82.n128_u8[0] / 255.0;
    }
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v57 + 592))(v57, v58);
    v60 = v82.n128_u64[0];
    if ((v82.n128_u64[0] & 0x8000000000000) != 0)
    {
      v63 = *(_DWORD *)((v82.n128_u64[0] & 0xFFFFFFFFFFFFLL) + 0xC);
      if (HIBYTE(v82.n128_u64[0]) >= 0x14)
        v64 = 0x110C000000000000;
      else
        v64 = v82.n128_u64[0] & 0xFF00000000000000 | 0xC000000000000;
      v65 = v82.n128_u64[0] & 0x1000000000000;
      v66 = *(_QWORD *)((v82.n128_u64[0] & 0xFFFFFFFFFFFFLL) + 4);
      v67 = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)v67 = 1;
      *(_QWORD *)(v67 + 4) = v66;
      *(_DWORD *)(v67 + 12) = v63;
      *(_DWORD *)(v67 + 16) = 1065353216;
      v62 = v64 | v65 | v67;
      v60 = v82.n128_u64[0];
    }
    else
    {
      v61 = llroundf(255.0);
      if (v61 >= 255)
        v61 = 255;
      v62 = v61 & ~(v61 >> 63) | v82.n128_u64[0] & 0x10000FFFFFF00 | 0x1104000000000000;
    }
    if ((v60 & 0x8000000000000) != 0)
    {
      if ((v62 & 0x8000000000000) != 0)
      {
        v79 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFLL);
        if (*(float *)((v60 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 4)
          && *(float *)((v60 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 8)
          && *(float *)((v60 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 0xC)
          && *(float *)((v60 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v62 & 0xFFFFFFFFFFFFLL) + 0x10)
          && HIBYTE(v60) == HIBYTE(v62)
          && BYTE6(v60) == BYTE6(v62))
        {
          do
          {
            v80 = __ldaxr(v79);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, v79));
          if (!v81)
          {
            atomic_store(1u, v79);
            WTF::fastFree((WTF *)v79, v59);
          }
          goto LABEL_81;
        }
      }
      v76 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        atomic_store(1u, v76);
        WTF::fastFree((WTF *)v76, v59);
      }
    }
    else if (v60 == v62 && (v62 & 0x8000000000000) == 0)
    {
      goto LABEL_81;
    }
    v82.n128_u64[0] = v62;
LABEL_81:
    WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v57, (const WebCore::Color *)&v82);
    if (*(float *)(v57 + 188) != v16)
    {
      *(float *)(v57 + 188) = v16;
      *(_DWORD *)(v57 + 184) |= 8u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 88))(v57, v57 + 8);
    if (*(_BYTE *)(v57 + 193) != 1)
    {
      *(_BYTE *)(v57 + 193) = 1;
      *(_DWORD *)(v57 + 184) |= 0x10u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 88))(v57, v57 + 8);
    (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v57 + 184))(v57, &v85);
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 608))(v57);
    goto LABEL_86;
  }
  if (!v85.n128_u64[1]
    || ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v85.n128_u64[1] + 200))(v85.n128_u64[1]) & 1) == 0)
  {
    goto LABEL_61;
  }
LABEL_51:
  v48 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v48)
  {
    v49 = *a3;
    v50 = 16 * v48;
    do
    {
      v51 = *v49++;
      v82 = v51;
      v52 = a2[1];
      v53 = v51.n128_u32[1];
      v54 = v51.n128_u32[0] + *a2;
      v55 = (v51.n128_u32[0] >> 31) + 0x7FFFFFFF;
      if (__OFADD__(v51.n128_u32[0], *a2))
        v54 = v55;
      v10 = __OFADD__(v53, v52);
      v56 = v53 + v52;
      if (v10)
        v56 = (v53 >> 31) + 0x7FFFFFFF;
      v82.n128_u64[0] = __PAIR64__(v56, v54);
      WebCore::BorderPainter::paintOutline((uint64_t)this, (const WebCore::LayoutRect *)&v82);
      v50 -= 16;
    }
    while (v50);
  }
LABEL_87:
  if (v86 != -1)
    ((void (*)(__n128 *, __int8 *))off_1E341E1B0[v86])(&v82, &v85.n128_i8[8]);
  result = v83;
  if (v83)
  {
    v83 = 0;
    LODWORD(v84) = 0;
    return (WTF *)WTF::fastFree(result, v47);
  }
  return result;
}

unint64_t WebCore::calculateSideRect(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  float v5;
  int v6;
  double v7;
  uint64_t v8;
  signed int v9;
  double v10;
  int v11;

  v4 = HIDWORD(a1);
  if (*(_BYTE *)(a3 + 24 * a4 + 22))
    v5 = *(float *)(a3 + 24 * a4 + 12);
  else
    v5 = 0.0;
  switch(a4)
  {
    case 1u:
      v9 = a1 + a2;
      if (__OFADD__((_DWORD)a1, (_DWORD)a2))
        v9 = (a1 >> 31) + 0x7FFFFFFF;
      v10 = (float)((float)((float)v9 * 0.015625) - v5) * 64.0;
      if (v10 >= 2147483650.0)
      {
        v11 = 0x7FFFFFFF;
      }
      else if (v10 <= -2147483650.0)
      {
        v11 = 0x80000000;
      }
      else
      {
        v11 = (int)v10;
      }
      LODWORD(a1) = v11;
      break;
    case 2u:
      v6 = HIDWORD(a1) + HIDWORD(a2);
      if (__OFADD__(HIDWORD(a1), HIDWORD(a2)))
        v6 = (HIDWORD(a1) >> 31) + 0x7FFFFFFF;
      v7 = (float)((float)((float)v6 * 0.015625) - v5) * 64.0;
      if (v7 >= 2147483650.0)
      {
        v8 = 0x7FFFFFFFLL;
      }
      else if (v7 <= -2147483650.0)
      {
        v8 = 0x80000000;
      }
      else
      {
        v8 = (int)v7;
      }
      v4 = v8;
      break;
    default:
      return a1 | (v4 << 32);
  }
  return a1 | (v4 << 32);
}

void WebCore::BorderPainter::paintTranslucentBorderSides(uint64_t a1, int32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, int a8, __n128 a9, char a10, char a11, char a12, char a13)
{
  int v13;
  uint64_t v16;
  int v17;
  char *v18;
  unsigned int v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v26;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  _BYTE v57[64];
  char v58;
  unsigned __int8 v59[16];

  v13 = a6;
  if (!a6)
    return;
  v16 = llroundf(255.0);
  if (v16 >= 255)
    v16 = 255;
  v51 = v16 & ~(v16 >> 63) | 0x1104000000000000;
  do
  {
    v17 = 0;
    *(_QWORD *)v59 = 0;
    v18 = &WebCore::BorderPainter::paintTranslucentBorderSides(WebCore::RoundedRect const&,WebCore::RoundedRect const&,WebCore::IntPoint const&,WebCore::RectEdges<WebCore::BorderEdge> const&,WTF::OptionSet<WebCore::BoxSideFlag>,std::optional<WebCore::BorderDataRadii>,WebCore::BackgroundBleedAvoidance,BOOL,BOOL,BOOL,BOOL)::paintOrderSides;
    do
    {
      v19 = *v18;
      v20 = (1 << v19);
      if ((v13 & v20) == 0)
        goto LABEL_25;
      if (v19 >= 4)
      {
        __break(1u);
        return;
      }
      v21 = (unint64_t *)(a5 + 24 * *v18);
      if (!v17)
      {
        v26 = *v21;
        if ((*(_QWORD *)v59 & 0x8000000000000) != 0)
        {
          if ((v26 & 0x8000000000000) == 0
            || *(float *)((*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 4)
            || *(float *)((*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 8)
            || *(float *)((*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 0xC)
            || *(float *)((*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 0x10)
            || HIBYTE(*(_QWORD *)v59) != HIBYTE(v26)
            || v59[6] != BYTE6(v26))
          {
            v31 = (unsigned int *)(*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL);
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, a2);
            }
LABEL_23:
            *(_QWORD *)v59 = *v21;
            if ((*(_QWORD *)v59 & 0x8000000000000) != 0)
            {
              v28 = (unsigned int *)(*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL);
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 + 1, v28));
            }
          }
        }
        else if (*(_QWORD *)v59 != v26 || (v26 & 0x8000000000000) != 0)
        {
          goto LABEL_23;
        }
LABEL_24:
        v17 |= v20;
        goto LABEL_25;
      }
      v22 = *v21;
      if ((*v21 & 0x8000000000000) != 0)
      {
        if ((*(_QWORD *)v59 & 0x8000000000000) == 0
          || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL) + 0x10))
        {
          goto LABEL_25;
        }
        v30 = HIBYTE(v22);
        v24 = (*(_QWORD *)v59 ^ v22) & 0xFE000000000000;
        v23 = (_DWORD)v30 == HIBYTE(*(_QWORD *)v59);
      }
      else
      {
        if ((*(_QWORD *)v59 & 0x8000000000000) != 0)
          goto LABEL_25;
        v23 = (_DWORD)v22 == *(_DWORD *)v59;
        v24 = (*(_QWORD *)v59 ^ v22) & 0xFE000000000000;
      }
      if (v23 && v24 == 0)
        goto LABEL_24;
LABEL_25:
      ++v18;
    }
    while (v18 != (char *)&unk_1969FAAB4);
    if ((v17 & 5) == 0 || (v17 & 0xA) == 0)
      goto LABEL_51;
    if ((*(_QWORD *)v59 & 0x8000000000000) != 0)
    {
      a9.n128_u32[0] = *(_DWORD *)((*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (a9.n128_f32[0] != 1.0)
        goto LABEL_56;
LABEL_51:
      v57[0] = 0;
      v58 = 0;
      if (*(_BYTE *)(a7 + 64))
      {
        WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v57, a7);
        v58 = 1;
      }
      WebCore::BorderPainter::paintBorderSides(a1, a2, a3, a4, a5, v17, (uint64_t)v57, a8, a10, a11, a12, a13, (uint64_t)v59);
      if (v58)
        WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v57);
      goto LABEL_71;
    }
    if (v59[0] == 0xFF)
      goto LABEL_51;
    a9.n128_f32[0] = (float)v59[0] / 255.0;
LABEL_56:
    (*(void (**)(_QWORD, __n128))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 80) + 592))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), a9);
    v35 = *(_QWORD *)v59;
    if ((*(_QWORD *)v59 & 0x8000000000000) != 0)
    {
      v37 = *(_DWORD *)((*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL) + 0xC);
      if (HIBYTE(*(_QWORD *)v59) >= 0x14)
        v38 = 0x110C000000000000;
      else
        v38 = *(_QWORD *)v59 & 0xFF00000000000000 | 0xC000000000000;
      v39 = *(_QWORD *)v59 & 0x1000000000000;
      v40 = *(_QWORD *)((*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL) + 4);
      v41 = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 4) = v40;
      *(_DWORD *)(v41 + 12) = v37;
      *(_DWORD *)(v41 + 16) = 1065353216;
      v36 = v38 | v39 | v41;
      v35 = *(_QWORD *)v59;
    }
    else
    {
      v36 = v51 | *(_QWORD *)v59 & 0x10000FFFFFF00;
    }
    if ((v35 & 0x8000000000000) != 0)
    {
      if ((v36 & 0x8000000000000) != 0
        && (v48 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL),
            *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 4))
        && *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 0x10)
        && HIBYTE(v35) == HIBYTE(v36)
        && BYTE6(v35) == BYTE6(v36))
      {
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          atomic_store(1u, v48);
          WTF::fastFree((WTF *)v48, v34);
        }
      }
      else
      {
        v45 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          atomic_store(1u, v45);
          WTF::fastFree((WTF *)v45, v34);
        }
LABEL_65:
        *(_QWORD *)v59 = v36;
      }
    }
    else if (v35 != v36 || (v36 & 0x8000000000000) != 0)
    {
      goto LABEL_65;
    }
    v57[0] = 0;
    v58 = 0;
    if (*(_BYTE *)(a7 + 64))
    {
      WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v57, a7);
      v58 = 1;
    }
    WebCore::BorderPainter::paintBorderSides(a1, a2, a3, a4, a5, v17, (uint64_t)v57, a8, a10, a11, a12, a13, (uint64_t)v59);
    if (v58)
      WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v57);
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 80) + 608))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80));
LABEL_71:
    if ((*(_QWORD *)v59 & 0x8000000000000) != 0)
    {
      v42 = (unsigned int *)(*(_QWORD *)v59 & 0xFFFFFFFFFFFFLL);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v42);
        WTF::fastFree((WTF *)v42, a2);
      }
    }
    v13 &= v17 ^ 0xFF;
  }
  while (v13);
}

void WebCore::BorderPainter::paintBorderSides(WebCore::RoundedRect const&,WebCore::RoundedRect const&,WebCore::IntPoint const&,WebCore::RectEdges<WebCore::BorderEdge> const&,WTF::OptionSet<WebCore::BoxSideFlag>,std::optional<WebCore::BorderDataRadii>,WebCore::BackgroundBleedAvoidance,BOOL,BOOL,BOOL,BOOL,WebCore::Color const*)::$_0::operator()(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  double v29;
  _DWORD *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  double v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  _DWORD *v41;
  double v42;
  _DWORD *v43;
  int v44;
  double v45;
  unsigned int v46;
  int v47;
  int v48;
  _DWORD *v49;
  int v50;
  int v51;
  BOOL v53;
  int v54;
  uint64_t v56;
  WebCore::Path *v57;
  uint64_t *v58;
  _BOOL4 v59;
  _BOOL4 v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  unsigned __int8 *v65;
  unsigned int v66;
  BOOL v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  char v72;
  unsigned int v73;
  _BOOL4 v74;
  _BOOL4 v75;
  _QWORD *v76;
  float v77;
  float v78;
  int v79;
  void *v80;
  uint64_t *v81;
  int v82;
  int v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  int v109;
  signed int v110;
  signed int v111;
  unsigned int v112;
  int v113;
  float v114;
  double v115;
  double v116;
  int v117;
  float v118;
  double v119;
  unsigned int v120;
  int v121;
  float v122;
  double v123;
  double v124;
  unint64_t v125;
  float v126;
  float v127;
  double v128;
  unsigned int v129;
  int v130;
  float v131;
  double v132;
  double v133;
  int v134;
  float v135;
  double v136;
  unsigned int v137;
  int v138;
  float v139;
  double v140;
  double v141;
  int v142;
  float v143;
  float v144;
  double v145;
  uint64_t *v146;
  char v147;
  int v148;
  uint64_t *v149;
  char v150;
  int v151;
  float32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  void *v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  __int16 v170;
  char v171;
  int v172;
  int v173;
  int v174;
  int v175;
  char *v176;
  float *v177;
  int *v178;
  _DWORD *v179;
  uint64_t v180;
  _BOOL4 v181;
  _BOOL4 v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  unsigned __int8 *v189;
  unsigned int v190;
  _QWORD *v191;
  _BYTE v192[64];
  char v193;
  uint64_t v194;
  float v195;
  float32x4_t v196;
  float v197;
  float v198;
  float v199;
  float32x4_t v200;
  char v201;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a1 + 24 * a2;
  v7 = *(unsigned __int8 *)(v5 + 22);
  v6 = (char *)(v5 + 22);
  if (v7)
  {
    v10 = v4 + 24 * a2;
    v12 = *(float *)(v10 + 12);
    v11 = (float *)(v10 + 12);
    v13 = v12;
    if (v12 != 0.0)
    {
      v14 = v4 + 24 * a2;
      v17 = *(unsigned __int8 *)(v14 + 20);
      v16 = (unsigned __int8 *)(v14 + 20);
      v15 = v17;
      if (v17 >= 2)
      {
        v18 = v4 + 24 * a2;
        v20 = *(unsigned __int8 *)(v18 + 21);
        v19 = (_BYTE *)(v18 + 21);
        if (!v20 && (**(_BYTE **)(a1 + 8) & (1 << a2)) != 0)
        {
          v171 = 1 << a2;
          v191 = *(_QWORD **)(a1 + 48);
          v24 = *(int **)(a1 + 16);
          v26 = *v24;
          v25 = v24[1];
          v28 = v24[2];
          v27 = v24[3];
          v177 = v11;
          v178 = v24;
          v176 = v6;
          switch(a2)
          {
            case 0u:
              v29 = (float)(v13 + (float)*(int *)(*(_QWORD *)(a1 + 24) + 4)) * 64.0;
              if (v29 >= 2147483650.0)
              {
                v27 = 0x7FFFFFFF;
              }
              else if (v29 <= -2147483650.0)
              {
                v27 = 0x80000000;
              }
              else
              {
                v27 = (int)v29;
              }
              v30 = *(_DWORD **)(a1 + 32);
              v31 = v30[4];
              v32 = v30[5];
              v33 = v30[6];
              v34 = v30[7];
              break;
            case 1u:
              v44 = v26 + v28;
              if (__OFADD__(v26, v28))
                v44 = (v26 >> 31) + 0x7FFFFFFF;
              v45 = (float)((float)((float)((float)v44 * 0.015625) - v13) - (float)**(int **)(a1 + 24)) * 64.0;
              if (v45 >= 2147483650.0)
              {
                v46 = 0x7FFFFFFF;
              }
              else if (v45 <= -2147483650.0)
              {
                v46 = 0x80000000;
              }
              else
              {
                v46 = (int)v45;
              }
              v47 = v46 - v26;
              if (__OFSUB__(v46, v26))
                v47 = (v46 >> 31) + 0x7FFFFFFF;
              v39 = __OFSUB__(v28, v47);
              v48 = v28 - v47;
              if (v39)
                v48 = (v28 >> 31) + 0x7FFFFFFF;
              v28 = v48 & ~(v48 >> 31);
              v49 = *(_DWORD **)(a1 + 32);
              v31 = v49[10];
              v32 = v49[11];
              v33 = v49[6];
              v34 = v49[7];
              v26 = v46;
              break;
            case 2u:
              v35 = v25 + v27;
              if (__OFADD__(v25, v27))
                v35 = (v25 >> 31) + 0x7FFFFFFF;
              v36 = (float)((float)((float)((float)v35 * 0.015625) - v13) - (float)*(int *)(*(_QWORD *)(a1 + 24) + 4))
                  * 64.0;
              if (v36 >= 2147483650.0)
              {
                v37 = 0x7FFFFFFF;
              }
              else if (v36 <= -2147483650.0)
              {
                v37 = 0x80000000;
              }
              else
              {
                v37 = (int)v36;
              }
              v38 = v37 - v25;
              if (__OFSUB__(v37, v25))
                v38 = (v37 >> 31) + 0x7FFFFFFF;
              v39 = __OFSUB__(v27, v38);
              v40 = v27 - v38;
              if (v39)
                v40 = (v27 >> 31) + 0x7FFFFFFF;
              v27 = v40 & ~(v40 >> 31);
              v41 = *(_DWORD **)(a1 + 32);
              v31 = v41[8];
              v32 = v41[9];
              v33 = v41[10];
              v34 = v41[11];
              v25 = v37;
              break;
            case 3u:
              v42 = (float)(v13 + (float)**(int **)(a1 + 24)) * 64.0;
              if (v42 >= 2147483650.0)
              {
                v28 = 0x7FFFFFFF;
              }
              else if (v42 <= -2147483650.0)
              {
                v28 = 0x80000000;
              }
              else
              {
                v28 = (int)v42;
              }
              v43 = *(_DWORD **)(a1 + 32);
              v31 = v43[8];
              v32 = v43[9];
              v33 = v43[4];
              v34 = v43[5];
              break;
            default:
              v34 = 0;
              v33 = 0;
              v31 = 0;
              v32 = 0;
              break;
          }
          v186 = v28;
          v187 = v27;
          v184 = v26;
          v185 = v25;
          if (**(_BYTE **)(a1 + 40))
          {
            v50 = 1;
            v53 = v15 > 9;
            v51 = (1 << v15) & 0x228;
            if (v53 || v51 == 0)
            {
              v53 = v31 <= 0 || v32 <= 0;
              v54 = !v53;
              if (v33 <= 0 || v34 <= 0)
                v50 = v54;
              else
                v50 = 1;
            }
          }
          else
          {
            v50 = 0;
          }
          v179 = *(_DWORD **)(a1 + 32);
          v56 = *(_QWORD *)(a1 + 56);
          v192[0] = 0;
          v193 = 0;
          if (*(_BYTE *)(v56 + 64))
          {
            WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v192, v56);
            v193 = 1;
          }
          v188 = a4;
          v189 = v16;
          if (v50)
            v57 = *(WebCore::Path **)(a1 + 64);
          else
            v57 = 0;
          v174 = **(unsigned __int8 **)(a1 + 80);
          v175 = **(_DWORD **)(a1 + 72);
          v183 = **(unsigned __int8 **)(a1 + 96);
          v172 = **(unsigned __int8 **)(a1 + 104);
          v173 = **(unsigned __int8 **)(a1 + 88);
          v58 = **(uint64_t ***)(a1 + 112);
          v190 = a3;
          v181 = WebCore::joinRequiresMitre(a2, a3, v4, v183 == 0);
          v182 = WebCore::joinRequiresMitre(a2, v188, v4, v183 == 0);
          v59 = WebCore::colorsMatchAtCorner(a2, a3, v4);
          v60 = WebCore::colorsMatchAtCorner(a2, v188, v4);
          if (v58)
            v61 = v58;
          else
            v61 = (uint64_t *)(v4 + 24 * a2);
          v62 = v191;
          v63 = *(_QWORD *)(v191[1] + 80);
          v180 = v63;
          if (v57)
          {
            v86 = v61;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 96))(v63, 1);
            WebCore::BorderPainter::clipBorderSidePolygon(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v191 + 24) + 8) + 40) + 8) + 528), *(_QWORD *)(v191[1] + 80), v178, (uint64_t)v179, a2, v59, v60);
            v87 = v179[4];
            if (v87 < 0)
              goto LABEL_310;
            v88 = v179[5];
            if (v88 < 0)
              goto LABEL_310;
            v89 = v179[8];
            if (v89 < 0)
              goto LABEL_310;
            v90 = v179[9];
            if (v90 < 0)
              goto LABEL_310;
            v91 = v179[6];
            if (v91 < 0)
              goto LABEL_310;
            v92 = v179[7];
            if (v92 < 0)
              goto LABEL_310;
            v93 = v179[10];
            if (v93 < 0)
              goto LABEL_310;
            v94 = v179[11];
            if (v94 < 0)
              goto LABEL_310;
            v39 = __OFADD__(v87, v91);
            v95 = v87 + v91;
            if (v39)
              v95 = 0x7FFFFFFF;
            v96 = v179[2];
            if (v95 > v96)
              goto LABEL_310;
            v39 = __OFADD__(v89, v93);
            v97 = v89 + v93;
            if (v39)
              v97 = 0x7FFFFFFF;
            if (v97 > v96)
              goto LABEL_310;
            v39 = __OFADD__(v88, v90);
            v98 = v88 + v90;
            if (v39)
              v98 = 0x7FFFFFFF;
            v99 = v179[3];
            if (v98 > v99)
              goto LABEL_310;
            v39 = __OFADD__(v92, v94);
            v100 = v92 + v94;
            if (v39)
              v100 = 0x7FFFFFFF;
            if (v100 > v99)
            {
LABEL_310:
              v102 = *((_QWORD *)v179 + 2);
              v101 = *((_QWORD *)v179 + 3);
              v103 = HIDWORD(v102);
              v104 = HIDWORD(v101);
              v106 = *((_QWORD *)v179 + 4);
              v105 = *((_QWORD *)v179 + 5);
              v107 = HIDWORD(v106);
              v109 = *v179;
              v108 = v179[1];
              v110 = v179[2];
              v111 = v179[3];
              switch(a2)
              {
                case 0u:
                  v112 = v102 + v101;
                  if (__OFADD__((_DWORD)v102, (_DWORD)v101))
                    v112 = (v102 >> 31) + 0x7FFFFFFF;
                  v113 = v112 - v110;
                  if (__OFSUB__(v112, v110))
                    v113 = (v112 >> 31) + 0x7FFFFFFF;
                  v114 = (float)v113 * 0.015625;
                  if (v114 > 0.0)
                  {
                    v115 = (float)((float)((float)v110 * 0.015625) + v114) * 64.0;
                    if (v115 >= 2147483650.0)
                      v110 = 0x7FFFFFFF;
                    else
                      v110 = v115 <= -2147483650.0 ? 0x80000000 : (int)v115;
                    if (!(_DWORD)v102)
                    {
                      v116 = (float)((float)((float)v109 * 0.015625) - v114) * 64.0;
                      if (v116 >= 2147483650.0)
                      {
                        v109 = 0x7FFFFFFF;
                      }
                      else if (v116 <= -2147483650.0)
                      {
                        v109 = 0x80000000;
                      }
                      else
                      {
                        v109 = (int)v116;
                      }
                    }
                  }
                  if (SHIDWORD(v102) <= SHIDWORD(v101))
                    v117 = HIDWORD(*((_QWORD *)v179 + 3));
                  else
                    v117 = HIDWORD(*((_QWORD *)v179 + 2));
                  v118 = (float)v117 * 0.015625;
                  if ((float)((float)v111 * 0.015625) >= v118)
                  {
                    LODWORD(v106) = 0;
                    LODWORD(v107) = 0;
                    goto LABEL_240;
                  }
                  v119 = v118 * 64.0;
                  if (v119 < 2147483650.0)
                  {
                    LODWORD(v106) = 0;
                    LODWORD(v107) = 0;
                    v105 = 0;
                    goto LABEL_158;
                  }
                  LODWORD(v106) = 0;
                  LODWORD(v107) = 0;
                  v105 = 0;
                  goto LABEL_279;
                case 1u:
                  v137 = HIDWORD(v101) + HIDWORD(v105);
                  if (__OFADD__(HIDWORD(v101), HIDWORD(v105)))
                    v137 = (HIDWORD(v101) >> 31) + 0x7FFFFFFF;
                  v138 = v137 - v111;
                  if (__OFSUB__(v137, v111))
                    v138 = (v137 >> 31) + 0x7FFFFFFF;
                  v139 = (float)v138 * 0.015625;
                  if (v139 > 0.0)
                  {
                    v140 = (float)((float)((float)v111 * 0.015625) + v139) * 64.0;
                    if (v140 >= 2147483650.0)
                      v111 = 0x7FFFFFFF;
                    else
                      v111 = v140 <= -2147483650.0 ? 0x80000000 : (int)v140;
                    if (!HIDWORD(v101))
                    {
                      v141 = (float)((float)((float)v108 * 0.015625) - v139) * 64.0;
                      if (v141 >= 2147483650.0)
                      {
                        v108 = 0x7FFFFFFF;
                      }
                      else if (v141 <= -2147483650.0)
                      {
                        v108 = 0x80000000;
                      }
                      else
                      {
                        v108 = (int)v141;
                      }
                    }
                  }
                  if ((int)v101 <= (int)v105)
                    v142 = *((_QWORD *)v179 + 5);
                  else
                    v142 = *((_QWORD *)v179 + 3);
                  v143 = (float)v142 * 0.015625;
                  v144 = (float)v110 * 0.015625;
                  if (v144 >= v143)
                  {
                    LODWORD(v102) = 0;
                    LODWORD(v103) = 0;
                    LODWORD(v106) = 0;
                    LODWORD(v107) = 0;
                    goto LABEL_242;
                  }
                  v145 = (float)((float)((float)v109 * 0.015625) + (float)(v144 - v143)) * 64.0;
                  if (v145 >= 2147483650.0)
                  {
                    v109 = 0x7FFFFFFF;
                  }
                  else if (v145 <= -2147483650.0)
                  {
                    v109 = 0x80000000;
                  }
                  else
                  {
                    v109 = (int)v145;
                  }
                  v136 = v143 * 64.0;
                  if (v136 < 2147483650.0)
                  {
                    LODWORD(v102) = 0;
                    LODWORD(v103) = 0;
                    LODWORD(v106) = 0;
                    LODWORD(v107) = 0;
                    goto LABEL_199;
                  }
                  LODWORD(v102) = 0;
                  LODWORD(v103) = 0;
                  LODWORD(v106) = 0;
                  LODWORD(v107) = 0;
                  goto LABEL_285;
                case 2u:
                  v120 = v106 + v105;
                  if (__OFADD__((_DWORD)v106, (_DWORD)v105))
                    v120 = (v106 >> 31) + 0x7FFFFFFF;
                  v121 = v120 - v110;
                  if (__OFSUB__(v120, v110))
                    v121 = (v120 >> 31) + 0x7FFFFFFF;
                  v122 = (float)v121 * 0.015625;
                  if (v122 > 0.0)
                  {
                    v123 = (float)((float)((float)v110 * 0.015625) + v122) * 64.0;
                    if (v123 >= 2147483650.0)
                      v110 = 0x7FFFFFFF;
                    else
                      v110 = v123 <= -2147483650.0 ? 0x80000000 : (int)v123;
                    if (!(_DWORD)v106)
                    {
                      v124 = (float)((float)((float)v109 * 0.015625) - v122) * 64.0;
                      if (v124 >= 2147483650.0)
                      {
                        v109 = 0x7FFFFFFF;
                      }
                      else if (v124 <= -2147483650.0)
                      {
                        v109 = 0x80000000;
                      }
                      else
                      {
                        v109 = (int)v124;
                      }
                    }
                  }
                  v125 = HIDWORD(v105);
                  if (SHIDWORD(v106) > SHIDWORD(v105))
                    LODWORD(v125) = HIDWORD(*((_QWORD *)v179 + 4));
                  v126 = (float)(int)v125 * 0.015625;
                  v127 = (float)v111 * 0.015625;
                  if (v127 >= v126)
                  {
                    LODWORD(v102) = 0;
                    LODWORD(v103) = 0;
                    LODWORD(v101) = 0;
                    LODWORD(v104) = 0;
                  }
                  else
                  {
                    v128 = (float)((float)((float)v108 * 0.015625) + (float)(v127 - v126)) * 64.0;
                    if (v128 >= 2147483650.0)
                    {
                      v108 = 0x7FFFFFFF;
                    }
                    else if (v128 <= -2147483650.0)
                    {
                      v108 = 0x80000000;
                    }
                    else
                    {
                      v108 = (int)v128;
                    }
                    v119 = v126 * 64.0;
                    if (v119 >= 2147483650.0)
                    {
                      LODWORD(v102) = 0;
                      LODWORD(v103) = 0;
                      LODWORD(v101) = 0;
                      LODWORD(v104) = 0;
LABEL_279:
                      v111 = 0x7FFFFFFF;
                    }
                    else
                    {
                      LODWORD(v102) = 0;
                      LODWORD(v103) = 0;
                      LODWORD(v101) = 0;
                      LODWORD(v104) = 0;
LABEL_158:
                      if (v119 <= -2147483650.0)
                        v111 = 0x80000000;
                      else
                        v111 = (int)v119;
                    }
                  }
                  goto LABEL_242;
                case 3u:
                  v129 = HIDWORD(v102) + HIDWORD(v106);
                  if (__OFADD__(HIDWORD(v102), HIDWORD(v106)))
                    v129 = (HIDWORD(v102) >> 31) + 0x7FFFFFFF;
                  v130 = v129 - v111;
                  if (__OFSUB__(v129, v111))
                    v130 = (v129 >> 31) + 0x7FFFFFFF;
                  v131 = (float)v130 * 0.015625;
                  if (v131 > 0.0)
                  {
                    v132 = (float)((float)((float)v111 * 0.015625) + v131) * 64.0;
                    if (v132 >= 2147483650.0)
                      v111 = 0x7FFFFFFF;
                    else
                      v111 = v132 <= -2147483650.0 ? 0x80000000 : (int)v132;
                    if (!HIDWORD(v102))
                    {
                      v133 = (float)((float)((float)v108 * 0.015625) - v131) * 64.0;
                      if (v133 >= 2147483650.0)
                      {
                        v108 = 0x7FFFFFFF;
                      }
                      else if (v133 <= -2147483650.0)
                      {
                        v108 = 0x80000000;
                      }
                      else
                      {
                        v108 = (int)v133;
                      }
                    }
                  }
                  if ((int)v102 <= (int)v106)
                    v134 = *((_QWORD *)v179 + 4);
                  else
                    v134 = *((_QWORD *)v179 + 2);
                  v135 = (float)v134 * 0.015625;
                  if ((float)((float)v110 * 0.015625) >= v135)
                  {
                    LODWORD(v101) = 0;
                    LODWORD(v104) = 0;
LABEL_240:
                    v105 = 0;
                  }
                  else
                  {
                    v136 = v135 * 64.0;
                    if (v136 >= 2147483650.0)
                    {
                      LODWORD(v101) = 0;
                      LODWORD(v104) = 0;
                      v105 = 0;
LABEL_285:
                      v110 = 0x7FFFFFFF;
                    }
                    else
                    {
                      LODWORD(v101) = 0;
                      LODWORD(v104) = 0;
                      v105 = 0;
LABEL_199:
                      if (v136 <= -2147483650.0)
                        v110 = 0x80000000;
                      else
                        v110 = (int)v136;
                    }
                  }
LABEL_242:
                  v152 = (float32x4_t)vdupq_n_s32(0x3C800000u);
                  v195 = (float)v109 * 0.015625;
                  v153.i64[0] = __PAIR64__(v110, v108);
                  v153.i64[1] = __PAIR64__(v102, v111);
                  v196 = vmulq_f32(vcvtq_f32_s32(v153), v152);
                  v197 = (float)(int)v103 * 0.015625;
                  v198 = (float)(int)v101 * 0.015625;
                  v154.i64[0] = __PAIR64__(v107, v106);
                  v154.i64[1] = v105;
                  v199 = (float)(int)v104 * 0.015625;
                  v200 = vmulq_f32(vcvtq_f32_s32(v154), v152);
                  (*(void (**)(uint64_t, float *))(*(_QWORD *)v180 + 488))(v180, &v195);
                  break;
                default:
                  goto LABEL_242;
              }
            }
            v155 = *v176;
            v156 = 0.0;
            v157 = 0.0;
            if (*v176)
              v157 = *v177;
            if (*(_BYTE *)(v4 + 24 * a3 + 22))
              v156 = *(float *)(v4 + 24 * a3 + 12);
            if (*(_BYTE *)(v4 + 24 * v188 + 22))
              v158 = *(float *)(v4 + 24 * v188 + 12);
            else
              v158 = 0.0;
            if (v157 < v156)
              v157 = v156;
            if (v157 >= v158)
              v159 = v157;
            else
              v159 = v158;
            LOBYTE(v195) = 0;
            v201 = 0;
            if (v193)
            {
              WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)&v195, (uint64_t)v192);
              v201 = 1;
              v155 = *v176;
            }
            if (v155)
              v160 = *v177;
            else
              v160 = 0.0;
            v194 = *v86;
            if ((v194 & 0x8000000000000) != 0)
            {
              v162 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFLL);
              do
                v163 = __ldaxr(v162);
              while (__stlxr(v163 + 1, v162));
            }
            HIBYTE(v170) = v173 != 0;
            LOBYTE(v170) = v174 != 0;
            WebCore::BorderPainter::drawBoxSideFromPath((uint64_t)v191, v178, v57, v4, (uint64_t)&v195, a2, (WebCore::Color *)&v194, *v189, v160, v159, v175, v170, v172 != 0);
            if ((v194 & 0x8000000000000) != 0)
            {
              v167 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFLL);
              do
              {
                v168 = __ldaxr(v167);
                v169 = v168 - 1;
              }
              while (__stlxr(v169, v167));
              if (!v169)
              {
                atomic_store(1u, v167);
                WTF::fastFree((WTF *)v167, v161);
              }
            }
            if (v201)
              WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)&v195);
LABEL_262:
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v180 + 104))(v180, 1);
LABEL_87:
            if (v193)
              WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v192);
            return;
          }
          v64 = (uint64_t *)(v4 + 24 * a2);
          v65 = v189;
          v66 = *v189;
          v67 = (v66 & 0xFE) == 6 && (v181 || v182);
          v68 = *v64;
          if ((*v64 & 0x8000000000000) != 0)
          {
            if (*(float *)((v68 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0)
              goto LABEL_71;
          }
          else if ((_BYTE)v68 == 0xFF)
          {
LABEL_71:
            v69 = 0;
            goto LABEL_72;
          }
          v146 = v61;
          v147 = *v176;
          if (*v176)
          {
            v147 = 0;
            if (v66 >= 2 && *v177 != 0.0)
              v147 = *v19 == 0;
          }
          if (*(_BYTE *)(v4 + 24 * a3 + 22)
            && *(float *)(v4 + 24 * a3 + 12) != 0.0
            && *(unsigned __int8 *)(v4 + 24 * a3 + 20) > 1u)
          {
            v147 ^= *(_BYTE *)(v4 + 24 * a3 + 21) == 0;
          }
          v69 = (v147 & 1) == 0
             && (!WebCore::operator==(v64, (uint64_t *)(v4 + 24 * a3))
              || *v189 - 2 <= 3 && ((v148 = ((1 << a3) | v171), v148 == 12) || v148 == 3))
             && v181;
          v65 = v189;
          v62 = v191;
          v63 = v180;
          v61 = v146;
          v64 = (uint64_t *)(v4 + 24 * a2);
LABEL_72:
          v70 = *v64;
          if ((*v64 & 0x8000000000000) != 0)
          {
            if (*(float *)((v70 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0)
            {
LABEL_74:
              v71 = 0;
              if (!v67)
              {
LABEL_75:
                if ((v69 | v71) != 1)
                {
                  v72 = 1;
                  v73 = v188;
                  v75 = v181;
                  v74 = v182;
                  goto LABEL_77;
                }
                v81 = v61;
                v82 = 1;
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 96))(v63, 1);
                v83 = 1;
LABEL_90:
                v73 = v188;
                WebCore::BorderPainter::clipBorderSidePolygon(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v191 + 24) + 8) + 40) + 8) + 528), *(_QWORD *)(v191[1] + 80), v178, (uint64_t)v179, a2, v83 & ~v69, v82 & ~v71);
                v62 = v191;
                v72 = 0;
                v74 = 0;
                v75 = 0;
                v63 = v180;
                v61 = v81;
LABEL_77:
                v76 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v62 + 24) + 8) + 40) + 8);
                v195 = (float)v184 * 0.015625;
                v196.f32[0] = (float)v185 * 0.015625;
                v196.f32[1] = (float)v186 * 0.015625;
                v196.f32[2] = (float)v187 * 0.015625;
                v194 = *v61;
                if ((v194 & 0x8000000000000) != 0)
                {
                  v84 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFLL);
                  do
                    v85 = __ldaxr(v84);
                  while (__stlxr(v85 + 1, v84));
                }
                v77 = 0.0;
                v78 = 0.0;
                if (v75 && *(_BYTE *)(v4 + 24 * v190 + 22))
                  v78 = *(float *)(v4 + 24 * v190 + 12);
                if (v74)
                {
                  v79 = v183;
                  if (*(_BYTE *)(v4 + 24 * v73 + 22))
                    v77 = *(float *)(v4 + 24 * v73 + 12);
                }
                else
                {
                  v79 = v183;
                }
                WebCore::BorderPainter::drawLineForBoxSide(v63, v76, &v195, a2, (WebCore::Color *)&v194, *v65, v79 != 0, v78, v77);
                if ((v194 & 0x8000000000000) != 0)
                {
                  v164 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v165 = __ldaxr(v164);
                    v166 = v165 - 1;
                  }
                  while (__stlxr(v166, v164));
                  if (!v166)
                  {
                    atomic_store(1u, v164);
                    WTF::fastFree((WTF *)v164, v80);
                  }
                }
                if ((v72 & 1) != 0)
                  goto LABEL_87;
                goto LABEL_262;
              }
LABEL_236:
              v81 = v61;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 96))(v63, 1);
              v83 = !v181;
              v82 = !v182;
              goto LABEL_90;
            }
          }
          else if ((_BYTE)v70 == 0xFF)
          {
            goto LABEL_74;
          }
          v149 = v61;
          v150 = *v176;
          if (*v176)
            v150 = *v177 != 0.0 && *v189 >= 2u && *v19 == 0;
          if (*(_BYTE *)(v4 + 24 * v188 + 22)
            && *(float *)(v4 + 24 * v188 + 12) != 0.0
            && *(unsigned __int8 *)(v4 + 24 * v188 + 20) > 1u)
          {
            v150 ^= *(_BYTE *)(v4 + 24 * v188 + 21) == 0;
          }
          v71 = (v150 & 1) == 0
             && (!WebCore::operator==(v64, (uint64_t *)(v4 + 24 * v188))
              || *v189 - 2 <= 3
              && ((v151 = ((1 << v188) | v171), v151 == 12) || v151 == 3))
             && v182;
          v65 = v189;
          v62 = v191;
          v63 = v180;
          v61 = v149;
          if (!v67)
            goto LABEL_75;
          goto LABEL_236;
        }
      }
    }
  }
}

BOOL WebCore::colorsMatchAtCorner(unsigned int a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  int v12;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;

  v3 = a1;
  v4 = (uint64_t *)(a3 + 24 * a1);
  v5 = *((unsigned __int8 *)v4 + 22);
  if (*((_BYTE *)v4 + 22))
    v5 = *(float *)(a3 + 24 * a1 + 12) != 0.0
      && *(unsigned __int8 *)(a3 + 24 * a1 + 20) >= 2u
      && *(_BYTE *)(a3 + 24 * a1 + 21) == 0;
  if (!*(_BYTE *)(a3 + 24 * a2 + 22)
    || *(float *)(a3 + 24 * a2 + 12) == 0.0
    || *(unsigned __int8 *)(a3 + 24 * a2 + 20) <= 1u)
  {
    if ((v5 & 1) != 0)
      return 0;
  }
  else if (((v5 ^ (*(_BYTE *)(a3 + 24 * a2 + 21) == 0)) & 1) != 0)
  {
    return 0;
  }
  v8 = *v4;
  v9 = *(_QWORD *)(a3 + 24 * a2);
  if ((*v4 & 0x8000000000000) != 0)
  {
    v19 = (uint64_t *)(a3 + 24 * a1);
    v20 = (_QWORD *)(a3 + 24 * a2);
    v17 = a3;
    v18 = a1;
    v15 = a2;
    v16 = a1;
    if ((v9 & 0x8000000000000) == 0)
      return 0;
    v22 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
    v21 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
    if (!WebCore::operator==<float,4ul>((float *)&v22, (float *)&v21))
      return 0;
    v14 = *v19;
    if (HIBYTE(*v19) != HIBYTE(*v20))
      return 0;
    LOBYTE(a2) = v15;
    LOBYTE(a1) = v16;
    a3 = v17;
    v3 = v18;
    if (BYTE6(v14) != BYTE6(*v20))
      return 0;
  }
  else if (v8 != v9 || (v9 & 0x8000000000000) != 0)
  {
    return 0;
  }
  v11 = *(unsigned __int8 *)(a3 + 24 * v3 + 20) - 2;
  v6 = 1;
  if (v11 <= 3)
  {
    v12 = ((1 << a2) | (1 << a1));
    return v12 != 3 && v12 != 12;
  }
  return v6;
}

uint64_t WebCore::BorderPainter::clipBorderSidePolygon(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5, int a6, int a7)
{
  float v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  WTF *v35;
  int v36;
  int v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  int v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  int v73;
  int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  int v81;
  uint64_t result;
  void *v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  void *v90;
  WTF *v91;
  int v92;
  WTF *v93;
  uint64_t v94;
  WTF *v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v13 = 1.0;
  if (a1)
  {
    v14 = *(_QWORD *)(a1 + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 24);
      if (v15)
      {
        v16 = *(float **)(v15 + 8);
        if (v16)
        {
          v17 = (*(_DWORD *)v16)++;
          v13 = v16[91];
          if (v17)
          {
            *(_DWORD *)v16 = v17;
          }
          else
          {
            WebCore::Page::~Page((uint64_t)v16);
            WTF::fastFree(v89, v90);
          }
        }
      }
    }
  }
  v18 = WebCore::snapRectToDevicePixels(a3, v13);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = WebCore::snapRectToDevicePixels((int *)a4, v13);
  v95 = 0;
  v96 = 0;
  v29 = v25;
  v30 = v26;
  v31 = v27;
  v32 = v28;
  switch(a5)
  {
    case 0:
      v98 = __PAIR64__(LODWORD(v20), LODWORD(v18));
      v99 = __PAIR64__(LODWORD(v26), LODWORD(v25));
      v33 = v25 + v27;
      *(float *)&v100 = v25 + v27;
      *((float *)&v100 + 1) = v26;
      v34 = v18 + v22;
      *(float *)&v101 = v18 + v22;
      *((float *)&v101 + 1) = v20;
      WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v93, (uint64_t *)&v98, 4uLL);
      v35 = v93;
      v37 = *(_DWORD *)(a4 + 16);
      v36 = *(_DWORD *)(a4 + 20);
      v38 = HIDWORD(v94);
      v95 = v93;
      v96 = v94;
      if (v37 | v36)
      {
        if (HIDWORD(v94) <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x196320554);
        }
        v39 = v29 - v18;
        v40 = v30 - (float)(v30 + v32);
        v41 = (float)((float)(v29 - v18) * v40) - (float)((float)(v30 - v20) * (float)(v33 - v29));
        if (v41 != 0.0)
        {
          v42 = (float)((float)(v39 * v40) - (float)((float)((float)(v30 + v32) - v20) * (float)(v33 - v29))) / v41;
          *((float *)v93 + 2) = v18 + (float)(v42 * v39);
          *((float *)v35 + 3) = v20 + (float)(v42 * (float)(v30 - v20));
        }
      }
      if (!*(_QWORD *)(a4 + 24))
        goto LABEL_42;
      if (v38 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19632055CLL);
      }
      v43 = v33 - v34;
      v44 = v30 - v20;
      v45 = (float)(v30 + v32) - v30;
      v46 = (float)((float)(v33 - v34) * v45) - (float)((float)(v30 - v20) * (float)(v33 - v29));
      if (v46 == 0.0)
        goto LABEL_42;
      v47 = (float)((float)(v29 - v34) * v45) - (float)((float)(v30 - v20) * (float)(v33 - v29));
      goto LABEL_24;
    case 1:
      v69 = v18 + v22;
      v98 = __PAIR64__(LODWORD(v20), LODWORD(v69));
      v70 = v25 + v27;
      *(float *)&v99 = v25 + v27;
      *((float *)&v99 + 1) = v26;
      v71 = v26 + v28;
      *(float *)&v100 = v25 + v27;
      *((float *)&v100 + 1) = v26 + v28;
      v72 = v20 + v24;
      *(float *)&v101 = v69;
      *((float *)&v101 + 1) = v20 + v24;
      WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v93, (uint64_t *)&v98, 4uLL);
      v35 = v93;
      v74 = *(_DWORD *)(a4 + 24);
      v73 = *(_DWORD *)(a4 + 28);
      v38 = HIDWORD(v94);
      v95 = v93;
      v96 = v94;
      if (v74 | v73)
      {
        if (HIDWORD(v94) <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19632057CLL);
        }
        v75 = (float)((float)(v70 - v69) * (float)(v71 - v30)) - (float)((float)(v30 - v20) * (float)(v70 - v29));
        if (v75 != 0.0)
        {
          v76 = (float)((float)((float)(v29 - v69) * (float)(v71 - v30))
                      - (float)((float)(v30 - v20) * (float)(v70 - v29)))
              / v75;
          *((float *)v93 + 2) = v69 + (float)(v76 * (float)(v70 - v69));
          *((float *)v35 + 3) = v20 + (float)(v76 * (float)(v30 - v20));
        }
      }
      if (!*(_QWORD *)(a4 + 40))
        goto LABEL_42;
      if (v38 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x196320584);
      }
      v77 = v70 - v69;
      v78 = (float)((float)(v70 - v69) * (float)(v71 - v30)) - (float)((float)(v71 - v72) * (float)(v29 - v70));
      if (v78 == 0.0)
        goto LABEL_42;
      v79 = (float)((float)(v77 * (float)(v71 - v30)) - (float)((float)(v30 - v72) * (float)(v29 - v70))) / v78;
      *((float *)v35 + 4) = v69 + (float)(v79 * v77);
      v56 = v72 + (float)(v79 * (float)(v71 - v72));
      goto LABEL_41;
    case 2:
      v20 = v20 + v24;
      v98 = __PAIR64__(LODWORD(v20), LODWORD(v18));
      v48 = v26 + v28;
      *(float *)&v99 = v25;
      *((float *)&v99 + 1) = v26 + v28;
      v49 = v25 + v27;
      *(float *)&v100 = v25 + v27;
      *((float *)&v100 + 1) = v26 + v28;
      v34 = v18 + v22;
      *(float *)&v101 = v18 + v22;
      *((float *)&v101 + 1) = v20;
      WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v93, (uint64_t *)&v98, 4uLL);
      v35 = v93;
      v51 = *(_DWORD *)(a4 + 32);
      v50 = *(_DWORD *)(a4 + 36);
      v38 = HIDWORD(v94);
      v95 = v93;
      v96 = v94;
      if (v51 | v50)
      {
        if (HIDWORD(v94) <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19632054CLL);
        }
        v52 = v29 - v18;
        v53 = (float)((float)(v29 - v18) * (float)(v48 - v30)) - (float)((float)(v48 - v20) * (float)(v49 - v29));
        if (v53 != 0.0)
        {
          v54 = (float)((float)(v52 * (float)(v48 - v30)) - (float)((float)(v30 - v20) * (float)(v49 - v29))) / v53;
          *((float *)v93 + 2) = v18 + (float)(v54 * v52);
          *((float *)v35 + 3) = v20 + (float)(v54 * (float)(v48 - v20));
        }
      }
      if (!*(_QWORD *)(a4 + 40))
        goto LABEL_42;
      if (v38 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x196320564);
      }
      v43 = v49 - v34;
      v44 = v48 - v20;
      v46 = (float)((float)(v49 - v34) * (float)(v48 - v30)) - (float)((float)(v48 - v20) * (float)(v29 - v49));
      if (v46 == 0.0)
        goto LABEL_42;
      v47 = (float)(v43 * (float)(v48 - v30)) - (float)((float)(v30 - v20) * (float)(v29 - v49));
LABEL_24:
      v55 = v47 / v46;
      *((float *)v35 + 4) = v34 + (float)(v55 * v43);
      v56 = v20 + (float)(v55 * v44);
      goto LABEL_41;
    case 3:
      v98 = __PAIR64__(LODWORD(v20), LODWORD(v18));
      v99 = __PAIR64__(LODWORD(v26), LODWORD(v25));
      v57 = v26 + v28;
      *(float *)&v100 = v25;
      *((float *)&v100 + 1) = v26 + v28;
      v58 = v20 + v24;
      *(float *)&v101 = v18;
      *((float *)&v101 + 1) = v20 + v24;
      WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v93, (uint64_t *)&v98, 4uLL);
      v35 = v93;
      v60 = *(_DWORD *)(a4 + 16);
      v59 = *(_DWORD *)(a4 + 20);
      v38 = HIDWORD(v94);
      v95 = v93;
      v96 = v94;
      if (v60 | v59)
      {
        if (HIDWORD(v94) <= 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19632056CLL);
        }
        v61 = v29 - v18;
        v62 = (float)(v29 + v31) - v29;
        v63 = (float)((float)(v29 - v18) * (float)(v30 - v57)) - (float)((float)(v30 - v20) * v62);
        if (v63 != 0.0)
        {
          v64 = (float)((float)(v61 * (float)(v30 - v57)) - (float)((float)(v57 - v20) * v62)) / v63;
          *((float *)v93 + 2) = v18 + (float)(v64 * v61);
          *((float *)v35 + 3) = v20 + (float)(v64 * (float)(v30 - v20));
        }
      }
      if (!*(_QWORD *)(a4 + 32))
        goto LABEL_42;
      if (v38 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x196320574);
      }
      v65 = v29 - v18;
      v66 = (float)(v29 + v31) - v29;
      v67 = (float)((float)(v29 - v18) * (float)(v57 - v30)) - (float)((float)(v57 - v58) * v66);
      if (v67 == 0.0)
        goto LABEL_42;
      v68 = (float)((float)(v65 * (float)(v57 - v30)) - (float)((float)(v30 - v58) * v66)) / v67;
      *((float *)v35 + 4) = v18 + (float)(v68 * v65);
      v56 = v58 + (float)(v68 * (float)(v57 - v58));
LABEL_41:
      *((float *)v35 + 5) = v56;
LABEL_42:
      if (a6 == a7)
        goto LABEL_51;
      if (!v38)
      {
LABEL_81:
        __break(0xC471u);
        JUMPOUT(0x196320524);
      }
      v98 = *(_QWORD *)v35;
      if (v38 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19632052CLL);
      }
      v99 = *((_QWORD *)v35 + 1);
      if (v38 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x196320534);
      }
      v80 = *((_QWORD *)v35 + 2);
      v100 = v80;
      if ((a5 & 0xFFFFFFFD) != 0)
      {
        if (v38 == 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19632053CLL);
        }
        v101 = __PAIR64__(*((_DWORD *)v35 + 7), v80);
      }
      else
      {
        if (v38 == 3)
        {
          __break(0xC471u);
          JUMPOUT(0x196320544);
        }
        LODWORD(v101) = *((_DWORD *)v35 + 6);
        HIDWORD(v101) = HIDWORD(v80);
      }
      v102 = *((_QWORD *)v35 + 3);
      WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v93, (uint64_t *)&v98, 5uLL);
      v84 = *(unsigned __int8 *)(a2 + 342);
      if (v84 != (a6 ^ 1))
      {
        *(_BYTE *)(a2 + 342) = a6 ^ 1;
        *(_DWORD *)(a2 + 184) |= 0x800u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
      WebCore::PathStream::create((uint64_t)&v93, (uint64_t *)&v99);
      v103 = 2;
      (*(void (**)(uint64_t, unint64_t *, _QWORD))(*(_QWORD *)a2 + 496))(a2, &v98, 0);
      if (v103 != -1)
        ((void (*)(WTF **, unint64_t *))off_1E341E1B0[v103])(&v91, &v99);
      v85 = *(_QWORD *)v35;
      v98 = *(_QWORD *)v35;
      if ((a5 & 0xFFFFFFFD) != 0)
      {
        v86 = HIDWORD(v85);
        LODWORD(v85) = *((_DWORD *)v35 + 2);
      }
      else
      {
        LODWORD(v86) = *((_DWORD *)v35 + 3);
      }
      v99 = __PAIR64__(v86, v85);
      v100 = *((_QWORD *)v35 + 1);
      v101 = *((_QWORD *)v35 + 2);
      v102 = *((_QWORD *)v35 + 3);
      WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v91, (uint64_t *)&v98, 5uLL);
      if (*(unsigned __int8 *)(a2 + 342) != (a7 ^ 1))
      {
        *(_BYTE *)(a2 + 342) = a7 ^ 1;
        *(_DWORD *)(a2 + 184) |= 0x800u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
      WebCore::PathStream::create((uint64_t)&v91, (uint64_t *)&v99);
      v103 = 2;
      (*(void (**)(uint64_t, unint64_t *, _QWORD))(*(_QWORD *)a2 + 496))(a2, &v98, 0);
      if (v103 != -1)
        ((void (*)(char *, unint64_t *))off_1E341E1B0[v103])(&v97, &v99);
      if (*(unsigned __int8 *)(a2 + 342) != v84)
      {
        *(_BYTE *)(a2 + 342) = v84;
        *(_DWORD *)(a2 + 184) |= 0x800u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
      v87 = v91;
      if (v91)
      {
        v91 = 0;
        v92 = 0;
        WTF::fastFree(v87, v83);
      }
      v88 = v93;
      if (v93)
      {
        v93 = 0;
        LODWORD(v94) = 0;
        WTF::fastFree(v88, v83);
      }
      goto LABEL_78;
    default:
      if (a6 != a7)
        goto LABEL_81;
      v35 = 0;
LABEL_51:
      v81 = *(unsigned __int8 *)(a2 + 342);
      if (v81 != (a6 ^ 1))
      {
        *(_BYTE *)(a2 + 342) = a6 ^ 1;
        *(_DWORD *)(a2 + 184) |= 0x800u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
      WebCore::PathStream::create((uint64_t)&v95, (uint64_t *)&v99);
      v103 = 2;
      (*(void (**)(uint64_t, unint64_t *, _QWORD))(*(_QWORD *)a2 + 496))(a2, &v98, 0);
      if (v103 != -1)
        ((void (*)(WTF **, unint64_t *))off_1E341E1B0[v103])(&v93, &v99);
      if (*(unsigned __int8 *)(a2 + 342) != v81)
      {
        *(_BYTE *)(a2 + 342) = v81;
        *(_DWORD *)(a2 + 184) |= 0x800u;
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
      if (v35)
      {
LABEL_78:
        v95 = 0;
        LODWORD(v96) = 0;
        return WTF::fastFree(v35, v83);
      }
      return result;
  }
}

uint64_t WebCore::BorderPainter::drawBoxSideFromPath(uint64_t result, int *a2, WebCore::Path *a3, uint64_t a4, uint64_t a5, uint64_t a6, WebCore::Color *a7, int a8, float a9, float a10, int a11, __int16 a12, unsigned __int8 a13)
{
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  __int32 v27;
  uint64_t v28;
  uint64_t v31;
  WebCore::Path *v32;
  int v33;
  int v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  double *v45;
  void *v46;
  WTF *v47;
  int v48;
  uint64_t v49;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  void *v58;
  double v59;
  WebCore::Color *v60;
  char v61;
  int v62;
  int v63;
  double v64;
  int v65;
  double v66;
  int v67;
  double v68;
  int v69;
  int v70;
  int v71;
  int *v72;
  int v73;
  float32x4_t v74;
  uint64_t v75;
  void *v76;
  WebCore::BorderDataRadii *v77;
  double v78;
  int v79;
  int v80;
  float v81;
  double v82;
  int v83;
  double v84;
  int v85;
  double v86;
  int v87;
  int v88;
  float v89;
  double v90;
  int v91;
  double v92;
  int v93;
  double v94;
  int v95;
  int v96;
  float v97;
  double v98;
  int v99;
  double v100;
  int v101;
  double v102;
  int v103;
  int v104;
  float v105;
  double v106;
  int v107;
  double v108;
  int v109;
  int v110;
  float32x4_t v111;
  uint64_t v112;
  void *v113;
  unsigned int v114;
  int v115;
  BOOL v116;
  int v117;
  int v118;
  int v119;
  int v120;
  float32x4_t v121;
  uint64_t v122;
  void *v123;
  WTF *v124;
  void *v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  int v163;
  int v165;
  int v166;
  int v168;
  uint64_t v169;
  _BYTE v170[64];
  char v171;
  _BYTE v172[64];
  char v173;
  uint64_t v174;
  _BYTE v175[64];
  char v176;
  uint64_t v177;
  _BYTE v178[64];
  char v179;
  _BYTE v180[64];
  char v181;
  __int128 v182;
  uint64_t v183;
  _BYTE v184[64];
  char v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  _BYTE v189[64];
  char v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;

  if (a9 > 0.0)
  {
    v16 = a2;
    v17 = result;
    v18 = *(_QWORD *)(*(_QWORD *)(result + 8) + 80);
    v28 = a6;
    v31 = a4;
    v32 = a3;
    v33 = a13;
    v34 = a11;
    switch(a8)
    {
      case 0:
      case 1:
        return result;
      case 2:
      case 4:
        WebCore::BorderPainter::calculateBorderStyleColor(v191.i64, a8, a6, a7);
        v36 = *(_QWORD *)a7;
        v37 = v191.i64[0];
        if ((*(_QWORD *)a7 & 0x8000000000000) != 0)
        {
          if ((v191.i64[0] & 0x8000000000000) == 0
            || *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v191.i64[0] & 0xFFFFFFFFFFFFLL) + 4)
            || *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v191.i64[0] & 0xFFFFFFFFFFFFLL) + 8)
            || *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v191.i64[0] & 0xFFFFFFFFFFFFLL) + 0xC)
            || *(float *)((v36 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v191.i64[0] & 0xFFFFFFFFFFFFLL) + 0x10)
            || HIBYTE(v36) != HIBYTE(v191.i64[0])
            || BYTE6(v36) != v191.u8[6])
          {
            v143 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
            do
            {
              v144 = __ldaxr(v143);
              v145 = v144 - 1;
            }
            while (__stlxr(v145, v143));
            if (!v145)
            {
              atomic_store(1u, v143);
              WTF::fastFree((WTF *)v143, v35);
            }
            goto LABEL_17;
          }
        }
        else
        {
          if (v36 != v191.i64[0] || (v191.i64[0] & 0x8000000000000) != 0)
          {
LABEL_17:
            *(_QWORD *)a7 = v191.i64[0];
            goto LABEL_3;
          }
          v37 = *(_QWORD *)a7;
        }
        if ((v37 & 0x8000000000000) != 0)
        {
          v126 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
          do
          {
            v127 = __ldaxr(v126);
            v128 = v127 - 1;
          }
          while (__stlxr(v128, v126));
          if (!v128)
          {
            atomic_store(1u, v126);
            WTF::fastFree((WTF *)v126, v35);
          }
        }
LABEL_3:
        if (*(_BYTE *)(v18 + 193))
        {
          *(_BYTE *)(v18 + 193) = 0;
          *(_DWORD *)(v18 + 184) |= 0x10u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 88))(v18, v18 + 8);
        WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v18, a7);
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 24) + 8) + 40) + 8)
                        + 528);
        v20 = 1.0;
        if (v19)
        {
          v21 = *(_QWORD *)(v19 + 8);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 24);
            if (v22)
            {
              v23 = *(float **)(v22 + 8);
              if (v23)
              {
                v24 = (*(_DWORD *)v23)++;
                v20 = v23[91];
                if (v24)
                {
                  *(_DWORD *)v23 = v24;
                }
                else
                {
                  WebCore::Page::~Page((uint64_t)v23);
                  WTF::fastFree(v124, v125);
                }
              }
            }
          }
        }
        v191.i32[0] = WebCore::snapRectToDevicePixels(v16, v20);
        *(uint64_t *)((char *)v191.i64 + 4) = __PAIR64__(v26, v25);
        v191.i32[3] = v27;
        return (*(uint64_t (**)(uint64_t, int32x4_t *, float))(*(_QWORD *)v18 + 144))(v18, &v191, 1.0);
      case 3:
      case 5:
        if (a8 == 3)
          v48 = 4;
        else
          v48 = 2;
        v160 = v48;
        if (a8 == 3)
          v49 = 2;
        else
          v49 = 4;
        v175[0] = 0;
        v176 = 0;
        if (*(_BYTE *)(a5 + 64))
        {
          v52 = result;
          v54 = v49;
          WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v175, a5);
          v49 = v54;
          v31 = a4;
          v17 = v52;
          v34 = a11;
          v33 = a13;
          v28 = a6;
          v32 = a3;
          v16 = a2;
          v176 = 1;
        }
        v55 = *(_QWORD *)a7;
        v174 = v55;
        if ((v55 & 0x8000000000000) != 0)
        {
          v129 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 + 1, v129));
        }
        v56 = v33;
        BYTE6(v152) = v33;
        WORD2(v152) = a12;
        v57 = v34;
        LODWORD(v152) = v34;
        WebCore::BorderPainter::drawBoxSideFromPath(v17, v16, v32, v31, v175, v28, &v174, v49, a9, a10, v152);
        if ((v174 & 0x8000000000000) != 0)
        {
          v137 = (unsigned int *)(v174 & 0xFFFFFFFFFFFFLL);
          do
          {
            v138 = __ldaxr(v137);
            v139 = v138 - 1;
          }
          while (__stlxr(v139, v137));
          if (!v139)
          {
            atomic_store(1u, v137);
            WTF::fastFree((WTF *)v137, v58);
          }
        }
        if (v176)
          WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v175);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 96))(v18, 1);
        if (*(_BYTE *)(v31 + 22))
          v59 = (float)(*(float *)(v31 + 12) * 0.5) * 64.0;
        else
          v59 = 0.0;
        v60 = a7;
        if (v59 >= 2147483650.0)
        {
          v63 = 0x7FFFFFFF;
          v61 = HIBYTE(a12);
          v62 = v56;
        }
        else
        {
          v61 = HIBYTE(a12);
          v62 = v56;
          if (v59 <= -2147483650.0)
            v63 = 0x80000000;
          else
            v63 = (int)v59;
        }
        v64 = (float)(*(float *)(v31 + 60) * 0.5) * 64.0;
        if (!*(_BYTE *)(v31 + 70))
          v64 = 0.0;
        if (v64 >= 2147483650.0)
        {
          v65 = 0x7FFFFFFF;
        }
        else if (v64 <= -2147483650.0)
        {
          v65 = 0x80000000;
        }
        else
        {
          v65 = (int)v64;
        }
        v66 = (float)(*(float *)(v31 + 84) * 0.5) * 64.0;
        if (!*(_BYTE *)(v31 + 94))
          v66 = 0.0;
        if (v66 >= 2147483650.0)
        {
          v67 = 0x7FFFFFFF;
        }
        else if (v66 <= -2147483650.0)
        {
          v67 = 0x80000000;
        }
        else
        {
          v67 = (int)v66;
        }
        v162 = v28;
        v68 = (float)(*(float *)(v31 + 36) * 0.5) * 64.0;
        if (!*(_BYTE *)(v31 + 46))
          v68 = 0.0;
        v166 = v57;
        v159 = v17;
        v69 = v62;
        if (v68 >= 2147483650.0)
        {
          v70 = 0x7FFFFFFF;
        }
        else if (v68 <= -2147483650.0)
        {
          v70 = 0x80000000;
        }
        else
        {
          v70 = (int)v68;
        }
        v172[0] = 0;
        v173 = 0;
        if (*(_BYTE *)(a5 + 64))
        {
          v71 = v63;
          v72 = v16;
          v73 = v67;
          WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v172, a5);
          v67 = v73;
          v16 = v72;
          v63 = v71;
          v60 = a7;
          v61 = HIBYTE(a12);
          v173 = 1;
        }
        WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::BorderDataRadii *)v172, v16, v63, v65, v67, v70, v69, a12, (uint64_t)&v191, v61);
        if (v173)
          WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v172);
        v74 = (float32x4_t)vdupq_n_s32(0x3C800000u);
        v186 = vmulq_f32(vcvtq_f32_s32(v191), v74);
        v187 = vmulq_f32(vcvtq_f32_s32(v192), v74);
        v188 = vmulq_f32(vcvtq_f32_s32(v193), v74);
        (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v18 + 464))(v18, &v186);
        v170[0] = 0;
        v171 = 0;
        if (*(_BYTE *)(a5 + 64))
        {
          WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v170, a5);
          v171 = 1;
        }
        v75 = *(_QWORD *)v60;
        v169 = v75;
        if ((v75 & 0x8000000000000) != 0)
        {
          v131 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFLL);
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 + 1, v131));
        }
        BYTE6(v153) = v69;
        WORD2(v153) = a12;
        LODWORD(v153) = v166;
        WebCore::BorderPainter::drawBoxSideFromPath(v159, v16, v32, v31, v170, v162, &v169, v160, a9, a10, v153);
        if ((v169 & 0x8000000000000) != 0)
        {
          v140 = (unsigned int *)(v169 & 0xFFFFFFFFFFFFLL);
          do
          {
            v141 = __ldaxr(v140);
            v142 = v141 - 1;
          }
          while (__stlxr(v142, v140));
          if (!v142)
          {
            atomic_store(1u, v140);
            WTF::fastFree((WTF *)v140, v76);
          }
        }
        if (!v171)
          goto LABEL_160;
        v77 = (WebCore::BorderDataRadii *)v170;
        goto LABEL_159;
      case 6:
      case 7:
        WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v18, a7);
        v38 = (float)(a10 + a10) * 1.1;
        if (*(float *)(v18 + 188) != v38)
        {
          *(float *)(v18 + 188) = v38;
          *(_DWORD *)(v18 + 184) |= 8u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 88))(v18, v18 + 8);
        if (a8 == 7)
          v39 = 3;
        else
          v39 = 2;
        if (*(unsigned __int8 *)(v18 + 193) != v39)
        {
          *(_BYTE *)(v18 + 193) = v39;
          *(_DWORD *)(v18 + 184) |= 0x10u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 88))(v18, v18 + 8);
        v40 = 1.0;
        if (a8 == 7)
          v40 = 3.0;
        v41 = v40 * a9;
        WebCore::Path::length(v32);
        v43 = v42 / v41;
        if (v43 >= 4.0)
        {
          v44 = v41;
          if (((int)v43 & 1) != 0)
          {
            v44 = v41;
            if ((float)(v43 - (float)(int)v43) != 0.0)
              v44 = v41 + (float)(v41 / (float)(v43 * 0.5));
          }
          v45 = (double *)WTF::fastMalloc((WTF *)0x10);
          v191.i64[0] = (uint64_t)v45;
          v191.i64[1] = 0x200000002;
          *v45 = v41;
          v45[1] = v44;
          (*(void (**)(uint64_t, int32x4_t *, float))(*(_QWORD *)v18 + 304))(v18, &v191, v41);
          v47 = (WTF *)v191.i64[0];
          if (v191.i64[0])
          {
            v191.i64[0] = 0;
            v191.i32[2] = 0;
            WTF::fastFree(v47, v46);
          }
        }
        return (*(uint64_t (**)(uint64_t, WebCore::Path *))(*(_QWORD *)v18 + 184))(v18, v32);
      case 9:
        if (!*(_BYTE *)(a4 + 22))
        {
          v78 = 0.0;
          goto LABEL_80;
        }
        v78 = *(float *)(a4 + 12) * 64.0;
        if (v78 >= 2147483650.0)
        {
          v79 = 0x7FFFFFFF;
        }
        else
        {
          if (v78 > -2147483650.0)
          {
LABEL_80:
            v79 = (int)v78;
            goto LABEL_81;
          }
          v79 = 0x80000000;
        }
LABEL_81:
        if ((v79 ^ (2 * v79)) < 0)
          v80 = (v79 >> 31) + 0x7FFFFFFF;
        else
          v80 = 2 * v79;
        v81 = *(float *)(a4 + 16);
        v82 = (float)(ceilf((float)(v81 * (float)(v80 / 3)) * 0.015625) / v81) * 64.0;
        if (v82 >= 2147483650.0)
        {
          v83 = 0x7FFFFFFF;
        }
        else if (v82 <= -2147483650.0)
        {
          v83 = 0x80000000;
        }
        else
        {
          v83 = (int)v82;
        }
        v158 = v83;
        v84 = (float)(floorf((float)(v81 * (float)(v79 / 3)) * 0.015625) / v81) * 64.0;
        if (v84 >= 2147483650.0)
        {
          v85 = 0x7FFFFFFF;
        }
        else if (v84 <= -2147483650.0)
        {
          v85 = 0x80000000;
        }
        else
        {
          v85 = (int)v84;
        }
        v168 = v85;
        if (!*(_BYTE *)(a4 + 46))
        {
          v86 = 0.0;
          goto LABEL_92;
        }
        v86 = *(float *)(a4 + 36) * 64.0;
        if (v86 >= 2147483650.0)
        {
          v87 = 0x7FFFFFFF;
        }
        else
        {
          if (v86 > -2147483650.0)
          {
LABEL_92:
            v87 = (int)v86;
            goto LABEL_93;
          }
          v87 = 0x80000000;
        }
LABEL_93:
        if ((v87 ^ (2 * v87)) < 0)
          v88 = (v87 >> 31) + 0x7FFFFFFF;
        else
          v88 = 2 * v87;
        v89 = *(float *)(a4 + 40);
        v90 = (float)(ceilf((float)(v89 * (float)(v88 / 3)) * 0.015625) / v89) * 64.0;
        if (v90 >= 2147483650.0)
        {
          v91 = 0x7FFFFFFF;
        }
        else if (v90 <= -2147483650.0)
        {
          v91 = 0x80000000;
        }
        else
        {
          v91 = (int)v90;
        }
        v157 = v91;
        v92 = (float)(floorf((float)(v89 * (float)(v87 / 3)) * 0.015625) / v89) * 64.0;
        if (v92 >= 2147483650.0)
        {
          v93 = 0x7FFFFFFF;
        }
        else if (v92 <= -2147483650.0)
        {
          v93 = 0x80000000;
        }
        else
        {
          v93 = (int)v92;
        }
        v165 = v93;
        if (!*(_BYTE *)(a4 + 70))
        {
          v94 = 0.0;
          goto LABEL_104;
        }
        v94 = *(float *)(a4 + 60) * 64.0;
        if (v94 >= 2147483650.0)
        {
          v95 = 0x7FFFFFFF;
        }
        else
        {
          if (v94 > -2147483650.0)
          {
LABEL_104:
            v95 = (int)v94;
            goto LABEL_105;
          }
          v95 = 0x80000000;
        }
LABEL_105:
        if ((v95 ^ (2 * v95)) < 0)
          v96 = (v95 >> 31) + 0x7FFFFFFF;
        else
          v96 = 2 * v95;
        v97 = *(float *)(a4 + 64);
        v98 = (float)(ceilf((float)(v97 * (float)(v96 / 3)) * 0.015625) / v97) * 64.0;
        if (v98 >= 2147483650.0)
        {
          v99 = 0x7FFFFFFF;
        }
        else if (v98 <= -2147483650.0)
        {
          v99 = 0x80000000;
        }
        else
        {
          v99 = (int)v98;
        }
        v156 = v99;
        v100 = (float)(floorf((float)(v97 * (float)(v95 / 3)) * 0.015625) / v97) * 64.0;
        if (v100 >= 2147483650.0)
        {
          v101 = 0x7FFFFFFF;
        }
        else if (v100 <= -2147483650.0)
        {
          v101 = 0x80000000;
        }
        else
        {
          v101 = (int)v100;
        }
        v163 = v101;
        if (!*(_BYTE *)(a4 + 94))
        {
          v102 = 0.0;
          goto LABEL_116;
        }
        v102 = *(float *)(a4 + 84) * 64.0;
        if (v102 >= 2147483650.0)
        {
          v103 = 0x7FFFFFFF;
        }
        else
        {
          if (v102 > -2147483650.0)
          {
LABEL_116:
            v103 = (int)v102;
            goto LABEL_117;
          }
          v103 = 0x80000000;
        }
LABEL_117:
        if ((v103 ^ (2 * v103)) < 0)
          v104 = (v103 >> 31) + 0x7FFFFFFF;
        else
          v104 = 2 * v103;
        v105 = *(float *)(a4 + 88);
        v106 = (float)(ceilf((float)(v105 * (float)(v104 / 3)) * 0.015625) / v105) * 64.0;
        if (v106 >= 2147483650.0)
        {
          v107 = 0x7FFFFFFF;
        }
        else if (v106 <= -2147483650.0)
        {
          v107 = 0x80000000;
        }
        else
        {
          v107 = (int)v106;
        }
        v108 = (float)(floorf((float)(v105 * (float)(v103 / 3)) * 0.015625) / v105) * 64.0;
        if (v108 >= 2147483650.0)
        {
          v109 = 0x7FFFFFFF;
        }
        else if (v108 <= -2147483650.0)
        {
          v109 = 0x80000000;
        }
        else
        {
          v109 = (int)v108;
        }
        v161 = v109;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 96))(v18, 1);
        v189[0] = 0;
        v190 = 0;
        if (*(_BYTE *)(a5 + 64))
        {
          WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v189, a5);
          v190 = 1;
        }
        v110 = a12;
        WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::BorderDataRadii *)v189, v16, v158, v156, v107, v157, a13, a12, (uint64_t)&v191, SHIBYTE(a12));
        if (v190)
          WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v189);
        v111 = (float32x4_t)vdupq_n_s32(0x3C800000u);
        v186 = vmulq_f32(vcvtq_f32_s32(v191), v111);
        v187 = vmulq_f32(vcvtq_f32_s32(v192), v111);
        v188 = vmulq_f32(vcvtq_f32_s32(v193), v111);
        (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v18 + 464))(v18, &v186);
        v184[0] = 0;
        v185 = 0;
        if (*(_BYTE *)(a5 + 64))
        {
          WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v184, a5);
          v185 = 1;
        }
        v112 = *(_QWORD *)a7;
        v183 = v112;
        if ((v112 & 0x8000000000000) != 0)
        {
          v133 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFLL);
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 + 1, v133));
        }
        BYTE6(v154) = a13;
        WORD2(v154) = a12;
        LODWORD(v154) = a11;
        WebCore::BorderPainter::drawBoxSideFromPath(v17, v16, v32, v31, v184, v28, &v183, 8, a9, a10, v154);
        if ((v183 & 0x8000000000000) != 0)
        {
          v146 = (unsigned int *)(v183 & 0xFFFFFFFFFFFFLL);
          do
          {
            v147 = __ldaxr(v146);
            v148 = v147 - 1;
          }
          while (__stlxr(v148, v146));
          v110 = a12;
          if (!v148)
          {
            atomic_store(1u, v146);
            WTF::fastFree((WTF *)v146, v113);
          }
        }
        if (v185)
          WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v184);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 104))(v18, 1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 96))(v18, 1);
        v182 = *(_OWORD *)v16;
        if (a11 == 2)
        {
          v114 = v182 - 64;
          if (__OFSUB__((_DWORD)v182, 64))
            v114 = 0x80000000;
          LODWORD(v182) = v114;
          v115 = DWORD2(v182) + 64;
          if (__OFADD__(DWORD2(v182), 64))
            v115 = 0x7FFFFFFF;
          v116 = __OFADD__(v115, 64);
          v117 = v115 + 64;
          if (v116)
            v117 = 0x7FFFFFFF;
          DWORD2(v182) = v117;
          v118 = DWORD1(v182) - 64;
          if (__OFSUB__(DWORD1(v182), 64))
            v118 = 0x80000000;
          DWORD1(v182) = v118;
          v119 = HIDWORD(v182) + 64;
          if (__OFADD__(HIDWORD(v182), 64))
            v119 = 0x7FFFFFFF;
          v116 = __OFADD__(v119, 64);
          v120 = v119 + 64;
          if (v116)
            v120 = 0x7FFFFFFF;
          HIDWORD(v182) = v120;
          v168 += 64;
          v161 += 64;
          v163 += 64;
          v165 += 64;
        }
        v180[0] = 0;
        v181 = 0;
        if (*(_BYTE *)(a5 + 64))
        {
          WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v180, a5);
          v181 = 1;
        }
        WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::BorderDataRadii *)v180, (int *)&v182, v168, v163, v161, v165, a13, v110, (uint64_t)&v191, SHIBYTE(a12));
        if (v181)
          WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v180);
        v121 = (float32x4_t)vdupq_n_s32(0x3C800000u);
        v186 = vmulq_f32(vcvtq_f32_s32(v191), v121);
        v187 = vmulq_f32(vcvtq_f32_s32(v192), v121);
        v188 = vmulq_f32(vcvtq_f32_s32(v193), v121);
        (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v18 + 488))(v18, &v186);
        v178[0] = 0;
        v179 = 0;
        if (*(_BYTE *)(a5 + 64))
        {
          WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v178, a5);
          v179 = 1;
        }
        v122 = *(_QWORD *)a7;
        v177 = v122;
        if ((v122 & 0x8000000000000) != 0)
        {
          v135 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFLL);
          do
            v136 = __ldaxr(v135);
          while (__stlxr(v136 + 1, v135));
        }
        *(_WORD *)((char *)&v155 + 5) = __PAIR16__(a13, HIBYTE(a12));
        BYTE4(v155) = v110;
        LODWORD(v155) = a11;
        WebCore::BorderPainter::drawBoxSideFromPath(v17, v16, v32, v31, v178, v28, &v177, 8, a9, a10, v155);
        if ((v177 & 0x8000000000000) != 0)
        {
          v149 = (unsigned int *)(v177 & 0xFFFFFFFFFFFFLL);
          do
          {
            v150 = __ldaxr(v149);
            v151 = v150 - 1;
          }
          while (__stlxr(v151, v149));
          if (!v151)
          {
            atomic_store(1u, v149);
            WTF::fastFree((WTF *)v149, v123);
          }
        }
        if (v179)
        {
          v77 = (WebCore::BorderDataRadii *)v178;
LABEL_159:
          WebCore::BorderDataRadii::~BorderDataRadii(v77);
        }
LABEL_160:
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 104))(v18, 1);
        break;
      default:
        goto LABEL_3;
    }
  }
  return result;
}

void WebCore::BorderPainter::calculateBorderStyleColor(uint64_t *a1, char a2, char a3, WebCore::Color *this)
{
  _BOOL4 v6;
  int v7;
  double v8;
  double v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;

  v6 = a3 == 3 || a3 == 0;
  v7 = (a2 != 2) ^ v6;
  v8 = WebCore::Color::luminance(this);
  v9 = WebCore::Color::luminance(this);
  if (v8 > 0.0144438436)
  {
    if (v7)
    {
      WebCore::Color::darkened(this, a1);
      return;
    }
    if (v9 > 0.830770016)
    {
      v14 = *(_QWORD *)this;
      *a1 = *(_QWORD *)this;
      if ((v14 & 0x8000000000000) != 0)
      {
        v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      return;
    }
LABEL_16:
    WebCore::Color::lightened(this, a1);
    return;
  }
  if (v7)
    goto LABEL_16;
  WebCore::Color::lightened(this, &v17);
  WebCore::Color::lightened((WebCore::Color *)&v17, a1);
  if ((v17 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
  }
}

float WebCore::roundPointToDevicePixels(WebCore *this, const WebCore::LayoutPoint *a2, float a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = (double)*(int *)this * 0.015625;
  if ((a2 & 1) == 0)
    v3 = v3 + -0.000122070312;
  v4 = a3;
  v5 = round((v3 + (double)-*(_DWORD *)this) * v4) / v4 - (double)-*(_DWORD *)this;
  v6 = round(v3 * v4) / v4;
  if (v3 >= 0.0)
    return v6;
  else
    return v5;
}

int *WebCore::LayoutRect::LayoutRect<float,float,float,float>(int *result, float a2, float a3, float a4, float a5)
{
  double v5;
  int v6;
  int v7;
  double v8;
  int v9;
  double v10;
  int v11;
  int v12;
  double v13;
  int v14;

  v5 = a2 * 64.0;
  if (v5 > -2147483650.0)
    v6 = (int)v5;
  else
    v6 = 0x80000000;
  if (v5 < 2147483650.0)
    v7 = v6;
  else
    v7 = 0x7FFFFFFF;
  v8 = a3 * 64.0;
  if (v8 > -2147483650.0)
    v9 = (int)v8;
  else
    v9 = 0x80000000;
  if (v8 >= 2147483650.0)
    v9 = 0x7FFFFFFF;
  *result = v7;
  result[1] = v9;
  v10 = a4 * 64.0;
  if (v10 > -2147483650.0)
    v11 = (int)v10;
  else
    v11 = 0x80000000;
  if (v10 < 2147483650.0)
    v12 = v11;
  else
    v12 = 0x7FFFFFFF;
  result[2] = v12;
  v13 = a5 * 64.0;
  if (v13 >= 2147483650.0)
  {
    v14 = 0x7FFFFFFF;
  }
  else if (v13 <= -2147483650.0)
  {
    v14 = 0x80000000;
  }
  else
  {
    v14 = (int)v13;
  }
  result[3] = v14;
  return result;
}

unsigned int *WebCore::BorderPainter::drawLineForBoxSide(WebCore::GraphicsContext &,WebCore::Document const&,WebCore::FloatRect const&,WebCore::BoxSide,WebCore::Color,WebCore::BorderStyle,float,float,BOOL)::$_1::operator()(unsigned int *result, uint64_t a2, int a3, int a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  if (*(float *)(a2 + 8) > 0.0)
  {
    v6 = a2;
    if (*(float *)(a2 + 12) > 0.0)
    {
      v8 = *(_QWORD *)result;
      v7 = *((_QWORD *)result + 1);
      v9 = *((_QWORD *)result + 2);
      v15 = v9;
      if ((v9 & 0x8000000000000) != 0)
      {
        v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
      result = (unsigned int *)WebCore::BorderPainter::drawLineForBoxSide(v8, v7, v6, a3, (WebCore::Color *)&v15, a4);
      if ((v15 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
        do
        {
          v13 = __ldaxr(result);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, result));
        if (!v14)
        {
          atomic_store(1u, result);
          return (unsigned int *)WTF::fastFree((WTF *)result, v10);
        }
      }
    }
  }
  return result;
}

float WebCore::roundToDevicePixel(WebCore *this, float a2, float a3)
{
  double v3;
  int v4;
  double v5;

  v3 = a2 * 64.0;
  if (v3 >= 2147483650.0)
  {
    v4 = 0x7FFFFFFF;
  }
  else if (v3 <= -2147483650.0)
  {
    v4 = 0x80000000;
  }
  else
  {
    v4 = (int)v3;
  }
  v5 = (double)v4 * 0.015625;
  if (v5 < 0.0)
    return round((v5 + (double)-v4) * a3) / a3 - (double)-v4;
  else
    return round(v5 * a3) / a3;
}

uint64_t WebCore::RegionContext::isEventRegionContext(WebCore::RegionContext *this)
{
  return 0;
}

void WebCore::RegionContext::~RegionContext(WebCore::RegionContext *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E341E140;
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E341E140;
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  if (*((_DWORD *)this + 2))
  {
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
}

uint64_t WebCore::RenderTableCell::table(WebCore::RenderTableCell *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 46) != 39)
    goto LABEL_15;
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x196321CF8);
  }
  v5 = *(_QWORD *)(v4 + 32);
  if (!v5)
    return 0;
  result = *(_QWORD *)(v5 + 8);
  if (result)
  {
    v7 = *(unsigned __int8 *)(result + 46);
    if (v7 != 35 && v7 != 63)
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x196321CD8);
    }
  }
  return result;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isInlineBoxEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 60))
    return (*(_WORD *)(*(_QWORD *)(v3 + 48) + 80 * v2 + 50) & 0xE) == 6;
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isInlineBoxEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2);
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box15isRootInlineBoxEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 60))
    return (*(_WORD *)(*(_QWORD *)(v3 + 48) + 80 * v2 + 50) & 0xF) == 7;
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box15isRootInlineBoxEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
}

BOOL WebCore::outOfLineComponentsEqualIgnoringSemanticColor(unint64_t this, unint64_t a2, const WebCore::Color *a3)
{
  uint64_t v3;

  v3 = 0;
  if ((this & 0x8000000000000) != 0 && (a2 & 0x8000000000000) != 0)
    return *(float *)((this & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((a2 & 0xFFFFFFFFFFFFLL) + 4)
        && *(float *)((this & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((a2 & 0xFFFFFFFFFFFFLL) + 8)
        && *(float *)((this & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((a2 & 0xFFFFFFFFFFFFLL) + 0xC)
        && *(float *)((this & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((a2 & 0xFFFFFFFFFFFFLL) + 0x10)
        && ((a2 ^ this) & 0xFE000000000000) == 0
        && HIBYTE(this) == HIBYTE(a2);
  return v3;
}

BOOL WebCore::willBeOverdrawn(unsigned int a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  float v10;

  if ((a1 | 2) != 2)
    return 0;
  v3 = (uint64_t *)(a3 + 24 * a2);
  if (*((_BYTE *)v3 + 22))
  {
    if (*(float *)(a3 + 24 * a2 + 12) != 0.0
      && (*(unsigned __int8 *)(a3 + 24 * a2 + 20) < 2u || *(_BYTE *)(a3 + 24 * a2 + 21)))
    {
      return 0;
    }
  }
  v4 = *(_QWORD *)(a3 + 24 * a1);
  v5 = *v3;
  if ((v4 & 0x8000000000000) == 0)
  {
    if (v4 == v5 && (v5 & 0x8000000000000) == 0)
      goto LABEL_13;
    if ((v5 & 0x8000000000000) == 0)
    {
LABEL_12:
      if ((_BYTE)v5 == 0xFF)
        goto LABEL_13;
      return 0;
    }
    v10 = *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10);
LABEL_20:
    if (v10 == 1.0)
      goto LABEL_13;
    return 0;
  }
  if ((v5 & 0x8000000000000) == 0)
    goto LABEL_12;
  v10 = *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10);
  if (*(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4)
    || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8)
    || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC)
    || *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10) != v10
    || HIBYTE(v4) != HIBYTE(v5)
    || BYTE6(v4) != BYTE6(v5))
  {
    goto LABEL_20;
  }
LABEL_13:
  v7 = *(unsigned __int8 *)(a3 + 24 * a2 + 20);
  return v7 != 9 && (v7 & 0xFE) != 6;
}

void WTF::WeakHashMap<WebCore::RenderText,WebCore::FloatRect,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_23;
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      v7 = v6;
      v8 = (WTF **)(v3 + 24 * v6);
      v9 = *v8;
      if ((unint64_t)*v8 + 1 >= 2 && !*((_QWORD *)v9 + 1))
      {
        *v8 = 0;
        if (*(_DWORD *)v9 == 1)
          WTF::fastFree(v9, a2);
        else
          --*(_DWORD *)v9;
        *v8 = (WTF *)-1;
        ++v5;
      }
      --v6;
    }
    while (v7);
    v3 = *(_QWORD *)a1;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v11 = *(_DWORD *)(v10 - 12);
      else
        v11 = 0;
      *(_DWORD *)(v10 - 12) = v11 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v12 = *(_DWORD *)(v3 - 4);
      v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        v17 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
        v19 = (v18 | HIWORD(v18)) + 1;
        if (v19 > 0x400)
        {
          if (v19 > 2 * v13)
            goto LABEL_34;
        }
        else if (3 * v19 > 4 * v13)
        {
LABEL_32:
          v20 = (double)v13;
          v21 = (double)v19;
          v22 = 0.604166667;
          goto LABEL_35;
        }
        LODWORD(v19) = 2 * v19;
        if (v19 <= 0x400)
          goto LABEL_32;
LABEL_34:
        v20 = (double)v13;
        v21 = (double)v19;
        v22 = 0.416666667;
LABEL_35:
        if (v21 * v22 <= v20)
          LODWORD(v19) = 2 * v19;
        if (v19 <= 8)
          v23 = 8;
        else
          v23 = v19;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::FloatRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::FloatRect>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::FloatRect,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::FloatRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v23);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v15 = 0;
          goto LABEL_27;
        }
LABEL_24:
        v15 = *(_DWORD *)(v3 - 12);
        v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
          goto LABEL_28;
        goto LABEL_27;
      }
LABEL_23:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_24;
    }
  }
  v15 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_27:
  v16 = v15;
LABEL_28:
  *(_DWORD *)(a1 + 12) = 2 * v16;
}

void WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::FloatRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::FloatRect>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::FloatRect,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::FloatRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  WTF **v12;
  WTF *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  WTF **v22;
  WTF *v23;
  WTF *v24;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (WTF **)(v4 + 24 * i);
      v13 = *v12;
      if (*v12 != (WTF *)-1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = (WTF **)(v14 + 24 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (*v22);
          *v22 = 0;
          v23 = *v12;
          *v12 = 0;
          *v22 = v23;
          *(_OWORD *)(v14 + 24 * v21 + 8) = *(_OWORD *)(v4 + 24 * i + 8);
          v24 = *v12;
          *v12 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
              WTF::fastFree(v24, v8);
            else
              --*(_DWORD *)v24;
          }
        }
        else
        {
          *v12 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WTF::Vector<WebCore::AutoTableLayout::Layout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(WTF **)a1;
      v4 = *(unsigned int *)(a1 + 12);
      v5 = 40 * a2;
      v6 = WTF::fastMalloc((WTF *)(40 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v4)
      {
        v8 = v6;
        v9 = 40 * v4;
        v10 = (int *)v3;
        do
        {
          WebCore::AutoTableLayout::Layout::Layout(v8, v10);
          WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v10);
          v8 += 40;
          v10 += 10;
          v9 -= 40;
        }
        while (v9);
      }
      if (v3)
      {
        if (*(WTF **)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7);
      }
    }
  }
}

__n128 WebCore::AutoTableLayout::Layout::Layout(uint64_t a1, int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  __n128 result;
  int v7;
  int v8;

  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 5) = 0;
  v2 = *((unsigned __int8 *)a2 + 4);
  *(_BYTE *)(a1 + 4) = v2;
  *(_BYTE *)(a1 + 5) = *((_BYTE *)a2 + 5);
  if (v2 - 2 < 9)
  {
    v3 = *((unsigned __int8 *)a2 + 6);
    *(_BYTE *)(a1 + 6) = v3;
    if (v3)
    {
      *(_DWORD *)a1 = *a2;
      goto LABEL_4;
    }
    v7 = *a2;
    goto LABEL_9;
  }
  if (v2 <= 0xD)
  {
    if (((1 << v2) & 0x3003) != 0)
    {
      *(_DWORD *)a1 = 0;
    }
    else if (v2 == 11)
    {
      v7 = *a2;
      *a2 = 0;
LABEL_9:
      *(_DWORD *)a1 = v7;
    }
  }
LABEL_4:
  *((_BYTE *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 13) = 0;
  v4 = *((unsigned __int8 *)a2 + 12);
  *(_BYTE *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 13) = *((_BYTE *)a2 + 13);
  if (v4 - 2 >= 9)
  {
    if (v4 > 0xD)
      goto LABEL_7;
    if (((1 << v4) & 0x3003) != 0)
    {
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_7;
    }
    if (v4 != 11)
      goto LABEL_7;
    v8 = a2[2];
    a2[2] = 0;
    goto LABEL_11;
  }
  v5 = *((unsigned __int8 *)a2 + 14);
  *(_BYTE *)(a1 + 14) = v5;
  if (!v5)
  {
    v8 = a2[2];
LABEL_11:
    *(_DWORD *)(a1 + 8) = v8;
    goto LABEL_7;
  }
  *(_DWORD *)(a1 + 8) = a2[2];
LABEL_7:
  *((_BYTE *)a2 + 12) = 0;
  result = *((__n128 *)a2 + 1);
  *(_QWORD *)(a1 + 29) = *(_QWORD *)((char *)a2 + 29);
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t WTF::Vector<WebCore::AutoTableLayout::Layout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  int *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(unsigned int *)(result + 12);
    v8 = 40 * v4;
    result = WTF::fastMalloc((WTF *)(40 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v5 = result;
    if (!(_DWORD)v7)
    {
LABEL_9:
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v9);
      }
      return result;
    }
    v10 = 0;
    v11 = 40 * v7;
    v12 = &dword_1ECE90000;
    while (1)
    {
      v13 = result + v10;
      *(_DWORD *)v13 = 0;
      *(_WORD *)(v13 + 5) = 0;
      v14 = (char *)v6 + v10;
      v15 = *((unsigned __int8 *)v6 + v10 + 4);
      *(_BYTE *)(v13 + 4) = v15;
      *(_BYTE *)(v13 + 5) = *((_BYTE *)v6 + v10 + 5);
      if (v15 - 2 < 9)
        break;
      if (v15 <= 0xD)
      {
        if (((1 << v15) & 0x3003) != 0)
        {
          *(_DWORD *)v13 = 0;
        }
        else if (v15 == 11)
        {
          v23 = *(_DWORD *)((char *)v6 + v10);
          *(_DWORD *)((char *)v6 + v10) = 0;
LABEL_26:
          *(_DWORD *)v13 = v23;
        }
      }
LABEL_18:
      v14[4] = 0;
      v17 = result + v10;
      v18 = (char *)v6 + v10;
      *(_DWORD *)(v17 + 8) = 0;
      *(_WORD *)(v17 + 13) = 0;
      v19 = *((unsigned __int8 *)v6 + v10 + 12);
      *(_BYTE *)(v17 + 12) = v19;
      *(_BYTE *)(v17 + 13) = *((_BYTE *)v6 + v10 + 13);
      if (v19 - 2 >= 9)
      {
        if (v19 > 0xD)
          goto LABEL_21;
        if (((1 << v19) & 0x3003) != 0)
        {
          *(_DWORD *)(v17 + 8) = 0;
          goto LABEL_21;
        }
        if (v19 != 11)
          goto LABEL_21;
        v24 = *((_DWORD *)v18 + 2);
        *((_DWORD *)v18 + 2) = 0;
        goto LABEL_28;
      }
      v20 = v18[14];
      *(_BYTE *)(v17 + 14) = v20;
      if (!v20)
      {
        v24 = *((_DWORD *)v18 + 2);
LABEL_28:
        *(_DWORD *)(v17 + 8) = v24;
        goto LABEL_21;
      }
      *(_DWORD *)(v17 + 8) = *((_DWORD *)v18 + 2);
LABEL_21:
      v18[12] = 0;
      v21 = result + v10;
      v22 = *(_OWORD *)((char *)v6 + v10 + 16);
      *(_QWORD *)(v21 + 29) = *(_QWORD *)((char *)v6 + v10 + 29);
      *(_OWORD *)(v21 + 16) = v22;
      if (v18[12] == 11)
      {
        v28 = v10;
        v29 = (char *)v6 + v10;
        v30 = result;
        v32 = v11;
        v25 = v12;
        if ((v12[808] & 1) == 0)
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
          *((_BYTE *)v12 + 3232) = 1;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v18 + 2));
        result = v30;
        v11 = v32;
        v10 = v28;
        v14 = v29;
        v12 = v25;
      }
      if (v14[4] == 11)
      {
        v31 = result;
        v33 = v11;
        v26 = v12;
        if ((v12[808] & 1) == 0)
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
          *((_BYTE *)v12 + 3232) = 1;
        }
        v27 = v10;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)((char *)v6 + v10));
        v10 = v27;
        result = v31;
        v11 = v33;
        v12 = v26;
      }
      v10 += 40;
      if (v11 == v10)
        goto LABEL_9;
    }
    v16 = v14[6];
    *(_BYTE *)(v13 + 6) = v16;
    if (v16)
    {
      *(_DWORD *)v13 = *(_DWORD *)((char *)v6 + v10);
      goto LABEL_18;
    }
    v23 = *(_DWORD *)((char *)v6 + v10);
    goto LABEL_26;
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::AutoTableLayout::Layout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(unsigned int *result, void *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;

  if (result[2])
  {
    v2 = result;
    v3 = result[3];
    result = *(unsigned int **)result;
    if ((_DWORD)v3)
    {
      v4 = result + 2;
      v5 = 40 * v3;
      do
      {
        if (*((_BYTE *)v4 + 4) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v4);
        }
        if (*((_BYTE *)v4 - 4) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v4 - 2));
        }
        v4 += 10;
        v5 -= 40;
      }
      while (v5);
      v2[3] = 0;
      result = *(unsigned int **)v2;
    }
    if (result)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WebCore::Length *WebCore::AutoTableLayout::Layout::Layout(WebCore::Length *this, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int *v6;
  unsigned int v7;
  int v8;
  __int128 v9;

  *(_DWORD *)this = 0;
  *(_WORD *)((char *)this + 5) = 0;
  v4 = *(unsigned __int8 *)(a2 + 4);
  *((_BYTE *)this + 4) = v4;
  *((_BYTE *)this + 5) = *(_BYTE *)(a2 + 5);
  if (v4 <= 0xD)
  {
    v5 = 1 << v4;
    if ((v5 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 6) = *(_BYTE *)(a2 + 6);
      *(_DWORD *)this = *(_DWORD *)a2;
    }
    else if ((v5 & 0x3003) != 0)
    {
      *(_DWORD *)this = 0;
    }
    else
    {
      *(_DWORD *)this = *(_DWORD *)a2;
      WebCore::Length::ref((int *)this);
    }
  }
  *((_DWORD *)this + 2) = 0;
  v6 = (int *)((char *)this + 8);
  *(_WORD *)((char *)this + 13) = 0;
  v7 = *(unsigned __int8 *)(a2 + 12);
  *((_BYTE *)this + 12) = v7;
  *((_BYTE *)this + 13) = *(_BYTE *)(a2 + 13);
  if (v7 <= 0xD)
  {
    v8 = 1 << v7;
    if ((v8 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 14) = *(_BYTE *)(a2 + 14);
      *v6 = *(_DWORD *)(a2 + 8);
    }
    else if ((v8 & 0x3003) != 0)
    {
      *v6 = 0;
    }
    else
    {
      *v6 = *(_DWORD *)(a2 + 8);
      WebCore::Length::ref(v6);
    }
  }
  v9 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)((char *)this + 29) = *(_QWORD *)(a2 + 29);
  *((_OWORD *)this + 1) = v9;
  return this;
}

uint64_t WTF::Vector<WebCore::RenderTableCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t result, void *a2)
{
  WTF *v2;

  if (*(_DWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 12))
      *(_DWORD *)(result + 12) = 0;
    v2 = *(WTF **)result;
    if (*(_QWORD *)result)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return result;
}

void **WTF::Vector<WebCore::RenderTableCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  int v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = *((unsigned int *)result + 2);
  if (v4 < a2)
  {
    v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    result = WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, a2);
  }
  *((_DWORD *)v3 + 3) = v2;
  return result;
}

uint64_t WTF::Vector<WebCore::FillLayer const*,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FillLayer const*&>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<WebCore::FillLayer const*,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<WebCore::FillLayer const*,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 9)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x196322CC0);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 9)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::BaselineGroup,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  int v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = *(_DWORD *)(result + 12);
      v8 = 24 * v4;
      result = WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v5 = result;
      if (v7)
      {
        v10 = (_QWORD *)result;
        result = (uint64_t)v6;
        do
        {
          *v10 = *(_QWORD *)result;
          v10[1] = 0;
          v11 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          v10[1] = v11;
          v10[2] = *(_QWORD *)(result + 16);
          result = WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>::~KeyValuePair(result, v9)+ 24;
          v10 += 3;
        }
        while ((WTF *)result != (WTF *)((char *)v6 + 24 * v7));
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSFilter::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X3>, float *a5@<X4>, const WebCore::SVGFilter *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  const WebCore::SVGFilter *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v14 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v14)
  {
    v18 = 0;
LABEL_11:
    v27 = 0;
    goto LABEL_12;
  }
  v15 = *(uint64_t **)a2;
  v16 = 8 * v14 - 8;
  do
  {
    v17 = *v15++;
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 80))(v17);
    if ((v18 & 1) != 0)
      break;
    v19 = v16;
    v16 -= 8;
  }
  while (v19);
  v20 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v20)
    goto LABEL_11;
  v41 = a1;
  v21 = a5;
  v22 = a6;
  v23 = a7;
  v24 = *(uint64_t **)a2;
  v25 = 8 * v20 - 8;
  do
  {
    v26 = *v24++;
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
    if ((v27 & 1) != 0)
      break;
    v28 = v25;
    v25 -= 8;
  }
  while (v28);
  a7 = v23;
  a6 = v22;
  a5 = v21;
  a1 = v41;
LABEL_12:
  v29 = WTF::fastMalloc((WTF *)0x60);
  v30 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v30 = 0;
  *(_OWORD *)(v30 + 8) = xmmword_19689B170;
  *(_QWORD *)(v30 + 24) = v29;
  *(_BYTE *)(v29 + 48) = 0;
  *(_OWORD *)(v29 + 16) = 0u;
  *(_OWORD *)(v29 + 32) = 0u;
  *(_QWORD *)v29 = off_1E3415E68;
  *(_QWORD *)(v29 + 8) = v30;
  *(_BYTE *)(v29 + 49) = 1;
  *(_QWORD *)(v29 + 52) = *a4;
  *(_QWORD *)(v29 + 60) = 0;
  *(_QWORD *)(v29 + 68) = 0;
  *(_QWORD *)v29 = off_1E341E1D8;
  *(_BYTE *)(v29 + 76) = v18;
  *(_BYTE *)(v29 + 77) = v27;
  *(_QWORD *)(v29 + 80) = 0;
  *(_QWORD *)(v29 + 88) = 0;
  result = WebCore::CSSFilter::buildFilterFunctions(v29, a1, (uint64_t **)a2, a3, a5, a6);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 48))(v29);
    *(_BYTE *)(v29 + 49) = result & a3;
    *a7 = v29;
    return result;
  }
  *a7 = 0;
  v33 = *(_QWORD *)(v29 + 8);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_18;
  }
  result = MEMORY[0x19AEA534C](v33);
LABEL_18:
  v35 = *(_QWORD *)(v33 + 8);
  v36 = v35 - 1;
  *(_QWORD *)(v33 + 8) = v35 - 1;
  if (v35 == 1)
  {
    v40 = *(_QWORD *)(v33 + 16);
    v37 = *(_QWORD *)(v33 + 24);
    *(_QWORD *)(v33 + 24) = 0;
    v38 = v40 != 0;
  }
  else
  {
    v37 = 0;
    v38 = 1;
  }
  v39 = __ldxr((unsigned __int8 *)v33);
  if (v39 != 1)
  {
    __clrex();
LABEL_25:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v33);
    if (v36)
      return result;
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
    goto LABEL_25;
  if (v36)
    return result;
LABEL_26:
  if (v37)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (!v38)
    return WTF::fastFree((WTF *)v33, v32);
  return result;
}

BOOL WebCore::CSSFilter::buildFilterFunctions(uint64_t a1, uint64_t a2, uint64_t **a3, char a4, float *a5, const WebCore::SVGFilter *a6)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WebCore::ReferencedSVGResources *v14;
  uint64_t v15;
  BOOL v16;
  void *v17;
  WTF *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 v22;
  int v23;
  int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  const void *v32;
  WTF *v33;
  unsigned int v34;
  BOOL v35;
  unsigned int *v36;
  unsigned int v37;
  float v38;
  unint64_t v39;
  const void *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  int v44;
  double v46;
  unint64_t v47;
  const void *v48;
  unsigned int v49;
  BOOL v50;
  unsigned int *v51;
  unsigned int v52;
  float v53;
  unint64_t v54;
  const void *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  unint64_t v67;
  const void *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  uint64_t v78;
  float32x2_t v79;
  float32x2_t v80;
  unint64_t v81;
  const void *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  int v86;
  double v88;
  unint64_t v89;
  const void *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  int v94;
  double v96;
  unint64_t v97;
  const void *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  WebCore::Length *v102;
  int v103;
  float v104;
  unsigned int *v105;
  unsigned int v106;
  int v107;
  double v109;
  float v110;
  unint64_t v111;
  const void *v112;
  unsigned int v113;
  float v114;
  unsigned int v115;
  unint64_t v116;
  const void *v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  const void *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  void *v126;
  void *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  WTF *v132;
  uint64_t v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  WTF *v150;
  float v156;
  float v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE v160[20];
  __int128 v161;
  int v162;
  WTF *v163;
  _BYTE v164[12];
  __int128 v165;
  int v166;
  char v167;
  const void **v168;
  const void *v169[2];

  v7 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v7)
  {
    v8 = *a3;
    v9 = (uint64_t)&(*a3)[v7];
    v10 = (void **)(a1 + 80);
    v158 = v9;
    while (2)
    {
      v11 = *v8;
      switch(*(_BYTE *)(*v8 + 12))
      {
        case 0:
          v12 = (unsigned int *)(v11 + 8);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
          v14 = *(WebCore::ReferencedSVGResources **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40);
          v15 = *(_QWORD *)v14;
          if (*(_QWORD *)v14)
            v16 = (*(_WORD *)(*(_QWORD *)v14 + 28) & 0x80) == 0;
          else
            v16 = 1;
          if (!v16 && !*(_BYTE *)(v15 + 193))
          {
            v144 = *(_QWORD *)(v15 + 200);
            if (v144)
            {
              v145 = *(_QWORD *)(v144 + 8);
              if (v145)
              {
                if (*(_WORD *)(*(_QWORD *)(v145 + 96) + 10) == 242)
                  v14 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v14 + 2);
              }
            }
            v9 = v158;
          }
          WebCore::ReferencedSVGResources::referencedFilterElement(v14, (WebCore::TreeScope *)v11, &v163);
          v18 = v163;
          if (v163)
          {
            v19 = (_QWORD *)*((_QWORD *)v163 + 24);
            v20 = v19[3];
            if (!v20 || !*(_DWORD *)(v20 - 12))
              goto LABEL_13;
            v140 = *(unsigned int *)(v20 - 4);
            if ((_DWORD)v140)
            {
              v141 = 8 * v140;
              v142 = (uint64_t *)v19[3];
              while ((unint64_t)(*v142 + 1) <= 1)
              {
                ++v142;
                v141 -= 8;
                if (!v141)
                  goto LABEL_13;
              }
            }
            else
            {
              v142 = (uint64_t *)v19[3];
            }
            v147 = (uint64_t *)(v20 + 8 * v140);
            if (v142 != v147)
            {
              v148 = *v142;
              while (!*(_QWORD *)(v148 + 8))
              {
                do
                {
                  if (++v142 == v147)
                    goto LABEL_13;
                  v148 = *v142;
                }
                while ((unint64_t)(*v142 + 1) <= 1);
                if (v142 == v147)
                  goto LABEL_13;
              }
              v21 = v19 + 6;
            }
            else
            {
LABEL_13:
              v21 = v19 + 5;
            }
            v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v21 + 32))(*v21);
            LODWORD(v163) = WebCore::SVGLengthContext::resolveRectangle<WebCore::SVGFilterElement>((uint64_t *)v18, v22, a5);
            HIDWORD(v163) = v23;
            *(_DWORD *)v164 = v24;
            *(_DWORD *)&v164[4] = v25;
            *(_QWORD *)v160 = *(_QWORD *)(a1 + 52);
            WebCore::SVGFilter::create((uint64_t *)v18, a4, v160, &v163, a5, a6, 0, 0, (uint64_t *)v169);
            if (*((_DWORD *)v18 + 6) == 2)
            {
              v9 = v158;
              if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v18, v17);
            }
            else
            {
              *((_DWORD *)v18 + 6) -= 2;
              v9 = v158;
            }
          }
          else
          {
            v169[0] = 0;
          }
          v33 = (WTF *)v169[0];
          v169[0] = 0;
          do
          {
            v115 = __ldaxr(v12);
            v35 = --v115 == 0;
          }
          while (__stlxr(v115, v12));
          goto LABEL_181;
        case 1:
          v70 = (unsigned int *)(v11 + 8);
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 + 1, v70));
          if (*(unsigned __int8 *)(v11 + 12) - 1 >= 4)
          {
            __break(0xC471u);
            JUMPOUT(0x19632422CLL);
          }
          v72 = *(double *)(v11 + 16);
          v73 = 1.0 - v72;
          if (v73 <= 1.0)
            v74 = v73;
          else
            v74 = 1.0;
          if (v73 >= 0.0)
            v75 = v74;
          else
            v75 = 0.0;
          v157 = v75;
          v76 = (float)(v75 * 0.7874) + 0.2126;
          v77 = (float)(v75 * -0.0722) + 0.0722;
          v78 = WTF::fastMalloc((WTF *)0x50);
          v163 = (WTF *)v78;
          *(_QWORD *)(v78 + 12) = 0;
          *(float *)(v78 + 28) = v77;
          v79 = vmla_n_f32((float32x2_t)0x3F3717593E59B3D0, (float32x2_t)0x3E91D14EBE59B3D0, v157);
          *(float32x2_t *)(v78 + 20) = v79;
          *(_QWORD *)(v78 + 32) = 0;
          *(_DWORD *)(v78 + 40) = v79.i32[0];
          v80 = vmla_n_f32((float32x2_t)0x3D93DD983F371759, (float32x2_t)0x3F6D844DBF371759, v157);
          *(float *)v78 = v76;
          *(_DWORD *)(v78 + 4) = v80.i32[0];
          *(float *)(v78 + 8) = v77;
          *(float32x2_t *)(v78 + 44) = v80;
          *(_QWORD *)(v78 + 60) = 0;
          *(_QWORD *)(v78 + 52) = 0;
          *(_DWORD *)(v78 + 68) = 0;
          *(_QWORD *)(v78 + 72) = 1065353216;
          *(_QWORD *)v164 = 0x1400000014;
          v81 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v81 != -1)
          {
            *(_QWORD *)v160 = &v168;
            v169[0] = v160;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v169, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v82 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          v169[0] = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
            CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
          WebCore::FEColorMatrix::create(1, (uint64_t *)&v163, v169, (uint64_t *)v160);
          v33 = *(WTF **)v160;
          if (v82)
            CFRelease(v82);
          if (v163)
            WTF::fastFree(v163, v17);
          do
          {
            v83 = __ldaxr(v70);
            v35 = --v83 == 0;
          }
          while (__stlxr(v83, v70));
          goto LABEL_181;
        case 2:
          v57 = (unsigned int *)(v11 + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 + 1, v57));
          if (*(unsigned __int8 *)(v11 + 12) - 1 >= 4)
          {
            __break(0xC471u);
            JUMPOUT(0x19632420CLL);
          }
          v59 = *(double *)(v11 + 16);
          v60 = 1.0 - v59;
          if (v60 <= 1.0)
            v61 = v60;
          else
            v61 = 1.0;
          if (v60 >= 0.0)
            v62 = v61;
          else
            v62 = 0.0;
          v156 = v62;
          v63 = (float)(v62 * -0.189) + 0.189;
          v64 = (float)(v62 * -0.168) + 0.168;
          v65 = (float)(v62 * 0.869) + 0.131;
          v66 = WTF::fastMalloc((WTF *)0x50);
          v163 = (WTF *)v66;
          *(float32x2_t *)v66 = vmla_n_f32((float32x2_t)0x3F44DD2F3EC9374CLL, (float32x2_t)0xBF44DD2F3F1B645ALL, v156);
          *(float *)(v66 + 8) = v63;
          *(_QWORD *)(v66 + 12) = 0;
          *(float32x2_t *)(v66 + 20) = vmla_n_f32((float32x2_t)0x3F2F9DB23EB2B021, (float32x2_t)0x3EA0C49CBEB2B021, v156);
          *(float *)(v66 + 28) = v64;
          *(_QWORD *)(v66 + 32) = 0;
          *(float32x2_t *)(v66 + 40) = vmla_n_f32((float32x2_t)0x3F08B4393E8B4396, (float32x2_t)0xBF08B439BE8B4396, v156);
          *(float *)(v66 + 48) = v65;
          *(_QWORD *)(v66 + 60) = 0;
          *(_QWORD *)(v66 + 52) = 0;
          *(_DWORD *)(v66 + 68) = 0;
          *(_QWORD *)(v66 + 72) = 1065353216;
          *(_QWORD *)v164 = 0x1400000014;
          v67 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v67 != -1)
          {
            *(_QWORD *)v160 = &v168;
            v169[0] = v160;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v169, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v68 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          v169[0] = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
            CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
          WebCore::FEColorMatrix::create(1, (uint64_t *)&v163, v169, (uint64_t *)v160);
          v33 = *(WTF **)v160;
          if (v68)
            CFRelease(v68);
          if (v163)
            WTF::fastFree(v163, v17);
          do
          {
            v69 = __ldaxr(v57);
            v35 = --v69 == 0;
          }
          while (__stlxr(v69, v57));
          goto LABEL_181;
        case 3:
          v51 = (unsigned int *)(v11 + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 + 1, v51));
          if (*(unsigned __int8 *)(v11 + 12) - 1 >= 4)
          {
            __break(0xC471u);
            JUMPOUT(0x1963241ECLL);
          }
          v53 = *(double *)(v11 + 16);
          v163 = (WTF *)WTF::fastMalloc((WTF *)4);
          *(float *)v163 = v53;
          *(_QWORD *)v164 = 0x100000001;
          v54 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v54 != -1)
          {
            *(_QWORD *)v160 = &v168;
            v169[0] = v160;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v169, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v55 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          v169[0] = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
            CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
          WebCore::FEColorMatrix::create(2, (uint64_t *)&v163, v169, (uint64_t *)v160);
          v33 = *(WTF **)v160;
          if (v55)
            CFRelease(v55);
          if (v163)
            WTF::fastFree(v163, v17);
          do
          {
            v56 = __ldaxr(v51);
            v35 = --v56 == 0;
          }
          while (__stlxr(v56, v51));
          goto LABEL_181;
        case 4:
          v36 = (unsigned int *)(v11 + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 + 1, v36));
          if (*(unsigned __int8 *)(v11 + 12) - 1 >= 4)
          {
            __break(0xC471u);
            JUMPOUT(0x19632424CLL);
          }
          v38 = *(double *)(v11 + 16);
          v163 = (WTF *)WTF::fastMalloc((WTF *)4);
          *(float *)v163 = v38;
          *(_QWORD *)v164 = 0x100000001;
          v39 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v39 != -1)
          {
            *(_QWORD *)v160 = &v168;
            v169[0] = v160;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v169, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v40 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          v169[0] = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
            CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
          WebCore::FEColorMatrix::create(3, (uint64_t *)&v163, v169, (uint64_t *)v160);
          v33 = *(WTF **)v160;
          if (v40)
            CFRelease(v40);
          if (v163)
            WTF::fastFree(v163, v17);
          do
          {
            v41 = __ldaxr(v36);
            v35 = --v41 == 0;
          }
          while (__stlxr(v41, v36));
          goto LABEL_181;
        case 5:
          v42 = (unsigned int *)(v11 + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
          v44 = *(unsigned __int8 *)(v11 + 12);
          if ((v44 - 7) >= 3 && v44 != 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19632426CLL);
          }
          v46 = *(double *)(v11 + 16);
          *(_QWORD *)&v164[4] = 0;
          v165 = 0uLL;
          v166 = 0;
          LOBYTE(v163) = 4;
          *(float *)&v46 = v46;
          *((float *)&v163 + 1) = (float)(*(float *)&v46 * -2.0) + 1.0;
          *(_DWORD *)v164 = LODWORD(v46);
          v160[0] = 0;
          *(_OWORD *)&v160[4] = 0u;
          v161 = 0u;
          v162 = 0;
          v47 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v47 != -1)
          {
            v169[0] = &v167;
            v168 = v169;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v168, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v48 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
          {
            CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
            v33 = (WTF *)WTF::fastMalloc((WTF *)0xE0);
            v169[0] = v48;
            CFRetain(v48);
            WebCore::FEComponentTransfer::FEComponentTransfer((uint64_t)v33, (__int128 *)&v163, (__int128 *)&v163, (__int128 *)&v163, (__int128 *)v160, v169);
            CFRelease(v48);
            CFRelease(v48);
          }
          else
          {
            v33 = (WTF *)WTF::fastMalloc((WTF *)0xE0);
            v169[0] = 0;
            WebCore::FEComponentTransfer::FEComponentTransfer((uint64_t)v33, (__int128 *)&v163, (__int128 *)&v163, (__int128 *)&v163, (__int128 *)v160, v169);
          }
          if (*(_QWORD *)((char *)&v161 + 4))
            WTF::fastFree(*(WTF **)((char *)&v161 + 4), v17);
          if (*(_QWORD *)((char *)&v165 + 4))
            WTF::fastFree(*(WTF **)((char *)&v165 + 4), v17);
          do
          {
            v49 = __ldaxr(v42);
            v50 = --v49 == 0;
          }
          while (__stlxr(v49, v42));
          goto LABEL_162;
        case 7:
          v84 = (unsigned int *)(v11 + 8);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 + 1, v84));
          v86 = *(unsigned __int8 *)(v11 + 12);
          if ((v86 - 7) >= 3 && v86 != 5)
          {
            __break(0xC471u);
            JUMPOUT(0x19632428CLL);
          }
          v88 = *(double *)(v11 + 16);
          v165 = 0uLL;
          v166 = 0;
          LOBYTE(v163) = 4;
          *(float *)&v88 = v88;
          HIDWORD(v163) = LODWORD(v88);
          memset(v164, 0, sizeof(v164));
          v160[0] = 0;
          *(_OWORD *)&v160[4] = 0u;
          v161 = 0u;
          v162 = 0;
          v89 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v89 != -1)
          {
            v169[0] = &v167;
            v168 = v169;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v168, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v90 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
          {
            CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
            v33 = (WTF *)WTF::fastMalloc((WTF *)0xE0);
            v169[0] = v90;
            CFRetain(v90);
            WebCore::FEComponentTransfer::FEComponentTransfer((uint64_t)v33, (__int128 *)v160, (__int128 *)v160, (__int128 *)v160, (__int128 *)&v163, v169);
            CFRelease(v90);
            CFRelease(v90);
          }
          else
          {
            v33 = (WTF *)WTF::fastMalloc((WTF *)0xE0);
            v169[0] = 0;
            WebCore::FEComponentTransfer::FEComponentTransfer((uint64_t)v33, (__int128 *)v160, (__int128 *)v160, (__int128 *)v160, (__int128 *)&v163, v169);
          }
          if (*(_QWORD *)((char *)&v161 + 4))
            WTF::fastFree(*(WTF **)((char *)&v161 + 4), v17);
          if (*(_QWORD *)((char *)&v165 + 4))
            WTF::fastFree(*(WTF **)((char *)&v165 + 4), v17);
          do
          {
            v91 = __ldaxr(v84);
            v50 = --v91 == 0;
          }
          while (__stlxr(v91, v84));
          goto LABEL_162;
        case 8:
          v92 = (unsigned int *)(v11 + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 + 1, v92));
          v94 = *(unsigned __int8 *)(v11 + 12);
          if ((v94 - 7) >= 3 && v94 != 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1963242ACLL);
          }
          v96 = *(double *)(v11 + 16);
          v165 = 0uLL;
          v166 = 0;
          LOBYTE(v163) = 4;
          *(float *)&v96 = v96;
          HIDWORD(v163) = LODWORD(v96);
          memset(v164, 0, sizeof(v164));
          v160[0] = 0;
          *(_OWORD *)&v160[4] = 0u;
          v161 = 0u;
          v162 = 0;
          v97 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v97 != -1)
          {
            v169[0] = &v167;
            v168 = v169;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v168, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v98 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
          {
            CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
            v33 = (WTF *)WTF::fastMalloc((WTF *)0xE0);
            v169[0] = v98;
            CFRetain(v98);
            WebCore::FEComponentTransfer::FEComponentTransfer((uint64_t)v33, (__int128 *)&v163, (__int128 *)&v163, (__int128 *)&v163, (__int128 *)v160, v169);
            CFRelease(v98);
            CFRelease(v98);
          }
          else
          {
            v33 = (WTF *)WTF::fastMalloc((WTF *)0xE0);
            v169[0] = 0;
            WebCore::FEComponentTransfer::FEComponentTransfer((uint64_t)v33, (__int128 *)&v163, (__int128 *)&v163, (__int128 *)&v163, (__int128 *)v160, v169);
          }
          if (*(_QWORD *)((char *)&v161 + 4))
            WTF::fastFree(*(WTF **)((char *)&v161 + 4), v17);
          if (*(_QWORD *)((char *)&v165 + 4))
            WTF::fastFree(*(WTF **)((char *)&v165 + 4), v17);
          do
          {
            v99 = __ldaxr(v92);
            v50 = --v99 == 0;
          }
          while (__stlxr(v99, v92));
          goto LABEL_162;
        case 9:
          v105 = (unsigned int *)(v11 + 8);
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 + 1, v105));
          v107 = *(unsigned __int8 *)(v11 + 12);
          if ((v107 - 7) >= 3 && v107 != 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1963242CCLL);
          }
          v109 = *(double *)(v11 + 16);
          *(_QWORD *)&v164[4] = 0;
          v165 = 0uLL;
          v166 = 0;
          LOBYTE(v163) = 4;
          *(float *)&v109 = v109;
          v110 = *(float *)&v109 * -0.5 + 0.5;
          HIDWORD(v163) = LODWORD(v109);
          *(float *)v164 = v110;
          v160[0] = 0;
          *(_OWORD *)&v160[4] = 0u;
          v161 = 0u;
          v162 = 0;
          v111 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v111 != -1)
          {
            v169[0] = &v167;
            v168 = v169;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v168, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v112 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
          {
            CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
            v33 = (WTF *)WTF::fastMalloc((WTF *)0xE0);
            v169[0] = v112;
            CFRetain(v112);
            WebCore::FEComponentTransfer::FEComponentTransfer((uint64_t)v33, (__int128 *)&v163, (__int128 *)&v163, (__int128 *)&v163, (__int128 *)v160, v169);
            CFRelease(v112);
            CFRelease(v112);
          }
          else
          {
            v33 = (WTF *)WTF::fastMalloc((WTF *)0xE0);
            v169[0] = 0;
            WebCore::FEComponentTransfer::FEComponentTransfer((uint64_t)v33, (__int128 *)&v163, (__int128 *)&v163, (__int128 *)&v163, (__int128 *)v160, v169);
          }
          if (*(_QWORD *)((char *)&v161 + 4))
            WTF::fastFree(*(WTF **)((char *)&v161 + 4), v17);
          if (*(_QWORD *)((char *)&v165 + 4))
            WTF::fastFree(*(WTF **)((char *)&v165 + 4), v17);
          do
          {
            v113 = __ldaxr(v105);
            v50 = --v113 == 0;
          }
          while (__stlxr(v113, v105));
LABEL_162:
          if (v50)
          {
            atomic_store(1u, (unsigned int *)(v11 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          }
          goto LABEL_184;
        case 0xA:
          v100 = (unsigned int *)(v11 + 8);
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 + 1, v100));
          v102 = (WebCore::Length *)(v11 + 16);
          v103 = *(unsigned __int8 *)(v11 + 20);
          if (v103 == 4)
          {
            if (*(_BYTE *)(v11 + 22))
              v104 = *(float *)v102;
            else
              v104 = (float)*(int *)v102;
          }
          else if (v103 == 3)
          {
            v114 = *(float *)(v11 + 16);
            if (!*(_BYTE *)(v11 + 22))
              v114 = (float)*(int *)(v11 + 16);
            v104 = (float)(v114 * 0.0) / 100.0;
          }
          else
          {
            if (v103 == 11)
            {
              WebCore::Length::nonNanCalculatedValue(v102, 0.0);
              v104 = v146;
            }
            else
            {
              v104 = 0.0;
            }
            v9 = v158;
          }
          v116 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v116 != -1)
          {
            v163 = (WTF *)v169;
            *(_QWORD *)v160 = &v163;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v160, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v117 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          *(_QWORD *)v160 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
            CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
          WebCore::FEGaussianBlur::create(3, (const void **)v160, (uint64_t *)&v163, v104, v104);
          v33 = v163;
          if (v117)
            CFRelease(v117);
          do
          {
            v118 = __ldaxr(v100);
            v35 = --v118 == 0;
          }
          while (__stlxr(v118, v100));
          goto LABEL_181;
        case 0xB:
          v26 = (unsigned int *)(v11 + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 + 1, v26));
          v29 = *(_DWORD *)(v11 + 20);
          v28 = *(_DWORD *)(v11 + 24);
          v30 = *(_DWORD *)(v11 + 16);
          v31 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v31 != -1)
          {
            v163 = (WTF *)v169;
            *(_QWORD *)v160 = &v163;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v160, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v32 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          *(_QWORD *)v160 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
            CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
          WebCore::FEDropShadow::create((uint64_t *)(v11 + 32), (const void **)v160, (uint64_t *)&v163, (float)v28, (float)v28, (float)v30, (float)v29, 1.0);
          v33 = v163;
          if (v32)
            CFRelease(v32);
          do
          {
            v34 = __ldaxr(v26);
            v35 = --v34 == 0;
          }
          while (__stlxr(v34, v26));
LABEL_181:
          if (v35)
          {
            atomic_store(1u, (unsigned int *)(v11 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          }
          if (!v33)
            goto LABEL_225;
LABEL_184:
          LODWORD(v119) = *(_DWORD *)(a1 + 92);
          if (!(_DWORD)v119)
          {
            v120 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
            if (v120 != -1)
            {
              v163 = (WTF *)v169;
              *(_QWORD *)v160 = &v163;
              std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v160, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
            }
            v121 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
            v159 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
            if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
              CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
            WebCore::SourceGraphic::create((const void **)&v159, (uint64_t *)&v163);
            v122 = *(unsigned int *)(a1 + 92);
            if ((_DWORD)v122 == *(_DWORD *)(a1 + 88))
            {
              v123 = v122 + (v122 >> 2);
              if (v123 >= 0x10)
                v124 = v123 + 1;
              else
                v124 = 16;
              if (v124 <= v122 + 1)
                v125 = v122 + 1;
              else
                v125 = v124;
              if (v125 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1963242D4);
              }
              v126 = *v10;
              v127 = (void *)WTF::fastMalloc((WTF *)(8 * v125));
              *(_DWORD *)(a1 + 88) = v125;
              *(_QWORD *)(a1 + 80) = v127;
              memcpy(v127, v126, 8 * v122);
              v9 = v158;
              if (v126)
              {
                if (*v10 == v126)
                {
                  *(_QWORD *)(a1 + 80) = 0;
                  *(_DWORD *)(a1 + 88) = 0;
                }
                WTF::fastFree((WTF *)v126, v17);
              }
              v122 = *(unsigned int *)(a1 + 92);
              *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v122) = v163;
            }
            else
            {
              *((_QWORD *)*v10 + v122) = v163;
            }
            LODWORD(v119) = v122 + 1;
            *(_DWORD *)(a1 + 92) = v122 + 1;
            v159 = 0;
            if (v121)
            {
              CFRelease(v121);
              LODWORD(v119) = *(_DWORD *)(a1 + 92);
            }
          }
          v163 = v33;
          if ((_DWORD)v119 == *(_DWORD *)(a1 + 88))
          {
            v128 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 80), v119 + 1, (unint64_t)&v163);
            v119 = *(unsigned int *)(a1 + 92);
            v129 = *(_QWORD *)(a1 + 80);
            v130 = *(_QWORD *)v128;
            *(_QWORD *)v128 = 0;
            *(_QWORD *)(v129 + 8 * v119) = v130;
          }
          else
          {
            v131 = *v10;
            v163 = 0;
            v131[v119] = v33;
          }
          *(_DWORD *)(a1 + 92) = v119 + 1;
          v132 = v163;
          v163 = 0;
          if (!v132)
            goto LABEL_225;
          v133 = *((_QWORD *)v132 + 1);
          if (__ldaxr((unsigned __int8 *)v133))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v133))
          {
            goto LABEL_213;
          }
          MEMORY[0x19AEA534C](v133);
LABEL_213:
          v135 = *(_QWORD *)(v133 + 8);
          v136 = v135 - 1;
          *(_QWORD *)(v133 + 8) = v135 - 1;
          if (v135 == 1)
          {
            v143 = *(_QWORD *)(v133 + 16);
            v137 = *(_QWORD *)(v133 + 24);
            *(_QWORD *)(v133 + 24) = 0;
            v138 = v143 != 0;
          }
          else
          {
            v137 = 0;
            v138 = 1;
          }
          v139 = __ldxr((unsigned __int8 *)v133);
          if (v139 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v133))
            {
              if (v136)
                goto LABEL_225;
              goto LABEL_221;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v133);
          if (v136)
            goto LABEL_225;
LABEL_221:
          if (v137)
            (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
          if (!v138)
            WTF::fastFree((WTF *)v133, v17);
LABEL_225:
          if (++v8 == (uint64_t *)v9)
            break;
          continue;
        default:
          goto LABEL_225;
      }
      break;
    }
  }
  v149 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v149 && *(_DWORD *)(a1 + 88) > v149)
  {
    v150 = *(WTF **)(a1 + 80);
    *(_DWORD *)(a1 + 88) = v149;
    *(_QWORD *)(a1 + 80) = WTF::fastRealloc(v150, (void *)(8 * v149));
  }
  return (_DWORD)v149 != 0;
}

double WebCore::CSSFilter::create@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  v4 = WTF::fastMalloc((WTF *)0x60);
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v5 = 0;
  *(_OWORD *)(v5 + 8) = xmmword_19689B170;
  *(_QWORD *)(v5 + 24) = v4;
  result = 0.0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 49) = 1;
  *(_QWORD *)(v4 + 52) = 0;
  *(_QWORD *)(v4 + 68) = 0;
  *(_QWORD *)(v4 + 60) = 0;
  *(_QWORD *)v4 = off_1E341E1D8;
  *(_QWORD *)(v4 + 8) = v5;
  *(_WORD *)(v4 + 76) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  v7 = *a1;
  *a1 = 0;
  *(_QWORD *)(v4 + 80) = v7;
  LODWORD(v7) = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = 0;
  *(_DWORD *)(v4 + 88) = v7;
  LODWORD(v7) = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = 0;
  *(_DWORD *)(v4 + 92) = v7;
  *a2 = v4;
  return result;
}

uint64_t WebCore::CSSFilter::create@<X0>(uint64_t *a1@<X0>, char a2@<W1>, _QWORD *a3@<X2>, _OWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t result;

  v10 = WTF::fastMalloc((WTF *)0x60);
  v11 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v11 = 0;
  *(_OWORD *)(v11 + 8) = xmmword_19689B170;
  *(_QWORD *)(v11 + 24) = v10;
  *(_BYTE *)(v10 + 48) = 0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_QWORD *)v10 = off_1E3415E68;
  *(_QWORD *)(v10 + 8) = v11;
  *(_BYTE *)(v10 + 49) = 1;
  *(_QWORD *)(v10 + 52) = *a3;
  *(_OWORD *)(v10 + 60) = *a4;
  *(_QWORD *)v10 = off_1E341E1D8;
  *(_WORD *)(v10 + 76) = 0;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v12 = *a1;
  *a1 = 0;
  *(_QWORD *)(v10 + 80) = v12;
  LODWORD(v12) = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = 0;
  *(_DWORD *)(v10 + 88) = v12;
  LODWORD(v12) = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = 0;
  *(_DWORD *)(v10 + 92) = v12;
  *(float32x2_t *)&v13 = WebCore::Filter::clampFilterRegionIfNeeded((WebCore::Filter *)v10);
  *a5 = v10;
  result = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v10 + 48))(v10, v13);
  *(_BYTE *)(v10 + 49) = result & a2;
  return result;
}

uint64_t WebCore::CSSFilter::effectsOfType@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = *(unsigned int *)(result + 92);
  if ((_DWORD)v4)
  {
    v5 = (int)a2;
    v6 = *(uint64_t **)(result + 80);
    v7 = &v6[v4];
    v8 = (_DWORD)a2 - 2;
    do
    {
      v9 = *v6;
      if (*(unsigned __int8 *)(*v6 + 48) == v5)
      {
        if (v8 >= 0x13)
        {
          result = 96;
          __break(0xC471u);
          return result;
        }
        v10 = *(_QWORD *)(v9 + 8);
        if (__ldaxr((unsigned __int8 *)v10))
        {
          __clrex();
          goto LABEL_39;
        }
        if (__stxr(1u, (unsigned __int8 *)v10))
LABEL_39:
          result = MEMORY[0x19AEA534C](v10);
        ++*(_QWORD *)(v10 + 8);
        v29 = __ldxr((unsigned __int8 *)v10);
        if (v29 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v10))
            goto LABEL_45;
        }
        else
        {
          __clrex();
        }
        result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_45:
        v43 = (_QWORD *)v9;
        v30 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v30 == *(_DWORD *)(a3 + 8))
        {
          result = WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v30 + 1, (unint64_t)&v43);
          v30 = *(unsigned int *)(a3 + 12);
          v40 = *(_QWORD *)a3;
          v41 = *(_QWORD *)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)(v40 + 8 * v30) = v41;
        }
        else
        {
          v31 = *(_QWORD *)a3;
          v43 = 0;
          *(_QWORD *)(v31 + 8 * v30) = v9;
        }
        *(_DWORD *)(a3 + 12) = v30 + 1;
        v32 = v43;
        v43 = 0;
        if (!v32)
          goto LABEL_67;
        v33 = v32[1];
        goto LABEL_51;
      }
      v12 = *(_QWORD *)(v9 + 8);
      if (__ldaxr((unsigned __int8 *)v12))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v12))
      {
        goto LABEL_11;
      }
      result = MEMORY[0x19AEA534C](v12);
LABEL_11:
      ++*(_QWORD *)(v12 + 8);
      v14 = __ldxr((unsigned __int8 *)v12);
      if (v14 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v12))
          goto LABEL_16;
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_16:
      if (*(_BYTE *)(v9 + 48) == 1)
      {
        v43 = 0;
        v44 = 0;
        v15 = *(unsigned int *)(v9 + 124);
        if ((_DWORD)v15)
        {
          v16 = *(uint64_t **)(v9 + 112);
          v17 = 8 * v15;
          do
          {
            if (*(unsigned __int8 *)(*v16 + 48) == v5)
            {
              if (HIDWORD(v44) == (_DWORD)v44)
              {
                WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>> const&>((uint64_t)&v43, (unint64_t)v16);
              }
              else
              {
                WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>::Ref(&v43[HIDWORD(v44)], v16);
                ++HIDWORD(v44);
              }
            }
            ++v16;
            v17 -= 8;
          }
          while (v17);
          v18 = HIDWORD(v44);
        }
        else
        {
          v18 = 0;
        }
        v19 = *(unsigned int *)(a3 + 8);
        v20 = v18 + *(unsigned int *)(a3 + 12);
        if (v20 > v19)
        {
          v21 = v19 + (v19 >> 2);
          if (v21 >= 0x10)
            v22 = v21 + 1;
          else
            v22 = 16;
          if (v22 <= v20)
            v23 = v20;
          else
            v23 = v22;
          WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v23);
          v18 = HIDWORD(v44);
        }
        if (v18)
        {
          v24 = v43;
          v25 = *(_DWORD *)(a3 + 12);
          v26 = 8 * v18;
          do
          {
            v27 = *(_QWORD *)a3;
            v28 = *v24;
            *v24++ = 0;
            *(_QWORD *)(v27 + 8 * v25++) = v28;
            v26 -= 8;
          }
          while (v26);
          *(_DWORD *)(a3 + 12) = v25;
          result = WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
          if (!v9)
            goto LABEL_67;
        }
        else
        {
          result = WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
        }
      }
      v33 = *(_QWORD *)(v9 + 8);
LABEL_51:
      if (__ldaxr((unsigned __int8 *)v33))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v33))
      {
        goto LABEL_55;
      }
      result = MEMORY[0x19AEA534C](v33);
LABEL_55:
      v35 = *(_QWORD *)(v33 + 8);
      v36 = v35 - 1;
      *(_QWORD *)(v33 + 8) = v35 - 1;
      if (v35 == 1)
      {
        v42 = *(_QWORD *)(v33 + 16);
        v37 = *(_QWORD *)(v33 + 24);
        *(_QWORD *)(v33 + 24) = 0;
        v38 = v42 != 0;
      }
      else
      {
        v37 = 0;
        v38 = 1;
      }
      v39 = __ldxr((unsigned __int8 *)v33);
      if (v39 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v33))
        {
          if (!v36)
            goto LABEL_63;
          goto LABEL_67;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v33);
      if (!v36)
      {
LABEL_63:
        if (v37)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        if (!v38)
          result = WTF::fastFree((WTF *)v33, a2);
      }
LABEL_67:
      ++v6;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t WebCore::CSSFilter::supportedFilterRenderingModes(WebCore::CSSFilter *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 23);
  if (!(_DWORD)v1)
    return 7;
  v2 = (uint64_t *)*((_QWORD *)this + 10);
  v3 = 8 * v1;
  LODWORD(v4) = 7;
  do
  {
    v5 = *v2++;
    v4 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) & v4;
    v3 -= 8;
  }
  while (v3);
  return v4;
}

_QWORD *WebCore::CSSFilter::apply@<X0>(_QWORD *this@<X0>, WebCore::FilterImage *a2@<X1>, WebCore::FilterResults *a3@<X2>, WebCore::FilterImage **a4@<X8>)
{
  WebCore::FilterImage *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  WebCore::FilterImage *v12;
  WTF *v13;
  void *v14;
  void *v15;
  WTF *v16;
  void *v17;
  WebCore::FilterImage *v18;

  if (a2)
  {
    v5 = a2;
    v6 = this;
    ++*(_DWORD *)a2;
    v7 = *((unsigned int *)this + 23);
    if ((_DWORD)v7)
    {
      v9 = (_QWORD *)this[10];
      v10 = 8 * v7;
      do
      {
        this = (*(_QWORD *(**)(WebCore::FilterImage **__return_ptr, _QWORD, _QWORD *, WebCore::FilterImage *, WebCore::FilterResults *))(*(_QWORD *)*v9 + 56))(&v18, *v9, v6, v5, a3);
        v12 = v18;
        v18 = 0;
        if (*(_DWORD *)v5 == 1)
        {
          WebCore::FilterImage::~FilterImage(v5, v11);
          WTF::fastFree(v13, v14);
          this = v18;
          v18 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 1)
            {
              WebCore::FilterImage::~FilterImage((WebCore::FilterImage *)this, v15);
              this = (_QWORD *)WTF::fastFree(v16, v17);
            }
            else
            {
              --*(_DWORD *)this;
            }
          }
        }
        else
        {
          --*(_DWORD *)v5;
        }
        if (!v12)
          break;
        ++v9;
        v5 = v12;
        v10 -= 8;
      }
      while (v10);
    }
    else
    {
      v12 = a2;
    }
  }
  else
  {
    v12 = 0;
  }
  *a4 = v12;
  return this;
}

_QWORD *WebCore::CSSFilter::createFilterStyles@<X0>(_QWORD *result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, WTF **a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  char *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v36;
  WTF *v38;
  int v39;
  unsigned int v40;
  WTF *v41;
  WTF *v42;
  _BYTE *v43;
  _BYTE v44[80];
  int v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v5 = result;
  v49 = *MEMORY[0x1E0C80C00];
  v41 = 0;
  v42 = 0;
  v44[0] = 0;
  v46 = 0;
  if (*(_BYTE *)(a3 + 88))
  {
    v45 = -1;
    v6 = *(unsigned int *)(a3 + 80);
    if ((_DWORD)v6 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(WTF **, _BYTE *, uint64_t))off_1E341E298[v6])(&v38, v44, a3);
      v45 = v6;
    }
    v46 = 1;
  }
  v7 = *(_OWORD *)(a3 + 112);
  v47 = *(_OWORD *)(a3 + 96);
  v48 = v7;
  v8 = *((unsigned int *)v5 + 23);
  if ((_DWORD)v8)
  {
    v9 = v5[10];
    v10 = v9 + 8 * v8;
    v36 = v5;
    while (1)
    {
      result = *(_QWORD **)v9;
      if (*(_BYTE *)(*(_QWORD *)v9 + 48) != 20)
        break;
LABEL_51:
      v9 += 8;
      if (v9 == v10)
        goto LABEL_52;
    }
    result = (*(_QWORD *(**)(WTF **__return_ptr, _QWORD *, void *, _QWORD *, _BYTE *))(*result + 64))(&v38, result, a2, v5, v44);
    v11 = v40;
    if (!v40)
    {
      *a4 = 0;
      a4[1] = 0;
      v15 = v38;
      if (v38)
      {
LABEL_49:
        v38 = 0;
        v39 = 0;
        result = (_QWORD *)WTF::fastFree(v15, a2);
      }
LABEL_50:
      if (!(_DWORD)v11)
        goto LABEL_53;
      goto LABEL_51;
    }
    v12 = v38;
    v13 = (char *)v38 + 128 * v40 - 128;
    if (v46 == v13[88])
    {
      if (!v46)
        goto LABEL_25;
      v14 = *((unsigned int *)v13 + 20);
      if (v45 == -1)
      {
        if ((_DWORD)v14 == -1)
          goto LABEL_25;
      }
      else if ((_DWORD)v14 == -1)
      {
        result = (_QWORD *)((uint64_t (*)(_BYTE **, _BYTE *))off_1E341E280[v45])(&v43, v44);
        v45 = -1;
        goto LABEL_25;
      }
      v43 = v44;
      result = (_QWORD *)(*(&off_1E341E2B0 + v14))((int)&v43, v44);
    }
    else if (v46)
    {
      if (v45 != -1)
        result = (_QWORD *)((uint64_t (*)(_BYTE **, _BYTE *))off_1E341E280[v45])(&v43, v44);
      v45 = -1;
      v46 = 0;
    }
    else
    {
      v44[0] = 0;
      v45 = -1;
      v16 = *((unsigned int *)v13 + 20);
      if ((_DWORD)v16 != -1)
      {
        result = (_QWORD *)((uint64_t (*)(_BYTE **, _BYTE *))off_1E341E298[v16])(&v43, v44);
        v45 = v16;
      }
      v46 = 1;
    }
LABEL_25:
    v17 = (char *)v12 + 128 * v11 - 128;
    v18 = *((_OWORD *)v17 + 7);
    v47 = *((_OWORD *)v17 + 6);
    v48 = v18;
    v19 = v40;
    v20 = v40 + (unint64_t)HIDWORD(v42);
    if (v20 > v42)
    {
      v21 = v42 + ((unint64_t)v42 >> 2);
      if (v21 >= 0x10)
        v22 = v21 + 1;
      else
        v22 = 16;
      if (v22 <= v20)
        v23 = v40 + (unint64_t)HIDWORD(v42);
      else
        v23 = v22;
      result = (_QWORD *)WTF::Vector<WebCore::FilterStyle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v41, v23);
      v19 = v40;
    }
    v15 = v38;
    if ((_DWORD)v19)
    {
      v24 = HIDWORD(v42);
      v25 = v19 << 7;
      do
      {
        v26 = (char *)v41 + 128 * (unint64_t)v24;
        *v26 = 0;
        v26[88] = 0;
        if (*((_BYTE *)v15 + 88))
        {
          *((_DWORD *)v26 + 20) = -1;
          v27 = *((unsigned int *)v15 + 20);
          if ((_DWORD)v27 != -1)
          {
            result = (_QWORD *)((uint64_t (*)(_BYTE **, char *, WTF *))off_1E341E3A8[v27])(&v43, v26, v15);
            *((_DWORD *)v26 + 20) = v27;
          }
          v26[88] = 1;
        }
        v28 = *((_OWORD *)v15 + 7);
        *((_OWORD *)v26 + 6) = *((_OWORD *)v15 + 6);
        *((_OWORD *)v26 + 7) = v28;
        v24 = ++HIDWORD(v42);
        v15 = (WTF *)((char *)v15 + 128);
        v25 -= 128;
      }
      while (v25);
      v15 = v38;
      if (v40)
      {
        v29 = (unint64_t)v40 << 7;
        do
        {
          if (*((_BYTE *)v15 + 88))
          {
            v30 = *((unsigned int *)v15 + 20);
            if ((_DWORD)v30 != -1)
              result = (_QWORD *)((uint64_t (*)(_BYTE **, WTF *))off_1E341E280[v30])(&v43, v15);
            *((_DWORD *)v15 + 20) = -1;
          }
          v15 = (WTF *)((char *)v15 + 128);
          v29 -= 128;
        }
        while (v29);
        v15 = v38;
      }
    }
    v5 = v36;
    if (v15)
      goto LABEL_49;
    goto LABEL_50;
  }
LABEL_52:
  *a4 = v41;
  v31 = v42;
  v41 = 0;
  v42 = 0;
  a4[1] = v31;
LABEL_53:
  if (v46 && v45 != -1)
    result = (_QWORD *)((uint64_t (*)(WTF **, _BYTE *))off_1E341E280[v45])(&v38, v44);
  v32 = v41;
  if (HIDWORD(v42))
  {
    v33 = (unint64_t)HIDWORD(v42) << 7;
    do
    {
      if (*((_BYTE *)v32 + 88))
      {
        v34 = *((unsigned int *)v32 + 20);
        if ((_DWORD)v34 != -1)
          result = (_QWORD *)((uint64_t (*)(_BYTE *, WTF *))off_1E341E280[v34])(v44, v32);
        *((_DWORD *)v32 + 20) = -1;
      }
      v32 = (WTF *)((char *)v32 + 128);
      v33 -= 128;
    }
    while (v33);
    v32 = v41;
  }
  if (v32)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    return (_QWORD *)WTF::fastFree(v32, a2);
  }
  return result;
}

uint64_t WebCore::CSSFilter::isIdentity(WebCore::CSSFilter *this, unsigned int ***a2, const WebCore::FilterOperations *a3)
{
  uint64_t v3;
  unsigned int **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int **v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  WebCore::ReferencedSVGResources *v17;
  WebCore::SVGFilterElement *v18;
  int v19;
  _BOOL4 isIdentity;
  unsigned int v21;
  unsigned int v22;
  void (*v23)(unsigned int *);
  unsigned int *v24;
  int v25;
  BOOL v26;
  WebCore::Node *v27;
  WebCore::SVGFilter *v28;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v6 = *a2;
    v7 = 8 * v3;
    do
    {
      if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)*v6 + 88))(*v6) & 1) != 0)
        return 0;
      ++v6;
      v7 -= 8;
    }
    while (v7);
    v8 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v8)
    {
      v9 = *a2;
      v10 = (uint64_t)&(*a2)[v8];
      while (1)
      {
        v11 = *v9;
        v12 = *v9 + 2;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        if (*((_BYTE *)v11 + 12))
        {
          do
          {
            v14 = __ldaxr(v12);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v12));
          if (!v15)
          {
            atomic_store(1u, v11 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
          }
          if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)*v9 + 56))(*v9) & 1) == 0)
            return 0;
          goto LABEL_27;
        }
        v17 = (WebCore::ReferencedSVGResources *)WebCore::Node::treeScopeForSVGReferences(*(WebCore::Node **)(*((_QWORD *)this + 3) + 8));
        WebCore::ReferencedSVGResources::referencedFilterElement(v17, (WebCore::TreeScope *)v11, &v28);
        v19 = (int)v28;
        if (v28)
        {
          v27 = v28;
          isIdentity = WebCore::SVGFilter::isIdentity(v28, v18);
          if (*((_DWORD *)v27 + 6) != 2)
          {
            *((_DWORD *)v27 + 6) -= 2;
            if (isIdentity)
              goto LABEL_19;
LABEL_22:
            v19 = 0;
            goto LABEL_23;
          }
          v26 = isIdentity;
          if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v27);
            if (v26)
              goto LABEL_19;
            goto LABEL_22;
          }
          v19 = isIdentity;
          if (isIdentity)
          {
LABEL_19:
            v19 = 1;
            goto LABEL_23;
          }
        }
        do
        {
LABEL_23:
          v21 = __ldaxr(v12);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v12));
        if (!v22)
        {
          atomic_store(1u, v11 + 2);
          v23 = *(void (**)(unsigned int *))(*(_QWORD *)v11 + 8);
          v24 = v11;
          v25 = v19;
          v23(v24);
          v19 = v25;
        }
        if (!v19)
          return 0;
LABEL_27:
        ++v9;
        result = 1;
        if (v9 == (unsigned int **)v10)
          return result;
      }
    }
  }
  return 1;
}

uint64_t WebCore::CSSFilter::calculateOutsets(WebCore::CSSFilter *this, unsigned int ***a2, const WebCore::FilterOperations *a3, const WebCore::FloatRect *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int **v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v4 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v4)
    return 0;
  LODWORD(v8) = 0;
  LODWORD(v9) = 0;
  v10 = 0;
  v11 = *a2;
  v12 = (uint64_t)&(*a2)[v4];
  do
  {
    v13 = *v11;
    v14 = *v11 + 2;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    if (*((_BYTE *)v13 + 12))
    {
      do
      {
        v16 = __ldaxr(v14);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v14));
      if (!v17)
      {
        atomic_store(1u, v13 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
      }
      v18 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)*v11 + 64))(*v11);
      v10 = ((v19 & 0xFFFFFFFF00000000) + v10) & 0xFFFFFFFF00000000 | (v19 + v10);
    }
    else
    {
      v18 = WebCore::calculateReferenceFilterOutsets((WebCore *)v13, *(const WebCore::ReferenceFilterOperation **)(*((_QWORD *)this + 3) + 8), a3, a4);
      v10 = ((v20 & 0xFFFFFFFF00000000) + v10) & 0xFFFFFFFF00000000 | (v20 + v10);
      do
      {
        v21 = __ldaxr(v14);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v14));
      if (!v22)
      {
        atomic_store(1u, v13 + 2);
        v23 = v18;
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
        v18 = v23;
      }
    }
    v9 = (v9 + HIDWORD(v18));
    v8 = (v8 + v18);
    ++v11;
  }
  while (v11 != (unsigned int **)v12);
  return v8 | (v9 << 32);
}

uint64_t WebCore::calculateReferenceFilterOutsets(WebCore *this, const WebCore::ReferenceFilterOperation *a2, WebCore::RenderElement *a3, const WebCore::FloatRect *a4)
{
  WebCore::ReferencedSVGResources *v6;
  uint64_t v7;
  BOOL v8;
  const WebCore::FloatRect *v9;
  WebCore::SVGFilter *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  WebCore::SVGFilter *v15;

  v6 = (WebCore::ReferencedSVGResources *)*((_QWORD *)a2 + 5);
  v7 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    v8 = (*(_WORD *)(*(_QWORD *)v6 + 28) & 0x80) == 0;
  else
    v8 = 1;
  if (!v8 && !*(_BYTE *)(v7 + 193))
  {
    v13 = *(_QWORD *)(v7 + 200);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        if (*(_WORD *)(*(_QWORD *)(v14 + 96) + 10) == 242)
          v6 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v6 + 2);
      }
    }
  }
  WebCore::ReferencedSVGResources::referencedFilterElement(v6, this, &v15);
  v10 = v15;
  if (!v15)
    return 0;
  v11 = WebCore::SVGFilter::calculateOutsets(v15, a3, v9);
  if (*((_DWORD *)v10 + 6) == 2)
  {
    if ((*((_WORD *)v10 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v10);
  }
  else
  {
    *((_DWORD *)v10 + 6) -= 2;
  }
  return v11;
}

uint64_t WebCore::CSSFilter::externalRepresentation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;

  v4 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    v9 = v8 + 8 * v4;
    v10 = *(_DWORD *)(a2 + 24);
    do
    {
      v11 = *(_BYTE **)(v9 - 8);
      if (v11[48] == 19)
        v12 = v9 - 8;
      else
        v12 = v9;
      *(_DWORD *)(a2 + 24) = v10 + v7;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v11 + 72))(v11, a2, a3);
      v13 = *(_DWORD *)(a2 + 24);
      v10 = v13 - v7;
      *(_DWORD *)(a2 + 24) = v6 + v13;
      v9 = v12 - 8;
      --v6;
      ++v7;
    }
    while (v12 - 8 != v8);
  }
  return a2;
}

unint64_t WebCore::computeLocalCaretRect(WebCore::RenderBlock *this, WebCore::InlineIterator::BoxIterator *a2, int a3)
{
  int v4;
  uint64_t v6;
  WebCore::RenderObject *v7;
  char *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  WebCore::InlineIterator *v23;
  const WebCore::RenderInline *v24;
  float v25;
  double v26;
  double v27;
  int v28;
  double v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  _BYTE v33[16];
  int v34;
  char v35;
  char *v36;

  v4 = *((unsigned __int8 *)this + 46);
  if (v4 == 72)
    return WebCore::computeCaretRectForSVGInlineText(a2);
  if ((*((_BYTE *)this + 45) & 2) != 0)
    return WebCore::computeCaretRectForText((int *)a2, a3);
  if (v4 == 17)
    return WebCore::computeCaretRectForLineBreak((unsigned int *)a2, a3);
  if ((*((_BYTE *)this + 45) & 0x40) == 0)
  {
    if ((*((_BYTE *)this + 45) & 4) != 0)
      return WebCore::computeCaretRectForBox((uint64_t)this, a2);
    if ((*((_BYTE *)this + 45) & 0x20) == 0)
      return 0;
    v12 = *((unsigned int *)this + 16);
    if (v12 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
      && *(_QWORD *)((v12 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8))
    {
      v13 = 0;
      v14 = 0;
      return v14 | (v13 << 32);
    }
    v15 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1064))(this);
    v16 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1072))(this);
    if (__OFADD__(v15, v16))
      v17 = (v15 >> 31) + 0x7FFFFFFF;
    else
      v17 = v15 + v16;
    v18 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 976))(this);
    if (__OFADD__(v17, v18))
      v19 = (v17 >> 31) + 0x7FFFFFFF;
    else
      v19 = v17 + v18;
    v20 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 984))(this);
    if (__OFADD__(v19, v20))
      v21 = (WTF::StringImpl *)((v19 >> 31) + 0x7FFFFFFF);
    else
      v21 = (WTF::StringImpl *)(v19 + v20);
    v22 = WebCore::computeCaretRectForEmptyElement(this, v21, 0);
    v23 = this;
    v14 = v22;
    v13 = HIDWORD(v22);
    WebCore::InlineIterator::firstInlineBoxFor(v23, v24, (uint64_t)v33);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v33) & 1) != 0)
    {
LABEL_48:
      if (v34 != -1)
        ((void (*)(char **, _BYTE *))off_1E341E368[v34])(&v36, v33);
      return v14 | (v13 << 32);
    }
    if (v34 == -1)
      goto LABEL_53;
    v36 = &v35;
    if ((((uint64_t (*)(char **, _BYTE *))off_1E341E358[v34])(&v36, v33) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196325510);
    }
    if (v34 == -1)
    {
LABEL_53:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v36 = &v35;
      v26 = ((float (*)(char **, _BYTE *))off_1E341E2D8[v34])(&v36, v33) * 64.0;
      v27 = 2147483650.0;
      if (v26 >= 2147483650.0)
      {
        v28 = 0x7FFFFFFF;
        goto LABEL_37;
      }
      if (v26 > -2147483650.0)
      {
        v28 = (int)v26;
LABEL_37:
        v29 = v25 * 64.0;
        if (v29 > -2147483650.0)
          v30 = (int)v29;
        else
          v30 = 0x80000000;
        if (v29 >= v27)
          v30 = 0x7FFFFFFF;
        v31 = __OFADD__(v14, v28);
        v32 = v14 + v28;
        if (v31)
          v14 = (v14 >> 31) + 0x7FFFFFFF;
        else
          v14 = v32;
        if (__OFADD__((_DWORD)v13, v30))
          v13 = (v13 >> 31) + 0x7FFFFFFF;
        else
          v13 = (v13 + v30);
        goto LABEL_48;
      }
    }
    v28 = 0x80000000;
    goto LABEL_37;
  }
  v6 = *((unsigned int *)this + 16);
  if (v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v7 = *(WebCore::RenderObject **)((v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v7)
    {
      if ((WebCore::RenderObject::isPseudoElement(v7) & 1) == 0)
        return WebCore::computeCaretRectForBox((uint64_t)this, a2);
    }
  }
  v8 = (char *)this + 164;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v8 = (char *)this + 160;
  v9 = (WTF::StringImpl *)*(unsigned int *)v8;
  v10 = WebCore::RenderBlock::textIndentOffset(this);
  return WebCore::computeCaretRectForEmptyElement(this, v9, v10);
}

unint64_t WebCore::computeCaretRectForSVGInlineText(WebCore::InlineIterator::BoxIterator *a1)
{
  _DWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t (*v9)(_DWORD *, uint64_t, uint64_t);
  uint64_t v10;
  int v11;
  int v12;

  WebCore::InlineIterator::BoxIterator::atEnd(a1);
  if (*((_DWORD *)a1 + 4) == 1)
    v2 = *(_DWORD **)a1;
  else
    v2 = 0;
  v3 = *((unsigned int *)a1 + 6);
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v2 + 80))(v2)
    && (v4 = v2[18], v3 >= v4)
    && (v5 = v2[19] + v4, v3 <= v5))
  {
    v9 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v2 + 208);
    if (v3 >= v5)
    {
      v10 = v9(v2, (v3 - 1), v3);
      v7 = v10 + v12;
      if (__OFADD__((_DWORD)v10, v12))
        v7 = (v10 >> 31) + 0x7FFFFFFF;
      if ((v2[13] & 4) != 0)
        v7 = v10;
    }
    else
    {
      v10 = v9(v2, v3, (v3 + 1));
      v7 = v10 + v11;
      if (__OFADD__((_DWORD)v10, v11))
        v7 = (v10 >> 31) + 0x7FFFFFFF;
      if ((v2[13] & 4) == 0)
        v7 = v10;
    }
    v6 = v10 & 0xFFFFFFFF00000000;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  return v6 | v7;
}

uint64_t WebCore::computeCaretRectForText(int *a1, int a2)
{
  uint64_t v4;
  WebCore::InlineIterator::Box *v5;
  float v6;
  uint64_t v7;
  uint64_t v9[2];
  int v10;
  int *v11;
  char v12;

  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a1) & 1) != 0)
    return 0;
  v4 = WTF::downcast<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::LeafBoxIterator const>((WebCore::InlineIterator::BoxIterator *)a1);
  v11 = a1;
  v5 = (WebCore::InlineIterator::Box *)WebCore::InlineIterator::TextBoxIterator::operator->(v4);
  WebCore::InlineIterator::Box::lineBox(v9, v5);
  WebCore::computeCaretRectForText(WebCore::InlineBoxAndOffset const&,WebCore::CaretRectMode)::$_0::operator()<unsigned int>((uint64_t *)&v11, a1[6]);
  v7 = WebCore::computeCaretRectForLinePosition((WebCore::InlineIterator::LineBox *)v9, a2, v6);
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))off_1E341E328[v10])(&v12, v9);
  return v7;
}

uint64_t WebCore::computeCaretRectForLineBreak(unsigned int *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  int v8;
  WebCore::InlineIterator::BoxIterator *v9;
  _QWORD v10[2];
  int v11;
  char v12;
  char *v13;

  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a1) & 1) != 0)
    return 0;
  v5 = a1[4];
  if ((_DWORD)v5 != -1)
  {
    v13 = &v12;
    ((void (*)(_QWORD *__return_ptr, char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v5])(v10, &v13, a1);
    WebCore::InlineIterator::LineBox::contentLogicalLeft((WebCore::InlineIterator::LineBox *)v10);
    v4 = WebCore::computeCaretRectForLinePosition((WebCore::InlineIterator::LineBox *)v10, a2, v6);
    if (v11 != -1)
      ((void (*)(char **, _QWORD *))off_1E341E328[v11])(&v13, v10);
    return v4;
  }
  v8 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::computeCaretRectForBox(v8, v9);
}

uint64_t WebCore::computeCaretRectForBox(uint64_t a1, WebCore::InlineIterator::BoxIterator *this)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  double v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];
  int v41;
  char v42;
  char *v43;

  v4 = *(_QWORD *)(a1 + 152);
  if ((WebCore::InlineIterator::BoxIterator::atEnd(this) & 1) != 0)
  {
    v5 = (*(_BYTE *)(a1 + 123) & 4) == 0;
  }
  else
  {
    v6 = *((unsigned int *)this + 4);
    if ((_DWORD)v6 == -1)
      goto LABEL_79;
    v40[0] = &v43;
    v5 = (((uint64_t (*)(_QWORD *, WebCore::InlineIterator::BoxIterator *))off_1E341E2F8[v6])(v40, this) & 1) == 0;
  }
  v7 = v5;
  if (v7 != (*((_DWORD *)this + 6) == 0))
  {
    v8 = *(_DWORD *)(a1 + 160);
    v9 = __OFSUB__(v8, 128);
    v10 = v8 - 128;
    if (v9)
      v10 = 0x80000000;
    v9 = __OFADD__((_DWORD)v4, v10);
    LODWORD(v11) = v4 + v10;
    if (v9)
      v11 = (v4 >> 31) + 0x7FFFFFFF;
    else
      v11 = v11;
    v4 = v4 & 0xFFFFFFFF00000000 | v11;
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd(this) & 1) != 0)
    goto LABEL_25;
  v13 = *((unsigned int *)this + 4);
  if ((_DWORD)v13 == -1
    || (v43 = &v42,
        ((void (*)(_QWORD *__return_ptr, char **, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v13])(v40, &v43, this), v41 == -1)|| ((v43 = &v42, v14 = ((float (*)(char **, _QWORD *))off_1E341E338[v41])(&v43, v40) * 64.0, v14 >= 2147483650.0)? (v15 = 0x7FFFFFFF): v14 <= -2147483650.0? (v15 = 0x80000000): (v15 = (int)v14), v41 == -1))
  {
LABEL_79:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_26;
  }
  v43 = &v42;
  ((float (*)(char **, _QWORD *))off_1E341E348[v41])(&v43, v40);
  v4 = v4 | ((unint64_t)v15 << 32);
  if (v41 != -1)
    ((void (*)(char **, _QWORD *))off_1E341E328[v41])(&v43, v40);
LABEL_25:
  WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)(a1 + 80), v12);
LABEL_26:
  v16 = *(_DWORD *)(a1 + 152);
  v17 = *(_DWORD *)(a1 + 156);
  if (v17 == 0x80000000)
    v18 = 0x7FFFFFFF;
  else
    v18 = -v17;
  if (v16 == 0x80000000)
    v19 = 0x7FFFFFFF;
  else
    v19 = -v16;
  v9 = __OFADD__((_DWORD)v4, v19);
  v20 = v4 + v19;
  if (v9)
    v21 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v21 = v20;
  v9 = __OFADD__(HIDWORD(v4), v18);
  v22 = HIDWORD(v4) + v18;
  if (v9)
    v23 = ((HIDWORD(v4) >> 31) + 0x7FFFFFFF);
  else
    v23 = v22;
  v24 = v21 | (v23 << 32);
  if ((*(_BYTE *)(a1 + 45) & 1) == 0)
  {
    v25 = *(_WORD **)(*(_QWORD *)(a1 + 24) + 8);
    if (v25)
    {
      if ((v25[14] & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196325C04);
      }
      if ((*(unsigned int (**)(_WORD *))(*(_QWORD *)v25 + 208))(v25))
      {
        if ((*(_BYTE *)(a1 + 45) & 1) != 0)
          goto LABEL_55;
        v26 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        if (!v26)
          goto LABEL_55;
        v27 = *(_WORD *)(v26 + 28);
        if ((v27 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196325C24);
        }
        if ((v27 & 0x10) == 0)
          goto LABEL_55;
        v28 = *(_DWORD *)(v26 + 24);
        *(_DWORD *)(v26 + 24) = v28 + 2;
        if ((*(_QWORD *)(v26 + 64) & 0xFFFFFFFFFFFFLL) == 0)
        {
          if (v28)
          {
            *(_DWORD *)(v26 + 24) = v28;
          }
          else if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v26);
          }
          goto LABEL_55;
        }
        if ((*(_BYTE *)((*(_QWORD *)(v26 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196325C5CLL);
        }
        v29 = *(unsigned __int8 *)((*(_QWORD *)(v26 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
        if (v28)
        {
          *(_DWORD *)(v26 + 24) = v28;
        }
        else if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v26);
        }
        if (v29 != 35 && v29 != 63)
        {
LABEL_55:
          v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1016))(a1);
          if (__OFADD__((_DWORD)v21, v30))
            v31 = (v21 >> 31) + 0x7FFFFFFF;
          else
            v31 = v21 + v30;
          v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
          if (__OFADD__(v31, v32))
            v33 = (v31 >> 31) + 0x7FFFFFFF;
          else
            v33 = v31 + v32;
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
          if (__OFADD__((_DWORD)v23, v34))
            v35 = (v23 >> 31) + 0x7FFFFFFF;
          else
            v35 = v23 + v34;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1000))(a1);
          LODWORD(v37) = v35 + v36;
          if (__OFADD__(v35, v36))
            v37 = (v35 >> 31) + 0x7FFFFFFF;
          else
            v37 = v37;
          v24 = v33 | (v37 << 32);
        }
      }
    }
  }
  v38 = __ROR8__(v24, 32);
  if ((*(_DWORD *)(a1 + 20) & 0x1000) != 0)
    return v38;
  else
    return v24;
}

BOOL WebCore::ClipRect::intersects(int *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v7;
  int v8;
  int v9;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v22;
  int v23;
  int v24;
  _DWORD v26[4];

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  if (*a1 == -1073741808 && v2 == -1073741808 && v4 == 2147483615 && a1[3] == 2147483615)
    return 1;
  if (v4 >= 1)
  {
    v7 = a1[3];
    if (v7 >= 1)
    {
      v9 = *(_DWORD *)(a2 + 16);
      v8 = *(_DWORD *)(a2 + 20);
      if (v9 >= 1 && v8 >= 1)
      {
        v11 = *(_DWORD *)(a2 + 8);
        v12 = v11 + v9;
        if (__OFADD__(v11, v9))
          v12 = (v11 >> 31) + 0x7FFFFFFF;
        if (v3 < v12)
        {
          v13 = __OFADD__(v3, v4);
          v14 = v3 + v4;
          v15 = (v3 >> 31) + 0x7FFFFFFF;
          if (!v13)
            v15 = v14;
          if ((int)v11 < v15)
          {
            v16 = *(_DWORD *)(a2 + 12);
            v13 = __OFADD__(v16, v8);
            v17 = v16 + v8;
            if (v13)
              v17 = (v16 >> 31) + 0x7FFFFFFF;
            if (v2 < v17)
            {
              v13 = __OFADD__(v2, v7);
              v18 = v2 + v7;
              v19 = (v2 >> 31) + 0x7FFFFFFF;
              if (!v13)
                v19 = v18;
              if ((int)v16 < v19)
              {
                if (!*(_BYTE *)(a2 + 65)
                  && !WebCore::LayoutRect::contains((WebCore::LayoutRect *)a1, (const WebCore::LayoutRect *)(a2 + 8)))
                {
                  v26[0] = WebCore::LayoutRect::operator WebCore::FloatRect(a1);
                  v26[1] = v22;
                  v26[2] = v23;
                  v26[3] = v24;
                  return WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)(a2 + 32), (const WebCore::FloatRect *)v26);
                }
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void WebCore::CounterNode::~CounterNode(WebCore::CounterNode *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WebCore::CounterNode *v10;
  WebCore::CounterNode *v11;
  _DWORD *v12;
  uint64_t v13;
  WTF *v14;
  WebCore::CounterNode *v15;
  _DWORD *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WebCore::CounterNode *v21;
  WebCore::CounterNode *v22;
  _DWORD *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::CounterNode *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  WebCore::CounterNode *v34;
  WebCore::CounterNode *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  WebCore::CounterNode *v42;
  char v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  WTF *v56;
  void *v57;
  WTF *v58;
  void *v59;
  WTF *v60;
  void *v61;
  WTF *v62;
  void *v63;
  void *v64;
  WTF *v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  WTF *v73;
  WTF *v74;
  void *v75;
  WTF *v76;
  void *v77;

  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      goto LABEL_13;
  }
  v5 = *((_QWORD *)this + 7);
  if (v5 && *(_QWORD *)(v5 + 8)
    || (v6 = *((_QWORD *)this + 8)) != 0 && *(_QWORD *)(v6 + 8)
    || (v7 = *((_QWORD *)this + 9)) != 0 && *(_QWORD *)(v7 + 8)
    || (v8 = *((_QWORD *)this + 10)) != 0 && *(_QWORD *)(v8 + 8))
  {
    if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
    {
      v11 = 0;
      goto LABEL_38;
    }
LABEL_13:
    v9 = *(WTF **)(v4 + 72);
    if (v9)
      v10 = (WebCore::CounterNode *)*((_QWORD *)v9 + 1);
    else
      v10 = 0;
    if (v10 == this)
    {
      v12 = (_DWORD *)*((_QWORD *)this + 8);
      if (v12)
        ++*v12;
      *(_QWORD *)(v4 + 72) = v12;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
          WTF::fastFree(v9, a2);
        else
          --*(_DWORD *)v9;
      }
    }
    v13 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
    v14 = *(WTF **)(v13 + 80);
    if (v14)
      v15 = (WebCore::CounterNode *)*((_QWORD *)v14 + 1);
    else
      v15 = 0;
    if (v15 == this)
    {
      v16 = (_DWORD *)*((_QWORD *)this + 7);
      if (v16)
        ++*v16;
      *(_QWORD *)(v13 + 80) = v16;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
          WTF::fastFree(v14, a2);
        else
          --*(_DWORD *)v14;
      }
    }
    v17 = (WTF *)*((_QWORD *)this + 6);
    if (v17)
    {
      v11 = (WebCore::CounterNode *)*((_QWORD *)v17 + 1);
      if (v11)
        ++*(_DWORD *)v11;
      *((_QWORD *)this + 6) = 0;
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, a2);
      else
        --*(_DWORD *)v17;
    }
    else
    {
      v11 = 0;
      *((_QWORD *)this + 6) = 0;
    }
LABEL_38:
    v18 = *((_QWORD *)this + 7);
    if (v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0)
    {
      v20 = *(WTF **)(v19 + 64);
      if (v20)
        v21 = (WebCore::CounterNode *)*((_QWORD *)v20 + 1);
      else
        v21 = 0;
      if (v21 == this)
      {
        v23 = (_DWORD *)*((_QWORD *)this + 8);
        if (v23)
          ++*v23;
        *(_QWORD *)(v19 + 64) = v23;
        if (v20)
        {
          if (*(_DWORD *)v20 == 1)
            WTF::fastFree(v20, a2);
          else
            --*(_DWORD *)v20;
        }
      }
      v24 = (WTF *)*((_QWORD *)this + 7);
      if (v24)
      {
        v22 = (WebCore::CounterNode *)*((_QWORD *)v24 + 1);
        if (v22)
          ++*(_DWORD *)v22;
        *((_QWORD *)this + 7) = 0;
        if (*(_DWORD *)v24 == 1)
          WTF::fastFree(v24, a2);
        else
          --*(_DWORD *)v24;
      }
      else
      {
        v22 = 0;
        *((_QWORD *)this + 7) = 0;
      }
    }
    else
    {
      v22 = 0;
    }
    v25 = *((_QWORD *)this + 8);
    if (!v25 || (v26 = *(_QWORD *)(v25 + 8)) == 0)
    {
LABEL_74:
      v33 = *((_QWORD *)this + 9);
      if (v33)
      {
        v34 = *(WebCore::CounterNode **)(v33 + 8);
        if (v34)
        {
          ++*(_DWORD *)v34;
          while (1)
          {
            v35 = v34;
            v36 = *((_QWORD *)v34 + 8);
            if (v36)
            {
              v34 = *(WebCore::CounterNode **)(v36 + 8);
              if (v34)
              {
                v37 = 0;
                ++*(_DWORD *)v34;
                if (!v11)
                  goto LABEL_87;
                goto LABEL_80;
              }
            }
            else
            {
              v34 = 0;
            }
            v37 = 1;
            if (!v11)
            {
LABEL_87:
              v38 = 0;
              goto LABEL_88;
            }
LABEL_80:
            v38 = *((_QWORD *)v11 + 1);
            if (v38)
              goto LABEL_84;
            v38 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v38 = 1;
            *(_QWORD *)(v38 + 8) = v11;
            v39 = (WTF *)*((_QWORD *)v11 + 1);
            *((_QWORD *)v11 + 1) = v38;
            if (!v39)
              goto LABEL_84;
            if (*(_DWORD *)v39 != 1)
            {
              --*(_DWORD *)v39;
LABEL_84:
              ++*(_DWORD *)v38;
              goto LABEL_88;
            }
            WTF::fastFree(v39, a2);
            v38 = *((_QWORD *)v11 + 1);
            if (v38)
              goto LABEL_84;
LABEL_88:
            v40 = (WTF *)*((_QWORD *)v35 + 6);
            *((_QWORD *)v35 + 6) = v38;
            if (!v40)
              goto LABEL_91;
            if (*(_DWORD *)v40 != 1)
            {
              --*(_DWORD *)v40;
LABEL_91:
              if (!v22)
                goto LABEL_116;
              goto LABEL_92;
            }
            WTF::fastFree(v40, a2);
            if (!v22)
            {
LABEL_116:
              v42 = 0;
              goto LABEL_138;
            }
LABEL_92:
            v41 = *((_QWORD *)v22 + 8);
            if (!v41)
            {
              v42 = 0;
LABEL_96:
              v43 = 1;
              goto LABEL_97;
            }
            v42 = *(WebCore::CounterNode **)(v41 + 8);
            if (!v42)
              goto LABEL_96;
            v43 = 0;
            ++*(_DWORD *)v42;
LABEL_97:
            v44 = *((_QWORD *)v22 + 1);
            if (v44)
              goto LABEL_101;
            v44 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v44 = 1;
            *(_QWORD *)(v44 + 8) = v22;
            v45 = (WTF *)*((_QWORD *)v22 + 1);
            *((_QWORD *)v22 + 1) = v44;
            if (!v45)
              goto LABEL_101;
            if (*(_DWORD *)v45 != 1)
            {
              --*(_DWORD *)v45;
LABEL_101:
              ++*(_DWORD *)v44;
              goto LABEL_102;
            }
            WTF::fastFree(v45, a2);
            v44 = *((_QWORD *)v22 + 1);
            if (v44)
              goto LABEL_101;
LABEL_102:
            v46 = (WTF *)*((_QWORD *)v35 + 7);
            *((_QWORD *)v35 + 7) = v44;
            if (v46)
            {
              if (*(_DWORD *)v46 == 1)
                WTF::fastFree(v46, a2);
              else
                --*(_DWORD *)v46;
            }
            v47 = *((_QWORD *)v35 + 1);
            if (v47)
              goto LABEL_109;
            v47 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v47 = 1;
            *(_QWORD *)(v47 + 8) = v35;
            v48 = (WTF *)*((_QWORD *)v35 + 1);
            *((_QWORD *)v35 + 1) = v47;
            if (!v48)
              goto LABEL_109;
            if (*(_DWORD *)v48 != 1)
            {
              --*(_DWORD *)v48;
LABEL_109:
              ++*(_DWORD *)v47;
              goto LABEL_110;
            }
            WTF::fastFree(v48, a2);
            v47 = *((_QWORD *)v35 + 1);
            if (v47)
              goto LABEL_109;
LABEL_110:
            v49 = (WTF *)*((_QWORD *)v22 + 8);
            *((_QWORD *)v22 + 8) = v47;
            if (!v49)
              goto LABEL_113;
            if (*(_DWORD *)v49 != 1)
            {
              --*(_DWORD *)v49;
LABEL_113:
              if ((v43 & 1) != 0)
                goto LABEL_114;
              goto LABEL_119;
            }
            WTF::fastFree(v49, a2);
            if ((v43 & 1) != 0)
            {
LABEL_114:
              v50 = 0;
              goto LABEL_124;
            }
LABEL_119:
            v50 = *((_QWORD *)v42 + 1);
            if (v50)
              goto LABEL_123;
            v50 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v50 = 1;
            *(_QWORD *)(v50 + 8) = v42;
            v51 = (WTF *)*((_QWORD *)v42 + 1);
            *((_QWORD *)v42 + 1) = v50;
            if (!v51)
              goto LABEL_123;
            if (*(_DWORD *)v51 != 1)
            {
              --*(_DWORD *)v51;
LABEL_123:
              ++*(_DWORD *)v50;
              goto LABEL_124;
            }
            WTF::fastFree(v51, a2);
            v50 = *((_QWORD *)v42 + 1);
            if (v50)
              goto LABEL_123;
LABEL_124:
            v52 = (WTF *)*((_QWORD *)v35 + 8);
            *((_QWORD *)v35 + 8) = v50;
            if (v52)
            {
              if (*(_DWORD *)v52 == 1)
                WTF::fastFree(v52, a2);
              else
                --*(_DWORD *)v52;
            }
            v53 = *((_QWORD *)v35 + 1);
            if (!v53)
            {
              v53 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v53 = 1;
              *(_QWORD *)(v53 + 8) = v35;
              v54 = (WTF *)*((_QWORD *)v35 + 1);
              *((_QWORD *)v35 + 1) = v53;
              if (v54)
              {
                if (*(_DWORD *)v54 == 1)
                {
                  WTF::fastFree(v54, a2);
                  v53 = *((_QWORD *)v35 + 1);
                  if (!v53)
                    goto LABEL_132;
                }
                else
                {
                  --*(_DWORD *)v54;
                }
              }
            }
            ++*(_DWORD *)v53;
LABEL_132:
            v55 = (WTF *)*((_QWORD *)v42 + 7);
            *((_QWORD *)v42 + 7) = v53;
            if (v55)
            {
              if (*(_DWORD *)v55 == 1)
                WTF::fastFree(v55, a2);
              else
                --*(_DWORD *)v55;
            }
            ++*(_DWORD *)v35;
            if (*(_DWORD *)v22 == 1)
            {
              WebCore::CounterNode::~CounterNode(v22);
              WTF::fastFree(v62, v63);
            }
            else
            {
              --*(_DWORD *)v22;
            }
            v22 = v35;
LABEL_138:
            if ((v37 & 1) == 0)
              ++*(_DWORD *)v34;
            if (*(_DWORD *)v35 == 1)
            {
              WebCore::CounterNode::~CounterNode(v35);
              WTF::fastFree(v56, v57);
              if (v42)
              {
LABEL_142:
                if (*(_DWORD *)v42 == 1)
                {
                  WebCore::CounterNode::~CounterNode(v42);
                  WTF::fastFree(v58, v59);
                }
                else
                {
                  --*(_DWORD *)v42;
                }
              }
            }
            else
            {
              --*(_DWORD *)v35;
              if (v42)
                goto LABEL_142;
            }
            if ((v37 & 1) != 0)
            {
LABEL_147:
              if (!v34)
                break;
            }
            else
            {
              if (*(_DWORD *)v34 != 1)
              {
                --*(_DWORD *)v34;
                goto LABEL_147;
              }
              WebCore::CounterNode::~CounterNode(v34);
              WTF::fastFree(v60, v61);
              if (!v34)
                break;
            }
          }
        }
      }
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::CounterNode::~CounterNode(v22);
          WTF::fastFree(v74, v75);
          if (!v11)
            goto LABEL_173;
          goto LABEL_171;
        }
        --*(_DWORD *)v22;
      }
      if (!v11)
        goto LABEL_173;
LABEL_171:
      if (*(_DWORD *)v11 == 1)
      {
        WebCore::CounterNode::~CounterNode(v11);
        WTF::fastFree(v76, v77);
      }
      else
      {
        --*(_DWORD *)v11;
      }
      goto LABEL_173;
    }
    v27 = *(WebCore::CounterNode **)(v26 + 56);
    if (v27)
      v27 = (WebCore::CounterNode *)*((_QWORD *)v27 + 1);
    if (v27 != this)
    {
LABEL_71:
      v32 = (WTF *)*((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
          WTF::fastFree(v32, a2);
        else
          --*(_DWORD *)v32;
      }
      goto LABEL_74;
    }
    if (v22)
    {
      v28 = *((_QWORD *)v22 + 1);
      if (v28)
        goto LABEL_66;
      v28 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = v22;
      v29 = (WTF *)*((_QWORD *)v22 + 1);
      *((_QWORD *)v22 + 1) = v28;
      if (!v29)
        goto LABEL_66;
      if (*(_DWORD *)v29 != 1)
      {
        --*(_DWORD *)v29;
LABEL_66:
        ++*(_DWORD *)v28;
        goto LABEL_68;
      }
      WTF::fastFree(v29, a2);
      v28 = *((_QWORD *)v22 + 1);
      if (v28)
        goto LABEL_66;
    }
    else
    {
      v28 = 0;
    }
LABEL_68:
    v30 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
    v31 = *(WTF **)(v30 + 56);
    *(_QWORD *)(v30 + 56) = v28;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, a2);
      else
        --*(_DWORD *)v31;
    }
    goto LABEL_71;
  }
LABEL_173:
  WebCore::CounterNode::resetRenderers(this, a2);
  v65 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::fastFree(v65, v64);
    else
      --*(_DWORD *)v65;
  }
  v66 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 1)
      WTF::fastFree(v66, v64);
    else
      --*(_DWORD *)v66;
  }
  v67 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 1)
      WTF::fastFree(v67, v64);
    else
      --*(_DWORD *)v67;
  }
  v68 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 1)
      WTF::fastFree(v68, v64);
    else
      --*(_DWORD *)v68;
  }
  v69 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 1)
      WTF::fastFree(v69, v64);
    else
      --*(_DWORD *)v69;
  }
  v70 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
      WTF::fastFree(v70, v64);
    else
      --*(_DWORD *)v70;
  }
  v71 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::fastFree(v71, v64);
    else
      --*(_DWORD *)v71;
  }
  v72 = *((_QWORD *)this + 1);
  if (v72)
  {
    *(_QWORD *)(v72 + 8) = 0;
    v73 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 1)
        WTF::fastFree(v73, v64);
      else
        --*(_DWORD *)v73;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

_QWORD *WebCore::CounterNode::resetRenderers(_QWORD *this, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  WTF *v6;
  WTF *v7;
  _BYTE v8[24];

  v2 = this[5];
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 8);
    if (v3)
    {
      v4 = this;
      do
      {
        v5 = v3;
        v6 = (WTF *)v3[20];
        if (v6)
        {
          v3 = (_QWORD *)*((_QWORD *)v6 + 1);
          v5[20] = 0;
          if (*(_DWORD *)v6 == 1)
            WTF::fastFree(v6, a2);
          else
            --*(_DWORD *)v6;
        }
        else
        {
          v3 = 0;
          v5[20] = 0;
        }
        v7 = (WTF *)v5[19];
        v5[19] = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 1)
            WTF::fastFree(v7, a2);
          else
            --*(_DWORD *)v7;
        }
        WTF::WeakHashSet<WebCore::RenderCounter,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderCounter>(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[3] + 8) + 40) + 8) + 1944) + 416, v5, (uint64_t)v8);
      }
      while (v3);
      this = (_QWORD *)v4[5];
      v4[5] = 0;
      if (this)
      {
        if (*(_DWORD *)this == 1)
          return (_QWORD *)WTF::fastFree((WTF *)this, a2);
        else
          --*(_DWORD *)this;
      }
    }
  }
  return this;
}

uint64_t WebCore::CounterNode::addRenderer(WebCore::CounterNode *this, WebCore::RenderCounter *a2)
{
  _DWORD *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t result;
  WTF *v9;
  WTF *v10;
  WTF *v11;

  v4 = (_DWORD *)*((_QWORD *)this + 5);
  if (v4)
    ++*v4;
  v5 = (WTF *)*((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
    goto LABEL_7;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a2;
  v11 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  if (!v11)
    goto LABEL_7;
  if (*(_DWORD *)v11 != 1)
  {
    --*(_DWORD *)v11;
LABEL_7:
    ++*(_DWORD *)v6;
    goto LABEL_8;
  }
  WTF::fastFree(v11, a2);
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
    goto LABEL_7;
LABEL_8:
  v7 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  result = *((_QWORD *)this + 1);
  if (result)
    goto LABEL_15;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = this;
  v9 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = result;
  if (!v9)
    goto LABEL_15;
  if (*(_DWORD *)v9 != 1)
  {
    --*(_DWORD *)v9;
LABEL_15:
    ++*(_DWORD *)result;
    goto LABEL_16;
  }
  WTF::fastFree(v9, a2);
  result = *((_QWORD *)this + 1);
  if (result)
    goto LABEL_15;
LABEL_16:
  v10 = (WTF *)*((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = result;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      return WTF::fastFree(v10, a2);
    else
      --*(_DWORD *)v10;
  }
  return result;
}

WTF *WebCore::CounterNode::removeRenderer(WebCore::CounterNode *this, WebCore::RenderCounter *a2)
{
  WTF *result;
  WebCore::RenderCounter *v4;
  WebCore::RenderCounter *v6;
  uint64_t v7;
  _DWORD *v8;
  WTF **v9;
  _DWORD *v10;
  WTF *v11;

  result = (WTF *)*((_QWORD *)this + 5);
  if (result)
  {
    v4 = (WebCore::RenderCounter *)*((_QWORD *)result + 1);
    if (v4)
    {
      if (v4 == a2)
      {
        v9 = (WTF **)((char *)a2 + 160);
        v10 = (_DWORD *)*((_QWORD *)a2 + 20);
        if (v10)
          ++*v10;
        *((_QWORD *)this + 5) = v10;
LABEL_14:
        if (*(_DWORD *)result == 1)
          WTF::fastFree(result, a2);
        else
          --*(_DWORD *)result;
LABEL_16:
        v11 = *v9;
        *v9 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 1)
            WTF::fastFree(v11, a2);
          else
            --*(_DWORD *)v11;
        }
        result = (WTF *)*((_QWORD *)a2 + 19);
        *((_QWORD *)a2 + 19) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            return (WTF *)WTF::fastFree(result, a2);
          else
            --*(_DWORD *)result;
        }
      }
      else
      {
        while (1)
        {
          v6 = v4;
          v7 = *((_QWORD *)v4 + 20);
          if (!v7)
            break;
          v4 = *(WebCore::RenderCounter **)(v7 + 8);
          if (!v4)
            break;
          if (v4 == a2)
          {
            v9 = (WTF **)((char *)a2 + 160);
            v8 = (_DWORD *)*((_QWORD *)a2 + 20);
            if (v8)
              ++*v8;
            result = (WTF *)*((_QWORD *)v6 + 20);
            *((_QWORD *)v6 + 20) = v8;
            if (result)
              goto LABEL_14;
            goto LABEL_16;
          }
        }
      }
    }
  }
  return result;
}

WTF *WebCore::CounterNode::recount(WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  WTF *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  WebCore::CounterNode *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WebCore::CounterNode *v21;
  char v22;
  char v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  WTF *v29;
  void *v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  void *v38;
  WTF *v39;
  void *v40;
  _BYTE v41[24];

  v2 = this;
  ++*(_DWORD *)this;
  do
  {
    if ((*((_BYTE *)v2 + 16) & 2) != 0)
    {
      v4 = *((_DWORD *)v2 + 5);
    }
    else
    {
      if ((*((_BYTE *)v2 + 16) & 1) != 0)
      {
        LODWORD(v3) = 0;
      }
      else
      {
        v3 = *((_QWORD *)v2 + 6);
        if (v3)
        {
          v3 = *(_QWORD *)(v3 + 8);
          if (v3)
            LODWORD(v3) = *((_DWORD *)v2 + 5);
        }
      }
      v5 = *((_QWORD *)v2 + 7);
      if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
        v7 = *(_DWORD *)(v6 + 24);
      else
        v7 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 6) + 8) + 20);
      v8 = __OFADD__(v7, (_DWORD)v3);
      v4 = v7 + v3;
      if (v8)
        v4 = v7;
    }
    if (*((_DWORD *)v2 + 6) == v4)
    {
      if (*(_DWORD *)v2 == 1)
      {
        WebCore::CounterNode::~CounterNode(v2, a2);
        return (WTF *)WTF::fastFree(v39, v40);
      }
      else
      {
        --*(_DWORD *)v2;
      }
      return this;
    }
    *((_DWORD *)v2 + 6) = v4;
    ++*(_DWORD *)v2;
    v9 = v2;
    do
    {
      v10 = *((_QWORD *)v9 + 5);
      if (v10)
      {
        v11 = *(_QWORD **)(v10 + 8);
        if (v11)
        {
          do
          {
            v12 = v11;
            v13 = (WTF *)v11[20];
            if (v13)
            {
              v11 = (_QWORD *)*((_QWORD *)v13 + 1);
              v12[20] = 0;
              if (*(_DWORD *)v13 == 1)
                WTF::fastFree(v13, a2);
              else
                --*(_DWORD *)v13;
            }
            else
            {
              v11 = 0;
              v12[20] = 0;
            }
            v14 = (WTF *)v12[19];
            v12[19] = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                WTF::fastFree(v14, a2);
              else
                --*(_DWORD *)v14;
            }
            WTF::WeakHashSet<WebCore::RenderCounter,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderCounter>(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12[3] + 8) + 40) + 8) + 1944) + 416, v12, (uint64_t)v41);
          }
          while (v11);
          this = (WTF *)*((_QWORD *)v9 + 5);
          *((_QWORD *)v9 + 5) = 0;
          if (this)
          {
            if (*(_DWORD *)this == 1)
              this = (WTF *)WTF::fastFree(this, a2);
            else
              --*(_DWORD *)this;
          }
        }
      }
      v15 = *((_QWORD *)v9 + 9);
      if (v15)
      {
        v16 = *(WTF **)(v15 + 8);
        if (v16)
          goto LABEL_67;
      }
      if (v9 == v2)
        goto LABEL_69;
      this = 0;
      ++*(_DWORD *)v9;
      v17 = v9;
      do
      {
        v18 = *((_QWORD *)v17 + 8);
        if (v18)
        {
          v16 = *(WTF **)(v18 + 8);
          if (v16)
          {
            v19 = 0;
            ++*(_DWORD *)v16;
            if (!this)
              goto LABEL_45;
            goto LABEL_43;
          }
        }
        else
        {
          v16 = 0;
        }
        v19 = 1;
        if (!this)
          goto LABEL_45;
LABEL_43:
        if (*(_DWORD *)this != 1)
        {
          --*(_DWORD *)this;
LABEL_45:
          if (!v19)
            goto LABEL_61;
          goto LABEL_46;
        }
        WebCore::CounterNode::~CounterNode(this, a2);
        this = (WTF *)WTF::fastFree(v24, v25);
        if (!v19)
        {
LABEL_61:
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::CounterNode::~CounterNode(v16, a2);
            this = (WTF *)WTF::fastFree(v33, v34);
          }
          else
          {
            --*(_DWORD *)v16;
          }
          v21 = v17;
          goto LABEL_65;
        }
LABEL_46:
        v20 = *((_QWORD *)v17 + 6);
        if (v20)
        {
          v21 = *(WebCore::CounterNode **)(v20 + 8);
          if (v21)
          {
            v22 = 0;
            ++*(_DWORD *)v21;
            goto LABEL_51;
          }
        }
        else
        {
          v21 = 0;
        }
        v22 = 1;
LABEL_51:
        if (*(_DWORD *)v17 == 1)
        {
          WebCore::CounterNode::~CounterNode(v17, a2);
          WTF::fastFree(v26, v27);
        }
        else
        {
          --*(_DWORD *)v17;
        }
        if (v21 == v2)
          v23 = 1;
        else
          v23 = v22;
        v17 = v21;
        this = v16;
      }
      while ((v23 & 1) == 0);
      v16 = 0;
      v28 = 0;
      if (!v21)
        goto LABEL_70;
LABEL_65:
      if (*(_DWORD *)v21 == 1)
      {
        WebCore::CounterNode::~CounterNode(v21, a2);
        this = (WTF *)WTF::fastFree(v29, v30);
        if (!v16)
          goto LABEL_69;
LABEL_67:
        ++*(_DWORD *)v16;
        v28 = v16;
        goto LABEL_70;
      }
      --*(_DWORD *)v21;
      if (v16)
        goto LABEL_67;
LABEL_69:
      v28 = 0;
LABEL_70:
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::CounterNode::~CounterNode(v9, a2);
        this = (WTF *)WTF::fastFree(v31, v32);
      }
      else
      {
        --*(_DWORD *)v9;
      }
      v9 = v28;
    }
    while (v28);
    v35 = *((_QWORD *)v2 + 8);
    if (v35)
    {
      v36 = *(WTF **)(v35 + 8);
      if (v36)
        ++*(_DWORD *)v36;
    }
    else
    {
      v36 = 0;
    }
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::CounterNode::~CounterNode(v2, a2);
      this = (WTF *)WTF::fastFree(v37, v38);
    }
    else
    {
      --*(_DWORD *)v2;
    }
    v2 = v36;
  }
  while (v36);
  return this;
}

WebCore::CounterNode *WebCore::CounterNode::insertAfter(WebCore::CounterNode *this, WebCore::CounterNode *a2, WebCore::CounterNode *a3, const WTF::AtomString *a4)
{
  WebCore::CounterNode *v7;
  WebCore::CounterNode *v8;
  uint64_t v9;
  WebCore::CounterNode *v10;
  uint64_t v11;
  WebCore::CounterNode *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  char v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  WebCore::CounterNode *v35;
  char v36;
  uint64_t v37;
  WebCore::CounterNode *v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  WebCore::CounterNode *v46;
  uint64_t v47;
  WebCore::CounterNode *v48;
  WebCore::CounterNode *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  WebCore::CounterNode *v53;
  char v54;
  char v55;
  WTF *v56;
  void *v57;
  WTF *v58;
  void *v59;
  WebCore::CounterNode *v60;
  WTF *v61;
  void *v62;
  WTF *v63;
  void *v64;
  WTF *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  WTF *v76;
  WTF *v77;
  uint64_t v78;
  WTF *v79;
  WTF *v80;
  uint64_t v81;
  WTF *v82;
  WTF *v83;
  WTF *v84;
  void *v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  WebCore::CounterNode *i;
  WTF *v90;
  uint64_t v91;
  WebCore::CounterNode *v92;
  WTF *v93;
  void *v94;
  WebCore::CounterNode *j;
  uint64_t v96;
  WTF *v97;
  WTF *v98;
  uint64_t v99;
  WebCore::CounterNode *v100;
  WTF *v101;
  void *v102;
  WTF *v103;
  WTF *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  void *v110;
  WTF *v111;
  void *v112;
  WTF *v113;
  void *v114;
  WTF *v115;
  void *v116;

  v7 = this;
  if (a3)
  {
    v8 = (WebCore::CounterNode *)*((_QWORD *)a3 + 6);
    if (v8)
      v8 = (WebCore::CounterNode *)*((_QWORD *)v8 + 1);
    if (v8 != this)
      return this;
  }
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    while (1)
    {
      v11 = *((_QWORD *)v7 + 10);
      if (!v11)
        break;
      v12 = *(WebCore::CounterNode **)(v11 + 8);
      if (v12 == a3)
        goto LABEL_6;
      WebCore::RenderCounter::destroyCounterNode(*(WebCore::RenderCounter **)(*((_QWORD *)v12 + 4) + 8), a4, a3);
    }
LABEL_13:
    v13 = *((_QWORD *)v7 + 9);
    if (v13)
    {
      v10 = *(WebCore::CounterNode **)(v13 + 8);
      if (v10)
        ++*(_DWORD *)v10;
    }
    else
    {
      v10 = 0;
    }
    v14 = *((_QWORD *)a2 + 1);
    if (!v14)
    {
      v14 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = a2;
      v15 = (WTF *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v14;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WTF::fastFree(v15, a2);
          v14 = *((_QWORD *)a2 + 1);
          if (!v14)
          {
LABEL_22:
            v16 = (WTF *)*((_QWORD *)v7 + 9);
            *((_QWORD *)v7 + 9) = v14;
            if (v16)
            {
              if (*(_DWORD *)v16 == 1)
                WTF::fastFree(v16, a2);
              else
                --*(_DWORD *)v16;
            }
            goto LABEL_35;
          }
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    ++*(_DWORD *)v14;
    goto LABEL_22;
  }
LABEL_6:
  if (!a3)
    goto LABEL_13;
  v9 = *((_QWORD *)a3 + 8);
  if (v9)
  {
    v10 = *(WebCore::CounterNode **)(v9 + 8);
    if (v10)
      ++*(_DWORD *)v10;
  }
  else
  {
    v10 = 0;
  }
  v17 = *((_QWORD *)a2 + 1);
  if (v17)
    goto LABEL_30;
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = a2;
  v18 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v17;
  if (!v18)
    goto LABEL_30;
  if (*(_DWORD *)v18 != 1)
  {
    --*(_DWORD *)v18;
LABEL_30:
    ++*(_DWORD *)v17;
    goto LABEL_31;
  }
  WTF::fastFree(v18, a2);
  v17 = *((_QWORD *)a2 + 1);
  if (v17)
    goto LABEL_30;
LABEL_31:
  v19 = (WTF *)*((_QWORD *)a3 + 8);
  *((_QWORD *)a3 + 8) = v17;
  if (!v19)
    goto LABEL_34;
  if (*(_DWORD *)v19 != 1)
  {
    --*(_DWORD *)v19;
LABEL_34:
    if (v7)
      goto LABEL_35;
LABEL_185:
    v20 = 0;
    v22 = 1;
    goto LABEL_40;
  }
  WTF::fastFree(v19, a2);
  if (!v7)
    goto LABEL_185;
LABEL_35:
  v20 = *((_QWORD *)v7 + 1);
  if (v20)
    goto LABEL_39;
  v20 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v20 = 1;
  *(_QWORD *)(v20 + 8) = v7;
  v21 = (WTF *)*((_QWORD *)v7 + 1);
  *((_QWORD *)v7 + 1) = v20;
  if (!v21)
    goto LABEL_39;
  if (*(_DWORD *)v21 != 1)
  {
    --*(_DWORD *)v21;
LABEL_39:
    v22 = 0;
    ++*(_DWORD *)v20;
    goto LABEL_40;
  }
  WTF::fastFree(v21, a2);
  v20 = *((_QWORD *)v7 + 1);
  if (v20)
    goto LABEL_39;
  v22 = 0;
LABEL_40:
  v23 = (WTF *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v20;
  if (!v23)
    goto LABEL_43;
  if (*(_DWORD *)v23 != 1)
  {
    --*(_DWORD *)v23;
LABEL_43:
    if (a3)
      goto LABEL_44;
LABEL_50:
    v24 = 0;
    goto LABEL_51;
  }
  WTF::fastFree(v23, a2);
  if (!a3)
    goto LABEL_50;
LABEL_44:
  v24 = *((_QWORD *)a3 + 1);
  if (v24)
    goto LABEL_48;
  v24 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v24 = 1;
  *(_QWORD *)(v24 + 8) = a3;
  v25 = (WTF *)*((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = v24;
  if (!v25)
    goto LABEL_48;
  if (*(_DWORD *)v25 != 1)
  {
    --*(_DWORD *)v25;
LABEL_48:
    ++*(_DWORD *)v24;
    goto LABEL_51;
  }
  WTF::fastFree(v25, a2);
  v24 = *((_QWORD *)a3 + 1);
  if (v24)
    goto LABEL_48;
LABEL_51:
  v26 = (WTF *)*((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v24;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::fastFree(v26, a2);
    else
      --*(_DWORD *)v26;
  }
  v27 = *((_QWORD *)a2 + 1);
  if (v10)
  {
    if (!v27)
    {
      v27 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = a2;
      v28 = (WTF *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v27;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
        {
          WTF::fastFree(v28, a2);
          v27 = *((_QWORD *)a2 + 1);
          if (!v27)
          {
LABEL_60:
            v29 = (WTF *)*((_QWORD *)v10 + 7);
            *((_QWORD *)v10 + 7) = v27;
            if (v29)
            {
              if (*(_DWORD *)v29 == 1)
                WTF::fastFree(v29, a2);
              else
                --*(_DWORD *)v29;
            }
            v30 = *((_QWORD *)v10 + 1);
            if (!v30)
            {
              v30 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v30 = 1;
              *(_QWORD *)(v30 + 8) = v10;
              v31 = (WTF *)*((_QWORD *)v10 + 1);
              *((_QWORD *)v10 + 1) = v30;
              if (v31)
              {
                if (*(_DWORD *)v31 == 1)
                {
                  WTF::fastFree(v31, a2);
                  v30 = *((_QWORD *)v10 + 1);
                  if (!v30)
                  {
LABEL_68:
                    v32 = (WTF *)*((_QWORD *)a2 + 8);
                    *((_QWORD *)a2 + 8) = v30;
                    if (!v32)
                      goto LABEL_78;
LABEL_76:
                    if (*(_DWORD *)v32 == 1)
                      WTF::fastFree(v32, a2);
                    else
                      --*(_DWORD *)v32;
                    goto LABEL_78;
                  }
                }
                else
                {
                  --*(_DWORD *)v31;
                }
              }
            }
            ++*(_DWORD *)v30;
            goto LABEL_68;
          }
        }
        else
        {
          --*(_DWORD *)v28;
        }
      }
    }
    ++*(_DWORD *)v27;
    goto LABEL_60;
  }
  if (v27)
    goto LABEL_74;
  v27 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v27 = 1;
  *(_QWORD *)(v27 + 8) = a2;
  v33 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v27;
  if (!v33)
    goto LABEL_74;
  if (*(_DWORD *)v33 != 1)
  {
    --*(_DWORD *)v33;
LABEL_74:
    ++*(_DWORD *)v27;
    goto LABEL_75;
  }
  WTF::fastFree(v33, a2);
  v27 = *((_QWORD *)a2 + 1);
  if (v27)
    goto LABEL_74;
LABEL_75:
  v32 = (WTF *)*((_QWORD *)v7 + 10);
  *((_QWORD *)v7 + 10) = v27;
  if (v32)
    goto LABEL_76;
LABEL_78:
  v34 = *((_QWORD *)a2 + 9);
  if (v34)
  {
    v35 = *(WebCore::CounterNode **)(v34 + 8);
    v36 = *((_BYTE *)a2 + 16);
    if (v35 && (*((_BYTE *)a2 + 16) & 1) == 0)
    {
      v37 = *((_QWORD *)a2 + 10);
      if (v37)
      {
        v38 = *(WebCore::CounterNode **)(v37 + 8);
        if (v38)
        {
          v39 = 0;
          ++*(_DWORD *)v38;
LABEL_146:
          ++*(_DWORD *)v35;
          v68 = *((_QWORD *)v35 + 1);
          if (!v68)
          {
            v68 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v68 = 1;
            *(_QWORD *)(v68 + 8) = v35;
            v69 = (WTF *)*((_QWORD *)v35 + 1);
            *((_QWORD *)v35 + 1) = v68;
            if (v69)
            {
              if (*(_DWORD *)v69 == 1)
              {
                WTF::fastFree(v69, a2);
                v68 = *((_QWORD *)v35 + 1);
                if (!v68)
                {
LABEL_151:
                  v70 = (WTF *)*((_QWORD *)a2 + 8);
                  *((_QWORD *)a2 + 8) = v68;
                  if (v70)
                  {
                    if (*(_DWORD *)v70 == 1)
                      WTF::fastFree(v70, a2);
                    else
                      --*(_DWORD *)v70;
                  }
                  v71 = *((_QWORD *)v7 + 10);
                  if (!v71 || *(WebCore::CounterNode **)(v71 + 8) != a2)
                  {
LABEL_168:
                    v75 = *((_QWORD *)a2 + 1);
                    if (!v75)
                    {
                      v75 = WTF::fastCompactMalloc((WTF *)0x10);
                      *(_DWORD *)v75 = 1;
                      *(_QWORD *)(v75 + 8) = a2;
                      v76 = (WTF *)*((_QWORD *)a2 + 1);
                      *((_QWORD *)a2 + 1) = v75;
                      if (v76)
                      {
                        if (*(_DWORD *)v76 == 1)
                        {
                          WTF::fastFree(v76, a2);
                          v75 = *((_QWORD *)a2 + 1);
                          if (!v75)
                          {
LABEL_173:
                            v77 = (WTF *)*((_QWORD *)v35 + 7);
                            *((_QWORD *)v35 + 7) = v75;
                            if (v77)
                            {
                              if (*(_DWORD *)v77 == 1)
                              {
                                WTF::fastFree(v77, a2);
                                if (v10)
                                {
LABEL_177:
                                  v78 = *((_QWORD *)v10 + 1);
                                  if (v78)
                                    goto LABEL_181;
                                  v78 = WTF::fastCompactMalloc((WTF *)0x10);
                                  *(_DWORD *)v78 = 1;
                                  *(_QWORD *)(v78 + 8) = v10;
                                  v79 = (WTF *)*((_QWORD *)v10 + 1);
                                  *((_QWORD *)v10 + 1) = v78;
                                  if (!v79)
                                    goto LABEL_181;
                                  if (*(_DWORD *)v79 != 1)
                                  {
                                    --*(_DWORD *)v79;
LABEL_181:
                                    ++*(_DWORD *)v78;
                                    goto LABEL_191;
                                  }
                                  WTF::fastFree(v79, a2);
                                  v78 = *((_QWORD *)v10 + 1);
                                  if (v78)
                                    goto LABEL_181;
LABEL_191:
                                  v80 = (WTF *)*((_QWORD *)v38 + 8);
                                  *((_QWORD *)v38 + 8) = v78;
                                  if (v80)
                                  {
                                    if (*(_DWORD *)v80 == 1)
                                    {
                                      WTF::fastFree(v80, a2);
                                      if (v10)
                                      {
LABEL_195:
                                        if ((v39 & 1) != 0)
                                        {
                                          v81 = 0;
                                        }
                                        else
                                        {
                                          v81 = *((_QWORD *)v38 + 1);
                                          if (!v81)
                                          {
                                            v81 = WTF::fastCompactMalloc((WTF *)0x10);
                                            *(_DWORD *)v81 = 1;
                                            *(_QWORD *)(v81 + 8) = v38;
                                            v82 = (WTF *)*((_QWORD *)v38 + 1);
                                            *((_QWORD *)v38 + 1) = v81;
                                            if (v82)
                                            {
                                              if (*(_DWORD *)v82 == 1)
                                              {
                                                WTF::fastFree(v82, a2);
                                                v81 = *((_QWORD *)v38 + 1);
                                                if (!v81)
                                                  goto LABEL_202;
                                              }
                                              else
                                              {
                                                --*(_DWORD *)v82;
                                              }
                                            }
                                          }
                                          ++*(_DWORD *)v81;
                                        }
LABEL_202:
                                        v83 = (WTF *)*((_QWORD *)v10 + 7);
                                        *((_QWORD *)v10 + 7) = v81;
                                        if (v83)
                                        {
                                          if (*(_DWORD *)v83 == 1)
                                            WTF::fastFree(v83, a2);
                                          else
                                            --*(_DWORD *)v83;
                                        }
                                        ++*(_DWORD *)v35;
                                        if (*(_DWORD *)v10 == 1)
                                        {
                                          WebCore::CounterNode::~CounterNode(v10, a2);
                                          WTF::fastFree(v84, v85);
                                        }
                                        else
                                        {
                                          --*(_DWORD *)v10;
                                        }
LABEL_220:
                                        if ((v22 & 1) != 0)
                                        {
                                          for (i = v35; ; i = v92)
                                          {
                                            v90 = (WTF *)*((_QWORD *)i + 6);
                                            *((_QWORD *)i + 6) = 0;
                                            if (v90)
                                            {
                                              if (*(_DWORD *)v90 == 1)
                                                WTF::fastFree(v90, a2);
                                              else
                                                --*(_DWORD *)v90;
                                            }
                                            if (v38 == i)
                                              break;
                                            v91 = *((_QWORD *)i + 8);
                                            if (v91)
                                            {
                                              v92 = *(WebCore::CounterNode **)(v91 + 8);
                                              if (v92)
                                                ++*(_DWORD *)v92;
                                            }
                                            else
                                            {
                                              v92 = 0;
                                            }
                                            if (*(_DWORD *)i == 1)
                                            {
                                              WebCore::CounterNode::~CounterNode(i, a2);
                                              WTF::fastFree(v93, v94);
                                            }
                                            else
                                            {
                                              --*(_DWORD *)i;
                                            }
                                          }
LABEL_256:
                                          v103 = (WTF *)*((_QWORD *)a2 + 9);
                                          *((_QWORD *)a2 + 9) = 0;
                                          if (v103)
                                          {
                                            if (*(_DWORD *)v103 == 1)
                                              WTF::fastFree(v103, a2);
                                            else
                                              --*(_DWORD *)v103;
                                          }
                                          v104 = (WTF *)*((_QWORD *)a2 + 10);
                                          *((_QWORD *)a2 + 10) = 0;
                                          if (v104)
                                          {
                                            if (*(_DWORD *)v104 == 1)
                                              WTF::fastFree(v104, a2);
                                            else
                                              --*(_DWORD *)v104;
                                          }
                                          if ((*((_BYTE *)a2 + 16) & 2) != 0)
                                          {
                                            v106 = *((_DWORD *)a2 + 5);
                                          }
                                          else
                                          {
                                            if ((*((_BYTE *)a2 + 16) & 1) != 0)
                                            {
                                              LODWORD(v105) = 0;
                                            }
                                            else
                                            {
                                              v105 = *((_QWORD *)a2 + 6);
                                              if (v105)
                                              {
                                                v105 = *(_QWORD *)(v105 + 8);
                                                if (v105)
                                                  LODWORD(v105) = *((_DWORD *)a2 + 5);
                                              }
                                            }
                                            v107 = *((_QWORD *)a2 + 7);
                                            if (v107 && (v108 = *(_QWORD *)(v107 + 8)) != 0)
                                              v109 = *(_DWORD *)(v108 + 24);
                                            else
                                              v109 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 6) + 8) + 20);
                                            v45 = __OFADD__(v109, (_DWORD)v105);
                                            v106 = v109 + v105;
                                            if (v45)
                                              v106 = v109;
                                          }
                                          *((_DWORD *)a2 + 6) = v106;
                                          WebCore::CounterNode::resetRenderers(a2, a2);
                                          this = WebCore::CounterNode::recount(v35, v110);
                                          if (*(_DWORD *)v35 == 1)
                                          {
                                            WebCore::CounterNode::~CounterNode(v35, v67);
                                            this = (WebCore::CounterNode *)WTF::fastFree(v113, v114);
                                            if ((v39 & 1) == 0)
                                              goto LABEL_277;
                                          }
                                          else
                                          {
                                            --*(_DWORD *)v35;
                                            if ((v39 & 1) == 0)
                                            {
LABEL_277:
                                              if (*(_DWORD *)v38 == 1)
                                              {
                                                WebCore::CounterNode::~CounterNode(v38, v67);
                                                this = (WebCore::CounterNode *)WTF::fastFree(v115, v116);
                                              }
                                              else
                                              {
                                                --*(_DWORD *)v38;
                                              }
LABEL_279:
                                              if (*(_DWORD *)v38 == 1)
                                              {
                                                WebCore::CounterNode::~CounterNode(v38, v67);
                                                return (WebCore::CounterNode *)WTF::fastFree(v111, v112);
                                              }
                                              else
                                              {
                                                --*(_DWORD *)v38;
                                              }
                                              return this;
                                            }
                                          }
                                          if (v38)
                                            goto LABEL_279;
                                          return this;
                                        }
                                        for (j = v35; ; j = v100)
                                        {
                                          v96 = *((_QWORD *)v7 + 1);
                                          if (v96)
                                            goto LABEL_240;
                                          v96 = WTF::fastCompactMalloc((WTF *)0x10);
                                          *(_DWORD *)v96 = 1;
                                          *(_QWORD *)(v96 + 8) = v7;
                                          v97 = (WTF *)*((_QWORD *)v7 + 1);
                                          *((_QWORD *)v7 + 1) = v96;
                                          if (!v97)
                                            goto LABEL_240;
                                          if (*(_DWORD *)v97 != 1)
                                            break;
                                          WTF::fastFree(v97, a2);
                                          v96 = *((_QWORD *)v7 + 1);
                                          if (v96)
                                            goto LABEL_240;
LABEL_241:
                                          v98 = (WTF *)*((_QWORD *)j + 6);
                                          *((_QWORD *)j + 6) = v96;
                                          if (v98)
                                          {
                                            if (*(_DWORD *)v98 == 1)
                                              WTF::fastFree(v98, a2);
                                            else
                                              --*(_DWORD *)v98;
                                          }
                                          if (v38 == j)
                                            goto LABEL_256;
                                          v99 = *((_QWORD *)j + 8);
                                          if (v99)
                                          {
                                            v100 = *(WebCore::CounterNode **)(v99 + 8);
                                            if (v100)
                                              ++*(_DWORD *)v100;
                                          }
                                          else
                                          {
                                            v100 = 0;
                                          }
                                          if (*(_DWORD *)j == 1)
                                          {
                                            WebCore::CounterNode::~CounterNode(j, a2);
                                            WTF::fastFree(v101, v102);
                                          }
                                          else
                                          {
                                            --*(_DWORD *)j;
                                          }
                                        }
                                        --*(_DWORD *)v97;
LABEL_240:
                                        ++*(_DWORD *)v96;
                                        goto LABEL_241;
                                      }
LABEL_209:
                                      if ((v39 & 1) != 0)
                                      {
                                        v86 = 0;
                                      }
                                      else
                                      {
                                        v86 = *((_QWORD *)v38 + 1);
                                        if (!v86)
                                        {
                                          v86 = WTF::fastCompactMalloc((WTF *)0x10);
                                          *(_DWORD *)v86 = 1;
                                          *(_QWORD *)(v86 + 8) = v38;
                                          v87 = (WTF *)*((_QWORD *)v38 + 1);
                                          *((_QWORD *)v38 + 1) = v86;
                                          if (v87)
                                          {
                                            if (*(_DWORD *)v87 == 1)
                                            {
                                              WTF::fastFree(v87, a2);
                                              v86 = *((_QWORD *)v38 + 1);
                                              if (!v86)
                                                goto LABEL_216;
                                            }
                                            else
                                            {
                                              --*(_DWORD *)v87;
                                            }
                                          }
                                        }
                                        ++*(_DWORD *)v86;
                                      }
LABEL_216:
                                      v88 = (WTF *)*((_QWORD *)v7 + 10);
                                      *((_QWORD *)v7 + 10) = v86;
                                      if (v88)
                                      {
                                        if (*(_DWORD *)v88 == 1)
                                          WTF::fastFree(v88, a2);
                                        else
                                          --*(_DWORD *)v88;
                                      }
                                      ++*(_DWORD *)v35;
                                      goto LABEL_220;
                                    }
                                    --*(_DWORD *)v80;
                                  }
                                  if (v10)
                                    goto LABEL_195;
                                  goto LABEL_209;
                                }
LABEL_190:
                                v78 = 0;
                                goto LABEL_191;
                              }
                              --*(_DWORD *)v77;
                            }
                            if (v10)
                              goto LABEL_177;
                            goto LABEL_190;
                          }
                        }
                        else
                        {
                          --*(_DWORD *)v76;
                        }
                      }
                    }
                    ++*(_DWORD *)v75;
                    goto LABEL_173;
                  }
                  if ((v39 & 1) != 0)
                  {
                    v72 = 0;
                    goto LABEL_165;
                  }
                  v72 = *((_QWORD *)v38 + 1);
                  if (!v72)
                  {
                    v72 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v72 = 1;
                    *(_QWORD *)(v72 + 8) = v38;
                    v73 = (WTF *)*((_QWORD *)v38 + 1);
                    *((_QWORD *)v38 + 1) = v72;
                    if (v73)
                    {
                      if (*(_DWORD *)v73 == 1)
                      {
                        WTF::fastFree(v73, a2);
                        v72 = *((_QWORD *)v38 + 1);
                        if (!v72)
                        {
LABEL_165:
                          v74 = (WTF *)*((_QWORD *)v7 + 10);
                          *((_QWORD *)v7 + 10) = v72;
                          if (v74)
                          {
                            if (*(_DWORD *)v74 == 1)
                              WTF::fastFree(v74, a2);
                            else
                              --*(_DWORD *)v74;
                          }
                          goto LABEL_168;
                        }
                      }
                      else
                      {
                        --*(_DWORD *)v73;
                      }
                    }
                  }
                  ++*(_DWORD *)v72;
                  goto LABEL_165;
                }
              }
              else
              {
                --*(_DWORD *)v69;
              }
            }
          }
          ++*(_DWORD *)v68;
          goto LABEL_151;
        }
      }
      else
      {
        v38 = 0;
      }
      v39 = 1;
      goto LABEL_146;
    }
  }
  else
  {
    v36 = *((_BYTE *)a2 + 16);
  }
  if ((v36 & 2) != 0)
  {
    v41 = *((_DWORD *)a2 + 5);
  }
  else
  {
    if ((v36 & 1) != 0)
    {
      LODWORD(v40) = 0;
    }
    else
    {
      v40 = *((_QWORD *)a2 + 6);
      if (v40)
      {
        v40 = *(_QWORD *)(v40 + 8);
        if (v40)
          LODWORD(v40) = *((_DWORD *)a2 + 5);
      }
    }
    v42 = *((_QWORD *)a2 + 7);
    if (v42 && (v43 = *(_QWORD *)(v42 + 8)) != 0)
      v44 = *(_DWORD *)(v43 + 24);
    else
      v44 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 6) + 8) + 20);
    v45 = __OFADD__(v44, (_DWORD)v40);
    v41 = v44 + v40;
    if (v45)
      v41 = v44;
  }
  *((_DWORD *)a2 + 6) = v41;
  ++*(_DWORD *)a2;
  v46 = a2;
  do
  {
    this = (WebCore::CounterNode *)WebCore::CounterNode::resetRenderers(v46, a2);
    v47 = *((_QWORD *)v46 + 9);
    if (v47)
    {
      v48 = *(WebCore::CounterNode **)(v47 + 8);
      if (v48)
        goto LABEL_133;
    }
    if (v46 == a2)
      goto LABEL_135;
    this = 0;
    ++*(_DWORD *)v46;
    v49 = v46;
    do
    {
      v50 = *((_QWORD *)v49 + 8);
      if (v50)
      {
        v48 = *(WebCore::CounterNode **)(v50 + 8);
        if (v48)
        {
          v51 = 0;
          ++*(_DWORD *)v48;
          if (!this)
            goto LABEL_111;
          goto LABEL_109;
        }
      }
      else
      {
        v48 = 0;
      }
      v51 = 1;
      if (!this)
        goto LABEL_111;
LABEL_109:
      if (*(_DWORD *)this != 1)
      {
        --*(_DWORD *)this;
LABEL_111:
        if (!v51)
          goto LABEL_127;
        goto LABEL_112;
      }
      WebCore::CounterNode::~CounterNode(this, a2);
      this = (WebCore::CounterNode *)WTF::fastFree(v56, v57);
      if (!v51)
      {
LABEL_127:
        if (*(_DWORD *)v48 == 1)
        {
          WebCore::CounterNode::~CounterNode(v48, a2);
          this = (WebCore::CounterNode *)WTF::fastFree(v65, v66);
        }
        else
        {
          --*(_DWORD *)v48;
        }
        v53 = v49;
        goto LABEL_131;
      }
LABEL_112:
      v52 = *((_QWORD *)v49 + 6);
      if (v52)
      {
        v53 = *(WebCore::CounterNode **)(v52 + 8);
        if (v53)
        {
          v54 = 0;
          ++*(_DWORD *)v53;
          goto LABEL_117;
        }
      }
      else
      {
        v53 = 0;
      }
      v54 = 1;
LABEL_117:
      if (*(_DWORD *)v49 == 1)
      {
        WebCore::CounterNode::~CounterNode(v49, a2);
        WTF::fastFree(v58, v59);
      }
      else
      {
        --*(_DWORD *)v49;
      }
      if (v53 == a2)
        v55 = 1;
      else
        v55 = v54;
      v49 = v53;
      this = v48;
    }
    while ((v55 & 1) == 0);
    v48 = 0;
    v60 = 0;
    if (!v53)
      goto LABEL_136;
LABEL_131:
    if (*(_DWORD *)v53 == 1)
    {
      WebCore::CounterNode::~CounterNode(v53, a2);
      this = (WebCore::CounterNode *)WTF::fastFree(v61, v62);
      if (!v48)
        goto LABEL_135;
LABEL_133:
      ++*(_DWORD *)v48;
      v60 = v48;
      goto LABEL_136;
    }
    --*(_DWORD *)v53;
    if (v48)
      goto LABEL_133;
LABEL_135:
    v60 = 0;
LABEL_136:
    if (*(_DWORD *)v46 == 1)
    {
      WebCore::CounterNode::~CounterNode(v46, a2);
      this = (WebCore::CounterNode *)WTF::fastFree(v63, v64);
    }
    else
    {
      --*(_DWORD *)v46;
    }
    v46 = v60;
  }
  while (v60);
  if (v10)
  {
    this = WebCore::CounterNode::recount(v10, a2);
    v38 = v10;
    goto LABEL_279;
  }
  return this;
}

uint64_t WebCore::CounterNode::removeChild(WebCore::CounterNode *this, WebCore::CounterNode *a2)
{
  WTF *v4;
  WTF *v5;
  char v6;
  WTF *v7;
  WebCore::CounterNode *v8;
  char v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  uint64_t result;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  void *v25;

  v4 = (WTF *)*((_QWORD *)a2 + 8);
  if (v4)
  {
    v5 = (WTF *)*((_QWORD *)v4 + 1);
    if (v5)
    {
      v6 = 0;
      ++*(_DWORD *)v5;
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 1;
LABEL_6:
  v7 = (WTF *)*((_QWORD *)a2 + 7);
  if (v7)
  {
    v8 = (WebCore::CounterNode *)*((_QWORD *)v7 + 1);
    if (v8)
    {
      v9 = 0;
      ++*(_DWORD *)v8;
      goto LABEL_11;
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = 1;
LABEL_11:
  *((_QWORD *)a2 + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WTF::fastFree(v4, a2);
      v7 = (WTF *)*((_QWORD *)a2 + 7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  *((_QWORD *)a2 + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  v10 = (WTF *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (!v10)
  {
LABEL_20:
    if (v8)
      goto LABEL_21;
LABEL_33:
    if ((v6 & 1) != 0)
    {
      v14 = 0;
      goto LABEL_40;
    }
    v14 = *((_QWORD *)v5 + 1);
    if (!v14)
    {
      v14 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = v5;
      v15 = (WTF *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = v14;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WTF::fastFree(v15, a2);
          v14 = *((_QWORD *)v5 + 1);
          if (!v14)
          {
LABEL_40:
            v13 = (WTF *)*((_QWORD *)this + 9);
            *((_QWORD *)this + 9) = v14;
            if (!v13)
              goto LABEL_43;
            goto LABEL_41;
          }
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    ++*(_DWORD *)v14;
    goto LABEL_40;
  }
  if (*(_DWORD *)v10 != 1)
  {
    --*(_DWORD *)v10;
    goto LABEL_20;
  }
  WTF::fastFree(v10, a2);
  if (!v8)
    goto LABEL_33;
LABEL_21:
  if ((v6 & 1) != 0)
  {
    v11 = 0;
    goto LABEL_28;
  }
  v11 = *((_QWORD *)v5 + 1);
  if (v11)
    goto LABEL_27;
  v11 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = v5;
  v12 = (WTF *)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v11;
  if (!v12)
    goto LABEL_27;
  if (*(_DWORD *)v12 != 1)
  {
    --*(_DWORD *)v12;
LABEL_27:
    ++*(_DWORD *)v11;
    goto LABEL_28;
  }
  WTF::fastFree(v12, a2);
  v11 = *((_QWORD *)v5 + 1);
  if (v11)
    goto LABEL_27;
LABEL_28:
  v13 = (WTF *)*((_QWORD *)v8 + 8);
  *((_QWORD *)v8 + 8) = v11;
  if (!v13)
  {
LABEL_43:
    if (v5)
      goto LABEL_44;
LABEL_57:
    if ((v9 & 1) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((_QWORD *)v8 + 1);
      if (!result)
      {
        result = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)result = 1;
        *(_QWORD *)(result + 8) = v8;
        v20 = (WTF *)*((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = result;
        if (v20)
        {
          if (*(_DWORD *)v20 == 1)
          {
            WTF::fastFree(v20, a2);
            result = *((_QWORD *)v8 + 1);
            if (!result)
              goto LABEL_64;
          }
          else
          {
            --*(_DWORD *)v20;
          }
        }
      }
      ++*(_DWORD *)result;
    }
LABEL_64:
    v21 = (WTF *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = result;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
      {
        result = WTF::fastFree(v21, a2);
        if ((v9 & 1) != 0)
          goto LABEL_70;
        goto LABEL_68;
      }
      --*(_DWORD *)v21;
    }
    if ((v9 & 1) != 0)
      goto LABEL_70;
LABEL_68:
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::CounterNode::~CounterNode(v8, a2);
      result = WTF::fastFree(v22, v23);
    }
    else
    {
      --*(_DWORD *)v8;
    }
    goto LABEL_70;
  }
LABEL_41:
  if (*(_DWORD *)v13 != 1)
  {
    --*(_DWORD *)v13;
    goto LABEL_43;
  }
  WTF::fastFree(v13, a2);
  if (!v5)
    goto LABEL_57;
LABEL_44:
  if ((v9 & 1) != 0)
  {
    v16 = 0;
    goto LABEL_51;
  }
  v16 = *((_QWORD *)v8 + 1);
  if (v16)
    goto LABEL_50;
  v16 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = v8;
  v17 = (WTF *)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v16;
  if (!v17)
    goto LABEL_50;
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
LABEL_50:
    ++*(_DWORD *)v16;
    goto LABEL_51;
  }
  WTF::fastFree(v17, a2);
  v16 = *((_QWORD *)v8 + 1);
  if (v16)
    goto LABEL_50;
LABEL_51:
  v18 = (WTF *)*((_QWORD *)v5 + 7);
  *((_QWORD *)v5 + 7) = v16;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree(v18, a2);
    else
      --*(_DWORD *)v18;
  }
  result = (uint64_t)WebCore::CounterNode::recount(v5, a2);
  if ((v9 & 1) == 0)
    goto LABEL_68;
LABEL_70:
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::CounterNode::~CounterNode(v5, a2);
      return WTF::fastFree(v24, v25);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return result;
}

unsigned int *WebCore::EllipsisBoxPainter::paintSelection(WebCore::EllipsisBoxPainter *this)
{
  float v1;
  uint64_t v3;
  char *v4;
  unsigned int *result;
  void *v6;
  int32x2_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  double v11;
  float v12;
  float v13;
  float v14;
  unsigned int v15;
  double v16;
  int v17;
  unsigned int v18;
  double v19;
  int v20;
  int v21;
  double v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  float v36;
  float v37;
  int v38;
  float v39;
  float v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF *v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  signed int v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  float v58;
  unsigned int v59;
  int v60;
  unsigned int *v61;
  unsigned int v62;
  float v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t *v71;
  float v72;
  int v73;
  unint64_t v74;
  WTF::StringImpl *v75;
  char v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 80);
  v4 = WebCore::InlineIterator::LineBox::style(*(WebCore::InlineIterator::LineBox **)this);
  result = WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v4, 5, 0, &v81);
  v8 = *((_QWORD *)this + 4);
  v80 = v8;
  if ((v8 & 0x8000000000000) == 0)
    goto LABEL_2;
  v61 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 + 1, v61));
  v8 = v80;
  if ((v80 & 0x8000000000000) == 0)
  {
LABEL_2:
    if (!(_BYTE)v8)
      goto LABEL_47;
    if (v81 != v8 || ((v81 | v8) & 0x8000000000000) != 0)
      goto LABEL_9;
LABEL_5:
    WebCore::Color::invertedColorWithAlpha((uint64_t)&v80, 1.0, (uint64_t *)&v74, v7);
    v10 = v74;
    if ((v80 & 0x8000000000000) != 0)
    {
      if ((v74 & 0x8000000000000) == 0
        || *(float *)((v80 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v74 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v80 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v74 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v80 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v74 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v80 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v74 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v80) != HIBYTE(v74)
        || BYTE6(v80) != BYTE6(v74))
      {
        v66 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFLL);
        do
        {
          v67 = __ldaxr(v66);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v66));
        if (!v68)
        {
          atomic_store(1u, v66);
          WTF::fastFree((WTF *)v66, v9);
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (v80 != v74 || (v74 & 0x8000000000000) != 0)
      {
LABEL_8:
        v80 = v74;
        goto LABEL_9;
      }
      v10 = v80;
    }
    if ((v10 & 0x8000000000000) != 0)
    {
      v45 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v45);
        WTF::fastFree((WTF *)v45, v9);
      }
    }
    goto LABEL_9;
  }
  result = (unsigned int *)(v80 & 0xFFFFFFFFFFFFLL);
  v63 = *(float *)((v80 & 0xFFFFFFFFFFFFLL) + 0x10);
  if (v63 <= 0.0)
    goto LABEL_101;
  if ((v81 & 0x8000000000000) != 0)
  {
    v7.i32[0] = *(_DWORD *)((v81 & 0xFFFFFFFFFFFFLL) + 0x10);
    if (*(float *)((v81 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v80 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v81 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v80 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v81 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v80 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)v7.i32 == v63
      && HIBYTE(v81) == HIBYTE(v80)
      && BYTE6(v81) == BYTE6(v80))
    {
      goto LABEL_5;
    }
  }
LABEL_9:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 96))(v3, 1);
  v11 = WebCore::InlineIterator::LineBox::ellipsisVisualRect(*(unsigned int **)this, (WebCore::RenderBlock *)1) * 64.0;
  if (v11 > -2147483650.0)
    v15 = (int)v11;
  else
    v15 = 0x80000000;
  if (v11 >= 2147483650.0)
    v15 = 0x7FFFFFFF;
  v16 = v12 * 64.0;
  if (v16 > -2147483650.0)
    v17 = (int)v16;
  else
    v17 = 0x80000000;
  if (v16 < 2147483650.0)
    v18 = v17;
  else
    v18 = 0x7FFFFFFF;
  v19 = v13 * 64.0;
  if (v19 > -2147483650.0)
    v20 = (int)v19;
  else
    v20 = 0x80000000;
  if (v19 < 2147483650.0)
    v21 = v20;
  else
    v21 = 0x7FFFFFFF;
  LODWORD(v79) = v21;
  v22 = v14 * 64.0;
  if (v22 >= 2147483650.0)
  {
    v23 = 0x7FFFFFFF;
  }
  else if (v22 <= -2147483650.0)
  {
    v23 = 0x80000000;
  }
  else
  {
    v23 = (int)v22;
  }
  HIDWORD(v79) = v23;
  v25 = *((_DWORD *)this + 4);
  v24 = *((_DWORD *)this + 5);
  v26 = __OFADD__(v15, v25);
  v27 = v15 + v25;
  if (v26)
    v27 = (v15 >> 31) + 0x7FFFFFFF;
  v77 = v27;
  v28 = v18 + v24;
  if (__OFADD__(v18, v24))
    v28 = (v18 >> 31) + 0x7FFFFFFF;
  v78 = v28;
  v29 = *(unsigned int *)(*(_QWORD *)this + 16);
  if ((_DWORD)v29 == -1
    || (v71 = &v82,
        ((void (*)(unint64_t *__return_ptr, uint64_t **))off_1E341E388[v29])(&v74, &v71),
        WebCore::FontCascade::adjustSelectionRectForText(*((_QWORD *)v4 + 4) + 32, 0, (uint64_t)&v74, (WebCore::LayoutRect *)&v77, 0, 0), v30 = *(unsigned int *)(*(_QWORD *)this + 16), (_DWORD)v30 == -1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
    v52 = round((v51 + (double)-v50) * v1) / v1 - (double)-v50;
    goto LABEL_62;
  }
  v71 = &v82;
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(((uint64_t (*)(uint64_t **))off_1E341E398[v30])(&v71)
                                                                  + 24)
                                                      + 8)
                                          + 40)
                              + 8)
                  + 528);
  v1 = 1.0;
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 8);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 24);
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 8);
        if (v34)
        {
          v35 = (*(_DWORD *)v34)++;
          v1 = *(float *)(v34 + 364);
          if (v35)
          {
            *(_DWORD *)v34 = v35;
          }
          else
          {
            WebCore::Page::~Page(v34);
            WTF::fastFree(v43, v44);
          }
        }
      }
    }
  }
  if ((v76 & 2) == 0)
  {
    v36 = WebCore::snapRectToDevicePixels((int *)&v77, v1);
    v40 = v39;
    goto LABEL_43;
  }
  v48 = v78;
  v49 = v77;
  v50 = v77 + (_DWORD)v79;
  if (__OFADD__(v77, (_DWORD)v79))
    v50 = (v77 >> 31) + 0x7FFFFFFF;
  v51 = (double)v50 * 0.015625 + -0.000122070312;
  if (v51 < 0.0)
    goto LABEL_82;
  v52 = round(v51 * v1) / v1;
LABEL_62:
  v53 = v48 << 32;
  v54 = (double)(int)v48 * 0.015625;
  v55 = round((v54 + (double)-(int)v48) * v1) / v1 - (double)-(int)v48;
  v56 = round(v54 * v1) / v1;
  if (v54 >= 0.0)
    v57 = v56;
  else
    v57 = v55;
  v58 = v52;
  v71 = v79;
  v59 = v49 + (_DWORD)v79;
  if (__OFADD__(v49, (_DWORD)v79))
    v59 = (v49 >> 31) + 0x7FFFFFFF;
  v40 = v57;
  v82 = v53 | v59;
  v37 = WebCore::snapSizeToDevicePixel((int *)&v71, (int *)&v82, v1);
  v38 = v60;
  v36 = v58 - v37;
LABEL_43:
  v71 = (uint64_t *)__PAIR64__(LODWORD(v40), LODWORD(v36));
  v72 = v37;
  v73 = v38;
  (*(void (**)(uint64_t, uint64_t **, unint64_t *))(*(_QWORD *)v3 + 224))(v3, &v71, &v80);
  v42 = v75;
  v75 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v41);
    else
      *(_DWORD *)v42 -= 2;
  }
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 104))(v3, 1);
  if ((v80 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v80 & 0xFFFFFFFFFFFFLL);
    do
    {
LABEL_101:
      v69 = __ldaxr(result);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, result));
    if (!v70)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
LABEL_47:
  if ((v81 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v81 & 0xFFFFFFFFFFFFLL);
    do
    {
      v64 = __ldaxr(result);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, result));
    if (!v65)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

float WebCore::InlineIterator::LineBox::ellipsisVisualRect(unsigned int *a1, WebCore::RenderBlock *a2)
{
  unsigned int *v2;
  WebCore::RenderBlock *v3;
  uint64_t v4;
  float v5;
  int v6;
  float v7;
  uint64_t v8;
  WebCore::RenderBox *v9;
  float v11;
  double v12;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  char v20;
  char *v21;

  v4 = a1[4];
  if ((_DWORD)v4 == -1)
    goto LABEL_10;
  v3 = a2;
  v2 = a1;
  v21 = &v20;
  v16 = ((float (*)(char **, unsigned int *))off_1E341E378[v4])(&v21, a1);
  v17 = v5;
  v18 = v6;
  v19 = v7;
  if ((v3 & 1) != 0)
  {
    v3 = (WebCore::RenderBlock *)WebCore::InlineIterator::LineBox::formattingContextRoot((WebCore::InlineIterator::LineBox *)v2);
    WebCore::InlineIterator::LineBox::contentLogicalTopAdjustedForPrecedingLineBox((WebCore::InlineIterator::LineBox *)v2);
    v12 = v11 * 64.0;
    if (v12 < 2147483650.0)
    {
      if (v12 <= -2147483650.0)
        v13 = 0x80000000;
      else
        v13 = (int)v12;
      goto LABEL_9;
    }
LABEL_11:
    v13 = 0x7FFFFFFFLL;
LABEL_9:
    v14 = WebCore::RenderBlockFlow::adjustEnclosingTopForPrecedingBlock(v3, v13);
    WebCore::InlineIterator::LineBox::contentLogicalBottomAdjustedForFollowingLineBox((WebCore::InlineIterator::LineBox *)v2);
    v17 = (float)v14 * 0.015625;
    v19 = v15 - v17;
    v9 = (WebCore::RenderBox *)WebCore::InlineIterator::LineBox::formattingContextRoot((WebCore::InlineIterator::LineBox *)v2);
    goto LABEL_5;
  }
  v8 = v2[4];
  if ((_DWORD)v8 == -1)
  {
LABEL_10:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_11;
  }
  v21 = &v20;
  v9 = (WebCore::RenderBox *)((uint64_t (*)(char **, unsigned int *))off_1E341E398[v8])(&v21, v2);
LABEL_5:
  WebCore::RenderBox::flipForWritingMode(v9, (WebCore::FloatRect *)&v16);
  return v16;
}

uint64_t WebCore::GraphicsContext::clearDropShadow(WebCore::GraphicsContext *this)
{
  char *v2;
  void *v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE v8[16];
  uint64_t v9;
  char v10;

  v2 = (char *)this + 8;
  v8[0] = 0;
  v10 = 0;
  WebCore::GraphicsContextState::setDropShadow((uint64_t)this + 8, (uint64_t)v8);
  if (v10)
  {
    if ((v9 & 0x8000000000000) != 0)
    {
      v5 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  return (*(uint64_t (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)this + 88))(this, v2);
}

void WebCore::snapRectToDevicePixelsWithWritingDirection(WebCore *this, const WebCore::LayoutRect *a2, float a3)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 1) != 0)
  {
    WebCore::snapRectToDevicePixels((int *)this, a3);
  }
  else
  {
    v3 = *((_DWORD *)this + 2);
    v4 = __OFADD__(*(_DWORD *)this, v3);
    LODWORD(v5) = *(_DWORD *)this + v3;
    if (v4)
      v5 = ((*(_DWORD *)this >> 31) + 0x7FFFFFFF);
    else
      v5 = v5;
    v10 = v5 | ((unint64_t)*((unsigned int *)this + 1) << 32);
    WebCore::roundPointToDevicePixels((WebCore *)&v10, 0, a3);
    v10 = *((_QWORD *)this + 1);
    LODWORD(v8) = *(_DWORD *)this + v10;
    if (__OFADD__(*(_DWORD *)this, (_DWORD)v10))
      v8 = ((*(_DWORD *)this >> 31) + 0x7FFFFFFF);
    else
      v8 = v8;
    v9 = v8 | ((unint64_t)*((unsigned int *)this + 1) << 32);
    WebCore::snapSizeToDevicePixel((int *)&v10, (int *)&v9, a3);
  }
}

double WebCore::EventRegionContext::EventRegionContext(WebCore::EventRegionContext *this, WebCore::EventRegion *a2)
{
  double result;

  *((_DWORD *)this + 2) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_QWORD *)this = off_1E341E260;
  *((_QWORD *)this + 6) = a2;
  return result;
}

{
  double result;

  *((_DWORD *)this + 2) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_QWORD *)this = off_1E341E260;
  *((_QWORD *)this + 6) = a2;
  return result;
}

void WebCore::EventRegionContext::~EventRegionContext(WebCore::EventRegionContext *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E341E140;
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E341E140;
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E341E140;
  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  if (*((_DWORD *)this + 2))
  {
    *((_QWORD *)this + 6) = 0;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
}

uint64_t WebCore::EventRegion::touchActionsForPoint(WebCore::EventRegion *this, const WebCore::IntPoint *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  int *v15;
  int v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;

  v2 = *((unsigned int *)this + 9);
  if (!(_DWORD)v2)
    return 1;
  v4 = 0;
  result = 0;
  v6 = *((_QWORD *)this + 3);
  v7 = *(_DWORD *)a2;
  v8 = *((_DWORD *)a2 + 1);
  do
  {
    v9 = v6 + 24 * v4;
    if (*(_DWORD *)v9 <= v7 && *(_DWORD *)(v9 + 8) + *(_DWORD *)v9 > v7)
    {
      v10 = *(_DWORD *)(v9 + 4);
      if (v10 <= v8 && *(_DWORD *)(v9 + 12) + v10 > v8)
      {
        v11 = *(_QWORD *)(v9 + 16);
        if (v11)
        {
          v12 = *(unsigned int *)(v11 + 156);
          if (v12 >= 2)
          {
            v13 = *(int **)(v11 + 144);
            v14 = &v13[4 * v12];
            v15 = v13 + 4;
            v16 = *v13;
            do
            {
              if (v16 > v8)
                break;
              v17 = v15;
              v16 = v13[4];
              if (v16 > v8)
              {
                v18 = *((_QWORD *)v13 + 1);
                v19 = *(unsigned int *)(v11 + 12);
                if (v18 != v19)
                {
                  if (v18 >= v19)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1963289C0);
                  }
                  v20 = *((_QWORD *)v13 + 3);
                  if (v18 != v20)
                  {
                    v21 = (int *)(*(_QWORD *)v11 + 4 * v18 + 4);
                    if (v21 != (int *)(*(_QWORD *)v11 + 4 * v20))
                    {
                      v22 = 4 * v20 - 4 * v18 - 12;
                      do
                      {
                        if (*(v21 - 1) > v7)
                          break;
                        if (*v21 > v7)
                          goto LABEL_24;
                        if (v22 == -4)
                          break;
                        v21 += 2;
                        v23 = v22;
                        v22 -= 8;
                      }
                      while (v23);
                    }
                  }
                }
              }
              if (v17 == v14)
                break;
              v15 = v17 + 4;
              v13 = v17;
            }
            while (v17 + 4 != v14);
          }
        }
        else
        {
LABEL_24:
          v24 = 8;
          switch((int)v4)
          {
            case 0:
              v25 = 2;
              return v25 | result;
            case 1:
              v25 = 4;
              return v25 | result;
            case 2:
              goto LABEL_28;
            case 3:
              v24 = 16;
              goto LABEL_28;
            case 4:
              v24 = 32;
              goto LABEL_28;
            default:
              v24 = 1;
LABEL_28:
              result = v24 | result;
              break;
          }
        }
      }
    }
    ++v4;
  }
  while (v4 != v2);
  if (!(_DWORD)result)
    return 1;
  return result;
}

uint64_t WebCore::EventRegion::eventListenerRegionTypesForPoint(WebCore::EventRegion *this, const WebCore::IntPoint *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int v11;
  int *v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int v27;
  int *v28;
  int *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v3 = *(_DWORD *)a2;
  v4 = *((_DWORD *)a2 + 1);
  v5 = *((_DWORD *)this + 10);
  if (v5 <= *(_DWORD *)a2 && *((_DWORD *)this + 12) + v5 > v3)
  {
    v6 = *((_DWORD *)this + 11);
    if (v6 <= v4 && *((_DWORD *)this + 13) + v6 > v4)
    {
      v7 = *((_QWORD *)this + 7);
      if (!v7)
      {
LABEL_44:
        result = 1;
        goto LABEL_23;
      }
      v8 = *(unsigned int *)(v7 + 156);
      if (v8 >= 2)
      {
        v9 = *(int **)(v7 + 144);
        v10 = &v9[4 * v8];
        v12 = v9 + 4;
        v11 = *v9;
        while (v11 <= v4)
        {
          v13 = v12;
          v11 = v9[4];
          if (v11 > v4)
          {
            v14 = *((_QWORD *)v9 + 1);
            v15 = *(unsigned int *)(v7 + 12);
            if (v14 != v15)
            {
              if (v14 >= v15)
              {
LABEL_46:
                __break(0xC471u);
                JUMPOUT(0x196328C04);
              }
              v16 = *((_QWORD *)v9 + 3);
              if (v14 != v16)
              {
                v17 = (_DWORD *)(*(_QWORD *)v7 + 4 * v14 + 4);
                if (v17 != (_DWORD *)(*(_QWORD *)v7 + 4 * v16))
                {
                  v18 = 4 * v16 - 4 * v14 - 12;
                  do
                  {
                    if (*(v17 - 1) > v3)
                      break;
                    if (*v17 > v3)
                      goto LABEL_44;
                    if (v18 == -4)
                      break;
                    v17 += 2;
                    v19 = v18;
                    v18 -= 8;
                  }
                  while (v19);
                }
              }
            }
          }
          result = 0;
          if (v13 != v10)
          {
            v12 = v13 + 4;
            v9 = v13;
            if (v13 + 4 != v10)
              continue;
          }
          goto LABEL_23;
        }
      }
    }
  }
  result = 0;
LABEL_23:
  v21 = *((_DWORD *)this + 16);
  if (v21 <= v3 && *((_DWORD *)this + 18) + v21 > v3)
  {
    v22 = *((_DWORD *)this + 17);
    if (v22 <= v4 && *((_DWORD *)this + 19) + v22 > v4)
    {
      v23 = *((_QWORD *)this + 10);
      if (v23)
      {
        v24 = *(unsigned int *)(v23 + 156);
        if (v24 >= 2)
        {
          v25 = *(int **)(v23 + 144);
          v26 = &v25[4 * v24];
          v28 = v25 + 4;
          v27 = *v25;
          do
          {
            if (v27 > v4)
              break;
            v29 = v28;
            v27 = v25[4];
            if (v27 > v4)
            {
              v30 = *((_QWORD *)v25 + 1);
              v31 = *(unsigned int *)(v23 + 12);
              if (v30 != v31)
              {
                if (v30 >= v31)
                  goto LABEL_46;
                v32 = *((_QWORD *)v25 + 3);
                if (v30 != v32)
                {
                  v33 = (_DWORD *)(*(_QWORD *)v23 + 4 * v30 + 4);
                  if (v33 != (_DWORD *)(*(_QWORD *)v23 + 4 * v32))
                  {
                    v34 = 4 * v32 - 4 * v30 - 12;
                    do
                    {
                      if (*(v33 - 1) > v3)
                        break;
                      if (*v33 > v3)
                        return result | 2;
                      if (v34 == -4)
                        break;
                      v33 += 2;
                      v35 = v34;
                      v34 -= 8;
                    }
                    while (v35);
                  }
                }
              }
            }
            if (v29 == v26)
              break;
            v28 = v29 + 4;
            v25 = v29;
          }
          while (v29 + 4 != v26);
        }
      }
      else
      {
        return result | 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::EventRegion::containsEditableElementsInRect(WebCore::EventRegion *this, const WebCore::IntRect *a2)
{
  void *v2;
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  WTF *v7;
  __int128 v10;
  WTF *v11;

  if (!*((_BYTE *)this + 112))
    return 0;
  v10 = *(_OWORD *)a2;
  v11 = 0;
  v3 = WebCore::Region::intersects((WebCore::EventRegion *)((char *)this + 88), (const WebCore::Region *)&v10);
  v4 = v11;
  v11 = 0;
  if (v4)
  {
    v5 = (WTF *)*((_QWORD *)v4 + 18);
    if ((WTF *)((char *)v4 + 160) != v5 && v5 != 0)
    {
      *((_QWORD *)v4 + 18) = 0;
      *((_DWORD *)v4 + 38) = 0;
      WTF::fastFree(v5, v2);
    }
    v7 = *(WTF **)v4;
    if ((WTF *)((char *)v4 + 16) != *(WTF **)v4 && v7 != 0)
    {
      *(_QWORD *)v4 = 0;
      *((_DWORD *)v4 + 2) = 0;
      WTF::fastFree(v7, v2);
    }
    WTF::fastFree(v4, v2);
  }
  return v3;
}

WTF::TextStream *WebCore::EventRegion::dump(WebCore::EventRegion *this, WTF::TextStream *a2)
{
  WTF::TextStream *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  WTF::TextStream *v10;
  WTF::TextStream *v11;

  result = WebCore::operator<<(a2, (__int128 *)this);
  if (*((_DWORD *)this + 9))
  {
    ++*((_DWORD *)a2 + 6);
    WTF::TextStream::writeIndent(a2);
    WTF::TextStream::operator<<();
    v5 = *((unsigned int *)this + 9);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 0;
      for (i = 0; i < v5; ++i)
      {
        v9 = *((_QWORD *)this + 3) + v6;
        if (*(int *)(v9 + 8) >= 1 && *(int *)(v9 + 12) >= 1)
        {
          ++*((_DWORD *)a2 + 6);
          WTF::TextStream::writeIndent(a2);
          WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          result = (WTF::TextStream *)WTF::TextStream::writeIndent(a2);
          if (i >= *((unsigned int *)this + 9))
          {
            __break(0xC471u);
LABEL_23:
            __break(1u);
            return result;
          }
          WebCore::operator<<(a2, (__int128 *)(*((_QWORD *)this + 3) + v6));
          WTF::TextStream::writeIndent(a2);
          WTF::TextStream::operator<<();
          --*((_DWORD *)a2 + 6);
          v5 = *((unsigned int *)this + 9);
        }
        v7 += 0x100000000;
        v6 += 24;
      }
    }
    WTF::TextStream::writeIndent(a2);
    result = (WTF::TextStream *)WTF::TextStream::operator<<();
    --*((_DWORD *)a2 + 6);
  }
  if (*((int *)this + 12) >= 1 && *((int *)this + 13) >= 1)
  {
    WTF::TextStream::writeIndent(a2);
    v10 = (WTF::TextStream *)WTF::TextStream::operator<<();
    WebCore::operator<<(v10, (__int128 *)((char *)this + 40));
    if (*((int *)this + 18) >= 1 && *((int *)this + 19) >= 1)
    {
      ++*((_DWORD *)a2 + 6);
      WTF::TextStream::writeIndent(a2);
      v11 = (WTF::TextStream *)WTF::TextStream::operator<<();
      WebCore::operator<<(v11, (__int128 *)this + 4);
      WTF::TextStream::writeIndent(a2);
      WTF::TextStream::operator<<();
      --*((_DWORD *)a2 + 6);
    }
    WTF::TextStream::writeIndent(a2);
    result = (WTF::TextStream *)WTF::TextStream::operator<<();
  }
  if (*((_BYTE *)this + 112) && *((int *)this + 24) >= 1 && *((int *)this + 25) >= 1)
  {
    WTF::TextStream::writeIndent(a2);
    result = (WTF::TextStream *)WTF::TextStream::operator<<();
    if (!*((_BYTE *)this + 112))
      goto LABEL_23;
    WebCore::operator<<(result, (__int128 *)((char *)this + 88));
    WTF::TextStream::writeIndent(a2);
    return (WTF::TextStream *)WTF::TextStream::operator<<();
  }
  return result;
}

WTF::TextStream *WebCore::operator<<(WTF::TextStream *a1, WebCore::EventRegion *this)
{
  WebCore::EventRegion::dump(this, a1);
  return a1;
}

void WebCore::CSSFilter::~CSSFilter(WebCore::CSSFilter *this, void *a2)
{
  void *v3;

  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  WebCore::RenderingResource::~RenderingResource(this, v3);
}

{
  void *v3;
  WTF *v4;
  void *v5;

  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  WebCore::RenderingResource::~RenderingResource(this, v3);
  WTF::fastFree(v4, v5);
}

float WebCore::SVGLengthContext::resolveRectangle<WebCore::SVGFilterElement>(uint64_t *a1, int a2, float *a3)
{
  WebCore::SVGLengthValue *v6;
  WebCore::SVGLengthValue *v7;
  WebCore::SVGLengthValue *v8;
  WebCore::SVGLengthValue *v9;

  v6 = (WebCore::SVGLengthValue *)WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::currentValue(a1[26]);
  v7 = (WebCore::SVGLengthValue *)WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::currentValue(a1[27]);
  v8 = (WebCore::SVGLengthValue *)WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::currentValue(a1[28]);
  v9 = (WebCore::SVGLengthValue *)WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::currentValue(a1[29]);
  return WebCore::SVGLengthContext::resolveRectangle((WebCore::SVGElement *)a1, a2, a3, v6, v7, v8, v9);
}

uint64_t WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>::currentValue(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t *v6[5];
  uint64_t *v7[5];

  v2 = (uint64_t *)(a1 + 24);
  v1 = *(_QWORD *)(a1 + 24);
  if (v1
    && *(_DWORD *)(v1 - 12)
    && (v5 = a1,
        WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)(a1 + 24), v7), WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v2, v6), a1 = v5, v7[1] != v6[1]))
  {
    v3 = (_QWORD *)(v5 + 48);
  }
  else
  {
    v3 = (_QWORD *)(a1 + 40);
  }
  return *v3 + 28;
}

uint64_t WTF::downcast<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::LeafBoxIterator const>(WebCore::InlineIterator::BoxIterator *a1)
{
  uint64_t result;

  if ((WebCore::InlineIterator::BoxIterator::atEnd(a1) & 1) != 0 || (WebCore::InlineIterator::Box::isText(a1) & 1) != 0)
    return (uint64_t)a1;
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::computeCaretRectForLinePosition(WebCore::InlineIterator::LineBox *a1, int a2, float a3)
{
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unsigned int v11;
  int v12;
  int v13;
  float v14;
  float v15;
  unsigned int v16;
  int *v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  unint64_t v26;
  int8x8_t v27;

  v6 = WebCore::InlineIterator::LineBox::formattingContextRoot(a1);
  WebCore::LineSelection::logicalRect((unsigned int *)a1);
  v11 = *(_DWORD *)(v6 + 120);
  v12 = (v11 >> 6) & 0xF;
  if (v12 == 7)
  {
LABEL_2:
    v13 = (v11 >> 26) & 1;
  }
  else
  {
    v13 = 0;
    switch(v12)
    {
      case 1:
      case 5:
        v13 = 1;
        break;
      case 3:
        goto LABEL_2;
      case 8:
        v13 = (v11 & 0x4000000) == 0;
        break;
      default:
        break;
    }
  }
  v14 = roundf(a3 + -1.0);
  v15 = v7 + v9;
  v16 = ((*(_DWORD *)(v6 + 124) >> 13) & 6) - 2;
  v17 = (int *)(v6 + 164);
  if (v16 >= 4)
    v17 = (int *)(v6 + 160);
  if (v13)
  {
    v7 = fminf(v7, 0.0);
    if (v14 >= v7)
      v7 = v14;
    if ((float)(v15 + -2.0) < v7)
      v7 = v15 + -2.0;
  }
  else
  {
    v18 = (float)*v17 * 0.015625;
    if (v18 < v15)
      v18 = v15;
    v19 = v18 + -1.0;
    if (v19 < v14)
      v14 = v19;
    if (v14 >= v7)
      v7 = v14;
  }
  v20 = (int)v10;
  v21 = (int)v8;
  v22 = (int)v7;
  LODWORD(v23) = ((int)v15 - v22) & ~(((int)v15 - (int)v22) >> 31);
  if (a2 == 1)
    v23 = v23;
  else
    v23 = 2;
  if (v16 < 4)
  {
    v25 = v21 | (v22 << 32);
    v26 = v20 | (v23 << 32);
  }
  else
  {
    v25 = __PAIR64__(v21, v22);
    v26 = __PAIR64__(v20, v23);
  }
  WebCore::LayoutRect::LayoutRect(&v27, (int32x2_t *)&v25);
  return (uint64_t)v27;
}

WTF::StringImpl *WebCore::computeCaretRectForText(WebCore::InlineBoxAndOffset const&,WebCore::CaretRectMode)::$_0::operator()<unsigned int>(uint64_t *a1, int a2)
{
  WebCore::InlineIterator::Box *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  WebCore::InlineIterator::Box *v7;
  float v8;
  double v9;
  int v10;
  int v11;
  uint64_t v12;
  WebCore::InlineIterator::TextBox *v13;
  uint64_t v14;
  WebCore::InlineIterator::TextBox *v15;
  unsigned int v16;
  WebCore::InlineIterator::TextBox *v17;
  uint64_t v18;
  float v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  WebCore::InlineIterator::Box *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;

  v29 = a2;
  v3 = (WebCore::InlineIterator::Box *)WebCore::InlineIterator::TextBoxIterator::operator->(*a1);
  if (WebCore::InlineIterator::Box::isLineBreak(v3))
  {
    v22 = (WebCore::InlineIterator::Box *)WebCore::InlineIterator::TextBoxIterator::operator->(*a1);
    return (WTF::StringImpl *)WebCore::InlineIterator::Box::logicalLeftIgnoringInlineDirection(v22);
  }
  else
  {
    v23 = *a1;
    v24 = (WTF::StringImpl *)&v29;
    v4 = _ZZZN7WebCoreL23computeCaretRectForTextERKNS_18InlineBoxAndOffsetENS_13CaretRectModeEENK3__0clIjEEDaT_ENKUlvE_clEv((uint64_t)&v23);
    v5 = v4;
    v6 = HIDWORD(v4);
    v7 = (WebCore::InlineIterator::Box *)WebCore::InlineIterator::TextBoxIterator::operator->(*a1);
    WebCore::InlineIterator::Box::logicalLeftIgnoringInlineDirection(v7);
    v9 = v8 * 64.0;
    if (v9 > -2147483650.0)
      v10 = (int)v9;
    else
      v10 = 0x80000000;
    if (v9 < 2147483650.0)
      v11 = v10;
    else
      v11 = 0x7FFFFFFF;
    v26 = v11;
    v27 = 0;
    v28 = 0;
    v12 = WebCore::InlineIterator::TextBoxIterator::operator->(*a1);
    WebCore::InlineIterator::TextBox::textRun(v12, 1);
    v13 = (WebCore::InlineIterator::TextBox *)WebCore::InlineIterator::TextBoxIterator::operator->(*a1);
    v14 = WebCore::InlineIterator::TextBox::fontCascade(v13);
    v15 = (WebCore::InlineIterator::TextBox *)WebCore::InlineIterator::TextBoxIterator::operator->(*a1);
    v16 = *(unsigned __int16 *)(WebCore::InlineIterator::TextBox::renderer(v15) + 112);
    if (v16 <= 0x100)
      LOBYTE(v16) = 0;
    WebCore::FontCascade::adjustSelectionRectForText(v14, (void *)(v16 != 0), (uint64_t)&v23, (WebCore::LayoutRect *)&v26, v5, v6 | 0x100000000);
    v17 = (WebCore::InlineIterator::TextBox *)WebCore::InlineIterator::TextBoxIterator::operator->(*a1);
    v18 = WebCore::InlineIterator::TextBox::renderer(v17);
    v19 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 24)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8));
    WebCore::snapRectToDevicePixelsWithWritingDirection((WebCore *)&v26, (const WebCore::LayoutRect *)((v25 & 2) == 0), v19);
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::InlineIterator::LineBox::contentLogicalLeft(WebCore::InlineIterator::LineBox *this)
{
  uint64_t v1;
  WebCore::InlineIterator::Box *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::Box::logicalLeftIgnoringInlineDirection(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::LineBox *))off_1E341E2C8[v1])(&v5, this);
  }
}

uint64_t WebCore::InlineIterator::Box::logicalLeftIgnoringInlineDirection(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  char v6;
  char *v7;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1
    || (v7 = &v6,
        ((void (*)(char **, WebCore::InlineIterator::Box *))off_1E341E2D8[v1])(&v7, this),
        v3 = *((unsigned int *)this + 4),
        (_DWORD)v3 == -1))
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZZZN7WebCoreL23computeCaretRectForTextERKNS_18InlineBoxAndOffsetENS_13CaretRectModeEENK3__0clIjEEDaT_ENKUlvE_clEv(v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))off_1E341E2E8[v3])(&v7, this);
  }
}

uint64_t _ZZZN7WebCoreL23computeCaretRectForTextERKNS_18InlineBoxAndOffsetENS_13CaretRectModeEENK3__0clIjEEDaT_ENKUlvE_clEv(uint64_t a1)
{
  WebCore::InlineIterator::Box *v2;
  WebCore::InlineIterator::TextBox *v3;
  unsigned int *v4;
  uint64_t v5;
  WebCore::InlineIterator::TextBox *v7;
  unsigned int v8;
  WebCore::InlineIterator::TextBox *v9;
  uint64_t v10[3];

  v2 = (WebCore::InlineIterator::Box *)WebCore::InlineIterator::TextBoxIterator::operator->(*(_QWORD *)a1);
  if (WebCore::InlineIterator::Box::direction(v2))
  {
    v7 = (WebCore::InlineIterator::TextBox *)WebCore::InlineIterator::TextBoxIterator::operator->(*(_QWORD *)a1);
    WebCore::InlineIterator::TextBox::selectableRange(v10, v7);
    v8 = WebCore::TextBoxSelectableRange::clamp((unsigned int *)v10, **(_DWORD **)(a1 + 8));
    v9 = (WebCore::InlineIterator::TextBox *)WebCore::InlineIterator::TextBoxIterator::operator->(*(_QWORD *)a1);
    v4 = (unsigned int *)WebCore::InlineIterator::TextBox::length(v9);
    v5 = v8;
  }
  else
  {
    v3 = (WebCore::InlineIterator::TextBox *)WebCore::InlineIterator::TextBoxIterator::operator->(*(_QWORD *)a1);
    WebCore::InlineIterator::TextBox::selectableRange(v10, v3);
    v4 = WebCore::TextBoxSelectableRange::clamp((unsigned int *)v10, **(_DWORD **)(a1 + 8));
    v5 = 0;
  }
  return v5 | ((_QWORD)v4 << 32);
}

unsigned int *WebCore::InlineIterator::TextBox::textRun(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  int *v7;
  int **v8;

  v6 = a2;
  v7 = &v6;
  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 == -1)
  {
    v4 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::TextBoxSelectableRange::clamp(v4, v5);
  }
  else
  {
    v8 = &v7;
    return (unsigned int *)((uint64_t (*)(int ***, uint64_t))off_1E341E318[v2])(&v8, a1);
  }
}

unsigned int *WebCore::TextBoxSelectableRange::clamp(unsigned int *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *this;
  v3 = this[1];
  v4 = v3 + *this;
  v9 = v4;
  v10 = a2;
  if (__CFADD__(v3, v2))
  {
    __break(1u);
  }
  else
  {
    v5 = v4 >= a2;
    v6 = (int *)&v10;
    if (!v5)
      v6 = (int *)&v9;
    if (v2 > a2)
      v6 = (int *)this;
    v7 = *v6 - v2;
    if (*((_BYTE *)this + 20) && (v8 = this[4]) != 0)
    {
      if (v8 >= v7)
        return (unsigned int *)v7;
      else
        return (unsigned int *)v8;
    }
    else
    {
      if ((_DWORD)v7 == v3)
        return (unsigned int *)(this[2] + v3);
      return (unsigned int *)v7;
    }
  }
  return this;
}

uint64_t WebCore::InlineIterator::TextBox::length(WebCore::InlineIterator::TextBox *this)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox7textRunENSB_11TextRunModeEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSE_DpT0_(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::TextBox *))off_1E341E308[v1])(&v5, this);
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox7textRunENSB_11TextRunModeEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSE_DpT0_@<X0>(int ***a1@<X0>, WebCore::InlineIterator::BoxModernPath *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InlineIterator::BoxModernPath::textRun(a2, ***a1, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox7textRunENSB_11TextRunModeEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSE_DpT0_@<X0>(WebCore::LegacyInlineTextBox **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v5;
  WebCore::LegacyInlineTextBox *v6;
  _DWORD *v7;

  result = (*(uint64_t (**)(WebCore::LegacyInlineTextBox *))(*(_QWORD *)*a1 + 80))(*a1);
  if ((_DWORD)result)
  {
    v6 = *a1;
    if (!v6 || ((*(uint64_t (**)(WebCore::LegacyInlineTextBox *))(*(_QWORD *)v6 + 80))(v6) & 1) != 0)
    {
      return (uint64_t)WebCore::LegacyInlineTextBox::createTextRun(v6, v5, a2);
    }
    else
    {
      result = 105;
      __break(0xC471u);
    }
  }
  else
  {
    *(_DWORD *)a2 = 0;
    v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v7 += 2;
    *(_QWORD *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 20) = 1;
    *(_QWORD *)(a2 + 24) = 0x3F80000000000000;
    *(_DWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 36) = 4;
    *(_BYTE *)(a2 + 37) = *(_BYTE *)(a2 + 37) & 0xE0 | 8;
  }
  return result;
}

WTF::StringImpl *WebCore::InlineIterator::BoxModernPath::textRun@<X0>(WebCore::InlineIterator::BoxModernPath *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  WebCore::Layout::Box *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  float v27;
  uint64_t v28;
  float *v29;
  float v30;
  float v31;
  char v32;
  unsigned int v33;
  WTF::StringImpl *result;
  float v35;
  _BYTE *v36;
  char v37;
  _BYTE *v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  BOOL v42;
  int v43;
  BOOL v45;
  uint64_t v46;
  int v47;
  char v48;
  BOOL v49;
  char v50;
  char v51;
  WebCore::InlineIterator::BoxModernPath *v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  WebCore::InlineIterator::BoxModernPath *v60;
  WebCore::InlineIterator::BoxModernPath *v61;
  int v62;
  uint64_t LineStyle;
  uint64_t v64;
  char v65;
  unsigned int v66;
  BOOL v67;
  WebCore::InlineIterator::BoxModernPath *v68;
  WTF::StringImpl *v69;

  v4 = *((_QWORD *)a1 + 1);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(unsigned int *)(v5 + 60);
  if (v4 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x196329C64);
  }
  v7 = *(_QWORD *)(v5 + 48) + 80 * v4;
  v8 = *(_DWORD *)(v7 + 40);
  v9 = *(WebCore::Layout::Box **)v7;
  if (v8)
  {
    v10 = (char *)v9 + 16;
  }
  else
  {
    v61 = a1;
    v62 = a2;
    LineStyle = WebCore::Layout::Box::firstLineStyle(v9);
    a2 = v62;
    v10 = (char *)LineStyle;
    a1 = v61;
    v4 = *((_QWORD *)v61 + 1);
    v5 = *(_QWORD *)(*(_QWORD *)v61 + 8);
    v6 = *(unsigned int *)(v5 + 60);
  }
  if (v4 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x196329C6CLL);
  }
  v11 = *(_QWORD *)(v5 + 48);
  v12 = v11 + 80 * v4;
  v13 = *(_BYTE *)(v12 + 48);
  v14 = *(_DWORD *)(v12 + 44);
  if ((*(_WORD *)(v12 + 50) & 0xE) == 0 || (*(_WORD *)(v12 + 50) & 0xF) == 3)
  {
    v16 = *(_QWORD *)(*(_QWORD *)v12 + 112);
    if ((*(_BYTE *)(v16 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196329B78);
    }
    v59 = ~(*(unsigned __int16 *)(v16 + 118) >> 5) & 8;
  }
  else
  {
    LOBYTE(v59) = 0;
  }
  if (a2 == 1)
  {
    v68 = a1;
    WebCore::InlineIterator::BoxModernPath::originalText((const char *)a1);
    a1 = v68;
  }
  else
  {
    v17 = *(_QWORD *)(v11 + 80 * v4 + 60);
    if (v17)
    {
      v18 = 0;
      LODWORD(v19) = *(_DWORD *)(v17 + 4);
      v20 = ((unint64_t)*(unsigned int *)(v17 + 16) >> 2) & 1;
    }
    else
    {
      v60 = a1;
      WebCore::InlineDisplay::Box::Text::originalContent((WebCore::InlineDisplay::Box::Text *)(v11 + 80 * v4 + 52));
      a1 = v60;
      v20 = HIDWORD(v19);
      v18 = v19 & 0xFFFFFF0000000000;
    }
    v21 = ((unint64_t)v20 << 32) | v18 | v19;
  }
  if ((v10[43] & 4) != 0)
  {
    v51 = v13;
    v52 = a1;
    v53 = v21;
    v54 = WebCore::InlineIterator::BoxModernPath::line(a1);
    v27 = *(float *)(v54 + 16) + *(float *)(v54 + 24);
    WebCore::InlineIterator::BoxModernPath::visualRectIgnoringBlockDirection(v52);
    v30 = v55 + v56;
    v57 = WebCore::InlineIterator::BoxModernPath::line(v52);
    v21 = v53;
    v29 = (float *)(v57 + 108);
    v58 = *(_QWORD *)v52;
    v22 = *((_QWORD *)v52 + 1);
    v13 = v51;
    v23 = *(_QWORD *)(v58 + 8);
    v24 = *(unsigned int *)(v23 + 60);
  }
  else
  {
    v22 = *((_QWORD *)a1 + 1);
    v23 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v24 = *(unsigned int *)(v23 + 60);
    if (v22 >= v24)
    {
      __break(0xC471u);
      JUMPOUT(0x196329D2CLL);
    }
    v25 = *(_QWORD *)(v23 + 48);
    v26 = *(_DWORD *)(v25 + 80 * v22 + 40);
    if (*(_DWORD *)(v23 + 44) <= v26)
    {
      __break(0xC471u);
      JUMPOUT(0x196329D34);
    }
    v27 = *(float *)(v25 + 80 * v22 + 8);
    v28 = *(_QWORD *)(v23 + 32) + 152 * v26;
    v29 = (float *)(v28 + 16);
    v30 = *(float *)(v28 + 108);
  }
  if (v22 >= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x196329C74);
  }
  v31 = v30 + *v29;
  v32 = *(_BYTE *)(*(_QWORD *)(v23 + 48) + 80 * v22 + 49);
  v33 = *((_DWORD *)v10 + 11);
  if ((v21 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v21)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_24:
      result = v69;
      goto LABEL_25;
    }
  }
  else if ((_DWORD)v21)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_24;
  }
  result = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_25:
  v35 = v27 - v31;
  *(_DWORD *)a3 = 0;
  if (result)
  {
    *(_DWORD *)result += 2;
    v37 = *(_BYTE *)(a3 + 37);
    v36 = (_BYTE *)(a3 + 37);
    *(_QWORD *)(v36 - 29) = result;
    *(_DWORD *)(v36 - 21) = 0;
    v38 = v36 - 21;
    *(v36 - 17) = 1;
    *(float *)(v36 - 13) = v35;
    *(_DWORD *)(v36 - 9) = 1065353216;
    *(_DWORD *)(v36 - 5) = v14;
    *(v36 - 1) = v13;
    *v36 = (v33 >> 2) & 4 | (2 * (v32 & 1)) | v37 & 0xE0 | v59;
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)result -= 2;
    v39 = *((_DWORD *)v10 + 10);
    v40 = (v39 >> 27) & 7;
    v41 = (v39 & 0x40000000) == 0;
    if ((v39 & 0x40000000) != 0 || v40 != 3)
    {
      if (v40)
        v42 = 0;
      else
        v42 = (v39 & 0x40000000) == 0;
      if (v42)
      {
LABEL_34:
        LOBYTE(v43) = 0;
        goto LABEL_35;
      }
      if ((v39 & 0x40000000) != 0 && !v40)
        goto LABEL_46;
      if ((v39 & 0x40000000) != 0 && v40 == 1)
      {
        LOBYTE(v43) = 1;
      }
      else
      {
        v47 = (v39 >> 30) & 1;
        if (v40 == 2)
          v48 = v47;
        else
          v48 = 1;
        v49 = v40 == 1 && v41;
        if ((v49 & v48) != 0)
          LOBYTE(v43) = 2;
        else
          LOBYTE(v43) = 3;
        if (!v49)
        {
          v50 = v40 == 1 && v41 ? 2 : 0;
          if ((v48 & 1) != 0)
            LOBYTE(v43) = v50;
        }
      }
      goto LABEL_35;
    }
LABEL_90:
    LOBYTE(v43) = 5;
    goto LABEL_35;
  }
  *(_DWORD *)(a3 + 16) = 0;
  v64 = a3 + 16;
  *(_QWORD *)(v64 - 8) = 0;
  v38 = (_BYTE *)v64;
  *(_BYTE *)(v64 + 4) = 1;
  *(float *)(v64 + 8) = v35;
  *(_DWORD *)(v64 + 12) = 1065353216;
  *(_DWORD *)(v64 + 16) = v14;
  *(_BYTE *)(v64 + 20) = v13;
  v65 = *(_BYTE *)(v64 + 21);
  v36 = (_BYTE *)(v64 + 21);
  *v36 = (v33 >> 2) & 4 | (2 * (v32 & 1)) | v65 & 0xE0 | v59;
  v66 = *((_DWORD *)v10 + 10);
  v43 = (v66 >> 27) & 7;
  if ((v66 & 0x40000000) == 0 && v43 == 3)
    goto LABEL_90;
  if (v43)
    v67 = 0;
  else
    v67 = (v66 & 0x40000000) == 0;
  if (v67)
    goto LABEL_34;
  if ((v66 & 0x40000000) != 0 && !v43)
  {
LABEL_46:
    LOBYTE(v43) = 4;
    goto LABEL_35;
  }
  if ((v66 & 0x40000000) == 0 || v43 != 1)
  {
    if ((v66 & 0x40000000) == 0 && v43 == 2)
    {
      LOBYTE(v43) = 3;
    }
    else if (v43 == 1 && (v66 & 0x40000000) == 0)
    {
      LOBYTE(v43) = 2;
    }
    else
    {
      LOBYTE(v43) = 0;
    }
  }
LABEL_35:
  v45 = v43 == 5 || (v43 - 1) < 2u;
  v46 = *((_QWORD *)v10 + 3);
  *v36 = *v36 & 0xFE | v45;
  *(_DWORD *)v38 = *(_DWORD *)(v46 + 336);
  v38[4] = *(_BYTE *)(v46 + 340);
  return result;
}

uint64_t WebCore::InlineIterator::BoxModernPath::line(WebCore::InlineIterator::BoxModernPath *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = *(_QWORD *)(v1 + 8);
    v1 = v2;
  }
  else
  {
    v2 = MEMORY[8];
  }
  v3 = *((_QWORD *)this + 1);
  if (v3 >= *(unsigned int *)(v2 + 60)
    || (v4 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 80 * v3 + 40), *(_DWORD *)(v1 + 44) <= v4))
  {
    __break(0xC471u);
    JUMPOUT(0x196329D9CLL);
  }
  return *(_QWORD *)(v1 + 32) + 152 * v4;
}

unsigned __int16 *WebCore::RenderObject::isPseudoElement(WebCore::RenderObject *this)
{
  unsigned __int16 *result;

  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    result = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
    if (!result)
      return result;
    if ((~result[14] & 0x408) == 0)
      return (unsigned __int16 *)((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)result + 368))(result) != 0);
  }
  return 0;
}

unint64_t WebCore::computeCaretRectForEmptyElement(WebCore::RenderElement *a1, WTF::StringImpl *a2, int a3)
{
  unsigned int v4;
  char *LineStyle;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  __int16 v23;
  char v24;
  int v25;
  void *v26;
  WTF *v27;
  double v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  signed int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  int v45;

  v4 = a2;
  LineStyle = WebCore::RenderElement::firstLineStyle(a1, a2);
  v7 = *((_DWORD *)LineStyle + 10);
  v8 = (v7 >> 6) & 0xF;
  if (v8 == 7)
  {
LABEL_2:
    if ((v7 & 0x4000000) != 0)
LABEL_38:
      v9 = 1;
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
    switch(v8)
    {
      case 1:
      case 5:
        goto LABEL_38;
      case 2:
      case 6:
        v9 = 2;
        break;
      case 3:
        goto LABEL_2;
      case 8:
        v9 = ((v7 >> 26) & 1) == 0;
        break;
      default:
        break;
    }
  }
  v10 = *(_QWORD *)a1;
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 < 4)
  {
    v11 = (*(uint64_t (**)(WebCore::RenderElement *))(v10 + 1000))(a1);
    v12 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)a1 + 928))(a1);
  }
  else
  {
    v11 = (*(uint64_t (**)(WebCore::RenderElement *))(v10 + 1016))(a1);
    v12 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)a1 + 944))(a1);
  }
  LODWORD(v13) = v11 + v12;
  if (__OFADD__(v11, v12))
    LODWORD(v13) = (v11 >> 31) + 0x7FFFFFFF;
  v14 = *(_QWORD *)a1;
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 < 4)
  {
    v44 = (*(uint64_t (**)(WebCore::RenderElement *))(v14 + 1008))(a1);
    v45 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)a1 + 936))(a1);
    v17 = v44 + v45;
    if (__OFADD__(v44, v45))
      v17 = (v44 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v15 = (*(uint64_t (**)(WebCore::RenderElement *))(v14 + 1024))(a1);
    v16 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)a1 + 952))(a1);
    v17 = v15 + v16;
    if (__OFADD__(v15, v16))
      v17 = (v15 >> 31) + 0x7FFFFFFF;
  }
  v18 = __OFSUB__(v4, v17);
  v19 = v4 - v17;
  if (v18)
    v19 = (v4 >> 31) + 0x7FFFFFFF;
  if (!v9)
  {
    if ((LineStyle[43] & 4) != 0)
      goto LABEL_17;
    v20 = v13 + a3;
    if (!__OFADD__((_DWORD)v13, a3))
      goto LABEL_16;
LABEL_56:
    LODWORD(v13) = (v13 >> 31) + 0x7FFFFFFF;
    goto LABEL_17;
  }
  if (v9 == 1)
  {
    LODWORD(v13) = v19 - 128;
    if (__OFSUB__(v19, 128))
      LODWORD(v13) = 0x80000000;
    if ((LineStyle[43] & 4) != 0)
    {
      v20 = v13 - a3;
      if (!__OFSUB__((_DWORD)v13, a3))
      {
LABEL_16:
        LODWORD(v13) = v20;
        goto LABEL_17;
      }
      goto LABEL_56;
    }
  }
  else
  {
    v39 = v13 + v19;
    if (__OFADD__((_DWORD)v13, v19))
      v39 = (v13 >> 31) + 0x7FFFFFFF;
    v40 = v39 / 2;
    v41 = (uint64_t)a3 << 6;
    if ((a3 & 0x200000000000000) != 0)
      v41 += 127;
    v42 = v41 >> 7;
    if ((LineStyle[43] & 4) != 0)
      LODWORD(v13) = v40 - v42;
    else
      LODWORD(v13) = v40 + v42;
  }
LABEL_17:
  v18 = __OFSUB__(v19, 128);
  v21 = v19 - 128;
  if (v18)
    v21 = 0x80000000;
  v22 = v21 & ~(v21 >> 31);
  if (v22 >= (int)v13)
    v13 = v13;
  else
    v13 = v22;
  v23 = (unsigned __int16)*((_DWORD *)LineStyle + 11) >> 13;
  v24 = 2;
  switch((unsigned __int16)*((_DWORD *)LineStyle + 11) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_24;
    case 3:
    case 5:
      LOBYTE(v23) = 3;
      goto LABEL_24;
    case 4:
      goto LABEL_25;
    default:
      LOBYTE(v23) = 0;
LABEL_24:
      v24 = v23;
LABEL_25:
      v25 = (*(uint64_t (**)(WebCore::RenderElement *, uint64_t, BOOL, uint64_t))(*(_QWORD *)a1 + 1152))(a1, 1, (v24 & 6) == 2, 1);
      v27 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)LineStyle, v26);
      v28 = (float)(*((float *)v27 + 1) + *((float *)v27 + 3)) * 64.0;
      if (v28 >= 2147483650.0)
      {
        v29 = 0x7FFFFFFF;
      }
      else if (v28 <= -2147483650.0)
      {
        v29 = 0x80000000;
      }
      else
      {
        v29 = (int)v28;
      }
      v30 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)a1 + 1048))(a1);
      v31 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)a1 + 960))(a1);
      v32 = v30 + v31;
      if (__OFADD__(v30, v31))
        v32 = (v30 >> 31) + 0x7FFFFFFF;
      if (v29 < v25)
      {
        v43 = v25 - v29;
        if (__OFSUB__(v25, v29))
          v43 = (v25 >> 31) + 0x7FFFFFFF;
        v33 = v43 / 2;
      }
      else
      {
        v33 = 0;
      }
      v18 = __OFADD__(v32, v33);
      v34 = v32 + v33;
      if (v18)
        v34 = (v32 >> 31) + 0x7FFFFFFF;
      v35 = v34;
      v36 = v13 | ((unint64_t)v34 << 32);
      v37 = v35 | (v13 << 32);
      if (((*((_DWORD *)LineStyle + 11) >> 13) & 6u) - 2 <= 3)
        return v37;
      else
        return v36;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox18ellipsisVisualRectENSC_20AdjustedForSelectionEEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 >= *(unsigned int *)(v3 + 44))
  {
    __break(0xC471u);
    goto LABEL_5;
  }
  if (!*(_BYTE *)(*(_QWORD *)(v3 + 32) + 152 * v2 + 144))
LABEL_5:
    __break(1u);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox18ellipsisVisualRectENSC_20AdjustedForSelectionEEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSE_DpT0_()
{
  return 0.0;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12ellipsisTextEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  v3 = *(_QWORD *)(*a1 + 8);
  if (v2 >= *(unsigned int *)(v3 + 44))
  {
    __break(0xC471u);
    JUMPOUT(0x19632A398);
  }
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 32) + 152 * v2 + 124) & 2) != 0)
  {
    {
      v4 = (_DWORD *)WebCore::Layout::TextUtil::ellipsisTextRun(BOOL)::horizontalEllipsisStr;
    }
    else
    {
      v6 = a2;
      WTF::AtomStringImpl::add();
      a2 = v6;
      v4 = (_DWORD *)v8;
      WebCore::Layout::TextUtil::ellipsisTextRun(BOOL)::horizontalEllipsisStr = v8;
    }
  }
  else
  {
    v7 = a2;
    {
      v4 = (_DWORD *)WebCore::Layout::TextUtil::ellipsisTextRun(BOOL)::verticalEllipsisStr;
    }
    else
    {
      WTF::AtomStringImpl::add();
      v4 = (_DWORD *)v8;
      WebCore::Layout::TextUtil::ellipsisTextRun(BOOL)::verticalEllipsisStr = v8;
    }
    a2 = v7;
  }
  *(_DWORD *)a2 = 0;
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 1;
  result = 0.0078125;
  *(_QWORD *)(a2 + 24) = 0x3F80000000000000;
  *(_DWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 36) = 4;
  *(_BYTE *)(a2 + 37) = *(_BYTE *)(a2 + 37) & 0xE0 | 8;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12ellipsisTextEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_@<D0>(uint64_t a1@<X8>)
{
  _DWORD *v1;
  double result;

  *(_DWORD *)a1 = 0;
  v1 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v1 += 2;
  *(_QWORD *)(a1 + 8) = v1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 1;
  result = 0.0078125;
  *(_QWORD *)(a1 + 24) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 4;
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a1 + 37) & 0xE0 | 8;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    while (1)
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
        break;
LABEL_15:
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
      if (!v7)
        goto LABEL_2;
    }
    v9 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
LABEL_10:
      v11 = *(_QWORD *)(v9 + 8);
      v12 = v11 - 1;
      *(_QWORD *)(v9 + 8) = v11 - 1;
      if (v11 == 1)
      {
        v16 = *(_QWORD *)(v9 + 16);
        v13 = *(_QWORD *)(v9 + 24);
        *(_QWORD *)(v9 + 24) = 0;
        v14 = v16 != 0;
      }
      else
      {
        v13 = 0;
        v14 = 1;
      }
      v15 = __ldxr((unsigned __int8 *)v9);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_14:
      if (!v12)
      {
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        if (!v14)
          WTF::fastFree((WTF *)v9, a2);
      }
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v9);
    goto LABEL_10;
  }
LABEL_2:
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::FilterStyle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 25))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(a2 << 7));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = v6;
      v9 = 0;
      v10 = v5 << 7;
      do
      {
        v11 = v8 + v9;
        v12 = (char *)v4 + v9;
        *(_BYTE *)v11 = 0;
        *(_BYTE *)(v11 + 88) = 0;
        if (*((_BYTE *)v4 + v9 + 88))
        {
          *(_DWORD *)(v11 + 80) = -1;
          v13 = *((unsigned int *)v12 + 20);
          if ((_DWORD)v13 != -1)
          {
            ((void (*)(char *, uint64_t, char *))off_1E341E3A8[v13])(&v16, v8 + v9, (char *)v4 + v9);
            *(_DWORD *)(v11 + 80) = v13;
          }
          *(_BYTE *)(v11 + 88) = 1;
        }
        v14 = *((_OWORD *)v12 + 7);
        *(_OWORD *)(v11 + 96) = *((_OWORD *)v12 + 6);
        *(_OWORD *)(v11 + 112) = v14;
        if (v12[88])
        {
          v15 = *(unsigned int *)((char *)v4 + v9 + 80);
          if ((_DWORD)v15 != -1)
            ((void (*)(char *, char *))off_1E341E280[v15])(&v17, (char *)v4 + v9);
          *(_DWORD *)((char *)v4 + v9 + 80) = -1;
        }
        v9 += 128;
      }
      while (v10 != v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::FixedTableLayout::FixedTableLayout(_QWORD *this, WebCore::RenderTable *a2)
{
  *this = off_1E341E3F8;
  this[1] = a2;
  this[2] = 0;
  this[3] = 0;
  return this;
}

float WebCore::FixedTableLayout::calcWidthArray(WebCore::FixedTableLayout *this, void *a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _BYTE *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  float v35;
  float v36;
  double v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  uint64_t v61;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  float v71;
  int v72;
  float v73;
  unsigned int v74;
  int v75;
  float v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  unsigned int *v97;
  float v98;
  uint64_t v99;
  float v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  float v117;
  __int16 v118;
  char v119;
  unsigned int v120[2];
  uint64_t i;
  uint64_t v122;

  v3 = *(unsigned int *)(*((_QWORD *)this + 1) + 228);
  v4 = (_QWORD *)((char *)this + 16);
  v5 = *((unsigned int *)this + 7);
  if (v5 >= v3)
  {
    if ((_DWORD)v5 != (_DWORD)v3)
    {
      v13 = (_BYTE *)(*v4 + 8 * v3 + 4);
      v14 = 8 * v5 - 8 * v3;
      do
      {
        if (*v13 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v13 - 1));
        }
        v13 += 8;
        v14 -= 8;
      }
      while (v14);
    }
  }
  else
  {
    v6 = *((unsigned int *)this + 6);
    if (v6 < v3)
    {
      v7 = v6 + (v6 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v3)
        v9 = *(unsigned int *)(*((_QWORD *)this + 1) + 228);
      else
        v9 = v8;
      WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 16, v9);
    }
    if (*v4)
    {
      v10 = *((unsigned int *)this + 7);
      if ((_DWORD)v10 != (_DWORD)v3)
      {
        v11 = (_DWORD *)(*v4 + 8 * v10);
        v12 = 8 * v3 - 8 * v10;
        do
        {
          *(_DWORD *)((char *)v11 + 3) = 0;
          *v11 = 0;
          v11 += 2;
          v12 -= 8;
        }
        while (v12);
      }
    }
  }
  *((_DWORD *)this + 7) = v3;
  v15 = *((_DWORD *)this + 6);
  v16 = v3;
  if (v15 < v3)
  {
    if (v15)
    {
      v17 = (_BYTE *)(*v4 + 4);
      v18 = 8 * v3;
      do
      {
        if (*v17 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v17 - 1));
        }
        v17 += 8;
        v18 -= 8;
      }
      while (v18);
      *((_DWORD *)this + 7) = 0;
      v19 = (WTF *)*((_QWORD *)this + 2);
      if (v19)
      {
        *((_QWORD *)this + 2) = 0;
        *((_DWORD *)this + 6) = 0;
        WTF::fastFree(v19, a2);
      }
    }
    WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v4, v3);
    v16 = *((_DWORD *)this + 7);
  }
  v20 = *v4;
  if (v16)
  {
    v21 = (_BYTE *)(v20 + 4);
    v22 = v16 + 1;
    do
    {
      if (*v21 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v21 - 1));
      }
      *(_WORD *)v21 = 0;
      *((_DWORD *)v21 - 1) = 0;
      v21 += 8;
      --v22;
    }
    while (v22 > 1);
    v20 = *((_QWORD *)this + 2);
    v23 = *((unsigned int *)this + 7);
  }
  else
  {
    v23 = 0;
  }
  if (v23 != v3)
  {
    v24 = (_DWORD *)(v20 + 8 * v23);
    v25 = 8 * v3 - 8 * v23;
    do
    {
      *(_DWORD *)((char *)v24 + 3) = 0;
      *v24 = 0;
      v24 += 2;
      v25 -= 8;
    }
    while (v25);
  }
  *((_DWORD *)this + 7) = v3;
  v26 = *(unsigned int *)(*((_QWORD *)this + 1) + 64) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)this + 1)
                                                                                                + 68) << 32);
  v27 = 0.0;
  if (v26)
  {
    while (1)
    {
      v28 = *(_QWORD *)(v26 + 8);
      if (!v28)
        goto LABEL_51;
      if (*(_BYTE *)(v28 + 46) == 38)
        break;
      v26 = *(unsigned int *)(v28 + 47) | ((unint64_t)*(unsigned __int8 *)(v28 + 51) << 32);
      if (!v26)
        goto LABEL_51;
    }
    v115 = v28;
    v63 = 0;
    v27 = 0.0;
    while (1)
    {
      WebCore::RenderObject::setPreferredLogicalWidthsDirty(v115, 0, 1);
      v64 = *(unsigned int *)(v115 + 64);
      v65 = v64 | ((unint64_t)*(unsigned __int8 *)(v115 + 68) << 32);
      if (!v65)
        goto LABEL_292;
      v66 = *(_QWORD *)((v64 | ((unint64_t)*(unsigned __int8 *)(v115 + 68) << 32)) + 8);
      if (v66)
      {
        do
        {
          WebCore::RenderObject::setPreferredLogicalWidthsDirty(v66, 0, 1);
          v67 = *(unsigned int *)(v66 + 47);
          if (!(v67 | ((unint64_t)*(unsigned __int8 *)(v66 + 51) << 32)))
            break;
          v66 = *(_QWORD *)((v67 | ((unint64_t)*(unsigned __int8 *)(v66 + 51) << 32)) + 8);
        }
        while (v66);
        v65 = *(unsigned int *)(v115 + 64) | ((unint64_t)*(unsigned __int8 *)(v115 + 68) << 32);
        if (!v65)
          goto LABEL_292;
      }
      if (!*(_QWORD *)(v65 + 8))
      {
LABEL_292:
        v68 = *(_QWORD *)(*(_QWORD *)(v115 + 88) + 8);
        v69 = (unsigned int *)(v68 + 12);
        v70 = (unsigned int *)(v68 + 4);
        if (((*(_DWORD *)(v115 + 124) >> 13) & 6u) - 2 < 4)
          v70 = v69;
        v117 = 0.0;
        v119 = 0;
        LOBYTE(v118) = *((_BYTE *)v70 + 4);
        LOBYTE(v114) = *((_BYTE *)v70 + 5);
        HIDWORD(v114) = v118;
        HIBYTE(v118) = v114;
        v71 = 0.0;
        if (v118 - 2 >= 9)
        {
          if (v118 == 11)
          {
            v112 = (void *)*v70;
            v117 = *(float *)v70;
            WebCore::Length::ref((int *)&v117);
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v112);
            *(float *)&v113 = 0.0;
            v114 = 0;
            v72 = 0;
            v118 = 0;
            v117 = 0.0;
          }
          else
          {
            *(float *)&v113 = 0.0;
            v72 = 0;
          }
          v73 = 0.0;
        }
        else
        {
          v72 = *((unsigned __int8 *)v70 + 6);
          v119 = *((_BYTE *)v70 + 6);
          v73 = *(float *)v70;
          v117 = v73;
          *(float *)&v113 = v73;
          if (v118 == 4)
          {
            if (v72)
            {
              v72 = 1;
              HIDWORD(v114) = 4;
              if (v73 > 0.0)
                v71 = v73;
              else
                v71 = 0.0;
            }
            else
            {
              v71 = (float)(LODWORD(v73) & ~(SLODWORD(v73) >> 31));
              HIDWORD(v114) = 4;
            }
          }
        }
        v74 = *(_DWORD *)(v115 + 200);
        if (v74)
        {
          v75 = v113;
          v76 = v73;
          while (1)
          {
            v77 = *((_QWORD *)this + 1);
            if (v63 >= v3)
            {
              WebCore::RenderTable::appendColumn(*((WebCore::RenderTable **)this + 1), v74);
              *(unsigned int *)((char *)v120 + 3) = 0;
              v120[0] = 0;
              v85 = *((unsigned int *)this + 7);
              if ((_DWORD)v85 == *((_DWORD *)this + 6))
              {
                v86 = WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v85 + 1, (unint64_t)v120);
                v87 = *((_QWORD *)this + 2) + 8 * *((unsigned int *)this + 7);
                *(_DWORD *)v87 = 0;
                *(_WORD *)(v87 + 5) = 0;
                v88 = *(unsigned __int8 *)(v86 + 4);
                *(_BYTE *)(v87 + 4) = v88;
                *(_BYTE *)(v87 + 5) = *(_BYTE *)(v86 + 5);
                if (v88 - 2 >= 9)
                {
                  if (v88 > 0xD)
                    goto LABEL_179;
                  if (((1 << v88) & 0x3003) != 0)
                  {
                    *(_DWORD *)v87 = 0;
                    goto LABEL_179;
                  }
                  if (v88 != 11)
                    goto LABEL_179;
                  v101 = *(_DWORD *)v86;
                  *(_DWORD *)v86 = 0;
                }
                else
                {
                  v89 = *(unsigned __int8 *)(v86 + 6);
                  *(_BYTE *)(v87 + 6) = v89;
                  if (v89)
                  {
                    *(_DWORD *)v87 = *(_DWORD *)v86;
LABEL_179:
                    *(_BYTE *)(v86 + 4) = 0;
                    ++*((_DWORD *)this + 7);
                    if (LOBYTE(v120[1]) == 11)
                    {
                      {
                        WebCore::calculationValues(void)::map = 1;
                        qword_1ECE90C98 = 0;
                      }
                      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v120[0]);
                    }
LABEL_187:
                    LODWORD(v3) = v3 + 1;
                    v93 = v74;
                    goto LABEL_195;
                  }
                  v101 = *(_DWORD *)v86;
                }
                *(_DWORD *)v87 = v101;
                goto LABEL_179;
              }
              v90 = *v4 + 8 * v85;
              *(_DWORD *)v90 = 0;
              *(_WORD *)(v90 + 5) = 0;
              v91 = LOBYTE(v120[1]);
              *(_WORD *)(v90 + 4) = v120[1];
              if (v91 - 2 >= 9)
              {
                if (v91 > 0xD)
                  goto LABEL_186;
                if (((1 << v91) & 0x3003) != 0)
                {
                  *(_DWORD *)v90 = 0;
                  goto LABEL_186;
                }
                if (v91 != 11)
                  goto LABEL_186;
                v102 = v120[0];
                v120[0] = 0;
              }
              else
              {
                v92 = BYTE2(v120[1]);
                *(_BYTE *)(v90 + 6) = BYTE2(v120[1]);
                if (v92)
                {
                  *(_DWORD *)v90 = v120[0];
LABEL_186:
                  ++*((_DWORD *)this + 7);
                  goto LABEL_187;
                }
                v102 = v120[0];
              }
              *(_DWORD *)v90 = v102;
              goto LABEL_186;
            }
            v78 = *(_DWORD *)(v77 + 228);
            if (v78 <= v63)
            {
              __break(0xC471u);
              JUMPOUT(0x19632B6ECLL);
            }
            if (v74 < *(_DWORD *)(*(_QWORD *)(v77 + 216) + 4 * v63))
              break;
LABEL_193:
            if (v78 <= v63)
            {
              __break(0xC471u);
              JUMPOUT(0x19632B6F4);
            }
            v93 = *(_DWORD *)(*(_QWORD *)(v77 + 216) + 4 * v63);
LABEL_195:
            if ((HIDWORD(v114) - 3) <= 1)
            {
              if (v72)
              {
                if (v76 > 0.0)
                {
LABEL_198:
                  if (*((_DWORD *)this + 7) <= v63)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19632B6FCLL);
                  }
                  v97 = (unsigned int *)(*v4 + 8 * v63);
                  if (*((_BYTE *)v97 + 4) == 11)
                  {
                    {
                      WebCore::calculationValues(void)::map = 1;
                      qword_1ECE90C98 = 0;
                    }
                    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v97);
                  }
                  *((_BYTE *)v97 + 4) = BYTE4(v114);
                  *((_BYTE *)v97 + 5) = v114;
                  *((_BYTE *)v97 + 6) = v72;
                  if (v72)
                  {
                    *(float *)v97 = v73;
                    *(float *)&v75 = v73;
                  }
                  else
                  {
                    *v97 = v113;
                    v75 = v113;
                    v73 = *(float *)&v113;
                  }
                  if (*((_DWORD *)this + 7) <= v63)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19632B704);
                  }
                  v98 = (float)v93;
                  v99 = *v4 + 8 * v63;
                  if (*(_BYTE *)(v99 + 4) != 11)
                  {
                    if (*(_BYTE *)(v99 + 6))
                      v100 = *(float *)v99 * v98;
                    else
                      LODWORD(v100) = (int)(float)(v98 * (float)*(int *)v99);
                    *(float *)v99 = v100;
                  }
                  v27 = v27 + (float)(v71 * v98);
                  v76 = v73;
                }
              }
              else
              {
                if (v75 >= 1)
                  goto LABEL_198;
                v76 = *(float *)&v75;
              }
            }
            ++v63;
            v74 -= v93;
            if (!v74)
            {
              if (HIDWORD(v114) == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v113);
              }
              goto LABEL_247;
            }
          }
          v120[0] = v74;
          WTF::Vector<WebCore::RenderTable::ColumnStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::RenderTable::ColumnStruct>(v77 + 216, v63, v120);
          if (*(_DWORD *)(v77 + 228) <= v63 + 1)
            goto LABEL_278;
          *(_DWORD *)(*(_QWORD *)(v77 + 216) + 4 * (v63 + 1)) -= v74;
          v122 = v77;
          *(_QWORD *)v120 = WebCore::RenderChildIteratorAdapter<WebCore::RenderTableSection>::begin(&v122);
          for (i = v79; i; v79 = i)
          {
            if (!*(_BYTE *)(v79 + 282))
              WebCore::RenderTableSection::splitColumn(v79, v63, v74);
            WebCore::RenderChildIterator<WebCore::RenderTableSection>::operator++((uint64_t)v120);
          }
          WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(v77 + 200, (*(_DWORD *)(v77 + 228) + 1));
          *(unsigned int *)((char *)v120 + 3) = 0;
          v120[0] = 0;
          v80 = *((unsigned int *)this + 7);
          if ((_DWORD)v80 == *((_DWORD *)this + 6))
          {
            v81 = WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v80 + 1, (unint64_t)v120);
            v82 = *((_QWORD *)this + 2) + 8 * *((unsigned int *)this + 7);
            *(_DWORD *)v82 = 0;
            *(_WORD *)(v82 + 5) = 0;
            v83 = *(unsigned __int8 *)(v81 + 4);
            *(_BYTE *)(v82 + 4) = v83;
            *(_BYTE *)(v82 + 5) = *(_BYTE *)(v81 + 5);
            if (v83 - 2 >= 9)
            {
              if (v83 > 0xD)
                goto LABEL_171;
              if (((1 << v83) & 0x3003) != 0)
              {
                *(_DWORD *)v82 = 0;
                goto LABEL_171;
              }
              if (v83 != 11)
                goto LABEL_171;
              v103 = *(_DWORD *)v81;
              *(_DWORD *)v81 = 0;
            }
            else
            {
              v84 = *(unsigned __int8 *)(v81 + 6);
              *(_BYTE *)(v82 + 6) = v84;
              if (v84)
              {
                *(_DWORD *)v82 = *(_DWORD *)v81;
LABEL_171:
                *(_BYTE *)(v81 + 4) = 0;
                ++*((_DWORD *)this + 7);
                if (LOBYTE(v120[1]) == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v120[0]);
                }
LABEL_192:
                LODWORD(v3) = v3 + 1;
                v77 = *((_QWORD *)this + 1);
                v78 = *(_DWORD *)(v77 + 228);
                goto LABEL_193;
              }
              v103 = *(_DWORD *)v81;
            }
            *(_DWORD *)v82 = v103;
            goto LABEL_171;
          }
          v94 = *v4 + 8 * v80;
          *(_DWORD *)v94 = 0;
          *(_WORD *)(v94 + 5) = 0;
          v95 = LOBYTE(v120[1]);
          *(_WORD *)(v94 + 4) = v120[1];
          if (v95 - 2 >= 9)
          {
            if (v95 > 0xD)
              goto LABEL_191;
            if (((1 << v95) & 0x3003) != 0)
            {
              *(_DWORD *)v94 = 0;
              goto LABEL_191;
            }
            if (v95 != 11)
              goto LABEL_191;
            v104 = v120[0];
            v120[0] = 0;
          }
          else
          {
            v96 = BYTE2(v120[1]);
            *(_BYTE *)(v94 + 6) = BYTE2(v120[1]);
            if (v96)
            {
              *(_DWORD *)v94 = v120[0];
LABEL_191:
              ++*((_DWORD *)this + 7);
              goto LABEL_192;
            }
            v104 = v120[0];
          }
          *(_DWORD *)v94 = v104;
          goto LABEL_191;
        }
LABEL_247:
        v65 = *(unsigned int *)(v115 + 64) | ((unint64_t)*(unsigned __int8 *)(v115 + 68) << 32);
        if (!v65)
          goto LABEL_251;
      }
      v105 = *(_QWORD *)(v65 + 8);
      if (v105)
      {
        v115 = v105;
        if (*(_BYTE *)(v105 + 46) != 38)
        {
          __break(0xC471u);
          JUMPOUT(0x19632B6E4);
        }
      }
      else
      {
LABEL_251:
        v106 = *(unsigned __int8 *)(v115 + 51);
        if (!(*(unsigned int *)(v115 + 47) | (unint64_t)(v106 << 32))
          || (v107 = *(_QWORD *)((*(unsigned int *)(v115 + 47) | (unint64_t)(v106 << 32)) + 8)) == 0)
        {
          v108 = *(_QWORD *)(v115 + 32);
          if (!v108)
            break;
          v109 = *(_QWORD *)(v108 + 8);
          if (*(_BYTE *)(v109 + 46) != 38)
            break;
          v110 = *(unsigned int *)(v109 + 47) | ((unint64_t)*(unsigned __int8 *)(v109 + 51) << 32);
          if (!v110)
            break;
          v107 = *(_QWORD *)(v110 + 8);
          if (!v107)
            break;
        }
        v115 = v107;
        while (*(_BYTE *)(v115 + 46) != 38)
        {
          v111 = *(unsigned __int8 *)(v115 + 51);
          if (*(unsigned int *)(v115 + 47) | (unint64_t)(v111 << 32))
          {
            v115 = *(_QWORD *)((*(unsigned int *)(v115 + 47) | (unint64_t)(v111 << 32)) + 8);
            if (v115)
              continue;
          }
          goto LABEL_51;
        }
      }
    }
  }
LABEL_51:
  v29 = WebCore::RenderTable::topNonEmptySection(*((WebCore::RenderTable **)this + 1));
  if (v29)
  {
    v30 = *(_QWORD *)((*(unsigned int *)(v29 + 64) | ((unint64_t)*(unsigned __int8 *)(v29 + 68) << 32)) + 8);
    if (*(_BYTE *)(v30 + 46) != 39)
    {
LABEL_278:
      __break(0xC471u);
      JUMPOUT(0x19632AE40);
    }
    v31 = *(unsigned int *)(v30 + 64) | ((unint64_t)*(unsigned __int8 *)(v30 + 68) << 32);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 8);
      if (v32)
      {
        if (*(_BYTE *)(v32 + 46) != 37)
        {
          __break(0xC471u);
          JUMPOUT(0x19632AE80);
        }
        LODWORD(v33) = 0;
        while (1)
        {
          WebCore::RenderTableCell::styleOrColLogicalWidth((WebCore::RenderTableCell *)v32, (uint64_t)v120);
          if ((*(_BYTE *)(v32 + 251) & 4) != 0)
            v34 = WebCore::RenderTableCell::parseColSpanFromDOM((WebCore::RenderTableCell *)v32);
          else
            v34 = 1;
          v35 = 0.0;
          if (LOBYTE(v120[1]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v120[0]);
            LOWORD(v120[1]) = 0;
            v120[0] = 0;
          }
          else if (LOBYTE(v120[1]) == 4)
          {
            if (BYTE2(v120[1]))
            {
              v36 = *(float *)v120;
              if (*(float *)v120 <= 0.0)
                goto LABEL_88;
            }
            else
            {
              if ((int)v120[0] < 1)
                goto LABEL_88;
              v36 = *(float *)v120;
            }
            if (!BYTE2(v120[1]))
              v36 = (float)SLODWORD(v36);
            v37 = v36 * 64.0;
            if (v37 >= 2147483650.0)
            {
              v38 = 0x7FFFFFFF;
            }
            else if (v37 <= -2147483650.0)
            {
              v38 = 0x80000000;
            }
            else
            {
              v38 = (int)v37;
            }
            v116 = v38;
            v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 1064))(v32);
            v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 1072))(v32);
            if (__OFADD__(v39, v40))
              v41 = (v39 >> 31) + 0x7FFFFFFF;
            else
              v41 = v39 + v40;
            v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 976))(v32);
            if (__OFADD__(v41, v42))
              v43 = (v41 >> 31) + 0x7FFFFFFF;
            else
              v43 = v41 + v42;
            v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 984))(v32);
            v45 = v43 + v44;
            if (__OFADD__(v43, v44))
              v45 = (v43 >> 31) + 0x7FFFFFFF;
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 88) + 8) + 68) & 4) != 0
              && LOBYTE(v120[1]) - 7 >= 4
              && LOBYTE(v120[1])
              && LOBYTE(v120[1]) - 5 > 1)
            {
              if (v116 > v45)
                v45 = v116;
            }
            else
            {
              v46 = __OFADD__(v116, v45);
              v45 += v116;
              if (v46)
                v45 = (v116 >> 31) + 0x7FFFFFFF;
            }
            v35 = (float)v45 * 0.015625;
            LOBYTE(v120[1]) = 4;
            *(float *)v120 = v35;
            BYTE2(v120[1]) = 1;
          }
LABEL_88:
          if (v34 && v33 < v3)
          {
            v47 = 0;
            v48 = (float)v34;
            v49 = 8 * v33;
            v33 = v33;
            while (2)
            {
              v50 = *((_QWORD *)this + 1);
              if (v33 >= *(unsigned int *)(v50 + 228))
              {
                __break(0xC471u);
                JUMPOUT(0x19632B6B4);
              }
              if (v33 >= *((unsigned int *)this + 7))
              {
                __break(0xC471u);
                JUMPOUT(0x19632B6BCLL);
              }
              v51 = (float)*(unsigned int *)(*(_QWORD *)(v50 + 216) + 4 * v33);
              v52 = *v4;
              v53 = *v4 + v49;
              v54 = LOBYTE(v120[1]);
              if (*(_BYTE *)(v53 + 4))
                v55 = 1;
              else
                v55 = LOBYTE(v120[1]) == 0;
              if (v55)
                goto LABEL_107;
              if ((unsigned int *)v53 != v120)
              {
                *(_BYTE *)(v53 + 4) = v120[1];
                v56 = v52 + v49;
                *(_BYTE *)(v56 + 5) = BYTE1(v120[1]);
                if ((v54 - 2) < 9)
                {
                  *(_BYTE *)(v56 + 6) = BYTE2(v120[1]);
                  *(_DWORD *)v53 = v120[0];
                  goto LABEL_100;
                }
                if ((v54 - 12) >= 2)
                {
                  if (v54 == 11)
                  {
                    *(_DWORD *)v53 = v120[0];
                    WebCore::Length::ref((int *)v53);
                  }
                  else if (v54 == 1)
                  {
                    goto LABEL_114;
                  }
                }
                else
                {
LABEL_114:
                  *(_DWORD *)v53 = 0;
                }
              }
LABEL_100:
              if (v33 >= *((unsigned int *)this + 7))
              {
                __break(0xC471u);
                JUMPOUT(0x19632B6C4);
              }
              v57 = *v4 + v49;
              if (*(_BYTE *)(v57 + 4) != 11)
              {
                v58 = v51 / v48;
                if (*(_BYTE *)(v57 + 6))
                  v59 = v58 * *(float *)v57;
                else
                  LODWORD(v59) = (int)(float)(v58 * (float)*(int *)v57);
                *(float *)v57 = v59;
              }
              v27 = v27 + (float)((float)(v35 * v51) / v48);
LABEL_107:
              v47 = (float)((float)v47 + v51);
              ++v33;
              v49 += 8;
              if (v34 <= v47 || v33 >= v3)
                break;
              continue;
            }
          }
          if ((*(_BYTE *)(v32 + 21) & 0x20) != 0)
            WebCore::RenderObject::setPreferredLogicalWidthsDirty(v32, 0, 1);
          if (LOBYTE(v120[1]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v120[0]);
          }
          v61 = *(unsigned int *)(v32 + 47);
          if (!(v61 | ((unint64_t)*(unsigned __int8 *)(v32 + 51) << 32)))
            return v27;
          v32 = *(_QWORD *)((v61 | ((unint64_t)*(unsigned __int8 *)(v32 + 51) << 32)) + 8);
          if (!v32)
            return v27;
          if (*(_BYTE *)(v32 + 46) != 37)
          {
            __break(0xC471u);
            JUMPOUT(0x19632AE60);
          }
        }
      }
    }
  }
  return v27;
}

void WebCore::FixedTableLayout::computeIntrinsicLogicalWidths(WebCore::FixedTableLayout *a1, int *a2, int *a3)
{
  double v5;
  int v6;

  v5 = WebCore::FixedTableLayout::calcWidthArray(a1, a2) * 64.0;
  if (v5 >= 2147483650.0)
  {
    v6 = 0x7FFFFFFF;
  }
  else if (v5 <= -2147483650.0)
  {
    v6 = 0x80000000;
  }
  else
  {
    v6 = (int)v5;
  }
  *a3 = v6;
  *a2 = v6;
}

int *WebCore::FixedTableLayout::applyPreferredLogicalWidthQuirks(int *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  float v11;
  void *v12;
  double v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  float v38;
  unsigned __int8 v39;
  char v40;
  char v41;

  v4 = this;
  v5 = *((_QWORD *)this + 1);
  v6 = *(_DWORD *)(v5 + 124);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 88) + 8);
  v8 = (unsigned int *)(v7 + 12);
  v9 = (unsigned int *)(v7 + 4);
  if (((v6 >> 13) & 6) - 2 >= 4)
    v8 = v9;
  v41 = 0;
  v39 = *((_BYTE *)v8 + 4);
  v10 = v39;
  v40 = *((_BYTE *)v8 + 5);
  if (v39 - 2 >= 9)
  {
    v12 = 0;
    if (v39 == 11)
    {
      v12 = (void *)*v8;
      v38 = *(float *)v8;
      this = WebCore::Length::ref((int *)&v38);
    }
  }
  else
  {
    v11 = *(float *)v8;
    v12 = (void *)*v8;
    if (v39 != 4)
      goto LABEL_36;
    if (*((_BYTE *)v8 + 6))
    {
      if (v11 <= 0.0)
        goto LABEL_36;
    }
    else
    {
      if ((int)v12 < 1)
        goto LABEL_36;
      v11 = (float)(int)v12;
    }
    v14 = v11 * 64.0;
    if (v14 >= 2147483650.0)
    {
      v15 = 0x7FFFFFFF;
    }
    else if (v14 <= -2147483650.0)
    {
      v15 = 0x80000000;
    }
    else
    {
      v15 = (int)v14;
    }
    v16 = *(_DWORD *)(v5 + 340);
    v17 = *(_DWORD *)(v5 + 344);
    v18 = __OFADD__(v16, v17);
    v19 = v16 + v17;
    if (v18)
      v20 = (v16 >> 31) + 0x7FFFFFFF;
    else
      v20 = v19;
    if ((v6 & 4) != 0)
    {
      v28 = 0;
    }
    else
    {
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 976))(v5);
      this = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 984))(v5);
      v22 = v21 + (_DWORD)this;
      if (__OFADD__(v21, (_DWORD)this))
        v22 = (v21 >> 31) + 0x7FFFFFFF;
      v23 = *(_DWORD *)(v5 + 228);
      if (v23)
      {
        v24 = v23 + 1;
        v25 = *(int *)(v5 + 332);
        if (v24 <= 0x1FFFFFE)
          v26 = v24 << 6;
        else
          v26 = 0x7FFFFFFFLL;
        v27 = v25 * v26 / 64;
        if (HIDWORD(v27) != (int)v27 >> 31)
          LODWORD(v27) = (v25 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        LODWORD(v27) = 0;
      }
      v28 = (v22 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(v22, (_DWORD)v27))
        v28 = v22 + v27;
    }
    v18 = __OFADD__(v20, v28);
    v29 = v20 + v28;
    if (v18)
      v29 = (v20 >> 31) + 0x7FFFFFFF;
    v18 = __OFSUB__(v15, v29);
    v30 = v15 - v29;
    if (v18)
      v30 = (v15 >> 31) + 0x7FFFFFFF;
    if (*(_DWORD *)a2 > v30)
      v30 = *(_DWORD *)a2;
    *(_DWORD *)a3 = v30;
    *(_DWORD *)a2 = v30;
  }
LABEL_36:
  v31 = *((_QWORD *)v4 + 1);
  v32 = ((*(_DWORD *)(v31 + 124) >> 13) & 6) - 2;
  v33 = *(_QWORD *)(*(_QWORD *)(v31 + 88) + 8);
  v34 = v32 >= 4;
  v35 = v33 + 12;
  v36 = v33 + 4;
  if (v34)
    v35 = v36;
  if ((*(_BYTE *)(v35 + 4) & 0xF7) == 3 && *(_DWORD *)a3 < 64000000)
    *(_DWORD *)a3 = 64000000;
  if (v10 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v12);
  }
  return this;
}

void WebCore::FixedTableLayout::layout(WebCore::FixedTableLayout *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  float v28;
  void *v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  double v33;
  unint64_t v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  double v45;
  int v46;
  float v47;
  _BYTE *v48;
  float v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  float *v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  unint64_t v71;
  int v72;
  float v73;
  unint64_t v75;
  float v76;
  double v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  double v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  uint64_t v87;
  char v88;
  char v89;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  v4 = v3[31];
  v5 = v3 + 41;
  if (((v4 >> 13) & 6) - 2 >= 4)
    v5 = v3 + 40;
  v6 = *v5;
  v7 = v3[85];
  v8 = v3[86];
  v9 = __OFADD__(v7, v8);
  v10 = v7 + v8;
  v11 = (v7 >> 31) + 0x7FFFFFFF;
  if (v9)
    v12 = v11;
  else
    v12 = v10;
  if ((v4 & 4) != 0)
  {
    v22 = 0;
  }
  else
  {
    v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 976))(*((_QWORD *)this + 1));
    v14 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 984))(v3);
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      v15 = (v13 >> 31) + 0x7FFFFFFF;
    v16 = v3[57];
    if (v16)
    {
      v17 = v16 + 1;
      v18 = (int)v3[83];
      LODWORD(v19) = v17 << 6;
      if (v17 <= 0x1FFFFFE)
        v19 = v19;
      else
        v19 = 0x7FFFFFFFLL;
      v20 = v18 * v19 / 64;
      if (HIDWORD(v20) != (int)v20 >> 31)
        LODWORD(v20) = (v18 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      LODWORD(v20) = 0;
    }
    v9 = __OFADD__(v15, (_DWORD)v20);
    v21 = v15 + v20;
    v22 = (v15 >> 31) + 0x7FFFFFFF;
    if (!v9)
      v22 = v21;
  }
  v9 = __OFADD__(v12, v22);
  v23 = v12 + v22;
  if (v9)
    v23 = (v12 >> 31) + 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v23);
  v24 = v6 - v23;
  if (v9)
    v24 = (v6 >> 31) + 0x7FFFFFFF;
  v25 = (float)v24;
  v26 = *((_QWORD *)this + 1);
  v27 = *(_DWORD *)(v26 + 228);
  if (*((_DWORD *)this + 7) != v27)
  {
    WebCore::FixedTableLayout::calcWidthArray(this, a2);
    v26 = *((_QWORD *)this + 1);
    v27 = *(_DWORD *)(v26 + 228);
  }
  v28 = v25 * 0.015625;
  if (v27)
  {
    if (v27 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x19632C168);
    }
    v29 = (void *)WTF::fastMalloc((WTF *)(4 * v27));
    bzero(v29, 4 * v27);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = v28 * 64.0;
    v34 = *((unsigned int *)this + 7);
    v35 = (float)(int)fmax(v33, -2147483650.0) * 0.015625;
    if (v33 < 2147483650.0)
      v36 = v35;
    else
      v36 = 33554000.0;
    v37 = 0.0;
    v38 = 6;
    v39 = 0.0;
    v40 = 0.0;
    do
    {
      if (v30 >= v34)
        goto LABEL_143;
      v41 = *((_QWORD *)this + 2);
      v42 = v41 + v38;
      a2 = (void *)*(unsigned __int8 *)(v41 + v38 - 2);
      if (*(_BYTE *)(v41 + v38 - 2))
      {
        if ((_DWORD)a2 == 3)
        {
          v44 = *(float *)(v42 - 6);
          if (!*(_BYTE *)(v41 + v38))
            v44 = (float)SLODWORD(v44);
          v45 = (float)((float)(v36 * v44) / 100.0) * 64.0;
          if (v45 >= 2147483650.0)
          {
            v46 = 0x7FFFFFFF;
          }
          else if (v45 <= -2147483650.0)
          {
            v46 = 0x80000000;
          }
          else
          {
            v46 = (int)v45;
          }
          v47 = (float)v46 * 0.015625;
          *((float *)v29 + v30) = v47;
          v34 = *((unsigned int *)this + 7);
          if (v30 >= v34)
          {
            __break(0xC471u);
            JUMPOUT(0x19632C130);
          }
          v48 = (_BYTE *)(*((_QWORD *)this + 2) + v38);
          if (*v48)
            v49 = *(float *)(v48 - 6);
          else
            v49 = (float)*(int *)(v48 - 6);
          v39 = v39 + v47;
          v37 = v37 + v49;
        }
        else if ((_DWORD)a2 == 4)
        {
          if (*(_BYTE *)(v41 + v38))
            v43 = *(float *)(v42 - 6);
          else
            v43 = (float)*(int *)(v42 - 6);
          *((float *)v29 + v30) = v43;
          v40 = v40 + v43;
        }
      }
      else
      {
        v50 = *((_QWORD *)this + 1);
        if (v30 >= *(unsigned int *)(v50 + 228))
        {
          __break(0xC471u);
          JUMPOUT(0x19632C138);
        }
        ++v32;
        v31 += *(_DWORD *)(*(_QWORD *)(v50 + 216) + 4 * v30);
      }
      ++v30;
      v38 += 8;
    }
    while (v27 != v30);
    v26 = *((_QWORD *)this + 1);
  }
  else
  {
    v29 = 0;
    v32 = 0;
    v31 = 0;
    v40 = 0.0;
    v39 = 0.0;
    v37 = 0.0;
  }
  v51 = (float)*(int *)(v26 + 332) * 0.015625;
  v52 = v40 + v39;
  if (v32 && v52 <= v28)
  {
    v53 = (float)((float)(v28 - v40) - v39) - (float)(v51 * (float)(v31 - v32));
    if (v27)
    {
      v54 = 0;
      v55 = 0;
      v56 = *((unsigned int *)this + 7);
      v57 = 4;
      while (1)
      {
        if (v56 == v54)
        {
          __break(0xC471u);
          JUMPOUT(0x19632C140);
        }
        if (!*(_BYTE *)(*((_QWORD *)this + 2) + v57))
        {
          if (v54 >= *(unsigned int *)(v26 + 228))
          {
            __break(0xC471u);
            JUMPOUT(0x19632C160);
          }
          v58 = *(_DWORD *)(*(_QWORD *)(v26 + 216) + 4 * v54);
          v59 = (float)(v53 * (float)v58) / (float)v31;
          *((float *)v29 + v54) = v59 + (float)(v51 * (float)(v58 - 1));
          v53 = v53 - v59;
          if (v53 == 0.0)
            goto LABEL_90;
          v31 -= v58;
          v55 = v54;
        }
        ++v54;
        v57 += 8;
        if (v27 == v54)
          goto LABEL_90;
      }
    }
    v55 = 0;
LABEL_90:
    if (v53 != 0.0)
    {
      if (v27 <= (unint64_t)v55)
      {
LABEL_143:
        __break(0xC471u);
        JUMPOUT(0x19632C120);
      }
      *((float *)v29 + v55) = v53 + *((float *)v29 + v55);
    }
    goto LABEL_102;
  }
  if (v52 != v28)
  {
    if (v40 != 0.0 && v52 < v28)
    {
      if (!v27)
      {
        v40 = 0.0;
        if (v37 != 0.0)
          v39 = 0.0;
        goto LABEL_95;
      }
      v60 = 0;
      v61 = 8 * *((unsigned int *)this + 7);
      v40 = 0.0;
      v62 = (float *)v29;
      do
      {
        if (v61 == v60)
        {
          __break(0xC471u);
          JUMPOUT(0x19632C158);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 2) + v60 + 4) == 4)
        {
          v63 = (float)(v28 * *v62) / v52;
          *v62 = v63;
          v40 = v40 + v63;
        }
        v60 += 8;
        ++v62;
      }
      while (8 * v27 != v60);
    }
    if (v37 != 0.0)
      v39 = 0.0;
    if (v27 && v37 != 0.0)
    {
      v64 = 0;
      v65 = 8 * *((unsigned int *)this + 7);
      v39 = 0.0;
      v66 = (float *)v29;
      do
      {
        if (v65 == v64)
        {
          __break(0xC471u);
          JUMPOUT(0x19632C150);
        }
        v67 = *((_QWORD *)this + 2) + v64;
        if (*(_BYTE *)(v67 + 4) == 3)
        {
          if (*(_BYTE *)(v67 + 6))
            v68 = *(float *)v67;
          else
            v68 = (float)*(int *)v67;
          v69 = (float)((float)(v28 - v40) * v68) / v37;
          *v66 = v69;
          v39 = v39 + v69;
        }
        v64 += 8;
        ++v66;
      }
      while (8 * v27 != v64);
    }
LABEL_95:
    v52 = v40 + v39;
  }
  if (v52 < v28)
  {
    if (v27)
    {
      v70 = v28 - v52;
      v71 = (int)v27 - 1;
      v72 = v27;
      do
      {
        if (v71 >= v27)
        {
          __break(0xC471u);
          JUMPOUT(0x19632C148);
        }
        v73 = v70 / (float)v72;
        v70 = v70 - v73;
        *((float *)v29 + v71) = v73 + *((float *)v29 + v71);
        --v72;
      }
      while ((_DWORD)v71--);
      *((float *)v29 + v27 - 1) = v70 + *((float *)v29 + v27 - 1);
      goto LABEL_103;
    }
LABEL_114:
    v82 = 0.0;
    goto LABEL_115;
  }
LABEL_102:
  if (!v27)
    goto LABEL_114;
LABEL_103:
  v75 = 0;
  v76 = 0.0;
  do
  {
    v77 = v76 * 64.0;
    if (v77 >= 2147483650.0)
    {
      v78 = 0x7FFFFFFF;
    }
    else
    {
      v78 = (int)v77;
      if (v77 <= -2147483650.0)
        v78 = 0x80000000;
    }
    v79 = *((_QWORD *)this + 1);
    if (v75 >= *(unsigned int *)(v79 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19632C128);
    }
    v80 = *(_QWORD *)(v79 + 200);
    if (*(_DWORD *)(v80 + 4 * v75) == v78)
      v81 = *(_BYTE *)(v79 + 328) & 0x10;
    else
      v81 = 16;
    *(_BYTE *)(v79 + 328) = v81 | *(_BYTE *)(v79 + 328) & 0xEF;
    *(_DWORD *)(v80 + 4 * v75) = v78;
    v76 = v76 + (float)(v51 + *((float *)v29 + v75++));
  }
  while (v27 != v75);
  v26 = *((_QWORD *)this + 1);
  v82 = v76 * 64.0;
LABEL_115:
  v83 = *(_DWORD *)(v26 + 212);
  if (v83)
  {
    v84 = (float)((float)v83 + -1.0);
    if (v82 > -2147483650.0)
      v85 = (int)v82;
    else
      v85 = 0x80000000;
    if (v82 < 2147483650.0)
      v86 = v85;
    else
      v86 = 0x7FFFFFFF;
    if (v83 <= v84)
    {
      __break(0xC471u);
      JUMPOUT(0x19632C170);
    }
    v87 = *(_QWORD *)(v26 + 200);
    v88 = *(_BYTE *)(v26 + 328);
    if (*(_DWORD *)(v87 + 4 * v84) == v86)
      v89 = v88 & 0x10;
    else
      v89 = 16;
    *(_BYTE *)(v26 + 328) = v89 | v88 & 0xEF;
    *(_DWORD *)(v87 + 4 * v84) = v86;
  }
  if (v29)
    WTF::fastFree((WTF *)v29, a2);
}

uint64_t WebCore::FlexLayoutAlgorithm::removeMarginEndFromFlexSizes(uint64_t result, _QWORD *a2, int *a3, int *a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;

  v4 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)result + 124) >> 13;
  if ((*(_BYTE *)(*(_QWORD *)result + 21) & 0x10) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 88) + 32) + 16) + 20) & 2) == 0)
      goto LABEL_3;
LABEL_10:
    v8 = v4 - 1;
    if (v8 > 4)
      v7 = 2;
    else
      v7 = qword_1969FC400[v8];
    goto LABEL_13;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 88) + 32) + 16) + 20) & 2) == 0)
    goto LABEL_10;
LABEL_3:
  v5 = *(_DWORD *)(*(_QWORD *)result + 120);
  v6 = (v5 >> 26) & 1;
  if ((v4 - 2) >= 2)
  {
    if ((_DWORD)v4 == 4)
    {
      v6 = (v5 & 0x4000000) == 0;
    }
    else if ((_DWORD)v4 != 5)
    {
      v7 = 3;
      if ((v5 & 0x4000000) == 0)
        v7 = 1;
      goto LABEL_13;
    }
  }
  v7 = 2;
  if (v6)
    v7 = 0;
LABEL_13:
  v9 = *(_DWORD *)(*a2 + 4 * v7 + 168);
  v10 = (*a3 >> 31) + 0x7FFFFFFF;
  if (!__OFSUB__(*a3, v9))
    v10 = *a3 - v9;
  *a3 = v10;
  v11 = __OFSUB__(*a4, v9);
  v12 = *a4 - v9;
  if (v11)
    v12 = (*a4 >> 31) + 0x7FFFFFFF;
  *a4 = v12;
  return result;
}

uint64_t WebCore::FloatingObject::copyToNewContainer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char v24;
  char v25;
  char v26;
  void *v27;
  WTF *v28;

  if (*(_QWORD *)a1)
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  else
    v9 = 0;
  v10 = *(_BYTE *)(a1 + 36);
  v12 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 12);
  v13 = __OFSUB__(v12, (_DWORD)a2);
  v14 = v12 - a2;
  v15 = (v12 >> 31) + 0x7FFFFFFF;
  if (v13)
    v16 = v15;
  else
    v16 = v14;
  v13 = __OFSUB__(v11, HIDWORD(a2));
  v17 = v11 - HIDWORD(a2);
  v18 = (v11 >> 31) + 0x7FFFFFFF;
  if (v13)
    v19 = v18;
  else
    v19 = v17;
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 28);
  v22 = WTF::fastMalloc((WTF *)0x28);
  result = *(_QWORD *)(v9 + 8);
  if (result)
    goto LABEL_10;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v9;
  v28 = *(WTF **)(v9 + 8);
  *(_QWORD *)(v9 + 8) = result;
  if (!v28)
    goto LABEL_10;
  if (*(_DWORD *)v28 != 1)
  {
    --*(_DWORD *)v28;
LABEL_10:
    ++*(_DWORD *)result;
    goto LABEL_11;
  }
  WTF::fastFree(v28, v27);
  result = *(_QWORD *)(v9 + 8);
  if (result)
    goto LABEL_10;
LABEL_11:
  *(_QWORD *)v22 = result;
  *(_QWORD *)(v22 + 8) = v16 | (v19 << 32);
  *(_QWORD *)(v22 + 16) = v20;
  *(_DWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 28) = v21;
  if (a4)
    v24 = 8;
  else
    v24 = 0;
  if (a5)
    v25 = 32;
  else
    v25 = 0;
  if (a3)
    v26 = 20;
  else
    v26 = 16;
  *(_BYTE *)(v22 + 36) = (v24 | v26 | v25) & 0xFC | v10 & 3 | *(_BYTE *)(v22 + 36) & 0xC0;
  *a6 = v22;
  return result;
}

__n128 WebCore::FloatingObject::cloneForNewParent@<Q0>(WebCore::FloatingObject *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  char v9;
  void *v10;
  WTF *v11;

  if (*(_QWORD *)this)
    v4 = *(_QWORD *)(*(_QWORD *)this + 8);
  else
    v4 = 0;
  v5 = *((_BYTE *)this + 36);
  v6 = WTF::fastMalloc((WTF *)0x28);
  v7 = *(_QWORD *)(v4 + 8);
  if (!v7)
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v4;
    v11 = *(WTF **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v7;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WTF::fastFree(v11, v10);
        v7 = *(_QWORD *)(v4 + 8);
        if (!v7)
          goto LABEL_5;
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
  }
  ++*(_DWORD *)v7;
LABEL_5:
  *(_QWORD *)v6 = v7;
  result = *(__n128 *)((char *)this + 8);
  *(__n128 *)(v6 + 8) = result;
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 28) = *(_QWORD *)((char *)this + 28);
  v9 = *(_BYTE *)(v6 + 36) & 0xC0 | v5 & 0x2F;
  *(_BYTE *)(v6 + 36) = v9 | 0x10;
  *a2 = v6;
  *(_DWORD *)(v6 + 24) = *((_DWORD *)this + 6);
  *(_BYTE *)(v6 + 36) = *((_BYTE *)this + 36) & 0x10 | v9;
  return result;
}

uint64_t WebCore::FloatingObject::shouldPaint(WebCore::FloatingObject *this)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)this
    && (v1 = *(_QWORD *)(*(_QWORD *)this + 8)) != 0
    && ((v2 = *(_QWORD *)(v1 + 144)) == 0 || (*(_BYTE *)(v2 + 25) & 8) == 0))
  {
    return (*((unsigned __int8 *)this + 36) >> 2) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::FloatingObject::translationOffsetToAncestor(WebCore::FloatingObject *this)
{
  int v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v1 = *((_DWORD *)this + 7);
  v2 = *((_DWORD *)this + 8);
  v4 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  v5 = __OFADD__((_DWORD)v3, v1);
  v6 = v3 + v1;
  if (v5)
    v6 = (v3 >> 31) + 0x7FFFFFFF;
  v7 = HIDWORD(v3);
  v5 = __OFADD__((_DWORD)v7, v2);
  v8 = v7 + v2;
  v9 = (v7 >> 31) + 0x7FFFFFFF;
  if (v5)
    v8 = v9;
  v10 = *(_DWORD *)(*(_QWORD *)(v4 + 8) + 152);
  v11 = *(_DWORD *)(*(_QWORD *)(v4 + 8) + 156);
  v5 = __OFSUB__(v6, v10);
  v12 = v6 - v10;
  LODWORD(v13) = (v6 >> 31) + 0x7FFFFFFF;
  if (v5)
    v13 = v13;
  else
    v13 = v12;
  v5 = __OFSUB__(v8, v11);
  v14 = v8 - v11;
  LODWORD(v15) = (v8 >> 31) + 0x7FFFFFFF;
  if (v5)
    v15 = v15;
  else
    v15 = v14;
  return v13 | (v15 << 32);
}

uint64_t WebCore::FloatingObjects::findNextFloatLogicalBottomBelow(_QWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t *v7;
  void *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  void *v15;
  WTF *v16;
  WTF *v17;
  int v18;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned int v21;
  unsigned __int8 v22;

  v4 = a1[6];
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(WTF **)(v5 + 8);
  if (!v6)
  {
    v6 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *((_QWORD *)v6 + 1) = v5;
    v16 = *(WTF **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v6;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        WTF::fastFree(v16, v15);
        v6 = *(WTF **)(v5 + 8);
        if (!v6)
          goto LABEL_5;
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
  }
  ++*(_DWORD *)v6;
LABEL_5:
  v17 = v6;
  v18 = a2;
  LOBYTE(v19) = 0;
  v20 = 0;
  LOBYTE(v21) = 0;
  v22 = 0;
  v7 = (uint64_t *)a1[3];
  if (v7 || (WebCore::FloatingObjects::computePlacedFloatsTree(a1), (v7 = (uint64_t *)a1[3]) != 0))
  {
    WebCore::PODIntervalTree<WebCore::LayoutUnit,WebCore::FloatingObject *>::searchForOverlapsFrom<WebCore::FindNextFloatLogicalBottomAdapter>(v7, (_QWORD *)*v7, (uint64_t)&v17);
    v9 = v20;
    v10 = v22;
    v6 = v17;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v11 = v19;
  v12 = v21;
  v17 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v8);
    else
      --*(_DWORD *)v6;
  }
  if (v9)
    v13 = v11;
  else
    v13 = 0;
  if (v10)
    return v12;
  else
    return v13;
}

uint64_t WebCore::FloatingObjects::findNextFloatLogicalBottomBelowForBlock(_QWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t *v7;
  void *v8;
  int v9;
  unsigned int v10;
  void *v12;
  WTF *v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  unsigned __int8 v17;
  char v18;
  char v19;

  v4 = a1[6];
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(WTF **)(v5 + 8);
  if (!v6)
  {
    v6 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *((_QWORD *)v6 + 1) = v5;
    v13 = *(WTF **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v6;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WTF::fastFree(v13, v12);
        v6 = *(WTF **)(v5 + 8);
        if (!v6)
          goto LABEL_5;
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
  }
  ++*(_DWORD *)v6;
LABEL_5:
  v14 = v6;
  v15 = a2;
  LOBYTE(v16) = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v7 = (uint64_t *)a1[3];
  if (v7 || (WebCore::FloatingObjects::computePlacedFloatsTree(a1), (v7 = (uint64_t *)a1[3]) != 0))
  {
    WebCore::PODIntervalTree<WebCore::LayoutUnit,WebCore::FloatingObject *>::searchForOverlapsFrom<WebCore::FindNextFloatLogicalBottomAdapter>(v7, (_QWORD *)*v7, (uint64_t)&v14);
    v9 = v17;
    v6 = v14;
  }
  else
  {
    v9 = 0;
  }
  v10 = v16;
  v14 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v8);
    else
      --*(_DWORD *)v6;
  }
  if (v9)
    return v10;
  else
    return 0;
}

WebCore::FloatingObjects *WebCore::FloatingObjects::FloatingObjects(WebCore::FloatingObjects *this, const WebCore::RenderBlockFlow *a2)
{
  uint64_t v3;
  void *v6;
  WTF *v7;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_BYTE *)this + 40) = (*((_DWORD *)a2 + 5) & 0x1000) == 0;
  v3 = *((_QWORD *)a2 + 1);
  if (!v3)
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = a2;
    v7 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v3;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WTF::fastFree(v7, v6);
        v3 = *((_QWORD *)a2 + 1);
        if (!v3)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  ++*(_DWORD *)v3;
LABEL_3:
  *((_QWORD *)this + 6) = v3;
  return this;
}

void WebCore::FloatingObjects::~FloatingObjects(WebCore::FloatingObjects *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *i;
  WTF **v10;
  WTF **v11;
  WTF *v12;
  WTF *v13;

  v3 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = *(WTF **)v4;
    if (*(_QWORD *)v4)
    {
      do
      {
        v6 = v5;
        v5 = *(WTF **)v5;
      }
      while (v5);
      v7 = (WTF *)*((_QWORD *)v6 + 2);
      if (v7)
      {
        do
        {
          if (*(WTF **)v7 == v6)
          {
            for (i = (WTF *)*((_QWORD *)v7 + 1); i; i = *(WTF **)i)
              v7 = i;
          }
          v8 = v7;
          WTF::fastFree(v6, a2);
          v7 = (WTF *)*((_QWORD *)v8 + 2);
          v6 = v8;
        }
        while (v7);
      }
      else
      {
        v8 = v6;
      }
      WTF::fastFree(v8, a2);
      *(_QWORD *)v4 = 0;
    }
    WTF::fastFree(v4, a2);
  }
  v10 = (WTF **)*((_QWORD *)this + 1);
  if (v10)
  {
    do
    {
      v11 = (WTF **)v10[2];
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        v13 = *(WTF **)v12;
        *(_QWORD *)v12 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 1)
            WTF::fastFree(v13, a2);
          else
            --*(_DWORD *)v13;
        }
        WTF::fastFree(v12, a2);
      }
      WTF::fastFree((WTF *)v10, a2);
      v10 = v11;
    }
    while (v11);
  }
  if (*(_QWORD *)this)
    WTF::fastFree((WTF *)(*(_QWORD *)this - 16), a2);
}

uint64_t **WebCore::FloatingObjects::addPlacedObject(uint64_t **this, WebCore::FloatingObject *a2)
{
  uint64_t **v2;
  unsigned int v4;
  int v5;
  BOOL v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  *((_BYTE *)a2 + 36) |= 0x10u;
  v2 = (uint64_t **)this[3];
  if (v2)
  {
    if (*((_BYTE *)this + 40))
    {
      v4 = *((_DWORD *)a2 + 3);
      v5 = *((_DWORD *)a2 + 5);
    }
    else
    {
      v4 = *((_DWORD *)a2 + 2);
      v5 = *((_DWORD *)a2 + 4);
    }
    v6 = __OFADD__(v4, v5);
    v7 = v4 + v5;
    if (v6)
      v7 = (v4 >> 31) + 0x7FFFFFFF;
    v8 = v4 & 0xFFFFFFC0;
    v9 = v7 & 0xFFFFFFC0;
    v10 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)v10 = 0;
    *(_DWORD *)(v10 + 24) = 0;
    *(_DWORD *)(v10 + 32) = v8;
    *(_DWORD *)(v10 + 36) = v9;
    *(_QWORD *)(v10 + 40) = a2;
    *(_DWORD *)(v10 + 48) = v9;
    return WebCore::PODRedBlackTree<WebCore::PODInterval<WebCore::LayoutUnit,WebCore::FloatingObject *>,WebCore::PODIntervalNodeUpdater>::insertNode(v2, (uint64_t *)v10);
  }
  return this;
}

uint64_t WebCore::PODRedBlackTree<WebCore::PODInterval<WebCore::LayoutUnit,WebCore::FloatingObject *>,WebCore::PODIntervalNodeUpdater>::remove(uint64_t **a1, _DWORD *a2)
{
  uint64_t *v2;
  int v3;
  int v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t **v9;
  int *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t ***v15;
  __int128 v16;
  uint64_t *v17;
  int *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t *i;
  int *v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t *v31;
  int *v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t ***v43;
  uint64_t ***v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t *v47;
  int *v48;
  uint64_t *v49;
  int *v50;
  int v51;
  int v52;
  int *v53;
  uint64_t *v54;
  int v55;
  int v56;
  int v57;
  uint64_t **v58;
  uint64_t v59;
  int *v60;
  uint64_t **v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  _QWORD *v68;
  int *v69;
  uint64_t v70;
  int *v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t **v77;
  uint64_t *v78;
  int *v79;
  int v80;
  uint64_t *v81;
  int v82;
  int v83;
  uint64_t *v84;
  uint64_t ***v85;
  int *v86;
  int *v87;
  int v88;
  uint64_t *v89;
  int v90;
  int v91;
  int v92;
  int *v93;
  int *v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  int *v103;
  uint64_t *v104;
  int *v105;
  int v106;
  uint64_t *v107;
  int v108;
  int v109;
  int *v110;
  int v111;
  uint64_t v112;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = *((_QWORD *)a2 + 1);
  while (1)
  {
    v6 = *((_DWORD *)v2 + 8);
    if (v6 == v3 && *((_DWORD *)v2 + 9) == v4 && v2[5] == v5)
      break;
    if (v3 >= v6)
    {
      if (v6 < v3 || (v7 = *((_DWORD *)v2 + 9), v4 >= v7) && (v7 < v4 || v5 >= v2[5]))
        ++v2;
    }
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  v10 = (int *)v2 + 9;
  v9 = (uint64_t **)*v2;
  v11 = v2;
  if (*v2)
  {
    v12 = (uint64_t *)v2[1];
    if (!v12)
    {
      v11 = v2;
      goto LABEL_20;
    }
    do
    {
      v11 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  v9 = (uint64_t **)v11[1];
  if (!v9)
  {
    v13 = (uint64_t *)v11[2];
    v14 = v13;
    goto LABEL_21;
  }
LABEL_20:
  v14 = (uint64_t *)v11[2];
  v9[2] = v14;
  v13 = (uint64_t *)v11[2];
LABEL_21:
  v15 = (uint64_t ***)a1;
  if (v13)
  {
    v15 = (uint64_t ***)(v13 + 1);
    if (v11 == (uint64_t *)*v13)
      v15 = (uint64_t ***)v13;
  }
  *v15 = v9;
  if (v11 != v2)
  {
    v16 = *((_OWORD *)v11 + 2);
    *((_DWORD *)v2 + 12) = *((_DWORD *)v11 + 12);
    *((_OWORD *)v2 + 2) = v16;
    v17 = (uint64_t *)*v2;
    if (*v2)
    {
      v19 = *((_DWORD *)v17 + 12);
      v18 = (int *)(v17 + 6);
      if (*v10 < v19)
        v10 = v18;
    }
    v20 = v2[1];
    if (v20)
    {
      v21 = *v10;
      v22 = *(_DWORD *)(v20 + 48);
      if (v21 <= v22)
        v21 = v22;
    }
    else
    {
      v21 = *v10;
    }
    if (v21 != *((_DWORD *)v2 + 12))
      *((_DWORD *)v2 + 12) = v21;
    for (i = (uint64_t *)v2[2]; i; i = (uint64_t *)i[2])
    {
      v24 = (int *)i + 9;
      v25 = *i;
      if (*i)
      {
        v27 = *(_DWORD *)(v25 + 48);
        v26 = (int *)(v25 + 48);
        if (*v24 < v27)
          v24 = v26;
      }
      v28 = i[1];
      if (v28)
      {
        v29 = *v24;
        v30 = *(_DWORD *)(v28 + 48);
        if (v29 <= v30)
          v29 = v30;
      }
      else
      {
        v29 = *v24;
      }
      if (v29 == *((_DWORD *)i + 12))
        break;
      *((_DWORD *)i + 12) = v29;
    }
  }
  if (v14 != v2 && v14 && v14 != v11)
  {
    v31 = v14;
    do
    {
      v32 = (int *)v31 + 9;
      v33 = *v31;
      if (*v31)
      {
        v35 = *(_DWORD *)(v33 + 48);
        v34 = (int *)(v33 + 48);
        if (*v32 < v35)
          v32 = v34;
      }
      v36 = v31[1];
      if (v36)
      {
        v37 = *v32;
        v38 = *(_DWORD *)(v36 + 48);
        if (v37 <= v38)
          v37 = v38;
      }
      else
      {
        v37 = *v32;
      }
      if (v37 == *((_DWORD *)v31 + 12))
        break;
      *((_DWORD *)v31 + 12) = v37;
      v31 = (uint64_t *)v31[2];
    }
    while (v31);
  }
  if (*((_DWORD *)v11 + 6) != 1)
    goto LABEL_232;
  v39 = (uint64_t **)*a1;
  if (*a1 == (uint64_t *)v9)
    goto LABEL_230;
  while (1)
  {
    v40 = (uint64_t **)v14;
    if (v9 && *((_DWORD *)v9 + 6) != 1)
    {
      v40 = v9;
      goto LABEL_231;
    }
    v41 = *v14;
    if (v9 != (uint64_t **)*v40)
    {
      if (*(_DWORD *)(v41 + 24))
      {
        v42 = *v40;
      }
      else
      {
        *(_DWORD *)(v41 + 24) = 1;
        *((_DWORD *)v40 + 6) = 0;
        v42 = *(uint64_t **)(v41 + 8);
        *v40 = v42;
        if (v42)
          v42[2] = (uint64_t)v40;
        *(_QWORD *)(v41 + 16) = v40[2];
        v44 = (uint64_t ***)v40[2];
        if (v44)
        {
          if (*v44 == v40)
          {
            *v44 = (uint64_t **)v41;
            v42 = *v40;
          }
          else
          {
            v44[1] = (uint64_t **)v41;
          }
        }
        else
        {
          *a1 = (uint64_t *)v41;
          v39 = (uint64_t **)v41;
        }
        *(_QWORD *)(v41 + 8) = v40;
        v40[2] = (uint64_t *)v41;
        v53 = (int *)v40 + 9;
        if (v42 && *v53 < *((_DWORD *)v42 + 12))
          v53 = (int *)(v42 + 6);
        v54 = v40[1];
        if (v54)
        {
          v55 = *v53;
          v56 = *((_DWORD *)v54 + 12);
          if (v55 <= v56)
            v55 = v56;
        }
        else
        {
          v55 = *v53;
        }
        if (v55 != *((_DWORD *)v40 + 12))
          *((_DWORD *)v40 + 12) = v55;
        if (*(_QWORD *)v41)
        {
          v57 = *(_DWORD *)(*(_QWORD *)v41 + 48);
          if (*(_DWORD *)(v41 + 36) > v57)
            v57 = *(_DWORD *)(v41 + 36);
        }
        else
        {
          v57 = *(_DWORD *)(v41 + 36);
        }
        if (v57 > v55)
          v55 = v57;
        if (v55 != *(_DWORD *)(v41 + 48))
          *(_DWORD *)(v41 + 48) = v55;
      }
      v58 = (uint64_t **)v42[1];
      if (!v58 || *((_DWORD *)v58 + 6) == 1)
      {
        v59 = *v42;
        if (*v42 && *(_DWORD *)(v59 + 24) != 1)
          goto LABEL_140;
        *((_DWORD *)v42 + 6) = 0;
        goto LABEL_124;
      }
      v59 = *v42;
      if (*v42 && *(_DWORD *)(v59 + 24) != 1)
      {
LABEL_140:
        *((_DWORD *)v42 + 6) = *((_DWORD *)v40 + 6);
        *((_DWORD *)v40 + 6) = 1;
      }
      else
      {
        *((_DWORD *)v58 + 6) = 1;
        *((_DWORD *)v42 + 6) = 0;
        v66 = *v58;
        v42[1] = (uint64_t)*v58;
        if (v66)
          v66[2] = (uint64_t)v42;
        v58[2] = (uint64_t *)v42[2];
        v67 = (_QWORD *)v42[2];
        v68 = a1;
        if (v67)
        {
          v68 = v67 + 1;
          if ((uint64_t *)*v67 == v42)
            v68 = (_QWORD *)v42[2];
        }
        *v68 = v58;
        *v58 = v42;
        v42[2] = (uint64_t)v58;
        v69 = (int *)v42 + 9;
        v70 = *v42;
        if (*v42)
        {
          v72 = *(_DWORD *)(v70 + 48);
          v71 = (int *)(v70 + 48);
          if (*v69 < v72)
            v69 = v71;
        }
        v73 = v42[1];
        if (v73)
        {
          v74 = *v69;
          v75 = *(_DWORD *)(v73 + 48);
          if (v74 <= v75)
            v74 = v75;
        }
        else
        {
          v74 = *v69;
        }
        v80 = *((_DWORD *)v42 + 12);
        v79 = (int *)(v42 + 6);
        if (v74 != v80)
          *v79 = v74;
        if (*((_DWORD *)v58 + 9) >= v74)
          v79 = (int *)v58 + 9;
        v81 = v58[1];
        if (v81)
        {
          v82 = *v79;
          v83 = *((_DWORD *)v81 + 12);
          if (v82 <= v83)
            v82 = v83;
        }
        else
        {
          v82 = *v79;
        }
        if (v82 != *((_DWORD *)v58 + 12))
          *((_DWORD *)v58 + 12) = v82;
        v42 = *v40;
        v59 = **v40;
        *((_DWORD *)*v40 + 6) = *((_DWORD *)v40 + 6);
        *((_DWORD *)v40 + 6) = 1;
        if (!v59)
          goto LABEL_162;
      }
      *(_DWORD *)(v59 + 24) = 1;
LABEL_162:
      v84 = (uint64_t *)v42[1];
      *v40 = v84;
      if (v84)
        v84[2] = (uint64_t)v40;
      v42[2] = (uint64_t)v40[2];
      v85 = (uint64_t ***)v40[2];
      if (v85)
      {
        if (*v85 == v40)
        {
          *v85 = (uint64_t **)v42;
          v84 = *v40;
        }
        else
        {
          v85[1] = (uint64_t **)v42;
        }
      }
      else
      {
        *a1 = v42;
      }
      v42[1] = (uint64_t)v40;
      v40[2] = v42;
      v86 = (int *)v40 + 9;
      if (v84)
      {
        v88 = *((_DWORD *)v84 + 12);
        v87 = (int *)(v84 + 6);
        if (*v86 < v88)
          v86 = v87;
      }
      v89 = v40[1];
      if (v89)
      {
        v90 = *v86;
        v91 = *((_DWORD *)v89 + 12);
        if (v90 > v91)
          v91 = v90;
      }
      else
      {
        v91 = *v86;
      }
      if (v91 != *((_DWORD *)v40 + 12))
        *((_DWORD *)v40 + 12) = v91;
      if (*v42)
      {
        v92 = *(_DWORD *)(*v42 + 48);
        if (*((_DWORD *)v42 + 9) > v92)
          v92 = *((_DWORD *)v42 + 9);
      }
      else
      {
        v92 = *((_DWORD *)v42 + 9);
      }
      goto LABEL_225;
    }
    v43 = (uint64_t ***)v40[1];
    if (*((_DWORD *)v43 + 6))
    {
      v42 = v40[1];
    }
    else
    {
      *((_DWORD *)v43 + 6) = 1;
      *((_DWORD *)v40 + 6) = 0;
      v45 = *v43;
      v40[1] = (uint64_t *)*v43;
      if (v45)
        v45[2] = (uint64_t *)v40;
      v43[2] = (uint64_t **)v40[2];
      v46 = v40[2];
      v47 = (uint64_t *)a1;
      if (v46)
      {
        v47 = v46 + 1;
        if ((uint64_t **)*v46 == v40)
          v47 = v40[2];
      }
      *v47 = (uint64_t)v43;
      *v43 = v40;
      v40[2] = (uint64_t *)v43;
      v48 = (int *)v40 + 9;
      v49 = *v40;
      if (*v40)
      {
        v51 = *((_DWORD *)v49 + 12);
        v50 = (int *)(v49 + 6);
        if (*v48 < v51)
          v48 = v50;
      }
      v42 = v40[1];
      if (v42)
      {
        v52 = *v48;
        if (v52 <= *((_DWORD *)v42 + 12))
          v52 = *((_DWORD *)v42 + 12);
      }
      else
      {
        v52 = *v48;
      }
      if (v52 != *((_DWORD *)v40 + 12))
        *((_DWORD *)v40 + 12) = v52;
      v60 = *((_DWORD *)v43 + 9) >= v52 ? (int *)((char *)v43 + 36) : (int *)(v40 + 6);
      v61 = v43[1];
      if (v61)
      {
        v62 = *v60;
        v63 = *((_DWORD *)v61 + 12);
        if (v62 <= v63)
          v62 = v63;
      }
      else
      {
        v62 = *v60;
      }
      if (v62 != *((_DWORD *)v43 + 12))
        *((_DWORD *)v43 + 12) = v62;
    }
    v64 = *v42;
    if (*v42)
    {
      if (*(_DWORD *)(v64 + 24) != 1)
        break;
    }
    v65 = v42[1];
    if (v65 && *(_DWORD *)(v65 + 24) != 1)
      goto LABEL_148;
    *((_DWORD *)v42 + 6) = 0;
    v39 = (uint64_t **)*a1;
LABEL_124:
    v14 = v40[2];
    v9 = v40;
    if (v40 == v39)
      goto LABEL_231;
  }
  v65 = v42[1];
  if (v65 && *(_DWORD *)(v65 + 24) != 1)
  {
LABEL_148:
    *((_DWORD *)v42 + 6) = *((_DWORD *)v40 + 6);
    *((_DWORD *)v40 + 6) = 1;
    v78 = v42 + 1;
    goto LABEL_206;
  }
  *(_DWORD *)(v64 + 24) = 1;
  *((_DWORD *)v42 + 6) = 0;
  v76 = *(_QWORD *)(v64 + 8);
  *v42 = v76;
  if (v76)
    *(_QWORD *)(v76 + 16) = v42;
  *(_QWORD *)(v64 + 16) = v42[2];
  v77 = (uint64_t **)v42[2];
  if (v77)
  {
    if (*v77 == v42)
    {
      *v77 = (uint64_t *)v64;
      v76 = *v42;
    }
    else
    {
      v77[1] = (uint64_t *)v64;
    }
  }
  else
  {
    *a1 = (uint64_t *)v64;
  }
  *(_QWORD *)(v64 + 8) = v42;
  v42[2] = v64;
  v93 = (int *)v42 + 9;
  if (v76)
  {
    v95 = *(_DWORD *)(v76 + 48);
    v94 = (int *)(v76 + 48);
    if (*v93 < v95)
      v93 = v94;
  }
  v96 = v42[1];
  if (v96)
  {
    v97 = *v93;
    v98 = *(_DWORD *)(v96 + 48);
    if (v97 > v98)
      v98 = v97;
  }
  else
  {
    v98 = *v93;
  }
  if (v98 != *((_DWORD *)v42 + 12))
    *((_DWORD *)v42 + 12) = v98;
  if (*(_QWORD *)v64)
  {
    v99 = *(_DWORD *)(*(_QWORD *)v64 + 48);
    if (*(_DWORD *)(v64 + 36) > v99)
      v99 = *(_DWORD *)(v64 + 36);
  }
  else
  {
    v99 = *(_DWORD *)(v64 + 36);
  }
  if (v99 <= v98)
    v99 = v98;
  if (v99 != *(_DWORD *)(v64 + 48))
    *(_DWORD *)(v64 + 48) = v99;
  v42 = v40[1];
  v78 = v42 + 1;
  v65 = v42[1];
  *((_DWORD *)v42 + 6) = *((_DWORD *)v40 + 6);
  *((_DWORD *)v40 + 6) = 1;
  if (v65)
LABEL_206:
    *(_DWORD *)(v65 + 24) = 1;
  v100 = *v42;
  v40[1] = (uint64_t *)*v42;
  if (v100)
    *(_QWORD *)(v100 + 16) = v40;
  v42[2] = (uint64_t)v40[2];
  v101 = v40[2];
  v102 = (uint64_t *)a1;
  if (v101)
  {
    v102 = v101 + 1;
    if ((uint64_t **)*v101 == v40)
      v102 = v40[2];
  }
  *v102 = (uint64_t)v42;
  *v42 = (uint64_t)v40;
  v40[2] = v42;
  v103 = (int *)v40 + 9;
  v104 = *v40;
  if (*v40)
  {
    v106 = *((_DWORD *)v104 + 12);
    v105 = (int *)(v104 + 6);
    if (*v103 < v106)
      v103 = v105;
  }
  v107 = v40[1];
  if (v107)
  {
    v108 = *v103;
    v109 = *((_DWORD *)v107 + 12);
    if (v108 <= v109)
      v108 = v109;
  }
  else
  {
    v108 = *v103;
  }
  v111 = *((_DWORD *)v40 + 12);
  v110 = (int *)(v40 + 6);
  if (v108 != v111)
    *v110 = v108;
  if (*((_DWORD *)v42 + 9) >= v108)
    v110 = (int *)v42 + 9;
  v112 = *v78;
  if (!v112)
  {
    v92 = *v110;
    goto LABEL_227;
  }
  v92 = *v110;
  v91 = *(_DWORD *)(v112 + 48);
LABEL_225:
  if (v92 <= v91)
    v92 = v91;
LABEL_227:
  if (v92 != *((_DWORD *)v42 + 12))
    *((_DWORD *)v42 + 12) = v92;
  v9 = (uint64_t **)*a1;
LABEL_230:
  v40 = v9;
  if (v9)
LABEL_231:
    *((_DWORD *)v40 + 6) = 1;
LABEL_232:
  WTF::fastFree((WTF *)v11, a2);
  return 1;
}

uint64_t WebCore::FloatingObjects::add(WebCore::FloatingObjects *this, uint64_t **a2)
{
  uint64_t *v4;
  _BYTE v6[8];
  uint64_t v7;

  v4 = *a2;
  if ((*((_BYTE *)v4 + 36) & 3) == 1)
    ++*((_DWORD *)this + 8);
  else
    ++*((_DWORD *)this + 9);
  if ((*((_BYTE *)v4 + 36) & 0x10) != 0)
    WebCore::FloatingObjects::addPlacedObject((uint64_t **)this, (WebCore::FloatingObject *)v4);
  WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::add((uint64_t *)this, a2, (uint64_t)v6);
  return *(_QWORD *)v7;
}

BOOL WebCore::FloatingObjects::remove(WebCore::FloatingObjects *this, WebCore::FloatingObject *a2)
{
  char v4;
  uint64_t **v5;
  uint64_t ***v6;
  uint64_t ***v7;
  uint64_t **v8;
  unsigned int v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t *v14[2];
  unsigned int v15;

  if ((*((_BYTE *)a2 + 36) & 3) == 1)
    --*((_DWORD *)this + 8);
  else
    --*((_DWORD *)this + 9);
  v4 = *((_BYTE *)a2 + 36);
  if ((v4 & 0x10) != 0)
  {
    v5 = (uint64_t **)*((_QWORD *)this + 3);
    if (v5)
    {
      if (*((_BYTE *)this + 40))
      {
        v10 = *((_DWORD *)a2 + 3);
        v11 = *((_DWORD *)a2 + 5);
      }
      else
      {
        v10 = *((_DWORD *)a2 + 2);
        v11 = *((_DWORD *)a2 + 4);
      }
      v12 = __OFADD__(v10, v11);
      v13 = v10 + v11;
      if (v12)
        v13 = (v10 >> 31) + 0x7FFFFFFF;
      LODWORD(v14[0]) = v10 & 0xFFFFFFC0;
      HIDWORD(v14[0]) = v13 & 0xFFFFFFC0;
      v14[1] = (uint64_t *)a2;
      v15 = v13 & 0xFFFFFFC0;
      WebCore::PODRedBlackTree<WebCore::PODInterval<WebCore::LayoutUnit,WebCore::FloatingObject *>,WebCore::PODIntervalNodeUpdater>::remove(v5, v14);
      v4 = *((_BYTE *)a2 + 36);
    }
    *((_BYTE *)a2 + 36) = v4 & 0xEF;
  }
  v14[0] = (uint64_t *)a2;
  v6 = (uint64_t ***)WTF::HashTable<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WebCore::FloatingObjectHashFunctions>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>>::find<WTF::ListHashSetTranslator<WebCore::FloatingObjectHashFunctions>,WebCore::FloatingObject const*>((uint64_t *)this, v14);
  v7 = *(uint64_t ****)this;
  if (*(_QWORD *)this)
    v7 += *((unsigned int *)v7 - 1);
  if (v7 == v6)
    v8 = 0;
  else
    v8 = *v6;
  return WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::remove((uint64_t *)this, this, v8);
}

_QWORD *WebCore::FloatingObjects::computePlacedFloatsTree(_QWORD *this)
{
  _QWORD *v1;
  void *v2;
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *i;
  WTF *v8;
  _QWORD *j;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t **v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  if (*this && *(_DWORD *)(*this - 12))
  {
    v1 = this;
    this = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *this = 0;
    v3 = (WTF *)v1[3];
    v1[3] = this;
    if (v3)
    {
      v4 = *(WTF **)v3;
      if (*(_QWORD *)v3)
      {
        do
        {
          v5 = v4;
          v4 = *(WTF **)v4;
        }
        while (v4);
        v6 = (WTF *)*((_QWORD *)v5 + 2);
        if (v6)
        {
          do
          {
            if (*(WTF **)v6 == v5)
            {
              for (i = (WTF *)*((_QWORD *)v6 + 1); i; i = *(WTF **)i)
                v6 = i;
            }
            v8 = v6;
            WTF::fastFree(v5, v2);
            v6 = (WTF *)*((_QWORD *)v8 + 2);
            v5 = v8;
          }
          while (v6);
        }
        else
        {
          v8 = v5;
        }
        WTF::fastFree(v8, v2);
        *(_QWORD *)v3 = 0;
      }
      this = (_QWORD *)WTF::fastFree(v3, v2);
    }
    for (j = (_QWORD *)v1[1]; j; j = (_QWORD *)j[2])
    {
      v10 = (_DWORD *)*j;
      if ((*(_BYTE *)(*j + 36) & 0x10) != 0)
      {
        if (*((_BYTE *)v1 + 40))
        {
          v11 = v10[3];
          v12 = v10[5];
        }
        else
        {
          v11 = v10[2];
          v12 = v10[4];
        }
        v13 = __OFADD__(v11, v12);
        v14 = v11 + v12;
        if (v13)
          v14 = (v11 >> 31) + 0x7FFFFFFF;
        v15 = (uint64_t **)v1[3];
        v16 = v11 & 0xFFFFFFC0;
        v17 = v14 & 0xFFFFFFC0;
        v18 = WTF::fastMalloc((WTF *)0x38);
        *(_QWORD *)(v18 + 8) = 0;
        *(_QWORD *)(v18 + 16) = 0;
        *(_QWORD *)v18 = 0;
        *(_DWORD *)(v18 + 24) = 0;
        *(_DWORD *)(v18 + 32) = v16;
        *(_DWORD *)(v18 + 36) = v17;
        *(_QWORD *)(v18 + 40) = v10;
        *(_DWORD *)(v18 + 48) = v17;
        this = WebCore::PODRedBlackTree<WebCore::PODInterval<WebCore::LayoutUnit,WebCore::FloatingObject *>,WebCore::PODIntervalNodeUpdater>::insertNode(v15, (uint64_t *)v18);
      }
    }
  }
  return this;
}

uint64_t WebCore::FloatingObjects::logicalLeftOffsetForPositioningFloat(_QWORD *a1, unsigned int a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t *v11;
  void *v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  WTF *v20;
  void *v22;
  WTF *v23;
  void (**v24)();
  WTF *v25;
  int v26;
  int v27;
  unsigned int v28;
  _DWORD *v29;

  v8 = a1[6];
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  v10 = *(WTF **)(v9 + 8);
  if (!v10)
  {
    v10 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *((_QWORD *)v10 + 1) = v9;
    v23 = *(WTF **)(v9 + 8);
    *(_QWORD *)(v9 + 8) = v10;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WTF::fastFree(v23, v22);
        v10 = *(WTF **)(v9 + 8);
        if (!v10)
          goto LABEL_5;
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
  }
  ++*(_DWORD *)v10;
LABEL_5:
  v26 = a3;
  v27 = a3;
  v28 = a2;
  v29 = 0;
  v24 = (void (**)())&off_1E341E488;
  v25 = v10;
  v11 = (uint64_t *)a1[3];
  if (v11 || (WebCore::FloatingObjects::computePlacedFloatsTree(a1), (v11 = (uint64_t *)a1[3]) != 0))
    WebCore::PODIntervalTree<WebCore::LayoutUnit,WebCore::FloatingObject *>::searchForOverlapsFrom<WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)1>>(*v11, (uint64_t)&v24);
  if (a4)
  {
    if (v29)
    {
      if ((*(_BYTE *)(*((_QWORD *)v25 + 1) + 21) & 0x10) != 0)
      {
        v13 = v29[2];
        v14 = v29[4];
      }
      else
      {
        v13 = v29[3];
        v14 = v29[5];
      }
      v15 = __OFADD__(v13, v14);
      v16 = v13 + v14;
      v17 = (v13 >> 31) + 0x7FFFFFFF;
      if (!v15)
        v17 = v16;
      v18 = v17 - v26;
      if (__OFSUB__(v17, v26))
        v18 = (v17 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v18 = 64;
    }
    *a4 = v18;
  }
  v19 = v28;
  v20 = v25;
  v24 = off_1E341E438;
  v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      WTF::fastFree(v20, v12);
    else
      --*(_DWORD *)v20;
  }
  return v19;
}

_QWORD *WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)1>::~ComputeFloatOffsetForFloatLayoutAdapter(_QWORD *a1, void *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = off_1E341E438;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  return a1;
}

uint64_t WebCore::FloatingObjects::logicalRightOffsetForPositioningFloat(_QWORD *a1, unsigned int a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t *v11;
  void *v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  WTF *v20;
  void *v22;
  WTF *v23;
  void (**v24)();
  WTF *v25;
  int v26;
  int v27;
  unsigned int v28;
  _DWORD *v29;

  v8 = a1[6];
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  v10 = *(WTF **)(v9 + 8);
  if (!v10)
  {
    v10 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *((_QWORD *)v10 + 1) = v9;
    v23 = *(WTF **)(v9 + 8);
    *(_QWORD *)(v9 + 8) = v10;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WTF::fastFree(v23, v22);
        v10 = *(WTF **)(v9 + 8);
        if (!v10)
          goto LABEL_5;
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
  }
  ++*(_DWORD *)v10;
LABEL_5:
  v26 = a3;
  v27 = a3;
  v28 = a2;
  v29 = 0;
  v24 = (void (**)())&off_1E341E4B0;
  v25 = v10;
  v11 = (uint64_t *)a1[3];
  if (v11 || (WebCore::FloatingObjects::computePlacedFloatsTree(a1), (v11 = (uint64_t *)a1[3]) != 0))
    WebCore::PODIntervalTree<WebCore::LayoutUnit,WebCore::FloatingObject *>::searchForOverlapsFrom<WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)2>>(*v11, (uint64_t)&v24);
  if (a4)
  {
    if (v29)
    {
      if ((*(_BYTE *)(*((_QWORD *)v25 + 1) + 21) & 0x10) != 0)
      {
        v13 = v29[2];
        v14 = v29[4];
      }
      else
      {
        v13 = v29[3];
        v14 = v29[5];
      }
      v15 = __OFADD__(v13, v14);
      v16 = v13 + v14;
      v17 = (v13 >> 31) + 0x7FFFFFFF;
      if (!v15)
        v17 = v16;
      v18 = v17 - v26;
      if (__OFSUB__(v17, v26))
        v18 = (v17 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v18 = 64;
    }
    *a4 = v18;
  }
  v19 = v28;
  v20 = v25;
  v24 = off_1E341E460;
  v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      WTF::fastFree(v20, v12);
    else
      --*(_DWORD *)v20;
  }
  if ((int)v19 >= (int)a2)
    return a2;
  else
    return v19;
}

_QWORD *WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)2>::~ComputeFloatOffsetForFloatLayoutAdapter(_QWORD *a1, void *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = off_1E341E460;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  return a1;
}

uint64_t WebCore::FloatingObjects::logicalLeftOffset(_QWORD *a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  WTF *v10;
  uint64_t *v11;
  void *v12;
  void *v14;
  WTF *v15;
  void (**v16)();
  WTF *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;

  v7 = a1[6];
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  if (__OFADD__(a3, a4))
    v9 = (a3 >> 31) + 0x7FFFFFFF;
  else
    v9 = a3 + a4;
  v10 = *(WTF **)(v8 + 8);
  if (!v10)
  {
    v10 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *((_QWORD *)v10 + 1) = v8;
    v15 = *(WTF **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v10;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WTF::fastFree(v15, v14);
        v10 = *(WTF **)(v8 + 8);
        if (!v10)
          goto LABEL_8;
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  ++*(_DWORD *)v10;
LABEL_8:
  v18 = a3;
  v19 = v9;
  v20 = a2;
  v21 = 0;
  v16 = (void (**)())&off_1E341E4D8;
  v17 = v10;
  v11 = (uint64_t *)a1[3];
  if (v11 || (WebCore::FloatingObjects::computePlacedFloatsTree(a1), (v11 = (uint64_t *)a1[3]) != 0))
  {
    WebCore::PODIntervalTree<WebCore::LayoutUnit,WebCore::FloatingObject *>::searchForOverlapsFrom<WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)1>>(*v11, (uint64_t)&v16);
    a2 = v20;
    v10 = v17;
  }
  v16 = off_1E341E438;
  v17 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, v12);
    else
      --*(_DWORD *)v10;
  }
  return a2;
}

_QWORD *WebCore::ComputeFloatOffsetForLineLayoutAdapter<(WebCore::FloatingObject::Type)1>::~ComputeFloatOffsetForLineLayoutAdapter(_QWORD *a1, void *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = off_1E341E438;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  return a1;
}

uint64_t WebCore::FloatingObjects::logicalRightOffset(_QWORD *a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  WTF *v10;
  uint64_t *v11;
  void *v12;
  unsigned int v13;
  void *v15;
  WTF *v16;
  void (**v17)();
  WTF *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v7 = a1[6];
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  if (__OFADD__(a3, a4))
    v9 = (a3 >> 31) + 0x7FFFFFFF;
  else
    v9 = a3 + a4;
  v10 = *(WTF **)(v8 + 8);
  if (!v10)
  {
    v10 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *((_QWORD *)v10 + 1) = v8;
    v16 = *(WTF **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v10;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        WTF::fastFree(v16, v15);
        v10 = *(WTF **)(v8 + 8);
        if (!v10)
          goto LABEL_8;
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
  }
  ++*(_DWORD *)v10;
LABEL_8:
  v19 = a3;
  v20 = v9;
  v21 = a2;
  v22 = 0;
  v17 = (void (**)())&off_1E341E500;
  v18 = v10;
  v11 = (uint64_t *)a1[3];
  if (v11 || (WebCore::FloatingObjects::computePlacedFloatsTree(a1), v11 = (uint64_t *)a1[3], v13 = a2, v11))
  {
    WebCore::PODIntervalTree<WebCore::LayoutUnit,WebCore::FloatingObject *>::searchForOverlapsFrom<WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)2>>(*v11, (uint64_t)&v17);
    v13 = v21;
    v10 = v18;
  }
  v17 = off_1E341E460;
  v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, v12);
    else
      --*(_DWORD *)v10;
  }
  if ((int)v13 >= (int)a2)
    return a2;
  else
    return v13;
}

_QWORD *WebCore::ComputeFloatOffsetForLineLayoutAdapter<(WebCore::FloatingObject::Type)2>::~ComputeFloatOffsetForLineLayoutAdapter(_QWORD *a1, void *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = off_1E341E460;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  return a1;
}

uint64_t WebCore::FloatingObjects::shiftFloatsBy(uint64_t result, int a2)
{
  int v2;
  int v3;
  int v4;
  _QWORD *i;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  if (a2 == 0x80000000)
    v2 = 0x7FFFFFFF;
  else
    v2 = -a2;
  if (*(_BYTE *)(result + 40))
    v3 = 0;
  else
    v3 = v2;
  if (*(_BYTE *)(result + 40))
    v4 = a2;
  else
    v4 = 0;
  for (i = *(_QWORD **)(result + 8); i; i = (_QWORD *)i[2])
  {
    v6 = (uint64_t *)*i;
    v7 = *(_DWORD *)(*i + 8);
    v8 = *(_DWORD *)(*i + 12);
    v9 = __OFADD__(v7, v3);
    v10 = v7 + v3;
    v11 = (v7 >> 31) + 0x7FFFFFFF;
    if (!v9)
      v11 = v10;
    v9 = __OFADD__(v8, v4);
    v12 = v8 + v4;
    v13 = (v8 >> 31) + 0x7FFFFFFF;
    if (!v9)
      v13 = v12;
    *((_DWORD *)v6 + 2) = v11;
    *((_DWORD *)v6 + 3) = v13;
    v14 = *v6;
    if (v14)
      v14 = *(_QWORD *)(v14 + 8);
    v15 = *(_DWORD *)(v14 + 152);
    v16 = *(_DWORD *)(v14 + 156);
    v9 = __OFADD__(v15, v3);
    v17 = v15 + v3;
    v18 = (v15 >> 31) + 0x7FFFFFFF;
    if (!v9)
      v18 = v17;
    v9 = __OFADD__(v16, v4);
    v19 = v16 + v4;
    v20 = (v16 >> 31) + 0x7FFFFFFF;
    if (!v9)
      v20 = v19;
    *(_DWORD *)(v14 + 152) = v18;
    *(_DWORD *)(v14 + 156) = v20;
  }
  return result;
}

uint64_t *WebCore::GlyphDisplayListCache::singleton(WebCore::GlyphDisplayListCache *this)
{
  {
    WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
    qword_1EE2F92D8 = 0;
    qword_1EE2F92E0 = 0;
  }
  return &WebCore::GlyphDisplayListCache::singleton(void)::cache;
}

WTF **WebCore::GlyphDisplayListCache::clear(WebCore::GlyphDisplayListCache *this, void *a2)
{
  uint64_t v3;
  WTF **result;

  v3 = *(_QWORD *)this;
  if (v3)
  {
    *(_QWORD *)this = 0;
    WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::deallocateTable(v3, a2);
  }
  result = (WTF **)*((_QWORD *)this + 1);
  if (result)
  {
    *((_QWORD *)this + 1) = 0;
    return (WTF **)WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(result, a2);
  }
  return result;
}

_DWORD *WebCore::GlyphDisplayListCache::getDisplayList<WebCore::LegacyInlineTextBox>(WTF::MemoryPressureHandler *a1, WTF *a2, uint64_t a3, _BYTE *a4, WTF *a5, uint64_t a6)
{
  WTF::MemoryPressureHandler *v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  WTF::MemoryPressureHandler *v22;
  WTF *v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  double v39;
  long double v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  WTF *v48;
  float v49;
  float v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  BOOL v55;
  uint64_t v56;
  WTF *v58;
  void *v59;
  WTF *v60;
  void *v61;
  WTF *v62;
  WebCore::GlyphDisplayListCacheEntry *v63;
  WTF *v64;
  WTF *v65;
  void *v66;
  int v67;
  WTF *v68;
  void *v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  WTF *v73;
  WebCore::GlyphDisplayListCacheEntry *v74;
  WTF *v75;
  float v76;
  int v77;
  int v78;
  char v79;
  long double v80;
  long double v81;
  long double v82;
  long double v83;

  v11 = a1;
  v12 = WTF::MemoryPressureHandler::singleton(a1);
  v14 = atomic_load((unsigned __int8 *)(v12 + 4));
  if (v14 == 2 || *(_BYTE *)(v12 + 7) != 0)
  {
    v16 = *((_QWORD *)v11 + 1);
    if (v16 && *(_DWORD *)(v16 - 12))
      WebCore::GlyphDisplayListCache::clear(v11, v13);
    return 0;
  }
  v19 = *(_QWORD *)(a3 + 216);
  if (v19)
  {
    ++*(_DWORD *)v19;
    v20 = *(_DWORD *)(v19 + 20);
    if (v20)
    {
      v72 = a3;
      v21 = a4;
      v22 = v11;
      v23 = a2;
      v24 = a5;
      v25 = *(unsigned int **)(v19 + 8);
      v26 = &v25[10 * v20];
      while (1)
      {
        v27 = v25[3];
        if ((_DWORD)v27)
          break;
LABEL_17:
        v25 += 10;
        if (v25 == v26)
        {
          v30 = 0;
          goto LABEL_19;
        }
      }
      v28 = 16 * v27;
      v29 = (_QWORD *)(*(_QWORD *)v25 + 8);
      while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v29 + 24))(*v29))
      {
        v29 += 2;
        v28 -= 16;
        if (!v28)
          goto LABEL_17;
      }
      v30 = 1;
LABEL_19:
      a5 = v24;
      a2 = v23;
      v11 = v22;
      a4 = v21;
      a3 = v72;
    }
    else
    {
      v30 = 0;
    }
    if (*(_DWORD *)v19 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v19, v13);
      WTF::fastFree(v65, v66);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  else
  {
    v30 = 0;
  }
  v17 = 0;
  if ((v30 & 1) == 0 && *(_QWORD *)(a3 + 216))
  {
    if ((*((_WORD *)a2 + 26) & 0x4000) != 0)
    {
      v31 = *(_QWORD *)v11;
      if (*(_QWORD *)v11)
      {
        v32 = *(_DWORD *)(v31 - 8);
        v33 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
        v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
        v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
        v36 = v32 & ((v35 >> 31) ^ v35);
        v37 = *(WTF **)(v31 + 16 * v36);
        if (v37 == a2)
        {
LABEL_28:
          v38 = *(_QWORD *)(v31 + 16 * v36 + 8);
          if (v38)
          {
            v17 = *(_DWORD **)(v38 + 16);
            if (v17)
              return v17;
          }
        }
        else
        {
          v67 = 1;
          while (v37)
          {
            v36 = ((_DWORD)v36 + v67) & v32;
            v37 = *(WTF **)(v31 + 16 * v36);
            ++v67;
            if (v37 == a2)
              goto LABEL_28;
          }
        }
      }
    }
    if (!*(_BYTE *)(*(_QWORD *)(a6 + 64) + 284)
      && !*((_BYTE *)v11 + 16)
      && *(_QWORD *)v11
      && *(_DWORD *)(*(_QWORD *)v11 - 12) > 0x7FFu)
    {
      return 0;
    }
    v75 = a5;
    (*(void (**)(long double *__return_ptr, _BYTE *, _QWORD))(*(_QWORD *)a4 + 672))(&v80, a4, 0);
    v39 = hypot(v80, v81);
    v40 = hypot(v82, v83);
    v41 = *((_QWORD *)v11 + 1);
    v42 = v39;
    *(float *)&v40 = v40;
    v76 = v42;
    v77 = LODWORD(v40);
    v78 = *(_DWORD *)(a3 + 224);
    v79 = a4[344];
    if (!v41)
    {
LABEL_44:
      WebCore::FontCascade::displayListForTextRun(a3, (uint64_t)a4);
      if (v75)
      {
        v47 = WTF::fastMalloc((WTF *)0x50);
        *(_DWORD *)v47 = 1;
        v48 = v75;
        v75 = 0;
        *(_QWORD *)(v47 + 8) = 0;
        *(_QWORD *)(v47 + 16) = v48;
        WebCore::TextRun::isolatedCopy(a5, v47 + 24);
        (*(void (**)(long double *__return_ptr, _BYTE *, _QWORD))(*(_QWORD *)a4 + 672))(&v80, a4, 0);
        v49 = hypot(v80, v81);
        v50 = hypot(v82, v83);
        *(float *)(v47 + 64) = v49;
        *(float *)(v47 + 68) = v50;
        *(_DWORD *)(v47 + 72) = *(_DWORD *)(a3 + 224);
        *(_BYTE *)(v47 + 76) = a4[344];
        v74 = (WebCore::GlyphDisplayListCacheEntry *)v47;
        v17 = *(_DWORD **)(v47 + 16);
        v51 = v17[3];
        if (v51)
        {
          v52 = 360 * v51;
          v53 = (unsigned int *)(*(_QWORD *)v17 + 352);
          while (1)
          {
            v54 = *v53;
            if (*v53 != 20)
            {
              v55 = v54 > 0x3B;
              v56 = (1 << v54) & 0x800200042401006;
              if (v55 || v56 == 0)
                break;
            }
            v53 += 90;
            v52 -= 360;
            if (!v52)
              goto LABEL_56;
          }
        }
        else
        {
LABEL_56:
          v58 = *(WTF **)(v47 + 8);
          if (!v58)
          {
            v58 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v58 = 1;
            *((_QWORD *)v58 + 1) = v47;
            v60 = *(WTF **)(v47 + 8);
            *(_QWORD *)(v47 + 8) = v58;
            if (v60)
            {
              if (*(_DWORD *)v60 == 1)
              {
                WTF::fastFree(v60, v59);
                v58 = *(WTF **)(v47 + 8);
              }
              else
              {
                --*(_DWORD *)v60;
              }
            }
          }
          ++*(_DWORD *)v58;
          v73 = v58;
          WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::add((uint64_t *)v11 + 1, &v73, (uint64_t)&v80);
          v62 = v73;
          v73 = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 1)
              WTF::fastFree(v62, v61);
            else
              --*(_DWORD *)v62;
          }
        }
        *((_WORD *)a2 + 26) |= 0x4000u;
        v73 = a2;
        WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>((uint64_t *)v11, (uint64_t *)&v73, &v74, (uint64_t)&v80);
        v63 = v74;
        v74 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 1)
          {
            WebCore::GlyphDisplayListCacheEntry::~GlyphDisplayListCacheEntry(v63);
            WTF::fastFree(v70, v71);
          }
          else
          {
            --*(_DWORD *)v63;
          }
        }
        v64 = v75;
        v75 = 0;
        if (v64)
          std::default_delete<WebCore::DisplayList::DisplayList>::operator()[abi:sn180100]((int)&v75, v64);
        return v17;
      }
      return 0;
    }
    v43 = WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::lookup<WTF::HashSetTranslatorAdapter<WebCore::GlyphDisplayListCacheKeyTranslator>,WebCore::GlyphDisplayListCacheKey>((uint64_t *)v11 + 1, (uint64_t *)&v75);
    v44 = *((_QWORD *)v11 + 1);
    if (v43)
    {
      if (!v44)
        goto LABEL_40;
    }
    else
    {
      if (!v44)
        goto LABEL_44;
      v43 = v44 + 8 * *(unsigned int *)(v44 - 4);
    }
    v44 += 8 * *(unsigned int *)(v44 - 4);
LABEL_40:
    if (v44 != v43)
    {
      v45 = *(WTF **)(*(_QWORD *)v43 + 8);
      ++*(_DWORD *)v45;
      v74 = a2;
      v75 = v45;
      v17 = (_DWORD *)*((_QWORD *)v45 + 2);
      *((_WORD *)a2 + 26) |= 0x4000u;
      WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>((uint64_t *)v11, (uint64_t *)&v74, &v75, (uint64_t)&v80);
      v46 = v75;
      v75 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 1)
        {
          WebCore::GlyphDisplayListCacheEntry::~GlyphDisplayListCacheEntry(v46);
          WTF::fastFree(v68, v69);
        }
        else
        {
          --*(_DWORD *)v46;
        }
      }
      return v17;
    }
    goto LABEL_44;
  }
  return v17;
}

uint64_t WebCore::GlyphDisplayListCache::getIfExists(WebCore::GlyphDisplayListCache *this, const WebCore::InlineDisplay::Box *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const WebCore::InlineDisplay::Box *v8;
  uint64_t v9;
  int v11;
  WebCore::GlyphDisplayListCacheEntry *v12;

  if ((*((_WORD *)a2 + 25) & 0x100) == 0)
    return 0;
  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_11;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(const WebCore::InlineDisplay::Box **)(v2 + 16 * v7);
  if (v8 != a2)
  {
    v11 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v11) & v3;
      v8 = *(const WebCore::InlineDisplay::Box **)(v2 + 16 * v7);
      ++v11;
      if (v8 == a2)
        goto LABEL_4;
    }
LABEL_11:
    v12 = 0;
    WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>::~Ref(&v12);
    return 0;
  }
LABEL_4:
  v9 = *(_QWORD *)(v2 + 16 * v7 + 8);
  if (!v9)
    return 0;
  return *(_QWORD *)(v9 + 16);
}

uint64_t WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WebCore::GlyphDisplayListCacheEntry *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v19;
  WTF *v20;
  void *v21;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ~(*a2 << 32) + *a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
  v9 = *(_QWORD *)(v2 + 16 * v8);
  if (v9 != *a2)
  {
    v19 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v19) & v4;
      v9 = *(_QWORD *)(v2 + 16 * v8);
      ++v19;
      if (v9 == *a2)
        goto LABEL_3;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_3:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v10 = (_QWORD *)(v2 + 16 * v8);
  v11 = (WebCore::GlyphDisplayListCacheEntry *)v10[1];
  *v10 = -1;
  v10[1] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::GlyphDisplayListCacheEntry::~GlyphDisplayListCacheEntry(v11);
      WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v12 = *a1;
  if (*a1)
    v13 = *(_DWORD *)(v12 - 12) - 1;
  else
    v13 = -1;
  *(_DWORD *)(v12 - 12) = v13;
  v14 = *a1;
  if (*a1)
  {
    v15 = 6 * *(_DWORD *)(v14 - 12);
    v16 = *(_DWORD *)(v14 - 4);
    if (v15 < v16 && v16 >= 9)
      WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(a1, v16 >> 1, 0);
  }
  return 1;
}

void WebCore::GlyphDisplayListCacheEntry::~GlyphDisplayListCacheEntry(WebCore::GlyphDisplayListCacheEntry *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  {
    WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
    qword_1EE2F92D8 = 0;
    qword_1EE2F92E0 = 0;
  }
  WTF::HashSet<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>(&qword_1EE2F92D8, (uint64_t)this);
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    std::default_delete<WebCore::DisplayList::DisplayList>::operator()[abi:sn180100]((_DWORD)this + 16, v4);
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
        WTF::fastFree(v6, v4);
      else
        --*(_DWORD *)v6;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WTF::HashSet<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  void *v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  WTF **v11;
  WTF **v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::computeHash<WebCore::GlyphDisplayListCacheEntry>(a2);
  for (i = 0; ; v6 = i + v9)
  {
    v9 = v6 & v5;
    v10 = *(_QWORD *)(v2 + 8 * v9);
    if (v10 != -1)
    {
      if (!v10)
      {
        v12 = (WTF **)*a1;
        if (!*a1)
          return 0;
        v13 = *((unsigned int *)v12 - 1);
        v11 = &v12[v13];
        goto LABEL_9;
      }
      if (*(_QWORD *)(v10 + 8) == a2)
        break;
    }
    ++i;
  }
  v11 = (WTF **)(v2 + 8 * v9);
  v12 = (WTF **)*a1;
  if (!*a1)
    goto LABEL_10;
  v13 = *((unsigned int *)v12 - 1);
LABEL_9:
  v12 += v13;
  if (v12 == v11)
    return 0;
LABEL_10:
  if (v12 != v11)
  {
    v14 = *v11;
    *v11 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, v7);
      else
        --*(_DWORD *)v14;
    }
    *v11 = (WTF *)-1;
    ++*(_DWORD *)(*a1 - 16);
    v15 = *a1;
    if (*a1)
      v16 = *(_DWORD *)(v15 - 12) - 1;
    else
      v16 = -1;
    *(_DWORD *)(v15 - 12) = v16;
    v17 = *a1;
    if (*a1)
    {
      v18 = 6 * *(_DWORD *)(v17 - 12);
      v19 = *(_DWORD *)(v17 - 4);
      if (v18 < v19 && v19 >= 9)
        WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v19 >> 1, 0);
    }
  }
  return 1;
}

uint64_t WebCore::removeBoxFromGlyphDisplayListCache(WebCore *this, const WebCore::LegacyInlineTextBox *a2)
{
  WebCore *v3;

  {
    WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
    qword_1EE2F92D8 = 0;
    qword_1EE2F92E0 = 0;
  }
  v3 = this;
  return WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v3);
}

void WebCore::Grid::ensureGridSize(WebCore::Grid *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  WTF *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *((unsigned int *)this + 25);
  if ((_DWORD)v6)
    v7 = *(_DWORD *)(*((_QWORD *)this + 11) + 12);
  else
    v7 = 0;
  if (v6 < a2)
  {
    v8 = *((unsigned int *)this + 24);
    v9 = (WTF *)*((_QWORD *)this + 11);
    if (v8 < a2)
    {
      v10 = v8 + (v8 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= a2)
        v12 = a2;
      else
        v12 = v11;
      if (v12 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v13 = (WTF *)((char *)v9 + 16 * v6);
      v14 = WTF::fastMalloc((WTF *)(16 * v12));
      *((_DWORD *)this + 24) = v12;
      *((_QWORD *)this + 11) = v14;
      WTF::VectorMover<false,WTF::Vector<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v9, v13, v14);
      if (v9)
      {
        if (*((WTF **)this + 11) == v9)
        {
          *((_QWORD *)this + 11) = 0;
          *((_DWORD *)this + 24) = 0;
        }
        WTF::fastFree(v9, v15);
        v9 = (WTF *)*((_QWORD *)this + 11);
      }
      else
      {
        v9 = (WTF *)*((_QWORD *)this + 11);
      }
    }
    if (v9)
    {
      v16 = *((unsigned int *)this + 25);
      if ((_DWORD)v16 != a2)
        bzero((char *)v9 + 16 * v16, (16 * a2 - 16 * v16) & 0xFFFFFFFFFFFFFFF0);
    }
    *((_DWORD *)this + 25) = a2;
  }
  else if (!a2)
  {
    return;
  }
  if (v7 < a3)
  {
    v17 = *((_QWORD *)this + 11);
    if (*(_DWORD *)(v17 + 8) < a3)
      WTF::Vector<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, a3);
    if (*(_QWORD *)v17)
    {
      v18 = *(unsigned int *)(v17 + 12);
      if ((_DWORD)v18 != a3)
      {
        v19 = 3 * v18;
        v20 = 24 * a3 - 24 * v18;
        v21 = *(_QWORD *)v17 + 8 * v19 + 16;
        do
        {
          *(_QWORD *)(v21 - 16) = v21;
          *(_QWORD *)(v21 - 8) = 1;
          v21 += 24;
          v20 -= 24;
        }
        while (v20);
      }
    }
    *(_DWORD *)(v17 + 12) = a3;
  }
}

WTF *WebCore::Grid::insert@<X0>(WebCore::Grid *this@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X8>)
{
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  __int128 v51;
  uint64_t v52;

  *(_OWORD *)a4 = *(_OWORD *)a3;
  *((_QWORD *)a4 + 2) = *(_QWORD *)(a3 + 16);
  v6 = *((_DWORD *)this + 19);
  if (v6)
  {
    v45 = a4[3] & ~((int)a4[3] >> 31);
    if ((int)a4[4] < v6)
      v6 = a4[4];
    if (v6 <= 1)
      v6 = 1;
    a4[3] = v45;
    a4[4] = v6;
    if (v45 >= v6)
      a4[3] = v6 - 1;
  }
  v7 = *((_DWORD *)this + 18);
  if (v7)
  {
    v46 = *a4 & ~((int)*a4 >> 31);
    if ((int)a4[1] < v7)
      v7 = a4[1];
    if (v7 <= 1)
      v8 = 1;
    else
      v8 = v7;
    *a4 = v46;
    a4[1] = v8;
    if (v46 >= v8)
      *a4 = v8 - 1;
  }
  else
  {
    v8 = a4[1];
  }
  v9 = a4[4];
  WebCore::Grid::ensureGridSize(this, a4[4], v8);
  v10 = a4[3];
  v11 = (uint64_t)a2;
  if ((_DWORD)v10 != (_DWORD)v9)
  {
    v12 = *a4;
    v13 = v8 - v12;
    if (v8 != (_DWORD)v12)
    {
      v14 = 24 * *a4;
      while (1)
      {
        if (v10 >= *((unsigned int *)this + 25))
          goto LABEL_58;
        v15 = *((_QWORD *)this + 11);
        v16 = v15 + 16 * v10;
        v17 = *(unsigned int *)(v15 + 12);
        if (*(_DWORD *)(v16 + 8) < v17)
        {
          v30 = v12;
          v31 = v13;
          v32 = v14;
          WTF::Vector<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, v17);
          v14 = v32;
          v13 = v31;
          v12 = v30;
          v11 = (uint64_t)a2;
        }
        if (*(_QWORD *)v16)
        {
          v18 = *(unsigned int *)(v16 + 12);
          if ((_DWORD)v18 != (_DWORD)v17)
          {
            v27 = 3 * v18;
            v28 = 24 * v17 - 24 * v18;
            v29 = *(_QWORD *)v16 + 8 * v27 + 16;
            do
            {
              *(_QWORD *)(v29 - 16) = v29;
              *(_QWORD *)(v29 - 8) = 1;
              v29 += 24;
              v28 -= 24;
            }
            while (v28);
          }
        }
        *(_DWORD *)(v16 + 12) = v17;
        v19 = v13;
        v20 = v14;
        v21 = v12;
        do
        {
          if (v10 >= *((unsigned int *)this + 25))
            goto LABEL_58;
          v22 = *((_QWORD *)this + 11) + 16 * v10;
          if (v21 >= *(unsigned int *)(v22 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x19632EBF8);
          }
          v23 = *(_QWORD *)v22 + v20;
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24 != *(_DWORD *)(v23 + 8))
          {
            v25 = *(_QWORD *)v23;
            v26 = *(_QWORD *)(v11 + 8);
            if (v26)
              goto LABEL_17;
            v47 = v14;
            v48 = v13;
            v49 = v12;
            v26 = WTF::fastCompactMalloc((WTF *)0x10);
            v11 = (uint64_t)a2;
            *(_DWORD *)v26 = 1;
            *(_QWORD *)(v26 + 8) = a2;
            v33 = (WTF *)a2[1];
            a2[1] = v26;
            if (v33)
            {
              if (*(_DWORD *)v33 != 1)
              {
                --*(_DWORD *)v33;
                goto LABEL_28;
              }
              WTF::fastFree(v33, a2);
              v12 = v49;
              v11 = (uint64_t)a2;
              v26 = a2[1];
              v13 = v48;
              v14 = v47;
              if (!v26)
              {
LABEL_18:
                *(_QWORD *)(v25 + 8 * v24) = v26;
                ++*(_DWORD *)(v23 + 12);
                goto LABEL_19;
              }
            }
            else
            {
LABEL_28:
              v12 = v49;
              v13 = v48;
              v14 = v47;
            }
LABEL_17:
            ++*(_DWORD *)v26;
            goto LABEL_18;
          }
          v42 = v12;
          v43 = v13;
          v44 = v14;
          WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderBox&>(*(_QWORD *)v22 + v20, a2);
          v14 = v44;
          v13 = v43;
          v12 = v42;
          v11 = (uint64_t)a2;
LABEL_19:
          ++v21;
          v20 += 24;
          --v19;
        }
        while (v19);
        if (++v10 == v9)
          goto LABEL_39;
      }
    }
    do
    {
      if (v10 >= *((unsigned int *)this + 25))
      {
LABEL_58:
        __break(0xC471u);
        JUMPOUT(0x19632EBF0);
      }
      v34 = *((_QWORD *)this + 11);
      v35 = v34 + 16 * v10;
      v36 = *(unsigned int *)(v34 + 12);
      if (*(_DWORD *)(v35 + 8) < v36)
      {
        WTF::Vector<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v35, v36);
        v11 = (uint64_t)a2;
      }
      if (*(_QWORD *)v35)
      {
        v37 = *(unsigned int *)(v35 + 12);
        if ((_DWORD)v37 != (_DWORD)v36)
        {
          v38 = 3 * v37;
          v39 = 24 * v36 - 24 * v37;
          v40 = *(_QWORD *)v35 + 8 * v38 + 16;
          do
          {
            *(_QWORD *)(v40 - 16) = v40;
            *(_QWORD *)(v40 - 8) = 1;
            v40 += 24;
            v39 -= 24;
          }
          while (v39);
        }
      }
      *(_DWORD *)(v35 + 12) = v36;
      ++v10;
    }
    while ((_DWORD)v9 != (_DWORD)v10);
  }
LABEL_39:
  v51 = *(_OWORD *)a4;
  v52 = *((_QWORD *)a4 + 2);
  return WebCore::Grid::setGridItemArea((uint64_t)this, v11, &v51);
}

WTF *WebCore::Grid::setGridItemArea(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t *v4;
  WTF *v5;
  void *v6;
  WTF *result;
  void *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;

  v4 = (uint64_t *)(a1 + 104);
  v5 = *(WTF **)(a2 + 8);
  if (!v5)
  {
    v5 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *((_QWORD *)v5 + 1) = a2;
    v10 = *(WTF **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v5;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WTF::fastFree(v10, v9);
        v5 = *(WTF **)(a2 + 8);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  ++*(_DWORD *)v5;
  v12 = v5;
  WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea&>(v4, (uint64_t *)&v12, a3, (uint64_t)&v11);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v6);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t *WebCore::Grid::cell(WebCore::Grid *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;

  {
    WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell = (uint64_t)&unk_1EE2F9300;
    qword_1EE2F92F8 = 1;
  }
  v3 = *((_DWORD *)this + 25);
  if (a2)
  {
    if (v3 <= a2)
    {
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x19632ED64);
    }
    if (*(_DWORD *)(*((_QWORD *)this + 11) + 16 * a2 + 12) <= a3)
      return &WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell;
  }
  if (v3 <= a2)
    goto LABEL_12;
  v4 = *((_QWORD *)this + 11) + 16 * a2;
  if (*(_DWORD *)(v4 + 12) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x19632ED6CLL);
  }
  return (uint64_t *)(*(_QWORD *)v4 + 24 * a3);
}

uint64_t WebCore::Grid::setAutoRepeatTracks(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 64) = a3;
  *(_DWORD *)(this + 68) = a2;
  return this;
}

uint64_t WebCore::Grid::isEmptyAutoRepeatTrack(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  _QWORD *v11;

  v3 = 120;
  if (!a2)
    v3 = 112;
  v4 = **(_QWORD **)(a1 + v3);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = ~((unint64_t)a3 << 32) + a3;
  v7 = 9 * (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) ^ (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  for (i = 1; ; ++i)
  {
    v11 = *(_QWORD **)(v4 + 8 * v9);
    if (v11 != (_QWORD *)-1)
    {
      if (!v11)
        return 0;
      if (*v11 == a3)
        break;
    }
    v9 = (v9 + i) & v5;
  }
  return 1;
}

uint64_t WebCore::Grid::gridItemSpan(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 104);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    for (i = 1; ; ++i)
    {
      v10 = v8;
      v11 = *(_QWORD *)(v3 + 32 * v8);
      if (v11 != -1)
      {
        if (!v11)
          goto LABEL_12;
        if (*(_QWORD *)(v11 + 8) == a2)
          break;
      }
      v8 = (v10 + i) & v4;
    }
    v12 = v3 + 32 * v10;
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(_QWORD *)(v12 + 20);
  }
  else
  {
LABEL_12:
    v16 = WebCore::GridPosition::gMaxPositionForTesting;
    if (!byte_1EE2F9580)
      v16 = 1000000;
    if (v16 >= 1)
      v17 = 1;
    else
      v17 = v16;
    if (-v16 > v17 - 1)
      v18 = -v16;
    else
      v18 = (v17 - 1);
    LODWORD(v19) = 1 - v16;
    if ((int)v19 <= v17)
      v19 = v17;
    else
      v19 = v19;
    v14 = v18 | (v19 << 32);
    v13 = v14;
  }
  if (a3)
    return v14;
  else
    return v13;
}

unint64_t WebCore::Grid::gridItemSpanIgnoringCollapsedTracks(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t result;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int j;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int k;
  _QWORD *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a1 + 104);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    for (i = 1; ; ++i)
    {
      v11 = v9;
      v12 = *(_QWORD *)(v4 + 32 * v9);
      if (v12 != -1)
      {
        if (!v12)
          goto LABEL_59;
        if (*(_QWORD *)(v12 + 8) == a2)
          break;
      }
      v9 = (v11 + i) & v5;
    }
    v13 = v4 + 32 * v11;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 20);
  }
  else
  {
LABEL_59:
    v37 = WebCore::GridPosition::gMaxPositionForTesting;
    if (!byte_1EE2F9580)
      v37 = 1000000;
    if (v37 >= 1)
      v38 = 1;
    else
      v38 = v37;
    if (-v37 > v38 - 1)
      v39 = -v37;
    else
      v39 = (v38 - 1);
    LODWORD(v40) = 1 - v37;
    if ((int)v40 <= v38)
      v40 = v38;
    else
      v40 = v40;
    v15 = v39 | (v40 << 32);
    v14 = v15;
  }
  if (a3)
    result = v15;
  else
    result = v14;
  if ((_DWORD)result)
  {
    v17 = 120;
    if (!a3)
      v17 = 112;
    v18 = *(uint64_t **)(a1 + v17);
    if (v18)
    {
      v19 = *v18;
      v20 = (result - 1);
      if ((_DWORD)result == 1)
      {
        if (!v19)
        {
LABEL_37:
          if (byte_1EE2F9580)
            LODWORD(v29) = WebCore::GridPosition::gMaxPositionForTesting;
          else
            LODWORD(v29) = 1000000;
          v30 = -(int)v29;
          if ((int)v29 >= 2)
            v35 = 2;
          else
            v35 = v29;
LABEL_49:
          v31 = v35 - 1;
LABEL_50:
          if (v30 > v31)
            v31 = -(int)v29;
          v36 = 1 - v29;
          if ((int)v29 >= HIDWORD(result) - (int)result)
            LODWORD(v29) = HIDWORD(result) - result;
          if (v36 <= (int)v29)
            v29 = v29;
          else
            v29 = v36;
          return v31 | (unint64_t)(v29 << 32);
        }
        v22 = *(_DWORD *)(v19 - 8);
      }
      else
      {
        v21 = result;
        if (!v19)
        {
LABEL_25:
          if (byte_1EE2F9580)
            LODWORD(v29) = WebCore::GridPosition::gMaxPositionForTesting;
          else
            LODWORD(v29) = 1000000;
          v30 = -(int)v29;
          v31 = v29 - 1;
          if ((int)v29 - 1 >= v21)
            v31 = v21;
          goto LABEL_50;
        }
        v22 = *(_DWORD *)(v19 - 8);
        v21 = result;
        do
        {
          v23 = (v20 + ~(v20 << 32)) ^ ((unint64_t)(v20 + ~(v20 << 32)) >> 22);
          v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          v26 = v22 & ((v25 >> 31) ^ v25);
          for (j = 1; ; ++j)
          {
            v28 = *(_QWORD **)(v19 + 8 * v26);
            if (v28 != (_QWORD *)-1)
            {
              if (!v28)
                goto LABEL_25;
              if (*v28 == v20)
                break;
            }
            v26 = (v26 + j) & v22;
          }
          v21 = v20--;
        }
        while ((_DWORD)v20);
      }
      v32 = v22 & 0x9C352659;
      for (k = 1; ; ++k)
      {
        v34 = *(_QWORD **)(v19 + 8 * v32);
        if (v34 != (_QWORD *)-1)
        {
          if (!v34)
            goto LABEL_37;
          if (!*v34)
            break;
        }
        v32 = (v32 + k) & v22;
      }
      if (byte_1EE2F9580)
        LODWORD(v29) = WebCore::GridPosition::gMaxPositionForTesting;
      else
        LODWORD(v29) = 1000000;
      v30 = -(int)v29;
      if ((int)v29 >= 1)
        v35 = 1;
      else
        v35 = v29;
      goto LABEL_49;
    }
  }
  return result;
}

uint64_t WebCore::Grid::setupGridForMasonryLayout(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF **v6;
  WTF *v7;

  v2 = this;
  if (*(_DWORD *)(this + 96))
  {
    v3 = *(unsigned int *)(this + 100);
    if ((_DWORD)v3)
    {
      WTF::VectorDestructor<true,WTF::Vector<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(*(WTF **)(this + 88), (WTF *)(*(_QWORD *)(this + 88) + 16 * v3));
      *(_DWORD *)(v2 + 100) = 0;
    }
    this = *(_QWORD *)(v2 + 88);
    if (this)
    {
      *(_QWORD *)(v2 + 88) = 0;
      *(_DWORD *)(v2 + 96) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  v4 = *(WTF ***)(v2 + 104);
  if (v4)
  {
    *(_QWORD *)(v2 + 104) = 0;
    v5 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = v4;
      do
      {
        v7 = *v6;
        if (*v6 != (WTF *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
              WTF::fastFree(v7, a2);
            else
              --*(_DWORD *)v7;
          }
        }
        v6 += 4;
        --v5;
      }
      while (v5);
    }
    return WTF::fastFree((WTF *)(v4 - 2), a2);
  }
  return this;
}

uint64_t WebCore::Grid::setNeedsItemsPlacement(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  void *v5;
  WTF **v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;

  v2 = this;
  *(_BYTE *)(this + 80) = (_BYTE)a2;
  if ((a2 & 1) != 0)
  {
    this = (uint64_t)WTF::VectorDestructor<true,WTF::Vector<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(*(WTF **)(this + 88), (WTF *)(*(_QWORD *)(this + 88) + 16 * *(unsigned int *)(this + 100)));
    *(_DWORD *)(v2 + 100) = 0;
    v6 = *(WTF ***)(v2 + 104);
    if (v6)
    {
      *(_QWORD *)(v2 + 104) = 0;
      v7 = *((unsigned int *)v6 - 1);
      if ((_DWORD)v7)
      {
        v8 = v6;
        do
        {
          v9 = *v8;
          if (*v8 != (WTF *)-1)
          {
            *v8 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 1)
                WTF::fastFree(v9, v5);
              else
                --*(_DWORD *)v9;
            }
          }
          v8 += 4;
          --v7;
        }
        while (v7);
      }
      this = WTF::fastFree((WTF *)(v6 - 2), v5);
    }
    *(_QWORD *)(v2 + 56) = 0;
    v10 = *(WTF **)(v2 + 112);
    *(_QWORD *)(v2 + 112) = 0;
    if (v10)
    {
      v11 = (WTF *)*((_QWORD *)v10 + 1);
      if (v11)
      {
        do
        {
          v12 = (WTF *)*((_QWORD *)v11 + 2);
          WTF::fastFree(v11, v5);
          v11 = v12;
        }
        while (v12);
      }
      if (*(_QWORD *)v10)
        WTF::fastFree((WTF *)(*(_QWORD *)v10 - 16), v5);
      this = WTF::fastFree(v10, v5);
    }
    v13 = *(WTF **)(v2 + 120);
    *(_QWORD *)(v2 + 120) = 0;
    if (v13)
    {
      v14 = (WTF *)*((_QWORD *)v13 + 1);
      if (v14)
      {
        do
        {
          v15 = (WTF *)*((_QWORD *)v14 + 2);
          WTF::fastFree(v14, v5);
          v14 = v15;
        }
        while (v15);
      }
      if (*(_QWORD *)v13)
        WTF::fastFree((WTF *)(*(_QWORD *)v13 - 16), v5);
      this = WTF::fastFree(v13, v5);
    }
    *(_QWORD *)(v2 + 64) = 0;
    *(_QWORD *)(v2 + 72) = 0;
  }
  else
  {
    v3 = *(unsigned int *)(this + 100);
    if (*(_DWORD *)(this + 96) > v3)
    {
      v4 = *(WTF **)(this + 88);
      if ((_DWORD)v3)
      {
        if (v3 >> 28)
        {
          __break(0xC471u);
          return this;
        }
        this = WTF::fastMalloc((WTF *)(16 * v3));
        *(_DWORD *)(v2 + 96) = v3;
        *(_QWORD *)(v2 + 88) = this;
        if ((WTF *)this != v4)
          this = (uint64_t)WTF::VectorMover<false,WTF::Vector<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v4, (WTF *)((char *)v4 + 16 * v3), this);
      }
      if (v4)
      {
        if (*(WTF **)(v2 + 88) == v4)
        {
          *(_QWORD *)(v2 + 88) = 0;
          *(_DWORD *)(v2 + 96) = 0;
        }
        return WTF::fastFree(v4, a2);
      }
    }
  }
  return this;
}

uint64_t WebCore::GridIterator::nextGridItem(WebCore::GridIterator *this)
{
  uint64_t v1;
  unsigned int v2;
  char *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)this;
  v2 = *(_DWORD *)(*(_QWORD *)this + 100);
  if (*((_BYTE *)this + 8))
  {
    if (!v2)
      return 0;
    v3 = (char *)this + 16;
    v4 = *(_DWORD *)(*(_QWORD *)(v1 + 88) + 12);
  }
  else
  {
    v3 = (char *)this + 12;
    v4 = *(_DWORD *)(*(_QWORD *)this + 100);
  }
  if (*(_DWORD *)v3 >= v4)
    return 0;
  v6 = *((unsigned int *)this + 3);
  v5 = *((_DWORD *)this + 4);
  {
    WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell = (uint64_t)&unk_1EE2F9300;
    qword_1EE2F92F8 = 1;
  }
  if ((_DWORD)v6)
  {
    if (v2 <= v6)
    {
LABEL_34:
      __break(0xC471u);
      JUMPOUT(0x19632F5C0);
    }
    v7 = *(_QWORD *)(v1 + 88);
    if (*(_DWORD *)(v7 + 16 * v6 + 12) <= v5)
    {
      v9 = &WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell;
      goto LABEL_11;
    }
  }
  if (v2 <= v6)
    goto LABEL_34;
  v7 = *(_QWORD *)(v1 + 88);
  v8 = v7 + 16 * v6;
  if (*(_DWORD *)(v8 + 12) <= v5)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x19632F5C8);
  }
  v9 = (uint64_t *)(*(_QWORD *)v8 + 24 * v5);
LABEL_11:
  v10 = *((_DWORD *)this + 5);
  if (*((_DWORD *)v9 + 3) <= v10)
  {
    *((_DWORD *)this + 5) = 0;
    v11 = *(_DWORD *)v3 + 1;
    *(_DWORD *)v3 = v11;
    if (v11 < v4)
    {
      while (1)
      {
        v13 = *((unsigned int *)this + 3);
        v12 = *((_DWORD *)this + 4);
        v14 = *(_DWORD *)(v1 + 100);
        if (!(_DWORD)v13)
          goto LABEL_39;
        if (v14 <= v13)
          goto LABEL_34;
        if (*(_DWORD *)(v7 + 16 * v13 + 12) <= v12)
        {
          v9 = &WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell;
        }
        else
        {
LABEL_39:
          if (v14 <= v13)
            goto LABEL_34;
          v15 = v7 + 16 * v13;
          if (*(_DWORD *)(v15 + 12) <= v12)
            goto LABEL_33;
          v9 = (uint64_t *)(*(_QWORD *)v15 + 24 * v12);
        }
        if (*((_DWORD *)v9 + 3))
          break;
        v16 = 0;
        *((_DWORD *)this + 5) = 0;
        *(_DWORD *)v3 = ++v11;
        if (v11 >= v4)
          return v16;
      }
      v10 = 0;
      goto LABEL_19;
    }
    return 0;
  }
LABEL_19:
  *((_DWORD *)this + 5) = v10 + 1;
  v16 = *(_QWORD *)(*v9 + 8 * v10);
  if (v16)
    return *(_QWORD *)(v16 + 8);
  return v16;
}

uint64_t *WebCore::GridIterator::nextEmptyGridArea@<X0>(uint64_t *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int i;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  int v30;
  int v31;
  unsigned int *v32;

  v5 = *this;
  v6 = *(_QWORD *)(*this + 104);
  if (!v6 || !*(_DWORD *)(v6 - 12))
    goto LABEL_57;
  v7 = this;
  if (*((_BYTE *)this + 8))
    v8 = a2;
  else
    v8 = a3;
  if (*((_BYTE *)this + 8))
    v9 = a3;
  else
    v9 = a2;
  v10 = *(_DWORD *)(v5 + 100);
  if (*((_BYTE *)this + 8))
  {
    if (!v10)
      goto LABEL_57;
    v11 = (unsigned int *)(this + 2);
    v10 = *(_DWORD *)(*(_QWORD *)(v5 + 88) + 12);
  }
  else
  {
    v11 = (unsigned int *)this + 3;
  }
  for (i = *v11; i < v10; *v32 = i)
  {
    v13 = *((_DWORD *)v7 + 3);
    v14 = *(_DWORD *)(*v7 + 100);
    if (v14 >= v13 + v8)
      v15 = v13 + v8;
    else
      v15 = *(_DWORD *)(*v7 + 100);
    if (v14)
      v16 = *(_DWORD *)(*(_QWORD *)(*v7 + 88) + 12);
    else
      v16 = 0;
    v17 = *((_DWORD *)v7 + 4);
    if (v16 >= v17 + v9)
      v18 = v17 + v9;
    else
      v18 = v16;
    if (v13 >= v15 || v17 >= v18)
      goto LABEL_31;
    v20 = 0;
    v32 = v11;
    while (1)
    {
      v21 = *((_DWORD *)v7 + 4);
      if (v21 < v18)
        break;
LABEL_30:
      v20 = ++v13 >= v15;
      v11 = v32;
      if (v13 == v15)
        goto LABEL_31;
    }
    while (1)
    {
      this = WebCore::Grid::cell((WebCore::Grid *)*v7, v13, v21);
      if (*((_DWORD *)this + 3))
        break;
      if (v18 == ++v21)
        goto LABEL_30;
    }
    v11 = v32;
    if (v20)
    {
LABEL_31:
      v22 = *((_DWORD *)v7 + 3);
      LODWORD(v23) = *((_DWORD *)v7 + 4);
      LODWORD(v24) = v22 + v8;
      if (byte_1EE2F9580)
        LODWORD(v25) = WebCore::GridPosition::gMaxPositionForTesting;
      else
        LODWORD(v25) = 1000000;
      v26 = -(int)v25;
      if ((int)v25 - 1 >= v22)
        v27 = *((_DWORD *)v7 + 3);
      else
        v27 = v25 - 1;
      if (v26 > v27)
        v28 = -(int)v25;
      else
        v28 = v27;
      v29 = 1;
      v30 = 1 - v25;
      if ((int)v25 < (int)v24)
        LODWORD(v24) = v25;
      if (v30 <= (int)v24)
        v24 = v24;
      else
        v24 = v30;
      v31 = v23 + v9;
      if ((int)v25 - 1 < (int)v23)
        LODWORD(v23) = v25 - 1;
      if (v26 > (int)v23)
        v23 = -(int)v25;
      else
        v23 = v23;
      if ((int)v25 >= v31)
        LODWORD(v25) = v31;
      if (v30 <= (int)v25)
        v25 = v25;
      else
        v25 = v30;
      ++*v11;
      *(_QWORD *)a4 = v23 | (v25 << 32);
      *(_DWORD *)(a4 + 8) = 1;
      *(_QWORD *)(a4 + 12) = v28 | (v24 << 32);
      *(_DWORD *)(a4 + 20) = 1;
      goto LABEL_56;
    }
    i = *v32 + 1;
  }
LABEL_57:
  v29 = 0;
  *(_BYTE *)a4 = 0;
LABEL_56:
  *(_BYTE *)(a4 + 24) = v29;
  return this;
}

uint64_t WebCore::GridIterator::createForSubgrid@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;

  v4 = *(_QWORD *)(result + 32);
  if (v4 && (v4 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if (*(_BYTE *)(v4 + 46) != 12)
    {
      __break(0xC471u);
      JUMPOUT(0x19632F960);
    }
    v5 = 0;
    ++*(_DWORD *)(v4 + 16);
  }
  else
  {
    v5 = 1;
  }
  v6 = (_DWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 8))
    v6 = (_DWORD *)(a2 + 12);
  v7 = *v6 - a3;
  if (((*(_BYTE *)(result + 21) & 0x10) == 0) == ((*(_BYTE *)(v4 + 21) & 0x10) == 0))
    v8 = *(unsigned __int8 *)(a2 + 8);
  else
    v8 = *(unsigned __int8 *)(a2 + 8) == 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v9 = (unsigned __int16)*(_DWORD *)(v4 + 124) >> 13;
    v16 = 2;
    switch((unsigned __int16)*(_DWORD *)(v4 + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_13;
      case 3:
      case 5:
        v9 = 3;
        goto LABEL_13;
      case 4:
        goto LABEL_14;
      default:
        v9 = 0;
LABEL_13:
        v16 = v9;
LABEL_14:
        v10 = (v16 & 0xFFFFFFFD) == 1;
        if (v8)
          goto LABEL_15;
        goto LABEL_20;
    }
  }
  v10 = (*(unsigned __int8 *)(v4 + 123) >> 2) & 1;
  if (v8)
  {
LABEL_15:
    switch((unsigned __int16)*(_DWORD *)(result + 124) >> 13)
    {
      case 1:
      case 3:
      case 5:
        if ((v10 & 1) == 0)
          goto LABEL_17;
        break;
      default:
        if ((v10 & 1) != 0)
        {
LABEL_17:
          v11 = *(_QWORD *)(result + 328);
          v12 = *(_DWORD *)(v11 + 100);
          if (v8 == 1)
            goto LABEL_24;
          goto LABEL_22;
        }
        break;
    }
  }
  else
  {
LABEL_20:
    if (v10 != (*(_BYTE *)(result + 123) & 4) >> 2)
    {
      v11 = *(_QWORD *)(result + 328);
      v12 = *(_DWORD *)(v11 + 100);
LABEL_22:
      if (v12)
        v12 = *(_DWORD *)(*(_QWORD *)(v11 + 88) + 12);
LABEL_24:
      v7 = v12 + ~v7;
    }
  }
  *(_QWORD *)a4 = *(_QWORD *)(result + 328);
  *(_BYTE *)(a4 + 8) = v8;
  v13 = v8 == 0;
  if (v8)
    v14 = v7;
  else
    v14 = 0;
  if (!v13)
    v7 = 0;
  *(_DWORD *)(a4 + 12) = v14;
  *(_DWORD *)(a4 + 16) = v7;
  *(_DWORD *)(a4 + 20) = 0;
  if ((v5 & 1) == 0)
  {
    v15 = *(_DWORD *)(v4 + 16);
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x19632F940);
    }
    *(_DWORD *)(v4 + 16) = v15 - 1;
  }
  return result;
}

uint64_t WebCore::GridLayoutFunctions::isSubgridReversedDirection(uint64_t a1, _BOOL4 a2, uint64_t a3)
{
  _BOOL4 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  if (((*(_BYTE *)(a3 + 21) & 0x10) == 0) == ((*(_BYTE *)(a1 + 21) & 0x10) == 0))
    v3 = a2;
  else
    v3 = !a2;
  if (a2)
  {
    v4 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    v5 = 2;
    switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_7;
      case 3:
      case 5:
        v4 = 3;
        goto LABEL_7;
      case 4:
        goto LABEL_8;
      default:
        v4 = 0;
LABEL_7:
        v5 = v4;
LABEL_8:
        v6 = (v5 & 0xFFFFFFFD) == 1;
        if (v3)
          goto LABEL_9;
        goto LABEL_14;
    }
  }
  v6 = (*(unsigned __int8 *)(a1 + 123) >> 2) & 1;
  if (v3)
  {
LABEL_9:
    v7 = (unsigned __int16)*(_DWORD *)(a3 + 124) >> 13;
    v8 = 2;
    switch((unsigned __int16)*(_DWORD *)(a3 + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_11;
      case 3:
      case 5:
        v7 = 3;
        goto LABEL_11;
      case 4:
        goto LABEL_12;
      default:
        v7 = 0;
LABEL_11:
        v8 = v7;
LABEL_12:
        v9 = (v8 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  else
  {
LABEL_14:
    v9 = (*(unsigned __int8 *)(a3 + 123) >> 2) & 1;
  }
  return v6 ^ v9;
}

uint64_t WebCore::GridBaselineAlignment::logicalAscentForChild(_BYTE *a1, _DWORD *a2, int a3, int a4)
{
  void *v8;
  WTF *v9;
  int v10;
  unsigned __int16 v11;
  int v12;
  int v13;
  unsigned __int16 v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  WTF *v20;
  int v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  WTF *v29;
  WTF *v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  BOOL v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  BOOL v62;
  int *v63;
  int v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  _BOOL4 v69;
  unsigned int v70;
  int v71;
  char v72;
  _BOOL4 v73;
  char v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  unsigned int v79;
  int *v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  WTF *v86;
  WTF *v87;
  unsigned __int16 v88;
  WTF *v89;
  WTF *v90;
  unsigned __int16 v91;

  if (a3 != 2)
    goto LABEL_88;
  WebCore::ancestorSubgridsOfGridItem((uint64_t)a2, 1, (uint64_t)&v89);
  v9 = v89;
  if (!v89)
  {
    v86 = 0;
    v87 = 0;
    v88 = v91;
    if (v91 < 0x100u)
    {
      v15 = 0;
LABEL_43:
      v25 = v86;
      if (v86)
        v25 = (WTF *)*((_QWORD *)v86 + 1);
      if (v25 || HIBYTE(v88))
      {
        v24 = *((_QWORD *)v15 + 1);
        while (((*(_BYTE *)(v24 + 21) & 0x10) == 0) == ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 8) + 21) & 0x10) == 0))
        {
          WebCore::AncestorSubgridIterator::operator++((uint64_t)&v86, v8);
          v15 = v87;
          if (v87)
          {
            v24 = *((_QWORD *)v87 + 1);
            if (v24)
              continue;
          }
          goto LABEL_43;
        }
        goto LABEL_66;
      }
LABEL_140:
      v23 = 1;
      goto LABEL_69;
    }
    v15 = 0;
    v26 = v91;
LABEL_53:
    if (v86)
    {
      if (*((_QWORD *)v86 + 1))
        v28 = 1;
      else
        v28 = HIBYTE(v88) == 0;
      if (v28)
        goto LABEL_62;
    }
    else if (!HIBYTE(v88))
    {
      goto LABEL_62;
    }
    if (v88 == v26)
      goto LABEL_140;
LABEL_62:
    v27 = *((_QWORD *)v15 + 1);
    while (((*(_BYTE *)(v27 + 21) & 0x10) == 0) == ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 32) + 8) + 21) & 0x10) == 0))
    {
      WebCore::AncestorSubgridIterator::operator++((uint64_t)&v86, v8);
      v15 = v87;
      if (v87)
      {
        v27 = *((_QWORD *)v87 + 1);
        if (v27)
          continue;
      }
      goto LABEL_53;
    }
    goto LABEL_66;
  }
  v10 = *(_DWORD *)v89;
  *(_DWORD *)v89 += 2;
  v11 = v91;
  v86 = v9;
  *(_DWORD *)v9 = v10 + 4;
  v87 = v9;
  v88 = v11;
  v12 = v10 + 3;
  if (v12)
  {
    *(_DWORD *)v9 = v12;
  }
  else
  {
    WTF::fastFree(v9, v8);
    v12 = *(_DWORD *)v9;
  }
  v13 = v12 - 1;
  if (!v13)
  {
    WTF::fastFree(v9, v8);
    v13 = *(_DWORD *)v9;
  }
  *(_DWORD *)v9 = v13 + 1;
  v14 = v91;
  *(_DWORD *)v9 = v13 + 2;
  if (v13 == -1)
    WTF::fastFree(v9, v8);
  else
    *(_DWORD *)v9 = v13 + 1;
  if (v14 >= 0x100u)
  {
    v15 = v9;
    if (v9)
      goto LABEL_23;
LABEL_24:
    v20 = v86;
    if (v86)
      v20 = (WTF *)*((_QWORD *)v86 + 1);
    if (v20 == *((WTF **)v9 + 1) && HIBYTE(v88) != 0 && v88 == v14)
      goto LABEL_37;
    v19 = *((_QWORD *)v15 + 1);
    while (((*(_BYTE *)(v19 + 21) & 0x10) == 0) == ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 8) + 21) & 0x10) == 0))
    {
      WebCore::AncestorSubgridIterator::operator++((uint64_t)&v86, v8);
      v15 = v87;
      if (!v87)
        goto LABEL_24;
LABEL_23:
      v19 = *((_QWORD *)v15 + 1);
      if (!v19)
        goto LABEL_24;
    }
LABEL_66:
    v23 = 0;
    if (!v9)
      goto LABEL_69;
    goto LABEL_67;
  }
  v15 = v9;
  if (v9)
    goto LABEL_11;
LABEL_12:
  v17 = v86;
  if (v86)
    v17 = (WTF *)*((_QWORD *)v86 + 1);
  if (v17 != *((WTF **)v9 + 1) || HIBYTE(v88) != 0)
  {
    v16 = *((_QWORD *)v15 + 1);
    while (((*(_BYTE *)(v16 + 21) & 0x10) == 0) == ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 8) + 21) & 0x10) == 0))
    {
      WebCore::AncestorSubgridIterator::operator++((uint64_t)&v86, v8);
      v15 = v87;
      if (!v87)
        goto LABEL_12;
LABEL_11:
      v16 = *((_QWORD *)v15 + 1);
      if (!v16)
        goto LABEL_12;
    }
    goto LABEL_66;
  }
LABEL_37:
  v23 = 1;
LABEL_67:
  if (*(_DWORD *)v9 == 1)
  {
    WTF::fastFree(v9, v8);
    v15 = v87;
  }
  else
  {
    --*(_DWORD *)v9;
  }
LABEL_69:
  v87 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, v8);
    else
      --*(_DWORD *)v15;
  }
  v29 = v86;
  v86 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::fastFree(v29, v8);
    else
      --*(_DWORD *)v29;
  }
  v30 = v90;
  v90 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::fastFree(v30, v8);
    else
      --*(_DWORD *)v30;
  }
  v89 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WTF::fastFree(v9, v8);
      if (v23)
        goto LABEL_82;
      goto LABEL_88;
    }
    --*(_DWORD *)v9;
  }
  if (v23)
  {
LABEL_82:
    v33 = WebCore::GridLayoutFunctions::extraMarginForSubgridAncestors(1u, (uint64_t)a2);
    v32 = HIDWORD(v33);
    v31 = v33;
    goto LABEL_89;
  }
LABEL_88:
  v31 = 0;
  v32 = 0;
LABEL_89:
  if ((_MergedGlobals_248 & 1) == 0)
  {
    dword_1ECE841F4 = -64;
    _MergedGlobals_248 = 1;
  }
  v34 = *a1;
  if (a3 == 2)
  {
    if ((v34 - 1) >= 5)
      v35 = 0;
    else
      v35 = qword_1969FC3D8[(char)(v34 - 1)];
    v38 = a2[v35 + 42];
    v39 = *((_QWORD *)a2 + 4);
    if (v39)
    {
      v40 = *(_QWORD *)(v39 + 8);
      if (v40)
        v41 = v40 + 80;
      else
        v41 = 0;
    }
    else
    {
      v41 = 0;
    }
    if ((v34 - 2) < 2 || v34 == 4 || v34 == 5)
    {
      if ((*((_BYTE *)a2 + 21) & 0x10) != 0)
        goto LABEL_120;
    }
    else if ((*((_BYTE *)a2 + 21) & 0x10) == 0)
    {
LABEL_120:
      v45 = 1488;
      if (a4 == 4)
        v45 = 1480;
      v43 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + v45))(a2);
      if ((v43 & 0xFF00000000) != 0)
      {
LABEL_123:
        v46 = __OFADD__(v38, (_DWORD)v43);
        v47 = v38 + v43;
        goto LABEL_178;
      }
      if (!v41)
        goto LABEL_176;
      v49 = *((_QWORD *)a2 + 4);
      if (v49)
      {
        v50 = *(_QWORD *)(v49 + 8);
        v49 = v50 + 80;
        if (!v50)
          v49 = 0;
      }
      else
      {
        v50 = MEMORY[8];
      }
      if (v50)
        v51 = v50 + 80;
      else
        v51 = 0;
      v52 = (unsigned __int16)*(_DWORD *)(v51 + 44) >> 13;
      v53 = 2;
      switch(v52)
      {
        case 1:
        case 2:
          goto LABEL_138;
        case 3:
        case 5:
          LOBYTE(v52) = 3;
          goto LABEL_138;
        case 4:
          goto LABEL_139;
        default:
          LOBYTE(v52) = 0;
LABEL_138:
          v53 = v52;
LABEL_139:
          v54 = (unsigned __int16)*(_DWORD *)(v49 + 44) >> 13;
          v55 = 2;
          switch((unsigned __int16)*(_DWORD *)(v49 + 44) >> 13)
          {
            case 1:
            case 2:
              goto LABEL_236;
            case 3:
            case 5:
              goto LABEL_239;
            case 4:
              goto LABEL_158;
            default:
              goto LABEL_157;
          }
      }
      goto LABEL_158;
    }
    if (!v41)
      goto LABEL_176;
    if (v39)
    {
      v56 = *(_QWORD *)(v39 + 8);
      v49 = v56 + 80;
      if (!v56)
        v49 = 0;
    }
    else
    {
      v49 = 0;
      v56 = MEMORY[8];
    }
    if (v56)
      v57 = v56 + 80;
    else
      v57 = 0;
    v58 = (unsigned __int16)*(_DWORD *)(v57 + 44) >> 13;
    v53 = 2;
    switch(v58)
    {
      case 1:
      case 2:
        goto LABEL_155;
      case 3:
      case 5:
        LOBYTE(v58) = 3;
        goto LABEL_155;
      case 4:
        goto LABEL_156;
      default:
        LOBYTE(v58) = 0;
LABEL_155:
        v53 = v58;
LABEL_156:
        v54 = (unsigned __int16)*(_DWORD *)(v49 + 44) >> 13;
        v55 = 2;
        switch((unsigned __int16)*(_DWORD *)(v49 + 44) >> 13)
        {
          case 1:
          case 2:
LABEL_236:
            v55 = v54;
            break;
          case 3:
          case 5:
LABEL_239:
            v55 = 3;
            break;
          case 4:
            goto LABEL_158;
          default:
LABEL_157:
            v55 = 0;
            break;
        }
        break;
    }
LABEL_158:
    v59 = (*(_DWORD *)(*(_QWORD *)(v49 + 24) + 232) >> 4) & 3;
    v62 = (v55 & 6) != 2 || v59 == 2 || v59 > 1;
    if (v54 != 2 || !v62)
    {
      if ((v53 & 6) == 2)
        v63 = a2 + 40;
      else
        v63 = a2 + 41;
      v64 = *v63;
      if (!v62)
      {
        if (v64 >= 0)
          v65 = v64;
        else
          v65 = v64 + 1;
        v64 = v65 >> 1;
      }
      goto LABEL_177;
    }
LABEL_176:
    v64 = 0;
LABEL_177:
    v46 = __OFADD__(v38, v64);
    v47 = v38 + v64;
LABEL_178:
    if (v46)
      v38 = (v38 >> 31) + 0x7FFFFFFF;
    else
      v38 = v47;
    goto LABEL_181;
  }
  v36 = v34 - 2;
  if (v36 > 3u)
    v37 = 3;
  else
    v37 = qword_1969FC3B8[(char)v36];
  v38 = a2[v37 + 42];
  v42 = 1488;
  if (a4 == 4)
    v42 = 1480;
  v43 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + v42))(a2);
  v44 = *a1;
  if ((v44 - 2) < 2 || v44 == 4 || v44 == 5)
  {
    if ((*((_BYTE *)a2 + 21) & 0x10) != 0)
      goto LABEL_111;
  }
  else if ((*((_BYTE *)a2 + 21) & 0x10) == 0)
  {
    goto LABEL_111;
  }
  if ((v43 & 0xFF00000000) == 0)
    LODWORD(v43) = dword_1ECE841F4;
  if ((_DWORD)v43 != dword_1ECE841F4)
    goto LABEL_123;
LABEL_111:
  if (a3 == 1)
  {
    if ((v44 - 2) < 4)
    {
LABEL_125:
      v48 = a2[41];
LABEL_126:
      v46 = __OFADD__(v38, v48);
      v47 = v38 + v48;
      goto LABEL_178;
    }
    if (v44 == 1)
    {
LABEL_238:
      v48 = (a2[40] + ((int)a2[40] < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
      goto LABEL_126;
    }
  }
  else
  {
    switch(*a1)
    {
      case 2:
      case 4:
        break;
      case 3:
      case 5:
        goto LABEL_238;
      default:
        goto LABEL_125;
    }
  }
LABEL_181:
  if (__OFADD__(v38, v31))
    v66 = (v38 >> 31) + 0x7FFFFFFF;
  else
    v66 = v38 + v31;
  v67 = *a1;
  v68 = v67 - 2;
  if (a3 == 1)
  {
    if (v68 >= 4)
      goto LABEL_186;
LABEL_193:
    v69 = 0;
    goto LABEL_194;
  }
  if (v68 > 3)
    goto LABEL_193;
LABEL_186:
  v69 = 0;
  v70 = (unsigned __int16)a2[31] >> 13;
  if (v70 > 5)
    goto LABEL_194;
  if (((1 << v70) & 0x2A) == 0)
  {
    if (((1 << v70) & 0x14) == 0)
      goto LABEL_194;
    goto LABEL_242;
  }
  if (v67 > 5 || ((1 << v67) & 0x2A) == 0)
    goto LABEL_196;
  v69 = 0;
  if (v70 <= 4 && ((1 << v70) & 0x16) != 0)
  {
LABEL_242:
    v71 = 2;
    switch(*a1)
    {
      case 1:
      case 2:
        v71 = *a1;
        break;
      case 3:
      case 5:
        v71 = 3;
        break;
      case 4:
        break;
      default:
        v71 = 0;
        break;
    }
    v69 = (v71 & 0xFFFFFFFD) == 1;
  }
LABEL_194:
  if (a4 != 5 && !v69)
    return v66;
LABEL_196:
  if (a3 == 2)
  {
    v72 = 2;
    switch(*a1)
    {
      case 1:
      case 2:
        goto LABEL_199;
      case 3:
      case 5:
        LOBYTE(v67) = 3;
        goto LABEL_199;
      case 4:
        goto LABEL_200;
      default:
        LOBYTE(v67) = 0;
LABEL_199:
        v72 = v67;
LABEL_200:
        v73 = (v72 & 0xFE) == 2;
        break;
    }
  }
  else
  {
    v74 = 2;
    switch(*a1)
    {
      case 1:
      case 2:
        goto LABEL_203;
      case 3:
      case 5:
        LOBYTE(v67) = 3;
        goto LABEL_203;
      case 4:
        goto LABEL_204;
      default:
        LOBYTE(v67) = 0;
LABEL_203:
        v74 = v67;
LABEL_204:
        v73 = (v74 & 0xFE) != 2;
        break;
    }
  }
  if (v73 == ((*((_BYTE *)a2 + 21) & 0x10) == 0))
  {
    v81 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 1128))(a2, 0);
    v82 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 1136))(a2, 0);
    v79 = v81 + v82;
    if (__OFADD__(v81, v82))
      v79 = (v81 >> 31) + 0x7FFFFFFF;
    if (((a2[31] >> 13) & 6u) - 2 < 4)
      goto LABEL_213;
LABEL_217:
    v80 = a2 + 40;
    goto LABEL_218;
  }
  v75 = v31 + v32;
  if (__OFADD__(v31, v32))
    v75 = (v31 >> 31) + 0x7FFFFFFF;
  v76 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 1112))(a2, 0);
  v77 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 1120))(a2, 0);
  v78 = v76 + v77;
  if (__OFADD__(v76, v77))
    v78 = (v76 >> 31) + 0x7FFFFFFF;
  v46 = __OFADD__(v75, v78);
  v79 = v75 + v78;
  if (v46)
    v79 = (v75 >> 31) + 0x7FFFFFFF;
  if (((a2[31] >> 13) & 6u) - 2 < 4)
    goto LABEL_217;
LABEL_213:
  v80 = a2 + 41;
LABEL_218:
  v83 = *v80;
  v46 = __OFADD__(v79, v83);
  v84 = v79 + v83;
  if (v46)
    v84 = (v79 >> 31) + 0x7FFFFFFF;
  v46 = __OFSUB__(v84, (_DWORD)v66);
  v66 = v84 - v66;
  if (v46)
    return (v84 >> 31) + 0x7FFFFFFF;
  return v66;
}

uint64_t WebCore::GridLayoutFunctions::extraMarginForSubgridAncestors(unsigned int a1, uint64_t a2)
{
  void *v3;
  WTF *v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  const WebCore::RenderGrid *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  WebCore::RenderGrid *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE *v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  _BYTE *v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  WTF *v69;
  uint64_t result;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  WTF *v78;
  WTF *v79;
  __int16 v80;
  WTF *v81;
  WTF *v82;
  unsigned __int16 v83;

  WebCore::ancestorSubgridsOfGridItem(a2, a1, (uint64_t)&v81);
  v4 = v81;
  if (v81)
  {
    v5 = *(_DWORD *)v81;
    v6 = v83;
    v78 = v81;
    *(_DWORD *)v81 = v5 + 4;
    v79 = v4;
    v80 = v6;
    v7 = v5 + 3;
    if (v7)
    {
      *(_DWORD *)v4 = v7;
    }
    else
    {
      WTF::fastFree(v4, v3);
      v7 = *(_DWORD *)v4;
    }
    v8 = v7 - 1;
    if (!v8)
    {
      WTF::fastFree(v4, v3);
      v8 = *(_DWORD *)v4;
    }
    *(_DWORD *)v4 = v8 + 2;
    v76 = v6;
    v9 = v6 >> 8;
    v10 = __CFADD__(v8, 1);
    v11 = v8 + 1;
    if (v10)
      WTF::fastFree(v4, v3);
    else
      *(_DWORD *)v4 = v11;
  }
  else
  {
    v78 = 0;
    v79 = 0;
    v80 = v83;
    v76 = v83;
    v9 = HIBYTE(v83);
  }
  v12 = 0;
  v13 = 0;
  v14 = v4;
  if (v4)
    goto LABEL_9;
LABEL_10:
  v16 = v78;
  if (v78)
    v16 = (WTF *)*((_QWORD *)v78 + 1);
  if (v4)
    v17 = (WTF *)*((_QWORD *)v4 + 1);
  else
    v17 = 0;
  if (v16 == v17)
  {
    if (v9 && HIBYTE(v80))
    {
      if (v80 == v76)
      {
LABEL_122:
        if (v4)
        {
          if (*(_DWORD *)v4 == 1)
          {
            WTF::fastFree(v4, v3);
            v14 = v79;
          }
          else
          {
            --*(_DWORD *)v4;
          }
        }
        v79 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
            WTF::fastFree(v14, v3);
          else
            --*(_DWORD *)v14;
        }
        v69 = v78;
        v78 = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 1)
            WTF::fastFree(v69, v3);
          else
            --*(_DWORD *)v69;
        }
        if (v82)
        {
          if (*(_DWORD *)v82 == 1)
          {
            WTF::fastFree(v82, v3);
            if (v4)
            {
LABEL_135:
              if (*(_DWORD *)v4 == 1)
                WTF::fastFree(v4, v3);
              else
                --*(_DWORD *)v4;
            }
            return v12 | (unint64_t)(v13 << 32);
          }
          --*(_DWORD *)v82;
        }
        if (v4)
          goto LABEL_135;
        return v12 | (unint64_t)(v13 << 32);
      }
    }
    else if ((v9 != 0) == (HIBYTE(v80) != 0))
    {
      goto LABEL_122;
    }
  }
  if (v14)
    v15 = *((_QWORD *)v14 + 1);
  else
    v15 = 0;
  while (1)
  {
    v19 = WebCore::RenderGrid::gridSpanForChild(v15, a2, a1);
    v20 = *(_QWORD *)(v15 + 328);
    v21 = *(_DWORD *)(v20 + 100);
    if (a1 == 1)
      goto LABEL_27;
    if (v21)
    {
      v21 = *(_DWORD *)(*(_QWORD *)(v20 + 88) + 12);
LABEL_27:
      if (!v21)
        goto LABEL_33;
      goto LABEL_28;
    }
    v21 = WebCore::GridPositionsResolver::explicitGridColumnCount((WebCore::GridPositionsResolver *)v15, v18);
    if (!v21)
      goto LABEL_33;
LABEL_28:
    if (WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v15))
      goto LABEL_33;
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 40) + 80);
    if (a1)
    {
      LODWORD(v22) = *(unsigned __int8 *)(v22 + 258);
      if (!(_DWORD)v22)
        goto LABEL_31;
    }
    else
    {
      LODWORD(v22) = *(unsigned __int8 *)(v22 + 259);
      if (!(_DWORD)v22)
        goto LABEL_31;
    }
    v22 = *(_QWORD *)(v15 + 32);
    if (!v22)
    {
LABEL_31:
      v23 = 0;
      goto LABEL_34;
    }
    v26 = *(WebCore::RenderGrid **)(v22 + 8);
    if (!v26 || *((_BYTE *)v26 + 46) != 12)
    {
LABEL_33:
      v23 = 0;
      LODWORD(v22) = 0;
      goto LABEL_34;
    }
    if (a1 == 1)
    {
      if ((WebCore::RenderGrid::areMasonryRows(v26) & 1) != 0)
        goto LABEL_33;
      v72 = v12;
      v73 = v9;
      v71 = v13;
      v27 = *(_QWORD *)v15;
LABEL_51:
      if (((*(uint64_t (**)(uint64_t))(v27 + 1544))(v15) & 1) != 0)
        goto LABEL_66;
      v28 = *(_QWORD *)(*(_QWORD *)(v15 + 88) + 8);
      if (((*(_DWORD *)(v15 + 124) >> 13) & 6u) - 2 < 4)
        v29 = v28 + 4;
      else
        v29 = v28 + 12;
      v30 = *(unsigned __int8 *)(v29 + 4);
      if (v30 >= 0xB)
        goto LABEL_65;
      v31 = 0;
      if (((0x781u >> v30) & 1) != 0)
        goto LABEL_68;
      v74 = 0;
      v75 = 0;
      if (v30 - 5 > 1)
        goto LABEL_67;
      goto LABEL_69;
    }
    if (WebCore::RenderGrid::areMasonryColumns(v26))
      goto LABEL_33;
    v72 = v12;
    v73 = v9;
    v71 = v13;
    v27 = *(_QWORD *)v15;
    if (a1)
      goto LABEL_51;
    if (((*(uint64_t (**)(uint64_t))(v27 + 1552))(v15) & 1) != 0)
      goto LABEL_66;
    v32 = *(_QWORD *)(*(_QWORD *)(v15 + 88) + 8);
    if (((*(_DWORD *)(v15 + 124) >> 13) & 6u) - 2 < 4)
      v33 = v32 + 12;
    else
      v33 = v32 + 4;
    v30 = *(unsigned __int8 *)(v33 + 4);
    if (v30 >= 0xB)
    {
LABEL_65:
      if (v30 - 5 < 2)
      {
LABEL_66:
        v31 = 0;
        v74 = 0;
        v75 = 0;
        goto LABEL_69;
      }
LABEL_67:
      v34 = WebCore::RenderGrid::availableSpaceForGutters((WebCore::RenderBox *)v15, a1);
      v74 = v34 & 0xFFFFFF00;
      v75 = v34 & 0xFF00000000;
      v31 = v34;
      goto LABEL_69;
    }
    v31 = 0;
    if (((0x781u >> v30) & 1) != 0)
    {
LABEL_68:
      v74 = 0;
      v75 = 0;
      goto LABEL_69;
    }
    v74 = 0;
    v75 = 0;
    if (v30 - 5 >= 2)
      goto LABEL_67;
LABEL_69:
    v35 = *(_QWORD *)(v15 + 32);
    v36 = v35 ? *(_QWORD *)(v35 + 8) : 0;
    if (*(_BYTE *)(v36 + 46) != 12)
      break;
    if ((_DWORD)v19)
    {
      v37 = WebCore::RenderGrid::gridGap((WebCore::RenderElement *)v15, a1, v75 | v31 | v74);
      v38 = *(_QWORD *)(*(_QWORD *)(v36 + 88) + 40);
      if (a1)
        v39 = (_BYTE *)(v38 + 388);
      else
        v39 = (_BYTE *)(v38 + 376);
      if (!*v39 && (v39[8] & 0xF7) == 3)
      {
        if (a1)
          v67 = WebCore::RenderBox::contentLogicalHeight((WebCore::RenderBox *)v36);
        else
          v67 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v36);
        v42 = v67 & 0xFFFFFF00;
        v40 = v67;
        v41 = 0x100000000;
      }
      else
      {
        v40 = 0;
        v41 = 0;
        v42 = 0;
      }
      v43 = WebCore::RenderGrid::gridGap((WebCore::RenderElement *)v36, a1, v41 | v42 | v40);
      v44 = v37 - v43;
      if (__OFSUB__(v37, v43))
        v44 = (v37 >> 31) + 0x7FFFFFFF;
      v23 = v44 / 2;
    }
    else
    {
      v45 = *(_QWORD *)v15;
      if (a1)
      {
        v46 = (*(uint64_t (**)(uint64_t, _QWORD))(v45 + 1112))(v15, 0);
        v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1048))(v15);
        v48 = v46 + v47;
        if (__OFADD__(v46, v47))
          v48 = (v46 >> 31) + 0x7FFFFFFF;
        v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 960))(v15);
      }
      else
      {
        v50 = (*(uint64_t (**)(uint64_t, _QWORD))(v45 + 1128))(v15, 0);
        v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1064))(v15);
        v48 = v50 + v51;
        if (__OFADD__(v50, v51))
          v48 = (v50 >> 31) + 0x7FFFFFFF;
        v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 976))(v15);
      }
      v23 = v48 + v49;
      if (__OFADD__(v48, v49))
        v23 = (v48 >> 31) + 0x7FFFFFFF;
    }
    if (v21 != HIDWORD(v19))
    {
      v57 = WebCore::RenderGrid::gridGap((WebCore::RenderElement *)v15, a1, v75 | v31 | v74);
      v58 = *(_QWORD *)(*(_QWORD *)(v36 + 88) + 40);
      if (a1)
        v59 = (_BYTE *)(v58 + 388);
      else
        v59 = (_BYTE *)(v58 + 376);
      if (!*v59 && (v59[8] & 0xF7) == 3)
      {
        if (a1)
          v68 = WebCore::RenderBox::contentLogicalHeight((WebCore::RenderBox *)v36);
        else
          v68 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v36);
        v62 = v68 & 0xFFFFFF00;
        v60 = v68;
        v61 = 0x100000000;
      }
      else
      {
        v60 = 0;
        v61 = 0;
        v62 = 0;
      }
      v63 = WebCore::RenderGrid::gridGap((WebCore::RenderElement *)v36, a1, v61 | v62 | v60);
      v64 = v57 - v63;
      if (__OFSUB__(v57, v63))
        v64 = (v57 >> 31) + 0x7FFFFFFF;
      LODWORD(v22) = v64 / 2;
LABEL_107:
      LODWORD(v13) = v71;
      v12 = v72;
      v9 = v73;
      goto LABEL_34;
    }
    v52 = *(_QWORD *)v15;
    if (a1)
    {
      v53 = (*(uint64_t (**)(uint64_t, _QWORD))(v52 + 1120))(v15, 0);
      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1056))(v15);
      v55 = v53 + v54;
      if (__OFADD__(v53, v54))
        v55 = (v53 >> 31) + 0x7FFFFFFF;
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 968))(v15);
    }
    else
    {
      v65 = (*(uint64_t (**)(uint64_t, _QWORD))(v52 + 1136))(v15, 0);
      v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1072))(v15);
      v55 = v65 + v66;
      if (__OFADD__(v65, v66))
        v55 = (v65 >> 31) + 0x7FFFFFFF;
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 984))(v15);
    }
    LODWORD(v22) = v55 + v56;
    if (!__OFADD__(v55, v56))
      goto LABEL_107;
    LODWORD(v22) = (v55 >> 31) + 0x7FFFFFFF;
    LODWORD(v13) = v71;
    v12 = v72;
    v9 = v73;
LABEL_34:
    if (__OFADD__(v12, v23))
      v12 = (v12 >> 31) + 0x7FFFFFFF;
    else
      v12 += v23;
    v24 = __OFADD__((_DWORD)v13, (_DWORD)v22);
    v25 = v13 + v22;
    if (v24)
      v13 = (v13 >> 31) + 0x7FFFFFFF;
    else
      v13 = v25;
    WebCore::AncestorSubgridIterator::operator++((uint64_t)&v78, v18);
    v14 = v79;
    if (!v79)
      goto LABEL_10;
LABEL_9:
    v15 = *((_QWORD *)v14 + 1);
    if (!v15)
      goto LABEL_10;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

void WebCore::GridBaselineAlignment::updateBaselineAlignmentContext(_BYTE *a1, int a2, int a3, _DWORD *a4, int a5)
{
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  WTF *v21;
  unint64_t CompatibleSharedGroup;
  int v23;
  WTF *v24;
  WTF *v25;
  int v26;
  _BYTE v27[24];

  v26 = a3;
  v10 = WebCore::GridBaselineAlignment::logicalAscentForChild(a1, a4, a5, a2);
  v11 = 16;
  if (a5 == 2)
  {
    v11 = 8;
    v12 = (uint64_t *)(a1 + 8);
  }
  else
  {
    v12 = (uint64_t *)(a1 + 16);
  }
  v13 = *(_QWORD *)&a1[v11];
  if (v13)
  {
    v14 = *(_DWORD *)(v13 - 8);
    v15 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
    v17 = v14 & (v16 ^ HIWORD(v16));
    v18 = *(_DWORD *)(v13 + 16 * v17);
    if (v18 == a3)
    {
LABEL_9:
      v20 = *(_QWORD *)(v13 + 16 * v17 + 8);
      if (v20)
      {
        WebCore::BaselineAlignmentState::updateSharedGroup(v20, a4, a2, v10);
        return;
      }
    }
    else
    {
      v19 = 1;
      while (v18 != -1)
      {
        v17 = ((_DWORD)v17 + v19) & v14;
        v18 = *(_DWORD *)(v13 + 16 * v17);
        ++v19;
        if (v18 == a3)
          goto LABEL_9;
      }
    }
  }
  v21 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  CompatibleSharedGroup = WebCore::BaselineAlignmentState::findCompatibleSharedGroup((unint64_t)v21, a4, a2);
  WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>(CompatibleSharedGroup + 8, a4, (uint64_t)v27);
  if (v27[16])
  {
    v23 = *(_DWORD *)(CompatibleSharedGroup + 4);
    if (v23 <= v10)
      v23 = v10;
    *(_DWORD *)(CompatibleSharedGroup + 4) = v23;
  }
  v25 = v21;
  WTF::HashMap<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::BaselineAlignmentState>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::BaselineAlignmentState>>(v12, &v26, (uint64_t *)&v25, (uint64_t)v27);
  v24 = v25;
  v25 = 0;
  if (v24)
    std::default_delete<WebCore::BaselineAlignmentState>::operator()[abi:sn180100]((int)&v25, v24);
}

void WTF::HashMap<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::BaselineAlignmentState>>,WTF::HashTableTraits>::add<std::unique_ptr<WebCore::BaselineAlignmentState>>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::BaselineAlignmentState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = v8 + 16 * v14;
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != -1)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v23;
        goto LABEL_35;
      }
      if (v16 == -2)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = v8 + 16 * v14;
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15 != -1);
    if (v17)
    {
      *(_DWORD *)v17 = -1;
      *(_QWORD *)(v17 + 8) = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = *a2;
      v15 = v17;
    }
  }
  *(_DWORD *)v15 = v11;
  v19 = *a3;
  *a3 = 0;
  v20 = *(WTF **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v19;
  if (v20)
    std::default_delete<WebCore::BaselineAlignmentState>::operator()[abi:sn180100](v15 + 8, v20);
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_30;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
      goto LABEL_31;
    }
LABEL_30:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
LABEL_31:
    v15 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::BaselineAlignmentState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v28, (int *)v15);
    v24 = *a1;
    if (*a1)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
  }
  v30 = v24 + 16 * v27;
  v29 = 1;
LABEL_35:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
}

uint64_t WebCore::GridBaselineAlignment::baselineOffsetForChild(_BYTE *a1, int a2, int a3, _DWORD *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t CompatibleSharedGroup;
  void *v19;
  unsigned int v20;
  int v21;

  v9 = 16;
  if (a5 == 2)
    v9 = 8;
  v10 = *(_QWORD *)&a1[v9];
  if (v10)
  {
    v11 = *(_DWORD *)(v10 - 8);
    v12 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
    v14 = v11 & (v13 ^ HIWORD(v13));
    v15 = *(_DWORD *)(v10 + 16 * v14);
    if (v15 == a3)
    {
LABEL_8:
      v17 = *(_QWORD *)(v10 + 16 * v14 + 8);
      goto LABEL_10;
    }
    v16 = 1;
    while (v15 != -1)
    {
      v14 = ((_DWORD)v14 + v16) & v11;
      v15 = *(_DWORD *)(v10 + 16 * v14);
      ++v16;
      if (v15 == a3)
        goto LABEL_8;
    }
  }
  v17 = 0;
LABEL_10:
  CompatibleSharedGroup = WebCore::BaselineAlignmentState::findCompatibleSharedGroup(v17, a4, a2);
  if ((int)WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(CompatibleSharedGroup + 8, v19) < 2)return 0;
  v20 = *(_DWORD *)(CompatibleSharedGroup + 4);
  v21 = WebCore::GridBaselineAlignment::logicalAscentForChild(a1, a4, a5, a2);
  if (__OFSUB__(v20, v21))
    return (v20 >> 31) + 0x7FFFFFFF;
  else
    return v20 - v21;
}

uint64_t WebCore::GridLayoutFunctions::marginLogicalSizeForChild(WebCore::RenderBlock *a1, unsigned int a2, WebCore::RenderBox *this)
{
  unsigned int v4;
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  _BOOL4 v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  WebCore::RenderBlock *v39;
  int v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;

  v4 = a2;
  v6 = ((*((_DWORD *)this + 5) & 0x1000) == 0) ^ ((*((_BYTE *)a1 + 21) & 0x10) == 0);
  if ((*((_DWORD *)this + 5) & 0xF8) == 0)
  {
    v7 = a2;
    if (v6)
      v7 = a2 == 0;
    v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v9 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v7)
    {
      if ((v9 - 1) > 4)
        v10 = 0;
      else
        v10 = qword_1969FC3D8[v9 - 1];
      goto LABEL_40;
    }
    v25 = *((_DWORD *)this + 30);
    v26 = (v25 >> 26) & 1;
    if ((v9 - 2) >= 2)
    {
      if ((_DWORD)v9 == 4)
      {
        v26 = (v25 & 0x4000000) == 0;
      }
      else if ((_DWORD)v9 != 5)
      {
        if ((v25 & 0x4000000) != 0)
          v10 = 1;
        else
          v10 = 3;
        goto LABEL_40;
      }
    }
    if (v26)
      v10 = 2;
    else
      v10 = 0;
LABEL_40:
    v27 = v8 + 40;
    if (*(_BYTE *)(v8 + 40 + 8 * v10 + 4))
    {
      if (!v7)
      {
        v28 = *((_DWORD *)this + 30);
        v29 = v28 & 0x4000000;
        v30 = (v28 >> 26) & 1;
        if ((v9 - 2) >= 2)
        {
          if ((_DWORD)v9 == 4)
          {
            v30 = v29 == 0;
          }
          else if ((_DWORD)v9 != 5)
          {
            v31 = 3;
            if (v29)
              v31 = 1;
LABEL_47:
            v32 = *((_DWORD *)this + v31 + 42);
LABEL_48:
            v33 = v29 != 0;
            if ((v9 - 2) >= 2)
            {
              if ((_DWORD)v9 == 4)
              {
                v33 = v29 == 0;
              }
              else if ((_DWORD)v9 != 5)
              {
                v20 = v29 == 0;
                v34 = 3;
                if (v20)
                  v34 = 1;
                goto LABEL_54;
              }
            }
            v34 = 2;
            if (v33)
              v34 = 0;
LABEL_54:
            if (!*(_BYTE *)(v27 + 8 * v34 + 4))
            {
              v38 = 0;
LABEL_62:
              result = v32 + v38;
              if (__OFADD__(v32, v38))
                result = (v32 >> 31) + 0x7FFFFFFF;
              goto LABEL_64;
            }
            if (!v7)
            {
              v35 = *((_DWORD *)this + 30);
              v36 = (v35 >> 26) & 1;
              if ((v9 - 2) >= 2)
              {
                if ((_DWORD)v9 == 4)
                {
                  v36 = (v35 & 0x4000000) == 0;
                }
                else if ((_DWORD)v9 != 5)
                {
                  v37 = 3;
                  if ((v35 & 0x4000000) == 0)
                    v37 = 1;
                  goto LABEL_61;
                }
              }
              v37 = 2;
              if (v36)
                v37 = 0;
              goto LABEL_61;
            }
            v58 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
            if (v58 > 4)
              v37 = 2;
            else
              v37 = qword_1969FC400[v58];
LABEL_61:
            v38 = *((_DWORD *)this + v37 + 42);
            goto LABEL_62;
          }
        }
        v20 = v30 == 0;
        v31 = 2;
        if (v20)
          v31 = 0;
        goto LABEL_47;
      }
      v56 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
      if (v56 > 4)
        v57 = 0;
      else
        v57 = qword_1969FC3D8[v56];
      v32 = *((_DWORD *)this + v57 + 42);
    }
    else
    {
      v32 = 0;
      if (!v7)
      {
        v29 = *((_DWORD *)this + 30) & 0x4000000;
        goto LABEL_48;
      }
    }
    v34 = 3;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
        v34 = 0;
        break;
      case 2:
      case 4:
        v34 = 1;
        break;
      case 3:
      case 5:
        goto LABEL_54;
      default:
        v34 = 2;
        break;
    }
    goto LABEL_54;
  }
  v11 = a2;
  if (v6)
    v11 = a2 == 0;
  v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v13 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (!v11)
  {
    v14 = *((_DWORD *)this + 30);
    v15 = (v14 >> 26) & 1;
    v16 = v15;
    if ((v13 - 2) >= 2)
    {
      if ((_DWORD)v13 == 4)
      {
        v16 = (v14 & 0x4000000) == 0;
      }
      else
      {
        v16 = (v14 >> 26) & 1;
        if ((_DWORD)v13 != 5)
        {
          v17 = 3;
          if ((v14 & 0x4000000) != 0)
            v17 = 1;
          goto LABEL_15;
        }
      }
    }
    v20 = v16 == 0;
    v17 = 2;
    if (v20)
      v17 = 0;
LABEL_15:
    v18 = v12 + 40;
    v19 = v18 + 8 * v17;
    if (*(_BYTE *)(v19 + 4))
      v20 = *(_BYTE *)(v19 + 4) == 11;
    else
      v20 = 1;
    if (v20)
      goto LABEL_68;
    if (*(_BYTE *)(v19 + 6))
    {
      if (*(float *)v19 != 0.0)
        goto LABEL_68;
    }
    else if (*(_DWORD *)v19)
    {
      goto LABEL_68;
    }
    if ((v13 - 2) >= 2)
    {
      if ((_DWORD)v13 == 4)
      {
        v15 = (v14 & 0x4000000) == 0;
      }
      else if ((_DWORD)v13 != 5)
      {
        v21 = 3;
        if ((v14 & 0x4000000) == 0)
          v21 = 1;
LABEL_26:
        v22 = v18 + 8 * v21;
        goto LABEL_27;
      }
    }
    v21 = 2;
    if (v15)
      v21 = 0;
    goto LABEL_26;
  }
  if ((v13 - 1) > 4)
    v51 = 0;
  else
    v51 = qword_1969FC3D8[v13 - 1];
  v52 = v12 + 40 + 8 * v51;
  if (*(_BYTE *)(v52 + 4))
    v53 = *(_BYTE *)(v52 + 4) == 11;
  else
    v53 = 1;
  if (v53)
    goto LABEL_68;
  if (*(_BYTE *)(v52 + 6))
  {
    if (*(float *)v52 != 0.0)
      goto LABEL_68;
  }
  else if (*(_DWORD *)v52)
  {
    goto LABEL_68;
  }
  v54 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v54 > 4)
    v55 = 2;
  else
    v55 = qword_1969FC400[v54];
  v22 = v12 + 40 + 8 * v55;
LABEL_27:
  if (*(_BYTE *)(v22 + 4))
    v23 = *(_BYTE *)(v22 + 4) == 11;
  else
    v23 = 1;
  if (!v23)
  {
    if (*(_BYTE *)(v22 + 6))
    {
      if (*(float *)v22 == 0.0)
        goto LABEL_33;
    }
    else if (!*(_DWORD *)v22)
    {
LABEL_33:
      result = 0;
      goto LABEL_64;
    }
  }
LABEL_68:
  v64 = 0;
  if (a2)
  {
    WebCore::RenderBox::computeBlockDirectionMargins(this, a1, (WebCore::LayoutUnit *)((char *)&v64 + 4), (WebCore::LayoutUnit *)&v64);
  }
  else
  {
    v40 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1144))(this);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      v41 = (int *)((char *)this + 164);
    else
      v41 = (int *)((char *)this + 160);
    WebCore::RenderBox::computeInlineDirectionMargins((int *)this, a1, v40, 0, *v41, (int *)&v64 + 1, (int *)&v64);
  }
  v42 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v11)
  {
    if ((v42 - 1) > 4)
      v43 = 0;
    else
      v43 = qword_1969FC3D8[v42 - 1];
    goto LABEL_80;
  }
  v44 = *((_DWORD *)this + 30);
  v45 = (v44 >> 26) & 1;
  if ((v42 - 2) >= 2)
  {
    if ((_DWORD)v42 == 4)
    {
      v45 = (v44 & 0x4000000) == 0;
    }
    else if ((_DWORD)v42 != 5)
    {
      v43 = 3;
      if ((v44 & 0x4000000) != 0)
        v43 = 1;
      goto LABEL_80;
    }
  }
  v20 = v45 == 0;
  v43 = 2;
  if (v20)
    v43 = 0;
LABEL_80:
  v46 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40;
  if (!*(_BYTE *)(v46 + 8 * v43 + 4))
  {
    result = v64;
    goto LABEL_64;
  }
  if (!v11)
  {
    v49 = *((_DWORD *)this + 30);
    v50 = (v49 >> 26) & 1;
    if ((v42 - 2) >= 2)
    {
      if ((_DWORD)v42 == 4)
      {
        v50 = (v49 & 0x4000000) == 0;
      }
      else if ((_DWORD)v42 != 5)
      {
        v48 = 3;
        if ((v49 & 0x4000000) == 0)
          v48 = 1;
        goto LABEL_89;
      }
    }
    v48 = 2;
    if (v50)
      v48 = 0;
    goto LABEL_89;
  }
  v47 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v47 > 4)
    v48 = 2;
  else
    v48 = qword_1969FC400[v47];
LABEL_89:
  result = HIDWORD(v64);
  if (*(_BYTE *)(v46 + 8 * v48 + 4))
  {
    if (__OFADD__(HIDWORD(v64), (_DWORD)v64))
      result = ((HIDWORD(v64) >> 31) + 0x7FFFFFFF);
    else
      result = (HIDWORD(v64) + v64);
  }
LABEL_64:
  v39 = *(WebCore::RenderBlock **)(*((_QWORD *)this + 4) + 8);
  if (v39 != a1)
  {
    if (*((_BYTE *)v39 + 46) != 12)
    {
      __break(0xC471u);
      JUMPOUT(0x196331760);
    }
    v59 = result;
    if (((*((_BYTE *)v39 + 21) & 0x10) == 0) != ((*((_BYTE *)a1 + 21) & 0x10) == 0))
      v4 = v4 == 0;
    v60 = WebCore::GridLayoutFunctions::extraMarginForSubgridAncestors(v4, (uint64_t)this);
    v61 = v60 + HIDWORD(v60);
    if (__OFADD__((_DWORD)v60, HIDWORD(v60)))
      v61 = (v60 >> 31) + 0x7FFFFFFF;
    v62 = __OFADD__(v59, v61);
    v63 = v59 + v61;
    if (v62)
      return (v59 >> 31) + 0x7FFFFFFF;
    else
      return v63;
  }
  return result;
}

unint64_t WebCore::GridLayoutFunctions::overridingContainingBlockContentSizeForChild(WebCore::RenderBox *a1, int a2)
{
  if (a2)
    return WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(a1);
  else
    return WebCore::RenderBox::overridingContainingBlockContentLogicalWidth(a1);
}

uint64_t WebCore::GridLayoutFunctions::alignmentContextForBaselineAlignment(unsigned int *a1, _BYTE *a2)
{
  if (*a2 == 4)
    return *a1;
  else
    return a1[1] - 1;
}

void WebCore::FixedTableLayout::~FixedTableLayout(WebCore::FixedTableLayout *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _BYTE *v5;
  uint64_t v6;

  v3 = *((unsigned int *)this + 7);
  v4 = (WTF *)*((_QWORD *)this + 2);
  if ((_DWORD)v3)
  {
    v5 = (char *)v4 + 4;
    v6 = 8 * v3;
    do
    {
      if (*v5 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v5 - 1));
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
    v4 = (WTF *)*((_QWORD *)this + 2);
  }
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  uint64_t v3;
  WTF *v4;
  _BYTE *v5;
  uint64_t v6;

  v3 = *((unsigned int *)this + 7);
  v4 = (WTF *)*((_QWORD *)this + 2);
  if ((_DWORD)v3)
  {
    v5 = (char *)v4 + 4;
    v6 = 8 * v3;
    do
    {
      if (*v5 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v5 - 1));
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
    v4 = (WTF *)*((_QWORD *)this + 2);
  }
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::TableLayout::scaledWidthFromPercentColumns(WebCore::TableLayout *this)
{
  return 0;
}

void std::default_delete<WebCore::BaselineAlignmentState>::operator()[abi:sn180100](int a1, WTF *this)
{
  unsigned int v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;

  if (this)
  {
    v3 = *((_DWORD *)this + 3);
    v4 = *(WTF **)this;
    if (v3)
    {
      v5 = (WTF *)((char *)v4 + 24 * v3);
      do
      {
        v6 = *((_QWORD *)v4 + 1);
        if (v6)
        {
          v7 = *(unsigned int *)(v6 - 4);
          if ((_DWORD)v7)
          {
            v8 = (WTF **)*((_QWORD *)v4 + 1);
            do
            {
              v9 = *v8;
              if (*v8 != (WTF *)-1)
              {
                *v8 = 0;
                if (v9)
                {
                  if (*(_DWORD *)v9 == 1)
                    WTF::fastFree(v9, this);
                  else
                    --*(_DWORD *)v9;
                }
              }
              ++v8;
              --v7;
            }
            while (v7);
          }
          WTF::fastFree((WTF *)(v6 - 16), this);
        }
        v4 = (WTF *)((char *)v4 + 24);
      }
      while (v4 != v5);
      v4 = *(WTF **)this;
    }
    if (v4)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v4, this);
    }
    WTF::fastFree(this, this);
  }
}

uint64_t WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  unsigned int v9;
  unsigned int v11;
  int v12;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_2;
  v4 = *(unsigned int *)(v2 - 4);
  if (!(_DWORD)v4)
    goto LABEL_21;
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    v7 = v6;
    v8 = *(WTF **)(v2 + 8 * v6);
    if ((unint64_t)v8 + 1 >= 2 && !*((_QWORD *)v8 + 1))
    {
      v20 = v6;
      v21 = a1;
      v19 = v5;
      v17 = v6;
      v18 = v2;
      *(_QWORD *)(v2 + 8 * v6) = 0;
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, a2);
      else
        --*(_DWORD *)v8;
      v7 = v17;
      v2 = v18;
      *(_QWORD *)(v18 + 8 * v17) = -1;
      v5 = v19 + 1;
      v6 = v20;
      a1 = v21;
    }
    --v6;
  }
  while (v7);
  v2 = *(_QWORD *)a1;
  if (v5)
  {
    v14 = v5;
    *(_DWORD *)(v2 - 16) += v5;
    v15 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v16 = *(_DWORD *)(v15 - 12);
    else
      v16 = 0;
    *(_DWORD *)(v15 - 12) = v16 - v14;
    v2 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_2;
  }
  else if (!v2)
  {
LABEL_2:
    *(_DWORD *)(a1 + 8) = 0;
LABEL_3:
    v3 = 0;
    *(_DWORD *)(a1 + 12) = 0;
    return v3;
  }
  v9 = *(_DWORD *)(v2 - 4);
  if (v9 < 9 || 6 * *(_DWORD *)(v2 - 12) >= v9)
  {
LABEL_21:
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    v22 = a1;
    WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
    a1 = v22;
    v2 = *(_QWORD *)v22;
    *(_DWORD *)(v22 + 8) = 0;
    if (!v2)
      goto LABEL_3;
  }
  v11 = *(_DWORD *)(v2 - 12);
  if (v11 >= 0x7FFFFFFF)
    v12 = -2;
  else
    v12 = 2 * v11;
  *(_DWORD *)(a1 + 12) = v12;
  return *(unsigned int *)(v2 - 12);
}

uint64_t WTF::Vector<WebCore::FlexItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WTF *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x6666667)
    {
LABEL_20:
      __break(0xC471u);
      JUMPOUT(0x196331CC8);
    }
    v6 = *(WTF **)a1;
    v7 = *(_DWORD *)(a1 + 12);
    v8 = 40 * v4;
    v9 = WTF::fastMalloc((WTF *)(40 * v4));
    *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v9;
    if (v7)
    {
      v12 = v6;
      do
      {
        v13 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)v9 = v13;
        v14 = *((_QWORD *)v12 + 1);
        *(_DWORD *)(v9 + 16) = *((_DWORD *)v12 + 4);
        *(_QWORD *)(v9 + 8) = v14;
        *(_DWORD *)(v9 + 20) = *((_DWORD *)v12 + 5);
        *(_DWORD *)(v9 + 24) = *((_DWORD *)v12 + 6);
        v15 = *(_QWORD *)((char *)v12 + 28);
        *(_WORD *)(v9 + 36) = *((_WORD *)v12 + 18);
        *(_QWORD *)(v9 + 28) = v15;
        v16 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        if (v16)
        {
          v17 = *(_DWORD *)(v16 + 16);
          if (!v17)
            goto LABEL_20;
          *(_DWORD *)(v16 + 16) = v17 - 1;
        }
        v12 = (WTF *)((char *)v12 + 40);
        v9 += 40;
      }
      while (v12 != (WTF *)((char *)v6 + 40 * v7));
    }
    if (v6)
    {
      if (*(WTF **)a1 == v6)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v6, v10);
    }
  }
  return 1;
}

uint64_t *WebCore::PODIntervalTree<WebCore::LayoutUnit,WebCore::FloatingObject *>::searchForOverlapsFrom<WebCore::FindNextFloatLogicalBottomAdapter>(uint64_t *result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    do
    {
      if (*v4)
      {
        if (*(_DWORD *)(*v4 + 48) >= *(_DWORD *)(a3 + 8))
          WebCore::PODIntervalTree<WebCore::LayoutUnit,WebCore::FloatingObject *>::searchForOverlapsFrom<WebCore::FindNextFloatLogicalBottomAdapter>(v5);
      }
      result = WebCore::FindNextFloatLogicalBottomAdapter::collectIfNeeded((uint64_t *)a3, (uint64_t)(v4 + 4));
      v4 = (_QWORD *)v4[1];
    }
    while (v4);
  }
  return result;
}

uint64_t *WebCore::FindNextFloatLogicalBottomAdapter::collectIfNeeded(uint64_t *result, uint64_t a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  _QWORD *v14;
  int isEnabledFor;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;

  v2 = *(_DWORD **)(a2 + 8);
  v3 = v2[5];
  if (v3)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (*((_DWORD *)result + 2) < v4)
    {
      v5 = v4 == 0x7FFFFFFF && *(_DWORD *)a2 == 0x7FFFFFFF;
      if (!v5)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*result + 8) + 21) & 0x10) != 0)
        {
          v6 = v2[2];
          v7 = v2[4];
          v8 = __OFADD__(v6, v7);
          v9 = v6 + v7;
          v10 = (v6 >> 31) + 0x7FFFFFFF;
          if (!v8)
            v10 = v9;
        }
        else
        {
          v12 = v2[3];
          v8 = __OFADD__(v12, v3);
          v10 = v12 + v3;
          v13 = (v12 >> 31) + 0x7FFFFFFF;
          if (v8)
            v10 = v13;
        }
        if (!*((_BYTE *)result + 16) || *((_DWORD *)result + 3) >= v10)
        {
          v11 = *(_QWORD *)(*(_QWORD *)v2 + 8);
          if ((*(_WORD *)(v11 + 69) & 0x800) == 0)
            goto LABEL_51;
          v36 = result;
          v35 = v10;
          v14 = *(_QWORD **)(a2 + 8);
          isEnabledFor = WebCore::ShapeOutsideInfo::isEnabledFor((WebCore::ShapeOutsideInfo *)v11, (const WebCore::RenderBox *)a2);
          v10 = v35;
          v16 = isEnabledFor;
          result = v36;
          if (!v16)
            goto LABEL_51;
          {
            WebCore::shapeOutsideInfoMap(void)::staticInfoMap = 0;
            *(_QWORD *)&dword_1EE2F9340 = 0;
          }
          v17 = WTF::WeakHashMap<WebCore::RenderBox const,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::SingleThreadWeakPtrImpl>::get(&WebCore::shapeOutsideInfoMap(void)::staticInfoMap, v11);
          result = v36;
          v10 = v35;
          if (v17)
          {
            v18 = *v36;
            if (*v36)
            {
              v18 = *(_QWORD *)(v18 + 8);
              v19 = v18 + 20;
            }
            else
            {
              v19 = 20;
            }
            v20 = (unsigned int *)(v14 + 1);
            v5 = (*(_DWORD *)v19 & 0x1000) == 0;
            v23 = *v14;
            v22 = (unsigned int *)v14 + 3;
            v21 = v23;
            if (v5)
              v20 = v22;
            v24 = *v20;
            v25 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v21 + 8) + 1112))(*(_QWORD *)(v21 + 8), v18 + 80);
            if (__OFADD__(v24, v25))
              v26 = (v24 >> 31) + 0x7FFFFFFF;
            else
              v26 = v24 + v25;
            v27 = *(_QWORD *)(v17 + 8);
            if (!v27)
            {
              WebCore::makeShapeForShapeOutside(*(WebCore **)v17, &v37);
              v27 = v37;
              v28 = *(_DWORD **)(v17 + 8);
              *(_QWORD *)(v17 + 8) = v37;
              if (v28)
              {
                if (v28[2] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
                  v27 = *(_QWORD *)(v17 + 8);
                }
                else
                {
                  --v28[2];
                }
              }
            }
            v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
            v31 = (HIDWORD(v29) >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(HIDWORD(v29), v30))
              v31 = HIDWORD(v29) + v30;
            v8 = __OFADD__(v26, v31);
            v32 = v26 + v31;
            v33 = (v26 >> 31) + 0x7FFFFFFF;
            if (!v8)
              v33 = v32;
            v34 = v35;
            if (v35 >= v33)
              v34 = v33;
            if (!*((_BYTE *)v36 + 24))
              *((_BYTE *)v36 + 24) = 1;
            result = v36;
            *((_DWORD *)v36 + 5) = v34;
            v10 = v35;
          }
          else
          {
LABEL_51:
            if (!*((_BYTE *)result + 24))
              *((_BYTE *)result + 24) = 1;
            *((_DWORD *)result + 5) = v10;
          }
          if (!*((_BYTE *)result + 16))
            *((_BYTE *)result + 16) = 1;
          *((_DWORD *)result + 3) = v10;
        }
      }
    }
  }
  return result;
}

uint64_t **WebCore::PODRedBlackTree<WebCore::PODInterval<WebCore::LayoutUnit,WebCore::FloatingObject *>,WebCore::PODIntervalNodeUpdater>::insertNode(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  int v3;
  uint64_t **v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *i;
  _QWORD *v18;
  uint64_t *v19;
  _DWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t **v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t **v37;
  int *v38;
  uint64_t v39;
  int *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int *v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int *v56;
  int *v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t **v67;
  uint64_t **v68;
  int *v69;
  uint64_t v70;
  int *v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  int *v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  int *v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t **v87;
  int *v88;
  int *v89;
  int v90;
  uint64_t v91;
  int v92;
  int *v93;
  int v94;
  uint64_t *v95;
  int *v96;
  uint64_t v97;
  int *v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;

  v2 = *result;
  if (*result)
  {
    v3 = *((_DWORD *)a2 + 8);
    do
    {
      while (1)
      {
        v4 = (uint64_t **)v2;
        v5 = *((_DWORD *)v2 + 8);
        if (v3 >= v5)
          break;
        v2 = (uint64_t *)*v2;
        if (!*v4)
        {
          a2[2] = (uint64_t)v4;
          goto LABEL_20;
        }
      }
      if (v5 < v3
        || (v6 = *((_DWORD *)a2 + 9), v7 = *((_DWORD *)v2 + 9), v6 >= v7)
        && (v7 < v6 || a2[5] >= (unint64_t)v2[5]))
      {
        ++v2;
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
    a2[2] = (uint64_t)v4;
    if (v5 < v3
      || (v8 = *((_DWORD *)a2 + 9), v9 = *((_DWORD *)v4 + 9), v8 >= v9) && (v9 < v8 || a2[5] >= (unint64_t)v4[5]))
    {
      ++v4;
    }
  }
  else
  {
    a2[2] = 0;
    v4 = result;
  }
LABEL_20:
  *v4 = a2;
  *((_DWORD *)a2 + 6) = 0;
  v10 = (int *)a2 + 9;
  v11 = *a2;
  if (*a2)
  {
    v13 = *(_DWORD *)(v11 + 48);
    v12 = (int *)(v11 + 48);
    if (*v10 < v13)
      v10 = v12;
  }
  v14 = a2[1];
  if (v14)
  {
    v15 = *v10;
    v16 = *(_DWORD *)(v14 + 48);
    if (v15 <= v16)
      v15 = v16;
  }
  else
  {
    v15 = *v10;
  }
  if (v15 != *((_DWORD *)a2 + 12))
    *((_DWORD *)a2 + 12) = v15;
  v18 = a2 + 2;
  i = (uint64_t *)a2[2];
  v19 = *result;
  if (*result != a2)
  {
    v20 = i + 3;
    if (!*((_DWORD *)i + 6))
    {
      while (1)
      {
        v21 = (uint64_t *)i[2];
        v22 = (uint64_t *)*v21;
        if (i == (uint64_t *)*v21)
          break;
        if (v22 && !*((_DWORD *)v22 + 6))
        {
          *v20 = 1;
          *((_DWORD *)v22 + 6) = 1;
          *((_DWORD *)v21 + 6) = 0;
          v28 = (int *)i + 9;
          v29 = *i;
          if (*i)
          {
            v31 = *(_DWORD *)(v29 + 48);
            v30 = (int *)(v29 + 48);
            if (*v28 < v31)
              v28 = v30;
          }
          v32 = i[1];
          if (v32)
          {
            v33 = *v28;
            v34 = *(_DWORD *)(v32 + 48);
            if (v33 <= v34)
              v33 = v34;
          }
          else
          {
            v33 = *v28;
          }
          if (v33 != *((_DWORD *)i + 12))
            *((_DWORD *)i + 12) = v33;
          v52 = *((_DWORD *)v21 + 9);
          if (v52 <= *((_DWORD *)v22 + 12))
            v52 = *((_DWORD *)v22 + 12);
          v53 = v21[1];
          if (v53)
          {
            v54 = *(_DWORD *)(v53 + 48);
            if (v52 <= v54)
              v52 = v54;
          }
          v55 = *((_DWORD *)v21 + 12);
LABEL_165:
          if (v52 != v55)
            *((_DWORD *)v21 + 12) = v52;
          v66 = (uint64_t **)(v21 + 2);
          a2 = v21;
          goto LABEL_168;
        }
        if (a2 == (uint64_t *)*i)
        {
          v26 = a2[1];
          *i = v26;
          if (v26)
          {
            *(_QWORD *)(v26 + 16) = i;
            v21 = (uint64_t *)i[2];
          }
          *v18 = v21;
          v27 = (uint64_t **)i[2];
          if (v27)
          {
            if (*v27 == i)
            {
              *v27 = a2;
              v26 = *i;
            }
            else
            {
              v27[1] = a2;
            }
          }
          else
          {
            *result = a2;
          }
          a2[1] = (uint64_t)i;
          i[2] = (uint64_t)a2;
          v56 = (int *)i + 9;
          if (v26)
          {
            v58 = *(_DWORD *)(v26 + 48);
            v57 = (int *)(v26 + 48);
            if (*v56 < v58)
              v56 = v57;
          }
          v59 = i[1];
          if (v59)
          {
            v60 = *v56;
            v61 = *(_DWORD *)(v59 + 48);
            if (v60 <= v61)
              v60 = v61;
          }
          else
          {
            v60 = *v56;
          }
          if (v60 != *((_DWORD *)i + 12))
            *((_DWORD *)i + 12) = v60;
          if (*a2)
          {
            v62 = *(_DWORD *)(*a2 + 48);
            if (*((_DWORD *)a2 + 9) > v62)
              v62 = *((_DWORD *)a2 + 9);
          }
          else
          {
            v62 = *((_DWORD *)a2 + 9);
          }
          if (v62 > v60)
            v60 = v62;
          if (v60 != *((_DWORD *)a2 + 12))
            *((_DWORD *)a2 + 12) = v60;
          v23 = a2;
        }
        else
        {
          v23 = i;
          i = a2;
        }
        *((_DWORD *)v23 + 6) = 1;
        v63 = (uint64_t *)v23[2];
        *((_DWORD *)v63 + 6) = 0;
        v64 = (uint64_t *)v63[1];
        v65 = *v64;
        v63[1] = *v64;
        if (v65)
          *(_QWORD *)(v65 + 16) = v63;
        v64[2] = v63[2];
        v66 = (uint64_t **)(v64 + 2);
        v67 = (uint64_t **)v63[2];
        v68 = result;
        if (v67)
        {
          v68 = v67 + 1;
          if (*v67 == v63)
            v68 = (uint64_t **)v63[2];
        }
        *v68 = v64;
        *v64 = (uint64_t)v63;
        v63[2] = (uint64_t)v64;
        v69 = (int *)v63 + 9;
        v70 = *v63;
        if (*v63)
        {
          v72 = *(_DWORD *)(v70 + 48);
          v71 = (int *)(v70 + 48);
          if (*v69 < v72)
            v69 = v71;
        }
        v73 = v63[1];
        if (v73)
        {
          v74 = *v69;
          v75 = *(_DWORD *)(v73 + 48);
          if (v74 <= v75)
            v74 = v75;
        }
        else
        {
          v74 = *v69;
        }
        v77 = *((_DWORD *)v63 + 12);
        v76 = (int *)(v63 + 6);
        if (v74 != v77)
          *v76 = v74;
        if (*((_DWORD *)v64 + 9) >= v74)
          v76 = (int *)v64 + 9;
        v78 = v64[1];
        if (v78)
        {
          v79 = *v76;
          v80 = *(_DWORD *)(v78 + 48);
LABEL_152:
          if (v79 <= v80)
            v79 = v80;
          goto LABEL_154;
        }
        v79 = *v76;
LABEL_154:
        if (v79 != *((_DWORD *)v64 + 12))
          *((_DWORD *)v64 + 12) = v79;
        a2 = i;
LABEL_168:
        v95 = *v66;
        if (a2 == *result)
          goto LABEL_172;
        v18 = a2 + 2;
        i = (uint64_t *)a2[2];
        v20 = i + 3;
        if (*((_DWORD *)i + 6))
        {
          a2 = *result;
          goto LABEL_172;
        }
      }
      v24 = v21[1];
      if (v24 && !*(_DWORD *)(v24 + 24))
      {
        *v20 = 1;
        *(_DWORD *)(v24 + 24) = 1;
        *((_DWORD *)v21 + 6) = 0;
        v45 = (int *)i + 9;
        v46 = *i;
        if (*i)
        {
          v48 = *(_DWORD *)(v46 + 48);
          v47 = (int *)(v46 + 48);
          if (*v45 < v48)
            v45 = v47;
        }
        v49 = i[1];
        if (v49)
        {
          v50 = *v45;
          v51 = *(_DWORD *)(v49 + 48);
          if (v50 <= v51)
            v50 = v51;
        }
        else
        {
          v50 = *v45;
        }
        v94 = *((_DWORD *)i + 12);
        v93 = (int *)(i + 6);
        if (v50 != v94)
          *v93 = v50;
        if (*((_DWORD *)v21 + 9) >= v50)
          v93 = (int *)v21 + 9;
        v52 = *v93;
        if (v52 <= *(_DWORD *)(v24 + 48))
          v52 = *(_DWORD *)(v24 + 48);
        v55 = *((_DWORD *)v21 + 12);
        goto LABEL_165;
      }
      if (a2 == (uint64_t *)i[1])
      {
        v35 = *a2;
        i[1] = *a2;
        if (v35)
        {
          *(_QWORD *)(v35 + 16) = i;
          v21 = (uint64_t *)i[2];
        }
        *v18 = v21;
        v36 = (uint64_t **)i[2];
        v37 = result;
        if (v36)
        {
          v37 = v36 + 1;
          if (*v36 == i)
            v37 = (uint64_t **)i[2];
        }
        *v37 = a2;
        *a2 = (uint64_t)i;
        i[2] = (uint64_t)a2;
        v38 = (int *)i + 9;
        v39 = *i;
        if (*i)
        {
          v41 = *(_DWORD *)(v39 + 48);
          v40 = (int *)(v39 + 48);
          if (*v38 < v41)
            v38 = v40;
        }
        v42 = i[1];
        if (v42)
        {
          v43 = *v38;
          v44 = *(_DWORD *)(v42 + 48);
          if (v43 <= v44)
            v43 = v44;
        }
        else
        {
          v43 = *v38;
        }
        if (v43 != *((_DWORD *)i + 12))
          *((_DWORD *)i + 12) = v43;
        if (*((_DWORD *)a2 + 9) >= v43)
          v81 = (int *)a2 + 9;
        else
          v81 = (int *)(i + 6);
        v82 = a2[1];
        if (v82)
        {
          v83 = *v81;
          v84 = *(_DWORD *)(v82 + 48);
          if (v83 <= v84)
            v83 = v84;
        }
        else
        {
          v83 = *v81;
        }
        if (v83 != *((_DWORD *)a2 + 12))
          *((_DWORD *)a2 + 12) = v83;
        v25 = a2;
      }
      else
      {
        v25 = i;
        i = a2;
      }
      *((_DWORD *)v25 + 6) = 1;
      v85 = (uint64_t *)v25[2];
      *((_DWORD *)v85 + 6) = 0;
      v64 = (uint64_t *)*v85;
      v86 = *(uint64_t **)(*v85 + 8);
      *v85 = (uint64_t)v86;
      if (v86)
        v86[2] = (uint64_t)v85;
      v64[2] = v85[2];
      v66 = (uint64_t **)(v64 + 2);
      v87 = (uint64_t **)v85[2];
      if (v87)
      {
        if (*v87 == v85)
        {
          *v87 = v64;
          v86 = (uint64_t *)*v85;
        }
        else
        {
          v87[1] = v64;
        }
      }
      else
      {
        *result = v64;
      }
      v64[1] = (uint64_t)v85;
      v85[2] = (uint64_t)v64;
      v88 = (int *)v85 + 9;
      if (v86)
      {
        v90 = *((_DWORD *)v86 + 12);
        v89 = (int *)(v86 + 6);
        if (*v88 < v90)
          v88 = v89;
      }
      v91 = v85[1];
      if (v91)
      {
        v92 = *v88;
        v80 = *(_DWORD *)(v91 + 48);
        if (v92 > v80)
          v80 = v92;
      }
      else
      {
        v80 = *v88;
      }
      if (v80 != *((_DWORD *)v85 + 12))
        *((_DWORD *)v85 + 12) = v80;
      if (*v64)
      {
        v79 = *(_DWORD *)(*v64 + 48);
        if (*((_DWORD *)v64 + 9) > v79)
          v79 = *((_DWORD *)v64 + 9);
      }
      else
      {
        v79 = *((_DWORD *)v64 + 9);
      }
      goto LABEL_152;
    }
    goto LABEL_173;
  }
  v95 = (uint64_t *)a2[2];
LABEL_172:
  v19 = a2;
  for (i = v95; i; i = (uint64_t *)i[2])
  {
LABEL_173:
    v96 = (int *)i + 9;
    v97 = *i;
    if (*i)
    {
      v99 = *(_DWORD *)(v97 + 48);
      v98 = (int *)(v97 + 48);
      if (*v96 < v99)
        v96 = v98;
    }
    v100 = i[1];
    if (v100)
    {
      v101 = *v96;
      v102 = *(_DWORD *)(v100 + 48);
      if (v101 <= v102)
        v101 = v102;
    }
    else
    {
      v101 = *v96;
    }
    if (v101 == *((_DWORD *)i + 12))
      break;
    *((_DWORD *)i + 12) = v101;
  }
  *((_DWORD *)v19 + 6) = 1;
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WebCore::FloatingObjectHashFunctions>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  uint64_t **v8;
  uint64_t v9;
  uint64_t ***v10;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = v5;
    v10 = (uint64_t ***)v4;
    do
    {
      v8 = *v10;
      if ((unint64_t)*v10 + 1 >= 2)
        WTF::HashTable<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WebCore::FloatingObjectHashFunctions>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>>::reinsert(*a1, v8);
      ++v10;
      --v9;
    }
    while (v9);
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t ***WTF::HashTable<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WebCore::FloatingObjectHashFunctions>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>>::reinsert(uint64_t a1, uint64_t **a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t ***result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = **a2;
  if (v3)
    v3 = *(_QWORD *)(v3 + 8);
  v4 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v2 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(a1 + 8 * v7);
    v7 = (v7 + v8++) & v2;
  }
  while (v10);
  result = (uint64_t ***)(a1 + 8 * v9);
  *result = a2;
  return result;
}

BOOL WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::remove(uint64_t *a1, void *a2, uint64_t **this)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int j;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t **v25;
  WTF *v26;
  WTF *v27;
  int i;
  uint64_t **v30;
  uint64_t v31;

  if (this)
  {
    v5 = *a1;
    if (*a1)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = **this;
      if (v7)
        v8 = *(_QWORD *)(v7 + 8);
      else
        v8 = 0;
      v9 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v6 & ((v11 >> 31) ^ v11);
      if (v7)
      {
        for (i = 1; ; ++i)
        {
          v14 = v12;
          v30 = *(uint64_t ***)(v5 + 8 * v12);
          if (v30 != (uint64_t **)-1)
          {
            if (!v30)
            {
LABEL_44:
              v14 = *(unsigned int *)(v5 - 4);
              goto LABEL_10;
            }
            v31 = **v30;
            if (v31)
              v31 = *(_QWORD *)(v31 + 8);
            if (v31 == *(_QWORD *)(v7 + 8))
              goto LABEL_10;
          }
          v12 = (v14 + i) & v6;
        }
      }
      for (j = 1; ; ++j)
      {
        v14 = v12;
        v15 = *(uint64_t ***)(v5 + 8 * v12);
        if (v15 != (uint64_t **)-1)
        {
          if (!v15)
            goto LABEL_44;
          v16 = **v15;
          if (!v16 || !*(_QWORD *)(v16 + 8))
            break;
        }
        v12 = (v12 + j) & v6;
      }
LABEL_10:
      if (v14 != *(_DWORD *)(v5 - 4))
      {
        *(_QWORD *)(v5 + 8 * v14) = -1;
        ++*(_DWORD *)(*a1 - 16);
        v17 = *a1;
        v18 = *a1 ? *(_DWORD *)(v17 - 12) - 1 : -1;
        *(_DWORD *)(v17 - 12) = v18;
        v19 = *a1;
        if (*a1)
        {
          v20 = 6 * *(_DWORD *)(v19 - 12);
          v21 = *(_DWORD *)(v19 - 4);
          if (v20 < v21 && v21 >= 9)
            WTF::HashTable<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WebCore::FloatingObjectHashFunctions>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>>::rehash(a1, v21 >> 1);
        }
      }
    }
    v23 = this[1];
    v24 = (uint64_t)this[2];
    if (v23)
    {
      v23[2] = v24;
      v24 = (uint64_t)this[2];
    }
    else
    {
      a1[1] = v24;
    }
    if (v24)
      v25 = (uint64_t **)(v24 + 8);
    else
      v25 = (uint64_t **)(a1 + 2);
    *v25 = v23;
    v26 = (WTF *)*this;
    *this = 0;
    if (v26)
    {
      v27 = *(WTF **)v26;
      *(_QWORD *)v26 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          WTF::fastFree(v27, a2);
        else
          --*(_DWORD *)v27;
      }
      WTF::fastFree(v26, a2);
    }
    WTF::fastFree((WTF *)this, a2);
  }
  return this != 0;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WebCore::FloatingObjectHashFunctions>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>>::find<WTF::ListHashSetTranslator<WebCore::FloatingObjectHashFunctions>,WebCore::FloatingObject const*>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int j;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  int i;
  uint64_t **v16;
  uint64_t v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = **a2;
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v3 & ((v8 >> 31) ^ v8);
  if (v4)
  {
    for (i = 1; ; ++i)
    {
      v11 = v9;
      v16 = *(uint64_t ***)(v2 + 8 * v9);
      if (v16 != (uint64_t **)-1)
      {
        if (!v16)
          return v2 + 8 * *(unsigned int *)(v2 - 4);
        v17 = **v16;
        if (v17)
          v17 = *(_QWORD *)(v17 + 8);
        if (v17 == *(_QWORD *)(v4 + 8))
          return v2 + 8 * v11;
      }
      v9 = (v11 + i) & v3;
    }
  }
  for (j = 1; ; ++j)
  {
    v11 = v9;
    v12 = *(uint64_t ***)(v2 + 8 * v9);
    if (v12 != (uint64_t **)-1)
    {
      if (!v12)
        return v2 + 8 * *(unsigned int *)(v2 - 4);
      v13 = **v12;
      if (!v13 || !*(_QWORD *)(v13 + 8))
        break;
    }
    v9 = (v9 + j) & v3;
  }
  return v2 + 8 * v11;
}

void WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)1>::~ComputeFloatOffsetForFloatLayoutAdapter(_QWORD *a1, void *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = off_1E341E438;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)1>::updateOffsetIfNeeded(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  int v7;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 21) & 0x10) != 0)
  {
    v2 = a2[3];
    v3 = a2[5];
  }
  else
  {
    v2 = a2[2];
    v3 = a2[4];
  }
  v4 = __OFADD__(v2, v3);
  v5 = v2 + v3;
  v6 = (v2 >> 31) + 0x7FFFFFFF;
  if (!v4)
    v6 = v5;
  v7 = *(_DWORD *)(a1 + 24);
  if (v6 > v7)
    *(_DWORD *)(a1 + 24) = v6;
  return v6 > v7;
}

uint64_t WebCore::PODIntervalTree<WebCore::LayoutUnit,WebCore::FloatingObject *>::searchForOverlapsFrom<WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;

  if (result)
  {
    v3 = result;
    do
    {
      result = *(_QWORD *)v3;
      if (*(_QWORD *)v3 && *(_DWORD *)(result + 48) >= *(_DWORD *)(a2 + 16))
        result = WebCore::PODIntervalTree<WebCore::LayoutUnit,WebCore::FloatingObject *>::searchForOverlapsFrom<WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)1>>();
      v4 = *(_QWORD *)(v3 + 40);
      if ((*(_BYTE *)(v4 + 36) & 3) == 1 && *(_DWORD *)(v4 + 20))
      {
        v5 = *(_DWORD *)(v3 + 32);
        v6 = *(_DWORD *)(v3 + 36);
        v8 = *(_DWORD *)(a2 + 16);
        v7 = *(_DWORD *)(a2 + 20);
        v9 = v8 >= v6 || v7 < v5;
        if (!v9 && (v8 >= v5 || v7 > v6 || v7 > v5))
        {
          result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v3 + 40));
          if ((_DWORD)result)
            *(_QWORD *)(a2 + 32) = v4;
        }
      }
      if (*(_DWORD *)(a2 + 20) < *(_DWORD *)(v3 + 32))
        break;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
  return result;
}

void WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)2>::~ComputeFloatOffsetForFloatLayoutAdapter(_QWORD *a1, void *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = off_1E341E460;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)2>::updateOffsetIfNeeded(uint64_t a1, uint64_t a2)
{
  int *v2;
  int v3;
  int v4;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 21) & 0x10) != 0)
    v2 = (int *)(a2 + 12);
  else
    v2 = (int *)(a2 + 8);
  v3 = *v2;
  v4 = *(_DWORD *)(a1 + 24);
  if (v3 < v4)
    *(_DWORD *)(a1 + 24) = v3;
  return v3 < v4;
}

uint64_t WebCore::PODIntervalTree<WebCore::LayoutUnit,WebCore::FloatingObject *>::searchForOverlapsFrom<WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)2>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;

  if (result)
  {
    v3 = result;
    do
    {
      result = *(_QWORD *)v3;
      if (*(_QWORD *)v3 && *(_DWORD *)(result + 48) >= *(_DWORD *)(a2 + 16))
        result = WebCore::PODIntervalTree<WebCore::LayoutUnit,WebCore::FloatingObject *>::searchForOverlapsFrom<WebCore::ComputeFloatOffsetForFloatLayoutAdapter<(WebCore::FloatingObject::Type)2>>();
      v4 = *(_QWORD *)(v3 + 40);
      if ((*(_BYTE *)(v4 + 36) & 3) == 2 && *(_DWORD *)(v4 + 20))
      {
        v5 = *(_DWORD *)(v3 + 32);
        v6 = *(_DWORD *)(v3 + 36);
        v8 = *(_DWORD *)(a2 + 16);
        v7 = *(_DWORD *)(a2 + 20);
        v9 = v8 >= v6 || v7 < v5;
        if (!v9 && (v8 >= v5 || v7 > v6 || v7 > v5))
        {
          result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v3 + 40));
          if ((_DWORD)result)
            *(_QWORD *)(a2 + 32) = v4;
        }
      }
      if (*(_DWORD *)(a2 + 20) < *(_DWORD *)(v3 + 32))
        break;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
  return result;
}

void WebCore::ComputeFloatOffsetForLineLayoutAdapter<(WebCore::FloatingObject::Type)1>::~ComputeFloatOffsetForLineLayoutAdapter(_QWORD *a1, void *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = off_1E341E438;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::ComputeFloatOffsetForLineLayoutAdapter<(WebCore::FloatingObject::Type)1>::updateOffsetIfNeeded(uint64_t a1, const WebCore::RenderBox *a2)
{
  unsigned int v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _BYTE v21[4];
  int v22;
  unsigned __int8 v23;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 21) & 0x10) != 0)
  {
    v2 = *((_DWORD *)a2 + 3);
    v3 = *((_DWORD *)a2 + 5);
  }
  else
  {
    v2 = *((_DWORD *)a2 + 2);
    v3 = *((_DWORD *)a2 + 4);
  }
  v4 = __OFADD__(v2, v3);
  v5 = v2 + v3;
  v6 = (v2 >> 31) + 0x7FFFFFFF;
  if (v4)
    v5 = v6;
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if ((*(_WORD *)(v7 + 69) & 0x800) != 0)
  {
    v19 = v5;
    v18 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    v20 = a1;
    if (!WebCore::ShapeOutsideInfo::isEnabledFor((WebCore::ShapeOutsideInfo *)v7, a2))
      goto LABEL_25;
    {
      WebCore::shapeOutsideInfoMap(void)::staticInfoMap = 0;
      *(_QWORD *)&dword_1EE2F9340 = 0;
    }
    v9 = (_QWORD *)WTF::WeakHashMap<WebCore::RenderBox const,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::SingleThreadWeakPtrImpl>::get(&WebCore::shapeOutsideInfoMap(void)::staticInfoMap, v18);
    if (v9)
    {
      v10 = *(_QWORD *)(v20 + 8);
      if (v10)
        v11 = *(_QWORD *)(v10 + 8);
      else
        v11 = 0;
      v12 = *(_DWORD *)(v20 + 16);
      v13 = *(_DWORD *)(v20 + 20);
      v4 = __OFSUB__(v13, v12);
      v14 = v13 - v12;
      v15 = (v13 >> 31) + 0x7FFFFFFF;
      if (v4)
        v16 = v15;
      else
        v16 = v14;
      WebCore::ShapeOutsideInfo::computeDeltasForContainingBlockLine(v9, v11, a2, v12, v16, (uint64_t)v21);
      if ((~v23 & 3) != 0)
        return 0;
      v5 = (v19 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(v19, v22))
        v5 = v19 + v22;
      a1 = v20;
    }
    else
    {
LABEL_25:
      a1 = v20;
      v5 = v19;
    }
  }
  if (v5 > *(_DWORD *)(a1 + 24))
  {
    *(_DWORD *)(a1 + 24) = v5;
    return 1;
  }
  return 0;
}

void WebCore::ComputeFloatOffsetForLineLayoutAdapter<(WebCore::FloatingObject::Type)2>::~ComputeFloatOffsetForLineLayoutAdapter(_QWORD *a1, void *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = off_1E341E460;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::ComputeFloatOffsetForLineLayoutAdapter<(WebCore::FloatingObject::Type)2>::updateOffsetIfNeeded(uint64_t a1, const WebCore::RenderBox *a2)
{
  uint64_t v2;
  int *v3;
  int v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD v20[4];
  unsigned __int8 v21;

  v2 = a1;
  v3 = (int *)((char *)a2 + 12);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 21) & 0x10) == 0)
    v3 = (int *)((char *)a2 + 8);
  v4 = *v3;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if ((*(_WORD *)(v5 + 69) & 0x800) != 0)
  {
    v18 = v4;
    v17 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    v19 = v2;
    if (WebCore::ShapeOutsideInfo::isEnabledFor((WebCore::ShapeOutsideInfo *)v5, a2))
    {
      {
        WebCore::shapeOutsideInfoMap(void)::staticInfoMap = 0;
        *(_QWORD *)&dword_1EE2F9340 = 0;
      }
      v7 = (_QWORD *)WTF::WeakHashMap<WebCore::RenderBox const,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::SingleThreadWeakPtrImpl>::get(&WebCore::shapeOutsideInfoMap(void)::staticInfoMap, v17);
      v2 = v19;
      v4 = v18;
      if (v7)
      {
        v8 = *(_QWORD *)(v19 + 8);
        if (v8)
          v9 = *(_QWORD *)(v8 + 8);
        else
          v9 = 0;
        v10 = *(_DWORD *)(v19 + 16);
        v11 = *(_DWORD *)(v19 + 20);
        v12 = __OFSUB__(v11, v10);
        v13 = v11 - v10;
        v14 = (v11 >> 31) + 0x7FFFFFFF;
        if (v12)
          v15 = v14;
        else
          v15 = v13;
        WebCore::ShapeOutsideInfo::computeDeltasForContainingBlockLine(v7, v9, a2, v10, v15, (uint64_t)v20);
        if ((~v21 & 3) != 0)
          return 0;
        v4 = (v18 >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(v18, v20[0]))
          v4 = v18 + v20[0];
        v2 = v19;
      }
    }
    else
    {
      v2 = v19;
      v4 = v18;
    }
  }
  if (v4 < *(_DWORD *)(v2 + 24))
  {
    *(_DWORD *)(v2 + 24) = v4;
    return 1;
  }
  return 0;
}

uint64_t WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::GlyphDisplayListCacheEntry **v4;
  WebCore::GlyphDisplayListCacheEntry *v5;
  WTF *v6;
  void *v7;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::GlyphDisplayListCacheEntry **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebCore::GlyphDisplayListCacheEntry *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::GlyphDisplayListCacheEntry::~GlyphDisplayListCacheEntry(v5);
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebCore::GlyphDisplayListCacheEntry **WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>::~Ref(WebCore::GlyphDisplayListCacheEntry **a1)
{
  WebCore::GlyphDisplayListCacheEntry *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::GlyphDisplayListCacheEntry::~GlyphDisplayListCacheEntry(v2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(WTF **a1, void *a2)
{
  WTF **v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != (WTF *)-1)
        a1 = WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>::~WeakRef(a1, a2);
      ++a1;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t *WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  WTF *v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;

  v4 = result;
  v6 = *result;
  if (*result
    || (v32 = a3,
        v30 = a2,
        result = WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::expand(result),
        a2 = v30,
        a3 = v32,
        (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v25 = v6 + 16 * v31;
        goto LABEL_19;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *a3;
  *a3 = 0;
  result = (uint64_t *)v14[1];
  v14[1] = v18;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::GlyphDisplayListCacheEntry::~GlyphDisplayListCacheEntry((WebCore::GlyphDisplayListCacheEntry *)result);
      result = (uint64_t *)WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_18;
    goto LABEL_26;
  }
  if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v27 = 8;
      goto LABEL_27;
    }
LABEL_26:
    v27 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_27:
    result = WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(v4, v27, v14);
    v14 = result;
    v21 = *v4;
    if (*v4)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
  }
LABEL_18:
  v25 = v21 + 16 * v24;
  v26 = 1;
LABEL_19:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v25;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::lookup<WTF::HashSetTranslatorAdapter<WebCore::GlyphDisplayListCacheKeyTranslator>,WebCore::GlyphDisplayListCacheKey>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  const WTF::StringImpl *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  unsigned int v27;
  unsigned int v28;
  unsigned __int16 v29;
  char v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v28 = -1640531527;
    v29 = 0;
    v30 = 0;
    v5 = *a2;
    v6 = *((_DWORD *)a2 + 2);
    v7 = *((_DWORD *)a2 + 3);
    v8 = (unsigned __int8 *)(*a2 + 36);
    v9 = *(unsigned __int8 *)(*a2 + 37);
    v34 = (v9 >> 1) & 1;
    v35 = v9 & 1;
    v32 = (v9 >> 3) & 1;
    v33 = (v9 >> 2) & 1;
    v31 = (v9 >> 4) & 1;
    WTF::add<WTF::String,WebCore::TabSize,float,float,float,WebCore::ExpansionBehavior,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(&v28, *(_QWORD *)(v5 + 8), *(_DWORD *)(v5 + 24), *(_DWORD *)(v5 + 28), *(_DWORD *)(v5 + 32), v8, &v35, &v34, *(float *)(v5 + 16), &v33, &v32, &v31);
    v11 = (v6 >> 5) & 0x7FFF800 ^ ((v28 + (unsigned __int16)v6) << 16) ^ (v28 + (unsigned __int16)v6);
    v12 = (v7 >> 5) & 0x7FFF800 ^ ((v11 + (unsigned __int16)v7 + (v11 >> 11)) << 16) ^ (v11
                                                                                      + (unsigned __int16)v7
                                                                                      + (v11 >> 11));
    v13 = (*((_DWORD *)a2 + 4) >> 5) & 0x7FFF800 ^ ((v12 + (v12 >> 11) + (unsigned __int16)*((_DWORD *)a2 + 4)) << 16) ^ (v12 + (v12 >> 11) + (unsigned __int16)*((_DWORD *)a2 + 4));
    v14 = v13 + *((unsigned __int8 *)a2 + 20) + (v13 >> 11);
    v15 = (v14 ^ (v14 << 16)) + ((v14 ^ (v14 << 16)) >> 11);
    if (v30)
    {
      v27 = (v15 + v29) ^ ((v15 + v29) << 11);
      v15 = v27 + (v27 >> 17);
    }
    v16 = 0;
    v17 = (v15 ^ (8 * v15)) + ((v15 ^ (8 * v15)) >> 5);
    v18 = (v17 ^ (4 * v17)) + ((v17 ^ (4 * v17)) >> 15);
    v19 = v18 ^ (v18 << 10);
    if (!v19)
      v19 = 0x800000;
    while (1)
    {
      v20 = v19 & v4;
      v21 = *(_QWORD *)(v2 + 8 * v20);
      if (!v21)
        break;
      if (v21 != -1)
      {
        v22 = *(_QWORD *)(v21 + 8);
        v23 = *a2;
        if (WTF::equal(*(WTF **)(v22 + 32), *(const WTF::StringImpl **)(*a2 + 8), v10))
        {
          v24 = *(float *)(v22 + 40) == *(float *)(v23 + 16)
             && *(unsigned __int8 *)(v22 + 44) == *(unsigned __int8 *)(v23 + 20);
          if (v24
            && *(float *)(v22 + 48) == *(float *)(v23 + 24)
            && *(float *)(v22 + 52) == *(float *)(v23 + 28)
            && *(float *)(v22 + 56) == *(float *)(v23 + 32)
            && ((*(_BYTE *)(v23 + 36) ^ *(_BYTE *)(v22 + 60)) & 0xF) == 0
            && ((*(_BYTE *)(v23 + 37) ^ *(_BYTE *)(v22 + 61)) & 0x1F) == 0)
          {
            v25 = *(float *)(v22 + 64) == *((float *)a2 + 2) && *(float *)(v22 + 68) == *((float *)a2 + 3);
            if (v25
              && *(_DWORD *)(v22 + 72) == *((_DWORD *)a2 + 4)
              && *(unsigned __int8 *)(v22 + 76) == *((unsigned __int8 *)a2 + 20))
            {
              return v2 + 8 * v20;
            }
          }
        }
      }
      v19 = ++v16 + v20;
    }
  }
  return 0;
}

unsigned int *WTF::add<WTF::String,WebCore::TabSize,float,float,float,WebCore::ExpansionBehavior,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(unsigned int *result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned __int8 *a6, _DWORD *a7, _DWORD *a8, float a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;

  if (a2)
  {
    v12 = *(_DWORD *)(a2 + 4);
    v13 = v12 & 0xFFFFFFFE;
    if ((v12 & 0xFFFFFFFE) != 0)
    {
      v14 = 0;
      v15 = *result;
      do
      {
        v16 = *(unsigned int *)(a2 + 4);
        if (v14 >= v16)
        {
          v18 = 0;
        }
        else
        {
          v17 = *(_QWORD *)(a2 + 8);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
            v18 = *(unsigned __int8 *)(v17 + v14);
          else
            v18 = *(unsigned __int16 *)(v17 + 2 * v14);
        }
        v19 = v14 + 1;
        if (v14 + 1 >= v16)
        {
          v21 = 0;
        }
        else
        {
          v20 = *(_QWORD *)(a2 + 8);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
            v21 = *(unsigned __int8 *)(v20 + v14 + 1);
          else
            v21 = *(unsigned __int16 *)(v20 + 2 * v14 + 2);
        }
        v22 = (v18 << 11) ^ ((v15 + v21) << 16) ^ (v15 + v21);
        v15 = v22 + (v22 >> 11);
        *result = v15;
        v14 = v19 + 1;
      }
      while (v19 + 1 < v13);
    }
    if ((v12 & 1) != 0)
    {
      if (*(_DWORD *)(a2 + 4) <= v13)
      {
        v24 = 0;
      }
      else
      {
        v23 = *(_QWORD *)(a2 + 8);
        if ((*(_BYTE *)(a2 + 16) & 4) != 0)
          v24 = *(unsigned __int8 *)(v23 + v13);
        else
          v24 = *(unsigned __int16 *)(v23 + 2 * v13);
      }
      *result = ((*result + v24) ^ ((*result + v24) << 16)) + (((*result + v24) ^ ((*result + v24) << 16)) >> 11);
    }
  }
  v25 = *result;
  if (a9 != 0.0)
    ++v25;
  v26 = (v25 ^ (v25 << 16)) + (unsigned __int16)a3 + ((v25 ^ (v25 << 16)) >> 11);
  v27 = (a3 >> 5) & 0x7FFF800 ^ (v26 << 16) ^ v26;
  v28 = (a4 >> 5) & 0x7FFF800 ^ ((v27 + (unsigned __int16)a4 + (v27 >> 11)) << 16) ^ (v27
                                                                                    + (unsigned __int16)a4
                                                                                    + (v27 >> 11));
  v29 = (a5 >> 5) & 0x7FFF800 ^ ((v28 + (unsigned __int16)a5 + (v28 >> 11)) << 16) ^ (v28
                                                                                    + (unsigned __int16)a5
                                                                                    + (v28 >> 11));
  v30 = v29 + (v29 >> 11);
  *result = v30;
  v31 = *a6;
  v32 = ((v30 + (v31 & 3)) ^ ((v30 + (v31 & 3)) << 16))
      + ((v31 >> 2) & 3)
      + (((v30 + (v31 & 3)) ^ ((v30 + (v31 & 3)) << 16)) >> 11);
  v33 = (v32 ^ (v32 << 16)) + ((v32 ^ (v32 << 16)) >> 11);
  *result = v33;
  v34 = (*a7 >> 5) & 0x7FFF800 ^ ((v33 + (unsigned __int16)*a7) << 16) ^ (v33 + (unsigned __int16)*a7);
  v35 = v34 + (v34 >> 11);
  *result = v35;
  v36 = v35 + (unsigned __int16)*a8;
  v37 = (*a8 >> 5) & 0x7FFF800 ^ (v36 << 16);
  v38 = (v37 ^ v36) + ((v37 ^ v36) >> 11);
  *result = v38;
  v39 = (*a10 >> 5) & 0x7FFF800 ^ ((v38 + (unsigned __int16)*a10) << 16) ^ (v38 + (unsigned __int16)*a10);
  v40 = v39 + (v39 >> 11);
  *result = v40;
  v41 = (*a11 >> 5) & 0x7FFF800 ^ ((v40 + (unsigned __int16)*a11) << 16) ^ (v40 + (unsigned __int16)*a11);
  v42 = v41 + (v41 >> 11);
  *result = v42;
  v43 = (*a12 >> 5) & 0x7FFF800 ^ ((v42 + (unsigned __int16)*a12) << 16) ^ (v42 + (unsigned __int16)*a12);
  *result = v43 + (v43 >> 11);
  return result;
}

uint64_t *WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(a1, v3, 0);
}

uint64_t *WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  WebCore::GlyphDisplayListCacheEntry *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::GlyphDisplayListCacheEntry *v28;
  WebCore::GlyphDisplayListCacheEntry *v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  void *v33;
  WTF *v34;
  void *v35;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != -1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (uint64_t *)(v15 + 16 * v22);
          v25 = (WebCore::GlyphDisplayListCacheEntry *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 1)
            {
              WebCore::GlyphDisplayListCacheEntry::~GlyphDisplayListCacheEntry(v25);
              WTF::fastFree(v32, v33);
            }
            else
            {
              --*(_DWORD *)v25;
            }
          }
          *v24 = *v13;
          v26 = v6 + 16 * v11;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v24[1] = v27;
          v28 = *(WebCore::GlyphDisplayListCacheEntry **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
            {
              WebCore::GlyphDisplayListCacheEntry::~GlyphDisplayListCacheEntry(v28);
              WTF::fastFree(v34, v35);
            }
            else
            {
              --*(_DWORD *)v28;
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
      }
      else
      {
        v29 = (WebCore::GlyphDisplayListCacheEntry *)v13[1];
        v13[1] = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 1)
          {
            WebCore::GlyphDisplayListCacheEntry::~GlyphDisplayListCacheEntry(v29);
            WTF::fastFree(v30, v31);
          }
          else
          {
            --*(_DWORD *)v29;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebCore::TextRun::isolatedCopy@<X0>(WebCore::TextRun *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl **v3;
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  *(_DWORD *)a2 = 0;
  v2 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  if (!v2)
  {
    *(_QWORD *)(a2 + 8) = 0;
    v6 = a2 + 8;
    *(_OWORD *)(v6 + 8) = *((_OWORD *)this + 1);
    *(_QWORD *)(v6 + 22) = *(_QWORD *)((char *)this + 30);
    v3 = (WTF::StringImpl **)v6;
LABEL_3:
    result = WTF::String::String();
    *v3 = v7;
    if (!v2)
      return result;
    goto LABEL_4;
  }
  *(_DWORD *)v2 += 2;
  v3 = (WTF::StringImpl **)(a2 + 8);
  *(_OWORD *)(a2 + 16) = *((_OWORD *)this + 1);
  *(_QWORD *)(a2 + 30) = *(_QWORD *)((char *)this + 30);
  if ((*((_BYTE *)v2 + 16) & 4) != 0)
    goto LABEL_3;
  result = WTF::String::String();
  *v3 = v7;
LABEL_4:
  if (*(_DWORD *)v2 == 2)
  {
    WTF::StringImpl::destroy(v2, v5);
    return 0;
  }
  else
  {
    *(_DWORD *)v2 -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::add@<X0>(uint64_t *a1@<X0>, WTF **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  void *v9;
  WTF **v10;
  WTF *v11;
  int i;
  unsigned int v13;
  WTF **v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::expand(a1),
        (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::computeHash<WebCore::GlyphDisplayListCacheEntry>(*((_QWORD *)*a2 + 1));
  v10 = 0;
  v11 = *a2;
  for (i = 1; ; ++i)
  {
    v13 = result & v7;
    v14 = (WTF **)(v6 + 8 * (result & v7));
    v15 = *v14;
    if (!*v14)
    {
      if (v10)
      {
        *v10 = 0;
        --*(_DWORD *)(*a1 - 16);
        v11 = *a2;
        v14 = v10;
      }
      *a2 = 0;
      result = (uint64_t)*v14;
      *v14 = v11;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = WTF::fastFree((WTF *)result, v9);
        else
          --*(_DWORD *)result;
      }
      v16 = *a1;
      if (*a1)
        v17 = *(_DWORD *)(v16 - 12) + 1;
      else
        v17 = 1;
      *(_DWORD *)(v16 - 12) = v17;
      v18 = *a1;
      if (*a1)
        v19 = *(_DWORD *)(v18 - 12);
      else
        v19 = 0;
      v20 = (*(_DWORD *)(v18 - 16) + v19);
      v21 = *(unsigned int *)(v18 - 4);
      if (v21 > 0x400)
      {
        if (v21 > 2 * v20)
          goto LABEL_18;
      }
      else
      {
        if (3 * v21 > 4 * v20)
        {
LABEL_18:
          v22 = v18 + 8 * v21;
          v23 = 1;
          goto LABEL_19;
        }
        if (!(_DWORD)v21)
        {
          v24 = 8;
          goto LABEL_27;
        }
      }
      v24 = (_DWORD)v21 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v21));
LABEL_27:
      result = (uint64_t)WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v24, v14);
      v14 = (WTF **)result;
      v18 = *a1;
      if (*a1)
        v21 = *(unsigned int *)(v18 - 4);
      else
        v21 = 0;
      goto LABEL_18;
    }
    if (v15 != (WTF *)-1)
      break;
    v10 = (WTF **)(v6 + 8 * v13);
LABEL_7:
    result = i + v13;
  }
  if (*((_QWORD *)v15 + 1) != *((_QWORD *)v11 + 1))
    goto LABEL_7;
  v25 = *a1;
  if (*a1)
    v26 = *(unsigned int *)(v25 - 4);
  else
    v26 = 0;
  v23 = 0;
  v22 = v25 + 8 * v26;
LABEL_19:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v3, 0);
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::GlyphDisplayListCacheEntry,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF **v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF **v20;
  WTF *v21;
  WTF *v22;
  WTF **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (WTF *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = WTF::computeHash<WebCore::GlyphDisplayListCacheEntry>(*((_QWORD *)v14 + 1));
          v18 = 0;
          do
          {
            v19 = v17 & v16;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v15 + 8 * v19));
          v20 = (WTF **)(v15 + 8 * v19);
          *v20 = 0;
          v21 = *v13;
          *v13 = 0;
          *v20 = v21;
          v22 = *v13;
          *v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 1)
              WTF::fastFree(v22, v10);
            else
              --*(_DWORD *)v22;
          }
          if (v13 == a3)
            v12 = v20;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::computeHash<WebCore::GlyphDisplayListCacheEntry>(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  unsigned __int16 v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  v15 = -1640531527;
  v16 = 0;
  v17 = 0;
  v2 = *(_DWORD *)(a1 + 64);
  v3 = *(_DWORD *)(a1 + 68);
  v4 = *(unsigned __int8 *)(a1 + 61);
  v21 = (v4 >> 1) & 1;
  v22 = v4 & 1;
  v20 = (v4 >> 2) & 1;
  v18 = (v4 >> 4) & 1;
  v19 = (v4 >> 3) & 1;
  WTF::add<WTF::String,WebCore::TabSize,float,float,float,WebCore::ExpansionBehavior,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(&v15, *(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 56), (unsigned __int8 *)(a1 + 60), &v22, &v21, *(float *)(a1 + 40), &v20, &v19, &v18);
  v5 = (v2 >> 5) & 0x7FFF800 ^ ((v15 + (unsigned __int16)v2) << 16) ^ (v15 + (unsigned __int16)v2);
  v6 = (v3 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)v3 + (v5 >> 11)) << 16) ^ (v5 + (unsigned __int16)v3 + (v5 >> 11));
  v7 = (*(_DWORD *)(a1 + 72) >> 5) & 0x7FFF800 ^ ((v6 + (unsigned __int16)*(_DWORD *)(a1 + 72) + (v6 >> 11)) << 16) ^ (v6 + (unsigned __int16)*(_DWORD *)(a1 + 72) + (v6 >> 11));
  v8 = v7 + *(unsigned __int8 *)(a1 + 76) + (v7 >> 11);
  v9 = (v8 ^ (v8 << 16)) + ((v8 ^ (v8 << 16)) >> 11);
  if (v17)
  {
    v14 = (v9 + v16) ^ ((v9 + v16) << 11);
    v9 = v14 + (v14 >> 17);
  }
  v10 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * v9)) >> 5);
  v11 = (v10 ^ (4 * v10)) + ((v10 ^ (4 * v10)) >> 15);
  v12 = v11 ^ (v11 << 10);
  if (v12)
    return v12;
  else
    return 0x800000;
}

WTF *WTF::VectorMover<false,WTF::Vector<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  WTF *v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  WTF *v13;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v6 = *(WTF **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 2);
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)(a3 + 8) = (_DWORD)v6;
      LODWORD(v6) = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(a3 + 12) = (_DWORD)v6;
      v7 = *((_DWORD *)v5 + 3);
      v8 = *(WTF **)v5;
      if (v7)
      {
        v9 = (WTF *)((char *)v8 + 24 * v7);
        do
        {
          v10 = *((unsigned int *)v8 + 3);
          if ((_DWORD)v10)
          {
            v11 = *(WTF ***)v8;
            v12 = 8 * v10;
            do
            {
              v13 = *v11;
              *v11 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 1)
                  WTF::fastFree(v13, a2);
                else
                  --*(_DWORD *)v13;
              }
              ++v11;
              v12 -= 8;
            }
            while (v12);
          }
          result = *(WTF **)v8;
          if ((WTF *)((char *)v8 + 16) != *(WTF **)v8 && result != 0)
          {
            *(_QWORD *)v8 = 0;
            *((_DWORD *)v8 + 2) = 0;
            result = (WTF *)WTF::fastFree(result, a2);
          }
          v8 = (WTF *)((char *)v8 + 24);
        }
        while (v8 != v9);
        v8 = *(WTF **)v5;
      }
      if (v8)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        result = (WTF *)WTF::fastFree(v8, a2);
      }
      a3 += 16;
      v5 = (WTF *)((char *)v5 + 16);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
          WTF::fastFree(v6, a2);
        else
          --*(_DWORD *)v6;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v7 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = *(unsigned int *)(result + 12);
      v8 = 24 * v4;
      result = WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v5 = result;
      if ((_DWORD)v7)
      {
        v10 = 24 * v7;
        v11 = v6;
        do
        {
          v13 = result;
          v14 = (uint64_t)v11;
          WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(result, v11);
          WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, v12);
          result = v13 + 24;
          v11 = (WTF *)(v14 + 24);
          v10 -= 24;
        }
        while (v10);
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, _DWORD *a2)
{
  WTF **v4;
  WTF **v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;

  v4 = (WTF **)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 1;
  v5 = *(WTF ***)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v9 = a2[3];
    if ((_DWORD)v9)
    {
      v10 = 8 * v9;
      do
      {
        v11 = *v5;
        *v5 = 0;
        *v4 = v11;
        v12 = *v5;
        *v5 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 1)
            WTF::fastFree(v12, a2);
          else
            --*(_DWORD *)v12;
        }
        ++v4;
        ++v5;
        v10 -= 8;
      }
      while (v10);
    }
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = v5;
    v6 = a2[2];
    a2[2] = 1;
    *(_DWORD *)(a1 + 8) = v6;
  }
  v7 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v7;
  return a1;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderBox&>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  _QWORD *v10;
  uint64_t v11;
  WTF **v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF *v18;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
    goto LABEL_21;
  v9 = *(WTF **)result;
  if (v8 < 2)
  {
    v10 = (_QWORD *)(result + 16);
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
    if (!(_DWORD)v5)
    {
LABEL_20:
      if ((WTF *)(v3 + 16) != v9 && v9)
      {
        if (*(WTF **)v3 == v9)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        WTF::fastFree(v9, a2);
      }
LABEL_21:
      v15 = *(unsigned int *)(v3 + 12);
      v16 = *(_QWORD *)v3;
      result = a2[1];
      if (!result)
      {
        result = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)result = 1;
        *(_QWORD *)(result + 8) = a2;
        v18 = (WTF *)a2[1];
        a2[1] = result;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1)
          {
            WTF::fastFree(v18, v17);
            result = a2[1];
            if (!result)
              goto LABEL_23;
          }
          else
          {
            --*(_DWORD *)v18;
          }
        }
      }
      ++*(_DWORD *)result;
LABEL_23:
      *(_QWORD *)(v16 + 8 * v15) = result;
      ++*(_DWORD *)(v3 + 12);
      return result;
    }
LABEL_13:
    v11 = 8 * v5;
    v12 = (WTF **)v9;
    do
    {
      v13 = *v12;
      *v12 = 0;
      *v10 = v13;
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
          WTF::fastFree(v14, a2);
        else
          --*(_DWORD *)v14;
      }
      ++v10;
      ++v12;
      v11 -= 8;
    }
    while (v11);
    goto LABEL_20;
  }
  if (!(v8 >> 29))
  {
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    if (!(_DWORD)v5)
      goto LABEL_20;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

void WTF::GenericHashTraits<WebCore::GridArea>::emptyValue(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v1 = 1000000;
  if (v1 >= 1)
    v2 = 1;
  else
    v2 = v1;
  if (-v1 > v2 - 1)
    v3 = -v1;
  else
    v3 = (v2 - 1);
  LODWORD(v4) = 1 - v1;
  if ((int)v4 <= v2)
    v4 = v2;
  else
    v4 = v4;
  v5 = v3 | (v4 << 32);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 20) = 2;
}

uint64_t *WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a2;
  v13 = *(_QWORD *)(*a2 + 8);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = v8 + 32 * v19;
    v21 = *(WTF **)v20;
    if (!*(_QWORD *)v20)
    {
      if (v11)
      {
        v20 = v11;
        WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::initializeBucket(v11);
        --*(_DWORD *)(*v6 - 16);
        v12 = *a2;
      }
      *a2 = 0;
      result = *(uint64_t **)v20;
      *(_QWORD *)v20 = v12;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        else
          --*(_DWORD *)result;
      }
      v25 = *a3;
      *(_QWORD *)(v20 + 24) = *((_QWORD *)a3 + 2);
      *(_OWORD *)(v20 + 8) = v25;
      v26 = *v6;
      if (*v6)
        v27 = *(_DWORD *)(v26 - 12) + 1;
      else
        v27 = 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      if (*v6)
        v29 = *(_DWORD *)(v28 - 12);
      else
        v29 = 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
      {
        if (v31 > 2 * v30)
          goto LABEL_19;
      }
      else
      {
        if (3 * v31 > 4 * v30)
        {
LABEL_19:
          *(_QWORD *)a4 = v20;
          *(_QWORD *)(a4 + 8) = v28 + 32 * v31;
          *(_BYTE *)(a4 + 16) = 1;
          return result;
        }
        if (!(_DWORD)v31)
        {
          v32 = 8;
LABEL_32:
          result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v6, v32, (WTF **)v20);
          v20 = (uint64_t)result;
          v28 = *v6;
          if (*v6)
            v31 = *(unsigned int *)(v28 - 4);
          else
            v31 = 0;
          goto LABEL_19;
        }
      }
      v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
      goto LABEL_32;
    }
    if (v21 != (WTF *)-1)
      break;
    v11 = v8 + 32 * v19;
LABEL_35:
    v17 = i + v19;
  }
  if (*((_QWORD *)v21 + 1) != v13)
    goto LABEL_35;
  if ((v9 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v8 + 32 * v22;
  *(_BYTE *)(a4 + 16) = 0;
  v23 = v8 + 32 * v19;
  v24 = *a3;
  *(_QWORD *)(v23 + 24) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v23 + 8) = v24;
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::initializeBucket(uint64_t result)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)result = 0;
  v1 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v1 = 1000000;
  if (v1 >= 1)
    v2 = 1;
  else
    v2 = v1;
  if (-v1 > v2 - 1)
    v3 = -v1;
  else
    v3 = (v2 - 1);
  LODWORD(v4) = 1 - v1;
  if ((int)v4 <= v2)
    v4 = v2;
  else
    v4 = v4;
  v5 = v3 | (v4 << 32);
  *(_QWORD *)(result + 8) = v5;
  *(_DWORD *)(result + 16) = 2;
  *(_QWORD *)(result + 20) = v5;
  *(_DWORD *)(result + 28) = 2;
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::GridArea,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  WTF **v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  __int128 v35;
  WTF *v36;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    if (byte_1EE2F9580)
    {
      v12 = v10 + 24;
      do
      {
        *(_QWORD *)(v12 - 8) = 0;
        if (WebCore::GridPosition::gMaxPositionForTesting >= 1)
          v13 = 1;
        else
          v13 = WebCore::GridPosition::gMaxPositionForTesting;
        if (-WebCore::GridPosition::gMaxPositionForTesting > v13 - 1)
          v14 = -WebCore::GridPosition::gMaxPositionForTesting;
        else
          v14 = (v13 - 1);
        LODWORD(v15) = 1 - WebCore::GridPosition::gMaxPositionForTesting;
        if (1 - WebCore::GridPosition::gMaxPositionForTesting <= v13)
          v15 = v13;
        else
          v15 = v15;
        v16 = v14 | (v15 << 32);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = 2;
        *(_QWORD *)(v12 + 12) = v16;
        *(_DWORD *)(v12 + 20) = 2;
        v12 += 32;
        --v9;
      }
      while (v9);
    }
    else
    {
      v17 = v10 + 24;
      do
      {
        *(_QWORD *)(v17 - 8) = 0;
        *(_QWORD *)v17 = 0x100000000;
        *(_DWORD *)(v17 + 8) = 2;
        *(_QWORD *)(v17 + 12) = 0x100000000;
        *(_DWORD *)(v17 + 20) = 2;
        v17 += 32;
        --v9;
      }
      while (v9);
    }
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v20 = 0;
    v18 = 0;
    do
    {
      v21 = (WTF **)(v6 + 32 * v20);
      v22 = *v21;
      if (*v21)
      {
        if (v22 != (WTF *)-1)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = ~(*((_QWORD *)v22 + 1) << 32) + *((_QWORD *)v22 + 1);
          v26 = (v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13);
          v27 = (9 * (v26 ^ (v26 >> 8))) ^ ((9 * (v26 ^ (v26 >> 8))) >> 15);
          v28 = v24 & (((v27 + ~(v27 << 27)) >> 31) ^ (v27 + ~((_DWORD)v27 << 27)));
          v29 = 1;
          do
          {
            v30 = v28;
            v31 = *(_QWORD *)(v23 + 32 * v28);
            v28 = (v28 + v29++) & v24;
          }
          while (v31);
          v32 = v23 + 32 * v30;
          *(_QWORD *)v32 = 0;
          v33 = *v21;
          *v21 = 0;
          *(_QWORD *)v32 = v33;
          v34 = v6 + 32 * v20;
          v35 = *(_OWORD *)(v34 + 8);
          *(_QWORD *)(v32 + 24) = *(_QWORD *)(v34 + 24);
          *(_OWORD *)(v32 + 8) = v35;
          v36 = *v21;
          *v21 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1)
              WTF::fastFree(v36, v11);
            else
              --*(_DWORD *)v36;
          }
          if (v21 == a3)
            v18 = v32;
        }
      }
      else
      {
        *v21 = 0;
      }
      ++v20;
    }
    while (v20 != v7);
    goto LABEL_36;
  }
  v18 = 0;
  result = 0;
  if (v6)
  {
LABEL_36:
    WTF::fastFree((WTF *)(v6 - 16), v11);
    return v18;
  }
  return result;
}

WTF *WTF::VectorDestructor<true,WTF::Vector<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(WTF *result, WTF *a2)
{
  WTF *v3;
  unsigned int v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  WTF *v10;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((_DWORD *)v3 + 3);
      v5 = *(WTF **)v3;
      if (v4)
      {
        v6 = (WTF *)((char *)v5 + 24 * v4);
        do
        {
          v7 = *((unsigned int *)v5 + 3);
          if ((_DWORD)v7)
          {
            v8 = *(WTF ***)v5;
            v9 = 8 * v7;
            do
            {
              v10 = *v8;
              *v8 = 0;
              if (v10)
              {
                if (*(_DWORD *)v10 == 1)
                  WTF::fastFree(v10, a2);
                else
                  --*(_DWORD *)v10;
              }
              ++v8;
              v9 -= 8;
            }
            while (v9);
          }
          result = *(WTF **)v5;
          if ((WTF *)((char *)v5 + 16) != *(WTF **)v5 && result != 0)
          {
            *(_QWORD *)v5 = 0;
            *((_DWORD *)v5 + 2) = 0;
            result = (WTF *)WTF::fastFree(result, a2);
          }
          v5 = (WTF *)((char *)v5 + 24);
        }
        while (v5 != v6);
        v5 = *(WTF **)v3;
      }
      if (v5)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
        result = (WTF *)WTF::fastFree(v5, a2);
      }
      v3 = (WTF *)((char *)v3 + 16);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::BaselineAlignmentState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  _QWORD *v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 24);
    do
    {
      *((_DWORD *)v12 - 2) = -1;
      *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (int *)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != -2)
      {
        if (v16 == -1)
        {
          v17 = v6 + 16 * v13;
          v19 = *(WTF **)(v17 + 8);
          v18 = (_QWORD *)(v17 + 8);
          v10 = v19;
          *v18 = 0;
          if (v19)
            std::default_delete<WebCore::BaselineAlignmentState>::operator()[abi:sn180100]((int)v18, v10);
        }
        else
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = 0;
          v23 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
          v24 = ((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) ^ (((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) >> 16);
          do
          {
            v25 = v24 & v21;
            v24 = ++v22 + v25;
          }
          while (*(_DWORD *)(v20 + 16 * v25) != -1);
          v26 = v20 + 16 * v25;
          v28 = (_QWORD *)(v26 + 8);
          v27 = *(WTF **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
            std::default_delete<WebCore::BaselineAlignmentState>::operator()[abi:sn180100]((int)v28, v27);
          *(_DWORD *)v26 = *v15;
          v29 = v6 + 16 * v13;
          v31 = *(_QWORD *)(v29 + 8);
          v30 = (WTF **)(v29 + 8);
          *v30 = 0;
          *v28 = v31;
          v10 = *v30;
          *v30 = 0;
          if (v10)
            std::default_delete<WebCore::BaselineAlignmentState>::operator()[abi:sn180100]((int)v30, v10);
          if (v15 == a3)
            v14 = v26;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::BaselineAlignmentState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(uint64_t a1, WTF *a2)
{
  uint64_t v3;
  WTF **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)(a1 + 8);
    do
    {
      if (*((_DWORD *)v4 - 2) != -2)
      {
        a2 = *v4;
        *v4 = 0;
        if (a2)
          std::default_delete<WebCore::BaselineAlignmentState>::operator()[abi:sn180100]((int)v4, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::GridMasonryLayout::allocateCapacityForMasonryVectors(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _DWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;

  v1 = this;
  v2 = *(_QWORD *)(this + 64);
  v3 = *(_QWORD *)(v2 + 328);
  v4 = *(_DWORD *)(v3 + 100);
  if (v4)
    v5 = *(_DWORD *)(*(_QWORD *)(v3 + 88) + 12);
  else
    v5 = 0;
  v6 = (v5 * v4);
  v7 = (void **)(this + 8);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 40) + 80) + 32))
  {
    v8 = v6 / *(_DWORD *)(this + 96);
    if (*(_DWORD *)(this + 16) >= v8)
    {
LABEL_7:
      v13 = (_DWORD *)(v1 + 32);
      v14 = v6 / *(_DWORD *)(v1 + 100);
      if (*(_DWORD *)(v1 + 32) >= v14)
        return this;
      if (v14 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x196334EF8);
      }
      v7 = (void **)(v1 + 24);
      v15 = *(void **)(v1 + 24);
      v16 = *(unsigned int *)(v1 + 36);
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
      *(_DWORD *)(v1 + 32) = v14;
      *(_QWORD *)(v1 + 24) = v17;
      goto LABEL_13;
    }
    if (!(v8 >> 29))
    {
      v9 = *v7;
      v10 = *(unsigned int *)(this + 20);
      v11 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
      *(_DWORD *)(v1 + 16) = v8;
      *(_QWORD *)(v1 + 8) = v11;
      this = (uint64_t)memcpy(v11, v9, 8 * v10);
      if (v9)
      {
        if (*v7 == v9)
        {
          *(_QWORD *)(v1 + 8) = 0;
          *(_DWORD *)(v1 + 16) = 0;
        }
        this = WTF::fastFree((WTF *)v9, v12);
      }
      goto LABEL_7;
    }
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x196334EF0);
  }
  v13 = (_DWORD *)(this + 16);
  if (*(_DWORD *)(this + 16) >= v6)
    return this;
  if (v6 >> 29)
    goto LABEL_24;
  v15 = *v7;
  v16 = *(unsigned int *)(this + 20);
  v17 = (void *)WTF::fastMalloc((WTF *)(8 * v6));
  *(_DWORD *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 8) = v17;
LABEL_13:
  this = (uint64_t)memcpy(v17, v15, 8 * v16);
  if (v15)
  {
    if (*v7 == v15)
    {
      *v7 = 0;
      *v13 = 0;
    }
    return WTF::fastFree((WTF *)v15, v18);
  }
  return this;
}

WebCore::RenderElement *WebCore::GridMasonryLayout::collectMasonryItems(WebCore::GridMasonryLayout *this)
{
  WebCore::OrderIterator *v2;
  WebCore::RenderElement *result;
  WebCore::RenderElement *v4;
  WebCore::GridPositionsResolver *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  v2 = *(WebCore::OrderIterator **)(*((_QWORD *)this + 8) + 328);
  result = (WebCore::RenderElement *)WebCore::OrderIterator::first(v2);
  v19 = (uint64_t)result;
  if (result)
  {
    v4 = result;
    while (1)
    {
      if ((*((_DWORD *)v4 + 5) & 0x1800000) == 0x1000000 || (*((_DWORD *)v4 + 5) & 0x400) != 0)
        goto LABEL_20;
      v6 = (WebCore::GridPositionsResolver *)*((_QWORD *)this + 8);
      v7 = HIDWORD(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 11) + 40) + 80) + 28));
      if (v7 == 1)
        break;
      if (!v7)
      {
        WebCore::GridPositionsResolver::resolveGridPositionsFromStyle(v6, v4, (WTF::StringImpl *)(*((_BYTE *)this + 80) != 1));
        if (v10 == 2)
        {
          v11 = *((unsigned int *)this + 9);
          if ((_DWORD)v11 == *((_DWORD *)this + 8))
          {
            v18 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v11 + 1, (unint64_t)&v19);
            v11 = *((unsigned int *)this + 9);
            v12 = v11 + 1;
            v13 = *((_QWORD *)this + 3);
            v14 = *v18;
          }
          else
          {
            v12 = v11 + 1;
            v13 = *((_QWORD *)this + 3);
            v14 = v19;
          }
          *(_QWORD *)(v13 + 8 * v11) = v14;
          *((_DWORD *)this + 9) = v12;
          goto LABEL_20;
        }
        v8 = *((unsigned int *)this + 5);
        if ((_DWORD)v8 != *((_DWORD *)this + 4))
        {
          v9 = v8 + 1;
          v15 = *((_QWORD *)this + 1);
          v16 = v19;
          goto LABEL_18;
        }
LABEL_17:
        v17 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 8, v8 + 1, (unint64_t)&v19);
        v8 = *((unsigned int *)this + 5);
        v9 = v8 + 1;
        v15 = *((_QWORD *)this + 1);
        v16 = *v17;
LABEL_18:
        *(_QWORD *)(v15 + 8 * v8) = v16;
LABEL_19:
        *((_DWORD *)this + 5) = v9;
      }
LABEL_20:
      result = (WebCore::RenderElement *)WebCore::OrderIterator::next(v2);
      v4 = result;
      v19 = (uint64_t)result;
      if (!result)
        return result;
    }
    v8 = *((unsigned int *)this + 5);
    if ((_DWORD)v8 == *((_DWORD *)this + 4))
      goto LABEL_17;
    v9 = v8 + 1;
    *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v8) = v4;
    goto LABEL_19;
  }
  return result;
}

void WebCore::GridMasonryLayout::resizeAndResetRunningPositions(WebCore::GridMasonryLayout *this, void *a2)
{
  WTF **v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  int v21;

  v3 = (WTF **)((char *)this + 40);
  v4 = *(unsigned int *)this;
  v5 = *((unsigned int *)this + 13);
  if (v5 < v4)
  {
    v6 = *((unsigned int *)this + 12);
    v7 = (WTF *)*((_QWORD *)this + 5);
    if (v6 < v4)
    {
      v8 = v6 + (v6 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= v4)
        v10 = *(unsigned int *)this;
      else
        v10 = v9;
      if (v10 >> 30)
      {
        __break(0xC471u);
        return;
      }
      v11 = WTF::fastMalloc((WTF *)(4 * v10));
      *((_DWORD *)this + 12) = v10;
      *((_QWORD *)this + 5) = v11;
      if ((_DWORD)v5)
      {
        v18 = 4 * v5;
        v19 = (_DWORD *)v11;
        v20 = v7;
        do
        {
          v21 = *(_DWORD *)v20;
          v20 = (WTF *)((char *)v20 + 4);
          *v19++ = v21;
          v18 -= 4;
        }
        while (v18);
      }
      if (!v7)
        goto LABEL_16;
      if ((WTF *)v11 == v7)
      {
        *((_QWORD *)this + 5) = 0;
        *((_DWORD *)this + 12) = 0;
      }
      WTF::fastFree(v7, a2);
      v7 = *v3;
    }
    v11 = (uint64_t)v7;
    if (v7)
    {
LABEL_16:
      v12 = *((unsigned int *)this + 13);
      if ((_DWORD)v12 != (_DWORD)v4)
        bzero((void *)(v11 + 4 * v12), (4 * v4 - 4 * v12) & 0xFFFFFFFFFFFFFFFCLL);
    }
  }
  *((_DWORD *)this + 13) = v4;
  v13 = *((_DWORD *)this + 12);
  v14 = v4;
  if (v13 < v4)
  {
    if (v13)
    {
      *((_DWORD *)this + 13) = 0;
      v15 = (WTF *)*((_QWORD *)this + 5);
      if (v15)
      {
        *((_QWORD *)this + 5) = 0;
        *((_DWORD *)this + 12) = 0;
        WTF::fastFree(v15, a2);
      }
    }
    WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4);
    v14 = *((_DWORD *)this + 13);
  }
  v16 = *v3;
  if (v14)
  {
    bzero(v16, 4 * v14);
    v17 = *((unsigned int *)this + 13);
  }
  else
  {
    v17 = 0;
  }
  if (v4 != v17)
    bzero((char *)v16 + 4 * v17, 4 * (v4 - v17));
  *((_DWORD *)this + 13) = v4;
}

WTF *WebCore::GridMasonryLayout::performMasonryPlacement(uint64_t a1, int a2, _BOOL4 a3)
{
  _BOOL4 v3;
  WebCore::RenderBox *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  void *v14;
  void *v15;
  WTF *result;
  uint64_t v17;
  const WebCore::RenderBox **v18;
  uint64_t v19;
  const WebCore::RenderBox *v20;
  int v22;
  WebCore::RenderBox *v23;
  int v24[6];

  v3 = a3;
  *(_BYTE *)(a1 + 80) = a3;
  v6 = *(WebCore::RenderBox **)(a1 + 64);
  v7 = *(_QWORD *)(*((_QWORD *)v6 + 11) + 40);
  v8 = (_BYTE *)(v7 + 388);
  v9 = (_BYTE *)(v7 + 376);
  if (a3)
    v9 = v8;
  if (!*v9 && (v9[8] & 0xF7) == 3)
  {
    v23 = v6;
    if (a3)
      v22 = WebCore::RenderBox::contentLogicalHeight(v6);
    else
      v22 = WebCore::RenderBox::contentLogicalWidth(v6);
    v12 = v22 & 0xFFFFFF00;
    v10 = v22;
    v11 = 0x100000000;
    v3 = a3;
    v6 = v23;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
  }
  v13 = WebCore::RenderGrid::gridGap(v6, v3, v11 | v12 | v10);
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 72) = v13;
  *(_DWORD *)(a1 + 76) = 0;
  WebCore::GridMasonryLayout::allocateCapacityForMasonryVectors(a1);
  WebCore::GridMasonryLayout::collectMasonryItems((WebCore::GridMasonryLayout *)a1);
  WebCore::Grid::setupGridForMasonryLayout(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 328), v14);
  WebCore::RenderGrid::populateExplicitGridAndOrderIterator(*(WebCore::RenderGrid **)(a1 + 64));
  WebCore::GridMasonryLayout::resizeAndResetRunningPositions((WebCore::GridMasonryLayout *)a1, v15);
  WebCore::RenderGrid::populateGridPositionsForDirection(*(WebCore::RenderBox **)(a1 + 64), 0);
  WebCore::RenderGrid::populateGridPositionsForDirection(*(WebCore::RenderBox **)(a1 + 64), 1);
  *(_DWORD *)(a1 + 104) = 0;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 88) + 40) + 80) + 32) == 1)
    return WebCore::GridMasonryLayout::placeItemsUsingOrderModifiedDocumentOrder((WTF *)a1);
  result = WebCore::GridMasonryLayout::placeItemsWithDefiniteGridAxisPosition((WTF *)a1);
  v17 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v17)
  {
    v18 = *(const WebCore::RenderBox ***)(a1 + 24);
    v19 = 8 * v17;
    do
    {
      v20 = *v18;
      if (*v18)
      {
        WebCore::GridMasonryLayout::gridAreaForIndefiniteGridAxisItem((WebCore::GridMasonryLayout *)a1, *v18, (uint64_t)v24);
        result = WebCore::GridMasonryLayout::insertIntoGridAndLayoutItem(a1, (uint64_t)v20, v24);
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  return result;
}

WTF *WebCore::GridMasonryLayout::placeItemsUsingOrderModifiedDocumentOrder(WTF *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::RenderElement **v3;
  WebCore::RenderElement **v4;
  __int128 *v5;
  const WebCore::RenderBox *v6;
  int v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  __int128 *v23;
  int v24;
  int v25;
  __int128 *v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;

  v1 = *((unsigned int *)this + 5);
  if ((_DWORD)v1)
  {
    v2 = (uint64_t)this;
    v3 = (WebCore::RenderElement **)*((_QWORD *)this + 1);
    v4 = &v3[v1];
    v5 = (__int128 *)((char *)this + 84);
    do
    {
      v6 = *v3;
      if (*v3)
      {
        WebCore::GridPositionsResolver::resolveGridPositionsFromStyle(*(WebCore::GridPositionsResolver **)(v2 + 64), *v3, (WTF::StringImpl *)(*(_BYTE *)(v2 + 80) != 1));
        if (v7 == 2)
        {
          WebCore::GridMasonryLayout::gridAreaForIndefiniteGridAxisItem((WebCore::GridMasonryLayout *)v2, v6, (uint64_t)&v36);
          v8 = (int *)&v36;
        }
        else
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 328);
          v10 = *(unsigned __int8 *)(v2 + 80);
          v11 = *(_QWORD *)(v9 + 104);
          if (v11)
          {
            v12 = *(_DWORD *)(v11 - 8);
            v13 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
            v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
            v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
            v16 = v12 & ((v15 >> 31) ^ v15);
            for (i = 1; ; ++i)
            {
              v18 = v16;
              v19 = *(_QWORD *)(v11 + 32 * v16);
              if (v19 != -1)
              {
                if (!v19)
                  goto LABEL_27;
                if (*(const WebCore::RenderBox **)(v19 + 8) == v6)
                  break;
              }
              v16 = (v18 + i) & v12;
            }
            v20 = v11 + 32 * v18;
            v21 = *(_OWORD *)(v20 + 8);
            v37 = *(_QWORD *)(v20 + 24);
            v36 = v21;
            v22 = v10;
          }
          else
          {
LABEL_27:
            WTF::GenericHashTraits<WebCore::GridArea>::emptyValue((uint64_t)&v36);
            v9 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 328);
            v22 = *(unsigned __int8 *)(v2 + 80);
          }
          v23 = (__int128 *)((unint64_t)&v36 | 0xC);
          if (v10 == 1)
            v23 = &v36;
          v26 = v23;
          v24 = *(_DWORD *)v23;
          v25 = *((_DWORD *)v26 + 1);
          v27 = v22 == 1;
          v28 = 60;
          if (v27)
            v28 = 56;
          v29 = *(_DWORD *)(v9 + v28);
          LODWORD(v36) = v29 + v24;
          DWORD1(v36) = v29 + v25;
          DWORD2(v36) = 1;
          if (v27)
            v30 = &v36;
          else
            v30 = v5;
          if (v27)
            v31 = v5;
          else
            v31 = &v36;
          v32 = *(_QWORD *)v30;
          v33 = *((_DWORD *)v30 + 2);
          v34 = *(_QWORD *)v31;
          v35 = *((_DWORD *)v31 + 2);
          v8 = (int *)&v32;
        }
        this = WebCore::GridMasonryLayout::insertIntoGridAndLayoutItem(v2, (uint64_t)v6, v8);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return this;
}

WTF *WebCore::GridMasonryLayout::placeItemsWithDefiniteGridAxisPosition(WTF *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 *v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  int v31;
  _DWORD *v32;
  _DWORD *v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  _DWORD v43[4];
  __int128 v44;
  uint64_t v45;

  v1 = *((unsigned int *)this + 5);
  if ((_DWORD)v1)
  {
    v2 = (uint64_t)this;
    v3 = (uint64_t *)*((_QWORD *)this + 1);
    v4 = &v3[v1];
    v5 = (_DWORD *)((char *)this + 84);
    do
    {
      v6 = *v3;
      if (*v3)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 328);
        v8 = *(_QWORD *)(v7 + 104);
        v9 = ~(v6 << 32);
        if (v8)
        {
          v10 = *(_DWORD *)(v8 - 8);
          v11 = ((v9 + v6) ^ ((unint64_t)(v9 + v6) >> 22))
              + ~(((v9 + v6) ^ ((unint64_t)(v9 + v6) >> 22)) << 13);
          v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
          v13 = v10 & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27)));
          for (i = 1; ; ++i)
          {
            v15 = *(_QWORD *)(v8 + 32 * v13);
            if (v15 != -1)
            {
              if (!v15)
                goto LABEL_46;
              if (*(_QWORD *)(v15 + 8) == v6)
                break;
            }
            v13 = (v13 + i) & v10;
          }
          v16 = *(unsigned __int8 *)(v2 + 80);
          v17 = v16 == 1;
LABEL_11:
          v18 = *(_DWORD *)(v8 - 8);
          v19 = ((v9 + v6) ^ ((unint64_t)(v9 + v6) >> 22))
              + ~(((v9 + v6) ^ ((unint64_t)(v9 + v6) >> 22)) << 13);
          v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
          v21 = v18 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
          for (j = 1; ; ++j)
          {
            v23 = v21;
            v24 = *(_QWORD *)(v8 + 32 * v21);
            if (v24 != -1)
            {
              if (!v24)
              {
                v38 = v6;
                goto LABEL_49;
              }
              if (*(_QWORD *)(v24 + 8) == v6)
              {
                v25 = v8 + 32 * v23;
                v26 = *(_OWORD *)(v25 + 8);
                v45 = *(_QWORD *)(v25 + 24);
                v44 = v26;
                goto LABEL_17;
              }
            }
            v21 = (v23 + j) & v18;
          }
        }
LABEL_46:
        v38 = *v3;
        WTF::GenericHashTraits<WebCore::GridArea>::emptyValue((uint64_t)&v44);
        v7 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 328);
        v8 = *(_QWORD *)(v7 + 104);
        v16 = *(unsigned __int8 *)(v2 + 80);
        v17 = v16 == 1;
        if (v8)
        {
          v6 = v38;
          goto LABEL_11;
        }
LABEL_49:
        WTF::GenericHashTraits<WebCore::GridArea>::emptyValue((uint64_t)&v44);
        v7 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 328);
        v16 = *(unsigned __int8 *)(v2 + 80);
        v6 = v38;
LABEL_17:
        v27 = (__int128 *)((unint64_t)&v44 | 0xC);
        if (v17)
          v27 = &v44;
        v28 = v16 == 1;
        v29 = 60;
        if (v28)
          v29 = 56;
        v30 = *(_DWORD *)(v7 + v29);
        v31 = *((_DWORD *)v27 + 1);
        v43[0] = v30 + *(_DWORD *)v27;
        v43[1] = v30 + v31;
        v43[2] = 1;
        if (v28)
          v32 = v43;
        else
          v32 = v5;
        if (v28)
          v33 = v5;
        else
          v33 = v43;
        v39 = *(_QWORD *)v32;
        v40 = v32[2];
        v41 = *(_QWORD *)v33;
        v42 = v33[2];
        if (v42 != 2)
        {
          v35 = *(_DWORD *)(v7 + 76);
          if (v35)
          {
            v36 = v41 & ~((int)v41 >> 31);
            if (SHIDWORD(v41) < v35)
              v35 = HIDWORD(v41);
            if (v35 <= 1)
              v35 = 1;
            LODWORD(v41) = v41 & ~((int)v41 >> 31);
            HIDWORD(v41) = v35;
            if (v36 >= v35)
              LODWORD(v41) = v35 - 1;
          }
        }
        if (v40 != 2)
        {
          v34 = *(_DWORD *)(v7 + 72);
          if (v34)
          {
            v37 = v39 & ~((int)v39 >> 31);
            if (SHIDWORD(v39) < v34)
              v34 = HIDWORD(v39);
            if (v34 <= 1)
              v34 = 1;
            LODWORD(v39) = v39 & ~((int)v39 >> 31);
            HIDWORD(v39) = v34;
            if (v37 >= v34)
              LODWORD(v39) = v34 - 1;
          }
        }
        this = WebCore::GridMasonryLayout::insertIntoGridAndLayoutItem(v2, v6, (int *)&v39);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return this;
}

WTF *WebCore::GridMasonryLayout::insertIntoGridAndLayoutItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF *result;
  int *v12;
  unsigned int v13[6];

  WebCore::Grid::insert(*(WebCore::Grid **)(*(_QWORD *)(a1 + 64) + 328), (_QWORD *)a2, (uint64_t)a3, v13);
  v6 = *(_QWORD *)(a1 + 64) + 336;
  if (*(_BYTE *)(a1 + 80) == 1)
  {
    *(_QWORD *)v13 = WebCore::GridTrackSizingAlgorithm::gridAreaBreadthForChild(v6, (_BYTE *)a2, 0);
    v7 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
    if (!WebCore::gOverridingContainingBlockContentLogicalWidthMap)
    {
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = 0;
      v7[1] = 0;
      WebCore::gOverridingContainingBlockContentLogicalWidthMap = (uint64_t)v7;
    }
  }
  else
  {
    *(_QWORD *)v13 = WebCore::GridTrackSizingAlgorithm::gridAreaBreadthForChild(v6, (_BYTE *)a2, 1u);
    v7 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
    if (!WebCore::gOverridingContainingBlockContentLogicalHeightMap)
    {
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = 0;
      v7[1] = 0;
      WebCore::gOverridingContainingBlockContentLogicalHeightMap = (uint64_t)v7;
    }
  }
  WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v7, (_QWORD *)a2, (int *)v13);
  v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x20) == 0)
  {
    v8 |= 0x20u;
    *(_DWORD *)(a2 + 20) = v8;
  }
  if ((v8 & 0xF8) != 0)
  {
    v9 = *(_QWORD *)(a2 + 32);
    if (v9
      && (v10 = *(_QWORD *)(v9 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v10 + 104) + 239) & 0x18) != 0
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40)
                                                       + 8)
                                           + 1944)
                               + 248)
                   + 479))
    {
      WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)a2);
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 688))(a2);
    }
  }
  result = WebCore::GridMasonryLayout::updateRunningPositions(a1, (unsigned int *)a2, a3);
  if (*(_BYTE *)(a1 + 80) == 1)
    v12 = a3;
  else
    v12 = a3 + 3;
  *(_DWORD *)(a1 + 104) = v12[1] % *(_DWORD *)a1;
  return result;
}

uint64_t WebCore::GridMasonryLayout::gridAreaForIndefiniteGridAxisItem@<X0>(WebCore::GridMasonryLayout *this@<X0>, const WebCore::RenderBox *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  char *v23;
  char *v24;
  unint64_t v25;
  int v26;

  v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 88) + 40) + 80) + 28);
  result = WebCore::GridPositionsResolver::spanSizeForAutoPlacedItem(a2, (WTF::StringImpl *)(*((_BYTE *)this + 80) != 1));
  if (v5)
  {
    v7 = *((_DWORD *)this + 26);
    if ((v7 + result) > *(_DWORD *)this)
    {
      v7 = 0;
      *((_DWORD *)this + 26) = 0;
    }
    goto LABEL_20;
  }
  v8 = *(_DWORD *)this - result;
  v9 = (v8 + 1);
  if (v8 == -1 || !(_DWORD)result)
  {
    v7 = 0;
LABEL_20:
    v20 = v7 + result;
    LODWORD(v21) = WebCore::GridPosition::gMaxPositionForTesting;
    if (!byte_1EE2F9580)
      LODWORD(v21) = 1000000;
    if ((int)v21 - 1 < v7)
      v7 = v21 - 1;
    if (-(int)v21 > v7)
      v7 = -(int)v21;
    v22 = 1 - v21;
    if ((int)v21 >= v20)
      LODWORD(v21) = v20;
    if (v22 <= (int)v21)
      v21 = v21;
    else
      v21 = v22;
    v25 = v7 | (unint64_t)(v21 << 32);
    v26 = 1;
    v23 = (char *)&v25;
    if (*((_BYTE *)this + 80) == 1)
      v24 = (char *)&v25;
    else
      v24 = (char *)this + 84;
    if (*((_BYTE *)this + 80) == 1)
      v23 = (char *)this + 84;
    *(_QWORD *)a3 = *(_QWORD *)v24;
    *(_DWORD *)(a3 + 8) = *((_DWORD *)v24 + 2);
    *(_QWORD *)(a3 + 12) = *(_QWORD *)v23;
    *(_DWORD *)(a3 + 20) = *((_DWORD *)v23 + 2);
    return result;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v7 = 0;
  v13 = 0x7FFFFFFF;
  while (1)
  {
    v14 = *((_DWORD *)this + 13) <= v11 ? v11 : *((_DWORD *)this + 13);
    if (v14 + v12 <= (result - 1))
      break;
    v15 = 0;
    v16 = (int *)(*((_QWORD *)this + 5) + v10);
    v17 = result;
    do
    {
      v19 = *v16++;
      v18 = v19;
      if (v15 <= v19)
        v15 = v18;
      --v17;
    }
    while (v17);
    if (v15 < v13)
    {
      v13 = v15;
      v7 = v11;
    }
    ++v11;
    --v12;
    v10 += 4;
    if (v11 == v9)
      goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::GridTrackSizingAlgorithm::gridAreaBreadthForChild(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  WebCore::RenderBox *v6;
  WebCore::RenderBox *v7;
  WebCore::RenderBox *v8;
  uint64_t v9;
  WebCore::RenderBox *v10;
  WebCore::RenderBox *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::RenderElement *v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  int *v29;
  int v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v45;
  WebCore::RenderGrid *v46;

  v6 = *(WebCore::RenderBox **)(a1 + 136);
  v7 = v6;
  do
  {
    v8 = v7;
    v9 = *((_QWORD *)v7 + 4);
    if (!v9)
      break;
    v7 = *(WebCore::RenderBox **)(v9 + 8);
    if (!v7)
      break;
  }
  while (*((_BYTE *)v7 + 46) == 12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 11) + 40) + 80) + 259));
  v10 = v8;
  do
  {
    v11 = v10;
    v12 = *((_QWORD *)v10 + 4);
    if (!v12)
      break;
    v10 = *(WebCore::RenderBox **)(v12 + 8);
    if (!v10)
      break;
  }
  while (*((_BYTE *)v10 + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 11) + 40) + 80) + 258));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 11) + 40) + 80) + 260)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 11) + 40) + 80) + 261))
  {
    LODWORD(v42) = WebCore::RenderBox::contentLogicalWidth(v6);
  }
  else
  {
    if (a3)
    {
      v46 = v6;
      if (a3 == 1
        && ((v45 = *(unsigned __int8 *)(a1 + 168), v45 == 3) || !*(_BYTE *)(a1 + 168))
        && !WebCore::RenderGrid::areMasonryColumns(v6))
      {
        if (!v45)
        {
          v42 = WebCore::GridTrackSizingAlgorithm::estimatedGridAreaBreadthForChild((_QWORD *)a1, a2, 1u);
          v43 = v42 & 0x100000000;
          return v43 | v42;
        }
        v14 = WebCore::RenderGrid::gridSpanForChild((uint64_t)v46, (uint64_t)a2, 1u);
        v16 = *(WebCore::RenderElement **)(a1 + 136);
        v17 = *((_DWORD *)v16 + 153);
        v18 = v17 & 0xFFFFFF00;
        v19 = HIDWORD(v14);
        v20 = HIDWORD(v14) - v14;
        v21 = 0x100000000;
      }
      else
      {
        v14 = WebCore::RenderGrid::gridSpanForChild((uint64_t)v46, (uint64_t)a2, a3);
        LOBYTE(v17) = 0;
        v21 = 0;
        v18 = 0;
        v16 = *(WebCore::RenderElement **)(a1 + 136);
        v19 = HIDWORD(v14);
        v20 = HIDWORD(v14) - v14;
      }
      v15 = a1 + 56;
      v22 = (uint64_t *)(a1 + 4);
    }
    else
    {
      v13 = *(unsigned __int8 *)(a1 + 168);
      v14 = WebCore::RenderGrid::gridSpanForChild((uint64_t)v6, (uint64_t)a2, 0);
      v15 = a1 + 40;
      v16 = *(WebCore::RenderElement **)(a1 + 136);
      if ((v13 - 1) >= 2)
      {
        LOBYTE(v17) = 0;
        v21 = 0;
        v18 = 0;
        v19 = HIDWORD(v14);
        v20 = HIDWORD(v14) - v14;
      }
      else
      {
        v17 = *((_DWORD *)v16 + 151);
        v18 = v17 & 0xFFFFFF00;
        v19 = HIDWORD(v14);
        v20 = HIDWORD(v14) - v14;
        v21 = 0x100000000;
      }
      v22 = (uint64_t *)(a1 + 12);
    }
    v23 = WebCore::RenderGrid::guttersSize(v16, a3, v14, v20, *v22);
    v24 = v19 - v14;
    if ((_DWORD)v19 == (_DWORD)v14)
    {
      v28 = 0;
    }
    else
    {
      v25 = *(_DWORD *)(v15 + 12);
      v26 = v25 >= v14;
      v27 = v25 - v14;
      if (!v26)
        v27 = 0;
      if (v27 <= (int)v19 + ~(_DWORD)v14)
      {
        __break(0xC471u);
        JUMPOUT(0x196335E0CLL);
      }
      v28 = 0;
      v29 = (int *)(*(_QWORD *)v15 + 136 * v14 + 8);
      do
      {
        v30 = *v29;
        v29 += 34;
        v31 = v30 & ~(v30 >> 31);
        v32 = __OFADD__(v28, v31);
        v33 = v28 + v31;
        v34 = v32;
        v28 = (v28 >> 31) + 0x7FFFFFFF;
        if ((v34 & 1) == 0)
          v28 = v33;
        --v24;
      }
      while (v24);
    }
    v32 = __OFADD__(v28, v23);
    v35 = v28 + v23;
    v36 = (v28 >> 31) + 0x7FFFFFFF;
    if (!v32)
      v36 = v35;
    v37 = v19 + ~(_DWORD)v14;
    if ((v21 & 0x100000000) != 0)
      v38 = v18 | v17;
    else
      v38 = 0;
    LODWORD(v39) = v37 << 6;
    if (v37 <= 0x1FFFFFE)
      v39 = v39;
    else
      v39 = 0x7FFFFFFFLL;
    v40 = v38 * v39 / 64;
    v41 = (v38 >> 31) + 0x7FFFFFFF;
    if (HIDWORD(v40) == (int)v40 >> 31)
      v41 = v40;
    LODWORD(v42) = v36 + v41;
    if (__OFADD__(v36, v41))
      LODWORD(v42) = (v36 >> 31) + 0x7FFFFFFF;
  }
  v43 = 0x100000000;
  return v43 | v42;
}

WTF *WebCore::GridMasonryLayout::updateRunningPositions(uint64_t a1, unsigned int *a2, int *a3)
{
  int v3;
  int *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  int v14;
  unint64_t v15;
  int *v16;
  int v17;
  int v18;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  WTF *v40;
  void *v41;
  WTF *result;
  void *v43;
  WTF *v44;
  char v45[24];
  WTF *v46;
  int v47;

  v3 = *(unsigned __int8 *)(a1 + 80);
  v4 = a3 + 3;
  if (v3 == 1)
    v4 = a3;
  v5 = v4[1];
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *v4 & ~(*v4 >> 31);
  if (v5 >= (int)v6)
    v5 = *(_DWORD *)(a1 + 52);
  if (v5 <= 1)
    v8 = 1;
  else
    v8 = v5;
  v9 = v8 - 1;
  if (v7 >= v8)
    v10 = v9;
  else
    v10 = v7;
  v11 = v6 - v10;
  if (v6 < v10)
    v11 = 0;
  if (v11 <= v9 - v10)
  {
LABEL_61:
    __break(0xC471u);
    JUMPOUT(0x196336134);
  }
  v14 = 0;
  v15 = v10 - v8;
  v16 = (int *)(*(_QWORD *)(a1 + 40) + 4 * v10);
  do
  {
    v18 = *v16++;
    v17 = v18;
    if (v14 <= v18)
      v14 = v17;
  }
  while (!__CFADD__(v15++, 1));
  v20 = a2[5];
  v21 = ((*(_BYTE *)(*(_QWORD *)(a1 + 64) + 21) & 0x10) == 0) ^ ((v20 & 0x1000) == 0);
  if (v3 == 1)
  {
    if (!v21)
    {
      v26 = a2 + 40;
      if (((a2[31] >> 13) & 6) - 2 >= 4)
        v26 = a2 + 41;
      v23 = *v26;
      v24 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)a2 + 1112))(a2, 0);
      v25 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)a2 + 1120))(a2, 0);
      goto LABEL_32;
    }
    v22 = *(_QWORD *)a2;
    if ((v20 & 0x1000) == 0)
      goto LABEL_22;
LABEL_25:
    v23 = a2[41];
    v24 = (*(uint64_t (**)(unsigned int *))(v22 + 1080))(a2);
    v25 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 1088))(a2);
    goto LABEL_32;
  }
  if (!v21)
  {
    v27 = a2 + 41;
    if (((a2[31] >> 13) & 6) - 2 >= 4)
      v27 = a2 + 40;
    v23 = *v27;
    v24 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)a2 + 1128))(a2, 0);
    v25 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)a2 + 1136))(a2, 0);
    goto LABEL_32;
  }
  v22 = *(_QWORD *)a2;
  if ((v20 & 0x1000) == 0)
    goto LABEL_25;
LABEL_22:
  v23 = a2[40];
  v24 = (*(uint64_t (**)(unsigned int *))(v22 + 1096))(a2);
  v25 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 1104))(a2);
LABEL_32:
  v28 = v24 + v25;
  if (__OFADD__(v24, v25))
    v28 = (v24 >> 31) + 0x7FFFFFFF;
  v29 = __OFADD__(v23, v28);
  v30 = v23 + v28;
  if (v29)
    v30 = (v23 >> 31) + 0x7FFFFFFF;
  v29 = __OFADD__(v30, v14);
  v31 = v30 + v14;
  v32 = (v30 >> 31) + 0x7FFFFFFF;
  if (!v29)
    v32 = v31;
  v33 = *(_DWORD *)(a1 + 72);
  v29 = __OFADD__(v32, v33);
  v34 = v32 + v33;
  v35 = (v32 >> 31) + 0x7FFFFFFF;
  if (!v29)
    v35 = v34;
  v29 = __OFSUB__(v35, v33);
  v36 = v35 - v33;
  if (v29)
    v36 = (v35 >> 31) + 0x7FFFFFFF;
  if (*(_DWORD *)(a1 + 76) > v36)
    v36 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a1 + 76) = v36;
  do
  {
    if (v10 >= *(unsigned int *)(a1 + 52))
      goto LABEL_61;
    v37 = *(_QWORD *)(a1 + 40);
    v38 = *(_DWORD *)(v37 + 4 * v10);
    if (v38 <= v35)
      v38 = v35;
    *(_DWORD *)(v37 + 4 * v10++) = v38;
  }
  while (v8 != v10);
  v47 = v14;
  v39 = (uint64_t *)(a1 + 56);
  v40 = (WTF *)*((_QWORD *)a2 + 1);
  if (!v40)
  {
    v40 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v40 = 1;
    *((_QWORD *)v40 + 1) = a2;
    v44 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v40;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1)
      {
        WTF::fastFree(v44, v43);
        v40 = (WTF *)*((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)v44;
      }
    }
  }
  ++*(_DWORD *)v40;
  v46 = v40;
  WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::set<WebCore::LayoutUnit&>(v39, (uint64_t *)&v46, &v47, (uint64_t)v45);
  result = v46;
  v46 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v41);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::set<WebCore::LayoutUnit&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  uint64_t *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a2;
  v13 = *(_QWORD *)(*a2 + 8);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (uint64_t *)(v8 + 16 * v19);
    v21 = (WTF *)*v20;
    if (!*v20)
    {
      if (v11)
      {
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0x80000000;
        --*(_DWORD *)(*v6 - 16);
        v12 = *a2;
        v20 = (uint64_t *)v11;
      }
      *a2 = 0;
      result = (uint64_t *)*v20;
      *v20 = v12;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        else
          --*(_DWORD *)result;
      }
      *((_DWORD *)v20 + 2) = *a3;
      v23 = *v6;
      if (*v6)
        v24 = *(_DWORD *)(v23 - 12) + 1;
      else
        v24 = 1;
      *(_DWORD *)(v23 - 12) = v24;
      v25 = *v6;
      if (*v6)
        v26 = *(_DWORD *)(v25 - 12);
      else
        v26 = 0;
      v27 = (*(_DWORD *)(v25 - 16) + v26);
      v28 = *(unsigned int *)(v25 - 4);
      if (v28 > 0x400)
      {
        if (v28 > 2 * v27)
          goto LABEL_20;
      }
      else
      {
        if (3 * v28 > 4 * v27)
        {
LABEL_20:
          *(_QWORD *)a4 = v20;
          *(_QWORD *)(a4 + 8) = v25 + 16 * v28;
          *(_BYTE *)(a4 + 16) = 1;
          return result;
        }
        if (!(_DWORD)v28)
        {
          v29 = 8;
LABEL_33:
          result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v6, v29, (WTF **)v20);
          v20 = result;
          v25 = *v6;
          if (*v6)
            v28 = *(unsigned int *)(v25 - 4);
          else
            v28 = 0;
          goto LABEL_20;
        }
      }
      v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
      goto LABEL_33;
    }
    if (v21 != (WTF *)-1)
      break;
    v11 = v8 + 16 * v19;
LABEL_29:
    v17 = i + v19;
  }
  if (*((_QWORD *)v21 + 1) != v13)
    goto LABEL_29;
  if ((v9 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v22;
  *(_BYTE *)(a4 + 16) = 0;
  *(_DWORD *)(v8 + 16 * v19 + 8) = *a3;
  return result;
}

uint64_t WebCore::GridMasonryLayout::offsetForChild(WebCore::GridMasonryLayout *this, const WebCore::RenderBox *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 7);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; v7 = (v9 + i++) & v3)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (*(const WebCore::RenderBox **)(v10 + 8) == a2)
        break;
    }
  }
  if ((_DWORD)v9 != *(_DWORD *)(v2 - 4))
    return *(unsigned int *)(v2 + 16 * v9 + 8);
  else
    return 0;
}

void WebCore::GridTrackSizingAlgorithm::~GridTrackSizingAlgorithm(WebCore::GridTrackSizingAlgorithm *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  WTF **v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  WTF **v26;
  WTF *v27;
  uint64_t v28;
  WTF **v29;
  WTF *v30;

  v3 = *((_QWORD *)this + 27);
  if (v3)
  {
    v16 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v16)
    {
      v17 = (WTF **)*((_QWORD *)this + 27);
      do
      {
        v18 = *v17;
        if (*v17 != (WTF *)-1)
        {
          *v17 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 1)
              WTF::fastFree(v18, a2);
            else
              --*(_DWORD *)v18;
          }
        }
        ++v17;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 26);
  if (v4)
  {
    v25 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v25)
    {
      v26 = (WTF **)*((_QWORD *)this + 26);
      do
      {
        v27 = *v26;
        if (*v26 != (WTF *)-1)
        {
          *v26 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 1)
              WTF::fastFree(v27, a2);
            else
              --*(_DWORD *)v27;
          }
        }
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v5 = *((_QWORD *)this + 25);
  if (v5)
  {
    v28 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v28)
    {
      v29 = (WTF **)*((_QWORD *)this + 25);
      do
      {
        v30 = *v29;
        if (*v29 != (WTF *)-1)
        {
          *v29 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
              WTF::fastFree(v30, a2);
            else
              --*(_DWORD *)v30;
          }
        }
        v29 += 2;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v6 = *((_QWORD *)this + 24);
  if (v6)
  {
    v19 = *((_QWORD *)this + 24);
    v20 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v20)
    {
      v21 = (void **)(v6 + 8);
      do
      {
        if (*((_DWORD *)v21 - 2) != -2)
        {
          a2 = *v21;
          *v21 = 0;
          if (a2)
            std::default_delete<WebCore::BaselineAlignmentState>::operator()[abi:sn180100]((int)v21, (WTF *)a2);
        }
        v21 += 2;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((WTF *)(v19 - 16), a2);
  }
  v7 = *((_QWORD *)this + 23);
  if (v7)
  {
    v22 = *((_QWORD *)this + 23);
    v23 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v23)
    {
      v24 = (void **)(v7 + 8);
      do
      {
        if (*((_DWORD *)v24 - 2) != -2)
        {
          a2 = *v24;
          *v24 = 0;
          if (a2)
            std::default_delete<WebCore::BaselineAlignmentState>::operator()[abi:sn180100]((int)v24, (WTF *)a2);
        }
        v24 += 2;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree((WTF *)(v22 - 16), a2);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  v12 = (WTF *)*((_QWORD *)this + 13);
  if (v12)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = (WTF *)*((_QWORD *)this + 11);
  if (v13)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = (WTF *)*((_QWORD *)this + 9);
  if (v14)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v14, a2);
  }
  WTF::Vector<WebCore::GridTrack,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  WTF::Vector<WebCore::GridTrack,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v15);
}

uint64_t WebCore::GridTrackSizingAlgorithm::computeTrackBasedSize(WebCore::RenderGrid **this)
{
  char *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;

  if (WebCore::RenderGrid::isMasonry((uint64_t)this[17], *((unsigned __int8 *)this + 120)))
    return WebCore::RenderGrid::masonryContentSize(this[17]);
  v2 = (char *)(this + 7);
  if (!*((_BYTE *)this + 120))
    v2 = (char *)(this + 5);
  v3 = *((unsigned int *)v2 + 3);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)v2;
    v6 = 136 * v3;
    v7 = (int *)(v5 + 8);
    do
    {
      v8 = *v7;
      v7 += 34;
      v9 = v8 & ~(v8 >> 31);
      v10 = __OFADD__(v4, v9);
      v11 = v4 + v9;
      if (v10)
        v4 = (v4 >> 31) + 0x7FFFFFFF;
      else
        v4 = v11;
      v6 -= 136;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  v12 = (uint64_t *)((char *)this + 4);
  if (!*((_BYTE *)this + 120))
    v12 = (uint64_t *)((char *)this + 12);
  v13 = WebCore::RenderGrid::guttersSize(this[17], *((unsigned __int8 *)this + 120), 0, v3, *v12);
  if (__OFADD__(v4, v13))
    return (v4 >> 31) + 0x7FFFFFFF;
  else
    return v4 + v13;
}

uint64_t WebCore::GridTrackSizingAlgorithm::sizeTrackToFitSingleSpanMasonryGroup(uint64_t result, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  float v19;
  double v20;
  int v21;
  int v22;
  int v23;
  float v24;
  float v26;
  double v27;
  uint64_t v28;
  int v29;

  v4 = *(unsigned __int8 *)(result + 120);
  v5 = result + 56;
  if (!*(_BYTE *)(result + 120))
    v5 = result + 40;
  if (*(_DWORD *)(v5 + 12) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x196336A04);
  }
  v6 = *(_QWORD *)v5;
  if (!*(_BYTE *)(v6 + 136 * a2 + 128))
  {
    __break(0xC471u);
    JUMPOUT(0x196336984);
  }
  v7 = v6 + 136 * a2;
  v8 = v7 + 40;
  v9 = *(_WORD *)(v7 + 120);
  if ((v9 & 8) != 0)
  {
    v10 = a3[16];
  }
  else if ((v9 & 4) != 0)
  {
    v10 = a3[17];
  }
  else
  {
    if ((v9 & 1) == 0)
      goto LABEL_16;
    v10 = a3[18];
  }
  v11 = *(_DWORD *)(a4 + 12);
  if (*(_DWORD *)(a4 + 8) > v10)
    v10 = *(_DWORD *)(a4 + 8);
  v12 = v10 & ~(v10 >> 31);
  *(_DWORD *)(a4 + 8) = v12;
  if (v11 != -64 && v11 < v12)
    *(_DWORD *)(a4 + 12) = v12;
LABEL_16:
  v13 = *(_WORD *)(v8 + 80);
  if ((v13 & 0x20) != 0)
  {
    v14 = *(_DWORD *)(a4 + 12);
    if (v14 <= a3[16])
      v14 = a3[16];
    goto LABEL_42;
  }
  if ((v13 & 0x12) == 0)
    return result;
  v14 = a3[17];
  if (*(_DWORD *)v8 == 2)
  {
    if (v4)
      v15 = (uint64_t *)(result + 4);
    else
      v15 = (uint64_t *)(result + 12);
    v16 = *v15;
    if ((v16 & 0xFF00000000) == 0)
      LODWORD(v16) = 0;
    v17 = *(unsigned __int8 *)(v8 + 60);
    if (v17 - 3 >= 2 && v17 != 11)
    {
      if (v17 < 2 || v17 == 9)
        v21 = v16;
      else
        v21 = 0;
      goto LABEL_35;
    }
    if (v17 == 4)
    {
      v19 = *(float *)(v8 + 56);
      if (!*(_BYTE *)(v8 + 62))
        v19 = (float)SLODWORD(v19);
    }
    else
    {
      if (v17 != 3)
      {
        if (v17 == 11)
        {
          v29 = a3[17];
          v28 = a4;
          result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v8 + 56), (float)(int)v16 * 0.015625);
          v27 = v26 * 64.0;
          if (v27 >= 2147483650.0)
          {
            v21 = 0x7FFFFFFF;
          }
          else if (v27 <= -2147483650.0)
          {
            v21 = 0x80000000;
          }
          else
          {
            v21 = (int)v27;
          }
          a4 = v28;
          v14 = v29;
        }
        else
        {
          v21 = 0;
        }
LABEL_35:
        if (v21 < v14)
          v14 = v21;
        goto LABEL_37;
      }
      v24 = *(float *)(v8 + 56);
      if (!*(_BYTE *)(v8 + 62))
        v24 = (float)SLODWORD(v24);
      v19 = (float)((float)((float)(int)v16 * 0.015625) * v24) / 100.0;
    }
    v20 = v19 * 64.0;
    if (v20 >= 2147483650.0)
    {
      v21 = 0x7FFFFFFF;
    }
    else if (v20 <= -2147483650.0)
    {
      v21 = 0x80000000;
    }
    else
    {
      v21 = (int)v20;
    }
    goto LABEL_35;
  }
LABEL_37:
  if (*(_DWORD *)(a4 + 12) > v14)
    v14 = *(_DWORD *)(a4 + 12);
LABEL_42:
  if (v14 == -64)
  {
    *(_DWORD *)(a4 + 12) = -64;
  }
  else
  {
    if (*(_BYTE *)(a4 + 28))
      v22 = *(_DWORD *)(a4 + 24);
    else
      v22 = v14;
    if (v22 < v14)
      v14 = v22;
    *(_DWORD *)(a4 + 12) = v14;
    if (v14 != -64)
    {
      v23 = *(_DWORD *)(a4 + 8) & ~(*(int *)(a4 + 8) >> 31);
      if (v14 < v23)
        *(_DWORD *)(a4 + 12) = v23;
    }
  }
  return result;
}

uint64_t WebCore::GridTrackSizingAlgorithmStrategy::maxContentForChild(WebCore::GridTrackSizingAlgorithmStrategy *this, WebCore::RenderBox *a2)
{
  uint64_t v4;
  _BOOL8 v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t result;
  int v14;

  v4 = *((_QWORD *)this + 1);
  v5 = ((*((_BYTE *)a2 + 21) & 0x10) == 0) != ((*(_BYTE *)(*(_QWORD *)(v4 + 136) + 21) & 0x10) == 0);
  if (*(_BYTE *)(v4 + 120) == v5)
  {
    if (((*(uint64_t (**)(WebCore::GridTrackSizingAlgorithmStrategy *))(*(_QWORD *)this + 64))(this) & 1) != 0)
    {
      return 0;
    }
    else
    {
      if ((*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1520))(a2))
        WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)a2, 1, 1);
      v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 416))(a2);
      v7 = WebCore::GridLayoutFunctions::marginLogicalSizeForChild(*(WebCore::RenderBlock **)(*((_QWORD *)this + 1) + 136), v5, a2);
      if (__OFADD__(v6, v7))
        v8 = (v6 >> 31) + 0x7FFFFFFF;
      else
        v8 = v6 + v7;
      v9 = *((_QWORD *)this + 1);
      if (*(_BYTE *)(v9 + 120))
        v10 = 2;
      else
        v10 = 1;
      v11 = WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild(v9, (uint64_t)a2, v10);
      v12 = __OFADD__(v8, v11);
      result = v8 + v11;
      if (v12)
        return (v8 >> 31) + 0x7FFFFFFF;
    }
  }
  else
  {
    if (WebCore::GridTrackSizingAlgorithmStrategy::updateOverridingContainingBlockContentSizeForChild((uint64_t *)this, (uint64_t)a2, v5, 0))
    {
      v14 = *((_DWORD *)a2 + 5);
      if ((v14 & 8) == 0)
      {
        *((_DWORD *)a2 + 5) = v14 | 8;
        if ((v14 & 0x8000) != 0)
          WebCore::RenderObject::setLayerNeedsFullRepaint((uint64_t)a2);
      }
    }
    return WebCore::GridTrackSizingAlgorithmStrategy::logicalHeightForChild(this, a2);
  }
  return result;
}

uint64_t WebCore::GridTrackSizingAlgorithmStrategy::minSizeForChild(WebCore::GridTrackSizingAlgorithmStrategy *this, WebCore::RenderBox *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned __int8 *v67;
  uint64_t v68;
  int v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v4 = *((_QWORD *)this + 1);
  v5 = ((*((_BYTE *)a2 + 21) & 0x10) == 0) != ((*(_BYTE *)(*(_QWORD *)(v4 + 136) + 21) & 0x10) == 0);
  v6 = *(unsigned __int8 *)(v4 + 120);
  if (v6 == v5)
  {
    if (((*(uint64_t (**)(WebCore::GridTrackSizingAlgorithmStrategy *))(*(_QWORD *)this + 64))(this) & 1) != 0)
      return 0;
    v7 = *((_DWORD *)a2 + 31);
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8);
    v9 = ((v7 >> 13) & 6) - 2 >= 4;
    v10 = v8 + 12;
    v11 = v8 + 4;
  }
  else
  {
    v7 = *((_DWORD *)a2 + 31);
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8);
    v9 = ((v7 >> 13) & 6) - 2 >= 4;
    v10 = v8 + 4;
    v11 = v8 + 12;
  }
  if (v9)
    v10 = v11;
  v12 = *(unsigned __int8 *)(v10 + 4);
  v13 = v12 > 0xB;
  v14 = (1 << v12) & 0x809;
  if (v13 || v14 == 0)
    return (**(uint64_t (***)(WebCore::GridTrackSizingAlgorithmStrategy *, WebCore::RenderBox *))this)(this, a2);
  v16 = ((v7 >> 13) & 6) - 2;
  if (v6 == v5)
  {
    if (v16 < 4)
      goto LABEL_13;
LABEL_81:
    v17 = v8 + 20;
    v19 = WebCore::RenderElement::effectiveOverflowX(a2);
    goto LABEL_19;
  }
  if (v16 < 4)
    goto LABEL_81;
LABEL_13:
  v17 = v8 + 36;
  if ((unsigned __int16)*((_DWORD *)a2 + 24) >> 13)
    v18 = (unsigned __int16)*((_DWORD *)a2 + 24) >> 13;
  else
    v18 = 2;
  if ((*((_BYTE *)a2 + 22) & 8) != 0)
    v19 = v18;
  else
    v19 = (unsigned __int16)*((_DWORD *)a2 + 24) >> 13;
LABEL_19:
  v20 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v20 + 120))
    v21 = 2;
  else
    v21 = 1;
  v22 = WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild(v20, (uint64_t)a2, v21);
  if (*(_BYTE *)(v17 + 4))
    v23 = 0;
  else
    v23 = v19 == 0;
  if (!v23)
  {
    v57 = WebCore::GridTrackSizingAlgorithm::gridAreaBreadthForChild(*((_QWORD *)this + 1), a2, v5);
    v58 = (*(uint64_t (**)(WebCore::GridTrackSizingAlgorithmStrategy *, WebCore::RenderBox *, uint64_t, uint64_t))(*(_QWORD *)this + 80))(this, a2, v17, v57);
    v24 = v58 + v22;
    if (__OFADD__(v58, v22))
      return (v58 >> 31) + 0x7FFFFFFF;
    return v24;
  }
  v24 = (**(uint64_t (***)(WebCore::GridTrackSizingAlgorithmStrategy *, WebCore::RenderBox *))this)(this, a2);
  v25 = WebCore::RenderGrid::gridSpanForChild(*(_QWORD *)(*((_QWORD *)this + 1) + 136), (uint64_t)a2, *(unsigned __int8 *)(*((_QWORD *)this + 1) + 120));
  v26 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v26 + 120))
    v27 = v26 + 56;
  else
    v27 = v26 + 40;
  v28 = HIDWORD(v25);
  if (HIDWORD(v25) == (_DWORD)v25)
  {
    v30 = 0;
  }
  else
  {
    v29 = v25;
    if ((HIDWORD(v25) - v25) > 1)
    {
      v30 = 0;
      v31 = 136 * v25;
      LOBYTE(v32) = 1;
      while (v29 < *(unsigned int *)(v27 + 12))
      {
        v33 = *(_QWORD *)v27 + v31;
        if (!*(_BYTE *)(v33 + 128))
          break;
        if (*(_DWORD *)(v33 + 88) == 1)
          return 0;
        v32 &= (unsigned __int16)(*(_WORD *)(*(_QWORD *)v27 + v31 + 120) & 0x100) >> 8;
        if (v32 == 1)
        {
          v67 = (unsigned __int8 *)(v33 + 72);
          v68 = *((_QWORD *)this + 1);
          v69 = *(unsigned __int8 *)(v68 + 120);
          v70 = (uint64_t *)(v68 + 4);
          v71 = (uint64_t *)(v68 + 12);
          if (v69)
            v71 = v70;
          v72 = *v71;
          if ((v72 & 0xFF00000000) != 0)
            v73 = v72;
          else
            v73 = 0;
          v80 = v29;
          v82 = v27;
          v78 = v28;
          v76 = v31;
          v74 = WebCore::valueForLength(v67, v73);
          v31 = v76;
          v32 = 1;
          v28 = v78;
          v29 = v80;
          v27 = v82;
          if (__OFADD__(v30, v74))
            v30 = (v30 >> 31) + 0x7FFFFFFF;
          else
            v30 += v74;
        }
        ++v29;
        v31 += 136;
        if (v28 == v29)
          goto LABEL_55;
      }
LABEL_99:
      __break(0xC471u);
      JUMPOUT(0x196336FA8);
    }
    v30 = 0;
    v46 = 136 * v25;
    LOBYTE(v32) = 1;
    do
    {
      if (v29 >= *(unsigned int *)(v27 + 12))
        goto LABEL_99;
      v47 = *(_QWORD *)v27 + v46;
      if (!*(_BYTE *)(v47 + 128))
        goto LABEL_99;
      v32 &= (unsigned __int16)(*(_WORD *)(v47 + 120) & 0x100) >> 8;
      if (v32 == 1)
      {
        v59 = (unsigned __int8 *)(v47 + 72);
        v60 = *((_QWORD *)this + 1);
        v61 = *(unsigned __int8 *)(v60 + 120);
        v62 = (uint64_t *)(v60 + 12);
        v63 = (uint64_t *)(v60 + 4);
        if (!v61)
          v63 = v62;
        v64 = *v63;
        if ((v64 & 0xFF00000000) != 0)
          v65 = v64;
        else
          v65 = 0;
        v79 = v29;
        v81 = v27;
        v77 = v28;
        v75 = v46;
        v66 = WebCore::valueForLength(v59, v65);
        v46 = v75;
        v32 = 1;
        v28 = v77;
        v29 = v79;
        v27 = v81;
        if (__OFADD__(v30, v66))
          v30 = (v30 >> 31) + 0x7FFFFFFF;
        else
          v30 += v66;
      }
      ++v29;
      v46 += 136;
    }
    while (v28 != v29);
LABEL_55:
    if (!v32)
      return v24;
  }
  if ((int)v24 <= (int)v30)
    return v24;
  v34 = WebCore::GridLayoutFunctions::marginLogicalSizeForChild(*(WebCore::RenderBlock **)(*((_QWORD *)this + 1) + 136), *(unsigned __int8 *)(*((_QWORD *)this + 1) + 120), a2);
  v35 = *(_QWORD *)a2;
  if (v6 == v5)
  {
    v36 = (*(uint64_t (**)(WebCore::RenderBox *))(v35 + 1064))(a2);
    v37 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1072))(a2);
    if (__OFADD__(v36, v37))
      v38 = (v36 >> 31) + 0x7FFFFFFF;
    else
      v38 = v36 + v37;
    v39 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 976))(a2);
    if (__OFADD__(v38, v39))
      v40 = (v38 >> 31) + 0x7FFFFFFF;
    else
      v40 = v38 + v39;
    v41 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 984))(a2);
    v42 = __OFADD__(v40, v41);
    v43 = v40 + v41;
    v44 = (v40 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v48 = (*(uint64_t (**)(WebCore::RenderBox *))(v35 + 1048))(a2);
    v49 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 960))(a2);
    if (__OFADD__(v48, v49))
      v50 = (v48 >> 31) + 0x7FFFFFFF;
    else
      v50 = v48 + v49;
    v51 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1056))(a2);
    v52 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 968))(a2);
    v53 = v51 + v52;
    if (__OFADD__(v51, v52))
      v53 = (v51 >> 31) + 0x7FFFFFFF;
    v42 = __OFADD__(v50, v53);
    v43 = v50 + v53;
    v44 = (v50 >> 31) + 0x7FFFFFFF;
  }
  if (v42)
    v43 = v44;
  v42 = __OFADD__(v34, v43);
  v54 = v34 + v43;
  if (v42)
    v54 = (v34 >> 31) + 0x7FFFFFFF;
  v42 = __OFADD__(v54, v22);
  v55 = v54 + v22;
  v56 = (v54 >> 31) + 0x7FFFFFFF;
  if (!v42)
    v56 = v55;
  if ((int)v30 <= v56)
    return v56;
  else
    return v30;
}

uint64_t WebCore::GridTrackSizingAlgorithm::estimatedGridAreaBreadthForChild(_QWORD *a1, _BYTE *a2, unsigned int a3)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  void *v34;
  float v35;
  int v36;
  int v37;
  double v38;
  int v39;
  int v40;
  int v41;
  int v43;
  char *v44;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int8 v50;
  char v51;
  char v52;
  uint64_t v53;
  int v54;
  _BYTE v55[8];
  unsigned int v56;
  char v57;
  unsigned int v58;
  unsigned __int8 v59;
  char v60;
  char v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  char v65;

  v5 = WebCore::RenderGrid::gridSpanForChild(a1[17], (uint64_t)a2, a3);
  v6 = (_QWORD *)((char *)a1 + 4);
  if (!a3)
    v6 = (_QWORD *)((char *)a1 + 12);
  v7 = *v6;
  v8 = HIDWORD(v5);
  v47 = *v6;
  v48 = v5;
  v46 = HIDWORD(v5) - v5;
  if (HIDWORD(v5) != (_DWORD)v5)
  {
    v10 = 0;
    v9 = 0;
    v16 = 4;
    if (!a3)
      v16 = 12;
    if ((v7 & 0xFF00000000) != 0)
      v17 = v7;
    else
      v17 = 0;
    v43 = v17;
    v18 = (float)v17 * 0.015625;
    v44 = (char *)a1 + v16;
    v19 = v5;
    while (1)
    {
      if (a1[18])
      {
        WebCore::GridTrackSizingAlgorithm::calculateGridTrackSize((WebCore::GridTrackSize *)v55, (uint64_t)a1, a3, v19);
        goto LABEL_34;
      }
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[17] + 88) + 40) + 80);
      if (a3)
      {
        v21 = v20 + 136;
        v22 = v20 + 232;
        v23 = v20 + 40;
        v24 = (int *)(v20 + 252);
      }
      else
      {
        v21 = v20 + 120;
        v22 = v20 + 216;
        v23 = v20 + 56;
        v24 = (int *)(v20 + 248);
      }
      v25 = a1[16];
      if (a3 == 1)
        v26 = 68;
      else
        v26 = 64;
      v27 = 56;
      if (a3 == 1)
        v27 = 60;
      v28 = *(_DWORD *)(v25 + v27);
      v29 = *(unsigned int *)(v23 + 12);
      v30 = v19 - v28;
      if ((int)(v19 - v28) < 0)
      {
        if ((int)v30 % (int)v29)
          v39 = *(_DWORD *)(v23 + 12);
        else
          v39 = 0;
        v40 = v39 + (int)v30 % (int)v29;
        if (v29 <= v40)
        {
          __break(0xC471u);
          JUMPOUT(0x19633764CLL);
        }
        v30 = v40;
        goto LABEL_33;
      }
      v31 = *(_DWORD *)(v25 + v26);
      v32 = *(_DWORD *)(v21 + 12);
      if (v30 >= v32 + v31)
      {
        v30 = (v19 - v31 - v32 - v28) % v29;
      }
      else
      {
        if (v31 && (v41 = *v24, v30 >= *v24))
        {
          if (v30 < v31 + v41)
          {
            v30 = (v19 - v41 - v28) % *(_DWORD *)(v22 + 12);
            v23 = v22;
            goto LABEL_33;
          }
          v30 = v19 - v31 - v28;
          if (v32 <= v30)
          {
            __break(0xC471u);
            JUMPOUT(0x196337654);
          }
        }
        else if (v32 <= v30)
        {
          __break(0xC471u);
          JUMPOUT(0x196337644);
        }
        v23 = v21;
      }
LABEL_33:
      WebCore::GridTrackSize::GridTrackSize((uint64_t)v55, *(_QWORD *)v23 + 88 * v30);
LABEL_34:
      v49 = 0;
      v52 = 0;
      v33 = v59;
      v50 = v59;
      v51 = v60;
      if (v59 - 2 >= 9)
      {
        if (v59 == 11)
        {
          v34 = (void *)v58;
          v49 = v58;
          WebCore::Length::ref((int *)&v49);
          goto LABEL_37;
        }
        v34 = 0;
        v36 = 1;
        v35 = 0.0;
      }
      else
      {
        v52 = v61;
        if (!v61)
        {
          v34 = (void *)v58;
          v49 = v58;
LABEL_37:
          v35 = *(float *)&v34;
          v36 = 1;
          goto LABEL_41;
        }
        v36 = 0;
        v35 = *(float *)&v58;
        v49 = v58;
        v34 = (void *)v58;
      }
LABEL_41:
      v54 = v63;
      v53 = v62;
      if (v63)
      {
        if (v63 != 1)
          goto LABEL_52;
        goto LABEL_84;
      }
      if (v33 && (v33 - 7) >= 2)
      {
        if ((v33 & 0xFFFFFFF7) != 3 || v44[4])
        {
LABEL_52:
          if (v33 == 4)
          {
            if (v36)
              v35 = (float)SLODWORD(v35);
LABEL_61:
            v38 = v35 * 64.0;
            if (v38 >= 2147483650.0)
            {
              v37 = 0x7FFFFFFF;
            }
            else if (v38 <= -2147483650.0)
            {
              v37 = 0x80000000;
            }
            else
            {
              v37 = (int)v38;
            }
          }
          else
          {
            v37 = 0;
            switch(v33)
            {
              case 0:
              case 1:
              case 9:
                v37 = v43;
                break;
              case 3:
                if (v36)
                  v35 = (float)SLODWORD(v35);
                v35 = (float)(v18 * v35) / 100.0;
                goto LABEL_61;
              case 11:
                WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v49, v18);
                goto LABEL_61;
              default:
                break;
            }
          }
          if (__OFADD__(v9, v37))
            v9 = (v9 >> 31) + 0x7FFFFFFF;
          else
            v9 += v37;
          goto LABEL_66;
        }
LABEL_84:
        v10 = 1;
LABEL_66:
        if (v33 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v34);
        }
        goto LABEL_44;
      }
      v10 = 1;
LABEL_44:
      if (v65 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v64);
      }
      if (v59 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v58);
      }
      if (v57 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v56);
      }
      if ((_DWORD)v8 == ++v19)
        goto LABEL_5;
    }
  }
  v9 = 0;
  v10 = 0;
LABEL_5:
  v11 = WebCore::RenderGrid::guttersSize((WebCore::RenderElement *)a1[17], a3, v48, v46, v47);
  if (__OFADD__(v9, v11))
    v12 = (v9 >> 31) + 0x7FFFFFFF;
  else
    v12 = v9 + v11;
  if ((v10 & 1) != 0)
  {
    if ((((a2[21] & 0x10) == 0) != ((*(_BYTE *)(a1[17] + 21) & 0x10) == 0)) != a3)
    {
      v15 = 0;
      LOBYTE(v12) = 0;
      v14 = 0;
      return v15 | v14 | v12;
    }
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 416))();
    if (v13 > v12)
      v12 = v13;
  }
  v14 = v12 & 0xFFFFFF00;
  v15 = 0x100000000;
  return v15 | v14 | v12;
}

int *WebCore::GridTrackSizingAlgorithm::calculateGridTrackSize(WebCore::GridTrackSize *this, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int *v14;
  uint64_t *v15;
  unsigned int *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  int v31;
  int v32;
  unsigned int *v33;
  void *v34;
  WebCore::GridTrackSize *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  int v40;
  unsigned int *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int *result;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  WebCore::GridTrackSize *v49;
  int isEmptyAutoRepeatTrack;
  WebCore::GridTrackSize *v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  WebCore::GridTrackSize *v56;
  WebCore::GridTrackSize *v57;
  WebCore::GridTrackSize *v58;
  WebCore::GridTrackSize *v59;
  unsigned int v60;
  __int16 v61;
  char v62;
  unsigned int v63;
  __int16 v64;
  char v65;
  uint64_t v66;
  int v67;
  _DWORD v68[2];
  unsigned int v69;
  __int16 v70;
  char v71;
  uint64_t v72;
  int v73;

  v8 = *(_QWORD *)(a2 + 128);
  v9 = 120;
  if (!a3)
    v9 = 112;
  if (*(_QWORD *)(v8 + v9))
  {
    v49 = this;
    isEmptyAutoRepeatTrack = WebCore::Grid::isEmptyAutoRepeatTrack(v8, a3, a4);
    this = v49;
    if (isEmptyAutoRepeatTrack)
    {
      v63 = 0;
      v64 = 4;
      v65 = 0;
      WebCore::GridLength::GridLength((WebCore::GridLength *)&v69, (const WebCore::Length *)&v63);
      result = (int *)WebCore::GridTrackSize::GridTrackSize((uint64_t)v49, (uint64_t)&v69, 0);
      if (v70 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v69);
      }
      if (v64 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v48 = (void *)v63;
        return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v48);
      }
      return result;
    }
  }
  v10 = *(_QWORD *)(a2 + 128);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 88) + 40) + 80);
  v12 = (uint64_t *)(v11 + 232);
  v13 = (uint64_t *)(v11 + 40);
  v14 = (unsigned int *)(v11 + 252);
  if (!a3)
    v13 = (uint64_t *)(v11 + 56);
  v15 = (uint64_t *)(v11 + 216);
  v16 = (unsigned int *)(v11 + 248);
  if (a3)
    v17 = (uint64_t *)(v11 + 136);
  else
    v17 = (uint64_t *)(v11 + 120);
  if (a3)
    v18 = v12;
  else
    v18 = v15;
  if (a3)
    v19 = v14;
  else
    v19 = v16;
  v20 = 68;
  if (a3 != 1)
    v20 = 64;
  v21 = 56;
  if (a3 == 1)
    v21 = 60;
  v22 = *(_DWORD *)(v10 + v21);
  v23 = *((unsigned int *)v13 + 3);
  v24 = a4 - v22;
  if ((int)(a4 - v22) >= 0)
  {
    v25 = *(_DWORD *)(v10 + v20);
    v26 = *((_DWORD *)v17 + 3);
    if (v24 >= v26 + v25)
    {
      v24 = (v24 - (v26 + v25)) % v23;
      goto LABEL_24;
    }
    if (v25 && (v54 = *v19, v24 >= v54))
    {
      if (v24 < v25 + v54)
      {
        v24 = (v24 - v54) % *((_DWORD *)v18 + 3);
        v13 = v18;
        goto LABEL_24;
      }
      v24 = (v24 - v25);
      if (v26 <= v24)
      {
        __break(0xC471u);
        JUMPOUT(0x196337BBCLL);
      }
    }
    else if (v26 <= v24)
    {
      __break(0xC471u);
      JUMPOUT(0x196337D04);
    }
    v13 = v17;
    goto LABEL_24;
  }
  if ((int)v24 % (int)v23)
    v52 = *((_DWORD *)v13 + 3);
  else
    v52 = 0;
  v53 = v52 + (int)v24 % (int)v23;
  if (v23 <= v53)
  {
    __break(0xC471u);
    JUMPOUT(0x196337DA0);
  }
  v24 = v53;
LABEL_24:
  v27 = *v13;
  v28 = (_DWORD *)(*v13 + 88 * v24);
  if (*v28 == 2)
  {
    v51 = this;
    if (*(_DWORD *)(v27 + 88 * v24 + 72) || (*(_BYTE *)(v27 + 88 * v24 + 60) & 0xF7) != 3)
      return (int *)WebCore::GridTrackSize::GridTrackSize((uint64_t)this, (uint64_t)v28);
    v55 = a3 ? a2 + 4 : a2 + 12;
    if (*(_BYTE *)(v55 + 4))
    {
      return (int *)WebCore::GridTrackSize::GridTrackSize((uint64_t)this, (uint64_t)v28);
    }
    else
    {
      *(_DWORD *)((char *)v68 + 3) = 0;
      v68[0] = 0;
      WebCore::GridLength::GridLength((WebCore::GridLength *)&v69, (const WebCore::Length *)v68);
      v60 = 0;
      v61 = 8;
      v62 = 0;
      WebCore::GridLength::GridLength((WebCore::GridLength *)&v63, (const WebCore::Length *)&v60);
      result = (int *)WebCore::GridTrackSize::GridTrackSize(v51, (const WebCore::GridLength *)&v69, (const WebCore::GridLength *)&v63);
      if (v64 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v63);
      }
      if (v61 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v60);
      }
      if (v70 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v69);
      }
      if (LOBYTE(v68[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v48 = (void *)v68[0];
        return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v48);
      }
    }
  }
  else
  {
    v29 = v27 + 88 * v24;
    v69 = 0;
    v32 = *(unsigned __int8 *)(v29 + 12);
    v30 = (_BYTE *)(v29 + 12);
    v31 = v32;
    v33 = (unsigned int *)(v30 - 4);
    v71 = 0;
    LOBYTE(v70) = v32;
    HIBYTE(v70) = v30[1];
    if ((v32 - 2) >= 9)
    {
      v34 = 0;
      if (v31 == 11)
      {
        v34 = (void *)*v33;
        v69 = *v33;
        v35 = this;
        WebCore::Length::ref((int *)&v69);
        this = v35;
      }
    }
    else
    {
      v71 = *(_BYTE *)(v27 + 88 * v24 + 14);
      if (v71)
      {
        v69 = *v33;
        v34 = (void *)v69;
      }
      else
      {
        v34 = (void *)*v33;
        v69 = *v33;
      }
    }
    v36 = v27 + 88 * v24;
    v37 = *(_QWORD *)(v36 + 16);
    v73 = *(_DWORD *)(v36 + 24);
    v72 = v37;
    v63 = 0;
    v40 = *(unsigned __int8 *)(v36 + 36);
    v39 = (_BYTE *)(v36 + 36);
    v38 = v40;
    v41 = (unsigned int *)(v39 - 4);
    v65 = 0;
    LOBYTE(v64) = v40;
    HIBYTE(v64) = v39[1];
    if ((v40 - 2) >= 9)
    {
      v42 = 0;
      if (v38 == 11)
      {
        v42 = (void *)*v41;
        v63 = *v41;
        v59 = this;
        WebCore::Length::ref((int *)&v63);
        this = v59;
      }
    }
    else
    {
      v65 = *(_BYTE *)(v27 + 88 * v24 + 38);
      if (v65)
      {
        v63 = *v41;
        v42 = (void *)v63;
      }
      else
      {
        v42 = (void *)*v41;
        v63 = *v41;
      }
    }
    v43 = v27 + 88 * v24;
    v44 = *(_QWORD *)(v43 + 40);
    v67 = *(_DWORD *)(v43 + 48);
    v66 = v44;
    if (!*(_DWORD *)(v43 + 24) && (*v30 & 0xF7) == 3)
    {
      v46 = a3 ? a2 + 4 : a2 + 12;
      if (!*(_BYTE *)(v46 + 4))
      {
        if (v31 == 11)
        {
          v57 = this;
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v34);
          this = v57;
        }
        v34 = 0;
        v31 = 0;
        v70 = 0;
        v69 = 0;
        v72 = 0;
        v73 = 0;
      }
    }
    if (!*(_DWORD *)(v27 + 88 * v24 + 48) && (*v39 & 0xF7) == 3)
    {
      v47 = a3 ? a2 + 4 : a2 + 12;
      if (!*(_BYTE *)(v47 + 4))
      {
        if (v38 == 11)
        {
          v58 = this;
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v42);
          this = v58;
        }
        v64 = 0;
        v63 = 0;
        v66 = 0;
        v67 = 0;
      }
    }
    if (v73 == 1)
    {
      if (v31 == 11)
      {
        v56 = this;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v34);
        this = v56;
      }
      v70 = 0;
      v69 = 0;
      v72 = 0;
      v73 = 0;
    }
    result = (int *)WebCore::GridTrackSize::GridTrackSize(this, (const WebCore::GridLength *)&v69, (const WebCore::GridLength *)&v63);
    if (v64 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v63);
    }
    if (v70 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v48 = (void *)v69;
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v48);
    }
  }
  return result;
}

uint64_t WebCore::computeGridSpanSize(uint64_t result, unsigned int a2, unsigned int a3, int a4, unsigned int a5, int a6)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v6 = a4 - a3;
  if (a4 == a3)
  {
    v8 = 0;
  }
  else
  {
    v7 = a2 - a3;
    if (a2 < a3)
      v7 = 0;
    if (v7 <= ~a3 + a4)
    {
      __break(0xC471u);
      return result;
    }
    v8 = 0;
    v9 = (int *)(result + 136 * a3 + 8);
    do
    {
      v10 = *v9;
      v9 += 34;
      v11 = v10 & ~(v10 >> 31);
      v12 = __OFADD__(v8, v11);
      v13 = v8 + v11;
      v14 = v12;
      v8 = (v8 >> 31) + 0x7FFFFFFF;
      if ((v14 & 1) == 0)
        v8 = v13;
      --v6;
    }
    while (v6);
  }
  v12 = __OFADD__(v8, a6);
  v15 = v8 + a6;
  v16 = (v8 >> 31) + 0x7FFFFFFF;
  if (v12)
    v15 = v16;
  v17 = ~a3 + a4;
  if (v17 <= 0x1FFFFFE)
    v18 = v17 << 6;
  else
    v18 = 0x7FFFFFFFLL;
  v19 = (int)a5 * v18 / 64;
  if (HIDWORD(v19) != (int)v19 >> 31)
    LODWORD(v19) = (a5 >> 31) + 0x7FFFFFFF;
  v12 = __OFADD__(v15, (_DWORD)v19);
  v20 = v15 + v19;
  v21 = (v15 >> 31) + 0x7FFFFFFF;
  if (v12)
    return v21;
  else
    return v20;
}

double WebCore::GridTrackSizingAlgorithm::computeFlexFactorUnitSize(uint64_t *a1, _DWORD *a2, uint64_t a3, uint64_t **a4, double a5)
{
  double v5;
  double v6;
  uint64_t v7;
  unsigned int *v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  double v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  void *v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  WTF *v38;
  _BYTE v39[28];
  unsigned int v40;

  v5 = a5;
  v6 = (double)(int)*a2 * 0.015625 / fmax(a5, 1.0);
  v7 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v7)
  {
    v12 = *(unsigned int **)a3;
    v13 = *(_QWORD *)a3 + 4 * v7;
    v14 = 1;
LABEL_3:
    v15 = *a4;
    v16 = *((_DWORD *)a1 + 3);
    v17 = *a1;
    if (!*a4)
    {
      while (1)
      {
        v18 = *v12;
        v40 = v18;
        if (v16 <= v18 || !*(_BYTE *)(v17 + 136 * v18 + 128))
          break;
        v19 = v17 + 136 * v18;
        v20 = *(_DWORD *)(v19 + 8) & ~(*(int *)(v19 + 8) >> 31);
        v21 = *(double *)(v19 + 80);
        if ((double)v20 * 0.015625 > v6 * v21)
          goto LABEL_25;
        if (++v12 == (unsigned int *)v13)
          goto LABEL_38;
      }
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x1963381D4);
    }
    v22 = *v15;
    if (*v15)
    {
      while (1)
      {
        v23 = *v12;
        v40 = v23;
        v24 = *(_DWORD *)(v22 - 8);
        v25 = 9 * ((v23 + ~(v23 << 15)) ^ ((v23 + ~(v23 << 15)) >> 10));
        v26 = v24 & (((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) ^ (((v25 ^ (v25 >> 6))
                                                                          + ~((v25 ^ (v25 >> 6)) << 11)) >> 16));
        v27 = *(_DWORD *)(v22 + 4 * v26);
        if (v27 != v23)
        {
          v28 = 1;
          while (v27 != -1)
          {
            v26 = (v26 + v28) & v24;
            v27 = *(_DWORD *)(v22 + 4 * v26);
            ++v28;
            if (v27 == v23)
              goto LABEL_11;
          }
          if (v16 <= v23 || !*(_BYTE *)(v17 + 136 * v23 + 128))
            goto LABEL_40;
          v29 = v17 + 136 * v23;
          v20 = *(_DWORD *)(v29 + 8) & ~(*(int *)(v29 + 8) >> 31);
          v21 = *(double *)(v29 + 80);
          if ((double)v20 * 0.015625 > v6 * v21)
            goto LABEL_25;
        }
LABEL_11:
        if (++v12 == (unsigned int *)v13)
          goto LABEL_38;
      }
    }
    do
    {
      v30 = *v12;
      v40 = v30;
      if (v16 <= v30 || !*(_BYTE *)(v17 + 136 * v30 + 128))
        goto LABEL_40;
      v31 = v17 + 136 * v30;
      v20 = *(_DWORD *)(v31 + 8) & ~(*(int *)(v31 + 8) >> 31);
      v21 = *(double *)(v31 + 80);
      if ((double)v20 * 0.015625 > v6 * v21)
      {
LABEL_25:
        v32 = (*a2 >> 31) + 0x7FFFFFFF;
        if (!__OFSUB__(*a2, v20))
          v32 = *a2 - v20;
        *a2 = v32;
        if (!v15)
        {
          v15 = (uint64_t *)WTF::fastMalloc((WTF *)8);
          *v15 = 0;
          v34 = (WTF *)*a4;
          *a4 = v15;
          if (v34)
          {
            if (*(_QWORD *)v34)
              WTF::fastFree((WTF *)(*(_QWORD *)v34 - 16), v33);
            WTF::fastFree(v34, v33);
            v15 = *a4;
          }
        }
        v5 = v5 - v21;
        WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(v15, (int *)&v40, (uint64_t)v39);
        v14 = 0;
        if (++v12 == (unsigned int *)v13)
        {
          v15 = *a4;
          goto LABEL_34;
        }
        goto LABEL_3;
      }
      ++v12;
    }
    while (v12 != (unsigned int *)v13);
LABEL_38:
    if ((v14 & 1) != 0)
      return v6;
LABEL_34:
    *a4 = 0;
    v38 = (WTF *)v15;
    v6 = WebCore::GridTrackSizingAlgorithm::computeFlexFactorUnitSize(a1, a2, a3, &v38, v5);
    v36 = v38;
    if (v38)
    {
      if (*(_QWORD *)v38)
        WTF::fastFree((WTF *)(*(_QWORD *)v38 - 16), v35);
      WTF::fastFree(v36, v35);
    }
  }
  return v6;
}

uint64_t WebCore::GridTrackSizingAlgorithm::computeFlexSizedTracksGrowth(uint64_t result, uint64_t *a2, int *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;

  v4 = *(unsigned int *)(result + 100);
  if (*(_BYTE *)(result + 120))
    v5 = result + 56;
  else
    v5 = result + 40;
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = *a2;
    v8 = 0.0;
    do
    {
      if (v6 >= *(unsigned int *)(result + 100))
      {
        __break(0xC471u);
        JUMPOUT(0x196338324);
      }
      v9 = *(_DWORD *)(*(_QWORD *)(result + 88) + 4 * v6);
      if (*(_DWORD *)(v5 + 12) <= v9)
      {
        __break(0xC471u);
        JUMPOUT(0x19633832CLL);
      }
      if (!*(_BYTE *)(*(_QWORD *)v5 + 136 * v9 + 128))
        goto LABEL_30;
      v10 = *(_QWORD *)v5 + 136 * v9;
      v11 = v8 + a4 * *(double *)(v10 + 80);
      v12 = v11 * 64.0;
      if (v11 * 64.0 >= 2147483650.0)
      {
        v13 = 0x7FFFFFFF;
      }
      else if (v12 <= -2147483650.0)
      {
        v13 = 0x80000000;
      }
      else
      {
        v13 = (int)v12;
      }
      v14 = *(_DWORD *)(v10 + 8) & ~(*(int *)(v10 + 8) >> 31);
      if (v14 <= v13)
        v15 = v13;
      else
        v15 = v14;
      if (v6 >= *((unsigned int *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x196338334);
      }
      v16 = v15 - v14;
      *(_DWORD *)(v7 + 4 * v6) = v16;
      if (v6 >= *((unsigned int *)a2 + 3))
      {
LABEL_30:
        __break(0xC471u);
        JUMPOUT(0x19633830CLL);
      }
      v17 = __OFADD__(*a3, v16);
      v18 = *a3 + v16;
      if (v17)
        v18 = (*a3 >> 31) + 0x7FFFFFFF;
      *a3 = v18;
      v8 = v11 + (double)v13 * -0.015625;
      if (v8 < 0.0)
        v8 = 0.0;
      ++v6;
    }
    while (v4 != v6);
  }
  return result;
}

double WebCore::GridTrackSizingAlgorithm::findFrUnitSize(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  double v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  void *v12;
  double v13;
  WTF *v14;
  WTF *v15;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  WTF *v27;
  uint64_t v28;
  _BYTE v29[36];
  int v30;

  if ((int)a4 < 1)
    return 0.0;
  if (*(_BYTE *)(a1 + 120))
    v4 = a1 + 56;
  else
    v4 = a1 + 40;
  v27 = (WTF *)v29;
  v28 = 8;
  v5 = 0.0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a3;
    v8 = 136 * a2;
    do
    {
      v26 = v6;
      if (v6 >= *(unsigned int *)(v4 + 12) || (v9 = *(_QWORD *)v4 + v8, !*(_BYTE *)(v9 + 128)))
      {
        __break(0xC471u);
        JUMPOUT(0x196338494);
      }
      v10 = *(_QWORD *)v4 + v8;
      if (*(_DWORD *)(v9 + 88) == 1)
      {
        v11 = *(double *)(v10 + 80);
        if (HIDWORD(v28) == (_DWORD)v28)
        {
          v23 = v7;
          v24 = v4;
          v22 = a4;
          v21 = v5;
          v20 = v8;
          WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>((uint64_t)&v27, (unint64_t)&v26);
          v8 = v20;
          a4 = v22;
          v7 = v23;
          v5 = v21;
          v4 = v24;
        }
        else
        {
          *((_DWORD *)v27 + HIDWORD(v28)) = v6;
          ++HIDWORD(v28);
        }
        v5 = v5 + v11;
      }
      else
      {
        v17 = *(_DWORD *)(v10 + 8) & ~(*(int *)(v10 + 8) >> 31);
        v18 = __OFSUB__((_DWORD)a4, v17);
        v19 = a4 - v17;
        if (v18)
          a4 = (a4 >> 31) + 0x7FFFFFFF;
        else
          a4 = v19;
      }
      ++v6;
      v8 += 136;
    }
    while (v7 != v6);
  }
  v30 = a4;
  v25 = 0;
  v13 = WebCore::GridTrackSizingAlgorithm::computeFlexFactorUnitSize((uint64_t *)v4, &v30, (uint64_t)&v27, (uint64_t **)&v25, v5);
  v14 = v25;
  if (v25)
  {
    if (*(_QWORD *)v25)
      WTF::fastFree((WTF *)(*(_QWORD *)v25 - 16), v12);
    WTF::fastFree(v14, v12);
  }
  v15 = v27;
  if (v29 != (_BYTE *)v27 && v27)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    WTF::fastFree(v15, v12);
  }
  return v13;
}

uint64_t WebCore::GridTrackSizingAlgorithmStrategy::logicalHeightForChild(WebCore::GridTrackSizingAlgorithmStrategy *this, WebCore::RenderBox *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v32[15];
  char v33;

  v4 = (*((_BYTE *)a2 + 21) & 0x10) == 0;
  v5 = (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 136) + 21) & 0x10) == 0;
  v6 = v4 == v5;
  v7 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(a2);
  if ((_BYTE)v8 && (v7 & 0xFF00000000) != 0)
  {
    if (((*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1544))(a2) & 1) != 0)
      goto LABEL_11;
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8);
    v10 = v9 + 4;
    v11 = v9 + 12;
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
      v10 = v11;
    v12 = *(unsigned __int8 *)(v10 + 4);
    v13 = (v12 - 7) < 4 || v12 == 0;
    if (v13 || (v12 - 5) < 2 || WebCore::hasRelativeMarginOrPaddingForChild((uint64_t)a2, 1))
    {
LABEL_11:
      v14 = *(_QWORD *)(*((_QWORD *)this + 1) + 136);
      if (((*((_BYTE *)WebCore::RenderObject::containingBlock(a2) + 21) & 0x10) == 0) == ((*(_BYTE *)(v14 + 21) & 0x10) == 0))
      {
        if (v4 != v5)
          goto LABEL_13;
      }
      else if (v4 == v5)
      {
LABEL_13:
        *(_QWORD *)v32 = 0;
        v15 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
        if (!WebCore::gOverridingContainingBlockContentLogicalWidthMap)
        {
          v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v15 = 0;
          v15[1] = 0;
          WebCore::gOverridingContainingBlockContentLogicalWidthMap = (uint64_t)v15;
        }
LABEL_15:
        WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v15, a2, v32);
        v16 = *((_DWORD *)a2 + 5);
        if ((v16 & 8) == 0)
        {
          *((_DWORD *)a2 + 5) = v16 | 8;
          if ((v16 & 0x8000) != 0)
          {
            if ((*((_BYTE *)a2 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1963387A8);
            }
            v17 = *((_QWORD *)a2 + 18);
            if (v17)
            {
              v18 = *(_DWORD *)(v17 + 8) + 1;
              *(_DWORD *)(v17 + 8) = v18;
            }
            else
            {
              v18 = MEMORY[8];
            }
            *(_QWORD *)(v17 + 24) = *(_QWORD *)(v17 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v18)
            {
              __break(0xC471u);
              JUMPOUT(0x1963387D4);
            }
            *(_DWORD *)(v17 + 8) = v18 - 1;
          }
        }
        v19 = *((_QWORD *)this + 1);
        v20 = *(_QWORD *)(v19 + 152);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 8);
          if (v21)
          {
            if (WebCore::RenderGrid::canSetColumnAxisStretchRequirementForItem(*(WebCore::RenderGrid **)(v19 + 136), a2))
            {
              v33 = 1;
              WTF::WeakHashMap<WebCore::RenderBox,WebCore::ItemLayoutRequirement,WTF::SingleThreadWeakPtrImpl>::add<WebCore::ItemLayoutRequirement>(v21 + 16, a2, &v33, (uint64_t)v32);
            }
          }
        }
        goto LABEL_28;
      }
      *(_QWORD *)v32 = 0;
      v15 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
      if (!WebCore::gOverridingContainingBlockContentLogicalHeightMap)
      {
        v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v15 = 0;
        v15[1] = 0;
        WebCore::gOverridingContainingBlockContentLogicalHeightMap = (uint64_t)v15;
      }
      goto LABEL_15;
    }
  }
LABEL_28:
  if ((*((_BYTE *)a2 + 20) & 0xF8) != 0)
  {
    WebCore::RenderBox::clearOverridingContentSize((uint64_t)a2, v8);
    if ((*((_BYTE *)a2 + 20) & 0xF8) != 0)
    {
      v22 = *((_QWORD *)a2 + 4);
      if (v22
        && (v23 = *(_QWORD *)(v22 + 8)) != 0
        && (*(_BYTE *)(*(_QWORD *)(v23 + 104) + 239) & 0x18) != 0
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40)
                                                         + 8)
                                             + 1944)
                                 + 248)
                     + 479))
      {
        WebCore::RenderElement::clearNeedsLayoutForSkippedContent(a2);
      }
      else
      {
        (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 688))(a2);
      }
    }
  }
  v24 = (char *)a2 + 160;
  if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
    v24 = (char *)a2 + 164;
  v25 = *(_DWORD *)v24;
  v26 = WebCore::GridLayoutFunctions::marginLogicalSizeForChild(*(WebCore::RenderBlock **)(*((_QWORD *)this + 1) + 136), v6, a2);
  if (__OFADD__(v25, v26))
    v27 = (v25 >> 31) + 0x7FFFFFFF;
  else
    v27 = v25 + v26;
  v28 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v28 + 120))
    v29 = 2;
  else
    v29 = 1;
  v30 = WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild(v28, (uint64_t)a2, v29);
  if (__OFADD__(v27, v30))
    return (v27 >> 31) + 0x7FFFFFFF;
  else
    return v27 + v30;
}

WTF *WebCore::setOverridingContainingBlockContentSizeForChild(uint64_t a1, WebCore::RenderObject *this, _BOOL4 a3, uint64_t a4)
{
  if (((*((_BYTE *)WebCore::RenderObject::containingBlock(this) + 21) & 0x10) == 0) != ((*(_BYTE *)(a1 + 21) & 0x10) == 0))
    a3 = !a3;
  if (a3)
    return WebCore::RenderBox::setOverridingContainingBlockContentLogicalHeight(this, a4);
  else
    return WebCore::RenderBox::setOverridingContainingBlockContentLogicalWidth(this, a4);
}

WTF *WTF::WeakHashMap<WebCore::RenderBox,WebCore::ItemLayoutRequirement,WTF::SingleThreadWeakPtrImpl>::add<WebCore::ItemLayoutRequirement>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  int v11;
  BOOL v12;
  int v13;
  void *v14;
  WTF *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  if (v8 > v9)
    WTF::WeakHashMap<WebCore::RenderBox,WebCore::ItemLayoutRequirement,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a1);
  v10 = (WTF *)a2[1];
  if (!v10)
  {
    v10 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *((_QWORD *)v10 + 1) = a2;
    v22 = (WTF *)a2[1];
    a2[1] = v10;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WTF::fastFree(v22, a2);
        v10 = (WTF *)a2[1];
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
  }
  v11 = *(_DWORD *)v10;
  *(_DWORD *)v10 += 2;
  v23 = v10;
  v12 = __CFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    WTF::fastFree(v10, a2);
  else
    *(_DWORD *)v10 = v13;
  WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::ItemLayoutRequirement>,WTF::HashTableTraits>::add<WebCore::ItemLayoutRequirement>((uint64_t *)a1, &v23, a3, (uint64_t)&v24);
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v14);
    else
      --*(_DWORD *)result;
  }
  v17 = v24;
  v16 = v25;
  v18 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v19 = *(unsigned int *)(v18 - 4);
    v20 = v18 + 16 * v19;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if (v24 != v20)
  {
    while (!*(_QWORD *)(*(_QWORD *)v17 + 8))
    {
      while (1)
      {
        v17 += 16;
        if (v17 == v25)
          break;
        if ((unint64_t)(*(_QWORD *)v17 + 1) > 1)
          goto LABEL_16;
      }
      v17 = v25;
LABEL_16:
      if (v17 == v20)
      {
        v17 = v20;
        break;
      }
    }
  }
  v21 = v26;
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v17;
  *(_QWORD *)(a4 + 16) = v16;
  *(_QWORD *)(a4 + 24) = v20;
  *(_QWORD *)(a4 + 32) = v18 + 16 * v19;
  *(_DWORD *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = v21;
  return result;
}

uint64_t WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  WebCore::RenderElement *v10;
  int v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int j;
  uint64_t v18;
  int v19;
  unsigned int v20;
  WebCore::RenderElement *v21;
  char v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  v3 = a3 != 1;
  if (a3 == 1)
  {
    if (!*(_DWORD *)(a1 + 52))
      return 0;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 68))
      return 0;
    if (a3 == 2)
    {
      v6 = *(_QWORD *)(a1 + 200);
      if (!v6)
        return 0;
      v25 = a1;
      v7 = a3;
      v8 = *(_QWORD *)(a1 + 200);
      v9 = *(_DWORD *)(v6 - 8);
      v10 = (WebCore::RenderElement *)a2;
      v11 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
      for (i = 0; ; v11 = i + v13)
      {
        v13 = v11 & v9;
        v14 = *(_QWORD *)(v8 + 16 * v13);
        if (v14 != -1)
        {
          if (!v14)
            return 0;
          if (*(WebCore::RenderElement **)(v14 + 8) == v10)
            break;
        }
        ++i;
      }
      goto LABEL_17;
    }
  }
  v4 = *(_QWORD *)(a1 + 208);
  if (!v4)
    return 0;
  v25 = a1;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 208);
  v15 = *(_DWORD *)(v4 - 8);
  v10 = (WebCore::RenderElement *)a2;
  v16 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
  for (j = 0; ; v16 = j + v13)
  {
    v13 = v16 & v15;
    v18 = *(_QWORD *)(v8 + 16 * v13);
    if (v18 != -1)
    {
      if (!v18)
        return 0;
      if (*(WebCore::RenderElement **)(v18 + 8) == v10)
        break;
    }
    ++j;
  }
LABEL_17:
  if (!*(_BYTE *)(v8 + 16 * v13 + 8))
    return 0;
  v19 = v7;
  v20 = v3;
  v21 = v10;
  v22 = WebCore::RenderGrid::selfAlignmentForChild(*(_QWORD *)(v25 + 136), v19, v10, 0);
  v23 = WebCore::RenderGrid::gridSpanForChild(*(_QWORD *)(v25 + 136), (uint64_t)v21, v20);
  if ((v22 & 0xF) == 4)
    v24 = v23;
  else
    v24 = HIDWORD(v23) - 1;
  return WebCore::GridBaselineAlignment::baselineOffsetForChild((_BYTE *)(v25 + 176), v22 & 0xF, v24, v21, v19);
}

uint64_t WebCore::GridTrackSizingAlgorithmStrategy::minContentForChild(WebCore::GridTrackSizingAlgorithmStrategy *this, WebCore::RenderBox *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _BOOL8 v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v4 = *((_QWORD *)this + 1);
  v5 = (*((_BYTE *)a2 + 21) & 0x10) == 0;
  v6 = (*(_BYTE *)(*(_QWORD *)(v4 + 136) + 21) & 0x10) == 0;
  v7 = v5 != v6;
  if (*(_BYTE *)(v4 + 120) != v7)
  {
    if (!WebCore::GridTrackSizingAlgorithmStrategy::updateOverridingContainingBlockContentSizeForChild((uint64_t *)this, (uint64_t)a2, v7, 0))return WebCore::GridTrackSizingAlgorithmStrategy::logicalHeightForChild(this, a2);
    v16 = *((_DWORD *)a2 + 5);
    if ((v16 & 8) == 0)
    {
      *((_DWORD *)a2 + 5) = v16 | 8;
      if ((v16 & 0x8000) != 0)
      {
        if ((*((_BYTE *)a2 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196338E20);
        }
        v24 = *((_QWORD *)a2 + 18);
        if (v24)
        {
          v25 = *(_DWORD *)(v24 + 8) + 1;
          *(_DWORD *)(v24 + 8) = v25;
        }
        else
        {
          v25 = MEMORY[8];
        }
        *(_QWORD *)(v24 + 24) = *(_QWORD *)(v24 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v25)
        {
          __break(0xC471u);
          JUMPOUT(0x196338E4CLL);
        }
        *(_DWORD *)(v24 + 8) = v25 - 1;
      }
    }
    v17 = *(_QWORD *)a2;
    if (((v5 ^ v6) & 1) != 0)
    {
      if (((*(uint64_t (**)(WebCore::RenderBox *))(v17 + 1544))(a2) & 1) == 0)
      {
        v26 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8);
        v19 = ((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4;
        v20 = v26 + 4;
        v21 = v26 + 12;
LABEL_20:
        if (v19)
          v20 = v21;
        v22 = *(unsigned __int8 *)(v20 + 4);
        v23 = (v22 - 7) < 4 || v22 == 0;
        if (!v23 && (v22 - 5) >= 2 && !WebCore::hasRelativeMarginOrPaddingForChild((uint64_t)a2, v7))
          return WebCore::GridTrackSizingAlgorithmStrategy::logicalHeightForChild(this, a2);
      }
    }
    else if (((*(uint64_t (**)(WebCore::RenderBox *))(v17 + 1552))(a2) & 1) == 0)
    {
      v18 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8);
      v19 = ((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4;
      v20 = v18 + 12;
      v21 = v18 + 4;
      goto LABEL_20;
    }
    WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)a2, 1, 1);
    return WebCore::GridTrackSizingAlgorithmStrategy::logicalHeightForChild(this, a2);
  }
  if (((*(uint64_t (**)(WebCore::GridTrackSizingAlgorithmStrategy *))(*(_QWORD *)this + 64))(this) & 1) != 0)
    return 0;
  if ((*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1520))(a2))
    WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)a2, 1, 1);
  v8 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 408))(a2);
  v9 = WebCore::GridLayoutFunctions::marginLogicalSizeForChild(*(WebCore::RenderBlock **)(*((_QWORD *)this + 1) + 136), v7, a2);
  if (__OFADD__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v10 = v8 + v9;
  v11 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v11 + 120))
    v12 = 2;
  else
    v12 = 1;
  v13 = WebCore::GridTrackSizingAlgorithm::baselineOffsetForChild(v11, (uint64_t)a2, v12);
  v14 = __OFADD__(v10, v13);
  result = v10 + v13;
  if (v14)
    return (v10 >> 31) + 0x7FFFFFFF;
  return result;
}

uint64_t WebCore::GridTrackSizingAlgorithmStrategy::updateOverridingContainingBlockContentSizeForChild(uint64_t *a1, uint64_t a2, _BOOL8 a3, uint64_t a4)
{
  _BOOL8 v5;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t updated;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;

  v5 = a3;
  v8 = a4;
  v9 = BYTE4(a4);
  if (!BYTE4(a4))
  {
    v10 = WebCore::GridTrackSizingAlgorithm::gridAreaBreadthForChild(a1[1], (_BYTE *)a2, a3);
    v8 = v10;
    v9 = BYTE4(v10);
  }
  v11 = *(_QWORD *)(a2 + 32);
  if (v11)
  {
    v12 = *(_QWORD *)(a1[1] + 136);
    v13 = *(_QWORD *)(v11 + 8);
    if (v12 != v13)
    {
      v30 = v9;
      if (*(_BYTE *)(v13 + 46) == 12)
      {
        if (((*(_BYTE *)(v13 + 21) & 0x10) == 0) == ((*(_BYTE *)(v12 + 21) & 0x10) == 0))
          v23 = v5;
        else
          v23 = !v5;
        while (1)
        {
          v24 = *(_QWORD *)(v13 + 32);
          if (v24)
            v24 = *(_QWORD *)(v24 + 8);
          if (v24 == v12 || (WebCore::RenderGrid::isSubgridOf((WebCore::RenderElement *)v13, v23, v12) & 1) != 0)
            break;
          v13 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8);
          if (*(_BYTE *)(v13 + 46) != 12)
          {
            __break(0xC471u);
            goto LABEL_47;
          }
          v12 = *(_QWORD *)(a1[1] + 136);
          v23 = v5;
          if (((*(_BYTE *)(v13 + 21) & 0x10) == 0) != ((*(_BYTE *)(v12 + 21) & 0x10) == 0))
            v23 = !v5;
        }
        v25 = *(_QWORD *)(a2 + 32);
        if (v25)
          v25 = *(_QWORD *)(v25 + 8);
        if (v13 != v25 || !WebCore::RenderGrid::isSubgrid((WebCore::RenderElement *)v13, v23))
        {
          updated = WebCore::GridTrackSizingAlgorithmStrategy::updateOverridingContainingBlockContentSizeForChild(a1, v13, v5, 0);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 88))(a1, v13, updated);
          return updated;
        }
        v26 = WebCore::GridLayoutFunctions::extraMarginForSubgridAncestors(v23, a2);
        v27 = v26 + HIDWORD(v26);
        if (__OFADD__((_DWORD)v26, HIDWORD(v26)))
          v27 = (v26 >> 31) + 0x7FFFFFFF;
        if ((_DWORD)v30)
        {
          v28 = __OFSUB__(v8, v27);
          v29 = v8 - v27;
          if (v28)
            v8 = (v8 >> 31) + 0x7FFFFFFF;
          else
            v8 = v29;
          v9 = v30;
          goto LABEL_5;
        }
LABEL_47:
        __break(1u);
      }
      __break(0xC471u);
      JUMPOUT(0x196339184);
    }
  }
LABEL_5:
  if (v5)
    v14 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight((WebCore::RenderBox *)a2);
  else
    v14 = WebCore::RenderBox::overridingContainingBlockContentLogicalWidth((WebCore::RenderBox *)a2);
  if (!v15)
    goto LABEL_11;
  v16 = v14 & 0xFF00000000;
  if (!(_DWORD)v9 || !v16)
  {
    if (((_DWORD)v9 != 0) != (v16 != 0))
      goto LABEL_11;
    return 0;
  }
  if (v8 == (_DWORD)v14)
    return 0;
LABEL_11:
  v17 = a4 & 0xFFFFFF0000000000;
  v18 = *(_QWORD *)(a1[1] + 136);
  if (((*((_BYTE *)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a2) + 21) & 0x10) == 0) != ((*(_BYTE *)(v18 + 21) & 0x10) == 0))
    LODWORD(v5) = !v5;
  v19 = v8 | (unint64_t)(v9 << 32);
  if (v5)
  {
    v31 = v19 | v17;
    v20 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
    if (!WebCore::gOverridingContainingBlockContentLogicalHeightMap)
    {
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = 0;
      v20[1] = 0;
      WebCore::gOverridingContainingBlockContentLogicalHeightMap = (uint64_t)v20;
    }
  }
  else
  {
    v31 = v19 | v17;
    v20 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
    if (!WebCore::gOverridingContainingBlockContentLogicalWidthMap)
    {
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = 0;
      v20[1] = 0;
      WebCore::gOverridingContainingBlockContentLogicalWidthMap = (uint64_t)v20;
    }
  }
  WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v20, (_QWORD *)a2, (int *)&v31);
  return 1;
}

uint64_t WebCore::GridTrackSizingAlgorithm::clearBaselineItemsCache(uint64_t this, void *a2)
{
  WTF **v2;
  WTF **v3;
  uint64_t v4;

  v2 = *(WTF ***)(this + 200);
  if (v2)
  {
    *(_QWORD *)(this + 200) = 0;
    v4 = this;
    WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v2, a2);
    this = v4;
  }
  v3 = *(WTF ***)(this + 208);
  if (v3)
  {
    *(_QWORD *)(this + 208) = 0;
    return WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v3, a2);
  }
  return this;
}

uint64_t WebCore::GridTrackSizingAlgorithm::cacheBaselineAlignedItem(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v7;
  int v8;
  uint64_t *v9;
  WTF *v10;
  void *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  int v41;
  WTF *v42;
  void *v43;
  void *v44;
  WTF *v45;
  _BYTE v46[31];
  char v47;
  WTF *v48;

  if (a3 == 2)
    v7 = 1;
  else
    v7 = 2;
  if (((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) + 21) & 0x10) == 0) != ((*(_BYTE *)(*(_QWORD *)(a1 + 136)
                                                                                                + 21) & 0x10) == 0))
    v8 = v7;
  else
    v8 = a3;
  if (v8 == 2)
    v9 = (uint64_t *)(a1 + 200);
  else
    v9 = (uint64_t *)(a1 + 208);
  v10 = *(WTF **)(a2 + 8);
  if (!v10)
  {
    v10 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *((_QWORD *)v10 + 1) = a2;
    v20 = *(WTF **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v10;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        WTF::fastFree(v20, v19);
        v10 = *(WTF **)(a2 + 8);
      }
      else
      {
        --*(_DWORD *)v20;
      }
    }
  }
  ++*(_DWORD *)v10;
  v48 = v10;
  v47 = 1;
  WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>((WTF *)v46, v9, (uint64_t *)&v48, &v47);
  result = (uint64_t)v48;
  if (v48)
  {
    if (*(_DWORD *)v48 == 1)
      result = WTF::fastFree(v48, v11);
    else
      --*(_DWORD *)v48;
  }
  v13 = *(_QWORD *)(a2 + 32);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      if (*(_BYTE *)(v14 + 46) == 12)
      {
        v15 = (*(_DWORD *)(v14 + 20) & 0x1000) == 0;
        v16 = (*(_DWORD *)(*(_QWORD *)(a1 + 136) + 20) & 0x1000) == 0;
        result = WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v14);
        if ((result & 1) == 0)
        {
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 40) + 80);
          if (v15 != v16)
          {
            if (!*(_BYTE *)(v18 + 259))
              return result;
          }
          else if (!*(_BYTE *)(v18 + 258))
          {
            return result;
          }
          v21 = *(_QWORD *)(v14 + 32);
          if (v21)
          {
            result = *(_QWORD *)(v21 + 8);
            if (result)
            {
              if (*(_BYTE *)(result + 46) == 12)
              {
                if (v15 != v16)
                {
                  do
                  {
                    v22 = result;
                    v23 = *(_QWORD *)(result + 32);
                    if (!v23)
                      break;
                    result = *(_QWORD *)(v23 + 8);
                    if (!result)
                      break;
                  }
                  while (*(_BYTE *)(result + 46) == 12
                       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 88) + 40) + 80) + 259));
                  v24 = v22;
                  do
                  {
                    v25 = v24;
                    v26 = *(_QWORD *)(v24 + 32);
                    if (!v26)
                      break;
                    v24 = *(_QWORD *)(v26 + 8);
                    if (!v24)
                      break;
                  }
                  while (*(_BYTE *)(v24 + 46) == 12
                       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 88) + 40) + 80) + 258));
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 88) + 40) + 80) + 260))
                  {
                    result = 0;
                    if (!a4)
                      return result;
                  }
                  else
                  {
                    result = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 88) + 40) + 80) + 261) != 0;
                    if (!a4)
                      return result;
                  }
                }
                else
                {
                  result = WebCore::RenderGrid::areMasonryRows((WebCore::RenderGrid *)result);
                  if (!a4)
                    return result;
                }
                if ((result & 1) != 0)
                  return result;
                v27 = (uint64_t *)(a1 + 216);
                v28 = *(_DWORD *)(a1 + 228);
                v29 = *(_DWORD *)(a1 + 224) + 1;
                *(_DWORD *)(a1 + 224) = v29;
                if (v29 <= v28)
                  goto LABEL_74;
                v30 = *v27;
                if (!*v27)
                  goto LABEL_47;
                v32 = *(_DWORD *)(v30 - 4);
                if (!v32)
                  goto LABEL_69;
                v33 = 0;
                v34 = v32 - 1;
                do
                {
                  v35 = v34;
                  v36 = *(WTF **)(v30 + 8 * v34);
                  if ((unint64_t)v36 + 1 >= 2 && !*((_QWORD *)v36 + 1))
                  {
                    *(_QWORD *)(v30 + 8 * v34) = 0;
                    if (*(_DWORD *)v36 == 1)
                      WTF::fastFree(v36, v17);
                    else
                      --*(_DWORD *)v36;
                    *(_QWORD *)(v30 + 8 * v34) = -1;
                    ++v33;
                  }
                  --v34;
                }
                while (v35);
                v30 = *v27;
                if (v33)
                {
                  *(_DWORD *)(v30 - 16) += v33;
                  v37 = *v27;
                  if (*v27)
                    v38 = *(_DWORD *)(v37 - 12);
                  else
                    v38 = 0;
                  *(_DWORD *)(v37 - 12) = v38 - v33;
                  v30 = *v27;
                }
                if (!v30)
                {
LABEL_47:
                  v31 = 0;
                  *(_DWORD *)(a1 + 224) = 0;
                  goto LABEL_72;
                }
                v39 = *(_DWORD *)(v30 - 4);
                if (v39 < 9 || 6 * *(_DWORD *)(v30 - 12) >= v39)
                {
LABEL_69:
                  *(_DWORD *)(a1 + 224) = 0;
                }
                else
                {
                  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a1 + 216));
                  v30 = *(_QWORD *)(a1 + 216);
                  *(_DWORD *)(a1 + 224) = 0;
                  if (!v30)
                  {
                    v31 = 0;
                    goto LABEL_72;
                  }
                }
                v31 = *(_DWORD *)(v30 - 12);
                v41 = 0x7FFFFFFF;
                if (v31 >= 0x7FFFFFFF)
                {
LABEL_73:
                  *(_DWORD *)(a1 + 228) = 2 * v41;
LABEL_74:
                  v42 = *(WTF **)(v14 + 8);
                  if (!v42)
                  {
                    v42 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v42 = 1;
                    *((_QWORD *)v42 + 1) = v14;
                    v45 = *(WTF **)(v14 + 8);
                    *(_QWORD *)(v14 + 8) = v42;
                    if (v45)
                    {
                      if (*(_DWORD *)v45 == 1)
                      {
                        WTF::fastFree(v45, v44);
                        v42 = *(WTF **)(v14 + 8);
                      }
                      else
                      {
                        --*(_DWORD *)v45;
                      }
                    }
                  }
                  *(_DWORD *)v42 += 2;
                  v48 = v42;
                  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add(v27, &v48, (uint64_t)v46);
                  result = (uint64_t)v48;
                  v48 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 1)
                      result = WTF::fastFree((WTF *)result, v43);
                    else
                      --*(_DWORD *)result;
                  }
                  if (*(_DWORD *)v42 == 1)
                    return WTF::fastFree(v42, v43);
                  --*(_DWORD *)v42;
                  return result;
                }
LABEL_72:
                v41 = v31;
                goto LABEL_73;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF *WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(WTF *result, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  WTF *v7;
  uint64_t v8;
  char v9;
  int v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (WTF *)WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = *(_QWORD *)(*a3 + 8);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (WTF *)(v8 + 16 * v19);
    v21 = *(WTF **)v20;
    if (*(_QWORD *)v20 != -1)
      break;
    v11 = (WTF *)(v8 + 16 * v19);
LABEL_10:
    v17 = i + v19;
  }
  if (!v21)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v20 = v11;
    }
    *a3 = 0;
    result = *(WTF **)v20;
    *(_QWORD *)v20 = v12;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF *)WTF::fastFree(result, a2);
      else
        --*(_DWORD *)result;
    }
    *((_BYTE *)v20 + 8) = *a4;
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_21;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_29:
        result = (WTF *)WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, v28, (WTF **)v20);
        v20 = result;
        v24 = *a2;
        if (*a2)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_31;
      }
LABEL_21:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_29;
    }
LABEL_31:
    v31 = v24 + 16 * v27;
    v30 = 1;
    goto LABEL_32;
  }
  if (*((_QWORD *)v21 + 1) != v13)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v29 = 0;
  else
    v29 = *(unsigned int *)(v8 - 4);
  v30 = 0;
  v31 = v8 + 16 * v29;
LABEL_32:
  *(_QWORD *)v7 = v20;
  *((_QWORD *)v7 + 1) = v31;
  *((_BYTE *)v7 + 16) = v30;
  return result;
}

uint64_t *WebCore::GridTrackSizingAlgorithm::copyBaselineItemsCache(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF **v12;
  WTF *v13;
  uint64_t v14;
  WTF **v15;
  WTF **v16;
  uint64_t v17;

  if (a3 == 2)
  {
    result = WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::HashTable(&v17, (uint64_t **)(a2 + 200));
    v6 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v17;
    v17 = v6;
    if (v6)
    {
      v14 = v6;
      v7 = *(unsigned int *)(v6 - 4);
      if ((_DWORD)v7)
      {
        v8 = (WTF **)v6;
        do
        {
          v9 = *v8;
          if (*v8 != (WTF *)-1)
          {
            *v8 = 0;
            if (v9)
            {
              v15 = v8;
              if (*(_DWORD *)v9 == 1)
                WTF::fastFree(v9, v5);
              else
                --*(_DWORD *)v9;
              v8 = v15;
            }
          }
          v8 += 2;
          --v7;
        }
        while (v7);
      }
      return (uint64_t *)WTF::fastFree((WTF *)(v14 - 16), v5);
    }
  }
  else
  {
    result = WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::HashTable(&v17, (uint64_t **)(a2 + 208));
    v10 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v17;
    v17 = v10;
    if (v10)
    {
      v14 = v10;
      v11 = *(unsigned int *)(v10 - 4);
      if ((_DWORD)v11)
      {
        v12 = (WTF **)v10;
        do
        {
          v13 = *v12;
          if (*v12 != (WTF *)-1)
          {
            *v12 = 0;
            if (v13)
            {
              v16 = v12;
              if (*(_DWORD *)v13 == 1)
                WTF::fastFree(v13, v5);
              else
                --*(_DWORD *)v13;
              v12 = v16;
            }
          }
          v12 += 2;
          --v11;
        }
        while (v11);
      }
      return (uint64_t *)WTF::fastFree((WTF *)(v14 - 16), v5);
    }
  }
  return result;
}

uint64_t WebCore::GridTrackSizingAlgorithmStrategy::minLogicalSizeForChild(uint64_t *a1, WebCore::RenderBox *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BOOL8 v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t updated;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned __int8 v21;
  char v22;
  char v23;

  v8 = a1[1];
  v9 = ((*((_BYTE *)a2 + 21) & 0x10) == 0) != ((*(_BYTE *)(*(_QWORD *)(v8 + 136) + 21) & 0x10) == 0);
  if (*(_BYTE *)(v8 + 120) == v9)
  {
    if (((*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v20 = 0;
      v23 = 0;
      v21 = *(_BYTE *)(a3 + 4);
      v22 = *(_BYTE *)(a3 + 5);
      if (v21 - 2 >= 9)
      {
        if (v21 == 11)
        {
          v20 = *(_DWORD *)a3;
          WebCore::Length::ref((int *)&v20);
        }
      }
      else
      {
        v23 = *(_BYTE *)(a3 + 6);
        v20 = *(_DWORD *)a3;
      }
      if ((a4 & 0xFF00000000) != 0)
        v10 = a4;
      else
        v10 = 0;
      v11 = WebCore::RenderBox::computeLogicalWidthInFragmentUsing((uint64_t)a2, 1, (WebCore::Length *)&v20, v10, *(unsigned int **)(a1[1] + 136), 0);
      v12 = WebCore::GridLayoutFunctions::marginLogicalSizeForChild(*(WebCore::RenderBlock **)(a1[1] + 136), v9, a2);
      if (__OFADD__(v11, v12))
        v13 = (v11 >> 31) + 0x7FFFFFFF;
      else
        v13 = v11 + v12;
      if (v21 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v20);
      }
    }
  }
  else
  {
    updated = WebCore::GridTrackSizingAlgorithmStrategy::updateOverridingContainingBlockContentSizeForChild(a1, (uint64_t)a2, v9, a4);
    (*(void (**)(uint64_t *, WebCore::RenderBox *, uint64_t))(*a1 + 88))(a1, a2, updated);
    v16 = ((*((_BYTE *)a2 + 21) & 0x10) == 0) == ((*(_BYTE *)(*(_QWORD *)(a1[1] + 136) + 21) & 0x10) == 0);
    v17 = WebCore::RenderBox::computeLogicalHeightUsing(a2, 1, (unsigned __int8 *)a3, 0);
    if ((v17 & 0xFF00000000) != 0)
      v18 = v17;
    else
      v18 = 0;
    v19 = WebCore::GridLayoutFunctions::marginLogicalSizeForChild(*(WebCore::RenderBlock **)(a1[1] + 136), v16, a2);
    v13 = v18 + v19;
    if (__OFADD__(v18, v19))
      return (v18 >> 31) + 0x7FFFFFFF;
  }
  return v13;
}

uint64_t WebCore::IndefiniteSizeStrategy::layoutGridItemForMinSizeComputation(uint64_t this, WebCore::RenderBox *a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    if (*(_BYTE *)(*(_QWORD *)(this + 8) + 120))
    {
      v3 = *((_DWORD *)a2 + 5);
      if ((v3 & 8) == 0)
      {
        *((_DWORD *)a2 + 5) = v3 | 8;
        if ((v3 & 0x8000) != 0)
        {
          if ((*((_BYTE *)a2 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196339C48);
          }
          v4 = *((_QWORD *)a2 + 18);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 8) + 1;
            *(_DWORD *)(v4 + 8) = v5;
          }
          else
          {
            v5 = MEMORY[8];
          }
          *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (!v5)
          {
            __break(0xC471u);
            JUMPOUT(0x196339C74);
          }
          *(_DWORD *)(v4 + 8) = v5 - 1;
        }
      }
    }
  }
  if ((*((_BYTE *)a2 + 20) & 0xF8) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    if (v6
      && (v7 = *(_QWORD *)(v6 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + 239) & 0x18) != 0
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8)
                                           + 1944)
                               + 248)
                   + 479))
    {
      return WebCore::RenderElement::clearNeedsLayoutForSkippedContent(a2);
    }
    else
    {
      return (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 688))(a2);
    }
  }
  return this;
}

void WebCore::IndefiniteSizeStrategy::maximizeTracks(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;

  v2 = a2[3];
  if ((_DWORD)v2)
  {
    v3 = 136 * v2;
    v4 = (int *)(*(_QWORD *)a2 + 12);
    do
    {
      v5 = *v4;
      *(v4 - 1) = *v4;
      if (v5 != -64 && v5 < 0)
        *v4 = 0;
      v4 += 34;
      v3 -= 136;
    }
    while (v3);
  }
}

uint64_t WebCore::IndefiniteSizeStrategy::accumulateFlexFraction(uint64_t *a1, double *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  WebCore::RenderElement *v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  double FrUnitSize;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  result = WebCore::GridIterator::nextGridItem((WebCore::GridIterator *)a3);
  if (result)
  {
    v12 = result;
    while (1)
    {
      if (*(_BYTE *)(v12 + 46) != 12)
        goto LABEL_7;
      ++*(_DWORD *)(v12 + 16);
      if (!WebCore::RenderGrid::isSubgridInParentDirection((WebCore::RenderElement *)v12, a3[8]))
        break;
      v24 = *(_QWORD *)(v12 + 32);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 8);
        if (v25 && *(_BYTE *)(v25 + 46) != 12)
        {
LABEL_25:
          __break(0xC471u);
          JUMPOUT(0x196339EC0);
        }
      }
      else
      {
        v25 = 0;
      }
      v26 = WebCore::RenderGrid::gridSpanForChild(v25, v12, a3[8]);
      v5 = v5 & 0xFFFFFFFF00000000 | v27;
      WebCore::GridIterator::createForSubgrid(v12, (uint64_t)a3, v26, (uint64_t)v29);
      WebCore::IndefiniteSizeStrategy::accumulateFlexFraction(a1, a2, v29, a4, a5);
      v28 = *(_DWORD *)(v12 + 16);
      if (!v28)
        goto LABEL_25;
      *(_DWORD *)(v12 + 16) = v28 - 1;
LABEL_16:
      result = WebCore::GridIterator::nextGridItem((WebCore::GridIterator *)a3);
      v12 = result;
      if (!result)
        return result;
    }
    v13 = *(_DWORD *)(v12 + 16);
    if (!v13)
      goto LABEL_25;
    *(_DWORD *)(v12 + 16) = v13 - 1;
LABEL_7:
    WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>(a5, (_QWORD *)v12, (uint64_t)v29);
    if (v29[16])
    {
      v14 = WebCore::RenderGrid::gridSpanForChild(*(_QWORD *)(a1[1] + 136), v12, a4);
      v15 = WebCore::GridTrackSizingAlgorithmStrategy::maxContentForChild((WebCore::GridTrackSizingAlgorithmStrategy *)a1, (WebCore::RenderBox *)v12);
      v16 = a1[1];
      v17 = *(WebCore::RenderElement **)(v16 + 136);
      v18 = *(unsigned __int8 *)(v16 + 120);
      v19 = (uint64_t *)(v16 + 4);
      v20 = (uint64_t *)(v16 + 12);
      if (v18)
        v20 = v19;
      v21 = WebCore::RenderGrid::guttersSize(v17, a4, v14, HIDWORD(v14) - (int)v14, *v20);
      if (__OFSUB__(v15, v21))
        v22 = (v15 >> 31) + 0x7FFFFFFF;
      else
        v22 = v15 - v21;
      FrUnitSize = WebCore::GridTrackSizingAlgorithm::findFrUnitSize(a1[1], v14, HIDWORD(v14), v22);
      if (*a2 >= FrUnitSize)
        FrUnitSize = *a2;
      *a2 = FrUnitSize;
    }
    goto LABEL_16;
  }
  return result;
}

double WebCore::IndefiniteSizeStrategy::findUsedFlexFraction(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  double v21;
  unsigned int v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::RenderElement *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  WTF **v34;
  uint64_t v35;
  WTF **v36;
  WTF *v37;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  WTF **v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  unsigned int v48;
  int v49;

  v6 = a1[1];
  v7 = v6 + 56;
  v8 = v6 + 40;
  if ((_DWORD)a3)
    v9 = (uint64_t *)v7;
  else
    v9 = (uint64_t *)v8;
  v10 = *((unsigned int *)v9 + 3);
  v47 = 0;
  v48 = 0;
  v49 = v10;
  if ((_DWORD)v10)
  {
    if (v10 >= 0x1E1E1E2)
      goto LABEL_50;
    v11 = WTF::fastMalloc((WTF *)(136 * v10));
    v48 = 136 * (int)v10 / 0x88u;
    v47 = v11;
    v12 = *((unsigned int *)v9 + 3);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = *v9;
      v15 = 136 * v12;
      do
      {
        v16 = v11 + v13;
        *(_QWORD *)v16 = 0;
        v17 = *(_OWORD *)(v14 + v13 + 8);
        *(_OWORD *)(v16 + 17) = *(_OWORD *)(v14 + v13 + 17);
        *(_OWORD *)(v16 + 8) = v17;
        *(_BYTE *)(v11 + v13 + 40) = 0;
        *(_BYTE *)(v16 + 128) = 0;
        if (*(_BYTE *)(v14 + v13 + 128))
        {
          WebCore::GridTrackSize::GridTrackSize(v11 + v13 + 40, v14 + v13 + 40);
          *(_BYTE *)(v16 + 128) = 1;
        }
        v13 += 136;
      }
      while (v15 != v13);
    }
  }
  else
  {
    v11 = 0;
  }
  v18 = a2[3];
  if ((_DWORD)v18)
  {
    v19 = *(unsigned int **)a2;
    v20 = 4 * v18;
    v21 = 0.0;
    while (1)
    {
      v22 = *v19;
      if (v10 <= *v19)
      {
        __break(0xC471u);
        JUMPOUT(0x19633A214);
      }
      if (!*(_BYTE *)(v11 + 136 * v22 + 128))
        break;
      v23 = (double)(*(_DWORD *)(v11 + 136 * v22 + 8) & ~(*(int *)(v11 + 136 * v22 + 8) >> 31))
          * 0.015625
          / fmax(*(double *)(v11 + 136 * v22 + 80), 1.0);
      if (v21 < v23)
        v21 = v23;
      ++v19;
      v20 -= 4;
      if (!v20)
        goto LABEL_18;
    }
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x19633A1D0);
  }
  v21 = 0.0;
LABEL_18:
  v46 = v21;
  v24 = a1[1];
  v25 = *(_QWORD *)(v24 + 128);
  v26 = *(_QWORD *)(v25 + 104);
  if (v26 && *(_DWORD *)(v26 - 12))
  {
    v27 = *(WebCore::RenderElement **)(v24 + 136);
    if ((_DWORD)a3)
    {
      if (!WebCore::RenderElement::shouldApplySizeContainment(v27))
      {
        v44 = 0;
        v45 = 0;
        v28 = a2[3];
        if (!(_DWORD)v28)
          goto LABEL_40;
        v29 = *(unsigned int **)a2;
        v30 = &v29[v28];
        do
        {
LABEL_24:
          v31 = *v29++;
          v40 = v25;
          v41 = a3;
          v42 = v31;
          v43 = 0;
          WebCore::IndefiniteSizeStrategy::accumulateFlexFraction(a1, &v46, (unsigned __int8 *)&v40, a3, (uint64_t)&v44);
        }
        while (v29 != v30);
        goto LABEL_30;
      }
    }
    else if ((WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(v27) & 1) == 0)
    {
      v44 = 0;
      v45 = 0;
      v32 = a2[3];
      if (!(_DWORD)v32)
        goto LABEL_40;
      v29 = *(unsigned int **)a2;
      v30 = &v29[v32];
      goto LABEL_29;
    }
    if ((WebCore::RenderGrid::explicitIntrinsicInnerLogicalSize(*(WebCore::RenderElement **)(a1[1] + 136), a3) & 0xFF00000000) == 0)
      goto LABEL_40;
    v44 = 0;
    v45 = 0;
    v39 = a2[3];
    if (!(_DWORD)v39)
      goto LABEL_40;
    v29 = *(unsigned int **)a2;
    v30 = &v29[v39];
    if ((_DWORD)a3)
      goto LABEL_24;
    do
    {
LABEL_29:
      v33 = *v29++;
      v40 = v25;
      v41 = 0;
      v42 = 0;
      v43 = v33;
      WebCore::IndefiniteSizeStrategy::accumulateFlexFraction(a1, &v46, (unsigned __int8 *)&v40, 0, (uint64_t)&v44);
    }
    while (v29 != v30);
LABEL_30:
    v21 = v46;
    v34 = v44;
    if (v44)
    {
      v35 = *((unsigned int *)v44 - 1);
      if ((_DWORD)v35)
      {
        v36 = v44;
        do
        {
          v37 = *v36;
          if (*v36 != (WTF *)-1)
          {
            *v36 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 1)
                WTF::fastFree(v37, a2);
              else
                --*(_DWORD *)v37;
            }
          }
          ++v36;
          --v35;
        }
        while (v35);
      }
      WTF::fastFree((WTF *)(v34 - 2), a2);
    }
  }
LABEL_40:
  WTF::Vector<WebCore::GridTrack,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, a2);
  return v21;
}

uint64_t WebCore::IndefiniteSizeStrategy::recomputeUsedFlexFractionIfNeeded(WebCore::IndefiniteSizeStrategy *this, double *a2, WebCore::LayoutUnit *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t *v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t *v51;
  uint64_t *v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  signed int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;

  v3 = *((_QWORD *)this + 1);
  if (!*(_BYTE *)(v3 + 120))
    return 0;
  v9 = *(_QWORD *)(v3 + 136);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 8);
  v11 = v10 + 20;
  v12 = v10 + 36;
  if (((*(_DWORD *)(v9 + 124) >> 13) & 6u) - 2 >= 4)
    v13 = v12;
  else
    v13 = v11;
  v14 = WebCore::RenderBox::computeContentAndScrollbarLogicalHeightUsing((WebCore::RenderBox *)v9, 1, v13, 0);
  if ((v14 & 0xFF00000000) != 0)
  {
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 1272))(v9, v14);
    v16 = 1360;
    if (((*(_DWORD *)(v9 + 124) >> 13) & 6u) - 2 < 4)
      v16 = 1352;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + v16))(v9);
    v18 = v17 << 6;
    if (v17 < -33554432)
      v18 = 0x80000000;
    if (v17 > 0x1FFFFFF)
      v18 = 0x7FFFFFFF;
    v19 = __OFSUB__(v15, v18);
    v20 = v15 - v18;
    if (v19)
      v20 = (v15 >> 31) + 0x7FFFFFFF;
    v21 = v20 & ~(v20 >> 31) | 0x100000000;
  }
  else
  {
    v21 = 0;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 8);
  v23 = v22 + 28;
  v24 = v22 + 44;
  if (((*(_DWORD *)(v9 + 124) >> 13) & 6u) - 2 >= 4)
    v25 = v24;
  else
    v25 = v23;
  v26 = WebCore::RenderBox::computeContentAndScrollbarLogicalHeightUsing((WebCore::RenderBox *)v9, 2, v25, 0);
  if ((v26 & 0xFF00000000) != 0)
  {
    v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 1272))(v9, v26);
    v28 = 1360;
    if (((*(_DWORD *)(v9 + 124) >> 13) & 6u) - 2 < 4)
      v28 = 1352;
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + v28))(v9);
    v30 = v29 << 6;
    if (v29 < -33554432)
      v30 = 0x80000000;
    if (v29 > 0x1FFFFFF)
      v30 = 0x7FFFFFFF;
    v19 = __OFSUB__(v27, v30);
    v31 = v27 - v30;
    if (v19)
      v31 = (v27 >> 31) + 0x7FFFFFFF;
    v32 = v31 & ~(v31 >> 31) | 0x100000000;
  }
  else
  {
    v32 = 0;
  }
  v33 = *((_QWORD *)this + 1);
  if (WebCore::RenderGrid::isMasonry(*(_QWORD *)(v33 + 136), *(unsigned __int8 *)(v33 + 120)))
  {
    v45 = WebCore::RenderGrid::masonryContentSize(*(WebCore::RenderGrid **)(v33 + 136));
  }
  else
  {
    v34 = (uint64_t *)(v33 + 56);
    if (!*(_BYTE *)(v33 + 120))
      v34 = (uint64_t *)(v33 + 40);
    v35 = *((unsigned int *)v34 + 3);
    if ((_DWORD)v35)
    {
      v36 = 0;
      v37 = *v34;
      v38 = 136 * v35;
      v39 = (int *)(v37 + 8);
      do
      {
        v40 = *v39;
        v39 += 34;
        v41 = v40 & ~(v40 >> 31);
        v19 = __OFADD__(v36, v41);
        v42 = v36 + v41;
        if (v19)
          v36 = (v36 >> 31) + 0x7FFFFFFF;
        else
          v36 = v42;
        v38 -= 136;
      }
      while (v38);
    }
    else
    {
      v36 = 0;
    }
    v43 = (uint64_t *)(v33 + 4);
    if (!*(_BYTE *)(v33 + 120))
      v43 = (uint64_t *)(v33 + 12);
    v44 = WebCore::RenderGrid::guttersSize(*(WebCore::RenderElement **)(v33 + 136), *(unsigned __int8 *)(v33 + 120), 0, v35, *v43);
    if (__OFADD__(v36, v44))
      v45 = (v36 >> 31) + 0x7FFFFFFF;
    else
      v45 = v36 + v44;
  }
  v46 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*(_DWORD *)a3, v45))
    v46 = *(_DWORD *)a3 + v45;
  if ((v21 & 0x100000000) == 0)
  {
    v47 = 0;
    v4 = 0;
    if (!HIDWORD(v32))
      return v4;
LABEL_81:
    if (v47 || v46 > (int)v32)
    {
      if (v46 > (int)v32)
        goto LABEL_54;
      goto LABEL_53;
    }
    return 0;
  }
  v47 = v46 < (int)v21;
  if (HIDWORD(v32))
    goto LABEL_81;
  if (v46 >= (int)v21)
    return 0;
LABEL_53:
  LODWORD(v32) = -64;
LABEL_54:
  v48 = *((_QWORD *)this + 1);
  if ((v21 & 0x100000000) == 0)
    LODWORD(v21) = 0;
  v49 = *(_DWORD *)(*(_QWORD *)(v48 + 128) + 100);
  v50 = *(unsigned __int8 *)(v48 + 120);
  v51 = (uint64_t *)(v48 + 4);
  v52 = (uint64_t *)(v48 + 12);
  if (v50)
    v52 = v51;
  v4 = 1;
  v53 = WebCore::RenderGrid::guttersSize((WebCore::RenderElement *)v9, 1, 0, v49, *v52);
  if ((int)v32 <= (int)v21)
    v54 = v21;
  else
    v54 = v32;
  v19 = __OFSUB__(v54, v53);
  v55 = v54 - v53;
  v56 = (v54 >> 31) + 0x7FFFFFFF;
  if (v19)
    v57 = v56;
  else
    v57 = v55;
  v58 = *((_QWORD *)this + 1);
  v59 = *(_DWORD *)(v58 + 68);
  v60 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v60 = 1000000;
  if (v60 >= 1)
    v61 = 1;
  else
    v61 = v60;
  v62 = v61 - 1;
  if (-v60 > v62)
    v63 = -v60;
  else
    v63 = v62;
  if (v60 < v59)
    v59 = v60;
  if (1 - v60 <= v59)
    v64 = v59;
  else
    v64 = 1 - v60;
  *a2 = WebCore::GridTrackSizingAlgorithm::findFrUnitSize(v58, v63, v64, v57);
  return v4;
}

uint64_t WebCore::IndefiniteSizeStrategy::freeSpaceForStretchAutoTracksStep(WebCore::IndefiniteSizeStrategy *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t result;
  uint64_t *v27;
  int v28;
  int v29;

  v1 = *((_QWORD *)this + 1);
  if (!*(_BYTE *)(v1 + 120))
    return 0;
  v3 = *(_QWORD *)(v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + 8);
  v5 = v4 + 20;
  v6 = v4 + 36;
  v7 = ((*(_DWORD *)(v3 + 124) >> 13) & 6u) - 2 >= 4 ? v6 : v5;
  v8 = WebCore::RenderBox::computeContentAndScrollbarLogicalHeightUsing((WebCore::RenderBox *)v3, 1, v7, 0);
  if ((v8 & 0xFF00000000) == 0)
    return 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 1272))(v3, v8);
  v10 = 1360;
  if (((*(_DWORD *)(v3 + 124) >> 13) & 6u) - 2 < 4)
    v10 = 1352;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + v10))(v3);
  v12 = v11 << 6;
  if (v11 < -33554432)
    v12 = 0x80000000;
  if (v11 > 0x1FFFFFF)
    v12 = 0x7FFFFFFF;
  v13 = __OFSUB__(v9, v12);
  v14 = v9 - v12;
  if (v13)
    v14 = (v9 >> 31) + 0x7FFFFFFF;
  v15 = v14 & ~(v14 >> 31);
  v16 = *((_QWORD *)this + 1);
  if (WebCore::RenderGrid::isMasonry(*(_QWORD *)(v16 + 136), *(unsigned __int8 *)(v16 + 120)))
  {
    v29 = WebCore::RenderGrid::masonryContentSize(*(WebCore::RenderGrid **)(v16 + 136));
  }
  else
  {
    v17 = (uint64_t *)(v16 + 56);
    if (!*(_BYTE *)(v16 + 120))
      v17 = (uint64_t *)(v16 + 40);
    v18 = *((unsigned int *)v17 + 3);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = *v17;
      v21 = 136 * v18;
      v22 = (int *)(v20 + 8);
      do
      {
        v23 = *v22;
        v22 += 34;
        v24 = v23 & ~(v23 >> 31);
        v13 = __OFADD__(v19, v24);
        v25 = v19 + v24;
        if (v13)
          v19 = (v19 >> 31) + 0x7FFFFFFF;
        else
          v19 = v25;
        v21 -= 136;
      }
      while (v21);
    }
    else
    {
      v19 = 0;
    }
    v27 = (uint64_t *)(v16 + 4);
    if (!*(_BYTE *)(v16 + 120))
      v27 = (uint64_t *)(v16 + 12);
    v28 = WebCore::RenderGrid::guttersSize(*(WebCore::RenderElement **)(v16 + 136), *(unsigned __int8 *)(v16 + 120), 0, v18, *v27);
    if (__OFADD__(v19, v28))
      v29 = (v19 >> 31) + 0x7FFFFFFF;
    else
      v29 = v19 + v28;
  }
  v13 = __OFSUB__(v15, v29);
  result = (v15 - v29);
  if (v13)
    return 0x7FFFFFFFLL;
  return result;
}

uint64_t WebCore::DefiniteSizeStrategy::minLogicalSizeForChild(uint64_t *a1, WebCore::RenderObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 136);
  v10 = (*((_BYTE *)a2 + 21) & 0x10) == 0;
  v11 = (*(_BYTE *)(v9 + 21) & 0x10) == 0;
  v12 = *(unsigned __int8 *)(v8 + 120);
  v13 = v10 != v11;
  if (v10 == v11)
    v14 = *(unsigned __int8 *)(v8 + 120);
  else
    v14 = *(_BYTE *)(v8 + 120) == 0;
  if (WebCore::hasRelativeMarginOrPaddingForChild((uint64_t)a2, v14))
    goto LABEL_9;
  if (v12 != v13 && WebCore::hasRelativeOrIntrinsicSizeForChild((uint64_t *)a2, v14))
  {
    v8 = a1[1];
    v9 = *(_QWORD *)(v8 + 136);
LABEL_9:
    WebCore::setOverridingContainingBlockContentSizeForChild(v9, a2, *(unsigned __int8 *)(v8 + 120), (unint64_t)(*(unsigned __int8 *)(v8 + 120) == v13) << 32);
  }
  return WebCore::GridTrackSizingAlgorithmStrategy::minLogicalSizeForChild(a1, a2, a3, a4);
}

BOOL WebCore::hasRelativeMarginOrPaddingForChild(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  v3 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
  if (!a2)
  {
    v4 = *(_DWORD *)(a1 + 120);
    v5 = (v4 >> 26) & 1;
    v6 = v3 - 2;
    v7 = v5;
    if ((v3 - 2) >= 2)
    {
      if ((_DWORD)v3 == 4)
      {
        v7 = (v4 & 0x4000000) == 0;
      }
      else
      {
        v7 = (v4 >> 26) & 1;
        if ((_DWORD)v3 != 5)
        {
          if ((v4 & 0x4000000) != 0)
            v8 = 1;
          else
            v8 = 3;
          goto LABEL_8;
        }
      }
    }
    if (v7)
      v8 = 2;
    else
      v8 = 0;
LABEL_8:
    if ((*(_BYTE *)(v2 + 40 + 8 * v8 + 4) & 0xF7) == 3)
      return 1;
    v9 = (v4 >> 26) & 1;
    if (v6 >= 2)
    {
      if ((_DWORD)v3 == 4)
      {
        v9 = (v4 & 0x4000000) == 0;
      }
      else
      {
        v9 = (v4 >> 26) & 1;
        if ((_DWORD)v3 != 5)
        {
          v10 = 3;
          if ((v4 & 0x4000000) == 0)
            v10 = 1;
          goto LABEL_14;
        }
      }
    }
    v20 = v9 == 0;
    v10 = 2;
    if (!v20)
      v10 = 0;
LABEL_14:
    if ((*(_BYTE *)(v2 + 40 + 8 * v10 + 4) & 0xF7) == 3)
      return 1;
    v11 = (v4 >> 26) & 1;
    if (v6 >= 2)
    {
      if ((_DWORD)v3 == 4)
      {
        v11 = (v4 & 0x4000000) == 0;
      }
      else
      {
        v11 = (v4 >> 26) & 1;
        if ((_DWORD)v3 != 5)
        {
          v12 = 3;
          if ((v4 & 0x4000000) != 0)
            v12 = 1;
          goto LABEL_20;
        }
      }
    }
    v20 = v11 == 0;
    v12 = 2;
    if (v20)
      v12 = 0;
LABEL_20:
    v13 = v2 + 72;
    if ((*(_BYTE *)(v13 + 8 * v12 + 4) & 0xF7) != 3)
    {
      if (v6 >= 2)
      {
        if ((_DWORD)v3 == 4)
        {
          v5 = (v4 & 0x4000000) == 0;
        }
        else if ((_DWORD)v3 != 5)
        {
          v14 = 3;
          if ((v4 & 0x4000000) == 0)
            v14 = 1;
          return (*(_BYTE *)(v13 + 8 * v14 + 4) & 0xF7) == 3;
        }
      }
      v14 = 2;
      if (v5)
        v14 = 0;
      return (*(_BYTE *)(v13 + 8 * v14 + 4) & 0xF7) == 3;
    }
    return 1;
  }
  if ((v3 - 1) > 4)
    v16 = 0;
  else
    v16 = qword_1969FC4F8[v3 - 1];
  if ((*(_BYTE *)(v2 + 40 + 8 * v16 + 4) & 0xF7) != 3)
  {
    v17 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1;
    v18 = v17 > 4 ? 2 : qword_1969FC4D0[v17];
    if ((*(_BYTE *)(v2 + 40 + 8 * v18 + 4) & 0xF7) != 3)
    {
      v19 = v17 > 4 ? 0 : qword_1969FC4F8[v17];
      v13 = v2 + 72;
      if ((*(_BYTE *)(v13 + 8 * v19 + 4) & 0xF7) != 3)
      {
        if (v17 > 4)
          v14 = 2;
        else
          v14 = qword_1969FC4D0[v17];
        return (*(_BYTE *)(v13 + 8 * v14 + 4) & 0xF7) == 3;
      }
    }
  }
  return 1;
}

BOOL WebCore::hasRelativeOrIntrinsicSizeForChild(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;

  v3 = *a1;
  if (a2)
  {
    if (((*(uint64_t (**)(uint64_t *))(v3 + 1544))(a1) & 1) != 0)
      return 1;
    v10 = *(_QWORD *)(a1[11] + 8);
    v5 = ((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 >= 4;
    v6 = v10 + 4;
    v7 = v10 + 12;
  }
  else
  {
    if (((*(uint64_t (**)(uint64_t *))(v3 + 1552))(a1) & 1) != 0)
      return 1;
    v4 = *(_QWORD *)(a1[11] + 8);
    v5 = ((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 >= 4;
    v6 = v4 + 12;
    v7 = v4 + 4;
  }
  if (v5)
    v6 = v7;
  v8 = *(unsigned __int8 *)(v6 + 4);
  if (v8 >= 0xB || ((0x781u >> v8) & 1) == 0)
    return v8 - 5 < 2;
  return 1;
}

void WebCore::DefiniteSizeStrategy::maximizeTracks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int **v18;
  uint64_t *v19;
  uint64_t v20;
  double v21;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  int v40;
  int v41;
  unsigned int **v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL (*v51)(uint64_t *, uint64_t *);

  v10 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v10)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v5 = (_QWORD *)a2;
    v4 = 8 * v10;
    v3 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
    bzero(v3, 8 * v10);
    v6 = 0;
    v7 = 136;
    while (1)
    {
      if (!*v5)
      {
        v12 = 0;
        goto LABEL_6;
      }
      v8 = (uint64_t *)(*v5 + v6 * v7);
      v12 = *v8;
      if (!*v8)
      {
        v12 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v12 = 1;
        *(_QWORD *)(v12 + 8) = v8;
        v47 = (unsigned int *)*v8;
        *v8 = v12;
        if (v47)
        {
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
            goto LABEL_66;
          goto LABEL_58;
        }
      }
      do
LABEL_59:
        v50 = __ldaxr((unsigned int *)v12);
      while (__stlxr(v50 + 1, (unsigned int *)v12));
      while (1)
      {
LABEL_6:
        v13 = *(unsigned int **)&v3[8 * v6];
        *(_QWORD *)&v3[8 * v6] = v12;
        if (v13)
        {
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v13);
            WTF::fastFree((WTF *)v13, v11);
          }
        }
        v16 = *(_QWORD *)(*(_QWORD *)&v3[8 * v6] + 8);
        *(_DWORD *)(v16 + 16) = *(_DWORD *)(v16 + 8) & ~(*(int *)(v16 + 8) >> 31);
        if (++v6 != v10)
          break;
        if (*(_BYTE *)(a3 + 4))
        {
          v17 = 0;
          v18 = (unsigned int **)&v3[8 * v10];
          do
          {
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v3[v17] + 8) + 20) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v3[v17]
                                                                                               + 8)
                                                                                   + 8) & ~(*(int *)(*(_QWORD *)(*(_QWORD *)&v3[v17] + 8) + 8) >> 31);
            v17 += 8;
          }
          while (v4 != v17);
          if (*(int *)a3 > 0)
          {
            v51 = WebCore::sortByGridTrackGrowthPotential;
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,false>((unsigned int *)v3, (WTF **)&v3[8 * v10], (uint64_t (**)(unsigned int **, unsigned int **))&v51, 126 - 2 * __clz(v10), 1);
            v19 = (uint64_t *)v3;
            do
            {
              v20 = *v19;
              if (*v19)
                v20 = *(_QWORD *)(v20 + 8);
              v21 = (double)*(int *)a3 * 0.015625 / (double)v10 * 64.0;
              if (v21 >= 2147483650.0)
              {
                v22 = 0x7FFFFFFF;
              }
              else if (v21 <= -2147483650.0)
              {
                v22 = 0x80000000;
              }
              else
              {
                v22 = (int)v21;
              }
              v23 = *(_DWORD *)(v20 + 12);
              if (v23 != -64 && !*(_BYTE *)(v20 + 32))
              {
                v24 = *(_DWORD *)(v20 + 8) & ~(*(int *)(v20 + 8) >> 31);
                v25 = __OFSUB__(v23, v24);
                v26 = v23 - v24;
                v27 = (v23 >> 31) + 0x7FFFFFFF;
                if (!v25)
                  v27 = v26;
                if (v27 < v22)
                  v22 = v27;
              }
              v28 = *(_DWORD *)(v20 + 20);
              v25 = __OFADD__(v28, v22);
              v29 = v28 + v22;
              v30 = (v28 >> 31) + 0x7FFFFFFF;
              if (!v25)
                v30 = v29;
              *(_DWORD *)(v20 + 20) = v30;
              v25 = __OFSUB__(*(_DWORD *)a3, v22);
              v31 = *(_DWORD *)a3 - v22;
              v32 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
              if (!v25)
                v32 = v31;
              *(_DWORD *)a3 = v32;
              ++v19;
              --v10;
            }
            while (v10);
          }
          v33 = 0;
          do
          {
            v34 = *(_QWORD *)&v3[v33];
            if (v34)
            {
              v34 = *(_QWORD *)(v34 + 8);
              v35 = v34 + 16;
              v36 = *(_DWORD *)(v34 + 16);
            }
            else
            {
              v35 = 16;
              v36 = MEMORY[0x10];
            }
            if (v36 == -64)
            {
              v35 = v34 + 20;
            }
            else if (v36 < *(_DWORD *)(v34 + 20))
            {
              v35 = v34 + 20;
            }
            *(_DWORD *)(v34 + 16) = *(_DWORD *)v35;
            v33 += 8;
          }
          while (v4 != v33);
          v37 = 0;
          do
          {
            v38 = *(_DWORD **)(*(_QWORD *)&v3[v37] + 8);
            v40 = v38[3];
            v39 = v38[4];
            v38[2] = v39;
            v41 = v39 & ~(v39 >> 31);
            if (v40 != -64 && v40 < v41)
              v38[3] = v41;
            v37 += 8;
          }
          while (v4 != v37);
          v43 = (unsigned int **)v3;
          do
          {
            v44 = *v43;
            *v43 = 0;
            if (v44)
            {
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                atomic_store(1u, v44);
                WTF::fastFree((WTF *)v44, v11);
              }
            }
            ++v43;
          }
          while (v43 != v18);
          WTF::fastFree((WTF *)v3, v11);
          return;
        }
LABEL_65:
        std::__throw_bad_optional_access[abi:sn180100]();
LABEL_66:
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v11);
LABEL_58:
        v12 = *v8;
        if (*v8)
          goto LABEL_59;
      }
    }
  }
  if (!*(_BYTE *)(a3 + 4))
    goto LABEL_65;
}

uint64_t WebCore::DefiniteSizeStrategy::layoutGridItemForMinSizeComputation(WebCore::DefiniteSizeStrategy *this, WebCore::RenderBox *a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (a3)
  {
    v3 = *((_DWORD *)a2 + 5);
    if ((v3 & 8) == 0)
    {
      *((_DWORD *)a2 + 5) = v3 | 8;
      if ((v3 & 0x8000) != 0)
      {
        if ((*((_BYTE *)a2 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19633AF9CLL);
        }
        v4 = *((_QWORD *)a2 + 18);
        if (v4)
        {
          v5 = *(_DWORD *)(v4 + 8) + 1;
          *(_DWORD *)(v4 + 8) = v5;
        }
        else
        {
          v5 = MEMORY[8];
        }
        *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v5)
        {
          __break(0xC471u);
          JUMPOUT(0x19633AFC8);
        }
        *(_DWORD *)(v4 + 8) = v5 - 1;
      }
    }
  }
  if ((*((_BYTE *)a2 + 20) & 0xF8) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    if (v6
      && (v7 = *(_QWORD *)(v6 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + 239) & 0x18) != 0
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8)
                                           + 1944)
                               + 248)
                   + 479))
    {
      return WebCore::RenderElement::clearNeedsLayoutForSkippedContent(a2);
    }
    else
    {
      return (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 688))(a2);
    }
  }
  return result;
}

void WebCore::DefiniteSizeStrategy::findUsedFlexFraction(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  signed int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  WebCore::DefiniteSizeStrategy *v12;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 + 56;
  if (!a3)
    v5 = v4 + 40;
  if ((a4 & 0xFF00000000) != 0)
  {
    v6 = WebCore::GridPosition::gMaxPositionForTesting;
    if (!byte_1EE2F9580)
      v6 = 1000000;
    v7 = *(_DWORD *)(v5 + 12);
    if (v6 < v7)
      v7 = v6;
    if (1 - v6 <= v7)
      v8 = v7;
    else
      v8 = 1 - v6;
    if (v6 >= 1)
      v9 = 1;
    else
      v9 = v6;
    v10 = v9 - 1;
    if (-v6 > v10)
      v11 = -v6;
    else
      v11 = v10;
    WebCore::GridTrackSizingAlgorithm::findFrUnitSize(v4, v11, v8, a4);
  }
  else
  {
    v12 = (WebCore::DefiniteSizeStrategy *)std::__throw_bad_optional_access[abi:sn180100]();
    WebCore::DefiniteSizeStrategy::freeSpaceForStretchAutoTracksStep(v12);
  }
}

uint64_t WebCore::DefiniteSizeStrategy::freeSpaceForStretchAutoTracksStep(WebCore::DefiniteSizeStrategy *this)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  WebCore::DefiniteSizeStrategy *v6;
  WebCore::RenderBox *v7;

  v1 = *((_QWORD *)this + 1);
  v2 = *(unsigned __int8 *)(v1 + 120);
  v3 = (uint64_t *)(v1 + 28);
  v4 = (uint64_t *)(v1 + 20);
  if (v2)
    v4 = v3;
  result = *v4;
  if ((*v4 & 0xFF00000000) == 0)
  {
    v6 = (WebCore::DefiniteSizeStrategy *)std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::DefiniteSizeStrategy::minContentForChild(v6, v7);
  }
  return result;
}

uint64_t WebCore::DefiniteSizeStrategy::minContentForChild(WebCore::DefiniteSizeStrategy *this, WebCore::RenderBox *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v4 = *((_QWORD *)this + 1);
  v5 = (*((_DWORD *)a2 + 5) & 0x1000) == 0;
  v6 = (*(_BYTE *)(*(_QWORD *)(v4 + 136) + 21) & 0x10) == 0;
  v7 = v5 != v6;
  v8 = *(unsigned __int8 *)(v4 + 120);
  if ((*((_DWORD *)a2 + 5) & 0xF8) != 0 && v8 == v7)
  {
    if (((*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1552))(a2) & 1) != 0)
      goto LABEL_14;
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8);
    v12 = v11 + 12;
    v13 = v11 + 4;
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
      v12 = v13;
    v14 = *(unsigned __int8 *)(v12 + 4);
    v15 = (v14 - 7) < 4 || v14 == 0;
    if (v15 || (v14 - 5) < 2 || WebCore::hasRelativeMarginOrPaddingForChild((uint64_t)a2, 0))
    {
LABEL_14:
      v16 = *(_QWORD *)(*((_QWORD *)this + 1) + 136);
      if (((*((_BYTE *)WebCore::RenderObject::containingBlock(a2) + 21) & 0x10) == 0) != ((*(_BYTE *)(v16 + 21) & 0x10) == 0))
        v7 = v5 ^ v6 ^ 1;
      if (v7)
      {
        v18 = 0x100000000;
        v17 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
        if (!WebCore::gOverridingContainingBlockContentLogicalHeightMap)
        {
          v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v17 = 0;
          v17[1] = 0;
          WebCore::gOverridingContainingBlockContentLogicalHeightMap = (uint64_t)v17;
        }
      }
      else
      {
        v18 = 0x100000000;
        v17 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
        if (!WebCore::gOverridingContainingBlockContentLogicalWidthMap)
        {
          v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v17 = 0;
          v17[1] = 0;
          WebCore::gOverridingContainingBlockContentLogicalWidthMap = (uint64_t)v17;
        }
      }
      WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v17, a2, (int *)&v18);
    }
  }
  return WebCore::GridTrackSizingAlgorithmStrategy::minContentForChild(this, a2);
}

uint64_t WebCore::DefiniteSizeStrategy::recomputeUsedFlexFractionIfNeeded(WebCore::DefiniteSizeStrategy *this, double *a2, WebCore::LayoutUnit *a3)
{
  return 0;
}

void WebCore::GridTrackSizingAlgorithm::accumulateIntrinsicSizesForTrack(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::RenderElement *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  _QWORD v53[9];
  _QWORD v54[2];
  int v55;
  int v56;

  v56 = a9;
  v55 = a3;
  v54[0] = &v55;
  v54[1] = a4;
  v53[0] = a7;
  v53[1] = a1;
  v53[2] = &v55;
  v53[3] = a4;
  v53[6] = v54;
  v53[7] = a5;
  v13 = a4 + 4;
  v53[8] = a6;
  v14 = a4 + 3;
  v53[4] = &v56;
  v53[5] = a2;
  while (1)
  {
    v15 = *(_QWORD *)a4;
    v16 = *(_DWORD *)(*(_QWORD *)a4 + 100);
    if (*((_BYTE *)a4 + 8))
    {
      if (!v16)
        break;
      v17 = *(_DWORD *)(*(_QWORD *)(v15 + 88) + 12);
      v18 = v13;
    }
    else
    {
      v18 = v14;
      v17 = *(_DWORD *)(*(_QWORD *)a4 + 100);
    }
    if (*v18 >= v17)
      break;
    v19 = *v14;
    {
      WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell = (uint64_t)&unk_1EE2F9300;
      qword_1EE2F92F8 = 1;
    }
    v20 = *v13;
    if (!(_DWORD)v19)
      goto LABEL_9;
    if (v16 <= v19)
    {
LABEL_89:
      __break(0xC471u);
      JUMPOUT(0x19633B6E8);
    }
    v21 = *(_QWORD *)(v15 + 88);
    if (*(_DWORD *)(v21 + 16 * v19 + 12) <= v20)
    {
      v23 = &WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell;
    }
    else
    {
LABEL_9:
      if (v16 <= v19)
      {
LABEL_87:
        __break(0xC471u);
        JUMPOUT(0x19633B6D8);
      }
      v21 = *(_QWORD *)(v15 + 88);
      v22 = v21 + 16 * v19;
      if (*(_DWORD *)(v22 + 12) <= v20)
      {
LABEL_88:
        __break(0xC471u);
        JUMPOUT(0x19633B6E0);
      }
      v23 = (uint64_t *)(*(_QWORD *)v22 + 24 * v20);
    }
    v24 = a4[5];
    if (*((unsigned int *)v23 + 3) <= v24)
    {
      a4[5] = 0;
      v25 = *v18;
      v26 = *v18 + 1;
      *v18 = v26;
      if (v26 >= v17)
        break;
      v27 = v17 - 1;
      while (1)
      {
        v28 = *v14;
        v29 = *v13;
        v30 = *(_DWORD *)(v15 + 100);
        if (!(_DWORD)v28)
          goto LABEL_101;
        if (v30 <= v28)
          goto LABEL_89;
        if (*(_DWORD *)(v21 + 16 * v28 + 12) <= v29)
        {
          v23 = &WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell;
        }
        else
        {
LABEL_101:
          if (v30 <= v28)
            goto LABEL_87;
          v31 = v21 + 16 * v28;
          if (*(_DWORD *)(v31 + 12) <= v29)
            goto LABEL_88;
          v23 = (uint64_t *)(*(_QWORD *)v31 + 24 * v29);
        }
        if (*((_DWORD *)v23 + 3))
          break;
        a4[5] = 0;
        *v18 = v25 + 2;
        if (v27 == ++v25)
          goto LABEL_22;
      }
      v24 = 0;
    }
    a4[5] = v24 + 1;
    v32 = *(_QWORD *)(*v23 + 8 * v24);
    if (!v32)
      break;
    v33 = *(WebCore::RenderElement **)(v32 + 8);
    if (!v33)
      break;
    ++*((_DWORD *)v33 + 4);
    v34 = *(_QWORD *)(a1 + 136);
    do
    {
      v35 = v34;
      v36 = *(_QWORD *)(v34 + 32);
      if (!v36)
        break;
      v34 = *(_QWORD *)(v36 + 8);
      if (!v34)
        break;
    }
    while (*(_BYTE *)(v34 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 88) + 40) + 80) + 258));
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 88) + 40) + 80) + 260))
    {
      v37 = *(_QWORD *)(a1 + 136);
      do
      {
        v38 = v37;
        v39 = *(_QWORD *)(v37 + 32);
        if (!v39)
          break;
        v37 = *(_QWORD *)(v39 + 8);
        if (!v37)
          break;
      }
      while (*(_BYTE *)(v37 + 46) == 12
           && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 88) + 40) + 80) + 259));
      v40 = v38;
      do
      {
        v41 = v40;
        v42 = *(_QWORD *)(v40 + 32);
        if (!v42)
          break;
        v40 = *(_QWORD *)(v42 + 8);
        if (!v40)
          break;
      }
      while (*(_BYTE *)(v40 + 46) == 12
           && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 88) + 40) + 80) + 258));
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 88) + 40) + 80) + 260)
        || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 88) + 40) + 80) + 261))
      {
        goto LABEL_46;
      }
    }
    WebCore::GridPositionsResolver::resolveGridPositionsFromStyle(*(WebCore::GridPositionsResolver **)(a1 + 136), v33, (WTF::StringImpl *)*(unsigned __int8 *)(a1 + 120));
    if (v52 != 2)
LABEL_46:
      WebCore::GridTrackSizingAlgorithm::accumulateIntrinsicSizesForTrack(WebCore::GridTrack &,unsigned int,WebCore::GridIterator &,WTF::Vector<WebCore::GridItemWithSpan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<WebCore::GridItemWithSpan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> &,WebCore::GridTrackSizingAlgorithm::MasonryIndefiniteItems &,WebCore::LayoutUnit)::$_1::operator()((uint64_t)v53, (uint64_t)v33);
    v43 = *((_DWORD *)v33 + 4);
    if (!v43)
    {
      __break(0xC471u);
      JUMPOUT(0x19633B564);
    }
    *((_DWORD *)v33 + 4) = v43 - 1;
  }
LABEL_22:
  if (WebCore::RenderGrid::isMasonry(*(WebCore::RenderGrid **)(a1 + 136)))
  {
    v44 = *(_QWORD **)(a8 + 8);
    if (v44)
    {
      while (1)
      {
        v45 = *(_QWORD *)(*v44 + 8);
        if (v45)
          break;
        v44 = (_QWORD *)v44[2];
        if (!v44)
          goto LABEL_62;
      }
LABEL_57:
      WebCore::GridTrackSizingAlgorithm::accumulateIntrinsicSizesForTrack(WebCore::GridTrack &,unsigned int,WebCore::GridIterator &,WTF::Vector<WebCore::GridItemWithSpan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<WebCore::GridItemWithSpan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> &,WebCore::GridTrackSizingAlgorithm::MasonryIndefiniteItems &,WebCore::LayoutUnit)::$_1::operator()((uint64_t)v53, v45);
      while (1)
      {
        v44 = (_QWORD *)v44[2];
        if (!v44)
          break;
        v45 = *(_QWORD *)(*v44 + 8);
        if (v45)
        {
          ++*(_DWORD *)(a8 + 24);
          goto LABEL_57;
        }
      }
      ++*(_DWORD *)(a8 + 24);
    }
LABEL_62:
    if (!*(_BYTE *)(a2 + 128))
    {
      __break(0xC471u);
      JUMPOUT(0x19633B6D0);
    }
    if (*(_DWORD *)(a2 + 64) == 1 || *(_DWORD *)(a2 + 88) == 1)
    {
      v47 = *(_QWORD **)(a8 + 40);
      if (v47)
      {
        while (1)
        {
          v48 = *(_QWORD *)(*v47 + 8);
          if (v48)
            break;
          v47 = (_QWORD *)v47[2];
          if (!v47)
            return;
        }
LABEL_70:
        WebCore::GridTrackSizingAlgorithm::accumulateIntrinsicSizesForTrack(WebCore::GridTrack &,unsigned int,WebCore::GridIterator &,WTF::Vector<WebCore::GridItemWithSpan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<WebCore::GridItemWithSpan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> &,WebCore::GridTrackSizingAlgorithm::MasonryIndefiniteItems &,WebCore::LayoutUnit)::$_1::operator()((uint64_t)v53, v48);
        while (1)
        {
          v47 = (_QWORD *)v47[2];
          if (!v47)
            break;
          v48 = *(_QWORD *)(*v47 + 8);
          if (v48)
          {
            ++*(_DWORD *)(a8 + 56);
            goto LABEL_70;
          }
        }
        ++*(_DWORD *)(a8 + 56);
      }
    }
    else
    {
      v49 = v55;
      v50 = WebCore::GridPosition::gMaxPositionForTesting;
      if (!byte_1EE2F9580)
        v50 = 1000000;
      if (v50 - 1 < v55)
        v49 = v50 - 1;
      if (-v50 > v49)
        v51 = -v50;
      else
        v51 = v49;
      WebCore::GridTrackSizingAlgorithm::sizeTrackToFitSingleSpanMasonryGroup(a1, v51, (_DWORD *)a8, a2);
    }
  }
}

void WebCore::GridTrackSizingAlgorithm::accumulateIntrinsicSizesForTrack(WebCore::GridTrack &,unsigned int,WebCore::GridIterator &,WTF::Vector<WebCore::GridItemWithSpan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<WebCore::GridItemWithSpan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> &,WebCore::GridTrackSizingAlgorithm::MasonryIndefiniteItems &,WebCore::LayoutUnit)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  WebCore::RenderGrid *v9;
  _BOOL4 v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _BOOL4 isMasonry;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  __int16 v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int **v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  unsigned int v75;
  int v76;
  void *v77;
  WTF *v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  WTF *v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  const WebCore::RenderGrid *v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  int v116;
  BOOL v117;
  unsigned int v118;
  uint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  int v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  int v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  int v133;
  unsigned int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  WTF *v139;
  WTF *v140;
  int v141;
  int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  WebCore::RenderElement *v155;
  int v156;
  int v157;
  void *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  WTF *v165;
  int v166;
  uint64_t *v167;
  uint64_t v168;
  unsigned int v169;
  float v170;
  double v171;
  float v172;
  int v173;
  int v174;
  int v175;
  uint64_t v176;
  unsigned int v177;
  int v178;
  int v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  char v184[24];
  WTF *v185[2];
  __int128 v186;
  __int128 v187;
  _DWORD v188[7];
  WTF *v189;
  uint64_t *v190;
  unsigned int v191;
  unsigned int v192;

  v4 = *(_QWORD *)(a1 + 8);
  WTF::WeakHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>(*(_QWORD *)a1, (_QWORD *)a2, (uint64_t)v185);
  v5 = v186;
  v6 = WebCore::RenderGrid::gridSpanForChild(*(_QWORD *)(v4 + 136), a2, *(unsigned __int8 *)(v4 + 120));
  v8 = v7;
  v9 = *(WebCore::RenderGrid **)(v4 + 136);
  v10 = v5 != 0;
  v11 = HIDWORD(v6);
  v182 = v4;
  v183 = a1;
  if (WebCore::RenderGrid::isMasonry(v9))
  {
    v12 = **(_DWORD **)(a1 + 16);
    v13 = HIDWORD(v6) - v6 + v12;
    v14 = WebCore::GridPosition::gMaxPositionForTesting;
    if (!byte_1EE2F9580)
      v14 = 1000000;
    if (v14 - 1 < v12)
      v12 = v14 - 1;
    if (-v14 > v12)
      v15 = -v14;
    else
      v15 = v12;
    v16 = 1 - v14;
    if (v14 < v13)
      v13 = v14;
    if (v16 <= v13)
      v17 = v13;
    else
      v17 = v16;
    v18 = WebCore::RenderGrid::gridSpanForChild((uint64_t)v9, a2, *(unsigned __int8 *)(v4 + 120));
    v19 = **(_DWORD **)(a1 + 16);
    WebCore::GridPositionsResolver::resolveGridPositionsFromStyle(*(WebCore::GridPositionsResolver **)(v4 + 136), (WebCore::RenderElement *)a2, (WTF::StringImpl *)*(unsigned __int8 *)(v4 + 120));
    v22 = v20 != 2 && v19 != v18;
    if (*(_BYTE *)(v4 + 120))
      v23 = v4 + 56;
    else
      v23 = v4 + 40;
    if (*(_DWORD *)(v23 + 12) < (v17 - v15 + **(_DWORD **)(a1 + 16)))
      v22 = 1;
    if (v22)
      return;
    v8 = 1;
    LODWORD(v11) = v17;
    LODWORD(v6) = v15;
    v10 = 1;
    v24 = v15 | (v17 << 32);
  }
  else
  {
    v24 = v6;
  }
  v25 = *(unsigned __int8 *)(a2 + 46);
  v26 = v25 == 12;
  if (v25 == 12)
    v27 = a2;
  else
    v27 = 0;
  if (!v26)
  {
LABEL_48:
    if (!v10)
      return;
    v38 = v4 + 40;
    if (*(_BYTE *)(v4 + 120))
      v38 = v4 + 56;
    v39 = v11 - v6;
    if ((_DWORD)v11 != (_DWORD)v6)
    {
      v40 = *(_DWORD *)(v38 + 12);
      if (v40 <= v6)
        v40 = v6;
      while (1)
      {
        if (v40 == (_DWORD)v6)
        {
          __break(0xC471u);
          JUMPOUT(0x19633C8F0);
        }
        if (!*(_BYTE *)(*(_QWORD *)v38 + 136 * v6 + 128))
        {
          __break(0xC471u);
          JUMPOUT(0x19633C650);
        }
        v41 = *(_QWORD *)v38 + 136 * v6;
        if (*(_DWORD *)(v41 + 64) == 1 || *(_DWORD *)(v41 + 88) == 1)
          break;
        LODWORD(v6) = v6 + 1;
        if ((_DWORD)v11 == (_DWORD)v6)
          goto LABEL_59;
      }
      v44 = *(_QWORD *)(a1 + 64);
      goto LABEL_280;
    }
LABEL_59:
    if (v39 != 1)
    {
      v44 = *(_QWORD *)(a1 + 56);
LABEL_280:
      v185[0] = (WTF *)a2;
      v185[1] = (WTF *)v24;
      LODWORD(v186) = v8;
      v160 = *(unsigned int *)(v44 + 12);
      if ((_DWORD)v160 == *(_DWORD *)(v44 + 8))
      {
        v164 = WTF::Vector<WebCore::GridItemWithSpan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v44, v160 + 1, (unint64_t)v185);
        v161 = *(_QWORD *)v44 + 24 * *(unsigned int *)(v44 + 12);
        v162 = *(_OWORD *)v164;
        v163 = *(_QWORD *)(v164 + 16);
      }
      else
      {
        v161 = *(_QWORD *)v44 + 24 * v160;
        v162 = *(_OWORD *)v185;
        v163 = v186;
      }
      *(_QWORD *)(v161 + 16) = v163;
      *(_OWORD *)v161 = v162;
      v55 = *(_DWORD *)(v44 + 12) + 1;
      goto LABEL_284;
    }
    v42 = (uint64_t *)(v4 + 56);
    if (!*(_BYTE *)(v4 + 120))
      v42 = (uint64_t *)(v4 + 40);
    if (*((_DWORD *)v42 + 3) <= v24)
    {
      __break(0xC471u);
      JUMPOUT(0x19633C8F8);
    }
    v43 = *v42;
    if (!*(_BYTE *)(v43 + 136 * v24 + 128))
    {
      __break(0xC471u);
      JUMPOUT(0x19633C6D0);
    }
    v44 = *(_QWORD *)(a1 + 40);
    v45 = v43 + 136 * v24;
    v46 = v45 + 40;
    v47 = *(_WORD *)(v45 + 120);
    if ((v47 & 8) != 0)
    {
      v48 = *(_DWORD *)(v44 + 8);
      v49 = (***(uint64_t (****)(_QWORD, uint64_t))(v4 + 144))(*(_QWORD *)(v4 + 144), a2);
    }
    else if ((v47 & 4) != 0)
    {
      v48 = *(_DWORD *)(v44 + 8);
      v49 = WebCore::GridTrackSizingAlgorithmStrategy::maxContentForChild(*(WebCore::GridTrackSizingAlgorithmStrategy **)(v4 + 144), (WebCore::RenderBox *)a2);
    }
    else
    {
      if ((v47 & 1) == 0)
        goto LABEL_74;
      v48 = *(_DWORD *)(v44 + 8);
      v49 = WebCore::GridTrackSizingAlgorithmStrategy::minSizeForChild(*(WebCore::GridTrackSizingAlgorithmStrategy **)(v4 + 144), (WebCore::RenderBox *)a2);
    }
    if (v48 <= v49)
      v50 = v49;
    else
      v50 = v48;
    v51 = v50 & ~(v50 >> 31);
    *(_DWORD *)(v44 + 8) = v51;
    v52 = *(_DWORD *)(v44 + 12);
    if (v52 != -64 && v52 < v51)
      *(_DWORD *)(v44 + 12) = v51;
LABEL_74:
    v53 = *(_WORD *)(v46 + 80);
    if ((v53 & 0x20) != 0)
    {
      v166 = (***(uint64_t (****)(_QWORD, uint64_t))(v4 + 144))(*(_QWORD *)(v4 + 144), a2);
      v55 = *(_DWORD *)(v44 + 12);
      if (v55 <= v166)
        v55 = v166;
LABEL_79:
      if (v55 != -64)
      {
        if (*(_BYTE *)(v44 + 28))
          v56 = *(_DWORD *)(v44 + 24);
        else
          v56 = v55;
        if (v56 < v55)
          v55 = v56;
        *(_DWORD *)(v44 + 12) = v55;
        if (v55 != -64)
        {
          v57 = *(_DWORD *)(v44 + 8) & ~(*(int *)(v44 + 8) >> 31);
          if (v55 < v57)
            *(_DWORD *)(v44 + 12) = v57;
        }
        return;
      }
LABEL_284:
      *(_DWORD *)(v44 + 12) = v55;
      return;
    }
    if ((v53 & 0x12) == 0)
      return;
    v54 = WebCore::GridTrackSizingAlgorithmStrategy::maxContentForChild(*(WebCore::GridTrackSizingAlgorithmStrategy **)(v4 + 144), (WebCore::RenderBox *)a2);
    if (*(_DWORD *)v46 != 2)
    {
LABEL_77:
      v55 = *(_DWORD *)(v44 + 12);
      if (v55 <= v54)
        v55 = v54;
      goto LABEL_79;
    }
    if (*(_BYTE *)(v4 + 120))
      v167 = (uint64_t *)(v4 + 4);
    else
      v167 = (uint64_t *)(v4 + 12);
    v168 = *v167;
    if ((v168 & 0xFF00000000) == 0)
      LODWORD(v168) = 0;
    v169 = *(unsigned __int8 *)(v46 + 60);
    if (v169 - 3 >= 2 && v169 != 11)
    {
      if (v169 < 2 || v169 == 9)
      {
LABEL_340:
        if ((int)v168 < v54)
          v54 = v168;
        goto LABEL_77;
      }
LABEL_353:
      LODWORD(v168) = 0;
      goto LABEL_340;
    }
    switch(v169)
    {
      case 4u:
        v170 = *(float *)(v46 + 56);
        if (!*(_BYTE *)(v46 + 62))
          v170 = (float)SLODWORD(v170);
        break;
      case 3u:
        v172 = *(float *)(v46 + 56);
        if (!*(_BYTE *)(v46 + 62))
          v172 = (float)SLODWORD(v172);
        v170 = (float)((float)((float)(int)v168 * 0.015625) * v172) / 100.0;
        break;
      case 0xBu:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v46 + 56), (float)(int)v168 * 0.015625);
        break;
      default:
        goto LABEL_353;
    }
    v171 = v170 * 64.0;
    if (v171 >= 2147483650.0)
    {
      LODWORD(v168) = 0x7FFFFFFF;
    }
    else if (v171 <= -2147483650.0)
    {
      LODWORD(v168) = 0x80000000;
    }
    else
    {
      LODWORD(v168) = (int)v171;
    }
    goto LABEL_340;
  }
  v180 = v27;
  ++*(_DWORD *)(a2 + 16);
  if (!WebCore::RenderGrid::isSubgridInParentDirection((WebCore::RenderElement *)a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 8)))
  {
    v37 = *(_DWORD *)(a2 + 16);
    if (!v37)
    {
      __break(0xC471u);
      JUMPOUT(0x19633C5F0);
    }
    *(_DWORD *)(a2 + 16) = v37 - 1;
    goto LABEL_48;
  }
  v28 = *(_QWORD *)(a2 + 32);
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 8);
    if (v29 && *(_BYTE *)(v29 + 46) != 12)
    {
      __break(0xC471u);
      JUMPOUT(0x19633C630);
    }
  }
  else
  {
    v29 = 0;
  }
  v30 = WebCore::RenderGrid::gridSpanForChild(v29, a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 8));
  v31 = *(_QWORD *)(v182 + 136);
  isMasonry = WebCore::RenderGrid::isMasonry((WebCore::RenderGrid *)v31);
  v33 = **(_DWORD **)(a1 + 16);
  if (isMasonry)
  {
    v34 = WebCore::GridPosition::gMaxPositionForTesting;
    if (!byte_1EE2F9580)
      v34 = 1000000;
    v35 = v34 - 1;
    if (v34 - 1 >= v33)
      v35 = **(_DWORD **)(a1 + 16);
    if (-v34 > v35)
      v36 = -v34;
    else
      v36 = v35;
    v179 = v36;
  }
  else
  {
    v179 = v30;
  }
  v58 = *(unsigned int **)(a1 + 32);
  v59 = *(_QWORD *)(a1 + 40);
  if (((*(_BYTE *)(a2 + 21) & 0x10) == 0) == ((*(_BYTE *)(v31 + 21) & 0x10) == 0))
    v60 = *(unsigned __int8 *)(v182 + 120);
  else
    v60 = *(unsigned __int8 *)(v182 + 120) == 0;
  if (*(_BYTE *)(v182 + 120))
  {
    v61 = (unsigned __int16)*(_DWORD *)(v31 + 124) >> 13;
    v173 = 2;
    switch((unsigned __int16)*(_DWORD *)(v31 + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_95;
      case 3:
      case 5:
        v61 = 3;
        goto LABEL_95;
      case 4:
        goto LABEL_96;
      default:
        v61 = 0;
LABEL_95:
        v173 = v61;
LABEL_96:
        v62 = (v173 & 0xFFFFFFFD) == 1;
        if (v60)
          goto LABEL_97;
        goto LABEL_102;
    }
  }
  v62 = (*(unsigned __int8 *)(v31 + 123) >> 2) & 1;
  if (v60)
  {
LABEL_97:
    v63 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
    v174 = 2;
    switch((unsigned __int16)*(_DWORD *)(a2 + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_99;
      case 3:
      case 5:
        v63 = 3;
        goto LABEL_99;
      case 4:
        goto LABEL_100;
      default:
        v63 = 0;
LABEL_99:
        v174 = v63;
LABEL_100:
        v64 = (v174 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  else
  {
LABEL_102:
    v64 = (*(unsigned __int8 *)(a2 + 123) >> 2) & 1;
  }
  v65 = v62 ^ v64;
  if ((_DWORD)v6 != v33)
    goto LABEL_106;
  if (!*(_BYTE *)(v59 + 128))
  {
    __break(0xC471u);
    JUMPOUT(0x19633C670);
  }
  if ((*(_WORD *)(v59 + 120) & 0x40) != 0)
    v66 = WebCore::marginAndBorderAndPaddingForEdge(a2, v60, v65 ^ 1u);
  else
LABEL_106:
    v66 = 0;
  if ((_DWORD)v11 - 1 == v33)
  {
    if (!*(_BYTE *)(v59 + 128))
    {
      __break(0xC471u);
      JUMPOUT(0x19633C690);
    }
    if ((*(_WORD *)(v59 + 120) & 0x40) != 0)
    {
      v67 = WebCore::marginAndBorderAndPaddingForEdge(a2, v60, v65);
      if (__OFADD__(v66, v67))
        v66 = (v66 >> 31) + 0x7FFFFFFF;
      else
        v66 += v67;
    }
  }
  v68 = *v58;
  v69 = *v58 + v66;
  if (__OFADD__(v68, v66))
    v69 = (v68 >> 31) + 0x7FFFFFFF;
  v71 = *(_QWORD *)(v183 + 40);
  v70 = *(int ***)(v183 + 48);
  v72 = *(_DWORD *)(v71 + 8);
  v73 = HIDWORD(v24);
  v74 = **v70;
  if (v74 != (_DWORD)v24 && HIDWORD(v24) - 1 != v74)
  {
    v75 = 0;
    goto LABEL_235;
  }
  v175 = *(_DWORD *)(v71 + 8);
  v176 = *(_QWORD *)(v183 + 40);
  v177 = v69;
  v76 = *((unsigned __int8 *)v70[1] + 8);
  WebCore::ancestorSubgridsOfGridItem(a2, v76, (uint64_t)v185);
  v78 = v185[0];
  if (v185[0])
  {
    v79 = *(_DWORD *)v185[0];
    v80 = (unsigned __int16)v186;
    v189 = v185[0];
    *(_DWORD *)v185[0] = v79 + 4;
    v190 = (uint64_t *)v78;
    LOWORD(v191) = v80;
    v81 = v79 + 3;
    if (v81)
    {
      *(_DWORD *)v78 = v81;
    }
    else
    {
      WTF::fastFree(v78, v77);
      v81 = *(_DWORD *)v78;
    }
    v82 = v81 - 1;
    if (!v82)
    {
      WTF::fastFree(v78, v77);
      v82 = *(_DWORD *)v78;
    }
    *(_DWORD *)v78 = v82 + 2;
    v178 = v80;
    v181 = v80 >> 8;
    v90 = __CFADD__(v82, 1);
    v83 = v82 + 1;
    if (v90)
      WTF::fastFree(v78, v77);
    else
      *(_DWORD *)v78 = v83;
  }
  else
  {
    v189 = 0;
    v190 = 0;
    LOWORD(v191) = v186;
    v178 = v186;
    v181 = BYTE1(v186);
  }
  v75 = 0;
  while (1)
  {
    v84 = (WTF *)v190;
    if (!v190)
      break;
    v85 = v190[1];
    if (!v85)
      break;
LABEL_143:
    v88 = *(_QWORD *)v85;
    if ((_BYTE)v76)
    {
      if (((*(uint64_t (**)(uint64_t))(v88 + 1544))(v85) & 1) != 0)
        goto LABEL_156;
      v89 = *(_QWORD *)(*(_QWORD *)(v85 + 88) + 8);
      v90 = ((*(_DWORD *)(v85 + 124) >> 13) & 6u) - 2 >= 4;
      v91 = v89 + 4;
      v92 = v89 + 12;
    }
    else
    {
      if (((*(uint64_t (**)(uint64_t))(v88 + 1552))(v85) & 1) != 0)
        goto LABEL_156;
      v93 = *(_QWORD *)(*(_QWORD *)(v85 + 88) + 8);
      v90 = ((*(_DWORD *)(v85 + 124) >> 13) & 6u) - 2 >= 4;
      v91 = v93 + 12;
      v92 = v93 + 4;
    }
    if (v90)
      v91 = v92;
    v94 = *(unsigned __int8 *)(v91 + 4);
    v95 = (v94 - 7) < 4 || v94 == 0;
    if (!v95 && (v94 - 5) >= 2)
      WebCore::RenderGrid::availableSpaceForGutters((WebCore::RenderBox *)v85, v76);
LABEL_156:
    v97 = WebCore::RenderGrid::gridSpanForChild(v85, a2, v76);
    v98 = *(_QWORD *)(v85 + 328);
    v99 = *(_DWORD *)(v98 + 100);
    if (v76 != 1)
    {
      if (v99)
        v99 = *(_DWORD *)(*(_QWORD *)(v98 + 88) + 12);
      else
        v99 = WebCore::GridPositionsResolver::explicitGridColumnCount((WebCore::GridPositionsResolver *)v85, v96);
    }
    v100 = *(_QWORD *)(v85 + 32);
    if (!v100 || (v101 = *(_QWORD *)(v100 + 8)) == 0 || *(_BYTE *)(v101 + 46) != 12)
    {
      if (v78)
      {
        if (*(_DWORD *)v78 == 1)
          WTF::fastFree(v78, v96);
        else
          --*(_DWORD *)v78;
      }
      v139 = (WTF *)v190;
      v190 = 0;
      if (v139)
      {
        if (*(_DWORD *)v139 == 1)
          WTF::fastFree(v139, v96);
        else
          --*(_DWORD *)v139;
      }
      v140 = v189;
      v189 = 0;
      if (v140)
      {
        if (*(_DWORD *)v140 == 1)
          WTF::fastFree(v140, v96);
        else
          --*(_DWORD *)v140;
      }
      if (v185[1])
      {
        if (*(_DWORD *)v185[1] != 1)
        {
          --*(_DWORD *)v185[1];
          goto LABEL_230;
        }
        WTF::fastFree(v185[1], v96);
        if (!v78)
        {
LABEL_233:
          v75 = 0;
          goto LABEL_234;
        }
      }
      else
      {
LABEL_230:
        if (!v78)
          goto LABEL_233;
      }
      if (*(_DWORD *)v78 == 1)
        WTF::fastFree(v78, v96);
      else
        --*(_DWORD *)v78;
      goto LABEL_233;
    }
    if (v97)
    {
      v102 = *(_QWORD *)(*(_QWORD *)(v85 + 88) + 40);
      v103 = (_BYTE *)(v102 + 388);
      v104 = (_BYTE *)(v102 + 376);
      if ((_BYTE)v76)
        v104 = v103;
      if (!*v104 && (v104[8] & 0xF7) == 3)
      {
        if ((_BYTE)v76)
          v135 = WebCore::RenderBox::contentLogicalHeight((WebCore::RenderBox *)v85);
        else
          v135 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v85);
        v107 = v135 & 0xFFFFFF00;
        v105 = v135;
        v106 = 0x100000000;
      }
      else
      {
        v105 = 0;
        v106 = 0;
        v107 = 0;
      }
      v108 = WebCore::RenderGrid::gridGap((WebCore::RenderElement *)v85, v76, v106 | v107 | v105);
      v109 = *(_QWORD *)(*(_QWORD *)(v101 + 88) + 40);
      v110 = (_BYTE *)(v109 + 388);
      v111 = (_BYTE *)(v109 + 376);
      if ((_BYTE)v76)
        v111 = v110;
      if (!*v111 && (v111[8] & 0xF7) == 3)
      {
        if ((_BYTE)v76)
          v136 = WebCore::RenderBox::contentLogicalHeight((WebCore::RenderBox *)v101);
        else
          v136 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v101);
        v114 = v136 & 0xFFFFFF00;
        v112 = v136;
        v113 = 0x100000000;
      }
      else
      {
        v112 = 0;
        v113 = 0;
        v114 = 0;
      }
      v115 = WebCore::RenderGrid::gridGap((WebCore::RenderElement *)v101, v76, v113 | v114 | v112);
      v116 = v108 - v115;
      if (__OFSUB__(v108, v115))
        v116 = (v108 >> 31) + 0x7FFFFFFF;
      v117 = __OFADD__(v75, v116 / 2);
      v118 = v75 + v116 / 2;
      if (v117)
        v75 = (v75 >> 31) + 0x7FFFFFFF;
      else
        v75 = v118;
    }
    if (v99 != (_DWORD)v73)
    {
      v119 = *(_QWORD *)(*(_QWORD *)(v85 + 88) + 40);
      v120 = (_BYTE *)(v119 + 388);
      v121 = (_BYTE *)(v119 + 376);
      if ((_BYTE)v76)
        v121 = v120;
      if (!*v121 && (v121[8] & 0xF7) == 3)
      {
        if ((_BYTE)v76)
          v137 = WebCore::RenderBox::contentLogicalHeight((WebCore::RenderBox *)v85);
        else
          v137 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v85);
        v124 = v137 & 0xFFFFFF00;
        v122 = v137;
        v123 = 0x100000000;
      }
      else
      {
        v122 = 0;
        v123 = 0;
        v124 = 0;
      }
      v125 = WebCore::RenderGrid::gridGap((WebCore::RenderElement *)v85, v76, v123 | v124 | v122);
      v126 = *(_QWORD *)(*(_QWORD *)(v101 + 88) + 40);
      v127 = (_BYTE *)(v126 + 388);
      v128 = (_BYTE *)(v126 + 376);
      if ((_BYTE)v76)
        v128 = v127;
      if (!*v128 && (v128[8] & 0xF7) == 3)
      {
        if ((_BYTE)v76)
          v138 = WebCore::RenderBox::contentLogicalHeight((WebCore::RenderBox *)v101);
        else
          v138 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v101);
        v131 = v138 & 0xFFFFFF00;
        v129 = v138;
        v130 = 0x100000000;
      }
      else
      {
        v129 = 0;
        v130 = 0;
        v131 = 0;
      }
      v132 = WebCore::RenderGrid::gridGap((WebCore::RenderElement *)v101, v76, v130 | v131 | v129);
      v133 = v125 - v132;
      if (__OFSUB__(v125, v132))
        v133 = (v125 >> 31) + 0x7FFFFFFF;
      v117 = __OFADD__(v75, v133 / 2);
      v134 = v75 + v133 / 2;
      if (v117)
        v75 = (v75 >> 31) + 0x7FFFFFFF;
      else
        v75 = v134;
    }
    if (((*(_DWORD *)(v101 + 20) & 0x1000) == 0) != ((*(_DWORD *)(v85 + 20) & 0x1000) == 0))
      LOBYTE(v76) = v76 == 0;
    WebCore::AncestorSubgridIterator::operator++((uint64_t)&v189, v96);
  }
  v86 = v189;
  if (v189)
    v86 = (WTF *)*((_QWORD *)v189 + 1);
  if (v78)
    v87 = (WTF *)*((_QWORD *)v78 + 1);
  else
    v87 = 0;
  if (v86 != v87)
    goto LABEL_140;
  if (v181 && BYTE1(v191))
  {
    if (v191 == v178)
      goto LABEL_286;
    goto LABEL_140;
  }
  if ((v181 != 0) != (BYTE1(v191) != 0))
  {
LABEL_140:
    if (v190)
      v85 = v190[1];
    else
      v85 = 0;
    goto LABEL_143;
  }
LABEL_286:
  if (v78)
  {
    if (*(_DWORD *)v78 == 1)
    {
      WTF::fastFree(v78, v77);
      v84 = (WTF *)v190;
    }
    else
    {
      --*(_DWORD *)v78;
    }
  }
  v190 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 1)
      WTF::fastFree(v84, v77);
    else
      --*(_DWORD *)v84;
  }
  v165 = v189;
  v189 = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 1)
      WTF::fastFree(v165, v77);
    else
      --*(_DWORD *)v165;
  }
  if (!v185[1])
  {
LABEL_298:
    if (!v78)
      goto LABEL_234;
    goto LABEL_299;
  }
  if (*(_DWORD *)v185[1] != 1)
  {
    --*(_DWORD *)v185[1];
    goto LABEL_298;
  }
  WTF::fastFree(v185[1], v77);
  if (v78)
  {
LABEL_299:
    if (*(_DWORD *)v78 == 1)
      WTF::fastFree(v78, v77);
    else
      --*(_DWORD *)v78;
  }
LABEL_234:
  v69 = v177;
  v71 = v176;
  v72 = v175;
LABEL_235:
  v141 = v69 + v75;
  if (__OFADD__(v69, v75))
    v141 = (v69 >> 31) + 0x7FFFFFFF;
  if (v72 > v141)
    v141 = v72;
  v142 = v141 & ~(v141 >> 31);
  *(_DWORD *)(v71 + 8) = v142;
  v143 = *(_DWORD *)(v71 + 12);
  if (v143 != -64 && v143 < v142)
    *(_DWORD *)(v71 + 12) = v142;
  WebCore::GridIterator::createForSubgrid(v180, *(_QWORD *)(v183 + 24), v179, (uint64_t)&v189);
  v187 = 0u;
  memset(v188, 0, sizeof(v188));
  *(_OWORD *)v185 = 0u;
  v186 = 0u;
  if (WebCore::RenderGrid::isMasonry(*(WebCore::RenderGrid **)(v182 + 136)))
  {
    while (1)
    {
      v144 = *((_DWORD *)v189 + 25);
      if ((_BYTE)v190)
      {
        if (!v144)
          break;
        v145 = *(_DWORD *)(*((_QWORD *)v189 + 11) + 12);
        v146 = &v191;
      }
      else
      {
        v146 = (unsigned int *)&v190 + 1;
        v145 = *((_DWORD *)v189 + 25);
      }
      v147 = *v146;
      if (*v146 >= v145)
        break;
      {
        WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell = (uint64_t)&unk_1EE2F9300;
        qword_1EE2F92F8 = 1;
      }
      if (!HIDWORD(v190))
        goto LABEL_250;
      if (v144 <= HIDWORD(v190))
      {
LABEL_362:
        __break(0xC471u);
        JUMPOUT(0x19633C8E8);
      }
      v148 = *((_QWORD *)v189 + 11);
      if (*(_DWORD *)(v148 + 16 * HIDWORD(v190) + 12) <= v191)
      {
        v150 = &WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell;
      }
      else
      {
LABEL_250:
        if (v144 <= HIDWORD(v190))
        {
LABEL_360:
          __break(0xC471u);
          JUMPOUT(0x19633C8D8);
        }
        v148 = *((_QWORD *)v189 + 11);
        v149 = v148 + 16 * HIDWORD(v190);
        if (*(_DWORD *)(v149 + 12) <= v191)
        {
LABEL_361:
          __break(0xC471u);
          JUMPOUT(0x19633C8E0);
        }
        v150 = (uint64_t *)(*(_QWORD *)v149 + 24 * v191);
      }
      v151 = v192;
      if (*((unsigned int *)v150 + 3) <= (unint64_t)v192)
      {
        v192 = 0;
        *v146 = v147 + 1;
        if (v147 + 1 >= v145)
          break;
        v152 = v145 - 1;
        while (1)
        {
          if (!HIDWORD(v190))
            goto LABEL_382;
          if (v144 <= HIDWORD(v190))
            goto LABEL_362;
          if (*(_DWORD *)(v148 + 16 * HIDWORD(v190) + 12) <= v191)
          {
            v150 = &WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell;
          }
          else
          {
LABEL_382:
            if (v144 <= HIDWORD(v190))
              goto LABEL_360;
            v153 = v148 + 16 * HIDWORD(v190);
            if (*(_DWORD *)(v153 + 12) <= v191)
              goto LABEL_361;
            v150 = (uint64_t *)(*(_QWORD *)v153 + 24 * v191);
          }
          if (*((_DWORD *)v150 + 3))
            break;
          v192 = 0;
          *v146 = v147 + 2;
          if (v152 == ++v147)
            goto LABEL_277;
        }
        v151 = 0;
      }
      v192 = v151 + 1;
      v154 = *(_QWORD *)(*v150 + 8 * v151);
      if (!v154)
        break;
      v155 = *(WebCore::RenderElement **)(v154 + 8);
      if (!v155)
        break;
      ++*((_DWORD *)v155 + 4);
      WebCore::GridPositionsResolver::resolveGridPositionsFromStyle(*(WebCore::GridPositionsResolver **)(v182 + 136), v155, (WTF::StringImpl *)*(unsigned __int8 *)(v182 + 120));
      if (v156 == 2)
        WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>((uint64_t)v185, v155, (uint64_t)v184);
      v157 = *((_DWORD *)v155 + 4);
      if (!v157)
      {
        __break(0xC471u);
        JUMPOUT(0x19633C6F0);
      }
      *((_DWORD *)v155 + 4) = v157 - 1;
    }
  }
LABEL_277:
  WebCore::GridTrackSizingAlgorithm::accumulateIntrinsicSizesForTrack(v182, *(_QWORD *)(v183 + 40), **(unsigned int **)(v183 + 16), &v189, *(_QWORD *)(v183 + 56), *(_QWORD *)(v183 + 64), *(_QWORD *)v183, v185, v69);
  WebCore::GridTrackSizingAlgorithm::MasonryIndefiniteItems::~MasonryIndefiniteItems((WebCore::GridTrackSizingAlgorithm::MasonryIndefiniteItems *)v185, v158);
  v159 = *(_DWORD *)(a2 + 16);
  if (!v159)
  {
    __break(0xC471u);
    JUMPOUT(0x19633C610);
  }
  *(_DWORD *)(a2 + 16) = v159 - 1;
}

unsigned int *WebCore::GridTrackSizingAlgorithm::resolveIntrinsicTrackSizes(WebCore::GridTrackSizingAlgorithm *this)
{
  WebCore::GridTrackSizingAlgorithm *v1;
  uint64_t *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  WebCore::RenderBox **v15;
  char *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WebCore::RenderBox **v21;
  uint64_t v22;
  WebCore::RenderBox **v23;
  WebCore::RenderBox *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int **v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int **v36;
  uint64_t v37;
  WTF **v38;
  int v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  double v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  double v47;
  double v48;
  unint64_t v49;
  unsigned int *v50;
  double v51;
  int v52;
  unsigned int v53;
  int v54;
  BOOL v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int *v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int **v70;
  uint64_t v71;
  unsigned int v72;
  __int16 v73;
  int v74;
  int v75;
  BOOL v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  WTF *v80;
  uint64_t v81;
  void *v82;
  WTF *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int **v93;
  unsigned int **v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  WTF *v98;
  WTF *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  int v107;
  int v108;
  int v109;
  WTF *v111;
  WTF *v112;
  char *v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  WebCore::RenderBox **v118;
  unint64_t v119;
  unsigned int v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int **v128;
  unsigned int **v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  WTF *v133;
  WTF *v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  int v142;
  int v143;
  int v144;
  WTF *v146;
  WTF *v147;
  char *v148;
  _DWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD *v152;
  WebCore::RenderBox **v153;
  WebCore::RenderBox *v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int **v163;
  unsigned int **v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int v167;
  WTF *v168;
  WTF *v169;
  unsigned int *v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int *v176;
  int v177;
  int v178;
  int v179;
  WTF *v181;
  WTF *v182;
  char *v183;
  unsigned int *v184;
  uint64_t v185;
  uint64_t v186;
  _DWORD *v187;
  WebCore::RenderBox **v188;
  unint64_t v189;
  unsigned int v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  unsigned int **v197;
  unsigned int **v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int v201;
  WTF *v202;
  WTF *v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  int *v212;
  int v213;
  int v214;
  uint64_t v215;
  int v216;
  int v217;
  int v218;
  int v219;
  WTF *v220;
  WTF *v221;
  char *v222;
  unsigned int *v223;
  uint64_t v224;
  uint64_t v225;
  _DWORD *v226;
  WebCore::RenderBox *v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  unsigned int v234;
  unsigned int **v235;
  unsigned int **v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int v239;
  WTF *v240;
  WTF *v241;
  unsigned int *v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  int v251;
  int v252;
  uint64_t v253;
  int v254;
  int *v255;
  int v256;
  int v257;
  WTF *v258;
  uint64_t *v259;
  WTF *v260;
  uint64_t v261;
  unsigned int *v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  int *v267;
  int v268;
  uint64_t v269;
  int v270;
  int v271;
  int v272;
  int v274;
  void *v275;
  uint64_t v276;
  WTF *v277;
  unsigned int *result;
  uint64_t v279;
  WTF **v280;
  WTF *v281;
  WTF *v282;
  unsigned int *v283;
  unsigned int v284;
  unsigned int v285;
  WTF *v286;
  unsigned int *v287;
  unsigned int v288;
  unsigned int v289;
  WTF *v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int v293;
  WTF *v294;
  unsigned int *v295;
  unsigned int v296;
  unsigned int v297;
  WTF *v298;
  unsigned int *v299;
  unsigned int v300;
  unsigned int v301;
  WTF *v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int v305;
  WTF *v306;
  unsigned int *v307;
  unsigned int v308;
  unsigned int v309;
  WTF *v310;
  unsigned int *v311;
  unsigned int v312;
  unsigned int v313;
  WTF *v314;
  unsigned int *v315;
  unsigned int v316;
  unsigned int v317;
  WTF *v318;
  unsigned int *v319;
  unsigned int v320;
  unsigned int v321;
  WTF *v322;
  __int128 *v323;
  __int128 *v324;
  __int128 *v325;
  unint64_t v326;
  unsigned int v327;
  unint64_t v328;
  char *v329;
  unsigned int v330;
  __int128 *v331;
  WebCore::GridTrackSizingAlgorithm *v332;
  char *v333;
  _DWORD *v334;
  uint64_t v335;
  uint64_t v336;
  _DWORD *v337;
  WTF *v338;
  uint64_t v339;
  WTF *v340;
  unsigned int v341;
  WebCore::GridTrackSizingAlgorithm *v342;
  WebCore::RenderBox **v343;
  unint64_t v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  int v349;
  int v350;
  uint64_t v351;
  _WORD *v352;
  __int16 v353;
  uint64_t v354;
  unsigned int v355;
  WTF *v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  WTF *v360;
  uint64_t v361;
  WTF *v362;
  unsigned int v363;
  uint64_t v365;
  uint64_t v366;
  unsigned int v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  WTF *v371;
  WTF *v372;
  uint64_t v373;
  WTF *v374;
  unsigned int v375;
  WTF *v376;
  unsigned int *v377;
  unsigned int v378;
  unsigned int v379;
  WTF *v380;
  unsigned int *v381;
  unsigned int v382;
  unsigned int v383;
  unsigned int *v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int *v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int *v390;
  uint64_t v391;
  int v392;
  int v393;
  unsigned int v394;
  uint64_t v395;
  int v396;
  unsigned int *v397;
  uint64_t v398;
  uint64_t v399;
  double v400;
  int v401;
  unsigned int v402;
  int v403;
  int v404;
  int v405;
  unsigned int v406;
  int v407;
  int v408;
  uint64_t v409;
  WebCore::RenderBox **v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  unsigned int **v414;
  unsigned int **v415;
  unsigned int *v416;
  unsigned int v417;
  unsigned int v418;
  unsigned int **v419;
  unsigned int **v420;
  unsigned int *v421;
  unsigned int v422;
  unsigned int v423;
  BOOL v424;
  int v425;
  int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  int *v430;
  int v431;
  int v432;
  int v433;
  WebCore::GridTrackSizingAlgorithm *v435;
  char *v436;
  _DWORD *v437;
  uint64_t v438;
  uint64_t v439;
  _DWORD *v440;
  __int128 *v441;
  unint64_t v442;
  unsigned int v443;
  unsigned int v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  unsigned int v449;
  unsigned int **v450;
  unsigned int **v451;
  unsigned int *v452;
  unsigned int v453;
  unsigned int v454;
  WTF *v455;
  WTF *v456;
  unsigned int *v457;
  unsigned int v458;
  unsigned int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int *v463;
  int v464;
  int v465;
  int v466;
  WTF *v468;
  WTF *v469;
  char *v470;
  _DWORD *v471;
  uint64_t v472;
  uint64_t v473;
  _DWORD *v474;
  __int128 *v475;
  unint64_t v476;
  unsigned int v477;
  unsigned int v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  unsigned int v483;
  unsigned int **v484;
  unsigned int **v485;
  unsigned int *v486;
  unsigned int v487;
  unsigned int v488;
  WTF *v489;
  WTF *v490;
  unsigned int *v491;
  unsigned int v492;
  unsigned int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int *v497;
  int v498;
  int v499;
  int v500;
  WTF *v502;
  WTF *v503;
  char *v504;
  unsigned int *v505;
  uint64_t v506;
  uint64_t v507;
  _DWORD *v508;
  uint64_t v509;
  __int128 *v510;
  unsigned int v511;
  unint64_t v512;
  unint64_t v513;
  unsigned int v514;
  unsigned int v515;
  uint64_t v516;
  int v517;
  unsigned int v518;
  uint64_t v519;
  WTF *v520;
  uint64_t v521;
  unsigned int *v522;
  unsigned int v523;
  unsigned int v524;
  unsigned int v525;
  unint64_t v526;
  unint64_t v527;
  unint64_t v528;
  WTF *v529;
  unsigned int *v530;
  unsigned int v531;
  unsigned int v532;
  unsigned int v533;
  uint64_t v534;
  WTF *v535;
  uint64_t v536;
  unsigned int *v537;
  unsigned int v538;
  unsigned int v539;
  unsigned int v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t v543;
  WTF *v544;
  unsigned int *v545;
  unsigned int v546;
  unsigned int v547;
  unsigned int v548;
  uint64_t v549;
  int v550;
  int v551;
  unsigned int v552;
  int v553;
  unsigned int **v554;
  uint64_t v555;
  uint64_t v556;
  unsigned int **v557;
  _DWORD *v558;
  int v559;
  unsigned int *v560;
  unsigned int *v561;
  uint64_t v562;
  int v563;
  unsigned int **v564;
  unsigned int **v565;
  unsigned int *v566;
  unsigned int v567;
  unsigned int v568;
  WTF *v569;
  WTF *v570;
  unsigned int *v571;
  unsigned int v572;
  unsigned int v573;
  uint64_t v574;
  uint64_t v575;
  unsigned int v576;
  uint64_t v577;
  uint64_t v578;
  int *v579;
  int v580;
  int v581;
  uint64_t v582;
  int v583;
  int v584;
  int v585;
  int v586;
  WTF *v587;
  WTF *v588;
  char *v589;
  unsigned int *v590;
  uint64_t v591;
  uint64_t v592;
  _DWORD *v593;
  WTF *v594;
  unint64_t v595;
  WTF *v596;
  unsigned int v597;
  WebCore::GridTrackSizingAlgorithm *v598;
  unsigned int v599;
  unsigned int v600;
  uint64_t v601;
  int v602;
  unsigned int v603;
  int v604;
  uint64_t v605;
  unsigned int v606;
  unint64_t v607;
  unint64_t v608;
  unint64_t v609;
  WTF *v610;
  uint64_t v611;
  WTF *v612;
  unsigned int v613;
  uint64_t v614;
  uint64_t v615;
  unsigned int v616;
  unint64_t v617;
  unint64_t v618;
  unint64_t v619;
  WTF *v620;
  uint64_t v621;
  WTF *v622;
  uint64_t v623;
  unsigned int v624;
  unsigned int *v625;
  unsigned int v626;
  unsigned int v627;
  unsigned int *v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int *v631;
  unsigned int v632;
  unsigned int v633;
  unsigned int *v634;
  unsigned int v635;
  unsigned int v636;
  unsigned int *v637;
  uint64_t v638;
  int v639;
  int v640;
  unsigned int v641;
  uint64_t v642;
  int v643;
  _DWORD *v644;
  int v645;
  int v646;
  unsigned int *v647;
  uint64_t v648;
  uint64_t v649;
  double v650;
  int v651;
  _BOOL4 v653;
  int v654;
  uint64_t v655;
  unsigned int v656;
  int v657;
  int v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  int v662;
  unsigned int **v663;
  unsigned int **v664;
  unsigned int *v665;
  unsigned int v666;
  unsigned int v667;
  unsigned int **v668;
  unsigned int *v669;
  unsigned int v670;
  unsigned int v671;
  WTF *v672;
  int v673;
  WTF *v674;
  int v675;
  uint64_t v676;
  uint64_t v677;
  unsigned int v678;
  uint64_t v679;
  uint64_t v680;
  _BYTE *v681;
  int v682;
  int v683;
  uint64_t v684;
  int v685;
  int *v686;
  int v687;
  int v688;
  unsigned int *v689;
  unsigned int v690;
  unsigned int v691;
  unsigned int **v692;
  unsigned int *v693;
  unsigned int v694;
  unsigned int v695;
  unsigned int **v696;
  unsigned int *v697;
  unsigned int v698;
  unsigned int v699;
  unsigned int *v700;
  unsigned int v701;
  unsigned int v702;
  unsigned int *v703;
  unsigned int v704;
  unsigned int v705;
  unsigned int *v706;
  unsigned int v707;
  unsigned int v708;
  unsigned int *v709;
  unsigned int v710;
  unsigned int v711;
  unsigned int *v712;
  unsigned int v713;
  unsigned int v714;
  unsigned int *v715;
  unsigned int v716;
  unsigned int v717;
  unsigned int **v718;
  unsigned int *v719;
  unsigned int v720;
  unsigned int v721;
  unsigned int **v722;
  unsigned int **v723;
  unsigned int **v724;
  WTF *v725;
  WTF *v726;
  WTF *v727;
  WTF *v728;
  WTF *v729;
  WTF *v730;
  unsigned int **v731;
  int v732;
  WebCore::RenderBox **v733;
  WebCore::RenderBox **v734;
  uint64_t v735;
  int v736;
  int v737;
  unsigned int v738;
  int v739;
  WTF **v740;
  __int16 v741;
  int v742;
  int v743;
  BOOL v744;
  int v745;
  uint64_t v746;
  int v747;
  int v748;
  unsigned int v749;
  int v750;
  uint64_t *v751;
  uint64_t v752;
  int v753;
  int v754;
  unsigned int v755;
  int v756;
  WTF **v757;
  __int16 v758;
  int v759;
  int v760;
  BOOL v761;
  uint64_t v762;
  int v763;
  int v764;
  unsigned int v765;
  int v766;
  uint64_t *v767;
  uint64_t v768;
  int v769;
  int v770;
  unsigned int v771;
  int v772;
  uint64_t *v773;
  WebCore::RenderBox **v774;
  uint64_t v775;
  int v776;
  int v777;
  unsigned int v778;
  int v779;
  uint64_t *v780;
  _QWORD *v781;
  unsigned int **v782;
  unsigned int *v783;
  unsigned int *v784;
  unsigned int v785;
  unsigned int v786;
  WTF *v788;
  uint64_t v789;
  WTF *v790;
  unint64_t v791;
  WTF *v792;
  WTF *v793;
  WTF *v794;
  uint64_t v795;
  WTF *v796;
  unsigned int *v797;
  unsigned int *v798;
  unsigned int v799;
  unsigned int v800;
  unsigned int *v801;
  unsigned int *v802;
  unsigned int v803;
  unsigned int v804;
  unsigned int **v805;
  unsigned int **v806;
  unsigned int *v807;
  unsigned int *v808;
  unsigned int v809;
  unsigned int v810;
  unsigned int **v811;
  unsigned int **v812;
  unsigned int *v813;
  unsigned int *v814;
  unsigned int v815;
  unsigned int v816;
  unsigned int *v817;
  unsigned int *v818;
  unsigned int v819;
  unsigned int v820;
  unsigned int *v821;
  unsigned int *v822;
  unsigned int v823;
  unsigned int v824;
  unsigned int *v825;
  uint64_t v826;
  double v827;
  int v828;
  uint64_t v829;
  unsigned int v830;
  int v831;
  int v832;
  unint64_t v833;
  unsigned int *v834;
  uint64_t v835;
  double v836;
  int v837;
  unsigned int v838;
  int v839;
  int v840;
  signed int v841;
  signed int v842;
  int v843;
  signed int v845;
  signed int v846;
  int v847;
  unsigned int **v848;
  WTF *v849;
  unsigned int v850;
  unsigned int v851;
  unint64_t v852;
  unsigned int **v853;
  unsigned int **v854;
  char *v855;
  __int128 *v856;
  WebCore::RenderBox **v857;
  uint64_t v858;
  unint64_t v859;
  unsigned int v860;
  char *v861;
  WTF *v862;
  int v863;
  unsigned int v864;
  int v865;
  unsigned int **v866;
  _QWORD *v867;
  _QWORD *v868;
  uint64_t *v869;
  char *v870;
  int v871;
  unsigned int v872;
  int v873;
  _QWORD *v874;
  _QWORD *v875;
  char *v876;
  uint64_t *v877;
  WebCore::RenderBox **v878;
  char *v879;
  WebCore::RenderBox **v880;
  WebCore::RenderBox **v881;
  __int128 *v882;
  WebCore::RenderBox **v883;
  unsigned int v884;
  unsigned int v885;
  unsigned int v886;
  WTF *v887;
  WTF *v888;
  unsigned int v889;
  unsigned int v890;
  uint64_t *v891;
  WebCore::GridTrackSizingAlgorithm *v892;
  WTF *v893;
  uint64_t v894;
  unsigned int v895;
  int v896;
  _OWORD v897[5];
  _QWORD v898[2];
  WebCore::RenderBox **v899;
  uint64_t v900;
  __int128 *v901;
  uint64_t v902;
  int v903;
  unsigned int **v904;
  uint64_t v905;

  v1 = this;
  if (*((_BYTE *)this + 120))
    v2 = (uint64_t *)((char *)this + 56);
  else
    v2 = (uint64_t *)((char *)this + 40);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 18) + 56))(*((_QWORD *)this + 18)))
    return WebCore::GridTrackSizingAlgorithm::resolveIntrinsicTrackSizes(void)::$_0::operator()(*((unsigned int **)v1 + 9), *((_DWORD *)v1 + 21), v2);
  v901 = 0;
  v902 = 0;
  v899 = 0;
  v900 = 0;
  v898[0] = 0;
  v898[1] = 0;
  memset(v897, 0, 76);
  v3 = *(_QWORD *)(*((_QWORD *)v1 + 16) + 104);
  v869 = v2;
  v892 = v1;
  if (v3 && *(_DWORD *)(v3 - 12))
  {
    if (WebCore::RenderGrid::isMasonry(*((WebCore::RenderGrid **)v1 + 17)))
      WebCore::GridTrackSizingAlgorithm::resolveIntrinsicTrackSizes(void)::$_1::operator()((uint64_t)v1, (int32x2_t *)v897);
    v5 = *((unsigned int *)v1 + 21);
    if ((_DWORD)v5)
    {
      v6 = (unsigned int *)*((_QWORD *)v1 + 9);
      v7 = 4 * v5;
      do
      {
        v8 = *v6;
        v9 = *((unsigned __int8 *)v1 + 120);
        v893 = (WTF *)*((_QWORD *)v1 + 16);
        LOBYTE(v894) = v9;
        if (v9)
          v10 = v8;
        else
          v10 = 0;
        if (v9)
          v11 = 0;
        else
          v11 = v8;
        HIDWORD(v894) = v10;
        v895 = v11;
        v896 = 0;
        if (*((_DWORD *)v2 + 3) <= v8)
        {
          __break(0xC471u);
          JUMPOUT(0x196340DC0);
        }
        WebCore::GridTrackSizingAlgorithm::accumulateIntrinsicSizesForTrack((uint64_t)v1, *v2 + 136 * v8, v8, (unsigned int *)&v893, (uint64_t)&v901, (uint64_t)&v899, (uint64_t)v898, (uint64_t)v897, 0);
        ++v6;
        v7 -= 4;
      }
      while (v7);
    }
    v12 = 126 - 2 * __clz(HIDWORD(v902));
    v13 = HIDWORD(v902) ? v12 : 0;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *,false>(v901, (__int128 *)((char *)v901 + 24 * HIDWORD(v902)), v13, 1, v4);
    if (HIDWORD(v902))
    {
      v323 = v901;
      v324 = (__int128 *)((char *)v901 + 24 * HIDWORD(v902));
      v876 = (char *)v1 + 40;
      v879 = (char *)v1 + 56;
      v856 = v324;
      do
      {
        v325 = v323;
        v326 = 0xAAAAAAAAAAAAAAABLL * (((char *)v324 - (char *)v323) >> 3);
        v327 = *((_DWORD *)v323 + 3) - *((_DWORD *)v323 + 2);
        do
        {
          v328 = v326 >> 1;
          v329 = (char *)v323 + 24 * (v326 >> 1);
          v330 = *((_DWORD *)v329 + 3) - *((_DWORD *)v329 + 2);
          v331 = (__int128 *)(v329 + 24);
          v326 += ~(v326 >> 1);
          if (v327 < v330)
            v326 = v328;
          else
            v323 = v331;
        }
        while (v326);
        v332 = v1;
        if (*((_BYTE *)v1 + 120))
          v333 = v879;
        else
          v333 = v876;
        v334 = (_DWORD *)*((_QWORD *)v332 + 9);
        v335 = *((unsigned int *)v332 + 21);
        if ((_DWORD)v335)
        {
          v336 = 4 * v335;
          v337 = v334;
          do
          {
            if (*((_DWORD *)v333 + 3) <= *v337)
            {
              __break(0xC471u);
              JUMPOUT(0x196340E60);
            }
            *(_DWORD *)(*(_QWORD *)v333 + 136 * *v337 + 16) = *(_DWORD *)(*(_QWORD *)v333
                                                                                        + 136 * *v337
                                                                                        + 8) & ~(*(int *)(*(_QWORD *)v333 + 136 * *v337 + 8) >> 31);
            ++v337;
            v336 -= 4;
          }
          while (v336);
        }
        v882 = v325;
        v338 = 0;
        if (v325 == v323)
        {
          v339 = 0;
          v340 = 0;
          v341 = 0;
          v342 = v892;
          goto LABEL_646;
        }
        v863 = 0;
        v339 = 0;
        v340 = 0;
        v871 = 0;
        v341 = 0;
        v343 = (WebCore::RenderBox **)v325;
        v855 = v333;
        do
        {
          v857 = v343;
          v344 = (unint64_t)v343[1];
          if (v341)
          {
            v414 = (unsigned int **)((char *)v340 + 8 * v341);
            v415 = (unsigned int **)v340;
            do
            {
              v416 = *v415;
              *v415 = 0;
              if (v416)
              {
                do
                {
                  v417 = __ldaxr(v416);
                  v418 = v417 - 1;
                }
                while (__stlxr(v418, v416));
                if (!v418)
                {
                  atomic_store(1u, v416);
                  v788 = v340;
                  v789 = v339;
                  v852 = v344;
                  WTF::fastFree((WTF *)v416, v14);
                  v344 = v852;
                  v339 = v789;
                  v340 = v788;
                }
              }
              ++v415;
            }
            while (v415 != v414);
          }
          if ((_DWORD)v339)
          {
            v419 = (unsigned int **)((char *)v338 + 8 * v339);
            v420 = (unsigned int **)v338;
            do
            {
              v421 = *v420;
              *v420 = 0;
              if (v421)
              {
                do
                {
                  v422 = __ldaxr(v421);
                  v423 = v422 - 1;
                }
                while (__stlxr(v423, v421));
                if (!v423)
                {
                  atomic_store(1u, v421);
                  v790 = v340;
                  v791 = v344;
                  WTF::fastFree((WTF *)v421, v14);
                  v344 = v791;
                  v340 = v790;
                }
              }
              ++v420;
            }
            while (v420 != v419);
          }
          v859 = HIDWORD(v344);
          if (HIDWORD(v344) == (_DWORD)v344)
          {
            v341 = 0;
            v339 = 0;
LABEL_620:
            v410 = v857;
            goto LABEL_617;
          }
          v850 = HIDWORD(v344) - v344;
          v345 = 0;
          v341 = 0;
          v346 = 0;
          v851 = v344;
          v347 = v344;
          do
          {
            if (*((_DWORD *)v333 + 3) <= v347)
            {
              __break(0xC471u);
              JUMPOUT(0x196340E68);
            }
            v348 = *(_QWORD *)v333 + 136 * v347;
            if (!*(_BYTE *)(v348 + 128))
            {
              __break(0xC471u);
              JUMPOUT(0x19633FC5CLL);
            }
            v349 = *(_DWORD *)(v348 + 8) & ~(*(int *)(v348 + 8) >> 31);
            v55 = __OFADD__(v346, v349);
            v350 = v346 + v349;
            if (v55)
              v350 = (v346 >> 31) + 0x7FFFFFFF;
            v860 = v350;
            v351 = *(_QWORD *)v333 + 136 * v347;
            v353 = *(_WORD *)(v351 + 120);
            v352 = (_WORD *)(v351 + 120);
            if ((v353 & 0x40) == 0)
              goto LABEL_554;
            v885 = v345;
            if (v341 == v871)
            {
              v356 = v338;
              v357 = v341 + ((unint64_t)v341 >> 2);
              if (v357 >= 0x10)
                v358 = v357 + 1;
              else
                v358 = 16;
              if (v358 <= (unint64_t)v341 + 1)
                v359 = v341 + 1;
              else
                v359 = v358;
              if (v359 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x196340ED8);
              }
              v360 = v340;
              v361 = WTF::fastMalloc((WTF *)(8 * v359));
              v362 = (WTF *)v361;
              if (v871)
              {
                v848 = (unsigned int **)v360;
                v874 = (_QWORD *)v361;
                do
                {
                  v797 = *v848;
                  *v848 = 0;
                  *v874 = v797;
                  v798 = *v848;
                  *v848 = 0;
                  if (v798)
                  {
                    do
                    {
                      v799 = __ldaxr(v798);
                      v800 = v799 - 1;
                    }
                    while (__stlxr(v800, v798));
                    if (!v800)
                    {
                      atomic_store(1u, v798);
                      WTF::fastFree((WTF *)v798, v14);
                    }
                  }
                  ++v874;
                  ++v848;
                }
                while (v848 != (unsigned int **)((char *)v360 + 8 * v341));
              }
              v871 = v359;
              if (v360)
              {
                v424 = v362 == v360;
                if (v362 == v360)
                  v362 = 0;
                v425 = v359;
                if (v424)
                  v425 = 0;
                v871 = v425;
                WTF::fastFree(v360, v14);
              }
              v340 = v362;
              v338 = v356;
              v354 = *(_QWORD *)v348;
              v333 = v855;
              v345 = v885;
              if (*(_QWORD *)v348)
                goto LABEL_532;
              v354 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v354 = 1;
              *(_QWORD *)(v354 + 8) = v348;
              v384 = *(unsigned int **)v348;
              *(_QWORD *)v348 = v354;
              if (!v384)
              {
                v340 = v362;
                v345 = v885;
                do
LABEL_532:
                  v363 = __ldaxr((unsigned int *)v354);
                while (__stlxr(v363 + 1, (unsigned int *)v354));
                goto LABEL_533;
              }
              do
              {
                v385 = __ldaxr(v384);
                v386 = v385 - 1;
              }
              while (__stlxr(v386, v384));
              v340 = v362;
              v345 = v885;
              if (!v386)
              {
                atomic_store(1u, v384);
                WTF::fastFree((WTF *)v384, v14);
                v345 = v885;
                v340 = v362;
              }
              v354 = *(_QWORD *)v348;
              if (*(_QWORD *)v348)
                goto LABEL_532;
            }
            else
            {
              v354 = *(_QWORD *)v348;
              if (*(_QWORD *)v348)
                goto LABEL_520;
              v376 = v340;
              v354 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v354 = 1;
              *(_QWORD *)(v354 + 8) = v348;
              v377 = *(unsigned int **)v348;
              *(_QWORD *)v348 = v354;
              if (!v377)
              {
                v340 = v376;
                v345 = v885;
                do
LABEL_520:
                  v355 = __ldaxr((unsigned int *)v354);
                while (__stlxr(v355 + 1, (unsigned int *)v354));
                goto LABEL_533;
              }
              do
              {
                v378 = __ldaxr(v377);
                v379 = v378 - 1;
              }
              while (__stlxr(v379, v377));
              v340 = v376;
              v345 = v885;
              if (!v379)
              {
                atomic_store(1u, v377);
                WTF::fastFree((WTF *)v377, v14);
                v345 = v885;
                v340 = v376;
              }
              v354 = *(_QWORD *)v348;
              if (*(_QWORD *)v348)
                goto LABEL_520;
            }
LABEL_533:
            *((_QWORD *)v340 + v341++) = v354;
            if ((*v352 & 9) != 0 && (*v352 & 0x80) != 0)
            {
              v365 = v345;
              if (v345 == v863)
              {
                v368 = v345 + ((unint64_t)v345 >> 2);
                if (v368 >= 0x10)
                  v369 = v368 + 1;
                else
                  v369 = 16;
                if (v369 <= (unint64_t)v345 + 1)
                  v370 = v345 + 1;
                else
                  v370 = v369;
                if (v370 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196340EE0);
                }
                v371 = v340;
                v372 = v338;
                v373 = WTF::fastMalloc((WTF *)(8 * v370));
                v374 = (WTF *)v373;
                if (v863)
                {
                  v849 = (WTF *)((char *)v338 + 8 * v365);
                  v867 = (_QWORD *)v373;
                  do
                  {
                    v801 = *(unsigned int **)v338;
                    *(_QWORD *)v338 = 0;
                    *v867 = v801;
                    v802 = *(unsigned int **)v338;
                    *(_QWORD *)v338 = 0;
                    if (v802)
                    {
                      do
                      {
                        v803 = __ldaxr(v802);
                        v804 = v803 - 1;
                      }
                      while (__stlxr(v804, v802));
                      if (!v804)
                      {
                        atomic_store(1u, v802);
                        WTF::fastFree((WTF *)v802, v14);
                      }
                    }
                    ++v867;
                    v338 = (WTF *)((char *)v338 + 8);
                  }
                  while (v338 != v849);
                }
                v863 = v370;
                if (v372)
                {
                  if (v374 == v372)
                    v338 = 0;
                  else
                    v338 = v374;
                  v426 = v370;
                  if (v374 == v372)
                    v426 = 0;
                  v863 = v426;
                  WTF::fastFree(v372, v14);
                }
                else
                {
                  v338 = v374;
                }
                v333 = v855;
                v366 = *(_QWORD *)v348;
                v340 = v371;
                v345 = v885;
                if (!*(_QWORD *)v348)
                {
                  v366 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v366 = 1;
                  *(_QWORD *)(v366 + 8) = v348;
                  v387 = *(unsigned int **)v348;
                  *(_QWORD *)v348 = v366;
                  if (v387)
                  {
                    do
                    {
                      v388 = __ldaxr(v387);
                      v389 = v388 - 1;
                    }
                    while (__stlxr(v389, v387));
                    v340 = v371;
                    v345 = v885;
                    if (!v389)
                    {
                      atomic_store(1u, v387);
                      WTF::fastFree((WTF *)v387, v14);
                      v345 = v885;
                      v340 = v371;
                    }
                    v366 = *(_QWORD *)v348;
                    if (!*(_QWORD *)v348)
                      goto LABEL_553;
                  }
                  else
                  {
                    v340 = v371;
                    v345 = v885;
                  }
                }
                do
                  v375 = __ldaxr((unsigned int *)v366);
                while (__stlxr(v375 + 1, (unsigned int *)v366));
              }
              else
              {
                v366 = *(_QWORD *)v348;
                if (*(_QWORD *)v348)
                  goto LABEL_1553;
                v380 = v340;
                v366 = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v366 = 1;
                *(_QWORD *)(v366 + 8) = v348;
                v381 = *(unsigned int **)v348;
                *(_QWORD *)v348 = v366;
                if (!v381)
                {
                  v340 = v380;
                  v345 = v885;
                  goto LABEL_539;
                }
                do
                {
                  v382 = __ldaxr(v381);
                  v383 = v382 - 1;
                }
                while (__stlxr(v383, v381));
                v340 = v380;
                v345 = v885;
                if (!v383)
                {
                  atomic_store(1u, v381);
                  WTF::fastFree((WTF *)v381, v14);
                  v345 = v885;
                  v340 = v380;
                }
                v366 = *(_QWORD *)v348;
                if (*(_QWORD *)v348)
                {
LABEL_1553:
                  do
LABEL_539:
                    v367 = __ldaxr((unsigned int *)v366);
                  while (__stlxr(v367 + 1, (unsigned int *)v366));
                }
              }
LABEL_553:
              *((_QWORD *)v338 + v365) = v366;
              ++v345;
            }
LABEL_554:
            v346 = v860;
            ++v347;
          }
          while (v347 != (_DWORD)v859);
          v886 = v345;
          v390 = (unsigned int *)v340;
          if (!v341)
          {
            v325 = v882;
            v339 = v345;
            goto LABEL_620;
          }
          v391 = 4;
          if (!*((_BYTE *)v892 + 120))
            v391 = 12;
          v392 = WebCore::RenderGrid::guttersSize(*((WebCore::RenderElement **)v892 + 17), *((unsigned __int8 *)v892 + 120), v851, v850, *(_QWORD *)((char *)v892 + v391));
          v393 = v860 + v392;
          if (__OFADD__(v860, v392))
            v393 = (v860 >> 31) + 0x7FFFFFFF;
          v394 = WebCore::GridTrackSizingAlgorithmStrategy::minSizeForChild(*((WebCore::GridTrackSizingAlgorithmStrategy **)v892 + 18), *v857);
          v395 = 0;
          if (__OFSUB__(v394, v393))
            v396 = (v394 >> 31) + 0x7FFFFFFF;
          else
            v396 = v394 - v393;
          v340 = (WTF *)v390;
          v14 = &v390[2 * v341];
          do
          {
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v390[v395] + 8) + 20) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v390[v395]
                                                                                                  + 8)
                                                                                      + 8) & ~(*(int *)(*(_QWORD *)(*(_QWORD *)&v390[v395] + 8) + 8) >> 31);
            v395 += 2;
          }
          while (2 * v341 != v395);
          if (v396 >= 1)
          {
            v893 = (WTF *)WebCore::sortByGridTrackGrowthPotential;
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,false>(v390, (WTF **)v14, (uint64_t (**)(unsigned int **, unsigned int **))&v893, 126 - 2 * __clz(v341), 1);
            v340 = (WTF *)v390;
            v397 = v390;
            v398 = v341;
            do
            {
              v399 = *(_QWORD *)v397;
              if (*(_QWORD *)v397)
                v399 = *(_QWORD *)(v399 + 8);
              v400 = (double)v396 * 0.015625 / (double)v398 * 64.0;
              if (v400 >= 2147483650.0)
              {
                v401 = 0x7FFFFFFF;
              }
              else if (v400 <= -2147483650.0)
              {
                v401 = 0x80000000;
              }
              else
              {
                v401 = (int)v400;
              }
              v402 = *(_DWORD *)(v399 + 12);
              if (v402 != -64 && !*(_BYTE *)(v399 + 32))
              {
                v403 = *(_DWORD *)(v399 + 8) & ~(*(int *)(v399 + 8) >> 31);
                v55 = __OFSUB__(v402, v403);
                v404 = v402 - v403;
                v405 = (v402 >> 31) + 0x7FFFFFFF;
                if (!v55)
                  v405 = v404;
                if (v405 < v401)
                  v401 = v405;
              }
              v406 = *(_DWORD *)(v399 + 20);
              v55 = __OFADD__(v406, v401);
              v407 = v406 + v401;
              v408 = (v406 >> 31) + 0x7FFFFFFF;
              if (!v55)
                v408 = v407;
              *(_DWORD *)(v399 + 20) = v408;
              if (__OFSUB__(v396, v401))
                v396 = (v396 >> 31) + 0x7FFFFFFF;
              else
                v396 -= v401;
              v397 += 2;
              --v398;
            }
            while (v398);
            if (v396 >= 1)
            {
              if (v886)
                v833 = v886;
              else
                v833 = v341;
              if (v886)
                v834 = (unsigned int *)v338;
              else
                v834 = v390;
              v893 = (WTF *)WebCore::sortByGridTrackGrowthPotential;
              std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,false>(v834, (WTF **)&v834[2 * v833], (uint64_t (**)(unsigned int **, unsigned int **))&v893, 126 - 2 * __clz(v833), 1);
              do
              {
                v835 = *(_QWORD *)v834;
                if (*(_QWORD *)v834)
                  v835 = *(_QWORD *)(v835 + 8);
                v836 = (double)v396 * 0.015625 / (double)v833 * 64.0;
                if (v836 >= 2147483650.0)
                {
                  v837 = 0x7FFFFFFF;
                }
                else if (v836 <= -2147483650.0)
                {
                  v837 = 0x80000000;
                }
                else
                {
                  v837 = (int)v836;
                }
                v838 = *(_DWORD *)(v835 + 20);
                v55 = __OFADD__(v838, v837);
                v839 = v838 + v837;
                v840 = (v838 >> 31) + 0x7FFFFFFF;
                if (!v55)
                  v840 = v839;
                *(_DWORD *)(v835 + 20) = v840;
                if (__OFSUB__(v396, v837))
                  v396 = (v396 >> 31) + 0x7FFFFFFF;
                else
                  v396 -= v837;
                v834 += 2;
                --v833;
                v333 = v855;
                v340 = (WTF *)v390;
              }
              while (v833);
            }
          }
          v409 = 0;
          v325 = v882;
          v339 = v886;
          v410 = v857;
          do
          {
            v411 = *(_QWORD *)((char *)v340 + v409);
            if (v411)
            {
              v411 = *(_QWORD *)(v411 + 8);
              v412 = v411 + 16;
              v413 = *(_DWORD *)(v411 + 16);
            }
            else
            {
              v412 = 16;
              v413 = MEMORY[0x10];
            }
            if (v413 == -64)
            {
              v412 = v411 + 20;
            }
            else if (v413 < *(_DWORD *)(v411 + 20))
            {
              v412 = v411 + 20;
            }
            *(_DWORD *)(v411 + 16) = *(_DWORD *)v412;
            v409 += 8;
          }
          while (8 * v341 != v409);
LABEL_617:
          v343 = v410 + 3;
        }
        while (v343 != (WebCore::RenderBox **)v323);
        v342 = v892;
        v334 = (_DWORD *)*((_QWORD *)v892 + 9);
LABEL_646:
        v427 = *((unsigned int *)v342 + 21);
        if ((_DWORD)v427)
        {
          v428 = 4 * v427;
          do
          {
            if (*((_DWORD *)v333 + 3) <= *v334)
            {
              __break(0xC471u);
              JUMPOUT(0x196340E70);
            }
            v429 = *(_QWORD *)v333 + 136 * *v334;
            v432 = *(_DWORD *)(v429 + 12);
            v431 = *(_DWORD *)(v429 + 16);
            v430 = (int *)(v429 + 12);
            *(v430 - 1) = v431;
            v433 = v431 & ~(v431 >> 31);
            if (v432 != -64 && v432 < v433)
              *v430 = v433;
            ++v334;
            v428 -= 4;
          }
          while (v428);
        }
        v435 = v892;
        if (v341)
        {
          v723 = (unsigned int **)((char *)v340 + 8 * v341);
          v692 = (unsigned int **)v340;
          do
          {
            v689 = *v692;
            *v692 = 0;
            if (v689)
            {
              do
              {
                v690 = __ldaxr(v689);
                v691 = v690 - 1;
              }
              while (__stlxr(v691, v689));
              if (!v691)
              {
                atomic_store(1u, v689);
                v794 = v340;
                v795 = v339;
                WTF::fastFree((WTF *)v689, v14);
                v339 = v795;
                v340 = v794;
              }
            }
            ++v692;
          }
          while (v692 != v723);
        }
        if (v340)
        {
          v732 = v339;
          WTF::fastFree(v340, v14);
          LODWORD(v339) = v732;
        }
        if ((_DWORD)v339)
        {
          v724 = (unsigned int **)((char *)v338 + 8 * v339);
          v696 = (unsigned int **)v338;
          do
          {
            v693 = *v696;
            *v696 = 0;
            if (v693)
            {
              do
              {
                v694 = __ldaxr(v693);
                v695 = v694 - 1;
              }
              while (__stlxr(v695, v693));
              if (!v695)
              {
                atomic_store(1u, v693);
                WTF::fastFree((WTF *)v693, v14);
              }
            }
            ++v696;
          }
          while (v696 != v724);
        }
        if (v338)
          WTF::fastFree(v338, v14);
        if (*((_BYTE *)v892 + 120))
          v436 = v879;
        else
          v436 = v876;
        v437 = (_DWORD *)*((_QWORD *)v892 + 9);
        v438 = *((unsigned int *)v892 + 21);
        if ((_DWORD)v438)
        {
          v439 = 4 * v438;
          v440 = (_DWORD *)*((_QWORD *)v892 + 9);
          do
          {
            if (*((_DWORD *)v436 + 3) <= *v440)
            {
              __break(0xC471u);
              JUMPOUT(0x196340E78);
            }
            *(_DWORD *)(*(_QWORD *)v436 + 136 * *v440 + 16) = *(_DWORD *)(*(_QWORD *)v436
                                                                                        + 136 * *v440
                                                                                        + 8) & ~(*(int *)(*(_QWORD *)v436 + 136 * *v440 + 8) >> 31);
            ++v440;
            v439 -= 4;
          }
          while (v439);
        }
        v893 = 0;
        v894 = 0;
        v441 = v325;
        v904 = 0;
        v905 = 0;
        if (v325 != v323)
        {
          do
          {
            v442 = *((_QWORD *)v441 + 1);
            if (HIDWORD(v905))
            {
              v450 = v904;
              v451 = &v904[HIDWORD(v905)];
              do
              {
                v452 = *v450;
                *v450 = 0;
                if (v452)
                {
                  do
                  {
                    v453 = __ldaxr(v452);
                    v454 = v453 - 1;
                  }
                  while (__stlxr(v454, v452));
                  if (!v454)
                  {
                    atomic_store(1u, v452);
                    WTF::fastFree((WTF *)v452, v14);
                  }
                }
                ++v450;
              }
              while (v450 != v451);
            }
            HIDWORD(v905) = 0;
            if (HIDWORD(v894))
            {
              v455 = v893;
              v456 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
              do
              {
                v457 = *(unsigned int **)v455;
                *(_QWORD *)v455 = 0;
                if (v457)
                {
                  do
                  {
                    v458 = __ldaxr(v457);
                    v459 = v458 - 1;
                  }
                  while (__stlxr(v459, v457));
                  if (!v459)
                  {
                    atomic_store(1u, v457);
                    WTF::fastFree((WTF *)v457, v14);
                  }
                }
                v455 = (WTF *)((char *)v455 + 8);
              }
              while (v455 != v456);
            }
            HIDWORD(v894) = 0;
            v443 = 0;
            v444 = HIDWORD(v442) - v442;
            if (HIDWORD(v442) != (_DWORD)v442)
            {
              v445 = v442;
              v446 = 136 * v442;
              do
              {
                if (v445 >= *((unsigned int *)v436 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x196340E80);
                }
                v447 = *(_QWORD *)v436 + v446;
                if (!*(_BYTE *)(v447 + 128))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19633FC7CLL);
                }
                v448 = *(_DWORD *)(v447 + 8) & ~(*(int *)(v447 + 8) >> 31);
                v55 = __OFADD__(v443, v448);
                v449 = v443 + v448;
                if (v55)
                  v443 = (v443 >> 31) + 0x7FFFFFFF;
                else
                  v443 = v449;
                if ((*(_WORD *)(v447 + 120) & 0xC) != 0)
                {
                  v889 = v444;
                  if (HIDWORD(v905) == (_DWORD)v905)
                  {
                    WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v904, (uint64_t *)v447);
                  }
                  else
                  {
                    WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v904[HIDWORD(v905)], (uint64_t *)v447);
                    ++HIDWORD(v905);
                  }
                  v741 = *(_WORD *)(v447 + 120);
                  v742 = v741 & 9;
                  v743 = v741 & 0x80;
                  v744 = !v742 || v743 == 0;
                  v444 = v889;
                  if (!v744)
                  {
                    if (HIDWORD(v894) == (_DWORD)v894)
                    {
                      WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v893, (uint64_t *)v447);
                    }
                    else
                    {
                      WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v893 + HIDWORD(v894), (uint64_t *)v447);
                      ++HIDWORD(v894);
                    }
                    v444 = v889;
                  }
                }
                ++v445;
                v446 += 136;
              }
              while (HIDWORD(v442) != v445);
            }
            if (HIDWORD(v905))
            {
              v735 = 4;
              if (!*((_BYTE *)v892 + 120))
                v735 = 12;
              v736 = WebCore::RenderGrid::guttersSize(*((WebCore::RenderElement **)v892 + 17), *((unsigned __int8 *)v892 + 120), v442, v444, *(_QWORD *)((char *)v892 + v735));
              if (__OFADD__(v443, v736))
                v737 = (v443 >> 31) + 0x7FFFFFFF;
              else
                v737 = v443 + v736;
              v738 = (***((uint64_t (****)(_QWORD, _QWORD))v892 + 18))(*((_QWORD *)v892 + 18), *(_QWORD *)v441);
              v739 = v738 - v737;
              if (__OFSUB__(v738, v737))
                v739 = (v738 >> 31) + 0x7FFFFFFF;
              v903 = v739 & ~(v739 >> 31);
              if (HIDWORD(v894))
                v740 = &v893;
              else
                v740 = (WTF **)&v904;
              WebCore::GridTrackSizingAlgorithm::distributeSpaceToTracks<(WebCore::TrackSizeComputationVariant)0,(WebCore::TrackSizeComputationPhase)1>((uint64_t)&v904, (uint64_t)v740, &v903);
            }
            v441 = (__int128 *)((char *)v441 + 24);
            v435 = v892;
            v325 = v882;
          }
          while (v441 != v323);
          v437 = (_DWORD *)*((_QWORD *)v892 + 9);
        }
        v460 = *((unsigned int *)v435 + 21);
        if ((_DWORD)v460)
        {
          v461 = 4 * v460;
          do
          {
            if (*((_DWORD *)v436 + 3) <= *v437)
            {
              __break(0xC471u);
              JUMPOUT(0x196340E88);
            }
            v462 = *(_QWORD *)v436 + 136 * *v437;
            v465 = *(_DWORD *)(v462 + 12);
            v464 = *(_DWORD *)(v462 + 16);
            v463 = (int *)(v462 + 12);
            *(v463 - 1) = v464;
            v466 = v464 & ~(v464 >> 31);
            if (v465 != -64 && v465 < v466)
              *v463 = v466;
            ++v437;
            v461 -= 4;
          }
          while (v461);
        }
        v468 = (WTF *)v904;
        if (HIDWORD(v905))
        {
          v725 = (WTF *)&v904[HIDWORD(v905)];
          do
          {
            v697 = *(unsigned int **)v468;
            *(_QWORD *)v468 = 0;
            if (v697)
            {
              do
              {
                v698 = __ldaxr(v697);
                v699 = v698 - 1;
              }
              while (__stlxr(v699, v697));
              if (!v699)
              {
                atomic_store(1u, v697);
                WTF::fastFree((WTF *)v697, v14);
              }
            }
            v468 = (WTF *)((char *)v468 + 8);
          }
          while (v468 != v725);
          v468 = (WTF *)v904;
        }
        if (v468)
        {
          v904 = 0;
          LODWORD(v905) = 0;
          WTF::fastFree(v468, v14);
        }
        v469 = v893;
        if (HIDWORD(v894))
        {
          v726 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
          do
          {
            v700 = *(unsigned int **)v469;
            *(_QWORD *)v469 = 0;
            if (v700)
            {
              do
              {
                v701 = __ldaxr(v700);
                v702 = v701 - 1;
              }
              while (__stlxr(v702, v700));
              if (!v702)
              {
                atomic_store(1u, v700);
                WTF::fastFree((WTF *)v700, v14);
              }
            }
            v469 = (WTF *)((char *)v469 + 8);
          }
          while (v469 != v726);
          v469 = v893;
        }
        if (v469)
        {
          v893 = 0;
          LODWORD(v894) = 0;
          WTF::fastFree(v469, v14);
        }
        if (*((_BYTE *)v435 + 120))
          v470 = v879;
        else
          v470 = v876;
        v471 = (_DWORD *)*((_QWORD *)v435 + 9);
        v472 = *((unsigned int *)v435 + 21);
        if ((_DWORD)v472)
        {
          v473 = 4 * v472;
          v474 = (_DWORD *)*((_QWORD *)v435 + 9);
          do
          {
            if (*((_DWORD *)v470 + 3) <= *v474)
            {
              __break(0xC471u);
              JUMPOUT(0x196340E90);
            }
            *(_DWORD *)(*(_QWORD *)v470 + 136 * *v474 + 16) = *(_DWORD *)(*(_QWORD *)v470
                                                                                        + 136 * *v474
                                                                                        + 8) & ~(*(int *)(*(_QWORD *)v470 + 136 * *v474 + 8) >> 31);
            ++v474;
            v473 -= 4;
          }
          while (v473);
        }
        v893 = 0;
        v894 = 0;
        v475 = v325;
        v904 = 0;
        v905 = 0;
        if (v325 != v323)
        {
          do
          {
            v476 = *((_QWORD *)v475 + 1);
            if (HIDWORD(v905))
            {
              v484 = v904;
              v485 = &v904[HIDWORD(v905)];
              do
              {
                v486 = *v484;
                *v484 = 0;
                if (v486)
                {
                  do
                  {
                    v487 = __ldaxr(v486);
                    v488 = v487 - 1;
                  }
                  while (__stlxr(v488, v486));
                  if (!v488)
                  {
                    atomic_store(1u, v486);
                    WTF::fastFree((WTF *)v486, v14);
                  }
                }
                ++v484;
              }
              while (v484 != v485);
            }
            HIDWORD(v905) = 0;
            if (HIDWORD(v894))
            {
              v489 = v893;
              v490 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
              do
              {
                v491 = *(unsigned int **)v489;
                *(_QWORD *)v489 = 0;
                if (v491)
                {
                  do
                  {
                    v492 = __ldaxr(v491);
                    v493 = v492 - 1;
                  }
                  while (__stlxr(v493, v491));
                  if (!v493)
                  {
                    atomic_store(1u, v491);
                    WTF::fastFree((WTF *)v491, v14);
                  }
                }
                v489 = (WTF *)((char *)v489 + 8);
              }
              while (v489 != v490);
            }
            HIDWORD(v894) = 0;
            v477 = 0;
            v478 = HIDWORD(v476) - v476;
            if (HIDWORD(v476) != (_DWORD)v476)
            {
              v479 = v476;
              v480 = 136 * v476;
              do
              {
                if (v479 >= *((unsigned int *)v470 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x196340E98);
                }
                v481 = *(_QWORD *)v470 + v480;
                if (!*(_BYTE *)(v481 + 128))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19633FC9CLL);
                }
                v482 = *(_DWORD *)(v481 + 8) & ~(*(int *)(v481 + 8) >> 31);
                v55 = __OFADD__(v477, v482);
                v483 = v477 + v482;
                if (v55)
                  v477 = (v477 >> 31) + 0x7FFFFFFF;
                else
                  v477 = v483;
                if ((*(_WORD *)(v481 + 120) & 4) != 0)
                {
                  v890 = v478;
                  if (HIDWORD(v905) == (_DWORD)v905)
                  {
                    WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v904, (uint64_t *)v481);
                  }
                  else
                  {
                    WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v904[HIDWORD(v905)], (uint64_t *)v481);
                    ++HIDWORD(v905);
                  }
                  v478 = v890;
                  if ((~*(unsigned __int16 *)(v481 + 120) & 0x14) == 0)
                  {
                    if (HIDWORD(v894) == (_DWORD)v894)
                    {
                      WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v893, (uint64_t *)v481);
                    }
                    else
                    {
                      WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v893 + HIDWORD(v894), (uint64_t *)v481);
                      ++HIDWORD(v894);
                    }
                    v478 = v890;
                  }
                }
                ++v479;
                v480 += 136;
              }
              while (HIDWORD(v476) != v479);
            }
            if (HIDWORD(v905))
            {
              v752 = 4;
              if (!*((_BYTE *)v892 + 120))
                v752 = 12;
              v753 = WebCore::RenderGrid::guttersSize(*((WebCore::RenderElement **)v892 + 17), *((unsigned __int8 *)v892 + 120), v476, v478, *(_QWORD *)((char *)v892 + v752));
              if (__OFADD__(v477, v753))
                v754 = (v477 >> 31) + 0x7FFFFFFF;
              else
                v754 = v477 + v753;
              v755 = WebCore::GridTrackSizingAlgorithmStrategy::maxContentForChild(*((WebCore::GridTrackSizingAlgorithmStrategy **)v892 + 18), *(WebCore::RenderBox **)v475);
              v756 = v755 - v754;
              if (__OFSUB__(v755, v754))
                v756 = (v755 >> 31) + 0x7FFFFFFF;
              v903 = v756 & ~(v756 >> 31);
              if (HIDWORD(v894))
                v757 = &v893;
              else
                v757 = (WTF **)&v904;
              WebCore::GridTrackSizingAlgorithm::distributeSpaceToTracks<(WebCore::TrackSizeComputationVariant)0,(WebCore::TrackSizeComputationPhase)1>((uint64_t)&v904, (uint64_t)v757, &v903);
            }
            v475 = (__int128 *)((char *)v475 + 24);
            v435 = v892;
            v325 = v882;
          }
          while (v475 != v323);
          v471 = (_DWORD *)*((_QWORD *)v892 + 9);
        }
        v494 = *((unsigned int *)v435 + 21);
        if ((_DWORD)v494)
        {
          v495 = 4 * v494;
          do
          {
            if (*((_DWORD *)v470 + 3) <= *v471)
            {
              __break(0xC471u);
              JUMPOUT(0x196340EA0);
            }
            v496 = *(_QWORD *)v470 + 136 * *v471;
            v499 = *(_DWORD *)(v496 + 12);
            v498 = *(_DWORD *)(v496 + 16);
            v497 = (int *)(v496 + 12);
            *(v497 - 1) = v498;
            v500 = v498 & ~(v498 >> 31);
            if (v499 != -64 && v499 < v500)
              *v497 = v500;
            ++v471;
            v495 -= 4;
          }
          while (v495);
        }
        v502 = (WTF *)v904;
        if (HIDWORD(v905))
        {
          v727 = (WTF *)&v904[HIDWORD(v905)];
          do
          {
            v703 = *(unsigned int **)v502;
            *(_QWORD *)v502 = 0;
            if (v703)
            {
              do
              {
                v704 = __ldaxr(v703);
                v705 = v704 - 1;
              }
              while (__stlxr(v705, v703));
              if (!v705)
              {
                atomic_store(1u, v703);
                WTF::fastFree((WTF *)v703, v14);
              }
            }
            v502 = (WTF *)((char *)v502 + 8);
          }
          while (v502 != v727);
          v502 = (WTF *)v904;
        }
        if (v502)
        {
          v904 = 0;
          LODWORD(v905) = 0;
          WTF::fastFree(v502, v14);
        }
        v503 = v893;
        if (HIDWORD(v894))
        {
          v728 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
          do
          {
            v706 = *(unsigned int **)v503;
            *(_QWORD *)v503 = 0;
            if (v706)
            {
              do
              {
                v707 = __ldaxr(v706);
                v708 = v707 - 1;
              }
              while (__stlxr(v708, v706));
              if (!v708)
              {
                atomic_store(1u, v706);
                WTF::fastFree((WTF *)v706, v14);
              }
            }
            v503 = (WTF *)((char *)v503 + 8);
          }
          while (v503 != v728);
          v503 = v893;
        }
        if (v503)
        {
          v893 = 0;
          LODWORD(v894) = 0;
          WTF::fastFree(v503, v14);
        }
        if (*((_BYTE *)v435 + 120))
          v504 = v879;
        else
          v504 = v876;
        v505 = (unsigned int *)*((_QWORD *)v435 + 9);
        v506 = *((unsigned int *)v435 + 21);
        if ((_DWORD)v506)
        {
          v507 = 4 * v506;
          v508 = (_DWORD *)*((_QWORD *)v435 + 9);
          do
          {
            if (*((_DWORD *)v504 + 3) <= *v508)
            {
              __break(0xC471u);
              JUMPOUT(0x196340EA8);
            }
            *(_DWORD *)(*(_QWORD *)v504 + 136 * *v508 + 16) = *(_DWORD *)(*(_QWORD *)v504
                                                                                        + 136 * *v508
                                                                                        + 12);
            ++v508;
            v507 -= 4;
          }
          while (v507);
        }
        v509 = 0;
        v893 = 0;
        v894 = 0;
        v904 = 0;
        v905 = 0;
        if (v325 != v323)
        {
          v510 = v325;
          v511 = 0;
          v509 = 0;
          do
          {
            v512 = *((_QWORD *)v510 + 1);
            if (v509)
            {
              v564 = v904;
              v565 = &v904[v509];
              do
              {
                v566 = *v564;
                *v564 = 0;
                if (v566)
                {
                  do
                  {
                    v567 = __ldaxr(v566);
                    v568 = v567 - 1;
                  }
                  while (__stlxr(v568, v566));
                  if (!v568)
                  {
                    atomic_store(1u, v566);
                    WTF::fastFree((WTF *)v566, v14);
                  }
                }
                ++v564;
              }
              while (v564 != v565);
              v511 = HIDWORD(v894);
            }
            HIDWORD(v905) = 0;
            if (v511)
            {
              v569 = v893;
              v570 = (WTF *)((char *)v893 + 8 * v511);
              do
              {
                v571 = *(unsigned int **)v569;
                *(_QWORD *)v569 = 0;
                if (v571)
                {
                  do
                  {
                    v572 = __ldaxr(v571);
                    v573 = v572 - 1;
                  }
                  while (__stlxr(v573, v571));
                  if (!v573)
                  {
                    atomic_store(1u, v571);
                    WTF::fastFree((WTF *)v571, v14);
                  }
                }
                v569 = (WTF *)((char *)v569 + 8);
              }
              while (v569 != v570);
            }
            HIDWORD(v894) = 0;
            v513 = HIDWORD(v512);
            v864 = HIDWORD(v512) - v512;
            v872 = v512;
            v511 = 0;
            v514 = 0;
            if (HIDWORD(v512) != (_DWORD)v512)
            {
              v515 = v512;
              v887 = (WTF *)HIDWORD(v512);
              do
              {
                if (*((_DWORD *)v504 + 3) <= v515)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196340EB0);
                }
                v516 = *(_QWORD *)v504 + 136 * v515;
                if (!*(_BYTE *)(v516 + 128))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19633FCBCLL);
                }
                v517 = *(_DWORD *)(v516 + 12);
                if (v517 == -64)
                  v517 = *(_DWORD *)(v516 + 8) & ~(*(int *)(v516 + 8) >> 31);
                v55 = __OFADD__(v514, v517);
                v518 = v514 + v517;
                if (v55)
                  v514 = (v514 >> 31) + 0x7FFFFFFF;
                else
                  v514 = v518;
                if ((*(_WORD *)(*(_QWORD *)v504 + 136 * v515 + 120) & 0x80) != 0)
                {
                  v519 = HIDWORD(v905);
                  if (HIDWORD(v905) == (_DWORD)v905)
                  {
                    v526 = HIDWORD(v905) + ((unint64_t)HIDWORD(v905) >> 2);
                    if (v526 >= 0x10)
                      v527 = v526 + 1;
                    else
                      v527 = 16;
                    if (v527 <= (unint64_t)HIDWORD(v905) + 1)
                      v528 = HIDWORD(v905) + 1;
                    else
                      v528 = v527;
                    if (v528 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x196340EF8);
                    }
                    v529 = (WTF *)v904;
                    v520 = (WTF *)WTF::fastMalloc((WTF *)(8 * v528));
                    LODWORD(v905) = v528;
                    v904 = (unsigned int **)v520;
                    if ((_DWORD)v519)
                    {
                      v805 = (unsigned int **)((char *)v529 + 8 * v519);
                      v806 = (unsigned int **)v529;
                      do
                      {
                        v807 = *v806;
                        *v806 = 0;
                        *(_QWORD *)v520 = v807;
                        v808 = *v806;
                        *v806 = 0;
                        if (v808)
                        {
                          do
                          {
                            v809 = __ldaxr(v808);
                            v810 = v809 - 1;
                          }
                          while (__stlxr(v810, v808));
                          if (!v810)
                          {
                            atomic_store(1u, v808);
                            WTF::fastFree((WTF *)v808, v14);
                          }
                        }
                        v520 = (WTF *)((char *)v520 + 8);
                        ++v806;
                      }
                      while (v806 != v805);
                      v520 = (WTF *)v904;
                    }
                    v435 = v892;
                    if (v529)
                    {
                      if (v520 == v529)
                      {
                        v520 = 0;
                        v904 = 0;
                        LODWORD(v905) = 0;
                      }
                      WTF::fastFree(v529, v14);
                    }
                    v519 = HIDWORD(v905);
                    v521 = *(_QWORD *)v516;
                    LODWORD(v513) = (_DWORD)v887;
                    if (*(_QWORD *)v516)
                      goto LABEL_1554;
                    v521 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v521 = 1;
                    *(_QWORD *)(v521 + 8) = v516;
                    v530 = *(unsigned int **)v516;
                    *(_QWORD *)v516 = v521;
                    if (!v530)
                      goto LABEL_1554;
                    do
                    {
                      v531 = __ldaxr(v530);
                      v532 = v531 - 1;
                    }
                    while (__stlxr(v532, v530));
                    if (!v532)
                    {
                      atomic_store(1u, v530);
                      WTF::fastFree((WTF *)v530, v14);
                    }
                    v521 = *(_QWORD *)v516;
                    if (*(_QWORD *)v516)
                    {
LABEL_1554:
                      do
                        v533 = __ldaxr((unsigned int *)v521);
                      while (__stlxr(v533 + 1, (unsigned int *)v521));
                    }
                  }
                  else
                  {
                    v520 = (WTF *)v904;
                    v521 = *(_QWORD *)v516;
                    if (*(_QWORD *)v516)
                      goto LABEL_1555;
                    v521 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v521 = 1;
                    *(_QWORD *)(v521 + 8) = v516;
                    v522 = *(unsigned int **)v516;
                    *(_QWORD *)v516 = v521;
                    if (!v522)
                      goto LABEL_1555;
                    do
                    {
                      v523 = __ldaxr(v522);
                      v524 = v523 - 1;
                    }
                    while (__stlxr(v524, v522));
                    if (!v524)
                    {
                      atomic_store(1u, v522);
                      WTF::fastFree((WTF *)v522, v14);
                    }
                    v521 = *(_QWORD *)v516;
                    if (*(_QWORD *)v516)
                    {
LABEL_1555:
                      do
                        v525 = __ldaxr((unsigned int *)v521);
                      while (__stlxr(v525 + 1, (unsigned int *)v521));
                    }
                  }
                  *((_QWORD *)v520 + v519) = v521;
                  ++HIDWORD(v905);
                  v534 = HIDWORD(v894);
                  if (HIDWORD(v894) == (_DWORD)v894)
                  {
                    v541 = HIDWORD(v894) + ((unint64_t)HIDWORD(v894) >> 2);
                    if (v541 >= 0x10)
                      v542 = v541 + 1;
                    else
                      v542 = 16;
                    if (v542 <= (unint64_t)HIDWORD(v894) + 1)
                      v543 = HIDWORD(v894) + 1;
                    else
                      v543 = v542;
                    if (v543 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x196340F00);
                    }
                    v544 = v893;
                    v535 = (WTF *)WTF::fastMalloc((WTF *)(8 * v543));
                    LODWORD(v894) = v543;
                    v893 = v535;
                    if ((_DWORD)v534)
                    {
                      v811 = (unsigned int **)((char *)v544 + 8 * v534);
                      v812 = (unsigned int **)v544;
                      do
                      {
                        v813 = *v812;
                        *v812 = 0;
                        *(_QWORD *)v535 = v813;
                        v814 = *v812;
                        *v812 = 0;
                        if (v814)
                        {
                          do
                          {
                            v815 = __ldaxr(v814);
                            v816 = v815 - 1;
                          }
                          while (__stlxr(v816, v814));
                          if (!v816)
                          {
                            atomic_store(1u, v814);
                            WTF::fastFree((WTF *)v814, v14);
                          }
                        }
                        v535 = (WTF *)((char *)v535 + 8);
                        ++v812;
                      }
                      while (v812 != v811);
                      v535 = v893;
                    }
                    v435 = v892;
                    if (v544)
                    {
                      if (v535 == v544)
                      {
                        v535 = 0;
                        v893 = 0;
                        LODWORD(v894) = 0;
                      }
                      WTF::fastFree(v544, v14);
                    }
                    v534 = HIDWORD(v894);
                    v536 = *(_QWORD *)v516;
                    LODWORD(v513) = (_DWORD)v887;
                    if (*(_QWORD *)v516)
                      goto LABEL_1556;
                    v536 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v536 = 1;
                    *(_QWORD *)(v536 + 8) = v516;
                    v545 = *(unsigned int **)v516;
                    *(_QWORD *)v516 = v536;
                    if (!v545)
                      goto LABEL_1556;
                    do
                    {
                      v546 = __ldaxr(v545);
                      v547 = v546 - 1;
                    }
                    while (__stlxr(v547, v545));
                    if (!v547)
                    {
                      atomic_store(1u, v545);
                      WTF::fastFree((WTF *)v545, v14);
                    }
                    v536 = *(_QWORD *)v516;
                    if (*(_QWORD *)v516)
                    {
LABEL_1556:
                      do
                        v548 = __ldaxr((unsigned int *)v536);
                      while (__stlxr(v548 + 1, (unsigned int *)v536));
                    }
                  }
                  else
                  {
                    v535 = v893;
                    v536 = *(_QWORD *)v516;
                    if (*(_QWORD *)v516)
                      goto LABEL_1557;
                    v536 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v536 = 1;
                    *(_QWORD *)(v536 + 8) = v516;
                    v537 = *(unsigned int **)v516;
                    *(_QWORD *)v516 = v536;
                    if (!v537)
                      goto LABEL_1557;
                    do
                    {
                      v538 = __ldaxr(v537);
                      v539 = v538 - 1;
                    }
                    while (__stlxr(v539, v537));
                    if (!v539)
                    {
                      atomic_store(1u, v537);
                      WTF::fastFree((WTF *)v537, v14);
                    }
                    v536 = *(_QWORD *)v516;
                    if (*(_QWORD *)v516)
                    {
LABEL_1557:
                      do
                        v540 = __ldaxr((unsigned int *)v536);
                      while (__stlxr(v540 + 1, (unsigned int *)v536));
                    }
                  }
                  *((_QWORD *)v535 + v534) = v536;
                  v511 = ++HIDWORD(v894);
                }
                ++v515;
              }
              while (v515 != (_DWORD)v513);
            }
            v509 = HIDWORD(v905);
            if (HIDWORD(v905))
            {
              v549 = 4;
              if (!*((_BYTE *)v435 + 120))
                v549 = 12;
              v550 = WebCore::RenderGrid::guttersSize(*((WebCore::RenderElement **)v435 + 17), *((unsigned __int8 *)v435 + 120), v872, v864, *(_QWORD *)((char *)v435 + v549));
              if (__OFADD__(v514, v550))
                v551 = (v514 >> 31) + 0x7FFFFFFF;
              else
                v551 = v514 + v550;
              v552 = (***((uint64_t (****)(_QWORD, _QWORD))v435 + 18))(*((_QWORD *)v435 + 18), *(_QWORD *)v510);
              v553 = v552 - v551;
              if (__OFSUB__(v552, v551))
                v553 = (v552 >> 31) + 0x7FFFFFFF;
              v903 = v553 & ~(v553 >> 31);
              v554 = v904;
              v555 = 8 * v509;
              v556 = 8 * v509;
              v557 = v904;
              do
              {
                v558 = (_DWORD *)*((_QWORD *)*v557 + 1);
                v559 = v558[3];
                if (v559 == -64)
                  v559 = v558[2] & ~((int)v558[2] >> 31);
                v558[5] = v559;
                ++v557;
                v556 -= 8;
              }
              while (v556);
              if (v511)
                v560 = (unsigned int *)&v893;
              else
                v560 = (unsigned int *)&v904;
              if (v553 >= 1)
              {
                WebCore::distributeItemIncurredIncreases<(WebCore::TrackSizeComputationVariant)0,(WebCore::TrackSizeComputationPhase)3,(WebCore::SpaceDistributionLimit)0>((unsigned int *)&v904, &v903);
                if (v903 >= 1)
                  WebCore::distributeItemIncurredIncreases<(WebCore::TrackSizeComputationVariant)0,(WebCore::TrackSizeComputationPhase)3,(WebCore::SpaceDistributionLimit)1>(v560, &v903);
              }
              do
              {
                v561 = *v554;
                if (*v554)
                {
                  v561 = (unsigned int *)*((_QWORD *)v561 + 1);
                  v562 = (uint64_t)(v561 + 4);
                  v563 = v561[4];
                }
                else
                {
                  v562 = 16;
                  v563 = MEMORY[0x10];
                }
                if (v563 == -64)
                {
                  v562 = (uint64_t)(v561 + 5);
                }
                else if (v563 < (int)v561[5])
                {
                  v562 = (uint64_t)(v561 + 5);
                }
                v561[4] = *(_DWORD *)v562;
                ++v554;
                v555 -= 8;
              }
              while (v555);
            }
            v510 = (__int128 *)((char *)v510 + 24);
          }
          while (v510 != v323);
          v505 = (unsigned int *)*((_QWORD *)v435 + 9);
          v325 = v882;
        }
        v574 = *((unsigned int *)v435 + 21);
        if ((_DWORD)v574)
        {
          v575 = 4 * v574;
          while (1)
          {
            v576 = *v505;
            if (*((_DWORD *)v504 + 3) <= *v505)
            {
              __break(0xC471u);
              JUMPOUT(0x196340EB8);
            }
            v577 = *(_QWORD *)v504;
            v578 = *(_QWORD *)v504 + 136 * v576;
            v581 = *(_DWORD *)(v578 + 12);
            v580 = *(_DWORD *)(v578 + 16);
            v579 = (int *)(v578 + 12);
            if (v581 == -64 && v580 != -64)
              break;
            if (v580 != -64)
              goto LABEL_887;
            v586 = -64;
LABEL_1383:
            *v579 = v586;
LABEL_893:
            ++v505;
            v575 -= 4;
            if (!v575)
              goto LABEL_894;
          }
          *(_BYTE *)(v577 + 136 * v576 + 32) = 1;
LABEL_887:
          v582 = v577 + 136 * v576;
          v583 = *(unsigned __int8 *)(v582 + 28);
          v584 = *(_DWORD *)(v582 + 24);
          if (!v583)
            v584 = v580;
          if (v584 < v580)
            v580 = v584;
          *v579 = v580;
          if (v580 == -64)
            goto LABEL_893;
          v585 = *(_DWORD *)(v577 + 136 * v576 + 8);
          v586 = v585 & ~(v585 >> 31);
          if (v580 >= v586)
            goto LABEL_893;
          goto LABEL_1383;
        }
LABEL_894:
        v587 = (WTF *)v904;
        if (v509)
        {
          v729 = (WTF *)&v904[v509];
          do
          {
            v709 = *(unsigned int **)v587;
            *(_QWORD *)v587 = 0;
            if (v709)
            {
              do
              {
                v710 = __ldaxr(v709);
                v711 = v710 - 1;
              }
              while (__stlxr(v711, v709));
              if (!v711)
              {
                atomic_store(1u, v709);
                WTF::fastFree((WTF *)v709, v14);
              }
            }
            v587 = (WTF *)((char *)v587 + 8);
          }
          while (v587 != v729);
          v587 = (WTF *)v904;
        }
        if (v587)
          WTF::fastFree(v587, v14);
        v588 = v893;
        if (HIDWORD(v894))
        {
          v730 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
          do
          {
            v712 = *(unsigned int **)v588;
            *(_QWORD *)v588 = 0;
            if (v712)
            {
              do
              {
                v713 = __ldaxr(v712);
                v714 = v713 - 1;
              }
              while (__stlxr(v714, v712));
              if (!v714)
              {
                atomic_store(1u, v712);
                WTF::fastFree((WTF *)v712, v14);
              }
            }
            v588 = (WTF *)((char *)v588 + 8);
          }
          while (v588 != v730);
          v588 = v893;
        }
        if (v588)
          WTF::fastFree(v588, v14);
        if (*((_BYTE *)v435 + 120))
          v589 = v879;
        else
          v589 = v876;
        v590 = (unsigned int *)*((_QWORD *)v435 + 9);
        v591 = *((unsigned int *)v435 + 21);
        if ((_DWORD)v591)
        {
          v592 = 4 * v591;
          v593 = (_DWORD *)*((_QWORD *)v435 + 9);
          do
          {
            if (*((_DWORD *)v589 + 3) <= *v593)
            {
              __break(0xC471u);
              JUMPOUT(0x196340EC0);
            }
            *(_DWORD *)(*(_QWORD *)v589 + 136 * *v593 + 16) = *(_DWORD *)(*(_QWORD *)v589
                                                                                        + 136 * *v593
                                                                                        + 12);
            ++v593;
            v592 -= 4;
          }
          while (v592);
        }
        if (v325 != v323)
        {
          v888 = 0;
          v873 = 0;
          LODWORD(v595) = 0;
          v596 = 0;
          v865 = 0;
          v597 = 0;
          v861 = v589;
          while (1)
          {
            v858 = *((_QWORD *)v325 + 1);
            if (v597)
            {
              v663 = (unsigned int **)((char *)v596 + 8 * v597);
              v664 = (unsigned int **)v596;
              do
              {
                v665 = *v664;
                *v664 = 0;
                if (v665)
                {
                  do
                  {
                    v666 = __ldaxr(v665);
                    v667 = v666 - 1;
                  }
                  while (__stlxr(v667, v665));
                  if (!v667)
                  {
                    atomic_store(1u, v665);
                    v792 = v596;
                    WTF::fastFree((WTF *)v665, v14);
                    v596 = v792;
                  }
                }
                ++v664;
              }
              while (v664 != v663);
            }
            if ((_DWORD)v595)
            {
              v668 = (unsigned int **)v888;
              do
              {
                v669 = *v668;
                *v668 = 0;
                if (v669)
                {
                  do
                  {
                    v670 = __ldaxr(v669);
                    v671 = v670 - 1;
                  }
                  while (__stlxr(v671, v669));
                  if (!v671)
                  {
                    atomic_store(1u, v669);
                    v793 = v596;
                    WTF::fastFree((WTF *)v669, v14);
                    v596 = v793;
                  }
                }
                ++v668;
              }
              while (v668 != (unsigned int **)((char *)v888 + 8 * v595));
            }
            if (HIDWORD(v858) == (_DWORD)v858)
            {
              v597 = 0;
              LODWORD(v595) = 0;
              goto LABEL_1027;
            }
            v883 = (WebCore::RenderBox **)v325;
            LODWORD(v595) = 0;
            v597 = 0;
            v599 = 0;
            v600 = v858;
            do
            {
              if (*((_DWORD *)v589 + 3) <= v600)
              {
                __break(0xC471u);
                JUMPOUT(0x196340EC8);
              }
              v601 = *(_QWORD *)v589 + 136 * v600;
              if (!*(_BYTE *)(v601 + 128))
              {
                __break(0xC471u);
                JUMPOUT(0x19633FCDCLL);
              }
              v602 = *(_DWORD *)(v601 + 12);
              if (v602 == -64)
                v602 = *(_DWORD *)(v601 + 8) & ~(*(int *)(v601 + 8) >> 31);
              v55 = __OFADD__(v599, v602);
              v603 = v599 + v602;
              if (v55)
                v599 = (v599 >> 31) + 0x7FFFFFFF;
              else
                v599 = v603;
              if ((*(_WORD *)(*(_QWORD *)v589 + 136 * v600 + 120) & 0x12) != 0)
              {
                v604 = v595;
                if (v597 == v865)
                {
                  v607 = v597 + ((unint64_t)v597 >> 2);
                  if (v607 >= 0x10)
                    v608 = v607 + 1;
                  else
                    v608 = 16;
                  if (v608 <= (unint64_t)v597 + 1)
                    v609 = v597 + 1;
                  else
                    v609 = v608;
                  if (v609 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196340F08);
                  }
                  v610 = v596;
                  v611 = WTF::fastMalloc((WTF *)(8 * v609));
                  v612 = (WTF *)v611;
                  if (v865)
                  {
                    v853 = (unsigned int **)v610;
                    v868 = (_QWORD *)v611;
                    do
                    {
                      v817 = *v853;
                      *v853 = 0;
                      *v868 = v817;
                      v818 = *v853;
                      *v853 = 0;
                      if (v818)
                      {
                        do
                        {
                          v819 = __ldaxr(v818);
                          v820 = v819 - 1;
                        }
                        while (__stlxr(v820, v818));
                        if (!v820)
                        {
                          atomic_store(1u, v818);
                          WTF::fastFree((WTF *)v818, v14);
                        }
                      }
                      ++v868;
                      ++v853;
                    }
                    while (v853 != (unsigned int **)((char *)v610 + 8 * v597));
                  }
                  v865 = v609;
                  if (v610)
                  {
                    if (v612 == v610)
                      v672 = 0;
                    else
                      v672 = v612;
                    v673 = v865;
                    if (v612 == v610)
                      v673 = 0;
                    v865 = v673;
                    WTF::fastFree(v610, v14);
                    v596 = v672;
                  }
                  else
                  {
                    v596 = v612;
                  }
                  LODWORD(v595) = v604;
                  v605 = *(_QWORD *)v601;
                  if (!*(_QWORD *)v601)
                  {
                    v595 = (unint64_t)v596;
                    v605 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v605 = 1;
                    *(_QWORD *)(v605 + 8) = v601;
                    v631 = *(unsigned int **)v601;
                    *(_QWORD *)v601 = v605;
                    if (v631)
                    {
                      do
                      {
                        v632 = __ldaxr(v631);
                        v633 = v632 - 1;
                      }
                      while (__stlxr(v633, v631));
                      v596 = (WTF *)v595;
                      if (!v633)
                      {
                        atomic_store(1u, v631);
                        WTF::fastFree((WTF *)v631, v14);
                        v596 = (WTF *)v595;
                      }
                      v605 = *(_QWORD *)v601;
                      LODWORD(v595) = v604;
                      if (!*(_QWORD *)v601)
                        goto LABEL_938;
                    }
                    else
                    {
                      v596 = (WTF *)v595;
                      LODWORD(v595) = v604;
                    }
                  }
                  do
                    v613 = __ldaxr((unsigned int *)v605);
                  while (__stlxr(v613 + 1, (unsigned int *)v605));
                  goto LABEL_938;
                }
                v605 = *(_QWORD *)v601;
                if (*(_QWORD *)v601)
                  goto LABEL_1558;
                v595 = (unint64_t)v596;
                v605 = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v605 = 1;
                *(_QWORD *)(v605 + 8) = v601;
                v625 = *(unsigned int **)v601;
                *(_QWORD *)v601 = v605;
                if (!v625)
                {
                  v596 = (WTF *)v595;
                  LODWORD(v595) = v604;
                  goto LABEL_924;
                }
                do
                {
                  v626 = __ldaxr(v625);
                  v627 = v626 - 1;
                }
                while (__stlxr(v627, v625));
                v596 = (WTF *)v595;
                if (!v627)
                {
                  atomic_store(1u, v625);
                  WTF::fastFree((WTF *)v625, v14);
                  v596 = (WTF *)v595;
                }
                v605 = *(_QWORD *)v601;
                LODWORD(v595) = v604;
                if (*(_QWORD *)v601)
                {
LABEL_1558:
                  do
LABEL_924:
                    v606 = __ldaxr((unsigned int *)v605);
                  while (__stlxr(v606 + 1, (unsigned int *)v605));
                }
LABEL_938:
                *((_QWORD *)v596 + v597) = v605;
                v614 = v595;
                if ((_DWORD)v595 != v873)
                {
                  v615 = *(_QWORD *)v601;
                  if (*(_QWORD *)v601)
                    goto LABEL_1559;
                  v595 = (unint64_t)v596;
                  v615 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v615 = 1;
                  *(_QWORD *)(v615 + 8) = v601;
                  v628 = *(unsigned int **)v601;
                  *(_QWORD *)v601 = v615;
                  if (!v628)
                  {
                    v596 = (WTF *)v595;
                    LODWORD(v595) = v604;
                    goto LABEL_940;
                  }
                  do
                  {
                    v629 = __ldaxr(v628);
                    v630 = v629 - 1;
                  }
                  while (__stlxr(v630, v628));
                  v596 = (WTF *)v595;
                  if (!v630)
                  {
                    atomic_store(1u, v628);
                    WTF::fastFree((WTF *)v628, v14);
                    v596 = (WTF *)v595;
                  }
                  v615 = *(_QWORD *)v601;
                  LODWORD(v595) = v604;
                  if (*(_QWORD *)v601)
                  {
LABEL_1559:
                    do
LABEL_940:
                      v616 = __ldaxr((unsigned int *)v615);
                    while (__stlxr(v616 + 1, (unsigned int *)v615));
                  }
                  v589 = v861;
                  *((_QWORD *)v888 + v614) = v615;
LABEL_942:
                  ++v597;
                  LODWORD(v595) = v595 + 1;
                  goto LABEL_943;
                }
                v617 = v595 + ((unint64_t)v595 >> 2);
                if (v617 >= 0x10)
                  v618 = v617 + 1;
                else
                  v618 = 16;
                if (v618 <= (unint64_t)v595 + 1)
                  v619 = v595 + 1;
                else
                  v619 = v618;
                if (v619 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196340F10);
                }
                v620 = v596;
                v621 = WTF::fastMalloc((WTF *)(8 * v619));
                v622 = (WTF *)v621;
                if (v873)
                {
                  v854 = (unsigned int **)v888;
                  v875 = (_QWORD *)v621;
                  do
                  {
                    v821 = *v854;
                    *v854 = 0;
                    *v875 = v821;
                    v822 = *v854;
                    *v854 = 0;
                    if (v822)
                    {
                      do
                      {
                        v823 = __ldaxr(v822);
                        v824 = v823 - 1;
                      }
                      while (__stlxr(v824, v822));
                      if (!v824)
                      {
                        atomic_store(1u, v822);
                        WTF::fastFree((WTF *)v822, v14);
                      }
                    }
                    ++v875;
                    ++v854;
                  }
                  while (v854 != (unsigned int **)((char *)v888 + 8 * v614));
                }
                v873 = v619;
                if (v888)
                {
                  if (v622 == v888)
                    v674 = 0;
                  else
                    v674 = v622;
                  v675 = v873;
                  if (v622 == v888)
                    v675 = 0;
                  v873 = v675;
                  WTF::fastFree(v888, v14);
                  v888 = v674;
                }
                else
                {
                  v888 = v622;
                }
                v623 = *(_QWORD *)v601;
                v596 = v620;
                if (*(_QWORD *)v601)
                  goto LABEL_1560;
                v623 = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v623 = 1;
                *(_QWORD *)(v623 + 8) = v601;
                v634 = *(unsigned int **)v601;
                *(_QWORD *)v601 = v623;
                if (!v634)
                {
                  v596 = v620;
                  goto LABEL_956;
                }
                do
                {
                  v635 = __ldaxr(v634);
                  v636 = v635 - 1;
                }
                while (__stlxr(v636, v634));
                v596 = v620;
                if (!v636)
                {
                  atomic_store(1u, v634);
                  WTF::fastFree((WTF *)v634, v14);
                  v596 = v620;
                }
                v623 = *(_QWORD *)v601;
                if (*(_QWORD *)v601)
                {
LABEL_1560:
                  do
LABEL_956:
                    v624 = __ldaxr((unsigned int *)v623);
                  while (__stlxr(v624 + 1, (unsigned int *)v623));
                }
                LODWORD(v595) = v604;
                *((_QWORD *)v888 + v614) = v623;
                v589 = v861;
                goto LABEL_942;
              }
              v589 = v861;
LABEL_943:
              ++v600;
            }
            while (v600 != HIDWORD(v858));
            v637 = (unsigned int *)v596;
            if (v597)
            {
              v638 = 4;
              if (!*((_BYTE *)v892 + 120))
                v638 = 12;
              v639 = WebCore::RenderGrid::guttersSize(*((WebCore::RenderElement **)v892 + 17), *((unsigned __int8 *)v892 + 120), v858, HIDWORD(v858) - (int)v858, *(_QWORD *)((char *)v892 + v638));
              if (__OFADD__(v599, v639))
                v640 = (v599 >> 31) + 0x7FFFFFFF;
              else
                v640 = v599 + v639;
              v641 = WebCore::GridTrackSizingAlgorithmStrategy::maxContentForChild(*((WebCore::GridTrackSizingAlgorithmStrategy **)v892 + 18), *v883);
              v642 = 0;
              if (__OFSUB__(v641, v640))
                v643 = (v641 >> 31) + 0x7FFFFFFF;
              else
                v643 = v641 - v640;
              v596 = (WTF *)v637;
              v14 = &v637[2 * v597];
              do
              {
                v644 = *(_DWORD **)(*(_QWORD *)&v637[v642] + 8);
                v645 = v644[3];
                if (v645 == -64)
                  v645 = v644[2] & ~((int)v644[2] >> 31);
                v644[5] = v645;
                v642 += 2;
              }
              while (2 * v597 != v642);
              v646 = v595;
              if (v643 >= 1)
              {
                v893 = (WTF *)WebCore::sortByGridTrackGrowthPotential;
                std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,false>(v637, (WTF **)v14, (uint64_t (**)(unsigned int **, unsigned int **))&v893, 126 - 2 * __clz(v597), 1);
                v596 = (WTF *)v637;
                v647 = v637;
                v648 = v597;
                while (1)
                {
                  v649 = *(_QWORD *)v647;
                  if (*(_QWORD *)v647)
                    v649 = *(_QWORD *)(v649 + 8);
                  v650 = (double)v643 * 0.015625 / (double)v648 * 64.0;
                  if (v650 >= 2147483650.0)
                    break;
                  if (v650 <= -2147483650.0)
                  {
                    v653 = *(_DWORD *)(v649 + 12) != -64 && *(_BYTE *)(v649 + 32) == 0;
                    v651 = 0x80000000;
                    v654 = 0x80000000;
                    goto LABEL_1009;
                  }
                  v651 = (int)v650;
                  v653 = *(_DWORD *)(v649 + 12) != -64 && *(_BYTE *)(v649 + 32) == 0;
                  v654 = (int)v650;
                  if (v651 >= 1)
                    goto LABEL_1008;
LABEL_1009:
                  if (v653)
                    v651 = v654;
                  v655 = *(_QWORD *)(v649 + 24);
                  if ((v655 & 0xFF00000000) != 0)
                  {
                    v656 = *(_DWORD *)(v649 + 20);
                    v55 = __OFSUB__((_DWORD)v655, v656);
                    v841 = v655 - v656;
                    v842 = (v655 >> 31) + 0x7FFFFFFF;
                    if (!v55)
                      v842 = v841;
                    if (v842 >= v651)
                      v843 = v651;
                    else
                      v843 = v842;
                    if (v842 >= 1)
                      v651 = v843;
                  }
                  else
                  {
                    v656 = *(_DWORD *)(v649 + 20);
                  }
                  v55 = __OFADD__(v656, v651);
                  v657 = v656 + v651;
                  v658 = (v656 >> 31) + 0x7FFFFFFF;
                  if (!v55)
                    v658 = v657;
                  *(_DWORD *)(v649 + 20) = v658;
                  if (__OFSUB__(v643, v651))
                    v643 = (v643 >> 31) + 0x7FFFFFFF;
                  else
                    v643 -= v651;
                  v647 += 2;
                  if (!--v648)
                  {
                    if (v643 >= 1)
                    {
                      if ((_DWORD)v595)
                        v595 = v595;
                      else
                        v595 = v597;
                      if (v646)
                        v825 = (unsigned int *)v888;
                      else
                        v825 = v637;
                      v893 = (WTF *)WebCore::sortByGridTrackGrowthPotential;
                      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,false>(v825, (WTF **)&v825[2 * v595], (uint64_t (**)(unsigned int **, unsigned int **))&v893, 126 - 2 * __clz(v595), 1);
                      do
                      {
                        v826 = *(_QWORD *)v825;
                        if (*(_QWORD *)v825)
                          v826 = *(_QWORD *)(v826 + 8);
                        v827 = (double)v643 * 0.015625 / (double)v595 * 64.0;
                        if (v827 >= 2147483650.0)
                        {
                          v828 = 0x7FFFFFFF;
                        }
                        else if (v827 <= -2147483650.0)
                        {
                          v828 = 0x80000000;
                        }
                        else
                        {
                          v828 = (int)v827;
                        }
                        v829 = *(_QWORD *)(v826 + 24);
                        if ((v829 & 0xFF00000000) != 0)
                        {
                          v830 = *(_DWORD *)(v826 + 20);
                          v55 = __OFSUB__((_DWORD)v829, v830);
                          v845 = v829 - v830;
                          v846 = (v829 >> 31) + 0x7FFFFFFF;
                          if (!v55)
                            v846 = v845;
                          if (v846 >= v828)
                            v847 = v828;
                          else
                            v847 = v846;
                          if (v846 >= 1)
                            v828 = v847;
                        }
                        else
                        {
                          v830 = *(_DWORD *)(v826 + 20);
                        }
                        v55 = __OFADD__(v830, v828);
                        v831 = v830 + v828;
                        v832 = (v830 >> 31) + 0x7FFFFFFF;
                        if (!v55)
                          v832 = v831;
                        *(_DWORD *)(v826 + 20) = v832;
                        if (__OFSUB__(v643, v828))
                          v643 = (v643 >> 31) + 0x7FFFFFFF;
                        else
                          v643 -= v828;
                        v825 += 2;
                        --v595;
                        v596 = (WTF *)v637;
                      }
                      while (v595);
                    }
                    goto LABEL_1020;
                  }
                }
                v653 = *(_DWORD *)(v649 + 12) != -64 && *(_BYTE *)(v649 + 32) == 0;
                v651 = 0x7FFFFFFF;
LABEL_1008:
                v654 = 0;
                goto LABEL_1009;
              }
LABEL_1020:
              v659 = 0;
              v325 = (__int128 *)v883;
              LODWORD(v595) = v646;
              v589 = v861;
              do
              {
                v660 = *(_QWORD *)((char *)v596 + v659);
                if (v660)
                {
                  v660 = *(_QWORD *)(v660 + 8);
                  v661 = v660 + 16;
                  v662 = *(_DWORD *)(v660 + 16);
                }
                else
                {
                  v661 = 16;
                  v662 = MEMORY[0x10];
                }
                if (v662 == -64)
                {
                  v661 = v660 + 20;
                }
                else if (v662 < *(_DWORD *)(v660 + 20))
                {
                  v661 = v660 + 20;
                }
                *(_DWORD *)(v660 + 16) = *(_DWORD *)v661;
                v659 += 8;
              }
              while (8 * v597 != v659);
            }
            else
            {
              v325 = (__int128 *)v883;
            }
LABEL_1027:
            v325 = (__int128 *)((char *)v325 + 24);
            if (v325 == v323)
            {
              v594 = v888;
              v598 = v892;
              v590 = (unsigned int *)*((_QWORD *)v892 + 9);
              goto LABEL_1056;
            }
          }
        }
        v594 = 0;
        LODWORD(v595) = 0;
        v596 = 0;
        v597 = 0;
        v598 = v892;
LABEL_1056:
        v676 = *((unsigned int *)v598 + 21);
        if ((_DWORD)v676)
        {
          v677 = 4 * v676;
          do
          {
            v678 = *v590;
            if (*((_DWORD *)v589 + 3) <= *v590)
            {
              __break(0xC471u);
              JUMPOUT(0x196340ED0);
            }
            v679 = *(_QWORD *)v589;
            v680 = *(_QWORD *)v589 + 136 * v678;
            v682 = *(unsigned __int8 *)(v680 + 32);
            v681 = (_BYTE *)(v680 + 32);
            if (v682)
              *v681 = 0;
            v683 = *(_DWORD *)(v679 + 136 * v678 + 16);
            if (v683 == -64)
            {
              *(_DWORD *)(v679 + 136 * v678 + 12) = -64;
            }
            else
            {
              v684 = v679 + 136 * v678;
              if (*(_BYTE *)(v684 + 28))
                v685 = *(_DWORD *)(v684 + 24);
              else
                v685 = *(_DWORD *)(v679 + 136 * v678 + 16);
              if (v685 < v683)
                v683 = v685;
              *(_DWORD *)(v684 + 12) = v683;
              v686 = (int *)(v684 + 12);
              if (v683 != -64)
              {
                v687 = *(_DWORD *)(v679 + 136 * v678 + 8);
                v688 = v687 & ~(v687 >> 31);
                if (v683 < v688)
                  *v686 = v688;
              }
            }
            ++v590;
            v677 -= 4;
          }
          while (v677);
        }
        v324 = v856;
        if (v597)
        {
          v731 = (unsigned int **)((char *)v596 + 8 * v597);
          v718 = (unsigned int **)v596;
          do
          {
            v715 = *v718;
            *v718 = 0;
            if (v715)
            {
              do
              {
                v716 = __ldaxr(v715);
                v717 = v716 - 1;
              }
              while (__stlxr(v717, v715));
              if (!v717)
              {
                atomic_store(1u, v715);
                v796 = v596;
                WTF::fastFree((WTF *)v715, v14);
                v596 = v796;
                v324 = v856;
              }
            }
            ++v718;
          }
          while (v718 != v731);
        }
        if (v596)
        {
          WTF::fastFree(v596, v14);
          v324 = v856;
        }
        if ((_DWORD)v595)
        {
          v722 = (unsigned int **)v594;
          do
          {
            v719 = *v722;
            *v722 = 0;
            if (v719)
            {
              do
              {
                v720 = __ldaxr(v719);
                v721 = v720 - 1;
              }
              while (__stlxr(v721, v719));
              if (!v721)
              {
                atomic_store(1u, v719);
                WTF::fastFree((WTF *)v719, v14);
                v324 = v856;
              }
            }
            ++v722;
          }
          while (v722 != (unsigned int **)((char *)v594 + 8 * v595));
        }
        if (v594)
        {
          WTF::fastFree(v594, v14);
          v324 = v856;
        }
        v1 = v892;
      }
      while (v323 != v324);
    }
  }
  v15 = v899;
  v884 = HIDWORD(v900);
  if (*((_BYTE *)v1 + 120))
    v16 = (char *)v1 + 56;
  else
    v16 = (char *)v1 + 40;
  v17 = (_DWORD *)*((_QWORD *)v1 + 9);
  v18 = *((unsigned int *)v1 + 21);
  if ((_DWORD)v18)
  {
    v19 = 4 * v18;
    v20 = (_DWORD *)*((_QWORD *)v1 + 9);
    do
    {
      if (*((_DWORD *)v16 + 3) <= *v20)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D28);
      }
      *(_DWORD *)(*(_QWORD *)v16 + 136 * *v20 + 16) = *(_DWORD *)(*(_QWORD *)v16
                                                                                + 136 * *v20
                                                                                + 8) & ~(*(int *)(*(_QWORD *)v16
                                                                                                + 136
                                                                                                * *v20
                                                                                                + 8) >> 31);
      ++v20;
      v19 -= 4;
    }
    while (v19);
  }
  v893 = 0;
  v894 = 0;
  v21 = &v15[3 * v884];
  v904 = 0;
  v905 = 0;
  v878 = v15;
  v881 = v21;
  LODWORD(v22) = 0;
  if (v884)
  {
    v23 = v15;
    v870 = v16;
    while (1)
    {
      v24 = v23[1];
      if ((_DWORD)v22)
      {
        v93 = v904;
        v94 = &v904[v22];
        do
        {
          v95 = *v93;
          *v93 = 0;
          if (v95)
          {
            do
            {
              v96 = __ldaxr(v95);
              v97 = v96 - 1;
            }
            while (__stlxr(v97, v95));
            if (!v97)
            {
              atomic_store(1u, v95);
              WTF::fastFree((WTF *)v95, v15);
              v15 = v878;
              v21 = v881;
            }
          }
          ++v93;
        }
        while (v93 != v94);
      }
      HIDWORD(v905) = 0;
      if (HIDWORD(v894))
      {
        v98 = v893;
        v99 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
        do
        {
          v100 = *(unsigned int **)v98;
          *(_QWORD *)v98 = 0;
          if (v100)
          {
            do
            {
              v101 = __ldaxr(v100);
              v102 = v101 - 1;
            }
            while (__stlxr(v102, v100));
            if (!v102)
            {
              atomic_store(1u, v100);
              WTF::fastFree((WTF *)v100, v15);
              v15 = v878;
              v21 = v881;
            }
          }
          v98 = (WTF *)((char *)v98 + 8);
        }
        while (v98 != v99);
      }
      v25 = 0;
      HIDWORD(v894) = 0;
      v26 = HIDWORD(v24) - (_DWORD)v24;
      if (HIDWORD(v24) != (_DWORD)v24)
        break;
LABEL_35:
      v22 = HIDWORD(v905);
      if (HIDWORD(v905))
      {
        v27 = 4;
        if (!*((_BYTE *)v1 + 120))
          v27 = 12;
        v28 = WebCore::RenderGrid::guttersSize(*((WebCore::RenderElement **)v1 + 17), *((unsigned __int8 *)v1 + 120), v24, v26, *(_QWORD *)((char *)v1 + v27));
        if (__OFADD__(v25, v28))
          v29 = (v25 >> 31) + 0x7FFFFFFF;
        else
          v29 = v25 + v28;
        v30 = WebCore::GridTrackSizingAlgorithmStrategy::minSizeForChild(*((WebCore::GridTrackSizingAlgorithmStrategy **)v1 + 18), *v23);
        v31 = v30 - v29;
        if (__OFSUB__(v30, v29))
          v31 = (v30 >> 31) + 0x7FFFFFFF;
        v32 = HIDWORD(v894);
        v33 = v904;
        v34 = 8 * v22;
        v35 = 8 * v22;
        v36 = v904;
        do
        {
          v37 = (uint64_t)*v36++;
          *(_DWORD *)(*(_QWORD *)(v37 + 8) + 20) = *(_DWORD *)(*(_QWORD *)(v37 + 8) + 8) & ~(*(int *)(*(_QWORD *)(v37 + 8) + 8) >> 31);
          v35 -= 8;
        }
        while (v35);
        if (v32)
          v38 = &v893;
        else
          v38 = (WTF **)&v904;
        if (v31 >= 1)
        {
          if (v22 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x196340D88);
          }
          v39 = v31 & ~(v31 >> 31);
          v40 = (WTF *)WTF::fastMalloc((WTF *)(8 * v22));
          v42 = (v22 - 1);
          v43 = 0.0;
          v44 = 1;
          v45 = v22;
          do
          {
            v46 = *((_QWORD *)v33[v42] + 1);
            if (!*(_BYTE *)(v46 + 128))
            {
              __break(0xC471u);
              JUMPOUT(0x19633F930);
            }
            v47 = *(double *)(v46 + 80);
            v43 = v43 + v47;
            if (v43 <= 0.0)
              v48 = (double)v44;
            else
              v48 = v43 / v47;
            *(double *)((char *)v40 + v42 * 8) = v48;
            --v42;
            --v45;
            ++v44;
          }
          while (v45 > 0);
          v49 = 0;
          do
          {
            if (v34 == v49)
            {
              __break(0xC471u);
              JUMPOUT(0x196340D20);
            }
            v50 = v33[v49 / 8];
            if (v50)
              v50 = (unsigned int *)*((_QWORD *)v50 + 1);
            v51 = (double)v39 * 0.015625 / *(double *)((char *)v40 + v49) * 64.0;
            if (v51 >= 2147483650.0)
            {
              v52 = 0x7FFFFFFF;
            }
            else if (v51 <= -2147483650.0)
            {
              v52 = 0x80000000;
            }
            else
            {
              v52 = (int)v51;
            }
            v53 = v50[3];
            if (v53 != -64 && !*((_BYTE *)v50 + 32))
            {
              v54 = v50[2] & ~((int)v50[2] >> 31);
              v55 = __OFSUB__(v53, v54);
              v56 = v53 - v54;
              v57 = (v53 >> 31) + 0x7FFFFFFF;
              if (!v55)
                v57 = v56;
              if (v57 < v52)
                v52 = v57;
            }
            v58 = v50[5];
            v55 = __OFADD__(v58, v52);
            v59 = v58 + v52;
            v60 = (v58 >> 31) + 0x7FFFFFFF;
            if (!v55)
              v60 = v59;
            v50[5] = v60;
            if (__OFSUB__(v39, v52))
              v39 = (v39 >> 31) + 0x7FFFFFFF;
            else
              v39 -= v52;
            v49 += 8;
          }
          while (v34 != v49);
          v903 = v39;
          WTF::fastFree(v40, v41);
          if (v39 >= 1)
            WebCore::distributeItemIncurredIncreases<(WebCore::TrackSizeComputationVariant)1,(WebCore::TrackSizeComputationPhase)0,(WebCore::SpaceDistributionLimit)1>((uint64_t)v38, &v903);
        }
        v15 = v878;
        v21 = v881;
        do
        {
          v61 = *v33;
          if (*v33)
          {
            v61 = (unsigned int *)*((_QWORD *)v61 + 1);
            v62 = (uint64_t)(v61 + 4);
            v63 = v61[4];
          }
          else
          {
            v62 = 16;
            v63 = MEMORY[0x10];
          }
          if (v63 == -64)
          {
            v62 = (uint64_t)(v61 + 5);
          }
          else if (v63 < (int)v61[5])
          {
            v62 = (uint64_t)(v61 + 5);
          }
          v61[4] = *(_DWORD *)v62;
          ++v33;
          v34 -= 8;
        }
        while (v34);
      }
      v23 += 3;
      if (v23 == v21)
      {
        v17 = (_DWORD *)*((_QWORD *)v1 + 9);
        goto LABEL_143;
      }
    }
    v25 = 0;
    v64 = v24;
    while (1)
    {
      if (*((_DWORD *)v16 + 3) <= v64)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D78);
      }
      v65 = *(_QWORD *)v16 + 136 * v64;
      if (!*(_BYTE *)(v65 + 128))
      {
        __break(0xC471u);
        JUMPOUT(0x19633F950);
      }
      v66 = *(_QWORD *)v16 + 136 * v64 + 40;
      v67 = *(_DWORD *)(v65 + 8) & ~(*(int *)(v65 + 8) >> 31);
      v55 = __OFADD__(v25, v67);
      v68 = v25 + v67;
      if (v55)
        v25 = (v25 >> 31) + 0x7FFFFFFF;
      else
        v25 = v68;
      if (*(_DWORD *)(*(_QWORD *)v16 + 136 * v64 + 88) != 1
        || (*(_WORD *)(*(_QWORD *)v16 + 136 * v64 + 120) & 0x40) == 0)
      {
        goto LABEL_103;
      }
      v69 = HIDWORD(v905);
      if (HIDWORD(v905) != (_DWORD)v905)
      {
        v70 = v904;
        v71 = *(_QWORD *)v65;
        if (*(_QWORD *)v65)
          goto LABEL_1561;
        v71 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v71 = 1;
        *(_QWORD *)(v71 + 8) = v65;
        v87 = *(unsigned int **)v65;
        *(_QWORD *)v65 = v71;
        if (!v87)
        {
          v15 = v878;
          v21 = v881;
          v26 = HIDWORD(v24) - (_DWORD)v24;
          goto LABEL_96;
        }
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        v15 = v878;
        v21 = v881;
        if (!v89)
        {
          atomic_store(1u, v87);
          WTF::fastFree((WTF *)v87, v878);
          v15 = v878;
          v21 = v881;
        }
        v71 = *(_QWORD *)v65;
        v26 = HIDWORD(v24) - (_DWORD)v24;
        if (*(_QWORD *)v65)
        {
LABEL_1561:
          do
LABEL_96:
            v72 = __ldaxr((unsigned int *)v71);
          while (__stlxr(v72 + 1, (unsigned int *)v71));
        }
        v70[v69] = (unsigned int *)v71;
        goto LABEL_98;
      }
      v77 = HIDWORD(v905) + ((unint64_t)HIDWORD(v905) >> 2);
      if (v77 >= 0x10)
        v78 = v77 + 1;
      else
        v78 = 16;
      if (v78 <= (unint64_t)HIDWORD(v905) + 1)
        v79 = HIDWORD(v905) + 1;
      else
        v79 = v78;
      if (v79 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D80);
      }
      v80 = (WTF *)v904;
      v81 = WTF::fastMalloc((WTF *)(8 * v79));
      v83 = (WTF *)v81;
      LODWORD(v905) = v79;
      v904 = (unsigned int **)v81;
      if ((_DWORD)v69)
      {
        v781 = (_QWORD *)v81;
        v866 = (unsigned int **)((char *)v80 + 8 * v69);
        v782 = (unsigned int **)v80;
        do
        {
          v783 = *v782;
          *v782 = 0;
          *v781 = v783;
          v784 = *v782;
          *v782 = 0;
          if (v784)
          {
            do
            {
              v785 = __ldaxr(v784);
              v786 = v785 - 1;
            }
            while (__stlxr(v786, v784));
            if (!v786)
            {
              atomic_store(1u, v784);
              WTF::fastFree((WTF *)v784, v82);
            }
          }
          ++v781;
          ++v782;
        }
        while (v782 != v866);
        v83 = (WTF *)v904;
      }
      v1 = v892;
      v15 = v878;
      v21 = v881;
      v26 = HIDWORD(v24) - (_DWORD)v24;
      if (v80)
      {
        if (v83 == v80)
        {
          v83 = 0;
          v904 = 0;
          LODWORD(v905) = 0;
        }
        v322 = v83;
        WTF::fastFree(v80, v878);
        v83 = v322;
        v15 = v878;
        v21 = v881;
        v26 = HIDWORD(v24) - (_DWORD)v24;
      }
      v84 = HIDWORD(v905);
      v85 = *(_QWORD *)v65;
      if (!*(_QWORD *)v65)
      {
        v862 = v83;
        v85 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v85 = 1;
        *(_QWORD *)(v85 + 8) = v65;
        v90 = *(unsigned int **)v65;
        *(_QWORD *)v65 = v85;
        if (v90)
        {
          do
          {
            v91 = __ldaxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          v15 = v878;
          v21 = v881;
          if (!v92)
          {
            atomic_store(1u, v90);
            WTF::fastFree((WTF *)v90, v878);
            v15 = v878;
            v21 = v881;
          }
          v85 = *(_QWORD *)v65;
          v26 = HIDWORD(v24) - (_DWORD)v24;
          v83 = v862;
          if (!*(_QWORD *)v65)
            goto LABEL_116;
        }
        else
        {
          v15 = v878;
          v21 = v881;
          v26 = HIDWORD(v24) - (_DWORD)v24;
          v83 = v862;
        }
      }
      do
        v86 = __ldaxr((unsigned int *)v85);
      while (__stlxr(v86 + 1, (unsigned int *)v85));
LABEL_116:
      *((_QWORD *)v83 + v84) = v85;
LABEL_98:
      ++HIDWORD(v905);
      v73 = *(_WORD *)(v66 + 80);
      v74 = v73 & 9;
      v75 = v73 & 0x80;
      if (v74)
        v76 = v75 == 0;
      else
        v76 = 1;
      v16 = v870;
      if (!v76)
      {
        v745 = HIDWORD(v894);
        if (HIDWORD(v894) == (_DWORD)v894)
        {
          WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v893, (uint64_t *)v65);
        }
        else
        {
          WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v893 + HIDWORD(v894), (uint64_t *)v65);
          HIDWORD(v894) = v745 + 1;
        }
        v1 = v892;
        v15 = v878;
        v21 = v881;
        v16 = v870;
        v26 = HIDWORD(v24) - (_DWORD)v24;
      }
LABEL_103:
      if (++v64 == HIDWORD(v24))
        goto LABEL_35;
    }
  }
LABEL_143:
  v103 = *((unsigned int *)v1 + 21);
  if ((_DWORD)v103)
  {
    v104 = 4 * v103;
    do
    {
      if (*((_DWORD *)v16 + 3) <= *v17)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D30);
      }
      v105 = *(_QWORD *)v16 + 136 * *v17;
      v108 = *(_DWORD *)(v105 + 12);
      v107 = *(_DWORD *)(v105 + 16);
      v106 = (int *)(v105 + 12);
      *(v106 - 1) = v107;
      v109 = v107 & ~(v107 >> 31);
      if (v108 != -64 && v108 < v109)
        *v106 = v109;
      ++v17;
      v104 -= 4;
    }
    while (v104);
  }
  v111 = (WTF *)v904;
  if ((_DWORD)v22)
  {
    v282 = (WTF *)&v904[v22];
    do
    {
      v283 = *(unsigned int **)v111;
      *(_QWORD *)v111 = 0;
      if (v283)
      {
        do
        {
          v284 = __ldaxr(v283);
          v285 = v284 - 1;
        }
        while (__stlxr(v285, v283));
        if (!v285)
        {
          atomic_store(1u, v283);
          WTF::fastFree((WTF *)v283, v15);
          v15 = v878;
          v21 = v881;
        }
      }
      v111 = (WTF *)((char *)v111 + 8);
    }
    while (v111 != v282);
    v111 = (WTF *)v904;
  }
  if (v111)
  {
    WTF::fastFree(v111, v15);
    v15 = v878;
    v21 = v881;
  }
  v112 = v893;
  if (HIDWORD(v894))
  {
    v286 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
    do
    {
      v287 = *(unsigned int **)v112;
      *(_QWORD *)v112 = 0;
      if (v287)
      {
        do
        {
          v288 = __ldaxr(v287);
          v289 = v288 - 1;
        }
        while (__stlxr(v289, v287));
        if (!v289)
        {
          atomic_store(1u, v287);
          WTF::fastFree((WTF *)v287, v15);
          v15 = v878;
          v21 = v881;
        }
      }
      v112 = (WTF *)((char *)v112 + 8);
    }
    while (v112 != v286);
    v112 = v893;
  }
  if (v112)
  {
    WTF::fastFree(v112, v15);
    v15 = v878;
    v21 = v881;
  }
  if (*((_BYTE *)v1 + 120))
    v113 = (char *)v1 + 56;
  else
    v113 = (char *)v1 + 40;
  v114 = (_DWORD *)*((_QWORD *)v1 + 9);
  v115 = *((unsigned int *)v1 + 21);
  if ((_DWORD)v115)
  {
    v116 = 4 * v115;
    v117 = (_DWORD *)*((_QWORD *)v1 + 9);
    do
    {
      if (*((_DWORD *)v113 + 3) <= *v117)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D38);
      }
      *(_DWORD *)(*(_QWORD *)v113 + 136 * *v117 + 16) = *(_DWORD *)(*(_QWORD *)v113
                                                                                  + 136 * *v117
                                                                                  + 8) & ~(*(int *)(*(_QWORD *)v113
                                                                                                  + 136 * *v117
                                                                                                  + 8) >> 31);
      ++v117;
      v116 -= 4;
    }
    while (v116);
  }
  v893 = 0;
  v894 = 0;
  v904 = 0;
  v905 = 0;
  if (v884)
  {
    v118 = v15;
    do
    {
      v119 = (unint64_t)v118[1];
      if (HIDWORD(v905))
      {
        v128 = v904;
        v129 = &v904[HIDWORD(v905)];
        do
        {
          v130 = *v128;
          *v128 = 0;
          if (v130)
          {
            do
            {
              v131 = __ldaxr(v130);
              v132 = v131 - 1;
            }
            while (__stlxr(v132, v130));
            if (!v132)
            {
              atomic_store(1u, v130);
              WTF::fastFree((WTF *)v130, v15);
              v15 = v878;
              v21 = v881;
            }
          }
          ++v128;
        }
        while (v128 != v129);
      }
      HIDWORD(v905) = 0;
      if (HIDWORD(v894))
      {
        v133 = v893;
        v134 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
        do
        {
          v135 = *(unsigned int **)v133;
          *(_QWORD *)v133 = 0;
          if (v135)
          {
            do
            {
              v136 = __ldaxr(v135);
              v137 = v136 - 1;
            }
            while (__stlxr(v137, v135));
            if (!v137)
            {
              atomic_store(1u, v135);
              WTF::fastFree((WTF *)v135, v15);
              v15 = v878;
              v21 = v881;
            }
          }
          v133 = (WTF *)((char *)v133 + 8);
        }
        while (v133 != v134);
      }
      v120 = 0;
      HIDWORD(v894) = 0;
      if (HIDWORD(v119) != (_DWORD)v119)
      {
        v120 = 0;
        v121 = v119;
        v122 = 136 * v119;
        do
        {
          if (v121 >= *((unsigned int *)v113 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x196340D90);
          }
          v123 = *(_QWORD *)v113;
          v124 = *(_QWORD *)v113 + v122;
          if (!*(_BYTE *)(v124 + 128))
          {
            __break(0xC471u);
            JUMPOUT(0x19633F970);
          }
          v125 = *(_DWORD *)(v124 + 8) & ~(*(int *)(v124 + 8) >> 31);
          v55 = __OFADD__(v120, v125);
          v126 = v120 + v125;
          if (v55)
            v120 = (v120 >> 31) + 0x7FFFFFFF;
          else
            v120 = v126;
          if (*(_DWORD *)(v124 + 88) == 1)
          {
            v127 = v123 + v122;
            if ((*(_WORD *)(v123 + v122 + 120) & 0xC) != 0)
            {
              if (HIDWORD(v905) == (_DWORD)v905)
              {
                WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v904, (uint64_t *)(*(_QWORD *)v113 + v122));
              }
              else
              {
                WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v904[HIDWORD(v905)], (uint64_t *)(*(_QWORD *)v113 + v122));
                ++HIDWORD(v905);
              }
              v758 = *(_WORD *)(v127 + 120);
              v759 = v758 & 9;
              v760 = v758 & 0x80;
              v761 = !v759 || v760 == 0;
              v15 = v878;
              v21 = v881;
              if (!v761)
              {
                if (HIDWORD(v894) == (_DWORD)v894)
                {
                  WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v893, (uint64_t *)v124);
                }
                else
                {
                  WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v893 + HIDWORD(v894), (uint64_t *)v124);
                  ++HIDWORD(v894);
                }
                v15 = v878;
                v21 = v881;
              }
            }
          }
          ++v121;
          v122 += 136;
        }
        while (HIDWORD(v119) != v121);
      }
      if (HIDWORD(v905))
      {
        if (*((_BYTE *)v892 + 120))
          v746 = 4;
        else
          v746 = 12;
        v747 = WebCore::RenderGrid::guttersSize(*((WebCore::RenderElement **)v892 + 17), *((unsigned __int8 *)v892 + 120), v119, HIDWORD(v119) - (int)v119, *(_QWORD *)((char *)v892 + v746));
        if (__OFADD__(v120, v747))
          v748 = (v120 >> 31) + 0x7FFFFFFF;
        else
          v748 = v120 + v747;
        v749 = (***((uint64_t (****)(_QWORD, WebCore::RenderBox *))v892 + 18))(*((_QWORD *)v892 + 18), *v118);
        v750 = v749 - v748;
        if (__OFSUB__(v749, v748))
          v750 = (v749 >> 31) + 0x7FFFFFFF;
        v903 = v750 & ~(v750 >> 31);
        if (HIDWORD(v894))
          v751 = (uint64_t *)&v893;
        else
          v751 = (uint64_t *)&v904;
        WebCore::GridTrackSizingAlgorithm::distributeSpaceToTracks<(WebCore::TrackSizeComputationVariant)1,(WebCore::TrackSizeComputationPhase)1>((uint64_t)&v904, v751, &v903);
        v15 = v878;
        v21 = v881;
      }
      v118 += 3;
      v1 = v892;
    }
    while (v118 != v21);
    v114 = (_DWORD *)*((_QWORD *)v892 + 9);
  }
  v138 = *((unsigned int *)v1 + 21);
  if ((_DWORD)v138)
  {
    v139 = 4 * v138;
    do
    {
      if (*((_DWORD *)v113 + 3) <= *v114)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D40);
      }
      v140 = *(_QWORD *)v113 + 136 * *v114;
      v143 = *(_DWORD *)(v140 + 12);
      v142 = *(_DWORD *)(v140 + 16);
      v141 = (int *)(v140 + 12);
      *(v141 - 1) = v142;
      v144 = v142 & ~(v142 >> 31);
      if (v143 != -64 && v143 < v144)
        *v141 = v144;
      ++v114;
      v139 -= 4;
    }
    while (v139);
  }
  v146 = (WTF *)v904;
  if (HIDWORD(v905))
  {
    v290 = (WTF *)&v904[HIDWORD(v905)];
    do
    {
      v291 = *(unsigned int **)v146;
      *(_QWORD *)v146 = 0;
      if (v291)
      {
        do
        {
          v292 = __ldaxr(v291);
          v293 = v292 - 1;
        }
        while (__stlxr(v293, v291));
        if (!v293)
        {
          atomic_store(1u, v291);
          WTF::fastFree((WTF *)v291, v15);
          v15 = v878;
          v21 = v881;
        }
      }
      v146 = (WTF *)((char *)v146 + 8);
    }
    while (v146 != v290);
    v146 = (WTF *)v904;
  }
  if (v146)
  {
    v904 = 0;
    LODWORD(v905) = 0;
    WTF::fastFree(v146, v15);
    v15 = v878;
    v21 = v881;
  }
  v147 = v893;
  if (HIDWORD(v894))
  {
    v294 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
    do
    {
      v295 = *(unsigned int **)v147;
      *(_QWORD *)v147 = 0;
      if (v295)
      {
        do
        {
          v296 = __ldaxr(v295);
          v297 = v296 - 1;
        }
        while (__stlxr(v297, v295));
        if (!v297)
        {
          atomic_store(1u, v295);
          WTF::fastFree((WTF *)v295, v15);
          v15 = v878;
          v21 = v881;
        }
      }
      v147 = (WTF *)((char *)v147 + 8);
    }
    while (v147 != v294);
    v147 = v893;
  }
  if (v147)
  {
    v893 = 0;
    LODWORD(v894) = 0;
    WTF::fastFree(v147, v15);
    v15 = v878;
    v21 = v881;
  }
  if (*((_BYTE *)v1 + 120))
    v148 = (char *)v1 + 56;
  else
    v148 = (char *)v1 + 40;
  v149 = (_DWORD *)*((_QWORD *)v1 + 9);
  v150 = *((unsigned int *)v1 + 21);
  if ((_DWORD)v150)
  {
    v151 = 4 * v150;
    v152 = (_DWORD *)*((_QWORD *)v1 + 9);
    do
    {
      if (*((_DWORD *)v148 + 3) <= *v152)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D48);
      }
      *(_DWORD *)(*(_QWORD *)v148 + 136 * *v152 + 16) = *(_DWORD *)(*(_QWORD *)v148
                                                                                  + 136 * *v152
                                                                                  + 8) & ~(*(int *)(*(_QWORD *)v148
                                                                                                  + 136 * *v152
                                                                                                  + 8) >> 31);
      ++v152;
      v151 -= 4;
    }
    while (v151);
  }
  v893 = 0;
  v894 = 0;
  v904 = 0;
  v905 = 0;
  if (v884)
  {
    v153 = v15;
    do
    {
      v154 = v153[1];
      if (HIDWORD(v905))
      {
        v163 = v904;
        v164 = &v904[HIDWORD(v905)];
        do
        {
          v165 = *v163;
          *v163 = 0;
          if (v165)
          {
            do
            {
              v166 = __ldaxr(v165);
              v167 = v166 - 1;
            }
            while (__stlxr(v167, v165));
            if (!v167)
            {
              atomic_store(1u, v165);
              WTF::fastFree((WTF *)v165, v15);
              v15 = v878;
              v21 = v881;
            }
          }
          ++v163;
        }
        while (v163 != v164);
      }
      HIDWORD(v905) = 0;
      if (HIDWORD(v894))
      {
        v168 = v893;
        v169 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
        do
        {
          v170 = *(unsigned int **)v168;
          *(_QWORD *)v168 = 0;
          if (v170)
          {
            do
            {
              v171 = __ldaxr(v170);
              v172 = v171 - 1;
            }
            while (__stlxr(v172, v170));
            if (!v172)
            {
              atomic_store(1u, v170);
              WTF::fastFree((WTF *)v170, v15);
              v15 = v878;
              v21 = v881;
            }
          }
          v168 = (WTF *)((char *)v168 + 8);
        }
        while (v168 != v169);
      }
      v155 = 0;
      HIDWORD(v894) = 0;
      if (HIDWORD(v154) != (_DWORD)v154)
      {
        v155 = 0;
        v156 = v154;
        v157 = 136 * v154;
        do
        {
          if (v156 >= *((unsigned int *)v148 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x196340D98);
          }
          v158 = *(_QWORD *)v148;
          v159 = *(_QWORD *)v148 + v157;
          if (!*(_BYTE *)(v159 + 128))
          {
            __break(0xC471u);
            JUMPOUT(0x19633F990);
          }
          v160 = *(_DWORD *)(v159 + 8) & ~(*(int *)(v159 + 8) >> 31);
          v55 = __OFADD__(v155, v160);
          v161 = v155 + v160;
          if (v55)
            v155 = (v155 >> 31) + 0x7FFFFFFF;
          else
            v155 = v161;
          if (*(_DWORD *)(v159 + 88) == 1)
          {
            v162 = v158 + v157;
            if ((*(_WORD *)(v158 + v157 + 120) & 4) != 0)
            {
              if (HIDWORD(v905) == (_DWORD)v905)
              {
                WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v904, (uint64_t *)(*(_QWORD *)v148 + v157));
              }
              else
              {
                WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v904[HIDWORD(v905)], (uint64_t *)(*(_QWORD *)v148 + v157));
                ++HIDWORD(v905);
              }
              v15 = v878;
              v21 = v881;
              if ((~*(unsigned __int16 *)(v162 + 120) & 0x14) == 0)
              {
                if (HIDWORD(v894) == (_DWORD)v894)
                {
                  WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v893, (uint64_t *)v159);
                }
                else
                {
                  WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v893 + HIDWORD(v894), (uint64_t *)v159);
                  ++HIDWORD(v894);
                }
                v15 = v878;
                v21 = v881;
              }
            }
          }
          ++v156;
          v157 += 136;
        }
        while ((unint64_t)v154 >> 32 != v156);
      }
      if (HIDWORD(v905))
      {
        if (*((_BYTE *)v892 + 120))
          v762 = 4;
        else
          v762 = 12;
        v763 = WebCore::RenderGrid::guttersSize(*((WebCore::RenderElement **)v892 + 17), *((unsigned __int8 *)v892 + 120), v154, HIDWORD(v154) - (int)v154, *(_QWORD *)((char *)v892 + v762));
        if (__OFADD__(v155, v763))
          v764 = (v155 >> 31) + 0x7FFFFFFF;
        else
          v764 = v155 + v763;
        v765 = WebCore::GridTrackSizingAlgorithmStrategy::maxContentForChild(*((WebCore::GridTrackSizingAlgorithmStrategy **)v892 + 18), *v153);
        v766 = v765 - v764;
        if (__OFSUB__(v765, v764))
          v766 = (v765 >> 31) + 0x7FFFFFFF;
        v903 = v766 & ~(v766 >> 31);
        if (HIDWORD(v894))
          v767 = (uint64_t *)&v893;
        else
          v767 = (uint64_t *)&v904;
        WebCore::GridTrackSizingAlgorithm::distributeSpaceToTracks<(WebCore::TrackSizeComputationVariant)1,(WebCore::TrackSizeComputationPhase)1>((uint64_t)&v904, v767, &v903);
        v15 = v878;
        v21 = v881;
      }
      v153 += 3;
      v1 = v892;
    }
    while (v153 != v21);
    v149 = (_DWORD *)*((_QWORD *)v892 + 9);
  }
  v173 = *((unsigned int *)v1 + 21);
  if ((_DWORD)v173)
  {
    v174 = 4 * v173;
    do
    {
      if (*((_DWORD *)v148 + 3) <= *v149)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D50);
      }
      v175 = *(_QWORD *)v148 + 136 * *v149;
      v178 = *(_DWORD *)(v175 + 12);
      v177 = *(_DWORD *)(v175 + 16);
      v176 = (int *)(v175 + 12);
      *(v176 - 1) = v177;
      v179 = v177 & ~(v177 >> 31);
      if (v178 != -64 && v178 < v179)
        *v176 = v179;
      ++v149;
      v174 -= 4;
    }
    while (v174);
  }
  v181 = (WTF *)v904;
  if (HIDWORD(v905))
  {
    v298 = (WTF *)&v904[HIDWORD(v905)];
    do
    {
      v299 = *(unsigned int **)v181;
      *(_QWORD *)v181 = 0;
      if (v299)
      {
        do
        {
          v300 = __ldaxr(v299);
          v301 = v300 - 1;
        }
        while (__stlxr(v301, v299));
        if (!v301)
        {
          atomic_store(1u, v299);
          WTF::fastFree((WTF *)v299, v15);
          v15 = v878;
          v21 = v881;
        }
      }
      v181 = (WTF *)((char *)v181 + 8);
    }
    while (v181 != v298);
    v181 = (WTF *)v904;
  }
  if (v181)
  {
    v904 = 0;
    LODWORD(v905) = 0;
    WTF::fastFree(v181, v15);
    v15 = v878;
    v21 = v881;
  }
  v182 = v893;
  if (HIDWORD(v894))
  {
    v302 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
    do
    {
      v303 = *(unsigned int **)v182;
      *(_QWORD *)v182 = 0;
      if (v303)
      {
        do
        {
          v304 = __ldaxr(v303);
          v305 = v304 - 1;
        }
        while (__stlxr(v305, v303));
        if (!v305)
        {
          atomic_store(1u, v303);
          WTF::fastFree((WTF *)v303, v15);
          v15 = v878;
          v21 = v881;
        }
      }
      v182 = (WTF *)((char *)v182 + 8);
    }
    while (v182 != v302);
    v182 = v893;
  }
  if (v182)
  {
    v893 = 0;
    LODWORD(v894) = 0;
    WTF::fastFree(v182, v15);
    v15 = v878;
    v21 = v881;
  }
  if (*((_BYTE *)v1 + 120))
    v183 = (char *)v1 + 56;
  else
    v183 = (char *)v1 + 40;
  v184 = (unsigned int *)*((_QWORD *)v1 + 9);
  v185 = *((unsigned int *)v1 + 21);
  if ((_DWORD)v185)
  {
    v186 = 4 * v185;
    v187 = (_DWORD *)*((_QWORD *)v1 + 9);
    do
    {
      if (*((_DWORD *)v183 + 3) <= *v187)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D58);
      }
      *(_DWORD *)(*(_QWORD *)v183 + 136 * *v187 + 16) = *(_DWORD *)(*(_QWORD *)v183
                                                                                  + 136 * *v187
                                                                                  + 12);
      ++v187;
      v186 -= 4;
    }
    while (v186);
  }
  v893 = 0;
  v894 = 0;
  v904 = 0;
  v905 = 0;
  if (v884)
  {
    v188 = v15;
    do
    {
      v189 = (unint64_t)v188[1];
      if (HIDWORD(v905))
      {
        v197 = v904;
        v198 = &v904[HIDWORD(v905)];
        do
        {
          v199 = *v197;
          *v197 = 0;
          if (v199)
          {
            do
            {
              v200 = __ldaxr(v199);
              v201 = v200 - 1;
            }
            while (__stlxr(v201, v199));
            if (!v201)
            {
              atomic_store(1u, v199);
              WTF::fastFree((WTF *)v199, v15);
              v15 = v878;
              v21 = v881;
            }
          }
          ++v197;
        }
        while (v197 != v198);
      }
      HIDWORD(v905) = 0;
      if (HIDWORD(v894))
      {
        v202 = v893;
        v203 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
        do
        {
          v204 = *(unsigned int **)v202;
          *(_QWORD *)v202 = 0;
          if (v204)
          {
            do
            {
              v205 = __ldaxr(v204);
              v206 = v205 - 1;
            }
            while (__stlxr(v206, v204));
            if (!v206)
            {
              atomic_store(1u, v204);
              WTF::fastFree((WTF *)v204, v15);
              v15 = v878;
              v21 = v881;
            }
          }
          v202 = (WTF *)((char *)v202 + 8);
        }
        while (v202 != v203);
      }
      v190 = 0;
      HIDWORD(v894) = 0;
      if (HIDWORD(v189) != (_DWORD)v189)
      {
        v190 = 0;
        v191 = v189;
        v192 = 136 * v189 + 88;
        do
        {
          if (v191 >= *((unsigned int *)v183 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x196340DA0);
          }
          v193 = *(_QWORD *)v183;
          v194 = *(_QWORD *)v183 + v192;
          if (!*(_BYTE *)(v194 + 40))
          {
            __break(0xC471u);
            JUMPOUT(0x19633F9B0);
          }
          v195 = *(_DWORD *)(v194 - 76);
          if (v195 == -64)
            v195 = *(_DWORD *)(v193 + v192 - 80) & ~(*(int *)(v193 + v192 - 80) >> 31);
          v55 = __OFADD__(v190, v195);
          v196 = v190 + v195;
          if (v55)
            v190 = (v190 >> 31) + 0x7FFFFFFF;
          else
            v190 = v196;
          if (*(_DWORD *)(v193 + v192) == 1 && (*(_WORD *)(v193 + v192 + 32) & 0x80) != 0)
          {
            v877 = (uint64_t *)(v194 - 88);
            if (HIDWORD(v905) == (_DWORD)v905)
            {
              WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v904, v877);
            }
            else
            {
              WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v904[HIDWORD(v905)], v877);
              ++HIDWORD(v905);
            }
            if (HIDWORD(v894) == (_DWORD)v894)
            {
              WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v893, v877);
            }
            else
            {
              WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v893 + HIDWORD(v894), v877);
              ++HIDWORD(v894);
            }
            v15 = v878;
            v21 = v881;
          }
          ++v191;
          v192 += 136;
        }
        while (HIDWORD(v189) != v191);
      }
      if (HIDWORD(v905))
      {
        if (*((_BYTE *)v892 + 120))
          v768 = 4;
        else
          v768 = 12;
        v769 = WebCore::RenderGrid::guttersSize(*((WebCore::RenderElement **)v892 + 17), *((unsigned __int8 *)v892 + 120), v189, HIDWORD(v189) - (int)v189, *(_QWORD *)((char *)v892 + v768));
        if (__OFADD__(v190, v769))
          v770 = (v190 >> 31) + 0x7FFFFFFF;
        else
          v770 = v190 + v769;
        v771 = (***((uint64_t (****)(_QWORD, WebCore::RenderBox *))v892 + 18))(*((_QWORD *)v892 + 18), *v188);
        v772 = v771 - v770;
        if (__OFSUB__(v771, v770))
          v772 = (v771 >> 31) + 0x7FFFFFFF;
        v903 = v772 & ~(v772 >> 31);
        if (HIDWORD(v894))
          v773 = (uint64_t *)&v893;
        else
          v773 = (uint64_t *)&v904;
        WebCore::GridTrackSizingAlgorithm::distributeSpaceToTracks<(WebCore::TrackSizeComputationVariant)1,(WebCore::TrackSizeComputationPhase)3>((uint64_t)&v904, v773, &v903);
        v15 = v878;
        v21 = v881;
      }
      v188 += 3;
    }
    while (v188 != v21);
    v1 = v892;
    v184 = (unsigned int *)*((_QWORD *)v892 + 9);
  }
  v207 = *((unsigned int *)v1 + 21);
  if ((_DWORD)v207)
  {
    v208 = 4 * v207;
    while (1)
    {
      v209 = *v184;
      if (*((_DWORD *)v183 + 3) <= *v184)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D60);
      }
      v210 = *(_QWORD *)v183;
      v211 = *(_QWORD *)v183 + 136 * v209;
      v214 = *(_DWORD *)(v211 + 12);
      v213 = *(_DWORD *)(v211 + 16);
      v212 = (int *)(v211 + 12);
      if (v214 == -64 && v213 != -64)
        break;
      if (v213 != -64)
        goto LABEL_310;
      v219 = -64;
LABEL_1329:
      *v212 = v219;
LABEL_316:
      ++v184;
      v208 -= 4;
      if (!v208)
        goto LABEL_317;
    }
    *(_BYTE *)(v210 + 136 * v209 + 32) = 1;
LABEL_310:
    v215 = v210 + 136 * v209;
    v216 = *(unsigned __int8 *)(v215 + 28);
    v217 = *(_DWORD *)(v215 + 24);
    if (!v216)
      v217 = v213;
    if (v217 < v213)
      v213 = v217;
    *v212 = v213;
    if (v213 == -64)
      goto LABEL_316;
    v218 = *(_DWORD *)(v210 + 136 * v209 + 8);
    v219 = v218 & ~(v218 >> 31);
    if (v213 >= v219)
      goto LABEL_316;
    goto LABEL_1329;
  }
LABEL_317:
  v220 = (WTF *)v904;
  if (HIDWORD(v905))
  {
    v306 = (WTF *)&v904[HIDWORD(v905)];
    do
    {
      v307 = *(unsigned int **)v220;
      *(_QWORD *)v220 = 0;
      if (v307)
      {
        do
        {
          v308 = __ldaxr(v307);
          v309 = v308 - 1;
        }
        while (__stlxr(v309, v307));
        if (!v309)
        {
          atomic_store(1u, v307);
          WTF::fastFree((WTF *)v307, v15);
          v15 = v878;
          v21 = v881;
        }
      }
      v220 = (WTF *)((char *)v220 + 8);
    }
    while (v220 != v306);
    v220 = (WTF *)v904;
  }
  if (v220)
  {
    v904 = 0;
    LODWORD(v905) = 0;
    WTF::fastFree(v220, v15);
    v15 = v878;
    v21 = v881;
  }
  v221 = v893;
  if (HIDWORD(v894))
  {
    v310 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
    do
    {
      v311 = *(unsigned int **)v221;
      *(_QWORD *)v221 = 0;
      if (v311)
      {
        do
        {
          v312 = __ldaxr(v311);
          v313 = v312 - 1;
        }
        while (__stlxr(v313, v311));
        if (!v313)
        {
          atomic_store(1u, v311);
          WTF::fastFree((WTF *)v311, v15);
          v15 = v878;
          v21 = v881;
        }
      }
      v221 = (WTF *)((char *)v221 + 8);
    }
    while (v221 != v310);
    v221 = v893;
  }
  if (v221)
  {
    v893 = 0;
    LODWORD(v894) = 0;
    WTF::fastFree(v221, v15);
    v15 = v878;
    v21 = v881;
  }
  if (*((_BYTE *)v1 + 120))
    v222 = (char *)v1 + 56;
  else
    v222 = (char *)v1 + 40;
  v223 = (unsigned int *)*((_QWORD *)v1 + 9);
  v224 = *((unsigned int *)v1 + 21);
  if ((_DWORD)v224)
  {
    v225 = 4 * v224;
    v226 = (_DWORD *)*((_QWORD *)v1 + 9);
    do
    {
      if (*((_DWORD *)v222 + 3) <= *v226)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D68);
      }
      *(_DWORD *)(*(_QWORD *)v222 + 136 * *v226 + 16) = *(_DWORD *)(*(_QWORD *)v222
                                                                                  + 136 * *v226
                                                                                  + 12);
      ++v226;
      v225 -= 4;
    }
    while (v225);
  }
  v893 = 0;
  v894 = 0;
  v904 = 0;
  v905 = 0;
  if (v884)
  {
    do
    {
      v227 = v15[1];
      if (HIDWORD(v905))
      {
        v235 = v904;
        v236 = &v904[HIDWORD(v905)];
        do
        {
          v237 = *v235;
          *v235 = 0;
          if (v237)
          {
            do
            {
              v238 = __ldaxr(v237);
              v239 = v238 - 1;
            }
            while (__stlxr(v239, v237));
            if (!v239)
            {
              atomic_store(1u, v237);
              v733 = v15;
              WTF::fastFree((WTF *)v237, v15);
              v21 = v881;
              v15 = v733;
            }
          }
          ++v235;
        }
        while (v235 != v236);
      }
      HIDWORD(v905) = 0;
      if (HIDWORD(v894))
      {
        v240 = v893;
        v241 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
        do
        {
          v242 = *(unsigned int **)v240;
          *(_QWORD *)v240 = 0;
          if (v242)
          {
            do
            {
              v243 = __ldaxr(v242);
              v244 = v243 - 1;
            }
            while (__stlxr(v244, v242));
            if (!v244)
            {
              atomic_store(1u, v242);
              v734 = v15;
              WTF::fastFree((WTF *)v242, v15);
              v21 = v881;
              v15 = v734;
            }
          }
          v240 = (WTF *)((char *)v240 + 8);
        }
        while (v240 != v241);
      }
      v228 = 0;
      HIDWORD(v894) = 0;
      if (HIDWORD(v227) != (_DWORD)v227)
      {
        v228 = 0;
        v229 = v227;
        v230 = 136 * v227 + 88;
        do
        {
          if (v229 >= *((unsigned int *)v222 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x196340DA8);
          }
          v231 = *(_QWORD *)v222;
          v232 = *(_QWORD *)v222 + v230;
          if (!*(_BYTE *)(v232 + 40))
          {
            __break(0xC471u);
            JUMPOUT(0x19633F9D0);
          }
          v233 = *(_DWORD *)(v232 - 76);
          if (v233 == -64)
            v233 = *(_DWORD *)(v231 + v230 - 80) & ~(*(int *)(v231 + v230 - 80) >> 31);
          v55 = __OFADD__(v228, v233);
          v234 = v228 + v233;
          if (v55)
            v228 = (v228 >> 31) + 0x7FFFFFFF;
          else
            v228 = v234;
          if (*(_DWORD *)(v231 + v230) == 1 && (*(_WORD *)(v231 + v230 + 32) & 0x12) != 0)
          {
            v880 = v15;
            v891 = (uint64_t *)(v232 - 88);
            if (HIDWORD(v905) == (_DWORD)v905)
            {
              WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v904, v891);
            }
            else
            {
              WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v904[HIDWORD(v905)], v891);
              ++HIDWORD(v905);
            }
            if (HIDWORD(v894) == (_DWORD)v894)
            {
              WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>((uint64_t)&v893, v891);
            }
            else
            {
              WTF::WeakPtr<WebCore::CSSParserObserverWrapper,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v893 + HIDWORD(v894), v891);
              ++HIDWORD(v894);
            }
            v15 = v880;
            v21 = v881;
          }
          ++v229;
          v230 += 136;
        }
        while ((unint64_t)v227 >> 32 != v229);
      }
      if (HIDWORD(v905))
      {
        v774 = v15;
        if (*((_BYTE *)v892 + 120))
          v775 = 4;
        else
          v775 = 12;
        v776 = WebCore::RenderGrid::guttersSize(*((WebCore::RenderElement **)v892 + 17), *((unsigned __int8 *)v892 + 120), v227, HIDWORD(v227) - (int)v227, *(_QWORD *)((char *)v892 + v775));
        if (__OFADD__(v228, v776))
          v777 = (v228 >> 31) + 0x7FFFFFFF;
        else
          v777 = v228 + v776;
        v778 = WebCore::GridTrackSizingAlgorithmStrategy::maxContentForChild(*((WebCore::GridTrackSizingAlgorithmStrategy **)v892 + 18), *v774);
        v779 = v778 - v777;
        if (__OFSUB__(v778, v777))
          v779 = (v778 >> 31) + 0x7FFFFFFF;
        v903 = v779 & ~(v779 >> 31);
        if (HIDWORD(v894))
          v780 = (uint64_t *)&v893;
        else
          v780 = (uint64_t *)&v904;
        WebCore::GridTrackSizingAlgorithm::distributeSpaceToTracks<(WebCore::TrackSizeComputationVariant)1,(WebCore::TrackSizeComputationPhase)4>((uint64_t)&v904, v780, &v903);
        v21 = v881;
        v15 = v774;
      }
      v15 += 3;
    }
    while (v15 != v21);
    v1 = v892;
    v223 = (unsigned int *)*((_QWORD *)v892 + 9);
  }
  v245 = *((unsigned int *)v1 + 21);
  if ((_DWORD)v245)
  {
    v246 = 4 * v245;
    do
    {
      v247 = *v223;
      if (*((_DWORD *)v222 + 3) <= *v223)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D70);
      }
      v248 = *(_QWORD *)v222;
      v249 = *(_QWORD *)v222 + 136 * v247;
      v251 = *(unsigned __int8 *)(v249 + 32);
      v250 = (_BYTE *)(v249 + 32);
      if (v251)
        *v250 = 0;
      v252 = *(_DWORD *)(v248 + 136 * v247 + 16);
      if (v252 == -64)
      {
        *(_DWORD *)(v248 + 136 * v247 + 12) = -64;
      }
      else
      {
        v253 = v248 + 136 * v247;
        if (*(_BYTE *)(v253 + 28))
          v254 = *(_DWORD *)(v253 + 24);
        else
          v254 = *(_DWORD *)(v248 + 136 * v247 + 16);
        if (v254 < v252)
          v252 = v254;
        *(_DWORD *)(v253 + 12) = v252;
        v255 = (int *)(v253 + 12);
        if (v252 != -64)
        {
          v256 = *(_DWORD *)(v248 + 136 * v247 + 8);
          v257 = v256 & ~(v256 >> 31);
          if (v252 < v257)
            *v255 = v257;
        }
      }
      ++v223;
      v246 -= 4;
    }
    while (v246);
  }
  v258 = (WTF *)v904;
  if (HIDWORD(v905))
  {
    v314 = (WTF *)&v904[HIDWORD(v905)];
    v259 = v869;
    do
    {
      v315 = *(unsigned int **)v258;
      *(_QWORD *)v258 = 0;
      if (v315)
      {
        do
        {
          v316 = __ldaxr(v315);
          v317 = v316 - 1;
        }
        while (__stlxr(v317, v315));
        if (!v317)
        {
          atomic_store(1u, v315);
          WTF::fastFree((WTF *)v315, v15);
        }
      }
      v258 = (WTF *)((char *)v258 + 8);
    }
    while (v258 != v314);
    v258 = (WTF *)v904;
  }
  else
  {
    v259 = v869;
  }
  if (v258)
  {
    v904 = 0;
    LODWORD(v905) = 0;
    WTF::fastFree(v258, v15);
  }
  v260 = v893;
  if (HIDWORD(v894))
  {
    v318 = (WTF *)((char *)v893 + 8 * HIDWORD(v894));
    do
    {
      v319 = *(unsigned int **)v260;
      *(_QWORD *)v260 = 0;
      if (v319)
      {
        do
        {
          v320 = __ldaxr(v319);
          v321 = v320 - 1;
        }
        while (__stlxr(v321, v319));
        if (!v321)
        {
          atomic_store(1u, v319);
          WTF::fastFree((WTF *)v319, v15);
        }
      }
      v260 = (WTF *)((char *)v260 + 8);
    }
    while (v260 != v318);
    v260 = v893;
  }
  if (v260)
  {
    v893 = 0;
    LODWORD(v894) = 0;
    WTF::fastFree(v260, v15);
  }
  v261 = *((unsigned int *)v1 + 21);
  if ((_DWORD)v261)
  {
    v262 = (unsigned int *)*((_QWORD *)v1 + 9);
    v263 = 4 * v261;
    do
    {
      v264 = *v262;
      if (*((_DWORD *)v259 + 3) <= *v262)
      {
        __break(0xC471u);
        JUMPOUT(0x196340D18);
      }
      v265 = *v259;
      v266 = *v259 + 136 * v264;
      v268 = *(_DWORD *)(v266 + 12);
      v267 = (int *)(v266 + 12);
      if (v268 == -64)
      {
        v269 = v265 + 136 * v264;
        v270 = *(_DWORD *)(v269 + 8) & ~(*(int *)(v269 + 8) >> 31);
        if (*(_BYTE *)(v269 + 28))
          v271 = *(_DWORD *)(v265 + 136 * v264 + 24);
        else
          v271 = *(_DWORD *)(v269 + 8) & ~(*(int *)(v269 + 8) >> 31);
        if (v271 >= v270)
          v272 = *(_DWORD *)(v269 + 8) & ~(*(int *)(v269 + 8) >> 31);
        else
          v272 = v271;
        if (v270 <= v271 || v272 == -64)
          v274 = v272;
        else
          v274 = *(_DWORD *)(v269 + 8) & ~(*(int *)(v269 + 8) >> 31);
        *v267 = v274;
      }
      ++v262;
      v263 -= 4;
    }
    while (v263);
  }
  WebCore::GridTrackSizingAlgorithm::MasonryIndefiniteItems::~MasonryIndefiniteItems((WebCore::GridTrackSizingAlgorithm::MasonryIndefiniteItems *)v897, v15);
  v276 = v898[0];
  if (v898[0])
  {
    v279 = *(unsigned int *)(v898[0] - 4);
    if ((_DWORD)v279)
    {
      v280 = (WTF **)v898[0];
      do
      {
        v281 = *v280;
        if (*v280 != (WTF *)-1)
        {
          *v280 = 0;
          if (v281)
          {
            if (*(_DWORD *)v281 == 1)
              WTF::fastFree(v281, v275);
            else
              --*(_DWORD *)v281;
          }
        }
        ++v280;
        --v279;
      }
      while (v279);
    }
    WTF::fastFree((WTF *)(v276 - 16), v275);
  }
  v277 = (WTF *)v899;
  if (v899)
  {
    v899 = 0;
    LODWORD(v900) = 0;
    WTF::fastFree(v277, v275);
  }
  result = (unsigned int *)v901;
  if (v901)
  {
    v901 = 0;
    LODWORD(v902) = 0;
    return (unsigned int *)WTF::fastFree((WTF *)result, v275);
  }
  return result;
}

unsigned int *WebCore::GridTrackSizingAlgorithm::resolveIntrinsicTrackSizes(void)::$_0::operator()(unsigned int *result, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v14;

  if (a2)
  {
    v3 = 4 * a2;
    while (1)
    {
      v4 = *result;
      if (*((_DWORD *)a3 + 3) <= *result)
        break;
      v5 = *a3;
      v6 = *a3 + 136 * v4;
      v8 = *(_DWORD *)(v6 + 12);
      v7 = (int *)(v6 + 12);
      if (v8 == -64)
      {
        v9 = v5 + 136 * v4;
        v10 = *(_DWORD *)(v9 + 8) & ~(*(int *)(v9 + 8) >> 31);
        if (*(_BYTE *)(v9 + 28))
          v11 = *(_DWORD *)(v5 + 136 * v4 + 24);
        else
          v11 = *(_DWORD *)(v9 + 8) & ~(*(int *)(v9 + 8) >> 31);
        if (v11 >= v10)
          v12 = *(_DWORD *)(v9 + 8) & ~(*(int *)(v9 + 8) >> 31);
        else
          v12 = v11;
        if (v10 <= v11 || v12 == -64)
          v14 = v12;
        else
          v14 = *(_DWORD *)(v9 + 8) & ~(*(int *)(v9 + 8) >> 31);
        *v7 = v14;
      }
      ++result;
      v3 -= 4;
      if (!v3)
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::GridTrackSizingAlgorithm::resolveIntrinsicTrackSizes(void)::$_1::operator()(uint64_t result, int32x2_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _BOOL8 v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  __int32 v38;
  __int32 v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int i;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int j;
  uint64_t v64;
  unint64_t v65;
  int v66;
  char v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  _BOOL4 v73;
  _BYTE v74[12];
  WebCore::GridTrackSizingAlgorithmStrategy *v75;
  unsigned int v76;
  int v77[2];
  char v79[24];
  unsigned int v80;
  unsigned int v81;

  v2 = *(unsigned int *)(result + 84);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *(unsigned int **)(result + 72);
    v5 = &v4[v2];
    *(_QWORD *)v77 = a2 + 4;
    v6 = &unk_1EE2F9000;
    do
    {
      v7 = 0;
      v8 = *(_QWORD *)(v3 + 128);
      v9 = *(unsigned __int8 *)(v3 + 120);
      v10 = *(_BYTE *)(v3 + 120) == 0;
      if (*(_BYTE *)(v3 + 120))
        v11 = *v4;
      else
        v11 = 0;
      if (*(_BYTE *)(v3 + 120))
        v12 = 0;
      else
        v12 = *v4;
      v80 = v12;
      v81 = v11;
      while (1)
      {
        v13 = *(_DWORD *)(v8 + 100);
        if (v9)
        {
          if (!v13)
            break;
          v14 = *(_DWORD *)(*(_QWORD *)(v8 + 88) + 12);
          v15 = &v80;
          v16 = v12;
        }
        else
        {
          v15 = &v81;
          v16 = v11;
          v14 = *(_DWORD *)(v8 + 100);
        }
        if (v16 >= v14)
          break;
        if ((v6[776] & 1) != 0)
        {
          if (!v11)
            goto LABEL_16;
        }
        else
        {
          WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell = (uint64_t)&unk_1EE2F9300;
          qword_1EE2F92F8 = 1;
          v6[776] = 1;
          if (!v11)
            goto LABEL_16;
        }
        if (v13 <= v11)
        {
LABEL_135:
          __break(0xC471u);
          JUMPOUT(0x19634178CLL);
        }
        v17 = *(_QWORD *)(v8 + 88);
        if (*(_DWORD *)(v17 + 16 * v11 + 12) <= v12)
        {
          v19 = &WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell;
          goto LABEL_19;
        }
LABEL_16:
        if (v13 <= v11)
        {
LABEL_133:
          __break(0xC471u);
          JUMPOUT(0x19634177CLL);
        }
        v17 = *(_QWORD *)(v8 + 88);
        v18 = v17 + 16 * v11;
        if (*(_DWORD *)(v18 + 12) <= v12)
        {
LABEL_134:
          __break(0xC471u);
          JUMPOUT(0x196341784);
        }
        v19 = (uint64_t *)(*(_QWORD *)v18 + 24 * v12);
LABEL_19:
        if (*((unsigned int *)v19 + 3) <= v7)
        {
          *v15 = v16 + 1;
          if (v16 + 1 >= v14)
            break;
          v20 = v14 - 1;
          while (1)
          {
            v12 = v80;
            v11 = v81;
            if (!v81)
              goto LABEL_145;
            if (v13 <= v81)
              goto LABEL_135;
            if (*(_DWORD *)(v17 + 16 * v81 + 12) <= v80)
            {
              v19 = &WebCore::Grid::cell(unsigned int,unsigned int)const::emptyCell;
            }
            else
            {
LABEL_145:
              if (v13 <= v81)
                goto LABEL_133;
              v21 = v17 + 16 * v81;
              if (*(_DWORD *)(v21 + 12) <= v80)
                goto LABEL_134;
              v19 = (uint64_t *)(*(_QWORD *)v21 + 24 * v80);
            }
            if (*((_DWORD *)v19 + 3))
              break;
            *v15 = v16 + 2;
            if (v20 == ++v16)
              goto LABEL_130;
          }
          v7 = 0;
        }
        v22 = *(_QWORD *)(*v19 + 8 * v7);
        if (!v22)
          break;
        v23 = *(_QWORD *)(v22 + 8);
        if (!v23)
          break;
        ++*(_DWORD *)(v23 + 16);
        result = WebCore::GridPositionsResolver::resolveGridPositionsFromStyle(*(WebCore::GridPositionsResolver **)(v3 + 136), (WebCore::RenderElement *)v23, (WTF::StringImpl *)*(unsigned __int8 *)(v3 + 120));
        if (v24 == 2)
        {
          v25 = WebCore::RenderGrid::gridSpanForChild(*(_QWORD *)(v3 + 136), v23, *(unsigned __int8 *)(v3 + 120));
          if (*(_BYTE *)(v23 + 46) != 12)
            goto LABEL_46;
          v26 = *(_QWORD *)(v23 + 32);
          if (!v26)
            goto LABEL_47;
          v26 = *(_QWORD *)(v26 + 8);
          if (!v26)
            goto LABEL_47;
          if (*(_BYTE *)(v26 + 46) != 12)
          {
LABEL_46:
            LOBYTE(v26) = 0;
            goto LABEL_47;
          }
          v75 = (WebCore::GridTrackSizingAlgorithmStrategy *)v25;
          v73 = v9;
          if (((*(_BYTE *)(v23 + 21) & 0x10) == 0) != ((*(_BYTE *)(v26 + 21) & 0x10) == 0))
            v73 = v10;
          if (WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v23))
            goto LABEL_100;
          v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 88) + 40) + 80);
          v25 = (unint64_t)v75;
          if (!v73)
          {
            LODWORD(v26) = *(unsigned __int8 *)(v26 + 259);
            if ((_DWORD)v26)
              goto LABEL_95;
            goto LABEL_47;
          }
          LODWORD(v26) = *(unsigned __int8 *)(v26 + 258);
          if (!(_DWORD)v26)
            goto LABEL_47;
LABEL_95:
          v26 = *(_QWORD *)(v23 + 32);
          if (!v26)
            goto LABEL_116;
          v52 = *(_QWORD *)(v26 + 8);
          if (!v52 || *(_BYTE *)(v52 + 46) != 12)
          {
LABEL_100:
            LOBYTE(v26) = 0;
            goto LABEL_116;
          }
          if (v73)
          {
            v53 = WebCore::RenderGrid::areMasonryRows((WebCore::RenderGrid *)v52);
          }
          else
          {
            do
            {
              v54 = v52;
              v55 = *(_QWORD *)(v52 + 32);
              if (!v55)
                break;
              v52 = *(_QWORD *)(v55 + 8);
              if (!v52)
                break;
            }
            while (*(_BYTE *)(v52 + 46) == 12
                 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 88) + 40) + 80) + 259));
            v56 = v54;
            do
            {
              v57 = v56;
              v58 = *(_QWORD *)(v56 + 32);
              if (!v58)
                break;
              v56 = *(_QWORD *)(v58 + 8);
              if (!v56)
                break;
            }
            while (*(_BYTE *)(v56 + 46) == 12
                 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 88) + 40) + 80) + 258));
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 88) + 40) + 80) + 260))
              v53 = 0;
            else
              v53 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 88) + 40) + 80) + 261) != 0;
          }
          LOBYTE(v26) = v53 ^ 1;
LABEL_116:
          v25 = (unint64_t)v75;
LABEL_47:
          if (HIDWORD(v25) - (_DWORD)v25 != 1 || (v26 & 1) != 0)
          {
            v37 = (uint64_t)a2;
          }
          else
          {
            *(_DWORD *)v74 = (***(uint64_t (****)(_QWORD, uint64_t))(v3 + 144))(*(_QWORD *)(v3 + 144), v23);
            v27 = *(uint64_t **)(v3 + 144);
            v28 = v27[1];
            v29 = ((*(_BYTE *)(v23 + 21) & 0x10) == 0) != ((*(_BYTE *)(*(_QWORD *)(v28 + 136) + 21) & 0x10) == 0);
            *(_QWORD *)&v74[4] = v27;
            if (*(_BYTE *)(v28 + 120) == v29)
            {
              v71 = ((*(_BYTE *)(v23 + 21) & 0x10) == 0) != ((*(_BYTE *)(*(_QWORD *)(v28 + 136) + 21) & 0x10) == 0);
              if (((*(uint64_t (**)(uint64_t *))(*v27 + 64))(v27) & 1) != 0)
              {
                *(_DWORD *)&v74[4] = 0;
              }
              else
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 1520))(v23))
                  WebCore::RenderObject::setPreferredLogicalWidthsDirty(v23, 1, 1);
                v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 416))(v23);
                v30 = WebCore::GridLayoutFunctions::marginLogicalSizeForChild(*(WebCore::RenderBlock **)(*(_QWORD *)(*(_QWORD *)&v74[4] + 8) + 136), v71, (WebCore::RenderBox *)v23);
                if (__OFADD__(v69, v30))
                  v31 = (v69 >> 31) + 0x7FFFFFFF;
                else
                  v31 = v69 + v30;
                v32 = *(_QWORD *)(*(_QWORD *)&v74[4] + 8);
                if (*(_BYTE *)(v32 + 120))
                  v33 = 2;
                else
                  v33 = 1;
                if (*(_BYTE *)(v32 + 120))
                {
                  if (!*(_DWORD *)(v32 + 68) || (v34 = *(_QWORD *)(v32 + 200)) == 0)
                  {
                    v35 = 0;
                    goto LABEL_63;
                  }
                  v44 = *(_QWORD *)(*(_QWORD *)&v74[4] + 8);
                  v76 = v31;
                  v72 = *(_BYTE *)(v32 + 120) != 0;
                  v45 = 0;
                  v46 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
                  v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
                  v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
                  for (i = (v48 >> 31) ^ v48; ; i = v45 + v50)
                  {
                    v50 = i & *(_DWORD *)(v34 - 8);
                    v51 = *(_QWORD *)(v34 + 16 * v50);
                    if (v51 != -1)
                    {
                      if (!v51)
                        goto LABEL_103;
                      if (*(_QWORD *)(v51 + 8) == v23)
                        break;
                    }
                    ++v45;
                  }
LABEL_123:
                  if (*(_BYTE *)(v34 + 16 * v50 + 8))
                  {
                    v70 = v44;
                    v68 = v33;
                    v67 = WebCore::RenderGrid::selfAlignmentForChild(*(_QWORD *)(v44 + 136), v33, (WebCore::RenderElement *)v23, 0);
                    v65 = WebCore::RenderGrid::gridSpanForChild(*(_QWORD *)(v70 + 136), v23, v72);
                    if ((v67 & 0xF) == 4)
                      v66 = v65;
                    else
                      v66 = HIDWORD(v65) - 1;
                    v35 = WebCore::GridBaselineAlignment::baselineOffsetForChild((_BYTE *)(v70 + 176), v67 & 0xF, v66, (_DWORD *)v23, v68);
                    goto LABEL_128;
                  }
                }
                else
                {
                  v76 = v31;
                  v72 = *(_BYTE *)(v32 + 120) != 0;
                  if (*(_DWORD *)(v32 + 52))
                  {
                    v44 = v32;
                    v34 = *(_QWORD *)(v32 + 208);
                    if (v34)
                    {
                      v59 = 0;
                      v60 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
                      v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
                      v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
                      for (j = (v62 >> 31) ^ v62; ; j = v59 + v50)
                      {
                        v50 = j & *(_DWORD *)(v34 - 8);
                        v64 = *(_QWORD *)(v34 + 16 * v50);
                        if (v64 != -1)
                        {
                          if (!v64)
                            goto LABEL_103;
                          if (*(_QWORD *)(v64 + 8) == v23)
                            break;
                        }
                        ++v59;
                      }
                      goto LABEL_123;
                    }
                  }
                }
LABEL_103:
                v35 = 0;
LABEL_128:
                v31 = v76;
LABEL_63:
                v36 = v31 + v35;
                if (__OFADD__(v31, v35))
                  v36 = (v31 >> 31) + 0x7FFFFFFF;
                *(_DWORD *)&v74[4] = v36;
              }
            }
            else
            {
              if (WebCore::GridTrackSizingAlgorithmStrategy::updateOverridingContainingBlockContentSizeForChild(v27, v23, v29, 0))
              {
                v41 = *(_DWORD *)(v23 + 20);
                if ((v41 & 8) == 0)
                {
                  *(_DWORD *)(v23 + 20) = v41 | 8;
                  if ((v41 & 0x8000) != 0)
                  {
                    if ((*(_BYTE *)(v23 + 45) & 0x10) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963417ACLL);
                    }
                    v42 = *(_QWORD *)(v23 + 144);
                    if (v42)
                    {
                      v43 = *(_DWORD *)(v42 + 8) + 1;
                      *(_DWORD *)(v42 + 8) = v43;
                    }
                    else
                    {
                      v43 = MEMORY[8];
                    }
                    *(_QWORD *)(v42 + 24) = *(_QWORD *)(v42 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                    if (!v43)
                    {
LABEL_137:
                      __break(0xC471u);
                      JUMPOUT(0x196341774);
                    }
                    *(_DWORD *)(v42 + 8) = v43 - 1;
                  }
                }
              }
              *(_DWORD *)&v74[4] = WebCore::GridTrackSizingAlgorithmStrategy::logicalHeightForChild(*(WebCore::GridTrackSizingAlgorithmStrategy **)&v74[4], (WebCore::RenderBox *)v23);
            }
            v38 = WebCore::GridTrackSizingAlgorithmStrategy::minSizeForChild(*(WebCore::GridTrackSizingAlgorithmStrategy **)(v3 + 144), (WebCore::RenderBox *)v23);
            a2[8] = vmax_s32(a2[8], *(int32x2_t *)v74);
            v39 = a2[9].i32[0];
            if (v39 <= v38)
              v39 = v38;
            a2[9].i32[0] = v39;
            v37 = *(_QWORD *)v77;
          }
          result = WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>(v37, (_QWORD *)v23, (uint64_t)v79);
        }
        v40 = *(_DWORD *)(v23 + 16);
        if (!v40)
          goto LABEL_137;
        ++v7;
        *(_DWORD *)(v23 + 16) = v40 - 1;
        v6 = (_BYTE *)&unk_1EE2F9000;
      }
LABEL_130:
      ++v4;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t WebCore::GridTrackSizingAlgorithm::setup(uint64_t a1, void *a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t (**v28)(WebCore::DefiniteSizeStrategy *__hidden, WebCore::RenderBox *);
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  WTF *v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int **v50;
  unsigned int **v51;
  __int128 v52;
  __int128 v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _BYTE *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  float v76;
  int v77;
  unsigned int *v78;
  unsigned int v79;
  int v80;
  int v81;
  float v82;
  double v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  float v88;
  double v89;
  float v90;
  double v91;
  float v92;
  uint64_t v93;
  _QWORD *v94;
  int v95;
  uint64_t **v96;
  uint64_t result;
  void *v98;
  uint64_t v99;
  WTF **v100;
  uint64_t v101;
  WTF **v102;
  WTF **v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  WebCore::RenderElement *v110;
  char v111;
  unint64_t v112;
  int v113;
  WTF **v114;
  unsigned int *v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  _DWORD *v128;
  int v129;
  int v130;
  int v131;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  _DWORD *v147;
  int v148;
  int v149;
  int v150;
  unsigned int v152;
  BOOL v153;
  uint64_t v154;
  WTF **v155;
  WTF *v156;
  char v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  _QWORD *v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  char v172;
  WTF **v173;

  v6 = a5;
  v9 = (int)a2;
  v10 = a1;
  *(_BYTE *)(a1 + 120) = (_BYTE)a2;
  v11 = a5 & 0xFF00000000;
  v12 = (int)a5 > 0 || v11 == 0;
  v13 = a5;
  if (!v12)
    v13 = 0;
  v14 = 4;
  if (!(_DWORD)a2)
    v14 = 12;
  v161 = a1 + 12;
  v162 = a1 + 4;
  if ((_DWORD)a2)
    v15 = (uint64_t *)(a1 + 4);
  else
    v15 = (uint64_t *)(a1 + 12);
  v16 = a1 + v14;
  *(_BYTE *)(v16 + 4) = (a5 & 0xFF00000000) != 0;
  *(_DWORD *)v16 = v13;
  v17 = *(_QWORD *)(a6 + 8);
  if (v17)
    goto LABEL_350;
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = a6;
  v19 = *(unsigned int **)(a6 + 8);
  *(_QWORD *)(a6 + 8) = v17;
  if (!v19)
    goto LABEL_350;
  do
  {
    v20 = __ldaxr(v19);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v19));
  if (!v21)
  {
    atomic_store(1u, v19);
    WTF::fastFree((WTF *)v19, a2);
  }
  v17 = *(_QWORD *)(a6 + 8);
  if (v17)
  {
LABEL_350:
    do
      v22 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v22 + 1, (unsigned int *)v17));
  }
  v23 = *(unsigned int **)(v10 + 152);
  *(_QWORD *)(v10 + 152) = v17;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  *(_BYTE *)(v10 + 121) = a4;
  if (a4)
  {
    if (a4 != 1)
      goto LABEL_28;
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v27 = v26;
    v28 = &off_1E341E528;
  }
  else
  {
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v27 = v26;
    v28 = &off_1E341E598;
  }
  *v26 = v28;
  v26[1] = v10;
  v29 = *(_QWORD *)(v10 + 144);
  *(_QWORD *)(v10 + 144) = v27;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
LABEL_28:
  *(_DWORD *)(v10 + 84) = 0;
  *(_DWORD *)(v10 + 100) = 0;
  *(_DWORD *)(v10 + 116) = 0;
  if (v11)
  {
    v30 = *(_QWORD *)(v10 + 128);
    v31 = *(_DWORD *)(v30 + 100);
    if (v9 != 1 && v31)
      v31 = *(_DWORD *)(*(_QWORD *)(v30 + 88) + 12);
    v32 = WebCore::RenderGrid::guttersSize(*(WebCore::RenderElement **)(v10 + 136), v9, 0, v31, *v15);
    LODWORD(v33) = v6 - v32;
    if (__OFSUB__(v6, v32))
      v33 = (v6 >> 31) + 0x7FFFFFFF;
    else
      v33 = v33;
    v34 = v33 | 0x100000000;
  }
  else
  {
    v34 = 0;
  }
  v35 = 28;
  if (!v9)
    v35 = 20;
  v36 = v10 + v35;
  *(_BYTE *)(v36 + 4) = BYTE4(v34);
  *(_DWORD *)v36 = v34;
  if (v9)
    v37 = v10 + 56;
  else
    v37 = v10 + 40;
  v38 = *(_DWORD *)(v37 + 12);
  v166 = v10;
  if (v38 < a3)
  {
    v39 = *(unsigned int *)(v37 + 8);
    v40 = *(WTF **)v37;
    if (v39 < a3)
    {
      v41 = v39 + (v39 >> 2);
      if (v41 >= 0x10)
        v42 = v41 + 1;
      else
        v42 = 16;
      if (v42 <= a3)
        v42 = a3;
      if (v42 >= 0x1E1E1E2)
      {
        __break(0xC471u);
        JUMPOUT(0x196342858);
      }
      v43 = 136 * v42;
      v44 = WTF::fastMalloc((WTF *)(136 * v42));
      *(_DWORD *)(v37 + 8) = (v43 & 0xFFFFFFF8) / 0x88;
      *(_QWORD *)v37 = v44;
      if (v38)
      {
        v50 = (unsigned int **)((char *)v40 + 136 * v38);
        v51 = (unsigned int **)v40;
        do
        {
          *(_QWORD *)v44 = 0;
          v52 = *(_OWORD *)(v51 + 1);
          v53 = *(_OWORD *)((char *)v51 + 17);
          *(_BYTE *)(v44 + 40) = 0;
          *(_OWORD *)(v44 + 17) = v53;
          *(_OWORD *)(v44 + 8) = v52;
          *(_BYTE *)(v44 + 128) = 0;
          if (*((_BYTE *)v51 + 128))
          {
            WebCore::GridTrackSize::GridTrackSize(v44 + 40, (uint64_t)(v51 + 5));
            *(_BYTE *)(v44 + 128) = 1;
            if (*((_BYTE *)v51 + 128))
            {
              if (*((_BYTE *)v51 + 100) == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v51 + 24));
              }
              if (*((_BYTE *)v51 + 76) == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v51 + 18));
              }
              if (*((_BYTE *)v51 + 52) == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v51 + 12));
              }
            }
          }
          if (*v51)
          {
            *((_QWORD *)*v51 + 1) = 0;
            v54 = *v51;
            *v51 = 0;
            if (v54)
            {
              do
              {
                v55 = __ldaxr(v54);
                v56 = v55 - 1;
              }
              while (__stlxr(v56, v54));
              if (!v56)
              {
                atomic_store(1u, v54);
                WTF::fastFree((WTF *)v54, a2);
              }
            }
          }
          else
          {
            *v51 = 0;
          }
          v44 += 136;
          v51 += 17;
        }
        while (v51 != v50);
        v44 = *(_QWORD *)v37;
        if (v40)
          goto LABEL_52;
      }
      else if (v40)
      {
LABEL_52:
        if ((WTF *)v44 == v40)
        {
          *(_QWORD *)v37 = 0;
          *(_DWORD *)(v37 + 8) = 0;
        }
        WTF::fastFree(v40, a2);
        v40 = *(WTF **)v37;
        goto LABEL_103;
      }
      v40 = (WTF *)v44;
    }
LABEL_103:
    if (v40)
    {
      v57 = *(_DWORD *)(v37 + 12);
      if (v57 != a3)
        bzero((char *)v40 + 136 * v57, 136 * ((136 * a3 - 136 * (unint64_t)v57 - 136) / 0x88) + 136);
    }
    goto LABEL_106;
  }
  if (v38 != a3)
  {
    v45 = *(_QWORD *)v37 + 136 * v38;
    v46 = *(_QWORD *)v37 + 136 * a3;
    do
    {
      if (*(_BYTE *)(v46 + 128))
      {
        if (*(_BYTE *)(v46 + 100) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v46 + 96));
        }
        if (*(_BYTE *)(v46 + 76) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v46 + 72));
        }
        if (*(_BYTE *)(v46 + 52) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v46 + 48));
        }
      }
      if (*(_QWORD *)v46)
      {
        *(_QWORD *)(*(_QWORD *)v46 + 8) = 0;
        v47 = *(unsigned int **)v46;
        *(_QWORD *)v46 = 0;
        if (v47)
        {
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            atomic_store(1u, v47);
            WTF::fastFree((WTF *)v47, a2);
          }
        }
      }
      else
      {
        *(_QWORD *)v46 = 0;
      }
      v46 += 136;
    }
    while (v46 != v45);
  }
LABEL_106:
  *(_DWORD *)(v37 + 12) = a3;
  *(_WORD *)v10 = 0;
  *(_BYTE *)(v10 + 2) = 0;
  v58 = *(unsigned __int8 *)(v10 + 120);
  if (v58 != 1)
    goto LABEL_180;
  v59 = *(unsigned __int8 *)(v10 + 168);
  if (v59 != 1 && v59 != 4)
  {
    v64 = (_BYTE *)(v10 + 176);
    goto LABEL_184;
  }
  v60 = *(_QWORD *)(v10 + 216);
  if (!v60)
  {
    v61 = 0;
    v62 = 0;
LABEL_111:
    v63 = (_QWORD *)(v60 + 8 * v62);
    goto LABEL_119;
  }
  v62 = *(unsigned int *)(v60 - 4);
  v63 = (_QWORD *)(v60 + 8 * v62);
  if (!*(_DWORD *)(v60 - 12))
  {
    v61 = (_QWORD *)(v60 + 8 * v62);
    goto LABEL_111;
  }
  v61 = *(_QWORD **)(v10 + 216);
  if ((_DWORD)v62)
  {
    v65 = 8 * v62;
    v61 = *(_QWORD **)(v10 + 216);
    while ((unint64_t)(*v61 + 1) <= 1)
    {
      ++v61;
      v65 -= 8;
      if (!v65)
      {
        v61 = v63;
        break;
      }
    }
  }
LABEL_119:
  v167 = v10 + 216;
  v168 = v61;
  v169 = v63;
  if (v60)
  {
    v67 = *(unsigned int *)(v60 - 4);
    v66 = (_QWORD *)(v60 + 8 * v67);
  }
  else
  {
    v66 = 0;
    v67 = 0;
  }
  v170 = v66;
  v171 = v60 + 8 * v67;
  if (v61 != v66)
  {
    if (!*(_QWORD *)(*v61 + 8))
    {
      v159 = v61;
      do
      {
        v160 = v159 + 1;
        v159 = v63;
        if (v160 != v63)
        {
          v159 = v160;
          while ((unint64_t)(*v159 + 1) <= 1)
          {
            if (++v159 == v63)
            {
              v159 = v63;
              break;
            }
          }
        }
        v61 = v66;
        if (v159 == v66)
          break;
        v61 = v159;
      }
      while (!*(_QWORD *)(*v159 + 8));
    }
    v168 = v61;
    if (!v60)
      goto LABEL_124;
LABEL_127:
    v68 = (_QWORD *)(v60 + 8 * *(unsigned int *)(v60 - 4));
    goto LABEL_128;
  }
  if (v60)
    goto LABEL_127;
LABEL_124:
  v68 = 0;
LABEL_128:
  v58 = 1;
  if (v61 == v68)
    goto LABEL_180;
  v164 = v68;
  do
  {
    v69 = *(_QWORD *)(*v61 + 8);
    v70 = WebCore::RenderGrid::gridSpanForChild(*(_QWORD *)(v10 + 136), v69, 0);
    v71 = *(unsigned int **)(v10 + 136);
    v72 = ((unsigned __int16)v71[31] >> 13) - 1;
    if (v72 > 4)
      v73 = 0;
    else
      v73 = qword_1969FC4F8[v72];
    v74 = *(_QWORD *)(*(_QWORD *)(v69 + 88) + 24) + 40 + 8 * v73;
    LODWORD(v173) = 0;
    BYTE6(v173) = 0;
    BYTE4(v173) = *(_BYTE *)(v74 + 4);
    v75 = BYTE4(v173);
    BYTE5(v173) = *(_BYTE *)(v74 + 5);
    if (BYTE4(v173) - 2 >= 9)
    {
      if (!BYTE4(v173))
        goto LABEL_154;
      if (BYTE4(v173) == 11)
      {
        LODWORD(v173) = *(_DWORD *)v74;
        v92 = *(float *)&v173;
        WebCore::Length::ref((int *)&v173);
        v71 = *(unsigned int **)(v10 + 136);
        v163 = LODWORD(v92);
        v76 = v92;
        goto LABEL_136;
      }
      v163 = 0;
      v77 = 1;
      v76 = 0.0;
    }
    else
    {
      BYTE6(v173) = *(_BYTE *)(v74 + 6);
      if (!BYTE6(v173))
      {
        LODWORD(v173) = *(_DWORD *)v74;
        v163 = v173;
        v76 = *(float *)&v173;
LABEL_136:
        v77 = 1;
        goto LABEL_141;
      }
      v77 = 0;
      v76 = *(float *)v74;
      *(float *)&v173 = v76;
      v163 = LODWORD(v76);
    }
LABEL_141:
    v78 = v71 + 151;
    if (v9 == 1)
      v78 = v71 + 153;
    v79 = *v78;
    v80 = WebCore::RenderGrid::guttersSize((WebCore::RenderElement *)v71, 0, v70, HIDWORD(v70) - (int)v70, *(_QWORD *)(v166 + 12));
    v81 = WebCore::computeGridSpanSize(*(_QWORD *)(v166 + 40), *(_DWORD *)(v166 + 52), v70, SHIDWORD(v70), v79, v80);
    if (v75 == 4)
    {
      v82 = (float)SLODWORD(v76);
      if (!v77)
        v82 = v76;
      v83 = v82 * 64.0;
      if (v83 >= 2147483650.0)
      {
LABEL_176:
        v84 = 0x7FFFFFFF;
      }
      else
      {
        v84 = (int)v83;
        if (v83 <= -2147483650.0)
          v84 = 0x80000000;
      }
      v68 = v164;
      v10 = v166;
      goto LABEL_150;
    }
    if (v75 != 3)
    {
      v84 = 0;
      v68 = v164;
      v10 = v166;
      if (v75 == 11)
      {
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v173, (float)v81 * 0.015625);
        v91 = v90 * 64.0;
        if (v91 >= 2147483650.0)
        {
          v84 = 0x7FFFFFFF;
        }
        else if (v91 <= -2147483650.0)
        {
          v84 = 0x80000000;
        }
        else
        {
          v84 = (int)v91;
        }
      }
      goto LABEL_150;
    }
    v88 = (float)SLODWORD(v76);
    if (!v77)
      v88 = v76;
    v89 = (float)((float)((float)((float)v81 * 0.015625) * v88) / 100.0) * 64.0;
    if (v89 >= 2147483650.0)
      goto LABEL_176;
    v68 = v164;
    if (v89 <= -2147483650.0)
      v84 = 0x80000000;
    else
      v84 = (int)v89;
    v10 = v166;
LABEL_150:
    v85 = ((unsigned __int16)v71[31] >> 13) - 1;
    if (v85 > 4)
      v86 = 0;
    else
      v86 = qword_1969FC4F8[v85];
    *(_DWORD *)(v69 + 4 * v86 + 168) = v84;
    if (v75 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v163);
    }
LABEL_154:
    v87 = v61 + 1;
    v168 = v61 + 1;
    if (v61 + 1 != v169)
    {
      while ((unint64_t)(*v87 + 1) <= 1)
      {
        if (++v87 == v169)
        {
          v87 = v169;
          break;
        }
      }
      v168 = v87;
    }
    WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v167);
    v61 = v168;
    ++*(_DWORD *)(v167 + 8);
  }
  while (v61 != v68);
  v58 = *(unsigned __int8 *)(v10 + 120);
LABEL_180:
  v64 = (_BYTE *)(v10 + 176);
  if (!v58)
  {
    v94 = (_QWORD *)(v10 + 192);
    v93 = *(_QWORD *)(v10 + 192);
    if (!v93)
    {
      *(_BYTE *)(v10 + 176) = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v10 + 136) + 124) >> 13;
      v95 = 1;
      goto LABEL_183;
    }
    v95 = 1;
    v157 = 1;
LABEL_322:
    *v94 = 0;
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::BaselineAlignmentState>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::BaselineAlignmentState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(v93, (WTF *)a2);
    v10 = v166;
    *(_BYTE *)(v166 + 176) = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v166 + 136) + 124) >> 13;
    if ((v157 & 1) == 0)
      goto LABEL_186;
LABEL_183:
    v96 = (uint64_t **)(v10 + 208);
    goto LABEL_187;
  }
LABEL_184:
  v94 = (_QWORD *)(v10 + 184);
  v93 = *(_QWORD *)(v10 + 184);
  if (v93)
  {
    v157 = 0;
    v95 = 2;
    goto LABEL_322;
  }
  *(_BYTE *)(v10 + 176) = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v10 + 136) + 124) >> 13;
  v95 = 2;
LABEL_186:
  v96 = (uint64_t **)(v10 + 200);
LABEL_187:
  result = (uint64_t)WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::HashTable((uint64_t *)&v173, v96);
  v99 = (uint64_t)v173;
  if (!v173)
  {
    v100 = 0;
    v101 = 0;
    goto LABEL_189;
  }
  v101 = *((unsigned int *)v173 - 1);
  v102 = &v173[2 * v101];
  if (*((_DWORD *)v173 - 3))
  {
    v100 = v173;
    if ((_DWORD)v101)
    {
      v158 = 16 * v101;
      v100 = v173;
      while ((unint64_t)*v100 + 1 <= 1)
      {
        v100 += 2;
        v158 -= 16;
        if (!v158)
        {
          v100 = v102;
          break;
        }
      }
    }
  }
  else
  {
    v100 = &v173[2 * v101];
LABEL_189:
    v102 = &v173[2 * v101];
  }
  if (v173)
    v103 = &v173[2 * *((unsigned int *)v173 - 1)];
  else
    v103 = 0;
  if (v103 == v100)
  {
    if (v173)
      goto LABEL_304;
    return result;
  }
  v165 = v95 != 1;
  while (2)
  {
    v104 = *((_QWORD *)*v100 + 1);
    if (v95 == 2)
    {
      if (((*(_BYTE *)(v104 + 21) & 0x10) == 0) != ((*(_BYTE *)(*(_QWORD *)(v166 + 136) + 21) & 0x10) == 0))
        goto LABEL_198;
LABEL_200:
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v104 + 1480))(*((_QWORD *)*v100 + 1)) & 0xFF00000000) != 0)
        goto LABEL_207;
      v105 = 1;
    }
    else
    {
      if (((*(_BYTE *)(v104 + 21) & 0x10) == 0) != ((*(_BYTE *)(*(_QWORD *)(v166 + 136) + 21) & 0x10) == 0))
        goto LABEL_200;
LABEL_198:
      v105 = 0;
    }
    v106 = *(_QWORD *)(v104 + 32);
    if (v106)
      v107 = *(_QWORD *)(v106 + 8);
    else
      v107 = 0;
    if (v107 != *(_QWORD *)(v166 + 136))
      goto LABEL_205;
    v108 = WebCore::RenderGrid::gridSpanForChild(v107, v104, v165);
    v109 = HIDWORD(v108) - v108;
    if (HIDWORD(v108) == (_DWORD)v108)
      goto LABEL_207;
    v115 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v166 + 136) + 88) + 40) + 80);
    if (v95 != 1)
    {
      v116 = *(_QWORD *)(v166 + 128);
      v117 = *(_DWORD *)(v116 + 68);
      v118 = v115[63];
      v119 = v115[37];
      v120 = v115[13];
      v121 = v108 - *(_DWORD *)(v116 + 60);
      v122 = -v118;
      v123 = -v117;
      v124 = -(v119 + v117);
      while ((v121 & 0x80000000) == 0)
      {
        if (v121 >= v119 + v117)
        {
          v125 = (v121 - (v119 + v117)) % v120;
LABEL_239:
          v126 = (uint64_t *)(v115 + 10);
          goto LABEL_226;
        }
        if (v117 && v121 >= v118)
        {
          if (v121 < v118 + v117)
          {
            v125 = (v121 - v118) % v115[61];
            v126 = (uint64_t *)(v115 + 58);
            goto LABEL_226;
          }
          v125 = v121 - v117;
          if (v119 <= v125)
          {
            __break(0xC471u);
            JUMPOUT(0x196342878);
          }
        }
        else
        {
          if (v119 <= v121)
          {
            __break(0xC471u);
            JUMPOUT(0x196342868);
          }
          v125 = v121;
        }
        v126 = (uint64_t *)(v115 + 34);
LABEL_226:
        v127 = *v126;
        v128 = (_DWORD *)(*v126 + 88 * v125);
        v129 = v128[6];
        if (!v129
          && (!*(_BYTE *)(v127 + 88 * v125 + 12) || *(unsigned __int8 *)(v127 + 88 * v125 + 12) - 7 < 2))
        {
          goto LABEL_256;
        }
        v130 = *(_DWORD *)(v127 + 88 * v125 + 48);
        if (v130)
        {
          v134 = v129 == 1 || *v128 == 2;
          if (v134 || v130 == 1 && !*(_BYTE *)(v162 + 4))
            goto LABEL_256;
        }
        else
        {
          v131 = *(unsigned __int8 *)(v127 + 88 * v125 + 36);
          if (!v131 || (v131 - 7) < 2)
            goto LABEL_256;
          if (v129 == 1 || *v128 == 2)
            goto LABEL_256;
        }
        ++v121;
        if (!--v109)
          goto LABEL_207;
      }
      if ((int)v121 % (int)v120)
        v133 = v115[13];
      else
        v133 = 0;
      LODWORD(v125) = v133 + (int)v121 % (int)v120;
      if (v120 <= (int)v125)
      {
        __break(0xC471u);
        JUMPOUT(0x196342870);
      }
      v125 = (int)v125;
      goto LABEL_239;
    }
    v139 = v115[62];
    v140 = *(_QWORD *)(v166 + 128);
    v141 = *(_DWORD *)(v140 + 64);
    v142 = v115[33];
    v120 = v115[17];
    v143 = v108 - *(_DWORD *)(v140 + 56);
    v122 = -v139;
    v123 = -v141;
    v124 = -(v142 + v141);
    while (2)
    {
      if ((v143 & 0x80000000) != 0)
      {
        if ((int)v143 % (int)v120)
          v152 = v115[17];
        else
          v152 = 0;
        LODWORD(v144) = v152 + (int)v143 % (int)v120;
        if (v120 <= (int)v144)
        {
          __break(0xC471u);
          JUMPOUT(0x196342888);
        }
        v144 = (int)v144;
        goto LABEL_285;
      }
      if (v143 >= v142 + v141)
      {
        v144 = (v143 - (v142 + v141)) % v120;
LABEL_285:
        v145 = (uint64_t *)(v115 + 14);
        goto LABEL_272;
      }
      if (v141 && v143 >= v139)
      {
        if (v143 < v141 + v139)
        {
          v144 = (v143 - v139) % v115[57];
          v145 = (uint64_t *)(v115 + 54);
          goto LABEL_272;
        }
        v144 = v143 - v141;
        if (v142 <= v144)
        {
          __break(0xC471u);
          JUMPOUT(0x196342890);
        }
      }
      else
      {
        if (v142 <= v143)
        {
          __break(0xC471u);
          JUMPOUT(0x196342880);
        }
        v144 = v143;
      }
      v145 = (uint64_t *)(v115 + 30);
LABEL_272:
      v146 = *v145;
      v147 = (_DWORD *)(*v145 + 88 * v144);
      v148 = v147[6];
      if (!v148
        && (!*(_BYTE *)(v146 + 88 * v144 + 12) || *(unsigned __int8 *)(v146 + 88 * v144 + 12) - 7 < 2))
      {
        break;
      }
      v149 = *(_DWORD *)(v146 + 88 * v144 + 48);
      if (!v149)
      {
        v150 = *(unsigned __int8 *)(v146 + 88 * v144 + 36);
        if (!v150 || (v150 - 7) < 2)
          break;
        if (v148 == 1 || *v147 == 2)
          break;
        goto LABEL_282;
      }
      v153 = v148 == 1 || *v147 == 2;
      if (!v153 && (v149 != 1 || *(_BYTE *)(v161 + 4)))
      {
LABEL_282:
        ++v143;
        if (!--v109)
          goto LABEL_207;
        continue;
      }
      break;
    }
LABEL_256:
    v135 = *(_QWORD *)v104;
    if (v105)
    {
      if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v135 + 1544))(v104, v120, v122, v123, v124) & 1) == 0)goto LABEL_207;
LABEL_205:
      v172 = 0;
    }
    else
    {
      if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v135 + 1552))(v104, v120, v122, v123, v124) & 1) != 0)goto LABEL_205;
      v136 = *(_QWORD *)(*(_QWORD *)(v104 + 88) + 8);
      v137 = v136 + 12;
      v138 = v136 + 4;
      if (((*(_DWORD *)(v104 + 124) >> 13) & 6u) - 2 >= 4)
        v137 = v138;
      if (!*(_BYTE *)(v137 + 4))
        goto LABEL_205;
LABEL_207:
      v110 = (WebCore::RenderElement *)*((_QWORD *)*v100 + 1);
      v111 = WebCore::RenderGrid::selfAlignmentForChild(*(_QWORD *)(v166 + 136), v95, v110, 0);
      v112 = WebCore::RenderGrid::gridSpanForChild(*(_QWORD *)(v166 + 136), (uint64_t)v110, v165);
      if ((v111 & 0xF) == 4)
        v113 = v112;
      else
        v113 = HIDWORD(v112) - 1;
      WebCore::GridBaselineAlignment::updateBaselineAlignmentContext(v64, v111 & 0xF, v113, v110, v95);
      v172 = 1;
    }
    result = WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl> const&,BOOL>((uint64_t)&v167, (uint64_t *)v96, v100, &v172);
    v114 = v100 + 2;
    v100 = v102;
    if (v114 != v102)
    {
      v100 = v114;
      while ((unint64_t)*v100 + 1 <= 1)
      {
        v100 += 2;
        if (v100 == v102)
        {
          v100 = v102;
          break;
        }
      }
    }
    if (v100 != v103)
      continue;
    break;
  }
  v99 = (uint64_t)v173;
  if (v173)
  {
LABEL_304:
    v154 = *(unsigned int *)(v99 - 4);
    if ((_DWORD)v154)
    {
      v155 = (WTF **)v99;
      do
      {
        v156 = *v155;
        if (*v155 != (WTF *)-1)
        {
          *v155 = 0;
          if (v156)
          {
            if (*(_DWORD *)v156 == 1)
              WTF::fastFree(v156, v98);
            else
              --*(_DWORD *)v156;
          }
        }
        v155 += 2;
        --v154;
      }
      while (v154);
    }
    return WTF::fastFree((WTF *)(v99 - 16), v98);
  }
  return result;
}

BOOL WebCore::GridTrackSizingAlgorithm::copyUsedTrackSizesForSubgrid(WebCore::GridTrackSizingAlgorithm *this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::GridTrackSizingAlgorithm *v27;
  uint64_t *v28;
  _BOOL4 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  int v44;
  unsigned int *v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  int v52;
  unsigned int *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  int v59;
  unsigned int *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  _DWORD *v70;
  _BYTE *v71;
  char v72;
  char v73;
  unsigned int *v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  char *v81;
  unsigned __int8 v82;
  char v83;
  unsigned __int8 v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  signed int *v110;
  unsigned int v111;
  signed int v112;
  BOOL v113;
  uint64_t *v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  int v123;
  WebCore::RenderElement *v124;
  _BOOL4 v125;
  unint64_t v126;
  signed int *v127;
  unsigned int v128;
  signed int v129;
  uint64_t *v131;
  unsigned int v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  int v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  _DWORD *v143;
  int v144;
  BOOL v145;
  int v146;
  int v147;
  int *v149;
  unint64_t v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  int v163;
  unsigned int *v164;
  uint64_t v165;
  unsigned int v166;
  WebCore::RenderBox *v167;
  WebCore::GridTrackSizingAlgorithm *v168;
  char v169;
  char v170;
  char v171;
  __int16 v172;
  char v173;
  unsigned __int8 v174;
  char v175;
  unsigned __int8 v176;
  char v177;
  unsigned __int8 v178;
  int v179;
  __int128 v180;
  _BYTE v181[9];
  int v182;
  unsigned int v183;
  char v184;
  char v185;
  char v186;
  uint64_t v187;
  int v188;
  unsigned int v189;
  char v190;
  char v191;
  char v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  char v196;
  char v197;
  char v198;
  uint64_t v199;
  int v200;
  __int16 v201;
  unsigned __int8 v202;

  v5 = *((_QWORD *)this + 17);
  v6 = *(_QWORD *)(v5 + 32);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7 && *(_BYTE *)(v7 + 46) != 12)
    {
      __break(0xC471u);
      JUMPOUT(0x196342BD4);
    }
  }
  else
  {
    v7 = 0;
  }
  if (((*(_BYTE *)(v7 + 21) & 0x10) == 0) != ((*(_BYTE *)(v5 + 21) & 0x10) == 0))
    v8 = *((unsigned __int8 *)this + 120) == 0;
  else
    v8 = *((unsigned __int8 *)this + 120);
  if (v8)
    v9 = v7 + 392;
  else
    v9 = v7 + 376;
  v10 = *(_DWORD *)(v9 + 12);
  if (v10)
  {
    v11 = WebCore::RenderGrid::gridSpanForChild(v7, v5, v8);
    if (*((_BYTE *)this + 120))
      v13 = (unsigned int *)((char *)this + 56);
    else
      v13 = (unsigned int *)((char *)this + 40);
    v14 = v13[3];
    if ((unint64_t)*(unsigned int *)(v9 + 12) - 1 < (_DWORD)v14 - 1 + v11)
    {
      __break(0xC471u);
      JUMPOUT(0x196342BF4);
    }
    v167 = (WebCore::RenderBox *)v7;
    v168 = this;
    v166 = v8;
    v162 = (v14 - 1);
    v163 = v10;
    v165 = v13[3];
    if ((int)v14 >= 1)
    {
      v15 = 0;
      v16 = 0;
      v17 = v11;
      v18 = 136 * v14;
      v19 = 136 * v11;
      do
      {
        if (v17 + v16 >= *(unsigned int *)(v9 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x196343914);
        }
        if (v16 >= v13[3])
        {
          __break(0xC471u);
          JUMPOUT(0x19634391CLL);
        }
        v20 = *(_QWORD *)v13;
        v21 = *(_QWORD *)v13 + v15;
        v22 = *(_QWORD *)v9 + v19 + v15;
        v23 = *(_OWORD *)(v22 + 8);
        *(_OWORD *)(v21 + 17) = *(_OWORD *)(v22 + 17);
        *(_OWORD *)(v21 + 8) = v23;
        v24 = v21 + 40;
        v25 = v22 + 40;
        if (*(unsigned __int8 *)(v21 + 128) == *(unsigned __int8 *)(v22 + 128))
        {
          if (*(_BYTE *)(v21 + 128))
            WebCore::GridTrackSize::operator=(v24, v25);
        }
        else if (*(_BYTE *)(v21 + 128))
        {
          v26 = v20 + v15;
          if (*(_BYTE *)(v20 + v15 + 100) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v26 + 96));
          }
          if (*(_BYTE *)(v26 + 76) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v20 + v15 + 72));
          }
          if (*(_BYTE *)(v20 + v15 + 52) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v20 + v15 + 48));
          }
          *(_BYTE *)(v21 + 128) = 0;
        }
        else
        {
          WebCore::GridTrackSize::GridTrackSize(v24, v25);
          *(_BYTE *)(v21 + 128) = 1;
        }
        ++v16;
        v15 += 136;
      }
      while (v18 != v15);
    }
    v27 = v168;
    v28 = (uint64_t *)*((_QWORD *)v168 + 17);
    v29 = v166;
    if (((*((_BYTE *)v28 + 21) & 0x10) == 0) == ((*((_BYTE *)v167 + 21) & 0x10) == 0))
    {
      if (v166)
      {
LABEL_40:
        v30 = (unsigned __int16)*((_DWORD *)v167 + 31) >> 13;
        v157 = 2;
        switch((unsigned __int16)*((_DWORD *)v167 + 31) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_42;
          case 3:
          case 5:
            v30 = 3;
            goto LABEL_42;
          case 4:
            goto LABEL_43;
          default:
            v30 = 0;
LABEL_42:
            v157 = v30;
LABEL_43:
            v31 = (v157 & 0xFFFFFFFD) == 1;
            if (v29)
              goto LABEL_44;
            goto LABEL_54;
        }
      }
    }
    else
    {
      v29 = v166 == 0;
      if (v166)
        goto LABEL_40;
    }
    v31 = (*((unsigned __int8 *)v167 + 123) >> 2) & 1;
    if (v29)
    {
LABEL_44:
      v32 = (unsigned __int16)*((_DWORD *)v28 + 31) >> 13;
      v158 = 2;
      switch((unsigned __int16)*((_DWORD *)v28 + 31) >> 13)
      {
        case 1:
        case 2:
          goto LABEL_46;
        case 3:
        case 5:
          v32 = 3;
          goto LABEL_46;
        case 4:
          goto LABEL_47;
        default:
          v32 = 0;
LABEL_46:
          v158 = v32;
LABEL_47:
          v33 = (v158 & 0xFFFFFFFD) == 1;
          break;
      }
    }
    else
    {
LABEL_54:
      v33 = (*((unsigned __int8 *)v28 + 123) >> 2) & 1;
    }
    v164 = v13;
    if (v31 != v33)
    {
      LODWORD(v34) = v13[3];
      if (v34 >= 2)
      {
        v35 = 0;
        while (1)
        {
          if (v35 >= v34)
          {
            __break(0xC471u);
            JUMPOUT(0x196343984);
          }
          v36 = (v34 - 1) - v35;
          if (v36 >= v34)
          {
            __break(0xC471u);
            JUMPOUT(0x19634398CLL);
          }
          v37 = *(_QWORD *)v13;
          v38 = *(_QWORD *)v13 + 136 * v35;
          *(_OWORD *)&v181[-7] = *(_OWORD *)(v38 + 17);
          v180 = *(_OWORD *)(v38 + 8);
          LOBYTE(v182) = 0;
          v202 = 0;
          v40 = (_BYTE *)(v38 + 128);
          v39 = *(unsigned __int8 *)(v38 + 128);
          if (*(_BYTE *)(v38 + 128))
          {
            v41 = v37 + 136 * v35;
            v182 = *(_DWORD *)(v41 + 40);
            v183 = 0;
            v44 = *(unsigned __int8 *)(v41 + 52);
            v42 = (_BYTE *)(v41 + 52);
            v43 = v44;
            v45 = (unsigned int *)(v42 - 4);
            v186 = 0;
            v184 = v44;
            v46 = v42[1];
            v185 = v46;
            if ((v44 - 2) >= 9)
            {
              v47 = 0;
              if (v43 == 11)
              {
                v97 = *v45;
                *v45 = 0;
                v183 = v97;
                v1 = v97;
              }
              else
              {
                v1 = 0;
              }
            }
            else
            {
              v186 = *(_BYTE *)(v37 + 136 * v35 + 54);
              if (v186)
              {
                v1 = *v45;
                v183 = *v45;
                v47 = 1;
              }
              else
              {
                v47 = 0;
                v183 = *v45;
                v1 = v183;
              }
            }
            *v42 = 0;
            v48 = v37 + 136 * v35;
            v49 = *(_QWORD *)(v48 + 56);
            v188 = *(_DWORD *)(v48 + 64);
            v187 = v49;
            v189 = 0;
            v52 = *(unsigned __int8 *)(v48 + 76);
            v51 = (_BYTE *)(v48 + 76);
            v50 = v52;
            v53 = (unsigned int *)(v51 - 4);
            v192 = 0;
            v190 = v52;
            v54 = v51[1];
            v191 = v54;
            if ((v52 - 2) >= 9)
            {
              v12 = 0;
              if (v50 == 11)
              {
                v98 = *v53;
                *v53 = 0;
                v189 = v98;
                v2 = v98;
              }
              else
              {
                v2 = 0;
              }
            }
            else
            {
              v192 = *(_BYTE *)(v37 + 136 * v35 + 78);
              if (v192)
              {
                v2 = *v53;
                v189 = *v53;
                v12 = 1;
              }
              else
              {
                v12 = 0;
                v189 = *v53;
                v2 = v189;
              }
            }
            *v51 = 0;
            v55 = v37 + 136 * v35;
            v56 = *(_QWORD *)(v55 + 80);
            v194 = *(_DWORD *)(v55 + 88);
            v193 = v56;
            v195 = 0;
            v59 = *(unsigned __int8 *)(v55 + 100);
            v57 = (_BYTE *)(v55 + 100);
            v58 = v59;
            v60 = (unsigned int *)(v57 - 4);
            v198 = 0;
            v196 = v59;
            v197 = v57[1];
            v177 = v46;
            v178 = v43;
            v175 = v54;
            v176 = v50;
            v173 = v197;
            v174 = v59;
            if ((v59 - 2) >= 9)
            {
              v61 = 0;
              if (v58 == 11)
              {
                v99 = *v60;
                *v60 = 0;
                v195 = v99;
                v3 = v99;
              }
              else
              {
                v3 = 0;
              }
            }
            else
            {
              v198 = *(_BYTE *)(v37 + 136 * v35 + 102);
              if (v198)
              {
                v3 = *v60;
                v195 = *v60;
                v61 = 1;
              }
              else
              {
                v61 = 0;
                v195 = *v60;
                v3 = v195;
              }
            }
            *v57 = 0;
            v62 = v37 + 136 * v35;
            v63 = *(_QWORD *)(v62 + 104);
            v200 = *(_DWORD *)(v62 + 112);
            v199 = v63;
            v172 = *(_WORD *)(v62 + 120);
            v201 = v172;
            v179 = 1;
            v202 = 1;
          }
          else
          {
            v61 = 0;
            v12 = 0;
            v47 = 0;
            v179 = 0;
          }
          v64 = v37 + 136 * v36;
          v66 = *(_OWORD *)(v64 + 8);
          v65 = v64 + 8;
          *(_OWORD *)(v38 + 8) = v66;
          v67 = v37 + 136 * v35;
          v68 = *(_BYTE *)(v65 + 24);
          *(_QWORD *)(v67 + 24) = *(_QWORD *)(v65 + 16);
          *(_BYTE *)(v67 + 32) = v68;
          v69 = v67 + 40;
          v70 = (_DWORD *)(v65 + 32);
          v71 = (_BYTE *)(v65 + 120);
          if (v39 == *(unsigned __int8 *)(v65 + 120))
          {
            if (v39)
            {
              v72 = v61;
              v73 = v47;
              v74 = v13;
              v75 = v12;
              WebCore::GridTrackSize::operator=(v69, v65 + 32);
              v12 = v75;
              v13 = v74;
              v70 = (_DWORD *)(v65 + 32);
              v47 = v73;
              v61 = v72;
              v71 = (_BYTE *)(v65 + 120);
            }
          }
          else if (v39)
          {
            if (*(_BYTE *)(v37 + 136 * v35 + 100) == 11)
            {
              v159 = v12;
              v169 = v47;
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v37 + 136 * v35 + 96));
              v47 = v169;
              v12 = v159;
            }
            if (*(_BYTE *)(v37 + 136 * v35 + 76) == 11)
            {
              v160 = v12;
              v170 = v47;
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v37 + 136 * v35 + 72));
              v47 = v170;
              v12 = v160;
            }
            if (*(_BYTE *)(v37 + 136 * v35 + 52) == 11)
            {
              v161 = v12;
              v171 = v47;
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v37 + 136 * v35 + 48));
              v47 = v171;
              v12 = v161;
            }
            *v40 = 0;
          }
          else
          {
            v76 = v47;
            v77 = v61;
            v78 = v12;
            WebCore::GridTrackSize::GridTrackSize(v69, v65 + 32);
            v12 = v78;
            v61 = v77;
            v71 = (_BYTE *)(v65 + 120);
            v47 = v76;
            v13 = v164;
            *v40 = 1;
            v70 = (_DWORD *)(v65 + 32);
          }
          *(_OWORD *)v65 = v180;
          *(_BYTE *)(v65 + 24) = v181[8];
          *(_QWORD *)(v65 + 16) = *(_QWORD *)v181;
          if (*v71 != v179)
            break;
          if (*v71)
          {
            WebCore::GridTrackSize::operator=((uint64_t)v70, (uint64_t)&v182);
            v179 = v202;
            goto LABEL_99;
          }
LABEL_103:
          ++v35;
          v34 = v13[3];
          if (v35 >= v34 >> 1)
          {
            v27 = v168;
            v28 = (uint64_t *)*((_QWORD *)v168 + 17);
            goto LABEL_150;
          }
        }
        if (*v71)
        {
          if (*(_BYTE *)(v37 + 136 * v36 + 100) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v37 + 136 * v36 + 96));
          }
          if (*(_BYTE *)(v37 + 136 * v36 + 76) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v37 + 136 * v36 + 72));
          }
          if (*(_BYTE *)(v37 + 136 * v36 + 52) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v37 + 136 * v36 + 48));
          }
          *v71 = 0;
          goto LABEL_99;
        }
        v79 = v182;
        v80 = v37 + 136 * v36;
        *(_BYTE *)(v80 + 54) = 0;
        v81 = (char *)(v80 + 54);
        *(_DWORD *)(v81 - 6) = 0;
        *v70 = v79;
        *(v81 - 2) = v178;
        *(v81 - 1) = v177;
        if (v178 - 2 >= 9)
        {
          v83 = v175;
          v82 = v176;
          v85 = v173;
          v84 = v174;
          if (v178 != 11)
          {
LABEL_92:
            v184 = 0;
            v86 = v37 + 136 * v36;
            v87 = v187;
            v88 = v188;
            *(_DWORD *)(v86 + 72) = 0;
            v89 = v86 + 72;
            *(_DWORD *)(v89 - 8) = v88;
            *(_BYTE *)(v89 + 6) = 0;
            *(_QWORD *)(v89 - 16) = v87;
            *(_BYTE *)(v89 + 4) = v82;
            *(_BYTE *)(v89 + 5) = v83;
            if (v82 - 2 >= 9)
            {
              if (v82 != 11)
              {
LABEL_95:
                v190 = 0;
                v90 = v37 + 136 * v36;
                v91 = v193;
                v92 = v194;
                *(_DWORD *)(v90 + 96) = 0;
                v93 = v90 + 96;
                *(_DWORD *)(v93 - 8) = v92;
                *(_BYTE *)(v93 + 6) = 0;
                *(_QWORD *)(v93 - 16) = v91;
                *(_BYTE *)(v93 + 4) = v84;
                *(_BYTE *)(v93 + 5) = v85;
                if (v84 - 2 >= 9)
                {
                  v94 = v172;
                  if (v84 != 11)
                    goto LABEL_98;
                  v195 = 0;
                }
                else
                {
                  *(_BYTE *)(v93 + 6) = v61;
                  v94 = v172;
                }
                *(_DWORD *)v93 = v3;
LABEL_98:
                v196 = 0;
                v95 = v37 + 136 * v36;
                v96 = v199;
                *(_DWORD *)(v95 + 112) = v200;
                *(_QWORD *)(v95 + 104) = v96;
                *(_WORD *)(v95 + 120) = v94;
                *v71 = 1;
LABEL_99:
                if (v179)
                {
                  if (v196 == 11)
                  {
                    {
                      WebCore::calculationValues(void)::map = 1;
                      qword_1ECE90C98 = 0;
                    }
                    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v195);
                  }
                  if (v190 == 11)
                  {
                    {
                      WebCore::calculationValues(void)::map = 1;
                      qword_1ECE90C98 = 0;
                    }
                    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v189);
                  }
                  if (v184 == 11)
                  {
                    {
                      WebCore::calculationValues(void)::map = 1;
                      qword_1ECE90C98 = 0;
                    }
                    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v183);
                  }
                }
                goto LABEL_103;
              }
              v189 = 0;
            }
            else
            {
              *(_BYTE *)(v89 + 6) = v12;
            }
            *(_DWORD *)v89 = v2;
            goto LABEL_95;
          }
          v183 = 0;
        }
        else
        {
          *v81 = v47;
          v83 = v175;
          v82 = v176;
          v85 = v173;
          v84 = v174;
        }
        *(_DWORD *)(v81 - 6) = v1;
        goto LABEL_92;
      }
    }
LABEL_150:
    v100 = *v28;
    if (*((_BYTE *)v27 + 120))
    {
      v101 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v100 + 1112))(v28, 0, v12);
      v102 = (*(uint64_t (**)(uint64_t *))(*v28 + 1048))(v28);
      if (__OFADD__(v101, v102))
        v103 = (v101 >> 31) + 0x7FFFFFFF;
      else
        v103 = v101 + v102;
      v104 = (*(uint64_t (**)(uint64_t *))(*v28 + 960))(v28);
    }
    else
    {
      v105 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v100 + 1128))(v28, 0, v12);
      v106 = (*(uint64_t (**)(uint64_t *))(*v28 + 1064))(v28);
      if (__OFADD__(v105, v106))
        v103 = (v105 >> 31) + 0x7FFFFFFF;
      else
        v103 = v105 + v106;
      v104 = (*(uint64_t (**)(uint64_t *))(*v28 + 976))(v28);
    }
    v107 = v103 + v104;
    if (__OFADD__(v103, v104))
      v107 = (v103 >> 31) + 0x7FFFFFFF;
    if (v107 >= 1)
    {
      v108 = 0;
      v109 = v13[3] & ~((int)v13[3] >> 31);
      v110 = (signed int *)(*(_QWORD *)v13 + 12);
      do
      {
        if (v109 == v108)
          break;
        if (v108 >= v13[3])
        {
          __break(0xC471u);
          JUMPOUT(0x196343974);
        }
        v111 = *(v110 - 1) & ~(*(v110 - 1) >> 31);
        v112 = v111 - v107;
        if (v111 < v107)
          v112 = 0;
        v113 = v107 >= v111;
        v107 -= v111;
        if (!v113)
          v107 = 0;
        *(v110 - 1) = v112;
        if (*v110 != -64 && *v110 < v112)
          *v110 = v112;
        v110 += 34;
        ++v108;
      }
      while (v107 > 0);
    }
    v115 = (uint64_t *)*((_QWORD *)v168 + 17);
    v116 = *v115;
    if (*((_BYTE *)v168 + 120))
    {
      v117 = (*(uint64_t (**)(_QWORD, _QWORD))(v116 + 1120))(*((_QWORD *)v168 + 17), 0);
      v118 = (*(uint64_t (**)(uint64_t *))(*v115 + 1056))(v115);
      if (__OFADD__(v117, v118))
        v119 = (v117 >> 31) + 0x7FFFFFFF;
      else
        v119 = v117 + v118;
      v120 = (*(uint64_t (**)(uint64_t *))(*v115 + 968))(v115);
    }
    else
    {
      v121 = (*(uint64_t (**)(_QWORD, _QWORD))(v116 + 1136))(*((_QWORD *)v168 + 17), 0);
      v122 = (*(uint64_t (**)(uint64_t *))(*v115 + 1072))(v115);
      if (__OFADD__(v121, v122))
        v119 = (v121 >> 31) + 0x7FFFFFFF;
      else
        v119 = v121 + v122;
      v120 = (*(uint64_t (**)(uint64_t *))(*v115 + 984))(v115);
    }
    v123 = v119 + v120;
    if (__OFADD__(v119, v120))
      v123 = (v119 >> 31) + 0x7FFFFFFF;
    v124 = v167;
    v125 = v166;
    if (v123 >= 1)
    {
      v126 = (int)v13[3] - 1;
      v127 = (signed int *)(*(_QWORD *)v13 + 136 * v126 + 12);
      do
      {
        if ((v126 & 0x8000000000000000) != 0)
          break;
        if (v126 >= v13[3])
        {
          __break(0xC471u);
          JUMPOUT(0x19634397CLL);
        }
        v128 = *(v127 - 1) & ~(*(v127 - 1) >> 31);
        v129 = v128 - v123;
        if (v128 < v123)
          v129 = 0;
        v113 = v123 >= v128;
        v123 -= v128;
        if (!v113)
          v123 = 0;
        *(v127 - 1) = v129;
        if (*v127 != -64 && *v127 < v129)
          *v127 = v129;
        v127 -= 34;
        --v126;
      }
      while (v123 > 0);
    }
    v131 = (uint64_t *)((char *)v168 + 4);
    if (!*((_BYTE *)v168 + 120))
      v131 = (uint64_t *)((char *)v168 + 12);
    v132 = WebCore::RenderGrid::gridGap(*((WebCore::RenderElement **)v168 + 17), *((unsigned __int8 *)v168 + 120), *v131);
    v133 = *(_QWORD *)(*((_QWORD *)v167 + 11) + 40);
    v134 = (_BYTE *)(v133 + 388);
    v135 = (_BYTE *)(v133 + 376);
    if (v166)
      v135 = v134;
    if (!*v135 && (v135[8] & 0xF7) == 3)
    {
      if (v166)
        v156 = WebCore::RenderBox::contentLogicalHeight(v167);
      else
        v156 = WebCore::RenderBox::contentLogicalWidth(v167);
      v138 = v156 & 0xFFFFFF00;
      v136 = v156;
      v137 = 0x100000000;
      v124 = v167;
      v125 = v166;
      v13 = v164;
    }
    else
    {
      v136 = 0;
      v137 = 0;
      v138 = 0;
    }
    v139 = WebCore::RenderGrid::gridGap(v124, v125, v137 | v138 | v136);
    v140 = v132 - v139;
    if (__OFSUB__(v132, v139))
      v140 = (v132 >> 31) + 0x7FFFFFFF;
    v141 = v140 + (v140 < 0);
    v10 = v163;
    if ((int)v165 >= 1)
    {
      if (v13[3])
      {
        v142 = v141 >> 1;
        v143 = *(_DWORD **)v13;
        v144 = *(_DWORD *)(*(_QWORD *)v13 + 8) & ~(*(int *)(*(_QWORD *)v13 + 8) >> 31);
        if ((_DWORD)v162)
        {
          v145 = __OFSUB__(v144, v142);
          v144 -= v142;
          if (v145)
            v144 = 0x7FFFFFFF;
        }
        v143[2] = v144;
        v146 = v143[3];
        if (v146 != -64)
        {
          v147 = v144 & ~(v144 >> 31);
          if (v146 < v147)
            v143[3] = v147;
        }
        if ((_DWORD)v165 == 1)
          return v10 != 0;
        v149 = v143 + 37;
        v150 = 1;
        while (v150 < v13[3])
        {
          v151 = *(v149 - 1) & ~(*(v149 - 1) >> 31);
          v145 = __OFSUB__(v151, v142);
          v152 = v151 - v142;
          if (v145)
            v152 = 0x7FFFFFFF;
          v153 = v152 - v142;
          if (__OFSUB__(v152, v142))
            v153 = (v152 >> 31) + 0x7FFFFFFF;
          if (v162 != v150)
            v152 = v153;
          *(v149 - 1) = v152;
          v154 = v152 & ~(v152 >> 31);
          if (*v149 != -64 && *v149 < v154)
            *v149 = v154;
          ++v150;
          v149 += 34;
          if (v165 == v150)
            return v10 != 0;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x19634396CLL);
    }
  }
  return v10 != 0;
}

uint64_t WebCore::GridTrackSizingAlgorithm::run(WebCore::GridTrackSizingAlgorithm *this)
{
  int v1;
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;
  double v5;
  uint64_t result;
  WebCore::RenderElement *v8;
  int v9;
  const WebCore::RenderBox *v10;
  uint64_t v11;
  char *v12;
  _BOOL4 v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  double v22;
  char *v23;
  int *v24;
  int v25;
  int *v26;
  int v27;
  int v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  unsigned int *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  int *v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  int v73;
  float v74;
  _DWORD *v75;
  int v76;
  _DWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  signed int v91;
  signed int v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  unsigned int v98;
  char v99;
  double v100;
  unint64_t v101;
  unint64_t v102;
  void *v103;
  void *v104;
  int v105;
  char *v106;
  uint64_t v107;
  unsigned int *v108;
  uint64_t v109;
  int *v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  int v116;
  int v117;
  uint64_t v118;
  int *v119;
  int v120;
  int v121;
  int v122;
  uint64_t v124;
  unsigned int v125;
  int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  char *v131;
  float v132;
  uint64_t v133;
  unsigned int v134;
  int v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  int64_t v139;
  unsigned int *v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  int v146;
  int v147;
  uint64_t v148;
  _DWORD *v149;
  int v150;
  int v151;
  int v152;
  int v154;
  _QWORD *v155;
  int v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  WebCore::Length *v162;
  WebCore::Length *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  void *v171;
  unsigned int v172[2];
  uint64_t v173;
  int v174;
  unsigned int v175;
  unsigned __int8 v176;
  char v177;
  char v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  unsigned __int8 v182;
  char v183;
  char v184;
  uint64_t v185;
  __int16 v186;
  int v187;
  double v188[2];

  result = WebCore::RenderGrid::isMasonry(*((_QWORD *)this + 17), *((unsigned __int8 *)this + 120));
  if ((result & 1) != 0)
    goto LABEL_164;
  v8 = (WebCore::RenderElement *)*((_QWORD *)this + 17);
  v9 = *((unsigned __int8 *)this + 120);
  result = WebCore::RenderElement::establishesIndependentFormattingContext(v8);
  if ((result & 1) == 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 11) + 40) + 80);
    if (v9)
    {
      if (!*(_BYTE *)(v11 + 258))
        goto LABEL_5;
    }
    else if (!*(_BYTE *)(v11 + 259))
    {
      goto LABEL_5;
    }
    v159 = *((_QWORD *)v8 + 4);
    if (v159)
    {
      result = *(_QWORD *)(v159 + 8);
      if (result)
      {
        if (*(_BYTE *)(result + 46) == 12)
        {
          if (v9 == 1)
          {
            result = WebCore::RenderGrid::areMasonryRows((WebCore::RenderGrid *)result);
            if ((result & 1) != 0)
              goto LABEL_5;
          }
          else
          {
            result = WebCore::RenderGrid::areMasonryColumns((WebCore::RenderGrid *)result);
            if ((result & 1) != 0)
              goto LABEL_5;
          }
          result = WebCore::GridTrackSizingAlgorithm::copyUsedTrackSizesForSubgrid(this);
          if ((result & 1) != 0)
            goto LABEL_164;
        }
      }
    }
  }
LABEL_5:
  if (*((_BYTE *)this + 120))
  {
    v165 = *(_QWORD *)((char *)this + 28);
    v12 = (char *)this + 56;
    if (*((_BYTE *)this + 120) != 1)
    {
      v13 = 0;
LABEL_8:
      v14 = (char *)this + 4;
      goto LABEL_9;
    }
    result = WebCore::RenderBlock::availableLogicalHeightForPercentageComputation(*((WebCore::RenderBlock **)this + 17), v10);
    v13 = (result & 0xFF00000000) == 0;
    if (*((_BYTE *)this + 120))
      goto LABEL_8;
  }
  else
  {
    v13 = 0;
    v165 = *(_QWORD *)((char *)this + 20);
    v12 = (char *)this + 40;
  }
  v14 = (char *)this + 12;
LABEL_9:
  v164 = *(_QWORD *)v14;
  LODWORD(v188[0]) = 0;
  if (*((_DWORD *)v12 + 3))
  {
    v4 = 0;
    v162 = (WebCore::Length *)&v175;
    v163 = (WebCore::Length *)v172;
    v168 = &v179;
    v169 = &v173;
    v2 = (uint64_t *)((char *)this + 72);
    v170 = (uint64_t *)((char *)this + 88);
    v166 = (uint64_t *)((char *)this + 104);
    v167 = &v185;
    v3 = 136;
    v1 = 1;
    v5 = 2147483650.0;
    goto LABEL_11;
  }
LABEL_129:
  if (*((_DWORD *)this + 21))
    result = (uint64_t)WebCore::GridTrackSizingAlgorithm::resolveIntrinsicTrackSizes(this);
  if (*((_BYTE *)this + 120))
  {
    *((_DWORD *)this + 41) = 0;
    v75 = (_DWORD *)((char *)this + 164);
    *((_DWORD *)this + 40) = 0;
    v77 = (_DWORD *)((char *)this + 160);
LABEL_134:
    v78 = (char *)this + 56;
    goto LABEL_135;
  }
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 72))(*((_QWORD *)this + 18));
  if ((_DWORD)result)
  {
    result = WebCore::RenderGrid::explicitIntrinsicInnerLogicalSize(*((WebCore::RenderElement **)this + 17), *((unsigned __int8 *)this + 120));
    if ((result & 0xFF00000000) != 0)
    {
      *((_DWORD *)this + 40) = result;
      *((_DWORD *)this + 41) = result;
      goto LABEL_146;
    }
  }
  *((_DWORD *)this + 41) = 0;
  v75 = (_DWORD *)((char *)this + 164);
  v76 = *((unsigned __int8 *)this + 120);
  *((_DWORD *)this + 40) = 0;
  v77 = (_DWORD *)((char *)this + 160);
  if (v76)
    goto LABEL_134;
  v78 = (char *)this + 40;
LABEL_135:
  v79 = *((unsigned int *)v78 + 3);
  if ((_DWORD)v79)
  {
    v80 = *(_QWORD *)v78;
    v81 = 136 * v79;
    v82 = v80 + 12;
    do
    {
      v83 = *(_DWORD *)(v82 - 4) & ~(*(int *)(v82 - 4) >> 31);
      v84 = __OFADD__(*v77, v83);
      v85 = *v77 + v83;
      if (v84)
        v85 = (*v77 >> 31) + 0x7FFFFFFF;
      *v77 = v85;
      v86 = *(_DWORD *)v82;
      if (*(_DWORD *)v82 == -64)
        v86 = *(_DWORD *)(v82 - 4) & ~(*(int *)(v82 - 4) >> 31);
      v84 = __OFADD__(*v75, v86);
      v87 = *v75 + v86;
      if (v84)
        v87 = (*v75 >> 31) + 0x7FFFFFFF;
      *v75 = v87;
      *(_BYTE *)(v82 + 16) = 0;
      *(_DWORD *)(v82 + 12) = 0;
      v82 += 136;
      v81 -= 136;
    }
    while (v81);
  }
LABEL_146:
  v88 = *((unsigned __int8 *)this + 120);
  if (*((_BYTE *)this + 120))
  {
    v89 = *(_QWORD *)((char *)this + 28);
    if ((v89 & 0xFF00000000) == 0)
    {
      v95 = *((_QWORD *)this + 18);
      goto LABEL_160;
    }
  }
  else
  {
    v89 = *(_QWORD *)((char *)this + 20);
    if ((v89 & 0xFF00000000) == 0)
    {
      v95 = *((_QWORD *)this + 18);
LABEL_278:
      v96 = (char *)this + 40;
      v97 = (char *)this + 20;
      goto LABEL_161;
    }
  }
  if ((v89 & 0xFF00000000) == 0)
  {
    result = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_308:
    v18 = 0x80000000;
    while (1)
    {
      v23 = (char *)v8 + v4 * (unint64_t)v3;
      *((_DWORD *)v23 + 2) = v18;
      v24 = (int *)(v23 + 8);
      v26 = v24 + 1;
      v25 = v24[1];
      v27 = v18 & ~(v18 >> 31);
      if (v25 != -64 && v25 < v27)
        *v26 = v27;
      if (v180 == 1)
      {
        if (!v174)
        {
          v29 = -64;
          if (!LOBYTE(v172[1]) || LOBYTE(v172[1]) - 7 < 2)
            goto LABEL_51;
        }
      }
      else
      {
        v29 = -64;
        if (v176 > 0xBu || ((v1 << v176) & 0x818) == 0)
          goto LABEL_51;
        v30 = 4;
        if (!*((_BYTE *)this + 120))
          v30 = 12;
        v31 = *(_QWORD *)((char *)this + v30);
        if ((v31 & 0xFF00000000) != 0)
          v27 = v31 & ~((int)v31 >> 31);
        else
          v27 = 0;
        if (v176 - 3 < 2 || v176 == 11)
        {
          switch(v176)
          {
            case 4u:
              v32 = *(float *)&v175;
              if (!v178)
                v32 = (float)(int)v175;
              break;
            case 3u:
              v132 = *(float *)&v175;
              if (!v178)
                v132 = (float)(int)v175;
              v32 = (float)((float)((float)v27 * 0.015625) * v132) / 100.0;
              break;
            case 0xBu:
              result = WebCore::Length::nonNanCalculatedValue(v162, (float)v27 * 0.015625);
              break;
            default:
              goto LABEL_246;
          }
          v33 = v32 * 64.0;
          if (v33 >= v5)
          {
            v27 = 0x7FFFFFFF;
          }
          else if (v33 <= -2147483650.0)
          {
            v27 = 0x80000000;
          }
          else
          {
            v27 = (int)v33;
            if ((int)v33 == -64)
            {
              v29 = -64;
LABEL_51:
              *v26 = v29;
              goto LABEL_52;
            }
          }
        }
        else if (v176 != 9)
        {
LABEL_246:
          v27 = 0;
        }
      }
      v73 = v27;
      if (*((_BYTE *)v8 + v4 * (unint64_t)v3 + 28))
        v73 = *(_DWORD *)((char *)v8 + v4 * (unint64_t)v3 + 24);
      if (v73 < v27)
        v27 = v73;
      *v26 = v27;
      if (v27 != -64)
      {
        v29 = *v24 & ~(*v24 >> 31);
        if (v27 < v29)
          goto LABEL_51;
      }
LABEL_52:
      *((_BYTE *)v8 + v4 * (unint64_t)v3 + 32) = 0;
      if ((_DWORD)v171 == 2)
      {
        if ((v164 & 0xFF00000000) != 0)
          v154 = v164 & ~((int)v164 >> 31);
        else
          v154 = 0;
        result = WebCore::valueForLength((unsigned __int8 *)&v181, v154);
        v155 = (_QWORD *)((char *)v8 + 136 * v4);
        *((_BYTE *)v155 + 28) = 1;
        *((_DWORD *)v155 + 6) = result;
      }
      if (v174 || LOBYTE(v172[1]) && LOBYTE(v172[1]) - 7 >= 2)
      {
        v37 = v180;
        if (v180)
          goto LABEL_58;
        if (v176 && v176 - 7 > 1)
          goto LABEL_59;
      }
      v34 = *((unsigned int *)this + 21);
      if ((_DWORD)v34 == *((_DWORD *)this + 20))
      {
        result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v34 + 1, (unint64_t)v188);
        v34 = *((unsigned int *)this + 21);
        v35 = *((_QWORD *)this + 9);
        v36 = *(_DWORD *)result;
      }
      else
      {
        v35 = *v2;
        v36 = LODWORD(v188[0]);
      }
      *(_DWORD *)(v35 + 4 * v34) = v36;
      ++*((_DWORD *)this + 21);
      v37 = v180;
LABEL_58:
      if (v37 == 1)
      {
        v38 = *((unsigned int *)this + 25);
        if ((_DWORD)v38 == *((_DWORD *)this + 24))
        {
          result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v170, v38 + 1, (unint64_t)v188);
          v38 = *((unsigned int *)this + 25);
          v39 = *((_QWORD *)this + 11);
          v40 = *(_DWORD *)result;
        }
        else
        {
          v39 = *v170;
          v40 = LODWORD(v188[0]);
        }
        *(_DWORD *)(v39 + 4 * v38) = v40;
        ++*((_DWORD *)this + 25);
      }
LABEL_59:
      if ((v186 & 2) != 0 && (_DWORD)v171 != 2)
      {
        v44 = *((unsigned int *)this + 29);
        if ((_DWORD)v44 == *((_DWORD *)this + 28))
        {
          result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v166, v44 + 1, (unint64_t)v188);
          v44 = *((unsigned int *)this + 29);
          v45 = *((_QWORD *)this + 13);
          v46 = *(_DWORD *)result;
        }
        else
        {
          v45 = *v166;
          v46 = LODWORD(v188[0]);
        }
        *(_DWORD *)(v45 + 4 * v44) = v46;
        ++*((_DWORD *)this + 29);
      }
      if (!v13)
        goto LABEL_62;
      v47 = *((unsigned __int8 *)this + 120);
      v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 88) + 40) + 80);
      if (*((_BYTE *)this + 120))
      {
        v49 = (uint64_t *)(v48 + 136);
        v50 = (uint64_t *)(v48 + 232);
        v51 = (uint64_t *)(v48 + 40);
        v52 = (unsigned int *)(v48 + 252);
      }
      else
      {
        v49 = (uint64_t *)(v48 + 120);
        v50 = (uint64_t *)(v48 + 216);
        v51 = (uint64_t *)(v48 + 56);
        v52 = (unsigned int *)(v48 + 248);
      }
      v53 = *((_QWORD *)this + 16);
      v54 = v47 == 1;
      if (v47 == 1)
        v55 = 68;
      else
        v55 = 64;
      v56 = 56;
      if (v54)
        v56 = 60;
      v57 = *((unsigned int *)v51 + 3);
      v58 = (LODWORD(v188[0]) - *(_DWORD *)(v53 + v56));
      if ((int)v58 < 0)
      {
        v156 = (int)v58 % (int)v57;
        if (v156)
          v157 = *((_DWORD *)v51 + 3);
        else
          v157 = 0;
        LODWORD(v58) = v157 + v156;
        if (v57 <= (int)v58)
        {
          __break(0xC471u);
          JUMPOUT(0x196344968);
        }
        v58 = (int)v58;
        goto LABEL_93;
      }
      v59 = *(_DWORD *)(v53 + v55);
      v60 = *((_DWORD *)v49 + 3);
      if (v58 >= v60 + v59)
      {
        v58 = (v58 - (v60 + v59)) % v57;
      }
      else
      {
        if (!v59 || (v158 = *v52, v58 < v158))
        {
          if (v60 <= v58)
          {
            __break(0xC471u);
            JUMPOUT(0x196344960);
          }
          goto LABEL_92;
        }
        if (v58 >= v59 + v158)
        {
          v58 = (v58 - v59);
          if (v60 <= v58)
          {
            __break(0xC471u);
            JUMPOUT(0x1963448D0);
          }
LABEL_92:
          v51 = v49;
          goto LABEL_93;
        }
        v58 = (v58 - v158) % *((_DWORD *)v50 + 3);
        v51 = v50;
      }
LABEL_93:
      v61 = *v51;
      v62 = *(_DWORD *)(v61 + 88 * v58 + 48);
      if (!*((_BYTE *)this + 2) && v62 == 1)
        *((_BYTE *)this + 2) = v1;
      if (!*((_BYTE *)this + 1)
        && (!*(_DWORD *)(v61 + 88 * v58 + 24) && (*(_BYTE *)(v61 + 88 * v58 + 12) & 0xF7) == 3
         || !v62 && (*(_BYTE *)(v61 + 88 * v58 + 36) & 0xF7) == 3))
      {
        *((_BYTE *)this + 1) = 1;
      }
LABEL_62:
      if (v182 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v181);
      }
      if (v176 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v175);
      }
      if (LOBYTE(v172[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v172[0]);
      }
      v4 = LODWORD(v188[0]) + 1;
      LODWORD(v188[0]) = v4;
      if (*((_DWORD *)v12 + 3) <= v4)
        goto LABEL_129;
LABEL_11:
      v8 = *(WebCore::RenderElement **)v12;
      WebCore::GridTrackSizingAlgorithm::calculateGridTrackSize((WebCore::GridTrackSize *)&v171, (uint64_t)this, *((unsigned __int8 *)this + 120), v4);
      v15 = (char *)v8 + v4 * (unint64_t)v3;
      v17 = v15[128];
      v16 = v15 + 128;
      if (v17)
      {
        result = WebCore::GridTrackSize::operator=((uint64_t)(v16 - 88), (uint64_t)&v171);
      }
      else
      {
        *((_DWORD *)v16 - 22) = (_DWORD)v171;
        *((_DWORD *)v16 - 20) = 0;
        v41 = (int *)(v16 - 80);
        *(_WORD *)(v16 - 75) = 0;
        v42 = LOBYTE(v172[1]);
        *((_WORD *)v16 - 38) = v172[1];
        if (v42 <= 0xD)
        {
          v43 = v1 << v42;
          if ((v43 & 0x7FC) != 0)
          {
            *(v16 - 74) = BYTE2(v172[1]);
            *v41 = v172[0];
          }
          else if ((v43 & 0x3003) != 0)
          {
            *v41 = 0;
          }
          else
          {
            *v41 = v172[0];
            WebCore::Length::ref(v41);
          }
        }
        v63 = *v169;
        v64 = *((_DWORD *)v169 + 2);
        *((_DWORD *)v16 - 14) = 0;
        v65 = (int *)(v16 - 56);
        *((_DWORD *)v16 - 16) = v64;
        *((_QWORD *)v16 - 9) = v63;
        *(_WORD *)(v16 - 51) = 0;
        v66 = v176;
        *(v16 - 52) = v176;
        *(v16 - 51) = v177;
        if (v66 <= 0xD)
        {
          v67 = v1 << v66;
          if ((v67 & 0x7FC) != 0)
          {
            *(v16 - 50) = v178;
            *v65 = v175;
          }
          else if ((v67 & 0x3003) != 0)
          {
            *v65 = 0;
          }
          else
          {
            *v65 = v175;
            WebCore::Length::ref(v65);
          }
        }
        v68 = *v168;
        v69 = *((_DWORD *)v168 + 2);
        *((_DWORD *)v16 - 8) = 0;
        result = (uint64_t)(v16 - 32);
        *((_DWORD *)v16 - 10) = v69;
        *((_QWORD *)v16 - 6) = v68;
        *(_WORD *)(v16 - 27) = 0;
        v70 = v182;
        *(v16 - 28) = v182;
        *(v16 - 27) = v183;
        if (v70 <= 0xD)
        {
          v71 = v1 << v70;
          if ((v71 & 0x7FC) != 0)
          {
            *(v16 - 26) = v184;
            *(_DWORD *)result = v181;
          }
          else if ((v71 & 0x3003) != 0)
          {
            *(_DWORD *)result = 0;
          }
          else
          {
            *(_DWORD *)result = v181;
            result = (uint64_t)WebCore::Length::ref((int *)result);
          }
        }
        v72 = *v167;
        *((_DWORD *)v16 - 4) = *((_DWORD *)v167 + 2);
        *((_QWORD *)v16 - 3) = v72;
        *((_WORD *)v16 - 4) = v186;
        *v16 = v1;
      }
      if (v174 == 1)
      {
LABEL_241:
        v18 = 0;
      }
      else
      {
        v18 = 0;
        if (LOBYTE(v172[1]) <= 0xBu && ((v1 << SLOBYTE(v172[1])) & 0x818) != 0)
        {
          v19 = 4;
          if (!*((_BYTE *)this + 120))
            v19 = 12;
          v20 = *(_QWORD *)((char *)this + v19);
          if ((v20 & 0xFF00000000) != 0)
            v18 = v20 & ~((int)v20 >> 31);
          else
            v18 = 0;
          if (LOBYTE(v172[1]) - 3 < 2 || LOBYTE(v172[1]) == 11)
          {
            switch(LOBYTE(v172[1]))
            {
              case 4u:
                v21 = *(float *)v172;
                if (!BYTE2(v172[1]))
                  v21 = (float)(int)v172[0];
                break;
              case 3u:
                v74 = *(float *)v172;
                if (!BYTE2(v172[1]))
                  v74 = (float)(int)v172[0];
                v21 = (float)((float)((float)v18 * 0.015625) * v74) / 100.0;
                break;
              case 0xBu:
                result = WebCore::Length::nonNanCalculatedValue(v163, (float)v18 * 0.015625);
                break;
              default:
                goto LABEL_241;
            }
            v22 = v21 * 64.0;
            if (v22 >= v5)
            {
              v18 = 0x7FFFFFFF;
            }
            else
            {
              if (v22 <= -2147483650.0)
                goto LABEL_308;
              v18 = (int)v22;
            }
          }
          else if (LOBYTE(v172[1]) != 9)
          {
            goto LABEL_241;
          }
        }
      }
    }
  }
  v90 = *((_DWORD *)this + 40);
  v84 = __OFSUB__((_DWORD)v89, v90);
  v91 = v89 - v90;
  v92 = (v89 >> 31) + 0x7FFFFFFF;
  if (!v84)
    v92 = v91;
  v93 = 28;
  if (!*((_BYTE *)this + 120))
    v93 = 20;
  v94 = (char *)this + v93;
  v94[4] = 1;
  *(_DWORD *)v94 = v92;
  if (v92 >= 1)
  {
    v95 = *((_QWORD *)this + 18);
    if (!v88)
      goto LABEL_278;
LABEL_160:
    v96 = (char *)this + 56;
    v97 = (char *)this + 28;
LABEL_161:
    (*(void (**)(uint64_t, char *, char *))(*(_QWORD *)v95 + 24))(v95, v96, v97);
    if (*((_DWORD *)this + 25))
    {
      v100 = (*(double (**)(_QWORD, char *, _QWORD, uint64_t))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18), (char *)this + 88, *((unsigned __int8 *)this + 120), v165);
      v188[0] = v100;
      v187 = 0;
      v171 = 0;
      *(_QWORD *)v172 = 0;
      v101 = *((unsigned int *)this + 25);
      if ((_DWORD)v101)
      {
        if (v101 <= 0x10)
          v102 = 16;
        else
          v102 = *((unsigned int *)this + 25);
        if (v102 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x196344980);
        }
        v103 = (void *)WTF::fastMalloc((WTF *)(4 * v102));
        v172[0] = v102;
        v171 = v103;
        bzero(v103, 4 * v101);
      }
      else
      {
        v103 = 0;
      }
      v172[1] = v101;
      WebCore::GridTrackSizingAlgorithm::computeFlexSizedTracksGrowth((uint64_t)this, (uint64_t *)&v171, &v187, v100);
      if ((*(unsigned int (**)(_QWORD, double *, int *))(**((_QWORD **)this + 18) + 40))(*((_QWORD *)this + 18), v188, &v187))
      {
        v187 = 0;
        WebCore::GridTrackSizingAlgorithm::computeFlexSizedTracksGrowth((uint64_t)this, (uint64_t *)&v171, &v187, v188[0]);
      }
      v105 = *((unsigned __int8 *)this + 120);
      if (*((_BYTE *)this + 120))
        v106 = (char *)this + 56;
      else
        v106 = (char *)this + 40;
      v107 = *((unsigned int *)this + 25);
      if ((_DWORD)v107)
      {
        v108 = (unsigned int *)*((_QWORD *)this + 11);
        v109 = 4 * v107;
        v110 = (int *)v103;
        do
        {
          v111 = *v108;
          if (*((_DWORD *)v106 + 3) <= *v108)
          {
            __break(0xC471u);
            JUMPOUT(0x196344970);
          }
          if (!v101)
          {
            __break(0xC471u);
            JUMPOUT(0x196344978);
          }
          v112 = *v110;
          if (*v110)
          {
            v113 = *(_QWORD *)v106;
            v114 = *(_QWORD *)v106 + 136 * v111;
            v116 = *(_DWORD *)(v114 + 8);
            v115 = (int *)(v114 + 8);
            v104 = (void *)(v116 & ~(v116 >> 31));
            v84 = __OFADD__((_DWORD)v104, v112);
            v117 = (_DWORD)v104 + v112;
            if (v84)
              v117 = 0x7FFFFFFF;
            *v115 = v117;
            v118 = v113 + 136 * v111;
            v121 = *(_DWORD *)(v118 + 12);
            v119 = (int *)(v118 + 12);
            v120 = v121;
            v122 = v117 & ~(v117 >> 31);
            if (v121 != -64 && v120 < v122)
              *v119 = v122;
          }
          ++v108;
          ++v110;
          --v101;
          v109 -= 4;
        }
        while (v109);
      }
      if (v105)
        v124 = *(_QWORD *)((char *)this + 28);
      else
        v124 = *(_QWORD *)((char *)this + 20);
      if ((v124 & 0xFF00000000) != 0)
      {
        v84 = __OFSUB__((_DWORD)v124, v187);
        v128 = v124 - v187;
        v129 = (v124 >> 31) + 0x7FFFFFFF;
        if (!v84)
          v129 = v128;
        v54 = v105 == 0;
        v130 = 28;
        if (v54)
          v130 = 20;
        v131 = (char *)this + v130;
        v131[4] = 1;
        *(_DWORD *)v131 = v129;
      }
      v125 = *((_DWORD *)this + 41);
      v84 = __OFADD__(v125, v187);
      v126 = v125 + v187;
      v127 = (v125 >> 31) + 0x7FFFFFFF;
      if (!v84)
        v127 = v126;
      *((_DWORD *)this + 41) = v127;
      if (v103)
        WTF::fastFree((WTF *)v103, v104);
    }
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 48))(*((_QWORD *)this + 18));
    if (*((_DWORD *)this + 29))
    {
      v98 = result;
      if ((int)result >= 1)
      {
        v133 = *((_QWORD *)this + 17);
        if (*((_BYTE *)this + 120))
        {
          v134 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v133 + 88) + 32) + 120);
          result = (v134 & 0x7F) != 0 ? v134 : 64;
        }
        else
        {
          result = WebCore::RenderStyle::resolvedJustifyContent(v133 + 80, WebCore::contentAlignmentNormalBehaviorGrid(void)::normalBehavior);
        }
        if ((result & 0x70) == 0x40)
        {
          v135 = *((unsigned __int8 *)this + 120);
          if (*((_BYTE *)this + 120))
            v136 = (char *)this + 56;
          else
            v136 = (char *)this + 40;
          v137 = *((unsigned int *)this + 29);
          LODWORD(v138) = (_DWORD)v137 << 6;
          if (v137 <= 0x1FFFFFE)
            v138 = v138;
          else
            v138 = 0x7FFFFFFFLL;
          v139 = ((unint64_t)v98 << 6) / v138;
          if (v139 >= 0x7FFFFFFF)
            LODWORD(v139) = 0x7FFFFFFF;
          if ((_DWORD)v137)
          {
            v140 = (unsigned int *)*((_QWORD *)this + 13);
            v141 = 4 * v137;
            do
            {
              v142 = *v140;
              if (*((_DWORD *)v136 + 3) <= *v140)
              {
                __break(0xC471u);
                JUMPOUT(0x196344990);
              }
              v143 = *(_QWORD *)v136;
              v144 = *(_QWORD *)v136 + 136 * v142;
              v146 = *(_DWORD *)(v144 + 8);
              v145 = (_DWORD *)(v144 + 8);
              v147 = v146 & ~(v146 >> 31);
              v84 = __OFADD__(v147, (_DWORD)v139);
              LODWORD(result) = v147 + v139;
              if (v84)
                result = 0x7FFFFFFFLL;
              else
                result = result;
              *v145 = result;
              v148 = v143 + 136 * v142;
              v151 = *(_DWORD *)(v148 + 12);
              v149 = (_DWORD *)(v148 + 12);
              v150 = v151;
              v152 = result & ~((int)result >> 31);
              if (v151 != -64 && v150 < v152)
                *v149 = v152;
              ++v140;
              v141 -= 4;
            }
            while (v141);
          }
          v54 = v135 == 0;
          v160 = 28;
          if (v54)
            v160 = 20;
          v161 = (char *)this + v160;
          v161[4] = 1;
          *(_DWORD *)v161 = 0;
        }
      }
    }
  }
LABEL_164:
  v99 = 1;
  switch(*((_BYTE *)this + 168))
  {
    case 0:
      break;
    case 1:
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 56))(*((_QWORD *)this + 18));
      if ((_DWORD)result)
        v99 = 2;
      else
        v99 = 3;
      break;
    case 2:
      v99 = 3;
      break;
    case 3:
      v99 = 4;
      break;
    default:
      v99 = 0;
      break;
  }
  *((_BYTE *)this + 168) = v99;
  *(_BYTE *)this = 1;
  return result;
}

unsigned int *WebCore::GridTrackSizingAlgorithm::reset(WebCore::GridTrackSizingAlgorithm *this)
{
  unsigned int *result;

  *((_BYTE *)this + 168) = 0;
  WTF::Vector<WebCore::GridTrack,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)this + 10, 0);
  result = WTF::Vector<WebCore::GridTrack,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)this + 14, 0);
  *((_DWORD *)this + 21) = 0;
  *((_DWORD *)this + 25) = 0;
  *((_DWORD *)this + 29) = 0;
  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 3) = 0;
  *(_WORD *)((char *)this + 1) = 0;
  return result;
}

unsigned int *WTF::Vector<WebCore::GridTrack,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, void *a2)
{
  unsigned int v2;
  unsigned int *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v2 = a2;
  v3 = result;
  v4 = (void *)result[3];
  if (v4 != a2)
  {
    v5 = *(_QWORD *)result + 136 * v4;
    v6 = *(_QWORD *)result + 136 * (_QWORD)a2;
    do
    {
      if (*(_BYTE *)(v6 + 128))
      {
        if (*(_BYTE *)(v6 + 100) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unsigned int *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 96));
        }
        if (*(_BYTE *)(v6 + 76) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unsigned int *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 72));
        }
        if (*(_BYTE *)(v6 + 52) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (unsigned int *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v6 + 48));
        }
      }
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(*(_QWORD *)v6 + 8) = 0;
        result = *(unsigned int **)v6;
        *(_QWORD *)v6 = 0;
        if (result)
        {
          do
          {
            v7 = __ldaxr(result);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, result));
          if (!v8)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          }
        }
      }
      else
      {
        *(_QWORD *)v6 = 0;
      }
      v6 += 136;
    }
    while (v6 != v5);
  }
  v3[3] = v2;
  return result;
}

double WebCore::HitTestLocation::HitTestLocation(WebCore::HitTestLocation *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_WORD *)this + 32) = 256;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_WORD *)this + 32) = 256;
  return result;
}

WebCore::HitTestLocation *WebCore::HitTestLocation::HitTestLocation(WebCore::HitTestLocation *this, const WebCore::FloatPoint *a2, const WebCore::FloatQuad *a3)
{
  float v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v20;
  float v21;
  float v22;
  float v24;
  float v26;
  float v27;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int v40;
  int v41;
  float v42;
  float v43;
  int v44;
  int v45;
  int32x4_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int8x16_t v50;
  __int128 v51;

  v4 = floorf(*(float *)a2 * 64.0);
  if (v4 >= 2147500000.0)
  {
    v5 = 0x7FFFFFFFLL;
  }
  else if (v4 <= -2147500000.0)
  {
    v5 = 0x80000000;
  }
  else
  {
    v5 = (int)v4;
  }
  v6 = floorf(*((float *)a2 + 1) * 64.0);
  if (v6 >= 2147500000.0)
  {
    v7 = 0x7FFFFFFF00000000;
  }
  else if (v6 <= -2147500000.0)
  {
    v7 = 0x8000000000000000;
  }
  else
  {
    v7 = (unint64_t)(int)v6 << 32;
  }
  *(_QWORD *)this = v7 | v5;
  v9 = *((float *)a3 + 4);
  v8 = *((float *)a3 + 5);
  v11 = *((float *)a3 + 6);
  v10 = *((float *)a3 + 7);
  if (v11 >= v9)
    v12 = *((float *)a3 + 4);
  else
    v12 = *((float *)a3 + 6);
  v14 = *(float *)a3;
  v13 = *((float *)a3 + 1);
  v16 = *((float *)a3 + 2);
  v15 = *((float *)a3 + 3);
  if (v16 >= *(float *)a3)
    v17 = *(float *)a3;
  else
    v17 = *((float *)a3 + 2);
  if (v12 >= v17)
    v12 = v17;
  v18 = fabsf(v12);
  if (v18 == INFINITY || v18 > 2147500000.0)
    v12 = (float)((SLODWORD(v12) >> 31) ^ 0x7FFFFFFF);
  if (v10 >= v8)
    v20 = *((float *)a3 + 5);
  else
    v20 = *((float *)a3 + 7);
  if (v15 >= v13)
    v21 = *((float *)a3 + 1);
  else
    v21 = *((float *)a3 + 3);
  if (v20 >= v21)
    v20 = v21;
  v22 = fabsf(v20);
  if (v22 == INFINITY || v22 > 2147500000.0)
    v20 = (float)((SLODWORD(v20) >> 31) ^ 0x7FFFFFFF);
  if (v14 < v16)
    v14 = *((float *)a3 + 2);
  if (v9 < v11)
    v9 = *((float *)a3 + 6);
  if (v14 >= v9)
    v9 = v14;
  v24 = fabsf(v9);
  if (v24 == INFINITY || v24 > 2147500000.0)
    v9 = (float)((SLODWORD(v9) >> 31) ^ 0x7FFFFFFF);
  if (v13 < v15)
    v13 = *((float *)a3 + 3);
  if (v8 < v10)
    v8 = *((float *)a3 + 7);
  if (v13 >= v8)
    v26 = v13;
  else
    v26 = v8;
  v27 = fabsf(v26);
  if (v27 == INFINITY || v27 > 2147500000.0)
    v26 = (float)((SLODWORD(v26) >> 31) ^ 0x7FFFFFFF);
  v29 = floorf(v12);
  v30 = 2147500000.0;
  if (v29 < 2147500000.0)
  {
    v30 = -2147500000.0;
    if (v29 > -2147500000.0)
      v30 = (float)(int)v29;
  }
  v31 = v9 - v12;
  v32 = v26 - v20;
  v33 = floorf(v20);
  v34 = 2147500000.0;
  if (v33 < 2147500000.0)
  {
    v34 = -2147500000.0;
    if (v33 > -2147500000.0)
      v34 = (float)(int)v33;
  }
  v35 = v20 + v32;
  v36 = ceilf(v12 + v31);
  v37 = 2147500000.0;
  if (v36 < 2147500000.0)
  {
    v37 = -2147500000.0;
    if (v36 > -2147500000.0)
      v37 = (float)(int)v36;
  }
  v38 = ceilf(v35);
  v39 = 2147500000.0;
  if (v38 < 2147500000.0)
  {
    v39 = -2147500000.0;
    if (v38 > -2147500000.0)
      v39 = (float)(int)v38;
  }
  if (v30 >= 2147500000.0)
  {
    v40 = 0x7FFFFFFF;
  }
  else if (v30 <= -2147500000.0)
  {
    v40 = 0x80000000;
  }
  else
  {
    v40 = (int)v30;
  }
  if (v34 >= 2147500000.0)
  {
    v41 = 0x7FFFFFFF;
  }
  else if (v34 <= -2147500000.0)
  {
    v41 = 0x80000000;
  }
  else
  {
    v41 = (int)v34;
  }
  v42 = v37 - v30;
  v43 = v39 - v34;
  if (v42 >= 2147500000.0)
  {
    v44 = 0x7FFFFFFF;
  }
  else if (v42 > -2147500000.0)
  {
    v44 = (int)v42;
  }
  else
  {
    v44 = 0x80000000;
  }
  if (v43 >= 2147500000.0)
  {
    v45 = 0x7FFFFFFF;
  }
  else if (v43 <= -2147500000.0)
  {
    v45 = 0x80000000;
  }
  else
  {
    v45 = (int)v43;
  }
  v46.i64[0] = __PAIR64__(v41, v40);
  v46.i64[1] = __PAIR64__(v45, v44);
  v47.i64[0] = 0xFE000000FE000000;
  v47.i64[1] = 0xFE000000FE000000;
  v48 = (int8x16_t)vcgtq_s32(v46, v47);
  v49.i64[0] = 0xFE000000FE000000;
  v49.i64[1] = 0xFE000000FE000000;
  v50.i64[0] = 0x8000000080000000;
  v50.i64[1] = 0x8000000080000000;
  *(int8x16_t *)((char *)this + 8) = vorrq_s8((int8x16_t)(*(_OWORD *)&v48 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v49, v46), v50, (int8x16_t)vshlq_n_s32(v46, 6uLL)), v48));
  *((_QWORD *)this + 3) = *(_QWORD *)a2;
  v51 = *((_OWORD *)a3 + 1);
  *((_OWORD *)this + 2) = *(_OWORD *)a3;
  *((_OWORD *)this + 3) = v51;
  *((_BYTE *)this + 64) = 1;
  *((_BYTE *)this + 65) = WebCore::FloatQuad::isRectilinear(a3);
  return this;
}

float32x2_t WebCore::HitTestLocation::HitTestLocation(WebCore::HitTestLocation *this, const WebCore::LayoutRect *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  float32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  float32x2_t result;

  v2 = *((_DWORD *)a2 + 1);
  LODWORD(v3) = *(_DWORD *)a2 + *((_DWORD *)a2 + 2) / 2;
  if (__OFADD__(*(_DWORD *)a2, *((_DWORD *)a2 + 2) / 2))
    v3 = ((*(_DWORD *)a2 >> 31) + 0x7FFFFFFF);
  else
    v3 = v3;
  LODWORD(v4) = *((_DWORD *)a2 + 1) + *((_DWORD *)a2 + 3) / 2;
  if (__OFADD__(v2, *((_DWORD *)a2 + 3) / 2))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v4;
  *(_QWORD *)this = v3 | (v4 << 32);
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)a2;
  v5 = *((_DWORD *)a2 + 1);
  v6 = *(_DWORD *)a2 + *((_DWORD *)a2 + 2) / 2;
  if (__OFADD__(*(_DWORD *)a2, *((_DWORD *)a2 + 2) / 2))
    v6 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
  v7 = *((_DWORD *)a2 + 1) + *((_DWORD *)a2 + 3) / 2;
  if (__OFADD__(v5, *((_DWORD *)a2 + 3) / 2))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  v8 = (float32x2_t)vdup_n_s32(0x3C800000u);
  v9 = *(int32x2_t *)((char *)this + 16);
  v10 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)((char *)this + 8)), v8);
  *((float32x2_t *)this + 3) = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v7, v6)), v8);
  *((float32x2_t *)this + 4) = v10;
  result = vadd_f32(v10, vmul_f32(vcvt_f32_s32(v9), v8));
  *((_QWORD *)this + 5) = __PAIR64__(v10.u32[1], result.u32[0]);
  *((float32x2_t *)this + 6) = result;
  v10.i32[1] = result.i32[1];
  *((float32x2_t *)this + 7) = v10;
  *((_WORD *)this + 32) = 257;
  return result;
}

int8x16_t WebCore::HitTestLocation::move(WebCore::HitTestLocation *this, int32x2_t *a2)
{
  __int32 v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  float32x4_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float32x4_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v22;
  float v23;
  float v24;
  float v26;
  float v28;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  int v44;
  float v45;
  float v46;
  int v47;
  int v48;
  int32x4_t v49;
  int32x4_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int8x16_t result;

  v2 = a2->i32[1];
  v3 = *(_DWORD *)this + a2->i32[0];
  if (__OFADD__(*(_DWORD *)this, a2->i32[0]))
    v3 = (*(_DWORD *)this >> 31) + 0x7FFFFFFF;
  *(_DWORD *)this = v3;
  v4 = *((_DWORD *)this + 1);
  v5 = __OFADD__(v4, v2);
  v6 = v4 + v2;
  if (v5)
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  *((_DWORD *)this + 1) = v6;
  *(float32x2_t *)v7.f32 = vmul_f32(vcvt_f32_s32(*a2), (float32x2_t)vdup_n_s32(0x3C800000u));
  v8 = *((float *)this + 11);
  v9 = v7.f32[0] + *((float *)this + 10);
  v10 = *((float *)this + 13);
  v11 = v7.f32[0] + *((float *)this + 12);
  v12 = *((float *)this + 15);
  v13 = v7.f32[0] + *((float *)this + 14);
  v7.i64[1] = v7.i64[0];
  v14 = vaddq_f32(v7, *(float32x4_t *)((char *)this + 24));
  *(float32x4_t *)((char *)this + 24) = v14;
  v15 = v7.f32[1] + v8;
  *((float *)this + 10) = v9;
  *((float *)this + 11) = v15;
  v16 = v7.f32[1] + v10;
  *((float *)this + 12) = v11;
  *((float *)this + 13) = v7.f32[1] + v10;
  v17 = v7.f32[1] + v12;
  *((float *)this + 14) = v13;
  *((float *)this + 15) = v7.f32[1] + v12;
  if (v13 >= v11)
    v18 = v11;
  else
    v18 = v13;
  if (v9 >= v14.f32[2])
    v19 = v14.f32[2];
  else
    v19 = v9;
  if (v18 >= v19)
    v18 = v19;
  v20 = fabsf(v18);
  if (v20 == INFINITY || v20 > 2147500000.0)
    v18 = (float)((SLODWORD(v18) >> 31) ^ 0x7FFFFFFF);
  if (v17 >= v16)
    v22 = v16;
  else
    v22 = v17;
  if (v15 >= v14.f32[3])
    v23 = v14.f32[3];
  else
    v23 = v15;
  if (v22 >= v23)
    v22 = v23;
  v24 = fabsf(v22);
  if (v24 == INFINITY || v24 > 2147500000.0)
    v22 = (float)((SLODWORD(v22) >> 31) ^ 0x7FFFFFFF);
  if (v14.f32[2] >= v9)
    v9 = v14.f32[2];
  if (v11 < v13)
    v11 = v13;
  if (v9 < v11)
    v9 = v11;
  v26 = fabsf(v9);
  if (v26 == INFINITY || v26 > 2147500000.0)
    v9 = (float)((SLODWORD(v9) >> 31) ^ 0x7FFFFFFF);
  if (v14.f32[3] >= v15)
    v15 = v14.f32[3];
  if (v16 < v17)
    v16 = v17;
  if (v15 >= v16)
    v16 = v15;
  v28 = fabsf(v16);
  if (v28 == INFINITY || v28 > 2147500000.0)
    v16 = (float)((SLODWORD(v16) >> 31) ^ 0x7FFFFFFF);
  v30 = v9 - v18;
  v31 = v16 - v22;
  v32 = floorf(v18);
  v33 = -2147500000.0;
  if (v32 > -2147500000.0)
    v33 = (float)(int)v32;
  if (v32 < 2147500000.0)
    v34 = v33;
  else
    v34 = 2147500000.0;
  v35 = floorf(v22);
  v36 = -2147500000.0;
  if (v35 > -2147500000.0)
    v36 = (float)(int)v35;
  if (v35 < 2147500000.0)
    v37 = v36;
  else
    v37 = 2147500000.0;
  v38 = v22 + v31;
  v39 = ceilf(v18 + v30);
  v40 = 2147500000.0;
  if (v39 < 2147500000.0)
  {
    v40 = -2147500000.0;
    if (v39 > -2147500000.0)
      v40 = (float)(int)v39;
  }
  v41 = ceilf(v38);
  v42 = 2147500000.0;
  if (v41 < 2147500000.0)
  {
    v42 = -2147500000.0;
    if (v41 > -2147500000.0)
      v42 = (float)(int)v41;
  }
  if (v34 >= 2147500000.0)
  {
    v43 = 0x7FFFFFFF;
  }
  else if (v34 <= -2147500000.0)
  {
    v43 = 0x80000000;
  }
  else
  {
    v43 = (int)v34;
  }
  if (v37 >= 2147500000.0)
  {
    v44 = 0x7FFFFFFF;
  }
  else if (v37 <= -2147500000.0)
  {
    v44 = 0x80000000;
  }
  else
  {
    v44 = (int)v37;
  }
  v45 = v40 - v34;
  v46 = v42 - v37;
  if (v45 >= 2147500000.0)
  {
    v47 = 0x7FFFFFFF;
  }
  else if (v45 > -2147500000.0)
  {
    v47 = (int)v45;
  }
  else
  {
    v47 = 0x80000000;
  }
  if (v46 >= 2147500000.0)
  {
    v48 = 0x7FFFFFFF;
  }
  else if (v46 <= -2147500000.0)
  {
    v48 = 0x80000000;
  }
  else
  {
    v48 = (int)v46;
  }
  v49.i64[0] = __PAIR64__(v44, v43);
  v49.i64[1] = __PAIR64__(v48, v47);
  v50.i64[0] = 0xFE000000FE000000;
  v50.i64[1] = 0xFE000000FE000000;
  v51 = (int8x16_t)vcgtq_s32(v49, v50);
  v52.i64[0] = 0xFE000000FE000000;
  v52.i64[1] = 0xFE000000FE000000;
  v53.i64[0] = 0x8000000080000000;
  v53.i64[1] = 0x8000000080000000;
  result = vorrq_s8((int8x16_t)(*(_OWORD *)&v51 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v52, v49), v53, (int8x16_t)vshlq_n_s32(v49, 6uLL)), v51));
  *(int8x16_t *)((char *)this + 8) = result;
  return result;
}

__n128 WebCore::HitTestLocation::HitTestLocation(WebCore::HitTestLocation *this, const WebCore::HitTestLocation *a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)this = *(_QWORD *)a2;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  result = *((__n128 *)a2 + 2);
  v3 = *((_OWORD *)a2 + 3);
  *((__n128 *)this + 2) = result;
  *((_OWORD *)this + 3) = v3;
  *((_WORD *)this + 32) = *((_WORD *)a2 + 32);
  return result;
}

{
  __n128 result;
  __int128 v3;

  *(_QWORD *)this = *(_QWORD *)a2;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  result = *((__n128 *)a2 + 2);
  v3 = *((_OWORD *)a2 + 3);
  *((__n128 *)this + 2) = result;
  *((_OWORD *)this + 3) = v3;
  *((_WORD *)this + 32) = *((_WORD *)a2 + 32);
  return result;
}

BOOL WebCore::HitTestLocation::intersects(WebCore::HitTestLocation *this, const WebCore::LayoutRect *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v19;
  int v20;
  int v21;
  _DWORD v23[4];

  v2 = *((_DWORD *)a2 + 2);
  if (v2 < 1)
    return 0;
  v3 = *((_DWORD *)a2 + 3);
  if (v3 < 1)
    return 0;
  v5 = *((_DWORD *)this + 4);
  v4 = *((_DWORD *)this + 5);
  if (v5 < 1 || v4 < 1)
    return 0;
  v7 = *(_DWORD *)a2;
  v8 = *((_DWORD *)this + 2);
  v9 = v8 + v5;
  if (__OFADD__(v8, v5))
    v9 = (v8 >> 31) + 0x7FFFFFFF;
  if (v7 >= v9)
    return 0;
  v10 = __OFADD__(v7, v2);
  v11 = v7 + v2;
  v12 = (v7 >> 31) + 0x7FFFFFFF;
  if (v10)
    v11 = v12;
  if ((int)v8 >= v11)
    return 0;
  v13 = *((_DWORD *)a2 + 1);
  v14 = *((_DWORD *)this + 3);
  v15 = v14 + v4;
  if (__OFADD__(v14, v4))
    v15 = (v14 >> 31) + 0x7FFFFFFF;
  if (v13 >= v15)
    return 0;
  v10 = __OFADD__(v13, v3);
  v16 = v13 + v3;
  if (v10)
    v16 = (v13 >> 31) + 0x7FFFFFFF;
  if ((int)v14 >= v16)
    return 0;
  if (*((_BYTE *)this + 65) || WebCore::LayoutRect::contains(a2, (WebCore::HitTestLocation *)((char *)this + 8)))
    return 1;
  v23[0] = WebCore::LayoutRect::operator WebCore::FloatRect((int *)a2);
  v23[1] = v19;
  v23[2] = v20;
  v23[3] = v21;
  return WebCore::FloatQuad::intersectsRect((WebCore::HitTestLocation *)((char *)this + 32), (const WebCore::FloatRect *)v23);
}

BOOL WebCore::HitTestLocation::intersects(float32x4_t *this, int32x4_t *a2)
{
  return WebCore::RoundedRect::intersectsQuad(a2, this + 2);
}

double WebCore::HitTestResult::HitTestResult(WebCore::HitTestResult *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_WORD *)this + 32) = 256;
  *((_QWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_WORD *)this + 32) = 256;
  *((_QWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 0;
  return result;
}

float32_t WebCore::HitTestResult::HitTestResult(float32x2_t *this, int32x2_t *a2)
{
  unsigned int v2;
  unsigned int v3;
  float32_t result;
  float32_t v5;
  float32_t v6;
  int32x2_t v7;

  *this = (float32x2_t)*a2;
  v2 = a2->i32[0] & 0xFFFFFFC0;
  v3 = a2->i32[1] & 0xFFFFFFC0;
  this[1] = (float32x2_t)(v2 | ((unint64_t)(v3 >> 6) << 38));
  this[2] = (float32x2_t)0x4000000040;
  this[3] = vmul_f32(vcvt_f32_s32(*a2), (float32x2_t)vdup_n_s32(0x3C800000u));
  result = (float)(int)v2 * 0.015625;
  v5 = (float)(int)v3 * 0.015625;
  this[4].f32[0] = result;
  this[4].f32[1] = v5;
  this[5].f32[0] = result + 1.0;
  this[5].f32[1] = v5;
  v6 = v5 + 1.0;
  this[6].f32[0] = result + 1.0;
  this[6].f32[1] = v6;
  this[7].f32[0] = result;
  this[7].f32[1] = v6;
  this[8].i16[0] = 256;
  this[9] = 0;
  this[10] = 0;
  v7 = *a2;
  this[16] = 0;
  this[11] = (float32x2_t)v7;
  this[12] = 0;
  this[13] = 0;
  this[14] = 0;
  this[15].i8[0] = 0;
  return result;
}

{
  unsigned int v2;
  unsigned int v3;
  float32_t result;
  float32_t v5;
  float32_t v6;
  int32x2_t v7;

  *this = (float32x2_t)*a2;
  v2 = a2->i32[0] & 0xFFFFFFC0;
  v3 = a2->i32[1] & 0xFFFFFFC0;
  this[1] = (float32x2_t)(v2 | ((unint64_t)(v3 >> 6) << 38));
  this[2] = (float32x2_t)0x4000000040;
  this[3] = vmul_f32(vcvt_f32_s32(*a2), (float32x2_t)vdup_n_s32(0x3C800000u));
  result = (float)(int)v2 * 0.015625;
  v5 = (float)(int)v3 * 0.015625;
  this[4].f32[0] = result;
  this[4].f32[1] = v5;
  this[5].f32[0] = result + 1.0;
  this[5].f32[1] = v5;
  v6 = v5 + 1.0;
  this[6].f32[0] = result + 1.0;
  this[6].f32[1] = v6;
  this[7].f32[0] = result;
  this[7].f32[1] = v6;
  this[8].i16[0] = 256;
  this[9] = 0;
  this[10] = 0;
  v7 = *a2;
  this[16] = 0;
  this[11] = (float32x2_t)v7;
  this[12] = 0;
  this[13] = 0;
  this[14] = 0;
  this[15].i8[0] = 0;
  return result;
}

void WebCore::HitTestResult::HitTestResult(WebCore::HitTestResult *this, const WebCore::LayoutRect *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  WebCore::HitTestLocation::HitTestLocation(this, a2);
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  v4 = *((_DWORD *)a2 + 1);
  LODWORD(v5) = *(_DWORD *)a2 + *((_DWORD *)a2 + 2) / 2;
  if (__OFADD__(*(_DWORD *)a2, *((_DWORD *)a2 + 2) / 2))
    v5 = ((*(_DWORD *)a2 >> 31) + 0x7FFFFFFF);
  else
    v5 = v5;
  LODWORD(v6) = *((_DWORD *)a2 + 1) + *((_DWORD *)a2 + 3) / 2;
  if (__OFADD__(v4, *((_DWORD *)a2 + 3) / 2))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v6;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 88) = v5 | (v6 << 32);
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 120) = 0;
}

{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  WebCore::HitTestLocation::HitTestLocation(this, a2);
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  v4 = *((_DWORD *)a2 + 1);
  LODWORD(v5) = *(_DWORD *)a2 + *((_DWORD *)a2 + 2) / 2;
  if (__OFADD__(*(_DWORD *)a2, *((_DWORD *)a2 + 2) / 2))
    v5 = ((*(_DWORD *)a2 >> 31) + 0x7FFFFFFF);
  else
    v5 = v5;
  LODWORD(v6) = *((_DWORD *)a2 + 1) + *((_DWORD *)a2 + 3) / 2;
  if (__OFADD__(v4, *((_DWORD *)a2 + 3) / 2))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v6;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 88) = v5 | (v6 << 32);
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 120) = 0;
}

__n128 WebCore::HitTestResult::HitTestResult(WebCore::HitTestResult *this, const WebCore::HitTestLocation *a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  result = *((__n128 *)a2 + 2);
  v4 = *((_OWORD *)a2 + 3);
  *((__n128 *)this + 2) = result;
  *((_OWORD *)this + 3) = v4;
  *((_WORD *)this + 32) = *((_WORD *)a2 + 32);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = v2;
  *((_QWORD *)this + 12) = 0;
  return result;
}

{
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  result = *((__n128 *)a2 + 2);
  v4 = *((_OWORD *)a2 + 3);
  *((__n128 *)this + 2) = result;
  *((_OWORD *)this + 3) = v4;
  *((_WORD *)this + 32) = *((_WORD *)a2 + 32);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = v2;
  *((_QWORD *)this + 12) = 0;
  return result;
}

WebCore::HitTestResult *WebCore::HitTestResult::HitTestResult(WebCore::HitTestResult *this, const WebCore::HitTestResult *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  WTF *v11;
  void *v12;
  WTF *v13;

  *(_QWORD *)this = *(_QWORD *)a2;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  v4 = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = v4;
  *((_WORD *)this + 32) = *((_WORD *)a2 + 32);
  v5 = *((_QWORD *)a2 + 9);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  *((_QWORD *)this + 9) = v5;
  v6 = *((_QWORD *)a2 + 10);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  *((_QWORD *)this + 10) = v6;
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  v7 = *((_QWORD *)a2 + 13);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  *((_QWORD *)this + 13) = v7;
  v8 = *((_QWORD *)a2 + 14);
  if (v8)
    ++*(_DWORD *)(v8 + 8);
  *((_QWORD *)this + 16) = 0;
  v9 = (uint64_t **)((char *)this + 128);
  *((_QWORD *)this + 14) = v8;
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  if (*((_QWORD *)a2 + 16))
  {
    v11 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = 0;
    v13 = v11;
    std::unique_ptr<WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>>::operator=[abi:sn180100]((WTF **)this + 16, &v13);
    std::unique_ptr<WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>>::~unique_ptr[abi:sn180100](&v13, v12);
    WebCore::appendToNodeSet(*(WebCore::Node **)(*((_QWORD *)a2 + 16) + 8), *v9);
  }
  return this;
}

WTF **std::unique_ptr<WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>>::operator=[abi:sn180100](WTF **a1, WTF **a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = (WTF *)*((_QWORD *)v4 + 1);
    while (v5)
    {
      v6 = v5;
      v5 = (WTF *)*((_QWORD *)v5 + 2);
      v7 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      WTF::fastFree(v6, a2);
    }
    if (*(_QWORD *)v4)
      WTF::fastFree((WTF *)(*(_QWORD *)v4 - 16), a2);
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF **std::unique_ptr<WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = (WTF *)*((_QWORD *)v3 + 1);
    while (v4)
    {
      v5 = v4;
      v4 = (WTF *)*((_QWORD *)v4 + 2);
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      WTF::fastFree(v5, a2);
    }
    if (*(_QWORD *)v3)
      WTF::fastFree((WTF *)(*(_QWORD *)v3 - 16), a2);
    WTF::fastFree(v3, a2);
  }
  return a1;
}

WebCore::Node *WebCore::appendToNodeSet(WebCore::Node *result, uint64_t *a2)
{
  WebCore::Node *v3;
  WebCore::Node *v4;
  uint64_t *v5;
  WebCore::Node *v6;

  if (result)
  {
    v3 = result;
    do
    {
      v4 = *(WebCore::Node **)v3;
      *((_DWORD *)v4 + 6) = *(_DWORD *)(*(_QWORD *)v3 + 24) + 2;
      v6 = v4;
      WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add(&v5, a2, &v6);
      result = v6;
      if (v6)
      {
        if (*((_DWORD *)v6 + 6) == 2)
        {
          if ((*((_WORD *)v6 + 15) & 0x400) == 0)
            result = (WebCore::Node *)WebCore::Node::removedLastRef(v6);
        }
        else
        {
          *((_DWORD *)v6 + 6) -= 2;
        }
      }
      v3 = (WebCore::Node *)*((_QWORD *)v3 + 2);
    }
    while (v3);
  }
  return result;
}

void WebCore::HitTestResult::~HitTestResult(WebCore::HitTestResult *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    v4 = (WTF *)*((_QWORD *)v3 + 1);
    while (v4)
    {
      v5 = v4;
      v4 = (WTF *)*((_QWORD *)v4 + 2);
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      WTF::fastFree(v5, a2);
    }
    if (*(_QWORD *)v3)
      WTF::fastFree((WTF *)(*(_QWORD *)v3 - 16), a2);
    WTF::fastFree(v3, a2);
  }
  v7 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
}

uint64_t WebCore::HitTestResult::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v14;
  void *v15;
  WTF *v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v5;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *(_QWORD *)(a2 + 80);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v7;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 104);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v10 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v9;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = *(_QWORD *)(a2 + 112);
  if (v11)
    ++*(_DWORD *)(v11 + 8);
  v12 = *(_DWORD **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v11;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  if (*(_QWORD *)(a2 + 128))
  {
    v14 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    v16 = v14;
    std::unique_ptr<WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>>::operator=[abi:sn180100]((WTF **)(a1 + 128), &v16);
    std::unique_ptr<WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>>::~unique_ptr[abi:sn180100](&v16, v15);
    WebCore::appendToNodeSet(*(WebCore::Node **)(*(_QWORD *)(a2 + 128) + 8), *(uint64_t **)(a1 + 128));
  }
  return a1;
}

uint64_t WebCore::HitTestResult::setToNonUserAgentShadowAncestor(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = this;
  v2 = *(_QWORD *)(this + 72);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 22) & 0x10) == 0)
      goto LABEL_42;
    v4 = WebCore::Node::containingShadowRoot(*(WebCore::Node **)(this + 72));
    if (!v4 || *(_BYTE *)(v4 + 193))
      goto LABEL_42;
    v5 = *(_QWORD *)(v4 + 200);
    if (!v5)
    {
LABEL_25:
      v2 = 0;
      goto LABEL_6;
    }
    v2 = *(_QWORD *)(v5 + 8);
    if (v2)
    {
LABEL_42:
      if ((~*(unsigned __int16 *)(v2 + 28) & 0x408) != 0
        || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 368))(v2))
      {
        goto LABEL_5;
      }
      v8 = *(_QWORD *)(v2 + 112);
      if (!v8)
        goto LABEL_25;
      v2 = *(_QWORD *)(v8 + 8);
      if (v2)
LABEL_5:
        *(_DWORD *)(v2 + 24) += 2;
    }
LABEL_6:
    this = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 72) = v2;
    if (this)
    {
      if (*(_DWORD *)(this + 24) == 2)
      {
        if ((*(_WORD *)(this + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *(_DWORD *)(this + 24) -= 2;
      }
    }
  }
  v3 = *(_QWORD *)(v1 + 80);
  if (!v3)
    return this;
  if ((*(_BYTE *)(v3 + 22) & 0x10) == 0)
    goto LABEL_43;
  v6 = WebCore::Node::containingShadowRoot(*(WebCore::Node **)(v1 + 80));
  if (!v6 || *(_BYTE *)(v6 + 193))
    goto LABEL_43;
  v7 = *(_QWORD *)(v6 + 200);
  if (!v7)
  {
LABEL_29:
    v3 = 0;
    goto LABEL_14;
  }
  v3 = *(_QWORD *)(v7 + 8);
  if (v3)
  {
LABEL_43:
    if ((~*(unsigned __int16 *)(v3 + 28) & 0x408) != 0
      || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 368))(v3))
    {
      goto LABEL_13;
    }
    v9 = *(_QWORD *)(v3 + 112);
    if (!v9)
      goto LABEL_29;
    v3 = *(_QWORD *)(v9 + 8);
    if (v3)
LABEL_13:
      *(_DWORD *)(v3 + 24) += 2;
  }
LABEL_14:
  this = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = v3;
  if (this)
  {
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::HitTestResult::setInnerNode(WebCore::HitTestResult *this, WebCore::Node *a2)
{
  WebCore::Node *v2;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;

  v2 = a2;
  if (!a2)
    goto LABEL_14;
  if ((~*((unsigned __int16 *)a2 + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)a2 + 368))(a2))
  {
    v4 = (uint64_t *)((char *)this + 72);
LABEL_5:
    *((_DWORD *)v2 + 6) += 2;
    goto LABEL_6;
  }
  v6 = *((_QWORD *)v2 + 14);
  if (!v6)
  {
    v2 = 0;
LABEL_14:
    v4 = (uint64_t *)((char *)this + 72);
    goto LABEL_6;
  }
  v2 = *(WebCore::Node **)(v6 + 8);
  v4 = (uint64_t *)((char *)this + 72);
  if (v2)
    goto LABEL_5;
LABEL_6:
  result = *v4;
  *v4 = (uint64_t)v2;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HitTestResult::setInnerNonSharedNode(WebCore::HitTestResult *this, WebCore::Node *a2)
{
  WebCore::Node *v2;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;

  v2 = a2;
  if (!a2)
    goto LABEL_14;
  if ((~*((unsigned __int16 *)a2 + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)a2 + 368))(a2))
  {
    v4 = (uint64_t *)((char *)this + 80);
LABEL_5:
    *((_DWORD *)v2 + 6) += 2;
    goto LABEL_6;
  }
  v6 = *((_QWORD *)v2 + 14);
  if (!v6)
  {
    v2 = 0;
LABEL_14:
    v4 = (uint64_t *)((char *)this + 80);
    goto LABEL_6;
  }
  v2 = *(WebCore::Node **)(v6 + 8);
  v4 = (uint64_t *)((char *)this + 80);
  if (v2)
    goto LABEL_5;
LABEL_6:
  result = *v4;
  *v4 = (uint64_t)v2;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

_DWORD *WebCore::HitTestResult::setScrollbar(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *result;

  v3 = *a2;
  *a2 = 0;
  result = *(_DWORD **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v3;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::HitTestResult::innerNodeFrame(WebCore::HitTestResult *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 10);
  if ((v1 || (v1 = *((_QWORD *)this + 9)) != 0)
    && (v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528)) != 0)
  {
    return *(_QWORD *)(v2 + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::HitTestResult::frame(WebCore::HitTestResult *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 10);
  if (v1 && (v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528)) != 0)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

_QWORD *WebCore::HitTestResult::targetFrame(WebCore::HitTestResult *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  v1 = (_QWORD *)*((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(v1[5] + 8) + 528);
  if (!v2)
    return 0;
  v3 = *(_QWORD **)(v2 + 8);
  if (v3)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*v1 + 648))(&v8);
    v4 = WebCore::FrameTree::findBySpecifiedName((WebCore::FrameTree *)(v3 + 6), (const WTF::AtomString *)&v8, (WebCore::Frame *)v3);
    if (v4)
    {
      if (*((_BYTE *)v4 + 144))
        v3 = 0;
      else
        v3 = v4;
    }
    else
    {
      v3 = 0;
    }
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return v3;
}

BOOL WebCore::HitTestResult::isSelected(WebCore::HitTestResult *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 10);
  return v1
      && (v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528)) != 0
      && (v3 = *(_QWORD *)(v2 + 8)) != 0
      && WebCore::FrameSelection::contains(*(WebCore::FrameSelection **)(*(_QWORD *)(v3 + 296) + 3064), this);
}

void WebCore::HitTestResult::selectedText(WebCore::HitTestResult *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  UChar32 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  BOOL v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Document *v24;
  WebCore::Editor *v25;
  void *v26;
  WebCore::Editor *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _BYTE v32[96];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  char v38;
  const char *v39[2];

  v3 = *((_QWORD *)this + 10);
  if (!v3
    || (v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 528)) == 0
    || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    v12 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v12 += 2;
    *a2 = v12;
    return;
  }
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064) + 56), v36);
  if (!v38)
  {
LABEL_17:
    v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v11 += 2;
    *a2 = v11;
    goto LABEL_44;
  }
  WebCore::TextIterator::TextIterator((uint64_t)v32, v36, 0);
  if (!v33)
  {
LABEL_16:
    WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v32, v7);
    goto LABEL_17;
  }
  while ((int)v35 < 1)
  {
LABEL_15:
    WebCore::TextIterator::advance((WebCore::TextIterator *)v32, (WTF::StringImpl *)v7);
    if (!v33)
      goto LABEL_16;
  }
  v8 = 0;
  v9 = v35;
  while (1)
  {
    if ((v35 & 0xFF00000000) != 0)
    {
      if (v8 >= v35)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v10 = *(unsigned __int8 *)(v34 + v8);
    }
    else
    {
      if (v8 >= v35)
        goto LABEL_57;
      v10 = *(unsigned __int16 *)(v34 + 2 * v8);
    }
    if (((1 << u_charType(v10)) & 0x7000) == 0)
      break;
    if (v9 == ++v8)
      goto LABEL_15;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v5 + 296) + 3056);
  if (!v13)
  {
    v30 = v5;
    v24 = *(WebCore::Document **)(v5 + 296);
    v25 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v25, v24);
    v27 = (WebCore::Editor *)*((_QWORD *)v24 + 382);
    *((_QWORD *)v24 + 382) = v25;
    if (v27)
    {
      WebCore::Editor::~Editor(v27, v26);
      if (*(_DWORD *)v28)
      {
        *(_QWORD *)(v28 + 496) = 0;
        *(_OWORD *)(v28 + 464) = 0u;
        *(_OWORD *)(v28 + 480) = 0u;
        *(_OWORD *)(v28 + 432) = 0u;
        *(_OWORD *)(v28 + 448) = 0u;
        *(_OWORD *)(v28 + 400) = 0u;
        *(_OWORD *)(v28 + 416) = 0u;
        *(_OWORD *)(v28 + 368) = 0u;
        *(_OWORD *)(v28 + 384) = 0u;
        *(_OWORD *)(v28 + 336) = 0u;
        *(_OWORD *)(v28 + 352) = 0u;
        *(_OWORD *)(v28 + 304) = 0u;
        *(_OWORD *)(v28 + 320) = 0u;
        *(_OWORD *)(v28 + 272) = 0u;
        *(_OWORD *)(v28 + 288) = 0u;
        *(_OWORD *)(v28 + 240) = 0u;
        *(_OWORD *)(v28 + 256) = 0u;
        *(_OWORD *)(v28 + 208) = 0u;
        *(_OWORD *)(v28 + 224) = 0u;
        *(_OWORD *)(v28 + 176) = 0u;
        *(_OWORD *)(v28 + 192) = 0u;
        *(_OWORD *)(v28 + 144) = 0u;
        *(_OWORD *)(v28 + 160) = 0u;
        *(_OWORD *)(v28 + 112) = 0u;
        *(_OWORD *)(v28 + 128) = 0u;
        *(_OWORD *)(v28 + 80) = 0u;
        *(_OWORD *)(v28 + 96) = 0u;
        *(_OWORD *)(v28 + 48) = 0u;
        *(_OWORD *)(v28 + 64) = 0u;
        *(_OWORD *)(v28 + 16) = 0u;
        *(_OWORD *)(v28 + 32) = 0u;
        *(_OWORD *)v28 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v28, v29);
      }
    }
    v5 = v30;
    v13 = *((_QWORD *)v24 + 382);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 8) + 688);
  if (!v14)
    v14 = WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v13 + 16) + 8));
  if (*(_BYTE *)(v14 + 66))
    v15 = 512;
  else
    v15 = 2560;
  WebCore::Editor::selectedText(v13, v15, &v31);
  v16 = *(_QWORD *)(v5 + 296);
  if (!v16 || (v17 = *(_QWORD *)(v16 + 1744)) == 0)
  {
    v21 = v31;
    if (v31)
    {
      *(_DWORD *)v31 += 2;
      *a2 = v21;
      goto LABEL_41;
    }
LABEL_58:
    *a2 = 0;
    goto LABEL_43;
  }
  v19 = *(const char **)(v17 + 16);
  v18 = *(const char **)(v17 + 24);
  v39[0] = v19;
  v39[1] = v18;
  if (v18)
    v20 = PAL::nonBackslashEncodings == 0;
  else
    v20 = 1;
  if (!v20 && *(_QWORD *)PAL::nonBackslashEncodings)
    WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v39);
  v21 = v31;
  if (!v31)
    goto LABEL_58;
  WTF::StringImpl::replace();
LABEL_41:
  v31 = 0;
  if (*(_DWORD *)v21 == 2)
    WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v7);
  else
    *(_DWORD *)v21 -= 2;
LABEL_43:
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v32, v7);
LABEL_44:
  if (v38)
  {
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      if (*(_DWORD *)(v22 + 24) == 2)
      {
        if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v22, v6);
      }
      else
      {
        *(_DWORD *)(v22 + 24) -= 2;
      }
    }
    v23 = v36[0];
    v36[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)(v23 + 24) == 2)
      {
        if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v23, v6);
      }
      else
      {
        *(_DWORD *)(v23 + 24) -= 2;
      }
    }
  }
}

uint64_t WebCore::HitTestResult::spellingToolTip@<X0>(uint64_t result@<X0>, BOOL *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  unsigned __int8 v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  WTF::StringImpl *v21;
  char v22;
  unsigned __int8 v23;
  _QWORD v24[2];
  _QWORD v25[2];

  *a2 = 0;
  v4 = *(_QWORD *)(result + 80);
  if (!v4 || (v5 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 1496)) == 0)
  {
    *a3 = 0;
    return result;
  }
  v7 = result;
  ++*v5;
  WebCore::DocumentMarkerController::markerContainingPoint((uint64_t)v5, (int *)result, (void *)2, (uint64_t *)&v20);
  result = (uint64_t)v20;
  if (!v20 || (v9 = *((_QWORD *)v20 + 1)) == 0)
  {
    *a3 = 0;
    goto LABEL_24;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 64) & 0xFFFFFFFFFFFFLL;
  if (v10)
  {
    v11 = *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(v7 + 80) + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(v7 + 80) + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v11 + 1;
    v12 = v10;
    if ((*(_BYTE *)(v10 + 45) & 2) != 0)
      v12 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8);
    *a2 = (*(_DWORD *)(v12 + 120) & 0x4000000) != 0;
    if (v11 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x196346720);
    }
    *(_DWORD *)(v10 + 16) = v11;
  }
  v13 = *(_DWORD *)(v9 + 96);
  if (v13 == 5)
  {
    v15 = *(WTF::StringImpl **)(v9 + 32);
    if (v15)
      *(_DWORD *)v15 += 2;
    v21 = v15;
    v16 = *(_BYTE *)(v9 + 80);
    v25[0] = "('";
    v25[1] = 3;
    v24[0] = "', state: ";
    v24[1] = 11;
    v23 = v16;
    v22 = 41;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned char,char>((uint64_t)v25, (uint64_t *)&v21, (uint64_t)v24, &v23, &v22, a3);
    if (!*a3)
    {
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x1963466F0);
    }
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v8);
      else
        *(_DWORD *)v17 -= 2;
    }
    goto LABEL_23;
  }
  if (v13)
  {
    v14 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
      goto LABEL_14;
    goto LABEL_13;
  }
  v14 = *(_DWORD **)(v9 + 32);
  if (v14)
LABEL_13:
    *v14 += 2;
LABEL_14:
  *a3 = v14;
LABEL_23:
  result = (uint64_t)v20;
LABEL_24:
  v20 = 0;
  if (result)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)result);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)result));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v8);
    }
  }
  if (!*v5)
    goto LABEL_35;
  --*v5;
  return result;
}

uint64_t WebCore::HitTestResult::title@<X0>(uint64_t result@<X0>, BOOL *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a2 = 0;
  v4 = *(_QWORD *)(result + 72);
  if (!v4)
  {
LABEL_21:
    *a3 = 0;
    return result;
  }
  while (1)
  {
    if ((*(_WORD *)(v4 + 28) & 8) == 0)
      goto LABEL_6;
    *(_DWORD *)(v4 + 24) += 2;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 704))(v4);
    if (*a3)
      break;
    *a3 = 0;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
LABEL_6:
    v7 = (uint64_t *)(v4 + 32);
    v8 = *(_QWORD *)(v4 + 32);
    if (!v8
      || (*(_WORD *)(v8 + 28) & 8) == 0
      || (v9 = *(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v10 = *(_QWORD *)(v9 + 88)) == 0
      || (result = *(_QWORD *)(v10 + 224)) == 0
      || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4),
          v7 = (uint64_t *)(v4 + 32),
          !result))
    {
      if ((*(_WORD *)(v4 + 28) & 0x80) != 0)
      {
        v11 = *(_QWORD *)(v4 + 200);
        if (!v11)
          goto LABEL_21;
        v7 = (uint64_t *)(v11 + 8);
      }
      result = *v7;
    }
    v4 = result;
    if (!result)
      goto LABEL_21;
  }
  if ((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      *a2 = (*(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x78) & 0x4000000) != 0;
      goto LABEL_25;
    }
    result = 105;
    __break(0xC471u);
  }
  else
  {
LABEL_25:
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HitTestResult::innerTextIfTruncated@<X0>(uint64_t result@<X0>, const WebCore::RenderBlockFlow *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  char v3;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  unsigned int v16;
  char v17;
  char *v18;

  v6 = *(_QWORD *)(result + 72);
  if (!v6)
    goto LABEL_31;
  while (1)
  {
    v7 = *(_WORD *)(v6 + 28);
    if ((v7 & 8) != 0)
    {
      v8 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
      if (v8)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          result = 105;
          __break(0xC471u);
          return result;
        }
        if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 1)
          break;
      }
    }
    v10 = (uint64_t *)(v6 + 32);
    v9 = *(_QWORD *)(v6 + 32);
    if (v9)
    {
      if ((*(_WORD *)(v9 + 28) & 8) != 0)
      {
        v11 = *(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL;
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 88);
          if (v12)
          {
            result = *(_QWORD *)(v12 + 224);
            if (result)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
              if (result)
                goto LABEL_11;
              v7 = *(_WORD *)(v6 + 28);
            }
          }
        }
      }
    }
    if ((v7 & 0x80) != 0)
    {
      v13 = *(_QWORD *)(v6 + 200);
      if (!v13)
        goto LABEL_31;
      v10 = (uint64_t *)(v13 + 8);
    }
    result = *v10;
LABEL_11:
    v6 = result;
    if (!result)
      goto LABEL_31;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 150) & 0x20) == 0)
    goto LABEL_31;
  WebCore::InlineIterator::firstLineBoxFor(*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL, a2, (uint64_t)v15);
  v14 = v16;
  if (v16 == -1)
  {
LABEL_26:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_27:
    *(_BYTE *)a2 = (*(_DWORD *)(v8 + 120) & 0x4000000) != 0;
    result = (uint64_t)WebCore::Element::innerText((WebCore::Element *)v6, a3);
  }
  else
  {
    while (1)
    {
      v18 = &v17;
      result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v18, v15);
      v3 = result;
      if ((result & 1) != 0)
        break;
      if (v16 == -1)
        goto LABEL_26;
      v18 = &v17;
      if (((unsigned int (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox11hasEllipsisEvEUlRKT_E_JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v16])(&v18, v15))
      {
        goto LABEL_27;
      }
      if (v16 != -1)
      {
        v18 = &v17;
        ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v16])(&v18, v15);
        v14 = v16;
        if (v16 != -1)
          continue;
      }
      goto LABEL_26;
    }
  }
  if (v16 != -1)
    result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v16])(&v18, v15);
  if ((v3 & 1) != 0)
  {
LABEL_31:
    *(_BYTE *)a2 = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t *WebCore::displayString@<X0>(uint64_t *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  const char *v7;
  const char *v8;
  BOOL v9;
  _DWORD *v10;
  const char *v11[2];

  v4 = this;
  if (a2 && (v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 1744)) != 0)
  {
    v8 = *(const char **)(v6 + 16);
    v7 = *(const char **)(v6 + 24);
    v11[0] = v8;
    v11[1] = v7;
    if (v7)
      v9 = PAL::nonBackslashEncodings == 0;
    else
      v9 = 1;
    if (!v9 && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v11);
    this = (uint64_t *)*v4;
    if (*v4)
      return (uint64_t *)WTF::StringImpl::replace();
    else
      *a3 = 0;
  }
  else
  {
    v10 = (_DWORD *)*this;
    if (*this)
      *v10 += 2;
    *a3 = v10;
  }
  return this;
}

unsigned int *WebCore::HitTestResult::altDisplayString@<X0>(unsigned int *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  BOOL v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  BOOL v30;
  const char *v31;
  uint64_t v32;

  v4 = *((_QWORD *)this + 10);
  if (!v4 || (*(_WORD *)(v4 + 28) & 0x10) == 0)
    goto LABEL_25;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
  if (v5 != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
  {
    if (v5 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      *(_DWORD *)(v4 + 24) += 2;
      v12 = *(_QWORD *)(v4 + 104);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 4);
        if ((v13 & 1) != 0)
        {
          v14 = *(_QWORD *)(v12 + 40);
          LODWORD(v15) = *(_DWORD *)(v12 + 52);
          if ((_DWORD)v15)
          {
LABEL_18:
            v15 = v15;
            v16 = (WTF::StringImpl **)(v14 + 8);
            while (1)
            {
              v17 = (uint64_t)*(v16 - 1);
              if (v17 == WebCore::HTMLNames::altAttr
                || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
                && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
              {
                break;
              }
              v16 += 2;
              if (!--v15)
              {
                v16 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                break;
              }
            }
LABEL_45:
            v24 = *v16;
            if (*v16)
            {
              v25 = *(_DWORD *)v24;
              v26 = *(_DWORD *)v24 + 2;
              *(_DWORD *)v24 = v26;
              v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 1744);
              if (!v27)
              {
                *(_DWORD *)v24 = v25 + 4;
                *a3 = v24;
                if (v26)
                  goto LABEL_55;
LABEL_60:
                this = (unsigned int *)WTF::StringImpl::destroy(v24, a2);
                goto LABEL_56;
              }
            }
            else
            {
              v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 1744);
              if (!v27)
                goto LABEL_65;
            }
            v28 = *(const char **)(v27 + 16);
            v29 = *(_QWORD *)(v27 + 24);
            v31 = v28;
            v32 = v29;
            this = (unsigned int *)PAL::nonBackslashEncodings;
            if (v29)
              v30 = PAL::nonBackslashEncodings == 0;
            else
              v30 = 1;
            if (!v30 && *(_QWORD *)PAL::nonBackslashEncodings)
              this = (unsigned int *)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v31);
            if (v24)
            {
              this = (unsigned int *)WTF::StringImpl::replace();
              v26 = *(_DWORD *)v24 - 2;
              if (*(_DWORD *)v24 != 2)
              {
LABEL_55:
                *(_DWORD *)v24 = v26;
                goto LABEL_56;
              }
              goto LABEL_60;
            }
LABEL_65:
            *a3 = 0;
LABEL_56:
            v23 = *(_DWORD *)(v4 + 24) - 2;
            if (*(_DWORD *)(v4 + 24) == 2)
            {
              if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
              return this;
            }
LABEL_57:
            *(_DWORD *)(v4 + 24) = v23;
            return this;
          }
        }
        else
        {
          v14 = v12 + 32;
          LODWORD(v15) = v13 >> 5;
          if ((_DWORD)v15)
            goto LABEL_18;
        }
      }
      v16 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      goto LABEL_45;
    }
LABEL_25:
    *a3 = 0;
    return this;
  }
  *(_DWORD *)(v4 + 24) += 2;
  v6 = *(_QWORD *)(v4 + 104);
  if (!v6)
    goto LABEL_27;
  v7 = *(_DWORD *)(v6 + 4);
  if ((v7 & 1) == 0)
  {
    v8 = v6 + 32;
    LODWORD(v9) = v7 >> 5;
    if ((_DWORD)v9)
      goto LABEL_7;
LABEL_27:
    v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_28;
  }
  v8 = *(_QWORD *)(v6 + 40);
  LODWORD(v9) = *(_DWORD *)(v6 + 52);
  if (!(_DWORD)v9)
    goto LABEL_27;
LABEL_7:
  v9 = v9;
  v10 = (uint64_t *)(v8 + 8);
  while (1)
  {
    v11 = *(v10 - 1);
    if (v11 == WebCore::HTMLNames::altAttr
      || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
      && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
    {
      break;
    }
    v10 += 2;
    if (!--v9)
    {
      v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_28:
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 1744);
  if (v18)
  {
    v20 = *(const char **)(v18 + 16);
    v19 = *(_QWORD *)(v18 + 24);
    v31 = v20;
    v32 = v19;
    if (v19)
      v21 = PAL::nonBackslashEncodings == 0;
    else
      v21 = 1;
    if (!v21 && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v31);
    this = (unsigned int *)*v10;
    if (*v10)
      this = (unsigned int *)WTF::StringImpl::replace();
    else
      *a3 = 0;
  }
  else
  {
    v22 = (WTF::StringImpl *)*v10;
    if (*v10)
      *(_DWORD *)v22 += 2;
    *a3 = v22;
  }
  v23 = *(_DWORD *)(v4 + 24) - 2;
  if (*(_DWORD *)(v4 + 24) != 2)
    goto LABEL_57;
  if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  return this;
}

WTF *WebCore::HitTestResult::image(WebCore::HitTestResult *this, const WebCore::Node *a2)
{
  WebCore::ImageOverlay *v3;
  int isInsideOverlay;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  const WebCore::RenderObject *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (WebCore::ImageOverlay *)*((_QWORD *)this + 10);
  if (!v3)
    return 0;
  isInsideOverlay = WebCore::ImageOverlay::isInsideOverlay(v3, a2);
  v5 = *((_QWORD *)this + 10);
  if (isInsideOverlay)
  {
    v6 = **(_QWORD **)(v5 + 40);
    if (v6)
      v7 = (*(_WORD *)(v6 + 28) & 0x80) == 0;
    else
      v7 = 1;
    if (v7)
      return 0;
    v8 = *(_QWORD *)(v6 + 200);
    if (!v8)
      return 0;
    v5 = *(_QWORD *)(v8 + 8);
  }
  if (!v5)
    return 0;
  v10 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 2;
  v11 = (const WebCore::RenderObject *)(*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL);
  if (v11
    && (((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL)
                                                                                             + 0x35)) == 1
    && (v12 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0xE0) + 24)) != 0
    && (v13 = *(_QWORD *)(v12 + 8)) != 0
    && (*(_WORD *)(v13 + 557) >> 5) - 3 >= 2)
  {
    v9 = WebCore::CachedImage::imageForRenderer((WebCore::CachedImage *)v13, v11);
    v10 = *(_DWORD *)(v5 + 24) - 2;
    if (*(_DWORD *)(v5 + 24) != 2)
      goto LABEL_17;
  }
  else
  {
    v9 = 0;
    if (v10)
    {
LABEL_17:
      *(_DWORD *)(v5 + 24) = v10;
      return v9;
    }
  }
  if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v5, v11);
  return v9;
}

unint64_t WebCore::HitTestResult::imageRect(WebCore::ImageOverlay **this, const WebCore::Node *a2)
{
  const WebCore::Node *v3;
  WebCore::ImageOverlay *v4;
  int isInsideOverlay;
  WebCore::ImageOverlay *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  WebCore::RenderBox *v11;
  unint64_t v12;
  int v13;
  int v14;
  void *v15;
  float v16;
  float v17;
  float v18;
  float v20;
  float v21;
  float v22;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;

  if (!WebCore::HitTestResult::image((WebCore::HitTestResult *)this, a2))
    return 0;
  v4 = this[10];
  if (!v4)
    return 0;
  isInsideOverlay = WebCore::ImageOverlay::isInsideOverlay(v4, v3);
  v6 = this[10];
  if (isInsideOverlay)
  {
    v7 = **((_QWORD **)v6 + 5);
    if (v7)
      v8 = (*(_WORD *)(v7 + 28) & 0x80) == 0;
    else
      v8 = 1;
    if (v8)
      return 0;
    v9 = *(_QWORD *)(v7 + 200);
    if (!v9)
      return 0;
    v6 = *(WebCore::ImageOverlay **)(v9 + 8);
  }
  if (!v6)
    return 0;
  *((_DWORD *)v6 + 6) += 2;
  if ((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      v11 = (WebCore::RenderBox *)(*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL);
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  v12 = WebCore::RenderBox::contentBoxRect(v11);
  v38 = (float)(int)v12 * 0.015625;
  v39 = (float)SHIDWORD(v12) * 0.015625;
  v40 = v38 + (float)((float)v13 * 0.015625);
  v41 = v39;
  v42 = v40;
  v43 = v39 + (float)((float)v14 * 0.015625);
  v44 = v38;
  v45 = v43;
  WebCore::RenderObject::localToContainerQuad((uint64_t)v11, &v38, 0, 2u, &v33);
  if (v36 >= v34)
    v16 = v34;
  else
    v16 = v36;
  if (*((float *)&v33 + 2) >= *(float *)&v33)
    v17 = *(float *)&v33;
  else
    v17 = *((float *)&v33 + 2);
  if (v16 >= v17)
    v16 = v17;
  v18 = fabsf(v16);
  if (v18 == INFINITY || v18 > 2147500000.0)
    v16 = (float)((SLODWORD(v16) >> 31) ^ 0x7FFFFFFF);
  if (v37 >= v35)
    v20 = v35;
  else
    v20 = v37;
  if (*((float *)&v33 + 3) >= *((float *)&v33 + 1))
    v21 = *((float *)&v33 + 1);
  else
    v21 = *((float *)&v33 + 3);
  if (v20 >= v21)
    v20 = v21;
  v22 = fabsf(v20);
  if (v22 == INFINITY || v22 > 2147500000.0)
    v20 = (float)((SLODWORD(v20) >> 31) ^ 0x7FFFFFFF);
  v24 = floorf(v16);
  v25 = -2147500000.0;
  if (v24 > -2147500000.0)
    v25 = (float)(int)v24;
  if (v24 < 2147500000.0)
    v26 = v25;
  else
    v26 = 2147500000.0;
  v27 = floorf(v20);
  v28 = -2147500000.0;
  if (v27 > -2147500000.0)
    v28 = (float)(int)v27;
  if (v27 < 2147500000.0)
    v29 = v28;
  else
    v29 = 2147500000.0;
  if (v26 >= 2147500000.0)
  {
    v30 = 0x7FFFFFFFLL;
  }
  else if (v26 <= -2147500000.0)
  {
    v30 = 0x80000000;
  }
  else
  {
    v30 = (int)v26;
  }
  if (v29 >= 2147500000.0)
  {
    v31 = 0x7FFFFFFF00000000;
  }
  else if (v29 <= -2147500000.0)
  {
    v31 = 0x8000000000000000;
  }
  else
  {
    v31 = (unint64_t)(int)v29 << 32;
  }
  v10 = v31 | v30;
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v6, v15);
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
  return v10;
}

BOOL WebCore::HitTestResult::hasEntireImage(WebCore::HitTestResult *this, const WebCore::Node *a2)
{
  const WebCore::Node *v3;
  _BOOL8 hasLocalDataForURL;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Page *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12[5];

  WebCore::HitTestResult::absoluteImageURL(this, a2, (uint64_t)v12);
  if (!v12[0])
    return 0;
  if (!*((_DWORD *)v12[0] + 1))
  {
LABEL_13:
    hasLocalDataForURL = 0;
    goto LABEL_14;
  }
  WebCore::HitTestResult::imageRect((WebCore::ImageOverlay **)this, v3);
  hasLocalDataForURL = 0;
  if ((int)v3 >= 1 && SHIDWORD(v3) >= 1)
  {
    v5 = *((_QWORD *)this + 10);
    if (v5 || (v5 = *((_QWORD *)this + 9)) != 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 528);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 24);
          if (v8)
          {
            v9 = *(WebCore::Page **)(v8 + 8);
            if (v9)
            {
              hasLocalDataForURL = WebCore::Page::hasLocalDataForURL(v9, (const WTF::URL *)v12);
              goto LABEL_14;
            }
          }
        }
      }
    }
    goto LABEL_13;
  }
LABEL_14:
  v10 = v12[0];
  v12[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v3);
    else
      *(_DWORD *)v10 -= 2;
  }
  return hasLocalDataForURL;
}

unsigned int *WebCore::HitTestResult::absoluteImageURL@<X0>(WebCore::HitTestResult *this@<X0>, const WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::ImageOverlay *v5;
  int isInsideOverlay;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned int *result;
  uint64_t v12;
  void *v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WebCore::Document *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;

  v5 = (WebCore::ImageOverlay *)*((_QWORD *)this + 10);
  if (!v5)
    goto LABEL_8;
  isInsideOverlay = WebCore::ImageOverlay::isInsideOverlay(v5, a2);
  v7 = *((_QWORD *)this + 10);
  if (isInsideOverlay)
  {
    v8 = **(_QWORD **)(v7 + 40);
    if (v8)
      v9 = (*(_WORD *)(v8 + 28) & 0x80) == 0;
    else
      v9 = 1;
    if (v9)
      goto LABEL_8;
    v10 = *(_QWORD *)(v8 + 200);
    if (!v10)
      goto LABEL_8;
    v7 = *(_QWORD *)(v10 + 8);
  }
  if (!v7)
  {
LABEL_8:
    *(_QWORD *)a3 = 0;
    return (unsigned int *)WTF::URL::invalidate((WTF::URL *)a3);
  }
  *(_DWORD *)(v7 + 24) += 2;
  v12 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v12)
    goto LABEL_24;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 152))(v12) & 1) == 0)
    goto LABEL_24;
  v14 = *(_WORD *)(v7 + 28);
  if ((v14 & 8) == 0)
    goto LABEL_24;
  v15 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v15 + 2;
  if ((v14 & 0x10) == 0 || (v14 & 0x110) == 0x110)
  {
    if ((v14 & 0x10) == 0)
      goto LABEL_20;
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
  }
  else
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
    if (v16 == *(_QWORD *)(WebCore::HTMLNames::embedTag + 24))
    {
LABEL_25:
      v18 = *(WebCore::Document **)(*(_QWORD *)(v7 + 40) + 8);
      v19 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 640))(v7);
      result = (unsigned int *)WebCore::Document::completeURL(v18, v19, (uint64_t)v18 + 848, 0, (WTF::URL *)&v25);
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 528);
      if (v20
        && (v21 = *(_QWORD *)(v20 + 8)) != 0
        && (v22 = *(_QWORD *)(v21 + 24)) != 0
        && (v23 = *(_QWORD *)(v22 + 8)) != 0)
      {
        WebCore::ChromeClient::applyLinkDecorationFiltering(*(_QWORD *)(*(_QWORD *)(v23 + 48) + 16), a3);
        result = (unsigned int *)v25;
        v25 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
          else
            *result -= 2;
        }
      }
      else
      {
        v24 = v25;
        v25 = 0;
        *(_QWORD *)a3 = v24;
        *(_OWORD *)(a3 + 8) = v26;
        *(_OWORD *)(a3 + 24) = v27;
      }
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v7, v17);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      goto LABEL_35;
    }
  }
  if (v16 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
    || v16 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
    || v16 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
  {
    goto LABEL_25;
  }
LABEL_20:
  if ((v14 & 0x20) != 0 && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::imageTag + 24))
    goto LABEL_25;
  if (v15)
  {
    *(_DWORD *)(v7 + 24) = v15;
  }
  else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v7, v13);
  }
LABEL_24:
  *(_QWORD *)a3 = 0;
  result = (unsigned int *)WTF::URL::invalidate((WTF::URL *)a3);
LABEL_35:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v7, v17);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::HitTestResult::absolutePDFURL@<X0>(WebCore::HitTestResult *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WebCore::Document *v5;
  WTF::StringImpl *v6;
  unsigned int *result;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  __int128 v11;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;

  v3 = *((_QWORD *)this + 10);
  if (v3
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v3 + 200))(*((_QWORD *)this + 10))
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1288))(v3) & 1) != 0)
  {
    *(_DWORD *)(v3 + 24) += 2;
    v5 = *(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) + 8);
    WebCore::Document::completeURL(v5, (_QWORD *)(v3 + 216), (uint64_t)v5 + 848, 0, (WTF::URL *)&v12);
    if ((v13 & 1) != 0
      && ((MEMORY[0x19AEA53F4](*(_QWORD *)(v3 + 208), "application/pdf", 15) & 1) != 0
       || ((v8 = *(_QWORD *)(v3 + 208)) == 0 || !*(_DWORD *)(v8 + 4))
       && (WTF::URL::path((WTF::URL *)&v12), (WTF::StringView::endsWithIgnoringASCIICase() & 1) != 0)))
    {
      v9 = v12;
      v12 = 0;
      *(_QWORD *)a2 = v9;
      v10 = v13;
      v11 = v14;
      *(_OWORD *)(a2 + 8) = v13;
      *(_OWORD *)(a2 + 24) = v11;
      LODWORD(v13) = v10 & 0xFFFFFFFE;
    }
    else
    {
      *(_QWORD *)a2 = 0;
      WTF::URL::invalidate((WTF::URL *)a2);
    }
    result = (unsigned int *)v12;
    v12 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *result -= 2;
    }
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    return (unsigned int *)WTF::URL::invalidate((WTF::URL *)a2);
  }
  return result;
}

uint64_t WebCore::HitTestResult::absoluteMediaURL@<X0>(WebCore::HitTestResult *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;

  v3 = *((_QWORD *)this + 10);
  if (v3
    && (*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
    && (*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) != 0
    && (*(_WORD *)(v3 + 28) & 8) != 0
    && (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 824))(*((_QWORD *)this + 10)), (_DWORD)result))
  {
    v5 = *(WTF::StringImpl **)(v3 + 912);
    if (v5)
      *(_DWORD *)v5 += 2;
    v11 = v5;
    v12 = *(_OWORD *)(v3 + 920);
    v13 = *(_OWORD *)(v3 + 936);
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 528);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && (v8 = *(_QWORD *)(v7 + 24)) != 0 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
    {
      WebCore::ChromeClient::applyLinkDecorationFiltering(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16), a2);
      result = (uint64_t)v11;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          return WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    else
    {
      *(_QWORD *)a2 = v5;
      *(_OWORD *)(a2 + 8) = v12;
      *(_OWORD *)(a2 + 24) = v13;
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    return WTF::URL::invalidate((WTF::URL *)a2);
  }
  return result;
}

uint64_t WebCore::HitTestResult::hasMediaElement(WebCore::HitTestResult *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
  {
    if ((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
      && (*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) != 0
      && (*(_WORD *)(result + 28) & 8) != 0)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 824))(result);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::HitTestResult::mediaIsInFullscreen(WebCore::HitTestResult *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;

  v1 = *((_QWORD *)this + 10);
  if (!v1
    || (*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) == 0
    || (*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
    || (*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0
    || (*(_WORD *)(v1 + 28) & 8) == 0)
  {
    return 0;
  }
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*((_QWORD *)this + 10));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1264))(v1);
    if ((_DWORD)result)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 1992);
      if (v3)
      {
        v4 = *(_DWORD *)(v3 + 8);
        *(_DWORD *)(v3 + 8) = v4 + 1;
        v5 = *(_QWORD *)(v3 + 56);
        if (v5)
          v6 = v5 == v1;
        else
          v6 = 0;
        result = v6 || *(_DWORD *)(v1 + 1080) == 1;
        if (v4 == -1)
        {
          result = 286;
          __break(0xC471u);
        }
        else
        {
          *(_DWORD *)(v3 + 8) = v4;
        }
      }
      else
      {
        return *(_DWORD *)(v1 + 1080) == 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::HitTestResult::mediaHasAudio(WebCore::HitTestResult *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 10);
  if (v1
    && (*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
    && (*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) != 0
    && (*(_WORD *)(v1 + 28) & 8) != 0
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v1 + 824))(*((_QWORD *)this + 10)))
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1280))(v1);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::HitTestResult::mediaIsVideo(WebCore::HitTestResult *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 10);
  if (!v1
    || (*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) == 0
    || (*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
    || (*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0
    || (*(_WORD *)(v1 + 28) & 8) == 0)
  {
    return 0;
  }
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 824))(*((_QWORD *)this + 10));
  if ((_DWORD)result)
    return *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24);
  return result;
}

uint64_t WebCore::HitTestResult::isDownloadableMedia(WebCore::HitTestResult *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *((_QWORD *)this + 10);
  if (v1
    && (*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
    && (*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) != 0
    && (*(_WORD *)(v1 + 28) & 8) != 0
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v1 + 824))(*((_QWORD *)this + 10))
    && (v3 = *(_QWORD *)(v1 + 1136)) != 0)
  {
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 280))(*(_QWORD *)(v3 + 72));
  }
  else
  {
    return 0;
  }
}

WebCore::LocalFrame *WebCore::HitTestResult::isOverTextInsideFormControlElement(WebCore::HitTestResult *this)
{
  uint64_t v1;
  WebCore::LocalFrame *v2;
  void *v5;
  int v6;
  uint64_t v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  WTF::StringImpl *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14[2];
  WebCore::Node *v15;
  char v16;
  WebCore::Node *v17[3];
  int32x2_t v18;
  WebCore::Node *v19[2];
  WebCore::Node *v20;
  char v21;
  uint64_t v22;
  int v23;

  v1 = *((_QWORD *)this + 9);
  if (!v1 || (*(_WORD *)(v1 + 28) & 8) == 0)
    return 0;
  *(_DWORD *)(v1 + 24) += 2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 880))(v1))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528);
    if (v7)
    {
      v2 = *(WebCore::LocalFrame **)(v7 + 8);
      if (!v2)
        goto LABEL_22;
      v18.i32[0] = ((int)(*((_DWORD *)this + 22) - (v6 & 0xFFFFFFC0) + 32) >> 6) + *((_DWORD *)this + 22) / 64;
      v18.i32[1] = ((int)(*((_DWORD *)this + 23) - (v6 & 0xFFFFFFC0) + 32) >> 6) + *((_DWORD *)this + 23) / 64;
      WebCore::LocalFrame::rangeForPoint(v2, &v18, (uint64_t)v19);
      if (v21)
      {
        v8 = v20;
        v20 = 0;
        if (v8)
        {
          if (*((_DWORD *)v8 + 6) == 2)
          {
            if ((*((_WORD *)v8 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v8, v5);
          }
          else
          {
            *((_DWORD *)v8 + 6) -= 2;
          }
        }
        v9 = v19[0];
        v19[0] = 0;
        if (v9)
        {
          if (*((_DWORD *)v9 + 6) == 2)
          {
            if ((*((_WORD *)v9 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v9, v5);
          }
          else
          {
            *((_DWORD *)v9 + 6) -= 2;
          }
        }
        WebCore::LocalFrame::visiblePositionForPoint(v2, &v18, (int8x8_t *)v17);
        if (v17[0])
        {
          WebCore::enclosingTextUnitOfGranularity((uint64_t)v17, 1, 0, v14);
          if (v16)
          {
            WebCore::TextIterator::TextIterator((uint64_t)v19, v14, 0);
            if (v22)
            {
              do
              {
                v2 = (WebCore::LocalFrame *)(v23 != 0);
                if (v23)
                  break;
                WebCore::TextIterator::advance((WebCore::TextIterator *)v19, v10);
              }
              while (v22);
            }
            else
            {
              v2 = 0;
            }
            WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v19, v10);
            if (v16)
            {
              v11 = v15;
              v15 = 0;
              if (v11)
              {
                if (*((_DWORD *)v11 + 6) == 2)
                {
                  if ((*((_WORD *)v11 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v11, v5);
                }
                else
                {
                  *((_DWORD *)v11 + 6) -= 2;
                }
              }
              v12 = v14[0];
              v14[0] = 0;
              if (v12)
              {
                if (*((_DWORD *)v12 + 6) == 2)
                {
                  if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v12, v5);
                }
                else
                {
                  *((_DWORD *)v12 + 6) -= 2;
                }
              }
            }
          }
          else
          {
            v2 = 0;
          }
          v13 = v17[0];
          v17[0] = 0;
          if (v13)
          {
            if (*((_DWORD *)v13 + 6) == 2)
            {
              if ((*((_WORD *)v13 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v13, v5);
            }
            else
            {
              *((_DWORD *)v13 + 6) -= 2;
            }
          }
          goto LABEL_22;
        }
      }
    }
  }
  v2 = 0;
LABEL_22:
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v5);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v2;
}

WTF::StringImpl *WebCore::HitTestResult::absoluteLinkURL@<X0>(WebCore::HitTestResult *this@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  WebCore::Element *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;

  v7 = (WebCore::Element *)*((_QWORD *)this + 13);
  if (v7)
  {
    result = (WTF::StringImpl *)WebCore::Element::absoluteLinkURL(v7, a2, a3, (WTF::URL *)&v14, a5);
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + 40) + 8) + 528);
    if (v9
      && (v10 = *(_QWORD *)(v9 + 8)) != 0
      && (v11 = *(_QWORD *)(v10 + 24)) != 0
      && (v12 = *(_QWORD *)(v11 + 8)) != 0)
    {
      WebCore::ChromeClient::applyLinkDecorationFiltering(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16), a4);
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      *(_QWORD *)a4 = v14;
      *(_OWORD *)(a4 + 8) = v15;
      *(_OWORD *)(a4 + 24) = v16;
    }
  }
  else
  {
    *(_QWORD *)a4 = 0;
    return (WTF::StringImpl *)WTF::URL::invalidate((WTF::URL *)a4);
  }
  return result;
}

BOOL WebCore::HitTestResult::hasLocalDataForLinkURL(WebCore::HitTestResult *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  WTF::StringImpl *v6;
  _BOOL8 hasLocalDataForURL;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Page *v11;
  WTF::StringImpl *v12;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16[5];

  WebCore::HitTestResult::absoluteLinkURL(this, a4, a5, (uint64_t)v16, a2);
  if (!v16[0])
    return 0;
  if (*((_DWORD *)v16[0] + 1)
    && (v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + 40) + 8) + 528)) != 0
    && (v9 = *(_QWORD *)(v8 + 8)) != 0
    && (v10 = *(_QWORD *)(v9 + 24)) != 0
    && (v11 = *(WebCore::Page **)(v10 + 8)) != 0)
  {
    ++*(_DWORD *)v11;
    hasLocalDataForURL = WebCore::Page::hasLocalDataForURL(v11, (const WTF::URL *)v16);
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::Page::~Page((uint64_t)v11);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  else
  {
    hasLocalDataForURL = 0;
  }
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return hasLocalDataForURL;
}

WTF::StringImpl *WebCore::HitTestResult::titleDisplayString@<X0>(WebCore::HitTestResult *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const char *v13[2];

  result = (WTF::StringImpl *)*((_QWORD *)this + 13);
  if (!result)
    goto LABEL_18;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 704))(&v12);
  v6 = *((_QWORD *)this + 13);
  if (!v6 || (v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 1744)) == 0)
  {
    v11 = v12;
    if (v12)
      *(_DWORD *)v12 += 2;
    *a2 = v11;
    goto LABEL_15;
  }
  v9 = *(const char **)(v7 + 16);
  v8 = *(const char **)(v7 + 24);
  v13[0] = v9;
  v13[1] = v8;
  if (v8)
    v10 = PAL::nonBackslashEncodings == 0;
  else
    v10 = 1;
  if (!v10 && *(_QWORD *)PAL::nonBackslashEncodings)
    WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v13);
  result = v12;
  if (!v12)
  {
LABEL_18:
    *a2 = 0;
    return result;
  }
  WTF::StringImpl::replace();
LABEL_15:
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::Node *WebCore::HitTestResult::textContent@<X0>(WebCore::HitTestResult *this@<X0>, WTF::StringBuilder *a2@<X4>, WTF::StringImpl **a3@<X8>, __n128 a4@<Q0>)
{
  WebCore::Node *result;

  result = (WebCore::Node *)*((_QWORD *)this + 13);
  if (result)
    return WebCore::Node::textContent(result, 0, a2, a3, a4);
  *a3 = 0;
  return result;
}

BOOL WebCore::HitTestResult::isContentEditable(WebCore::HitTestResult *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 v5;

  v2 = *((_QWORD *)this + 10);
  if (!v2)
    return 0;
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0)
    return WebCore::Node::computeEditability(v2, 0, 1) != 0;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
  if (v3 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
    return 1;
  if (v3 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    return WebCore::Node::computeEditability(v2, 0, 1) != 0;
  v4 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v4 + 2;
  v5 = (*(_DWORD *)(*(_QWORD *)(v2 + 240) + 12) & 0x2A8C20) != 0;
  if (v4)
  {
    *(_DWORD *)(v2 + 24) = v4;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  return v5;
}

BOOL WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(WebCore::HitTestResult *a1, WebCore::ImageOverlay *this, int *a3, uint64_t a4, WebCore::LayoutRect *a5)
{
  int v5;
  WebCore::Node *v7;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  void *v15;
  BOOL v16;
  __int128 v17;
  WebCore::Node *v18;

  v5 = *a3;
  if ((*a3 & 0x8000) == 0)
    return 0;
  v7 = this;
  if (!this)
    return 1;
  if ((v5 & 0x100) != 0
    && ((v12 = (_QWORD *)*((_QWORD *)this + 5), *v12) ? (v13 = (*(_WORD *)(*v12 + 28) & 0x80) == 0) : (v13 = 1),
        !v13 && !*(_BYTE *)(*v12 + 193))
    || (v5 & 0x200) != 0
    && (WebCore::ImageOverlay::isInsideOverlay(this, this) & 1) == 0
    && ((v12 = (_QWORD *)*((_QWORD *)v7 + 5), *v12) ? (v16 = (*(_WORD *)(*v12 + 28) & 0x80) == 0) : (v16 = 1),
        !v16 && !*(_BYTE *)(*v12 + 193)))
  {
    v7 = WebCore::TreeScope::ancestorNodeInThisScope((WebCore::TreeScope *)(v12[1] + 96), v7);
  }
  v14 = WebCore::HitTestResult::mutableListBasedTestResult(a1);
  *((_DWORD *)v7 + 6) += 2;
  v18 = v7;
  WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t **)&v17, v14, &v18);
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v15);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  if ((*((_BYTE *)a3 + 2) & 1) != 0)
    return 1;
  v17 = *(_OWORD *)(a4 + 8);
  return !WebCore::LayoutRect::contains(a5, (const WebCore::LayoutRect *)&v17);
}

BOOL WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::FloatRect>(WebCore::HitTestResult *a1, WebCore::ImageOverlay *this, int *a3, uint64_t a4, float *a5)
{
  int v5;
  WebCore::ImageOverlay *v7;
  _QWORD *v12;
  BOOL v13;
  BOOL v14;
  WebCore::Node *v15;
  uint64_t *v16;
  void *v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  WebCore::Node *v28;

  v5 = *a3;
  if ((*a3 & 0x8000) == 0)
    return 0;
  v7 = this;
  if (!this)
    return 1;
  if ((v5 & 0x100) != 0
    && ((v12 = (_QWORD *)*((_QWORD *)this + 5), *v12) ? (v13 = (*(_WORD *)(*v12 + 28) & 0x80) == 0) : (v13 = 1),
        !v13 && !*(_BYTE *)(*v12 + 193))
    || (v5 & 0x200) != 0
    && (WebCore::ImageOverlay::isInsideOverlay(this, this) & 1) == 0
    && ((v12 = (_QWORD *)*((_QWORD *)v7 + 5), *v12) ? (v14 = (*(_WORD *)(*v12 + 28) & 0x80) == 0) : (v14 = 1),
        !v14 && !*(_BYTE *)(*v12 + 193)))
  {
    v22 = v12[1] + 96;
    while (1)
    {
      v23 = (uint64_t *)*((_QWORD *)v7 + 5);
      if (v23 == (uint64_t *)v22)
        break;
      if ((*((_BYTE *)v7 + 22) & 0x10) == 0
        || ((v24 = *v23) != 0 ? (v25 = (*(_WORD *)(v24 + 28) & 0x80) == 0) : (v25 = 1),
            v25 || (v26 = *(_QWORD *)(v24 + 200)) == 0))
      {
        v15 = 0;
        goto LABEL_18;
      }
      v15 = 0;
      v7 = *(WebCore::ImageOverlay **)(v26 + 8);
      if (!v7)
        goto LABEL_18;
    }
  }
  v15 = v7;
LABEL_18:
  v16 = WebCore::HitTestResult::mutableListBasedTestResult(a1);
  *((_DWORD *)v15 + 6) += 2;
  v28 = v15;
  WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add(&v27, v16, &v28);
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28, v17);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  if ((*((_BYTE *)a3 + 2) & 1) != 0)
    return 1;
  v18 = (float)*(int *)(a4 + 8) * 0.015625;
  if (*a5 > v18)
    return 1;
  v19 = *(_QWORD *)(a4 + 16);
  if ((float)(*a5 + a5[2]) < (float)(v18 + (float)((float)(int)v19 * 0.015625)))
    return 1;
  v20 = (float)*(int *)(a4 + 12) * 0.015625;
  v21 = a5[1];
  return v21 > v20 || (float)(v21 + a5[3]) < (float)(v20 + (float)((float)SHIDWORD(v19) * 0.015625));
}

_QWORD *WebCore::HitTestResult::append(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Node **v6;
  uint64_t *v7;
  WebCore::Node *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  WebCore::Node *v15;

  v3 = result;
  if (!result[9])
  {
    v4 = *(_QWORD *)(a2 + 72);
    if (v4)
    {
      *(_DWORD *)(v4 + 24) += 2;
      result[9] = v4;
      v9 = *(_QWORD *)(a2 + 80);
      if (v9)
        *(_DWORD *)(v9 + 24) += 2;
      v10 = result[10];
      v3[10] = v9;
      if (v10)
      {
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
      v3[12] = *(_QWORD *)(a2 + 96);
      v3[11] = *(_QWORD *)(a2 + 88);
      v11 = *(_QWORD *)(a2 + 104);
      if (v11)
        *(_DWORD *)(v11 + 24) += 2;
      v12 = v3[13];
      v3[13] = v11;
      if (v12)
      {
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v12);
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
      }
      v13 = *(_QWORD *)(a2 + 112);
      if (v13)
        ++*(_DWORD *)(v13 + 8);
      result = (_QWORD *)v3[14];
      v3[14] = v13;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
      *((_BYTE *)v3 + 120) = *(_BYTE *)(a2 + 120);
    }
  }
  v5 = *(_QWORD *)(a2 + 128);
  if (v5)
  {
    result = WebCore::HitTestResult::mutableListBasedTestResult((WebCore::HitTestResult *)v3);
    v6 = *(WebCore::Node ***)(v5 + 8);
    if (v6)
    {
      v7 = result;
      do
      {
        v8 = *v6;
        *((_DWORD *)v8 + 6) = *((_DWORD *)*v6 + 6) + 2;
        v15 = v8;
        WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add(&v14, v7, &v15);
        result = v15;
        if (v15)
        {
          if (*((_DWORD *)v15 + 6) == 2)
          {
            if ((*((_WORD *)v15 + 15) & 0x400) == 0)
              result = (_QWORD *)WebCore::Node::removedLastRef(v15);
          }
          else
          {
            *((_DWORD *)v15 + 6) -= 2;
          }
        }
        v6 = (WebCore::Node **)v6[2];
      }
      while (v6);
    }
  }
  return result;
}

_QWORD *WebCore::HitTestResult::mutableListBasedTestResult(WebCore::HitTestResult *this)
{
  _QWORD *result;
  void *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;

  result = (_QWORD *)*((_QWORD *)this + 16);
  if (!result)
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    result[1] = 0;
    result[2] = 0;
    *result = 0;
    v4 = (WTF *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = result;
    if (v4)
    {
      v5 = (WTF *)*((_QWORD *)v4 + 1);
      while (v5)
      {
        v6 = v5;
        v5 = (WTF *)*((_QWORD *)v5 + 2);
        v7 = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        if (v7)
        {
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v7);
          }
          else
          {
            *(_DWORD *)(v7 + 24) -= 2;
          }
        }
        WTF::fastFree(v6, v3);
      }
      if (*(_QWORD *)v4)
        WTF::fastFree((WTF *)(*(_QWORD *)v4 - 16), v3);
      WTF::fastFree(v4, v3);
      return (_QWORD *)*((_QWORD *)this + 16);
    }
  }
  return result;
}

WTF *WebCore::HitTestResult::listBasedTestResult(WebCore::HitTestResult *this)
{
  WTF *result;
  WTF **v2;
  WTF *v3;
  void *v4;
  WTF *v5;

  v2 = (WTF **)((char *)this + 128);
  result = (WTF *)*((_QWORD *)this + 16);
  if (!result)
  {
    v3 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = 0;
    v5 = v3;
    std::unique_ptr<WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>>::operator=[abi:sn180100](v2, &v5);
    std::unique_ptr<WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>>::~unique_ptr[abi:sn180100](&v5, v4);
    return *v2;
  }
  return result;
}

uint64_t WebCore::HitTestResult::protectedTargetNode@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 72);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::HitTestResult::targetElement(WebCore::HitTestResult *this)
{
  uint64_t v1;
  __int16 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;

  v1 = *((_QWORD *)this + 9);
  if (v1)
  {
    do
    {
      v2 = *(_WORD *)(v1 + 28);
      if ((v2 & 8) != 0)
        return v1;
      v3 = (uint64_t *)(v1 + 32);
      v4 = *(_QWORD *)(v1 + 32);
      if (v4)
      {
        if ((*(_WORD *)(v4 + 28) & 8) != 0)
        {
          v5 = *(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL;
          if (v5)
          {
            v7 = *(_QWORD *)(v5 + 88);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 224);
              if (v8)
              {
                v10 = v1;
                v11 = (uint64_t *)(v1 + 32);
                v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v1);
                if (v6)
                  goto LABEL_8;
                v1 = v10;
                v3 = v11;
                v2 = *(_WORD *)(v10 + 28);
              }
            }
          }
        }
      }
      if ((v2 & 0x80) != 0)
      {
        v1 = *(_QWORD *)(v1 + 200);
        if (!v1)
          return v1;
        v3 = (uint64_t *)(v1 + 8);
      }
      v6 = *v3;
LABEL_8:
      v1 = v6;
    }
    while (v6);
  }
  return v1;
}

_QWORD *WebCore::HitTestResult::protectedTargetElement@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  __int16 v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD **v10;
  _QWORD *v11;

  v2 = (_QWORD *)this[9];
  if (v2)
  {
    do
    {
      v3 = *((_WORD *)v2 + 14);
      if ((v3 & 8) != 0)
      {
        *((_DWORD *)v2 + 6) += 2;
        break;
      }
      v4 = (_QWORD **)(v2 + 4);
      v5 = v2[4];
      if (v5)
      {
        if ((*(_WORD *)(v5 + 28) & 8) != 0)
        {
          v6 = *(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL;
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 88);
            if (v7)
            {
              this = *(_QWORD **)(v7 + 224);
              if (this)
              {
                v9 = v2;
                v10 = (_QWORD **)(v2 + 4);
                v11 = a2;
                this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
                a2 = v11;
                if (this)
                  goto LABEL_8;
                v2 = v9;
                v4 = v10;
                v3 = *((_WORD *)v9 + 14);
              }
            }
          }
        }
      }
      if ((v3 & 0x80) != 0)
      {
        v8 = v2[25];
        if (!v8)
        {
          v2 = 0;
          break;
        }
        v4 = (_QWORD **)(v8 + 8);
      }
      this = *v4;
LABEL_8:
      v2 = this;
    }
    while (this);
  }
  *a2 = v2;
  return this;
}

uint64_t WebCore::HitTestResult::innerNonSharedElement(WebCore::HitTestResult *this)
{
  uint64_t result;
  uint64_t v2;

  result = *((_QWORD *)this + 10);
  if (result && (*(_WORD *)(result + 28) & 8) == 0)
  {
    v2 = *(_QWORD *)(result + 32);
    if (v2)
    {
      if ((*(_WORD *)(v2 + 28) & 8) != 0)
        return *(_QWORD *)(result + 32);
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void WebCore::HitTestResult::linkSuggestedFilename(WebCore::HitTestResult *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ResourceResponseBase *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 13);
  if (v2
    && (*(_WORD *)(v2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
  {
    v4 = *(_QWORD *)(v2 + 104);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 4);
      if ((v5 & 1) != 0)
      {
        v6 = *(_QWORD *)(v4 + 40);
        LODWORD(v7) = *(_DWORD *)(v4 + 52);
        if ((_DWORD)v7)
        {
LABEL_10:
          v7 = v7;
          v8 = (WebCore::ResourceResponseBase *)(v6 + 8);
          while (1)
          {
            v9 = *((_QWORD *)v8 - 1);
            if (v9 == WebCore::HTMLNames::downloadAttr
              || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::downloadAttr + 24)
              && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::downloadAttr + 32))
            {
              goto LABEL_16;
            }
            v8 = (WebCore::ResourceResponseBase *)((char *)v8 + 16);
            if (!--v7)
            {
              v8 = (WebCore::ResourceResponseBase *)MEMORY[0x1E0CBF2F8];
              goto LABEL_16;
            }
          }
        }
      }
      else
      {
        v6 = v4 + 32;
        LODWORD(v7) = v5 >> 5;
        if ((_DWORD)v7)
          goto LABEL_10;
      }
    }
    v8 = (WebCore::ResourceResponseBase *)MEMORY[0x1E0CBF2F8];
LABEL_16:
    WebCore::ResourceResponseBase::sanitizeSuggestedFilename(v8, a2);
    return;
  }
  v3 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v3 += 2;
  *a2 = v3;
}

double WebCore::HitTestingTransformState::flattenWithTransform(WebCore::HitTestingTransformState *this, const WebCore::TransformationMatrix *a2, double (*a3)[4][4])
{
  double v4;
  double v5;
  double v6;
  float64x2_t v7;
  double v8;
  float32x2_t i;
  __int128 v10;
  __int128 v11;
  double result;
  float64x2_t v13;
  __int128 v14;
  __int128 v15;
  float64x2_t v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  double v21;
  float64x2_t v22;
  double v23;
  double v24;
  float64x2_t v25;
  double v26;
  double v27;
  char v28;

  WebCore::TransformationMatrix::inverse((double *)a2, a3, (uint64_t)&v16);
  if (v28)
  {
    if (v23 == 0.0)
      goto LABEL_11;
    v4 = *((float *)this + 1);
    v5 = *((float *)this + 2);
    v6 = -(v26 + v20 * v5 + v17 * v4) / v23;
    v7 = vaddq_f64(v25, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v19, v5), v16, v4), v22, v6));
    v8 = v27 + v21 * v5 + v4 * v18 + v6 * v24;
    if (v8 <= 0.0)
    {
      v13.f64[0] = NAN;
      v13.f64[1] = NAN;
      v7 = (float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v13), (int8x16_t)vdupq_n_s64(0x4137D78400000000uLL), (int8x16_t)v7);
    }
    else if (v8 != 1.0)
    {
      v7 = vdivq_f64(v7, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0));
    }
    for (i = vcvt_f32_f64(v7); ; i = 0)
    {
      *(float32x2_t *)((char *)this + 4) = i;
      WebCore::TransformationMatrix::projectQuad(&v16, (const FloatQuad *)((char *)this + 12), 0, (uint64_t)&v14);
      v10 = v15;
      *(_OWORD *)((char *)this + 12) = v14;
      *(_OWORD *)((char *)this + 28) = v10;
      if (v28)
        break;
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_11:
      ;
    }
    WebCore::TransformationMatrix::projectQuad(&v16, (const FloatQuad *)((char *)this + 44), 0, (uint64_t)&v14);
    v11 = v15;
    *(_OWORD *)((char *)this + 44) = v14;
    *(_OWORD *)((char *)this + 60) = v11;
  }
  *((_QWORD *)this + 10) = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0x3FF0000000000000;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 20) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0x3FF0000000000000;
  *((_BYTE *)this + 208) = 0;
  return result;
}

float32x2_t WebCore::HitTestingTransformState::mappedPoint(WebCore::HitTestingTransformState *this, uint64_t a2, double (*a3)[4][4])
{
  double v4;
  double v5;
  double v6;
  float64x2_t v7;
  double v8;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  double v13;
  float64x2_t v14;
  double v15;
  double v16;
  float64x2_t v17;
  double v18;
  double v19;
  float64x2_t v20;
  double v21;
  double v22;
  char v23;

  WebCore::TransformationMatrix::inverse((double *)this + 10, a3, (uint64_t)&v11);
  if (v23)
  {
    if (v18 == 0.0)
    {
      return 0;
    }
    else
    {
      v4 = *((float *)this + 1);
      v5 = *((float *)this + 2);
      v6 = -(v21 + v15 * v5 + v12 * v4) / v18;
      v7 = vaddq_f64(v20, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v14, v5), v11, v4), v17, v6));
      v8 = v22 + v16 * v5 + v4 * v13 + v6 * v19;
      if (v8 <= 0.0)
      {
        v10.f64[0] = NAN;
        v10.f64[1] = NAN;
        v7 = (float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v10), (int8x16_t)vdupq_n_s64(0x4137D78400000000uLL), (int8x16_t)v7);
      }
      else if (v8 != 1.0)
      {
        v7 = vdivq_f64(v7, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0));
      }
      return vcvt_f32_f64(v7);
    }
  }
  else
  {
    return *(float32x2_t *)((char *)this + 4);
  }
}

uint64_t *WebCore::ImageQualityController::highQualityRepaintTimerFired(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = *this;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*this + 24) + 8) + 40) + 8) + 3405))
  {
    v2 = (uint64_t)this;
    if (*((_BYTE *)this + 80) || *((_BYTE *)this + 81))
    {
      *((_BYTE *)this + 80) = 0;
      if (*(_BYTE *)(*(_QWORD *)(v1 + 248) + 110))
      {
        return (uint64_t *)WebCore::ImageQualityController::restartTimer((uint64_t)this);
      }
      else
      {
        v3 = (uint64_t *)this[1];
        this = WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>>,WTF::HashTableTraits>::begin(v3);
        v4 = this;
        v6 = v5;
        if (v3)
          v3 += 2 * *((unsigned int *)v3 - 1);
        if (v3 != this)
        {
          do
          {
            v7 = *v4;
            v4 += 2;
            this = (uint64_t *)WebCore::RenderObject::repaint(*(_QWORD *)(v7 + 8), 0);
            while (v4 != v6)
            {
              if ((unint64_t)(*v4 + 1) > 1)
                goto LABEL_15;
              v4 += 2;
            }
            v4 = v6;
LABEL_15:
            ;
          }
          while (v4 != v3);
        }
        *(_BYTE *)(v2 + 81) = 0;
      }
    }
  }
  return this;
}

uint64_t WebCore::ImageQualityController::removeLayer(uint64_t result, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  if (a3)
  {
    v6 = result;
    v7 = *a3;
    if (!*a3)
      goto LABEL_28;
    v8 = *(_DWORD *)(v7 - 8);
    v9 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v7 + 16 * v12);
    if (v13 != a4)
    {
      v32 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v32) & v8;
        v13 = *(_QWORD *)(v7 + 16 * v12);
        ++v32;
        if (v13 == a4)
          goto LABEL_4;
      }
      v12 = *(unsigned int *)(v7 - 4);
    }
LABEL_4:
    if (v12 != *(_DWORD *)(v7 - 4))
    {
      *(_QWORD *)(v7 + 16 * v12) = -1;
      ++*(_DWORD *)(*a3 - 16);
      v14 = *a3;
      v15 = *a3 ? *(_DWORD *)(v14 - 12) - 1 : -1;
      *(_DWORD *)(v14 - 12) = v15;
      v7 = *a3;
      if (!*a3)
        goto LABEL_28;
      v16 = *(_DWORD *)(v7 - 12);
      v17 = *(unsigned int *)(v7 - 4);
      if (6 * v16 < v17 && v17 >= 9)
      {
        v19 = WTF::fastMalloc((WTF *)(16 * (v17 >> 1) + 16));
        bzero((void *)(v19 + 16), 16 * (v17 >> 1));
        v21 = 0;
        *a3 = v19 + 16;
        *(_DWORD *)(v19 + 12) = v17 >> 1;
        *(_DWORD *)(*a3 - 8) = (v17 >> 1) - 1;
        *(_DWORD *)(*a3 - 16) = 0;
        *(_DWORD *)(*a3 - 12) = v16;
        do
        {
          v22 = (_QWORD *)(v7 + 16 * v21);
          if ((unint64_t)(*v22 + 1) >= 2)
          {
            v23 = *a3;
            if (*a3)
              v24 = *(_DWORD *)(v23 - 8);
            else
              v24 = 0;
            v25 = (~(*v22 << 32) + *v22) ^ ((~(*v22 << 32) + *v22) >> 22);
            v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((unint64_t)(v25 + ~(v25 << 13)) >> 8));
            v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
            v28 = v24 & ((v27 >> 31) ^ v27);
            if (*(_QWORD *)(v23 + 16 * v28))
            {
              v29 = 1;
              do
                v28 = ((_DWORD)v28 + v29++) & v24;
              while (*(_QWORD *)(v23 + 16 * v28));
            }
            *(_OWORD *)(v23 + 16 * v28) = *(_OWORD *)v22;
          }
          ++v21;
        }
        while (v21 != v17);
        result = WTF::fastFree((WTF *)(v7 - 16), v20);
        v7 = *a3;
        if (!*a3)
          goto LABEL_28;
      }
    }
    if (!*(_DWORD *)(v7 - 12))
    {
LABEL_28:
      result = WTF::HashMap<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)(v6 + 8), a2);
      v30 = *(_QWORD *)(v6 + 8);
      if (!v30 || !*(_DWORD *)(v30 - 12))
      {
        *(_BYTE *)(v6 + 80) = 0;
        v31 = *(_QWORD *)(v6 + 48);
        *(_QWORD *)(v6 + 48) = v31 & 0xFDFFFFFFFFFFFFLL;
        if ((v31 & 0xFFFFFFFFFFFFLL) != 0)
          return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v6 + 16));
      }
    }
  }
  return result;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, void *a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; v8 = (v8 + i++) & v4)
  {
    v10 = v8;
    result = *(_QWORD *)(v2 + 16 * v8);
    if (result != -1)
    {
      if (!result)
        return result;
      if (*(void **)(result + 8) == a2)
        break;
    }
  }
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = (_QWORD *)(v2 + 16 * v8);
  *v12 = 0;
  if (*(_DWORD *)result == 1)
    WTF::fastFree((WTF *)result, a2);
  else
    --*(_DWORD *)result;
  *v12 = -1;
  v13 = *(_QWORD *)(v2 + 16 * v10 + 8);
  if (v13)
    WTF::fastFree((WTF *)(v13 - 16), a2);
  ++*(_DWORD *)(*a1 - 16);
  v14 = *a1;
  if (*a1)
    v15 = *(_DWORD *)(v14 - 12) - 1;
  else
    v15 = -1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a1;
  if (*a1)
  {
    v17 = 6 * *(_DWORD *)(v16 - 12);
    v18 = *(_DWORD *)(v16 - 4);
    if (v17 < v18 && v18 >= 9)
      WTF::HashTable<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v18 >> 1, 0);
  }
  return 1;
}

uint64_t WebCore::ImageQualityController::restartTimer(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;

  v1 = *(_QWORD *)(this + 48);
  if ((v1 & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((v1 & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v2 = this + 16;
    v3 = *(double *)(this + 72);
    *(_QWORD *)(this + 40) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    return WebCore::TimerBase::setNextFireTime(v2, v3 + v4);
  }
  else
  {
    *(_QWORD *)(this + 48) = v1 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
  }
  return this;
}

BOOL WebCore::ImageQualityController::chooseInterpolationQuality(WebCore::GraphicsContext &,WebCore::RenderBoxModelObject *,WebCore::Image &,void const*,WebCore::LayoutSize const&)::$_0::operator()(uint64_t a1)
{
  uint64_t v1;
  double v3[3];
  double v4;

  v1 = 1;
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 672))(v3, a1, 1);
  if (v3[0] == 1.0 && v3[1] == 0.0 && v3[2] == 0.0)
    return v4 != 1.0 && v4 != -1.0;
  return v1;
}

uint64_t *WebCore::ImageQualityController::chooseInterpolationQuality(WebCore::GraphicsContext &,WebCore::RenderBoxModelObject *,WebCore::Image &,void const*,WebCore::LayoutSize const&)::$_1::operator()(uint64_t a1)
{
  uint64_t *result;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;

  result = *(uint64_t **)(a1 + 16);
  v4 = *(int **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(*(_QWORD *)a1 + 8))
    return WebCore::ImageQualityController::set((uint64_t)result, **(_QWORD **)(a1 + 24), **(uint64_t ***)(a1 + 32), **(_QWORD **)(a1 + 40), (unint64_t *)v3);
  v6 = *v4;
  v5 = v4[1];
  if (v6 != *(_DWORD *)v3 || v5 != *(_DWORD *)(v3 + 4))
    return WebCore::ImageQualityController::set((uint64_t)result, **(_QWORD **)(a1 + 24), **(uint64_t ***)(a1 + 32), **(_QWORD **)(a1 + 40), (unint64_t *)v3);
  return result;
}

uint64_t WebCore::InlineBoxPainter::InlineBoxPainter(uint64_t a1, uint64_t a2, uint64_t (**a3)(), uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::InlineBoxPainter *v13;
  uint64_t v14[2];
  int v15;
  _QWORD v16[2];
  int v17;
  char v18;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_1[v7])(v16, a1, a2);
    *(_DWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = a3;
    *(_QWORD *)(a1 + 32) = *a4;
    v16[0] = v14;
    v8 = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v7])(v16, a1);
    if ((*(_BYTE *)(v8 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196349500);
    }
    *(_QWORD *)(a1 + 40) = v8;
    WebCore::InlineIterator::Box::lineBox(v14, (WebCore::InlineIterator::Box *)a1);
    WebCore::InlineIterator::LineBox::previous((WebCore::InlineIterator::LineBox *)v14, (uint64_t)v16);
    v9 = WebCore::InlineIterator::LineBoxIterator::operator BOOL((uint64_t)v16);
    a3 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1;
    if (v17 != -1)
      ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v17])(&v18, v16);
    a4 = (uint64_t *)(v9 ^ 1u);
    if (v15 != -1)
      ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v15])(v16, v14);
    *(_BYTE *)(a1 + 48) = (_BYTE)a4;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10 != -1)
    {
      a4 = v14;
      v16[0] = v14;
      *(_BYTE *)(a1 + 49) = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box15isRootInlineBoxEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v10])(v16, a1);
      v11 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v11 != -1)
      {
        v16[0] = v14;
        *(_BYTE *)(a1 + 50) = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box12isHorizontalEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v11])(v16, a1);
        return a1;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = *a4;
  v13 = (WebCore::InlineBoxPainter *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::InlineBoxPainter::paint(v13);
}

void WebCore::InlineBoxPainter::paint(WebCore::InlineBoxPainter *this, WTF::StringImpl *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::InlineBoxPainter *v6;
  float v7;
  uint64_t v8;
  WebCore::RenderObject *v9;
  WebCore::RenderElement *v10;
  uint64_t v11;
  WebCore::RenderElement *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  WebCore::InlineBoxPainter *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int32x2_t v21;
  int v22;
  int v23;
  int v24;
  WebCore::InlineBoxPainter *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  WTF **v30;
  char v31;
  WebCore::InlineBoxPainter *v32;
  int32x4_t v33;
  int32x2_t v34[3];

  v2 = *(unsigned __int16 *)(*((_QWORD *)this + 3) + 16);
  if (v2 <= 0x3F)
  {
    if (v2 == 16)
      goto LABEL_3;
LABEL_14:
    WebCore::InlineBoxPainter::paintDecorations(this, a2);
    return;
  }
  if (v2 == 0x2000)
  {
    v15 = *((_QWORD *)this + 5);
    if (v15)
      v16 = (*(_BYTE *)(v15 + 45) & 0x20) == 0;
    else
      v16 = 1;
    if (!v16)
    {
      v17 = this;
      v33.i64[0] = WebCore::RenderInline::linesVisualOverflowBoundingBox(*((WebCore::LegacyInlineBox ***)this + 5), a2);
      v33.i64[1] = v18;
      v19 = WebCore::enclosingIntRect(v33.i64);
      v34[1] = v21;
      v22 = *((_DWORD *)v17 + 8);
      v23 = *((_DWORD *)v17 + 9);
      v24 = v22 + 63;
      if (v22 >= 0)
        v24 = *((_DWORD *)v17 + 8);
      v34[0].i32[0] = v19 + (v24 >> 6) + ((int)(v22 - (v24 & 0xFFFFFFC0) + 32) >> 6);
      v34[0].i32[1] = HIDWORD(v19) + v23 / 64 + ((int)(v23 - (v20 & 0xFFFFFFC0) + 32) >> 6);
      v25 = v17;
      v26 = *(_QWORD *)(*((_QWORD *)v17 + 3) + 72);
      if (v26 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26))
        v26 = 0;
      v27 = *((_QWORD *)v25 + 5);
      v28 = *(_BYTE *)(v27 + 45);
      WebCore::LayoutRect::LayoutRect((int8x8_t *)&v33, v34);
      if (v27 && (v28 & 0x20) != 0)
        WebCore::AccessibilityRegionContext::takeBounds(v26, v27, &v33);
    }
    return;
  }
  if (v2 == 1024)
  {
    WebCore::InlineBoxPainter::paintMask((uint64_t)this);
    return;
  }
  if (v2 != 64)
    goto LABEL_14;
LABEL_3:
  v3 = *((_QWORD *)this + 5);
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 104) + 239) & 4) == 0 && (*(_BYTE *)(v3 + 120) & 0x30) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 16) + 52) & 0xE) != 0)
    {
      v6 = this;
      v7 = WebCore::RenderStyle::outlineWidth((WebCore::RenderStyle *)(v3 + 80));
      this = v6;
      if (v7 > 0.0)
        goto LABEL_59;
    }
    if ((*(_BYTE *)(v3 + 45) & 1) == 0)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
      if (v4)
      {
        if ((*(_WORD *)(v4 + 28) & 8) == 0)
          goto LABEL_53;
        if ((*(_WORD *)(v4 + 30) & 1) != 0)
        {
          v5 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
          if (*(_BYTE *)(v5 + 3382) || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 1944) + 248) + 1149) & 0x20) != 0)
          {
LABEL_59:
            if (!*((_BYTE *)this + 49))
            {
              v32 = this;
              v8 = *((_QWORD *)this + 5);
              if ((*(_BYTE *)(v8 + 45) & 0x20) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x196349838);
              }
              if (WebCore::RenderBoxModelObject::continuation(*((WebCore::RenderBoxModelObject **)this + 5))
                || (*(_WORD *)(v8 + 69) & 0x20) != 0)
              {
                v9 = WebCore::RenderObject::containingBlock(*((WebCore::RenderObject **)v32 + 5));
                if (WebCore::RenderObject::isAnonymousBlock(v9))
                {
                  v10 = WebCore::RenderObject::containingBlock(v9);
                  v11 = (uint64_t)v10;
                  v12 = (WebCore::RenderElement *)*((_QWORD *)v32 + 5);
                  if (v12 != v10)
                  {
                    do
                    {
                      if ((WebCore::RenderLayerModelObject::hasSelfPaintingLayer(v12) & 1) != 0)
                        goto LABEL_43;
                      v13 = *((_QWORD *)v12 + 4);
                      if (v13)
                        v14 = *(_QWORD *)(v13 + 8);
                      else
                        v14 = 0;
                      v12 = (WebCore::RenderElement *)WebCore::RenderObject::enclosingBoxModelObject(v14);
                    }
                    while (v12 != (WebCore::RenderElement *)v11);
                    v10 = (WebCore::RenderElement *)*((_QWORD *)v32 + 5);
                  }
                  v29 = *(_QWORD *)(WebCore::RenderElement::element(v10) + 64);
                  v30 = (WTF **)(v29 & 0xFFFFFFFFFFFFLL);
                  if ((v29 & 0xFFFFFFFFFFFFLL) == 0)
                    goto LABEL_48;
                  v31 = *(_BYTE *)((v29 & 0xFFFFFFFFFFFFLL) + 0x2D);
                  if ((v31 & 2) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196349858);
                  }
                  if ((v31 & 0x20) != 0)
                  {
LABEL_48:
                    WebCore::RenderBlock::addContinuationWithOutline(v11, v30);
                    return;
                  }
LABEL_53:
                  __break(0xC471u);
                  JUMPOUT(0x196349618);
                }
              }
LABEL_43:
              if ((*(_WORD *)(v8 + 69) & 0x20) == 0)
                WTF::WeakListHashSet<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderInline>(*(_QWORD *)(*((_QWORD *)v32 + 3) + 32), v8, (uint64_t)v34);
            }
          }
        }
      }
    }
  }
}

BOOL WebCore::RenderObject::isAnonymousBlock(WebCore::RenderObject *this)
{
  char v1;
  _BOOL8 result;
  uint64_t v4;
  int v6;

  v1 = *((_BYTE *)this + 45);
  if ((v1 & 1) == 0)
    return 0;
  v4 = (*((_BYTE *)this + 45) & 2) != 0
     ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96)
     : *((_QWORD *)this + 12);
  if ((v4 & 0x1F) != 1 && (v4 & 0x1F) != 14)
    return 0;
  result = 0;
  if ((v1 & 0x40) == 0 || (v4 & 0xF80000000000) != 0)
    return result;
  if (((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 176))(this) & 1) != 0)
    return 0;
  v6 = *((unsigned __int8 *)this + 46);
  if (v6 == 20)
    return 0;
  if ((*((_BYTE *)this + 52) & 7) != 1)
  {
    if (v6 != 26)
      return v6 != 49;
    return 0;
  }
  result = 0;
  if (v6 != 26 && (*((_BYTE *)this + 53) & 2) == 0)
    return v6 != 49;
  return result;
}

WTF *WTF::WeakListHashSet<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderInline>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  WTF *result;
  void *v14;
  WTF *v15;
  WTF *v16;

  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v7;
  if (v7 > v6)
  {
    v8 = *(WTF **)(a1 + 8);
    if (v8)
    {
      do
      {
        v9 = (WTF *)*((_QWORD *)v8 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v8 + 8))
          WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)a1, (void *)a1, v8);
        v8 = v9;
      }
      while (v9);
    }
    *(_DWORD *)(a1 + 24) = 0;
    v10 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
      if (v10 > 0x7FFFFFFE)
        LODWORD(v10) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 28) = 2 * v10;
  }
  v11 = *(WTF **)(a2 + 8);
  if (!v11)
  {
    v11 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *((_QWORD *)v11 + 1) = a2;
    v15 = *(WTF **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v11;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WTF::fastFree(v15, v14);
        v11 = *(WTF **)(a2 + 8);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  *(_DWORD *)v11 += 2;
  v16 = v11;
  WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::add((uint64_t *)a1, (uint64_t *)&v16, a3);
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v12);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v11 == 1)
    return (WTF *)WTF::fastFree(v11, v12);
  --*(_DWORD *)v11;
  return result;
}

uint64_t WebCore::InlineBoxPainter::paintMask(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  void *v6;
  double v7;
  float v8;
  float v9;
  float v10;
  int v11;
  double v12;
  int v13;
  int v14;
  double v15;
  unsigned int v16;
  double v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t (**v32)();
  uint64_t (**v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)();
  uint64_t v37;
  int v39;
  unsigned __int32 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t (**v44)();
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  signed int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  signed int v66;
  signed int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int32x4_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  double v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  double v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  signed int v88;
  signed int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t *v92;
  unsigned int v93;
  uint64_t v94[2];
  int v95;
  _QWORD v96[2];
  int v97;
  uint64_t v98[2];
  float32x4_t v99;
  _DWORD v100[17];
  _BYTE v101[9];

  v1 = *(_QWORD *)(this + 24);
  v2 = *(_QWORD *)(this + 40);
  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
    v4 = v3 == v2;
  else
    v4 = 1;
  if (v4
    && (*(_BYTE *)(*(_QWORD *)(v2 + 104) + 239) & 4) == 0
    && (*(_BYTE *)(v2 + 120) & 0x30) == 0
    && *(_WORD *)(v1 + 16) == 1024)
  {
    v5 = this;
    v7 = WebCore::InlineIterator::Box::visualRect((WebCore::InlineIterator::Box *)this) * 64.0;
    if (v7 > -2147483650.0)
      v11 = (int)v7;
    else
      v11 = 0x80000000;
    if (v7 >= 2147483650.0)
      v11 = 0x7FFFFFFF;
    v12 = v8 * 64.0;
    if (v12 > -2147483650.0)
      v13 = (int)v12;
    else
      v13 = 0x80000000;
    if (v12 < 2147483650.0)
      v14 = v13;
    else
      v14 = 0x7FFFFFFF;
    v15 = v9 * 64.0;
    if (v15 >= 2147483650.0)
    {
      v16 = 0x7FFFFFFF;
    }
    else if (v15 > -2147483650.0)
    {
      v16 = (int)v15;
    }
    else
    {
      v16 = 0x80000000;
    }
    v17 = v10 * 64.0;
    if (v17 >= 2147483650.0)
    {
      v18 = 0x7FFFFFFFLL;
    }
    else if (v17 > -2147483650.0)
    {
      v18 = (int)v17;
    }
    else
    {
      v18 = 0x80000000;
    }
    v19 = *(_DWORD *)(v5 + 32);
    v20 = v19 + v11;
    if (__OFADD__(v19, v11))
      v20 = (v19 >> 31) + 0x7FFFFFFF;
    v21 = v16;
    v22 = *(_DWORD *)(v5 + 36);
    v23 = v22 + v14;
    if (__OFADD__(v22, v14))
      v23 = (v22 >> 31) + 0x7FFFFFFF;
    v24 = *(_QWORD *)(v5 + 40);
    v25 = *(_QWORD *)(v24 + 88);
    v26 = *(_QWORD *)(v25 + 40);
    v28 = *(_QWORD *)(v26 + 216);
    v27 = v26 + 216;
    v29 = *(_QWORD *)(v28 + 8);
    if ((*(_BYTE *)(v24 + 21) & 0x80) != 0)
    {
      v30 = *(uint64_t (**)())(*(_QWORD *)(v24 + 144) + 256);
      if (v30)
      {
        if (*((_QWORD *)v30 + 14))
          v30 = WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>::unspecifiedBoolTypeInstance;
        else
          v30 = 0;
        LODWORD(v30) = v30 != 0;
      }
    }
    else
    {
      LODWORD(v30) = 0;
    }
    v91 = v23;
    v31 = v23 << 32;
    v32 = (uint64_t (**)())(v21 | (v18 << 32));
    if ((_DWORD)v30
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 24) + 8) + 40)
                                                        + 8)
                                            + 1944)
                                + 248)
                    + 1148) & 0x200) == 0)
    {
      LODWORD(v33) = 0;
LABEL_61:
      v39 = 2;
LABEL_62:
      v93 = v39;
      v40 = 0;
      v90 = v20;
      v92 = (uint64_t *)(v31 | v20);
      v98[0] = (uint64_t)v92;
      v98[1] = v21 | (v18 << 32);
      v94[0] = 0;
      v41 = *(_QWORD *)(*(_QWORD *)(v25 + 32) + 48);
      v99.i64[0] = (uint64_t)v100;
      v99.i64[1] = 8;
      v96[0] = v41;
      do
      {
        if (v40 == v99.i32[2])
        {
          v42 = (_QWORD *)WTF::Vector<WebCore::FillLayer const*,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v99, v40 + 1, (unint64_t)v96);
          v40 = v99.u32[3];
          *(_QWORD *)(v99.i64[0] + 8 * v99.u32[3]) = *v42;
        }
        else
        {
          *(_QWORD *)(v99.i64[0] + 8 * v40) = v41;
        }
        v99.i32[3] = ++v40;
        v41 = *(_QWORD *)(v96[0] + 8);
        v96[0] = v41;
      }
      while (v41);
      this = v99.i64[0];
      if (v40)
      {
        v43 = v27;
        v44 = (uint64_t (**)())(v21 | (v18 << 32));
        v45 = v21;
        v46 = v18;
        v47 = (int)v33;
        v48 = 8 * v40;
        v49 = v99.i64[0] - 8;
        do
        {
          WebCore::InlineBoxPainter::paintFillLayer(v5, (unint64_t *)v94, *(_QWORD *)(v49 + v48), v98, v93);
          v48 -= 8;
        }
        while (v48);
        this = v99.i64[0];
        LODWORD(v33) = v47;
        LODWORD(v18) = v46;
        LODWORD(v21) = v45;
        v32 = v44;
        v27 = v43;
      }
      if (v100 == (_DWORD *)this || this == 0)
        goto LABEL_77;
      while (1)
      {
        v99.i64[0] = 0;
        v99.i32[2] = 0;
        this = WTF::fastFree((WTF *)this, v6);
LABEL_77:
        if ((v94[0] & 0x8000000000000) != 0)
        {
          this = v94[0] & 0xFFFFFFFFFFFFLL;
          do
          {
            v85 = __ldaxr((unsigned int *)this);
            v86 = v85 - 1;
          }
          while (__stlxr(v86, (unsigned int *)this));
          if (!v86)
          {
            atomic_store(1u, (unsigned int *)this);
            this = WTF::fastFree((WTF *)this, v6);
          }
        }
        if (!v29
          || (this = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v29 + 208))(v29, *(float *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 104) + 184)), !(_DWORD)this)|| (this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 56))(v29, *(_QWORD *)(v5 + 40)), (this & 1) == 0))
        {
LABEL_127:
          if ((_DWORD)v33)
            return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 24) + 80) + 608))(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 80));
          return this;
        }
        v99.i8[0] = 0;
        v100[0] = -1;
        v51 = *(unsigned int *)(v5 + 16);
        if ((_DWORD)v51 != -1)
        {
          v29 = (uint64_t)__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0;
          ((void (*)(_QWORD *, float32x4_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v51])(v96, &v99, v5);
          v100[0] = v51;
          v96[0] = v94;
          ((void (*)(_QWORD *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator25traversePreviousInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v51])(v96, &v99);
          LOBYTE(v96[0]) = 0;
          v97 = -1;
          v52 = v100[0];
          if (v100[0] != -1)
          {
            ((void (*)(uint64_t *, _QWORD *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v100[0]])(v94, v96, &v99);
            v97 = v52;
            if (v100[0] != -1)
              ((void (*)(uint64_t *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v100[0]])(v94, &v99);
          }
          if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v96))
          {
            v99.i8[0] = 0;
            v100[0] = -1;
            v53 = *(unsigned int *)(v5 + 16);
            if ((_DWORD)v53 == -1)
              goto LABEL_163;
            ((void (*)(uint64_t *, float32x4_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v53])(v94, &v99, v5);
            v100[0] = v53;
            v94[0] = (uint64_t)v101;
            ((void (*)(uint64_t *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v53])(v94, &v99);
            LOBYTE(v94[0]) = 0;
            v95 = -1;
            v54 = v100[0];
            if (v100[0] != -1)
            {
              ((void (*)(_BYTE *, uint64_t *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v100[0]])(v101, v94, &v99);
              v95 = v54;
              if (v100[0] != -1)
                ((void (*)(_BYTE *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v100[0]])(v101, &v99);
            }
            v55 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v94);
            if (v95 != -1)
              ((void (*)(float32x4_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v95])(&v99, v94);
          }
          else
          {
            v55 = 0;
          }
          if (v97 != -1)
            ((void (*)(float32x4_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v97])(&v99, v96);
          v56 = *(_QWORD *)(v5 + 40);
          v57 = *(_QWORD *)(v5 + 24);
          v94[0] = v56;
          v94[1] = v57;
          if (v55)
          {
            v99.i64[0] = (uint64_t)v92;
            v99.i64[1] = (uint64_t)v32;
            this = WebCore::BorderPainter::paintNinePieceImage(v94, (__int128 *)&v99, v56 + 80, (uint64_t *)v27, v93);
            goto LABEL_127;
          }
          v99.i8[0] = 0;
          v29 = 0xFFFFFFFFLL;
          v100[0] = -1;
          v58 = *(unsigned int *)(v5 + 16);
          if ((_DWORD)v58 != -1)
          {
            v32 = __const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0;
            ((void (*)(_QWORD *, float32x4_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v58])(v96, &v99, v5);
            v100[0] = v58;
            v96[0] = v101;
            ((void (*)(_QWORD *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator25traversePreviousInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v58])(v96, &v99);
            LOBYTE(v96[0]) = 0;
            v97 = -1;
            v59 = v100[0];
            if (v100[0] != -1)
            {
              ((void (*)(_BYTE *, _QWORD *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v100[0]])(v101, v96, &v99);
              v97 = v59;
              if (v100[0] != -1)
                ((void (*)(_BYTE *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v100[0]])(v101, &v99);
            }
            v87 = (int)v33;
            v88 = v21;
            v89 = v18;
            v92 = (uint64_t *)v27;
            v29 = 0;
            if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v96) & 1) != 0)
            {
LABEL_103:
              if (v97 != -1)
                ((void (*)(float32x4_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v97])(&v99, v96);
              v99.i8[0] = 0;
              v100[0] = -1;
              v60 = *(unsigned int *)(v5 + 16);
              if ((_DWORD)v60 != -1)
              {
                ((void (*)(_QWORD *, float32x4_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v60])(v96, &v99, v5);
                v100[0] = v60;
              }
              v61 = v29;
              if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v99) & 1) != 0)
              {
LABEL_108:
                if (v100[0] != -1)
                  ((void (*)(_QWORD *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v100[0]])(v96, &v99);
                if (*(_BYTE *)(v5 + 50))
                  v62 = v29;
                else
                  v62 = 0;
                v63 = v90 - v62;
                if (__OFSUB__(v90, v62))
                  v63 = (v90 >> 31) + 0x7FFFFFFF;
                if (*(_BYTE *)(v5 + 50))
                  v64 = 0;
                else
                  v64 = v29;
                v65 = v91 - v64;
                if (__OFSUB__(v91, v64))
                  v65 = (v91 >> 31) + 0x7FFFFFFF;
                if (*(_BYTE *)(v5 + 50))
                  v66 = v61;
                else
                  v66 = v88;
                if (*(_BYTE *)(v5 + 50))
                  v67 = v89;
                else
                  v67 = v61;
                v68 = WebCore::clipRectForNinePieceImageStrip((unsigned int *)v5, v92, v98);
                v70 = v69;
                v33 = *(uint64_t (***)())(*(_QWORD *)(v5 + 24) + 80);
                (*((void (**)(uint64_t (**)(), uint64_t))*v33 + 12))(v33, 1);
                v71 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 80);
                v72.i64[0] = v68;
                v72.i64[1] = v70;
                v99 = vmulq_f32(vcvtq_f32_s32(v72), (float32x4_t)vdupq_n_s32(0x3C800000u));
                (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v71 + 456))(v71, &v99);
                v99.i64[0] = __PAIR64__(v65, v63);
                v99.i64[1] = __PAIR64__(v67, v66);
                WebCore::BorderPainter::paintNinePieceImage(v94, (__int128 *)&v99, *(_QWORD *)(v5 + 40) + 80, v92, v93);
                this = (*((uint64_t (**)(uint64_t (**)(), uint64_t))*v33 + 13))(v33, 1);
                LODWORD(v33) = v87;
                goto LABEL_127;
              }
              v32 = (uint64_t (**)())v101;
              v21 = (unint64_t)off_1E341E678;
              v27 = (uint64_t)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box12isHorizontalEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix;
              LODWORD(v18) = 1015021568;
              v61 = v29;
              v33 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix;
              while (v100[0] != -1)
              {
                v96[0] = v101;
                if ((((uint64_t (*)(_QWORD *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isInlineBoxEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v100[0]])(v96, &v99) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19634A540);
                }
                if (v100[0] == -1)
                  break;
                v96[0] = v101;
                ((void (*)(_QWORD *, float32x4_t *))off_1E341E678[v100[0]])(v96, &v99);
                if (v100[0] == -1)
                  break;
                v81 = v79;
                v82 = v80;
                v96[0] = v101;
                v83 = ((unsigned int (*)(_QWORD *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box12isHorizontalEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v100[0]])(v96, &v99)? v81: v82;
                v84 = (float)((float)((float)v61 * 0.015625) + v83) * 64.0;
                if (v84 >= 2147483650.0)
                  v61 = 0x7FFFFFFF;
                else
                  v61 = v84 <= -2147483650.0 ? 0x80000000 : (int)v84;
                if (v100[0] == -1)
                  break;
                v96[0] = v101;
                ((void (*)(_QWORD *, float32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v100[0]])(v96, &v99);
                if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v99) & 1) != 0)
                  goto LABEL_108;
              }
            }
            else
            {
              LODWORD(v33) = 1015021568;
              v27 = 0x4050000000000000;
              LODWORD(v18) = 0;
              v21 = (unint64_t)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box12isHorizontalEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix;
              while (v97 != -1)
              {
                v99.i64[0] = (uint64_t)v101;
                if ((((uint64_t (*)(float32x4_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isInlineBoxEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v97])(&v99, v96) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19634A520);
                }
                if (v97 == -1)
                  break;
                v99.i64[0] = (uint64_t)v101;
                ((void (*)(float32x4_t *, _QWORD *))off_1E341E678[v97])(&v99, v96);
                if (v97 == -1)
                  break;
                v75 = v73;
                v76 = v74;
                v99.i64[0] = (uint64_t)v101;
                if (((unsigned int (*)(float32x4_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box12isHorizontalEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v97])(&v99, v96))
                {
                  v77 = v75;
                }
                else
                {
                  v77 = v76;
                }
                v78 = (float)((float)((float)(int)v29 * 0.015625) + v77) * 64.0;
                if (v78 >= 2147483650.0)
                {
                  v29 = 0x7FFFFFFFLL;
                }
                else if (v78 <= -2147483650.0)
                {
                  v29 = 0x80000000;
                }
                else
                {
                  v29 = (int)v78;
                }
                WebCore::InlineIterator::InlineBoxIterator::traversePreviousInlineBox((WebCore::InlineIterator::InlineBoxIterator *)v96);
                if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v96) & 1) != 0)
                  goto LABEL_103;
              }
            }
          }
        }
LABEL_163:
        this = std::__throw_bad_variant_access[abi:sn180100]();
      }
    }
    v34 = *(_QWORD *)(*(_QWORD *)(v25 + 32) + 48);
    v35 = *(_QWORD *)(v34 + 8);
    if (v29)
    {
      if (v35)
      {
        while (!*(_QWORD *)(v34 + 16))
        {
          v34 = *(_QWORD *)(v34 + 8);
          if (!v34)
            goto LABEL_54;
        }
      }
      else
      {
        if (*(_QWORD *)(v34 + 16))
          v36 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
        else
          v36 = 0;
        if (!v36)
          goto LABEL_92;
      }
    }
    else
    {
LABEL_54:
      if (!v35)
      {
LABEL_92:
        LODWORD(v33) = 0;
        v39 = 7;
        goto LABEL_62;
      }
    }
    v37 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 80);
    if (*(_BYTE *)(v37 + 194) != 7 || *(_BYTE *)(v37 + 195) != 1)
    {
      *(_WORD *)(v37 + 194) = 263;
      *(_DWORD *)(v37 + 184) |= 0x20u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 88))(v37, v37 + 8);
    (*(void (**)(_QWORD, float))(**(_QWORD **)(*(_QWORD *)(v5 + 24) + 80) + 592))(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 80), 1.0);
    v25 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 88);
    LODWORD(v33) = 1;
    goto LABEL_61;
  }
  return this;
}

uint64_t WebCore::InlineIterator::Box::logicalWidth(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  uint64_t v3;
  WebCore *v5;
  const WebCore::InlineIterator::InlineBox *v6;
  const WebCore::NinePieceImage *v7;
  const WebCore::LayoutRect *v8;
  char v9;
  char *v10;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1
    || (v10 = &v9,
        ((void (*)(char **, WebCore::InlineIterator::Box *))off_1E341E678[v1])(&v10, this),
        v3 = *((unsigned int *)this + 4),
        (_DWORD)v3 == -1))
  {
    v5 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::clipRectForNinePieceImageStrip(v5, v6, v7, v8);
  }
  else
  {
    v10 = &v9;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box12isHorizontalEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v3])(&v10, this);
  }
}

unint64_t WebCore::clipRectForNinePieceImageStrip(unsigned int *a1, uint64_t *a2, _DWORD *a3)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned __int8 hasClosedLeftAndRightEdge;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  char v19;
  char *v20;

  v7 = a1[4];
  if ((_DWORD)v7 == -1)
    goto LABEL_18;
  v3 = a3;
  v5 = *a3;
  v10 = a3[1];
  v20 = &v19;
  v11 = ((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v7])(&v20, a1);
  if ((*(_BYTE *)(v11 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19634A830);
  }
  v12 = WebCore::RenderStyle::imageOutsets(v11 + 80, a2);
  HIDWORD(v4) = v13;
  hasClosedLeftAndRightEdge = WebCore::InlineIterator::InlineBox::hasClosedLeftAndRightEdge((WebCore::InlineIterator::InlineBox *)a1);
  v15 = a1[4];
  if ((_DWORD)v15 == -1)
  {
LABEL_18:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_19:
    v10 = (v16 >> 31) + 0x7FFFFFFF;
LABEL_6:
    if (v6)
    {
      if (__OFSUB__(*v3, HIDWORD(v4)))
        v5 = (*v3 >> 31) + 0x7FFFFFFF;
      else
        v5 = *v3 - HIDWORD(v4);
    }
    return v5 | (unint64_t)(v10 << 32);
  }
  v6 = hasClosedLeftAndRightEdge;
  v20 = &v19;
  if (((unsigned int (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box12isHorizontalEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v15])(&v20, a1))
  {
    v16 = v3[1];
    v10 = v16 - v12;
    if (!__OFSUB__(v16, v12))
      goto LABEL_6;
    goto LABEL_19;
  }
  if (__OFSUB__(*v3, HIDWORD(v4)))
    v5 = (*v3 >> 31) + 0x7FFFFFFF;
  else
    v5 = *v3 - HIDWORD(v4);
  if (v6)
  {
    v17 = v3[1];
    v10 = v17 - v12;
    if (__OFSUB__(v17, v12))
      v10 = (v17 >> 31) + 0x7FFFFFFF;
  }
  return v5 | (unint64_t)(v10 << 32);
}

uint64_t WebCore::InlineBoxPainter::paintBoxShadow(uint64_t a1, int a2, const WebCore::LayoutRect *a3)
{
  int v3;
  const WebCore::LayoutRect *v4;
  unsigned int *v5;
  uint64_t v6;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  char v12;
  WebCore::RenderElement *v13;
  char *LineStyle;
  const WebCore::LayoutRect *v15;
  int v16;
  _BOOL8 v17;
  _BOOL4 v18;
  WTF::StringImpl *v20;
  unsigned __int16 hasClosedLeftAndRightEdge;
  WebCore::RenderElement *v22;
  _QWORD v23[2];
  int v24;
  _QWORD v25[2];
  int v26;
  unsigned int *v27[2];
  _BYTE v28[16];
  int v29;
  char v30;

  v5 = *(unsigned int **)(a1 + 24);
  v27[0] = *(unsigned int **)(a1 + 40);
  v27[1] = v5;
  v28[0] = 0;
  v29 = -1;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6 == -1)
    goto LABEL_24;
  v4 = a3;
  v3 = a2;
  ((void (*)(_QWORD *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v6])(v25, v28, a1);
  v29 = v6;
  v25[0] = v23;
  ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator25traversePreviousInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v6])(v25, v28);
  LOBYTE(v25[0]) = 0;
  v26 = -1;
  v8 = v29;
  if (v29 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v29])(v23, v25, v28);
    v26 = v8;
    if (v29 != -1)
      ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v29])(v23, v28);
  }
  if (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v25))
  {
    v12 = 0;
    goto LABEL_12;
  }
  v28[0] = 0;
  v29 = -1;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10 == -1)
  {
LABEL_24:
    v13 = (WebCore::RenderElement *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_25;
  }
  ((void (*)(_QWORD *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v10])(v23, v28, a1);
  v29 = v10;
  v23[0] = &v30;
  ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v10])(v23, v28);
  LOBYTE(v23[0]) = 0;
  v24 = -1;
  v11 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, _QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v29])(&v30, v23, v28);
    v24 = v11;
    if (v29 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v29])(&v30, v28);
  }
  v12 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v23);
  if (v24 != -1)
    ((void (*)(_BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v24])(v28, v23);
LABEL_12:
  if (v26 != -1)
    ((void (*)(_BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v26])(v28, v25);
  if ((v12 & 1) != 0 || *(_BYTE *)(a1 + 49))
  {
    v13 = *(WebCore::RenderElement **)(a1 + 40);
    if (!*(_BYTE *)(a1 + 48))
    {
      LineStyle = (char *)v13 + 80;
LABEL_17:
      v15 = v4;
      v16 = v3;
      v17 = 1;
      v18 = 1;
      return WebCore::BackgroundPainter::paintBoxShadow(v27, v15, (uint64_t)LineStyle, v16, (const WebCore::LayoutSize *)v17, v18);
    }
LABEL_25:
    LineStyle = WebCore::RenderElement::firstLineStyle(v13, v9);
    goto LABEL_17;
  }
  hasClosedLeftAndRightEdge = WebCore::InlineIterator::InlineBox::hasClosedLeftAndRightEdge((WebCore::InlineIterator::InlineBox *)a1);
  v22 = *(WebCore::RenderElement **)(a1 + 40);
  if (*(_BYTE *)(a1 + 48))
    LineStyle = WebCore::RenderElement::firstLineStyle(v22, v20);
  else
    LineStyle = (char *)v22 + 80;
  v17 = hasClosedLeftAndRightEdge != 0;
  v18 = hasClosedLeftAndRightEdge > 0xFFu;
  v15 = v4;
  v16 = v3;
  return WebCore::BackgroundPainter::paintBoxShadow(v27, v15, (uint64_t)LineStyle, v16, (const WebCore::LayoutSize *)v17, v18);
}

void WebCore::InlineBoxPainter::paintFillLayer(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t (**v5)();
  uint64_t v11;
  int hasBorderRadius;
  int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  const WebCore::CachedImageClient *v20;
  uint64_t v21;
  int v22;
  _BOOL8 v23;
  float v24;
  double v25;
  uint64_t v26;
  _BOOL8 v27;
  float v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  float v33;
  int v34;
  int v35;
  uint64_t v36;
  _BOOL8 v37;
  float v38;
  double v39;
  uint64_t v40;
  _BOOL8 v41;
  float v42;
  double v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  float v51;
  double v52;
  int v53;
  uint64_t v54;
  float v55;
  int v56;
  int v57;
  uint64_t v58;
  float v59;
  double v60;
  int v61;
  __int128 v62;
  int v63;
  const WebCore::CachedImageClient *v64[2];
  int v65;
  float v66;
  float v67;
  int v68;
  int v69;
  unsigned int v70;
  char v71;

  v11 = *(_QWORD *)(a3 + 16);
  if (v11
    && ((*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v11 + 208))(v11, *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 104) + 184)) & 1) != 0)
  {
    hasBorderRadius = 1;
  }
  else
  {
    hasBorderRadius = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(*(_QWORD *)(a1 + 40) + 80));
  }
  LOBYTE(v66) = 0;
  v13 = -1;
  v70 = -1;
  v14 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v14 == -1)
    goto LABEL_96;
  v5 = __const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0;
  ((void (*)(const WebCore::CachedImageClient **, float *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v14])(v64, &v66, a1);
  v70 = v14;
  v64[0] = (const WebCore::CachedImageClient *)&v62;
  ((void (*)(const WebCore::CachedImageClient **, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator25traversePreviousInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v14])(v64, &v66);
  LOBYTE(v64[0]) = 0;
  v65 = -1;
  v15 = v70;
  if (v70 != -1)
  {
    ((void (*)(__int128 *, const WebCore::CachedImageClient **, float *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v70])(&v62, v64, &v66);
    v65 = v15;
    if (v70 != -1)
      ((void (*)(__int128 *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v70])(&v62, &v66);
  }
  v14 = (unint64_t)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3;
  if (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v64))
  {
    v18 = 0;
    goto LABEL_14;
  }
  LOBYTE(v66) = 0;
  v13 = -1;
  v70 = -1;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16 == -1)
  {
LABEL_96:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_97;
  }
  ((void (*)(__int128 *, float *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v16])(&v62, &v66, a1);
  v70 = v16;
  *(_QWORD *)&v62 = &v71;
  ((void (*)(__int128 *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v16])(&v62, &v66);
  LOBYTE(v62) = 0;
  v63 = -1;
  v17 = v70;
  if (v70 != -1)
  {
    ((void (*)(char *, __int128 *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v70])(&v71, &v62, &v66);
    v63 = v17;
    if (v70 != -1)
      ((void (*)(char *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v70])(&v71, &v66);
  }
  v18 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v62);
  if (v63 != -1)
    ((void (*)(float *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v63])(&v66, &v62);
LABEL_14:
  if (v65 != -1)
    ((void (*)(float *, const WebCore::CachedImageClient **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v65])(&v66, v64);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = *(const WebCore::CachedImageClient **)(a1 + 24);
  v64[0] = (const WebCore::CachedImageClient *)v19;
  v64[1] = v20;
  if (((hasBorderRadius ^ 1 | v18) & 1) == 0 && !*(_BYTE *)(a1 + 49))
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 88) + 8) + 68) & 8) != 0)
    {
      v30 = *((_QWORD *)v20 + 10);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 96))(v30, 1);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80);
      *(float *)&v32 = (float)*(int *)a4 * 0.015625;
      v33 = (float)*((int *)a4 + 1) * 0.015625;
      WebCore::InlineIterator::Box::visualRectIgnoringBlockDirection((WebCore::InlineIterator::Box *)a1);
      v66 = *(float *)&v32;
      v67 = v33;
      v68 = v34;
      v69 = v35;
      (*(void (**)(uint64_t, float *))(*(_QWORD *)v31 + 456))(v31, &v66);
      LOBYTE(v66) = 0;
      v70 = -1;
      v36 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v36 != -1)
      {
        ((void (*)(__int128 *, float *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v36])(&v62, &v66, a1);
        v70 = v36;
      }
      v62 = 0uLL;
      WebCore::BackgroundPainter::paintFillLayer(v64, a2, a3, a4, 0, (unsigned int *)&v66, &v62, a5, 0, 0);
      if (v70 != -1)
        ((void (*)(__int128 *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v70])(&v62, &v66);
      goto LABEL_87;
    }
    if ((*(_BYTE *)(v19 + 123) & 4) != 0)
    {
      WebCore::InlineIterator::InlineBox::nextInlineBox((WebCore::InlineIterator::InlineBox *)a1, (uint64_t)&v66);
      v22 = 0;
      while ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v66) & 1) == 0)
      {
        v37 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)&v66);
        WebCore::InlineIterator::Box::logicalWidth((WebCore::InlineIterator::Box *)v37);
        v39 = (float)((float)((float)v22 * 0.015625) + v38) * 64.0;
        if (v39 >= 2147483650.0)
        {
          v22 = 0x7FFFFFFF;
        }
        else if (v39 <= -2147483650.0)
        {
          v22 = 0x80000000;
        }
        else
        {
          v22 = (int)v39;
        }
        WebCore::InlineIterator::InlineBoxIterator::traverseNextInlineBox((WebCore::InlineIterator::InlineBoxIterator *)&v66);
      }
      if (v70 != -1)
        ((void (*)(__int128 *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v70])(&v62, &v66);
      LOBYTE(v66) = 0;
      v70 = -1;
      v40 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v40 != -1)
      {
        ((void (*)(__int128 *, float *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v40])(&v62, &v66, a1);
        v70 = v40;
      }
      v13 = v22;
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v66) & 1) == 0)
      {
        v13 = v22;
        do
        {
          v41 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)&v66);
          WebCore::InlineIterator::Box::logicalWidth((WebCore::InlineIterator::Box *)v41);
          v43 = (float)((float)((float)v13 * 0.015625) + v42) * 64.0;
          if (v43 >= 2147483650.0)
          {
            v13 = 0x7FFFFFFF;
          }
          else if (v43 <= -2147483650.0)
          {
            v13 = 0x80000000;
          }
          else
          {
            v13 = (int)v43;
          }
          WebCore::InlineIterator::InlineBoxIterator::traversePreviousInlineBox((WebCore::InlineIterator::InlineBoxIterator *)&v66);
        }
        while ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v66) & 1) == 0);
      }
    }
    else
    {
      WebCore::InlineIterator::InlineBox::previousInlineBox((WebCore::InlineIterator::InlineBox *)a1, (uint64_t)&v66);
      v22 = 0;
      while ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v66) & 1) == 0)
      {
        v23 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)&v66);
        WebCore::InlineIterator::Box::logicalWidth((WebCore::InlineIterator::Box *)v23);
        v25 = (float)((float)((float)v22 * 0.015625) + v24) * 64.0;
        if (v25 >= 2147483650.0)
        {
          v22 = 0x7FFFFFFF;
        }
        else if (v25 <= -2147483650.0)
        {
          v22 = 0x80000000;
        }
        else
        {
          v22 = (int)v25;
        }
        WebCore::InlineIterator::InlineBoxIterator::traversePreviousInlineBox((WebCore::InlineIterator::InlineBoxIterator *)&v66);
      }
      if (v70 != -1)
        ((void (*)(__int128 *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v70])(&v62, &v66);
      LOBYTE(v66) = 0;
      v70 = -1;
      v26 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v26 != -1)
      {
        ((void (*)(__int128 *, float *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v26])(&v62, &v66, a1);
        v70 = v26;
      }
      v13 = v22;
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v66) & 1) == 0)
      {
        v13 = v22;
        do
        {
          v27 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)&v66);
          WebCore::InlineIterator::Box::logicalWidth((WebCore::InlineIterator::Box *)v27);
          v29 = (float)((float)((float)v13 * 0.015625) + v28) * 64.0;
          if (v29 >= 2147483650.0)
          {
            v13 = 0x7FFFFFFF;
          }
          else if (v29 <= -2147483650.0)
          {
            v13 = 0x80000000;
          }
          else
          {
            v13 = (int)v29;
          }
          WebCore::InlineIterator::InlineBoxIterator::traverseNextInlineBox((WebCore::InlineIterator::InlineBoxIterator *)&v66);
        }
        while ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v66) & 1) == 0);
      }
    }
    if (v70 != -1)
      ((void (*)(__int128 *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v70])(&v62, &v66);
    v44 = *(_DWORD *)a4;
    if (*(_BYTE *)(a1 + 50))
      v45 = v22;
    else
      v45 = 0;
    v46 = v44 - v45;
    if (__OFSUB__(v44, v45))
      v46 = (v44 >> 31) + 0x7FFFFFFF;
    v47 = *((_DWORD *)a4 + 1);
    if (*(_BYTE *)(a1 + 50))
      v48 = 0;
    else
      v48 = v22;
    hasBorderRadius = v47 - v48;
    if (__OFSUB__(v47, v48))
      hasBorderRadius = (v47 >> 31) + 0x7FFFFFFF;
    v49 = v13;
    if (*(_BYTE *)(a1 + 50))
    {
LABEL_76:
      if (*(_BYTE *)(a1 + 50))
      {
        v50 = v46;
        WebCore::InlineIterator::Box::visualRectIgnoringBlockDirection((WebCore::InlineIterator::Box *)a1);
        v46 = v50;
        v52 = v51 * 64.0;
        if (v52 > -2147483650.0)
          v53 = (int)v52;
        else
          v53 = 0x80000000;
        if (v52 < 2147483650.0)
          v13 = v53;
        else
          v13 = 0x7FFFFFFF;
      }
      *(_QWORD *)&v62 = __PAIR64__(hasBorderRadius, v46);
      *((_QWORD *)&v62 + 1) = __PAIR64__(v13, v49);
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 96))(v30, 1);
      v54 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80);
      v66 = WebCore::LayoutRect::operator WebCore::FloatRect((int *)a4);
      v67 = v55;
      v68 = v56;
      v69 = v57;
      (*(void (**)(uint64_t, float *))(*(_QWORD *)v54 + 456))(v54, &v66);
      LOBYTE(v66) = 0;
      v70 = -1;
      v58 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v58 != -1)
      {
        ((void (*)(char *, float *, uint64_t))v5[v58])(&v71, &v66, a1);
        v70 = v58;
      }
      WebCore::BackgroundPainter::paintFillLayer(v64, a2, a3, a4, 0, (unsigned int *)&v66, &v62, a5, 0, 0);
      if (v70 != -1)
        (*(void (**)(char *, float *))(v14 + 8 * v70))(&v71, &v66);
LABEL_87:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 104))(v30, 1);
      return;
    }
    v61 = v46;
    WebCore::InlineIterator::Box::visualRectIgnoringBlockDirection((WebCore::InlineIterator::Box *)a1);
    v60 = v59 * 64.0;
    if (v60 < 2147483650.0)
    {
      if (v60 <= -2147483650.0)
        v49 = 0x80000000;
      else
        v49 = (int)v60;
      goto LABEL_91;
    }
LABEL_97:
    v49 = 0x7FFFFFFF;
LABEL_91:
    v46 = v61;
    goto LABEL_76;
  }
  LOBYTE(v66) = 0;
  v70 = -1;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(__int128 *, float *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v21])(&v62, &v66, a1);
    v70 = v21;
  }
  v62 = 0uLL;
  WebCore::BackgroundPainter::paintFillLayer(v64, a2, a3, a4, 0, (unsigned int *)&v66, &v62, a5, 0, 0);
  if (v70 != -1)
    ((void (*)(__int128 *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v70])(&v62, &v66);
}

uint64_t *WebCore::InlineIterator::Box::visualRectIgnoringBlockDirection(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t **v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::LayerAncestorClippingStack::LayerAncestorClippingStack(v3, v4);
  }
  else
  {
    v6 = &v5;
    return (uint64_t *)((uint64_t (*)(char **, WebCore::InlineIterator::Box *))off_1E341E678[v1])(&v6, this);
  }
}

uint64_t *WebCore::LayerAncestorClippingStack::LayerAncestorClippingStack(uint64_t *result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = result;
  *result = 0;
  result[1] = 0;
  v3 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x2AAAAAB)
  {
    v5 = 96 * v3;
    v6 = WTF::fastMalloc((WTF *)(96 * v3));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFE0) / 0x60;
    *v2 = v6;
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = *a2;
      v10 = (uint64_t)&(*a2)[8 * v7];
      do
      {
        v11 = *v9;
        *v9 = 0;
        v12 = *((_BYTE *)v9 + 56);
        v13 = *(_OWORD *)(v9 + 5);
        v14 = *(_OWORD *)(v9 + 3);
        v15 = *(_OWORD *)(v9 + 1);
        *(_QWORD *)v6 = v11;
        *(_OWORD *)(v6 + 8) = v15;
        *(_OWORD *)(v6 + 24) = v14;
        *(_OWORD *)(v6 + 40) = v13;
        *(_BYTE *)(v6 + 56) = v12;
        ++v8;
        *(_OWORD *)(v6 + 64) = 0uLL;
        *(_OWORD *)(v6 + 80) = 0uLL;
        v6 += 96;
        v9 += 8;
      }
      while (v9 != (uint64_t *)v10);
      *((_DWORD *)v2 + 3) = v8;
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::LayerAncestorClippingStack::clear(_DWORD *this, WebCore::ScrollingCoordinator *a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = this[3];
  if ((_DWORD)v2)
  {
    v4 = 96 * v2;
    v5 = (_DWORD *)(*(_QWORD *)this + 88);
    do
    {
      v6 = *((_QWORD *)v5 - 3);
      if (v6)
      {
        (*(void (**)(WebCore::ScrollingCoordinator *, uint64_t, _QWORD))(*(_QWORD *)a2 + 256))(a2, v6, *((_QWORD *)v5 - 2));
        *((_QWORD *)v5 - 3) = 0;
        *((_QWORD *)v5 - 2) = 0;
      }
      WebCore::GraphicsLayer::unparentAndClear(v5 - 2);
      this = WebCore::GraphicsLayer::unparentAndClear(v5);
      v5 += 24;
      v4 -= 96;
    }
    while (v4);
  }
  return this;
}

unsigned int *WebCore::LayerAncestorClippingStack::updateScrollingNodeLayers(unsigned int *this, WebCore::ScrollingCoordinator *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = this[3];
  if ((_DWORD)v2)
  {
    v4 = 96 * v2;
    v5 = (_QWORD *)(*(_QWORD *)this + 88);
    v6 = 0uLL;
    do
    {
      if (*((_BYTE *)v5 - 32))
      {
        v7 = *(v5 - 3);
        v8 = *(v5 - 2);
        v9 = *v5;
        v10 = v6;
        v11 = v6;
        v12 = v6;
        v13 = 0;
        this = (unsigned int *)(*(uint64_t (**)(WebCore::ScrollingCoordinator *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 304))(a2, v7, v8, &v9);
        v6 = 0uLL;
      }
      v5 += 12;
      v4 -= 96;
    }
    while (v4);
  }
  return this;
}

uint64_t WebCore::LayerAncestorClippingStack::updateWithClipData(uint64_t a1, void *a2, uint64_t *a3)
{
  unsigned int *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  WTF *v16;
  char *v17;
  uint64_t v18;
  WTF *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v39;
  char v40;
  WTF *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int64_t v52;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  __int128 v60;
  __int128 v61;

  v3 = (unsigned int *)a1;
  v4 = *((unsigned int *)a3 + 3);
  v5 = *(int *)(a1 + 12);
  if ((int)v4 >= 1)
  {
    v6 = a3;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v54 = 96 * v4;
    v52 = *(int *)(a1 + 12);
    while (v9 < *((unsigned int *)v6 + 3))
    {
      v11 = *v6;
      v12 = *v6 + v7;
      if ((uint64_t)v9 >= v5)
      {
        v34 = v4;
        v35 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        v55 = v35;
        v36 = *(_OWORD *)(v12 + 8);
        v37 = *(_OWORD *)(v12 + 24);
        v38 = *(_OWORD *)(v12 + 40);
        v59 = *(_BYTE *)(v12 + 56);
        v58 = v38;
        v57 = v37;
        v56 = v36;
        v60 = 0u;
        v61 = 0u;
        v39 = v3[3];
        if (v39 == v3[2])
        {
          WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LayerAncestorClippingStack::ClippingStackEntry>(v3, (unint64_t)&v55);
        }
        else
        {
          v44 = *(_QWORD *)v3 + 96 * v39;
          v55 = 0;
          *(_QWORD *)v44 = v35;
          v45 = v56;
          v46 = v57;
          v47 = v58;
          *(_BYTE *)(v44 + 56) = v59;
          *(_OWORD *)(v44 + 40) = v47;
          *(_OWORD *)(v44 + 24) = v46;
          *(_OWORD *)(v44 + 8) = v45;
          *(_OWORD *)(v44 + 64) = v60;
          v48 = v61;
          *(_QWORD *)&v61 = 0;
          *(_QWORD *)(v44 + 80) = v48;
          v49 = *((_QWORD *)&v61 + 1);
          *((_QWORD *)&v61 + 1) = 0;
          *(_QWORD *)(v44 + 88) = v49;
          ++v3[3];
        }
        WebCore::LayerAncestorClippingStack::ClippingStackEntry::~ClippingStackEntry((WebCore::LayerAncestorClippingStack::ClippingStackEntry *)&v55, a2);
        v10 = 1;
        v4 = v34;
      }
      else
      {
        if (v9 >= v3[3])
        {
          __break(0xC471u);
          JUMPOUT(0x19634B948);
        }
        v13 = v6;
        v14 = v10;
        v15 = v4;
        v16 = *(WTF **)v3;
        v17 = (char *)v16 + v8;
        if (WebCore::operator==((uint64_t *)((char *)v16 + v8), (uint64_t *)v12))
          v10 = v14;
        else
          v10 = 1;
        if (v17[56] && !*(_BYTE *)(v11 + v7 + 56))
        {
          v43 = (char *)v16 + v8;
          v50 = v10;
          (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)a2 + 256))(a2, *(_QWORD *)((char *)v16 + v8 + 64), *(_QWORD *)((char *)v16 + v8 + 72));
          v10 = v50;
          *((_QWORD *)v43 + 8) = 0;
          *((_QWORD *)v43 + 9) = 0;
        }
        v18 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        v19 = *(WTF **)v17;
        *(_QWORD *)v17 = v18;
        v4 = v15;
        v6 = v13;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
          {
            v27 = v10;
            v28 = v4;
            WTF::fastFree(v19, a2);
            v4 = v28;
            v10 = v27;
          }
          else
          {
            --*(_DWORD *)v19;
          }
        }
        v20 = (char *)v16 + v8;
        v21 = *(_OWORD *)(v11 + v7 + 8);
        v22 = *(_OWORD *)(v11 + v7 + 24);
        v23 = *(_OWORD *)(v11 + v7 + 40);
        v20[56] = *(_BYTE *)(v11 + v7 + 56);
        *(_OWORD *)(v20 + 40) = v23;
        *(_OWORD *)(v20 + 24) = v22;
        *(_OWORD *)(v20 + 8) = v21;
        v5 = v52;
        v3 = (unsigned int *)a1;
      }
      ++v9;
      v8 += 96;
      v7 += 64;
      if (v54 == v8)
        goto LABEL_17;
    }
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x19634B940);
  }
  LOBYTE(v10) = 0;
LABEL_17:
  v24 = (void *)(int)v4;
  if ((int)v5 > (int)v4)
  {
    v29 = 96 * (int)v4;
    v30 = v5 - v4;
    v31 = (int)v4;
    do
    {
      if (v31 >= v3[3])
      {
        __break(0xC471u);
        JUMPOUT(0x19634B950);
      }
      v32 = *(_QWORD *)v3 + v29;
      v33 = *(_QWORD *)(v32 + 64);
      if (v33)
        (*(void (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a2 + 256))(a2, v33, *(_QWORD *)(v32 + 72));
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)(v32 + 80));
      ++v31;
      v29 += 96;
      --v30;
    }
    while (v30);
    WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(v3, v24);
    LOBYTE(v10) = 1;
  }
  else
  {
    v25 = v3[3];
    if (v3[2] > v25)
    {
      v40 = v10;
      v41 = *(WTF **)v3;
      if ((_DWORD)v25)
      {
        if (v25 >= 0x2AAAAAB)
          goto LABEL_45;
        v42 = WTF::fastMalloc((WTF *)(96 * v25));
        v3[2] = 96 * (int)v25 / 0x60u;
        *(_QWORD *)v3 = v42;
        if ((WTF *)v42 != v41)
          WTF::VectorTypeOperations<WebCore::LayerAncestorClippingStack::ClippingStackEntry>::move(v41, (WTF *)((char *)v41 + 96 * v25), v42);
      }
      if (v41)
      {
        if (*(WTF **)v3 == v41)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        WTF::fastFree(v41, a2);
      }
      LOBYTE(v10) = v40;
    }
  }
  return v10 & 1;
}

void WebCore::LayerAncestorClippingStack::ClippingStackEntry::~ClippingStackEntry(WebCore::LayerAncestorClippingStack::ClippingStackEntry *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WTF *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  v5 = *(WTF **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
}

unsigned int *WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, void *a2)
{
  unsigned int v2;
  unsigned int *v3;
  void *v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  _DWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = (void *)result[3];
  if (v4 != a2)
  {
    v5 = 96 * v4 - 96 * (_QWORD)a2;
    v6 = (_DWORD **)(*(_QWORD *)result + 96 * (_QWORD)a2 + 88);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
        else
          --v7[2];
      }
      v8 = *(v6 - 1);
      *(v6 - 1) = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
        else
          --v8[2];
      }
      result = *(v6 - 11);
      *(v6 - 11) = 0;
      if (result)
      {
        if (*result == 1)
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        else
          --*result;
      }
      v6 += 12;
      v5 -= 96;
    }
    while (v5);
  }
  v3[3] = v2;
  return result;
}

WTF::TextStream *WebCore::operator<<(WTF::TextStream *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::TextStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  char v22;
  int v23;
  __int16 v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  v24 = 256;
  v25 = 0;
  v23 = *((_DWORD *)a1 + 6) + 2;
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  if (*((_DWORD *)a2 + 3))
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *a2;
      WTF::TextStream::startGroup((WTF::TextStream *)&v19);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::startGroup((WTF::TextStream *)&v19);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup((WTF::TextStream *)&v19);
      v6 = v5 + v3;
      WTF::TextStream::startGroup((WTF::TextStream *)&v19);
      WTF::TextStream::operator<<();
      v7 = (WTF::TextStream *)WTF::TextStream::operator<<();
      WebCore::operator<<(v7);
      WTF::TextStream::endGroup((WTF::TextStream *)&v19);
      WTF::TextStream::startGroup((WTF::TextStream *)&v19);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup((WTF::TextStream *)&v19);
      if (*(_QWORD *)(v5 + v3 + 64))
      {
        WTF::TextStream::startGroup((WTF::TextStream *)&v19);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::operator<<();
        WTF::TextStream::operator<<();
        v26 = *(WTF::StringImpl **)(v6 + 72);
        WTF::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::endGroup((WTF::TextStream *)&v19);
      }
      v8 = *(_QWORD *)(v6 + 80);
      if (v8)
      {
        v26 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
        v27 = v9;
        WTF::TextStream::startGroup((WTF::TextStream *)&v19);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::operator<<();
        WTF::TextStream::operator<<();
        v28 = v27;
        WTF::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::endGroup((WTF::TextStream *)&v19);
      }
      v10 = *(_QWORD *)(v5 + v3 + 88);
      if (v10)
      {
        v26 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
        v27 = v11;
        WTF::TextStream::startGroup((WTF::TextStream *)&v19);
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::operator<<();
        WTF::operator<<();
        WTF::TextStream::operator<<();
        v28 = v27;
        WTF::operator<<();
        WTF::TextStream::operator<<();
        WTF::TextStream::endGroup((WTF::TextStream *)&v19);
      }
      WTF::TextStream::endGroup((WTF::TextStream *)&v19);
      ++v4;
      v3 += 96;
    }
    while (v4 < *((unsigned int *)a2 + 3));
  }
  WTF::TextStream::release((WTF::TextStream *)&v19);
  WTF::TextStream::operator<<();
  v13 = v26;
  v26 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::TextStream::endGroup(a1);
  v15 = v20;
  v20 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v19;
  v19 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  return a1;
}

uint64_t WebCore::IndefiniteSizeStrategy::isComputingSizeContainment(WebCore::IndefiniteSizeStrategy *this)
{
  return WebCore::RenderElement::shouldApplySizeContainment(*(WebCore::RenderElement **)(*((_QWORD *)this + 1) + 136));
}

uint64_t WebCore::IndefiniteSizeStrategy::isComputingInlineSizeContainment(WebCore::IndefiniteSizeStrategy *this)
{
  return WebCore::RenderElement::shouldApplyInlineSizeContainment(*(WebCore::RenderElement **)(*((_QWORD *)this + 1)
                                                                                             + 136));
}

uint64_t WebCore::IndefiniteSizeStrategy::isComputingSizeOrInlineSizeContainment(WebCore::IndefiniteSizeStrategy *this)
{
  return WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(*(WebCore::RenderElement **)(*((_QWORD *)this + 1) + 136));
}

uint64_t WebCore::DefiniteSizeStrategy::isComputingSizeContainment(WebCore::DefiniteSizeStrategy *this)
{
  return 0;
}

uint64_t WebCore::DefiniteSizeStrategy::isComputingInlineSizeContainment(WebCore::DefiniteSizeStrategy *this)
{
  return 0;
}

uint64_t WebCore::DefiniteSizeStrategy::isComputingSizeOrInlineSizeContainment(WebCore::DefiniteSizeStrategy *this)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(WTF **a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, a2);
          else
            --*(_DWORD *)v5;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::HashTable(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v3;
  int v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = *((_DWORD *)v3 - 3);
    if (v5)
    {
      v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
      *a1 = v8 + 16;
      *(_DWORD *)(v8 + 12) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v5;
      *(_DWORD *)(*a1 - 16) = 0;
      v9 = *a2;
      v10 = WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::begin(*a2);
      v11 = v10;
      v13 = v12;
      if (v9)
        v9 += 2 * *((unsigned int *)v9 - 1);
      if (v9 != v10)
      {
        do
        {
          v14 = WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>,WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>(*a1, *v11);
          WTF::IdentityHashTranslator<WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::translate<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL> const&>(v14, v11);
          if (v11 + 2 == v13)
          {
LABEL_11:
            v11 = v13;
          }
          else
          {
            v11 += 2;
            while ((unint64_t)(*v11 + 1) <= 1)
            {
              v11 += 2;
              if (v11 == v13)
                goto LABEL_11;
            }
          }
        }
        while (v11 != v9);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>,WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = ~(*(_QWORD *)(a2 + 8) << 32) + *(_QWORD *)(a2 + 8);
  v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
  v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
  v6 = v2 & (((v5 + ~(v5 << 27)) >> 31) ^ (v5 + ~((_DWORD)v5 << 27)));
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 16 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  return a1 + 16 * v8;
}

WTF *WTF::IdentityHashTranslator<WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::translate<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL> const&>(uint64_t a1, _BYTE *a2)
{
  _DWORD *v4;
  WTF *result;

  v4 = *(_DWORD **)a2;
  *v4 = **(_DWORD **)a2 + 1;
  result = *(WTF **)a1;
  *(_QWORD *)a1 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  *(_BYTE *)(a1 + 8) = a2[8];
  return result;
}

BOOL WebCore::sortByGridTrackGrowthPotential(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;

  v2 = *a1;
  if (*a1)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = (*(_DWORD *)(v3 + 12) == -64 || *(_BYTE *)(v3 + 32)) && *(_BYTE *)(*(_QWORD *)(v2 + 8) + 28) == 0;
  v5 = *a2;
  if (*a2)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  if (*(_DWORD *)(v6 + 12) == -64 || *(_BYTE *)(v6 + 32))
  {
    result = *(_BYTE *)(*(_QWORD *)(v5 + 8) + 28) == 0;
    if (*(_BYTE *)(*(_QWORD *)(v5 + 8) + 28))
      v24 = 0;
    else
      v24 = v4;
    if (v24)
      return 0;
  }
  else
  {
    result = 0;
  }
  if (!v4 && !result)
  {
    if (v2)
    {
      v8 = *(_QWORD *)(v2 + 8);
      v9 = v8 + 24;
      v10 = v8 + 28;
    }
    else
    {
      v8 = 0;
      v9 = 24;
      v10 = 28;
    }
    v11 = (unsigned int *)(v8 + 12);
    if (*(_BYTE *)v10)
      v11 = (unsigned int *)v9;
    v12 = *v11;
    if (v5)
    {
      v13 = *(_QWORD *)(v5 + 8);
      v14 = v13 + 24;
      v15 = v13 + 28;
    }
    else
    {
      v13 = 0;
      v14 = 24;
      v15 = 28;
    }
    v16 = (unsigned int *)(v13 + 12);
    if (*(_BYTE *)v15)
      v16 = (unsigned int *)v14;
    v17 = *v16;
    v18 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 8) & ~(*(int *)(*(_QWORD *)(v2 + 8) + 8) >> 31);
    v19 = __OFSUB__(v12, v18);
    v20 = v12 - v18;
    v21 = (v12 >> 31) + 0x7FFFFFFF;
    if (v19)
      v20 = v21;
    v22 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 8) & ~(*(int *)(*(_QWORD *)(v5 + 8) + 8) >> 31);
    v19 = __OFSUB__(v17, v22);
    v23 = v17 - v22;
    if (v19)
      v23 = (v17 >> 31) + 0x7FFFFFFF;
    return v20 < v23;
  }
  return result;
}

unsigned int *std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,false>(unsigned int *result, WTF **a2, uint64_t (**a3)(unsigned int **, unsigned int **), uint64_t a4, uint64_t a5)
{
  unsigned int **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int **v10;
  void *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int **v21;
  unsigned int **v22;
  unsigned int **v23;
  unsigned int **v24;
  unsigned int **v25;
  char v26;
  char v27;
  uint64_t *v28;
  uint64_t (**v29)(unsigned int **, unsigned int **);

  while (2)
  {
    v6 = (unsigned int **)result;
    v7 = 1 - a4;
LABEL_2:
    v8 = (char *)a2 - (char *)v6;
    v9 = ((char *)a2 - (char *)v6) >> 3;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v10 = (unsigned int **)(a2 - 1);
        result = (unsigned int *)(*a3)((unsigned int **)a2 - 1, v6);
        if ((_DWORD)result)
        {
          v12 = *v6;
          *v6 = 0;
          v13 = *v10;
          *v10 = 0;
          v14 = *v6;
          *v6 = v13;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, v11);
            }
          }
          result = *v10;
          *v10 = v12;
          if (result)
          {
            do
            {
              v17 = __ldaxr(result);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, result));
            if (!v18)
            {
              atomic_store(1u, result);
              return (unsigned int *)WTF::fastFree((WTF *)result, v11);
            }
          }
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(v6, v6 + 1, (unsigned int **)a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(v6, v6 + 1, v6 + 2, (unsigned int **)a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(v6, v6 + 1, v6 + 2, v6 + 3, (unsigned int **)a2 - 1, a3);
      default:
        v28 = (uint64_t *)a2;
        v29 = a3;
        if (v8 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>((unsigned int *)v6, a2, (uint64_t (**)(WTF **, unsigned int **))a3);
          else
            return std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>((unsigned int *)v6, a2, (uint64_t (**)(WTF **, uint64_t))a3);
        }
        if (v7 == 1)
        {
          if (v6 != (unsigned int **)a2)
            return std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>((unsigned int *)v6, (unsigned int *)a2, a2, (uint64_t (**)(unsigned int **, WTF **))a3);
          return result;
        }
        v19 = a5;
        v20 = v9 >> 1;
        v21 = &v6[v9 >> 1];
        v22 = (unsigned int **)(a2 - 1);
        if ((unint64_t)v8 < 0x401)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(v21, v6, v22, a3);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(v6, v21, v22, a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(v6 + 1, v21 - 1, (unsigned int **)v28 - 2, v29);
          v23 = &v6[v20 + 1];
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(v6 + 2, v23, (unsigned int **)v28 - 3, v29);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(v21 - 1, v21, v23, v29);
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(v6, v21);
        }
        if ((v19 & 1) == 0 && ((*v29)(v6 - 1, v6) & 1) == 0)
        {
          result = (unsigned int *)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&)>((WTF **)v6, v28, (uint64_t (**)(WTF **, uint64_t *))v29);
          goto LABEL_34;
        }
        v24 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&)>((WTF **)v6, (unsigned int **)v28, (uint64_t (**)(WTF **, WTF **))v29);
        a3 = v29;
        v25 = v24;
        LOBYTE(a5) = v19;
        if ((v26 & 1) == 0)
          goto LABEL_33;
        v27 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(v6, (WTF **)v24, v29);
        result = (unsigned int *)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(v25 + 1, (WTF **)v28, v29);
        if (!(_DWORD)result)
        {
          a4 = -v7;
          a2 = (WTF **)v28;
          a3 = v29;
          a5 = v19;
          result = (unsigned int *)(v25 + 1);
          if ((v27 & 1) != 0)
            continue;
LABEL_33:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,false>(v6, v25, a3, -v7, a5 & 1);
          result = (unsigned int *)(v25 + 1);
LABEL_34:
          a5 = 0;
          a4 = -v7;
          a2 = (WTF **)v28;
          a3 = v29;
          continue;
        }
        ++v7;
        a2 = (WTF **)v25;
        a3 = v29;
        a5 = v19;
        if ((v27 & 1) == 0)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned int *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(unsigned int *result, WTF **a2, uint64_t (**a3)(WTF **, unsigned int **))
{
  WTF *v3;
  WTF *v4;
  unsigned int *v6;
  WTF **v7;
  unsigned int **v9;
  WTF **v10;
  void *v11;
  unsigned int *v12;
  WTF *v13;
  unsigned int **i;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24[11];

  if (result != (unsigned int *)a2)
  {
    v24[9] = v3;
    v24[10] = v4;
    v6 = result;
    v7 = (WTF **)(result + 2);
    if (result + 2 != (unsigned int *)a2)
    {
      v9 = (unsigned int **)result;
      do
      {
        v10 = v7;
        result = (unsigned int *)(*a3)(v7, v9);
        if ((_DWORD)result)
        {
          v12 = 0;
          v13 = *v10;
          *v10 = 0;
          v24[0] = v13;
          for (i = (unsigned int **)v10; ; v12 = *i)
          {
            v15 = i;
            i = v9;
            v16 = *v9;
            *v9 = 0;
            *v15 = v16;
            if (v12)
            {
              do
              {
                v17 = __ldaxr(v12);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v12));
              if (!v18)
              {
                atomic_store(1u, v12);
                WTF::fastFree((WTF *)v12, v11);
              }
            }
            if (v9 == (unsigned int **)v6)
              break;
            --v9;
            if (((*a3)(v24, i - 1) & 1) == 0)
              goto LABEL_14;
          }
          i = (unsigned int **)v6;
LABEL_14:
          v19 = v24[0];
          v24[0] = 0;
          result = *i;
          *i = (unsigned int *)v19;
          if (result)
          {
            do
            {
              v20 = __ldaxr(result);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, result));
            if (!v21)
            {
              atomic_store(1u, result);
              WTF::fastFree((WTF *)result, v11);
            }
            result = (unsigned int *)v24[0];
            v24[0] = 0;
            if (result)
            {
              do
              {
                v22 = __ldaxr(result);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, result));
              if (!v23)
              {
                atomic_store(1u, result);
                result = (unsigned int *)WTF::fastFree((WTF *)result, v11);
              }
            }
          }
        }
        v7 = v10 + 1;
        v9 = (unsigned int **)v10;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(unsigned int *result, WTF **a2, uint64_t (**a3)(WTF **, uint64_t))
{
  unsigned int *v4;
  WTF **v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF **v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;

  if (result != (unsigned int *)a2)
  {
    v4 = result;
    v5 = (WTF **)(result + 2);
    if (result + 2 != (unsigned int *)a2)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = v8;
        result = (unsigned int *)(*a3)(v5, (uint64_t)&v4[2 * v7]);
        if ((_DWORD)result)
        {
          result = 0;
          v11 = *v5;
          *v5 = 0;
          v21 = v11;
          while (1)
          {
            v12 = v5;
            v5 = (WTF **)&v4[2 * v7];
            v13 = *v5;
            *v5 = 0;
            *v12 = v13;
            if (result)
            {
              do
              {
                v14 = __ldaxr(result);
                v15 = v14 - 1;
              }
              while (__stlxr(v15, result));
              if (!v15)
              {
                atomic_store(1u, result);
                result = (unsigned int *)WTF::fastFree((WTF *)result, v10);
              }
            }
            if (v7 == -1)
            {
              __break(1u);
              return result;
            }
            --v7;
            if (((*a3)(&v21, (uint64_t)&v4[2 * v7]) & 1) == 0)
              break;
            result = (unsigned int *)*v5;
          }
          v16 = v21;
          v21 = 0;
          result = (unsigned int *)*v5;
          *v5 = v16;
          if (result)
          {
            do
            {
              v17 = __ldaxr(result);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, result));
            if (!v18)
            {
              atomic_store(1u, result);
              WTF::fastFree((WTF *)result, v10);
            }
            result = (unsigned int *)v21;
            v21 = 0;
            if (result)
            {
              do
              {
                v19 = __ldaxr(result);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, result));
              if (!v20)
              {
                atomic_store(1u, result);
                result = (unsigned int *)WTF::fastFree((WTF *)result, v10);
              }
            }
          }
        }
        v8 = v9 + 1;
        v5 = (WTF **)&v4[2 * v9 + 2];
        v7 = v9;
      }
      while (v5 != a2);
    }
  }
  return result;
}

unsigned int *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(unsigned int **a1, unsigned int **a2, unsigned int **a3, uint64_t (**a4)(unsigned int **, unsigned int **))
{
  char v8;
  unsigned int *result;
  void *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;

  v8 = (*a4)(a2, a1);
  result = (unsigned int *)(*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v11 = *a1;
    *a1 = 0;
    if ((_DWORD)result)
    {
      v12 = *a3;
      *a3 = 0;
      v13 = *a1;
      *a1 = v12;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((WTF *)v13, v10);
        }
      }
      result = *a3;
      *a3 = v11;
      if (result)
      {
        do
        {
          v16 = __ldaxr(result);
          v17 = --v16 == 0;
        }
        while (__stlxr(v16, result));
LABEL_42:
        if (v17)
        {
          atomic_store(1u, result);
          return (unsigned int *)WTF::fastFree((WTF *)result, v10);
        }
      }
    }
    else
    {
      v32 = *a2;
      *a2 = 0;
      v33 = *a1;
      *a1 = v32;
      if (v33)
      {
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v33);
          WTF::fastFree((WTF *)v33, v10);
        }
      }
      v36 = *a2;
      *a2 = v11;
      if (v36)
      {
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, v36);
          WTF::fastFree((WTF *)v36, v10);
        }
      }
      result = (unsigned int *)(*a4)(a3, a2);
      if ((_DWORD)result)
      {
        v39 = *a2;
        *a2 = 0;
        v40 = *a3;
        *a3 = 0;
        v41 = *a2;
        *a2 = v40;
        if (v41)
        {
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            atomic_store(1u, v41);
            WTF::fastFree((WTF *)v41, v10);
          }
        }
        result = *a3;
        *a3 = v39;
        if (result)
        {
          do
          {
            v44 = __ldaxr(result);
            v17 = --v44 == 0;
          }
          while (__stlxr(v44, result));
          goto LABEL_42;
        }
      }
    }
  }
  else if ((_DWORD)result)
  {
    v18 = *a2;
    *a2 = 0;
    v19 = *a3;
    *a3 = 0;
    v20 = *a2;
    *a2 = v19;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v10);
      }
    }
    v23 = *a3;
    *a3 = v18;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v10);
      }
    }
    result = (unsigned int *)(*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v26 = *a1;
      *a1 = 0;
      v27 = *a2;
      *a2 = 0;
      v28 = *a1;
      *a1 = v27;
      if (v28)
      {
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, v28);
          WTF::fastFree((WTF *)v28, v10);
        }
      }
      result = *a2;
      *a2 = v26;
      if (result)
      {
        do
        {
          v31 = __ldaxr(result);
          v17 = --v31 == 0;
        }
        while (__stlxr(v31, result));
        goto LABEL_42;
      }
    }
  }
  return result;
}

unsigned int *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *>(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *result;
  unsigned int v10;
  unsigned int v11;

  v4 = *a1;
  *a1 = 0;
  v5 = *a2;
  *a2 = 0;
  v6 = *a1;
  *a1 = v5;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  result = *a2;
  *a2 = v4;
  if (result)
  {
    do
    {
      v10 = __ldaxr(result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, result));
    if (!v11)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int **std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&)>(WTF **a1, uint64_t *a2, uint64_t (**a3)(WTF **, uint64_t *))
{
  WTF *v6;
  uint64_t v7;
  void *v8;
  unsigned int **v9;
  WTF **v10;
  uint64_t *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  WTF *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v31;

  v6 = *a1;
  *a1 = 0;
  v31 = v6;
  v7 = (*a3)(&v31, a2 - 1);
  if ((v7 & 1) != 0)
  {
    v9 = (unsigned int **)a1;
    while (1)
    {
      if (++v9 == (unsigned int **)a2)
        goto LABEL_40;
      v7 = (*a3)(&v31, (uint64_t *)v9);
      if ((v7 & 1) != 0)
        goto LABEL_9;
    }
  }
  v10 = a1 + 1;
  do
  {
    v9 = (unsigned int **)v10;
    if (v10 >= (WTF **)a2)
      break;
    v7 = (*a3)(&v31, (uint64_t *)v10);
    v10 = (WTF **)(v9 + 1);
  }
  while (!(_DWORD)v7);
LABEL_9:
  v11 = a2;
  if (v9 < (unsigned int **)a2)
  {
    v11 = a2;
    while (v11 != (uint64_t *)a1)
    {
      v7 = (*a3)(&v31, --v11);
      if ((v7 & 1) == 0)
        goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_13:
  if (v9 < (unsigned int **)v11)
  {
LABEL_14:
    v12 = *v9;
    *v9 = 0;
    v13 = *v11;
    *v11 = 0;
    v14 = *v9;
    *v9 = (unsigned int *)v13;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v8);
      }
    }
    v7 = *v11;
    *v11 = (uint64_t)v12;
    if (v7)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)v7);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v7));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)v7);
        v7 = WTF::fastFree((WTF *)v7, v8);
      }
    }
    while (++v9 != (unsigned int **)a2)
    {
      v7 = (*a3)(&v31, (uint64_t *)v9);
      if ((_DWORD)v7)
      {
        while (v11 != (uint64_t *)a1)
        {
          v7 = (*a3)(&v31, --v11);
          if ((v7 & 1) == 0)
          {
            if (v9 < (unsigned int **)v11)
              goto LABEL_14;
            goto LABEL_27;
          }
        }
        break;
      }
    }
LABEL_40:
    __break(1u);
LABEL_41:
    atomic_store(1u, (unsigned int *)v7);
    WTF::fastFree((WTF *)v7, v8);
    goto LABEL_35;
  }
LABEL_27:
  v19 = (uint64_t *)(v9 - 1);
  if (v9 - 1 != (unsigned int **)a1)
  {
    v20 = (WTF *)*v19;
    *v19 = 0;
    v21 = (unsigned int *)*a1;
    *a1 = v20;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v8);
      }
    }
  }
  v24 = v31;
  v31 = 0;
  v7 = *v19;
  *v19 = (uint64_t)v24;
  if (v7)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v7);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v7));
    if (!v26)
      goto LABEL_41;
  }
LABEL_35:
  v27 = (unsigned int *)v31;
  v31 = 0;
  if (v27)
  {
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, v8);
    }
  }
  return v9;
}

unsigned int **std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> *,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&)>(WTF **a1, unsigned int **a2, uint64_t (**a3)(WTF **, WTF **))
{
  unsigned int **v3;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF **v10;
  WTF **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v34;

  v7 = 0;
  v8 = *a1;
  *a1 = 0;
  v34 = v8;
  while (1)
  {
    v9 = (uint64_t)&a1[v7 + 1];
    if ((unsigned int **)v9 == a2)
      break;
    ++v7;
    if (((*a3)((WTF **)v9, &v34) & 1) == 0)
    {
      v10 = &a1[v7];
      if (v7 == 1)
      {
        v11 = (WTF **)a2;
        do
        {
          if (v10 >= v11)
            break;
          --v11;
        }
        while (((*a3)(v11, &v34) & 1) == 0);
LABEL_12:
        if (v10 >= v11)
        {
          v21 = (unsigned int **)(v10 - 1);
          goto LABEL_31;
        }
        v3 = (unsigned int **)v10;
        v12 = (unsigned int **)v11;
LABEL_14:
        v13 = *v3;
        *v3 = 0;
        v14 = *v12;
        *v12 = 0;
        v15 = *v3;
        *v3 = v14;
        if (v15)
        {
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, a2);
          }
        }
        v18 = *v12;
        *v12 = v13;
        if (v18)
        {
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            atomic_store(1u, v18);
            WTF::fastFree((WTF *)v18, a2);
          }
        }
        while (++v3 != a2)
        {
          if (((*a3)((WTF **)v3, &v34) & 1) == 0)
          {
            while (v12 != (unsigned int **)a1)
            {
              if ((*a3)((WTF **)--v12, &v34))
              {
                if (v3 < v12)
                  goto LABEL_14;
                goto LABEL_30;
              }
            }
            goto LABEL_29;
          }
        }
      }
      else
      {
        v11 = (WTF **)a2;
        while (v11 != a1)
        {
          if ((*a3)(--v11, &v34))
            goto LABEL_12;
        }
      }
      break;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  v21 = v3 - 1;
LABEL_31:
  if (v21 != (unsigned int **)a1)
  {
    v22 = *v21;
    *v21 = 0;
    v23 = (unsigned int *)*a1;
    *a1 = (WTF *)v22;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, a2);
      }
    }
  }
  v26 = v34;
  v34 = 0;
  v27 = *v21;
  *v21 = (unsigned int *)v26;
  if (v27)
  {
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, a2);
    }
  }
  v30 = (unsigned int *)v34;
  v34 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, a2);
    }
  }
  return v21;
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(unsigned int **a1, WTF **a2, uint64_t (**a3)(unsigned int **, unsigned int **))
{
  _BOOL8 v6;
  unsigned int **v7;
  void *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int **v16;
  WTF **v17;
  int v18;
  void *v19;
  unsigned int *v20;
  WTF *v21;
  unsigned int **i;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF *v35;

  v6 = 1;
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return v6;
    case 2:
      v7 = (unsigned int **)(a2 - 1);
      if ((*a3)((unsigned int **)a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = 0;
        v10 = *v7;
        *v7 = 0;
        v11 = *a1;
        *a1 = v10;
        if (v11)
        {
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            atomic_store(1u, v11);
            WTF::fastFree((WTF *)v11, v8);
          }
        }
        v14 = *v7;
        *v7 = v9;
        if (!v14)
          return 1;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        v6 = 1;
        if (v15 == 1)
        {
          atomic_store(1u, v14);
          WTF::fastFree((WTF *)v14, v8);
        }
      }
      break;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(a1, a1 + 1, (unsigned int **)a2 - 1, a3);
      break;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(a1, a1 + 1, a1 + 2, (unsigned int **)a2 - 1, a3);
      break;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(a1, a1 + 1, a1 + 2, a1 + 3, (unsigned int **)a2 - 1, a3);
      break;
    default:
      v16 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(a1, a1 + 1, a1 + 2, a3);
      v17 = (WTF **)(a1 + 3);
      v6 = 1;
      if (a1 + 3 != (unsigned int **)a2)
      {
        v18 = 0;
        while (1)
        {
          if ((*a3)((unsigned int **)v17, v16))
          {
            v20 = 0;
            v21 = *v17;
            *v17 = 0;
            v35 = v21;
            for (i = (unsigned int **)v17; ; v20 = *i)
            {
              v23 = i;
              i = v16;
              v24 = *v16;
              *v16 = 0;
              *v23 = v24;
              if (v20)
              {
                do
                {
                  v25 = __ldaxr(v20);
                  v26 = v25 - 1;
                }
                while (__stlxr(v26, v20));
                if (!v26)
                {
                  atomic_store(1u, v20);
                  WTF::fastFree((WTF *)v20, v19);
                }
              }
              if (v16 == a1)
                break;
              --v16;
              if (((*a3)((unsigned int **)&v35, i - 1) & 1) == 0)
                goto LABEL_23;
            }
            i = a1;
LABEL_23:
            v27 = v35;
            v35 = 0;
            v28 = *i;
            *i = (unsigned int *)v27;
            if (v28)
            {
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                atomic_store(1u, v28);
                WTF::fastFree((WTF *)v28, v19);
              }
            }
            v31 = (unsigned int *)v35;
            v35 = 0;
            if (v31)
            {
              do
              {
                v32 = __ldaxr(v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, v31));
              if (!v33)
              {
                atomic_store(1u, v31);
                WTF::fastFree((WTF *)v31, v19);
              }
            }
            if (++v18 == 8)
              break;
          }
          v16 = (unsigned int **)v17++;
          if (v17 == a2)
            return 1;
        }
        v6 = v17 + 1 == a2;
      }
      break;
  }
  return v6;
}

unsigned int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4, uint64_t (**a5)(unsigned int **, unsigned int **))
{
  unsigned int *result;
  void *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(a1, a2, a3, a5);
  result = (unsigned int *)(*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v12 = *a3;
    *a3 = 0;
    v13 = *a4;
    *a4 = 0;
    v14 = *a3;
    *a3 = v13;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v11);
      }
    }
    v17 = *a4;
    *a4 = v12;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v11);
      }
    }
    result = (unsigned int *)(*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v21 = *a2;
      *a2 = 0;
      v22 = *a3;
      *a3 = 0;
      v23 = *a2;
      *a2 = v22;
      if (v23)
      {
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v23);
          WTF::fastFree((WTF *)v23, v20);
        }
      }
      v26 = *a3;
      *a3 = v21;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v20);
        }
      }
      result = (unsigned int *)(*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v30 = *a1;
        *a1 = 0;
        v31 = *a2;
        *a2 = 0;
        v32 = *a1;
        *a1 = v31;
        if (v32)
        {
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            atomic_store(1u, v32);
            WTF::fastFree((WTF *)v32, v29);
          }
        }
        result = *a2;
        *a2 = v30;
        if (result)
        {
          do
          {
            v35 = __ldaxr(result);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, result));
          if (!v36)
          {
            atomic_store(1u, result);
            return (unsigned int *)WTF::fastFree((WTF *)result, v29);
          }
        }
      }
    }
  }
  return result;
}

unsigned int *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4, unsigned int **a5, uint64_t (**a6)(unsigned int **, unsigned int **))
{
  unsigned int *result;
  void *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(a1, a2, a3, a4, a6);
  result = (unsigned int *)(*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v14 = *a4;
    *a4 = 0;
    v15 = *a5;
    *a5 = 0;
    v16 = *a4;
    *a4 = v15;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v13);
      }
    }
    v19 = *a5;
    *a5 = v14;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v13);
      }
    }
    result = (unsigned int *)(*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v23 = *a3;
      *a3 = 0;
      v24 = *a4;
      *a4 = 0;
      v25 = *a3;
      *a3 = v24;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          WTF::fastFree((WTF *)v25, v22);
        }
      }
      v28 = *a4;
      *a4 = v23;
      if (v28)
      {
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, v28);
          WTF::fastFree((WTF *)v28, v22);
        }
      }
      result = (unsigned int *)(*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v32 = *a2;
        *a2 = 0;
        v33 = *a3;
        *a3 = 0;
        v34 = *a2;
        *a2 = v33;
        if (v34)
        {
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v31);
          }
        }
        v37 = *a3;
        *a3 = v32;
        if (v37)
        {
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            atomic_store(1u, v37);
            WTF::fastFree((WTF *)v37, v31);
          }
        }
        result = (unsigned int *)(*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v41 = *a1;
          *a1 = 0;
          v42 = *a2;
          *a2 = 0;
          v43 = *a1;
          *a1 = v42;
          if (v43)
          {
            do
            {
              v44 = __ldaxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
            {
              atomic_store(1u, v43);
              WTF::fastFree((WTF *)v43, v40);
            }
          }
          result = *a2;
          *a2 = v41;
          if (result)
          {
            do
            {
              v46 = __ldaxr(result);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, result));
            if (!v47)
            {
              atomic_store(1u, result);
              return (unsigned int *)WTF::fastFree((WTF *)result, v40);
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(unsigned int *result, unsigned int *a2, _QWORD *a3, uint64_t (**a4)(unsigned int **, WTF **))
{
  WTF **v6;
  WTF **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WTF **v12;
  unsigned int **v13;
  unsigned int *v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  WTF **v23;
  uint64_t v24;
  WTF **v25;
  unsigned int **v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int **v41;
  unsigned int *v42;
  unsigned int **v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  WTF *v55;
  unsigned int *v56;

  if (result != a2)
  {
    v6 = (WTF **)a2;
    v7 = (WTF **)result;
    v8 = (char *)a2 - (char *)result;
    v9 = ((char *)a2 - (char *)result) >> 3;
    if ((char *)a2 - (char *)result >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (WTF **)&result[2 * v10];
      do
      {
        result = (unsigned int *)std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>((uint64_t)v7, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      v13 = (unsigned int **)v6;
      do
      {
        result = (unsigned int *)(*a4)(v13, v7);
        if ((_DWORD)result)
        {
          v14 = *v13;
          *v13 = 0;
          v15 = *v7;
          *v7 = 0;
          v16 = *v13;
          *v13 = (unsigned int *)v15;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, a2);
            }
          }
          v19 = (unsigned int *)*v7;
          *v7 = (WTF *)v14;
          if (v19)
          {
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              WTF::fastFree((WTF *)v19, a2);
            }
          }
          result = (unsigned int *)std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>((uint64_t)v7, a4, v9, v7);
        }
        ++v13;
      }
      while (v13 != a3);
    }
    if (v8 >= 9)
    {
      v22 = (unint64_t)v8 >> 3;
      while (v22 > 0)
      {
        if (v22 != 1)
        {
          v23 = v6;
          v24 = 0;
          v55 = *v7;
          *v7 = 0;
          v25 = v7;
          do
          {
            v26 = (unsigned int **)v25;
            v25 += v24 + 1;
            v27 = 2 * v24;
            v24 = (2 * v24) | 1;
            v28 = v27 + 2;
            if (v27 + 2 < v22 && (*a4)((unsigned int **)v25, v25 + 1))
            {
              ++v25;
              v24 = v28;
            }
            v29 = (unsigned int *)*v25;
            *v25 = 0;
            v30 = *v26;
            *v26 = v29;
            if (v30)
            {
              do
              {
                v31 = __ldaxr(v30);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v30));
              if (!v32)
              {
                atomic_store(1u, v30);
                WTF::fastFree((WTF *)v30, a2);
              }
            }
          }
          while (v24 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
          v6 = v23 - 1;
          if (v25 != v23 - 1)
          {
            v33 = *v6;
            *v6 = 0;
            v34 = (unsigned int *)*v25;
            *v25 = v33;
            if (v34)
            {
              do
              {
                v35 = __ldaxr(v34);
                v36 = v35 - 1;
              }
              while (__stlxr(v36, v34));
              if (!v36)
              {
                atomic_store(1u, v34);
                WTF::fastFree((WTF *)v34, a2);
              }
            }
            result = (unsigned int *)*v6;
            *v6 = v55;
            if (result)
            {
              do
              {
                v37 = __ldaxr(result);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, result));
              if (!v38)
              {
                atomic_store(1u, result);
                result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
              }
            }
            v39 = (char *)(v25 + 1) - (char *)v7;
            if (v39 < 9)
              goto LABEL_61;
            v40 = (((unint64_t)v39 >> 3) - 2) >> 1;
            v41 = (unsigned int **)&v7[v40];
            result = (unsigned int *)(*a4)(v41, v25);
            if (!(_DWORD)result)
              goto LABEL_61;
            v42 = (unsigned int *)*v25;
            *v25 = 0;
            v56 = v42;
            while (1)
            {
              v43 = v41;
              v44 = *v41;
              *v41 = 0;
              v45 = (unsigned int *)*v25;
              *v25 = (WTF *)v44;
              if (!v45)
                goto LABEL_46;
              do
              {
                v46 = __ldaxr(v45);
                v47 = v46 - 1;
              }
              while (__stlxr(v47, v45));
              if (!v47)
              {
                atomic_store(1u, v45);
                WTF::fastFree((WTF *)v45, a2);
                if (!v40)
                {
LABEL_50:
                  v48 = v56;
                  v56 = 0;
                  result = *v43;
                  *v43 = v48;
                  if (result)
                  {
                    do
                    {
                      v49 = __ldaxr(result);
                      v50 = v49 - 1;
                    }
                    while (__stlxr(v50, result));
                    if (!v50)
                    {
                      atomic_store(1u, result);
                      WTF::fastFree((WTF *)result, a2);
                    }
                    result = v56;
                    v56 = 0;
                    if (result)
                    {
                      do
                      {
                        v51 = __ldaxr(result);
                        v52 = --v51 == 0;
                      }
                      while (__stlxr(v51, result));
                      goto LABEL_59;
                    }
                  }
                  goto LABEL_61;
                }
              }
              else
              {
LABEL_46:
                if (!v40)
                  goto LABEL_50;
              }
              v40 = (v40 - 1) >> 1;
              v41 = (unsigned int **)&v7[v40];
              v25 = (WTF **)v43;
              if (((*a4)(v41, (WTF **)&v56) & 1) == 0)
                goto LABEL_50;
            }
          }
          result = (unsigned int *)*v25;
          *v25 = v55;
          if (result)
          {
            do
            {
              v53 = __ldaxr(result);
              v52 = --v53 == 0;
            }
            while (__stlxr(v53, result));
LABEL_59:
            if (v52)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
            }
          }
LABEL_61:
          if ((unint64_t)v22-- > 2)
            continue;
        }
        return result;
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*>(uint64_t result, uint64_t (**a2)(unsigned int **, WTF **), uint64_t a3, WTF **a4)
{
  WTF *v4;
  WTF *v5;
  unint64_t v6;
  WTF **v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  WTF *v31[13];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v31[11] = v4;
    v31[12] = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v12 = ((uint64_t)a4 - result) >> 2;
      v13 = v12 + 1;
      v14 = (unsigned int **)(result + 8 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, (WTF **)v14 + 1))
      {
        ++v14;
        v13 = v15;
      }
      result = (*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v17 = *v7;
        *v7 = 0;
        v31[0] = v17;
        do
        {
          v18 = v14;
          v19 = *v14;
          *v14 = 0;
          v20 = (unsigned int *)*v7;
          *v7 = (WTF *)v19;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, v16);
            }
          }
          if (v9 < v13)
            break;
          v23 = (2 * v13) | 1;
          v14 = (unsigned int **)(v8 + 8 * v23);
          v24 = 2 * v13 + 2;
          if (v24 < a3 && (*a2)((unsigned int **)(v8 + 8 * v23), (WTF **)v14 + 1))
          {
            ++v14;
            v23 = v24;
          }
          v7 = (WTF **)v18;
          v13 = v23;
        }
        while (!(*a2)(v14, v31));
        v25 = v31[0];
        v31[0] = 0;
        v26 = *v18;
        *v18 = (unsigned int *)v25;
        if (v26)
        {
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v16);
          }
        }
        result = (uint64_t)v31[0];
        v31[0] = 0;
        if (result)
        {
          do
          {
            v29 = __ldaxr((unsigned int *)result);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, (unsigned int *)result));
          if (!v30)
          {
            atomic_store(1u, (unsigned int *)result);
            return WTF::fastFree((WTF *)result, v16);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBox>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  unsigned int v32;

  v4 = result;
  v6 = *(_DWORD *)(result + 28);
  v7 = *(_DWORD *)(result + 24) + 1;
  *(_DWORD *)(result + 24) = v7;
  if (v7 > v6)
  {
    v29 = *(WTF **)(result + 8);
    if (v29)
    {
      do
      {
        v30 = (WTF *)*((_QWORD *)v29 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v29 + 8))
          result = WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)v4, (void *)v4, v29);
        v29 = v30;
      }
      while (v30);
    }
    *(_DWORD *)(v4 + 24) = 0;
    v31 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      LODWORD(v31) = *(_DWORD *)(v31 - 12);
      if (v31 > 0x7FFFFFFE)
        LODWORD(v31) = 0x7FFFFFFF;
    }
    *(_DWORD *)(v4 + 28) = 2 * v31;
  }
  v8 = a2[1];
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a2;
    result = a2[1];
    a2[1] = v8;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        result = WTF::fastFree((WTF *)result, a2);
        v8 = a2[1];
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  *(_DWORD *)v8 += 2;
  v9 = *(_QWORD *)v4;
  if (*(_QWORD *)v4
    || (result = (uint64_t)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::rehash((uint64_t *)v4, 8u, 0), (v9 = *(_QWORD *)v4) != 0))
  {
    v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = 0;
  v12 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v10;
    v18 = (_QWORD *)(v9 + 8 * v17);
    v19 = (_QWORD *)*v18;
    if (!*v18)
      break;
    if (v19 != (_QWORD *)-1)
    {
      v18 = v11;
      if (*v19 == v8)
      {
        *(_QWORD *)a3 = v4;
        *(_QWORD *)(a3 + 8) = v19;
        *(_BYTE *)(a3 + 16) = 0;
        if (*(_DWORD *)v8 == 1)
          result = WTF::fastFree((WTF *)v8, a2);
        else
          --*(_DWORD *)v8;
        goto LABEL_12;
      }
    }
    v15 = i + v17;
    v11 = v18;
  }
  if (v11)
  {
    *v11 = 0;
    --*(_DWORD *)(*(_QWORD *)v4 - 16);
    v18 = v11;
  }
  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v8;
  *v18 = result;
  v20 = *(_QWORD *)v4;
  if (*(_QWORD *)v4)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *(_QWORD *)v4;
  if (*(_QWORD *)v4)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_22;
    goto LABEL_44;
  }
  if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v32 = 8;
      goto LABEL_47;
    }
LABEL_44:
    v32 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_47:
    v18 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::rehash((uint64_t *)v4, v32, (_QWORD **)v18);
    result = *v18;
  }
LABEL_22:
  v26 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(result + 8) = v26;
  *(_QWORD *)(result + 16) = 0;
  if (v26)
    v27 = (_QWORD *)(v26 + 16);
  else
    v27 = (_QWORD *)(v4 + 8);
  *v27 = result;
  *(_QWORD *)(v4 + 16) = result;
  v28 = (_QWORD *)*v18;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v28;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_12:
  if (*(_DWORD *)v8 == 1)
    return WTF::fastFree((WTF *)v8, a2);
  --*(_DWORD *)v8;
  return result;
}

uint64_t WebCore::marginAndBorderAndPaddingForEdge(uint64_t a1, int a2, int a3)
{
  uint64_t (**v4)(_QWORD, _QWORD);
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  v4 = *(uint64_t (***)(_QWORD, _QWORD))a1;
  if (a2)
  {
    if (a3)
    {
      v5 = v4[139](a1, 0);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
      if (__OFADD__(v5, v6))
        v7 = (v5 >> 31) + 0x7FFFFFFF;
      else
        v7 = v5 + v6;
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    }
    else
    {
      v11 = v4[140](a1, 0);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
      if (__OFADD__(v11, v12))
        v7 = (v11 >> 31) + 0x7FFFFFFF;
      else
        v7 = v11 + v12;
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
    }
  }
  else if (a3)
  {
    v9 = v4[141](a1, 0);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
    if (__OFADD__(v9, v10))
      v7 = (v9 >> 31) + 0x7FFFFFFF;
    else
      v7 = v9 + v10;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  }
  else
  {
    v13 = v4[142](a1, 0);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
    if (__OFADD__(v13, v14))
      v7 = (v13 >> 31) + 0x7FFFFFFF;
    else
      v7 = v13 + v14;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
  }
  if (__OFADD__(v7, v8))
    return (v7 >> 31) + 0x7FFFFFFF;
  else
    return v7 + v8;
}

uint64_t *WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int i;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  unsigned int v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = ~(*a2 << 32) + *a2;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v7;
    v15 = (_QWORD *)(v6 + 8 * (v12 & v7));
    v16 = (_QWORD *)*v15;
    if (!*v15)
      break;
    if (v16 != (_QWORD *)-1)
    {
      v15 = v8;
      if (*v16 == *a2)
      {
        v17 = 0;
        goto LABEL_9;
      }
    }
    v12 = i + v14;
    v8 = v15;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*v4 - 16);
    v15 = v8;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v18 = *a2;
  *a2 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v18;
  *v15 = result;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_18;
    goto LABEL_27;
  }
  if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v27 = 8;
      goto LABEL_30;
    }
LABEL_27:
    v27 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_30:
    v15 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::rehash(v4, v27, (_QWORD **)v15);
    result = (uint64_t *)*v15;
  }
LABEL_18:
  v25 = v4[2];
  result[1] = v25;
  result[2] = 0;
  if (v25)
    v26 = (uint64_t **)(v25 + 16);
  else
    v26 = (uint64_t **)(v4 + 1);
  *v26 = result;
  v4[2] = (uint64_t)result;
  v16 = (_QWORD *)*v15;
  v17 = 1;
LABEL_9:
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

BOOL WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove(uint64_t *a1, void *a2, WTF *this)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  WTF *v23;

  if (this)
  {
    v5 = *a1;
    if (*a1)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = ~(*(_QWORD *)this << 32) + *(_QWORD *)this;
      v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
      v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
      v10 = v6 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
      for (i = 1; ; ++i)
      {
        v12 = v10;
        v13 = *(_QWORD **)(v5 + 8 * v10);
        if (v13 != (_QWORD *)-1)
        {
          if (!v13)
            goto LABEL_16;
          if (*v13 == *(_QWORD *)this)
            break;
        }
        v10 = (v12 + i) & v6;
      }
      if (*(_DWORD *)(v5 - 4) != (_DWORD)v12)
      {
        *(_QWORD *)(v5 + 8 * v12) = -1;
        ++*(_DWORD *)(*a1 - 16);
        v14 = *a1;
        v15 = *a1 ? *(_DWORD *)(v14 - 12) - 1 : -1;
        *(_DWORD *)(v14 - 12) = v15;
        v16 = *a1;
        if (*a1)
        {
          v17 = 6 * *(_DWORD *)(v16 - 12);
          v18 = *(_DWORD *)(v16 - 4);
          if (v17 < v18 && v18 >= 9)
            WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::rehash(a1, v18 >> 1, 0);
        }
      }
    }
LABEL_16:
    v20 = *((_QWORD *)this + 1);
    v21 = *((_QWORD *)this + 2);
    if (v20)
    {
      *(_QWORD *)(v20 + 16) = v21;
      v21 = *((_QWORD *)this + 2);
    }
    else
    {
      a1[1] = v21;
    }
    if (v21)
      v22 = (_QWORD *)(v21 + 8);
    else
      v22 = a1 + 2;
    *v22 = v20;
    v23 = *(WTF **)this;
    *(_QWORD *)this = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::fastFree(v23, a2);
      else
        --*(_DWORD *)v23;
    }
    WTF::fastFree(this, a2);
  }
  return this != 0;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD **)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = ~(*v14 << 32) + *v14;
        v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
        v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
        v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Vector<WebCore::GridItemWithSpan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::GridItemWithSpan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v13 = 24 * v9;
      v14 = v5;
      do
      {
        v15 = *(_OWORD *)v14;
        *(_QWORD *)(v11 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v11 = v15;
        v11 += 24;
        v14 = (WTF *)((char *)v14 + 24);
        v13 -= 24;
      }
      while (v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::GridItemWithSpan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  __int128 v12;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = *(unsigned int *)(result + 12);
      v8 = 24 * v4;
      result = WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v5 = result;
      if ((_DWORD)v7)
      {
        v10 = 24 * v7;
        v11 = v6;
        do
        {
          v12 = *(_OWORD *)v11;
          *(_QWORD *)(result + 16) = *((_QWORD *)v11 + 2);
          *(_OWORD *)result = v12;
          result += 24;
          v11 = (WTF *)((char *)v11 + 24);
          v10 -= 24;
        }
        while (v10);
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *,false>(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 *v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  __n128 *v25;
  __n128 *v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  __int128 *v38;
  __n128 v39;
  char v40;
  BOOL v41;
  __n128 v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __n128 v47;
  __n128 v48;
  __int128 v49;
  __n128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_QWORD *)result != a2)
  {
    v2 = (_QWORD *)(result + 24);
    if ((_QWORD *)(result + 24) != a2)
    {
      v3 = 0;
      v4 = (_QWORD *)result;
      do
      {
        v5 = v2;
        v7 = *((_DWORD *)v4 + 8);
        v6 = *((_DWORD *)v4 + 9);
        if (v6 - v7 < (*((_DWORD *)v4 + 3) - *((_DWORD *)v4 + 2)))
        {
          v8 = *v5;
          v9 = v4[5];
          v10 = v3;
          while (1)
          {
            v11 = result + v10;
            *(_OWORD *)(v11 + 24) = *(_OWORD *)(result + v10);
            *(_DWORD *)(v11 + 40) = *(_DWORD *)(result + v10 + 16);
            if (!v10)
              break;
            v10 -= 24;
            if (v6 - v7 >= (*(_DWORD *)(v11 - 12) - *(_DWORD *)(v11 - 16)))
            {
              v12 = result + v10 + 24;
              goto LABEL_10;
            }
          }
          v12 = result;
LABEL_10:
          *(_QWORD *)v12 = v8;
          *(_DWORD *)(v12 + 8) = v7;
          *(_DWORD *)(v12 + 12) = v6;
          *(_DWORD *)(v12 + 16) = v9;
        }
        v2 = v5 + 3;
        v3 += 24;
        v4 = v5;
      }
      while (v5 + 3 != a2);
    }
  }
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v13;
  unsigned int v14;

  if (result != a2)
  {
    v2 = result + 3;
    if (result + 3 != a2)
    {
      v3 = -2;
      v4 = 1;
      v5 = result;
      while (1)
      {
        v7 = *((_DWORD *)v5 + 8);
        v6 = *((_DWORD *)v5 + 9);
        if (v6 - v7 < (*((_DWORD *)v5 + 3) - *((_DWORD *)v5 + 2)))
          break;
LABEL_9:
        v5 = &result[3 * v4++];
        v2 += 3;
        --v3;
        if (v2 == a2)
          return result;
      }
      v8 = *v2;
      v9 = v5[5];
      v10 = v3;
      v11 = v2;
      while (1)
      {
        *(_OWORD *)v11 = *(_OWORD *)(v11 - 3);
        *((_DWORD *)v11 + 4) = *((_DWORD *)v11 - 2);
        if (__CFADD__(v10++, 1))
          break;
        v13 = v11 - 3;
        v14 = *((_DWORD *)v11 - 9) - *((_DWORD *)v11 - 10);
        v11 -= 3;
        if (v6 - v7 >= v14)
        {
          *v13 = v8;
          *((_DWORD *)v13 + 2) = v7;
          *((_DWORD *)v13 + 3) = v6;
          *((_DWORD *)v13 + 4) = v9;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
  return result;
}

__int128 *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>(__int128 *result, __int128 *a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  int v17;

  v3 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)a3 + 3) - *((_DWORD *)a3 + 2);
  if (v3 >= *((_DWORD *)result + 3) - *((_DWORD *)result + 2))
  {
    if (v4 < v3)
    {
      v8 = *a2;
      v9 = *((_QWORD *)a2 + 2);
      v10 = *((_DWORD *)a3 + 4);
      *a2 = *a3;
      *((_DWORD *)a2 + 4) = v10;
      *((_DWORD *)a3 + 4) = v9;
      *a3 = v8;
      if (*((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 2) < (*((_DWORD *)result + 3) - *((_DWORD *)result + 2)))
      {
        v11 = *result;
        v12 = *((_QWORD *)result + 2);
        v13 = *((_DWORD *)a2 + 4);
        *result = *a2;
        *((_DWORD *)result + 4) = v13;
        *((_DWORD *)a2 + 4) = v12;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *result;
      v15 = *((_QWORD *)result + 2);
      v16 = *((_DWORD *)a2 + 4);
      *result = *a2;
      *((_DWORD *)result + 4) = v16;
      *((_DWORD *)a2 + 4) = v15;
      *a2 = v14;
      if (*((_DWORD *)a3 + 3) - *((_DWORD *)a3 + 2) >= (*((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 2)))
        return result;
      v5 = *a2;
      v6 = *((_QWORD *)a2 + 2);
      v17 = *((_DWORD *)a3 + 4);
      *a2 = *a3;
      *((_DWORD *)a2 + 4) = v17;
    }
    else
    {
      v5 = *result;
      v6 = *((_QWORD *)result + 2);
      v7 = *((_DWORD *)a3 + 4);
      *result = *a3;
      *((_DWORD *)result + 4) = v7;
    }
    *((_DWORD *)a3 + 4) = v6;
    *a3 = v5;
  }
  return result;
}

__int128 *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::GridItemWithSpan *,std::__less<void,void> &>(__int128 *result, __int128 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  __int128 *v9;
  __int128 *v10;
  unsigned int v11;
  __int128 *v12;
  __int128 *v13;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v2 = *(_QWORD *)result;
  v3 = *((_DWORD *)result + 2);
  v4 = *((_DWORD *)result + 3);
  v5 = *((_QWORD *)result + 2);
  v6 = v4 - v3;
  if (v4 - v3 < (*((_DWORD *)a2 - 3) - *((_DWORD *)a2 - 4)))
  {
    v7 = (uint64_t *)result + 3;
    while (v7 != (uint64_t *)a2)
    {
      v8 = *((_DWORD *)v7 + 3) - *((_DWORD *)v7 + 2);
      v7 += 3;
      if (v6 < v8)
      {
        v9 = (__int128 *)(v7 - 3);
        goto LABEL_9;
      }
    }
    goto LABEL_24;
  }
  v10 = (__int128 *)((char *)result + 24);
  do
  {
    v9 = v10;
    if (v10 >= a2)
      break;
    v11 = *((_DWORD *)v10 + 3) - *((_DWORD *)v10 + 2);
    v10 = (__int128 *)((char *)v10 + 24);
  }
  while (v6 >= v11);
LABEL_9:
  v12 = a2;
  if (v9 < a2)
  {
    v13 = a2;
    while (v13 != result)
    {
      v12 = (__int128 *)((char *)v13 - 24);
      v14 = *((_DWORD *)v13 - 3) - *((_DWORD *)v13 - 4);
      v13 = (__int128 *)((char *)v13 - 24);
      if (v6 >= v14)
        goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_13:
  if (v9 < v12)
  {
LABEL_14:
    v22 = *((_QWORD *)v9 + 2);
    v21 = *v9;
    v15 = *v12;
    *((_DWORD *)v9 + 4) = *((_DWORD *)v12 + 4);
    *v9 = v15;
    v16 = (uint64_t)v9 + 24;
    *((_DWORD *)v12 + 4) = v22;
    *v12 = v21;
    while ((__int128 *)v16 != a2)
    {
      v17 = *(_DWORD *)(v16 + 12) - *(_DWORD *)(v16 + 8);
      v16 += 24;
      if (v6 < v17)
      {
        v9 = (__int128 *)(v16 - 24);
        while (v12 != result)
        {
          v18 = (__int128 *)((char *)v12 - 24);
          v19 = *((_DWORD *)v12 - 3) - *((_DWORD *)v12 - 4);
          v12 = (__int128 *)((char *)v12 - 24);
          if (v6 >= v19)
          {
            v12 = v18;
            if (v9 < v18)
              goto LABEL_14;
            goto LABEL_21;
          }
        }
        break;
      }
    }
LABEL_24:
    __break(1u);
    return result;
  }
LABEL_21:
  if ((__int128 *)((char *)v9 - 24) != result)
  {
    v20 = *(__int128 *)((char *)v9 - 24);
    *((_DWORD *)result + 4) = *((_DWORD *)v9 - 2);
    *result = v20;
  }
  *((_QWORD *)v9 - 3) = v2;
  *((_DWORD *)v9 - 4) = v3;
  *((_DWORD *)v9 - 3) = v4;
  *((_DWORD *)v9 - 2) = v5;
  return v9;
}

__int128 *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::GridItemWithSpan *,std::__less<void,void> &>(__int128 *result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  __int128 *v10;
  __int128 *v11;
  unsigned int v12;
  unsigned int v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  __int128 *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v2 = 0;
  v3 = *(_QWORD *)result;
  v4 = *((_DWORD *)result + 2);
  v5 = *((_DWORD *)result + 3);
  v6 = *((_QWORD *)result + 2);
  v7 = v5 - v4;
  do
  {
    if ((__int128 *)((char *)result + v2 + 24) == a2)
      goto LABEL_23;
    v8 = *(_DWORD *)((char *)result + v2 + 36) - *(_DWORD *)((char *)result + v2 + 32);
    v2 += 24;
  }
  while (v8 < v7);
  v9 = (uint64_t *)((char *)result + v2);
  v10 = a2;
  if (v2 != 24)
  {
    while (v10 != result)
    {
      v11 = (__int128 *)((char *)v10 - 24);
      v12 = *((_DWORD *)v10 - 3) - *((_DWORD *)v10 - 4);
      v10 = (__int128 *)((char *)v10 - 24);
      if (v12 < v7)
        goto LABEL_11;
    }
    goto LABEL_23;
  }
  while (v9 < (uint64_t *)v10)
  {
    v11 = (__int128 *)((char *)v10 - 24);
    v13 = *((_DWORD *)v10 - 3) - *((_DWORD *)v10 - 4);
    v10 = (__int128 *)((char *)v10 - 24);
    if (v13 < v7)
      goto LABEL_11;
  }
  v11 = v10;
LABEL_11:
  v14 = (__int128 *)v9;
  if (v9 < (uint64_t *)v11)
  {
    v15 = v11;
LABEL_13:
    v23 = *((_QWORD *)v14 + 2);
    v22 = *v14;
    v16 = *v15;
    *((_DWORD *)v14 + 4) = *((_DWORD *)v15 + 4);
    *v14 = v16;
    v17 = (uint64_t)v14 + 24;
    *((_DWORD *)v15 + 4) = v23;
    *v15 = v22;
    while ((__int128 *)v17 != a2)
    {
      v18 = *(_DWORD *)(v17 + 12) - *(_DWORD *)(v17 + 8);
      v17 += 24;
      if (v18 >= v7)
      {
        v14 = (__int128 *)(v17 - 24);
        while (v15 != result)
        {
          v19 = (__int128 *)((char *)v15 - 24);
          v20 = *((_DWORD *)v15 - 3) - *((_DWORD *)v15 - 4);
          v15 = (__int128 *)((char *)v15 - 24);
          if (v20 < v7)
          {
            v15 = v19;
            if (v14 < v19)
              goto LABEL_13;
            goto LABEL_20;
          }
        }
        break;
      }
    }
LABEL_23:
    __break(1u);
    return result;
  }
LABEL_20:
  if ((__int128 *)((char *)v14 - 24) != result)
  {
    v21 = *(__int128 *)((char *)v14 - 24);
    *((_DWORD *)result + 4) = *((_DWORD *)v14 - 2);
    *result = v21;
  }
  *((_QWORD *)v14 - 3) = v3;
  *((_DWORD *)v14 - 4) = v4;
  *((_DWORD *)v14 - 3) = v5;
  *((_DWORD *)v14 - 2) = v6;
  return (__int128 *)((char *)v14 - 24);
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  __n128 v7;
  uint64_t v8;
  int v9;
  __n128 *v10;
  __n128 *v11;
  unsigned int v12;
  unsigned int v13;
  __n128 v14;
  uint64_t v15;
  int v16;
  __n128 *v17;
  __n128 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  __n128 v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  __n128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int32 v56;
  __int32 v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 12) - *(_DWORD *)(a2 - 16) < (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)))
      {
        v7 = *(__n128 *)a1;
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_DWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(a1 + 16) = v9;
        *(_DWORD *)(a2 - 8) = v8;
        *(__n128 *)(a2 - 24) = v7;
      }
      return result;
    case 3uLL:
      v10 = (__n128 *)(a1 + 24);
      v11 = (__n128 *)(a2 - 24);
      v12 = *(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 32);
      v13 = *(_DWORD *)(a2 - 12) - *(_DWORD *)(a2 - 16);
      if (v12 >= *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8))
      {
        if (v13 < v12)
        {
          v36 = *v10;
          v37 = *(_QWORD *)(a1 + 40);
          v38 = *(_DWORD *)(a2 - 8);
          *v10 = *v11;
          *(_DWORD *)(a1 + 40) = v38;
          *(_DWORD *)(a2 - 8) = v37;
          *v11 = v36;
          if (*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 32) < (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)))
          {
            v39 = *(_QWORD *)(a1 + 16);
            v40 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *v10 = v40;
            *(_DWORD *)(a1 + 40) = v39;
          }
        }
      }
      else
      {
        if (v13 >= v12)
        {
          v45 = *(_QWORD *)(a1 + 16);
          v46 = *(__n128 *)a1;
          *(__n128 *)a1 = *v10;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
          *v10 = v46;
          *(_DWORD *)(a1 + 40) = v45;
          if (*(_DWORD *)(a2 - 12) - *(_DWORD *)(a2 - 16) >= (*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 32)))
            return result;
          v14 = *v10;
          v47 = *(_QWORD *)(a1 + 40);
          v48 = *(_DWORD *)(a2 - 8);
          *v10 = *v11;
          *(_DWORD *)(a1 + 40) = v48;
          *(_DWORD *)(a2 - 8) = v47;
        }
        else
        {
          v14 = *(__n128 *)a1;
          v15 = *(_QWORD *)(a1 + 16);
          v16 = *(_DWORD *)(a2 - 8);
          *(__n128 *)a1 = *v11;
          *(_DWORD *)(a1 + 16) = v16;
          *(_DWORD *)(a2 - 8) = v15;
        }
        *v11 = v14;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      v24 = (__n128 *)(a1 + 24);
      v25 = (__n128 *)(a1 + 48);
      v26 = (__n128 *)(a1 + 72);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a3);
      if (*(_DWORD *)(a2 - 12) - *(_DWORD *)(a2 - 16) < (*(_DWORD *)(a1 + 84) - *(_DWORD *)(a1 + 80)))
      {
        v27 = *v26;
        v28 = *(_QWORD *)(a1 + 88);
        v29 = *(_DWORD *)(a2 - 8);
        *v26 = *(__n128 *)(a2 - 24);
        *(_DWORD *)(a1 + 88) = v29;
        *(_DWORD *)(a2 - 8) = v28;
        *(__n128 *)(a2 - 24) = v27;
        if (*(_DWORD *)(a1 + 84) - *(_DWORD *)(a1 + 80) < (*(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 56)))
        {
          v30 = *(_QWORD *)(a1 + 64);
          v31 = *v25;
          *v25 = *v26;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 88);
          *v26 = v31;
          *(_DWORD *)(a1 + 88) = v30;
          if (*(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 56) < (*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 32)))
          {
            v32 = *(_QWORD *)(a1 + 40);
            v33 = *v24;
            *v24 = *v25;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
            *v25 = v33;
            *(_DWORD *)(a1 + 64) = v32;
            if (*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 32) < (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)))
            {
              v34 = *(_QWORD *)(a1 + 16);
              v35 = *(__n128 *)a1;
              *(__n128 *)a1 = *v24;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
              *v24 = v35;
              *(_DWORD *)(a1 + 40) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v17 = (__n128 *)(a1 + 48);
      v18 = (__n128 *)(a1 + 24);
      v19 = *(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 32);
      v20 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8);
      v21 = *(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 56);
      if (v19 >= v20)
      {
        if (v21 < v19)
        {
          v41 = *(_QWORD *)(a1 + 40);
          v42 = *v18;
          *v18 = *v17;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *v17 = v42;
          *(_DWORD *)(a1 + 64) = v41;
          if (*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 32) < v20)
          {
            v43 = *(_QWORD *)(a1 + 16);
            v44 = *(__n128 *)a1;
            *(__n128 *)a1 = *v18;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *v18 = v44;
            *(_DWORD *)(a1 + 40) = v43;
          }
        }
      }
      else if (v21 >= v19)
      {
        v49 = *(_QWORD *)(a1 + 16);
        v50 = *(__n128 *)a1;
        *(__n128 *)a1 = *v18;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
        *v18 = v50;
        *(_DWORD *)(a1 + 40) = v49;
        if (v21 < *(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 32))
        {
          v51 = *(_QWORD *)(a1 + 40);
          v52 = *v18;
          *v18 = *v17;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *v17 = v52;
          *(_DWORD *)(a1 + 64) = v51;
        }
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 16);
        v23 = *(__n128 *)a1;
        *(__n128 *)a1 = *v17;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 64);
        *v17 = v23;
        *(_DWORD *)(a1 + 64) = v22;
      }
      v53 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v54 = 0;
      v55 = 0;
      break;
  }
  while (1)
  {
    v56 = v17->n128_i32[2];
    v57 = v17->n128_i32[3];
    v59 = *(_DWORD *)(v53 + 8);
    v58 = *(_DWORD *)(v53 + 12);
    if (v58 - v59 < (v57 - v56))
    {
      v60 = *(_QWORD *)v53;
      v61 = *(_QWORD *)(v53 + 16);
      v62 = v54;
      while (1)
      {
        v63 = a1 + v62;
        *(_OWORD *)(v63 + 72) = *(_OWORD *)(a1 + v62 + 48);
        *(_DWORD *)(v63 + 88) = *(_DWORD *)(a1 + v62 + 64);
        if (v62 == -48)
          break;
        v62 -= 24;
        if (v58 - v59 >= (*(_DWORD *)(v63 + 36) - *(_DWORD *)(v63 + 32)))
        {
          v64 = a1 + v62 + 72;
          goto LABEL_35;
        }
      }
      v64 = a1;
LABEL_35:
      *(_QWORD *)v64 = v60;
      *(_DWORD *)(v64 + 8) = v59;
      *(_DWORD *)(v64 + 12) = v58;
      *(_DWORD *)(v64 + 16) = v61;
      if (++v55 == 8)
        return v53 + 24 == a2;
    }
    v17 = (__n128 *)v53;
    v54 += 24;
    v53 += 24;
    if (v53 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned __int32 v8;
  unint64_t v9;
  unsigned __int32 v10;
  unint64_t v11;
  unsigned __int32 v12;
  unint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  unint64_t v16;
  unsigned __int32 v17;
  unint64_t v18;
  unsigned __int32 v19;
  unint64_t v20;
  unsigned __int32 v21;

  v5 = a2->n128_u32[3] - a2->n128_u32[2];
  v6 = a3->n128_u32[3] - a3->n128_u32[2];
  if (v5 >= a1->n128_u32[3] - a1->n128_u32[2])
  {
    if (v6 < v5)
    {
      result = *a2;
      v9 = a2[1].n128_u64[0];
      v10 = a3[1].n128_u32[0];
      *a2 = *a3;
      a2[1].n128_u32[0] = v10;
      a3[1].n128_u32[0] = v9;
      *a3 = result;
      if (a2->n128_u32[3] - a2->n128_u32[2] < a1->n128_u32[3] - a1->n128_u32[2])
      {
        result = *a1;
        v11 = a1[1].n128_u64[0];
        v12 = a2[1].n128_u32[0];
        *a1 = *a2;
        a1[1].n128_u32[0] = v12;
        a2[1].n128_u32[0] = v11;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      result = *a1;
      v7 = a1[1].n128_u64[0];
      v8 = a3[1].n128_u32[0];
      *a1 = *a3;
      a1[1].n128_u32[0] = v8;
LABEL_9:
      a3[1].n128_u32[0] = v7;
      *a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    v13 = a1[1].n128_u64[0];
    v14 = a2[1].n128_u32[0];
    *a1 = *a2;
    a1[1].n128_u32[0] = v14;
    a2[1].n128_u32[0] = v13;
    *a2 = result;
    if (a3->n128_u32[3] - a3->n128_u32[2] < a2->n128_u32[3] - a2->n128_u32[2])
    {
      result = *a2;
      v7 = a2[1].n128_u64[0];
      v15 = a3[1].n128_u32[0];
      *a2 = *a3;
      a2[1].n128_u32[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4->n128_u32[3] - a4->n128_u32[2] < a3->n128_u32[3] - a3->n128_u32[2])
  {
    result = *a3;
    v16 = a3[1].n128_u64[0];
    v17 = a4[1].n128_u32[0];
    *a3 = *a4;
    a3[1].n128_u32[0] = v17;
    a4[1].n128_u32[0] = v16;
    *a4 = result;
    if (a3->n128_u32[3] - a3->n128_u32[2] < a2->n128_u32[3] - a2->n128_u32[2])
    {
      result = *a2;
      v18 = a2[1].n128_u64[0];
      v19 = a3[1].n128_u32[0];
      *a2 = *a3;
      a2[1].n128_u32[0] = v19;
      a3[1].n128_u32[0] = v18;
      *a3 = result;
      if (a2->n128_u32[3] - a2->n128_u32[2] < a1->n128_u32[3] - a1->n128_u32[2])
      {
        result = *a1;
        v20 = a1[1].n128_u64[0];
        v21 = a2[1].n128_u32[0];
        *a1 = *a2;
        a1[1].n128_u32[0] = v21;
        a2[1].n128_u32[0] = v20;
        *a2 = result;
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *,WebCore::GridItemWithSpan *>(uint64_t result, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  __int128 *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int64_t v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  __int128 v65;
  __int128 v67;
  uint64_t v68;

  if ((__int128 *)result != a2)
  {
    v3 = (uint64_t)a2 - result;
    v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - result) >> 3);
    if ((uint64_t)a2 - result >= 25 && (unint64_t)v3 >= 0x30)
    {
      v5 = (unint64_t)(v4 - 2) >> 1;
      v6 = v5;
      do
      {
        v7 = v6;
        if (v5 >= v6)
        {
          v8 = (2 * v6) | 1;
          v9 = (__int128 *)(result + 24 * v8);
          if (2 * v7 + 2 < v4)
          {
            v10 = *(_DWORD *)(result + 24 * v8 + 12) - *(_DWORD *)(result + 24 * v8 + 8);
            v11 = *((_DWORD *)v9 + 9) - *((_DWORD *)v9 + 8);
            v9 = (__int128 *)((char *)v9 + 24 * (v10 < v11));
            if (v10 < v11)
              v8 = 2 * v7 + 2;
          }
          v12 = (uint64_t *)(result + 24 * v7);
          v13 = *((_DWORD *)v12 + 2);
          v14 = *((_DWORD *)v12 + 3);
          if (*((_DWORD *)v9 + 3) - *((_DWORD *)v9 + 2) >= (v14 - v13))
          {
            v15 = *v12;
            v16 = v12[2];
            do
            {
              v17 = v12;
              v12 = (uint64_t *)v9;
              v18 = *v9;
              *((_DWORD *)v17 + 4) = *((_DWORD *)v9 + 4);
              *(_OWORD *)v17 = v18;
              if (v5 < v8)
                break;
              v19 = (2 * v8) | 1;
              v9 = (__int128 *)(result + 24 * v19);
              v20 = 2 * v8 + 2;
              if (v20 < v4)
              {
                v21 = *(_DWORD *)(result + 24 * v19 + 12) - *(_DWORD *)(result + 24 * v19 + 8);
                v22 = *((_DWORD *)v9 + 9) - *((_DWORD *)v9 + 8);
                v9 = (__int128 *)((char *)v9 + 24 * (v21 < v22));
                if (v21 < v22)
                  v19 = v20;
              }
              v8 = v19;
            }
            while (*((_DWORD *)v9 + 3) - *((_DWORD *)v9 + 2) >= (v14 - v13));
            *v12 = v15;
            *((_DWORD *)v12 + 2) = v13;
            *((_DWORD *)v12 + 3) = v14;
            *((_DWORD *)v12 + 4) = v16;
          }
        }
        v6 = v7 - 1;
      }
      while (v7);
    }
    if (a2 != a3)
    {
      if (v3 >= 48)
      {
        v27 = a2;
        do
        {
          if (*((_DWORD *)v27 + 3) - *((_DWORD *)v27 + 2) < (*(_DWORD *)(result + 12)
                                                                          - *(_DWORD *)(result + 8)))
          {
            v28 = *v27;
            v29 = *((_QWORD *)v27 + 2);
            v30 = *(_DWORD *)(result + 16);
            *v27 = *(_OWORD *)result;
            *((_DWORD *)v27 + 4) = v30;
            *(_DWORD *)(result + 16) = v29;
            *(_OWORD *)result = v28;
            if ((unint64_t)v4 < 3)
            {
              v34 = result + 24;
              v35 = 1;
            }
            else
            {
              v31 = *(_DWORD *)(result + 36) - *(_DWORD *)(result + 32);
              v32 = *(_DWORD *)(result + 60) - *(_DWORD *)(result + 56);
              v33 = v31 >= v32;
              v34 = result + 24 + 24 * (v31 < v32);
              v35 = v33 ? 1 : 2;
            }
            v36 = *(_DWORD *)(result + 8);
            v37 = *(_DWORD *)(result + 12);
            if (*(_DWORD *)(v34 + 12) - *(_DWORD *)(v34 + 8) >= (v37 - v36))
            {
              v38 = *(_QWORD *)result;
              v39 = *(_QWORD *)(result + 16);
              v40 = result;
              do
              {
                v41 = v40;
                v40 = v34;
                v42 = *(_OWORD *)v34;
                *(_DWORD *)(v41 + 16) = *(_DWORD *)(v34 + 16);
                *(_OWORD *)v41 = v42;
                if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v35)
                  break;
                v43 = (2 * v35) | 1;
                v34 = result + 24 * v43;
                v44 = 2 * v35 + 2;
                if (v44 < v4)
                {
                  v45 = *(_DWORD *)(result + 24 * v43 + 12) - *(_DWORD *)(result + 24 * v43 + 8);
                  v46 = *(_DWORD *)(v34 + 36) - *(_DWORD *)(v34 + 32);
                  v34 += 24 * (v45 < v46);
                  if (v45 < v46)
                    v43 = v44;
                }
                v35 = v43;
              }
              while (*(_DWORD *)(v34 + 12) - *(_DWORD *)(v34 + 8) >= (v37 - v36));
              *(_QWORD *)v40 = v38;
              *(_DWORD *)(v40 + 8) = v36;
              *(_DWORD *)(v40 + 12) = v37;
              *(_DWORD *)(v40 + 16) = v39;
            }
          }
          v27 = (__int128 *)((char *)v27 + 24);
        }
        while (v27 != a3);
      }
      else
      {
        v23 = a2;
        do
        {
          if (*((_DWORD *)v23 + 3) - *((_DWORD *)v23 + 2) < (*(_DWORD *)(result + 12)
                                                                          - *(_DWORD *)(result + 8)))
          {
            v24 = *v23;
            v25 = *((_QWORD *)v23 + 2);
            v26 = *(_DWORD *)(result + 16);
            *v23 = *(_OWORD *)result;
            *((_DWORD *)v23 + 4) = v26;
            *(_DWORD *)(result + 16) = v25;
            *(_OWORD *)result = v24;
          }
          v23 = (__int128 *)((char *)v23 + 24);
        }
        while (v23 != a3);
      }
    }
    if (v3 >= 25)
    {
      v47 = v3 / 0x18uLL;
      do
      {
        v48 = 0;
        v67 = *(_OWORD *)result;
        v68 = *(_QWORD *)(result + 16);
        v49 = (__int128 *)result;
        do
        {
          v50 = v48 + 1;
          v51 = (__int128 *)((char *)v49 + 24 * v48 + 24);
          v52 = (2 * v48) | 1;
          v53 = 2 * v48 + 2;
          if (v53 < v47)
          {
            v54 = *((_DWORD *)v49 + 6 * v50 + 3) - *((_DWORD *)v49 + 6 * v50 + 2);
            v55 = *((_DWORD *)v51 + 9) - *((_DWORD *)v51 + 8);
            v51 = (__int128 *)((char *)v51 + 24 * (v54 < v55));
            if (v54 < v55)
              v52 = v53;
          }
          v56 = *v51;
          *((_DWORD *)v49 + 4) = *((_DWORD *)v51 + 4);
          *v49 = v56;
          v49 = v51;
          v48 = v52;
        }
        while (v52 <= (uint64_t)((unint64_t)(v47 - 2) >> 1));
        a2 = (__int128 *)((char *)a2 - 24);
        if (v51 == a2)
        {
          *((_DWORD *)v51 + 4) = v68;
          *v51 = v67;
        }
        else
        {
          v57 = *a2;
          *((_DWORD *)v51 + 4) = *((_DWORD *)a2 + 4);
          *v51 = v57;
          *a2 = v67;
          *((_DWORD *)a2 + 4) = v68;
          v58 = (uint64_t)v51 - result + 24;
          if (v58 >= 25)
          {
            v59 = (v58 / 0x18uLL - 2) >> 1;
            v60 = *((_DWORD *)v51 + 2);
            v61 = *((_DWORD *)v51 + 3);
            if (*(_DWORD *)(result + 24 * v59 + 12) - *(_DWORD *)(result + 24 * v59 + 8) < (v61 - v60))
            {
              v62 = *(_QWORD *)v51;
              v63 = *((_QWORD *)v51 + 2);
              do
              {
                v64 = v51;
                v51 = (__int128 *)(result + 24 * v59);
                v65 = *v51;
                *((_DWORD *)v64 + 4) = *((_DWORD *)v51 + 4);
                *v64 = v65;
                if (!v59)
                  break;
                v59 = (v59 - 1) >> 1;
              }
              while (*(_DWORD *)(result + 24 * v59 + 12) - *(_DWORD *)(result + 24 * v59 + 8) < (v61 - v60));
              *(_QWORD *)v51 = v62;
              *((_DWORD *)v51 + 2) = v60;
              *((_DWORD *)v51 + 3) = v61;
              *((_DWORD *)v51 + 4) = v63;
            }
          }
        }
      }
      while (v47-- > 2);
    }
  }
  return result;
}

void WebCore::GridTrackSizingAlgorithm::MasonryIndefiniteItems::~MasonryIndefiniteItems(WebCore::GridTrackSizingAlgorithm::MasonryIndefiniteItems *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;

  v3 = (WTF *)*((_QWORD *)this + 5);
  while (v3)
  {
    v6 = v3;
    v3 = (WTF *)*((_QWORD *)v3 + 2);
    v7 = *(WTF **)v6;
    *(_QWORD *)v6 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, a2);
      else
        --*(_DWORD *)v7;
    }
    WTF::fastFree(v6, a2);
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (WTF *)*((_QWORD *)this + 1);
  while (v5)
  {
    v8 = v5;
    v5 = (WTF *)*((_QWORD *)v5 + 2);
    v9 = *(WTF **)v8;
    *(_QWORD *)v8 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, a2);
      else
        --*(_DWORD *)v9;
    }
    WTF::fastFree(v8, a2);
  }
  if (*(_QWORD *)this)
    WTF::fastFree((WTF *)(*(_QWORD *)this - 16), a2);
}

uint64_t **WTF::ListHashSet<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add(uint64_t **result, uint64_t *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int i;
  int v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t ***v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>> *>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = ~(*a3 << 32) + *a3;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v7;
    v15 = (uint64_t **)(v6 + 8 * (v12 & v7));
    v16 = *v15;
    if (!*v15)
      break;
    if (v16 != (uint64_t *)-1)
    {
      v15 = v8;
      if (*v16 == *a3)
      {
        v17 = 0;
        goto LABEL_21;
      }
    }
    v12 = i + v14;
    v8 = v15;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*a2 - 16);
    v15 = v8;
  }
  result = (uint64_t **)WTF::fastMalloc((WTF *)0x18);
  v18 = (uint64_t *)*a3;
  *a3 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v18;
  *v15 = (uint64_t *)result;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_17;
LABEL_25:
    v15 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>> *>>::expand(a2, v15);
    result = (uint64_t **)*v15;
    goto LABEL_17;
  }
  if (3 * v24 <= 4 * v23)
    goto LABEL_25;
LABEL_17:
  v25 = a2[2];
  result[1] = (uint64_t *)v25;
  result[2] = 0;
  if (v25)
    v26 = (uint64_t ***)(v25 + 16);
  else
    v26 = (uint64_t ***)(a2 + 1);
  *v26 = result;
  a2[2] = (uint64_t)result;
  v16 = *v15;
  v17 = 1;
LABEL_21:
  *v5 = a2;
  v5[1] = v16;
  *((_BYTE *)v5 + 16) = v17;
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>> *>>::expand(uint64_t *a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *result;
  _QWORD **v12;
  _QWORD *v13;

  v4 = *a1;
  if (!*a1)
  {
    LODWORD(v5) = 0;
    v6 = 0;
    goto LABEL_3;
  }
  LODWORD(v5) = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!(_DWORD)v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = (_DWORD)v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v10 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v12 = (_QWORD **)v4;
    do
    {
      v9 = *v12;
      if ((unint64_t)*v12 + 1 >= 2)
      {
        v13 = WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>>::reinsert(*a1, v9);
        if (v12 == a2)
          v10 = v13;
      }
      ++v12;
      --v5;
    }
    while (v5);
    goto LABEL_14;
  }
  result = 0;
  if (v4)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox11hasEllipsisEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 44))
    return *(unsigned __int8 *)(*(_QWORD *)(v3 + 32) + 152 * v2 + 144);
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox11hasEllipsisEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_()
{
  return 0;
}

uint64_t WebCore::RenderElement::shouldApplyInlineSizeContainment(WebCore::RenderElement *this)
{
  WebCore::Element *v1;
  uint64_t v2;
  int v3;
  int v4;
  char v5;
  char v6;
  uint64_t result;
  int v8;
  BOOL v9;
  WebCore::RenderObject *v11;
  WebCore::RenderObject *v12;

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v1 = 0;
  }
  else
  {
    v1 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if (v1 && (*((_WORD *)v1 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963501D0);
    }
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v3 = (*(_DWORD *)(v2 + 636) >> 18) & 3;
  if (v3)
  {
    v12 = this;
    if ((*((_BYTE *)this + 96) & 0x1F) == 0xD || (*((_BYTE *)this + 96) & 0x1Eu) - 14 <= 0xFFFFFFF5)
    {
      if (v3 == 2)
        return 1;
      if (v1)
      {
        if (!WebCore::Element::isRelevantToUser(v1))
          return 1;
        this = v12;
        v2 = *(_QWORD *)(*((_QWORD *)v12 + 11) + 40);
      }
    }
  }
  v4 = *(_BYTE *)(v2 + 642) & 3;
  if (v4 != 2)
  {
    v5 = *(_BYTE *)(v2 + 462);
    v9 = v4 == 1;
    v6 = v5 | 0x15;
    if (!v9)
      v6 = v5;
    if ((v6 & 8) == 0)
      return 0;
  }
  v11 = this;
  if ((*((_BYTE *)this + 20) & 1) != 0
    || (result = WebCore::RenderObject::isAtomicInlineLevelBox(this), (_DWORD)result))
  {
    if ((*((_QWORD *)v11 + 12) & 0x1FLL) == 0x19)
      return 0;
    v8 = *((unsigned __int8 *)v11 + 46);
    if ((v8 - 36) <= 4 && v8 != 36)
      return 0;
    v9 = v8 == 35 || v8 == 63;
    return !v9;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  WTF **v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_DWORD *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 0x80000000;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v15 = 0;
    v13 = 0;
    do
    {
      v16 = (WTF **)(v6 + 16 * v15);
      v17 = *v16;
      if (*v16)
      {
        if (v17 != (WTF *)-1)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = ~(*((_QWORD *)v17 + 1) << 32) + *((_QWORD *)v17 + 1);
          v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
          v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
          v23 = v19 & (((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~((_DWORD)v22 << 27)));
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = v18 + 16 * v25;
          *(_QWORD *)v27 = 0;
          v28 = *v16;
          *v16 = 0;
          *(_QWORD *)v27 = v28;
          *(_DWORD *)(v27 + 8) = *(_DWORD *)(v6 + 16 * v15 + 8);
          v29 = *v16;
          *v16 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 1)
              WTF::fastFree(v29, v10);
            else
              --*(_DWORD *)v29;
          }
          if (v16 == a3)
            v13 = v27;
        }
      }
      else
      {
        *v16 = 0;
      }
      ++v15;
    }
    while (v15 != v7);
    goto LABEL_22;
  }
  v13 = 0;
  result = 0;
  if (v6)
  {
LABEL_22:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::GridTrack,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v6 = *(WTF **)a1;
    v7 = *(_QWORD *)a1 + 136 * v3;
    do
    {
      if (*((_BYTE *)v6 + 128))
      {
        if (*((_BYTE *)v6 + 100) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v6 + 24));
        }
        if (*((_BYTE *)v6 + 76) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v6 + 18));
        }
        if (*((_BYTE *)v6 + 52) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v6 + 12));
        }
      }
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(*(_QWORD *)v6 + 8) = 0;
        v8 = *(unsigned int **)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v8);
            WTF::fastFree((WTF *)v8, a2);
          }
        }
      }
      else
      {
        *(_QWORD *)v6 = 0;
      }
      v6 = (WTF *)((char *)v6 + 136);
    }
    while (v6 != (WTF *)v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t *WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::ItemLayoutRequirement>,WTF::HashTableTraits>::add<WebCore::ItemLayoutRequirement>@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  WTF *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  unsigned int v18;
  uint64_t *v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::ItemLayoutRequirement>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = (WTF *)*a2;
  v13 = ~(*a2 << 32) + *a2;
  v14 = 9
      * (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) ^ (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = (v15 >> 31) ^ v15;
  for (i = 1; ; ++i)
  {
    v18 = v16 & v10;
    v19 = (uint64_t *)(v8 + 16 * v18);
    v20 = (WTF *)*v19;
    if (*v19 != -1)
      break;
    v11 = v8 + 16 * v18;
LABEL_10:
    v16 = i + v18;
  }
  if (!v20)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *(_BYTE *)(v11 + 8) = 0;
      --*(_DWORD *)(*v6 - 16);
      v12 = (WTF *)*a2;
      v19 = (uint64_t *)v11;
    }
    *a2 = 0;
    result = (uint64_t *)*v19;
    *v19 = (uint64_t)v12;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
      else
        --*(_DWORD *)result;
    }
    *((_BYTE *)v19 + 8) = *a3;
    v21 = *v6;
    if (*v6)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v26 = *v6;
    if (*v6)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
        goto LABEL_27;
    }
    else if (3 * v29 <= 4 * v28)
    {
      if (!(_DWORD)v29)
      {
        v30 = 8;
LABEL_32:
        result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::ItemLayoutRequirement>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v6, v30, (WTF **)v19);
        v19 = result;
        v26 = *v6;
        if (*v6)
          v29 = *(unsigned int *)(v26 - 4);
        else
          v29 = 0;
        goto LABEL_36;
      }
LABEL_27:
      v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
      goto LABEL_32;
    }
LABEL_36:
    v25 = v26 + 16 * v29;
    v24 = 1;
    goto LABEL_37;
  }
  if (v20 != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v23 = 0;
  else
    v23 = *(unsigned int *)(v8 - 4);
  v24 = 0;
  v25 = v8 + 16 * v23;
LABEL_37:
  *(_QWORD *)a4 = v19;
  *(_QWORD *)(a4 + 8) = v25;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::RenderBox,WebCore::ItemLayoutRequirement,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = _ZN3WTF9HashTableINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_12KeyValuePairIS7_N7WebCore21ItemLayoutRequirementEEENS_24KeyValuePairKeyExtractorISB_EENS_11DefaultHashIS7_EENS_7HashMapIS7_SA_SF_NS_10HashTraitsIS7_EENSH_ISA_EENS_15HashTableTraitsEE18KeyValuePairTraitsESI_E8removeIfIZNS_11WeakHashMapINS9_9RenderBoxESA_S2_E20removeNullReferencesEvEUlRT_E_EEbRKSS_((uint64_t *)a1, &v4);
  *(_DWORD *)(a1 + 8) = 0;
  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    LODWORD(v3) = *(_DWORD *)(v3 - 12);
    if (v3 > 0x7FFFFFFE)
      LODWORD(v3) = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 12) = 2 * v3;
  return result;
}

uint64_t _ZN3WTF9HashTableINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_12KeyValuePairIS7_N7WebCore21ItemLayoutRequirementEEENS_24KeyValuePairKeyExtractorISB_EENS_11DefaultHashIS7_EENS_7HashMapIS7_SA_SF_NS_10HashTraitsIS7_EENSH_ISA_EENS_15HashTableTraitsEE18KeyValuePairTraitsESI_E8removeIfIZNS_11WeakHashMapINS9_9RenderBoxESA_S2_E20removeNullReferencesEvEUlRT_E_EEbRKSS_(uint64_t *a1, void *a2)
{
  uint64_t v2;
  int v3;
  int v5;
  unsigned int v6;
  WTF **v7;
  WTF *v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  unsigned int v22;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    if (!v3)
      return 0;
    v5 = 0;
    v6 = v3 - 1;
    do
    {
      v7 = (WTF **)(v2 + 16 * v6);
      v8 = *v7;
      if ((unint64_t)*v7 + 1 >= 2 && !*((_QWORD *)v8 + 1))
      {
        *v7 = 0;
        if (*(_DWORD *)v8 == 1)
          WTF::fastFree(v8, a2);
        else
          --*(_DWORD *)v8;
        *v7 = (WTF *)-1;
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    v10 = *a1;
    v2 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v10 - 16) += v5;
      v11 = *a1;
      if (*a1)
        v12 = *(_DWORD *)(v11 - 12);
      else
        v12 = 0;
      *(_DWORD *)(v11 - 12) = v12 - v5;
      v10 = *a1;
    }
    if (v10)
    {
      v13 = *(_DWORD *)(v10 - 4);
      v14 = *(unsigned int *)(v10 - 12);
      if (6 * (int)v14 < v13 && v13 >= 9)
      {
        v16 = (v14 - 1) | ((v14 - 1) >> 1) | ((((_DWORD)v14 - 1) | ((v14 - 1) >> 1)) >> 2);
        v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
        v18 = (v17 | HIWORD(v17)) + 1;
        if (v18 > 0x400)
        {
          if (v18 > 2 * v14)
            goto LABEL_29;
        }
        else if (3 * v18 > 4 * v14)
        {
LABEL_27:
          v19 = (double)v14;
          v20 = (double)v18;
          v21 = 0.604166667;
LABEL_30:
          if (v20 * v21 <= v19)
            LODWORD(v18) = 2 * v18;
          if (v18 <= 8)
            v22 = 8;
          else
            v22 = v18;
          WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::ItemLayoutRequirement>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v22, 0);
          return v2;
        }
        LODWORD(v18) = 2 * v18;
        if (v18 <= 0x400)
          goto LABEL_27;
LABEL_29:
        v19 = (double)v14;
        v20 = (double)v18;
        v21 = 0.416666667;
        goto LABEL_30;
      }
    }
  }
  return v2;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::ItemLayoutRequirement,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::ItemLayoutRequirement>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_BYTE *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 0;
      v12 += 16;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (WTF **)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != (WTF *)-1)
      {
        if (v16)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = ((unint64_t)v16 + ~((_QWORD)v16 << 32)) ^ (((unint64_t)v16 + ~((_QWORD)v16 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = v17 + 16 * v24;
          *(_QWORD *)v26 = 0;
          v27 = *v15;
          *v15 = 0;
          *(_QWORD *)v26 = v27;
          *(_BYTE *)(v26 + 8) = *(_BYTE *)(v6 + 16 * v13 + 8);
          v28 = *v15;
          *v15 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
              WTF::fastFree(v28, v10);
            else
              --*(_DWORD *)v28;
          }
          if (v15 == a3)
            v14 = v26;
        }
        else
        {
          *v15 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ~(*((_QWORD *)v14 + 1) << 32) + *((_QWORD *)v14 + 1);
          v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = v15 + 16 * v22;
          *(_QWORD *)v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *(_QWORD *)v24 = v25;
          *(_BYTE *)(v24 + 8) = *(_BYTE *)(v6 + 16 * v11 + 8);
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
              WTF::fastFree(v26, v10);
            else
              --*(_DWORD *)v26;
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GridTrack&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  result = *a2;
  if (*a2)
    goto LABEL_11;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v8 = (unsigned int *)*a2;
  *a2 = result;
  if (!v8)
    goto LABEL_11;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  result = *a2;
  if (*a2)
  {
LABEL_11:
    do
      v11 = __ldaxr((unsigned int *)result);
    while (__stlxr(v11 + 1, (unsigned int *)result));
  }
  *(_QWORD *)(v5 + 8 * v4) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int **v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = (unsigned int **)((char *)v7 + 8 * v8);
        v11 = (unsigned int **)v7;
        do
        {
          v12 = *v11;
          *v11 = 0;
          v13 = result;
          *(_QWORD *)result = v12;
          v14 = *v11;
          v15 = v11;
          *v11 = 0;
          if (v14)
          {
            do
            {
              v16 = __ldaxr(v14);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v14));
            if (!v17)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, v9);
            }
          }
          result = v13 + 8;
          v11 = v15 + 1;
        }
        while (v15 + 1 != v10);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

unsigned int *WebCore::GridTrackSizingAlgorithm::distributeSpaceToTracks<(WebCore::TrackSizeComputationVariant)0,(WebCore::TrackSizeComputationPhase)1>(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int *result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  unsigned int *v27;
  WTF **v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  double v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  BOOL (*v44)(uint64_t *, uint64_t *);

  result = *(unsigned int **)a1;
  v7 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 8 * v7;
    do
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&result[v8 / 4] + 8) + 20) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&result[v8 / 4]
                                                                                                + 8)
                                                                                    + 8) & ~(*(int *)(*(_QWORD *)(*(_QWORD *)&result[v8 / 4] + 8) + 8) >> 31);
      v8 += 8;
    }
    while (v9 != v8);
    v10 = *(unsigned int *)(a1 + 12);
    v11 = *a3;
    if (*a3 <= 0)
      goto LABEL_49;
    if ((_DWORD)v10)
    {
      v44 = WebCore::sortByGridTrackGrowthPotential;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,false>(result, (WTF **)&result[2 * v10], (uint64_t (**)(unsigned int **, unsigned int **))&v44, 126 - 2 * __clz(v10), 1);
      v12 = 0;
      v13 = *(unsigned int *)(a1 + 12);
      result = *(unsigned int **)a1;
      do
      {
        if (v13 == v12)
        {
LABEL_62:
          __break(0xC471u);
          JUMPOUT(0x196351220);
        }
        v14 = *(_QWORD *)&result[2 * v12];
        if (v14)
          v14 = *(_QWORD *)(v14 + 8);
        v15 = (double)*a3 * 0.015625 / (double)v10 * 64.0;
        if (v15 >= 2147483650.0)
        {
          v16 = 0x7FFFFFFF;
        }
        else if (v15 <= -2147483650.0)
        {
          v16 = 0x80000000;
        }
        else
        {
          v16 = (int)v15;
        }
        v17 = *(_DWORD *)(v14 + 12);
        if (v17 != -64 && !*(_BYTE *)(v14 + 32))
        {
          v18 = *(_DWORD *)(v14 + 8) & ~(*(int *)(v14 + 8) >> 31);
          v19 = __OFSUB__(v17, v18);
          v20 = v17 - v18;
          v21 = (v17 >> 31) + 0x7FFFFFFF;
          if (!v19)
            v21 = v20;
          if (v21 < v16)
            v16 = v21;
        }
        v22 = *(_DWORD *)(v14 + 20);
        v19 = __OFADD__(v22, v16);
        v23 = v22 + v16;
        v24 = (v22 >> 31) + 0x7FFFFFFF;
        if (!v19)
          v24 = v23;
        *(_DWORD *)(v14 + 20) = v24;
        v19 = __OFSUB__(*a3, v16);
        v25 = *a3 - v16;
        v11 = (*a3 >> 31) + 0x7FFFFFFF;
        if (!v19)
          v11 = v25;
        *a3 = v11;
        ++v12;
        --v10;
      }
      while (v10);
      LODWORD(v10) = v13;
      if (!a2)
        goto LABEL_49;
      goto LABEL_32;
    }
  }
  else
  {
    v11 = *a3;
    if (*a3 <= 0)
      return result;
    LODWORD(v10) = 0;
  }
  if (a2)
  {
LABEL_32:
    if (v11 >= 1)
    {
      v26 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v26)
      {
        v27 = *(unsigned int **)a2;
        v28 = (WTF **)(*(_QWORD *)a2 + 8 * v26);
        v44 = WebCore::sortByGridTrackGrowthPotential;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,false>(v27, v28, (uint64_t (**)(unsigned int **, unsigned int **))&v44, 126 - 2 * __clz(v26), 1);
        v29 = *(unsigned int *)(a2 + 12);
        v30 = *(unsigned int **)a2;
        do
        {
          if (!v29)
            goto LABEL_62;
          v31 = *(_QWORD *)v30;
          if (*(_QWORD *)v30)
            v31 = *(_QWORD *)(v31 + 8);
          v32 = (double)*a3 * 0.015625 / (double)v26 * 64.0;
          if (v32 >= 2147483650.0)
          {
            v33 = 0x7FFFFFFF;
          }
          else if (v32 <= -2147483650.0)
          {
            v33 = 0x80000000;
          }
          else
          {
            v33 = (int)v32;
          }
          v34 = *(_DWORD *)(v31 + 20);
          v19 = __OFADD__(v34, v33);
          v35 = v34 + v33;
          v36 = (v34 >> 31) + 0x7FFFFFFF;
          if (!v19)
            v36 = v35;
          *(_DWORD *)(v31 + 20) = v36;
          v19 = __OFSUB__(*a3, v33);
          v37 = *a3 - v33;
          v38 = (*a3 >> 31) + 0x7FFFFFFF;
          if (!v19)
            v38 = v37;
          *a3 = v38;
          v30 += 2;
          --v29;
          --v26;
        }
        while (v26);
        result = *(unsigned int **)a1;
        LODWORD(v10) = *(_DWORD *)(a1 + 12);
      }
    }
  }
LABEL_49:
  if ((_DWORD)v10)
  {
    v39 = 8 * v10;
    do
    {
      v40 = *(_QWORD *)result;
      if (*(_QWORD *)result)
      {
        v40 = *(_QWORD *)(v40 + 8);
        v42 = v40 + 16;
        v41 = *(_DWORD *)(v40 + 16);
      }
      else
      {
        v41 = MEMORY[0x10];
        v42 = 16;
      }
      if (v41 == -64)
      {
        v43 = (_DWORD *)(v40 + 20);
      }
      else if (v41 >= *(_DWORD *)(v40 + 20))
      {
        v43 = (_DWORD *)v42;
      }
      else
      {
        v43 = (_DWORD *)(v40 + 20);
      }
      *(_DWORD *)(v40 + 16) = *v43;
      result += 2;
      v39 -= 8;
    }
    while (v39);
  }
  return result;
}

unsigned int *WebCore::distributeItemIncurredIncreases<(WebCore::TrackSizeComputationVariant)0,(WebCore::TrackSizeComputationPhase)3,(WebCore::SpaceDistributionLimit)0>(unsigned int *result, _DWORD *a2)
{
  unint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  double v9;
  int v10;
  _BOOL4 v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL (*v22)(uint64_t *, uint64_t *);

  v2 = result[3];
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(unsigned int **)result;
    v22 = WebCore::sortByGridTrackGrowthPotential;
    result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,false>(v5, (WTF **)&v5[2 * v2], (uint64_t (**)(unsigned int **, unsigned int **))&v22, 126 - 2 * __clz(v2), 1);
    v6 = v4[3];
    for (i = *(uint64_t **)v4; ; ++i)
    {
      if (!v6)
      {
        __break(0xC471u);
        return result;
      }
      v8 = *i;
      if (*i)
        v8 = *(_QWORD *)(v8 + 8);
      v9 = (double)(int)*a2 * 0.015625 / (double)v2 * 64.0;
      if (v9 >= 2147483650.0)
        break;
      if (v9 <= -2147483650.0)
      {
        v12 = *(_DWORD *)(v8 + 12) != -64 && *(_BYTE *)(v8 + 32) == 0;
        v10 = 0x80000000;
        v13 = 0x80000000;
        goto LABEL_16;
      }
      v10 = (int)v9;
      v12 = *(_DWORD *)(v8 + 12) != -64 && *(_BYTE *)(v8 + 32) == 0;
      v13 = (int)v9;
      if (v10 >= 1)
        goto LABEL_15;
LABEL_16:
      if (v12)
        v10 = v13;
      v14 = *(_DWORD *)(v8 + 20);
      v15 = __OFADD__(v14, v10);
      v16 = v14 + v10;
      v17 = (v14 >> 31) + 0x7FFFFFFF;
      if (!v15)
        v17 = v16;
      *(_DWORD *)(v8 + 20) = v17;
      v15 = __OFSUB__(*a2, v10);
      v18 = *a2 - v10;
      v19 = (*a2 >> 31) + 0x7FFFFFFF;
      if (!v15)
        v19 = v18;
      *a2 = v19;
      --v6;
      if (!--v2)
        return result;
    }
    v12 = *(_DWORD *)(v8 + 12) != -64 && *(_BYTE *)(v8 + 32) == 0;
    v10 = 0x7FFFFFFF;
LABEL_15:
    v13 = 0;
    goto LABEL_16;
  }
  return result;
}

unsigned int *WebCore::distributeItemIncurredIncreases<(WebCore::TrackSizeComputationVariant)0,(WebCore::TrackSizeComputationPhase)3,(WebCore::SpaceDistributionLimit)1>(unsigned int *result, _DWORD *a2)
{
  unint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  double v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL (*v17)(uint64_t *, uint64_t *);

  v2 = result[3];
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(unsigned int **)result;
    v17 = WebCore::sortByGridTrackGrowthPotential;
    result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::GridTrack,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>*,false>(v5, (WTF **)&v5[2 * v2], (uint64_t (**)(unsigned int **, unsigned int **))&v17, 126 - 2 * __clz(v2), 1);
    v6 = v4[3];
    v7 = *(uint64_t **)v4;
    while (v6)
    {
      v8 = *v7;
      if (*v7)
        v8 = *(_QWORD *)(v8 + 8);
      v9 = (double)(int)*a2 * 0.015625 / (double)v2 * 64.0;
      if (v9 >= 2147483650.0)
      {
        v10 = 0x7FFFFFFF;
      }
      else if (v9 <= -2147483650.0)
      {
        v10 = 0x80000000;
      }
      else
      {
        v10 = (int)v9;
      }
      v11 = *(_DWORD *)(v8 + 20);
      v12 = __OFADD__(v11, v10);
      v13 = v11 + v10;
      v14 = (v11 >> 31) + 0x7FFFFFFF;
      if (!v12)
        v14 = v13;
      *(_DWORD *)(v8 + 20) = v14;
      v12 = __OFSUB__(*a2, v10);
      v15 = *a2 - v10;
      v16 = (*a2 >> 31) + 0x7FFFFFFF;
      if (!v12)
        v16 = v15;
      *a2 = v16;
      ++v7;
      --v6;
      if (!--v2)
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::distributeItemIncurredIncreases<(WebCore::TrackSizeComputationVariant)1,(WebCore::TrackSizeComputationPhase)0,(WebCore::SpaceDistributionLimit)1>(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  unsigned int v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  int v25;
  unsigned int v26;
  BOOL v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1963516B4);
    }
    v4 = result;
    v5 = 8 * v2;
    v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
    v7 = v2 - 1;
    v8 = *(unsigned int *)(v4 + 12);
    v9 = *(_QWORD *)v4;
    if (v8 <= v2)
    {
      if (v7 < v8)
      {
        v10 = 0.0;
        v11 = 1;
        while (1)
        {
          v2 = (v2 - 1);
          v12 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * v2) + 8);
          if (!*(_BYTE *)(v12 + 128))
            break;
          v13 = *(double *)(v12 + 80);
          v10 = v10 + v13;
          if (v10 <= 0.0)
            v14 = (double)v11;
          else
            v14 = v10 / v13;
          *((double *)v6 + v2) = v14;
          ++v11;
          if ((int)v2 <= 0)
            goto LABEL_20;
        }
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x1963516A4);
    }
    if (v7 >= v8)
      goto LABEL_38;
    v15 = 0.0;
    v16 = 1;
    do
    {
      v2 = (v2 - 1);
      v17 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * v2) + 8);
      if (!*(_BYTE *)(v17 + 128))
        goto LABEL_38;
      v18 = *(double *)(v17 + 80);
      v15 = v15 + v18;
      if (v15 <= 0.0)
        v19 = (double)v16;
      else
        v19 = v15 / v18;
      *((double *)v6 + v2) = v19;
      ++v16;
    }
    while ((int)v2 > 0);
LABEL_20:
    v20 = 0;
    v21 = *(_QWORD *)v4;
    v22 = 8 * v8;
    do
    {
      if (v22 == v20)
      {
        __break(0xC471u);
        JUMPOUT(0x1963516ACLL);
      }
      v23 = *(_QWORD *)(v21 + v20);
      if (v23)
        v23 = *(_QWORD *)(v23 + 8);
      v24 = (double)(int)*a2 * 0.015625 / *(double *)((char *)v6 + v20) * 64.0;
      if (v24 >= 2147483650.0)
      {
        v25 = 0x7FFFFFFF;
      }
      else if (v24 <= -2147483650.0)
      {
        v25 = 0x80000000;
      }
      else
      {
        v25 = (int)v24;
      }
      v26 = *(_DWORD *)(v23 + 20);
      v27 = __OFADD__(v26, v25);
      v28 = v26 + v25;
      v29 = (v26 >> 31) + 0x7FFFFFFF;
      if (!v27)
        v29 = v28;
      *(_DWORD *)(v23 + 20) = v29;
      v27 = __OFSUB__(*a2, v25);
      v30 = *a2 - v25;
      v31 = (*a2 >> 31) + 0x7FFFFFFF;
      if (!v27)
        v31 = v30;
      *a2 = v31;
      v20 += 8;
    }
    while (v5 != v20);
    return WTF::fastFree(v6, (void *)v28);
  }
  return result;
}

uint64_t WebCore::GridTrackSizingAlgorithm::distributeSpaceToTracks<(WebCore::TrackSizeComputationVariant)1,(WebCore::TrackSizeComputationPhase)1>(uint64_t result, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  double *v16;
  double v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  double v21;
  double v22;
  BOOL v23;
  _BOOL4 v24;
  double *v25;
  double v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  double v30;
  double v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  double v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  double *v60;
  double v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  int v72;
  unsigned int v73;
  unint64_t v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _DWORD *v84;

  v5 = result;
  v6 = *(unsigned int *)(result + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)result;
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      *(_DWORD *)(*(_QWORD *)(v9 + 8) + 20) = *(_DWORD *)(*(_QWORD *)(v9 + 8) + 8) & ~(*(int *)(*(_QWORD *)(v9 + 8)
                                                                                                  + 8) >> 31);
      v8 -= 8;
    }
    while (v8);
  }
  if ((int)*a3 <= 0)
    goto LABEL_85;
  v10 = *(unsigned int *)(result + 12);
  if (!(_DWORD)v10)
  {
    v24 = 1;
    if (!a2)
      goto LABEL_85;
    goto LABEL_49;
  }
  if (v10 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x196351B7CLL);
  }
  v11 = 8 * v10;
  v12 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
  v13 = v10 - 1;
  v14 = *(unsigned int *)(v5 + 12);
  v15 = *(uint64_t **)v5;
  if (v14 <= v10)
  {
    if (v13 < v14)
    {
      v16 = (double *)((char *)v12 + 8 * v13);
      v17 = 0.0;
      v18 = 1;
      v19 = &v15[v13];
      while (1)
      {
        v20 = *(_QWORD *)(*v19 + 8);
        if (!*(_BYTE *)(v20 + 128))
          break;
        v21 = *(double *)(v20 + 80);
        v17 = v17 + v21;
        if (v17 <= 0.0)
          v22 = (double)v18;
        else
          v22 = v17 / v21;
        *v16-- = v22;
        --v19;
        ++v18;
        v23 = __OFSUB__((_DWORD)v10, 1);
        LODWORD(v10) = v10 - 1;
        if (((int)v10 < 0) ^ v23 | ((_DWORD)v10 == 0))
          goto LABEL_27;
      }
LABEL_105:
      __break(0xC471u);
      JUMPOUT(0x196351B44);
    }
LABEL_103:
    __break(0xC471u);
    JUMPOUT(0x196351B84);
  }
  if (v13 >= v14)
    goto LABEL_103;
  v25 = (double *)((char *)v12 + 8 * v13);
  v26 = 0.0;
  v27 = 1;
  v28 = &v15[v13];
  do
  {
    v29 = *(_QWORD *)(*v28 + 8);
    if (!*(_BYTE *)(v29 + 128))
      goto LABEL_105;
    v30 = *(double *)(v29 + 80);
    v26 = v26 + v30;
    if (v26 <= 0.0)
      v31 = (double)v27;
    else
      v31 = v26 / v30;
    *v25-- = v31;
    --v28;
    ++v27;
    v23 = __OFSUB__((_DWORD)v10, 1);
    LODWORD(v10) = v10 - 1;
  }
  while (!(((int)v10 < 0) ^ v23 | ((_DWORD)v10 == 0)));
LABEL_27:
  v32 = 0;
  v33 = *(uint64_t **)v5;
  v34 = 8 * v14;
  do
  {
    if (v34 == v32)
    {
      __break(0xC471u);
      JUMPOUT(0x196351B6CLL);
    }
    v35 = v33[v32 / 8];
    if (v35)
      v35 = *(_QWORD *)(v35 + 8);
    v36 = (double)(int)*a3 * 0.015625 / *(double *)((char *)v12 + v32) * 64.0;
    if (v36 >= 2147483650.0)
    {
      v37 = 0x7FFFFFFF;
    }
    else if (v36 <= -2147483650.0)
    {
      v37 = 0x80000000;
    }
    else
    {
      v37 = (int)v36;
    }
    v38 = *(_DWORD *)(v35 + 12);
    if (v38 != -64 && !*(_BYTE *)(v35 + 32))
    {
      v39 = *(_DWORD *)(v35 + 8) & ~(*(int *)(v35 + 8) >> 31);
      v23 = __OFSUB__(v38, v39);
      v40 = v38 - v39;
      v41 = (v38 >> 31) + 0x7FFFFFFF;
      if (!v23)
        v41 = v40;
      if (v41 < v37)
        v37 = v41;
    }
    v42 = *(_DWORD *)(v35 + 20);
    v23 = __OFADD__(v42, v37);
    v43 = v42 + v37;
    v44 = (v42 >> 31) + 0x7FFFFFFF;
    if (!v23)
      v44 = v43;
    *(_DWORD *)(v35 + 20) = v44;
    v23 = __OFSUB__(*a3, v37);
    v45 = *a3 - v37;
    v46 = (*a3 >> 31) + 0x7FFFFFFF;
    if (!v23)
      v46 = v45;
    *a3 = v46;
    v32 += 8;
  }
  while (v11 != v32);
  result = WTF::fastFree(v12, (void *)v43);
  v24 = *a3 > 0;
  if (a2)
  {
LABEL_49:
    if (v24)
    {
      v47 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v47)
      {
        if (v47 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x196351B8CLL);
        }
        v48 = 8 * v47;
        v49 = (WTF *)WTF::fastMalloc((WTF *)(8 * v47));
        v50 = v47 - 1;
        v51 = *((unsigned int *)a2 + 3);
        v52 = *a2;
        if (v51 <= v47)
        {
          if (v50 < v51)
          {
            v53 = (double *)((char *)v49 + 8 * v50);
            v54 = 0.0;
            v55 = 1;
            v56 = v52 + 8 * v50;
            while (1)
            {
              v57 = *(_QWORD *)(*(_QWORD *)v56 + 8);
              if (!*(_BYTE *)(v57 + 128))
                break;
              v58 = *(double *)(v57 + 80);
              v54 = v54 + v58;
              if (v54 <= 0.0)
                v59 = (double)v55;
              else
                v59 = v54 / v58;
              *v53-- = v59;
              v56 -= 8;
              ++v55;
              v23 = __OFSUB__((_DWORD)v47, 1);
              LODWORD(v47) = v47 - 1;
              if (((int)v47 < 0) ^ v23 | ((_DWORD)v47 == 0))
                goto LABEL_70;
            }
LABEL_99:
            __break(0xC471u);
            JUMPOUT(0x196351B64);
          }
          goto LABEL_105;
        }
        if (v50 >= v51)
          goto LABEL_105;
        v60 = (double *)((char *)v49 + 8 * v50);
        v61 = 0.0;
        v62 = 1;
        v63 = v52 + 8 * v50;
        do
        {
          v64 = *(_QWORD *)(*(_QWORD *)v63 + 8);
          if (!*(_BYTE *)(v64 + 128))
            goto LABEL_99;
          v65 = *(double *)(v64 + 80);
          v61 = v61 + v65;
          if (v61 <= 0.0)
            v66 = (double)v62;
          else
            v66 = v61 / v65;
          *v60-- = v66;
          v63 -= 8;
          ++v62;
          v23 = __OFSUB__((_DWORD)v47, 1);
          LODWORD(v47) = v47 - 1;
        }
        while (!(((int)v47 < 0) ^ v23 | ((_DWORD)v47 == 0)));
LABEL_70:
        v67 = 0;
        v68 = *a2;
        v69 = 8 * v51;
        do
        {
          if (v69 == v67)
          {
            __break(0xC471u);
            JUMPOUT(0x196351B74);
          }
          v70 = *(_QWORD *)(v68 + v67);
          if (v70)
            v70 = *(_QWORD *)(v70 + 8);
          v71 = (double)(int)*a3 * 0.015625 / *(double *)((char *)v49 + v67) * 64.0;
          if (v71 >= 2147483650.0)
          {
            v72 = 0x7FFFFFFF;
          }
          else if (v71 <= -2147483650.0)
          {
            v72 = 0x80000000;
          }
          else
          {
            v72 = (int)v71;
          }
          v73 = *(_DWORD *)(v70 + 20);
          v23 = __OFADD__(v73, v72);
          v74 = v73 + v72;
          v75 = (v73 >> 31) + 0x7FFFFFFF;
          if (!v23)
            v75 = v74;
          *(_DWORD *)(v70 + 20) = v75;
          v23 = __OFSUB__(*a3, v72);
          v76 = *a3 - v72;
          v77 = (*a3 >> 31) + 0x7FFFFFFF;
          if (!v23)
            v77 = v76;
          *a3 = v77;
          v67 += 8;
        }
        while (v48 != v67);
        result = WTF::fastFree(v49, (void *)v74);
      }
    }
  }
LABEL_85:
  v78 = *(unsigned int *)(v5 + 12);
  if ((_DWORD)v78)
  {
    v79 = *(uint64_t **)v5;
    v80 = 8 * v78;
    do
    {
      v81 = *v79;
      if (*v79)
      {
        v81 = *(_QWORD *)(v81 + 8);
        v83 = v81 + 16;
        v82 = *(_DWORD *)(v81 + 16);
      }
      else
      {
        v82 = MEMORY[0x10];
        v83 = 16;
      }
      if (v82 == -64)
      {
        v84 = (_DWORD *)(v81 + 20);
      }
      else if (v82 >= *(_DWORD *)(v81 + 20))
      {
        v84 = (_DWORD *)v83;
      }
      else
      {
        v84 = (_DWORD *)(v81 + 20);
      }
      *(_DWORD *)(v81 + 16) = *v84;
      ++v79;
      v80 -= 8;
    }
    while (v80);
  }
  return result;
}

uint64_t WebCore::GridTrackSizingAlgorithm::distributeSpaceToTracks<(WebCore::TrackSizeComputationVariant)1,(WebCore::TrackSizeComputationPhase)3>(uint64_t result, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  double *v17;
  double v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  double v22;
  double v23;
  BOOL v24;
  _BOOL4 v25;
  double *v26;
  double v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  double v31;
  double v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  int v38;
  _BOOL4 v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  double v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double *v62;
  double v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  int v74;
  unsigned int v75;
  unint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  _DWORD *v86;

  v5 = result;
  v6 = *(unsigned int *)(result + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)result;
    v8 = 8 * v6;
    do
    {
      v9 = *(_DWORD **)(*(_QWORD *)v7 + 8);
      v10 = v9[3];
      if (v10 == -64)
        v10 = v9[2] & ~((int)v9[2] >> 31);
      v9[5] = v10;
      v7 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  if ((int)*a3 <= 0)
    goto LABEL_102;
  v11 = *(unsigned int *)(result + 12);
  if (!(_DWORD)v11)
  {
    v25 = 1;
    if (a2)
      goto LABEL_66;
    goto LABEL_102;
  }
  if (v11 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x196352094);
  }
  v12 = 8 * v11;
  v13 = (WTF *)WTF::fastMalloc((WTF *)(8 * v11));
  v14 = v11 - 1;
  v15 = *(unsigned int *)(v5 + 12);
  v16 = *(uint64_t **)v5;
  if (v15 <= v11)
  {
    if (v14 < v15)
    {
      v17 = (double *)((char *)v13 + 8 * v14);
      v18 = 0.0;
      v19 = 1;
      v20 = &v16[v14];
      do
      {
        v21 = *(_QWORD *)(*v20 + 8);
        if (!*(_BYTE *)(v21 + 128))
          goto LABEL_122;
        v22 = *(double *)(v21 + 80);
        v18 = v18 + v22;
        if (v18 <= 0.0)
          v23 = (double)v19;
        else
          v23 = v18 / v22;
        *v17-- = v23;
        --v20;
        ++v19;
        v24 = __OFSUB__((_DWORD)v11, 1);
        LODWORD(v11) = v11 - 1;
      }
      while (!(((int)v11 < 0) ^ v24 | ((_DWORD)v11 == 0)));
      goto LABEL_29;
    }
LABEL_120:
    __break(0xC471u);
    JUMPOUT(0x19635209CLL);
  }
  if (v14 >= v15)
    goto LABEL_120;
  v26 = (double *)((char *)v13 + 8 * v14);
  v27 = 0.0;
  v28 = 1;
  v29 = &v16[v14];
  do
  {
    v30 = *(_QWORD *)(*v29 + 8);
    if (!*(_BYTE *)(v30 + 128))
      goto LABEL_122;
    v31 = *(double *)(v30 + 80);
    v27 = v27 + v31;
    if (v27 <= 0.0)
      v32 = (double)v28;
    else
      v32 = v27 / v31;
    *v26-- = v32;
    --v29;
    ++v28;
    v24 = __OFSUB__((_DWORD)v11, 1);
    LODWORD(v11) = v11 - 1;
  }
  while (!(((int)v11 < 0) ^ v24 | ((_DWORD)v11 == 0)));
LABEL_29:
  v33 = 0;
  v34 = *(uint64_t **)v5;
  v35 = 8 * v15;
  do
  {
    if (v35 == v33)
    {
      __break(0xC471u);
      JUMPOUT(0x196352084);
    }
    v36 = v34[v33 / 8];
    if (v36)
      v36 = *(_QWORD *)(v36 + 8);
    v37 = (double)(int)*a3 * 0.015625 / *(double *)((char *)v13 + v33) * 64.0;
    if (v37 >= 2147483650.0)
    {
      v40 = *(_DWORD *)(v36 + 12) != -64 && *(_BYTE *)(v36 + 32) == 0;
      v38 = 0x7FFFFFFF;
LABEL_42:
      v41 = 0;
      goto LABEL_43;
    }
    if (v37 <= -2147483650.0)
    {
      v40 = *(_DWORD *)(v36 + 12) != -64 && *(_BYTE *)(v36 + 32) == 0;
      v38 = 0x80000000;
      v41 = 0x80000000;
    }
    else
    {
      v38 = (int)v37;
      v40 = *(_DWORD *)(v36 + 12) != -64 && *(_BYTE *)(v36 + 32) == 0;
      v41 = (int)v37;
      if (v38 >= 1)
        goto LABEL_42;
    }
LABEL_43:
    if (v40)
      v38 = v41;
    v42 = *(_DWORD *)(v36 + 20);
    v24 = __OFADD__(v42, v38);
    v43 = v42 + v38;
    v44 = (v42 >> 31) + 0x7FFFFFFF;
    if (!v24)
      v44 = v43;
    *(_DWORD *)(v36 + 20) = v44;
    v24 = __OFSUB__(*a3, v38);
    v45 = *a3 - v38;
    v46 = (*a3 >> 31) + 0x7FFFFFFF;
    if (!v24)
      v46 = v45;
    *a3 = v46;
    v33 += 8;
  }
  while (v12 != v33);
  result = WTF::fastFree(v13, (void *)v43);
  v25 = *a3 > 0;
  if (a2)
  {
LABEL_66:
    if (v25)
    {
      v49 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v49)
      {
        if (v49 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1963520A4);
        }
        v50 = 8 * v49;
        v51 = (WTF *)WTF::fastMalloc((WTF *)(8 * v49));
        v52 = v49 - 1;
        v53 = *((unsigned int *)a2 + 3);
        v54 = *a2;
        if (v53 <= v49)
        {
          if (v52 < v53)
          {
            v55 = (double *)((char *)v51 + 8 * v52);
            v56 = 0.0;
            v57 = 1;
            v58 = v54 + 8 * v52;
            while (1)
            {
              v59 = *(_QWORD *)(*(_QWORD *)v58 + 8);
              if (!*(_BYTE *)(v59 + 128))
                break;
              v60 = *(double *)(v59 + 80);
              v56 = v56 + v60;
              if (v56 <= 0.0)
                v61 = (double)v57;
              else
                v61 = v56 / v60;
              *v55-- = v61;
              v58 -= 8;
              ++v57;
              v24 = __OFSUB__((_DWORD)v49, 1);
              LODWORD(v49) = v49 - 1;
              if (((int)v49 < 0) ^ v24 | ((_DWORD)v49 == 0))
                goto LABEL_87;
            }
LABEL_116:
            __break(0xC471u);
            JUMPOUT(0x19635207CLL);
          }
LABEL_122:
          __break(0xC471u);
          JUMPOUT(0x19635205CLL);
        }
        if (v52 >= v53)
          goto LABEL_122;
        v62 = (double *)((char *)v51 + 8 * v52);
        v63 = 0.0;
        v64 = 1;
        v65 = v54 + 8 * v52;
        do
        {
          v66 = *(_QWORD *)(*(_QWORD *)v65 + 8);
          if (!*(_BYTE *)(v66 + 128))
            goto LABEL_116;
          v67 = *(double *)(v66 + 80);
          v63 = v63 + v67;
          if (v63 <= 0.0)
            v68 = (double)v64;
          else
            v68 = v63 / v67;
          *v62-- = v68;
          v65 -= 8;
          ++v64;
          v24 = __OFSUB__((_DWORD)v49, 1);
          LODWORD(v49) = v49 - 1;
        }
        while (!(((int)v49 < 0) ^ v24 | ((_DWORD)v49 == 0)));
LABEL_87:
        v69 = 0;
        v70 = *a2;
        v71 = 8 * v53;
        do
        {
          if (v71 == v69)
          {
            __break(0xC471u);
            JUMPOUT(0x19635208CLL);
          }
          v72 = *(_QWORD *)(v70 + v69);
          if (v72)
            v72 = *(_QWORD *)(v72 + 8);
          v73 = (double)(int)*a3 * 0.015625 / *(double *)((char *)v51 + v69) * 64.0;
          if (v73 >= 2147483650.0)
          {
            v74 = 0x7FFFFFFF;
          }
          else if (v73 <= -2147483650.0)
          {
            v74 = 0x80000000;
          }
          else
          {
            v74 = (int)v73;
          }
          v75 = *(_DWORD *)(v72 + 20);
          v24 = __OFADD__(v75, v74);
          v76 = v75 + v74;
          v77 = (v75 >> 31) + 0x7FFFFFFF;
          if (!v24)
            v77 = v76;
          *(_DWORD *)(v72 + 20) = v77;
          v24 = __OFSUB__(*a3, v74);
          v78 = *a3 - v74;
          v79 = (*a3 >> 31) + 0x7FFFFFFF;
          if (!v24)
            v79 = v78;
          *a3 = v79;
          v69 += 8;
        }
        while (v50 != v69);
        result = WTF::fastFree(v51, (void *)v76);
      }
    }
  }
LABEL_102:
  v80 = *(unsigned int *)(v5 + 12);
  if ((_DWORD)v80)
  {
    v81 = *(uint64_t **)v5;
    v82 = 8 * v80;
    do
    {
      v83 = *v81;
      if (*v81)
      {
        v83 = *(_QWORD *)(v83 + 8);
        v85 = v83 + 16;
        v84 = *(_DWORD *)(v83 + 16);
      }
      else
      {
        v84 = MEMORY[0x10];
        v85 = 16;
      }
      if (v84 == -64)
      {
        v86 = (_DWORD *)(v83 + 20);
      }
      else if (v84 >= *(_DWORD *)(v83 + 20))
      {
        v86 = (_DWORD *)v85;
      }
      else
      {
        v86 = (_DWORD *)(v83 + 20);
      }
      *(_DWORD *)(v83 + 16) = *v86;
      ++v81;
      v82 -= 8;
    }
    while (v82);
  }
  return result;
}

uint64_t WebCore::GridTrackSizingAlgorithm::distributeSpaceToTracks<(WebCore::TrackSizeComputationVariant)1,(WebCore::TrackSizeComputationPhase)4>(uint64_t result, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  double *v17;
  double v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  double v22;
  double v23;
  BOOL v24;
  _BOOL4 v25;
  double *v26;
  double v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  double v31;
  double v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  int v38;
  _BOOL4 v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  signed int v49;
  signed int v50;
  int v51;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  double v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  double *v66;
  double v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  int v82;
  int v83;
  int v84;
  signed int v85;
  signed int v86;
  int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  _DWORD *v94;

  v5 = result;
  v6 = *(unsigned int *)(result + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)result;
    v8 = 8 * v6;
    do
    {
      v9 = *(_DWORD **)(*(_QWORD *)v7 + 8);
      v10 = v9[3];
      if (v10 == -64)
        v10 = v9[2] & ~((int)v9[2] >> 31);
      v9[5] = v10;
      v7 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  if ((int)*a3 <= 0)
    goto LABEL_120;
  v11 = *(unsigned int *)(result + 12);
  if (!(_DWORD)v11)
  {
    v25 = 1;
    if (a2)
      goto LABEL_75;
    goto LABEL_120;
  }
  if (v11 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x19635260CLL);
  }
  v12 = 8 * v11;
  v13 = (WTF *)WTF::fastMalloc((WTF *)(8 * v11));
  v14 = v11 - 1;
  v15 = *(unsigned int *)(v5 + 12);
  v16 = *(uint64_t **)v5;
  if (v15 <= v11)
  {
    if (v14 < v15)
    {
      v17 = (double *)((char *)v13 + 8 * v14);
      v18 = 0.0;
      v19 = 1;
      v20 = &v16[v14];
      do
      {
        v21 = *(_QWORD *)(*v20 + 8);
        if (!*(_BYTE *)(v21 + 128))
          goto LABEL_140;
        v22 = *(double *)(v21 + 80);
        v18 = v18 + v22;
        if (v18 <= 0.0)
          v23 = (double)v19;
        else
          v23 = v18 / v22;
        *v17-- = v23;
        --v20;
        ++v19;
        v24 = __OFSUB__((_DWORD)v11, 1);
        LODWORD(v11) = v11 - 1;
      }
      while (!(((int)v11 < 0) ^ v24 | ((_DWORD)v11 == 0)));
      goto LABEL_29;
    }
LABEL_138:
    __break(0xC471u);
    JUMPOUT(0x196352614);
  }
  if (v14 >= v15)
    goto LABEL_138;
  v26 = (double *)((char *)v13 + 8 * v14);
  v27 = 0.0;
  v28 = 1;
  v29 = &v16[v14];
  do
  {
    v30 = *(_QWORD *)(*v29 + 8);
    if (!*(_BYTE *)(v30 + 128))
      goto LABEL_140;
    v31 = *(double *)(v30 + 80);
    v27 = v27 + v31;
    if (v27 <= 0.0)
      v32 = (double)v28;
    else
      v32 = v27 / v31;
    *v26-- = v32;
    --v29;
    ++v28;
    v24 = __OFSUB__((_DWORD)v11, 1);
    LODWORD(v11) = v11 - 1;
  }
  while (!(((int)v11 < 0) ^ v24 | ((_DWORD)v11 == 0)));
LABEL_29:
  v33 = 0;
  v34 = *(uint64_t **)v5;
  v35 = 8 * v15;
  do
  {
    if (v35 == v33)
    {
      __break(0xC471u);
      JUMPOUT(0x1963525FCLL);
    }
    v36 = v34[v33 / 8];
    if (v36)
      v36 = *(_QWORD *)(v36 + 8);
    v37 = (double)(int)*a3 * 0.015625 / *(double *)((char *)v13 + v33) * 64.0;
    if (v37 >= 2147483650.0)
    {
      v40 = *(_DWORD *)(v36 + 12) != -64 && *(_BYTE *)(v36 + 32) == 0;
      v38 = 0x7FFFFFFF;
LABEL_42:
      v41 = 0;
      goto LABEL_43;
    }
    if (v37 <= -2147483650.0)
    {
      v40 = *(_DWORD *)(v36 + 12) != -64 && *(_BYTE *)(v36 + 32) == 0;
      v38 = 0x80000000;
      v41 = 0x80000000;
    }
    else
    {
      v38 = (int)v37;
      v40 = *(_DWORD *)(v36 + 12) != -64 && *(_BYTE *)(v36 + 32) == 0;
      v41 = (int)v37;
      if (v38 >= 1)
        goto LABEL_42;
    }
LABEL_43:
    if (v40)
      v38 = v41;
    v42 = *(_QWORD *)(v36 + 24);
    if ((v42 & 0xFF00000000) != 0)
    {
      v43 = *(_DWORD *)(v36 + 20);
      v24 = __OFSUB__((_DWORD)v42, v43);
      v49 = v42 - v43;
      v50 = (v42 >> 31) + 0x7FFFFFFF;
      if (!v24)
        v50 = v49;
      if (v50 >= v38)
        v51 = v38;
      else
        v51 = v50;
      if (v50 >= 1)
        v38 = v51;
    }
    else
    {
      v43 = *(_DWORD *)(v36 + 20);
    }
    v24 = __OFADD__(v43, v38);
    v44 = v43 + v38;
    v45 = (v43 >> 31) + 0x7FFFFFFF;
    if (!v24)
      v45 = v44;
    *(_DWORD *)(v36 + 20) = v45;
    v24 = __OFSUB__(*a3, v38);
    v46 = *a3 - v38;
    v47 = (*a3 >> 31) + 0x7FFFFFFF;
    if (!v24)
      v47 = v46;
    *a3 = v47;
    v33 += 8;
  }
  while (v12 != v33);
  result = WTF::fastFree(v13, (void *)v44);
  v25 = *a3 > 0;
  if (a2)
  {
LABEL_75:
    if (v25)
    {
      v53 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v53)
      {
        if (v53 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19635261CLL);
        }
        v54 = 8 * v53;
        v55 = (WTF *)WTF::fastMalloc((WTF *)(8 * v53));
        v56 = v53 - 1;
        v57 = *((unsigned int *)a2 + 3);
        v58 = *a2;
        if (v57 <= v53)
        {
          if (v56 < v57)
          {
            v59 = (double *)((char *)v55 + 8 * v56);
            v60 = 0.0;
            v61 = 1;
            v62 = v58 + 8 * v56;
            while (1)
            {
              v63 = *(_QWORD *)(*(_QWORD *)v62 + 8);
              if (!*(_BYTE *)(v63 + 128))
                break;
              v64 = *(double *)(v63 + 80);
              v60 = v60 + v64;
              if (v60 <= 0.0)
                v65 = (double)v61;
              else
                v65 = v60 / v64;
              *v59-- = v65;
              v62 -= 8;
              ++v61;
              v24 = __OFSUB__((_DWORD)v53, 1);
              LODWORD(v53) = v53 - 1;
              if (((int)v53 < 0) ^ v24 | ((_DWORD)v53 == 0))
                goto LABEL_96;
            }
LABEL_134:
            __break(0xC471u);
            JUMPOUT(0x1963525F4);
          }
LABEL_140:
          __break(0xC471u);
          JUMPOUT(0x1963525D4);
        }
        if (v56 >= v57)
          goto LABEL_140;
        v66 = (double *)((char *)v55 + 8 * v56);
        v67 = 0.0;
        v68 = 1;
        v69 = v58 + 8 * v56;
        do
        {
          v70 = *(_QWORD *)(*(_QWORD *)v69 + 8);
          if (!*(_BYTE *)(v70 + 128))
            goto LABEL_134;
          v71 = *(double *)(v70 + 80);
          v67 = v67 + v71;
          if (v67 <= 0.0)
            v72 = (double)v68;
          else
            v72 = v67 / v71;
          *v66-- = v72;
          v69 -= 8;
          ++v68;
          v24 = __OFSUB__((_DWORD)v53, 1);
          LODWORD(v53) = v53 - 1;
        }
        while (!(((int)v53 < 0) ^ v24 | ((_DWORD)v53 == 0)));
LABEL_96:
        v73 = 0;
        v74 = *a2;
        v75 = 8 * v57;
        do
        {
          if (v75 == v73)
          {
            __break(0xC471u);
            JUMPOUT(0x196352604);
          }
          v76 = *(_QWORD *)(v74 + v73);
          if (v76)
            v76 = *(_QWORD *)(v76 + 8);
          v77 = (double)(int)*a3 * 0.015625 / *(double *)((char *)v55 + v73) * 64.0;
          if (v77 >= 2147483650.0)
          {
            v78 = 0x7FFFFFFF;
          }
          else if (v77 <= -2147483650.0)
          {
            v78 = 0x80000000;
          }
          else
          {
            v78 = (int)v77;
          }
          v79 = *(_QWORD *)(v76 + 24);
          if ((v79 & 0xFF00000000) != 0)
          {
            v80 = *(_DWORD *)(v76 + 20);
            v24 = __OFSUB__((_DWORD)v79, v80);
            v85 = v79 - v80;
            v86 = (v79 >> 31) + 0x7FFFFFFF;
            if (!v24)
              v86 = v85;
            if (v86 >= v78)
              v87 = v78;
            else
              v87 = v86;
            if (v86 >= 1)
              v78 = v87;
          }
          else
          {
            v80 = *(_DWORD *)(v76 + 20);
          }
          v24 = __OFADD__(v80, v78);
          v81 = v80 + v78;
          v82 = (v80 >> 31) + 0x7FFFFFFF;
          if (!v24)
            v82 = v81;
          *(_DWORD *)(v76 + 20) = v82;
          v24 = __OFSUB__(*a3, v78);
          v83 = *a3 - v78;
          v84 = (*a3 >> 31) + 0x7FFFFFFF;
          if (!v24)
            v84 = v83;
          *a3 = v84;
          v73 += 8;
        }
        while (v54 != v73);
        result = WTF::fastFree(v55, (void *)v81);
      }
    }
  }
LABEL_120:
  v88 = *(unsigned int *)(v5 + 12);
  if ((_DWORD)v88)
  {
    v89 = *(uint64_t **)v5;
    v90 = 8 * v88;
    do
    {
      v91 = *v89;
      if (*v89)
      {
        v91 = *(_QWORD *)(v91 + 8);
        v93 = v91 + 16;
        v92 = *(_DWORD *)(v91 + 16);
      }
      else
      {
        v92 = MEMORY[0x10];
        v93 = 16;
      }
      if (v92 == -64)
      {
        v94 = (_DWORD *)(v91 + 20);
      }
      else if (v92 >= *(_DWORD *)(v91 + 20))
      {
        v94 = (_DWORD *)v93;
      }
      else
      {
        v94 = (_DWORD *)(v91 + 20);
      }
      *(_DWORD *)(v91 + 16) = *v94;
      ++v89;
      v90 -= 8;
    }
    while (v90);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl> const&,BOOL>(uint64_t result, uint64_t *a2, WTF **a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF **v11;
  WTF *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  WTF **v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = *((_QWORD *)*a3 + 1);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (WTF **)(v8 + 16 * v19);
    v21 = *v20;
    if (*v20 != (WTF *)-1)
      break;
    v11 = (WTF **)(v8 + 16 * v19);
LABEL_10:
    v17 = i + v19;
  }
  if (!v21)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v22 = *a3;
      *(_DWORD *)v22 = *(_DWORD *)*a3 + 1;
      *v11 = v22;
      v20 = v11;
    }
    else
    {
      ++*(_DWORD *)v12;
      *v20 = v12;
    }
    *((_BYTE *)v20 + 8) = *a4;
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v26 = *a2;
    if (*a2)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
        goto LABEL_24;
    }
    else if (3 * v29 <= 4 * v28)
    {
      if (!(_DWORD)v29)
      {
        v30 = 8;
LABEL_27:
        result = WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,BOOL,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, v30, v20);
        v20 = (WTF **)result;
        v26 = *a2;
        if (*a2)
          v29 = *(unsigned int *)(v26 - 4);
        else
          v29 = 0;
        goto LABEL_29;
      }
LABEL_24:
      v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
      goto LABEL_27;
    }
LABEL_29:
    *(_QWORD *)v7 = v20;
    *(_QWORD *)(v7 + 8) = v26 + 16 * v29;
    *(_BYTE *)(v7 + 16) = 1;
    return result;
  }
  if (*((_QWORD *)v21 + 1) != v13)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v23 = 0;
  else
    v23 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)v7 = v20;
  *(_QWORD *)(v7 + 8) = v8 + 16 * v23;
  *(_BYTE *)(v7 + 16) = 0;
  *(_BYTE *)(v8 + 16 * v19 + 8) = *a4;
  return result;
}

uint64_t WebCore::GridTrackSize::operator=(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_DWORD *)result = *(_DWORD *)a2;
  if (result != a2)
  {
    if (*(_BYTE *)(result + 12) == 11)
    {
      v17 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v14 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(result + 8));
      result = v14;
      a2 = v17;
    }
    v2 = *(unsigned __int8 *)(a2 + 12);
    *(_BYTE *)(result + 12) = v2;
    *(_BYTE *)(result + 13) = *(_BYTE *)(a2 + 13);
    if (v2 - 2 < 9)
    {
      v3 = *(unsigned __int8 *)(a2 + 14);
      *(_BYTE *)(result + 14) = v3;
      if (v3)
      {
        *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
        goto LABEL_6;
      }
      v11 = *(_DWORD *)(a2 + 8);
      goto LABEL_17;
    }
    if (v2 <= 0xD)
    {
      if (((1 << v2) & 0x3003) != 0)
      {
        *(_DWORD *)(result + 8) = 0;
      }
      else if (v2 == 11)
      {
        v11 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = 0;
LABEL_17:
        *(_DWORD *)(result + 8) = v11;
      }
    }
LABEL_6:
    *(_BYTE *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
    *(_QWORD *)(result + 16) = v4;
    if (*(_BYTE *)(result + 36) == 11)
    {
      v18 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v15 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(result + 32));
      result = v15;
      a2 = v18;
    }
    v5 = *(unsigned __int8 *)(a2 + 36);
    *(_BYTE *)(result + 36) = v5;
    *(_BYTE *)(result + 37) = *(_BYTE *)(a2 + 37);
    if (v5 - 2 < 9)
    {
      v6 = *(unsigned __int8 *)(a2 + 38);
      *(_BYTE *)(result + 38) = v6;
      if (v6)
      {
        *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
        goto LABEL_10;
      }
      v12 = *(_DWORD *)(a2 + 32);
      goto LABEL_19;
    }
    if (v5 <= 0xD)
    {
      if (((1 << v5) & 0x3003) != 0)
      {
        *(_DWORD *)(result + 32) = 0;
      }
      else if (v5 == 11)
      {
        v12 = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a2 + 32) = 0;
LABEL_19:
        *(_DWORD *)(result + 32) = v12;
      }
    }
LABEL_10:
    *(_BYTE *)(a2 + 36) = 0;
    v7 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
    *(_QWORD *)(result + 40) = v7;
    if (*(_BYTE *)(result + 60) == 11)
    {
      v19 = a2;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v16 = result;
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(result + 56));
      result = v16;
      a2 = v19;
    }
    v8 = *(unsigned __int8 *)(a2 + 60);
    *(_BYTE *)(result + 60) = v8;
    *(_BYTE *)(result + 61) = *(_BYTE *)(a2 + 61);
    if (v8 - 2 >= 9)
    {
      if (v8 > 0xD)
        goto LABEL_14;
      if (((1 << v8) & 0x3003) != 0)
      {
        *(_DWORD *)(result + 56) = 0;
        goto LABEL_14;
      }
      if (v8 != 11)
        goto LABEL_14;
      v13 = *(_DWORD *)(a2 + 56);
      *(_DWORD *)(a2 + 56) = 0;
    }
    else
    {
      v9 = *(unsigned __int8 *)(a2 + 62);
      *(_BYTE *)(result + 62) = v9;
      if (v9)
      {
        *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
LABEL_14:
        *(_BYTE *)(a2 + 60) = 0;
        goto LABEL_15;
      }
      v13 = *(_DWORD *)(a2 + 56);
    }
    *(_DWORD *)(result + 56) = v13;
    goto LABEL_14;
  }
LABEL_15:
  v10 = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(result + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = v10;
  *(_WORD *)(result + 80) = *(_WORD *)(a2 + 80);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ImageQualityController::*&)(void),WebCore::ImageQualityController*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

__n128 WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WebCore::LayoutSize>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::reinsert(uint64_t a1, __n128 *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __n128 result;
  int v8;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = ~(a2->n128_u64[0] << 32) + a2->n128_u64[0];
  v4 = 9 * (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) ^ (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  if (*(_QWORD *)(a1 + 16 * v6))
  {
    v8 = 1;
    do
      v6 = ((_DWORD)v6 + v8++) & v2;
    while (*(_QWORD *)(a1 + 16 * v6));
  }
  result = *a2;
  *(__n128 *)(a1 + 16 * v6) = *a2;
  return result;
}

uint64_t *WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::inlineSet<void const* const&,WebCore::LayoutSize const&>@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  __n128 *v16;
  unint64_t v17;
  __n128 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WebCore::LayoutSize>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (__n128 *)(v8 + 16 * v15);
  v17 = v16->n128_u64[0];
  if (v16->n128_u64[0])
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v8 + 16 * v20;
        *(_BYTE *)(a4 + 16) = 0;
        v16->n128_u64[1] = *a3;
        return result;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (__n128 *)(v8 + 16 * v15);
      v17 = v16->n128_u64[0];
      ++v19;
    }
    while (v16->n128_u64[0]);
    if (v18)
    {
      v18->n128_u64[0] = 0;
      v18->n128_u64[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  v16->n128_u64[0] = v11;
  v16->n128_u64[1] = *a3;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_23;
LABEL_27:
    result = (uint64_t *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WebCore::LayoutSize>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::expand(v6, v16);
    v16 = (__n128 *)result;
    v23 = *v6;
    if (*v6)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
    goto LABEL_23;
  }
  if (3 * v26 <= 4 * v25)
    goto LABEL_27;
LABEL_23:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v23 + 16 * v26;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WebCore::LayoutSize>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::expand(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_3;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = v5 << (6 * v6 >= 2 * v5);
LABEL_4:
  v8 = WTF::fastMalloc((WTF *)(16 * v7 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (v7)
    bzero((void *)(v8 + 16), 16 * v7);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v12 = 0;
  if (v5)
  {
    v14 = v5;
    v15 = (__n128 *)v4;
    do
    {
      if (v15->n128_u64[0] + 1 >= 2)
      {
        WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WebCore::LayoutSize>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::reinsert(*a1, v15);
        if (v15 == a2)
          v12 = v16;
      }
      ++v15;
      --v14;
    }
    while (v14);
    goto LABEL_16;
  }
  result = 0;
  if (v4)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v12;
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>&>@<X0>(uint64_t *a1@<X0>, WTF **a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF **v11;
  WTF *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  WTF **v20;
  WTF *v21;
  WTF *v22;
  uint64_t *result;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a2;
  v13 = *((_QWORD *)*a2 + 1);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (WTF **)(v8 + 16 * v19);
    v21 = *v20;
    if (!*v20)
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v12 = *a2;
        v20 = v11;
      }
      *a2 = 0;
      v22 = *v20;
      *v20 = v12;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          WTF::fastFree(v22, a2);
        else
          --*(_DWORD *)v22;
      }
      result = WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WebCore::LayoutSize>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::HashTable((uint64_t *)&v34, a3);
      v25 = (uint64_t)v20[1];
      v20[1] = v34;
      v34 = (WTF *)v25;
      if (v25)
        result = (uint64_t *)WTF::fastFree((WTF *)(v25 - 16), v24);
      v26 = *a1;
      if (*a1)
        v27 = *(_DWORD *)(v26 - 12) + 1;
      else
        v27 = 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *a1;
      if (*a1)
        v29 = *(_DWORD *)(v28 - 12);
      else
        v29 = 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
      {
        if (v31 > 2 * v30)
          goto LABEL_20;
      }
      else
      {
        if (3 * v31 > 4 * v30)
        {
LABEL_20:
          *(_QWORD *)a4 = v20;
          *(_QWORD *)(a4 + 8) = v28 + 16 * v31;
          *(_BYTE *)(a4 + 16) = 1;
          return result;
        }
        if (!(_DWORD)v31)
        {
          v32 = 8;
LABEL_31:
          result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v32, (uint64_t)v20);
          v20 = (WTF **)result;
          v28 = *a1;
          if (*a1)
            v31 = *(unsigned int *)(v28 - 4);
          else
            v31 = 0;
          goto LABEL_20;
        }
      }
      v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
      goto LABEL_31;
    }
    if (v21 != (WTF *)-1)
      break;
    v11 = (WTF **)(v8 + 16 * v19);
LABEL_7:
    v17 = i + v19;
  }
  if (*((_QWORD *)v21 + 1) != v13)
    goto LABEL_7;
  if ((v9 & 1) != 0)
    v33 = 0;
  else
    v33 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v33;
  *(_BYTE *)(a4 + 16) = 0;
  return WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::operator=((uint64_t *)(v8 + 16 * v19 + 8), a3);
}

uint64_t *WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::operator=(uint64_t *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;

  WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WebCore::LayoutSize>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::HashTable(&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v3);
  return a1;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = v6 + 16 * v13;
      v17 = *(WTF **)v16;
      if (*(_QWORD *)v16)
      {
        if (v17 != (WTF *)-1)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = ~(*((_QWORD *)v17 + 1) << 32) + *((_QWORD *)v17 + 1);
          v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
          v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
          v24 = v20 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~((_DWORD)v23 << 27)));
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = v19 + 16 * v26;
          v30 = (_QWORD *)(v28 + 8);
          v29 = *(_QWORD *)(v28 + 8);
          if (v29)
          {
            WTF::fastFree((WTF *)(v29 - 16), v10);
            v36 = *(WTF **)v28;
            *(_QWORD *)v28 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 1)
                WTF::fastFree(v36, v10);
              else
                --*(_DWORD *)v36;
            }
          }
          else
          {
            *(_QWORD *)v28 = 0;
          }
          v31 = *(WTF **)v16;
          *(_QWORD *)v16 = 0;
          *(_QWORD *)v28 = v31;
          v32 = v6 + 16 * v13;
          *v30 = 0;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          *v30 = v33;
          v34 = *(_QWORD *)(v32 + 8);
          if (v34)
            WTF::fastFree((WTF *)(v34 - 16), v10);
          v35 = *(WTF **)v16;
          *(_QWORD *)v16 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 1)
              WTF::fastFree(v35, v10);
            else
              --*(_DWORD *)v35;
          }
          if (v16 == a3)
            v14 = v28;
        }
      }
      else
      {
        v18 = *(_QWORD *)(v16 + 8);
        if (v18)
        {
          WTF::fastFree((WTF *)(v18 - 16), v10);
          v17 = *(WTF **)v16;
        }
        *(_QWORD *)v16 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
            WTF::fastFree(v17, v10);
          else
            --*(_DWORD *)v17;
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

__n128 WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LayerAncestorClippingStack::ClippingStackEntry>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;

  v3 = WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 96 * a1[3];
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  LOBYTE(v5) = *(_BYTE *)(v3 + 56);
  v6 = *(_OWORD *)(v3 + 40);
  v7 = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v4 + 24) = v7;
  *(_OWORD *)(v4 + 40) = v6;
  *(_BYTE *)(v4 + 56) = v5;
  result = *(__n128 *)(v3 + 64);
  *(__n128 *)(v4 + 64) = result;
  v9 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v4 + 80) = v9;
  v10 = *(_QWORD *)(v3 + 88);
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v4 + 88) = v10;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 96 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::LayerAncestorClippingStack::ClippingStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;

  if (result[2] < a2)
  {
    if (a2 >= 0x2AAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x196353650);
    }
    v2 = result;
    v3 = *(WTF **)result;
    v4 = result[3];
    v5 = 96 * a2;
    result = (unsigned int *)WTF::fastMalloc((WTF *)(96 * a2));
    v2[2] = (v5 & 0xFFFFFFE0) / 0x60;
    *(_QWORD *)v2 = result;
    if (v4)
    {
      v7 = result;
      v8 = (WTF *)((char *)v3 + 96 * v4);
      v9 = v3;
      do
      {
        v10 = *(unsigned int **)v9;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)v7 = v10;
        v11 = *(_OWORD *)((char *)v9 + 8);
        v12 = *(_OWORD *)((char *)v9 + 24);
        v13 = *(_OWORD *)((char *)v9 + 40);
        *((_BYTE *)v7 + 56) = *((_BYTE *)v9 + 56);
        *(_OWORD *)(v7 + 10) = v13;
        *(_OWORD *)(v7 + 6) = v12;
        *(_OWORD *)(v7 + 2) = v11;
        *((_OWORD *)v7 + 4) = *((_OWORD *)v9 + 4);
        v14 = *((_QWORD *)v9 + 10);
        *((_QWORD *)v9 + 10) = 0;
        *((_QWORD *)v7 + 10) = v14;
        v15 = *((_QWORD *)v9 + 11);
        *((_QWORD *)v9 + 11) = 0;
        *((_QWORD *)v7 + 11) = v15;
        v16 = (_DWORD *)*((_QWORD *)v9 + 11);
        *((_QWORD *)v9 + 11) = 0;
        if (v16)
        {
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
          else
            --v16[2];
        }
        v17 = (_DWORD *)*((_QWORD *)v9 + 10);
        *((_QWORD *)v9 + 10) = 0;
        if (v17)
        {
          if (v17[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
          else
            --v17[2];
        }
        result = *(unsigned int **)v9;
        *(_QWORD *)v9 = 0;
        if (result)
        {
          if (*result == 1)
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          else
            --*result;
        }
        v9 = (WTF *)((char *)v9 + 96);
        v7 += 24;
      }
      while (v9 != v8);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        v2[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v3, v6);
    }
  }
  return result;
}

WTF *WTF::VectorTypeOperations<WebCore::LayerAncestorClippingStack::ClippingStackEntry>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  WTF *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *(_OWORD *)((char *)v5 + 8);
      v8 = *(_OWORD *)((char *)v5 + 24);
      v9 = *(_OWORD *)((char *)v5 + 40);
      *(_BYTE *)(a3 + 56) = *((_BYTE *)v5 + 56);
      *(_OWORD *)(a3 + 40) = v9;
      *(_OWORD *)(a3 + 24) = v8;
      *(_OWORD *)(a3 + 8) = v7;
      *(_OWORD *)(a3 + 64) = *((_OWORD *)v5 + 4);
      v10 = *((_QWORD *)v5 + 10);
      *((_QWORD *)v5 + 10) = 0;
      *(_QWORD *)(a3 + 80) = v10;
      v11 = *((_QWORD *)v5 + 11);
      *((_QWORD *)v5 + 11) = 0;
      *(_QWORD *)(a3 + 88) = v11;
      v12 = (_DWORD *)*((_QWORD *)v5 + 11);
      *((_QWORD *)v5 + 11) = 0;
      if (v12)
      {
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
        else
          --v12[2];
      }
      v13 = (_DWORD *)*((_QWORD *)v5 + 10);
      *((_QWORD *)v5 + 10) = 0;
      if (v13)
      {
        if (v13[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
        else
          --v13[2];
      }
      result = *(WTF **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, a2);
        else
          --*(_DWORD *)result;
      }
      v5 = (WTF *)((char *)v5 + 96);
      a3 += 96;
    }
    while (v5 != a2);
  }
  return result;
}

double WebCore::OverlapMapContainer::add(WTF *a1, int a2, WebCore::LayoutRect *a3, uint64_t a4)
{
  uint64_t v5;
  WTF *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  double result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;

  v5 = *(unsigned int *)(a4 + 12);
  if (v5 >= 2)
  {
    v12 = 1;
    while (1)
    {
      v13 = (char *)(*(_QWORD *)a4 + 24 * v12);
      v14 = *((unsigned int *)a1 + 9);
      if (!(_DWORD)v14)
        break;
      v6 = (WTF *)*((_QWORD *)a1 + 3);
      v15 = 72 * v14;
      while (*(_QWORD *)v6 != *(_QWORD *)v13)
      {
        v6 = (WTF *)((char *)v6 + 72);
        v15 -= 72;
        if (!v15)
          goto LABEL_14;
      }
      ++v12;
      a1 = v6;
      if (v12 == v5)
        goto LABEL_3;
    }
LABEL_14:
    a1 = WebCore::OverlapMapContainer::ClippingScope::addChildWithLayerAndBounds((uint64_t)a1, v13);
  }
  v6 = a1;
LABEL_3:
  v7 = (uint64_t *)((char *)v6 + 40);
  v8 = *((unsigned int *)v6 + 13);
  if ((_DWORD)v8 == *((_DWORD *)v6 + 12))
  {
    v16 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)a3);
    v8 = *((unsigned int *)v6 + 13);
    v9 = *((_QWORD *)v6 + 5);
    v10 = *v16;
  }
  else
  {
    v9 = *v7;
    v10 = *(_OWORD *)a3;
  }
  *(_OWORD *)(v9 + 16 * v8) = v10;
  ++*((_DWORD *)v6 + 13);
  *(_QWORD *)&result = WebCore::LayoutRect::unite((WTF *)((char *)v6 + 56), a3).n128_u64[0];
  return result;
}

void WebCore::LayerOverlapMap::add(uint64_t a1, char *a2, WebCore::LayoutRect *a3, uint64_t a4)
{
  uint64_t v4;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  int v16;
  _OWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;

  v4 = *(unsigned int *)(a1 + 12);
  if (v4 <= 1)
    goto LABEL_53;
  v8 = *(WTF **)(*(_QWORD *)a1 + 8 * v4 - 16);
  v9 = *(unsigned int *)(a4 + 12);
  if (v9 >= 2)
  {
    v37 = 1;
    while (1)
    {
      a2 = (char *)(*(_QWORD *)a4 + 24 * v37);
      v38 = *((unsigned int *)v8 + 9);
      if (!(_DWORD)v38)
        break;
      v10 = (WTF *)*((_QWORD *)v8 + 3);
      v39 = 72 * v38;
      while (*(_QWORD *)v10 != *(_QWORD *)a2)
      {
        v10 = (WTF *)((char *)v10 + 72);
        v39 -= 72;
        if (!v39)
          goto LABEL_48;
      }
      ++v37;
      v8 = v10;
      if (v37 == v9)
        goto LABEL_4;
    }
LABEL_48:
    v8 = WebCore::OverlapMapContainer::ClippingScope::addChildWithLayerAndBounds((uint64_t)v8, a2);
  }
  v10 = v8;
LABEL_4:
  v11 = (uint64_t *)((char *)v10 + 40);
  v12 = *((unsigned int *)v10 + 13);
  if ((_DWORD)v12 == *((_DWORD *)v10 + 12))
  {
    v40 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)a3);
    v12 = *((unsigned int *)v10 + 13);
    v13 = *((_QWORD *)v10 + 5);
    v14 = *v40;
  }
  else
  {
    v13 = *v11;
    v14 = *(_OWORD *)a3;
  }
  *(_OWORD *)(v13 + 16 * v12) = v14;
  ++*((_DWORD *)v10 + 13);
  v15 = *((_DWORD *)a3 + 2);
  if (v15 >= 1)
  {
    v16 = *((_DWORD *)a3 + 3);
    if (v16 >= 1)
    {
      v17 = (_OWORD *)((char *)v10 + 56);
      v18 = *((_DWORD *)v10 + 16);
      if (v18 < 1 || (v19 = *((_DWORD *)v10 + 17), v19 <= 0))
      {
        *v17 = *(_OWORD *)a3;
      }
      else
      {
        v20 = *((_DWORD *)v10 + 14);
        v21 = *((_DWORD *)v10 + 15);
        v22 = *(_DWORD *)a3;
        v23 = *((_DWORD *)a3 + 1);
        if (*(_DWORD *)a3 >= (signed int)v20)
          v24 = v20;
        else
          v24 = v22;
        if ((int)v23 >= (int)v21)
          v25 = v21;
        else
          v25 = v23;
        v26 = __OFADD__(v20, v18);
        v27 = v20 + v18;
        LODWORD(a2) = 0x7FFFFFFF;
        v28 = (v20 >> 31) + 0x7FFFFFFF;
        if (v26)
          v27 = v28;
        v26 = __OFADD__(v22, v15);
        v29 = v22 + v15;
        if (v26)
          v29 = (v22 >> 31) + 0x7FFFFFFF;
        if (v27 > v29)
          v29 = v27;
        v26 = __OFADD__(v21, v19);
        v30 = v21 + v19;
        if (v26)
          v30 = (v21 >> 31) + 0x7FFFFFFF;
        v26 = __OFADD__(v23, v16);
        v31 = v23 + v16;
        if (v26)
          v31 = (v23 >> 31) + 0x7FFFFFFF;
        if (v30 > v31)
          v31 = v30;
        *(_QWORD *)v17 = v24 | (v25 << 32);
        v26 = __OFSUB__(v29, (_DWORD)v24);
        v32 = v29 - v24;
        v33 = (v29 >> 31) + 0x7FFFFFFF;
        if (v26)
          v32 = v33;
        v26 = __OFSUB__(v31, (_DWORD)v25);
        v34 = v31 - v25;
        v35 = (v31 >> 31) + 0x7FFFFFFF;
        if (!v26)
          v35 = v34;
        *((_DWORD *)v10 + 16) = v32;
        *((_DWORD *)v10 + 17) = v35;
      }
    }
  }
  v36 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v36)
  {
    if ((_DWORD)v36 != 1)
    {
      WebCore::OverlapMapContainer::add(*(WTF **)(*(_QWORD *)(a1 + 16) + 8 * v36 - 16), (int)a2, a3, a4);
      goto LABEL_39;
    }
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x196353A28);
  }
LABEL_39:
  *(_BYTE *)(a1 + 1120) = 0;
}

uint64_t WebCore::LayoutRepainter::LayoutRepainter(uint64_t a1, WebCore::RenderObject *this, __int16 a3, __int16 a4, char a5)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  _OWORD v17[2];
  int v18;

  *(_QWORD *)a1 = this;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v7 = a1 + 16;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if ((a3 & 0xFF00) != 0)
  {
    v9 = a3 == 1;
  }
  else
  {
    v8 = *((_DWORD *)this + 5);
    if ((v8 & 0x200) == 0)
      goto LABEL_11;
    if ((v8 & 0x8000) != 0)
    {
      if ((*((_BYTE *)this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196353B94);
      }
      v11 = *((_QWORD *)this + 18);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 25) & 8) != 0)
        {
LABEL_11:
          v10 = 0;
          goto LABEL_12;
        }
      }
    }
    v9 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                              + 40)
                                                                  + 8)
                                                      + 528)
                                          + 8)
                              + 288)
                  + 476) == 0;
  }
  v10 = v9;
LABEL_12:
  *(_BYTE *)(a1 + 52) = v10;
  v12 = a4 == 1;
  if ((a4 & 0xFF00) == 0)
    v12 = 0;
  *(_BYTE *)(a1 + 53) = v12;
  *(_BYTE *)(a1 + 54) = a5;
  if (v10)
  {
    WebCore::RenderObject::containerForRepaint(this, (uint64_t)v17);
    v13 = *((_QWORD *)&v17[0] + 1);
    *v6 = *((_QWORD *)&v17[0] + 1);
    if (v13)
    {
      v14 = *(_DWORD *)(v13 + 16);
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x196353B74);
      }
      *(_DWORD *)(v13 + 16) = v14 - 1;
    }
    (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)a1 + 464))(v17);
    v15 = v17[1];
    *(_OWORD *)v7 = v17[0];
    *(_OWORD *)(v7 + 16) = v15;
    *(_DWORD *)(v7 + 32) = v18;
  }
  return a1;
}

uint64_t WebCore::LayoutRepainter::repaintAfterLayout(WebCore::LayoutRepainter *this)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  WebCore *v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WebCore *v14;
  WTF *v15;
  __int128 v16[2];

  if (!*((_BYTE *)this + 52))
    return 0;
  if (*((_BYTE *)this + 53))
  {
    v4 = *(_QWORD *)this;
    goto LABEL_6;
  }
  v4 = *(_QWORD *)this;
  if ((*(_DWORD *)(*(_QWORD *)this + 20) & 8) != 0)
  {
LABEL_6:
    v5 = 1;
    goto LABEL_7;
  }
  v5 = 0;
LABEL_7:
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v4 + 464))(v16);
  v6 = *(WebCore **)this;
  v7 = *((_QWORD *)this + 1);
  if (!v7)
  {
    v8 = 0;
    goto LABEL_9;
  }
  v13 = *((_QWORD *)this + 1);
  v14 = *(WebCore **)this;
  v8 = *(WTF **)(v7 + 8);
  if (!v8)
  {
    v8 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *((_QWORD *)v8 + 1) = v13;
    v12 = *(WTF **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v8;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WTF::fastFree(v12, v11);
        v8 = *(WTF **)(v13 + 8);
        if (!v8)
          goto LABEL_17;
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
  ++*(_DWORD *)v8;
LABEL_17:
  v6 = v14;
LABEL_9:
  v15 = v8;
  v1 = WebCore::RenderElement::repaintAfterLayoutIfNeeded(v6, &v15, (const WebCore::FillLayer *)v5, (__int128 *)this + 1, v16);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, v9);
    else
      --*(_DWORD *)v10;
  }
  return v1;
}

_QWORD *WebCore::LegacyInlineBox::removeFromParent(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this[3];
  if (v1)
  {
    v2 = this;
    if ((*(_WORD *)(v1 + 52) & 0x100) == 0)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 184))(this[3]);
    if (*(_QWORD **)(v1 + 72) == v2)
      *(_QWORD *)(v1 + 72) = v2[1];
    if (*(_QWORD **)(v1 + 80) == v2)
      *(_QWORD *)(v1 + 80) = v2[2];
    v3 = v2[1];
    if (v3)
      *(_QWORD *)(v3 + 16) = v2[2];
    v4 = v2[2];
    if (v4)
      *(_QWORD *)(v4 + 8) = v3;
    v2[3] = 0;
  }
  return this;
}

float WebCore::LegacyInlineBox::logicalHeight(WebCore::LegacyInlineBox *this, WTF::StringImpl *a2)
{
  __int16 v3;
  uint64_t v4;
  char *LineStyle;
  uint64_t v6;
  uint64_t v7;
  float result;
  WTF *v9;
  float v10;
  _BYTE *v11;
  char v12;
  WTF *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((_WORD *)this + 26);
  if ((v3 & 0x400) != 0)
  {
    (*(void (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)this + 120))(this);
    return result;
  }
  v4 = *((_QWORD *)this + 4);
  if ((v3 & 1) != 0)
  {
    v22 = *(_QWORD *)(v4 + 8);
    if ((*(_BYTE *)(v22 + 45) & 2) != 0)
    {
      v23 = *(_QWORD *)(v22 + 32);
      if (v23)
        v22 = *(_QWORD *)(v23 + 8);
      else
        v22 = 0;
    }
    LineStyle = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v22, a2);
  }
  else
  {
    if (v4)
      v4 = *(_QWORD *)(v4 + 8);
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    {
      v4 = *(_QWORD *)(v4 + 32);
      if (v4)
        v4 = *(_QWORD *)(v4 + 8);
    }
    LineStyle = (char *)(v4 + 80);
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  if ((*(_BYTE *)(v7 + 45) & 2) == 0 && *(_BYTE *)(v7 + 46) != 17)
  {
    if (v6)
    {
      v11 = *(_BYTE **)(v6 + 8);
      v12 = v11[45];
      if ((v12 & 2) != 0)
      {
        v11 = 0;
        goto LABEL_20;
      }
    }
    else
    {
      v11 = 0;
      v12 = MEMORY[0x2D];
      if ((MEMORY[0x2D] & 2) != 0)
      {
LABEL_20:
        v13 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)LineStyle, a2);
        v10 = (float)(*((_DWORD *)v13 + 12) + *((_DWORD *)v13 + 11));
        if (*((_QWORD *)this + 3))
        {
          v14 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 1048))(v11);
          v15 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 960))(v11);
          if (__OFADD__(v14, v15))
            v16 = (v14 >> 31) + 0x7FFFFFFF;
          else
            v16 = v14 + v15;
          v17 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 1056))(v11);
          v18 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 968))(v11);
          v19 = v17 + v18;
          if (__OFADD__(v17, v18))
            v19 = (v17 >> 31) + 0x7FFFFFFF;
          v20 = __OFADD__(v16, v19);
          v21 = v16 + v19;
          if (v20)
            v21 = (v16 >> 31) + 0x7FFFFFFF;
          return (float)((float)v21 * 0.015625) + v10;
        }
        return v10;
      }
    }
    if ((v12 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196353F28);
    }
    goto LABEL_20;
  }
  v9 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)LineStyle, a2);
  return (float)(*((_DWORD *)v9 + 12) + *((_DWORD *)v9 + 11));
}

uint64_t WebCore::LegacyInlineBox::boxModelObject(WebCore::LegacyInlineBox *this)
{
  uint64_t v1;
  uint64_t result;
  char v3;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    result = *(_QWORD *)(v1 + 8);
    v3 = *(_BYTE *)(result + 45);
    if ((v3 & 2) != 0)
      return 0;
  }
  else
  {
    result = 0;
    v3 = MEMORY[0x2D];
    if ((MEMORY[0x2D] & 2) != 0)
      return result;
  }
  if ((v3 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196353FA0);
  }
  return result;
}

uint64_t WebCore::LegacyInlineBox::baselinePosition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = v4 + 45;
  }
  else
  {
    v4 = 0;
    v5 = 45;
  }
  if ((*(_BYTE *)v5 & 8) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, BOOL, _QWORD))(*(_QWORD *)v4 + 1160))(v4, a2, *(_WORD *)(a1 + 52) & 1, (*(_WORD *)(a1 + 52) & 0x800) == 0, 0);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LegacyInlineBox::lineHeight(WebCore::LegacyInlineBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = v3 + 45;
  }
  else
  {
    v3 = 0;
    v4 = 45;
  }
  if ((*(_BYTE *)v4 & 8) != 0)
    return (*(uint64_t (**)(uint64_t, _QWORD, BOOL, _QWORD))(*(_QWORD *)v3 + 1152))(v3, *((_WORD *)this + 26) & 1, (*((_WORD *)this + 26) & 0x800) == 0, 0);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LegacyInlineBox::caretMinOffset(WebCore::LegacyInlineBox *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 8) + 528))(*(_QWORD *)(*((_QWORD *)this + 4) + 8));
}

uint64_t WebCore::LegacyInlineBox::caretMaxOffset(WebCore::LegacyInlineBox *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 8) + 536))(*(_QWORD *)(*((_QWORD *)this + 4) + 8));
}

uint64_t WebCore::LegacyInlineBox::dirtyLineBoxes(WebCore::LegacyInlineBox *this)
{
  WebCore::LegacyInlineBox *v1;
  uint64_t (*i)(void);
  uint64_t result;

  v1 = this;
  for (i = *(uint64_t (**)(void))(*(_QWORD *)this + 176); ; i = *(uint64_t (**)(void))(*(_QWORD *)v1 + 176))
  {
    result = i();
    v1 = (WebCore::LegacyInlineBox *)*((_QWORD *)v1 + 3);
    if (!v1 || (*((_WORD *)v1 + 26) & 0x100) != 0)
      break;
  }
  return result;
}

float WebCore::LegacyInlineBox::adjustPosition(WebCore::LegacyInlineBox *this, float a2, float a3)
{
  float result;
  float v4;

  result = *((float *)this + 11) + a2;
  v4 = *((float *)this + 12) + a3;
  *((float *)this + 11) = result;
  *((float *)this + 12) = v4;
  return result;
}

uint64_t WebCore::LegacyInlineBox::root(WebCore::LegacyInlineBox *this)
{
  WebCore::LegacyInlineBox *v1;
  uint64_t result;

  do
  {
    v1 = this;
    this = (WebCore::LegacyInlineBox *)*((_QWORD *)this + 3);
  }
  while (this);
  if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v1 + 88))(v1) & 1) != 0)
    return (uint64_t)v1;
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LegacyInlineFlowBox::firstLeafDescendant(WebCore::LegacyInlineFlowBox *this)
{
  WebCore::LegacyInlineFlowBox *v1;
  uint64_t result;

  v1 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)this + 9);
  if (!v1)
    return 0;
  while (1)
  {
    if (((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v1 + 136))(v1) & 1) != 0)
      return (uint64_t)v1;
    if (((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v1 + 72))(v1) & 1) == 0)
      break;
    result = WebCore::LegacyInlineFlowBox::firstLeafDescendant(v1);
    v1 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v1 + 1);
    if (!v1 || result)
      return result;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LegacyInlineFlowBox::lastLeafDescendant(WebCore::LegacyInlineFlowBox *this)
{
  WebCore::LegacyInlineFlowBox *v1;
  uint64_t result;

  v1 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)this + 10);
  if (!v1)
    return 0;
  while (1)
  {
    if (((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v1 + 136))(v1) & 1) != 0)
      return (uint64_t)v1;
    if (((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v1 + 72))(v1) & 1) == 0)
      break;
    result = WebCore::LegacyInlineFlowBox::lastLeafDescendant(v1);
    v1 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v1 + 2);
    if (!v1 || result)
      return result;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LegacyInlineBox::selectionState(WebCore::LegacyInlineBox *this)
{
  return (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 20) >> 25) & 7;
}

float WebCore::LegacyInlineBox::locationIncludingFlipping(WebCore::LegacyInlineBox *this)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  int v4;
  WebCore::LegacyInlineBox *v7;
  WebCore::LegacyInlineBox *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    v1 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 45) & 2) != 0)
    v1 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
  v2 = (unsigned __int16)*(_DWORD *)(v1 + 124) >> 13;
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x2A;
  if (v3 || v4 == 0)
    return *((float *)this + 11);
  v7 = (WebCore::LegacyInlineBox *)*((_QWORD *)this + 3);
  if (v7)
  {
    do
    {
      v8 = v7;
      v7 = (WebCore::LegacyInlineBox *)*((_QWORD *)v7 + 3);
    }
    while (v7);
    if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v8 + 88))(v8) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196354354);
    }
  }
  else
  {
    v8 = this;
    if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)this + 88))(this) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196354464);
    }
  }
  v10 = *((_QWORD *)v8 + 4);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  if ((*(_BYTE *)(v10 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196354424);
  }
  if ((*(_BYTE *)(v10 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x196354444);
  }
  if (((*(_DWORD *)(v10 + 124) >> 13) & 6u) - 2 < 4)
  {
    v11 = *(_DWORD *)(v10 + 160);
    if ((*((_WORD *)this + 26) & 0x800) != 0)
      v12 = *((float *)this + 10);
    else
      v12 = WebCore::LegacyInlineBox::logicalHeight(this, v9);
    return (float)((float)((float)v11 * 0.015625) - v12) - *((float *)this + 11);
  }
  else
  {
    v13 = *((float *)this + 11);
    if ((*((_WORD *)this + 26) & 0x800) != 0)
      WebCore::LegacyInlineBox::logicalHeight(this, v9);
    return v13;
  }
}

uint64_t WebCore::LegacyInlineBox::flipForWritingMode(uint64_t this, WebCore::LayoutRect *a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _QWORD *v25;

  v2 = *(_QWORD *)(this + 32);
  if (v2)
    v2 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 45) & 2) != 0)
    v2 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8);
  v3 = (unsigned __int16)*(_DWORD *)(v2 + 124) >> 13;
  v4 = v3 > 5;
  v5 = (1 << v3) & 0x2A;
  if (!v4 && v5 != 0)
  {
    v25 = (_QWORD *)this;
    v7 = *(_QWORD **)(this + 24);
    if (v7)
    {
      do
      {
        v25 = v7;
        v7 = (_QWORD *)v7[3];
      }
      while (v7);
      this = (*(uint64_t (**)(_QWORD *))(*v25 + 88))(v25);
      if ((this & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19635455CLL);
      }
    }
    else
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 88))(this);
      if ((this & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196354658);
      }
    }
    v8 = v25[4];
    if (v8)
      v8 = *(_QWORD *)(v8 + 8);
    if ((*(_BYTE *)(v8 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196354618);
    }
    if ((*(_BYTE *)(v8 + 52) & 7) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x196354638);
    }
    v9 = (unsigned __int16)*(_DWORD *)(v8 + 124) >> 13;
    if (v9 <= 5 && ((1 << v9) & 0x2A) != 0)
    {
      if ((*(_BYTE *)(v8 + 21) & 0x10) != 0)
      {
        v18 = *(_DWORD *)(v8 + 160);
        v19 = *((_DWORD *)a2 + 2);
        v13 = __OFADD__(*(_DWORD *)a2, v19);
        v20 = *(_DWORD *)a2 + v19;
        v21 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
        if (!v13)
          v21 = v20;
        v13 = __OFSUB__(v18, v21);
        v22 = v18 - v21;
        v23 = (v18 >> 31) + 0x7FFFFFFF;
        if (!v13)
          v23 = v22;
        *(_DWORD *)a2 = v23;
      }
      else
      {
        v10 = *(_DWORD *)(v8 + 164);
        v11 = *((_DWORD *)a2 + 1);
        v12 = *((_DWORD *)a2 + 3);
        v13 = __OFADD__(v11, v12);
        v14 = v11 + v12;
        v15 = (v11 >> 31) + 0x7FFFFFFF;
        if (!v13)
          v15 = v14;
        v13 = __OFSUB__(v10, v15);
        v16 = v10 - v15;
        v17 = (v10 >> 31) + 0x7FFFFFFF;
        if (!v13)
          v17 = v16;
        *((_DWORD *)a2 + 1) = v17;
      }
    }
  }
  return this;
}

unint64_t WebCore::LegacyInlineBox::flipForWritingMode(WebCore::LegacyInlineBox *this, const WebCore::LayoutPoint *a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  WebCore::LegacyInlineBox *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WebCore::LegacyInlineBox *v20;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    v2 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 45) & 2) != 0)
    v2 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8);
  v3 = (unsigned __int16)*(_DWORD *)(v2 + 124) >> 13;
  v4 = v3 > 5;
  v5 = (1 << v3) & 0x2A;
  if (v4 || v5 == 0)
    return *(_QWORD *)a2;
  v20 = this;
  v8 = (WebCore::LegacyInlineBox *)*((_QWORD *)this + 3);
  if (v8)
  {
    do
    {
      v20 = v8;
      v8 = (WebCore::LegacyInlineBox *)*((_QWORD *)v8 + 3);
    }
    while (v8);
    if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v20 + 88))(v20) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196354738);
    }
  }
  else if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)this + 88))(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19635480CLL);
  }
  v9 = *((_QWORD *)v20 + 4);
  if (v9)
    v9 = *(_QWORD *)(v9 + 8);
  if ((*(_BYTE *)(v9 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963547CCLL);
  }
  if ((*(_BYTE *)(v9 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1963547ECLL);
  }
  v10 = (unsigned __int16)*(_DWORD *)(v9 + 124) >> 13;
  if (v10 <= 5 && ((1 << v10) & 0x2A) != 0)
  {
    if ((*(_BYTE *)(v9 + 21) & 0x10) != 0)
    {
      v17 = *(_DWORD *)(v9 + 160);
      v12 = *((unsigned int *)a2 + 1);
      v15 = __OFSUB__(v17, *(_DWORD *)a2);
      v18 = v17 - *(_DWORD *)a2;
      v11 = (v17 >> 31) + 0x7FFFFFFF;
      if (!v15)
        v11 = v18;
    }
    else
    {
      v13 = *(_DWORD *)(v9 + 164);
      v11 = *(_DWORD *)a2;
      v14 = *((_DWORD *)a2 + 1);
      v15 = __OFSUB__(v13, v14);
      v16 = v13 - v14;
      LODWORD(v12) = (v13 >> 31) + 0x7FFFFFFF;
      if (v15)
        v12 = v12;
      else
        v12 = v16;
    }
  }
  else
  {
    v11 = *(_DWORD *)a2;
    v12 = *((unsigned int *)a2 + 1);
  }
  return v11 | (unint64_t)(v12 << 32);
}

void WebCore::LegacyInlineFlowBox::addToLine(WebCore::LegacyInlineFlowBox *this, WebCore::LegacyInlineBox *a2)
{
  char v4;
  __int16 v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::LegacyInlineFlowBox *v9;
  int v10;
  uint64_t v11;
  char *LineStyle;
  WTF::StringImpl *v13;
  uint64_t v14;
  char *v15;
  _BOOL4 hasMarkers;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  WebCore::LegacyInlineFlowBox *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  int v32;
  WebCore::LegacyInlineBox *v33;
  int v34;
  uint64_t v35;
  int v36;
  WebCore::LegacyInlineFlowBox *v37;
  int v38;
  uint64_t v39;
  int v40;
  WebCore::LegacyInlineBox *v41;
  int v42;
  int v43;
  WebCore::LegacyInlineBox *v44;
  int v45;
  WebCore::RenderElement *v46;
  float v47;
  int v48;
  WebCore::LegacyInlineFlowBox *v49;
  int v50;
  unsigned __int8 v51;
  int v52;
  unsigned __int8 v53;
  char v54;
  char v55;

  *((_QWORD *)a2 + 3) = this;
  if (*((_QWORD *)this + 9))
  {
    v39 = *((_QWORD *)this + 10);
    *(_QWORD *)(v39 + 8) = a2;
    *((_QWORD *)a2 + 2) = v39;
  }
  else
  {
    *((_QWORD *)this + 9) = a2;
  }
  v4 = *((_WORD *)this + 26);
  *((_QWORD *)this + 10) = a2;
  v5 = *((_WORD *)a2 + 26) & 0xFFFE | v4 & 1;
  *((_WORD *)a2 + 26) = v5;
  *((_WORD *)a2 + 26) = v5 & 0xF7FF | *((_WORD *)this + 26) & 0x800;
  if ((*(unsigned int (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)a2 + 80))(a2))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 8) + 32);
    if (v7)
      v7 = *(_QWORD *)(v7 + 8);
    v8 = *((_QWORD *)this + 4);
    if (v8)
      v8 = *(_QWORD *)(v8 + 8);
    if ((*(_BYTE *)(v8 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196354D44);
    }
    if (v7 == v8)
      *((_DWORD *)this + 14) |= 1u;
    v9 = this;
    do
    {
      v10 = *((_DWORD *)v9 + 14);
      if ((v10 & 2) != 0)
        break;
      *((_DWORD *)v9 + 14) = v10 | 2;
      v9 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v9 + 3);
    }
    while (v9);
  }
  else if ((*(unsigned int (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)a2 + 72))(a2)
         && (*((_BYTE *)a2 + 56) & 2) != 0)
  {
    v26 = this;
    do
    {
      v27 = *((_DWORD *)v26 + 14);
      if ((v27 & 2) != 0)
        break;
      *((_DWORD *)v26 + 14) = v27 | 2;
      v26 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v26 + 3);
    }
    while (v26);
  }
  v11 = *((_QWORD *)a2 + 4);
  if ((*((_WORD *)a2 + 26) & 1) != 0)
  {
    LineStyle = WebCore::RenderObject::firstLineStyle(*(WebCore::RenderObject **)(v11 + 8), v6);
  }
  else
  {
    if (v11)
      v11 = *(_QWORD *)(v11 + 8);
    if ((*(_BYTE *)(v11 + 45) & 2) != 0)
    {
      v11 = *(_QWORD *)(v11 + 32);
      if (v11)
        v11 = *(_QWORD *)(v11 + 8);
    }
    LineStyle = (char *)(v11 + 80);
  }
  if ((*(unsigned int (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)a2 + 80))(a2))
  {
    v14 = *((_QWORD *)a2 + 4);
    if ((*((_WORD *)a2 + 26) & 1) != 0)
    {
      v15 = WebCore::RenderObject::firstLineStyle(*(WebCore::RenderObject **)(v14 + 8), v13);
    }
    else
    {
      if (v14)
        v14 = *(_QWORD *)(v14 + 8);
      if ((*(_BYTE *)(v14 + 45) & 2) != 0)
      {
        v14 = *(_QWORD *)(v14 + 32);
        if (v14)
          v14 = *(_QWORD *)(v14 + 8);
      }
      v15 = (char *)(v14 + 80);
    }
    if ((*(unsigned int (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)a2 + 80))(a2))
      hasMarkers = WebCore::LegacyInlineTextBox::hasMarkers(a2);
    else
      hasMarkers = 0;
    if (WebCore::FontCascade::letterSpacing((WebCore::FontCascade *)(*((_QWORD *)v15 + 4) + 32)) < 0.0)
      goto LABEL_94;
    v17 = *((_QWORD *)v15 + 3);
    if (*(_QWORD *)(v17 + 160)
      || WebCore::RenderStyle::textEmphasisMark((WebCore::RenderStyle *)v15)
      || WebCore::RenderStyle::hasPositiveStrokeWidth((WebCore::RenderStyle *)v15)
      || hasMarkers
      || *(_BYTE *)(v17 + 192))
    {
      goto LABEL_94;
    }
    v18 = *(_QWORD *)(*((_QWORD *)v15 + 1) + 40);
    v19 = *(unsigned __int8 *)(v18 + 448);
    v51 = *(_BYTE *)(v18 + 448);
    v52 = 0;
    v55 = 0;
    v53 = *(_BYTE *)(v18 + 456);
    v54 = *(_BYTE *)(v18 + 457);
    if (v53 - 2 >= 9)
    {
      if (v53 == 11)
      {
        v52 = *(_DWORD *)(v18 + 452);
        WebCore::Length::ref(&v52);
        v19 = v51;
      }
    }
    else
    {
      v55 = *(_BYTE *)(v18 + 458);
      v52 = *(_DWORD *)(v18 + 452);
    }
    if (v19)
      v20 = 1;
    else
      v20 = (*(_BYTE *)(*((_QWORD *)v15 + 3) + 236) & 7) != 0;
    if (v53 == 11)
      WebCore::Length::deref((WebCore::Length *)&v52);
    if (v20)
    {
LABEL_94:
      v43 = *((unsigned __int16 *)a2 + 26) | (*((unsigned __int8 *)a2 + 54) << 16);
      v44 = a2;
      do
      {
        *((_BYTE *)v44 + 54) = BYTE2(v43);
        *((_WORD *)v44 + 26) = v43 & 0xDFFF;
        v44 = (WebCore::LegacyInlineBox *)*((_QWORD *)v44 + 3);
        if (!v44)
          break;
        v45 = *((unsigned __int16 *)v44 + 26);
        v43 = v45 | (*((unsigned __int8 *)v44 + 54) << 16);
      }
      while ((v45 & 0x2000) != 0);
    }
  }
  else
  {
    v28 = *((_QWORD *)a2 + 4);
    if (v28)
    {
      v28 = *(_QWORD *)(v28 + 8);
      v29 = v28 + 45;
    }
    else
    {
      v29 = 45;
    }
    if ((*(_BYTE *)v29 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196354DA0);
    }
    v30 = *(_QWORD *)(v28 + 144);
    if (v30 && (*(_BYTE *)(v30 + 25) & 8) != 0)
    {
      v40 = *((unsigned __int16 *)a2 + 26) | (*((unsigned __int8 *)a2 + 54) << 16);
      v41 = a2;
      do
      {
        *((_BYTE *)v41 + 54) = BYTE2(v40);
        *((_WORD *)v41 + 26) = v40 & 0xDFFF;
        v41 = (WebCore::LegacyInlineBox *)*((_QWORD *)v41 + 3);
        if (!v41)
          break;
        v42 = *((unsigned __int16 *)v41 + 26);
        v40 = v42 | (*((unsigned __int8 *)v41 + 54) << 16);
      }
      while ((v42 & 0x2000) != 0);
    }
    else if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)LineStyle + 1) + 16) + 52) & 0xE) != 0
           && WebCore::RenderStyle::outlineWidth((WebCore::RenderStyle *)LineStyle) > 0.0)
    {
      v31 = WebCore::RenderStyle::outlineWidth((WebCore::RenderStyle *)LineStyle);
      if ((float)(v31 + WebCore::RenderStyle::outlineOffset((WebCore::RenderStyle *)LineStyle)) > 0.0)
      {
        v32 = *((unsigned __int16 *)a2 + 26) | (*((unsigned __int8 *)a2 + 54) << 16);
        v33 = a2;
        do
        {
          *((_BYTE *)v33 + 54) = BYTE2(v32);
          *((_WORD *)v33 + 26) = v32 & 0xDFFF;
          v33 = (WebCore::LegacyInlineBox *)*((_QWORD *)v33 + 3);
          if (!v33)
            break;
          v34 = *((unsigned __int16 *)v33 + 26);
          v32 = v34 | (*((unsigned __int8 *)v33 + 54) << 16);
        }
        while ((v34 & 0x2000) != 0);
      }
    }
  }
  v21 = *((_QWORD *)this + 4);
  if ((*((_WORD *)this + 26) & 1) != 0)
  {
    if (v21)
      v46 = *(WebCore::RenderElement **)(v21 + 8);
    else
      v46 = 0;
    if ((*((_BYTE *)v46 + 45) & 8) != 0)
    {
      v22 = WebCore::RenderElement::firstLineStyle(v46, v13);
      goto LABEL_46;
    }
LABEL_114:
    __break(0xC471u);
    JUMPOUT(0x196354D24);
  }
  if (v21)
    v21 = *(_QWORD *)(v21 + 8);
  if ((*(_BYTE *)(v21 + 45) & 8) == 0)
    goto LABEL_114;
  v22 = (char *)(v21 + 80);
LABEL_46:
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v22 + 1) + 16) + 52) & 0xE) != 0
    && WebCore::RenderStyle::outlineWidth((WebCore::RenderStyle *)v22) > 0.0)
  {
    v47 = WebCore::RenderStyle::outlineWidth((WebCore::RenderStyle *)v22);
    if ((float)(v47 + WebCore::RenderStyle::outlineOffset((WebCore::RenderStyle *)v22)) > 0.0)
    {
      v48 = *((unsigned __int16 *)this + 26) | (*((unsigned __int8 *)this + 54) << 16);
      v49 = this;
      do
      {
        *((_BYTE *)v49 + 54) = BYTE2(v48);
        *((_WORD *)v49 + 26) = v48 & 0xDFFF;
        v49 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v49 + 3);
        if (!v49)
          break;
        v50 = *((unsigned __int16 *)v49 + 26);
        v48 = v50 | (*((unsigned __int8 *)v49 + 54) << 16);
      }
      while ((v50 & 0x2000) != 0);
    }
  }
  if ((*((_WORD *)this + 26) & 0x2000) != 0
    && (*(unsigned int (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)a2 + 72))(a2)
    && (*((_WORD *)a2 + 26) & 0x2000) == 0)
  {
    v36 = *((unsigned __int16 *)this + 26) | (*((unsigned __int8 *)this + 54) << 16);
    v37 = this;
    do
    {
      *((_BYTE *)v37 + 54) = BYTE2(v36);
      *((_WORD *)v37 + 26) = v36 & 0xDFFF;
      v37 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v37 + 3);
      if (!v37)
        break;
      v38 = *((unsigned __int16 *)v37 + 26);
      v36 = v38 | (*((unsigned __int8 *)v37 + 54) << 16);
    }
    while ((v38 & 0x2000) != 0);
  }
  v23 = *((_QWORD *)a2 + 4);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 8);
    if (v24)
      v25 = (*(_BYTE *)(v24 + 45) & 0x20) == 0;
    else
      v25 = 1;
    if (!v25)
    {
      v35 = *(_QWORD *)(v24 + 144);
      if (v35)
      {
        if ((*(_BYTE *)(v35 + 25) & 8) != 0)
          *((_DWORD *)this + 14) |= 0x40000u;
      }
    }
  }
}

BOOL WebCore::LegacyInlineTextBox::hasMarkers(WebCore::LegacyInlineTextBox *this)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  unsigned int v4;
  WTF *v5;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL isLineBreak;
  char v15;
  char v16;
  WTF::StringImpl **v17;
  int v18;
  unsigned int v19;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  if ((*(_BYTE *)(v2 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196354F70);
  }
  v12 = *((_QWORD *)this + 9);
  v13 = 0;
  isLineBreak = WebCore::LegacyInlineTextBox::isLineBreak(this);
  v15 = 0;
  v16 = 0;
  WebCore::MarkedText::collectForDocumentMarkers(v2, (uint64_t)&v12, 2, (uint64_t)&v17);
  v4 = v19;
  v5 = (WTF *)v17;
  if (v19)
  {
    v7 = 40 * v19;
    v8 = v17 + 3;
    do
    {
      v9 = *v8;
      *v8 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
        {
          v10 = v8;
          v11 = v7;
          WTF::StringImpl::destroy(v9, v3);
          v8 = v10;
          v7 = v11;
        }
        else
        {
          *(_DWORD *)v9 -= 2;
        }
      }
      v8 += 5;
      v7 -= 40;
    }
    while (v7);
    v5 = (WTF *)v17;
  }
  if (v5)
  {
    v17 = 0;
    v18 = 0;
    WTF::fastFree(v5, v3);
  }
  return v4 != 0;
}

char *WebCore::LegacyInlineFlowBox::lineStyle(WebCore::LegacyInlineFlowBox *this, WTF::StringImpl *a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
  {
    if (this)
      v2 = *((_QWORD *)this + 1);
    else
      v2 = 0;
    if ((*(_BYTE *)(v2 + 45) & 8) != 0)
      return (char *)(v2 + 80);
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x196354FC4);
  }
  if (this)
    this = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 45) & 8) == 0)
    goto LABEL_12;
  return WebCore::RenderElement::firstLineStyle(this, a2);
}

uint64_t WebCore::LegacyInlineFlowBox::deleteLine(WebCore::LegacyInlineFlowBox *this)
{
  _QWORD *v2;
  _QWORD *v4;

  v2 = (_QWORD *)*((_QWORD *)this + 9);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)v2[1];
      (*(void (**)(_QWORD *))(*v2 + 16))(v2);
      v2 = v4;
    }
    while (v4);
  }
  (*(void (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)this + 216))(this);
  return (*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)this + 8))(this);
}

_QWORD *WebCore::LegacyInlineFlowBox::removeLineBoxFromRenderObject(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this[4];
  if (v1)
    v1 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 45) & 8) == 0 || (*(_BYTE *)(v1 + 45) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963550D0);
  }
  if (*(_QWORD **)(v1 + 152) == this)
    *(_QWORD *)(v1 + 152) = this[12];
  if (*(_QWORD **)(v1 + 160) == this)
    *(_QWORD *)(v1 + 160) = this[11];
  v2 = this[12];
  if (v2)
    *(_QWORD *)(v2 + 88) = this[11];
  v3 = this[11];
  if (v3)
    *(_QWORD *)(v3 + 96) = v2;
  return this;
}

_WORD *WebCore::LegacyInlineFlowBox::extractLine(_WORD *this)
{
  _WORD *v1;
  _QWORD *i;

  v1 = this;
  if ((this[26] & 0x200) == 0)
    this = (_WORD *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)this + 200))(this);
  for (i = (_QWORD *)*((_QWORD *)v1 + 9); i; i = (_QWORD *)i[1])
    this = (_WORD *)(*(uint64_t (**)(_QWORD *))(*i + 24))(i);
  return this;
}

uint64_t WebCore::LegacyInlineFlowBox::extractLineBoxFromRenderObject(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;

  v1 = *(_QWORD *)(this + 32);
  if (v1)
    v1 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 45) & 8) == 0 || (*(_BYTE *)(v1 + 45) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963551C0);
  }
  v2 = *(_QWORD *)(this + 88);
  *(_QWORD *)(v1 + 160) = v2;
  if (*(_QWORD *)(v1 + 152) == this)
    *(_QWORD *)(v1 + 152) = 0;
  if (v2)
    *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(this + 88) = 0;
  do
  {
    v4 = *(_WORD *)(this + 52);
    v3 = this + 52;
    *(_WORD *)v3 = v4 | 0x200;
    this = *(_QWORD *)(v3 + 44);
  }
  while (this);
  return this;
}

_WORD *WebCore::LegacyInlineFlowBox::attachLine(_WORD *this)
{
  _WORD *v1;
  _QWORD *i;

  v1 = this;
  if ((this[26] & 0x200) != 0)
    this = (_WORD *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)this + 208))(this);
  for (i = (_QWORD *)*((_QWORD *)v1 + 9); i; i = (_QWORD *)i[1])
    this = (_WORD *)(*(uint64_t (**)(_QWORD *))(*i + 32))(i);
  return this;
}

uint64_t WebCore::LegacyInlineFlowBox::attachLineBoxToRenderObject(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = *(_QWORD *)(this + 32);
  if (v1)
    v1 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 45) & 8) == 0 || (*(_BYTE *)(v1 + 45) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963552C0);
  }
  v2 = *(_QWORD *)(v1 + 160);
  if (v2)
  {
    *(_QWORD *)(v2 + 96) = this;
    *(_QWORD *)(this + 88) = v2;
  }
  else
  {
    *(_QWORD *)(v1 + 152) = this;
  }
  do
  {
    v3 = this;
    v4 = *(_WORD *)(this + 52) & 0xFDFF | (*(unsigned __int8 *)(this + 54) << 16);
    *(_WORD *)(this + 52) &= ~0x200u;
    *(_BYTE *)(this + 54) = BYTE2(v4);
    this = *(_QWORD *)(this + 96);
  }
  while (this);
  *(_QWORD *)(v1 + 160) = v3;
  return this;
}

_DWORD *WebCore::LegacyInlineFlowBox::adjustPosition(WebCore::LegacyInlineFlowBox *this, float a2, float a3)
{
  float v6;
  _QWORD *i;
  _DWORD *result;
  double v9;
  int v10;
  int v11;
  double v12;
  int v13;

  v6 = *((float *)this + 12) + a3;
  *((float *)this + 11) = *((float *)this + 11) + a2;
  *((float *)this + 12) = v6;
  for (i = (_QWORD *)*((_QWORD *)this + 9); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, float, float))(*i + 48))(i, a2, a3);
  result = (_DWORD *)*((_QWORD *)this + 8);
  if (result)
  {
    v9 = a2 * 64.0;
    v10 = 0x80000000;
    if (v9 > -2147483650.0)
      v10 = (int)v9;
    if (v9 < 2147483650.0)
      v11 = v10;
    else
      v11 = 0x7FFFFFFF;
    v12 = a3 * 64.0;
    if (v12 >= 2147483650.0)
    {
      v13 = 0x7FFFFFFF;
    }
    else if (v12 <= -2147483650.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v12;
    }
    return WebCore::RenderOverflow::move(result, v11, v13);
  }
  return result;
}

_DWORD *WebCore::RenderOverflow::move(_DWORD *result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v3 = result[1];
  v4 = result[2];
  v5 = __OFADD__(v3, a2);
  v6 = v3 + a2;
  v7 = (v3 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v7 = v6;
  v5 = __OFADD__(v4, a3);
  v8 = v4 + a3;
  v9 = (v4 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v9 = v8;
  result[1] = v7;
  result[2] = v9;
  v10 = result[5];
  v11 = result[6];
  v5 = __OFADD__(v10, a2);
  v12 = v10 + a2;
  v13 = (v10 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v13 = v12;
  v5 = __OFADD__(v11, a3);
  v14 = v11 + a3;
  v15 = (v11 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v15 = v14;
  result[5] = v13;
  result[6] = v15;
  return result;
}

uint64_t WebCore::LegacyInlineFlowBox::computeOverflow(uint64_t result, void *a2, unsigned int a3, uint64_t **a4)
{
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  const WebCore::FloatRect *v13;
  unint64_t v14;
  WebCore::LegacyInlineBox *i;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;
  int v24;
  const WebCore::FloatRect *v25;
  unint64_t v26;
  _DWORD v27[4];
  unint64_t v28;
  unint64_t v29;
  unint64_t v30[2];

  if ((*(_WORD *)(result + 52) & 0x2000) == 0)
  {
    v6 = a2;
    v7 = result;
    v8 = *(WTF **)(result + 64);
    if (v8)
    {
      *(_QWORD *)(v7 + 64) = 0;
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, a2);
      else
        --*(_DWORD *)v8;
    }
    WebCore::LegacyInlineFlowBox::logicalFrameRectIncludingLineHeight();
    v28 = __PAIR64__(v10, v9);
    v29 = __PAIR64__(v12, v11);
    v30[0] = WebCore::enclosingLayoutRect((WebCore *)&v28, v13);
    v30[1] = v14;
    for (i = *(WebCore::LegacyInlineBox **)(v7 + 72); i; i = (WebCore::LegacyInlineBox *)*((_QWORD *)i + 1))
    {
      v16 = *((_QWORD *)i + 4);
      if (!v16 || (v17 = *(_BYTE *)(*(_QWORD *)(v16 + 8) + 45), (v17 & 2) != 0))
      {
        if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)i + 80))(i) & 1) == 0)
          goto LABEL_26;
        v27[0] = WebCore::LegacyInlineBox::logicalFrameRect(i, v21);
        v27[1] = v22;
        v27[2] = v23;
        v27[3] = v24;
        v28 = WebCore::enclosingLayoutRect((WebCore *)v27, v25);
        v29 = v26;
        WebCore::LegacyInlineFlowBox::addTextBoxVisualOverflow(v7, (uint64_t)i, a4, (int *)&v28);
      }
      else
      {
        if ((v17 & 0x20) == 0)
          continue;
        if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)i + 72))(i) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963555F8);
        }
        WebCore::LegacyInlineFlowBox::computeOverflow(i, v6, a3, a4);
        v18 = *((_QWORD *)i + 4);
        if (v18)
          v18 = *(_QWORD *)(v18 + 8);
        if ((*(_BYTE *)(v18 + 45) & 8) == 0)
        {
LABEL_26:
          __break(0xC471u);
          JUMPOUT(0x1963555D8);
        }
        v19 = *(_QWORD *)(v18 + 144);
        if (v19)
        {
          if ((*(_BYTE *)(v19 + 25) & 8) != 0)
            continue;
        }
        v28 = WebCore::LegacyInlineFlowBox::logicalVisualOverflowRect((uint64_t)i, v6);
        v29 = v20;
      }
      WebCore::LayoutRect::unite((WebCore::LayoutRect *)v30, (const WebCore::LayoutRect *)&v28);
    }
    return WebCore::LegacyInlineFlowBox::setOverflowFromLogicalRects(v7, v30, v6, a3);
  }
  return result;
}

float WebCore::LegacyInlineBox::logicalFrameRect(WebCore::LegacyInlineBox *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  float v3;

  v2 = 48;
  if ((*((_WORD *)this + 26) & 0x800) != 0)
    v2 = 44;
  v3 = *(float *)((char *)this + v2);
  WebCore::LegacyInlineBox::logicalHeight(this, a2);
  return v3;
}

void WebCore::LegacyInlineFlowBox::addTextBoxVisualOverflow(uint64_t a1, uint64_t a2, uint64_t **a3, int *a4)
{
  char *v7;
  char *v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const WebCore::Length *v30;
  uint64_t v31;
  float v32;
  double v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::Length *v43;
  int v44;
  float v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  signed int v52;
  int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  signed int v56;
  int v57;
  signed int v58;
  int v59;
  float *v60;
  float v61;
  double v62;
  int v63;
  int v64;
  const WebCore::LegacyInlineTextBox *v65;
  double v66;
  int v67;
  unsigned int v68;
  int v69;
  BOOL v70;
  int v71;
  float *v72;
  float v73;
  double v74;
  int v75;
  unsigned int v76;
  double v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  double v91;
  unsigned int v92;
  double v93;
  uint64_t v94;
  double v95;
  int v96;
  double v97;
  uint64_t v98;
  unsigned int v99;
  signed int v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  signed int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unsigned int v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  WebCore *v138;
  int v139;
  float v141;
  WebCore::RenderBlockFlow *v142;
  float v143;
  int v144;
  int v145;
  int v146;
  CGFloat v147;
  CGFloat v148;
  CGFloat v149;
  CGFloat v150;
  const CGRect *v151;
  int v152;
  unsigned __int16 *v153;
  const WTF::AtomString *v154;
  void *v155;
  uint64_t v156;
  int v157;
  int v158;
  signed int v159;
  WTF *v160;
  void *v161;
  int v162;
  int v163;
  int v164;
  signed int v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  CGRect v172;

  if ((*(_WORD *)(a2 + 52) & 0x2000) != 0)
    return;
  v7 = WebCore::LegacyInlineFlowBox::lineStyle(*(WebCore::LegacyInlineFlowBox **)(a1 + 32), (WTF::StringImpl *)(*(unsigned __int16 *)(a1 + 52) | (*(unsigned __int8 *)(a1 + 54) << 16)));
  v8 = v7;
  v9 = *a3;
  if (*a3)
  {
    v10 = *((_DWORD *)v9 - 2);
    v11 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = &v9[6 * v14];
    v16 = *v15;
    if (*v15 != a2)
    {
      v17 = 1;
      while (v16)
      {
        v14 = (v14 + v17) & v10;
        v15 = &v9[6 * v14];
        v16 = *v15;
        ++v17;
        if (*v15 == a2)
          goto LABEL_10;
      }
      v15 = &v9[6 * *((unsigned int *)v9 - 1)];
    }
LABEL_10:
    v9 += 6 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v15 = 0;
  }
  v18 = (unsigned __int16)*((_DWORD *)v7 + 11) >> 13;
  v152 = 2;
  switch((unsigned __int16)*((_DWORD *)v7 + 11) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_13;
    case 3:
    case 5:
      v18 = 3;
      goto LABEL_13;
    case 4:
      goto LABEL_14;
    default:
      v18 = 0;
LABEL_13:
      v152 = v18;
LABEL_14:
      if (v15 == v9)
      {
        v25 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
      }
      else
      {
        v19 = ((v152 & 0xFFFFFFFD) == 1) == ((v152 & 6) == 2);
        v20 = 32;
        if (((v152 & 0xFFFFFFFD) == 1) != ((v152 & 6) == 2))
          v21 = 36;
        else
          v21 = 32;
        v22 = *(_DWORD *)((char *)v15 + v21);
        if (v19)
          v20 = 36;
        v23 = *(_DWORD *)((char *)v15 + v20);
        v25 = *((_DWORD *)v15 + 6);
        v24 = *((_DWORD *)v15 + 7);
      }
      v26 = *(_QWORD *)(a2 + 32);
      if (v26)
        v27 = *(_QWORD *)(v26 + 8);
      else
        v27 = 0;
      if ((*(_BYTE *)(v27 + 45) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196355F54);
      }
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 24) + 8) + 40)
                                                         + 8)
                                             + 528)
                                 + 8)
                     + 288))
      {
        if (v26)
          v26 = *(_QWORD *)(v26 + 8);
        if ((*(_BYTE *)(v26 + 45) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196355F94);
        }
        v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8) + 40)
                                                            + 8)
                                                + 528)
                                    + 8)
                        + 288);
        v29 = *(void **)(v28 + 40);
        if (v29)
        {
          v168 = v22;
          v144 = v23;
          v145 = v25;
          v146 = v24;
          if (objc_msgSend(v29, "conformsToProtocol:", &unk_1EE342188))
            v29 = (void *)objc_msgSend(v29, "superview");
          objc_msgSend(v29, "frame");
          v172.origin.x = v147;
          v172.origin.y = v148;
          v172.size.width = v149;
          v172.size.height = v150;
          WebCore::enclosingIntRect(&v172, v151);
          v24 = v146;
          v25 = v145;
          v23 = v144;
          v22 = v168;
        }
        else
        {
          v30 = *(const WebCore::Length **)(v28 + 56);
        }
      }
      else
      {
        v30 = 0;
      }
      v31 = *((_QWORD *)v8 + 3);
      if ((*(_BYTE *)(v31 + 238) & 8) == 0)
      {
        v32 = *(float *)(v31 + 4);
        goto LABEL_36;
      }
      v134 = v22;
      v135 = v23;
      v136 = v25;
      v137 = v24;
      v138 = (WebCore *)(v31 + 244);
      v139 = *(unsigned __int8 *)(v31 + 248);
      if (v139 == 11 || v139 == 4)
      {
        v32 = WebCore::floatValueForLength(v138, v30, (float)(int)v30);
      }
      else
      {
        v32 = 0.0;
        v19 = v139 == 3;
        v24 = v137;
        if (!v19)
          goto LABEL_36;
        if (*(_BYTE *)(v31 + 250))
          v141 = *(float *)v138;
        else
          v141 = (float)*(int *)v138;
        v32 = (float)(v141 * (float)(HIDWORD(v30) + (int)v30)) / 200.0;
      }
      v24 = v137;
      v25 = v136;
      v23 = v135;
      v22 = v134;
LABEL_36:
      v33 = ceilf(v32 * 0.5) * 64.0;
      if (v33 >= 2147483650.0)
      {
        v35 = -2147483647;
        v34 = 0x7FFFFFFF;
      }
      else if (v33 <= -2147483650.0 || (v34 = (int)v33, (int)v33 == 0x80000000))
      {
        v35 = 0x7FFFFFFF;
        v34 = 0x80000000;
      }
      else
      {
        v35 = -v34;
      }
      v36 = v35 - v22;
      if (__OFSUB__(v35, v22))
        v36 = (v35 >> 31) + 0x7FFFFFFF;
      v37 = v34 + v23;
      if (__OFADD__(v34, v23))
        v37 = (v34 >> 31) + 0x7FFFFFFF;
      v38 = v35 - v25;
      if (__OFSUB__(v35, v25))
        v38 = (v35 >> 31) + 0x7FFFFFFF;
      v39 = v34 + v24;
      if (__OFADD__(v34, v24))
        v39 = (v34 >> 31) + 0x7FFFFFFF;
      v40 = *(_QWORD *)(a2 + 32);
      if (v40)
        v40 = *(_QWORD *)(v40 + 8);
      if ((*(_BYTE *)(v40 + 45) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196355F74);
      }
      v41 = *((_QWORD *)v8 + 3);
      if ((*(_BYTE *)(v41 + 231) & 0x1C) == 0)
        goto LABEL_53;
      v167 = v38;
      v165 = v37;
      v166 = v36;
      v132 = *(_DWORD *)(v41 + 232);
      if ((v132 & 0xC) != 0)
      {
        if (((*((_DWORD *)v8 + 11) >> 13) & 6u) - 2 >= 4)
        {
          v133 = v132 & 1;
          goto LABEL_227;
        }
        v133 = (v132 & 0xC) == 8;
      }
      else
      {
        v133 = v132 & 1;
        if (((*((_DWORD *)v8 + 11) >> 13) & 6u) - 2 >= 4)
        {
LABEL_227:
          if ((v132 & 2) != 0)
            goto LABEL_255;
          goto LABEL_228;
        }
      }
      if ((v132 & 4) != 0)
        goto LABEL_255;
LABEL_228:
      v142 = (WebCore::RenderBlockFlow *)WebCore::RenderText::emphasisMarkExistsAndIsAbove(WebCore::RenderText const&,WebCore::RenderStyle const&)::$_0::operator()(*(_QWORD *)(v40 + 32));
      if (v142 && WebCore::RenderBlockFlow::hasLines(v142))
      {
        v37 = v165;
        goto LABEL_282;
      }
LABEL_255:
      v153 = (unsigned __int16 *)(*((_QWORD *)v8 + 4) + 32);
      WebCore::RenderStyle::textEmphasisMarkString((WebCore::RenderStyle *)v8);
      WebCore::FontCascade::getEmphasisMarkGlyphData(v153, v154, (uint64_t)&v172);
      if (!LOBYTE(v172.size.width) || !*(_QWORD *)&v172.origin.y)
        goto LABEL_268;
      v156 = *(_QWORD *)(*(_QWORD *)&v172.origin.y + 8);
      if (**(_DWORD **)&v172.origin.y != 1)
      {
        --**(_DWORD **)&v172.origin.y;
        if (v156)
          goto LABEL_259;
LABEL_268:
        v159 = 0;
        goto LABEL_269;
      }
      WTF::fastFree(*(WTF **)&v172.origin.y, v155);
      if (!v156)
        goto LABEL_268;
LABEL_259:
      v157 = (*(_DWORD *)v156)++;
      v158 = *(_DWORD *)(v156 + 64) + *(_DWORD *)(v156 + 60);
      if (v157)
      {
        *(_DWORD *)v156 = v157;
      }
      else
      {
        WebCore::Font::~Font((WTF **)v156);
        WTF::fastFree(v160, v161);
      }
      if (v158 >= -33554432)
      {
        v159 = v158 << 6;
        if (v158 > 0x1FFFFFF)
          v159 = 0x7FFFFFFF;
      }
      else
      {
        v159 = 0x80000000;
      }
LABEL_269:
      v162 = (unsigned __int16)*((_DWORD *)v8 + 11) >> 13;
      v164 = 2;
      switch((unsigned __int16)*((_DWORD *)v8 + 11) >> 13)
      {
        case 1:
        case 2:
          goto LABEL_271;
        case 3:
        case 5:
          v162 = 3;
          goto LABEL_271;
        case 4:
          goto LABEL_272;
        default:
          v162 = 0;
LABEL_271:
          v164 = v162;
LABEL_272:
          if (v133 == (((v164 & 0xFFFFFFFD) != 1) ^ ((v164 & 6) == 2)))
          {
            if (v159 == 0x80000000)
              v163 = 0x7FFFFFFF;
            else
              v163 = -v159;
            v36 = v166;
            v38 = v167;
            if (v163 < v166)
              v36 = v163;
            v37 = v165;
            goto LABEL_53;
          }
          v37 = v165;
          if (v165 <= v159)
            v37 = v159;
          v38 = v167;
          break;
      }
LABEL_282:
      v36 = v166;
LABEL_53:
      v42 = *((_QWORD *)v8 + 4);
      v43 = (WebCore::Length *)(v42 + 232);
      v44 = *(unsigned __int8 *)(v42 + 236);
      if (v44 == 4)
      {
        if (*(_BYTE *)(v42 + 238))
          v45 = *(float *)v43;
        else
          v45 = (float)*(int *)v43;
      }
      else if (v44 == 3)
      {
        if (*(_BYTE *)(v42 + 238))
          v143 = *(float *)v43;
        else
          v143 = (float)*(int *)v43;
        v45 = (float)(v143 / 100.0) * *(float *)(v42 + 204);
      }
      else
      {
        v45 = 0.0;
        if (v44 == 11)
          WebCore::Length::nonNanCalculatedValue(v43, *(float *)(v42 + 204));
      }
      v46 = (int)v45 & ((int)v45 >> 31);
      if (v46 >= -33554432)
        v47 = v46 << 6;
      else
        v47 = 0x80000000;
      v48 = v39 - v47;
      if (__OFSUB__(v39, v47))
        v48 = (v39 >> 31) + 0x7FFFFFFF;
      v171 = 0;
      LODWORD(v172.origin.x) = 0;
      v49 = *(_QWORD *)(*((_QWORD *)v8 + 3) + 160);
      if (((*((_DWORD *)v8 + 11) >> 13) & 6u) - 2 < 4)
        WebCore::RenderStyle::getShadowHorizontalExtent(v49, (int *)&v172, (int *)&v171);
      else
        WebCore::RenderStyle::getShadowVerticalExtent(v49, (int *)&v172, (int *)&v171);
      v50 = LODWORD(v172.origin.x) + v36;
      if (__OFADD__(LODWORD(v172.origin.x), v36))
        v50 = (LODWORD(v172.origin.x) >> 31) + 0x7FFFFFFF;
      if (v36 >= v50)
        v51 = v50;
      else
        v51 = v36;
      v52 = v171 + v37;
      if (__OFADD__(v171, v37))
        v52 = (v171 >> 31) + 0x7FFFFFFF;
      if (v52 <= v37)
        v53 = v37;
      else
        v53 = v52;
      v169 = 0;
      v170 = 0;
      v54 = *(_QWORD *)(*((_QWORD *)v8 + 3) + 160);
      if (((*((_DWORD *)v8 + 11) >> 13) & 6u) - 2 < 4)
        WebCore::RenderStyle::getShadowVerticalExtent(v54, (int *)&v170, (int *)&v169);
      else
        WebCore::RenderStyle::getShadowHorizontalExtent(v54, (int *)&v170, (int *)&v169);
      v56 = v170 + v38;
      if (__OFADD__(v170, v38))
        v56 = (v170 >> 31) + 0x7FFFFFFF;
      if (v38 >= v56)
        v57 = v56;
      else
        v57 = v38;
      v58 = v169 + v48;
      if (__OFADD__(v169, v48))
        v58 = (v169 >> 31) + 0x7FFFFFFF;
      if (v58 <= v48)
        v59 = v48;
      else
        v59 = v58;
      if ((*(_WORD *)(a2 + 52) & 0x800) != 0)
        v60 = (float *)(a2 + 48);
      else
        v60 = (float *)(a2 + 44);
      v61 = *v60;
      v62 = (float)((float)((float)v51 * 0.015625) + *v60) * 64.0;
      if (v62 >= 2147483650.0)
      {
        v63 = 0x7FFFFFFF;
      }
      else if (v62 <= -2147483650.0)
      {
        v63 = 0x80000000;
      }
      else
      {
        v63 = (int)v62;
      }
      if (a4[1] >= v63)
        v64 = v63;
      else
        v64 = a4[1];
      v66 = (float)((float)((float)v53 * 0.015625)
                  + (float)(v61 + WebCore::LegacyInlineBox::logicalHeight((WebCore::LegacyInlineBox *)a2, v55)))
          * 64.0;
      if (v66 >= 2147483650.0)
      {
        v67 = 0x7FFFFFFF;
      }
      else if (v66 <= -2147483650.0)
      {
        v67 = 0x80000000;
      }
      else
      {
        v67 = (int)v66;
      }
      v68 = a4[1];
      v69 = a4[3];
      v70 = __OFADD__(v68, v69);
      v71 = v68 + v69;
      if (v70)
        v71 = (v68 >> 31) + 0x7FFFFFFF;
      if (v67 <= v71)
        v67 = v71;
      if ((*(_WORD *)(a2 + 52) & 0x800) != 0)
        v72 = (float *)(a2 + 44);
      else
        v72 = (float *)(a2 + 48);
      v73 = *v72;
      v74 = (float)((float)((float)v57 * 0.015625) + *v72) * 64.0;
      if (v74 >= 2147483650.0)
      {
        v75 = 0x7FFFFFFF;
      }
      else if (v74 <= -2147483650.0)
      {
        v75 = 0x80000000;
      }
      else
      {
        v75 = (int)v74;
      }
      v76 = *a4;
      if (*a4 < v75)
        v75 = *a4;
      v77 = (float)((float)((float)v59 * 0.015625) + (float)(v73 + *(float *)(a2 + 40))) * 64.0;
      if (v77 >= 2147483650.0)
      {
        v78 = 0x7FFFFFFF;
      }
      else if (v77 <= -2147483650.0)
      {
        v78 = 0x80000000;
      }
      else
      {
        v78 = (int)v77;
      }
      v79 = a4[2];
      v70 = __OFADD__(v76, v79);
      v80 = v76 + v79;
      if (v70)
        v80 = (v76 >> 31) + 0x7FFFFFFF;
      if (v78 <= v80)
        v78 = v80;
      v81 = v78 - v75;
      if (__OFSUB__(v78, v75))
        v81 = (v78 >> 31) + 0x7FFFFFFF;
      v82 = v67 - v64;
      if (__OFSUB__(v67, v64))
        v82 = (v67 >> 31) + 0x7FFFFFFF;
      *a4 = v75;
      a4[1] = v64;
      a4[2] = v81;
      a4[3] = v82;
      WebCore::LegacyTextBoxPainter::calculateUnionOfAllDocumentMarkerBounds((WebCore::LegacyTextBoxPainter *)a2, v65);
      v87 = *(float *)(a2 + 48);
      if ((*(_WORD *)(a2 + 52) & 0x800) != 0)
        v88 = *(float *)(a2 + 44);
      else
        v88 = *(float *)(a2 + 48);
      if ((*(_WORD *)(a2 + 52) & 0x800) == 0)
        v87 = *(float *)(a2 + 44);
      v89 = v83 + v88;
      v90 = v84 + v87;
      v91 = v89 * 64.0;
      if (v91 >= 2147483650.0)
      {
        v92 = 0x7FFFFFFF;
      }
      else if (v91 <= -2147483650.0)
      {
        v92 = 0x80000000;
      }
      else
      {
        v92 = (int)v91;
      }
      v93 = v90 * 64.0;
      if (v93 >= 2147483650.0)
      {
        v94 = 0x7FFFFFFFLL;
      }
      else if (v93 <= -2147483650.0)
      {
        v94 = 0x80000000;
      }
      else
      {
        v94 = (int)v93;
      }
      v95 = v85 * 64.0;
      if (v95 >= 2147483650.0)
      {
        v96 = 0x7FFFFFFF;
      }
      else if (v95 <= -2147483650.0)
      {
        v96 = 0x80000000;
      }
      else
      {
        v96 = (int)v95;
      }
      v97 = v86 * 64.0;
      if (v97 >= 2147483650.0)
      {
        v98 = 0x7FFFFFFFLL;
      }
      else
      {
        if (v97 <= -2147483650.0)
        {
          v92 = *a4;
          v94 = a4[1];
          v101 = *((_QWORD *)a4 + 1);
          goto LABEL_167;
        }
        v98 = (int)v97;
      }
      v100 = *a4;
      v99 = a4[1];
      v101 = *((_QWORD *)a4 + 1);
      if (v96 < 1 || (int)v98 < 1)
      {
        v92 = *a4;
        v94 = a4[1];
      }
      else if ((int)v101 < 1 || (v102 = HIDWORD(v101), v101 <= 0))
      {
        v101 = v96 | (unint64_t)(v98 << 32);
      }
      else
      {
        if ((int)v92 >= v100)
          v103 = *a4;
        else
          v103 = v92;
        if ((int)v94 >= (int)v99)
          v104 = v99;
        else
          v104 = v94;
        v70 = __OFADD__(v100, (_DWORD)v101);
        v105 = v100 + v101;
        if (v70)
          v105 = (v100 >> 31) + 0x7FFFFFFF;
        v70 = __OFADD__(v92, v96);
        v106 = v92 + v96;
        if (v70)
          v106 = (v92 >> 31) + 0x7FFFFFFF;
        if (v105 <= v106)
          v107 = v106;
        else
          v107 = v105;
        v108 = v99 + v102;
        if (__OFADD__(v99, (_DWORD)v102))
          v108 = (v99 >> 31) + 0x7FFFFFFF;
        v70 = __OFADD__((_DWORD)v94, (_DWORD)v98);
        v109 = v94 + v98;
        if (v70)
          v109 = (v94 >> 31) + 0x7FFFFFFF;
        if (v108 <= v109)
          v110 = v109;
        else
          v110 = v108;
        v111 = v107 - v103;
        if (__OFSUB__(v107, v103))
          v111 = (v107 >> 31) + 0x7FFFFFFF;
        v112 = v111;
        v113 = v110 - v104;
        if (__OFSUB__(v110, (_DWORD)v104))
          v113 = (v110 >> 31) + 0x7FFFFFFF;
        v101 = v112 | (v113 << 32);
        v92 = v103;
        v94 = v104;
      }
LABEL_167:
      *(_QWORD *)a4 = v92 | (unint64_t)(v94 << 32);
      *((_QWORD *)a4 + 1) = v101;
      v114 = (uint64_t *)WebCore::gTextBoxesWithOverflow;
      if (!WebCore::gTextBoxesWithOverflow)
      {
        v114 = (uint64_t *)WTF::fastMalloc((WTF *)8);
        *v114 = 0;
        WebCore::gTextBoxesWithOverflow = (uint64_t)v114;
      }
      v115 = *v114;
      if (*v114
        || (WTF::HashTable<WebCore::LegacyInlineTextBox const*,WTF::KeyValuePair<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect>>,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashMap<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LayoutRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>>::rehash(v114, 8u), (v115 = *v114) != 0))
      {
        v116 = *(_DWORD *)(v115 - 8);
      }
      else
      {
        v116 = 0;
      }
      v117 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v118 = 9 * ((v117 + ~(v117 << 13)) ^ ((v117 + ~(v117 << 13)) >> 8));
      v119 = (v118 ^ (v118 >> 15)) + ~((v118 ^ (v118 >> 15)) << 27);
      v120 = v116 & ((v119 >> 31) ^ v119);
      v121 = (_QWORD *)(v115 + 24 * v120);
      v122 = *v121;
      if (!*v121)
      {
LABEL_180:
        *v121 = a2;
        *(_OWORD *)(v121 + 1) = *(_OWORD *)a4;
        v125 = *v114;
        if (*v114)
          v126 = *(_DWORD *)(v125 - 12) + 1;
        else
          v126 = 1;
        *(_DWORD *)(v125 - 12) = v126;
        v127 = *v114;
        if (*v114)
          v128 = *(_DWORD *)(v127 - 12);
        else
          v128 = 0;
        v129 = (*(_DWORD *)(v127 - 16) + v128);
        v130 = *(unsigned int *)(v127 - 4);
        if (v130 > 0x400)
        {
          if (v130 > 2 * v129)
            return;
        }
        else
        {
          if (3 * v130 > 4 * v129)
            return;
          if (!(_DWORD)v130)
          {
            v131 = 8;
            goto LABEL_192;
          }
        }
        v131 = (_DWORD)v130 << (6 * *(_DWORD *)(v127 - 12) >= (2 * v130));
LABEL_192:
        WTF::HashTable<WebCore::LegacyInlineTextBox const*,WTF::KeyValuePair<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect>>,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashMap<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LayoutRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>>::rehash(v114, v131);
        return;
      }
      v123 = 0;
      v124 = 1;
      while (v122 != a2)
      {
        if (v122 == -1)
          v123 = v121;
        v120 = (v120 + v124) & v116;
        v121 = (_QWORD *)(v115 + 24 * v120);
        v122 = *v121;
        ++v124;
        if (!*v121)
        {
          if (v123)
          {
            *v123 = 0;
            v123[1] = 0;
            v123[2] = 0;
            --*(_DWORD *)(*v114 - 16);
            v121 = v123;
          }
          goto LABEL_180;
        }
      }
      return;
  }
}

